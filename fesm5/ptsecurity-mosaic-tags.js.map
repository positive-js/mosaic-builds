{"version":3,"file":"ptsecurity-mosaic-tags.js","sources":["ng://@ptsecurity/mosaic/tags/tag-default-options.ts","ng://@ptsecurity/mosaic/tags/tag.component.ts","ng://@ptsecurity/mosaic/tags/tag-list.component.ts","ng://@ptsecurity/mosaic/tags/tag-input.ts","ng://@ptsecurity/mosaic/tags/tag.module.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\n\n/** Default options, for the chips module, that can be overridden. */\n// tslint:disable-next-line: naming-convention\nexport interface McTagsDefaultOptions {\n    /** The list of key codes that will trigger a chipEnd event. */\n    separatorKeyCodes: number[];\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MC_TAGS_DEFAULT_OPTIONS = new InjectionToken<McTagsDefaultOptions>('mc-tags-default-options');\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    NgZone,\n    OnDestroy,\n    Output,\n    QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { BACKSPACE, DELETE, SPACE } from '@ptsecurity/cdk/keycodes';\nimport {\n    CanColor,\n    CanColorCtor,\n    CanDisable,\n    CanDisableCtor,\n    mixinColor,\n    mixinDisabled\n} from '@ptsecurity/mosaic/core';\nimport { McIcon } from '@ptsecurity/mosaic/icon';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\n\n// tslint:disable-next-line:naming-convention\nexport interface McTagEvent {\n    tag: McTag;\n}\n\n/** Event object emitted by McTag when selected or deselected. */\nexport class McTagSelectionChange {\n    constructor(public source: McTag, public selected: boolean, public isUserInput = false) {}\n}\n\n\nconst TAG_ATTRIBUTE_NAMES = ['mc-basic-tag'];\n\n/**\n * Dummy directive to add CSS class to tag avatar.\n * @docs-private\n */\n@Directive({\n    selector: 'mc-tag-avatar, [mcTagAvatar]',\n    host: { class: 'mc-tag-avatar' }\n})\nexport class McTagAvatar {}\n\n/**\n * Dummy directive to add CSS class to tag trailing icon.\n * @docs-private\n */\n@Directive({\n    selector: 'mc-tag-trailing-icon, [mcTagTrailingIcon]',\n    host: { class: 'mc-tag-trailing-icon' }\n})\nexport class McTagTrailingIcon {}\n\nexport class McTagBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McTagMixinBase: CanColorCtor & CanDisableCtor & typeof McTagBase = mixinColor(mixinDisabled(McTagBase));\n\n\n@Component({\n    selector: 'mc-tag, [mc-tag], mc-basic-tag, [mc-basic-tag]',\n    exportAs: 'mcTag',\n    templateUrl: 'tag.partial.html',\n    styleUrls: ['./tag.scss'],\n    inputs: ['color', 'disabled'],\n    host: {\n        class: 'mc-tag',\n\n        '[attr.tabindex]': 'tabindex',\n        '[attr.disabled]': 'disabled || null',\n\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': 'hasFocus',\n        '[class.mc-tag-with-avatar]': 'avatar',\n        '[class.mc-tag-with-trailing-icon]': 'trailingIcon || removeIcon',\n        '[class.mc-tag-disabled]': 'disabled',\n        '[class.mc-disabled]': 'disabled',\n\n        '(click)': 'handleClick($event)',\n        '(keydown)': 'handleKeydown($event)',\n        '(focus)': 'focus()',\n        '(blur)': 'blur()'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McTag extends McTagMixinBase implements IFocusableOption, OnDestroy, CanColor, CanDisable {\n    /** Emits when the tag is focused. */\n    readonly onFocus = new Subject<McTagEvent>();\n\n    /** Emits when the tag is blured. */\n    readonly onBlur = new Subject<McTagEvent>();\n\n    nativeElement: HTMLElement;\n\n    /** Whether the tag has focus. */\n    hasFocus: boolean = false;\n\n    /** Whether the tag list is selectable */\n    tagListSelectable: boolean = true;\n\n    @ContentChildren(McIcon) contentChildren: QueryList<McIcon>;\n\n    /** The tag avatar */\n    @ContentChild(McTagAvatar, {static: false}) avatar: McTagAvatar;\n\n    /** The tag's trailing icon. */\n    @ContentChild(McTagTrailingIcon, {static: false}) trailingIcon: McTagTrailingIcon;\n\n    /** The tag's remove toggler. */\n    @ContentChild(forwardRef(() => McTagRemove), {static: false}) removeIcon: McTagRemove;\n\n    /** Emitted when the tag is selected or deselected. */\n    @Output() readonly selectionChange: EventEmitter<McTagSelectionChange> =\n        new EventEmitter<McTagSelectionChange>();\n\n    /** Emitted when the tag is destroyed. */\n    @Output() readonly destroyed: EventEmitter<McTagEvent> = new EventEmitter<McTagEvent>();\n\n    /** Emitted when a tag is to be removed. */\n    @Output() readonly removed: EventEmitter<McTagEvent> = new EventEmitter<McTagEvent>();\n\n    /** Whether the tag is selected. */\n    @Input()\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    set selected(value: boolean) {\n        const coercedValue = coerceBooleanProperty(value);\n\n        if (coercedValue !== this._selected) {\n            this._selected = coercedValue;\n            this.dispatchSelectionChange();\n        }\n    }\n\n    private _selected: boolean = false;\n\n    /** The value of the tag. Defaults to the content inside `<mc-tag>` tags. */\n    @Input()\n    get value(): any {\n        return this._value !== undefined\n            ? this._value\n            : this.elementRef.nativeElement.textContent;\n    }\n\n    set value(value: any) {\n        this._value = value;\n    }\n\n    private _value: any;\n\n    /**\n     * Whether or not the tag is selectable. When a tag is not selectable,\n     * changes to its selected state are always ignored. By default a tag is\n     * selectable, and it becomes non-selectable if its parent tag list is\n     * not selectable.\n     */\n    @Input()\n    get selectable(): boolean {\n        return this._selectable && this.tagListSelectable;\n    }\n\n    set selectable(value: boolean) {\n        this._selectable = coerceBooleanProperty(value);\n    }\n\n    private _selectable: boolean = true;\n\n    /**\n     * Determines whether or not the tag displays the remove styling and emits (removed) events.\n     */\n    @Input()\n    get removable(): boolean {\n        return this._removable;\n    }\n\n    set removable(value: boolean) {\n        this._removable = coerceBooleanProperty(value);\n    }\n\n    private _removable: boolean = true;\n\n    get tabindex(): any {\n        if (!this.selectable) { return null; }\n\n        return this.disabled ? null : -1;\n    }\n\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value !== this.disabled) {\n            this._disabled = value;\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    constructor(\n        public elementRef: ElementRef,\n        public changeDetectorRef: ChangeDetectorRef,\n        private _ngZone: NgZone\n    ) {\n        super(elementRef);\n\n        this.addHostClassName();\n\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        this.addClassModificatorForIcons();\n    }\n\n    addClassModificatorForIcons() {\n        const icons = this.contentChildren.map((item) => item._elementRef.nativeElement);\n\n        if (icons.length === 1) {\n            const iconElement = icons[0];\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-left-icon');\n                }\n\n                if (iconElement.previousSibling) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-right-icon');\n                }\n            }\n        } else if (icons.length > 1) {\n            const firstIconElement = icons[0];\n            const secondIconElement = icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n\n    addHostClassName() {\n        // Add class for the different tags\n        for (const attr of TAG_ATTRIBUTE_NAMES) {\n            if (\n                this.elementRef.nativeElement.hasAttribute(attr) ||\n                this.elementRef.nativeElement.tagName.toLowerCase() === attr\n            ) {\n                    (this.elementRef.nativeElement as HTMLElement).classList.add(attr);\n\n                    return;\n            }\n        }\n        (this.elementRef.nativeElement as HTMLElement).classList.add('mc-standard-tag');\n    }\n\n    ngOnDestroy() {\n        this.destroyed.emit({ tag: this });\n    }\n\n    select(): void {\n        if (!this._selected) {\n            this._selected = true;\n            this.dispatchSelectionChange();\n        }\n    }\n\n    deselect(): void {\n        if (this._selected) {\n            this._selected = false;\n            this.dispatchSelectionChange();\n        }\n    }\n\n    selectViaInteraction(): void {\n        if (!this._selected) {\n            this._selected = true;\n            this.dispatchSelectionChange(true);\n        }\n    }\n\n    toggleSelected(isUserInput: boolean = false): boolean {\n        this._selected = !this.selected;\n        this.dispatchSelectionChange(isUserInput);\n\n        return this.selected;\n    }\n\n    /** Allows for programmatic focusing of the tag. */\n    focus(): void {\n        if (!this.selectable) { return; }\n\n        if (!this.hasFocus) {\n            this.elementRef.nativeElement.focus();\n\n            this.onFocus.next({ tag: this });\n\n            Promise.resolve().then(() => {\n                this.hasFocus = true;\n                this.changeDetectorRef.markForCheck();\n            });\n        }\n    }\n\n    /**\n     * Allows for programmatic removal of the tag. Called by the McTagList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the tag from the DOM.\n     */\n    remove(): void {\n        if (this.removable) {\n            this.removed.emit({ tag: this });\n        }\n    }\n\n    handleClick(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n        } else {\n            event.stopPropagation();\n        }\n    }\n\n    handleKeydown(event: KeyboardEvent): void {\n        if (this.disabled) { return; }\n\n        // tslint:disable-next-line: deprecation\n        switch (event.keyCode) {\n            case DELETE:\n            case BACKSPACE:\n                // If we are removable, remove the focused tag\n                this.remove();\n                // Always prevent so page navigation does not occur\n                event.preventDefault();\n                break;\n            case SPACE:\n                // If we are selectable, toggle the focused tag\n                if (this.selectable) {\n                    this.toggleSelected(true);\n                }\n\n                // Always prevent space from scrolling the page since the list has focus\n                event.preventDefault();\n                break;\n            default:\n        }\n    }\n\n    blur(): void {\n        // When animations are enabled, Angular may end up removing the tag from the DOM a little\n        // earlier than usual, causing it to be blurred and throwing off the logic in the tag list\n        // that moves focus not the next item. To work around the issue, we defer marking the tag\n        // as not focused until the next time the zone stabilizes.\n        this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                this._ngZone.run(() => {\n                    this.hasFocus = false;\n                    this.onBlur.next({ tag: this });\n                });\n            });\n    }\n\n    private dispatchSelectionChange(isUserInput = false) {\n        this.selectionChange.emit({\n            source: this,\n            isUserInput,\n            selected: this._selected\n        });\n    }\n}\n\n\n/**\n *\n * Example:\n *\n *     `<mc-tag>\n *       <mc-icon mcTagRemove>cancel</mc-icon>\n *     </mc-tag>`\n *\n * You *may* use a custom icon, but you may need to override the `mc-tag-remove` positioning\n * styles to properly center the icon within the tag.\n */\n@Directive({\n    selector: '[mcTagRemove]',\n    host: {\n        class: 'mc-tag-remove mc-tag-trailing-icon',\n        '[attr.tabindex]': '-1',\n        '(click)': 'handleClick($event)',\n        '(focus)': 'focus($event)'\n    }\n})\nexport class McTagRemove {\n    constructor(protected parentTag: McTag) {}\n\n    focus($event): void {\n        $event.stopPropagation();\n    }\n\n    /** Calls the parent tag's public `remove()` method if applicable. */\n    handleClick(event: Event): void {\n        if (this.parentTag.removable) {\n            this.parentTag.remove();\n        }\n\n        // We need to stop event propagation because otherwise the event will bubble up to the\n        // form field and cause the `onContainerClick` method to be invoked. This method would then\n        // reset the focused tag that has been focused after tag removal. Usually the parent\n        // the parent click listener of the `McTag` would prevent propagation, but it can happen\n        // that the tag is being removed before the event bubbles up.\n        event.stopPropagation();\n    }\n}\n","import { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Input,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    Self,\n    ViewEncapsulation\n} from '@angular/core';\nimport {\n    ControlValueAccessor,\n    FormControlName,\n    FormGroupDirective,\n    NG_VALIDATORS,\n    NgControl,\n    NgForm,\n    NgModel,\n    Validator\n} from '@angular/forms';\nimport { FocusKeyManager } from '@ptsecurity/cdk/a11y';\nimport { BACKSPACE, END, HOME } from '@ptsecurity/cdk/keycodes';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    MC_VALIDATION,\n    McValidationOptions,\n    mixinErrorState,\n    setMosaicValidation\n} from '@ptsecurity/mosaic/core';\nimport { McCleaner, McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { merge, Observable, Subject, Subscription } from 'rxjs';\nimport { startWith, takeUntil } from 'rxjs/operators';\n\nimport { McTagTextControl } from './tag-text-control';\nimport { McTag, McTagEvent, McTagSelectionChange } from './tag.component';\n\n\nexport class McTagListBase {\n    constructor(\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McTagListMixinBase: CanUpdateErrorStateCtor & typeof McTagListBase = mixinErrorState(McTagListBase);\n\n\n// Increasing integer for generating unique ids for tag-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the tag list value has changed. */\nexport class McTagListChange {\n    constructor(public source: McTagList, public value: any) {}\n}\n\n\n@Component({\n    selector: 'mc-tag-list',\n    exportAs: 'mcTagList',\n    templateUrl: 'tag-list.partial.html',\n    host: {\n        class: 'mc-tag-list',\n        '[attr.tabindex]': 'disabled ? null : _tabIndex',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-invalid]': 'errorState',\n        '[class.mc-required]': 'required',\n        '(focus)': 'focus()',\n        '(blur)': 'blur()',\n        '(keydown)': 'keydown($event)',\n        '[id]': 'uid'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McTagList }],\n    styleUrls: ['tag-list.scss'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McTagList extends McTagListMixinBase implements McFormFieldControl<any>,\n    ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n\n    readonly controlType: string = 'mc-tag-list';\n\n    /** Combined stream of all of the child tags' selection change events. */\n    get tagSelectionChanges(): Observable<McTagSelectionChange> {\n        return merge(...this.tags.map((tag) => tag.selectionChange));\n    }\n\n    /** Combined stream of all of the child tags' focus change events. */\n    get tagFocusChanges(): Observable<McTagEvent> {\n        return merge(...this.tags.map((tag) => tag.onFocus));\n    }\n\n    /** Combined stream of all of the child tags' blur change events. */\n    get tagBlurChanges(): Observable<McTagEvent> {\n        return merge(...this.tags.map((tag) => tag.onBlur));\n    }\n\n    /** Combined stream of all of the child tags' remove change events. */\n    get tagRemoveChanges(): Observable<McTagEvent> {\n        return merge(...this.tags.map((tag) => tag.destroyed));\n    }\n\n    /** The array of selected tags inside tag list. */\n    get selected(): McTag[] | McTag {\n        return this.multiple ? this.selectionModel.selected : this.selectionModel.selected[0];\n    }\n\n    get canShowCleaner(): boolean {\n        return this.cleaner && this.tags.length > 0;\n    }\n\n    /** Whether the user should be allowed to select multiple tags. */\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith(): (o1: any, o2: any) => boolean {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        this._compareWith = fn;\n\n        if (this.selectionModel) {\n            // A different comparator means the selection could change.\n            this.initializeSelection();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): any {\n        return this._value;\n    }\n\n    set value(value: any) {\n        this.writeValue(value);\n        this._value = value;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get id(): string {\n        return this.tagInput ? this.tagInput.id : this.uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n\n        this.stateChanges.next();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get placeholder(): string {\n        return this.tagInput ? this.tagInput.placeholder : this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n\n    /** Whether any tags or the mcTagInput inside of this tag-list has focus. */\n    get focused(): boolean {\n        return (this.tagInput && this.tagInput.focused) || this.hasFocusedTag();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return (!this.tagInput || this.tagInput.empty) && this.tags.length === 0;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat(): boolean {\n        return !this.empty || this.focused;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        return this.ngControl ? !!this.ngControl.disabled : this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n        this.syncTagsDisabledState();\n    }\n\n    /**\n     * Whether or not this tag list is selectable. When a tag list is not selectable,\n     * the selected states for all the tags inside the tag list are always ignored.\n     */\n    @Input()\n    get selectable(): boolean {\n        return this._selectable;\n    }\n\n    set selectable(value: boolean) {\n        this._selectable = coerceBooleanProperty(value);\n\n        if (this.tags) {\n            this.tags.forEach((tag) => tag.tagListSelectable = this._selectable);\n        }\n    }\n\n    @Input()\n    set tabIndex(value: number) {\n        this.userTabIndex = value;\n        this._tabIndex = value;\n    }\n\n    /**\n     * Event that emits whenever the raw value of the tag-list changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    uid: string = `mc-tag-list-${nextUniqueId++}`;\n\n    /**\n     * User defined tab index.\n     * When it is not null, use user defined tab index. Otherwise use tabIndex\n     */\n    userTabIndex: number | null = null;\n\n    keyManager: FocusKeyManager<McTag>;\n\n    selectionModel: SelectionModel<McTag>;\n\n    tagChanges = new EventEmitter<any>();\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /** Orientation of the tag list. */\n    @Input('orientation') orientation: 'horizontal' | 'vertical' = 'horizontal';\n\n    /** Event emitted when the selected tag list value has been changed by the user. */\n    @Output() readonly change: EventEmitter<McTagListChange> = new EventEmitter<McTagListChange>();\n\n    @ContentChild('mcTagListCleaner', { static: true }) cleaner: McCleaner;\n\n    /** The tag components contained within this tag list. */\n    @ContentChildren(McTag, {\n        // Need to use `descendants: true`,\n        // Ivy will no longer match indirect descendants if it's left as false.\n        descendants: true\n    }) tags: QueryList<McTag>;\n\n    // tslint:disable-next-line: naming-convention orthodox-getter-and-setter\n    _tabIndex = 0;\n\n    private _value: any;\n\n    private _required: boolean = false;\n\n    private _placeholder: string;\n\n    private _disabled: boolean = false;\n\n    private _selectable: boolean = true;\n\n    /** The tag input to add more tags */\n    private tagInput: McTagTextControl;\n\n    private _multiple: boolean = false;\n\n    /**\n     * When a tag is destroyed, we store the index of the destroyed tag until the tags\n     * query list notifies about the update. This is necessary because we cannot determine an\n     * appropriate tag that should receive focus until the array of tags updated completely.\n     */\n    private lastDestroyedTagIndex: number | null = null;\n\n    /** Subject that emits when the component has been destroyed. */\n    private destroyed = new Subject<void>();\n\n    /** Subscription to focus changes in the tags. */\n    private tagFocusSubscription: Subscription | null;\n\n    /** Subscription to blur changes in the tags. */\n    private tagBlurSubscription: Subscription | null;\n\n    /** Subscription to selection changes in tags. */\n    private tagSelectionSubscription: Subscription | null;\n\n    /** Subscription to remove changes in tags. */\n    private tagRemoveSubscription: Subscription | null;\n\n    constructor(\n        protected elementRef: ElementRef<HTMLElement>,\n        private changeDetectorRef: ChangeDetectorRef,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        @Optional() @Inject(NG_VALIDATORS) public rawValidators: Validator[],\n        @Optional() @Inject(MC_VALIDATION) private mcValidation: McValidationOptions,\n        @Optional() private dir: Directionality,\n        @Optional() parentForm: NgForm,\n        @Optional() parentFormGroup: FormGroupDirective,\n        @Optional() @Self() ngControl: NgControl,\n        @Optional() @Self() public ngModel: NgModel,\n        @Optional() @Self() public formControlName: FormControlName\n    ) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            this.ngControl.valueAccessor = this;\n        }\n    }\n\n    ngAfterContentInit() {\n        if (this.mcValidation.useValidation) {\n            setMosaicValidation(this);\n        }\n\n        this.keyManager = new FocusKeyManager<McTag>(this.tags)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this.dir ? this.dir.value : 'ltr');\n\n        if (this.dir) {\n            this.dir.change\n                .pipe(takeUntil(this.destroyed))\n                .subscribe((dir) => this.keyManager.withHorizontalOrientation(dir));\n        }\n\n        // Prevents the tag list from capturing focus and redirecting\n        // it back to the first tag when the user tabs out.\n        this.keyManager.tabOut\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(() => {\n                this._tabIndex = -1;\n\n                setTimeout(() => {\n                    this._tabIndex = this.userTabIndex || 0;\n                    this.changeDetectorRef.markForCheck();\n                });\n            });\n\n        // When the list changes, re-subscribe\n        this.tags.changes\n            .pipe(startWith(null), takeUntil(this.destroyed))\n            .subscribe(() => {\n                if (this.disabled) {\n                    // Since this happens after the content has been\n                    // checked, we need to defer it to the next tick.\n                    Promise.resolve().then(() => { this.syncTagsDisabledState(); });\n                }\n\n                this.resetTags();\n\n                // Reset tags selected/deselected status\n                this.initializeSelection();\n\n                // Check to see if we need to update our tab index\n                this.updateTabIndex();\n\n                // Check to see if we have a destroyed tag and need to refocus\n                this.updateFocusForDestroyedTags();\n\n                // Defer setting the value in order to avoid the \"Expression\n                // has changed after it was checked\" errors from Angular.\n                Promise.resolve().then(() => {\n                    this.tagChanges.emit(this.tags.toArray());\n                    this.stateChanges.next();\n                    this.propagateTagsChanges();\n                });\n            });\n    }\n\n    ngOnInit() {\n        this.selectionModel = new SelectionModel<McTag>(this.multiple, undefined, false);\n        this.stateChanges.next();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroyed.next();\n        this.destroyed.complete();\n        this.stateChanges.complete();\n\n        this.dropSubscriptions();\n    }\n\n    // tslint:disable-next-line:no-empty\n    onTouched = () => {};\n\n    // tslint:disable-next-line:no-empty\n    onChange: (value: any) => void = () => {};\n\n    /** Associates an HTML input element with this tag list. */\n    registerInput(inputElement: McTagTextControl): void {\n        this.tagInput = inputElement;\n\n        // todo need rethink about it\n        if (this.ngControl && inputElement.ngControl) {\n            inputElement.ngControl.statusChanges!\n                .subscribe(() => this.ngControl.control!.setErrors(inputElement.ngControl!.errors));\n        }\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any): void {\n        if (this.tags) {\n            this.setSelectionByValue(value, false);\n        }\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this.onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n        this.stateChanges.next();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick(event: MouseEvent) {\n        if (!this.originatesFromTag(event)) {\n            this.focus();\n        }\n    }\n\n    /**\n     * Focuses the first non-disabled tag in this tag list, or the associated input when there\n     * are no eligible tags.\n     */\n    focus(): void {\n        if (this.disabled) { return; }\n\n        // TODO: ARIA says this should focus the first `selected` tag if any are selected.\n        // Focus on first element if there's no tagInput inside tag-list\n        if (this.tagInput && this.tagInput.focused) {\n            // do nothing\n        } else if (this.tags.length > 0) {\n            this.keyManager.setFirstItemActive();\n            this.stateChanges.next();\n        } else {\n            this.focusInput();\n            this.stateChanges.next();\n        }\n    }\n\n    /** Attempt to focus an input if we have one. */\n    focusInput() {\n        if (this.tagInput) {\n            this.tagInput.focus();\n        }\n    }\n\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n    keydown(event: KeyboardEvent) {\n        const target = event.target as HTMLElement;\n\n        // If they are on an empty input and hit backspace, focus the last tag\n        // tslint:disable-next-line: deprecation\n        if (event.keyCode === BACKSPACE && this.isInputEmpty(target)) {\n            this.keyManager.setLastItemActive();\n            event.preventDefault();\n        } else if (target && target.classList.contains('mc-tag')) {\n            // tslint:disable-next-line: deprecation\n            if (event.keyCode === HOME) {\n                this.keyManager.setFirstItemActive();\n                event.preventDefault();\n            // tslint:disable-next-line: deprecation\n            } else if (event.keyCode === END) {\n                this.keyManager.setLastItemActive();\n                event.preventDefault();\n            } else {\n                this.keyManager.onKeydown(event);\n            }\n\n            this.stateChanges.next();\n        }\n    }\n\n    setSelectionByValue(value: any, isUserInput: boolean = true) {\n        this.clearSelection();\n        this.tags.forEach((tag) => tag.deselect());\n\n        if (Array.isArray(value)) {\n            value.forEach((currentValue) => this.selectValue(currentValue, isUserInput));\n            this.sortValues();\n        } else {\n            const correspondingTag = this.selectValue(value, isUserInput);\n\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what tag the user interacted with last.\n            if (correspondingTag && isUserInput) {\n                this.keyManager.setActiveItem(correspondingTag);\n            }\n        }\n    }\n\n    /** When blurred, mark the field as touched when focus moved outside the tag list. */\n    blur() {\n        if (!this.hasFocusedTag()) {\n            this.keyManager.setActiveItem(-1);\n        }\n\n        if (!this.disabled) {\n            if (this.tagInput) {\n                // If there's a tag input, we should check whether the focus moved to tag input.\n                // If the focus is not moved to tag input, mark the field as touched. If the focus moved\n                // to tag input, do nothing.\n                // Timeout is needed to wait for the focus() event trigger on tag input.\n                setTimeout(() => {\n                    if (!this.focused) {\n                        this.markAsTouched();\n                    }\n                });\n            } else {\n                // If there's no tag input, then mark the field as touched.\n                this.markAsTouched();\n            }\n        }\n    }\n\n    /** Mark the field as touched */\n    markAsTouched() {\n        this.onTouched();\n        this.changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     */\n    protected updateTabIndex(): void {\n        // If we have 0 tags, we should not allow keyboard focus\n        this._tabIndex = this.userTabIndex || (this.tags.length === 0 ? -1 : 0);\n    }\n\n    /**\n     * If the amount of tags changed, we need to update the\n     * key manager state and focus the next closest tag.\n     */\n    protected updateFocusForDestroyedTags() {\n        if (this.lastDestroyedTagIndex != null) {\n            if (this.tags.length) {\n                const newTagIndex = Math.min(this.lastDestroyedTagIndex, this.tags.length - 1);\n                this.keyManager.setActiveItem(newTagIndex);\n            } else {\n                this.focusInput();\n            }\n        }\n\n        this.lastDestroyedTagIndex = null;\n    }\n\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of tags.\n     */\n    private isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.tags.length;\n    }\n\n    private isInputEmpty(element: HTMLElement): boolean {\n        if (element && element.nodeName.toLowerCase() === 'input') {\n            const input = element as HTMLInputElement;\n\n            return !input.value;\n        }\n\n        return false;\n    }\n\n    /**\n     * Finds and selects the tag based on its value.\n     * @returns Tag that has the corresponding value.\n     */\n    private selectValue(value: any, isUserInput: boolean = true): McTag | undefined {\n\n        const correspondingTag = this.tags.find((tag) => {\n            return tag.value != null && this._compareWith(tag.value, value);\n        });\n\n        if (correspondingTag) {\n            if (isUserInput) {\n                correspondingTag.selectViaInteraction();\n            } else {\n                correspondingTag.select();\n            }\n\n            this.selectionModel.select(correspondingTag);\n        }\n\n        return correspondingTag;\n    }\n\n    private initializeSelection(): void {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl || this._value) {\n                this.setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n                this.stateChanges.next();\n            }\n        });\n    }\n\n    /**\n     * Deselects every tag in the list.\n     * @param skip Tag that should not be deselected.\n     */\n    private clearSelection(skip?: McTag): void {\n        this.selectionModel.clear();\n        this.tags.forEach((tag) => {\n            if (tag !== skip) {\n                tag.deselect();\n            }\n        });\n        this.stateChanges.next();\n    }\n\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     */\n    private sortValues(): void {\n        if (this._multiple) {\n            this.selectionModel.clear();\n\n            this.tags.forEach((tag) => {\n                if (tag.selected) {\n                    this.selectionModel.select(tag);\n                }\n            });\n            this.stateChanges.next();\n        }\n    }\n\n    /** Emits change event to set the model value. */\n    // todo need rethink this method and selection logic\n    private propagateChanges(fallbackValue?: any): void {\n        let valueToEmit: any = null;\n\n        if (Array.isArray(this.selected)) {\n            valueToEmit = this.selected.map((tag) => tag.value);\n        } else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.change.emit(new McTagListChange(this, valueToEmit));\n        this.valueChange.emit(valueToEmit);\n        this.onChange(valueToEmit);\n        this.changeDetectorRef.markForCheck();\n    }\n\n    private propagateTagsChanges(): void {\n        const valueToEmit: any = this.tags.map((tag) => tag.value);\n\n        this._value = valueToEmit;\n        this.change.emit(new McTagListChange(this, valueToEmit));\n        this.valueChange.emit(valueToEmit);\n        this.onChange(valueToEmit);\n        this.changeDetectorRef.markForCheck();\n    }\n\n    private resetTags() {\n        this.dropSubscriptions();\n        this.listenToTagsFocus();\n        this.listenToTagsSelection();\n        this.listenToTagsRemoved();\n    }\n\n    private dropSubscriptions() {\n        if (this.tagFocusSubscription) {\n            this.tagFocusSubscription.unsubscribe();\n            this.tagFocusSubscription = null;\n        }\n\n        if (this.tagBlurSubscription) {\n            this.tagBlurSubscription.unsubscribe();\n            this.tagBlurSubscription = null;\n        }\n\n        if (this.tagSelectionSubscription) {\n            this.tagSelectionSubscription.unsubscribe();\n            this.tagSelectionSubscription = null;\n        }\n\n        if (this.tagRemoveSubscription) {\n            this.tagRemoveSubscription.unsubscribe();\n            this.tagRemoveSubscription = null;\n        }\n    }\n\n    /** Listens to user-generated selection events on each tag. */\n    private listenToTagsSelection(): void {\n        this.tagSelectionSubscription = this.tagSelectionChanges.subscribe((event) => {\n            if (event.source.selected) {\n                this.selectionModel.select(event.source);\n            } else {\n                this.selectionModel.deselect(event.source);\n            }\n\n            // For single selection tag list, make sure the deselected value is unselected.\n            if (!this.multiple) {\n                this.tags.forEach((tag) => {\n                    if (!this.selectionModel.isSelected(tag) && tag.selected) {\n                        tag.deselect();\n                    }\n                });\n            }\n\n            if (event.isUserInput) {\n                this.propagateChanges();\n            }\n        });\n    }\n\n    /** Listens to user-generated selection events on each tag. */\n    private listenToTagsFocus(): void {\n        this.tagFocusSubscription = this.tagFocusChanges.subscribe((event) => {\n            const tagIndex: number = this.tags.toArray().indexOf(event.tag);\n\n            if (this.isValidIndex(tagIndex)) {\n                this.keyManager.updateActiveItem(tagIndex);\n            }\n\n            this.stateChanges.next();\n        });\n\n        this.tagBlurSubscription = this.tagBlurChanges.subscribe(() => {\n            this.blur();\n            this.stateChanges.next();\n        });\n    }\n\n    private listenToTagsRemoved(): void {\n        this.tagRemoveSubscription = this.tagRemoveChanges.subscribe((event) => {\n            const tag = event.tag;\n            const tagIndex = this.tags.toArray().indexOf(event.tag);\n\n            // In case the tag that will be removed is currently focused, we temporarily store\n            // the index in order to be able to determine an appropriate sibling tag that will\n            // receive focus.\n            if (this.isValidIndex(tagIndex) && tag.hasFocus) {\n                this.lastDestroyedTagIndex = tagIndex;\n            } else if (this.isValidIndex(tagIndex) && !tag.hasFocus) {\n                this.focusInput();\n            }\n        });\n    }\n\n    /** Checks whether an event comes from inside a tag element. */\n    private originatesFromTag(event: Event): boolean {\n        let currentElement = event.target as HTMLElement | null;\n\n        while (currentElement && currentElement !== this.elementRef.nativeElement) {\n            if (currentElement.classList.contains('mc-tag')) { return true; }\n\n            currentElement = currentElement.parentElement;\n        }\n\n        return false;\n    }\n\n    /** Checks whether any of the tags is focused. */\n    private hasFocusedTag() {\n        return this.tags.some((tag) => tag.hasFocus);\n    }\n\n    /** Syncs the list's disabled state with the individual tags. */\n    private syncTagsDisabledState() {\n        if (this.tags) {\n            this.tags.forEach((tag) => {\n                tag.disabled = this._disabled;\n            });\n        }\n    }\n}\n\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Input,\n    OnChanges,\n    Optional,\n    Output,\n    Renderer2,\n    Self\n} from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { hasModifierKey, ENTER, TAB, SPACE, COMMA } from '@ptsecurity/cdk/keycodes';\n\nimport { MC_TAGS_DEFAULT_OPTIONS, McTagsDefaultOptions } from './tag-default-options';\nimport { McTagList } from './tag-list.component';\nimport { McTagTextControl } from './tag-text-control';\n\n\n/** Represents an input event on a `mcTagInput`. */\n// tslint:disable-next-line: naming-convention\nexport interface McTagInputEvent {\n    /** The native `<input>` element that the event is being fired for. */\n    input: HTMLInputElement;\n\n    /** The value of the input. */\n    value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds tag-specific behaviors to an input element inside `<mc-form-field>`.\n * May be placed inside or outside of an `<mc-tag-list>`.\n */\n@Directive({\n    selector: 'input[mcTagInputFor]',\n    exportAs: 'mcTagInput, mcTagInputFor',\n    host: {\n        class: 'mc-tag-input mc-input-element',\n        '[id]': 'id',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.placeholder]': 'placeholder || null',\n        '(keydown)': 'keydown($event)',\n        '(blur)': 'blur()',\n        '(focus)': 'onFocus()',\n        '(input)': 'onInput()',\n        '(paste)': 'onPaste($event)'\n    }\n})\nexport class McTagInput implements McTagTextControl, OnChanges {\n    /** Whether the control is focused. */\n    focused: boolean = false;\n\n    /**\n     * The list of key codes that will trigger a tagEnd event.\n     *\n     * Defaults to `[ENTER]`.\n     */\n    @Input('mcTagInputSeparatorKeyCodes')\n    separatorKeyCodes: number[] = this.defaultOptions.separatorKeyCodes;\n\n    /** Emitted when a tag is to be added. */\n    @Output('mcTagInputTokenEnd')\n    tagEnd: EventEmitter<McTagInputEvent> = new EventEmitter<McTagInputEvent>();\n\n    /** The input's placeholder text. */\n    @Input() placeholder: string = '';\n\n    /** Unique id for the input. */\n    @Input() id: string = `mc-tag-list-input-${nextUniqueId++}`;\n\n    /** Register input for tag list */\n    @Input('mcTagInputFor')\n    set tagList(value: McTagList) {\n        if (value) {\n            this._tagList = value;\n            this._tagList.registerInput(this);\n        }\n    }\n\n    // tslint:disable-next-line: naming-convention\n    private _tagList: McTagList;\n\n    /**\n     * Whether or not the tagEnd event will be emitted when the input is blurred.\n     */\n    @Input('mcTagInputAddOnBlur')\n    get addOnBlur(): boolean {\n        return this._addOnBlur;\n    }\n\n    set addOnBlur(value: boolean) {\n        this._addOnBlur = coerceBooleanProperty(value);\n    }\n\n    private _addOnBlur: boolean = true;\n\n    /** Whether the input is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this._tagList && this._tagList.disabled);\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    private _disabled: boolean = false;\n\n    /** Whether the input is empty. */\n    get empty(): boolean {\n        return !this.inputElement.value;\n    }\n\n    countOfSymbolsForUpdateWidth: number = 3;\n\n    private oneSymbolWidth: number;\n\n    /** The native input element to which this directive is attached. */\n    private inputElement: HTMLInputElement;\n\n    constructor(\n        private elementRef: ElementRef<HTMLInputElement>,\n        private renderer: Renderer2,\n        @Inject(MC_TAGS_DEFAULT_OPTIONS) private defaultOptions: McTagsDefaultOptions,\n        @Optional() @Self() public ngControl: NgControl\n    ) {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        this.inputElement = this.elementRef.nativeElement as HTMLInputElement;\n\n        this.setDefaultInputWidth();\n    }\n\n    ngOnChanges() {\n        this._tagList.stateChanges.next();\n    }\n\n    /** Utility method to make host definition/tests more clear. */\n    keydown(event?: KeyboardEvent) {\n        this.emitTagEnd(event);\n    }\n\n    /** Checks to see if the blur should emit the (tagEnd) event. */\n    blur() {\n        this.focused = false;\n        // Blur the tag list if it is not focused\n        if (!this._tagList.focused) {\n            this.triggerValidation();\n\n            this._tagList.blur();\n        }\n\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        if (this.addOnBlur && !(this.hasControl() && this.ngControl.invalid)) {\n            this.emitTagEnd();\n        }\n\n        this._tagList.stateChanges.next();\n    }\n\n    triggerValidation() {\n        if (!this.hasControl()) { return; }\n\n        (this.ngControl.statusChanges as EventEmitter<string | null>).emit(this.ngControl.status);\n    }\n\n    /** Checks to see if the (tagEnd) event needs to be emitted. */\n    emitTagEnd(event?: KeyboardEvent) {\n        if (!this.inputElement.value && !!event) {\n            this._tagList.keydown(event);\n        }\n\n        if (!event || this.isSeparatorKey(event)) {\n            this.tagEnd.emit({ input: this.inputElement, value: this.inputElement.value });\n            this.updateInputWidth();\n\n            if (event) {\n                event.preventDefault();\n            }\n        }\n    }\n\n    onInput() {\n        this.updateInputWidth();\n        // Let tag list know whenever the value changes.\n        this._tagList.stateChanges.next();\n    }\n\n    onPaste($event: ClipboardEvent) {\n        if (!$event.clipboardData) { return; }\n\n        const data = $event.clipboardData.getData('text');\n\n        if (data && data.length === 0) { return; }\n\n        const items: string[] = [];\n\n        for (const key of this.separatorKeyCodes) {\n            const separator = this.separatorKeyToSymbol(key);\n\n            if (data.search(separator) > -1) {\n                items.push(...data.split(separator));\n\n                break;\n            }\n        }\n\n        if (items.length === 0) {\n            items.push(data);\n        }\n\n        items.forEach((item) => this.tagEnd.emit({ input: this.inputElement, value: item }));\n\n        this.updateInputWidth();\n\n        $event.preventDefault();\n        $event.stopPropagation();\n    }\n\n    updateInputWidth(): void {\n        const length = this.inputElement.value.length;\n\n        this.renderer.setStyle(this.inputElement, 'max-width', 0);\n        this.oneSymbolWidth = this.inputElement.scrollWidth / length;\n        this.renderer.setStyle(this.inputElement, 'max-width', '');\n\n        if (length > this.countOfSymbolsForUpdateWidth) {\n            this.renderer.setStyle(this.inputElement, 'width', `${length * this.oneSymbolWidth}px`);\n        } else {\n            this.setDefaultInputWidth();\n        }\n    }\n\n    onFocus() {\n        this.focused = true;\n        this._tagList.stateChanges.next();\n    }\n\n    /** Focuses the input. */\n    focus(): void {\n        this.inputElement.focus();\n    }\n\n    private separatorKeyToSymbol(k): string {\n        const sep = {\n            [ENTER]: /\\r?\\n/,\n            [TAB]: /\\t/,\n            [SPACE]: / /,\n            [COMMA]: /,/\n        }[k];\n\n        if (sep) { return sep; }\n\n        return k;\n    }\n\n    private hasControl(): boolean {\n        return !!this.ngControl;\n    }\n\n    private setDefaultInputWidth() {\n        this.renderer.setStyle(this.inputElement, 'width', '30px');\n    }\n\n    /** Checks whether a keycode is one of the configured separators. */\n    private isSeparatorKey(event: KeyboardEvent) {\n        if (hasModifierKey(event)) { return false; }\n\n        // tslint:disable-next-line: deprecation\n        return this.separatorKeyCodes.indexOf(event.keyCode) > -1;\n    }\n}\n","import { PlatformModule } from '@angular/cdk/platform';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ENTER } from '@ptsecurity/cdk/keycodes';\n\nimport { MC_TAGS_DEFAULT_OPTIONS, McTagsDefaultOptions } from './tag-default-options';\nimport { McTagInput } from './tag-input';\nimport { McTagList } from './tag-list.component';\nimport { McTag, McTagAvatar, McTagRemove, McTagTrailingIcon } from './tag.component';\n\n\n@NgModule({\n    imports: [CommonModule, PlatformModule],\n    exports: [\n        McTagList,\n        McTag,\n        McTagInput,\n        McTagTrailingIcon,\n        McTagAvatar,\n        McTagRemove\n    ],\n    declarations: [\n        McTagList,\n        McTag,\n        McTagInput,\n        McTagTrailingIcon,\n        McTagAvatar,\n        McTagRemove\n    ],\n    providers: [{\n        provide: MC_TAGS_DEFAULT_OPTIONS,\n        // tslint:disable-next-line: no-object-literal-type-assertion\n        useValue: { separatorKeyCodes: [ENTER] } as McTagsDefaultOptions\n    }]\n})\nexport class McTagsModule {}\n"],"names":["nextUniqueId"],"mappings":"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"}