{"version":3,"file":"ptsecurity-mosaic-autocomplete.js","sources":["ng://@ptsecurity/mosaic/autocomplete/autocomplete.component.ts","ng://@ptsecurity/mosaic/autocomplete/autocomplete-origin.directive.ts","ng://@ptsecurity/mosaic/autocomplete/autocomplete-trigger.directive.ts","ng://@ptsecurity/mosaic/autocomplete/autocomplete.module.ts"],"sourcesContent":["import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ActiveDescendantKeyManager } from '@ptsecurity/cdk/a11y';\nimport { MC_OPTION_PARENT_COMPONENT, McOptgroup, McOption } from '@ptsecurity/mosaic/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet uniqueAutocompleteIdCounter = 0;\n\nexport class McAutocompleteSelectedEvent {\n    constructor(public source: McAutocomplete, public option: McOption) {}\n}\n\n/** Default `mc-autocomplete` options that can be overridden. */\n// tslint:disable-next-line naming-convention\nexport interface McAutocompleteDefaultOptions {\n    /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n    autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mc-autocomplete`. */\nexport const MC_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<McAutocompleteDefaultOptions>('mc-autocomplete-default-options', {\n        providedIn: 'root',\n        factory: MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY\n    });\n\n// tslint:disable-next-line naming-convention\nexport function MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): McAutocompleteDefaultOptions {\n    return { autoActiveFirstOption: true };\n}\n\n@Component({\n    selector: 'mc-autocomplete',\n    exportAs: 'mcAutocomplete',\n    templateUrl: 'autocomplete.html',\n    styleUrls: ['autocomplete.scss'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: { class: 'mc-autocomplete' },\n    providers: [\n        { provide: MC_OPTION_PARENT_COMPONENT, useExisting: McAutocomplete }\n    ]\n})\nexport class McAutocomplete implements AfterContentInit {\n    /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n    id: string = `mc-autocomplete-${uniqueAutocompleteIdCounter++}`;\n\n    /** Manages active item in option list based on key events. */\n    keyManager: ActiveDescendantKeyManager<McOption>;\n\n    /** Whether the autocomplete panel should be visible, depending on option length. */\n    showPanel: boolean = false;\n\n    @ViewChild(TemplateRef, {static: true}) template: TemplateRef<any>;\n\n    @ViewChild('panel', {static: false}) panel: ElementRef;\n\n    @ContentChildren(McOption, { descendants: true }) options: QueryList<McOption>;\n\n    @ContentChildren(McOptgroup) optionGroups: QueryList<McOptgroup>;\n\n    /** Function that maps an option's control value to its display value in the trigger. */\n    @Input() displayWith: ((value: any) => string) | null = null;\n\n    /**\n     * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n     * match the width of its host.\n     */\n    @Input() panelWidth: string | number;\n\n    /** Event that is emitted whenever an option from the list is selected. */\n    @Output() readonly optionSelected: EventEmitter<McAutocompleteSelectedEvent> =\n        new EventEmitter<McAutocompleteSelectedEvent>();\n\n    /** Event that is emitted when the autocomplete panel is opened. */\n    @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Event that is emitted when the autocomplete panel is closed. */\n    @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n    /**\n     * Takes classes set on the host mc-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    get classList() {\n        return this._classList;\n    }\n\n    @Input('class')\n    set classList(value: string) {\n        if (value && value.length) {\n            value.split(' ')\n                .forEach((className) => this._classList[className.trim()] = true);\n\n            this.elementRef.nativeElement.className = '';\n        }\n    }\n\n    private _classList: any = {};\n\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MC_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     */\n    @Input()\n    get autoActiveFirstOption(): boolean {\n        return this._autoActiveFirstOption;\n    }\n\n    set autoActiveFirstOption(value: boolean) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n\n    private _autoActiveFirstOption: boolean;\n\n    get isOpen(): boolean {\n        return this._isOpen && this.showPanel;\n    }\n\n    set isOpen(value: boolean) {\n        this._isOpen = value;\n    }\n\n    private _isOpen: boolean = false;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        private elementRef: ElementRef<HTMLElement>,\n        @Inject(MC_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: McAutocompleteDefaultOptions\n    ) {\n        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    }\n\n    ngAfterContentInit() {\n        this.keyManager = new ActiveDescendantKeyManager<McOption>(this.options);\n        this.setVisibility();\n    }\n\n    setScrollTop(scrollTop: number): void {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n\n    getScrollTop(): number {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n\n    setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._classList['mc-autocomplete_visible'] = this.showPanel;\n        this._classList['mc-autocomplete_hidden'] = !this.showPanel;\n\n        this.changeDetectorRef.markForCheck();\n    }\n\n    emitSelectEvent(option: McOption): void {\n        const event = new McAutocompleteSelectedEvent(this, option);\n\n        this.optionSelected.emit(event);\n    }\n\n    onKeydown(event: KeyboardEvent): any {\n        this.keyManager.onKeydown(event);\n    }\n}\n\n","import { Directive, ElementRef } from '@angular/core';\n\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n    selector: '[mcAutocompleteOrigin]',\n    exportAs: 'mcAutocompleteOrigin'\n})\nexport class McAutocompleteOrigin {\n    constructor(public elementRef: ElementRef<HTMLElement>) {}\n}\n","import { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    ConnectedPosition,\n    FlexibleConnectedPositionStrategy,\n    Overlay,\n    OverlayConfig,\n    OverlayRef,\n    PositionStrategy,\n    ScrollStrategy\n} from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { DOCUMENT } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    forwardRef,\n    Host,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    Optional,\n    ViewContainerRef\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW } from '@ptsecurity/cdk/keycodes';\nimport {\n    countGroupLabelsBeforeOption,\n    getOptionScrollPosition,\n    McOption,\n    McOptionSelectionChange\n} from '@ptsecurity/mosaic/core';\nimport { McFormField } from '@ptsecurity/mosaic/form-field';\nimport { Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable } from 'rxjs';\nimport { filter, take, switchMap, delay, tap, map } from 'rxjs/operators';\n\nimport { McAutocompleteOrigin } from './autocomplete-origin.directive';\nimport { McAutocomplete } from './autocomplete.component';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 32;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\nexport const AUTOCOMPLETE_BORDER_WIDTH: number = 2;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MC_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mc-autocomplete-scroll-strategy');\n\n// tslint:disable-next-line naming-convention\nexport function MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\nexport const MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McAutocompleteTrigger),\n    multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMcAutocompleteMissingPanelError(): Error {\n    return Error('Attempting to open an undefined instance of `mc-autocomplete`. ' +\n        'Make sure that the id passed to the `mcAutocomplete` is correct and that ' +\n        'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n    selector: `input[mcAutocomplete], textarea[mcAutocomplete]`,\n    host: {\n        class: 'mc-autocomplete-trigger',\n        '[attr.autocomplete]': 'autocompleteAttribute',\n        // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n        // a little earlier. This avoids issues where IE delays the focusing of the input.\n        '(focusin)': 'handleFocus()',\n        '(blur)': 'onTouched()',\n        '(input)': 'handleInput($event)',\n        '(keydown)': 'handleKeydown($event)',\n        '(click)': 'handleClick($event)'\n    },\n    exportAs: 'mcAutocompleteTrigger',\n    providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class McAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n    // @ts-ignore\n    readonly optionSelections: Observable<McOptionSelectionChange> = defer(() => {\n        if (this.autocomplete && this.autocomplete.options) {\n            return merge(...this.autocomplete.options.map((option) => option.onSelectionChange));\n        }\n\n        // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n        // Return a stream that we'll replace with the real one once everything is in place.\n        return this.zone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelections));\n    });\n\n    /** The currently active option, coerced to MatOption type. */\n    get activeOption(): McOption | null {\n        if (this.autocomplete && this.autocomplete.keyManager) {\n            return this.autocomplete.keyManager.activeItem;\n        }\n\n        return null;\n    }\n\n    get panelOpen(): boolean {\n        return this.overlayAttached && this.autocomplete.showPanel;\n    }\n\n    /** The autocomplete panel to be attached to this trigger. */\n    @Input('mcAutocomplete') autocomplete: McAutocomplete;\n\n    /**\n     * Reference relative to which to position the autocomplete panel.\n     * Defaults to the autocomplete trigger element.\n     */\n    @Input('mcAutocompleteConnectedTo') connectedTo: McAutocompleteOrigin;\n\n    /**\n     * `autocomplete` attribute to be set on the input element.\n     * @docs-private\n     */\n    @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     */\n    @Input('mcAutocompleteDisabled')\n    get autocompleteDisabled(): boolean {\n        return this._autocompleteDisabled;\n    }\n\n    set autocompleteDisabled(value: boolean) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n\n    private _autocompleteDisabled = false;\n\n    private overlayAttached: boolean = false;\n\n    private overlayRef: OverlayRef | null;\n\n    private portal: TemplatePortal;\n\n    private componentDestroyed = false;\n\n    private scrollStrategy: () => ScrollStrategy;\n\n    /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n    private previousValue: string | number | null;\n\n    /** Strategy that is used to position the panel. */\n    private positionStrategy: FlexibleConnectedPositionStrategy;\n\n    /** The subscription for closing actions (some are bound to document). */\n    private closingActionsSubscription: Subscription;\n\n    /** Subscription to viewport size changes. */\n    private viewportSubscription = Subscription.EMPTY;\n\n    /**\n     * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n     * closed autocomplete from being reopened if the user switches to another browser tab and then\n     * comes back.\n     */\n    private canOpenOnNextFocus = true;\n\n    /** Stream of keyboard events that can close the panel. */\n    private readonly closeKeyEventStream = new Subject<void>();\n\n    constructor(\n        private elementRef: ElementRef<HTMLInputElement>,\n        private viewContainerRef: ViewContainerRef,\n        private changeDetectorRef: ChangeDetectorRef,\n        private overlay: Overlay,\n        private zone: NgZone,\n        @Inject(MC_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n        @Optional() private dir: Directionality,\n        @Optional() @Host() private formField: McFormField,\n        @Optional() @Inject(DOCUMENT) private document: any,\n        // @breaking-change 8.0.0 Make `_viewportRuler` required.\n        private viewportRuler?: ViewportRuler\n    ) {\n        // tslint:disable-next-line no-typeof-undefined\n        if (typeof window !== 'undefined') {\n            zone.runOutsideAngular(() => {\n                window.addEventListener('blur', this.windowBlurHandler);\n            });\n        }\n\n        this.scrollStrategy = scrollStrategy;\n    }\n\n    ngOnDestroy() {\n        // tslint:disable-next-line no-typeof-undefined\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this.windowBlurHandler);\n        }\n\n        this.viewportSubscription.unsubscribe();\n        this.componentDestroyed = true;\n        this.destroyPanel();\n        this.closeKeyEventStream.complete();\n    }\n\n    /** `View -> model callback called when value changes` */\n    // tslint:disable-next-line no-empty\n    onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when autocomplete has been touched` */\n    // tslint:disable-next-line no-empty\n    onTouched: () => void = () => {};\n\n    /** Opens the autocomplete suggestion panel. */\n    openPanel(): void {\n        this.attachOverlay();\n    }\n\n    closePanel(): void {\n        if (!this.overlayAttached) { return; }\n\n        if (this.panelOpen) {\n            this.autocomplete.closed.emit();\n        }\n\n        this.autocomplete.isOpen = this.overlayAttached = false;\n\n        if (this.overlayRef && this.overlayRef.hasAttached()) {\n            this.overlayRef.detach();\n            this.closingActionsSubscription.unsubscribe();\n        }\n\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this.componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this.changeDetectorRef.detectChanges();\n        }\n    }\n\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n    updatePosition(): void {\n        if (this.overlayAttached) {\n            this.overlayRef!.updatePosition();\n        }\n    }\n\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    get panelClosingActions(): Observable<McOptionSelectionChange | null> {\n        return merge(\n            this.optionSelections,\n            this.autocomplete.keyManager.tabOut.pipe(filter(() => this.overlayAttached)),\n            this.closeKeyEventStream,\n            this.getOutsideClickStream(),\n            this.overlayRef ?\n                this.overlayRef.detachments().pipe(filter(() => this.overlayAttached)) :\n                observableOf()\n        ).pipe(\n            // Normalize the output so we return a consistent type.\n            map((event) => event instanceof McOptionSelectionChange ? event : null)\n        );\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any): void {\n        Promise.resolve(null).then(() => this.setTriggerValue(value));\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => {}): void {\n        this.onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => {}) {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.elementRef.nativeElement.disabled = isDisabled;\n    }\n\n    handleKeydown(event: KeyboardEvent): void {\n        // tslint:disable-next-line deprecation\n        const keyCode = event.keyCode;\n\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE) {\n            event.preventDefault();\n        }\n\n        if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n            this.activeOption.selectViaInteraction();\n            this.resetActiveItem();\n            event.preventDefault();\n        } else if (this.autocomplete) {\n            const prevActiveItem = this.autocomplete.keyManager.activeItem;\n\n            if (this.panelOpen || keyCode === TAB) {\n                this.autocomplete.onKeydown(event);\n            } else if (keyCode === DOWN_ARROW && this.canOpen()) {\n                this.openPanel();\n            }\n\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n            if (isArrowKey || this.autocomplete.keyManager.activeItem !== prevActiveItem) {\n                this.scrollToOption();\n            }\n        }\n    }\n\n    handleInput(event: KeyboardEvent): void {\n        const target = event.target as HTMLInputElement;\n        let value: number | string | null = target.value;\n\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value === '' ? null : parseFloat(value);\n        }\n\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this.previousValue !== value) {\n            this.previousValue = value;\n            this.onChange(value);\n\n            if (this.canOpen() && this.document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n\n    handleFocus(): void {\n        if (!this.canOpenOnNextFocus) {\n            this.canOpenOnNextFocus = true;\n        } else if (this.canOpen()) {\n            this.previousValue = this.elementRef.nativeElement.value;\n            this.attachOverlay();\n        }\n    }\n\n    handleClick($event: MouseEvent) {\n        if (this.canOpen() && this.document.activeElement === $event.target) {\n            this.openPanel();\n        }\n    }\n\n    /** Stream of clicks outside of the autocomplete panel. */\n    private getOutsideClickStream(): Observable<any> {\n        return merge(\n            // tslint:disable-next-line: no-unnecessary-type-assertion\n            fromEvent(this.document, 'click') as Observable<MouseEvent>,\n            // tslint:disable-next-line: no-unnecessary-type-assertion\n            fromEvent(this.document, 'touchend') as Observable<TouchEvent>\n        )\n            .pipe(filter((event) => {\n                const clickTarget = event.target as HTMLElement;\n                const formField = this.formField ?\n                    this.formField._elementRef.nativeElement : null;\n\n                return this.overlayAttached &&\n                    clickTarget !== this.elementRef.nativeElement &&\n                    (!formField || !formField.contains(clickTarget)) &&\n                    (!!this.overlayRef && !this.overlayRef.overlayElement.contains(clickTarget));\n            }));\n    }\n\n    /**\n     * Event handler for when the window is blurred. Needs to be an\n     * arrow function in order to preserve the context.\n     */\n    private windowBlurHandler = () => {\n        // If the user blurred the window while the autocomplete is focused, it means that it'll be\n        // refocused when they come back. In this case we want to skip the first focus event, if the\n        // pane was closed, in order to avoid reopening it unintentionally.\n        this.canOpenOnNextFocus = this.document.activeElement !== this.elementRef.nativeElement || this.panelOpen;\n    }\n\n    /**\n     * Given that we are not actually focusing active options, we must manually adjust scroll\n     * to reveal options below the fold. First, we find the offset of the option from the top\n     * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n     * the panel height + the option height, so the active option will be just visible at the\n     * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n     * will become the offset. If that offset is visible within the panel already, the scrollTop is\n     * not adjusted.\n     */\n    private scrollToOption(): void {\n        const index = this.autocomplete.keyManager.activeItemIndex || 0;\n        const labelCount = countGroupLabelsBeforeOption(index,\n            this.autocomplete.options, this.autocomplete.optionGroups);\n\n        const newScrollPosition = getOptionScrollPosition(\n            index + labelCount,\n            AUTOCOMPLETE_OPTION_HEIGHT,\n            this.autocomplete.getScrollTop(),\n            AUTOCOMPLETE_PANEL_HEIGHT\n        );\n\n        this.autocomplete.setScrollTop(newScrollPosition);\n    }\n\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    private subscribeToClosingActions(): Subscription {\n        const firstStable = this.zone.onStable.asObservable()\n            .pipe(take(1));\n        const optionChanges = this.autocomplete.options.changes\n            .pipe(\n                tap(() => this.positionStrategy.reapplyLastPosition()),\n                // Defer emitting to the stream until the next tick, because changing\n                // bindings in here will cause \"changed after checked\" errors.\n                delay(0)\n            );\n\n        // When the zone is stable initially, and when the option list changes...\n        return merge(firstStable, optionChanges)\n            .pipe(\n                // create a new stream of panelClosingActions, replacing any previous streams\n                // that were created, and flatten it so our stream only emits closing events...\n                switchMap(() => {\n                    const wasOpen = this.panelOpen;\n                    this.resetActiveItem();\n                    this.autocomplete.setVisibility();\n\n                    if (this.panelOpen) {\n                        this.overlayRef!.updatePosition();\n\n                        // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                        // event, because we may not have emitted it when the panel was attached. This\n                        // can happen if the users opens the panel and there are no options, but the\n                        // options come in slightly later or as a result of the value changing.\n                        if (wasOpen !== this.panelOpen) {\n                            this.autocomplete.opened.emit();\n                        }\n                    }\n\n                    return this.panelClosingActions;\n                }),\n                // when the first closing event occurs...\n                take(1)\n            )\n            // set the value, close the panel, and complete.\n            .subscribe((event) => this.setValueAndClose(event));\n    }\n\n    /** Destroys the autocomplete suggestion panel. */\n    private destroyPanel(): void {\n        if (this.overlayRef) {\n            this.closePanel();\n            this.overlayRef.dispose();\n            this.overlayRef = null;\n        }\n    }\n\n    private setTriggerValue(value: any): void {\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n            this.autocomplete.displayWith(value) :\n            value;\n\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        const inputValue = toDisplay != null ? toDisplay : '';\n\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this.formField) {\n            this.formField.control.value = inputValue;\n        } else {\n            this.elementRef.nativeElement.value = inputValue;\n        }\n\n        this.previousValue = inputValue;\n    }\n\n    /** This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    private setValueAndClose(event: McOptionSelectionChange | null): void {\n        if (event && event.source) {\n            this.clearPreviousSelectedOption(event.source);\n            this.setTriggerValue(event.source.value);\n            this.onChange(event.source.value);\n            this.elementRef.nativeElement.focus();\n\n            this.autocomplete.emitSelectEvent(event.source);\n        }\n\n        this.closePanel();\n    }\n\n    /** Clear any previous selected option and emit a selection change event for this option */\n    private clearPreviousSelectedOption(skip: McOption) {\n        this.autocomplete.options.forEach((option) => {\n            if (option !== skip && option.selected) {\n                option.deselect();\n            }\n        });\n    }\n\n    private attachOverlay(): void {\n        if (!this.autocomplete) {\n            throw getMcAutocompleteMissingPanelError();\n        }\n\n        let overlayRef = this.overlayRef;\n\n        if (!overlayRef) {\n            this.portal = new TemplatePortal(this.autocomplete.template, this.viewContainerRef);\n            overlayRef = this.overlay.create(this.getOverlayConfig());\n            this.overlayRef = overlayRef;\n\n            // Use the `keydownEvents` in order to take advantage of\n            // the overlay event targeting provided by the CDK overlay.\n            overlayRef.keydownEvents().subscribe((event) => {\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                // tslint:disable-next-line deprecation\n                if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n                    this.resetActiveItem();\n                    this.closeKeyEventStream.next();\n                }\n            });\n\n            if (this.viewportRuler) {\n                this.viewportSubscription = this.viewportRuler.change().subscribe(() => {\n                    if (this.panelOpen && overlayRef) {\n                        overlayRef.updateSize({ width: this.getPanelWidth() });\n                    }\n                });\n            }\n        } else {\n            const position = overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n\n            // Update the trigger, panel width and direction, in case anything has changed.\n            position.setOrigin(this.getConnectedElement());\n            overlayRef.updateSize({ width: this.getPanelWidth() });\n        }\n\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this.portal);\n            this.closingActionsSubscription = this.subscribeToClosingActions();\n        }\n\n        const wasOpen = this.panelOpen;\n\n        this.autocomplete.setVisibility();\n        this.autocomplete.isOpen = this.overlayAttached = true;\n\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n\n    private getOverlayConfig(): OverlayConfig {\n        return new OverlayConfig({\n            positionStrategy: this.getOverlayPosition(),\n            scrollStrategy: this.scrollStrategy(),\n            width: this.getPanelWidth(),\n            direction: this.dir\n        });\n    }\n\n    private getOverlayPosition(): PositionStrategy {\n        this.positionStrategy = this.overlay.position()\n            .flexibleConnectedTo(this.getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false)\n            .withPositions([\n                {\n                    originX: 'start',\n                    originY: 'bottom',\n                    overlayX: 'start',\n                    overlayY: 'top'\n                },\n                {\n                    originX: 'start',\n                    originY: 'top',\n                    overlayX: 'start',\n                    overlayY: 'bottom',\n\n                    // The overlay edge connected to the trigger should have squared corners, while\n                    // the opposite end has rounded corners. We apply a CSS class to swap the\n                    // border-radius based on the overlay position.\n                    panelClass: 'mc-autocomplete-panel-above'\n                }\n            ] as ConnectedPosition[]);\n\n        return this.positionStrategy;\n    }\n\n    private getConnectedElement(): ElementRef {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n\n        return this.formField ? this.formField.getConnectedOverlayOrigin() : this.elementRef;\n    }\n\n    private getPanelWidth(): number | string {\n        return this.autocomplete.panelWidth || this.getHostWidth() - AUTOCOMPLETE_BORDER_WIDTH;\n    }\n\n    private getHostWidth(): number {\n        return this.getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     */\n    private resetActiveItem(): void {\n        this.autocomplete.keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n    }\n\n    private canOpen(): boolean {\n        const element = this.elementRef.nativeElement;\n\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n}\n","import { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { McOptionModule, McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McAutocompleteOrigin } from './autocomplete-origin.directive';\nimport {\n    McAutocompleteTrigger,\n    MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './autocomplete-trigger.directive';\nimport { McAutocomplete } from './autocomplete.component';\n\n\n@NgModule({\n    imports: [McOptionModule, OverlayModule, McCommonModule, CommonModule],\n    exports: [\n        McAutocomplete,\n        McOptionModule,\n        McAutocompleteTrigger,\n        McAutocompleteOrigin,\n        McCommonModule\n    ],\n    declarations: [McAutocomplete, McAutocompleteTrigger, McAutocompleteOrigin],\n    providers: [MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class McAutocompleteModule {}\n"],"names":["observableOf"],"mappings":"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"}