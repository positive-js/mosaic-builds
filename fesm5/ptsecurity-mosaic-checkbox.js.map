{"version":3,"file":"ptsecurity-mosaic-checkbox.js","sources":["ng://@ptsecurity/mosaic/checkbox/checkbox-config.ts","ng://@ptsecurity/mosaic/checkbox/checkbox.ts","ng://@ptsecurity/mosaic/checkbox/checkbox-required-validator.ts","ng://@ptsecurity/mosaic/checkbox/checkbox-module.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type McCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MC_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<McCheckboxClickAction>('mc-checkbox-click-action');\n","import { FocusMonitor, FocusOrigin } from '@angular/cdk/a11y';\nimport {\n    AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport {\n    CanColor, CanColorCtor,\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\nimport { MC_CHECKBOX_CLICK_ACTION, McCheckboxClickAction } from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mc-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McCheckbox),\n    multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n    /** The initial state of the component before any user interaction. */\n    Init,\n    /** The state representing the component when it's becoming checked. */\n    Checked,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate\n}\n\n/** Change event object emitted by McCheckbox. */\nexport class McCheckboxChange {\n    /** The source McCheckbox of the event. */\n    source: McCheckbox;\n    /** The new `checked` value of the checkbox. */\n    checked: boolean;\n}\n\n// Boilerplate for applying mixins to McCheckbox.\n/** @docs-private */\nexport class McCheckboxBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof McCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisabled(McCheckboxBase)));\n\n\n/**\n * A mosaic checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A McCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n */\n@Component({\n    selector: 'mc-checkbox',\n    templateUrl: 'checkbox.html',\n    styleUrls: ['checkbox.scss'],\n    exportAs: 'mcCheckbox',\n    host: {\n        class: 'mc-checkbox',\n        '[id]': 'id',\n        '[attr.id]': 'id',\n        '[class.mc-indeterminate]': 'indeterminate',\n        '[class.mc-checked]': 'checked',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-checkbox-label-before]': 'labelPosition == \"before\"'\n    },\n    providers: [MC_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCheckbox extends McCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex {\n\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     */\n    @Input('aria-label') ariaLabel: string = '';\n\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n    /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n    @Input() id: string;\n\n    /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n    @Input() labelPosition: 'before' | 'after' = 'after';\n\n    /** Name value will be applied to the input element if present */\n    @Input() name: string | null = null;\n\n    /** Event emitted when the checkbox's `checked` value changes. */\n    @Output() readonly change: EventEmitter<McCheckboxChange> =\n        new EventEmitter<McCheckboxChange>();\n\n    /** Event emitted when the checkbox's `indeterminate` value changes. */\n    @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** The value attribute of the native input element */\n    @Input() value: string;\n\n    /** The native `<input type=\"checkbox\">` element */\n    @ViewChild('input', {static: false}) inputElement: ElementRef;\n\n    private uniqueId: string = `mc-checkbox-${++nextUniqueId}`;\n\n    private currentAnimationClass: string = '';\n\n    private currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n    /** Returns the unique id for the visual hidden input. */\n    get inputId(): string {\n        return `${this.id || this.uniqueId}-input`;\n    }\n\n    /** Whether the checkbox is required. */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    private _required: boolean;\n// tslint:disable-next-line:naming-convention\n    constructor(_elementRef: ElementRef,\n                private _changeDetectorRef: ChangeDetectorRef,\n                private _focusMonitor: FocusMonitor,\n                @Attribute('tabindex') tabIndex: string,\n                @Optional() @Inject(MC_CHECKBOX_CLICK_ACTION)\n                private _clickAction: McCheckboxClickAction) {\n        super(_elementRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n        this.id = this.uniqueId;\n    }\n\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * @docs-private\n     */\n    // tslint:disable-next-line:no-empty\n    onTouched: () => any = () => {};\n\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this.inputElement.nativeElement)\n            .subscribe((focusOrigin) => this.onInputFocusChange(focusOrigin));\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this.inputElement.nativeElement);\n    }\n\n    /**\n     * Whether the checkbox is checked.\n     */\n    @Input()\n    get checked(): boolean {\n        return this._checked;\n    }\n\n    set checked(value: boolean) {\n        if (value !== this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _checked: boolean = false;\n\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value !== this.disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    @Input()\n    get indeterminate(): boolean {\n        return this._indeterminate;\n    }\n\n    set indeterminate(value: boolean) {\n        const changed = value !== this._indeterminate;\n        this._indeterminate = value;\n\n        if (changed) {\n            if (this._indeterminate) {\n                this.transitionCheckState(TransitionCheckState.Indeterminate);\n            } else {\n                this.transitionCheckState(\n                    this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n    }\n\n    private _indeterminate: boolean = false;\n\n    /** Method being called whenever the label text changes. */\n    onLabelTextChange() {\n        // This method is getting called whenever the label of the checkbox changes.\n        // Since the checkbox uses the OnPush strategy we need to notify it about the change\n        // that has been recognized by the cdkObserveContent directive.\n        this._changeDetectorRef.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any) {\n        this.checked = !!value;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n    }\n\n    getAriaChecked(): 'true' | 'false' | 'mixed' {\n        return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n    }\n\n    /** Toggles the `checked` state of the checkbox. */\n    toggle(): void {\n        this.checked = !this.checked;\n    }\n\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event Input click event\n     */\n    onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && this._clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && this._clickAction !== 'check') {\n\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n\n            this.toggle();\n            this.transitionCheckState(\n                this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this.emitChangeEvent();\n        } else if (!this.disabled && this._clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mc-checkbox`.\n            this.inputElement.nativeElement.checked = this.checked;\n            this.inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n\n    /** Focuses the checkbox. */\n    focus(): void {\n        this._focusMonitor.focusVia(this.inputElement.nativeElement, 'keyboard');\n    }\n\n    onInteractionEvent(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n    // tslint:disable-next-line:no-empty\n    private controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    private transitionCheckState(newState: TransitionCheckState) {\n        const oldState = this.currentCheckState;\n        const element: HTMLElement = this._elementRef.nativeElement;\n\n        if (oldState === newState) {\n            return;\n        }\n        if (this.currentAnimationClass.length > 0) {\n            element.classList.remove(this.currentAnimationClass);\n        }\n\n        this.currentCheckState = newState;\n\n        if (this.currentAnimationClass.length > 0) {\n            element.classList.add(this.currentAnimationClass);\n        }\n    }\n\n    private emitChangeEvent() {\n        const event = new McCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n\n        this.controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    }\n\n    /** Function is called whenever the focus changes for the input element. */\n    private onInputFocusChange(focusOrigin: FocusOrigin) {\n        if (focusOrigin) {\n            this.onTouched();\n        }\n    }\n}\n","import {\n    Directive,\n    forwardRef,\n    Provider\n} from '@angular/core';\nimport {\n    CheckboxRequiredValidator,\n    NG_VALIDATORS\n} from '@angular/forms';\n\n\nexport const MC_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McCheckboxRequiredValidator),\n    multi: true\n};\n\n/**\n * Validator for Mosaic checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mc-checkbox`.\n */\n@Directive({\n    selector: `mc-checkbox[required][formControlName],\n             mc-checkbox[required][formControl], mc-checkbox[required][ngModel]`,\n    providers: [MC_CHECKBOX_REQUIRED_VALIDATOR],\n    host: { '[attr.required]': 'required ? \"\" : null' }\n})\nexport class McCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McCheckbox } from './checkbox';\nimport { McCheckboxRequiredValidator } from './checkbox-required-validator';\n\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [McCheckbox, McCheckboxRequiredValidator],\n    declarations: [McCheckbox, McCheckboxRequiredValidator]\n})\nexport class McCheckboxModule {\n}\n"],"names":[],"mappings":"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"}