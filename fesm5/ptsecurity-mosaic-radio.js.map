{"version":3,"file":"ptsecurity-mosaic-radio.js","sources":["ng://@ptsecurity/mosaic/radio/radio.component.ts","ng://@ptsecurity/mosaic/radio/radio.module.ts"],"sourcesContent":["import { FocusMonitor } from '@angular/cdk/a11y';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport {\n    AfterContentInit, AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef,\n    Input, OnDestroy, OnInit, Optional, Output, QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport {\n    CanColor, CanColorCtor,\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/** Change event object emitted by McRadio. */\nexport class McRadioChange {\n    constructor(\n        /** The McRadioButton that emits the change event. */\n        public source: McRadioButton,\n        /** The value of the McRadioButton. */\n        public value: any) {}\n}\n\n// Boilerplate for applying mixins to McRadioGroup.\n/** @docs-private */\nexport class McRadioGroupBase {}\n// tslint:disable-next-line:naming-convention\nexport const McRadioGroupMixinBase: CanDisableCtor & typeof McRadioGroupBase = mixinDisabled(McRadioGroupBase);\n\n/**\n * Provider Expression that allows mc-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McRadioGroup),\n    multi: true\n};\n\n@Directive({\n    selector: 'mc-radio-group',\n    exportAs: 'mcRadioGroup',\n    providers: [MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n    host: {\n        role: 'radiogroup',\n        class: 'mc-radio-group'\n    },\n    inputs: ['disabled']\n})\nexport class McRadioGroup extends McRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    @Input()\n    get name(): string { return this._name; }\n    set name(value: string) {\n        this._name = value;\n        this.updateRadioButtonNames();\n    }\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this.markRadiosForCheck();\n    }\n\n    /** Value of the radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n\n            this.updateSelectedRadioFromValue();\n            this.checkSelectedRadioButton();\n        }\n    }\n\n    /** Whether the radio button is selected. */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: McRadioButton | null) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this.checkSelectedRadioButton();\n    }\n\n    /** Whether the radio group is disabled */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /** Whether the radio group is required */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** Child radio buttons. */\n    @ContentChildren(forwardRef(() => McRadioButton), { descendants: true })\n    radios: QueryList<McRadioButton>;\n\n    /**\n     * Selected value for group. Should equal the value of the selected radio button if there *is*\n     * a corresponding radio button with a matching value. If there is *not* such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    private _value: any = null;\n\n    /** The HTML name attribute applied to radio buttons in this group. */\n    private _name: string = `mc-radio-group-${nextUniqueId++}`;\n\n    /** The currently selected radio button. Should match value. */\n    private _selected: McRadioButton | null = null;\n\n    /** Whether the `value` has been set to its initial value. */\n    private isInitialized: boolean = false;\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    private _labelPosition: 'before' | 'after' = 'after';\n\n    /** Whether the radio group is disabled. */\n    private _disabled: boolean = false;\n\n    /** Whether the radio group is required. */\n    private _required: boolean = false;\n\n    constructor(\n        private readonly _changeDetector: ChangeDetectorRef\n    ) {\n        super();\n    }\n\n    /** The method to be called in order to update ngModel */\n    // tslint:disable-next-line\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @docs-private\n     */\n    // tslint:disable-next-line\n    onTouched: () => any = () => {};\n\n    checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on McRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the McRadioGroup.\n        this.isInitialized = true;\n    }\n\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        if (this.isInitialized) {\n            this.change.emit(new McRadioChange(this._selected!, this._value));\n        }\n    }\n\n    markRadiosForCheck() {\n        if (this.radios) {\n            this.radios.forEach((radio) => radio.markForCheck());\n        }\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n\n    private updateRadioButtonNames(): void {\n        if (this.radios) {\n            this.radios.forEach((radio) => {\n                radio.name = this.name;\n            });\n        }\n    }\n\n    /** Updates the `selected` radio button from the internal _value state. */\n    private updateSelectedRadioFromValue(): void {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n        if (this.radios != null && !isAlreadySelected) {\n            this._selected = null;\n            this.radios.forEach((radio) => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n}\n\n\n// Boilerplate for applying mixins to McRadioButton.\n/** @docs-private */\nexport class McRadioButtonBase {\n    // Since the disabled property is manually defined for the McRadioButton and isn't set up in\n    // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n    // defined to properly work.\n    disabled: boolean;\n\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {}\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McRadioButtonMixinBase:\n    CanColorCtor &\n    HasTabIndexCtor &\n    typeof McRadioButtonBase =\n        mixinColor(mixinTabIndex(McRadioButtonBase));\n\n\n@Component({\n    selector: 'mc-radio-button',\n    templateUrl: 'radio.component.html',\n    styleUrls: ['radio.scss'],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    exportAs: 'mcRadioButton',\n    host: {\n        class: 'mc-radio-button',\n        '[attr.id]': 'id',\n        '[class.mc-checked]': 'checked',\n        '[class.mc-disabled]': 'disabled'\n    }\n})\nexport class McRadioButton extends McRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, HasTabIndex {\n\n    /** Whether this radio button is checked. */\n    @Input()\n    get checked(): boolean { return this._checked; }\n    set checked(value: boolean) {\n        const newCheckedState = toBoolean(value);\n\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** The value of this radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(value: any) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup != null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n\n    /** Whether the radio button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n    }\n    set disabled(value: boolean) {\n        const newDisabledState = toBoolean(value);\n\n        if (this._disabled !== newDisabledState) {\n\n            this._disabled = newDisabledState;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** Whether the radio button is required. */\n    @Input()\n    get required(): boolean {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n\n    /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n    @Input() name: string;\n\n    /** Used to set the 'aria-label' attribute on the underlying input element. */\n    @Input('aria-label') ariaLabel: string;\n\n    /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n    @Input('aria-labelledby') ariaLabelledby: string;\n\n    /** The 'aria-describedby' attribute is read after the element's label and field type. */\n    @Input('aria-describedby') ariaDescribedby: string;\n\n    /** The native `<input type=radio>` element */\n    @ViewChild('input', {static: false}) inputElement: ElementRef;\n\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** The parent radio group. May or may not be present. */\n    radioGroup: McRadioGroup;\n\n    @Input()\n    isFocused: boolean = false;\n\n    /** The unique ID for the radio button. */\n    @Input() id: string;\n\n    /** ID of the native input element inside `<mc-radio-button>` */\n    get inputId(): string { return `${this.id || this.uniqueId}-input`; }\n\n    private _labelPosition: 'before' | 'after';\n\n    /* tslint:disable:member-ordering */\n    private readonly uniqueId: string = `mc-radio-${++nextUniqueId}`;\n\n    /** Whether this radio is checked. */\n    private _checked: boolean = false;\n\n    /** Whether this radio is disabled. */\n    private _disabled: boolean;\n\n    /** Whether this radio is required. */\n    private _required: boolean;\n\n    /** Value assigned to this radio. */\n    private _value: any = null;\n\n    constructor(\n        @Optional() radioGroup: McRadioGroup,\n        elementRef: ElementRef,\n        private readonly _changeDetector: ChangeDetectorRef,\n        private focusMonitor: FocusMonitor,\n        private readonly _radioDispatcher: UniqueSelectionDispatcher\n    ) {\n\n        super(elementRef);\n\n        this.id = this.uniqueId;\n\n        this.radioGroup = radioGroup;\n\n        this.removeUniqueSelectionListener =\n            _radioDispatcher.listen((id: string, name: string) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n\n    ngAfterViewInit() {\n        this.focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe((focusOrigin) => {\n                if (!focusOrigin && this.radioGroup) {\n                    this.radioGroup.touch();\n                }\n            });\n    }\n\n    ngOnDestroy() {\n        this.focusMonitor.stopMonitoring(this._elementRef);\n        this.removeUniqueSelectionListener();\n    }\n\n    /** Focuses the radio button. */\n    focus(): void {\n        this.inputElement.nativeElement.focus();\n    }\n\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n\n    onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n\n    onInputChange(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this.emitChangeEvent();\n\n        if (this.radioGroup) {\n            this.radioGroup.controlValueAccessorChangeFn(this.value);\n            this.radioGroup.touch();\n            if (groupValueChanged) {\n                this.radioGroup.emitChangeEvent();\n            }\n        }\n    }\n\n    /** Unregister function for _radioDispatcher */\n    // tslint:disable-next-line\n    private readonly removeUniqueSelectionListener: () => void = () => {};\n\n    /** Dispatch change event with current value. */\n    private emitChangeEvent(): void {\n        this.change.emit(new McRadioChange(this, this._value));\n    }\n}\n","import { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McRadioButton, McRadioGroup } from './radio.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule],\n    exports: [McRadioGroup, McRadioButton],\n    declarations: [McRadioGroup, McRadioButton]\n})\nexport class McRadioModule {\n}\n"],"names":[],"mappings":"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"}