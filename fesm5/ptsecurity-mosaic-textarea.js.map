{"version":3,"file":"ptsecurity-mosaic-textarea.js","sources":["ng://@ptsecurity/mosaic/textarea/textarea.component.ts","ng://@ptsecurity/mosaic/textarea/textarea.module.ts"],"sourcesContent":["import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    Directive, DoCheck, ElementRef, Inject,\n    Input, OnChanges, OnDestroy, Optional,\n    Self, InjectionToken, NgZone, OnInit\n} from '@angular/core';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { fromEvent, Subscription, Subject } from 'rxjs';\n\n\nexport const MC_TEXTAREA_VALUE_ACCESSOR = new InjectionToken<{ value: any }>('MC_TEXTAREA_VALUE_ACCESSOR');\n\nlet nextUniqueId = 0;\n\n\nexport class McTextareaBase {\n    constructor(\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {}\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McTextareaMixinBase: CanUpdateErrorStateCtor & typeof McTextareaBase = mixinErrorState(McTextareaBase);\n\n@Directive({\n    selector: 'textarea[mcTextarea]',\n    exportAs: 'mcTextarea',\n    host: {\n        class: 'mc-textarea',\n        '[class.mc-textarea-resizable]': '!canGrow',\n\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[attr.aria-invalid]': 'errorState',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.required]': 'required',\n\n        '(blur)': 'focusChanged(false)',\n        '(focus)': 'focusChanged(true)'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McTextarea }]\n})\nexport class McTextarea extends McTextareaMixinBase implements McFormFieldControl<any>, OnInit, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n\n    @Input() canGrow: boolean = true;\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-textarea';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this.valueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this.valueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n\n    protected uid = `mc-textsrea-${nextUniqueId++}`;\n    protected previousNativeValue: any;\n    private _disabled = false;\n    private _id: string;\n    private _required = false;\n\n    private valueAccessor: { value: any };\n    private growSubscription: Subscription;\n\n    private lineHeight: number = 0;\n    private freeRowsHeight: number = 0;\n    private minHeight: number = 0;\n\n    constructor(\n        protected elementRef: ElementRef,\n        @Optional() @Self() public ngControl: NgControl,\n        @Optional() parentForm: NgForm,\n        @Optional() parentFormGroup: FormGroupDirective,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        @Optional() @Self() @Inject(MC_TEXTAREA_VALUE_ACCESSOR) inputValueAccessor: any,\n        private ngZone: NgZone\n    ) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n        // If no input value accessor was explicitly specified, use the element as the textarea value\n        // accessor.\n        this.valueAccessor = inputValueAccessor || this.elementRef.nativeElement;\n\n        this.previousNativeValue = this.value;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n\n        const growObserver = fromEvent(elementRef.nativeElement, 'input');\n\n        this.growSubscription = growObserver.subscribe(this.grow.bind(this));\n    }\n\n    ngOnInit() {\n        setTimeout(() => this.grow(), 0);\n        this.lineHeight = parseInt(getComputedStyle(this.elementRef.nativeElement).lineHeight!, 10);\n\n        const paddingTop = parseInt(getComputedStyle(this.elementRef.nativeElement).paddingTop!, 10);\n        const paddingBottom = parseInt(getComputedStyle(this.elementRef.nativeElement).paddingBottom!, 10);\n\n        // tslint:disable-next-line:no-magic-numbers\n        this.minHeight = this.lineHeight * 2 + paddingTop + paddingBottom;\n        this.freeRowsHeight = this.lineHeight;\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        this.growSubscription.unsubscribe();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this.dirtyCheckNativeValue();\n    }\n\n    /** Grow textarea height to avoid vertical scroll  */\n    grow() {\n        if (!this.canGrow) {\n            return;\n        }\n\n        this.ngZone.runOutsideAngular(() => {\n            const textarea = this.elementRef.nativeElement;\n\n            const outerHeight = parseInt(window.getComputedStyle(textarea).height!, 10);\n            const diff = outerHeight - textarea.clientHeight;\n\n            textarea.style.minHeight = 0; // this line is important to height recalculation\n\n            const height = Math.max(this.minHeight, +textarea.scrollHeight + diff + this.freeRowsHeight);\n            textarea.style.minHeight = `${height}px`;\n        });\n    }\n\n    /** Focuses the textarea. */\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /** Callback for the cases where the focused state of the textarea changes. */\n    focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this.elementRef.nativeElement.value && !this.isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Does some manual dirty checking on the native textarea `value` property. */\n    protected dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this.previousNativeValue !== newValue) {\n            this.previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Checks whether the textarea is invalid based on the native validation. */\n    protected isBadInput(): boolean {\n        // The `validity` property won't be present on platform-server.\n        const validity = (this.elementRef.nativeElement as HTMLTextAreaElement).validity;\n\n        return validity && validity.badInput;\n    }\n\n}\n","import { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McTextarea } from './textarea.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule, FormsModule],\n    exports: [McTextarea],\n    declarations: [McTextarea]\n})\nexport class McTextareaModule {}\n"],"names":[],"mappings":"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"}