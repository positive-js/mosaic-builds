{"version":3,"file":"tags.js","sources":["../../../packages/mosaic/tags/tag.module.ts","../../../packages/mosaic/tags/tag-input.ts","../../../packages/mosaic/tags/tag-list.component.ts","../../../packages/mosaic/tags/tag.component.ts","../../../packages/mosaic/tags/tag-default-options.ts"],"sourcesContent":["import { PlatformModule } from '@angular/cdk/platform';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ENTER } from '@ptsecurity/cdk/keycodes';\n\nimport { MC_TAGS_DEFAULT_OPTIONS, McTagsDefaultOptions } from './tag-default-options';\nimport { McTagInput } from './tag-input';\nimport { McTagList } from './tag-list.component';\nimport { McTag, McTagAvatar, McTagRemove, McTagTrailingIcon } from './tag.component';\n\n\n@NgModule({\n    imports: [CommonModule, PlatformModule],\n    exports: [\n        McTagList,\n        McTag,\n        McTagInput,\n        McTagTrailingIcon,\n        McTagAvatar,\n        McTagRemove\n    ],\n    declarations: [\n        McTagList,\n        McTag,\n        McTagInput,\n        McTagTrailingIcon,\n        McTagAvatar,\n        McTagRemove\n    ],\n    providers: [{\n        provide: MC_TAGS_DEFAULT_OPTIONS,\n        // tslint:disable-next-line: no-object-literal-type-assertion\n        useValue: { separatorKeyCodes: [ENTER] } as McTagsDefaultOptions\n    }]\n})\nexport class McTagsModule {}\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output, Renderer2 } from '@angular/core';\nimport { hasModifierKey } from '@ptsecurity/cdk/keycodes';\n\nimport { MC_TAGS_DEFAULT_OPTIONS, McTagsDefaultOptions } from './tag-default-options';\nimport { McTagList } from './tag-list.component';\nimport { McTagTextControl } from './tag-text-control';\n\n\n/** Represents an input event on a `mcTagInput`. */\n// tslint:disable-next-line: naming-convention\nexport interface McTagInputEvent {\n    /** The native `<input>` element that the event is being fired for. */\n    input: HTMLInputElement;\n\n    /** The value of the input. */\n    value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds tag-specific behaviors to an input element inside `<mc-form-field>`.\n * May be placed inside or outside of an `<mc-tag-list>`.\n */\n@Directive({\n    selector: 'input[mcTagInputFor]',\n    exportAs: 'mcTagInput, mcTagInputFor',\n    host: {\n        class: 'mc-tag-input mc-input-element',\n        '[id]': 'id',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.placeholder]': 'placeholder || null',\n        '[attr.aria-invalid]': '_tagList && _tagList.ngControl ? _tagList.ngControl.invalid : null',\n        '(keydown)': 'keydown($event)',\n        '(blur)': 'blur()',\n        '(focus)': 'onFocus()',\n        '(input)': 'onInput()'\n    }\n})\nexport class McTagInput implements McTagTextControl, OnChanges {\n    /** Whether the control is focused. */\n    focused: boolean = false;\n\n    /**\n     * The list of key codes that will trigger a tagEnd event.\n     *\n     * Defaults to `[ENTER]`.\n     */\n    @Input('mcTagInputSeparatorKeyCodes')\n    separatorKeyCodes: number[] | Set<number> = this.defaultOptions.separatorKeyCodes;\n\n    /** Emitted when a tag is to be added. */\n    @Output('mcTagInputTokenEnd')\n    tagEnd: EventEmitter<McTagInputEvent> = new EventEmitter<McTagInputEvent>();\n\n    /** The input's placeholder text. */\n    @Input() placeholder: string = '';\n\n    /** Unique id for the input. */\n    @Input() id: string = `mc-tag-list-input-${nextUniqueId++}`;\n\n    /** Register input for tag list */\n    @Input('mcTagInputFor')\n    set tagList(value: McTagList) {\n        if (value) {\n            this._tagList = value;\n            this._tagList.registerInput(this);\n        }\n    }\n\n    // tslint:disable-next-line: naming-convention\n    private _tagList: McTagList;\n\n    /**\n     * Whether or not the tagEnd event will be emitted when the input is blurred.\n     */\n    @Input('mcTagInputAddOnBlur')\n    get addOnBlur(): boolean {\n        return this._addOnBlur;\n    }\n\n    set addOnBlur(value: boolean) {\n        this._addOnBlur = coerceBooleanProperty(value);\n    }\n\n    private _addOnBlur: boolean = true;\n\n    /** Whether the input is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this._tagList && this._tagList.disabled);\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    private _disabled: boolean = false;\n\n    /** Whether the input is empty. */\n    get empty(): boolean {\n        return !this.inputElement.value;\n    }\n\n    countOfSymbolsForUpdateWidth: number = 3;\n\n    private oneSymbolWidth: number;\n\n    /** The native input element to which this directive is attached. */\n    private inputElement: HTMLInputElement;\n\n    constructor(\n        private elementRef: ElementRef<HTMLInputElement>,\n        private renderer: Renderer2,\n        @Inject(MC_TAGS_DEFAULT_OPTIONS) private defaultOptions: McTagsDefaultOptions\n    ) {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        this.inputElement = this.elementRef.nativeElement as HTMLInputElement;\n\n        this.setDefaultInputWidth();\n    }\n\n    ngOnChanges() {\n        this._tagList.stateChanges.next();\n    }\n\n    /** Utility method to make host definition/tests more clear. */\n    keydown(event?: KeyboardEvent) {\n        this.emittagEnd(event);\n    }\n\n    /** Checks to see if the blur should emit the (tagEnd) event. */\n    blur() {\n        if (this.addOnBlur) {\n            this.emittagEnd();\n        }\n\n        this.focused = false;\n        // Blur the tag list if it is not focused\n        if (!this._tagList.focused) {\n            this._tagList.blur();\n        }\n\n        this._tagList.stateChanges.next();\n    }\n\n    /** Checks to see if the (tagEnd) event needs to be emitted. */\n    emittagEnd(event?: KeyboardEvent) {\n        if (!this.inputElement.value && !!event) {\n            this._tagList.keydown(event);\n        }\n\n        if (!event || this.isSeparatorKey(event)) {\n            this.tagEnd.emit({ input: this.inputElement, value: this.inputElement.value });\n            this.updateInputWidth();\n\n            if (event) {\n                event.preventDefault();\n            }\n        }\n    }\n\n    onInput() {\n        this.updateInputWidth();\n        // Let tag list know whenever the value changes.\n        this._tagList.stateChanges.next();\n    }\n\n    updateInputWidth(): void {\n        const length = this.inputElement.value.length;\n\n        this.renderer.setStyle(this.inputElement, 'max-width', 0);\n        this.oneSymbolWidth = this.inputElement.scrollWidth / length;\n        this.renderer.setStyle(this.inputElement, 'max-width', '');\n\n        if (length > this.countOfSymbolsForUpdateWidth) {\n            this.renderer.setStyle(this.inputElement, 'width', `${length * this.oneSymbolWidth}px`);\n        } else {\n            this.setDefaultInputWidth();\n        }\n    }\n\n    onFocus() {\n        this.focused = true;\n        this._tagList.stateChanges.next();\n    }\n\n    /** Focuses the input. */\n    focus(): void {\n        this.inputElement.focus();\n    }\n\n    private setDefaultInputWidth() {\n        this.renderer.setStyle(this.inputElement, 'width', '30px');\n    }\n\n    /** Checks whether a keycode is one of the configured separators. */\n    private isSeparatorKey(event: KeyboardEvent) {\n        if (hasModifierKey(event)) { return false; }\n\n        const separators = this.separatorKeyCodes;\n        // tslint:disable-next-line: deprecation\n        const keyCode = event.keyCode;\n\n        return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n    }\n}\n","import { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    Self,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { FocusKeyManager } from '@ptsecurity/cdk/a11y';\nimport { BACKSPACE, END, HOME } from '@ptsecurity/cdk/keycodes';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { merge, Observable, Subject, Subscription } from 'rxjs';\nimport { startWith, takeUntil } from 'rxjs/operators';\n\nimport { McTagTextControl } from './tag-text-control';\nimport { McTag, McTagEvent, McTagSelectionChange } from './tag.component';\n\n\nexport class McTagListBase {\n    constructor(\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McTagListMixinBase: CanUpdateErrorStateCtor & typeof McTagListBase = mixinErrorState(McTagListBase);\n\n\n// Increasing integer for generating unique ids for tag-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the tag list value has changed. */\nexport class McTagListChange {\n    constructor(public source: McTagList, public value: any) {}\n}\n\n\n@Component({\n    selector: 'mc-tag-list',\n    exportAs: 'mcTagList',\n    template: '<ng-content></ng-content>',\n    host: {\n        class: 'mc-tag-list',\n        '[attr.tabindex]': 'disabled ? null : _tabIndex',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-invalid]': 'errorState',\n        '[class.mc-required]': 'required',\n        '(focus)': 'focus()',\n        '(blur)': 'blur()',\n        '(keydown)': 'keydown($event)',\n        '[id]': 'uid'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McTagList }],\n    styleUrls: ['tag-list.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McTagList extends McTagListMixinBase implements McFormFieldControl<any>,\n    ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n\n    readonly controlType: string = 'mc-tag-list';\n\n    /** Combined stream of all of the child tags' selection change events. */\n    get tagSelectionChanges(): Observable<McTagSelectionChange> {\n        return merge(...this.tags.map((tag) => tag.selectionChange));\n    }\n\n    /** Combined stream of all of the child tags' focus change events. */\n    get tagFocusChanges(): Observable<McTagEvent> {\n        return merge(...this.tags.map((tag) => tag.onFocus));\n    }\n\n    /** Combined stream of all of the child tags' blur change events. */\n    get tagBlurChanges(): Observable<McTagEvent> {\n        return merge(...this.tags.map((tag) => tag.onBlur));\n    }\n\n    /** Combined stream of all of the child tags' remove change events. */\n    get tagRemoveChanges(): Observable<McTagEvent> {\n        return merge(...this.tags.map((tag) => tag.destroyed));\n    }\n\n    /** The array of selected tags inside tag list. */\n    get selected(): McTag[] | McTag {\n        return this.multiple ? this.selectionModel.selected : this.selectionModel.selected[0];\n    }\n\n    /** Whether the user should be allowed to select multiple tags. */\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith(): (o1: any, o2: any) => boolean {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        this._compareWith = fn;\n\n        if (this.selectionModel) {\n            // A different comparator means the selection could change.\n            this.initializeSelection();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): any {\n        return this._value;\n    }\n\n    set value(value: any) {\n        this.writeValue(value);\n        this._value = value;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get id(): string {\n        return this.tagInput ? this.tagInput.id : this.uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get placeholder(): string {\n        return this.tagInput ? this.tagInput.placeholder : this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n\n    /** Whether any tags or the mcTagInput inside of this tag-list has focus. */\n    get focused(): boolean {\n        return (this.tagInput && this.tagInput.focused) || this.hasFocusedTag();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return (!this.tagInput || this.tagInput.empty) && this.tags.length === 0;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat(): boolean {\n        return !this.empty || this.focused;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        return this.ngControl ? !!this.ngControl.disabled : this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n        this.syncTagsDisabledState();\n    }\n\n    /**\n     * Whether or not this tag list is selectable. When a tag list is not selectable,\n     * the selected states for all the tags inside the tag list are always ignored.\n     */\n    @Input()\n    get selectable(): boolean {\n        return this._selectable;\n    }\n\n    set selectable(value: boolean) {\n        this._selectable = coerceBooleanProperty(value);\n\n        if (this.tags) {\n            this.tags.forEach((tag) => tag.tagListSelectable = this._selectable);\n        }\n    }\n\n    @Input()\n    set tabIndex(value: number) {\n        this.userTabIndex = value;\n        this._tabIndex = value;\n    }\n\n    /**\n     * Event that emits whenever the raw value of the tag-list changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    uid: string = `mc-tag-list-${nextUniqueId++}`;\n\n    /**\n     * User defined tab index.\n     * When it is not null, use user defined tab index. Otherwise use tabIndex\n     */\n    userTabIndex: number | null = null;\n\n    keyManager: FocusKeyManager<McTag>;\n\n    selectionModel: SelectionModel<McTag>;\n\n    tagChanges = new EventEmitter<any>();\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /** Orientation of the tag list. */\n    @Input('orientation') orientation: 'horizontal' | 'vertical' = 'horizontal';\n\n    /** Event emitted when the selected tag list value has been changed by the user. */\n    @Output() readonly change: EventEmitter<McTagListChange> = new EventEmitter<McTagListChange>();\n\n    /** The tag components contained within this tag list. */\n    @ContentChildren(McTag, {\n        // Need to use `descendants: true`,\n        // Ivy will no longer match indirect descendants if it's left as false.\n        descendants: true\n    }) tags: QueryList<McTag>;\n\n    // public property with setter - should be private?\n    // tslint:disable-next-line: naming-convention orthodox-getter-and-setter\n    _tabIndex = 0;\n\n    private _value: any;\n\n    private _required: boolean = false;\n\n    private _placeholder: string;\n\n    private _disabled: boolean = false;\n\n    private _selectable: boolean = true;\n\n    /** The tag input to add more tags */\n    private tagInput: McTagTextControl;\n\n    private _multiple: boolean = false;\n\n    /**\n     * When a tag is destroyed, we store the index of the destroyed tag until the tags\n     * query list notifies about the update. This is necessary because we cannot determine an\n     * appropriate tag that should receive focus until the array of tags updated completely.\n     */\n    private lastDestroyedTagIndex: number | null = null;\n\n    /** Subject that emits when the component has been destroyed. */\n    private destroyed = new Subject<void>();\n\n    /** Subscription to focus changes in the tags. */\n    private tagFocusSubscription: Subscription | null;\n\n    /** Subscription to blur changes in the tags. */\n    private tagBlurSubscription: Subscription | null;\n\n    /** Subscription to selection changes in tags. */\n    private tagSelectionSubscription: Subscription | null;\n\n    /** Subscription to remove changes in tags. */\n    private tagRemoveSubscription: Subscription | null;\n\n    constructor(\n        protected elementRef: ElementRef<HTMLElement>,\n        private changeDetectorRef: ChangeDetectorRef,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        @Optional() private dir: Directionality,\n        @Optional() parentForm: NgForm,\n        @Optional() parentFormGroup: FormGroupDirective,\n        @Optional() @Self() public ngControl: NgControl\n    ) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            this.ngControl.valueAccessor = this;\n        }\n    }\n\n    ngAfterContentInit() {\n        this.keyManager = new FocusKeyManager<McTag>(this.tags)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this.dir ? this.dir.value : 'ltr');\n\n        if (this.dir) {\n            this.dir.change\n                .pipe(takeUntil(this.destroyed))\n                .subscribe((dir) => this.keyManager.withHorizontalOrientation(dir));\n        }\n\n        // Prevents the tag list from capturing focus and redirecting\n        // it back to the first tag when the user tabs out.\n        this.keyManager.tabOut\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(() => {\n                this._tabIndex = -1;\n\n                setTimeout(() => {\n                    this._tabIndex = this.userTabIndex || 0;\n                    this.changeDetectorRef.markForCheck();\n                });\n            });\n\n        // When the list changes, re-subscribe\n        this.tags.changes\n            .pipe(startWith(null), takeUntil(this.destroyed))\n            .subscribe(() => {\n                if (this.disabled) {\n                    // Since this happens after the content has been\n                    // checked, we need to defer it to the next tick.\n                    Promise.resolve().then(() => { this.syncTagsDisabledState(); });\n                }\n\n                this.resetTags();\n\n                // Reset tags selected/deselected status\n                this.initializeSelection();\n\n                // Check to see if we need to update our tab index\n                this.updateTabIndex();\n\n                // Check to see if we have a destroyed tag and need to refocus\n                this.updateFocusForDestroyedTags();\n\n                // Defer setting the value in order to avoid the \"Expression\n                // has changed after it was checked\" errors from Angular.\n                Promise.resolve().then(() => { this.tagChanges.emit(this.tags.toArray()); });\n\n                this.stateChanges.next();\n            });\n    }\n\n    ngOnInit() {\n        this.selectionModel = new SelectionModel<McTag>(this.multiple, undefined, false);\n        this.stateChanges.next();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroyed.next();\n        this.destroyed.complete();\n        this.stateChanges.complete();\n\n        this.dropSubscriptions();\n    }\n\n    // tslint:disable-next-line:no-empty\n    onTouched = () => {};\n\n    // tslint:disable-next-line:no-empty\n    onChange: (value: any) => void = () => {};\n\n    /** Associates an HTML input element with this tag list. */\n    registerInput(inputElement: McTagTextControl): void {\n        this.tagInput = inputElement;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any): void {\n        if (this.tags) {\n            this.setSelectionByValue(value, false);\n        }\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this.onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n        this.stateChanges.next();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick(event: MouseEvent) {\n        if (!this.originatesFromTag(event)) {\n            this.focus();\n        }\n    }\n\n    /**\n     * Focuses the first non-disabled tag in this tag list, or the associated input when there\n     * are no eligible tags.\n     */\n    focus(): void {\n        if (this.disabled) { return; }\n\n        // TODO: ARIA says this should focus the first `selected` tag if any are selected.\n        // Focus on first element if there's no tagInput inside tag-list\n        if (this.tagInput && this.tagInput.focused) {\n            // do nothing\n        } else if (this.tags.length > 0) {\n            this.keyManager.setFirstItemActive();\n            this.stateChanges.next();\n        } else {\n            this.focusInput();\n            this.stateChanges.next();\n        }\n    }\n\n    /** Attempt to focus an input if we have one. */\n    focusInput() {\n        if (this.tagInput) {\n            this.tagInput.focus();\n        }\n    }\n\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n    keydown(event: KeyboardEvent) {\n        const target = event.target as HTMLElement;\n\n        // If they are on an empty input and hit backspace, focus the last tag\n        // tslint:disable-next-line: deprecation\n        if (event.keyCode === BACKSPACE && this.isInputEmpty(target)) {\n            this.keyManager.setLastItemActive();\n            event.preventDefault();\n        } else if (target && target.classList.contains('mc-tag')) {\n            // tslint:disable-next-line: deprecation\n            if (event.keyCode === HOME) {\n                this.keyManager.setFirstItemActive();\n                event.preventDefault();\n            // tslint:disable-next-line: deprecation\n            } else if (event.keyCode === END) {\n                this.keyManager.setLastItemActive();\n                event.preventDefault();\n            } else {\n                this.keyManager.onKeydown(event);\n            }\n\n            this.stateChanges.next();\n        }\n    }\n\n    setSelectionByValue(value: any, isUserInput: boolean = true) {\n        this.clearSelection();\n        this.tags.forEach((tag) => tag.deselect());\n\n        if (Array.isArray(value)) {\n            value.forEach((currentValue) => this.selectValue(currentValue, isUserInput));\n            this.sortValues();\n        } else {\n            const correspondingTag = this.selectValue(value, isUserInput);\n\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what tag the user interacted with last.\n            if (correspondingTag && isUserInput) {\n                this.keyManager.setActiveItem(correspondingTag);\n            }\n        }\n    }\n\n    /** When blurred, mark the field as touched when focus moved outside the tag list. */\n    blur() {\n        if (!this.hasFocusedTag()) {\n            this.keyManager.setActiveItem(-1);\n        }\n\n        if (!this.disabled) {\n            if (this.tagInput) {\n                // If there's a tag input, we should check whether the focus moved to tag input.\n                // If the focus is not moved to tag input, mark the field as touched. If the focus moved\n                // to tag input, do nothing.\n                // Timeout is needed to wait for the focus() event trigger on tag input.\n                setTimeout(() => {\n                    if (!this.focused) {\n                        this.markAsTouched();\n                    }\n                });\n            } else {\n                // If there's no tag input, then mark the field as touched.\n                this.markAsTouched();\n            }\n        }\n    }\n\n    /** Mark the field as touched */\n    markAsTouched() {\n        this.onTouched();\n        this.changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     */\n    protected updateTabIndex(): void {\n        // If we have 0 tags, we should not allow keyboard focus\n        this._tabIndex = this.userTabIndex || (this.tags.length === 0 ? -1 : 0);\n    }\n\n    /**\n     * If the amount of tags changed, we need to update the\n     * key manager state and focus the next closest tag.\n     */\n    protected updateFocusForDestroyedTags() {\n        if (this.lastDestroyedTagIndex != null) {\n            if (this.tags.length) {\n                const newTagIndex = Math.min(this.lastDestroyedTagIndex, this.tags.length - 1);\n                this.keyManager.setActiveItem(newTagIndex);\n            } else {\n                this.focusInput();\n            }\n        }\n\n        this.lastDestroyedTagIndex = null;\n    }\n\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of tags.\n     */\n    private isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.tags.length;\n    }\n\n    private isInputEmpty(element: HTMLElement): boolean {\n        if (element && element.nodeName.toLowerCase() === 'input') {\n            const input = element as HTMLInputElement;\n\n            return !input.value;\n        }\n\n        return false;\n    }\n\n    /**\n     * Finds and selects the tag based on its value.\n     * @returns Tag that has the corresponding value.\n     */\n    private selectValue(value: any, isUserInput: boolean = true): McTag | undefined {\n\n        const correspondingTag = this.tags.find((tag) => {\n            return tag.value != null && this._compareWith(tag.value, value);\n        });\n\n        if (correspondingTag) {\n            if (isUserInput) {\n                correspondingTag.selectViaInteraction();\n            } else {\n                correspondingTag.select();\n            }\n\n            this.selectionModel.select(correspondingTag);\n        }\n\n        return correspondingTag;\n    }\n\n    private initializeSelection(): void {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl || this._value) {\n                this.setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n                this.stateChanges.next();\n            }\n        });\n    }\n\n    /**\n     * Deselects every tag in the list.\n     * @param skip Tag that should not be deselected.\n     */\n    private clearSelection(skip?: McTag): void {\n        this.selectionModel.clear();\n        this.tags.forEach((tag) => {\n            if (tag !== skip) {\n                tag.deselect();\n            }\n        });\n        this.stateChanges.next();\n    }\n\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     */\n    private sortValues(): void {\n        if (this._multiple) {\n            this.selectionModel.clear();\n\n            this.tags.forEach((tag) => {\n                if (tag.selected) {\n                    this.selectionModel.select(tag);\n                }\n            });\n            this.stateChanges.next();\n        }\n    }\n\n    /** Emits change event to set the model value. */\n    private propagateChanges(fallbackValue?: any): void {\n        let valueToEmit: any = null;\n\n        if (Array.isArray(this.selected)) {\n            valueToEmit = this.selected.map((tag) => tag.value);\n        } else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.change.emit(new McTagListChange(this, valueToEmit));\n        this.valueChange.emit(valueToEmit);\n        this.onChange(valueToEmit);\n        this.changeDetectorRef.markForCheck();\n    }\n\n    private resetTags() {\n        this.dropSubscriptions();\n        this.listenToTagsFocus();\n        this.listenToTagsSelection();\n        this.listenToTagsRemoved();\n    }\n\n    private dropSubscriptions() {\n        if (this.tagFocusSubscription) {\n            this.tagFocusSubscription.unsubscribe();\n            this.tagFocusSubscription = null;\n        }\n\n        if (this.tagBlurSubscription) {\n            this.tagBlurSubscription.unsubscribe();\n            this.tagBlurSubscription = null;\n        }\n\n        if (this.tagSelectionSubscription) {\n            this.tagSelectionSubscription.unsubscribe();\n            this.tagSelectionSubscription = null;\n        }\n\n        if (this.tagRemoveSubscription) {\n            this.tagRemoveSubscription.unsubscribe();\n            this.tagRemoveSubscription = null;\n        }\n    }\n\n    /** Listens to user-generated selection events on each tag. */\n    private listenToTagsSelection(): void {\n        this.tagSelectionSubscription = this.tagSelectionChanges.subscribe((event) => {\n            if (event.source.selected) {\n                this.selectionModel.select(event.source);\n            } else {\n                this.selectionModel.deselect(event.source);\n            }\n\n            // For single selection tag list, make sure the deselected value is unselected.\n            if (!this.multiple) {\n                this.tags.forEach((tag) => {\n                    if (!this.selectionModel.isSelected(tag) && tag.selected) {\n                        tag.deselect();\n                    }\n                });\n            }\n\n            if (event.isUserInput) {\n                this.propagateChanges();\n            }\n        });\n    }\n\n    /** Listens to user-generated selection events on each tag. */\n    private listenToTagsFocus(): void {\n        this.tagFocusSubscription = this.tagFocusChanges.subscribe((event) => {\n            const tagIndex: number = this.tags.toArray().indexOf(event.tag);\n\n            if (this.isValidIndex(tagIndex)) {\n                this.keyManager.updateActiveItem(tagIndex);\n            }\n            this.stateChanges.next();\n        });\n\n        this.tagBlurSubscription = this.tagBlurChanges.subscribe(() => {\n            this.blur();\n            this.stateChanges.next();\n        });\n    }\n\n    private listenToTagsRemoved(): void {\n        this.tagRemoveSubscription = this.tagRemoveChanges.subscribe((event) => {\n            const tag = event.tag;\n            const tagIndex = this.tags.toArray().indexOf(event.tag);\n\n            // In case the tag that will be removed is currently focused, we temporarily store\n            // the index in order to be able to determine an appropriate sibling tag that will\n            // receive focus.\n            if (this.isValidIndex(tagIndex) && tag.hasFocus) {\n                this.lastDestroyedTagIndex = tagIndex;\n            }\n        });\n    }\n\n    /** Checks whether an event comes from inside a tag element. */\n    private originatesFromTag(event: Event): boolean {\n        let currentElement = event.target as HTMLElement | null;\n\n        while (currentElement && currentElement !== this.elementRef.nativeElement) {\n            if (currentElement.classList.contains('mc-tag')) {\n                return true;\n            }\n\n            currentElement = currentElement.parentElement;\n        }\n\n        return false;\n    }\n\n    /** Checks whether any of the tags is focused. */\n    private hasFocusedTag() {\n        return this.tags.some((tag) => tag.hasFocus);\n    }\n\n    /** Syncs the list's disabled state with the individual tags. */\n    private syncTagsDisabledState() {\n        if (this.tags) {\n            this.tags.forEach((tag) => {\n                tag.disabled = this._disabled;\n            });\n        }\n    }\n}\n\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    NgZone,\n    OnDestroy,\n    Output,\n    QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { BACKSPACE, DELETE, SPACE } from '@ptsecurity/cdk/keycodes';\nimport {\n    CanColor,\n    CanColorCtor,\n    CanDisable,\n    CanDisableCtor,\n    mixinColor,\n    mixinDisabled\n} from '@ptsecurity/mosaic/core';\nimport { McIcon } from '@ptsecurity/mosaic/icon';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\n\n// tslint:disable-next-line:naming-convention\nexport interface McTagEvent {\n    tag: McTag;\n}\n\n/** Event object emitted by McTag when selected or deselected. */\nexport class McTagSelectionChange {\n    constructor(public source: McTag, public selected: boolean, public isUserInput = false) {}\n}\n\n\nconst TAG_ATTRIBUTE_NAMES = ['mc-basic-tag'];\n\n/**\n * Dummy directive to add CSS class to tag avatar.\n * @docs-private\n */\n@Directive({\n    selector: 'mc-tag-avatar, [mcTagAvatar]',\n    host: { class: 'mc-tag-avatar' }\n})\nexport class McTagAvatar {}\n\n/**\n * Dummy directive to add CSS class to tag trailing icon.\n * @docs-private\n */\n@Directive({\n    selector: 'mc-tag-trailing-icon, [mcTagTrailingIcon]',\n    host: { class: 'mc-tag-trailing-icon' }\n})\nexport class McTagTrailingIcon {}\n\nexport class McTagBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McTagMixinBase: CanColorCtor & CanDisableCtor & typeof McTagBase = mixinColor(mixinDisabled(McTagBase));\n\n\n@Component({\n    selector: 'mc-tag, [mc-tag], mc-basic-tag, [mc-basic-tag]',\n    exportAs: 'mcTag',\n    templateUrl: 'tag.partial.html',\n    styleUrls: ['./tag.css'],\n    inputs: ['color', 'disabled'],\n    host: {\n        class: 'mc-tag',\n\n        '[attr.tabindex]': 'tabindex',\n        '[attr.disabled]': 'disabled || null',\n\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': 'hasFocus',\n        '[class.mc-tag-with-avatar]': 'avatar',\n        '[class.mc-tag-with-trailing-icon]': 'trailingIcon || removeIcon',\n        '[class.mc-tag-disabled]': 'disabled',\n        '[class.mc-disabled]': 'disabled',\n\n        '(click)': 'handleClick($event)',\n        '(keydown)': 'handleKeydown($event)',\n        '(focus)': 'focus()',\n        '(blur)': 'blur()'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McTag extends McTagMixinBase implements IFocusableOption, OnDestroy, CanColor, CanDisable {\n    /** Emits when the tag is focused. */\n    readonly onFocus = new Subject<McTagEvent>();\n\n    /** Emits when the tag is blured. */\n    readonly onBlur = new Subject<McTagEvent>();\n\n    nativeElement: HTMLElement;\n\n    /** Whether the tag has focus. */\n    hasFocus: boolean = false;\n\n    /** Whether the tag list is selectable */\n    tagListSelectable: boolean = true;\n\n    @ContentChildren(McIcon) contentChildren: QueryList<McIcon>;\n\n    /** The tag avatar */\n    @ContentChild(McTagAvatar, {static: false}) avatar: McTagAvatar;\n\n    /** The tag's trailing icon. */\n    @ContentChild(McTagTrailingIcon, {static: false}) trailingIcon: McTagTrailingIcon;\n\n    /** The tag's remove toggler. */\n    @ContentChild(forwardRef(() => McTagRemove), {static: false}) removeIcon: McTagRemove;\n\n    /** Emitted when the tag is selected or deselected. */\n    @Output() readonly selectionChange: EventEmitter<McTagSelectionChange> =\n        new EventEmitter<McTagSelectionChange>();\n\n    /** Emitted when the tag is destroyed. */\n    @Output() readonly destroyed: EventEmitter<McTagEvent> = new EventEmitter<McTagEvent>();\n\n    /** Emitted when a tag is to be removed. */\n    @Output() readonly removed: EventEmitter<McTagEvent> = new EventEmitter<McTagEvent>();\n\n    /** Whether the tag is selected. */\n    @Input()\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    set selected(value: boolean) {\n        const coercedValue = coerceBooleanProperty(value);\n\n        if (coercedValue !== this._selected) {\n            this._selected = coercedValue;\n            this.dispatchSelectionChange();\n        }\n    }\n\n    private _selected: boolean = false;\n\n    /** The value of the tag. Defaults to the content inside `<mc-tag>` tags. */\n    @Input()\n    get value(): any {\n        return this._value !== undefined\n            ? this._value\n            : this.elementRef.nativeElement.textContent;\n    }\n\n    set value(value: any) {\n        this._value = value;\n    }\n\n    private _value: any;\n\n    /**\n     * Whether or not the tag is selectable. When a tag is not selectable,\n     * changes to its selected state are always ignored. By default a tag is\n     * selectable, and it becomes non-selectable if its parent tag list is\n     * not selectable.\n     */\n    @Input()\n    get selectable(): boolean {\n        return this._selectable && this.tagListSelectable;\n    }\n\n    set selectable(value: boolean) {\n        this._selectable = coerceBooleanProperty(value);\n    }\n\n    private _selectable: boolean = true;\n\n    /**\n     * Determines whether or not the tag displays the remove styling and emits (removed) events.\n     */\n    @Input()\n    get removable(): boolean {\n        return this._removable;\n    }\n\n    set removable(value: boolean) {\n        this._removable = coerceBooleanProperty(value);\n    }\n\n    private _removable: boolean = true;\n\n    get tabindex(): any {\n        if (!this.selectable) { return null; }\n\n        return this.disabled ? null : -1;\n    }\n\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value !== this.disabled) {\n            this._disabled = value;\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    constructor(\n        public elementRef: ElementRef,\n        public changeDetectorRef: ChangeDetectorRef,\n        private _ngZone: NgZone\n    ) {\n        super(elementRef);\n\n        this.addHostClassName();\n\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        this.addClassModificatorForIcons();\n    }\n\n    addClassModificatorForIcons() {\n        const icons = this.contentChildren.map((item) => item._elementRef.nativeElement);\n\n        if (icons.length === 1) {\n            const iconElement = icons[0];\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-left-icon');\n                }\n\n                if (iconElement.previousSibling) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-right-icon');\n                }\n            }\n        } else if (icons.length > 1) {\n            const firstIconElement = icons[0];\n            const secondIconElement = icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n\n    addHostClassName() {\n        // Add class for the different tags\n        for (const attr of TAG_ATTRIBUTE_NAMES) {\n            if (\n                this.elementRef.nativeElement.hasAttribute(attr) ||\n                this.elementRef.nativeElement.tagName.toLowerCase() === attr\n            ) {\n                    (this.elementRef.nativeElement as HTMLElement).classList.add(attr);\n\n                    return;\n            }\n        }\n        (this.elementRef.nativeElement as HTMLElement).classList.add('mc-standard-tag');\n    }\n\n    ngOnDestroy() {\n        this.destroyed.emit({ tag: this });\n    }\n\n    select(): void {\n        if (!this._selected) {\n            this._selected = true;\n            this.dispatchSelectionChange();\n        }\n    }\n\n    deselect(): void {\n        if (this._selected) {\n            this._selected = false;\n            this.dispatchSelectionChange();\n        }\n    }\n\n    selectViaInteraction(): void {\n        if (!this._selected) {\n            this._selected = true;\n            this.dispatchSelectionChange(true);\n        }\n    }\n\n    toggleSelected(isUserInput: boolean = false): boolean {\n        this._selected = !this.selected;\n        this.dispatchSelectionChange(isUserInput);\n\n        return this.selected;\n    }\n\n    /** Allows for programmatic focusing of the tag. */\n    focus(): void {\n        if (!this.selectable) { return; }\n\n        if (!this.hasFocus) {\n            this.elementRef.nativeElement.focus();\n\n            this.onFocus.next({ tag: this });\n\n            Promise.resolve().then(() => {\n                this.hasFocus = true;\n                this.changeDetectorRef.markForCheck();\n            });\n        }\n    }\n\n    /**\n     * Allows for programmatic removal of the tag. Called by the McTagList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the tag from the DOM.\n     */\n    remove(): void {\n        if (this.removable) {\n            this.removed.emit({ tag: this });\n        }\n    }\n\n    handleClick(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n        } else {\n            event.stopPropagation();\n        }\n    }\n\n    handleKeydown(event: KeyboardEvent): void {\n        if (this.disabled) { return; }\n\n        // tslint:disable-next-line: deprecation\n        switch (event.keyCode) {\n            case DELETE:\n            case BACKSPACE:\n                // If we are removable, remove the focused tag\n                this.remove();\n                // Always prevent so page navigation does not occur\n                event.preventDefault();\n                break;\n            case SPACE:\n                // If we are selectable, toggle the focused tag\n                if (this.selectable) {\n                    this.toggleSelected(true);\n                }\n\n                // Always prevent space from scrolling the page since the list has focus\n                event.preventDefault();\n                break;\n            default:\n        }\n    }\n\n    blur(): void {\n        // When animations are enabled, Angular may end up removing the tag from the DOM a little\n        // earlier than usual, causing it to be blurred and throwing off the logic in the tag list\n        // that moves focus not the next item. To work around the issue, we defer marking the tag\n        // as not focused until the next time the zone stabilizes.\n        this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                this._ngZone.run(() => {\n                    this.hasFocus = false;\n                    this.onBlur.next({ tag: this });\n                });\n            });\n    }\n\n    private dispatchSelectionChange(isUserInput = false) {\n        this.selectionChange.emit({\n            source: this,\n            isUserInput,\n            selected: this._selected\n        });\n    }\n}\n\n\n/**\n *\n * Example:\n *\n *     `<mc-tag>\n *       <mc-icon mcTagRemove>cancel</mc-icon>\n *     </mc-tag>`\n *\n * You *may* use a custom icon, but you may need to override the `mc-tag-remove` positioning\n * styles to properly center the icon within the tag.\n */\n@Directive({\n    selector: '[mcTagRemove]',\n    host: {\n        class: 'mc-tag-remove mc-tag-trailing-icon',\n        '(click)': 'handleClick($event)'\n    }\n})\nexport class McTagRemove {\n    constructor(protected parentTag: McTag) {}\n\n    /** Calls the parent tag's public `remove()` method if applicable. */\n    handleClick(event: Event): void {\n        if (this.parentTag.removable) {\n            this.parentTag.remove();\n        }\n\n        // We need to stop event propagation because otherwise the event will bubble up to the\n        // form field and cause the `onContainerClick` method to be invoked. This method would then\n        // reset the focused tag that has been focused after tag removal. Usually the parent\n        // the parent click listener of the `McTag` would prevent propagation, but it can happen\n        // that the tag is being removed before the event bubbles up.\n        event.stopPropagation();\n    }\n}\n","import { InjectionToken } from '@angular/core';\n\n\n/** Default options, for the chips module, that can be overridden. */\n// tslint:disable-next-line: naming-convention\nexport interface McTagsDefaultOptions {\n    /** The list of key codes that will trigger a chipEnd event. */\n    separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MC_TAGS_DEFAULT_OPTIONS = new InjectionToken<McTagsDefaultOptions>('mc-tags-default-options');\n"],"names":["nextUniqueId"],"mappings":"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"}