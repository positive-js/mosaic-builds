{"version":3,"file":"button-toggle.js","sources":["../../../packages/mosaic/button-toggle/button-toggle.module.ts","../../../packages/mosaic/button-toggle/button-toggle.component.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { McButtonModule } from '@ptsecurity/mosaic/button';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McButtonToggle, McButtonToggleGroup } from './button-toggle.component';\n\n\n@NgModule({\n    imports: [McCommonModule, McButtonModule],\n    exports: [McCommonModule, McButtonToggleGroup, McButtonToggle],\n    declarations: [McButtonToggleGroup, McButtonToggle]\n})\nexport class McButtonToggleModule {}\n","import { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    ViewEncapsulation,\n    ViewChild\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { McButton } from '@ptsecurity/mosaic/button';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/**\n * Provider Expression that allows mc-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McButtonToggleGroup),\n    multi: true\n};\n\n/** Change event object emitted by MсButtonToggle. */\nexport class McButtonToggleChange {\n    constructor(\n        /** The MсButtonToggle that emits the event. */\n        public source: McButtonToggle,\n        /** The value assigned to the MсButtonToggle. */\n        public value: any) {\n    }\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n    selector: 'mc-button-toggle-group',\n    providers: [MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n    host: {\n        role: 'group',\n        class: 'mc-button-toggle-group',\n        '[class.mc-button-toggle-vertical]': 'vertical'\n    },\n    exportAs: 'mcButtonToggleGroup'\n})\nexport class McButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n\n    /** Whether the toggle group is vertical. */\n    @Input()\n    get vertical(): boolean {\n        return this._vertical;\n    }\n\n    set vertical(value: boolean) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n\n    /** Value of the toggle group. */\n    @Input()\n    get value(): any {\n        const selected = this.selectionModel ? this.selectionModel.selected : [];\n\n        if (this.multiple) {\n            return selected.map((toggle) => toggle.value);\n        }\n\n        return selected[0] ? selected[0].value : undefined;\n    }\n\n    set value(newValue: any) {\n        this.setSelectionByValue(newValue);\n        this.valueChange.emit(this.value);\n    }\n\n    /** Selected button toggles in the group. */\n    get selected(): any {\n        const selected = this.selectionModel.selected;\n\n        return this.multiple ? selected : (selected[0] || null);\n    }\n\n    /** Whether multiple button toggles can be selected. */\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    /** Child button toggle buttons. */\n    @ContentChildren(forwardRef(() => McButtonToggle)) buttonToggles: QueryList<McButtonToggle>;\n\n    /** Whether multiple button toggle group is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        if (!this.buttonToggles) {\n            return;\n        }\n\n        this.buttonToggles.forEach((toggle) => toggle.markForCheck());\n    }\n\n    /**\n     * Event that emits whenever the value of the group changes.\n     * Used to facilitate two-way data binding.\n     * @docs-private\n     */\n    @Output() readonly valueChange = new EventEmitter<any>();\n\n    /** Event emitted when the group's value changes. */\n    @Output() readonly change: EventEmitter<McButtonToggleChange> =\n        new EventEmitter<McButtonToggleChange>();\n    private _vertical = false;\n    private _multiple = false;\n    private _disabled = false;\n    private selectionModel: SelectionModel<McButtonToggle>;\n\n    /**\n     * Reference to the raw value that the consumer tried to assign. The real\n     * value will exclude any values from this one that don't correspond to a\n     * toggle. Useful for the cases where the value is assigned before the toggles\n     * have been initialized or at the same that they're being swapped out.\n     */\n    private rawValue: any;\n\n    constructor(private _changeDetector: ChangeDetectorRef) {}\n\n    /**\n     * The method to be called in order to update ngModel.\n     * Now `ngModel` binding is not supported in multiple selection mode.\n     */\n    // tslint:disable-next-line:no-empty\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n    // tslint:disable-next-line:no-empty\n    onTouched: () => any = () => {};\n\n    ngOnInit() {\n        this.selectionModel = new SelectionModel<McButtonToggle>(this.multiple, undefined, false);\n    }\n\n    ngAfterContentInit() {\n        this.selectionModel.select(...this.buttonToggles.filter((toggle) => toggle.checked));\n        this.disabled = this._disabled;\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value Value to be set to the model.\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        const selected = this.selected;\n        const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n        const event = new McButtonToggleChange(source, this.value);\n        this.controlValueAccessorChangeFn(event.value);\n        this.change.emit(event);\n    }\n\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param toggle Toggle to be synced.\n     * @param select Whether the toggle should be selected.\n     * @param isUserInput Whether the change was a result of a user interaction.\n     */\n    syncButtonToggle(toggle: McButtonToggle, select: boolean, isUserInput = false) {\n        // Deselect the currently-selected toggle, if we're in single-selection\n        // mode and the button being toggled isn't selected at the moment.\n        if (!this.multiple && this.selected && !toggle.checked) {\n            (this.selected as McButtonToggle).checked = false;\n        }\n\n        if (select) {\n            this.selectionModel.select(toggle);\n        } else {\n            this.selectionModel.deselect(toggle);\n        }\n\n        // Only emit the change event for user input.\n        if (isUserInput) {\n            this.emitChangeEvent();\n        }\n\n        // Note: we emit this one no matter whether it was a user interaction, because\n        // it is used by Angular to sync up the two-way data binding.\n        this.valueChange.emit(this.value);\n    }\n\n    /** Checks whether a button toggle is selected. */\n    isSelected(toggle: McButtonToggle) {\n        return this.selectionModel.isSelected(toggle);\n    }\n\n    /** Determines whether a button toggle should be checked on init. */\n    isPrechecked(toggle: McButtonToggle) {\n        if (this.rawValue === undefined) {\n            return false;\n        }\n\n        if (this.multiple && Array.isArray(this.rawValue)) {\n            return this.rawValue.some((value) => toggle.value != null && value === toggle.value);\n        }\n\n        return toggle.value === this.rawValue;\n    }\n\n    /** Updates the selection state of the toggles in the group based on a value. */\n    private setSelectionByValue(value: any | any[]) {\n        this.rawValue = value;\n\n        if (!this.buttonToggles) {\n            return;\n        }\n\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw Error('Value must be an array in multiple-selection mode.');\n            }\n\n            this.clearSelection();\n            value.forEach((currentValue: any) => this.selectValue(currentValue));\n        } else {\n            this.clearSelection();\n            this.selectValue(value);\n        }\n    }\n\n    /** Clears the selected toggles. */\n    private clearSelection() {\n        this.selectionModel.clear();\n        this.buttonToggles.forEach((toggle) => toggle.checked = false);\n    }\n\n    /** Selects a value if there's a toggle that corresponds to it. */\n    private selectValue(value: any) {\n        const correspondingOption = this.buttonToggles.find((toggle) => {\n            return toggle.value != null && toggle.value === value;\n        });\n\n        if (correspondingOption) {\n            correspondingOption.checked = true;\n            this.selectionModel.select(correspondingOption);\n        }\n    }\n}\n\n/** Single button inside of a toggle group. */\n@Component({\n    selector: 'mc-button-toggle',\n    template: `\n        <button\n            mc-button\n            type=\"button\"\n            [class.mc-active]=\"checked\"\n            [disabled]=\"disabled\"\n            [attr.tabindex]=\"disabled ? -1 : tabIndex\"\n            (click)=\"onToggleClick()\">\n            <ng-content></ng-content>\n        </button>\n    `,\n    styleUrls: ['button-toggle.css'],\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcButtonToggle',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        class: 'mc-button-toggle',\n        '[class.mc-button-toggle-standalone]': '!buttonToggleGroup',\n        // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n        // but can still receive focus from things like cdkFocusInitial.\n        '[attr.tabindex]': '-1',\n        '[attr.disabled]': 'disabled || null',\n        '(focus)': 'focus()'\n    }\n})\nexport class McButtonToggle implements OnInit, OnDestroy {\n\n    /** Whether the button is checked. */\n    @Input()\n    get checked(): boolean {\n        return this.buttonToggleGroup ? this.buttonToggleGroup.isSelected(this) : this._checked;\n    }\n\n    set checked(value: boolean) {\n        const newValue = coerceBooleanProperty(value);\n\n        if (newValue !== this._checked) {\n            this._checked = newValue;\n\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup.syncButtonToggle(this, this._checked);\n            }\n\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    // tslint:disable-next-line:no-reserved-keywords\n    type: ToggleType;\n\n    @ViewChild(McButton, {static: false}) mcButton: McButton;\n\n    /** McButtonToggleGroup reads this to assign its own value. */\n    @Input() value: any;\n\n    /** Tabindex for the toggle. */\n    @Input() tabIndex: number | null;\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n    }\n    set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n\n    /** Event emitted when the group value changes. */\n    @Output() readonly change: EventEmitter<McButtonToggleChange> =\n        new EventEmitter<McButtonToggleChange>();\n\n    private isSingleSelector = false;\n    private _checked = false;\n    private _disabled: boolean = false;\n\n    constructor(\n        @Optional() public buttonToggleGroup: McButtonToggleGroup,\n        private changeDetectorRef: ChangeDetectorRef,\n        private focusMonitor: FocusMonitor,\n        private element: ElementRef\n    ) {}\n\n    ngOnInit() {\n        this.isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n        this.type = this.isSingleSelector ? 'radio' : 'checkbox';\n\n        if (this.buttonToggleGroup && this.buttonToggleGroup.isPrechecked(this)) {\n            this.checked = true;\n        }\n\n        this.focusMonitor.monitor(this.element.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        const group = this.buttonToggleGroup;\n\n        this.focusMonitor.stopMonitoring(this.element.nativeElement);\n\n        // Remove the toggle from the selection once it's destroyed. Needs to happen\n        // on the next tick in order to avoid \"changed after checked\" errors.\n        if (group && group.isSelected(this)) {\n            Promise.resolve().then(() => group.syncButtonToggle(this, false));\n        }\n    }\n\n    /** Focuses the button. */\n    focus(): void {\n        this.element.nativeElement.focus();\n    }\n\n    /** Checks the button toggle due to an interaction with the underlying native button. */\n    onToggleClick() {\n        if (this.disabled) {\n            return;\n        }\n\n        const newChecked = this.isSingleSelector ? true : !this._checked;\n\n        if (newChecked !== this._checked) {\n            this._checked = newChecked;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup.syncButtonToggle(this, this._checked, true);\n                this.buttonToggleGroup.onTouched();\n            }\n        }\n        // Emit a change event when it's the single selector\n        this.change.emit(new McButtonToggleChange(this, this.value));\n    }\n\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When the group value changes, the button will not be notified.\n        // Use `markForCheck` to explicit update button toggle's status.\n        this.changeDetectorRef.markForCheck();\n    }\n}\n"],"names":[],"mappings":"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"}