{"version":3,"file":"tree.js","sources":["../../../src/lib/tree/index.ts","../../../src/lib/tree/data-source/nested-data-source.ts","../../../src/lib/tree/data-source/flat-data-source.ts","../../../src/lib/tree/tree.module.ts","../../../src/lib/tree/tree-selection.ts","../../../src/lib/tree/padding.ts","../../../src/lib/tree/node.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by ITreeControl and each non-leaf node.\n */\nexport class McTreeNestedDataSource<T> extends DataSource<T> {\n    _data = new BehaviorSubject<T[]>([]);\n\n    /**\n     * Data for the nested tree\n     */\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n    }\n\n    connect(collectionViewer: ICollectionViewer): Observable<T[]> {\n        return merge(...[collectionViewer.viewChange, this._data])\n            .pipe(map(() => this.data));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { FlatTreeControl, ITreeControl } from '@ptsecurity/cdk/tree';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class McTreeFlattener<T, F> {\n\n    constructor(public transformFunction: (node: T, level: number) => F,\n                public getLevel: (node: F) => number,\n                public isExpandable: (node: F) => boolean,\n                public getChildren: (node: T) => Observable<T[]>) {\n    }\n\n    _flattenNode(node: T, level: number,\n                 resultNodes: F[], parentMap: boolean[]): F[] {\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n\n        if (this.isExpandable(flatNode)) {\n            this.getChildren(node).pipe(take(1)).subscribe((children) => {\n                children.forEach((child, index) => {\n                    const childParentMap: boolean[] = parentMap.slice();\n                    childParentMap.push(index !== children.length - 1);\n                    this._flattenNode(child, level + 1, resultNodes, childParentMap);\n                });\n            });\n        }\n\n        return resultNodes;\n    }\n\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n    flattenNodes(structuredData: T[]): F[] {\n        const resultNodes: F[] = [];\n        structuredData.forEach((node) => this._flattenNode(node, 0, resultNodes, []));\n\n        return resultNodes;\n    }\n\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n    expandFlattenedNodes(nodes: F[], treeControl: ITreeControl<F>): F[] {\n        const results: F[] = [];\n        const currentExpand: boolean[] = [];\n        currentExpand[0] = true;\n\n        nodes.forEach((node) => {\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n\n            if (expand) { results.push(node); }\n\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        });\n\n        return results;\n    }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `McTree`.\n * The nested tree nodes of type `T` are flattened through `MсTreeFlattener`, and converted\n * to type `F` for `McTree` to consume.\n */\nexport class McTreeFlatDataSource<T, F> extends DataSource<F> {\n    _flattenedData = new BehaviorSubject<F[]>([]);\n\n    _expandedData = new BehaviorSubject<F[]>([]);\n\n    _data: BehaviorSubject<T[]>;\n\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n        this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n        this.treeControl.dataNodes = this._flattenedData.value;\n    }\n\n    constructor(private treeControl: FlatTreeControl<F>,\n                private treeFlattener: McTreeFlattener<T, F>,\n                initialData: T[] = []) {\n        super();\n        this._data = new BehaviorSubject<T[]>(initialData);\n    }\n\n    connect(collectionViewer: ICollectionViewer): Observable<F[]> {\n        const changes = [\n            collectionViewer.viewChange,\n            this.treeControl.expansionModel.onChange!,\n            this._flattenedData\n        ];\n\n        return merge(...changes).pipe(map(() => {\n            this._expandedData.next(\n                this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n\n            return this._expandedData.value;\n        }));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { CdkTreeModule } from '@ptsecurity/cdk/tree';\n\nimport { McTreeNodeDef } from './node';\nimport { McTreeNodePadding } from './padding';\nimport { McTreeSelection, McTreeNodeOption } from './tree-selection';\n\n\nconst MC_TREE_DIRECTIVES = [\n    McTreeNodeDef,\n    McTreeNodePadding,\n    McTreeSelection,\n    McTreeNodeOption\n];\n\n@NgModule({\n    imports: [CommonModule, CdkTreeModule],\n    exports: MC_TREE_DIRECTIVES,\n    declarations: MC_TREE_DIRECTIVES\n})\nexport class McTreeModule {}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, ContentChildren, EventEmitter, forwardRef, Input, IterableDiffer,\n    IterableDiffers, Output, QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    Directive, ElementRef, Inject\n} from '@angular/core';\nimport { NodeDef, ViewData } from '@angular/core/src/view';\n\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { CdkTreeNode, CdkTree, CdkTreeNodeOutlet } from '@ptsecurity/cdk/tree';\n\nimport { CanDisable, HasTabIndex, mixinDisabled, mixinTabIndex, toBoolean } from '@ptsecurity/mosaic/core';\n\nimport { FocusKeyManager } from '@ptsecurity/cdk/a11y';\n\nimport { END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, SPACE } from '@ptsecurity/cdk/keycodes';\n\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n    exportAs: 'mcTreeNodeOption',\n    selector: 'mc-tree-node-option',\n    host: {\n        tabindex: '-1',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': '_hasFocus',\n        '[attr.aria-expanded]': 'isExpanded',\n        '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n        class: 'mc-tree-node',\n\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()',\n\n        '(click)': '_handleClick()'\n    },\n    providers: [\n        { provide: CdkTreeNode, useExisting: McTreeNodeOption }\n    ]\n})\nexport class McTreeNodeOption<T> extends CdkTreeNode<T> implements CanDisable {\n    @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n        }\n    }\n\n    @Input()\n    get selected(): boolean {\n        return this.treeSelection.selectedOptions && this.treeSelection.selectedOptions.isSelected(this) || false;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            // this.treeSelection._reportValueChange();\n        }\n    }\n\n    private _hasFocus: boolean = false;\n\n    private _disabled: boolean = false;\n    private _selected: boolean = false;\n\n    constructor(\n        protected _elementRef: ElementRef,\n        @Inject(forwardRef(() => McTreeSelection))\n        protected treeSelection: McTreeSelection<T>\n    ) {\n        super(_elementRef, treeSelection);\n    }\n\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n\n        this.treeSelection.setFocusedOption(this);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.treeSelection.selectedOptions) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.treeSelection.selectedOptions.select(this);\n        } else {\n            this.treeSelection.selectedOptions.deselect(this);\n        }\n\n        // this._changeDetector.markForCheck();\n    }\n\n    _getHeight(): number {\n        return this._elementRef.nativeElement.getClientRects()[0].height;\n    }\n\n    _handleFocus(): void {\n        if (this.disabled || this._hasFocus) { return; }\n\n        this._hasFocus = true;\n    }\n\n    _handleBlur(): void {\n        this._hasFocus = false;\n    }\n\n    _handleClick(): void {\n        if (this.disabled) { return; }\n\n        this.treeSelection.setFocusedOption(this);\n    }\n}\n\nexport const _McTreeSelectionBase = mixinTabIndex(mixinDisabled(CdkTree));\n\nexport class McTreeNavigationChange {\n    constructor(\n        public source: McTreeSelection<any>,\n        public option: McTreeNodeOption<any>\n    ) {}\n}\n\nexport class McTreeSelectionChange {\n    constructor(\n        public source: McTreeSelection<any>,\n        public option: McTreeNodeOption<any>\n    ) {}\n}\n\n@Component({\n    exportAs: 'mcTreeSelection',\n    selector: 'mc-tree-selection',\n    template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n    host: {\n        '[tabIndex]': 'tabIndex',\n        class: 'mc-tree-selection',\n        role: 'tree-selection',\n        '(keydown)': '_onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    styleUrls: ['./tree.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{ provide: CdkTree, useExisting: McTreeSelection }]\n})\nexport class McTreeSelection<T> extends _McTreeSelectionBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex {\n    // Outlets within the tree's template where the dataNodes will be inserted.\n    @ViewChild(CdkTreeNodeOutlet) _nodeOutlet: CdkTreeNodeOutlet;\n\n    @ContentChildren(forwardRef(() => McTreeNodeOption)) options: QueryList<McTreeNodeOption<T>>;\n\n    _keyManager: FocusKeyManager<McTreeNodeOption<T>>;\n\n    selectedOptions: SelectionModel<McTreeNodeOption<T>>;\n\n    _disabled: boolean = false;\n    tabIndex: number;\n    multiple: boolean;\n    autoSelect: boolean;\n    noUnselect: boolean;\n\n    // todo temporary solution\n    withShift: boolean;\n    withCtrl: boolean;\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(rawValue: boolean) {\n        const value = toBoolean(rawValue);\n\n        if (this._disabled !== value) {\n            this._disabled = value;\n\n            if (this._disabled) {\n                console.log('need disable all options');\n            } else {\n                console.log('need enable all options');\n            }\n        }\n    }\n\n    @Output() readonly navigationChange = new EventEmitter<McTreeNavigationChange>();\n\n    @Output() readonly selectionChange = new EventEmitter<McTreeSelectionChange>();\n\n    constructor(\n        private _elementRef: ElementRef,\n        _differs: IterableDiffers,\n        _changeDetectorRef: ChangeDetectorRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('multiple') multiple: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string\n    ) {\n        super(_differs, _changeDetectorRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.multiple = multiple === null ? true : toBoolean(multiple);\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.selectedOptions = new SelectionModel<McTreeNodeOption<T>>(this.multiple);\n    }\n\n    _onKeyDown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n        this.withShift = event.shiftKey;\n        this.withCtrl = event.ctrlKey;\n\n        switch (keyCode) {\n            case LEFT_ARROW:\n                if (this._keyManager.activeItem) {\n                    this.treeControl.collapse(this._keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                break;\n            case RIGHT_ARROW:\n                if (this._keyManager.activeItem) {\n                    this.treeControl.expand(this._keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                break;\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                this._keyManager.setPreviousPageItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                this._keyManager.setNextPageItemActive();\n                event.preventDefault();\n\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    ngAfterContentInit(): void {\n        this._keyManager = new FocusKeyManager<McTreeNodeOption<T>>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation(true)\n            .withHorizontalOrientation(null);\n    }\n\n    updateScrollSize(): void {\n        if (!this.options.first) { return; }\n\n        this._keyManager.withScrollSize(Math.floor(this._getHeight() / this.options.first._getHeight()));\n    }\n\n    setFocusedOption(option: McTreeNodeOption<T>): void {\n        this._keyManager.updateActiveItem(option);\n\n        if (this.withShift && this.multiple) {\n            const previousIndex = this._keyManager.previousActiveItemIndex;\n            const activeIndex = this._keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n\n            this.withShift = false;\n        } else if (this.withCtrl) {\n            this.withCtrl = false;\n\n            if (!this._canDeselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) {\n                this.options.forEach((item) => item.setSelected(false));\n                option.setSelected(true);\n            }\n        }\n\n        this._emitNavigationEvent(option);\n    }\n\n    // Toggles the selected state of the currently focused option.\n    toggleFocusedOption(): void {\n        const focusedIndex = this._keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n            const focusedOption: McTreeNodeOption<T> = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this._canDeselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this._emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    renderNodeChanges(\n        data: T[],\n        dataDiffer: IterableDiffer<T> = this._dataDiffer,\n        viewContainer: any = this._nodeOutlet.viewContainer,\n        parentData?: T\n    ) {\n        super.renderNodeChanges(data, dataDiffer, viewContainer, parentData);\n\n        const arrayOfInstances = [];\n\n        viewContainer._embeddedViews.forEach((view: ViewData) => {\n            const viewDef = view.def;\n\n            viewDef.nodes.forEach((node: NodeDef) => {\n                if (viewDef.nodeMatchedQueries === node.matchedQueryIds) {\n                    const nodeData: any = view.nodes[node.nodeIndex];\n\n                    arrayOfInstances.push(nodeData.instance as never);\n                }\n            });\n        });\n\n        if (this.options) {\n            this.options.reset(arrayOfInstances);\n            this.options.notifyOnChanges();\n        }\n\n        this.updateScrollSize();\n    }\n\n    _getHeight(): number {\n        return this._elementRef.nativeElement.getClientRects()[0].height;\n    }\n\n    _emitNavigationEvent(option: McTreeNodeOption<T>): void {\n        this.navigationChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    _emitChangeEvent(option: McTreeNodeOption<T>): void {\n        this.selectionChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private _isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    private _canDeselectLast(option: McTreeNodeOption<T>): boolean {\n        return !(this.noUnselect && this.selectedOptions.selected.length === 1 && option.selected);\n    }\n}\n\n","import { Directive, Input, OnInit } from '@angular/core';\nimport { CdkTreeNodePadding } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodePadding]',\n    providers: [{ provide: CdkTreeNodePadding, useExisting: McTreeNodePadding }]\n})\nexport class McTreeNodePadding<T> extends CdkTreeNodePadding<T> implements OnInit {\n    get leftPadding(): number {\n        return (this._withIcon ? 0 : this._iconWidth) + this._baseLeftPadding;\n    }\n\n    _baseLeftPadding: number = 6;\n    _iconWidth: number = 20;\n    _indent: number = 16;\n\n    @Input('mcTreeNodePadding') level: number;\n\n    @Input('mcTreeNodePaddingIndent') indent: number;\n\n    _withIcon: boolean;\n\n    _paddingIndent(): string | null {\n        const nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)\n            ? this._tree.treeControl.getLevel(this._treeNode.data)\n            : null;\n\n        const level = this._level || nodeLevel;\n\n        return level ? `${(level * this._indent) + this.leftPadding}px` : `${this._baseLeftPadding}px`;\n    }\n\n    ngOnInit(): void {\n        this._withIcon = this._tree.treeControl.isExpandable(this._treeNode.data);\n        this._setPadding();\n    }\n}\n","import { Directive, Input } from '@angular/core';\n\nimport { CdkTreeNodeDef } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodeDef]',\n    inputs: ['when: mcTreeNodeDefWhen'],\n    providers: [{ provide: CdkTreeNodeDef, useExisting: McTreeNodeDef }]\n})\nexport class McTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n    @Input('mcTreeNode') data: T;\n}\n"],"names":["tslib_1.__decorate","tslib_1.__metadata","tslib_1.__param"],"mappings":"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"}