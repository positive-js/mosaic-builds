{"version":3,"file":"checkbox.js","sources":["../../../packages/mosaic/checkbox/checkbox-module.ts","../../../packages/mosaic/checkbox/checkbox-required-validator.ts","../../../packages/mosaic/checkbox/checkbox.ts","../../../packages/mosaic/checkbox/checkbox-config.ts"],"sourcesContent":["import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McCheckbox } from './checkbox';\nimport { McCheckboxRequiredValidator } from './checkbox-required-validator';\n\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [McCheckbox, McCheckboxRequiredValidator],\n    declarations: [McCheckbox, McCheckboxRequiredValidator]\n})\nexport class McCheckboxModule {\n}\n","import {\n    Directive,\n    forwardRef,\n    Provider\n} from '@angular/core';\nimport {\n    CheckboxRequiredValidator,\n    NG_VALIDATORS\n} from '@angular/forms';\n\n\nexport const MC_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McCheckboxRequiredValidator),\n    multi: true\n};\n\n/**\n * Validator for Mosaic checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mc-checkbox`.\n */\n@Directive({\n    selector: `mc-checkbox[required][formControlName],\n             mc-checkbox[required][formControl], mc-checkbox[required][ngModel]`,\n    providers: [MC_CHECKBOX_REQUIRED_VALIDATOR],\n    host: { '[attr.required]': 'required ? \"\" : null' }\n})\nexport class McCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\n","import {\n    AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport {\n    CanColor, CanColorCtor,\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\nimport { MC_CHECKBOX_CLICK_ACTION, McCheckboxClickAction } from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mc-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McCheckbox),\n    multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n    /** The initial state of the component before any user interaction. */\n    Init,\n    /** The state representing the component when it's becoming checked. */\n    Checked,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate\n}\n\n/** Change event object emitted by McCheckbox. */\nexport class McCheckboxChange {\n    /** The source McCheckbox of the event. */\n    source: McCheckbox;\n    /** The new `checked` value of the checkbox. */\n    checked: boolean;\n}\n\n// Boilerplate for applying mixins to McCheckbox.\n/** @docs-private */\nexport class McCheckboxBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof McCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisabled(McCheckboxBase)));\n\n\n/**\n * A mosaic checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A McCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n */\n@Component({\n    selector: 'mc-checkbox',\n    templateUrl: 'checkbox.html',\n    styleUrls: ['checkbox.css'],\n    exportAs: 'mcCheckbox',\n    host: {\n        class: 'mc-checkbox',\n        '[id]': 'id',\n        '[attr.id]': 'id',\n        '[class.mc-indeterminate]': 'indeterminate',\n        '[class.mc-checked]': 'checked',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-checkbox-label-before]': 'labelPosition == \"before\"'\n    },\n    providers: [MC_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCheckbox extends McCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex {\n\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     */\n    @Input('aria-label') ariaLabel: string = '';\n\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n    /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n    @Input() id: string;\n\n    /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n    @Input() labelPosition: 'before' | 'after' = 'after';\n\n    /** Name value will be applied to the input element if present */\n    @Input() name: string | null = null;\n\n    /** Event emitted when the checkbox's `checked` value changes. */\n    @Output() readonly change: EventEmitter<McCheckboxChange> =\n        new EventEmitter<McCheckboxChange>();\n\n    /** Event emitted when the checkbox's `indeterminate` value changes. */\n    @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** The value attribute of the native input element */\n    @Input() value: string;\n\n    /** The native `<input type=\"checkbox\">` element */\n    @ViewChild('input', {static: false}) inputElement: ElementRef;\n\n    private uniqueId: string = `mc-checkbox-${++nextUniqueId}`;\n\n    private currentAnimationClass: string = '';\n\n    private currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n    /** Returns the unique id for the visual hidden input. */\n    get inputId(): string {\n        return `${this.id || this.uniqueId}-input`;\n    }\n\n    /** Whether the checkbox is required. */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    private _required: boolean;\n// tslint:disable-next-line:naming-convention\n    constructor(_elementRef: ElementRef,\n                private _changeDetectorRef: ChangeDetectorRef,\n                private _focusMonitor: FocusMonitor,\n                @Attribute('tabindex') tabIndex: string,\n                @Optional() @Inject(MC_CHECKBOX_CLICK_ACTION)\n                private _clickAction: McCheckboxClickAction) {\n        super(_elementRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n        this.id = this.uniqueId;\n    }\n\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * @docs-private\n     */\n    // tslint:disable-next-line:no-empty\n    onTouched: () => any = () => {};\n\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this.inputElement.nativeElement)\n            .subscribe((focusOrigin) => this.onInputFocusChange(focusOrigin));\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this.inputElement.nativeElement);\n    }\n\n    /**\n     * Whether the checkbox is checked.\n     */\n    @Input()\n    get checked(): boolean {\n        return this._checked;\n    }\n\n    set checked(value: boolean) {\n        if (value !== this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _checked: boolean = false;\n\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value !== this.disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    @Input()\n    get indeterminate(): boolean {\n        return this._indeterminate;\n    }\n\n    set indeterminate(value: boolean) {\n        const changed = value !== this._indeterminate;\n        this._indeterminate = value;\n\n        if (changed) {\n            if (this._indeterminate) {\n                this.transitionCheckState(TransitionCheckState.Indeterminate);\n            } else {\n                this.transitionCheckState(\n                    this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n    }\n\n    private _indeterminate: boolean = false;\n\n    /** Method being called whenever the label text changes. */\n    onLabelTextChange() {\n        // This method is getting called whenever the label of the checkbox changes.\n        // Since the checkbox uses the OnPush strategy we need to notify it about the change\n        // that has been recognized by the cdkObserveContent directive.\n        this._changeDetectorRef.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any) {\n        this.checked = !!value;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n    }\n\n    getAriaChecked(): 'true' | 'false' | 'mixed' {\n        return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n    }\n\n    /** Toggles the `checked` state of the checkbox. */\n    toggle(): void {\n        this.checked = !this.checked;\n    }\n\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event Input click event\n     */\n    onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && this._clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && this._clickAction !== 'check') {\n\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n\n            this.toggle();\n            this.transitionCheckState(\n                this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this.emitChangeEvent();\n        } else if (!this.disabled && this._clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mc-checkbox`.\n            this.inputElement.nativeElement.checked = this.checked;\n            this.inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n\n    /** Focuses the checkbox. */\n    focus(): void {\n        this._focusMonitor.focusVia(this.inputElement.nativeElement, 'keyboard');\n    }\n\n    onInteractionEvent(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n    // tslint:disable-next-line:no-empty\n    private controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    private transitionCheckState(newState: TransitionCheckState) {\n        const oldState = this.currentCheckState;\n        const element: HTMLElement = this._elementRef.nativeElement;\n\n        if (oldState === newState) {\n            return;\n        }\n        if (this.currentAnimationClass.length > 0) {\n            element.classList.remove(this.currentAnimationClass);\n        }\n\n        this.currentCheckState = newState;\n\n        if (this.currentAnimationClass.length > 0) {\n            element.classList.add(this.currentAnimationClass);\n        }\n    }\n\n    private emitChangeEvent() {\n        const event = new McCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n\n        this.controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    }\n\n    /** Function is called whenever the focus changes for the input element. */\n    private onInputFocusChange(focusOrigin: FocusOrigin) {\n        if (focusOrigin) {\n            this.onTouched();\n        }\n    }\n}\n","import { InjectionToken } from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type McCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MC_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<McCheckboxClickAction>('mc-checkbox-click-action');\n"],"names":[],"mappings":"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"}