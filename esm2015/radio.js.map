{"version":3,"file":"radio.js","sources":["../../../packages/mosaic/radio/radio.module.ts","../../../packages/mosaic/radio/radio.component.ts"],"sourcesContent":["import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McRadioButton, McRadioGroup } from './radio.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule],\n    exports: [McRadioGroup, McRadioButton],\n    declarations: [McRadioGroup, McRadioButton]\n})\nexport class McRadioModule {\n}\n","import { FocusMonitor } from '@angular/cdk/a11y';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport {\n    AfterContentInit, AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef,\n    Input, OnDestroy, OnInit, Optional, Output, QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport {\n    CanColor, CanColorCtor,\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/** Change event object emitted by McRadio. */\nexport class McRadioChange {\n    constructor(\n        /** The McRadioButton that emits the change event. */\n        public source: McRadioButton,\n        /** The value of the McRadioButton. */\n        public value: any) {}\n}\n\n// Boilerplate for applying mixins to McRadioGroup.\n/** @docs-private */\nexport class McRadioGroupBase {}\n// tslint:disable-next-line:naming-convention\nexport const McRadioGroupMixinBase: CanDisableCtor & typeof McRadioGroupBase = mixinDisabled(McRadioGroupBase);\n\n/**\n * Provider Expression that allows mc-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McRadioGroup),\n    multi: true\n};\n\n@Directive({\n    selector: 'mc-radio-group',\n    exportAs: 'mcRadioGroup',\n    providers: [MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n    host: {\n        role: 'radiogroup',\n        class: 'mc-radio-group'\n    },\n    inputs: ['disabled']\n})\nexport class McRadioGroup extends McRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    @Input()\n    get name(): string { return this._name; }\n    set name(value: string) {\n        this._name = value;\n        this.updateRadioButtonNames();\n    }\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this.markRadiosForCheck();\n    }\n\n    /** Value of the radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n\n            this.updateSelectedRadioFromValue();\n            this.checkSelectedRadioButton();\n        }\n    }\n\n    /** Whether the radio button is selected. */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: McRadioButton | null) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this.checkSelectedRadioButton();\n    }\n\n    /** Whether the radio group is disabled */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /** Whether the radio group is required */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** Child radio buttons. */\n    @ContentChildren(forwardRef(() => McRadioButton), { descendants: true })\n    radios: QueryList<McRadioButton>;\n\n    /**\n     * Selected value for group. Should equal the value of the selected radio button if there *is*\n     * a corresponding radio button with a matching value. If there is *not* such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    private _value: any = null;\n\n    /** The HTML name attribute applied to radio buttons in this group. */\n    private _name: string = `mc-radio-group-${nextUniqueId++}`;\n\n    /** The currently selected radio button. Should match value. */\n    private _selected: McRadioButton | null = null;\n\n    /** Whether the `value` has been set to its initial value. */\n    private isInitialized: boolean = false;\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    private _labelPosition: 'before' | 'after' = 'after';\n\n    /** Whether the radio group is disabled. */\n    private _disabled: boolean = false;\n\n    /** Whether the radio group is required. */\n    private _required: boolean = false;\n\n    constructor(\n        private readonly _changeDetector: ChangeDetectorRef\n    ) {\n        super();\n    }\n\n    /** The method to be called in order to update ngModel */\n    // tslint:disable-next-line\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @docs-private\n     */\n    // tslint:disable-next-line\n    onTouched: () => any = () => {};\n\n    checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on McRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the McRadioGroup.\n        this.isInitialized = true;\n    }\n\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        if (this.isInitialized) {\n            this.change.emit(new McRadioChange(this._selected!, this._value));\n        }\n    }\n\n    markRadiosForCheck() {\n        if (this.radios) {\n            this.radios.forEach((radio) => radio.markForCheck());\n        }\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n\n    private updateRadioButtonNames(): void {\n        if (this.radios) {\n            this.radios.forEach((radio) => {\n                radio.name = this.name;\n            });\n        }\n    }\n\n    /** Updates the `selected` radio button from the internal _value state. */\n    private updateSelectedRadioFromValue(): void {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n        if (this.radios != null && !isAlreadySelected) {\n            this._selected = null;\n            this.radios.forEach((radio) => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n}\n\n\n// Boilerplate for applying mixins to McRadioButton.\n/** @docs-private */\nexport class McRadioButtonBase {\n    // Since the disabled property is manually defined for the McRadioButton and isn't set up in\n    // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n    // defined to properly work.\n    disabled: boolean;\n\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {}\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McRadioButtonMixinBase:\n    CanColorCtor &\n    HasTabIndexCtor &\n    typeof McRadioButtonBase =\n        mixinColor(mixinTabIndex(McRadioButtonBase));\n\n\n@Component({\n    selector: 'mc-radio-button',\n    templateUrl: 'radio.component.html',\n    styleUrls: ['radio.css'],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    exportAs: 'mcRadioButton',\n    host: {\n        class: 'mc-radio-button',\n        '[attr.id]': 'id',\n        '[class.mc-checked]': 'checked',\n        '[class.mc-disabled]': 'disabled'\n    }\n})\nexport class McRadioButton extends McRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, HasTabIndex {\n\n    /** Whether this radio button is checked. */\n    @Input()\n    get checked(): boolean { return this._checked; }\n    set checked(value: boolean) {\n        const newCheckedState = toBoolean(value);\n\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** The value of this radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(value: any) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup != null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n\n    /** Whether the radio button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n    }\n    set disabled(value: boolean) {\n        const newDisabledState = toBoolean(value);\n\n        if (this._disabled !== newDisabledState) {\n\n            this._disabled = newDisabledState;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** Whether the radio button is required. */\n    @Input()\n    get required(): boolean {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n\n    /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n    @Input() name: string;\n\n    /** Used to set the 'aria-label' attribute on the underlying input element. */\n    @Input('aria-label') ariaLabel: string;\n\n    /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n    @Input('aria-labelledby') ariaLabelledby: string;\n\n    /** The 'aria-describedby' attribute is read after the element's label and field type. */\n    @Input('aria-describedby') ariaDescribedby: string;\n\n    /** The native `<input type=radio>` element */\n    @ViewChild('input', {static: false}) inputElement: ElementRef;\n\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** The parent radio group. May or may not be present. */\n    radioGroup: McRadioGroup;\n\n    @Input()\n    isFocused: boolean = false;\n\n    /** The unique ID for the radio button. */\n    @Input() id: string;\n\n    /** ID of the native input element inside `<mc-radio-button>` */\n    get inputId(): string { return `${this.id || this.uniqueId}-input`; }\n\n    private _labelPosition: 'before' | 'after';\n\n    /* tslint:disable:member-ordering */\n    private readonly uniqueId: string = `mc-radio-${++nextUniqueId}`;\n\n    /** Whether this radio is checked. */\n    private _checked: boolean = false;\n\n    /** Whether this radio is disabled. */\n    private _disabled: boolean;\n\n    /** Whether this radio is required. */\n    private _required: boolean;\n\n    /** Value assigned to this radio. */\n    private _value: any = null;\n\n    constructor(\n        @Optional() radioGroup: McRadioGroup,\n        elementRef: ElementRef,\n        private readonly _changeDetector: ChangeDetectorRef,\n        private focusMonitor: FocusMonitor,\n        private readonly _radioDispatcher: UniqueSelectionDispatcher\n    ) {\n\n        super(elementRef);\n\n        this.id = this.uniqueId;\n\n        this.radioGroup = radioGroup;\n\n        this.removeUniqueSelectionListener =\n            _radioDispatcher.listen((id: string, name: string) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n\n    ngAfterViewInit() {\n        this.focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe((focusOrigin) => {\n                if (!focusOrigin && this.radioGroup) {\n                    this.radioGroup.touch();\n                }\n            });\n    }\n\n    ngOnDestroy() {\n        this.focusMonitor.stopMonitoring(this._elementRef);\n        this.removeUniqueSelectionListener();\n    }\n\n    /** Focuses the radio button. */\n    focus(): void {\n        this.inputElement.nativeElement.focus();\n    }\n\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n\n    onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n\n    onInputChange(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this.emitChangeEvent();\n\n        if (this.radioGroup) {\n            this.radioGroup.controlValueAccessorChangeFn(this.value);\n            this.radioGroup.touch();\n            if (groupValueChanged) {\n                this.radioGroup.emitChangeEvent();\n            }\n        }\n    }\n\n    /** Unregister function for _radioDispatcher */\n    // tslint:disable-next-line\n    private readonly removeUniqueSelectionListener: () => void = () => {};\n\n    /** Dispatch change event with current value. */\n    private emitChangeEvent(): void {\n        this.change.emit(new McRadioChange(this, this._value));\n    }\n}\n"],"names":[],"mappings":"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"}