{"version":3,"file":"input.js","sources":["../../../src/lib/input/index.ts","../../../src/lib/input/input.module.ts","../../../src/lib/input/input.ts","../../../src/lib/input/input-value-accessor.ts","../../../src/lib/input/input-errors.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {MC_INPUT_VALUE_ACCESSOR as Éµa} from './input-value-accessor';","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McInput, McInputMono } from './input';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule, FormsModule],\n    exports: [McInput, McInputMono],\n    declarations: [McInput, McInputMono]\n})\nexport class McInputModule {\n}\n","import {\n    Directive, DoCheck, ElementRef, Inject, Input, OnChanges,\n    OnDestroy, OnInit, Optional, Self\n} from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@ptsecurity/cdk/platform';\nimport { CanUpdateErrorState, ErrorStateMatcher, mixinErrorState } from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\n\nimport { getMcInputUnsupportedTypeError } from './input-errors';\nimport { MC_INPUT_VALUE_ACCESSOR } from './input-value-accessor';\n\n\nconst MC_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\n\nlet nextUniqueId = 0;\n\nexport class McInputBase {\n    constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n                public _parentForm: NgForm,\n                public _parentFormGroup: FormGroupDirective,\n                public ngControl: NgControl) {\n    }\n}\n\nexport const _McInputMixinBase = mixinErrorState(McInputBase);\n\n\n@Directive({\n    selector: `input[mcInput]`,\n    exportAs: 'mcInput',\n    host: {\n        'class': 'mc-input',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '(blur)': '_focusChanged(false)',\n        '(focus)': '_focusChanged(true)',\n        '(input)': '_onInput()'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McInput }]\n})\nexport class McInput extends _McInputMixinBase implements McFormFieldControl<any>, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-input';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this._uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    // tslint:disable no-reserved-keywords\n    /** Input type of the element. */\n    @Input()\n    get type(): string {\n        return this._type;\n    }\n\n    set type(value: string) {\n        this._type = value || 'text';\n        this._validateType();\n\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    // tslint:enable no-reserved-keywords\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this._inputValueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n\n    protected _uid = `mc-input-${nextUniqueId++}`;\n    protected _previousNativeValue: any;\n    protected _disabled = false;\n    protected _id: string;\n    protected _required = false;\n    protected _type = 'text';\n    protected _neverEmptyInputTypes = [\n        'date',\n        'datetime',\n        'datetime-local',\n        'month',\n        'time',\n        'week'\n    ].filter((t) => getSupportedInputTypes().has(t));\n\n    private _inputValueAccessor: { value: any };\n\n    constructor(protected _elementRef: ElementRef,\n                protected _platform: Platform,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() _parentForm: NgForm,\n                @Optional() _parentFormGroup: FormGroupDirective,\n                _defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_INPUT_VALUE_ACCESSOR) inputValueAccessor: any) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n        this._previousNativeValue = this.value;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n    }\n\n    /** Focuses the input. */\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Does some manual dirty checking on the native input `value` property. */\n    protected _dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Make sure the input is a supported type. */\n    protected _validateType() {\n        if (MC_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n            throw getMcInputUnsupportedTypeError(this._type);\n        }\n    }\n\n    /** Checks whether the input type is one of the types that are never empty. */\n    protected _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n\n    /** Checks whether the input is invalid based on the native validation. */\n    protected _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        const validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n\n        return validity && validity.badInput;\n    }\n}\n\n@Directive({\n    selector: 'input[mcInputMonospace]',\n    exportAs: 'McInputMonospace',\n    host: { class: 'mc-input_monospace' }\n})\nexport class McInputMono {\n}\n","import { InjectionToken } from '@angular/core';\n\n\nexport const MC_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{ value: any }>('MC_INPUT_VALUE_ACCESSOR');\n","export function getMcInputUnsupportedTypeError(inputType: string): Error {\n    return Error(`Input type \"${inputType}\" isn't supported by mcInput.`);\n}\n"],"names":["tslib_1.__decorate","tslib_1.__metadata","tslib_1.__param"],"mappings":";;;;;;;;;;;;;;;;;AIAA,SAAgB,8BAA8B,CAAC,SAAiB,EAAhE;IACI,OAAO,KAAK,CAAC,CAAjB,YAAA,EAAgC,SAAS,CAAzC,6BAAA,CAAwE,CAAC,CAAC;CACzE;;ADCD,MAAa,uBAAuB,GAChC,IAAI,cAAc,CAAiB,yBAAyB,CAAC;;;ADJjE,AAgBA,MAAM,sBAAsB,GAAG;IAC3B,QAAQ;IACR,UAAU;IACV,MAAM;IACN,QAAQ;IACR,OAAO;IACP,OAAO;IACP,OAAO;IACP,OAAO;IACP,QAAQ;CACX,CAAC;AAEF,IAAI,YAAY,GAAG,CAAC,CAAC;AAErB,AAAA,MAAa,WAAW,CAAxB;IACI,WAAJ,CAAuB,yBAA4C,EAC5C,WAAmB,EACnB,gBAAoC,EACpC,SAAoB,EAH3C;QAAuB,IAAvB,CAAA,yBAAgD,GAAzB,yBAAyB,CAAmB;QAC5C,IAAvB,CAAA,WAAkC,GAAX,WAAW,CAAQ;QACnB,IAAvB,CAAA,gBAAuC,GAAhB,gBAAgB,CAAoB;QACpC,IAAvB,CAAA,SAAgC,GAAT,SAAS,CAAW;KACtC;CACJ;AAED,AAAA,MAAa,iBAAiB,GAAG,eAAe,CAAC,WAAW,CAAC,CAAC;AAoB9D,AAAA,IAAa,OAAO,GAApB,SAAA,GAAA,MAAa,OAAQ,SAAQ,iBAAiB,CAA9C;IAqII,WAAJ,CAA0B,WAAuB,EACvB,SAAmB,EACF,SAAoB,EACnC,WAAmB,EACnB,gBAAoC,EAChD,yBAA4C,EACS,kBAAuB,EAN5F;QAOQ,KAAK,CAAC,yBAAyB,EAAE,WAAW,EAAE,gBAAgB,EAAE,SAAS,CAAC,CAAC;QAPzD,IAA1B,CAAA,WAAqC,GAAX,WAAW,CAAY;QACvB,IAA1B,CAAA,SAAmC,GAAT,SAAS,CAAU;QACF,IAA3C,CAAA,SAAoD,GAAT,SAAS,CAAW;;;;;QA7H3D,IAAJ,CAAA,OAAW,GAAY,KAAK,CAAC;;;;;QAMhB,IAAb,CAAA,YAAyB,GAAkB,IAAI,OAAO,EAAQ,CAAC;;;;;QAM3D,IAAJ,CAAA,WAAe,GAAW,UAAU,CAAC;QA8FvB,IAAd,CAAA,IAAkB,GAAG,CAArB,SAAA,EAAiC,YAAY,EAAE,CAA/C,CAAiD,CAAC;QAEpC,IAAd,CAAA,SAAuB,GAAG,KAAK,CAAC;QAElB,IAAd,CAAA,SAAuB,GAAG,KAAK,CAAC;QAClB,IAAd,CAAA,KAAmB,GAAG,MAAM,CAAC;QACf,IAAd,CAAA,qBAAmC,GAAG;YAC9B,MAAM;YACN,UAAU;YACV,gBAAgB;YAChB,OAAO;YACP,MAAM;YACN,MAAM;SACT,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,sBAAsB,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;;;QAc7C,IAAI,CAAC,mBAAmB,GAAG,kBAAkB,IAAI,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC;QAEhF,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,KAAK,CAAC;;QAGvC,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;KACrB;;;;;IAxHD,IAAI,QAAQ,GAAhB;QACQ,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,QAAQ,KAAK,IAAI,EAAE;YACpD,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC;SAClC;QAED,OAAO,IAAI,CAAC,SAAS,CAAC;KACzB;IAED,IAAI,QAAQ,CAAC,KAAc,EAA/B;QACQ,IAAI,CAAC,SAAS,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC;;;QAI9C,IAAI,IAAI,CAAC,OAAO,EAAE;YACd,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;YACrB,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;SAC5B;KACJ;;;;;IAOD,IAAI,EAAE,GAAV;QACQ,OAAO,IAAI,CAAC,GAAG,CAAC;KACnB;IAED,IAAI,EAAE,CAAC,KAAa,EAAxB;QACQ,IAAI,CAAC,GAAG,GAAG,KAAK,IAAI,IAAI,CAAC,IAAI,CAAC;KACjC;;;;;IAaD,IAAI,QAAQ,GAAhB;QACQ,OAAO,IAAI,CAAC,SAAS,CAAC;KACzB;IAED,IAAI,QAAQ,CAAC,KAAc,EAA/B;QACQ,IAAI,CAAC,SAAS,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC;KACjD;;;IAKD,IAAI,IAAI,GAAZ;QACQ,OAAO,IAAI,CAAC,KAAK,CAAC;KACrB;IAED,IAAI,IAAI,CAAC,KAAa,EAA1B;QACQ,IAAI,CAAC,KAAK,GAAG,KAAK,IAAI,MAAM,CAAC;QAC7B,IAAI,CAAC,aAAa,EAAE,CAAC;;;;QAKrB,IAAI,sBAAsB,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;YAC1C,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;SACpD;KACJ;;;;;;IAQD,IAAI,KAAK,GAAb;QACQ,OAAO,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC;KACzC;IAED,IAAI,KAAK,CAAC,KAAa,EAA3B;QACQ,IAAI,KAAK,KAAK,IAAI,CAAC,KAAK,EAAE;YACtB,IAAI,CAAC,mBAAmB,CAAC,KAAK,GAAG,KAAK,CAAC;YACvC,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;SAC5B;KACJ;IAqCD,WAAW,GAAf;QACQ,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;KAC5B;IAED,WAAW,GAAf;QACQ,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;KAChC;IAED,SAAS,GAAb;QACQ,IAAI,IAAI,CAAC,SAAS,EAAE;;;;YAIhB,IAAI,CAAC,gBAAgB,EAAE,CAAC;SAC3B;;;;QAKD,IAAI,CAAC,sBAAsB,EAAE,CAAC;KACjC;;IAGD,KAAK,GAAT;QACQ,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,KAAK,EAAE,CAAC;KAC1C;;IAGD,aAAa,CAAC,SAAkB,EAApC;QACQ,IAAI,SAAS,KAAK,IAAI,CAAC,OAAO,EAAE;YAC5B,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;YACzB,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;SAC5B;KACJ;IAED,QAAQ,GAAZ;;;;;;;;KAQK;;;;;IAMD,IAAI,KAAK,GAAb;QACQ,OAAO,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;KAChG;;;;;IAMD,gBAAgB,GAApB;QACQ,IAAI,CAAC,KAAK,EAAE,CAAC;KAChB;;IAGS,sBAAsB,GAApC;QACQ,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC;QAE5B,IAAI,IAAI,CAAC,oBAAoB,KAAK,QAAQ,EAAE;YACxC,IAAI,CAAC,oBAAoB,GAAG,QAAQ,CAAC;YACrC,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;SAC5B;KACJ;;IAGS,aAAa,GAA3B;QACQ,IAAI,sBAAsB,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE;YACjD,MAAM,8BAA8B,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACpD;KACJ;;IAGS,aAAa,GAA3B;QACQ,OAAO,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;KAC9D;;IAGS,WAAW,GAAzB;;QAEQ,MAAM,QAAQ,GAAI,IAAI,CAAC,WAAW,CAAC,aAAkC,CAAC,QAAQ,CAAC;QAE/E,OAAO,QAAQ,IAAI,QAAQ,CAAC,QAAQ,CAAC;KACxC;CACJ,CAAA;AA7OYA,UAAb,CAAA;IAAK,KAAK,EAAE;IAAZC,UAAA,CAAA,aAAA,EAAgC,iBAAiB,CAAjD;CAAA,EAAA,OAAA,CAAA,SAAA,EAAA,mBAAA,EAAA,KAAA,CAAA,CAAkD,CAAlD;AAyBID,UAAJ,CAAA;IADK,KAAK,EAAE;;;CAOZ,EAAA,OAAA,CAAA,SAAA,EAAA,UAAA,EAAA,IAAA,CAAK,CAAL;AAkBIA,UAAJ,CAAA;IADK,KAAK,EAAE;;;CAGZ,EAAA,OAAA,CAAA,SAAA,EAAA,IAAA,EAAA,IAAA,CAAK,CAAL;AAUaA,UAAb,CAAA;IAAK,KAAK,EAAE;;CAAZ,EAAA,OAAA,CAAA,SAAA,EAAA,aAAA,EAAA,KAAA,CAAA,CAAiC,CAAjC;AAOIA,UAAJ,CAAA;IADK,KAAK,EAAE;;;CAGZ,EAAA,OAAA,CAAA,SAAA,EAAA,UAAA,EAAA,IAAA,CAAK,CAAL;AASIA,UAAJ,CAAA;IADK,KAAK,EAAE;;;CAGZ,EAAA,OAAA,CAAA,SAAA,EAAA,MAAA,EAAA,IAAA,CAAK,CAAL;AAoBIA,UAAJ,CAAA;IADK,KAAK,EAAE;;;CAGZ,EAAA,OAAA,CAAA,SAAA,EAAA,OAAA,EAAA,IAAA,CAAK,CAAL;AA3Ga,OAAO,GAApB,SAAA,GAAAA,UAAA,CAAA;IAjBC,SAAS,CAAC;QACP,QAAQ,EAAE,CAAd,cAAA,CAA8B;QAC1B,QAAQ,EAAE,SAAS;QACnB,IAAI,EAAE;YACF,OAAO,EAAE,UAAU;;;YAGnB,WAAW,EAAE,IAAI;YACjB,oBAAoB,EAAE,aAAa;YACnC,YAAY,EAAE,UAAU;YACxB,YAAY,EAAE,UAAU;YACxB,QAAQ,EAAE,sBAAsB;YAChC,SAAS,EAAE,qBAAqB;YAChC,SAAS,EAAE,YAAY;SAC1B;QACD,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,kBAAkB,EAAE,WAAW,EAAE,SAAO,EAAE,CAAC;KACrE,CAAC;IAwIeE,OAAjB,CAAA,CAAA,EAAiB,QAAQ,EAAE,CAAA,EAAEA,OAA7B,CAAA,CAAA,EAA6B,IAAI,EAAE,CAAA;IAClBA,OAAjB,CAAA,CAAA,EAAiB,QAAQ,EAAE,CAAA;IACVA,OAAjB,CAAA,CAAA,EAAiB,QAAQ,EAAE,CAAA;IAEVA,OAAjB,CAAA,CAAA,EAAiB,QAAQ,EAAE,CAAA,EAAEA,OAA7B,CAAA,CAAA,EAA6B,IAAI,EAAE,CAAA,EAAEA,OAArC,CAAA,CAAA,EAAqC,MAAM,CAAC,uBAAuB,CAAC,CAAA;IANpED,UAAA,CAAA,mBAAA,EAAA,CAAuC,UAAU;QACZ,QAAQ;QACS,SAAS;QACtB,MAAM;QACD,kBAAkB;QACrB,iBAAiB,EAA5D,MAAA,CAAA,CAAA;CA1IA,EAAa,OAAO,CAiPnB,CAjPD;AAAA,AAwPA,IAAa,WAAW,GAAxB,MAAa,WAAW,CAAxB;CACC,CAAA;AADY,WAAW,GAAxBD,UAAA,CAAA;IALC,SAAS,CAAC;QACP,QAAQ,EAAE,yBAAyB;QACnC,QAAQ,EAAE,kBAAkB;QAC5B,IAAI,EAAE,EAAE,KAAK,EAAE,oBAAoB,EAAE;KACxC,CAAC;CACF,EAAa,WAAW,CACvB,CADD;;ADpSA,IAAa,aAAa,GAA1B,MAAa,aAAa,CAA1B;CACC,CAAA;AADY,aAAa,GAA1BA,UAAA,CAAA;IALC,QAAQ,CAAC;QACN,OAAO,EAAE,CAAC,YAAY,EAAE,UAAU,EAAE,cAAc,EAAE,WAAW,CAAC;QAChE,OAAO,EAAE,CAAC,OAAO,EAAE,WAAW,CAAC;QAC/B,YAAY,EAAE,CAAC,OAAO,EAAE,WAAW,CAAC;KACvC,CAAC;CACF,EAAa,aAAa,CACzB,CADD;;ADdA;;GAEG;;;;"}