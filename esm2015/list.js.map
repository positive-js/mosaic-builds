{"version":3,"file":"list.js","sources":["../../../src/lib/list/list.module.ts","../../../src/lib/list/list.component.ts","../../../src/lib/list/list-selection.component.ts"],"sourcesContent":["import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McLineModule, McPseudoCheckboxModule } from '@ptsecurity/mosaic/core';\n\nimport { McListSelection, McListOption } from './list-selection.component';\nimport { McList, McListItem, McListSubheaderCssStyler} from './list.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule,\n        A11yModule,\n        McPseudoCheckboxModule,\n        McLineModule\n    ],\n    exports: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ],\n    declarations: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ]\n})\nexport class McListModule {}\n","// todo пока не делаем, перенесено из материала, но у нас в доках таких простых списков нет.\nimport {\n    AfterContentInit, ChangeDetectionStrategy, Component, ContentChildren, Directive, ElementRef, QueryList,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { McLine, McLineSetter } from '@ptsecurity/mosaic/core';\n\n\nexport class McListBase {}\n\n@Component({\n    selector: 'mc-list',\n    host: { class: 'mc-list' },\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McList extends McListBase {}\n\n\n/**\n * Directive whose purpose is to add the mc- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n    selector: '[mc-subheader], [mcSubheader]',\n    host: { class: 'mc-subheader' }\n})\nexport class McListSubheaderCssStyler {}\n\n\n// Boilerplate for applying mixins to McListItem.\nexport class McListItemBase {}\n\n// An item within a Material Design list.\n@Component({\n    selector: 'mc-list-item, a[mc-list-item]',\n    host: {\n        class: 'mc-list-item',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()'\n    },\n    templateUrl: './list-item.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListItem extends McListItemBase implements AfterContentInit {\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    private _lineSetter: McLineSetter;\n\n    constructor(private _element: ElementRef) {\n        super();\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    _handleFocus() {\n        this._element.nativeElement.classList.add('mc-focused');\n    }\n\n    _handleBlur() {\n        this._element.nativeElement.classList.remove('mc-focused');\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy, ChangeDetectorRef,\n    Component, ContentChildren,\n    ElementRef, EventEmitter, forwardRef, Inject, Input,\n    OnDestroy, OnInit, Optional, Output, QueryList, ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { FocusKeyManager, IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { END, ENTER, HOME, SPACE } from '@ptsecurity/cdk/keycodes';\n\nimport { CanDisable, mixinDisabled, HasTabIndex,\n    mixinTabIndex, McLine, McLineSetter, toBoolean } from '@ptsecurity/mosaic/core';\n\n\nexport class McListOptionBase {}\n\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McListSelection),\n    multi: true\n};\n\n/**\n * Change event object emitted by McListOption whenever the selected state changes.\n * @deprecated Use the `McListSelectionChange` event on the selection list instead.\n * @deletion-target 6.0.0\n */\nexport class McListOptionChange {\n    constructor(\n        // Reference to the list option that changed.\n        public source: McListOption,\n        // The new selected state of the option.\n        public selected: boolean\n    ) {}\n}\n\n// Change event that is being fired whenever the selected state of an option changes. */\nexport class McListSelectionChange {\n    constructor(\n        // Reference to the selection list that emitted the event.\n        public source: McListSelection,\n        // Reference to the option that has been changed.\n        public option: McListOption\n    ) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n    selector: 'mc-list-option',\n    host: {\n        role: 'option',\n        tabindex: '-1',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()',\n        '(click)': '_handleClick()',\n\n        class: 'mc-list-option',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-selected]': '_selected',\n        '[class.mc-focused]': '_hasFocus',\n        '[attr.disabled]': 'disabled'\n    },\n    templateUrl: 'list-option.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListOption extends McListOptionBase\n    implements AfterContentInit, OnDestroy, OnInit, IFocusableOption {\n\n    // Whether the option has focus.\n    _hasFocus: boolean = false;\n\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    // DOM element containing the item's text.\n    @ViewChild('text') _text: ElementRef;\n\n    // Whether the label should appear before or after the checkbox. Defaults to 'after'\n    @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n    // Value of the option\n    @Input() value: any;\n\n    // Whether the option is disabled.\n    @Input()\n    get disabled() {\n        return this._disabled || (this.selectionList && this.selectionList.disabled);\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    // Whether the option is selected.\n    @Input()\n    get selected(): boolean {\n        return this.selectionList.selectedOptions.isSelected(this);\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this._setSelected(isSelected);\n            this.selectionList._reportValueChange();\n        }\n    }\n\n    /**\n     * Emits a change event whenever the selected state of an option changes.\n     * @deprecated Use the `selectionChange` event on the `<mc-selection-list>` instead.\n     * @deletion-target 6.0.0\n     */\n    @Output() readonly selectionChange: EventEmitter<McListOptionChange> =\n        new EventEmitter<McListOptionChange>();\n\n    _selected: boolean = false;\n\n    private _lineSetter: McLineSetter;\n    private _disabled: boolean = false;\n\n    constructor(\n        private _element: ElementRef,\n        private _changeDetector: ChangeDetectorRef,\n        @Optional() @Inject(forwardRef(() => McListSelection))\n        public selectionList: McListSelection\n    ) {\n        super();\n    }\n\n    ngOnInit() {\n        if (this._selected) {\n            // List options that are selected at initialization can't be reported properly to the form\n            // control. This is because it takes some time until the selection-list knows about all\n            // available options. Also it can happen that the ControlValueAccessor has an initial value\n            // that should be used instead. Deferring the value change report to the next tick ensures\n            // that the form control value is not being overwritten.\n            Promise.resolve().then(() => this.selected = true);\n        }\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    ngOnDestroy(): void {\n        if (this.selected) {\n            // We have to delay this until the next tick in order\n            // to avoid changed after checked errors.\n            Promise.resolve().then(() => this.selected = false);\n        }\n\n        this.selectionList._removeOptionFromList(this);\n    }\n\n    // Toggles the selection state of the option.\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    // Allows for programmatic focusing of the option.\n    focus(): void {\n        this._element.nativeElement.focus();\n    }\n\n    /**\n     * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n     * @docs-private\n     */\n    getLabel() {\n        return this._text ? this._text.nativeElement.textContent : '';\n    }\n\n    _handleClick() {\n        if (!this.disabled) {\n            this.toggle();\n\n            // Emit a change event if the selected state of the option changed through user interaction.\n            this.selectionList._emitChangeEvent(this);\n\n            // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n            this._emitDeprecatedChangeEvent();\n        }\n    }\n\n    _handleFocus() {\n        if (this.disabled) { return; }\n\n        this._hasFocus = true;\n        this.selectionList._setFocusedOption(this);\n    }\n\n    _handleBlur() {\n        this._hasFocus = false;\n        this.selectionList._onTouched();\n    }\n\n    // Retrieves the DOM element of the component host.\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n\n    // Sets the selected state of the option.\n    _setSelected(selected: boolean) {\n        if (selected === this._selected) {\n            return;\n        }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.selectionList.selectedOptions.select(this);\n        } else {\n            this.selectionList.selectedOptions.deselect(this);\n        }\n\n        this._changeDetector.markForCheck();\n    }\n\n    // Emits a selectionChange event for this option.\n    _emitDeprecatedChangeEvent() {\n        // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n        this.selectionChange.emit(new McListOptionChange(this, this.selected));\n    }\n}\n\n\nexport class McListSelectionBase {}\n\nexport const _McListSelectionMixinBase = mixinTabIndex(mixinDisabled(McListSelectionBase));\n\n@Component({\n    selector: 'mc-list-selection',\n    template: '<ng-content></ng-content>',\n    styleUrls: ['list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'tabIndex'],\n    host: {\n        class: 'mc-list-selection',\n        '[tabIndex]': 'tabIndex',\n        '(focus)': 'focus()',\n        '(blur)': '_onTouched()',\n        '(keydown)': '_keydown($event)'\n    },\n    providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n    preserveWhitespaces: false\n})\nexport class McListSelection extends _McListSelectionMixinBase implements\n    IFocusableOption, CanDisable, HasTabIndex, AfterContentInit, ControlValueAccessor {\n\n    // The FocusKeyManager which handles focus.\n    _keyManager: FocusKeyManager<McListOption>;\n\n    // The option components contained within this selection-list.\n    @ContentChildren(McListOption) options: QueryList<McListOption>;\n\n    // Emits a change event whenever the selected state of an option changes.\n    @Output() readonly selectionChange: EventEmitter<McListSelectionChange> =\n        new EventEmitter<McListSelectionChange>();\n\n    // The currently selected options.\n    selectedOptions: SelectionModel<McListOption> = new SelectionModel<McListOption>(true);\n\n    // Used for storing the values that were assigned before the options were initialized.\n    private _tempValues: string[]|null;\n\n    constructor(private _element: ElementRef, @Attribute('tabindex') tabIndex: string) {\n        super();\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n\n    ngAfterContentInit(): void {\n        this._keyManager = new FocusKeyManager<McListOption>(this.options).withWrap().withTypeAhead();\n\n        if (this._tempValues) {\n            this._setOptionsFromValues(this._tempValues);\n            this._tempValues = null;\n        }\n    }\n\n    // Focus the selection-list.\n    focus() {\n        this._element.nativeElement.focus();\n    }\n\n    // Selects all of the options.\n    selectAll() {\n        this.options.forEach((option) => option._setSelected(true));\n        this._reportValueChange();\n    }\n\n    // Deselects all of the options.\n    deselectAll() {\n        this.options.forEach((option) => option._setSelected(false));\n        this._reportValueChange();\n    }\n\n    // View to model callback that should be called if the list or its options lost focus.\n    _onTouched: () => void = () => {};\n\n    // Sets the focused option of the selection-list.\n    _setFocusedOption(option: McListOption) {\n        this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n    }\n\n    // Removes an option from the selection list and updates the active item.\n    _removeOptionFromList(option: McListOption) {\n        if (option._hasFocus) {\n            const optionIndex = this._getOptionIndex(option);\n\n            // Check whether the option is the last item\n            if (optionIndex > 0) {\n                this._keyManager.setPreviousItemActive();\n            } else if (optionIndex === 0 && this.options.length > 1) {\n                this._keyManager.setNextItemActive();\n            }\n        }\n    }\n\n    // Passes relevant key presses to our key manager.\n    _keydown(event: KeyboardEvent) {\n        switch (event.keyCode) {\n            case SPACE:\n            case ENTER:\n                this._toggleSelectOnFocusedOption();\n                // Always prevent space from scrolling the page since the list has focus\n                event.preventDefault();\n                break;\n            case HOME:\n            case END:\n                event.keyCode === HOME ? this._keyManager.setFirstItemActive() : this._keyManager.setLastItemActive();\n                event.preventDefault();\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    // Reports a value change to the ControlValueAccessor\n    _reportValueChange() {\n        if (this.options) {\n            this._onChange(this._getSelectedOptionValues());\n        }\n    }\n\n    // Emits a change event if the selected state of an option changed.\n    _emitChangeEvent(option: McListOption) {\n        this.selectionChange.emit(new McListSelectionChange(this, option));\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(values: string[]): void {\n        if (this.options) {\n            this._setOptionsFromValues(values || []);\n        } else {\n            this._tempValues = values;\n        }\n    }\n\n    // Implemented as a part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        if (this.options) {\n            this.options.forEach((option) => option.disabled = isDisabled);\n        }\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this._onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this._onTouched = fn;\n    }\n\n    // Returns the option with the specified value.\n    private _getOptionByValue(value: string): McListOption | undefined {\n        return this.options.find((option) => option.value === value);\n    }\n\n    // Sets the selected options based on the specified values.\n    private _setOptionsFromValues(values: string[]) {\n        this.options.forEach((option) => option._setSelected(false));\n\n        values\n            .map((value) => this._getOptionByValue(value))\n            .filter(Boolean)\n            .forEach((option) => option!._setSelected(true));\n    }\n\n    // Returns the values of the selected options.\n    private _getSelectedOptionValues(): string[] {\n        return this.options.filter((option) => option.selected).map((option) => option.value);\n    }\n\n    // Toggles the selected state of the currently focused option.\n    private _toggleSelectOnFocusedOption(): void {\n        const focusedIndex = this._keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n            const focusedOption: McListOption = this.options.toArray()[focusedIndex];\n\n            if (focusedOption) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user\n                // interaction.\n                this._emitChangeEvent(focusedOption);\n\n                // TODO: the `selectionChange` event on the option is deprecated. Remove that in the future.\n                focusedOption._emitDeprecatedChangeEvent();\n            }\n        }\n    }\n\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private _isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    // Returns the index of the specified list option.\n    private _getOptionIndex(option: McListOption): number {\n        return this.options.toArray().indexOf(option);\n    }\n\n    // View to model callback that should be called whenever the selected options change.\n    private _onChange: (value: any) => void = (_: any) => {};\n\n}\n"],"names":[],"mappings":"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"}