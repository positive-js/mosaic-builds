import { Directionality } from '@angular/cdk/bidi';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { Overlay, ScrollDispatcher } from '@angular/cdk/overlay';
import { ComponentPortal } from '@angular/cdk/portal';
import { Directive, ElementRef, NgZone, ViewContainerRef } from '@angular/core';
import { ESCAPE } from '@ptsecurity/cdk/keycodes';
import { Subject } from 'rxjs';
import { delay as rxDelay, distinctUntilChanged, takeUntil } from 'rxjs/operators';
import { EXTENDED_OVERLAY_POSITIONS, POSITION_MAP, POSITION_PRIORITY_STRATEGY, POSITION_TO_CSS_MAP } from '../overlay/overlay-position-map';
import { PopUpPlacements, PopUpTriggers } from './constants';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/overlay";
import * as i2 from "@angular/cdk/bidi";
// tslint:disable-next-line:naming-convention
export class McPopUpTrigger {
    constructor(overlay, elementRef, ngZone, scrollDispatcher, hostView, scrollStrategy, direction) {
        this.overlay = overlay;
        this.elementRef = elementRef;
        this.ngZone = ngZone;
        this.scrollDispatcher = scrollDispatcher;
        this.hostView = hostView;
        this.scrollStrategy = scrollStrategy;
        this.direction = direction;
        this.isOpen = false;
        this.enterDelay = 0;
        this.leaveDelay = 0;
        this.placement = PopUpPlacements.Top;
        this.placementPriority = null;
        this.visible = false;
        // tslint:disable-next-line:naming-convention orthodox-getter-and-setter
        this._disabled = false;
        this.listeners = new Map();
        this.destroyed = new Subject();
        this.detach = () => {
            if (this.overlayRef && this.overlayRef.hasAttached()) {
                this.overlayRef.detach();
            }
            this.instance = null;
        };
        this.onPositionChange = ($event) => {
            if (!this.instance) {
                return;
            }
            let newPlacement = this.placement;
            const { originX, originY, overlayX, overlayY } = $event.connectionPair;
            Object.keys(this.availablePositions).some((key) => {
                if (originX === this.availablePositions[key].originX && originY === this.availablePositions[key].originY &&
                    overlayX === this.availablePositions[key].overlayX && overlayY === this.availablePositions[key].overlayY) {
                    newPlacement = key;
                    return true;
                }
                return false;
            });
            this.placementChange.emit(newPlacement);
            this.updateClassMap(newPlacement);
            this.instance.detectChanges();
        };
        this.addEventListener = (listener, event) => {
            this.elementRef.nativeElement.addEventListener(event, listener);
        };
        this.removeEventListener = (listener, event) => {
            this.elementRef.nativeElement.removeEventListener(event, listener);
        };
        this.availablePositions = POSITION_MAP;
    }
    ngOnInit() {
        this.initListeners();
    }
    ngOnDestroy() {
        if (this.overlayRef) {
            this.overlayRef.dispose();
        }
        this.listeners.forEach(this.removeEventListener);
        this.listeners.clear();
        this.destroyed.next();
        this.destroyed.complete();
    }
    updatePlacement(value) {
        if (POSITION_TO_CSS_MAP[value]) {
            this.placement = value;
            this.updateClassMap();
        }
        else {
            this.placement = PopUpPlacements.Top;
            console.warn(`Unknown position: ${value}. Will used default position: ${this.placement}`);
        }
        if (this.visible) {
            this.updatePosition();
        }
    }
    updatePlacementPriority(value) {
        if (value && value.length > 0) {
            this.placementPriority = value;
        }
        else {
            this.placementPriority = null;
        }
    }
    updateVisible(externalValue) {
        const value = coerceBooleanProperty(externalValue);
        if (this.visible !== value) {
            this.visible = value;
            if (value) {
                this.show();
            }
            else {
                this.hide();
            }
        }
    }
    handleKeydown(event) {
        if (this.isOpen && event.keyCode === ESCAPE) { // tslint:disable-line
            this.hide();
        }
    }
    handleTouchend() {
        this.hide();
    }
    show(delay = this.enterDelay) {
        if (this.disabled || this.instance) {
            return;
        }
        this.overlayRef = this.createOverlay();
        this.detach();
        this.portal = this.portal || new ComponentPortal(this.getOverlayHandleComponentType(), this.hostView);
        this.instance = this.overlayRef.attach(this.portal).instance;
        this.instance.afterHidden()
            .pipe(takeUntil(this.destroyed))
            .subscribe(this.detach);
        this.updateClassMap();
        this.updateData();
        this.instance.visibleChange
            .pipe(takeUntil(this.destroyed), distinctUntilChanged())
            .subscribe((value) => {
            this.visible = value;
            this.visibleChange.emit(value);
            this.isOpen = value;
        });
        this.updatePosition();
        this.instance.show(delay);
    }
    hide(delay = this.leaveDelay) {
        if (this.instance) {
            this.instance.hide(delay);
        }
    }
    /** Create the overlay config and position strategy */
    createOverlay() {
        if (this.overlayRef) {
            return this.overlayRef;
        }
        // Create connected position strategy that listens for scroll events to reposition.
        const strategy = this.overlay
            .position()
            .flexibleConnectedTo(this.elementRef)
            .withTransformOriginOn(this.originSelector)
            .withFlexibleDimensions(false)
            .withPositions([...EXTENDED_OVERLAY_POSITIONS])
            .withScrollableContainers(this.scrollDispatcher.getAncestorScrollContainers(this.elementRef));
        strategy.positionChanges
            .pipe(takeUntil(this.destroyed))
            .subscribe(this.onPositionChange);
        this.overlayRef = this.overlay.create({
            ...this.overlayConfig,
            direction: this.direction,
            positionStrategy: strategy,
            scrollStrategy: this.scrollStrategy()
        });
        this.closingActions()
            .pipe(takeUntil(this.destroyed))
            .pipe(rxDelay(0))
            .subscribe(() => this.hide());
        this.overlayRef.outsidePointerEvents()
            .subscribe(() => this.instance.handleBodyInteraction());
        this.overlayRef.detachments()
            .pipe(takeUntil(this.destroyed))
            .subscribe(this.detach);
        return this.overlayRef;
    }
    initListeners() {
        this.clearListeners();
        if (this.trigger.includes(PopUpTriggers.Click)) {
            this.listeners
                .set('click', () => this.show())
                .forEach(this.addEventListener);
        }
        if (this.trigger.includes(PopUpTriggers.Hover)) {
            this.listeners
                .set('mouseenter', () => this.show())
                .set('mouseleave', () => this.hide())
                .forEach(this.addEventListener);
        }
        if (this.trigger.includes(PopUpTriggers.Focus)) {
            this.listeners
                .set('focus', () => this.show())
                .set('blur', () => this.hide())
                .forEach(this.addEventListener);
        }
    }
    /** Updates the position of the current popover. */
    updatePosition(reapplyPosition = false) {
        this.overlayRef = this.createOverlay();
        const position = this.overlayRef.getConfig().positionStrategy
            .withPositions(this.getPrioritizedPositions())
            .withPush(true);
        if (reapplyPosition) {
            setTimeout(() => position.reapplyLastPosition());
        }
    }
    getPriorityPlacementStrategy(value) {
        const result = [];
        const possiblePositions = Object.keys(this.availablePositions);
        if (Array.isArray(value)) {
            value.forEach((position) => {
                if (possiblePositions.includes(position)) {
                    result.push(this.availablePositions[position]);
                }
            });
        }
        else if (possiblePositions.includes(value)) {
            result.push(this.availablePositions[value]);
        }
        return result;
    }
    getPrioritizedPositions() {
        if (this.placementPriority) {
            return this.getPriorityPlacementStrategy(this.placementPriority);
        }
        return POSITION_PRIORITY_STRATEGY[this.placement];
    }
    clearListeners() {
        this.listeners.forEach(this.removeEventListener);
        this.listeners.clear();
    }
}
/** @nocollapse */ /** @nocollapse */ McPopUpTrigger.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.0", ngImport: i0, type: McPopUpTrigger, deps: "invalid", target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ /** @nocollapse */ McPopUpTrigger.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.2.0", type: McPopUpTrigger, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.0", ngImport: i0, type: McPopUpTrigger, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i1.Overlay }, { type: i0.ElementRef }, { type: i0.NgZone }, { type: i1.ScrollDispatcher }, { type: i0.ViewContainerRef }, { type: undefined }, { type: i2.Directionality }]; } });
//# sourceMappingURL=data:application/json;base64,