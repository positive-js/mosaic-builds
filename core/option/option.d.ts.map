{"version":3,"file":"option.d.ts","sources":["option.d.ts"],"names":[],"mappingssourcesContent":["import { AfterViewChecked, ChangeDetectorRef, ElementRef, EventEmitter, InjectionToken, OnDestroy, QueryList } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { McOptgroup } from './optgroup';\n/** Event object emitted by McOption when selected or deselected. */\nexport declare class McOptionSelectionChange {\n    source: McOption;\n    isUserInput: boolean;\n    constructor(source: McOption, isUserInput?: boolean);\n}\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface McOptionParentComponent {\n    multiple?: boolean;\n}\n/**\n * Injection token used to provide the parent component to options.\n */\nexport declare const MC_OPTION_PARENT_COMPONENT: InjectionToken<McOptionParentComponent>;\n/**\n * Single option inside of a `<mc-select>` element.\n */\nexport declare class McOption implements AfterViewChecked, OnDestroy {\n    private readonly element;\n    private readonly changeDetectorRef;\n    private readonly parent;\n    readonly group: McOptgroup;\n    /** The form value of the option. */\n    value: any;\n    get showCheckbox(): boolean | undefined;\n    set showCheckbox(value: boolean | undefined);\n    private _showCheckbox;\n    /** Event emitted when the option is selected or deselected. */\n    readonly onSelectionChange: EventEmitter<McOptionSelectionChange>;\n    /** Emits when the state of the option changes and any parents have to be notified. */\n    readonly stateChanges: Subject<void>;\n    /**\n     * The displayed value of the option. It is necessary to show the selected option in the\n     * select's trigger.\n     */\n    get viewValue(): string;\n    /** Whether the wrapping component is in multiple selection mode. */\n    get multiple(): boolean | undefined;\n    get id(): string;\n    private _id;\n    get selected(): boolean;\n    private _selected;\n    get disabled(): any;\n    set disabled(value: any);\n    private _disabled;\n    /**\n     * Whether or not the option is currently active and ready to be selected.\n     * An active option displays styles as if it is focused, but the\n     * focus is actually retained somewhere else. This comes in handy\n     * for components like autocomplete where focus must remain on the input.\n     */\n    get active(): boolean;\n    private _active;\n    private mostRecentViewValue;\n    constructor(element: ElementRef, changeDetectorRef: ChangeDetectorRef, parent: McOptionParentComponent, group: McOptgroup);\n    ngAfterViewChecked(): void;\n    ngOnDestroy(): void;\n    getHeight(): number;\n    select(): void;\n    deselect(): void;\n    focus(): void;\n    /**\n     * This method sets display styles on the option to make it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setActiveStyles(): void;\n    /**\n     * This method removes display styles on the option that made it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setInactiveStyles(): void;\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel(): string;\n    /** Ensures the option is selected when activated from the keyboard. */\n    handleKeydown(event: KeyboardEvent): void;\n    /**\n     * `Selects the option while indicating the selection came from the user. Used to\n     * determine if the select's view -> model callback should be invoked.`\n     */\n    selectViaInteraction(): void;\n    getTabIndex(): string;\n    getHostElement(): HTMLElement;\n    /** Emits the selection change event. */\n    private emitSelectionChangeEvent;\n}\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport declare function countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<McOption>, optionGroups: QueryList<McOptgroup>): number;\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport declare function getOptionScrollPosition(optionIndex: number, optionHeight: number, currentScrollPosition: number, panelHeight: number): number;\n"]}