{"version":3,"file":"mosaic-autocomplete.umd.js","sources":["../../packages/mosaic/autocomplete/autocomplete.module.ts","../../packages/mosaic/autocomplete/autocomplete-trigger.directive.ts","../../packages/mosaic/autocomplete/autocomplete-origin.directive.ts","../../packages/mosaic/autocomplete/autocomplete.component.ts"],"sourcesContent":["import { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { McOptionModule, McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McAutocompleteOrigin } from './autocomplete-origin.directive';\nimport {\n    McAutocompleteTrigger,\n    MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './autocomplete-trigger.directive';\nimport { McAutocomplete } from './autocomplete.component';\n\n\n@NgModule({\n    imports: [McOptionModule, OverlayModule, McCommonModule, CommonModule],\n    exports: [\n        McAutocomplete,\n        McOptionModule,\n        McAutocompleteTrigger,\n        McAutocompleteOrigin,\n        McCommonModule\n    ],\n    declarations: [McAutocomplete, McAutocompleteTrigger, McAutocompleteOrigin],\n    providers: [MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class McAutocompleteModule {}\n","import { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    ConnectedPosition,\n    FlexibleConnectedPositionStrategy,\n    Overlay,\n    OverlayConfig,\n    OverlayRef,\n    PositionStrategy,\n    ScrollStrategy\n} from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { DOCUMENT } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    forwardRef,\n    Host,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    Optional,\n    ViewContainerRef\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW } from '@ptsecurity/cdk/keycodes';\nimport {\n    countGroupLabelsBeforeOption,\n    getOptionScrollPosition,\n    McOption,\n    McOptionSelectionChange\n} from '@ptsecurity/mosaic/core';\nimport { McFormField } from '@ptsecurity/mosaic/form-field';\nimport { Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable } from 'rxjs';\nimport { filter, take, switchMap, delay, tap, map } from 'rxjs/operators';\n\nimport { McAutocompleteOrigin } from './autocomplete-origin.directive';\nimport { McAutocomplete } from './autocomplete.component';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 32;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\nexport const AUTOCOMPLETE_BORDER_WIDTH: number = 2;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MC_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mc-autocomplete-scroll-strategy');\n\n// tslint:disable-next-line naming-convention\nexport function MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\nexport const MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McAutocompleteTrigger),\n    multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMcAutocompleteMissingPanelError(): Error {\n    return Error('Attempting to open an undefined instance of `mc-autocomplete`. ' +\n        'Make sure that the id passed to the `mcAutocomplete` is correct and that ' +\n        'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n    selector: `input[mcAutocomplete], textarea[mcAutocomplete]`,\n    host: {\n        class: 'mc-autocomplete-trigger',\n        '[attr.autocomplete]': 'autocompleteAttribute',\n        // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n        // a little earlier. This avoids issues where IE delays the focusing of the input.\n        '(focusin)': 'handleFocus()',\n        '(blur)': 'onTouched()',\n        '(input)': 'handleInput($event)',\n        '(keydown)': 'handleKeydown($event)',\n        '(click)': 'handleClick($event)'\n    },\n    exportAs: 'mcAutocompleteTrigger',\n    providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class McAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n    // @ts-ignore\n    readonly optionSelections: Observable<McOptionSelectionChange> = defer(() => {\n        if (this.autocomplete && this.autocomplete.options) {\n            return merge(...this.autocomplete.options.map((option) => option.onSelectionChange));\n        }\n\n        // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n        // Return a stream that we'll replace with the real one once everything is in place.\n        return this.zone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelections));\n    });\n\n    /** The currently active option, coerced to MatOption type. */\n    get activeOption(): McOption | null {\n        if (this.autocomplete && this.autocomplete.keyManager) {\n            return this.autocomplete.keyManager.activeItem;\n        }\n\n        return null;\n    }\n\n    get panelOpen(): boolean {\n        return this.overlayAttached && this.autocomplete.showPanel;\n    }\n\n    /** The autocomplete panel to be attached to this trigger. */\n    @Input('mcAutocomplete') autocomplete: McAutocomplete;\n\n    /**\n     * Reference relative to which to position the autocomplete panel.\n     * Defaults to the autocomplete trigger element.\n     */\n    @Input('mcAutocompleteConnectedTo') connectedTo: McAutocompleteOrigin;\n\n    /**\n     * `autocomplete` attribute to be set on the input element.\n     * @docs-private\n     */\n    @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     */\n    @Input('mcAutocompleteDisabled')\n    get autocompleteDisabled(): boolean {\n        return this._autocompleteDisabled;\n    }\n\n    set autocompleteDisabled(value: boolean) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n\n    private _autocompleteDisabled = false;\n\n    private overlayAttached: boolean = false;\n\n    private overlayRef: OverlayRef | null;\n\n    private portal: TemplatePortal;\n\n    private componentDestroyed = false;\n\n    private scrollStrategy: () => ScrollStrategy;\n\n    /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n    private previousValue: string | number | null;\n\n    /** Strategy that is used to position the panel. */\n    private positionStrategy: FlexibleConnectedPositionStrategy;\n\n    /** The subscription for closing actions (some are bound to document). */\n    private closingActionsSubscription: Subscription;\n\n    /** Subscription to viewport size changes. */\n    private viewportSubscription = Subscription.EMPTY;\n\n    /**\n     * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n     * closed autocomplete from being reopened if the user switches to another browser tab and then\n     * comes back.\n     */\n    private canOpenOnNextFocus = true;\n\n    /** Stream of keyboard events that can close the panel. */\n    private readonly closeKeyEventStream = new Subject<void>();\n\n    constructor(\n        private elementRef: ElementRef<HTMLInputElement>,\n        private viewContainerRef: ViewContainerRef,\n        private changeDetectorRef: ChangeDetectorRef,\n        private overlay: Overlay,\n        private zone: NgZone,\n        @Inject(MC_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n        @Optional() private dir: Directionality,\n        @Optional() @Host() private formField: McFormField,\n        @Optional() @Inject(DOCUMENT) private document: any,\n        // @breaking-change 8.0.0 Make `_viewportRuler` required.\n        private viewportRuler?: ViewportRuler\n    ) {\n        // tslint:disable-next-line no-typeof-undefined\n        if (typeof window !== 'undefined') {\n            zone.runOutsideAngular(() => {\n                window.addEventListener('blur', this.windowBlurHandler);\n            });\n        }\n\n        this.scrollStrategy = scrollStrategy;\n    }\n\n    ngOnDestroy() {\n        // tslint:disable-next-line no-typeof-undefined\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this.windowBlurHandler);\n        }\n\n        this.viewportSubscription.unsubscribe();\n        this.componentDestroyed = true;\n        this.destroyPanel();\n        this.closeKeyEventStream.complete();\n    }\n\n    /** `View -> model callback called when value changes` */\n    // tslint:disable-next-line no-empty\n    onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when autocomplete has been touched` */\n    // tslint:disable-next-line no-empty\n    onTouched: () => void = () => {};\n\n    /** Opens the autocomplete suggestion panel. */\n    openPanel(): void {\n        this.attachOverlay();\n    }\n\n    closePanel(): void {\n        if (!this.overlayAttached) { return; }\n\n        if (this.panelOpen) {\n            this.autocomplete.closed.emit();\n        }\n\n        this.autocomplete.isOpen = this.overlayAttached = false;\n\n        if (this.overlayRef && this.overlayRef.hasAttached()) {\n            this.overlayRef.detach();\n            this.closingActionsSubscription.unsubscribe();\n        }\n\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this.componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this.changeDetectorRef.detectChanges();\n        }\n    }\n\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n    updatePosition(): void {\n        if (this.overlayAttached) {\n            this.overlayRef!.updatePosition();\n        }\n    }\n\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    get panelClosingActions(): Observable<McOptionSelectionChange | null> {\n        return merge(\n            this.optionSelections,\n            this.autocomplete.keyManager.tabOut.pipe(filter(() => this.overlayAttached)),\n            this.closeKeyEventStream,\n            this.getOutsideClickStream(),\n            this.overlayRef ?\n                this.overlayRef.detachments().pipe(filter(() => this.overlayAttached)) :\n                observableOf()\n        ).pipe(\n            // Normalize the output so we return a consistent type.\n            map((event) => event instanceof McOptionSelectionChange ? event : null)\n        );\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any): void {\n        Promise.resolve(null).then(() => this.setTriggerValue(value));\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => {}): void {\n        this.onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => {}) {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.elementRef.nativeElement.disabled = isDisabled;\n    }\n\n    handleKeydown(event: KeyboardEvent): void {\n        // tslint:disable-next-line deprecation\n        const keyCode = event.keyCode;\n\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE) {\n            event.preventDefault();\n        }\n\n        if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n            this.activeOption.selectViaInteraction();\n            this.resetActiveItem();\n            event.preventDefault();\n        } else if (this.autocomplete) {\n            const prevActiveItem = this.autocomplete.keyManager.activeItem;\n\n            if (this.panelOpen || keyCode === TAB) {\n                this.autocomplete.onKeydown(event);\n            } else if (keyCode === DOWN_ARROW && this.canOpen()) {\n                this.openPanel();\n            }\n\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n            if (isArrowKey || this.autocomplete.keyManager.activeItem !== prevActiveItem) {\n                this.scrollToOption();\n            }\n        }\n    }\n\n    handleInput(event: KeyboardEvent): void {\n        const target = event.target as HTMLInputElement;\n        let value: number | string | null = target.value;\n\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value === '' ? null : parseFloat(value);\n        }\n\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this.previousValue !== value) {\n            this.previousValue = value;\n            this.onChange(value);\n\n            if (this.canOpen() && this.document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n\n    handleFocus(): void {\n        if (!this.canOpenOnNextFocus) {\n            this.canOpenOnNextFocus = true;\n        } else if (this.canOpen()) {\n            this.previousValue = this.elementRef.nativeElement.value;\n            this.attachOverlay();\n        }\n    }\n\n    handleClick($event: MouseEvent) {\n        if (this.canOpen() && this.document.activeElement === $event.target) {\n            this.openPanel();\n        }\n    }\n\n    /** Stream of clicks outside of the autocomplete panel. */\n    private getOutsideClickStream(): Observable<any> {\n        return merge(\n            // tslint:disable-next-line: no-unnecessary-type-assertion\n            fromEvent(this.document, 'click') as Observable<MouseEvent>,\n            // tslint:disable-next-line: no-unnecessary-type-assertion\n            fromEvent(this.document, 'touchend') as Observable<TouchEvent>\n        )\n            .pipe(filter((event) => {\n                const clickTarget = event.target as HTMLElement;\n                const formField = this.formField ?\n                    this.formField._elementRef.nativeElement : null;\n\n                return this.overlayAttached &&\n                    clickTarget !== this.elementRef.nativeElement &&\n                    (!formField || !formField.contains(clickTarget)) &&\n                    (!!this.overlayRef && !this.overlayRef.overlayElement.contains(clickTarget));\n            }));\n    }\n\n    /**\n     * Event handler for when the window is blurred. Needs to be an\n     * arrow function in order to preserve the context.\n     */\n    private windowBlurHandler = () => {\n        // If the user blurred the window while the autocomplete is focused, it means that it'll be\n        // refocused when they come back. In this case we want to skip the first focus event, if the\n        // pane was closed, in order to avoid reopening it unintentionally.\n        this.canOpenOnNextFocus = this.document.activeElement !== this.elementRef.nativeElement || this.panelOpen;\n    }\n\n    /**\n     * Given that we are not actually focusing active options, we must manually adjust scroll\n     * to reveal options below the fold. First, we find the offset of the option from the top\n     * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n     * the panel height + the option height, so the active option will be just visible at the\n     * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n     * will become the offset. If that offset is visible within the panel already, the scrollTop is\n     * not adjusted.\n     */\n    private scrollToOption(): void {\n        const index = this.autocomplete.keyManager.activeItemIndex || 0;\n        const labelCount = countGroupLabelsBeforeOption(index,\n            this.autocomplete.options, this.autocomplete.optionGroups);\n\n        const newScrollPosition = getOptionScrollPosition(\n            index + labelCount,\n            AUTOCOMPLETE_OPTION_HEIGHT,\n            this.autocomplete.getScrollTop(),\n            AUTOCOMPLETE_PANEL_HEIGHT\n        );\n\n        this.autocomplete.setScrollTop(newScrollPosition);\n    }\n\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    private subscribeToClosingActions(): Subscription {\n        const firstStable = this.zone.onStable.asObservable()\n            .pipe(take(1));\n        const optionChanges = this.autocomplete.options.changes\n            .pipe(\n                tap(() => this.positionStrategy.reapplyLastPosition()),\n                // Defer emitting to the stream until the next tick, because changing\n                // bindings in here will cause \"changed after checked\" errors.\n                delay(0)\n            );\n\n        // When the zone is stable initially, and when the option list changes...\n        return merge(firstStable, optionChanges)\n            .pipe(\n                // create a new stream of panelClosingActions, replacing any previous streams\n                // that were created, and flatten it so our stream only emits closing events...\n                switchMap(() => {\n                    const wasOpen = this.panelOpen;\n                    this.resetActiveItem();\n                    this.autocomplete.setVisibility();\n\n                    if (this.panelOpen) {\n                        this.overlayRef!.updatePosition();\n\n                        // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                        // event, because we may not have emitted it when the panel was attached. This\n                        // can happen if the users opens the panel and there are no options, but the\n                        // options come in slightly later or as a result of the value changing.\n                        if (wasOpen !== this.panelOpen) {\n                            this.autocomplete.opened.emit();\n                        }\n                    }\n\n                    return this.panelClosingActions;\n                }),\n                // when the first closing event occurs...\n                take(1)\n            )\n            // set the value, close the panel, and complete.\n            .subscribe((event) => this.setValueAndClose(event));\n    }\n\n    /** Destroys the autocomplete suggestion panel. */\n    private destroyPanel(): void {\n        if (this.overlayRef) {\n            this.closePanel();\n            this.overlayRef.dispose();\n            this.overlayRef = null;\n        }\n    }\n\n    private setTriggerValue(value: any): void {\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n            this.autocomplete.displayWith(value) :\n            value;\n\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        const inputValue = toDisplay != null ? toDisplay : '';\n\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this.formField) {\n            this.formField.control.value = inputValue;\n        } else {\n            this.elementRef.nativeElement.value = inputValue;\n        }\n\n        this.previousValue = inputValue;\n    }\n\n    /** This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    private setValueAndClose(event: McOptionSelectionChange | null): void {\n        if (event && event.source) {\n            this.clearPreviousSelectedOption(event.source);\n            this.setTriggerValue(event.source.value);\n            this.onChange(event.source.value);\n            this.elementRef.nativeElement.focus();\n\n            this.autocomplete.emitSelectEvent(event.source);\n        }\n\n        this.closePanel();\n    }\n\n    /** Clear any previous selected option and emit a selection change event for this option */\n    private clearPreviousSelectedOption(skip: McOption) {\n        this.autocomplete.options.forEach((option) => {\n            if (option !== skip && option.selected) {\n                option.deselect();\n            }\n        });\n    }\n\n    private attachOverlay(): void {\n        if (!this.autocomplete) {\n            throw getMcAutocompleteMissingPanelError();\n        }\n\n        let overlayRef = this.overlayRef;\n\n        if (!overlayRef) {\n            this.portal = new TemplatePortal(this.autocomplete.template, this.viewContainerRef);\n            overlayRef = this.overlay.create(this.getOverlayConfig());\n            this.overlayRef = overlayRef;\n\n            // Use the `keydownEvents` in order to take advantage of\n            // the overlay event targeting provided by the CDK overlay.\n            overlayRef.keydownEvents().subscribe((event) => {\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                // tslint:disable-next-line deprecation\n                if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n                    this.resetActiveItem();\n                    this.closeKeyEventStream.next();\n                }\n            });\n\n            if (this.viewportRuler) {\n                this.viewportSubscription = this.viewportRuler.change().subscribe(() => {\n                    if (this.panelOpen && overlayRef) {\n                        overlayRef.updateSize({ width: this.getPanelWidth() });\n                    }\n                });\n            }\n        } else {\n            const position = overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n\n            // Update the trigger, panel width and direction, in case anything has changed.\n            position.setOrigin(this.getConnectedElement());\n            overlayRef.updateSize({ width: this.getPanelWidth() });\n        }\n\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this.portal);\n            this.closingActionsSubscription = this.subscribeToClosingActions();\n        }\n\n        const wasOpen = this.panelOpen;\n\n        this.autocomplete.setVisibility();\n        this.autocomplete.isOpen = this.overlayAttached = true;\n\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n\n    private getOverlayConfig(): OverlayConfig {\n        return new OverlayConfig({\n            positionStrategy: this.getOverlayPosition(),\n            scrollStrategy: this.scrollStrategy(),\n            width: this.getPanelWidth(),\n            direction: this.dir\n        });\n    }\n\n    private getOverlayPosition(): PositionStrategy {\n        this.positionStrategy = this.overlay.position()\n            .flexibleConnectedTo(this.getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false)\n            .withPositions([\n                {\n                    originX: 'start',\n                    originY: 'bottom',\n                    overlayX: 'start',\n                    overlayY: 'top'\n                },\n                {\n                    originX: 'start',\n                    originY: 'top',\n                    overlayX: 'start',\n                    overlayY: 'bottom',\n\n                    // The overlay edge connected to the trigger should have squared corners, while\n                    // the opposite end has rounded corners. We apply a CSS class to swap the\n                    // border-radius based on the overlay position.\n                    panelClass: 'mc-autocomplete-panel-above'\n                }\n            ] as ConnectedPosition[]);\n\n        return this.positionStrategy;\n    }\n\n    private getConnectedElement(): ElementRef {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n\n        return this.formField ? this.formField.getConnectedOverlayOrigin() : this.elementRef;\n    }\n\n    private getPanelWidth(): number | string {\n        return this.autocomplete.panelWidth || this.getHostWidth() - AUTOCOMPLETE_BORDER_WIDTH;\n    }\n\n    private getHostWidth(): number {\n        return this.getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     */\n    private resetActiveItem(): void {\n        this.autocomplete.keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n    }\n\n    private canOpen(): boolean {\n        const element = this.elementRef.nativeElement;\n\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n}\n","import { Directive, ElementRef } from '@angular/core';\n\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n    selector: '[mcAutocompleteOrigin]',\n    exportAs: 'mcAutocompleteOrigin'\n})\nexport class McAutocompleteOrigin {\n    constructor(public elementRef: ElementRef<HTMLElement>) {}\n}\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ActiveDescendantKeyManager } from '@ptsecurity/cdk/a11y';\nimport { MC_OPTION_PARENT_COMPONENT, McOptgroup, McOption } from '@ptsecurity/mosaic/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet uniqueAutocompleteIdCounter = 0;\n\nexport class McAutocompleteSelectedEvent {\n    constructor(public source: McAutocomplete, public option: McOption) {}\n}\n\n/** Default `mc-autocomplete` options that can be overridden. */\n// tslint:disable-next-line naming-convention\nexport interface McAutocompleteDefaultOptions {\n    /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n    autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mc-autocomplete`. */\nexport const MC_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<McAutocompleteDefaultOptions>('mc-autocomplete-default-options', {\n        providedIn: 'root',\n        factory: MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY\n    });\n\n// tslint:disable-next-line naming-convention\nexport function MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): McAutocompleteDefaultOptions {\n    return { autoActiveFirstOption: true };\n}\n\n@Component({\n    selector: 'mc-autocomplete',\n    exportAs: 'mcAutocomplete',\n    templateUrl: 'autocomplete.html',\n    styleUrls: ['autocomplete.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: { class: 'mc-autocomplete' },\n    providers: [\n        { provide: MC_OPTION_PARENT_COMPONENT, useExisting: McAutocomplete }\n    ]\n})\nexport class McAutocomplete implements AfterContentInit {\n    /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n    id: string = `mc-autocomplete-${uniqueAutocompleteIdCounter++}`;\n\n    /** Manages active item in option list based on key events. */\n    keyManager: ActiveDescendantKeyManager<McOption>;\n\n    /** Whether the autocomplete panel should be visible, depending on option length. */\n    showPanel: boolean = false;\n\n    @ViewChild(TemplateRef, {static: true}) template: TemplateRef<any>;\n\n    @ViewChild('panel', {static: false}) panel: ElementRef;\n\n    @ContentChildren(McOption, { descendants: true }) options: QueryList<McOption>;\n\n    @ContentChildren(McOptgroup) optionGroups: QueryList<McOptgroup>;\n\n    /** Function that maps an option's control value to its display value in the trigger. */\n    @Input() displayWith: ((value: any) => string) | null = null;\n\n    /**\n     * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n     * match the width of its host.\n     */\n    @Input() panelWidth: string | number;\n\n    /** Event that is emitted whenever an option from the list is selected. */\n    @Output() readonly optionSelected: EventEmitter<McAutocompleteSelectedEvent> =\n        new EventEmitter<McAutocompleteSelectedEvent>();\n\n    /** Event that is emitted when the autocomplete panel is opened. */\n    @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Event that is emitted when the autocomplete panel is closed. */\n    @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n    /**\n     * Takes classes set on the host mc-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    get classList() {\n        return this._classList;\n    }\n\n    @Input('class')\n    set classList(value: string) {\n        if (value && value.length) {\n            value.split(' ')\n                .forEach((className) => this._classList[className.trim()] = true);\n\n            this.elementRef.nativeElement.className = '';\n        }\n    }\n\n    private _classList: any = {};\n\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MC_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     */\n    @Input()\n    get autoActiveFirstOption(): boolean {\n        return this._autoActiveFirstOption;\n    }\n\n    set autoActiveFirstOption(value: boolean) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n\n    private _autoActiveFirstOption: boolean;\n\n    get isOpen(): boolean {\n        return this._isOpen && this.showPanel;\n    }\n\n    set isOpen(value: boolean) {\n        this._isOpen = value;\n    }\n\n    private _isOpen: boolean = false;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        private elementRef: ElementRef<HTMLElement>,\n        @Inject(MC_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: McAutocompleteDefaultOptions\n    ) {\n        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    }\n\n    ngAfterContentInit() {\n        this.keyManager = new ActiveDescendantKeyManager<McOption>(this.options);\n        this.setVisibility();\n    }\n\n    setScrollTop(scrollTop: number): void {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n\n    getScrollTop(): number {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n\n    setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._classList['mc-autocomplete_visible'] = this.showPanel;\n        this._classList['mc-autocomplete_hidden'] = !this.showPanel;\n\n        this.changeDetectorRef.markForCheck();\n    }\n\n    emitSelectEvent(option: McOption): void {\n        const event = new McAutocompleteSelectedEvent(this, option);\n\n        this.optionSelected.emit(event);\n    }\n\n    onKeydown(event: KeyboardEvent): any {\n        this.keyManager.onKeydown(event);\n    }\n}\n\n"],"names":["McCommonModule","McOptionModule","OverlayModule","CommonModule","NgModule","Input","ViewportRuler","Optional","Inject","DOCUMENT","McFormField","Host","Directionality","NgZone","Overlay","ChangeDetectorRef","ViewContainerRef","ElementRef","Directive","OverlayConfig","ESCAPE","UP_ARROW","TemplatePortal","take","switchMap","merge","delay","tap","getOptionScrollPosition","countGroupLabelsBeforeOption","filter","fromEvent","DOWN_ARROW","TAB","ENTER","McOptionSelectionChange","map","observableOf","coerceBooleanProperty","Subject","Subscription","defer","forwardRef","NG_VALUE_ACCESSOR","InjectionToken","Output","ContentChildren","McOptgroup","McOption","ViewChild","TemplateRef","MC_OPTION_PARENT_COMPONENT","ChangeDetectionStrategy","ViewEncapsulation","Component","ActiveDescendantKeyManager","EventEmitter"],"mappings":"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"}