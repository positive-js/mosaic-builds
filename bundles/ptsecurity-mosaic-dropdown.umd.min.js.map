{"version":3,"sources":["../../../packages/mosaic/dropdown/dropdown-content.ts","../../../node_modules/tslib/tslib.es6.js","../../../packages/mosaic/dropdown/dropdown-panel.ts","../../../packages/mosaic/dropdown/dropdown-item.ts","../../../packages/mosaic/dropdown/dropdown-errors.ts","../../../packages/mosaic/dropdown/dropdown-animations.ts","../../../packages/mosaic/dropdown/dropdown.component.ts","../../../packages/mosaic/dropdown/dropdown-trigger.ts","../../../packages/mosaic/dropdown/dropdown.module.ts"],"names":["McDropdownContent","_template","_componentFactoryResolver","_appRef","_injector","_viewContainerRef","_document","this","attached","Subject","prototype","attach","context","portal","TemplatePortal","detach","outlet","DomPortalOutlet","createElement","element","elementRef","nativeElement","insertBefore","outletElement","next","isAttached","ngOnDestroy","dispose","Directive","args","selector","TemplateRef","ComponentFactoryResolver","ApplicationRef","Injector","ViewContainerRef","Inject","DOCUMENT","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","call","create","__read","o","n","m","Symbol","iterator","r","e","i","ar","done","push","value","error","MC_DROPDOWN_PANEL","InjectionToken","McDropdownItemMixinBase","mixinTabIndex","mixinDisabled","McDropdownItemBase","McDropdownItem","_elementRef","_focusMonitor","document","_parentDropdownPanel","_this","_super","role","hovered","highlighted","triggersNestedDropdown","monitor","addItem","__","constructor","__extends","focus","origin","focusVia","getHostElement","stopMonitoring","removeItem","complete","haltDisabledEvents","event","disabled","preventDefault","stopPropagation","handleMouseEnter","getLabel","content","textNodeType","TEXT_NODE","output","childNodes","length","nodeType","textContent","trim","throwMcDropdownMissingError","Error","throwMcDropdownInvalidPositionX","throwMcDropdownInvalidPositionY","Component","exportAs","inputs","host","class","[class.mc-dropdown__item_highlighted]","[class.mc-disabled]","[attr.role]","[attr.tabindex]","(click)","(mouseenter)","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","template","ElementRef","FocusMonitor","Optional","type","Input","ViewChild","static","mcDropdownAnimations","transformDropdown","trigger","state","style","opacity","transform","transition","group","query","animate","fadeInItems","MC_DROPDOWN_DEFAULT_OPTIONS","providedIn","factory","MC_DROPDOWN_DEFAULT_OPTIONS_FACTORY","overlapTriggerX","overlapTriggerY","xPosition","yPosition","backdropClass","McDropdown","_ngZone","_defaultOptions","_closeOnOutsideClick","closeOnOutsideClick","_xPosition","_yPosition","_overlapTriggerX","_overlapTriggerY","_hasBackdrop","hasBackdrop","classList","panelAnimationState","animationDone","closed","EventEmitter","itemsArray","itemChanges","tabSubscription","Subscription","EMPTY","defineProperty","setPositionClasses","coerceBooleanProperty","classes","previousPanelClass","split","forEach","className","ngOnInit","ngAfterContentInit","keyManager","FocusKeyManager","items","withWrap","withTypeAhead","tabOut","subscribe","emit","unsubscribe","pipe","startWith","switchMap","merge","apply","arguments","concat","__spread","map","item","handleKeydown","keyCode","ESCAPE","LEFT_ARROW","parent","direction","RIGHT_ARROW","UP_ARROW","DOWN_ARROW","setFocusOrigin","onKeydown","handleClick","focusFirstItem","lazyContent","onStable","asObservable","take","setFirstItemActive","resetActiveItem","setActiveItem","indexOf","index","splice","posX","posY","startAnimation","resetAnimation","onAnimationDone","isAnimating","onAnimationStart","toState","activeItemIndex","scrollTop","animations","providers","provide","useExisting","NgZone","ContentChildren","ContentChild","Output","MC_DROPDOWN_SCROLL_STRATEGY","MC_DROPDOWN_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","Overlay","useFactory","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","McDropdownTrigger","_overlay","_element","_scrollStrategy","_parent","_dropdownItemInstance","_dir","openedBy","dropdownOpened","dropdownClosed","_opened","overlayRef","closeSubscription","hoverSubscription","outsidePointerEventsSubscription","handleTouchStart","addEventListener","_dropdown","dropdown","reason","destroy","check","handleHover","removeEventListener","cleanUpSubscriptions","toggle","close","open","createOverlay","overlayConfig","getConfig","outsidePointerEvents","setPosition","getPortal","data","closingActions","init","handleMousedown","button","key","SPACE","ENTER","dir","opened","filter","takeUntil","undefined","reset","setIsOpened","isOpen","config","getOverlayConfig","subscribeToPositions","keydownEvents","OverlayConfig","positionStrategy","position","flexibleConnectedTo","withLockedPosition","withTransformOriginOn","scrollStrategy","positionChanges","change","connectionPair","overlayX","overlayY","_a","originX","originFallbackX","overlayFallbackX","_b","overlayFallbackY","originY","originFallbackY","offsetY","withPositions","backdrop","backdropClick","detachments","parentClose","observableOf","hover","active","delay","asapScheduler","templateRef","aria-haspopup","[attr.aria-expanded]","(mousedown)","(keydown)","decorators","Self","Directionality","NgModule","imports","CommonModule","OverlayModule","McIconModule","exports","declarations"],"mappings":"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","sourcesContent":["import { TemplatePortal, DomPortalOutlet } from '@angular/cdk/portal';\nimport { DOCUMENT } from '@angular/common';\nimport {\n    Directive,\n    TemplateRef,\n    ComponentFactoryResolver,\n    ApplicationRef,\n    Injector,\n    ViewContainerRef,\n    Inject,\n    OnDestroy\n} from '@angular/core';\nimport { Subject } from 'rxjs';\n\n\n/**\n * Dropdown content that will be rendered lazily once the dropdown is opened.\n */\n@Directive({\n    selector: 'ng-template[mcDropdownContent]'\n})\nexport class McDropdownContent implements OnDestroy {\n\n    /** Emits when the dropdown content has been attached. */\n    attached = new Subject<void>();\n    private portal: TemplatePortal;\n    private outlet: DomPortalOutlet;\n\n    constructor(\n        private _template: TemplateRef<any>,\n        private _componentFactoryResolver: ComponentFactoryResolver,\n        private _appRef: ApplicationRef,\n        private _injector: Injector,\n        private _viewContainerRef: ViewContainerRef,\n        @Inject(DOCUMENT) private _document: any\n    ) {}\n\n    /**\n     * Attaches the content with a particular context.\n     * @docs-private\n     */\n    attach(context: any = {}) {\n        if (!this.portal) {\n            this.portal = new TemplatePortal(this._template, this._viewContainerRef);\n        }\n\n        this.detach();\n\n        if (!this.outlet) {\n            this.outlet = new DomPortalOutlet(\n                this._document.createElement('div'),\n                this._componentFactoryResolver,\n                this._appRef,\n                this._injector\n            );\n        }\n\n        const element: HTMLElement = this._template.elementRef.nativeElement;\n\n        // Because we support opening the same dropdown from different triggers (which in turn have their\n        // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n        // risk it staying attached to a pane that's no longer in the DOM.\n        element.parentNode!.insertBefore(this.outlet.outletElement, element);\n        this.portal.attach(this.outlet, context);\n        this.attached.next();\n    }\n\n    /**\n     * Detaches the content.\n     * @docs-private\n     */\n    detach() {\n        if (this.portal.isAttached) {\n            this.portal.detach();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.outlet) {\n            this.outlet.dispose();\n        }\n    }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { FocusOrigin } from '@angular/cdk/a11y';\nimport { Direction } from '@angular/cdk/bidi';\nimport { EventEmitter, TemplateRef, InjectionToken } from '@angular/core';\n\nimport { McDropdownContent } from './dropdown-content';\nimport { DropdownPositionX, DropdownPositionY } from './dropdown-positions';\n\n\n/**\n * Injection token used to provide the parent dropdown to dropdown-specific components.\n * @docs-private\n */\nexport const MC_DROPDOWN_PANEL = new InjectionToken<McDropdownPanel>('MC_DROPDOWN_PANEL');\n\n/**\n * Interface for a custom dropdown panel that can be used with `mcDropdownTriggerFor`.\n * @docs-private\n */\n// tslint:disable-next-line:naming-convention\nexport interface McDropdownPanel<T = any> {\n    xPosition: DropdownPositionX;\n    yPosition: DropdownPositionY;\n    overlapTriggerX: boolean;\n    overlapTriggerY: boolean;\n    templateRef: TemplateRef<any>;\n    closed: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n    parent?: McDropdownPanel | undefined;\n    direction?: Direction;\n    lazyContent?: McDropdownContent;\n    backdropClass?: string;\n    hasBackdrop?: boolean;\n    closeOnOutsideClick?: boolean;\n    focusFirstItem(origin?: FocusOrigin): void;\n    resetActiveItem(): void;\n    setPositionClasses?(x: DropdownPositionX, y: DropdownPositionY): void;\n    addItem?(item: T): void;\n    removeItem?(item: T): void;\n}\n","import { FocusMonitor, FocusOrigin } from '@angular/cdk/a11y';\nimport { DOCUMENT } from '@angular/common';\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    OnDestroy,\n    ViewEncapsulation,\n    Inject,\n    Optional,\n    Input,\n    ViewChild\n} from '@angular/core';\nimport { IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { CanDisable, CanDisableCtor, HasTabIndexCtor, mixinDisabled, mixinTabIndex } from '@ptsecurity/mosaic/core';\nimport { Subject } from 'rxjs';\n\nimport { MC_DROPDOWN_PANEL, McDropdownPanel } from './dropdown-panel';\n\n\n// Boilerplate for applying mixins to McDropdownItem.\n/** @docs-private */\nexport class McDropdownItemBase {}\n// tslint:disable-next-line:naming-convention\nexport const McDropdownItemMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof McDropdownItemBase = mixinTabIndex(mixinDisabled(McDropdownItemBase));\n\n/**\n * This directive is intended to be used inside an mc-dropdown tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n    selector: 'mc-dropdown-item, [mc-dropdown-item]',\n    exportAs: 'mcDropdownItem',\n    inputs: ['disabled', 'tabIndex'],\n    host: {\n        class: 'mc-dropdown__item',\n        '[class.mc-dropdown__item_highlighted]': 'highlighted',\n        '[class.mc-disabled]': 'disabled',\n        '[attr.role]': 'role',\n        '[attr.tabindex]': 'tabIndex',\n        '(click)': 'haltDisabledEvents($event)',\n        '(mouseenter)': 'handleMouseEnter()'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    template: `\n        <div #content>\n            <ng-content></ng-content>\n        </div>\n        <i *ngIf=\"triggersNestedDropdown\" mc-icon=\"mc-angle-right-M_16\" class=\"mc-dropdown__trigger\"></i>\n    `\n})\nexport class McDropdownItem extends McDropdownItemMixinBase implements IFocusableOption, CanDisable, OnDestroy {\n\n    /** ARIA role for the dropdown item. */\n    @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n    @ViewChild('content', { static: false }) content;\n\n    /** Stream that emits when the dropdown item is hovered. */\n    readonly hovered: Subject<McDropdownItem> = new Subject<McDropdownItem>();\n\n    /** Whether the dropdown item is highlighted. */\n    highlighted: boolean = false;\n\n    /** Whether the dropdown item acts as a trigger for a nested dropdown. */\n    triggersNestedDropdown: boolean = false;\n\n    constructor(\n        private _elementRef: ElementRef<HTMLElement>,\n        private _focusMonitor: FocusMonitor,\n        @Inject(DOCUMENT) private document: any,\n        @Optional() @Inject(MC_DROPDOWN_PANEL) private _parentDropdownPanel?: McDropdownPanel<McDropdownItem>\n    ) {\n        super();\n\n        if (_focusMonitor) {\n            // Start monitoring the element so it gets the appropriate focused classes. We want\n            // to show the focus style for dropdown items only when the focus was not caused by a\n            // mouse or touch interaction.\n            _focusMonitor.monitor(this._elementRef.nativeElement, false);\n        }\n\n        if (_parentDropdownPanel && _parentDropdownPanel.addItem) {\n            _parentDropdownPanel.addItem(this);\n        }\n    }\n\n    /** Focuses the dropdown item. */\n    focus(origin: FocusOrigin = 'program'): void {\n        if (this._focusMonitor) {\n            this._focusMonitor.focusVia(this.getHostElement(), origin);\n        } else {\n            this.getHostElement().focus();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._focusMonitor) {\n            this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n\n        if (this._parentDropdownPanel && this._parentDropdownPanel.removeItem) {\n            this._parentDropdownPanel.removeItem(this);\n        }\n\n        this.hovered.complete();\n    }\n\n    /** Returns the host DOM element. */\n    getHostElement(): HTMLElement {\n        return this._elementRef.nativeElement;\n    }\n\n    /** Prevents the default element actions if it is disabled. */\n    haltDisabledEvents(event: MouseEvent): void {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    /** Emits to the hover stream. */\n    handleMouseEnter() {\n        this.hovered.next(this);\n    }\n\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel(): string {\n        const element: HTMLElement = this.content.nativeElement;\n        // tslint:disable-next-line:no-magic-numbers\n        const textNodeType = this.document ? this.document.TEXT_NODE : 3;\n        let output = '';\n\n        if (element.childNodes) {\n            const length = element.childNodes.length;\n\n            // Go through all the top-level text nodes and extract their text.\n            // We skip anything that's not a text node to prevent the text from\n            // being thrown off by something like an icon.\n            for (let i = 0; i < length; i++) {\n                if (element.childNodes[i].nodeType === textNodeType) {\n                    output += element.childNodes[i].textContent;\n                }\n            }\n        }\n\n        return output.trim();\n    }\n}\n","/**\n * Throws an exception for the case when dropdown trigger doesn't have a valid mc-dropdown instance\n * @docs-private\n */\nexport function throwMcDropdownMissingError() {\n    throw Error(`mcDropdownTriggerFor: must pass in an mc-dropdown instance.\n    Example:\n      <mc-dropdown #dropdown=\"mcDropdown\"></mc-dropdown>\n      <button [mcDropdownTriggerFor]=\"dropdown\"></button>`);\n}\n\n/**\n * Throws an exception for the case when dropdown's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMcDropdownInvalidPositionX() {\n    throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mc-dropdown xPosition=\"before\" #dropdown=\"mcDropdown\"></mc-dropdown>`);\n}\n\n/**\n * Throws an exception for the case when dropdown's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMcDropdownInvalidPositionY() {\n    throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mc-dropdown yPosition=\"above\" #dropdown=\"mcDropdown\"></mc-dropdown>`);\n}\n","import {\n    trigger,\n    state,\n    style,\n    animate,\n    transition,\n    query,\n    group,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n\n/**\n * Animations used by the mc-dropdown component.\n * @docs-private\n */\nexport const mcDropdownAnimations: {\n    readonly transformDropdown: AnimationTriggerMetadata;\n    readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n    /**\n     * This animation controls the dropdown panel's entry and exit from the page.\n     *\n     * When the dropdown panel is added to the DOM, it scales in and fades in its border.\n     *\n     * When the dropdown panel is removed from the DOM, it simply fades out after a brief\n     * delay to display the ripple.\n     */\n    transformDropdown: trigger('transformDropdown', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(0.8)'\n        })),\n        transition('void => enter', group([\n            query('.mc-dropdown__content', animate('50ms linear', style({opacity: 1}))),\n            animate('50ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'}))\n        ])),\n        transition('* => void', animate('50ms 25ms linear', style({opacity: 0})))\n    ]),\n\n\n    /**\n     * This animation fades in the background color and content of the dropdown panel\n     * after its containing element is scaled in.\n     */\n    fadeInItems: trigger('fadeInItems', [\n        // now. Remove next time we do breaking changes.\n        state('showing', style({opacity: 1})),\n        transition('void => *', [\n            style({opacity: 0}),\n            animate('200ms 60ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n\nexport const fadeInItems = mcDropdownAnimations.fadeInItems;\n\nexport const transformDropdown = mcDropdownAnimations.transformDropdown;\n","import { AnimationEvent } from '@angular/animations';\nimport { FocusOrigin } from '@angular/cdk/a11y';\nimport { Direction } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChild,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    Output,\n    TemplateRef,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    OnInit\n} from '@angular/core';\nimport { FocusKeyManager } from '@ptsecurity/cdk/a11y';\nimport { ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW } from '@ptsecurity/cdk/keycodes';\nimport { merge, Observable, Subject, Subscription } from 'rxjs';\nimport { startWith, switchMap, take } from 'rxjs/operators';\n\nimport { mcDropdownAnimations } from './dropdown-animations';\nimport { McDropdownContent } from './dropdown-content';\nimport { throwMcDropdownInvalidPositionX, throwMcDropdownInvalidPositionY } from './dropdown-errors';\nimport { McDropdownItem } from './dropdown-item';\nimport { MC_DROPDOWN_PANEL, McDropdownPanel } from './dropdown-panel';\nimport { DropdownPositionX, DropdownPositionY } from './dropdown-positions';\n\n\n/** Default `mc-dropdown` options that can be overridden. */\n// tslint:disable-next-line:naming-convention\nexport interface McDropdownDefaultOptions {\n    /** The x-axis position of the dropdown. */\n    xPosition: DropdownPositionX;\n\n    /** The y-axis position of the dropdown. */\n    yPosition: DropdownPositionY;\n\n    /** Whether the dropdown should overlap the dropdown trigger horizontally. */\n    overlapTriggerX: boolean;\n\n    /** Whether the dropdown should overlap the dropdown trigger vertically. */\n    overlapTriggerY: boolean;\n\n    /** Class to be applied to the dropdown's backdrop. */\n    backdropClass: string;\n\n    /** Whether the dropdown has a backdrop. */\n    hasBackdrop?: boolean;\n\n    closeOnOutsideClick?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mc-dropdown`. */\nexport const MC_DROPDOWN_DEFAULT_OPTIONS =\n    new InjectionToken<McDropdownDefaultOptions>('mc-dropdown-default-options', {\n        providedIn: 'root',\n        factory: MC_DROPDOWN_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\n// tslint:disable-next-line:naming-convention\nexport function MC_DROPDOWN_DEFAULT_OPTIONS_FACTORY(): McDropdownDefaultOptions {\n    return {\n        overlapTriggerX: true,\n        overlapTriggerY: false,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop'\n    };\n}\n\n@Component({\n    selector: 'mc-dropdown',\n    exportAs: 'mcDropdown',\n    templateUrl: 'dropdown.html',\n    styleUrls: ['dropdown.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    animations: [\n        mcDropdownAnimations.transformDropdown,\n        mcDropdownAnimations.fadeInItems\n    ],\n    providers: [\n        { provide: MC_DROPDOWN_PANEL, useExisting: McDropdown }\n    ]\n})\nexport class McDropdown implements AfterContentInit, McDropdownPanel<McDropdownItem>, OnInit, OnDestroy {\n\n    /** Position of the dropdown in the X axis. */\n    @Input()\n    get xPosition(): DropdownPositionX {\n        return this._xPosition;\n    }\n\n    set xPosition(value: DropdownPositionX) {\n        if (value !== 'before' && value !== 'after') {\n            throwMcDropdownInvalidPositionX();\n        }\n        this._xPosition = value;\n        this.setPositionClasses();\n    }\n\n    /** Position of the dropdown in the Y axis. */\n    @Input()\n    get yPosition(): DropdownPositionY {\n        return this._yPosition;\n    }\n\n    set yPosition(value: DropdownPositionY) {\n        if (value !== 'above' && value !== 'below') {\n            throwMcDropdownInvalidPositionY();\n        }\n        this._yPosition = value;\n        this.setPositionClasses();\n    }\n\n    /** Whether the dropdown should overlap its trigger vertically. */\n    @Input()\n    get overlapTriggerY(): boolean {\n        return this._overlapTriggerY;\n    }\n\n    set overlapTriggerY(value: boolean) {\n        this._overlapTriggerY = coerceBooleanProperty(value);\n    }\n\n    /** Whether the dropdown should overlap its trigger horizontally. */\n    @Input()\n    get overlapTriggerX(): boolean {\n        return this._overlapTriggerX;\n    }\n\n    set overlapTriggerX(value: boolean) {\n        this._overlapTriggerX = coerceBooleanProperty(value);\n    }\n\n    /** Whether the dropdown has a backdrop. */\n    @Input()\n    get hasBackdrop(): boolean | undefined {\n        return this._hasBackdrop;\n    }\n\n    set hasBackdrop(value: boolean | undefined) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n\n    /** Close menu when an outside click is detected */\n    @Input()\n    get closeOnOutsideClick(): boolean | undefined { return this._closeOnOutsideClick; }\n    set closeOnOutsideClick(value: boolean | undefined) {\n        this._closeOnOutsideClick = coerceBooleanProperty(value);\n    }\n    private _closeOnOutsideClick: boolean | undefined = this._defaultOptions.closeOnOutsideClick;\n\n    /**\n     * This method takes classes set on the host mc-dropdown element and applies them on the\n     * dropdown template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing dropdown from outside the component.\n     * @param classes list of class names\n     */\n    @Input('class')\n    set panelClass(classes: string) {\n        const previousPanelClass = this.previousPanelClass;\n\n        if (previousPanelClass && previousPanelClass.length) {\n            previousPanelClass.split(' ').forEach((className: string) => {\n                this.classList[className] = false;\n            });\n        }\n\n        this.previousPanelClass = classes;\n\n        if (classes && classes.length) {\n            classes.split(' ').forEach((className: string) => {\n                this.classList[className] = true;\n            });\n\n            this._elementRef.nativeElement.className = '';\n        }\n    }\n    private _xPosition: DropdownPositionX = this._defaultOptions.xPosition;\n    private _yPosition: DropdownPositionY = this._defaultOptions.yPosition;\n    private _overlapTriggerX: boolean = this._defaultOptions.overlapTriggerX;\n    private _overlapTriggerY: boolean = this._defaultOptions.overlapTriggerY;\n    private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n    /** Config object to be passed into the dropdown's ngClass */\n    classList: { [key: string]: boolean } = {};\n\n    /** Current state of the panel animation. */\n    panelAnimationState: 'void' | 'enter' = 'void';\n\n    /** Emits whenever an animation on the dropdown completes. */\n    animationDone = new Subject<AnimationEvent>();\n\n    /** Whether the dropdown is animating. */\n    isAnimating: boolean;\n\n    /** Parent dropdown of the current dropdown panel. */\n    parent: McDropdownPanel | undefined;\n\n    /** Layout direction of the dropdown. */\n    direction: Direction;\n\n    /** Class to be added to the backdrop element. */\n    @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n    /** @docs-private */\n    @ViewChild(TemplateRef, { static: false }) templateRef: TemplateRef<any>;\n\n    /**\n     * List of the items inside of a dropdown.\n     */\n    @ContentChildren(McDropdownItem) items: QueryList<McDropdownItem>;\n\n    /**\n     * Dropdown content that will be rendered lazily.\n     * @docs-private\n     */\n    @ContentChild(McDropdownContent, { static: false }) lazyContent: McDropdownContent;\n\n    /** Event emitted when the dropdown is closed. */\n    @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n        new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n    private previousPanelClass: string;\n\n    private keyManager: FocusKeyManager<McDropdownItem>;\n\n    /** Dropdown items inside the current dropdown. */\n    private itemsArray: McDropdownItem[] = [];\n\n    /** Emits whenever the amount of dropdown items changes. */\n    private itemChanges = new Subject<McDropdownItem[]>();\n\n    /** Subscription to tab events on the dropdown panel */\n    private tabSubscription = Subscription.EMPTY;\n\n    constructor(\n        private _elementRef: ElementRef<HTMLElement>,\n        private _ngZone: NgZone,\n        @Inject(MC_DROPDOWN_DEFAULT_OPTIONS) private _defaultOptions: McDropdownDefaultOptions) { }\n\n    ngOnInit() {\n        this.setPositionClasses();\n    }\n\n    ngAfterContentInit() {\n        this.keyManager = new FocusKeyManager<McDropdownItem>(this.items)\n            .withWrap()\n            .withTypeAhead();\n\n        this.tabSubscription = this.keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n    }\n\n    ngOnDestroy() {\n        this.tabSubscription.unsubscribe();\n        this.closed.complete();\n    }\n\n    /** Stream that emits whenever the hovered dropdown item changes. */\n    hovered(): Observable<McDropdownItem> {\n        return this.itemChanges.pipe(\n            startWith(this.itemsArray),\n            switchMap((items) => merge(...items.map((item) => item.hovered)))\n        );\n    }\n\n    /** Handle a keyboard event from the dropdown, delegating to the appropriate action. */\n    handleKeydown(event: KeyboardEvent) {\n        // tslint:disable-next-line:deprecation\n        const keyCode = event.keyCode;\n\n        switch (keyCode) {\n            case ESCAPE:\n                this.closed.emit('keydown');\n                break;\n            case LEFT_ARROW:\n                if (this.parent && this.direction === 'ltr') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            case RIGHT_ARROW:\n                if (this.parent && this.direction === 'rtl') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            default:\n                if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n                    this.keyManager.setFocusOrigin('keyboard');\n                }\n\n                this.keyManager.onKeydown(event);\n        }\n    }\n\n    handleClick() {\n        this.closed.emit('click');\n    }\n\n    /**\n     * Focus the first item in the dropdown.\n     * @param origin Action from which the focus originated. Used to set the correct styling.\n     */\n    focusFirstItem(origin: FocusOrigin = 'program'): void {\n        // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n        if (this.lazyContent) {\n            this._ngZone.onStable.asObservable()\n                .pipe(take(1))\n                .subscribe(() => this.keyManager.setFocusOrigin(origin).setFirstItemActive());\n        } else {\n            this.keyManager.setFocusOrigin(origin).setFirstItemActive();\n        }\n    }\n\n    /**\n     * Resets the active item in the dropdown. This is used when the dropdown is opened, allowing\n     * the user to start from the first option when pressing the down arrow.\n     */\n    resetActiveItem() {\n        this.keyManager.setActiveItem(-1);\n    }\n\n    /**\n     * Registers a dropdown item with the dropdown.\n     * @docs-private\n     */\n    addItem(item: McDropdownItem) {\n        // We register the items through this method, rather than picking them up through\n        // `ContentChildren`, because we need the items to be picked up by their closest\n        // `mc-dropdown` ancestor. If we used `@ContentChildren(McDropdownItem, {descendants: true})`,\n        // all descendant items will bleed into the top-level dropdown in the case where the consumer\n        // has `mc-dropdown` instances nested inside each other.\n        if (this.itemsArray.indexOf(item) === -1) {\n            this.itemsArray.push(item);\n            this.itemChanges.next(this.itemsArray);\n        }\n    }\n\n    /**\n     * Removes an item from the dropdown.\n     * @docs-private\n     */\n    removeItem(item: McDropdownItem) {\n        const index = this.itemsArray.indexOf(item);\n\n        if (this.itemsArray.indexOf(item) > -1) {\n            this.itemsArray.splice(index, 1);\n            this.itemChanges.next(this.itemsArray);\n        }\n    }\n\n    /**\n     * Adds classes to the dropdown panel based on its position. Can be used by\n     * consumers to add specific styling based on the position.\n     * @param posX Position of the dropdown along the x axis.\n     * @param posY Position of the dropdown along the y axis.\n     * @docs-private\n     */\n    setPositionClasses(posX: DropdownPositionX = this.xPosition, posY: DropdownPositionY = this.yPosition) {\n        const classes = this.classList;\n        classes['mc-dropdown-before'] = posX === 'before';\n        classes['mc-dropdown-after'] = posX === 'after';\n        classes['mc-dropdown-above'] = posY === 'above';\n        classes['mc-dropdown-below'] = posY === 'below';\n    }\n\n    /** Starts the enter animation. */\n    startAnimation() {\n        this.panelAnimationState = 'enter';\n    }\n\n    /** Resets the panel animation to its initial state. */\n    resetAnimation() {\n        this.panelAnimationState = 'void';\n    }\n\n    /** Callback that is invoked when the panel animation completes. */\n    onAnimationDone(event: AnimationEvent) {\n        this.animationDone.next(event);\n        this.isAnimating = false;\n    }\n\n    onAnimationStart(event: AnimationEvent) {\n        this.isAnimating = true;\n\n        // Scroll the content element to the top as soon as the animation starts. This is necessary,\n        // because we move focus to the first item while it's still being animated, which can throw\n        // the browser off when it determines the scroll position. Alternatively we can move focus\n        // when the animation is done, however moving focus asynchronously will interrupt screen\n        // readers which are in the process of reading out the dropdown already. We take the `element`\n        // from the `event` since we can't use a `ViewChild` to access the pane.\n        if (event.toState === 'enter' && this.keyManager.activeItemIndex === 0) {\n            event.element.scrollTop = 0;\n        }\n    }\n}\n","import { FocusMonitor, FocusOrigin } from '@angular/cdk/a11y';\nimport { Direction, Directionality } from '@angular/cdk/bidi';\nimport {\n    FlexibleConnectedPositionStrategy,\n    HorizontalConnectionPos,\n    Overlay,\n    OverlayConfig,\n    OverlayRef,\n    VerticalConnectionPos,\n    ScrollStrategy\n} from '@angular/cdk/overlay';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport {\n    AfterContentInit,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    Self,\n    ViewContainerRef\n} from '@angular/core';\nimport { LEFT_ARROW, RIGHT_ARROW, SPACE, ENTER } from '@ptsecurity/cdk/keycodes';\nimport { asapScheduler, merge, of as observableOf, Subscription } from 'rxjs';\nimport { delay, filter, take, takeUntil } from 'rxjs/operators';\n\nimport { throwMcDropdownMissingError } from './dropdown-errors';\nimport { McDropdownItem } from './dropdown-item';\nimport { McDropdownPanel } from './dropdown-panel';\nimport { DropdownPositionX, DropdownPositionY } from './dropdown-positions';\nimport { McDropdown } from './dropdown.component';\n\n\n/** Injection token that determines the scroll handling while the dropdown is open. */\nexport const MC_DROPDOWN_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mc-dropdown-scroll-strategy');\n\n/** @docs-private */\n// tslint:disable-next-line:naming-convention\nexport function MC_DROPDOWN_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_DROPDOWN_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_DROPDOWN_SCROLL_STRATEGY_FACTORY\n};\n\n/** Default top padding of the nested dropdown panel. */\nexport const NESTED_PANEL_TOP_PADDING = 2;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * This directive is intended to be used in conjunction with an mc-dropdown tag.  It is\n * responsible for toggling the display of the provided dropdown instance.\n */\n@Directive({\n    selector: `[mcDropdownTriggerFor]`,\n    host: {\n        'aria-haspopup': 'true',\n        '[attr.aria-expanded]': 'opened || null',\n        '(mousedown)': 'handleMousedown($event)',\n        '(keydown)': 'handleKeydown($event)',\n        '(click)': 'handleClick($event)'\n    },\n    exportAs: 'mcDropdownTrigger'\n})\nexport class McDropdownTrigger implements AfterContentInit, OnDestroy {\n\n    /** The text direction of the containing app. */\n    get dir(): Direction {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n\n\n    /** References the dropdown instance that the trigger is associated with. */\n    @Input('mcDropdownTriggerFor')\n    get dropdown() {\n        return this._dropdown;\n    }\n\n    set dropdown(dropdown: McDropdownPanel) {\n        if (dropdown === this._dropdown) { return; }\n\n        this._dropdown = dropdown;\n        this.closeSubscription.unsubscribe();\n\n        if (dropdown) {\n            this.closeSubscription = dropdown.closed.asObservable().subscribe((reason) => {\n                this.destroy();\n\n                // If a click closed the dropdown, we should close the entire chain of nested dropdowns.\n                if ((reason === 'click' || reason === 'tab') && this._parent) {\n                    this._parent.closed.emit(reason);\n                }\n            });\n        }\n    }\n\n    // Tracking input type is necessary so it's possible to only auto-focus\n    // the first item of the list when the dropdown is opened via the keyboard\n    openedBy: 'mouse' | 'touch' | null = null;\n\n    /** Data to be passed along to any lazily-rendered content. */\n    @Input('mcDropdownTriggerData') data: any;\n\n    /** Event emitted when the associated dropdown is opened. */\n    @Output() readonly dropdownOpened: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Event emitted when the associated dropdown is closed. */\n    @Output() readonly dropdownClosed: EventEmitter<void> = new EventEmitter<void>();\n\n    private _dropdown: McDropdownPanel;\n\n    /** Whether the dropdown is open. */\n    get opened(): boolean {\n        return this._opened;\n    }\n\n    private _opened: boolean = false;\n\n    private portal: TemplatePortal;\n\n    private overlayRef: OverlayRef | null = null;\n\n    private closeSubscription = Subscription.EMPTY;\n\n    private hoverSubscription = Subscription.EMPTY;\n\n    private outsidePointerEventsSubscription = Subscription.EMPTY;\n\n    constructor(\n        private _overlay: Overlay,\n        private _element: ElementRef<HTMLElement>,\n        private _viewContainerRef: ViewContainerRef,\n        @Inject(MC_DROPDOWN_SCROLL_STRATEGY) private _scrollStrategy: any,\n        @Optional() private _parent: McDropdown,\n        @Optional() @Self() private _dropdownItemInstance: McDropdownItem,\n        @Optional() private _dir: Directionality,\n        private _focusMonitor?: FocusMonitor\n    ) {\n        _element.nativeElement.addEventListener('touchstart', this.handleTouchStart,\n            passiveEventListenerOptions);\n\n        if (_dropdownItemInstance) {\n            _dropdownItemInstance.triggersNestedDropdown = this.triggersNestedDropdown();\n        }\n    }\n\n    ngAfterContentInit() {\n        this.check();\n        this.handleHover();\n    }\n\n    ngOnDestroy() {\n        if (this.overlayRef) {\n            this.overlayRef.dispose();\n            this.overlayRef = null;\n        }\n\n        this._element.nativeElement.removeEventListener('touchstart', this.handleTouchStart,\n            passiveEventListenerOptions);\n\n        this.cleanUpSubscriptions();\n        this.closeSubscription.unsubscribe();\n    }\n\n    /** Whether the dropdown triggers a nested dropdown or a top-level one. */\n    triggersNestedDropdown(): boolean {\n        return !!(this._dropdownItemInstance && this._parent);\n    }\n\n    /** Toggles the dropdown between the open and closed states. */\n    toggle(): void {\n        // tslint:disable-next-line:no-void-expression\n        return this._opened ? this.close() : this.open();\n    }\n\n    /** Opens the dropdown. */\n    open(): void {\n        if (this._opened) { return; }\n\n        this.check();\n\n        const overlayRef = this.createOverlay();\n        const overlayConfig = overlayRef.getConfig();\n\n        // Listen for outside click and close the menu when it occurs\n        if (this.dropdown.closeOnOutsideClick) {\n            this.outsidePointerEventsSubscription = overlayRef.outsidePointerEvents().subscribe(() => {\n                if (this.dropdownOpened) {\n                    this.close();\n                }\n            });\n        }\n\n        this.setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\n        overlayConfig.hasBackdrop = this.dropdown.hasBackdrop == null ? !this.triggersNestedDropdown() :\n            this.dropdown.hasBackdrop;\n        overlayRef.attach(this.getPortal());\n\n        if (this.dropdown.lazyContent) {\n            this.dropdown.lazyContent.attach(this.data);\n        }\n\n        this.closeSubscription = this.closingActions().subscribe(() => this.close());\n        this.init();\n\n        if (this.dropdown instanceof McDropdown) {\n            this.dropdown.startAnimation();\n        }\n    }\n\n    /** Closes the dropdown. */\n    close(): void {\n        this.dropdown.closed.emit();\n    }\n\n    /**\n     * Focuses the dropdown trigger.\n     * @param origin Source of the dropdown trigger's focus.\n     */\n    focus(origin: FocusOrigin = 'program') {\n        if (this._focusMonitor) {\n            this._focusMonitor.focusVia(this._element.nativeElement, origin);\n        } else {\n            this._element.nativeElement.focus();\n        }\n    }\n\n    /** Handles mouse presses on the trigger. */\n    handleMousedown(event: MouseEvent): void {\n        // Since right or middle button clicks won't trigger the `click` event,\n        // we shouldn't consider the dropdown as opened by mouse in those cases.\n        this.openedBy = event.button === 0 ? 'mouse' : null;\n\n        // Since clicking on the trigger won't close the dropdown if it opens a nested dropdown,\n        // we should prevent focus from moving onto it via click to avoid the\n        // highlight from lingering on the dropdown item.\n        if (this.triggersNestedDropdown()) {\n            event.preventDefault();\n        }\n    }\n\n    /** Handles key presses on the trigger. */\n    handleKeydown(event: KeyboardEvent): void {\n        // tslint:disable-next-line:deprecation\n        const keyCode = event.key || event.keyCode;\n\n        if (keyCode === SPACE || keyCode === ENTER) {\n            this.open();\n        }\n\n        if (this.triggersNestedDropdown() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n            this.open();\n        }\n    }\n\n    /** Handles click events on the trigger. */\n    handleClick(event: MouseEvent): void {\n        if (this.triggersNestedDropdown()) {\n            // Stop event propagation to avoid closing the parent dropdown.\n            event.stopPropagation();\n            this.open();\n        } else {\n            this.toggle();\n        }\n    }\n\n    /**\n     * Handles touch start events on the trigger.\n     * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n     */\n    private handleTouchStart = () => this.openedBy = 'touch';\n\n    /** Closes the dropdown and does the necessary cleanup. */\n    private destroy() {\n        if (!this.overlayRef || !this.opened) {\n            return;\n        }\n\n        const dropdown = this.dropdown;\n\n        this.closeSubscription.unsubscribe();\n        this.overlayRef.detach();\n\n        if (dropdown instanceof McDropdown) {\n            dropdown.resetAnimation();\n\n            if (dropdown.lazyContent) {\n                // Wait for the exit animation to finish before detaching the content.\n                dropdown.animationDone\n                    .pipe(\n                        filter((event) => event.toState === 'void'),\n                        take(1),\n                        // Interrupt if the content got re-attached.\n                        takeUntil(dropdown.lazyContent.attached)\n                    )\n                    .subscribe({next: () => dropdown.lazyContent.detach(), error: undefined, complete: () => {\n                        // No matter whether the content got re-attached, reset the dropdown.\n                        this.reset();\n                    }});\n            } else {\n                this.reset();\n            }\n        } else {\n            this.reset();\n\n            if (dropdown.lazyContent) {\n                dropdown.lazyContent.detach();\n            }\n        }\n    }\n\n    /**\n     * This method sets the dropdown state to open and focuses the first item if\n     * the dropdown was opened via the keyboard.\n     */\n    private init(): void {\n        this.dropdown.parent = this.triggersNestedDropdown() ? this._parent : undefined;\n        this.dropdown.direction = this.dir;\n        this.setIsOpened(true);\n        this.dropdown.focusFirstItem(this.openedBy || 'program');\n    }\n\n    /**\n     * This method resets the dropdown when it's closed, most importantly restoring\n     * focus to the dropdown trigger if the dropdown was opened via the keyboard.\n     */\n    private reset(): void {\n        this.setIsOpened(false);\n\n        // We should reset focus if the user is navigating using a keyboard or\n        // if we have a top-level trigger which might cause focus to be lost\n        // when clicking on the backdrop.\n        if (!this.openedBy) {\n            // Note that the focus style will show up both for `program` and\n            // `keyboard` so we don't have to specify which one it is.\n            this.focus();\n        } else if (!this.triggersNestedDropdown()) {\n            this.focus(this.openedBy);\n        }\n\n        this.openedBy = null;\n    }\n\n    // set state rather than toggle to support triggers sharing a dropdown\n    private setIsOpened(isOpen: boolean): void {\n        this._opened = isOpen;\n        // tslint:disable-next-line:no-void-expression\n        this._opened ? this.dropdownOpened.emit() : this.dropdownClosed.emit();\n\n        if (this.triggersNestedDropdown()) {\n            this._dropdownItemInstance.highlighted = isOpen;\n        }\n    }\n\n    /**\n     * This method checks that a valid instance of McDropdown has been passed into\n     * mcDropdownTriggerFor. If not, an exception is thrown.\n     */\n    private check() {\n        if (!this.dropdown) {\n            throwMcDropdownMissingError();\n        }\n    }\n\n    /**\n     * This method creates the overlay from the provided dropdown's template and saves its\n     * OverlayRef so that it can be attached to the DOM when open is called.\n     */\n    private createOverlay(): OverlayRef {\n        if (!this.overlayRef) {\n            const config = this.getOverlayConfig();\n            this.subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n            this.overlayRef = this._overlay.create(config);\n\n            // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n            // Ideally we'd also have our keyboard event logic in here, however doing so will\n            // break anybody that may have implemented the `McDropdownPanel` themselves.\n            this.overlayRef.keydownEvents().subscribe();\n        }\n\n        return this.overlayRef;\n    }\n\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @returns OverlayConfig\n     */\n    private getOverlayConfig(): OverlayConfig {\n        return new OverlayConfig({\n            positionStrategy: this._overlay.position()\n                .flexibleConnectedTo(this._element)\n                .withLockedPosition()\n                .withTransformOriginOn('.mc-dropdown__panel'),\n            backdropClass: this.dropdown.backdropClass || 'cdk-overlay-transparent-backdrop',\n            scrollStrategy: this._scrollStrategy(),\n            direction: this._dir\n        });\n    }\n\n    /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the dropdown based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     */\n    private subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n        if (this.dropdown.setPositionClasses) {\n            position.positionChanges.subscribe((change) => {\n                const posX: DropdownPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n                const posY: DropdownPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n                this.dropdown.setPositionClasses!(posX, posY);\n            });\n        }\n    }\n\n    /**\n     * Sets the appropriate positions on a position strategy\n     * so the overlay connects with the trigger correctly.\n     * @param positionStrategy Strategy whose position to update.\n     */\n    private setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n        let [originX, originFallbackX, overlayX, overlayFallbackX]: HorizontalConnectionPos[] =\n            this.dropdown.xPosition === 'before' ?\n                ['end', 'start', 'end', 'start'] :\n                ['start', 'end', 'start', 'end'];\n\n        // tslint:disable-next-line:prefer-const\n        let [overlayY, overlayFallbackY, originY, originFallbackY]: VerticalConnectionPos[] =\n            this.dropdown.yPosition === 'above' ?\n                ['bottom', 'top', 'bottom', 'top'] :\n                ['top', 'bottom', 'top', 'bottom'];\n\n        let offsetY = 0;\n\n        if (this.triggersNestedDropdown()) {\n            // When the dropdown is nested, it should always align itself\n            // to the edges of the trigger, instead of overlapping it.\n            overlayFallbackX = originX = this.dropdown.xPosition === 'before' ? 'start' : 'end';\n            originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n            offsetY = overlayY === 'bottom' ? NESTED_PANEL_TOP_PADDING : -NESTED_PANEL_TOP_PADDING;\n        } else {\n            if (!this.dropdown.overlapTriggerY) {\n                originY = overlayY === 'top' ? 'bottom' : 'top';\n                originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n            }\n\n            if (!this.dropdown.overlapTriggerX) {\n                overlayFallbackX = originX = this.dropdown.xPosition === 'before' ? 'start' : 'end';\n                originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n            }\n        }\n\n        positionStrategy.withPositions([\n            { originX, originY, overlayX, overlayY, offsetY },\n            { originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY },\n            {\n                originX,\n                originY: originFallbackY,\n                overlayX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY\n            },\n            {\n                originX: originFallbackX,\n                originY: originFallbackY,\n                overlayX: overlayFallbackX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY\n            }\n        ]);\n    }\n\n    /** Cleans up the active subscriptions. */\n    private cleanUpSubscriptions(): void {\n        this.closeSubscription.unsubscribe();\n        this.hoverSubscription.unsubscribe();\n        this.outsidePointerEventsSubscription.unsubscribe();\n    }\n\n    /** Returns a stream that emits whenever an action that should close the dropdown occurs. */\n    private closingActions() {\n        const backdrop = this.overlayRef!.backdropClick();\n        const detachments = this.overlayRef!.detachments();\n        const parentClose = this._parent ? this._parent.closed : observableOf();\n        const hover = this._parent ? this._parent.hovered().pipe(\n            filter((active) => active !== this._dropdownItemInstance),\n            filter(() => this._opened)\n        ) : observableOf();\n\n        return merge(backdrop, parentClose, hover, detachments);\n    }\n\n    /** Handles the cases where the user hovers over the trigger. */\n    private handleHover() {\n        // Subscribe to changes in the hovered item in order to toggle the panel.\n        if (!this.triggersNestedDropdown()) {\n            return;\n        }\n\n        this.hoverSubscription = this._parent.hovered()\n        // Since we might have multiple competing triggers for the same dropdown (e.g. a nested dropdown\n        // with different data and triggers), we have to delay it by a tick to ensure that\n        // it won't be closed immediately after it is opened.\n            .pipe(\n                filter((active) => active === this._dropdownItemInstance && !active.disabled),\n                delay(0, asapScheduler)\n            )\n            .subscribe(() => {\n                this.openedBy = 'mouse';\n\n                // If the same dropdown is used between multiple triggers, it might still be animating\n                // while the new trigger tries to re-open it. Wait for the animation to finish\n                // before doing so. Also interrupt if the user moves to another item.\n                if (this.dropdown instanceof McDropdown && this.dropdown.isAnimating) {\n                    // We need the `delay(0)` here in order to avoid\n                    // 'changed after checked' errors in some cases. See #12194.\n                    this.dropdown.animationDone\n                        .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parent.hovered()))\n                        .subscribe(() => this.open());\n                } else {\n                    this.open();\n                }\n            });\n    }\n\n    /** Gets the portal that should be attached to the overlay. */\n    private getPortal(): TemplatePortal {\n        // Note that we can avoid this check by keeping the portal on the dropdown panel.\n        // While it would be cleaner, we'd have to introduce another required method on\n        // `McDropdownPanel`, making it harder to consume.\n        if (!this.portal || this.portal.templateRef !== this.dropdown.templateRef) {\n            this.portal = new TemplatePortal(this.dropdown.templateRef, this._viewContainerRef);\n        }\n\n        return this.portal;\n    }\n\n}\n","import { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McDropdownContent } from './dropdown-content';\nimport { McDropdownItem } from './dropdown-item';\nimport { MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER, McDropdownTrigger } from './dropdown-trigger';\nimport { McDropdown } from './dropdown.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        McIconModule\n    ],\n    exports: [McDropdown, McDropdownItem, McDropdownTrigger, McDropdownContent],\n    declarations: [McDropdown, McDropdownItem, McDropdownTrigger, McDropdownContent],\n    providers: [MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class McDropdownModule {}\n"]}