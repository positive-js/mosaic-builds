{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@ptsecurity/mosaic/dropdown/dropdown-content.ts","ng://@ptsecurity/mosaic/dropdown/dropdown-panel.ts","ng://@ptsecurity/mosaic/dropdown/dropdown-item.ts","ng://@ptsecurity/mosaic/dropdown/dropdown-errors.ts","ng://@ptsecurity/mosaic/dropdown/dropdown-animations.ts","ng://@ptsecurity/mosaic/dropdown/dropdown.component.ts","ng://@ptsecurity/mosaic/dropdown/dropdown-trigger.ts","ng://@ptsecurity/mosaic/dropdown/dropdown.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","McDropdownContent","_template","_componentFactoryResolver","_appRef","_injector","_viewContainerRef","_document","this","attached","Subject","prototype","attach","context","portal","TemplatePortal","detach","outlet","DomPortalOutlet","createElement","element","elementRef","nativeElement","insertBefore","outletElement","isAttached","ngOnDestroy","dispose","Directive","args","selector","TemplateRef","ComponentFactoryResolver","ApplicationRef","Injector","ViewContainerRef","Inject","DOCUMENT","MC_DROPDOWN_PANEL","InjectionToken","McDropdownItemMixinBase","mixinDisabled","McDropdownItemBase","McDropdownItem","_elementRef","_focusMonitor","document","_parentDropdownPanel","_this","_super","role","hovered","highlighted","triggersNestedDropdown","monitor","addItem","__","constructor","create","__extends","focus","origin","focusVia","getHostElement","stopMonitoring","removeItem","complete","getTabIndex","disabled","checkDisabled","event","preventDefault","stopPropagation","handleMouseEnter","getLabel","content","textNodeType","TEXT_NODE","output","childNodes","length_1","length","nodeType","textContent","trim","Component","exportAs","inputs","host","class","[class.mc-dropdown__item_highlighted]","[attr.role]","[attr.tabindex]","[class.mc-disabled]","(click)","(mouseenter)","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","template","ElementRef","FocusMonitor","Optional","type","Input","ViewChild","static","throwMcDropdownMissingError","Error","throwMcDropdownInvalidPositionX","throwMcDropdownInvalidPositionY","mcDropdownAnimations","transformDropdown","trigger","state","style","opacity","transform","transition","group","query","animate","fadeInItems","MC_DROPDOWN_DEFAULT_OPTIONS","providedIn","factory","MC_DROPDOWN_DEFAULT_OPTIONS_FACTORY","overlapTriggerX","overlapTriggerY","xPosition","yPosition","backdropClass","McDropdown","_ngZone","_defaultOptions","_xPosition","_yPosition","_overlapTriggerX","_overlapTriggerY","_hasBackdrop","hasBackdrop","classList","panelAnimationState","animationDone","closed","EventEmitter","itemsArray","itemChanges","tabSubscription","Subscription","EMPTY","defineProperty","setPositionClasses","coerceBooleanProperty","classes","previousPanelClass","split","forEach","className","ngOnInit","ngAfterContentInit","keyManager","FocusKeyManager","items","withWrap","withTypeAhead","tabOut","subscribe","emit","unsubscribe","pipe","startWith","switchMap","merge","apply","arguments","concat","__spread","map","item","handleKeydown","keyCode","ESCAPE","LEFT_ARROW","parent","direction","RIGHT_ARROW","UP_ARROW","DOWN_ARROW","setFocusOrigin","onKeydown","handleClick","focusFirstItem","lazyContent","onStable","asObservable","take","setFirstItemActive","resetActiveItem","setActiveItem","indexOf","index","splice","posX","posY","startAnimation","resetAnimation","onAnimationDone","isAnimating","onAnimationStart","toState","activeItemIndex","scrollTop","animations","providers","provide","useExisting","NgZone","ContentChildren","ContentChild","Output","MC_DROPDOWN_SCROLL_STRATEGY","MC_DROPDOWN_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","Overlay","useFactory","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","McDropdownTrigger","_overlay","_element","_scrollStrategy","_parent","_dropdownItemInstance","_dir","openedBy","dropdownOpened","dropdownClosed","_opened","overlayRef","closeSubscription","hoverSubscription","handleTouchStart","addEventListener","_dropdown","dropdown","reason","destroy","check","handleHover","removeEventListener","cleanUpSubscriptions","toggle","close","open","createOverlay","overlayConfig","getConfig","setPosition","getPortal","data","closingActions","init","handleMousedown","button","key","SPACE","ENTER","dir","opened","filter","takeUntil","undefined","reset","setIsOpened","isOpen","config","getOverlayConfig","subscribeToPositions","keydownEvents","OverlayConfig","positionStrategy","position","flexibleConnectedTo","withLockedPosition","withTransformOriginOn","scrollStrategy","positionChanges","change","connectionPair","overlayX","overlayY","_a","originX","originFallbackX","overlayFallbackX","_b","overlayFallbackY","originY","originFallbackY","offsetY","withPositions","backdrop","backdropClick","detachments","parentClose","observableOf","hover","active","delay","asapScheduler","templateRef","aria-haspopup","[attr.aria-expanded]","(mousedown)","(keydown)","decorators","Self","Directionality","McDropdownModule","NgModule","imports","CommonModule","OverlayModule","McIconModule","exports","declarations"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { TemplatePortal, DomPortalOutlet } from '@angular/cdk/portal';\nimport { DOCUMENT } from '@angular/common';\nimport {\n    Directive,\n    TemplateRef,\n    ComponentFactoryResolver,\n    ApplicationRef,\n    Injector,\n    ViewContainerRef,\n    Inject,\n    OnDestroy\n} from '@angular/core';\nimport { Subject } from 'rxjs';\n\n\n/**\n * Dropdown content that will be rendered lazily once the dropdown is opened.\n */\n@Directive({\n    selector: 'ng-template[mcDropdownContent]'\n})\nexport class McDropdownContent implements OnDestroy {\n\n    /** Emits when the dropdown content has been attached. */\n    attached = new Subject<void>();\n    private portal: TemplatePortal;\n    private outlet: DomPortalOutlet;\n\n    constructor(\n        private _template: TemplateRef<any>,\n        private _componentFactoryResolver: ComponentFactoryResolver,\n        private _appRef: ApplicationRef,\n        private _injector: Injector,\n        private _viewContainerRef: ViewContainerRef,\n        @Inject(DOCUMENT) private _document: any\n    ) {}\n\n    /**\n     * Attaches the content with a particular context.\n     * @docs-private\n     */\n    attach(context: any = {}) {\n        if (!this.portal) {\n            this.portal = new TemplatePortal(this._template, this._viewContainerRef);\n        }\n\n        this.detach();\n\n        if (!this.outlet) {\n            this.outlet = new DomPortalOutlet(\n                this._document.createElement('div'),\n                this._componentFactoryResolver,\n                this._appRef,\n                this._injector\n            );\n        }\n\n        const element: HTMLElement = this._template.elementRef.nativeElement;\n\n        // Because we support opening the same dropdown from different triggers (which in turn have their\n        // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n        // risk it staying attached to a pane that's no longer in the DOM.\n        element.parentNode!.insertBefore(this.outlet.outletElement, element);\n        this.portal.attach(this.outlet, context);\n        this.attached.next();\n    }\n\n    /**\n     * Detaches the content.\n     * @docs-private\n     */\n    detach() {\n        if (this.portal.isAttached) {\n            this.portal.detach();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.outlet) {\n            this.outlet.dispose();\n        }\n    }\n}\n","import { FocusOrigin } from '@angular/cdk/a11y';\nimport { Direction } from '@angular/cdk/bidi';\nimport { EventEmitter, TemplateRef, InjectionToken } from '@angular/core';\n\nimport { McDropdownContent } from './dropdown-content';\nimport { DropdownPositionX, DropdownPositionY } from './dropdown-positions';\n\n\n/**\n * Injection token used to provide the parent dropdown to dropdown-specific components.\n * @docs-private\n */\nexport const MC_DROPDOWN_PANEL = new InjectionToken<McDropdownPanel>('MC_DROPDOWN_PANEL');\n\n/**\n * Interface for a custom dropdown panel that can be used with `mcDropdownTriggerFor`.\n * @docs-private\n */\n// tslint:disable-next-line:naming-convention\nexport interface McDropdownPanel<T = any> {\n    xPosition: DropdownPositionX;\n    yPosition: DropdownPositionY;\n    overlapTriggerX: boolean;\n    overlapTriggerY: boolean;\n    templateRef: TemplateRef<any>;\n    closed: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n    parent?: McDropdownPanel | undefined;\n    direction?: Direction;\n    lazyContent?: McDropdownContent;\n    backdropClass?: string;\n    hasBackdrop?: boolean;\n    focusFirstItem(origin?: FocusOrigin): void;\n    resetActiveItem(): void;\n    setPositionClasses?(x: DropdownPositionX, y: DropdownPositionY): void;\n    addItem?(item: T): void;\n    removeItem?(item: T): void;\n}\n","import { FocusMonitor, FocusOrigin } from '@angular/cdk/a11y';\nimport { DOCUMENT } from '@angular/common';\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    OnDestroy,\n    ViewEncapsulation,\n    Inject,\n    Optional,\n    Input,\n    ViewChild\n} from '@angular/core';\nimport { IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { CanDisable, CanDisableCtor, mixinDisabled } from '@ptsecurity/mosaic/core';\nimport { Subject } from 'rxjs';\n\nimport { MC_DROPDOWN_PANEL, McDropdownPanel } from './dropdown-panel';\n\n\n// Boilerplate for applying mixins to McDropdownItem.\n/** @docs-private */\nexport class McDropdownItemBase {}\n// tslint:disable-next-line:naming-convention\nexport const McDropdownItemMixinBase: CanDisableCtor & typeof McDropdownItemBase =\n    mixinDisabled(McDropdownItemBase);\n\n/**\n * This directive is intended to be used inside an mc-dropdown tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n    selector: 'mc-dropdown-item, [mc-dropdown-item]',\n    exportAs: 'mcDropdownItem',\n    inputs: ['disabled'],\n    host: {\n        class: 'mc-dropdown__item',\n        '[class.mc-dropdown__item_highlighted]': 'highlighted',\n        '[attr.role]': 'role',\n        '[attr.tabindex]': 'getTabIndex()',\n        '[class.mc-disabled]': 'disabled',\n        '(click)': 'checkDisabled($event)',\n        '(mouseenter)': 'handleMouseEnter()'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    template: `\n        <div #content>\n            <ng-content></ng-content>\n        </div>\n        <i *ngIf=\"triggersNestedDropdown\" mc-icon=\"mc-angle-right-M_16\" class=\"mc-dropdown__trigger\"></i>\n    `\n})\nexport class McDropdownItem extends McDropdownItemMixinBase implements IFocusableOption, CanDisable, OnDestroy {\n\n    /** ARIA role for the dropdown item. */\n    @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n    @ViewChild('content', { static: false }) content;\n\n    /** Stream that emits when the dropdown item is hovered. */\n    readonly hovered: Subject<McDropdownItem> = new Subject<McDropdownItem>();\n\n    /** Whether the dropdown item is highlighted. */\n    highlighted: boolean = false;\n\n    /** Whether the dropdown item acts as a trigger for a nested dropdown. */\n    triggersNestedDropdown: boolean = false;\n\n    constructor(\n        private _elementRef: ElementRef<HTMLElement>,\n        private _focusMonitor: FocusMonitor,\n        @Inject(DOCUMENT) private document: any,\n        @Optional() @Inject(MC_DROPDOWN_PANEL) private _parentDropdownPanel?: McDropdownPanel<McDropdownItem>\n    ) {\n        super();\n\n        if (_focusMonitor) {\n            // Start monitoring the element so it gets the appropriate focused classes. We want\n            // to show the focus style for dropdown items only when the focus was not caused by a\n            // mouse or touch interaction.\n            _focusMonitor.monitor(this._elementRef.nativeElement, false);\n        }\n\n        if (_parentDropdownPanel && _parentDropdownPanel.addItem) {\n            _parentDropdownPanel.addItem(this);\n        }\n    }\n\n    /** Focuses the dropdown item. */\n    focus(origin: FocusOrigin = 'program'): void {\n        if (this._focusMonitor) {\n            this._focusMonitor.focusVia(this.getHostElement(), origin);\n        } else {\n            this.getHostElement().focus();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._focusMonitor) {\n            this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n\n        if (this._parentDropdownPanel && this._parentDropdownPanel.removeItem) {\n            this._parentDropdownPanel.removeItem(this);\n        }\n\n        this.hovered.complete();\n    }\n\n    /** Used to set the `tabindex`. */\n    getTabIndex(): string {\n        return this.disabled ? '-1' : '0';\n    }\n\n    /** Returns the host DOM element. */\n    getHostElement(): HTMLElement {\n        return this._elementRef.nativeElement;\n    }\n\n    /** Prevents the default element actions if it is disabled. */\n    checkDisabled(event: MouseEvent): void {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    /** Emits to the hover stream. */\n    handleMouseEnter() {\n        this.hovered.next(this);\n    }\n\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel(): string {\n        const element: HTMLElement = this.content.nativeElement;\n        // tslint:disable-next-line:no-magic-numbers\n        const textNodeType = this.document ? this.document.TEXT_NODE : 3;\n        let output = '';\n\n        if (element.childNodes) {\n            const length = element.childNodes.length;\n\n            // Go through all the top-level text nodes and extract their text.\n            // We skip anything that's not a text node to prevent the text from\n            // being thrown off by something like an icon.\n            for (let i = 0; i < length; i++) {\n                if (element.childNodes[i].nodeType === textNodeType) {\n                    output += element.childNodes[i].textContent;\n                }\n            }\n        }\n\n        return output.trim();\n    }\n}\n","/**\n * Throws an exception for the case when dropdown trigger doesn't have a valid mc-dropdown instance\n * @docs-private\n */\nexport function throwMcDropdownMissingError() {\n    throw Error(`mcDropdownTriggerFor: must pass in an mc-dropdown instance.\n    Example:\n      <mc-dropdown #dropdown=\"mcDropdown\"></mc-dropdown>\n      <button [mcDropdownTriggerFor]=\"dropdown\"></button>`);\n}\n\n/**\n * Throws an exception for the case when dropdown's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMcDropdownInvalidPositionX() {\n    throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mc-dropdown xPosition=\"before\" #dropdown=\"mcDropdown\"></mc-dropdown>`);\n}\n\n/**\n * Throws an exception for the case when dropdown's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMcDropdownInvalidPositionY() {\n    throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mc-dropdown yPosition=\"above\" #dropdown=\"mcDropdown\"></mc-dropdown>`);\n}\n","import {\n    trigger,\n    state,\n    style,\n    animate,\n    transition,\n    query,\n    group,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n\n/**\n * Animations used by the mc-dropdown component.\n * @docs-private\n */\nexport const mcDropdownAnimations: {\n    readonly transformDropdown: AnimationTriggerMetadata;\n    readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n    /**\n     * This animation controls the dropdown panel's entry and exit from the page.\n     *\n     * When the dropdown panel is added to the DOM, it scales in and fades in its border.\n     *\n     * When the dropdown panel is removed from the DOM, it simply fades out after a brief\n     * delay to display the ripple.\n     */\n    transformDropdown: trigger('transformDropdown', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(0.8)'\n        })),\n        transition('void => enter', group([\n            query('.mc-dropdown__content', animate('50ms linear', style({opacity: 1}))),\n            animate('50ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'}))\n        ])),\n        transition('* => void', animate('50ms 25ms linear', style({opacity: 0})))\n    ]),\n\n\n    /**\n     * This animation fades in the background color and content of the dropdown panel\n     * after its containing element is scaled in.\n     */\n    fadeInItems: trigger('fadeInItems', [\n        // now. Remove next time we do breaking changes.\n        state('showing', style({opacity: 1})),\n        transition('void => *', [\n            style({opacity: 0}),\n            animate('200ms 60ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n\nexport const fadeInItems = mcDropdownAnimations.fadeInItems;\n\nexport const transformDropdown = mcDropdownAnimations.transformDropdown;\n","import { AnimationEvent } from '@angular/animations';\nimport { FocusOrigin } from '@angular/cdk/a11y';\nimport { Direction } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChild,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    Output,\n    TemplateRef,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    OnInit\n} from '@angular/core';\nimport { FocusKeyManager } from '@ptsecurity/cdk/a11y';\nimport { ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW } from '@ptsecurity/cdk/keycodes';\nimport { merge, Observable, Subject, Subscription } from 'rxjs';\nimport { startWith, switchMap, take } from 'rxjs/operators';\n\nimport { mcDropdownAnimations } from './dropdown-animations';\nimport { McDropdownContent } from './dropdown-content';\nimport { throwMcDropdownInvalidPositionX, throwMcDropdownInvalidPositionY } from './dropdown-errors';\nimport { McDropdownItem } from './dropdown-item';\nimport { MC_DROPDOWN_PANEL, McDropdownPanel } from './dropdown-panel';\nimport { DropdownPositionX, DropdownPositionY } from './dropdown-positions';\n\n\n/** Default `mc-dropdown` options that can be overridden. */\n// tslint:disable-next-line:naming-convention\nexport interface McDropdownDefaultOptions {\n    /** The x-axis position of the dropdown. */\n    xPosition: DropdownPositionX;\n\n    /** The y-axis position of the dropdown. */\n    yPosition: DropdownPositionY;\n\n    /** Whether the dropdown should overlap the dropdown trigger horizontally. */\n    overlapTriggerX: boolean;\n\n    /** Whether the dropdown should overlap the dropdown trigger vertically. */\n    overlapTriggerY: boolean;\n\n    /** Class to be applied to the dropdown's backdrop. */\n    backdropClass: string;\n\n    /** Whether the dropdown has a backdrop. */\n    hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mc-dropdown`. */\nexport const MC_DROPDOWN_DEFAULT_OPTIONS =\n    new InjectionToken<McDropdownDefaultOptions>('mc-dropdown-default-options', {\n        providedIn: 'root',\n        factory: MC_DROPDOWN_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\n// tslint:disable-next-line:naming-convention\nexport function MC_DROPDOWN_DEFAULT_OPTIONS_FACTORY(): McDropdownDefaultOptions {\n    return {\n        overlapTriggerX: true,\n        overlapTriggerY: false,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop'\n    };\n}\n\n@Component({\n    selector: 'mc-dropdown',\n    exportAs: 'mcDropdown',\n    templateUrl: 'dropdown.html',\n    styleUrls: ['dropdown.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    animations: [\n        mcDropdownAnimations.transformDropdown,\n        mcDropdownAnimations.fadeInItems\n    ],\n    providers: [\n        { provide: MC_DROPDOWN_PANEL, useExisting: McDropdown }\n    ]\n})\nexport class McDropdown implements AfterContentInit, McDropdownPanel<McDropdownItem>, OnInit, OnDestroy {\n\n    /** Position of the dropdown in the X axis. */\n    @Input()\n    get xPosition(): DropdownPositionX {\n        return this._xPosition;\n    }\n\n    set xPosition(value: DropdownPositionX) {\n        if (value !== 'before' && value !== 'after') {\n            throwMcDropdownInvalidPositionX();\n        }\n        this._xPosition = value;\n        this.setPositionClasses();\n    }\n\n    /** Position of the dropdown in the Y axis. */\n    @Input()\n    get yPosition(): DropdownPositionY {\n        return this._yPosition;\n    }\n\n    set yPosition(value: DropdownPositionY) {\n        if (value !== 'above' && value !== 'below') {\n            throwMcDropdownInvalidPositionY();\n        }\n        this._yPosition = value;\n        this.setPositionClasses();\n    }\n\n    /** Whether the dropdown should overlap its trigger vertically. */\n    @Input()\n    get overlapTriggerY(): boolean {\n        return this._overlapTriggerY;\n    }\n\n    set overlapTriggerY(value: boolean) {\n        this._overlapTriggerY = coerceBooleanProperty(value);\n    }\n\n    /** Whether the dropdown should overlap its trigger horizontally. */\n    @Input()\n    get overlapTriggerX(): boolean {\n        return this._overlapTriggerX;\n    }\n\n    set overlapTriggerX(value: boolean) {\n        this._overlapTriggerX = coerceBooleanProperty(value);\n    }\n\n    /** Whether the dropdown has a backdrop. */\n    @Input()\n    get hasBackdrop(): boolean | undefined {\n        return this._hasBackdrop;\n    }\n\n    set hasBackdrop(value: boolean | undefined) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n\n    /**\n     * This method takes classes set on the host mc-dropdown element and applies them on the\n     * dropdown template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing dropdown from outside the component.\n     * @param classes list of class names\n     */\n    @Input('class')\n    set panelClass(classes: string) {\n        const previousPanelClass = this.previousPanelClass;\n\n        if (previousPanelClass && previousPanelClass.length) {\n            previousPanelClass.split(' ').forEach((className: string) => {\n                this.classList[className] = false;\n            });\n        }\n\n        this.previousPanelClass = classes;\n\n        if (classes && classes.length) {\n            classes.split(' ').forEach((className: string) => {\n                this.classList[className] = true;\n            });\n\n            this._elementRef.nativeElement.className = '';\n        }\n    }\n    private _xPosition: DropdownPositionX = this._defaultOptions.xPosition;\n    private _yPosition: DropdownPositionY = this._defaultOptions.yPosition;\n    private _overlapTriggerX: boolean = this._defaultOptions.overlapTriggerX;\n    private _overlapTriggerY: boolean = this._defaultOptions.overlapTriggerY;\n    private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n    /** Config object to be passed into the dropdown's ngClass */\n    classList: { [key: string]: boolean } = {};\n\n    /** Current state of the panel animation. */\n    panelAnimationState: 'void' | 'enter' = 'void';\n\n    /** Emits whenever an animation on the dropdown completes. */\n    animationDone = new Subject<AnimationEvent>();\n\n    /** Whether the dropdown is animating. */\n    isAnimating: boolean;\n\n    /** Parent dropdown of the current dropdown panel. */\n    parent: McDropdownPanel | undefined;\n\n    /** Layout direction of the dropdown. */\n    direction: Direction;\n\n    /** Class to be added to the backdrop element. */\n    @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n    /** @docs-private */\n    @ViewChild(TemplateRef, {static: false}) templateRef: TemplateRef<any>;\n\n    /**\n     * List of the items inside of a dropdown.\n     */\n    @ContentChildren(McDropdownItem) items: QueryList<McDropdownItem>;\n\n    /**\n     * Dropdown content that will be rendered lazily.\n     * @docs-private\n     */\n    @ContentChild(McDropdownContent, {static: false}) lazyContent: McDropdownContent;\n\n    /** Event emitted when the dropdown is closed. */\n    @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n        new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n    private previousPanelClass: string;\n\n    private keyManager: FocusKeyManager<McDropdownItem>;\n\n    /** Dropdown items inside the current dropdown. */\n    private itemsArray: McDropdownItem[] = [];\n\n    /** Emits whenever the amount of dropdown items changes. */\n    private itemChanges = new Subject<McDropdownItem[]>();\n\n    /** Subscription to tab events on the dropdown panel */\n    private tabSubscription = Subscription.EMPTY;\n\n    constructor(\n        private _elementRef: ElementRef<HTMLElement>,\n        private _ngZone: NgZone,\n        @Inject(MC_DROPDOWN_DEFAULT_OPTIONS) private _defaultOptions: McDropdownDefaultOptions) { }\n\n    ngOnInit() {\n        this.setPositionClasses();\n    }\n\n    ngAfterContentInit() {\n        this.keyManager = new FocusKeyManager<McDropdownItem>(this.items).withWrap().withTypeAhead();\n        this.tabSubscription = this.keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n    }\n\n    ngOnDestroy() {\n        this.tabSubscription.unsubscribe();\n        this.closed.complete();\n    }\n\n    /** Stream that emits whenever the hovered dropdown item changes. */\n    hovered(): Observable<McDropdownItem> {\n        return this.itemChanges.pipe(\n            startWith(this.itemsArray),\n            switchMap((items) => merge(...items.map((item) => item.hovered)))\n        );\n    }\n\n    /** Handle a keyboard event from the dropdown, delegating to the appropriate action. */\n    handleKeydown(event: KeyboardEvent) {\n        // tslint:disable-next-line:deprecation\n        const keyCode = event.keyCode;\n\n        switch (keyCode) {\n            case ESCAPE:\n                this.closed.emit('keydown');\n                break;\n            case LEFT_ARROW:\n                if (this.parent && this.direction === 'ltr') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            case RIGHT_ARROW:\n                if (this.parent && this.direction === 'rtl') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            default:\n                if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n                    this.keyManager.setFocusOrigin('keyboard');\n                }\n\n                this.keyManager.onKeydown(event);\n        }\n    }\n\n    handleClick() {\n        this.closed.emit('click');\n    }\n\n    /**\n     * Focus the first item in the dropdown.\n     * @param origin Action from which the focus originated. Used to set the correct styling.\n     */\n    focusFirstItem(origin: FocusOrigin = 'program'): void {\n        // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n        if (this.lazyContent) {\n            this._ngZone.onStable.asObservable()\n                .pipe(take(1))\n                .subscribe(() => this.keyManager.setFocusOrigin(origin).setFirstItemActive());\n        } else {\n            this.keyManager.setFocusOrigin(origin).setFirstItemActive();\n        }\n    }\n\n    /**\n     * Resets the active item in the dropdown. This is used when the dropdown is opened, allowing\n     * the user to start from the first option when pressing the down arrow.\n     */\n    resetActiveItem() {\n        this.keyManager.setActiveItem(-1);\n    }\n\n    /**\n     * Registers a dropdown item with the dropdown.\n     * @docs-private\n     */\n    addItem(item: McDropdownItem) {\n        // We register the items through this method, rather than picking them up through\n        // `ContentChildren`, because we need the items to be picked up by their closest\n        // `mc-dropdown` ancestor. If we used `@ContentChildren(McDropdownItem, {descendants: true})`,\n        // all descendant items will bleed into the top-level dropdown in the case where the consumer\n        // has `mc-dropdown` instances nested inside each other.\n        if (this.itemsArray.indexOf(item) === -1) {\n            this.itemsArray.push(item);\n            this.itemChanges.next(this.itemsArray);\n        }\n    }\n\n    /**\n     * Removes an item from the dropdown.\n     * @docs-private\n     */\n    removeItem(item: McDropdownItem) {\n        const index = this.itemsArray.indexOf(item);\n\n        if (this.itemsArray.indexOf(item) > -1) {\n            this.itemsArray.splice(index, 1);\n            this.itemChanges.next(this.itemsArray);\n        }\n    }\n\n    /**\n     * Adds classes to the dropdown panel based on its position. Can be used by\n     * consumers to add specific styling based on the position.\n     * @param posX Position of the dropdown along the x axis.\n     * @param posY Position of the dropdown along the y axis.\n     * @docs-private\n     */\n    setPositionClasses(posX: DropdownPositionX = this.xPosition, posY: DropdownPositionY = this.yPosition) {\n        const classes = this.classList;\n        classes['mc-dropdown-before'] = posX === 'before';\n        classes['mc-dropdown-after'] = posX === 'after';\n        classes['mc-dropdown-above'] = posY === 'above';\n        classes['mc-dropdown-below'] = posY === 'below';\n    }\n\n    /** Starts the enter animation. */\n    startAnimation() {\n        this.panelAnimationState = 'enter';\n    }\n\n    /** Resets the panel animation to its initial state. */\n    resetAnimation() {\n        this.panelAnimationState = 'void';\n    }\n\n    /** Callback that is invoked when the panel animation completes. */\n    onAnimationDone(event: AnimationEvent) {\n        this.animationDone.next(event);\n        this.isAnimating = false;\n    }\n\n    onAnimationStart(event: AnimationEvent) {\n        this.isAnimating = true;\n\n        // Scroll the content element to the top as soon as the animation starts. This is necessary,\n        // because we move focus to the first item while it's still being animated, which can throw\n        // the browser off when it determines the scroll position. Alternatively we can move focus\n        // when the animation is done, however moving focus asynchronously will interrupt screen\n        // readers which are in the process of reading out the dropdown already. We take the `element`\n        // from the `event` since we can't use a `ViewChild` to access the pane.\n        if (event.toState === 'enter' && this.keyManager.activeItemIndex === 0) {\n            event.element.scrollTop = 0;\n        }\n    }\n}\n","import { FocusMonitor, FocusOrigin } from '@angular/cdk/a11y';\nimport { Direction, Directionality } from '@angular/cdk/bidi';\nimport {\n    FlexibleConnectedPositionStrategy,\n    HorizontalConnectionPos,\n    Overlay,\n    OverlayConfig,\n    OverlayRef,\n    VerticalConnectionPos,\n    ScrollStrategy\n} from '@angular/cdk/overlay';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport {\n    AfterContentInit,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    Self,\n    ViewContainerRef\n} from '@angular/core';\nimport { LEFT_ARROW, RIGHT_ARROW, SPACE, ENTER } from '@ptsecurity/cdk/keycodes';\nimport { asapScheduler, merge, of as observableOf, Subscription } from 'rxjs';\nimport { delay, filter, take, takeUntil } from 'rxjs/operators';\n\nimport { throwMcDropdownMissingError } from './dropdown-errors';\nimport { McDropdownItem } from './dropdown-item';\nimport { McDropdownPanel } from './dropdown-panel';\nimport { DropdownPositionX, DropdownPositionY } from './dropdown-positions';\nimport { McDropdown } from './dropdown.component';\n\n\n/** Injection token that determines the scroll handling while the dropdown is open. */\nexport const MC_DROPDOWN_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mc-dropdown-scroll-strategy');\n\n/** @docs-private */\n// tslint:disable-next-line:naming-convention\nexport function MC_DROPDOWN_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_DROPDOWN_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_DROPDOWN_SCROLL_STRATEGY_FACTORY\n};\n\n/** Default top padding of the nested dropdown panel. */\nexport const NESTED_PANEL_TOP_PADDING = 2;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * This directive is intended to be used in conjunction with an mc-dropdown tag.  It is\n * responsible for toggling the display of the provided dropdown instance.\n */\n@Directive({\n    selector: `[mcDropdownTriggerFor]`,\n    host: {\n        'aria-haspopup': 'true',\n        '[attr.aria-expanded]': 'opened || null',\n        '(mousedown)': 'handleMousedown($event)',\n        '(keydown)': 'handleKeydown($event)',\n        '(click)': 'handleClick($event)'\n    },\n    exportAs: 'mcDropdownTrigger'\n})\nexport class McDropdownTrigger implements AfterContentInit, OnDestroy {\n\n    /** The text direction of the containing app. */\n    get dir(): Direction {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n\n\n    /** References the dropdown instance that the trigger is associated with. */\n    @Input('mcDropdownTriggerFor')\n    get dropdown() {\n        return this._dropdown;\n    }\n\n    set dropdown(dropdown: McDropdownPanel) {\n        if (dropdown === this._dropdown) { return; }\n\n        this._dropdown = dropdown;\n        this.closeSubscription.unsubscribe();\n\n        if (dropdown) {\n            this.closeSubscription = dropdown.closed.asObservable().subscribe((reason) => {\n                this.destroy();\n\n                // If a click closed the dropdown, we should close the entire chain of nested dropdowns.\n                if ((reason === 'click' || reason === 'tab') && this._parent) {\n                    this._parent.closed.emit(reason);\n                }\n            });\n        }\n    }\n\n    // Tracking input type is necessary so it's possible to only auto-focus\n    // the first item of the list when the dropdown is opened via the keyboard\n    openedBy: 'mouse' | 'touch' | null = null;\n\n    /** Data to be passed along to any lazily-rendered content. */\n    @Input('mcDropdownTriggerData') data: any;\n\n    /** Event emitted when the associated dropdown is opened. */\n    @Output() readonly dropdownOpened: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Event emitted when the associated dropdown is closed. */\n    @Output() readonly dropdownClosed: EventEmitter<void> = new EventEmitter<void>();\n\n    private _dropdown: McDropdownPanel;\n\n    /** Whether the dropdown is open. */\n    get opened(): boolean {\n        return this._opened;\n    }\n\n    private _opened: boolean = false;\n\n    private portal: TemplatePortal;\n\n    private overlayRef: OverlayRef | null = null;\n\n    private closeSubscription = Subscription.EMPTY;\n\n    private hoverSubscription = Subscription.EMPTY;\n\n    constructor(private _overlay: Overlay,\n                private _element: ElementRef<HTMLElement>,\n                private _viewContainerRef: ViewContainerRef,\n                @Inject(MC_DROPDOWN_SCROLL_STRATEGY) private _scrollStrategy: any,\n                @Optional() private _parent: McDropdown,\n                @Optional() @Self() private _dropdownItemInstance: McDropdownItem,\n                @Optional() private _dir: Directionality,\n                private _focusMonitor?: FocusMonitor) {\n\n        _element.nativeElement.addEventListener('touchstart', this.handleTouchStart,\n            passiveEventListenerOptions);\n\n        if (_dropdownItemInstance) {\n            _dropdownItemInstance.triggersNestedDropdown = this.triggersNestedDropdown();\n        }\n    }\n\n    ngAfterContentInit() {\n        this.check();\n        this.handleHover();\n    }\n\n    ngOnDestroy() {\n        if (this.overlayRef) {\n            this.overlayRef.dispose();\n            this.overlayRef = null;\n        }\n\n        this._element.nativeElement.removeEventListener('touchstart', this.handleTouchStart,\n            passiveEventListenerOptions);\n\n        this.cleanUpSubscriptions();\n        this.closeSubscription.unsubscribe();\n    }\n\n    /** Whether the dropdown triggers a nested dropdown or a top-level one. */\n    triggersNestedDropdown(): boolean {\n        return !!(this._dropdownItemInstance && this._parent);\n    }\n\n    /** Toggles the dropdown between the open and closed states. */\n    toggle(): void {\n        // tslint:disable-next-line:no-void-expression\n        return this._opened ? this.close() : this.open();\n    }\n\n    /** Opens the dropdown. */\n    open(): void {\n        if (this._opened) { return; }\n\n        this.check();\n\n        const overlayRef = this.createOverlay();\n        const overlayConfig = overlayRef.getConfig();\n\n        this.setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\n        overlayConfig.hasBackdrop = this.dropdown.hasBackdrop == null ? !this.triggersNestedDropdown() :\n            this.dropdown.hasBackdrop;\n        overlayRef.attach(this.getPortal());\n\n        if (this.dropdown.lazyContent) {\n            this.dropdown.lazyContent.attach(this.data);\n        }\n\n        this.closeSubscription = this.closingActions().subscribe(() => this.close());\n        this.init();\n\n        if (this.dropdown instanceof McDropdown) {\n            this.dropdown.startAnimation();\n        }\n    }\n\n    /** Closes the dropdown. */\n    close(): void {\n        this.dropdown.closed.emit();\n    }\n\n    /**\n     * Focuses the dropdown trigger.\n     * @param origin Source of the dropdown trigger's focus.\n     */\n    focus(origin: FocusOrigin = 'program') {\n        if (this._focusMonitor) {\n            this._focusMonitor.focusVia(this._element.nativeElement, origin);\n        } else {\n            this._element.nativeElement.focus();\n        }\n    }\n\n    /** Handles mouse presses on the trigger. */\n    handleMousedown(event: MouseEvent): void {\n        // Since right or middle button clicks won't trigger the `click` event,\n        // we shouldn't consider the dropdown as opened by mouse in those cases.\n        this.openedBy = event.button === 0 ? 'mouse' : null;\n\n        // Since clicking on the trigger won't close the dropdown if it opens a nested dropdown,\n        // we should prevent focus from moving onto it via click to avoid the\n        // highlight from lingering on the dropdown item.\n        if (this.triggersNestedDropdown()) {\n            event.preventDefault();\n        }\n    }\n\n    /** Handles key presses on the trigger. */\n    handleKeydown(event: KeyboardEvent): void {\n        // tslint:disable-next-line:deprecation\n        const keyCode = event.key || event.keyCode;\n\n        if (keyCode === SPACE || keyCode === ENTER) {\n            this.open();\n        }\n\n        if (this.triggersNestedDropdown() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n            this.open();\n        }\n    }\n\n    /** Handles click events on the trigger. */\n    handleClick(event: MouseEvent): void {\n        if (this.triggersNestedDropdown()) {\n            // Stop event propagation to avoid closing the parent dropdown.\n            event.stopPropagation();\n            this.open();\n        } else {\n            this.toggle();\n        }\n    }\n\n    /**\n     * Handles touch start events on the trigger.\n     * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n     */\n    private handleTouchStart = () => this.openedBy = 'touch';\n\n    /** Closes the dropdown and does the necessary cleanup. */\n    private destroy() {\n        if (!this.overlayRef || !this.opened) {\n            return;\n        }\n\n        const dropdown = this.dropdown;\n\n        this.closeSubscription.unsubscribe();\n        this.overlayRef.detach();\n\n        if (dropdown instanceof McDropdown) {\n            dropdown.resetAnimation();\n\n            if (dropdown.lazyContent) {\n                // Wait for the exit animation to finish before detaching the content.\n                dropdown.animationDone\n                    .pipe(\n                        filter((event) => event.toState === 'void'),\n                        take(1),\n                        // Interrupt if the content got re-attached.\n                        takeUntil(dropdown.lazyContent.attached)\n                    )\n                    .subscribe({next: () => dropdown.lazyContent.detach(), error: undefined, complete: () => {\n                        // No matter whether the content got re-attached, reset the dropdown.\n                        this.reset();\n                    }});\n            } else {\n                this.reset();\n            }\n        } else {\n            this.reset();\n\n            if (dropdown.lazyContent) {\n                dropdown.lazyContent.detach();\n            }\n        }\n    }\n\n    /**\n     * This method sets the dropdown state to open and focuses the first item if\n     * the dropdown was opened via the keyboard.\n     */\n    private init(): void {\n        this.dropdown.parent = this.triggersNestedDropdown() ? this._parent : undefined;\n        this.dropdown.direction = this.dir;\n        this.setIsOpened(true);\n        this.dropdown.focusFirstItem(this.openedBy || 'program');\n    }\n\n    /**\n     * This method resets the dropdown when it's closed, most importantly restoring\n     * focus to the dropdown trigger if the dropdown was opened via the keyboard.\n     */\n    private reset(): void {\n        this.setIsOpened(false);\n\n        // We should reset focus if the user is navigating using a keyboard or\n        // if we have a top-level trigger which might cause focus to be lost\n        // when clicking on the backdrop.\n        if (!this.openedBy) {\n            // Note that the focus style will show up both for `program` and\n            // `keyboard` so we don't have to specify which one it is.\n            this.focus();\n        } else if (!this.triggersNestedDropdown()) {\n            this.focus(this.openedBy);\n        }\n\n        this.openedBy = null;\n    }\n\n    // set state rather than toggle to support triggers sharing a dropdown\n    private setIsOpened(isOpen: boolean): void {\n        this._opened = isOpen;\n        // tslint:disable-next-line:no-void-expression\n        this._opened ? this.dropdownOpened.emit() : this.dropdownClosed.emit();\n\n        if (this.triggersNestedDropdown()) {\n            this._dropdownItemInstance.highlighted = isOpen;\n        }\n    }\n\n    /**\n     * This method checks that a valid instance of McDropdown has been passed into\n     * mcDropdownTriggerFor. If not, an exception is thrown.\n     */\n    private check() {\n        if (!this.dropdown) {\n            throwMcDropdownMissingError();\n        }\n    }\n\n    /**\n     * This method creates the overlay from the provided dropdown's template and saves its\n     * OverlayRef so that it can be attached to the DOM when open is called.\n     */\n    private createOverlay(): OverlayRef {\n        if (!this.overlayRef) {\n            const config = this.getOverlayConfig();\n            this.subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n            this.overlayRef = this._overlay.create(config);\n\n            // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n            // Ideally we'd also have our keyboard event logic in here, however doing so will\n            // break anybody that may have implemented the `McDropdownPanel` themselves.\n            this.overlayRef.keydownEvents().subscribe();\n        }\n\n        return this.overlayRef;\n    }\n\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @returns OverlayConfig\n     */\n    private getOverlayConfig(): OverlayConfig {\n        return new OverlayConfig({\n            positionStrategy: this._overlay.position()\n                .flexibleConnectedTo(this._element)\n                .withLockedPosition()\n                .withTransformOriginOn('.mc-dropdown__panel'),\n            backdropClass: this.dropdown.backdropClass || 'cdk-overlay-transparent-backdrop',\n            scrollStrategy: this._scrollStrategy(),\n            direction: this._dir\n        });\n    }\n\n    /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the dropdown based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     */\n    private subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n        if (this.dropdown.setPositionClasses) {\n            position.positionChanges.subscribe((change) => {\n                const posX: DropdownPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n                const posY: DropdownPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n                this.dropdown.setPositionClasses!(posX, posY);\n            });\n        }\n    }\n\n    /**\n     * Sets the appropriate positions on a position strategy\n     * so the overlay connects with the trigger correctly.\n     * @param positionStrategy Strategy whose position to update.\n     */\n    private setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n        let [originX, originFallbackX, overlayX, overlayFallbackX]: HorizontalConnectionPos[] =\n            this.dropdown.xPosition === 'before' ?\n                ['end', 'start', 'end', 'start'] :\n                ['start', 'end', 'start', 'end'];\n\n        // tslint:disable-next-line:prefer-const\n        let [overlayY, overlayFallbackY, originY, originFallbackY]: VerticalConnectionPos[] =\n            this.dropdown.yPosition === 'above' ?\n                ['bottom', 'top', 'bottom', 'top'] :\n                ['top', 'bottom', 'top', 'bottom'];\n\n        let offsetY = 0;\n\n        if (this.triggersNestedDropdown()) {\n            // When the dropdown is nested, it should always align itself\n            // to the edges of the trigger, instead of overlapping it.\n            overlayFallbackX = originX = this.dropdown.xPosition === 'before' ? 'start' : 'end';\n            originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n            offsetY = overlayY === 'bottom' ? NESTED_PANEL_TOP_PADDING : -NESTED_PANEL_TOP_PADDING;\n        } else {\n            if (!this.dropdown.overlapTriggerY) {\n                originY = overlayY === 'top' ? 'bottom' : 'top';\n                originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n            }\n\n            if (!this.dropdown.overlapTriggerX) {\n                overlayFallbackX = originX = this.dropdown.xPosition === 'before' ? 'start' : 'end';\n                originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n            }\n        }\n\n        positionStrategy.withPositions([\n            { originX, originY, overlayX, overlayY, offsetY },\n            { originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY },\n            {\n                originX,\n                originY: originFallbackY,\n                overlayX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY\n            },\n            {\n                originX: originFallbackX,\n                originY: originFallbackY,\n                overlayX: overlayFallbackX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY\n            }\n        ]);\n    }\n\n    /** Cleans up the active subscriptions. */\n    private cleanUpSubscriptions(): void {\n        this.closeSubscription.unsubscribe();\n        this.hoverSubscription.unsubscribe();\n    }\n\n    /** Returns a stream that emits whenever an action that should close the dropdown occurs. */\n    private closingActions() {\n        const backdrop = this.overlayRef!.backdropClick();\n        const detachments = this.overlayRef!.detachments();\n        const parentClose = this._parent ? this._parent.closed : observableOf();\n        const hover = this._parent ? this._parent.hovered().pipe(\n            filter((active) => active !== this._dropdownItemInstance),\n            filter(() => this._opened)\n        ) : observableOf();\n\n        return merge(backdrop, parentClose, hover, detachments);\n    }\n\n    /** Handles the cases where the user hovers over the trigger. */\n    private handleHover() {\n        // Subscribe to changes in the hovered item in order to toggle the panel.\n        if (!this.triggersNestedDropdown()) {\n            return;\n        }\n\n        this.hoverSubscription = this._parent.hovered()\n        // Since we might have multiple competing triggers for the same dropdown (e.g. a nested dropdown\n        // with different data and triggers), we have to delay it by a tick to ensure that\n        // it won't be closed immediately after it is opened.\n            .pipe(\n                filter((active) => active === this._dropdownItemInstance && !active.disabled),\n                delay(0, asapScheduler)\n            )\n            .subscribe(() => {\n                this.openedBy = 'mouse';\n\n                // If the same dropdown is used between multiple triggers, it might still be animating\n                // while the new trigger tries to re-open it. Wait for the animation to finish\n                // before doing so. Also interrupt if the user moves to another item.\n                if (this.dropdown instanceof McDropdown && this.dropdown.isAnimating) {\n                    // We need the `delay(0)` here in order to avoid\n                    // 'changed after checked' errors in some cases. See #12194.\n                    this.dropdown.animationDone\n                        .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parent.hovered()))\n                        .subscribe(() => this.open());\n                } else {\n                    this.open();\n                }\n            });\n    }\n\n    /** Gets the portal that should be attached to the overlay. */\n    private getPortal(): TemplatePortal {\n        // Note that we can avoid this check by keeping the portal on the dropdown panel.\n        // While it would be cleaner, we'd have to introduce another required method on\n        // `McDropdownPanel`, making it harder to consume.\n        if (!this.portal || this.portal.templateRef !== this.dropdown.templateRef) {\n            this.portal = new TemplatePortal(this.dropdown.templateRef, this._viewContainerRef);\n        }\n\n        return this.portal;\n    }\n\n}\n","import { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McDropdownContent } from './dropdown-content';\nimport { McDropdownItem } from './dropdown-item';\nimport { MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER, McDropdownTrigger } from './dropdown-trigger';\nimport { McDropdown } from './dropdown.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        McIconModule\n    ],\n    exports: [McDropdown, McDropdownItem, McDropdownTrigger, McDropdownContent],\n    declarations: [McDropdown, McDropdownItem, McDropdownTrigger, McDropdownContent],\n    providers: [MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class McDropdownModule {}\n"]}