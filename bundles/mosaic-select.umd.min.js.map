{"version":3,"file":"mosaic-select.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/lib/select/select.component.ts","../../src/lib/select/select.module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/* tslint:disable:no-empty */\n\nimport {\n    AfterContentInit, AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Input,\n    isDevMode,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList, Renderer2,\n    Self,\n    SimpleChanges,\n    ViewChild, ViewChildren,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { ActiveDescendantKeyManager } from '@ptsecurity/cdk/a11y';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    RIGHT_ARROW,\n    SPACE,\n    UP_ARROW,\n    A\n} from '@ptsecurity/cdk/keycodes';\nimport {\n    CdkConnectedOverlay,\n    ViewportRuler\n} from '@ptsecurity/cdk/overlay';\nimport {\n    countGroupLabelsBeforeOption,\n    getOptionScrollPosition,\n    CanDisable,\n    CanDisableCtor,\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    HasTabIndex,\n    HasTabIndexCtor,\n    MC_OPTION_PARENT_COMPONENT,\n    McOptgroup,\n    McOption,\n    McOptionSelectionChange,\n    mixinDisabled,\n    mixinErrorState,\n    mixinTabIndex,\n    mcSelectAnimations,\n\n    SELECT_PANEL_INDENT_PADDING_X,\n    SELECT_PANEL_MAX_HEIGHT,\n    SELECT_PANEL_PADDING_X,\n    SELECT_PANEL_VIEWPORT_PADDING,\n\n    getMcSelectDynamicMultipleError,\n    getMcSelectNonFunctionValueError,\n    getMcSelectNonArrayValueError,\n    MC_SELECT_SCROLL_STRATEGY\n} from '@ptsecurity/mosaic/core';\nimport { McFormField, McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { McTag } from '@ptsecurity/mosaic/tags';\nimport { defer, merge, Observable, Subject } from 'rxjs';\nimport {\n    filter,\n    map,\n    startWith,\n    switchMap,\n    take,\n    takeUntil,\n    distinctUntilChanged\n} from 'rxjs/operators';\n\n\nlet nextUniqueId = 0;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 2;\n\n/** Change event object that is emitted when the select value has changed. */\nexport class McSelectChange {\n    constructor(public source: McSelect, public value: any) {}\n}\n\nexport class McSelectBase {\n    constructor(\n        public elementRef: ElementRef,\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {}\n}\n\nconst McSelectMixinBase: CanDisableCtor & HasTabIndexCtor & CanUpdateErrorStateCtor &\n    typeof McSelectBase = mixinTabIndex(mixinDisabled(mixinErrorState(McSelectBase)));\n\n\n@Directive({ selector: 'mc-select-trigger' })\nexport class McSelectTrigger {}\n\n\n@Component({\n    selector: 'mc-select',\n    exportAs: 'mcSelect',\n    templateUrl: 'select.html',\n    styleUrls: ['./select.css'],\n    inputs: ['disabled', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'tabIndex',\n        class: 'mc-select',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-select-invalid]': 'errorState',\n        '[class.mc-select-required]': 'required',\n        '(keydown)': 'handleKeydown($event)',\n        '(focus)': 'onFocus()',\n        '(blur)': 'onBlur()',\n        '(window:resize)': 'calculateHiddenItems()'\n    },\n    animations: [\n        mcSelectAnimations.transformPanel,\n        mcSelectAnimations.fadeInContent\n    ],\n    providers: [\n        { provide: McFormFieldControl, useExisting: McSelect },\n        { provide: MC_OPTION_PARENT_COMPONENT, useExisting: McSelect }\n    ]\n})\nexport class McSelect extends McSelectMixinBase implements\n    AfterContentInit, AfterViewInit, OnChanges, OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable,\n    HasTabIndex, McFormFieldControl<any>, CanUpdateErrorState {\n\n    /** A name for this control that can be used by `mc-form-field`. */\n    controlType = 'mc-select';\n\n    hiddenItems: number = 0;\n    oneMoreText: string = '...ещё';\n\n    /** The last measured value for the trigger's client bounding rect. */\n    triggerRect: ClientRect;\n\n    /** The cached font-size of the trigger element. */\n    triggerFontSize = 0;\n\n    /** Deals with the selection logic. */\n    selectionModel: SelectionModel<McOption>;\n\n    /** Manages keyboard events for options in the panel. */\n    keyManager: ActiveDescendantKeyManager<McOption>;\n\n    /** The IDs of child options to be passed to the aria-owns attribute. */\n    optionIds: string = '';\n\n    /** The value of the select panel's transform-origin property. */\n    transformOrigin: string = 'top';\n\n    /** Whether the panel's animation is done. */\n    panelDoneAnimating: boolean = false;\n\n    /** Emits when the panel element is finished transforming in. */\n    panelDoneAnimatingStream = new Subject<string>();\n\n    /** Strategy that will be used to handle scrolling while the select panel is open. */\n    scrollStrategy = this._scrollStrategyFactory();\n\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n    offsetY = 0;\n\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n    positions = [\n        {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top'\n        },\n        {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom'\n        }\n    ];\n\n    @ViewChild('trigger') trigger: ElementRef;\n\n    @ViewChild('panel') panel: ElementRef;\n\n    @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n    @ViewChildren(McTag) tags: QueryList<McTag>;\n\n    /** User-supplied override of the trigger element. */\n    @ContentChild(McSelectTrigger) customTrigger: McSelectTrigger;\n\n    /** All of the defined select options. */\n    @ContentChildren(McOption, { descendants: true }) options: QueryList<McOption>;\n\n    /** All of the defined groups of options. */\n    @ContentChildren(McOptgroup) optionGroups: QueryList<McOptgroup>;\n\n    /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n    @Input() panelClass: string | string[] | Set<string> | { [key: string]: any };\n\n    /** Object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Function used to sort the values in a select in multiple mode.\n     * Follows the same logic as `Array.prototype.sort`.\n     */\n    @Input() sortComparator: (a: McOption, b: McOption, options: McOption[]) => number;\n\n    /** Combined stream of all of the child options' change events. */\n    readonly optionSelectionChanges: Observable<McOptionSelectionChange> = defer(() => {\n        if (this.options) {\n            return merge(...this.options.map((option) => option.onSelectionChange));\n        }\n\n        return this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n    }) as Observable<McOptionSelectionChange>;\n\n    /** Event emitted when the select panel has been toggled. */\n    @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted when the select has been opened. */\n    @Output('opened') readonly openedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => o), map(() => {}));\n\n    /** Event emitted when the select has been closed. */\n    @Output('closed') readonly closedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => !o), map(() => {}));\n\n    /** Event emitted when the selected value has been changed by the user. */\n    @Output() readonly selectionChange: EventEmitter<McSelectChange> = new EventEmitter<McSelectChange>();\n\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    @Input()\n    get placeholder(): string {\n        return this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n\n        this.stateChanges.next();\n    }\n\n    private _placeholder: string;\n\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n\n        this.stateChanges.next();\n    }\n\n    private _required: boolean = false;\n\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        if (this.selectionModel) {\n            throw getMcSelectDynamicMultipleError();\n        }\n\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    private _multiple: boolean = false;\n\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith() {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        /* tslint:disable-next-line:strict-type-predicates */\n        if (typeof fn !== 'function') {\n            throw getMcSelectNonFunctionValueError();\n        }\n\n        this._compareWith = fn;\n\n        if (this.selectionModel) {\n            // A different comparator means the selection could change.\n            this.initializeSelection();\n        }\n    }\n\n    /** Value of the select control. */\n    @Input()\n    get value(): any {\n        return this._value;\n    }\n\n    set value(newValue: any) {\n        if (newValue !== this._value) {\n            this.writeValue(newValue);\n            this._value = newValue;\n        }\n    }\n\n    private _value: any;\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n        this.stateChanges.next();\n    }\n\n    private _id: string;\n\n    /** Whether the select is focused. */\n    get focused(): boolean {\n        return this._focused || this._panelOpen;\n    }\n\n    /**\n     * @deprecated Setter to be removed as this property is intended to be readonly.\n     * @breaking-change 8.0.0\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n\n    private _focused = false;\n\n    get panelOpen(): boolean {\n        return this._panelOpen;\n    }\n\n    private _panelOpen = false;\n\n    /** The scroll position of the overlay panel, calculated to center the selected option. */\n    private scrollTop = 0;\n\n    /** Unique id for this input. */\n    private readonly uid = `mc-select-${nextUniqueId++}`;\n\n    /** Emits whenever the component is destroyed. */\n    private readonly destroy = new Subject<void>();\n\n    constructor(\n        private readonly _viewportRuler: ViewportRuler,\n        private readonly _changeDetectorRef: ChangeDetectorRef,\n        private readonly _ngZone: NgZone,\n        private readonly _renderer: Renderer2,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        elementRef: ElementRef,\n        @Optional() private readonly _dir: Directionality,\n        @Optional() parentForm: NgForm,\n        @Optional() parentFormGroup: FormGroupDirective,\n        @Optional() private readonly _parentFormField: McFormField,\n        @Self() @Optional() public ngControl: NgControl,\n        @Attribute('tabindex') tabIndex: string,\n        @Inject(MC_SELECT_SCROLL_STRATEGY) private readonly _scrollStrategyFactory\n    ) {\n        super(elementRef, defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnInit() {\n        this.selectionModel = new SelectionModel<McOption>(this.multiple);\n        this.stateChanges.next();\n\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this.panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this.panelOpen) {\n                    this.scrollTop = 0;\n                    this.openedChange.emit(true);\n                } else {\n                    this.openedChange.emit(false);\n                    this.panelDoneAnimating = false;\n                    this.overlayDir.offsetX = 0;\n                    this._changeDetectorRef.markForCheck();\n                }\n            });\n    }\n\n    ngAfterContentInit() {\n        this.initKeyManager();\n\n        this.selectionModel.changed\n            .pipe(takeUntil(this.destroy))\n            .subscribe((event) => {\n                event.added.forEach((option) => option.select());\n                event.removed.forEach((option) => option.deselect());\n            });\n\n        this.options.changes\n            .pipe(startWith(null), takeUntil(this.destroy))\n            .subscribe(() => {\n                this.resetOptions();\n                this.initializeSelection();\n            });\n    }\n\n    ngAfterViewInit(): void {\n        this.tags.changes\n            .subscribe(() => {\n                setTimeout(() => this.calculateHiddenItems(), 0);\n            });\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) { this.updateErrorState(); }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes.disabled) {\n            this.stateChanges.next();\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroy.next();\n        this.destroy.complete();\n        this.stateChanges.complete();\n    }\n\n    /** `View -> model callback called when value changes` */\n    _onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when select has been touched` */\n    _onTouched = () => {};\n\n    /** Toggles the overlay panel open or closed. */\n    toggle(): void {\n        if (this.panelOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    /** Opens the overlay panel. */\n    open(): void {\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) { return; }\n\n        this.triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this.triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n        this._panelOpen = true;\n        this.keyManager.withHorizontalOrientation(null);\n        this.calculateOverlayPosition();\n        this.highlightCorrectOption();\n        this._changeDetectorRef.markForCheck();\n\n        // Set the font size on the panel element once it exists.\n        this._ngZone.onStable.asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                if (this.triggerFontSize && this.overlayDir.overlayRef && this.overlayDir.overlayRef.overlayElement) {\n                    this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this.triggerFontSize}px`;\n                }\n            });\n    }\n\n    /** Closes the overlay panel and focuses the host element. */\n    close(): void {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this.keyManager.withHorizontalOrientation(this.isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value: any): void {\n        if (this.options) {\n            this.setSelectionByValue(value);\n        }\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn: (value: any) => void): void {\n        this._onChange = fn;\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn: () => {}): void {\n        this._onTouched = fn;\n    }\n\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    get selected(): McOption | McOption[] {\n        return this.multiple ? this.selectionModel.selected : this.selectionModel.selected[0];\n    }\n\n    get triggerValue(): string {\n        if (this.empty) { return ''; }\n\n        if (this._multiple) {\n            const selectedOptions = this.selectionModel.selected.map((option) => option.viewValue);\n\n            if (this.isRtl()) { selectedOptions.reverse(); }\n\n            return selectedOptions.join(', ');\n        }\n\n        return this.selectionModel.selected[0].viewValue;\n    }\n\n    get triggerValues(): McOption[] {\n        if (this.empty) { return []; }\n\n        if (this._multiple) {\n            const selectedOptions = this.selectionModel.selected;\n\n            if (this.isRtl()) { selectedOptions.reverse(); }\n\n            return selectedOptions;\n        }\n\n        return [this.selectionModel.selected[0]];\n    }\n\n    get empty(): boolean {\n        return !this.selectionModel || this.selectionModel.isEmpty();\n    }\n\n    isRtl(): boolean {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n\n    handleKeydown(event: KeyboardEvent): void {\n        if (!this.disabled) {\n            if (this.panelOpen) {\n                this.handleOpenKeydown(event);\n            } else {\n                this.handleClosedKeydown(event);\n            }\n        }\n    }\n\n    /**\n     * When the panel content is done fading in, the panelDoneAnimating property is\n     * set so the proper class can be added to the panel.\n     */\n    onFadeInDone(): void {\n        this.panelDoneAnimating = this.panelOpen;\n        this._changeDetectorRef.markForCheck();\n    }\n\n    onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    onBlur() {\n        this._focused = false;\n\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    onAttached(): void {\n        this.overlayDir.positionChange\n            .pipe(take(1))\n            .subscribe(() => {\n                this._changeDetectorRef.detectChanges();\n                this.calculateOverlayOffsetX();\n                this.panel.nativeElement.scrollTop = this.scrollTop;\n            });\n    }\n\n    /** Returns the theme to be used on the panel. */\n    getPanelTheme(): string {\n        return this._parentFormField ? `mc-${this._parentFormField.color}` : '';\n    }\n\n    /** Focuses the select element. */\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    calculateOverlayScroll(selectedIndex: number, scrollBuffer: number, maxScroll: number): number {\n        const itemHeight = this.getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n\n        /* tslint:disable-next-line:no-magic-numbers */\n        const halfOptionHeight = itemHeight / 2;\n\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n\n    /** Invoked when an option is clicked. */\n    onRemoveMatcherItem(option: McOption, $event): void {\n        $event.stopPropagation();\n\n        option.deselect();\n    }\n\n    calculateHiddenItems(): void {\n        if (this.empty || !this.multiple) { return; }\n\n        let visibleItems: number = 0;\n        const totalItemsWidth = this.getTotalItemsWidthInMatcher();\n        let totalVisibleItemsWidth: number = 0;\n        const itemMargin: number = 4;\n\n        this.tags.forEach((tag) => {\n            if (tag.nativeElement.offsetTop < tag.nativeElement.offsetHeight) {\n                totalVisibleItemsWidth += tag.nativeElement.getBoundingClientRect().width + itemMargin;\n                visibleItems++;\n            }\n        });\n\n        this.hiddenItems = (this.selected as ArrayLike<McOption>).length - visibleItems;\n\n        if (this.hiddenItems) {\n            const itemsCounter = this.trigger.nativeElement.querySelector('.mc-select__match-hidden-text');\n            const matcherList = this.trigger.nativeElement.querySelector('.mc-select__match-list');\n\n            const itemsCounterShowed = itemsCounter.offsetTop < itemsCounter.offsetHeight;\n            // const itemsCounterWidth: number = itemsCounter.getBoundingClientRect().width;\n            const itemsCounterWidth: number = 86;\n\n            const matcherListWidth: number = matcherList.getBoundingClientRect().width;\n            const matcherWidth: number = matcherListWidth + itemsCounterWidth;\n\n            if (itemsCounterShowed && (totalItemsWidth < matcherWidth)) { this.hiddenItems = 0; }\n\n            if (\n                totalVisibleItemsWidth === matcherListWidth ||\n                (totalVisibleItemsWidth + itemsCounterWidth) < matcherListWidth\n            ) {\n                this._changeDetectorRef.markForCheck();\n\n                return ;\n            } else if (!itemsCounterShowed && (totalItemsWidth + itemsCounterWidth) > matcherWidth) {\n                this.hiddenItems++;\n            }\n        }\n\n        this._changeDetectorRef.markForCheck();\n    }\n\n    private getTotalItemsWidthInMatcher(): number {\n        const triggerClone = this.trigger.nativeElement.cloneNode(true);\n        triggerClone.querySelector('.mc-select__match-hidden-text').remove();\n\n        this._renderer.setStyle(triggerClone, 'position', 'absolute');\n        this._renderer.setStyle(triggerClone, 'visibility', 'hidden');\n        this._renderer.setStyle(triggerClone, 'top', '-100%');\n        this._renderer.setStyle(triggerClone, 'left', '0');\n\n        this._renderer.appendChild(this.trigger.nativeElement, triggerClone);\n\n        let totalItemsWidth: number = 0;\n        const itemMargin: number = 4;\n        triggerClone.querySelectorAll('mc-tag').forEach((item) => {\n            totalItemsWidth += item.getBoundingClientRect().width as number + itemMargin;\n        });\n\n        triggerClone.remove();\n\n        return totalItemsWidth;\n    }\n\n    /** Handles keyboard events while the select is closed. */\n    private handleClosedKeydown(event: KeyboardEvent): void {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n        // Open the select on ALT + arrow key to match the native <select>\n        if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        } else if (!this.multiple) {\n            this.keyManager.onKeydown(event);\n        }\n    }\n\n    /** Handles keyboard events when the selected is open. */\n    private handleOpenKeydown(event: KeyboardEvent): void {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const manager = this.keyManager;\n\n        if (keyCode === HOME || keyCode === END) {\n            event.preventDefault();\n\n            if (keyCode === HOME) {\n                manager.setFirstItemActive();\n            } else {\n                manager.setLastItemActive();\n            }\n\n        } else if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n        } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n            event.preventDefault();\n            manager.activeItem.selectViaInteraction();\n        } else if (this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some((option) => !option.selected);\n            this.options.forEach((option) => {\n                if (hasDeselectedOptions && !option.disabled) {\n                    option.select();\n                } else {\n                    option.deselect();\n                }\n            });\n        } else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n\n            manager.onKeydown(event);\n\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem.selectViaInteraction();\n            }\n        }\n    }\n\n    private initializeSelection(): void {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this.setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n        });\n    }\n\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    private setSelectionByValue(value: any | any[]): void {\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw getMcSelectNonArrayValueError();\n            }\n\n            this.selectionModel.clear();\n            value.forEach((currentValue: any) => this.selectValue(currentValue));\n            this.sortValues();\n        } else {\n            this.selectionModel.clear();\n            const correspondingOption = this.selectValue(value);\n\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this.keyManager.setActiveItem(correspondingOption);\n            }\n        }\n\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    private selectValue(value: any): McOption | undefined {\n        const correspondingOption = this.options.find((option: McOption) => {\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            } catch (error) {\n                if (isDevMode()) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n\n                return false;\n            }\n        });\n\n        if (correspondingOption) {\n            this.selectionModel.select(correspondingOption);\n        }\n\n        return correspondingOption;\n    }\n\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    private initKeyManager() {\n        this.keyManager = new ActiveDescendantKeyManager<McOption>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this.isRtl() ? 'rtl' : 'ltr');\n\n        this.keyManager.tabOut\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            });\n\n        this.keyManager.change\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this._panelOpen && this.panel) {\n                    this.scrollActiveOptionIntoView();\n                } else if (!this._panelOpen && !this.multiple && this.keyManager.activeItem) {\n                    this.keyManager.activeItem.selectViaInteraction();\n                }\n            });\n    }\n\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    private resetOptions(): void {\n        const changedOrDestroyed = merge(this.options.changes, this.destroy);\n\n        this.optionSelectionChanges\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe((event) => {\n                this.onSelect(event.source, event.isUserInput);\n\n                if (event.isUserInput && !this.multiple && this._panelOpen) {\n                    this.close();\n                    this.focus();\n                }\n            });\n\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map((option) => option.stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n                this._changeDetectorRef.markForCheck();\n                this.stateChanges.next();\n            });\n\n        this.setOptionIds();\n    }\n\n    /** Invoked when an option is clicked. */\n    private onSelect(option: McOption, isUserInput: boolean): void {\n        const wasSelected = this.selectionModel.isSelected(option);\n\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this.selectionModel.clear();\n            this.propagateChanges(option.value);\n        } else {\n            if (option.selected) {\n                this.selectionModel.select(option);\n            } else {\n                this.selectionModel.deselect(option);\n            }\n\n            if (isUserInput) {\n                this.keyManager.setActiveItem(option);\n            }\n\n            if (this.multiple) {\n                this.sortValues();\n\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mc-option`.\n                    this.focus();\n                }\n            }\n        }\n\n        if (wasSelected !== this.selectionModel.isSelected(option)) {\n            this.propagateChanges();\n        }\n\n        this.stateChanges.next();\n    }\n\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    private sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n\n            this.selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n\n    /** Emits change event to set the model value. */\n    private propagateChanges(fallbackValue?: any): void {\n        let valueToEmit: any = null;\n\n        if (this.multiple) {\n            valueToEmit = (this.selected as McOption[]).map((option) => option.value);\n        } else {\n            valueToEmit = this.selected ? (this.selected as McOption).value : fallbackValue;\n        }\n\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(new McSelectChange(this, valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /** Records option IDs to pass to the aria-owns property. */\n    private setOptionIds() {\n        this.optionIds = this.options.map((option) => option.id).join(' ');\n    }\n\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    private highlightCorrectOption(): void {\n        if (this.keyManager) {\n            if (this.empty) {\n                this.keyManager.setFirstItemActive();\n            } else {\n                this.keyManager.setActiveItem(this.selectionModel.selected[0]);\n            }\n        }\n    }\n\n    /** Scrolls the active option into view. */\n    private scrollActiveOptionIntoView(): void {\n        const activeOptionIndex = this.keyManager.activeItemIndex || 0;\n        const labelCount = countGroupLabelsBeforeOption(activeOptionIndex, this.options, this.optionGroups);\n\n        this.panel.nativeElement.scrollTop = getOptionScrollPosition(\n            activeOptionIndex + labelCount,\n            this.getItemHeight(),\n            this.panel.nativeElement.scrollTop,\n            SELECT_PANEL_MAX_HEIGHT\n        );\n    }\n\n    /** Gets the index of the provided option in the option list. */\n    private getOptionIndex(option: McOption): number | undefined {\n        /* tslint:disable-next-line */\n        return this.options.reduce((result: number, current: McOption, index: number) => {\n            /* tslint:disable-next-line:strict-type-predicates */\n            return result === undefined ? (option === current ? index : undefined) : result;\n        }, undefined);\n    }\n\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    private calculateOverlayPosition(): void {\n        const itemHeight = this.getItemHeight();\n        const items = this.getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n\n        // If no value is selected we open the popup to the first item.\n        let selectedOptionOffset =\n            this.empty ? 0 : this.getOptionIndex(this.selectionModel.selected[0])!;\n\n        selectedOptionOffset += countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        /* tslint:disable-next-line:no-magic-numbers */\n        const scrollBuffer = panelHeight / 2;\n        this.scrollTop = this.calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this.offsetY = this.calculateOverlayOffsetY();\n\n        this.checkOverlayWithinViewport(maxScroll);\n    }\n\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    private calculateOverlayOffsetX(): void {\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const isRtl = this.isRtl();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const paddingWidth = SELECT_PANEL_PADDING_X * 2;\n        let offsetX: number;\n\n        const selected = this.selectionModel.selected[0] || this.options.first;\n        offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n\n        // Invert the offset in LTR.\n        if (!isRtl) { offsetX *= -1; }\n\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        } else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    private calculateOverlayOffsetY(): number {\n        // const itemHeight = this.getItemHeight();\n        // const optionHeightAdjustment = (itemHeight - this.triggerRect.height) / 2;\n\n        // todo I'm not sure that we will use it\n        return 0;\n        // return Math.round(-optionHeightAdjustment);\n    }\n\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    private checkOverlayWithinViewport(maxScroll: number): void {\n        const itemHeight = this.getItemHeight();\n        const viewportSize = this._viewportRuler.getViewportSize();\n\n        const topSpaceAvailable = this.triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable =\n            viewportSize.height - this.triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n        const panelHeightTop = Math.abs(this.offsetY);\n        const totalPanelHeight =\n            Math.min(this.getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this.triggerRect.height;\n\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this.adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        } else if (panelHeightTop > topSpaceAvailable) {\n            this.adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        } else {\n            this.transformOrigin = this.getOriginBasedOnOption();\n        }\n    }\n\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    private adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this.scrollTop -= distanceBelowViewport;\n        this.offsetY -= distanceBelowViewport;\n        this.transformOrigin = this.getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this.scrollTop <= 0) {\n            this.scrollTop = 0;\n            this.offsetY = 0;\n            this.transformOrigin = `50% bottom 0px`;\n        }\n    }\n\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    private adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number, maxScroll: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this.scrollTop += distanceAboveViewport;\n        this.offsetY += distanceAboveViewport;\n        this.transformOrigin = this.getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this.scrollTop >= maxScroll) {\n            this.scrollTop = maxScroll;\n            this.offsetY = 0;\n            this.transformOrigin = `50% top 0px`;\n\n            return;\n        }\n    }\n\n    /** Sets the transform origin point based on the selected option. */\n    private getOriginBasedOnOption(): string {\n        const itemHeight = this.getItemHeight();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const optionHeightAdjustment = (itemHeight - this.triggerRect.height) / 2;\n        /* tslint:disable-next-line:no-magic-numbers */\n        const originY = Math.abs(this.offsetY) - optionHeightAdjustment + itemHeight / 2;\n\n        return `50% ${originY}px 0px`;\n    }\n\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    private getItemCount(): number {\n        return this.options.length + this.optionGroups.length;\n    }\n\n    /** Calculates the height of the select's options. */\n    private getItemHeight(): number {\n        // todo доделать\n        /* tslint:disable-next-line:no-magic-numbers */\n        return 32;\n        // return this.triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { MC_SELECT_SCROLL_STRATEGY_PROVIDER, McOptionModule } from '@ptsecurity/mosaic/core';\nimport { McFormFieldModule } from '@ptsecurity/mosaic/form-field';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\nimport { McTagsModule } from '@ptsecurity/mosaic/tags';\n\nimport { McSelect, McSelectTrigger } from './select.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        McOptionModule,\n        McIconModule,\n        McTagsModule\n    ],\n    exports: [McFormFieldModule, McSelect, McSelectTrigger, McOptionModule, CommonModule],\n    declarations: [McSelect, McSelectTrigger],\n    providers: [MC_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class McSelectModule {}\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","setPrototypeOf","__proto__","Array","p","hasOwnProperty","nextUniqueId","McSelectChange","source","value","McSelectBase","elementRef","defaultErrorStateMatcher","parentForm","parentFormGroup","ngControl","McSelectMixinBase","mixinTabIndex","mixinDisabled","mixinErrorState","McSelectTrigger","type","Directive","args","selector","McSelect","_super","_viewportRuler","_changeDetectorRef","_ngZone","_renderer","_dir","_parentFormField","tabIndex","_scrollStrategyFactory","_this","call","controlType","hiddenItems","oneMoreText","triggerFontSize","optionIds","transformOrigin","panelDoneAnimating","panelDoneAnimatingStream","Subject","scrollStrategy","offsetY","positions","originX","originY","overlayX","overlayY","optionSelectionChanges","defer","options","merge","apply","map","option","onSelectionChange","onStable","asObservable","pipe","take","switchMap","openedChange","EventEmitter","openedStream","filter","o","closedStream","selectionChange","valueChange","_required","_multiple","_focused","_panelOpen","scrollTop","uid","destroy","_onChange","_onTouched","_compareWith","o1","o2","valueAccessor","parseInt","id","tslib_1.__extends","defineProperty","_placeholder","stateChanges","next","coerceBooleanProperty","selectionModel","getMcSelectDynamicMultipleError","fn","getMcSelectNonFunctionValueError","initializeSelection","_value","newValue","writeValue","_id","ngOnInit","SelectionModel","multiple","distinctUntilChanged","takeUntil","subscribe","panelOpen","emit","overlayDir","offsetX","markForCheck","ngAfterContentInit","initKeyManager","changed","event","added","forEach","select","removed","deselect","changes","startWith","resetOptions","ngAfterViewInit","tags","setTimeout","calculateHiddenItems","ngDoCheck","updateErrorState","ngOnChanges","disabled","ngOnDestroy","complete","toggle","close","open","length","triggerRect","trigger","nativeElement","getBoundingClientRect","getComputedStyle","keyManager","withHorizontalOrientation","calculateOverlayPosition","highlightCorrectOption","overlayRef","overlayElement","style","fontSize","isRtl","setSelectionByValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","selected","empty","selectedOptions","viewValue","reverse","join","isEmpty","handleKeydown","handleOpenKeydown","handleClosedKeydown","onFadeInDone","onFocus","onBlur","onAttached","positionChange","detectChanges","calculateOverlayOffsetX","panel","getPanelTheme","color","focus","calculateOverlayScroll","selectedIndex","scrollBuffer","maxScroll","itemHeight","getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","Math","min","max","onContainerClick","onRemoveMatcherItem","$event","stopPropagation","visibleItems","totalItemsWidth","getTotalItemsWidthInMatcher","totalVisibleItemsWidth","tag","offsetTop","offsetHeight","width","itemsCounter","querySelector","matcherList","itemsCounterShowed","matcherListWidth","matcherWidth","triggerClone","cloneNode","remove","setStyle","appendChild","querySelectorAll","item","keyCode","isArrowKey","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","ENTER","SPACE","altKey","preventDefault","onKeydown","manager","HOME","END","setFirstItemActive","setLastItemActive","activeItem","A","ctrlKey","hasDeselectedOptions_1","some","previouslyFocusedIndex","activeItemIndex","shiftKey","selectViaInteraction","Promise","resolve","then","isArray","getMcSelectNonArrayValueError","clear","currentValue","selectValue","sortValues","correspondingOption","setActiveItem","find","error","isDevMode","console","warn","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","tabOut","change","scrollActiveOptionIntoView","changedOrDestroyed","onSelect","isUserInput","setOptionIds","wasSelected","isSelected","propagateChanges","options_1","toArray","sort","a","sortComparator","indexOf","fallbackValue","valueToEmit","activeOptionIndex","labelCount","countGroupLabelsBeforeOption","optionGroups","getOptionScrollPosition","SELECT_PANEL_MAX_HEIGHT","getOptionIndex","reduce","result","current","index","undefined","items","getItemCount","panelHeight","scrollContainerHeight","selectedOptionOffset","calculateOverlayOffsetY","checkOverlayWithinViewport","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_PANEL_PADDING_X","first","group","SELECT_PANEL_INDENT_PADDING_X","leftOverflow","left","rightOverflow","right","SELECT_PANEL_VIEWPORT_PADDING","round","updatePosition","topSpaceAvailable","top","bottomSpaceAvailable","height","bottom","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","adjustPanelUp","adjustPanelDown","getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","optionHeightAdjustment","Component","exportAs","template","styles","inputs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","host","[attr.id]","[attr.tabindex]","class","[class.mc-disabled]","[class.mc-select-invalid]","[class.mc-select-required]","(keydown)","(focus)","(blur)","(window:resize)","animations","mcSelectAnimations","transformPanel","fadeInContent","providers","provide","McFormFieldControl","useExisting","MC_OPTION_PARENT_COMPONENT","ViewportRuler","ChangeDetectorRef","NgZone","Renderer2","ErrorStateMatcher","ElementRef","Directionality","decorators","Optional","NgForm","FormGroupDirective","McFormField","NgControl","Self","String","Attribute","Inject","MC_SELECT_SCROLL_STRATEGY","ViewChild","CdkConnectedOverlay","ViewChildren","McTag","customTrigger","ContentChild","ContentChildren","McOption","descendants","McOptgroup","panelClass","Input","errorStateMatcher","Output","placeholder","required","compareWith","McSelectModule","NgModule","imports","CommonModule","OverlayModule","McOptionModule","McIconModule","McTagsModule","exports","McFormFieldModule","declarations","MC_SELECT_SCROLL_STRATEGY_PROVIDER"],"mappings":";;;;;;i0CAuBA,SAAgBA,GAAUC,EAAGC,GAEzB,QAASC,KAAOC,KAAKC,YAAcJ,EADnCK,EAAcL,EAAGC,GAEjBD,EAAEM,UAAkB,OAANL,EAAaM,OAAOC,OAAOP,IAAMC,EAAGI,UAAYL,EAAEK,UAAW,GAAIJ,IAVnF,GAAIG,GAAgB,SAASL,EAAGC,GAI5B,OAHAI,EAAgBE,OAAOE,iBAChBC,uBAA2BC,QAAS,SAAUX,EAAGC,GAAKD,EAAEU,UAAYT,IACvE,SAAUD,EAAGC,GAAK,IAAK,GAAIW,KAAKX,GAAOA,EAAEY,eAAeD,KAAIZ,EAAEY,GAAKX,EAAEW,MACpDZ,EAAGC,ICwExBa,EAAe,eAOf,QAAJC,GAAuBC,EAAyBC,GAAzBd,KAAvBa,OAAuBA,EAAyBb,KAAhDc,MAAgDA,EAChD,MAAAF,MAEAG,EAAA,WACI,QAAJA,GACeC,EACAC,EACAC,EACAC,EACAC,GAJApB,KAAfgB,WAAeA,EACAhB,KAAfiB,yBAAeA,EACAjB,KAAfkB,WAAeA,EACAlB,KAAfmB,gBAAeA,EACAnB,KAAfoB,UAAeA,EAEf,MAAAL,MAEMM,EACoBC,EAAAA,cAAcC,EAAAA,cAAcC,EAAAA,gBAAgBT,KAGtEU,EAAA,WAAA,QAAAA,MAC8B,sBAD9BC,KAACC,EAAAA,UAADC,OAAaC,SAAU,wBACvBJ,KAGAK,EAAA,SAAAC,GAqRI,QAAJD,GACyBE,EACAC,EACAC,EACAC,EACjBlB,EACAD,EAC6BoB,EACjBlB,EACAC,EACiBkB,EACFjB,EACJkB,EAC6BC,GAbxD,GAAJC,GAeQT,EAfRU,KAAAzC,KAecgB,EAAYC,EAA0BC,EAAYC,EAAiBC,IAfjFpB,WACyBwC,GAAzBR,eAAyBA,EACAQ,EAAzBP,mBAAyBA,EACAO,EAAzBN,QAAyBA,EACAM,EAAzBL,UAAyBA,EAGYK,EAArCJ,KAAqCA,EAGAI,EAArCH,iBAAqCA,EACFG,EAAnCpB,UAAmCA,EAEyBoB,EAA5DD,uBAA4DA,EAhQxDC,EAAJE,YAAkB,YAEdF,EAAJG,YAA0B,EACtBH,EAAJI,YAA0B,SAMtBJ,EAAJK,gBAAsB,EASlBL,EAAJM,UAAwB,GAGpBN,EAAJO,gBAA8B,MAG1BP,EAAJQ,oBAAkC,EAG9BR,EAAJS,yBAA+B,GAAIC,GAAAA,QAG/BV,EAAJW,eAAqBX,EAAKD,yBAOtBC,EAAJY,QAAc,EAQVZ,EAAJa,YAEYC,QAAS,QACTC,QAAS,SACTC,SAAU,QACVC,SAAU,QAGVH,QAAS,QACTC,QAAS,MACTC,SAAU,QACVC,SAAU,WAkCTjB,EAAbkB,uBAA2EC,EAAAA,MAAM,WACzE,MAAInB,GAAKoB,QACEC,EAAAA,MAAnBC,UAAA,GAA4BtB,EAAKoB,QAAQG,IAAI,SAACC,GAAW,MAAAA,GAAOC,qBAGjDzB,EAAKN,QAAQgC,SACfC,eACAC,KAAKC,EAAAA,KAAK,GAAIC,EAAAA,UAAU,WAAM,MAAA9B,GAAKkB,4BAIzBlB,EAAvB+B,aAA6D,GAAIC,GAAAA,aAGlChC,EAA/BiC,aACQjC,EAAK+B,aAAaH,KAAKM,EAAAA,OAAO,SAACC,GAAM,MAAAA,KAAIZ,EAAAA,IAAI,eAGtBvB,EAA/BoC,aACQpC,EAAK+B,aAAaH,KAAKM,EAAAA,OAAO,SAACC,GAAM,OAACA,IAAIZ,EAAAA,IAAI,eAG/BvB,EAAvBqC,gBAAuE,GAAIL,GAAAA,aAOpDhC,EAAvBsC,YAAwD,GAAIN,GAAAA,aA0BhDhC,EAAZuC,WAAiC,EAerBvC,EAAZwC,WAAiC,EAkErBxC,EAAZyC,UAAuB,EAMXzC,EAAZ0C,YAAyB,EAGb1C,EAAZ2C,UAAwB,EAGH3C,EAArB4C,IAA2B,aAAazE,IAGnB6B,EAArB6C,QAA+B,GAAInC,GAAAA,QAiG/BV,EAAJ8C,UAAsC,aAGlC9C,EAAJ+C,WAAiB,aA8vBL/C,EAAZgD,aAA2B,SAACC,EAASC,GAAY,MAAAD,KAAOC,GA/0B5ClD,EAAKpB,YAGLoB,EAAKpB,UAAUuE,cAAgBnD,GAGnCA,EAAKF,SAAWsD,SAAStD,IAAa,EAGtCE,EAAKqD,GAAKrD,EAAKqD,KAu0BvB,MAzlC8BC,GAA9BhE,EAAAC,GA8HI3B,OAAJ2F,eACQjE,EADR3B,UAAA,mBAAI,WAEI,MAAOH,MAAKgG,kBAGhB,SAAgBlF,GACZd,KAAKgG,aAAelF,EAEpBd,KAAKiG,aAAaC,wCAKtB9F,OAAJ2F,eACQjE,EADR3B,UAAA,gBAAI,WAEI,MAAOH,MAAK+E,eAGhB,SAAajE,GACTd,KAAK+E,UAAYoB,EAAAA,sBAAsBrF,GAEvCd,KAAKiG,aAAaC,wCAKtB9F,OAAJ2F,eACQjE,EADR3B,UAAA,gBAAI,WAEI,MAAOH,MAAKgF,eAGhB,SAAalE,GACT,GAAId,KAAKoG,eACL,KAAMC,GAAAA,iCAGVrG,MAAKgF,UAAYmB,EAAAA,sBAAsBrF,oCAU3CV,OAAJ2F,eACQjE,EADR3B,UAAA,mBAAI,WAEI,MAAOH,MAAKwF,kBAGhB,SAAgBc,GAEZ,GAAkB,kBAAPA,GACP,KAAMC,GAAAA,kCAGVvG,MAAKwF,aAAec,EAEhBtG,KAAKoG,gBAELpG,KAAKwG,uDAKbpG,OAAJ2F,eACQjE,EADR3B,UAAA,aAAI,WAEI,MAAOH,MAAKyG,YAGhB,SAAUC,GACFA,IAAa1G,KAAKyG,SAClBzG,KAAK2G,WAAWD,GAChB1G,KAAKyG,OAASC,oCAMtBtG,OAAJ2F,eACQjE,EADR3B,UAAA,UAAI,WAEI,MAAOH,MAAK4G,SAGhB,SAAO9F,GACHd,KAAK4G,IAAM9F,GAASd,KAAKoF,IACzBpF,KAAKiG,aAAaC,wCAMtB9F,OAAJ2F,eAAQjE,EAAR3B,UAAA,eAAI,WACI,MAAOH,MAAKiF,UAAYjF,KAAKkF,gBAOjC,SAAYpE,GACRd,KAAKiF,SAAWnE,mCAKpBV,OAAJ2F,eAAQjE,EAAR3B,UAAA,iBAAI,WACI,MAAOH,MAAKkF,4CA2ChBpD,EAAJ3B,UAAA0G,SAAI,WAAA,GAAJrE,GAAAxC,IACQA,MAAKoG,eAAiB,GAAIU,GAAAA,eAAyB9G,KAAK+G,UACxD/G,KAAKiG,aAAaC,OAKlBlG,KAAKiD,yBACAmB,KAAK4C,EAAAA,uBAAwBC,EAAAA,UAAUjH,KAAKqF,UAC5C6B,UAAU,WACH1E,EAAK2E,WACL3E,EAAK2C,UAAY,EACjB3C,EAAK+B,aAAa6C,MAAK,KAEvB5E,EAAK+B,aAAa6C,MAAK,GACvB5E,EAAKQ,oBAAqB,EAC1BR,EAAK6E,WAAWC,QAAU,EAC1B9E,EAAKP,mBAAmBsF,mBAKxCzF,EAAJ3B,UAAAqH,mBAAI,WAAA,GAAJhF,GAAAxC,IACQA,MAAKyH,iBAELzH,KAAKoG,eAAesB,QACftD,KAAK6C,EAAAA,UAAUjH,KAAKqF,UACpB6B,UAAU,SAACS,GACRA,EAAMC,MAAMC,QAAQ,SAAC7D,GAAW,MAAAA,GAAO8D,WACvCH,EAAMI,QAAQF,QAAQ,SAAC7D,GAAW,MAAAA,GAAOgE,eAGjDhI,KAAK4D,QAAQqE,QACR7D,KAAK8D,EAAAA,UAAU,MAAOjB,EAAAA,UAAUjH,KAAKqF,UACrC6B,UAAU,WACP1E,EAAK2F,eACL3F,EAAKgE,yBAIjB1E,EAAJ3B,UAAAiI,gBAAI,WAAA,GAAJ5F,GAAAxC,IACQA,MAAKqI,KAAKJ,QACLf,UAAU,WACPoB,WAAW,WAAM,MAAA9F,GAAK+F,wBAAwB,MAI1DzG,EAAJ3B,UAAAqI,UAAI,WACQxI,KAAKoB,WAAapB,KAAKyI,oBAG/B3G,EAAJ3B,UAAAuI,YAAI,SAAYT,GAGJA,EAAQU,UACR3I,KAAKiG,aAAaC,QAI1BpE,EAAJ3B,UAAAyI,YAAI,WACI5I,KAAKqF,QAAQa,OACblG,KAAKqF,QAAQwD,WACb7I,KAAKiG,aAAa4C,YAUtB/G,EAAJ3B,UAAA2I,OAAI,WACQ9I,KAAKmH,UACLnH,KAAK+I,QAEL/I,KAAKgJ,QAKblH,EAAJ3B,UAAA6I,KAAI,WAAA,GAAJxG,GAAAxC,MACYA,KAAK2I,UAAa3I,KAAK4D,SAAY5D,KAAK4D,QAAQqF,SAAUjJ,KAAKkF,aAEnElF,KAAKkJ,YAAclJ,KAAKmJ,QAAQC,cAAcC,wBAG9CrJ,KAAK6C,gBAAkB+C,SAAS0D,iBAAiBtJ,KAAKmJ,QAAQC,eAAe,cAE7EpJ,KAAKkF,YAAa,EAClBlF,KAAKuJ,WAAWC,0BAA0B,MAC1CxJ,KAAKyJ,2BACLzJ,KAAK0J,yBACL1J,KAAKiC,mBAAmBsF,eAGxBvH,KAAKkC,QAAQgC,SAASC,eACjBC,KAAKC,EAAAA,KAAK,IACV6C,UAAU,WACH1E,EAAKK,iBAAmBL,EAAK6E,WAAWsC,YAAcnH,EAAK6E,WAAWsC,WAAWC,iBACjFpH,EAAK6E,WAAWsC,WAAWC,eAAeC,MAAMC,SAActH,EAAKK,gBAAvF,UAMIf,EAAJ3B,UAAA4I,MAAI,WACQ/I,KAAKkF,aACLlF,KAAKkF,YAAa,EAClBlF,KAAKuJ,WAAWC,0BAA0BxJ,KAAK+J,QAAU,MAAQ,OACjE/J,KAAKiC,mBAAmBsF,eACxBvH,KAAKuF,eAUbzD,EAAJ3B,UAAAwG,WAAI,SAAW7F,GACHd,KAAK4D,SACL5D,KAAKgK,oBAAoBlJ,IAWjCgB,EAAJ3B,UAAA8J,iBAAI,SAAiB3D,GACbtG,KAAKsF,UAAYgB,GAUrBxE,EAAJ3B,UAAA+J,kBAAI,SAAkB5D,GACdtG,KAAKuF,WAAae,GAStBxE,EAAJ3B,UAAAgK,iBAAI,SAAiBC,GACbpK,KAAK2I,SAAWyB,EAChBpK,KAAKiC,mBAAmBsF,eACxBvH,KAAKiG,aAAaC,QAGtB9F,OAAJ2F,eAAQjE,EAAR3B,UAAA,gBAAI,WACI,MAAOH,MAAK+G,SAAW/G,KAAKoG,eAAeiE,SAAWrK,KAAKoG,eAAeiE,SAAS,oCAGvFjK,OAAJ2F,eAAQjE,EAAR3B,UAAA,oBAAI,WACI,GAAIH,KAAKsK,MAAS,MAAO,EAEzB,IAAItK,KAAKgF,UAAW,CAC5B,GAAkBuF,GAAkBvK,KAAKoG,eAAeiE,SAAStG,IAAI,SAACC,GAAW,MAAAA,GAAOwG,WAI5E,OAFIxK,MAAK+J,SAAWQ,EAAgBE,UAE7BF,EAAgBG,KAAK,MAGhC,MAAO1K,MAAKoG,eAAeiE,SAAS,GAAGG,2CAG3CpK,OAAJ2F,eAAQjE,EAAR3B,UAAA,qBAAI,WACI,GAAIH,KAAKsK,MAAS,QAElB,IAAItK,KAAKgF,UAAW,CAC5B,GAAkBuF,GAAkBvK,KAAKoG,eAAeiE,QAI5C,OAFIrK,MAAK+J,SAAWQ,EAAgBE,UAE7BF,EAGX,OAAQvK,KAAKoG,eAAeiE,SAAS,qCAGzCjK,OAAJ2F,eAAQjE,EAAR3B,UAAA,aAAI,WACI,OAAQH,KAAKoG,gBAAkBpG,KAAKoG,eAAeuE,2CAGvD7I,EAAJ3B,UAAA4J,MAAI,WACI,QAAO/J,KAAKoC,MAA2B,QAApBpC,KAAKoC,KAAKtB,OAGjCgB,EAAJ3B,UAAAyK,cAAI,SAAcjD,GACL3H,KAAK2I,WACF3I,KAAKmH,UACLnH,KAAK6K,kBAAkBlD,GAEvB3H,KAAK8K,oBAAoBnD,KASrC7F,EAAJ3B,UAAA4K,aAAI,WACI/K,KAAKgD,mBAAqBhD,KAAKmH,UAC/BnH,KAAKiC,mBAAmBsF,gBAG5BzF,EAAJ3B,UAAA6K,QAAI,WACShL,KAAK2I,WACN3I,KAAKiF,UAAW,EAEhBjF,KAAKiG,aAAaC,SAQ1BpE,EAAJ3B,UAAA8K,OAAI,WACIjL,KAAKiF,UAAW,EAEXjF,KAAK2I,UAAa3I,KAAKmH,YACxBnH,KAAKuF,aACLvF,KAAKiC,mBAAmBsF,eACxBvH,KAAKiG,aAAaC,SAO1BpE,EAAJ3B,UAAA+K,WAAI,WAAA,GAAJ1I,GAAAxC,IACQA,MAAKqH,WAAW8D,eACX/G,KAAKC,EAAAA,KAAK,IACV6C,UAAU,WACP1E,EAAKP,mBAAmBmJ,gBACxB5I,EAAK6I,0BACL7I,EAAK8I,MAAMlC,cAAcjE,UAAY3C,EAAK2C,aAKtDrD,EAAJ3B,UAAAoL,cAAI,WACI,MAAOvL,MAAKqC,iBAAmB,MAAMrC,KAAKqC,iBAAiBmJ,MAAU,IAIzE1J,EAAJ3B,UAAAsL,MAAI,WACIzL,KAAKgB,WAAWoI,cAAcqC,SAUlC3J,EAAJ3B,UAAAuL,uBAAI,SAAuBC,EAAuBC,EAAsBC,GACxE,GAAcC,GAAa9L,KAAK+L,gBAClBC,EAA4BF,EAAaH,EAGzCM,EAAmBH,EAAa,EAMhCI,EAAwBF,EAA4BJ,EAAeK,CAEzE,OAAOE,MAAKC,IAAID,KAAKE,IAAI,EAAGH,GAAwBL,IAOxD/J,EAAJ3B,UAAAmM,iBAAI,WACItM,KAAKyL,QACLzL,KAAKgJ,QAITlH,EAAJ3B,UAAAoM,oBAAI,SAAoBvI,EAAkBwI,GAClCA,EAAOC,kBAEPzI,EAAOgE,YAGXlG,EAAJ3B,UAAAoI,qBAAI,WACI,IAAIvI,KAAKsK,OAAUtK,KAAK+G,SAAxB,CAER,GAAY2F,GAAuB,EACrBC,EAAkB3M,KAAK4M,8BACzBC,EAAiC,CAYrC,IATA7M,KAAKqI,KAAKR,QAAQ,SAACiF,GACXA,EAAI1D,cAAc2D,UAAYD,EAAI1D,cAAc4D,eAChDH,GAA0BC,EAAI1D,cAAcC,wBAAwB4D,MAJjD,EAKnBP,OAIR1M,KAAK2C,YAAe3C,KAAa,SAAyBiJ,OAASyD,EAE/D1M,KAAK2C,YAAa,CAC9B,GAAkBuK,GAAelN,KAAKmJ,QAAQC,cAAc+D,cAAc,iCACxDC,EAAcpN,KAAKmJ,QAAQC,cAAc+D,cAAc,0BAEvDE,EAAqBH,EAAaH,UAAYG,EAAaF,aAI3DM,EAA2BF,EAAY/D,wBAAwB4D,MAC/DM,EAAuBD,EAHK,EAOlC,IAFID,GAAuBV,EAAkBY,IAAiBvN,KAAK2C,YAAc,GAG7EkK,IAA2BS,GAC1BT,EAT6B,GASiBS,EAI/C,WAFAtN,MAAKiC,mBAAmBsF,gBAGhB8F,GAAuBV,EAdD,GAcwCY,GACtEvN,KAAK2C,cAIb3C,KAAKiC,mBAAmBsF,iBAGpBzF,EAAZ3B,UAAAyM,4BAAI,WACJ,GAAcY,GAAexN,KAAKmJ,QAAQC,cAAcqE,WAAU,EAC1DD,GAAaL,cAAc,iCAAiCO,SAE5D1N,KAAKmC,UAAUwL,SAASH,EAAc,WAAY,YAClDxN,KAAKmC,UAAUwL,SAASH,EAAc,aAAc,UACpDxN,KAAKmC,UAAUwL,SAASH,EAAc,MAAO,SAC7CxN,KAAKmC,UAAUwL,SAASH,EAAc,OAAQ,KAE9CxN,KAAKmC,UAAUyL,YAAY5N,KAAKmJ,QAAQC,cAAeoE,EAE/D,IAAYb,GAA0B,CAQ9B,OANAa,GAAaK,iBAAiB,UAAUhG,QAAQ,SAACiG,GAC7CnB,GAAmBmB,EAAKzE,wBAA6B,MAF9B,IAK3BmE,EAAaE,SAENf,GAIH7K,EAAZ3B,UAAA2K,oBAAI,SAA4BnD,GAEhC,GAAcoG,GAAUpG,EAAMoG,QAChBC,EAAaD,IAAYE,EAAAA,YAAcF,IAAYG,EAAAA,UACrDH,IAAYI,EAAAA,YAAcJ,IAAYK,EAAAA,WACxBL,KAAYM,EAAAA,OAASN,IAAYO,EAAAA,QAGhCtO,KAAK+G,UAAYY,EAAM4G,SAAWP,GACjDrG,EAAM6G,iBACNxO,KAAKgJ,QACGhJ,KAAK+G,UACb/G,KAAKuJ,WAAWkF,UAAU9G,IAK1B7F,EAAZ3B,UAAA0K,kBAAI,SAA0BlD,GAE9B,GAAcoG,GAAUpG,EAAMoG,QAChBC,EAAaD,IAAYE,EAAAA,YAAcF,IAAYG,EAAAA,SACnDQ,EAAU1O,KAAKuJ,UAErB,IAAIwE,IAAYY,EAAAA,MAAQZ,IAAYa,EAAAA,IAChCjH,EAAM6G,iBAEFT,IAAYY,EAAAA,KACZD,EAAQG,qBAERH,EAAQI,wBAGT,IAAId,GAAcrG,EAAM4G,OAE3B5G,EAAM6G,iBACNxO,KAAK+I,YACF,IAAKgF,IAAYM,EAAAA,OAASN,IAAYO,EAAAA,QAAUI,EAAQK,WAGxD,GAAI/O,KAAKgF,WAAa+I,IAAYiB,EAAAA,GAAKrH,EAAMsH,QAAS,CACzDtH,EAAM6G,gBAClB,IAAkBU,GAAuBlP,KAAK4D,QAAQuL,KAAK,SAACnL,GAAW,OAACA,EAAOqG,UACnErK,MAAK4D,QAAQiE,QAAQ,SAAC7D,GACdkL,IAAyBlL,EAAO2E,SAChC3E,EAAO8D,SAEP9D,EAAOgE,iBAGZ,CACf,GAAkBoH,GAAyBV,EAAQW,eAEvCX,GAAQD,UAAU9G,GAEd3H,KAAKgF,WAAagJ,GAAcrG,EAAM2H,UAAYZ,EAAQK,YAC1DL,EAAQW,kBAAoBD,GAC5BV,EAAQK,WAAWQ,2BAnBvB5H,GAAM6G,iBACNE,EAAQK,WAAWQ,wBAuBnBzN,EAAZ3B,UAAAqG,oBAAI,WAAA,GAAJhE,GAAAxC,IAGQwP,SAAQC,UAAUC,KAAK,WACnBlN,EAAKwH,oBAAoBxH,EAAKpB,UAAYoB,EAAKpB,UAAUN,MAAQ0B,EAAKiE,WAQtE3E,EAAZ3B,UAAA6J,oBAAI,SAA4BlJ,GAA5B,GAAJ0B,GAAAxC,IACQ,IAAIA,KAAK+G,UAAYjG,EAAO,CACxB,IAAKN,MAAMmP,QAAQ7O,GACf,KAAM8O,GAAAA,+BAGV5P,MAAKoG,eAAeyJ,QACpB/O,EAAM+G,QAAQ,SAACiI,GAAsB,MAAAtN,GAAKuN,YAAYD,KACtD9P,KAAKgQ,iBACF,CACHhQ,KAAKoG,eAAeyJ,OAChC,IAAkBI,GAAsBjQ,KAAK+P,YAAYjP,EAIzCmP,IACAjQ,KAAKuJ,WAAW2G,cAAcD,GAItCjQ,KAAKiC,mBAAmBsF,gBAOpBzF,EAAZ3B,UAAA4P,YAAI,SAAoBjP,GAApB,GAAJ0B,GAAAxC,KACciQ,EAAsBjQ,KAAK4D,QAAQuM,KAAK,SAACnM,GAC3C,IAEI,MAAuB,OAAhBA,EAAOlD,OAAiB0B,EAAKgD,aAAaxB,EAAOlD,MAAOA,GACjE,MAAOsP,GAML,MALIC,GAAAA,aAEAC,QAAQC,KAAKH,IAGV,IAQf,OAJIH,IACAjQ,KAAKoG,eAAe0B,OAAOmI,GAGxBA,GAIHnO,EAAZ3B,UAAAsH,eAAI,WAAA,GAAJjF,GAAAxC,IACQA,MAAKuJ,WAAa,GAAIiH,GAAAA,2BAAqCxQ,KAAK4D,SAC3D6M,gBACAC,0BACAlH,0BAA0BxJ,KAAK+J,QAAU,MAAQ,OAEtD/J,KAAKuJ,WAAWoH,OACXvM,KAAK6C,EAAAA,UAAUjH,KAAKqF,UACpB6B,UAAU,WAGP1E,EAAKiJ,QACLjJ,EAAKuG,UAGb/I,KAAKuJ,WAAWqH,OACXxM,KAAK6C,EAAAA,UAAUjH,KAAKqF,UACpB6B,UAAU,WACH1E,EAAK0C,YAAc1C,EAAK8I,MACxB9I,EAAKqO,6BACGrO,EAAK0C,YAAe1C,EAAKuE,WAAYvE,EAAK+G,WAAWwF,YAC7DvM,EAAK+G,WAAWwF,WAAWQ,0BAMnCzN,EAAZ3B,UAAAgI,aAAI,WAAA,GAAJ3F,GAAAxC,KACc8Q,EAAqBjN,EAAAA,MAAM7D,KAAK4D,QAAQqE,QAASjI,KAAKqF,QAE5DrF,MAAK0D,uBACAU,KAAK6C,EAAAA,UAAU6J,IACf5J,UAAU,SAACS,GACRnF,EAAKuO,SAASpJ,EAAM9G,OAAQ8G,EAAMqJ,aAE9BrJ,EAAMqJ,cAAgBxO,EAAKuE,UAAYvE,EAAK0C,aAC5C1C,EAAKuG,QACLvG,EAAKiJ,WAMjB5H,EAAAA,MAARC,UAAA,GAAiB9D,KAAK4D,QAAQG,IAAI,SAACC,GAAW,MAAAA,GAAOiC,gBACxC7B,KAAK6C,EAAAA,UAAU6J,IACf5J,UAAU,WACP1E,EAAKP,mBAAmBsF,eACxB/E,EAAKyD,aAAaC,SAG1BlG,KAAKiR,gBAIDnP,EAAZ3B,UAAA4Q,SAAI,SAAiB/M,EAAkBgN,GACvC,GAAcE,GAAclR,KAAKoG,eAAe+K,WAAWnN,EAE/B,OAAhBA,EAAOlD,OAAkBd,KAAKgF,WAK1BhB,EAAOqG,SACPrK,KAAKoG,eAAe0B,OAAO9D,GAE3BhE,KAAKoG,eAAe4B,SAAShE,GAG7BgN,GACAhR,KAAKuJ,WAAW2G,cAAclM,GAG9BhE,KAAK+G,WACL/G,KAAKgQ,aAEDgB,GAKAhR,KAAKyL,WAtBbzH,EAAOgE,WACPhI,KAAKoG,eAAeyJ,QACpB7P,KAAKoR,iBAAiBpN,EAAOlD,QAyB7BoQ,IAAgBlR,KAAKoG,eAAe+K,WAAWnN,IAC/ChE,KAAKoR,mBAGTpR,KAAKiG,aAAaC,QAIdpE,EAAZ3B,UAAA6P,WAAI,WAAA,GAAJxN,GAAAxC,IACQ,IAAIA,KAAK+G,SAAU,CAC3B,GAAkBsK,GAAUrR,KAAK4D,QAAQ0N,SAE7BtR,MAAKoG,eAAemL,KAAK,SAACC,EAAG1R,GACzB,MAAO0C,GAAKiP,eAAiBjP,EAAKiP,eAAeD,EAAG1R,EAAGuR,GACnDA,EAAQK,QAAQF,GAAKH,EAAQK,QAAQ5R,KAE7CE,KAAKiG,aAAaC,SAKlBpE,EAAZ3B,UAAAiR,iBAAI,SAAyBO,GAC7B,GAAYC,GAAmB,IAGnBA,GADA5R,KAAK+G,SACU/G,KAAa,SAAgB+D,IAAI,SAACC,GAAW,MAAAA,GAAOlD,QAErDd,KAAKqK,SAAYrK,KAAa,SAAcc,MAAQ6Q,EAGtE3R,KAAKyG,OAASmL,EACd5R,KAAK8E,YAAYsC,KAAKwK,GACtB5R,KAAKsF,UAAUsM,GACf5R,KAAK6E,gBAAgBuC,KAAK,GAAIxG,GAAeZ,KAAM4R,IACnD5R,KAAKiC,mBAAmBsF,gBAIpBzF,EAAZ3B,UAAA8Q,aAAI,WACIjR,KAAK8C,UAAY9C,KAAK4D,QAAQG,IAAI,SAACC,GAAW,MAAAA,GAAO6B,KAAI6E,KAAK,MAO1D5I,EAAZ3B,UAAAuJ,uBAAI,WACQ1J,KAAKuJ,aACDvJ,KAAKsK,MACLtK,KAAKuJ,WAAWsF,qBAEhB7O,KAAKuJ,WAAW2G,cAAclQ,KAAKoG,eAAeiE,SAAS,MAM/DvI,EAAZ3B,UAAA0Q,2BAAI,WACJ,GAAcgB,GAAoB7R,KAAKuJ,WAAW8F,iBAAmB,EACvDyC,EAAaC,EAAAA,6BAA6BF,EAAmB7R,KAAK4D,QAAS5D,KAAKgS,aAEtFhS,MAAKsL,MAAMlC,cAAcjE,UAAY8M,EAAAA,wBACjCJ,EAAoBC,EACpB9R,KAAK+L,gBACL/L,KAAKsL,MAAMlC,cAAcjE,UACzB+M,EAAAA,0BAKApQ,EAAZ3B,UAAAgS,eAAI,SAAuBnO,GAEnB,MAAOhE,MAAK4D,QAAQwO,OAAO,SAACC,EAAgBC,EAAmBC,GAE3D,WAAkBC,KAAXH,EAAwBrO,IAAWsO,EAAUC,MAAQC,GAAaH,OAC1EG,KAIC1Q,EAAZ3B,UAAAsJ,yBAAI,WACJ,GAAcqC,GAAa9L,KAAK+L,gBAClB0G,EAAQzS,KAAK0S,eACbC,EAAcxG,KAAKC,IAAIqG,EAAQ3G,EAAYoG,EAAAA,yBAC3CU,EAAwBH,EAAQ3G,EAGhCD,EAAY+G,EAAwBD,EAGtCE,EACA7S,KAAKsK,MAAQ,EAAItK,KAAKmS,eAAenS,KAAKoG,eAAeiE,SAAS,GAEtEwI,IAAwBd,EAAAA,6BAA6Bc,EAAsB7S,KAAK4D,QAAS5D,KAAKgS,aAKtG,IAAcpG,GAAe+G,EAAc,CACnC3S,MAAKmF,UAAYnF,KAAK0L,uBAAuBmH,EAAsBjH,EAAcC,GACjF7L,KAAKoD,QAAUpD,KAAK8S,0BAEpB9S,KAAK+S,2BAA2BlH,IAU5B/J,EAAZ3B,UAAAkL,wBAAI,WACJ,GAKY/D,GALE0L,EAAchT,KAAKqH,WAAWsC,WAAWC,eAAeP,wBACxD4J,EAAejT,KAAKgC,eAAekR,kBACnCnJ,EAAQ/J,KAAK+J,QAEboJ,EAAwC,EAAzBC,EAAAA,uBAGf/I,EAAWrK,KAAKoG,eAAeiE,SAAS,IAAMrK,KAAK4D,QAAQyP,KACjE/L,GAAU+C,GAAYA,EAASiJ,MAAQC,EAAAA,8BAAgCH,EAAAA,uBAGlErJ,IAASzC,IAAY,EAGlC,IAAckM,GAAe,GAAKR,EAAYS,KAAOnM,GAAWyC,EAAQoJ,EAAe,IACzEO,EAAgBV,EAAYW,MAAQrM,EAAU2L,EAAahG,OAC1DlD,EAAQ,EAAIoJ,EAGfK,GAAe,EACflM,GAAWkM,EAAeI,EAAAA,8BACnBF,EAAgB,IACvBpM,GAAWoM,EAAgBE,EAAAA,+BAM/B5T,KAAKqH,WAAWC,QAAU6E,KAAK0H,MAAMvM,GACrCtH,KAAKqH,WAAWsC,WAAWmK,kBAQvBhS,EAAZ3B,UAAA2S,wBAAI,WAKI,MAAO,IAUHhR,EAAZ3B,UAAA4S,2BAAI,SAAmClH,GACvC,GAAcC,GAAa9L,KAAK+L,gBAClBkH,EAAejT,KAAKgC,eAAekR,kBAEnCa,EAAoB/T,KAAKkJ,YAAY8K,IAAMJ,EAAAA,8BAC3CK,EACFhB,EAAaiB,OAASlU,KAAKkJ,YAAYiL,OAASP,EAAAA,8BAE9CQ,EAAiBjI,KAAKkI,IAAIrU,KAAKoD,SAC/BkR,EACFnI,KAAKC,IAAIpM,KAAK0S,eAAiB5G,EAAYoG,EAAAA,yBACzCqC,EAAoBD,EAAmBF,EAAiBpU,KAAKkJ,YAAYgL,MAE3EK,GAAoBN,EACpBjU,KAAKwU,cAAcD,EAAmBN,GAC/BG,EAAiBL,EACxB/T,KAAKyU,gBAAgBL,EAAgBL,EAAmBlI,GAExD7L,KAAK+C,gBAAkB/C,KAAK0U,0BAK5B5S,EAAZ3B,UAAAqU,cAAI,SAAsBD,EAA2BN,GAErD,GAAcU,GAAwBxI,KAAK0H,MAAMU,EAAoBN,EAI7DjU,MAAKmF,WAAawP,EAClB3U,KAAKoD,SAAWuR,EAChB3U,KAAK+C,gBAAkB/C,KAAK0U,yBAKxB1U,KAAKmF,WAAa,IAClBnF,KAAKmF,UAAY,EACjBnF,KAAKoD,QAAU,EACfpD,KAAK+C,gBAAkB,mBAKvBjB,EAAZ3B,UAAAsU,gBAAI,SAAwBL,EAAwBL,EAA2BlI,GAE/E,GAAc+I,GAAwBzI,KAAK0H,MAAMO,EAAiBL,EAW1D,IAPA/T,KAAKmF,WAAayP,EAClB5U,KAAKoD,SAAWwR,EAChB5U,KAAK+C,gBAAkB/C,KAAK0U,yBAKxB1U,KAAKmF,WAAa0G,EAKlB,MAJA7L,MAAKmF,UAAY0G,EACjB7L,KAAKoD,QAAU,OACfpD,KAAK+C,gBAAkB,gBAOvBjB,EAAZ3B,UAAAuU,uBAAI,WACJ,GAAc5I,GAAa9L,KAAK+L,gBAElB8I,GAA0B/I,EAAa9L,KAAKkJ,YAAYgL,QAAU,CAIxE,OAAO,QAFS/H,KAAKkI,IAAIrU,KAAKoD,SAAWyR,EAAyB/I,EAAa,GAEvF,UAIYhK,EAAZ3B,UAAAuS,aAAI,WACI,MAAO1S,MAAK4D,QAAQqF,OAASjJ,KAAKgS,aAAa/I,QAI3CnH,EAAZ3B,UAAA4L,cAAI,WAGI,MAAO,oBAhnCfrK,KAACoT,EAAAA,UAADlT,OACIC,SAAU,YACVkT,SAAU,WACVC,SAAJ,0lEACIC,QAAS,mmEACTC,QAAS,WAAY,YACrBC,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,OACzCC,MACIC,YAAa,KACbC,kBAAmB,WACnBC,MAAO,YACPC,sBAAuB,WACvBC,4BAA6B,aAC7BC,6BAA8B,WAC9BC,YAAa,wBACbC,UAAW,YACXC,SAAU,WACVC,kBAAmB,0BAEvBC,YACIC,EAAAA,mBAAmBC,eACnBD,EAAAA,mBAAmBE,eAEvBC,YACMC,QAASC,EAAAA,mBAAoBC,YAAa7U,IAC1C2U,QAASG,EAAAA,2BAA4BD,YAAa7U,4CAnG5DJ,KAAImV,EAAAA,gBAzCJnV,KAAIoV,EAAAA,oBAWJpV,KAAIqV,EAAAA,SAMJrV,KAAesV,EAAAA,YAiCftV,KAAIuV,EAAAA,oBA5CJvV,KAAIwV,EAAAA,aAmBJxV,KAASyV,EAAAA,eAATC,aAAA1V,KAqXS2V,EAAAA,aAvXT3V,KAA8D4V,EAAAA,OAA9DF,aAAA1V,KAwXS2V,EAAAA,aAxXT3V,KAA+B6V,EAAAA,mBAA/BH,aAAA1V,KAyXS2V,EAAAA,aAxUT3V,KAAS8V,EAAAA,YAATJ,aAAA1V,KAyUS2V,EAAAA,aA1XT3V,KAAmD+V,EAAAA,UAAnDL,aAAA1V,KA2XSgW,EAAAA,OA3XThW,KA2XiB2V,EAAAA,aACjB3V,KAAAiW,OAAAP,aAAA1V,KAASkW,EAAAA,UAAThW,MAAmB,gBACnBF,SAAA8Q,GAAA4E,aAAA1V,KAASmW,EAAAA,OAATjW,MAAgBkW,EAAAA,kDApMhB3O,UAAAzH,KAAKqW,EAAAA,UAALnW,MAAe,aAEf0J,QAAA5J,KAAKqW,EAAAA,UAALnW,MAAe,WAEfyF,aAAA3F,KAAKqW,EAAAA,UAALnW,MAAeoW,EAAAA,uBAEf3P,OAAA3G,KAAKuW,EAAAA,aAALrW,MAAkBsW,EAAAA,SAGlBC,gBAAAzW,KAAK0W,EAAAA,aAALxW,MAAkBH,KAGlBmC,UAAAlC,KAAK2W,EAAAA,gBAALzW,MAAqB0W,EAAAA,UAAYC,aAAa,MAG9CvG,eAAAtQ,KAAK2W,EAAAA,gBAALzW,MAAqB4W,EAAAA,cAGrBC,aAAA/W,KAAKgX,EAAAA,QAGLC,oBAAAjX,KAAKgX,EAAAA,QAMLjH,iBAAA/P,KAAKgX,EAAAA,QAcLnU,eAAA7C,KAAKkX,EAAAA,SAGLnU,eAAA/C,KAAKkX,EAAAA,OAALhX,MAAY,YAIZgD,eAAAlD,KAAKkX,EAAAA,OAALhX,MAAY,YAIZiD,kBAAAnD,KAAKkX,EAAAA,SAOL9T,cAAApD,KAAKkX,EAAAA,SAELC,cAAAnX,KAAKgX,EAAAA,QAaLI,WAAApX,KAAKgX,EAAAA,QAaL3R,WAAArF,KAAKgX,EAAAA,QAoBLK,cAAArX,KAAKgX,EAAAA,QAoBL5X,QAAAY,KAAKgX,EAAAA,QAcL7S,KAAAnE,KAAKgX,EAAAA,SA24BL5W,GAzlC8BT,GCzI9B2X,EAAA,WAAA,QAAAA,MAY6B,sBAZ7BtX,KAACuX,EAAAA,SAADrX,OACIsX,SACIC,EAAAA,aACAC,EAAAA,cACAC,EAAAA,eACAC,EAAAA,aACAC,EAAAA,cAEJC,SAAUC,EAAAA,kBAAmB3X,EAAUL,EAAiB4X,EAAAA,eAAgBF,EAAAA,cACxEO,cAAe5X,EAAUL,GACzB+U,WAAYmD,EAAAA,wCAEhBX,gDDuEqC"}