{"version":3,"file":"mosaic-select.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../packages/mosaic/select/select.component.ts","../../packages/mosaic/select/select.module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/* tslint:disable:no-empty */\n\nimport {\n    AfterContentInit, AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Input,\n    isDevMode,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList, Renderer2,\n    Self,\n    SimpleChanges,\n    ViewChild, ViewChildren,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { ActiveDescendantKeyManager } from '@ptsecurity/cdk/a11y';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    RIGHT_ARROW,\n    SPACE,\n    UP_ARROW,\n    A,\n    PAGE_UP,\n    PAGE_DOWN\n} from '@ptsecurity/cdk/keycodes';\nimport {\n    CdkConnectedOverlay,\n    ViewportRuler\n} from '@ptsecurity/cdk/overlay';\nimport {\n    countGroupLabelsBeforeOption,\n    getOptionScrollPosition,\n    CanDisable,\n    CanDisableCtor,\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    HasTabIndex,\n    HasTabIndexCtor,\n    MC_OPTION_PARENT_COMPONENT,\n    McOptgroup,\n    McOption,\n    McOptionSelectionChange,\n    mixinDisabled,\n    mixinErrorState,\n    mixinTabIndex,\n    mcSelectAnimations,\n\n    SELECT_PANEL_INDENT_PADDING_X,\n    SELECT_PANEL_MAX_HEIGHT,\n    SELECT_PANEL_PADDING_X,\n    SELECT_PANEL_VIEWPORT_PADDING,\n\n    getMcSelectDynamicMultipleError,\n    getMcSelectNonFunctionValueError,\n    getMcSelectNonArrayValueError,\n    MC_SELECT_SCROLL_STRATEGY\n} from '@ptsecurity/mosaic/core';\nimport { McFormField, McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { McInput } from '@ptsecurity/mosaic/input';\nimport { McTag } from '@ptsecurity/mosaic/tags';\nimport { defer, merge, Observable, Subject, Subscription } from 'rxjs';\nimport {\n    filter,\n    map,\n    startWith,\n    switchMap,\n    take,\n    takeUntil,\n    distinctUntilChanged\n} from 'rxjs/operators';\n\n\nlet nextUniqueId = 0;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 2;\n\n/** Change event object that is emitted when the select value has changed. */\nexport class McSelectChange {\n    constructor(public source: McSelect, public value: any) {}\n}\n\nexport class McSelectBase {\n    constructor(\n        public elementRef: ElementRef,\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {}\n}\n\nconst McSelectMixinBase: CanDisableCtor & HasTabIndexCtor & CanUpdateErrorStateCtor &\n    typeof McSelectBase = mixinTabIndex(mixinDisabled(mixinErrorState(McSelectBase)));\n\n@Directive({\n    selector: '[mcSelectSearch]',\n    exportAs: 'mcSelectSearch'\n})\nexport class McSelectSearch implements AfterContentInit, OnDestroy {\n    @ContentChild(McInput, {static: false}) input: McInput;\n\n    searchChangesSubscription: Subscription = new Subscription();\n\n    isSearchChanged: boolean = false;\n\n    focus(): void {\n        this.input.focus();\n    }\n\n    reset(): void {\n        this.input.ngControl.reset();\n    }\n\n    ngAfterContentInit(): void {\n        if (!this.input) {\n            throw Error('McSelectSearch does not work without input');\n        }\n\n        if (!this.input.ngControl) {\n            throw Error('McSelectSearch does not work without ngControl');\n        }\n\n        this.searchChangesSubscription = this.input.ngControl.valueChanges!.subscribe(() => {\n            this.isSearchChanged = true;\n        });\n    }\n\n    ngOnDestroy(): void {\n        this.searchChangesSubscription.unsubscribe();\n    }\n}\n\n\n\n@Directive({ selector: 'mc-select-trigger' })\nexport class McSelectTrigger {}\n\n\n@Component({\n    selector: 'mc-select',\n    exportAs: 'mcSelect',\n    templateUrl: 'select.html',\n    styleUrls: ['./select.css'],\n    inputs: ['disabled', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'tabIndex',\n        class: 'mc-select',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-select-invalid]': 'errorState',\n        '[class.mc-select-required]': 'required',\n        '(keydown)': 'handleKeydown($event)',\n        '(focus)': 'onFocus()',\n        '(blur)': 'onBlur()',\n        '(window:resize)': 'calculateHiddenItems()'\n    },\n    animations: [\n        mcSelectAnimations.transformPanel,\n        mcSelectAnimations.fadeInContent\n    ],\n    providers: [\n        { provide: McFormFieldControl, useExisting: McSelect },\n        { provide: MC_OPTION_PARENT_COMPONENT, useExisting: McSelect }\n    ]\n})\nexport class McSelect extends McSelectMixinBase implements\n    AfterContentInit, AfterViewInit, OnChanges, OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable,\n    HasTabIndex, McFormFieldControl<any>, CanUpdateErrorState {\n\n    /** A name for this control that can be used by `mc-form-field`. */\n    controlType = 'mc-select';\n\n    hiddenItems: number = 0;\n    oneMoreText: string = '...ещё';\n\n    /** The last measured value for the trigger's client bounding rect. */\n    triggerRect: ClientRect;\n\n    /** The cached font-size of the trigger element. */\n    triggerFontSize = 0;\n\n    /** Deals with the selection logic. */\n    selectionModel: SelectionModel<McOption>;\n\n    previousSelectionModelSelected: McOption[] = [];\n\n    /** Manages keyboard events for options in the panel. */\n    keyManager: ActiveDescendantKeyManager<McOption>;\n\n    /** The IDs of child options to be passed to the aria-owns attribute. */\n    optionIds: string = '';\n\n    /** The value of the select panel's transform-origin property. */\n    transformOrigin: string = 'top';\n\n    /** Whether the panel's animation is done. */\n    panelDoneAnimating: boolean = false;\n\n    /** Emits when the panel element is finished transforming in. */\n    panelDoneAnimatingStream = new Subject<string>();\n\n    /** Strategy that will be used to handle scrolling while the select panel is open. */\n    scrollStrategy = this._scrollStrategyFactory();\n\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n    offsetY = 0;\n\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n    positions = [\n        {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top'\n        },\n        {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom'\n        }\n    ];\n\n    @ViewChild('trigger', {static: false}) trigger: ElementRef;\n\n    @ViewChild('panel', {static: false}) panel: ElementRef;\n\n    @ViewChild('optionsContainer', {static: false}) optionsContainer: ElementRef;\n\n    @ViewChild(CdkConnectedOverlay, {static: false}) overlayDir: CdkConnectedOverlay;\n\n    @ViewChildren(McTag) tags: QueryList<McTag>;\n\n    /** User-supplied override of the trigger element. */\n    @ContentChild(McSelectTrigger, {static: false}) customTrigger: McSelectTrigger;\n\n    /** All of the defined select options. */\n    @ContentChildren(McOption, { descendants: true }) options: QueryList<McOption>;\n\n    /** All of the defined groups of options. */\n    @ContentChildren(McOptgroup) optionGroups: QueryList<McOptgroup>;\n\n    @ContentChild(McSelectSearch, {static: false}) search: McSelectSearch;\n\n    /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n    @Input() panelClass: string | string[] | Set<string> | { [key: string]: any };\n\n    /** Object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Function used to sort the values in a select in multiple mode.\n     * Follows the same logic as `Array.prototype.sort`.\n     */\n    @Input() sortComparator: (a: McOption, b: McOption, options: McOption[]) => number;\n\n    /** Combined stream of all of the child options' change events. */\n    readonly optionSelectionChanges: Observable<McOptionSelectionChange> = defer(() => {\n        if (this.options) {\n            return merge(\n                ...this.options.map((option) => option.onSelectionChange),\n                ...this.selectionModel.selected.map((option) => option.onSelectionChange)\n            );\n        }\n\n        return this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n    }) as Observable<McOptionSelectionChange>;\n\n    /** Event emitted when the select panel has been toggled. */\n    @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted when the select has been opened. */\n    @Output('opened') readonly openedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => o), map(() => {}));\n\n    /** Event emitted when the select has been closed. */\n    @Output('closed') readonly closedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => !o), map(() => {}));\n\n    /** Event emitted when the selected value has been changed by the user. */\n    @Output() readonly selectionChange: EventEmitter<McSelectChange> = new EventEmitter<McSelectChange>();\n\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    @Input()\n    get placeholder(): string {\n        return this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n\n        this.stateChanges.next();\n    }\n\n    private _placeholder: string;\n\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n\n        this.stateChanges.next();\n    }\n\n    private _required: boolean = false;\n\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        if (this.selectionModel) {\n            throw getMcSelectDynamicMultipleError();\n        }\n\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    private _multiple: boolean = false;\n\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith() {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        /* tslint:disable-next-line:strict-type-predicates */\n        if (typeof fn !== 'function') {\n            throw getMcSelectNonFunctionValueError();\n        }\n\n        this._compareWith = fn;\n\n        if (this.selectionModel) {\n            // A different comparator means the selection could change.\n            this.initializeSelection();\n        }\n    }\n\n    /** Value of the select control. */\n    @Input()\n    get value(): any {\n        return this._value;\n    }\n\n    set value(newValue: any) {\n        if (newValue !== this._value) {\n            this.writeValue(newValue);\n            this._value = newValue;\n        }\n    }\n\n    private _value: any;\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n        this.stateChanges.next();\n    }\n\n    private _id: string;\n\n    /** Whether the select is focused. */\n    get focused(): boolean {\n        return this._focused || this._panelOpen;\n    }\n\n    /**\n     * @deprecated Setter to be removed as this property is intended to be readonly.\n     * @breaking-change 8.0.0\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n\n    private _focused = false;\n\n    get panelOpen(): boolean {\n        return this._panelOpen;\n    }\n\n    private _panelOpen = false;\n\n    /** The scroll position of the overlay panel, calculated to center the selected option. */\n    private scrollTop = 0;\n\n    /** Unique id for this input. */\n    private readonly uid = `mc-select-${nextUniqueId++}`;\n\n    /** Emits whenever the component is destroyed. */\n    private readonly destroy = new Subject<void>();\n\n    constructor(\n        private readonly _viewportRuler: ViewportRuler,\n        private readonly _changeDetectorRef: ChangeDetectorRef,\n        private readonly _ngZone: NgZone,\n        private readonly _renderer: Renderer2,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        elementRef: ElementRef,\n        @Optional() private readonly _dir: Directionality,\n        @Optional() parentForm: NgForm,\n        @Optional() parentFormGroup: FormGroupDirective,\n        @Optional() private readonly _parentFormField: McFormField,\n        @Self() @Optional() public ngControl: NgControl,\n        @Attribute('tabindex') tabIndex: string,\n        @Inject(MC_SELECT_SCROLL_STRATEGY) private readonly _scrollStrategyFactory\n    ) {\n        super(elementRef, defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnInit() {\n        this.selectionModel = new SelectionModel<McOption>(this.multiple);\n        this.stateChanges.next();\n\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this.panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this.panelOpen) {\n                    this.scrollTop = 0;\n                    this.openedChange.emit(true);\n                } else {\n                    this.openedChange.emit(false);\n                    this.panelDoneAnimating = false;\n                    this.overlayDir.offsetX = 0;\n                    this._changeDetectorRef.markForCheck();\n                }\n            });\n    }\n\n    ngAfterContentInit() {\n        this.initKeyManager();\n\n        this.selectionModel.changed\n            .pipe(takeUntil(this.destroy))\n            .subscribe((event) => {\n                event.added.forEach((option) => option.select());\n                event.removed.forEach((option) => option.deselect());\n            });\n\n        this.options.changes\n            .pipe(startWith(null), takeUntil(this.destroy))\n            .subscribe(() => {\n                this.resetOptions();\n                this.initializeSelection();\n            });\n    }\n\n    ngAfterViewInit(): void {\n        this.tags.changes\n            .subscribe(() => {\n                setTimeout(() => this.calculateHiddenItems(), 0);\n            });\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) { this.updateErrorState(); }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes.disabled) {\n            this.stateChanges.next();\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroy.next();\n        this.destroy.complete();\n        this.stateChanges.complete();\n    }\n\n    /** `View -> model callback called when value changes` */\n    onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when select has been touched` */\n    onTouched = () => {};\n\n    resetSearch(): void {\n        if (this.search) {\n            this.search.reset();\n        }\n    }\n\n    /** Toggles the overlay panel open or closed. */\n    toggle(): void {\n        if (this.panelOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    /** Opens the overlay panel. */\n    open(): void {\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) { return; }\n\n        this.triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this.triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n        this._panelOpen = true;\n        this.keyManager.withHorizontalOrientation(null);\n        this.calculateOverlayPosition();\n        this.highlightCorrectOption();\n        this._changeDetectorRef.markForCheck();\n\n        // Set the font size on the panel element once it exists.\n        this._ngZone.onStable.asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                if (this.triggerFontSize && this.overlayDir.overlayRef && this.overlayDir.overlayRef.overlayElement) {\n                    this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this.triggerFontSize}px`;\n                }\n            });\n\n        this.resetSearch();\n    }\n\n    /** Closes the overlay panel and focuses the host element. */\n    close(): void {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this.keyManager.withHorizontalOrientation(this.isRtl() ? 'rtl' : 'ltr');\n\n            this._changeDetectorRef.markForCheck();\n            this.onTouched();\n        }\n    }\n\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value: any): void {\n        if (this.options) {\n            this.setSelectionByValue(value);\n        }\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn: (value: any) => void): void {\n        this.onChange = fn;\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn: () => {}): void {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    get selected(): McOption | McOption[] {\n        return this.multiple ? this.selectionModel.selected : this.selectionModel.selected[0];\n    }\n\n    get triggerValue(): string {\n        if (this.empty) { return ''; }\n\n        if (this._multiple) {\n            const selectedOptions = this.selectionModel.selected.map((option) => option.viewValue);\n\n            if (this.isRtl()) { selectedOptions.reverse(); }\n\n            return selectedOptions.join(', ');\n        }\n\n        return this.selectionModel.selected[0].viewValue;\n    }\n\n    get triggerValues(): McOption[] {\n        if (this.empty) { return []; }\n\n        if (this._multiple) {\n            const selectedOptions = this.selectionModel.selected;\n\n            if (this.isRtl()) { selectedOptions.reverse(); }\n\n            return selectedOptions;\n        }\n\n        return [this.selectionModel.selected[0]];\n    }\n\n    get empty(): boolean {\n        return !this.selectionModel || this.selectionModel.isEmpty();\n    }\n\n    isRtl(): boolean {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n\n    handleKeydown(event: KeyboardEvent): void {\n        if (!this.disabled) {\n            if (this.panelOpen) {\n                this.handleOpenKeydown(event);\n            } else {\n                this.handleClosedKeydown(event);\n            }\n        }\n    }\n\n    /**\n     * When the panel content is done fading in, the panelDoneAnimating property is\n     * set so the proper class can be added to the panel.\n     */\n    onFadeInDone(): void {\n        this.panelDoneAnimating = this.panelOpen;\n        this._changeDetectorRef.markForCheck();\n\n        if (this.search && this._panelOpen) {\n            this.search.focus();\n        }\n    }\n\n    onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    onBlur() {\n        this._focused = false;\n\n        if (!this.disabled && !this.panelOpen) {\n            this.onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    onAttached(): void {\n        this.overlayDir.positionChange\n            .pipe(take(1))\n            .subscribe(() => {\n                this._changeDetectorRef.detectChanges();\n                this.calculateOverlayOffsetX();\n                this.optionsContainer.nativeElement.scrollTop = this.scrollTop;\n\n                this.updateScrollSize();\n            });\n    }\n\n    /** Returns the theme to be used on the panel. */\n    getPanelTheme(): string {\n        return this._parentFormField ? `mc-${this._parentFormField.color}` : '';\n    }\n\n    /** Focuses the select element. */\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    calculateOverlayScroll(selectedIndex: number, scrollBuffer: number, maxScroll: number): number {\n        const itemHeight = this.getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n\n        /* tslint:disable-next-line:no-magic-numbers */\n        const halfOptionHeight = itemHeight / 2;\n\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n\n    /** Invoked when an option is clicked. */\n    onRemoveMatcherItem(option: McOption, $event): void {\n        $event.stopPropagation();\n\n        option.deselect();\n    }\n\n    calculateHiddenItems(): void {\n        if (this.empty || !this.multiple) { return; }\n\n        let visibleItems: number = 0;\n        const totalItemsWidth = this.getTotalItemsWidthInMatcher();\n        let totalVisibleItemsWidth: number = 0;\n        const itemMargin: number = 4;\n\n        this.tags.forEach((tag) => {\n            if (tag.nativeElement.offsetTop < tag.nativeElement.offsetHeight) {\n                totalVisibleItemsWidth += tag.nativeElement.getBoundingClientRect().width + itemMargin;\n                visibleItems++;\n            }\n        });\n\n        this.hiddenItems = (this.selected as ArrayLike<McOption>).length - visibleItems;\n\n        if (this.hiddenItems) {\n            const itemsCounter = this.trigger.nativeElement.querySelector('.mc-select__match-hidden-text');\n            const matcherList = this.trigger.nativeElement.querySelector('.mc-select__match-list');\n\n            const itemsCounterShowed = itemsCounter.offsetTop < itemsCounter.offsetHeight;\n            // const itemsCounterWidth: number = itemsCounter.getBoundingClientRect().width;\n            const itemsCounterWidth: number = 86;\n\n            const matcherListWidth: number = matcherList.getBoundingClientRect().width;\n            const matcherWidth: number = matcherListWidth + itemsCounterWidth;\n\n            if (itemsCounterShowed && (totalItemsWidth < matcherWidth)) { this.hiddenItems = 0; }\n\n            if (\n                totalVisibleItemsWidth === matcherListWidth ||\n                (totalVisibleItemsWidth + itemsCounterWidth) < matcherListWidth\n            ) {\n                this._changeDetectorRef.markForCheck();\n\n                return ;\n            } else if (!itemsCounterShowed && (totalItemsWidth + itemsCounterWidth) > matcherWidth) {\n                this.hiddenItems++;\n            }\n        }\n\n        this._changeDetectorRef.markForCheck();\n    }\n\n    private getHeightOfOptionsContainer(): number {\n        return this.optionsContainer.nativeElement.getClientRects()[0].height;\n    }\n\n    private updateScrollSize(): void {\n        if (!this.options.first) { return; }\n\n        this.keyManager.withScrollSize(\n            Math.floor(this.getHeightOfOptionsContainer() / this.options.first.getHeight())\n        );\n    }\n\n    private getTotalItemsWidthInMatcher(): number {\n        const triggerClone = this.trigger.nativeElement.cloneNode(true);\n        triggerClone.querySelector('.mc-select__match-hidden-text').remove();\n\n        this._renderer.setStyle(triggerClone, 'position', 'absolute');\n        this._renderer.setStyle(triggerClone, 'visibility', 'hidden');\n        this._renderer.setStyle(triggerClone, 'top', '-100%');\n        this._renderer.setStyle(triggerClone, 'left', '0');\n\n        this._renderer.appendChild(this.trigger.nativeElement, triggerClone);\n\n        let totalItemsWidth: number = 0;\n        const itemMargin: number = 4;\n        triggerClone.querySelectorAll('mc-tag').forEach((item) => {\n            totalItemsWidth += item.getBoundingClientRect().width as number + itemMargin;\n        });\n\n        triggerClone.remove();\n\n        return totalItemsWidth;\n    }\n\n    /** Handles keyboard events while the select is closed. */\n    private handleClosedKeydown(event: KeyboardEvent): void {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n        // Open the select on ALT + arrow key to match the native <select>\n        if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        } else if (!this.multiple) {\n            this.keyManager.onKeydown(event);\n        }\n    }\n\n    /** Handles keyboard events when the selected is open. */\n    private handleOpenKeydown(event: KeyboardEvent): void {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const manager = this.keyManager;\n\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n        } else if (keyCode === HOME) {\n            event.preventDefault();\n\n            manager.setFirstItemActive();\n        } else if (keyCode === END) {\n            event.preventDefault();\n\n            manager.setLastItemActive();\n        } else if (keyCode === PAGE_UP) {\n            event.preventDefault();\n\n            manager.setPreviousPageItemActive();\n        } else if (keyCode === PAGE_DOWN) {\n            event.preventDefault();\n\n            manager.setNextPageItemActive();\n        } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n            event.preventDefault();\n            manager.activeItem.selectViaInteraction();\n        } else if (this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some((option) => !option.selected);\n            this.options.forEach((option) => {\n                if (hasDeselectedOptions && !option.disabled) {\n                    option.select();\n                } else {\n                    option.deselect();\n                }\n            });\n        } else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n\n            manager.onKeydown(event);\n\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem.selectViaInteraction();\n            }\n        }\n    }\n\n    private initializeSelection(): void {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this.setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n        });\n    }\n\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    private setSelectionByValue(value: any | any[]): void {\n        this.previousSelectionModelSelected = this.selectionModel.selected;\n\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw getMcSelectNonArrayValueError();\n            }\n\n            this.selectionModel.clear();\n            value.forEach((currentValue: any) => this.selectValue(currentValue));\n            this.sortValues();\n        } else {\n            this.selectionModel.clear();\n            const correspondingOption = this.selectValue(value);\n\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this.keyManager.setActiveItem(correspondingOption);\n            }\n        }\n\n        this._changeDetectorRef.markForCheck();\n    }\n\n    private getCorrespondOption(value: any): McOption | undefined {\n        return [\n            ...this.options.toArray(),\n            ...this.previousSelectionModelSelected\n        ].find((option: McOption) => {\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            } catch (error) {\n                if (isDevMode()) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n\n                return false;\n            }\n        });\n    }\n\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    private selectValue(value: any): McOption | undefined {\n        const correspondingOption = this.getCorrespondOption(value);\n\n        if (correspondingOption) {\n            this.selectionModel.select(correspondingOption);\n        }\n\n        return correspondingOption;\n    }\n\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    private initKeyManager() {\n        const typeAheadDebounce = 200;\n\n        this.keyManager = new ActiveDescendantKeyManager<McOption>(this.options)\n            .withTypeAhead(typeAheadDebounce, this.search ? -1 : 0)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this.isRtl() ? 'rtl' : 'ltr');\n\n        this.keyManager.tabOut\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            });\n\n        this.keyManager.change\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this._panelOpen && this.panel) {\n                    this.scrollActiveOptionIntoView();\n                } else if (!this._panelOpen && !this.multiple && this.keyManager.activeItem) {\n                    this.keyManager.activeItem.selectViaInteraction();\n                }\n            });\n    }\n\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    private resetOptions(): void {\n        const changedOrDestroyed = merge(this.options.changes, this.destroy);\n\n        this.optionSelectionChanges\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe((event) => {\n                this.onSelect(event.source, event.isUserInput);\n\n                if (this.search && this.search.isSearchChanged) {\n                    Promise.resolve().then(() => this.keyManager.setFirstItemActive());\n\n                    this.search.isSearchChanged = false;\n                }\n\n                if (event.isUserInput && !this.multiple && this._panelOpen) {\n                    this.close();\n                    this.focus();\n                }\n            });\n\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map((option) => option.stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n                this._changeDetectorRef.markForCheck();\n                this.stateChanges.next();\n            });\n\n        this.setOptionIds();\n    }\n\n    /** Invoked when an option is clicked. */\n    private onSelect(option: McOption, isUserInput: boolean): void {\n        const wasSelected = this.selectionModel.isSelected(option);\n\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this.selectionModel.clear();\n            this.propagateChanges(option.value);\n        } else {\n            if (option.selected) {\n                this.selectionModel.select(option);\n            } else {\n                this.selectionModel.deselect(option);\n            }\n\n            if (isUserInput) {\n                this.keyManager.setActiveItem(option);\n            }\n\n            if (this.multiple) {\n                this.sortValues();\n\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mc-option`.\n                    // If search is avaliable then we focus search again.\n                    if (this.search) {\n                        this.search.focus();\n                    } else {\n                        this.focus();\n                    }\n                }\n            }\n        }\n\n        if (wasSelected !== this.selectionModel.isSelected(option)) {\n            this.propagateChanges();\n        }\n\n        this.stateChanges.next();\n    }\n\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    private sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n\n            this.selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n\n    /** Emits change event to set the model value. */\n    private propagateChanges(fallbackValue?: any): void {\n        let valueToEmit: any = null;\n\n        if (this.multiple) {\n            valueToEmit = (this.selected as McOption[]).map((option) => option.value);\n        } else {\n            valueToEmit = this.selected ? (this.selected as McOption).value : fallbackValue;\n        }\n\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this.onChange(valueToEmit);\n        this.selectionChange.emit(new McSelectChange(this, valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /** Records option IDs to pass to the aria-owns property. */\n    private setOptionIds() {\n        this.optionIds = this.options.map((option) => option.id).join(' ');\n    }\n\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    private highlightCorrectOption(): void {\n        if (this.keyManager) {\n            if (this.empty) {\n                this.keyManager.setFirstItemActive();\n            } else {\n                this.keyManager.setActiveItem(this.selectionModel.selected[0]);\n            }\n        }\n    }\n\n    /** Scrolls the active option into view. */\n    private scrollActiveOptionIntoView(): void {\n        const activeOptionIndex = this.keyManager.activeItemIndex || 0;\n        const labelCount = countGroupLabelsBeforeOption(activeOptionIndex, this.options, this.optionGroups);\n\n        this.optionsContainer.nativeElement.scrollTop = getOptionScrollPosition(\n            activeOptionIndex + labelCount,\n            this.getItemHeight(),\n            this.optionsContainer.nativeElement.scrollTop,\n            SELECT_PANEL_MAX_HEIGHT\n        );\n    }\n\n    /** Gets the index of the provided option in the option list. */\n    private getOptionIndex(option: McOption): number | undefined {\n        /* tslint:disable-next-line */\n        return this.options.reduce((result: number, current: McOption, index: number) => {\n            /* tslint:disable-next-line:strict-type-predicates */\n            return result === undefined ? (option === current ? index : undefined) : result;\n        }, undefined);\n    }\n\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    private calculateOverlayPosition(): void {\n        const itemHeight = this.getItemHeight();\n        const items = this.getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n\n        // If no value is selected we open the popup to the first item.\n        let selectedOptionOffset =\n            this.empty ? 0 : this.getOptionIndex(this.selectionModel.selected[0])!;\n\n        selectedOptionOffset += countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        /* tslint:disable-next-line:no-magic-numbers */\n        const scrollBuffer = panelHeight / 2;\n        this.scrollTop = this.calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this.offsetY = this.calculateOverlayOffsetY();\n\n        this.checkOverlayWithinViewport(maxScroll);\n    }\n\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    private calculateOverlayOffsetX(): void {\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const isRtl = this.isRtl();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const paddingWidth = SELECT_PANEL_PADDING_X * 2;\n        let offsetX: number;\n\n        const selected = this.selectionModel.selected[0] || this.options.first;\n        offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n\n        // Invert the offset in LTR.\n        if (!isRtl) { offsetX *= -1; }\n\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        } else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    private calculateOverlayOffsetY(): number {\n        // const itemHeight = this.getItemHeight();\n        // const optionHeightAdjustment = (itemHeight - this.triggerRect.height) / 2;\n\n        // todo I'm not sure that we will use it\n        return 0;\n        // return Math.round(-optionHeightAdjustment);\n    }\n\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    private checkOverlayWithinViewport(maxScroll: number): void {\n        const itemHeight = this.getItemHeight();\n        const viewportSize = this._viewportRuler.getViewportSize();\n\n        const topSpaceAvailable = this.triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable =\n            viewportSize.height - this.triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n        const panelHeightTop = Math.abs(this.offsetY);\n        const totalPanelHeight =\n            Math.min(this.getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this.triggerRect.height;\n\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this.adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        } else if (panelHeightTop > topSpaceAvailable) {\n            this.adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        } else {\n            this.transformOrigin = this.getOriginBasedOnOption();\n        }\n    }\n\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    private adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this.scrollTop -= distanceBelowViewport;\n        this.offsetY -= distanceBelowViewport;\n        this.transformOrigin = this.getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this.scrollTop <= 0) {\n            this.scrollTop = 0;\n            this.offsetY = 0;\n            this.transformOrigin = `50% bottom 0px`;\n        }\n    }\n\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    private adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number, maxScroll: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this.scrollTop += distanceAboveViewport;\n        this.offsetY += distanceAboveViewport;\n        this.transformOrigin = this.getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this.scrollTop >= maxScroll) {\n            this.scrollTop = maxScroll;\n            this.offsetY = 0;\n            this.transformOrigin = `50% top 0px`;\n\n            return;\n        }\n    }\n\n    /** Sets the transform origin point based on the selected option. */\n    private getOriginBasedOnOption(): string {\n        const itemHeight = this.getItemHeight();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const optionHeightAdjustment = (itemHeight - this.triggerRect.height) / 2;\n        /* tslint:disable-next-line:no-magic-numbers */\n        const originY = Math.abs(this.offsetY) - optionHeightAdjustment + itemHeight / 2;\n\n        return `50% ${originY}px 0px`;\n    }\n\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    private getItemCount(): number {\n        return this.options.length + this.optionGroups.length;\n    }\n\n    /** Calculates the height of the select's options. */\n    private getItemHeight(): number {\n        // todo доделать\n        /* tslint:disable-next-line:no-magic-numbers */\n        return 32;\n        // return this.triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { MC_SELECT_SCROLL_STRATEGY_PROVIDER, McOptionModule } from '@ptsecurity/mosaic/core';\nimport { McFormFieldModule } from '@ptsecurity/mosaic/form-field';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\nimport { McTagsModule } from '@ptsecurity/mosaic/tags';\n\nimport { McSelect, McSelectSearch, McSelectTrigger } from './select.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        McOptionModule,\n        McIconModule,\n        McTagsModule\n    ],\n    exports: [\n        McFormFieldModule,\n        McSelect,\n        McSelectSearch,\n        McSelectTrigger,\n        McOptionModule,\n        CommonModule\n    ],\n    declarations: [\n        McSelect,\n        McSelectSearch,\n        McSelectTrigger],\n    providers: [MC_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class McSelectModule {}\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","setPrototypeOf","__proto__","Array","p","hasOwnProperty","nextUniqueId","McSelectChange","source","value","McSelectBase","elementRef","defaultErrorStateMatcher","parentForm","parentFormGroup","ngControl","McSelectMixinBase","mixinTabIndex","mixinDisabled","mixinErrorState","McSelectSearch","searchChangesSubscription","Subscription","isSearchChanged","focus","input","reset","ngAfterContentInit","_this","Error","subscribe","ngOnDestroy","unsubscribe","type","Directive","args","selector","exportAs","ContentChild","McInput","static","McSelectTrigger","McSelect","_super","_viewportRuler","_changeDetectorRef","_ngZone","_renderer","_dir","_parentFormField","tabIndex","_scrollStrategyFactory","call","controlType","hiddenItems","oneMoreText","triggerFontSize","previousSelectionModelSelected","optionIds","transformOrigin","panelDoneAnimating","panelDoneAnimatingStream","Subject","scrollStrategy","offsetY","positions","originX","originY","overlayX","overlayY","optionSelectionChanges","defer","options","merge","apply","map","option","onSelectionChange","concat","selectionModel","selected","onStable","asObservable","pipe","take","switchMap","openedChange","EventEmitter","openedStream","filter","o","closedStream","selectionChange","valueChange","_required","_multiple","_focused","_panelOpen","scrollTop","uid","destroy","onChange","onTouched","_compareWith","o1","o2","valueAccessor","parseInt","id","tslib_1.__extends","defineProperty","_placeholder","stateChanges","next","coerceBooleanProperty","getMcSelectDynamicMultipleError","fn","getMcSelectNonFunctionValueError","initializeSelection","_value","newValue","writeValue","_id","ngOnInit","SelectionModel","multiple","distinctUntilChanged","takeUntil","panelOpen","emit","overlayDir","offsetX","markForCheck","initKeyManager","changed","event","added","forEach","select","removed","deselect","changes","startWith","resetOptions","ngAfterViewInit","tags","setTimeout","calculateHiddenItems","ngDoCheck","updateErrorState","ngOnChanges","disabled","complete","resetSearch","search","toggle","close","open","length","triggerRect","trigger","nativeElement","getBoundingClientRect","getComputedStyle","keyManager","withHorizontalOrientation","calculateOverlayPosition","highlightCorrectOption","overlayRef","overlayElement","style","fontSize","isRtl","setSelectionByValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","empty","selectedOptions","viewValue","reverse","join","isEmpty","handleKeydown","handleOpenKeydown","handleClosedKeydown","onFadeInDone","onFocus","onBlur","onAttached","positionChange","detectChanges","calculateOverlayOffsetX","optionsContainer","updateScrollSize","getPanelTheme","color","calculateOverlayScroll","selectedIndex","scrollBuffer","maxScroll","itemHeight","getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","Math","min","max","onContainerClick","onRemoveMatcherItem","$event","stopPropagation","visibleItems","totalItemsWidth","getTotalItemsWidthInMatcher","totalVisibleItemsWidth","tag","offsetTop","offsetHeight","width","itemsCounter","querySelector","matcherList","itemsCounterShowed","matcherListWidth","matcherWidth","getHeightOfOptionsContainer","getClientRects","height","first","withScrollSize","floor","getHeight","triggerClone","cloneNode","remove","setStyle","appendChild","querySelectorAll","item","keyCode","isArrowKey","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","ENTER","SPACE","altKey","preventDefault","onKeydown","manager","HOME","setFirstItemActive","END","setLastItemActive","PAGE_UP","setPreviousPageItemActive","PAGE_DOWN","setNextPageItemActive","activeItem","A","ctrlKey","hasDeselectedOptions_1","some","previouslyFocusedIndex","activeItemIndex","shiftKey","selectViaInteraction","Promise","resolve","then","isArray","getMcSelectNonArrayValueError","clear","currentValue","selectValue","sortValues","correspondingOption","setActiveItem","getCorrespondOption","toArray","find","error","isDevMode","console","warn","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","tabOut","change","panel","scrollActiveOptionIntoView","changedOrDestroyed","onSelect","isUserInput","setOptionIds","wasSelected","isSelected","propagateChanges","options_1","sort","a","sortComparator","indexOf","fallbackValue","valueToEmit","activeOptionIndex","labelCount","countGroupLabelsBeforeOption","optionGroups","getOptionScrollPosition","SELECT_PANEL_MAX_HEIGHT","getOptionIndex","reduce","result","current","index","undefined","items","getItemCount","panelHeight","scrollContainerHeight","selectedOptionOffset","calculateOverlayOffsetY","checkOverlayWithinViewport","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_PANEL_PADDING_X","group","SELECT_PANEL_INDENT_PADDING_X","leftOverflow","left","rightOverflow","right","SELECT_PANEL_VIEWPORT_PADDING","round","updatePosition","topSpaceAvailable","top","bottomSpaceAvailable","bottom","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","adjustPanelUp","adjustPanelDown","getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","optionHeightAdjustment","Component","template","styles","inputs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","host","[attr.id]","[attr.tabindex]","class","[class.mc-disabled]","[class.mc-select-invalid]","[class.mc-select-required]","(keydown)","(focus)","(blur)","(window:resize)","animations","mcSelectAnimations","transformPanel","fadeInContent","providers","provide","McFormFieldControl","useExisting","MC_OPTION_PARENT_COMPONENT","ViewportRuler","ChangeDetectorRef","NgZone","Renderer2","ErrorStateMatcher","ElementRef","Directionality","decorators","Optional","NgForm","FormGroupDirective","McFormField","NgControl","Self","String","Attribute","Inject","MC_SELECT_SCROLL_STRATEGY","ViewChild","CdkConnectedOverlay","ViewChildren","McTag","customTrigger","ContentChildren","McOption","descendants","McOptgroup","panelClass","Input","errorStateMatcher","Output","placeholder","required","compareWith","McSelectModule","NgModule","imports","CommonModule","OverlayModule","McOptionModule","McIconModule","McTagsModule","exports","McFormFieldModule","declarations","MC_SELECT_SCROLL_STRATEGY_PROVIDER"],"mappings":"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"}