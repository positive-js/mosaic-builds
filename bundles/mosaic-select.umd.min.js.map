{"version":3,"file":"mosaic-select.umd.min.js","sources":["../../src/lib/select/select-errors.ts","../../src/lib/select/select.component.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/select/select-animations.ts","../../src/lib/select/select.module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMcSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMcSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMcSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/* tslint:disable:no-empty */\n\nimport { ActiveDescendantKeyManager } from '@ptsecurity/cdk/a11y';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    RIGHT_ARROW,\n    SPACE,\n    UP_ARROW,\n    A\n} from '@ptsecurity/cdk/keycodes';\nimport {\n    CdkConnectedOverlay,\n    Overlay,\n    RepositionScrollStrategy,\n    IScrollStrategy,\n    ViewportRuler\n} from '@ptsecurity/cdk/overlay';\n\nimport {\n    AfterContentInit, AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    isDevMode,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList, Renderer2,\n    Self,\n    SimpleChanges,\n    ViewChild, ViewChildren,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport {\n    _countGroupLabelsBeforeOption,\n    _getOptionScrollPosition,\n    CanDisable,\n    CanUpdateErrorState,\n    ErrorStateMatcher,\n    HasTabIndex,\n    MC_OPTION_PARENT_COMPONENT,\n    McOptgroup,\n    McOption,\n    McOptionSelectionChange,\n    mixinDisabled,\n    mixinErrorState,\n    mixinTabIndex\n} from '@ptsecurity/mosaic/core';\n\nimport { McFormField, McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { McTag } from '@ptsecurity/mosaic/tag';\n\n\nimport { defer, merge, Observable, Subject } from 'rxjs';\nimport {\n    filter,\n    map,\n    startWith,\n    switchMap,\n    take,\n    takeUntil,\n    distinctUntilChanged\n} from 'rxjs/operators';\n\nimport {\n    getMcSelectDynamicMultipleError,\n    getMcSelectNonArrayValueError,\n    getMcSelectNonFunctionValueError\n} from './select-errors';\n\nimport { mcSelectAnimations } from './select-animations';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 224;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 1;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\n/* tslint:disable-next-line:no-magic-numbers */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 2;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MC_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-select-scroll-strategy');\n\n/** @docs-private */\nexport function MC_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MC_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MC_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class McSelectChange {\n    constructor(\n        /** Reference to the select that emitted the change event. */\n        public source: McSelect,\n        /** Current value of the select that emitted the event. */\n        public value: any) {\n    }\n}\n\n// Boilerplate for applying mixins to McSelect.\n/** @docs-private */\nexport class McSelectBase {\n    constructor(\n        public _elementRef: ElementRef,\n        public _defaultErrorStateMatcher: ErrorStateMatcher,\n        public _parentForm: NgForm,\n        public _parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {}\n}\n\nexport const _McSelectMixinBase = mixinTabIndex(mixinDisabled(mixinErrorState(McSelectBase)));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({ selector: 'mc-select-trigger' })\nexport class McSelectTrigger {}\n\n\n@Component({\n    selector: 'mc-select',\n    exportAs: 'mcSelect',\n    templateUrl: 'select.html',\n    styleUrls: ['./select.css'],\n    inputs: ['disabled', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'tabIndex',\n        class: 'mc-select',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-select-invalid]': 'errorState',\n        '[class.mc-select-required]': 'required',\n        '(keydown)': '_handleKeydown($event)',\n        '(focus)': '_onFocus()',\n        '(blur)': '_onBlur()',\n        '(window:resize)': '_calculateHiddenItems()'\n    },\n    animations: [\n        mcSelectAnimations.transformPanel,\n        mcSelectAnimations.fadeInContent\n    ],\n    providers: [\n        { provide: McFormFieldControl, useExisting: McSelect },\n        { provide: MC_OPTION_PARENT_COMPONENT, useExisting: McSelect }\n    ]\n})\nexport class McSelect extends _McSelectMixinBase implements\n    AfterContentInit, AfterViewInit, OnChanges, OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable,\n    HasTabIndex, McFormFieldControl<any>, CanUpdateErrorState {\n\n    /** The last measured value for the trigger's client bounding rect. */\n    _triggerRect: ClientRect;\n\n    /** The cached font-size of the trigger element. */\n    _triggerFontSize = 0;\n\n    /** Deals with the selection logic. */\n    _selectionModel: SelectionModel<McOption>;\n\n    /** Manages keyboard events for options in the panel. */\n    _keyManager: ActiveDescendantKeyManager<McOption>;\n\n    /** The IDs of child options to be passed to the aria-owns attribute. */\n    _optionIds: string = '';\n\n    /** The value of the select panel's transform-origin property. */\n    _transformOrigin: string = 'top';\n\n    /** Whether the panel's animation is done. */\n    _panelDoneAnimating: boolean = false;\n\n    /** Emits when the panel element is finished transforming in. */\n    _panelDoneAnimatingStream = new Subject<string>();\n\n    /** Strategy that will be used to handle scrolling while the select panel is open. */\n    _scrollStrategy = this._scrollStrategyFactory();\n\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n    _offsetY = 0;\n\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n    _positions = [\n        {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top'\n        },\n        {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom'\n        }\n    ];\n\n    /** Whether the select is focused. */\n    get focused(): boolean {\n        return this._focused || this._panelOpen;\n    }\n\n    /**\n     * @deprecated Setter to be removed as this property is intended to be readonly.\n     * @breaking-change 8.0.0\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n\n    /** A name for this control that can be used by `mc-form-field`. */\n    controlType = 'mc-select';\n\n    @ViewChild('trigger') trigger: ElementRef;\n    @ViewChildren(McTag) tags: QueryList<McTag>;\n\n    @ViewChild('panel') panel: ElementRef;\n\n    /** Overlay pane containing the options. */\n    @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n    /** All of the defined select options. */\n    @ContentChildren(McOption, { descendants: true }) options: QueryList<McOption>;\n\n    /** All of the defined groups of options. */\n    @ContentChildren(McOptgroup) optionGroups: QueryList<McOptgroup>;\n\n    /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n    @Input() panelClass: string | string[] | Set<string> | { [key: string]: any };\n\n    /** User-supplied override of the trigger element. */\n    @ContentChild(McSelectTrigger) customTrigger: McSelectTrigger;\n\n    /** Placeholder to be shown if no value has been selected. */\n    @Input()\n    get placeholder(): string {\n        return this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n\n    /** Whether the component is required. */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n\n    /** Whether the user should be allowed to select multiple options. */\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        if (this._selectionModel) {\n            throw getMcSelectDynamicMultipleError();\n        }\n\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith() {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        /* tslint:disable-next-line:strict-type-predicates */\n        if (typeof fn !== 'function') {\n            throw getMcSelectNonFunctionValueError();\n        }\n\n        this._compareWith = fn;\n\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n\n    /** Value of the select control. */\n    @Input()\n    get value(): any {\n        return this._value;\n    }\n\n    set value(newValue: any) {\n        if (newValue !== this._value) {\n            this.writeValue(newValue);\n            this._value = newValue;\n        }\n    }\n\n    /** Object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Function used to sort the values in a select in multiple mode.\n     * Follows the same logic as `Array.prototype.sort`.\n     */\n    @Input() sortComparator: (a: McOption, b: McOption, options: McOption[]) => number;\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n\n    /** Combined stream of all of the child options' change events. */\n    readonly optionSelectionChanges: Observable<McOptionSelectionChange> = defer(() => {\n        if (this.options) {\n            return merge(...this.options.map((option) => option.onSelectionChange));\n        }\n\n        return this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n    });\n\n    /** Event emitted when the select panel has been toggled. */\n    @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted when the select has been opened. */\n    @Output('opened') readonly _openedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => o), map(() => {}));\n\n    /** Event emitted when the select has been closed. */\n    @Output('closed') readonly _closedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => !o), map(() => {}));\n\n    /** Event emitted when the selected value has been changed by the user. */\n    @Output() readonly selectionChange: EventEmitter<McSelectChange> = new EventEmitter<McSelectChange>();\n\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    hiddenItems: number = 0;\n\n    /** Whether or not the overlay panel is open. */\n    private _panelOpen = false;\n\n    /** Whether filling out the select is required in the form. */\n    private _required: boolean = false;\n\n    /** The scroll position of the overlay panel, calculated to center the selected option. */\n    private _scrollTop = 0;\n\n    /** The placeholder displayed in the trigger of the select. */\n    private _placeholder: string;\n\n    /** Whether the component is in multiple selection mode. */\n    private _multiple: boolean = false;\n\n    /** Unique id for this input. */\n    private readonly _uid = `mc-select-${nextUniqueId++}`;\n\n    /** Emits whenever the component is destroyed. */\n    private readonly _destroy = new Subject<void>();\n\n    private _focused = false;\n\n    private _value: any;\n\n    private _id: string;\n\n    constructor(\n        private readonly _viewportRuler: ViewportRuler,\n        private readonly _changeDetectorRef: ChangeDetectorRef,\n        private readonly _ngZone: NgZone,\n        private readonly _renderer: Renderer2,\n        _defaultErrorStateMatcher: ErrorStateMatcher,\n        elementRef: ElementRef,\n        @Optional() private readonly _dir: Directionality,\n        @Optional() _parentForm: NgForm,\n        @Optional() _parentFormGroup: FormGroupDirective,\n        @Optional() private readonly _parentFormField: McFormField,\n        @Self() @Optional() public ngControl: NgControl,\n        @Attribute('tabindex') tabIndex: string,\n        @Inject(MC_SELECT_SCROLL_STRATEGY) private readonly _scrollStrategyFactory\n    ) {\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnInit() {\n        this._selectionModel = new SelectionModel<McOption>(this.multiple);\n        this.stateChanges.next();\n\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => {\n                if (this.panelOpen) {\n                    this._scrollTop = 0;\n                    this.openedChange.emit(true);\n                } else {\n                    this.openedChange.emit(false);\n                    this._panelDoneAnimating = false;\n                    this.overlayDir.offsetX = 0;\n                    this._changeDetectorRef.markForCheck();\n                }\n            });\n    }\n\n    ngAfterContentInit() {\n        this._initKeyManager();\n\n        this._selectionModel.onChange!\n            .pipe(takeUntil(this._destroy))\n            .subscribe((event) => {\n                event.added.forEach((option) => option.select());\n                event.removed.forEach((option) => option.deselect());\n            });\n\n        this.options.changes\n            .pipe(startWith(null), takeUntil(this._destroy))\n            .subscribe(() => {\n                this._resetOptions();\n                this._initializeSelection();\n            });\n    }\n\n    ngAfterViewInit(): void {\n        this.tags.changes\n            .subscribe(() => {\n                setTimeout(() => this._calculateHiddenItems(), 0);\n            });\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) { this.updateErrorState(); }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes.disabled) {\n            this.stateChanges.next();\n        }\n    }\n\n    ngOnDestroy() {\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n    }\n\n    /** `View -> model callback called when value changes` */\n    _onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when select has been touched` */\n    _onTouched = () => {};\n\n    /** Toggles the overlay panel open or closed. */\n    toggle(): void {\n        if (this.panelOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    /** Opens the overlay panel. */\n    open(): void {\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) { return; }\n\n        this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n        this._panelOpen = true;\n        this._keyManager.withHorizontalOrientation(null);\n        this._calculateOverlayPosition();\n        this._highlightCorrectOption();\n        this._changeDetectorRef.markForCheck();\n\n        // Set the font size on the panel element once it exists.\n        this._ngZone.onStable.asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                if (this._triggerFontSize && this.overlayDir.overlayRef &&\n                    this.overlayDir.overlayRef.overlayElement) {\n                    this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n                }\n            });\n    }\n\n    /** Closes the overlay panel and focuses the host element. */\n    close(): void {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value: any): void {\n        if (this.options) {\n            this._setSelectionByValue(value);\n        }\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn: (value: any) => void): void {\n        this._onChange = fn;\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn: () => {}): void {\n        this._onTouched = fn;\n    }\n\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    get panelOpen(): boolean {\n        return this._panelOpen;\n    }\n\n    get selected(): McOption | McOption[] {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n\n    get triggerValue(): string {\n        if (this.empty) { return ''; }\n\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map((option) => option.viewValue);\n\n            if (this._isRtl()) { selectedOptions.reverse(); }\n\n            return selectedOptions.join(', ');\n        }\n\n        return this._selectionModel.selected[0].viewValue;\n    }\n\n    get triggerValues(): McOption[] {\n        if (this.empty) { return []; }\n\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected;\n\n            if (this._isRtl()) { selectedOptions.reverse(); }\n\n            return selectedOptions;\n        }\n\n        return [this._selectionModel.selected[0]];\n    }\n\n    get empty(): boolean {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n\n    _isRtl(): boolean {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n\n    _handleKeydown(event: KeyboardEvent): void {\n        if (!this.disabled) {\n            if (this.panelOpen) {\n                this._handleOpenKeydown(event);\n            } else {\n                this._handleClosedKeydown(event);\n            }\n        }\n    }\n\n    /**\n     * When the panel content is done fading in, the _panelDoneAnimating property is\n     * set so the proper class can be added to the panel.\n     */\n    _onFadeInDone(): void {\n        this._panelDoneAnimating = this.panelOpen;\n        this._changeDetectorRef.markForCheck();\n    }\n\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached(): void {\n        this.overlayDir.positionChange\n            .pipe(take(1))\n            .subscribe(() => {\n                this._changeDetectorRef.detectChanges();\n                this._calculateOverlayOffsetX();\n                this.panel.nativeElement.scrollTop = this._scrollTop;\n            });\n    }\n\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme(): string {\n        return this._parentFormField ? `mc-${this._parentFormField.color}` : '';\n    }\n\n    /** Focuses the select element. */\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number, maxScroll: number): number {\n        const itemHeight = this._getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n\n        /* tslint:disable-next-line:no-magic-numbers */\n        const halfOptionHeight = itemHeight / 2;\n\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n\n    /** Invoked when an option is clicked. */\n    onRemoveMatcherItem(option: McOption, $event): void {\n        $event.stopPropagation();\n\n        option.deselect();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat(): boolean {\n        return this._panelOpen || !this.empty;\n    }\n\n    _calculateHiddenItems(): void {\n        if (this.empty) { return; }\n\n        let visibleItems: number = 0;\n        const totalItemsWidth = this._getTotalItemsWidthInMatcher();\n        let totalVisibleItemsWidth: number = 0;\n        const itemMargin: number = 4;\n\n        this.tags.forEach((tag) => {\n            if (tag.nativeElement.offsetTop < tag.nativeElement.offsetHeight) {\n                totalVisibleItemsWidth += tag.nativeElement.getBoundingClientRect().width + itemMargin;\n                visibleItems++;\n            }\n        });\n\n        this.hiddenItems = (this.selected as ArrayLike<McOption>).length - visibleItems;\n\n        if (this.hiddenItems) {\n            const itemsCounter = this.trigger.nativeElement.querySelector('.mc-select__match-hidden-text');\n            const matcherList = this.trigger.nativeElement.querySelector('.mc-select__match-list');\n\n            const itemsCounterShowed = itemsCounter.offsetTop < itemsCounter.offsetHeight;\n            // const itemsCounterWidth: number = itemsCounter.getBoundingClientRect().width;\n            const itemsCounterWidth: number = 86;\n\n            const matcherListWidth: number = matcherList.getBoundingClientRect().width;\n            const matcherWidth: number = matcherListWidth + itemsCounterWidth;\n\n            if (itemsCounterShowed && (totalItemsWidth < matcherWidth)) { this.hiddenItems = 0; }\n\n            if (\n                totalVisibleItemsWidth === matcherListWidth ||\n                (totalVisibleItemsWidth + itemsCounterWidth) < matcherListWidth\n            ) {\n                this._changeDetectorRef.markForCheck();\n\n                return ;\n            } else if (!itemsCounterShowed && (totalItemsWidth + itemsCounterWidth) > matcherWidth) {\n                this.hiddenItems++;\n            }\n        }\n\n        this._changeDetectorRef.markForCheck();\n    }\n\n    private _getTotalItemsWidthInMatcher(): number {\n        const triggerClone = this.trigger.nativeElement.cloneNode(true);\n        triggerClone.querySelector('.mc-select__match-hidden-text').remove();\n\n        this._renderer.setStyle(triggerClone, 'position', 'absolute');\n        this._renderer.setStyle(triggerClone, 'visibility', 'hidden');\n        this._renderer.setStyle(triggerClone, 'top', '-100%');\n        this._renderer.setStyle(triggerClone, 'left', '0');\n\n        this._renderer.appendChild(this.trigger.nativeElement, triggerClone);\n\n        let totalItemsWidth: number = 0;\n        const itemMargin: number = 4;\n        triggerClone.querySelectorAll('mc-tag').forEach((item) => {\n            totalItemsWidth += item.getBoundingClientRect().width as number + itemMargin;\n        });\n\n        triggerClone.remove();\n\n        return totalItemsWidth;\n    }\n\n    /** Handles keyboard events while the select is closed. */\n    private _handleClosedKeydown(event: KeyboardEvent): void {\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n        // Open the select on ALT + arrow key to match the native <select>\n        if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        } else if (!this.multiple) {\n            this._keyManager.onKeydown(event);\n        }\n    }\n\n    /** Handles keyboard events when the selected is open. */\n    private _handleOpenKeydown(event: KeyboardEvent): void {\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const manager = this._keyManager;\n\n        if (keyCode === HOME || keyCode === END) {\n            event.preventDefault();\n\n            if (keyCode === HOME) {\n                manager.setFirstItemActive();\n            } else {\n                manager.setLastItemActive();\n            }\n\n        } else if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n        } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        } else if (this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some((option) => !option.selected);\n            this.options.forEach((option) => {\n                if (hasDeselectedOptions && !option.disabled) {\n                    option.select();\n                } else {\n                    option.deselect();\n                }\n            });\n        } else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n\n            manager.onKeydown(event);\n\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n\n    private _initializeSelection(): void {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n        });\n    }\n\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    private _setSelectionByValue(value: any | any[]): void {\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw getMcSelectNonArrayValueError();\n            }\n\n            this._selectionModel.clear();\n            value.forEach((currentValue: any) => this._selectValue(currentValue));\n            this._sortValues();\n        } else {\n            this._selectionModel.clear();\n            const correspondingOption = this._selectValue(value);\n\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.setActiveItem(correspondingOption);\n            }\n        }\n\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    private _selectValue(value: any): McOption | undefined {\n        const correspondingOption = this.options.find((option: McOption) => {\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            } catch (error) {\n                if (isDevMode()) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n\n                return false;\n            }\n        });\n\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n\n        return correspondingOption;\n    }\n\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    private _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager<McOption>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n        this._keyManager.tabOut\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            });\n\n        this._keyManager.change\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n                if (this._panelOpen && this.panel) {\n                    this._scrollActiveOptionIntoView();\n                } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n            });\n    }\n\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    private _resetOptions(): void {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n        this.optionSelectionChanges\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe((event) => {\n                this._onSelect(event.source, event.isUserInput);\n\n                if (event.isUserInput && !this.multiple && this._panelOpen) {\n                    this.close();\n                    this.focus();\n                }\n            });\n\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map((option) => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n                this._changeDetectorRef.markForCheck();\n                this.stateChanges.next();\n            });\n\n        this._setOptionIds();\n    }\n\n    /** Invoked when an option is clicked. */\n    private _onSelect(option: McOption, isUserInput: boolean): void {\n        const wasSelected = this._selectionModel.isSelected(option);\n\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            this._propagateChanges(option.value);\n        } else {\n            if (option.selected) {\n                this._selectionModel.select(option);\n            } else {\n                this._selectionModel.deselect(option);\n            }\n\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n\n            if (this.multiple) {\n                this._sortValues();\n\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mc-option`.\n                    this.focus();\n                }\n            }\n        }\n\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n\n        this.stateChanges.next();\n    }\n\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    private _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n\n    /** Emits change event to set the model value. */\n    private _propagateChanges(fallbackValue?: any): void {\n        let valueToEmit: any = null;\n\n        if (this.multiple) {\n            valueToEmit = (this.selected as McOption[]).map((option) => option.value);\n        } else {\n            valueToEmit = this.selected ? (this.selected as McOption).value : fallbackValue;\n        }\n\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(new McSelectChange(this, valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /** Records option IDs to pass to the aria-owns property. */\n    private _setOptionIds() {\n        this._optionIds = this.options.map((option) => option.id).join(' ');\n    }\n\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    private _highlightCorrectOption(): void {\n        if (this._keyManager) {\n            if (this.empty) {\n                this._keyManager.setFirstItemActive();\n            } else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n\n    /** Scrolls the active option into view. */\n    private _scrollActiveOptionIntoView(): void {\n        const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n        const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options, this.optionGroups);\n\n        this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n            activeOptionIndex + labelCount,\n            this._getItemHeight(),\n            this.panel.nativeElement.scrollTop,\n            SELECT_PANEL_MAX_HEIGHT\n        );\n    }\n\n    /** Gets the index of the provided option in the option list. */\n    private _getOptionIndex(option: McOption): number | undefined {\n        return this.options.reduce((result: number, current: McOption, index: number) => {\n            /* tslint:disable-next-line:strict-type-predicates */\n            return result === undefined ? (option === current ? index : undefined) : result;\n        }, undefined);\n    }\n\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    private _calculateOverlayPosition(): void {\n        const itemHeight = this._getItemHeight();\n        const items = this._getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n\n        // If no value is selected we open the popup to the first item.\n        let selectedOptionOffset =\n            this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n        selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n            this.optionGroups);\n\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        /* tslint:disable-next-line:no-magic-numbers */\n        const scrollBuffer = panelHeight / 2;\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._offsetY = this._calculateOverlayOffsetY();\n\n        this._checkOverlayWithinViewport(maxScroll);\n    }\n\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    private _calculateOverlayOffsetX(): void {\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const isRtl = this._isRtl();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const paddingWidth = SELECT_PANEL_PADDING_X * 2;\n        let offsetX: number;\n\n        const selected = this._selectionModel.selected[0] || this.options.first;\n        offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n\n        // Invert the offset in LTR.\n        if (!isRtl) { offsetX *= -1; }\n\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        } else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    private _calculateOverlayOffsetY(): number {\n        // const itemHeight = this._getItemHeight();\n        // const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n\n        // todo I'm not sure that we will use it\n        return 0;\n        // return Math.round(-optionHeightAdjustment);\n    }\n\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    private _checkOverlayWithinViewport(maxScroll: number): void {\n        const itemHeight = this._getItemHeight();\n        const viewportSize = this._viewportRuler.getViewportSize();\n\n        const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable =\n            viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n        const panelHeightTop = Math.abs(this._offsetY);\n        const totalPanelHeight =\n            Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        } else if (panelHeightTop > topSpaceAvailable) {\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        } else {\n            this._transformOrigin = this._getOriginBasedOnOption();\n        }\n    }\n\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this._scrollTop <= 0) {\n            this._scrollTop = 0;\n            this._offsetY = 0;\n            this._transformOrigin = `50% bottom 0px`;\n        }\n    }\n\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number, maxScroll: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this._scrollTop >= maxScroll) {\n            this._scrollTop = maxScroll;\n            this._offsetY = 0;\n            this._transformOrigin = `50% top 0px`;\n\n            return;\n        }\n    }\n\n    /** Sets the transform origin point based on the selected option. */\n    private _getOriginBasedOnOption(): string {\n        const itemHeight = this._getItemHeight();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        /* tslint:disable-next-line:no-magic-numbers */\n        const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n\n        return `50% ${originY}px 0px`;\n    }\n\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    private _getItemCount(): number {\n        return this.options.length + this.optionGroups.length;\n    }\n\n    /** Calculates the height of the select's options. */\n    private _getItemHeight(): number {\n        /* tslint:disable-next-line:no-magic-numbers */\n        return 32;\n        // return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {\n    animate,\n    AnimationTriggerMetadata,\n    state,\n    style,\n    transition,\n    trigger,\n    query,\n    animateChild,\n    group\n} from '@angular/animations';\n\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const mcSelectAnimations: {\n    readonly transformPanel: AnimationTriggerMetadata;\n    readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0)',\n            minWidth: '100%',\n            opacity: 0\n        })),\n        transition('void => *', group([\n            query('@fadeInContent', animateChild()),\n            animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n        ])),\n        transition('* => void', [\n            animate('250ms 100ms linear', style({ opacity: 0 }))\n        ])\n    ]),\n\n    /**\n     * This animation fades in the background color and text content of the\n     * select's options. It is time delayed to occur 100ms after the overlay\n     * panel has transformed in.\n     */\n    fadeInContent: trigger('fadeInContent', [\n        state('showing', style({ opacity: 1 })),\n        transition('void => showing', [\n            style({ opacity: 0 }),\n            animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformPanel = mcSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInContent = mcSelectAnimations.fadeInContent;\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { McOptionModule } from '@ptsecurity/mosaic/core';\nimport { McFormFieldModule } from '@ptsecurity/mosaic/form-field';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\nimport { McTagModule } from '@ptsecurity/mosaic/tag';\n\nimport { MC_SELECT_SCROLL_STRATEGY_PROVIDER, McSelect, McSelectTrigger } from './select.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        McOptionModule,\n        McIconModule,\n        McTagModule\n    ],\n    exports: [McFormFieldModule, McSelect, McSelectTrigger, McOptionModule, CommonModule],\n    declarations: [McSelect, McSelectTrigger],\n    providers: [MC_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class McSelectModule {}\n"],"names":["getMcSelectDynamicMultipleError","Error","getMcSelectNonArrayValueError","getMcSelectNonFunctionValueError","MC_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","overlay","scrollStrategies","reposition","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","mcSelectAnimations","transformPanel","trigger","state","style","transform","minWidth","opacity","transition","group","query","animateChild","animate","fadeInContent","nextUniqueId","MC_SELECT_SCROLL_STRATEGY","InjectionToken","MC_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","Overlay","useFactory","McSelectChange","source","value","this","McSelectBase","_elementRef","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_McSelectMixinBase","mixinTabIndex","mixinDisabled","mixinErrorState","McSelectTrigger","tslib_1.__decorate","Directive","selector","McSelect","_super","_viewportRuler","_changeDetectorRef","_ngZone","_renderer","elementRef","_dir","_parentFormField","tabIndex","_scrollStrategyFactory","_this","call","_triggerFontSize","_optionIds","_transformOrigin","_panelDoneAnimating","_panelDoneAnimatingStream","Subject","_scrollStrategy","_offsetY","_positions","originX","originY","overlayX","overlayY","controlType","optionSelectionChanges","defer","options","merge","apply","map","option","onSelectionChange","onStable","asObservable","pipe","take","switchMap","openedChange","EventEmitter","_openedStream","filter","o","_closedStream","selectionChange","valueChange","hiddenItems","_panelOpen","_required","_scrollTop","_multiple","_uid","_destroy","_focused","_onChange","_onTouched","_compareWith","o1","o2","valueAccessor","parseInt","id","tslib_1.__extends","McSelect_1","defineProperty","prototype","get","set","_placeholder","stateChanges","next","coerceBooleanProperty","_selectionModel","fn","_initializeSelection","_value","newValue","writeValue","_id","ngOnInit","SelectionModel","multiple","distinctUntilChanged","takeUntil","subscribe","panelOpen","emit","overlayDir","offsetX","markForCheck","ngAfterContentInit","_initKeyManager","onChange","event","added","forEach","select","removed","deselect","changes","startWith","_resetOptions","ngAfterViewInit","tags","setTimeout","_calculateHiddenItems","ngDoCheck","updateErrorState","ngOnChanges","disabled","ngOnDestroy","complete","toggle","close","open","length","_triggerRect","nativeElement","getBoundingClientRect","getComputedStyle","_keyManager","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","overlayRef","overlayElement","fontSize","_isRtl","_setSelectionByValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","selected","empty","selectedOptions","viewValue","reverse","join","isEmpty","_handleKeydown","_handleOpenKeydown","_handleClosedKeydown","_onFadeInDone","_onFocus","_onBlur","_onAttached","positionChange","detectChanges","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","focus","_calculateOverlayScroll","selectedIndex","scrollBuffer","maxScroll","itemHeight","_getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","Math","min","max","onContainerClick","onRemoveMatcherItem","$event","stopPropagation","visibleItems","totalItemsWidth","_getTotalItemsWidthInMatcher","totalVisibleItemsWidth","tag","offsetTop","offsetHeight","width","itemsCounter","querySelector","matcherList","itemsCounterShowed","matcherListWidth","matcherWidth","triggerClone","cloneNode","remove","setStyle","appendChild","querySelectorAll","item","keyCode","isArrowKey","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","ENTER","SPACE","altKey","preventDefault","onKeydown","manager","HOME","END","setFirstItemActive","setLastItemActive","activeItem","A","ctrlKey","hasDeselectedOptions_1","some","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","Promise","resolve","then","isArray","clear","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","find","error","isDevMode","console","warn","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","tabOut","change","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","toArray","sort","a","sortComparator","indexOf","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getOptionIndex","reduce","result","current","index","undefined","items","_getItemCount","panelHeight","scrollContainerHeight","selectedOptionOffset","_calculateOverlayOffsetY","_checkOverlayWithinViewport","overlayRect","viewportSize","getViewportSize","isRtl","first","SELECT_PANEL_PADDING_X","leftOverflow","left","rightOverflow","right","round","updatePosition","topSpaceAvailable","top","bottomSpaceAvailable","height","bottom","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","optionHeightAdjustment","ViewChild","tslib_1.__metadata","ElementRef","ViewChildren","McTag","QueryList","CdkConnectedOverlay","ContentChildren","McOption","descendants","McOptgroup","Input","ContentChild","ErrorStateMatcher","Output","Observable","Component","exportAs","template","styles","inputs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","host","[attr.id]","[attr.tabindex]","class","[class.mc-disabled]","[class.mc-select-invalid]","[class.mc-select-required]","(keydown)","(focus)","(blur)","(window:resize)","animations","providers","McFormFieldControl","useExisting","MC_OPTION_PARENT_COMPONENT","tslib_1.__param","Optional","Self","Attribute","Inject","ViewportRuler","ChangeDetectorRef","NgZone","Renderer2","Directionality","NgForm","FormGroupDirective","McFormField","NgControl","String","McSelectModule","NgModule","imports","CommonModule","OverlayModule","McOptionModule","McIconModule","McTagModule","exports","McFormFieldModule","declarations","__extends","__","constructor","create","__decorate","decorators","target","key","desc","c","arguments","r","getOwnPropertyDescriptor","Reflect","decorate","i","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata"],"mappings":"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"}