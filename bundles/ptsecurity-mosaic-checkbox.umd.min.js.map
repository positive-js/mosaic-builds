{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","../../../packages/mosaic/checkbox/checkbox.ts","../../../packages/mosaic/checkbox/checkbox-config.ts","../../../packages/mosaic/checkbox/checkbox-required-validator.ts","../../../packages/mosaic/checkbox/checkbox-module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","__extends","TypeError","String","__","this","constructor","create","TransitionCheckState","MC_CHECKBOX_CLICK_ACTION","InjectionToken","nextUniqueId","MC_CHECKBOX_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","McCheckbox","multi","_elementRef","McCheckboxMixinBase","mixinTabIndex","mixinColor","mixinDisabled","McCheckboxBase","elementRef","_changeDetectorRef","_focusMonitor","_clickAction","_this","_super","ariaLabel","ariaLabelledby","labelPosition","name","change","EventEmitter","indeterminateChange","_checked","_disabled","_indeterminate","uniqueId","currentAnimationClass","currentCheckState","Init","onTouched","controlValueAccessorChangeFn","id","defineProperty","_required","value","toBoolean","checked","markForCheck","disabled","changed","transitionCheckState","Indeterminate","Checked","Unchecked","emit","ngAfterViewInit","monitor","inputElement","nativeElement","subscribe","focusOrigin","onInputFocusChange","ngOnDestroy","stopMonitoring","onLabelTextChange","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","getAriaChecked","indeterminate","toggle","onInputClick","event","stopPropagation","Promise","resolve","then","emitChangeEvent","focus","focusVia","onInteractionEvent","newState","oldState","element","length","classList","remove","add","McCheckboxChange","source","Component","args","selector","exportAs","template","host","class","[id]","[attr.id]","[class.mc-indeterminate]","[class.mc-checked]","[class.mc-disabled]","[class.mc-checkbox-label-before]","providers","inputs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","ElementRef","ChangeDetectorRef","FocusMonitor","Optional","type","Inject","Input","Output","ViewChild","static","MC_CHECKBOX_REQUIRED_VALIDATOR","NG_VALIDATORS","McCheckboxRequiredValidator","CheckboxRequiredValidator","Directive","[attr.required]","NgModule","imports","CommonModule","exports","declarations"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { FocusMonitor, FocusOrigin } from '@angular/cdk/a11y';\nimport {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport {\n    CanColor,\n    CanColorCtor,\n    CanDisable,\n    CanDisableCtor,\n    HasTabIndex,\n    HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\nimport { MC_CHECKBOX_CLICK_ACTION, McCheckboxClickAction } from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mc-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McCheckbox),\n    multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n    /** The initial state of the component before any user interaction. */\n    Init,\n    /** The state representing the component when it's becoming checked. */\n    Checked,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate\n}\n\n/** Change event object emitted by McCheckbox. */\nexport class McCheckboxChange {\n    /** The source McCheckbox of the event. */\n    source: McCheckbox;\n    /** The new `checked` value of the checkbox. */\n    checked: boolean;\n}\n\n// Boilerplate for applying mixins to McCheckbox.\n/** @docs-private */\nexport class McCheckboxBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {}\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof McCheckboxBase = mixinTabIndex(mixinColor(mixinDisabled(McCheckboxBase)));\n\n\n/**\n * A mosaic checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A McCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n */\n@Component({\n    selector: 'mc-checkbox',\n    exportAs: 'mcCheckbox',\n    templateUrl: 'checkbox.html',\n    styleUrls: ['checkbox.scss'],\n    host: {\n        class: 'mc-checkbox',\n        '[id]': 'id',\n        '[attr.id]': 'id',\n        '[class.mc-indeterminate]': 'indeterminate',\n        '[class.mc-checked]': 'checked',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-checkbox-label-before]': 'labelPosition == \"before\"'\n    },\n    providers: [MC_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCheckbox extends McCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex {\n\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     */\n    @Input('aria-label') ariaLabel: string = '';\n\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n    /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n    @Input() id: string;\n\n    /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n    @Input() labelPosition: 'before' | 'after' = 'after';\n\n    /** Name value will be applied to the input element if present */\n    @Input() name: string | null = null;\n\n    /** Event emitted when the checkbox's `checked` value changes. */\n    @Output() readonly change: EventEmitter<McCheckboxChange> = new EventEmitter<McCheckboxChange>();\n\n    /** Event emitted when the checkbox's `indeterminate` value changes. */\n    @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** The value attribute of the native input element */\n    @Input() value: string;\n\n    /** The native `<input type=\"checkbox\">` element */\n    @ViewChild('input', { static: false }) inputElement: ElementRef;\n\n    /** Returns the unique id for the visual hidden input. */\n    get inputId(): string {\n        return `${this.id || this.uniqueId}-input`;\n    }\n\n    /** Whether the checkbox is required. */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    private _required: boolean;\n\n    /**\n     * Whether the checkbox is checked.\n     */\n    @Input()\n    get checked(): boolean {\n        return this._checked;\n    }\n\n    set checked(value: boolean) {\n        if (value !== this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _checked: boolean = false;\n\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value !== this.disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    @Input()\n    get indeterminate(): boolean {\n        return this._indeterminate;\n    }\n\n    set indeterminate(value: boolean) {\n        const changed = value !== this._indeterminate;\n        this._indeterminate = value;\n\n        if (changed) {\n            if (this._indeterminate) {\n                this.transitionCheckState(TransitionCheckState.Indeterminate);\n            } else {\n                this.transitionCheckState(\n                    this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            }\n\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n    }\n\n    private _indeterminate: boolean = false;\n\n    private uniqueId: string = `mc-checkbox-${++nextUniqueId}`;\n\n    private currentAnimationClass: string = '';\n\n    private currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n    constructor(\n        elementRef: ElementRef,\n        private _changeDetectorRef: ChangeDetectorRef,\n        private _focusMonitor: FocusMonitor,\n        @Optional() @Inject(MC_CHECKBOX_CLICK_ACTION)\n        private _clickAction: McCheckboxClickAction\n    ) {\n        super(elementRef);\n\n        this.id = this.uniqueId;\n    }\n\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * @docs-private\n     */\n    // tslint:disable-next-line:no-empty\n    onTouched: () => any = () => {};\n\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this.inputElement.nativeElement)\n            .subscribe((focusOrigin) => this.onInputFocusChange(focusOrigin));\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this.inputElement.nativeElement);\n    }\n\n    /** Method being called whenever the label text changes. */\n    onLabelTextChange() {\n        // This method is getting called whenever the label of the checkbox changes.\n        // Since the checkbox uses the OnPush strategy we need to notify it about the change\n        // that has been recognized by the cdkObserveContent directive.\n        this._changeDetectorRef.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any) {\n        this.checked = !!value;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n    }\n\n    getAriaChecked(): 'true' | 'false' | 'mixed' {\n        return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n    }\n\n    /** Toggles the `checked` state of the checkbox. */\n    toggle(): void {\n        this.checked = !this.checked;\n    }\n\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event Input click event\n     */\n    onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && this._clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && this._clickAction !== 'check') {\n\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n\n            this.toggle();\n            this.transitionCheckState(\n                this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this.emitChangeEvent();\n        } else if (!this.disabled && this._clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mc-checkbox`.\n            this.inputElement.nativeElement.checked = this.checked;\n            this.inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n\n    /** Focuses the checkbox. */\n    focus(): void {\n        this._focusMonitor.focusVia(this.inputElement.nativeElement, 'keyboard');\n    }\n\n    onInteractionEvent(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n    // tslint:disable-next-line:no-empty\n    private controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    private transitionCheckState(newState: TransitionCheckState) {\n        const oldState = this.currentCheckState;\n        const element: HTMLElement = this._elementRef.nativeElement;\n\n        if (oldState === newState) {\n            return;\n        }\n        if (this.currentAnimationClass.length > 0) {\n            element.classList.remove(this.currentAnimationClass);\n        }\n\n        this.currentCheckState = newState;\n\n        if (this.currentAnimationClass.length > 0) {\n            element.classList.add(this.currentAnimationClass);\n        }\n    }\n\n    private emitChangeEvent() {\n        const event = new McCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n\n        this.controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    }\n\n    /** Function is called whenever the focus changes for the input element. */\n    private onInputFocusChange(focusOrigin: FocusOrigin) {\n        if (focusOrigin) {\n            this.onTouched();\n        }\n    }\n}\n","import { InjectionToken } from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type McCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MC_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<McCheckboxClickAction>('mc-checkbox-click-action');\n","import {\n    Directive,\n    forwardRef,\n    Provider\n} from '@angular/core';\nimport {\n    CheckboxRequiredValidator,\n    NG_VALIDATORS\n} from '@angular/forms';\n\n\nexport const MC_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McCheckboxRequiredValidator),\n    multi: true\n};\n\n/**\n * Validator for Mosaic checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mc-checkbox`.\n */\n@Directive({\n    selector: `mc-checkbox[required][formControlName],\n             mc-checkbox[required][formControl], mc-checkbox[required][ngModel]`,\n    providers: [MC_CHECKBOX_REQUIRED_VALIDATOR],\n    host: { '[attr.required]': 'required ? \"\" : null' }\n})\nexport class McCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McCheckbox } from './checkbox';\nimport { McCheckboxRequiredValidator } from './checkbox-required-validator';\n\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [McCheckbox, McCheckboxRequiredValidator],\n    declarations: [McCheckbox, McCheckboxRequiredValidator]\n})\nexport class McCheckboxModule {\n}\n"]}