{"version":3,"sources":["ng://@ptsecurity/mosaic/sidebar/sidebar-animations.ts","ng://@ptsecurity/mosaic/sidebar/sidebar.component.ts","ng://@ptsecurity/mosaic/sidebar/sidebar.module.ts"],"names":["McSidebarAnimationState","mcSidebarAnimations","sidebarState","trigger","state","style","minWidth","width","maxWidth","params","openedStateMinWidth","openedStateWidth","openedStateMaxWidth","closedStateWidth","transition","animate","SidebarPositions","Left","Right","McSidebarOpened","Directive","args","selector","exportAs","Input","McSidebarClosed","McSidebar","ngZone","elementRef","this","_opened","stateChanged","EventEmitter","internalState","Object","defineProperty","prototype","value","saveWidth","ngOnInit","position","registerKeydownListener","ngOnDestroy","unRegisterKeydownListener","toggle","opened","onAnimationStart","onAnimationDone","emit","ngAfterContentInit","openedContent","closedContent","_this","documentKeydownListener","event","isControl","isInput","isLeftBracket","isRightBracket","run","runOutsideAngular","document","addEventListener","removeEventListener","nativeElement","offsetWidth","Component","template","host","class","[@state]","(@state.start)","(@state.done)","animations","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","NgZone","ElementRef","Output","ContentChild","static","McSidebarModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import { animate, AnimationTriggerMetadata, state, style, transition, trigger } from '@angular/animations';\n\n\nexport enum McSidebarAnimationState {\n    Opened = 'opened',\n    Closed = 'closed'\n}\n\nexport const mcSidebarAnimations: {\n    readonly sidebarState: AnimationTriggerMetadata;\n} = {\n    sidebarState: trigger('state', [\n        state('opened', style({\n                minWidth: '{{ openedStateMinWidth }}',\n                width: '{{ openedStateWidth }}',\n                maxWidth: '{{ openedStateMaxWidth }}'\n            }),\n            { params: { openedStateMinWidth: '', openedStateWidth: '', openedStateMaxWidth: '' }}\n        ),\n        state('closed', style({\n                minWidth: '{{ closedStateWidth }}',\n                width: '{{ closedStateWidth }}',\n                maxWidth: '{{ closedStateWidth }}'\n            }),\n            { params: { closedStateWidth: '' }}\n        ),\n        transition('opened => closed', [animate('0.1s')]),\n        transition('closed => opened', [animate('0.2s')])\n    ])\n};\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChild,\n    Directive, ElementRef,\n    EventEmitter,\n    Input,\n    NgZone,\n    OnDestroy, OnInit,\n    Output,\n    ViewEncapsulation\n} from '@angular/core';\nimport { isControl, isInput, isLeftBracket, isRightBracket } from '@ptsecurity/cdk/keycodes';\n\nimport { mcSidebarAnimations, McSidebarAnimationState } from './sidebar-animations';\n\n\nexport enum SidebarPositions {\n    Left = 'left',\n    Right = 'right'\n}\n\n// tslint:disable-next-line:naming-convention\ninterface McSidebarParams {\n    openedStateMinWidth: string;\n    openedStateWidth: string;\n    openedStateMaxWidth: string;\n\n    closedStateWidth: string;\n}\n\n\n@Directive({\n    selector: '[mc-sidebar-opened]',\n    exportAs: 'mcSidebarOpened'\n})\nexport class McSidebarOpened {\n    @Input() minWidth: string;\n    @Input() width: string;\n    @Input() maxWidth: string;\n}\n\n@Directive({\n    selector: '[mc-sidebar-closed]',\n    exportAs: 'mcSidebarClosed'\n})\nexport class McSidebarClosed {\n    @Input() width: string;\n}\n\n\n@Component({\n    selector: 'mc-sidebar',\n    exportAs: 'mcSidebar',\n    templateUrl: 'sidebar.component.html',\n    styleUrls: ['./sidebar.scss'],\n    host: {\n        class: 'mc-sidebar',\n        '[@state]': `{\n            value: animationState,\n            params: params\n        }`,\n        '(@state.start)': 'onAnimationStart()',\n        '(@state.done)': 'onAnimationDone()'\n    },\n    animations: [mcSidebarAnimations.sidebarState],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McSidebar implements OnDestroy, OnInit, AfterContentInit {\n    @Input()\n    get opened(): boolean {\n        return this._opened;\n    }\n\n    set opened(value: boolean) {\n        if (this._opened) {\n            this.saveWidth();\n        }\n\n        this._opened = value;\n    }\n    private _opened: boolean = true;\n\n    @Input() position: SidebarPositions;\n\n    params: McSidebarParams = {\n        openedStateWidth: 'inherit',\n        openedStateMinWidth: 'inherit',\n        openedStateMaxWidth: 'inherit',\n\n        closedStateWidth: '32px'\n    };\n\n    @Output() readonly stateChanged: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    @ContentChild(McSidebarOpened, { static: false }) openedContent: McSidebarOpened;\n\n    @ContentChild(McSidebarClosed, { static: false }) closedContent: McSidebarClosed;\n\n\n    get animationState(): McSidebarAnimationState {\n        return this._opened ? McSidebarAnimationState.Opened : McSidebarAnimationState.Closed;\n    }\n\n    internalState: boolean = true;\n\n    private documentKeydownListener: (event: KeyboardEvent) => void;\n\n    constructor(private ngZone: NgZone, private elementRef: ElementRef) {}\n\n    ngOnInit(): void {\n        if (this.position === SidebarPositions.Left || this.position === SidebarPositions.Right) {\n            this.registerKeydownListener();\n        }\n    }\n\n    ngOnDestroy(): void {\n        if (this.position === SidebarPositions.Left || this.position === SidebarPositions.Right) {\n            this.unRegisterKeydownListener();\n        }\n    }\n\n    toggle(): void {\n        this.opened = !this.opened;\n    }\n\n    onAnimationStart() {\n        if (this._opened) {\n            this.internalState = this._opened;\n        }\n    }\n\n    onAnimationDone() {\n        this.internalState = this._opened;\n\n        this.stateChanged.emit(this._opened);\n    }\n\n    ngAfterContentInit(): void {\n        this.params = {\n            openedStateWidth: this.openedContent.width || 'inherit',\n            openedStateMinWidth: this.openedContent.minWidth || 'inherit',\n            openedStateMaxWidth: this.openedContent.maxWidth || 'inherit',\n\n            closedStateWidth: this.closedContent.width || '32px'\n        };\n    }\n\n    private registerKeydownListener(): void {\n        this.documentKeydownListener = (event) => {\n            if (isControl(event) || isInput(event)) { return; }\n\n            if (\n                (this.position === SidebarPositions.Left && isLeftBracket(event)) ||\n                (this.position === SidebarPositions.Right && isRightBracket(event))\n            ) {\n                this.ngZone.run(() => this._opened = !this._opened);\n            }\n        };\n\n        this.ngZone.runOutsideAngular(() => {\n            // tslint:disable-next-line: no-unbound-method\n            document.addEventListener('keypress', this.documentKeydownListener, true);\n        });\n    }\n\n    private unRegisterKeydownListener(): void {\n        // tslint:disable-next-line: no-unbound-method\n        document.removeEventListener('keypress', this.documentKeydownListener, true);\n    }\n\n    private saveWidth() {\n        this.params.openedStateWidth = `${this.elementRef.nativeElement.offsetWidth}px`;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McSidebar, McSidebarClosed, McSidebarOpened } from './sidebar.component';\n\n\n@NgModule({\n    imports: [CommonModule],\n    declarations: [\n        McSidebarClosed,\n        McSidebarOpened,\n        McSidebar\n    ],\n    exports: [\n        McSidebarClosed,\n        McSidebarOpened,\n        McSidebar\n    ]\n})\nexport class McSidebarModule {}\n"]}