{"version":3,"file":"mosaic-tags.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../packages/mosaic/tags/tag-default-options.ts","../../packages/mosaic/tags/tag.component.ts","../../packages/mosaic/tags/tag-list.component.ts","../../packages/mosaic/tags/tag-input.ts","../../packages/mosaic/tags/tag.module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { InjectionToken } from '@angular/core';\n\n\n/** Default options, for the chips module, that can be overridden. */\n// tslint:disable-next-line: naming-convention\nexport interface McTagsDefaultOptions {\n    /** The list of key codes that will trigger a chipEnd event. */\n    separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MC_TAGS_DEFAULT_OPTIONS = new InjectionToken<McTagsDefaultOptions>('mc-tags-default-options');\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    NgZone,\n    OnDestroy,\n    Output,\n    QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { BACKSPACE, DELETE, SPACE } from '@ptsecurity/cdk/keycodes';\nimport {\n    CanColor,\n    CanColorCtor,\n    CanDisable,\n    CanDisableCtor,\n    mixinColor,\n    mixinDisabled\n} from '@ptsecurity/mosaic/core';\nimport { McIcon } from '@ptsecurity/mosaic/icon';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\n\n// tslint:disable-next-line:naming-convention\nexport interface McTagEvent {\n    tag: McTag;\n}\n\n/** Event object emitted by McTag when selected or deselected. */\nexport class McTagSelectionChange {\n    constructor(public source: McTag, public selected: boolean, public isUserInput = false) {}\n}\n\n\nconst TAG_ATTRIBUTE_NAMES = ['mc-basic-tag'];\n\n/**\n * Dummy directive to add CSS class to tag avatar.\n * @docs-private\n */\n@Directive({\n    selector: 'mc-tag-avatar, [mcTagAvatar]',\n    host: { class: 'mc-tag-avatar' }\n})\nexport class McTagAvatar {}\n\n/**\n * Dummy directive to add CSS class to tag trailing icon.\n * @docs-private\n */\n@Directive({\n    selector: 'mc-tag-trailing-icon, [mcTagTrailingIcon]',\n    host: { class: 'mc-tag-trailing-icon' }\n})\nexport class McTagTrailingIcon {}\n\nexport class McTagBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const _McTagMixinBase: CanColorCtor & CanDisableCtor & typeof McTagBase = mixinColor(mixinDisabled(McTagBase));\n\n\n@Component({\n    selector: 'mc-tag, [mc-tag], mc-basic-tag, [mc-basic-tag]',\n    exportAs: 'mcTag',\n    templateUrl: 'tag.partial.html',\n    styleUrls: ['./tag.css'],\n    inputs: ['color', 'disabled'],\n    host: {\n        class: 'mc-tag',\n        '[attr.tabindex]': 'disabled ? null : -1',\n        '[class.mc-tag-selected]': 'selected',\n        '[class.mc-tag-with-avatar]': 'avatar',\n        '[class.mc-tag-with-trailing-icon]': 'trailingIcon || removeIcon',\n        '[class.mc-tag-disabled]': 'disabled',\n        '[class.mc-disabled]': 'disabled',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': 'handleClick($event)',\n        '(keydown)': 'handleKeydown($event)',\n        '(focus)': 'focus()',\n        '(blur)': 'blur()'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McTag extends _McTagMixinBase implements IFocusableOption, OnDestroy, CanColor, CanDisable {\n    /** Emits when the tag is focused. */\n    readonly onFocus = new Subject<McTagEvent>();\n\n    /** Emits when the tag is blured. */\n    readonly onBlur = new Subject<McTagEvent>();\n\n    nativeElement: HTMLElement;\n\n    /** Whether the tag has focus. */\n    hasFocus: boolean = false;\n\n    /** Whether the tag list is selectable */\n    tagListSelectable: boolean = true;\n\n    @ContentChildren(McIcon) contentChildren: QueryList<McIcon>;\n\n    /** The tag avatar */\n    @ContentChild(McTagAvatar, {static: false}) avatar: McTagAvatar;\n\n    /** The tag's trailing icon. */\n    @ContentChild(McTagTrailingIcon, {static: false}) trailingIcon: McTagTrailingIcon;\n\n    /** The tag's remove toggler. */\n    @ContentChild(forwardRef(() => McTagRemove), {static: false}) removeIcon: McTagRemove;\n\n    /** Emitted when the tag is selected or deselected. */\n    @Output() readonly selectionChange: EventEmitter<McTagSelectionChange> =\n        new EventEmitter<McTagSelectionChange>();\n\n    /** Emitted when the tag is destroyed. */\n    @Output() readonly destroyed: EventEmitter<McTagEvent> = new EventEmitter<McTagEvent>();\n\n    /** Emitted when a tag is to be removed. */\n    @Output() readonly removed: EventEmitter<McTagEvent> = new EventEmitter<McTagEvent>();\n\n    /** Whether the tag is selected. */\n    @Input()\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    set selected(value: boolean) {\n        const coercedValue = coerceBooleanProperty(value);\n\n        if (coercedValue !== this._selected) {\n            this._selected = coercedValue;\n            this.dispatchSelectionChange();\n        }\n    }\n\n    private _selected: boolean = false;\n\n    /** The value of the tag. Defaults to the content inside `<mc-tag>` tags. */\n    @Input()\n    get value(): any {\n        return this._value !== undefined\n            ? this._value\n            : this.elementRef.nativeElement.textContent;\n    }\n\n    set value(value: any) {\n        this._value = value;\n    }\n\n    private _value: any;\n\n    /**\n     * Whether or not the tag is selectable. When a tag is not selectable,\n     * changes to its selected state are always ignored. By default a tag is\n     * selectable, and it becomes non-selectable if its parent tag list is\n     * not selectable.\n     */\n    @Input()\n    get selectable(): boolean {\n        return this._selectable && this.tagListSelectable;\n    }\n\n    set selectable(value: boolean) {\n        this._selectable = coerceBooleanProperty(value);\n    }\n\n    private _selectable: boolean = true;\n\n    /**\n     * Determines whether or not the tag displays the remove styling and emits (removed) events.\n     */\n    @Input()\n    get removable(): boolean {\n        return this._removable;\n    }\n\n    set removable(value: boolean) {\n        this._removable = coerceBooleanProperty(value);\n    }\n\n    private _removable: boolean = true;\n\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value !== this.disabled) {\n            this._disabled = value;\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    constructor(public elementRef: ElementRef, private _ngZone: NgZone) {\n        super(elementRef);\n\n        this.addHostClassName();\n\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        this.addClassModificatorForIcons();\n    }\n\n    addClassModificatorForIcons() {\n        const icons = this.contentChildren.map((item) => item._elementRef.nativeElement);\n\n        if (icons.length === 1) {\n            const iconElement = icons[0];\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-left-icon');\n                }\n\n                if (iconElement.previousSibling) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-right-icon');\n                }\n            }\n        } else if (icons.length > 1) {\n            const firstIconElement = icons[0];\n            const secondIconElement = icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n\n    addHostClassName() {\n        // Add class for the different tags\n        for (const attr of TAG_ATTRIBUTE_NAMES) {\n            if (\n                this.elementRef.nativeElement.hasAttribute(attr) ||\n                this.elementRef.nativeElement.tagName.toLowerCase() === attr\n            ) {\n                    (this.elementRef.nativeElement as HTMLElement).classList.add(attr);\n\n                    return;\n            }\n        }\n        (this.elementRef.nativeElement as HTMLElement).classList.add('mc-standard-tag');\n    }\n\n    ngOnDestroy() {\n        this.destroyed.emit({ tag: this });\n    }\n\n    select(): void {\n        if (!this._selected) {\n            this._selected = true;\n            this.dispatchSelectionChange();\n        }\n    }\n\n    deselect(): void {\n        if (this._selected) {\n            this._selected = false;\n            this.dispatchSelectionChange();\n        }\n    }\n\n    selectViaInteraction(): void {\n        if (!this._selected) {\n            this._selected = true;\n            this.dispatchSelectionChange(true);\n        }\n    }\n\n    toggleSelected(isUserInput: boolean = false): boolean {\n        this._selected = !this.selected;\n        this.dispatchSelectionChange(isUserInput);\n\n        return this.selected;\n    }\n\n    /** Allows for programmatic focusing of the tag. */\n    focus(): void {\n        if (!this.hasFocus) {\n            this.elementRef.nativeElement.focus();\n            this.onFocus.next({ tag: this });\n        }\n        this.hasFocus = true;\n    }\n\n    /**\n     * Allows for programmatic removal of the tag. Called by the McTagList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the tag from the DOM.\n     */\n    remove(): void {\n        if (this.removable) {\n            this.removed.emit({ tag: this });\n        }\n    }\n\n    handleClick(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n        } else {\n            event.stopPropagation();\n        }\n    }\n\n    handleKeydown(event: KeyboardEvent): void {\n        if (this.disabled) { return; }\n\n        // tslint:disable-next-line: deprecation\n        switch (event.keyCode) {\n            case DELETE:\n            case BACKSPACE:\n                // If we are removable, remove the focused tag\n                this.remove();\n                // Always prevent so page navigation does not occur\n                event.preventDefault();\n                break;\n            case SPACE:\n                // If we are selectable, toggle the focused tag\n                if (this.selectable) {\n                    this.toggleSelected(true);\n                }\n\n                // Always prevent space from scrolling the page since the list has focus\n                event.preventDefault();\n                break;\n            default:\n        }\n    }\n\n    blur(): void {\n        // When animations are enabled, Angular may end up removing the tag from the DOM a little\n        // earlier than usual, causing it to be blurred and throwing off the logic in the tag list\n        // that moves focus not the next item. To work around the issue, we defer marking the tag\n        // as not focused until the next time the zone stabilizes.\n        this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                this._ngZone.run(() => {\n                    this.hasFocus = false;\n                    this.onBlur.next({ tag: this });\n                });\n            });\n    }\n\n    private dispatchSelectionChange(isUserInput = false) {\n        this.selectionChange.emit({\n            source: this,\n            isUserInput,\n            selected: this._selected\n        });\n    }\n}\n\n\n/**\n *\n * Example:\n *\n *     `<mc-tag>\n *       <mc-icon mcTagRemove>cancel</mc-icon>\n *     </mc-tag>`\n *\n * You *may* use a custom icon, but you may need to override the `mc-tag-remove` positioning\n * styles to properly center the icon within the tag.\n */\n@Directive({\n    selector: '[mcTagRemove]',\n    host: {\n        class: 'mc-tag-remove mc-tag-trailing-icon',\n        '(click)': 'handleClick($event)'\n    }\n})\nexport class McTagRemove {\n    constructor(protected parentTag: McTag) {}\n\n    /** Calls the parent tag's public `remove()` method if applicable. */\n    handleClick(event: Event): void {\n        if (this.parentTag.removable) {\n            this.parentTag.remove();\n        }\n\n        // We need to stop event propagation because otherwise the event will bubble up to the\n        // form field and cause the `onContainerClick` method to be invoked. This method would then\n        // reset the focused tag that has been focused after tag removal. Usually the parent\n        // the parent click listener of the `McTag` would prevent propagation, but it can happen\n        // that the tag is being removed before the event bubbles up.\n        event.stopPropagation();\n    }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    Self,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { FocusKeyManager } from '@ptsecurity/cdk/a11y';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { BACKSPACE, END, HOME } from '@ptsecurity/cdk/keycodes';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { merge, Observable, Subject, Subscription } from 'rxjs';\nimport { startWith, takeUntil } from 'rxjs/operators';\n\nimport { McTagTextControl } from './tag-text-control';\nimport { McTag, McTagEvent, McTagSelectionChange } from './tag.component';\n\n\nexport class McTagListBase {\n    constructor(\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const _McTagListMixinBase: CanUpdateErrorStateCtor & typeof McTagListBase = mixinErrorState(McTagListBase);\n\n\n// Increasing integer for generating unique ids for tag-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the tag list value has changed. */\nexport class McTagListChange {\n    constructor(public source: McTagList, public value: any) {}\n}\n\n\n@Component({\n    selector: 'mc-tag-list',\n    exportAs: 'mcTagList',\n    template: '<ng-content></ng-content>',\n    host: {\n        class: 'mc-tag-list',\n        '[attr.tabindex]': 'disabled ? null : _tabIndex',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-invalid]': 'errorState',\n        '[class.mc-required]': 'required',\n        '(focus)': 'focus()',\n        '(blur)': 'blur()',\n        '(keydown)': 'keydown($event)',\n        '[id]': 'uid'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McTagList }],\n    styleUrls: ['tag-list.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McTagList extends _McTagListMixinBase implements McFormFieldControl<any>,\n    ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n\n    readonly controlType: string = 'mc-tag-list';\n\n    /** Combined stream of all of the child tags' selection change events. */\n    get tagSelectionChanges(): Observable<McTagSelectionChange> {\n        return merge(...this.tags.map((tag) => tag.selectionChange));\n    }\n\n    /** Combined stream of all of the child tags' focus change events. */\n    get tagFocusChanges(): Observable<McTagEvent> {\n        return merge(...this.tags.map((tag) => tag.onFocus));\n    }\n\n    /** Combined stream of all of the child tags' blur change events. */\n    get tagBlurChanges(): Observable<McTagEvent> {\n        return merge(...this.tags.map((tag) => tag.onBlur));\n    }\n\n    /** Combined stream of all of the child tags' remove change events. */\n    get tagRemoveChanges(): Observable<McTagEvent> {\n        return merge(...this.tags.map((tag) => tag.destroyed));\n    }\n\n    /** The array of selected tags inside tag list. */\n    get selected(): McTag[] | McTag {\n        return this.multiple ? this.selectionModel.selected : this.selectionModel.selected[0];\n    }\n\n    /** Whether the user should be allowed to select multiple tags. */\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith(): (o1: any, o2: any) => boolean {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        this._compareWith = fn;\n\n        if (this.selectionModel) {\n            // A different comparator means the selection could change.\n            this.initializeSelection();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): any {\n        return this._value;\n    }\n\n    set value(value: any) {\n        this.writeValue(value);\n        this._value = value;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get id(): string {\n        return this.tagInput ? this.tagInput.id : this.uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get placeholder(): string {\n        return this.tagInput ? this.tagInput.placeholder : this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n\n    /** Whether any tags or the mcTagInput inside of this tag-list has focus. */\n    get focused(): boolean {\n        return (this.tagInput && this.tagInput.focused) || this.hasFocusedTag();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return (!this.tagInput || this.tagInput.empty) && this.tags.length === 0;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat(): boolean {\n        return !this.empty || this.focused;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        return this.ngControl ? !!this.ngControl.disabled : this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n        this.syncTagsDisabledState();\n    }\n\n    /**\n     * Whether or not this tag list is selectable. When a tag list is not selectable,\n     * the selected states for all the tags inside the tag list are always ignored.\n     */\n    @Input()\n    get selectable(): boolean {\n        return this._selectable;\n    }\n\n    set selectable(value: boolean) {\n        this._selectable = coerceBooleanProperty(value);\n\n        if (this.tags) {\n            this.tags.forEach((tag) => tag.tagListSelectable = this._selectable);\n        }\n    }\n\n    @Input()\n    set tabIndex(value: number) {\n        this.userTabIndex = value;\n        this._tabIndex = value;\n    }\n\n    /**\n     * Event that emits whenever the raw value of the tag-list changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    uid: string = `mc-tag-list-${nextUniqueId++}`;\n\n    /**\n     * User defined tab index.\n     * When it is not null, use user defined tab index. Otherwise use tabIndex\n     */\n    userTabIndex: number | null = null;\n\n    keyManager: FocusKeyManager<McTag>;\n\n    selectionModel: SelectionModel<McTag>;\n\n    tagChanges = new EventEmitter<any>();\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /** Orientation of the tag list. */\n    @Input('orientation') orientation: 'horizontal' | 'vertical' = 'horizontal';\n\n    /** Event emitted when the selected tag list value has been changed by the user. */\n    @Output() readonly change: EventEmitter<McTagListChange> = new EventEmitter<McTagListChange>();\n\n    /** The tag components contained within this tag list. */\n    @ContentChildren(McTag, {\n        // Need to use `descendants: true`,\n        // Ivy will no longer match indirect descendants if it's left as false.\n        descendants: true\n    }) tags: QueryList<McTag>;\n\n    _tabIndex = 0;\n\n    private _value: any;\n\n    private _required: boolean = false;\n\n    private _placeholder: string;\n\n    private _disabled: boolean = false;\n\n    private _selectable: boolean = true;\n\n    /** The tag input to add more tags */\n    private tagInput: McTagTextControl;\n\n    private _multiple: boolean = false;\n\n    /**\n     * When a tag is destroyed, we store the index of the destroyed tag until the tags\n     * query list notifies about the update. This is necessary because we cannot determine an\n     * appropriate tag that should receive focus until the array of tags updated completely.\n     */\n    private lastDestroyedTagIndex: number | null = null;\n\n    /** Subject that emits when the component has been destroyed. */\n    private destroyed = new Subject<void>();\n\n    /** Subscription to focus changes in the tags. */\n    private tagFocusSubscription: Subscription | null;\n\n    /** Subscription to blur changes in the tags. */\n    private tagBlurSubscription: Subscription | null;\n\n    /** Subscription to selection changes in tags. */\n    private tagSelectionSubscription: Subscription | null;\n\n    /** Subscription to remove changes in tags. */\n    private tagRemoveSubscription: Subscription | null;\n\n    constructor(\n        protected elementRef: ElementRef<HTMLElement>,\n        private changeDetectorRef: ChangeDetectorRef,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        @Optional() private dir: Directionality,\n        @Optional() parentForm: NgForm,\n        @Optional() parentFormGroup: FormGroupDirective,\n        @Optional() @Self() public ngControl: NgControl\n    ) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            this.ngControl.valueAccessor = this;\n        }\n    }\n\n    ngAfterContentInit() {\n        this.keyManager = new FocusKeyManager<McTag>(this.tags)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this.dir ? this.dir.value : 'ltr');\n\n        if (this.dir) {\n            this.dir.change\n                .pipe(takeUntil(this.destroyed))\n                .subscribe((dir) => this.keyManager.withHorizontalOrientation(dir));\n        }\n\n        // Prevents the tag list from capturing focus and redirecting\n        // it back to the first tag when the user tabs out.\n        this.keyManager.tabOut\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(() => {\n                this._tabIndex = -1;\n\n                setTimeout(() => {\n                    this._tabIndex = this.userTabIndex || 0;\n                    this.changeDetectorRef.markForCheck();\n                });\n            });\n\n        // When the list changes, re-subscribe\n        this.tags.changes\n            .pipe(startWith(null), takeUntil(this.destroyed))\n            .subscribe(() => {\n                if (this.disabled) {\n                    // Since this happens after the content has been\n                    // checked, we need to defer it to the next tick.\n                    Promise.resolve().then(() => { this.syncTagsDisabledState(); });\n                }\n\n                this.resetTags();\n\n                // Reset tags selected/deselected status\n                this.initializeSelection();\n\n                // Check to see if we need to update our tab index\n                this.updateTabIndex();\n\n                // Check to see if we have a destroyed tag and need to refocus\n                this.updateFocusForDestroyedTags();\n\n                // Defer setting the value in order to avoid the \"Expression\n                // has changed after it was checked\" errors from Angular.\n                Promise.resolve().then(() => { this.tagChanges.emit(this.tags.toArray()); });\n\n                this.stateChanges.next();\n            });\n    }\n\n    ngOnInit() {\n        this.selectionModel = new SelectionModel<McTag>(this.multiple, undefined, false);\n        this.stateChanges.next();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroyed.next();\n        this.destroyed.complete();\n        this.stateChanges.complete();\n\n        this.dropSubscriptions();\n    }\n\n    // tslint:disable-next-line:no-empty\n    onTouched = () => {};\n\n    // tslint:disable-next-line:no-empty\n    onChange: (value: any) => void = () => {};\n\n    /** Associates an HTML input element with this tag list. */\n    registerInput(inputElement: McTagTextControl): void {\n        this.tagInput = inputElement;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any): void {\n        if (this.tags) {\n            this.setSelectionByValue(value, false);\n        }\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this.onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n        this.stateChanges.next();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick(event: MouseEvent) {\n        if (!this.originatesFromTag(event)) {\n            this.focus();\n        }\n    }\n\n    /**\n     * Focuses the first non-disabled tag in this tag list, or the associated input when there\n     * are no eligible tags.\n     */\n    focus(): void {\n        if (this.disabled) { return; }\n\n        // TODO: ARIA says this should focus the first `selected` tag if any are selected.\n        // Focus on first element if there's no tagInput inside tag-list\n        if (this.tagInput && this.tagInput.focused) {\n            // do nothing\n        } else if (this.tags.length > 0) {\n            this.keyManager.setFirstItemActive();\n            this.stateChanges.next();\n        } else {\n            this.focusInput();\n            this.stateChanges.next();\n        }\n    }\n\n    /** Attempt to focus an input if we have one. */\n    focusInput() {\n        if (this.tagInput) {\n            this.tagInput.focus();\n        }\n    }\n\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n    keydown(event: KeyboardEvent) {\n        const target = event.target as HTMLElement;\n\n        // If they are on an empty input and hit backspace, focus the last tag\n        // tslint:disable-next-line: deprecation\n        if (event.keyCode === BACKSPACE && this.isInputEmpty(target)) {\n            this.keyManager.setLastItemActive();\n            event.preventDefault();\n        } else if (target && target.classList.contains('mc-tag')) {\n            // tslint:disable-next-line: deprecation\n            if (event.keyCode === HOME) {\n                this.keyManager.setFirstItemActive();\n                event.preventDefault();\n            // tslint:disable-next-line: deprecation\n            } else if (event.keyCode === END) {\n                this.keyManager.setLastItemActive();\n                event.preventDefault();\n            } else {\n                this.keyManager.onKeydown(event);\n            }\n\n            this.stateChanges.next();\n        }\n    }\n\n    setSelectionByValue(value: any, isUserInput: boolean = true) {\n        this.clearSelection();\n        this.tags.forEach((tag) => tag.deselect());\n\n        if (Array.isArray(value)) {\n            value.forEach((currentValue) => this.selectValue(currentValue, isUserInput));\n            this.sortValues();\n        } else {\n            const correspondingTag = this.selectValue(value, isUserInput);\n\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what tag the user interacted with last.\n            if (correspondingTag && isUserInput) {\n                this.keyManager.setActiveItem(correspondingTag);\n            }\n        }\n    }\n\n    /** When blurred, mark the field as touched when focus moved outside the tag list. */\n    blur() {\n        if (!this.hasFocusedTag()) {\n            this.keyManager.setActiveItem(-1);\n        }\n\n        if (!this.disabled) {\n            if (this.tagInput) {\n                // If there's a tag input, we should check whether the focus moved to tag input.\n                // If the focus is not moved to tag input, mark the field as touched. If the focus moved\n                // to tag input, do nothing.\n                // Timeout is needed to wait for the focus() event trigger on tag input.\n                setTimeout(() => {\n                    if (!this.focused) {\n                        this.markAsTouched();\n                    }\n                });\n            } else {\n                // If there's no tag input, then mark the field as touched.\n                this.markAsTouched();\n            }\n        }\n    }\n\n    /** Mark the field as touched */\n    markAsTouched() {\n        this.onTouched();\n        this.changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     */\n    protected updateTabIndex(): void {\n        // If we have 0 tags, we should not allow keyboard focus\n        this._tabIndex = this.userTabIndex || (this.tags.length === 0 ? -1 : 0);\n    }\n\n    /**\n     * If the amount of tags changed, we need to update the\n     * key manager state and focus the next closest tag.\n     */\n    protected updateFocusForDestroyedTags() {\n        if (this.lastDestroyedTagIndex != null && this.tags.length) {\n            const newTagIndex = Math.min(this.lastDestroyedTagIndex, this.tags.length - 1);\n            this.keyManager.setActiveItem(newTagIndex);\n        } else if (this.tags.length === 0) {\n            this.focusInput();\n        }\n\n        this.lastDestroyedTagIndex = null;\n    }\n\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of tags.\n     */\n    private isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.tags.length;\n    }\n\n    private isInputEmpty(element: HTMLElement): boolean {\n        if (element && element.nodeName.toLowerCase() === 'input') {\n            const input = element as HTMLInputElement;\n\n            return !input.value;\n        }\n\n        return false;\n    }\n\n    /**\n     * Finds and selects the tag based on its value.\n     * @returns Tag that has the corresponding value.\n     */\n    private selectValue(value: any, isUserInput: boolean = true): McTag | undefined {\n\n        const correspondingTag = this.tags.find((tag) => {\n            return tag.value != null && this._compareWith(tag.value, value);\n        });\n\n        if (correspondingTag) {\n            if (isUserInput) {\n                correspondingTag.selectViaInteraction();\n            } else {\n                correspondingTag.select();\n            }\n\n            this.selectionModel.select(correspondingTag);\n        }\n\n        return correspondingTag;\n    }\n\n    private initializeSelection(): void {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl || this._value) {\n                this.setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n                this.stateChanges.next();\n            }\n        });\n    }\n\n    /**\n     * Deselects every tag in the list.\n     * @param skip Tag that should not be deselected.\n     */\n    private clearSelection(skip?: McTag): void {\n        this.selectionModel.clear();\n        this.tags.forEach((tag) => {\n            if (tag !== skip) {\n                tag.deselect();\n            }\n        });\n        this.stateChanges.next();\n    }\n\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     */\n    private sortValues(): void {\n        if (this._multiple) {\n            this.selectionModel.clear();\n\n            this.tags.forEach((tag) => {\n                if (tag.selected) {\n                    this.selectionModel.select(tag);\n                }\n            });\n            this.stateChanges.next();\n        }\n    }\n\n    /** Emits change event to set the model value. */\n    private propagateChanges(fallbackValue?: any): void {\n        let valueToEmit: any = null;\n\n        if (Array.isArray(this.selected)) {\n            valueToEmit = this.selected.map((tag) => tag.value);\n        } else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.change.emit(new McTagListChange(this, valueToEmit));\n        this.valueChange.emit(valueToEmit);\n        this.onChange(valueToEmit);\n        this.changeDetectorRef.markForCheck();\n    }\n\n    private resetTags() {\n        this.dropSubscriptions();\n        this.listenToTagsFocus();\n        this.listenToTagsSelection();\n        this.listenToTagsRemoved();\n    }\n\n    private dropSubscriptions() {\n        if (this.tagFocusSubscription) {\n            this.tagFocusSubscription.unsubscribe();\n            this.tagFocusSubscription = null;\n        }\n\n        if (this.tagBlurSubscription) {\n            this.tagBlurSubscription.unsubscribe();\n            this.tagBlurSubscription = null;\n        }\n\n        if (this.tagSelectionSubscription) {\n            this.tagSelectionSubscription.unsubscribe();\n            this.tagSelectionSubscription = null;\n        }\n\n        if (this.tagRemoveSubscription) {\n            this.tagRemoveSubscription.unsubscribe();\n            this.tagRemoveSubscription = null;\n        }\n    }\n\n    /** Listens to user-generated selection events on each tag. */\n    private listenToTagsSelection(): void {\n        this.tagSelectionSubscription = this.tagSelectionChanges.subscribe((event) => {\n            if (event.source.selected) {\n                this.selectionModel.select(event.source);\n            } else {\n                this.selectionModel.deselect(event.source);\n            }\n\n            // For single selection tag list, make sure the deselected value is unselected.\n            if (!this.multiple) {\n                this.tags.forEach((tag) => {\n                    if (!this.selectionModel.isSelected(tag) && tag.selected) {\n                        tag.deselect();\n                    }\n                });\n            }\n\n            if (event.isUserInput) {\n                this.propagateChanges();\n            }\n        });\n    }\n\n    /** Listens to user-generated selection events on each tag. */\n    private listenToTagsFocus(): void {\n        this.tagFocusSubscription = this.tagFocusChanges.subscribe((event) => {\n            const tagIndex: number = this.tags.toArray().indexOf(event.tag);\n\n            if (this.isValidIndex(tagIndex)) {\n                this.keyManager.updateActiveItem(tagIndex);\n            }\n            this.stateChanges.next();\n        });\n\n        this.tagBlurSubscription = this.tagBlurChanges.subscribe(() => {\n            this.blur();\n            this.stateChanges.next();\n        });\n    }\n\n    private listenToTagsRemoved(): void {\n        this.tagRemoveSubscription = this.tagRemoveChanges.subscribe((event) => {\n            const tag = event.tag;\n            const tagIndex = this.tags.toArray().indexOf(event.tag);\n\n            // In case the tag that will be removed is currently focused, we temporarily store\n            // the index in order to be able to determine an appropriate sibling tag that will\n            // receive focus.\n            if (this.isValidIndex(tagIndex) && tag.hasFocus) {\n                this.lastDestroyedTagIndex = tagIndex;\n            }\n        });\n    }\n\n    /** Checks whether an event comes from inside a tag element. */\n    private originatesFromTag(event: Event): boolean {\n        let currentElement = event.target as HTMLElement | null;\n\n        while (currentElement && currentElement !== this.elementRef.nativeElement) {\n            if (currentElement.classList.contains('mc-tag')) {\n                return true;\n            }\n\n            currentElement = currentElement.parentElement;\n        }\n\n        return false;\n    }\n\n    /** Checks whether any of the tags is focused. */\n    private hasFocusedTag() {\n        return this.tags.some((tag) => tag.hasFocus);\n    }\n\n    /** Syncs the list's disabled state with the individual tags. */\n    private syncTagsDisabledState() {\n        if (this.tags) {\n            this.tags.forEach((tag) => {\n                tag.disabled = this._disabled;\n            });\n        }\n    }\n}\n\n","import { Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output } from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { hasModifierKey } from '@ptsecurity/cdk/keycodes';\n\nimport { MC_TAGS_DEFAULT_OPTIONS, McTagsDefaultOptions } from './tag-default-options';\nimport { McTagList } from './tag-list.component';\nimport { McTagTextControl } from './tag-text-control';\n\n\n/** Represents an input event on a `mcTagInput`. */\n// tslint:disable-next-line: naming-convention\nexport interface McTagInputEvent {\n    /** The native `<input>` element that the event is being fired for. */\n    input: HTMLInputElement;\n\n    /** The value of the input. */\n    value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds tag-specific behaviors to an input element inside `<mc-form-field>`.\n * May be placed inside or outside of an `<mc-tag-list>`.\n */\n@Directive({\n    selector: 'input[mcTagInputFor]',\n    exportAs: 'mcTagInput, mcTagInputFor',\n    host: {\n        class: 'mc-tag-input mc-input-element',\n        '[id]': 'id',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.placeholder]': 'placeholder || null',\n        '[attr.aria-invalid]': '_tagList && _tagList.ngControl ? _tagList.ngControl.invalid : null',\n        '(keydown)': 'keydown($event)',\n        '(blur)': 'blur()',\n        '(focus)': 'onFocus()',\n        '(input)': 'onInput()'\n    }\n})\nexport class McTagInput implements McTagTextControl, OnChanges {\n    /** Whether the control is focused. */\n    focused: boolean = false;\n\n    /**\n     * The list of key codes that will trigger a tagEnd event.\n     *\n     * Defaults to `[ENTER]`.\n     */\n    @Input('mcTagInputSeparatorKeyCodes')\n    separatorKeyCodes: number[] | Set<number> = this.defaultOptions.separatorKeyCodes;\n\n    /** Emitted when a tag is to be added. */\n    @Output('mcTagInputTokenEnd')\n    tagEnd: EventEmitter<McTagInputEvent> = new EventEmitter<McTagInputEvent>();\n\n    /** The input's placeholder text. */\n    @Input() placeholder: string = '';\n\n    /** Unique id for the input. */\n    @Input() id: string = `mc-tag-list-input-${nextUniqueId++}`;\n\n    /** Register input for tag list */\n    @Input('mcTagInputFor')\n    set tagList(value: McTagList) {\n        if (value) {\n            this._tagList = value;\n            this._tagList.registerInput(this);\n        }\n    }\n\n    // tslint:disable-next-line: naming-convention\n    _tagList: McTagList;\n\n    /**\n     * Whether or not the tagEnd event will be emitted when the input is blurred.\n     */\n    @Input('mcTagInputAddOnBlur')\n    get addOnBlur(): boolean {\n        return this._addOnBlur;\n    }\n\n    set addOnBlur(value: boolean) {\n        this._addOnBlur = coerceBooleanProperty(value);\n    }\n\n    private _addOnBlur: boolean = false;\n\n    /** Whether the input is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this._tagList && this._tagList.disabled);\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    private _disabled: boolean = false;\n\n    /** Whether the input is empty. */\n    get empty(): boolean {\n        return !this.inputElement.value;\n    }\n\n    /** The native input element to which this directive is attached. */\n    private inputElement: HTMLInputElement;\n\n    constructor(\n        private elementRef: ElementRef<HTMLInputElement>,\n        @Inject(MC_TAGS_DEFAULT_OPTIONS) private defaultOptions: McTagsDefaultOptions\n    ) {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        this.inputElement = this.elementRef.nativeElement as HTMLInputElement;\n    }\n\n    ngOnChanges() {\n        this._tagList.stateChanges.next();\n    }\n\n    /** Utility method to make host definition/tests more clear. */\n    keydown(event?: KeyboardEvent) {\n        this.emittagEnd(event);\n    }\n\n    /** Checks to see if the blur should emit the (tagEnd) event. */\n    blur() {\n        if (this.addOnBlur) {\n            this.emittagEnd();\n        }\n\n        this.focused = false;\n        // Blur the tag list if it is not focused\n        if (!this._tagList.focused) {\n            this._tagList.blur();\n        }\n\n        this._tagList.stateChanges.next();\n    }\n\n    /** Checks to see if the (tagEnd) event needs to be emitted. */\n    emittagEnd(event?: KeyboardEvent) {\n        if (!this.inputElement.value && !!event) {\n            this._tagList.keydown(event);\n        }\n\n        if (!event || this.isSeparatorKey(event)) {\n            this.tagEnd.emit({ input: this.inputElement, value: this.inputElement.value });\n\n            if (event) {\n                event.preventDefault();\n            }\n        }\n    }\n\n    onInput() {\n        // Let tag list know whenever the value changes.\n        this._tagList.stateChanges.next();\n    }\n\n    onFocus() {\n        this.focused = true;\n        this._tagList.stateChanges.next();\n    }\n\n    /** Focuses the input. */\n    focus(): void {\n        this.inputElement.focus();\n    }\n\n    /** Checks whether a keycode is one of the configured separators. */\n    private isSeparatorKey(event: KeyboardEvent) {\n        if (hasModifierKey(event)) { return false; }\n\n        const separators = this.separatorKeyCodes;\n        // tslint:disable-next-line: deprecation\n        const keyCode = event.keyCode;\n\n        return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ENTER } from '@ptsecurity/cdk/keycodes';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { MC_TAGS_DEFAULT_OPTIONS, McTagsDefaultOptions } from './tag-default-options';\nimport { McTagInput } from './tag-input';\nimport { McTagList } from './tag-list.component';\nimport { McTag, McTagAvatar, McTagRemove, McTagTrailingIcon } from './tag.component';\n\n\n@NgModule({\n    imports: [CommonModule, PlatformModule],\n    exports: [\n        McTagList,\n        McTag,\n        McTagInput,\n        McTagTrailingIcon,\n        McTagAvatar,\n        McTagRemove\n    ],\n    declarations: [\n        McTagList,\n        McTag,\n        McTagInput,\n        McTagTrailingIcon,\n        McTagAvatar,\n        McTagRemove\n    ],\n    providers: [{\n        provide: MC_TAGS_DEFAULT_OPTIONS,\n        // tslint:disable-next-line: no-object-literal-type-assertion\n        useValue: { separatorKeyCodes: [ENTER] } as McTagsDefaultOptions\n    }]\n})\nexport class McTagsModule {}\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","setPrototypeOf","__proto__","Array","p","hasOwnProperty","MC_TAGS_DEFAULT_OPTIONS","InjectionToken","McTagSelectionChange","source","selected","isUserInput","TAG_ATTRIBUTE_NAMES","McTagAvatar","type","Directive","args","selector","host","class","McTagTrailingIcon","McTagBase","_elementRef","_McTagMixinBase","mixinColor","mixinDisabled","McTag","_super","elementRef","_ngZone","_this","call","onFocus","Subject","onBlur","hasFocus","tagListSelectable","selectionChange","EventEmitter","destroyed","removed","_selected","_selectable","_removable","_disabled","addHostClassName","nativeElement","tslib_1.__extends","defineProperty","value","coercedValue","coerceBooleanProperty","dispatchSelectionChange","undefined","_value","textContent","disabled","ngAfterContentInit","addClassModificatorForIcons","icons","contentChildren","map","item","length","iconElement","previousElementSibling","nextElementSibling","nextSibling","classList","add","previousSibling","firstIconElement","secondIconElement","_i","TAG_ATTRIBUTE_NAMES_1","attr","hasAttribute","tagName","toLowerCase","ngOnDestroy","emit","tag","select","deselect","selectViaInteraction","toggleSelected","focus","next","remove","removable","handleClick","event","preventDefault","stopPropagation","handleKeydown","keyCode","DELETE","BACKSPACE","SPACE","selectable","blur","onStable","asObservable","pipe","take","subscribe","run","Component","exportAs","template","styles","inputs","[attr.tabindex]","[class.mc-tag-selected]","[class.mc-tag-with-avatar]","[class.mc-tag-with-trailing-icon]","[class.mc-tag-disabled]","[class.mc-disabled]","[attr.disabled]","(click)","(keydown)","(focus)","(blur)","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","ElementRef","NgZone","ContentChildren","McIcon","avatar","ContentChild","static","trailingIcon","removeIcon","forwardRef","McTagRemove","Output","Input","parentTag","McTagListBase","defaultErrorStateMatcher","parentForm","parentFormGroup","ngControl","_McTagListMixinBase","mixinErrorState","nextUniqueId","McTagListChange","McTagList","changeDetectorRef","dir","controlType","valueChange","uid","userTabIndex","tagChanges","orientation","change","_tabIndex","_required","_multiple","lastDestroyedTagIndex","onTouched","onChange","_compareWith","o1","o2","valueAccessor","merge","apply","tags","multiple","selectionModel","fn","initializeSelection","writeValue","tagInput","id","stateChanges","placeholder","_placeholder","focused","hasFocusedTag","empty","syncTagsDisabledState","forEach","keyManager","FocusKeyManager","withVerticalOrientation","withHorizontalOrientation","takeUntil","tabOut","setTimeout","markForCheck","changes","startWith","Promise","resolve","then","resetTags","updateTabIndex","updateFocusForDestroyedTags","toArray","ngOnInit","SelectionModel","ngDoCheck","updateErrorState","complete","dropSubscriptions","registerInput","inputElement","setSelectionByValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","onContainerClick","originatesFromTag","setFirstItemActive","focusInput","keydown","target","isInputEmpty","setLastItemActive","contains","HOME","END","onKeydown","clearSelection","isArray","currentValue","selectValue","sortValues","correspondingTag","setActiveItem","markAsTouched","newTagIndex","Math","min","isValidIndex","index","element","nodeName","find","skip","clear","propagateChanges","fallbackValue","valueToEmit","listenToTagsFocus","listenToTagsSelection","listenToTagsRemoved","tagFocusSubscription","unsubscribe","tagBlurSubscription","tagSelectionSubscription","tagRemoveSubscription","tagSelectionChanges","isSelected","tagFocusChanges","tagIndex","indexOf","updateActiveItem","tagBlurChanges","tagRemoveChanges","currentElement","parentElement","some","[class.mc-invalid]","[class.mc-required]","[id]","providers","provide","McFormFieldControl","useExisting","ChangeDetectorRef","ErrorStateMatcher","Directionality","decorators","Optional","NgForm","FormGroupDirective","NgControl","Self","compareWith","required","tabIndex","errorStateMatcher","descendants","McTagInput","defaultOptions","separatorKeyCodes","tagEnd","_addOnBlur","_tagList","ngOnChanges","emittagEnd","addOnBlur","isSeparatorKey","input","onInput","hasModifierKey","separators","has","[attr.placeholder]","[attr.aria-invalid]","(input)","Inject","tagList","ɵ0","ENTER","McTagsModule","NgModule","imports","CommonModule","PlatformModule","exports","declarations","useValue"],"mappings":"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"}