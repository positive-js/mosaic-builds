{"version":3,"sources":["../../../packages/mosaic/datepicker/datepicker-errors.ts","../../../packages/mosaic/datepicker/datepicker-intl.ts","../../../packages/mosaic/datepicker/calendar-body.ts","../../../packages/mosaic/datepicker/month-view.ts","../../../packages/mosaic/datepicker/multi-year-view.ts","../../../packages/mosaic/datepicker/year-view.ts","../../../packages/mosaic/datepicker/calendar.ts","../../../packages/mosaic/datepicker/datepicker-animations.ts","../../../packages/mosaic/datepicker/datepicker.ts","../../../packages/mosaic/datepicker/datepicker-input.ts","../../../packages/mosaic/datepicker/datepicker-toggle.ts","../../../packages/mosaic/datepicker/datepicker-module.ts"],"names":["createMissingDateImplError","provider","Error","this","changes","Subject","calendarLabel","openCalendarLabel","prevMonthLabel","nextMonthLabel","prevYearLabel","nextYearLabel","prevMultiYearLabel","nextMultiYearLabel","switchToMonthViewLabel","switchToMultiYearViewLabel","Injectable","args","providedIn","value","displayValue","ariaLabel","enabled","cssClasses","McCalendarBody","elementRef","ngZone","numCols","activeCell","cellAspectRatio","selectedValueChange","EventEmitter","prototype","cellClicked","cell","emit","ngOnChanges","columnChanges","rows","firstRowOffset","length","cellPadding","cellWidth","isActiveCell","rowIndex","colIndex","cellNumber","focusActiveCell","_this","runOutsideAngular","onStable","asObservable","pipe","take","subscribe","nativeElement","querySelector","focus","Component","selector","exportAs","template","host","class","role","aria-readonly","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","ElementRef","NgZone","Input","Output","McMonthView","changeDetectorRef","dateFormats","dateAdapter","dir","selectedChange","userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","weekdays","map","long","i","narrow","slice","concat","_activeDate","today","Object","defineProperty","oldActiveDate","validDate","getValidDateOrNull","deserialize","clampDate","minDate","maxDate","hasSameMonthAndYear","init","_selected","selectedDate","getDateInCurrentMonth","_minDate","_maxDate","ngAfterContentInit","dateSelected","date","selectedYear","getYear","activeDate","selectedMonth","getMonth","createDate","handleCalendarBodyKeydown","event","isRtl","keyCode","LEFT_ARROW","addCalendarDays","RIGHT_ARROW","UP_ARROW","DOWN_ARROW","HOME","getDate","END","getNumDaysInMonth","PAGE_UP","altKey","addCalendarYears","addCalendarMonths","PAGE_DOWN","ENTER","SPACE","dateFilter","preventDefault","compareDate","selected","todayDate","monthLabel","getMonthNames","toLocaleUpperCase","substr","firstOfMonth","firstWeekOffset","getDayOfWeek","createWeekCells","markForCheck","mcCalendarBody","daysInMonth","dateNames","getDateNames","weeks","push","shouldEnableDate","format","display","dateA11yLabel","cellClasses","dateClass","undefined","McCalendarCell","d1","d2","obj","isDateInstance","isValid","ChangeDetectorRef","Optional","type","Inject","MC_DATE_FORMATS","DateAdapter","decorators","Directionality","ViewChild","static","yearsPerPage","McMultiYearView","yearSelected","Math","floor","todayYear","activeYear","activeOffset","years","row","year","createCellForYear","onYearSelected","month","min","getActiveCell","yearName","getYearName","shouldEnableYear","McYearView","monthSelected","getMonthInCurrentYear","onMonthSelected","normalizedDate","todayMonth","yearLabel","monthNames","months","createCellForMonth","monthName","monthYearA11yLabel","newMonthName","shouldEnableMonth","isYearAndMonthAfterMaxDate","isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","McCalendarHeader","intl","calendar","stateChanges","currentView","label","monthYearLabel","multi-year","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","isSameView","nextEnabled","date1","date2","McDatepickerIntl","McCalendar","forwardRef","startView","moveFocusOnNextTick","intlChanges","next","_startAt","clampedActiveDate","_currentView","calendarHeaderPortal","ComponentPortal","headerComponent","startAt","ngAfterViewChecked","ngOnDestroy","unsubscribe","complete","change","firstChange","view","getCurrentViewComponent","detectChanges","updateTodaysDate","monthView","yearView","multiYearView","sameDate","yearSelectedInMultiYearView","normalizedYear","monthSelectedInYearView","normalizedMonth","userSelected","goToDateInView","mcDatepickerAnimations","transformPanel","trigger","state","style","opacity","transform","transition","animate","fadeInCalendar","Element","matches","msMatchesSelector","datepickerUid","MC_DATEPICKER_SCROLL_STRATEGY","InjectionToken","MC_DATEPICKER_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","provide","deps","Overlay","useFactory","McDatepickerContent","ngAfterViewInit","[@transformPanel]","animations","McDatepicker","viewContainerRef","scrollStrategy","document","_hasBackdrop","backdropClass","openedStream","closedStream","id","disabledChange","selectedChanged","_opened","validSelected","focusedElementBeforeOpen","inputSubscription","Subscription","EMPTY","closeSubscription","coerceBooleanProperty","datepickerInput","_disabled","disabled","newValue","open","close","max","popupRef","dispose","popupComponentRef","select","oldValue","selectYear","selectMonth","registerInput","input","valueChange","activeElement","openAsPopup","hasAttached","detach","calendarPortal","isAttached","completeClose","setTimeout","createPopup","attach","instance","datepicker","updatePosition","overlayConfig","OverlayConfig","positionStrategy","createPopupPositionStrategy","hasBackdrop","direction","panelClass","create","overlayElement","setAttribute","closingActions","merge","backdropClick","outsidePointerEvents","detachments","keydownEvents","filter","ESCAPE","position","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withLockedPosition","withPositions","originX","originY","overlayX","overlayY","providers","McFormFieldControl","useExisting","ViewContainerRef","DOCUMENT","MC_DATEPICKER_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","McDatepickerInput","multi","MC_DATEPICKER_VALIDATORS","NG_VALIDATORS","target","targetElement","dateChange","dateInput","datepickerSubscription","localeSubscription","lastValueValid","onTouched","cvaOnChange","validatorOnChange","parseValidator","mcDatepickerParse","text","minValidator","control","controlValue","mcDatepickerMin","actual","maxValidator","mcDatepickerMax","filterValidator","mcDatepickerFilter","validator","Validators","compose","localeChanges","McDatepickerInputEvent","_value","oldDate","formatValue","_min","_max","element","blur","registerOnValidatorChange","fn","validate","c","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","onKeydown","isAltDownArrow","readOnly","onInput","parse","onChange","onBlur","Directive","MC_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.aria-owns]","[attr.min]","[attr.max]","[attr.disabled]","(input)","(change)","(blur)","(keydown)","McDatepickerToggle","watchStateChanges","stopPropagation","datepickerDisabled","observableOf","inputDisabled","datepickerToggled","[class.mc-active]","ContentChild","McDatepickerToggleIcon","NgModule","imports","CommonModule","McButtonModule","OverlayModule","A11yModule","PortalModule","McIconModule","exports","declarations","entryComponents"],"mappings":"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","sourcesContent":["/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n    return Error(\n        `McDatepicker: No provider found for ${provider}. You must import one of the existing ` +\n        `modules at your application root or provide a custom implementation or use exists ones.`);\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({ providedIn: 'root' })\nexport class McDatepickerIntl {\n    /**\n     * Stream that emits whenever the labels here are changed. Use this to notify\n     * components if the labels have changed after initialization.\n     */\n    readonly changes: Subject<void> = new Subject<void>();\n\n    /** A label for the calendar popup (used by screen readers). */\n    calendarLabel: string = 'Calendar';\n\n    /** A label for the button used to open the calendar popup (used by screen readers). */\n    openCalendarLabel: string = 'Open calendar';\n\n    /** A label for the previous month button (used by screen readers). */\n    prevMonthLabel: string = 'Previous month';\n\n    /** A label for the next month button (used by screen readers). */\n    nextMonthLabel: string = 'Next month';\n\n    /** A label for the previous year button (used by screen readers). */\n    prevYearLabel: string = 'Previous year';\n\n    /** A label for the next year button (used by screen readers). */\n    nextYearLabel: string = 'Next year';\n\n    /** A label for the previous multi-year button (used by screen readers). */\n    prevMultiYearLabel: string = 'Previous 20 years';\n\n    /** A label for the next multi-year button (used by screen readers). */\n    nextMultiYearLabel: string = 'Next 20 years';\n\n    /** A label for the 'switch to month view' button (used by screen readers). */\n    switchToMonthViewLabel: string = 'Choose date';\n\n    /** A label for the 'switch to year view' button (used by screen readers). */\n    switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","// tslint:disable:no-magic-numbers\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    Output,\n    ViewEncapsulation,\n    NgZone,\n    OnChanges,\n    SimpleChanges\n} from '@angular/core';\nimport { take } from 'rxjs/operators';\n\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type McCalendarCellCssClasses = string | string[] | Set<string> | { [key: string]: any };\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class McCalendarCell {\n    constructor(\n        public value: number,\n        public displayValue: string,\n        public ariaLabel: string,\n        public enabled: boolean,\n        public cssClasses?: McCalendarCellCssClasses\n    ) {\n    }\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n    selector: '[mc-calendar-body]',\n    exportAs: 'mcCalendarBody',\n    templateUrl: 'calendar-body.html',\n    styleUrls: ['calendar-body.scss'],\n    host: {\n        class: 'mc-calendar__body',\n        role: 'grid',\n        'aria-readonly': 'true'\n    },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCalendarBody implements OnChanges {\n    /** The label for the table. (e.g. \"Jan 2017\"). */\n    @Input() label: string;\n\n    /** The cells to display in the table. */\n    @Input() rows: McCalendarCell[][];\n\n    /** The value in the table that corresponds to today. */\n    @Input() todayValue: number;\n\n    /** The value in the table that is currently selected. */\n    @Input() selectedValue: number;\n\n    /** The minimum number of free cells needed to fit the label in the first row. */\n    @Input() labelMinRequiredCells: number;\n\n    /** The number of columns in the table. */\n    @Input() numCols = 7;\n\n    /** The cell number of the active cell in the table. */\n    @Input() activeCell = 0;\n\n    /**\n     * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n     * maintained even as the table resizes.\n     */\n    @Input() cellAspectRatio = 1;\n\n    /** Emits when a new value is selected. */\n    @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n    /** The number of blank cells to put at the beginning for the first row. */\n    firstRowOffset: number;\n\n    /** Padding for the individual date cells. */\n    cellPadding: string;\n\n    /** Width of an individual cell. */\n    cellWidth: string;\n\n    constructor(private elementRef: ElementRef<HTMLElement>, private ngZone: NgZone) {\n    }\n\n    cellClicked(cell: McCalendarCell): void {\n        if (cell.enabled) {\n            this.selectedValueChange.emit(cell.value);\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const columnChanges = changes.numCols;\n        // tslint:disable-next-line:no-this-assignment\n        const { rows, numCols } = this;\n\n        if (changes.rows || columnChanges) {\n            this.firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n        }\n\n        if (changes.cellAspectRatio || columnChanges || !this.cellPadding) {\n            this.cellPadding = `${this.cellAspectRatio * 50 / numCols}%`;\n        }\n\n        if (columnChanges || !this.cellWidth) {\n            this.cellWidth = `${100 / numCols}%`;\n        }\n    }\n\n    isActiveCell(rowIndex: number, colIndex: number): boolean {\n        let cellNumber = rowIndex * this.numCols + colIndex;\n\n        // Account for the fact that the first row may not have as many cells.\n        if (rowIndex) {\n            cellNumber -= this.firstRowOffset;\n        }\n\n        return cellNumber === this.activeCell;\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.ngZone.runOutsideAngular(() => {\n            this.ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n                const activeCell: HTMLElement | null =\n                    this.elementRef.nativeElement.querySelector('.mc-calendar__body_active');\n\n                if (activeCell) {\n                    activeCell.focus();\n                }\n            });\n        });\n    }\n}\n","// tslint:disable:no-magic-numbers\nimport { Directionality } from '@angular/cdk/bidi';\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Inject,\n    Input,\n    Optional,\n    Output,\n    ViewEncapsulation,\n    ViewChild\n} from '@angular/core';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    PAGE_DOWN,\n    PAGE_UP,\n    RIGHT_ARROW,\n    UP_ARROW,\n    SPACE\n} from '@ptsecurity/cdk/keycodes';\n\nimport { McCalendarBody, McCalendarCell, McCalendarCellCssClasses } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-month-view',\n    exportAs: 'mcMonthView',\n    templateUrl: 'month-view.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McMonthView<D> implements AfterContentInit {\n    /**\n     * The date to display in this month view (everything other than the month and year is ignored).\n     */\n    @Input()\n    get activeDate(): D {\n        return this._activeDate;\n    }\n\n    set activeDate(value: D) {\n        const oldActiveDate = this._activeDate;\n        const validDate =\n            this.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();\n        this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n        if (!this.hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n            this.init();\n        }\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.selectedDate = this.getDateInCurrentMonth(this._selected);\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** Function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Function that can be used to add custom CSS classes to dates. */\n    @Input() dateClass: (date: D) => McCalendarCellCssClasses;\n\n    /** Emits when a new date is selected. */\n    @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n    /** Emits when any date is selected. */\n    @Output() readonly userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Emits when any date is activated. */\n    @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** The body of calendar table */\n    @ViewChild(McCalendarBody, {static: false}) mcCalendarBody: McCalendarBody;\n\n    /** The label for this month (e.g. \"January 2017\"). */\n    monthLabel: string;\n\n    /** Grid of calendar cells representing the dates of the month. */\n    weeks: McCalendarCell[][];\n\n    /** The number of blank cells in the first row before the 1st of the month. */\n    firstWeekOffset: number;\n\n    /**\n     * The date of the month that the currently selected Date falls on.\n     * Null if the currently selected Date is in another month.\n     */\n    selectedDate: number | null;\n\n    /** The date of the month that today falls on. Null if today is in another month. */\n    todayDate: number | null;\n\n    /** The names of the weekdays. */\n    weekdays: { long: string; narrow: string }[];\n    private _activeDate: D;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() private dir?: Directionality\n    ) {\n\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        const firstDayOfWeek = this.dateAdapter.getFirstDayOfWeek();\n        const narrowWeekdays = this.dateAdapter.getDayOfWeekNames('narrow');\n        const longWeekdays = this.dateAdapter.getDayOfWeekNames('long');\n\n        // Rotate the labels for days of the week based on the configured first day of the week.\n        const weekdays = longWeekdays.map((long, i) => {\n            return { long, narrow: narrowWeekdays[i] };\n        });\n        this.weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n        this._activeDate = this.dateAdapter.today();\n    }\n\n    ngAfterContentInit() {\n        this.init();\n    }\n\n    /** Handles when a new date is selected. */\n    dateSelected(date: number) {\n        if (this.selectedDate !== date) {\n            const selectedYear = this.dateAdapter.getYear(this.activeDate);\n            const selectedMonth = this.dateAdapter.getMonth(this.activeDate);\n            const selectedDate = this.dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n            this.selectedChange.emit(selectedDate);\n        }\n\n        this.userSelection.emit();\n    }\n\n    /** Handles keydown events on the calendar body when calendar is in month view. */\n    handleCalendarBodyKeydown(event: KeyboardEvent): void {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n        const oldActiveDate = this._activeDate;\n        const isRtl = this.isRtl();\n\n        // tslint:disable-next-line:deprecation\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, -7);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, 7);\n                break;\n            case HOME:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate,\n                    1 - this.dateAdapter.getDate(this._activeDate));\n                break;\n            case END:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate,\n                    (this.dateAdapter.getNumDaysInMonth(this._activeDate) -\n                        this.dateAdapter.getDate(this._activeDate)));\n                break;\n            case PAGE_UP:\n                this.activeDate = event.altKey ?\n                    this.dateAdapter.addCalendarYears(this._activeDate, -1) :\n                    this.dateAdapter.addCalendarMonths(this._activeDate, -1);\n                break;\n            case PAGE_DOWN:\n                this.activeDate = event.altKey ?\n                    this.dateAdapter.addCalendarYears(this._activeDate, 1) :\n                    this.dateAdapter.addCalendarMonths(this._activeDate, 1);\n                break;\n            case ENTER:\n            case SPACE:\n                if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n                    this.dateSelected(this.dateAdapter.getDate(this._activeDate));\n                    this.userSelection.emit();\n                    // Prevent unexpected default actions such as form submission.\n                    event.preventDefault();\n                }\n\n                return;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n\n        if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n\n        this.focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n\n    /** Initializes this month view. */\n    init() {\n        this.selectedDate = this.getDateInCurrentMonth(this.selected);\n        this.todayDate = this.getDateInCurrentMonth(this.dateAdapter.today());\n        this.monthLabel =\n            this.dateAdapter.getMonthNames('short')[this.dateAdapter.getMonth(this.activeDate)];\n\n        this.monthLabel = this.monthLabel[0].toLocaleUpperCase() + this.monthLabel.substr(1);\n\n        const firstOfMonth = this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate),\n            this.dateAdapter.getMonth(this.activeDate), 1);\n        this.firstWeekOffset =\n            (DAYS_PER_WEEK + this.dateAdapter.getDayOfWeek(firstOfMonth) -\n                this.dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n        this.createWeekCells();\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.mcCalendarBody.focusActiveCell();\n    }\n\n    /** Creates McCalendarCells for the dates in this month. */\n    private createWeekCells() {\n        const daysInMonth = this.dateAdapter.getNumDaysInMonth(this.activeDate);\n        const dateNames = this.dateAdapter.getDateNames();\n\n        this.weeks = [[]];\n\n        for (let i = 0, cell = this.firstWeekOffset; i < daysInMonth; i++, cell++) {\n            if (cell === DAYS_PER_WEEK) {\n                this.weeks.push([]);\n                cell = 0;\n            }\n            const date = this.dateAdapter.createDate(\n                this.dateAdapter.getYear(this.activeDate),\n                this.dateAdapter.getMonth(this.activeDate), i + 1);\n            const enabled = this.shouldEnableDate(date);\n            const ariaLabel = this.dateAdapter.format(date, this.dateFormats.display.dateA11yLabel);\n            const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n            this.weeks[this.weeks.length - 1]\n                .push(new McCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n        }\n    }\n\n    /** Date filter for the month */\n    private shouldEnableDate(date: D): boolean {\n        return !!date &&\n            (!this.dateFilter || this.dateFilter(date)) &&\n            (!this.minDate || this.dateAdapter.compareDate(date, this.minDate) >= 0) &&\n            (!this.maxDate || this.dateAdapter.compareDate(date, this.maxDate) <= 0);\n    }\n\n    /**\n     * Gets the date in this month that the given Date falls on.\n     * Returns null if the given Date is in another month.\n     */\n    private getDateInCurrentMonth(date: D | null): number | null {\n        return date && this.hasSameMonthAndYear(date, this.activeDate) ?\n            this.dateAdapter.getDate(date) : null;\n    }\n\n    /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n    private hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n        return !!(d1 && d2 && this.dateAdapter.getMonth(d1) === this.dateAdapter.getMonth(d2) &&\n            this.dateAdapter.getYear(d1) === this.dateAdapter.getYear(d2));\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Determines whether the user has the RTL layout direction. */\n    private isRtl() {\n        return this.dir && this.dir.value === 'rtl';\n    }\n}\n","// tslint:disable:no-magic-numbers\nimport { Directionality } from '@angular/cdk/bidi';\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { DateAdapter } from '@ptsecurity/cdk/datetime';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    PAGE_DOWN,\n    PAGE_UP,\n    RIGHT_ARROW,\n    UP_ARROW,\n    SPACE\n} from '@ptsecurity/cdk/keycodes';\n\nimport { McCalendarBody, McCalendarCell } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-multi-year-view',\n    exportAs: 'mcMultiYearView',\n    templateUrl: 'multi-year-view.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McMultiYearView<D> implements AfterContentInit {\n    /** The date to display in this multi-year view (everything other than the year is ignored). */\n    @Input()\n    get activeDate(): D {\n        return this._activeDate;\n    }\n\n    set activeDate(value: D) {\n        const oldActiveDate = this._activeDate;\n        const validDate =\n            this.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();\n        this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n        if (Math.floor(this.dateAdapter.getYear(oldActiveDate) / yearsPerPage) !==\n            Math.floor(this.dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n            this.init();\n        }\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.selectedYear = this._selected && this.dateAdapter.getYear(this._selected);\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** A function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Emits when a new year is selected. */\n    @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits the selected year. This doesn't imply a change on the selected date */\n    @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits when any date is activated. */\n    @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** The body of calendar table */\n    @ViewChild(McCalendarBody, {static: false}) mcCalendarBody: McCalendarBody;\n\n    /** Grid of calendar cells representing the currently displayed years. */\n    years: McCalendarCell[][];\n\n    /** The year that today falls on. */\n    todayYear: number;\n\n    /** The year of the selected date. Null if the selected date is null. */\n    selectedYear: number | null;\n    private _activeDate: D;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() private dir?: Directionality\n    ) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        this._activeDate = this.dateAdapter.today();\n    }\n\n    ngAfterContentInit() {\n        this.init();\n    }\n\n    /** Initializes this multi-year view. */\n    init() {\n        this.todayYear = this.dateAdapter.getYear(this.dateAdapter.today());\n        const activeYear = this.dateAdapter.getYear(this._activeDate);\n        const activeOffset = activeYear % yearsPerPage;\n        this.years = [];\n        for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n            row.push(activeYear - activeOffset + i);\n            if (row.length === yearsPerRow) {\n                this.years.push(row.map((year) => this.createCellForYear(year)));\n                row = [];\n            }\n        }\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Handles when a new year is selected. */\n    onYearSelected(year: number) {\n        this.yearSelected.emit(this.dateAdapter.createDate(year, 0, 1));\n        const month = this.dateAdapter.getMonth(this.activeDate);\n        const daysInMonth =\n            this.dateAdapter.getNumDaysInMonth(this.dateAdapter.createDate(year, month, 1));\n        this.selectedChange.emit(this.dateAdapter.createDate(year, month,\n            Math.min(this.dateAdapter.getDate(this.activeDate), daysInMonth)));\n    }\n\n    /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n    handleCalendarBodyKeydown(event: KeyboardEvent): void {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n        const oldActiveDate = this._activeDate;\n        const isRtl = this.isRtl();\n\n        // tslint:disable-next-line:deprecation\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n                break;\n            case HOME:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate,\n                    -this.dateAdapter.getYear(this._activeDate) % yearsPerPage);\n                break;\n            case END:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate,\n                    yearsPerPage - this.dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n                break;\n            case PAGE_UP:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(\n                        this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n                break;\n            case PAGE_DOWN:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(\n                        this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n                break;\n            case ENTER:\n            case SPACE:\n                this.onYearSelected(this.dateAdapter.getYear(this._activeDate));\n                break;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n\n        if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n\n        this.focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n\n    getActiveCell(): number {\n        return this.dateAdapter.getYear(this.activeDate) % yearsPerPage;\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.mcCalendarBody.focusActiveCell();\n    }\n\n    /** Creates an McCalendarCell for the given year. */\n    private createCellForYear(year: number) {\n        const yearName = this.dateAdapter.getYearName(this.dateAdapter.createDate(year, 0, 1));\n\n        return new McCalendarCell(year, yearName, yearName, this.shouldEnableYear(year));\n    }\n\n    /** Whether the given year is enabled. */\n    private shouldEnableYear(year: number) {\n        // disable if the year is greater than maxDate lower than minDate\n        if (year === undefined || year === null ||\n            (this.maxDate && year > this.dateAdapter.getYear(this.maxDate)) ||\n            (this.minDate && year < this.dateAdapter.getYear(this.minDate))) {\n            return false;\n        }\n\n        // enable if it reaches here and there's no filter defined\n        if (!this.dateFilter) {\n            return true;\n        }\n\n        const firstOfYear = this.dateAdapter.createDate(year, 0, 1);\n\n        // If any date in the year is enabled count the year as enabled.\n        for (let date = firstOfYear; this.dateAdapter.getYear(date) === year;\n             date = this.dateAdapter.addCalendarDays(date, 1)) {\n            if (this.dateFilter(date)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Determines whether the user has the RTL layout direction. */\n    private isRtl() {\n        return this.dir && this.dir.value === 'rtl';\n    }\n}\n","import { Directionality } from '@angular/cdk/bidi';\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Inject,\n    Input,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    PAGE_DOWN,\n    PAGE_UP,\n    RIGHT_ARROW,\n    UP_ARROW,\n    SPACE\n} from '@ptsecurity/cdk/keycodes';\n\nimport { McCalendarBody, McCalendarCell } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-year-view',\n    exportAs: 'mcYearView',\n    templateUrl: 'year-view.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McYearView<D> implements AfterContentInit {\n    /** The date to display in this year view (everything other than the year is ignored). */\n    @Input()\n    get activeDate(): D {\n        return this._activeDate;\n    }\n\n    set activeDate(value: D) {\n        const oldActiveDate = this._activeDate;\n        const validDate =\n            this.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();\n        this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n        if (this.dateAdapter.getYear(oldActiveDate) !== this.dateAdapter.getYear(this._activeDate)) {\n            this.init();\n        }\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.selectedMonth = this.getMonthInCurrentYear(this._selected);\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** A function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Emits when a new month is selected. */\n    @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits the selected month. This doesn't imply a change on the selected date */\n    @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits when any date is activated. */\n    @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** The body of calendar table */\n    @ViewChild(McCalendarBody, {static: false}) mcCalendarBody: McCalendarBody;\n\n    /** Grid of calendar cells representing the months of the year. */\n    months: McCalendarCell[][];\n\n    /** The label for this year (e.g. \"2017\"). */\n    yearLabel: string;\n\n    /** The month in this year that today falls on. Null if today is in a different year. */\n    todayMonth: number | null;\n\n    /**\n     * The month in this year that the selected Date falls on.\n     * Null if the selected Date is in a different year.\n     */\n    selectedMonth: number | null;\n    private _activeDate: D;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() private dir?: Directionality\n    ) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        this._activeDate = this.dateAdapter.today();\n    }\n\n    ngAfterContentInit() {\n        this.init();\n    }\n\n    /** Handles when a new month is selected. */\n    onMonthSelected(month: number) {\n        const normalizedDate =\n            this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate), month, 1);\n\n        this.monthSelected.emit(normalizedDate);\n\n        const daysInMonth = this.dateAdapter.getNumDaysInMonth(normalizedDate);\n\n        this.selectedChange.emit(this.dateAdapter.createDate(\n            this.dateAdapter.getYear(this.activeDate), month,\n            Math.min(this.dateAdapter.getDate(this.activeDate), daysInMonth)));\n    }\n\n    /** Handles keydown events on the calendar body when calendar is in year view. */\n    handleCalendarBodyKeydown(event: KeyboardEvent): void {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n        const oldActiveDate = this._activeDate;\n        const isRtl = this.isRtl();\n\n        const VERTICAL_SHIFT = 4;\n        const PAGE_SHIFT = 10;\n        const MAX_MONTH_INDEX = 11;\n\n        // tslint:disable-next-line:deprecation\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, -VERTICAL_SHIFT);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, VERTICAL_SHIFT);\n                break;\n            case HOME:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate,\n                    -this.dateAdapter.getMonth(this._activeDate));\n                break;\n            case END:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate,\n                    MAX_MONTH_INDEX - this.dateAdapter.getMonth(this._activeDate));\n                break;\n            case PAGE_UP:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -PAGE_SHIFT : -1);\n                break;\n            case PAGE_DOWN:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(this._activeDate, event.altKey ? PAGE_SHIFT : 1);\n                break;\n            case ENTER:\n            case SPACE:\n                this.onMonthSelected(this.dateAdapter.getMonth(this._activeDate));\n                break;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n\n        if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n\n        this.focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n\n    /** Initializes this year view. */\n    init() {\n        this.selectedMonth = this.getMonthInCurrentYear(this.selected);\n        this.todayMonth = this.getMonthInCurrentYear(this.dateAdapter.today());\n        this.yearLabel = this.dateAdapter.getYearName(this.activeDate);\n\n        const monthNames = this.dateAdapter.getMonthNames('short');\n\n        // First row of months only contains 5 elements so we can fit the year label on the same row.\n        // tslint:disable-next-line:no-magic-numbers\n        this.months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map((row) => row.map(\n            (month) => this.createCellForMonth(month, monthNames[month])));\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.mcCalendarBody.focusActiveCell();\n    }\n\n    /**\n     * Gets the month in this year that the given Date falls on.\n     * Returns null if the given Date is in another year.\n     */\n    private getMonthInCurrentYear(date: D | null) {\n        return date && this.dateAdapter.getYear(date) === this.dateAdapter.getYear(this.activeDate) ?\n            this.dateAdapter.getMonth(date) : null;\n    }\n\n    /** Creates an McCalendarCell for the given month. */\n    private createCellForMonth(month: number, monthName: string) {\n        const ariaLabel = this.dateAdapter.format(\n            this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate), month, 1),\n            this.dateFormats.display.monthYearA11yLabel);\n\n        const newMonthName = monthName[0].toLocaleUpperCase() + monthName.substr(1);\n\n        return new McCalendarCell(\n            month, newMonthName, ariaLabel, this.shouldEnableMonth(month));\n    }\n\n    /** Whether the given month is enabled. */\n    private shouldEnableMonth(month: number) {\n\n        const activeYear = this.dateAdapter.getYear(this.activeDate);\n\n        if (month === undefined || month === null ||\n            this.isYearAndMonthAfterMaxDate(activeYear, month) ||\n            this.isYearAndMonthBeforeMinDate(activeYear, month)) {\n            return false;\n        }\n\n        if (!this.dateFilter) {\n            return true;\n        }\n\n        const firstOfMonth = this.dateAdapter.createDate(activeYear, month, 1);\n\n        // If any date in the month is enabled count the month as enabled.\n        for (let date = firstOfMonth; this.dateAdapter.getMonth(date) === month;\n             date = this.dateAdapter.addCalendarDays(date, 1)) {\n            if (this.dateFilter(date)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Tests whether the combination month/year is after this.maxDate, considering\n     * just the month and year of this.maxDate\n     */\n    private isYearAndMonthAfterMaxDate(year: number, month: number) {\n        if (this.maxDate) {\n            const maxYear = this.dateAdapter.getYear(this.maxDate);\n            const maxMonth = this.dateAdapter.getMonth(this.maxDate);\n\n            return year > maxYear || (year === maxYear && month > maxMonth);\n        }\n\n        return false;\n    }\n\n    /**\n     * Tests whether the combination month/year is before this.minDate, considering\n     * just the month and year of this.minDate\n     */\n    private isYearAndMonthBeforeMinDate(year: number, month: number) {\n        if (this.minDate) {\n            const minYear = this.dateAdapter.getYear(this.minDate);\n            const minMonth = this.dateAdapter.getMonth(this.minDate);\n\n            return year < minYear || (year === minYear && month < minMonth);\n        }\n\n        return false;\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Determines whether the user has the RTL layout direction. */\n    private isRtl() {\n        return this.dir && this.dir.value === 'rtl';\n    }\n}\n","import { ComponentPortal, ComponentType, Portal } from '@angular/cdk/portal';\nimport {\n    AfterContentInit,\n    AfterViewChecked,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Optional,\n    Output,\n    SimpleChanges,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport { Subject, Subscription } from 'rxjs';\n\nimport { McCalendarCellCssClasses } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\nimport { McDatepickerIntl } from './datepicker-intl';\nimport { McMonthView } from './month-view';\nimport { McMultiYearView, yearsPerPage } from './multi-year-view';\nimport { McYearView } from './year-view';\n\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type McCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for McCalendar */\n@Component({\n    selector: 'mc-calendar-header',\n    templateUrl: 'calendar-header.html',\n    exportAs: 'mcCalendarHeader',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCalendarHeader<D> {\n    constructor(private intl: McDatepickerIntl,\n                @Inject(forwardRef(() => McCalendar)) public calendar: McCalendar<D>,\n                @Optional() private dateAdapter: DateAdapter<D>,\n                @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n                changeDetectorRef: ChangeDetectorRef) {\n\n        this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n    }\n\n    /** The label for the current calendar view. */\n    get periodButtonText(): string {\n        if (this.calendar.currentView === 'month') {\n            const label = this.dateAdapter\n                .format(this.calendar.activeDate, this.dateFormats.display.monthYearLabel);\n\n            return label[0].toLocaleUpperCase() + label.substr(1);\n        }\n\n        if (this.calendar.currentView === 'year') {\n            return this.dateAdapter.getYearName(this.calendar.activeDate);\n        }\n\n        const activeYear = this.dateAdapter.getYear(this.calendar.activeDate);\n        const firstYearInView = this.dateAdapter.getYearName(\n            // tslint:disable-next-line:no-magic-numbers\n            this.dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n        const lastYearInView = this.dateAdapter.getYearName(\n            // tslint:disable-next-line:no-magic-numbers\n            this.dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n\n        return `${firstYearInView} \\u2013 ${lastYearInView}`;\n    }\n\n    get periodButtonLabel(): string {\n        return this.calendar.currentView === 'month' ?\n            this.intl.switchToMultiYearViewLabel : this.intl.switchToMonthViewLabel;\n    }\n\n    /** The label for the previous button. */\n    get prevButtonLabel(): string {\n        return {\n            month: this.intl.prevMonthLabel,\n            year: this.intl.prevYearLabel,\n            'multi-year': this.intl.prevMultiYearLabel\n        }[this.calendar.currentView];\n    }\n\n    /** The label for the next button. */\n    get nextButtonLabel(): string {\n        return {\n            month: this.intl.nextMonthLabel,\n            year: this.intl.nextYearLabel,\n            'multi-year': this.intl.nextMultiYearLabel\n        }[this.calendar.currentView];\n    }\n\n    /** Handles user clicks on the period label. */\n    currentPeriodClicked(): void {\n        this.calendar.currentView = this.calendar.currentView === 'month' ? 'multi-year' : 'month';\n    }\n\n    /** Handles user clicks on the previous button. */\n    previousClicked(): void {\n        this.calendar.activeDate = this.calendar.currentView === 'month' ?\n            this.dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this.dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView === 'year' ? -1 : -yearsPerPage\n            );\n    }\n\n    /** Handles user clicks on the next button. */\n    nextClicked(): void {\n        this.calendar.activeDate = this.calendar.currentView === 'month' ?\n            this.dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this.dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                this.calendar.currentView === 'year' ? 1 : yearsPerPage\n            );\n    }\n\n    /** Whether the previous period button is enabled. */\n    previousEnabled(): boolean {\n        if (!this.calendar.minDate) {\n            return true;\n        }\n\n        return !this.calendar.minDate ||\n            !this.isSameView(this.calendar.activeDate, this.calendar.minDate);\n    }\n\n    /** Whether the next period button is enabled. */\n    nextEnabled(): boolean {\n        return !this.calendar.maxDate ||\n            !this.isSameView(this.calendar.activeDate, this.calendar.maxDate);\n    }\n\n    /** Whether the two dates represent the same view in the current view mode (month or year). */\n    private isSameView(date1: D, date2: D): boolean {\n        if (this.calendar.currentView === 'month') {\n            return this.dateAdapter.getYear(date1) === this.dateAdapter.getYear(date2) &&\n                this.dateAdapter.getMonth(date1) === this.dateAdapter.getMonth(date2);\n        }\n        if (this.calendar.currentView === 'year') {\n            return this.dateAdapter.getYear(date1) === this.dateAdapter.getYear(date2);\n        }\n\n        // Otherwise we are in 'multi-year' view.\n        return Math.floor(this.dateAdapter.getYear(date1) / yearsPerPage) ===\n            Math.floor(this.dateAdapter.getYear(date2) / yearsPerPage);\n    }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-calendar',\n    exportAs: 'mcCalendar',\n    templateUrl: 'calendar.html',\n    styleUrls: ['calendar.scss'],\n    host: {\n        class: 'mc-calendar'\n    },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n\n    /** A date representing the period (month or year) to start the calendar in. */\n    @Input()\n    get startAt(): D | null {\n        return this._startAt;\n    }\n\n    set startAt(value: D | null) {\n        this._startAt = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /**\n     * The current active date. This determines which time period is shown and which date is\n     * highlighted when using keyboard navigation.\n     */\n    get activeDate(): D {\n        return this.clampedActiveDate;\n    }\n\n    set activeDate(value: D) {\n        this.clampedActiveDate = this.dateAdapter.clampDate(value, this.minDate, this.maxDate);\n        this.stateChanges.next();\n    }\n\n    /** Whether the calendar is in month view. */\n    get currentView(): McCalendarView {\n        return this._currentView;\n    }\n\n    set currentView(value: McCalendarView) {\n        this._currentView = value;\n        this.moveFocusOnNextTick = true;\n    }\n\n    /** An input indicating the type of the header component, if set. */\n    @Input() headerComponent: ComponentType<any>;\n\n    /** A portal containing the header component type for this calendar. */\n    calendarHeaderPortal: Portal<any>;\n\n    /** Whether the calendar should be started in month or year view. */\n    @Input() startView: McCalendarView = 'month';\n\n    /** Function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Function that can be used to add custom CSS classes to dates. */\n    @Input() dateClass: (date: D) => McCalendarCellCssClasses;\n\n    /** Emits when the currently selected date changes. */\n    @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /**\n     * Emits the year chosen in multiyear view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /**\n     * Emits the month chosen in year view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits when any date is selected. */\n    @Output() readonly userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Reference to the current month view component. */\n    @ViewChild(McMonthView, {static: false}) monthView: McMonthView<D>;\n\n    /** Reference to the current year view component. */\n    @ViewChild(McYearView, {static: false}) yearView: McYearView<D>;\n\n    /** Reference to the current multi-year view component. */\n    @ViewChild(McMultiYearView, {static: false}) multiYearView: McMultiYearView<D>;\n\n    /**\n     * Emits whenever there is a state change that the header may need to respond to.\n     */\n    stateChanges = new Subject<void>();\n\n    private intlChanges: Subscription;\n\n    /**\n     * Used for scheduling that focus should be moved to the active cell on the next tick.\n     * We need to schedule it, rather than do it immediately, because we have to wait\n     * for Angular to re-evaluate the view children.\n     */\n    private moveFocusOnNextTick = false;\n    private _startAt: D | null;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n    private clampedActiveDate: D;\n    private _currentView: McCalendarView;\n\n    constructor(\n        intl: McDatepickerIntl,\n        @Optional() private dateAdapter: DateAdapter<D>,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        this.intlChanges = intl.changes.subscribe(() => {\n            changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        });\n    }\n\n    ngAfterContentInit() {\n        this.calendarHeaderPortal = new ComponentPortal(this.headerComponent || McCalendarHeader);\n        this.activeDate = this.startAt || this.dateAdapter.today();\n\n        // Assign to the private property since we don't want to move focus on init.\n        this._currentView = this.startView;\n    }\n\n    ngAfterViewChecked() {\n        if (this.moveFocusOnNextTick) {\n            this.moveFocusOnNextTick = false;\n            this.focusActiveCell();\n        }\n    }\n\n    ngOnDestroy() {\n        this.intlChanges.unsubscribe();\n        this.stateChanges.complete();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n        if (change && !change.firstChange) {\n            const view = this.getCurrentViewComponent();\n\n            if (view) {\n                // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n                // passed down to the view via data bindings which won't be up-to-date when we call `init`.\n                this.changeDetectorRef.detectChanges();\n                view.init();\n            }\n        }\n\n        this.stateChanges.next();\n    }\n\n    focusActiveCell() {\n        this.getCurrentViewComponent().focusActiveCell();\n    }\n\n    /** Updates today's date after an update of the active date */\n    updateTodaysDate() {\n        const view = this.currentView === 'month' ? this.monthView :\n            (this.currentView === 'year' ? this.yearView : this.multiYearView);\n\n        view.ngAfterContentInit();\n    }\n\n    /** Handles date selection in the month view. */\n    dateSelected(date: D): void {\n        if (!this.dateAdapter.sameDate(date, this.selected)) {\n            this.selectedChange.emit(date);\n        }\n    }\n\n    /** Handles year selection in the multiyear view. */\n    yearSelectedInMultiYearView(normalizedYear: D) {\n        this.yearSelected.emit(normalizedYear);\n    }\n\n    /** Handles month selection in the year view. */\n    monthSelectedInYearView(normalizedMonth: D) {\n        this.monthSelected.emit(normalizedMonth);\n    }\n\n    userSelected(): void {\n        this.userSelection.emit();\n    }\n\n    /** Handles year/month selection in the multi-year/year views. */\n    goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n        this.activeDate = date;\n        this.currentView = view;\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Returns the component instance that corresponds to the current calendar view. */\n    private getCurrentViewComponent() {\n        return this.monthView || this.yearView || this.multiYearView;\n    }\n}\n","import {\n    animate,\n    state,\n    style,\n    transition,\n    trigger,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n\n/**\n * Animations used by the mosaic datepicker.\n * @docs-private\n */\nexport const mcDatepickerAnimations: {\n    readonly transformPanel: AnimationTriggerMetadata;\n    readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n    /** Transforms the height of the datepicker's calendar. */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(1, 0.8)'\n        })),\n        transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1, 1)'\n        }))),\n        transition('* => void', animate('100ms linear', style({ opacity: 0 })))\n    ]),\n\n    /** Fades in the content of the calendar. */\n    fadeInCalendar: trigger('fadeInCalendar', [\n        state('void', style({ opacity: 0 })),\n        state('enter', style({ opacity: 1 })),\n\n        // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n        transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n    ])\n};\n\n// todo should be put into polyfils\n// https://github.com/angular/angular/issues/24769\nif (!Element.prototype.matches) {\n    Element.prototype.matches = (Element.prototype as any).msMatchesSelector;\n}\n","// tslint:disable:no-unbound-method\n// tslint:disable:no-magic-numbers\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    Overlay,\n    OverlayConfig,\n    OverlayRef,\n    PositionStrategy,\n    ScrollStrategy\n} from '@angular/cdk/overlay';\nimport { ComponentPortal, ComponentType } from '@angular/cdk/portal';\nimport { DOCUMENT } from '@angular/common';\nimport {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    Component,\n    ComponentRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { DateAdapter } from '@ptsecurity/cdk/datetime';\nimport { ESCAPE, UP_ARROW } from '@ptsecurity/cdk/keycodes';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { merge, Subject, Subscription } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\n\nimport { McCalendar } from './calendar';\nimport { McCalendarCellCssClasses } from './calendar-body';\nimport { mcDatepickerAnimations } from './datepicker-animations';\nimport { createMissingDateImplError } from './datepicker-errors';\nimport { McDatepickerInput } from './datepicker-input';\n\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MC_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mc-datepicker-scroll-strategy');\n\n/** @docs-private */\n// tslint:disable-next-line:naming-convention\nexport function MC_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_DATEPICKER_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_DATEPICKER_SCROLL_STRATEGY_FACTORY\n};\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * McCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n    selector: 'mc-datepicker__content',\n    exportAs: 'mcDatepickerContent',\n    templateUrl: 'datepicker-content.html',\n    styleUrls: ['datepicker-content.scss'],\n    host: {\n        class: 'mc-datepicker__content',\n        '[@transformPanel]': '\"enter\"'\n    },\n    animations: [\n        mcDatepickerAnimations.transformPanel,\n        mcDatepickerAnimations.fadeInCalendar\n    ],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McDatepickerContent<D> implements AfterViewInit {\n    /** Reference to the internal calendar component. */\n    @ViewChild(McCalendar, { static: false }) calendar: McCalendar<D>;\n\n    /** Reference to the datepicker that created the overlay. */\n    datepicker: McDatepicker<D>;\n\n    ngAfterViewInit() {\n        this.calendar.focusActiveCell();\n    }\n}\n\n\n// TODO: We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"mcDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n    selector: 'mc-datepicker',\n    template: '',\n    exportAs: 'mcDatepicker',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    providers: [{ provide: McFormFieldControl, useExisting: McDatepicker }]\n})\nexport class McDatepicker<D> implements OnDestroy {\n    @Input()\n    get hasBackdrop(): boolean {\n        return this._hasBackdrop;\n    }\n\n    set hasBackdrop(value: boolean) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n\n    private _hasBackdrop: boolean = false;\n\n    /** The date to open the calendar to initially. */\n    @Input()\n    get startAt(): D | null {\n        // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n        // selected value is.\n        return this._startAt || (this.datepickerInput ? this.datepickerInput.value : null);\n    }\n\n    set startAt(value: D | null) {\n        this._startAt = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** Whether the datepicker pop-up should be disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled === undefined && this.datepickerInput ? this.datepickerInput.disabled : this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        const newValue = coerceBooleanProperty(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this.disabledChange.next(newValue);\n        }\n    }\n\n    /** Whether the calendar is open. */\n    @Input()\n    get opened(): boolean {\n        return this._opened;\n    }\n\n    set opened(value: boolean) {\n        coerceBooleanProperty(value) ? this.open() : this.close();\n    }\n\n    /** The currently selected date. */\n    get selected(): D | null {\n        return this.validSelected;\n    }\n\n    set selected(value: D | null) {\n        this.validSelected = value;\n    }\n\n    /** The minimum selectable date. */\n    get minDate(): D | null {\n        return this.datepickerInput && this.datepickerInput.min;\n    }\n\n    /** The maximum selectable date. */\n    get maxDate(): D | null {\n        return this.datepickerInput && this.datepickerInput.max;\n    }\n\n    get dateFilter(): (date: D | null) => boolean {\n        return this.datepickerInput && this.datepickerInput.dateFilter;\n    }\n\n    get value(): D | null {\n        return this.selected;\n    }\n\n    /** An input indicating the type of the custom header component for the calendar, if set. */\n    @Input() calendarHeaderComponent: ComponentType<any>;\n\n    /** The view that the calendar should start in. */\n    @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n    /**\n     * Emits selected year in multiyear view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /**\n     * Emits selected month in year view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n    @Input() panelClass: string | string[];\n\n    /** Function that can be used to add custom CSS classes to dates. */\n    @Input() dateClass: (date: D) => McCalendarCellCssClasses;\n\n    @Input() backdropClass: string = 'cdk-overlay-transparent-backdrop';\n\n    /** Emits when the datepicker has been opened. */\n    @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Emits when the datepicker has been closed. */\n    @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n    /** The id for the datepicker calendar. */\n    id: string = `mc-datepicker-${datepickerUid++}`;\n\n    /** A reference to the overlay when the calendar is opened as a popup. */\n    popupRef: OverlayRef;\n\n    /** The input element this datepicker is associated with. */\n    datepickerInput: McDatepickerInput<D>;\n\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /** Emits when the datepicker is disabled. */\n    readonly disabledChange = new Subject<boolean>();\n\n    /** Emits new selected date when selected date changes. */\n    readonly selectedChanged = new Subject<D>();\n    private scrollStrategy: () => ScrollStrategy;\n    private _startAt: D | null;\n    private _disabled: boolean;\n    private _opened = false;\n    private validSelected: D | null = null;\n\n    /** A portal containing the calendar for this datepicker. */\n    private calendarPortal: ComponentPortal<McDatepickerContent<D>>;\n\n    /** Reference to the component instantiated in popup mode. */\n    private popupComponentRef: ComponentRef<McDatepickerContent<D>> | null;\n\n    /** The element that was focused before the datepicker was opened. */\n    private focusedElementBeforeOpen: HTMLElement | null = null;\n\n    /** Subscription to value changes in the associated input element. */\n    private inputSubscription = Subscription.EMPTY;\n\n    private closeSubscription = Subscription.EMPTY;\n\n    constructor(\n        private overlay: Overlay,\n        private ngZone: NgZone,\n        private viewContainerRef: ViewContainerRef,\n        @Inject(MC_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n        @Optional() private dateAdapter: DateAdapter<D>,\n        @Optional() private dir: Directionality,\n        @Optional() @Inject(DOCUMENT) private document: any\n    ) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        this.scrollStrategy = scrollStrategy;\n    }\n\n    ngOnDestroy() {\n        this.close();\n        this.inputSubscription.unsubscribe();\n        this.closeSubscription.unsubscribe();\n        this.disabledChange.complete();\n\n        if (this.popupRef) {\n            this.popupRef.dispose();\n            this.popupComponentRef = null;\n        }\n    }\n\n    /** Selects the given date */\n    select(date: D): void {\n        const oldValue = this.selected;\n        this.selected = date;\n\n        if (!this.dateAdapter.sameDate(oldValue, this.selected)) {\n            this.selectedChanged.next(date);\n        }\n    }\n\n    /** Emits the selected year in multiyear view */\n    selectYear(normalizedYear: D): void {\n        this.yearSelected.emit(normalizedYear);\n    }\n\n    /** Emits selected month in year view */\n    selectMonth(normalizedMonth: D): void {\n        this.monthSelected.emit(normalizedMonth);\n    }\n\n    /**\n     * Register an input with this datepicker.\n     * @param input The datepicker input to register with this datepicker.\n     */\n    registerInput(input: McDatepickerInput<D>): void {\n        if (this.datepickerInput) {\n            throw Error('A McDatepicker can only be associated with a single input.');\n        }\n\n        this.datepickerInput = input;\n        this.inputSubscription = this.datepickerInput.valueChange\n            .subscribe((value: D | null) => this.selected = value);\n    }\n\n    /** Open the calendar. */\n    open(): void {\n        if (this._opened || this.disabled) { return; }\n\n        if (!this.datepickerInput) {\n            throw Error('Attempted to open an McDatepicker with no associated input.');\n        }\n\n        if (this.document) {\n            this.focusedElementBeforeOpen = this.document.activeElement;\n        }\n\n        this.openAsPopup();\n\n        this._opened = true;\n        this.openedStream.emit();\n    }\n\n    /** Close the calendar. */\n    close(): void {\n        if (!this._opened) { return; }\n\n        if (this.popupRef && this.popupRef.hasAttached()) {\n            this.popupRef.detach();\n        }\n\n        if (this.calendarPortal && this.calendarPortal.isAttached) {\n            this.calendarPortal.detach();\n        }\n\n        const completeClose = () => {\n            // The `_opened` could've been reset already if\n            // we got two events in quick succession.\n            if (this._opened) {\n                this._opened = false;\n                this.closedStream.emit();\n                this.focusedElementBeforeOpen = null;\n\n                this.datepickerInput.elementRef.nativeElement.focus();\n            }\n        };\n\n        if (this.focusedElementBeforeOpen &&\n            typeof this.focusedElementBeforeOpen.focus === 'function') {\n            // Because IE moves focus asynchronously, we can't count on it being restored before we've\n            // marked the datepicker as closed. If the event fires out of sequence and the element that\n            // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n            // able to close the calendar at all. We work around it by making the logic, that marks\n            // the datepicker as closed, async as well.\n            this.focusedElementBeforeOpen.focus();\n            setTimeout(completeClose);\n        } else {\n            completeClose();\n        }\n    }\n\n    /** Open the calendar as a popup. */\n    private openAsPopup(): void {\n        if (!this.calendarPortal) {\n            this.calendarPortal = new ComponentPortal<McDatepickerContent<D>>(\n                McDatepickerContent, this.viewContainerRef\n            );\n        }\n\n        if (!this.popupRef) {\n            this.createPopup();\n        }\n\n        if (!this.popupRef.hasAttached()) {\n            this.popupComponentRef = this.popupRef.attach(this.calendarPortal);\n            this.popupComponentRef.instance.datepicker = this;\n\n            // Update the position once the calendar has rendered.\n            this.ngZone.onStable.asObservable()\n                .pipe(take(1))\n                .subscribe(() => this.popupRef.updatePosition());\n        }\n    }\n\n    /** Create the popup. */\n    private createPopup(): void {\n        const overlayConfig = new OverlayConfig({\n            positionStrategy: this.createPopupPositionStrategy(),\n            hasBackdrop: this.hasBackdrop,\n            backdropClass: this.backdropClass,\n            direction: this.dir,\n            scrollStrategy: this.scrollStrategy(),\n            panelClass: 'mc-datepicker__popup'\n        });\n\n        this.popupRef = this.overlay.create(overlayConfig);\n        this.popupRef.overlayElement.setAttribute('role', 'dialog');\n\n        this.closeSubscription = this.closingActions()\n            .subscribe(() => this.close());\n    }\n\n    private closingActions() {\n        return merge(\n            this.popupRef.backdropClick(),\n            this.popupRef.outsidePointerEvents(),\n            this.popupRef.detachments(),\n            this.popupRef.keydownEvents().pipe(filter((event) => {\n                // Closing on alt + up is only valid when there's an input associated with the datepicker.\n                // tslint:disable-next-line:deprecation\n                return event.keyCode === ESCAPE || (this.datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n            }))\n        );\n    }\n\n    /** Create the popup PositionStrategy. */\n    private createPopupPositionStrategy(): PositionStrategy {\n        return this.overlay.position()\n            .flexibleConnectedTo(this.datepickerInput.elementRef)\n            .withTransformOriginOn('.mc-datepicker__content')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(8)\n            .withLockedPosition()\n            .withPositions([\n                {\n                    originX: 'start',\n                    originY: 'bottom',\n                    overlayX: 'start',\n                    overlayY: 'top'\n                },\n                {\n                    originX: 'start',\n                    originY: 'top',\n                    overlayX: 'start',\n                    overlayY: 'bottom'\n                },\n                {\n                    originX: 'end',\n                    originY: 'bottom',\n                    overlayX: 'end',\n                    overlayY: 'top'\n                },\n                {\n                    originX: 'end',\n                    originY: 'top',\n                    overlayX: 'end',\n                    overlayY: 'bottom'\n                }\n            ]);\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n}\n","// tslint:disable:no-empty\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output\n} from '@angular/core';\nimport {\n    AbstractControl,\n    ControlValueAccessor,\n    NG_VALIDATORS,\n    NG_VALUE_ACCESSOR,\n    ValidationErrors,\n    Validator,\n    ValidatorFn,\n    Validators\n} from '@angular/forms';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport { DOWN_ARROW } from '@ptsecurity/cdk/keycodes';\nimport { MC_INPUT_VALUE_ACCESSOR } from '@ptsecurity/mosaic/input';\nimport { Subscription } from 'rxjs';\n\nimport { McDatepicker } from './datepicker';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\n/** @docs-private */\nexport const MC_DATEPICKER_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McDatepickerInput),\n    multi: true\n};\n\n/** @docs-private */\nexport const MC_DATEPICKER_VALIDATORS: any = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McDatepickerInput),\n    multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use McDatepickerInputEvent instead.\n */\nexport class McDatepickerInputEvent<D> {\n    /** The new value for the target datepicker input. */\n    value: D | null;\n\n    constructor(\n        /** Reference to the datepicker input component that emitted the event. */\n        public target: McDatepickerInput<D>,\n        /** Reference to the native input element associated with the datepicker input. */\n        public targetElement: HTMLElement) {\n        this.value = this.target.value;\n    }\n}\n\n\n/** Directive used to connect an input to a McDatepicker. */\n@Directive({\n    selector: 'input[mcDatepicker]',\n    exportAs: 'mcDatepickerInput',\n    providers: [\n        MC_DATEPICKER_VALUE_ACCESSOR,\n        MC_DATEPICKER_VALIDATORS,\n        { provide: MC_INPUT_VALUE_ACCESSOR, useExisting: McDatepickerInput }\n    ],\n    host: {\n        '[attr.aria-haspopup]': 'true',\n        '[attr.aria-owns]': '(datepicker?.opened && datepicker.id) || null',\n        '[attr.min]': 'min ? dateAdapter.toIso8601(min) : null',\n        '[attr.max]': 'max ? dateAdapter.toIso8601(max) : null',\n        '[attr.disabled]': 'disabled || null',\n        '(input)': 'onInput($event.target.value)',\n        '(change)': 'onChange()',\n        '(blur)': 'onBlur()',\n        '(keydown)': 'onKeydown($event)'\n    }\n})\nexport class McDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n    /** The datepicker that this input is associated with. */\n    @Input()\n    set mcDatepicker(value: McDatepicker<D>) {\n        if (!value) { return; }\n\n        this.datepicker = value;\n        this.datepicker.registerInput(this);\n        this.datepickerSubscription.unsubscribe();\n\n        this.datepickerSubscription = this.datepicker.selectedChanged\n            .subscribe((selected: D) => {\n                this.value = selected;\n                this.cvaOnChange(selected);\n                this.onTouched();\n                this.dateChange.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));\n            });\n    }\n\n    /** Function that can be used to filter out dates within the datepicker. */\n    @Input()\n    set mcDatepickerFilter(value: (date: D | null) => boolean) {\n        this.dateFilter = value;\n        this.validatorOnChange();\n    }\n\n    /** The value of the input. */\n    @Input()\n    get value(): D | null {\n        return this._value;\n    }\n\n    set value(value: D | null) {\n        // tslint:disable-next-line:no-parameter-reassignment\n        value = this.dateAdapter.deserialize(value);\n        this.lastValueValid = !value || this.dateAdapter.isValid(value);\n        // tslint:disable-next-line:no-parameter-reassignment\n        value = this.getValidDateOrNull(value);\n        const oldDate = this.value;\n        this._value = value;\n        this.formatValue(value);\n\n        if (!this.dateAdapter.sameDate(oldDate, value)) {\n            this.valueChange.emit(value);\n        }\n    }\n\n    /** The minimum valid date. */\n    @Input()\n    get min(): D | null {\n        return this._min;\n    }\n\n    set min(value: D | null) {\n        this._min = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.validatorOnChange();\n    }\n\n    /** The maximum valid date. */\n    @Input()\n    get max(): D | null {\n        return this._max;\n    }\n\n    set max(value: D | null) {\n        this._max = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.validatorOnChange();\n    }\n\n    /** Whether the datepicker-input is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return !!this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        const newValue = coerceBooleanProperty(value);\n        const element = this.elementRef.nativeElement;\n\n        if (this._disabled !== newValue) {\n            this._disabled = newValue;\n            this.disabledChange.emit(newValue);\n        }\n\n        // We need to null check the `blur` method, because it's undefined during SSR.\n        if (newValue && element.blur) {\n            // Normally, native input elements automatically blur if they turn disabled. This behavior\n            // is problematic, because it would mean that it triggers another change detection cycle,\n            // which then causes a changed after checked error if the input element was focused before.\n            element.blur();\n        }\n    }\n\n    datepicker: McDatepicker<D>;\n    dateFilter: (date: D | null) => boolean;\n\n    /** Emits when a `change` event is fired on this `<input>`. */\n    @Output() readonly dateChange: EventEmitter<McDatepickerInputEvent<D>> =\n        new EventEmitter<McDatepickerInputEvent<D>>();\n\n    /** Emits when an `input` event is fired on this `<input>`. */\n    @Output() readonly dateInput: EventEmitter<McDatepickerInputEvent<D>> =\n        new EventEmitter<McDatepickerInputEvent<D>>();\n\n    /** Emits when the value changes (either due to user input or programmatic change). */\n    valueChange = new EventEmitter<D | null>();\n\n    /** Emits when the disabled state has changed */\n    disabledChange = new EventEmitter<boolean>();\n    private _value: D | null;\n    private _min: D | null;\n    private _max: D | null;\n    private _disabled: boolean;\n\n    private datepickerSubscription = Subscription.EMPTY;\n\n    private localeSubscription = Subscription.EMPTY;\n\n    /** Whether the last value set on the input was valid. */\n    private lastValueValid = false;\n\n    /** The combined form control validator for this input. */\n    private validator: ValidatorFn | null;\n\n    constructor(\n        public elementRef: ElementRef<HTMLInputElement>,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats\n    ) {\n        this.validator = Validators.compose([\n            this.parseValidator,\n            this.minValidator,\n            this.maxValidator,\n            this.filterValidator\n        ]);\n\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        // Update the displayed date when the locale changes.\n        this.localeSubscription = dateAdapter.localeChanges\n            .subscribe(() => this.value = this.value);\n    }\n\n    onTouched = () => {\n    }\n\n    ngOnDestroy() {\n        this.datepickerSubscription.unsubscribe();\n        this.localeSubscription.unsubscribe();\n        this.valueChange.complete();\n        this.disabledChange.complete();\n    }\n\n    /** @docs-private */\n    registerOnValidatorChange(fn: () => void): void {\n        this.validatorOnChange = fn;\n    }\n\n    /** @docs-private */\n    validate(c: AbstractControl): ValidationErrors | null {\n        return this.validator ? this.validator(c) : null;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: D): void {\n        this.value = value;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this.cvaOnChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    onKeydown(event: KeyboardEvent) {\n        // tslint:disable-next-line:deprecation\n        const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n        if (this.datepicker && isAltDownArrow && !this.elementRef.nativeElement.readOnly) {\n            this.datepicker.open();\n            event.preventDefault();\n        }\n    }\n\n    onInput(value: string) {\n        let date = this.dateAdapter.parse(value, this.dateFormats.parse.dateInput);\n        this.lastValueValid = !date || this.dateAdapter.isValid(date);\n        date = this.getValidDateOrNull(date);\n\n        if (!this.dateAdapter.sameDate(date, this._value)) {\n            this._value = date;\n            this.cvaOnChange(date);\n            this.valueChange.emit(date);\n            this.dateInput.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));\n        }\n    }\n\n    onChange() {\n        this.dateChange.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));\n    }\n\n    /** Handles blur events on the input. */\n    onBlur() {\n        // Reformat the input only if we have a valid value.\n        if (this.value) {\n            this.formatValue(this.value);\n        }\n\n        this.onTouched();\n    }\n\n    private cvaOnChange: (value: any) => void = () => {\n    }\n\n    private validatorOnChange = () => {\n    }\n\n    /** The form control validator for whether the input parses. */\n    private parseValidator: ValidatorFn = (): ValidationErrors | null => {\n        return this.lastValueValid ?\n            null : { mcDatepickerParse: { text: this.elementRef.nativeElement.value } };\n    }\n\n    /** The form control validator for the min date. */\n    private minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n        const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));\n\n        return (!this.min || !controlValue ||\n            this.dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n            null : { mcDatepickerMin: { min: this.min, actual: controlValue } };\n    }\n\n    /** The form control validator for the max date. */\n    private maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n        const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));\n\n        return (!this.max || !controlValue ||\n            this.dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n            null : { mcDatepickerMax: { max: this.max, actual: controlValue } };\n    }\n\n    /** The form control validator for the date filter. */\n    private filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n        const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));\n\n        return !this.dateFilter || !controlValue || this.dateFilter(controlValue) ?\n            null : { mcDatepickerFilter: true };\n    }\n\n    /** Formats a value and sets it on the input element. */\n    private formatValue(value: D | null) {\n        this.elementRef.nativeElement.value =\n            value ? this.dateAdapter.format(value, this.dateFormats.display.dateInput) : '';\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n}\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    Directive,\n    Input,\n    OnChanges,\n    OnDestroy,\n    SimpleChanges,\n    ViewEncapsulation,\n    ViewChild\n} from '@angular/core';\nimport { McButton } from '@ptsecurity/mosaic/button';\nimport { merge, of as observableOf, Subscription } from 'rxjs';\n\nimport { McDatepicker } from './datepicker';\nimport { McDatepickerIntl } from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `mcDatepickerToggle`. */\n@Directive({\n    selector: '[mcDatepickerToggleIcon]'\n})\nexport class McDatepickerToggleIcon {}\n\n\n@Component({\n    selector: 'mc-datepicker-toggle',\n    templateUrl: 'datepicker-toggle.html',\n    styleUrls: ['datepicker-toggle.scss'],\n    host: {\n        class: 'mc-datepicker-toggle',\n        '[class.mc-active]': 'datepicker && datepicker.opened'\n    },\n    exportAs: 'mcDatepickerToggle',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n\n    /** Whether the toggle button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    /** Datepicker instance that the button will toggle. */\n    @Input('for') datepicker: McDatepicker<D>;\n\n    /** Tabindex for the toggle. */\n    @Input() tabIndex: number | null;\n\n    /** Custom icon set by the consumer. */\n    @ContentChild(McDatepickerToggleIcon, {static: false}) customIcon: McDatepickerToggleIcon;\n\n    /** Underlying button element. */\n    @ViewChild('button', {static: false}) button: McButton;\n    private stateChanges = Subscription.EMPTY;\n\n    private _disabled: boolean;\n\n    constructor(public intl: McDatepickerIntl, private changeDetectorRef: ChangeDetectorRef) {}\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.datepicker) {\n            this.watchStateChanges();\n        }\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.unsubscribe();\n    }\n\n    ngAfterContentInit() {\n        this.watchStateChanges();\n    }\n\n    open(event: Event): void {\n        if (this.datepicker && !this.disabled) {\n            this.datepicker.open();\n            event.stopPropagation();\n        }\n    }\n\n    private watchStateChanges() {\n        const datepickerDisabled = this.datepicker ? this.datepicker.disabledChange : observableOf();\n        const inputDisabled = this.datepicker && this.datepicker.datepickerInput ?\n            this.datepicker.datepickerInput.disabledChange : observableOf();\n        const datepickerToggled = this.datepicker ?\n            merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n            observableOf();\n\n        this.stateChanges.unsubscribe();\n        this.stateChanges = merge(\n            this.intl.changes,\n            datepickerDisabled,\n            inputDisabled,\n            datepickerToggled\n        ).subscribe(() => this.changeDetectorRef.markForCheck());\n    }\n}\n","import { A11yModule } from '@angular/cdk/a11y';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { McButtonModule } from '@ptsecurity/mosaic/button';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McCalendar, McCalendarHeader } from './calendar';\nimport { McCalendarBody } from './calendar-body';\nimport {\n    McDatepicker,\n    McDatepickerContent,\n    MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './datepicker';\nimport { McDatepickerInput } from './datepicker-input';\nimport { McDatepickerIntl } from './datepicker-intl';\nimport { McDatepickerToggle, McDatepickerToggleIcon } from './datepicker-toggle';\nimport { McMonthView } from './month-view';\nimport { McMultiYearView } from './multi-year-view';\nimport { McYearView } from './year-view';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        McButtonModule,\n        OverlayModule,\n        A11yModule,\n        PortalModule,\n        McIconModule\n    ],\n    exports: [\n        McCalendar,\n        McCalendarBody,\n        McDatepicker,\n        McDatepickerContent,\n        McDatepickerInput,\n        McDatepickerToggle,\n        McDatepickerToggleIcon,\n        McMonthView,\n        McYearView,\n        McMultiYearView,\n        McCalendarHeader,\n        McButtonModule\n    ],\n    declarations: [\n        McCalendar,\n        McCalendarBody,\n        McDatepicker,\n        McDatepickerContent,\n        McDatepickerInput,\n        McDatepickerToggle,\n        McDatepickerToggleIcon,\n        McMonthView,\n        McYearView,\n        McMultiYearView,\n        McCalendarHeader\n    ],\n    providers: [\n        McDatepickerIntl,\n        MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER\n    ],\n    entryComponents: [\n        McDatepickerContent,\n        McCalendarHeader\n    ]\n})\nexport class McDatepickerModule {\n}\n"]}