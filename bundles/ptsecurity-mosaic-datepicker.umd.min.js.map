{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@ptsecurity/mosaic/datepicker/datepicker-errors.ts","ng://@ptsecurity/mosaic/datepicker/datepicker-intl.ts","ng://@ptsecurity/mosaic/datepicker/calendar-body.ts","ng://@ptsecurity/mosaic/datepicker/month-view.ts","ng://@ptsecurity/mosaic/datepicker/multi-year-view.ts","ng://@ptsecurity/mosaic/datepicker/year-view.ts","ng://@ptsecurity/mosaic/datepicker/calendar.ts","ng://@ptsecurity/mosaic/datepicker/datepicker-animations.ts","ng://@ptsecurity/mosaic/datepicker/datepicker.ts","ng://@ptsecurity/mosaic/datepicker/datepicker-input.ts","ng://@ptsecurity/mosaic/datepicker/datepicker-toggle.ts","ng://@ptsecurity/mosaic/datepicker/datepicker-module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","createMissingDateImplError","provider","Error","McDatepickerIntl","this","changes","Subject","calendarLabel","openCalendarLabel","prevMonthLabel","nextMonthLabel","prevYearLabel","nextYearLabel","prevMultiYearLabel","nextMultiYearLabel","switchToMonthViewLabel","switchToMultiYearViewLabel","Injectable","args","providedIn","value","displayValue","ariaLabel","enabled","cssClasses","McCalendarBody","elementRef","ngZone","numCols","activeCell","cellAspectRatio","selectedValueChange","EventEmitter","prototype","cellClicked","cell","emit","ngOnChanges","columnChanges","rows","firstRowOffset","length","cellPadding","cellWidth","isActiveCell","rowIndex","colIndex","cellNumber","focusActiveCell","_this","runOutsideAngular","onStable","asObservable","pipe","take","subscribe","nativeElement","querySelector","focus","Component","selector","template","host","class","role","aria-readonly","exportAs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","ElementRef","NgZone","Input","Output","McMonthView","changeDetectorRef","dateFormats","dateAdapter","dir","selectedChange","userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","weekdays","map","long","i","narrow","slice","concat","_activeDate","today","defineProperty","oldActiveDate","validDate","getValidDateOrNull","deserialize","clampDate","minDate","maxDate","hasSameMonthAndYear","init","_selected","selectedDate","getDateInCurrentMonth","_minDate","_maxDate","ngAfterContentInit","dateSelected","date","selectedYear","getYear","activeDate","selectedMonth","getMonth","createDate","handleCalendarBodyKeydown","event","isRtl","keyCode","LEFT_ARROW","addCalendarDays","RIGHT_ARROW","UP_ARROW","DOWN_ARROW","HOME","getDate","END","getNumDaysInMonth","PAGE_UP","altKey","addCalendarYears","addCalendarMonths","PAGE_DOWN","ENTER","SPACE","dateFilter","preventDefault","compareDate","selected","todayDate","monthLabel","getMonthNames","toLocaleUpperCase","substr","firstOfMonth","firstWeekOffset","getDayOfWeek","createWeekCells","markForCheck","mcCalendarBody","daysInMonth","dateNames","getDateNames","weeks","push","shouldEnableDate","format","display","dateA11yLabel","cellClasses","dateClass","undefined","McCalendarCell","d1","d2","obj","isDateInstance","isValid","ChangeDetectorRef","Optional","type","Inject","MC_DATE_FORMATS","DateAdapter","decorators","Directionality","ViewChild","static","McMultiYearView","yearSelected","Math","floor","todayYear","activeYear","activeOffset","years","row","year","createCellForYear","onYearSelected","month","min","yearsPerPage","getActiveCell","yearName","getYearName","shouldEnableYear","McYearView","monthSelected","getMonthInCurrentYear","onMonthSelected","normalizedDate","todayMonth","yearLabel","monthNames","months","createCellForMonth","monthName","monthYearA11yLabel","newMonthName","shouldEnableMonth","isYearAndMonthAfterMaxDate","isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","McCalendarHeader","intl","calendar","stateChanges","currentView","label","monthYearLabel","multi-year","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","isSameView","nextEnabled","date1","date2","McCalendar","forwardRef","startView","moveFocusOnNextTick","intlChanges","next","_startAt","clampedActiveDate","_currentView","calendarHeaderPortal","ComponentPortal","headerComponent","startAt","ngAfterViewChecked","ngOnDestroy","unsubscribe","complete","change","firstChange","view","getCurrentViewComponent","detectChanges","updateTodaysDate","monthView","yearView","multiYearView","sameDate","yearSelectedInMultiYearView","normalizedYear","monthSelectedInYearView","normalizedMonth","userSelected","goToDateInView","mcDatepickerAnimations","transformPanel","trigger","state","style","opacity","transform","transition","animate","fadeInCalendar","Element","matches","msMatchesSelector","datepickerUid","MC_DATEPICKER_SCROLL_STRATEGY","InjectionToken","MC_DATEPICKER_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","provide","deps","Overlay","useFactory","_elementRef","McDatepickerContentMixinBase","mixinColor","McDatepickerContentBase","McDatepickerContent","_super","call","__","constructor","create","__extends","ngAfterViewInit","[@transformPanel]","animations","inputs","McDatepicker","viewContainerRef","scrollStrategy","document","openedStream","closedStream","id","disabledChange","selectedChanged","_opened","validSelected","focusedElementBeforeOpen","inputSubscription","Subscription","EMPTY","datepickerInput","_color","getThemePalette","_disabled","disabled","newValue","coerceBooleanProperty","open","close","max","popupRef","dispose","popupComponentRef","select","oldValue","selectYear","selectMonth","registerInput","input","valueChange","activeElement","openAsPopup","hasAttached","detach","calendarPortal","isAttached","completeClose","setTimeout","createPopup","attach","instance","datepicker","setColor","updatePosition","overlayConfig","OverlayConfig","positionStrategy","createPopupPositionStrategy","hasBackdrop","backdropClass","direction","panelClass","overlayElement","setAttribute","merge","backdropClick","detachments","keydownEvents","filter","ESCAPE","position","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withLockedPosition","withPositions","originX","originY","overlayX","overlayY","color","providers","McFormFieldControl","useExisting","ViewContainerRef","DOCUMENT","MC_DATEPICKER_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","McDatepickerInput","multi","MC_DATEPICKER_VALIDATORS","NG_VALIDATORS","target","targetElement","formField","dateChange","dateInput","datepickerSubscription","localeSubscription","lastValueValid","onTouched","cvaOnChange","validatorOnChange","parseValidator","mcDatepickerParse","text","minValidator","control","controlValue","mcDatepickerMin","actual","maxValidator","mcDatepickerMax","filterValidator","mcDatepickerFilter","validator","Validators","compose","localeChanges","McDatepickerInputEvent","_value","oldDate","formatValue","_min","_max","element","blur","registerOnValidatorChange","fn","validate","c","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","onKeydown","isAltDownArrow","readOnly","onInput","parse","onChange","onBlur","Directive","MC_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.aria-owns]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","(blur)","(keydown)","McFormField","McDatepickerToggleIcon","McDatepickerToggle","defaultTabIndex","parsedTabIndex","Number","tabIndex","watchStateChanges","stopPropagation","datepickerDisabled","observableOf","inputDisabled","datepickerToggled","[attr.tabindex]","[class.mc-datepicker-toggle_active]","[class.mc-warn]","(focus)","Attribute","ContentChild","McDatepickerModule","NgModule","imports","CommonModule","McButtonModule","OverlayModule","A11yModule","PortalModule","McIconModule","exports","declarations","entryComponents"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n    return Error(\n        `McDatepicker: No provider found for ${provider}. You must import one of the existing ` +\n        `modules at your application root or provide a custom implementation or use exists ones.`);\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({ providedIn: 'root' })\nexport class McDatepickerIntl {\n    /**\n     * Stream that emits whenever the labels here are changed. Use this to notify\n     * components if the labels have changed after initialization.\n     */\n    readonly changes: Subject<void> = new Subject<void>();\n\n    /** A label for the calendar popup (used by screen readers). */\n    calendarLabel: string = 'Calendar';\n\n    /** A label for the button used to open the calendar popup (used by screen readers). */\n    openCalendarLabel: string = 'Open calendar';\n\n    /** A label for the previous month button (used by screen readers). */\n    prevMonthLabel: string = 'Previous month';\n\n    /** A label for the next month button (used by screen readers). */\n    nextMonthLabel: string = 'Next month';\n\n    /** A label for the previous year button (used by screen readers). */\n    prevYearLabel: string = 'Previous year';\n\n    /** A label for the next year button (used by screen readers). */\n    nextYearLabel: string = 'Next year';\n\n    /** A label for the previous multi-year button (used by screen readers). */\n    prevMultiYearLabel: string = 'Previous 20 years';\n\n    /** A label for the next multi-year button (used by screen readers). */\n    nextMultiYearLabel: string = 'Next 20 years';\n\n    /** A label for the 'switch to month view' button (used by screen readers). */\n    switchToMonthViewLabel: string = 'Choose date';\n\n    /** A label for the 'switch to year view' button (used by screen readers). */\n    switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","// tslint:disable:no-magic-numbers\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    Output,\n    ViewEncapsulation,\n    NgZone,\n    OnChanges,\n    SimpleChanges\n} from '@angular/core';\nimport { take } from 'rxjs/operators';\n\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type McCalendarCellCssClasses = string | string[] | Set<string> | { [key: string]: any };\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class McCalendarCell {\n    constructor(\n        public value: number,\n        public displayValue: string,\n        public ariaLabel: string,\n        public enabled: boolean,\n        public cssClasses?: McCalendarCellCssClasses\n    ) {\n    }\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n    selector: '[mc-calendar-body]',\n    templateUrl: 'calendar-body.html',\n    styleUrls: ['calendar-body.scss'],\n    host: {\n        class: 'mc-calendar__body',\n        role: 'grid',\n        'aria-readonly': 'true'\n    },\n    exportAs: 'mcCalendarBody',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCalendarBody implements OnChanges {\n    /** The label for the table. (e.g. \"Jan 2017\"). */\n    @Input() label: string;\n\n    /** The cells to display in the table. */\n    @Input() rows: McCalendarCell[][];\n\n    /** The value in the table that corresponds to today. */\n    @Input() todayValue: number;\n\n    /** The value in the table that is currently selected. */\n    @Input() selectedValue: number;\n\n    /** The minimum number of free cells needed to fit the label in the first row. */\n    @Input() labelMinRequiredCells: number;\n\n    /** The number of columns in the table. */\n    @Input() numCols = 7;\n\n    /** The cell number of the active cell in the table. */\n    @Input() activeCell = 0;\n\n    /**\n     * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n     * maintained even as the table resizes.\n     */\n    @Input() cellAspectRatio = 1;\n\n    /** Emits when a new value is selected. */\n    @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n    /** The number of blank cells to put at the beginning for the first row. */\n    firstRowOffset: number;\n\n    /** Padding for the individual date cells. */\n    cellPadding: string;\n\n    /** Width of an individual cell. */\n    cellWidth: string;\n\n    constructor(private elementRef: ElementRef<HTMLElement>, private ngZone: NgZone) {\n    }\n\n    cellClicked(cell: McCalendarCell): void {\n        if (cell.enabled) {\n            this.selectedValueChange.emit(cell.value);\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const columnChanges = changes.numCols;\n        // tslint:disable-next-line:no-this-assignment\n        const { rows, numCols } = this;\n\n        if (changes.rows || columnChanges) {\n            this.firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n        }\n\n        if (changes.cellAspectRatio || columnChanges || !this.cellPadding) {\n            this.cellPadding = `${this.cellAspectRatio * 50 / numCols}%`;\n        }\n\n        if (columnChanges || !this.cellWidth) {\n            this.cellWidth = `${100 / numCols}%`;\n        }\n    }\n\n    isActiveCell(rowIndex: number, colIndex: number): boolean {\n        let cellNumber = rowIndex * this.numCols + colIndex;\n\n        // Account for the fact that the first row may not have as many cells.\n        if (rowIndex) {\n            cellNumber -= this.firstRowOffset;\n        }\n\n        return cellNumber === this.activeCell;\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.ngZone.runOutsideAngular(() => {\n            this.ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n                const activeCell: HTMLElement | null =\n                    this.elementRef.nativeElement.querySelector('.mc-calendar__body_active');\n\n                if (activeCell) {\n                    activeCell.focus();\n                }\n            });\n        });\n    }\n}\n","// tslint:disable:no-magic-numbers\nimport { Directionality } from '@angular/cdk/bidi';\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Inject,\n    Input,\n    Optional,\n    Output,\n    ViewEncapsulation,\n    ViewChild\n} from '@angular/core';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    PAGE_DOWN,\n    PAGE_UP,\n    RIGHT_ARROW,\n    UP_ARROW,\n    SPACE\n} from '@ptsecurity/cdk/keycodes';\n\nimport { McCalendarBody, McCalendarCell, McCalendarCellCssClasses } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-month-view',\n    templateUrl: 'month-view.html',\n    exportAs: 'mcMonthView',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McMonthView<D> implements AfterContentInit {\n    /**\n     * The date to display in this month view (everything other than the month and year is ignored).\n     */\n    @Input()\n    get activeDate(): D {\n        return this._activeDate;\n    }\n\n    set activeDate(value: D) {\n        const oldActiveDate = this._activeDate;\n        const validDate =\n            this.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();\n        this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n        if (!this.hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n            this.init();\n        }\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.selectedDate = this.getDateInCurrentMonth(this._selected);\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** Function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Function that can be used to add custom CSS classes to dates. */\n    @Input() dateClass: (date: D) => McCalendarCellCssClasses;\n\n    /** Emits when a new date is selected. */\n    @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n    /** Emits when any date is selected. */\n    @Output() readonly userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Emits when any date is activated. */\n    @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** The body of calendar table */\n    @ViewChild(McCalendarBody, {static: false}) mcCalendarBody: McCalendarBody;\n\n    /** The label for this month (e.g. \"January 2017\"). */\n    monthLabel: string;\n\n    /** Grid of calendar cells representing the dates of the month. */\n    weeks: McCalendarCell[][];\n\n    /** The number of blank cells in the first row before the 1st of the month. */\n    firstWeekOffset: number;\n\n    /**\n     * The date of the month that the currently selected Date falls on.\n     * Null if the currently selected Date is in another month.\n     */\n    selectedDate: number | null;\n\n    /** The date of the month that today falls on. Null if today is in another month. */\n    todayDate: number | null;\n\n    /** The names of the weekdays. */\n    weekdays: { long: string; narrow: string }[];\n    private _activeDate: D;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() private dir?: Directionality\n    ) {\n\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        const firstDayOfWeek = this.dateAdapter.getFirstDayOfWeek();\n        const narrowWeekdays = this.dateAdapter.getDayOfWeekNames('narrow');\n        const longWeekdays = this.dateAdapter.getDayOfWeekNames('long');\n\n        // Rotate the labels for days of the week based on the configured first day of the week.\n        const weekdays = longWeekdays.map((long, i) => {\n            return { long, narrow: narrowWeekdays[i] };\n        });\n        this.weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n        this._activeDate = this.dateAdapter.today();\n    }\n\n    ngAfterContentInit() {\n        this.init();\n    }\n\n    /** Handles when a new date is selected. */\n    dateSelected(date: number) {\n        if (this.selectedDate !== date) {\n            const selectedYear = this.dateAdapter.getYear(this.activeDate);\n            const selectedMonth = this.dateAdapter.getMonth(this.activeDate);\n            const selectedDate = this.dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n            this.selectedChange.emit(selectedDate);\n        }\n\n        this.userSelection.emit();\n    }\n\n    /** Handles keydown events on the calendar body when calendar is in month view. */\n    handleCalendarBodyKeydown(event: KeyboardEvent): void {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n        const oldActiveDate = this._activeDate;\n        const isRtl = this.isRtl();\n\n        // tslint:disable-next-line:deprecation\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, -7);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, 7);\n                break;\n            case HOME:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate,\n                    1 - this.dateAdapter.getDate(this._activeDate));\n                break;\n            case END:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate,\n                    (this.dateAdapter.getNumDaysInMonth(this._activeDate) -\n                        this.dateAdapter.getDate(this._activeDate)));\n                break;\n            case PAGE_UP:\n                this.activeDate = event.altKey ?\n                    this.dateAdapter.addCalendarYears(this._activeDate, -1) :\n                    this.dateAdapter.addCalendarMonths(this._activeDate, -1);\n                break;\n            case PAGE_DOWN:\n                this.activeDate = event.altKey ?\n                    this.dateAdapter.addCalendarYears(this._activeDate, 1) :\n                    this.dateAdapter.addCalendarMonths(this._activeDate, 1);\n                break;\n            case ENTER:\n            case SPACE:\n                if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n                    this.dateSelected(this.dateAdapter.getDate(this._activeDate));\n                    this.userSelection.emit();\n                    // Prevent unexpected default actions such as form submission.\n                    event.preventDefault();\n                }\n\n                return;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n\n        if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n\n        this.focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n\n    /** Initializes this month view. */\n    init() {\n        this.selectedDate = this.getDateInCurrentMonth(this.selected);\n        this.todayDate = this.getDateInCurrentMonth(this.dateAdapter.today());\n        this.monthLabel =\n            this.dateAdapter.getMonthNames('short')[this.dateAdapter.getMonth(this.activeDate)];\n\n        this.monthLabel = this.monthLabel[0].toLocaleUpperCase() + this.monthLabel.substr(1);\n\n        const firstOfMonth = this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate),\n            this.dateAdapter.getMonth(this.activeDate), 1);\n        this.firstWeekOffset =\n            (DAYS_PER_WEEK + this.dateAdapter.getDayOfWeek(firstOfMonth) -\n                this.dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n        this.createWeekCells();\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.mcCalendarBody.focusActiveCell();\n    }\n\n    /** Creates McCalendarCells for the dates in this month. */\n    private createWeekCells() {\n        const daysInMonth = this.dateAdapter.getNumDaysInMonth(this.activeDate);\n        const dateNames = this.dateAdapter.getDateNames();\n\n        this.weeks = [[]];\n\n        for (let i = 0, cell = this.firstWeekOffset; i < daysInMonth; i++, cell++) {\n            if (cell === DAYS_PER_WEEK) {\n                this.weeks.push([]);\n                cell = 0;\n            }\n            const date = this.dateAdapter.createDate(\n                this.dateAdapter.getYear(this.activeDate),\n                this.dateAdapter.getMonth(this.activeDate), i + 1);\n            const enabled = this.shouldEnableDate(date);\n            const ariaLabel = this.dateAdapter.format(date, this.dateFormats.display.dateA11yLabel);\n            const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n            this.weeks[this.weeks.length - 1]\n                .push(new McCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n        }\n    }\n\n    /** Date filter for the month */\n    private shouldEnableDate(date: D): boolean {\n        return !!date &&\n            (!this.dateFilter || this.dateFilter(date)) &&\n            (!this.minDate || this.dateAdapter.compareDate(date, this.minDate) >= 0) &&\n            (!this.maxDate || this.dateAdapter.compareDate(date, this.maxDate) <= 0);\n    }\n\n    /**\n     * Gets the date in this month that the given Date falls on.\n     * Returns null if the given Date is in another month.\n     */\n    private getDateInCurrentMonth(date: D | null): number | null {\n        return date && this.hasSameMonthAndYear(date, this.activeDate) ?\n            this.dateAdapter.getDate(date) : null;\n    }\n\n    /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n    private hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n        return !!(d1 && d2 && this.dateAdapter.getMonth(d1) === this.dateAdapter.getMonth(d2) &&\n            this.dateAdapter.getYear(d1) === this.dateAdapter.getYear(d2));\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Determines whether the user has the RTL layout direction. */\n    private isRtl() {\n        return this.dir && this.dir.value === 'rtl';\n    }\n}\n","// tslint:disable:no-magic-numbers\nimport { Directionality } from '@angular/cdk/bidi';\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { DateAdapter } from '@ptsecurity/cdk/datetime';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    PAGE_DOWN,\n    PAGE_UP,\n    RIGHT_ARROW,\n    UP_ARROW,\n    SPACE\n} from '@ptsecurity/cdk/keycodes';\n\nimport { McCalendarBody, McCalendarCell } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-multi-year-view',\n    templateUrl: 'multi-year-view.html',\n    exportAs: 'mcMultiYearView',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McMultiYearView<D> implements AfterContentInit {\n    /** The date to display in this multi-year view (everything other than the year is ignored). */\n    @Input()\n    get activeDate(): D {\n        return this._activeDate;\n    }\n\n    set activeDate(value: D) {\n        const oldActiveDate = this._activeDate;\n        const validDate =\n            this.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();\n        this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n        if (Math.floor(this.dateAdapter.getYear(oldActiveDate) / yearsPerPage) !==\n            Math.floor(this.dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n            this.init();\n        }\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.selectedYear = this._selected && this.dateAdapter.getYear(this._selected);\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** A function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Emits when a new year is selected. */\n    @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits the selected year. This doesn't imply a change on the selected date */\n    @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits when any date is activated. */\n    @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** The body of calendar table */\n    @ViewChild(McCalendarBody, {static: false}) mcCalendarBody: McCalendarBody;\n\n    /** Grid of calendar cells representing the currently displayed years. */\n    years: McCalendarCell[][];\n\n    /** The year that today falls on. */\n    todayYear: number;\n\n    /** The year of the selected date. Null if the selected date is null. */\n    selectedYear: number | null;\n    private _activeDate: D;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() private dir?: Directionality\n    ) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        this._activeDate = this.dateAdapter.today();\n    }\n\n    ngAfterContentInit() {\n        this.init();\n    }\n\n    /** Initializes this multi-year view. */\n    init() {\n        this.todayYear = this.dateAdapter.getYear(this.dateAdapter.today());\n        const activeYear = this.dateAdapter.getYear(this._activeDate);\n        const activeOffset = activeYear % yearsPerPage;\n        this.years = [];\n        for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n            row.push(activeYear - activeOffset + i);\n            if (row.length === yearsPerRow) {\n                this.years.push(row.map((year) => this.createCellForYear(year)));\n                row = [];\n            }\n        }\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Handles when a new year is selected. */\n    onYearSelected(year: number) {\n        this.yearSelected.emit(this.dateAdapter.createDate(year, 0, 1));\n        const month = this.dateAdapter.getMonth(this.activeDate);\n        const daysInMonth =\n            this.dateAdapter.getNumDaysInMonth(this.dateAdapter.createDate(year, month, 1));\n        this.selectedChange.emit(this.dateAdapter.createDate(year, month,\n            Math.min(this.dateAdapter.getDate(this.activeDate), daysInMonth)));\n    }\n\n    /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n    handleCalendarBodyKeydown(event: KeyboardEvent): void {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n        const oldActiveDate = this._activeDate;\n        const isRtl = this.isRtl();\n\n        // tslint:disable-next-line:deprecation\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n                break;\n            case HOME:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate,\n                    -this.dateAdapter.getYear(this._activeDate) % yearsPerPage);\n                break;\n            case END:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate,\n                    yearsPerPage - this.dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n                break;\n            case PAGE_UP:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(\n                        this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n                break;\n            case PAGE_DOWN:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(\n                        this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n                break;\n            case ENTER:\n            case SPACE:\n                this.onYearSelected(this.dateAdapter.getYear(this._activeDate));\n                break;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n\n        if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n\n        this.focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n\n    getActiveCell(): number {\n        return this.dateAdapter.getYear(this.activeDate) % yearsPerPage;\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.mcCalendarBody.focusActiveCell();\n    }\n\n    /** Creates an McCalendarCell for the given year. */\n    private createCellForYear(year: number) {\n        const yearName = this.dateAdapter.getYearName(this.dateAdapter.createDate(year, 0, 1));\n\n        return new McCalendarCell(year, yearName, yearName, this.shouldEnableYear(year));\n    }\n\n    /** Whether the given year is enabled. */\n    private shouldEnableYear(year: number) {\n        // disable if the year is greater than maxDate lower than minDate\n        if (year === undefined || year === null ||\n            (this.maxDate && year > this.dateAdapter.getYear(this.maxDate)) ||\n            (this.minDate && year < this.dateAdapter.getYear(this.minDate))) {\n            return false;\n        }\n\n        // enable if it reaches here and there's no filter defined\n        if (!this.dateFilter) {\n            return true;\n        }\n\n        const firstOfYear = this.dateAdapter.createDate(year, 0, 1);\n\n        // If any date in the year is enabled count the year as enabled.\n        for (let date = firstOfYear; this.dateAdapter.getYear(date) === year;\n             date = this.dateAdapter.addCalendarDays(date, 1)) {\n            if (this.dateFilter(date)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Determines whether the user has the RTL layout direction. */\n    private isRtl() {\n        return this.dir && this.dir.value === 'rtl';\n    }\n}\n","import { Directionality } from '@angular/cdk/bidi';\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Inject,\n    Input,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    PAGE_DOWN,\n    PAGE_UP,\n    RIGHT_ARROW,\n    UP_ARROW,\n    SPACE\n} from '@ptsecurity/cdk/keycodes';\n\nimport { McCalendarBody, McCalendarCell } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-year-view',\n    templateUrl: 'year-view.html',\n    exportAs: 'mcYearView',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McYearView<D> implements AfterContentInit {\n    /** The date to display in this year view (everything other than the year is ignored). */\n    @Input()\n    get activeDate(): D {\n        return this._activeDate;\n    }\n\n    set activeDate(value: D) {\n        const oldActiveDate = this._activeDate;\n        const validDate =\n            this.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();\n        this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n        if (this.dateAdapter.getYear(oldActiveDate) !== this.dateAdapter.getYear(this._activeDate)) {\n            this.init();\n        }\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.selectedMonth = this.getMonthInCurrentYear(this._selected);\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** A function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Emits when a new month is selected. */\n    @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits the selected month. This doesn't imply a change on the selected date */\n    @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits when any date is activated. */\n    @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** The body of calendar table */\n    @ViewChild(McCalendarBody, {static: false}) mcCalendarBody: McCalendarBody;\n\n    /** Grid of calendar cells representing the months of the year. */\n    months: McCalendarCell[][];\n\n    /** The label for this year (e.g. \"2017\"). */\n    yearLabel: string;\n\n    /** The month in this year that today falls on. Null if today is in a different year. */\n    todayMonth: number | null;\n\n    /**\n     * The month in this year that the selected Date falls on.\n     * Null if the selected Date is in a different year.\n     */\n    selectedMonth: number | null;\n    private _activeDate: D;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() private dir?: Directionality\n    ) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        this._activeDate = this.dateAdapter.today();\n    }\n\n    ngAfterContentInit() {\n        this.init();\n    }\n\n    /** Handles when a new month is selected. */\n    onMonthSelected(month: number) {\n        const normalizedDate =\n            this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate), month, 1);\n\n        this.monthSelected.emit(normalizedDate);\n\n        const daysInMonth = this.dateAdapter.getNumDaysInMonth(normalizedDate);\n\n        this.selectedChange.emit(this.dateAdapter.createDate(\n            this.dateAdapter.getYear(this.activeDate), month,\n            Math.min(this.dateAdapter.getDate(this.activeDate), daysInMonth)));\n    }\n\n    /** Handles keydown events on the calendar body when calendar is in year view. */\n    handleCalendarBodyKeydown(event: KeyboardEvent): void {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n        const oldActiveDate = this._activeDate;\n        const isRtl = this.isRtl();\n\n        const VERTICAL_SHIFT = 4;\n        const PAGE_SHIFT = 10;\n        const MAX_MONTH_INDEX = 11;\n\n        // tslint:disable-next-line:deprecation\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, -VERTICAL_SHIFT);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, VERTICAL_SHIFT);\n                break;\n            case HOME:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate,\n                    -this.dateAdapter.getMonth(this._activeDate));\n                break;\n            case END:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate,\n                    MAX_MONTH_INDEX - this.dateAdapter.getMonth(this._activeDate));\n                break;\n            case PAGE_UP:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -PAGE_SHIFT : -1);\n                break;\n            case PAGE_DOWN:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(this._activeDate, event.altKey ? PAGE_SHIFT : 1);\n                break;\n            case ENTER:\n            case SPACE:\n                this.onMonthSelected(this.dateAdapter.getMonth(this._activeDate));\n                break;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n\n        if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n\n        this.focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n\n    /** Initializes this year view. */\n    init() {\n        this.selectedMonth = this.getMonthInCurrentYear(this.selected);\n        this.todayMonth = this.getMonthInCurrentYear(this.dateAdapter.today());\n        this.yearLabel = this.dateAdapter.getYearName(this.activeDate);\n\n        const monthNames = this.dateAdapter.getMonthNames('short');\n\n        // First row of months only contains 5 elements so we can fit the year label on the same row.\n        // tslint:disable-next-line:no-magic-numbers\n        this.months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map((row) => row.map(\n            (month) => this.createCellForMonth(month, monthNames[month])));\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.mcCalendarBody.focusActiveCell();\n    }\n\n    /**\n     * Gets the month in this year that the given Date falls on.\n     * Returns null if the given Date is in another year.\n     */\n    private getMonthInCurrentYear(date: D | null) {\n        return date && this.dateAdapter.getYear(date) === this.dateAdapter.getYear(this.activeDate) ?\n            this.dateAdapter.getMonth(date) : null;\n    }\n\n    /** Creates an McCalendarCell for the given month. */\n    private createCellForMonth(month: number, monthName: string) {\n        const ariaLabel = this.dateAdapter.format(\n            this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate), month, 1),\n            this.dateFormats.display.monthYearA11yLabel);\n\n        const newMonthName = monthName[0].toLocaleUpperCase() + monthName.substr(1);\n\n        return new McCalendarCell(\n            month, newMonthName, ariaLabel, this.shouldEnableMonth(month));\n    }\n\n    /** Whether the given month is enabled. */\n    private shouldEnableMonth(month: number) {\n\n        const activeYear = this.dateAdapter.getYear(this.activeDate);\n\n        if (month === undefined || month === null ||\n            this.isYearAndMonthAfterMaxDate(activeYear, month) ||\n            this.isYearAndMonthBeforeMinDate(activeYear, month)) {\n            return false;\n        }\n\n        if (!this.dateFilter) {\n            return true;\n        }\n\n        const firstOfMonth = this.dateAdapter.createDate(activeYear, month, 1);\n\n        // If any date in the month is enabled count the month as enabled.\n        for (let date = firstOfMonth; this.dateAdapter.getMonth(date) === month;\n             date = this.dateAdapter.addCalendarDays(date, 1)) {\n            if (this.dateFilter(date)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Tests whether the combination month/year is after this.maxDate, considering\n     * just the month and year of this.maxDate\n     */\n    private isYearAndMonthAfterMaxDate(year: number, month: number) {\n        if (this.maxDate) {\n            const maxYear = this.dateAdapter.getYear(this.maxDate);\n            const maxMonth = this.dateAdapter.getMonth(this.maxDate);\n\n            return year > maxYear || (year === maxYear && month > maxMonth);\n        }\n\n        return false;\n    }\n\n    /**\n     * Tests whether the combination month/year is before this.minDate, considering\n     * just the month and year of this.minDate\n     */\n    private isYearAndMonthBeforeMinDate(year: number, month: number) {\n        if (this.minDate) {\n            const minYear = this.dateAdapter.getYear(this.minDate);\n            const minMonth = this.dateAdapter.getMonth(this.minDate);\n\n            return year < minYear || (year === minYear && month < minMonth);\n        }\n\n        return false;\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Determines whether the user has the RTL layout direction. */\n    private isRtl() {\n        return this.dir && this.dir.value === 'rtl';\n    }\n}\n","import { ComponentPortal, ComponentType, Portal } from '@angular/cdk/portal';\nimport {\n    AfterContentInit,\n    AfterViewChecked,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Optional,\n    Output,\n    SimpleChanges,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport { Subject, Subscription } from 'rxjs';\n\nimport { McCalendarCellCssClasses } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\nimport { McDatepickerIntl } from './datepicker-intl';\nimport { McMonthView } from './month-view';\nimport { McMultiYearView, yearsPerPage } from './multi-year-view';\nimport { McYearView } from './year-view';\n\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type McCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for McCalendar */\n@Component({\n    selector: 'mc-calendar-header',\n    templateUrl: 'calendar-header.html',\n    exportAs: 'mcCalendarHeader',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCalendarHeader<D> {\n    constructor(private intl: McDatepickerIntl,\n                @Inject(forwardRef(() => McCalendar)) public calendar: McCalendar<D>,\n                @Optional() private dateAdapter: DateAdapter<D>,\n                @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n                changeDetectorRef: ChangeDetectorRef) {\n\n        this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n    }\n\n    /** The label for the current calendar view. */\n    get periodButtonText(): string {\n        if (this.calendar.currentView === 'month') {\n            const label = this.dateAdapter\n                .format(this.calendar.activeDate, this.dateFormats.display.monthYearLabel);\n\n            return label[0].toLocaleUpperCase() + label.substr(1);\n        }\n\n        if (this.calendar.currentView === 'year') {\n            return this.dateAdapter.getYearName(this.calendar.activeDate);\n        }\n\n        const activeYear = this.dateAdapter.getYear(this.calendar.activeDate);\n        const firstYearInView = this.dateAdapter.getYearName(\n            // tslint:disable-next-line:no-magic-numbers\n            this.dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n        const lastYearInView = this.dateAdapter.getYearName(\n            // tslint:disable-next-line:no-magic-numbers\n            this.dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n\n        return `${firstYearInView} \\u2013 ${lastYearInView}`;\n    }\n\n    get periodButtonLabel(): string {\n        return this.calendar.currentView === 'month' ?\n            this.intl.switchToMultiYearViewLabel : this.intl.switchToMonthViewLabel;\n    }\n\n    /** The label for the previous button. */\n    get prevButtonLabel(): string {\n        return {\n            month: this.intl.prevMonthLabel,\n            year: this.intl.prevYearLabel,\n            'multi-year': this.intl.prevMultiYearLabel\n        }[this.calendar.currentView];\n    }\n\n    /** The label for the next button. */\n    get nextButtonLabel(): string {\n        return {\n            month: this.intl.nextMonthLabel,\n            year: this.intl.nextYearLabel,\n            'multi-year': this.intl.nextMultiYearLabel\n        }[this.calendar.currentView];\n    }\n\n    /** Handles user clicks on the period label. */\n    currentPeriodClicked(): void {\n        this.calendar.currentView = this.calendar.currentView === 'month' ? 'multi-year' : 'month';\n    }\n\n    /** Handles user clicks on the previous button. */\n    previousClicked(): void {\n        this.calendar.activeDate = this.calendar.currentView === 'month' ?\n            this.dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this.dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView === 'year' ? -1 : -yearsPerPage\n            );\n    }\n\n    /** Handles user clicks on the next button. */\n    nextClicked(): void {\n        this.calendar.activeDate = this.calendar.currentView === 'month' ?\n            this.dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this.dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                this.calendar.currentView === 'year' ? 1 : yearsPerPage\n            );\n    }\n\n    /** Whether the previous period button is enabled. */\n    previousEnabled(): boolean {\n        if (!this.calendar.minDate) {\n            return true;\n        }\n\n        return !this.calendar.minDate ||\n            !this.isSameView(this.calendar.activeDate, this.calendar.minDate);\n    }\n\n    /** Whether the next period button is enabled. */\n    nextEnabled(): boolean {\n        return !this.calendar.maxDate ||\n            !this.isSameView(this.calendar.activeDate, this.calendar.maxDate);\n    }\n\n    /** Whether the two dates represent the same view in the current view mode (month or year). */\n    private isSameView(date1: D, date2: D): boolean {\n        if (this.calendar.currentView === 'month') {\n            return this.dateAdapter.getYear(date1) === this.dateAdapter.getYear(date2) &&\n                this.dateAdapter.getMonth(date1) === this.dateAdapter.getMonth(date2);\n        }\n        if (this.calendar.currentView === 'year') {\n            return this.dateAdapter.getYear(date1) === this.dateAdapter.getYear(date2);\n        }\n\n        // Otherwise we are in 'multi-year' view.\n        return Math.floor(this.dateAdapter.getYear(date1) / yearsPerPage) ===\n            Math.floor(this.dateAdapter.getYear(date2) / yearsPerPage);\n    }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-calendar',\n    templateUrl: 'calendar.html',\n    styleUrls: ['calendar.scss'],\n    host: {\n        class: 'mc-calendar'\n    },\n    exportAs: 'mcCalendar',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n\n    /** A date representing the period (month or year) to start the calendar in. */\n    @Input()\n    get startAt(): D | null {\n        return this._startAt;\n    }\n\n    set startAt(value: D | null) {\n        this._startAt = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /**\n     * The current active date. This determines which time period is shown and which date is\n     * highlighted when using keyboard navigation.\n     */\n    get activeDate(): D {\n        return this.clampedActiveDate;\n    }\n\n    set activeDate(value: D) {\n        this.clampedActiveDate = this.dateAdapter.clampDate(value, this.minDate, this.maxDate);\n        this.stateChanges.next();\n    }\n\n    /** Whether the calendar is in month view. */\n    get currentView(): McCalendarView {\n        return this._currentView;\n    }\n\n    set currentView(value: McCalendarView) {\n        this._currentView = value;\n        this.moveFocusOnNextTick = true;\n    }\n\n    /** An input indicating the type of the header component, if set. */\n    @Input() headerComponent: ComponentType<any>;\n\n    /** A portal containing the header component type for this calendar. */\n    calendarHeaderPortal: Portal<any>;\n\n    /** Whether the calendar should be started in month or year view. */\n    @Input() startView: McCalendarView = 'month';\n\n    /** Function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Function that can be used to add custom CSS classes to dates. */\n    @Input() dateClass: (date: D) => McCalendarCellCssClasses;\n\n    /** Emits when the currently selected date changes. */\n    @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /**\n     * Emits the year chosen in multiyear view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /**\n     * Emits the month chosen in year view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits when any date is selected. */\n    @Output() readonly userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Reference to the current month view component. */\n    @ViewChild(McMonthView, {static: false}) monthView: McMonthView<D>;\n\n    /** Reference to the current year view component. */\n    @ViewChild(McYearView, {static: false}) yearView: McYearView<D>;\n\n    /** Reference to the current multi-year view component. */\n    @ViewChild(McMultiYearView, {static: false}) multiYearView: McMultiYearView<D>;\n\n    /**\n     * Emits whenever there is a state change that the header may need to respond to.\n     */\n    stateChanges = new Subject<void>();\n\n    private intlChanges: Subscription;\n\n    /**\n     * Used for scheduling that focus should be moved to the active cell on the next tick.\n     * We need to schedule it, rather than do it immediately, because we have to wait\n     * for Angular to re-evaluate the view children.\n     */\n    private moveFocusOnNextTick = false;\n    private _startAt: D | null;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n    private clampedActiveDate: D;\n    private _currentView: McCalendarView;\n\n    constructor(\n        intl: McDatepickerIntl,\n        @Optional() private dateAdapter: DateAdapter<D>,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        this.intlChanges = intl.changes.subscribe(() => {\n            changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        });\n    }\n\n    ngAfterContentInit() {\n        this.calendarHeaderPortal = new ComponentPortal(this.headerComponent || McCalendarHeader);\n        this.activeDate = this.startAt || this.dateAdapter.today();\n\n        // Assign to the private property since we don't want to move focus on init.\n        this._currentView = this.startView;\n    }\n\n    ngAfterViewChecked() {\n        if (this.moveFocusOnNextTick) {\n            this.moveFocusOnNextTick = false;\n            this.focusActiveCell();\n        }\n    }\n\n    ngOnDestroy() {\n        this.intlChanges.unsubscribe();\n        this.stateChanges.complete();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n        if (change && !change.firstChange) {\n            const view = this.getCurrentViewComponent();\n\n            if (view) {\n                // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n                // passed down to the view via data bindings which won't be up-to-date when we call `init`.\n                this.changeDetectorRef.detectChanges();\n                view.init();\n            }\n        }\n\n        this.stateChanges.next();\n    }\n\n    focusActiveCell() {\n        this.getCurrentViewComponent().focusActiveCell();\n    }\n\n    /** Updates today's date after an update of the active date */\n    updateTodaysDate() {\n        const view = this.currentView === 'month' ? this.monthView :\n            (this.currentView === 'year' ? this.yearView : this.multiYearView);\n\n        view.ngAfterContentInit();\n    }\n\n    /** Handles date selection in the month view. */\n    dateSelected(date: D): void {\n        if (!this.dateAdapter.sameDate(date, this.selected)) {\n            this.selectedChange.emit(date);\n        }\n    }\n\n    /** Handles year selection in the multiyear view. */\n    yearSelectedInMultiYearView(normalizedYear: D) {\n        this.yearSelected.emit(normalizedYear);\n    }\n\n    /** Handles month selection in the year view. */\n    monthSelectedInYearView(normalizedMonth: D) {\n        this.monthSelected.emit(normalizedMonth);\n    }\n\n    userSelected(): void {\n        this.userSelection.emit();\n    }\n\n    /** Handles year/month selection in the multi-year/year views. */\n    goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n        this.activeDate = date;\n        this.currentView = view;\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Returns the component instance that corresponds to the current calendar view. */\n    private getCurrentViewComponent() {\n        return this.monthView || this.yearView || this.multiYearView;\n    }\n}\n","import {\n    animate,\n    state,\n    style,\n    transition,\n    trigger,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n\n/**\n * Animations used by the mosaic datepicker.\n * @docs-private\n */\nexport const mcDatepickerAnimations: {\n    readonly transformPanel: AnimationTriggerMetadata;\n    readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n    /** Transforms the height of the datepicker's calendar. */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(1, 0.8)'\n        })),\n        transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1, 1)'\n        }))),\n        transition('* => void', animate('100ms linear', style({ opacity: 0 })))\n    ]),\n\n    /** Fades in the content of the calendar. */\n    fadeInCalendar: trigger('fadeInCalendar', [\n        state('void', style({ opacity: 0 })),\n        state('enter', style({ opacity: 1 })),\n\n        // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n        transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n    ])\n};\n\n// todo should be put into polyfils\n// https://github.com/angular/angular/issues/24769\nif (!Element.prototype.matches) {\n    Element.prototype.matches = (Element.prototype as any).msMatchesSelector;\n}\n","// tslint:disable:no-unbound-method\n// tslint:disable:no-magic-numbers\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    Overlay,\n    OverlayConfig,\n    OverlayRef,\n    PositionStrategy,\n    ScrollStrategy\n} from '@angular/cdk/overlay';\nimport { ComponentPortal, ComponentType } from '@angular/cdk/portal';\nimport { DOCUMENT } from '@angular/common';\nimport {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    Component,\n    ComponentRef,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { DateAdapter } from '@ptsecurity/cdk/datetime';\nimport { ESCAPE, UP_ARROW } from '@ptsecurity/cdk/keycodes';\nimport {\n    CanColor,\n    CanColorCtor,\n    mixinColor,\n    ThemePalette\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { merge, Observable, Subject, Subscription } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\n\nimport { McCalendar } from './calendar';\nimport { McCalendarCellCssClasses } from './calendar-body';\nimport { mcDatepickerAnimations } from './datepicker-animations';\nimport { createMissingDateImplError } from './datepicker-errors';\nimport { McDatepickerInput } from './datepicker-input';\n\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MC_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mc-datepicker-scroll-strategy');\n\n/** @docs-private */\n// tslint:disable-next-line:naming-convention\nexport function MC_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_DATEPICKER_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_DATEPICKER_SCROLL_STRATEGY_FACTORY\n};\n\n// Boilerplate for applying mixins to McDatepickerContent.\n/** @docs-private */\nexport class McDatepickerContentBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McDatepickerContentMixinBase: CanColorCtor & typeof McDatepickerContentBase =\n    mixinColor(McDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * McCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n    selector: 'mc-datepicker__content',\n    templateUrl: 'datepicker-content.html',\n    styleUrls: ['datepicker-content.scss'],\n    host: {\n        class: 'mc-datepicker__content',\n        '[@transformPanel]': '\"enter\"'\n    },\n    animations: [\n        mcDatepickerAnimations.transformPanel,\n        mcDatepickerAnimations.fadeInCalendar\n    ],\n    exportAs: 'mcDatepickerContent',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['color']\n})\nexport class McDatepickerContent<D> extends McDatepickerContentMixinBase\n    implements AfterViewInit, CanColor {\n\n    /** Reference to the internal calendar component. */\n    @ViewChild(McCalendar, {static: false}) calendar: McCalendar<D>;\n\n    /** Reference to the datepicker that created the overlay. */\n    datepicker: McDatepicker<D>;\n\n    /** Whether the datepicker is above or below the input. */\n    isAbove: boolean;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    ngAfterViewInit() {\n        this.calendar.focusActiveCell();\n    }\n}\n\n\n// TODO: We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"mcDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n    selector: 'mc-datepicker',\n    template: '',\n    exportAs: 'mcDatepicker',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    providers: [{ provide: McFormFieldControl, useExisting: McDatepicker }]\n})\nexport class McDatepicker<D> implements OnDestroy, CanColor {\n\n    /** The date to open the calendar to initially. */\n    @Input()\n    get startAt(): D | null {\n        // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n        // selected value is.\n        return this._startAt || (this.datepickerInput ? this.datepickerInput.value : null);\n    }\n\n    set startAt(value: D | null) {\n        this._startAt = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** Color palette to use on the datepicker's calendar. */\n    @Input()\n    get color(): ThemePalette {\n        // @ts-ignore:next-line\n        return this._color ||\n            (this.datepickerInput ? this.datepickerInput.getThemePalette() : undefined);\n    }\n\n    set color(value: ThemePalette) {\n        this._color = value;\n    }\n\n    /** Whether the datepicker pop-up should be disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled === undefined && this.datepickerInput ?\n            this.datepickerInput.disabled : !!this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        const newValue = coerceBooleanProperty(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this.disabledChange.next(newValue);\n        }\n    }\n\n    /** Whether the calendar is open. */\n    @Input()\n    get opened(): boolean {\n        return this._opened;\n    }\n\n    set opened(value: boolean) {\n        if (value) {\n            this.open();\n        } else {\n            this.close();\n        }\n    }\n\n    /** The currently selected date. */\n    get selected(): D | null {\n        return this.validSelected;\n    }\n\n    set selected(value: D | null) {\n        this.validSelected = value;\n    }\n\n    /** The minimum selectable date. */\n    get minDate(): D | null {\n        return this.datepickerInput && this.datepickerInput.min;\n    }\n\n    /** The maximum selectable date. */\n    get maxDate(): D | null {\n        return this.datepickerInput && this.datepickerInput.max;\n    }\n\n    get dateFilter(): (date: D | null) => boolean {\n        return this.datepickerInput && this.datepickerInput.dateFilter;\n    }\n\n\n    get value(): D | null {\n        return this.selected;\n    }\n\n    /** An input indicating the type of the custom header component for the calendar, if set. */\n    @Input() calendarHeaderComponent: ComponentType<any>;\n\n    /** The view that the calendar should start in. */\n    @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n    /**\n     * Emits selected year in multiyear view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /**\n     * Emits selected month in year view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n    @Input() panelClass: string | string[];\n\n    /** Function that can be used to add custom CSS classes to dates. */\n    @Input() dateClass: (date: D) => McCalendarCellCssClasses;\n\n    /** Emits when the datepicker has been opened. */\n    @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Emits when the datepicker has been closed. */\n    @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n    /** The id for the datepicker calendar. */\n    id: string = `mc-datepicker-${datepickerUid++}`;\n\n    /** A reference to the overlay when the calendar is opened as a popup. */\n    popupRef: OverlayRef;\n\n    /** The input element this datepicker is associated with. */\n    datepickerInput: McDatepickerInput<D>;\n\n    readonly stateChanges: Observable<void> = new Subject<void>();\n\n    /** Emits when the datepicker is disabled. */\n    readonly disabledChange = new Subject<boolean>();\n\n    /** Emits new selected date when selected date changes. */\n    readonly selectedChanged = new Subject<D>();\n    private scrollStrategy: () => ScrollStrategy;\n    private _startAt: D | null;\n    private _disabled: boolean;\n    private _opened = false;\n    private validSelected: D | null = null;\n    private _color: ThemePalette;\n\n    /** A portal containing the calendar for this datepicker. */\n    private calendarPortal: ComponentPortal<McDatepickerContent<D>>;\n\n    /** Reference to the component instantiated in popup mode. */\n    private popupComponentRef: ComponentRef<McDatepickerContent<D>> | null;\n\n    /** The element that was focused before the datepicker was opened. */\n    private focusedElementBeforeOpen: HTMLElement | null = null;\n\n    /** Subscription to value changes in the associated input element. */\n    private inputSubscription = Subscription.EMPTY;\n\n    constructor(private overlay: Overlay,\n                private ngZone: NgZone,\n                private viewContainerRef: ViewContainerRef,\n                @Inject(MC_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n                @Optional() private dateAdapter: DateAdapter<D>,\n                @Optional() private dir: Directionality,\n                @Optional() @Inject(DOCUMENT) private document: any) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        this.scrollStrategy = scrollStrategy;\n    }\n\n    ngOnDestroy() {\n        this.close();\n        this.inputSubscription.unsubscribe();\n        this.disabledChange.complete();\n\n        if (this.popupRef) {\n            this.popupRef.dispose();\n            this.popupComponentRef = null;\n        }\n    }\n\n    /** Selects the given date */\n    select(date: D): void {\n        const oldValue = this.selected;\n        this.selected = date;\n        if (!this.dateAdapter.sameDate(oldValue, this.selected)) {\n            this.selectedChanged.next(date);\n        }\n    }\n\n    /** Emits the selected year in multiyear view */\n    selectYear(normalizedYear: D): void {\n        this.yearSelected.emit(normalizedYear);\n    }\n\n    /** Emits selected month in year view */\n    selectMonth(normalizedMonth: D): void {\n        this.monthSelected.emit(normalizedMonth);\n    }\n\n    /**\n     * Register an input with this datepicker.\n     * @param input The datepicker input to register with this datepicker.\n     */\n    registerInput(input: McDatepickerInput<D>): void {\n        if (this.datepickerInput) {\n            throw Error('A McDatepicker can only be associated with a single input.');\n        }\n        this.datepickerInput = input;\n        this.inputSubscription =\n            this.datepickerInput.valueChange.subscribe((value: D | null) => this.selected = value);\n    }\n\n    /** Open the calendar. */\n    open(): void {\n        if (this._opened || this.disabled) {\n            return;\n        }\n        if (!this.datepickerInput) {\n            throw Error('Attempted to open an McDatepicker with no associated input.');\n        }\n        if (this.document) {\n            this.focusedElementBeforeOpen = this.document.activeElement;\n        }\n\n        this.openAsPopup();\n\n        this._opened = true;\n        this.openedStream.emit();\n    }\n\n    /** Close the calendar. */\n    close(): void {\n        if (!this._opened) {\n            return;\n        }\n\n        if (this.popupRef && this.popupRef.hasAttached()) {\n            this.popupRef.detach();\n        }\n\n        if (this.calendarPortal && this.calendarPortal.isAttached) {\n            this.calendarPortal.detach();\n        }\n\n        const completeClose = () => {\n            // The `_opened` could've been reset already if\n            // we got two events in quick succession.\n            if (this._opened) {\n                this._opened = false;\n                this.closedStream.emit();\n                this.focusedElementBeforeOpen = null;\n\n                this.datepickerInput.elementRef.nativeElement.focus();\n            }\n        };\n\n        if (this.focusedElementBeforeOpen &&\n            typeof this.focusedElementBeforeOpen.focus === 'function') {\n            // Because IE moves focus asynchronously, we can't count on it being restored before we've\n            // marked the datepicker as closed. If the event fires out of sequence and the element that\n            // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n            // able to close the calendar at all. We work around it by making the logic, that marks\n            // the datepicker as closed, async as well.\n            this.focusedElementBeforeOpen.focus();\n            setTimeout(completeClose);\n        } else {\n            completeClose();\n        }\n    }\n\n    /** Open the calendar as a popup. */\n    private openAsPopup(): void {\n        if (!this.calendarPortal) {\n            this.calendarPortal = new ComponentPortal<McDatepickerContent<D>>(McDatepickerContent,\n                this.viewContainerRef);\n        }\n\n        if (!this.popupRef) {\n            this.createPopup();\n        }\n\n        if (!this.popupRef.hasAttached()) {\n            this.popupComponentRef = this.popupRef.attach(this.calendarPortal);\n            this.popupComponentRef.instance.datepicker = this;\n            this.setColor();\n\n            // Update the position once the calendar has rendered.\n            this.ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n                this.popupRef.updatePosition();\n            });\n        }\n    }\n\n    /** Create the popup. */\n    private createPopup(): void {\n        const overlayConfig = new OverlayConfig({\n            positionStrategy: this.createPopupPositionStrategy(),\n            hasBackdrop: true,\n            backdropClass: 'mc-overlay-transparent-backdrop',\n            direction: this.dir,\n            scrollStrategy: this.scrollStrategy(),\n            panelClass: 'mc-datepicker__popup'\n        });\n\n        this.popupRef = this.overlay.create(overlayConfig);\n        this.popupRef.overlayElement.setAttribute('role', 'dialog');\n\n        merge(\n            this.popupRef.backdropClick(),\n            this.popupRef.detachments(),\n            this.popupRef.keydownEvents().pipe(filter((event) => {\n                // Closing on alt + up is only valid when there's an input associated with the datepicker.\n                // tslint:disable-next-line:deprecation\n                return event.keyCode === ESCAPE || (this.datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n            }))\n        ).subscribe(() => this.close());\n    }\n\n    /** Create the popup PositionStrategy. */\n    private createPopupPositionStrategy(): PositionStrategy {\n        return this.overlay.position()\n            .flexibleConnectedTo(this.datepickerInput.elementRef)\n            .withTransformOriginOn('.mc-datepicker__content')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(8)\n            .withLockedPosition()\n            .withPositions([\n                {\n                    originX: 'start',\n                    originY: 'bottom',\n                    overlayX: 'start',\n                    overlayY: 'top'\n                },\n                {\n                    originX: 'start',\n                    originY: 'top',\n                    overlayX: 'start',\n                    overlayY: 'bottom'\n                },\n                {\n                    originX: 'end',\n                    originY: 'bottom',\n                    overlayX: 'end',\n                    overlayY: 'top'\n                },\n                {\n                    originX: 'end',\n                    originY: 'top',\n                    overlayX: 'end',\n                    overlayY: 'bottom'\n                }\n            ]);\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Passes the current theme color along to the calendar overlay. */\n    private setColor(): void {\n        const color = this.color;\n        if (this.popupComponentRef) {\n            this.popupComponentRef.instance.color = color;\n        }\n    }\n}\n","// tslint:disable:no-empty\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output\n} from '@angular/core';\nimport {\n    AbstractControl,\n    ControlValueAccessor,\n    NG_VALIDATORS,\n    NG_VALUE_ACCESSOR,\n    ValidationErrors,\n    Validator,\n    ValidatorFn,\n    Validators\n} from '@angular/forms';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport { DOWN_ARROW } from '@ptsecurity/cdk/keycodes';\nimport { ThemePalette } from '@ptsecurity/mosaic/core';\nimport { McFormField } from '@ptsecurity/mosaic/form-field';\nimport { MC_INPUT_VALUE_ACCESSOR } from '@ptsecurity/mosaic/input';\nimport { Subscription } from 'rxjs';\n\nimport { McDatepicker } from './datepicker';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\n/** @docs-private */\nexport const MC_DATEPICKER_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McDatepickerInput),\n    multi: true\n};\n\n/** @docs-private */\nexport const MC_DATEPICKER_VALIDATORS: any = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McDatepickerInput),\n    multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use McDatepickerInputEvent instead.\n */\nexport class McDatepickerInputEvent<D> {\n    /** The new value for the target datepicker input. */\n    value: D | null;\n\n    constructor(\n        /** Reference to the datepicker input component that emitted the event. */\n        public target: McDatepickerInput<D>,\n        /** Reference to the native input element associated with the datepicker input. */\n        public targetElement: HTMLElement) {\n        this.value = this.target.value;\n    }\n}\n\n\n/** Directive used to connect an input to a McDatepicker. */\n@Directive({\n    selector: 'input[mcDatepicker]',\n    providers: [\n        MC_DATEPICKER_VALUE_ACCESSOR,\n        MC_DATEPICKER_VALIDATORS,\n        { provide: MC_INPUT_VALUE_ACCESSOR, useExisting: McDatepickerInput }\n    ],\n    host: {\n        '[attr.aria-haspopup]': 'true',\n        '[attr.aria-owns]': '(datepicker?.opened && datepicker.id) || null',\n        '[attr.min]': 'min ? dateAdapter.toIso8601(min) : null',\n        '[attr.max]': 'max ? dateAdapter.toIso8601(max) : null',\n        '[disabled]': 'disabled',\n        '(input)': 'onInput($event.target.value)',\n        '(change)': 'onChange()',\n        '(blur)': 'onBlur()',\n        '(keydown)': 'onKeydown($event)'\n    },\n    exportAs: 'mcDatepickerInput'\n})\nexport class McDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n    /** The datepicker that this input is associated with. */\n    @Input()\n    set mcDatepicker(value: McDatepicker<D>) {\n        if (!value) {\n            return;\n        }\n\n        this.datepicker = value;\n        this.datepicker.registerInput(this);\n        this.datepickerSubscription.unsubscribe();\n\n        this.datepickerSubscription = this.datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this.cvaOnChange(selected);\n            this.onTouched();\n            this.dateInput.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));\n            this.dateChange.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));\n        });\n    }\n\n    /** Function that can be used to filter out dates within the datepicker. */\n    @Input()\n    set mcDatepickerFilter(value: (date: D | null) => boolean) {\n        this.dateFilter = value;\n        this.validatorOnChange();\n    }\n\n    /** The value of the input. */\n    @Input()\n    get value(): D | null {\n        return this._value;\n    }\n\n    set value(value: D | null) {\n        // tslint:disable-next-line:no-parameter-reassignment\n        value = this.dateAdapter.deserialize(value);\n        this.lastValueValid = !value || this.dateAdapter.isValid(value);\n        // tslint:disable-next-line:no-parameter-reassignment\n        value = this.getValidDateOrNull(value);\n        const oldDate = this.value;\n        this._value = value;\n        this.formatValue(value);\n\n        if (!this.dateAdapter.sameDate(oldDate, value)) {\n            this.valueChange.emit(value);\n        }\n    }\n\n    /** The minimum valid date. */\n    @Input()\n    get min(): D | null {\n        return this._min;\n    }\n\n    set min(value: D | null) {\n        this._min = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.validatorOnChange();\n    }\n\n    /** The maximum valid date. */\n    @Input()\n    get max(): D | null {\n        return this._max;\n    }\n\n    set max(value: D | null) {\n        this._max = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.validatorOnChange();\n    }\n\n    /** Whether the datepicker-input is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return !!this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        const newValue = coerceBooleanProperty(value);\n        const element = this.elementRef.nativeElement;\n\n        if (this._disabled !== newValue) {\n            this._disabled = newValue;\n            this.disabledChange.emit(newValue);\n        }\n\n        // We need to null check the `blur` method, because it's undefined during SSR.\n        if (newValue && element.blur) {\n            // Normally, native input elements automatically blur if they turn disabled. This behavior\n            // is problematic, because it would mean that it triggers another change detection cycle,\n            // which then causes a changed after checked error if the input element was focused before.\n            element.blur();\n        }\n    }\n\n    datepicker: McDatepicker<D>;\n    dateFilter: (date: D | null) => boolean;\n\n    /** Emits when a `change` event is fired on this `<input>`. */\n    @Output() readonly dateChange: EventEmitter<McDatepickerInputEvent<D>> =\n        new EventEmitter<McDatepickerInputEvent<D>>();\n\n    /** Emits when an `input` event is fired on this `<input>`. */\n    @Output() readonly dateInput: EventEmitter<McDatepickerInputEvent<D>> =\n        new EventEmitter<McDatepickerInputEvent<D>>();\n\n    /** Emits when the value changes (either due to user input or programmatic change). */\n    valueChange = new EventEmitter<D | null>();\n\n    /** Emits when the disabled state has changed */\n    disabledChange = new EventEmitter<boolean>();\n    private _value: D | null;\n    private _min: D | null;\n    private _max: D | null;\n    private _disabled: boolean;\n\n    private datepickerSubscription = Subscription.EMPTY;\n\n    private localeSubscription = Subscription.EMPTY;\n\n    /** Whether the last value set on the input was valid. */\n    private lastValueValid = false;\n\n    /** The combined form control validator for this input. */\n    private validator: ValidatorFn | null;\n\n    constructor(\n        public elementRef: ElementRef<HTMLInputElement>,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n        @Optional() private formField: McFormField\n    ) {\n        this.validator = Validators.compose([\n            this.parseValidator,\n            this.minValidator,\n            this.maxValidator,\n            this.filterValidator\n        ]);\n\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        // Update the displayed date when the locale changes.\n        this.localeSubscription = dateAdapter.localeChanges.subscribe(() => {\n            this.value = this.value;\n        });\n    }\n\n    onTouched = () => {\n    }\n\n    ngOnDestroy() {\n        this.datepickerSubscription.unsubscribe();\n        this.localeSubscription.unsubscribe();\n        this.valueChange.complete();\n        this.disabledChange.complete();\n    }\n\n    /** @docs-private */\n    registerOnValidatorChange(fn: () => void): void {\n        this.validatorOnChange = fn;\n    }\n\n    /** @docs-private */\n    validate(c: AbstractControl): ValidationErrors | null {\n        return this.validator ? this.validator(c) : null;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: D): void {\n        this.value = value;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this.cvaOnChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    onKeydown(event: KeyboardEvent) {\n        // tslint:disable-next-line:deprecation\n        const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n        if (this.datepicker && isAltDownArrow && !this.elementRef.nativeElement.readOnly) {\n            this.datepicker.open();\n            event.preventDefault();\n        }\n    }\n\n    onInput(value: string) {\n        let date = this.dateAdapter.parse(value, this.dateFormats.parse.dateInput);\n        this.lastValueValid = !date || this.dateAdapter.isValid(date);\n        date = this.getValidDateOrNull(date);\n\n        if (!this.dateAdapter.sameDate(date, this._value)) {\n            this._value = date;\n            this.cvaOnChange(date);\n            this.valueChange.emit(date);\n            this.dateInput.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));\n        }\n    }\n\n    onChange() {\n        this.dateChange.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));\n    }\n\n    /** Returns the palette used by the input's form field, if any. */\n    getThemePalette(): ThemePalette | undefined {\n        return this.formField ? this.formField.color : undefined;\n    }\n\n    /** Handles blur events on the input. */\n    onBlur() {\n        // Reformat the input only if we have a valid value.\n        if (this.value) {\n            this.formatValue(this.value);\n        }\n\n        this.onTouched();\n    }\n\n    private cvaOnChange: (value: any) => void = () => {\n    }\n\n    private validatorOnChange = () => {\n    }\n\n    /** The form control validator for whether the input parses. */\n    private parseValidator: ValidatorFn = (): ValidationErrors | null => {\n        return this.lastValueValid ?\n            null : { mcDatepickerParse: { text: this.elementRef.nativeElement.value } };\n    }\n\n    /** The form control validator for the min date. */\n    private minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n        const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));\n\n        return (!this.min || !controlValue ||\n            this.dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n            null : { mcDatepickerMin: { min: this.min, actual: controlValue } };\n    }\n\n    /** The form control validator for the max date. */\n    private maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n        const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));\n\n        return (!this.max || !controlValue ||\n            this.dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n            null : { mcDatepickerMax: { max: this.max, actual: controlValue } };\n    }\n\n    /** The form control validator for the date filter. */\n    private filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n        const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));\n\n        return !this.dateFilter || !controlValue || this.dateFilter(controlValue) ?\n            null : { mcDatepickerFilter: true };\n    }\n\n    /** Formats a value and sets it on the input element. */\n    private formatValue(value: D | null) {\n        this.elementRef.nativeElement.value =\n            value ? this.dateAdapter.format(value, this.dateFormats.display.dateInput) : '';\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n}\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    Directive,\n    Input,\n    OnChanges,\n    OnDestroy,\n    SimpleChanges,\n    ViewEncapsulation,\n    ViewChild\n} from '@angular/core';\nimport { McButton } from '@ptsecurity/mosaic/button';\nimport { merge, of as observableOf, Subscription } from 'rxjs';\n\nimport { McDatepicker } from './datepicker';\nimport { McDatepickerIntl } from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `mcDatepickerToggle`. */\n@Directive({\n    selector: '[mcDatepickerToggleIcon]'\n})\nexport class McDatepickerToggleIcon {\n}\n\n\n@Component({\n    selector: 'mc-datepicker-toggle',\n    templateUrl: 'datepicker-toggle.html',\n    styleUrls: ['datepicker-toggle.scss'],\n    host: {\n        class: 'mc-datepicker-toggle',\n        // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n        // consumer may have provided, while still being able to receive focus.\n        '[attr.tabindex]': '-1',\n        '[class.mc-datepicker-toggle_active]': 'datepicker && datepicker.opened',\n        '[class.mc-warn]': 'datepicker && datepicker.color === \"error\"',\n        '(focus)': 'button.focus()'\n    },\n    exportAs: 'mcDatepickerToggle',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n\n    /** Whether the toggle button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    /** Datepicker instance that the button will toggle. */\n    @Input('for') datepicker: McDatepicker<D>;\n\n    /** Tabindex for the toggle. */\n    @Input() tabIndex: number | null;\n\n    /** Custom icon set by the consumer. */\n    @ContentChild(McDatepickerToggleIcon, {static: false}) customIcon: McDatepickerToggleIcon;\n\n    /** Underlying button element. */\n    @ViewChild('button', {static: false}) button: McButton;\n    private stateChanges = Subscription.EMPTY;\n\n    private _disabled: boolean;\n\n    constructor(\n        public intl: McDatepickerIntl,\n        private changeDetectorRef: ChangeDetectorRef,\n        @Attribute('tabindex') defaultTabIndex: string\n    ) {\n        const parsedTabIndex = Number(defaultTabIndex);\n        this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.datepicker) {\n            this.watchStateChanges();\n        }\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.unsubscribe();\n    }\n\n    ngAfterContentInit() {\n        this.watchStateChanges();\n    }\n\n    open(event: Event): void {\n        if (this.datepicker && !this.disabled) {\n            this.datepicker.open();\n            event.stopPropagation();\n        }\n    }\n\n    private watchStateChanges() {\n        const datepickerDisabled = this.datepicker ? this.datepicker.disabledChange : observableOf();\n        const inputDisabled = this.datepicker && this.datepicker.datepickerInput ?\n            this.datepicker.datepickerInput.disabledChange : observableOf();\n        const datepickerToggled = this.datepicker ?\n            merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n            observableOf();\n\n        this.stateChanges.unsubscribe();\n        this.stateChanges = merge(\n            this.intl.changes,\n            datepickerDisabled,\n            inputDisabled,\n            datepickerToggled\n        ).subscribe(() => this.changeDetectorRef.markForCheck());\n    }\n}\n","import { A11yModule } from '@angular/cdk/a11y';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { McButtonModule } from '@ptsecurity/mosaic/button';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McCalendar, McCalendarHeader } from './calendar';\nimport { McCalendarBody } from './calendar-body';\nimport {\n    McDatepicker,\n    McDatepickerContent,\n    MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './datepicker';\nimport { McDatepickerInput } from './datepicker-input';\nimport { McDatepickerIntl } from './datepicker-intl';\nimport { McDatepickerToggle, McDatepickerToggleIcon } from './datepicker-toggle';\nimport { McMonthView } from './month-view';\nimport { McMultiYearView } from './multi-year-view';\nimport { McYearView } from './year-view';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        McButtonModule,\n        OverlayModule,\n        A11yModule,\n        PortalModule,\n        McIconModule\n    ],\n    exports: [\n        McCalendar,\n        McCalendarBody,\n        McDatepicker,\n        McDatepickerContent,\n        McDatepickerInput,\n        McDatepickerToggle,\n        McDatepickerToggleIcon,\n        McMonthView,\n        McYearView,\n        McMultiYearView,\n        McCalendarHeader,\n        McButtonModule\n    ],\n    declarations: [\n        McCalendar,\n        McCalendarBody,\n        McDatepicker,\n        McDatepickerContent,\n        McDatepickerInput,\n        McDatepickerToggle,\n        McDatepickerToggleIcon,\n        McMonthView,\n        McYearView,\n        McMultiYearView,\n        McCalendarHeader\n    ],\n    providers: [\n        McDatepickerIntl,\n        MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER\n    ],\n    entryComponents: [\n        McDatepickerContent,\n        McCalendarHeader\n    ]\n})\nexport class McDatepickerModule {\n}\n"]}