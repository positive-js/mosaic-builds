{"version":3,"sources":["ng://@ptsecurity/mosaic/timepicker/timepicker.constants.ts","ng://@ptsecurity/mosaic/timepicker/timepicker.ts","ng://@ptsecurity/mosaic/timepicker/timepicker.module.ts"],"names":["TimeParts","hours","minutes","seconds","TimeFormats","HHmmss","HHmm","TIMEFORMAT_PLACEHOLDERS","_a","DEFAULT_TIME_FORMAT","HOURS_MINUTES_SECONDS_REGEXP","HOURS_MINUTES_REGEXP","HOURS_ONLY_REGEXP","AM_PM_FORMAT_REGEXP","MC_TIMEPICKER_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","McTimepicker","multi","MC_TIMEPICKER_VALIDATORS","NG_VALIDATORS","uniqueComponentIdSuffix","elementRef","dateAdapter","renderer","_this","this","stateChanges","Subject","focused","controlType","lastValueValid","_format","_min","_max","uid","parseValidator","mcTimepickerParse","text","viewValue","minValidator","control","controlValue","getValidDateOrNull","deserialize","value","min","compareTime","mcTimepickerLowerThenMin","actual","maxValidator","max","mcTimepickerHigherThenMax","validatorOnChange","Error","validator","Validators","compose","onChange","noop","id","placeholder","Object","defineProperty","prototype","_disabled","coerceBooleanProperty","next","_id","_required","formatValue","keys","map","timeFormatKey","indexOf","updateView","_value","newValue","isValid","nativeElement","isBadInput","selectionStart","selectionEnd","ngOnDestroy","complete","focus","focusChanged","isFocused","onTouched","onBlur","getDateFromTimeString","updateValueAndValidity","onPaste","$event","newTimeObj","clipboardData","getData","preventDefault","setProperty","getTimeStringFromDate","format","onInput","createSelectionOfTimeComponentInInput","onContainerClick","onKeyDown","event","keyCode","hasModifierKey","BACKSPACE","DELETE","includes","UP_ARROW","DOWN_ARROW","verticalArrowKeyHandler","LEFT_ARROW","RIGHT_ARROW","horizontalArrowKeyHandler","setTimeout","validate","setControl","registerOnValidatorChange","fn","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","disabled","validity","badInput","changedTime","newEditParams","getTimeEditMetrics","incrementTime","modifiedTimePart","decrementTime","cursorStartPosition","cursorEndPosition","cursorPos","length","nextDividerPos","dateVal","whatToIncrement","getHours","getMinutes","getSeconds","createDateTime","getYear","getMonth","getDate","getMilliseconds","whatToDecrement","cursorPosition","timeString","minutesIndex","hoursIndex","secondsIndex","timeFormat","hoursAndMinutesAndSeconds","match","hoursAndMinutes","hoursOnly","hoursAndMinutesInAmPm","Number","test","resultDate","first","second","result","obj","isDateInstance","formattedValue","Directive","args","selector","exportAs","host","class","[attr.id]","[attr.placeholder]","[attr.disabled]","[attr.required]","(blur)","(focus)","(paste)","(keydown)","providers","McFormFieldControl","ElementRef","DateAdapter","decorators","type","Optional","Renderer2","Input","McTimepickerModule","NgModule","imports","CommonModule","A11yModule","PlatformModule","FormsModule","declarations","exports"],"mappings":"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","sourcesContent":["// tslint:disable:naming-convention\nexport enum TimeParts {\n    hours,\n    minutes,\n    seconds\n}\n\nexport enum TimeFormats {\n    HHmmss = 'HH:mm:ss',\n    HHmm = 'HH:mm'\n}\n\nexport const TIMEFORMAT_PLACEHOLDERS: { [timeFormat: string]: string } = {\n    [TimeFormats.HHmmss]: '  :  :  ',\n    [TimeFormats.HHmm]: '  :  '\n};\n\nexport const DEFAULT_TIME_FORMAT: TimeFormats = TimeFormats.HHmm;\n\nexport const HOURS_MINUTES_SECONDS_REGEXP = /^([0-1][0-9]|2[0-3]):?([0-5][0-9]):?([0-5][0-9])?$/;\nexport const HOURS_MINUTES_REGEXP = /^([0-1][0-9]|2[0-3]):?([0-5][0-9])?$/;\nexport const HOURS_ONLY_REGEXP = /^([0-1][0-9]|2[0-3]):?$/;\nexport const AM_PM_FORMAT_REGEXP = /^([0-1]?[0-9]):([0-5]?[0-9]) ([ap][m]?$)/i;\n\nexport const SECONDS_PER_MINUTE: number = 59;\nexport const MINUTES_PER_HOUR: number = 59;\nexport const HOURS_PER_DAY: number = 23;\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    Directive,\n    ElementRef,\n    forwardRef,\n    Input,\n    OnDestroy,\n    Optional,\n    Renderer2\n} from '@angular/core';\nimport {\n    AbstractControl,\n    ControlValueAccessor,\n    NG_VALIDATORS,\n    NG_VALUE_ACCESSOR,\n    ValidationErrors,\n    Validator,\n    ValidatorFn,\n    Validators\n} from '@angular/forms';\nimport { DateAdapter } from '@ptsecurity/cdk/datetime';\nimport {\n    BACKSPACE,\n    DELETE,\n    DOWN_ARROW,\n    hasModifierKey,\n    LEFT_ARROW,\n    RIGHT_ARROW,\n    UP_ARROW\n} from '@ptsecurity/cdk/keycodes';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { noop, Subject } from 'rxjs';\n\nimport {\n    DEFAULT_TIME_FORMAT,\n    HOURS_PER_DAY,\n    HOURS_MINUTES_REGEXP,\n    HOURS_MINUTES_SECONDS_REGEXP,\n    HOURS_ONLY_REGEXP,\n    MINUTES_PER_HOUR,\n    SECONDS_PER_MINUTE,\n    TIMEFORMAT_PLACEHOLDERS,\n    TimeFormats,\n    TimeParts,\n    AM_PM_FORMAT_REGEXP\n} from './timepicker.constants';\n\n\n/** @docs-private */\nexport const MC_TIMEPICKER_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McTimepicker),\n    multi: true\n};\n\n/** @docs-private */\nexport const MC_TIMEPICKER_VALIDATORS: any = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McTimepicker),\n    multi: true\n};\n\n\nlet uniqueComponentIdSuffix: number = 0;\n\n\n@Directive({\n    selector: 'input[mcTimepicker]',\n    exportAs: 'mcTimepickerInput',\n    host: {\n        class: 'mc-timepicker mc-input',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.required]': 'required',\n\n        '(blur)': 'onBlur()',\n        '(focus)': 'focusChanged(true)',\n\n        '(paste)': 'onPaste($event)',\n\n        '(keydown)': 'onKeyDown($event)'\n    },\n    providers: [\n        MC_TIMEPICKER_VALIDATORS,\n        MC_TIMEPICKER_VALUE_ACCESSOR,\n        { provide: McFormFieldControl, useExisting: McTimepicker }\n    ]\n})\nexport class McTimepicker<D> implements McFormFieldControl<D>, OnDestroy, ControlValueAccessor, Validator {\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    readonly errorState: boolean;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-timepicker';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n    private lastValueValid = false;\n\n    private control: AbstractControl;\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n        }\n\n        this.stateChanges.next();\n    }\n\n    private _disabled: boolean;\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n    }\n\n    private _id: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    private _required: boolean;\n\n    @Input()\n    get format(): TimeFormats {\n        return this._format;\n    }\n\n    set format(formatValue: TimeFormats) {\n        this._format = Object\n            .keys(TimeFormats)\n            .map((timeFormatKey) => TimeFormats[timeFormatKey])\n            .indexOf(formatValue) > -1 ? formatValue : DEFAULT_TIME_FORMAT;\n\n        this.placeholder = TIMEFORMAT_PLACEHOLDERS[this._format];\n\n        if (this.value) {\n            this.updateView();\n        }\n    }\n\n    private _format: TimeFormats = DEFAULT_TIME_FORMAT;\n\n    @Input()\n    get min(): D | null {\n        return this._min;\n    }\n\n    set min(value: D | null) {\n        this._min = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.validatorOnChange();\n    }\n\n    private _min: D | null = null;\n\n    @Input()\n    get max(): D | null {\n        return this._max;\n    }\n\n    set max(value: D | null) {\n        this._max = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.validatorOnChange();\n    }\n\n    private _max: D | null = null;\n\n    @Input()\n    get value(): D | null {\n        return this._value;\n    }\n\n    set value(value: D | null) {\n        const newValue = this.dateAdapter.deserialize(value);\n\n        this.lastValueValid = !newValue || this.dateAdapter.isValid(newValue);\n\n        this._value = this.getValidDateOrNull(newValue);\n\n        this.updateView();\n    }\n\n    private _value: D | null;\n\n    get viewValue(): string {\n        return this.elementRef.nativeElement.value;\n    }\n\n    get ngControl(): any {\n        return this.control;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this.viewValue && !this.isBadInput();\n    }\n\n    get selectionStart(): number | null {\n        return this.elementRef.nativeElement.selectionStart;\n    }\n\n    set selectionStart(value: number | null) {\n        this.elementRef.nativeElement.selectionStart = value;\n    }\n\n    get selectionEnd(): number | null {\n        return this.elementRef.nativeElement.selectionEnd;\n    }\n\n    set selectionEnd(value: number | null) {\n        this.elementRef.nativeElement.selectionEnd = value;\n    }\n\n    private readonly uid = `mc-timepicker-${uniqueComponentIdSuffix++}`;\n\n    private validator: ValidatorFn | null;\n\n    private onChange: (value: any) => void;\n    private onTouched: () => void;\n\n    constructor(\n        private readonly elementRef: ElementRef,\n        @Optional() private dateAdapter: DateAdapter<any>,\n        private readonly renderer: Renderer2\n    ) {\n        if (!this.dateAdapter) {\n            throw Error(`McTimepicker: No provider found for DateAdapter. You must import one of the existing ` +\n                `modules at your application root or provide a custom implementation or use exists ones.`);\n        }\n\n        this.validator = Validators.compose([this.parseValidator, this.minValidator, this.maxValidator]);\n\n        this.onChange = noop;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n\n        this.placeholder = TIMEFORMAT_PLACEHOLDERS[DEFAULT_TIME_FORMAT];\n    }\n\n    ngOnDestroy(): void {\n        this.stateChanges.complete();\n    }\n\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    focusChanged(isFocused: boolean): void {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.onTouched();\n            this.stateChanges.next();\n        }\n    }\n\n    onBlur() {\n        this.lastValueValid = !!this.getDateFromTimeString(this.viewValue);\n        this.control.updateValueAndValidity();\n        this.focusChanged(false);\n    }\n\n    onPaste($event) {\n        const newTimeObj = this.getDateFromTimeString($event.clipboardData.getData('text'));\n\n        if (!newTimeObj) { return; }\n\n        $event.preventDefault();\n\n        this.renderer.setProperty(\n            this.elementRef.nativeElement,\n            'value',\n            this.getTimeStringFromDate(newTimeObj, this.format)\n        );\n\n        this.value = newTimeObj;\n        this.onChange(newTimeObj);\n        this.stateChanges.next();\n    }\n\n    onInput() {\n        const newTimeObj = this.getDateFromTimeString(this.viewValue);\n\n        if (!newTimeObj) { return; }\n\n        const selectionStart = this.selectionStart;\n        const selectionEnd = this.selectionEnd;\n\n        this.renderer.setProperty(\n            this.elementRef.nativeElement,\n            'value',\n            this.getTimeStringFromDate(newTimeObj, this.format)\n        );\n\n        this.selectionStart = selectionStart;\n        this.selectionEnd = selectionEnd;\n\n        this.createSelectionOfTimeComponentInInput((selectionStart as number) + 1);\n\n        this.onChange(newTimeObj);\n        this.stateChanges.next();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n        // tslint:disable-next-line: deprecation\n        const keyCode = event.keyCode;\n\n        if (hasModifierKey(event) || [BACKSPACE, DELETE].includes(keyCode)) {\n            return;\n        } else if ([UP_ARROW, DOWN_ARROW].includes(keyCode)) {\n            event.preventDefault();\n\n            this.verticalArrowKeyHandler(keyCode);\n\n            return;\n        } else if ([LEFT_ARROW, RIGHT_ARROW].includes(keyCode)) {\n            this.horizontalArrowKeyHandler(keyCode);\n\n            return;\n        }\n\n        setTimeout(() => this.onInput());\n    }\n\n    validate(control: AbstractControl): ValidationErrors | null {\n        this.setControl(control);\n\n        return this.validator ? this.validator(control) : null;\n    }\n\n    registerOnValidatorChange(fn: () => void): void {\n        this.validatorOnChange = fn;\n    }\n\n    writeValue(value: D | null): void {\n        this.value = value;\n    }\n\n    registerOnChange(fn: (value: D) => void): void {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    /** Checks whether the input is invalid based on the native validation. */\n    private isBadInput(): boolean {\n        const validity = (<HTMLInputElement> this.elementRef.nativeElement).validity;\n\n        return validity && validity.badInput;\n    }\n\n    private verticalArrowKeyHandler(keyCode: number): void {\n        if (!this.value) { return; }\n\n        let changedTime;\n\n        const newEditParams = this.getTimeEditMetrics(this.selectionStart as number);\n\n        if (keyCode === UP_ARROW) {\n            changedTime = this.incrementTime(this.value, newEditParams.modifiedTimePart);\n        }\n\n        if (keyCode === DOWN_ARROW) {\n            changedTime = this.decrementTime(this.value, newEditParams.modifiedTimePart);\n        }\n\n        this.value = changedTime;\n\n        this.selectionStart = newEditParams.cursorStartPosition;\n        this.selectionEnd = newEditParams.cursorEndPosition;\n\n        this.onChange(changedTime);\n        this.stateChanges.next();\n    }\n\n    private horizontalArrowKeyHandler(keyCode: number): void {\n        if (!this.value) { return; }\n\n        let cursorPos = this.selectionStart as number;\n\n        if (keyCode === LEFT_ARROW) {\n            cursorPos = cursorPos === 0 ? this.viewValue.length : cursorPos - 1;\n        } else if (keyCode === RIGHT_ARROW) {\n            const nextDividerPos: number = this.viewValue.indexOf(':', cursorPos);\n\n            cursorPos = nextDividerPos ? nextDividerPos + 1 : 0;\n        }\n\n        this.createSelectionOfTimeComponentInInput(cursorPos);\n    }\n\n    private createSelectionOfTimeComponentInInput(cursorPos: number): void {\n        setTimeout(() => {\n            const newEditParams = this.getTimeEditMetrics(cursorPos);\n\n            this.selectionStart = newEditParams.cursorStartPosition;\n            this.selectionEnd = newEditParams.cursorEndPosition;\n        });\n    }\n\n    private incrementTime(dateVal: D, whatToIncrement: TimeParts = TimeParts.seconds): D {\n        let hours = this.dateAdapter.getHours(dateVal);\n        let minutes = this.dateAdapter.getMinutes(dateVal);\n        let seconds = this.dateAdapter.getSeconds(dateVal);\n\n        switch (whatToIncrement) {\n            case TimeParts.hours:\n                hours++;\n                break;\n            case TimeParts.minutes:\n                minutes++;\n                break;\n            case TimeParts.seconds:\n                seconds++;\n                break;\n            default:\n        }\n\n        if (seconds > SECONDS_PER_MINUTE) { seconds = 0; }\n\n        if (minutes > MINUTES_PER_HOUR) { minutes = 0; }\n\n        if (hours > HOURS_PER_DAY) { hours = 0; }\n\n        return this.dateAdapter.createDateTime(\n            this.dateAdapter.getYear(this.value),\n            this.dateAdapter.getMonth(this.value),\n            this.dateAdapter.getDate(this.value),\n            hours,\n            minutes,\n            seconds,\n            this.dateAdapter.getMilliseconds(this.value)\n        );\n    }\n\n    private decrementTime(dateVal: D, whatToDecrement: TimeParts = TimeParts.seconds): D {\n        let hours = this.dateAdapter.getHours(dateVal);\n        let minutes = this.dateAdapter.getMinutes(dateVal);\n        let seconds = this.dateAdapter.getSeconds(dateVal);\n\n        switch (whatToDecrement) {\n            case TimeParts.hours:\n                hours--;\n                break;\n            case TimeParts.minutes:\n                minutes--;\n                break;\n            case TimeParts.seconds:\n                seconds--;\n                break;\n            default:\n        }\n\n        if (seconds < 0) { seconds = SECONDS_PER_MINUTE; }\n\n        if (minutes < 0) { minutes = MINUTES_PER_HOUR; }\n\n        if (hours < 0) { hours = HOURS_PER_DAY; }\n\n        return this.dateAdapter.createDateTime(\n            this.dateAdapter.getYear(this.value),\n            this.dateAdapter.getMonth(this.value),\n            this.dateAdapter.getDate(this.value),\n            hours,\n            minutes,\n            seconds,\n            this.dateAdapter.getMilliseconds(this.value)\n        );\n    }\n\n    /**\n     * @description Get params for arrow-keys (up/down) time valie edit.\n     * @param cursorPosition Current cursor position in timeString\n     */\n    private getTimeEditMetrics(cursorPosition: number): {\n        modifiedTimePart: TimeParts;\n        cursorStartPosition: number;\n        cursorEndPosition: number;\n    } {\n        const timeString: string = this.viewValue;\n        let modifiedTimePart: TimeParts;\n        let cursorStartPosition: number;\n        let cursorEndPosition: number;\n\n        const hoursIndex = 0;\n        const minutesIndex = timeString.indexOf(':', hoursIndex + 1);\n        const secondsIndex = minutesIndex !== -1 ? timeString.indexOf(':', minutesIndex + 1) : -1;\n\n        if (secondsIndex !== -1 && cursorPosition > secondsIndex) {\n            modifiedTimePart = TimeParts.seconds;\n            cursorStartPosition = secondsIndex + 1;\n            cursorEndPosition = timeString.length;\n        } else if (minutesIndex !== -1 && cursorPosition > minutesIndex) {\n            modifiedTimePart = TimeParts.minutes;\n            cursorStartPosition = minutesIndex + 1;\n            cursorEndPosition = secondsIndex > -1 ? secondsIndex : timeString.length;\n        } else {\n            modifiedTimePart = TimeParts.hours;\n            cursorStartPosition = hoursIndex;\n            cursorEndPosition = minutesIndex !== -1 ? minutesIndex : timeString.length;\n        }\n\n        return { modifiedTimePart, cursorStartPosition, cursorEndPosition };\n    }\n\n    /**\n     * @description Create time string for displaying inside input element of UI\n     */\n    private getTimeStringFromDate(value: D | null, timeFormat: TimeFormats): string {\n        if (!value || !this.dateAdapter.isValid(value)) { return ''; }\n\n        return this.dateAdapter.format(value, timeFormat);\n    }\n\n    private getDateFromTimeString(timeString: string): D | null {\n        if (!timeString) { return null; }\n\n        const hoursAndMinutesAndSeconds = timeString.match(HOURS_MINUTES_SECONDS_REGEXP);\n        const hoursAndMinutes = timeString.match(HOURS_MINUTES_REGEXP);\n        const hoursOnly = timeString.match(HOURS_ONLY_REGEXP);\n        const hoursAndMinutesInAmPm = timeString.match(AM_PM_FORMAT_REGEXP);\n\n        let hours: number = 0;\n        let minutes: number = 0;\n        let seconds: number = 0;\n\n        // tslint:disable:no-magic-numbers\n        if (hoursAndMinutesInAmPm) {\n            hours = Number(hoursAndMinutesInAmPm[1]);\n            minutes = Number(hoursAndMinutesInAmPm[2]);\n\n            if (/[p]/i.test(hoursAndMinutesInAmPm[3]) || (/[a]/i.test(hoursAndMinutesInAmPm[3]) && hours === 12)) {\n                hours += 12;\n            }\n        } else if (hoursAndMinutesAndSeconds) {\n            hours = Number(hoursAndMinutesAndSeconds[1]);\n            minutes = Number(hoursAndMinutesAndSeconds[2]);\n            seconds = Number(hoursAndMinutesAndSeconds[3]);\n        } else if (hoursAndMinutes) {\n            hours = Number(hoursAndMinutes[1]);\n            minutes = Number(hoursAndMinutes[2]);\n        } else if (hoursOnly) {\n            hours = Number(hoursOnly[1]);\n        } else {\n            return null;\n        }\n        // tslint:enable\n\n        const resultDate = this.dateAdapter.createDateTime(\n            this.dateAdapter.getYear(this.value),\n            this.dateAdapter.getMonth(this.value),\n            this.dateAdapter.getDate(this.value),\n            hours,\n            minutes,\n            seconds,\n            this.dateAdapter.getMilliseconds(this.value)\n        );\n\n        return this.getValidDateOrNull(resultDate);\n    }\n\n    private parseValidator: ValidatorFn = (): ValidationErrors | null => {\n        return this.lastValueValid ? null : { mcTimepickerParse: { text: this.viewValue } };\n    }\n\n    private minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n        const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));\n\n        return (!this.min || !controlValue || this.compareTime(this.min, controlValue) <= 0) ?\n            null :\n            { mcTimepickerLowerThenMin: { min: this.min, actual: controlValue } };\n    }\n\n    private maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n        const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));\n\n        return (!this.max || !controlValue || this.compareTime(this.max, controlValue) >= 0) ?\n            null :\n            { mcTimepickerHigherThenMax: { max: this.max, actual: controlValue } };\n    }\n\n    private compareTime(first: D, second: D): number {\n        const result = this.dateAdapter.getHours(first) - this.dateAdapter.getHours(second) ||\n            this.dateAdapter.getMinutes(first) - this.dateAdapter.getMinutes(second);\n\n        if (TimeFormats.HHmm === this.format) {\n            return result;\n        } else if (TimeFormats.HHmmss === this.format) {\n            return result || this.dateAdapter.getSeconds(first) - this.dateAdapter.getSeconds(second);\n        } else {\n            throw Error(`Unknown format: ${this.format}`);\n        }\n    }\n\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    private updateView() {\n        const formattedValue = this.getTimeStringFromDate(this.value, this.format);\n\n        this.renderer.setProperty(this.elementRef.nativeElement, 'value', formattedValue);\n    }\n\n    private setControl(control: AbstractControl) {\n        if (!this.control) {\n            this.control = control;\n        }\n    }\n\n    // tslint:disable-next-line:no-empty\n    private validatorOnChange = () => {};\n}\n","import { A11yModule } from '@angular/cdk/a11y';\nimport { PlatformModule } from '@angular/cdk/platform';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { McTimepicker } from './timepicker';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        FormsModule\n    ],\n    declarations: [McTimepicker],\n    exports: [McTimepicker]\n})\nexport class McTimepickerModule {}\n"]}