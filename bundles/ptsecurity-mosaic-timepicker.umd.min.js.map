{"version":3,"sources":["../../../packages/mosaic/timepicker/timepicker.constants.ts","../../../packages/mosaic/timepicker/timepicker.directive.ts","../../../packages/mosaic/timepicker/timepicker.module.ts"],"names":["TimeParts","TimeFormats","TIMEFORMAT_PLACEHOLDERS","_a","HHmmss","HHmm","DEFAULT_TIME_FORMAT","HOURS_MINUTES_SECONDS_REGEXP","HOURS_MINUTES_REGEXP","HOURS_ONLY_REGEXP","AM_PM_FORMAT_REGEXP","MC_TIMEPICKER_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","McTimepicker","multi","MC_TIMEPICKER_VALIDATORS","NG_VALIDATORS","uniqueComponentIdSuffix","elementRef","dateAdapter","renderer","_this","this","stateChanges","Subject","focused","controlType","_format","_min","_max","incorrectInput","EventEmitter","uid","lastValueValid","onInput","formattedValue","formatUserInput","viewValue","newTimeObj","getDateFromTimeString","selectionStart","selectionEnd","setViewValue","getTimeStringFromDate","format","createSelectionOfTimeComponentInInput","value","onChange","next","control","updateValueAndValidity","parseValidator","empty","mcTimepickerParse","text","minValidator","controlValue","getValidDateOrNull","deserialize","min","compareTime","mcTimepickerLowerThenMin","actual","maxValidator","max","mcTimepickerHigherThenMax","validatorOnChange","Error","validator","Validators","compose","noop","id","placeholder","Object","defineProperty","prototype","_disabled","coerceBooleanProperty","_id","_required","formatValue","keys","map","timeFormatKey","indexOf","updateView","_value","newValue","isValid","tooltip","mcMouseEnterDelay","mcTrigger","mcTooltipClass","initElementRefListeners","subscribe","isTooltipOpen","show","setTimeout","hide","nativeElement","isBadInput","ngOnDestroy","complete","getSize","isFullFormat","focus","focusChanged","isFocused","onTouched","onBlur","onPaste","$event","preventDefault","formatUserPaste","clipboardData","getData","onContainerClick","onKeyDown","event","keyCode","isLetterKey","ctrlKey","metaKey","hasModifierKey","isVerticalMovement","isHorizontalMovement","DELETE","BACKSPACE","includes","SPACE","spaceKeyHandler","HOME","PAGE_UP","END","PAGE_DOWN","length","UP_ARROW","DOWN_ARROW","verticalArrowKeyHandler","LEFT_ARROW","RIGHT_ARROW","horizontalArrowKeyHandler","test","key","getNewValue","replaceSymbols","emit","validate","setControl","registerOnValidatorChange","fn","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","disabled","match","groups","hours","replaceNumbers","values","group","padStart","join","_b","number","symbol","replace","minutes","seconds","parseInt","toString","validity","badInput","cursorPos","nextDividerPos","position","slice","changedTime","newEditParams","getTimeEditMetrics","incrementTime","modifiedTimePart","decrementTime","cursorStartPosition","cursorEndPosition","dateVal","whatToIncrement","getHours","getMinutes","getSeconds","createDateTime","getYear","getMonth","getDate","getMilliseconds","whatToDecrement","cursorPosition","timeString","minutesIndex","hoursIndex","secondsIndex","timeFormat","hoursAndMinutesAndSeconds","hoursAndMinutes","hoursOnly","hoursAndMinutesInAmPm","Number","resultDate","first","second","result","obj","isDateInstance","setProperty","Directive","args","selector","exportAs","host","class","[attr.id]","[attr.placeholder]","[attr.disabled]","[attr.required]","[attr.size]","[attr.autocomplete]","(blur)","(focus)","(paste)","(keydown)","providers","McFormFieldControl","ElementRef","DateAdapter","decorators","type","Optional","Renderer2","Input","Output","NgModule","imports","CommonModule","A11yModule","PlatformModule","FormsModule","declarations","exports"],"mappings":"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","sourcesContent":["// tslint:disable:naming-convention\nexport enum TimeParts {\n    hours,\n    minutes,\n    seconds\n}\n\nexport enum TimeFormats {\n    HHmmss = 'HH:mm:ss',\n    HHmm = 'HH:mm'\n}\n\nexport const TIMEFORMAT_PLACEHOLDERS: { [timeFormat: string]: string } = {\n    [TimeFormats.HHmmss]: 'чч:мм:сс',\n    [TimeFormats.HHmm]: 'чч:мм'\n};\n\nexport const DEFAULT_TIME_FORMAT: TimeFormats = TimeFormats.HHmm;\n\nexport const HOURS_MINUTES_SECONDS_REGEXP = /^([0-1][0-9]|2[0-3]):?([0-5][0-9]):?([0-5][0-9])?$/;\nexport const HOURS_MINUTES_REGEXP = /^([0-1][0-9]|2[0-3]):?([0-5][0-9])?$/;\nexport const HOURS_ONLY_REGEXP = /^([0-1][0-9]|2[0-3]):?$/;\nexport const AM_PM_FORMAT_REGEXP = /^([0-1]?[0-9]):([0-5]?[0-9]) ([ap][m]?$)/i;\n\nexport const SECONDS_PER_MINUTE: number = 59;\nexport const MINUTES_PER_HOUR: number = 59;\nexport const HOURS_PER_DAY: number = 23;\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    Renderer2\n} from '@angular/core';\nimport {\n    AbstractControl,\n    ControlValueAccessor,\n    NG_VALIDATORS,\n    NG_VALUE_ACCESSOR,\n    ValidationErrors,\n    Validator,\n    ValidatorFn,\n    Validators\n} from '@angular/forms';\nimport { DateAdapter } from '@ptsecurity/cdk/datetime';\nimport {\n    DOWN_ARROW,\n    UP_ARROW,\n    HOME,\n    END,\n    LEFT_ARROW,\n    RIGHT_ARROW,\n    PAGE_DOWN,\n    PAGE_UP,\n    SPACE,\n    DELETE,\n    BACKSPACE,\n    hasModifierKey,\n    isLetterKey,\n    isVerticalMovement,\n    isHorizontalMovement\n} from '@ptsecurity/cdk/keycodes';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { McTooltip } from '@ptsecurity/mosaic/tooltip';\nimport { noop, Subject } from 'rxjs';\n\nimport {\n    DEFAULT_TIME_FORMAT,\n    HOURS_PER_DAY,\n    HOURS_MINUTES_REGEXP,\n    HOURS_MINUTES_SECONDS_REGEXP,\n    HOURS_ONLY_REGEXP,\n    MINUTES_PER_HOUR,\n    SECONDS_PER_MINUTE,\n    TIMEFORMAT_PLACEHOLDERS,\n    TimeFormats,\n    TimeParts,\n    AM_PM_FORMAT_REGEXP\n} from './timepicker.constants';\n\n\n/** @docs-private */\nexport const MC_TIMEPICKER_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McTimepicker),\n    multi: true\n};\n\n/** @docs-private */\nexport const MC_TIMEPICKER_VALIDATORS: any = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McTimepicker),\n    multi: true\n};\n\n\nlet uniqueComponentIdSuffix: number = 0;\n\nconst shortFormatSize: number = 5;\nconst fullFormatSize: number = 8;\n\nconst validationTooltipShowDelay: number = 10;\nconst validationTooltipHideDelay: number = 3000;\n\n\n@Directive({\n    selector: 'input[mcTimepicker]',\n    exportAs: 'mcTimepicker',\n    host: {\n        class: 'mc-input mc-timepicker',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.required]': 'required',\n        '[attr.size]': 'getSize()',\n        '[attr.autocomplete]': '\"off\"',\n\n        '(blur)': 'onBlur()',\n        '(focus)': 'focusChanged(true)',\n\n        '(paste)': 'onPaste($event)',\n\n        '(keydown)': 'onKeyDown($event)'\n    },\n    providers: [\n        MC_TIMEPICKER_VALIDATORS,\n        MC_TIMEPICKER_VALUE_ACCESSOR,\n        { provide: McFormFieldControl, useExisting: McTimepicker }\n    ]\n})\nexport class McTimepicker<D> implements McFormFieldControl<D>, OnDestroy, ControlValueAccessor, Validator {\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    readonly errorState: boolean;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-timepicker';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n        }\n\n        this.stateChanges.next();\n    }\n\n    private _disabled: boolean;\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n    }\n\n    private _id: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    private _required: boolean;\n\n    @Input()\n    get format(): TimeFormats {\n        return this._format;\n    }\n\n    set format(formatValue: TimeFormats) {\n        this._format = Object\n            .keys(TimeFormats)\n            .map((timeFormatKey) => TimeFormats[timeFormatKey])\n            .indexOf(formatValue) > -1 ? formatValue : DEFAULT_TIME_FORMAT;\n\n        this.placeholder = TIMEFORMAT_PLACEHOLDERS[this._format];\n\n        if (this.value) {\n            this.updateView();\n        }\n    }\n\n    private _format: TimeFormats = DEFAULT_TIME_FORMAT;\n\n    @Input()\n    get min(): D | null {\n        return this._min;\n    }\n\n    set min(value: D | null) {\n        this._min = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.validatorOnChange();\n    }\n\n    private _min: D | null = null;\n\n    @Input()\n    get max(): D | null {\n        return this._max;\n    }\n\n    set max(value: D | null) {\n        this._max = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.validatorOnChange();\n    }\n\n    private _max: D | null = null;\n\n    @Input()\n    get value(): D | null {\n        return this._value;\n    }\n\n    set value(value: D | null) {\n        const newValue = this.dateAdapter.deserialize(value);\n\n        this.lastValueValid = !newValue || this.dateAdapter.isValid(newValue);\n\n        this._value = this.getValidDateOrNull(newValue);\n\n        this.updateView();\n    }\n\n    private _value: D | null;\n\n    @Input()\n    set mcValidationTooltip(tooltip: McTooltip) {\n        if (!tooltip) { return; }\n\n        tooltip.mcMouseEnterDelay = validationTooltipShowDelay;\n        tooltip.mcTrigger = 'manual';\n        tooltip.mcTooltipClass = 'mc-tooltip_warning';\n\n        tooltip.initElementRefListeners();\n\n        this.incorrectInput.subscribe(() => {\n            if (tooltip.isTooltipOpen) { return; }\n\n            tooltip.show();\n\n            setTimeout(() => tooltip.hide(), validationTooltipHideDelay);\n        });\n    }\n\n    @Output() incorrectInput = new EventEmitter<void>();\n\n    get hasSelection(): boolean {\n        return this.selectionStart !== this.selectionEnd;\n    }\n\n    get isFullFormat(): boolean {\n        return this.format === TimeFormats.HHmmss;\n    }\n\n    get isShortFormat(): boolean {\n        return this.format === TimeFormats.HHmm;\n    }\n\n    get viewValue(): string {\n        return this.elementRef.nativeElement.value;\n    }\n\n    get ngControl(): any {\n        return this.control;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this.viewValue && !this.isBadInput();\n    }\n\n    get selectionStart(): number | null {\n        return this.elementRef.nativeElement.selectionStart;\n    }\n\n    set selectionStart(value: number | null) {\n        this.elementRef.nativeElement.selectionStart = value;\n    }\n\n    get selectionEnd(): number | null {\n        return this.elementRef.nativeElement.selectionEnd;\n    }\n\n    set selectionEnd(value: number | null) {\n        this.elementRef.nativeElement.selectionEnd = value;\n    }\n\n    private readonly uid = `mc-timepicker-${uniqueComponentIdSuffix++}`;\n\n    private readonly validator: ValidatorFn | null;\n\n    private lastValueValid = false;\n\n    private control: AbstractControl;\n\n    private onChange: (value: any) => void;\n    private onTouched: () => void;\n\n    constructor(\n        private elementRef: ElementRef,\n        @Optional() private dateAdapter: DateAdapter<any>,\n        private renderer: Renderer2\n    ) {\n        if (!this.dateAdapter) {\n            throw Error(`McTimepicker: No provider found for DateAdapter. You must import one of the existing ` +\n                `modules at your application root or provide a custom implementation or use exists ones.`);\n        }\n\n        this.validator = Validators.compose([this.parseValidator, this.minValidator, this.maxValidator]);\n\n        this.onChange = noop;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n\n        this.placeholder = TIMEFORMAT_PLACEHOLDERS[DEFAULT_TIME_FORMAT];\n    }\n\n    ngOnDestroy(): void {\n        this.stateChanges.complete();\n    }\n\n    getSize(): number {\n        return this.isFullFormat ? fullFormatSize : shortFormatSize;\n    }\n\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    focusChanged(isFocused: boolean): void {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.onTouched();\n            this.stateChanges.next();\n        }\n    }\n\n    onBlur() {\n        this.lastValueValid = !!this.getDateFromTimeString(this.viewValue);\n        this.focusChanged(false);\n        this.control.updateValueAndValidity();\n    }\n\n    onPaste($event) {\n        $event.preventDefault();\n\n        const value = this.formatUserPaste($event.clipboardData.getData('text'));\n\n        const newTimeObj = this.getDateFromTimeString(value);\n\n        if (!newTimeObj) { return; }\n\n        this.setViewValue(this.getTimeStringFromDate(newTimeObj, this.format));\n\n        this.value = newTimeObj;\n        this.onChange(newTimeObj);\n        this.stateChanges.next();\n    }\n\n    onInput = () => {\n        const formattedValue = this.formatUserInput(this.viewValue);\n\n        const newTimeObj = this.getDateFromTimeString(formattedValue);\n        this.lastValueValid = !!newTimeObj;\n\n        if (!newTimeObj) {\n            this.control.updateValueAndValidity();\n\n            return;\n        }\n\n        const selectionStart = this.selectionStart;\n        const selectionEnd = this.selectionEnd;\n\n        this.setViewValue(this.getTimeStringFromDate(newTimeObj, this.format));\n\n        this.selectionStart = selectionStart;\n        this.selectionEnd = selectionEnd;\n\n        this.createSelectionOfTimeComponentInInput((selectionStart as number) + 1);\n\n        this.value = newTimeObj;\n        this.onChange(newTimeObj);\n        this.stateChanges.next();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n        // tslint:disable-next-line: deprecation\n        const keyCode = event.keyCode;\n\n        if (isLetterKey(event) && !event.ctrlKey && !event.metaKey) {\n            event.preventDefault();\n\n            this.incorrectInput.emit();\n        } else if (\n            (hasModifierKey(event) && (isVerticalMovement(keyCode) || isHorizontalMovement(keyCode))) ||\n            event.ctrlKey || event.metaKey ||\n            [DELETE, BACKSPACE].includes(keyCode)\n        ) {\n            noop();\n        } else if (keyCode === SPACE) {\n            this.spaceKeyHandler(event);\n        } else if ([HOME, PAGE_UP].includes(keyCode)) {\n            this.createSelectionOfTimeComponentInInput(0);\n        } else if ([END, PAGE_DOWN].includes(keyCode)) {\n            this.createSelectionOfTimeComponentInInput(this.viewValue.length);\n        } else if ([UP_ARROW, DOWN_ARROW].includes(keyCode)) {\n            event.preventDefault();\n\n            this.verticalArrowKeyHandler(keyCode);\n        } else if ([LEFT_ARROW, RIGHT_ARROW].includes(keyCode)) {\n            this.horizontalArrowKeyHandler(keyCode);\n        } else if (/^\\D$/.test(event.key)) {\n            event.preventDefault();\n\n            const newValue = this.getNewValue(event.key, this.selectionStart as number);\n            const formattedValue = this.replaceSymbols(newValue);\n\n            if (newValue !== formattedValue) {\n                this.setViewValue(formattedValue);\n\n                setTimeout(this.onInput);\n            } else {\n                this.incorrectInput.emit();\n            }\n        } else {\n            setTimeout(this.onInput);\n        }\n    }\n\n    validate(control: AbstractControl): ValidationErrors | null {\n        this.setControl(control);\n\n        return this.validator ? this.validator(control) : null;\n    }\n\n    registerOnValidatorChange(fn: () => void): void {\n        this.validatorOnChange = fn;\n    }\n\n    writeValue(value: D | null): void {\n        this.value = value;\n    }\n\n    registerOnChange(fn: (value: D) => void): void {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    private formatUserPaste(value: string) {\n        if (value.match(AM_PM_FORMAT_REGEXP)) { return value; }\n\n        const match: RegExpMatchArray | null = value.match(\n            /^(\\D+)?(?<hours>\\d+)?(\\D+)?(\\D+)?(?<minutes>\\d+)?(\\D+)?(\\D+)?(?<seconds>\\d+)?(\\D+)?$/\n        );\n\n        if (!match?.groups?.hours) {\n            this.setViewValue(value);\n\n            return value;\n        }\n\n        return this.replaceNumbers(Object.values(match.groups)\n            // tslint:disable-next-line:no-magic-numbers\n            .map((group) => (group || '').padStart(2, '0'))\n            .join(':')\n        );\n    }\n\n    private formatUserInput(value: string): string {\n        return this.replaceNumbers(this.replaceSymbols(value));\n    }\n\n    private replaceSymbols(value: string): string {\n        let formattedValue: string = value;\n\n        const match: RegExpMatchArray | null = value.match(/^(\\d\\d:){0,2}(?<number>[0-9])(?<symbol>\\W)(:\\d\\d){0,2}$/);\n\n        if (match?.groups) {\n            const { number, symbol } = match.groups;\n\n            formattedValue = value.replace(number + symbol, `0${number}`);\n        }\n\n        return formattedValue;\n    }\n\n    private replaceNumbers(value: string): string {\n        let formattedValue: string = value;\n\n        const match: RegExpMatchArray | null = value.match(/^(?<hours>\\d{0,4}):?(?<minutes>\\d{0,4}):?(?<seconds>\\d{0,4})$/);\n\n        if (match?.groups) {\n            const { hours, minutes, seconds } = match.groups;\n\n            if (hours.length && parseInt(hours) > HOURS_PER_DAY) {\n                formattedValue = formattedValue.replace(hours, HOURS_PER_DAY.toString());\n            }\n\n            if (minutes.length && parseInt(minutes) > MINUTES_PER_HOUR) {\n                formattedValue = formattedValue.replace(minutes, MINUTES_PER_HOUR.toString());\n            }\n\n            if (seconds.length && parseInt(seconds) > SECONDS_PER_MINUTE) {\n                formattedValue = formattedValue.replace(seconds, SECONDS_PER_MINUTE.toString());\n            }\n        }\n\n        return formattedValue;\n    }\n\n    /** Checks whether the input is invalid based on the native validation. */\n    private isBadInput(): boolean {\n        const validity = (<HTMLInputElement> this.elementRef.nativeElement).validity;\n\n        return validity && validity.badInput;\n    }\n\n    private spaceKeyHandler(event: KeyboardEvent) {\n        event.preventDefault();\n\n        if (this.selectionStart === this.selectionEnd) {\n            const value = this.getNewValue(event.key, this.selectionStart as number);\n            const formattedValue = this.replaceSymbols(value);\n\n            if (value !== formattedValue) {\n                this.setViewValue(formattedValue);\n\n                setTimeout(this.onInput);\n            }\n        } else if (this.selectionStart !== this.selectionEnd) {\n\n            let cursorPos = this.selectionStart as number;\n\n            const nextDividerPos: number = this.viewValue.indexOf(':', cursorPos);\n\n            cursorPos = nextDividerPos ? nextDividerPos + 1 : 0;\n\n            this.createSelectionOfTimeComponentInInput(cursorPos);\n        }\n    }\n\n    private getNewValue(key: string, position: number) {\n        return [this.viewValue.slice(0, position), key, this.viewValue.slice(position)].join('');\n    }\n\n    private verticalArrowKeyHandler(keyCode: number): void {\n        if (!this.value) { return; }\n\n        let changedTime;\n\n        const newEditParams = this.getTimeEditMetrics(this.selectionStart as number);\n\n        if (keyCode === UP_ARROW) {\n            changedTime = this.incrementTime(this.value, newEditParams.modifiedTimePart);\n        }\n\n        if (keyCode === DOWN_ARROW) {\n            changedTime = this.decrementTime(this.value, newEditParams.modifiedTimePart);\n        }\n\n        this.value = changedTime;\n\n        this.selectionStart = newEditParams.cursorStartPosition;\n        this.selectionEnd = newEditParams.cursorEndPosition;\n\n        this.onChange(changedTime);\n        this.stateChanges.next();\n    }\n\n    private horizontalArrowKeyHandler(keyCode: number): void {\n        if (!this.value) { return; }\n\n        let cursorPos = this.selectionStart as number;\n\n        if (keyCode === LEFT_ARROW) {\n            cursorPos = cursorPos === 0 ? this.viewValue.length : cursorPos - 1;\n        } else if (keyCode === RIGHT_ARROW) {\n            const nextDividerPos: number = this.viewValue.indexOf(':', cursorPos);\n\n            cursorPos = nextDividerPos ? nextDividerPos + 1 : 0;\n        }\n\n        this.createSelectionOfTimeComponentInInput(cursorPos);\n    }\n\n    private createSelectionOfTimeComponentInInput(cursorPos: number): void {\n        setTimeout(() => {\n            const newEditParams = this.getTimeEditMetrics(cursorPos);\n\n            this.selectionStart = newEditParams.cursorStartPosition;\n            this.selectionEnd = newEditParams.cursorEndPosition;\n        });\n    }\n\n    private incrementTime(dateVal: D, whatToIncrement: TimeParts = TimeParts.seconds): D {\n        let hours = this.dateAdapter.getHours(dateVal);\n        let minutes = this.dateAdapter.getMinutes(dateVal);\n        let seconds = this.dateAdapter.getSeconds(dateVal);\n\n        switch (whatToIncrement) {\n            case TimeParts.hours:\n                hours++;\n                break;\n            case TimeParts.minutes:\n                minutes++;\n                break;\n            case TimeParts.seconds:\n                seconds++;\n                break;\n            default:\n        }\n\n        if (seconds > SECONDS_PER_MINUTE) { seconds = 0; }\n\n        if (minutes > MINUTES_PER_HOUR) { minutes = 0; }\n\n        if (hours > HOURS_PER_DAY) { hours = 0; }\n\n        return this.dateAdapter.createDateTime(\n            this.dateAdapter.getYear(this.value),\n            this.dateAdapter.getMonth(this.value),\n            this.dateAdapter.getDate(this.value),\n            hours,\n            minutes,\n            seconds,\n            this.dateAdapter.getMilliseconds(this.value)\n        );\n    }\n\n    private decrementTime(dateVal: D, whatToDecrement: TimeParts = TimeParts.seconds): D {\n        let hours = this.dateAdapter.getHours(dateVal);\n        let minutes = this.dateAdapter.getMinutes(dateVal);\n        let seconds = this.dateAdapter.getSeconds(dateVal);\n\n        switch (whatToDecrement) {\n            case TimeParts.hours:\n                hours--;\n                break;\n            case TimeParts.minutes:\n                minutes--;\n                break;\n            case TimeParts.seconds:\n                seconds--;\n                break;\n            default:\n        }\n\n        if (seconds < 0) { seconds = SECONDS_PER_MINUTE; }\n\n        if (minutes < 0) { minutes = MINUTES_PER_HOUR; }\n\n        if (hours < 0) { hours = HOURS_PER_DAY; }\n\n        return this.dateAdapter.createDateTime(\n            this.dateAdapter.getYear(this.value),\n            this.dateAdapter.getMonth(this.value),\n            this.dateAdapter.getDate(this.value),\n            hours,\n            minutes,\n            seconds,\n            this.dateAdapter.getMilliseconds(this.value)\n        );\n    }\n\n    /**\n     * @description Get params for arrow-keys (up/down) time valie edit.\n     * @param cursorPosition Current cursor position in timeString\n     */\n    private getTimeEditMetrics(cursorPosition: number): {\n        modifiedTimePart: TimeParts;\n        cursorStartPosition: number;\n        cursorEndPosition: number;\n    } {\n        const timeString: string = this.viewValue;\n        let modifiedTimePart: TimeParts;\n        let cursorStartPosition: number;\n        let cursorEndPosition: number;\n\n        const hoursIndex = 0;\n        const minutesIndex = timeString.indexOf(':', hoursIndex + 1);\n        const secondsIndex = minutesIndex !== -1 ? timeString.indexOf(':', minutesIndex + 1) : -1;\n\n        if (secondsIndex !== -1 && cursorPosition > secondsIndex) {\n            modifiedTimePart = TimeParts.seconds;\n            cursorStartPosition = secondsIndex + 1;\n            cursorEndPosition = timeString.length;\n        } else if (minutesIndex !== -1 && cursorPosition > minutesIndex) {\n            modifiedTimePart = TimeParts.minutes;\n            cursorStartPosition = minutesIndex + 1;\n            cursorEndPosition = secondsIndex > -1 ? secondsIndex : timeString.length;\n        } else {\n            modifiedTimePart = TimeParts.hours;\n            cursorStartPosition = hoursIndex;\n            cursorEndPosition = minutesIndex !== -1 ? minutesIndex : timeString.length;\n        }\n\n        return { modifiedTimePart, cursorStartPosition, cursorEndPosition };\n    }\n\n    /**\n     * @description Create time string for displaying inside input element of UI\n     */\n    private getTimeStringFromDate(value: D | null, timeFormat: TimeFormats): string {\n        if (!value || !this.dateAdapter.isValid(value)) { return ''; }\n\n        return this.dateAdapter.format(value, timeFormat);\n    }\n\n    private getDateFromTimeString(timeString: string): D | null {\n        if (!timeString) { return null; }\n\n        const hoursAndMinutesAndSeconds = timeString.match(HOURS_MINUTES_SECONDS_REGEXP);\n        const hoursAndMinutes = timeString.match(HOURS_MINUTES_REGEXP);\n        const hoursOnly = timeString.match(HOURS_ONLY_REGEXP);\n        const hoursAndMinutesInAmPm = timeString.match(AM_PM_FORMAT_REGEXP);\n\n        let hours: number = 0;\n        let minutes: number = 0;\n        let seconds: number = 0;\n\n        // tslint:disable:no-magic-numbers\n        if (hoursAndMinutesInAmPm) {\n            hours = Number(hoursAndMinutesInAmPm[1]);\n            minutes = Number(hoursAndMinutesInAmPm[2]);\n\n            if (/[p]/i.test(hoursAndMinutesInAmPm[3]) || (/[a]/i.test(hoursAndMinutesInAmPm[3]) && hours === 12)) {\n                hours += 12;\n            }\n        } else if (hoursAndMinutesAndSeconds) {\n            hours = Number(hoursAndMinutesAndSeconds[1]);\n            minutes = Number(hoursAndMinutesAndSeconds[2]);\n            seconds = Number(hoursAndMinutesAndSeconds[3]);\n        } else if (hoursAndMinutes) {\n            hours = Number(hoursAndMinutes[1]);\n            minutes = Number(hoursAndMinutes[2]);\n        } else if (hoursOnly) {\n            hours = Number(hoursOnly[1]);\n        } else {\n            return null;\n        }\n        // tslint:enable\n\n        const resultDate = this.dateAdapter.createDateTime(\n            this.dateAdapter.getYear(this.value),\n            this.dateAdapter.getMonth(this.value),\n            this.dateAdapter.getDate(this.value),\n            hours,\n            minutes,\n            seconds,\n            this.dateAdapter.getMilliseconds(this.value)\n        );\n\n        return this.getValidDateOrNull(resultDate);\n    }\n\n    private parseValidator: ValidatorFn = (): ValidationErrors | null => {\n        return this.focused ||\n            this.empty ||\n            this.lastValueValid ? null : { mcTimepickerParse: { text: this.viewValue } };\n    }\n\n    private minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n        const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));\n\n        return (!this.min || !controlValue || this.compareTime(this.min, controlValue) <= 0) ?\n            null :\n            { mcTimepickerLowerThenMin: { min: this.min, actual: controlValue } };\n    }\n\n    private maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n        const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));\n\n        return (!this.max || !controlValue || this.compareTime(this.max, controlValue) >= 0) ?\n            null :\n            { mcTimepickerHigherThenMax: { max: this.max, actual: controlValue } };\n    }\n\n    private compareTime(first: D, second: D): number {\n        const result = this.dateAdapter.getHours(first) - this.dateAdapter.getHours(second) ||\n            this.dateAdapter.getMinutes(first) - this.dateAdapter.getMinutes(second);\n\n        if (TimeFormats.HHmm === this.format) {\n            return result;\n        } else if (TimeFormats.HHmmss === this.format) {\n            return result || this.dateAdapter.getSeconds(first) - this.dateAdapter.getSeconds(second);\n        } else {\n            throw Error(`Unknown format: ${this.format}`);\n        }\n    }\n\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    private setViewValue(value: string) {\n        this.renderer.setProperty(this.elementRef.nativeElement, 'value', value);\n    }\n\n    private updateView() {\n        const formattedValue = this.getTimeStringFromDate(this.value, this.format);\n\n        this.setViewValue(formattedValue);\n    }\n\n    private setControl(control: AbstractControl) {\n        if (!this.control) {\n            this.control = control;\n        }\n    }\n\n    // tslint:disable-next-line:no-empty\n    private validatorOnChange = () => {};\n}\n","import { A11yModule } from '@angular/cdk/a11y';\nimport { PlatformModule } from '@angular/cdk/platform';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { McTimepicker } from './timepicker.directive';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        FormsModule\n    ],\n    declarations: [McTimepicker],\n    exports: [McTimepicker]\n})\nexport class McTimepickerModule {}\n"]}