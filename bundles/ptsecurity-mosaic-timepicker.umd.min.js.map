{"version":3,"sources":["../../../packages/mosaic/timepicker/timepicker.constants.ts","../../../packages/mosaic/timepicker/timepicker.ts","../../../packages/mosaic/timepicker/timepicker.module.ts"],"names":["TimeParts","hours","minutes","seconds","TimeFormats","HHmmss","HHmm","TIMEFORMAT_PLACEHOLDERS","_a","DEFAULT_TIME_FORMAT","HOURS_MINUTES_SECONDS_REGEXP","HOURS_MINUTES_REGEXP","HOURS_ONLY_REGEXP","AM_PM_FORMAT_REGEXP","MC_TIMEPICKER_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","McTimepicker","multi","MC_TIMEPICKER_VALIDATORS","NG_VALIDATORS","uniqueComponentIdSuffix","elementRef","dateAdapter","renderer","_this","this","stateChanges","Subject","focused","controlType","lastValueValid","_format","_min","_max","uid","parseValidator","empty","mcTimepickerParse","text","viewValue","minValidator","control","controlValue","getValidDateOrNull","deserialize","value","min","compareTime","mcTimepickerLowerThenMin","actual","maxValidator","max","mcTimepickerHigherThenMax","validatorOnChange","Error","validator","Validators","compose","onChange","noop","id","placeholder","Object","defineProperty","prototype","_disabled","coerceBooleanProperty","next","_id","_required","formatValue","keys","map","timeFormatKey","indexOf","updateView","_value","newValue","isValid","nativeElement","isBadInput","selectionStart","selectionEnd","ngOnDestroy","complete","focus","focusChanged","isFocused","onTouched","onBlur","getDateFromTimeString","updateValueAndValidity","onPaste","$event","newTimeObj","clipboardData","getData","preventDefault","setProperty","getTimeStringFromDate","format","onInput","createSelectionOfTimeComponentInInput","onContainerClick","onKeyDown","event","keyCode","hasModifierKey","UP_ARROW","DOWN_ARROW","includes","verticalArrowKeyHandler","LEFT_ARROW","RIGHT_ARROW","horizontalArrowKeyHandler","setTimeout","validate","setControl","registerOnValidatorChange","fn","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","disabled","validity","badInput","changedTime","newEditParams","getTimeEditMetrics","incrementTime","modifiedTimePart","decrementTime","cursorStartPosition","cursorEndPosition","cursorPos","length","nextDividerPos","dateVal","whatToIncrement","getHours","getMinutes","getSeconds","createDateTime","getYear","getMonth","getDate","getMilliseconds","whatToDecrement","cursorPosition","timeString","minutesIndex","hoursIndex","secondsIndex","timeFormat","hoursAndMinutesAndSeconds","match","hoursAndMinutes","hoursOnly","hoursAndMinutesInAmPm","Number","test","resultDate","first","second","result","obj","isDateInstance","formattedValue","Directive","args","selector","exportAs","host","class","[attr.id]","[attr.placeholder]","[attr.disabled]","[attr.required]","(blur)","(focus)","(paste)","(keydown)","providers","McFormFieldControl","ElementRef","DateAdapter","decorators","type","Optional","Renderer2","Input","NgModule","imports","CommonModule","A11yModule","PlatformModule","FormsModule","declarations","exports"],"mappings":"8hCACYA,EAAS,CACjBC,MAAK,EACLC,QAAO,EACPC,QAAO,wEAGCC,EAAW,CACnBC,OAAM,WACNC,KAAI,SAGKC,IAAuBC,EAAA,IAC/BJ,EAAYC,QAAS,WACtBG,EAACJ,EAAYE,MAAO,WAGXG,EAAmCL,EAAYE,KAE/CI,EAA+B,qDAC/BC,EAAuB,uCACvBC,EAAoB,0BACpBC,EAAsB,4CCyBtBC,EAAoC,CAC7CC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,YAAU,WAAO,OAAAC,KAC9BC,OAAO,GAIEC,EAAgC,CACzCN,QAASO,EAAAA,cACTL,YAAaC,EAAAA,YAAU,WAAO,OAAAC,KAC9BC,OAAO,GAIPG,EAAkC,eA2MlC,SAAAJ,EACqBK,EACGC,EACHC,GAHrB,IAAAC,EAAAC,KAKI,GAJiBA,KAAAJ,WAAAA,EACGI,KAAAH,YAAAA,EACHG,KAAAF,SAAAA,EA7KZE,KAAAC,aAA8B,IAAIC,EAAAA,QAQ3CF,KAAAG,SAAmB,EAMnBH,KAAAI,YAAsB,gBAOdJ,KAAAK,gBAAiB,EAmEjBL,KAAAM,QAAuBzB,EAYvBmB,KAAAO,KAAiB,KAYjBP,KAAAQ,KAAiB,KAmDRR,KAAAS,IAAM,iBAAiBd,IA+WhCK,KAAAU,eAAc,WAClB,OAAOX,EAAKY,OAASZ,EAAKM,eAAiB,KAAO,CAAEO,kBAAmB,CAAEC,KAAMd,EAAKe,aAGhFd,KAAAe,aAAY,SAAiBC,OAC3BC,EAAelB,EAAKmB,mBAAmBnB,EAAKF,YAAYsB,YAAYH,EAAQI,QAElF,OAASrB,EAAKsB,MAAQJ,GAAgBlB,EAAKuB,YAAYvB,EAAKsB,IAAKJ,IAAiB,EAC9E,KACA,CAAEM,yBAA0B,CAAEF,IAAKtB,EAAKsB,IAAKG,OAAQP,KAGrDjB,KAAAyB,aAAY,SAAiBT,OAC3BC,EAAelB,EAAKmB,mBAAmBnB,EAAKF,YAAYsB,YAAYH,EAAQI,QAElF,OAASrB,EAAK2B,MAAQT,GAAgBlB,EAAKuB,YAAYvB,EAAK2B,IAAKT,IAAiB,EAC9E,KACA,CAAEU,0BAA2B,CAAED,IAAK3B,EAAK2B,IAAKF,OAAQP,KAiCtDjB,KAAA4B,kBAAiB,cArZhB5B,KAAKH,YACN,MAAMgC,MAAM,gLAIhB7B,KAAK8B,UAAYC,EAAAA,WAAWC,QAAQ,CAAChC,KAAKU,eAAgBV,KAAKe,aAAcf,KAAKyB,eAElFzB,KAAKiC,SAAWC,EAAAA,KAGhBlC,KAAKmC,GAAKnC,KAAKmC,GAEfnC,KAAKoC,YAAczD,EAAwBE,UAlK/CwD,OAAAC,eACI/C,EAAAgD,UAAA,WAAQ,KADZ,WAEI,OAAOvC,KAAKwC,eAGhB,SAAapB,GACTpB,KAAKwC,UAAYC,EAAAA,sBAAsBrB,GAInCpB,KAAKG,UACLH,KAAKG,SAAU,GAGnBH,KAAKC,aAAayC,wCAKtBL,OAAAC,eACI/C,EAAAgD,UAAA,KAAE,KADN,WAEI,OAAOvC,KAAK2C,SAGhB,SAAOvB,GACHpB,KAAK2C,IAAMvB,GAASpB,KAAKS,qCAS7B4B,OAAAC,eACI/C,EAAAgD,UAAA,WAAQ,KADZ,WAEI,OAAOvC,KAAK4C,eAGhB,SAAaxB,GACTpB,KAAK4C,UAAYH,EAAAA,sBAAsBrB,oCAK3CiB,OAAAC,eACI/C,EAAAgD,UAAA,SAAM,KADV,WAEI,OAAOvC,KAAKM,aAGhB,SAAWuC,GACP7C,KAAKM,QAAU+B,OACVS,KAAKtE,GACLuE,KAAG,SAAEC,GAAkB,OAAAxE,EAAYwE,MACnCC,QAAQJ,IAAgB,EAAIA,EAAchE,EAE/CmB,KAAKoC,YAAczD,EAAwBqB,KAAKM,SAE5CN,KAAKoB,OACLpB,KAAKkD,8CAMbb,OAAAC,eACI/C,EAAAgD,UAAA,MAAG,KADP,WAEI,OAAOvC,KAAKO,UAGhB,SAAQa,GACJpB,KAAKO,KAAOP,KAAKkB,mBAAmBlB,KAAKH,YAAYsB,YAAYC,IACjEpB,KAAK4B,qDAKTS,OAAAC,eACI/C,EAAAgD,UAAA,MAAG,KADP,WAEI,OAAOvC,KAAKQ,UAGhB,SAAQY,GACJpB,KAAKQ,KAAOR,KAAKkB,mBAAmBlB,KAAKH,YAAYsB,YAAYC,IACjEpB,KAAK4B,qDAKTS,OAAAC,eACI/C,EAAAgD,UAAA,QAAK,KADT,WAEI,OAAOvC,KAAKmD,YAGhB,SAAU/B,OACAgC,EAAWpD,KAAKH,YAAYsB,YAAYC,GAE9CpB,KAAKK,gBAAkB+C,GAAYpD,KAAKH,YAAYwD,QAAQD,GAE5DpD,KAAKmD,OAASnD,KAAKkB,mBAAmBkC,GAEtCpD,KAAKkD,8CAKTb,OAAAC,eAAI/C,EAAAgD,UAAA,YAAS,KAAb,WACI,OAAOvC,KAAKJ,WAAW0D,cAAclC,uCAGzCiB,OAAAC,eAAI/C,EAAAgD,UAAA,YAAS,KAAb,WACI,OAAOvC,KAAKgB,yCAOhBqB,OAAAC,eAAI/C,EAAAgD,UAAA,QAAK,KAAT,WACI,OAAQvC,KAAKc,YAAcd,KAAKuD,8CAGpClB,OAAAC,eAAI/C,EAAAgD,UAAA,iBAAc,KAAlB,WACI,OAAOvC,KAAKJ,WAAW0D,cAAcE,oBAGzC,SAAmBpC,GACfpB,KAAKJ,WAAW0D,cAAcE,eAAiBpC,mCAGnDiB,OAAAC,eAAI/C,EAAAgD,UAAA,eAAY,KAAhB,WACI,OAAOvC,KAAKJ,WAAW0D,cAAcG,kBAGzC,SAAiBrC,GACbpB,KAAKJ,WAAW0D,cAAcG,aAAerC,mCA8BjD7B,EAAAgD,UAAAmB,YAAA,WACI1D,KAAKC,aAAa0D,YAGtBpE,EAAAgD,UAAAqB,MAAA,WACI5D,KAAKJ,WAAW0D,cAAcM,SAGlCrE,EAAAgD,UAAAsB,aAAA,SAAaC,GACLA,IAAc9D,KAAKG,UACnBH,KAAKG,QAAU2D,EACf9D,KAAK+D,YACL/D,KAAKC,aAAayC,SAI1BnD,EAAAgD,UAAAyB,OAAA,WACIhE,KAAKK,iBAAmBL,KAAKiE,sBAAsBjE,KAAKc,WACxDd,KAAKgB,QAAQkD,yBACblE,KAAK6D,cAAa,IAGtBtE,EAAAgD,UAAA4B,QAAA,SAAQC,OACEC,EAAarE,KAAKiE,sBAAsBG,EAAOE,cAAcC,QAAQ,SAEtEF,IAELD,EAAOI,iBAEPxE,KAAKF,SAAS2E,YACVzE,KAAKJ,WAAW0D,cAChB,QACAtD,KAAK0E,sBAAsBL,EAAYrE,KAAK2E,SAGhD3E,KAAKoB,MAAQiD,EACbrE,KAAKiC,SAASoC,GACdrE,KAAKC,aAAayC,SAGtBnD,EAAAgD,UAAAqC,QAAA,eACUP,EAAarE,KAAKiE,sBAAsBjE,KAAKc,WAGnD,GAFAd,KAAKK,iBAAmBgE,EAEnBA,EAAL,KAMMb,EAAiBxD,KAAKwD,eACtBC,EAAezD,KAAKyD,aAE1BzD,KAAKF,SAAS2E,YACVzE,KAAKJ,WAAW0D,cAChB,QACAtD,KAAK0E,sBAAsBL,EAAYrE,KAAK2E,SAGhD3E,KAAKwD,eAAiBA,EACtBxD,KAAKyD,aAAeA,EAEpBzD,KAAK6E,sCAAsC,EAA6B,GAExE7E,KAAKiC,SAASoC,GACdrE,KAAKC,aAAayC,YApBd1C,KAAKgB,QAAQkD,0BA2BrB3E,EAAAgD,UAAAuC,iBAAA,WACI9E,KAAK4D,SAGTrE,EAAAgD,UAAAwC,UAAA,SAAUC,GAAV,IAAAjF,EAAAC,KAEUiF,EAAUD,EAAMC,QAEtB,IAAIC,EAAAA,eAAeF,GAEZ,MAAI,CAACG,EAAAA,SAAUC,EAAAA,YAAYC,SAASJ,IACvCD,EAAMR,sBAENxE,KAAKsF,wBAAwBL,SAGtB,CAACM,EAAAA,WAAYC,EAAAA,aAAaH,SAASJ,GAC1CjF,KAAKyF,0BAA0BR,GAKnCS,YAAU,WAAO,OAAA3F,EAAK6E,eAG1BrF,EAAAgD,UAAAoD,SAAA,SAAS3E,GAGL,OAFAhB,KAAK4F,WAAW5E,GAEThB,KAAK8B,UAAY9B,KAAK8B,UAAUd,GAAW,MAGtDzB,EAAAgD,UAAAsD,0BAAA,SAA0BC,GACtB9F,KAAK4B,kBAAoBkE,GAG7BvG,EAAAgD,UAAAwD,WAAA,SAAW3E,GACPpB,KAAKoB,MAAQA,GAGjB7B,EAAAgD,UAAAyD,iBAAA,SAAiBF,GACb9F,KAAKiC,SAAW6D,GAGpBvG,EAAAgD,UAAA0D,kBAAA,SAAkBH,GACd9F,KAAK+D,UAAY+B,GAGrBvG,EAAAgD,UAAA2D,iBAAA,SAAiBC,GACbnG,KAAKoG,SAAWD,GAIZ5G,EAAAgD,UAAAgB,WAAA,eACE8C,EAA+BrG,KAAKJ,WAAwB,cAAEyG,SAEpE,OAAOA,GAAYA,EAASC,UAGxB/G,EAAAgD,UAAA+C,wBAAA,SAAwBL,GAC5B,GAAKjF,KAAKoB,MAAV,KAEImF,EAEEC,EAAgBxG,KAAKyG,mBAAmBzG,KAAmB,gBAE7DiF,IAAYE,EAAAA,WACZoB,EAAcvG,KAAK0G,cAAc1G,KAAKoB,MAAOoF,EAAcG,mBAG3D1B,IAAYG,EAAAA,aACZmB,EAAcvG,KAAK4G,cAAc5G,KAAKoB,MAAOoF,EAAcG,mBAG/D3G,KAAKoB,MAAQmF,EAEbvG,KAAKwD,eAAiBgD,EAAcK,oBACpC7G,KAAKyD,aAAe+C,EAAcM,kBAElC9G,KAAKiC,SAASsE,GACdvG,KAAKC,aAAayC,SAGdnD,EAAAgD,UAAAkD,0BAAA,SAA0BR,GAC9B,GAAKjF,KAAKoB,MAAV,KAEI2F,EAAY/G,KAAmB,eAEnC,GAAIiF,IAAYM,EAAAA,WACZwB,EAA0B,IAAdA,EAAkB/G,KAAKc,UAAUkG,OAASD,EAAY,OAC/D,GAAI9B,IAAYO,EAAAA,YAAa,KAC1ByB,EAAyBjH,KAAKc,UAAUmC,QAAQ,IAAK8D,GAE3DA,EAAYE,EAAiBA,EAAiB,EAAI,EAGtDjH,KAAK6E,sCAAsCkC,KAGvCxH,EAAAgD,UAAAsC,sCAAA,SAAsCkC,GAAtC,IAAAhH,EAAAC,KACJ0F,YAAU,eACAc,EAAgBzG,EAAK0G,mBAAmBM,GAE9ChH,EAAKyD,eAAiBgD,EAAcK,oBACpC9G,EAAK0D,aAAe+C,EAAcM,sBAIlCvH,EAAAgD,UAAAmE,cAAA,SAAcQ,EAAYC,QAAA,IAAAA,IAAAA,EAA6B/I,EAAUG,aACjEF,EAAQ2B,KAAKH,YAAYuH,SAASF,GAClC5I,EAAU0B,KAAKH,YAAYwH,WAAWH,GACtC3I,EAAUyB,KAAKH,YAAYyH,WAAWJ,GAE1C,OAAQC,GACJ,KAAK/I,EAAUC,MACXA,IACA,MACJ,KAAKD,EAAUE,QACXA,IACA,MACJ,KAAKF,EAAUG,QACXA,IAWR,OANIA,EDzc8B,KCycEA,EAAU,GAE1CD,ED1c4B,KC0cEA,EAAU,GAExCD,ED3cyB,KC2cAA,EAAQ,GAE9B2B,KAAKH,YAAY0H,eACpBvH,KAAKH,YAAY2H,QAAQxH,KAAKoB,OAC9BpB,KAAKH,YAAY4H,SAASzH,KAAKoB,OAC/BpB,KAAKH,YAAY6H,QAAQ1H,KAAKoB,OAC9B/C,EACAC,EACAC,EACAyB,KAAKH,YAAY8H,gBAAgB3H,KAAKoB,SAItC7B,EAAAgD,UAAAqE,cAAA,SAAcM,EAAYU,QAAA,IAAAA,IAAAA,EAA6BxJ,EAAUG,aACjEF,EAAQ2B,KAAKH,YAAYuH,SAASF,GAClC5I,EAAU0B,KAAKH,YAAYwH,WAAWH,GACtC3I,EAAUyB,KAAKH,YAAYyH,WAAWJ,GAE1C,OAAQU,GACJ,KAAKxJ,EAAUC,MACXA,IACA,MACJ,KAAKD,EAAUE,QACXA,IACA,MACJ,KAAKF,EAAUG,QACXA,IAWR,OANIA,EAAU,IAAKA,ED5ee,IC8e9BD,EAAU,IAAKA,ED7ea,IC+e5BD,EAAQ,IAAKA,ED9eY,ICgftB2B,KAAKH,YAAY0H,eACpBvH,KAAKH,YAAY2H,QAAQxH,KAAKoB,OAC9BpB,KAAKH,YAAY4H,SAASzH,KAAKoB,OAC/BpB,KAAKH,YAAY6H,QAAQ1H,KAAKoB,OAC9B/C,EACAC,EACAC,EACAyB,KAAKH,YAAY8H,gBAAgB3H,KAAKoB,SAQtC7B,EAAAgD,UAAAkE,mBAAA,SAAmBoB,OAMnBlB,EACAE,EACAC,EAHEgB,EAAqB9H,KAAKc,UAM1BiH,EAAeD,EAAW7E,QAAQ,IAAK+E,GACvCC,GAAiC,IAAlBF,EAAsBD,EAAW7E,QAAQ,IAAK8E,EAAe,IAAM,EAgBxF,OAdsB,IAAlBE,GAAuBJ,EAAiBI,GACxCtB,EAAmBvI,EAAUG,QAC7BsI,EAAsBoB,EAAe,EACrCnB,EAAoBgB,EAAWd,SACN,IAAlBe,GAAuBF,EAAiBE,GAC/CpB,EAAmBvI,EAAUE,QAC7BuI,EAAsBkB,EAAe,EACrCjB,EAAoBmB,GAAgB,EAAIA,EAAeH,EAAWd,SAElEL,EAAmBvI,EAAUC,MAC7BwI,EAde,EAefC,GAAsC,IAAlBiB,EAAsBA,EAAeD,EAAWd,QAGjE,CAAEL,iBAAgBA,EAAEE,oBAAmBA,EAAEC,kBAAiBA,IAM7DvH,EAAAgD,UAAAmC,sBAAA,SAAsBtD,EAAiB8G,GAC3C,OAAK9G,GAAUpB,KAAKH,YAAYwD,QAAQjC,GAEjCpB,KAAKH,YAAY8E,OAAOvD,EAAO8G,GAFmB,IAKrD3I,EAAAgD,UAAA0B,sBAAA,SAAsB6D,GAC1B,IAAKA,EAAc,OAAO,SAEpBK,EAA4BL,EAAWM,MAAMtJ,GAC7CuJ,EAAkBP,EAAWM,MAAMrJ,GACnCuJ,EAAYR,EAAWM,MAAMpJ,GAC7BuJ,EAAwBT,EAAWM,MAAMnJ,GAE3CZ,EAAgB,EAChBC,EAAkB,EAClBC,EAAkB,EAGtB,GAAIgK,EACAlK,EAAQmK,OAAOD,EAAsB,IACrCjK,EAAUkK,OAAOD,EAAsB,KAEnC,OAAOE,KAAKF,EAAsB,KAAQ,OAAOE,KAAKF,EAAsB,KAAiB,KAAVlK,KACnFA,GAAS,SAEV,GAAI8J,EACP9J,EAAQmK,OAAOL,EAA0B,IACzC7J,EAAUkK,OAAOL,EAA0B,IAC3C5J,EAAUiK,OAAOL,EAA0B,SACxC,GAAIE,EACPhK,EAAQmK,OAAOH,EAAgB,IAC/B/J,EAAUkK,OAAOH,EAAgB,QAC9B,CAAA,IAAIC,EAGP,OAAO,KAFPjK,EAAQmK,OAAOF,EAAU,QAMvBI,EAAa1I,KAAKH,YAAY0H,eAChCvH,KAAKH,YAAY2H,QAAQxH,KAAKoB,OAC9BpB,KAAKH,YAAY4H,SAASzH,KAAKoB,OAC/BpB,KAAKH,YAAY6H,QAAQ1H,KAAKoB,OAC9B/C,EACAC,EACAC,EACAyB,KAAKH,YAAY8H,gBAAgB3H,KAAKoB,QAG1C,OAAOpB,KAAKkB,mBAAmBwH,IAuB3BnJ,EAAAgD,UAAAjB,YAAA,SAAYqH,EAAUC,OACpBC,EAAS7I,KAAKH,YAAYuH,SAASuB,GAAS3I,KAAKH,YAAYuH,SAASwB,IACxE5I,KAAKH,YAAYwH,WAAWsB,GAAS3I,KAAKH,YAAYwH,WAAWuB,GAErE,GAAIpK,EAAYE,OAASsB,KAAK2E,OAC1B,OAAOkE,EACJ,GAAIrK,EAAYC,SAAWuB,KAAK2E,OACnC,OAAOkE,GAAU7I,KAAKH,YAAYyH,WAAWqB,GAAS3I,KAAKH,YAAYyH,WAAWsB,GAElF,MAAM/G,MAAM,mBAAmB7B,KAAK2E,SAIpCpF,EAAAgD,UAAArB,mBAAA,SAAmB4H,GACvB,OAAQ9I,KAAKH,YAAYkJ,eAAeD,IAAQ9I,KAAKH,YAAYwD,QAAQyF,GAAQA,EAAM,MAGnFvJ,EAAAgD,UAAAW,WAAA,eACE8F,EAAiBhJ,KAAK0E,sBAAsB1E,KAAKoB,MAAOpB,KAAK2E,QAEnE3E,KAAKF,SAAS2E,YAAYzE,KAAKJ,WAAW0D,cAAe,QAAS0F,IAG9DzJ,EAAAgD,UAAAqD,WAAA,SAAW5E,GACVhB,KAAKgB,UACNhB,KAAKgB,QAAUA,6BA7lB1BiI,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,sBACVC,SAAU,oBACVC,KAAM,CACFC,MAAO,yBAGPC,YAAa,KACbC,qBAAsB,cACtBC,kBAAmB,mBACnBC,kBAAmB,WAEnBC,SAAU,WACVC,UAAW,qBAEXC,UAAW,kBAEXC,YAAa,qBAEjBC,UAAW,CACPtK,EACAP,EACA,CAAEC,QAAS6K,EAAAA,mBAAoB3K,YAAaE,iDAnFhD0K,EAAAA,kBAiBKC,EAAAA,YAAWC,WAAA,CAAA,CAAAC,KAsPXC,EAAAA,kBAlQLC,EAAAA,kDA0GCC,EAAAA,wBAKAA,EAAAA,kBAmBAA,EAAAA,wBAeAA,EAAAA,sBAWAA,EAAAA,mBAoBAA,EAAAA,mBAYAA,EAAAA,qBAYAA,EAAAA,eC7LL,iCAVCC,EAAAA,SAAQtB,KAAA,CAAC,CACNuB,QAAS,CACLC,EAAAA,aACAC,EAAAA,WACAC,EAAAA,eACAC,EAAAA,aAEJC,aAAc,CAACvL,GACfwL,QAAS,CAACxL,uJFSuB,oFADG,gEADE","sourcesContent":["// tslint:disable:naming-convention\nexport enum TimeParts {\n    hours,\n    minutes,\n    seconds\n}\n\nexport enum TimeFormats {\n    HHmmss = 'HH:mm:ss',\n    HHmm = 'HH:mm'\n}\n\nexport const TIMEFORMAT_PLACEHOLDERS: { [timeFormat: string]: string } = {\n    [TimeFormats.HHmmss]: '  :  :  ',\n    [TimeFormats.HHmm]: '  :  '\n};\n\nexport const DEFAULT_TIME_FORMAT: TimeFormats = TimeFormats.HHmm;\n\nexport const HOURS_MINUTES_SECONDS_REGEXP = /^([0-1][0-9]|2[0-3]):?([0-5][0-9]):?([0-5][0-9])?$/;\nexport const HOURS_MINUTES_REGEXP = /^([0-1][0-9]|2[0-3]):?([0-5][0-9])?$/;\nexport const HOURS_ONLY_REGEXP = /^([0-1][0-9]|2[0-3]):?$/;\nexport const AM_PM_FORMAT_REGEXP = /^([0-1]?[0-9]):([0-5]?[0-9]) ([ap][m]?$)/i;\n\nexport const SECONDS_PER_MINUTE: number = 59;\nexport const MINUTES_PER_HOUR: number = 59;\nexport const HOURS_PER_DAY: number = 23;\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    Directive,\n    ElementRef,\n    forwardRef,\n    Input,\n    OnDestroy,\n    Optional,\n    Renderer2\n} from '@angular/core';\nimport {\n    AbstractControl,\n    ControlValueAccessor,\n    NG_VALIDATORS,\n    NG_VALUE_ACCESSOR,\n    ValidationErrors,\n    Validator,\n    ValidatorFn,\n    Validators\n} from '@angular/forms';\nimport { DateAdapter } from '@ptsecurity/cdk/datetime';\nimport {\n    DOWN_ARROW,\n    hasModifierKey,\n    LEFT_ARROW,\n    RIGHT_ARROW,\n    UP_ARROW\n} from '@ptsecurity/cdk/keycodes';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { noop, Subject } from 'rxjs';\n\nimport {\n    DEFAULT_TIME_FORMAT,\n    HOURS_PER_DAY,\n    HOURS_MINUTES_REGEXP,\n    HOURS_MINUTES_SECONDS_REGEXP,\n    HOURS_ONLY_REGEXP,\n    MINUTES_PER_HOUR,\n    SECONDS_PER_MINUTE,\n    TIMEFORMAT_PLACEHOLDERS,\n    TimeFormats,\n    TimeParts,\n    AM_PM_FORMAT_REGEXP\n} from './timepicker.constants';\n\n\n/** @docs-private */\nexport const MC_TIMEPICKER_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McTimepicker),\n    multi: true\n};\n\n/** @docs-private */\nexport const MC_TIMEPICKER_VALIDATORS: any = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McTimepicker),\n    multi: true\n};\n\n\nlet uniqueComponentIdSuffix: number = 0;\n\n\n@Directive({\n    selector: 'input[mcTimepicker]',\n    exportAs: 'mcTimepickerInput',\n    host: {\n        class: 'mc-timepicker mc-input',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.required]': 'required',\n\n        '(blur)': 'onBlur()',\n        '(focus)': 'focusChanged(true)',\n\n        '(paste)': 'onPaste($event)',\n\n        '(keydown)': 'onKeyDown($event)'\n    },\n    providers: [\n        MC_TIMEPICKER_VALIDATORS,\n        MC_TIMEPICKER_VALUE_ACCESSOR,\n        { provide: McFormFieldControl, useExisting: McTimepicker }\n    ]\n})\nexport class McTimepicker<D> implements McFormFieldControl<D>, OnDestroy, ControlValueAccessor, Validator {\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    readonly errorState: boolean;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-timepicker';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n    private lastValueValid = false;\n\n    private control: AbstractControl;\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n        }\n\n        this.stateChanges.next();\n    }\n\n    private _disabled: boolean;\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n    }\n\n    private _id: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    private _required: boolean;\n\n    @Input()\n    get format(): TimeFormats {\n        return this._format;\n    }\n\n    set format(formatValue: TimeFormats) {\n        this._format = Object\n            .keys(TimeFormats)\n            .map((timeFormatKey) => TimeFormats[timeFormatKey])\n            .indexOf(formatValue) > -1 ? formatValue : DEFAULT_TIME_FORMAT;\n\n        this.placeholder = TIMEFORMAT_PLACEHOLDERS[this._format];\n\n        if (this.value) {\n            this.updateView();\n        }\n    }\n\n    private _format: TimeFormats = DEFAULT_TIME_FORMAT;\n\n    @Input()\n    get min(): D | null {\n        return this._min;\n    }\n\n    set min(value: D | null) {\n        this._min = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.validatorOnChange();\n    }\n\n    private _min: D | null = null;\n\n    @Input()\n    get max(): D | null {\n        return this._max;\n    }\n\n    set max(value: D | null) {\n        this._max = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.validatorOnChange();\n    }\n\n    private _max: D | null = null;\n\n    @Input()\n    get value(): D | null {\n        return this._value;\n    }\n\n    set value(value: D | null) {\n        const newValue = this.dateAdapter.deserialize(value);\n\n        this.lastValueValid = !newValue || this.dateAdapter.isValid(newValue);\n\n        this._value = this.getValidDateOrNull(newValue);\n\n        this.updateView();\n    }\n\n    private _value: D | null;\n\n    get viewValue(): string {\n        return this.elementRef.nativeElement.value;\n    }\n\n    get ngControl(): any {\n        return this.control;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this.viewValue && !this.isBadInput();\n    }\n\n    get selectionStart(): number | null {\n        return this.elementRef.nativeElement.selectionStart;\n    }\n\n    set selectionStart(value: number | null) {\n        this.elementRef.nativeElement.selectionStart = value;\n    }\n\n    get selectionEnd(): number | null {\n        return this.elementRef.nativeElement.selectionEnd;\n    }\n\n    set selectionEnd(value: number | null) {\n        this.elementRef.nativeElement.selectionEnd = value;\n    }\n\n    private readonly uid = `mc-timepicker-${uniqueComponentIdSuffix++}`;\n\n    private validator: ValidatorFn | null;\n\n    private onChange: (value: any) => void;\n    private onTouched: () => void;\n\n    constructor(\n        private readonly elementRef: ElementRef,\n        @Optional() private dateAdapter: DateAdapter<any>,\n        private readonly renderer: Renderer2\n    ) {\n        if (!this.dateAdapter) {\n            throw Error(`McTimepicker: No provider found for DateAdapter. You must import one of the existing ` +\n                `modules at your application root or provide a custom implementation or use exists ones.`);\n        }\n\n        this.validator = Validators.compose([this.parseValidator, this.minValidator, this.maxValidator]);\n\n        this.onChange = noop;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n\n        this.placeholder = TIMEFORMAT_PLACEHOLDERS[DEFAULT_TIME_FORMAT];\n    }\n\n    ngOnDestroy(): void {\n        this.stateChanges.complete();\n    }\n\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    focusChanged(isFocused: boolean): void {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.onTouched();\n            this.stateChanges.next();\n        }\n    }\n\n    onBlur() {\n        this.lastValueValid = !!this.getDateFromTimeString(this.viewValue);\n        this.control.updateValueAndValidity();\n        this.focusChanged(false);\n    }\n\n    onPaste($event) {\n        const newTimeObj = this.getDateFromTimeString($event.clipboardData.getData('text'));\n\n        if (!newTimeObj) { return; }\n\n        $event.preventDefault();\n\n        this.renderer.setProperty(\n            this.elementRef.nativeElement,\n            'value',\n            this.getTimeStringFromDate(newTimeObj, this.format)\n        );\n\n        this.value = newTimeObj;\n        this.onChange(newTimeObj);\n        this.stateChanges.next();\n    }\n\n    onInput() {\n        const newTimeObj = this.getDateFromTimeString(this.viewValue);\n        this.lastValueValid = !!newTimeObj;\n\n        if (!newTimeObj) {\n            this.control.updateValueAndValidity();\n\n            return;\n        }\n\n        const selectionStart = this.selectionStart;\n        const selectionEnd = this.selectionEnd;\n\n        this.renderer.setProperty(\n            this.elementRef.nativeElement,\n            'value',\n            this.getTimeStringFromDate(newTimeObj, this.format)\n        );\n\n        this.selectionStart = selectionStart;\n        this.selectionEnd = selectionEnd;\n\n        this.createSelectionOfTimeComponentInInput((selectionStart as number) + 1);\n\n        this.onChange(newTimeObj);\n        this.stateChanges.next();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n        // tslint:disable-next-line: deprecation\n        const keyCode = event.keyCode;\n\n        if (hasModifierKey(event)) {\n            return;\n        } else if ([UP_ARROW, DOWN_ARROW].includes(keyCode)) {\n            event.preventDefault();\n\n            this.verticalArrowKeyHandler(keyCode);\n\n            return;\n        } else if ([LEFT_ARROW, RIGHT_ARROW].includes(keyCode)) {\n            this.horizontalArrowKeyHandler(keyCode);\n\n            return;\n        }\n\n        setTimeout(() => this.onInput());\n    }\n\n    validate(control: AbstractControl): ValidationErrors | null {\n        this.setControl(control);\n\n        return this.validator ? this.validator(control) : null;\n    }\n\n    registerOnValidatorChange(fn: () => void): void {\n        this.validatorOnChange = fn;\n    }\n\n    writeValue(value: D | null): void {\n        this.value = value;\n    }\n\n    registerOnChange(fn: (value: D) => void): void {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    /** Checks whether the input is invalid based on the native validation. */\n    private isBadInput(): boolean {\n        const validity = (<HTMLInputElement> this.elementRef.nativeElement).validity;\n\n        return validity && validity.badInput;\n    }\n\n    private verticalArrowKeyHandler(keyCode: number): void {\n        if (!this.value) { return; }\n\n        let changedTime;\n\n        const newEditParams = this.getTimeEditMetrics(this.selectionStart as number);\n\n        if (keyCode === UP_ARROW) {\n            changedTime = this.incrementTime(this.value, newEditParams.modifiedTimePart);\n        }\n\n        if (keyCode === DOWN_ARROW) {\n            changedTime = this.decrementTime(this.value, newEditParams.modifiedTimePart);\n        }\n\n        this.value = changedTime;\n\n        this.selectionStart = newEditParams.cursorStartPosition;\n        this.selectionEnd = newEditParams.cursorEndPosition;\n\n        this.onChange(changedTime);\n        this.stateChanges.next();\n    }\n\n    private horizontalArrowKeyHandler(keyCode: number): void {\n        if (!this.value) { return; }\n\n        let cursorPos = this.selectionStart as number;\n\n        if (keyCode === LEFT_ARROW) {\n            cursorPos = cursorPos === 0 ? this.viewValue.length : cursorPos - 1;\n        } else if (keyCode === RIGHT_ARROW) {\n            const nextDividerPos: number = this.viewValue.indexOf(':', cursorPos);\n\n            cursorPos = nextDividerPos ? nextDividerPos + 1 : 0;\n        }\n\n        this.createSelectionOfTimeComponentInInput(cursorPos);\n    }\n\n    private createSelectionOfTimeComponentInInput(cursorPos: number): void {\n        setTimeout(() => {\n            const newEditParams = this.getTimeEditMetrics(cursorPos);\n\n            this.selectionStart = newEditParams.cursorStartPosition;\n            this.selectionEnd = newEditParams.cursorEndPosition;\n        });\n    }\n\n    private incrementTime(dateVal: D, whatToIncrement: TimeParts = TimeParts.seconds): D {\n        let hours = this.dateAdapter.getHours(dateVal);\n        let minutes = this.dateAdapter.getMinutes(dateVal);\n        let seconds = this.dateAdapter.getSeconds(dateVal);\n\n        switch (whatToIncrement) {\n            case TimeParts.hours:\n                hours++;\n                break;\n            case TimeParts.minutes:\n                minutes++;\n                break;\n            case TimeParts.seconds:\n                seconds++;\n                break;\n            default:\n        }\n\n        if (seconds > SECONDS_PER_MINUTE) { seconds = 0; }\n\n        if (minutes > MINUTES_PER_HOUR) { minutes = 0; }\n\n        if (hours > HOURS_PER_DAY) { hours = 0; }\n\n        return this.dateAdapter.createDateTime(\n            this.dateAdapter.getYear(this.value),\n            this.dateAdapter.getMonth(this.value),\n            this.dateAdapter.getDate(this.value),\n            hours,\n            minutes,\n            seconds,\n            this.dateAdapter.getMilliseconds(this.value)\n        );\n    }\n\n    private decrementTime(dateVal: D, whatToDecrement: TimeParts = TimeParts.seconds): D {\n        let hours = this.dateAdapter.getHours(dateVal);\n        let minutes = this.dateAdapter.getMinutes(dateVal);\n        let seconds = this.dateAdapter.getSeconds(dateVal);\n\n        switch (whatToDecrement) {\n            case TimeParts.hours:\n                hours--;\n                break;\n            case TimeParts.minutes:\n                minutes--;\n                break;\n            case TimeParts.seconds:\n                seconds--;\n                break;\n            default:\n        }\n\n        if (seconds < 0) { seconds = SECONDS_PER_MINUTE; }\n\n        if (minutes < 0) { minutes = MINUTES_PER_HOUR; }\n\n        if (hours < 0) { hours = HOURS_PER_DAY; }\n\n        return this.dateAdapter.createDateTime(\n            this.dateAdapter.getYear(this.value),\n            this.dateAdapter.getMonth(this.value),\n            this.dateAdapter.getDate(this.value),\n            hours,\n            minutes,\n            seconds,\n            this.dateAdapter.getMilliseconds(this.value)\n        );\n    }\n\n    /**\n     * @description Get params for arrow-keys (up/down) time valie edit.\n     * @param cursorPosition Current cursor position in timeString\n     */\n    private getTimeEditMetrics(cursorPosition: number): {\n        modifiedTimePart: TimeParts;\n        cursorStartPosition: number;\n        cursorEndPosition: number;\n    } {\n        const timeString: string = this.viewValue;\n        let modifiedTimePart: TimeParts;\n        let cursorStartPosition: number;\n        let cursorEndPosition: number;\n\n        const hoursIndex = 0;\n        const minutesIndex = timeString.indexOf(':', hoursIndex + 1);\n        const secondsIndex = minutesIndex !== -1 ? timeString.indexOf(':', minutesIndex + 1) : -1;\n\n        if (secondsIndex !== -1 && cursorPosition > secondsIndex) {\n            modifiedTimePart = TimeParts.seconds;\n            cursorStartPosition = secondsIndex + 1;\n            cursorEndPosition = timeString.length;\n        } else if (minutesIndex !== -1 && cursorPosition > minutesIndex) {\n            modifiedTimePart = TimeParts.minutes;\n            cursorStartPosition = minutesIndex + 1;\n            cursorEndPosition = secondsIndex > -1 ? secondsIndex : timeString.length;\n        } else {\n            modifiedTimePart = TimeParts.hours;\n            cursorStartPosition = hoursIndex;\n            cursorEndPosition = minutesIndex !== -1 ? minutesIndex : timeString.length;\n        }\n\n        return { modifiedTimePart, cursorStartPosition, cursorEndPosition };\n    }\n\n    /**\n     * @description Create time string for displaying inside input element of UI\n     */\n    private getTimeStringFromDate(value: D | null, timeFormat: TimeFormats): string {\n        if (!value || !this.dateAdapter.isValid(value)) { return ''; }\n\n        return this.dateAdapter.format(value, timeFormat);\n    }\n\n    private getDateFromTimeString(timeString: string): D | null {\n        if (!timeString) { return null; }\n\n        const hoursAndMinutesAndSeconds = timeString.match(HOURS_MINUTES_SECONDS_REGEXP);\n        const hoursAndMinutes = timeString.match(HOURS_MINUTES_REGEXP);\n        const hoursOnly = timeString.match(HOURS_ONLY_REGEXP);\n        const hoursAndMinutesInAmPm = timeString.match(AM_PM_FORMAT_REGEXP);\n\n        let hours: number = 0;\n        let minutes: number = 0;\n        let seconds: number = 0;\n\n        // tslint:disable:no-magic-numbers\n        if (hoursAndMinutesInAmPm) {\n            hours = Number(hoursAndMinutesInAmPm[1]);\n            minutes = Number(hoursAndMinutesInAmPm[2]);\n\n            if (/[p]/i.test(hoursAndMinutesInAmPm[3]) || (/[a]/i.test(hoursAndMinutesInAmPm[3]) && hours === 12)) {\n                hours += 12;\n            }\n        } else if (hoursAndMinutesAndSeconds) {\n            hours = Number(hoursAndMinutesAndSeconds[1]);\n            minutes = Number(hoursAndMinutesAndSeconds[2]);\n            seconds = Number(hoursAndMinutesAndSeconds[3]);\n        } else if (hoursAndMinutes) {\n            hours = Number(hoursAndMinutes[1]);\n            minutes = Number(hoursAndMinutes[2]);\n        } else if (hoursOnly) {\n            hours = Number(hoursOnly[1]);\n        } else {\n            return null;\n        }\n        // tslint:enable\n\n        const resultDate = this.dateAdapter.createDateTime(\n            this.dateAdapter.getYear(this.value),\n            this.dateAdapter.getMonth(this.value),\n            this.dateAdapter.getDate(this.value),\n            hours,\n            minutes,\n            seconds,\n            this.dateAdapter.getMilliseconds(this.value)\n        );\n\n        return this.getValidDateOrNull(resultDate);\n    }\n\n    private parseValidator: ValidatorFn = (): ValidationErrors | null => {\n        return this.empty || this.lastValueValid ? null : { mcTimepickerParse: { text: this.viewValue } };\n    }\n\n    private minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n        const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));\n\n        return (!this.min || !controlValue || this.compareTime(this.min, controlValue) <= 0) ?\n            null :\n            { mcTimepickerLowerThenMin: { min: this.min, actual: controlValue } };\n    }\n\n    private maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n        const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));\n\n        return (!this.max || !controlValue || this.compareTime(this.max, controlValue) >= 0) ?\n            null :\n            { mcTimepickerHigherThenMax: { max: this.max, actual: controlValue } };\n    }\n\n    private compareTime(first: D, second: D): number {\n        const result = this.dateAdapter.getHours(first) - this.dateAdapter.getHours(second) ||\n            this.dateAdapter.getMinutes(first) - this.dateAdapter.getMinutes(second);\n\n        if (TimeFormats.HHmm === this.format) {\n            return result;\n        } else if (TimeFormats.HHmmss === this.format) {\n            return result || this.dateAdapter.getSeconds(first) - this.dateAdapter.getSeconds(second);\n        } else {\n            throw Error(`Unknown format: ${this.format}`);\n        }\n    }\n\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    private updateView() {\n        const formattedValue = this.getTimeStringFromDate(this.value, this.format);\n\n        this.renderer.setProperty(this.elementRef.nativeElement, 'value', formattedValue);\n    }\n\n    private setControl(control: AbstractControl) {\n        if (!this.control) {\n            this.control = control;\n        }\n    }\n\n    // tslint:disable-next-line:no-empty\n    private validatorOnChange = () => {};\n}\n","import { A11yModule } from '@angular/cdk/a11y';\nimport { PlatformModule } from '@angular/cdk/platform';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { McTimepicker } from './timepicker';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        FormsModule\n    ],\n    declarations: [McTimepicker],\n    exports: [McTimepicker]\n})\nexport class McTimepickerModule {}\n"]}