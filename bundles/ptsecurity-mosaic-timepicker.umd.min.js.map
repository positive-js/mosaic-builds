{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@ptsecurity/mosaic/timepicker/timepicker.constants.ts","ng://@ptsecurity/mosaic/timepicker/timepicker.ts","ng://@ptsecurity/mosaic/timepicker/timepicker.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__read","o","n","m","Symbol","iterator","r","e","i","call","ar","next","done","push","value","error","TimeParts","hours","minutes","seconds","TimeFormats","HHmmss","HHmm","TIMEFORMAT_PLACEHOLDERS","_a","DEFAULT_TIME_FORMAT","HOURS_MINUTES_SECONDS_REGEXP","RegExp","HOURS_MINUTES_REGEXP","HOURS_ONLY_REGEXP","uniqueComponentIdSuffix","defaultErrorStateMatcher","parentForm","parentFormGroup","ngControl","this","McTimepickerMixinBase","mixinErrorState","McTimepickerBase","McTimepicker","elementRef","inputValueAccessor","renderer","dateAdapter","_this","_super","stateChanges","Subject","focused","controlType","_minTime","_maxTime","uid","Error","nativeElement","previousNativeValue","onChange","noop","id","placeholder","valueAccessor","control","myValidators","parseValidator","minTimeValidator","maxTimeValidator","validators","validator","arguments","length","concat","setValidators","updateValueAndValidity","__","constructor","prototype","create","__extends","defineProperty","disabled","_disabled","coerceBooleanProperty","_id","_required","applyInputChanges","_timeFormat","formatValue","keys","map","timeFormatKey","indexOf","setTimeout","doTimestringReformat","maxValue","ngOnDestroy","complete","ngDoCheck","updateErrorState","dirtyCheckNativeValue","focus","focusChanged","isFocused","onTouched","onBlur","onPaste","$event","preventDefault","clipboardUserInput","clipboardData","getData","undefined","getDateFromTimeString","onInput","initialCursorStart","selectionStart","initialCursorEnd","selectionEnd","isAutocompleteTriggered","getParsedTimeParts","hoursOnly","hoursAndMinutes","hoursAndMinutesAndSeconds","errors","createSelectionOfTimeComponentInInput","isBadInput","onContainerClick","writeValue","saveOriginalValue","setProperty","getTimeStringFromDate","timeFormat","onKeyDown","event","keyCode","getKeyCode","upDownTimeByArrowKeys","switchSelectionBetweenTimeparts","registerOnChange","fn","registerOnTouched","isValid","originalValue","newValue","validity","badInput","applyParams","changedTime","timeToApply","currentDateTimeInput","result","cursorPos","modifiedTimePart","getTimeEditMetrics","incrementTime","decrementTime","getCursorPositionOfPrevTimePartStart","getCursorPositionOfNextTimePartStart","code","key","newEditParams","cursorStartPosition","cursorEndPosition","dateVal","whatToIncrement","getTimeDigitsFromDate","getDateFromTimeDigits","whatToDecrement","timeString","timeDevider","nextDividerPos","cursorPosition","minutesIndex","hoursIndex","secondsIndex","format","momentWrappedTime","parse","convertedTimeString","match","trim","Number","resultDate","createDateTime","getYear","getMonth","getDate","getHours","getMinutes","getSeconds","mcTimepickerParse","text","minTime","isTimeLowerThenMin","mcTimepickerLowerThenMintime","maxTime","isTimeGreaterThenMax","mcTimepickerHigherThenMaxtime","timeToCompare","compareDateTime","Directive","args","selector","exportAs","host","class","[attr.id]","[attr.placeholder]","[disabled]","[required]","[attr.time-format]","[attr.min-time]","[attr.max-time]","[attr.value]","[attr.aria-invalid]","(blur)","(focus)","(input)","(paste)","(keydown)","providers","provide","McFormFieldControl","useExisting","forwardRef","ElementRef","NgControl","decorators","type","Optional","Self","NgForm","FormGroupDirective","ErrorStateMatcher","Inject","MC_INPUT_VALUE_ACCESSOR","Renderer2","DateAdapter","Input","McTimepickerModule","NgModule","imports","CommonModule","A11yModule","PlatformModule","FormsModule","declarations","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","// tslint:disable:naming-convention\nexport enum TimeParts {\n    hours,\n    minutes,\n    seconds\n}\n\nexport enum TimeFormats {\n    HHmmss = 'HH:mm:ss',\n    HHmm = 'HH:mm'\n}\n\nexport const TIMEFORMAT_PLACEHOLDERS: { [timeFormat: string]: string } = {\n    [TimeFormats.HHmmss]: '  :  :  ',\n    [TimeFormats.HHmm]: '  :  '\n};\n\nexport const DEFAULT_TIME_FORMAT: TimeFormats = TimeFormats.HHmm;\n\nexport const HOURS_MINUTES_SECONDS_REGEXP =\n    new RegExp(/^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]|[0-9]):([0-5][0-9]|[0-9])?$/);\nexport const HOURS_MINUTES_REGEXP = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]|[0-9])?$/;\nexport const HOURS_ONLY_REGEXP = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):?$/;\n\nexport const SECONDS_PER_MINUTE: number = 59;\nexport const MINUTES_PER_HOUR: number = 59;\nexport const HOURS_PER_DAY: number = 23;\n\n// TODO Move it to common CDK\nexport const ARROW_UP_KEYCODE: string = 'ArrowUp';\nexport const ARROW_DOWN_KEYCODE: string = 'ArrowDown';\nexport const ARROW_LEFT_KEYCODE: string = 'ArrowLeft';\nexport const ARROW_RIGHT_KEYCODE: string = 'ArrowRight';\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    Directive,\n    DoCheck,\n    ElementRef,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Renderer2,\n    Self\n} from '@angular/core';\nimport {\n    ControlValueAccessor,\n    FormControl,\n    FormGroupDirective,\n    NgControl,\n    NgForm,\n    ValidationErrors\n} from '@angular/forms';\nimport { DateAdapter } from '@ptsecurity/cdk/datetime';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { MC_INPUT_VALUE_ACCESSOR } from '@ptsecurity/mosaic/input';\nimport {\n    noop,\n    Subject\n} from 'rxjs';\n\nimport {\n    ARROW_DOWN_KEYCODE,\n    ARROW_LEFT_KEYCODE,\n    ARROW_RIGHT_KEYCODE,\n    ARROW_UP_KEYCODE,\n    DEFAULT_TIME_FORMAT,\n    HOURS_PER_DAY,\n    HOURS_MINUTES_REGEXP,\n    HOURS_MINUTES_SECONDS_REGEXP,\n    HOURS_ONLY_REGEXP,\n    MINUTES_PER_HOUR,\n    SECONDS_PER_MINUTE,\n    TIMEFORMAT_PLACEHOLDERS,\n    TimeFormats,\n    TimeParts\n} from './timepicker.constants';\n\n\nlet uniqueComponentIdSuffix: number = 0;\n\nexport class McTimepickerBase {\n    constructor(\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl) { }\n}\n\n// tslint:disable-next-line naming-convention\nexport const McTimepickerMixinBase:\n    CanUpdateErrorStateCtor & typeof McTimepickerBase = mixinErrorState(McTimepickerBase);\n\n@Directive({\n    selector: 'input[mcTimepicker]',\n    exportAs: 'mcTimepickerInput',\n    host: {\n        class: 'mc-timepicker mc-input',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '[attr.time-format]': 'timeFormat',\n        '[attr.min-time]': 'minTime',\n        '[attr.max-time]': 'maxTime',\n        '[attr.value]': 'value',\n        '[attr.aria-invalid]': 'errorState',\n\n        '(blur)': 'onBlur()',\n        '(focus)': 'focusChanged(true)',\n\n        '(input)': 'onInput()',\n        '(paste)': 'onPaste($event)',\n\n        '(keydown)': 'onKeyDown($event)'\n    },\n    providers: [\n        {\n            provide: McFormFieldControl,\n            useExisting: forwardRef(() => McTimepicker)\n        }\n    ]\n})\nexport class McTimepicker<D> extends McTimepickerMixinBase\n    implements McFormFieldControl<any>, OnDestroy, DoCheck, CanUpdateErrorState, ControlValueAccessor {\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-timepicker';\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) { return this.ngControl.disabled; }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n        }\n\n        this.stateChanges.next();\n    }\n\n    private _disabled: boolean;\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n    }\n\n    private _id: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    private _required: boolean;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this.inputValueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this.inputValueAccessor.value = value;\n            this.applyInputChanges();\n        }\n    }\n\n    @Input('time-format')\n    get timeFormat(): TimeFormats {\n        return this._timeFormat;\n    }\n\n    set timeFormat(formatValue: TimeFormats) {\n        this._timeFormat = Object\n            .keys(TimeFormats)\n            .map((timeFormatKey) => TimeFormats[timeFormatKey])\n            .indexOf(formatValue) > -1 ? formatValue : DEFAULT_TIME_FORMAT;\n\n        this.placeholder = TIMEFORMAT_PLACEHOLDERS[this._timeFormat];\n\n        setTimeout(() => this.applyInputChanges({ doTimestringReformat: true }));\n    }\n\n    private _timeFormat: TimeFormats;\n\n    @Input('min-time')\n    get minTime(): string | null {\n        return this._minTime;\n    }\n\n    set minTime(value: string | null) {\n        this._minTime = value;\n        (this.ngControl.control as FormControl).updateValueAndValidity();\n    }\n\n    private _minTime: string | null = null;\n\n    @Input('max-time')\n    get maxTime(): string | null {\n        return this._maxTime;\n    }\n\n    set maxTime(maxValue: string | null) {\n        this._maxTime = maxValue;\n        (this.ngControl.control as FormControl).updateValueAndValidity();\n    }\n\n    private _maxTime: string | null = null;\n\n    private readonly uid = `mc-timepicker-${uniqueComponentIdSuffix++}`;\n    private readonly inputValueAccessor: { value: any };\n\n    private originalValue: any;\n    private previousNativeValue: any;\n    private currentDateTimeInput: D | undefined;\n\n    private onChange: (value: any) => void;\n    private onTouched: () => void;\n\n    constructor(\n        private readonly elementRef: ElementRef,\n        @Optional() @Self() public ngControl: NgControl,\n        @Optional() parentForm: NgForm,\n        @Optional() parentFormGroup: FormGroupDirective,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        @Optional() @Self() @Inject(MC_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n        private readonly renderer: Renderer2,\n        @Optional() private dateAdapter: DateAdapter<any>\n    ) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (!this.dateAdapter) {\n            throw Error(`McTimepicker: No provider found for DateAdapter. You must import one of the existing ` +\n                `modules at your application root or provide a custom implementation or use exists ones.`);\n        }\n\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this.inputValueAccessor = inputValueAccessor || this.elementRef.nativeElement;\n\n        this.previousNativeValue = this.value;\n        this.onChange = noop;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n\n        this.placeholder = TIMEFORMAT_PLACEHOLDERS[DEFAULT_TIME_FORMAT];\n\n        if (this.ngControl) {\n            // Instead of NG_VALUE_ACCESSOR (https://github.com/angular/material2/issues/8158#issuecomment-344618103)\n            this.ngControl.valueAccessor = this;\n\n            // To avoid cyclic dependency https://stackoverflow.com/a/49578414\n            const control = this.ngControl.control as FormControl;\n            const myValidators = [\n                () => this.parseValidator(),\n                () => this.minTimeValidator(),\n                () => this.maxTimeValidator()\n            ];\n            const validators = control.validator\n                ? [control.validator, ...myValidators]\n                : myValidators;\n\n            control.setValidators(validators);\n            control.updateValueAndValidity();\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.stateChanges.complete();\n    }\n\n    ngDoCheck(): void {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this.dirtyCheckNativeValue();\n    }\n\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    focusChanged(isFocused: boolean): void {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.onTouched();\n            this.stateChanges.next();\n        }\n    }\n\n    onBlur() {\n        this.applyInputChanges();\n        this.focusChanged(false);\n    }\n\n    onPaste($event) {\n        $event.preventDefault();\n        const clipboardUserInput: string = $event.clipboardData.getData('text');\n\n        if (this.getDateFromTimeString(clipboardUserInput) === undefined) { return; }\n\n        this.elementRef.nativeElement.value = clipboardUserInput;\n        this.onInput();\n    }\n\n    onInput() {\n        const initialCursorStart: number = this.elementRef.nativeElement.selectionStart;\n        const initialCursorEnd: number = this.elementRef.nativeElement.selectionEnd;\n        let isAutocompleteTriggered: boolean = false;\n\n        const {\n            hoursOnly,\n            hoursAndMinutes,\n            hoursAndMinutesAndSeconds\n        } = this.getParsedTimeParts(this.elementRef.nativeElement.value);\n\n        // tslint:disable no-magic-numbers\n        if (hoursOnly &&\n            hoursOnly[1] &&\n            hoursOnly[1].length === 2) {\n            isAutocompleteTriggered = true;\n        } else if (hoursAndMinutes &&\n            hoursAndMinutes[1].length === 1 &&\n            hoursAndMinutes[2] &&\n            hoursAndMinutes[2].length === 2) {\n            isAutocompleteTriggered = true;\n        } else if (hoursAndMinutesAndSeconds &&\n            hoursAndMinutesAndSeconds[1].length === 2 &&\n            hoursAndMinutesAndSeconds[2].length === 2 &&\n            hoursAndMinutesAndSeconds[3] &&\n            hoursAndMinutesAndSeconds[3].length === 2) {\n            isAutocompleteTriggered = true;\n        }\n        // tslint:enable no-magic-numbers\n\n        this.applyInputChanges({ doTimestringReformat: isAutocompleteTriggered });\n\n        this.elementRef.nativeElement.selectionStart = initialCursorStart;\n        this.elementRef.nativeElement.selectionEnd = initialCursorEnd;\n\n        if (isAutocompleteTriggered && this.ngControl.errors === null) {\n            this.createSelectionOfTimeComponentInInput(initialCursorStart + 1);\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this.elementRef.nativeElement.value && !this.isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    writeValue(value: D | null): void {\n        if (value !== null) {\n            this.saveOriginalValue(value);\n\n            this.renderer.setProperty(\n                this.elementRef.nativeElement,\n                'value',\n                this.getTimeStringFromDate(value, this.timeFormat)\n            );\n\n            this.applyInputChanges();\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n        const keyCode: string = this.getKeyCode(event);\n\n        if (keyCode === ARROW_UP_KEYCODE || keyCode === ARROW_DOWN_KEYCODE) {\n            this.upDownTimeByArrowKeys(event);\n        }\n\n        if (keyCode === ARROW_LEFT_KEYCODE || keyCode === ARROW_RIGHT_KEYCODE) {\n            this.switchSelectionBetweenTimeparts(event);\n        }\n\n    }\n\n    registerOnChange(fn: (value: D) => void): void {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    saveOriginalValue(value: D): void {\n        if (this.dateAdapter.isValid(value)) {\n            this.originalValue = value;\n        }\n    }\n\n    /** Does some manual dirty checking on the native input `value` property. */\n    private dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this.previousNativeValue !== newValue) {\n            this.previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Checks whether the input is invalid based on the native validation. */\n    private isBadInput(): boolean {\n        const validity = (<HTMLInputElement> this.elementRef.nativeElement).validity;\n\n        return validity && validity.badInput;\n    }\n\n    private applyInputChanges(applyParams: { changedTime?: D; doTimestringReformat?: boolean } = {}): void {\n        const { changedTime, doTimestringReformat = true } = applyParams;\n        const timeToApply: D | undefined = changedTime ||\n            this.getDateFromTimeString(this.elementRef.nativeElement.value);\n        this.currentDateTimeInput = timeToApply;\n\n        if (doTimestringReformat && timeToApply !== undefined) {\n            const selectionStart: number = this.elementRef.nativeElement.selectionStart;\n            const selectionEnd: number = this.elementRef.nativeElement.selectionEnd;\n            this.renderer.setProperty(\n                this.elementRef.nativeElement,\n                'value',\n                this.getTimeStringFromDate(timeToApply, this.timeFormat)\n            );\n            this.elementRef.nativeElement.selectionStart = selectionStart;\n            this.elementRef.nativeElement.selectionEnd = selectionEnd;\n        }\n\n        (<FormControl> this.ngControl.control).updateValueAndValidity();\n        const result = this.ngControl.errors === null && timeToApply !== undefined ? timeToApply : null;\n        this.onChange(result);\n        this.stateChanges.next();\n    }\n\n    private upDownTimeByArrowKeys(event: KeyboardEvent): void {\n        event.preventDefault();\n\n        let changedTime: D | undefined = this.currentDateTimeInput;\n        if (changedTime !== undefined) {\n            const cursorPos = this.elementRef.nativeElement.selectionStart;\n\n            const modifiedTimePart = this.getTimeEditMetrics(cursorPos)\n                .modifiedTimePart;\n            const keyCode: string = this.getKeyCode(event);\n            if (keyCode === ARROW_UP_KEYCODE) { changedTime = this.incrementTime(changedTime, modifiedTimePart); }\n            if (keyCode === ARROW_DOWN_KEYCODE) { changedTime = this.decrementTime(changedTime, modifiedTimePart); }\n            this.applyInputChanges({ changedTime });\n            this.createSelectionOfTimeComponentInInput(cursorPos);\n        }\n    }\n\n    private switchSelectionBetweenTimeparts(event: KeyboardEvent): void {\n        const changedTime: D | undefined = this.currentDateTimeInput;\n        const keyCode: string = this.getKeyCode(event);\n\n        if (changedTime !== undefined) {\n            let cursorPos: number = this.elementRef.nativeElement.selectionStart;\n            if (keyCode === ARROW_LEFT_KEYCODE) {\n                cursorPos = this.getCursorPositionOfPrevTimePartStart(cursorPos, this.elementRef.nativeElement.value);\n            } else if (keyCode === ARROW_RIGHT_KEYCODE) {\n                cursorPos = this.getCursorPositionOfNextTimePartStart(cursorPos, this.elementRef.nativeElement.value);\n            }\n            this.createSelectionOfTimeComponentInInput(cursorPos);\n        }\n    }\n\n    /**\n     * @description Microsoft EDGE doesn't support KeyboaedEvent.code thus we need this helper\n     */\n    private getKeyCode(event: KeyboardEvent): string {\n        return event.code || event.key;\n    }\n\n    private createSelectionOfTimeComponentInInput(cursorPos: number): void {\n        setTimeout(() => {\n            const newEditParams = this.getTimeEditMetrics(cursorPos);\n            this.elementRef.nativeElement.selectionStart = newEditParams.cursorStartPosition;\n            this.elementRef.nativeElement.selectionEnd = newEditParams.cursorEndPosition;\n        });\n    }\n\n    private incrementTime(dateVal: D, whatToIncrement: TimeParts = TimeParts.seconds): D {\n        let { hours, minutes, seconds } = this.getTimeDigitsFromDate(dateVal);\n\n        switch (whatToIncrement) {\n            case TimeParts.hours:\n                hours++;\n                break;\n            case TimeParts.minutes:\n                minutes++;\n                break;\n            case TimeParts.seconds:\n                seconds++;\n                break;\n            default:\n        }\n\n        if (seconds > SECONDS_PER_MINUTE) { seconds = 0; }\n\n        if (minutes > MINUTES_PER_HOUR) { minutes = 0; }\n\n        if (hours > HOURS_PER_DAY) { hours = 0; }\n\n        return <D> this.getDateFromTimeDigits(hours, minutes, seconds);\n    }\n\n    /**\n     * @description Decrement part of time\n     */\n    private decrementTime(dateVal: D, whatToDecrement: TimeParts = TimeParts.seconds): D {\n        let { hours, minutes, seconds } = this.getTimeDigitsFromDate(dateVal);\n\n        switch (whatToDecrement) {\n            case TimeParts.hours:\n                hours--;\n                break;\n            case TimeParts.minutes:\n                minutes--;\n                break;\n            case TimeParts.seconds:\n                seconds--;\n                break;\n            default:\n        }\n\n        if (seconds < 0) { seconds = SECONDS_PER_MINUTE; }\n\n        if (minutes < 0) { minutes = MINUTES_PER_HOUR; }\n\n        if (hours < 0) { hours = HOURS_PER_DAY; }\n\n        return <D> this.getDateFromTimeDigits(hours, minutes, seconds);\n    }\n\n    private getCursorPositionOfPrevTimePartStart(cursorPos: number, timeString: string): number {\n        return cursorPos === 0 ? timeString.length : cursorPos - 1;\n    }\n\n    private getCursorPositionOfNextTimePartStart(\n        cursorPos: number, timeString: string, timeDevider: string = ':'\n    ): number {\n        const nextDividerPos: number = timeString.indexOf(timeDevider, cursorPos);\n\n        return nextDividerPos !== undefined ? nextDividerPos + 1 : 0;\n    }\n\n    /**\n     * @description Get params for arrow-keys (up/down) time valie edit.\n     * @param cursorPosition Current cursor position in timeString\n     */\n    private getTimeEditMetrics(cursorPosition: number): {\n        modifiedTimePart: TimeParts;\n        cursorStartPosition: number;\n        cursorEndPosition: number;\n    } {\n        const timeString: string = this.elementRef.nativeElement.value;\n        let modifiedTimePart: TimeParts;\n        let cursorStartPosition: number;\n        let cursorEndPosition: number;\n        const hoursIndex = 0;\n        const minutesIndex = timeString.indexOf(':', hoursIndex + 1);\n        const secondsIndex = minutesIndex !== -1 ? timeString.indexOf(':', minutesIndex + 1) : -1;\n\n        if (secondsIndex !== -1 && cursorPosition > secondsIndex) {\n            modifiedTimePart = TimeParts.seconds;\n            cursorStartPosition = secondsIndex + 1;\n            cursorEndPosition = timeString.length;\n        } else if (minutesIndex !== -1 && cursorPosition > minutesIndex) {\n            modifiedTimePart = TimeParts.minutes;\n            cursorStartPosition = minutesIndex + 1;\n            cursorEndPosition = secondsIndex > -1 ? secondsIndex : timeString.length;\n        } else {\n            modifiedTimePart = TimeParts.hours;\n            cursorStartPosition = hoursIndex;\n            cursorEndPosition = minutesIndex !== -1 ? minutesIndex : timeString.length;\n        }\n\n        return {\n            modifiedTimePart,\n            cursorStartPosition,\n            cursorEndPosition\n        };\n    }\n\n    /**\n     * @description Create time string for displaying inside input element of UI\n     */\n    private getTimeStringFromDate(value: D, timeFormat: TimeFormats = DEFAULT_TIME_FORMAT): string {\n        if (value === undefined || value === null) {\n            return '';\n        }\n\n        return this.dateAdapter.format(value, timeFormat);\n    }\n\n    private getParsedTimeParts(timeString: string): {\n        hoursOnly: any;\n        hoursAndMinutes: any;\n        hoursAndMinutesAndSeconds: any;\n    } {\n        const momentWrappedTime = this.dateAdapter.parse(timeString, [\n            'h:m a',\n            'h:m:s a',\n            'H:m',\n            'H:m:s'\n        ]);\n\n        const convertedTimeString = momentWrappedTime !== null\n            ? momentWrappedTime.format('H:m:s')\n            : '';\n\n        const hoursAndMinutesAndSeconds = convertedTimeString.match(HOURS_MINUTES_SECONDS_REGEXP);\n        const hoursAndMinutes = convertedTimeString.match(HOURS_MINUTES_REGEXP);\n        const hoursOnly = convertedTimeString.match(HOURS_ONLY_REGEXP);\n\n        return {\n            hoursOnly,\n            hoursAndMinutes,\n            hoursAndMinutesAndSeconds\n        };\n    }\n\n    /**\n     * @description Create Date object from separate parts of time\n     */\n    private getDateFromTimeDigits(hours: number, minutes: number, seconds: number = 0): D | undefined {\n        return this.getDateFromTimeString(`${hours}:${minutes}:${seconds}`);\n    }\n\n    private getDateFromTimeString(timeString: string): D | undefined {\n        if (timeString === undefined) { return; }\n\n        const {\n            hoursOnly,\n            hoursAndMinutes,\n            hoursAndMinutesAndSeconds\n        } = this.getParsedTimeParts(timeString);\n\n        if (timeString.trim().length === 0 ||\n            hoursOnly === null && hoursAndMinutes === null && hoursAndMinutesAndSeconds === null) {\n            return;\n        }\n\n        // tslint:disable no-magic-numbers\n        let hours: number = 0;\n        let minutes: number = 0;\n        let seconds: number = 0;\n\n        if (hoursOnly) {\n            hours = Number(hoursOnly[1]);\n        } else if (hoursAndMinutes) {\n            hours = Number(hoursAndMinutes[1]);\n            minutes = Number(hoursAndMinutes[2]);\n        } else if (hoursAndMinutesAndSeconds) {\n            hours = Number(hoursAndMinutesAndSeconds[1]);\n            minutes = Number(hoursAndMinutesAndSeconds[2]);\n            seconds = Number(hoursAndMinutesAndSeconds[3]);\n        }\n\n        const resultDate: D = this.dateAdapter.createDateTime(\n            this.dateAdapter.getYear(this.originalValue),\n            this.dateAdapter.getMonth(this.originalValue),\n            this.dateAdapter.getDate(this.originalValue),\n            hours,\n            minutes,\n            seconds,\n            0\n        );\n\n        return this.dateAdapter.isValid(resultDate) ? resultDate : undefined;\n    }\n\n    private getTimeDigitsFromDate(dateVal: D): { hours: number; minutes: number; seconds: number } {\n        return {\n            hours: this.dateAdapter.getHours(dateVal),\n            minutes: this.dateAdapter.getMinutes(dateVal),\n            seconds: this.dateAdapter.getSeconds(dateVal)\n        };\n    }\n\n    private parseValidator(): ValidationErrors | null {\n        return this.currentDateTimeInput === undefined ?\n            { mcTimepickerParse: { text: this.elementRef.nativeElement.value } } :\n            null;\n    }\n\n    private minTimeValidator(): ValidationErrors | null {\n        if (\n            this.minTime &&\n            this.currentDateTimeInput !== undefined &&\n            this.isTimeLowerThenMin(this.currentDateTimeInput)\n        ) {\n            return { mcTimepickerLowerThenMintime: { text: this.elementRef.nativeElement.value } };\n        }\n\n        return null;\n    }\n\n    private maxTimeValidator(): ValidationErrors | null {\n        if (\n            this.maxTime &&\n            this.currentDateTimeInput !== undefined &&\n            this.isTimeGreaterThenMax(this.currentDateTimeInput)\n        ) {\n            return { mcTimepickerHigherThenMaxtime: { text: this.elementRef.nativeElement.value } };\n        }\n\n        return null;\n    }\n\n    private isTimeLowerThenMin(timeToCompare: D): boolean {\n        if (timeToCompare === undefined || timeToCompare ===  null || this.minTime === null) {\n            return false;\n        }\n\n        return this.dateAdapter.compareDateTime(timeToCompare, this.getDateFromTimeString(this.minTime)) < 0;\n    }\n\n    private isTimeGreaterThenMax(timeToCompare: D): boolean {\n        if (timeToCompare === undefined || timeToCompare ===  null || this.maxTime === null) {\n            return false;\n        }\n\n        return this.dateAdapter.compareDateTime(timeToCompare, this.getDateFromTimeString(this.maxTime)) >= 0;\n    }\n}\n","import { A11yModule } from '@angular/cdk/a11y';\nimport { PlatformModule } from '@angular/cdk/platform';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { McTimepicker } from './timepicker';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        FormsModule\n    ],\n    declarations: [McTimepicker],\n    exports: [McTimepicker]\n})\nexport class McTimepickerModule {}\n"]}