{"version":3,"sources":["../../../packages/mosaic/timepicker/timepicker.constants.ts","../../../packages/mosaic/timepicker/timepicker.directive.ts","../../../packages/mosaic/timepicker/timepicker.module.ts"],"names":["TimeParts","TimeFormats","TIMEFORMAT_PLACEHOLDERS","_a","HHmmss","HHmm","DEFAULT_TIME_FORMAT","HOURS_MINUTES_SECONDS_REGEXP","HOURS_MINUTES_REGEXP","HOURS_ONLY_REGEXP","AM_PM_FORMAT_REGEXP","MC_TIMEPICKER_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","McTimepicker","multi","MC_TIMEPICKER_VALIDATORS","NG_VALIDATORS","uniqueComponentIdSuffix","elementRef","dateAdapter","renderer","_this","this","stateChanges","Subject","focused","controlType","_format","_min","_max","incorrectInput","EventEmitter","uid","lastValueValid","onInput","formattedValue","formatUserInput","viewValue","newTimeObj","getDateFromTimeString","selectionStart","selectionEnd","setViewValue","getTimeStringFromDate","format","createSelectionOfTimeComponentInInput","value","onChange","next","parseValidator","empty","mcTimepickerParse","text","minValidator","control","controlValue","getValidDateOrNull","deserialize","min","compareTime","mcTimepickerLowerThenMin","actual","maxValidator","max","mcTimepickerHigherThenMax","validatorOnChange","Error","validator","Validators","compose","noop","id","placeholder","Object","defineProperty","prototype","_disabled","coerceBooleanProperty","_id","_required","formatValue","keys","map","timeFormatKey","indexOf","updateView","_value","newValue","isValid","tooltip","mcMouseEnterDelay","validationTooltipShowDelay","mcTrigger","mcTooltipClass","initElementRefListeners","subscribe","isTooltipOpen","show","setTimeout","hide","validationTooltipHideDelay","nativeElement","isBadInput","ngOnDestroy","complete","getSize","isFullFormat","focus","focusChanged","isFocused","onTouched","onBlur","onPaste","$event","preventDefault","formatUserPaste","clipboardData","getData","onContainerClick","onKeyDown","event","keyCode","isLetterKey","ctrlKey","metaKey","hasModifierKey","isVerticalMovement","isHorizontalMovement","DELETE","BACKSPACE","includes","SPACE","spaceKeyHandler","HOME","PAGE_UP","END","PAGE_DOWN","length","UP_ARROW","DOWN_ARROW","verticalArrowKeyHandler","LEFT_ARROW","RIGHT_ARROW","horizontalArrowKeyHandler","test","key","getNewValue","replaceSymbols","emit","validate","setControl","registerOnValidatorChange","fn","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","disabled","match","groups","hours","replaceNumbers","values","group","padStart","join","_b","number","symbol","replace","minutes","seconds","parseInt","toString","validity","badInput","cursorPos","nextDividerPos","position","slice","changedTime","newEditParams","getTimeEditMetrics","incrementTime","modifiedTimePart","decrementTime","cursorStartPosition","cursorEndPosition","dateVal","whatToIncrement","getHours","getMinutes","getSeconds","createDateTime","getYear","getMonth","getDate","getMilliseconds","whatToDecrement","cursorPosition","timeString","minutesIndex","hoursIndex","secondsIndex","timeFormat","hoursAndMinutesAndSeconds","hoursAndMinutes","hoursOnly","hoursAndMinutesInAmPm","Number","resultDate","first","second","result","obj","isDateInstance","setProperty","Directive","args","selector","exportAs","host","class","[attr.id]","[attr.placeholder]","[attr.disabled]","[attr.required]","[attr.size]","[attr.autocomplete]","(blur)","(focus)","(paste)","(keydown)","providers","McFormFieldControl","ElementRef","DateAdapter","decorators","type","Optional","Renderer2","Input","Output","NgModule","imports","CommonModule","A11yModule","PlatformModule","FormsModule","declarations","exports"],"mappings":"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","sourcesContent":["// tslint:disable:naming-convention\nexport enum TimeParts {\n    hours,\n    minutes,\n    seconds\n}\n\nexport enum TimeFormats {\n    HHmmss = 'HH:mm:ss',\n    HHmm = 'HH:mm'\n}\n\nexport const TIMEFORMAT_PLACEHOLDERS: { [timeFormat: string]: string } = {\n    [TimeFormats.HHmmss]: 'чч:мм:сс',\n    [TimeFormats.HHmm]: 'чч:мм'\n};\n\nexport const DEFAULT_TIME_FORMAT: TimeFormats = TimeFormats.HHmm;\n\nexport const HOURS_MINUTES_SECONDS_REGEXP = /^([0-1][0-9]|2[0-3]):?([0-5][0-9]):?([0-5][0-9])?$/;\nexport const HOURS_MINUTES_REGEXP = /^([0-1][0-9]|2[0-3]):?([0-5][0-9])?$/;\nexport const HOURS_ONLY_REGEXP = /^([0-1][0-9]|2[0-3]):?$/;\nexport const AM_PM_FORMAT_REGEXP = /^([0-1]?[0-9]):([0-5]?[0-9]) ([ap][m]?$)/i;\n\nexport const SECONDS_PER_MINUTE: number = 59;\nexport const MINUTES_PER_HOUR: number = 59;\nexport const HOURS_PER_DAY: number = 23;\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    Renderer2\n} from '@angular/core';\nimport {\n    AbstractControl,\n    ControlValueAccessor,\n    NG_VALIDATORS,\n    NG_VALUE_ACCESSOR,\n    ValidationErrors,\n    Validator,\n    ValidatorFn,\n    Validators\n} from '@angular/forms';\nimport { DateAdapter } from '@ptsecurity/cdk/datetime';\nimport {\n    DOWN_ARROW,\n    UP_ARROW,\n    HOME,\n    END,\n    LEFT_ARROW,\n    RIGHT_ARROW,\n    PAGE_DOWN,\n    PAGE_UP,\n    SPACE,\n    DELETE,\n    BACKSPACE,\n    hasModifierKey,\n    isLetterKey,\n    isVerticalMovement,\n    isHorizontalMovement\n} from '@ptsecurity/cdk/keycodes';\nimport { validationTooltipHideDelay, validationTooltipShowDelay } from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { McTooltip } from '@ptsecurity/mosaic/tooltip';\nimport { noop, Subject } from 'rxjs';\n\nimport {\n    DEFAULT_TIME_FORMAT,\n    HOURS_PER_DAY,\n    HOURS_MINUTES_REGEXP,\n    HOURS_MINUTES_SECONDS_REGEXP,\n    HOURS_ONLY_REGEXP,\n    MINUTES_PER_HOUR,\n    SECONDS_PER_MINUTE,\n    TIMEFORMAT_PLACEHOLDERS,\n    TimeFormats,\n    TimeParts,\n    AM_PM_FORMAT_REGEXP\n} from './timepicker.constants';\n\n\n/** @docs-private */\nexport const MC_TIMEPICKER_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McTimepicker),\n    multi: true\n};\n\n/** @docs-private */\nexport const MC_TIMEPICKER_VALIDATORS: any = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McTimepicker),\n    multi: true\n};\n\n\nlet uniqueComponentIdSuffix: number = 0;\n\nconst shortFormatSize: number = 5;\nconst fullFormatSize: number = 8;\n\n\n@Directive({\n    selector: 'input[mcTimepicker]',\n    exportAs: 'mcTimepicker',\n    host: {\n        class: 'mc-input mc-timepicker',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.required]': 'required',\n        '[attr.size]': 'getSize()',\n        '[attr.autocomplete]': '\"off\"',\n\n        '(blur)': 'onBlur()',\n        '(focus)': 'focusChanged(true)',\n\n        '(paste)': 'onPaste($event)',\n\n        '(keydown)': 'onKeyDown($event)'\n    },\n    providers: [\n        MC_TIMEPICKER_VALIDATORS,\n        MC_TIMEPICKER_VALUE_ACCESSOR,\n        { provide: McFormFieldControl, useExisting: McTimepicker }\n    ]\n})\nexport class McTimepicker<D> implements McFormFieldControl<D>, ControlValueAccessor, Validator, OnDestroy {\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    readonly errorState: boolean;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'timepicker';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n        }\n\n        this.stateChanges.next();\n    }\n\n    private _disabled: boolean;\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n    }\n\n    private _id: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    private _required: boolean;\n\n    @Input()\n    get format(): TimeFormats {\n        return this._format;\n    }\n\n    set format(formatValue: TimeFormats) {\n        this._format = Object\n            .keys(TimeFormats)\n            .map((timeFormatKey) => TimeFormats[timeFormatKey])\n            .indexOf(formatValue) > -1 ? formatValue : DEFAULT_TIME_FORMAT;\n\n        this.placeholder = TIMEFORMAT_PLACEHOLDERS[this._format];\n\n        if (this.value) {\n            this.updateView();\n        }\n    }\n\n    private _format: TimeFormats = DEFAULT_TIME_FORMAT;\n\n    @Input()\n    get min(): D | null {\n        return this._min;\n    }\n\n    set min(value: D | null) {\n        this._min = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.validatorOnChange();\n    }\n\n    private _min: D | null = null;\n\n    @Input()\n    get max(): D | null {\n        return this._max;\n    }\n\n    set max(value: D | null) {\n        this._max = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.validatorOnChange();\n    }\n\n    private _max: D | null = null;\n\n    @Input()\n    get value(): D | null {\n        return this._value;\n    }\n\n    set value(value: D | null) {\n        const newValue = this.dateAdapter.deserialize(value);\n\n        this.lastValueValid = !newValue || this.dateAdapter.isValid(newValue);\n\n        this._value = this.getValidDateOrNull(newValue);\n\n        this.updateView();\n    }\n\n    private _value: D | null;\n\n    @Input()\n    set mcValidationTooltip(tooltip: McTooltip) {\n        if (!tooltip) { return; }\n\n        tooltip.mcMouseEnterDelay = validationTooltipShowDelay;\n        tooltip.mcTrigger = 'manual';\n        tooltip.mcTooltipClass = 'mc-tooltip_warning';\n\n        tooltip.initElementRefListeners();\n\n        this.incorrectInput.subscribe(() => {\n            if (tooltip.isTooltipOpen) { return; }\n\n            tooltip.show();\n\n            setTimeout(() => tooltip.hide(), validationTooltipHideDelay);\n        });\n    }\n\n    @Output() incorrectInput = new EventEmitter<void>();\n\n    get hasSelection(): boolean {\n        return this.selectionStart !== this.selectionEnd;\n    }\n\n    get isFullFormat(): boolean {\n        return this.format === TimeFormats.HHmmss;\n    }\n\n    get isShortFormat(): boolean {\n        return this.format === TimeFormats.HHmm;\n    }\n\n    get viewValue(): string {\n        return this.elementRef.nativeElement.value;\n    }\n\n    get ngControl(): any {\n        return this.control;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this.viewValue && !this.isBadInput();\n    }\n\n    get selectionStart(): number | null {\n        return this.elementRef.nativeElement.selectionStart;\n    }\n\n    set selectionStart(value: number | null) {\n        this.elementRef.nativeElement.selectionStart = value;\n    }\n\n    get selectionEnd(): number | null {\n        return this.elementRef.nativeElement.selectionEnd;\n    }\n\n    set selectionEnd(value: number | null) {\n        this.elementRef.nativeElement.selectionEnd = value;\n    }\n\n    private readonly uid = `mc-timepicker-${uniqueComponentIdSuffix++}`;\n\n    private readonly validator: ValidatorFn | null;\n\n    private lastValueValid = false;\n\n    private control: AbstractControl;\n\n    private onChange: (value: any) => void;\n    private onTouched: () => void;\n\n    constructor(\n        private elementRef: ElementRef,\n        @Optional() private dateAdapter: DateAdapter<any>,\n        private renderer: Renderer2\n    ) {\n        if (!this.dateAdapter) {\n            throw Error(`McTimepicker: No provider found for DateAdapter. You must import one of the existing ` +\n                `modules at your application root or provide a custom implementation or use exists ones.`);\n        }\n\n        this.validator = Validators.compose([this.parseValidator, this.minValidator, this.maxValidator]);\n\n        this.onChange = noop;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n\n        this.placeholder = TIMEFORMAT_PLACEHOLDERS[DEFAULT_TIME_FORMAT];\n    }\n\n    ngOnDestroy(): void {\n        this.stateChanges.complete();\n    }\n\n    getSize(): number {\n        return this.isFullFormat ? fullFormatSize : shortFormatSize;\n    }\n\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    focusChanged(isFocused: boolean): void {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.onTouched();\n            this.stateChanges.next();\n        }\n    }\n\n    onBlur() {\n        this.focusChanged(false);\n\n        this.onInput();\n    }\n\n    onPaste($event) {\n        $event.preventDefault();\n\n        const value = this.formatUserPaste($event.clipboardData.getData('text'));\n\n        const newTimeObj = this.getDateFromTimeString(value);\n\n        if (!newTimeObj) { return; }\n\n        this.setViewValue(this.getTimeStringFromDate(newTimeObj, this.format));\n\n        this.value = newTimeObj;\n        this.onChange(newTimeObj);\n        this.stateChanges.next();\n    }\n\n    onInput = () => {\n        const formattedValue = this.formatUserInput(this.viewValue);\n\n        const newTimeObj = this.getDateFromTimeString(formattedValue);\n        this.lastValueValid = !!newTimeObj;\n\n        if (!newTimeObj) {\n            this.onChange(null);\n\n            return;\n        }\n\n        const selectionStart = this.selectionStart;\n        const selectionEnd = this.selectionEnd;\n\n        this.setViewValue(this.getTimeStringFromDate(newTimeObj, this.format));\n\n        this.selectionStart = selectionStart;\n        this.selectionEnd = selectionEnd;\n\n        this.createSelectionOfTimeComponentInInput((selectionStart as number) + 1);\n\n        this.value = newTimeObj;\n        this.onChange(newTimeObj);\n        this.stateChanges.next();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n        // tslint:disable-next-line: deprecation\n        const keyCode = event.keyCode;\n\n        if (isLetterKey(event) && !event.ctrlKey && !event.metaKey) {\n            event.preventDefault();\n\n            this.incorrectInput.emit();\n        } else if (\n            (hasModifierKey(event) && (isVerticalMovement(keyCode) || isHorizontalMovement(keyCode))) ||\n            event.ctrlKey || event.metaKey ||\n            [DELETE, BACKSPACE].includes(keyCode)\n        ) {\n            noop();\n        } else if (keyCode === SPACE) {\n            this.spaceKeyHandler(event);\n        } else if ([HOME, PAGE_UP].includes(keyCode)) {\n            this.createSelectionOfTimeComponentInInput(0);\n        } else if ([END, PAGE_DOWN].includes(keyCode)) {\n            this.createSelectionOfTimeComponentInInput(this.viewValue.length);\n        } else if ([UP_ARROW, DOWN_ARROW].includes(keyCode)) {\n            event.preventDefault();\n\n            this.verticalArrowKeyHandler(keyCode);\n        } else if ([LEFT_ARROW, RIGHT_ARROW].includes(keyCode)) {\n            this.horizontalArrowKeyHandler(keyCode);\n        } else if (/^\\D$/.test(event.key)) {\n            event.preventDefault();\n\n            const newValue = this.getNewValue(event.key, this.selectionStart as number);\n            const formattedValue = this.replaceSymbols(newValue);\n\n            if (newValue !== formattedValue) {\n                this.setViewValue(formattedValue);\n\n                setTimeout(this.onInput);\n            } else {\n                this.incorrectInput.emit();\n            }\n        } else {\n            setTimeout(this.onInput);\n        }\n    }\n\n    validate(control: AbstractControl): ValidationErrors | null {\n        this.setControl(control);\n\n        return this.validator ? this.validator(control) : null;\n    }\n\n    registerOnValidatorChange(fn: () => void): void {\n        this.validatorOnChange = fn;\n    }\n\n    writeValue(value: D | null): void {\n        this.value = value;\n    }\n\n    registerOnChange(fn: (value: D) => void): void {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    private formatUserPaste(value: string) {\n        if (value.match(AM_PM_FORMAT_REGEXP)) { return value; }\n\n        const match: RegExpMatchArray | null = value.match(\n            /^(\\D+)?(?<hours>\\d+)?(\\D+)?(\\D+)?(?<minutes>\\d+)?(\\D+)?(\\D+)?(?<seconds>\\d+)?(\\D+)?$/\n        );\n\n        if (!match?.groups?.hours) {\n            this.setViewValue(value);\n\n            return value;\n        }\n\n        return this.replaceNumbers(Object.values(match.groups)\n            // tslint:disable-next-line:no-magic-numbers\n            .map((group) => (group || '').padStart(2, '0'))\n            .join(':')\n        );\n    }\n\n    private formatUserInput(value: string): string {\n        return this.replaceNumbers(this.replaceSymbols(value));\n    }\n\n    private replaceSymbols(value: string): string {\n        let formattedValue: string = value;\n\n        const match: RegExpMatchArray | null = value.match(/^(\\d\\d:){0,2}(?<number>[0-9])(?<symbol>\\W)(:\\d\\d){0,2}$/);\n\n        if (match?.groups) {\n            const { number, symbol } = match.groups;\n\n            formattedValue = value.replace(number + symbol, `0${number}`);\n        }\n\n        return formattedValue;\n    }\n\n    private replaceNumbers(value: string): string {\n        let formattedValue: string = value;\n\n        const match: RegExpMatchArray | null = value.match(/^(?<hours>\\d{0,4}):?(?<minutes>\\d{0,4}):?(?<seconds>\\d{0,4})$/);\n\n        if (match?.groups) {\n            const { hours, minutes, seconds } = match.groups;\n\n            if (hours.length && parseInt(hours) > HOURS_PER_DAY) {\n                formattedValue = formattedValue.replace(hours, HOURS_PER_DAY.toString());\n            }\n\n            if (minutes.length && parseInt(minutes) > MINUTES_PER_HOUR) {\n                formattedValue = formattedValue.replace(minutes, MINUTES_PER_HOUR.toString());\n            }\n\n            if (seconds.length && parseInt(seconds) > SECONDS_PER_MINUTE) {\n                formattedValue = formattedValue.replace(seconds, SECONDS_PER_MINUTE.toString());\n            }\n        }\n\n        return formattedValue;\n    }\n\n    /** Checks whether the input is invalid based on the native validation. */\n    private isBadInput(): boolean {\n        const validity = (<HTMLInputElement> this.elementRef.nativeElement).validity;\n\n        return validity && validity.badInput;\n    }\n\n    private spaceKeyHandler(event: KeyboardEvent) {\n        event.preventDefault();\n\n        if (this.selectionStart === this.selectionEnd) {\n            const value = this.getNewValue(event.key, this.selectionStart as number);\n            const formattedValue = this.replaceSymbols(value);\n\n            if (value !== formattedValue) {\n                this.setViewValue(formattedValue);\n\n                setTimeout(this.onInput);\n            }\n        } else if (this.selectionStart !== this.selectionEnd) {\n\n            let cursorPos = this.selectionStart as number;\n\n            const nextDividerPos: number = this.viewValue.indexOf(':', cursorPos);\n\n            cursorPos = nextDividerPos ? nextDividerPos + 1 : 0;\n\n            this.createSelectionOfTimeComponentInInput(cursorPos);\n        }\n    }\n\n    private getNewValue(key: string, position: number) {\n        return [this.viewValue.slice(0, position), key, this.viewValue.slice(position)].join('');\n    }\n\n    private verticalArrowKeyHandler(keyCode: number): void {\n        if (!this.value) { return; }\n\n        let changedTime;\n\n        const newEditParams = this.getTimeEditMetrics(this.selectionStart as number);\n\n        if (keyCode === UP_ARROW) {\n            changedTime = this.incrementTime(this.value, newEditParams.modifiedTimePart);\n        }\n\n        if (keyCode === DOWN_ARROW) {\n            changedTime = this.decrementTime(this.value, newEditParams.modifiedTimePart);\n        }\n\n        this.value = changedTime;\n\n        this.selectionStart = newEditParams.cursorStartPosition;\n        this.selectionEnd = newEditParams.cursorEndPosition;\n\n        this.onChange(changedTime);\n        this.stateChanges.next();\n    }\n\n    private horizontalArrowKeyHandler(keyCode: number): void {\n        if (!this.value) { return; }\n\n        let cursorPos = this.selectionStart as number;\n\n        if (keyCode === LEFT_ARROW) {\n            cursorPos = cursorPos === 0 ? this.viewValue.length : cursorPos - 1;\n        } else if (keyCode === RIGHT_ARROW) {\n            const nextDividerPos: number = this.viewValue.indexOf(':', cursorPos);\n\n            cursorPos = nextDividerPos ? nextDividerPos + 1 : 0;\n        }\n\n        this.createSelectionOfTimeComponentInInput(cursorPos);\n    }\n\n    private createSelectionOfTimeComponentInInput(cursorPos: number): void {\n        setTimeout(() => {\n            const newEditParams = this.getTimeEditMetrics(cursorPos);\n\n            this.selectionStart = newEditParams.cursorStartPosition;\n            this.selectionEnd = newEditParams.cursorEndPosition;\n        });\n    }\n\n    private incrementTime(dateVal: D, whatToIncrement: TimeParts = TimeParts.seconds): D {\n        let hours = this.dateAdapter.getHours(dateVal);\n        let minutes = this.dateAdapter.getMinutes(dateVal);\n        let seconds = this.dateAdapter.getSeconds(dateVal);\n\n        switch (whatToIncrement) {\n            case TimeParts.hours:\n                hours++;\n                break;\n            case TimeParts.minutes:\n                minutes++;\n                break;\n            case TimeParts.seconds:\n                seconds++;\n                break;\n            default:\n        }\n\n        if (seconds > SECONDS_PER_MINUTE) { seconds = 0; }\n\n        if (minutes > MINUTES_PER_HOUR) { minutes = 0; }\n\n        if (hours > HOURS_PER_DAY) { hours = 0; }\n\n        return this.dateAdapter.createDateTime(\n            this.dateAdapter.getYear(this.value),\n            this.dateAdapter.getMonth(this.value),\n            this.dateAdapter.getDate(this.value),\n            hours,\n            minutes,\n            seconds,\n            this.dateAdapter.getMilliseconds(this.value)\n        );\n    }\n\n    private decrementTime(dateVal: D, whatToDecrement: TimeParts = TimeParts.seconds): D {\n        let hours = this.dateAdapter.getHours(dateVal);\n        let minutes = this.dateAdapter.getMinutes(dateVal);\n        let seconds = this.dateAdapter.getSeconds(dateVal);\n\n        switch (whatToDecrement) {\n            case TimeParts.hours:\n                hours--;\n                break;\n            case TimeParts.minutes:\n                minutes--;\n                break;\n            case TimeParts.seconds:\n                seconds--;\n                break;\n            default:\n        }\n\n        if (seconds < 0) { seconds = SECONDS_PER_MINUTE; }\n\n        if (minutes < 0) { minutes = MINUTES_PER_HOUR; }\n\n        if (hours < 0) { hours = HOURS_PER_DAY; }\n\n        return this.dateAdapter.createDateTime(\n            this.dateAdapter.getYear(this.value),\n            this.dateAdapter.getMonth(this.value),\n            this.dateAdapter.getDate(this.value),\n            hours,\n            minutes,\n            seconds,\n            this.dateAdapter.getMilliseconds(this.value)\n        );\n    }\n\n    /**\n     * @description Get params for arrow-keys (up/down) time valie edit.\n     * @param cursorPosition Current cursor position in timeString\n     */\n    private getTimeEditMetrics(cursorPosition: number): {\n        modifiedTimePart: TimeParts;\n        cursorStartPosition: number;\n        cursorEndPosition: number;\n    } {\n        const timeString: string = this.viewValue;\n        let modifiedTimePart: TimeParts;\n        let cursorStartPosition: number;\n        let cursorEndPosition: number;\n\n        const hoursIndex = 0;\n        const minutesIndex = timeString.indexOf(':', hoursIndex + 1);\n        const secondsIndex = minutesIndex !== -1 ? timeString.indexOf(':', minutesIndex + 1) : -1;\n\n        if (secondsIndex !== -1 && cursorPosition > secondsIndex) {\n            modifiedTimePart = TimeParts.seconds;\n            cursorStartPosition = secondsIndex + 1;\n            cursorEndPosition = timeString.length;\n        } else if (minutesIndex !== -1 && cursorPosition > minutesIndex) {\n            modifiedTimePart = TimeParts.minutes;\n            cursorStartPosition = minutesIndex + 1;\n            cursorEndPosition = secondsIndex > -1 ? secondsIndex : timeString.length;\n        } else {\n            modifiedTimePart = TimeParts.hours;\n            cursorStartPosition = hoursIndex;\n            cursorEndPosition = minutesIndex !== -1 ? minutesIndex : timeString.length;\n        }\n\n        return { modifiedTimePart, cursorStartPosition, cursorEndPosition };\n    }\n\n    /**\n     * @description Create time string for displaying inside input element of UI\n     */\n    private getTimeStringFromDate(value: D | null, timeFormat: TimeFormats): string {\n        if (!value || !this.dateAdapter.isValid(value)) { return ''; }\n\n        return this.dateAdapter.format(value, timeFormat);\n    }\n\n    private getDateFromTimeString(timeString: string): D | null {\n        if (!timeString) { return null; }\n\n        const hoursAndMinutesAndSeconds = timeString.match(HOURS_MINUTES_SECONDS_REGEXP);\n        const hoursAndMinutes = timeString.match(HOURS_MINUTES_REGEXP);\n        const hoursOnly = timeString.match(HOURS_ONLY_REGEXP);\n        const hoursAndMinutesInAmPm = timeString.match(AM_PM_FORMAT_REGEXP);\n\n        let hours: number = 0;\n        let minutes: number = 0;\n        let seconds: number = 0;\n\n        // tslint:disable:no-magic-numbers\n        if (hoursAndMinutesInAmPm) {\n            hours = Number(hoursAndMinutesInAmPm[1]);\n            minutes = Number(hoursAndMinutesInAmPm[2]);\n\n            if (/[p]/i.test(hoursAndMinutesInAmPm[3]) || (/[a]/i.test(hoursAndMinutesInAmPm[3]) && hours === 12)) {\n                hours += 12;\n            }\n        } else if (hoursAndMinutesAndSeconds) {\n            hours = Number(hoursAndMinutesAndSeconds[1]);\n            minutes = Number(hoursAndMinutesAndSeconds[2]);\n            seconds = Number(hoursAndMinutesAndSeconds[3]);\n        } else if (hoursAndMinutes) {\n            hours = Number(hoursAndMinutes[1]);\n            minutes = Number(hoursAndMinutes[2]);\n        } else if (hoursOnly) {\n            hours = Number(hoursOnly[1]);\n        } else {\n            return null;\n        }\n        // tslint:enable\n\n        const resultDate = this.dateAdapter.createDateTime(\n            this.dateAdapter.getYear(this.value),\n            this.dateAdapter.getMonth(this.value),\n            this.dateAdapter.getDate(this.value),\n            hours,\n            minutes,\n            seconds,\n            this.dateAdapter.getMilliseconds(this.value)\n        );\n\n        return this.getValidDateOrNull(resultDate);\n    }\n\n    private parseValidator: ValidatorFn = (): ValidationErrors | null => {\n        return this.focused ||\n            this.empty ||\n            this.lastValueValid ? null : { mcTimepickerParse: { text: this.viewValue } };\n    }\n\n    private minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n        const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));\n\n        return (!this.min || !controlValue || this.compareTime(this.min, controlValue) <= 0) ?\n            null :\n            { mcTimepickerLowerThenMin: { min: this.min, actual: controlValue } };\n    }\n\n    private maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n        const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));\n\n        return (!this.max || !controlValue || this.compareTime(this.max, controlValue) >= 0) ?\n            null :\n            { mcTimepickerHigherThenMax: { max: this.max, actual: controlValue } };\n    }\n\n    private compareTime(first: D, second: D): number {\n        const result = this.dateAdapter.getHours(first) - this.dateAdapter.getHours(second) ||\n            this.dateAdapter.getMinutes(first) - this.dateAdapter.getMinutes(second);\n\n        if (TimeFormats.HHmm === this.format) {\n            return result;\n        } else if (TimeFormats.HHmmss === this.format) {\n            return result || this.dateAdapter.getSeconds(first) - this.dateAdapter.getSeconds(second);\n        } else {\n            throw Error(`Unknown format: ${this.format}`);\n        }\n    }\n\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    private setViewValue(value: string) {\n        this.renderer.setProperty(this.elementRef.nativeElement, 'value', value);\n    }\n\n    private updateView() {\n        const formattedValue = this.getTimeStringFromDate(this.value, this.format);\n\n        this.setViewValue(formattedValue);\n    }\n\n    private setControl(control: AbstractControl) {\n        if (!this.control) {\n            this.control = control;\n        }\n    }\n\n    // tslint:disable-next-line:no-empty\n    private validatorOnChange = () => {};\n}\n","import { A11yModule } from '@angular/cdk/a11y';\nimport { PlatformModule } from '@angular/cdk/platform';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { McTimepicker } from './timepicker.directive';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        FormsModule\n    ],\n    declarations: [McTimepicker],\n    exports: [McTimepicker]\n})\nexport class McTimepickerModule {}\n"]}