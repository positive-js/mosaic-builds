{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@ptsecurity/mosaic/list/list-selection.component.ts","ng://@ptsecurity/mosaic/list/list.component.ts","ng://@ptsecurity/mosaic/list/list.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","__read","n","r","e","ar","push","error","__spread","arguments","concat","McListOption","elementRef","changeDetector","ngZone","listSelection","group","this","hasFocus","onFocus","Subject","onBlur","inputsInitialized","_disabled","_selected","defineProperty","prototype","_value","newValue","selected","listSelectionDisabled","disabled","groupDisabled","toBoolean","markForCheck","undefined","_showCheckbox","showCheckbox","coerceBooleanProperty","selectionModel","isSelected","setSelected","reportValueChange","ngOnInit","_this","list","some","compareWith","wasSelected","Promise","resolve","then","ngOnDestroy","removeOptionFromList","toggle","getLabel","text","nativeElement","textContent","select","deselect","getHeight","getClientRects","height","handleClick","$event","setSelectedOptionsByClick","hasModifierKey","focus","option","blur","onStable","asObservable","pipe","take","subscribe","run","getHostElement","Component","args","exportAs","selector","host","class","[class.mc-selected]","[class.mc-focused]","[class.mc-disabled]","[attr.tabindex]","[attr.disabled]","(focus)","(blur)","(click)","template","encapsulation","ViewEncapsulation","None","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","ElementRef","ChangeDetectorRef","NgZone","McListSelection","decorators","type","Inject","forwardRef","McOptgroup","Optional","ContentChildren","McLine","ViewChild","static","Input","MC_SELECTION_LIST_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","multi","source","McListSelectionMixinBase","mixinTabIndex","mixinDisabled","McListSelectionBase","changeDetectorRef","multiple","_super","_autoSelect","_noUnselectLast","horizontal","_tabIndex","userTabIndex","selectionChange","EventEmitter","destroyed","a1","a2","onTouched","onChange","_","MultipleMode","CHECKBOX","KEYBOARD","multipleMode","autoSelect","noUnselectLast","SelectionModel","__","constructor","create","__extends","merge","apply","options","map","ngAfterContentInit","keyManager","FocusKeyManager","withTypeAhead","withVerticalOrientation","withHorizontalOrientation","tabOut","takeUntil","setTimeout","setOptionsFromValues","changed","event","_c","added","_d","_e","removed","_f","changes","startWith","resetOptions","updateTabIndex","updateScrollSize","complete","setFirstItemActive","hasFocusedOption","setActiveItem","selectAll","forEach","deselectAll","first","withScrollSize","Math","floor","shiftKey","ctrlKey","setSelectedOptions","canDeselectLast","item","emitChangeEvent","setSelectedOptionsByKey","selectedOptionState","fromIndex","previousActiveItemIndex","toIndex","activeItemIndex","_a","toArray","slice","filter","renderedOption","activeItem","writeValue","values","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","getSelectedOptionValues","toggleFocusedOption","focusedIndex","isValidIndex","focusedOption","listOption","optionIndex","getOptionIndex","setPreviousItemActive","setNextItemActive","onKeyDown","keyCode","SPACE","ENTER","TAB","DOWN_ARROW","UP_ARROW","HOME","END","setLastItemActive","PAGE_UP","setPreviousPageItemActive","PAGE_DOWN","setNextPageItemActive","preventDefault","emit","McListSelectionChange","dropSubscriptions","listenToOptionsFocus","optionFocusSubscription","unsubscribe","optionBlurSubscription","optionFocusChanges","index","indexOf","updateActiveItem","optionBlurChanges","getOptionByValue","find","Boolean","inputs","(keydown)","(window:resize)","providers","Attribute","descendants","Output","McList","McListItem","McLineSetter","lines","handleFocus","classList","add","handleBlur","remove","McListModule","NgModule","imports","CommonModule","A11yModule","McPseudoCheckboxModule","McLineModule","McOptionModule","exports","declarations"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/* tslint:disable:no-empty */\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    Output,\n    QueryList,\n    ViewEncapsulation,\n    ChangeDetectorRef,\n    Inject,\n    OnDestroy,\n    OnInit,\n    ViewChild,\n    NgZone,\n    Optional\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusKeyManager, IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    hasModifierKey,\n    HOME,\n    PAGE_DOWN,\n    PAGE_UP,\n    SPACE,\n    TAB,\n    UP_ARROW\n} from '@ptsecurity/cdk/keycodes';\nimport {\n    McLine,\n    CanDisable,\n    mixinDisabled,\n    toBoolean,\n    CanDisableCtor,\n    HasTabIndexCtor,\n    mixinTabIndex,\n    HasTabIndex,\n    MultipleMode,\n    McOptgroup\n} from '@ptsecurity/mosaic/core';\nimport { merge, Observable, Subject, Subscription } from 'rxjs';\nimport { startWith, take, takeUntil } from 'rxjs/operators';\n\n\n// tslint:disable-next-line:naming-convention\nexport interface McOptionEvent {\n    option: McListOption;\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n    exportAs: 'mcListOption',\n    selector: 'mc-list-option',\n    host: {\n        class: 'mc-list-option mc-no-select',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': 'hasFocus',\n        '[class.mc-disabled]': 'disabled',\n\n        '[attr.tabindex]': 'tabIndex',\n        '[attr.disabled]': 'disabled || null',\n\n        '(focus)': 'focus()',\n        '(blur)': 'blur()',\n        '(click)': 'handleClick($event)'\n    },\n    templateUrl: 'list-option.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListOption implements OnDestroy, OnInit, IFocusableOption {\n    hasFocus: boolean = false;\n\n    readonly onFocus = new Subject<McOptionEvent>();\n\n    readonly onBlur = new Subject<McOptionEvent>();\n\n    @ContentChildren(McLine) lines: QueryList<McLine>;\n\n    @ViewChild('text', { static: false }) text: ElementRef;\n\n    // Whether the label should appear before or after the checkbox. Defaults to 'after'\n    @Input() checkboxPosition: 'before' | 'after';\n\n    /**\n     * This is set to true after the first OnChanges cycle so we don't clear the value of `selected`\n     * in the first cycle.\n     */\n    private inputsInitialized = false;\n\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this.selected && newValue !== this.value && this.inputsInitialized) {\n            this.selected = false;\n        }\n\n        this._value = newValue;\n    }\n    private _value: any;\n\n    @Input()\n    get disabled() {\n        const listSelectionDisabled = this.listSelection && this.listSelection.disabled;\n        const groupDisabled = this.group && this.group.disabled;\n\n        return listSelectionDisabled || groupDisabled || this._disabled;\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this.changeDetector.markForCheck();\n        }\n    }\n\n    private _disabled = false;\n\n    @Input()\n    get showCheckbox() {\n        return this._showCheckbox !== undefined ? this._showCheckbox : this.listSelection.showCheckbox;\n    }\n\n    set showCheckbox(value: any) {\n        this._showCheckbox = coerceBooleanProperty(value);\n    }\n\n    private _showCheckbox: boolean;\n\n    @Input()\n    get selected(): boolean {\n        return this.listSelection.selectionModel && this.listSelection.selectionModel.isSelected(this) || false;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            this.listSelection.reportValueChange();\n        }\n    }\n\n    private _selected = false;\n\n    get tabIndex(): any {\n        return this.disabled ? null : -1;\n    }\n\n    constructor(\n        private elementRef: ElementRef<HTMLElement>,\n        private changeDetector: ChangeDetectorRef,\n        private ngZone: NgZone,\n        @Inject(forwardRef(() => McListSelection)) public listSelection: McListSelection,\n        @Optional() readonly group: McOptgroup\n    ) {}\n\n    ngOnInit() {\n        const list = this.listSelection;\n\n        if (list._value && list._value.some((value) => list.compareWith(value, this._value))) {\n            this.setSelected(true);\n        }\n\n        const wasSelected = this._selected;\n\n        // List options that are selected at initialization can't be reported properly to the form\n        // control. This is because it takes some time until the selection-list knows about all\n        // available options. Also it can happen that the ControlValueAccessor has an initial value\n        // that should be used instead. Deferring the value change report to the next tick ensures\n        // that the form control value is not being overwritten.\n        Promise.resolve().then(() => {\n            if (this._selected || wasSelected) {\n                this.selected = true;\n                this.changeDetector.markForCheck();\n            }\n        });\n\n        this.inputsInitialized = true;\n    }\n\n    ngOnDestroy(): void {\n        if (this.selected) {\n            // We have to delay this until the next tick in order\n            // to avoid changed after checked errors.\n            Promise.resolve().then(() => this.selected = false);\n        }\n\n        this.listSelection.removeOptionFromList(this);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    getLabel() {\n        return this.text ? this.text.nativeElement.textContent : '';\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.listSelection.selectionModel) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.listSelection.selectionModel.select(this);\n        } else {\n            this.listSelection.selectionModel.deselect(this);\n        }\n\n        this.changeDetector.markForCheck();\n    }\n\n    getHeight(): number {\n        return this.elementRef.nativeElement.getClientRects()[0].height;\n    }\n\n    handleClick($event) {\n        if (this.disabled) { return; }\n\n        this.listSelection.setSelectedOptionsByClick(\n            this, hasModifierKey($event, 'shiftKey'), hasModifierKey($event, 'ctrlKey')\n        );\n    }\n\n    focus() {\n        if (!this.hasFocus) {\n            this.elementRef.nativeElement.focus();\n\n            this.onFocus.next({ option: this });\n\n            Promise.resolve().then(() => {\n                this.hasFocus = true;\n\n                this.changeDetector.markForCheck();\n            });\n        }\n    }\n\n    blur(): void {\n        // When animations are enabled, Angular may end up removing the option from the DOM a little\n        // earlier than usual, causing it to be blurred and throwing off the logic in the list\n        // that moves focus not the next item. To work around the issue, we defer marking the option\n        // as not focused until the next time the zone stabilizes.\n        this.ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                this.ngZone.run(() => {\n                    this.hasFocus = false;\n\n                    this.onBlur.next({ option: this });\n                });\n            });\n    }\n\n    getHostElement(): HTMLElement {\n        return this.elementRef.nativeElement;\n    }\n}\n\n\nexport const MC_SELECTION_LIST_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McListSelection),\n    multi: true\n};\n\nexport class McListSelectionChange {\n    constructor(public source: McListSelection, public option: McListOption) {}\n}\n\n\nexport class McListSelectionBase {\n    constructor(public elementRef: ElementRef) {}\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McListSelectionMixinBase: CanDisableCtor & HasTabIndexCtor & typeof McListSelectionBase\n    = mixinTabIndex(mixinDisabled(McListSelectionBase));\n\n@Component({\n    exportAs: 'mcListSelection',\n    selector: 'mc-list-selection',\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled'],\n    host: {\n        class: 'mc-list-selection',\n\n        '[attr.tabindex]': 'tabIndex',\n        '[attr.disabled]': 'disabled || null',\n\n        '(focus)': 'focus()',\n        '(blur)': 'blur()',\n        '(keydown)': 'onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    providers: [MC_SELECTION_LIST_VALUE_ACCESSOR],\n    preserveWhitespaces: false\n})\nexport class McListSelection extends McListSelectionMixinBase implements CanDisable, HasTabIndex, AfterContentInit,\n    ControlValueAccessor {\n\n    keyManager: FocusKeyManager<McListOption>;\n\n    @ContentChildren(McListOption, { descendants: true }) options: QueryList<McListOption>;\n\n    @Input()\n    get autoSelect(): boolean {\n        return this._autoSelect;\n    }\n\n    set autoSelect(value: boolean) {\n        this._autoSelect = coerceBooleanProperty(value);\n    }\n\n    private _autoSelect: boolean = true;\n\n    @Input()\n    get noUnselectLast(): boolean {\n        return this._noUnselectLast;\n    }\n\n    set noUnselectLast(value: boolean) {\n        this._noUnselectLast = coerceBooleanProperty(value);\n    }\n\n    private _noUnselectLast: boolean = true;\n\n    multipleMode: MultipleMode | null;\n\n    get multiple(): boolean {\n        return !!this.multipleMode;\n    }\n\n    @Input() horizontal: boolean = false;\n\n    @Input()\n    get tabIndex(): any {\n        return this.disabled ? -1 : this._tabIndex;\n    }\n\n    set tabIndex(value: any) {\n        this.userTabIndex = value;\n        this._tabIndex = value;\n    }\n\n    private _tabIndex = 0;\n\n    userTabIndex: number | null = null;\n\n    get showCheckbox(): boolean {\n        return this.multipleMode === MultipleMode.CHECKBOX;\n    }\n\n    // Emits a change event whenever the selected state of an option changes.\n    @Output() readonly selectionChange: EventEmitter<McListSelectionChange> = new EventEmitter<McListSelectionChange>();\n\n    selectionModel: SelectionModel<McListOption>;\n\n    get optionFocusChanges(): Observable<McOptionEvent> {\n        return merge(...this.options.map((option) => option.onFocus));\n    }\n\n    get optionBlurChanges(): Observable<McOptionEvent> {\n        return merge(...this.options.map((option) => option.onBlur));\n    }\n\n    // tslint:disable-next-line:orthodox-getter-and-setter naming-convention\n    _value: string[] | null;\n\n    /** Emits whenever the component is destroyed. */\n    private readonly destroyed = new Subject<void>();\n\n    private optionFocusSubscription: Subscription | null;\n\n    private optionBlurSubscription: Subscription | null;\n\n    constructor(\n        elementRef: ElementRef,\n        private changeDetectorRef: ChangeDetectorRef,\n        @Attribute('multiple') multiple: MultipleMode\n    ) {\n        super(elementRef);\n\n        if (multiple === MultipleMode.CHECKBOX || multiple === MultipleMode.KEYBOARD) {\n            this.multipleMode = multiple;\n        } else if (multiple !== null) {\n            this.multipleMode = MultipleMode.CHECKBOX;\n        }\n\n        if (this.multipleMode === MultipleMode.CHECKBOX) {\n            this.autoSelect = false;\n            this.noUnselectLast = false;\n        }\n\n        this.selectionModel = new SelectionModel<McListOption>(this.multiple);\n    }\n\n    /**\n     * Function used for comparing an option against the selected value when determining which\n     * options should appear as selected. The first argument is the value of an options. The second\n     * one is a value from the selected value. A boolean must be returned.\n     */\n    @Input() compareWith: (o1: any, o2: any) => boolean = (a1, a2) => a1 === a2;\n\n    ngAfterContentInit(): void {\n        this.horizontal = toBoolean(this.horizontal);\n\n        this.keyManager = new FocusKeyManager<McListOption>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation(!this.horizontal)\n            .withHorizontalOrientation(this.horizontal ? 'ltr' : null);\n\n        this.keyManager.tabOut\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(() => {\n                this._tabIndex = -1;\n\n                setTimeout(() => {\n                    this._tabIndex = this.userTabIndex || 0;\n                    this.changeDetectorRef.markForCheck();\n                });\n            });\n\n        if (this._value) {\n            this.setOptionsFromValues(this._value);\n        }\n\n        this.selectionModel.changed\n            .pipe(takeUntil(this.destroyed))\n            .subscribe((event) => {\n                for (const item of event.added) { item.selected = true; }\n\n                for (const item of event.removed) { item.selected = false; }\n            });\n\n        this.options.changes\n            .pipe(startWith(null), takeUntil(this.destroyed))\n            .subscribe(() => {\n                this.resetOptions();\n\n                // Check to see if we need to update our tab index\n                this.updateTabIndex();\n            });\n\n        this.updateScrollSize();\n    }\n\n    ngOnDestroy() {\n        this.destroyed.next();\n\n        this.destroyed.complete();\n    }\n\n    focus(): void {\n        if (this.options.length === 0) { return; }\n\n        this.keyManager.setFirstItemActive();\n    }\n\n    blur() {\n        if (!this.hasFocusedOption()) {\n            this.keyManager.setActiveItem(-1);\n        }\n\n        this.onTouched();\n        this.changeDetectorRef.markForCheck();\n    }\n\n    selectAll() {\n        this.options.forEach((option) => option.setSelected(true));\n\n        this.reportValueChange();\n    }\n\n    deselectAll() {\n        this.options.forEach((option) => option.setSelected(false));\n\n        this.reportValueChange();\n    }\n\n    updateScrollSize(): void {\n        if (this.horizontal || !this.options.first) { return; }\n\n        this.keyManager.withScrollSize(Math.floor(this.getHeight() / this.options.first.getHeight()));\n    }\n\n    setSelectedOptionsByClick(option: McListOption, shiftKey: boolean, ctrlKey: boolean): void {\n        if (shiftKey && this.multiple) {\n            this.setSelectedOptions(option);\n        } else if (ctrlKey) {\n            if (!this.canDeselectLast(option)) { return; }\n\n            this.selectionModel.toggle(option);\n        } else {\n            if (this.autoSelect) {\n                if (this.multipleMode !== MultipleMode.KEYBOARD) {\n                    this.selectionModel.toggle(option);\n                }\n\n                if (this.multipleMode === MultipleMode.KEYBOARD || !this.multiple) {\n                    this.options.forEach((item) => item.setSelected(false));\n                    option.setSelected(true);\n                }\n            }\n        }\n\n        this.emitChangeEvent(option);\n        this.reportValueChange();\n    }\n\n    setSelectedOptionsByKey(option: McListOption, shiftKey: boolean, ctrlKey: boolean): void {\n        if (shiftKey && this.multiple) {\n            this.setSelectedOptions(option);\n        } else if (ctrlKey) {\n            if (!this.canDeselectLast(option)) { return; }\n        } else {\n\n            if (this.multipleMode === MultipleMode.KEYBOARD || !this.multiple) {\n                this.options.forEach((item) => item.setSelected(false));\n                option.setSelected(true);\n            }\n        }\n\n        this.emitChangeEvent(option);\n        this.reportValueChange();\n    }\n\n    setSelectedOptions(option: McListOption): void {\n        const selectedOptionState = option.selected;\n\n        let fromIndex = this.keyManager.previousActiveItemIndex;\n        let toIndex = this.keyManager.previousActiveItemIndex = this.keyManager.activeItemIndex;\n\n        if (toIndex === fromIndex) { return; }\n\n        if (fromIndex > toIndex) {\n            [fromIndex, toIndex] = [toIndex, fromIndex];\n        }\n\n        this.options\n            .toArray()\n            .slice(fromIndex, toIndex + 1)\n            .filter((item) => !item.disabled)\n            .forEach((renderedOption) => {\n                const isLastRenderedOption = renderedOption === this.keyManager.activeItem;\n\n                if (isLastRenderedOption && renderedOption.selected && this.noUnselectLast) { return; }\n\n                renderedOption.setSelected(!selectedOptionState);\n            });\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(values: string[]): void {\n        this._value = values;\n\n        if (this.options) {\n            this.setOptionsFromValues(values || []);\n        }\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this.onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    // Implemented as a part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        if (this.options) {\n            this.options.forEach((option) => option.disabled = isDisabled);\n        }\n    }\n\n    getSelectedOptionValues(): string[] {\n        return this.options.filter((option) => option.selected).map((option) => option.value);\n    }\n\n    // Toggles the selected state of the currently focused option.\n    toggleFocusedOption(): void {\n        const focusedIndex = this.keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this.isValidIndex(focusedIndex)) {\n            const focusedOption: McListOption = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this.canDeselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this.emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    canDeselectLast(listOption: McListOption): boolean {\n        return !(this.noUnselectLast && this.selectionModel.selected.length === 1 && listOption.selected);\n    }\n\n    getHeight(): number {\n        return this.elementRef.nativeElement.getClientRects()[0].height;\n    }\n\n    // View to model callback that should be called if the list or its options lost focus.\n    // tslint:disable-next-line:no-empty\n    onTouched: () => void = () => {};\n\n    // Removes an option from the selection list and updates the active item.\n    removeOptionFromList(option: McListOption) {\n        if (option.hasFocus) {\n            const optionIndex = this.getOptionIndex(option);\n\n            // Check whether the option is the last item\n            if (optionIndex > 0) {\n                this.keyManager.setPreviousItemActive();\n            } else if (optionIndex === 0 && this.options.length > 1) {\n                this.keyManager.setNextItemActive();\n            }\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent) {\n        // tslint:disable-next-line: deprecation\n        const keyCode = event.keyCode;\n\n        switch (keyCode) {\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n\n                break;\n\n            case TAB:\n                this.keyManager.tabOut.next();\n\n                return;\n\n            case DOWN_ARROW:\n                this.keyManager.setNextItemActive();\n\n                break;\n            case UP_ARROW:\n                this.keyManager.setPreviousItemActive();\n\n                break;\n            case HOME:\n                this.keyManager.setFirstItemActive();\n\n                break;\n            case END:\n                this.keyManager.setLastItemActive();\n\n                break;\n            case PAGE_UP:\n                this.keyManager.setPreviousPageItemActive();\n\n                break;\n            case PAGE_DOWN:\n                this.keyManager.setNextPageItemActive();\n\n                break;\n            default:\n                return;\n        }\n\n        event.preventDefault();\n\n        this.setSelectedOptionsByKey(\n            this.keyManager.activeItem as McListOption,\n            hasModifierKey(event, 'shiftKey'),\n            hasModifierKey(event, 'ctrlKey')\n        );\n    }\n\n    // Reports a value change to the ControlValueAccessor\n    reportValueChange() {\n        if (this.options) {\n            const value = this.getSelectedOptionValues();\n            this.onChange(value);\n            this._value = value;\n        }\n    }\n\n    // Emits a change event if the selected state of an option changed.\n    emitChangeEvent(option: McListOption) {\n        this.selectionChange.emit(new McListSelectionChange(this, option));\n    }\n\n    protected updateTabIndex(): void {\n        this._tabIndex = this.userTabIndex || (this.options.length === 0 ? -1 : 0);\n    }\n\n    private resetOptions() {\n        this.dropSubscriptions();\n        this.listenToOptionsFocus();\n    }\n\n    private dropSubscriptions() {\n        if (this.optionFocusSubscription) {\n            this.optionFocusSubscription.unsubscribe();\n            this.optionFocusSubscription = null;\n        }\n\n        if (this.optionBlurSubscription) {\n            this.optionBlurSubscription.unsubscribe();\n            this.optionBlurSubscription = null;\n        }\n    }\n\n    private listenToOptionsFocus(): void {\n        this.optionFocusSubscription = this.optionFocusChanges\n            .subscribe((event) => {\n                const index: number = this.options.toArray().indexOf(event.option);\n\n                if (this.isValidIndex(index)) {\n                    this.keyManager.updateActiveItem(index);\n                }\n            });\n\n        this.optionBlurSubscription = this.optionBlurChanges\n            .subscribe(() => this.blur());\n    }\n\n    /** Checks whether any of the options is focused. */\n    private hasFocusedOption() {\n        return this.options.some((option) => option.hasFocus);\n    }\n\n    // Returns the option with the specified value.\n    private getOptionByValue(value: string): McListOption | undefined {\n        return this.options.find((option) => option.value === value);\n    }\n\n    // Sets the selected options based on the specified values.\n    private setOptionsFromValues(values: string[]) {\n        this.options.forEach((option) => option.setSelected(false));\n\n        values\n            .map((value) => this.getOptionByValue(value))\n            .filter(Boolean)\n            .forEach((option) => option!.setSelected(true));\n    }\n\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    // Returns the index of the specified list option.\n    private getOptionIndex(option: McListOption): number {\n        return this.options.toArray().indexOf(option);\n    }\n\n    // View to model callback that should be called whenever the selected options change.\n    private onChange: (value: any) => void = (_: any) => {};\n}\n","// todo пока не делаем, перенесено из материала, но у нас в доках таких простых списков нет.\nimport {\n    AfterContentInit, ChangeDetectionStrategy, Component, ContentChildren, ElementRef, QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { McLine, McLineSetter } from '@ptsecurity/mosaic/core';\n\n\n@Component({\n    selector: 'mc-list',\n    host: { class: 'mc-list' },\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McList {}\n\n\n@Component({\n    selector: 'mc-list-item, a[mc-list-item]',\n    host: {\n        class: 'mc-list-item',\n        '(focus)': 'handleFocus()',\n        '(blur)': 'handleBlur()'\n    },\n    templateUrl: './list-item.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListItem implements AfterContentInit {\n    @ContentChildren(McLine) lines: QueryList<McLine>;\n\n    constructor(private elementRef: ElementRef) {}\n\n    ngAfterContentInit() {\n        // tslint:disable-next-line:no-unused-expression\n        new McLineSetter(this.lines, this.elementRef);\n    }\n\n    handleFocus() {\n        this.elementRef.nativeElement.classList.add('mc-focused');\n    }\n\n    handleBlur() {\n        this.elementRef.nativeElement.classList.remove('mc-focused');\n    }\n\n    getHostElement(): HTMLElement {\n        return this.elementRef.nativeElement;\n    }\n}\n","import { A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { McLineModule, McOptionModule, McPseudoCheckboxModule } from '@ptsecurity/mosaic/core';\n\nimport { McListSelection, McListOption } from './list-selection.component';\nimport { McList, McListItem } from './list.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        McPseudoCheckboxModule,\n        McLineModule,\n        McOptionModule\n    ],\n    exports: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McOptionModule\n    ],\n    declarations: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption\n    ]\n})\nexport class McListModule {}\n"]}