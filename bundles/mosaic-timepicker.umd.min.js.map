{"version":3,"file":"mosaic-timepicker.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../packages/mosaic/timepicker/timepicker.constants.ts","../../packages/mosaic/timepicker/timepicker.ts","../../packages/mosaic/timepicker/timepicker.module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","// tslint:disable:naming-convention\nexport enum TimeParts {\n    hours,\n    minutes,\n    seconds\n}\n\nexport enum TimeFormats {\n    HHmmss = 'HH:mm:ss',\n    HHmm = 'HH:mm'\n}\n\nexport const TIMEFORMAT_PLACEHOLDERS: { [timeFormat: string]: string } = {\n    [TimeFormats.HHmmss]: '  :  :  ',\n    [TimeFormats.HHmm]: '  :  '\n};\n\nexport const DEFAULT_TIME_FORMAT: TimeFormats = TimeFormats.HHmm;\n\nexport const HOURS_MINUTES_SECONDS_REGEXP =\n    new RegExp(/^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]|[0-9]):([0-5][0-9]|[0-9])?$/);\nexport const HOURS_MINUTES_REGEXP = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]|[0-9])?$/;\nexport const HOURS_ONLY_REGEXP = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):?$/;\n\nexport const SECONDS_PER_MINUTE: number = 59;\nexport const MINUTES_PER_HOUR: number = 59;\nexport const HOURS_PER_DAY: number = 23;\n\n// TODO Move it to common CDK\nexport const ARROW_UP_KEYCODE: string = 'ArrowUp';\nexport const ARROW_DOWN_KEYCODE: string = 'ArrowDown';\nexport const ARROW_LEFT_KEYCODE: string = 'ArrowLeft';\nexport const ARROW_RIGHT_KEYCODE: string = 'ArrowRight';\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    Directive,\n    DoCheck,\n    ElementRef,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Renderer2,\n    Self\n} from '@angular/core';\nimport {\n    ControlValueAccessor,\n    FormControl,\n    FormGroupDirective,\n    NgControl,\n    NgForm,\n    ValidationErrors\n} from '@angular/forms';\nimport { DateAdapter } from '@ptsecurity/cdk/datetime';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { MC_INPUT_VALUE_ACCESSOR } from '@ptsecurity/mosaic/input';\nimport {\n    noop,\n    Subject\n} from 'rxjs';\n\nimport {\n    ARROW_DOWN_KEYCODE,\n    ARROW_LEFT_KEYCODE,\n    ARROW_RIGHT_KEYCODE,\n    ARROW_UP_KEYCODE,\n    DEFAULT_TIME_FORMAT,\n    HOURS_PER_DAY,\n    HOURS_MINUTES_REGEXP,\n    HOURS_MINUTES_SECONDS_REGEXP,\n    HOURS_ONLY_REGEXP,\n    MINUTES_PER_HOUR,\n    SECONDS_PER_MINUTE,\n    TIMEFORMAT_PLACEHOLDERS,\n    TimeFormats,\n    TimeParts\n} from './timepicker.constants';\n\n\nlet uniqueComponentIdSuffix: number = 0;\n\nexport class McTimepickerBase {\n    constructor(\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl) { }\n}\n\n// tslint:disable-next-line naming-convention\nexport const McTimepickerMixinBase:\n    CanUpdateErrorStateCtor & typeof McTimepickerBase = mixinErrorState(McTimepickerBase);\n\n@Directive({\n    selector: 'input[mcTimepicker]',\n    exportAs: 'mcTimepickerInput',\n    host: {\n        class: 'mc-timepicker mc-input',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '[attr.time-format]': 'timeFormat',\n        '[attr.min-time]': 'minTime',\n        '[attr.max-time]': 'maxTime',\n        '[attr.value]': 'value',\n        '[attr.aria-invalid]': 'errorState',\n\n        '(blur)': 'onBlur()',\n        '(focus)': 'focusChanged(true)',\n\n        '(input)': 'onInput()',\n        '(paste)': 'onPaste($event)',\n\n        '(keydown)': 'onKeyDown($event)'\n    },\n    providers: [\n        {\n            provide: McFormFieldControl,\n            useExisting: forwardRef(() => McTimepicker)\n        }\n    ]\n})\nexport class McTimepicker<D> extends McTimepickerMixinBase\n    implements McFormFieldControl<any>, OnDestroy, DoCheck, CanUpdateErrorState, ControlValueAccessor {\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-timepicker';\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) { return this.ngControl.disabled; }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n        }\n\n        this.stateChanges.next();\n    }\n\n    private _disabled: boolean;\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n    }\n\n    private _id: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    private _required: boolean;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this.inputValueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this.inputValueAccessor.value = value;\n            this.applyInputChanges();\n        }\n    }\n\n    @Input('time-format')\n    get timeFormat(): TimeFormats {\n        return this._timeFormat;\n    }\n\n    set timeFormat(formatValue: TimeFormats) {\n        this._timeFormat = Object\n            .keys(TimeFormats)\n            .map((timeFormatKey) => TimeFormats[timeFormatKey])\n            .indexOf(formatValue) > -1 ? formatValue : DEFAULT_TIME_FORMAT;\n\n        this.placeholder = TIMEFORMAT_PLACEHOLDERS[this._timeFormat];\n\n        setTimeout(() => this.applyInputChanges({ doTimestringReformat: true }));\n    }\n\n    private _timeFormat: TimeFormats;\n\n    @Input('min-time')\n    get minTime(): string | null {\n        return this._minTime;\n    }\n\n    set minTime(value: string | null) {\n        this._minTime = value;\n        (this.ngControl.control as FormControl).updateValueAndValidity();\n    }\n\n    private _minTime: string | null = null;\n\n    @Input('max-time')\n    get maxTime(): string | null {\n        return this._maxTime;\n    }\n\n    set maxTime(maxValue: string | null) {\n        this._maxTime = maxValue;\n        (this.ngControl.control as FormControl).updateValueAndValidity();\n    }\n\n    private _maxTime: string | null = null;\n\n    private readonly uid = `mc-timepicker-${uniqueComponentIdSuffix++}`;\n    private readonly inputValueAccessor: { value: any };\n\n    private originalValue: any;\n    private previousNativeValue: any;\n    private currentDateTimeInput: D | undefined;\n\n    private onChange: (value: any) => void;\n    private onTouched: () => void;\n\n    constructor(\n        private readonly elementRef: ElementRef,\n        @Optional() @Self() public ngControl: NgControl,\n        @Optional() parentForm: NgForm,\n        @Optional() parentFormGroup: FormGroupDirective,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        @Optional() @Self() @Inject(MC_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n        private readonly renderer: Renderer2,\n        @Optional() private dateAdapter: DateAdapter<any>\n    ) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (!this.dateAdapter) {\n            throw Error(`McTimepicker: No provider found for DateAdapter. You must import one of the existing ` +\n                `modules at your application root or provide a custom implementation or use exists ones.`);\n        }\n\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this.inputValueAccessor = inputValueAccessor || this.elementRef.nativeElement;\n\n        this.previousNativeValue = this.value;\n        this.onChange = noop;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n\n        this.placeholder = TIMEFORMAT_PLACEHOLDERS[DEFAULT_TIME_FORMAT];\n\n        if (this.ngControl) {\n            // Instead of NG_VALUE_ACCESSOR (https://github.com/angular/material2/issues/8158#issuecomment-344618103)\n            this.ngControl.valueAccessor = this;\n\n            // To avoid cyclic dependency https://stackoverflow.com/a/49578414\n            const control = this.ngControl.control as FormControl;\n            const myValidators = [\n                () => this.parseValidator(),\n                () => this.minTimeValidator(),\n                () => this.maxTimeValidator()\n            ];\n            const validators = control.validator\n                ? [control.validator, ...myValidators]\n                : myValidators;\n\n            control.setValidators(validators);\n            control.updateValueAndValidity();\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.stateChanges.complete();\n    }\n\n    ngDoCheck(): void {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this.dirtyCheckNativeValue();\n    }\n\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    focusChanged(isFocused: boolean): void {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.onTouched();\n            this.stateChanges.next();\n        }\n    }\n\n    onBlur() {\n        this.applyInputChanges();\n        this.focusChanged(false);\n    }\n\n    onPaste($event) {\n        $event.preventDefault();\n        const clipboardUserInput: string = $event.clipboardData.getData('text');\n\n        if (this.getDateFromTimeString(clipboardUserInput) === undefined) { return; }\n\n        this.elementRef.nativeElement.value = clipboardUserInput;\n        this.onInput();\n    }\n\n    onInput() {\n        const initialCursorStart: number = this.elementRef.nativeElement.selectionStart;\n        const initialCursorEnd: number = this.elementRef.nativeElement.selectionEnd;\n        let isAutocompleteTriggered: boolean = false;\n\n        const {\n            hoursOnly,\n            hoursAndMinutes,\n            hoursAndMinutesAndSeconds\n        } = this.getParsedTimeParts(this.elementRef.nativeElement.value);\n\n        // tslint:disable no-magic-numbers\n        if (hoursOnly &&\n            hoursOnly[1] &&\n            hoursOnly[1].length === 2) {\n            isAutocompleteTriggered = true;\n        } else if (hoursAndMinutes &&\n            hoursAndMinutes[1].length === 1 &&\n            hoursAndMinutes[2] &&\n            hoursAndMinutes[2].length === 2) {\n            isAutocompleteTriggered = true;\n        } else if (hoursAndMinutesAndSeconds &&\n            hoursAndMinutesAndSeconds[1].length === 2 &&\n            hoursAndMinutesAndSeconds[2].length === 2 &&\n            hoursAndMinutesAndSeconds[3] &&\n            hoursAndMinutesAndSeconds[3].length === 2) {\n            isAutocompleteTriggered = true;\n        }\n        // tslint:enable no-magic-numbers\n\n        this.applyInputChanges({ doTimestringReformat: isAutocompleteTriggered });\n\n        this.elementRef.nativeElement.selectionStart = initialCursorStart;\n        this.elementRef.nativeElement.selectionEnd = initialCursorEnd;\n\n        if (isAutocompleteTriggered && this.ngControl.errors === null) {\n            this.createSelectionOfTimeComponentInInput(initialCursorStart + 1);\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this.elementRef.nativeElement.value && !this.isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    writeValue(value: D | null): void {\n        if (value !== null) {\n            this.saveOriginalValue(value);\n\n            this.renderer.setProperty(\n                this.elementRef.nativeElement,\n                'value',\n                this.getTimeStringFromDate(value, this.timeFormat)\n            );\n\n            this.applyInputChanges();\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n        const keyCode: string = this.getKeyCode(event);\n\n        if (keyCode === ARROW_UP_KEYCODE || keyCode === ARROW_DOWN_KEYCODE) {\n            this.upDownTimeByArrowKeys(event);\n        }\n\n        if (keyCode === ARROW_LEFT_KEYCODE || keyCode === ARROW_RIGHT_KEYCODE) {\n            this.switchSelectionBetweenTimeparts(event);\n        }\n\n    }\n\n    registerOnChange(fn: (value: D) => void): void {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    saveOriginalValue(value: D): void {\n        if (this.dateAdapter.isValid(value)) {\n            this.originalValue = value;\n        }\n    }\n\n    /** Does some manual dirty checking on the native input `value` property. */\n    private dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this.previousNativeValue !== newValue) {\n            this.previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Checks whether the input is invalid based on the native validation. */\n    private isBadInput(): boolean {\n        const validity = (<HTMLInputElement> this.elementRef.nativeElement).validity;\n\n        return validity && validity.badInput;\n    }\n\n    private applyInputChanges(applyParams: { changedTime?: D; doTimestringReformat?: boolean } = {}): void {\n        const { changedTime, doTimestringReformat = true } = applyParams;\n        const timeToApply: D | undefined = changedTime ||\n            this.getDateFromTimeString(this.elementRef.nativeElement.value);\n        this.currentDateTimeInput = timeToApply;\n\n        if (doTimestringReformat && timeToApply !== undefined) {\n            const selectionStart: number = this.elementRef.nativeElement.selectionStart;\n            const selectionEnd: number = this.elementRef.nativeElement.selectionEnd;\n            this.renderer.setProperty(\n                this.elementRef.nativeElement,\n                'value',\n                this.getTimeStringFromDate(timeToApply, this.timeFormat)\n            );\n            this.elementRef.nativeElement.selectionStart = selectionStart;\n            this.elementRef.nativeElement.selectionEnd = selectionEnd;\n        }\n\n        (<FormControl> this.ngControl.control).updateValueAndValidity();\n        const result = this.ngControl.errors === null && timeToApply !== undefined ? timeToApply : null;\n        this.onChange(result);\n        this.stateChanges.next();\n    }\n\n    private upDownTimeByArrowKeys(event: KeyboardEvent): void {\n        event.preventDefault();\n\n        let changedTime: D | undefined = this.currentDateTimeInput;\n        if (changedTime !== undefined) {\n            const cursorPos = this.elementRef.nativeElement.selectionStart;\n\n            const modifiedTimePart = this.getTimeEditMetrics(cursorPos)\n                .modifiedTimePart;\n            const keyCode: string = this.getKeyCode(event);\n            if (keyCode === ARROW_UP_KEYCODE) { changedTime = this.incrementTime(changedTime, modifiedTimePart); }\n            if (keyCode === ARROW_DOWN_KEYCODE) { changedTime = this.decrementTime(changedTime, modifiedTimePart); }\n            this.applyInputChanges({ changedTime });\n            this.createSelectionOfTimeComponentInInput(cursorPos);\n        }\n    }\n\n    private switchSelectionBetweenTimeparts(event: KeyboardEvent): void {\n        const changedTime: D | undefined = this.currentDateTimeInput;\n        const keyCode: string = this.getKeyCode(event);\n\n        if (changedTime !== undefined) {\n            let cursorPos: number = this.elementRef.nativeElement.selectionStart;\n            if (keyCode === ARROW_LEFT_KEYCODE) {\n                cursorPos = this.getCursorPositionOfPrevTimePartStart(cursorPos, this.elementRef.nativeElement.value);\n            } else if (keyCode === ARROW_RIGHT_KEYCODE) {\n                cursorPos = this.getCursorPositionOfNextTimePartStart(cursorPos, this.elementRef.nativeElement.value);\n            }\n            this.createSelectionOfTimeComponentInInput(cursorPos);\n        }\n    }\n\n    /**\n     * @description Microsoft EDGE doesn't support KeyboaedEvent.code thus we need this helper\n     */\n    private getKeyCode(event: KeyboardEvent): string {\n        return event.code || event.key;\n    }\n\n    private createSelectionOfTimeComponentInInput(cursorPos: number): void {\n        setTimeout(() => {\n            const newEditParams = this.getTimeEditMetrics(cursorPos);\n            this.elementRef.nativeElement.selectionStart = newEditParams.cursorStartPosition;\n            this.elementRef.nativeElement.selectionEnd = newEditParams.cursorEndPosition;\n        });\n    }\n\n    private incrementTime(dateVal: D, whatToIncrement: TimeParts = TimeParts.seconds): D {\n        let { hours, minutes, seconds } = this.getTimeDigitsFromDate(dateVal);\n\n        switch (whatToIncrement) {\n            case TimeParts.hours:\n                hours++;\n                break;\n            case TimeParts.minutes:\n                minutes++;\n                break;\n            case TimeParts.seconds:\n                seconds++;\n                break;\n            default:\n        }\n\n        if (seconds > SECONDS_PER_MINUTE) { seconds = 0; }\n\n        if (minutes > MINUTES_PER_HOUR) { minutes = 0; }\n\n        if (hours > HOURS_PER_DAY) { hours = 0; }\n\n        return <D> this.getDateFromTimeDigits(hours, minutes, seconds);\n    }\n\n    /**\n     * @description Decrement part of time\n     */\n    private decrementTime(dateVal: D, whatToDecrement: TimeParts = TimeParts.seconds): D {\n        let { hours, minutes, seconds } = this.getTimeDigitsFromDate(dateVal);\n\n        switch (whatToDecrement) {\n            case TimeParts.hours:\n                hours--;\n                break;\n            case TimeParts.minutes:\n                minutes--;\n                break;\n            case TimeParts.seconds:\n                seconds--;\n                break;\n            default:\n        }\n\n        if (seconds < 0) { seconds = SECONDS_PER_MINUTE; }\n\n        if (minutes < 0) { minutes = MINUTES_PER_HOUR; }\n\n        if (hours < 0) { hours = HOURS_PER_DAY; }\n\n        return <D> this.getDateFromTimeDigits(hours, minutes, seconds);\n    }\n\n    private getCursorPositionOfPrevTimePartStart(cursorPos: number, timeString: string): number {\n        return cursorPos === 0 ? timeString.length : cursorPos - 1;\n    }\n\n    private getCursorPositionOfNextTimePartStart(\n        cursorPos: number, timeString: string, timeDevider: string = ':'\n    ): number {\n        const nextDividerPos: number = timeString.indexOf(timeDevider, cursorPos);\n\n        return nextDividerPos !== undefined ? nextDividerPos + 1 : 0;\n    }\n\n    /**\n     * @description Get params for arrow-keys (up/down) time valie edit.\n     * @param cursorPosition Current cursor position in timeString\n     */\n    private getTimeEditMetrics(cursorPosition: number): {\n        modifiedTimePart: TimeParts;\n        cursorStartPosition: number;\n        cursorEndPosition: number;\n    } {\n        const timeString: string = this.elementRef.nativeElement.value;\n        let modifiedTimePart: TimeParts;\n        let cursorStartPosition: number;\n        let cursorEndPosition: number;\n        const hoursIndex = 0;\n        const minutesIndex = timeString.indexOf(':', hoursIndex + 1);\n        const secondsIndex = minutesIndex !== -1 ? timeString.indexOf(':', minutesIndex + 1) : -1;\n\n        if (secondsIndex !== -1 && cursorPosition > secondsIndex) {\n            modifiedTimePart = TimeParts.seconds;\n            cursorStartPosition = secondsIndex + 1;\n            cursorEndPosition = timeString.length;\n        } else if (minutesIndex !== -1 && cursorPosition > minutesIndex) {\n            modifiedTimePart = TimeParts.minutes;\n            cursorStartPosition = minutesIndex + 1;\n            cursorEndPosition = secondsIndex > -1 ? secondsIndex : timeString.length;\n        } else {\n            modifiedTimePart = TimeParts.hours;\n            cursorStartPosition = hoursIndex;\n            cursorEndPosition = minutesIndex !== -1 ? minutesIndex : timeString.length;\n        }\n\n        return {\n            modifiedTimePart,\n            cursorStartPosition,\n            cursorEndPosition\n        };\n    }\n\n    /**\n     * @description Create time string for displaying inside input element of UI\n     */\n    private getTimeStringFromDate(value: D, timeFormat: TimeFormats = DEFAULT_TIME_FORMAT): string {\n        if (value === undefined || value === null) {\n            return '';\n        }\n\n        return this.dateAdapter.format(value, timeFormat);\n    }\n\n    private getParsedTimeParts(timeString: string): {\n        hoursOnly: any;\n        hoursAndMinutes: any;\n        hoursAndMinutesAndSeconds: any;\n    } {\n        const momentWrappedTime = this.dateAdapter.parse(timeString, [\n            'h:m a',\n            'h:m:s a',\n            'H:m',\n            'H:m:s'\n        ]);\n\n        const convertedTimeString = momentWrappedTime !== null\n            ? momentWrappedTime.format('H:m:s')\n            : '';\n\n        const hoursAndMinutesAndSeconds = convertedTimeString.match(HOURS_MINUTES_SECONDS_REGEXP);\n        const hoursAndMinutes = convertedTimeString.match(HOURS_MINUTES_REGEXP);\n        const hoursOnly = convertedTimeString.match(HOURS_ONLY_REGEXP);\n\n        return {\n            hoursOnly,\n            hoursAndMinutes,\n            hoursAndMinutesAndSeconds\n        };\n    }\n\n    /**\n     * @description Create Date object from separate parts of time\n     */\n    private getDateFromTimeDigits(hours: number, minutes: number, seconds: number = 0): D | undefined {\n        return this.getDateFromTimeString(`${hours}:${minutes}:${seconds}`);\n    }\n\n    private getDateFromTimeString(timeString: string): D | undefined {\n        if (timeString === undefined) { return; }\n\n        const {\n            hoursOnly,\n            hoursAndMinutes,\n            hoursAndMinutesAndSeconds\n        } = this.getParsedTimeParts(timeString);\n\n        if (timeString.trim().length === 0 ||\n            hoursOnly === null && hoursAndMinutes === null && hoursAndMinutesAndSeconds === null) {\n            return;\n        }\n\n        // tslint:disable no-magic-numbers\n        let hours: number = 0;\n        let minutes: number = 0;\n        let seconds: number = 0;\n\n        if (hoursOnly) {\n            hours = Number(hoursOnly[1]);\n        } else if (hoursAndMinutes) {\n            hours = Number(hoursAndMinutes[1]);\n            minutes = Number(hoursAndMinutes[2]);\n        } else if (hoursAndMinutesAndSeconds) {\n            hours = Number(hoursAndMinutesAndSeconds[1]);\n            minutes = Number(hoursAndMinutesAndSeconds[2]);\n            seconds = Number(hoursAndMinutesAndSeconds[3]);\n        }\n\n        const resultDate: D = this.dateAdapter.createDateTime(\n            this.dateAdapter.getYear(this.originalValue),\n            this.dateAdapter.getMonth(this.originalValue),\n            this.dateAdapter.getDate(this.originalValue),\n            hours,\n            minutes,\n            seconds,\n            0\n        );\n\n        return this.dateAdapter.isValid(resultDate) ? resultDate : undefined;\n    }\n\n    private getTimeDigitsFromDate(dateVal: D): { hours: number; minutes: number; seconds: number } {\n        return {\n            hours: this.dateAdapter.getHours(dateVal),\n            minutes: this.dateAdapter.getMinutes(dateVal),\n            seconds: this.dateAdapter.getSeconds(dateVal)\n        };\n    }\n\n    private parseValidator(): ValidationErrors | null {\n        return this.currentDateTimeInput === undefined ?\n            { mcTimepickerParse: { text: this.elementRef.nativeElement.value } } :\n            null;\n    }\n\n    private minTimeValidator(): ValidationErrors | null {\n        if (\n            this.minTime &&\n            this.currentDateTimeInput !== undefined &&\n            this.isTimeLowerThenMin(this.currentDateTimeInput)\n        ) {\n            return { mcTimepickerLowerThenMintime: { text: this.elementRef.nativeElement.value } };\n        }\n\n        return null;\n    }\n\n    private maxTimeValidator(): ValidationErrors | null {\n        if (\n            this.maxTime &&\n            this.currentDateTimeInput !== undefined &&\n            this.isTimeGreaterThenMax(this.currentDateTimeInput)\n        ) {\n            return { mcTimepickerHigherThenMaxtime: { text: this.elementRef.nativeElement.value } };\n        }\n\n        return null;\n    }\n\n    private isTimeLowerThenMin(timeToCompare: D): boolean {\n        if (timeToCompare === undefined || timeToCompare ===  null || this.minTime === null) {\n            return false;\n        }\n\n        return this.dateAdapter.compareDateTime(timeToCompare, this.getDateFromTimeString(this.minTime)) < 0;\n    }\n\n    private isTimeGreaterThenMax(timeToCompare: D): boolean {\n        if (timeToCompare === undefined || timeToCompare ===  null || this.maxTime === null) {\n            return false;\n        }\n\n        return this.dateAdapter.compareDateTime(timeToCompare, this.getDateFromTimeString(this.maxTime)) >= 0;\n    }\n}\n","import { A11yModule } from '@angular/cdk/a11y';\nimport { PlatformModule } from '@angular/cdk/platform';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { McTimepicker } from './timepicker';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        FormsModule\n    ],\n    declarations: [McTimepicker],\n    exports: [McTimepicker]\n})\nexport class McTimepickerModule {}\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","setPrototypeOf","__proto__","Array","p","hasOwnProperty","hours","minutes","seconds","HHmmss","HHmm","TIMEFORMAT_PLACEHOLDERS","_a","TimeFormats","DEFAULT_TIME_FORMAT","HOURS_MINUTES_SECONDS_REGEXP","RegExp","HOURS_MINUTES_REGEXP","HOURS_ONLY_REGEXP","uniqueComponentIdSuffix","McTimepickerBase","defaultErrorStateMatcher","parentForm","parentFormGroup","ngControl","McTimepickerMixinBase","mixinErrorState","McTimepicker","_super","elementRef","inputValueAccessor","renderer","dateAdapter","_this","call","stateChanges","Subject","focused","controlType","_minTime","_maxTime","uid","Error","nativeElement","previousNativeValue","value","onChange","noop","id","placeholder","valueAccessor","control","myValidators","parseValidator","minTimeValidator","maxTimeValidator","validators","validator","concat","setValidators","updateValueAndValidity","tslib_1.__extends","defineProperty","disabled","_disabled","coerceBooleanProperty","next","_id","_required","applyInputChanges","_timeFormat","formatValue","keys","map","timeFormatKey","indexOf","setTimeout","doTimestringReformat","maxValue","ngOnDestroy","complete","ngDoCheck","updateErrorState","dirtyCheckNativeValue","focus","focusChanged","isFocused","onTouched","onBlur","onPaste","$event","preventDefault","clipboardUserInput","clipboardData","getData","undefined","getDateFromTimeString","onInput","initialCursorStart","selectionStart","initialCursorEnd","selectionEnd","isAutocompleteTriggered","getParsedTimeParts","hoursOnly","hoursAndMinutes","hoursAndMinutesAndSeconds","length","errors","createSelectionOfTimeComponentInInput","isBadInput","onContainerClick","writeValue","saveOriginalValue","setProperty","getTimeStringFromDate","timeFormat","onKeyDown","event","keyCode","getKeyCode","upDownTimeByArrowKeys","switchSelectionBetweenTimeparts","registerOnChange","fn","registerOnTouched","isValid","originalValue","newValue","validity","badInput","applyParams","changedTime","timeToApply","currentDateTimeInput","result","cursorPos","modifiedTimePart","getTimeEditMetrics","incrementTime","decrementTime","getCursorPositionOfPrevTimePartStart","getCursorPositionOfNextTimePartStart","code","key","newEditParams","cursorStartPosition","cursorEndPosition","dateVal","whatToIncrement","TimeParts","getTimeDigitsFromDate","getDateFromTimeDigits","whatToDecrement","timeString","timeDevider","nextDividerPos","cursorPosition","minutesIndex","hoursIndex","secondsIndex","format","momentWrappedTime","parse","convertedTimeString","match","trim","Number","resultDate","createDateTime","getYear","getMonth","getDate","getHours","getMinutes","getSeconds","mcTimepickerParse","text","minTime","isTimeLowerThenMin","mcTimepickerLowerThenMintime","maxTime","isTimeGreaterThenMax","mcTimepickerHigherThenMaxtime","timeToCompare","compareDateTime","type","Directive","args","selector","exportAs","host","class","[attr.id]","[attr.placeholder]","[disabled]","[required]","[attr.time-format]","[attr.min-time]","[attr.max-time]","[attr.value]","[attr.aria-invalid]","(blur)","(focus)","(input)","(paste)","(keydown)","providers","provide","McFormFieldControl","useExisting","forwardRef","ElementRef","NgControl","decorators","Optional","Self","NgForm","FormGroupDirective","ErrorStateMatcher","Inject","MC_INPUT_VALUE_ACCESSOR","Renderer2","DateAdapter","errorStateMatcher","Input","required","McTimepickerModule","NgModule","imports","CommonModule","A11yModule","PlatformModule","FormsModule","declarations","exports"],"mappings":"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"}