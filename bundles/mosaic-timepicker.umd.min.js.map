{"version":3,"file":"mosaic-timepicker.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../packages/mosaic/timepicker/timepicker.constants.ts","../../packages/mosaic/timepicker/timepicker.ts","../../packages/mosaic/timepicker/timepicker.module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum TimeParts {\n    hours,\n    minutes,\n    seconds\n}\n\nexport enum TimeFormats {\n    HHmmss = 'HH:mm:ss',\n    HHmm = 'HH:mm'\n}\n\nexport const TIMEFORMAT_PLACEHOLDERS: { [timeFormat: string]: string } = {\n    [TimeFormats.HHmmss]: '  :  :  ',\n    [TimeFormats.HHmm]: '  :  '\n};\n\nexport const DEFAULT_TIME_FORMAT: TimeFormats = TimeFormats.HHmm;\n\nexport const HOURS_MINUTES_SECONDS_REGEXP =\n    new RegExp(/^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]|[0-9]):([0-5][0-9]|[0-9])?$/);\nexport const HOURS_MINUTES_REGEXP = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]|[0-9])?$/;\nexport const HOURS_ONLY_REGEXP = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):?$/;\n\nexport const SECONDS_PER_MINUTE: number = 59;\nexport const MINUTES_PER_HOUR: number = 59;\nexport const HOURS_PER_DAY: number = 23;\n\n// TODO Move it to common CDK\nexport const ARROW_UP_KEYCODE: string = 'ArrowUp';\nexport const ARROW_DOWN_KEYCODE: string = 'ArrowDown';\nexport const ARROW_LEFT_KEYCODE: string = 'ArrowLeft';\nexport const ARROW_RIGHT_KEYCODE: string = 'ArrowRight';\n","import {\n    Directive,\n    DoCheck,\n    ElementRef,\n    forwardRef,\n    Inject,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Optional,\n    Renderer2,\n    Self\n} from '@angular/core';\nimport {\n    ControlValueAccessor,\n    FormControl,\n    FormGroupDirective,\n    NgControl,\n    NgForm,\n    ValidationErrors\n} from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { DateAdapter } from '@ptsecurity/cdk/datetime';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { MC_INPUT_VALUE_ACCESSOR } from '@ptsecurity/mosaic/input';\nimport {\n    noop,\n    Subject\n} from 'rxjs';\n\nimport {\n    ARROW_DOWN_KEYCODE,\n    ARROW_LEFT_KEYCODE,\n    ARROW_RIGHT_KEYCODE,\n    ARROW_UP_KEYCODE,\n    DEFAULT_TIME_FORMAT,\n    HOURS_PER_DAY,\n    HOURS_MINUTES_REGEXP,\n    HOURS_MINUTES_SECONDS_REGEXP,\n    HOURS_ONLY_REGEXP,\n    MINUTES_PER_HOUR,\n    SECONDS_PER_MINUTE,\n    TIMEFORMAT_PLACEHOLDERS,\n    TimeFormats,\n    TimeParts\n} from './timepicker.constants';\n\n\nlet uniqueComponentIdSuffix: number = 0;\n\nexport class McTimepickerBase {\n    constructor(\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl) { }\n}\n\n// tslint:disable-next-line naming-convention\nexport const McTimepickerMixinBase:\n    CanUpdateErrorStateCtor &\n    typeof McTimepickerBase = mixinErrorState(McTimepickerBase);\n\n@Directive({\n    selector: 'input[mcTimepicker]',\n    exportAs: 'mcTimepickerInput',\n    host: {\n        class: 'mc-timepicker mc-input',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '[attr.time-format]': 'timeFormat',\n        '[attr.min-time]': 'minTime',\n        '[attr.max-time]': 'maxTime',\n        '[attr.value]': 'value',\n        '[attr.aria-invalid]': 'errorState',\n        '(blur)': 'onBlur()',\n        '(focus)': 'focusChanged(true)',\n        '(input)': 'onInput()',\n        '(paste)': 'onPaste($event)',\n        '(keydown)': 'onKeyDown($event)'\n    },\n    providers: [\n        {\n            provide: McFormFieldControl,\n            useExisting: forwardRef(() => McTimepicker)\n        }\n    ]\n})\nexport class McTimepicker extends McTimepickerMixinBase\n    implements McFormFieldControl<any>,\n        OnChanges,\n        OnDestroy,\n        DoCheck,\n        CanUpdateErrorState,\n        ControlValueAccessor {\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-timepicker';\n\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) { return this.ngControl.disabled; }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n        }\n\n        this.stateChanges.next();\n    }\n\n    @Input()\n    get id(): string { return this._id; }\n\n    set id(value: string) { this._id = value || this.uid; }\n\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean { return this._required; }\n\n    set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string { return this.inputValueAccessor.value; }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this.inputValueAccessor.value = value;\n            this.applyInputChanges();\n        }\n    }\n\n    @Input('time-format')\n    get timeFormat(): TimeFormats { return this._timeFormat; }\n\n    set timeFormat(formatValue: TimeFormats) {\n        this._timeFormat = Object\n            .keys(TimeFormats)\n            .map((timeFormatKey) => TimeFormats[timeFormatKey])\n            .indexOf(formatValue) > -1 ? formatValue : DEFAULT_TIME_FORMAT;\n\n        (this.ngControl.control as FormControl).updateValueAndValidity();\n        this.placeholder = TIMEFORMAT_PLACEHOLDERS[this._timeFormat];\n    }\n\n    @Input('min-time')\n    get minTime(): string | null { return this._minTime; }\n\n    set minTime(minValue: string | null) {\n        this._minTime = minValue;\n        this.minDateTime = minValue !== null ? this.getDateFromTimeString(minValue) : undefined;\n        (this.ngControl.control as FormControl).updateValueAndValidity();\n    }\n\n    @Input('max-time')\n    get maxTime(): string | null { return this._maxTime; }\n\n    set maxTime(maxValue: string | null) {\n        this._maxTime = maxValue;\n        this.maxDateTime = maxValue !== null ? this.getDateFromTimeString(maxValue) : undefined;\n        (this.ngControl.control as FormControl).updateValueAndValidity();\n    }\n\n    private _id: string;\n    private readonly uid = `mc-timepicker-${uniqueComponentIdSuffix++}`;\n    private _disabled: boolean;\n    private _required: boolean;\n    private previousNativeValue: any;\n    private readonly inputValueAccessor: { value: any };\n    private onChange: (value: any) => void;\n    private onTouched: () => void;\n    private _timeFormat: TimeFormats;\n    private _minTime: string | null = null;\n    private minDateTime: Date | undefined;\n    private _maxTime: string | null = null;\n    private maxDateTime: Date | undefined;\n    private currentDateTimeInput: Date | undefined;\n\n    constructor(private readonly elementRef: ElementRef,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() parentForm: NgForm,\n                @Optional() parentFormGroup: FormGroupDirective,\n                defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n                private readonly renderer: Renderer2,\n                @Optional() private dateAdapter: DateAdapter<any>) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (!this.dateAdapter) {\n            throw Error(`McTimepicker: No provider found for DateAdapter. You must import one of the existing ` +\n                `modules at your application root or provide a custom implementation or use exists ones.`);\n        }\n\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this.inputValueAccessor = inputValueAccessor || this.elementRef.nativeElement;\n\n        this.previousNativeValue = this.value;\n        this.onChange = noop;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n\n        this.placeholder = TIMEFORMAT_PLACEHOLDERS[DEFAULT_TIME_FORMAT];\n\n        if (this.ngControl) {\n            // Instead of NG_VALUE_ACCESSOR (https://github.com/angular/material2/issues/8158#issuecomment-344618103)\n            this.ngControl.valueAccessor = this;\n\n            // To avoid cyclic dependency https://stackoverflow.com/a/49578414\n            const control = this.ngControl.control as FormControl;\n            const myValidators = [\n                () => this.parseValidator(),\n                () => this.minTimeValidator(),\n                () => this.maxTimeValidator()\n            ];\n            const validators = control.validator\n                ? [control.validator, ...myValidators]\n                : myValidators;\n\n            control.setValidators(validators);\n            control.updateValueAndValidity();\n        }\n    }\n\n    ngOnChanges(): void {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy(): void {\n        this.stateChanges.complete();\n    }\n\n    ngDoCheck(): void {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this.dirtyCheckNativeValue();\n    }\n\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    focusChanged(isFocused: boolean): void {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.onTouched();\n            this.stateChanges.next();\n        }\n    }\n\n    onBlur() {\n        this.applyInputChanges();\n        this.focusChanged(false);\n    }\n\n    onPaste($event) {\n        $event.preventDefault();\n        const clipboardUserInput: string = $event.clipboardData.getData('text');\n\n        if (this.getDateFromTimeString(clipboardUserInput) === undefined) { return; }\n\n        this.elementRef.nativeElement.value = clipboardUserInput;\n        this.onInput();\n    }\n\n    onInput() {\n        const initialCursorStart: number = this.elementRef.nativeElement.selectionStart;\n        const initialCursorEnd: number = this.elementRef.nativeElement.selectionEnd;\n        let isAutocompleteTriggered: boolean = false;\n\n        const {\n            hoursOnly,\n            hoursAndMinutes,\n            hoursAndMinutesAndSeconds\n        } = this.getParsedTimeParts(this.elementRef.nativeElement.value);\n\n        // tslint:disable no-magic-numbers\n        if (hoursOnly &&\n            hoursOnly[1] &&\n            hoursOnly[1].length === 2) {\n            isAutocompleteTriggered = true;\n        } else if (hoursAndMinutes &&\n            hoursAndMinutes[1].length === 1 &&\n            hoursAndMinutes[2] &&\n            hoursAndMinutes[2].length === 2) {\n            isAutocompleteTriggered = true;\n        } else if (hoursAndMinutesAndSeconds &&\n            hoursAndMinutesAndSeconds[1].length === 2 &&\n            hoursAndMinutesAndSeconds[2].length === 2 &&\n            hoursAndMinutesAndSeconds[3] &&\n            hoursAndMinutesAndSeconds[3].length === 2) {\n            isAutocompleteTriggered = true;\n        }\n        // tslint:enable no-magic-numbers\n\n        this.applyInputChanges({ doTimestringReformat: isAutocompleteTriggered });\n\n        this.elementRef.nativeElement.selectionStart = initialCursorStart;\n        this.elementRef.nativeElement.selectionEnd = initialCursorEnd;\n\n        if (isAutocompleteTriggered && this.ngControl.errors === null) {\n            this.createSelectionOfTimeComponentInInput(initialCursorStart + 1);\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this.elementRef.nativeElement.value && !this.isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    writeValue(value: Date | null): void {\n        if (value !== null) {\n            this.renderer.setProperty(this.elementRef.nativeElement,\n                'value',\n                this.getTimeStringFromDate(value, this.timeFormat)\n            );\n        }\n        this.onChange(value || null);\n        this.applyInputChanges();\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n\n        const keyCode: string = this.getKeyCode(event);\n\n        if (keyCode === ARROW_UP_KEYCODE || keyCode === ARROW_DOWN_KEYCODE) {\n            this.upDownTimeByArrowKeys(event);\n        }\n        if (keyCode === ARROW_LEFT_KEYCODE || keyCode === ARROW_RIGHT_KEYCODE) {\n            this.switchSelectionBetweenTimeparts(event);\n        }\n    }\n\n    registerOnChange(fn: (value: Date) => void): void {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    /** Does some manual dirty checking on the native input `value` property. */\n    private dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this.previousNativeValue !== newValue) {\n            this.previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Checks whether the input is invalid based on the native validation. */\n    private isBadInput(): boolean {\n        const validity = (<HTMLInputElement> this.elementRef.nativeElement).validity;\n\n        return validity && validity.badInput;\n    }\n\n    private applyInputChanges(applyParams: {\n        changedTime?: Date;\n        doTimestringReformat?: boolean;\n    } = {}): void {\n        const { changedTime, doTimestringReformat = true } = applyParams;\n        const timeToApply: Date | undefined = changedTime ||\n            this.getDateFromTimeString(this.elementRef.nativeElement.value);\n        this.currentDateTimeInput = timeToApply;\n\n        if (doTimestringReformat && timeToApply !== undefined) {\n            const selectionStart: number = this.elementRef.nativeElement.selectionStart;\n            const selectionEnd: number = this.elementRef.nativeElement.selectionEnd;\n            this.renderer.setProperty(\n                this.elementRef.nativeElement,\n                'value',\n                this.getTimeStringFromDate(timeToApply, this.timeFormat));\n            this.elementRef.nativeElement.selectionStart = selectionStart;\n            this.elementRef.nativeElement.selectionEnd = selectionEnd;\n        }\n\n        (<FormControl> this.ngControl.control).updateValueAndValidity();\n        const result = this.ngControl.errors === null && timeToApply !== undefined ? timeToApply : null;\n        this.onChange(result);\n        this.stateChanges.next();\n    }\n\n    private upDownTimeByArrowKeys(event: KeyboardEvent): void {\n        event.preventDefault();\n\n        let changedTime: Date | undefined = this.currentDateTimeInput;\n        if (changedTime !== undefined) {\n            const cursorPos = this.elementRef.nativeElement.selectionStart;\n\n            const modifiedTimePart = this.getTimeEditMetrics(cursorPos)\n                .modifiedTimePart;\n            const keyCode: string = this.getKeyCode(event);\n            if (keyCode === ARROW_UP_KEYCODE) { changedTime = this.incrementTime(changedTime, modifiedTimePart); }\n            if (keyCode === ARROW_DOWN_KEYCODE) { changedTime = this.decrementTime(changedTime, modifiedTimePart); }\n            this.applyInputChanges({ changedTime });\n            this.createSelectionOfTimeComponentInInput(cursorPos);\n        }\n    }\n\n    private switchSelectionBetweenTimeparts(event: KeyboardEvent): void {\n        const changedTime: Date | undefined = this.currentDateTimeInput;\n        const keyCode: string = this.getKeyCode(event);\n\n        if (changedTime !== undefined) {\n            let cursorPos: number = this.elementRef.nativeElement.selectionStart;\n            if (keyCode === ARROW_LEFT_KEYCODE) {\n                cursorPos = this.getCursorPositionOfPrevTimePartStart(cursorPos, this.elementRef.nativeElement.value);\n            } else if (keyCode === ARROW_RIGHT_KEYCODE) {\n                cursorPos = this.getCursorPositionOfNextTimePartStart(cursorPos, this.elementRef.nativeElement.value);\n            }\n            this.createSelectionOfTimeComponentInInput(cursorPos);\n        }\n    }\n\n    /**\n     * @description Microsoft EDGE doesn't support KeyboaedEvent.code thus we need this helper\n     */\n    private getKeyCode(event: KeyboardEvent): string {\n        return event.code || event.key;\n    }\n\n    private createSelectionOfTimeComponentInInput(cursorPos: number): void {\n        setTimeout(() => {\n            const newEditParams = this.getTimeEditMetrics(cursorPos);\n            this.elementRef.nativeElement.selectionStart = newEditParams.cursorStartPosition;\n            this.elementRef.nativeElement.selectionEnd = newEditParams.cursorEndPosition;\n        });\n    }\n\n    private incrementTime(dateVal: Date,\n                          whatToIncrement: TimeParts = TimeParts.seconds): Date {\n        let { hours, minutes, seconds } = this.getTimeDigitsFromDate(dateVal);\n\n        switch (whatToIncrement) {\n            case TimeParts.hours:\n                hours++;\n                break;\n            case TimeParts.minutes:\n                minutes++;\n                break;\n            case TimeParts.seconds:\n                seconds++;\n                break;\n            default:\n        }\n\n        if (seconds > SECONDS_PER_MINUTE) { seconds = 0; }\n\n        if (minutes > MINUTES_PER_HOUR) { minutes = 0; }\n\n        if (hours > HOURS_PER_DAY) { hours = 0; }\n\n        return <Date> this.getDateFromTimeDigits(hours, minutes, seconds);\n    }\n\n    /**\n     * @description Decrement part of time\n     */\n    private decrementTime(dateVal: Date,\n                          whatToDecrement: TimeParts = TimeParts.seconds): Date {\n        let { hours, minutes, seconds } = this.getTimeDigitsFromDate(dateVal);\n\n        switch (whatToDecrement) {\n            case TimeParts.hours:\n                hours--;\n                break;\n            case TimeParts.minutes:\n                minutes--;\n                break;\n            case TimeParts.seconds:\n                seconds--;\n                break;\n            default:\n        }\n\n        if (seconds < 0) { seconds = SECONDS_PER_MINUTE; }\n\n        if (minutes < 0) { minutes = MINUTES_PER_HOUR; }\n\n        if (hours < 0) { hours = HOURS_PER_DAY; }\n\n        return <Date> this.getDateFromTimeDigits(hours, minutes, seconds);\n    }\n\n    private getCursorPositionOfPrevTimePartStart(cursorPos: number, timeString: string): number {\n        return cursorPos === 0 ? timeString.length : cursorPos - 1;\n    }\n\n    private getCursorPositionOfNextTimePartStart(cursorPos: number,\n                                                 timeString: string,\n                                                 timeDevider: string = ':'): number {\n        const nextDividerPos: number = timeString.indexOf(timeDevider, cursorPos);\n\n        return nextDividerPos !== undefined ? nextDividerPos + 1 : 0;\n    }\n\n    /**\n     * @description Get params for arrow-keys (up/down) time valie edit.\n     * @param cursorPosition Current cursor position in timeString\n     */\n    private getTimeEditMetrics(cursorPosition: number): {\n        modifiedTimePart: TimeParts;\n        cursorStartPosition: number;\n        cursorEndPosition: number;\n    } {\n        const timeString: string = this.elementRef.nativeElement.value;\n        let modifiedTimePart: TimeParts;\n        let cursorStartPosition: number;\n        let cursorEndPosition: number;\n        const hoursIndex = 0;\n        const minutesIndex = timeString.indexOf(':', hoursIndex + 1);\n        const secondsIndex = minutesIndex !== -1 ? timeString.indexOf(':', minutesIndex + 1) : -1;\n\n        if (secondsIndex !== -1 && cursorPosition > secondsIndex) {\n            modifiedTimePart = TimeParts.seconds;\n            cursorStartPosition = secondsIndex + 1;\n            cursorEndPosition = timeString.length;\n        } else if (minutesIndex !== -1 && cursorPosition > minutesIndex) {\n            modifiedTimePart = TimeParts.minutes;\n            cursorStartPosition = minutesIndex + 1;\n            cursorEndPosition = secondsIndex > -1 ? secondsIndex : timeString.length;\n        } else {\n            modifiedTimePart = TimeParts.hours;\n            cursorStartPosition = hoursIndex;\n            cursorEndPosition = minutesIndex !== -1 ? minutesIndex : timeString.length;\n        }\n\n        return {\n            modifiedTimePart,\n            cursorStartPosition,\n            cursorEndPosition\n        };\n    }\n\n    /**\n     * @description Create time string for displaying inside input element of UI\n     */\n    private getTimeStringFromDate(tempVal: Date,\n                                  timeFormat: TimeFormats = DEFAULT_TIME_FORMAT): string {\n        const hours: string = this.getNumberWithLeadingZero(tempVal.getHours());\n        const minutes: string = this.getNumberWithLeadingZero(tempVal.getMinutes());\n        const seconds: string = this.getNumberWithLeadingZero(tempVal.getSeconds());\n\n        const formattedTimeGenerators = {\n            [TimeFormats.HHmm]: () => `${hours}:${minutes}`,\n            [TimeFormats.HHmmss]: () => `${hours}:${minutes}:${seconds}`\n        };\n\n        return formattedTimeGenerators[timeFormat]();\n    }\n\n    private getParsedTimeParts(timeString: string): {\n        hoursOnly: any;\n        hoursAndMinutes: any;\n        hoursAndMinutesAndSeconds: any;\n    } {\n        const momentWrappedTime = this.dateAdapter.parse(timeString, [\n            'h:m a',\n            'h:m:s a',\n            'H:m',\n            'H:m:s'\n        ]);\n\n        const convertedTimeString = momentWrappedTime !== null\n            ? momentWrappedTime.format('HH:mm:ss')\n            : '';\n\n        const hoursAndMinutesAndSeconds = convertedTimeString.match(HOURS_MINUTES_SECONDS_REGEXP);\n        const hoursAndMinutes = convertedTimeString.match(HOURS_MINUTES_REGEXP);\n        const hoursOnly = convertedTimeString.match(HOURS_ONLY_REGEXP);\n\n        return {\n            hoursOnly,\n            hoursAndMinutes,\n            hoursAndMinutesAndSeconds\n        };\n    }\n\n    /**\n     * @description Create Date object from separate parts of time\n     */\n    private getDateFromTimeDigits(hours: number, minutes: number, seconds: number = 0): Date | undefined {\n        return this.getDateFromTimeString(`${hours}:${minutes}:${seconds}`);\n    }\n\n    private getDateFromTimeString(timeString: string | undefined): Date | undefined {\n        // TODO Use moment-js\n        if (timeString === undefined) { return; }\n\n        const {\n            hoursOnly,\n            hoursAndMinutes,\n            hoursAndMinutesAndSeconds\n        } = this.getParsedTimeParts(timeString);\n\n        if (timeString.trim().length === 0 ||\n            hoursOnly === null && hoursAndMinutes === null && hoursAndMinutesAndSeconds === null) {\n            return;\n        }\n\n        // tslint:disable no-magic-numbers\n        let hours: number = 0;\n        let minutes: number = 0;\n        let seconds: number = 0;\n\n        if (hoursOnly) {\n            hours = Number(hoursOnly[1]);\n        } else if (hoursAndMinutes) {\n            hours = Number(hoursAndMinutes[1]);\n            minutes = Number(hoursAndMinutes[2]);\n        } else if (hoursAndMinutesAndSeconds) {\n            hours = Number(hoursAndMinutesAndSeconds[1]);\n            minutes = Number(hoursAndMinutesAndSeconds[2]);\n            seconds = Number(hoursAndMinutesAndSeconds[3]);\n        }\n        // const timestamp: number = Date.parse(fullDateString);\n        const resultDate: Date = new Date(1970, 0, 1, hours, minutes, seconds);\n        // tslint:enable no-magic-numbers\n\n        return isNaN(resultDate.getTime()) ? undefined : resultDate;\n    }\n\n    private getNumberWithLeadingZero(digit: number): string {\n        const MAX_DIGIT_WITH_LEADING_ZERO: number = 9;\n\n        return digit > MAX_DIGIT_WITH_LEADING_ZERO ? `${digit}` : `0${digit}`;\n    }\n\n    private getTimeDigitsFromDate(dateVal: Date): { hours: number; minutes: number; seconds: number } {\n        return {\n            hours: dateVal.getHours(),\n            minutes: dateVal.getMinutes(),\n            seconds: dateVal.getSeconds()\n        };\n    }\n\n    private parseValidator(): ValidationErrors | null {\n        return this.currentDateTimeInput === undefined ?\n            { mcTimepickerParse: { text: this.elementRef.nativeElement.value } } :\n            null;\n    }\n\n    private minTimeValidator(): ValidationErrors | null {\n\n        if (this.currentDateTimeInput !== undefined &&\n            this.minDateTime !== undefined &&\n            this.isTimeLowerThenMin(this.currentDateTimeInput)) {\n            return { mcTimepickerLowerThenMintime: { text: this.elementRef.nativeElement.value } };\n        }\n\n        return null;\n    }\n\n    private maxTimeValidator(): ValidationErrors | null {\n        if (this.currentDateTimeInput !== undefined &&\n            this.maxDateTime !== undefined &&\n            this.isTimeGreaterThenMax(this.currentDateTimeInput)) {\n            return { mcTimepickerHigherThenMaxtime: { text: this.elementRef.nativeElement.value } };\n        }\n\n        return null;\n    }\n\n    private isTimeLowerThenMin(timeToCompare: Date): boolean {\n        return timeToCompare.getTime() - (<Date> this.minDateTime).getTime() < 0;\n    }\n\n    private isTimeGreaterThenMax(timeToCompare: Date): boolean {\n        return timeToCompare.getTime() - (<Date> this.maxDateTime).getTime() >= 0;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McTimepicker } from './timepicker';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        FormsModule\n    ],\n    declarations: [\n        McTimepicker\n    ],\n    exports: [\n        McTimepicker\n    ]\n})\nexport class McTimepickerModule {}\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","setPrototypeOf","__proto__","Array","p","hasOwnProperty","hours","minutes","seconds","HHmmss","HHmm","TIMEFORMAT_PLACEHOLDERS","_a","TimeFormats","DEFAULT_TIME_FORMAT","HOURS_MINUTES_SECONDS_REGEXP","RegExp","HOURS_MINUTES_REGEXP","HOURS_ONLY_REGEXP","uniqueComponentIdSuffix","McTimepickerBase","defaultErrorStateMatcher","parentForm","parentFormGroup","ngControl","McTimepickerMixinBase","mixinErrorState","McTimepicker","_super","elementRef","inputValueAccessor","renderer","dateAdapter","_this","call","focused","stateChanges","Subject","controlType","uid","_minTime","_maxTime","Error","nativeElement","previousNativeValue","value","onChange","noop","id","placeholder","valueAccessor","control","myValidators","parseValidator","minTimeValidator","maxTimeValidator","validators","validator","concat","setValidators","updateValueAndValidity","tslib_1.__extends","defineProperty","disabled","_disabled","coerceBooleanProperty","next","_id","_required","applyInputChanges","_timeFormat","formatValue","keys","map","timeFormatKey","indexOf","minValue","minDateTime","getDateFromTimeString","undefined","maxValue","maxDateTime","ngOnChanges","ngOnDestroy","complete","ngDoCheck","updateErrorState","dirtyCheckNativeValue","focus","focusChanged","isFocused","onTouched","onBlur","onPaste","$event","preventDefault","clipboardUserInput","clipboardData","getData","onInput","initialCursorStart","selectionStart","initialCursorEnd","selectionEnd","isAutocompleteTriggered","getParsedTimeParts","hoursOnly","hoursAndMinutes","hoursAndMinutesAndSeconds","length","doTimestringReformat","errors","createSelectionOfTimeComponentInInput","isBadInput","onContainerClick","writeValue","setProperty","getTimeStringFromDate","timeFormat","onKeyDown","event","keyCode","getKeyCode","upDownTimeByArrowKeys","switchSelectionBetweenTimeparts","registerOnChange","fn","registerOnTouched","newValue","validity","badInput","applyParams","changedTime","timeToApply","currentDateTimeInput","result","cursorPos","modifiedTimePart","getTimeEditMetrics","incrementTime","decrementTime","getCursorPositionOfPrevTimePartStart","getCursorPositionOfNextTimePartStart","code","key","setTimeout","newEditParams","cursorStartPosition","cursorEndPosition","dateVal","whatToIncrement","TimeParts","getTimeDigitsFromDate","getDateFromTimeDigits","whatToDecrement","timeString","timeDevider","nextDividerPos","cursorPosition","minutesIndex","hoursIndex","secondsIndex","tempVal","getNumberWithLeadingZero","getHours","getMinutes","getSeconds","momentWrappedTime","parse","convertedTimeString","format","match","trim","Number","resultDate","Date","isNaN","getTime","digit","mcTimepickerParse","text","isTimeLowerThenMin","mcTimepickerLowerThenMintime","isTimeGreaterThenMax","mcTimepickerHigherThenMaxtime","timeToCompare","type","Directive","args","selector","exportAs","host","class","[attr.id]","[attr.placeholder]","[disabled]","[required]","[attr.time-format]","[attr.min-time]","[attr.max-time]","[attr.value]","[attr.aria-invalid]","(blur)","(focus)","(input)","(paste)","(keydown)","providers","provide","McFormFieldControl","useExisting","forwardRef","ElementRef","NgControl","decorators","Optional","Self","NgForm","FormGroupDirective","ErrorStateMatcher","Inject","MC_INPUT_VALUE_ACCESSOR","Renderer2","DateAdapter","errorStateMatcher","Input","required","minTime","maxTime","McTimepickerModule","NgModule","imports","CommonModule","A11yModule","PlatformModule","FormsModule","declarations","exports"],"mappings":"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"}