{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@ptsecurity/mosaic/tags/tag-default-options.ts","ng://@ptsecurity/mosaic/tags/tag.component.ts","ng://@ptsecurity/mosaic/tags/tag-list.component.ts","ng://@ptsecurity/mosaic/tags/tag-input.ts","ng://@ptsecurity/mosaic/tags/tag.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","__read","n","r","e","ar","push","error","__spread","arguments","concat","MC_TAGS_DEFAULT_OPTIONS","InjectionToken","source","selected","isUserInput","TAG_ATTRIBUTE_NAMES","McTagAvatar","Directive","args","selector","host","class","McTagTrailingIcon","_elementRef","McTagMixinBase","mixinColor","mixinDisabled","McTagBase","McTag","elementRef","changeDetectorRef","_ngZone","_this","_super","onFocus","Subject","onBlur","hasFocus","tagListSelectable","selectionChange","EventEmitter","destroyed","removed","_selected","_selectable","_removable","_disabled","addHostClassName","nativeElement","defineProperty","coercedValue","coerceBooleanProperty","dispatchSelectionChange","undefined","_value","textContent","selectable","disabled","ngAfterContentInit","addClassModificatorForIcons","icons","contentChildren","map","item","iconElement","previousElementSibling","nextElementSibling","nextSibling","classList","add","previousSibling","firstIconElement","secondIconElement","TAG_ATTRIBUTE_NAMES_1","TAG_ATTRIBUTE_NAMES_1_1","attr","hasAttribute","tagName","toLowerCase","ngOnDestroy","emit","tag","select","deselect","selectViaInteraction","toggleSelected","focus","Promise","resolve","then","markForCheck","remove","removable","handleClick","event","preventDefault","stopPropagation","handleKeydown","keyCode","DELETE","BACKSPACE","SPACE","blur","onStable","asObservable","pipe","take","subscribe","run","Component","exportAs","template","inputs","[attr.tabindex]","[attr.disabled]","[class.mc-selected]","[class.mc-focused]","[class.mc-tag-with-avatar]","[class.mc-tag-with-trailing-icon]","[class.mc-tag-disabled]","[class.mc-disabled]","(click)","(keydown)","(focus)","(blur)","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","ElementRef","ChangeDetectorRef","NgZone","ContentChildren","McIcon","ContentChild","static","forwardRef","McTagRemove","Output","Input","parentTag","$event","defaultErrorStateMatcher","parentForm","parentFormGroup","ngControl","McTagListMixinBase","mixinErrorState","McTagListBase","nextUniqueId","McTagList","rawValidators","mcValidation","dir","ngModel","formControlName","controlType","valueChange","uid","userTabIndex","tagChanges","orientation","change","_tabIndex","_required","_multiple","lastDestroyedTagIndex","onTouched","onChange","_compareWith","o1","o2","valueAccessor","merge","apply","tags","multiple","selectionModel","cleaner","fn","initializeSelection","writeValue","tagInput","id","stateChanges","placeholder","_placeholder","focused","hasFocusedTag","empty","syncTagsDisabledState","forEach","useValidation","setMosaicValidation","keyManager","FocusKeyManager","withVerticalOrientation","withHorizontalOrientation","takeUntil","tabOut","setTimeout","changes","startWith","resetTags","updateTabIndex","updateFocusForDestroyedTags","toArray","propagateTagsChanges","ngOnInit","SelectionModel","ngDoCheck","updateErrorState","complete","dropSubscriptions","registerInput","inputElement","setErrors","errors","setSelectionByValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","onContainerClick","originatesFromTag","setFirstItemActive","focusInput","keydown","target","isInputEmpty","setLastItemActive","contains","HOME","END","onKeydown","clearSelection","isArray","currentValue","selectValue","sortValues","correspondingTag","setActiveItem","markAsTouched","newTagIndex","Math","min","isValidIndex","index","element","nodeName","find","skip","clear","propagateChanges","fallbackValue","valueToEmit","McTagListChange","listenToTagsFocus","listenToTagsSelection","listenToTagsRemoved","tagFocusSubscription","unsubscribe","tagBlurSubscription","tagSelectionSubscription","tagRemoveSubscription","tagSelectionChanges","isSelected","tagFocusChanges","tagIndex","indexOf","updateActiveItem","tagBlurChanges","tagRemoveChanges","currentElement","parentElement","some","[class.mc-invalid]","[class.mc-required]","[id]","providers","provide","McFormFieldControl","useExisting","ErrorStateMatcher","Optional","type","Inject","NG_VALIDATORS","MC_VALIDATION","Directionality","decorators","NgForm","FormGroupDirective","NgControl","Self","NgModel","FormControlName","descendants","McTagInput","renderer","defaultOptions","separatorKeyCodes","tagEnd","_addOnBlur","countOfSymbolsForUpdateWidth","setDefaultInputWidth","_tagList","ngOnChanges","emitTagEnd","triggerValidation","addOnBlur","hasControl","invalid","status","isSeparatorKey","input","updateInputWidth","onInput","onPaste","clipboardData","data","getData","items","_b","_c","key","separator","separatorKeyToSymbol","search","split","setStyle","oneSymbolWidth","scrollWidth","k","sep","_a","ENTER","TAB","COMMA","hasModifierKey","[attr.placeholder]","(input)","(paste)","Renderer2","McTagsModule","NgModule","imports","CommonModule","PlatformModule","exports","declarations","useValue"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { InjectionToken } from '@angular/core';\n\n\n/** Default options, for the chips module, that can be overridden. */\n// tslint:disable-next-line: naming-convention\nexport interface McTagsDefaultOptions {\n    /** The list of key codes that will trigger a chipEnd event. */\n    separatorKeyCodes: number[];\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MC_TAGS_DEFAULT_OPTIONS = new InjectionToken<McTagsDefaultOptions>('mc-tags-default-options');\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    NgZone,\n    OnDestroy,\n    Output,\n    QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { BACKSPACE, DELETE, SPACE } from '@ptsecurity/cdk/keycodes';\nimport {\n    CanColor,\n    CanColorCtor,\n    CanDisable,\n    CanDisableCtor,\n    mixinColor,\n    mixinDisabled\n} from '@ptsecurity/mosaic/core';\nimport { McIcon } from '@ptsecurity/mosaic/icon';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\n\n// tslint:disable-next-line:naming-convention\nexport interface McTagEvent {\n    tag: McTag;\n}\n\n/** Event object emitted by McTag when selected or deselected. */\nexport class McTagSelectionChange {\n    constructor(public source: McTag, public selected: boolean, public isUserInput = false) {}\n}\n\n\nconst TAG_ATTRIBUTE_NAMES = ['mc-basic-tag'];\n\n/**\n * Dummy directive to add CSS class to tag avatar.\n * @docs-private\n */\n@Directive({\n    selector: 'mc-tag-avatar, [mcTagAvatar]',\n    host: { class: 'mc-tag-avatar' }\n})\nexport class McTagAvatar {}\n\n/**\n * Dummy directive to add CSS class to tag trailing icon.\n * @docs-private\n */\n@Directive({\n    selector: 'mc-tag-trailing-icon, [mcTagTrailingIcon]',\n    host: { class: 'mc-tag-trailing-icon' }\n})\nexport class McTagTrailingIcon {}\n\nexport class McTagBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McTagMixinBase: CanColorCtor & CanDisableCtor & typeof McTagBase = mixinColor(mixinDisabled(McTagBase));\n\n\n@Component({\n    selector: 'mc-tag, [mc-tag], mc-basic-tag, [mc-basic-tag]',\n    exportAs: 'mcTag',\n    templateUrl: 'tag.partial.html',\n    styleUrls: ['./tag.scss'],\n    inputs: ['color', 'disabled'],\n    host: {\n        class: 'mc-tag',\n\n        '[attr.tabindex]': 'tabindex',\n        '[attr.disabled]': 'disabled || null',\n\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': 'hasFocus',\n        '[class.mc-tag-with-avatar]': 'avatar',\n        '[class.mc-tag-with-trailing-icon]': 'trailingIcon || removeIcon',\n        '[class.mc-tag-disabled]': 'disabled',\n        '[class.mc-disabled]': 'disabled',\n\n        '(click)': 'handleClick($event)',\n        '(keydown)': 'handleKeydown($event)',\n        '(focus)': 'focus()',\n        '(blur)': 'blur()'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McTag extends McTagMixinBase implements IFocusableOption, OnDestroy, CanColor, CanDisable {\n    /** Emits when the tag is focused. */\n    readonly onFocus = new Subject<McTagEvent>();\n\n    /** Emits when the tag is blured. */\n    readonly onBlur = new Subject<McTagEvent>();\n\n    nativeElement: HTMLElement;\n\n    /** Whether the tag has focus. */\n    hasFocus: boolean = false;\n\n    /** Whether the tag list is selectable */\n    tagListSelectable: boolean = true;\n\n    @ContentChildren(McIcon) contentChildren: QueryList<McIcon>;\n\n    /** The tag avatar */\n    @ContentChild(McTagAvatar, {static: false}) avatar: McTagAvatar;\n\n    /** The tag's trailing icon. */\n    @ContentChild(McTagTrailingIcon, {static: false}) trailingIcon: McTagTrailingIcon;\n\n    /** The tag's remove toggler. */\n    @ContentChild(forwardRef(() => McTagRemove), {static: false}) removeIcon: McTagRemove;\n\n    /** Emitted when the tag is selected or deselected. */\n    @Output() readonly selectionChange: EventEmitter<McTagSelectionChange> =\n        new EventEmitter<McTagSelectionChange>();\n\n    /** Emitted when the tag is destroyed. */\n    @Output() readonly destroyed: EventEmitter<McTagEvent> = new EventEmitter<McTagEvent>();\n\n    /** Emitted when a tag is to be removed. */\n    @Output() readonly removed: EventEmitter<McTagEvent> = new EventEmitter<McTagEvent>();\n\n    /** Whether the tag is selected. */\n    @Input()\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    set selected(value: boolean) {\n        const coercedValue = coerceBooleanProperty(value);\n\n        if (coercedValue !== this._selected) {\n            this._selected = coercedValue;\n            this.dispatchSelectionChange();\n        }\n    }\n\n    private _selected: boolean = false;\n\n    /** The value of the tag. Defaults to the content inside `<mc-tag>` tags. */\n    @Input()\n    get value(): any {\n        return this._value !== undefined\n            ? this._value\n            : this.elementRef.nativeElement.textContent;\n    }\n\n    set value(value: any) {\n        this._value = value;\n    }\n\n    private _value: any;\n\n    /**\n     * Whether or not the tag is selectable. When a tag is not selectable,\n     * changes to its selected state are always ignored. By default a tag is\n     * selectable, and it becomes non-selectable if its parent tag list is\n     * not selectable.\n     */\n    @Input()\n    get selectable(): boolean {\n        return this._selectable && this.tagListSelectable;\n    }\n\n    set selectable(value: boolean) {\n        this._selectable = coerceBooleanProperty(value);\n    }\n\n    private _selectable: boolean = true;\n\n    /**\n     * Determines whether or not the tag displays the remove styling and emits (removed) events.\n     */\n    @Input()\n    get removable(): boolean {\n        return this._removable;\n    }\n\n    set removable(value: boolean) {\n        this._removable = coerceBooleanProperty(value);\n    }\n\n    private _removable: boolean = true;\n\n    get tabindex(): any {\n        if (!this.selectable) { return null; }\n\n        return this.disabled ? null : -1;\n    }\n\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value !== this.disabled) {\n            this._disabled = value;\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    constructor(\n        public elementRef: ElementRef,\n        public changeDetectorRef: ChangeDetectorRef,\n        private _ngZone: NgZone\n    ) {\n        super(elementRef);\n\n        this.addHostClassName();\n\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        this.addClassModificatorForIcons();\n    }\n\n    addClassModificatorForIcons() {\n        const icons = this.contentChildren.map((item) => item._elementRef.nativeElement);\n\n        if (icons.length === 1) {\n            const iconElement = icons[0];\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-left-icon');\n                }\n\n                if (iconElement.previousSibling) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-right-icon');\n                }\n            }\n        } else if (icons.length > 1) {\n            const firstIconElement = icons[0];\n            const secondIconElement = icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n\n    addHostClassName() {\n        // Add class for the different tags\n        for (const attr of TAG_ATTRIBUTE_NAMES) {\n            if (\n                this.elementRef.nativeElement.hasAttribute(attr) ||\n                this.elementRef.nativeElement.tagName.toLowerCase() === attr\n            ) {\n                    (this.elementRef.nativeElement as HTMLElement).classList.add(attr);\n\n                    return;\n            }\n        }\n        (this.elementRef.nativeElement as HTMLElement).classList.add('mc-standard-tag');\n    }\n\n    ngOnDestroy() {\n        this.destroyed.emit({ tag: this });\n    }\n\n    select(): void {\n        if (!this._selected) {\n            this._selected = true;\n            this.dispatchSelectionChange();\n        }\n    }\n\n    deselect(): void {\n        if (this._selected) {\n            this._selected = false;\n            this.dispatchSelectionChange();\n        }\n    }\n\n    selectViaInteraction(): void {\n        if (!this._selected) {\n            this._selected = true;\n            this.dispatchSelectionChange(true);\n        }\n    }\n\n    toggleSelected(isUserInput: boolean = false): boolean {\n        this._selected = !this.selected;\n        this.dispatchSelectionChange(isUserInput);\n\n        return this.selected;\n    }\n\n    /** Allows for programmatic focusing of the tag. */\n    focus(): void {\n        if (!this.selectable) { return; }\n\n        if (!this.hasFocus) {\n            this.elementRef.nativeElement.focus();\n\n            this.onFocus.next({ tag: this });\n\n            Promise.resolve().then(() => {\n                this.hasFocus = true;\n                this.changeDetectorRef.markForCheck();\n            });\n        }\n    }\n\n    /**\n     * Allows for programmatic removal of the tag. Called by the McTagList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the tag from the DOM.\n     */\n    remove(): void {\n        if (this.removable) {\n            this.removed.emit({ tag: this });\n        }\n    }\n\n    handleClick(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n        } else {\n            event.stopPropagation();\n        }\n    }\n\n    handleKeydown(event: KeyboardEvent): void {\n        if (this.disabled) { return; }\n\n        // tslint:disable-next-line: deprecation\n        switch (event.keyCode) {\n            case DELETE:\n            case BACKSPACE:\n                // If we are removable, remove the focused tag\n                this.remove();\n                // Always prevent so page navigation does not occur\n                event.preventDefault();\n                break;\n            case SPACE:\n                // If we are selectable, toggle the focused tag\n                if (this.selectable) {\n                    this.toggleSelected(true);\n                }\n\n                // Always prevent space from scrolling the page since the list has focus\n                event.preventDefault();\n                break;\n            default:\n        }\n    }\n\n    blur(): void {\n        // When animations are enabled, Angular may end up removing the tag from the DOM a little\n        // earlier than usual, causing it to be blurred and throwing off the logic in the tag list\n        // that moves focus not the next item. To work around the issue, we defer marking the tag\n        // as not focused until the next time the zone stabilizes.\n        this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                this._ngZone.run(() => {\n                    this.hasFocus = false;\n                    this.onBlur.next({ tag: this });\n                });\n            });\n    }\n\n    private dispatchSelectionChange(isUserInput = false) {\n        this.selectionChange.emit({\n            source: this,\n            isUserInput,\n            selected: this._selected\n        });\n    }\n}\n\n\n/**\n *\n * Example:\n *\n *     `<mc-tag>\n *       <mc-icon mcTagRemove>cancel</mc-icon>\n *     </mc-tag>`\n *\n * You *may* use a custom icon, but you may need to override the `mc-tag-remove` positioning\n * styles to properly center the icon within the tag.\n */\n@Directive({\n    selector: '[mcTagRemove]',\n    host: {\n        class: 'mc-tag-remove mc-tag-trailing-icon',\n        '[attr.tabindex]': '-1',\n        '(click)': 'handleClick($event)',\n        '(focus)': 'focus($event)'\n    }\n})\nexport class McTagRemove {\n    constructor(protected parentTag: McTag) {}\n\n    focus($event): void {\n        $event.stopPropagation();\n    }\n\n    /** Calls the parent tag's public `remove()` method if applicable. */\n    handleClick(event: Event): void {\n        if (this.parentTag.removable) {\n            this.parentTag.remove();\n        }\n\n        // We need to stop event propagation because otherwise the event will bubble up to the\n        // form field and cause the `onContainerClick` method to be invoked. This method would then\n        // reset the focused tag that has been focused after tag removal. Usually the parent\n        // the parent click listener of the `McTag` would prevent propagation, but it can happen\n        // that the tag is being removed before the event bubbles up.\n        event.stopPropagation();\n    }\n}\n","import { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Input,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    Self,\n    ViewEncapsulation\n} from '@angular/core';\nimport {\n    ControlValueAccessor,\n    FormControlName,\n    FormGroupDirective,\n    NG_VALIDATORS,\n    NgControl,\n    NgForm,\n    NgModel,\n    Validator\n} from '@angular/forms';\nimport { FocusKeyManager } from '@ptsecurity/cdk/a11y';\nimport { BACKSPACE, END, HOME } from '@ptsecurity/cdk/keycodes';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    MC_VALIDATION,\n    McValidationOptions,\n    mixinErrorState,\n    setMosaicValidation\n} from '@ptsecurity/mosaic/core';\nimport { McCleaner, McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { merge, Observable, Subject, Subscription } from 'rxjs';\nimport { startWith, takeUntil } from 'rxjs/operators';\n\nimport { McTagTextControl } from './tag-text-control';\nimport { McTag, McTagEvent, McTagSelectionChange } from './tag.component';\n\n\nexport class McTagListBase {\n    constructor(\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McTagListMixinBase: CanUpdateErrorStateCtor & typeof McTagListBase = mixinErrorState(McTagListBase);\n\n\n// Increasing integer for generating unique ids for tag-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the tag list value has changed. */\nexport class McTagListChange {\n    constructor(public source: McTagList, public value: any) {}\n}\n\n\n@Component({\n    selector: 'mc-tag-list',\n    exportAs: 'mcTagList',\n    templateUrl: 'tag-list.partial.html',\n    host: {\n        class: 'mc-tag-list',\n        '[attr.tabindex]': 'disabled ? null : _tabIndex',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-invalid]': 'errorState',\n        '[class.mc-required]': 'required',\n        '(focus)': 'focus()',\n        '(blur)': 'blur()',\n        '(keydown)': 'keydown($event)',\n        '[id]': 'uid'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McTagList }],\n    styleUrls: ['tag-list.scss'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McTagList extends McTagListMixinBase implements McFormFieldControl<any>,\n    ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n\n    readonly controlType: string = 'mc-tag-list';\n\n    /** Combined stream of all of the child tags' selection change events. */\n    get tagSelectionChanges(): Observable<McTagSelectionChange> {\n        return merge(...this.tags.map((tag) => tag.selectionChange));\n    }\n\n    /** Combined stream of all of the child tags' focus change events. */\n    get tagFocusChanges(): Observable<McTagEvent> {\n        return merge(...this.tags.map((tag) => tag.onFocus));\n    }\n\n    /** Combined stream of all of the child tags' blur change events. */\n    get tagBlurChanges(): Observable<McTagEvent> {\n        return merge(...this.tags.map((tag) => tag.onBlur));\n    }\n\n    /** Combined stream of all of the child tags' remove change events. */\n    get tagRemoveChanges(): Observable<McTagEvent> {\n        return merge(...this.tags.map((tag) => tag.destroyed));\n    }\n\n    /** The array of selected tags inside tag list. */\n    get selected(): McTag[] | McTag {\n        return this.multiple ? this.selectionModel.selected : this.selectionModel.selected[0];\n    }\n\n    get canShowCleaner(): boolean {\n        return this.cleaner && this.tags.length > 0;\n    }\n\n    /** Whether the user should be allowed to select multiple tags. */\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith(): (o1: any, o2: any) => boolean {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        this._compareWith = fn;\n\n        if (this.selectionModel) {\n            // A different comparator means the selection could change.\n            this.initializeSelection();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): any {\n        return this._value;\n    }\n\n    set value(value: any) {\n        this.writeValue(value);\n        this._value = value;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get id(): string {\n        return this.tagInput ? this.tagInput.id : this.uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n\n        this.stateChanges.next();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get placeholder(): string {\n        return this.tagInput ? this.tagInput.placeholder : this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n\n    /** Whether any tags or the mcTagInput inside of this tag-list has focus. */\n    get focused(): boolean {\n        return (this.tagInput && this.tagInput.focused) || this.hasFocusedTag();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return (!this.tagInput || this.tagInput.empty) && this.tags.length === 0;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat(): boolean {\n        return !this.empty || this.focused;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        return this.ngControl ? !!this.ngControl.disabled : this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n        this.syncTagsDisabledState();\n    }\n\n    /**\n     * Whether or not this tag list is selectable. When a tag list is not selectable,\n     * the selected states for all the tags inside the tag list are always ignored.\n     */\n    @Input()\n    get selectable(): boolean {\n        return this._selectable;\n    }\n\n    set selectable(value: boolean) {\n        this._selectable = coerceBooleanProperty(value);\n\n        if (this.tags) {\n            this.tags.forEach((tag) => tag.tagListSelectable = this._selectable);\n        }\n    }\n\n    @Input()\n    set tabIndex(value: number) {\n        this.userTabIndex = value;\n        this._tabIndex = value;\n    }\n\n    /**\n     * Event that emits whenever the raw value of the tag-list changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    uid: string = `mc-tag-list-${nextUniqueId++}`;\n\n    /**\n     * User defined tab index.\n     * When it is not null, use user defined tab index. Otherwise use tabIndex\n     */\n    userTabIndex: number | null = null;\n\n    keyManager: FocusKeyManager<McTag>;\n\n    selectionModel: SelectionModel<McTag>;\n\n    tagChanges = new EventEmitter<any>();\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /** Orientation of the tag list. */\n    @Input('orientation') orientation: 'horizontal' | 'vertical' = 'horizontal';\n\n    /** Event emitted when the selected tag list value has been changed by the user. */\n    @Output() readonly change: EventEmitter<McTagListChange> = new EventEmitter<McTagListChange>();\n\n    @ContentChild('mcTagListCleaner', { static: true }) cleaner: McCleaner;\n\n    /** The tag components contained within this tag list. */\n    @ContentChildren(McTag, {\n        // Need to use `descendants: true`,\n        // Ivy will no longer match indirect descendants if it's left as false.\n        descendants: true\n    }) tags: QueryList<McTag>;\n\n    // tslint:disable-next-line: naming-convention orthodox-getter-and-setter\n    _tabIndex = 0;\n\n    private _value: any;\n\n    private _required: boolean = false;\n\n    private _placeholder: string;\n\n    private _disabled: boolean = false;\n\n    private _selectable: boolean = true;\n\n    /** The tag input to add more tags */\n    private tagInput: McTagTextControl;\n\n    private _multiple: boolean = false;\n\n    /**\n     * When a tag is destroyed, we store the index of the destroyed tag until the tags\n     * query list notifies about the update. This is necessary because we cannot determine an\n     * appropriate tag that should receive focus until the array of tags updated completely.\n     */\n    private lastDestroyedTagIndex: number | null = null;\n\n    /** Subject that emits when the component has been destroyed. */\n    private destroyed = new Subject<void>();\n\n    /** Subscription to focus changes in the tags. */\n    private tagFocusSubscription: Subscription | null;\n\n    /** Subscription to blur changes in the tags. */\n    private tagBlurSubscription: Subscription | null;\n\n    /** Subscription to selection changes in tags. */\n    private tagSelectionSubscription: Subscription | null;\n\n    /** Subscription to remove changes in tags. */\n    private tagRemoveSubscription: Subscription | null;\n\n    constructor(\n        protected elementRef: ElementRef<HTMLElement>,\n        private changeDetectorRef: ChangeDetectorRef,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        @Optional() @Inject(NG_VALIDATORS) public rawValidators: Validator[],\n        @Optional() @Inject(MC_VALIDATION) private mcValidation: McValidationOptions,\n        @Optional() private dir: Directionality,\n        @Optional() parentForm: NgForm,\n        @Optional() parentFormGroup: FormGroupDirective,\n        @Optional() @Self() ngControl: NgControl,\n        @Optional() @Self() public ngModel: NgModel,\n        @Optional() @Self() public formControlName: FormControlName\n    ) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            this.ngControl.valueAccessor = this;\n        }\n    }\n\n    ngAfterContentInit() {\n        if (this.mcValidation.useValidation) {\n            setMosaicValidation(this);\n        }\n\n        this.keyManager = new FocusKeyManager<McTag>(this.tags)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this.dir ? this.dir.value : 'ltr');\n\n        if (this.dir) {\n            this.dir.change\n                .pipe(takeUntil(this.destroyed))\n                .subscribe((dir) => this.keyManager.withHorizontalOrientation(dir));\n        }\n\n        // Prevents the tag list from capturing focus and redirecting\n        // it back to the first tag when the user tabs out.\n        this.keyManager.tabOut\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(() => {\n                this._tabIndex = -1;\n\n                setTimeout(() => {\n                    this._tabIndex = this.userTabIndex || 0;\n                    this.changeDetectorRef.markForCheck();\n                });\n            });\n\n        // When the list changes, re-subscribe\n        this.tags.changes\n            .pipe(startWith(null), takeUntil(this.destroyed))\n            .subscribe(() => {\n                if (this.disabled) {\n                    // Since this happens after the content has been\n                    // checked, we need to defer it to the next tick.\n                    Promise.resolve().then(() => { this.syncTagsDisabledState(); });\n                }\n\n                this.resetTags();\n\n                // Reset tags selected/deselected status\n                this.initializeSelection();\n\n                // Check to see if we need to update our tab index\n                this.updateTabIndex();\n\n                // Check to see if we have a destroyed tag and need to refocus\n                this.updateFocusForDestroyedTags();\n\n                // Defer setting the value in order to avoid the \"Expression\n                // has changed after it was checked\" errors from Angular.\n                Promise.resolve().then(() => {\n                    this.tagChanges.emit(this.tags.toArray());\n                    this.stateChanges.next();\n                    this.propagateTagsChanges();\n                });\n            });\n    }\n\n    ngOnInit() {\n        this.selectionModel = new SelectionModel<McTag>(this.multiple, undefined, false);\n        this.stateChanges.next();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroyed.next();\n        this.destroyed.complete();\n        this.stateChanges.complete();\n\n        this.dropSubscriptions();\n    }\n\n    // tslint:disable-next-line:no-empty\n    onTouched = () => {};\n\n    // tslint:disable-next-line:no-empty\n    onChange: (value: any) => void = () => {};\n\n    /** Associates an HTML input element with this tag list. */\n    registerInput(inputElement: McTagTextControl): void {\n        this.tagInput = inputElement;\n\n        // todo need rethink about it\n        if (this.ngControl && inputElement.ngControl) {\n            inputElement.ngControl.statusChanges!\n                .subscribe(() => this.ngControl.control!.setErrors(inputElement.ngControl!.errors));\n        }\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any): void {\n        if (this.tags) {\n            this.setSelectionByValue(value, false);\n        }\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this.onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n        this.stateChanges.next();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick(event: MouseEvent) {\n        if (!this.originatesFromTag(event)) {\n            this.focus();\n        }\n    }\n\n    /**\n     * Focuses the first non-disabled tag in this tag list, or the associated input when there\n     * are no eligible tags.\n     */\n    focus(): void {\n        if (this.disabled) { return; }\n\n        // TODO: ARIA says this should focus the first `selected` tag if any are selected.\n        // Focus on first element if there's no tagInput inside tag-list\n        if (this.tagInput && this.tagInput.focused) {\n            // do nothing\n        } else if (this.tags.length > 0) {\n            this.keyManager.setFirstItemActive();\n            this.stateChanges.next();\n        } else {\n            this.focusInput();\n            this.stateChanges.next();\n        }\n    }\n\n    /** Attempt to focus an input if we have one. */\n    focusInput() {\n        if (this.tagInput) {\n            this.tagInput.focus();\n        }\n    }\n\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n    keydown(event: KeyboardEvent) {\n        const target = event.target as HTMLElement;\n\n        // If they are on an empty input and hit backspace, focus the last tag\n        // tslint:disable-next-line: deprecation\n        if (event.keyCode === BACKSPACE && this.isInputEmpty(target)) {\n            this.keyManager.setLastItemActive();\n            event.preventDefault();\n        } else if (target && target.classList.contains('mc-tag')) {\n            // tslint:disable-next-line: deprecation\n            if (event.keyCode === HOME) {\n                this.keyManager.setFirstItemActive();\n                event.preventDefault();\n            // tslint:disable-next-line: deprecation\n            } else if (event.keyCode === END) {\n                this.keyManager.setLastItemActive();\n                event.preventDefault();\n            } else {\n                this.keyManager.onKeydown(event);\n            }\n\n            this.stateChanges.next();\n        }\n    }\n\n    setSelectionByValue(value: any, isUserInput: boolean = true) {\n        this.clearSelection();\n        this.tags.forEach((tag) => tag.deselect());\n\n        if (Array.isArray(value)) {\n            value.forEach((currentValue) => this.selectValue(currentValue, isUserInput));\n            this.sortValues();\n        } else {\n            const correspondingTag = this.selectValue(value, isUserInput);\n\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what tag the user interacted with last.\n            if (correspondingTag && isUserInput) {\n                this.keyManager.setActiveItem(correspondingTag);\n            }\n        }\n    }\n\n    /** When blurred, mark the field as touched when focus moved outside the tag list. */\n    blur() {\n        if (!this.hasFocusedTag()) {\n            this.keyManager.setActiveItem(-1);\n        }\n\n        if (!this.disabled) {\n            if (this.tagInput) {\n                // If there's a tag input, we should check whether the focus moved to tag input.\n                // If the focus is not moved to tag input, mark the field as touched. If the focus moved\n                // to tag input, do nothing.\n                // Timeout is needed to wait for the focus() event trigger on tag input.\n                setTimeout(() => {\n                    if (!this.focused) {\n                        this.markAsTouched();\n                    }\n                });\n            } else {\n                // If there's no tag input, then mark the field as touched.\n                this.markAsTouched();\n            }\n        }\n    }\n\n    /** Mark the field as touched */\n    markAsTouched() {\n        this.onTouched();\n        this.changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     */\n    protected updateTabIndex(): void {\n        // If we have 0 tags, we should not allow keyboard focus\n        this._tabIndex = this.userTabIndex || (this.tags.length === 0 ? -1 : 0);\n    }\n\n    /**\n     * If the amount of tags changed, we need to update the\n     * key manager state and focus the next closest tag.\n     */\n    protected updateFocusForDestroyedTags() {\n        if (this.lastDestroyedTagIndex != null) {\n            if (this.tags.length) {\n                const newTagIndex = Math.min(this.lastDestroyedTagIndex, this.tags.length - 1);\n                this.keyManager.setActiveItem(newTagIndex);\n            } else {\n                this.focusInput();\n            }\n        }\n\n        this.lastDestroyedTagIndex = null;\n    }\n\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of tags.\n     */\n    private isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.tags.length;\n    }\n\n    private isInputEmpty(element: HTMLElement): boolean {\n        if (element && element.nodeName.toLowerCase() === 'input') {\n            const input = element as HTMLInputElement;\n\n            return !input.value;\n        }\n\n        return false;\n    }\n\n    /**\n     * Finds and selects the tag based on its value.\n     * @returns Tag that has the corresponding value.\n     */\n    private selectValue(value: any, isUserInput: boolean = true): McTag | undefined {\n\n        const correspondingTag = this.tags.find((tag) => {\n            return tag.value != null && this._compareWith(tag.value, value);\n        });\n\n        if (correspondingTag) {\n            if (isUserInput) {\n                correspondingTag.selectViaInteraction();\n            } else {\n                correspondingTag.select();\n            }\n\n            this.selectionModel.select(correspondingTag);\n        }\n\n        return correspondingTag;\n    }\n\n    private initializeSelection(): void {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl || this._value) {\n                this.setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n                this.stateChanges.next();\n            }\n        });\n    }\n\n    /**\n     * Deselects every tag in the list.\n     * @param skip Tag that should not be deselected.\n     */\n    private clearSelection(skip?: McTag): void {\n        this.selectionModel.clear();\n        this.tags.forEach((tag) => {\n            if (tag !== skip) {\n                tag.deselect();\n            }\n        });\n        this.stateChanges.next();\n    }\n\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     */\n    private sortValues(): void {\n        if (this._multiple) {\n            this.selectionModel.clear();\n\n            this.tags.forEach((tag) => {\n                if (tag.selected) {\n                    this.selectionModel.select(tag);\n                }\n            });\n            this.stateChanges.next();\n        }\n    }\n\n    /** Emits change event to set the model value. */\n    // todo need rethink this method and selection logic\n    private propagateChanges(fallbackValue?: any): void {\n        let valueToEmit: any = null;\n\n        if (Array.isArray(this.selected)) {\n            valueToEmit = this.selected.map((tag) => tag.value);\n        } else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.change.emit(new McTagListChange(this, valueToEmit));\n        this.valueChange.emit(valueToEmit);\n        this.onChange(valueToEmit);\n        this.changeDetectorRef.markForCheck();\n    }\n\n    private propagateTagsChanges(): void {\n        const valueToEmit: any = this.tags.map((tag) => tag.value);\n\n        this._value = valueToEmit;\n        this.change.emit(new McTagListChange(this, valueToEmit));\n        this.valueChange.emit(valueToEmit);\n        this.onChange(valueToEmit);\n        this.changeDetectorRef.markForCheck();\n    }\n\n    private resetTags() {\n        this.dropSubscriptions();\n        this.listenToTagsFocus();\n        this.listenToTagsSelection();\n        this.listenToTagsRemoved();\n    }\n\n    private dropSubscriptions() {\n        if (this.tagFocusSubscription) {\n            this.tagFocusSubscription.unsubscribe();\n            this.tagFocusSubscription = null;\n        }\n\n        if (this.tagBlurSubscription) {\n            this.tagBlurSubscription.unsubscribe();\n            this.tagBlurSubscription = null;\n        }\n\n        if (this.tagSelectionSubscription) {\n            this.tagSelectionSubscription.unsubscribe();\n            this.tagSelectionSubscription = null;\n        }\n\n        if (this.tagRemoveSubscription) {\n            this.tagRemoveSubscription.unsubscribe();\n            this.tagRemoveSubscription = null;\n        }\n    }\n\n    /** Listens to user-generated selection events on each tag. */\n    private listenToTagsSelection(): void {\n        this.tagSelectionSubscription = this.tagSelectionChanges.subscribe((event) => {\n            if (event.source.selected) {\n                this.selectionModel.select(event.source);\n            } else {\n                this.selectionModel.deselect(event.source);\n            }\n\n            // For single selection tag list, make sure the deselected value is unselected.\n            if (!this.multiple) {\n                this.tags.forEach((tag) => {\n                    if (!this.selectionModel.isSelected(tag) && tag.selected) {\n                        tag.deselect();\n                    }\n                });\n            }\n\n            if (event.isUserInput) {\n                this.propagateChanges();\n            }\n        });\n    }\n\n    /** Listens to user-generated selection events on each tag. */\n    private listenToTagsFocus(): void {\n        this.tagFocusSubscription = this.tagFocusChanges.subscribe((event) => {\n            const tagIndex: number = this.tags.toArray().indexOf(event.tag);\n\n            if (this.isValidIndex(tagIndex)) {\n                this.keyManager.updateActiveItem(tagIndex);\n            }\n\n            this.stateChanges.next();\n        });\n\n        this.tagBlurSubscription = this.tagBlurChanges.subscribe(() => {\n            this.blur();\n            this.stateChanges.next();\n        });\n    }\n\n    private listenToTagsRemoved(): void {\n        this.tagRemoveSubscription = this.tagRemoveChanges.subscribe((event) => {\n            const tag = event.tag;\n            const tagIndex = this.tags.toArray().indexOf(event.tag);\n\n            // In case the tag that will be removed is currently focused, we temporarily store\n            // the index in order to be able to determine an appropriate sibling tag that will\n            // receive focus.\n            if (this.isValidIndex(tagIndex) && tag.hasFocus) {\n                this.lastDestroyedTagIndex = tagIndex;\n            } else if (this.isValidIndex(tagIndex) && !tag.hasFocus) {\n                this.focusInput();\n            }\n        });\n    }\n\n    /** Checks whether an event comes from inside a tag element. */\n    private originatesFromTag(event: Event): boolean {\n        let currentElement = event.target as HTMLElement | null;\n\n        while (currentElement && currentElement !== this.elementRef.nativeElement) {\n            if (currentElement.classList.contains('mc-tag')) { return true; }\n\n            currentElement = currentElement.parentElement;\n        }\n\n        return false;\n    }\n\n    /** Checks whether any of the tags is focused. */\n    private hasFocusedTag() {\n        return this.tags.some((tag) => tag.hasFocus);\n    }\n\n    /** Syncs the list's disabled state with the individual tags. */\n    private syncTagsDisabledState() {\n        if (this.tags) {\n            this.tags.forEach((tag) => {\n                tag.disabled = this._disabled;\n            });\n        }\n    }\n}\n\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Input,\n    OnChanges,\n    Optional,\n    Output,\n    Renderer2,\n    Self\n} from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { hasModifierKey, ENTER, TAB, SPACE, COMMA } from '@ptsecurity/cdk/keycodes';\n\nimport { MC_TAGS_DEFAULT_OPTIONS, McTagsDefaultOptions } from './tag-default-options';\nimport { McTagList } from './tag-list.component';\nimport { McTagTextControl } from './tag-text-control';\n\n\n/** Represents an input event on a `mcTagInput`. */\n// tslint:disable-next-line: naming-convention\nexport interface McTagInputEvent {\n    /** The native `<input>` element that the event is being fired for. */\n    input: HTMLInputElement;\n\n    /** The value of the input. */\n    value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds tag-specific behaviors to an input element inside `<mc-form-field>`.\n * May be placed inside or outside of an `<mc-tag-list>`.\n */\n@Directive({\n    selector: 'input[mcTagInputFor]',\n    exportAs: 'mcTagInput, mcTagInputFor',\n    host: {\n        class: 'mc-tag-input mc-input-element',\n        '[id]': 'id',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.placeholder]': 'placeholder || null',\n        '(keydown)': 'keydown($event)',\n        '(blur)': 'blur()',\n        '(focus)': 'onFocus()',\n        '(input)': 'onInput()',\n        '(paste)': 'onPaste($event)'\n    }\n})\nexport class McTagInput implements McTagTextControl, OnChanges {\n    /** Whether the control is focused. */\n    focused: boolean = false;\n\n    /**\n     * The list of key codes that will trigger a tagEnd event.\n     *\n     * Defaults to `[ENTER]`.\n     */\n    @Input('mcTagInputSeparatorKeyCodes')\n    separatorKeyCodes: number[] = this.defaultOptions.separatorKeyCodes;\n\n    /** Emitted when a tag is to be added. */\n    @Output('mcTagInputTokenEnd')\n    tagEnd: EventEmitter<McTagInputEvent> = new EventEmitter<McTagInputEvent>();\n\n    /** The input's placeholder text. */\n    @Input() placeholder: string = '';\n\n    /** Unique id for the input. */\n    @Input() id: string = `mc-tag-list-input-${nextUniqueId++}`;\n\n    /** Register input for tag list */\n    @Input('mcTagInputFor')\n    set tagList(value: McTagList) {\n        if (value) {\n            this._tagList = value;\n            this._tagList.registerInput(this);\n        }\n    }\n\n    // tslint:disable-next-line: naming-convention\n    private _tagList: McTagList;\n\n    /**\n     * Whether or not the tagEnd event will be emitted when the input is blurred.\n     */\n    @Input('mcTagInputAddOnBlur')\n    get addOnBlur(): boolean {\n        return this._addOnBlur;\n    }\n\n    set addOnBlur(value: boolean) {\n        this._addOnBlur = coerceBooleanProperty(value);\n    }\n\n    private _addOnBlur: boolean = true;\n\n    /** Whether the input is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this._tagList && this._tagList.disabled);\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    private _disabled: boolean = false;\n\n    /** Whether the input is empty. */\n    get empty(): boolean {\n        return !this.inputElement.value;\n    }\n\n    countOfSymbolsForUpdateWidth: number = 3;\n\n    private oneSymbolWidth: number;\n\n    /** The native input element to which this directive is attached. */\n    private inputElement: HTMLInputElement;\n\n    constructor(\n        private elementRef: ElementRef<HTMLInputElement>,\n        private renderer: Renderer2,\n        @Inject(MC_TAGS_DEFAULT_OPTIONS) private defaultOptions: McTagsDefaultOptions,\n        @Optional() @Self() public ngControl: NgControl\n    ) {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        this.inputElement = this.elementRef.nativeElement as HTMLInputElement;\n\n        this.setDefaultInputWidth();\n    }\n\n    ngOnChanges() {\n        this._tagList.stateChanges.next();\n    }\n\n    /** Utility method to make host definition/tests more clear. */\n    keydown(event?: KeyboardEvent) {\n        this.emitTagEnd(event);\n    }\n\n    /** Checks to see if the blur should emit the (tagEnd) event. */\n    blur() {\n        this.focused = false;\n        // Blur the tag list if it is not focused\n        if (!this._tagList.focused) {\n            this.triggerValidation();\n\n            this._tagList.blur();\n        }\n\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        if (this.addOnBlur && !(this.hasControl() && this.ngControl.invalid)) {\n            this.emitTagEnd();\n        }\n\n        this._tagList.stateChanges.next();\n    }\n\n    triggerValidation() {\n        if (!this.hasControl()) { return; }\n\n        (this.ngControl.statusChanges as EventEmitter<string | null>).emit(this.ngControl.status);\n    }\n\n    /** Checks to see if the (tagEnd) event needs to be emitted. */\n    emitTagEnd(event?: KeyboardEvent) {\n        if (!this.inputElement.value && !!event) {\n            this._tagList.keydown(event);\n        }\n\n        if (!event || this.isSeparatorKey(event)) {\n            this.tagEnd.emit({ input: this.inputElement, value: this.inputElement.value });\n            this.updateInputWidth();\n\n            if (event) {\n                event.preventDefault();\n            }\n        }\n    }\n\n    onInput() {\n        this.updateInputWidth();\n        // Let tag list know whenever the value changes.\n        this._tagList.stateChanges.next();\n    }\n\n    onPaste($event: ClipboardEvent) {\n        if (!$event.clipboardData) { return; }\n\n        const data = $event.clipboardData.getData('text');\n\n        if (data && data.length === 0) { return; }\n\n        const items: string[] = [];\n\n        for (const key of this.separatorKeyCodes) {\n            const separator = this.separatorKeyToSymbol(key);\n\n            if (data.search(separator) > -1) {\n                items.push(...data.split(separator));\n\n                break;\n            }\n        }\n\n        if (items.length === 0) {\n            items.push(data);\n        }\n\n        items.forEach((item) => this.tagEnd.emit({ input: this.inputElement, value: item }));\n\n        this.updateInputWidth();\n\n        $event.preventDefault();\n        $event.stopPropagation();\n    }\n\n    updateInputWidth(): void {\n        const length = this.inputElement.value.length;\n\n        this.renderer.setStyle(this.inputElement, 'max-width', 0);\n        this.oneSymbolWidth = this.inputElement.scrollWidth / length;\n        this.renderer.setStyle(this.inputElement, 'max-width', '');\n\n        if (length > this.countOfSymbolsForUpdateWidth) {\n            this.renderer.setStyle(this.inputElement, 'width', `${length * this.oneSymbolWidth}px`);\n        } else {\n            this.setDefaultInputWidth();\n        }\n    }\n\n    onFocus() {\n        this.focused = true;\n        this._tagList.stateChanges.next();\n    }\n\n    /** Focuses the input. */\n    focus(): void {\n        this.inputElement.focus();\n    }\n\n    private separatorKeyToSymbol(k): string {\n        const sep = {\n            [ENTER]: /\\r?\\n/,\n            [TAB]: /\\t/,\n            [SPACE]: / /,\n            [COMMA]: /,/\n        }[k];\n\n        if (sep) { return sep; }\n\n        return k;\n    }\n\n    private hasControl(): boolean {\n        return !!this.ngControl;\n    }\n\n    private setDefaultInputWidth() {\n        this.renderer.setStyle(this.inputElement, 'width', '30px');\n    }\n\n    /** Checks whether a keycode is one of the configured separators. */\n    private isSeparatorKey(event: KeyboardEvent) {\n        if (hasModifierKey(event)) { return false; }\n\n        // tslint:disable-next-line: deprecation\n        return this.separatorKeyCodes.indexOf(event.keyCode) > -1;\n    }\n}\n","import { PlatformModule } from '@angular/cdk/platform';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ENTER } from '@ptsecurity/cdk/keycodes';\n\nimport { MC_TAGS_DEFAULT_OPTIONS, McTagsDefaultOptions } from './tag-default-options';\nimport { McTagInput } from './tag-input';\nimport { McTagList } from './tag-list.component';\nimport { McTag, McTagAvatar, McTagRemove, McTagTrailingIcon } from './tag.component';\n\n\n@NgModule({\n    imports: [CommonModule, PlatformModule],\n    exports: [\n        McTagList,\n        McTag,\n        McTagInput,\n        McTagTrailingIcon,\n        McTagAvatar,\n        McTagRemove\n    ],\n    declarations: [\n        McTagList,\n        McTag,\n        McTagInput,\n        McTagTrailingIcon,\n        McTagAvatar,\n        McTagRemove\n    ],\n    providers: [{\n        provide: MC_TAGS_DEFAULT_OPTIONS,\n        // tslint:disable-next-line: no-object-literal-type-assertion\n        useValue: { separatorKeyCodes: [ENTER] } as McTagsDefaultOptions\n    }]\n})\nexport class McTagsModule {}\n"]}