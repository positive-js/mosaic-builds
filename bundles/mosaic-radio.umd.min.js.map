{"version":3,"file":"mosaic-radio.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/lib/radio/radio.component.ts","../../src/lib/radio/radio.module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef,\n    Input, OnDestroy, OnInit, Optional, Output, QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { UniqueSelectionDispatcher } from '@ptsecurity/cdk/collections';\n\nimport {\n    CanColor, CanColorCtor,\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/** Change event object emitted by McRadio. */\nexport class McRadioChange {\n    constructor(\n        /** The McRadioButton that emits the change event. */\n        public source: McRadioButton,\n        /** The value of the McRadioButton. */\n        public value: any) {}\n}\n\n// Boilerplate for applying mixins to McRadioGroup.\n/** @docs-private */\nexport class McRadioGroupBase {}\nexport const _McRadioGroupMixinBase: CanDisableCtor & typeof McRadioGroupBase = mixinDisabled(McRadioGroupBase);\n\n/**\n * Provider Expression that allows mc-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McRadioGroup),\n    multi: true\n};\n\n@Directive({\n    selector: 'mc-radio-group',\n    exportAs: 'mcRadioGroup',\n    providers: [MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n    host: {\n        role: 'radiogroup',\n        class: 'mc-radio-group'\n    },\n    inputs: ['disabled']\n})\nexport class McRadioGroup extends _McRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    @Input()\n    get name(): string { return this._name; }\n    set name(value: string) {\n        this._name = value;\n        this.updateRadioButtonNames();\n    }\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this.markRadiosForCheck();\n    }\n\n    /** Value of the radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n\n            this.updateSelectedRadioFromValue();\n            this.checkSelectedRadioButton();\n        }\n    }\n\n    /** Whether the radio button is selected. */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: McRadioButton | null) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this.checkSelectedRadioButton();\n    }\n\n    /** Whether the radio group is disabled */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /** Whether the radio group is required */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** Child radio buttons. */\n    @ContentChildren(forwardRef(() => McRadioButton), { descendants: true })\n    _radios: QueryList<McRadioButton>;\n\n    /**\n     * Selected value for group. Should equal the value of the selected radio button if there *is*\n     * a corresponding radio button with a matching value. If there is *not* such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    private _value: any = null;\n\n    /** The HTML name attribute applied to radio buttons in this group. */\n    private _name: string = `mc-radio-group-${nextUniqueId++}`;\n\n    /** The currently selected radio button. Should match value. */\n    private _selected: McRadioButton | null = null;\n\n    /** Whether the `value` has been set to its initial value. */\n    private _isInitialized: boolean = false;\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    private _labelPosition: 'before' | 'after' = 'after';\n\n    /** Whether the radio group is disabled. */\n    private _disabled: boolean = false;\n\n    /** Whether the radio group is required. */\n    private _required: boolean = false;\n\n    constructor(\n        private readonly _changeDetector: ChangeDetectorRef\n    ) {\n        super();\n    }\n\n    /** The method to be called in order to update ngModel */\n    // tslint:disable-next-line\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @docs-private\n     */\n    // tslint:disable-next-line\n    onTouched: () => any = () => {};\n\n    checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on McRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the McRadioGroup.\n        this._isInitialized = true;\n    }\n\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        if (this._isInitialized) {\n            this.change.emit(new McRadioChange(this._selected!, this._value));\n        }\n    }\n\n    markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach((radio) => radio.markForCheck());\n        }\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n\n    private updateRadioButtonNames(): void {\n        if (this._radios) {\n            this._radios.forEach((radio) => {\n                radio.name = this.name;\n            });\n        }\n    }\n\n    /** Updates the `selected` radio button from the internal _value state. */\n    private updateSelectedRadioFromValue(): void {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n        if (this._radios != null && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach((radio) => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n}\n\n\n// Boilerplate for applying mixins to McRadioButton.\n/** @docs-private */\nexport class McRadioButtonBase {\n    // Since the disabled property is manually defined for the McRadioButton and isn't set up in\n    // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n    // defined to properly work.\n    disabled: boolean;\n\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McRadioButtonMixinBase:\n    CanColorCtor &\n    HasTabIndexCtor &\n    typeof McRadioButtonBase =\n        mixinColor(mixinTabIndex(McRadioButtonBase));\n\n\n@Component({\n    selector: 'mc-radio-button',\n    templateUrl: 'radio.component.html',\n    styleUrls: ['radio.css'],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    exportAs: 'mcRadioButton',\n    host: {\n        class: 'mc-radio-button',\n        '[attr.id]': 'id',\n        '[class.mc-checked]': 'checked',\n        '[class.mc-disabled]': 'disabled',\n        '(focus)': '_inputElement.nativeElement.focus()'\n    }\n})\nexport class McRadioButton extends _McRadioButtonMixinBase\n    implements OnInit, OnDestroy, CanColor, HasTabIndex {\n\n    private readonly _uniqueId: string = `mc-radio-${++nextUniqueId}`;\n\n    /* tslint:disable:member-ordering */\n\n    /** The unique ID for the radio button. */\n    @Input() id: string = this._uniqueId;\n\n    /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n    @Input() name: string;\n\n    /** Used to set the 'aria-label' attribute on the underlying input element. */\n    @Input('aria-label') ariaLabel: string;\n\n    /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n    @Input('aria-labelledby') ariaLabelledby: string;\n\n    /** The 'aria-describedby' attribute is read after the element's label and field type. */\n    @Input('aria-describedby') ariaDescribedby: string;\n\n    /** Whether this radio button is checked. */\n    @Input()\n    get checked(): boolean { return this._checked; }\n    set checked(value: boolean) {\n        const newCheckedState = toBoolean(value);\n\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** The value of this radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(value: any) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup != null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n\n    /** Whether the radio button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n    }\n    set disabled(value: boolean) {\n        const newDisabledState = toBoolean(value);\n\n        if (this._disabled !== newDisabledState) {\n\n            this._disabled = newDisabledState;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** Whether the radio button is required. */\n    @Input()\n    get required(): boolean {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    private _labelPosition: 'before' | 'after';\n\n    /** The native `<input type=radio>` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** The parent radio group. May or may not be present. */\n    radioGroup: McRadioGroup;\n\n    @Input()\n    isFocused: boolean = false;\n\n    /** ID of the native input element inside `<mc-radio-button>` */\n    get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n    /** Whether this radio is checked. */\n    private _checked: boolean = false;\n\n    /** Whether this radio is disabled. */\n    private _disabled: boolean;\n\n    /** Whether this radio is required. */\n    private _required: boolean;\n\n    /** Value assigned to this radio. */\n    private _value: any = null;\n\n    /** Unregister function for _radioDispatcher */\n    // tslint:disable-next-line\n    private readonly removeUniqueSelectionListener: () => void = () => {};\n\n    constructor(\n        @Optional() radioGroup: McRadioGroup,\n        elementRef: ElementRef,\n        private readonly _changeDetector: ChangeDetectorRef,\n        private readonly _radioDispatcher: UniqueSelectionDispatcher\n    ) {\n\n        super(elementRef);\n\n        this.radioGroup = radioGroup;\n\n        this.removeUniqueSelectionListener =\n            _radioDispatcher.listen((id: string, name: string) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n\n    ngOnDestroy() {\n        this.removeUniqueSelectionListener();\n    }\n\n    /** Focuses the radio button. */\n    // tslint:disable-next-line\n    focus(): void {}\n\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n\n    onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n\n    onInputChange(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this.emitChangeEvent();\n\n        if (this.radioGroup) {\n            this.radioGroup.controlValueAccessorChangeFn(this.value);\n            this.radioGroup.touch();\n            if (groupValueChanged) {\n                this.radioGroup.emitChangeEvent();\n            }\n        }\n    }\n\n    /** Dispatch change event with current value. */\n    private emitChangeEvent(): void {\n        this.change.emit(new McRadioChange(this, this._value));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McRadioButton, McRadioGroup } from './radio.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule],\n    exports: [McRadioGroup, McRadioButton],\n    declarations: [McRadioGroup, McRadioButton]\n})\nexport class McRadioModule {\n}\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","setPrototypeOf","__proto__","Array","p","hasOwnProperty","nextUniqueId","McRadioChange","source","value","McRadioGroupBase","_McRadioGroupMixinBase","mixinDisabled","MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","McRadioGroup","multi","_super","_changeDetector","_this","call","change","EventEmitter","_value","_name","_selected","_isInitialized","_labelPosition","_disabled","_required","controlValueAccessorChangeFn","onTouched","tslib_1.__extends","get","set","updateRadioButtonNames","v","markRadiosForCheck","newValue","updateSelectedRadioFromValue","checkSelectedRadioButton","selected","toBoolean","checked","ngAfterContentInit","touch","emitChangeEvent","emit","_radios","forEach","radio","markForCheck","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","name","isAlreadySelected","tslib_1.__decorate","Input","Output","tslib_1.__metadata","ContentChildren","McRadioButton","descendants","QueryList","Directive","selector","exportAs","providers","host","role","class","inputs","ChangeDetectorRef","McRadioButtonBase","_elementRef","_McRadioButtonMixinBase","mixinColor","mixinTabIndex","radioGroup","elementRef","_radioDispatcher","_uniqueId","id","isFocused","_checked","removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","required","labelPosition","ngOnInit","ngOnDestroy","focus","onInputClick","event","stopPropagation","onInputChange","groupValueChanged","ViewChild","ElementRef","Component","template","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","[attr.id]","[class.mc-checked]","[class.mc-disabled]","(focus)","tslib_1.__param","Optional","UniqueSelectionDispatcher","McRadioModule","NgModule","imports","CommonModule","A11yModule","McCommonModule","exports","declarations"],"mappings":"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"}