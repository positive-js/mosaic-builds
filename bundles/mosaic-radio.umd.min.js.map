{"version":3,"file":"mosaic-radio.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/lib/radio/radio.component.ts","../../src/lib/radio/radio.module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {\n    AfterContentInit, AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef,\n    Input, OnDestroy, OnInit, Optional, Output, QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\n\nimport {UniqueSelectionDispatcher} from '@ptsecurity/cdk/collections';\n\nimport {\n    CanColor,\n    CanDisable,\n    HasTabIndex,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/** Change event object emitted by McRadio. */\nexport class McRadioChange {\n    constructor(\n        /** The McRadioButton that emits the change event. */\n        public source: McRadioButton,\n        /** The value of the McRadioButton. */\n        public value: any) {}\n}\n\n// Boilerplate for applying mixins to McRadioGroup.\n/** @docs-private */\nexport class McRadioGroupBase { }\nexport const _McRadioGroupMixinBase = mixinDisabled(McRadioGroupBase);\n\n/**\n * Provider Expression that allows mc-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McRadioGroup),\n    multi: true\n};\n\n@Directive({\n    selector: 'mc-radio-group',\n    exportAs: 'mcRadioGroup',\n    providers: [MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n    host: {\n        'role': 'radiogroup',\n        'class': 'mc-radio-group'\n    },\n    inputs: ['disabled']\n})\nexport class McRadioGroup extends _McRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** Child radio buttons. */\n    @ContentChildren(forwardRef(() => McRadioButton), { descendants: true })\n    _radios: QueryList<McRadioButton>;\n\n    /**\n     * Selected value for group. Should equal the value of the selected radio button if there *is*\n     * a corresponding radio button with a matching value. If there is *not* such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    private _value: any = null;\n\n    /** The HTML name attribute applied to radio buttons in this group. */\n    private _name: string = `mc-radio-group-${nextUniqueId++}`;\n\n    /** The currently selected radio button. Should match value. */\n    private _selected: McRadioButton | null = null;\n\n    /** Whether the `value` has been set to its initial value. */\n    private _isInitialized: boolean = false;\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    private _labelPosition: 'before' | 'after' = 'after';\n\n    /** Whether the radio group is disabled. */\n    private _disabled: boolean = false;\n\n    /** Whether the radio group is required. */\n    private _required: boolean = false;\n\n    /** The method to be called in order to update ngModel */\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @docs-private\n     */\n    onTouched: () => any = () => {};\n\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    @Input()\n    get name(): string { return this._name; }\n    set name(value: string) {\n        this._name = value;\n        this.updateRadioButtonNames();\n    }\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this.markRadiosForCheck();\n    }\n\n    /** Value of the radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n\n            this.updateSelectedRadioFromValue();\n            this.checkSelectedRadioButton();\n        }\n    }\n\n    checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n\n    /** Whether the radio button is selected. */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: McRadioButton | null) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this.checkSelectedRadioButton();\n    }\n\n    /** Whether the radio group is disabled */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /** Whether the radio group is required */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    constructor(private _changeDetector: ChangeDetectorRef) {\n        super();\n    }\n\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on McRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the McRadioGroup.\n        this._isInitialized = true;\n    }\n\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        if (this._isInitialized) {\n            this.change.emit(new McRadioChange(this._selected!, this._value));\n        }\n    }\n\n    markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach((radio) => radio.markForCheck());\n        }\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n\n    private updateRadioButtonNames(): void {\n        if (this._radios) {\n            this._radios.forEach((radio) => {\n                radio.name = this.name;\n            });\n        }\n    }\n\n    /** Updates the `selected` radio button from the internal _value state. */\n    private updateSelectedRadioFromValue(): void {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected != null && this._selected.value === this._value;\n\n        if (this._radios != null && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach((radio) => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n}\n\n\n// Boilerplate for applying mixins to McRadioButton.\n/** @docs-private */\nexport class McRadioButtonBase {\n    // Since the disabled property is manually defined for the McRadioButton and isn't set up in\n    // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n    // defined to properly work.\n    disabled: boolean;\n\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McRadioButtonMixinBase =\n    mixinColor(mixinTabIndex(McRadioButtonBase));\n\n\n@Component({\n    selector: 'mc-radio-button',\n    templateUrl: 'radio.component.html',\n    styleUrls: ['radio.css'],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    exportAs: 'mcRadioButton',\n    host: {\n        'class': 'mc-radio-button',\n        '[attr.id]': 'id',\n        '[class.mc-radio-checked]': 'checked',\n        '[class.mc-radio-disabled]': 'disabled',\n        '(focus)': '_inputElement.nativeElement.focus()'\n    }\n})\nexport class McRadioButton extends _McRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, HasTabIndex {\n\n    private _uniqueId: string = `mc-radio-${++nextUniqueId}`;\n\n    /* tslint:disable:member-ordering */\n\n    /** The unique ID for the radio button. */\n    @Input() id: string = this._uniqueId;\n\n    /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n    @Input() name: string;\n\n    /** Used to set the 'aria-label' attribute on the underlying input element. */\n    @Input('aria-label') ariaLabel: string;\n\n    /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n    @Input('aria-labelledby') ariaLabelledby: string;\n\n    /** The 'aria-describedby' attribute is read after the element's label and field type. */\n    @Input('aria-describedby') ariaDescribedby: string;\n\n    /** Whether this radio button is checked. */\n    @Input()\n    get checked(): boolean { return this._checked; }\n    set checked(value: boolean) {\n        const newCheckedState = toBoolean(value);\n\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** The value of this radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(value: any) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup != null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n\n    /** Whether the radio button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n    }\n    set disabled(value: boolean) {\n        const newDisabledState = toBoolean(value);\n\n        if (this._disabled !== newDisabledState) {\n\n            this._disabled = newDisabledState;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** Whether the radio button is required. */\n    @Input()\n    get required(): boolean {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    private _labelPosition: 'before' | 'after';\n\n    /** The native `<input type=radio>` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** The parent radio group. May or may not be present. */\n    radioGroup: McRadioGroup;\n\n    @Input()\n    isFocused: boolean = false;\n\n    /** ID of the native input element inside `<mc-radio-button>` */\n    get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n    /** Whether this radio is checked. */\n    private _checked: boolean = false;\n\n    /** Whether this radio is disabled. */\n    private _disabled: boolean;\n\n    /** Whether this radio is required. */\n    private _required: boolean;\n\n    /** Value assigned to this radio. */\n    private _value: any = null;\n\n    /** Unregister function for _radioDispatcher */\n    private removeUniqueSelectionListener: () => void = () => {};\n\n    constructor(\n        @Optional() radioGroup: McRadioGroup,\n        elementRef: ElementRef,\n        private _changeDetector: ChangeDetectorRef,\n        private _radioDispatcher: UniqueSelectionDispatcher\n    ) {\n\n        super(elementRef);\n\n        this.radioGroup = radioGroup;\n\n        this.removeUniqueSelectionListener =\n            _radioDispatcher.listen((id: string, name: string) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n\n    ngAfterViewInit() {}\n\n    ngOnDestroy() {\n        this.removeUniqueSelectionListener();\n    }\n\n    /** Focuses the radio button. */\n    focus(): void {}\n\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n\n    onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n\n    onInputChange(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this.emitChangeEvent();\n\n        if (this.radioGroup) {\n            this.radioGroup.controlValueAccessorChangeFn(this.value);\n            this.radioGroup.touch();\n            if (groupValueChanged) {\n                this.radioGroup.emitChangeEvent();\n            }\n        }\n    }\n\n    /** Dispatch change event with current value. */\n    private emitChangeEvent(): void {\n        this.change.emit(new McRadioChange(this, this._value));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport {A11yModule} from '@ptsecurity/cdk/a11y';\nimport {McCommonModule} from '@ptsecurity/mosaic/core';\n\nimport {McRadioButton, McRadioGroup} from './radio.component';\n\n\n@NgModule({\n    imports: [ CommonModule, A11yModule, McCommonModule ],\n    exports: [ McRadioGroup, McRadioButton, McCommonModule ],\n    declarations: [ McRadioGroup, McRadioButton ]\n})\nexport class McRadioModule {}\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","setPrototypeOf","__proto__","Array","p","hasOwnProperty","nextUniqueId","McRadioChange","source","value","McRadioGroupBase","_McRadioGroupMixinBase","mixinDisabled","MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","McRadioGroup","multi","_changeDetector","_this","_super","call","change","EventEmitter","_value","_name","_selected","_isInitialized","_labelPosition","_disabled","_required","controlValueAccessorChangeFn","onTouched","tslib_1.__extends","defineProperty","set","updateRadioButtonNames","v","markRadiosForCheck","newValue","updateSelectedRadioFromValue","checkSelectedRadioButton","checked","selected","toBoolean","ngAfterContentInit","touch","emitChangeEvent","emit","_radios","forEach","radio","markForCheck","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","name","isAlreadySelected","type","Directive","args","selector","exportAs","providers","host","role","class","inputs","ChangeDetectorRef","Output","ContentChildren","McRadioButton","descendants","Input","labelPosition","required","McRadioButtonBase","_elementRef","_McRadioButtonMixinBase","mixinColor","mixinTabIndex","radioGroup","elementRef","_radioDispatcher","_uniqueId","id","isFocused","_checked","removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","ngOnInit","ngAfterViewInit","ngOnDestroy","focus","onInputClick","event","stopPropagation","onInputChange","groupValueChanged","Component","template","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","[attr.id]","[class.mc-radio-checked]","[class.mc-radio-disabled]","(focus)","decorators","Optional","ElementRef","UniqueSelectionDispatcher","ariaLabel","ariaLabelledby","ariaDescribedby","_inputElement","ViewChild","NgModule","imports","CommonModule","A11yModule","McCommonModule","exports","declarations","McRadioModule"],"mappings":"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"}