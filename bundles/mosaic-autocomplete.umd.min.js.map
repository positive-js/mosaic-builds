{"version":3,"file":"mosaic-autocomplete.umd.min.js","sources":["../../packages/mosaic/autocomplete/autocomplete.component.ts","../../packages/mosaic/autocomplete/autocomplete-trigger.directive.ts","../../packages/mosaic/autocomplete/autocomplete-origin.directive.ts","../../packages/mosaic/autocomplete/autocomplete.module.ts"],"sourcesContent":["import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ActiveDescendantKeyManager } from '@ptsecurity/cdk/a11y';\nimport { MC_OPTION_PARENT_COMPONENT, McOptgroup, McOption } from '@ptsecurity/mosaic/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet uniqueAutocompleteIdCounter = 0;\n\nexport class McAutocompleteSelectedEvent {\n    constructor(public source: McAutocomplete, public option: McOption) {}\n}\n\n/** Default `mc-autocomplete` options that can be overridden. */\n// tslint:disable-next-line naming-convention\nexport interface McAutocompleteDefaultOptions {\n    /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n    autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mc-autocomplete`. */\nexport const MC_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<McAutocompleteDefaultOptions>('mc-autocomplete-default-options', {\n        providedIn: 'root',\n        factory: MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY\n    });\n\n// tslint:disable-next-line naming-convention\nexport function MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): McAutocompleteDefaultOptions {\n    return { autoActiveFirstOption: true };\n}\n\n@Component({\n    selector: 'mc-autocomplete',\n    exportAs: 'mcAutocomplete',\n    templateUrl: 'autocomplete.html',\n    styleUrls: ['autocomplete.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: { class: 'mc-autocomplete' },\n    providers: [\n        { provide: MC_OPTION_PARENT_COMPONENT, useExisting: McAutocomplete }\n    ]\n})\nexport class McAutocomplete implements AfterContentInit {\n    /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n    id: string = `mc-autocomplete-${uniqueAutocompleteIdCounter++}`;\n\n    /** Manages active item in option list based on key events. */\n    keyManager: ActiveDescendantKeyManager<McOption>;\n\n    /** Whether the autocomplete panel should be visible, depending on option length. */\n    showPanel: boolean = false;\n\n    @ViewChild(TemplateRef, {static: true}) template: TemplateRef<any>;\n\n    @ViewChild('panel', {static: false}) panel: ElementRef;\n\n    @ContentChildren(McOption, { descendants: true }) options: QueryList<McOption>;\n\n    @ContentChildren(McOptgroup) optionGroups: QueryList<McOptgroup>;\n\n    /** Function that maps an option's control value to its display value in the trigger. */\n    @Input() displayWith: ((value: any) => string) | null = null;\n\n    /**\n     * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n     * match the width of its host.\n     */\n    @Input() panelWidth: string | number;\n\n    /** Event that is emitted whenever an option from the list is selected. */\n    @Output() readonly optionSelected: EventEmitter<McAutocompleteSelectedEvent> =\n        new EventEmitter<McAutocompleteSelectedEvent>();\n\n    /** Event that is emitted when the autocomplete panel is opened. */\n    @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Event that is emitted when the autocomplete panel is closed. */\n    @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n    /**\n     * Takes classes set on the host mc-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    get classList() {\n        return this._classList;\n    }\n\n    @Input('class')\n    set classList(value: string) {\n        if (value && value.length) {\n            value.split(' ')\n                .forEach((className) => this._classList[className.trim()] = true);\n\n            this.elementRef.nativeElement.className = '';\n        }\n    }\n\n    private _classList: any = {};\n\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MC_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     */\n    @Input()\n    get autoActiveFirstOption(): boolean {\n        return this._autoActiveFirstOption;\n    }\n\n    set autoActiveFirstOption(value: boolean) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n\n    private _autoActiveFirstOption: boolean;\n\n    get isOpen(): boolean {\n        return this._isOpen && this.showPanel;\n    }\n\n    set isOpen(value: boolean) {\n        this._isOpen = value;\n    }\n\n    private _isOpen: boolean = false;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        private elementRef: ElementRef<HTMLElement>,\n        @Inject(MC_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: McAutocompleteDefaultOptions\n    ) {\n        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    }\n\n    ngAfterContentInit() {\n        this.keyManager = new ActiveDescendantKeyManager<McOption>(this.options);\n        this.setVisibility();\n    }\n\n    setScrollTop(scrollTop: number): void {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n\n    getScrollTop(): number {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n\n    setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._classList['mc-autocomplete_visible'] = this.showPanel;\n        this._classList['mc-autocomplete_hidden'] = !this.showPanel;\n\n        this.changeDetectorRef.markForCheck();\n    }\n\n    emitSelectEvent(option: McOption): void {\n        const event = new McAutocompleteSelectedEvent(this, option);\n\n        this.optionSelected.emit(event);\n    }\n\n    onKeydown(event: KeyboardEvent): any {\n        this.keyManager.onKeydown(event);\n    }\n}\n\n","import { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    forwardRef,\n    Host,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    Optional,\n    ViewContainerRef\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW } from '@ptsecurity/cdk/keycodes';\nimport {\n    FlexibleConnectedPositionStrategy,\n    Overlay,\n    OverlayConfig,\n    OverlayRef,\n    PositionStrategy,\n    ScrollStrategy, ConnectedPosition\n} from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport {\n    countGroupLabelsBeforeOption,\n    getOptionScrollPosition,\n    McOption,\n    McOptionSelectionChange\n} from '@ptsecurity/mosaic/core';\nimport { McFormField } from '@ptsecurity/mosaic/form-field';\nimport { Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable } from 'rxjs';\nimport { filter, take, switchMap, delay, tap, map } from 'rxjs/operators';\n\nimport { McAutocompleteOrigin } from './autocomplete-origin.directive';\nimport { McAutocomplete } from './autocomplete.component';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 32;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\nexport const AUTOCOMPLETE_BORDER_WIDTH: number = 2;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MC_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mc-autocomplete-scroll-strategy');\n\n// tslint:disable-next-line naming-convention\nexport function MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\nexport const MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McAutocompleteTrigger),\n    multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMcAutocompleteMissingPanelError(): Error {\n    return Error('Attempting to open an undefined instance of `mc-autocomplete`. ' +\n        'Make sure that the id passed to the `mcAutocomplete` is correct and that ' +\n        'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n    selector: `input[mcAutocomplete], textarea[mcAutocomplete]`,\n    host: {\n        class: 'mc-autocomplete-trigger',\n        '[attr.autocomplete]': 'autocompleteAttribute',\n        // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n        // a little earlier. This avoids issues where IE delays the focusing of the input.\n        '(focusin)': 'handleFocus()',\n        '(blur)': 'onTouched()',\n        '(input)': 'handleInput($event)',\n        '(keydown)': 'handleKeydown($event)',\n        '(click)': 'handleClick($event)'\n    },\n    exportAs: 'mcAutocompleteTrigger',\n    providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class McAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n    // @ts-ignore\n    readonly optionSelections: Observable<McOptionSelectionChange> = defer(() => {\n        if (this.autocomplete && this.autocomplete.options) {\n            return merge(...this.autocomplete.options.map((option) => option.onSelectionChange));\n        }\n\n        // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n        // Return a stream that we'll replace with the real one once everything is in place.\n        return this.zone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelections));\n    });\n\n    /** The currently active option, coerced to MatOption type. */\n    get activeOption(): McOption | null {\n        if (this.autocomplete && this.autocomplete.keyManager) {\n            return this.autocomplete.keyManager.activeItem;\n        }\n\n        return null;\n    }\n\n    get panelOpen(): boolean {\n        return this.overlayAttached && this.autocomplete.showPanel;\n    }\n\n    /** The autocomplete panel to be attached to this trigger. */\n    @Input('mcAutocomplete') autocomplete: McAutocomplete;\n\n    /**\n     * Reference relative to which to position the autocomplete panel.\n     * Defaults to the autocomplete trigger element.\n     */\n    @Input('mcAutocompleteConnectedTo') connectedTo: McAutocompleteOrigin;\n\n    /**\n     * `autocomplete` attribute to be set on the input element.\n     * @docs-private\n     */\n    @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     */\n    @Input('mcAutocompleteDisabled')\n    get autocompleteDisabled(): boolean {\n        return this._autocompleteDisabled;\n    }\n\n    set autocompleteDisabled(value: boolean) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n\n    private _autocompleteDisabled = false;\n\n    private overlayAttached: boolean = false;\n\n    private overlayRef: OverlayRef | null;\n\n    private portal: TemplatePortal;\n\n    private componentDestroyed = false;\n\n    private scrollStrategy: () => ScrollStrategy;\n\n    /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n    private previousValue: string | number | null;\n\n    /** Strategy that is used to position the panel. */\n    private positionStrategy: FlexibleConnectedPositionStrategy;\n\n    /** The subscription for closing actions (some are bound to document). */\n    private closingActionsSubscription: Subscription;\n\n    /** Subscription to viewport size changes. */\n    private viewportSubscription = Subscription.EMPTY;\n\n    /**\n     * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n     * closed autocomplete from being reopened if the user switches to another browser tab and then\n     * comes back.\n     */\n    private canOpenOnNextFocus = true;\n\n    /** Stream of keyboard events that can close the panel. */\n    private readonly closeKeyEventStream = new Subject<void>();\n\n    constructor(\n        private elementRef: ElementRef<HTMLInputElement>,\n        private viewContainerRef: ViewContainerRef,\n        private changeDetectorRef: ChangeDetectorRef,\n        private overlay: Overlay,\n        private zone: NgZone,\n        @Inject(MC_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n        @Optional() private dir: Directionality,\n        @Optional() @Host() private formField: McFormField,\n        @Optional() @Inject(DOCUMENT) private document: any,\n        // @breaking-change 8.0.0-e2c7598 Make `_viewportRuler` required.\n        private viewportRuler?: ViewportRuler\n    ) {\n        // tslint:disable-next-line no-typeof-undefined\n        if (typeof window !== 'undefined') {\n            zone.runOutsideAngular(() => {\n                window.addEventListener('blur', this.windowBlurHandler);\n            });\n        }\n\n        this.scrollStrategy = scrollStrategy;\n    }\n\n    ngOnDestroy() {\n        // tslint:disable-next-line no-typeof-undefined\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this.windowBlurHandler);\n        }\n\n        this.viewportSubscription.unsubscribe();\n        this.componentDestroyed = true;\n        this.destroyPanel();\n        this.closeKeyEventStream.complete();\n    }\n\n    /** `View -> model callback called when value changes` */\n    // tslint:disable-next-line no-empty\n    onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when autocomplete has been touched` */\n    // tslint:disable-next-line no-empty\n    onTouched: () => void = () => {};\n\n    /** Opens the autocomplete suggestion panel. */\n    openPanel(): void {\n        this.attachOverlay();\n    }\n\n    closePanel(): void {\n        if (!this.overlayAttached) { return; }\n\n        if (this.panelOpen) {\n            this.autocomplete.closed.emit();\n        }\n\n        this.autocomplete.isOpen = this.overlayAttached = false;\n\n        if (this.overlayRef && this.overlayRef.hasAttached()) {\n            this.overlayRef.detach();\n            this.closingActionsSubscription.unsubscribe();\n        }\n\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this.componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this.changeDetectorRef.detectChanges();\n        }\n    }\n\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n    updatePosition(): void {\n        if (this.overlayAttached) {\n            this.overlayRef!.updatePosition();\n        }\n    }\n\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    get panelClosingActions(): Observable<McOptionSelectionChange | null> {\n        return merge(\n            this.optionSelections,\n            this.autocomplete.keyManager.tabOut.pipe(filter(() => this.overlayAttached)),\n            this.closeKeyEventStream,\n            this.getOutsideClickStream(),\n            this.overlayRef ?\n                this.overlayRef.detachments().pipe(filter(() => this.overlayAttached)) :\n                observableOf()\n        ).pipe(\n            // Normalize the output so we return a consistent type.\n            map((event) => event instanceof McOptionSelectionChange ? event : null)\n        );\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any): void {\n        Promise.resolve(null).then(() => this.setTriggerValue(value));\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => {}): void {\n        this.onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => {}) {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.elementRef.nativeElement.disabled = isDisabled;\n    }\n\n    handleKeydown(event: KeyboardEvent): void {\n        // tslint:disable-next-line deprecation\n        const keyCode = event.keyCode;\n\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE) {\n            event.preventDefault();\n        }\n\n        if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n            this.activeOption.selectViaInteraction();\n            this.resetActiveItem();\n            event.preventDefault();\n        } else if (this.autocomplete) {\n            const prevActiveItem = this.autocomplete.keyManager.activeItem;\n\n            if (this.panelOpen || keyCode === TAB) {\n                this.autocomplete.onKeydown(event);\n            } else if (keyCode === DOWN_ARROW && this.canOpen()) {\n                this.openPanel();\n            }\n\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n            if (isArrowKey || this.autocomplete.keyManager.activeItem !== prevActiveItem) {\n                this.scrollToOption();\n            }\n        }\n    }\n\n    handleInput(event: KeyboardEvent): void {\n        const target = event.target as HTMLInputElement;\n        let value: number | string | null = target.value;\n\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value === '' ? null : parseFloat(value);\n        }\n\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this.previousValue !== value) {\n            this.previousValue = value;\n            this.onChange(value);\n\n            if (this.canOpen() && this.document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n\n    handleFocus(): void {\n        if (!this.canOpenOnNextFocus) {\n            this.canOpenOnNextFocus = true;\n        } else if (this.canOpen()) {\n            this.previousValue = this.elementRef.nativeElement.value;\n            this.attachOverlay();\n        }\n    }\n\n    handleClick($event: MouseEvent) {\n        if (this.canOpen() && this.document.activeElement === $event.target) {\n            this.openPanel();\n        }\n    }\n\n    /** Stream of clicks outside of the autocomplete panel. */\n    private getOutsideClickStream(): Observable<any> {\n        return merge(\n            // tslint:disable-next-line: no-unnecessary-type-assertion\n            fromEvent(this.document, 'click') as Observable<MouseEvent>,\n            // tslint:disable-next-line: no-unnecessary-type-assertion\n            fromEvent(this.document, 'touchend') as Observable<TouchEvent>\n        )\n            .pipe(filter((event) => {\n                const clickTarget = event.target as HTMLElement;\n                const formField = this.formField ?\n                    this.formField._elementRef.nativeElement : null;\n\n                return this.overlayAttached &&\n                    clickTarget !== this.elementRef.nativeElement &&\n                    (!formField || !formField.contains(clickTarget)) &&\n                    (!!this.overlayRef && !this.overlayRef.overlayElement.contains(clickTarget));\n            }));\n    }\n\n    /**\n     * Event handler for when the window is blurred. Needs to be an\n     * arrow function in order to preserve the context.\n     */\n    private windowBlurHandler = () => {\n        // If the user blurred the window while the autocomplete is focused, it means that it'll be\n        // refocused when they come back. In this case we want to skip the first focus event, if the\n        // pane was closed, in order to avoid reopening it unintentionally.\n        this.canOpenOnNextFocus = this.document.activeElement !== this.elementRef.nativeElement || this.panelOpen;\n    }\n\n    /**\n     * Given that we are not actually focusing active options, we must manually adjust scroll\n     * to reveal options below the fold. First, we find the offset of the option from the top\n     * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n     * the panel height + the option height, so the active option will be just visible at the\n     * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n     * will become the offset. If that offset is visible within the panel already, the scrollTop is\n     * not adjusted.\n     */\n    private scrollToOption(): void {\n        const index = this.autocomplete.keyManager.activeItemIndex || 0;\n        const labelCount = countGroupLabelsBeforeOption(index,\n            this.autocomplete.options, this.autocomplete.optionGroups);\n\n        const newScrollPosition = getOptionScrollPosition(\n            index + labelCount,\n            AUTOCOMPLETE_OPTION_HEIGHT,\n            this.autocomplete.getScrollTop(),\n            AUTOCOMPLETE_PANEL_HEIGHT\n        );\n\n        this.autocomplete.setScrollTop(newScrollPosition);\n    }\n\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    private subscribeToClosingActions(): Subscription {\n        const firstStable = this.zone.onStable.asObservable()\n            .pipe(take(1));\n        const optionChanges = this.autocomplete.options.changes\n            .pipe(\n                tap(() => this.positionStrategy.reapplyLastPosition()),\n                // Defer emitting to the stream until the next tick, because changing\n                // bindings in here will cause \"changed after checked\" errors.\n                delay(0)\n            );\n\n        // When the zone is stable initially, and when the option list changes...\n        return merge(firstStable, optionChanges)\n            .pipe(\n                // create a new stream of panelClosingActions, replacing any previous streams\n                // that were created, and flatten it so our stream only emits closing events...\n                switchMap(() => {\n                    const wasOpen = this.panelOpen;\n                    this.resetActiveItem();\n                    this.autocomplete.setVisibility();\n\n                    if (this.panelOpen) {\n                        this.overlayRef!.updatePosition();\n\n                        // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                        // event, because we may not have emitted it when the panel was attached. This\n                        // can happen if the users opens the panel and there are no options, but the\n                        // options come in slightly later or as a result of the value changing.\n                        if (wasOpen !== this.panelOpen) {\n                            this.autocomplete.opened.emit();\n                        }\n                    }\n\n                    return this.panelClosingActions;\n                }),\n                // when the first closing event occurs...\n                take(1)\n            )\n            // set the value, close the panel, and complete.\n            .subscribe((event) => this.setValueAndClose(event));\n    }\n\n    /** Destroys the autocomplete suggestion panel. */\n    private destroyPanel(): void {\n        if (this.overlayRef) {\n            this.closePanel();\n            this.overlayRef.dispose();\n            this.overlayRef = null;\n        }\n    }\n\n    private setTriggerValue(value: any): void {\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n            this.autocomplete.displayWith(value) :\n            value;\n\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        const inputValue = toDisplay != null ? toDisplay : '';\n\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this.formField) {\n            this.formField._control.value = inputValue;\n        } else {\n            this.elementRef.nativeElement.value = inputValue;\n        }\n\n        this.previousValue = inputValue;\n    }\n\n    /** This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    private setValueAndClose(event: McOptionSelectionChange | null): void {\n        if (event && event.source) {\n            this.clearPreviousSelectedOption(event.source);\n            this.setTriggerValue(event.source.value);\n            this.onChange(event.source.value);\n            this.elementRef.nativeElement.focus();\n\n            this.autocomplete.emitSelectEvent(event.source);\n        }\n\n        this.closePanel();\n    }\n\n    /** Clear any previous selected option and emit a selection change event for this option */\n    private clearPreviousSelectedOption(skip: McOption) {\n        this.autocomplete.options.forEach((option) => {\n            if (option !== skip && option.selected) {\n                option.deselect();\n            }\n        });\n    }\n\n    private attachOverlay(): void {\n        if (!this.autocomplete) {\n            throw getMcAutocompleteMissingPanelError();\n        }\n\n        let overlayRef = this.overlayRef;\n\n        if (!overlayRef) {\n            this.portal = new TemplatePortal(this.autocomplete.template, this.viewContainerRef);\n            overlayRef = this.overlay.create(this.getOverlayConfig());\n            this.overlayRef = overlayRef;\n\n            // Use the `keydownEvents` in order to take advantage of\n            // the overlay event targeting provided by the CDK overlay.\n            overlayRef.keydownEvents().subscribe((event) => {\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                // tslint:disable-next-line deprecation\n                if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n                    this.resetActiveItem();\n                    this.closeKeyEventStream.next();\n                }\n            });\n\n            if (this.viewportRuler) {\n                this.viewportSubscription = this.viewportRuler.change().subscribe(() => {\n                    if (this.panelOpen && overlayRef) {\n                        overlayRef.updateSize({ width: this.getPanelWidth() });\n                    }\n                });\n            }\n        } else {\n            const position = overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n\n            // Update the trigger, panel width and direction, in case anything has changed.\n            position.setOrigin(this.getConnectedElement());\n            overlayRef.updateSize({ width: this.getPanelWidth() });\n        }\n\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this.portal);\n            this.closingActionsSubscription = this.subscribeToClosingActions();\n        }\n\n        const wasOpen = this.panelOpen;\n\n        this.autocomplete.setVisibility();\n        this.autocomplete.isOpen = this.overlayAttached = true;\n\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n\n    private getOverlayConfig(): OverlayConfig {\n        return new OverlayConfig({\n            positionStrategy: this.getOverlayPosition(),\n            scrollStrategy: this.scrollStrategy(),\n            width: this.getPanelWidth(),\n            direction: this.dir\n        });\n    }\n\n    private getOverlayPosition(): PositionStrategy {\n        this.positionStrategy = this.overlay.position()\n            .flexibleConnectedTo(this.getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false)\n            .withPositions([\n                {\n                    originX: 'start',\n                    originY: 'bottom',\n                    overlayX: 'start',\n                    overlayY: 'top'\n                },\n                {\n                    originX: 'start',\n                    originY: 'top',\n                    overlayX: 'start',\n                    overlayY: 'bottom',\n\n                    // The overlay edge connected to the trigger should have squared corners, while\n                    // the opposite end has rounded corners. We apply a CSS class to swap the\n                    // border-radius based on the overlay position.\n                    panelClass: 'mc-autocomplete-panel-above'\n                }\n            ] as ConnectedPosition[]);\n\n        return this.positionStrategy;\n    }\n\n    private getConnectedElement(): ElementRef {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n\n        return this.formField ? this.formField.getConnectedOverlayOrigin() : this.elementRef;\n    }\n\n    private getPanelWidth(): number | string {\n        return this.autocomplete.panelWidth || this.getHostWidth() - AUTOCOMPLETE_BORDER_WIDTH;\n    }\n\n    private getHostWidth(): number {\n        return this.getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     */\n    private resetActiveItem(): void {\n        this.autocomplete.keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n    }\n\n    private canOpen(): boolean {\n        const element = this.elementRef.nativeElement;\n\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n}\n","import { Directive, ElementRef } from '@angular/core';\n\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n    selector: '[mcAutocompleteOrigin]',\n    exportAs: 'mcAutocompleteOrigin'\n})\nexport class McAutocompleteOrigin {\n    constructor(public elementRef: ElementRef<HTMLElement>) {}\n}\n","import { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { McOptionModule, McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McAutocompleteOrigin } from './autocomplete-origin.directive';\nimport {\n    McAutocompleteTrigger,\n    MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './autocomplete-trigger.directive';\nimport { McAutocomplete } from './autocomplete.component';\n\n\n@NgModule({\n    imports: [McOptionModule, OverlayModule, McCommonModule, CommonModule],\n    exports: [\n        McAutocomplete,\n        McOptionModule,\n        McAutocompleteTrigger,\n        McAutocompleteOrigin,\n        McCommonModule\n    ],\n    declarations: [McAutocomplete, McAutocompleteTrigger, McAutocompleteOrigin],\n    providers: [MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class McAutocompleteModule {}\n"],"names":["MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","autoActiveFirstOption","MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","getMcAutocompleteMissingPanelError","Error","uniqueAutocompleteIdCounter","McAutocompleteSelectedEvent","source","option","this","MC_AUTOCOMPLETE_DEFAULT_OPTIONS","InjectionToken","providedIn","factory","McAutocomplete","changeDetectorRef","elementRef","defaults","id","showPanel","displayWith","optionSelected","EventEmitter","opened","closed","_classList","_isOpen","_autoActiveFirstOption","Object","defineProperty","prototype","value","_this","length","split","forEach","className","trim","nativeElement","coerceBooleanProperty","ngAfterContentInit","keyManager","ActiveDescendantKeyManager","options","setVisibility","setScrollTop","scrollTop","panel","getScrollTop","markForCheck","emitSelectEvent","event","emit","onKeydown","type","Component","args","selector","exportAs","template","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","host","class","providers","provide","MC_OPTION_PARENT_COMPONENT","useExisting","ChangeDetectorRef","ElementRef","undefined","decorators","Inject","ViewChild","TemplateRef","static","ContentChildren","McOption","descendants","optionGroups","McOptgroup","Input","panelWidth","Output","classList","McAutocompleteOrigin","Directive","MC_AUTOCOMPLETE_SCROLL_STRATEGY","MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","Overlay","useFactory","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","McAutocompleteTrigger","multi","viewContainerRef","zone","scrollStrategy","dir","formField","document","viewportRuler","optionSelections","defer","autocomplete","merge","apply","map","onSelectionChange","onStable","asObservable","pipe","take","switchMap","autocompleteAttribute","_autocompleteDisabled","overlayAttached","componentDestroyed","viewportSubscription","Subscription","EMPTY","canOpenOnNextFocus","closeKeyEventStream","Subject","onChange","onTouched","windowBlurHandler","activeElement","panelOpen","window","runOutsideAngular","addEventListener","activeItem","ngOnDestroy","removeEventListener","unsubscribe","destroyPanel","complete","openPanel","attachOverlay","closePanel","isOpen","overlayRef","hasAttached","detach","closingActionsSubscription","detectChanges","updatePosition","tabOut","filter","getOutsideClickStream","detachments","observableOf","McOptionSelectionChange","writeValue","Promise","resolve","then","setTriggerValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","handleKeydown","keyCode","ESCAPE","preventDefault","activeOption","ENTER","selectViaInteraction","resetActiveItem","prevActiveItem","TAB","DOWN_ARROW","canOpen","isArrowKey","UP_ARROW","scrollToOption","handleInput","target","parseFloat","previousValue","handleFocus","handleClick","$event","fromEvent","clickTarget","_elementRef","contains","overlayElement","index","activeItemIndex","labelCount","countGroupLabelsBeforeOption","newScrollPosition","getOptionScrollPosition","subscribeToClosingActions","firstStable","optionChanges","changes","tap","positionStrategy","reapplyLastPosition","delay","wasOpen","panelClosingActions","subscribe","setValueAndClose","dispose","toDisplay","inputValue","_control","clearPreviousSelectedOption","focus","skip","selected","deselect","getConfig","setOrigin","getConnectedElement","updateSize","width","getPanelWidth","portal","TemplatePortal","create","getOverlayConfig","keydownEvents","altKey","next","change","attach","OverlayConfig","getOverlayPosition","direction","position","flexibleConnectedTo","withFlexibleDimensions","withPush","withPositions","originX","originY","overlayX","overlayY","panelClass","connectedTo","getConnectedOverlayOrigin","getHostWidth","getBoundingClientRect","setActiveItem","element","readOnly","[attr.autocomplete]","(focusin)","(blur)","(input)","(keydown)","(click)","ViewContainerRef","NgZone","Directionality","Optional","McFormField","Host","DOCUMENT","ViewportRuler","autocompleteDisabled","McAutocompleteModule","NgModule","imports","McOptionModule","OverlayModule","McCommonModule","CommonModule","exports","declarations"],"mappings":";;;;;;stCA+CA,SAAgBA,KACZ,OAASC,uBAAuB,GCcpC,QAAgBC,GAAwCC,GACpD,MAAA,YAAa,MAAAA,GAAQC,iBAAiBC,cAuB1C,QAAgBC,KACZ,MAAOC,OAAM,2MD7DjB,GAAIC,GAA8B,EAElCC,EAAA,WACI,QAAJA,GAAuBC,EAA+BC,GAA/BC,KAAvBF,OAAuBA,EAA+BE,KAAtDD,OAAsDA,EACtD,MAAAF,MAUaI,EACT,GAAIC,GAAAA,eAA6C,mCAC7CC,WAAY,OACZC,QAAShB,IAQjBiB,EAAA,WA8FI,QAAJA,GACgBC,EACAC,EACiCC,GAFjCR,KAAhBM,kBAAgBA,EACAN,KAAhBO,WAAgBA,EAlFZP,KAAJS,GAAiB,mBAAmBb,IAMhCI,KAAJU,WAAyB,EAWZV,KAAbW,YAA4D,KASrCX,KAAvBY,eACQ,GAAIC,GAAAA,aAGWb,KAAvBc,OAAoD,GAAID,GAAAA,aAGjCb,KAAvBe,OAAoD,GAAIF,GAAAA,aAoB5Cb,KAAZgB,cAyBYhB,KAAZiB,SAA+B,EAOvBjB,KAAKkB,yBAA2BV,EAASnB,sBAmCjD,MAjFI8B,QAAJC,eAAQf,EAARgB,UAAA,iBAAI,WACI,MAAOrB,MAAKgB,gBAGhB,SACcM,GADd,GAAJC,GAAAvB,IAEYsB,IAASA,EAAME,SACfF,EAAMG,MAAM,KACPC,QAAO,SAAEC,GAAc,MAAAJ,GAAKP,WAAWW,EAAUC,SAAU,IAEhE5B,KAAKO,WAAWsB,cAAcF,UAAY,qCAUlDR,OAAJC,eACQf,EADRgB,UAAA,6BAAI,WAEI,MAAOrB,MAAKkB,4BAGhB,SAA0BI,GACtBtB,KAAKkB,uBAAyBY,EAAAA,sBAAsBR,oCAKxDH,OAAJC,eAAQf,EAARgB,UAAA,cAAI,WACI,MAAOrB,MAAKiB,SAAWjB,KAAKU,eAGhC,SAAWY,GACPtB,KAAKiB,QAAUK,mCAanBjB,EAAJgB,UAAAU,mBAAI,WACI/B,KAAKgC,WAAa,GAAIC,GAAAA,2BAAqCjC,KAAKkC,SAChElC,KAAKmC,iBAGT9B,EAAJgB,UAAAe,aAAI,SAAaC,GACLrC,KAAKsC,QACLtC,KAAKsC,MAAMT,cAAcQ,UAAYA,IAI7ChC,EAAJgB,UAAAkB,aAAI,WACI,MAAOvC,MAAKsC,MAAQtC,KAAKsC,MAAMT,cAAcQ,UAAY,GAG7DhC,EAAJgB,UAAAc,cAAI,WACInC,KAAKU,YAAcV,KAAKkC,QAAQV,OAChCxB,KAAKgB,WAAW,2BAA6BhB,KAAKU,UAClDV,KAAKgB,WAAW,2BAA6BhB,KAAKU,UAElDV,KAAKM,kBAAkBkC,gBAG3BnC,EAAJgB,UAAAoB,gBAAI,SAAgB1C,GACpB,GAAc2C,GAAQ,GAAI7C,GAA4BG,KAAMD,EAEpDC,MAAKY,eAAe+B,KAAKD,IAG7BrC,EAAJgB,UAAAuB,UAAI,SAAUF,GACN1C,KAAKgC,WAAWY,UAAUF,mBApIlCG,KAACC,EAAAA,UAADC,OACIC,SAAU,kBACVC,SAAU,iBACVC,SAAJ,sJACIC,QAAS,yuBACTC,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,OACzCC,MAAQC,MAAO,mBACfC,YACMC,QAASC,EAAAA,2BAA4BC,YAAa1D,4CAxD5DwC,KAAImB,EAAAA,oBAGJnB,KAAIoB,EAAAA,aA6IJpB,SAAAqB,GAAAC,aAAAtB,KAASuB,EAAAA,OAATrB,MAAgB9C,0BA3EhBiD,WAAAL,KAAKwB,EAAAA,UAALtB,MAAeuB,EAAAA,aAAcC,QAAQ,MAErCjC,QAAAO,KAAKwB,EAAAA,UAALtB,MAAe,SAAUwB,QAAQ,MAEjCrC,UAAAW,KAAK2B,EAAAA,gBAALzB,MAAqB0B,EAAAA,UAAYC,aAAa,MAE9CC,eAAA9B,KAAK2B,EAAAA,gBAALzB,MAAqB6B,EAAAA,cAGrBjE,cAAAkC,KAAKgC,EAAAA,QAMLC,aAAAjC,KAAKgC,EAAAA,QAGLjE,iBAAAiC,KAAKkC,EAAAA,SAILjE,SAAA+B,KAAKkC,EAAAA,SAGLhE,SAAA8B,KAAKkC,EAAAA,SAULC,YAAAnC,KAAKgC,EAAAA,MAAL9B,MAAW,WAgBX1D,wBAAAwD,KAAKgC,EAAAA,SA6DLxE,KElLA4E,EAAA,WAKI,QAAJA,GAAuB1E,GAAAP,KAAvBO,WAAuBA,EACvB,sBANAsC,KAACqC,EAAAA,UAADnC,OACIC,SAAU,yBACVC,SAAU,+DATdJ,KAAoBoB,EAAAA,cAapBgB,KD6CaE,EACT,GAAIjF,GAAAA,eAAqC,mCAOhCkF,GACTvB,QAASsB,EACTE,MAAOC,EAAAA,SACPC,WAAYjG,GAOHkG,GACT3B,QAAS4B,EAAAA,kBACT1B,YAAa2B,EAAAA,WAAU,WAAO,MAAAC,KAC9BC,OAAO,GAcXD,EAAA,WAyGI,QAAJA,GACgBpF,EACAsF,EACAvF,EACAf,EACAuG,EACiCC,EACrBC,EACQC,EACUC,EAE9BC,GAXZ,GAAJ5E,GAAAvB,IACgBA,MAAhBO,WAAgBA,EACAP,KAAhB6F,iBAAgBA,EACA7F,KAAhBM,kBAAgBA,EACAN,KAAhBT,QAAgBA,EACAS,KAAhB8F,KAAgBA,EAEY9F,KAA5BgG,IAA4BA,EACQhG,KAApCiG,UAAoCA,EACUjG,KAA9CkG,SAA8CA,EAE9BlG,KAAhBmG,cAAgBA,EAlGHnG,KAAboG,iBAAqEC,EAAAA,MAAK,WAClE,MAAI9E,GAAK+E,cAAgB/E,EAAK+E,aAAapE,QAChCqE,EAAAA,MAAnBC,UAAA,GAA4BjF,EAAK+E,aAAapE,QAAQuE,IAAG,SAAE1G,GAAW,MAAAA,GAAO2G,qBAK9DnF,EAAKuE,KAAKa,SACZC,eACAC,KAAKC,EAAAA,KAAK,GAAIC,EAAAA,UAAS,WAAO,MAAAxF,GAAK6E,sBA6BrBpG,KAA3BgH,sBAA2D,MAe/ChH,KAAZiH,uBAAoC,EAExBjH,KAAZkH,iBAAuC,EAM3BlH,KAAZmH,oBAAiC,EAcrBnH,KAAZoH,qBAAmCC,EAAAA,aAAaC,MAOpCtH,KAAZuH,oBAAiC,EAGZvH,KAArBwH,oBAA2C,GAAIC,GAAAA,QAuC3CzH,KAAJ0H,SAAY,aAIR1H,KAAJ2H,UAAa,aAiLD3H,KAAZ4H,kBAA6B,WAIrBrG,EAAKgG,mBAAqBhG,EAAK2E,SAAS2B,gBAAkBtG,EAAKhB,WAAWsB,eAAiBN,EAAKuG,WAhN1E,mBAAXC,SACPjC,EAAKkC,kBAAiB,WAClBD,OAAOE,iBAAiB,OAAQ1G,EAAKqG,qBAI7C5H,KAAK+F,eAAiBA,EAoc9B,MAliBI5E,QAAJC,eAAQuE,EAARtE,UAAA,oBAAI,WACI,MAAIrB,MAAKsG,cAAgBtG,KAAKsG,aAAatE,WAChChC,KAAKsG,aAAatE,WAAWkG,WAGjC,sCAGX/G,OAAJC,eAAQuE,EAARtE,UAAA,iBAAI,WACI,MAAOrB,MAAKkH,iBAAmBlH,KAAKsG,aAAa5F,2CAsBrDS,OAAJC,eACQuE,EADRtE,UAAA,4BAAI,WAEI,MAAOrB,MAAKiH,2BAGhB,SAAyB3F,GACrBtB,KAAKiH,sBAAwBnF,EAAAA,sBAAsBR,oCA4DvDqE,EAAJtE,UAAA8G,YAAI,WAE0B,mBAAXJ,SACPA,OAAOK,oBAAoB,OAAQpI,KAAK4H,mBAG5C5H,KAAKoH,qBAAqBiB,cAC1BrI,KAAKmH,oBAAqB,EAC1BnH,KAAKsI,eACLtI,KAAKwH,oBAAoBe,YAY7B5C,EAAJtE,UAAAmH,UAAI,WACIxI,KAAKyI,iBAGT9C,EAAJtE,UAAAqH,WAAI,WACS1I,KAAKkH,kBAENlH,KAAK8H,WACL9H,KAAKsG,aAAavF,OAAO4B,OAG7B3C,KAAKsG,aAAaqC,OAAS3I,KAAKkH,iBAAkB,EAE9ClH,KAAK4I,YAAc5I,KAAK4I,WAAWC,gBACnC7I,KAAK4I,WAAWE,SAChB9I,KAAK+I,2BAA2BV,eAK/BrI,KAAKmH,oBAKNnH,KAAKM,kBAAkB0I,kBAQ/BrD,EAAJtE,UAAA4H,eAAI,WACQjJ,KAAKkH,iBACLlH,KAAe,WAAEiJ,kBAQzB9H,OAAJC,eAAQuE,EAARtE,UAAA,2BAAI,WAAA,GAAJE,GAAAvB,IACQ,OAAOuG,GAAAA,MACHvG,KAAKoG,iBACLpG,KAAKsG,aAAatE,WAAWkH,OAAOrC,KAAKsC,EAAAA,OAAM,WAAO,MAAA5H,GAAK2F,mBAC3DlH,KAAKwH,oBACLxH,KAAKoJ,wBACLpJ,KAAK4I,WACD5I,KAAK4I,WAAWS,cAAcxC,KAAKsC,EAAAA,OAAM,WAAO,MAAA5H,GAAK2F,mBACrDoC,EAAAA,MACNzC,KAEEJ,EAAAA,IAAG,SAAE/D,GAAU,MAAAA,aAAiB6G,GAAAA,wBAA0B7G,EAAQ,yCAK1EiD,EAAJtE,UAAAmI,WAAI,SAAWlI,GAAX,GAAJC,GAAAvB,IACQyJ,SAAQC,QAAQ,MAAMC,KAAI,WAAO,MAAApI,GAAKqI,gBAAgBtI,MAI1DqE,EAAJtE,UAAAwI,iBAAI,SAAiBC,GACb9J,KAAK0H,SAAWoC,GAIpBnE,EAAJtE,UAAA0I,kBAAI,SAAkBD,GACd9J,KAAK2H,UAAYmC,GAIrBnE,EAAJtE,UAAA2I,iBAAI,SAAiBC,GACbjK,KAAKO,WAAWsB,cAAcqI,SAAWD,GAG7CtE,EAAJtE,UAAA8I,cAAI,SAAczH,GAElB,GAAc0H,GAAU1H,EAAM0H,OAUtB,IAJIA,IAAYC,EAAAA,QACZ3H,EAAM4H,iBAGNtK,KAAKuK,cAAgBH,IAAYI,EAAAA,OAASxK,KAAK8H,UAC/C9H,KAAKuK,aAAaE,uBAClBzK,KAAK0K,kBACLhI,EAAM4H,qBACH,IAAItK,KAAKsG,aAAc,CACtC,GAAkBqE,GAAiB3K,KAAKsG,aAAatE,WAAWkG,UAEhDlI,MAAK8H,WAAasC,IAAYQ,EAAAA,IAC9B5K,KAAKsG,aAAa1D,UAAUF,GACrB0H,IAAYS,EAAAA,YAAc7K,KAAK8K,WACtC9K,KAAKwI,WAGrB,IAAkBuC,GAAaX,IAAYY,EAAAA,UAAYZ,IAAYS,EAAAA,YAEnDE,GAAc/K,KAAKsG,aAAatE,WAAWkG,aAAeyC,IAC1D3K,KAAKiL,mBAKjBtF,EAAJtE,UAAA6J,YAAI,SAAYxI,GAChB,GAAcyI,GAASzI,EAAY,OACvBpB,EAAgC6J,EAAO7J,KAGvB,YAAhB6J,EAAOtI,OACPvB,EAAkB,KAAVA,EAAe,KAAO8J,WAAW9J,IAQzCtB,KAAKqL,gBAAkB/J,IACvBtB,KAAKqL,cAAgB/J,EACrBtB,KAAK0H,SAASpG,GAEVtB,KAAK8K,WAAa9K,KAAKkG,SAAS2B,gBAAkBnF,EAAMyI,QACxDnL,KAAKwI,cAKjB7C,EAAJtE,UAAAiK,YAAI,WACStL,KAAKuH,mBAECvH,KAAK8K,YACZ9K,KAAKqL,cAAgBrL,KAAKO,WAAWsB,cAAcP,MACnDtB,KAAKyI,iBAHLzI,KAAKuH,oBAAqB,GAOlC5B,EAAJtE,UAAAkK,YAAI,SAAYC,GACJxL,KAAK8K,WAAa9K,KAAKkG,SAAS2B,gBAAkB2D,EAAOL,QACzDnL,KAAKwI,aAKL7C,EAAZtE,UAAA+H,sBAAI,WAAA,GAAJ7H,GAAAvB,IACQ,OAAOuG,GAAAA,MAEHkF,EAAAA,UAAUzL,KAAKkG,SAAU,SAEzBuF,EAAAA,UAAUzL,KAAKkG,SAAU,aAExBW,KAAKsC,EAAAA,OAAM,SAAEzG,GAC1B,GAAsBgJ,GAAchJ,EAAY,OAC1BuD,EAAY1E,EAAK0E,UACnB1E,EAAK0E,UAAU0F,YAAY9J,cAAgB,IAE/C,OAAON,GAAK2F,iBACRwE,IAAgBnK,EAAKhB,WAAWsB,iBAC9BoE,IAAcA,EAAU2F,SAASF,OAChCnK,EAAKqH,aAAerH,EAAKqH,WAAWiD,eAAeD,SAASF,OAwBvE/F,EAAZtE,UAAA4J,eAAI,WACJ,GAAca,GAAQ9L,KAAKsG,aAAatE,WAAW+J,iBAAmB,EACxDC,EAAaC,EAAAA,6BAA6BH,EAC5C9L,KAAKsG,aAAapE,QAASlC,KAAKsG,aAAa3B,cAE3CuH,EAAoBC,EAAAA,wBACtBL,EAAQE,EApYsB,GAsY9BhM,KAAKsG,aAAa/D,eAnYW,IAuYjCvC,MAAKsG,aAAalE,aAAa8J,IAO3BvG,EAAZtE,UAAA+K,0BAAI,WAAA,GAAJ7K,GAAAvB,KACcqM,EAAcrM,KAAK8F,KAAKa,SAASC,eAClCC,KAAKC,EAAAA,KAAK,IACTwF,EAAgBtM,KAAKsG,aAAapE,QAAQqK,QAC3C1F,KACG2F,EAAAA,IAAG,WAAO,MAAAjL,GAAKkL,iBAAiBC,wBAGhCC,EAAAA,MAAM,GAId,OAAOpG,GAAAA,MAAM8F,EAAaC,GACrBzF,KAGGE,EAAAA,UAAS,WACzB,GAA0B6F,GAAUrL,EAAKuG,SAgBrB,OAfAvG,GAAKmJ,kBACLnJ,EAAK+E,aAAanE,gBAEdZ,EAAKuG,YACLvG,EAAe,WAAE0H,iBAMb2D,IAAYrL,EAAKuG,WACjBvG,EAAK+E,aAAaxF,OAAO6B,QAI1BpB,EAAKsL,sBAGhB/F,EAAAA,KAAK,IAGRgG,UAAS,SAAEpK,GAAU,MAAAnB,GAAKwL,iBAAiBrK,MAI5CiD,EAAZtE,UAAAiH,aAAI,WACQtI,KAAK4I,aACL5I,KAAK0I,aACL1I,KAAK4I,WAAWoE,UAChBhN,KAAK4I,WAAa,OAIlBjD,EAAZtE,UAAAuI,gBAAI,SAAwBtI,GAC5B,GAAc2L,GAAYjN,KAAKsG,cAAgBtG,KAAKsG,aAAa3F,YACrDX,KAAKsG,aAAa3F,YAAYW,GAC9BA,EAIE4L,EAA0B,MAAbD,EAAoBA,EAAY,EAI/CjN,MAAKiG,UACLjG,KAAKiG,UAAUkH,SAAS7L,MAAQ4L,EAEhClN,KAAKO,WAAWsB,cAAcP,MAAQ4L,EAG1ClN,KAAKqL,cAAgB6B,GAOjBvH,EAAZtE,UAAA0L,iBAAI,SAAyBrK,GACjBA,GAASA,EAAM5C,SACfE,KAAKoN,4BAA4B1K,EAAM5C,QACvCE,KAAK4J,gBAAgBlH,EAAM5C,OAAOwB,OAClCtB,KAAK0H,SAAShF,EAAM5C,OAAOwB,OAC3BtB,KAAKO,WAAWsB,cAAcwL,QAE9BrN,KAAKsG,aAAa7D,gBAAgBC,EAAM5C,SAG5CE,KAAK0I,cAID/C,EAAZtE,UAAA+L,4BAAI,SAAoCE,GAChCtN,KAAKsG,aAAapE,QAAQR,QAAO,SAAE3B,GAC3BA,IAAWuN,GAAQvN,EAAOwN,UAC1BxN,EAAOyN,cAKX7H,EAAZtE,UAAAoH,cAAI,WAAA,GAAJlH,GAAAvB,IACQ,KAAKA,KAAKsG,aACN,KAAM5G,IAGlB,IAAYkJ,GAAa5I,KAAK4I,UAEtB,IAAKA,EAwBE,CACcA,EAAW6E,YAA4B,iBAG/CC,UAAU1N,KAAK2N,uBACxB/E,EAAWgF,YAAaC,MAAO7N,KAAK8N,sBA5BpC9N,MAAK+N,OAAS,GAAIC,GAAAA,eAAehO,KAAKsG,aAAapD,SAAUlD,KAAK6F,kBAClE+C,EAAa5I,KAAKT,QAAQ0O,OAAOjO,KAAKkO,oBACtClO,KAAK4I,WAAaA,EAIlBA,EAAWuF,gBAAgBrB,UAAS,SAAEpK,IAI9BA,EAAM0H,UAAYC,EAAAA,QAAW3H,EAAM0H,UAAYY,EAAAA,UAAYtI,EAAM0L,UACjE7M,EAAKmJ,kBACLnJ,EAAKiG,oBAAoB6G,UAI7BrO,KAAKmG,gBACLnG,KAAKoH,qBAAuBpH,KAAKmG,cAAcmI,SAASxB,UAAS,WACzDvL,EAAKuG,WAAac,GAClBA,EAAWgF,YAAaC,MAAOtM,EAAKuM,oBAYhDlF,KAAeA,EAAWC,gBAC1BD,EAAW2F,OAAOvO,KAAK+N,QACvB/N,KAAK+I,2BAA6B/I,KAAKoM,4BAGnD,IAAcQ,GAAU5M,KAAK8H,SAErB9H,MAAKsG,aAAanE,gBAClBnC,KAAKsG,aAAaqC,OAAS3I,KAAKkH,iBAAkB,EAI9ClH,KAAK8H,WAAa8E,IAAY5M,KAAK8H,WACnC9H,KAAKsG,aAAaxF,OAAO6B,QAIzBgD,EAAZtE,UAAA6M,iBAAI,WACI,MAAO,IAAIM,GAAAA,eACP/B,iBAAkBzM,KAAKyO,qBACvB1I,eAAgB/F,KAAK+F,iBACrB8H,MAAO7N,KAAK8N,gBACZY,UAAW1O,KAAKgG,OAIhBL,EAAZtE,UAAAoN,mBAAI,WAyBI,MAxBAzO,MAAKyM,iBAAmBzM,KAAKT,QAAQoP,WAChCC,oBAAoB5O,KAAK2N,uBACzBkB,wBAAuB,GACvBC,UAAS,GACTC,gBAEOC,QAAS,QACTC,QAAS,SACTC,SAAU,QACVC,SAAU,QAGVH,QAAS,QACTC,QAAS,MACTC,SAAU,QACVC,SAAU,SAKVC,WAAY,iCAIjBpP,KAAKyM,kBAGR9G,EAAZtE,UAAAsM,oBAAI,WACI,MAAI3N,MAAKqP,YACErP,KAAKqP,YAAY9O,WAGrBP,KAAKiG,UAAYjG,KAAKiG,UAAUqJ,4BAA8BtP,KAAKO,YAGtEoF,EAAZtE,UAAAyM,cAAI,WACI,MAAO9N,MAAKsG,aAAaxB,YAAc9E,KAAKuP,eAnlBH,GAslBrC5J,EAAZtE,UAAAkO,aAAI,WACI,MAAOvP,MAAK2N,sBAAsB9L,cAAc2N,wBAAwB3B,OAOpElI,EAAZtE,UAAAqJ,gBAAI,WACI1K,KAAKsG,aAAatE,WAAWyN,cAAczP,KAAKsG,aAAajH,sBAAwB,GAAK,IAGtFsG,EAAZtE,UAAAyJ,QAAI,WACJ,GAAc4E,GAAU1P,KAAKO,WAAWsB,aAEhC,QAAQ6N,EAAQC,WAAaD,EAAQxF,WAAalK,KAAKiH,sCA/jB/DpE,KAACqC,EAAAA,UAADnC,OACIC,SAAU,kDACVU,MACIC,MAAO,0BACPiM,sBAAuB,wBAGvBC,YAAa,gBACbC,SAAU,cACVC,UAAW,sBACXC,YAAa,wBACbC,UAAW,uBAEfhN,SAAU,wBACVW,WAAY4B,2CArGhB3C,KAAIoB,EAAAA,aASJpB,KAAIqN,EAAAA,mBAXJrN,KAAImB,EAAAA,oBAiBJnB,KAAIyC,EAAAA,UATJzC,KAAIsN,EAAAA,SAgMJtN,SAAAqB,GAAAC,aAAAtB,KAASuB,EAAAA,OAATrB,MAAgBoC,OA5MhBtC,KAASuN,EAAAA,eAATjM,aAAAtB,KA6MSwN,EAAAA,aA1KTxN,KAASyN,EAAAA,YAATnM,aAAAtB,KA2KSwN,EAAAA,WA3KTxN,KA2KqB0N,EAAAA,SACrB1N,SAAAqB,GAAAC,aAAAtB,KAASwN,EAAAA,WAATxN,KAAqBuB,EAAAA,OAArBrB,MAA4ByN,EAAAA,cAnL5B3N,KAAS4N,EAAAA,mCA6GTnK,eAAAzD,KAAKgC,EAAAA,MAAL9B,MAAW,oBAMXsM,cAAAxM,KAAKgC,EAAAA,MAAL9B,MAAW,+BAMXiE,wBAAAnE,KAAKgC,EAAAA,MAAL9B,MAAW,kBAMX2N,uBAAA7N,KAAKgC,EAAAA,MAAL9B,MAAW,6BAmgBX4C,KEjpBAgL,EAAA,WAAA,QAAAA,MAYmC,sBAZnC9N,KAAC+N,EAAAA,SAAD7N,OACI8N,SAAUC,EAAAA,eAAgBC,EAAAA,cAAeC,EAAAA,eAAgBC,EAAAA,cACzDC,SACI7Q,EACAyQ,EAAAA,eACAnL,EACAV,EACA+L,EAAAA,gBAEJG,cAAe9Q,EAAgBsF,EAAuBV,GACtDrB,WAAYwB,OAEhBuL,iRFyB0C,+BAGD,gCAEQ"}