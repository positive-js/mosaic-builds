{"version":3,"file":"mosaic-tree-select.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../src/lib/tree-select/tree-select.component.ts","../../src/lib/tree-select/tree-select.module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/* tslint:disable:no-empty */\n\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    Directive,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Input,\n    isDevMode,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    Renderer2,\n    Self,\n    SimpleChanges,\n    ViewChild,\n    ViewChildren,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    RIGHT_ARROW,\n    SPACE,\n    UP_ARROW,\n    A\n} from '@ptsecurity/cdk/keycodes';\nimport {\n    CdkConnectedOverlay,\n    ViewportRuler\n} from '@ptsecurity/cdk/overlay';\nimport { CdkTree } from '@ptsecurity/cdk/tree';\nimport {\n    getOptionScrollPosition,\n    CanDisable,\n    CanUpdateErrorState,\n    ErrorStateMatcher,\n    HasTabIndex,\n    CanDisableCtor,\n    HasTabIndexCtor,\n    CanUpdateErrorStateCtor,\n    mixinTabIndex,\n    mixinDisabled,\n    mixinErrorState,\n    mcSelectAnimations,\n\n    SELECT_PANEL_MAX_HEIGHT,\n    SELECT_PANEL_PADDING_X,\n    SELECT_PANEL_VIEWPORT_PADDING,\n\n    getMcSelectDynamicMultipleError,\n    getMcSelectNonFunctionValueError,\n    getMcSelectNonArrayValueError,\n    MC_SELECT_SCROLL_STRATEGY\n} from '@ptsecurity/mosaic/core';\nimport { McFormField, McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { McTag } from '@ptsecurity/mosaic/tag';\nimport { McTreeSelection, McTreeOption } from '@ptsecurity/mosaic/tree';\nimport { defer, merge, Observable, Subject } from 'rxjs';\nimport {\n    filter,\n    map,\n    startWith,\n    switchMap,\n    take,\n    takeUntil,\n    distinctUntilChanged\n} from 'rxjs/operators';\n\n\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the select value has changed. */\nexport class McTreeSelectChange {\n    constructor(public source: McTreeOption, public value: any, public isUserInput = false) {}\n}\n\n\n@Directive({ selector: 'mc-tree-select-trigger' })\nexport class McTreeSelectTrigger {}\n\n\nclass McTreeSelectBase {\n    constructor(\n        public elementRef: ElementRef,\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {}\n}\n\n// tslint:disable-next-line:naming-convention\nconst McTreeSelectMixinBase: CanDisableCtor & HasTabIndexCtor & CanUpdateErrorStateCtor &\n    typeof McTreeSelectBase = mixinTabIndex(mixinDisabled(mixinErrorState(McTreeSelectBase)));\n\n\n@Component({\n    selector: 'mc-tree-select',\n    exportAs: 'mcTreeSelect',\n    templateUrl: 'tree-select.html',\n    styleUrls: ['./tree-select.css'],\n    inputs: ['disabled', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'tabIndex',\n\n        class: 'mc-tree-select',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-select-invalid]': 'errorState',\n        '[class.mc-select-required]': 'required',\n\n        '(keydown)': 'handleKeydown($event)',\n        '(focus)': 'onFocus()',\n        '(blur)': 'onBlur()',\n        '(window:resize)': 'calculateHiddenItems()'\n    },\n    animations: [\n        mcSelectAnimations.transformPanel,\n        mcSelectAnimations.fadeInContent\n    ],\n    providers: [\n        { provide: McFormFieldControl, useExisting: McTreeSelect },\n        { provide: CdkTree, useExisting: McTreeSelect }\n    ]\n})\nexport class McTreeSelect extends McTreeSelectMixinBase implements\n    AfterContentInit, AfterViewInit, OnChanges, OnDestroy, OnInit, DoCheck, ControlValueAccessor,\n    CanDisable, HasTabIndex, McFormFieldControl<any>, CanUpdateErrorState {\n\n    /** A name for this control that can be used by `mc-form-field`. */\n    controlType = 'mc-select';\n\n    hiddenItems: number = 0;\n    oneMoreText: string = '...ещё';\n\n    /** The last measured value for the trigger's client bounding rect. */\n    triggerRect: ClientRect;\n\n    /** The cached font-size of the trigger element. */\n    triggerFontSize = 0;\n\n    /** Deals with the selection logic. */\n    selectionModel: SelectionModel<McTreeOption>;\n\n    /** The IDs of child options to be passed to the aria-owns attribute. */\n    optionIds: string = '';\n\n    /** The value of the select panel's transform-origin property. */\n    transformOrigin: string = 'top';\n\n    /** Whether the panel's animation is done. */\n    panelDoneAnimating: boolean = false;\n\n    /** Emits when the panel element is finished transforming in. */\n    panelDoneAnimatingStream = new Subject<string>();\n\n    /** Strategy that will be used to handle scrolling while the select panel is open. */\n    scrollStrategy = this.scrollStrategyFactory();\n\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n    offsetY = 0;\n\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n    positions = [\n        {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top'\n        },\n        {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom'\n        }\n    ];\n\n    @ViewChild('trigger') trigger: ElementRef;\n\n    @ViewChild('panel') panel: ElementRef;\n\n    @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n    @ViewChildren(McTag) tags: QueryList<McTag>;\n\n    /** User-supplied override of the trigger element. */\n    @ContentChild(McTreeSelectTrigger) customTrigger: McTreeSelectTrigger;\n\n    @ContentChild(McTreeSelection) tree: McTreeSelection;\n\n    /** Event emitted when the select panel has been toggled. */\n    @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted when the select has been opened. */\n    @Output('opened') readonly openedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => o), map(() => {}));\n\n    /** Event emitted when the select has been closed. */\n    @Output('closed') readonly closedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => !o), map(() => {}));\n\n    /** Event emitted when the selected value has been changed by the user. */\n    @Output() readonly selectionChange = new EventEmitter<McTreeSelectChange>();\n\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n    @Input() panelClass: string | string[] | Set<string> | { [key: string]: any };\n\n    /** Object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Function used to sort the values in a select in multiple mode.\n     * Follows the same logic as `Array.prototype.sort`.\n     */\n    @Input() sortComparator: (\n        a: McTreeOption, b: McTreeOption, options: McTreeOption[]\n    ) => number;\n\n    /** Combined stream of all of the child options' change events. */\n    readonly optionSelectionChanges: Observable<McTreeSelectChange> = defer(() => {\n        if (this.options) {\n            return merge(...this.options.map((option) => option.onSelectionChange));\n        }\n\n        return this.ngZone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n    }) as Observable<McTreeSelectChange>;\n\n    options: QueryList<McTreeOption>;\n\n    private originalOnKeyDown: (event: KeyboardEvent) => void;\n\n    @Input()\n    get placeholder(): string {\n        return this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n\n        this.stateChanges.next();\n    }\n\n    private _placeholder: string;\n\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n\n        this.stateChanges.next();\n    }\n\n    private _required: boolean = false;\n\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        if (this.selectionModel) {\n            throw getMcSelectDynamicMultipleError();\n        }\n\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    private _multiple: boolean = false;\n\n    @Input()\n    get autoSelect(): boolean {\n        if (this.multiple) { return false; }\n\n        return this._autoSelect;\n    }\n\n    set autoSelect(value: boolean) {\n        this._autoSelect = coerceBooleanProperty(value);\n    }\n\n    private _autoSelect: boolean = true;\n\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith() {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        /* tslint:disable-next-line:strict-type-predicates */\n        if (typeof fn !== 'function') {\n            throw getMcSelectNonFunctionValueError();\n        }\n\n        this._compareWith = fn;\n\n        if (this.selectionModel) {\n            // A different comparator means the selection could change.\n            this.initializeSelection();\n        }\n    }\n\n    /** Value of the select control. */\n    @Input()\n    get value(): any {\n        return this._value;\n    }\n\n    set value(newValue: any) {\n        if (newValue !== this._value) {\n            this.writeValue(newValue);\n            this._value = newValue;\n        }\n    }\n\n    private _value: any;\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n        this.stateChanges.next();\n    }\n\n    private _id: string;\n\n    /** Whether the select is focused. */\n    get focused(): boolean {\n        return this._focused || this._panelOpen;\n    }\n\n    /**\n     * @deprecated Setter to be removed as this property is intended to be readonly.\n     * @breaking-change 8.0.0\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n\n    private _focused = false;\n\n    get panelOpen(): boolean {\n        return this._panelOpen;\n    }\n\n    private _panelOpen = false;\n\n    /** The scroll position of the overlay panel, calculated to center the selected option. */\n    private scrollTop = 0;\n\n    /** Unique id for this input. */\n    private readonly uid = `mc-select-${nextUniqueId++}`;\n\n    /** Emits whenever the component is destroyed. */\n    private readonly destroy = new Subject<void>();\n\n    constructor(\n        private readonly viewportRuler: ViewportRuler,\n        readonly changeDetectorRef: ChangeDetectorRef,\n        private readonly ngZone: NgZone,\n        private readonly renderer: Renderer2,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        public elementRef: ElementRef,\n        @Optional() private readonly dir: Directionality,\n        @Optional() parentForm: NgForm,\n        @Optional() parentFormGroup: FormGroupDirective,\n        @Optional() private readonly parentFormField: McFormField,\n        @Self() @Optional() public ngControl: NgControl,\n        @Attribute('tabindex') tabIndex: string,\n        @Inject(MC_SELECT_SCROLL_STRATEGY) private readonly scrollStrategyFactory\n    ) {\n        super(elementRef, defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnInit() {\n        if (this.tree) {\n            this.tree.multiple = this.multiple;\n        }\n\n        this.stateChanges.next();\n\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this.panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this.panelOpen) {\n                    this.scrollTop = 0;\n                    this.openedChange.emit(true);\n                } else {\n                    this.openedChange.emit(false);\n                    this.panelDoneAnimating = false;\n                    this.overlayDir.offsetX = 0;\n                    this.changeDetectorRef.markForCheck();\n                }\n            });\n    }\n\n    ngAfterContentInit() {\n        if (!this.tree) { return; }\n\n        this.initKeyManager();\n\n        this.selectionModel = this.tree.selectionModel = new SelectionModel<McTreeOption>(this.multiple);\n        this.options = this.tree.options;\n        this.tree.autoSelect = this.autoSelect;\n\n        this.selectionModel.changed\n            .pipe(takeUntil(this.destroy))\n            .subscribe((event) => {\n                event.added.forEach((option) => option.select());\n                event.removed.forEach((option) => option.deselect());\n            });\n    }\n\n    ngAfterViewInit() {\n        if (!this.tree) { return; }\n\n        this.tags.changes\n            .subscribe(() => {\n                setTimeout(() => this.calculateHiddenItems(), 0);\n            });\n\n        this.options.changes\n            .pipe(startWith(null), takeUntil(this.destroy))\n            .subscribe(() => {\n                this.updateSelectedOptions();\n\n                this.resetOptions();\n            });\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) { this.updateErrorState(); }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes.disabled) {\n            this.stateChanges.next();\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroy.next();\n\n        this.destroy.complete();\n        this.stateChanges.complete();\n    }\n\n    /** `View -> model callback called when value changes` */\n    onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when select has been touched` */\n    onTouched = () => {};\n\n    toggle() {\n        if (this.panelOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    open() {\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) { return; }\n\n        this.triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this.triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n        this._panelOpen = true;\n        // this.tree.keyManager.withHorizontalOrientation(null);\n        this.calculateOverlayPosition();\n        this.highlightCorrectOption();\n        this.changeDetectorRef.markForCheck();\n\n        // Set the font size on the panel element once it exists.\n        this.ngZone.onStable.asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                if (this.triggerFontSize && this.overlayDir.overlayRef &&\n                    this.overlayDir.overlayRef.overlayElement) {\n                    this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this.triggerFontSize}px`;\n                }\n            });\n    }\n\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n\n            // this.tree.keyManager.setActiveItem(-1);\n\n            // this.tree.keyManager.withHorizontalOrientation(this.isRtl() ? 'rtl' : 'ltr');\n            this.changeDetectorRef.markForCheck();\n            this.onTouched();\n        }\n    }\n\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    // todo нужно доделать!\n    writeValue(value: any) {\n        if (this.options) {\n            this.setSelectionByValue(value);\n        }\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.onChange = fn;\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn: () => {}) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this.changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    get selected(): McTreeOption | McTreeOption[] {\n        return this.multiple ? this.selectionModel.selected : this.selectionModel.selected[0];\n    }\n\n    get triggerValue(): string {\n        if (this.empty) { return ''; }\n\n        return (this.selected as McTreeOption).viewValue;\n    }\n\n    get triggerValues(): McTreeOption[] {\n        if (this.empty) { return []; }\n\n        const selectedOptions = this.selectionModel.selected;\n\n        if (this.isRtl()) { selectedOptions.reverse(); }\n\n        return selectedOptions;\n    }\n\n    get empty(): boolean {\n        return !this.selectionModel || this.selectionModel.isEmpty();\n    }\n\n    isRtl(): boolean {\n        return this.dir ? this.dir.value === 'rtl' : false;\n    }\n\n    handleKeydown(event: KeyboardEvent) {\n        if (!this.disabled) {\n            if (this.panelOpen) {\n                this.handleOpenKeydown(event);\n            } else {\n                this.handleClosedKeydown(event);\n            }\n        }\n    }\n\n    /**\n     * When the panel content is done fading in, the panelDoneAnimating property is\n     * set so the proper class can be added to the panel.\n     */\n    onFadeInDone() {\n        this.panelDoneAnimating = this.panelOpen;\n        this.changeDetectorRef.markForCheck();\n    }\n\n    onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    onBlur() {\n        this._focused = false;\n\n        if (!this.disabled && !this.panelOpen) {\n            this.onTouched();\n            this.changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n\n    /** Callback that is invoked when the overlay panel has been attached. */\n    onAttached() {\n        this.overlayDir.positionChange\n            .pipe(take(1))\n            .subscribe(() => {\n                this.changeDetectorRef.detectChanges();\n                this.calculateOverlayOffsetX();\n                this.panel.nativeElement.scrollTop = this.scrollTop;\n            });\n    }\n\n    /** Returns the theme to be used on the panel. */\n    getPanelTheme(): string {\n        return this.parentFormField ? `mc-${this.parentFormField.color}` : '';\n    }\n\n    /** Focuses the select element. */\n    focus() {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    calculateOverlayScroll(selectedIndex: number, scrollBuffer: number, maxScroll: number): number {\n        const itemHeight = this.getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n\n        /* tslint:disable-next-line:no-magic-numbers */\n        const halfOptionHeight = itemHeight / 2;\n\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n\n    /** Invoked when an option is clicked. */\n    onRemoveSelectedOption(selectedOption: McTreeOption, $event) {\n        $event.stopPropagation();\n\n        this.options.forEach((option) => {\n            if (option.data === selectedOption.data) { option.deselect(); }\n        });\n\n        this.selectionModel.deselect(selectedOption);\n    }\n\n    calculateHiddenItems() {\n        if (this.empty || !this.multiple) { return; }\n\n        let visibleItems: number = 0;\n        const totalItemsWidth = this.getTotalItemsWidthInMatcher();\n        let totalVisibleItemsWidth: number = 0;\n        const itemMargin: number = 4;\n\n        this.tags.forEach((tag) => {\n            if (tag.nativeElement.offsetTop < tag.nativeElement.offsetHeight) {\n                totalVisibleItemsWidth += tag.nativeElement.getBoundingClientRect().width + itemMargin;\n                visibleItems++;\n            }\n        });\n\n        this.hiddenItems = this.selectionModel.selected.length - visibleItems;\n\n        if (this.hiddenItems) {\n            const itemsCounter = this.trigger.nativeElement.querySelector('.mc-tree-select__match-hidden-text');\n            const matcherList = this.trigger.nativeElement.querySelector('.mc-tree-select__match-list');\n\n            const itemsCounterShowed = itemsCounter.offsetTop < itemsCounter.offsetHeight;\n            // const itemsCounterWidth: number = itemsCounter.getBoundingClientRect().width;\n            const itemsCounterWidth: number = 86;\n\n            const matcherListWidth: number = matcherList.getBoundingClientRect().width;\n            const matcherWidth: number = matcherListWidth + itemsCounterWidth;\n\n            if (itemsCounterShowed && (totalItemsWidth < matcherWidth)) { this.hiddenItems = 0; }\n\n            if (\n                totalVisibleItemsWidth === matcherListWidth ||\n                (totalVisibleItemsWidth + itemsCounterWidth) < matcherListWidth\n            ) {\n                this.changeDetectorRef.markForCheck();\n\n                return ;\n            } else if (!itemsCounterShowed && (totalItemsWidth + itemsCounterWidth) > matcherWidth) {\n                this.hiddenItems++;\n            }\n        }\n\n        this.changeDetectorRef.markForCheck();\n    }\n\n    private updateSelectedOptions(): void {\n        this.selectionModel.selected.forEach((selectedOption) => {\n            this.options.forEach((option) => {\n                if (option.data === selectedOption.data) {\n                    this.selectionModel.deselect(selectedOption);\n                    this.selectionModel.select(option);\n\n                    option.select();\n                }\n            });\n        });\n    }\n\n    private getTotalItemsWidthInMatcher(): number {\n        const triggerClone = this.trigger.nativeElement.cloneNode(true);\n        triggerClone.querySelector('.mc-tree-select__match-hidden-text').remove();\n\n        this.renderer.setStyle(triggerClone, 'position', 'absolute');\n        this.renderer.setStyle(triggerClone, 'visibility', 'hidden');\n        this.renderer.setStyle(triggerClone, 'top', '-100%');\n        this.renderer.setStyle(triggerClone, 'left', '0');\n\n        this.renderer.appendChild(this.trigger.nativeElement, triggerClone);\n\n        let totalItemsWidth: number = 0;\n        const itemMargin: number = 4;\n        triggerClone.querySelectorAll('mc-tag').forEach((item) => {\n            totalItemsWidth += item.getBoundingClientRect().width as number + itemMargin;\n        });\n\n        triggerClone.remove();\n\n        return totalItemsWidth;\n    }\n\n    private handleClosedKeydown(event: KeyboardEvent) {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n        // Open the select on ALT + arrow key to match the native <select>\n        if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n            // prevents the page from scrolling down when pressing space\n            event.preventDefault();\n\n            this.open();\n        } else if (!this.multiple && this.tree.keyManager && this.tree.keyManager.onKeydown) {\n            this.tree.keyManager.onKeydown(event);\n        }\n    }\n\n    private handleOpenKeydown(event: KeyboardEvent) {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n\n            this.close();\n        } else if (keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW) {\n            return this.originalOnKeyDown.call(this.tree, event);\n        } else if (keyCode === HOME || keyCode === END) {\n            event.preventDefault();\n\n            if (keyCode === HOME) {\n                this.tree.keyManager.setFirstItemActive();\n            } else {\n                this.tree.keyManager.setLastItemActive();\n            }\n        } else if ((keyCode === ENTER || keyCode === SPACE) && this.tree.keyManager.activeItem) {\n            event.preventDefault();\n\n            this.tree.keyManager.activeItem.selectViaInteraction();\n        } else if (this.multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n\n            const hasDeselectedOptions = this.options.some((option) => !option.selected);\n\n            this.options.forEach((option) => {\n                if (hasDeselectedOptions && !option.disabled) {\n                    option.select();\n                } else {\n                    option.deselect();\n                }\n            });\n        } else {\n            const previouslyFocusedIndex = this.tree.keyManager.activeItemIndex;\n\n            this.tree.keyManager.onKeydown(event);\n\n            if (this.multiple && isArrowKey && event.shiftKey && this.tree.keyManager.activeItem &&\n                this.tree.keyManager.activeItemIndex !== previouslyFocusedIndex) {\n                this.tree.keyManager.activeItem.selectViaInteraction();\n            }\n        }\n    }\n\n    private initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this.setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n        });\n    }\n\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    private setSelectionByValue(value: any | any[]) {\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) { throw getMcSelectNonArrayValueError(); }\n\n            this.selectionModel.clear();\n            value.forEach((currentValue: any) => this.selectValue(currentValue));\n            this.sortValues();\n        } else {\n            this.selectionModel.clear();\n            const correspondingOption = this.selectValue(value);\n\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this.tree.keyManager.setActiveItem(correspondingOption);\n            }\n        }\n\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    private selectValue(value: any): McTreeOption | undefined {\n        const correspondingOption = this.options.find((option: McTreeOption) => {\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            } catch (error) {\n                if (isDevMode()) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n\n                return false;\n            }\n        });\n\n        if (correspondingOption) {\n            this.selectionModel.select(correspondingOption);\n        }\n\n        return correspondingOption;\n    }\n\n    private initKeyManager() {\n        this.originalOnKeyDown = this.tree.onKeyDown;\n\n        this.tree.onKeyDown = () => {};\n\n        this.tree.keyManager.tabOut\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            });\n\n        this.tree.keyManager.change\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this._panelOpen && this.panel) {\n                    this.scrollActiveOptionIntoView();\n                } else if (!this._panelOpen && !this.multiple && this.tree.keyManager.activeItem) {\n                    this.tree.keyManager.activeItem.selectViaInteraction();\n                }\n            });\n    }\n\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    private resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this.destroy);\n\n        this.optionSelectionChanges\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe((event) => {\n                this.onSelect(event.source, event.isUserInput);\n\n                if (event.isUserInput && !this.multiple && this._panelOpen) {\n                    this.close();\n                    this.focus();\n                }\n            });\n\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        // merge(...this.options.map((option) => option.stateChanges))\n        //     .pipe(takeUntil(changedOrDestroyed))\n        //     .subscribe(() => {\n        //         this.changeDetectorRef.markForCheck();\n        //         this.stateChanges.next();\n        //     });\n\n        this.setOptionIds();\n    }\n\n    /** Invoked when an option is clicked. */\n    private onSelect(option: McTreeOption, isUserInput: boolean) {\n        const wasSelected = this.selectionModel.isSelected(option);\n\n        if (option.value == null && !this.multiple) {\n            option.deselect();\n            this.selectionModel.clear();\n            this.propagateChanges(option.value);\n        } else {\n            if (option.selected) {\n                this.selectionModel.select(option);\n            } else {\n                this.selectionModel.deselect(option);\n            }\n\n            if (isUserInput) {\n                this.tree.keyManager.setActiveItem(option);\n            }\n\n            if (this.multiple) {\n                this.sortValues();\n\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mc-option`.\n                    this.focus();\n                }\n            }\n        }\n\n        if (wasSelected !== this.selectionModel.isSelected(option)) {\n            this.propagateChanges();\n        }\n\n        this.stateChanges.next();\n    }\n\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    private sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n\n            this.selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n\n    /** Emits change event to set the model value. */\n    private propagateChanges(fallbackValue?: any) {\n        let valueToEmit: any = null;\n\n        if (this.multiple) {\n            valueToEmit = (this.selected as any).map((option) => option.value);\n        } else {\n            valueToEmit = this.selected ? (this.selected as any).value : fallbackValue;\n        }\n\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this.onChange(valueToEmit);\n        this.selectionChange.emit(new McTreeSelectChange(this as any, valueToEmit));\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Records option IDs to pass to the aria-owns property. */\n    private setOptionIds() {\n        this.optionIds = this.options.map((option) => option.id).join(' ');\n    }\n\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    private highlightCorrectOption() {\n        if (this.tree.keyManager) {\n            if (this.empty) {\n                this.tree.keyManager.setFirstItemActive();\n            } else {\n                this.tree.keyManager.setActiveItem(this.selectionModel.selected[0]);\n            }\n        }\n    }\n\n    /** Scrolls the active option into view. */\n    private scrollActiveOptionIntoView() {\n        const activeOptionIndex = this.tree.keyManager.activeItemIndex || 0;\n\n        this.panel.nativeElement.scrollTop = getOptionScrollPosition(\n            activeOptionIndex,\n            this.getItemHeight(),\n            this.panel.nativeElement.scrollTop,\n            SELECT_PANEL_MAX_HEIGHT\n        );\n    }\n\n    /** Gets the index of the provided option in the option list. */\n    private getOptionIndex(option: McTreeOption): number | undefined {\n        // todo разобраться с этим срачем!\n        return this.options.reduce((result: number, current: McTreeOption, index: number) => {\n            /* tslint:disable-next-line:strict-type-predicates */\n            return result === undefined ? (option === current ? index : undefined) : result;\n        }, undefined);\n    }\n\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    private calculateOverlayPosition() {\n        const itemHeight = this.getItemHeight();\n        const items = this.getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n\n        // If no value is selected we open the popup to the first item.\n        const selectedOptionOffset =\n            this.empty ? 0 : this.getOptionIndex(this.selectionModel.selected[0])!;\n\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        /* tslint:disable-next-line:no-magic-numbers */\n        const scrollBuffer = panelHeight / 2;\n        this.scrollTop = this.calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this.offsetY = this.calculateOverlayOffsetY();\n\n        this.checkOverlayWithinViewport(maxScroll);\n    }\n\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    private calculateOverlayOffsetX() {\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this.viewportRuler.getViewportSize();\n        const isRtl = this.isRtl();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const paddingWidth = SELECT_PANEL_PADDING_X * 2;\n        let offsetX: number = SELECT_PANEL_PADDING_X;\n\n        // Invert the offset in LTR.\n        if (!isRtl) { offsetX *= -1; }\n\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        } else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    private calculateOverlayOffsetY(): number {\n        // const itemHeight = this.getItemHeight();\n        // const optionHeightAdjustment = (itemHeight - this.triggerRect.height) / 2;\n\n        // todo I'm not sure that we will use it\n        return 0;\n        // return Math.round(-optionHeightAdjustment);\n    }\n\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    private checkOverlayWithinViewport(maxScroll: number) {\n        const itemHeight = this.getItemHeight();\n        const viewportSize = this.viewportRuler.getViewportSize();\n\n        const topSpaceAvailable = this.triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable =\n            viewportSize.height - this.triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n        const panelHeightTop = Math.abs(this.offsetY);\n        const totalPanelHeight =\n            Math.min(this.getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this.triggerRect.height;\n\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this.adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        } else if (panelHeightTop > topSpaceAvailable) {\n            this.adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        } else {\n            this.transformOrigin = this.getOriginBasedOnOption();\n        }\n    }\n\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    private adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this.scrollTop -= distanceBelowViewport;\n        this.offsetY -= distanceBelowViewport;\n        this.transformOrigin = this.getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this.scrollTop <= 0) {\n            this.scrollTop = 0;\n            this.offsetY = 0;\n            this.transformOrigin = `50% bottom 0px`;\n        }\n    }\n\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    private adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number, maxScroll: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this.scrollTop += distanceAboveViewport;\n        this.offsetY += distanceAboveViewport;\n        this.transformOrigin = this.getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this.scrollTop >= maxScroll) {\n            this.scrollTop = maxScroll;\n            this.offsetY = 0;\n            this.transformOrigin = `50% top 0px`;\n\n            return;\n        }\n    }\n\n    /** Sets the transform origin point based on the selected option. */\n    private getOriginBasedOnOption(): string {\n        const itemHeight = this.getItemHeight();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const optionHeightAdjustment = (itemHeight - this.triggerRect.height) / 2;\n        /* tslint:disable-next-line:no-magic-numbers */\n        const originY = Math.abs(this.offsetY) - optionHeightAdjustment + itemHeight / 2;\n\n        return `50% ${originY}px 0px`;\n    }\n\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    private getItemCount(): number {\n        return this.options.length;\n    }\n\n    /** Calculates the height of the select's options. */\n    private getItemHeight(): number {\n        // todo доделать\n        /* tslint:disable-next-line:no-magic-numbers */\n        return 32;\n        // return this.triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { CdkTreeModule } from '@ptsecurity/cdk/tree';\nimport { MC_SELECT_SCROLL_STRATEGY_PROVIDER, McPseudoCheckboxModule } from '@ptsecurity/mosaic/core';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\nimport { McTagModule } from '@ptsecurity/mosaic/tag';\nimport { McTreeModule } from '@ptsecurity/mosaic/tree';\n\nimport { McTreeSelect, McTreeSelectTrigger } from './tree-select.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        CdkTreeModule,\n        McTreeModule,\n        McIconModule,\n        McTagModule,\n        McPseudoCheckboxModule\n    ],\n    exports: [McTreeSelect, McTreeSelectTrigger, CommonModule],\n    declarations: [McTreeSelect, McTreeSelectTrigger],\n    providers: [MC_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class McTreeSelectModule {}\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","setPrototypeOf","__proto__","Array","p","hasOwnProperty","nextUniqueId","McTreeSelectChange","source","value","isUserInput","McTreeSelectTrigger","type","Directive","args","selector","McTreeSelectBase","elementRef","defaultErrorStateMatcher","parentForm","parentFormGroup","ngControl","McTreeSelectMixinBase","mixinTabIndex","mixinDisabled","mixinErrorState","McTreeSelect","_super","viewportRuler","changeDetectorRef","ngZone","renderer","dir","parentFormField","tabIndex","scrollStrategyFactory","_this","call","controlType","hiddenItems","oneMoreText","triggerFontSize","optionIds","transformOrigin","panelDoneAnimating","panelDoneAnimatingStream","Subject","scrollStrategy","offsetY","positions","originX","originY","overlayX","overlayY","openedChange","EventEmitter","openedStream","pipe","filter","o","map","closedStream","selectionChange","valueChange","optionSelectionChanges","defer","options","merge","apply","option","onSelectionChange","onStable","asObservable","take","switchMap","_required","_multiple","_autoSelect","_focused","_panelOpen","scrollTop","uid","destroy","onChange","onTouched","_compareWith","o1","o2","valueAccessor","parseInt","id","tslib_1.__extends","defineProperty","_placeholder","stateChanges","next","coerceBooleanProperty","selectionModel","getMcSelectDynamicMultipleError","multiple","fn","getMcSelectNonFunctionValueError","initializeSelection","_value","newValue","writeValue","_id","ngOnInit","tree","distinctUntilChanged","takeUntil","subscribe","panelOpen","emit","overlayDir","offsetX","markForCheck","ngAfterContentInit","initKeyManager","SelectionModel","autoSelect","changed","event","added","forEach","select","removed","deselect","ngAfterViewInit","tags","changes","setTimeout","calculateHiddenItems","startWith","updateSelectedOptions","resetOptions","ngDoCheck","updateErrorState","ngOnChanges","disabled","ngOnDestroy","complete","toggle","close","open","length","triggerRect","trigger","nativeElement","getBoundingClientRect","getComputedStyle","calculateOverlayPosition","highlightCorrectOption","overlayRef","overlayElement","style","fontSize","setSelectionByValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","selected","empty","viewValue","selectedOptions","isRtl","reverse","isEmpty","handleKeydown","handleOpenKeydown","handleClosedKeydown","onFadeInDone","onFocus","onBlur","onAttached","positionChange","detectChanges","calculateOverlayOffsetX","panel","getPanelTheme","color","focus","calculateOverlayScroll","selectedIndex","scrollBuffer","maxScroll","itemHeight","getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","Math","min","max","onContainerClick","onRemoveSelectedOption","selectedOption","$event","stopPropagation","data","visibleItems","totalItemsWidth","getTotalItemsWidthInMatcher","totalVisibleItemsWidth","tag","offsetTop","offsetHeight","width","itemsCounter","querySelector","matcherList","itemsCounterShowed","matcherListWidth","matcherWidth","triggerClone","cloneNode","remove","setStyle","appendChild","querySelectorAll","item","keyCode","isArrowKey","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","ENTER","SPACE","altKey","preventDefault","keyManager","onKeydown","originalOnKeyDown","HOME","END","setFirstItemActive","setLastItemActive","activeItem","A","ctrlKey","hasDeselectedOptions_1","some","previouslyFocusedIndex","activeItemIndex","shiftKey","selectViaInteraction","Promise","resolve","then","isArray","getMcSelectNonArrayValueError","clear","currentValue","selectValue","sortValues","correspondingOption","setActiveItem","find","error","isDevMode","console","warn","onKeyDown","tabOut","change","scrollActiveOptionIntoView","changedOrDestroyed","onSelect","setOptionIds","wasSelected","isSelected","propagateChanges","options_1","toArray","sort","a","sortComparator","indexOf","fallbackValue","valueToEmit","join","activeOptionIndex","getOptionScrollPosition","SELECT_PANEL_MAX_HEIGHT","getOptionIndex","reduce","result","current","index","undefined","items","getItemCount","panelHeight","scrollContainerHeight","selectedOptionOffset","calculateOverlayOffsetY","checkOverlayWithinViewport","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_PANEL_PADDING_X","leftOverflow","left","rightOverflow","right","SELECT_PANEL_VIEWPORT_PADDING","round","updatePosition","topSpaceAvailable","top","bottomSpaceAvailable","height","bottom","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","adjustPanelUp","adjustPanelDown","getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","optionHeightAdjustment","Component","exportAs","template","styles","inputs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","host","[attr.id]","[attr.tabindex]","class","[class.mc-disabled]","[class.mc-select-invalid]","[class.mc-select-required]","(keydown)","(focus)","(blur)","(window:resize)","animations","mcSelectAnimations","transformPanel","fadeInContent","providers","provide","McFormFieldControl","useExisting","CdkTree","ViewportRuler","ChangeDetectorRef","NgZone","Renderer2","ErrorStateMatcher","ElementRef","Directionality","decorators","Optional","NgForm","FormGroupDirective","McFormField","NgControl","Self","String","Attribute","Inject","MC_SELECT_SCROLL_STRATEGY","ViewChild","CdkConnectedOverlay","ViewChildren","McTag","customTrigger","ContentChild","McTreeSelection","Output","panelClass","Input","errorStateMatcher","placeholder","required","compareWith","McTreeSelectModule","NgModule","imports","CommonModule","OverlayModule","CdkTreeModule","McTreeModule","McIconModule","McTagModule","McPseudoCheckboxModule","exports","declarations","MC_SELECT_SCROLL_STRATEGY_PROVIDER"],"mappings":"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"}