{"version":3,"file":"mosaic-tree-select.umd.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../packages/mosaic/tree-select/tree-select.component.ts","../../packages/mosaic/tree-select/tree-select.module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/* tslint:disable:no-empty */\n\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport {\n    CdkConnectedOverlay,\n    ViewportRuler\n} from '@angular/cdk/overlay';\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    Directive,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Input,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    Renderer2,\n    Self,\n    SimpleChanges,\n    ViewChild,\n    ViewChildren,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NG_VALIDATORS, NgControl, NgForm, Validator } from '@angular/forms';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    RIGHT_ARROW,\n    SPACE,\n    UP_ARROW,\n    A, PAGE_UP, PAGE_DOWN\n} from '@ptsecurity/cdk/keycodes';\nimport { CdkTree } from '@ptsecurity/cdk/tree';\nimport {\n    getOptionScrollPosition,\n    CanDisable,\n    CanUpdateErrorState,\n    ErrorStateMatcher,\n    HasTabIndex,\n    CanDisableCtor,\n    HasTabIndexCtor,\n    CanUpdateErrorStateCtor,\n    mixinTabIndex,\n    mixinDisabled,\n    mixinErrorState,\n    mcSelectAnimations,\n\n    SELECT_PANEL_MAX_HEIGHT,\n    SELECT_PANEL_PADDING_X,\n    SELECT_PANEL_VIEWPORT_PADDING,\n    MC_SELECT_SCROLL_STRATEGY,\n\n    getMcSelectDynamicMultipleError,\n    getMcSelectNonFunctionValueError,\n    getMcSelectNonArrayValueError,\n    MultipleMode,\n\n    MC_VALIDATION,\n    setMosaicValidation,\n    McValidationOptions\n} from '@ptsecurity/mosaic/core';\nimport { McCleaner, McFormField, McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { McTag } from '@ptsecurity/mosaic/tags';\nimport { McTreeSelection, McTreeOption } from '@ptsecurity/mosaic/tree';\nimport { defer, merge, Observable, Subject } from 'rxjs';\nimport {\n    filter,\n    map,\n    switchMap,\n    take,\n    takeUntil,\n    distinctUntilChanged\n} from 'rxjs/operators';\n\n\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the select value has changed. */\nexport class McTreeSelectChange {\n    constructor(public source: McTreeSelect, public value: any, public isUserInput = false) {}\n}\n\n\n@Directive({ selector: 'mc-tree-select-trigger' })\nexport class McTreeSelectTrigger {}\n\n\nclass McTreeSelectBase {\n    constructor(\n        public elementRef: ElementRef,\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {}\n}\n\n// tslint:disable-next-line:naming-convention\nconst McTreeSelectMixinBase: CanDisableCtor & HasTabIndexCtor & CanUpdateErrorStateCtor &\n    typeof McTreeSelectBase = mixinTabIndex(mixinDisabled(mixinErrorState(McTreeSelectBase)));\n\n\n@Component({\n    selector: 'mc-tree-select',\n    exportAs: 'mcTreeSelect',\n    templateUrl: 'tree-select.html',\n    styleUrls: ['./tree-select.css'],\n    inputs: ['disabled'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'tabIndex',\n\n        class: 'mc-tree-select',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-select-invalid]': 'errorState',\n\n        '(click)': 'toggle()',\n        '(keydown)': 'handleKeydown($event)',\n        '(focus)': 'onFocus()',\n        '(blur)': 'onBlur()',\n        '(window:resize)': 'calculateHiddenItems()'\n    },\n    animations: [\n        mcSelectAnimations.transformPanel,\n        mcSelectAnimations.fadeInContent\n    ],\n    providers: [\n        { provide: McFormFieldControl, useExisting: McTreeSelect },\n        { provide: CdkTree, useExisting: McTreeSelect }\n    ]\n})\nexport class McTreeSelect extends McTreeSelectMixinBase implements\n    AfterContentInit, AfterViewInit, OnChanges, OnDestroy, OnInit, DoCheck, ControlValueAccessor,\n    CanDisable, HasTabIndex, McFormFieldControl<McTreeOption>, CanUpdateErrorState {\n\n    /** A name for this control that can be used by `mc-form-field`. */\n    controlType = 'mc-select';\n\n    hiddenItems: number = 0;\n\n    /** The last measured value for the trigger's client bounding rect. */\n    triggerRect: ClientRect;\n\n    /** The cached font-size of the trigger element. */\n    triggerFontSize = 0;\n\n    /** Deals with the selection logic. */\n    selectionModel: SelectionModel<any>;\n\n    /** The value of the select panel's transform-origin property. */\n    transformOrigin: string = 'top';\n\n    /** Whether the panel's animation is done. */\n    panelDoneAnimating: boolean = false;\n\n    /** Emits when the panel element is finished transforming in. */\n    panelDoneAnimatingStream = new Subject<string>();\n\n    /** Strategy that will be used to handle scrolling while the select panel is open. */\n    scrollStrategy = this.scrollStrategyFactory();\n\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n    offsetY = 0;\n\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n    positions = [\n        {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top'\n        },\n        {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom'\n        }\n    ];\n\n    options: QueryList<McTreeOption>;\n\n    @ViewChild('trigger', { static: false }) trigger: ElementRef;\n\n    @ViewChild('panel', { static: false }) panel: ElementRef;\n\n    @ViewChild(CdkConnectedOverlay, { static: false }) overlayDir: CdkConnectedOverlay;\n\n    @ViewChild('hiddenItemsCounter', { static: false }) hiddenItemsCounter: ElementRef;\n\n    @ViewChildren(McTag) tags: QueryList<McTag>;\n\n    @ContentChild('mcSelectCleaner', { static: true }) cleaner: McCleaner;\n\n    /** User-supplied override of the trigger element. */\n    @ContentChild(McTreeSelectTrigger, { static: false }) customTrigger: McTreeSelectTrigger;\n\n    @ContentChild(McTreeSelection, { static: false }) tree: McTreeSelection<McTreeOption>;\n\n    @Input() hiddenItemsText: string = '...ещё';\n\n    /** Event emitted when the select panel has been toggled. */\n    @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted when the select has been opened. */\n    @Output('opened') readonly openedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => o), map(() => {}));\n\n    /** Event emitted when the select has been closed. */\n    @Output('closed') readonly closedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => !o), map(() => {}));\n\n    /** Event emitted when the selected value has been changed by the user. */\n    @Output() readonly selectionChange = new EventEmitter<McTreeSelectChange>();\n\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n    @Input() panelClass: string | string[] | Set<string> | { [key: string]: any };\n\n    /** Object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Function used to sort the values in a select in multiple mode.\n     * Follows the same logic as `Array.prototype.sort`.\n     */\n    @Input() sortComparator: (\n        a: McTreeOption, b: McTreeOption, options: McTreeOption[]\n    ) => number;\n\n    /** Combined stream of all of the child options' change events. */\n    readonly optionSelectionChanges: Observable<McTreeSelectChange> = defer(() => {\n        if (this.options) {\n            return merge(...this.options.map((option) => option.onSelectionChange));\n        }\n\n        return this.ngZone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n    }) as Observable<McTreeSelectChange>;\n\n    @Input()\n    get placeholder(): string {\n        return this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n\n        this.stateChanges.next();\n    }\n\n    private _placeholder: string;\n\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n\n        this.stateChanges.next();\n    }\n\n    private _required: boolean = false;\n\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        if (this.selectionModel) {\n            throw getMcSelectDynamicMultipleError();\n        }\n\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    private _multiple: boolean = false;\n\n    @Input()\n    get autoSelect(): boolean {\n        if (this.multiple) { return false; }\n\n        return this._autoSelect;\n    }\n\n    set autoSelect(value: boolean) {\n        this._autoSelect = coerceBooleanProperty(value);\n    }\n\n    private _autoSelect: boolean = true;\n\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith() {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        /* tslint:disable-next-line:strict-type-predicates */\n        if (typeof fn !== 'function') {\n            throw getMcSelectNonFunctionValueError();\n        }\n\n        this._compareWith = fn;\n\n        if (this.selectionModel) {\n            // A different comparator means the selection could change.\n            this.initializeSelection();\n        }\n    }\n\n    get value(): any {\n        return this.multiple ? this.tree.getSelectedValues() : this.tree.getSelectedValues()[0];\n    }\n\n    private _value: any = null;\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n        this.stateChanges.next();\n    }\n\n    private _id: string;\n\n    /** Whether the select is focused. */\n    get focused(): boolean {\n        return this._focused || this._panelOpen;\n    }\n\n    /**\n     * @deprecated Setter to be removed as this property is intended to be readonly.\n     * @breaking-change 8.0.0\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n\n    private _focused = false;\n\n    get panelOpen(): boolean {\n        return this._panelOpen;\n    }\n\n    get canShowCleaner(): boolean {\n        return this.cleaner && this.selectionModel.hasValue();\n    }\n\n    private _panelOpen = false;\n\n    private originalOnKeyDown: (event: KeyboardEvent) => void;\n\n    /** The scroll position of the overlay panel, calculated to center the selected option. */\n    private scrollTop = 0;\n\n    /** Unique id for this input. */\n    private readonly uid = `mc-select-${nextUniqueId++}`;\n\n    /** Emits whenever the component is destroyed. */\n    private readonly destroy = new Subject<void>();\n\n    // Used for storing the values that were assigned before the options were initialized.\n    private tempValues: string | string[] | null;\n\n    constructor(\n        public elementRef: ElementRef,\n        readonly changeDetectorRef: ChangeDetectorRef,\n        private readonly viewportRuler: ViewportRuler,\n        private readonly ngZone: NgZone,\n        private readonly renderer: Renderer2,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        @Attribute('tabindex') tabIndex: string,\n        @Optional() @Inject(NG_VALIDATORS) private rawValidators: Validator[],\n        @Optional() @Inject(MC_VALIDATION) private mcValidation: McValidationOptions,\n        @Inject(MC_SELECT_SCROLL_STRATEGY) private readonly scrollStrategyFactory,\n        @Optional() private readonly dir: Directionality,\n        @Optional() parentForm: NgForm,\n        @Optional() parentFormGroup: FormGroupDirective,\n        @Optional() private readonly parentFormField: McFormField,\n        @Optional() @Self() ngControl: NgControl\n    ) {\n        super(elementRef, defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnInit() {\n        this.stateChanges.next();\n\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this.panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this.panelOpen) {\n                    this.scrollTop = 0;\n                    this.openedChange.emit(true);\n                } else {\n                    this.openedChange.emit(false);\n                    this.panelDoneAnimating = false;\n                    this.overlayDir.offsetX = 0;\n                    this.changeDetectorRef.markForCheck();\n                }\n            });\n    }\n\n    ngAfterContentInit() {\n        if (!this.tree) { return; }\n\n        if (this.mcValidation.useValidation) {\n            setMosaicValidation.call(this, this.rawValidators, this.parentForm || this.parentFormGroup, this.ngControl);\n        }\n\n        this.tree.resetFocusedItemOnBlur = false;\n\n        this.selectionModel = this.tree.selectionModel = new SelectionModel<any>(this.multiple);\n        this.tree.ngAfterContentInit();\n\n        this.initKeyManager();\n\n        this.options = this.tree.renderedOptions;\n        this.tree.autoSelect = this.autoSelect;\n        this.tree.multipleMode = this.multiple ? MultipleMode.CHECKBOX : null;\n\n        if (this.multiple) {\n            this.tree.noUnselectLast = false;\n        }\n\n        if (this.tempValues) {\n            this.setSelectionByValue(this.tempValues);\n            this.tempValues = null;\n        }\n\n        this.optionSelectionChanges\n            .pipe(takeUntil(this.destroy))\n            .subscribe((event) => {\n                if (!this.multiple && this.panelOpen && event.isUserInput) {\n                    this.close();\n                }\n            });\n\n        this.tree.selectionChange\n            .pipe(takeUntil(this.destroy))\n            .subscribe((event) => {\n                this.onChange(this.selectedValues);\n\n                this.selectionChange.emit(new McTreeSelectChange(this, event.option));\n            });\n\n        this.selectionModel.changed\n            .pipe(takeUntil(this.destroy))\n            .subscribe((event) => {\n                if (event.added.length) {\n                    this.tree.keyManager.setActiveItem(\n                        this.options.find((option) => option.data === event.added[0]) as any\n                    );\n                }\n            });\n    }\n\n    ngAfterViewInit() {\n        if (!this.tree) { return; }\n\n        this.tags.changes\n            .subscribe(() => {\n                setTimeout(() => this.calculateHiddenItems(), 0);\n            });\n\n        setTimeout(() => this.calculateHiddenItems(), 0);\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) { this.updateErrorState(); }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes.disabled) {\n            this.stateChanges.next();\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroy.next();\n\n        this.destroy.complete();\n        this.stateChanges.complete();\n    }\n\n    @Input()\n    hiddenItemsTextFormatter(hiddenItemsText: string, hiddenItems: number): string {\n        return `${hiddenItemsText} ${hiddenItems}`;\n    }\n\n    clearValue($event): void {\n        $event.stopPropagation();\n\n        this.selectionModel.clear();\n        this.tree.keyManager.setActiveItem(-1);\n\n        this.setSelectionByValue([]);\n\n        this.onChange(this.selectedValues);\n    }\n\n    /** `View -> model callback called when value changes` */\n    onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when select has been touched` */\n    onTouched = () => {};\n\n    toggle(): void {\n        if (this.panelOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    open(): void {\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) { return; }\n\n        this.triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this.triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n        this._panelOpen = true;\n\n        setTimeout(() => this.highlightCorrectOption());\n\n        this.changeDetectorRef.markForCheck();\n\n        // Set the font size on the panel element once it exists.\n        this.ngZone.onStable.asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                if (this.triggerFontSize && this.overlayDir.overlayRef && this.overlayDir.overlayRef.overlayElement) {\n                    this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this.triggerFontSize}px`;\n                }\n            });\n    }\n\n    /** Closes the overlay panel and focuses the host element. */\n    close(): void {\n        if (!this._panelOpen) { return; }\n\n        this._panelOpen = false;\n\n        this.changeDetectorRef.markForCheck();\n        this.onTouched();\n\n        setTimeout(() => this.focus(), 0);\n    }\n\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value: any): void {\n        if (this.tree) {\n            this.setSelectionByValue(value);\n        } else {\n            this.tempValues = value;\n        }\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.onChange = fn;\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn: () => {}) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this.changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    get selected(): any {\n        return this.multiple ? this.selectionModel.selected : this.selectionModel.selected[0];\n    }\n\n    get selectedValues(): any {\n        const selectedValues = this.selectionModel.selected.map((value) => this.tree.treeControl.getValue(value));\n\n        return this.multiple ? selectedValues : selectedValues[0];\n    }\n\n    get triggerValue(): string {\n        if (this.empty) { return ''; }\n\n        return this.tree.treeControl.getViewValue(this.selected);\n    }\n\n    get triggerValues(): string[] {\n        if (this.empty) { return []; }\n\n        return this.selected;\n    }\n\n    get empty(): boolean {\n        return !this.selectionModel || this.selectionModel.isEmpty();\n    }\n\n    isRtl(): boolean {\n        return this.dir ? this.dir.value === 'rtl' : false;\n    }\n\n    handleKeydown(event: KeyboardEvent) {\n        if (!this.disabled) {\n            if (this.panelOpen) {\n                this.handleOpenKeydown(event);\n            } else {\n                this.handleClosedKeydown(event);\n            }\n        }\n    }\n\n    /**\n     * When the panel content is done fading in, the panelDoneAnimating property is\n     * set so the proper class can be added to the panel.\n     */\n    onFadeInDone() {\n        this.panelDoneAnimating = this.panelOpen;\n        this.changeDetectorRef.markForCheck();\n    }\n\n    onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    onBlur() {\n        this._focused = false;\n\n        if (!this.disabled && !this.panelOpen) {\n            this.onTouched();\n            this.changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n\n    /** Callback that is invoked when the overlay panel has been attached. */\n    onAttached() {\n        this.overlayDir.positionChange\n            .pipe(take(1))\n            .subscribe(() => {\n                this.changeDetectorRef.detectChanges();\n                this.calculateOverlayOffsetX();\n                this.panel.nativeElement.scrollTop = this.scrollTop;\n\n                this.tree.updateScrollSize();\n            });\n    }\n\n    /** Returns the theme to be used on the panel. */\n    getPanelTheme(): string {\n        return this.parentFormField ? `mc-${this.parentFormField.color}` : '';\n    }\n\n    focus() {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Invoked when an option is clicked. */\n    onRemoveSelectedOption(selectedOption: any, $event) {\n        $event.stopPropagation();\n\n        if (this.disabled) { return; }\n\n        this.selectionModel.deselect(selectedOption);\n\n        this.onChange(this.selectedValues);\n    }\n\n    calculateHiddenItems() {\n        if (this.empty || !this.multiple) { return; }\n\n        let visibleItems: number = 0;\n        const totalItemsWidth = this.getTotalItemsWidthInMatcher();\n        let totalVisibleItemsWidth: number = 0;\n        const itemMargin: number = 4;\n\n        this.tags.forEach((tag) => {\n            if (tag.nativeElement.offsetTop < tag.nativeElement.offsetHeight) {\n                totalVisibleItemsWidth += tag.nativeElement.getBoundingClientRect().width + itemMargin;\n                visibleItems++;\n            }\n        });\n\n        this.hiddenItems = this.selectionModel.selected.length - visibleItems;\n\n        if (this.hiddenItems) {\n            const itemsCounter = this.trigger.nativeElement.querySelector('.mc-tree-select__match-hidden-text');\n            const matcherList = this.trigger.nativeElement.querySelector('.mc-tree-select__match-list');\n\n            const itemsCounterShowed = itemsCounter.offsetTop < itemsCounter.offsetHeight;\n            // const itemsCounterWidth: number = itemsCounter.getBoundingClientRect().width;\n            const itemsCounterWidth: number = 86;\n\n            const matcherListWidth: number = matcherList.getBoundingClientRect().width;\n            const matcherWidth: number = matcherListWidth + itemsCounterWidth;\n\n            if (itemsCounterShowed && (totalItemsWidth < matcherWidth)) { this.hiddenItems = 0; }\n\n            if (\n                totalVisibleItemsWidth === matcherListWidth ||\n                (totalVisibleItemsWidth + itemsCounterWidth) < matcherListWidth\n            ) {\n                this.changeDetectorRef.markForCheck();\n\n                return ;\n            } else if (!itemsCounterShowed && (totalItemsWidth + itemsCounterWidth) > matcherWidth) {\n                this.hiddenItems++;\n            }\n        }\n\n        this.changeDetectorRef.markForCheck();\n    }\n\n    private getTotalItemsWidthInMatcher(): number {\n        const triggerClone = this.trigger.nativeElement.cloneNode(true);\n        triggerClone.querySelector('.mc-tree-select__match-hidden-text').remove();\n\n        this.renderer.setStyle(triggerClone, 'position', 'absolute');\n        this.renderer.setStyle(triggerClone, 'visibility', 'hidden');\n        this.renderer.setStyle(triggerClone, 'top', '-100%');\n        this.renderer.setStyle(triggerClone, 'left', '0');\n\n        this.renderer.appendChild(this.trigger.nativeElement, triggerClone);\n\n        let totalItemsWidth: number = 0;\n        const itemMargin: number = 4;\n        triggerClone.querySelectorAll('mc-tag').forEach((item) => {\n            totalItemsWidth += item.getBoundingClientRect().width as number + itemMargin;\n        });\n\n        triggerClone.remove();\n\n        return totalItemsWidth;\n    }\n\n    private handleClosedKeydown(event: KeyboardEvent) {\n        // tslint:disable-next-line: deprecation\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n        // Open the select on ALT + arrow key to match the native <select>\n        if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n            // prevents the page from scrolling down when pressing space\n            event.preventDefault();\n\n            this.open();\n        } else if (!this.multiple && this.tree.keyManager && this.tree.keyManager.onKeydown) {\n            this.tree.keyManager.onKeydown(event);\n        }\n    }\n\n    private handleOpenKeydown(event: KeyboardEvent) {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n\n            this.close();\n        } else if (keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW) {\n            return this.originalOnKeyDown.call(this.tree, event);\n        } else if (keyCode === HOME) {\n            event.preventDefault();\n\n            this.tree.keyManager.setFirstItemActive();\n        } else if (keyCode === END) {\n            event.preventDefault();\n\n            this.tree.keyManager.setLastItemActive();\n        } else if (keyCode === PAGE_UP) {\n            event.preventDefault();\n\n            this.tree.keyManager.setPreviousPageItemActive();\n        } else if (keyCode === PAGE_DOWN) {\n            event.preventDefault();\n\n            this.tree.keyManager.setNextPageItemActive();\n        } else if ((keyCode === ENTER || keyCode === SPACE) && this.tree.keyManager.activeItem) {\n            event.preventDefault();\n\n            if (!this.autoSelect) {\n                this.selectionModel.toggle(this.tree.keyManager.activeItem.data);\n            } else {\n                this.close();\n            }\n        } else if (this.multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n\n            const hasDeselectedOptions = this.options.some((option) => !option.selected);\n\n            this.options.forEach((option) => {\n                if (hasDeselectedOptions && !option.disabled) {\n                    option.select();\n                } else {\n                    option.deselect();\n                }\n            });\n        } else {\n            const previouslyFocusedIndex = this.tree.keyManager.activeItemIndex;\n\n            this.tree.keyManager.onKeydown(event);\n\n            if (\n                this.multiple && isArrowKey && event.shiftKey && this.tree.keyManager.activeItem &&\n                this.tree.keyManager.activeItemIndex !== previouslyFocusedIndex\n            ) {\n                this.tree.keyManager.activeItem.selectViaInteraction(event);\n            }\n\n            if (this.autoSelect && this.tree.keyManager.activeItem) {\n                this.tree.setSelectedOption(this.tree.keyManager.activeItem);\n            }\n        }\n    }\n\n    private initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this.setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n        });\n    }\n\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    private setSelectionByValue(value: any | any[]) {\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) { throw getMcSelectNonArrayValueError(); }\n\n            this.tree.setOptionsFromValues(value);\n\n            this.sortValues();\n        } else {\n            this.tree.setOptionsFromValues([value]);\n        }\n\n        this.changeDetectorRef.detectChanges();\n    }\n\n    private initKeyManager() {\n        this.originalOnKeyDown = this.tree.onKeyDown;\n\n        this.tree.onKeyDown = () => {};\n\n        this.tree.keyManager.tabOut\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            });\n\n        this.tree.keyManager.change\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this._panelOpen && this.panel) {\n                    this.scrollActiveOptionIntoView();\n                } else if (!this._panelOpen && !this.multiple && this.tree.keyManager.activeItem) {\n                    this.tree.keyManager.activeItem.selectViaInteraction();\n                }\n            });\n    }\n\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    private sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n\n            this.selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    private highlightCorrectOption() {\n        if (this.empty || !this.tree.keyManager) { return; }\n\n        const firstSelectedValue = this.multiple ? this.selectedValues[0] : this.selectedValues;\n\n        const selectedOption = this.options.find((option) => option.value === firstSelectedValue);\n\n        if (selectedOption) {\n            this.tree.keyManager.setActiveItem(selectedOption);\n        }\n    }\n\n    /** Scrolls the active option into view. */\n    private scrollActiveOptionIntoView() {\n        const activeOptionIndex = this.tree.keyManager.activeItemIndex || 0;\n\n        this.panel.nativeElement.scrollTop = getOptionScrollPosition(\n            activeOptionIndex,\n            this.tree.getItemHeight(),\n            this.panel.nativeElement.scrollTop,\n            SELECT_PANEL_MAX_HEIGHT\n        );\n    }\n\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    private calculateOverlayOffsetX() {\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this.viewportRuler.getViewportSize();\n        const isRtl = this.isRtl();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const paddingWidth = SELECT_PANEL_PADDING_X * 2;\n        let offsetX: number = SELECT_PANEL_PADDING_X;\n\n        // Invert the offset in LTR.\n        if (!isRtl) { offsetX *= -1; }\n\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        } else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n}\n","import { OverlayModule } from '@angular/cdk/overlay';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CdkTreeModule } from '@ptsecurity/cdk/tree';\nimport { MC_SELECT_SCROLL_STRATEGY_PROVIDER, McPseudoCheckboxModule } from '@ptsecurity/mosaic/core';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\nimport { McTagsModule } from '@ptsecurity/mosaic/tags';\nimport { McTreeModule } from '@ptsecurity/mosaic/tree';\n\nimport { McTreeSelect, McTreeSelectTrigger } from './tree-select.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        CdkTreeModule,\n        McTreeModule,\n        McIconModule,\n        McTagsModule,\n        McPseudoCheckboxModule\n    ],\n    exports: [McTreeSelect, McTreeSelectTrigger, CommonModule],\n    declarations: [McTreeSelect, McTreeSelectTrigger],\n    providers: [MC_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class McTreeSelectModule {}\n"],"names":["__extends","d","b","__","this","constructor","extendStatics","prototype","Object","create","setPrototypeOf","__proto__","Array","p","hasOwnProperty","nextUniqueId","McTreeSelectChange","source","value","isUserInput","McTreeSelectTrigger","type","Directive","args","selector","McTreeSelectBase","elementRef","defaultErrorStateMatcher","parentForm","parentFormGroup","ngControl","McTreeSelectMixinBase","mixinTabIndex","mixinDisabled","mixinErrorState","McTreeSelect","_super","changeDetectorRef","viewportRuler","ngZone","renderer","tabIndex","rawValidators","mcValidation","scrollStrategyFactory","dir","parentFormField","_this","call","controlType","hiddenItems","triggerFontSize","transformOrigin","panelDoneAnimating","panelDoneAnimatingStream","Subject","scrollStrategy","offsetY","positions","originX","originY","overlayX","overlayY","hiddenItemsText","openedChange","EventEmitter","openedStream","pipe","filter","o","map","closedStream","selectionChange","valueChange","optionSelectionChanges","defer","options","merge","apply","option","onSelectionChange","onStable","asObservable","take","switchMap","_required","_multiple","_autoSelect","_value","_focused","_panelOpen","scrollTop","uid","destroy","onChange","onTouched","_compareWith","o1","o2","valueAccessor","parseInt","id","tslib_1.__extends","defineProperty","_placeholder","stateChanges","next","coerceBooleanProperty","selectionModel","getMcSelectDynamicMultipleError","multiple","fn","getMcSelectNonFunctionValueError","initializeSelection","tree","getSelectedValues","_id","cleaner","hasValue","ngOnInit","distinctUntilChanged","takeUntil","subscribe","panelOpen","emit","overlayDir","offsetX","markForCheck","ngAfterContentInit","useValidation","setMosaicValidation","resetFocusedItemOnBlur","SelectionModel","initKeyManager","renderedOptions","autoSelect","multipleMode","MultipleMode","CHECKBOX","noUnselectLast","tempValues","setSelectionByValue","event","close","selectedValues","changed","added","length","keyManager","setActiveItem","find","data","ngAfterViewInit","tags","changes","setTimeout","calculateHiddenItems","ngDoCheck","updateErrorState","ngOnChanges","disabled","ngOnDestroy","complete","hiddenItemsTextFormatter","clearValue","$event","stopPropagation","clear","toggle","open","triggerRect","trigger","nativeElement","getBoundingClientRect","getComputedStyle","highlightCorrectOption","overlayRef","overlayElement","style","fontSize","focus","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","selected","treeControl","getValue","empty","getViewValue","isEmpty","isRtl","handleKeydown","handleOpenKeydown","handleClosedKeydown","onFadeInDone","onFocus","onBlur","onAttached","positionChange","detectChanges","calculateOverlayOffsetX","panel","updateScrollSize","getPanelTheme","color","onContainerClick","onRemoveSelectedOption","selectedOption","deselect","visibleItems","totalItemsWidth","getTotalItemsWidthInMatcher","totalVisibleItemsWidth","forEach","tag","offsetTop","offsetHeight","width","itemsCounter","querySelector","matcherList","itemsCounterShowed","matcherListWidth","matcherWidth","triggerClone","cloneNode","remove","setStyle","appendChild","querySelectorAll","item","keyCode","isArrowKey","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","ENTER","SPACE","altKey","preventDefault","onKeydown","originalOnKeyDown","HOME","setFirstItemActive","END","setLastItemActive","PAGE_UP","setPreviousPageItemActive","PAGE_DOWN","setNextPageItemActive","activeItem","A","ctrlKey","hasDeselectedOptions_1","some","select","previouslyFocusedIndex","activeItemIndex","shiftKey","selectViaInteraction","setSelectedOption","Promise","resolve","then","isArray","getMcSelectNonArrayValueError","setOptionsFromValues","sortValues","onKeyDown","tabOut","change","scrollActiveOptionIntoView","options_1","toArray","sort","a","sortComparator","indexOf","firstSelectedValue","activeOptionIndex","getOptionScrollPosition","getItemHeight","SELECT_PANEL_MAX_HEIGHT","overlayRect","viewportSize","getViewportSize","paddingWidth","SELECT_PANEL_PADDING_X","leftOverflow","left","rightOverflow","right","SELECT_PANEL_VIEWPORT_PADDING","Math","round","updatePosition","Component","exportAs","template","styles","inputs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","host","[attr.id]","[attr.tabindex]","class","[class.mc-disabled]","[class.mc-select-invalid]","(click)","(keydown)","(focus)","(blur)","(window:resize)","animations","mcSelectAnimations","transformPanel","fadeInContent","providers","provide","McFormFieldControl","useExisting","CdkTree","ElementRef","ChangeDetectorRef","ViewportRuler","NgZone","Renderer2","ErrorStateMatcher","String","decorators","Attribute","Optional","Inject","NG_VALIDATORS","undefined","MC_VALIDATION","MC_SELECT_SCROLL_STRATEGY","Directionality","NgForm","FormGroupDirective","McFormField","NgControl","Self","ViewChild","static","CdkConnectedOverlay","hiddenItemsCounter","ViewChildren","McTag","ContentChild","customTrigger","McTreeSelection","Input","Output","panelClass","errorStateMatcher","placeholder","required","compareWith","McTreeSelectModule","NgModule","imports","CommonModule","OverlayModule","CdkTreeModule","McTreeModule","McIconModule","McTagsModule","McPseudoCheckboxModule","exports","declarations","MC_SELECT_SCROLL_STRATEGY_PROVIDER"],"mappings":"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"}