{"version":3,"file":"mosaic.umd.min.js","sources":["../../src/lib/toggle/toggle.component.ts","../../src/lib/toggle/toggle.module.ts","../../src/lib/tooltip/tooltip.component.ts","../../src/lib/tooltip/tooltip.module.ts","../../src/lib/version.ts","../../src/lib/core/select/events.ts","../../src/lib/core/select/constants.ts","../../src/lib/select/select.component.ts","../../src/lib/timepicker/timepicker.constants.ts","../../src/lib/timepicker/timepicker.ts","../../src/lib/timepicker/timepicker.module.ts","../../src/lib/sidepanel/sidepanel-config.ts","../../src/lib/sidepanel/sidepanel-animations.ts","../../src/lib/sidepanel/sidepanel-container.component.ts","../../src/lib/sidepanel/sidepanel-ref.ts","../../src/lib/sidepanel/sidepanel.service.ts","../../src/lib/sidepanel/sidepanel-directives.ts","../../src/lib/sidepanel/sidepanel.module.ts","../../src/lib/splitter/splitter.component.ts","../../src/lib/splitter/splitter.module.ts","../../src/lib/select/select.module.ts","../../src/lib/tree-select/tree-select.component.ts","../../src/lib/tree-select/tree-select.module.ts","../../src/lib/textarea/textarea.component.ts","../../src/lib/textarea/textarea.module.ts","../../src/lib/tags/tag-list.component.ts","../../src/lib/tags/tag-input.ts","../../src/lib/tags/tag.module.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs.module.ts","../../src/lib/tags/tag-default-options.ts","../../src/lib/tags/tag.component.ts","../../src/lib/progress-spinner/progress-spinner.component.ts","../../src/lib/progress-spinner/progress-spinner.module.ts","../../src/lib/radio/radio.component.ts","../../src/lib/radio/radio.module.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-option.ts","../../src/lib/tree/tree-selection.ts","../../src/lib/tree/tree.module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/modal/modal.component.ts","../../src/lib/modal/css-unit.pipe.ts","../../src/lib/modal/modal.service.ts","../../src/lib/modal/modal.module.ts","../../src/lib/navbar/navbar.component.ts","../../src/lib/navbar/navbar.module.ts","../../src/lib/progress-bar/progress-bar.component.ts","../../src/lib/progress-bar/progress-bar.module.ts","../../src/lib/dropdown/dropdown.component.ts","../../src/lib/dropdown/dropdown-trigger.ts","../../src/lib/dropdown/dropdown.module.ts","../../src/lib/layout/content.component.ts","../../src/lib/layout/footer.component.ts","../../src/lib/layout/header.component.ts","../../src/lib/layout/layout.component.ts","../../src/lib/layout/sidebar.component.ts","../../src/lib/layout/layout.module.ts","../../src/lib/list/list-selection.component.ts","../../src/lib/list/list.component.ts","../../src/lib/list/list.module.ts","../../src/lib/link/link.component.ts","../../src/lib/link/link.module.ts","../../src/lib/modal/modal-control.service.ts","../../src/lib/modal/modal-ref.class.ts","../../src/lib/modal/modal-util.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.component.ts","../../src/lib/divider/divider.module.ts","../../src/lib/dropdown/dropdown-content.ts","../../src/lib/dropdown/dropdown-panel.ts","../../src/lib/dropdown/dropdown-item.ts","../../src/lib/dropdown/dropdown-animations.ts","../../src/lib/input/input.ts","../../src/lib/input/input-number-validators.ts","../../src/lib/input/input.module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/button-toggle/button-toggle.component.ts","../../src/lib/button-toggle/button-toggle.module.ts","../../src/lib/card/card.component.ts","../../src/lib/card/card.module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/icon/icon.component.ts","../../src/lib/icon/icon.module.ts","../../src/lib/form-field/cleaner.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/form-field-number-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/stepper.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field.module.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/stepperUtils.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/utils/utils.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/option/option.ts","../../src/lib/core/overlay/overlay-position-map.ts","../../src/lib/core/select/errors.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/dropdown/dropdown-errors.ts","../../src/lib/core/line/line.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/services/measure-scrollbar.service.ts","../../src/lib/core/option/optgroup.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/core/animation/fade-animations.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/select/animations.ts","../../src/lib/button/button.component.ts","../../src/lib/button/button.module.ts"],"sourcesContent":["import { animate, state, style, transition, trigger } from '@angular/animations';\nimport {\n    Attribute,\n    ChangeDetectionStrategy, ChangeDetectorRef,\n    Component,\n    ElementRef, EventEmitter, forwardRef,\n    Input, Output, ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport {\n    ThemePalette,\n    CanColor, CanColorCtor,\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex\n} from '@ptsecurity/mosaic/core';\n\n\nlet nextUniqueId = 0;\n\ntype ToggleLabelPositionType = 'left' | 'right';\n\nexport class McToggleBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McToggleMixinBase:\n    HasTabIndexCtor &\n    CanDisableCtor &\n    CanColorCtor &\n    typeof McToggleBase = mixinTabIndex(mixinColor(mixinDisabled(McToggleBase), ThemePalette.Primary));\n\nexport class McToggleChange {\n    source: McToggleComponent;\n    checked: boolean;\n}\n\n@Component({\n    selector: 'mc-toggle',\n    exportAs: 'mcToggle',\n    templateUrl: './toggle.component.html',\n    styleUrls: ['./toggle.css'],\n    providers: [\n        {provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => McToggleComponent), multi: true}\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color', 'tabIndex'],\n    host: {\n        class: 'mc-toggle',\n        '[id]': 'id',\n        '[attr.id]': 'id',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-toggle_off]': '!checked'\n    },\n    animations: [\n        trigger('switch', [\n            state('true' , style({ left: '50%' })),\n            state('false', style({ left: '1px' })),\n            transition('true <=> false', animate('150ms'))\n        ])\n    ]\n})\nexport class McToggleComponent extends _McToggleMixinBase\n    implements ControlValueAccessor, CanColor, CanDisable, HasTabIndex {\n\n    @ViewChild('input') _inputElement: ElementRef;\n\n    @Input() labelPosition: ToggleLabelPositionType = 'right';\n\n    @Input('aria-label') ariaLabel: string = '';\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n    private _uniqueId: string = `mc-toggle-${++nextUniqueId}`;\n\n    // tslint:disable:member-ordering\n    @Input() id: string = this._uniqueId;\n\n    get inputId(): string {\n        return `${this.id || this._uniqueId}-input`;\n    }\n\n    @Input() name: string | null = null;\n\n    @Input() value: string;\n\n    private _disabled: boolean = false;\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value !== this._disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _checked: boolean = false;\n\n    get checked() {\n        return this._checked;\n    }\n\n    @Input()\n    set checked(value: boolean) {\n        if (value !== this._checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    @Output() readonly change: EventEmitter<McToggleChange> =\n        new EventEmitter<McToggleChange>();\n\n    constructor(public _elementRef: ElementRef,\n                private _focusMonitor: FocusMonitor,\n                private _changeDetectorRef: ChangeDetectorRef,\n                @Attribute('tabindex') tabIndex: string\n    ) {\n        super(_elementRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n    }\n\n    _getAriaChecked(): boolean {\n        return this.checked;\n    }\n\n    _onInteractionEvent(event: Event) {\n        event.stopPropagation();\n    }\n\n    _onLabelTextChange() {\n        this._changeDetectorRef.markForCheck();\n    }\n\n    _onInputClick(event: MouseEvent) {\n        event.stopPropagation();\n        this._updateModelValue();\n        this._emitChangeEvent();\n    }\n\n    writeValue(value: any) {\n        this.checked = !!value;\n    }\n\n    registerOnChange(fn: any) {\n        this._onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: any) {\n        this._onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n    }\n\n    // tslint:disable-next-line:no-empty\n    private _onTouchedCallback = () => {};\n\n    // tslint:disable-next-line:no-empty\n    private _onChangeCallback = (_: any) => {};\n\n    private _updateModelValue() {\n        this._checked = !this.checked;\n        this._onChangeCallback(this.checked);\n        this._onTouchedCallback();\n    }\n\n    private _emitChangeEvent() {\n        const event = new McToggleChange();\n        event.source = this;\n        event.checked = this.checked;\n\n        this._onChangeCallback(this.checked);\n        this.change.emit(event);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McToggleComponent } from './toggle.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule],\n    exports: [McToggleComponent],\n    declarations: [McToggleComponent]\n})\nexport class McToggleModule {\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    TemplateRef,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport {\n    ConnectedOverlayPositionChange,\n    ConnectionPositionPair,\n    Overlay,\n    OverlayRef,\n    ScrollDispatcher,\n    IScrollStrategy,\n    FlexibleConnectedPositionStrategy,\n    IOverlayConnectionPosition,\n    IOriginConnectionPosition,\n    HorizontalConnectionPos,\n    VerticalConnectionPos\n} from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal } from '@ptsecurity/cdk/portal';\nimport {\n    fadeAnimation,\n    DEFAULT_4_POSITIONS,\n    POSITION_MAP\n} from '@ptsecurity/mosaic/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators';\n\n\n@Component({\n    selector: 'mc-tooltip-component',\n    inputs: [\n        'mcMouseEnterDelay',\n        'mcMouseLeaveDelay',\n        'mcTitle',\n        'mcVisible',\n        'mcTrigger',\n        'mcPlacement'\n    ],\n    outputs: ['mcVisibleChange'],\n    animations: [ fadeAnimation ],\n    templateUrl: './tooltip.component.html',\n    preserveWhitespaces: false,\n    styleUrls: ['./tooltip.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '(body:click)': 'this.handleBodyInteraction()'\n    }\n})\nexport class McTooltipComponent {\n    prefix = 'mc-tooltip_placement';\n    positions: ConnectionPositionPair[] = [ ...DEFAULT_4_POSITIONS ];\n    classMap = {};\n    isTitleString: boolean;\n    showTid: number;\n    hideTid: number;\n    availablePositions: any;\n    $visible: Observable<boolean>;\n\n    @Output() mcVisibleChange: EventEmitter<boolean> = new EventEmitter();\n\n    @Input() mcMouseEnterDelay = 400;\n\n    @Input() mcMouseLeaveDelay = 0;\n\n    @Input()\n    get mcTitle(): string | TemplateRef<void> {\n        return this._mcTitle;\n    }\n    set mcTitle(value: string | TemplateRef<void>) {\n        this.isTitleString = !(value instanceof TemplateRef);\n\n        if (this.isTitleString) {\n            this._mcTitle = value;\n        }\n    }\n    private _mcTitle: string | TemplateRef<void>;\n\n    @Input()\n    get mcTrigger(): string {\n        return this._mcTrigger;\n    }\n    set mcTrigger(value: string) {\n        this._mcTrigger = value;\n    }\n    private _mcTrigger: string = 'hover';\n\n    @Input()\n    get mcPlacement(): string {\n        return this._mcPlacement;\n    }\n    set mcPlacement(value: string) {\n        if (value !== this._mcPlacement) {\n            this._mcPlacement = value;\n            this.positions.unshift(POSITION_MAP[ this.mcPlacement ]);\n        } else if (!value) {\n            this._mcPlacement = 'top';\n        }\n    }\n    private _mcPlacement: string = 'top';\n\n    @Input()\n    get mcVisible(): boolean {\n        return this._mcVisible.value;\n    }\n    set mcVisible(value: boolean) {\n        const visible = coerceBooleanProperty(value);\n\n        if (this._mcVisible.value !== visible) {\n            this._mcVisible.next(visible);\n            this.mcVisibleChange.emit(visible);\n        }\n    }\n    private _mcVisible: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n    /** Subject for notifying that the tooltip has been hidden from the view */\n    private readonly onHideSubject: Subject<any> = new Subject();\n    private closeOnInteraction: boolean = false;\n\n    constructor(public cdr: ChangeDetectorRef) {\n        this.availablePositions = POSITION_MAP;\n        this.$visible = this._mcVisible.asObservable();\n    }\n\n    show(): void {\n        if (this.hideTid) {\n            clearTimeout(this.hideTid);\n        }\n\n        if (!this.isContentEmpty()) {\n            if (this.mcTrigger !== 'manual') {\n                this.closeOnInteraction = true;\n            }\n            this.showTid = setTimeout(() => {\n                this.mcVisible = true;\n                this.mcVisibleChange.emit(true);\n\n                // Mark for check so if any parent component has set the\n                // ChangeDetectionStrategy to OnPush it will be checked anyways\n                this.markForCheck();\n            }, this.mcMouseEnterDelay);\n        }\n    }\n\n    hide(): void {\n        if (this.showTid) {\n            clearTimeout(this.showTid);\n        }\n\n        this.hideTid = setTimeout(() => {\n            this.mcVisible = false;\n            this.mcVisibleChange.emit(false);\n            this.onHideSubject.next();\n\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this.markForCheck();\n        }, this.mcMouseLeaveDelay);\n    }\n\n    setClassMap(): void {\n        this.classMap = `${this.prefix}-${this.mcPlacement}`;\n    }\n\n    isContentEmpty(): boolean {\n        return this.isTitleString ? (this.mcTitle === '' || !this.mcTitle) : false;\n    }\n\n    /** Returns an observable that notifies when the tooltip has been hidden from view. */\n    afterHidden(): Observable<void> {\n        return this.onHideSubject.asObservable();\n    }\n\n    markForCheck(): void {\n        this.cdr.markForCheck();\n    }\n\n    handleBodyInteraction(): void {\n        if (this.closeOnInteraction) {\n            this.hide();\n        }\n    }\n}\n\nexport const MC_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function mcTooltipScrollStrategyFactory(overlay: Overlay): () => IScrollStrategy {\n    return () => overlay.scrollStrategies.reposition({scrollThrottle: 20});\n}\n\n/** @docs-private */\nexport const MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_TOOLTIP_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: mcTooltipScrollStrategyFactory\n};\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMcTooltipInvalidPositionError(position: string) {\n    return Error(`McTooltip position \"${position}\" is invalid.`);\n}\n\nconst VIEWPORT_MARGIN: number = 8;\n\n@Directive({\n    selector: '[mcTooltip], [attribute^=\"mcTooltip\"]',\n    exportAs: 'mcTooltip',\n    host: {\n        '(keydown)': 'handleKeydown($event)',\n        '(touchend)': 'handleTouchend()'\n    }\n})\nexport class McTooltip implements OnInit, OnDestroy {\n    isTooltipOpen: boolean = false;\n    isDynamicTooltip = false;\n    parentDisabled: boolean = false;\n    overlayRef: OverlayRef | null;\n    portal: ComponentPortal<McTooltipComponent>;\n    availablePositions: any;\n    tooltip: McTooltipComponent | null;\n\n    @Output() mcVisibleChange = new EventEmitter<boolean>();\n    private $unsubscribe = new Subject<void>();\n\n    @Input('mcTooltip')\n    get mcTitle(): string {\n        return this._mcTitle;\n    }\n    set mcTitle(title: string) {\n        this._mcTitle = title;\n        this.updateCompValue('mcTitle', title);\n    }\n    private _mcTitle: string;\n\n    @Input('mcTitle')\n    set setTitle(title: string) {\n        this.mcTitle = title;\n    }\n\n    @Input('mcTooltipDisabled')\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    private _disabled: boolean = false;\n\n    @Input('mcMouseEnterDelay')\n    get mcMouseEnterDelay(): number {\n        return this._mcMouseEnterDelay;\n    }\n    set mcMouseEnterDelay(value: number) {\n        this._mcMouseEnterDelay = value;\n        this.updateCompValue('mcMouseEnterDelay', value);\n    }\n    private _mcMouseEnterDelay: number;\n\n    @Input('mcMouseLeaveDelay')\n    get mcMouseLeaveDelay(): number {\n        return this._mcMouseLeaveDelay;\n    }\n    set mcMouseLeaveDelay(value: number) {\n        this._mcMouseLeaveDelay = value;\n        this.updateCompValue('mcMouseLeaveDelay', value);\n    }\n    private _mcMouseLeaveDelay: number;\n\n    @Input('mcTrigger')\n    get mcTrigger(): string {\n        return this._mcTrigger;\n    }\n    set mcTrigger(value: string) {\n        if (value) {\n            this._mcTrigger = value;\n            this.updateCompValue('mcTrigger', value);\n        } else {\n            this._mcTrigger = 'hover';\n        }\n    }\n    private _mcTrigger: string = 'hover';\n\n    @Input('mcPlacement')\n    get mcPlacement(): string {\n        return this._mcPlacement;\n    }\n    set mcPlacement(value: string) {\n        if (value) {\n            this._mcPlacement = value;\n            this.updateCompValue('mcPlacement', value);\n        } else {\n            this._mcPlacement = 'top';\n        }\n    }\n    private _mcPlacement: string = 'top';\n\n    @Input('mcTooltipClass')\n    get mcTooltipClass() { return this._mcTooltipClass; }\n    set mсTooltipClass(value: string | string[] | Set<string> | {[key: string]: any}) {\n        this._mcTooltipClass = value;\n\n        if (this.tooltip) {\n            this.tooltip.setClassMap();\n        }\n    }\n    private _mcTooltipClass: string | string[] | Set<string> | {[key: string]: any};\n\n    @Input('mcVisible')\n    get mcVisible(): boolean {\n        return this._mcVisible;\n    }\n    set mcVisible(externalValue: boolean) {\n        const value = coerceBooleanProperty(externalValue);\n        this._mcVisible = value;\n        this.updateCompValue('mcVisible', value);\n\n        if (value) {\n            this.show();\n        }\n    }\n    private _mcVisible: boolean;\n\n    @HostBinding('class.mc-tooltip-open')\n    get isOpen(): boolean {\n        return this.isTooltipOpen;\n    }\n\n    @HostBinding('class.disabled')\n    get isParentDisabled(): boolean {\n        return this.parentDisabled;\n    }\n\n    private manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n    private readonly destroyed = new Subject<void>();\n\n    constructor(\n        private overlay: Overlay,\n        private elementRef: ElementRef,\n        private ngZone: NgZone,\n        private scrollDispatcher: ScrollDispatcher,\n        private hostView: ViewContainerRef,\n        @Inject(MC_TOOLTIP_SCROLL_STRATEGY) private scrollStrategy,\n        @Optional() private direction: Directionality) {\n            this.availablePositions = POSITION_MAP;\n        }\n\n    /** Create the overlay config and position strategy */\n    createOverlay(): OverlayRef {\n        if (this.overlayRef) {\n            return this.overlayRef;\n        }\n\n        // Create connected position strategy that listens for scroll events to reposition.\n        const strategy = this.overlay.position()\n            .flexibleConnectedTo(this.elementRef)\n            .withTransformOriginOn('.mc-tooltip')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(VIEWPORT_MARGIN)\n            .withPositions([ ...DEFAULT_4_POSITIONS ]);\n\n        const scrollableAncestors = this.scrollDispatcher\n            .getAncestorScrollContainers(this.elementRef);\n\n        strategy.withScrollableContainers(scrollableAncestors);\n\n        strategy.positionChanges.pipe(takeUntil(this.destroyed)).subscribe((change) => {\n            if (this.tooltip) {\n                this.onPositionChange(change);\n                if (change.scrollableViewProperties.isOverlayClipped && this.tooltip.mcVisible) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the tooltip.\n                    this.ngZone.run(() => this.hide());\n                }\n            }\n        });\n\n        this.overlayRef = this.overlay.create({\n            direction: this.direction,\n            positionStrategy: strategy,\n            panelClass: 'mc-tooltip-panel',\n            scrollStrategy: this.scrollStrategy()\n        });\n\n        this.updatePosition();\n\n        this.overlayRef.detachments()\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(() => this.detach());\n\n        return this.overlayRef;\n    }\n\n    detach() {\n        if (this.overlayRef && this.overlayRef.hasAttached()) {\n            this.overlayRef.detach();\n        }\n\n        this.tooltip = null;\n    }\n\n    onPositionChange($event: ConnectedOverlayPositionChange): void {\n        let updatedPlacement = this.mcPlacement;\n        Object.keys(this.availablePositions).some((key) => {\n            if ($event.connectionPair.originX === this.availablePositions[key].originX &&\n                $event.connectionPair.originY === this.availablePositions[key].originY &&\n                $event.connectionPair.overlayX === this.availablePositions[key].overlayX &&\n                $event.connectionPair.overlayY === this.availablePositions[key].overlayY) {\n                updatedPlacement = key;\n\n                return true;\n            }\n\n            return false;\n        });\n        this.updateCompValue('mcPlacement', updatedPlacement);\n\n        if (this.tooltip) {\n            this.tooltip.setClassMap();\n            this.tooltip.markForCheck();\n        }\n\n        this.handlePositioningUpdate();\n    }\n\n    handlePositioningUpdate() {\n        if (!this.overlayRef) {\n            this.overlayRef = this.createOverlay();\n        }\n        if (this.mcPlacement === 'right' || this.mcPlacement === 'left') {\n            const pos =\n                (this.overlayRef.overlayElement.clientHeight -\n                    this.hostView.element.nativeElement.clientHeight) / 2; // tslint:disable-line\n            const currentContainer = this.overlayRef.overlayElement.style.top || '0px';\n            this.overlayRef.overlayElement.style.top =\n                `${parseInt(currentContainer.split('px')[0], 10) + pos - 1}px`;\n            // TODO: обновлять положение стрелки\\указателя\\\"дятла\"\n        }\n    }\n\n    // tslint:disable-next-line:no-any\n    updateCompValue(key: string, value: any): void {\n        if (this.isDynamicTooltip && value) {\n            if (this.tooltip) {\n                this.tooltip[key] = value;\n            }\n        }\n    }\n\n    ngOnInit(): void {\n        this.initElementRefListeners();\n    }\n\n    ngOnDestroy(): void {\n        if (this.overlayRef) {\n            this.overlayRef.dispose();\n        }\n        this.manualListeners.forEach((listener, event) =>\n            this.elementRef.nativeElement.removeEventListener(event, listener));\n        this.manualListeners.clear();\n\n        this.$unsubscribe.next();\n        this.$unsubscribe.complete();\n    }\n\n    handleKeydown(e: KeyboardEvent) {\n        if (this.isTooltipOpen && e.keyCode === ESCAPE) { // tslint:disable-line\n            this.hide();\n        }\n    }\n\n    handleTouchend() {\n        this.hide();\n    }\n\n    initElementRefListeners() {\n        if (this.mcTrigger === 'hover') {\n\n            this.manualListeners\n                .set('mouseenter', () => this.show())\n                .set('mouseleave', () => this.hide())\n                .forEach((listener, event) => this.elementRef.nativeElement.addEventListener(event, listener));\n        }\n\n        if (this.mcTrigger === 'focus') {\n\n            this.manualListeners\n                .set('focus', () => this.show())\n                .set('blur', () => this.hide())\n                .forEach((listener, event) => this.elementRef.nativeElement.addEventListener(event, listener));\n        }\n    }\n\n    show(): void {\n        if (!this.disabled) {\n            if (!this.tooltip) {\n                const overlayRef = this.createOverlay();\n                this.detach();\n\n                this.portal = this.portal || new ComponentPortal(McTooltipComponent, this.hostView);\n\n                this.tooltip = overlayRef.attach(this.portal).instance;\n                this.tooltip.afterHidden()\n                    .pipe(takeUntil(this.destroyed))\n                    .subscribe(() => this.detach());\n                this.isDynamicTooltip = true;\n                const properties = [\n                    'mcTitle',\n                    'mcPlacement',\n                    'mcTrigger',\n                    'mcTooltipDisabled',\n                    'mcMouseEnterDelay',\n                    'mcMouseLeaveDelay',\n                    'mсTooltipClass',\n                    'mcVisible'\n                ];\n                properties.forEach((property) => this.updateCompValue(property, this[ property ]));\n                this.tooltip.mcVisibleChange.pipe(takeUntil(this.$unsubscribe), distinctUntilChanged())\n                    .subscribe((data) => {\n                        this.mcVisible = data;\n                        this.mcVisibleChange.emit(data);\n                        this.isTooltipOpen = data;\n                    });\n            }\n            this.updatePosition();\n            this.tooltip.show();\n        }\n    }\n\n    hide(): void {\n        if (this.tooltip) {\n            this.tooltip.hide();\n        }\n    }\n\n    /** Updates the position of the current tooltip. */\n    updatePosition() {\n        if (!this.overlayRef) {\n            this.overlayRef = this.createOverlay();\n        }\n        const position =\n            this.overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n        const origin = this.getOrigin();\n        const overlay = this.getOverlayPosition();\n\n        position.withPositions([\n            {...origin.main, ...overlay.main},\n            {...origin.fallback, ...overlay.fallback}\n        ]);\n    }\n\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    getOrigin(): {main: IOriginConnectionPosition; fallback: IOriginConnectionPosition} {\n        const position = this.mcPlacement;\n        const isLtr = !this.direction || this.direction.value === 'ltr';\n        let originPosition: IOriginConnectionPosition;\n\n        if (position === 'top' || position === 'bottom') {\n            originPosition = {originX: 'center', originY: position === 'top' ? 'top' : 'bottom'};\n        } else if (\n            position === 'top' ||\n            (position === 'left' && isLtr) ||\n            (position === 'right' && !isLtr)) {\n            originPosition = {originX: 'start', originY: 'center'};\n        } else if (\n            position === 'bottom' ||\n            (position === 'right' && isLtr) ||\n            (position === 'left' && !isLtr)) {\n            originPosition = {originX: 'end', originY: 'center'};\n        } else {\n            throw getMcTooltipInvalidPositionError(position);\n        }\n\n        const {x, y} = this.invertPosition(originPosition.originX, originPosition.originY);\n\n        return {\n            main: originPosition,\n            fallback: {originX: x, originY: y}\n        };\n    }\n\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    getOverlayPosition(): {main: IOverlayConnectionPosition; fallback: IOverlayConnectionPosition} {\n        const position = this.mcPlacement;\n        const isLtr = !this.direction || this.direction.value === 'ltr';\n        let overlayPosition: IOverlayConnectionPosition;\n\n        if (position === 'top') {\n            overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n        } else if (position === 'bottom') {\n            overlayPosition = {overlayX: 'center', overlayY: 'top'};\n        } else if (\n            position === 'top' ||\n            (position === 'left' && isLtr) ||\n            (position === 'right' && !isLtr)) {\n            overlayPosition = {overlayX: 'end', overlayY: 'center'};\n        } else if (\n            position === 'bottom' ||\n            (position === 'right' && isLtr) ||\n            (position === 'left' && !isLtr)) {\n            overlayPosition = {overlayX: 'start', overlayY: 'center'};\n        } else {\n            throw getMcTooltipInvalidPositionError(position);\n        }\n\n        const {x, y} = this.invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n        return {\n            main: overlayPosition,\n            fallback: {overlayX: x, overlayY: y}\n        };\n    }\n\n    /** Inverts an overlay position. */\n    private invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n        let newX: HorizontalConnectionPos = x;\n        let newY: VerticalConnectionPos = y;\n        if (this.mcPlacement === 'top' || this.mcPlacement === 'bottom') {\n            if (y === 'top') {\n                newY = 'bottom';\n            } else if (y === 'bottom') {\n                newY = 'top';\n            }\n        } else {\n            if (x === 'end') {\n                newX = 'start';\n            } else if (x === 'start') {\n                newX = 'end';\n            }\n        }\n\n        return {x: newX, y: newY};\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\n\nimport {\n    McTooltipComponent,\n    McTooltip,\n    MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './tooltip.component';\n\n\n@NgModule({\n    declarations: [McTooltipComponent, McTooltip],\n    exports: [McTooltipComponent, McTooltip],\n    imports: [CommonModule, OverlayModule],\n    providers: [MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],\n    entryComponents: [McTooltipComponent]\n})\nexport class McToolTipModule {\n}\n","import { Version } from '@angular/core';\n\n\nexport const VERSION = new Version('1.0.0-beta.5-76a98ab');\n","export const selectEvents = 'selectEvents';\n","import { InjectionToken } from '@angular/core';\nimport { IScrollStrategy, Overlay, RepositionScrollStrategy } from '@ptsecurity/cdk/overlay';\n\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 224;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 1;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\n/* tslint:disable-next-line:no-magic-numbers */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MC_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-select-scroll-strategy');\n\n/** @docs-private */\nexport function mcSelectScrollStrategyProviderFactory(overlay: Overlay):\n    () => RepositionScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MC_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MC_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: mcSelectScrollStrategyProviderFactory\n};\n","/* tslint:disable:no-empty */\n\nimport {\n    AfterContentInit, AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Input,\n    isDevMode,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList, Renderer2,\n    Self,\n    SimpleChanges,\n    ViewChild, ViewChildren,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { ActiveDescendantKeyManager } from '@ptsecurity/cdk/a11y';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    RIGHT_ARROW,\n    SPACE,\n    UP_ARROW,\n    A\n} from '@ptsecurity/cdk/keycodes';\nimport {\n    CdkConnectedOverlay,\n    ViewportRuler\n} from '@ptsecurity/cdk/overlay';\nimport {\n    countGroupLabelsBeforeOption,\n    getOptionScrollPosition,\n    CanDisable,\n    CanDisableCtor,\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    HasTabIndex,\n    HasTabIndexCtor,\n    MC_OPTION_PARENT_COMPONENT,\n    McOptgroup,\n    McOption,\n    McOptionSelectionChange,\n    mixinDisabled,\n    mixinErrorState,\n    mixinTabIndex,\n    mcSelectAnimations,\n\n    SELECT_PANEL_INDENT_PADDING_X,\n    SELECT_PANEL_MAX_HEIGHT,\n    SELECT_PANEL_PADDING_X,\n    SELECT_PANEL_VIEWPORT_PADDING,\n\n    getMcSelectDynamicMultipleError,\n    getMcSelectNonFunctionValueError,\n    getMcSelectNonArrayValueError,\n    MC_SELECT_SCROLL_STRATEGY\n} from '@ptsecurity/mosaic/core';\nimport { McFormField, McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { McTag } from '@ptsecurity/mosaic/tags';\nimport { defer, merge, Observable, Subject } from 'rxjs';\nimport {\n    filter,\n    map,\n    startWith,\n    switchMap,\n    take,\n    takeUntil,\n    distinctUntilChanged\n} from 'rxjs/operators';\n\n\nlet nextUniqueId = 0;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 2;\n\n/** Change event object that is emitted when the select value has changed. */\nexport class McSelectChange {\n    constructor(public source: McSelect, public value: any) {}\n}\n\nexport class McSelectBase {\n    constructor(\n        public elementRef: ElementRef,\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {}\n}\n\nconst McSelectMixinBase: CanDisableCtor & HasTabIndexCtor & CanUpdateErrorStateCtor &\n    typeof McSelectBase = mixinTabIndex(mixinDisabled(mixinErrorState(McSelectBase)));\n\n\n@Directive({ selector: 'mc-select-trigger' })\nexport class McSelectTrigger {}\n\n\n@Component({\n    selector: 'mc-select',\n    exportAs: 'mcSelect',\n    templateUrl: 'select.html',\n    styleUrls: ['./select.css'],\n    inputs: ['disabled', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'tabIndex',\n        class: 'mc-select',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-select-invalid]': 'errorState',\n        '[class.mc-select-required]': 'required',\n        '(keydown)': 'handleKeydown($event)',\n        '(focus)': 'onFocus()',\n        '(blur)': 'onBlur()',\n        '(window:resize)': 'calculateHiddenItems()'\n    },\n    animations: [\n        mcSelectAnimations.transformPanel,\n        mcSelectAnimations.fadeInContent\n    ],\n    providers: [\n        { provide: McFormFieldControl, useExisting: McSelect },\n        { provide: MC_OPTION_PARENT_COMPONENT, useExisting: McSelect }\n    ]\n})\nexport class McSelect extends McSelectMixinBase implements\n    AfterContentInit, AfterViewInit, OnChanges, OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable,\n    HasTabIndex, McFormFieldControl<any>, CanUpdateErrorState {\n\n    /** A name for this control that can be used by `mc-form-field`. */\n    controlType = 'mc-select';\n\n    hiddenItems: number = 0;\n    oneMoreText: string = '...ещё';\n\n    /** The last measured value for the trigger's client bounding rect. */\n    triggerRect: ClientRect;\n\n    /** The cached font-size of the trigger element. */\n    triggerFontSize = 0;\n\n    /** Deals with the selection logic. */\n    selectionModel: SelectionModel<McOption>;\n\n    /** Manages keyboard events for options in the panel. */\n    keyManager: ActiveDescendantKeyManager<McOption>;\n\n    /** The IDs of child options to be passed to the aria-owns attribute. */\n    optionIds: string = '';\n\n    /** The value of the select panel's transform-origin property. */\n    transformOrigin: string = 'top';\n\n    /** Whether the panel's animation is done. */\n    panelDoneAnimating: boolean = false;\n\n    /** Emits when the panel element is finished transforming in. */\n    panelDoneAnimatingStream = new Subject<string>();\n\n    /** Strategy that will be used to handle scrolling while the select panel is open. */\n    scrollStrategy = this._scrollStrategyFactory();\n\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n    offsetY = 0;\n\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n    positions = [\n        {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top'\n        },\n        {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom'\n        }\n    ];\n\n    @ViewChild('trigger') trigger: ElementRef;\n\n    @ViewChild('panel') panel: ElementRef;\n\n    @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n    @ViewChildren(McTag) tags: QueryList<McTag>;\n\n    /** User-supplied override of the trigger element. */\n    @ContentChild(McSelectTrigger) customTrigger: McSelectTrigger;\n\n    /** All of the defined select options. */\n    @ContentChildren(McOption, { descendants: true }) options: QueryList<McOption>;\n\n    /** All of the defined groups of options. */\n    @ContentChildren(McOptgroup) optionGroups: QueryList<McOptgroup>;\n\n    /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n    @Input() panelClass: string | string[] | Set<string> | { [key: string]: any };\n\n    /** Object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Function used to sort the values in a select in multiple mode.\n     * Follows the same logic as `Array.prototype.sort`.\n     */\n    @Input() sortComparator: (a: McOption, b: McOption, options: McOption[]) => number;\n\n    /** Combined stream of all of the child options' change events. */\n    readonly optionSelectionChanges: Observable<McOptionSelectionChange> = defer(() => {\n        if (this.options) {\n            return merge(...this.options.map((option) => option.onSelectionChange));\n        }\n\n        return this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n    }) as Observable<McOptionSelectionChange>;\n\n    /** Event emitted when the select panel has been toggled. */\n    @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted when the select has been opened. */\n    @Output('opened') readonly openedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => o), map(() => {}));\n\n    /** Event emitted when the select has been closed. */\n    @Output('closed') readonly closedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => !o), map(() => {}));\n\n    /** Event emitted when the selected value has been changed by the user. */\n    @Output() readonly selectionChange: EventEmitter<McSelectChange> = new EventEmitter<McSelectChange>();\n\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    @Input()\n    get placeholder(): string {\n        return this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n\n        this.stateChanges.next();\n    }\n\n    private _placeholder: string;\n\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n\n        this.stateChanges.next();\n    }\n\n    private _required: boolean = false;\n\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        if (this.selectionModel) {\n            throw getMcSelectDynamicMultipleError();\n        }\n\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    private _multiple: boolean = false;\n\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith() {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        /* tslint:disable-next-line:strict-type-predicates */\n        if (typeof fn !== 'function') {\n            throw getMcSelectNonFunctionValueError();\n        }\n\n        this._compareWith = fn;\n\n        if (this.selectionModel) {\n            // A different comparator means the selection could change.\n            this.initializeSelection();\n        }\n    }\n\n    /** Value of the select control. */\n    @Input()\n    get value(): any {\n        return this._value;\n    }\n\n    set value(newValue: any) {\n        if (newValue !== this._value) {\n            this.writeValue(newValue);\n            this._value = newValue;\n        }\n    }\n\n    private _value: any;\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n        this.stateChanges.next();\n    }\n\n    private _id: string;\n\n    /** Whether the select is focused. */\n    get focused(): boolean {\n        return this._focused || this._panelOpen;\n    }\n\n    /**\n     * @deprecated Setter to be removed as this property is intended to be readonly.\n     * @breaking-change 8.0.0\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n\n    private _focused = false;\n\n    get panelOpen(): boolean {\n        return this._panelOpen;\n    }\n\n    private _panelOpen = false;\n\n    /** The scroll position of the overlay panel, calculated to center the selected option. */\n    private scrollTop = 0;\n\n    /** Unique id for this input. */\n    private readonly uid = `mc-select-${nextUniqueId++}`;\n\n    /** Emits whenever the component is destroyed. */\n    private readonly destroy = new Subject<void>();\n\n    constructor(\n        private readonly _viewportRuler: ViewportRuler,\n        private readonly _changeDetectorRef: ChangeDetectorRef,\n        private readonly _ngZone: NgZone,\n        private readonly _renderer: Renderer2,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        elementRef: ElementRef,\n        @Optional() private readonly _dir: Directionality,\n        @Optional() parentForm: NgForm,\n        @Optional() parentFormGroup: FormGroupDirective,\n        @Optional() private readonly _parentFormField: McFormField,\n        @Self() @Optional() public ngControl: NgControl,\n        @Attribute('tabindex') tabIndex: string,\n        @Inject(MC_SELECT_SCROLL_STRATEGY) private readonly _scrollStrategyFactory\n    ) {\n        super(elementRef, defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnInit() {\n        this.selectionModel = new SelectionModel<McOption>(this.multiple);\n        this.stateChanges.next();\n\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this.panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this.panelOpen) {\n                    this.scrollTop = 0;\n                    this.openedChange.emit(true);\n                } else {\n                    this.openedChange.emit(false);\n                    this.panelDoneAnimating = false;\n                    this.overlayDir.offsetX = 0;\n                    this._changeDetectorRef.markForCheck();\n                }\n            });\n    }\n\n    ngAfterContentInit() {\n        this.initKeyManager();\n\n        this.selectionModel.changed\n            .pipe(takeUntil(this.destroy))\n            .subscribe((event) => {\n                event.added.forEach((option) => option.select());\n                event.removed.forEach((option) => option.deselect());\n            });\n\n        this.options.changes\n            .pipe(startWith(null), takeUntil(this.destroy))\n            .subscribe(() => {\n                this.resetOptions();\n                this.initializeSelection();\n            });\n    }\n\n    ngAfterViewInit(): void {\n        this.tags.changes\n            .subscribe(() => {\n                setTimeout(() => this.calculateHiddenItems(), 0);\n            });\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) { this.updateErrorState(); }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes.disabled) {\n            this.stateChanges.next();\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroy.next();\n        this.destroy.complete();\n        this.stateChanges.complete();\n    }\n\n    /** `View -> model callback called when value changes` */\n    _onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when select has been touched` */\n    _onTouched = () => {};\n\n    /** Toggles the overlay panel open or closed. */\n    toggle(): void {\n        if (this.panelOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    /** Opens the overlay panel. */\n    open(): void {\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) { return; }\n\n        this.triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this.triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n        this._panelOpen = true;\n        this.keyManager.withHorizontalOrientation(null);\n        this.calculateOverlayPosition();\n        this.highlightCorrectOption();\n        this._changeDetectorRef.markForCheck();\n\n        // Set the font size on the panel element once it exists.\n        this._ngZone.onStable.asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                if (this.triggerFontSize && this.overlayDir.overlayRef && this.overlayDir.overlayRef.overlayElement) {\n                    this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this.triggerFontSize}px`;\n                }\n            });\n    }\n\n    /** Closes the overlay panel and focuses the host element. */\n    close(): void {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this.keyManager.withHorizontalOrientation(this.isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value: any): void {\n        if (this.options) {\n            this.setSelectionByValue(value);\n        }\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn: (value: any) => void): void {\n        this._onChange = fn;\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn: () => {}): void {\n        this._onTouched = fn;\n    }\n\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    get selected(): McOption | McOption[] {\n        return this.multiple ? this.selectionModel.selected : this.selectionModel.selected[0];\n    }\n\n    get triggerValue(): string {\n        if (this.empty) { return ''; }\n\n        if (this._multiple) {\n            const selectedOptions = this.selectionModel.selected.map((option) => option.viewValue);\n\n            if (this.isRtl()) { selectedOptions.reverse(); }\n\n            return selectedOptions.join(', ');\n        }\n\n        return this.selectionModel.selected[0].viewValue;\n    }\n\n    get triggerValues(): McOption[] {\n        if (this.empty) { return []; }\n\n        if (this._multiple) {\n            const selectedOptions = this.selectionModel.selected;\n\n            if (this.isRtl()) { selectedOptions.reverse(); }\n\n            return selectedOptions;\n        }\n\n        return [this.selectionModel.selected[0]];\n    }\n\n    get empty(): boolean {\n        return !this.selectionModel || this.selectionModel.isEmpty();\n    }\n\n    isRtl(): boolean {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n\n    handleKeydown(event: KeyboardEvent): void {\n        if (!this.disabled) {\n            if (this.panelOpen) {\n                this.handleOpenKeydown(event);\n            } else {\n                this.handleClosedKeydown(event);\n            }\n        }\n    }\n\n    /**\n     * When the panel content is done fading in, the panelDoneAnimating property is\n     * set so the proper class can be added to the panel.\n     */\n    onFadeInDone(): void {\n        this.panelDoneAnimating = this.panelOpen;\n        this._changeDetectorRef.markForCheck();\n    }\n\n    onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    onBlur() {\n        this._focused = false;\n\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    onAttached(): void {\n        this.overlayDir.positionChange\n            .pipe(take(1))\n            .subscribe(() => {\n                this._changeDetectorRef.detectChanges();\n                this.calculateOverlayOffsetX();\n                this.panel.nativeElement.scrollTop = this.scrollTop;\n            });\n    }\n\n    /** Returns the theme to be used on the panel. */\n    getPanelTheme(): string {\n        return this._parentFormField ? `mc-${this._parentFormField.color}` : '';\n    }\n\n    /** Focuses the select element. */\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    calculateOverlayScroll(selectedIndex: number, scrollBuffer: number, maxScroll: number): number {\n        const itemHeight = this.getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n\n        /* tslint:disable-next-line:no-magic-numbers */\n        const halfOptionHeight = itemHeight / 2;\n\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n\n    /** Invoked when an option is clicked. */\n    onRemoveMatcherItem(option: McOption, $event): void {\n        $event.stopPropagation();\n\n        option.deselect();\n    }\n\n    calculateHiddenItems(): void {\n        if (this.empty || !this.multiple) { return; }\n\n        let visibleItems: number = 0;\n        const totalItemsWidth = this.getTotalItemsWidthInMatcher();\n        let totalVisibleItemsWidth: number = 0;\n        const itemMargin: number = 4;\n\n        this.tags.forEach((tag) => {\n            if (tag.nativeElement.offsetTop < tag.nativeElement.offsetHeight) {\n                totalVisibleItemsWidth += tag.nativeElement.getBoundingClientRect().width + itemMargin;\n                visibleItems++;\n            }\n        });\n\n        this.hiddenItems = (this.selected as ArrayLike<McOption>).length - visibleItems;\n\n        if (this.hiddenItems) {\n            const itemsCounter = this.trigger.nativeElement.querySelector('.mc-select__match-hidden-text');\n            const matcherList = this.trigger.nativeElement.querySelector('.mc-select__match-list');\n\n            const itemsCounterShowed = itemsCounter.offsetTop < itemsCounter.offsetHeight;\n            // const itemsCounterWidth: number = itemsCounter.getBoundingClientRect().width;\n            const itemsCounterWidth: number = 86;\n\n            const matcherListWidth: number = matcherList.getBoundingClientRect().width;\n            const matcherWidth: number = matcherListWidth + itemsCounterWidth;\n\n            if (itemsCounterShowed && (totalItemsWidth < matcherWidth)) { this.hiddenItems = 0; }\n\n            if (\n                totalVisibleItemsWidth === matcherListWidth ||\n                (totalVisibleItemsWidth + itemsCounterWidth) < matcherListWidth\n            ) {\n                this._changeDetectorRef.markForCheck();\n\n                return ;\n            } else if (!itemsCounterShowed && (totalItemsWidth + itemsCounterWidth) > matcherWidth) {\n                this.hiddenItems++;\n            }\n        }\n\n        this._changeDetectorRef.markForCheck();\n    }\n\n    private getTotalItemsWidthInMatcher(): number {\n        const triggerClone = this.trigger.nativeElement.cloneNode(true);\n        triggerClone.querySelector('.mc-select__match-hidden-text').remove();\n\n        this._renderer.setStyle(triggerClone, 'position', 'absolute');\n        this._renderer.setStyle(triggerClone, 'visibility', 'hidden');\n        this._renderer.setStyle(triggerClone, 'top', '-100%');\n        this._renderer.setStyle(triggerClone, 'left', '0');\n\n        this._renderer.appendChild(this.trigger.nativeElement, triggerClone);\n\n        let totalItemsWidth: number = 0;\n        const itemMargin: number = 4;\n        triggerClone.querySelectorAll('mc-tag').forEach((item) => {\n            totalItemsWidth += item.getBoundingClientRect().width as number + itemMargin;\n        });\n\n        triggerClone.remove();\n\n        return totalItemsWidth;\n    }\n\n    /** Handles keyboard events while the select is closed. */\n    private handleClosedKeydown(event: KeyboardEvent): void {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n        // Open the select on ALT + arrow key to match the native <select>\n        if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        } else if (!this.multiple) {\n            this.keyManager.onKeydown(event);\n        }\n    }\n\n    /** Handles keyboard events when the selected is open. */\n    private handleOpenKeydown(event: KeyboardEvent): void {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const manager = this.keyManager;\n\n        if (keyCode === HOME || keyCode === END) {\n            event.preventDefault();\n\n            if (keyCode === HOME) {\n                manager.setFirstItemActive();\n            } else {\n                manager.setLastItemActive();\n            }\n\n        } else if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n        } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n            event.preventDefault();\n            manager.activeItem.selectViaInteraction();\n        } else if (this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some((option) => !option.selected);\n            this.options.forEach((option) => {\n                if (hasDeselectedOptions && !option.disabled) {\n                    option.select();\n                } else {\n                    option.deselect();\n                }\n            });\n        } else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n\n            manager.onKeydown(event);\n\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem.selectViaInteraction();\n            }\n        }\n    }\n\n    private initializeSelection(): void {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this.setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n        });\n    }\n\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    private setSelectionByValue(value: any | any[]): void {\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw getMcSelectNonArrayValueError();\n            }\n\n            this.selectionModel.clear();\n            value.forEach((currentValue: any) => this.selectValue(currentValue));\n            this.sortValues();\n        } else {\n            this.selectionModel.clear();\n            const correspondingOption = this.selectValue(value);\n\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this.keyManager.setActiveItem(correspondingOption);\n            }\n        }\n\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    private selectValue(value: any): McOption | undefined {\n        const correspondingOption = this.options.find((option: McOption) => {\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            } catch (error) {\n                if (isDevMode()) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n\n                return false;\n            }\n        });\n\n        if (correspondingOption) {\n            this.selectionModel.select(correspondingOption);\n        }\n\n        return correspondingOption;\n    }\n\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    private initKeyManager() {\n        this.keyManager = new ActiveDescendantKeyManager<McOption>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this.isRtl() ? 'rtl' : 'ltr');\n\n        this.keyManager.tabOut\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            });\n\n        this.keyManager.change\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this._panelOpen && this.panel) {\n                    this.scrollActiveOptionIntoView();\n                } else if (!this._panelOpen && !this.multiple && this.keyManager.activeItem) {\n                    this.keyManager.activeItem.selectViaInteraction();\n                }\n            });\n    }\n\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    private resetOptions(): void {\n        const changedOrDestroyed = merge(this.options.changes, this.destroy);\n\n        this.optionSelectionChanges\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe((event) => {\n                this.onSelect(event.source, event.isUserInput);\n\n                if (event.isUserInput && !this.multiple && this._panelOpen) {\n                    this.close();\n                    this.focus();\n                }\n            });\n\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map((option) => option.stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n                this._changeDetectorRef.markForCheck();\n                this.stateChanges.next();\n            });\n\n        this.setOptionIds();\n    }\n\n    /** Invoked when an option is clicked. */\n    private onSelect(option: McOption, isUserInput: boolean): void {\n        const wasSelected = this.selectionModel.isSelected(option);\n\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this.selectionModel.clear();\n            this.propagateChanges(option.value);\n        } else {\n            if (option.selected) {\n                this.selectionModel.select(option);\n            } else {\n                this.selectionModel.deselect(option);\n            }\n\n            if (isUserInput) {\n                this.keyManager.setActiveItem(option);\n            }\n\n            if (this.multiple) {\n                this.sortValues();\n\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mc-option`.\n                    this.focus();\n                }\n            }\n        }\n\n        if (wasSelected !== this.selectionModel.isSelected(option)) {\n            this.propagateChanges();\n        }\n\n        this.stateChanges.next();\n    }\n\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    private sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n\n            this.selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n\n    /** Emits change event to set the model value. */\n    private propagateChanges(fallbackValue?: any): void {\n        let valueToEmit: any = null;\n\n        if (this.multiple) {\n            valueToEmit = (this.selected as McOption[]).map((option) => option.value);\n        } else {\n            valueToEmit = this.selected ? (this.selected as McOption).value : fallbackValue;\n        }\n\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(new McSelectChange(this, valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /** Records option IDs to pass to the aria-owns property. */\n    private setOptionIds() {\n        this.optionIds = this.options.map((option) => option.id).join(' ');\n    }\n\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    private highlightCorrectOption(): void {\n        if (this.keyManager) {\n            if (this.empty) {\n                this.keyManager.setFirstItemActive();\n            } else {\n                this.keyManager.setActiveItem(this.selectionModel.selected[0]);\n            }\n        }\n    }\n\n    /** Scrolls the active option into view. */\n    private scrollActiveOptionIntoView(): void {\n        const activeOptionIndex = this.keyManager.activeItemIndex || 0;\n        const labelCount = countGroupLabelsBeforeOption(activeOptionIndex, this.options, this.optionGroups);\n\n        this.panel.nativeElement.scrollTop = getOptionScrollPosition(\n            activeOptionIndex + labelCount,\n            this.getItemHeight(),\n            this.panel.nativeElement.scrollTop,\n            SELECT_PANEL_MAX_HEIGHT\n        );\n    }\n\n    /** Gets the index of the provided option in the option list. */\n    private getOptionIndex(option: McOption): number | undefined {\n        /* tslint:disable-next-line */\n        return this.options.reduce((result: number, current: McOption, index: number) => {\n            /* tslint:disable-next-line:strict-type-predicates */\n            return result === undefined ? (option === current ? index : undefined) : result;\n        }, undefined);\n    }\n\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    private calculateOverlayPosition(): void {\n        const itemHeight = this.getItemHeight();\n        const items = this.getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n\n        // If no value is selected we open the popup to the first item.\n        let selectedOptionOffset =\n            this.empty ? 0 : this.getOptionIndex(this.selectionModel.selected[0])!;\n\n        selectedOptionOffset += countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        /* tslint:disable-next-line:no-magic-numbers */\n        const scrollBuffer = panelHeight / 2;\n        this.scrollTop = this.calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this.offsetY = this.calculateOverlayOffsetY();\n\n        this.checkOverlayWithinViewport(maxScroll);\n    }\n\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    private calculateOverlayOffsetX(): void {\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const isRtl = this.isRtl();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const paddingWidth = SELECT_PANEL_PADDING_X * 2;\n        let offsetX: number;\n\n        const selected = this.selectionModel.selected[0] || this.options.first;\n        offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n\n        // Invert the offset in LTR.\n        if (!isRtl) { offsetX *= -1; }\n\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        } else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    private calculateOverlayOffsetY(): number {\n        // const itemHeight = this.getItemHeight();\n        // const optionHeightAdjustment = (itemHeight - this.triggerRect.height) / 2;\n\n        // todo I'm not sure that we will use it\n        return 0;\n        // return Math.round(-optionHeightAdjustment);\n    }\n\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    private checkOverlayWithinViewport(maxScroll: number): void {\n        const itemHeight = this.getItemHeight();\n        const viewportSize = this._viewportRuler.getViewportSize();\n\n        const topSpaceAvailable = this.triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable =\n            viewportSize.height - this.triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n        const panelHeightTop = Math.abs(this.offsetY);\n        const totalPanelHeight =\n            Math.min(this.getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this.triggerRect.height;\n\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this.adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        } else if (panelHeightTop > topSpaceAvailable) {\n            this.adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        } else {\n            this.transformOrigin = this.getOriginBasedOnOption();\n        }\n    }\n\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    private adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this.scrollTop -= distanceBelowViewport;\n        this.offsetY -= distanceBelowViewport;\n        this.transformOrigin = this.getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this.scrollTop <= 0) {\n            this.scrollTop = 0;\n            this.offsetY = 0;\n            this.transformOrigin = `50% bottom 0px`;\n        }\n    }\n\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    private adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number, maxScroll: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this.scrollTop += distanceAboveViewport;\n        this.offsetY += distanceAboveViewport;\n        this.transformOrigin = this.getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this.scrollTop >= maxScroll) {\n            this.scrollTop = maxScroll;\n            this.offsetY = 0;\n            this.transformOrigin = `50% top 0px`;\n\n            return;\n        }\n    }\n\n    /** Sets the transform origin point based on the selected option. */\n    private getOriginBasedOnOption(): string {\n        const itemHeight = this.getItemHeight();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const optionHeightAdjustment = (itemHeight - this.triggerRect.height) / 2;\n        /* tslint:disable-next-line:no-magic-numbers */\n        const originY = Math.abs(this.offsetY) - optionHeightAdjustment + itemHeight / 2;\n\n        return `50% ${originY}px 0px`;\n    }\n\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    private getItemCount(): number {\n        return this.options.length + this.optionGroups.length;\n    }\n\n    /** Calculates the height of the select's options. */\n    private getItemHeight(): number {\n        // todo доделать\n        /* tslint:disable-next-line:no-magic-numbers */\n        return 32;\n        // return this.triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n}\n","export enum TimeParts {\n    hours,\n    minutes,\n    seconds\n}\n\nexport enum TimeFormats {\n    HHmmss = 'HH:mm:ss',\n    HHmm = 'HH:mm'\n}\n\nexport const TIMEFORMAT_PLACEHOLDERS: { [timeFormat: string]: string } = {\n    [TimeFormats.HHmmss]: '  :  :  ',\n    [TimeFormats.HHmm]: '  :  '\n};\n\nexport const DEFAULT_TIME_FORMAT: TimeFormats = TimeFormats.HHmm;\n\nexport const HOURS_MINUTES_SECONDS_REGEXP =\n    new RegExp(/^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]|[0-9]):([0-5][0-9]|[0-9])?$/);\nexport const HOURS_MINUTES_REGEXP = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]|[0-9])?$/;\nexport const HOURS_ONLY_REGEXP = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):?$/;\n\nexport const SECONDS_PER_MINUTE: number = 59;\nexport const MINUTES_PER_HOUR: number = 59;\nexport const HOURS_PER_DAY: number = 23;\n\n// TODO Move it to common CDK\nexport const ARROW_UP_KEYCODE: string = 'ArrowUp';\nexport const ARROW_DOWN_KEYCODE: string = 'ArrowDown';\nexport const ARROW_LEFT_KEYCODE: string = 'ArrowLeft';\nexport const ARROW_RIGHT_KEYCODE: string = 'ArrowRight';\n","import {\n    Directive,\n    DoCheck,\n    ElementRef,\n    forwardRef,\n    Inject,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Optional,\n    Renderer2,\n    Self\n} from '@angular/core';\nimport {\n    ControlValueAccessor,\n    FormControl,\n    FormGroupDirective,\n    NG_VALIDATORS,\n    NgControl,\n    NgForm,\n    ValidationErrors,\n    ValidatorFn,\n    Validators\n} from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { MC_INPUT_VALUE_ACCESSOR } from '@ptsecurity/mosaic/input';\nimport {\n    noop,\n    Subject\n} from 'rxjs';\n\nimport {\n    ARROW_DOWN_KEYCODE,\n    ARROW_LEFT_KEYCODE,\n    ARROW_RIGHT_KEYCODE,\n    ARROW_UP_KEYCODE,\n    DEFAULT_TIME_FORMAT,\n    HOURS_PER_DAY,\n    HOURS_MINUTES_REGEXP,\n    HOURS_MINUTES_SECONDS_REGEXP,\n    HOURS_ONLY_REGEXP,\n    MINUTES_PER_HOUR,\n    SECONDS_PER_MINUTE,\n    TIMEFORMAT_PLACEHOLDERS,\n    TimeFormats,\n    TimeParts\n} from './timepicker.constants';\n\n\nlet uniqueComponentIdSuffix: number = 0;\n\nconst formValidators: WeakMap<FormControl, ValidatorFn | null> = new WeakMap();\nconst formValidatorOnChangeRegistrators: WeakMap<FormControl, () => void> = new WeakMap();\nconst validatorOnChange = (c: FormControl) => {\n    const validatorOnChangeHandler = formValidatorOnChangeRegistrators.get(c);\n\n    if (validatorOnChangeHandler !== undefined) { validatorOnChangeHandler(); }\n};\n\nexport class McTimepickerBase {\n    constructor(\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl) { }\n}\n\n// tslint:disable-next-line naming-convention\nexport const McTimepickerMixinBase:\n    CanUpdateErrorStateCtor &\n    typeof McTimepickerBase = mixinErrorState(McTimepickerBase);\n\n@Directive({\n    selector: 'input[mcTimepicker]',\n    exportAs: 'mcTimepickerInput',\n    host: {\n        class: 'mc-timepicker mc-input',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '[attr.time-format]': 'timeFormat',\n        '[attr.min-time]': 'minTime',\n        '[attr.max-time]': 'maxTime',\n        '[attr.value]': 'value',\n        '[attr.aria-invalid]': 'errorState',\n        '(blur)': 'onBlur()',\n        '(focus)': 'focusChanged(true)',\n        '(input)': 'onInput()',\n        '(paste)': 'onPaste($event)',\n        '(keydown)': 'onKeyDown($event)'\n    },\n    providers: [\n        {\n            provide: NG_VALIDATORS,\n            useValue: {\n                validate(c: FormControl) {\n                    // TODO This is `workaround` to bind singleton-like Validator implementation to\n                    // context of each validated component. This MUST be realized in proper way!\n                    if (this.__validatorOnChangeHandler !== undefined) {\n                        formValidatorOnChangeRegistrators.set(c, this.__validatorOnChangeHandler);\n                        this.__validatorOnChangeHandler = undefined;\n                    }\n                    const validator = formValidators.get(c);\n\n                    return validator ? validator(c) : null;\n                },\n                registerOnValidatorChange(fn: () => void): void {\n                    this.__validatorOnChangeHandler = fn;\n                }\n            },\n            multi: true\n        },\n        {\n            provide: McFormFieldControl,\n            useExisting: forwardRef(() => McTimepicker)\n        }\n    ]\n\n})\nexport class McTimepicker extends McTimepickerMixinBase\n    implements McFormFieldControl<any>,\n        OnChanges,\n        OnDestroy,\n        DoCheck,\n        CanUpdateErrorState,\n        ControlValueAccessor {\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-timepicker';\n\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) { return this.ngControl.disabled; }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n        }\n\n        this.stateChanges.next();\n    }\n\n    @Input()\n    get id(): string { return this._id; }\n\n    set id(value: string) { this._id = value || this.uid; }\n\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean { return this._required; }\n\n    set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string { return this.inputValueAccessor.value; }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this.inputValueAccessor.value = value;\n            this.applyInputChanges();\n        }\n    }\n\n    @Input('time-format')\n    get timeFormat(): TimeFormats { return this._timeFormat; }\n\n    set timeFormat(formatValue: TimeFormats) {\n        this._timeFormat = Object\n            .keys(TimeFormats)\n            .map((timeFormatKey) => TimeFormats[timeFormatKey])\n            .indexOf(formatValue) > -1 ? formatValue : DEFAULT_TIME_FORMAT;\n\n        validatorOnChange(<FormControl> this.ngControl.control);\n        this.placeholder = TIMEFORMAT_PLACEHOLDERS[this._timeFormat];\n    }\n\n    @Input('min-time')\n    get minTime(): string | null { return this._minTime; }\n\n    set minTime(minValue: string | null) {\n        this._minTime = minValue;\n        this.minDateTime = minValue !== null ? this.getDateFromTimeString(minValue) : undefined;\n        validatorOnChange(<FormControl> this.ngControl.control);\n    }\n\n    @Input('max-time')\n    get maxTime(): string | null { return this._maxTime; }\n\n    set maxTime(maxValue: string | null) {\n        this._maxTime = maxValue;\n        this.maxDateTime = maxValue !== null ? this.getDateFromTimeString(maxValue) : undefined;\n        validatorOnChange(<FormControl> this.ngControl.control);\n    }\n\n    private _id: string;\n    private readonly uid = `mc-timepicker-${uniqueComponentIdSuffix++}`;\n    private _disabled: boolean;\n    private _required: boolean;\n    private previousNativeValue: any;\n    private readonly inputValueAccessor: { value: any };\n    private onChange: (value: any) => void;\n    private onTouched: () => void;\n    private _timeFormat: TimeFormats;\n    private _minTime: string | null = null;\n    private minDateTime: Date | undefined;\n    private _maxTime: string | null = null;\n    private maxDateTime: Date | undefined;\n    private currentDateTimeInput: Date | undefined;\n\n    constructor(private readonly elementRef: ElementRef,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() parentForm: NgForm,\n                @Optional() parentFormGroup: FormGroupDirective,\n                defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n                private readonly renderer: Renderer2) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this.inputValueAccessor = inputValueAccessor || this.elementRef.nativeElement;\n\n        this.previousNativeValue = this.value;\n        this.onChange = noop;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n\n        this.placeholder = TIMEFORMAT_PLACEHOLDERS[DEFAULT_TIME_FORMAT];\n\n        // Instead of NG_VALUE_ACCESSOR (https://github.com/angular/material2/issues/8158#issuecomment-344618103)\n        if (this.ngControl) { this.ngControl.valueAccessor = this; }\n\n        // Substitute initial empty validator with validator linked to directive object instance (workaround)\n\n        formValidators.set(\n            <FormControl> this.ngControl.control,\n            Validators.compose([\n                () => this.parseValidator(),\n                () => this.minTimeValidator(),\n                () => this.maxTimeValidator()\n            ])\n        );\n    }\n\n    ngOnChanges(): void {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy(): void {\n        this.stateChanges.complete();\n    }\n\n    ngDoCheck(): void {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this.dirtyCheckNativeValue();\n    }\n\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    focusChanged(isFocused: boolean): void {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.onTouched();\n            this.stateChanges.next();\n        }\n    }\n\n    onBlur() {\n        this.applyInputChanges();\n        this.focusChanged(false);\n    }\n\n    onPaste($event) {\n        $event.preventDefault();\n        const clipboardUserInput: string = $event.clipboardData.getData('text');\n\n        if (this.getDateFromTimeString(clipboardUserInput) === undefined) { return; }\n\n        this.elementRef.nativeElement.value = clipboardUserInput;\n        this.onInput();\n    }\n\n    onInput() {\n        const initialCursorStart: number = this.elementRef.nativeElement.selectionStart;\n        const initialCursorEnd: number = this.elementRef.nativeElement.selectionEnd;\n        let isAutocompleteTriggered: boolean = false;\n\n        const {\n            hoursOnly,\n            hoursAndMinutes,\n            hoursAndMinutesAndSeconds\n        } = this.getParsedTimeParts(this.elementRef.nativeElement.value);\n\n        // tslint:disable no-magic-numbers\n        if (hoursOnly &&\n            hoursOnly[1] &&\n            hoursOnly[1].length === 2) {\n            isAutocompleteTriggered = true;\n        } else if (hoursAndMinutes &&\n            hoursAndMinutes[1].length === 1 &&\n            hoursAndMinutes[2] &&\n            hoursAndMinutes[2].length === 2) {\n            isAutocompleteTriggered = true;\n        } else if (hoursAndMinutesAndSeconds &&\n            hoursAndMinutesAndSeconds[1].length === 2 &&\n            hoursAndMinutesAndSeconds[2].length === 2 &&\n            hoursAndMinutesAndSeconds[3] &&\n            hoursAndMinutesAndSeconds[3].length === 2) {\n            isAutocompleteTriggered = true;\n        }\n        // tslint:enable no-magic-numbers\n\n        this.applyInputChanges({ doTimestringReformat: isAutocompleteTriggered });\n\n        this.elementRef.nativeElement.selectionStart = initialCursorStart;\n        this.elementRef.nativeElement.selectionEnd = initialCursorEnd;\n\n        if (isAutocompleteTriggered && this.ngControl.errors === null) {\n            this.createSelectionOfTimeComponentInInput(initialCursorStart + 1);\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this.elementRef.nativeElement.value && !this.isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    writeValue(value: Date | null): void {\n        if (value !== null) {\n            this.renderer.setProperty(this.elementRef.nativeElement,\n                'value',\n                this.getTimeStringFromDate(value, this.timeFormat)\n            );\n        }\n        this.onChange(value || null);\n        this.applyInputChanges();\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n\n        const keyCode: string = this.getKeyCode(event);\n\n        if (keyCode === ARROW_UP_KEYCODE || keyCode === ARROW_DOWN_KEYCODE) {\n            this.upDownTimeByArrowKeys(event);\n        }\n        if (keyCode === ARROW_LEFT_KEYCODE || keyCode === ARROW_RIGHT_KEYCODE) {\n            this.switchSelectionBetweenTimeparts(event);\n        }\n    }\n\n    registerOnChange(fn: (value: Date) => void): void {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    /** Does some manual dirty checking on the native input `value` property. */\n    private dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this.previousNativeValue !== newValue) {\n            this.previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Checks whether the input is invalid based on the native validation. */\n    private isBadInput(): boolean {\n        const validity = (<HTMLInputElement> this.elementRef.nativeElement).validity;\n\n        return validity && validity.badInput;\n    }\n\n    private applyInputChanges(applyParams: {\n        changedTime?: Date;\n        doTimestringReformat?: boolean;\n    } = {}): void {\n        const { changedTime, doTimestringReformat = true } = applyParams;\n        const timeToApply: Date | undefined = changedTime ||\n            this.getDateFromTimeString(this.elementRef.nativeElement.value);\n        this.currentDateTimeInput = timeToApply;\n\n        if (doTimestringReformat && timeToApply !== undefined) {\n            const selectionStart: number = this.elementRef.nativeElement.selectionStart;\n            const selectionEnd: number = this.elementRef.nativeElement.selectionEnd;\n            this.renderer.setProperty(\n                this.elementRef.nativeElement,\n                'value',\n                this.getTimeStringFromDate(timeToApply, this.timeFormat));\n            this.elementRef.nativeElement.selectionStart = selectionStart;\n            this.elementRef.nativeElement.selectionEnd = selectionEnd;\n        }\n\n        (<FormControl> this.ngControl.control).updateValueAndValidity();\n        const result = this.ngControl.errors === null && timeToApply !== undefined ? timeToApply : null;\n        this.onChange(result);\n        this.stateChanges.next();\n    }\n\n    private upDownTimeByArrowKeys(event: KeyboardEvent): void {\n        event.preventDefault();\n\n        let changedTime: Date | undefined = this.currentDateTimeInput;\n        if (changedTime !== undefined) {\n            const cursorPos = this.elementRef.nativeElement.selectionStart;\n\n            const modifiedTimePart = this.getTimeEditMetrics(cursorPos)\n                .modifiedTimePart;\n            const keyCode: string = this.getKeyCode(event);\n            if (keyCode === ARROW_UP_KEYCODE) { changedTime = this.incrementTime(changedTime, modifiedTimePart); }\n            if (keyCode === ARROW_DOWN_KEYCODE) { changedTime = this.decrementTime(changedTime, modifiedTimePart); }\n            this.applyInputChanges({ changedTime });\n            this.createSelectionOfTimeComponentInInput(cursorPos);\n        }\n    }\n\n    private switchSelectionBetweenTimeparts(event: KeyboardEvent): void {\n        const changedTime: Date | undefined = this.currentDateTimeInput;\n        const keyCode: string = this.getKeyCode(event);\n\n        if (changedTime !== undefined) {\n            let cursorPos: number = this.elementRef.nativeElement.selectionStart;\n            if (keyCode === ARROW_LEFT_KEYCODE) {\n                cursorPos = this.getCursorPositionOfPrevTimePartStart(cursorPos, this.elementRef.nativeElement.value);\n            } else if (keyCode === ARROW_RIGHT_KEYCODE) {\n                cursorPos = this.getCursorPositionOfNextTimePartStart(cursorPos, this.elementRef.nativeElement.value);\n            }\n            this.createSelectionOfTimeComponentInInput(cursorPos);\n        }\n    }\n\n    /**\n     * @description Microsoft EDGE doesn't support KeyboaedEvent.code thus we need this helper\n     */\n    private getKeyCode(event: KeyboardEvent): string {\n        return event.code || event.key;\n    }\n\n    private createSelectionOfTimeComponentInInput(cursorPos: number): void {\n        setTimeout(() => {\n            const newEditParams = this.getTimeEditMetrics(cursorPos);\n            this.elementRef.nativeElement.selectionStart = newEditParams.cursorStartPosition;\n            this.elementRef.nativeElement.selectionEnd = newEditParams.cursorEndPosition;\n        });\n    }\n\n    private incrementTime(dateVal: Date,\n                          whatToIncrement: TimeParts = TimeParts.seconds): Date {\n        let { hours, minutes, seconds } = this.getTimeDigitsFromDate(dateVal);\n\n        switch (whatToIncrement) {\n            case TimeParts.hours:\n                hours++;\n                break;\n            case TimeParts.minutes:\n                minutes++;\n                break;\n            case TimeParts.seconds:\n                seconds++;\n                break;\n            default:\n        }\n\n        if (seconds > SECONDS_PER_MINUTE) { seconds = 0; }\n\n        if (minutes > MINUTES_PER_HOUR) { minutes = 0; }\n\n        if (hours > HOURS_PER_DAY) { hours = 0; }\n\n        return <Date> this.getDateFromTimeDigits(hours, minutes, seconds);\n    }\n\n    /**\n     * @description Decrement part of time\n     */\n    private decrementTime(dateVal: Date,\n                          whatToDecrement: TimeParts = TimeParts.seconds): Date {\n        let { hours, minutes, seconds } = this.getTimeDigitsFromDate(dateVal);\n\n        switch (whatToDecrement) {\n            case TimeParts.hours:\n                hours--;\n                break;\n            case TimeParts.minutes:\n                minutes--;\n                break;\n            case TimeParts.seconds:\n                seconds--;\n                break;\n            default:\n        }\n\n        if (seconds < 0) { seconds = SECONDS_PER_MINUTE; }\n\n        if (minutes < 0) { minutes = MINUTES_PER_HOUR; }\n\n        if (hours < 0) { hours = HOURS_PER_DAY; }\n\n        return <Date> this.getDateFromTimeDigits(hours, minutes, seconds);\n    }\n\n    private getCursorPositionOfPrevTimePartStart(cursorPos: number, timeString: string): number {\n        return cursorPos === 0 ? timeString.length : cursorPos - 1;\n    }\n\n    private getCursorPositionOfNextTimePartStart(cursorPos: number,\n                                                 timeString: string,\n                                                 timeDevider: string = ':'): number {\n        const nextDividerPos: number = timeString.indexOf(timeDevider, cursorPos);\n\n        return nextDividerPos !== undefined ? nextDividerPos + 1 : 0;\n    }\n\n    /**\n     * @description Get params for arrow-keys (up/down) time valie edit.\n     * @param cursorPosition Current cursor position in timeString\n     */\n    private getTimeEditMetrics(cursorPosition: number): {\n        modifiedTimePart: TimeParts;\n        cursorStartPosition: number;\n        cursorEndPosition: number;\n    } {\n        const timeString: string = this.elementRef.nativeElement.value;\n        let modifiedTimePart: TimeParts;\n        let cursorStartPosition: number;\n        let cursorEndPosition: number;\n        const hoursIndex = 0;\n        const minutesIndex = timeString.indexOf(':', hoursIndex + 1);\n        const secondsIndex = minutesIndex !== -1 ? timeString.indexOf(':', minutesIndex + 1) : -1;\n\n        if (secondsIndex !== -1 && cursorPosition > secondsIndex) {\n            modifiedTimePart = TimeParts.seconds;\n            cursorStartPosition = secondsIndex + 1;\n            cursorEndPosition = timeString.length;\n        } else if (minutesIndex !== -1 && cursorPosition > minutesIndex) {\n            modifiedTimePart = TimeParts.minutes;\n            cursorStartPosition = minutesIndex + 1;\n            cursorEndPosition = secondsIndex > -1 ? secondsIndex : timeString.length;\n        } else {\n            modifiedTimePart = TimeParts.hours;\n            cursorStartPosition = hoursIndex;\n            cursorEndPosition = minutesIndex !== -1 ? minutesIndex : timeString.length;\n        }\n\n        return {\n            modifiedTimePart,\n            cursorStartPosition,\n            cursorEndPosition\n        };\n    }\n\n    /**\n     * @description Create time string for displaying inside input element of UI\n     */\n    private getTimeStringFromDate(tempVal: Date,\n                                  timeFormat: TimeFormats = DEFAULT_TIME_FORMAT): string {\n        const hours: string = this.getNumberWithLeadingZero(tempVal.getHours());\n        const minutes: string = this.getNumberWithLeadingZero(tempVal.getMinutes());\n        const seconds: string = this.getNumberWithLeadingZero(tempVal.getSeconds());\n\n        const formattedTimeGenerators = {\n            [TimeFormats.HHmm]: () => `${hours}:${minutes}`,\n            [TimeFormats.HHmmss]: () => `${hours}:${minutes}:${seconds}`\n        };\n\n        return formattedTimeGenerators[timeFormat]();\n    }\n\n    private getParsedTimeParts(timeString: string): {\n        hoursOnly: any;\n        hoursAndMinutes: any;\n        hoursAndMinutesAndSeconds: any;\n    } {\n        const hoursAndMinutesAndSeconds = timeString.match(HOURS_MINUTES_SECONDS_REGEXP);\n        const hoursAndMinutes = timeString.match(HOURS_MINUTES_REGEXP);\n        const hoursOnly = timeString.match(HOURS_ONLY_REGEXP);\n\n        return {\n            hoursOnly,\n            hoursAndMinutes,\n            hoursAndMinutesAndSeconds\n        };\n    }\n\n    /**\n     * @description Create Date object from separate parts of time\n     */\n    private getDateFromTimeDigits(hours: number, minutes: number, seconds: number = 0): Date | undefined {\n        return this.getDateFromTimeString(`${hours}:${minutes}:${seconds}`);\n    }\n\n    private getDateFromTimeString(timeString: string | undefined): Date | undefined {\n        // TODO Use moment-js\n        if (timeString === undefined) { return; }\n\n        const {\n            hoursOnly,\n            hoursAndMinutes,\n            hoursAndMinutesAndSeconds\n        } = this.getParsedTimeParts(timeString);\n\n        if (timeString.trim().length === 0 ||\n            hoursOnly === null && hoursAndMinutes === null && hoursAndMinutesAndSeconds === null) {\n            return;\n        }\n\n        // tslint:disable no-magic-numbers\n        let hours: number = 0;\n        let minutes: number = 0;\n        let seconds: number = 0;\n\n        if (hoursOnly) {\n            hours = Number(hoursOnly[1]);\n        } else if (hoursAndMinutes) {\n            hours = Number(hoursAndMinutes[1]);\n            minutes = Number(hoursAndMinutes[2]);\n        } else if (hoursAndMinutesAndSeconds) {\n            hours = Number(hoursAndMinutesAndSeconds[1]);\n            minutes = Number(hoursAndMinutesAndSeconds[2]);\n            seconds = Number(hoursAndMinutesAndSeconds[3]);\n        }\n        // const timestamp: number = Date.parse(fullDateString);\n        const resultDate: Date = new Date(1970, 0, 1, hours, minutes, seconds);\n        // tslint:enable no-magic-numbers\n\n        return isNaN(resultDate.getTime()) ? undefined : resultDate;\n    }\n\n    private getNumberWithLeadingZero(digit: number): string {\n        const MAX_DIGIT_WITH_LEADING_ZERO: number = 9;\n\n        return digit > MAX_DIGIT_WITH_LEADING_ZERO ? `${digit}` : `0${digit}`;\n    }\n\n    private getTimeDigitsFromDate(dateVal: Date): { hours: number; minutes: number; seconds: number } {\n        return {\n            hours: dateVal.getHours(),\n            minutes: dateVal.getMinutes(),\n            seconds: dateVal.getSeconds()\n        };\n    }\n\n    private parseValidator(): ValidationErrors | null {\n        return this.currentDateTimeInput === undefined ?\n            { mcTimepickerParse: { text: this.elementRef.nativeElement.value } } :\n            null;\n    }\n\n    private minTimeValidator(): ValidationErrors | null {\n\n        if (this.currentDateTimeInput !== undefined &&\n            this.minDateTime !== undefined &&\n            this.isTimeLowerThenMin(this.currentDateTimeInput)) {\n            return { mcTimepickerLowerThenMintime: { text: this.elementRef.nativeElement.value } };\n        }\n\n        return null;\n    }\n\n    private maxTimeValidator(): ValidationErrors | null {\n        if (this.currentDateTimeInput !== undefined &&\n            this.maxDateTime !== undefined &&\n            this.isTimeGreaterThenMax(this.currentDateTimeInput)) {\n            return { mcTimepickerHigherThenMaxtime: { text: this.elementRef.nativeElement.value } };\n        }\n\n        return null;\n    }\n\n    private isTimeLowerThenMin(timeToCompare: Date): boolean {\n        return timeToCompare.getTime() - (<Date> this.minDateTime).getTime() < 0;\n    }\n\n    private isTimeGreaterThenMax(timeToCompare: Date): boolean {\n        return timeToCompare.getTime() - (<Date> this.maxDateTime).getTime() >= 0;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McTimepicker } from './timepicker';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        FormsModule\n    ],\n    declarations: [\n        McTimepicker\n    ],\n    exports: [\n        McTimepicker\n    ]\n})\nexport class McTimepickerModule {}\n","import { InjectionToken } from '@angular/core';\n\n\n/** Injection token that can be used to access the data that was passed in to a sidepanel. */\nexport const MC_SIDEPANEL_DATA = new InjectionToken<any>('McSidepanelData');\n\nexport enum McSidepanelPosition {\n    Right = 'right',\n    Left = 'left',\n    Top = 'top',\n    Bottom = 'bottom'\n}\n\nexport class McSidepanelConfig<D = any> {\n    /** ID for the sidepanel. If omitted, a unique one will be generated. */\n    id?: string;\n\n    /** Data being injected into the child component. */\n    data?: D | null = null;\n\n    position?: McSidepanelPosition = McSidepanelPosition.Right;\n\n    /** Whether the sidepanel has a backdrop. */\n    hasBackdrop?: boolean = true;\n\n    /** When we open multiple sidepanels, backdrop appears only once, except cases then this flag is true. */\n    requiredBackdrop?: boolean = false;\n\n    /** Whether the user can use escape or clicking outside to close the sidepanel. */\n    disableClose?: boolean = false;\n\n    /** Custom class for the overlay pane. */\n    overlayPanelClass?: string | string[] = '';\n}\n","import { animate, AnimationTriggerMetadata, state, style, transition, trigger } from '@angular/animations';\nimport { AnimationCurves } from '@ptsecurity/mosaic/core';\n\nimport { McSidepanelPosition } from './sidepanel-config';\n\n\nexport enum McSidepanelAnimationState {\n    Void = 'void',\n    Visible = 'visible',\n    Hidden = 'hidden'\n}\n\n// TODO Find a way to use dynamic keys and avoid error \"Expression form not supported.\"\n// tslint:disable-next-line\nexport const mcSidepanelTransformAnimation: Record<McSidepanelPosition, { in: string; out: string }> = {\n    right: { in: 'translateX(100%)', out: 'translateX(0%)' },\n    left: { in: 'translateX(-100%)', out: 'translateX(0%)' },\n    top: { in: 'translateY(-100%)', out: 'translateY(0%)' },\n    bottom: { in: 'translateY(100%)', out: 'translateY(0%)' }\n};\n\nexport const mcSidepanelAnimations: {\n    readonly sidepanelState: AnimationTriggerMetadata;\n} = {\n    sidepanelState: trigger('state', [\n        state('hidden',\n            style({ transform: '{{transformIn}}' }),\n            { params: { transformIn: mcSidepanelTransformAnimation[McSidepanelPosition.Right].in }}\n        ),\n        state('visible',\n            style({ transform: '{{transformOut}}' }),\n            { params: { transformOut: mcSidepanelTransformAnimation[McSidepanelPosition.Right].out }}\n        ),\n        transition('visible => void, visible => hidden',\n            animate(`200ms ${AnimationCurves.AccelerationCurve}`)),\n        transition('void => visible',\n            animate(`200ms ${AnimationCurves.DecelerationCurve}`))\n    ])\n};\n","import { AnimationEvent } from '@angular/animations';\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ComponentRef,\n    ElementRef,\n    EmbeddedViewRef,\n    EventEmitter, Inject, InjectionToken,\n    OnDestroy,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal } from '@ptsecurity/cdk/portal';\n\nimport {\n    mcSidepanelAnimations,\n    McSidepanelAnimationState,\n    mcSidepanelTransformAnimation\n} from './sidepanel-animations';\n\nimport { McSidepanelConfig, McSidepanelPosition } from './sidepanel-config';\n\n\nexport const MC_SIDEPANEL_WITH_INDENT =\n    new InjectionToken<boolean>('mc-sidepanel-with-indent');\n\nexport const MC_SIDEPANEL_WITH_SHADOW =\n    new InjectionToken<boolean>('mc-sidepanel-with-shadow');\n\n@Component({\n    selector: 'mc-sidepanel-container',\n    templateUrl: './sidepanel-container.component.html',\n    styleUrls: ['./sidepanel.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    animations: [mcSidepanelAnimations.sidepanelState],\n    host: {\n        class: 'mc-sidepanel-container',\n        tabindex: '-1',\n        role: 'dialog',\n        'aria-modal': 'true',\n        '[attr.id]': 'id',\n        '[@state]': `{\n            value: animationState,\n            params: animationTransform\n        }`,\n        '(@state.start)': 'onAnimation($event)',\n        '(@state.done)': 'onAnimation($event)'\n    }\n})\nexport class McSidepanelContainerComponent extends BasePortalOutlet implements OnDestroy {\n    /** ID for the container DOM element. */\n    id: string;\n\n    /** The portal outlet inside of this container into which the content will be loaded. */\n    @ViewChild(CdkPortalOutlet) portalOutlet: CdkPortalOutlet;\n\n    /** The state of the sidepanel animations. */\n    animationState: McSidepanelAnimationState = McSidepanelAnimationState.Void;\n\n    animationTransform: { transformIn: string; transformOut: string };\n\n    /** Emits whenever the state of the animation changes. */\n    animationStateChanged = new EventEmitter<AnimationEvent>();\n\n    /** Whether the component has been destroyed. */\n    private destroyed: boolean;\n\n    constructor(\n        private elementRef: ElementRef<HTMLElement>,\n        private changeDetectorRef: ChangeDetectorRef,\n        public sidepanelConfig: McSidepanelConfig,\n        @Inject(MC_SIDEPANEL_WITH_INDENT) public withIndent: boolean,\n        @Inject(MC_SIDEPANEL_WITH_SHADOW) public withShadow: boolean) {\n        super();\n    }\n\n    ngOnDestroy(): void {\n        this.destroyed = true;\n    }\n\n    /** Attach a component portal as content to this sidepanel container. */\n    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n        this.validatePortalAttached();\n        this.setAnimation();\n        this.setPanelClass();\n\n        return this.portalOutlet.attachComponentPortal(portal);\n    }\n\n    /** Attach a template portal as content to this sidepanel container. */\n    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n        this.validatePortalAttached();\n        this.setAnimation();\n        this.setPanelClass();\n\n        return this.portalOutlet.attachTemplatePortal(portal);\n    }\n\n    /** Begin animation of the sidepanel entrance into view. */\n    enter(): void {\n        if (!this.destroyed) {\n            this.animationState = McSidepanelAnimationState.Visible;\n            this.changeDetectorRef.detectChanges();\n        }\n    }\n\n    /** Begin animation of the sidepanel exiting from view. */\n    exit(): void {\n        if (!this.destroyed) {\n            this.animationState = McSidepanelAnimationState.Hidden;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    onAnimation(event: AnimationEvent) {\n        this.animationStateChanged.emit(event);\n    }\n\n    private setAnimation() {\n        const position: McSidepanelPosition = this.sidepanelConfig.position!;\n\n        this.animationTransform = {\n            transformIn: mcSidepanelTransformAnimation[position].in,\n            transformOut: mcSidepanelTransformAnimation[position].out\n        };\n    }\n\n    private setPanelClass() {\n        const element: HTMLElement = this.elementRef.nativeElement;\n        const position: McSidepanelPosition = this.sidepanelConfig.position!;\n\n        element.classList.add(`mc-sidepanel-container_${position}`);\n\n        if (this.withShadow) {\n            element.classList.add('mc-sidepanel-container_shadowed');\n        }\n    }\n\n    private validatePortalAttached() {\n        if (this.portalOutlet.hasAttached()) {\n            throw Error('Attempting to attach sidepanel content after content is already attached');\n        }\n    }\n}\n","import { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { merge, Observable, Subject } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\n\nimport { McSidepanelAnimationState } from './sidepanel-animations';\nimport { McSidepanelConfig } from './sidepanel-config';\nimport { McSidepanelContainerComponent } from './sidepanel-container.component';\n\n\n// Counter for unique sidepanel ids.\nlet uniqueId = 0;\n\nexport class McSidepanelRef<T = any, R = any> {\n    readonly id: string;\n\n    /** Instance of the component making up the content of the sidepanel. */\n    instance: T;\n\n    /** Subject for notifying the user that the sidepanel has been closed and dismissed. */\n    private readonly afterClosed$ = new Subject<R | undefined>();\n\n    /** Subject for notifying the user that the sidepanel has opened and appeared. */\n    private readonly afterOpened$ = new Subject<void>();\n\n    /** Result to be passed down to the `afterDismissed` stream. */\n    private result: R | undefined;\n\n    constructor(\n        public containerInstance: McSidepanelContainerComponent,\n        private overlayRef: OverlayRef,\n        public config: McSidepanelConfig) {\n\n        this.id = this.config.id || `mc-sidepanel-${uniqueId++}`;\n        this.containerInstance.id = this.id;\n\n        // Emit when opening animation completes\n        containerInstance.animationStateChanged.pipe(\n            filter(\n                (event) => event.phaseName === 'done' && event.toState === McSidepanelAnimationState.Visible\n            ),\n            take(1)\n        ).subscribe(() => {\n            this.afterOpened$.next();\n            this.afterOpened$.complete();\n        });\n\n        // Dispose overlay when closing animation is complete\n        containerInstance.animationStateChanged.pipe(\n            filter(\n                (event) => event.phaseName === 'done' && event.toState === McSidepanelAnimationState.Hidden\n            ),\n            take(1)\n        ).subscribe(() => {\n            overlayRef.dispose();\n            this.afterClosed$.next(this.result);\n            this.afterClosed$.complete();\n        });\n\n        if (!containerInstance.sidepanelConfig.disableClose) {\n            merge(\n                overlayRef.backdropClick(),\n                overlayRef.keydownEvents().pipe(\n                    // tslint:disable:deprecation\n                    // keyCode is deprecated, but IE11 and Edge don't support code property, which we need use instead\n                    filter((event) => event.keyCode === ESCAPE)\n                )\n            ).subscribe(() => this.close());\n        }\n    }\n\n    close(result?: R): void {\n        if (!this.afterClosed$.closed) {\n            // Transition the backdrop in parallel to the sidepanel.\n            this.containerInstance.animationStateChanged.pipe(\n                filter((event) => event.phaseName === 'done'),\n                take(1)\n            ).subscribe(() => this.overlayRef.detachBackdrop());\n\n            this.result = result;\n            this.containerInstance.exit();\n        }\n    }\n\n    /** Gets an observable that is notified when the sidepanel is finished closing. */\n    afterClosed(): Observable<R | undefined> {\n        return this.afterClosed$.asObservable();\n    }\n\n    /** Gets an observable that is notified when the sidepanel has opened and appeared. */\n    afterOpened(): Observable<void> {\n        return this.afterOpened$.asObservable();\n    }\n}\n","import {\n    ComponentRef,\n    Inject,\n    Injectable,\n    InjectionToken,\n    Injector, OnDestroy,\n    Optional,\n    SkipSelf,\n    TemplateRef\n} from '@angular/core';\nimport { Overlay, OverlayConfig, OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal, IComponentType, PortalInjector, TemplatePortal } from '@ptsecurity/cdk/portal';\n\nimport { MC_SIDEPANEL_DATA, McSidepanelConfig } from './sidepanel-config';\nimport {\n    McSidepanelContainerComponent,\n    MC_SIDEPANEL_WITH_INDENT,\n    MC_SIDEPANEL_WITH_SHADOW\n} from './sidepanel-container.component';\nimport { McSidepanelRef } from './sidepanel-ref';\n\n\n/** Injection token that can be used to specify default sidepanel options. */\nexport const MC_SIDEPANEL_DEFAULT_OPTIONS =\n    new InjectionToken<McSidepanelConfig>('mc-sidepanel-default-options');\n\n@Injectable()\nexport class McSidepanelService implements OnDestroy {\n    private openedSidepanelsAtThisLevel: McSidepanelRef[] = [];\n\n    /** Keeps track of the currently-open sidepanels. */\n    get openedSidepanels(): McSidepanelRef[] {\n        return this.parentSidepanelService ? this.parentSidepanelService.openedSidepanels :\n            this.openedSidepanelsAtThisLevel;\n    }\n\n    constructor(\n        private overlay: Overlay,\n        private injector: Injector,\n        @Optional() @Inject(MC_SIDEPANEL_DEFAULT_OPTIONS) private defaultOptions: McSidepanelConfig,\n        @Optional() @SkipSelf() private parentSidepanelService: McSidepanelService) {\n    }\n\n    ngOnDestroy() {\n        // Only close the sidepanels at this level on destroy\n        // since the parent service may still be active.\n        this.closeSidepanels(this.openedSidepanelsAtThisLevel);\n    }\n\n    open<T, D = any>(componentOrTemplateRef: IComponentType<T> | TemplateRef<T>,\n                     config?: McSidepanelConfig<D>): McSidepanelRef<T> {\n        const fullConfig = {\n            ...(this.defaultOptions || new McSidepanelConfig()),\n            ...config\n        };\n\n        if (fullConfig.id && this.getSidepanelById(fullConfig.id)) {\n            throw Error(`Sidepanel with id \"${fullConfig.id}\" exists already. The sidepanel id must be unique.`);\n        }\n\n        const overlayRef = this.createOverlay(fullConfig);\n        const container = this.attachContainer(overlayRef, fullConfig);\n        const ref = new McSidepanelRef(container, overlayRef, fullConfig);\n\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n                $implicit: fullConfig.data,\n                sidepanelRef: ref\n            } as any));\n        } else {\n            const injector = this.createInjector(fullConfig, ref, container);\n            const portal = new ComponentPortal(componentOrTemplateRef, undefined, injector);\n            const contentRef = container.attachComponentPortal(portal);\n\n            ref.instance = contentRef.instance;\n        }\n\n        this.openedSidepanels.push(ref);\n        ref.afterClosed().subscribe(() => this.removeOpenSidepanel(ref));\n        container.enter();\n\n        return ref;\n    }\n\n    /**\n     * Closes all of the currently-open sidepanels.\n     */\n    closeAll(): void {\n        this.closeSidepanels(this.openedSidepanels);\n    }\n\n    /**\n     * Finds an open sidepanel by its id.\n     * @param id ID to use when looking up the sidepanel.\n     */\n    getSidepanelById(id: string): McSidepanelRef | undefined {\n        return this.openedSidepanels.find((sidepanel) => sidepanel.id === id);\n    }\n\n    /**\n     * Attaches the sidepanel container component to the overlay.\n     */\n    private attachContainer(overlayRef: OverlayRef, config: McSidepanelConfig): McSidepanelContainerComponent {\n        const openedSidepanelsWithSamePosition = this.getOpenedSidepanelsWithSamePosition(config);\n\n        const injector = new PortalInjector(this.injector, new WeakMap<any>([\n            [McSidepanelConfig, config],\n            [MC_SIDEPANEL_WITH_INDENT, openedSidepanelsWithSamePosition.length >= 1],\n            [MC_SIDEPANEL_WITH_SHADOW, openedSidepanelsWithSamePosition.length < 2] // tslint:disable-line\n        ]));\n\n        const containerPortal = new ComponentPortal(McSidepanelContainerComponent, undefined, injector);\n        const containerRef: ComponentRef<McSidepanelContainerComponent> = overlayRef.attach(containerPortal);\n\n        return containerRef.instance;\n    }\n\n    /**\n     * Creates a custom injector to be used inside the sidepanel. This allows a component loaded inside\n     * of a sidepanel to close itself and, optionally, to return a value.\n     * @param config Config object that is used to construct the sidepanel.\n     * @param sidepanelRef Reference to the sidepanel.\n     * @param sidepanelContainer Sidepanel container element that wraps all of the contents.\n     * @returns The custom injector that can be used inside the sidepanel.\n     */\n    private createInjector<T>(\n        config: McSidepanelConfig,\n        sidepanelRef: McSidepanelRef<T>,\n        sidepanelContainer: McSidepanelContainerComponent): PortalInjector {\n\n        // The McSidepanelContainerComponent is injected in the portal as the McSidepanelContainerComponent and\n        // the sidepanel's content are created out of the same ViewContainerRef and as such, are siblings for injector\n        // purposes. To allow the hierarchy that is expected, the McSidepanelContainerComponent is explicitly\n        // added to the injection tokens.\n        const injectionTokens = new WeakMap<any>([\n            [McSidepanelContainerComponent, sidepanelContainer],\n            [MC_SIDEPANEL_DATA, config.data],\n            [McSidepanelRef, sidepanelRef]\n        ]);\n\n        return new PortalInjector(this.injector, injectionTokens);\n    }\n\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified sidepanel config.\n     */\n    private createOverlay(config: McSidepanelConfig): OverlayRef {\n        const overlayConfig = new OverlayConfig({\n            hasBackdrop: config.hasBackdrop,\n            backdropClass: this.getBackdropClass(config),\n            maxWidth: '100%',\n            panelClass: config.overlayPanelClass,\n            scrollStrategy: this.overlay.scrollStrategies.block(),\n            positionStrategy: this.overlay.position().global()\n        });\n\n        return this.overlay.create(overlayConfig);\n    }\n\n    private closeSidepanels(sidepanels: McSidepanelRef[]) {\n        const reversedOpenedSidepanels = [...sidepanels.reverse()];\n\n        reversedOpenedSidepanels.forEach((sidepanelRef: McSidepanelRef) => {\n            sidepanelRef.close();\n        });\n    }\n\n    private getBackdropClass(config: McSidepanelConfig): string {\n        const hasOpenedSidepanelWithBackdrop =\n            this.openedSidepanels.some((sidepanelRef) => sidepanelRef.config.hasBackdrop!);\n\n        return config.requiredBackdrop || !hasOpenedSidepanelWithBackdrop ? 'cdk-overlay-dark-backdrop' :\n            'cdk-overlay-transparent-backdrop';\n    }\n\n    private getOpenedSidepanelsWithSamePosition(config: McSidepanelConfig): McSidepanelRef[] {\n        return this.openedSidepanels.filter((sidepanelRef) => sidepanelRef.config.position === config.position);\n    }\n\n    /**\n     * Removes a sidepanel from the array of open sidepanels.\n     * @param sidepanelRef Sidepanel to be removed.\n     */\n    private removeOpenSidepanel(sidepanelRef: McSidepanelRef) {\n        const index = this.openedSidepanels.indexOf(sidepanelRef);\n\n        if (index > -1) {\n            this.openedSidepanels.splice(index, 1);\n        }\n    }\n}\n","import { Component, Directive, ElementRef, Input, OnChanges, OnInit, Optional, SimpleChanges } from '@angular/core';\n\nimport { McSidepanelRef } from './sidepanel-ref';\nimport { McSidepanelService } from './sidepanel.service';\n\n\n/**\n * Button that will close the current sidepanel.\n */\n@Directive({\n    selector: 'button[mc-sidepanel-close], button[mcSidepanelClose]',\n    host: {\n        '(click)': 'sidepanelRef.close(sidepanelResult)',\n        class: 'mc-sidepanel-close',\n        type: 'button'\n    }\n})\nexport class McSidepanelClose implements OnInit, OnChanges {\n    @Input('mc-sidepanel-close') sidepanelResult: any;\n\n    @Input('mcSidepanelClose') mcSidepanelClose: any;\n\n    constructor(\n        @Optional() public sidepanelRef: McSidepanelRef,\n        private elementRef: ElementRef<HTMLElement>,\n        private sidepanelService: McSidepanelService\n    ) {}\n\n    ngOnInit() {\n        if (!this.sidepanelRef) {\n            // When this directive is included in a sidepanel via TemplateRef (rather than being\n            // in a Component), the SidepanelRef isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the SidepanelRef by\n            // ID.\n            // This must occur in `onInit`, as the ID binding for the sidepanel container won't\n            // be resolved at constructor time. We use setTimeout by same reason.\n            setTimeout(() => {\n                this.sidepanelRef = getClosestSidepanel(this.elementRef, this.sidepanelService.openedSidepanels)!;\n            });\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const proxiedChange = changes.mcSidepanelClose || changes.sidepanelResult;\n\n        if (proxiedChange) {\n            this.sidepanelResult = proxiedChange.currentValue;\n        }\n    }\n}\n\n/**\n * Header of a sidepanel.\n */\n@Component({\n    selector: 'mc-sidepanel-header',\n    template: `\n        <div class=\"mc-sidepanel-title\">\n            <ng-content></ng-content>\n        </div>\n        <button *ngIf=\"closeable\" mc-sidepanel-close>\n            <span class=\"mc-sidepanel-close-x\">\n                <i mc-icon=\"mc-close-L_16\" class=\"mc-icon mc-icon_light\" color=\"second\"></i>\n            </span>\n        </button>\n    `,\n    host: {\n        class: 'mc-sidepanel-header'\n    }\n})\nexport class McSidepanelHeader {\n    @Input() closeable: boolean;\n}\n\n/**\n * Scrollable content container of a sidepanel.\n */\n@Directive({\n    selector: 'mc-sidepanel-body, [mc-sidepanel-body], mcSidepanelBody',\n    host: {\n        class: 'mc-sidepanel-body'\n    }\n})\nexport class McSidepanelBody {}\n\n/**\n * Footer of a sidepanel.\n */\n@Directive({\n    selector: 'mc-sidepanel-footer, [mc-sidepanel-footer], mcSidepanelFooter',\n    host: {\n        class: 'mc-sidepanel-footer'\n    }\n})\nexport class McSidepanelFooter {}\n\n/**\n * Actions block of a sidepanel footer.\n */\n@Directive({\n    selector: 'mc-sidepanel-actions, [mc-sidepanel-actions], mcSidepanelActions',\n    host: {\n        class: 'mc-sidepanel-actions'\n    }\n})\nexport class McSidepanelActions {}\n\n/**\n * Finds the closest McSidepanelRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a sidepanel.\n * @param openSidepanels References to the currently-open sidepanels.\n */\nfunction getClosestSidepanel(element: ElementRef<HTMLElement>, openSidepanels: McSidepanelRef[]) {\n    let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n    while (parent && !parent.classList.contains('mc-sidepanel-container')) {\n        parent = parent.parentElement;\n    }\n\n    return parent ? openSidepanels.find((sidepanel) => sidepanel.id === parent!.id) : null;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { PortalModule } from '@ptsecurity/cdk/portal';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McSidepanelContainerComponent } from './sidepanel-container.component';\nimport {\n    McSidepanelActions,\n    McSidepanelBody,\n    McSidepanelClose,\n    McSidepanelFooter,\n    McSidepanelHeader\n} from './sidepanel-directives';\nimport { McSidepanelService } from './sidepanel.service';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        PortalModule,\n        McCommonModule,\n        McIconModule\n    ],\n    providers: [McSidepanelService],\n    declarations: [\n        McSidepanelContainerComponent,\n        McSidepanelClose,\n        McSidepanelHeader,\n        McSidepanelBody,\n        McSidepanelFooter,\n        McSidepanelActions\n    ],\n    entryComponents: [McSidepanelContainerComponent],\n    exports: [\n        McSidepanelContainerComponent,\n        McSidepanelClose,\n        McSidepanelHeader,\n        McSidepanelBody,\n        McSidepanelFooter,\n        McSidepanelActions\n    ]\n})\nexport class McSidepanelModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    Input,\n    NgZone, OnDestroy,\n    OnInit,\n    Renderer2,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { coerceBooleanProperty, coerceCssPixelValue, coerceNumberProperty } from '@ptsecurity/cdk/coercion';\n\n\ninterface IArea {\n    area: McSplitterAreaDirective;\n    index: number;\n    order: number;\n    initialSize: number;\n}\n\ninterface IPoint {\n    x: number;\n    y: number;\n}\n\n\nconst enum AttributeProperty {\n    Disabled = 'disabled'\n}\n\nconst enum Cursor {\n    Default = 'default',\n    ResizeColumn = 'col-resize',\n    ResizeRow = 'row-resize'\n}\n\nconst enum StyleProperty {\n    Cursor = 'cursor',\n    Flex = 'flex',\n    FlexBasis = 'flex-basis',\n    FlexDirection = 'flex-direction',\n    Height = 'height',\n    MaxWidth = 'max-width',\n    MinHeight = 'min-height',\n    MinWidth = 'minWidth',\n    OffsetHeight = 'offsetHeight',\n    OffsetWidth = 'offsetWidth',\n    Order = 'order',\n    Width = 'width'\n}\n\nconst enum State {\n    Disabled = 'disabled',\n    Horizontal = 'horizontal',\n    Vertical = 'vertical'\n}\n\nexport const enum Direction {\n    Horizontal = 'horizontal',\n    Vertical = 'vertical'\n}\n\n@Component({\n    selector: 'mc-splitter',\n    preserveWhitespaces: false,\n    styleUrls: ['splitter.css'],\n    templateUrl: './splitter.component.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McSplitterComponent implements OnInit {\n    readonly areas: IArea[] = [];\n\n    private _direction: Direction;\n    private _disabled: boolean = false;\n    private _gutterSize: number = 6;\n\n    private isDragging: boolean = false;\n\n    private readonly areaPositionDivider: number = 2;\n    private readonly listeners: (() => void)[] = [];\n\n    @Input()\n    set direction(direction: Direction) {\n        this._direction = direction;\n    }\n\n    get direction(): Direction {\n        return this._direction;\n    }\n\n    @Input()\n    set disabled(disabled: boolean) {\n        this._disabled = coerceBooleanProperty(disabled);\n    }\n\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    @Input()\n    set gutterSize(gutterSize: number) {\n        const size = coerceNumberProperty(gutterSize);\n        this._gutterSize = size > 0 ? size : this.gutterSize;\n    }\n\n    get gutterSize(): number {\n        return this._gutterSize;\n    }\n\n    constructor(private elementRef: ElementRef,\n                private ngZone: NgZone,\n                private renderer: Renderer2) {}\n\n    addArea(area: McSplitterAreaDirective): void {\n        const index: number = this.areas.length;\n        const order: number = index * this.areaPositionDivider;\n        const size: number = area.getSize();\n\n        area.setOrder(order);\n\n        this.areas.push({\n            area,\n            index,\n            order,\n            initialSize: size\n        });\n    }\n\n    ngOnInit(): void {\n        if (!this.direction) {\n            this.direction = Direction.Horizontal;\n        }\n\n        this.setStyle(StyleProperty.FlexDirection, this.isVertical() ? 'column' : 'row');\n    }\n\n    onMouseDown(event: MouseEvent, leftAreaIndex: number, rightAreaIndex: number) {\n        if (this.disabled) {\n            return;\n        }\n\n        const leftArea = this.areas[leftAreaIndex];\n        const rightArea = this.areas[rightAreaIndex];\n\n        const startPoint: IPoint = {\n            x: event.screenX,\n            y: event.screenY\n        };\n\n        leftArea.initialSize = leftArea.area.getSize();\n        rightArea.initialSize = rightArea.area.getSize();\n\n        this.areas.forEach((item) => {\n            const size = item.area.getSize();\n            item.area.disableFlex();\n            item.area.setSize(size);\n        });\n\n        this.ngZone.runOutsideAngular(() => {\n            this.listeners.push(\n                this.renderer.listen(\n                    'document',\n                    'mouseup',\n                    () => this.onMouseUp()\n                )\n            );\n        });\n\n        this.ngZone.runOutsideAngular(() => {\n            this.listeners.push(\n                this.renderer.listen(\n                    'document',\n                    'mousemove',\n                    (e: MouseEvent) => this.onMouseMove(e, startPoint, leftArea, rightArea)\n                )\n            );\n        });\n\n        this.isDragging = true;\n    }\n\n    removeArea(area: McSplitterAreaDirective): void {\n        let indexToRemove: number = -1;\n\n        this.areas.some((item, index) => {\n            if (item.area === area) {\n                indexToRemove = index;\n\n                return true;\n            }\n\n            return false;\n        });\n\n        if (indexToRemove === -1) {\n            return;\n        }\n\n        this.areas.splice(indexToRemove, 1);\n    }\n\n    private isVertical(): boolean {\n        return this.direction === Direction.Vertical;\n    }\n\n    private onMouseMove(event: MouseEvent, startPoint: IPoint, leftArea: IArea, rightArea: IArea) {\n        if (!this.isDragging || this.disabled) {\n            return;\n        }\n\n        const endPoint: IPoint = {\n            x: event.screenX,\n            y: event.screenY\n        };\n\n        const offset = this.isVertical()\n            ? startPoint.y - endPoint.y\n            : startPoint.x - endPoint.x;\n\n        const newLeftAreaSize = leftArea.initialSize - offset;\n        const newRightAreaSize = rightArea.initialSize + offset;\n\n        const minLeftAreaSize = leftArea.area.getMinSize();\n        const minRightAreaSize = rightArea.area.getMinSize();\n\n        if (newLeftAreaSize <= minLeftAreaSize || newRightAreaSize <= minRightAreaSize) {\n            const rightAreaOffset = leftArea.initialSize - minLeftAreaSize;\n\n            leftArea.area.setSize(minLeftAreaSize);\n            rightArea.area.setSize(rightArea.initialSize + rightAreaOffset);\n        } else if (newLeftAreaSize <= 0) {\n            leftArea.area.setSize(0);\n            rightArea.area.setSize(rightArea.initialSize + leftArea.initialSize);\n        } else if (newRightAreaSize <= 0) {\n            leftArea.area.setSize(rightArea.initialSize + leftArea.initialSize);\n            rightArea.area.setSize(0);\n        } else {\n            leftArea.area.setSize(newLeftAreaSize);\n            rightArea.area.setSize(newRightAreaSize);\n        }\n    }\n\n    private onMouseUp() {\n        while (this.listeners.length > 0) {\n            const unsubscribe = this.listeners.pop();\n\n            if (unsubscribe) {\n                unsubscribe();\n            }\n        }\n\n        this.isDragging = false;\n    }\n\n    private setStyle(property: StyleProperty, value: string | number) {\n        this.renderer.setStyle(this.elementRef.nativeElement, property, value);\n    }\n}\n\n@Directive({\n    selector: 'mc-gutter'\n})\nexport class McGutterDirective implements OnInit {\n    private _direction: Direction = Direction.Vertical;\n    private _disabled: boolean = false;\n    private _order: number = 0;\n    private _size: number = 6;\n\n    @Input()\n    set direction(direction: Direction) {\n        this._direction = direction;\n    }\n\n    get direction(): Direction {\n        return this._direction;\n    }\n\n    @Input()\n    set disabled(disabled: boolean) {\n        this._disabled = coerceBooleanProperty(disabled);\n    }\n\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    @Input()\n    set order(order: number) {\n        this._order = coerceNumberProperty(order);\n    }\n\n    get order(): number {\n        return this._order;\n    }\n\n    @Input()\n    set size(size: number) {\n        this._size = coerceNumberProperty(size);\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    constructor(private renderer: Renderer2,\n                private elementRef: ElementRef) {\n    }\n\n    ngOnInit(): void {\n        this.setStyle(StyleProperty.Cursor, this.getCursor(this.getState()));\n        this.setStyle(StyleProperty.FlexBasis, coerceCssPixelValue(this.size));\n        this.setStyle(this.isVertical() ? StyleProperty.Height : StyleProperty.Width, coerceCssPixelValue(this.size));\n        this.setStyle(StyleProperty.Order, this.order);\n\n        if (!this.isVertical()) {\n            this.setStyle(StyleProperty.Height, '100%');\n        }\n\n        if (this.disabled) {\n            this.setAttr(AttributeProperty.Disabled, 'true');\n        }\n\n        // fix IE issue with gutter icon. flex-direction is requied for flex alignment options\n        this.setStyle(StyleProperty.FlexDirection, this.isVertical() ? 'row' : 'column');\n    }\n\n    private isVertical(): boolean {\n        return this.direction === Direction.Vertical;\n    }\n\n    private getCursor(state: State): string {\n        switch (state) {\n            case State.Disabled:\n                return Cursor.Default;\n            case State.Vertical:\n                return  Cursor.ResizeRow;\n            case State.Horizontal:\n                return Cursor.ResizeColumn;\n            default:\n                throw Error(`Unknown gutter state for cursor: ${state}`);\n        }\n    }\n\n    private getState(): State {\n        return this.disabled\n            ? State.Disabled\n            : this.direction === Direction.Vertical\n                ? State.Vertical\n                : State.Horizontal;\n    }\n\n    private setStyle(property: StyleProperty, value: string | number) {\n        this.renderer.setStyle(this.elementRef.nativeElement, property, value);\n    }\n\n    private setAttr(attribute: AttributeProperty, value: string) {\n        this.renderer.setAttribute(this.elementRef.nativeElement, attribute, value);\n    }\n}\n\n@Directive({\n    selector: 'mc-splitter-area'\n})\nexport class McSplitterAreaDirective implements OnInit, OnDestroy {\n    constructor(private elementRef: ElementRef,\n                private renderer: Renderer2,\n                private splitter: McSplitterComponent) {}\n\n    disableFlex(): void {\n        this.renderer.removeStyle(this.elementRef.nativeElement, 'flex');\n    }\n\n    ngOnInit(): void {\n        this.splitter.addArea(this);\n\n        this.removeStyle(StyleProperty.MaxWidth);\n        this.setStyle(StyleProperty.Flex, '1');\n\n        if (this.splitter.direction === Direction.Vertical) {\n            this.setStyle(StyleProperty.Width, '100%');\n            this.removeStyle(StyleProperty.Height);\n        } else {\n            this.setStyle(StyleProperty.Height, '100%');\n            this.removeStyle(StyleProperty.Width);\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.splitter.removeArea(this);\n    }\n\n    setOrder(order: number): void {\n        this.setStyle(StyleProperty.Order, order);\n    }\n\n    setSize(size: number): void {\n        const sz = coerceNumberProperty(size);\n        this.setStyle(this.getSizeProperty(), coerceCssPixelValue(sz));\n    }\n\n    getSize(): number {\n        return this.elementRef.nativeElement[this.getOffsetSizeProperty()];\n    }\n\n    getMinSize(): number {\n        const styles = getComputedStyle(this.elementRef.nativeElement);\n\n        return parseFloat(styles[this.getMinSizeProperty()]);\n    }\n\n    private isVertical(): boolean {\n        return this.splitter.direction === Direction.Vertical;\n    }\n\n    private getMinSizeProperty(): StyleProperty {\n        return this.isVertical()\n            ? StyleProperty.MinHeight\n            : StyleProperty.MinWidth;\n    }\n\n    private getOffsetSizeProperty(): StyleProperty {\n        return this.isVertical()\n            ? StyleProperty.OffsetHeight\n            : StyleProperty.OffsetWidth;\n    }\n\n    private getSizeProperty(): StyleProperty {\n        return this.isVertical()\n            ? StyleProperty.Height\n            : StyleProperty.Width;\n    }\n\n    private setStyle(style: StyleProperty, value: string | number) {\n        this.renderer.setStyle(this.elementRef.nativeElement, style, value);\n    }\n\n    private removeStyle(style: StyleProperty) {\n        this.renderer.removeStyle(this.elementRef.nativeElement, style);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McGutterDirective, McSplitterAreaDirective, McSplitterComponent } from './splitter.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        McIconModule\n    ],\n    exports: [\n        McGutterDirective,\n        McSplitterAreaDirective,\n        McSplitterComponent\n    ],\n    declarations: [\n        McGutterDirective,\n        McSplitterAreaDirective,\n        McSplitterComponent\n    ]\n})\nexport class McSplitterModule {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { MC_SELECT_SCROLL_STRATEGY_PROVIDER, McOptionModule } from '@ptsecurity/mosaic/core';\nimport { McFormFieldModule } from '@ptsecurity/mosaic/form-field';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\nimport { McTagsModule } from '@ptsecurity/mosaic/tags';\n\nimport { McSelect, McSelectTrigger } from './select.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        McOptionModule,\n        McIconModule,\n        McTagsModule\n    ],\n    exports: [McFormFieldModule, McSelect, McSelectTrigger, McOptionModule, CommonModule],\n    declarations: [McSelect, McSelectTrigger],\n    providers: [MC_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class McSelectModule {}\n","/* tslint:disable:no-empty */\n\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    Directive,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Input,\n    isDevMode,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    Renderer2,\n    Self,\n    SimpleChanges,\n    ViewChild,\n    ViewChildren,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    RIGHT_ARROW,\n    SPACE,\n    UP_ARROW,\n    A\n} from '@ptsecurity/cdk/keycodes';\nimport {\n    CdkConnectedOverlay,\n    ViewportRuler\n} from '@ptsecurity/cdk/overlay';\nimport { CdkTree } from '@ptsecurity/cdk/tree';\nimport {\n    getOptionScrollPosition,\n    CanDisable,\n    CanUpdateErrorState,\n    ErrorStateMatcher,\n    HasTabIndex,\n    CanDisableCtor,\n    HasTabIndexCtor,\n    CanUpdateErrorStateCtor,\n    mixinTabIndex,\n    mixinDisabled,\n    mixinErrorState,\n    mcSelectAnimations,\n\n    SELECT_PANEL_MAX_HEIGHT,\n    SELECT_PANEL_PADDING_X,\n    SELECT_PANEL_VIEWPORT_PADDING,\n\n    getMcSelectDynamicMultipleError,\n    getMcSelectNonFunctionValueError,\n    getMcSelectNonArrayValueError,\n    MC_SELECT_SCROLL_STRATEGY\n} from '@ptsecurity/mosaic/core';\nimport { McFormField, McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { McTag } from '@ptsecurity/mosaic/tags';\nimport { McTreeSelection, McTreeOption } from '@ptsecurity/mosaic/tree';\nimport { defer, merge, Observable, Subject } from 'rxjs';\nimport {\n    filter,\n    map,\n    startWith,\n    switchMap,\n    take,\n    takeUntil,\n    distinctUntilChanged\n} from 'rxjs/operators';\n\n\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the select value has changed. */\nexport class McTreeSelectChange {\n    constructor(public source: McTreeOption, public value: any, public isUserInput = false) {}\n}\n\n\n@Directive({ selector: 'mc-tree-select-trigger' })\nexport class McTreeSelectTrigger {}\n\n\nclass McTreeSelectBase {\n    constructor(\n        public elementRef: ElementRef,\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {}\n}\n\n// tslint:disable-next-line:naming-convention\nconst McTreeSelectMixinBase: CanDisableCtor & HasTabIndexCtor & CanUpdateErrorStateCtor &\n    typeof McTreeSelectBase = mixinTabIndex(mixinDisabled(mixinErrorState(McTreeSelectBase)));\n\n\n@Component({\n    selector: 'mc-tree-select',\n    exportAs: 'mcTreeSelect',\n    templateUrl: 'tree-select.html',\n    styleUrls: ['./tree-select.css'],\n    inputs: ['disabled', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'tabIndex',\n\n        class: 'mc-tree-select',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-select-invalid]': 'errorState',\n        '[class.mc-select-required]': 'required',\n\n        '(keydown)': 'handleKeydown($event)',\n        '(focus)': 'onFocus()',\n        '(blur)': 'onBlur()',\n        '(window:resize)': 'calculateHiddenItems()'\n    },\n    animations: [\n        mcSelectAnimations.transformPanel,\n        mcSelectAnimations.fadeInContent\n    ],\n    providers: [\n        { provide: McFormFieldControl, useExisting: McTreeSelect },\n        { provide: CdkTree, useExisting: McTreeSelect }\n    ]\n})\nexport class McTreeSelect extends McTreeSelectMixinBase implements\n    AfterContentInit, AfterViewInit, OnChanges, OnDestroy, OnInit, DoCheck, ControlValueAccessor,\n    CanDisable, HasTabIndex, McFormFieldControl<any>, CanUpdateErrorState {\n\n    /** A name for this control that can be used by `mc-form-field`. */\n    controlType = 'mc-select';\n\n    hiddenItems: number = 0;\n    oneMoreText: string = '...ещё';\n\n    /** The last measured value for the trigger's client bounding rect. */\n    triggerRect: ClientRect;\n\n    /** The cached font-size of the trigger element. */\n    triggerFontSize = 0;\n\n    /** Deals with the selection logic. */\n    selectionModel: SelectionModel<McTreeOption>;\n\n    /** The IDs of child options to be passed to the aria-owns attribute. */\n    optionIds: string = '';\n\n    /** The value of the select panel's transform-origin property. */\n    transformOrigin: string = 'top';\n\n    /** Whether the panel's animation is done. */\n    panelDoneAnimating: boolean = false;\n\n    /** Emits when the panel element is finished transforming in. */\n    panelDoneAnimatingStream = new Subject<string>();\n\n    /** Strategy that will be used to handle scrolling while the select panel is open. */\n    scrollStrategy = this.scrollStrategyFactory();\n\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n    offsetY = 0;\n\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n    positions = [\n        {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top'\n        },\n        {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom'\n        }\n    ];\n\n    @ViewChild('trigger') trigger: ElementRef;\n\n    @ViewChild('panel') panel: ElementRef;\n\n    @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n    @ViewChildren(McTag) tags: QueryList<McTag>;\n\n    /** User-supplied override of the trigger element. */\n    @ContentChild(McTreeSelectTrigger) customTrigger: McTreeSelectTrigger;\n\n    @ContentChild(McTreeSelection) tree: McTreeSelection;\n\n    /** Event emitted when the select panel has been toggled. */\n    @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted when the select has been opened. */\n    @Output('opened') readonly openedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => o), map(() => {}));\n\n    /** Event emitted when the select has been closed. */\n    @Output('closed') readonly closedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => !o), map(() => {}));\n\n    /** Event emitted when the selected value has been changed by the user. */\n    @Output() readonly selectionChange = new EventEmitter<McTreeSelectChange>();\n\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n    @Input() panelClass: string | string[] | Set<string> | { [key: string]: any };\n\n    /** Object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Function used to sort the values in a select in multiple mode.\n     * Follows the same logic as `Array.prototype.sort`.\n     */\n    @Input() sortComparator: (\n        a: McTreeOption, b: McTreeOption, options: McTreeOption[]\n    ) => number;\n\n    /** Combined stream of all of the child options' change events. */\n    readonly optionSelectionChanges: Observable<McTreeSelectChange> = defer(() => {\n        if (this.options) {\n            return merge(...this.options.map((option) => option.onSelectionChange));\n        }\n\n        return this.ngZone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n    }) as Observable<McTreeSelectChange>;\n\n    options: QueryList<McTreeOption>;\n\n    private originalOnKeyDown: (event: KeyboardEvent) => void;\n\n    @Input()\n    get placeholder(): string {\n        return this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n\n        this.stateChanges.next();\n    }\n\n    private _placeholder: string;\n\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n\n        this.stateChanges.next();\n    }\n\n    private _required: boolean = false;\n\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        if (this.selectionModel) {\n            throw getMcSelectDynamicMultipleError();\n        }\n\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    private _multiple: boolean = false;\n\n    @Input()\n    get autoSelect(): boolean {\n        if (this.multiple) { return false; }\n\n        return this._autoSelect;\n    }\n\n    set autoSelect(value: boolean) {\n        this._autoSelect = coerceBooleanProperty(value);\n    }\n\n    private _autoSelect: boolean = true;\n\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith() {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        /* tslint:disable-next-line:strict-type-predicates */\n        if (typeof fn !== 'function') {\n            throw getMcSelectNonFunctionValueError();\n        }\n\n        this._compareWith = fn;\n\n        if (this.selectionModel) {\n            // A different comparator means the selection could change.\n            this.initializeSelection();\n        }\n    }\n\n    /** Value of the select control. */\n    @Input()\n    get value(): any {\n        return this._value;\n    }\n\n    set value(newValue: any) {\n        if (newValue !== this._value) {\n            this.writeValue(newValue);\n            this._value = newValue;\n        }\n    }\n\n    private _value: any;\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n        this.stateChanges.next();\n    }\n\n    private _id: string;\n\n    /** Whether the select is focused. */\n    get focused(): boolean {\n        return this._focused || this._panelOpen;\n    }\n\n    /**\n     * @deprecated Setter to be removed as this property is intended to be readonly.\n     * @breaking-change 8.0.0\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n\n    private _focused = false;\n\n    get panelOpen(): boolean {\n        return this._panelOpen;\n    }\n\n    private _panelOpen = false;\n\n    /** The scroll position of the overlay panel, calculated to center the selected option. */\n    private scrollTop = 0;\n\n    /** Unique id for this input. */\n    private readonly uid = `mc-select-${nextUniqueId++}`;\n\n    /** Emits whenever the component is destroyed. */\n    private readonly destroy = new Subject<void>();\n\n    constructor(\n        private readonly viewportRuler: ViewportRuler,\n        readonly changeDetectorRef: ChangeDetectorRef,\n        private readonly ngZone: NgZone,\n        private readonly renderer: Renderer2,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        public elementRef: ElementRef,\n        @Optional() private readonly dir: Directionality,\n        @Optional() parentForm: NgForm,\n        @Optional() parentFormGroup: FormGroupDirective,\n        @Optional() private readonly parentFormField: McFormField,\n        @Self() @Optional() public ngControl: NgControl,\n        @Attribute('tabindex') tabIndex: string,\n        @Inject(MC_SELECT_SCROLL_STRATEGY) private readonly scrollStrategyFactory\n    ) {\n        super(elementRef, defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnInit() {\n        if (this.tree) {\n            this.tree.multiple = this.multiple;\n        }\n\n        this.stateChanges.next();\n\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this.panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this.panelOpen) {\n                    this.scrollTop = 0;\n                    this.openedChange.emit(true);\n                } else {\n                    this.openedChange.emit(false);\n                    this.panelDoneAnimating = false;\n                    this.overlayDir.offsetX = 0;\n                    this.changeDetectorRef.markForCheck();\n                }\n            });\n    }\n\n    ngAfterContentInit() {\n        if (!this.tree) { return; }\n\n        this.initKeyManager();\n\n        this.selectionModel = this.tree.selectionModel = new SelectionModel<McTreeOption>(this.multiple);\n        this.options = this.tree.options;\n        this.tree.autoSelect = this.autoSelect;\n\n        this.selectionModel.changed\n            .pipe(takeUntil(this.destroy))\n            .subscribe((event) => {\n                event.added.forEach((option) => option.select());\n                event.removed.forEach((option) => option.deselect());\n            });\n    }\n\n    ngAfterViewInit() {\n        if (!this.tree) { return; }\n\n        this.tags.changes\n            .subscribe(() => {\n                setTimeout(() => this.calculateHiddenItems(), 0);\n            });\n\n        this.options.changes\n            .pipe(startWith(null), takeUntil(this.destroy))\n            .subscribe(() => {\n                this.updateSelectedOptions();\n\n                this.resetOptions();\n            });\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) { this.updateErrorState(); }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes.disabled) {\n            this.stateChanges.next();\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroy.next();\n\n        this.destroy.complete();\n        this.stateChanges.complete();\n    }\n\n    /** `View -> model callback called when value changes` */\n    onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when select has been touched` */\n    onTouched = () => {};\n\n    toggle() {\n        if (this.panelOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    open() {\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) { return; }\n\n        this.triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this.triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n        this._panelOpen = true;\n        // this.tree.keyManager.withHorizontalOrientation(null);\n        this.calculateOverlayPosition();\n        this.highlightCorrectOption();\n        this.changeDetectorRef.markForCheck();\n\n        // Set the font size on the panel element once it exists.\n        this.ngZone.onStable.asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                if (this.triggerFontSize && this.overlayDir.overlayRef &&\n                    this.overlayDir.overlayRef.overlayElement) {\n                    this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this.triggerFontSize}px`;\n                }\n            });\n    }\n\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n\n            // this.tree.keyManager.setActiveItem(-1);\n\n            // this.tree.keyManager.withHorizontalOrientation(this.isRtl() ? 'rtl' : 'ltr');\n            this.changeDetectorRef.markForCheck();\n            this.onTouched();\n        }\n    }\n\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    // todo нужно доделать!\n    writeValue(value: any) {\n        if (this.options) {\n            this.setSelectionByValue(value);\n        }\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.onChange = fn;\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn: () => {}) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this.changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    get selected(): McTreeOption | McTreeOption[] {\n        return this.multiple ? this.selectionModel.selected : this.selectionModel.selected[0];\n    }\n\n    get triggerValue(): string {\n        if (this.empty) { return ''; }\n\n        return (this.selected as McTreeOption).viewValue;\n    }\n\n    get triggerValues(): McTreeOption[] {\n        if (this.empty) { return []; }\n\n        const selectedOptions = this.selectionModel.selected;\n\n        if (this.isRtl()) { selectedOptions.reverse(); }\n\n        return selectedOptions;\n    }\n\n    get empty(): boolean {\n        return !this.selectionModel || this.selectionModel.isEmpty();\n    }\n\n    isRtl(): boolean {\n        return this.dir ? this.dir.value === 'rtl' : false;\n    }\n\n    handleKeydown(event: KeyboardEvent) {\n        if (!this.disabled) {\n            if (this.panelOpen) {\n                this.handleOpenKeydown(event);\n            } else {\n                this.handleClosedKeydown(event);\n            }\n        }\n    }\n\n    /**\n     * When the panel content is done fading in, the panelDoneAnimating property is\n     * set so the proper class can be added to the panel.\n     */\n    onFadeInDone() {\n        this.panelDoneAnimating = this.panelOpen;\n        this.changeDetectorRef.markForCheck();\n    }\n\n    onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    onBlur() {\n        this._focused = false;\n\n        if (!this.disabled && !this.panelOpen) {\n            this.onTouched();\n            this.changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n\n    /** Callback that is invoked when the overlay panel has been attached. */\n    onAttached() {\n        this.overlayDir.positionChange\n            .pipe(take(1))\n            .subscribe(() => {\n                this.changeDetectorRef.detectChanges();\n                this.calculateOverlayOffsetX();\n                this.panel.nativeElement.scrollTop = this.scrollTop;\n            });\n    }\n\n    /** Returns the theme to be used on the panel. */\n    getPanelTheme(): string {\n        return this.parentFormField ? `mc-${this.parentFormField.color}` : '';\n    }\n\n    /** Focuses the select element. */\n    focus() {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    calculateOverlayScroll(selectedIndex: number, scrollBuffer: number, maxScroll: number): number {\n        const itemHeight = this.getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n\n        /* tslint:disable-next-line:no-magic-numbers */\n        const halfOptionHeight = itemHeight / 2;\n\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n\n    /** Invoked when an option is clicked. */\n    onRemoveSelectedOption(selectedOption: McTreeOption, $event) {\n        $event.stopPropagation();\n\n        this.options.forEach((option) => {\n            if (option.data === selectedOption.data) { option.deselect(); }\n        });\n\n        this.selectionModel.deselect(selectedOption);\n    }\n\n    calculateHiddenItems() {\n        if (this.empty || !this.multiple) { return; }\n\n        let visibleItems: number = 0;\n        const totalItemsWidth = this.getTotalItemsWidthInMatcher();\n        let totalVisibleItemsWidth: number = 0;\n        const itemMargin: number = 4;\n\n        this.tags.forEach((tag) => {\n            if (tag.nativeElement.offsetTop < tag.nativeElement.offsetHeight) {\n                totalVisibleItemsWidth += tag.nativeElement.getBoundingClientRect().width + itemMargin;\n                visibleItems++;\n            }\n        });\n\n        this.hiddenItems = this.selectionModel.selected.length - visibleItems;\n\n        if (this.hiddenItems) {\n            const itemsCounter = this.trigger.nativeElement.querySelector('.mc-tree-select__match-hidden-text');\n            const matcherList = this.trigger.nativeElement.querySelector('.mc-tree-select__match-list');\n\n            const itemsCounterShowed = itemsCounter.offsetTop < itemsCounter.offsetHeight;\n            // const itemsCounterWidth: number = itemsCounter.getBoundingClientRect().width;\n            const itemsCounterWidth: number = 86;\n\n            const matcherListWidth: number = matcherList.getBoundingClientRect().width;\n            const matcherWidth: number = matcherListWidth + itemsCounterWidth;\n\n            if (itemsCounterShowed && (totalItemsWidth < matcherWidth)) { this.hiddenItems = 0; }\n\n            if (\n                totalVisibleItemsWidth === matcherListWidth ||\n                (totalVisibleItemsWidth + itemsCounterWidth) < matcherListWidth\n            ) {\n                this.changeDetectorRef.markForCheck();\n\n                return ;\n            } else if (!itemsCounterShowed && (totalItemsWidth + itemsCounterWidth) > matcherWidth) {\n                this.hiddenItems++;\n            }\n        }\n\n        this.changeDetectorRef.markForCheck();\n    }\n\n    private updateSelectedOptions(): void {\n        this.selectionModel.selected.forEach((selectedOption) => {\n            this.options.forEach((option) => {\n                if (option.data === selectedOption.data) {\n                    this.selectionModel.deselect(selectedOption);\n                    this.selectionModel.select(option);\n\n                    option.select();\n                }\n            });\n        });\n    }\n\n    private getTotalItemsWidthInMatcher(): number {\n        const triggerClone = this.trigger.nativeElement.cloneNode(true);\n        triggerClone.querySelector('.mc-tree-select__match-hidden-text').remove();\n\n        this.renderer.setStyle(triggerClone, 'position', 'absolute');\n        this.renderer.setStyle(triggerClone, 'visibility', 'hidden');\n        this.renderer.setStyle(triggerClone, 'top', '-100%');\n        this.renderer.setStyle(triggerClone, 'left', '0');\n\n        this.renderer.appendChild(this.trigger.nativeElement, triggerClone);\n\n        let totalItemsWidth: number = 0;\n        const itemMargin: number = 4;\n        triggerClone.querySelectorAll('mc-tag').forEach((item) => {\n            totalItemsWidth += item.getBoundingClientRect().width as number + itemMargin;\n        });\n\n        triggerClone.remove();\n\n        return totalItemsWidth;\n    }\n\n    private handleClosedKeydown(event: KeyboardEvent) {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n        // Open the select on ALT + arrow key to match the native <select>\n        if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n            // prevents the page from scrolling down when pressing space\n            event.preventDefault();\n\n            this.open();\n        } else if (!this.multiple && this.tree.keyManager && this.tree.keyManager.onKeydown) {\n            this.tree.keyManager.onKeydown(event);\n        }\n    }\n\n    private handleOpenKeydown(event: KeyboardEvent) {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n\n            this.close();\n        } else if (keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW) {\n            return this.originalOnKeyDown.call(this.tree, event);\n        } else if (keyCode === HOME || keyCode === END) {\n            event.preventDefault();\n\n            if (keyCode === HOME) {\n                this.tree.keyManager.setFirstItemActive();\n            } else {\n                this.tree.keyManager.setLastItemActive();\n            }\n        } else if ((keyCode === ENTER || keyCode === SPACE) && this.tree.keyManager.activeItem) {\n            event.preventDefault();\n\n            this.tree.keyManager.activeItem.selectViaInteraction();\n        } else if (this.multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n\n            const hasDeselectedOptions = this.options.some((option) => !option.selected);\n\n            this.options.forEach((option) => {\n                if (hasDeselectedOptions && !option.disabled) {\n                    option.select();\n                } else {\n                    option.deselect();\n                }\n            });\n        } else {\n            const previouslyFocusedIndex = this.tree.keyManager.activeItemIndex;\n\n            this.tree.keyManager.onKeydown(event);\n\n            if (this.multiple && isArrowKey && event.shiftKey && this.tree.keyManager.activeItem &&\n                this.tree.keyManager.activeItemIndex !== previouslyFocusedIndex) {\n                this.tree.keyManager.activeItem.selectViaInteraction();\n            }\n        }\n    }\n\n    private initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this.setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n        });\n    }\n\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    private setSelectionByValue(value: any | any[]) {\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) { throw getMcSelectNonArrayValueError(); }\n\n            this.selectionModel.clear();\n            value.forEach((currentValue: any) => this.selectValue(currentValue));\n            this.sortValues();\n        } else {\n            this.selectionModel.clear();\n            const correspondingOption = this.selectValue(value);\n\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this.tree.keyManager.setActiveItem(correspondingOption);\n            }\n        }\n\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    private selectValue(value: any): McTreeOption | undefined {\n        const correspondingOption = this.options.find((option: McTreeOption) => {\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            } catch (error) {\n                if (isDevMode()) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n\n                return false;\n            }\n        });\n\n        if (correspondingOption) {\n            this.selectionModel.select(correspondingOption);\n        }\n\n        return correspondingOption;\n    }\n\n    private initKeyManager() {\n        this.originalOnKeyDown = this.tree.onKeyDown;\n\n        this.tree.onKeyDown = () => {};\n\n        this.tree.keyManager.tabOut\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            });\n\n        this.tree.keyManager.change\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this._panelOpen && this.panel) {\n                    this.scrollActiveOptionIntoView();\n                } else if (!this._panelOpen && !this.multiple && this.tree.keyManager.activeItem) {\n                    this.tree.keyManager.activeItem.selectViaInteraction();\n                }\n            });\n    }\n\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    private resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this.destroy);\n\n        this.optionSelectionChanges\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe((event) => {\n                this.onSelect(event.source, event.isUserInput);\n\n                if (event.isUserInput && !this.multiple && this._panelOpen) {\n                    this.close();\n                    this.focus();\n                }\n            });\n\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        // merge(...this.options.map((option) => option.stateChanges))\n        //     .pipe(takeUntil(changedOrDestroyed))\n        //     .subscribe(() => {\n        //         this.changeDetectorRef.markForCheck();\n        //         this.stateChanges.next();\n        //     });\n\n        this.setOptionIds();\n    }\n\n    /** Invoked when an option is clicked. */\n    private onSelect(option: McTreeOption, isUserInput: boolean) {\n        const wasSelected = this.selectionModel.isSelected(option);\n\n        if (option.value == null && !this.multiple) {\n            option.deselect();\n            this.selectionModel.clear();\n            this.propagateChanges(option.value);\n        } else {\n            if (option.selected) {\n                this.selectionModel.select(option);\n            } else {\n                this.selectionModel.deselect(option);\n            }\n\n            if (isUserInput) {\n                this.tree.keyManager.setActiveItem(option);\n            }\n\n            if (this.multiple) {\n                this.sortValues();\n\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mc-option`.\n                    this.focus();\n                }\n            }\n        }\n\n        if (wasSelected !== this.selectionModel.isSelected(option)) {\n            this.propagateChanges();\n        }\n\n        this.stateChanges.next();\n    }\n\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    private sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n\n            this.selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n\n    /** Emits change event to set the model value. */\n    private propagateChanges(fallbackValue?: any) {\n        let valueToEmit: any = null;\n\n        if (this.multiple) {\n            valueToEmit = (this.selected as any).map((option) => option.value);\n        } else {\n            valueToEmit = this.selected ? (this.selected as any).value : fallbackValue;\n        }\n\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this.onChange(valueToEmit);\n        this.selectionChange.emit(new McTreeSelectChange(this as any, valueToEmit));\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Records option IDs to pass to the aria-owns property. */\n    private setOptionIds() {\n        this.optionIds = this.options.map((option) => option.id).join(' ');\n    }\n\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    private highlightCorrectOption() {\n        if (this.tree.keyManager) {\n            if (this.empty) {\n                this.tree.keyManager.setFirstItemActive();\n            } else {\n                this.tree.keyManager.setActiveItem(this.selectionModel.selected[0]);\n            }\n        }\n    }\n\n    /** Scrolls the active option into view. */\n    private scrollActiveOptionIntoView() {\n        const activeOptionIndex = this.tree.keyManager.activeItemIndex || 0;\n\n        this.panel.nativeElement.scrollTop = getOptionScrollPosition(\n            activeOptionIndex,\n            this.getItemHeight(),\n            this.panel.nativeElement.scrollTop,\n            SELECT_PANEL_MAX_HEIGHT\n        );\n    }\n\n    /** Gets the index of the provided option in the option list. */\n    private getOptionIndex(option: McTreeOption): number | undefined {\n        // todo разобраться с этим срачем!\n        return this.options.reduce((result: number, current: McTreeOption, index: number) => {\n            /* tslint:disable-next-line:strict-type-predicates */\n            return result === undefined ? (option === current ? index : undefined) : result;\n        }, undefined);\n    }\n\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    private calculateOverlayPosition() {\n        const itemHeight = this.getItemHeight();\n        const items = this.getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n\n        // If no value is selected we open the popup to the first item.\n        const selectedOptionOffset =\n            this.empty ? 0 : this.getOptionIndex(this.selectionModel.selected[0])!;\n\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        /* tslint:disable-next-line:no-magic-numbers */\n        const scrollBuffer = panelHeight / 2;\n        this.scrollTop = this.calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this.offsetY = this.calculateOverlayOffsetY();\n\n        this.checkOverlayWithinViewport(maxScroll);\n    }\n\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    private calculateOverlayOffsetX() {\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this.viewportRuler.getViewportSize();\n        const isRtl = this.isRtl();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const paddingWidth = SELECT_PANEL_PADDING_X * 2;\n        let offsetX: number = SELECT_PANEL_PADDING_X;\n\n        // Invert the offset in LTR.\n        if (!isRtl) { offsetX *= -1; }\n\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        } else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    private calculateOverlayOffsetY(): number {\n        // const itemHeight = this.getItemHeight();\n        // const optionHeightAdjustment = (itemHeight - this.triggerRect.height) / 2;\n\n        // todo I'm not sure that we will use it\n        return 0;\n        // return Math.round(-optionHeightAdjustment);\n    }\n\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    private checkOverlayWithinViewport(maxScroll: number) {\n        const itemHeight = this.getItemHeight();\n        const viewportSize = this.viewportRuler.getViewportSize();\n\n        const topSpaceAvailable = this.triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable =\n            viewportSize.height - this.triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n        const panelHeightTop = Math.abs(this.offsetY);\n        const totalPanelHeight =\n            Math.min(this.getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this.triggerRect.height;\n\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this.adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        } else if (panelHeightTop > topSpaceAvailable) {\n            this.adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        } else {\n            this.transformOrigin = this.getOriginBasedOnOption();\n        }\n    }\n\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    private adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this.scrollTop -= distanceBelowViewport;\n        this.offsetY -= distanceBelowViewport;\n        this.transformOrigin = this.getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this.scrollTop <= 0) {\n            this.scrollTop = 0;\n            this.offsetY = 0;\n            this.transformOrigin = `50% bottom 0px`;\n        }\n    }\n\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    private adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number, maxScroll: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this.scrollTop += distanceAboveViewport;\n        this.offsetY += distanceAboveViewport;\n        this.transformOrigin = this.getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this.scrollTop >= maxScroll) {\n            this.scrollTop = maxScroll;\n            this.offsetY = 0;\n            this.transformOrigin = `50% top 0px`;\n\n            return;\n        }\n    }\n\n    /** Sets the transform origin point based on the selected option. */\n    private getOriginBasedOnOption(): string {\n        const itemHeight = this.getItemHeight();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const optionHeightAdjustment = (itemHeight - this.triggerRect.height) / 2;\n        /* tslint:disable-next-line:no-magic-numbers */\n        const originY = Math.abs(this.offsetY) - optionHeightAdjustment + itemHeight / 2;\n\n        return `50% ${originY}px 0px`;\n    }\n\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    private getItemCount(): number {\n        return this.options.length;\n    }\n\n    /** Calculates the height of the select's options. */\n    private getItemHeight(): number {\n        // todo доделать\n        /* tslint:disable-next-line:no-magic-numbers */\n        return 32;\n        // return this.triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { CdkTreeModule } from '@ptsecurity/cdk/tree';\nimport { MC_SELECT_SCROLL_STRATEGY_PROVIDER, McPseudoCheckboxModule } from '@ptsecurity/mosaic/core';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\nimport { McTagsModule } from '@ptsecurity/mosaic/tags';\nimport { McTreeModule } from '@ptsecurity/mosaic/tree';\n\nimport { McTreeSelect, McTreeSelectTrigger } from './tree-select.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        CdkTreeModule,\n        McTreeModule,\n        McIconModule,\n        McTagsModule,\n        McPseudoCheckboxModule\n    ],\n    exports: [McTreeSelect, McTreeSelectTrigger, CommonModule],\n    declarations: [McTreeSelect, McTreeSelectTrigger],\n    providers: [MC_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class McTreeSelectModule {}\n","import {\n    Directive, DoCheck, ElementRef, Inject,\n    Input, OnChanges, OnDestroy, Optional,\n    Self, InjectionToken, NgZone, OnInit\n} from '@angular/core';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { fromEvent, Subscription, Subject } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\n\n\nexport const MC_TEXTAREA_VALUE_ACCESSOR =\n    new InjectionToken<{ value: any }>('MC_TEXTAREA_VALUE_ACCESSOR');\n\nlet nextUniqueId = 0;\n\nconst ROW_SEPARATOR = '\\n';\n\nexport class McTextareaBase {\n    constructor(public defaultErrorStateMatcher: ErrorStateMatcher,\n                public parentForm: NgForm,\n                public parentFormGroup: FormGroupDirective,\n                public ngControl: NgControl) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McTextareaMixinBase: CanUpdateErrorStateCtor & typeof McTextareaBase = mixinErrorState(McTextareaBase);\n\n@Directive({\n    selector: 'textarea[mcTextarea]',\n    exportAs: 'mcTextarea',\n    host: {\n        class: 'mc-textarea',\n        '[class.mc-textarea-resizable]': '!canGrow',\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[attr.aria-invalid]': 'errorState',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '(blur)': 'focusChanged(false)',\n        '(focus)': 'focusChanged(true)'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McTextarea }]\n})\nexport class McTextarea extends McTextareaMixinBase implements McFormFieldControl<any>, OnInit, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n\n    @Input() canGrow: boolean = true;\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-textarea';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this.valueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this.valueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n\n    protected uid = `mc-textsrea-${nextUniqueId++}`;\n    protected previousNativeValue: any;\n    protected _disabled = false;\n    protected _id: string;\n    protected _required = false;\n\n    private valueAccessor: { value: any };\n    private growSubscription: Subscription;\n\n    private lineHeight: number = 0;\n    private freeRowsHeight: number = 0;\n    private minHeight: number = 0;\n\n    constructor(protected elementRef: ElementRef,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() parentForm: NgForm,\n                @Optional() parentFormGroup: FormGroupDirective,\n                defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_TEXTAREA_VALUE_ACCESSOR) inputValueAccessor: any,\n                private ngZone: NgZone) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n        // If no input value accessor was explicitly specified, use the element as the textarea value\n        // accessor.\n        this.valueAccessor = inputValueAccessor || this.elementRef.nativeElement;\n\n        this.previousNativeValue = this.value;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n\n        const growObserver = fromEvent(elementRef.nativeElement, 'input')\n            /*.pipe(\n                map((event: any) => this.getGrowHeight()),\n                // map((event: any) => event.target.scrollHeight),\n                distinctUntilChanged()\n            )*/;\n        this.growSubscription = growObserver.subscribe(this.grow.bind(this));\n    }\n\n    ngOnInit() {\n        setTimeout(() => this.grow(), 0);\n        this.lineHeight = parseInt(getComputedStyle(this.elementRef.nativeElement).lineHeight!, 10);\n\n        const paddingTop = parseInt(getComputedStyle(this.elementRef.nativeElement).paddingTop!, 10);\n        const paddingBottom = parseInt(getComputedStyle(this.elementRef.nativeElement).paddingBottom!, 10);\n\n        // tslint:disable-next-line:no-magic-numbers\n        this.minHeight = this.lineHeight * 2 + paddingTop + paddingBottom;\n        this.freeRowsHeight = this.lineHeight;\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        this.growSubscription.unsubscribe();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this.dirtyCheckNativeValue();\n    }\n\n    /** Grow textarea height to avoid vertical scroll  */\n    grow() {\n        if (!this.canGrow) {\n            return;\n        }\n\n        this.ngZone.runOutsideAngular(() => {\n            const textarea = this.elementRef.nativeElement;\n\n            const outerHeight = parseInt(window.getComputedStyle(textarea).height!, 10);\n            const diff = outerHeight - textarea.clientHeight;\n\n            textarea.style.height = 0; // this line is important to height recalculation\n\n            const height = Math.max(this.minHeight, textarea.scrollHeight + diff + this.freeRowsHeight);\n            textarea.style.height = `${height}px`;\n        });\n    }\n\n    /** Focuses the textarea. */\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /** Callback for the cases where the focused state of the textarea changes. */\n    focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this.elementRef.nativeElement.value && !this.isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Does some manual dirty checking on the native textarea `value` property. */\n    protected dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this.previousNativeValue !== newValue) {\n            this.previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Checks whether the textarea is invalid based on the native validation. */\n    protected isBadInput(): boolean {\n        // The `validity` property won't be present on platform-server.\n        const validity = (this.elementRef.nativeElement as HTMLTextAreaElement).validity;\n\n        return validity && validity.badInput;\n    }\n\n    private getGrowHeight(): number {\n        const textarea = this.elementRef.nativeElement;\n        const outerHeight = parseInt(window.getComputedStyle(textarea).height!.toString(), 10);\n        const diff = outerHeight - textarea.clientHeight;\n\n        return Math.max(this.minHeight, textarea.scrollHeight + diff);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McTextarea } from './textarea.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule, FormsModule],\n    exports: [McTextarea],\n    declarations: [McTextarea]\n})\nexport class McTextareaModule {\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    Self,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { FocusKeyManager } from '@ptsecurity/cdk/a11y';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { BACKSPACE, END, HOME } from '@ptsecurity/cdk/keycodes';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { merge, Observable, Subject, Subscription } from 'rxjs';\nimport { startWith, takeUntil } from 'rxjs/operators';\n\nimport { McTagTextControl } from './tag-text-control';\nimport { McTag, McTagEvent, McTagSelectionChange } from './tag.component';\n\n\nexport class McTagListBase {\n    constructor(\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const _McTagListMixinBase: CanUpdateErrorStateCtor & typeof McTagListBase = mixinErrorState(McTagListBase);\n\n\n// Increasing integer for generating unique ids for tag-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the tag list value has changed. */\nexport class McTagListChange {\n    constructor(public source: McTagList, public value: any) {}\n}\n\n\n@Component({\n    selector: 'mc-tag-list',\n    exportAs: 'mcTagList',\n    template: '<ng-content></ng-content>',\n    host: {\n        class: 'mc-tag-list',\n        '[attr.tabindex]': 'disabled ? null : _tabIndex',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-invalid]': 'errorState',\n        '[class.mc-required]': 'required',\n        '(focus)': 'focus()',\n        '(blur)': 'blur()',\n        '(keydown)': 'keydown($event)',\n        '[id]': 'uid'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McTagList }],\n    styleUrls: ['tag-list.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McTagList extends _McTagListMixinBase implements McFormFieldControl<any>,\n    ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n\n    readonly controlType: string = 'mc-tag-list';\n\n    /** Combined stream of all of the child tags' selection change events. */\n    get tagSelectionChanges(): Observable<McTagSelectionChange> {\n        return merge(...this.tags.map((tag) => tag.selectionChange));\n    }\n\n    /** Combined stream of all of the child tags' focus change events. */\n    get tagFocusChanges(): Observable<McTagEvent> {\n        return merge(...this.tags.map((tag) => tag.onFocus));\n    }\n\n    /** Combined stream of all of the child tags' blur change events. */\n    get tagBlurChanges(): Observable<McTagEvent> {\n        return merge(...this.tags.map((tag) => tag.onBlur));\n    }\n\n    /** Combined stream of all of the child tags' remove change events. */\n    get tagRemoveChanges(): Observable<McTagEvent> {\n        return merge(...this.tags.map((tag) => tag.destroyed));\n    }\n\n    /** The array of selected tags inside tag list. */\n    get selected(): McTag[] | McTag {\n        return this.multiple ? this.selectionModel.selected : this.selectionModel.selected[0];\n    }\n\n    /** Whether the user should be allowed to select multiple tags. */\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith(): (o1: any, o2: any) => boolean {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        this._compareWith = fn;\n\n        if (this.selectionModel) {\n            // A different comparator means the selection could change.\n            this.initializeSelection();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): any {\n        return this._value;\n    }\n\n    set value(value: any) {\n        this.writeValue(value);\n        this._value = value;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get id(): string {\n        return this.tagInput ? this.tagInput.id : this.uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get placeholder(): string {\n        return this.tagInput ? this.tagInput.placeholder : this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n\n    /** Whether any tags or the mcTagInput inside of this tag-list has focus. */\n    get focused(): boolean {\n        return (this.tagInput && this.tagInput.focused) || this.hasFocusedTag();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return (!this.tagInput || this.tagInput.empty) && this.tags.length === 0;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat(): boolean {\n        return !this.empty || this.focused;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        return this.ngControl ? !!this.ngControl.disabled : this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n        this.syncTagsDisabledState();\n    }\n\n    /**\n     * Whether or not this tag list is selectable. When a tag list is not selectable,\n     * the selected states for all the tags inside the tag list are always ignored.\n     */\n    @Input()\n    get selectable(): boolean {\n        return this._selectable;\n    }\n\n    set selectable(value: boolean) {\n        this._selectable = coerceBooleanProperty(value);\n\n        if (this.tags) {\n            this.tags.forEach((tag) => tag.tagListSelectable = this._selectable);\n        }\n    }\n\n    @Input()\n    set tabIndex(value: number) {\n        this.userTabIndex = value;\n        this._tabIndex = value;\n    }\n\n    /**\n     * Event that emits whenever the raw value of the tag-list changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    uid: string = `mc-tag-list-${nextUniqueId++}`;\n\n    /**\n     * User defined tab index.\n     * When it is not null, use user defined tab index. Otherwise use tabIndex\n     */\n    userTabIndex: number | null = null;\n\n    keyManager: FocusKeyManager<McTag>;\n\n    selectionModel: SelectionModel<McTag>;\n\n    tagChanges = new EventEmitter<any>();\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /** Orientation of the tag list. */\n    @Input('orientation') orientation: 'horizontal' | 'vertical' = 'horizontal';\n\n    /** Event emitted when the selected tag list value has been changed by the user. */\n    @Output() readonly change: EventEmitter<McTagListChange> = new EventEmitter<McTagListChange>();\n\n    /** The tag components contained within this tag list. */\n    @ContentChildren(McTag) tags: QueryList<McTag>;\n\n    _tabIndex = 0;\n\n    private _value: any;\n\n    private _required: boolean = false;\n\n    private _placeholder: string;\n\n    private _disabled: boolean = false;\n\n    private _selectable: boolean = true;\n\n    /** The tag input to add more tags */\n    private tagInput: McTagTextControl;\n\n    private _multiple: boolean = false;\n\n    /**\n     * When a tag is destroyed, we store the index of the destroyed tag until the tags\n     * query list notifies about the update. This is necessary because we cannot determine an\n     * appropriate tag that should receive focus until the array of tags updated completely.\n     */\n    private lastDestroyedTagIndex: number | null = null;\n\n    /** Subject that emits when the component has been destroyed. */\n    private destroyed = new Subject<void>();\n\n    /** Subscription to focus changes in the tags. */\n    private tagFocusSubscription: Subscription | null;\n\n    /** Subscription to blur changes in the tags. */\n    private tagBlurSubscription: Subscription | null;\n\n    /** Subscription to selection changes in tags. */\n    private tagSelectionSubscription: Subscription | null;\n\n    /** Subscription to remove changes in tags. */\n    private tagRemoveSubscription: Subscription | null;\n\n    constructor(\n        protected elementRef: ElementRef<HTMLElement>,\n        private changeDetectorRef: ChangeDetectorRef,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        @Optional() private dir: Directionality,\n        @Optional() parentForm: NgForm,\n        @Optional() parentFormGroup: FormGroupDirective,\n        @Optional() @Self() public ngControl: NgControl\n    ) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            this.ngControl.valueAccessor = this;\n        }\n    }\n\n    ngAfterContentInit() {\n        this.keyManager = new FocusKeyManager<McTag>(this.tags)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this.dir ? this.dir.value : 'ltr');\n\n        if (this.dir) {\n            this.dir.change\n                .pipe(takeUntil(this.destroyed))\n                .subscribe((dir) => this.keyManager.withHorizontalOrientation(dir));\n        }\n\n        // Prevents the tag list from capturing focus and redirecting\n        // it back to the first tag when the user tabs out.\n        this.keyManager.tabOut\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(() => {\n                this._tabIndex = -1;\n\n                setTimeout(() => {\n                    this._tabIndex = this.userTabIndex || 0;\n                    this.changeDetectorRef.markForCheck();\n                });\n            });\n\n        // When the list changes, re-subscribe\n        this.tags.changes\n            .pipe(startWith(null), takeUntil(this.destroyed))\n            .subscribe(() => {\n                if (this.disabled) {\n                    // Since this happens after the content has been\n                    // checked, we need to defer it to the next tick.\n                    Promise.resolve().then(() => { this.syncTagsDisabledState(); });\n                }\n\n                this.resetTags();\n\n                // Reset tags selected/deselected status\n                this.initializeSelection();\n\n                // Check to see if we need to update our tab index\n                this.updateTabIndex();\n\n                // Check to see if we have a destroyed tag and need to refocus\n                this.updateFocusForDestroyedTags();\n\n                // Defer setting the value in order to avoid the \"Expression\n                // has changed after it was checked\" errors from Angular.\n                Promise.resolve().then(() => { this.tagChanges.emit(this.tags.toArray()); });\n\n                this.stateChanges.next();\n            });\n    }\n\n    ngOnInit() {\n        this.selectionModel = new SelectionModel<McTag>(this.multiple, undefined, false);\n        this.stateChanges.next();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroyed.next();\n        this.destroyed.complete();\n        this.stateChanges.complete();\n\n        this.dropSubscriptions();\n    }\n\n    // tslint:disable-next-line:no-empty\n    onTouched = () => {};\n\n    // tslint:disable-next-line:no-empty\n    onChange: (value: any) => void = () => {};\n\n    /** Associates an HTML input element with this tag list. */\n    registerInput(inputElement: McTagTextControl): void {\n        this.tagInput = inputElement;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any): void {\n        if (this.tags) {\n            this.setSelectionByValue(value, false);\n        }\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this.onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n        this.stateChanges.next();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick(event: MouseEvent) {\n        if (!this.originatesFromTag(event)) {\n            this.focus();\n        }\n    }\n\n    /**\n     * Focuses the first non-disabled tag in this tag list, or the associated input when there\n     * are no eligible tags.\n     */\n    focus(): void {\n        if (this.disabled) { return; }\n\n        // TODO: ARIA says this should focus the first `selected` tag if any are selected.\n        // Focus on first element if there's no tagInput inside tag-list\n        if (this.tagInput && this.tagInput.focused) {\n            // do nothing\n        } else if (this.tags.length > 0) {\n            this.keyManager.setFirstItemActive();\n            this.stateChanges.next();\n        } else {\n            this.focusInput();\n            this.stateChanges.next();\n        }\n    }\n\n    /** Attempt to focus an input if we have one. */\n    focusInput() {\n        if (this.tagInput) {\n            this.tagInput.focus();\n        }\n    }\n\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n    keydown(event: KeyboardEvent) {\n        const target = event.target as HTMLElement;\n\n        // If they are on an empty input and hit backspace, focus the last tag\n        // tslint:disable-next-line: deprecation\n        if (event.keyCode === BACKSPACE && this.isInputEmpty(target)) {\n            this.keyManager.setLastItemActive();\n            event.preventDefault();\n        } else if (target && target.classList.contains('mc-tag')) {\n            // tslint:disable-next-line: deprecation\n            if (event.keyCode === HOME) {\n                this.keyManager.setFirstItemActive();\n                event.preventDefault();\n            // tslint:disable-next-line: deprecation\n            } else if (event.keyCode === END) {\n                this.keyManager.setLastItemActive();\n                event.preventDefault();\n            } else {\n                this.keyManager.onKeydown(event);\n            }\n\n            this.stateChanges.next();\n        }\n    }\n\n    setSelectionByValue(value: any, isUserInput: boolean = true) {\n        this.clearSelection();\n        this.tags.forEach((tag) => tag.deselect());\n\n        if (Array.isArray(value)) {\n            value.forEach((currentValue) => this.selectValue(currentValue, isUserInput));\n            this.sortValues();\n        } else {\n            const correspondingTag = this.selectValue(value, isUserInput);\n\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what tag the user interacted with last.\n            if (correspondingTag && isUserInput) {\n                this.keyManager.setActiveItem(correspondingTag);\n            }\n        }\n    }\n\n    /** When blurred, mark the field as touched when focus moved outside the tag list. */\n    blur() {\n        if (!this.hasFocusedTag()) {\n            this.keyManager.setActiveItem(-1);\n        }\n\n        if (!this.disabled) {\n            if (this.tagInput) {\n                // If there's a tag input, we should check whether the focus moved to tag input.\n                // If the focus is not moved to tag input, mark the field as touched. If the focus moved\n                // to tag input, do nothing.\n                // Timeout is needed to wait for the focus() event trigger on tag input.\n                setTimeout(() => {\n                    if (!this.focused) {\n                        this.markAsTouched();\n                    }\n                });\n            } else {\n                // If there's no tag input, then mark the field as touched.\n                this.markAsTouched();\n            }\n        }\n    }\n\n    /** Mark the field as touched */\n    markAsTouched() {\n        this.onTouched();\n        this.changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     */\n    protected updateTabIndex(): void {\n        // If we have 0 tags, we should not allow keyboard focus\n        this._tabIndex = this.userTabIndex || (this.tags.length === 0 ? -1 : 0);\n    }\n\n    /**\n     * If the amount of tags changed, we need to update the\n     * key manager state and focus the next closest tag.\n     */\n    protected updateFocusForDestroyedTags() {\n        if (this.lastDestroyedTagIndex != null && this.tags.length) {\n            const newTagIndex = Math.min(this.lastDestroyedTagIndex, this.tags.length - 1);\n            this.keyManager.setActiveItem(newTagIndex);\n        } else if (this.tags.length === 0) {\n            this.focusInput();\n        }\n\n        this.lastDestroyedTagIndex = null;\n    }\n\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of tags.\n     */\n    private isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.tags.length;\n    }\n\n    private isInputEmpty(element: HTMLElement): boolean {\n        if (element && element.nodeName.toLowerCase() === 'input') {\n            const input = element as HTMLInputElement;\n\n            return !input.value;\n        }\n\n        return false;\n    }\n\n    /**\n     * Finds and selects the tag based on its value.\n     * @returns Tag that has the corresponding value.\n     */\n    private selectValue(value: any, isUserInput: boolean = true): McTag | undefined {\n\n        const correspondingTag = this.tags.find((tag) => {\n            return tag.value != null && this._compareWith(tag.value, value);\n        });\n\n        if (correspondingTag) {\n            if (isUserInput) {\n                correspondingTag.selectViaInteraction();\n            } else {\n                correspondingTag.select();\n            }\n\n            this.selectionModel.select(correspondingTag);\n        }\n\n        return correspondingTag;\n    }\n\n    private initializeSelection(): void {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl || this._value) {\n                this.setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n                this.stateChanges.next();\n            }\n        });\n    }\n\n    /**\n     * Deselects every tag in the list.\n     * @param skip Tag that should not be deselected.\n     */\n    private clearSelection(skip?: McTag): void {\n        this.selectionModel.clear();\n        this.tags.forEach((tag) => {\n            if (tag !== skip) {\n                tag.deselect();\n            }\n        });\n        this.stateChanges.next();\n    }\n\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     */\n    private sortValues(): void {\n        if (this._multiple) {\n            this.selectionModel.clear();\n\n            this.tags.forEach((tag) => {\n                if (tag.selected) {\n                    this.selectionModel.select(tag);\n                }\n            });\n            this.stateChanges.next();\n        }\n    }\n\n    /** Emits change event to set the model value. */\n    private propagateChanges(fallbackValue?: any): void {\n        let valueToEmit: any = null;\n\n        if (Array.isArray(this.selected)) {\n            valueToEmit = this.selected.map((tag) => tag.value);\n        } else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.change.emit(new McTagListChange(this, valueToEmit));\n        this.valueChange.emit(valueToEmit);\n        this.onChange(valueToEmit);\n        this.changeDetectorRef.markForCheck();\n    }\n\n    private resetTags() {\n        this.dropSubscriptions();\n        this.listenToTagsFocus();\n        this.listenToTagsSelection();\n        this.listenToTagsRemoved();\n    }\n\n    private dropSubscriptions() {\n        if (this.tagFocusSubscription) {\n            this.tagFocusSubscription.unsubscribe();\n            this.tagFocusSubscription = null;\n        }\n\n        if (this.tagBlurSubscription) {\n            this.tagBlurSubscription.unsubscribe();\n            this.tagBlurSubscription = null;\n        }\n\n        if (this.tagSelectionSubscription) {\n            this.tagSelectionSubscription.unsubscribe();\n            this.tagSelectionSubscription = null;\n        }\n\n        if (this.tagRemoveSubscription) {\n            this.tagRemoveSubscription.unsubscribe();\n            this.tagRemoveSubscription = null;\n        }\n    }\n\n    /** Listens to user-generated selection events on each tag. */\n    private listenToTagsSelection(): void {\n        this.tagSelectionSubscription = this.tagSelectionChanges.subscribe((event) => {\n            if (event.source.selected) {\n                this.selectionModel.select(event.source);\n            } else {\n                this.selectionModel.deselect(event.source);\n            }\n\n            // For single selection tag list, make sure the deselected value is unselected.\n            if (!this.multiple) {\n                this.tags.forEach((tag) => {\n                    if (!this.selectionModel.isSelected(tag) && tag.selected) {\n                        tag.deselect();\n                    }\n                });\n            }\n\n            if (event.isUserInput) {\n                this.propagateChanges();\n            }\n        });\n    }\n\n    /** Listens to user-generated selection events on each tag. */\n    private listenToTagsFocus(): void {\n        this.tagFocusSubscription = this.tagFocusChanges.subscribe((event) => {\n            const tagIndex: number = this.tags.toArray().indexOf(event.tag);\n\n            if (this.isValidIndex(tagIndex)) {\n                this.keyManager.updateActiveItem(tagIndex);\n            }\n            this.stateChanges.next();\n        });\n\n        this.tagBlurSubscription = this.tagBlurChanges.subscribe(() => {\n            this.blur();\n            this.stateChanges.next();\n        });\n    }\n\n    private listenToTagsRemoved(): void {\n        this.tagRemoveSubscription = this.tagRemoveChanges.subscribe((event) => {\n            const tag = event.tag;\n            const tagIndex = this.tags.toArray().indexOf(event.tag);\n\n            // In case the tag that will be removed is currently focused, we temporarily store\n            // the index in order to be able to determine an appropriate sibling tag that will\n            // receive focus.\n            if (this.isValidIndex(tagIndex) && tag.hasFocus) {\n                this.lastDestroyedTagIndex = tagIndex;\n            }\n        });\n    }\n\n    /** Checks whether an event comes from inside a tag element. */\n    private originatesFromTag(event: Event): boolean {\n        let currentElement = event.target as HTMLElement | null;\n\n        while (currentElement && currentElement !== this.elementRef.nativeElement) {\n            if (currentElement.classList.contains('mc-tag')) {\n                return true;\n            }\n\n            currentElement = currentElement.parentElement;\n        }\n\n        return false;\n    }\n\n    /** Checks whether any of the tags is focused. */\n    private hasFocusedTag() {\n        return this.tags.some((tag) => tag.hasFocus);\n    }\n\n    /** Syncs the list's disabled state with the individual tags. */\n    private syncTagsDisabledState() {\n        if (this.tags) {\n            this.tags.forEach((tag) => {\n                tag.disabled = this._disabled;\n            });\n        }\n    }\n}\n\n","import { Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output } from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { hasModifierKey } from '@ptsecurity/cdk/keycodes';\n\nimport { MC_TAGS_DEFAULT_OPTIONS, McTagsDefaultOptions } from './tag-default-options';\nimport { McTagList } from './tag-list.component';\nimport { McTagTextControl } from './tag-text-control';\n\n\n/** Represents an input event on a `mcTagInput`. */\n// tslint:disable-next-line: naming-convention\nexport interface McTagInputEvent {\n    /** The native `<input>` element that the event is being fired for. */\n    input: HTMLInputElement;\n\n    /** The value of the input. */\n    value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds tag-specific behaviors to an input element inside `<mc-form-field>`.\n * May be placed inside or outside of an `<mc-tag-list>`.\n */\n@Directive({\n    selector: 'input[mcTagInputFor]',\n    exportAs: 'mcTagInput, mcTagInputFor',\n    host: {\n        class: 'mc-tag-input mc-input-element',\n        '[id]': 'id',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.placeholder]': 'placeholder || null',\n        '[attr.aria-invalid]': '_tagList && _tagList.ngControl ? _tagList.ngControl.invalid : null',\n        '(keydown)': 'keydown($event)',\n        '(blur)': 'blur()',\n        '(focus)': 'onFocus()',\n        '(input)': 'onInput()'\n    }\n})\nexport class McTagInput implements McTagTextControl, OnChanges {\n    /** Whether the control is focused. */\n    focused: boolean = false;\n\n    /**\n     * The list of key codes that will trigger a tagEnd event.\n     *\n     * Defaults to `[ENTER]`.\n     */\n    @Input('mcTagInputSeparatorKeyCodes')\n    separatorKeyCodes: number[] | Set<number> = this.defaultOptions.separatorKeyCodes;\n\n    /** Emitted when a tag is to be added. */\n    @Output('mcTagInputTokenEnd')\n    tagEnd: EventEmitter<McTagInputEvent> = new EventEmitter<McTagInputEvent>();\n\n    /** The input's placeholder text. */\n    @Input() placeholder: string = '';\n\n    /** Unique id for the input. */\n    @Input() id: string = `mc-tag-list-input-${nextUniqueId++}`;\n\n    /** Register input for tag list */\n    @Input('mcTagInputFor')\n    set tagList(value: McTagList) {\n        if (value) {\n            this._tagList = value;\n            this._tagList.registerInput(this);\n        }\n    }\n\n    // tslint:disable-next-line: naming-convention\n    _tagList: McTagList;\n\n    /**\n     * Whether or not the tagEnd event will be emitted when the input is blurred.\n     */\n    @Input('mcTagInputAddOnBlur')\n    get addOnBlur(): boolean {\n        return this._addOnBlur;\n    }\n\n    set addOnBlur(value: boolean) {\n        this._addOnBlur = coerceBooleanProperty(value);\n    }\n\n    private _addOnBlur: boolean = false;\n\n    /** Whether the input is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this._tagList && this._tagList.disabled);\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    private _disabled: boolean = false;\n\n    /** Whether the input is empty. */\n    get empty(): boolean {\n        return !this.inputElement.value;\n    }\n\n    /** The native input element to which this directive is attached. */\n    private inputElement: HTMLInputElement;\n\n    constructor(\n        private elementRef: ElementRef<HTMLInputElement>,\n        @Inject(MC_TAGS_DEFAULT_OPTIONS) private defaultOptions: McTagsDefaultOptions\n    ) {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        this.inputElement = this.elementRef.nativeElement as HTMLInputElement;\n    }\n\n    ngOnChanges() {\n        this._tagList.stateChanges.next();\n    }\n\n    /** Utility method to make host definition/tests more clear. */\n    keydown(event?: KeyboardEvent) {\n        this.emittagEnd(event);\n    }\n\n    /** Checks to see if the blur should emit the (tagEnd) event. */\n    blur() {\n        if (this.addOnBlur) {\n            this.emittagEnd();\n        }\n\n        this.focused = false;\n        // Blur the tag list if it is not focused\n        if (!this._tagList.focused) {\n            this._tagList.blur();\n        }\n\n        this._tagList.stateChanges.next();\n    }\n\n    /** Checks to see if the (tagEnd) event needs to be emitted. */\n    emittagEnd(event?: KeyboardEvent) {\n        if (!this.inputElement.value && !!event) {\n            this._tagList.keydown(event);\n        }\n\n        if (!event || this.isSeparatorKey(event)) {\n            this.tagEnd.emit({ input: this.inputElement, value: this.inputElement.value });\n\n            if (event) {\n                event.preventDefault();\n            }\n        }\n    }\n\n    onInput() {\n        // Let tag list know whenever the value changes.\n        this._tagList.stateChanges.next();\n    }\n\n    onFocus() {\n        this.focused = true;\n        this._tagList.stateChanges.next();\n    }\n\n    /** Focuses the input. */\n    focus(): void {\n        this.inputElement.focus();\n    }\n\n    /** Checks whether a keycode is one of the configured separators. */\n    private isSeparatorKey(event: KeyboardEvent) {\n        if (hasModifierKey(event)) { return false; }\n\n        const separators = this.separatorKeyCodes;\n        // tslint:disable-next-line: deprecation\n        const keyCode = event.keyCode;\n\n        return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ENTER } from '@ptsecurity/cdk/keycodes';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { MC_TAGS_DEFAULT_OPTIONS, McTagsDefaultOptions } from './tag-default-options';\nimport { McTagInput } from './tag-input';\nimport { McTagList } from './tag-list.component';\nimport { McTag, McTagAvatar, McTagRemove, McTagTrailingIcon } from './tag.component';\n\n\n@NgModule({\n    imports: [CommonModule, PlatformModule],\n    exports: [\n        McTagList,\n        McTag,\n        McTagInput,\n        McTagTrailingIcon,\n        McTagAvatar,\n        McTagRemove\n    ],\n    declarations: [\n        McTagList,\n        McTag,\n        McTagInput,\n        McTagTrailingIcon,\n        McTagAvatar,\n        McTagRemove\n    ],\n    providers: [{\n        provide: MC_TAGS_DEFAULT_OPTIONS,\n        // tslint:disable-next-line: no-object-literal-type-assertion\n        useValue: { separatorKeyCodes: [ENTER] } as McTagsDefaultOptions\n    }]\n})\nexport class McTagsModule {}\n","import {\n    AfterContentChecked,\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Input,\n    NgZone,\n    OnDestroy,\n    Optional,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { FocusKeyManager } from '@ptsecurity/cdk/a11y';\nimport { Direction, Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceNumberProperty } from '@ptsecurity/cdk/coercion';\nimport { END, ENTER, HOME, SPACE } from '@ptsecurity/cdk/keycodes';\nimport { ViewportRuler } from '@ptsecurity/cdk/scrolling';\nimport { merge, of as observableOf, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { McTabLabelWrapper } from './tab-label-wrapper';\n\n\nconst VIEWPORT_THROTTLE_TIME = 150;\nconst SCROLL_DISTANCE_DELIMITER = 3;\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to McTabHeader.\n/** @docs-private */\nexport class McTabHeaderBase {}\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group.\n * When the tabs list's width exceeds the width of the header container,\n * then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n    selector: 'mc-tab-header',\n    templateUrl: 'tab-header.html',\n    styleUrls: ['tab-header.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        class: 'mc-tab-header',\n        '[class.mc-tab-header__pagination-controls_enabled]':\n            'showPaginationControls',\n        '[class.mc-tab-header_rtl]': 'getLayoutDirection() == \\'rtl\\''\n    }\n})\nexport class McTabHeader extends McTabHeaderBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy {\n    /** The index of the active tab. */\n    @Input()\n    get selectedIndex(): number {\n        return this._selectedIndex;\n    }\n    set selectedIndex(value: number) {\n        const coercedValue = coerceNumberProperty(value);\n        this.selectedIndexChanged = this._selectedIndex !== coercedValue;\n        this._selectedIndex = coercedValue;\n\n        if (this.keyManager) {\n            this.keyManager.updateActiveItem(coercedValue);\n        }\n    }\n\n    /** Tracks which element has focus; used for keyboard navigation */\n    get focusIndex(): number {\n        return this.keyManager ? this.keyManager.activeItemIndex! : 0;\n    }\n\n    /** When the focus index is set, we must manually send focus to the correct label */\n    set focusIndex(value: number) {\n        if (\n            !this.isValidIndex(value) ||\n            this.focusIndex === value ||\n            !this.keyManager\n        ) {\n            return;\n        }\n\n        this.keyManager.setActiveItem(value);\n    }\n\n    /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n    get scrollDistance(): number {\n        return this._scrollDistance;\n    }\n    set scrollDistance(v: number) {\n        this._scrollDistance = Math.max(\n            0,\n            Math.min(this.getMaxScrollDistance(), v)\n        );\n\n        // Mark that the scroll distance has changed so that after the view is checked, the CSS\n        // transformation can move the header.\n        this.scrollDistanceChanged = true;\n        this.checkScrollingControls();\n    }\n\n    @ContentChildren(McTabLabelWrapper)\n    labelWrappers: QueryList<McTabLabelWrapper>;\n    @ViewChild('tabListContainer')\n    tabListContainer: ElementRef;\n    @ViewChild('tabList')\n    tabList: ElementRef;\n\n    /** Whether the controls for pagination should be displayed */\n    showPaginationControls = false;\n\n    /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n    disableScrollAfter = true;\n\n    /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n    disableScrollBefore = true;\n\n    /** Event emitted when the option is selected. */\n    @Output()\n    readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n    /** Event emitted when a label is focused. */\n    @Output()\n    readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n    /** The distance in pixels that the tab labels should be translated to the left. */\n    private _scrollDistance = 0;\n\n    /** Whether the header should scroll to the selected index after the view has been checked. */\n    private selectedIndexChanged = false;\n\n    /** Emits when the component is destroyed. */\n    private readonly destroyed = new Subject<void>();\n\n    /**\n     * The number of tab labels that are displayed on the header. When this changes, the header\n     * should re-evaluate the scroll position.\n     */\n    private tabLabelCount: number;\n\n    /** Whether the scroll distance has changed and should be applied after the view is checked. */\n    private scrollDistanceChanged: boolean;\n\n    /** Used to manage focus between the tabs. */\n    private keyManager: FocusKeyManager<McTabLabelWrapper>;\n\n    /** Cached text content of the header. */\n    private currentTextContent: string;\n\n    private _selectedIndex: number = 0;\n\n    constructor(\n        private elementRef: ElementRef,\n        private changeDetectorRef: ChangeDetectorRef,\n        private viewportRuler: ViewportRuler,\n        @Optional() private dir: Directionality,\n        private ngZone: NgZone\n    ) {\n        super();\n    }\n\n    ngAfterContentChecked(): void {\n        // If the number of tab labels have changed, check if scrolling should be enabled\n        if (this.tabLabelCount !== this.labelWrappers.length) {\n            this.updatePagination();\n            this.tabLabelCount = this.labelWrappers.length;\n            this.changeDetectorRef.markForCheck();\n        }\n\n        // If the selected index has changed, scroll to the label and check if the scrolling controls\n        // should be disabled.\n        if (this.selectedIndexChanged) {\n            this.scrollToLabel(this._selectedIndex);\n            this.checkScrollingControls();\n            this.selectedIndexChanged = false;\n            this.changeDetectorRef.markForCheck();\n        }\n\n        // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n        // then translate the header to reflect this.\n        if (this.scrollDistanceChanged) {\n            this.updateTabScrollPosition();\n            this.scrollDistanceChanged = false;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    handleKeydown(event: KeyboardEvent) {\n        switch (event.keyCode) {\n            case HOME:\n                this.keyManager.setFirstItemActive();\n                event.preventDefault();\n                break;\n            case END:\n                this.keyManager.setLastItemActive();\n                event.preventDefault();\n                break;\n            case ENTER:\n            case SPACE:\n                this.selectFocusedIndex.emit(this.focusIndex);\n                event.preventDefault();\n                break;\n            default:\n                this.keyManager.onKeydown(event);\n        }\n    }\n\n    ngAfterContentInit() {\n        const dirChange = this.dir ? this.dir.change : observableOf(null);\n        const resize = this.viewportRuler.change(VIEWPORT_THROTTLE_TIME);\n        const realign = () => {\n            this.updatePagination();\n        };\n\n        this.keyManager = new FocusKeyManager(this.labelWrappers)\n            .withHorizontalOrientation(this.getLayoutDirection())\n            .withWrap();\n\n        this.keyManager.updateActiveItem(0);\n\n        // Defer the first call in order to allow for slower browsers to lay out the elements.\n        // This helps in cases where the user lands directly on a page with paginated tabs.\n        typeof requestAnimationFrame === undefined\n            ? realign()\n            : requestAnimationFrame(realign);\n\n        // On dir change or window resize, update the orientation of\n        // the key manager if the direction has changed.\n        merge(dirChange, resize)\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(() => {\n                realign();\n                this.keyManager.withHorizontalOrientation(\n                    this.getLayoutDirection()\n                );\n            });\n\n        // If there is a change in the focus key manager we need to emit the `indexFocused`\n        // event in order to provide a public event that notifies about focus changes. Also we realign\n        // the tabs container by scrolling the new focused tab into the visible section.\n        this.keyManager.change\n            .pipe(takeUntil(this.destroyed))\n            .subscribe((newFocusIndex) => {\n                this.indexFocused.emit(newFocusIndex);\n                this.setTabFocus(newFocusIndex);\n            });\n    }\n\n    ngOnDestroy() {\n        this.destroyed.next();\n        this.destroyed.complete();\n    }\n\n    /**\n     * Callback for when the MutationObserver detects that the content has changed.\n     */\n    onContentChanges() {\n        const textContent = this.elementRef.nativeElement.textContent;\n\n        // We need to diff the text content of the header, because the MutationObserver callback\n        // will fire even if the text content didn't change which is inefficient and is prone\n        // to infinite loops if a poorly constructed expression is passed in.\n\n        if (textContent !== this.currentTextContent) {\n            this.currentTextContent = textContent;\n\n            const zoneCallback = () => {\n                this.updatePagination();\n                this.changeDetectorRef.markForCheck();\n            };\n\n            // The content observer runs outside the `NgZone` by default, which\n            // means that we need to bring the callback back in ourselves.\n            // TODO: Remove null check for `_ngZone` once it's a required parameter.\n            this.ngZone ? this.ngZone.run(zoneCallback) : zoneCallback();\n        }\n    }\n\n    /**\n     * Updating the view whether pagination should be enabled or not\n     *\n     * WARNING: Calling this method can be very costly in terms of performance.  It should be called\n     * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n     * page.\n     */\n    updatePagination() {\n        this.checkPaginationEnabled();\n        this.checkScrollingControls();\n        this.updateTabScrollPosition();\n    }\n\n    /**\n     * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n     * providing a valid index and return true.\n     */\n    isValidIndex(index: number): boolean {\n        if (!this.labelWrappers) {\n            return true;\n        }\n\n        const tab = this.labelWrappers\n            ? this.labelWrappers.toArray()[index]\n            : null;\n\n        return !!tab && !tab.disabled;\n    }\n\n    /**\n     * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n     * scrolling is enabled.\n     */\n    setTabFocus(tabIndex: number) {\n        if (this.showPaginationControls) {\n            this.scrollToLabel(tabIndex);\n        }\n\n        if (this.labelWrappers && this.labelWrappers.length) {\n            this.labelWrappers.toArray()[tabIndex].focus();\n\n            // Do not let the browser manage scrolling to focus the element, this will be handled\n            // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n            // should be the full width minus the offset width.\n            const containerEl = this.tabListContainer.nativeElement;\n            const dir = this.getLayoutDirection();\n\n            if (dir === 'ltr') {\n                containerEl.scrollLeft = 0;\n            } else {\n                containerEl.scrollLeft =\n                    containerEl.scrollWidth - containerEl.offsetWidth;\n            }\n        }\n    }\n\n    /** The layout direction of the containing app. */\n    getLayoutDirection(): Direction {\n        return this.dir && this.dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n\n    /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n    updateTabScrollPosition() {\n        const scrollDistance = this.scrollDistance;\n        const translateX =\n            this.getLayoutDirection() === 'ltr'\n                ? -scrollDistance\n                : scrollDistance;\n\n        // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n        // seems to cause flickering and overflow in Internet Explorer.\n        // See: https://github.com/angular/material2/issues/10276\n        // We round the `transform` here, because transforms with sub-pixel precision cause some\n        // browsers to blur the content of the element.\n        this.tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n        // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n        // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n        // it doesn't get thrown off.\n        this.tabList.nativeElement.scrollLeft = 0;\n    }\n\n    /**\n     * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n     * the end of the list, respectively). The distance to scroll is computed to be a third of the\n     * length of the tab list view window.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    scrollHeader(scrollDir: ScrollDirection) {\n        const viewLength = this.tabListContainer.nativeElement.offsetWidth;\n\n        // Move the scroll distance one-third the length of the tab list's viewport.\n        this.scrollDistance +=\n            ((scrollDir === 'before' ? -1 : 1) * viewLength) / SCROLL_DISTANCE_DELIMITER;\n    }\n\n    /**\n     * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    scrollToLabel(labelIndex: number) {\n        const selectedLabel = this.labelWrappers\n            ? this.labelWrappers.toArray()[labelIndex]\n            : null;\n\n        if (!selectedLabel) {\n            return;\n        }\n\n        // The view length is the visible width of the tab labels.\n        const viewLength = this.tabListContainer.nativeElement.offsetWidth;\n\n        let labelBeforePos: number;\n        let labelAfterPos: number;\n\n        if (this.getLayoutDirection() === 'ltr') {\n            labelBeforePos = selectedLabel.getOffsetLeft();\n            labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n        } else {\n            labelAfterPos =\n                this.tabList.nativeElement.offsetWidth -\n                selectedLabel.getOffsetLeft();\n            labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n        }\n\n        const beforeVisiblePos = this.scrollDistance;\n        const afterVisiblePos = this.scrollDistance + viewLength;\n\n        if (labelBeforePos < beforeVisiblePos) {\n            // Scroll header to move label to the before direction\n            this.scrollDistance -=\n                beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n        } else if (labelAfterPos > afterVisiblePos) {\n            // Scroll header to move label to the after direction\n            this.scrollDistance +=\n                labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n        }\n    }\n\n    /**\n     * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n     * tab list is wider than the size of the header container, then the pagination controls should\n     * be shown.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    checkPaginationEnabled() {\n        const isEnabled =\n            this.tabList.nativeElement.scrollWidth >\n            this.elementRef.nativeElement.offsetWidth;\n\n        if (!isEnabled) {\n            this.scrollDistance = 0;\n        }\n\n        if (isEnabled !== this.showPaginationControls) {\n            this.changeDetectorRef.markForCheck();\n        }\n\n        this.showPaginationControls = isEnabled;\n    }\n\n    /**\n     * Evaluate whether the before and after controls should be enabled or disabled.\n     * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n     * before button. If the header is at the end of the list (scroll distance is equal to the\n     * maximum distance we can scroll), then disable the after button.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    checkScrollingControls() {\n        // Check if the pagination arrows should be activated.\n        this.disableScrollBefore = this.scrollDistance === 0;\n        this.disableScrollAfter =\n            this.scrollDistance === this.getMaxScrollDistance();\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n     * is equal to the difference in width between the tab list container and tab header container.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    getMaxScrollDistance(): number {\n        const lengthOfTabList = this.tabList.nativeElement.scrollWidth;\n        const viewLength = this.tabListContainer.nativeElement.offsetWidth;\n\n        return lengthOfTabList - viewLength || 0;\n    }\n}\n","import {\n    AfterContentChecked,\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnDestroy,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    InjectionToken,\n    Inject,\n    Optional,\n    Directive, Attribute\n} from '@angular/core';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@ptsecurity/cdk/coercion';\nimport {\n    CanColor,\n    CanColorCtor,\n    mixinColor,\n    mixinDisabled\n} from '@ptsecurity/mosaic/core';\nimport { merge, Subscription } from 'rxjs';\n\nimport { McTab } from './tab';\nimport { McTabHeader } from './tab-header';\n\n\n@Directive({\n    selector: 'mc-tab-group[mc-light-tabs], [mc-tab-nav-bar][mc-light-tabs]',\n    host: { class: 'mc-tab-group_light' }\n})\nexport class McLightTabsCssStyler { }\n\n@Directive({\n    selector: 'mc-tab-group[mc-align-tabs-center], [mc-tab-nav-bar][mc-align-tabs-center]',\n    host: { class: 'mc-tab-group_align-labels-center' }\n})\nexport class McAlignTabsCenterCssStyler { }\n\n@Directive({\n    selector: 'mc-tab-group[mc-align-tabs-end], [mc-tab-nav-bar][mc-align-tabs-end]',\n    host: { class: 'mc-tab-group_align-labels-end' }\n})\nexport class McAlignTabsEndCssStyler { }\n\n@Directive({\n    selector: 'mc-tab-group[mc-stretch-tabs], [mc-tab-nav-bar][mc-stretch-tabs]',\n    host: { class: 'mc-tab-group_stretch-labels' }\n})\nexport class McStretchTabsCssStyler { }\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class McTabChangeEvent {\n    /** Index of the currently-selected tab. */\n    index: number;\n    /** Reference to the currently-selected tab. */\n    tab: McTab;\n}\n\n/** Possible positions for the tab header. */\nexport type McTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface IMcTabsConfig {\n    /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n    animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MC_TABS_CONFIG = new InjectionToken('MC_TABS_CONFIG');\n\n// Boilerplate for applying mixins to McTabGroup.\n/** @docs-private */\nexport class McTabGroupBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) { }\n}\nexport const mcTabGroupMixinBase:\n    CanColorCtor &\n    typeof McTabGroupBase =\n    mixinColor(mixinDisabled(McTabGroupBase));\n\n/**\n * Tab-group component.  Supports basic tab pairs (label + content) and includes\n * keyboard navigation.\n */\n@Component({\n    selector: 'mc-tab-group',\n    exportAs: 'mcTabGroup',\n    templateUrl: 'tab-group.html',\n    styleUrls: ['tab-group.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['color'],\n    host: {\n        class: 'mc-tab-group',\n        '[class.mc-tab-group_dynamic-height]': 'dynamicHeight',\n        '[class.mc-tab-group_inverted-header]': 'headerPosition === \"below\"'\n    }\n})\nexport class McTabGroup extends mcTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor {\n    lightTab: boolean;\n\n    /** Whether the tab group should grow to the size of the active tab. */\n    @Input()\n    get dynamicHeight(): boolean { return this._dynamicHeight; }\n    set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n\n    /** The index of the active tab. */\n    @Input()\n    get selectedIndex(): number | null { return this._selectedIndex; }\n    set selectedIndex(value: number | null) {\n        this.indexToSelect = coerceNumberProperty(value, null);\n    }\n\n    @ContentChildren(McTab) tabs: QueryList<McTab>;\n\n    @ViewChild('tabBodyWrapper') tabBodyWrapper: ElementRef;\n\n    @ViewChild('tabHeader') tabHeader: McTabHeader;\n\n    /** Position of the tab header. */\n    @Input() headerPosition: McTabHeaderPosition = 'above';\n\n    /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n    @Input() animationDuration: string;\n\n    /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n    @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n    /** Event emitted when focus has changed within a tab group. */\n    @Output() readonly focusChange: EventEmitter<McTabChangeEvent> =\n        new EventEmitter<McTabChangeEvent>();\n\n    /** Event emitted when the body animation has completed */\n    @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Event emitted when the tab selection has changed. */\n    @Output() readonly selectedTabChange: EventEmitter<McTabChangeEvent> =\n        new EventEmitter<McTabChangeEvent>(true);\n\n    /** The tab index that should be selected after the content has been checked. */\n    private indexToSelect: number | null = 0;\n\n    /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n    private tabBodyWrapperHeight: number = 0;\n\n    /** Subscription to tabs being added/removed. */\n    private tabsSubscription = Subscription.EMPTY;\n\n    /** Subscription to changes in the tab labels. */\n    private tabLabelSubscription = Subscription.EMPTY;\n    private _dynamicHeight: boolean = false;\n    private _selectedIndex: number | null = null;\n\n    private groupId: number;\n\n    constructor(\n        elementRef: ElementRef,\n        private changeDetectorRef: ChangeDetectorRef,\n        @Attribute('mc-light-tabs') lightTabs: string,\n        @Inject(MC_TABS_CONFIG) @Optional() defaultConfig?: IMcTabsConfig\n    ) {\n        super(elementRef);\n\n        this.lightTab = coerceBooleanProperty(lightTabs);\n\n        this.groupId = nextId++;\n        this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n            defaultConfig.animationDuration : '0ms';\n    }\n\n    /**\n     * After the content is checked, this component knows what tabs have been defined\n     * and what the selected index should be. This is where we can know exactly what position\n     * each tab should be in according to the new selected index, and additionally we know how\n     * a new selected tab should transition in (from the left or right).\n     */\n    ngAfterContentChecked() {\n        // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n        // the amount of tabs changes before the actual change detection runs.\n        const indexToSelect = this.indexToSelect = this.clampTabIndex(this.indexToSelect);\n\n        // If there is a change in selected index, emit a change event. Should not trigger if\n        // the selected index has not yet been initialized.\n        if (this._selectedIndex !== indexToSelect) {\n            const isFirstRun = this._selectedIndex == null;\n\n            if (!isFirstRun) {\n                this.selectedTabChange.emit(this.createChangeEvent(indexToSelect));\n            }\n\n            // Changing these values after change detection has run\n            // since the checked content may contain references to them.\n            Promise.resolve().then(() => {\n                this.tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n                if (!isFirstRun) {\n                    this.selectedIndexChange.emit(indexToSelect);\n                }\n            });\n        }\n\n        // Setup the position for each tab and optionally setup an origin on the next selected tab.\n        this.tabs.forEach((tab: McTab, index: number) => {\n            tab.position = index - indexToSelect;\n\n            // If there is already a selected tab, then set up an origin for the next selected tab\n            // if it doesn't have one already.\n            if (this._selectedIndex != null && tab.position === 0 && !tab.origin) {\n                tab.origin = indexToSelect - this._selectedIndex;\n            }\n        });\n\n        if (this._selectedIndex !== indexToSelect) {\n            this._selectedIndex = indexToSelect;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    ngAfterContentInit() {\n        this.subscribeToTabLabels();\n\n        // Subscribe to changes in the amount of tabs, in order to be\n        // able to re-render the content as new tabs are added or removed.\n        this.tabsSubscription = this.tabs.changes.subscribe(() => {\n            const indexToSelect = this.clampTabIndex(this.indexToSelect);\n\n            // Maintain the previously-selected tab if a new tab is added or removed and there is no\n            // explicit change that selects a different tab.\n            if (indexToSelect === this._selectedIndex) {\n                const tabs = this.tabs.toArray();\n\n                for (let i = 0; i < tabs.length; i++) {\n                    if (tabs[i].isActive) {\n                        // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n                        // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n                        // adding a tab within the `selectedIndexChange` event.\n                        this.indexToSelect = this._selectedIndex = i;\n                        break;\n                    }\n                }\n            }\n\n            this.subscribeToTabLabels();\n            this.changeDetectorRef.markForCheck();\n        });\n    }\n\n    ngOnDestroy() {\n        this.tabsSubscription.unsubscribe();\n        this.tabLabelSubscription.unsubscribe();\n    }\n\n    focusChanged(index: number) {\n        this.focusChange.emit(this.createChangeEvent(index));\n    }\n\n    /** Returns a unique id for each tab label element */\n    getTabLabelId(i: number): string {\n        return `mc-tab-label-${this.groupId}-${i}`;\n    }\n\n    /** Returns a unique id for each tab content element */\n    getTabContentId(i: number): string {\n        return `mc-tab-content-${this.groupId}-${i}`;\n    }\n\n    /**\n     * Sets the height of the body wrapper to the height of the activating tab if dynamic\n     * height property is true.\n     */\n    setTabBodyWrapperHeight(tabHeight: number): void {\n        if (!this._dynamicHeight || !this.tabBodyWrapperHeight) { return; }\n\n        const wrapper: HTMLElement = this.tabBodyWrapper.nativeElement;\n\n        wrapper.style.height = `${this.tabBodyWrapperHeight}px`;\n\n        // This conditional forces the browser to paint the height so that\n        // the animation to the new height can have an origin.\n        if (this.tabBodyWrapper.nativeElement.offsetHeight) {\n            wrapper.style.height = `${tabHeight}px`;\n        }\n    }\n\n    /** Removes the height of the tab body wrapper. */\n    removeTabBodyWrapperHeight(): void {\n        this.tabBodyWrapperHeight = this.tabBodyWrapper.nativeElement.clientHeight;\n        this.tabBodyWrapper.nativeElement.style.height = '';\n        this.animationDone.emit();\n    }\n\n    /** Handle click events, setting new selected index if appropriate. */\n    handleClick(tab: McTab, tabHeader: McTabHeader, index: number) {\n        if (!tab.disabled) {\n            this.selectedIndex = tabHeader.focusIndex = index;\n        }\n    }\n\n    /** Retrieves the tabindex for the tab. */\n    getTabIndex(tab: McTab, index: number): number | null {\n        if (tab.disabled) {\n            return null;\n        }\n\n        return this.selectedIndex === index ? 0 : -1;\n    }\n\n    private createChangeEvent(index: number): McTabChangeEvent {\n        const event = new McTabChangeEvent();\n        event.index = index;\n        if (this.tabs && this.tabs.length) {\n            event.tab = this.tabs.toArray()[index];\n        }\n\n        return event;\n    }\n\n    /**\n     * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n     * on the McTab component, whereas the data binding is inside the McTabGroup. In order for the\n     * binding to be updated, we need to subscribe to changes in it and trigger change detection\n     * manually.\n     */\n    private subscribeToTabLabels() {\n        if (this.tabLabelSubscription) {\n            this.tabLabelSubscription.unsubscribe();\n        }\n\n        this.tabLabelSubscription = merge(...this.tabs.map((tab) => tab.stateChanges))\n            .subscribe(() => this.changeDetectorRef.markForCheck());\n    }\n\n    /** Clamps the given index to the bounds of 0 and the tabs length. */\n    private clampTabIndex(index: number | null): number {\n        // Note the `|| 0`, which ensures that values like NaN can't get through\n        // and which would otherwise throw the component into an infinite loop\n        // (since Mch.max(NaN, 0) === NaN).\n        return Math.min(this.tabs.length - 1, Math.max(index || 0, 0));\n    }\n}\n","import {\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    Input,\n    OnDestroy,\n    ViewEncapsulation\n} from '@angular/core';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport {\n    CanColor,\n    CanColorCtor,\n    CanDisable,\n    CanDisableCtor,\n    HasTabIndex,\n    HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex\n} from '@ptsecurity/mosaic/core';\n\n\n// Boilerplate for applying mixins to McTabNav.\n/** @docs-private */\nexport class McTabNavBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {}\n}\nexport const mcTabNavMixinBase: CanColorCtor &\n    typeof McTabNavBase = mixinColor(McTabNavBase);\n\n/**\n * Navigation component matching the styles of the tab group header.\n */\n@Component({\n    selector: '[mc-tab-nav-bar]',\n    exportAs: 'mcTabNavBar, mcTabNav',\n    inputs: ['color'],\n    templateUrl: 'tab-nav-bar.html',\n    styleUrls: ['tab-nav-bar.css'],\n    host: { class: 'mc-tab-nav-bar' },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McTabNav extends mcTabNavMixinBase\n    implements CanColor {\n        constructor(elementRef: ElementRef) {\n            super(elementRef);\n        }\n     }\n\n// Boilerplate for applying mixins to McTabLink.\nexport class McTabLinkBase {}\nexport const mcTabLinkMixinBase: HasTabIndexCtor & CanDisableCtor &\n    typeof McTabLinkBase = mixinTabIndex(mixinDisabled(McTabLinkBase));\n\n/**\n * Link inside of a `mc-tab-nav-bar`.\n */\n@Directive({\n    selector: '[mc-tab-link], [mcTabLink]',\n    exportAs: 'mcTabLink',\n    inputs: ['disabled', 'tabIndex'],\n    host: {\n        class: 'mc-tab-link',\n        '[attr.aria-current]': 'active',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.tabIndex]': 'tabIndex',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-active]': 'active'\n    }\n})\nexport class McTabLink extends mcTabLinkMixinBase\n    implements OnDestroy, CanDisable, HasTabIndex {\n    /** Whether the link is active. */\n    @Input()\n    get active(): boolean {\n        return this.isActive;\n    }\n    set active(value: boolean) {\n        if (value !== this.isActive) {\n            this.isActive = value;\n        }\n    }\n\n    /** Whether the tab link is active or not. */\n    protected isActive: boolean = false;\n\n    constructor(\n        public elementRef: ElementRef,\n        @Attribute('tabindex') tabIndex: string,\n        private focusMonitor: FocusMonitor\n    ) {\n        super();\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n        this.focusMonitor.monitor(this.elementRef.nativeElement);\n    }\n\n    ngOnDestroy() {\n        this.focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PortalModule } from '@ptsecurity/cdk/portal';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McTab } from './tab';\nimport { McTabBody, McTabBodyPortal } from './tab-body';\nimport { McTabContent } from './tab-content';\nimport {\n    McTabGroup,\n    McLightTabsCssStyler,\n    McAlignTabsCenterCssStyler,\n    McAlignTabsEndCssStyler,\n    McStretchTabsCssStyler\n} from './tab-group';\nimport { McTabHeader } from './tab-header';\nimport { McTabLabel } from './tab-label';\nimport { McTabLabelWrapper } from './tab-label-wrapper';\nimport { McTabLink, McTabNav } from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        McCommonModule,\n        PortalModule,\n        A11yModule\n    ],\n    // Don't export all components because some are only to be used internally.\n    exports: [\n        McCommonModule,\n        McTabGroup,\n        McTabLabel,\n        McTab,\n        McTabNav,\n        McTabLink,\n        McTabContent,\n        McLightTabsCssStyler,\n        McAlignTabsCenterCssStyler,\n        McAlignTabsEndCssStyler,\n        McStretchTabsCssStyler\n    ],\n    declarations: [\n        McTabGroup,\n        McTabLabel,\n        McTab,\n        McTabLabelWrapper,\n        McTabNav,\n        McTabLink,\n        McTabBody,\n        McTabBodyPortal,\n        McTabHeader,\n        McTabContent,\n        McLightTabsCssStyler,\n        McAlignTabsCenterCssStyler,\n        McAlignTabsEndCssStyler,\n        McStretchTabsCssStyler\n    ]\n})\nexport class McTabsModule {}\n","import { InjectionToken } from '@angular/core';\n\n\n/** Default options, for the chips module, that can be overridden. */\n// tslint:disable-next-line: naming-convention\nexport interface McTagsDefaultOptions {\n    /** The list of key codes that will trigger a chipEnd event. */\n    separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MC_TAGS_DEFAULT_OPTIONS = new InjectionToken<McTagsDefaultOptions>('mc-tags-default-options');\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    NgZone,\n    OnDestroy,\n    Output,\n    QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { BACKSPACE, DELETE, SPACE } from '@ptsecurity/cdk/keycodes';\nimport {\n    CanColor,\n    CanColorCtor,\n    CanDisable,\n    CanDisableCtor,\n    mixinColor,\n    mixinDisabled\n} from '@ptsecurity/mosaic/core';\nimport { McIcon } from '@ptsecurity/mosaic/icon';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\n\n// tslint:disable-next-line:naming-convention\nexport interface McTagEvent {\n    tag: McTag;\n}\n\n/** Event object emitted by McTag when selected or deselected. */\nexport class McTagSelectionChange {\n    constructor(public source: McTag, public selected: boolean, public isUserInput = false) {}\n}\n\n\nconst TAG_ATTRIBUTE_NAMES = ['mc-basic-tag'];\n\n/**\n * Dummy directive to add CSS class to tag avatar.\n * @docs-private\n */\n@Directive({\n    selector: 'mc-tag-avatar, [mcTagAvatar]',\n    host: { class: 'mc-tag-avatar' }\n})\nexport class McTagAvatar {}\n\n/**\n * Dummy directive to add CSS class to tag trailing icon.\n * @docs-private\n */\n@Directive({\n    selector: 'mc-tag-trailing-icon, [mcTagTrailingIcon]',\n    host: { class: 'mc-tag-trailing-icon' }\n})\nexport class McTagTrailingIcon {}\n\nexport class McTagBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const _McTagMixinBase: CanColorCtor & CanDisableCtor & typeof McTagBase = mixinColor(mixinDisabled(McTagBase));\n\n\n@Component({\n    selector: 'mc-tag, [mc-tag], mc-basic-tag, [mc-basic-tag]',\n    exportAs: 'mcTag',\n    templateUrl: 'tag.partial.html',\n    styleUrls: ['./tag.css'],\n    inputs: ['color', 'disabled'],\n    host: {\n        class: 'mc-tag',\n        '[attr.tabindex]': 'disabled ? null : -1',\n        '[class.mc-tag-selected]': 'selected',\n        '[class.mc-tag-with-avatar]': 'avatar',\n        '[class.mc-tag-with-trailing-icon]': 'trailingIcon || removeIcon',\n        '[class.mc-tag-disabled]': 'disabled',\n        '[class.mc-disabled]': 'disabled',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': 'handleClick($event)',\n        '(keydown)': 'handleKeydown($event)',\n        '(focus)': 'focus()',\n        '(blur)': 'blur()'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McTag extends _McTagMixinBase implements IFocusableOption, OnDestroy, CanColor, CanDisable {\n    /** Emits when the tag is focused. */\n    readonly onFocus = new Subject<McTagEvent>();\n\n    /** Emits when the tag is blured. */\n    readonly onBlur = new Subject<McTagEvent>();\n\n    nativeElement: HTMLElement;\n\n    /** Whether the tag has focus. */\n    hasFocus: boolean = false;\n\n    /** Whether the tag list is selectable */\n    tagListSelectable: boolean = true;\n\n    @ContentChildren(McIcon) contentChildren: QueryList<McIcon>;\n\n    /** The tag avatar */\n    @ContentChild(McTagAvatar) avatar: McTagAvatar;\n\n    /** The tag's trailing icon. */\n    @ContentChild(McTagTrailingIcon) trailingIcon: McTagTrailingIcon;\n\n    /** The tag's remove toggler. */\n    @ContentChild(forwardRef(() => McTagRemove)) removeIcon: McTagRemove;\n\n    /** Emitted when the tag is selected or deselected. */\n    @Output() readonly selectionChange: EventEmitter<McTagSelectionChange> =\n        new EventEmitter<McTagSelectionChange>();\n\n    /** Emitted when the tag is destroyed. */\n    @Output() readonly destroyed: EventEmitter<McTagEvent> = new EventEmitter<McTagEvent>();\n\n    /** Emitted when a tag is to be removed. */\n    @Output() readonly removed: EventEmitter<McTagEvent> = new EventEmitter<McTagEvent>();\n\n    /** Whether the tag is selected. */\n    @Input()\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    set selected(value: boolean) {\n        const coercedValue = coerceBooleanProperty(value);\n\n        if (coercedValue !== this._selected) {\n            this._selected = coercedValue;\n            this.dispatchSelectionChange();\n        }\n    }\n\n    private _selected: boolean = false;\n\n    /** The value of the tag. Defaults to the content inside `<mc-tag>` tags. */\n    @Input()\n    get value(): any {\n        return this._value !== undefined\n            ? this._value\n            : this.elementRef.nativeElement.textContent;\n    }\n\n    set value(value: any) {\n        this._value = value;\n    }\n\n    private _value: any;\n\n    /**\n     * Whether or not the tag is selectable. When a tag is not selectable,\n     * changes to its selected state are always ignored. By default a tag is\n     * selectable, and it becomes non-selectable if its parent tag list is\n     * not selectable.\n     */\n    @Input()\n    get selectable(): boolean {\n        return this._selectable && this.tagListSelectable;\n    }\n\n    set selectable(value: boolean) {\n        this._selectable = coerceBooleanProperty(value);\n    }\n\n    private _selectable: boolean = true;\n\n    /**\n     * Determines whether or not the tag displays the remove styling and emits (removed) events.\n     */\n    @Input()\n    get removable(): boolean {\n        return this._removable;\n    }\n\n    set removable(value: boolean) {\n        this._removable = coerceBooleanProperty(value);\n    }\n\n    private _removable: boolean = true;\n\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value !== this.disabled) {\n            this._disabled = value;\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    constructor(public elementRef: ElementRef, private _ngZone: NgZone) {\n        super(elementRef);\n\n        this.addHostClassName();\n\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        this.addClassModificatorForIcons();\n    }\n\n    addClassModificatorForIcons() {\n        const icons = this.contentChildren.map((item) => item._elementRef.nativeElement);\n\n        if (icons.length === 1) {\n            const iconElement = icons[0];\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-left-icon');\n                }\n\n                if (iconElement.previousSibling) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-right-icon');\n                }\n            }\n        } else if (icons.length > 1) {\n            const firstIconElement = icons[0];\n            const secondIconElement = icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n\n    addHostClassName() {\n        // Add class for the different tags\n        for (const attr of TAG_ATTRIBUTE_NAMES) {\n            if (\n                this.elementRef.nativeElement.hasAttribute(attr) ||\n                this.elementRef.nativeElement.tagName.toLowerCase() === attr\n            ) {\n                    (this.elementRef.nativeElement as HTMLElement).classList.add(attr);\n\n                    return;\n            }\n        }\n        (this.elementRef.nativeElement as HTMLElement).classList.add('mc-standard-tag');\n    }\n\n    ngOnDestroy() {\n        this.destroyed.emit({ tag: this });\n    }\n\n    select(): void {\n        if (!this._selected) {\n            this._selected = true;\n            this.dispatchSelectionChange();\n        }\n    }\n\n    deselect(): void {\n        if (this._selected) {\n            this._selected = false;\n            this.dispatchSelectionChange();\n        }\n    }\n\n    selectViaInteraction(): void {\n        if (!this._selected) {\n            this._selected = true;\n            this.dispatchSelectionChange(true);\n        }\n    }\n\n    toggleSelected(isUserInput: boolean = false): boolean {\n        this._selected = !this.selected;\n        this.dispatchSelectionChange(isUserInput);\n\n        return this.selected;\n    }\n\n    /** Allows for programmatic focusing of the tag. */\n    focus(): void {\n        if (!this.hasFocus) {\n            this.elementRef.nativeElement.focus();\n            this.onFocus.next({ tag: this });\n        }\n        this.hasFocus = true;\n    }\n\n    /**\n     * Allows for programmatic removal of the tag. Called by the McTagList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the tag from the DOM.\n     */\n    remove(): void {\n        if (this.removable) {\n            this.removed.emit({ tag: this });\n        }\n    }\n\n    handleClick(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n        } else {\n            event.stopPropagation();\n        }\n    }\n\n    handleKeydown(event: KeyboardEvent): void {\n        if (this.disabled) { return; }\n\n        // tslint:disable-next-line: deprecation\n        switch (event.keyCode) {\n            case DELETE:\n            case BACKSPACE:\n                // If we are removable, remove the focused tag\n                this.remove();\n                // Always prevent so page navigation does not occur\n                event.preventDefault();\n                break;\n            case SPACE:\n                // If we are selectable, toggle the focused tag\n                if (this.selectable) {\n                    this.toggleSelected(true);\n                }\n\n                // Always prevent space from scrolling the page since the list has focus\n                event.preventDefault();\n                break;\n            default:\n        }\n    }\n\n    blur(): void {\n        // When animations are enabled, Angular may end up removing the tag from the DOM a little\n        // earlier than usual, causing it to be blurred and throwing off the logic in the tag list\n        // that moves focus not the next item. To work around the issue, we defer marking the tag\n        // as not focused until the next time the zone stabilizes.\n        this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                this._ngZone.run(() => {\n                    this.hasFocus = false;\n                    this.onBlur.next({ tag: this });\n                });\n            });\n    }\n\n    private dispatchSelectionChange(isUserInput = false) {\n        this.selectionChange.emit({\n            source: this,\n            isUserInput,\n            selected: this._selected\n        });\n    }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mc-tag>\n *       <mc-icon mcTagRemove>cancel</mc-icon>\n *     </mc-tag>`\n *\n * You *may* use a custom icon, but you may need to override the `mc-tag-remove` positioning\n * styles to properly center the icon within the tag.\n */\n@Directive({\n    selector: '[mcTagRemove]',\n    host: {\n        class: 'mc-tag-remove mc-tag-trailing-icon',\n        '(click)': 'handleClick($event)'\n    }\n})\nexport class McTagRemove {\n    constructor(protected parentTag: McTag) {}\n\n    /** Calls the parent tag's public `remove()` method if applicable. */\n    handleClick(event: Event): void {\n        if (this.parentTag.removable) {\n            this.parentTag.remove();\n        }\n\n        // We need to stop event propagation because otherwise the event will bubble up to the\n        // form field and cause the `onContainerClick` method to be invoked. This method would then\n        // reset the focused tag that has been focused after tag removal. Usually the parent\n        // the parent click listener of the `McTag` would prevent propagation, but it can happen\n        // that the tag is being removed before the event bubbles up.\n        event.stopPropagation();\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, CanColorCtor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressSpinnerBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressSpinnerMixinBase:\n    CanColorCtor &\n    typeof McProgressSpinnerBase =\n        mixinColor(McProgressSpinnerBase);\n\nconst MAX_DASH_ARRAY = 273;\n\n@Component({\n    selector: 'mc-progress-spinner',\n    templateUrl: './progress-spinner.component.html',\n    styleUrls: ['./progress-spinner.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-spinner',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressSpinner extends _McProgressSpinnerMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-spinner-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressSpinnerMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n\n    get dashOffsetPercent(): string {\n        return `${MAX_DASH_ARRAY - this.percentage * MAX_DASH_ARRAY}%`;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McProgressSpinner } from './progress-spinner.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressSpinner\n    ],\n    declarations: [\n        McProgressSpinner\n    ]\n})\nexport class McProgressSpinnerModule {}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef,\n    Input, OnDestroy, OnInit, Optional, Output, QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { UniqueSelectionDispatcher } from '@ptsecurity/cdk/collections';\n\nimport {\n    CanColor, CanColorCtor,\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/** Change event object emitted by McRadio. */\nexport class McRadioChange {\n    constructor(\n        /** The McRadioButton that emits the change event. */\n        public source: McRadioButton,\n        /** The value of the McRadioButton. */\n        public value: any) {}\n}\n\n// Boilerplate for applying mixins to McRadioGroup.\n/** @docs-private */\nexport class McRadioGroupBase {}\nexport const _McRadioGroupMixinBase: CanDisableCtor & typeof McRadioGroupBase = mixinDisabled(McRadioGroupBase);\n\n/**\n * Provider Expression that allows mc-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McRadioGroup),\n    multi: true\n};\n\n@Directive({\n    selector: 'mc-radio-group',\n    exportAs: 'mcRadioGroup',\n    providers: [MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n    host: {\n        role: 'radiogroup',\n        class: 'mc-radio-group'\n    },\n    inputs: ['disabled']\n})\nexport class McRadioGroup extends _McRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    @Input()\n    get name(): string { return this._name; }\n    set name(value: string) {\n        this._name = value;\n        this.updateRadioButtonNames();\n    }\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this.markRadiosForCheck();\n    }\n\n    /** Value of the radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n\n            this.updateSelectedRadioFromValue();\n            this.checkSelectedRadioButton();\n        }\n    }\n\n    /** Whether the radio button is selected. */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: McRadioButton | null) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this.checkSelectedRadioButton();\n    }\n\n    /** Whether the radio group is disabled */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /** Whether the radio group is required */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** Child radio buttons. */\n    @ContentChildren(forwardRef(() => McRadioButton), { descendants: true })\n    _radios: QueryList<McRadioButton>;\n\n    /**\n     * Selected value for group. Should equal the value of the selected radio button if there *is*\n     * a corresponding radio button with a matching value. If there is *not* such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    private _value: any = null;\n\n    /** The HTML name attribute applied to radio buttons in this group. */\n    private _name: string = `mc-radio-group-${nextUniqueId++}`;\n\n    /** The currently selected radio button. Should match value. */\n    private _selected: McRadioButton | null = null;\n\n    /** Whether the `value` has been set to its initial value. */\n    private _isInitialized: boolean = false;\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    private _labelPosition: 'before' | 'after' = 'after';\n\n    /** Whether the radio group is disabled. */\n    private _disabled: boolean = false;\n\n    /** Whether the radio group is required. */\n    private _required: boolean = false;\n\n    constructor(\n        private readonly _changeDetector: ChangeDetectorRef\n    ) {\n        super();\n    }\n\n    /** The method to be called in order to update ngModel */\n    // tslint:disable-next-line\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @docs-private\n     */\n    // tslint:disable-next-line\n    onTouched: () => any = () => {};\n\n    checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on McRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the McRadioGroup.\n        this._isInitialized = true;\n    }\n\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        if (this._isInitialized) {\n            this.change.emit(new McRadioChange(this._selected!, this._value));\n        }\n    }\n\n    markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach((radio) => radio.markForCheck());\n        }\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n\n    private updateRadioButtonNames(): void {\n        if (this._radios) {\n            this._radios.forEach((radio) => {\n                radio.name = this.name;\n            });\n        }\n    }\n\n    /** Updates the `selected` radio button from the internal _value state. */\n    private updateSelectedRadioFromValue(): void {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n        if (this._radios != null && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach((radio) => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n}\n\n\n// Boilerplate for applying mixins to McRadioButton.\n/** @docs-private */\nexport class McRadioButtonBase {\n    // Since the disabled property is manually defined for the McRadioButton and isn't set up in\n    // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n    // defined to properly work.\n    disabled: boolean;\n\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McRadioButtonMixinBase:\n    CanColorCtor &\n    HasTabIndexCtor &\n    typeof McRadioButtonBase =\n        mixinColor(mixinTabIndex(McRadioButtonBase));\n\n\n@Component({\n    selector: 'mc-radio-button',\n    templateUrl: 'radio.component.html',\n    styleUrls: ['radio.css'],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    exportAs: 'mcRadioButton',\n    host: {\n        class: 'mc-radio-button',\n        '[attr.id]': 'id',\n        '[class.mc-checked]': 'checked',\n        '[class.mc-disabled]': 'disabled',\n        '(focus)': '_inputElement.nativeElement.focus()'\n    }\n})\nexport class McRadioButton extends _McRadioButtonMixinBase\n    implements OnInit, OnDestroy, CanColor, HasTabIndex {\n\n    private readonly _uniqueId: string = `mc-radio-${++nextUniqueId}`;\n\n    /* tslint:disable:member-ordering */\n\n    /** The unique ID for the radio button. */\n    @Input() id: string = this._uniqueId;\n\n    /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n    @Input() name: string;\n\n    /** Used to set the 'aria-label' attribute on the underlying input element. */\n    @Input('aria-label') ariaLabel: string;\n\n    /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n    @Input('aria-labelledby') ariaLabelledby: string;\n\n    /** The 'aria-describedby' attribute is read after the element's label and field type. */\n    @Input('aria-describedby') ariaDescribedby: string;\n\n    /** Whether this radio button is checked. */\n    @Input()\n    get checked(): boolean { return this._checked; }\n    set checked(value: boolean) {\n        const newCheckedState = toBoolean(value);\n\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** The value of this radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(value: any) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup != null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n\n    /** Whether the radio button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n    }\n    set disabled(value: boolean) {\n        const newDisabledState = toBoolean(value);\n\n        if (this._disabled !== newDisabledState) {\n\n            this._disabled = newDisabledState;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** Whether the radio button is required. */\n    @Input()\n    get required(): boolean {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    private _labelPosition: 'before' | 'after';\n\n    /** The native `<input type=radio>` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** The parent radio group. May or may not be present. */\n    radioGroup: McRadioGroup;\n\n    @Input()\n    isFocused: boolean = false;\n\n    /** ID of the native input element inside `<mc-radio-button>` */\n    get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n    /** Whether this radio is checked. */\n    private _checked: boolean = false;\n\n    /** Whether this radio is disabled. */\n    private _disabled: boolean;\n\n    /** Whether this radio is required. */\n    private _required: boolean;\n\n    /** Value assigned to this radio. */\n    private _value: any = null;\n\n    /** Unregister function for _radioDispatcher */\n    // tslint:disable-next-line\n    private readonly removeUniqueSelectionListener: () => void = () => {};\n\n    constructor(\n        @Optional() radioGroup: McRadioGroup,\n        elementRef: ElementRef,\n        private readonly _changeDetector: ChangeDetectorRef,\n        private readonly _radioDispatcher: UniqueSelectionDispatcher\n    ) {\n\n        super(elementRef);\n\n        this.radioGroup = radioGroup;\n\n        this.removeUniqueSelectionListener =\n            _radioDispatcher.listen((id: string, name: string) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n\n    ngOnDestroy() {\n        this.removeUniqueSelectionListener();\n    }\n\n    /** Focuses the radio button. */\n    // tslint:disable-next-line\n    focus(): void {}\n\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n\n    onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n\n    onInputChange(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this.emitChangeEvent();\n\n        if (this.radioGroup) {\n            this.radioGroup.controlValueAccessorChangeFn(this.value);\n            this.radioGroup.touch();\n            if (groupValueChanged) {\n                this.radioGroup.emitChangeEvent();\n            }\n        }\n    }\n\n    /** Dispatch change event with current value. */\n    private emitChangeEvent(): void {\n        this.change.emit(new McRadioChange(this, this._value));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McRadioButton, McRadioGroup } from './radio.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule],\n    exports: [McRadioGroup, McRadioButton],\n    declarations: [McRadioGroup, McRadioButton]\n})\nexport class McRadioModule {\n}\n","import { Directive, Input } from '@angular/core';\n\nimport { CdkTreeNodeDef } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodeDef]',\n    inputs: ['when: mcTreeNodeDefWhen'],\n    providers: [{ provide: CdkTreeNodeDef, useExisting: McTreeNodeDef }]\n})\nexport class McTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n    @Input('mcTreeNode') data: T;\n}\n","import { Directive, Input, OnInit } from '@angular/core';\nimport { CdkTreeNodePadding } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodePadding]',\n    providers: [{ provide: CdkTreeNodePadding, useExisting: McTreeNodePadding }]\n})\nexport class McTreeNodePadding<T> extends CdkTreeNodePadding<T> implements OnInit {\n    @Input('mcTreeNodePadding') level: number;\n\n    @Input('mcTreeNodePaddingIndent') indent: number;\n\n    baseLeftPadding: number = 12;\n    /* tslint:disable-next-line:naming-convention */\n    _indent: number = 20;\n\n    withIcon: boolean;\n    iconWidth: number = 20;\n\n    get leftPadding(): number {\n        return (this.withIcon ? 0 : this.iconWidth) + this.baseLeftPadding;\n    }\n\n    paddingIndent(): string | null {\n        const nodeLevel = (this.treeNode.data && this.tree.treeControl.getLevel)\n            ? this.tree.treeControl.getLevel(this.treeNode.data)\n            : null;\n\n        const level = this.level || nodeLevel;\n\n        return level ? `${(level * this._indent) + this.leftPadding}px` : `${this.baseLeftPadding}px`;\n    }\n\n    ngOnInit(): void {\n        this.withIcon = this.tree.treeControl.isExpandable(this.treeNode.data);\n\n        this.setPadding();\n    }\n}\n","import { Directive } from '@angular/core';\nimport { CdkTreeNodeToggle } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodeToggle]',\n    host: {\n        '(click)': 'toggle($event)'\n    },\n    providers: [{ provide: CdkTreeNodeToggle, useExisting: McTreeNodeToggle }]\n})\nexport class McTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {}\n","import {\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    Output,\n    ElementRef,\n    Inject,\n    Optional,\n    InjectionToken\n} from '@angular/core';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { CdkTreeNode } from '@ptsecurity/cdk/tree';\nimport { CanDisable, toBoolean } from '@ptsecurity/mosaic/core';\n\n\n/* tslint:disable-next-line:naming-convention */\nexport interface McTreeOptionParentComponent {\n    multiple: boolean;\n    selectionModel: SelectionModel<McTreeOption>;\n    setFocusedOption: any;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MC_TREE_OPTION_PARENT_COMPONENT =\n    new InjectionToken<McTreeOptionParentComponent>('MC_TREE_OPTION_PARENT_COMPONENT');\n\nexport class McTreeOptionChange {\n    constructor(public source: McTreeOption, public isUserInput = false) {}\n}\n\nlet uniqueIdCounter: number = 0;\n\n@Component({\n    selector: 'mc-tree-option',\n    exportAs: 'mcTreeOption',\n    host: {\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'getTabIndex()',\n\n        '[attr.disabled]': 'disabled || null',\n\n        class: 'mc-tree-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-active]': 'active',\n\n        '(click)': 'selectViaInteraction()'\n    },\n    templateUrl: './tree-option.html',\n    providers: [{ provide: CdkTreeNode, useExisting: McTreeOption }]\n})\nexport class McTreeOption extends CdkTreeNode<McTreeOption> implements CanDisable {\n    @Output() readonly onSelectionChange = new EventEmitter<McTreeOptionChange>();\n\n    @Input() value: any;\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    // @Input()\n    // get selected(): boolean {\n    //     return this.treeSelection.selectionModel && this.treeSelection.selectionModel.isSelected(this) || false;\n    // }\n\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            // this.treeSelection._reportValueChange();\n        }\n    }\n\n    private _selected: boolean = false;\n\n    /**\n     * Whether or not the option is currently active and ready to be selected.\n     * An active option displays styles as if it is focused, but the\n     * focus is actually retained somewhere else. This comes in handy\n     * for components like autocomplete where focus must remain on the input.\n     */\n    get active(): boolean {\n        return this._active;\n    }\n\n    private _active = false;\n\n    get id(): string {\n        return this._id;\n    }\n\n    private _id = `mc-tree-option-${uniqueIdCounter++}`;\n\n    get multiple(): boolean {\n        return this.parent.multiple;\n    }\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_TREE_OPTION_PARENT_COMPONENT) private readonly parent: McTreeOptionParentComponent\n    ) {\n        // todo any\n        super(elementRef, parent as any);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.parent.selectionModel) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.parent.selectionModel.select(this);\n        } else {\n            this.parent.selectionModel.deselect(this);\n        }\n\n        // this._changeDetector.markForCheck();\n    }\n\n    /**\n     * This method sets display styles on the option to make it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setActiveStyles(): void {\n        if (!this._active) {\n            this._active = true;\n\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    /**\n     * This method removes display styles on the option that made it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setInactiveStyles(): void {\n        if (this._active) {\n            this._active = false;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    getHeight(): number {\n        const clientRects = this.elementRef.nativeElement.getClientRects();\n        if (clientRects.length) {\n            return clientRects[0].height;\n        }\n\n        return 0;\n    }\n\n    focus(): void {\n        const element = this.getHostElement();\n\n        if (typeof element.focus === 'function') {\n            element.focus();\n        }\n    }\n\n    // todo старая реализация, нужно восстановить tree-selection\n    // handleClick(): void {\n    //     if (this.disabled) { return; }\n    //\n    //     this.treeSelection.setFocusedOption(this);\n    // }\n\n    /**\n     * The displayed value of the option. It is necessary to show the selected option in the\n     * select's trigger.\n     */\n    get viewValue(): string {\n        // TODO(kara): Add input property alternative for node envs.\n        return (this.getHostElement().textContent || '').trim();\n    }\n\n    select(): void {\n        if (!this._selected) {\n            this._selected = true;\n\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    deselect(): void {\n        if (this._selected) {\n            this._selected = false;\n\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    selectViaInteraction(): void {\n        if (!this.disabled) {\n            this._selected = this.multiple ? !this._selected : true;\n\n            this.changeDetectorRef.markForCheck();\n            this.emitSelectionChangeEvent(true);\n\n            if (this.parent.setFocusedOption) {\n                this.parent.setFocusedOption(this);\n            }\n        }\n    }\n\n    emitSelectionChangeEvent(isUserInput = false): void {\n        this.onSelectionChange.emit(new McTreeOptionChange(this, isUserInput));\n    }\n\n    getHostElement(): HTMLElement {\n        return this.elementRef.nativeElement;\n    }\n\n    getTabIndex(): string {\n        return this.disabled ? '-1' : '0';\n    }\n}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    EventEmitter,\n    Input,\n    IterableDiffer,\n    IterableDiffers,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    ElementRef\n} from '@angular/core';\nimport { NodeDef, ViewData } from '@angular/core/src/view';\nimport { ActiveDescendantKeyManager } from '@ptsecurity/cdk/a11y';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, SPACE } from '@ptsecurity/cdk/keycodes';\nimport { CdkTree, CdkTreeNodeOutlet } from '@ptsecurity/cdk/tree';\nimport {\n    CanDisable,\n    CanDisableCtor,\n    HasTabIndex,\n    HasTabIndexCtor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\nimport { Subject } from 'rxjs';\n\nimport { MC_TREE_OPTION_PARENT_COMPONENT, McTreeOption } from './tree-option';\n\n\nexport class McTreeNavigationChange {\n    constructor(\n        public source: McTreeSelection,\n        public option: McTreeOption\n    ) {}\n}\n\nexport class McTreeSelectionChange {\n    constructor(public source: McTreeSelection, public option: McTreeOption) {}\n}\n\nclass McTreeSelectionBase<T> extends CdkTree<T> {\n    constructor(differs: IterableDiffers, changeDetectorRef: ChangeDetectorRef) {\n        super(differs, changeDetectorRef);\n    }\n}\n\n/* tslint:disable-next-line:naming-convention */\nconst McTreeSelectionBaseMixin: HasTabIndexCtor & CanDisableCtor &\n    typeof McTreeSelectionBase = mixinTabIndex(mixinDisabled(McTreeSelectionBase));\n\n\n@Component({\n    selector: 'mc-tree-selection',\n    exportAs: 'mcTreeSelection',\n    template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n    host: {\n        class: 'mc-tree-selection',\n\n        '[attr.tabindex]': 'tabIndex',\n\n        '(keydown)': 'onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    styleUrls: ['./tree.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [\n        { provide: MC_TREE_OPTION_PARENT_COMPONENT, useExisting: McTreeSelection },\n        { provide: CdkTree, useExisting: McTreeSelection }\n    ]\n})\nexport class McTreeSelection extends McTreeSelectionBaseMixin<McTreeOption>\n    implements AfterContentInit, CanDisable, HasTabIndex {\n\n    @ViewChild(CdkTreeNodeOutlet) nodeOutlet: CdkTreeNodeOutlet;\n\n    @ContentChildren(McTreeOption) options: QueryList<McTreeOption>;\n\n    keyManager: ActiveDescendantKeyManager<McTreeOption>;\n\n    selectionModel: SelectionModel<McTreeOption>;\n\n    tabIndex: number;\n    multiple: boolean;\n    autoSelect: boolean;\n    noUnselect: boolean;\n\n    // todo temporary solution\n    withShift: boolean;\n    withCtrl: boolean;\n\n\n    @Output() readonly navigationChange = new EventEmitter<McTreeNavigationChange>();\n\n    @Output() readonly selectionChange = new EventEmitter<McTreeSelectionChange>();\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(rawValue: boolean) {\n        const value = toBoolean(rawValue);\n\n        if (this._disabled !== value) {\n            this._disabled = value;\n\n            if (this._disabled) {\n                /* tslint:disable-next-line:no-console */\n                console.log('need disable all options');\n            } else {\n                /* tslint:disable-next-line:no-console */\n                console.log('need enable all options');\n            }\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    private readonly destroy = new Subject<void>();\n\n    constructor(\n        private elementRef: ElementRef,\n        differs: IterableDiffers,\n        changeDetectorRef: ChangeDetectorRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('multiple') multiple: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string\n    ) {\n        super(differs, changeDetectorRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.multiple = multiple === null ? false : toBoolean(multiple);\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.selectionModel = new SelectionModel<McTreeOption>(this.multiple);\n    }\n\n    ngAfterContentInit(): void {\n        this.keyManager = new ActiveDescendantKeyManager<McTreeOption>(this.options)\n            .withVerticalOrientation(true)\n            .withHorizontalOrientation(null);\n    }\n\n    ngOnDestroy() {\n        this.destroy.next();\n\n        this.destroy.complete();\n    }\n\n    onKeyDown(event: KeyboardEvent) {\n        // tslint:disable-next-line: deprecation\n        const keyCode = event.keyCode;\n        this.withShift = event.shiftKey;\n        this.withCtrl = event.ctrlKey;\n\n        switch (keyCode) {\n            case LEFT_ARROW:\n                if (this.keyManager.activeItem) {\n                    this.treeControl.collapse(this.keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                break;\n            case RIGHT_ARROW:\n                if (this.keyManager.activeItem) {\n                    this.treeControl.expand(this.keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                break;\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this.keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this.keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                this.keyManager.setPreviousPageItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                this.keyManager.setNextPageItemActive();\n                event.preventDefault();\n\n                break;\n            default:\n                this.keyManager.onKeydown(event);\n        }\n    }\n\n    updateScrollSize(): void {\n        if (!this.options.first) { return; }\n\n        this.keyManager.withScrollSize(Math.floor(this.getHeight() / this.options.first.getHeight()));\n    }\n\n    setFocusedOption(option: McTreeOption) {\n        this.keyManager.setActiveItem(option);\n\n        if (this.withShift && this.multiple) {\n            const previousIndex = this.keyManager.previousActiveItemIndex;\n            const activeIndex = this.keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n\n            this.withShift = false;\n        } else if (this.withCtrl) {\n            this.withCtrl = false;\n\n            if (!this.canDeselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) {\n                this.options.forEach((item) => item.setSelected(false));\n                option.setSelected(true);\n            }\n        }\n\n        this.emitNavigationEvent(option);\n    }\n\n    toggleFocusedOption(): void {\n        const focusedIndex = this.keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this.isValidIndex(focusedIndex)) {\n            const focusedOption: McTreeOption = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this.canDeselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this.emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    renderNodeChanges(\n        data: McTreeOption[],\n        dataDiffer: IterableDiffer<McTreeOption> = this.dataDiffer,\n        viewContainer: any = this.nodeOutlet.viewContainer,\n        parentData?: McTreeOption\n    ): void {\n        super.renderNodeChanges(data, dataDiffer, viewContainer, parentData);\n\n        const arrayOfInstances = [];\n\n        viewContainer._embeddedViews.forEach((view: ViewData) => {\n            const viewDef = view.def;\n\n            viewDef.nodes.forEach((node: NodeDef) => {\n                if (viewDef.nodeMatchedQueries === node.matchedQueryIds) {\n                    const nodeData: any = view.nodes[node.nodeIndex];\n\n                    arrayOfInstances.push(nodeData.instance as never);\n                }\n            });\n        });\n\n        if (this.options) {\n            this.options.reset(arrayOfInstances);\n            this.options.notifyOnChanges();\n        }\n\n        this.updateScrollSize();\n    }\n\n    getHeight(): number {\n        const clientRects = this.elementRef.nativeElement.getClientRects();\n        if (clientRects.length) {\n            return clientRects[0].height;\n        }\n\n        return 0;\n    }\n\n    emitNavigationEvent(option: McTreeOption): void {\n        this.navigationChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    emitChangeEvent(option: McTreeOption): void {\n        this.selectionChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    private isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    private canDeselectLast(option: McTreeOption): boolean {\n        return !(this.noUnselect && this.selectionModel.selected.length === 1 && option.selected);\n    }\n}\n\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CdkTreeModule } from '@ptsecurity/cdk/tree';\nimport { McPseudoCheckboxModule } from '@ptsecurity/mosaic/core';\n\nimport { McTreeNodeDef } from './node';\nimport { McTreeNodePadding } from './padding';\nimport { McTreeNodeToggle } from './toggle';\nimport { McTreeOption } from './tree-option';\nimport { McTreeSelection } from './tree-selection';\n\n\nconst MC_TREE_DIRECTIVES = [\n    McTreeSelection,\n    McTreeOption,\n    McTreeNodeDef,\n    McTreeNodePadding,\n    McTreeNodeToggle\n];\n\n@NgModule({\n    imports: [CommonModule, CdkTreeModule, McPseudoCheckboxModule],\n    exports: MC_TREE_DIRECTIVES,\n    declarations: MC_TREE_DIRECTIVES\n})\nexport class McTreeModule {}\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { FlatTreeControl, ITreeControl } from '@ptsecurity/cdk/tree';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class McTreeFlattener<T, F> {\n    constructor(\n        public transformFunction: (node: T, level: number) => F,\n        public getLevel: (node: F) => number,\n        public isExpandable: (node: F) => boolean,\n        public getChildren: (node: T) => Observable<T[]>\n    ) {}\n\n    flattenNode(node: T, level: number, resultNodes: F[], parentMap: boolean[]): F[] {\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n\n        if (this.isExpandable(flatNode)) {\n            this.getChildren(node)\n                .pipe(take(1))\n                .subscribe((children) => {\n                    children.forEach((child, index) => {\n                        const childParentMap: boolean[] = parentMap.slice();\n                        childParentMap.push(index !== children.length - 1);\n\n                        this.flattenNode(child, level + 1, resultNodes, childParentMap);\n                    });\n                });\n        }\n\n        return resultNodes;\n    }\n\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n    flattenNodes(structuredData: T[]): F[] {\n        const resultNodes: F[] = [];\n        structuredData.forEach((node) => this.flattenNode(node, 0, resultNodes, []));\n\n        return resultNodes;\n    }\n\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n    expandFlattenedNodes(nodes: F[], treeControl: ITreeControl<F>): F[] {\n        const results: F[] = [];\n        const currentExpand: boolean[] = [];\n        currentExpand[0] = true;\n\n        nodes.forEach((node) => {\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n\n            if (expand) { results.push(node); }\n\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        });\n\n        return results;\n    }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `McTree`.\n * The nested tree nodes of type `T` are flattened through `MсTreeFlattener`, and converted\n * to type `F` for `McTree` to consume.\n */\nexport class McTreeFlatDataSource<T, F> extends DataSource<F> {\n    flattenedData = new BehaviorSubject<F[]>([]);\n\n    expandedData = new BehaviorSubject<F[]>([]);\n\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n\n        this.flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n        this.treeControl.dataNodes = this.flattenedData.value;\n    }\n\n    private _data: BehaviorSubject<T[]>;\n\n    constructor(\n        private treeControl: FlatTreeControl<F>,\n        private treeFlattener: McTreeFlattener<T, F>,\n        initialData: T[] = []\n    ) {\n        super();\n\n        this._data = new BehaviorSubject<T[]>(initialData);\n    }\n\n    connect(collectionViewer: ICollectionViewer): Observable<F[]> {\n        const changes = [\n            collectionViewer.viewChange,\n            this.treeControl.expansionModel.changed,\n            this.flattenedData\n        ];\n\n        return merge(...changes)\n            .pipe(map(() => {\n                this.expandedData.next(\n                    this.treeFlattener.expandFlattenedNodes(this.flattenedData.value, this.treeControl)\n                );\n\n                return this.expandedData.value;\n            }));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by ITreeControl and each non-leaf node.\n */\nexport class McTreeNestedDataSource<T> extends DataSource<T> {\n\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n    }\n\n    /* tslint:disable-next-line:naming-convention */\n    private _data = new BehaviorSubject<T[]>([]);\n\n    connect(collectionViewer: ICollectionViewer): Observable<T[]> {\n        return merge(...[collectionViewer.viewChange, this._data])\n            .pipe(map(() => this.data));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import { Directive, TemplateRef } from '@angular/core';\n\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({ selector: '[mcTabContent]' })\nexport class McTabContent {\n    constructor(public template: TemplateRef<any>) { }\n}\n","import { Directive } from '@angular/core';\nimport { CdkPortal } from '@ptsecurity/cdk/portal';\n\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n    selector: '[mc-tab-label], [mcTabLabel]'\n})\nexport class McTabLabel extends CdkPortal {}\n\n// TODO: workaround for https://github.com/angular/material2/issues/12760\n(McTabLabel as any).ctorParameters = () => (CdkPortal as any).ctorParameters;\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ContentChild,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    SimpleChanges,\n    TemplateRef,\n    ViewChild,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { TemplatePortal } from '@ptsecurity/cdk/portal';\nimport {\n    CanDisable,\n    CanDisableCtor,\n    mixinDisabled\n} from '@ptsecurity/mosaic/core';\nimport { Subject } from 'rxjs';\n\nimport { McTabContent } from './tab-content';\nimport { McTabLabel } from './tab-label';\n\n\nexport class McTabBase {}\nexport const mcTabMixinBase: CanDisableCtor & typeof McTabBase = mixinDisabled(\n    McTabBase\n);\n\n@Component({\n    selector: 'mc-tab',\n    // Create a template for the content of the <mc-tab> so that we can grab a reference to this\n    // TemplateRef and use it in a Portal to render the tab content in the appropriate place in the\n    // tab-group.\n    template: '<ng-template><ng-content></ng-content></ng-template>',\n    inputs: ['disabled'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcTab'\n})\nexport class McTab extends mcTabMixinBase\n    implements OnInit, CanDisable, OnChanges, OnDestroy {\n    /** @docs-private */\n    get content(): TemplatePortal | null {\n        return this.contentPortal;\n    }\n    /** Content for the tab label given by `<ng-template mc-tab-label>`. */\n    @ContentChild(McTabLabel)\n    templateLabel: McTabLabel;\n\n    /**\n     * Template provided in the tab content that will be used if present, used to enable lazy-loading\n     */\n    @ContentChild(McTabContent, { read: TemplateRef })\n    explicitContent: TemplateRef<any>;\n\n    /** Template inside the McTab view that contains an `<ng-content>`. */\n    @ViewChild(TemplateRef)\n    implicitContent: TemplateRef<any>;\n\n    /** Plain text label for the tab, used when there is no template label. */\n    @Input('label')\n    textLabel: string = '';\n\n    /** Aria label for the tab. */\n    @Input('aria-label')\n    ariaLabel: string;\n\n    /**\n     * Reference to the element that the tab is labelled by.\n     * Will be cleared if `aria-label` is set at the same time.\n     */\n    @Input('aria-labelledby')\n    ariaLabelledby: string;\n\n    /** Emits whenever the internal state of the tab changes. */\n    readonly stateChanges = new Subject<void>();\n\n    /**\n     * The relatively indexed position where 0 represents the center, negative is left, and positive\n     * represents the right.\n     */\n    position: number | null = null;\n\n    /**\n     * The initial relatively index origin of the tab if it was created and selected after there\n     * was already a selected tab. Provides context of what position the tab should originate from.\n     */\n    origin: number | null = null;\n\n    /**\n     * Whether the tab is currently active.\n     */\n    isActive = false;\n\n    /** Portal that will be the hosted content of the tab */\n    private contentPortal: TemplatePortal | null = null;\n\n    constructor(private viewContainerRef: ViewContainerRef) {\n        super();\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (\n            changes.hasOwnProperty('textLabel') ||\n            changes.hasOwnProperty('disabled')\n        ) {\n            this.stateChanges.next();\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.stateChanges.complete();\n    }\n\n    ngOnInit(): void {\n        this.contentPortal = new TemplatePortal(\n            this.explicitContent || this.implicitContent,\n            this.viewContainerRef\n        );\n    }\n}\n","import {\n    animate,\n    state,\n    style,\n    transition,\n    trigger,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n\nexport const mcTabsAnimations: {\n    readonly translateTab: AnimationTriggerMetadata;\n} = {\n    /** Animation translates a tab along the X axis. */\n    translateTab: trigger('translateTab', [\n        // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n        state(\n            'center, void, left-origin-center, right-origin-center',\n            style({ transform: 'none' })\n        ),\n\n        // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n        // in order to ensure that the element has a height before its state changes. This is\n        // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n        // not have a static height and is not rendered. See related issue: #9465\n        state(\n            'left',\n            style({ transform: 'translate3d(-100%, 0, 0)', minHeight: '1px' })\n        ),\n        state(\n            'right',\n            style({ transform: 'translate3d(100%, 0, 0)', minHeight: '1px' })\n        ),\n\n        transition(\n            '* => left, * => right, left => center, right => center',\n            animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n        ),\n        transition('void => left-origin-center', [\n            style({ transform: 'translate3d(-100%, 0, 0)' }),\n            animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n        ]),\n        transition('void => right-origin-center', [\n            style({ transform: 'translate3d(100%, 0, 0)' }),\n            animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n        ])\n    ])\n};\n","import { AnimationEvent } from '@angular/animations';\nimport {\n    Component,\n    ChangeDetectorRef,\n    Input,\n    Inject,\n    Output,\n    EventEmitter,\n    OnDestroy,\n    OnInit,\n    ElementRef,\n    Directive,\n    Optional,\n    ViewEncapsulation,\n    ChangeDetectionStrategy,\n    ComponentFactoryResolver,\n    ViewContainerRef,\n    forwardRef,\n    ViewChild\n} from '@angular/core';\nimport { Directionality, Direction } from '@ptsecurity/cdk/bidi';\nimport { TemplatePortal, CdkPortalOutlet, PortalHostDirective } from '@ptsecurity/cdk/portal';\nimport { Subscription } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n\nimport { mcTabsAnimations } from './tabs-animations';\n\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type McTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type McTabBodyOriginState = 'left' | 'right';\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n    selector: 'mc-tab-body',\n    templateUrl: 'tab-body.html',\n    styleUrls: ['tab-body.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [mcTabsAnimations.translateTab],\n    host: {\n        class: 'mc-tab-body'\n    }\n})\nexport class McTabBody implements OnInit, OnDestroy {\n\n    /** The shifted index position of the tab body, where zero represents the active center tab. */\n    @Input()\n    set position(position: number) {\n        this.positionIndex = position;\n        this.computePositionAnimationState();\n    }\n\n    /** Tab body position state. Used by the animation trigger for the current state. */\n    bodyPosition: McTabBodyPositionState;\n\n    /** Event emitted when the tab begins to animate towards the center as the active tab. */\n    @Output() readonly onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n    /** Event emitted before the centering of the tab begins. */\n    @Output() readonly beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted before the centering of the tab begins. */\n    @Output() readonly afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted when the tab completes its animation towards the center. */\n    @Output() readonly onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n    /** The portal host inside of this container into which the tab body content will be loaded. */\n    @ViewChild(PortalHostDirective) portalHost: PortalHostDirective;\n\n    /** The tab body content to display. */\n    @Input('content') content: TemplatePortal;\n\n    /** Position that will be used when the tab is immediately becoming visible after creation. */\n    @Input() origin: number;\n\n    // Note that the default value will always be overwritten by `McTabBody`, but we need one\n    // anyway to prevent the animations module from throwing an error if the body is used on its own.\n    /** Duration for the tab's animation. */\n    @Input() animationDuration: string = '0ms';\n\n    /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n    private positionIndex: number;\n\n    /** Subscription to the directionality change observable. */\n    private dirChangeSubscription = Subscription.EMPTY;\n\n    constructor(private elementRef: ElementRef<HTMLElement>,\n                @Optional() private dir: Directionality,\n                changeDetectorRef: ChangeDetectorRef) {\n\n        if (this.dir && changeDetectorRef) {\n            this.dirChangeSubscription = this.dir.change.subscribe((direction: Direction) => {\n                this.computePositionAnimationState(direction);\n                changeDetectorRef.markForCheck();\n            });\n        }\n    }\n\n    /**\n     * After initialized, check if the content is centered and has an origin. If so, set the\n     * special position states that transition the tab from the left or right before centering.\n     */\n    ngOnInit() {\n        if (this.bodyPosition === 'center' && this.origin != null) {\n            this.bodyPosition = this.computePositionFromOrigin();\n        }\n    }\n\n    ngOnDestroy() {\n        this.dirChangeSubscription.unsubscribe();\n    }\n\n    onTranslateTabStarted(e: AnimationEvent): void {\n        const isCentering = this.isCenterPosition(e.toState);\n        this.beforeCentering.emit(isCentering);\n        if (isCentering) {\n            this.onCentering.emit(this.elementRef.nativeElement.clientHeight);\n        }\n    }\n\n    onTranslateTabComplete(e: AnimationEvent): void {\n        // If the transition to the center is complete, emit an event.\n        if (this.isCenterPosition(e.toState) && this.isCenterPosition(this.bodyPosition)) {\n            this.onCentered.emit();\n        }\n\n        if (this.isCenterPosition(e.fromState) && !this.isCenterPosition(this.bodyPosition)) {\n            this.afterLeavingCenter.emit();\n        }\n    }\n\n    /** The text direction of the containing app. */\n    getLayoutDirection(): Direction {\n        return this.dir && this.dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n\n    /** Whether the provided position state is considered center, regardless of origin. */\n    isCenterPosition(position: McTabBodyPositionState | string): boolean {\n        return position === 'center' ||\n            position === 'left-origin-center' ||\n            position === 'right-origin-center';\n    }\n\n    /** Computes the position state that will be used for the tab-body animation trigger. */\n    private computePositionAnimationState(dir: Direction = this.getLayoutDirection()) {\n        if (this.positionIndex < 0) {\n            this.bodyPosition = dir === 'ltr' ? 'left' : 'right';\n        } else if (this.positionIndex > 0) {\n            this.bodyPosition = dir === 'ltr' ? 'right' : 'left';\n        } else {\n            this.bodyPosition = 'center';\n        }\n    }\n\n    /**\n     * Computes the position state based on the specified origin position. This is used if the\n     * tab is becoming visible immediately after creation.\n     */\n    private computePositionFromOrigin(): McTabBodyPositionState {\n        const dir = this.getLayoutDirection();\n\n        if ((dir === 'ltr' && this.origin <= 0) || (dir === 'rtl' && this.origin > 0)) {\n            return 'left-origin-center';\n        }\n\n        return 'right-origin-center';\n    }\n}\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n    selector: '[mcTabBodyHost]'\n})\nexport class McTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n    /** Subscription to events for when the tab body begins centering. */\n    private centeringSub = Subscription.EMPTY;\n    /** Subscription to events for when the tab body finishes leaving from center position. */\n    private leavingSub = Subscription.EMPTY;\n\n    constructor(\n        componentFactoryResolver: ComponentFactoryResolver,\n        viewContainerRef: ViewContainerRef,\n        @Inject(forwardRef(() => McTabBody)) private host: McTabBody) {\n        super(componentFactoryResolver, viewContainerRef);\n    }\n\n    /** Set initial visibility or set up subscription for changing visibility. */\n    ngOnInit(): void {\n        super.ngOnInit();\n\n        this.centeringSub = this.host.beforeCentering\n            .pipe(startWith(this.host.isCenterPosition(this.host.bodyPosition)))\n            .subscribe((isCentering: boolean) => {\n                if (isCentering && !this.hasAttached()) {\n                    this.attach(this.host.content);\n                }\n            });\n\n        this.leavingSub = this.host.afterLeavingCenter.subscribe(() => {\n            this.detach();\n        });\n    }\n\n    /** Clean up centering subscription. */\n    ngOnDestroy(): void {\n        super.ngOnDestroy();\n        this.centeringSub.unsubscribe();\n        this.leavingSub.unsubscribe();\n    }\n}\n","import { Directive, ElementRef } from '@angular/core';\nimport {\n    CanDisable,\n    CanDisableCtor,\n    mixinDisabled\n} from '@ptsecurity/mosaic/core';\n\n\n// Boilerplate for applying mixins to McTabLabelWrapper.\n/** @docs-private */\nexport class McTabLabelWrapperBase {}\nexport const mcTabLabelWrapperMixinBase: CanDisableCtor &\n    typeof McTabLabelWrapperBase = mixinDisabled(McTabLabelWrapperBase);\n\n/**\n * Used in the `mc-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n    selector: '[mcTabLabelWrapper]',\n    inputs: ['disabled'],\n    host: {\n        '[class.mc-disabled]': 'disabled',\n        '[attr.aria-disabled]': '!!disabled'\n    }\n})\nexport class McTabLabelWrapper extends mcTabLabelWrapperMixinBase implements CanDisable {\n    constructor(public elementRef: ElementRef) {\n        super();\n    }\n\n    /** Sets focus on the wrapper element */\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    getOffsetLeft(): number {\n        return this.elementRef.nativeElement.offsetLeft;\n    }\n\n    getOffsetWidth(): number {\n        return this.elementRef.nativeElement.offsetWidth;\n    }\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n    AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef,\n    Component,\n    ComponentFactoryResolver,\n    ComponentRef,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Injector,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    Renderer2,\n    SimpleChanges,\n    TemplateRef,\n    Type,\n    ViewChild,\n    ViewContainerRef, ViewEncapsulation\n} from '@angular/core';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { Overlay, OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { McMeasureScrollbarService } from '@ptsecurity/mosaic/core';\nimport { Observable } from 'rxjs';\n\nimport { McModalControlService } from './modal-control.service';\nimport { McModalRef } from './modal-ref.class';\n// tslint:disable-next-line\nimport ModalUtil from './modal-util';\nimport { IModalButtonOptions, IModalOptions, ModalType, OnClickCallback } from './modal.type';\n\n\n// Duration when perform animations (ms)\nexport const MODAL_ANIMATE_DURATION = 200;\n\ntype AnimationState = 'enter' | 'leave' | null;\n\n@Component({\n    selector: 'mc-modal',\n    templateUrl: './modal.component.html',\n    styleUrls: ['./modal.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        '(keydown)': 'onKeyDown($event)'\n    }\n})\nexport class McModalComponent<T = any, R = any> extends McModalRef<T, R>\n    implements OnInit, OnChanges, AfterViewInit, OnDestroy, IModalOptions {\n\n    // tslint:disable-next-line:no-any\n    @Input() mcModalType: ModalType = 'default';\n    // If not specified, will use <ng-content>\n    @Input() mcContent: string | TemplateRef<{}> | Type<T>;\n    // available when mcContent is a component\n    @Input() mcComponentParams: T;\n    // Default Modal ONLY\n    @Input() mcFooter: string | TemplateRef<{}> | IModalButtonOptions<T>[];\n\n    @Input()\n    get mcVisible() { return this._mcVisible; }\n    set mcVisible(value) { this._mcVisible = value; }\n\n    _mcVisible = false;\n\n    @Output() mcVisibleChange = new EventEmitter<boolean>();\n\n    @Input() mcZIndex: number = 1000;\n    @Input() mcWidth: number | string = 480;\n    @Input() mcWrapClassName: string;\n    @Input() mcClassName: string;\n    @Input() mcStyle: object;\n    @Input() mcTitle: string | TemplateRef<{}>;\n    @Input() mcCloseByESC: boolean = true;\n\n    @Input()\n    get mcClosable() { return this._mcClosable; }\n    set mcClosable(value) { this._mcClosable = value; }\n    _mcClosable = true;\n\n    @Input()\n    get mcMask() { return this._mcMask; }\n    set mcMask(value) { this._mcMask = value; }\n    _mcMask = true;\n\n    @Input()\n    get mcMaskClosable() { return this._mcMaskClosable; }\n    set mcMaskClosable(value) { this._mcMaskClosable = value; }\n    _mcMaskClosable = true;\n\n    @Input() mcMaskStyle: object;\n    @Input() mcBodyStyle: object;\n\n    // Trigger when modal open(visible) after animations\n    @Output() mcAfterOpen = new EventEmitter<void>();\n    // Trigger when modal leave-animation over\n    @Output() mcAfterClose = new EventEmitter<R>();\n\n    // --- Predefined OK & Cancel buttons\n    @Input() mcOkText: string;\n    @Input() mcOkType = 'primary';\n\n    @Input()\n    get mcOkLoading() { return this._mcOkLoading; }\n    set mcOkLoading(value) { this._mcOkLoading = value; }\n    _mcOkLoading = false;\n\n    @Input() @Output() mcOnOk: EventEmitter<T> | OnClickCallback<T> = new EventEmitter<T>();\n    @Input() mcCancelText: string;\n\n    @Input()\n    get mcCancelLoading() { return this._mcCancelLoading; }\n    set mcCancelLoading(value) { this._mcCancelLoading = value; }\n    _mcCancelLoading = false;\n\n    @Input() @Output() mcOnCancel: EventEmitter<T> | OnClickCallback<T> = new EventEmitter<T>();\n\n    @ViewChild('modalContainer') modalContainer: ElementRef;\n    @ViewChild('bodyContainer', { read: ViewContainerRef }) bodyContainer: ViewContainerRef;\n    // Only aim to focus the ok button that needs to be auto focused\n    @ViewChild('autoFocusButtonOk', { read: ElementRef }) autoFocusButtonOk: ElementRef;\n\n    maskAnimationClassMap: object;\n    modalAnimationClassMap: object;\n    // The origin point that animation based on\n    transformOrigin = '0px 0px 0px';\n\n    // Observable alias for mcAfterOpen\n    get afterOpen(): Observable<void> {\n        return this.mcAfterOpen.asObservable();\n    }\n\n    // Observable alias for mcAfterClose\n    get afterClose(): Observable<R> {\n        return this.mcAfterClose.asObservable();\n    }\n\n    get okText(): string {\n        return this.mcOkText;\n    }\n\n    get cancelText(): string {\n        return this.mcCancelText;\n    }\n\n    // Indicate whether this dialog should hidden\n    get hidden(): boolean {\n        return !this.mcVisible && !this.animationState;\n    }\n\n    // Handle the reference when using mcContent as Component\n    private contentComponentRef: ComponentRef<T>;\n    // Current animation state\n    private animationState: AnimationState;\n    private container: HTMLElement | OverlayRef;\n\n    constructor(\n        private overlay: Overlay,\n        private renderer: Renderer2,\n        private cfr: ComponentFactoryResolver,\n        private elementRef: ElementRef,\n        private viewContainer: ViewContainerRef,\n        private mcMeasureScrollbarService: McMeasureScrollbarService,\n        private modalControl: McModalControlService,\n        private changeDetector: ChangeDetectorRef,\n        @Inject(DOCUMENT) private document: any) {\n\n        super();\n    }\n\n    @Input() mcGetContainer: HTMLElement | OverlayRef | (() => HTMLElement | OverlayRef) = () => this.overlay.create();\n\n    ngOnInit() {\n\n        // Create component along without View\n        if (this.isComponent(this.mcContent)) {\n            this.createDynamicComponent(this.mcContent as Type<T>);\n        }\n\n        // Setup default button options\n        if (this.isModalButtons(this.mcFooter)) {\n            this.mcFooter = this.formatModalButtons(this.mcFooter as IModalButtonOptions<T>[]);\n        }\n\n        // Place the modal dom to elsewhere\n        this.container = typeof this.mcGetContainer === 'function' ? this.mcGetContainer() : this.mcGetContainer;\n        if (this.container instanceof HTMLElement) {\n            this.container.appendChild(this.elementRef.nativeElement);\n        } else if (this.container instanceof OverlayRef) {\n            // NOTE: only attach the dom to overlay, the view container is not changed actually\n            this.container.overlayElement.appendChild(this.elementRef.nativeElement);\n        }\n\n        // Register modal when afterOpen/afterClose is stable\n        this.modalControl.registerModal(this);\n    }\n\n    // [NOTE] NOT available when using by service!\n    // Because ngOnChanges never be called when using by service,\n    // here we can't support \"mcContent\"(Component) etc. as inputs that initialized dynamically.\n    // BUT: User also can change \"mcContent\" dynamically to trigger UI changes\n    // (provided you don't use \bComponent that needs initializations)\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.mcVisible) {\n            // Do not trigger animation while initializing\n            this.handleVisibleStateChange(this.mcVisible, !changes.mcVisible.firstChange);\n        }\n    }\n\n    ngAfterViewInit() {\n        // If using Component, it is the time to attach View while bodyContainer is ready\n        if (this.contentComponentRef) {\n            this.bodyContainer.insert(this.contentComponentRef.hostView);\n        }\n\n        if (this.autoFocusButtonOk) {\n            (this.autoFocusButtonOk.nativeElement as HTMLButtonElement).focus();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.container instanceof OverlayRef) {\n            this.container.dispose();\n        }\n    }\n\n    open() {\n        this.changeVisibleFromInside(true);\n    }\n\n    close(result?: R) {\n        this.changeVisibleFromInside(false, result);\n    }\n\n    // Destroy equals Close\n    destroy(result?: R) {\n        this.close(result);\n    }\n\n    triggerOk() {\n        this.onClickOkCancel('ok');\n    }\n\n    triggerCancel() {\n        this.onClickOkCancel('cancel');\n    }\n\n    getInstance(): McModalComponent {\n        return this;\n    }\n\n    getContentComponentRef(): ComponentRef<T> {\n        return this.contentComponentRef;\n    }\n\n    getContentComponent(): T {\n        return this.contentComponentRef && this.contentComponentRef.instance;\n    }\n\n    getElement(): HTMLElement {\n        return this.elementRef && this.elementRef.nativeElement;\n    }\n\n    onClickMask($event: MouseEvent) {\n        if (\n            this.mcMask &&\n            this.mcMaskClosable &&\n            ($event.target as HTMLElement).classList.contains('mc-modal-wrap') &&\n            this.mcVisible\n        ) {\n            this.onClickOkCancel('cancel');\n        }\n    }\n\n    // tslint:disable-next-line\n    isModalType(type: ModalType): boolean {\n        return this.mcModalType === type;\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n\n        if (event.keyCode === ESCAPE && this.container && (this.container instanceof OverlayRef)) {\n\n            this.close();\n            event.preventDefault();\n        }\n    }\n\n    // AoT\n    onClickCloseBtn() {\n        if (this.mcVisible) {\n            this.onClickOkCancel('cancel');\n        }\n    }\n\n    // AoT\n    // tslint:disable-next-line\n    onClickOkCancel(type: 'ok' | 'cancel') {\n        const trigger = { ok: this.mcOnOk, cancel: this.mcOnCancel }[type];\n        const loadingKey = { ok: 'mcOkLoading', cancel: 'mcCancelLoading' }[type];\n\n        if (trigger instanceof EventEmitter) {\n            trigger.emit(this.getContentComponent());\n        } else if (typeof trigger === 'function') {\n\n            const result = trigger(this.getContentComponent());\n            // Users can return \"false\" to prevent closing by default\n            const caseClose = (doClose: boolean | void | {}) => (doClose !== false) && this.close(doClose as R);\n\n            if (isPromise(result)) {\n                this[loadingKey] = true;\n                const handleThen = (doClose) => {\n                    this[loadingKey] = false;\n                    caseClose(doClose);\n                };\n                (result as Promise<void>).then(handleThen).catch(handleThen);\n            } else {\n                caseClose(result);\n            }\n        }\n    }\n\n    // AoT\n    isNonEmptyString(value: {}): boolean {\n        return typeof value === 'string' && value !== '';\n    }\n\n    // AoT\n    isTemplateRef(value: {}): boolean {\n        return value instanceof TemplateRef;\n    }\n\n    // AoT\n    isComponent(value: {}): boolean {\n        return value instanceof Type;\n    }\n\n    // AoT\n    isModalButtons(value: {}): boolean {\n        return Array.isArray(value) && value.length > 0;\n    }\n\n    // Do rest things when visible state changed\n    private handleVisibleStateChange(visible: boolean, animation: boolean = true, closeResult?: R): Promise<any> {\n        // Hide scrollbar at the first time when shown up\n        if (visible) {\n            this.changeBodyOverflow(1);\n        }\n\n        return Promise\n            .resolve(animation && this.animateTo(visible))\n            // Emit open/close event after animations over\n            .then(() => {\n                if (visible) {\n                    this.mcAfterOpen.emit();\n                } else {\n                    this.mcAfterClose.emit(closeResult);\n                    // Show/hide scrollbar when animation is over\n                    this.changeBodyOverflow();\n                }\n            });\n    }\n\n    // Lookup a button's property, if the prop is a function, call & then return the result, otherwise, return itself.\n    // AoT\n    // tslint:disable-next-line\n    getButtonCallableProp(options: IModalButtonOptions<T>, prop: string): {} {\n        const value = options[prop];\n        const args: any[] = [];\n        if (this.contentComponentRef) {\n            args.push(this.contentComponentRef.instance);\n        }\n\n        return typeof value === 'function' ? value.apply(options, args) : value;\n    }\n\n    // On mcFooter's modal button click\n    // AoT\n    // tslint:disable-next-line\n    onButtonClick(button: IModalButtonOptions<T>) {\n        // Call onClick directly\n        const result = this.getButtonCallableProp(button, 'onClick');\n        if (isPromise(result)) {\n            button.loading = true;\n            (result as Promise<{}>).then(() => button.loading = false).catch(() => button.loading = false);\n        }\n    }\n\n    // Change mcVisible from inside\n    private changeVisibleFromInside(visible: boolean, closeResult?: R): Promise<void> {\n        if (this.mcVisible !== visible) {\n            // Change mcVisible value immediately\n            this.mcVisible = visible;\n            this.mcVisibleChange.emit(visible);\n\n            return this.handleVisibleStateChange(visible, true, closeResult);\n        }\n\n        return Promise.resolve();\n    }\n\n    private changeAnimationState(state: AnimationState) {\n        this.animationState = state;\n        if (state) {\n            this.maskAnimationClassMap = {\n                [`fade-${state}`]: true,\n                [`fade-${state}-active`]: true\n            };\n            this.modalAnimationClassMap = {\n                [`zoom-${state}`]: true,\n                [`zoom-${state}-active`]: true\n            };\n        } else {\n            // @ts-ignore\n            this.maskAnimationClassMap = this.modalAnimationClassMap = null;\n        }\n\n        if (this.contentComponentRef) {\n            this.contentComponentRef.changeDetectorRef.markForCheck();\n        } else {\n            this.changeDetector.markForCheck();\n        }\n    }\n\n    private animateTo(isVisible: boolean): Promise<any> {\n        // Figure out the lastest click position when shows up\n        if (isVisible) {\n            // [NOTE] Using timeout due to the document.click event is fired later than visible change,\n            // so if not postponed to next event-loop, we can't get the lastest click position\n            window.setTimeout(() => this.updateTransformOrigin());\n        }\n\n        this.changeAnimationState(isVisible ? 'enter' : 'leave');\n\n        // Return when animation is over\n        return new Promise((resolve) => window.setTimeout(() => {\n            this.changeAnimationState(null);\n            resolve();\n        }, MODAL_ANIMATE_DURATION));\n    }\n\n    private formatModalButtons(buttons: IModalButtonOptions<T>[]): IModalButtonOptions<T>[] {\n        return buttons.map((button) => {\n\n            return {\n                ...{\n                    type: 'default',\n                    size: 'default',\n                    autoLoading: true,\n                    show: true,\n                    loading: false,\n                    disabled: false\n                },\n                ...button\n            };\n        });\n    }\n\n    /**\n     * Create a component dynamically but not attach to any View\n     * (this action will be executed when bodyContainer is ready)\n     * @param component Component class\n     */\n    private createDynamicComponent(component: Type<T>) {\n        const factory = this.cfr.resolveComponentFactory(component);\n        const childInjector = Injector.create({\n            providers: [{provide: McModalRef, useValue: this}],\n            parent: this.viewContainer.parentInjector\n        });\n\n        this.contentComponentRef = factory.create(childInjector);\n\n        if (this.mcComponentParams) {\n            Object.assign(this.contentComponentRef.instance, this.mcComponentParams);\n        }\n\n        // Do the first change detection immediately\n        // (or we do detection at ngAfterViewInit, multi-changes error will be thrown)\n        this.contentComponentRef.changeDetectorRef.detectChanges();\n\n\n    }\n\n    // Update transform-origin to the last click position on document\n    private updateTransformOrigin() {\n        const modalElement = this.modalContainer.nativeElement as HTMLElement;\n        const lastPosition = ModalUtil.getLastClickPosition();\n\n        if (lastPosition) {\n            // tslint:disable-next-line\n            this.transformOrigin = `${lastPosition.x - modalElement.offsetLeft}px ${lastPosition.y - modalElement.offsetTop}px 0px`;\n        }\n    }\n\n    /**\n     * Take care of the body's overflow to decide the existense of scrollbar\n     * @param plusNum The number that the openModals.length will increase soon\n     */\n    private changeBodyOverflow(plusNum: number = 0) {\n        const openModals = this.modalControl.openModals;\n\n        if (openModals.length + plusNum > 0) {\n            // tslint:disable-next-line\n            this.renderer.setStyle(this.document.body, 'padding-right', `${this.mcMeasureScrollbarService.scrollBarWidth}px`);\n            this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n        } else {\n            this.renderer.removeStyle(this.document.body, 'padding-right');\n            this.renderer.removeStyle(this.document.body, 'overflow');\n        }\n    }\n}\n\n////////////\n\nfunction isPromise(obj: {} | void): boolean {\n    // tslint:disable-next-line\n    return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof (obj as Promise<{}>).then === 'function' && typeof (obj as Promise<{}>).catch === 'function';\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n\n@Pipe({\n    name: 'toCssUnit'\n})\nexport class CssUnitPipe implements PipeTransform {\n    transform(value: number | string, defaultUnit: string = 'px'): string {\n        const formatted = +value;\n\n        return isNaN(formatted) ? `${value}` : `${formatted}${defaultUnit}`;\n    }\n}\n","import { ComponentRef, Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { Overlay, OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal } from '@ptsecurity/cdk/portal';\n\nimport { McModalControlService } from './modal-control.service';\nimport { McModalRef } from './modal-ref.class';\nimport { McModalComponent } from './modal.component';\nimport { ConfirmType, IModalOptions, IModalOptionsForService } from './modal.type';\n\n\n// A builder used for managing service creating modals\nexport class ModalBuilderForService {\n\n    // Modal ComponentRef, \"null\" means it has been destroyed\n    private modalRef: ComponentRef<McModalComponent> | null;\n    private overlayRef: OverlayRef;\n\n    constructor(private overlay: Overlay, options: IModalOptionsForService = {}) {\n        this.createModal();\n\n        if (!('mcGetContainer' in options)) {\n            options.mcGetContainer = undefined;\n        }\n\n        this.changeProps(options);\n        this.modalRef!.instance.open();\n        this.modalRef!.instance.mcAfterClose.subscribe(() => this.destroyModal());\n\n        this.overlayRef.keydownEvents()\n            // @ts-ignore\n            .pipe(filter((event: KeyboardEvent) => {\n                return event.keyCode === ESCAPE && options.mcCloseByESC;\n            }))\n            .subscribe(() => this.modalRef!.instance.close());\n    }\n\n    getInstance(): McModalComponent | null {\n        return this.modalRef && this.modalRef.instance;\n    }\n\n    destroyModal(): void {\n        if (this.modalRef) {\n            this.overlayRef.dispose();\n            this.modalRef = null;\n        }\n    }\n\n    private changeProps(options: IModalOptions): void {\n        if (this.modalRef) {\n            // here not limit user's inputs at runtime\n            Object.assign(this.modalRef.instance, options);\n        }\n    }\n\n    // Create component to ApplicationRef\n    private createModal(): void {\n        this.overlayRef = this.overlay.create();\n        this.modalRef = this.overlayRef.attach(new ComponentPortal(McModalComponent));\n    }\n}\n\n@Injectable()\nexport class McModalService {\n    // Track of the current close modals (we assume invisible is close this time)\n    get openModals(): McModalRef[] {\n        return this.modalControl.openModals;\n    }\n\n    get afterAllClose(): Observable<void> {\n        return this.modalControl.afterAllClose.asObservable();\n    }\n\n    constructor(\n        private overlay: Overlay,\n        private modalControl: McModalControlService) {\n    }\n\n    // Closes all of the currently-open dialogs\n    closeAll(): void {\n        this.modalControl.closeAll();\n    }\n\n    create<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n\n        if (typeof options.mcOnCancel !== 'function') {\n            // Leave a empty function to close this modal by default\n            // tslint:disable-next-line\n            options.mcOnCancel = () => {};\n        }\n\n        if (!('mcCloseByESC' in options)) {\n            options.mcCloseByESC = true;\n        }\n\n\n        if (!('mcWidth' in options)) {\n            // tslint:disable-next-line\n            options.mcWidth = 480;\n        }\n\n        return new ModalBuilderForService(this.overlay, options).getInstance()!;\n    }\n\n    confirm<T>(options: IModalOptionsForService<T> = {}, confirmType: ConfirmType = 'confirm'): McModalRef<T> {\n        if ('mcFooter' in options) {\n            console.warn(`The Confirm-Modal doesn't support \"mcFooter\", this property will be ignored.`);\n        }\n\n        // NOTE: only support function currently by calling confirm()\n        if (typeof options.mcOnOk !== 'function') {\n            // Leave a empty function to close this modal by default\n            // tslint:disable-next-line\n            options.mcOnOk = () => {};\n        }\n\n        options.mcModalType = 'confirm';\n        options.mcClassName = `mc-confirm mc-confirm-${confirmType} ${options.mcClassName || ''}`;\n        options.mcMaskClosable = false;\n\n        return this.create(options);\n    }\n\n    success<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n        return this.simpleConfirm(options, 'success');\n    }\n\n    delete<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n        return this.simpleConfirm(options, 'warn');\n    }\n\n    private simpleConfirm<T>(options: IModalOptionsForService<T> = {}, confirmType: ConfirmType): McModalRef<T> {\n        // Remove the Cancel button if the user not specify a Cancel button\n        if (!('mcCancelText' in options)) {\n            // @ts-ignore\n            options.mcCancelText = null;\n        }\n\n        return this.confirm(options, confirmType);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { McButtonModule } from '@ptsecurity/mosaic/button';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { CssUnitPipe } from './css-unit.pipe';\nimport { McModalControlService } from './modal-control.service';\nimport { McModalComponent } from './modal.component';\nimport { McModalService } from './modal.service';\n\n\n@NgModule({\n    imports: [ CommonModule, OverlayModule, McButtonModule, McIconModule ],\n    exports: [ McModalComponent ],\n    declarations: [ McModalComponent, CssUnitPipe ],\n    entryComponents: [ McModalComponent ],\n    providers: [ McModalControlService, McModalService ]\n})\nexport class McModalModule { }\n","import { fromEvent, Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nimport {\n    AfterViewInit,\n    Component, Directive,\n    ElementRef,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    ViewEncapsulation,\n    ContentChild,\n    TemplateRef,\n    ChangeDetectorRef,\n    ChangeDetectionStrategy,\n    ViewChild\n} from '@angular/core';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { SPACE } from '@ptsecurity/cdk/keycodes';\nimport { Platform } from '@ptsecurity/cdk/platform';\nimport { CanDisable, CanDisableCtor, mixinDisabled } from '@ptsecurity/mosaic/core';\n\n\nconst COLLAPSED_CLASS: string = 'mc-navbar-collapsed-title';\nconst MC_ICON = 'mc-icon';\nconst MC_NAVBAR = 'mc-navbar';\nconst MC_NAVBAR_CONTAINER = 'mc-navbar-container';\nconst MC_NAVBAR_ITEM = 'mc-navbar-item';\nconst MC_NAVBAR_BRAND = 'mc-navbar-brand';\nconst MC_NAVBAR_TITLE = 'mc-navbar-title';\nconst MC_NAVBAR_LOGO = 'mc-navbar-logo';\n\nexport type McNavbarContainerPositionType = 'left' | 'right';\n\nexport interface IMcNavbarDropdownItem {\n    link?: string;\n    text: string;\n}\n\n@Directive({\n    selector: MC_NAVBAR_LOGO,\n    host: {\n        class: MC_NAVBAR_LOGO\n    }\n})\nexport class McNavbarLogo {}\n\n@Directive({\n    selector: MC_NAVBAR_BRAND,\n    host: {\n        class: MC_NAVBAR_BRAND\n    }\n})\nexport class McNavbarBrand {}\n\n@Directive({\n    selector: MC_NAVBAR_TITLE,\n    host: {\n        class: MC_NAVBAR_TITLE\n    }\n})\nexport class McNavbarTitle {}\n\nexport class McNavbarItemBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McNavbarMixinBase: CanDisableCtor & typeof McNavbarItemBase = mixinDisabled(McNavbarItemBase);\n\n@Component({\n    selector: MC_NAVBAR_ITEM,\n    template: `\n        <a\n            [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\n            (click)=\"handleClickByItem()\"\n            (keydown)=\"handleKeydown($event)\"\n            class=\"mc-navbar-item\"\n        >\n            <ng-content></ng-content>\n            <i *ngIf=\"hasDropdownContent\" mc-icon=\"mc-angle-down-M_16\"></i>\n        </a>\n        <ul\n            #dropdownContent\n            *ngIf=\"hasDropdownContent\"\n            [ngClass]=\"{ 'is-collapsed': isCollapsed }\"\n            class=\"mc-navbar-dropdown\"\n        >\n            <li\n                *ngFor=\"let item of dropdownItems\"\n                (click)=\"handleClickByDropdownItem()\"\n                class=\"mc-navbar-dropdown-item\"\n            >\n                <ng-container *ngIf=\"dropdownItemTmpl\">\n                    <ng-container *ngTemplateOutlet=\"dropdownItemTmpl; context: { $implicit: item }\"></ng-container>\n                </ng-container>\n                <a\n                    *ngIf=\"!dropdownItemTmpl\"\n                    [attr.href]=\"item.link\"\n                    [ngClass]=\"{ 'is-active': isActiveDropdownLink(item.link) }\"\n                    class=\"mc-navbar-dropdown-link\"\n                >{{ item.text }}</a>\n            </li>\n        </ul>\n    `,\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': '-1'\n    }\n})\nexport class McNavbarItem extends _McNavbarMixinBase implements OnInit, AfterViewInit, OnDestroy, CanDisable {\n\n    @Input()\n    tabIndex: number = 0;\n\n    @Input()\n    dropdownItems: IMcNavbarDropdownItem[] = [];\n\n    @Input()\n    set collapsedTitle(value: string) {\n        this.elementRef.nativeElement.setAttribute('computedTitle', encodeURI(value));\n    }\n\n    @ContentChild('dropdownItemTmpl', { read: TemplateRef })\n    dropdownItemTmpl: TemplateRef<IMcNavbarDropdownItem>;\n\n    @ViewChild('dropdownContent', { read: ElementRef })\n    dropdownContent: ElementRef;\n\n    get hasDropdownContent() {\n        return this.dropdownItems.length > 0;\n    }\n\n    isCollapsed: boolean = true;\n\n    private _subscription: Subscription = new Subscription();\n    private _focusMonitor$: Observable<FocusOrigin>;\n\n    private get _dropdownElements(): HTMLElement[] {\n        return this.dropdownContent ? this.dropdownContent.nativeElement.querySelectorAll('li > *') : [];\n    }\n\n    constructor(\n        public  elementRef: ElementRef,\n        private _focusMonitor: FocusMonitor,\n        private _platform: Platform,\n        private _cdRef: ChangeDetectorRef\n    ) {\n        super(elementRef);\n    }\n\n    ngOnInit() {\n        this.denyClickIfDisabled();\n\n        this._focusMonitor$ = this._focusMonitor.monitor(this.elementRef.nativeElement, true);\n\n        if (this.hasDropdownContent) {\n            this.listenClickOutside();\n        }\n    }\n\n    ngAfterViewInit() {\n        if (!this.hasDropdownContent) {\n            return;\n        }\n\n        this.startListenFocusDropdownItems();\n    }\n\n    ngOnDestroy() {\n        this._subscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n        this.stopListenFocusDropdownItems();\n    }\n\n    isActiveDropdownLink(link: string): boolean {\n        if (!this._platform.isBrowser) {\n            return false;\n        }\n\n        return window.location.href.indexOf(link) >= 0;\n    }\n\n    handleClickByItem() {\n        this.toggleDropdown();\n    }\n\n    handleKeydown($event: KeyboardEvent) {\n        const isNavbarItem = ($event.target as HTMLElement).classList.contains(MC_NAVBAR_ITEM);\n\n        // tslint:disable-next-line\n        if (this.hasDropdownContent && $event.keyCode === SPACE && isNavbarItem) {\n            this.toggleDropdown();\n        }\n    }\n\n    handleClickByDropdownItem() {\n        this.forceCloseDropdown();\n    }\n\n    private listenClickOutside() {\n        this._subscription.add(\n            this._focusMonitor$.subscribe((origin) => {\n                if (origin === null) {\n                    this.forceCloseDropdown();\n                }\n            })\n        );\n    }\n\n    private toggleDropdown() {\n        this.isCollapsed = !this.isCollapsed;\n    }\n\n    private forceCloseDropdown() {\n        this.isCollapsed = true;\n        this._cdRef.detectChanges();\n    }\n\n    private startListenFocusDropdownItems() {\n        this._dropdownElements.forEach((el) => {\n            this._focusMonitor.monitor(el, true);\n        });\n    }\n\n    private stopListenFocusDropdownItems() {\n        this._dropdownElements.forEach((el) => {\n            this._focusMonitor.stopMonitoring(el);\n        });\n    }\n\n    // This method is required due to angular 2 issue https://github.com/angular/angular/issues/11200\n    private denyClickIfDisabled() {\n        const events: Event[] = this.elementRef.nativeElement.eventListeners('click');\n\n        events.forEach((event) => this.elementRef.nativeElement.removeEventListener('click', event));\n\n        this.elementRef.nativeElement.addEventListener('click', (event: MouseEvent) => {\n            if (this.elementRef.nativeElement.hasAttribute('disabled')) {\n                event.stopImmediatePropagation();\n            }\n        }, true);\n\n        events.forEach((event) => this.elementRef.nativeElement.addEventListener('click', event));\n    }\n}\n\n@Directive({\n    selector: MC_NAVBAR_CONTAINER\n})\nexport class McNavbarContainer {\n    @Input()\n    position: McNavbarContainerPositionType = 'left';\n\n    @HostBinding('class')\n    get cssClasses(): string {\n        return this.position === 'left' ? 'mc-navbar-left' : 'mc-navbar-right';\n    }\n}\n\nclass CollapsibleItem {\n    private _collapsed: boolean = false;\n\n    constructor(\n        public element: HTMLElement,\n        public width: number\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        this._collapsed = collapsed;\n\n        this.updateCollapsedClass();\n    }\n\n    private updateCollapsedClass() {\n        if (this._collapsed) {\n            this.element.classList.add(COLLAPSED_CLASS);\n        } else {\n            this.element.classList.remove(COLLAPSED_CLASS);\n        }\n\n    }\n}\n\nclass CachedItemWidth {\n\n    get canCollapse(): boolean {\n        return this.itemsForCollapse.length > 0;\n    }\n\n    private _collapsedItemsWidth: number;\n\n    get collapsedItemsWidth(): number {\n        if (this._collapsedItemsWidth !== undefined) {\n            return this._collapsedItemsWidth;\n        }\n\n        this.calculateAndCacheCollapsedItemsWidth();\n\n        return this._collapsedItemsWidth;\n    }\n\n    constructor(\n        public element: HTMLElement,\n        public width: number,\n        public itemsForCollapse: CollapsibleItem[] = []\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        if (this.itemsForCollapse.length > 0) {\n            this.updateTitle(collapsed);\n        }\n\n        this.itemsForCollapse.forEach((item) => item.processCollapsed(collapsed));\n    }\n\n    private calculateAndCacheCollapsedItemsWidth() {\n        this._collapsedItemsWidth = this.itemsForCollapse\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getTitle(): string {\n        const computedTitle = this.element.getAttribute('computedTitle');\n\n        return computedTitle\n            ? decodeURI(computedTitle)\n            : (this.itemsForCollapse.length > 0 ? this.itemsForCollapse[0].element.innerText : '');\n    }\n\n    private updateTitle(collapsed: boolean) {\n        if (collapsed) {\n            this.element.setAttribute('title', this.getTitle());\n        } else {\n            this.element.removeAttribute('title');\n        }\n    }\n}\n\n\n@Component({\n    selector: MC_NAVBAR,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    template: `\n        <nav class=\"mc-navbar\">\n            <ng-content select=\"[${MC_NAVBAR_CONTAINER}],${MC_NAVBAR_CONTAINER}\"></ng-content>\n        </nav>\n    `,\n    styleUrls: ['./navbar.css'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class McNavbar implements AfterViewInit, OnDestroy {\n\n    private readonly forceRecalculateItemsWidth: boolean = false;\n    private readonly resizeDebounceInterval: number = 100;\n    private readonly firstLevelElement: string = MC_NAVBAR_CONTAINER;\n    private readonly secondLevelElements: string[] = [\n        MC_NAVBAR_ITEM,\n        MC_NAVBAR_BRAND,\n        MC_NAVBAR_TITLE\n    ];\n\n    private _totalItemsWidths: number;\n    private _itemsWidths: CachedItemWidth[];\n\n    private get maxAllowedWidth(): number {\n        return this._elementRef.nativeElement.querySelector('nav').getBoundingClientRect().width;\n    }\n\n    private get itemsWidths(): CachedItemWidth[] {\n        if (this._itemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._itemsWidths;\n        }\n\n        this.calculateAndCacheItemsWidth();\n\n        return this._itemsWidths;\n    }\n\n    private get totalItemsWidth(): number {\n        if (this._totalItemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._totalItemsWidths;\n        }\n\n        this.calculateAndCacheTotalItemsWidth();\n\n        return this._totalItemsWidths;\n    }\n\n    private _resizeSubscription: Subscription;\n\n    constructor(\n        private _elementRef: ElementRef\n    ) {\n        const resizeObserver = fromEvent(window, 'resize')\n            .pipe(debounceTime(this.resizeDebounceInterval));\n\n        this._resizeSubscription = resizeObserver.subscribe(this.updateCollapsed.bind(this));\n    }\n\n    updateCollapsed(): void {\n        let collapseDelta = this.totalItemsWidth - this.maxAllowedWidth;\n\n        for (let i = this.itemsWidths.length - 1; i >= 0; i--) {\n            const item = this.itemsWidths[i];\n\n            if (!item.canCollapse) {\n                continue;\n            }\n\n            item.processCollapsed(collapseDelta > 0);\n            collapseDelta -= item.collapsedItemsWidth;\n        }\n    }\n\n    ngAfterViewInit(): void {\n        // Note: this wait is required for loading and rendering fonts for icons;\n        // unfortunately we cannot control font rendering\n        setTimeout(() => this.updateCollapsed(), 0);\n    }\n\n    ngOnDestroy() {\n        this._resizeSubscription.unsubscribe();\n    }\n\n    private calculateAndCacheTotalItemsWidth() {\n        this._totalItemsWidths = this.itemsWidths\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getOuterElementWidth(element: HTMLElement): number {\n        const baseWidth  = element.getBoundingClientRect().width;\n        const marginRight = parseInt(getComputedStyle(element).getPropertyValue('margin-right'));\n        const marginLeft = parseInt(getComputedStyle(element).getPropertyValue('margin-left'));\n\n        return baseWidth + marginRight + marginLeft;\n    }\n\n    private calculateAndCacheItemsWidth() {\n        const allItemsSelector = this.secondLevelElements\n            .map((e: string) => `${this.firstLevelElement}>${e}`);\n        const allItems: HTMLElement[] = Array.from(this._elementRef.nativeElement.querySelectorAll(allItemsSelector));\n\n        this._itemsWidths = allItems\n            .map((el) => new CachedItemWidth(el, this.getOuterElementWidth(el), this.getItemsForCollapse(el)));\n    }\n\n    private getItemsForCollapse(element: HTMLElement): CollapsibleItem[] {\n        const icon = element.querySelector(`[${MC_ICON}],${MC_NAVBAR_LOGO},[${MC_NAVBAR_LOGO}]`);\n\n        if (!icon) {\n            return [];\n        }\n\n        return Array.from(element.querySelectorAll(MC_NAVBAR_TITLE))\n            .map((el) => new CollapsibleItem(<HTMLElement> el, el.getBoundingClientRect().width));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport {\n    McNavbar,\n    McNavbarContainer,\n    McNavbarItem,\n    McNavbarTitle,\n    McNavbarBrand,\n    McNavbarLogo\n} from './navbar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        McIconModule\n    ],\n    exports: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ],\n    declarations: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ]\n})\nexport class McNavbarModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, CanColorCtor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressBarMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressBarBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressBarMixinBase:\n    CanColorCtor &\n    typeof McProgressBarBase =\n        mixinColor(McProgressBarBase);\n\n@Component({\n    selector: 'mc-progress-bar',\n    templateUrl: './progress-bar.component.html',\n    styleUrls: ['./progress-bar.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-bar',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressBar extends _McProgressBarMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-bar-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressBarMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McProgressBar\n} from './progress-bar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressBar\n    ],\n    declarations: [\n        McProgressBar\n    ]\n})\nexport class McProgressBarModule {}\n","import { AnimationEvent } from '@angular/animations';\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChild,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    Output,\n    TemplateRef,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    OnInit\n} from '@angular/core';\nimport { FocusKeyManager, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { Direction } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { ESCAPE, DOWN_ARROW, UP_ARROW } from '@ptsecurity/cdk/keycodes';\nimport { Subject, Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { mcDropdownAnimations } from './dropdown-animations';\nimport { McDropdownContent } from './dropdown-content';\nimport { throwMcDropdownInvalidPositionX, throwMcDropdownInvalidPositionY } from './dropdown-errors';\nimport { McDropdownItem } from './dropdown-item';\nimport { MC_DROPDOWN_PANEL, McDropdownPanel } from './dropdown-panel';\nimport { DropdownPositionX, DropdownPositionY } from './dropdown-positions';\n\n\n/** Default `mc-dropdown` options that can be overridden. */\n// tslint:disable-next-line:interface-name\nexport interface McDropdownDefaultOptions {\n    /** The x-axis position of the dropdown. */\n    xPosition: DropdownPositionX;\n\n    /** The y-axis position of the dropdown. */\n    yPosition: DropdownPositionY;\n\n    /** Whether the dropdown should overlap the dropdown trigger. */\n    overlapTrigger: boolean;\n\n    /** Class to be applied to the dropdown's backdrop. */\n    backdropClass: string;\n\n    /** Whether the dropdown has a backdrop. */\n    hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mc-dropdown`. */\nexport const MC_DROPDOWN_DEFAULT_OPTIONS =\n    new InjectionToken<McDropdownDefaultOptions>('mc-dropdown-default-options', {\n        providedIn: 'root',\n        factory: MC_DROPDOWN_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MC_DROPDOWN_DEFAULT_OPTIONS_FACTORY(): McDropdownDefaultOptions {\n    return {\n        overlapTrigger: false,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop'\n    };\n}\n\n@Component({\n    selector: 'mc-dropdown',\n    templateUrl: 'dropdown.html',\n    styleUrls: ['dropdown.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcDropdown',\n    animations: [\n        mcDropdownAnimations.transformDropdown,\n        mcDropdownAnimations.fadeInItems\n    ],\n    providers: [\n        { provide: MC_DROPDOWN_PANEL, useExisting: McDropdown }\n    ]\n})\nexport class McDropdown implements AfterContentInit, McDropdownPanel<McDropdownItem>, OnInit, OnDestroy {\n\n    /** Position of the dropdown in the X axis. */\n    @Input()\n    get xPosition(): DropdownPositionX { return this._xPosition; }\n    set xPosition(value: DropdownPositionX) {\n        if (value !== 'before' && value !== 'after') {\n            throwMcDropdownInvalidPositionX();\n        }\n\n        this._xPosition = value;\n        this.setPositionClasses();\n    }\n\n    /** Position of the dropdown in the Y axis. */\n    @Input()\n    get yPosition(): DropdownPositionY { return this._yPosition; }\n    set yPosition(value: DropdownPositionY) {\n        if (value !== 'above' && value !== 'below') {\n            throwMcDropdownInvalidPositionY();\n        }\n\n        this._yPosition = value;\n        this.setPositionClasses();\n    }\n\n    /** Whether the dropdown should overlap its trigger. */\n    @Input()\n    get overlapTrigger(): boolean { return this._overlapTrigger; }\n    set overlapTrigger(value: boolean) {\n        this._overlapTrigger = coerceBooleanProperty(value);\n    }\n\n    /** Whether the dropdown has a backdrop. */\n    @Input()\n    get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n    set hasBackdrop(value: boolean | undefined) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n\n    /**\n     * This method takes classes set on the host mc-dropdown element and applies them on the\n     * dropdown template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing dropdown from outside the component.\n     * @param classes list of class names\n     */\n    @Input('class')\n    set panelClass(classes: string) {\n        if (classes && classes.length) {\n            this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n                obj[className] = true;\n\n                return obj;\n            }, {});\n\n            this._elementRef.nativeElement.className = '';\n        }\n    }\n\n    /** Config object to be passed into the dropdown's ngClass */\n    _classList: {[key: string]: boolean} = {};\n\n    /** Current state of the panel animation. */\n    _panelAnimationState: 'void' | 'enter' = 'void';\n\n    /** Emits whenever an animation on the dropdown completes. */\n    _animationDone = new Subject<AnimationEvent>();\n\n    /** Whether the dropdown is animating. */\n    _isAnimating: boolean;\n\n    /** Layout direction of the dropdown. */\n    direction: Direction;\n\n    /** Class to be added to the backdrop element. */\n    @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n    /** @docs-private */\n    @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n    /**\n     * List of the items inside of a dropdown.\n     */\n    @ContentChildren(McDropdownItem) items: QueryList<McDropdownItem>;\n\n    /**\n     * Dropdown content that will be rendered lazily.\n     * @docs-private\n     */\n    @ContentChild(McDropdownContent) lazyContent: McDropdownContent;\n\n    /** Event emitted when the dropdown is closed. */\n    @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n        new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n    private _keyManager: FocusKeyManager<McDropdownItem>;\n    private _xPosition: DropdownPositionX = this._defaultOptions.xPosition;\n    private _yPosition: DropdownPositionY = this._defaultOptions.yPosition;\n\n    /** Dropdown items inside the current dropdown. */\n    private _items: McDropdownItem[] = [];\n\n    /** Emits whenever the amount of dropdown items changes. */\n    private _itemChanges = new Subject<McDropdownItem[]>();\n\n    /** Subscription to tab events on the dropdown panel */\n    private _tabSubscription = Subscription.EMPTY;\n    private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n    private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n    constructor(\n        private _elementRef: ElementRef<HTMLElement>,\n        private _ngZone: NgZone,\n        @Inject(MC_DROPDOWN_DEFAULT_OPTIONS) private _defaultOptions: McDropdownDefaultOptions) { }\n\n    ngOnInit() {\n        this.setPositionClasses();\n    }\n\n    ngAfterContentInit() {\n        this._keyManager = new FocusKeyManager<McDropdownItem>(this.items).withWrap().withTypeAhead();\n        this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n    }\n\n    ngOnDestroy() {\n        this._tabSubscription.unsubscribe();\n        this.closed.complete();\n    }\n\n    /** Handle a keyboard event from the dropdown, delegating to the appropriate action. */\n    _handleKeydown(event: KeyboardEvent) {\n\n        // tslint:disable-next-line:deprecation\n        switch (event.keyCode) {\n            case ESCAPE:\n                this.closed.emit('keydown');\n                break;\n            case UP_ARROW:\n            case DOWN_ARROW:\n                this._keyManager.setFocusOrigin('keyboard');\n                this._keyManager.onKeydown(event);\n                break;\n            default:\n                // todo зачем обрабатывать лишние события ?\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    /**\n     * Focus the first item in the dropdown.\n     * @param origin Action from which the focus originated. Used to set the correct styling.\n     */\n    focusFirstItem(origin: FocusOrigin = 'program'): void {\n        // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n        if (this.lazyContent) {\n            this._ngZone.onStable.asObservable()\n                .pipe(take(1))\n                .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n        } else {\n            this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n        }\n    }\n\n    /**\n     * Resets the active item in the dropdown. This is used when the dropdown is opened, allowing\n     * the user to start from the first option when pressing the down arrow.\n     */\n    resetActiveItem() {\n        this._keyManager.setActiveItem(-1);\n    }\n\n    /**\n     * Registers a dropdown item with the dropdown.\n     * @docs-private\n     */\n    addItem(item: McDropdownItem) {\n        // We register the items through this method, rather than picking them up through\n        // `ContentChildren`, because we need the items to be picked up by their closest\n        // `mc-dropdown` ancestor. If we used `@ContentChildren(McDropdownItem, {descendants: true})`,\n        // all descendant items will bleed into the top-level dropdown in the case where the consumer\n        // has `mc-dropdown` instances nested inside each other.\n        if (this._items.indexOf(item) === -1) {\n            this._items.push(item);\n            this._itemChanges.next(this._items);\n        }\n    }\n\n    /**\n     * Removes an item from the dropdown.\n     * @docs-private\n     */\n    removeItem(item: McDropdownItem) {\n        const index = this._items.indexOf(item);\n\n        if (this._items.indexOf(item) > -1) {\n            this._items.splice(index, 1);\n            this._itemChanges.next(this._items);\n        }\n    }\n\n    /**\n     * Adds classes to the dropdown panel based on its position. Can be used by\n     * consumers to add specific styling based on the position.\n     * @param posX Position of the dropdown along the x axis.\n     * @param posY Position of the dropdown along the y axis.\n     * @docs-private\n     */\n    setPositionClasses(posX: DropdownPositionX = this.xPosition, posY: DropdownPositionY = this.yPosition) {\n        const classes = this._classList;\n        classes['mc-dropdown-before'] = posX === 'before';\n        classes['mc-dropdown-after'] = posX === 'after';\n        classes['mc-dropdown-above'] = posY === 'above';\n        classes['mc-dropdown-below'] = posY === 'below';\n    }\n\n    /** Starts the enter animation. */\n    _startAnimation() {\n        this._panelAnimationState = 'enter';\n    }\n\n    /** Resets the panel animation to its initial state. */\n    _resetAnimation() {\n        this._panelAnimationState = 'void';\n    }\n\n    /** Callback that is invoked when the panel animation completes. */\n    _onAnimationDone(event: AnimationEvent) {\n        this._animationDone.next(event);\n        this._isAnimating = false;\n\n        // Scroll the content element to the top once the animation is done. This is necessary, because\n        // we move focus to the first item while it's still being animated, which can throw the browser\n        // off when it determines the scroll position. Alternatively we can move focus when the\n        // animation is done, however moving focus asynchronously will interrupt screen readers\n        // which are in the process of reading out the dropdown already. We take the `element` from\n        // the `event` since we can't use a `ViewChild` to access the pane.\n        if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n            event.element.scrollTop = 0;\n        }\n    }\n}\n","import {\n    AfterContentInit,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    OnDestroy, OnInit,\n    Optional,\n    Output,\n    ViewContainerRef\n} from '@angular/core';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { Direction, Directionality } from '@ptsecurity/cdk/bidi';\nimport {\n    FlexibleConnectedPositionStrategy,\n    HorizontalConnectionPos,\n    Overlay,\n    OverlayConfig,\n    OverlayRef,\n    VerticalConnectionPos,\n    IScrollStrategy\n} from '@ptsecurity/cdk/overlay';\nimport { TemplatePortal } from '@ptsecurity/cdk/portal';\nimport { merge, Subscription } from 'rxjs';\nimport { filter, take, takeUntil } from 'rxjs/operators';\n\nimport { throwMcDropdownMissingError } from './dropdown-errors';\nimport { McDropdownPanel } from './dropdown-panel';\nimport { McDropdown } from './dropdown.component';\n\n\n/** Injection token that determines the scroll handling while the dropdown is open. */\nexport const MC_DROPDOWN_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-dropdown-scroll-strategy');\n\n/** @docs-private */\nexport function MC_DROPDOWN_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => IScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_DROPDOWN_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_DROPDOWN_SCROLL_STRATEGY_FACTORY\n};\n\n/**\n * This directive is intended to be used in conjunction with an mc-dropdown tag.  It is\n * responsible for toggling the display of the provided dropdown instance.\n */\n@Directive({\n    selector: `[mcDropdownTriggerFor]`,\n    host: {\n        '(touchstart)': '_openedBy = \"touch\"',\n        '(click)': 'toggle()'\n    },\n    exportAs: 'mcDropdownTrigger'\n})\nexport class McDropdownTrigger implements OnInit, AfterContentInit, OnDestroy {\n\n    /** Whether the dropdown is open. */\n    get opened(): boolean {\n        return this._opened;\n    }\n\n    /** The text direction of the containing app. */\n    get dir(): Direction {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n\n    // Tracking input type is necessary so it's possible to only auto-focus\n    // the first item of the list when the dropdown is opened via the keyboard\n    _openedBy: 'mouse' | 'touch' | null = null;\n\n    /** References the dropdown instance that the trigger is associated with. */\n    @Input('mcDropdownTriggerFor') dropdown: McDropdownPanel;\n\n    /** Data to be passed along to any lazily-rendered content. */\n    @Input('mcDropdownTriggerData') data: any;\n\n    /** Event emitted when the associated dropdown is opened. */\n    @Output() readonly dropdownOpened: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Event emitted when the associated dropdown is closed. */\n    @Output() readonly dropdownClosed: EventEmitter<void> = new EventEmitter<void>();\n\n    private _portal: TemplatePortal;\n    private _overlayRef: OverlayRef | null = null;\n    private _opened: boolean = false;\n    private _closeSubscription = Subscription.EMPTY;\n    private _hoverSubscription = Subscription.EMPTY;\n\n    constructor(private _overlay: Overlay,\n                private _element: ElementRef<HTMLElement>,\n                private _viewContainerRef: ViewContainerRef,\n                @Inject(MC_DROPDOWN_SCROLL_STRATEGY) private _scrollStrategy: any,\n                @Optional() private _dir: Directionality,\n                private _focusMonitor?: FocusMonitor) {}\n\n    ngOnInit(): void {\n        this.dropdown.closed = this.dropdown.closed || new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n    }\n\n    ngAfterContentInit() {\n        this._check();\n\n        this.dropdown.closed.asObservable().subscribe(() => {\n            this._destroy();\n        });\n    }\n\n    ngOnDestroy() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n\n        this._cleanUpSubscriptions();\n    }\n\n    /** Toggles the dropdown between the open and closed states. */\n    toggle(): void {\n        // tslint:disable-next-line:no-void-expression\n        return this._opened ? this.close() : this.open();\n    }\n\n    /** Opens the dropdown. */\n    open(): void {\n        if (this._opened) {\n            return;\n        }\n\n        this._check();\n\n        const overlayRef = this._createOverlay();\n        this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n        overlayRef.attach(this._portal);\n\n        if (this.dropdown.lazyContent) {\n            this.dropdown.lazyContent.attach(this.data);\n        }\n\n        this._closeSubscription = this._closingActions().subscribe(() => this.close());\n        this._init();\n\n        if (this.dropdown instanceof McDropdown) {\n            this.dropdown._startAnimation();\n        }\n    }\n\n    /** Closes the dropdown. */\n    close(): void {\n        this.dropdown.closed.emit();\n    }\n\n    /**\n     * Focuses the dropdown trigger.\n     * @param origin Source of the dropdown trigger's focus.\n     */\n    focus(origin: FocusOrigin = 'program') {\n        if (this._focusMonitor) {\n            this._focusMonitor.focusVia(this._element.nativeElement, origin);\n        } else {\n            this._element.nativeElement.focus();\n        }\n    }\n\n    /** Closes the dropdown and does the necessary cleanup. */\n    private _destroy() {\n        if (!this._overlayRef || !this.opened) {\n            return;\n        }\n\n        const dropdown = this.dropdown;\n\n        this._closeSubscription.unsubscribe();\n        this._overlayRef.detach();\n\n        if (dropdown instanceof McDropdown) {\n            dropdown._resetAnimation();\n\n            if (dropdown.lazyContent) {\n                // Wait for the exit animation to finish before detaching the content.\n                dropdown._animationDone\n                    .pipe(\n                        filter((event) => event.toState === 'void'),\n                        take(1),\n                        // Interrupt if the content got re-attached.\n                        takeUntil(dropdown.lazyContent._attached)\n                    )\n                    .subscribe(() => dropdown.lazyContent.detach(), undefined, () => {\n                        // No matter whether the content got re-attached, reset the dropdown.\n                        this._reset();\n                    });\n            } else {\n                this._reset();\n            }\n        } else {\n            this._reset();\n\n            if (dropdown.lazyContent) {\n                dropdown.lazyContent.detach();\n            }\n        }\n    }\n\n    /**\n     * This method sets the dropdown state to open and focuses the first item if\n     * the dropdown was opened via the keyboard.\n     */\n    private _init(): void {\n        this.dropdown.direction = this.dir;\n        this._setIsOpened(true);\n        this.dropdown.focusFirstItem(this._openedBy || 'program');\n    }\n\n    /**\n     * This method resets the dropdown when it's closed, most importantly restoring\n     * focus to the dropdown trigger if the dropdown was opened via the keyboard.\n     */\n    private _reset(): void {\n        this._setIsOpened(false);\n\n        // We should reset focus if the user is navigating using a keyboard or\n        // if we have a top-level trigger which might cause focus to be lost\n        // when clicking on the backdrop.\n        if (!this._openedBy) {\n            // Note that the focus style will show up both for `program` and\n            // `keyboard` so we don't have to specify which one it is.\n            this.focus();\n        } else {\n            this.focus(this._openedBy);\n        }\n\n        this._openedBy = null;\n    }\n\n    // set state rather than toggle to support triggers sharing a dropdown\n    private _setIsOpened(isOpen: boolean): void {\n        this._opened = isOpen;\n        // tslint:disable-next-line:no-void-expression\n        this._opened ? this.dropdownOpened.emit() : this.dropdownClosed.emit();\n    }\n\n    /**\n     * This method checks that a valid instance of Dropdown has been passed into\n     * mcDropdownTriggerFor. If not, an exception is thrown.\n     */\n    private _check() {\n        if (!this.dropdown) {\n            throwMcDropdownMissingError();\n        }\n    }\n\n    /**\n     * This method creates the overlay from the provided dropdown's template and saves its\n     * OverlayRef so that it can be attached to the DOM when open is called.\n     */\n    private _createOverlay(): OverlayRef {\n        if (!this._overlayRef) {\n            this._portal = new TemplatePortal(this.dropdown.templateRef, this._viewContainerRef);\n            const config = this._getOverlayConfig();\n            this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n            this._overlayRef = this._overlay.create(config);\n\n            // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n            // Ideally we'd also have our keyboard event logic in here, however doing so will\n            // break anybody that may have implemented the `McDropdownPanel` themselves.\n            this._overlayRef.keydownEvents().subscribe();\n        }\n\n        return this._overlayRef;\n    }\n\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @returns OverlayConfig\n     */\n    private _getOverlayConfig(): OverlayConfig {\n        return new OverlayConfig({\n            positionStrategy: this._overlay.position()\n                .flexibleConnectedTo(this._element)\n                .withLockedPosition()\n                .withTransformOriginOn('.mc-dropdown__panel'),\n            hasBackdrop: this.dropdown.hasBackdrop === null || this.dropdown.hasBackdrop === undefined\n                ? true\n                : this.dropdown.hasBackdrop,\n            backdropClass: this.dropdown.backdropClass || 'cdk-overlay-transparent-backdrop',\n            scrollStrategy: this._scrollStrategy(),\n            direction: this._dir\n        });\n    }\n\n    /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the dropdown based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     */\n    private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n        if (this.dropdown.setPositionClasses) {\n            // todo possibly we should not recompute positions there\n            /*position.positionChanges.subscribe((change) => {\n                const posX: DropdownPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n                const posY: DropdownPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n                this.dropdown.setPositionClasses!(posX, posY);\n            });*/\n            position.positionChanges.subscribe(() => {\n                this.dropdown.setPositionClasses!(this.dropdown.xPosition, this.dropdown.yPosition);\n            });\n        }\n    }\n\n    /**\n     * Sets the appropriate positions on a position strategy\n     * so the overlay connects with the trigger correctly.\n     * @param positionStrategy Strategy whose position to update.\n     */\n    private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n        const [originX, originFallbackX]: HorizontalConnectionPos[] =\n            this.dropdown.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n        const [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n            this.dropdown.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n        let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n        const [overlayX, overlayFallbackX] = [originX, originFallbackX];\n        const offsetY = 0;\n\n        if (!this.dropdown.overlapTrigger) {\n            originY = overlayY === 'top' ? 'bottom' : 'top';\n            originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n        }\n\n        positionStrategy.withPositions([\n            {originX, originY, overlayX, overlayY, offsetY},\n            {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n            {\n                originX,\n                originY: originFallbackY,\n                overlayX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY\n            },\n            {\n                originX: originFallbackX,\n                originY: originFallbackY,\n                overlayX: overlayFallbackX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY\n            }\n        ]);\n    }\n\n    /** Cleans up the active subscriptions. */\n    private _cleanUpSubscriptions(): void {\n        this._closeSubscription.unsubscribe();\n        this._hoverSubscription.unsubscribe();\n    }\n\n    /** Returns a stream that emits whenever an action that should close the dropdown occurs. */\n    private _closingActions() {\n        const backdrop = this._overlayRef!.backdropClick();\n        const detachments = this._overlayRef!.detachments();\n\n        return merge(backdrop, detachments);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\n\nimport { McDropdownContent } from './dropdown-content';\nimport { McDropdownItem } from './dropdown-item';\nimport { MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER, McDropdownTrigger } from './dropdown-trigger';\nimport { McDropdown } from './dropdown.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule\n    ],\n    exports: [McDropdown, McDropdownItem, McDropdownTrigger, McDropdownContent],\n    declarations: [McDropdown, McDropdownItem, McDropdownTrigger, McDropdownContent],\n    providers: [MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class McDropdownModule {}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-content',\n    preserveWhitespaces: false,\n    templateUrl: './content.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ],\n    host: {\n        '[class.mc-layout-content]': 'true'\n    }\n})\nexport class McContentComponent {\n}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-footer',\n    preserveWhitespaces: false,\n    templateUrl: './footer.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ],\n    host: {\n        '[class.mc-layout-footer]': 'true'\n    }\n})\nexport class McFooterComponent {\n}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector : 'mc-header',\n    preserveWhitespaces: false,\n    templateUrl: './header.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ],\n    host: {\n        '[class.mc-layout-header]': 'true'\n    }\n})\nexport class McHeaderComponent {\n}\n","import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-layout',\n    preserveWhitespaces: false,\n    styleUrls: ['layout.css'],\n    templateUrl: './layout.component.html',\n    host: {\n        '[class.mc-layout]': 'true',\n        '[class.mc-layout-has-sidebar]': 'hasSidebar'\n    },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McLayoutComponent {\n    hasSidebar = false;\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    EventEmitter,\n    Host,\n    Input,\n    OnInit,\n    Optional,\n    Output\n} from '@angular/core';\nimport { toBoolean } from '@ptsecurity/mosaic/core';\n\nimport { McLayoutComponent } from './layout.component';\n\n\n@Component({\n    selector: 'mc-sidebar',\n    preserveWhitespaces: false,\n    templateUrl: './sidebar.component.html',\n    host: {\n        '[class.mc-layout-sidebar]': 'true',\n        '[class.mc-layout-sidebar-collapsed]': 'mcCollapsed',\n        '[style.flex]': 'mcFlex',\n        '[style.max-width.px]': 'mcWidth',\n        '[style.min-width.px]': 'mcWidth',\n        '[style.width.px]': 'mcWidth'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McSidebarComponent implements OnInit {\n\n    @Input() _mcWidth = 200;\n    @Input() mcCollapsedWidth = 80;\n\n    @Input()\n    set mcCollapsible(value: boolean) {\n        this.collapsible = toBoolean(value);\n    }\n\n    get mcCollapsible(): boolean {\n        return this.collapsible;\n    }\n\n    @Input()\n    set mcCollapsed(value: boolean) {\n        this.collapsed = toBoolean(value);\n    }\n\n    get mcCollapsed(): boolean {\n        return this.collapsed;\n    }\n\n    // tslint:disable-next-line\n    @Output() mcCollapsedChange = new EventEmitter();\n\n    private collapsed = false;\n    private collapsible = false;\n\n    get mcFlex(): string {\n        if (this.mcCollapsed) {\n            return `0 0 ${this.mcCollapsedWidth}px`;\n        } else {\n            return `0 0 ${this.mcWidth}px`;\n        }\n    }\n\n    get mcWidth(): number {\n        if (this.mcCollapsed) {\n            return this.mcCollapsedWidth;\n        } else {\n            return this._mcWidth;\n        }\n    }\n\n    constructor(\n        @Optional() @Host() private mcLayoutComponent: McLayoutComponent) {\n    }\n\n    ngOnInit() {\n        if (this.mcLayoutComponent) {\n            this.mcLayoutComponent.hasSidebar = true;\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McContentComponent } from './content.component';\nimport { McFooterComponent } from './footer.component';\nimport { McHeaderComponent } from './header.component';\nimport { McLayoutComponent } from './layout.component';\nimport { McSidebarComponent } from './sidebar.component';\n\n\n@NgModule({\n    imports: [ CommonModule ],\n    exports: [\n        McLayoutComponent,\n        McContentComponent,\n        McFooterComponent,\n        McHeaderComponent,\n        McSidebarComponent\n    ],\n    declarations: [\n        McLayoutComponent,\n        McContentComponent,\n        McFooterComponent,\n        McHeaderComponent,\n        McSidebarComponent\n    ]\n})\nexport class McLayoutModule {\n}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    Output,\n    QueryList,\n    ViewEncapsulation,\n    ChangeDetectorRef,\n    Inject,\n    OnDestroy,\n    OnInit,\n    ViewChild\n} from '@angular/core';\n\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { Subscription } from 'rxjs';\n\nimport { FocusKeyManager, IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { END, ENTER, HOME, PAGE_DOWN, PAGE_UP, SPACE } from '@ptsecurity/cdk/keycodes';\n\nimport {\n    McLine,\n    McLineSetter,\n    CanDisable,\n    mixinDisabled,\n    toBoolean, CanDisableCtor\n} from '@ptsecurity/mosaic/core';\n\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n    exportAs: 'mcListOption',\n    selector: 'mc-list-option',\n    host: {\n        tabindex: '-1',\n\n        class: 'mc-list-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': '_hasFocus',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()',\n        '(click)': '_handleClick()'\n    },\n    templateUrl: 'list-option.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListOption implements AfterContentInit, OnDestroy, OnInit, IFocusableOption {\n    _hasFocus: boolean = false;\n\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    @ViewChild('text') _text: ElementRef;\n\n    // Whether the label should appear before or after the checkbox. Defaults to 'after'\n    @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n    @Input() value: any;\n\n    @Input()\n    get disabled() {\n        return this._disabled || (this.listSelection && this.listSelection.disabled);\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    @Input()\n    get selected(): boolean {\n        return this.listSelection.selectedOptions && this.listSelection.selectedOptions.isSelected(this) || false;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            this.listSelection._reportValueChange();\n        }\n    }\n\n    private _lineSetter: McLineSetter;\n    private _selected = false;\n    private _disabled = false;\n\n    constructor(\n        private _element: ElementRef,\n        private _changeDetector: ChangeDetectorRef,\n        @Inject(forwardRef(() => McListSelection))\n        public listSelection: McListSelection\n    ) {}\n\n    ngOnInit() {\n        if (this._selected) {\n            // List options that are selected at initialization can't be reported properly to the form\n            // control. This is because it takes some time until the selection-list knows about all\n            // available options. Also it can happen that the ControlValueAccessor has an initial value\n            // that should be used instead. Deferring the value change report to the next tick ensures\n            // that the form control value is not being overwritten.\n            const wasSelected = this._selected;\n\n            Promise.resolve().then(() => {\n                if (this._selected || wasSelected) {\n                    this.selected = true;\n                    this._changeDetector.markForCheck();\n                }\n            });\n        }\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    ngOnDestroy(): void {\n        if (this.selected) {\n            // We have to delay this until the next tick in order\n            // to avoid changed after checked errors.\n            Promise.resolve().then(() => this.selected = false);\n        }\n\n        this.listSelection._removeOptionFromList(this);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    focus(): void {\n        this._element.nativeElement.focus();\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    getLabel() {\n        return this._text ? this._text.nativeElement.textContent : '';\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.listSelection.selectedOptions) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.listSelection.selectedOptions.select(this);\n        } else {\n            this.listSelection.selectedOptions.deselect(this);\n        }\n\n        this._changeDetector.markForCheck();\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    _handleClick() {\n        if (this.disabled) { return; }\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    _handleFocus() {\n        if (this.disabled || this._hasFocus) { return; }\n\n        this._hasFocus = true;\n    }\n\n    _handleBlur() {\n        this._hasFocus = false;\n\n        this.listSelection._onTouched();\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n\n\nexport const MC_SELECTION_LIST_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McListSelection),\n    multi: true\n};\n\n// Change event that is being fired whenever the selected state of an option changes. */\nexport class McListSelectionChange {\n    constructor(\n        // Reference to the selection list that emitted the event.\n        public source: McListSelection,\n        // Reference to the option that has been changed.\n        public option: McListOption\n    ) {}\n}\n\n\nexport class McListSelectionBase {}\n\nexport const _McListSelectionMixinBase: CanDisableCtor & typeof McListSelectionBase\n    = mixinDisabled(McListSelectionBase);\n\n@Component({\n    exportAs: 'mcListSelection',\n    selector: 'mc-list-selection',\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'tabIndex'],\n    host: {\n        class: 'mc-list-selection',\n        '[tabIndex]': 'tabIndex',\n        '(focus)': 'focus()',\n        '(blur)': '_onTouched()',\n        '(keydown)': '_onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    providers: [MC_SELECTION_LIST_VALUE_ACCESSOR],\n    preserveWhitespaces: false\n})\nexport class McListSelection extends _McListSelectionMixinBase implements\n    IFocusableOption, CanDisable, AfterContentInit, ControlValueAccessor {\n\n    _keyManager: FocusKeyManager<McListOption>;\n\n    // The option components contained within this selection-list.\n    @ContentChildren(McListOption) options: QueryList<McListOption>;\n\n    tabIndex: number;\n\n    autoSelect: boolean;\n    noUnselect: boolean;\n    multiple: boolean;\n\n    // todo temporary solution\n    withShift: boolean;\n    withCtrl: boolean;\n\n    @Input() horizontal: boolean = false;\n\n    // Emits a change event whenever the selected state of an option changes.\n    @Output() readonly selectionChange: EventEmitter<McListSelectionChange> = new EventEmitter<McListSelectionChange>();\n\n    selectedOptions: SelectionModel<McListOption>;\n\n    // Used for storing the values that were assigned before the options were initialized.\n    private _tempValues: string[] | null;\n\n    private _modelChanges = Subscription.EMPTY;\n\n    constructor(\n        private _element: ElementRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string,\n        @Attribute('multiple') multiple: string\n    ) {\n        super();\n\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.multiple = multiple === null ? true : toBoolean(multiple);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.selectedOptions = new SelectionModel<McListOption>(this.multiple);\n    }\n\n    ngAfterContentInit(): void {\n        this.horizontal = toBoolean(this.horizontal);\n\n        this._keyManager = new FocusKeyManager<McListOption>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation(!this.horizontal)\n            .withHorizontalOrientation(this.horizontal ? 'ltr' : null);\n\n        if (this._tempValues) {\n            this._setOptionsFromValues(this._tempValues);\n            this._tempValues = null;\n        }\n\n        // Sync external changes to the model back to the options.\n        this._modelChanges = this.selectedOptions.onChange!.subscribe((event) => {\n            for (const item of event.added) {\n                item.selected = true;\n            }\n\n            for (const item of event.removed) {\n                item.selected = false;\n            }\n        });\n\n        this.updateScrollSize();\n    }\n\n    ngOnDestroy() {\n        this._modelChanges.unsubscribe();\n    }\n\n    focus() {\n        this._element.nativeElement.focus();\n    }\n\n    selectAll() {\n        this.options.forEach((option) => option.setSelected(true));\n\n        this._reportValueChange();\n    }\n\n    deselectAll() {\n        this.options.forEach((option) => option.setSelected(false));\n\n        this._reportValueChange();\n    }\n\n    updateScrollSize(): void {\n        if (this.horizontal || !this.options.first) { return; }\n\n        this._keyManager.withScrollSize(Math.floor(this._getHeight() / this.options.first._getHeight()));\n    }\n\n    // Sets the focused option of the selection-list.\n    setFocusedOption(option: McListOption): void {\n        this._keyManager.updateActiveItem(option);\n\n        if (this.withShift && this.multiple) {\n            const previousIndex = this._keyManager.previousActiveItemIndex;\n            const activeIndex = this._keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n\n            this.withShift = false;\n        } else if (this.withCtrl) {\n            this.withCtrl = false;\n\n            if (!this._canDeselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) {\n                this.options.forEach((item) => item.setSelected(false));\n                option.setSelected(true);\n            }\n        }\n\n        this._emitChangeEvent(option);\n        this._reportValueChange();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(values: string[]): void {\n        if (this.options) {\n            this._setOptionsFromValues(values || []);\n        } else {\n            this._tempValues = values;\n        }\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this._onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this._onTouched = fn;\n    }\n\n    // Implemented as a part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        if (this.options) {\n            this.options.forEach((option) => option.disabled = isDisabled);\n        }\n    }\n\n    getSelectedOptionValues(): string[] {\n        return this.options.filter((option) => option.selected).map((option) => option.value);\n    }\n\n    // Toggles the selected state of the currently focused option.\n    toggleFocusedOption(): void {\n        const focusedIndex = this._keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n            const focusedOption: McListOption = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this._canDeselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this._emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    _canDeselectLast(listOption: McListOption): boolean {\n        return !(this.noUnselect && this.selectedOptions.selected.length === 1 && listOption.selected);\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    // View to model callback that should be called if the list or its options lost focus.\n    _onTouched: () => void = () => {};\n\n    // Removes an option from the selection list and updates the active item.\n    _removeOptionFromList(option: McListOption) {\n        if (option._hasFocus) {\n            const optionIndex = this._getOptionIndex(option);\n\n            // Check whether the option is the last item\n            if (optionIndex > 0) {\n                this._keyManager.setPreviousItemActive();\n            } else if (optionIndex === 0 && this.options.length > 1) {\n                this._keyManager.setNextItemActive();\n            }\n        }\n    }\n\n    _onKeyDown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n        this.withShift = event.shiftKey;\n        this.withCtrl = event.ctrlKey;\n\n        switch (keyCode) {\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                if (!this.horizontal) { this._keyManager.setPreviousPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                if (!this.horizontal) { this._keyManager.setNextPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    // Reports a value change to the ControlValueAccessor\n    _reportValueChange() {\n        if (this.options) {\n            this._onChange(this.getSelectedOptionValues());\n        }\n    }\n\n    // Emits a change event if the selected state of an option changed.\n    _emitChangeEvent(option: McListOption) {\n        this.selectionChange.emit(new McListSelectionChange(this, option));\n    }\n\n    // Returns the option with the specified value.\n    private _getOptionByValue(value: string): McListOption | undefined {\n        return this.options.find((option) => option.value === value);\n    }\n\n    // Sets the selected options based on the specified values.\n    private _setOptionsFromValues(values: string[]) {\n        this.options.forEach((option) => option.setSelected(false));\n\n        values\n            .map((value) => this._getOptionByValue(value))\n            .filter(Boolean)\n            .forEach((option) => option!.setSelected(true));\n    }\n\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private _isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    // Returns the index of the specified list option.\n    private _getOptionIndex(option: McListOption): number {\n        return this.options.toArray().indexOf(option);\n    }\n\n    // View to model callback that should be called whenever the selected options change.\n    private _onChange: (value: any) => void = (_: any) => {};\n}\n","// todo пока не делаем, перенесено из материала, но у нас в доках таких простых списков нет.\nimport {\n    AfterContentInit, ChangeDetectionStrategy, Component, ContentChildren, Directive, ElementRef, QueryList,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { McLine, McLineSetter } from '@ptsecurity/mosaic/core';\n\n\nexport class McListBase {}\n\n@Component({\n    selector: 'mc-list',\n    host: { class: 'mc-list' },\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McList extends McListBase {}\n\n\n/**\n * Directive whose purpose is to add the mc- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n    selector: '[mc-subheader], [mcSubheader]',\n    host: { class: 'mc-subheader' }\n})\nexport class McListSubheaderCssStyler {}\n\n\n// Boilerplate for applying mixins to McListItem.\nexport class McListItemBase {}\n\n@Component({\n    selector: 'mc-list-item, a[mc-list-item]',\n    host: {\n        class: 'mc-list-item',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()'\n    },\n    templateUrl: './list-item.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListItem extends McListItemBase implements AfterContentInit {\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    private _lineSetter: McLineSetter;\n\n    constructor(private _element: ElementRef) {\n        super();\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    _handleFocus() {\n        this._element.nativeElement.classList.add('mc-focused');\n    }\n\n    _handleBlur() {\n        this._element.nativeElement.classList.remove('mc-focused');\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLineModule } from '@ptsecurity/mosaic/core';\n\nimport { McListSelection, McListOption } from './list-selection.component';\nimport { McList, McListItem, McListSubheaderCssStyler } from './list.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        McLineModule\n    ],\n    exports: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ],\n    declarations: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ]\n})\nexport class McListModule {}\n","import {\n    Input,\n    Attribute,\n    Component,\n    ElementRef,\n    OnDestroy,\n    ViewEncapsulation,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef\n} from '@angular/core';\n\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport {\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\nexport class McLinkBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\nexport const _McLinkBase: HasTabIndexCtor & CanDisableCtor & typeof McLinkBase\n    = mixinTabIndex(mixinDisabled(McLinkBase));\n\n@Component({\n    selector: 'a.mc-link',\n    template: `<ng-content></ng-content>`,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcLink',\n    styleUrls: ['./link.css'],\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': 'tabIndex'\n    }\n})\n\nexport class McLink extends _McLinkBase implements OnDestroy, HasTabIndex, CanDisable {\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    private _disabled = false;\n\n    constructor(\n        @Attribute('tabindex') tabIndex: string,\n        public elementRef: ElementRef,\n        private _focusMonitor: FocusMonitor,\n        private _changeDetector: ChangeDetectorRef) {\n\n        super(elementRef);\n        this._focusMonitor.monitor(elementRef.nativeElement, true);\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this._getHostElement().focus();\n    }\n\n    _getHostElement() {\n        return this.elementRef.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLink } from './link.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule\n    ],\n    declarations: [McLink],\n    exports: [McLink]\n})\nexport class McLinkModule {}\n","import { Injectable, Optional, SkipSelf } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\n\nimport { McModalRef } from './modal-ref.class';\n\n\ninterface IRegisteredMeta {\n    modalRef: McModalRef;\n    afterOpenSubscription: Subscription;\n    afterCloseSubscription: Subscription;\n}\n\n@Injectable()\nexport class McModalControlService {\n\n    // Track singleton afterAllClose through over the injection tree\n    get afterAllClose(): Subject<void> {\n        return this.parentService ? this.parentService.afterAllClose : this.rootAfterAllClose!;\n    }\n\n    // Track singleton openModals array through over the injection tree\n    get openModals(): McModalRef[] {\n        return this.parentService ? this.parentService.openModals : this.rootOpenModals!;\n    }\n\n    // @ts-ignore\n    private rootOpenModals: McModalRef[] = this.parentService ? null : [];\n    // @ts-ignore\n    private rootAfterAllClose: Subject<void> = this.parentService ? null : new Subject<void>();\n    // @ts-ignore\n    private rootRegisteredMetaMap: Map<McModalRef, IRegisteredMeta> = this.parentService ? null : new Map();\n\n    // Registered modal for later usage\n    private get registeredMetaMap(): Map<McModalRef, IRegisteredMeta> {\n        return this.parentService ? this.parentService.registeredMetaMap : this.rootRegisteredMetaMap;\n    }\n\n    constructor(\n        @Optional() @SkipSelf() private parentService: McModalControlService) {\n    }\n\n    // Register a modal to listen its open/close\n    registerModal(modalRef: McModalRef): void {\n        if (!this.hasRegistered(modalRef)) {\n            const afterOpenSubscription = modalRef.afterOpen.subscribe(() => this.openModals.push(modalRef));\n            const afterCloseSubscription = modalRef.afterClose.subscribe(() => this.removeOpenModal(modalRef));\n\n            this.registeredMetaMap.set(modalRef, {modalRef, afterOpenSubscription, afterCloseSubscription});\n        }\n    }\n\n    hasRegistered(modalRef: McModalRef): boolean {\n        return this.registeredMetaMap.has(modalRef);\n    }\n\n    // Close all registered opened modals\n    closeAll(): void {\n        let i = this.openModals.length;\n\n        while (i--) {\n            this.openModals[i].close();\n        }\n    }\n\n    private removeOpenModal(modalRef: McModalRef): void {\n        const index = this.openModals.indexOf(modalRef);\n\n        if (index > -1) {\n            this.openModals.splice(index, 1);\n\n            if (!this.openModals.length) {\n                this.afterAllClose.next();\n            }\n        }\n    }\n}\n","import { Observable } from 'rxjs';\n\nimport { McModalComponent } from './modal.component';\n\n\n/**\n * API class that public to users to handle the modal instance.\n * McModalRef is aim to avoid accessing to the modal instance directly by users.\n */\nexport abstract class McModalRef<T = any, R = any> {\n    abstract afterOpen: Observable<void>;\n    abstract afterClose: Observable<R>;\n\n    abstract open(): void;\n\n    abstract close(result?: R): void;\n\n    abstract destroy(result?: R): void;\n\n    /**\n     * Trigger the mcOnOk/mcOnCancel by manual\n     */\n    abstract triggerOk(): void;\n\n    abstract triggerCancel(): void;\n\n    // /**\n    //  * Return the ComponentRef of mcContent when specify mcContent as a Component\n    //  * Note: this method may return undefined if the Component has not ready yet.\n    //    (it only available after Modal's ngOnInit)\n    //  */\n    // abstract getContentComponentRef(): ComponentRef<{}>;\n\n    /**\n     * Return the component instance of mcContent when specify mcContent as a Component\n     * Note: this method may return undefined if the Component has not ready yet.\n     * (it only available after Modal's ngOnInit)\n     */\n    abstract getContentComponent(): T;\n\n    /**\n     * Get the dom element of this Modal\n     */\n    abstract getElement(): HTMLElement;\n\n    /**\n     * Get the instance of the Modal itself\n     */\n    abstract getInstance(): McModalComponent;\n}\n","export interface IClickPosition {\n    x: number;\n    y: number;\n}\n\nexport class ModalUtil {\n    private lastPosition: IClickPosition;\n\n    constructor(private document: Document) {\n        this.lastPosition = {x: -1, y: -1};\n        this.listenDocumentClick();\n    }\n\n    getLastClickPosition(): IClickPosition {\n        return this.lastPosition;\n    }\n\n    listenDocumentClick(): void {\n        this.document.addEventListener('click', (event: MouseEvent) => {\n            this.lastPosition = {x: event.clientX, y: event.clientY};\n        });\n    }\n}\n\nexport default new ModalUtil(document);\n","import {\n    AfterContentInit,\n    AfterViewChecked,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Optional,\n    Output,\n    SimpleChanges,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport { ComponentPortal, IComponentType, Portal } from '@ptsecurity/cdk/portal';\nimport { Subject, Subscription } from 'rxjs';\n\nimport { McCalendarCellCssClasses } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\nimport { McDatepickerIntl } from './datepicker-intl';\nimport { McMonthView } from './month-view';\nimport { McMultiYearView, yearsPerPage } from './multi-year-view';\nimport { McYearView } from './year-view';\n\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type McCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for McCalendar */\n@Component({\n    selector: 'mc-calendar-header',\n    templateUrl: 'calendar-header.html',\n    exportAs: 'mcCalendarHeader',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCalendarHeader<D> {\n    constructor(private intl: McDatepickerIntl,\n                @Inject(forwardRef(() => McCalendar)) public calendar: McCalendar<D>,\n                @Optional() private dateAdapter: DateAdapter<D>,\n                @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n                changeDetectorRef: ChangeDetectorRef) {\n\n        this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n    }\n\n    /** The label for the current calendar view. */\n    get periodButtonText(): string {\n        if (this.calendar.currentView === 'month') {\n            const label = this.dateAdapter\n                .format(this.calendar.activeDate, this.dateFormats.display.monthYearLabel);\n\n            return label[0].toLocaleUpperCase() + label.substr(1);\n        }\n\n        if (this.calendar.currentView === 'year') {\n            return this.dateAdapter.getYearName(this.calendar.activeDate);\n        }\n\n        const activeYear = this.dateAdapter.getYear(this.calendar.activeDate);\n        const firstYearInView = this.dateAdapter.getYearName(\n            // tslint:disable-next-line:no-magic-numbers\n            this.dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n        const lastYearInView = this.dateAdapter.getYearName(\n            // tslint:disable-next-line:no-magic-numbers\n            this.dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n\n        return `${firstYearInView} \\u2013 ${lastYearInView}`;\n    }\n\n    get periodButtonLabel(): string {\n        return this.calendar.currentView === 'month' ?\n            this.intl.switchToMultiYearViewLabel : this.intl.switchToMonthViewLabel;\n    }\n\n    /** The label for the previous button. */\n    get prevButtonLabel(): string {\n        return {\n            month: this.intl.prevMonthLabel,\n            year: this.intl.prevYearLabel,\n            'multi-year': this.intl.prevMultiYearLabel\n        }[this.calendar.currentView];\n    }\n\n    /** The label for the next button. */\n    get nextButtonLabel(): string {\n        return {\n            month: this.intl.nextMonthLabel,\n            year: this.intl.nextYearLabel,\n            'multi-year': this.intl.nextMultiYearLabel\n        }[this.calendar.currentView];\n    }\n\n    /** Handles user clicks on the period label. */\n    currentPeriodClicked(): void {\n        this.calendar.currentView = this.calendar.currentView === 'month' ? 'multi-year' : 'month';\n    }\n\n    /** Handles user clicks on the previous button. */\n    previousClicked(): void {\n        this.calendar.activeDate = this.calendar.currentView === 'month' ?\n            this.dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this.dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView === 'year' ? -1 : -yearsPerPage\n            );\n    }\n\n    /** Handles user clicks on the next button. */\n    nextClicked(): void {\n        this.calendar.activeDate = this.calendar.currentView === 'month' ?\n            this.dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this.dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                this.calendar.currentView === 'year' ? 1 : yearsPerPage\n            );\n    }\n\n    /** Whether the previous period button is enabled. */\n    previousEnabled(): boolean {\n        if (!this.calendar.minDate) {\n            return true;\n        }\n\n        return !this.calendar.minDate ||\n            !this.isSameView(this.calendar.activeDate, this.calendar.minDate);\n    }\n\n    /** Whether the next period button is enabled. */\n    nextEnabled(): boolean {\n        return !this.calendar.maxDate ||\n            !this.isSameView(this.calendar.activeDate, this.calendar.maxDate);\n    }\n\n    /** Whether the two dates represent the same view in the current view mode (month or year). */\n    private isSameView(date1: D, date2: D): boolean {\n        if (this.calendar.currentView === 'month') {\n            return this.dateAdapter.getYear(date1) === this.dateAdapter.getYear(date2) &&\n                this.dateAdapter.getMonth(date1) === this.dateAdapter.getMonth(date2);\n        }\n        if (this.calendar.currentView === 'year') {\n            return this.dateAdapter.getYear(date1) === this.dateAdapter.getYear(date2);\n        }\n\n        // Otherwise we are in 'multi-year' view.\n        return Math.floor(this.dateAdapter.getYear(date1) / yearsPerPage) ===\n            Math.floor(this.dateAdapter.getYear(date2) / yearsPerPage);\n    }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-calendar',\n    templateUrl: 'calendar.html',\n    styleUrls: ['calendar.css'],\n    host: {\n        class: 'mc-calendar'\n    },\n    exportAs: 'mcCalendar',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n\n    /** A date representing the period (month or year) to start the calendar in. */\n    @Input()\n    get startAt(): D | null {\n        return this._startAt;\n    }\n\n    set startAt(value: D | null) {\n        this._startAt = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /**\n     * The current active date. This determines which time period is shown and which date is\n     * highlighted when using keyboard navigation.\n     */\n    get activeDate(): D {\n        return this.clampedActiveDate;\n    }\n\n    set activeDate(value: D) {\n        this.clampedActiveDate = this.dateAdapter.clampDate(value, this.minDate, this.maxDate);\n        this.stateChanges.next();\n    }\n\n    /** Whether the calendar is in month view. */\n    get currentView(): McCalendarView {\n        return this._currentView;\n    }\n\n    set currentView(value: McCalendarView) {\n        this._currentView = value;\n        this.moveFocusOnNextTick = true;\n    }\n\n    /** An input indicating the type of the header component, if set. */\n    @Input() headerComponent: IComponentType<any>;\n\n    /** A portal containing the header component type for this calendar. */\n    calendarHeaderPortal: Portal<any>;\n\n    /** Whether the calendar should be started in month or year view. */\n    @Input() startView: McCalendarView = 'month';\n\n    /** Function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Function that can be used to add custom CSS classes to dates. */\n    @Input() dateClass: (date: D) => McCalendarCellCssClasses;\n\n    /** Emits when the currently selected date changes. */\n    @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /**\n     * Emits the year chosen in multiyear view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /**\n     * Emits the month chosen in year view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits when any date is selected. */\n    @Output() readonly userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Reference to the current month view component. */\n    @ViewChild(McMonthView) monthView: McMonthView<D>;\n\n    /** Reference to the current year view component. */\n    @ViewChild(McYearView) yearView: McYearView<D>;\n\n    /** Reference to the current multi-year view component. */\n    @ViewChild(McMultiYearView) multiYearView: McMultiYearView<D>;\n\n    /**\n     * Emits whenever there is a state change that the header may need to respond to.\n     */\n    stateChanges = new Subject<void>();\n\n    private intlChanges: Subscription;\n\n    /**\n     * Used for scheduling that focus should be moved to the active cell on the next tick.\n     * We need to schedule it, rather than do it immediately, because we have to wait\n     * for Angular to re-evaluate the view children.\n     */\n    private moveFocusOnNextTick = false;\n    private _startAt: D | null;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n    private clampedActiveDate: D;\n    private _currentView: McCalendarView;\n\n    constructor(\n        intl: McDatepickerIntl,\n        @Optional() private dateAdapter: DateAdapter<D>,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        this.intlChanges = intl.changes.subscribe(() => {\n            changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        });\n    }\n\n    ngAfterContentInit() {\n        this.calendarHeaderPortal = new ComponentPortal(this.headerComponent || McCalendarHeader);\n        this.activeDate = this.startAt || this.dateAdapter.today();\n\n        // Assign to the private property since we don't want to move focus on init.\n        this._currentView = this.startView;\n    }\n\n    ngAfterViewChecked() {\n        if (this.moveFocusOnNextTick) {\n            this.moveFocusOnNextTick = false;\n            this.focusActiveCell();\n        }\n    }\n\n    ngOnDestroy() {\n        this.intlChanges.unsubscribe();\n        this.stateChanges.complete();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n        if (change && !change.firstChange) {\n            const view = this.getCurrentViewComponent();\n\n            if (view) {\n                // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n                // passed down to the view via data bindings which won't be up-to-date when we call `init`.\n                this.changeDetectorRef.detectChanges();\n                view.init();\n            }\n        }\n\n        this.stateChanges.next();\n    }\n\n    focusActiveCell() {\n        this.getCurrentViewComponent().focusActiveCell();\n    }\n\n    /** Updates today's date after an update of the active date */\n    updateTodaysDate() {\n        const view = this.currentView === 'month' ? this.monthView :\n            (this.currentView === 'year' ? this.yearView : this.multiYearView);\n\n        view.ngAfterContentInit();\n    }\n\n    /** Handles date selection in the month view. */\n    dateSelected(date: D): void {\n        if (!this.dateAdapter.sameDate(date, this.selected)) {\n            this.selectedChange.emit(date);\n        }\n    }\n\n    /** Handles year selection in the multiyear view. */\n    yearSelectedInMultiYearView(normalizedYear: D) {\n        this.yearSelected.emit(normalizedYear);\n    }\n\n    /** Handles month selection in the year view. */\n    monthSelectedInYearView(normalizedMonth: D) {\n        this.monthSelected.emit(normalizedMonth);\n    }\n\n    userSelected(): void {\n        this.userSelection.emit();\n    }\n\n    /** Handles year/month selection in the multi-year/year views. */\n    goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n        this.activeDate = date;\n        this.currentView = view;\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Returns the component instance that corresponds to the current calendar view. */\n    private getCurrentViewComponent() {\n        return this.monthView || this.yearView || this.multiYearView;\n    }\n}\n","import {\n    animate,\n    state,\n    style,\n    transition,\n    trigger,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n\n/**\n * Animations used by the mosaic datepicker.\n * @docs-private\n */\nexport const mcDatepickerAnimations: {\n    readonly transformPanel: AnimationTriggerMetadata;\n    readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n    /** Transforms the height of the datepicker's calendar. */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(1, 0.8)'\n        })),\n        transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1, 1)'\n        }))),\n        transition('* => void', animate('100ms linear', style({ opacity: 0 })))\n    ]),\n\n    /** Fades in the content of the calendar. */\n    fadeInCalendar: trigger('fadeInCalendar', [\n        state('void', style({ opacity: 0 })),\n        state('enter', style({ opacity: 1 })),\n\n        // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n        transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n    ])\n};\n\n// todo should be put into polyfils\n// https://github.com/angular/angular/issues/24769\nif (!Element.prototype.matches) {\n    Element.prototype.matches = (Element.prototype as any).msMatchesSelector;\n}\n","// tslint:disable:no-unbound-method\n// tslint:disable:no-magic-numbers\nimport { DOCUMENT } from '@angular/common';\nimport {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    Component,\n    ComponentRef,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { DateAdapter } from '@ptsecurity/cdk/datetime';\nimport { ESCAPE, UP_ARROW } from '@ptsecurity/cdk/keycodes';\nimport {\n    Overlay,\n    OverlayConfig,\n    OverlayRef,\n    IPositionStrategy,\n    IScrollStrategy\n} from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal, IComponentType } from '@ptsecurity/cdk/portal';\nimport {\n    CanColor,\n    CanColorCtor,\n    mixinColor,\n    ThemePalette\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { merge, Observable, Subject, Subscription } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\n\nimport { McCalendar } from './calendar';\nimport { McCalendarCellCssClasses } from './calendar-body';\nimport { mcDatepickerAnimations } from './datepicker-animations';\nimport { createMissingDateImplError } from './datepicker-errors';\nimport { McDatepickerInput } from './datepicker-input';\n\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MC_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-datepicker-scroll-strategy');\n\n/** @docs-private */\n// tslint:disable-next-line:naming-convention\nexport function MC_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => IScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_DATEPICKER_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_DATEPICKER_SCROLL_STRATEGY_FACTORY\n};\n\n// Boilerplate for applying mixins to McDatepickerContent.\n/** @docs-private */\nexport class McDatepickerContentBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McDatepickerContentMixinBase: CanColorCtor & typeof McDatepickerContentBase =\n    mixinColor(McDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * McCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n    selector: 'mc-datepicker__content',\n    templateUrl: 'datepicker-content.html',\n    styleUrls: ['datepicker-content.css'],\n    host: {\n        class: 'mc-datepicker__content',\n        '[@transformPanel]': '\"enter\"'\n    },\n    animations: [\n        mcDatepickerAnimations.transformPanel,\n        mcDatepickerAnimations.fadeInCalendar\n    ],\n    exportAs: 'mcDatepickerContent',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['color']\n})\nexport class McDatepickerContent<D> extends McDatepickerContentMixinBase\n    implements AfterViewInit, CanColor {\n\n    /** Reference to the internal calendar component. */\n    @ViewChild(McCalendar) calendar: McCalendar<D>;\n\n    /** Reference to the datepicker that created the overlay. */\n    datepicker: McDatepicker<D>;\n\n    /** Whether the datepicker is above or below the input. */\n    isAbove: boolean;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    ngAfterViewInit() {\n        this.calendar.focusActiveCell();\n    }\n}\n\n\n// TODO: We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"mcDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n    selector: 'mc-datepicker',\n    template: '',\n    exportAs: 'mcDatepicker',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    providers: [{ provide: McFormFieldControl, useExisting: McDatepicker }]\n})\nexport class McDatepicker<D> implements OnDestroy, CanColor {\n\n    /** The date to open the calendar to initially. */\n    @Input()\n    get startAt(): D | null {\n        // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n        // selected value is.\n        return this._startAt || (this.datepickerInput ? this.datepickerInput.value : null);\n    }\n\n    set startAt(value: D | null) {\n        this._startAt = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** Color palette to use on the datepicker's calendar. */\n    @Input()\n    get color(): ThemePalette {\n        // @ts-ignore:next-line\n        return this._color ||\n            (this.datepickerInput ? this.datepickerInput.getThemePalette() : undefined);\n    }\n\n    set color(value: ThemePalette) {\n        this._color = value;\n    }\n\n    /** Whether the datepicker pop-up should be disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled === undefined && this.datepickerInput ?\n            this.datepickerInput.disabled : !!this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        const newValue = coerceBooleanProperty(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this.disabledChange.next(newValue);\n        }\n    }\n\n    /** Whether the calendar is open. */\n    @Input()\n    get opened(): boolean {\n        return this._opened;\n    }\n\n    set opened(value: boolean) {\n        if (value) {\n            this.open();\n        } else {\n            this.close();\n        }\n    }\n\n    /** The currently selected date. */\n    get selected(): D | null {\n        return this.validSelected;\n    }\n\n    set selected(value: D | null) {\n        this.validSelected = value;\n    }\n\n    /** The minimum selectable date. */\n    get minDate(): D | null {\n        return this.datepickerInput && this.datepickerInput.min;\n    }\n\n    /** The maximum selectable date. */\n    get maxDate(): D | null {\n        return this.datepickerInput && this.datepickerInput.max;\n    }\n\n    get dateFilter(): (date: D | null) => boolean {\n        return this.datepickerInput && this.datepickerInput.dateFilter;\n    }\n\n\n    get value(): D | null {\n        return this.selected;\n    }\n\n    /** An input indicating the type of the custom header component for the calendar, if set. */\n    @Input() calendarHeaderComponent: IComponentType<any>;\n\n    /** The view that the calendar should start in. */\n    @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n    /**\n     * Emits selected year in multiyear view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /**\n     * Emits selected month in year view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n    @Input() panelClass: string | string[];\n\n    /** Function that can be used to add custom CSS classes to dates. */\n    @Input() dateClass: (date: D) => McCalendarCellCssClasses;\n\n    /** Emits when the datepicker has been opened. */\n    @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Emits when the datepicker has been closed. */\n    @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n    /** The id for the datepicker calendar. */\n    id: string = `mc-datepicker-${datepickerUid++}`;\n\n    /** A reference to the overlay when the calendar is opened as a popup. */\n    popupRef: OverlayRef;\n\n    /** The input element this datepicker is associated with. */\n    datepickerInput: McDatepickerInput<D>;\n\n    readonly stateChanges: Observable<void> = new Subject<void>();\n\n    /** Emits when the datepicker is disabled. */\n    readonly disabledChange = new Subject<boolean>();\n\n    /** Emits new selected date when selected date changes. */\n    readonly selectedChanged = new Subject<D>();\n    private scrollStrategy: () => IScrollStrategy;\n    private _startAt: D | null;\n    private _disabled: boolean;\n    private _opened = false;\n    private validSelected: D | null = null;\n    private _color: ThemePalette;\n\n    /** A portal containing the calendar for this datepicker. */\n    private calendarPortal: ComponentPortal<McDatepickerContent<D>>;\n\n    /** Reference to the component instantiated in popup mode. */\n    private popupComponentRef: ComponentRef<McDatepickerContent<D>> | null;\n\n    /** The element that was focused before the datepicker was opened. */\n    private focusedElementBeforeOpen: HTMLElement | null = null;\n\n    /** Subscription to value changes in the associated input element. */\n    private inputSubscription = Subscription.EMPTY;\n\n    constructor(private overlay: Overlay,\n                private ngZone: NgZone,\n                private viewContainerRef: ViewContainerRef,\n                @Inject(MC_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n                @Optional() private dateAdapter: DateAdapter<D>,\n                @Optional() private dir: Directionality,\n                @Optional() @Inject(DOCUMENT) private document: any) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        this.scrollStrategy = scrollStrategy;\n    }\n\n    ngOnDestroy() {\n        this.close();\n        this.inputSubscription.unsubscribe();\n        this.disabledChange.complete();\n\n        if (this.popupRef) {\n            this.popupRef.dispose();\n            this.popupComponentRef = null;\n        }\n    }\n\n    /** Selects the given date */\n    select(date: D): void {\n        const oldValue = this.selected;\n        this.selected = date;\n        if (!this.dateAdapter.sameDate(oldValue, this.selected)) {\n            this.selectedChanged.next(date);\n        }\n    }\n\n    /** Emits the selected year in multiyear view */\n    selectYear(normalizedYear: D): void {\n        this.yearSelected.emit(normalizedYear);\n    }\n\n    /** Emits selected month in year view */\n    selectMonth(normalizedMonth: D): void {\n        this.monthSelected.emit(normalizedMonth);\n    }\n\n    /**\n     * Register an input with this datepicker.\n     * @param input The datepicker input to register with this datepicker.\n     */\n    registerInput(input: McDatepickerInput<D>): void {\n        if (this.datepickerInput) {\n            throw Error('A McDatepicker can only be associated with a single input.');\n        }\n        this.datepickerInput = input;\n        this.inputSubscription =\n            this.datepickerInput.valueChange.subscribe((value: D | null) => this.selected = value);\n    }\n\n    /** Open the calendar. */\n    open(): void {\n        if (this._opened || this.disabled) {\n            return;\n        }\n        if (!this.datepickerInput) {\n            throw Error('Attempted to open an McDatepicker with no associated input.');\n        }\n        if (this.document) {\n            this.focusedElementBeforeOpen = this.document.activeElement;\n        }\n\n        this.openAsPopup();\n\n        this._opened = true;\n        this.openedStream.emit();\n    }\n\n    /** Close the calendar. */\n    close(): void {\n        if (!this._opened) {\n            return;\n        }\n\n        if (this.popupRef && this.popupRef.hasAttached()) {\n            this.popupRef.detach();\n        }\n\n        if (this.calendarPortal && this.calendarPortal.isAttached) {\n            this.calendarPortal.detach();\n        }\n\n        const completeClose = () => {\n            // The `_opened` could've been reset already if\n            // we got two events in quick succession.\n            if (this._opened) {\n                this._opened = false;\n                this.closedStream.emit();\n                this.focusedElementBeforeOpen = null;\n            }\n        };\n\n        if (this.focusedElementBeforeOpen &&\n            typeof this.focusedElementBeforeOpen.focus === 'function') {\n            // Because IE moves focus asynchronously, we can't count on it being restored before we've\n            // marked the datepicker as closed. If the event fires out of sequence and the element that\n            // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n            // able to close the calendar at all. We work around it by making the logic, that marks\n            // the datepicker as closed, async as well.\n            this.focusedElementBeforeOpen.focus();\n            setTimeout(completeClose);\n        } else {\n            completeClose();\n        }\n    }\n\n    /** Open the calendar as a popup. */\n    private openAsPopup(): void {\n        if (!this.calendarPortal) {\n            this.calendarPortal = new ComponentPortal<McDatepickerContent<D>>(McDatepickerContent,\n                this.viewContainerRef);\n        }\n\n        if (!this.popupRef) {\n            this.createPopup();\n        }\n\n        if (!this.popupRef.hasAttached()) {\n            this.popupComponentRef = this.popupRef.attach(this.calendarPortal);\n            this.popupComponentRef.instance.datepicker = this;\n            this.setColor();\n\n            // Update the position once the calendar has rendered.\n            this.ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n                this.popupRef.updatePosition();\n            });\n        }\n    }\n\n    /** Create the popup. */\n    private createPopup(): void {\n        const overlayConfig = new OverlayConfig({\n            positionStrategy: this.createPopupPositionStrategy(),\n            hasBackdrop: true,\n            backdropClass: 'mc-overlay-transparent-backdrop',\n            direction: this.dir,\n            scrollStrategy: this.scrollStrategy(),\n            panelClass: 'mc-datepicker__popup'\n        });\n\n        this.popupRef = this.overlay.create(overlayConfig);\n        this.popupRef.overlayElement.setAttribute('role', 'dialog');\n\n        merge(\n            this.popupRef.backdropClick(),\n            this.popupRef.detachments(),\n            this.popupRef.keydownEvents().pipe(filter((event) => {\n                // Closing on alt + up is only valid when there's an input associated with the datepicker.\n                // tslint:disable-next-line:deprecation\n                return event.keyCode === ESCAPE || (this.datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n            }))\n        ).subscribe(() => this.close());\n    }\n\n    /** Create the popup PositionStrategy. */\n    private createPopupPositionStrategy(): IPositionStrategy {\n        return this.overlay.position()\n            .flexibleConnectedTo(this.datepickerInput.elementRef)\n            .withTransformOriginOn('.mc-datepicker__content')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(8)\n            .withLockedPosition()\n            .withPositions([\n                {\n                    originX: 'start',\n                    originY: 'bottom',\n                    overlayX: 'start',\n                    overlayY: 'top'\n                },\n                {\n                    originX: 'start',\n                    originY: 'top',\n                    overlayX: 'start',\n                    overlayY: 'bottom'\n                },\n                {\n                    originX: 'end',\n                    originY: 'bottom',\n                    overlayX: 'end',\n                    overlayY: 'top'\n                },\n                {\n                    originX: 'end',\n                    originY: 'top',\n                    overlayX: 'end',\n                    overlayY: 'bottom'\n                }\n            ]);\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Passes the current theme color along to the calendar overlay. */\n    private setColor(): void {\n        const color = this.color;\n        if (this.popupComponentRef) {\n            this.popupComponentRef.instance.color = color;\n        }\n    }\n}\n","// tslint:disable:no-empty\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output\n} from '@angular/core';\nimport {\n    AbstractControl,\n    ControlValueAccessor,\n    NG_VALIDATORS,\n    NG_VALUE_ACCESSOR,\n    ValidationErrors,\n    Validator,\n    ValidatorFn,\n    Validators\n} from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport { DOWN_ARROW } from '@ptsecurity/cdk/keycodes';\nimport { ThemePalette } from '@ptsecurity/mosaic/core';\nimport { McFormField } from '@ptsecurity/mosaic/form-field';\nimport { MC_INPUT_VALUE_ACCESSOR } from '@ptsecurity/mosaic/input';\nimport { Subscription } from 'rxjs';\n\nimport { McDatepicker } from './datepicker';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\n/** @docs-private */\nexport const MC_DATEPICKER_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McDatepickerInput),\n    multi: true\n};\n\n/** @docs-private */\nexport const MC_DATEPICKER_VALIDATORS: any = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McDatepickerInput),\n    multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use McDatepickerInputEvent instead.\n */\nexport class McDatepickerInputEvent<D> {\n    /** The new value for the target datepicker input. */\n    value: D | null;\n\n    constructor(\n        /** Reference to the datepicker input component that emitted the event. */\n        public target: McDatepickerInput<D>,\n        /** Reference to the native input element associated with the datepicker input. */\n        public targetElement: HTMLElement) {\n        this.value = this.target.value;\n    }\n}\n\n\n/** Directive used to connect an input to a McDatepicker. */\n@Directive({\n    selector: 'input[mcDatepicker]',\n    providers: [\n        MC_DATEPICKER_VALUE_ACCESSOR,\n        MC_DATEPICKER_VALIDATORS,\n        { provide: MC_INPUT_VALUE_ACCESSOR, useExisting: McDatepickerInput }\n    ],\n    host: {\n        '[attr.aria-haspopup]': 'true',\n        '[attr.aria-owns]': '(datepicker?.opened && datepicker.id) || null',\n        '[attr.min]': 'min ? dateAdapter.toIso8601(min) : null',\n        '[attr.max]': 'max ? dateAdapter.toIso8601(max) : null',\n        '[disabled]': 'disabled',\n        '(input)': 'onInput($event.target.value)',\n        '(change)': 'onChange()',\n        '(blur)': 'onBlur()',\n        '(keydown)': 'onKeydown($event)'\n    },\n    exportAs: 'mcDatepickerInput'\n})\nexport class McDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n    /** The datepicker that this input is associated with. */\n    @Input()\n    set mcDatepicker(value: McDatepicker<D>) {\n        if (!value) {\n            return;\n        }\n\n        this.datepicker = value;\n        this.datepicker.registerInput(this);\n        this.datepickerSubscription.unsubscribe();\n\n        this.datepickerSubscription = this.datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this.cvaOnChange(selected);\n            this.onTouched();\n            this.dateInput.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));\n            this.dateChange.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));\n        });\n    }\n\n    /** Function that can be used to filter out dates within the datepicker. */\n    @Input()\n    set mcDatepickerFilter(value: (date: D | null) => boolean) {\n        this.dateFilter = value;\n        this.validatorOnChange();\n    }\n\n    /** The value of the input. */\n    @Input()\n    get value(): D | null {\n        return this._value;\n    }\n\n    set value(value: D | null) {\n        // tslint:disable-next-line:no-parameter-reassignment\n        value = this.dateAdapter.deserialize(value);\n        this.lastValueValid = !value || this.dateAdapter.isValid(value);\n        // tslint:disable-next-line:no-parameter-reassignment\n        value = this.getValidDateOrNull(value);\n        const oldDate = this.value;\n        this._value = value;\n        this.formatValue(value);\n\n        if (!this.dateAdapter.sameDate(oldDate, value)) {\n            this.valueChange.emit(value);\n        }\n    }\n\n    /** The minimum valid date. */\n    @Input()\n    get min(): D | null {\n        return this._min;\n    }\n\n    set min(value: D | null) {\n        this._min = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.validatorOnChange();\n    }\n\n    /** The maximum valid date. */\n    @Input()\n    get max(): D | null {\n        return this._max;\n    }\n\n    set max(value: D | null) {\n        this._max = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.validatorOnChange();\n    }\n\n    /** Whether the datepicker-input is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return !!this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        const newValue = coerceBooleanProperty(value);\n        const element = this.elementRef.nativeElement;\n\n        if (this._disabled !== newValue) {\n            this._disabled = newValue;\n            this.disabledChange.emit(newValue);\n        }\n\n        // We need to null check the `blur` method, because it's undefined during SSR.\n        if (newValue && element.blur) {\n            // Normally, native input elements automatically blur if they turn disabled. This behavior\n            // is problematic, because it would mean that it triggers another change detection cycle,\n            // which then causes a changed after checked error if the input element was focused before.\n            element.blur();\n        }\n    }\n\n    datepicker: McDatepicker<D>;\n    dateFilter: (date: D | null) => boolean;\n\n    /** Emits when a `change` event is fired on this `<input>`. */\n    @Output() readonly dateChange: EventEmitter<McDatepickerInputEvent<D>> =\n        new EventEmitter<McDatepickerInputEvent<D>>();\n\n    /** Emits when an `input` event is fired on this `<input>`. */\n    @Output() readonly dateInput: EventEmitter<McDatepickerInputEvent<D>> =\n        new EventEmitter<McDatepickerInputEvent<D>>();\n\n    /** Emits when the value changes (either due to user input or programmatic change). */\n    valueChange = new EventEmitter<D | null>();\n\n    /** Emits when the disabled state has changed */\n    disabledChange = new EventEmitter<boolean>();\n    private _value: D | null;\n    private _min: D | null;\n    private _max: D | null;\n    private _disabled: boolean;\n\n    private datepickerSubscription = Subscription.EMPTY;\n\n    private localeSubscription = Subscription.EMPTY;\n\n    /** Whether the last value set on the input was valid. */\n    private lastValueValid = false;\n\n    constructor(\n        public elementRef: ElementRef<HTMLInputElement>,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n        @Optional() private formField: McFormField\n    ) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        // Update the displayed date when the locale changes.\n        this.localeSubscription = dateAdapter.localeChanges.subscribe(() => {\n            this.value = this.value;\n        });\n    }\n\n    onTouched = () => {\n    }\n\n    ngOnDestroy() {\n        this.datepickerSubscription.unsubscribe();\n        this.localeSubscription.unsubscribe();\n        this.valueChange.complete();\n        this.disabledChange.complete();\n    }\n\n    /** @docs-private */\n    registerOnValidatorChange(fn: () => void): void {\n        this.validatorOnChange = fn;\n    }\n\n    /** @docs-private */\n    validate(c: AbstractControl): ValidationErrors | null {\n        return this.validator ? this.validator(c) : null;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: D): void {\n        this.value = value;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this.cvaOnChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    onKeydown(event: KeyboardEvent) {\n        // tslint:disable-next-line:deprecation\n        const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n        if (this.datepicker && isAltDownArrow && !this.elementRef.nativeElement.readOnly) {\n            this.datepicker.open();\n            event.preventDefault();\n        }\n    }\n\n    onInput(value: string) {\n        let date = this.dateAdapter.parse(value, this.dateFormats.parse.dateInput);\n        this.lastValueValid = !date || this.dateAdapter.isValid(date);\n        date = this.getValidDateOrNull(date);\n\n        if (!this.dateAdapter.sameDate(date, this._value)) {\n            this._value = date;\n            this.cvaOnChange(date);\n            this.valueChange.emit(date);\n            this.dateInput.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));\n        }\n    }\n\n    onChange() {\n        this.dateChange.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));\n    }\n\n    /** Returns the palette used by the input's form field, if any. */\n    getThemePalette(): ThemePalette | undefined {\n        return this.formField ? this.formField.color : undefined;\n    }\n\n    /** Handles blur events on the input. */\n    onBlur() {\n        // Reformat the input only if we have a valid value.\n        if (this.value) {\n            this.formatValue(this.value);\n        }\n\n        this.onTouched();\n    }\n\n    private cvaOnChange: (value: any) => void = () => {\n    }\n\n    private validatorOnChange = () => {\n    }\n\n    /** The form control validator for whether the input parses. */\n    private parseValidator: ValidatorFn = (): ValidationErrors | null => {\n        return this.lastValueValid ?\n            null : { mcDatepickerParse: { text: this.elementRef.nativeElement.value } };\n    }\n\n    /** The form control validator for the min date. */\n    private minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n        const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));\n\n        return (!this.min || !controlValue ||\n            this.dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n            null : { mcDatepickerMin: { min: this.min, actual: controlValue } };\n    }\n\n    /** The form control validator for the max date. */\n    private maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n        const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));\n\n        return (!this.max || !controlValue ||\n            this.dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n            null : { mcDatepickerMax: { max: this.max, actual: controlValue } };\n    }\n\n    /** The form control validator for the date filter. */\n    private filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n        const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));\n\n        return !this.dateFilter || !controlValue || this.dateFilter(controlValue) ?\n            null : { mcDatepickerFilter: true };\n    }\n\n    /** Formats a value and sets it on the input element. */\n    private formatValue(value: D | null) {\n        this.elementRef.nativeElement.value =\n            value ? this.dateAdapter.format(value, this.dateFormats.display.dateInput) : '';\n    }\n\n    /** The combined form control validator for this input. */\n        // tslint:disable:member-ordering\n    private validator: ValidatorFn | null =\n        Validators.compose([\n            this.parseValidator,\n            this.minValidator,\n            this.maxValidator,\n            this.filterValidator\n        ]);\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    Directive,\n    Input,\n    OnChanges,\n    OnDestroy,\n    SimpleChanges,\n    ViewEncapsulation,\n    ViewChild\n} from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { McButton } from '@ptsecurity/mosaic/button';\nimport { merge, of as observableOf, Subscription } from 'rxjs';\n\nimport { McDatepicker } from './datepicker';\nimport { McDatepickerIntl } from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `mcDatepickerToggle`. */\n@Directive({\n    selector: '[mcDatepickerToggleIcon]'\n})\nexport class McDatepickerToggleIcon {\n}\n\n\n@Component({\n    selector: 'mc-datepicker-toggle',\n    templateUrl: 'datepicker-toggle.html',\n    styleUrls: ['datepicker-toggle.css'],\n    host: {\n        class: 'mc-datepicker-toggle',\n        // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n        // consumer may have provided, while still being able to receive focus.\n        '[attr.tabindex]': '-1',\n        '[class.mc-datepicker-toggle_active]': 'datepicker && datepicker.opened',\n        '[class.mc-warn]': 'datepicker && datepicker.color === \"error\"',\n        '(focus)': 'button.focus()'\n    },\n    exportAs: 'mcDatepickerToggle',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n\n    /** Whether the toggle button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    /** Datepicker instance that the button will toggle. */\n    @Input('for') datepicker: McDatepicker<D>;\n\n    /** Tabindex for the toggle. */\n    @Input() tabIndex: number | null;\n\n    /** Custom icon set by the consumer. */\n    @ContentChild(McDatepickerToggleIcon) customIcon: McDatepickerToggleIcon;\n\n    /** Underlying button element. */\n    @ViewChild('button') button: McButton;\n    private stateChanges = Subscription.EMPTY;\n\n    private _disabled: boolean;\n\n    constructor(\n        public intl: McDatepickerIntl,\n        private changeDetectorRef: ChangeDetectorRef,\n        @Attribute('tabindex') defaultTabIndex: string\n    ) {\n        const parsedTabIndex = Number(defaultTabIndex);\n        this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.datepicker) {\n            this.watchStateChanges();\n        }\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.unsubscribe();\n    }\n\n    ngAfterContentInit() {\n        this.watchStateChanges();\n    }\n\n    open(event: Event): void {\n        if (this.datepicker && !this.disabled) {\n            this.datepicker.open();\n            event.stopPropagation();\n        }\n    }\n\n    private watchStateChanges() {\n        const datepickerDisabled = this.datepicker ? this.datepicker.disabledChange : observableOf();\n        const inputDisabled = this.datepicker && this.datepicker.datepickerInput ?\n            this.datepicker.datepickerInput.disabledChange : observableOf();\n        const datepickerToggled = this.datepicker ?\n            merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n            observableOf();\n\n        this.stateChanges.unsubscribe();\n        this.stateChanges = merge(\n            this.intl.changes,\n            datepickerDisabled,\n            inputDisabled,\n            datepickerToggled\n        ).subscribe(() => this.changeDetectorRef.markForCheck());\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { PortalModule } from '@ptsecurity/cdk/portal';\nimport { McButtonModule } from '@ptsecurity/mosaic/button';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McCalendar, McCalendarHeader } from './calendar';\nimport { McCalendarBody } from './calendar-body';\nimport {\n    McDatepicker,\n    McDatepickerContent,\n    MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './datepicker';\nimport { McDatepickerInput } from './datepicker-input';\nimport { McDatepickerIntl } from './datepicker-intl';\nimport { McDatepickerToggle, McDatepickerToggleIcon } from './datepicker-toggle';\nimport { McMonthView } from './month-view';\nimport { McMultiYearView } from './multi-year-view';\nimport { McYearView } from './year-view';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        McButtonModule,\n        OverlayModule,\n        A11yModule,\n        PortalModule,\n        McButtonModule,\n        McIconModule\n    ],\n    exports: [\n        McCalendar,\n        McCalendarBody,\n        McDatepicker,\n        McDatepickerContent,\n        McDatepickerInput,\n        McDatepickerToggle,\n        McDatepickerToggleIcon,\n        McMonthView,\n        McYearView,\n        McMultiYearView,\n        McCalendarHeader\n    ],\n    declarations: [\n        McCalendar,\n        McCalendarBody,\n        McDatepicker,\n        McDatepickerContent,\n        McDatepickerInput,\n        McDatepickerToggle,\n        McDatepickerToggleIcon,\n        McMonthView,\n        McYearView,\n        McMultiYearView,\n        McCalendarHeader\n    ],\n    providers: [\n        McDatepickerIntl,\n        MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER\n    ],\n    entryComponents: [\n        McDatepickerContent,\n        McCalendarHeader\n    ]\n})\nexport class McDatepickerModule {\n}\n","import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\n\n\n@Component({\n    selector: 'mc-divider',\n    host: {\n        class: 'mc-divider',\n        role: 'separator',\n        '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n        '[class.mc-divider-vertical]': 'vertical',\n        '[class.mc-divider-inset]': 'inset'\n    },\n    template: '',\n    styleUrls: ['divider.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false\n})\nexport class McDivider {\n    // Whether the divider is vertically aligned.\n    @Input()\n    get vertical(): boolean {\n        return this._vertical;\n    }\n\n    set vertical(value: boolean) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n\n    private _vertical: boolean = false;\n\n    // Whether the divider is an inset divider.\n    @Input()\n    get inset(): boolean {\n        return this._inset;\n    }\n\n    set inset(value: boolean) {\n        this._inset = coerceBooleanProperty(value);\n    }\n\n    private _inset: boolean = false;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McDivider } from './divider.component';\n\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [McDivider],\n    declarations: [McDivider]\n})\nexport class McDividerModule {\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n    Directive,\n    TemplateRef,\n    ComponentFactoryResolver,\n    ApplicationRef,\n    Injector,\n    ViewContainerRef,\n    Inject,\n    OnDestroy\n} from '@angular/core';\nimport { TemplatePortal, DomPortalOutlet } from '@ptsecurity/cdk/portal';\nimport { Subject } from 'rxjs';\n\n\n/**\n * Dropdown content that will be rendered lazily once the dropdown is opened.\n */\n@Directive({\n    selector: 'ng-template[mcDropdownContent]'\n})\nexport class McDropdownContent implements OnDestroy {\n\n    /** Emits when the dropdown content has been attached. */\n    _attached = new Subject<void>();\n    private _portal: TemplatePortal;\n    private _outlet: DomPortalOutlet;\n\n    constructor(\n        private _template: TemplateRef<any>,\n        private _componentFactoryResolver: ComponentFactoryResolver,\n        private _appRef: ApplicationRef,\n        private _injector: Injector,\n        private _viewContainerRef: ViewContainerRef,\n        @Inject(DOCUMENT) private _document: any) {}\n\n    /**\n     * Attaches the content with a particular context.\n     * @docs-private\n     */\n    attach(context: any = {}) {\n        if (!this._portal) {\n            this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n        }\n\n        this.detach();\n\n        if (!this._outlet) {\n            this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n                this._componentFactoryResolver, this._appRef, this._injector);\n        }\n\n        const element: HTMLElement = this._template.elementRef.nativeElement;\n\n        // Because we support opening the same dropdown from different triggers (which in turn have their\n        // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n        // risk it staying attached to a pane that's no longer in the DOM.\n        element.parentNode!.insertBefore(this._outlet.outletElement, element);\n        this._portal.attach(this._outlet, context);\n        this._attached.next();\n    }\n\n    /**\n     * Detaches the content.\n     * @docs-private\n     */\n    detach() {\n        if (this._portal.isAttached) {\n            this._portal.detach();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._outlet) {\n            this._outlet.dispose();\n        }\n    }\n}\n","import { EventEmitter, TemplateRef, InjectionToken } from '@angular/core';\nimport { FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { Direction } from '@ptsecurity/cdk/bidi';\n\nimport { McDropdownContent } from './dropdown-content';\nimport { DropdownPositionX, DropdownPositionY } from './dropdown-positions';\n\n\n/**\n * Injection token used to provide the parent dropdown to dropdown-specific components.\n * @docs-private\n */\nexport const MC_DROPDOWN_PANEL = new InjectionToken<McDropdownPanel>('MC_DROPDOWN_PANEL');\n\n/**\n * Interface for a custom dropdown panel that can be used with `mcDropdownTriggerFor`.\n * @docs-private\n */\n// tslint:disable-next-line:interface-name\nexport interface McDropdownPanel<T = any> {\n    xPosition: DropdownPositionX;\n    yPosition: DropdownPositionY;\n    overlapTrigger: boolean;\n    templateRef: TemplateRef<any>;\n    closed: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n    direction?: Direction;\n    lazyContent?: McDropdownContent;\n    backdropClass?: string;\n    hasBackdrop?: boolean;\n    focusFirstItem(origin?: FocusOrigin): void;\n    resetActiveItem(): void;\n    setPositionClasses?(x: DropdownPositionX, y: DropdownPositionY): void;\n    addItem?(item: T): void;\n    removeItem?(item: T): void;\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    OnDestroy,\n    ViewEncapsulation,\n    Inject,\n    Optional\n} from '@angular/core';\nimport { IFocusableOption, FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport {\n    CanDisable, CanDisableCtor,\n    mixinDisabled\n} from '@ptsecurity/mosaic/core';\n\nimport { MC_DROPDOWN_PANEL, McDropdownPanel } from './dropdown-panel';\n\n\n// Boilerplate for applying mixins to McDropdownItem.\n/** @docs-private */\nexport class McDropdownItemBase {}\nexport const _McDropdownItemMixinBase: CanDisableCtor & typeof McDropdownItemBase =\n    mixinDisabled(McDropdownItemBase);\n\n/**\n * This directive is intended to be used inside an mc-dropdown tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n    selector: 'mc-dropdown-item, [mc-dropdown-item]',\n    exportAs: 'mcDropdownItem',\n    inputs: ['disabled'],\n    host: {\n        role: 'dropdown-item',\n        class: 'mc-dropdown__item',\n        '[attr.tabindex]': '_getTabIndex()',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': '_checkDisabled($event)'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    template: `<ng-content></ng-content>`\n})\nexport class McDropdownItem extends _McDropdownItemMixinBase\n    implements IFocusableOption, CanDisable, OnDestroy {\n\n    private _document: Document;\n\n    constructor(\n        private _elementRef: ElementRef<HTMLElement>,\n        @Inject(DOCUMENT) document: any,\n        private _focusMonitor: FocusMonitor,\n        @Inject(MC_DROPDOWN_PANEL) @Optional() private _parentDropdownPanel?: McDropdownPanel<McDropdownItem>) {\n        super();\n\n        if (_focusMonitor) {\n            // Start monitoring the element so it gets the appropriate focused classes. We want\n            // to show the focus style for dropdown items only when the focus was not caused by a\n            // mouse or touch interaction.\n            _focusMonitor.monitor(this._elementRef.nativeElement, false);\n        }\n\n        if (_parentDropdownPanel && _parentDropdownPanel.addItem) {\n            _parentDropdownPanel.addItem(this);\n        }\n\n        this._document = document;\n    }\n\n    /** Focuses the dropdown item. */\n    focus(origin: FocusOrigin = 'program'): void {\n        if (this._focusMonitor) {\n            this._focusMonitor.focusVia(this._getHostElement(), origin);\n        } else {\n            this._getHostElement().focus();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._focusMonitor) {\n            this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n\n        if (this._parentDropdownPanel && this._parentDropdownPanel.removeItem) {\n            this._parentDropdownPanel.removeItem(this);\n        }\n    }\n\n    /** Used to set the `tabindex`. */\n    _getTabIndex(): string {\n        return this.disabled ? '-1' : '0';\n    }\n\n    /** Returns the host DOM element. */\n    _getHostElement(): HTMLElement {\n        return this._elementRef.nativeElement;\n    }\n\n    /** Prevents the default element actions if it is disabled. */\n    _checkDisabled(event: Event): void {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel(): string {\n        const element: HTMLElement = this._elementRef.nativeElement;\n        // tslint:disable-next-line:no-magic-numbers\n        const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n        let output = '';\n\n        if (element.childNodes) {\n            const length = element.childNodes.length;\n\n            // Go through all the top-level text nodes and extract their text.\n            // We skip anything that's not a text node to prevent the text from\n            // being thrown off by something like an icon.\n            for (let i = 0; i < length; i++) {\n                if (element.childNodes[i].nodeType === textNodeType) {\n                    output += element.childNodes[i].textContent;\n                }\n            }\n        }\n\n        return output.trim();\n    }\n}\n","import {\n    trigger,\n    state,\n    style,\n    animate,\n    transition,\n    query,\n    group,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n\n/**\n * Animations used by the mc-dropdown component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const mcDropdownAnimations: {\n    readonly transformDropdown: AnimationTriggerMetadata;\n    readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n    /**\n     * This animation controls the dropdown panel's entry and exit from the page.\n     *\n     * When the dropdown panel is added to the DOM, it scales in and fades in its border.\n     *\n     * When the dropdown panel is removed from the DOM, it simply fades out after a brief\n     * delay to display the ripple.\n     */\n    transformDropdown: trigger('transformDropdown', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(0.8)'\n        })),\n        transition('void => enter', group([\n            query('.mc-dropdown__content', animate('50ms linear', style({opacity: 1}))),\n            animate('50ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'}))\n        ])),\n        transition('* => void', animate('50ms 25ms linear', style({opacity: 0})))\n    ]),\n\n\n    /**\n     * This animation fades in the background color and content of the dropdown panel\n     * after its containing element is scaled in.\n     */\n    fadeInItems: trigger('fadeInItems', [\n        // now. Remove next time we do breaking changes.\n        state('showing', style({opacity: 1})),\n        transition('void => *', [\n            style({opacity: 0}),\n            animate('200ms 60ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n\nexport const fadeInItems = mcDropdownAnimations.fadeInItems;\n\nexport const transformDropdown = mcDropdownAnimations.transformDropdown;\n","import {\n    Attribute,\n    Directive, DoCheck, ElementRef, Inject, Input, OnChanges,\n    OnDestroy, Optional, Self\n} from '@angular/core';\nimport {\n    FormGroupDirective,\n    NgControl,\n    NgForm, NgModel\n} from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport {\n    END, C, V, X, A, DELETE, BACKSPACE, TAB, ENTER,\n    ESCAPE, ZERO, NINE, NUMPAD_ZERO, NUMPAD_NINE, NUMPAD_MINUS, DASH,\n    FF_MINUS, LEFT_ARROW, RIGHT_ARROW, HOME, UP_ARROW, DOWN_ARROW, F1, F12\n} from '@ptsecurity/cdk/keycodes';\nimport { getSupportedInputTypes, Platform } from '@ptsecurity/cdk/platform';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl, McFormFieldNumberControl } from '@ptsecurity/mosaic/form-field';\nimport { Subject } from 'rxjs';\n\nimport { getMcInputUnsupportedTypeError } from './input-errors';\nimport { MC_INPUT_VALUE_ACCESSOR } from './input-value-accessor';\nimport { stepDown, stepUp } from './stepperUtils';\n\n\nconst MC_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\n\nexport const BIG_STEP = 10;\nexport const SMALL_STEP = 1;\n\nlet nextUniqueId = 0;\n\nexport class McInputBase {\n    constructor(public defaultErrorStateMatcher: ErrorStateMatcher,\n                public parentForm: NgForm,\n                public parentFormGroup: FormGroupDirective,\n                public ngControl: NgControl) {\n    }\n}\n\nexport const _McInputMixinBase: CanUpdateErrorStateCtor & typeof McInputBase = mixinErrorState(McInputBase);\n\n\n@Directive({\n    selector: `input[mcInput][type=\"number\"]`,\n    exportAs: 'mcNumericalInput',\n    providers: [NgModel, { provide: McFormFieldNumberControl, useExisting: McNumberInput }],\n    host: {\n        '(blur)': '_focusChanged(false)',\n        '(focus)': '_focusChanged(true)',\n        '(paste)': 'onPaste($event)',\n        '(keydown)': 'onKeyDown($event)'\n    }\n})\nexport class McNumberInput implements McFormFieldNumberControl<any> {\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    @Input()\n    bigStep: number;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    @Input()\n    step: number;\n\n    @Input()\n    min: number;\n\n    @Input()\n    max: number;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    value: any;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    private readonly _host: HTMLInputElement;\n\n    constructor(\n        private _platform: Platform ,\n        private _elementRef: ElementRef,\n        private _model: NgModel,\n        @Attribute('step') step: string,\n        @Attribute('big-step') bigStep: string,\n        @Attribute('min') min: string,\n        @Attribute('max') max: string\n    ) {\n        this.step = this.isDigit(step) ? parseFloat(step) : SMALL_STEP;\n        this.bigStep = this.isDigit(bigStep) ? parseFloat(bigStep) : BIG_STEP;\n        this.min = this.isDigit(min) ? parseFloat(min) : -Infinity;\n        this.max = this.isDigit(max) ? parseFloat(max) : Infinity;\n\n        this._host = this._elementRef.nativeElement;\n\n        const self = this;\n\n        if ('valueAsNumber' in this._host) {\n            Object.defineProperty(Object.getPrototypeOf(this._host), 'valueAsNumber', {\n                // tslint:disable-next-line:no-reserved-keywords\n                get() {\n                    const res = parseFloat(self.normalizeSplitter(this.value));\n\n                    return isNaN(res) ? null : res;\n                }\n            });\n        }\n    }\n\n    _focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent) {\n        // tslint:disable-next-line:deprecation\n        const keyCode = event.keyCode;\n\n        const isCtrlA = (e) => e.keyCode === A && (e.ctrlKey || e.metaKey);\n        const isCtrlC = (e) => e.keyCode === C && (e.ctrlKey || e.metaKey);\n        const isCtrlV = (e) => e.keyCode === V && (e.ctrlKey || e.metaKey);\n        const isCtrlX = (e) => e.keyCode === X && (e.ctrlKey || e.metaKey);\n\n        const isFKey = (e) => e.keyCode >= F1 && e.keyCode <= F12;\n\n        const isNumber = (e) => (e.keyCode >= ZERO && e.keyCode <= NINE) ||\n            (e.keyCode >= NUMPAD_ZERO && e.keyCode <= NUMPAD_NINE);\n\n        const minuses = [NUMPAD_MINUS, DASH, FF_MINUS];\n        const serviceKeys = [DELETE, BACKSPACE, TAB, ESCAPE, ENTER];\n        const arrows = [LEFT_ARROW, RIGHT_ARROW];\n        const allowedKeys =  [HOME, END].concat(arrows).concat(serviceKeys).concat(minuses);\n\n        const isIEPeriod = (e) => e.key === '.' || e.key === 'Decimal';\n        const isNotIEPeriod = (e) => e.key === '.' || e.key === ',';\n\n        // Decimal is for IE\n        const isPeriod = (e) => this._platform.EDGE || this._platform.TRIDENT\n            ? isIEPeriod(e)\n            : isNotIEPeriod(e);\n\n        if (allowedKeys.indexOf(keyCode) !== -1 ||\n            isCtrlA(event) ||\n            isCtrlC(event) ||\n            isCtrlV(event) ||\n            isCtrlX(event) ||\n            isFKey(event) ||\n            isPeriod(event)\n        ) {\n            // let it happen, don't do anything\n            return;\n        }\n        // Ensure that it is not a number and stop the keypress\n        if (event.shiftKey || !isNumber(event)) {\n            event.preventDefault();\n\n            // process steps\n            const step = event.shiftKey ? this.bigStep : this.step;\n\n            if (keyCode === UP_ARROW) {\n                this.stepUp(step);\n            }\n\n            if (keyCode === DOWN_ARROW) {\n                this.stepDown(step);\n            }\n        }\n    }\n\n    onPaste(event) {\n        let value = event.clipboardData.getData('text');\n        value = this.normalizeSplitter(value);\n\n        if (!this.isDigit(value)) {\n            event.preventDefault();\n        }\n    }\n\n    stepUp(step: number) {\n        this._elementRef.nativeElement.focus();\n        const res = stepUp(this._host.valueAsNumber, this.max, this.min, step);\n        this._host.value = res === null ? '' : res.toString();\n        this._model.update.emit(this._host.valueAsNumber);\n    }\n\n    stepDown(step: number) {\n        this._elementRef.nativeElement.focus();\n        const res = stepDown(this._host.valueAsNumber, this.max, this.min, step);\n        this._host.value = res === null ? '' : res.toString();\n        this._model.update.emit(this._host.valueAsNumber);\n    }\n\n    private normalizeSplitter(value: string): string {\n        return value ? value.replace(/,/g, '.') : value;\n    }\n\n    private isDigit(value: string): boolean {\n        return this.isFloat(value) || this.isInt(value);\n    }\n\n    private isFloat(value: string): boolean {\n        return /^-?\\d+\\.\\d+$/.test(value);\n    }\n\n    private isInt(value: string): boolean {\n        return /^-?\\d+$/.test(value);\n    }\n}\n\n@Directive({\n    selector: `input[mcInput]`,\n    exportAs: 'mcInput',\n    host: {\n        class: 'mc-input',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '(blur)': '_focusChanged(false)',\n        '(focus)': '_focusChanged(true)',\n        '(input)': '_onInput()'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McInput }]\n})\nexport class McInput extends _McInputMixinBase implements McFormFieldControl<any>, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-input';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this._uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    // tslint:disable no-reserved-keywords\n    /** Input type of the element. */\n    @Input()\n    get type(): string {\n        return this._type;\n    }\n\n    set type(value: string) {\n        this._type = value || 'text';\n        this._validateType();\n\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    // tslint:enable no-reserved-keywords\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this._inputValueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n\n    protected _uid = `mc-input-${nextUniqueId++}`;\n    protected _previousNativeValue: any;\n    protected _disabled = false;\n    protected _id: string;\n    protected _required = false;\n    protected _type = 'text';\n    protected _neverEmptyInputTypes = [\n        'date',\n        'datetime',\n        'datetime-local',\n        'month',\n        'time',\n        'week'\n    ].filter((t) => getSupportedInputTypes().has(t));\n\n    private _inputValueAccessor: { value: any };\n\n    constructor(protected _elementRef: ElementRef,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() parentForm: NgForm,\n                @Optional() parentFormGroup: FormGroupDirective,\n                defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_INPUT_VALUE_ACCESSOR) inputValueAccessor: any) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n        this._previousNativeValue = this.value;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n    }\n\n    /** Focuses the input. */\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Does some manual dirty checking on the native input `value` property. */\n    protected _dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Make sure the input is a supported type. */\n    protected _validateType() {\n        if (MC_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n            throw getMcInputUnsupportedTypeError(this._type);\n        }\n    }\n\n    /** Checks whether the input type is one of the types that are never empty. */\n    protected _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n\n    /** Checks whether the input is invalid based on the native validation. */\n    protected _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        const validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n\n        return validity && validity.badInput;\n    }\n}\n\n@Directive({\n    selector: 'input[mcInputMonospace]',\n    exportAs: 'McInputMonospace',\n    host: { class: 'mc-input_monospace' }\n})\nexport class McInputMono {\n}\n","import { Directive, forwardRef, Input, OnChanges, Provider, SimpleChanges } from '@angular/core';\nimport { AbstractControl, NG_VALIDATORS, ValidationErrors, Validator, ValidatorFn, Validators } from '@angular/forms';\n\n\nexport const MIN_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MinValidator),\n    multi: true\n};\n\n/**\n * A directive which installs the {@link MinValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `min` attribute.\n *\n * @experimental\n */\n@Directive({\n    selector: '[min][formControlName],[min][formControl],[min][ngModel]',\n    providers: [MIN_VALIDATOR],\n    host: {'[attr.min]': 'min ? min : null'}\n})\nexport class MinValidator implements Validator, OnChanges {\n\n    @Input() min: string;\n    private _validator: ValidatorFn;\n    private _onChange: () => void;\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('min' in changes) {\n            this._createValidator();\n            if (this._onChange) { this._onChange(); }\n        }\n    }\n\n    validate(c: AbstractControl): ValidationErrors | null { return this._validator(c); }\n\n    registerOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n\n    private _createValidator(): void { this._validator = Validators.min(parseInt(this.min, 10)); }\n}\n\n\nexport const MAX_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MaxValidator),\n    multi: true\n};\n\n/**\n * A directive which installs the {@link MaxValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `min` attribute.\n *\n * @experimental\n */\n@Directive({\n    selector: '[max][formControlName],[max][formControl],[max][ngModel]',\n    providers: [MAX_VALIDATOR],\n    host: {\n        '[attr.max]': 'max ? max : null'\n    }\n})\nexport class MaxValidator implements Validator,\n    OnChanges {\n\n    @Input() max: string;\n    private _validator: ValidatorFn;\n    private _onChange: () => void;\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('max' in changes) {\n            this._createValidator();\n            if (this._onChange) { this._onChange(); }\n        }\n    }\n\n    validate(c: AbstractControl): ValidationErrors | null { return this._validator(c); }\n\n    registerOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n\n    private _createValidator(): void { this._validator = Validators.max(parseInt(this.max, 10)); }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McInput, McInputMono, McNumberInput } from './input';\nimport { MaxValidator, MinValidator } from './input-number-validators';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule, FormsModule],\n    exports: [McInput, McNumberInput, McInputMono, MinValidator, MaxValidator],\n    declarations: [McInput, McNumberInput, McInputMono, MinValidator, MaxValidator ]\n})\nexport class McInputModule {\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({ providedIn: 'root' })\nexport class McDatepickerIntl {\n    /**\n     * Stream that emits whenever the labels here are changed. Use this to notify\n     * components if the labels have changed after initialization.\n     */\n    readonly changes: Subject<void> = new Subject<void>();\n\n    /** A label for the calendar popup (used by screen readers). */\n    calendarLabel: string = 'Calendar';\n\n    /** A label for the button used to open the calendar popup (used by screen readers). */\n    openCalendarLabel: string = 'Open calendar';\n\n    /** A label for the previous month button (used by screen readers). */\n    prevMonthLabel: string = 'Previous month';\n\n    /** A label for the next month button (used by screen readers). */\n    nextMonthLabel: string = 'Next month';\n\n    /** A label for the previous year button (used by screen readers). */\n    prevYearLabel: string = 'Previous year';\n\n    /** A label for the next year button (used by screen readers). */\n    nextYearLabel: string = 'Next year';\n\n    /** A label for the previous multi-year button (used by screen readers). */\n    prevMultiYearLabel: string = 'Previous 20 years';\n\n    /** A label for the next multi-year button (used by screen readers). */\n    nextMultiYearLabel: string = 'Next 20 years';\n\n    /** A label for the 'switch to month view' button (used by screen readers). */\n    switchToMonthViewLabel: string = 'Choose date';\n\n    /** A label for the 'switch to year view' button (used by screen readers). */\n    switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","// tslint:disable:no-magic-numbers\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    Output,\n    ViewEncapsulation,\n    NgZone,\n    OnChanges,\n    SimpleChanges\n} from '@angular/core';\nimport { take } from 'rxjs/operators';\n\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type McCalendarCellCssClasses = string | string[] | Set<string> | { [key: string]: any };\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class McCalendarCell {\n    constructor(\n        public value: number,\n        public displayValue: string,\n        public ariaLabel: string,\n        public enabled: boolean,\n        public cssClasses?: McCalendarCellCssClasses\n    ) {\n    }\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n    selector: '[mc-calendar-body]',\n    templateUrl: 'calendar-body.html',\n    styleUrls: ['calendar-body.css'],\n    host: {\n        class: 'mc-calendar__body',\n        role: 'grid',\n        'aria-readonly': 'true'\n    },\n    exportAs: 'mcCalendarBody',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCalendarBody implements OnChanges {\n    /** The label for the table. (e.g. \"Jan 2017\"). */\n    @Input() label: string;\n\n    /** The cells to display in the table. */\n    @Input() rows: McCalendarCell[][];\n\n    /** The value in the table that corresponds to today. */\n    @Input() todayValue: number;\n\n    /** The value in the table that is currently selected. */\n    @Input() selectedValue: number;\n\n    /** The minimum number of free cells needed to fit the label in the first row. */\n    @Input() labelMinRequiredCells: number;\n\n    /** The number of columns in the table. */\n    @Input() numCols = 7;\n\n    /** The cell number of the active cell in the table. */\n    @Input() activeCell = 0;\n\n    /**\n     * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n     * maintained even as the table resizes.\n     */\n    @Input() cellAspectRatio = 1;\n\n    /** Emits when a new value is selected. */\n    @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n    /** The number of blank cells to put at the beginning for the first row. */\n    firstRowOffset: number;\n\n    /** Padding for the individual date cells. */\n    cellPadding: string;\n\n    /** Width of an individual cell. */\n    cellWidth: string;\n\n    constructor(private elementRef: ElementRef<HTMLElement>, private ngZone: NgZone) {\n    }\n\n    cellClicked(cell: McCalendarCell): void {\n        if (cell.enabled) {\n            this.selectedValueChange.emit(cell.value);\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const columnChanges = changes.numCols;\n        // tslint:disable-next-line:no-this-assignment\n        const { rows, numCols } = this;\n\n        if (changes.rows || columnChanges) {\n            this.firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n        }\n\n        if (changes.cellAspectRatio || columnChanges || !this.cellPadding) {\n            this.cellPadding = `${this.cellAspectRatio * 50 / numCols}%`;\n        }\n\n        if (columnChanges || !this.cellWidth) {\n            this.cellWidth = `${100 / numCols}%`;\n        }\n    }\n\n    isActiveCell(rowIndex: number, colIndex: number): boolean {\n        let cellNumber = rowIndex * this.numCols + colIndex;\n\n        // Account for the fact that the first row may not have as many cells.\n        if (rowIndex) {\n            cellNumber -= this.firstRowOffset;\n        }\n\n        return cellNumber === this.activeCell;\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.ngZone.runOutsideAngular(() => {\n            this.ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n                const activeCell: HTMLElement | null =\n                    this.elementRef.nativeElement.querySelector('.mc-calendar__body_active');\n\n                if (activeCell) {\n                    activeCell.focus();\n                }\n            });\n        });\n    }\n}\n","// tslint:disable:no-magic-numbers\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Inject,\n    Input,\n    Optional,\n    Output,\n    ViewEncapsulation,\n    ViewChild\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    PAGE_DOWN,\n    PAGE_UP,\n    RIGHT_ARROW,\n    UP_ARROW,\n    SPACE\n} from '@ptsecurity/cdk/keycodes';\n\nimport { McCalendarBody, McCalendarCell, McCalendarCellCssClasses } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-month-view',\n    templateUrl: 'month-view.html',\n    exportAs: 'mcMonthView',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McMonthView<D> implements AfterContentInit {\n    /**\n     * The date to display in this month view (everything other than the month and year is ignored).\n     */\n    @Input()\n    get activeDate(): D {\n        return this._activeDate;\n    }\n\n    set activeDate(value: D) {\n        const oldActiveDate = this._activeDate;\n        const validDate =\n            this.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();\n        this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n        if (!this.hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n            this.init();\n        }\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.selectedDate = this.getDateInCurrentMonth(this._selected);\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** Function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Function that can be used to add custom CSS classes to dates. */\n    @Input() dateClass: (date: D) => McCalendarCellCssClasses;\n\n    /** Emits when a new date is selected. */\n    @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n    /** Emits when any date is selected. */\n    @Output() readonly userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Emits when any date is activated. */\n    @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** The body of calendar table */\n    @ViewChild(McCalendarBody) mcCalendarBody: McCalendarBody;\n\n    /** The label for this month (e.g. \"January 2017\"). */\n    monthLabel: string;\n\n    /** Grid of calendar cells representing the dates of the month. */\n    weeks: McCalendarCell[][];\n\n    /** The number of blank cells in the first row before the 1st of the month. */\n    firstWeekOffset: number;\n\n    /**\n     * The date of the month that the currently selected Date falls on.\n     * Null if the currently selected Date is in another month.\n     */\n    selectedDate: number | null;\n\n    /** The date of the month that today falls on. Null if today is in another month. */\n    todayDate: number | null;\n\n    /** The names of the weekdays. */\n    weekdays: { long: string; narrow: string }[];\n    private _activeDate: D;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() private dir?: Directionality\n    ) {\n\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        const firstDayOfWeek = this.dateAdapter.getFirstDayOfWeek();\n        const narrowWeekdays = this.dateAdapter.getDayOfWeekNames('narrow');\n        const longWeekdays = this.dateAdapter.getDayOfWeekNames('long');\n\n        // Rotate the labels for days of the week based on the configured first day of the week.\n        const weekdays = longWeekdays.map((long, i) => {\n            return { long, narrow: narrowWeekdays[i] };\n        });\n        this.weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n        this._activeDate = this.dateAdapter.today();\n    }\n\n    ngAfterContentInit() {\n        this.init();\n    }\n\n    /** Handles when a new date is selected. */\n    dateSelected(date: number) {\n        if (this.selectedDate !== date) {\n            const selectedYear = this.dateAdapter.getYear(this.activeDate);\n            const selectedMonth = this.dateAdapter.getMonth(this.activeDate);\n            const selectedDate = this.dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n            this.selectedChange.emit(selectedDate);\n        }\n\n        this.userSelection.emit();\n    }\n\n    /** Handles keydown events on the calendar body when calendar is in month view. */\n    handleCalendarBodyKeydown(event: KeyboardEvent): void {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n        const oldActiveDate = this._activeDate;\n        const isRtl = this.isRtl();\n\n        // tslint:disable-next-line:deprecation\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, -7);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, 7);\n                break;\n            case HOME:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate,\n                    1 - this.dateAdapter.getDate(this._activeDate));\n                break;\n            case END:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate,\n                    (this.dateAdapter.getNumDaysInMonth(this._activeDate) -\n                        this.dateAdapter.getDate(this._activeDate)));\n                break;\n            case PAGE_UP:\n                this.activeDate = event.altKey ?\n                    this.dateAdapter.addCalendarYears(this._activeDate, -1) :\n                    this.dateAdapter.addCalendarMonths(this._activeDate, -1);\n                break;\n            case PAGE_DOWN:\n                this.activeDate = event.altKey ?\n                    this.dateAdapter.addCalendarYears(this._activeDate, 1) :\n                    this.dateAdapter.addCalendarMonths(this._activeDate, 1);\n                break;\n            case ENTER:\n            case SPACE:\n                if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n                    this.dateSelected(this.dateAdapter.getDate(this._activeDate));\n                    this.userSelection.emit();\n                    // Prevent unexpected default actions such as form submission.\n                    event.preventDefault();\n                }\n\n                return;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n\n        if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n\n        this.focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n\n    /** Initializes this month view. */\n    init() {\n        this.selectedDate = this.getDateInCurrentMonth(this.selected);\n        this.todayDate = this.getDateInCurrentMonth(this.dateAdapter.today());\n        this.monthLabel =\n            this.dateAdapter.getMonthNames('short')[this.dateAdapter.getMonth(this.activeDate)];\n\n        this.monthLabel = this.monthLabel[0].toLocaleUpperCase() + this.monthLabel.substr(1);\n\n        const firstOfMonth = this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate),\n            this.dateAdapter.getMonth(this.activeDate), 1);\n        this.firstWeekOffset =\n            (DAYS_PER_WEEK + this.dateAdapter.getDayOfWeek(firstOfMonth) -\n                this.dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n        this.createWeekCells();\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.mcCalendarBody.focusActiveCell();\n    }\n\n    /** Creates McCalendarCells for the dates in this month. */\n    private createWeekCells() {\n        const daysInMonth = this.dateAdapter.getNumDaysInMonth(this.activeDate);\n        const dateNames = this.dateAdapter.getDateNames();\n\n        this.weeks = [[]];\n\n        for (let i = 0, cell = this.firstWeekOffset; i < daysInMonth; i++, cell++) {\n            if (cell === DAYS_PER_WEEK) {\n                this.weeks.push([]);\n                cell = 0;\n            }\n            const date = this.dateAdapter.createDate(\n                this.dateAdapter.getYear(this.activeDate),\n                this.dateAdapter.getMonth(this.activeDate), i + 1);\n            const enabled = this.shouldEnableDate(date);\n            const ariaLabel = this.dateAdapter.format(date, this.dateFormats.display.dateA11yLabel);\n            const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n            this.weeks[this.weeks.length - 1]\n                .push(new McCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n        }\n    }\n\n    /** Date filter for the month */\n    private shouldEnableDate(date: D): boolean {\n        return !!date &&\n            (!this.dateFilter || this.dateFilter(date)) &&\n            (!this.minDate || this.dateAdapter.compareDate(date, this.minDate) >= 0) &&\n            (!this.maxDate || this.dateAdapter.compareDate(date, this.maxDate) <= 0);\n    }\n\n    /**\n     * Gets the date in this month that the given Date falls on.\n     * Returns null if the given Date is in another month.\n     */\n    private getDateInCurrentMonth(date: D | null): number | null {\n        return date && this.hasSameMonthAndYear(date, this.activeDate) ?\n            this.dateAdapter.getDate(date) : null;\n    }\n\n    /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n    private hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n        return !!(d1 && d2 && this.dateAdapter.getMonth(d1) === this.dateAdapter.getMonth(d2) &&\n            this.dateAdapter.getYear(d1) === this.dateAdapter.getYear(d2));\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Determines whether the user has the RTL layout direction. */\n    private isRtl() {\n        return this.dir && this.dir.value === 'rtl';\n    }\n}\n","// tslint:disable:no-magic-numbers\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { DateAdapter } from '@ptsecurity/cdk/datetime';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    PAGE_DOWN,\n    PAGE_UP,\n    RIGHT_ARROW,\n    UP_ARROW,\n    SPACE\n} from '@ptsecurity/cdk/keycodes';\n\nimport { McCalendarBody, McCalendarCell } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-multi-year-view',\n    templateUrl: 'multi-year-view.html',\n    exportAs: 'mcMultiYearView',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McMultiYearView<D> implements AfterContentInit {\n    /** The date to display in this multi-year view (everything other than the year is ignored). */\n    @Input()\n    get activeDate(): D {\n        return this._activeDate;\n    }\n\n    set activeDate(value: D) {\n        const oldActiveDate = this._activeDate;\n        const validDate =\n            this.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();\n        this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n        if (Math.floor(this.dateAdapter.getYear(oldActiveDate) / yearsPerPage) !==\n            Math.floor(this.dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n            this.init();\n        }\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.selectedYear = this._selected && this.dateAdapter.getYear(this._selected);\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** A function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Emits when a new year is selected. */\n    @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits the selected year. This doesn't imply a change on the selected date */\n    @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits when any date is activated. */\n    @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** The body of calendar table */\n    @ViewChild(McCalendarBody) mcCalendarBody: McCalendarBody;\n\n    /** Grid of calendar cells representing the currently displayed years. */\n    years: McCalendarCell[][];\n\n    /** The year that today falls on. */\n    todayYear: number;\n\n    /** The year of the selected date. Null if the selected date is null. */\n    selectedYear: number | null;\n    private _activeDate: D;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() private dir?: Directionality\n    ) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        this._activeDate = this.dateAdapter.today();\n    }\n\n    ngAfterContentInit() {\n        this.init();\n    }\n\n    /** Initializes this multi-year view. */\n    init() {\n        this.todayYear = this.dateAdapter.getYear(this.dateAdapter.today());\n        const activeYear = this.dateAdapter.getYear(this._activeDate);\n        const activeOffset = activeYear % yearsPerPage;\n        this.years = [];\n        for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n            row.push(activeYear - activeOffset + i);\n            if (row.length === yearsPerRow) {\n                this.years.push(row.map((year) => this.createCellForYear(year)));\n                row = [];\n            }\n        }\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Handles when a new year is selected. */\n    onYearSelected(year: number) {\n        this.yearSelected.emit(this.dateAdapter.createDate(year, 0, 1));\n        const month = this.dateAdapter.getMonth(this.activeDate);\n        const daysInMonth =\n            this.dateAdapter.getNumDaysInMonth(this.dateAdapter.createDate(year, month, 1));\n        this.selectedChange.emit(this.dateAdapter.createDate(year, month,\n            Math.min(this.dateAdapter.getDate(this.activeDate), daysInMonth)));\n    }\n\n    /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n    handleCalendarBodyKeydown(event: KeyboardEvent): void {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n        const oldActiveDate = this._activeDate;\n        const isRtl = this.isRtl();\n\n        // tslint:disable-next-line:deprecation\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n                break;\n            case HOME:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate,\n                    -this.dateAdapter.getYear(this._activeDate) % yearsPerPage);\n                break;\n            case END:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate,\n                    yearsPerPage - this.dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n                break;\n            case PAGE_UP:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(\n                        this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n                break;\n            case PAGE_DOWN:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(\n                        this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n                break;\n            case ENTER:\n            case SPACE:\n                this.onYearSelected(this.dateAdapter.getYear(this._activeDate));\n                break;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n\n        if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n\n        this.focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n\n    getActiveCell(): number {\n        return this.dateAdapter.getYear(this.activeDate) % yearsPerPage;\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.mcCalendarBody.focusActiveCell();\n    }\n\n    /** Creates an McCalendarCell for the given year. */\n    private createCellForYear(year: number) {\n        const yearName = this.dateAdapter.getYearName(this.dateAdapter.createDate(year, 0, 1));\n\n        return new McCalendarCell(year, yearName, yearName, this.shouldEnableYear(year));\n    }\n\n    /** Whether the given year is enabled. */\n    private shouldEnableYear(year: number) {\n        // disable if the year is greater than maxDate lower than minDate\n        if (year === undefined || year === null ||\n            (this.maxDate && year > this.dateAdapter.getYear(this.maxDate)) ||\n            (this.minDate && year < this.dateAdapter.getYear(this.minDate))) {\n            return false;\n        }\n\n        // enable if it reaches here and there's no filter defined\n        if (!this.dateFilter) {\n            return true;\n        }\n\n        const firstOfYear = this.dateAdapter.createDate(year, 0, 1);\n\n        // If any date in the year is enabled count the year as enabled.\n        for (let date = firstOfYear; this.dateAdapter.getYear(date) === year;\n             date = this.dateAdapter.addCalendarDays(date, 1)) {\n            if (this.dateFilter(date)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Determines whether the user has the RTL layout direction. */\n    private isRtl() {\n        return this.dir && this.dir.value === 'rtl';\n    }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Inject,\n    Input,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    PAGE_DOWN,\n    PAGE_UP,\n    RIGHT_ARROW,\n    UP_ARROW,\n    SPACE\n} from '@ptsecurity/cdk/keycodes';\n\nimport { McCalendarBody, McCalendarCell } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-year-view',\n    templateUrl: 'year-view.html',\n    exportAs: 'mcYearView',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McYearView<D> implements AfterContentInit {\n    /** The date to display in this year view (everything other than the year is ignored). */\n    @Input()\n    get activeDate(): D {\n        return this._activeDate;\n    }\n\n    set activeDate(value: D) {\n        const oldActiveDate = this._activeDate;\n        const validDate =\n            this.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();\n        this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n        if (this.dateAdapter.getYear(oldActiveDate) !== this.dateAdapter.getYear(this._activeDate)) {\n            this.init();\n        }\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.selectedMonth = this.getMonthInCurrentYear(this._selected);\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** A function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Emits when a new month is selected. */\n    @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits the selected month. This doesn't imply a change on the selected date */\n    @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits when any date is activated. */\n    @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** The body of calendar table */\n    @ViewChild(McCalendarBody) mcCalendarBody: McCalendarBody;\n\n    /** Grid of calendar cells representing the months of the year. */\n    months: McCalendarCell[][];\n\n    /** The label for this year (e.g. \"2017\"). */\n    yearLabel: string;\n\n    /** The month in this year that today falls on. Null if today is in a different year. */\n    todayMonth: number | null;\n\n    /**\n     * The month in this year that the selected Date falls on.\n     * Null if the selected Date is in a different year.\n     */\n    selectedMonth: number | null;\n    private _activeDate: D;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() private dir?: Directionality\n    ) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        this._activeDate = this.dateAdapter.today();\n    }\n\n    ngAfterContentInit() {\n        this.init();\n    }\n\n    /** Handles when a new month is selected. */\n    onMonthSelected(month: number) {\n        const normalizedDate =\n            this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate), month, 1);\n\n        this.monthSelected.emit(normalizedDate);\n\n        const daysInMonth = this.dateAdapter.getNumDaysInMonth(normalizedDate);\n\n        this.selectedChange.emit(this.dateAdapter.createDate(\n            this.dateAdapter.getYear(this.activeDate), month,\n            Math.min(this.dateAdapter.getDate(this.activeDate), daysInMonth)));\n    }\n\n    /** Handles keydown events on the calendar body when calendar is in year view. */\n    handleCalendarBodyKeydown(event: KeyboardEvent): void {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n        const oldActiveDate = this._activeDate;\n        const isRtl = this.isRtl();\n\n        const VERTICAL_SHIFT = 4;\n        const PAGE_SHIFT = 10;\n        const MAX_MONTH_INDEX = 11;\n\n        // tslint:disable-next-line:deprecation\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, -VERTICAL_SHIFT);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, VERTICAL_SHIFT);\n                break;\n            case HOME:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate,\n                    -this.dateAdapter.getMonth(this._activeDate));\n                break;\n            case END:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate,\n                    MAX_MONTH_INDEX - this.dateAdapter.getMonth(this._activeDate));\n                break;\n            case PAGE_UP:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -PAGE_SHIFT : -1);\n                break;\n            case PAGE_DOWN:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(this._activeDate, event.altKey ? PAGE_SHIFT : 1);\n                break;\n            case ENTER:\n            case SPACE:\n                this.onMonthSelected(this.dateAdapter.getMonth(this._activeDate));\n                break;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n\n        if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n\n        this.focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n\n    /** Initializes this year view. */\n    init() {\n        this.selectedMonth = this.getMonthInCurrentYear(this.selected);\n        this.todayMonth = this.getMonthInCurrentYear(this.dateAdapter.today());\n        this.yearLabel = this.dateAdapter.getYearName(this.activeDate);\n\n        const monthNames = this.dateAdapter.getMonthNames('short');\n\n        // First row of months only contains 5 elements so we can fit the year label on the same row.\n        // tslint:disable-next-line:no-magic-numbers\n        this.months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map((row) => row.map(\n            (month) => this.createCellForMonth(month, monthNames[month])));\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.mcCalendarBody.focusActiveCell();\n    }\n\n    /**\n     * Gets the month in this year that the given Date falls on.\n     * Returns null if the given Date is in another year.\n     */\n    private getMonthInCurrentYear(date: D | null) {\n        return date && this.dateAdapter.getYear(date) === this.dateAdapter.getYear(this.activeDate) ?\n            this.dateAdapter.getMonth(date) : null;\n    }\n\n    /** Creates an McCalendarCell for the given month. */\n    private createCellForMonth(month: number, monthName: string) {\n        const ariaLabel = this.dateAdapter.format(\n            this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate), month, 1),\n            this.dateFormats.display.monthYearA11yLabel);\n\n        const newMonthName = monthName[0].toLocaleUpperCase() + monthName.substr(1);\n\n        return new McCalendarCell(\n            month, newMonthName, ariaLabel, this.shouldEnableMonth(month));\n    }\n\n    /** Whether the given month is enabled. */\n    private shouldEnableMonth(month: number) {\n\n        const activeYear = this.dateAdapter.getYear(this.activeDate);\n\n        if (month === undefined || month === null ||\n            this.isYearAndMonthAfterMaxDate(activeYear, month) ||\n            this.isYearAndMonthBeforeMinDate(activeYear, month)) {\n            return false;\n        }\n\n        if (!this.dateFilter) {\n            return true;\n        }\n\n        const firstOfMonth = this.dateAdapter.createDate(activeYear, month, 1);\n\n        // If any date in the month is enabled count the month as enabled.\n        for (let date = firstOfMonth; this.dateAdapter.getMonth(date) === month;\n             date = this.dateAdapter.addCalendarDays(date, 1)) {\n            if (this.dateFilter(date)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Tests whether the combination month/year is after this.maxDate, considering\n     * just the month and year of this.maxDate\n     */\n    private isYearAndMonthAfterMaxDate(year: number, month: number) {\n        if (this.maxDate) {\n            const maxYear = this.dateAdapter.getYear(this.maxDate);\n            const maxMonth = this.dateAdapter.getMonth(this.maxDate);\n\n            return year > maxYear || (year === maxYear && month > maxMonth);\n        }\n\n        return false;\n    }\n\n    /**\n     * Tests whether the combination month/year is before this.minDate, considering\n     * just the month and year of this.minDate\n     */\n    private isYearAndMonthBeforeMinDate(year: number, month: number) {\n        if (this.minDate) {\n            const minYear = this.dateAdapter.getYear(this.minDate);\n            const minMonth = this.dateAdapter.getMonth(this.minDate);\n\n            return year < minYear || (year === minYear && month < minMonth);\n        }\n\n        return false;\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Determines whether the user has the RTL layout direction. */\n    private isRtl() {\n        return this.dir && this.dir.value === 'rtl';\n    }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    ViewEncapsulation,\n    ViewChild\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { McButton } from '@ptsecurity/mosaic/button';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/**\n * Provider Expression that allows mc-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McButtonToggleGroup),\n    multi: true\n};\n\n/** Change event object emitted by MсButtonToggle. */\nexport class McButtonToggleChange {\n    constructor(\n        /** The MсButtonToggle that emits the event. */\n        public source: McButtonToggle,\n        /** The value assigned to the MсButtonToggle. */\n        public value: any) {\n    }\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n    selector: 'mc-button-toggle-group',\n    providers: [MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n    host: {\n        role: 'group',\n        class: 'mc-button-toggle-group',\n        '[class.mc-button-toggle-vertical]': 'vertical'\n    },\n    exportAs: 'mcButtonToggleGroup'\n})\nexport class McButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n\n    /** Whether the toggle group is vertical. */\n    @Input()\n    get vertical(): boolean {\n        return this._vertical;\n    }\n\n    set vertical(value: boolean) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n\n    /** Value of the toggle group. */\n    @Input()\n    get value(): any {\n        const selected = this.selectionModel ? this.selectionModel.selected : [];\n\n        if (this.multiple) {\n            return selected.map((toggle) => toggle.value);\n        }\n\n        return selected[0] ? selected[0].value : undefined;\n    }\n\n    set value(newValue: any) {\n        this.setSelectionByValue(newValue);\n        this.valueChange.emit(this.value);\n    }\n\n    /** Selected button toggles in the group. */\n    get selected(): any {\n        const selected = this.selectionModel.selected;\n\n        return this.multiple ? selected : (selected[0] || null);\n    }\n\n    /** Whether multiple button toggles can be selected. */\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    /** Child button toggle buttons. */\n    @ContentChildren(forwardRef(() => McButtonToggle)) buttonToggles: QueryList<McButtonToggle>;\n\n    /** Whether multiple button toggle group is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        if (!this.buttonToggles) {\n            return;\n        }\n\n        this.buttonToggles.forEach((toggle) => toggle.markForCheck());\n    }\n\n    /**\n     * Event that emits whenever the value of the group changes.\n     * Used to facilitate two-way data binding.\n     * @docs-private\n     */\n    @Output() readonly valueChange = new EventEmitter<any>();\n\n    /** Event emitted when the group's value changes. */\n    @Output() readonly change: EventEmitter<McButtonToggleChange> =\n        new EventEmitter<McButtonToggleChange>();\n    private _vertical = false;\n    private _multiple = false;\n    private _disabled = false;\n    private selectionModel: SelectionModel<McButtonToggle>;\n\n    /**\n     * Reference to the raw value that the consumer tried to assign. The real\n     * value will exclude any values from this one that don't correspond to a\n     * toggle. Useful for the cases where the value is assigned before the toggles\n     * have been initialized or at the same that they're being swapped out.\n     */\n    private rawValue: any;\n\n    constructor(private _changeDetector: ChangeDetectorRef) {}\n\n    /**\n     * The method to be called in order to update ngModel.\n     * Now `ngModel` binding is not supported in multiple selection mode.\n     */\n    // tslint:disable-next-line:no-empty\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n    // tslint:disable-next-line:no-empty\n    onTouched: () => any = () => {};\n\n    ngOnInit() {\n        this.selectionModel = new SelectionModel<McButtonToggle>(this.multiple, undefined, false);\n    }\n\n    ngAfterContentInit() {\n        this.selectionModel.select(...this.buttonToggles.filter((toggle) => toggle.checked));\n        this.disabled = this._disabled;\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value Value to be set to the model.\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        const selected = this.selected;\n        const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n        const event = new McButtonToggleChange(source, this.value);\n        this.controlValueAccessorChangeFn(event.value);\n        this.change.emit(event);\n    }\n\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param toggle Toggle to be synced.\n     * @param select Whether the toggle should be selected.\n     * @param isUserInput Whether the change was a result of a user interaction.\n     */\n    syncButtonToggle(toggle: McButtonToggle, select: boolean, isUserInput = false) {\n        // Deselect the currently-selected toggle, if we're in single-selection\n        // mode and the button being toggled isn't selected at the moment.\n        if (!this.multiple && this.selected && !toggle.checked) {\n            (this.selected as McButtonToggle).checked = false;\n        }\n\n        if (select) {\n            this.selectionModel.select(toggle);\n        } else {\n            this.selectionModel.deselect(toggle);\n        }\n\n        // Only emit the change event for user input.\n        if (isUserInput) {\n            this.emitChangeEvent();\n        }\n\n        // Note: we emit this one no matter whether it was a user interaction, because\n        // it is used by Angular to sync up the two-way data binding.\n        this.valueChange.emit(this.value);\n    }\n\n    /** Checks whether a button toggle is selected. */\n    isSelected(toggle: McButtonToggle) {\n        return this.selectionModel.isSelected(toggle);\n    }\n\n    /** Determines whether a button toggle should be checked on init. */\n    isPrechecked(toggle: McButtonToggle) {\n        if (this.rawValue === undefined) {\n            return false;\n        }\n\n        if (this.multiple && Array.isArray(this.rawValue)) {\n            return this.rawValue.some((value) => toggle.value != null && value === toggle.value);\n        }\n\n        return toggle.value === this.rawValue;\n    }\n\n    /** Updates the selection state of the toggles in the group based on a value. */\n    private setSelectionByValue(value: any | any[]) {\n        this.rawValue = value;\n\n        if (!this.buttonToggles) {\n            return;\n        }\n\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw Error('Value must be an array in multiple-selection mode.');\n            }\n\n            this.clearSelection();\n            value.forEach((currentValue: any) => this.selectValue(currentValue));\n        } else {\n            this.clearSelection();\n            this.selectValue(value);\n        }\n    }\n\n    /** Clears the selected toggles. */\n    private clearSelection() {\n        this.selectionModel.clear();\n        this.buttonToggles.forEach((toggle) => toggle.checked = false);\n    }\n\n    /** Selects a value if there's a toggle that corresponds to it. */\n    private selectValue(value: any) {\n        const correspondingOption = this.buttonToggles.find((toggle) => {\n            return toggle.value != null && toggle.value === value;\n        });\n\n        if (correspondingOption) {\n            correspondingOption.checked = true;\n            this.selectionModel.select(correspondingOption);\n        }\n    }\n}\n\n/** Single button inside of a toggle group. */\n@Component({\n    selector: 'mc-button-toggle',\n    template: `\n        <button\n            mc-button\n            type=\"button\"\n            [disabled]=\"disabled\"\n            [attr.tabindex]=\"disabled ? -1 : tabIndex\"\n            (click)=\"onToggleClick()\">\n            <ng-content></ng-content>\n        </button>\n    `,\n    styleUrls: ['button-toggle.css'],\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcButtonToggle',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[class.mc-button-toggle-standalone]': '!buttonToggleGroup',\n        '[class.mc-button-toggle-checked]': 'checked',\n        class: 'mc-button-toggle',\n        // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n        // but can still receive focus from things like cdkFocusInitial.\n        '[attr.tabindex]': '-1',\n        '[attr.disabled]': 'disabled || null',\n        '(focus)': 'focus()'\n    }\n})\nexport class McButtonToggle implements OnInit, OnDestroy {\n\n    /** Whether the button is checked. */\n    @Input()\n    get checked(): boolean {\n        return this.buttonToggleGroup ? this.buttonToggleGroup.isSelected(this) : this._checked;\n    }\n\n    set checked(value: boolean) {\n        const newValue = coerceBooleanProperty(value);\n\n        if (newValue !== this._checked) {\n            this._checked = newValue;\n\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup.syncButtonToggle(this, this._checked);\n            }\n\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    // tslint:disable-next-line:no-reserved-keywords\n    type: ToggleType;\n\n    @ViewChild(McButton) mcButton: McButton;\n\n    /** McButtonToggleGroup reads this to assign its own value. */\n    @Input() value: any;\n\n    /** Tabindex for the toggle. */\n    @Input() tabIndex: number | null;\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n    }\n    set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n\n    /** Event emitted when the group value changes. */\n    @Output() readonly change: EventEmitter<McButtonToggleChange> =\n        new EventEmitter<McButtonToggleChange>();\n\n    private isSingleSelector = false;\n    private _checked = false;\n    private _disabled: boolean = false;\n\n    constructor(\n        @Optional() public buttonToggleGroup: McButtonToggleGroup,\n        private changeDetectorRef: ChangeDetectorRef,\n        private focusMonitor: FocusMonitor,\n        private element: ElementRef\n    ) {}\n\n    ngOnInit() {\n        this.isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n        this.type = this.isSingleSelector ? 'radio' : 'checkbox';\n\n        if (this.buttonToggleGroup && this.buttonToggleGroup.isPrechecked(this)) {\n            this.checked = true;\n        }\n\n        this.focusMonitor.monitor(this.element.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        const group = this.buttonToggleGroup;\n\n        this.focusMonitor.stopMonitoring(this.element.nativeElement);\n\n        // Remove the toggle from the selection once it's destroyed. Needs to happen\n        // on the next tick in order to avoid \"changed after checked\" errors.\n        if (group && group.isSelected(this)) {\n            Promise.resolve().then(() => group.syncButtonToggle(this, false));\n        }\n    }\n\n    /** Focuses the button. */\n    focus(): void {\n        this.element.nativeElement.focus();\n    }\n\n    /** Checks the button toggle due to an interaction with the underlying native button. */\n    onToggleClick() {\n        if (this.disabled) {\n            return;\n        }\n\n        const newChecked = this.isSingleSelector ? true : !this._checked;\n\n        if (newChecked !== this._checked) {\n            this._checked = newChecked;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup.syncButtonToggle(this, this._checked, true);\n                this.buttonToggleGroup.onTouched();\n            }\n        }\n        // Emit a change event when it's the single selector\n        this.change.emit(new McButtonToggleChange(this, this.value));\n    }\n\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When the group value changes, the button will not be notified.\n        // Use `markForCheck` to explicit update button toggle's status.\n        this.changeDetectorRef.markForCheck();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { McButtonModule } from '@ptsecurity/mosaic/button';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McButtonToggle, McButtonToggleGroup } from './button-toggle.component';\n\n\n@NgModule({\n    imports: [McCommonModule, McButtonModule],\n    exports: [McCommonModule, McButtonToggleGroup, McButtonToggle],\n    declarations: [McButtonToggleGroup, McButtonToggle]\n})\nexport class McButtonToggleModule {}\n","import {\n    Output,\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef, Input,\n    OnDestroy, EventEmitter,\n    ViewEncapsulation, HostBinding\n} from '@angular/core';\n\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { SPACE } from '@ptsecurity/cdk/keycodes';\n\n\n@Component({\n    selector: 'mc-card',\n    templateUrl: './card.component.html',\n    styleUrls: ['./card.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['color'],\n    host: {\n        class: 'mc-card',\n        '[class.mc-card_readonly]': 'readonly',\n        '[class.mc-card_selected]': 'selected',\n        '(keydown)': 'onKeyDown($event)',\n        '(click)': 'onClick($event)'\n    }\n})\nexport class McCard implements OnDestroy {\n    get tabIndex(): number | null {\n        return this.readonly ? null : this._tabIndex;\n    }\n\n    @HostBinding('attr.tabIndex')\n    @Input()\n    set tabIndex(value: number | null) {\n        this._tabIndex = value;\n    }\n\n    @Input()\n    readonly = false;\n\n    @Input()\n    selected = false;\n\n    @Output()\n    selectedChange = new EventEmitter<boolean>();\n\n    private _tabIndex: number | null = 0;\n\n    constructor(private _elementRef: ElementRef, private _focusMonitor: FocusMonitor) {\n        this._focusMonitor.monitor(this._elementRef.nativeElement, false);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this.hostElement.focus();\n    }\n\n    onClick($event: MouseEvent) {\n        if (!this.readonly) {\n            $event.stopPropagation();\n\n            this.selectedChange.emit(!this.selected);\n        }\n    }\n\n    private get hostElement() {\n        return this._elementRef.nativeElement;\n    }\n\n    onKeyDown($event: KeyboardEvent) {\n        switch ($event.keyCode) {\n            case SPACE:\n                if (!this.readonly) {\n                    $event.preventDefault();\n                    this.selectedChange.emit(!this.selected);\n                }\n                break;\n            default:\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McCard\n} from './card.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [McCard],\n    declarations: [McCard]\n})\nexport class McCardModule {}\n","import { InjectionToken } from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type McCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MC_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<McCheckboxClickAction>('mc-checkbox-click-action');\n","import {\n    AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport {\n    CanColor, CanColorCtor,\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\nimport { MC_CHECKBOX_CLICK_ACTION, McCheckboxClickAction } from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mc-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McCheckbox),\n    multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n    /** The initial state of the component before any user interaction. */\n    Init,\n    /** The state representing the component when it's becoming checked. */\n    Checked,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate\n}\n\n/** Change event object emitted by McCheckbox. */\nexport class McCheckboxChange {\n    /** The source McCheckbox of the event. */\n    source: McCheckbox;\n    /** The new `checked` value of the checkbox. */\n    checked: boolean;\n}\n\n// Boilerplate for applying mixins to McCheckbox.\n/** @docs-private */\nexport class McCheckboxBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\nexport const _McCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof McCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisabled(McCheckboxBase)));\n\n\n/**\n * A mosaic checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A McCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n */\n@Component({\n    selector: 'mc-checkbox',\n    templateUrl: 'checkbox.html',\n    styleUrls: ['checkbox.css'],\n    exportAs: 'mcCheckbox',\n    host: {\n        class: 'mc-checkbox',\n        '[id]': 'id',\n        '[attr.id]': 'id',\n        '[class.mc-indeterminate]': 'indeterminate',\n        '[class.mc-checked]': 'checked',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-checkbox-label-before]': 'labelPosition == \"before\"'\n    },\n    providers: [MC_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCheckbox extends _McCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex {\n\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     */\n    @Input('aria-label') ariaLabel: string = '';\n\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n    private _uniqueId: string = `mc-checkbox-${++nextUniqueId}`;\n\n    /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n    @Input() id: string = this._uniqueId;\n\n    /** Returns the unique id for the visual hidden input. */\n    get inputId(): string {\n        return `${this.id || this._uniqueId}-input`;\n    }\n\n    /** Whether the checkbox is required. */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    private _required: boolean;\n\n    /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n    @Input() labelPosition: 'before' | 'after' = 'after';\n\n    /** Name value will be applied to the input element if present */\n    @Input() name: string | null = null;\n\n    /** Event emitted when the checkbox's `checked` value changes. */\n    @Output() readonly change: EventEmitter<McCheckboxChange> =\n        new EventEmitter<McCheckboxChange>();\n\n    /** Event emitted when the checkbox's `indeterminate` value changes. */\n    @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** The value attribute of the native input element */\n    @Input() value: string;\n\n    /** The native `<input type=\"checkbox\">` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * @docs-private\n     */\n    _onTouched: () => any = () => {\n    }\n\n    private _currentAnimationClass: string = '';\n\n    private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n    private _controlValueAccessorChangeFn: (value: any) => void = () => {\n    }\n\n    constructor(elementRef: ElementRef,\n                private _changeDetectorRef: ChangeDetectorRef,\n                private _focusMonitor: FocusMonitor,\n                @Attribute('tabindex') tabIndex: string,\n                @Optional() @Inject(MC_CHECKBOX_CLICK_ACTION)\n                private _clickAction: McCheckboxClickAction) {\n        super(elementRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._inputElement.nativeElement)\n            .subscribe((focusOrigin) => this._onInputFocusChange(focusOrigin));\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    }\n\n    /**\n     * Whether the checkbox is checked.\n     */\n    @Input()\n    get checked(): boolean {\n        return this._checked;\n    }\n\n    set checked(value: boolean) {\n        if (value != this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _checked: boolean = false;\n\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value != this.disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    @Input()\n    get indeterminate(): boolean {\n        return this._indeterminate;\n    }\n\n    set indeterminate(value: boolean) {\n        const changed = value != this._indeterminate;\n        this._indeterminate = value;\n\n        if (changed) {\n            if (this._indeterminate) {\n                this._transitionCheckState(TransitionCheckState.Indeterminate);\n            } else {\n                this._transitionCheckState(\n                    this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n    }\n\n    private _indeterminate: boolean = false;\n\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // This method is getting called whenever the label of the checkbox changes.\n        // Since the checkbox uses the OnPush strategy we need to notify it about the change\n        // that has been recognized by the cdkObserveContent directive.\n        this._changeDetectorRef.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any) {\n        this.checked = !!value;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this._onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n    }\n\n    _getAriaChecked(): 'true' | 'false' | 'mixed' {\n        return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n    }\n\n    private _transitionCheckState(newState: TransitionCheckState) {\n        const oldState = this._currentCheckState;\n        const element: HTMLElement = this._elementRef.nativeElement;\n\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n\n        this._currentCheckState = newState;\n\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n        }\n    }\n\n    private _emitChangeEvent() {\n        const event = new McCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    }\n\n    /** Function is called whenever the focus changes for the input element. */\n    private _onInputFocusChange(focusOrigin: FocusOrigin) {\n        if (focusOrigin) {\n            this._onTouched();\n        }\n    }\n\n    /** Toggles the `checked` state of the checkbox. */\n    toggle(): void {\n        this.checked = !this.checked;\n    }\n\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event\n     */\n    _onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && this._clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && this._clickAction !== 'check') {\n\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n\n            this.toggle();\n            this._transitionCheckState(\n                this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        } else if (!this.disabled && this._clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mc-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n\n    /** Focuses the checkbox. */\n    focus(): void {\n        this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n    }\n\n    _onInteractionEvent(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n}\n","import {\n    Directive,\n    forwardRef,\n    Provider\n} from '@angular/core';\nimport {\n    CheckboxRequiredValidator,\n    NG_VALIDATORS\n} from '@angular/forms';\n\n\nexport const MC_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McCheckboxRequiredValidator),\n    multi: true\n};\n\n/**\n * Validator for Mosaic checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mc-checkbox`.\n */\n@Directive({\n    selector: `mc-checkbox[required][formControlName],\n             mc-checkbox[required][formControl], mc-checkbox[required][ngModel]`,\n    providers: [MC_CHECKBOX_REQUIRED_VALIDATOR],\n    host: { '[attr.required]': 'required ? \"\" : null' }\n})\nexport class McCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McCheckbox } from './checkbox';\nimport { McCheckboxRequiredValidator } from './checkbox-required-validator';\n\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [McCheckbox, McCheckboxRequiredValidator],\n    declarations: [McCheckbox, McCheckboxRequiredValidator]\n})\nexport class McCheckboxModule {\n}\n","import {\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { mixinColor, CanColor, CanColorCtor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\n@Directive({\n    selector: '[mc-icon]',\n    host: { class: 'mc mc-icon' }\n})\nexport class McIconCSSStyler {}\n\n\nexport class McIconBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McIconMixinBase: CanColorCtor & typeof McIconBase = mixinColor(McIconBase, ThemePalette.Empty);\n\n\n@Component({\n    selector: `[mc-icon]`,\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./icon.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['color']\n})\nexport class McIcon extends _McIconMixinBase implements CanColor {\n    constructor(elementRef: ElementRef, @Attribute('mc-icon') iconName: string) {\n        super(elementRef);\n\n        elementRef.nativeElement.classList.add(iconName);\n    }\n\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McIcon,\n    McIconCSSStyler\n} from './icon.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McIcon,\n        McIconCSSStyler\n    ],\n    declarations: [\n        McIcon,\n        McIconCSSStyler\n    ]\n})\nexport class McIconModule {}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-cleaner',\n    template: '<i class=\"mc-icon_light\" mc-icon=\"mc-close-M_16\" color=\"second\"></i>'\n})\nexport class McCleaner {}\n","import { NgControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\n\n/** An interface which allows a control to work inside of a `MсFormField`. */\nexport abstract class McFormFieldControl<T> {\n    /** The value of the control. */\n    value: T | null;\n\n    /**\n     * Stream that emits whenever the state of the control changes such that the parent `MсFormField`\n     * needs to run change detection.\n     */\n    readonly stateChanges: Observable<void>;\n\n    /** The element ID for this control. */\n    readonly id: string;\n\n    /** The placeholder for this control. */\n    readonly placeholder: string;\n\n    /** Gets the NgControl for this control. */\n    readonly ngControl: NgControl | null;\n\n    /** Whether the control is focused. */\n    readonly focused: boolean;\n\n    /** Whether the control is empty. */\n    readonly empty: boolean;\n\n    /** Whether the control is required. */\n    readonly required: boolean;\n\n    /** Whether the control is disabled. */\n    readonly disabled: boolean;\n\n    /** Whether the control is in an error state. */\n    readonly errorState: boolean;\n\n    /**\n     * An optional name for the control type that can be used to distinguish `mc-form-field` elements\n     * based on their control type. The form field will add a class,\n     * `mc-form-field-type-{{controlType}}` to its root element.\n     */\n    readonly controlType?: string;\n\n    /** Handles a click on the control's container. */\n    abstract onContainerClick(event: MouseEvent): void;\n}\n","import { Observable } from 'rxjs';\n\n\n/** An interface which allows a control to work inside of a `MсFormField`. */\nexport abstract class McFormFieldNumberControl<T> {\n    /** The value of the control. */\n    value: T | null;\n\n    /**\n     * Stream that emits whenever the state of the control changes such that the parent `MсFormField`\n     * needs to run change detection.\n     */\n    readonly stateChanges: Observable<void>;\n\n    /** the number step */\n    step: number;\n\n    /** the number big step */\n    bigStep: number;\n\n    /** Whether the control is focused. */\n    readonly focused: boolean;\n\n    /** Handles step up and down */\n    abstract stepUp(step: number): void;\n\n    abstract stepDown(step: number): void;\n}\n","import { Directive, Input } from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n@Directive({\n    selector: 'mc-hint',\n    host: {\n        class: 'mc-hint',\n        '[attr.id]': 'id'\n    }\n})\nexport class McHint {\n    @Input() id: string = `mc-hint-${nextUniqueId++}`;\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcPrefix]'\n})\nexport class McPrefix {\n}\n","import { Component, EventEmitter, Output } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-stepper',\n    template: `\n        <i class=\"mc mc-icon mc-icon_light mc-second mc-stepper-step-up mc-angle-down-L_16\"\n           (mousedown)=\"onStepUp($event)\">\n        </i>\n        <i class=\"mc mc-icon mc-icon_light mc-second mc-stepper-step-down mc-angle-down-L_16\"\n           (mousedown)=\"onStepDown($event)\">\n        </i>\n    `\n})\nexport class McStepper {\n    @Output()\n    readonly stepUp: EventEmitter<void> = new EventEmitter<void>();\n    @Output()\n    readonly stepDown: EventEmitter<void> = new EventEmitter<void>();\n\n    onStepUp($event: MouseEvent) {\n        this.stepUp.emit();\n        $event.preventDefault();\n    }\n\n    onStepDown($event: MouseEvent) {\n        this.stepDown.emit();\n        $event.preventDefault();\n    }\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcSuffix]'\n})\nexport class McSuffix {\n}\n","import {\n    AfterContentChecked,\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren, Directive,\n    ElementRef,\n    QueryList, ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { CanColor, CanColorCtor, mixinColor } from '@ptsecurity/mosaic/core';\nimport { EMPTY, merge } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n\n\nimport { McCleaner } from './cleaner';\nimport { McFormFieldControl } from './form-field-control';\nimport { getMcFormFieldMissingControlError } from './form-field-errors';\nimport { McFormFieldNumberControl } from './form-field-number-control';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McStepper } from './stepper';\nimport { McSuffix } from './suffix';\n\n\nlet nextUniqueId = 0;\n\nexport class McFormFieldBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McFormFieldMixinBase: CanColorCtor & typeof McFormFieldBase = mixinColor(McFormFieldBase);\n\n@Component({\n    selector: 'mc-form-field',\n    exportAs: 'mcFormField',\n    templateUrl: 'form-field.html',\n    // McInput is a directive and can't have styles, so we need to include its styles here.\n    // The McInput styles are fairly minimal so it shouldn't be a big deal for people who\n    // aren't using McInput.\n    styleUrls: [\n        'form-field.css',\n        '../input/input.css',\n        '../textarea/textarea.css'\n    ],\n    host: {\n        class: 'mc-form-field',\n        '[class.mc-form-field_invalid]': '_control.errorState',\n        '[class.mc-disabled]': '_control.disabled',\n        '[class.mc-form-field_has-prefix]': 'hasPrefix',\n        '[class.mc-form-field_has-suffix]': 'hasSuffix',\n        '[class.mc-form-field_has-cleaner]': 'canShowCleaner',\n        '[class.mc-form-field_has-stepper]': 'canShowStepper',\n        '[class.mc-focused]': '_control.focused',\n        '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n        '[class.ng-touched]': '_shouldForward(\"touched\")',\n        '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n        '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n        '[class.ng-valid]': '_shouldForward(\"valid\")',\n        '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n        '[class.ng-pending]': '_shouldForward(\"pending\")',\n        '(keydown)': 'onKeyDown($event)',\n        '(mouseenter)': 'onHoverChanged(true)',\n        '(mouseleave)': 'onHoverChanged(false)'\n    },\n    inputs: ['color'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class McFormField extends _McFormFieldMixinBase implements\n    AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n\n    @ContentChild(McFormFieldControl) _control: McFormFieldControl<any>;\n    @ContentChild(McFormFieldNumberControl) _numberControl: McFormFieldNumberControl<any>;\n    @ContentChild(McStepper) _stepper: McStepper;\n\n    @ContentChildren(McHint) _hint: QueryList<McHint>;\n    @ContentChildren(McSuffix) _suffix: QueryList<McSuffix>;\n    @ContentChildren(McPrefix) _prefix: QueryList<McPrefix>;\n    @ContentChildren(McCleaner) _cleaner: QueryList<McCleaner>;\n\n    @ViewChild('connectionContainer') connectionContainerRef: ElementRef;\n\n    // Unique id for the internal form field label.\n    _labelId = `mc-form-field-label-${nextUniqueId++}`;\n\n    hovered: boolean = false;\n\n    constructor(public _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef) {\n        super(_elementRef);\n    }\n\n    ngAfterContentInit() {\n        this._validateControlChild();\n\n        if (this._control.controlType) {\n            this._elementRef.nativeElement.classList\n                .add(`mc-form-field-type-${this._control.controlType}`);\n\n            if (this._numberControl && this.hasStepper) {\n                this._stepper.stepUp.subscribe(this.onStepUp.bind(this));\n                this._stepper.stepDown.subscribe(this.onStepDown.bind(this));\n            }\n        }\n\n        // Subscribe to changes in the child control state in order to update the form field UI.\n        this._control.stateChanges.pipe(startWith())\n            .subscribe(() => {\n                this._changeDetectorRef.markForCheck();\n            });\n\n        if (this._numberControl) {\n            this._numberControl.stateChanges.pipe(startWith())\n                .subscribe(() => {\n                    this._changeDetectorRef.markForCheck();\n                });\n        }\n\n        // Run change detection if the value changes.\n        const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n\n        merge(valueChanges)\n            .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    ngAfterContentChecked() {\n        this._validateControlChild();\n    }\n\n    ngAfterViewInit() {\n        // Avoid animations on load.\n        this._changeDetectorRef.detectChanges();\n    }\n\n    clearValue($event) {\n        $event.stopPropagation();\n\n        if (this._control && this._control.ngControl) {\n            this._control.ngControl.reset();\n        }\n    }\n\n    onContainerClick($event) {\n        if (this._control.onContainerClick) {\n            this._control.onContainerClick($event);\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n        // tslint:disable-next-line:deprecation\n        if (event.keyCode === ESCAPE && this._control.focused && this.hasCleaner) {\n            if (this._control && this._control.ngControl) {\n                this._control.ngControl.reset();\n            }\n\n            event.preventDefault();\n        }\n    }\n\n    onHoverChanged(isHovered: boolean) {\n        if (isHovered !== this.hovered) {\n            this.hovered  = isHovered;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    onStepUp() {\n        if (this._numberControl) {\n            this._numberControl.stepUp(this._numberControl.step);\n        }\n    }\n\n    onStepDown() {\n        if (this._numberControl) {\n            this._numberControl.stepDown(this._numberControl.step);\n        }\n    }\n\n    /**\n     * Gets an ElementRef for the element that a overlay attached to the form-field should be\n     * positioned relative to.\n     */\n    getConnectedOverlayOrigin(): ElementRef {\n        return this.connectionContainerRef || this._elementRef;\n    }\n\n        /** Determines whether a class from the NgControl should be forwarded to the host element. */\n    _shouldForward(prop: keyof NgControl): boolean {\n        const ngControl = this._control ? this._control.ngControl : null;\n\n        return ngControl && ngControl[prop];\n    }\n\n    /** Throws an error if the form field's control is missing. */\n    protected _validateControlChild() {\n        if (!this._control) {\n            throw getMcFormFieldMissingControlError();\n        }\n    }\n\n    get hasHint(): boolean {\n        return this._hint && this._hint.length > 0;\n    }\n\n    get hasSuffix(): boolean {\n        return this._suffix && this._suffix.length > 0;\n    }\n\n    get hasPrefix(): boolean {\n        return this._prefix && this._prefix.length > 0;\n    }\n\n    get hasCleaner(): boolean {\n        return this._cleaner && this._cleaner.length > 0;\n    }\n\n    get hasStepper(): boolean {\n        return !!this._stepper;\n    }\n\n    get canShowCleaner(): boolean {\n        return this.hasCleaner &&\n            this._control &&\n            this._control.ngControl\n                ? this._control.ngControl.value && !this._control.disabled\n                : false;\n    }\n\n\n    get disabled(): boolean {\n        return this._control && this._control.disabled;\n    }\n\n    get canShowStepper(): boolean {\n        return this._numberControl &&\n            !this.disabled &&\n            (\n                this._numberControl.focused ||\n                this.hovered\n            );\n    }\n}\n\n@Directive({\n    selector: 'mc-form-field[mcFormFieldWithoutBorders]',\n    exportAs: 'mcFormFieldWithoutBorders',\n    host: { class: 'mc-form-field_without-borders' }\n})\nexport class McFormFieldWithoutBorders {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McCleaner } from './cleaner';\nimport { McFormField, McFormFieldWithoutBorders } from './form-field';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McStepper } from './stepper';\nimport { McSuffix } from './suffix';\n\n\n@NgModule({\n    declarations: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner,\n        McStepper\n    ],\n    imports: [CommonModule, McIconModule],\n    exports: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner,\n        McStepper\n    ]\n})\nexport class McFormFieldModule {\n}\n","import { InjectionToken } from '@angular/core';\n\n\nexport const MC_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{ value: any }>('MC_INPUT_VALUE_ACCESSOR');\n","function sanitizeNumber(value: number): number | null {\n    return !isFinite(value) || isNaN(value)\n        ? null\n        : value;\n}\n\nfunction getPrecision(value: number): number {\n    const arr = value.toString().split('.');\n\n    return arr.length === 1\n        ? 1\n        // tslint:disable-next-line:no-magic-numbers\n        :  Math.pow(10, arr[1].length);\n}\n\nfunction add(value1: number, value2: number) {\n    const precision = Math.max(getPrecision(value1), getPrecision(value2));\n\n    const res = (value1 * precision + value2 * precision) / precision;\n\n    return sanitizeNumber(res);\n}\n\nexport const stepUp = (value: number | null,\n                       max: number,\n                       min: number,\n                       step: number\n): number | null => {\n    let res;\n\n    if (value === null) {\n        res = add(min, step);\n\n        return res === null ? null : Math.min(res, max);\n    }\n\n    res = add(value, step);\n\n    return res === null ? null : Math.max(Math.min(res, max), min);\n};\n\nexport const stepDown = (value: number | null,\n                         max: number,\n                         min: number,\n                         step: number\n): number | null => {\n    let res;\n\n    if (value === null) {\n        res = add(max, -step);\n\n        return res === null ? null : Math.max(res, min);\n    }\n\n    res = add(value, -step);\n\n    return res === null ? null : Math.min(Math.max(res, min), max);\n};\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","\nexport function isBoolean(val: any): val is boolean { return typeof val === 'boolean'; }\n\nexport function toBoolean(value: any): boolean {\n    return value != null && `${value}` !== 'false';\n}\n","import { NgModule, InjectionToken, Optional, Inject, isDevMode } from '@angular/core';\nimport { BidiModule } from '@ptsecurity/cdk/bidi';\n\n\n// Injection token that configures whether the Mosaic sanity checks are enabled.\nexport const MC_SANITY_CHECKS = new InjectionToken<boolean>('mc-sanity-checks', {\n    providedIn: 'root',\n    factory: MC_SANITY_CHECKS_FACTORY\n});\n\nexport function MC_SANITY_CHECKS_FACTORY(): boolean {\n    return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Mosaic\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., McTabsModule).\n */\n@NgModule({\n    imports: [ BidiModule ],\n    exports: [ BidiModule ]\n})\nexport class McCommonModule {\n    // Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n    private _hasDoneGlobalChecks = false;\n\n    // Reference to the global `document` object.\n    private _document = typeof document === 'object' && document ? document : null;\n\n    // Reference to the global 'window' object.\n    private _window = typeof window === 'object' && window ? window : null;\n\n    constructor(@Optional() @Inject(MC_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n        if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n            this._checkDoctypeIsDefined();\n            this._checkThemeIsPresent();\n            this._hasDoneGlobalChecks = true;\n        }\n    }\n\n    // Whether any sanity checks are enabled\n    private _areChecksEnabled(): boolean {\n        return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n    }\n\n    // Whether the code is running in tests.\n    private _isTestEnv() {\n        // tslint:disable-next-line\n        return this._window && (this._window['__karma__'] || this._window['jasmine']);\n    }\n\n    private _checkDoctypeIsDefined(): void {\n        if (this._document && !this._document.doctype) {\n            console.warn(\n                'Current document does not have a doctype. This may cause ' +\n                'some Mosaic components not to behave as expected.'\n            );\n        }\n    }\n\n    private _checkThemeIsPresent(): void {\n        if (this._document && typeof getComputedStyle === 'function') {\n            const testElement = this._document.createElement('div');\n\n            testElement.classList.add('mc-theme-loaded-marker');\n            this._document.body.appendChild(testElement);\n\n            const computedStyle = getComputedStyle(testElement);\n\n            // In some situations, the computed style of the test element can be null. For example in\n            // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n            // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n            if (computedStyle && computedStyle.display !== 'none') {\n                console.warn(\n                    'Could not find Mosaic core theme. Most Mosaic ' +\n                    'components may not work as expected. For more info refer ' +\n                    'to the theming guide: link there'\n                );\n            }\n\n            this._document.body.removeChild(testElement);\n        }\n    }\n}\n","import { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanDisable {\n    disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n    return class extends base {\n        get disabled() {\n            return this._disabled;\n        }\n\n        set disabled(value: any) {\n            this._disabled = coerceBooleanProperty(value);\n        }\n\n        private _disabled: boolean = false;\n\n        constructor(...args: any[]) {\n            // tslint:disable-next-line\n            super(...args);\n        }\n    };\n}\n","import { ElementRef } from '@angular/core';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanColor {\n    color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\nexport interface HasElementRef {\n    _elementRef: ElementRef;\n}\n\nexport enum ThemePalette {\n    Primary = 'primary',\n    Second = 'second',\n    Error = 'error',\n    Default = 'second',\n    Empty = ''\n}\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T,\n    defaultColor: ThemePalette = ThemePalette.Default\n): CanColorCtor & T {\n    return class extends base {\n\n        private _color: ThemePalette;\n\n        get color(): ThemePalette {\n            return this._color;\n        }\n\n        set color(value: ThemePalette) {\n            const colorPalette = value || defaultColor;\n\n            if (colorPalette !== this._color) {\n                if (this._color) {\n                    this._elementRef.nativeElement.classList.remove(`mc-${this._color}`);\n                }\n\n                if (colorPalette) {\n                    this._elementRef.nativeElement.classList.add(`mc-${colorPalette}`);\n                }\n\n                this._color = colorPalette;\n            }\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n\n            this.color = defaultColor;\n        }\n    };\n}\n\n","import { Constructor } from './constructor';\nimport { CanDisable } from './disabled';\n\n\nexport interface HasTabIndex {\n    tabIndex: number;\n}\n\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n// Mixin to augment a directive with a `tabIndex` property.\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0): HasTabIndexCtor & T {\n    return class extends base {\n        get tabIndex(): number {\n            return this.disabled ? -1 : this._tabIndex;\n        }\n\n        set tabIndex(value: number) {\n            this._tabIndex = value != null ? value : defaultTabIndex;\n        }\n\n        private _tabIndex: number = defaultTabIndex;\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n    };\n}\n","import { FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { Subject } from 'rxjs';\n\nimport { ErrorStateMatcher } from '../error/error-options';\n\nimport { Constructor } from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n\n    readonly stateChanges: Subject<void>;\n\n    errorState: boolean;\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState();\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n    parentFormGroup: FormGroupDirective;\n    parentForm: NgForm;\n    defaultErrorStateMatcher: ErrorStateMatcher;\n    ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T): CanUpdateErrorStateCtor & T {\n    return class extends base {\n        /** Whether the component is in an error state. */\n        errorState: boolean = false;\n\n        /**\n         * Stream that emits whenever the state of the input changes such that the wrapping\n         * `MatFormField` needs to run change detection.\n         */\n        readonly stateChanges = new Subject<void>();\n\n        errorStateMatcher: ErrorStateMatcher;\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n\n        updateErrorState() {\n            const oldState = this.errorState;\n            const parent = this.parentFormGroup || this.parentForm;\n            const matcher = this.errorStateMatcher || this.defaultErrorStateMatcher;\n            const control = this.ngControl ? this.ngControl.control as FormControl : null;\n            const newState = matcher.isErrorState(control, parent);\n\n            if (newState !== oldState) {\n                this.errorState = newState;\n                this.stateChanges.next();\n            }\n        }\n    };\n}\n","import {\n    AfterViewChecked,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { ENTER, SPACE } from '@ptsecurity/cdk/keycodes';\nimport { Subject } from 'rxjs';\n\nimport { McOptgroup } from './optgroup';\n\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet uniqueIdCounter = 0;\n\n/** Event object emitted by McOption when selected or deselected. */\nexport class McOptionSelectionChange {\n    constructor(public source: McOption, public isUserInput = false) {}\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\n// tslint:disable-next-line: naming-convention\nexport interface McOptionParentComponent {\n    multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MC_OPTION_PARENT_COMPONENT =\n    new InjectionToken<McOptionParentComponent>('MC_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mc-select>` element.\n */\n@Component({\n    selector: 'mc-option',\n    exportAs: 'mcOption',\n    host: {\n        '[attr.tabindex]': 'getTabIndex()',\n        class: 'mc-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-option-multiple]': 'multiple',\n        '[class.mc-active]': 'active',\n        '[class.mc-disabled]': 'disabled',\n        '[id]': 'id',\n\n        '(click)': 'selectViaInteraction()',\n        '(keydown)': 'handleKeydown($event)'\n    },\n    styleUrls: ['./option.css'],\n    templateUrl: './option.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McOption implements AfterViewChecked, OnDestroy {\n    /** The form value of the option. */\n    @Input() value: any;\n\n    /** Event emitted when the option is selected or deselected. */\n    // tslint:disable-next-line:no-output-on-prefix\n    @Output() readonly onSelectionChange = new EventEmitter<McOptionSelectionChange>();\n\n    /** Emits when the state of the option changes and any parents have to be notified. */\n    readonly stateChanges = new Subject<void>();\n\n    /**\n     * The displayed value of the option. It is necessary to show the selected option in the\n     * select's trigger.\n     */\n    get viewValue(): string {\n        // TODO(kara): Add input property alternative for node envs.\n        return (this.getHostElement().textContent || '').trim();\n    }\n\n    /** Whether the wrapping component is in multiple selection mode. */\n    get multiple() {\n        return this.parent && this.parent.multiple;\n    }\n\n    get id(): string {\n        return this._id;\n    }\n\n    private _id = `mc-option-${uniqueIdCounter++}`;\n\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    private _selected = false;\n\n    @Input()\n    get disabled() {\n        return (this.group && this.group.disabled) || this._disabled;\n    }\n\n    set disabled(value: any) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    private _disabled = false;\n\n    /**\n     * Whether or not the option is currently active and ready to be selected.\n     * An active option displays styles as if it is focused, but the\n     * focus is actually retained somewhere else. This comes in handy\n     * for components like autocomplete where focus must remain on the input.\n     */\n    get active(): boolean {\n        return this._active;\n    }\n\n    private _active = false;\n\n    private mostRecentViewValue = '';\n\n    constructor(\n        private readonly element: ElementRef,\n        private readonly changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_OPTION_PARENT_COMPONENT) private readonly parent: McOptionParentComponent,\n        @Optional() readonly group: McOptgroup\n    ) {}\n\n    ngAfterViewChecked() {\n        // Since parent components could be using the option's label to display the selected values\n        // (e.g. `mc-select`) and they don't have a way of knowing if the option's label has changed\n        // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n        // relatively cheap, however we still limit them only to selected options in order to avoid\n        // hitting the DOM too often.\n        if (this._selected) {\n            const viewValue = this.viewValue;\n\n            if (viewValue !== this.mostRecentViewValue) {\n                this.mostRecentViewValue = viewValue;\n                this.stateChanges.next();\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n    }\n\n    select(): void {\n        if (!this._selected) {\n            this._selected = true;\n\n            this.changeDetectorRef.markForCheck();\n            this.emitSelectionChangeEvent();\n        }\n    }\n\n    deselect(): void {\n        if (this._selected) {\n            this._selected = false;\n\n            this.changeDetectorRef.markForCheck();\n            this.emitSelectionChangeEvent();\n        }\n    }\n\n    focus(): void {\n        const element = this.getHostElement();\n\n        if (typeof element.focus === 'function') {\n            element.focus();\n        }\n    }\n\n    /**\n     * This method sets display styles on the option to make it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setActiveStyles(): void {\n        if (!this._active) {\n            this._active = true;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    /**\n     * This method removes display styles on the option that made it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setInactiveStyles(): void {\n        if (this._active) {\n            this._active = false;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel(): string {\n        return this.viewValue;\n    }\n\n    /** Ensures the option is selected when activated from the keyboard. */\n    handleKeydown(event: KeyboardEvent): void {\n        // tslint:disable-next-line\n        if (event.keyCode === ENTER || event.keyCode === SPACE) {\n            this.selectViaInteraction();\n\n            // Prevent the page from scrolling down and form submits.\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * `Selects the option while indicating the selection came from the user. Used to\n     * determine if the select's view -> model callback should be invoked.`\n     */\n    selectViaInteraction(): void {\n        if (!this.disabled) {\n            this._selected = this.multiple ? !this._selected : true;\n\n            this.changeDetectorRef.markForCheck();\n            this.emitSelectionChangeEvent(true);\n        }\n    }\n\n    getTabIndex(): string {\n        return this.disabled ? '-1' : '0';\n    }\n\n    getHostElement(): HTMLElement {\n        return this.element.nativeElement;\n    }\n\n    /** Emits the selection change event. */\n    private emitSelectionChangeEvent(isUserInput = false): void {\n        this.onSelectionChange.emit(new McOptionSelectionChange(this, isUserInput));\n    }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function countGroupLabelsBeforeOption(\n    optionIndex: number,\n    options: QueryList<McOption>,\n    optionGroups: QueryList<McOptgroup>\n): number {\n\n    if (optionGroups.length) {\n        const optionsArray = options.toArray();\n        const groups = optionGroups.toArray();\n\n        let groupCounter = 0;\n\n        for (let i = 0; i < optionIndex + 1; i++) {\n            if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n                groupCounter++;\n            }\n        }\n\n        return groupCounter;\n    }\n\n    return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function getOptionScrollPosition(\n    optionIndex: number,\n    optionHeight: number,\n    currentScrollPosition: number,\n    panelHeight: number\n): number {\n    const optionOffset = optionIndex * optionHeight;\n\n    if (optionOffset < currentScrollPosition) { return optionOffset; }\n\n    if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n        return Math.max(0, optionOffset - panelHeight + optionHeight);\n    }\n\n    return currentScrollPosition;\n}\n\n","import { ConnectionPositionPair } from '@ptsecurity/cdk/overlay';\n\n\nexport const POSITION_MAP: { [key: string]: ConnectionPositionPair } = {\n    top         : {\n        originX : 'center',\n        originY : 'top',\n        overlayX: 'center',\n        overlayY: 'bottom'\n    },\n    topCenter   : {\n        originX : 'center',\n        originY : 'top',\n        overlayX: 'center',\n        overlayY: 'bottom',\n        offsetX : undefined,\n        offsetY : undefined\n    },\n    topLeft     : {\n        originX : 'start',\n        originY : 'top',\n        overlayX: 'start',\n        overlayY: 'bottom',\n        offsetX : undefined,\n        offsetY : undefined\n    },\n    topRight    : {\n        originX : 'end',\n        originY : 'top',\n        overlayX: 'end',\n        overlayY: 'bottom',\n        offsetX : undefined,\n        offsetY : undefined\n    },\n    right       : {\n        originX : 'end',\n        originY : 'center',\n        overlayX: 'start',\n        overlayY: 'center'\n    },\n    rightTop    : {\n        originX : 'end',\n        originY : 'top',\n        overlayX: 'start',\n        overlayY: 'top',\n        offsetX : undefined,\n        offsetY : undefined\n    },\n    rightBottom : {\n        originX : 'end',\n        originY : 'bottom',\n        overlayX: 'start',\n        overlayY: 'bottom',\n        offsetX : undefined,\n        offsetY : undefined\n    },\n    bottom      : {\n        originX : 'center',\n        originY : 'bottom',\n        overlayX: 'center',\n        overlayY: 'top'\n    },\n    bottomCenter: {\n        originX : 'center',\n        originY : 'bottom',\n        overlayX: 'center',\n        overlayY: 'top'\n    },\n    bottomLeft  : {\n        originX : 'start',\n        originY : 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    bottomRight : {\n        originX : 'end',\n        originY : 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n    },\n    left        : {\n        originX : 'start',\n        originY : 'center',\n        overlayX: 'end',\n        overlayY: 'center'\n    },\n    leftTop     : {\n        originX : 'start',\n        originY : 'top',\n        overlayX: 'end',\n        overlayY: 'top'\n    },\n    leftBottom  : {\n        originX : 'start',\n        originY : 'bottom',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    }\n};\n\nexport const DEFAULT_4_POSITIONS = _objectValues([\n    POSITION_MAP.top, POSITION_MAP.right, POSITION_MAP.bottom, POSITION_MAP.left\n]);\n\nfunction arrayMap<T, S>(array: T[], iteratee: (item: T, index: number, arr: T[]) => S): S[] {\n    let index = -1;\n    const length = array == null ? 0 : array.length;\n    const result = Array(length);\n\n    while (++index < length) {\n        result[ index ] = iteratee(array[ index ], index, array);\n    }\n\n    return result;\n}\nfunction baseValues<T>(object: { [key: string]: T } | T[], props: string[]): T[] {\n    return arrayMap(props,  (key) => {\n        return object[ key ];\n    });\n}\nfunction _objectValues<T>(object: { [key: string]: T } | T[]): T[] {\n    return object == null ? [] : baseValues(object, Object.keys(object));\n}\n","/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMcSelectDynamicMultipleError(): Error {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMcSelectNonArrayValueError(): Error {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMcSelectNonFunctionValueError(): Error {\n    return Error('`compareWith` must be a function.');\n}\n","export function getMcFormFieldMissingControlError(): Error {\n  return Error('mc-form-field must contain a McFormFieldControl.');\n}\n","export function getMcInputUnsupportedTypeError(inputType: string): Error {\n    return Error(`Input type \"${inputType}\" isn't supported by mcInput.`);\n}\n","/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n    return Error(\n        `McDatepicker: No provider found for ${provider}. You must import one of the existing ` +\n        `modules at your application root or provide a custom implementation or use exists ones.`);\n}\n","export function throwMcDropdownMissingError() {\n    throw Error(`mcDropdownTriggerFor: must pass in an mc-dropdown instance.\n    Example:\n      <mc-dropdown #dropdown=\"mcDropdown\"></mc-dropdown>\n      <button [mcDropdownTriggerFor]=\"dropdown\"></button>`);\n}\n\n/**\n * Throws an exception for the case when dropdown's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMcDropdownInvalidPositionX() {\n    throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mc-dropdown xPosition=\"before\" #dropdown=\"mcDropdown\"></mc-dropdown>`);\n}\n\n/**\n * Throws an exception for the case when dropdown's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMcDropdownInvalidPositionY() {\n    throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mc-dropdown yPosition=\"above\" #dropdown=\"mcDropdown\"></mc-dropdown>`);\n}\n","import { NgModule, Directive, ElementRef, QueryList } from '@angular/core';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(McLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n    selector: '[mc-line], [mcLine]',\n    host: { class: 'mc-line' }\n})\nexport class McLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class McLineSetter {\n    constructor(private _lines: QueryList<McLine>, private _element: ElementRef) {\n        this._setLineClass(this._lines.length);\n\n        this._lines.changes.subscribe(() => {\n            this._setLineClass(this._lines.length);\n        });\n    }\n\n    private _setLineClass(count: number): void {\n        this._resetClasses();\n        if (count === 2 || count === 3) {\n            this._setClass(`mc-${count}-line`, true);\n        } else if (count > 3) {\n            this._setClass(`mc-multi-line`, true);\n        }\n    }\n\n    private _resetClasses(): void {\n        this._setClass('mc-2-line', false);\n        this._setClass('mc-3-line', false);\n        this._setClass('mc-multi-line', false);\n    }\n\n    private _setClass(className: string, isAdd: boolean): void {\n        if (isAdd) {\n            this._element.nativeElement.classList.add(className);\n        } else {\n            this._element.nativeElement.classList.remove(className);\n        }\n    }\n}\n\n@NgModule({\n    imports: [],\n    exports: [McLine],\n    declarations: [McLine]\n})\nexport class McLineModule {}\n","import { Injectable } from '@angular/core';\nimport { FormGroupDirective, NgForm, FormControl } from '@angular/forms';\n\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n    }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({ providedIn: 'root' })\nexport class ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n    }\n}\n","import { Component, ViewEncapsulation, Input, ChangeDetectionStrategy } from '@angular/core';\n\n\nexport type McPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mc-primary .mc-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mc-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'mc-pseudo-checkbox',\n    styleUrls: ['pseudo-checkbox.css'],\n    templateUrl: 'pseudo-checkbox.partial.html',\n    host: {\n        class: 'mc-pseudo-checkbox',\n        '[class.mc-indeterminate]': 'state === \"indeterminate\"',\n        '[class.mc-checked]': 'state === \"checked\"',\n        '[class.mc-disabled]': 'disabled'\n    }\n})\nexport class McPseudoCheckbox {\n    @Input() state: McPseudoCheckboxState = 'unchecked';\n\n    @Input() disabled: boolean = false;\n}\n","import { NgModule } from '@angular/core';\n\nimport { McPseudoCheckbox } from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n    exports: [McPseudoCheckbox],\n    declarations: [McPseudoCheckbox]\n})\nexport class McPseudoCheckboxModule {}\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class McMeasureScrollbarService {\n\n    get scrollBarWidth(): number {\n        if (this._scrollbarWidth) {\n            return this._scrollbarWidth;\n        }\n        this.initScrollBarWidth();\n\n        return this._scrollbarWidth;\n    }\n\n    private _scrollbarWidth: number;\n    private scrollbarMeasure = {\n        position: 'absolute',\n        top: '-9999px',\n        width: '50px',\n        height: '50px',\n        overflow: 'scroll'\n    };\n\n    constructor(\n        @Inject(DOCUMENT) private document: any\n    ) {\n        this.initScrollBarWidth();\n    }\n\n    initScrollBarWidth() {\n        const scrollDiv = this.document.createElement('div');\n\n        // tslint:disable-next-line\n        for (const scrollProp in this.scrollbarMeasure) {\n            if (this.scrollbarMeasure.hasOwnProperty(scrollProp)) {\n                scrollDiv.style[scrollProp] = this.scrollbarMeasure[scrollProp];\n            }\n        }\n\n        this.document.body.appendChild(scrollDiv);\n\n        const width = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n\n        this.document.body.removeChild(scrollDiv);\n        this._scrollbarWidth = width;\n    }\n}\n","import { Component, ViewEncapsulation, Input, ChangeDetectionStrategy } from '@angular/core';\n\nimport { mixinDisabled, CanDisable, CanDisableCtor } from '../common-behaviors/index';\n\n\n// Boilerplate for applying mixins to McOptgroup.\n/** @docs-private */\nexport class McOptgroupBase {}\n\nexport const McOptgroupMixinBase: CanDisableCtor & typeof McOptgroupBase = mixinDisabled(McOptgroupBase);\n\n// Counter for unique group ids.\nlet uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mc-option`.\n */\n@Component({\n    selector: 'mc-optgroup',\n    exportAs: 'mcOptgroup',\n    templateUrl: 'optgroup.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['disabled'],\n    styleUrls: ['optgroup.css'],\n    host: {\n        class: 'mc-optgroup',\n        role: 'group',\n        '[class.mc-optgroup-disabled]': 'disabled',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-labelledby]': 'labelId'\n    }\n})\nexport class McOptgroup extends McOptgroupMixinBase implements CanDisable {\n    /** Label for the option group. */\n    @Input() label: string;\n\n    /** Unique id for the underlying label. */\n    labelId: string = `mc-optgroup-label-${uniqueOptgroupIdCounter++}`;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McPseudoCheckboxModule } from '../selection/index';\n\nimport { McOptgroup } from './optgroup';\nimport { McOption } from './option';\n\n\n@NgModule({\n    imports: [CommonModule, McPseudoCheckboxModule],\n    exports: [McOption, McOptgroup],\n    declarations: [McOption, McOptgroup]\n})\nexport class McOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","import { InjectionToken } from '@angular/core';\n\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MC_LABEL_GLOBAL_OPTIONS =\n    new InjectionToken<LabelOptions>('mc-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n    /**\n     * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n     * Default behavior is assumed to be `auto`.\n     */\n    float?: FloatLabelType;\n}\n","import {\n    animate,\n    state,\n    style,\n    transition,\n    trigger,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n\nexport const fadeAnimation: AnimationTriggerMetadata =  trigger('fadeAnimation', [\n    state('void', style({ opacity: 0 })),\n    state('true', style({ opacity: 1 })),\n    state('false', style({ opacity: 0 })),\n    transition('* => true', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => void', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)'))\n]);\n","export enum AnimationCurves {\n    StandardCurve = 'cubic-bezier(0.4,0.0,0.2,1)',\n    DecelerationCurve = 'cubic-bezier(0.0,0.0,0.2,1)',\n    AccelerationCurve = 'cubic-bezier(0.4,0.0,1,1)',\n    SharpCurve = 'cubic-bezier(0.4,0.0,0.6,1)'\n}\n","import {\n    animate,\n    AnimationTriggerMetadata,\n    state,\n    style,\n    transition,\n    trigger,\n    query,\n    animateChild,\n    group\n} from '@angular/animations';\n\n\n/**\n * The following are all the animations for the mc-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mc-select animation.\n */\nexport const mcSelectAnimations: {\n    readonly transformPanel: AnimationTriggerMetadata;\n    readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0)',\n            minWidth: '100%',\n            opacity: 0\n        })),\n        transition('void => *', group([\n            query('@fadeInContent', animateChild()),\n            animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n        ])),\n        transition('* => void', [\n            animate('250ms 100ms linear', style({ opacity: 0 }))\n        ])\n    ]),\n\n    /**\n     * This animation fades in the background color and text content of the\n     * select's options. It is time delayed to occur 100ms after the overlay\n     * panel has transformed in.\n     */\n    fadeInContent: trigger('fadeInContent', [\n        state('showing', style({ opacity: 1 })),\n        transition('void => showing', [\n            style({ opacity: 0 }),\n            animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformPanel = mcSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInContent = mcSelectAnimations.fadeInContent;\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    OnDestroy,\n    ViewEncapsulation\n} from '@angular/core';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { mixinColor, mixinDisabled, CanColor, CanDisable, CanDisableCtor, CanColorCtor } from '@ptsecurity/mosaic/core';\n\n\n@Directive({\n    selector: 'button[mc-button], a[mc-button]',\n    host: {\n        '[class.mc-button]': '!isIconButton',\n        '[class.mc-icon-button]': 'isIconButton'\n    }\n})\nexport class McButtonCssStyler {\n    nativeElement: Element;\n\n    get isIconButton(): boolean {\n        return this.icons.length > 0;\n    }\n\n    private icons: HTMLElement[] = [];\n\n    constructor(elementRef: ElementRef) {\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        /**\n         * Here we had to use native selectors due to number of angular issues about ContentChildren limitations\n         * https://github.com/angular/angular/issues/16299\n         * https://github.com/angular/angular/issues/8563\n         * https://github.com/angular/angular/issues/14769\n         */\n        this.icons = Array.from(this.nativeElement.querySelectorAll('.mc-icon'));\n        this.addClassModificatorForIcons();\n    }\n\n    private addClassModificatorForIcons() {\n        const twoIcons = 2;\n\n        if (this.icons.length === 1) {\n            const iconElement = this.icons[0];\n            const COMMENT_NODE = 8;\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling && iconElement.nextSibling.nodeType !== COMMENT_NODE) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-icon-button_left');\n                }\n\n                if (iconElement.previousSibling && iconElement.previousSibling.nodeType !== COMMENT_NODE) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-icon-button_right');\n                }\n            }\n        } else if (this.icons.length === twoIcons) {\n            const firstIconElement = this.icons[0];\n            const secondIconElement = this.icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n}\n\nexport class McButtonBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {}\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McButtonMixinBase:\n    CanDisableCtor &\n    CanColorCtor &\n    typeof McButtonBase =\n        mixinColor(mixinDisabled(McButtonBase));\n\n\n@Component({\n    selector: 'button[mc-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[disabled]': 'disabled || null'\n    }\n})\nexport class McButton extends McButtonMixinBase implements OnDestroy, CanDisable, CanColor {\n    constructor(elementRef: ElementRef, private _focusMonitor: FocusMonitor) {\n        super(elementRef);\n\n        this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this.getHostElement().focus();\n    }\n\n    getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n\n\n@Component({\n    selector: 'a[mc-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[attr.tabindex]': 'disabled ? -1 : 0',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': 'haltDisabledEvents($event)'\n    }\n})\nexport class McAnchor extends McButton {\n    constructor(focusMonitor: FocusMonitor, elementRef: ElementRef) {\n        super(elementRef, focusMonitor);\n    }\n\n    haltDisabledEvents(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McButton,\n    McAnchor,\n    McButtonCssStyler\n} from './button.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McButton,\n        McAnchor,\n        McButtonCssStyler\n    ],\n    declarations: [\n        McButton,\n        McAnchor,\n        McButtonCssStyler\n    ]\n})\nexport class McButtonModule {}\n"],"names":["providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","McToggleComponent","multi","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","inputs","host","class","[id]","[attr.id]","[class.mc-disabled]","[class.mc-toggle_off]","animations","trigger","state","style","left","transition","animate","type","ElementRef","FocusMonitor","ChangeDetectorRef","String","decorators","Attribute","args","_inputElement","ViewChild","labelPosition","Input","ariaLabel","ariaLabelledby","id","name","value","disabled","checked","change","Output","_McToggleMixinBase","McToggleModule","NgModule","imports","CommonModule","A11yModule","McCommonModule","exports","declarations","McTooltipComponent","cdr","this","prefix","positions","DEFAULT_4_POSITIONS","slice","classMap","mcVisibleChange","EventEmitter","mcMouseEnterDelay","mcMouseLeaveDelay","_mcTrigger","_mcPlacement","_mcVisible","BehaviorSubject","onHideSubject","Subject","closeOnInteraction","availablePositions","POSITION_MAP","$visible","asObservable","Object","defineProperty","prototype","_mcTitle","isTitleString","TemplateRef","unshift","mcPlacement","visible","coerceBooleanProperty","next","emit","show","_this","hideTid","clearTimeout","isContentEmpty","mcTrigger","showTid","setTimeout","mcVisible","markForCheck","hide","setClassMap","mcTitle","afterHidden","handleBodyInteraction","Component","selector","outputs","fadeAnimation","template","preserveWhitespaces","styles","(body:click)","MC_TOOLTIP_SCROLL_STRATEGY","InjectionToken","MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","Overlay","useFactory","mcTooltipScrollStrategyFactory","McTooltip","overlay","elementRef","ngZone","scrollDispatcher","hostView","scrollStrategy","direction","isTooltipOpen","isDynamicTooltip","parentDisabled","$unsubscribe","_disabled","manualListeners","Map","destroyed","title","updateCompValue","_mcMouseEnterDelay","_mcMouseLeaveDelay","_mcTooltipClass","tooltip","externalValue","createOverlay","overlayRef","strategy","position","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withPositions","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","pipe","takeUntil","subscribe","onPositionChange","scrollableViewProperties","isOverlayClipped","run","create","positionStrategy","panelClass","updatePosition","detachments","detach","hasAttached","$event","updatedPlacement","keys","some","key","connectionPair","originX","originY","overlayX","overlayY","handlePositioningUpdate","pos","overlayElement","clientHeight","element","nativeElement","currentContainer","top","parseInt","split","ngOnInit","initElementRefListeners","ngOnDestroy","dispose","forEach","listener","event","removeEventListener","clear","complete","handleKeydown","e","keyCode","ESCAPE","handleTouchend","set","addEventListener","portal","ComponentPortal","attach","instance","property","distinctUntilChanged","data","getConfig","origin","getOrigin","getOverlayPosition","tslib_1.__assign","main","fallback","originPosition","isLtr","getMcTooltipInvalidPositionError","_a","invertPosition","x","y","overlayPosition","newX","newY","Directive","exportAs","(keydown)","(touchend)","NgZone","ScrollDispatcher","ViewContainerRef","undefined","Inject","Directionality","Optional","setTitle","mcTooltipClass","isOpen","HostBinding","isParentDisabled","McToolTipModule","OverlayModule","entryComponents","VERSION","Version","SELECT_PANEL_PADDING_X","dirtyCheckNativeValue","McTimepicker","focus","focusChanged","isFocused","focused","onTouched","stateChanges","onBlur","applyInputChanges","onPaste","preventDefault","clipboardUserInput","clipboardData","getData","getDateFromTimeString","onInput","initialCursorStart","selectionStart","initialCursorEnd","selectionEnd","isAutocompleteTriggered","getParsedTimeParts","hoursOnly","hoursAndMinutes","hoursAndMinutesAndSeconds","length","doTimestringReformat","ngControl","errors","createSelectionOfTimeComponentInInput","isBadInput","onContainerClick","writeValue","renderer","setProperty","getTimeStringFromDate","timeFormat","onChange","onKeyDown","getKeyCode","upDownTimeByArrowKeys","switchSelectionBetweenTimeparts","registerOnChange","fn","registerOnTouched","newValue","previousNativeValue","validity","badInput","applyParams","changedTime","timeToApply","currentDateTimeInput","updateValueAndValidity","result","cursorPos","modifiedTimePart","getTimeEditMetrics","incrementTime","decrementTime","getCursorPositionOfPrevTimePartStart","getCursorPositionOfNextTimePartStart","code","newEditParams","cursorStartPosition","cursorEndPosition","dateVal","whatToIncrement","TimeParts","seconds","getTimeDigitsFromDate","hours","minutes","getDateFromTimeDigits","whatToDecrement","timeString","timeDevider","nextDividerPos","indexOf","cursorPosition","minutesIndex","hoursIndex","secondsIndex","tempVal","DEFAULT_TIME_FORMAT","getNumberWithLeadingZero","getHours","getMinutes","getSeconds","TimeFormats","HHmm","HHmmss","match","HOURS_MINUTES_SECONDS_REGEXP","HOURS_MINUTES_REGEXP","HOURS_ONLY_REGEXP","trim","Number","resultDate","Date","isNaN","getTime","digit","parseValidator","mcTimepickerParse","text","minTimeValidator","minDateTime","isTimeLowerThenMin","mcTimepickerLowerThenMintime","maxTimeValidator","maxDateTime","isTimeGreaterThenMax","mcTimepickerHigherThenMaxtime","timeToCompare","[attr.placeholder]","[disabled]","[required]","[attr.time-format]","[attr.min-time]","[attr.max-time]","[attr.value]","[attr.aria-invalid]","(blur)","(focus)","(input)","(paste)","NG_VALIDATORS","useValue","ɵ1","McFormFieldControl","NgControl","Self","NgForm","FormGroupDirective","ErrorStateMatcher","MC_INPUT_VALUE_ACCESSOR","Renderer2","errorStateMatcher","placeholder","required","minTime","maxTime","McTimepickerMixinBase","McTimepickerModule","PlatformModule","FormsModule","MC_SIDEPANEL_DATA","Right","Left","Top","Bottom","McSidepanelConfig","McSidepanelPosition","hasBackdrop","requiredBackdrop","disableClose","overlayPanelClass","Void","Visible","Hidden","mcSidepanelTransformAnimation","right","in","out","bottom","mcSidepanelAnimations","sidepanelState","transform","params","transformIn","transformOut","AnimationCurves","AccelerationCurve","DecelerationCurve","MC_SIDEPANEL_WITH_INDENT","MC_SIDEPANEL_WITH_SHADOW","McSidepanelContainerComponent","_super","changeDetectorRef","sidepanelConfig","withIndent","withShadow","call","animationState","McSidepanelAnimationState","animationStateChanged","tslib_1.__extends","attachComponentPortal","validatePortalAttached","setAnimation","setPanelClass","portalOutlet","attachTemplatePortal","enter","detectChanges","exit","onAnimation","animationTransform","classList","add","Error","tabindex","role","aria-modal","[@state]","(@state.start)","(@state.done)","Boolean","CdkPortalOutlet","BasePortalOutlet","uniqueId","McSidepanelRef","containerInstance","config","afterClosed$","afterOpened$","filter","phaseName","toState","take","merge","backdropClick","keydownEvents","close","closed","detachBackdrop","afterClosed","afterOpened","MC_SIDEPANEL_DEFAULT_OPTIONS","McSidepanelService","injector","defaultOptions","parentSidepanelService","openedSidepanelsAtThisLevel","openedSidepanels","closeSidepanels","open","componentOrTemplateRef","fullConfig","getSidepanelById","container","attachContainer","ref","TemplatePortal","$implicit","sidepanelRef","createInjector","contentRef","push","removeOpenSidepanel","closeAll","find","sidepanel","openedSidepanelsWithSamePosition","getOpenedSidepanelsWithSamePosition","PortalInjector","WeakMap","containerPortal","sidepanelContainer","injectionTokens","overlayConfig","OverlayConfig","backdropClass","getBackdropClass","maxWidth","scrollStrategies","block","global","sidepanels","reverse","hasOpenedSidepanelWithBackdrop","index","splice","Injectable","Injector","SkipSelf","McSidepanelClose","sidepanelService","getClosestSidepanel","ngOnChanges","changes","proxiedChange","mcSidepanelClose","sidepanelResult","currentValue","(click)","McSidepanelHeader","closeable","McSidepanelBody","McSidepanelFooter","McSidepanelActions","McSidepanelModule","PortalModule","McIconModule","McSplitterComponent","areas","_gutterSize","isDragging","areaPositionDivider","listeners","_direction","gutterSize","size","coerceNumberProperty","addArea","area","order","getSize","setOrder","initialSize","setStyle","isVertical","onMouseDown","leftAreaIndex","rightAreaIndex","leftArea","rightArea","startPoint","screenX","screenY","item","disableFlex","setSize","runOutsideAngular","listen","onMouseUp","onMouseMove","removeArea","indexToRemove","endPoint","offset","newLeftAreaSize","newRightAreaSize","minLeftAreaSize","getMinSize","minRightAreaSize","rightAreaOffset","unsubscribe","pop","McGutterDirective","_order","_size","getCursor","getState","coerceCssPixelValue","setAttr","attribute","setAttribute","McSplitterAreaDirective","splitter","removeStyle","sz","getSizeProperty","getOffsetSizeProperty","getComputedStyle","parseFloat","getMinSizeProperty","McSplitterModule","nextUniqueId","McToggleBase","_elementRef","mixinTabIndex","mixinColor","mixinDisabled","ThemePalette","Primary","McToggleChange","_focusMonitor","_changeDetectorRef","tabIndex","_uniqueId","_checked","_onTouchedCallback","_onChangeCallback","_","monitor","stopMonitoring","focusVia","_getAriaChecked","_onInteractionEvent","stopPropagation","_onLabelTextChange","_onInputClick","_updateModelValue","_emitChangeEvent","setDisabledState","isDisabled","source","McFormField","MC_SELECT_SCROLL_STRATEGY","panel","overlayDir","CdkConnectedOverlay","tags","ViewChildren","McTag","customTrigger","ContentChild","McSelectTrigger","options","ContentChildren","McOption","descendants","optionGroups","McOptgroup","sortComparator","openedChange","openedStream","closedStream","selectionChange","valueChange","multiple","compareWith","McSelect","McSelectMixinBase","McSelectModule","McOptionModule","McTagsModule","McFormFieldModule","MC_SELECT_SCROLL_STRATEGY_PROVIDER","McTreeSelectChange","isUserInput","McTreeSelectTrigger","McTreeSelectBase","defaultErrorStateMatcher","parentForm","parentFormGroup","McTreeSelectMixinBase","mixinErrorState","McTreeSelect","viewportRuler","dir","parentFormField","scrollStrategyFactory","controlType","hiddenItems","oneMoreText","triggerFontSize","optionIds","transformOrigin","panelDoneAnimating","panelDoneAnimatingStream","offsetY","o","map","optionSelectionChanges","defer","apply","option","onSelectionChange","onStable","switchMap","_required","_multiple","_autoSelect","_focused","_panelOpen","scrollTop","uid","destroy","_compareWith","o1","o2","valueAccessor","_placeholder","selectionModel","getMcSelectDynamicMultipleError","getMcSelectNonFunctionValueError","initializeSelection","_value","_id","tree","panelOpen","offsetX","ngAfterContentInit","initKeyManager","SelectionModel","autoSelect","changed","added","select","removed","deselect","ngAfterViewInit","calculateHiddenItems","startWith","updateSelectedOptions","resetOptions","ngDoCheck","updateErrorState","toggle","triggerRect","getBoundingClientRect","calculateOverlayPosition","highlightCorrectOption","fontSize","setSelectionByValue","selected","empty","viewValue","selectedOptions","isRtl","isEmpty","handleOpenKeydown","handleClosedKeydown","onFadeInDone","onFocus","onAttached","positionChange","calculateOverlayOffsetX","getPanelTheme","color","calculateOverlayScroll","selectedIndex","scrollBuffer","maxScroll","itemHeight","getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","Math","min","max","onRemoveSelectedOption","selectedOption","visibleItems","totalItemsWidth","getTotalItemsWidthInMatcher","totalVisibleItemsWidth","tag","offsetTop","offsetHeight","width","itemsCounter","querySelector","matcherList","itemsCounterShowed","matcherListWidth","matcherWidth","triggerClone","cloneNode","remove","appendChild","querySelectorAll","isArrowKey","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","ENTER","SPACE","altKey","keyManager","onKeydown","originalOnKeyDown","HOME","END","setFirstItemActive","setLastItemActive","activeItem","A","ctrlKey","hasDeselectedOptions_1","previouslyFocusedIndex","activeItemIndex","shiftKey","selectViaInteraction","Promise","resolve","then","Array","isArray","getMcSelectNonArrayValueError","selectValue","sortValues","correspondingOption","setActiveItem","error","isDevMode","console","warn","tabOut","scrollActiveOptionIntoView","changedOrDestroyed","onSelect","setOptionIds","wasSelected","isSelected","propagateChanges","options_1","toArray","sort","a","b","fallbackValue","valueToEmit","join","activeOptionIndex","getOptionScrollPosition","getOptionIndex","reduce","current","items","getItemCount","panelHeight","scrollContainerHeight","selectedOptionOffset","calculateOverlayOffsetY","checkOverlayWithinViewport","overlayRect","viewportSize","getViewportSize","leftOverflow","rightOverflow","round","topSpaceAvailable","bottomSpaceAvailable","height","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","adjustPanelUp","adjustPanelDown","getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","optionHeightAdjustment","[attr.tabindex]","[class.mc-select-invalid]","[class.mc-select-required]","(window:resize)","mcSelectAnimations","transformPanel","fadeInContent","CdkTree","ViewportRuler","McTreeSelection","McTreeSelectModule","CdkTreeModule","McTreeModule","McPseudoCheckboxModule","MC_TEXTAREA_VALUE_ACCESSOR","McTextareaBase","McTextareaMixinBase","McTextarea","inputValueAccessor","canGrow","lineHeight","freeRowsHeight","minHeight","growObserver","fromEvent","growSubscription","grow","bind","paddingTop","paddingBottom","textarea","outerHeight","window","diff","scrollHeight","getGrowHeight","toString","[class.mc-textarea-resizable]","McTextareaModule","TIMEFORMAT_PLACEHOLDERS","RegExp","uniqueComponentIdSuffix","formValidators","formValidatorOnChangeRegistrators","validatorOnChange","c","validatorOnChangeHandler","get","McTimepickerBase","validate","__validatorOnChangeHandler","validator","registerOnValidatorChange","_minTime","_maxTime","noop","Validators","compose","_timeFormat","formatValue","timeFormatKey","minValue","maxValue","syncTagsDisabledState","McTagList","_selectable","tagListSelectable","userTabIndex","_tabIndex","FocusKeyManager","withVerticalOrientation","withHorizontalOrientation","resetTags","updateTabIndex","updateFocusForDestroyedTags","tagChanges","dropSubscriptions","registerInput","inputElement","tagInput","originatesFromTag","focusInput","keydown","target","BACKSPACE","isInputEmpty","contains","clearSelection","correspondingTag","blur","hasFocusedTag","markAsTouched","lastDestroyedTagIndex","newTagIndex","isValidIndex","nodeName","toLowerCase","skip","McTagListChange","listenToTagsFocus","listenToTagsSelection","listenToTagsRemoved","tagFocusSubscription","tagBlurSubscription","tagSelectionSubscription","tagRemoveSubscription","tagSelectionChanges","tagFocusChanges","tagIndex","updateActiveItem","tagBlurChanges","tagRemoveChanges","hasFocus","currentElement","parentElement","[class.mc-invalid]","[class.mc-required]","selectable","orientation","_McTagListMixinBase","McTagInput","separatorKeyCodes","tagEnd","_addOnBlur","_tagList","emittagEnd","addOnBlur","isSeparatorKey","input","hasModifierKey","separators","has","[attr.disabled]","MC_TAGS_DEFAULT_OPTIONS","tagList","ɵ0","McTagTrailingIcon","McTagAvatar","McTagRemove","McSelectChange","McSelectBase","_viewportRuler","_ngZone","_renderer","_dir","_parentFormField","_scrollStrategyFactory","_onChange","_onTouched","onRemoveMatcherItem","manager","ActiveDescendantKeyManager","withTypeAhead","labelCount","countGroupLabelsBeforeOption","first","group","MC_OPTION_PARENT_COMPONENT","tabLabelCount","labelWrappers","selectedIndexChanged","scrollToLabel","_selectedIndex","checkScrollingControls","scrollDistanceChanged","updateTabScrollPosition","McTabHeader","selectFocusedIndex","focusIndex","dirChange","observableOf","resize","realign","updatePagination","getLayoutDirection","withWrap","requestAnimationFrame","newFocusIndex","indexFocused","setTabFocus","onContentChanges","textContent","currentTextContent","zoneCallback","checkPaginationEnabled","tab","showPaginationControls","containerEl","tabListContainer","scrollLeft","scrollWidth","offsetWidth","scrollDistance","translateX","tabList","scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","getOffsetLeft","getOffsetWidth","beforeVisiblePos","afterVisiblePos","isEnabled","disableScrollBefore","disableScrollAfter","getMaxScrollDistance","[class.mc-tab-header__pagination-controls_enabled]","[class.mc-tab-header_rtl]","McTabLabelWrapper","McTabHeaderBase","McLightTabsCssStyler","McAlignTabsCenterCssStyler","McAlignTabsEndCssStyler","McStretchTabsCssStyler","nextId","McTabChangeEvent","MC_TABS_CONFIG","McTabGroupBase","mcTabGroupMixinBase","McTabGroup","lightTabs","defaultConfig","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","indexToSelect","tabBodyWrapperHeight","tabsSubscription","Subscription","EMPTY","tabLabelSubscription","_dynamicHeight","lightTab","groupId","animationDuration","ngAfterContentChecked","clampTabIndex","isFirstRun_1","createChangeEvent","tabs","isActive","subscribeToTabLabels","i","getTabLabelId","getTabContentId","setTabBodyWrapperHeight","tabHeight","wrapper","tabBodyWrapper","removeTabBodyWrapperHeight","handleClick","tabHeader","getTabIndex","[class.mc-tab-group_dynamic-height]","[class.mc-tab-group_inverted-header]","dynamicHeight","McTab","McTabNavBase","mcTabNavMixinBase","McTabNav","McTabLinkBase","mcTabLinkMixinBase","McTabLink","focusMonitor","[attr.aria-current]","[attr.aria-disabled]","[attr.tabIndex]","[class.mc-active]","active","McTabsModule","McTabLabel","McTabContent","McTabBody","McTabBodyPortal","McTagSelectionChange","TAG_ATTRIBUTE_NAMES","McTagBase","_McTagMixinBase","_selected","_removable","addHostClassName","coercedValue","dispatchSelectionChange","addClassModificatorForIcons","icons","contentChildren","iconElement","previousElementSibling","nextElementSibling","nextSibling","previousSibling","firstIconElement","secondIconElement","_i","TAG_ATTRIBUTE_NAMES_1","attr","hasAttribute","tagName","toggleSelected","removable","DELETE","[class.mc-tag-selected]","[class.mc-tag-with-avatar]","[class.mc-tag-with-trailing-icon]","[class.mc-tag-disabled]","McIcon","avatar","trailingIcon","removeIcon","parentTag","McTagListBase","McProgressSpinner","percentage","mode","_McProgressSpinnerMixinBase","McProgressSpinnerModule","McRadioChange","McRadioGroupBase","_McRadioGroupMixinBase","MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","McRadioGroup","_changeDetector","_name","_isInitialized","_labelPosition","controlValueAccessorChangeFn","updateRadioButtonNames","v","markRadiosForCheck","updateSelectedRadioFromValue","checkSelectedRadioButton","toBoolean","touch","emitChangeEvent","_radios","radio","isAlreadySelected","McRadioButton","McRadioButtonBase","_McRadioButtonMixinBase","radioGroup","_radioDispatcher","removeUniqueSelectionListener","newCheckedState","notify","newDisabledState","onInputClick","onInputChange","groupValueChanged","[class.mc-checked]","UniqueSelectionDispatcher","ariaDescribedby","McRadioModule","McTreeNodeDef","CdkTreeNodeDef","McTreeNodePadding","arguments","baseLeftPadding","_indent","iconWidth","withIcon","paddingIndent","nodeLevel","treeNode","treeControl","getLevel","level","leftPadding","isExpandable","setPadding","CdkTreeNodePadding","indent","McTreeNodeToggle","CdkTreeNodeToggle","MC_TREE_OPTION_PARENT_COMPONENT","McTreeOptionChange","uniqueIdCounter","McTreeOption","parent","_active","setSelected","setActiveStyles","setInactiveStyles","getHeight","clientRects","getClientRects","getHostElement","emitSelectionChangeEvent","setFocusedOption","[class.mc-selected]","CdkTreeNode","McTreeNavigationChange","McTreeSelectionChange","McTreeSelectionBase","differs","McTreeSelectionBaseMixin","noUnselect","navigationChange","rawValue","log","withShift","withCtrl","collapse","expand","toggleFocusedOption","PAGE_UP","setPreviousPageItemActive","PAGE_DOWN","setNextPageItemActive","updateScrollSize","withScrollSize","floor","previousIndex_1","previousActiveItemIndex","activeIndex_1","canDeselectLast","emitNavigationEvent","focusedIndex","focusedOption","renderNodeChanges","dataDiffer","viewContainer","parentData","nodeOutlet","arrayOfInstances","_embeddedViews","view","viewDef","def","nodes","node","nodeMatchedQueries","matchedQueryIds","nodeData","nodeIndex","reset","notifyOnChanges","IterableDiffers","CdkTreeNodeOutlet","MC_TREE_DIRECTIVES","McTreeFlattener","transformFunction","getChildren","flattenNode","resultNodes","parentMap","flatNode","children","child","childParentMap","flattenNodes","structuredData","expandFlattenedNodes","results","currentExpand","isExpanded","McTreeFlatDataSource","treeFlattener","initialData","flattenedData","expandedData","_data","dataNodes","connect","collectionViewer","viewChange","expansionModel","disconnect","DataSource","McTreeNestedDataSource","CdkPortal","ctorParameters","McTabBase","mcTabMixinBase","viewContainerRef","textLabel","contentPortal","hasOwnProperty","explicitContent","implicitContent","templateLabel","read","mcTabsAnimations","translateTab","onCentering","beforeCentering","afterLeavingCenter","onCentered","dirChangeSubscription","computePositionAnimationState","positionIndex","bodyPosition","computePositionFromOrigin","onTranslateTabStarted","isCentering","isCenterPosition","onTranslateTabComplete","fromState","portalHost","PortalHostDirective","content","componentFactoryResolver","centeringSub","leavingSub","ComponentFactoryResolver","McTabLabelWrapperBase","mcTabLabelWrapperMixinBase","offsetLeft","_scrollDistance","_mcCancelLoading","mcOnCancel","mcGetContainer","McModalComponent","_mcClosable","_mcMask","_mcMaskClosable","_mcOkLoading","mcAfterOpen","mcAfterClose","mcOkText","mcCancelText","isComponent","mcContent","createDynamicComponent","isModalButtons","mcFooter","formatModalButtons","HTMLElement","OverlayRef","modalControl","registerModal","handleVisibleStateChange","firstChange","contentComponentRef","bodyContainer","insert","autoFocusButtonOk","changeVisibleFromInside","triggerOk","onClickOkCancel","triggerCancel","getInstance","getContentComponentRef","getContentComponent","getElement","onClickMask","mcMask","mcMaskClosable","isModalType","mcModalType","onClickCloseBtn","ok","mcOnOk","cancel","loadingKey","caseClose_1","doClose","isPromise","handleThen","catch","isNonEmptyString","isTemplateRef","Type","animation","closeResult","changeBodyOverflow","animateTo","getButtonCallableProp","prop","onButtonClick","button","loading","changeAnimationState","maskAnimationClassMap","modalAnimationClassMap","_b","changeDetector","isVisible","updateTransformOrigin","buttons","autoLoading","component","factory","cfr","resolveComponentFactory","childInjector","McModalRef","parentInjector","mcComponentParams","assign","modalElement","modalContainer","lastPosition","ModalUtil","getLastClickPosition","plusNum","openModals","document","body","mcMeasureScrollbarService","scrollBarWidth","McMeasureScrollbarService","McModalControlService","DOCUMENT","mcZIndex","mcWidth","mcWrapClassName","mcClassName","mcStyle","mcCloseByESC","mcClosable","mcMaskStyle","mcBodyStyle","mcOkType","mcOkLoading","mcCancelLoading","CssUnitPipe","defaultUnit","formatted","Pipe","ModalBuilderForService","createModal","changeProps","destroyModal","modalRef","McModalService","afterAllClose","confirm","confirmType","success","simpleConfirm","delete","McModalModule","McButtonModule","MC_NAVBAR_CONTAINER","MC_NAVBAR_ITEM","MC_NAVBAR_BRAND","MC_NAVBAR_TITLE","McNavbarLogo","McNavbarBrand","McNavbarTitle","McNavbarItemBase","_McNavbarMixinBase","McNavbarItem","_platform","_cdRef","dropdownItems","isCollapsed","_subscription","encodeURI","dropdownContent","denyClickIfDisabled","_focusMonitor$","hasDropdownContent","listenClickOutside","startListenFocusDropdownItems","stopListenFocusDropdownItems","isActiveDropdownLink","link","isBrowser","location","href","handleClickByItem","toggleDropdown","isNavbarItem","handleClickByDropdownItem","forceCloseDropdown","_dropdownElements","el","events","eventListeners","stopImmediatePropagation","Platform","collapsedTitle","dropdownItemTmpl","McNavbarContainer","cssClasses","CollapsibleItem","_collapsed","processCollapsed","collapsed","updateCollapsedClass","CachedItemWidth","itemsForCollapse","_collapsedItemsWidth","calculateAndCacheCollapsedItemsWidth","updateTitle","acc","getTitle","computedTitle","getAttribute","decodeURI","innerText","removeAttribute","McNavbar","forceRecalculateItemsWidth","resizeDebounceInterval","firstLevelElement","secondLevelElements","resizeObserver","debounceTime","_resizeSubscription","updateCollapsed","_itemsWidths","calculateAndCacheItemsWidth","_totalItemsWidths","calculateAndCacheTotalItemsWidth","collapseDelta","maxAllowedWidth","itemsWidths","canCollapse","collapsedItemsWidth","getOuterElementWidth","getPropertyValue","allItemsSelector","allItems","from","getItemsForCollapse","McNavbarModule","idIterator","McProgressBarBase","_McProgressBarMixinBase","McProgressBar","McProgressBarModule","McProgressSpinnerBase","mcDropdownAnimations","transformDropdown","fadeInItems","MC_DROPDOWN_PANEL","McDropdown","MC_DROPDOWN_DEFAULT_OPTIONS","xPosition","yPosition","overlapTrigger","templateRef","McDropdownItem","lazyContent","McDropdownContent","MC_DROPDOWN_SCROLL_STRATEGY","MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER","MC_DROPDOWN_SCROLL_STRATEGY_FACTORY","McDropdownTrigger","_overlay","_element","_viewContainerRef","_scrollStrategy","_openedBy","dropdownOpened","dropdownClosed","_overlayRef","_opened","_closeSubscription","_hoverSubscription","dropdown","_check","_destroy","_cleanUpSubscriptions","_createOverlay","_setPosition","_portal","_closingActions","_init","_startAnimation","opened","_resetAnimation","_animationDone","_attached","_reset","_setIsOpened","focusFirstItem","throwMcDropdownMissingError","_getOverlayConfig","_subscribeToPositions","withLockedPosition","setPositionClasses","originFallbackX","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","backdrop","(touchstart)","McDropdownModule","McContentComponent","[class.mc-layout-content]","McFooterComponent","[class.mc-layout-footer]","McHeaderComponent","[class.mc-layout-header]","McLayoutComponent","hasSidebar","[class.mc-layout]","[class.mc-layout-has-sidebar]","McSidebarComponent","mcLayoutComponent","_mcWidth","mcCollapsedWidth","mcCollapsedChange","collapsible","mcCollapsed","[class.mc-layout-sidebar]","[class.mc-layout-sidebar-collapsed]","[style.flex]","[style.max-width.px]","[style.min-width.px]","[style.width.px]","Host","mcCollapsible","McLayoutModule","McListOption","listSelection","_hasFocus","checkboxPosition","_reportValueChange","wasSelected_1","_lineSetter","McLineSetter","_lines","_removeOptionFromList","getLabel","_text","_getHeight","_handleClick","_handleFocus","_handleBlur","_getHostElement","[class.mc-focused]","McListSelection","McLine","MC_SELECTION_LIST_VALUE_ACCESSOR","McListSelectionChange","McListSelectionBase","_McListSelectionMixinBase","horizontal","_modelChanges","_keyManager","_tempValues","_setOptionsFromValues","selectAll","deselectAll","_canDeselectLast","values","getSelectedOptionValues","_isValidIndex","listOption","optionIndex","_getOptionIndex","setPreviousItemActive","setNextItemActive","_onKeyDown","_getOptionByValue","[tabIndex]","McListBase","McList","McListSubheaderCssStyler","McListItemBase","McListItem","McListModule","McLineModule","McLinkBase","_McLinkBase","McLink","McLinkModule","parentService","rootOpenModals","rootAfterAllClose","rootRegisteredMetaMap","registeredMetaMap","hasRegistered","afterOpenSubscription","afterOpen","afterCloseSubscription","afterClose","removeOpenModal","listenDocumentClick","clientX","clientY","ModalUtil$1","clampedActiveDate","dateAdapter","clampDate","minDate","maxDate","McCalendar","_currentView","moveFocusOnNextTick","calendarHeaderPortal","headerComponent","McCalendarHeader","activeDate","startAt","today","startView","ngAfterViewChecked","focusActiveCell","intlChanges","dateFilter","getCurrentViewComponent","init","updateTodaysDate","currentView","monthView","yearView","multiYearView","dateSelected","date","sameDate","selectedChange","yearSelectedInMultiYearView","normalizedYear","yearSelected","monthSelectedInYearView","normalizedMonth","monthSelected","userSelected","userSelection","goToDateInView","getValidDateOrNull","obj","isDateInstance","isValid","McDatepickerIntl","DateAdapter","MC_DATE_FORMATS","dateClass","McMonthView","McYearView","McMultiYearView","mcDatepickerAnimations","opacity","fadeInCalendar","Element","matches","msMatchesSelector","datepickerUid","MC_DATEPICKER_SCROLL_STRATEGY","MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MC_DATEPICKER_SCROLL_STRATEGY_FACTORY","McDatepickerContentBase","McDatepickerContentMixinBase","McDatepickerContent","calendar","[@transformPanel]","McDatepicker","disabledChange","selectedChanged","validSelected","focusedElementBeforeOpen","inputSubscription","createMissingDateImplError","_startAt","datepickerInput","deserialize","_color","getThemePalette","popupRef","popupComponentRef","oldValue","selectYear","selectMonth","activeElement","openAsPopup","calendarPortal","isAttached","completeClose","createPopup","datepicker","setColor","createPopupPositionStrategy","calendarHeaderComponent","MC_DATEPICKER_VALUE_ACCESSOR","McDatepickerInput","MC_DATEPICKER_VALIDATORS","McDatepickerInputEvent","targetElement","dateFormats","formField","dateChange","dateInput","datepickerSubscription","localeSubscription","lastValueValid","cvaOnChange","mcDatepickerParse","minValidator","control","controlValue","compareDate","mcDatepickerMin","actual","maxValidator","mcDatepickerMax","filterValidator","mcDatepickerFilter","localeChanges","oldDate","_min","_max","isAltDownArrow","readOnly","parse","format","display","[attr.aria-haspopup]","[attr.aria-owns]","[attr.min]","[attr.max]","(change)","mcDatepicker","McDatepickerToggleIcon","McDatepickerToggle","intl","defaultTabIndex","parsedTabIndex","watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mc-datepicker-toggle_active]","[class.mc-warn]","customIcon","McDatepickerModule","McCalendarBody","McDivider","_vertical","_inset","[attr.aria-orientation]","[class.mc-divider-vertical]","[class.mc-divider-inset]","vertical","inset","McDividerModule","_template","_componentFactoryResolver","_appRef","_injector","_document","context","_outlet","DomPortalOutlet","createElement","insertBefore","outletElement","ApplicationRef","McDropdownItemBase","_McDropdownItemMixinBase","_parentDropdownPanel","addItem","removeItem","_getTabIndex","_checkDisabled","textNodeType","TEXT_NODE","output","childNodes","length_1","nodeType","query","providedIn","MC_DROPDOWN_DEFAULT_OPTIONS_FACTORY","_defaultOptions","_classList","_panelAnimationState","_xPosition","_yPosition","_items","_itemChanges","_tabSubscription","_overlapTrigger","_hasBackdrop","throwMcDropdownInvalidPositionX","throwMcDropdownInvalidPositionY","classes","className","_handleKeydown","setFocusOrigin","resetActiveItem","posX","posY","_onAnimationDone","_isAnimating","McInput","_focusChanged","_onInput","_isNeverEmpty","_isBadInput","_dirtyCheckNativeValue","_previousNativeValue","_validateType","MC_INPUT_INVALID_TYPES","_type","getMcInputUnsupportedTypeError","_neverEmptyInputTypes","_McInputMixinBase","McInputMono","MIN_VALIDATOR","MinValidator","_createValidator","_validator","MAX_VALIDATOR","MaxValidator","McInputModule","McNumberInput","calendarLabel","openCalendarLabel","prevMonthLabel","nextMonthLabel","prevYearLabel","nextYearLabel","prevMultiYearLabel","nextMultiYearLabel","switchToMonthViewLabel","switchToMultiYearViewLabel","McCalendarCell","displayValue","enabled","numCols","activeCell","cellAspectRatio","selectedValueChange","cellClicked","cell","columnChanges","rows","firstRowOffset","cellPadding","cellWidth","isActiveCell","rowIndex","colIndex","cellNumber","aria-readonly","label","todayValue","selectedValue","labelMinRequiredCells","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","concat","_activeDate","oldActiveDate","validDate","hasSameMonthAndYear","selectedDate","getDateInCurrentMonth","_minDate","_maxDate","selectedYear","getYear","selectedMonth","getMonth","createDate","handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","todayDate","monthLabel","getMonthNames","toLocaleUpperCase","substr","firstOfMonth","firstWeekOffset","getDayOfWeek","createWeekCells","mcCalendarBody","daysInMonth","dateNames","getDateNames","weeks","shouldEnableDate","dateA11yLabel","cellClasses","d1","d2","todayYear","activeYear","activeOffset","years","row","year","createCellForYear","onYearSelected","month","yearsPerPage","getActiveCell","yearName","getYearName","shouldEnableYear","firstOfYear","getMonthInCurrentYear","onMonthSelected","normalizedDate","todayMonth","yearLabel","monthNames","months","createCellForMonth","monthName","monthYearA11yLabel","newMonthName","shouldEnableMonth","isYearAndMonthAfterMaxDate","isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","monthYearLabel","multi-year","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","isSameView","nextEnabled","date1","date2","buttonToggles","McButtonToggle","McButtonToggleGroup","buttonToggleGroup","isSingleSelector","syncButtonToggle","isPrechecked","onToggleClick","newChecked","McButtonToggleChange","[class.mc-button-toggle-standalone]","[class.mc-button-toggle-checked]","mcButton","McButton","McButtonToggleModule","McCard","readonly","hostElement","onClick","[class.mc-card_readonly]","[class.mc-card_selected]","McCardModule","MC_CHECKBOX_CLICK_ACTION","MC_CHECKBOX_CONTROL_VALUE_ACCESSOR","McCheckbox","Init","Checked","Unchecked","Indeterminate","McCheckboxChange","McCheckboxBase","_McCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","_controlValueAccessorChangeFn","_indeterminate","focusOrigin","_onInputFocusChange","_transitionCheckState","indeterminate","newState","oldState","[class.mc-indeterminate]","[class.mc-checkbox-label-before]","MC_CHECKBOX_REQUIRED_VALIDATOR","McCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","McCheckboxModule","McIconCSSStyler","McIconBase","_McIconMixinBase","Empty","iconName","McCleaner","McFormFieldNumberControl","McHint","McPrefix","McStepper","stepUp","stepDown","onStepUp","onStepDown","McSuffix","McFormFieldBase","_McFormFieldMixinBase","_labelId","hovered","_validateControlChild","_control","_numberControl","hasStepper","_stepper","valueChanges","clearValue","hasCleaner","onHoverChanged","isHovered","step","getConnectedOverlayOrigin","connectionContainerRef","_shouldForward","getMcFormFieldMissingControlError","_hint","_suffix","_prefix","_cleaner","[class.mc-form-field_invalid]","[class.mc-form-field_has-prefix]","[class.mc-form-field_has-suffix]","[class.mc-form-field_has-cleaner]","[class.mc-form-field_has-stepper]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","(mouseenter)","(mouseleave)","McFormFieldWithoutBorders","res","BIG_STEP","SMALL_STEP","McInputBase","_model","bigStep","isDigit","Infinity","_host","self","getPrototypeOf","normalizeSplitter","minuses","NUMPAD_MINUS","DASH","FF_MINUS","serviceKeys","TAB","arrows","allowedKeys","isIEPeriod","isNotIEPeriod","metaKey","C","V","X","F1","F12","EDGE","TRIDENT","ZERO","NINE","NUMPAD_ZERO","NUMPAD_NINE","valueAsNumber","update","replace","isFloat","isInt","test","NgModel","_uid","t","getSupportedInputTypes","_inputValueAccessor","__extends","d","__","constructor","extendStatics","isBoolean","val","MC_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","Default","colorPalette","errorState","matcher","isErrorState","optionsArray","groups","groupCounter","optionHeight","currentScrollPosition","optionOffset","arrayMap","array","iteratee","baseValues","object","props","mcSelectScrollStrategyProviderFactory","reposition","inputType","sanitizeNumber","isFinite","getPrecision","arr","pow","value1","value2","precision","provider","openSidepanels","scrollThrottle","setPrototypeOf","__proto__","p","__assign","s","n","MC_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","computedStyle","removeChild","BidiModule","Second","_setLineClass","count","_resetClasses","_setClass","isAdd","ShowOnDirtyErrorStateMatcher","form","invalid","dirty","submitted","touched","McPseudoCheckbox","scrollbarMeasure","overflow","initScrollBarWidth","_scrollbarWidth","scrollDiv","scrollProp","clientWidth","McOptgroupBase","McOptgroupMixinBase","uniqueOptgroupIdCounter","labelId","[class.mc-optgroup-disabled]","[attr.aria-labelledby]","McOptionSelectionChange","mostRecentViewValue","[class.mc-option-multiple]","MC_LABEL_GLOBAL_OPTIONS","StandardCurve","SharpCurve","topCenter","topLeft","topRight","rightTop","rightBottom","bottomCenter","bottomLeft","bottomRight","leftTop","leftBottom","minWidth","animateChild","McButtonCssStyler","[class.mc-button]","[class.mc-icon-button]","McButtonBase","McButtonMixinBase","McAnchor","haltDisabledEvents","MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","[class.mc-button-toggle-vertical]"],"mappings":"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"}