{"version":3,"file":"mosaic.umd.min.js","sources":["../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/form-field/cleaner.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field.module.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input.module.ts","../../src/lib/progress-bar/progress-bar.component.ts","../../src/lib/progress-bar/progress-bar.module.ts","../../src/lib/progress-spinner/progress-spinner.component.ts","../../src/lib/progress-spinner/progress-spinner.module.ts","../../src/lib/navbar/navbar.component.ts","../../src/lib/navbar/navbar.module.ts","../../src/lib/version.ts","../../src/lib/radio/radio.component.ts","../../src/lib/radio/radio.module.ts","../../src/lib/list/list-selection.component.ts","../../src/lib/list/list.component.ts","../../src/lib/list/list.module.ts","../../src/lib/checkbox/checkbox-config.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/utils/utils.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/core/line/line.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/icon/icon.component.ts","../../src/lib/icon/icon.module.ts","../../src/lib/button/button.component.ts","../../src/lib/button/button.module.ts","../../src/lib/divider/divider.component.ts","../../src/lib/divider/divider.module.ts"],"sourcesContent":["import {\n    AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport {\n    CanColor,\n    CanDisable,\n    HasTabIndex,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\nimport { MC_CHECKBOX_CLICK_ACTION, McCheckboxClickAction } from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mc-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McCheckbox),\n    multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n    /** The initial state of the component before any user interaction. */\n    Init,\n    /** The state representing the component when it's becoming checked. */\n    Checked,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate\n}\n\n/** Change event object emitted by McCheckbox. */\nexport class McCheckboxChange {\n    /** The source McCheckbox of the event. */\n    source: McCheckbox;\n    /** The new `checked` value of the checkbox. */\n    checked: boolean;\n}\n\n// Boilerplate for applying mixins to McCheckbox.\n/** @docs-private */\nexport class McCheckboxBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\nexport const _McCheckboxMixinBase =\n    mixinTabIndex(mixinColor(mixinDisabled(McCheckboxBase)));\n\n\n/**\n * A mosaic checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A McCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n */\n@Component({\n    selector: 'mc-checkbox',\n    templateUrl: 'checkbox.html',\n    styleUrls: ['checkbox.css'],\n    exportAs: 'mcCheckbox',\n    host: {\n        class: 'mc-checkbox',\n        '[id]': 'id',\n        '[attr.id]': 'id',\n        '[class.mc-checkbox-indeterminate]': 'indeterminate',\n        '[class.mc-checkbox-checked]': 'checked',\n        '[class.mc-checkbox-disabled]': 'disabled',\n        '[class.mc-checkbox-label-before]': 'labelPosition == \"before\"'\n    },\n    providers: [MC_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCheckbox extends _McCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex {\n\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     */\n    @Input('aria-label') ariaLabel: string = '';\n\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n    private _uniqueId: string = `mc-checkbox-${++nextUniqueId}`;\n\n    /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n    @Input() id: string = this._uniqueId;\n\n    /** Returns the unique id for the visual hidden input. */\n    get inputId(): string {\n        return `${this.id || this._uniqueId}-input`;\n    }\n\n    /** Whether the checkbox is required. */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    private _required: boolean;\n\n    /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n    @Input() labelPosition: 'before' | 'after' = 'after';\n\n    /** Name value will be applied to the input element if present */\n    @Input() name: string | null = null;\n\n    /** Event emitted when the checkbox's `checked` value changes. */\n    @Output() readonly change: EventEmitter<McCheckboxChange> =\n        new EventEmitter<McCheckboxChange>();\n\n    /** Event emitted when the checkbox's `indeterminate` value changes. */\n    @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** The value attribute of the native input element */\n    @Input() value: string;\n\n    /** The native `<input type=\"checkbox\">` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * @docs-private\n     */\n    _onTouched: () => any = () => {\n    }\n\n    private _currentAnimationClass: string = '';\n\n    private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n    private _controlValueAccessorChangeFn: (value: any) => void = () => {\n    }\n\n    constructor(elementRef: ElementRef,\n                private _changeDetectorRef: ChangeDetectorRef,\n                private _focusMonitor: FocusMonitor,\n                @Attribute('tabindex') tabIndex: string,\n                @Optional() @Inject(MC_CHECKBOX_CLICK_ACTION)\n                private _clickAction: McCheckboxClickAction) {\n        super(elementRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._inputElement.nativeElement)\n            .subscribe((focusOrigin) => this._onInputFocusChange(focusOrigin));\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    }\n\n    /**\n     * Whether the checkbox is checked.\n     */\n    @Input()\n    get checked(): boolean {\n        return this._checked;\n    }\n\n    set checked(value: boolean) {\n        if (value != this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _checked: boolean = false;\n\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value != this.disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    @Input()\n    get indeterminate(): boolean {\n        return this._indeterminate;\n    }\n\n    set indeterminate(value: boolean) {\n        const changed = value != this._indeterminate;\n        this._indeterminate = value;\n\n        if (changed) {\n            if (this._indeterminate) {\n                this._transitionCheckState(TransitionCheckState.Indeterminate);\n            } else {\n                this._transitionCheckState(\n                    this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n    }\n\n    private _indeterminate: boolean = false;\n\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // This method is getting called whenever the label of the checkbox changes.\n        // Since the checkbox uses the OnPush strategy we need to notify it about the change\n        // that has been recognized by the cdkObserveContent directive.\n        this._changeDetectorRef.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any) {\n        this.checked = !!value;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this._onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n    }\n\n    _getAriaChecked(): 'true' | 'false' | 'mixed' {\n        return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n    }\n\n    private _transitionCheckState(newState: TransitionCheckState) {\n        const oldState = this._currentCheckState;\n        const element: HTMLElement = this._elementRef.nativeElement;\n\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n\n        this._currentCheckState = newState;\n\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n        }\n    }\n\n    private _emitChangeEvent() {\n        const event = new McCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    }\n\n    /** Function is called whenever the focus changes for the input element. */\n    private _onInputFocusChange(focusOrigin: FocusOrigin) {\n        if (focusOrigin) {\n            this._onTouched();\n        }\n    }\n\n    /** Toggles the `checked` state of the checkbox. */\n    toggle(): void {\n        this.checked = !this.checked;\n    }\n\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event\n     */\n    _onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && this._clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && this._clickAction !== 'check') {\n\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n\n            this.toggle();\n            this._transitionCheckState(\n                this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        } else if (!this.disabled && this._clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mc-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n\n    /** Focuses the checkbox. */\n    focus(): void {\n        this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n    }\n\n    _onInteractionEvent(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n}\n","import {\n    Directive,\n    forwardRef,\n    Provider\n} from '@angular/core';\nimport {\n    CheckboxRequiredValidator,\n    NG_VALIDATORS\n} from '@angular/forms';\n\n\nexport const MC_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McCheckboxRequiredValidator),\n    multi: true\n};\n\n/**\n * Validator for Mosaic checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mc-checkbox`.\n */\n@Directive({\n    selector: `mc-checkbox[required][formControlName],\n             mc-checkbox[required][formControl], mc-checkbox[required][ngModel]`,\n    providers: [MC_CHECKBOX_REQUIRED_VALIDATOR],\n    host: { '[attr.required]': 'required ? \"\" : null' }\n})\nexport class McCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McCheckbox } from './checkbox';\nimport { McCheckboxRequiredValidator } from './checkbox-required-validator';\n\n\n@NgModule({\n    imports: [CommonModule, McCommonModule],\n    exports: [McCheckbox, McCheckboxRequiredValidator, McCommonModule],\n    declarations: [McCheckbox, McCheckboxRequiredValidator]\n})\nexport class McCheckboxModule {\n}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-cleaner',\n    template: '<i mc-icon=\"mc-close-M_16\" class=\"mc-cleaner__icon\"></i>'\n})\nexport class McCleaner {\n}\n","import { NgControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\n\n/** An interface which allows a control to work inside of a `MсFormField`. */\nexport abstract class McFormFieldControl<T> {\n    /** The value of the control. */\n    value: T | null;\n\n    /**\n     * Stream that emits whenever the state of the control changes such that the parent `MсFormField`\n     * needs to run change detection.\n     */\n    readonly stateChanges: Observable<void>;\n\n    /** The element ID for this control. */\n    readonly id: string;\n\n    /** The placeholder for this control. */\n    readonly placeholder: string;\n\n    /** Gets the NgControl for this control. */\n    readonly ngControl: NgControl | null;\n\n    /** Whether the control is focused. */\n    readonly focused: boolean;\n\n    /** Whether the control is empty. */\n    readonly empty: boolean;\n\n    /** Whether the control is required. */\n    readonly required: boolean;\n\n    /** Whether the control is disabled. */\n    readonly disabled: boolean;\n\n    /** Whether the control is in an error state. */\n    readonly errorState: boolean;\n\n    /**\n     * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n     * based on their control type. The form field will add a class,\n     * `mat-form-field-type-{{controlType}}` to its root element.\n     */\n    readonly controlType?: string;\n\n    /** Handles a click on the control's container. */\n    abstract onContainerClick(event: MouseEvent): void;\n}\n","import { Directive, Input } from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n@Directive({\n    selector: 'mc-hint',\n    host: {\n        class: 'mc-hint',\n        '[attr.id]': 'id'\n    }\n})\nexport class McHint {\n    @Input() id: string = `mc-hint-${nextUniqueId++}`;\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcPrefix]'\n})\nexport class McPrefix {\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcSuffix]'\n})\nexport class McSuffix {\n}\n","import {\n    AfterContentChecked,\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren, Directive,\n    ElementRef,\n    QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { EMPTY, merge } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n\n\nimport { McCleaner } from './cleaner';\nimport { McFormFieldControl } from './form-field-control';\nimport { getMcFormFieldMissingControlError } from './form-field-errors';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McSuffix } from './suffix';\n\n\nexport class McFormFieldBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\n@Component({\n    selector: 'mc-form-field',\n    exportAs: 'mcFormField',\n    templateUrl: 'form-field.html',\n    // McInput is a directive and can't have styles, so we need to include its styles here.\n    // The McInput styles are fairly minimal so it shouldn't be a big deal for people who\n    // aren't using McInput.\n    styleUrls: [\n        'form-field.css',\n        '../input/input.css'\n    ],\n    host: {\n        class: 'mc-form-field',\n        '[class.mc-form-field_invalid]': '_control.errorState',\n        '[class.mc-form-field_disabled]': '_control.disabled',\n        '[class.mc-form-field_has-prefix]': 'hasPrefix',\n        '[class.mc-form-field_has-suffix]': 'hasSuffix',\n        '[class.mc-form-field_has-cleaner]': 'canShowCleaner',\n        '[class.mc-focused]': '_control.focused',\n        '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n        '[class.ng-touched]': '_shouldForward(\"touched\")',\n        '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n        '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n        '[class.ng-valid]': '_shouldForward(\"valid\")',\n        '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n        '[class.ng-pending]': '_shouldForward(\"pending\")'\n    },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class McFormField extends McFormFieldBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit {\n\n    @ContentChild(McFormFieldControl) _control: McFormFieldControl<any>;\n    @ContentChildren(McHint) _hint: QueryList<McHint>;\n    @ContentChildren(McSuffix) _suffix: QueryList<McSuffix>;\n    @ContentChildren(McPrefix) _prefix: QueryList<McPrefix>;\n    @ContentChildren(McCleaner) _cleaner: QueryList<McCleaner>;\n\n\n    constructor(\n        public _elementRef: ElementRef,\n        private _changeDetectorRef: ChangeDetectorRef) {\n        super(_elementRef);\n    }\n\n    ngAfterContentInit() {\n        this._validateControlChild();\n        if (this._control.controlType) {\n            this._elementRef.nativeElement.classList\n                .add(`mc-form-field-type-${this._control.controlType}`);\n        }\n\n        // Subscribe to changes in the child control state in order to update the form field UI.\n        this._control.stateChanges.pipe(startWith()).subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n        });\n\n        // Run change detection if the value changes.\n        const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n        merge(valueChanges)\n            .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    ngAfterContentChecked() {\n        this._validateControlChild();\n    }\n\n    ngAfterViewInit() {\n        // Avoid animations on load.\n        this._changeDetectorRef.detectChanges();\n    }\n\n    clearValue($event) {\n        $event.stopPropagation();\n\n        if (this._control && this._control.ngControl) {\n            this._control.ngControl.reset();\n        }\n    }\n\n    onContainerClick($event) {\n        return this._control.onContainerClick && this._control.onContainerClick($event);\n    }\n\n    /** Determines whether a class from the NgControl should be forwarded to the host element. */\n    _shouldForward(prop: string): boolean {\n        const ngControl = this._control ? this._control.ngControl : null;\n\n        return ngControl && ngControl[prop];\n    }\n\n    /** Throws an error if the form field's control is missing. */\n    protected _validateControlChild() {\n        if (!this._control) {\n            throw getMcFormFieldMissingControlError();\n        }\n    }\n\n    get hasHint() {\n        return this._hint && this._hint.length > 0;\n    }\n\n    get hasSuffix() {\n        return this._suffix && this._suffix.length > 0;\n    }\n\n    get hasPrefix() {\n        return this._prefix && this._prefix.length > 0;\n    }\n\n    get canShowCleaner() {\n        return this._cleaner && this._cleaner.length > 0 &&\n        this._control && this._control.ngControl\n            ? this._control.ngControl.value && !this._control.disabled\n            : false;\n    }\n}\n\n@Directive({\n    selector: 'mc-form-field[mcFormFieldWithoutBorders]',\n    exportAs: 'mcFormFieldWithoutBorders',\n    host: { class: 'mc-form-field_without-borders' }\n})\nexport class McFormFieldWithoutBorders {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McCleaner } from './cleaner';\nimport { McFormField, McFormFieldWithoutBorders } from './form-field';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McSuffix } from './suffix';\n\n\n@NgModule({\n    declarations: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner\n    ],\n    imports: [CommonModule, McIconModule],\n    exports: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner\n    ]\n})\nexport class McFormFieldModule {\n}\n","import { InjectionToken } from '@angular/core';\n\n\nexport const MC_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{ value: any }>('MC_INPUT_VALUE_ACCESSOR');\n","import {\n    Directive, DoCheck, ElementRef, Inject, Input, OnChanges,\n    OnDestroy, OnInit, Optional, Self\n} from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@ptsecurity/cdk/platform';\nimport { CanUpdateErrorState, ErrorStateMatcher, mixinErrorState } from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\n\nimport { getMcInputUnsupportedTypeError } from './input-errors';\nimport { MC_INPUT_VALUE_ACCESSOR } from './input-value-accessor';\n\n\nconst MC_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\n\nlet nextUniqueId = 0;\n\nexport class McInputBase {\n    constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n                public _parentForm: NgForm,\n                public _parentFormGroup: FormGroupDirective,\n                public ngControl: NgControl) {\n    }\n}\n\nexport const _McInputMixinBase = mixinErrorState(McInputBase);\n\n\n@Directive({\n    selector: `input[mcInput]`,\n    exportAs: 'mcInput',\n    host: {\n        'class': 'mc-input',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '(blur)': '_focusChanged(false)',\n        '(focus)': '_focusChanged(true)',\n        '(input)': '_onInput()'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McInput }]\n})\nexport class McInput extends _McInputMixinBase implements McFormFieldControl<any>, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-input';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this._uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    // tslint:disable no-reserved-keywords\n    /** Input type of the element. */\n    @Input()\n    get type(): string {\n        return this._type;\n    }\n\n    set type(value: string) {\n        this._type = value || 'text';\n        this._validateType();\n\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    // tslint:enable no-reserved-keywords\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this._inputValueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n\n    protected _uid = `mc-input-${nextUniqueId++}`;\n    protected _previousNativeValue: any;\n    protected _disabled = false;\n    protected _id: string;\n    protected _required = false;\n    protected _type = 'text';\n    protected _neverEmptyInputTypes = [\n        'date',\n        'datetime',\n        'datetime-local',\n        'month',\n        'time',\n        'week'\n    ].filter((t) => getSupportedInputTypes().has(t));\n\n    private _inputValueAccessor: { value: any };\n\n    constructor(protected _elementRef: ElementRef,\n                protected _platform: Platform,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() _parentForm: NgForm,\n                @Optional() _parentFormGroup: FormGroupDirective,\n                _defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_INPUT_VALUE_ACCESSOR) inputValueAccessor: any) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n        this._previousNativeValue = this.value;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n    }\n\n    /** Focuses the input. */\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Does some manual dirty checking on the native input `value` property. */\n    protected _dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Make sure the input is a supported type. */\n    protected _validateType() {\n        if (MC_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n            throw getMcInputUnsupportedTypeError(this._type);\n        }\n    }\n\n    /** Checks whether the input type is one of the types that are never empty. */\n    protected _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n\n    /** Checks whether the input is invalid based on the native validation. */\n    protected _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        const validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n\n        return validity && validity.badInput;\n    }\n}\n\n@Directive({\n    selector: 'input[mcInputMonospace]',\n    exportAs: 'McInputMonospace',\n    host: { class: 'mc-input_monospace' }\n})\nexport class McInputMono {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McInput, McInputMono } from './input';\n\n\n@NgModule({\n    imports: [ CommonModule, A11yModule, McCommonModule, FormsModule ],\n    exports: [ McInput, McInputMono ],\n    declarations: [ McInput, McInputMono ]\n})\nexport class McInputModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressBarMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressBarBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressBarMixinBase = mixinColor(McProgressBarBase);\n\n@Component({\n    selector: 'mc-progress-bar',\n    templateUrl: './progress-bar.component.html',\n    styleUrls: ['./progress-bar.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-bar',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressBar extends _McProgressBarMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-bar-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressBarMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McProgressBar\n} from './progress-bar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressBar\n    ],\n    declarations: [\n        McProgressBar\n    ]\n})\nexport class McProgressBarModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressSpinnerBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressPinnerMixinBase = mixinColor(McProgressSpinnerBase);\n\nconst MAX_DASH_ARRAY = 273;\n\n@Component({\n    selector: 'mc-progress-spinner',\n    templateUrl: './progress-spinner.component.html',\n    styleUrls: ['./progress-spinner.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-spinner',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressSpinner extends _McProgressPinnerMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-spinner-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressSpinnerMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n\n    get dashOffsetPercent(): string {\n        return `${MAX_DASH_ARRAY - this.percentage * MAX_DASH_ARRAY}%`;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McProgressSpinner } from './progress-spinner.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressSpinner\n    ],\n    declarations: [\n        McProgressSpinner\n    ]\n})\nexport class McProgressSpinnerModule {}\n","import { fromEvent } from 'rxjs';\nimport { Subscription } from 'rxjs/internal/Subscription';\nimport { debounceTime } from 'rxjs/operators';\n\nimport {\n    AfterViewInit,\n    Component, Directive,\n    ElementRef,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    ViewEncapsulation\n} from '@angular/core';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\n\nimport { CanDisable, mixinDisabled } from '@ptsecurity/mosaic/core';\n\n\nconst COLLAPSED_CLASS: string = 'mc-navbar-collapsed-title';\nconst MC_ICON = 'mc-icon';\nconst MC_NAVBAR = 'mc-navbar';\nconst MC_NAVBAR_CONTAINER = 'mc-navbar-container';\nconst MC_NAVBAR_ITEM = 'mc-navbar-item';\nconst MC_NAVBAR_BRAND = 'mc-navbar-brand';\nconst MC_NAVBAR_TITLE = 'mc-navbar-title';\nconst MC_NAVBAR_LOGO = 'mc-navbar-logo';\n\nexport type McNavbarContainerPositionType = 'left' | 'right';\n\n@Directive({\n    selector: MC_NAVBAR_LOGO,\n    host: {\n        class: MC_NAVBAR_LOGO\n    }\n})\nexport class McNavbarLogo {}\n\n@Directive({\n    selector: MC_NAVBAR_BRAND,\n    host: {\n        class: MC_NAVBAR_BRAND\n    }\n})\nexport class McNavbarBrand {}\n\n@Directive({\n    selector: MC_NAVBAR_TITLE,\n    host: {\n        class: MC_NAVBAR_TITLE\n    }\n})\nexport class McNavbarTitle {}\n\nexport class McNavbarItemBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McNavbarMixinBase = mixinDisabled(McNavbarItemBase);\n\n@Component({\n    selector: MC_NAVBAR_ITEM,\n    template: `\n        <a [attr.tabindex]=\"disabled ? -1 : tabIndex\" class=\"mc-navbar-item\">\n            <ng-content>\n            </ng-content>\n        </a>\n    `,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null'\n    }\n})\nexport class McNavbarItem extends _McNavbarMixinBase implements OnInit, OnDestroy, CanDisable {\n\n    @Input()\n    tabIndex: number = 0;\n\n    @Input()\n    set collapsedTitle(value: string) {\n        this.elementRef.nativeElement.setAttribute('computedTitle', encodeURI(value));\n    }\n\n    constructor(\n        public  elementRef: ElementRef,\n        private _focusMonitor: FocusMonitor\n    ) {\n        super(elementRef);\n    }\n\n    ngOnInit() {\n        this.denyClickIfDisabled();\n\n        this._focusMonitor.monitor(this.elementRef.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n    }\n\n    // This method is required due to angular 2 issue https://github.com/angular/angular/issues/11200\n    private denyClickIfDisabled() {\n        const events: Event[] = this.elementRef.nativeElement.eventListeners('click');\n\n        events.forEach((event) => this.elementRef.nativeElement.removeEventListener('click', event));\n\n        this.elementRef.nativeElement.addEventListener('click', (event: MouseEvent) => {\n            if (this.elementRef.nativeElement.hasAttribute('disabled')) {\n                event.stopImmediatePropagation();\n            }\n        }, true);\n\n        events.forEach((event) => this.elementRef.nativeElement.addEventListener('click', event));\n    }\n}\n\n@Directive({\n    selector: MC_NAVBAR_CONTAINER\n})\nexport class McNavbarContainer {\n    @Input()\n    position: McNavbarContainerPositionType = 'left';\n\n    @HostBinding('class')\n    get cssClasses(): string {\n        return this.position === 'left' ? 'mc-navbar-left' : 'mc-navbar-right';\n    }\n}\n\nclass CollapsibleItem {\n    private _collapsed: boolean = false;\n\n    constructor(\n        public element: HTMLElement,\n        public width: number\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        this._collapsed = collapsed;\n\n        this.updateCollapsedClass();\n    }\n\n    private updateCollapsedClass() {\n        if (this._collapsed) {\n            this.element.classList.add(COLLAPSED_CLASS);\n        } else {\n            this.element.classList.remove(COLLAPSED_CLASS);\n        }\n\n    }\n}\n\nclass CachedItemWidth {\n\n    get canCollapse(): boolean {\n        return this.itemsForCollapse.length > 0;\n    }\n\n    private _collapsedItemsWidth: number;\n\n    get collapsedItemsWidth(): number {\n        if (this._collapsedItemsWidth !== undefined) {\n            return this._collapsedItemsWidth;\n        }\n\n        this.calculateAndCacheCollapsedItemsWidth();\n\n        return this._collapsedItemsWidth;\n    }\n\n    constructor(\n        public element: HTMLElement,\n        public width: number,\n        public itemsForCollapse: CollapsibleItem[] = []\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        if (this.itemsForCollapse.length > 0) {\n            this.updateTitle(collapsed);\n        }\n\n        this.itemsForCollapse.forEach((item) => item.processCollapsed(collapsed));\n    }\n\n    private calculateAndCacheCollapsedItemsWidth() {\n        this._collapsedItemsWidth = this.itemsForCollapse\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getTitle(): string {\n        const computedTitle = this.element.getAttribute('computedTitle');\n\n        return computedTitle\n            ? decodeURI(computedTitle)\n            : (this.itemsForCollapse.length > 0 ? this.itemsForCollapse[0].element.innerText : '');\n    }\n\n    private updateTitle(collapsed: boolean) {\n        if (collapsed) {\n            this.element.setAttribute('title', this.getTitle());\n        } else {\n            this.element.removeAttribute('title');\n        }\n    }\n}\n\n\n@Component({\n    selector: MC_NAVBAR,\n    template: `\n        <nav class=\"mc-navbar\">\n            <ng-content select=\"[${MC_NAVBAR_CONTAINER}],${MC_NAVBAR_CONTAINER}\"></ng-content>\n        </nav>\n    `,\n    styleUrls: ['./navbar.css'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class McNavbar implements AfterViewInit, OnDestroy {\n\n    private readonly forceRecalculateItemsWidth: boolean = false;\n    private readonly resizeDebounceInterval: number = 100;\n    private readonly firstLevelElement: string = MC_NAVBAR_CONTAINER;\n    private readonly secondLevelElements: string[] = [\n        MC_NAVBAR_ITEM,\n        MC_NAVBAR_BRAND,\n        MC_NAVBAR_TITLE\n    ];\n\n    private _totalItemsWidths: number;\n    private _itemsWidths: CachedItemWidth[];\n\n    private get maxAllowedWidth(): number {\n        return this._elementRef.nativeElement.querySelector('nav').getBoundingClientRect().width;\n    }\n\n    private get itemsWidths(): CachedItemWidth[] {\n        if (this._itemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._itemsWidths;\n        }\n\n        this.calculateAndCacheItemsWidth();\n\n        return this._itemsWidths;\n    }\n\n    private get totalItemsWidth(): number {\n        if (this._totalItemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._totalItemsWidths;\n        }\n\n        this.calculateAndCacheTotalItemsWidth();\n\n        return this._totalItemsWidths;\n    }\n\n    private _resizeSubscription: Subscription;\n\n    constructor(\n        private _elementRef: ElementRef\n    ) {\n        const resizeObserver = fromEvent(window, 'resize')\n            .pipe(debounceTime(this.resizeDebounceInterval));\n\n        this._resizeSubscription = resizeObserver.subscribe(this.updateCollapsed.bind(this));\n    }\n\n    updateCollapsed(): void {\n        let collapseDelta = this.totalItemsWidth - this.maxAllowedWidth;\n\n        for (let i = this.itemsWidths.length - 1; i >= 0; i--) {\n            const item = this.itemsWidths[i];\n\n            if (!item.canCollapse) {\n                continue;\n            }\n\n            item.processCollapsed(collapseDelta > 0);\n            collapseDelta -= item.collapsedItemsWidth;\n        }\n    }\n\n    ngAfterViewInit(): void {\n        // Note: this wait is required for loading and rendering fonts for icons;\n        // unfortunately we cannot control font rendering\n        setTimeout(() => this.updateCollapsed(), 0);\n    }\n\n    ngOnDestroy() {\n        this._resizeSubscription.unsubscribe();\n    }\n\n    private calculateAndCacheTotalItemsWidth() {\n        this._totalItemsWidths = this.itemsWidths\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getOuterElementWidth(element: HTMLElement): number {\n        const baseWidth  = element.getBoundingClientRect().width;\n        const marginRight = parseInt(getComputedStyle(element).getPropertyValue('margin-right'));\n        const marginLeft = parseInt(getComputedStyle(element).getPropertyValue('margin-left'));\n\n        return baseWidth + marginRight + marginLeft;\n    }\n\n    private calculateAndCacheItemsWidth() {\n        const allItemsSelector = this.secondLevelElements\n            .map((e: string) => `${this.firstLevelElement}>${e}`);\n        const allItems: HTMLElement[] = Array.from(this._elementRef.nativeElement.querySelectorAll(allItemsSelector));\n\n        this._itemsWidths = allItems\n            .map((el) => new CachedItemWidth(el, this.getOuterElementWidth(el), this.getItemsForCollapse(el)));\n    }\n\n    private getItemsForCollapse(element: HTMLElement): CollapsibleItem[] {\n        const icon = element.querySelector(`[${MC_ICON}],${MC_NAVBAR_LOGO},[${MC_NAVBAR_LOGO}]`);\n\n        if (!icon) {\n            return [];\n        }\n\n        return Array.from(element.querySelectorAll(MC_NAVBAR_TITLE))\n            .map((el) => new CollapsibleItem(<HTMLElement> el, el.getBoundingClientRect().width));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McNavbar,\n    McNavbarContainer,\n    McNavbarItem,\n    McNavbarTitle,\n    McNavbarBrand,\n    McNavbarLogo\n} from './navbar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ],\n    declarations: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ]\n})\nexport class McNavbarModule {}\n","\nimport { Version } from '@angular/core';\n\nexport const VERSION = new Version('0.0.1-7850294');\n","import {\n    AfterContentInit, AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef,\n    Input, OnDestroy, OnInit, Optional, Output, QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\n\nimport {UniqueSelectionDispatcher} from '@ptsecurity/cdk/collections';\n\nimport {\n    CanColor,\n    CanDisable,\n    HasTabIndex,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/** Change event object emitted by McRadio. */\nexport class McRadioChange {\n    constructor(\n        /** The McRadioButton that emits the change event. */\n        public source: McRadioButton,\n        /** The value of the McRadioButton. */\n        public value: any) {}\n}\n\n// Boilerplate for applying mixins to McRadioGroup.\n/** @docs-private */\nexport class McRadioGroupBase { }\nexport const _McRadioGroupMixinBase = mixinDisabled(McRadioGroupBase);\n\n/**\n * Provider Expression that allows mc-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McRadioGroup),\n    multi: true\n};\n\n@Directive({\n    selector: 'mc-radio-group',\n    exportAs: 'mcRadioGroup',\n    providers: [MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n    host: {\n        'role': 'radiogroup',\n        'class': 'mc-radio-group'\n    },\n    inputs: ['disabled']\n})\nexport class McRadioGroup extends _McRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** Child radio buttons. */\n    @ContentChildren(forwardRef(() => McRadioButton), { descendants: true })\n    _radios: QueryList<McRadioButton>;\n\n    /**\n     * Selected value for group. Should equal the value of the selected radio button if there *is*\n     * a corresponding radio button with a matching value. If there is *not* such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    private _value: any = null;\n\n    /** The HTML name attribute applied to radio buttons in this group. */\n    private _name: string = `mc-radio-group-${nextUniqueId++}`;\n\n    /** The currently selected radio button. Should match value. */\n    private _selected: McRadioButton | null = null;\n\n    /** Whether the `value` has been set to its initial value. */\n    private _isInitialized: boolean = false;\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    private _labelPosition: 'before' | 'after' = 'after';\n\n    /** Whether the radio group is disabled. */\n    private _disabled: boolean = false;\n\n    /** Whether the radio group is required. */\n    private _required: boolean = false;\n\n    /** The method to be called in order to update ngModel */\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @docs-private\n     */\n    onTouched: () => any = () => {};\n\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    @Input()\n    get name(): string { return this._name; }\n    set name(value: string) {\n        this._name = value;\n        this.updateRadioButtonNames();\n    }\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this.markRadiosForCheck();\n    }\n\n    /** Value of the radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n\n            this.updateSelectedRadioFromValue();\n            this.checkSelectedRadioButton();\n        }\n    }\n\n    checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n\n    /** Whether the radio button is selected. */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: McRadioButton | null) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this.checkSelectedRadioButton();\n    }\n\n    /** Whether the radio group is disabled */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /** Whether the radio group is required */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    constructor(private _changeDetector: ChangeDetectorRef) {\n        super();\n    }\n\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on McRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the McRadioGroup.\n        this._isInitialized = true;\n    }\n\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        if (this._isInitialized) {\n            this.change.emit(new McRadioChange(this._selected!, this._value));\n        }\n    }\n\n    markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach((radio) => radio.markForCheck());\n        }\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n\n    private updateRadioButtonNames(): void {\n        if (this._radios) {\n            this._radios.forEach((radio) => {\n                radio.name = this.name;\n            });\n        }\n    }\n\n    /** Updates the `selected` radio button from the internal _value state. */\n    private updateSelectedRadioFromValue(): void {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected != null && this._selected.value === this._value;\n\n        if (this._radios != null && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach((radio) => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n}\n\n\n// Boilerplate for applying mixins to McRadioButton.\n/** @docs-private */\nexport class McRadioButtonBase {\n    // Since the disabled property is manually defined for the McRadioButton and isn't set up in\n    // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n    // defined to properly work.\n    disabled: boolean;\n\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McRadioButtonMixinBase =\n    mixinColor(mixinTabIndex(McRadioButtonBase));\n\n\n@Component({\n    selector: 'mc-radio-button',\n    templateUrl: 'radio.component.html',\n    styleUrls: ['radio.css'],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    exportAs: 'mcRadioButton',\n    host: {\n        'class': 'mc-radio-button',\n        '[attr.id]': 'id',\n        '[class.mc-radio-checked]': 'checked',\n        '[class.mc-radio-disabled]': 'disabled',\n        '(focus)': '_inputElement.nativeElement.focus()'\n    }\n})\nexport class McRadioButton extends _McRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, HasTabIndex {\n\n    private _uniqueId: string = `mc-radio-${++nextUniqueId}`;\n\n    /* tslint:disable:member-ordering */\n\n    /** The unique ID for the radio button. */\n    @Input() id: string = this._uniqueId;\n\n    /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n    @Input() name: string;\n\n    /** Used to set the 'aria-label' attribute on the underlying input element. */\n    @Input('aria-label') ariaLabel: string;\n\n    /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n    @Input('aria-labelledby') ariaLabelledby: string;\n\n    /** The 'aria-describedby' attribute is read after the element's label and field type. */\n    @Input('aria-describedby') ariaDescribedby: string;\n\n    /** Whether this radio button is checked. */\n    @Input()\n    get checked(): boolean { return this._checked; }\n    set checked(value: boolean) {\n        const newCheckedState = toBoolean(value);\n\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** The value of this radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(value: any) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup != null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n\n    /** Whether the radio button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n    }\n    set disabled(value: boolean) {\n        const newDisabledState = toBoolean(value);\n\n        if (this._disabled !== newDisabledState) {\n\n            this._disabled = newDisabledState;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** Whether the radio button is required. */\n    @Input()\n    get required(): boolean {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    private _labelPosition: 'before' | 'after';\n\n    /** The native `<input type=radio>` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** The parent radio group. May or may not be present. */\n    radioGroup: McRadioGroup;\n\n    @Input()\n    isFocused: boolean = false;\n\n    /** ID of the native input element inside `<mc-radio-button>` */\n    get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n    /** Whether this radio is checked. */\n    private _checked: boolean = false;\n\n    /** Whether this radio is disabled. */\n    private _disabled: boolean;\n\n    /** Whether this radio is required. */\n    private _required: boolean;\n\n    /** Value assigned to this radio. */\n    private _value: any = null;\n\n    /** Unregister function for _radioDispatcher */\n    private removeUniqueSelectionListener: () => void = () => {};\n\n    constructor(\n        @Optional() radioGroup: McRadioGroup,\n        elementRef: ElementRef,\n        private _changeDetector: ChangeDetectorRef,\n        private _radioDispatcher: UniqueSelectionDispatcher\n    ) {\n\n        super(elementRef);\n\n        this.radioGroup = radioGroup;\n\n        this.removeUniqueSelectionListener =\n            _radioDispatcher.listen((id: string, name: string) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n\n    ngAfterViewInit() {}\n\n    ngOnDestroy() {\n        this.removeUniqueSelectionListener();\n    }\n\n    /** Focuses the radio button. */\n    focus(): void {}\n\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n\n    onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n\n    onInputChange(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this.emitChangeEvent();\n\n        if (this.radioGroup) {\n            this.radioGroup.controlValueAccessorChangeFn(this.value);\n            this.radioGroup.touch();\n            if (groupValueChanged) {\n                this.radioGroup.emitChangeEvent();\n            }\n        }\n    }\n\n    /** Dispatch change event with current value. */\n    private emitChangeEvent(): void {\n        this.change.emit(new McRadioChange(this, this._value));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport {A11yModule} from '@ptsecurity/cdk/a11y';\nimport {McCommonModule} from '@ptsecurity/mosaic/core';\n\nimport {McRadioButton, McRadioGroup} from './radio.component';\n\n\n@NgModule({\n    imports: [ CommonModule, A11yModule, McCommonModule ],\n    exports: [ McRadioGroup, McRadioButton, McCommonModule ],\n    declarations: [ McRadioGroup, McRadioButton ]\n})\nexport class McRadioModule {}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    Output,\n    QueryList,\n    ViewEncapsulation,\n    ChangeDetectorRef,\n    Inject,\n    OnDestroy,\n    OnInit,\n    ViewChild\n} from '@angular/core';\n\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { Subscription } from 'rxjs';\n\nimport { FocusKeyManager, IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { DOWN_ARROW, END, ENTER, HOME, PAGE_DOWN, PAGE_UP, SPACE, UP_ARROW } from '@ptsecurity/cdk/keycodes';\n\nimport {\n    McLine,\n    McLineSetter,\n    CanDisable,\n    mixinDisabled,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n    exportAs: 'mcListOption',\n    selector: 'mc-list-option',\n    host: {\n        tabindex: '-1',\n\n        class: 'mc-list-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': '_hasFocus',\n        '[class.mc-list-option-disabled]': 'disabled',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()',\n        '(click)': '_handleClick()'\n    },\n    templateUrl: 'list-option.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListOption implements AfterContentInit, OnDestroy, OnInit, IFocusableOption {\n    _hasFocus: boolean = false;\n\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    @ViewChild('text') _text: ElementRef;\n\n    // Whether the label should appear before or after the checkbox. Defaults to 'after'\n    @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n    @Input() value: any;\n\n    private _focusHandlerInProgress: boolean;\n\n    @Input()\n    get disabled() {\n        return this._disabled || (this.listSelection && this.listSelection.disabled);\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    @Input()\n    get selected(): boolean {\n        return this.listSelection.selectedOptions && this.listSelection.selectedOptions.isSelected(this) || false;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            this.listSelection._reportValueChange();\n        }\n    }\n\n    private _lineSetter: McLineSetter;\n    private _selected = false;\n    private _disabled = false;\n\n    constructor(\n        private _element: ElementRef,\n        private _changeDetector: ChangeDetectorRef,\n        @Inject(forwardRef(() => McListSelection))\n        public listSelection: McListSelection\n    ) {}\n\n    ngOnInit() {\n        if (this._selected) {\n            // List options that are selected at initialization can't be reported properly to the form\n            // control. This is because it takes some time until the selection-list knows about all\n            // available options. Also it can happen that the ControlValueAccessor has an initial value\n            // that should be used instead. Deferring the value change report to the next tick ensures\n            // that the form control value is not being overwritten.\n            const wasSelected = this._selected;\n\n            Promise.resolve().then(() => {\n                if (this._selected || wasSelected) {\n                    this.selected = true;\n                    this._changeDetector.markForCheck();\n                }\n            });\n        }\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    ngOnDestroy(): void {\n        if (this.selected) {\n            // We have to delay this until the next tick in order\n            // to avoid changed after checked errors.\n            Promise.resolve().then(() => this.selected = false);\n        }\n\n        this.listSelection._removeOptionFromList(this);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    focus(): void {\n        this._element.nativeElement.focus();\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    getLabel() {\n        return this._text ? this._text.nativeElement.textContent : '';\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.listSelection.selectedOptions) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.listSelection.selectedOptions.select(this);\n        } else {\n            this.listSelection.selectedOptions.deselect(this);\n        }\n\n        this._changeDetector.markForCheck();\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    _handleClick() {\n        if (this.disabled) { return; }\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    _handleFocus() {\n        if (this.disabled || this._hasFocus) { return; }\n\n        this._hasFocus = true;\n    }\n\n    _handleBlur() {\n        this._hasFocus = false;\n\n        this.listSelection._onTouched();\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n\n\nexport const MC_SELECTION_LIST_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McListSelection),\n    multi: true\n};\n\n// Change event that is being fired whenever the selected state of an option changes. */\nexport class McListSelectionChange {\n    constructor(\n        // Reference to the selection list that emitted the event.\n        public source: McListSelection,\n        // Reference to the option that has been changed.\n        public option: McListOption\n    ) {}\n}\n\n\nexport class McListSelectionBase {}\n\nexport const _McListSelectionMixinBase = mixinDisabled(McListSelectionBase);\n\n@Component({\n    exportAs: 'mcListSelection',\n    selector: 'mc-list-selection',\n    template: '<ng-content></ng-content>',\n    styleUrls: ['list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'tabIndex'],\n    host: {\n        class: 'mc-list-selection',\n        '[tabIndex]': 'tabIndex',\n        '(focus)': 'focus()',\n        '(blur)': '_onTouched()',\n        '(keydown)': '_onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    providers: [MC_SELECTION_LIST_VALUE_ACCESSOR],\n    preserveWhitespaces: false\n})\nexport class McListSelection extends _McListSelectionMixinBase implements\n    IFocusableOption, CanDisable, AfterContentInit, ControlValueAccessor {\n\n    _keyManager: FocusKeyManager<McListOption>;\n\n    // The option components contained within this selection-list.\n    @ContentChildren(McListOption) options: QueryList<McListOption>;\n\n    tabIndex: number;\n\n    autoSelect: boolean;\n    noUnselect: boolean;\n    multiple: boolean;\n\n    // todo temporary solution\n    withShift: boolean;\n    withCtrl: boolean;\n\n    @Input() horizontal: boolean = false;\n\n    // Emits a change event whenever the selected state of an option changes.\n    @Output() readonly selectionChange: EventEmitter<McListSelectionChange> = new EventEmitter<McListSelectionChange>();\n\n    selectedOptions: SelectionModel<McListOption>;\n\n    // Used for storing the values that were assigned before the options were initialized.\n    private _tempValues: string[] | null;\n\n    private _modelChanges = Subscription.EMPTY;\n\n    constructor(\n        private _element: ElementRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string,\n        @Attribute('multiple') multiple: string\n    ) {\n        super();\n\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.multiple = multiple === null ? true : toBoolean(multiple);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.selectedOptions = new SelectionModel<McListOption>(this.multiple);\n    }\n\n    ngAfterContentInit(): void {\n        this.horizontal = toBoolean(this.horizontal);\n\n        this._keyManager = new FocusKeyManager<McListOption>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation(!this.horizontal)\n            .withHorizontalOrientation(this.horizontal ? 'ltr' : null);\n\n        if (this._tempValues) {\n            this._setOptionsFromValues(this._tempValues);\n            this._tempValues = null;\n        }\n\n        // Sync external changes to the model back to the options.\n        this._modelChanges = this.selectedOptions.onChange!.subscribe((event) => {\n            for (const item of event.added) {\n                item.selected = true;\n            }\n\n            for (const item of event.removed) {\n                item.selected = false;\n            }\n        });\n\n        this.updateScrollSize();\n    }\n\n    ngOnDestroy() {\n        this._modelChanges.unsubscribe();\n    }\n\n    focus() {\n        this._element.nativeElement.focus();\n    }\n\n    selectAll() {\n        this.options.forEach((option) => option.setSelected(true));\n\n        this._reportValueChange();\n    }\n\n    deselectAll() {\n        this.options.forEach((option) => option.setSelected(false));\n\n        this._reportValueChange();\n    }\n\n    updateScrollSize(): void {\n        if (this.horizontal || !this.options.first) { return; }\n\n        this._keyManager.withScrollSize(Math.floor(this._getHeight() / this.options.first._getHeight()));\n    }\n\n    // Sets the focused option of the selection-list.\n    setFocusedOption(option: McListOption): void {\n        this._keyManager.updateActiveItem(option);\n\n        if (this.withShift && this.multiple) {\n            const previousIndex = this._keyManager.previousActiveItemIndex;\n            const activeIndex = this._keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n\n            this.withShift = false;\n        } else if (this.withCtrl) {\n            this.withCtrl = false;\n\n            if (!this._canUnselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) { this.options.forEach((item) => item.setSelected(false)); }\n\n            option.setSelected(true);\n        }\n\n        this._emitChangeEvent(option);\n        this._reportValueChange();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(values: string[]): void {\n        if (this.options) {\n            this._setOptionsFromValues(values || []);\n        } else {\n            this._tempValues = values;\n        }\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this._onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this._onTouched = fn;\n    }\n\n    // Implemented as a part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        if (this.options) {\n            this.options.forEach((option) => option.disabled = isDisabled);\n        }\n    }\n\n    getSelectedOptionValues(): string[] {\n        return this.options.filter((option) => option.selected).map((option) => option.value);\n    }\n\n    // Toggles the selected state of the currently focused option.\n    toggleFocusedOption(): void {\n        const focusedIndex = this._keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n            const focusedOption: McListOption = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this._canUnselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this._emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    _canUnselectLast(listOption: McListOption): boolean {\n        return !(this.noUnselect && this.selectedOptions.selected.length === 1 && listOption.selected);\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    // View to model callback that should be called if the list or its options lost focus.\n    _onTouched: () => void = () => {};\n\n    // Removes an option from the selection list and updates the active item.\n    _removeOptionFromList(option: McListOption) {\n        if (option._hasFocus) {\n            const optionIndex = this._getOptionIndex(option);\n\n            // Check whether the option is the last item\n            if (optionIndex > 0) {\n                this._keyManager.setPreviousItemActive();\n            } else if (optionIndex === 0 && this.options.length > 1) {\n                this._keyManager.setNextItemActive();\n            }\n        }\n    }\n\n    _onKeyDown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n        this.withShift = event.shiftKey;\n        this.withCtrl = event.ctrlKey;\n\n        switch (keyCode) {\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                if (!this.horizontal) { this._keyManager.setPreviousPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                if (!this.horizontal) { this._keyManager.setNextPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    // Reports a value change to the ControlValueAccessor\n    _reportValueChange() {\n        if (this.options) {\n            this._onChange(this.getSelectedOptionValues());\n        }\n    }\n\n    // Emits a change event if the selected state of an option changed.\n    _emitChangeEvent(option: McListOption) {\n        this.selectionChange.emit(new McListSelectionChange(this, option));\n    }\n\n    // Returns the option with the specified value.\n    private _getOptionByValue(value: string): McListOption | undefined {\n        return this.options.find((option) => option.value === value);\n    }\n\n    // Sets the selected options based on the specified values.\n    private _setOptionsFromValues(values: string[]) {\n        this.options.forEach((option) => option.setSelected(false));\n\n        values\n            .map((value) => this._getOptionByValue(value))\n            .filter(Boolean)\n            .forEach((option) => option!.setSelected(true));\n    }\n\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private _isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    // Returns the index of the specified list option.\n    private _getOptionIndex(option: McListOption): number {\n        return this.options.toArray().indexOf(option);\n    }\n\n    // View to model callback that should be called whenever the selected options change.\n    private _onChange: (value: any) => void = (_: any) => {};\n}\n","// todo пока не делаем, перенесено из материала, но у нас в доках таких простых списков нет.\nimport {\n    AfterContentInit, ChangeDetectionStrategy, Component, ContentChildren, Directive, ElementRef, QueryList,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { McLine, McLineSetter } from '@ptsecurity/mosaic/core';\n\n\nexport class McListBase {}\n\n@Component({\n    selector: 'mc-list',\n    host: { class: 'mc-list' },\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McList extends McListBase {}\n\n\n/**\n * Directive whose purpose is to add the mc- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n    selector: '[mc-subheader], [mcSubheader]',\n    host: { class: 'mc-subheader' }\n})\nexport class McListSubheaderCssStyler {}\n\n\n// Boilerplate for applying mixins to McListItem.\nexport class McListItemBase {}\n\n@Component({\n    selector: 'mc-list-item, a[mc-list-item]',\n    host: {\n        class: 'mc-list-item',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()'\n    },\n    templateUrl: './list-item.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListItem extends McListItemBase implements AfterContentInit {\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    private _lineSetter: McLineSetter;\n\n    constructor(private _element: ElementRef) {\n        super();\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    _handleFocus() {\n        this._element.nativeElement.classList.add('mc-focused');\n    }\n\n    _handleBlur() {\n        this._element.nativeElement.classList.remove('mc-focused');\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLineModule } from '@ptsecurity/mosaic/core';\n\nimport { McListSelection, McListOption } from './list-selection.component';\nimport { McList, McListItem, McListSubheaderCssStyler} from './list.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        McLineModule\n    ],\n    exports: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ],\n    declarations: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ]\n})\nexport class McListModule {}\n","import { InjectionToken } from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type McCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MC_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<McCheckboxClickAction>('mc-checkbox-click-action');\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","\nexport function isBoolean(val: any): val is boolean { return typeof val === 'boolean'; }\n\nexport function toBoolean(value: any): boolean {\n    return value != null && `${value}` !== 'false';\n}\n","import { NgModule, InjectionToken, Optional, Inject, isDevMode } from '@angular/core';\nimport { BidiModule } from '@ptsecurity/cdk/bidi';\n\n\n// Injection token that configures whether the Mosaic sanity checks are enabled.\nexport const MС_SANITY_CHECKS = new InjectionToken<boolean>('mc-sanity-checks', {\n    providedIn: 'root',\n    factory: MC_SANITY_CHECKS_FACTORY\n});\n\nexport function MC_SANITY_CHECKS_FACTORY(): boolean {\n    return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Mosaic\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n    imports: [ BidiModule ],\n    exports: [ BidiModule ]\n})\nexport class McCommonModule {\n    // Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n    private _hasDoneGlobalChecks = false;\n\n    // Reference to the global `document` object.\n    private _document = typeof document === 'object' && document ? document : null;\n\n    // Reference to the global 'window' object.\n    private _window = typeof window === 'object' && window ? window : null;\n\n    constructor(@Optional() @Inject(MС_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n        if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n            this._checkDoctypeIsDefined();\n            this._checkThemeIsPresent();\n            this._hasDoneGlobalChecks = true;\n        }\n    }\n\n    // Whether any sanity checks are enabled\n    private _areChecksEnabled(): boolean {\n        return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n    }\n\n    // Whether the code is running in tests.\n    private _isTestEnv() {\n        return this._window && (this._window['__karma__'] || this._window['jasmine']);\n    }\n\n    private _checkDoctypeIsDefined(): void {\n        if (this._document && !this._document.doctype) {\n            console.warn(\n                'Current document does not have a doctype. This may cause ' +\n                'some Mosaic components not to behave as expected.'\n            );\n        }\n    }\n\n    private _checkThemeIsPresent(): void {\n        if (this._document && typeof getComputedStyle === 'function') {\n            const testElement = this._document.createElement('div');\n\n            testElement.classList.add('mc-theme-loaded-marker');\n            this._document.body.appendChild(testElement);\n\n            const computedStyle = getComputedStyle(testElement);\n\n            // In some situations, the computed style of the test element can be null. For example in\n            // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n            // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n            if (computedStyle && computedStyle.display !== 'none') {\n                console.warn(\n                    'Could not find Mosaic core theme. Most Mosaic ' +\n                    'components may not work as expected. For more info refer ' +\n                    'to the theming guide: link there'\n                );\n            }\n\n            this._document.body.removeChild(testElement);\n        }\n    }\n}\n","import { toBoolean } from '../utils/index';\nimport { Constructor } from './constructor';\n\n\nexport interface CanDisable {\n    disabled: boolean;\n}\n\n// Mixin to augment a directive with a `disabled` property.\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n    return class extends base {\n        private _disabled: boolean = false;\n\n        get disabled() {\n            return this._disabled;\n        }\n\n        set disabled(value: any) {\n            this._disabled = toBoolean(value);\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n    };\n}\n","import { ElementRef } from '@angular/core';\nimport { Constructor } from './constructor';\n\n\nexport interface CanColor {\n    color: ThemePalette;\n}\n\nexport interface HasElementRef {\n    _elementRef: ElementRef;\n}\n\nexport enum ThemePalette {\n    Primary = 'primary',\n    Second = 'second',\n    Warn = 'warn',\n    Default = 'second'\n}\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T, defaultColor: ThemePalette = ThemePalette.Default): Constructor<CanColor> & T {\n    return class extends base {\n        private _color: ThemePalette;\n\n        get color(): ThemePalette {\n            return this._color;\n        }\n\n        set color(value: ThemePalette) {\n            const colorPalette = value || defaultColor;\n\n            if (colorPalette !== this._color) {\n                if (this._color) {\n                    this._elementRef.nativeElement.classList.remove(`mc-${this._color}`);\n                }\n\n                if (colorPalette) {\n                    this._elementRef.nativeElement.classList.add(`mc-${colorPalette}`);\n                }\n\n                this._color = colorPalette;\n            }\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n\n            // Set the default color that can be specified from the mixin.\n            this.color = defaultColor;\n        }\n    };\n}\n\n","import { Constructor } from './constructor';\nimport { CanDisable } from './disabled';\n\n\nexport interface HasTabIndex {\n    tabIndex: number;\n}\n\n// Mixin to augment a directive with a `tabIndex` property.\nexport function mixinTabIndex<\n        T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0): Constructor<HasTabIndex\n    > & T {\n    return class extends base {\n        private _tabIndex: number = defaultTabIndex;\n\n        get tabIndex(): number {\n            return this.disabled ? -1 : this._tabIndex;\n        }\n\n        set tabIndex(value: number) {\n            this._tabIndex = value != null ? value : defaultTabIndex;\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n    };\n}\n","import { FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { ErrorStateMatcher } from '../error/error-options';\nimport { Constructor } from './constructor';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n    readonly stateChanges: Subject<void>;\n    errorState: boolean;\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState();\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n    _parentFormGroup: FormGroupDirective;\n    _parentForm: NgForm;\n    _defaultErrorStateMatcher: ErrorStateMatcher;\n    ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n    : Constructor<CanUpdateErrorState> & T {\n    return class extends base {\n        /** Whether the component is in an error state. */\n        errorState: boolean = false;\n\n        /**\n         * Stream that emits whenever the state of the input changes such that the wrapping\n         * `MсFormField` needs to run change detection.\n         */\n        readonly stateChanges = new Subject<void>();\n\n        errorStateMatcher: ErrorStateMatcher;\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n\n        updateErrorState() {\n            const oldState = this.errorState;\n            const parent = this._parentFormGroup || this._parentForm;\n            const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n            const control = this.ngControl ? this.ngControl.control as FormControl : null;\n            const newState = matcher.isErrorState(control, parent);\n\n            if (newState !== oldState) {\n                this.errorState = newState;\n                this.stateChanges.next();\n            }\n        }\n    };\n}\n","export function getMcFormFieldMissingControlError(): Error {\n  return Error('mc-form-field must contain a McFormFieldControl.');\n}\n","export function getMcInputUnsupportedTypeError(inputType: string): Error {\n    return Error(`Input type \"${inputType}\" isn't supported by mcInput.`);\n}\n","import { NgModule, Directive, ElementRef, QueryList } from '@angular/core';\n\nimport { McCommonModule } from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(McLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n    selector: '[mc-line], [mcLine]',\n    host: { class: 'mc-line' }\n})\nexport class McLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class McLineSetter {\n    constructor(private _lines: QueryList<McLine>, private _element: ElementRef) {\n        this._setLineClass(this._lines.length);\n\n        this._lines.changes.subscribe(() => {\n            this._setLineClass(this._lines.length);\n        });\n    }\n\n    private _setLineClass(count: number): void {\n        this._resetClasses();\n        if (count === 2 || count === 3) {\n            this._setClass(`mc-${count}-line`, true);\n        } else if (count > 3) {\n            this._setClass(`mc-multi-line`, true);\n        }\n    }\n\n    private _resetClasses(): void {\n        this._setClass('mc-2-line', false);\n        this._setClass('mc-3-line', false);\n        this._setClass('mc-multi-line', false);\n    }\n\n    private _setClass(className: string, isAdd: boolean): void {\n        if (isAdd) {\n            this._element.nativeElement.classList.add(className);\n        } else {\n            this._element.nativeElement.classList.remove(className);\n        }\n    }\n}\n\n@NgModule({\n    imports: [McCommonModule],\n    exports: [McLine, McCommonModule],\n    declarations: [McLine]\n})\nexport class McLineModule {}\n","import { Injectable } from '@angular/core';\nimport { FormGroupDirective, NgForm, FormControl } from '@angular/forms';\n\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n    }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({ providedIn: 'root' })\nexport class ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n    }\n}\n","import { Component, ViewEncapsulation, Input, ChangeDetectionStrategy } from '@angular/core';\n\n\nexport type McPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mc-primary .mc-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mc-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'mc-pseudo-checkbox',\n    styleUrls: ['pseudo-checkbox.css'],\n    template: '',\n    host: {\n        class: 'mc-pseudo-checkbox',\n        '[class.mc-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n        '[class.mc-pseudo-checkbox-checked]': 'state === \"checked\"',\n        '[class.mc-pseudo-checkbox-disabled]': 'disabled'\n    }\n})\nexport class McPseudoCheckbox {\n    // Display state of the checkbox.\n    @Input() state: McPseudoCheckboxState = 'unchecked';\n\n    // Whether the checkbox is disabled.\n    @Input() disabled: boolean = false;\n}\n","import { NgModule } from '@angular/core';\n\nimport { McPseudoCheckbox } from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n    exports: [McPseudoCheckbox],\n    declarations: [McPseudoCheckbox]\n})\nexport class McPseudoCheckboxModule {}\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","import {\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { mixinColor, CanColor } from '@ptsecurity/mosaic/core';\n\n\n@Directive({\n    selector: '[mc-icon]',\n    host: { class: 'mc-icon mc' }\n})\nexport class McIconCSSStyler {}\n\n\nexport class McIconBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McIconMixinBase = mixinColor(McIconBase);\n\n\n@Component({\n    selector: `[mc-icon]`,\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./icon.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McIcon extends _McIconMixinBase implements CanColor {\n    constructor(elementRef: ElementRef, @Attribute('mc-icon') iconName: string) {\n        super(elementRef);\n\n        elementRef.nativeElement.classList.add(iconName);\n    }\n\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McIcon,\n    McIconCSSStyler\n} from './icon.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McIcon,\n        McIconCSSStyler\n    ],\n    declarations: [\n        McIcon,\n        McIconCSSStyler\n    ]\n})\nexport class McIconModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    OnDestroy,\n    QueryList,\n    ViewEncapsulation,\n    ContentChildren\n} from '@angular/core';\n\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { Platform } from '@ptsecurity/cdk/platform';\n\nimport { mixinColor, mixinDisabled, CanColor, CanDisable } from '@ptsecurity/mosaic/core';\nimport { McIcon } from '@ptsecurity/mosaic/icon';\n\n\n@Directive({\n    selector: 'button[mc-button], a[mc-button]',\n    host: { class: 'mc-button' }\n})\nexport class McButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-xs-button], a[mc-xs-button]',\n    host: { class: 'mc-button mc-button_xs' }\n})\nexport class McXSButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-sm-button], a[mc-sm-button]',\n    host: { class: 'mc-button mc-button_sm' }\n})\nexport class McSMButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-lg-button], a[mc-lg-button]',\n    host: { class: 'mc-button mc-button_lg' }\n})\nexport class McLGButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-xl-button], a[mc-xl-button]',\n    host: { class: 'mc-button mc-button_xl' }\n})\nexport class McXLButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-icon-button], a[mc-icon-button]',\n    queries: {\n        contentChildren: new ContentChildren(McIcon)\n    },\n    host: { class: 'mc-icon-button' }\n})\nexport class McIconButtonCSSStyler {\n    nativeElement: Element;\n\n    contentChildren: QueryList<McIcon>;\n\n    constructor(elementRef: ElementRef) {\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        this._addClassModificatorForIcons();\n    }\n\n    _addClassModificatorForIcons() {\n        const twoIcons = 2;\n        const icons = this.contentChildren.map((item) => item._elementRef.nativeElement);\n\n        if (icons.length === 1) {\n            const iconElement = icons[0];\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-icon-button_left');\n                }\n\n                if (iconElement.previousSibling) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-icon-button_right');\n                }\n            }\n        } else if (icons.length === twoIcons) {\n            const firstIconElement = icons[0];\n            const secondIconElement = icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n}\n\n\nexport class McButtonBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McButtonMixinBase = mixinColor(mixinDisabled(McButtonBase));\n\n\n@Component({\n    selector: `\n        button[mc-button],\n        button[mc-xs-button],\n        button[mc-sm-button],\n        button[mc-lg-button],\n        button[mc-xl-button]\n    `,\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[disabled]': 'disabled || null'\n    }\n})\nexport class McButton extends _McButtonMixinBase implements OnDestroy, CanDisable, CanColor {\n    constructor(elementRef: ElementRef, private _platform: Platform, private _focusMonitor: FocusMonitor) {\n        super(elementRef);\n\n        this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this._getHostElement().focus();\n    }\n\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n\n\n@Component({\n    selector: 'a[mc-button], a[mc-xs-button], a[mc-sm-button], a[mc-lg-button], a[mc-xl-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[attr.tabindex]': 'disabled ? -1 : 0',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': '_haltDisabledEvents($event)'\n    }\n})\nexport class McAnchor extends McButton {\n    constructor(platform: Platform, focusMonitor: FocusMonitor, elementRef: ElementRef) {\n        super(elementRef, platform, focusMonitor);\n    }\n\n    _haltDisabledEvents(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\n\n\n@Component({\n    selector: 'button[mc-icon-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[attr.tabindex]': 'disabled ? -1 : 0',\n        '[attr.disabled]': 'disabled || null'\n    }\n})\nexport class McIconButton extends McButton {\n    constructor(platform: Platform, focusMonitor: FocusMonitor, elementRef: ElementRef) {\n        super(elementRef, platform, focusMonitor);\n    }\n\n    _haltDisabledEvents(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McButton,\n    McAnchor,\n    McIconButton,\n    McButtonCSSStyler,\n    McXSButtonCSSStyler,\n    McSMButtonCSSStyler,\n    McLGButtonCSSStyler,\n    McXLButtonCSSStyler,\n    McIconButtonCSSStyler\n} from './button.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McButton,\n        McAnchor,\n        McIconButton,\n        McButtonCSSStyler,\n        McXSButtonCSSStyler,\n        McSMButtonCSSStyler,\n        McLGButtonCSSStyler,\n        McXLButtonCSSStyler,\n        McIconButtonCSSStyler\n    ],\n    declarations: [\n        McButton,\n        McAnchor,\n        McIconButton,\n        McButtonCSSStyler,\n        McXSButtonCSSStyler,\n        McSMButtonCSSStyler,\n        McLGButtonCSSStyler,\n        McXLButtonCSSStyler,\n        McIconButtonCSSStyler\n    ]\n})\nexport class McButtonModule {}\n","import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';\n\nimport { toBoolean } from '@ptsecurity/mosaic/core';\n\n\n@Component({\n    selector: 'mc-divider',\n    host: {\n        class: 'mc-divider',\n        role: 'separator',\n        '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n        '[class.mc-divider-vertical]': 'vertical',\n        '[class.mc-divider-inset]': 'inset'\n    },\n    template: '',\n    styleUrls: ['divider.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false\n})\nexport class McDivider {\n    // Whether the divider is vertically aligned.\n    @Input()\n    get vertical(): boolean {\n        return this._vertical;\n    }\n\n    set vertical(value: boolean) {\n        this._vertical = toBoolean(value);\n    }\n\n    private _vertical: boolean = false;\n\n    // Whether the divider is an inset divider.\n    @Input()\n    get inset(): boolean {\n        return this._inset;\n    }\n\n    set inset(value: boolean) {\n        this._inset = toBoolean(value);\n    }\n\n    private _inset: boolean = false;\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\n\nimport {McCommonModule} from '@ptsecurity/mosaic/core';\n\nimport {McDivider} from './divider.component';\n\n\n@NgModule({\n    imports: [\n        McCommonModule,\n        CommonModule\n    ],\n    exports: [\n        McDivider,\n        McCommonModule\n    ],\n    declarations: [\n        McDivider\n    ]\n})\nexport class McDividerModule {}\n"],"names":["exportAs","host","class","[id]","[attr.id]","[class.mc-checkbox-indeterminate]","[class.mc-checkbox-checked]","[class.mc-checkbox-disabled]","[class.mc-checkbox-label-before]","providers","MC_CHECKBOX_CONTROL_VALUE_ACCESSOR","inputs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","type","ElementRef","ChangeDetectorRef","FocusMonitor","undefined","decorators","Attribute","args","Optional","Inject","MC_CHECKBOX_CLICK_ACTION","ariaLabel","Input","ariaLabelledby","id","required","labelPosition","name","change","Output","indeterminateChange","value","_inputElement","ViewChild","checked","disabled","indeterminate","McCheckbox","_McCheckboxMixinBase","MC_CHECKBOX_REQUIRED_VALIDATOR","provide","NG_VALIDATORS","useExisting","forwardRef","McCheckboxRequiredValidator","multi","tslib_1.__extends","_super","Directive","selector","[attr.required]","CheckboxRequiredValidator","NgModule","imports","CommonModule","McCommonModule","exports","declarations","McCheckboxModule","Component","template","McCleaner","McFormFieldControl","nextUniqueId","this","McHint","McPrefix","McSuffix","McFormFieldBase","_elementRef","McFormField","_changeDetectorRef","_this","call","prototype","ngAfterContentInit","_validateControlChild","_control","controlType","nativeElement","classList","add","stateChanges","pipe","startWith","subscribe","markForCheck","valueChanges","ngControl","EMPTY","merge","ngAfterContentChecked","ngAfterViewInit","detectChanges","clearValue","$event","stopPropagation","reset","onContainerClick","_shouldForward","prop","getMcFormFieldMissingControlError","Object","defineProperty","get","_hint","length","_suffix","_prefix","_cleaner","styles","[class.mc-form-field_invalid]","[class.mc-form-field_disabled]","[class.mc-form-field_has-prefix]","[class.mc-form-field_has-suffix]","[class.mc-form-field_has-cleaner]","[class.mc-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","ctorParameters","propDecorators","ContentChild","ContentChildren","McFormFieldWithoutBorders","McIconModule","McFormFieldModule","MC_INPUT_VALUE_ACCESSOR","InjectionToken","MC_INPUT_INVALID_TYPES","McInputBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","_McInputMixinBase","mixinErrorState","McInput","_platform","inputValueAccessor","focused","Subject","_uid","_disabled","_required","_type","_neverEmptyInputTypes","filter","t","getSupportedInputTypes","has","_inputValueAccessor","_previousNativeValue","set","coerceBooleanProperty","next","_id","_validateType","ngOnChanges","ngOnDestroy","complete","ngDoCheck","updateErrorState","_dirtyCheckNativeValue","focus","_focusChanged","isFocused","_onInput","_isNeverEmpty","_isBadInput","newValue","indexOf","getMcInputUnsupportedTypeError","validity","badInput","[attr.placeholder]","[disabled]","[required]","(blur)","(focus)","(input)","Platform","NgControl","Self","NgForm","FormGroupDirective","ErrorStateMatcher","errorStateMatcher","placeholder","McInputMono","A11yModule","FormsModule","McInputModule","idIterator","McProgressBarBase","_McProgressBarMixinBase","mixinColor","McProgressBar","elementRef","mode","color","ThemePalette","Primary","Math","max","min","PlatformModule","McProgressBarModule","McProgressSpinnerBase","_McProgressPinnerMixinBase","McProgressSpinner","percentage","McProgressSpinnerModule","MC_NAVBAR_CONTAINER","MC_NAVBAR_ITEM","MC_NAVBAR_BRAND","MC_NAVBAR_TITLE","McNavbarLogo","McNavbarBrand","McNavbarTitle","McNavbarItemBase","_McNavbarMixinBase","mixinDisabled","McNavbarItem","_focusMonitor","tabIndex","setAttribute","encodeURI","ngOnInit","denyClickIfDisabled","monitor","stopMonitoring","events","eventListeners","forEach","event","removeEventListener","addEventListener","hasAttribute","stopImmediatePropagation","[attr.disabled]","collapsedTitle","McNavbarContainer","position","cssClasses","HostBinding","CollapsibleItem","element","width","_collapsed","processCollapsed","collapsed","updateCollapsedClass","remove","CachedItemWidth","itemsForCollapse","_collapsedItemsWidth","calculateAndCacheCollapsedItemsWidth","updateTitle","item","reduce","acc","getTitle","computedTitle","getAttribute","decodeURI","innerText","removeAttribute","McNavbar","forceRecalculateItemsWidth","resizeDebounceInterval","firstLevelElement","secondLevelElements","resizeObserver","fromEvent","window","debounceTime","_resizeSubscription","updateCollapsed","bind","querySelector","getBoundingClientRect","_itemsWidths","calculateAndCacheItemsWidth","_totalItemsWidths","calculateAndCacheTotalItemsWidth","collapseDelta","totalItemsWidth","maxAllowedWidth","i","itemsWidths","canCollapse","collapsedItemsWidth","setTimeout","unsubscribe","getOuterElementWidth","parseInt","getComputedStyle","getPropertyValue","allItemsSelector","map","e","allItems","Array","from","querySelectorAll","el","getItemsForCollapse","McNavbarModule","VERSION","Version","[class.mc-radio-checked]","[class.mc-radio-disabled]","McRadioGroup","UniqueSelectionDispatcher","ariaDescribedby","McRadioButton","_McRadioButtonMixinBase","McRadioModule","McListOption","_element","_changeDetector","listSelection","_hasFocus","checkboxPosition","_selected","toBoolean","selectedOptions","isSelected","setSelected","_reportValueChange","wasSelected_1","Promise","resolve","then","selected","_lineSetter","McLineSetter","_lines","_removeOptionFromList","toggle","setFocusedOption","getLabel","_text","textContent","select","deselect","_getHeight","getClientRects","height","_handleClick","_handleFocus","_handleBlur","_onTouched","_getHostElement","tabindex","[class.mc-selected]","[class.mc-list-option-disabled]","(click)","preserveWhitespaces","McListSelection","McLine","MC_SELECTION_LIST_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","McListSelectionChange","source","option","McListSelectionBase","_McListSelectionMixinBase","autoSelect","noUnselect","multiple","horizontal","selectionChange","EventEmitter","_modelChanges","Subscription","_onChange","_","SelectionModel","_keyManager","FocusKeyManager","options","withTypeAhead","withVerticalOrientation","withHorizontalOrientation","_tempValues","_setOptionsFromValues","_i","_a","added","_b","_c","removed","updateScrollSize","selectAll","deselectAll","first","withScrollSize","floor","updateActiveItem","withShift","previousIndex_1","previousActiveItemIndex","activeIndex_1","activeItemIndex","index","withCtrl","_canUnselectLast","_emitChangeEvent","writeValue","values","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","getSelectedOptionValues","toggleFocusedOption","focusedIndex","_isValidIndex","focusedOption","toArray","listOption","optionIndex","_getOptionIndex","setPreviousItemActive","setNextItemActive","_onKeyDown","keyCode","shiftKey","ctrlKey","SPACE","ENTER","preventDefault","HOME","setFirstItemActive","END","setLastItemActive","PAGE_UP","setPreviousPageItemActive","PAGE_DOWN","setNextPageItemActive","onKeydown","emit","_getOptionByValue","find","Boolean","[tabIndex]","(keydown)","(window:resize)","McListBase","McList","McListSubheaderCssStyler","McListItemBase","McListItem","McListModule","McLineModule","TransitionCheckState","McCheckboxChange","McCheckboxBase","mixinTabIndex","_clickAction","_uniqueId","_currentAnimationClass","_currentCheckState","Init","_controlValueAccessorChangeFn","_checked","_indeterminate","focusOrigin","_onInputFocusChange","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_onLabelTextChange","_getAriaChecked","newState","oldState","_onInputClick","focusVia","_onInteractionEvent","__extends","d","b","__","constructor","extendStatics","create","isBoolean","val","MC_SANITY_CHECKS_FACTORY","base","class_1","arguments","apply","defaultColor","Default","_color","colorPalette","defaultTabIndex","_tabIndex","errorState","parent","matcher","control","isErrorState","Error","inputType","setPrototypeOf","__proto__","p","hasOwnProperty","MС_SANITY_CHECKS","providedIn","factory","_sanityChecksEnabled","_hasDoneGlobalChecks","_document","document","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","isDevMode","_isTestEnv","doctype","console","warn","testElement","createElement","body","appendChild","computedStyle","display","removeChild","BidiModule","Second","Warn","_setLineClass","changes","count","_resetClasses","_setClass","className","isAdd","ShowOnDirtyErrorStateMatcher","form","invalid","dirty","submitted","Injectable","touched","state","[class.mc-pseudo-checkbox-indeterminate]","[class.mc-pseudo-checkbox-checked]","[class.mc-pseudo-checkbox-disabled]","McPseudoCheckbox","McPseudoCheckboxModule","McIconCSSStyler","McIconBase","_McIconMixinBase","McIcon","iconName","McButtonCSSStyler","McXSButtonCSSStyler","McSMButtonCSSStyler","McLGButtonCSSStyler","McXLButtonCSSStyler","McIconButtonCSSStyler","_addClassModificatorForIcons","icons","contentChildren","iconElement","previousElementSibling","nextElementSibling","nextSibling","previousSibling","firstIconElement","secondIconElement","queries","McButtonBase","_McButtonMixinBase","McButton","McAnchor","platform","focusMonitor","_haltDisabledEvents","[attr.tabindex]","McIconButton","McButtonModule","McDivider","_vertical","_inset","role","[attr.aria-orientation]","[class.mc-divider-vertical]","[class.mc-divider-inset]","vertical","inset","McDividerModule","McRadioChange","McRadioGroupBase","_McRadioGroupMixinBase","MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","_value","_name","_isInitialized","_labelPosition","controlValueAccessorChangeFn","onTouched","updateRadioButtonNames","v","markRadiosForCheck","updateSelectedRadioFromValue","checkSelectedRadioButton","touch","emitChangeEvent","_radios","radio","isAlreadySelected","descendants","McRadioButtonBase","radioGroup","_radioDispatcher","removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","onInputClick","onInputChange","groupValueChanged"],"mappings":"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"}