{"version":3,"file":"mosaic.umd.min.js","sources":["../../packages/mosaic/tooltip/tooltip.component.ts","../../packages/mosaic/tooltip/tooltip.module.ts","../../packages/mosaic/vertical-navbar/vertical-navbar-item.component.ts","../../packages/mosaic/vertical-navbar/vertical-navbar.component.ts","../../packages/mosaic/vertical-navbar/vertical-navbar.module.ts","../../packages/mosaic/version.ts","../../packages/mosaic/core/select/events.ts","../../packages/mosaic/core/select/constants.ts","../../packages/mosaic/autocomplete/autocomplete-trigger.directive.ts","../../packages/mosaic/dropdown/dropdown-trigger.ts","../../packages/mosaic/select/select.component.ts","../../packages/mosaic/timepicker/timepicker.constants.ts","../../packages/mosaic/sidepanel/sidepanel-container.component.ts","../../packages/mosaic/sidepanel/sidepanel-ref.ts","../../packages/mosaic/sidepanel/sidepanel.service.ts","../../packages/mosaic/sidepanel/sidepanel-directives.ts","../../packages/mosaic/sidepanel/sidepanel.module.ts","../../packages/mosaic/splitter/splitter.component.ts","../../packages/mosaic/splitter/splitter.module.ts","../../packages/mosaic/toggle/toggle.component.ts","../../packages/mosaic/toggle/toggle.module.ts","../../packages/mosaic/tree-select/tree-select.component.ts","../../packages/mosaic/tree-select/tree-select.module.ts","../../packages/mosaic/textarea/textarea.component.ts","../../packages/mosaic/textarea/textarea.module.ts","../../packages/mosaic/timepicker/timepicker.ts","../../packages/mosaic/timepicker/timepicker.module.ts","../../packages/mosaic/sidepanel/sidepanel-config.ts","../../packages/mosaic/sidepanel/sidepanel-animations.ts","../../packages/mosaic/tags/tag-input.ts","../../packages/mosaic/tags/tag.module.ts","../../packages/mosaic/select/select.module.ts","../../packages/mosaic/tabs/tab-group.ts","../../packages/mosaic/tabs/tab-nav-bar/tab-nav-bar.ts","../../packages/mosaic/tabs/tabs.module.ts","../../packages/mosaic/tags/tag-default-options.ts","../../packages/mosaic/tags/tag.component.ts","../../packages/mosaic/tags/tag-list.component.ts","../../packages/mosaic/tree/node.ts","../../packages/mosaic/tree/padding.ts","../../packages/mosaic/tree/toggle.ts","../../packages/mosaic/tree/tree-option.ts","../../packages/mosaic/tree/tree-selection.ts","../../packages/mosaic/tree/tree.module.ts","../../packages/mosaic/tree/data-source/flat-data-source.ts","../../packages/mosaic/tree/data-source/nested-data-source.ts","../../packages/mosaic/tabs/tab-content.ts","../../packages/mosaic/tabs/tab-label.ts","../../packages/mosaic/tabs/tab.ts","../../packages/mosaic/tabs/tabs-animations.ts","../../packages/mosaic/tabs/tab-body.ts","../../packages/mosaic/tabs/tab-label-wrapper.ts","../../packages/mosaic/tabs/tab-header.ts","../../packages/mosaic/modal/modal.component.ts","../../packages/mosaic/modal/css-unit.pipe.ts","../../packages/mosaic/modal/modal.service.ts","../../packages/mosaic/modal/modal.module.ts","../../packages/mosaic/navbar/navbar.component.ts","../../packages/mosaic/navbar/navbar.module.ts","../../packages/mosaic/progress-bar/progress-bar.component.ts","../../packages/mosaic/progress-bar/progress-bar.module.ts","../../packages/mosaic/progress-spinner/progress-spinner.component.ts","../../packages/mosaic/progress-spinner/progress-spinner.module.ts","../../packages/mosaic/radio/radio.component.ts","../../packages/mosaic/radio/radio.module.ts","../../packages/mosaic/list/list-selection.component.ts","../../packages/mosaic/list/list.component.ts","../../packages/mosaic/list/list.module.ts","../../packages/mosaic/link/link.component.ts","../../packages/mosaic/link/link.module.ts","../../packages/mosaic/modal/modal-control.service.ts","../../packages/mosaic/modal/modal-ref.class.ts","../../packages/mosaic/modal/modal-util.ts","../../packages/mosaic/datepicker/datepicker-input.ts","../../packages/mosaic/datepicker/datepicker-toggle.ts","../../packages/mosaic/datepicker/datepicker-module.ts","../../packages/mosaic/divider/divider.component.ts","../../packages/mosaic/divider/divider.module.ts","../../packages/mosaic/dropdown/dropdown-content.ts","../../packages/mosaic/dropdown/dropdown-panel.ts","../../packages/mosaic/dropdown/dropdown-item.ts","../../packages/mosaic/dropdown/dropdown-animations.ts","../../packages/mosaic/dropdown/dropdown.component.ts","../../packages/mosaic/dropdown/dropdown.module.ts","../../packages/mosaic/layout/content.component.ts","../../packages/mosaic/layout/footer.component.ts","../../packages/mosaic/layout/header.component.ts","../../packages/mosaic/layout/layout.component.ts","../../packages/mosaic/layout/sidebar.component.ts","../../packages/mosaic/layout/layout.module.ts","../../packages/mosaic/datepicker/multi-year-view.ts","../../packages/mosaic/datepicker/year-view.ts","../../packages/mosaic/datepicker/calendar.ts","../../packages/mosaic/datepicker/datepicker-animations.ts","../../packages/mosaic/datepicker/datepicker.ts","../../packages/mosaic/card/card.component.ts","../../packages/mosaic/card/card.module.ts","../../packages/mosaic/checkbox/checkbox-config.ts","../../packages/mosaic/checkbox/checkbox.ts","../../packages/mosaic/checkbox/checkbox-required-validator.ts","../../packages/mosaic/checkbox/checkbox-module.ts","../../packages/mosaic/input/input-value-accessor.ts","../../packages/mosaic/input/stepperUtils.ts","../../packages/mosaic/input/input.ts","../../packages/mosaic/input/input-number-validators.ts","../../packages/mosaic/input/input.module.ts","../../packages/mosaic/datepicker/datepicker-intl.ts","../../packages/mosaic/datepicker/calendar-body.ts","../../packages/mosaic/datepicker/month-view.ts","../../packages/mosaic/autocomplete/autocomplete.component.ts","../../packages/mosaic/autocomplete/autocomplete-origin.directive.ts","../../packages/mosaic/autocomplete/autocomplete.module.ts","../../packages/mosaic/button/button.component.ts","../../packages/mosaic/button/button.module.ts","../../packages/mosaic/button-toggle/button-toggle.component.ts","../../packages/mosaic/button-toggle/button-toggle.module.ts","../../node_modules/tslib/tslib.es6.js","../../packages/mosaic/core/utils/utils.ts","../../packages/mosaic/core/common-behaviors/common-module.ts","../../packages/mosaic/core/common-behaviors/disabled.ts","../../packages/mosaic/core/common-behaviors/color.ts","../../packages/mosaic/core/common-behaviors/tabindex.ts","../../packages/mosaic/core/common-behaviors/error-state.ts","../../packages/mosaic/core/option/option.ts","../../packages/mosaic/core/overlay/overlay-position-map.ts","../../packages/mosaic/core/select/errors.ts","../../packages/mosaic/form-field/form-field-errors.ts","../../packages/mosaic/input/input-errors.ts","../../packages/mosaic/datepicker/datepicker-errors.ts","../../packages/mosaic/dropdown/dropdown-errors.ts","../../packages/mosaic/vertical-navbar/vertical-navbar.animation.ts","../../packages/mosaic/core/line/line.ts","../../packages/mosaic/core/error/error-options.ts","../../packages/mosaic/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../packages/mosaic/core/selection/index.ts","../../packages/mosaic/core/services/measure-scrollbar.service.ts","../../packages/mosaic/core/option/optgroup.ts","../../packages/mosaic/core/option/index.ts","../../packages/mosaic/core/label/label-options.ts","../../packages/mosaic/core/animation/fade-animations.ts","../../packages/mosaic/core/animation/animation.ts","../../packages/mosaic/core/select/animations.ts","../../packages/mosaic/icon/icon.component.ts","../../packages/mosaic/icon/icon.module.ts","../../packages/mosaic/form-field/cleaner.ts","../../packages/mosaic/form-field/form-field-control.ts","../../packages/mosaic/form-field/form-field-number-control.ts","../../packages/mosaic/form-field/hint.ts","../../packages/mosaic/form-field/prefix.ts","../../packages/mosaic/form-field/stepper.ts","../../packages/mosaic/form-field/suffix.ts","../../packages/mosaic/form-field/form-field.ts","../../packages/mosaic/form-field/form-field.module.ts"],"sourcesContent":["import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    TemplateRef,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport {\n    ConnectedOverlayPositionChange,\n    ConnectionPositionPair,\n    Overlay,\n    OverlayRef,\n    ScrollDispatcher,\n    IScrollStrategy,\n    FlexibleConnectedPositionStrategy,\n    IOverlayConnectionPosition,\n    IOriginConnectionPosition,\n    HorizontalConnectionPos,\n    VerticalConnectionPos\n} from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal } from '@ptsecurity/cdk/portal';\nimport {\n    fadeAnimation,\n    DEFAULT_4_POSITIONS,\n    POSITION_MAP\n} from '@ptsecurity/mosaic/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators';\n\n\n@Component({\n    selector: 'mc-tooltip-component',\n    inputs: [\n        'mcMouseEnterDelay',\n        'mcMouseLeaveDelay',\n        'mcTitle',\n        'mcVisible',\n        'mcTrigger',\n        'mcPlacement'\n    ],\n    outputs: ['mcVisibleChange'],\n    animations: [ fadeAnimation ],\n    templateUrl: './tooltip.component.html',\n    preserveWhitespaces: false,\n    styleUrls: ['./tooltip.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '(body:click)': 'this.handleBodyInteraction()'\n    }\n})\nexport class McTooltipComponent {\n    prefix = 'mc-tooltip_placement';\n    positions: ConnectionPositionPair[] = [ ...DEFAULT_4_POSITIONS ];\n    classMap = {};\n    isTitleString: boolean;\n    showTid: number;\n    hideTid: number;\n    availablePositions: any;\n    $visible: Observable<boolean>;\n\n    @Output() mcVisibleChange: EventEmitter<boolean> = new EventEmitter();\n\n    @Input() mcMouseEnterDelay = 400;\n\n    @Input() mcMouseLeaveDelay = 0;\n\n    @Input()\n    get mcTitle(): string | TemplateRef<void> {\n        return this._mcTitle;\n    }\n    set mcTitle(value: string | TemplateRef<void>) {\n        this.isTitleString = !(value instanceof TemplateRef);\n\n        if (this.isTitleString) {\n            this._mcTitle = value;\n        }\n    }\n    private _mcTitle: string | TemplateRef<void>;\n\n    @Input()\n    get mcTrigger(): string {\n        return this._mcTrigger;\n    }\n    set mcTrigger(value: string) {\n        this._mcTrigger = value;\n    }\n    private _mcTrigger: string = 'hover';\n\n    @Input()\n    get mcPlacement(): string {\n        return this._mcPlacement;\n    }\n    set mcPlacement(value: string) {\n        if (value !== this._mcPlacement) {\n            this._mcPlacement = value;\n            this.positions.unshift(POSITION_MAP[ this.mcPlacement ]);\n        } else if (!value) {\n            this._mcPlacement = 'top';\n        }\n    }\n    private _mcPlacement: string = 'top';\n\n    @Input()\n    get mcVisible(): boolean {\n        return this._mcVisible.value;\n    }\n    set mcVisible(value: boolean) {\n        const visible = coerceBooleanProperty(value);\n\n        if (this._mcVisible.value !== visible) {\n            this._mcVisible.next(visible);\n            this.mcVisibleChange.emit(visible);\n        }\n    }\n    private _mcVisible: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n    /** Subject for notifying that the tooltip has been hidden from the view */\n    private readonly onHideSubject: Subject<any> = new Subject();\n    private closeOnInteraction: boolean = false;\n\n    constructor(public cdr: ChangeDetectorRef) {\n        this.availablePositions = POSITION_MAP;\n        this.$visible = this._mcVisible.asObservable();\n    }\n\n    show(): void {\n        if (this.hideTid) {\n            clearTimeout(this.hideTid);\n        }\n\n        if (!this.isContentEmpty()) {\n            if (this.mcTrigger !== 'manual') {\n                this.closeOnInteraction = true;\n            }\n            this.showTid = setTimeout(() => {\n                this.mcVisible = true;\n                this.mcVisibleChange.emit(true);\n\n                // Mark for check so if any parent component has set the\n                // ChangeDetectionStrategy to OnPush it will be checked anyways\n                this.markForCheck();\n            }, this.mcMouseEnterDelay);\n        }\n    }\n\n    hide(): void {\n        if (this.showTid) {\n            clearTimeout(this.showTid);\n        }\n\n        this.hideTid = setTimeout(() => {\n            this.mcVisible = false;\n            this.mcVisibleChange.emit(false);\n            this.onHideSubject.next();\n\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this.markForCheck();\n        }, this.mcMouseLeaveDelay);\n    }\n\n    setClassMap(): void {\n        this.classMap = `${this.prefix}-${this.mcPlacement}`;\n    }\n\n    isContentEmpty(): boolean {\n        return this.isTitleString ? (this.mcTitle === '' || !this.mcTitle) : false;\n    }\n\n    /** Returns an observable that notifies when the tooltip has been hidden from view. */\n    afterHidden(): Observable<void> {\n        return this.onHideSubject.asObservable();\n    }\n\n    markForCheck(): void {\n        this.cdr.markForCheck();\n    }\n\n    handleBodyInteraction(): void {\n        if (this.closeOnInteraction) {\n            this.hide();\n        }\n    }\n}\n\nexport const MC_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function mcTooltipScrollStrategyFactory(overlay: Overlay): () => IScrollStrategy {\n    return () => overlay.scrollStrategies.reposition({scrollThrottle: 20});\n}\n\n/** @docs-private */\nexport const MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_TOOLTIP_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: mcTooltipScrollStrategyFactory\n};\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMcTooltipInvalidPositionError(position: string) {\n    return Error(`McTooltip position \"${position}\" is invalid.`);\n}\n\nconst VIEWPORT_MARGIN: number = 8;\n\n@Directive({\n    selector: '[mcTooltip], [attribute^=\"mcTooltip\"]',\n    exportAs: 'mcTooltip',\n    host: {\n        '(keydown)': 'handleKeydown($event)',\n        '(touchend)': 'handleTouchend()'\n    }\n})\nexport class McTooltip implements OnInit, OnDestroy {\n    isTooltipOpen: boolean = false;\n    isDynamicTooltip = false;\n    parentDisabled: boolean = false;\n    overlayRef: OverlayRef | null;\n    portal: ComponentPortal<McTooltipComponent>;\n    availablePositions: any;\n    tooltip: McTooltipComponent | null;\n\n    @Output() mcVisibleChange = new EventEmitter<boolean>();\n    private $unsubscribe = new Subject<void>();\n\n    @Input('mcTooltip')\n    get mcTitle(): string {\n        return this._mcTitle;\n    }\n    set mcTitle(title: string) {\n        this._mcTitle = title;\n        this.updateCompValue('mcTitle', title);\n    }\n    private _mcTitle: string;\n\n    @Input('mcTitle')\n    set setTitle(title: string) {\n        this.mcTitle = title;\n    }\n\n    @Input('mcTooltipDisabled')\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this.updateCompValue('mcTooltipDisabled', value);\n    }\n    private _disabled: boolean = false;\n\n    @Input('mcMouseEnterDelay')\n    get mcMouseEnterDelay(): number {\n        return this._mcMouseEnterDelay;\n    }\n    set mcMouseEnterDelay(value: number) {\n        this._mcMouseEnterDelay = value;\n        this.updateCompValue('mcMouseEnterDelay', value);\n    }\n    private _mcMouseEnterDelay: number;\n\n    @Input('mcMouseLeaveDelay')\n    get mcMouseLeaveDelay(): number {\n        return this._mcMouseLeaveDelay;\n    }\n    set mcMouseLeaveDelay(value: number) {\n        this._mcMouseLeaveDelay = value;\n        this.updateCompValue('mcMouseLeaveDelay', value);\n    }\n    private _mcMouseLeaveDelay: number;\n\n    @Input('mcTrigger')\n    get mcTrigger(): string {\n        return this._mcTrigger;\n    }\n    set mcTrigger(value: string) {\n        if (value) {\n            this._mcTrigger = value;\n            this.updateCompValue('mcTrigger', value);\n        } else {\n            this._mcTrigger = 'hover';\n        }\n    }\n    private _mcTrigger: string = 'hover';\n\n    @Input('mcPlacement')\n    get mcPlacement(): string {\n        return this._mcPlacement;\n    }\n    set mcPlacement(value: string) {\n        if (value) {\n            this._mcPlacement = value;\n            this.updateCompValue('mcPlacement', value);\n        } else {\n            this._mcPlacement = 'top';\n        }\n    }\n    private _mcPlacement: string = 'top';\n\n    @Input('mcTooltipClass')\n    get mcTooltipClass() { return this._mcTooltipClass; }\n    set mсTooltipClass(value: string | string[] | Set<string> | {[key: string]: any}) {\n        this._mcTooltipClass = value;\n\n        if (this.tooltip) {\n            this.tooltip.setClassMap();\n        }\n    }\n    private _mcTooltipClass: string | string[] | Set<string> | {[key: string]: any};\n\n    @Input('mcVisible')\n    get mcVisible(): boolean {\n        return this._mcVisible;\n    }\n    set mcVisible(externalValue: boolean) {\n        const value = coerceBooleanProperty(externalValue);\n        this._mcVisible = value;\n        this.updateCompValue('mcVisible', value);\n\n        if (value) {\n            this.show();\n        } else {\n            this.hide();\n        }\n    }\n    private _mcVisible: boolean;\n\n    @HostBinding('class.mc-tooltip-open')\n    get isOpen(): boolean {\n        return this.isTooltipOpen;\n    }\n\n    @HostBinding('class.disabled')\n    get isParentDisabled(): boolean {\n        return this.parentDisabled;\n    }\n\n    private manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n    private readonly destroyed = new Subject<void>();\n\n    constructor(\n        private overlay: Overlay,\n        private elementRef: ElementRef,\n        private ngZone: NgZone,\n        private scrollDispatcher: ScrollDispatcher,\n        private hostView: ViewContainerRef,\n        @Inject(MC_TOOLTIP_SCROLL_STRATEGY) private scrollStrategy,\n        @Optional() private direction: Directionality) {\n            this.availablePositions = POSITION_MAP;\n        }\n\n    /** Create the overlay config and position strategy */\n    createOverlay(): OverlayRef {\n        if (this.overlayRef) {\n            return this.overlayRef;\n        }\n\n        // Create connected position strategy that listens for scroll events to reposition.\n        const strategy = this.overlay.position()\n            .flexibleConnectedTo(this.elementRef)\n            .withTransformOriginOn('.mc-tooltip')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(VIEWPORT_MARGIN)\n            .withPositions([ ...DEFAULT_4_POSITIONS ]);\n\n        const scrollableAncestors = this.scrollDispatcher\n            .getAncestorScrollContainers(this.elementRef);\n\n        strategy.withScrollableContainers(scrollableAncestors);\n\n        strategy.positionChanges.pipe(takeUntil(this.destroyed)).subscribe((change) => {\n            if (this.tooltip) {\n                this.onPositionChange(change);\n                if (change.scrollableViewProperties.isOverlayClipped && this.tooltip.mcVisible) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the tooltip.\n                    this.ngZone.run(() => this.hide());\n                }\n            }\n        });\n\n        this.overlayRef = this.overlay.create({\n            direction: this.direction,\n            positionStrategy: strategy,\n            panelClass: 'mc-tooltip-panel',\n            scrollStrategy: this.scrollStrategy()\n        });\n\n        this.updatePosition();\n\n        this.overlayRef.detachments()\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(() => this.detach());\n\n        return this.overlayRef;\n    }\n\n    detach() {\n        if (this.overlayRef && this.overlayRef.hasAttached()) {\n            this.overlayRef.detach();\n        }\n\n        this.tooltip = null;\n    }\n\n    onPositionChange($event: ConnectedOverlayPositionChange): void {\n        let updatedPlacement = this.mcPlacement;\n        Object.keys(this.availablePositions).some((key) => {\n            if ($event.connectionPair.originX === this.availablePositions[key].originX &&\n                $event.connectionPair.originY === this.availablePositions[key].originY &&\n                $event.connectionPair.overlayX === this.availablePositions[key].overlayX &&\n                $event.connectionPair.overlayY === this.availablePositions[key].overlayY) {\n                updatedPlacement = key;\n\n                return true;\n            }\n\n            return false;\n        });\n        this.updateCompValue('mcPlacement', updatedPlacement);\n\n        if (this.tooltip) {\n            this.tooltip.setClassMap();\n            this.tooltip.markForCheck();\n        }\n\n        this.handlePositioningUpdate();\n    }\n\n    handlePositioningUpdate() {\n        if (!this.overlayRef) {\n            this.overlayRef = this.createOverlay();\n        }\n        if (this.mcPlacement === 'right' || this.mcPlacement === 'left') {\n            const pos =\n                (this.overlayRef.overlayElement.clientHeight -\n                    this.hostView.element.nativeElement.clientHeight) / 2; // tslint:disable-line\n            const currentContainer = this.overlayRef.overlayElement.style.top || '0px';\n            this.overlayRef.overlayElement.style.top =\n                `${parseInt(currentContainer.split('px')[0], 10) + pos - 1}px`;\n            // TODO: обновлять положение стрелки\\указателя\\\"дятла\"\n        }\n    }\n\n    // tslint:disable-next-line:no-any\n    updateCompValue(key: string, value: any): void {\n        if (this.isDynamicTooltip && value) {\n            if (this.tooltip) {\n                this.tooltip[key] = value;\n            }\n        }\n    }\n\n    ngOnInit(): void {\n        this.initElementRefListeners();\n    }\n\n    ngOnDestroy(): void {\n        if (this.overlayRef) {\n            this.overlayRef.dispose();\n        }\n        this.manualListeners.forEach((listener, event) =>\n            this.elementRef.nativeElement.removeEventListener(event, listener));\n        this.manualListeners.clear();\n\n        this.$unsubscribe.next();\n        this.$unsubscribe.complete();\n    }\n\n    handleKeydown(e: KeyboardEvent) {\n        if (this.isTooltipOpen && e.keyCode === ESCAPE) { // tslint:disable-line\n            this.hide();\n        }\n    }\n\n    handleTouchend() {\n        this.hide();\n    }\n\n    initElementRefListeners() {\n        if (this.mcTrigger === 'hover') {\n\n            this.manualListeners\n                .set('mouseenter', () => this.show())\n                .set('mouseleave', () => this.hide())\n                .forEach((listener, event) => this.elementRef.nativeElement.addEventListener(event, listener));\n        }\n\n        if (this.mcTrigger === 'focus') {\n\n            this.manualListeners\n                .set('focus', () => this.show())\n                .set('blur', () => this.hide())\n                .forEach((listener, event) => this.elementRef.nativeElement.addEventListener(event, listener));\n        }\n    }\n\n    show(): void {\n        if (!this.disabled) {\n            if (!this.tooltip) {\n                const overlayRef = this.createOverlay();\n                this.detach();\n\n                this.portal = this.portal || new ComponentPortal(McTooltipComponent, this.hostView);\n\n                this.tooltip = overlayRef.attach(this.portal).instance;\n                this.tooltip.afterHidden()\n                    .pipe(takeUntil(this.destroyed))\n                    .subscribe(() => this.detach());\n                this.isDynamicTooltip = true;\n                const properties = [\n                    'mcTitle',\n                    'mcPlacement',\n                    'mcTrigger',\n                    'mcTooltipDisabled',\n                    'mcMouseEnterDelay',\n                    'mcMouseLeaveDelay',\n                    'mсTooltipClass',\n                    'mcVisible'\n                ];\n                properties.forEach((property) => this.updateCompValue(property, this[ property ]));\n                this.tooltip.mcVisibleChange.pipe(takeUntil(this.$unsubscribe), distinctUntilChanged())\n                    .subscribe((data) => {\n                        this.mcVisible = data;\n                        this.mcVisibleChange.emit(data);\n                        this.isTooltipOpen = data;\n                    });\n            }\n            this.updatePosition();\n            this.tooltip.show();\n        }\n    }\n\n    hide(): void {\n        if (this.tooltip) {\n            this.tooltip.hide();\n        }\n    }\n\n    /** Updates the position of the current tooltip. */\n    updatePosition() {\n        if (!this.overlayRef) {\n            this.overlayRef = this.createOverlay();\n        }\n        const position =\n            this.overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n        const origin = this.getOrigin();\n        const overlay = this.getOverlayPosition();\n\n        position.withPositions([\n            {...origin.main, ...overlay.main},\n            {...origin.fallback, ...overlay.fallback}\n        ]);\n    }\n\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    getOrigin(): {main: IOriginConnectionPosition; fallback: IOriginConnectionPosition} {\n        const position = this.mcPlacement;\n        const isLtr = !this.direction || this.direction.value === 'ltr';\n        let originPosition: IOriginConnectionPosition;\n\n        if (position === 'top' || position === 'bottom') {\n            originPosition = {originX: 'center', originY: position === 'top' ? 'top' : 'bottom'};\n        } else if (\n            position === 'top' ||\n            (position === 'left' && isLtr) ||\n            (position === 'right' && !isLtr)) {\n            originPosition = {originX: 'start', originY: 'center'};\n        } else if (\n            position === 'bottom' ||\n            (position === 'right' && isLtr) ||\n            (position === 'left' && !isLtr)) {\n            originPosition = {originX: 'end', originY: 'center'};\n        } else {\n            throw getMcTooltipInvalidPositionError(position);\n        }\n\n        const {x, y} = this.invertPosition(originPosition.originX, originPosition.originY);\n\n        return {\n            main: originPosition,\n            fallback: {originX: x, originY: y}\n        };\n    }\n\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    getOverlayPosition(): {main: IOverlayConnectionPosition; fallback: IOverlayConnectionPosition} {\n        const position = this.mcPlacement;\n        const isLtr = !this.direction || this.direction.value === 'ltr';\n        let overlayPosition: IOverlayConnectionPosition;\n\n        if (position === 'top') {\n            overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n        } else if (position === 'bottom') {\n            overlayPosition = {overlayX: 'center', overlayY: 'top'};\n        } else if (\n            position === 'top' ||\n            (position === 'left' && isLtr) ||\n            (position === 'right' && !isLtr)) {\n            overlayPosition = {overlayX: 'end', overlayY: 'center'};\n        } else if (\n            position === 'bottom' ||\n            (position === 'right' && isLtr) ||\n            (position === 'left' && !isLtr)) {\n            overlayPosition = {overlayX: 'start', overlayY: 'center'};\n        } else {\n            throw getMcTooltipInvalidPositionError(position);\n        }\n\n        const {x, y} = this.invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n        return {\n            main: overlayPosition,\n            fallback: {overlayX: x, overlayY: y}\n        };\n    }\n\n    /** Inverts an overlay position. */\n    private invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n        let newX: HorizontalConnectionPos = x;\n        let newY: VerticalConnectionPos = y;\n        if (this.mcPlacement === 'top' || this.mcPlacement === 'bottom') {\n            if (y === 'top') {\n                newY = 'bottom';\n            } else if (y === 'bottom') {\n                newY = 'top';\n            }\n        } else {\n            if (x === 'end') {\n                newX = 'start';\n            } else if (x === 'start') {\n                newX = 'end';\n            }\n        }\n\n        return {x: newX, y: newY};\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\n\nimport {\n    McTooltipComponent,\n    McTooltip,\n    MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './tooltip.component';\n\n\n@NgModule({\n    declarations: [McTooltipComponent, McTooltip],\n    exports: [McTooltipComponent, McTooltip],\n    imports: [CommonModule, OverlayModule],\n    providers: [MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],\n    entryComponents: [McTooltipComponent]\n})\nexport class McToolTipModule {\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Input,\n    ViewEncapsulation,\n    Directive,\n    ElementRef,\n    OnDestroy,\n    Optional,\n    Self\n} from '@angular/core';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { CanDisable, mixinDisabled, CanDisableCtor } from '@ptsecurity/mosaic/core';\nimport { McDropdownTrigger } from '@ptsecurity/mosaic/dropdown';\n\n\n@Directive({\n    selector: 'mc-vertical-navbar-item-icon',\n    host: {\n        class: 'mc-vertical-navbar__item-icon'\n    }\n})\nexport class McVerticalNavbarItemIcon {}\n\n\n@Component({\n    selector: 'mc-vertical-navbar-badge',\n    template: `\n        <span class=\"mc-badge mc-badge_light\">\n            <ng-content></ng-content>\n        </span>\n    `,\n    host: {\n        class: 'mc-vertical-navbar__badge'\n    }\n})\nexport class McVerticalNavbarItemBadge {}\n\n\nclass McVerticalNavbarItemBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McVerticalNavbarMixinBase: CanDisableCtor & typeof McVerticalNavbarItemBase\n    = mixinDisabled(McVerticalNavbarItemBase);\n\n\n@Component({\n    selector: 'a[mc-vertical-navbar-item], mc-vertical-navbar-item',\n    templateUrl: './vertical-navbar-item.component.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    styleUrls: ['./vertical-navbar-item.component.css'],\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': 'disabled ? -1 : 0'\n    }\n})\nexport class McVerticalNavbarItem extends _McVerticalNavbarMixinBase implements CanDisable, OnDestroy {\n    @Input() tabIndex: number = 0;\n\n    constructor(\n        private element: ElementRef,\n        private focusMonitor: FocusMonitor,\n        @Optional() @Self() private trigger: McDropdownTrigger\n    ) {\n        super(element);\n\n        this.focusMonitor.monitor(this.element.nativeElement).subscribe();\n    }\n\n    get hasDropdownAttached() {\n        return !! this.trigger;\n    }\n\n    ngOnDestroy() {\n        this.focusMonitor.stopMonitoring(this.element.nativeElement);\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ViewEncapsulation,\n    Input,\n    ChangeDetectorRef\n} from '@angular/core';\n\nimport { toggleVerticalNavbarAnimation } from './vertical-navbar.animation';\n\n\n@Directive({\n    selector: 'mc-vertical-navbar-header, a[mc-vertical-navbar-header]',\n    host: {\n        class: 'mc-vertical-navbar__header'\n    }\n})\nexport class McVerticalNavbarHeader {}\n\n@Directive({\n    selector: 'mc-vertical-navbar-title',\n    host: {\n        class: 'mc-vertical-navbar__title'\n    }\n})\nexport class McVerticalNavbarTitle {}\n\n@Component({\n    selector: 'mc-vertical-navbar',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    templateUrl: './vertical-navbar.component.html',\n    styleUrls: ['./vertical-navbar.component.css'],\n    encapsulation: ViewEncapsulation.None,\n    animations: [\n        toggleVerticalNavbarAnimation()\n    ]\n})\nexport class McVerticalNavbar {\n\n    @Input() expanded: boolean = false;\n\n    constructor(\n        private cd: ChangeDetectorRef\n    ) {}\n\n    toggle() {\n        this.expanded = !this.expanded;\n        this.cd.markForCheck();\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport {\n    McVerticalNavbarItem,\n    McVerticalNavbarItemBadge,\n    McVerticalNavbarItemIcon\n} from './vertical-navbar-item.component';\nimport { McVerticalNavbar, McVerticalNavbarHeader, McVerticalNavbarTitle } from './vertical-navbar.component';\n\n\nconst COMPONENTS = [\n    McVerticalNavbar,\n    McVerticalNavbarTitle,\n    McVerticalNavbarItem,\n    McVerticalNavbarItemIcon,\n    McVerticalNavbarItemBadge,\n    McVerticalNavbarHeader\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        McIconModule\n    ],\n    exports: COMPONENTS,\n    declarations: COMPONENTS\n})\nexport class McVerticalNavbarModule {}\n","import { Version } from '@angular/core';\n\n\nexport const VERSION = new Version('1.0.0-beta.6-d2e885e');\n","export const selectEvents = 'selectEvents';\n","import { InjectionToken } from '@angular/core';\nimport { IScrollStrategy, Overlay, RepositionScrollStrategy } from '@ptsecurity/cdk/overlay';\n\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 224;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 1;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\n/* tslint:disable-next-line:no-magic-numbers */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MC_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-select-scroll-strategy');\n\n/** @docs-private */\nexport function mcSelectScrollStrategyProviderFactory(overlay: Overlay):\n    () => RepositionScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MC_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MC_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: mcSelectScrollStrategyProviderFactory\n};\n","import { DOCUMENT } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    forwardRef,\n    Host,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    Optional,\n    ViewContainerRef\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW } from '@ptsecurity/cdk/keycodes';\nimport {\n    FlexibleConnectedPositionStrategy,\n    Overlay,\n    OverlayConfig,\n    OverlayRef,\n    IPositionStrategy,\n    IScrollStrategy, IConnectedPosition\n} from '@ptsecurity/cdk/overlay';\nimport { TemplatePortal } from '@ptsecurity/cdk/portal';\nimport { ViewportRuler } from '@ptsecurity/cdk/scrolling';\nimport {\n    countGroupLabelsBeforeOption,\n    getOptionScrollPosition,\n    McOption,\n    McOptionSelectionChange\n} from '@ptsecurity/mosaic/core';\nimport { McFormField } from '@ptsecurity/mosaic/form-field';\nimport { Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable } from 'rxjs';\nimport { filter, take, switchMap, delay, tap, map } from 'rxjs/operators';\n\nimport { McAutocompleteOrigin } from './autocomplete-origin.directive';\nimport { McAutocomplete } from './autocomplete.component';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 32;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\nexport const AUTOCOMPLETE_BORDER_WIDTH: number = 2;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MC_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-autocomplete-scroll-strategy');\n\n// tslint:disable-next-line naming-convention\nexport function MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => IScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\nexport const MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McAutocompleteTrigger),\n    multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMcAutocompleteMissingPanelError(): Error {\n    return Error('Attempting to open an undefined instance of `mc-autocomplete`. ' +\n        'Make sure that the id passed to the `mcAutocomplete` is correct and that ' +\n        'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n    selector: `input[mcAutocomplete], textarea[mcAutocomplete]`,\n    host: {\n        class: 'mc-autocomplete-trigger',\n        '[attr.autocomplete]': 'autocompleteAttribute',\n        // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n        // a little earlier. This avoids issues where IE delays the focusing of the input.\n        '(focusin)': 'handleFocus()',\n        '(blur)': 'onTouched()',\n        '(input)': 'handleInput($event)',\n        '(keydown)': 'handleKeydown($event)',\n        '(click)': 'handleClick($event)'\n    },\n    exportAs: 'mcAutocompleteTrigger',\n    providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class McAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n    // @ts-ignore\n    readonly optionSelections: Observable<McOptionSelectionChange> = defer(() => {\n        if (this.autocomplete && this.autocomplete.options) {\n            return merge(...this.autocomplete.options.map((option) => option.onSelectionChange));\n        }\n\n        // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n        // Return a stream that we'll replace with the real one once everything is in place.\n        return this.zone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelections));\n    });\n\n    /** The currently active option, coerced to MatOption type. */\n    get activeOption(): McOption | null {\n        if (this.autocomplete && this.autocomplete.keyManager) {\n            return this.autocomplete.keyManager.activeItem;\n        }\n\n        return null;\n    }\n\n    get panelOpen(): boolean {\n        return this.overlayAttached && this.autocomplete.showPanel;\n    }\n\n    /** The autocomplete panel to be attached to this trigger. */\n    @Input('mcAutocomplete') autocomplete: McAutocomplete;\n\n    /**\n     * Reference relative to which to position the autocomplete panel.\n     * Defaults to the autocomplete trigger element.\n     */\n    @Input('mcAutocompleteConnectedTo') connectedTo: McAutocompleteOrigin;\n\n    /**\n     * `autocomplete` attribute to be set on the input element.\n     * @docs-private\n     */\n    @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     */\n    @Input('mcAutocompleteDisabled')\n    get autocompleteDisabled(): boolean {\n        return this._autocompleteDisabled;\n    }\n\n    set autocompleteDisabled(value: boolean) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n\n    private _autocompleteDisabled = false;\n\n    private overlayAttached: boolean = false;\n\n    private overlayRef: OverlayRef | null;\n\n    private portal: TemplatePortal;\n\n    private componentDestroyed = false;\n\n    private scrollStrategy: () => IScrollStrategy;\n\n    /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n    private previousValue: string | number | null;\n\n    /** Strategy that is used to position the panel. */\n    private positionStrategy: FlexibleConnectedPositionStrategy;\n\n    /** The subscription for closing actions (some are bound to document). */\n    private closingActionsSubscription: Subscription;\n\n    /** Subscription to viewport size changes. */\n    private viewportSubscription = Subscription.EMPTY;\n\n    /**\n     * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n     * closed autocomplete from being reopened if the user switches to another browser tab and then\n     * comes back.\n     */\n    private canOpenOnNextFocus = true;\n\n    /** Stream of keyboard events that can close the panel. */\n    private readonly closeKeyEventStream = new Subject<void>();\n\n    constructor(\n        private elementRef: ElementRef<HTMLInputElement>,\n        private viewContainerRef: ViewContainerRef,\n        private changeDetectorRef: ChangeDetectorRef,\n        private overlay: Overlay,\n        private zone: NgZone,\n        @Inject(MC_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n        @Optional() private dir: Directionality,\n        @Optional() @Host() private formField: McFormField,\n        @Optional() @Inject(DOCUMENT) private document: any,\n        // @breaking-change 8.0.0 Make `_viewportRuler` required.\n        private viewportRuler?: ViewportRuler\n    ) {\n        // tslint:disable-next-line no-typeof-undefined\n        if (typeof window !== 'undefined') {\n            zone.runOutsideAngular(() => {\n                window.addEventListener('blur', this.windowBlurHandler);\n            });\n        }\n\n        this.scrollStrategy = scrollStrategy;\n    }\n\n    ngOnDestroy() {\n        // tslint:disable-next-line no-typeof-undefined\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this.windowBlurHandler);\n        }\n\n        this.viewportSubscription.unsubscribe();\n        this.componentDestroyed = true;\n        this.destroyPanel();\n        this.closeKeyEventStream.complete();\n    }\n\n    /** `View -> model callback called when value changes` */\n    // tslint:disable-next-line no-empty\n    onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when autocomplete has been touched` */\n    // tslint:disable-next-line no-empty\n    onTouched: () => void = () => {};\n\n    /** Opens the autocomplete suggestion panel. */\n    openPanel(): void {\n        this.attachOverlay();\n    }\n\n    closePanel(): void {\n        if (!this.overlayAttached) { return; }\n\n        if (this.panelOpen) {\n            this.autocomplete.closed.emit();\n        }\n\n        this.autocomplete.isOpen = this.overlayAttached = false;\n\n        if (this.overlayRef && this.overlayRef.hasAttached()) {\n            this.overlayRef.detach();\n            this.closingActionsSubscription.unsubscribe();\n        }\n\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this.componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this.changeDetectorRef.detectChanges();\n        }\n    }\n\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n    updatePosition(): void {\n        if (this.overlayAttached) {\n            this.overlayRef!.updatePosition();\n        }\n    }\n\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    get panelClosingActions(): Observable<McOptionSelectionChange | null> {\n        return merge(\n            this.optionSelections,\n            this.autocomplete.keyManager.tabOut.pipe(filter(() => this.overlayAttached)),\n            this.closeKeyEventStream,\n            this.getOutsideClickStream(),\n            this.overlayRef ?\n                this.overlayRef.detachments().pipe(filter(() => this.overlayAttached)) :\n                observableOf()\n        ).pipe(\n            // Normalize the output so we return a consistent type.\n            map((event) => event instanceof McOptionSelectionChange ? event : null)\n        );\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any): void {\n        Promise.resolve(null).then(() => this.setTriggerValue(value));\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => {}): void {\n        this.onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => {}) {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.elementRef.nativeElement.disabled = isDisabled;\n    }\n\n    handleKeydown(event: KeyboardEvent): void {\n        // tslint:disable-next-line deprecation\n        const keyCode = event.keyCode;\n\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE) {\n            event.preventDefault();\n        }\n\n        if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n            this.activeOption.selectViaInteraction();\n            this.resetActiveItem();\n            event.preventDefault();\n        } else if (this.autocomplete) {\n            const prevActiveItem = this.autocomplete.keyManager.activeItem;\n\n            if (this.panelOpen || keyCode === TAB) {\n                this.autocomplete.onKeydown(event);\n            } else if (keyCode === DOWN_ARROW && this.canOpen()) {\n                this.openPanel();\n            }\n\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n            if (isArrowKey || this.autocomplete.keyManager.activeItem !== prevActiveItem) {\n                this.scrollToOption();\n            }\n        }\n    }\n\n    handleInput(event: KeyboardEvent): void {\n        const target = event.target as HTMLInputElement;\n        let value: number | string | null = target.value;\n\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value === '' ? null : parseFloat(value);\n        }\n\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this.previousValue !== value) {\n            this.previousValue = value;\n            this.onChange(value);\n\n            if (this.canOpen() && this.document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n\n    handleFocus(): void {\n        if (!this.canOpenOnNextFocus) {\n            this.canOpenOnNextFocus = true;\n        } else if (this.canOpen()) {\n            this.previousValue = this.elementRef.nativeElement.value;\n            this.attachOverlay();\n        }\n    }\n\n    handleClick($event: MouseEvent) {\n        if (this.canOpen() && this.document.activeElement === $event.target) {\n            this.openPanel();\n        }\n    }\n\n    /** Stream of clicks outside of the autocomplete panel. */\n    private getOutsideClickStream(): Observable<any> {\n        if (!this.document) { return observableOf(null); }\n\n        return fromEvent<MouseEvent>(this.document, 'click')\n            .pipe(filter((event) => {\n                const clickTarget = event.target as HTMLElement;\n                const formField = this.formField ?\n                    this.formField._elementRef.nativeElement : null;\n\n                return this.overlayAttached &&\n                    clickTarget !== this.elementRef.nativeElement &&\n                    (!formField || !formField.contains(clickTarget)) &&\n                    (!!this.overlayRef && !this.overlayRef.overlayElement.contains(clickTarget));\n            }));\n    }\n\n    /**\n     * Event handler for when the window is blurred. Needs to be an\n     * arrow function in order to preserve the context.\n     */\n    private windowBlurHandler = () => {\n        // If the user blurred the window while the autocomplete is focused, it means that it'll be\n        // refocused when they come back. In this case we want to skip the first focus event, if the\n        // pane was closed, in order to avoid reopening it unintentionally.\n        this.canOpenOnNextFocus = this.document.activeElement !== this.elementRef.nativeElement || this.panelOpen;\n    }\n\n    /**\n     * Given that we are not actually focusing active options, we must manually adjust scroll\n     * to reveal options below the fold. First, we find the offset of the option from the top\n     * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n     * the panel height + the option height, so the active option will be just visible at the\n     * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n     * will become the offset. If that offset is visible within the panel already, the scrollTop is\n     * not adjusted.\n     */\n    private scrollToOption(): void {\n        const index = this.autocomplete.keyManager.activeItemIndex || 0;\n        const labelCount = countGroupLabelsBeforeOption(index,\n            this.autocomplete.options, this.autocomplete.optionGroups);\n\n        const newScrollPosition = getOptionScrollPosition(\n            index + labelCount,\n            AUTOCOMPLETE_OPTION_HEIGHT,\n            this.autocomplete.getScrollTop(),\n            AUTOCOMPLETE_PANEL_HEIGHT\n        );\n\n        this.autocomplete.setScrollTop(newScrollPosition);\n    }\n\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    private subscribeToClosingActions(): Subscription {\n        const firstStable = this.zone.onStable.asObservable()\n            .pipe(take(1));\n        const optionChanges = this.autocomplete.options.changes\n            .pipe(\n                tap(() => this.positionStrategy.reapplyLastPosition()),\n                // Defer emitting to the stream until the next tick, because changing\n                // bindings in here will cause \"changed after checked\" errors.\n                delay(0)\n            );\n\n        // When the zone is stable initially, and when the option list changes...\n        return merge(firstStable, optionChanges)\n            .pipe(\n                // create a new stream of panelClosingActions, replacing any previous streams\n                // that were created, and flatten it so our stream only emits closing events...\n                switchMap(() => {\n                    this.resetActiveItem();\n                    this.autocomplete.setVisibility();\n\n                    if (this.panelOpen) {\n                        this.overlayRef!.updatePosition();\n                    }\n\n                    return this.panelClosingActions;\n                }),\n                // when the first closing event occurs...\n                take(1)\n            )\n            // set the value, close the panel, and complete.\n            .subscribe((event) => this.setValueAndClose(event));\n    }\n\n    /** Destroys the autocomplete suggestion panel. */\n    private destroyPanel(): void {\n        if (this.overlayRef) {\n            this.closePanel();\n            this.overlayRef.dispose();\n            this.overlayRef = null;\n        }\n    }\n\n    private setTriggerValue(value: any): void {\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n            this.autocomplete.displayWith(value) :\n            value;\n\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        const inputValue = toDisplay != null ? toDisplay : '';\n\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this.formField) {\n            this.formField._control.value = inputValue;\n        } else {\n            this.elementRef.nativeElement.value = inputValue;\n        }\n\n        this.previousValue = inputValue;\n    }\n\n    /** This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    private setValueAndClose(event: McOptionSelectionChange | null): void {\n        if (event && event.source) {\n            this.clearPreviousSelectedOption(event.source);\n            this.setTriggerValue(event.source.value);\n            this.onChange(event.source.value);\n            this.elementRef.nativeElement.focus();\n\n            this.autocomplete.emitSelectEvent(event.source);\n        }\n\n        this.closePanel();\n    }\n\n    /** Clear any previous selected option and emit a selection change event for this option */\n    private clearPreviousSelectedOption(skip: McOption) {\n        this.autocomplete.options.forEach((option) => {\n            if (option !== skip && option.selected) {\n                option.deselect();\n            }\n        });\n    }\n\n    private attachOverlay(): void {\n        if (!this.autocomplete) {\n            throw getMcAutocompleteMissingPanelError();\n        }\n\n        let overlayRef = this.overlayRef;\n\n        if (!overlayRef) {\n            this.portal = new TemplatePortal(this.autocomplete.template, this.viewContainerRef);\n            overlayRef = this.overlay.create(this.getOverlayConfig());\n            this.overlayRef = overlayRef;\n\n            // Use the `keydownEvents` in order to take advantage of\n            // the overlay event targeting provided by the CDK overlay.\n            overlayRef.keydownEvents().subscribe((event) => {\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                // tslint:disable-next-line deprecation\n                if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n                    this.resetActiveItem();\n                    this.closeKeyEventStream.next();\n                }\n            });\n\n            if (this.viewportRuler) {\n                this.viewportSubscription = this.viewportRuler.change().subscribe(() => {\n                    if (this.panelOpen && overlayRef) {\n                        overlayRef.updateSize({ width: this.getPanelWidth() });\n                    }\n                });\n            }\n        } else {\n            const position = overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n\n            // Update the trigger, panel width and direction, in case anything has changed.\n            position.setOrigin(this.getConnectedElement());\n            overlayRef.updateSize({ width: this.getPanelWidth() });\n        }\n\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this.portal);\n            this.closingActionsSubscription = this.subscribeToClosingActions();\n        }\n\n        const wasOpen = this.panelOpen;\n\n        this.autocomplete.setVisibility();\n        this.autocomplete.isOpen = this.overlayAttached = true;\n\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n\n    private getOverlayConfig(): OverlayConfig {\n        return new OverlayConfig({\n            positionStrategy: this.getOverlayPosition(),\n            scrollStrategy: this.scrollStrategy(),\n            width: this.getPanelWidth(),\n            direction: this.dir\n        });\n    }\n\n    private getOverlayPosition(): IPositionStrategy {\n        this.positionStrategy = this.overlay.position()\n            .flexibleConnectedTo(this.getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false)\n            .withPositions([\n                {\n                    originX: 'start',\n                    originY: 'bottom',\n                    overlayX: 'start',\n                    overlayY: 'top'\n                },\n                {\n                    originX: 'start',\n                    originY: 'top',\n                    overlayX: 'start',\n                    overlayY: 'bottom',\n\n                    // The overlay edge connected to the trigger should have squared corners, while\n                    // the opposite end has rounded corners. We apply a CSS class to swap the\n                    // border-radius based on the overlay position.\n                    panelClass: 'mc-autocomplete-panel-above'\n                }\n            ] as IConnectedPosition[]);\n\n        return this.positionStrategy;\n    }\n\n    private getConnectedElement(): ElementRef {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n\n        return this.formField ? this.formField.getConnectedOverlayOrigin() : this.elementRef;\n    }\n\n    private getPanelWidth(): number | string {\n        return this.autocomplete.panelWidth || this.getHostWidth() - AUTOCOMPLETE_BORDER_WIDTH;\n    }\n\n    private getHostWidth(): number {\n        return this.getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     */\n    private resetActiveItem(): void {\n        this.autocomplete.keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n    }\n\n    private canOpen(): boolean {\n        const element = this.elementRef.nativeElement;\n\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n}\n","import {\n    AfterContentInit,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    Self,\n    ViewContainerRef\n} from '@angular/core';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { Direction, Directionality } from '@ptsecurity/cdk/bidi';\nimport { LEFT_ARROW, RIGHT_ARROW, SPACE, ENTER } from '@ptsecurity/cdk/keycodes';\nimport {\n    FlexibleConnectedPositionStrategy,\n    HorizontalConnectionPos,\n    Overlay,\n    OverlayConfig,\n    OverlayRef,\n    VerticalConnectionPos,\n    IScrollStrategy\n} from '@ptsecurity/cdk/overlay';\nimport { normalizePassiveListenerOptions } from '@ptsecurity/cdk/platform';\nimport { TemplatePortal } from '@ptsecurity/cdk/portal';\nimport { asapScheduler, merge, of as observableOf, Subscription } from 'rxjs';\nimport { delay, filter, take, takeUntil } from 'rxjs/operators';\n\nimport { throwMcDropdownMissingError } from './dropdown-errors';\nimport { McDropdownItem } from './dropdown-item';\nimport { McDropdownPanel } from './dropdown-panel';\nimport { DropdownPositionX, DropdownPositionY } from './dropdown-positions';\nimport { McDropdown } from './dropdown.component';\n\n\n/** Injection token that determines the scroll handling while the dropdown is open. */\nexport const MC_DROPDOWN_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-dropdown-scroll-strategy');\n\n/** @docs-private */\nexport function MC_DROPDOWN_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => IScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_DROPDOWN_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_DROPDOWN_SCROLL_STRATEGY_FACTORY\n};\n\n/** Default top padding of the nested dropdown panel. */\nexport const NESTED_PANEL_TOP_PADDING = 2;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * This directive is intended to be used in conjunction with an mc-dropdown tag.  It is\n * responsible for toggling the display of the provided dropdown instance.\n */\n@Directive({\n    selector: `[mcDropdownTriggerFor]`,\n    host: {\n        'aria-haspopup': 'true',\n        '[attr.aria-expanded]': 'opened || null',\n        '(mousedown)': '_handleMousedown($event)',\n        '(keydown)': '_handleKeydown($event)',\n        '(click)': '_handleClick($event)'\n    },\n    exportAs: 'mcDropdownTrigger'\n})\nexport class McDropdownTrigger implements AfterContentInit, OnDestroy {\n\n\n    /**\n     * Handles touch start events on the trigger.\n     * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n     */\n    private _handleTouchStart = () => this._openedBy = 'touch';\n\n    /** The text direction of the containing app. */\n    get dir(): Direction {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n\n    // Tracking input type is necessary so it's possible to only auto-focus\n    // the first item of the list when the dropdown is opened via the keyboard\n    _openedBy: 'mouse' | 'touch' | null = null;\n\n\n    /** References the dropdown instance that the trigger is associated with. */\n    @Input('mcDropdownTriggerFor')\n    get dropdown() {\n        return this._dropdown;\n    }\n\n    set dropdown(dropdown: McDropdownPanel) {\n        if (dropdown === this._dropdown) {\n            return;\n        }\n\n        this._dropdown = dropdown;\n        this._closeSubscription.unsubscribe();\n\n        if (dropdown) {\n            this._closeSubscription = dropdown.closed.asObservable().subscribe(reason => {\n                this._destroy();\n\n                // If a click closed the dropdown, we should close the entire chain of nested dropdowns.\n                if ((reason === 'click' || reason === 'tab') && this._parent) {\n                    this._parent.closed.emit(reason);\n                }\n            });\n        }\n    }\n\n    private _dropdown: McDropdownPanel;\n\n    /** Data to be passed along to any lazily-rendered content. */\n    @Input('mcDropdownTriggerData') data: any;\n\n    /** Event emitted when the associated dropdown is opened. */\n    @Output() readonly dropdownOpened: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Event emitted when the associated dropdown is closed. */\n    @Output() readonly dropdownClosed: EventEmitter<void> = new EventEmitter<void>();\n\n    private _portal: TemplatePortal;\n    private _overlayRef: OverlayRef | null = null;\n    private _opened: boolean = false;\n    private _closeSubscription = Subscription.EMPTY;\n    private _hoverSubscription = Subscription.EMPTY;\n\n    constructor(private _overlay: Overlay,\n                private _element: ElementRef<HTMLElement>,\n                private _viewContainerRef: ViewContainerRef,\n                @Inject(MC_DROPDOWN_SCROLL_STRATEGY) private _scrollStrategy: any,\n                @Optional() private _parent: McDropdown,\n                @Optional() @Self() private _dropdownItemInstance: McDropdownItem,\n                @Optional() private _dir: Directionality,\n                private _focusMonitor?: FocusMonitor) {\n\n        _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n            passiveEventListenerOptions);\n\n        if (_dropdownItemInstance) {\n            _dropdownItemInstance._triggersNestedDropdown = this.triggersNestedDropdown();\n        }\n    }\n\n    ngAfterContentInit() {\n        this._check();\n        this._handleHover();\n    }\n\n    ngOnDestroy() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n\n        this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n            passiveEventListenerOptions);\n\n        this._cleanUpSubscriptions();\n        this._closeSubscription.unsubscribe();\n    }\n\n    /** Whether the dropdown is open. */\n    get opened(): boolean {\n        return this._opened;\n    }\n\n    /** Whether the dropdown triggers a nested dropdown or a top-level one. */\n    triggersNestedDropdown(): boolean {\n        return !!(this._dropdownItemInstance && this._parent);\n    }\n\n    /** Toggles the dropdown between the open and closed states. */\n    toggle(): void {\n        // tslint:disable-next-line:no-void-expression\n        return this._opened ? this.close() : this.open();\n    }\n\n    /** Opens the dropdown. */\n    open(): void {\n        if (this._opened) {\n            return;\n        }\n\n        this._check();\n\n        const overlayRef = this._createOverlay();\n        const overlayConfig = overlayRef.getConfig();\n\n        this._setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\n        overlayConfig.hasBackdrop = this.dropdown.hasBackdrop == null ? !this.triggersNestedDropdown() :\n            this.dropdown.hasBackdrop;\n        overlayRef.attach(this._getPortal());\n\n        if (this.dropdown.lazyContent) {\n            this.dropdown.lazyContent.attach(this.data);\n        }\n\n        this._closeSubscription = this._closingActions().subscribe(() => this.close());\n        this._init();\n\n        if (this.dropdown instanceof McDropdown) {\n            this.dropdown._startAnimation();\n        }\n    }\n\n    /** Closes the dropdown. */\n    close(): void {\n        this.dropdown.closed.emit();\n    }\n\n    /**\n     * Focuses the dropdown trigger.\n     * @param origin Source of the dropdown trigger's focus.\n     */\n    focus(origin: FocusOrigin = 'program') {\n        if (this._focusMonitor) {\n            this._focusMonitor.focusVia(this._element.nativeElement, origin);\n        } else {\n            this._element.nativeElement.focus();\n        }\n    }\n\n    /** Closes the dropdown and does the necessary cleanup. */\n    private _destroy() {\n        if (!this._overlayRef || !this.opened) {\n            return;\n        }\n\n        const dropdown = this.dropdown;\n\n        this._closeSubscription.unsubscribe();\n        this._overlayRef.detach();\n\n        if (dropdown instanceof McDropdown) {\n            dropdown._resetAnimation();\n\n            if (dropdown.lazyContent) {\n                // Wait for the exit animation to finish before detaching the content.\n                dropdown._animationDone\n                    .pipe(\n                        filter((event) => event.toState === 'void'),\n                        take(1),\n                        // Interrupt if the content got re-attached.\n                        takeUntil(dropdown.lazyContent._attached)\n                    )\n                    .subscribe(() => dropdown.lazyContent!.detach(), undefined, () => {\n                        // No matter whether the content got re-attached, reset the dropdown.\n                        this._reset();\n                    });\n            } else {\n                this._reset();\n            }\n        } else {\n            this._reset();\n\n            if (dropdown.lazyContent) {\n                dropdown.lazyContent.detach();\n            }\n        }\n    }\n\n    /**\n     * This method sets the dropdown state to open and focuses the first item if\n     * the dropdown was opened via the keyboard.\n     */\n    private _init(): void {\n        this.dropdown.parent = this.triggersNestedDropdown() ? this._parent : undefined;\n        this.dropdown.direction = this.dir;\n        this._setIsOpened(true);\n        this.dropdown.focusFirstItem(this._openedBy || 'program');\n    }\n\n    /**\n     * This method resets the dropdown when it's closed, most importantly restoring\n     * focus to the dropdown trigger if the dropdown was opened via the keyboard.\n     */\n    private _reset(): void {\n        this._setIsOpened(false);\n\n        // We should reset focus if the user is navigating using a keyboard or\n        // if we have a top-level trigger which might cause focus to be lost\n        // when clicking on the backdrop.\n        if (!this._openedBy) {\n            // Note that the focus style will show up both for `program` and\n            // `keyboard` so we don't have to specify which one it is.\n            this.focus();\n        } else if (!this.triggersNestedDropdown()) {\n            this.focus(this._openedBy);\n        }\n\n        this._openedBy = null;\n    }\n\n    // set state rather than toggle to support triggers sharing a dropdown\n    private _setIsOpened(isOpen: boolean): void {\n        this._opened = isOpen;\n        // tslint:disable-next-line:no-void-expression\n        this._opened ? this.dropdownOpened.emit() : this.dropdownClosed.emit();\n\n        if (this.triggersNestedDropdown()) {\n            this._dropdownItemInstance._highlighted = isOpen;\n        }\n    }\n\n    /**\n     * This method checks that a valid instance of McDropdown has been passed into\n     * mcDropdownTriggerFor. If not, an exception is thrown.\n     */\n    private _check() {\n        if (!this.dropdown) {\n            throwMcDropdownMissingError();\n        }\n    }\n\n    /**\n     * This method creates the overlay from the provided dropdown's template and saves its\n     * OverlayRef so that it can be attached to the DOM when open is called.\n     */\n    private _createOverlay(): OverlayRef {\n        if (!this._overlayRef) {\n            const config = this._getOverlayConfig();\n            this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n            this._overlayRef = this._overlay.create(config);\n\n            // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n            // Ideally we'd also have our keyboard event logic in here, however doing so will\n            // break anybody that may have implemented the `McDropdownPanel` themselves.\n            this._overlayRef.keydownEvents().subscribe();\n        }\n\n        return this._overlayRef;\n    }\n\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @returns OverlayConfig\n     */\n    private _getOverlayConfig(): OverlayConfig {\n        return new OverlayConfig({\n            positionStrategy: this._overlay.position()\n                .flexibleConnectedTo(this._element)\n                .withLockedPosition()\n                .withTransformOriginOn('.mc-dropdown__panel'),\n            backdropClass: this.dropdown.backdropClass || 'cdk-overlay-transparent-backdrop',\n            scrollStrategy: this._scrollStrategy(),\n            direction: this._dir\n        });\n    }\n\n    /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the dropdown based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     */\n    private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n        if (this.dropdown.setPositionClasses) {\n            position.positionChanges.subscribe(change => {\n                const posX: DropdownPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n                const posY: DropdownPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n                this.dropdown.setPositionClasses!(posX, posY);\n            });\n        }\n    }\n\n    /**\n     * Sets the appropriate positions on a position strategy\n     * so the overlay connects with the trigger correctly.\n     * @param positionStrategy Strategy whose position to update.\n     */\n    private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n\n        let [originX, originFallbackX, overlayX, overlayFallbackX]: HorizontalConnectionPos[] =\n            this.dropdown.xPosition === 'before' ?\n                ['end', 'start', 'end', 'start'] :\n                ['start', 'end', 'start', 'end'];\n\n        let [overlayY, overlayFallbackY, originY, originFallbackY]: VerticalConnectionPos[] =\n            this.dropdown.yPosition === 'above' ?\n                ['bottom', 'top', 'bottom', 'top'] :\n                ['top', 'bottom', 'top', 'bottom'];\n\n        let offsetY = 0;\n\n        if (this.triggersNestedDropdown()) {\n            // When the dropdown is nested, it should always align itself\n            // to the edges of the trigger, instead of overlapping it.\n            overlayFallbackX = originX = this.dropdown.xPosition === 'before' ? 'start' : 'end';\n            originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n            offsetY = overlayY === 'bottom' ? NESTED_PANEL_TOP_PADDING : -NESTED_PANEL_TOP_PADDING;\n        } else {\n            if (!this.dropdown.overlapTriggerY) {\n                originY = overlayY === 'top' ? 'bottom' : 'top';\n                originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n            }\n\n            if (!this.dropdown.overlapTriggerX) {\n                overlayFallbackX = originX = this.dropdown.xPosition === 'before' ? 'start' : 'end';\n                originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n            }\n        }\n\n        positionStrategy.withPositions([\n            {originX, originY, overlayX, overlayY, offsetY},\n            {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n            {\n                originX,\n                originY: originFallbackY,\n                overlayX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY\n            },\n            {\n                originX: originFallbackX,\n                originY: originFallbackY,\n                overlayX: overlayFallbackX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY\n            }\n        ]);\n    }\n\n    /** Cleans up the active subscriptions. */\n    private _cleanUpSubscriptions(): void {\n        this._closeSubscription.unsubscribe();\n        this._hoverSubscription.unsubscribe();\n    }\n\n    /** Returns a stream that emits whenever an action that should close the dropdown occurs. */\n    private _closingActions() {\n        const backdrop = this._overlayRef!.backdropClick();\n        const detachments = this._overlayRef!.detachments();\n        const parentClose = this._parent ? this._parent.closed : observableOf();\n        const hover = this._parent ? this._parent._hovered().pipe(\n            filter((active) => active !== this._dropdownItemInstance),\n            filter(() => this._opened)\n        ) : observableOf();\n\n        return merge(backdrop, parentClose, hover, detachments);\n    }\n\n    /** Handles mouse presses on the trigger. */\n    private _handleMousedown(event: MouseEvent): void {\n        // Since right or middle button clicks won't trigger the `click` event,\n        // we shouldn't consider the dropdown as opened by mouse in those cases.\n        this._openedBy = event.button === 0 ? 'mouse' : null;\n\n        // Since clicking on the trigger won't close the dropdown if it opens a nested dropdown,\n        // we should prevent focus from moving onto it via click to avoid the\n        // highlight from lingering on the dropdown item.\n        if (this.triggersNestedDropdown()) {\n            event.preventDefault();\n        }\n    }\n\n    /** Handles key presses on the trigger. */\n    private _handleKeydown(event: KeyboardEvent): void {\n        const keyCode = event.keyCode;\n\n        if (keyCode === SPACE || keyCode === ENTER) {\n            this.open();\n        }\n\n        if (this.triggersNestedDropdown() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n            this.open();\n        }\n    }\n\n    /** Handles click events on the trigger. */\n    private _handleClick(event: MouseEvent): void {\n        if (this.triggersNestedDropdown()) {\n            // Stop event propagation to avoid closing the parent dropdown.\n            event.stopPropagation();\n            this.open();\n        } else {\n            this.toggle();\n        }\n    }\n\n    /** Handles the cases where the user hovers over the trigger. */\n    private _handleHover() {\n        // Subscribe to changes in the hovered item in order to toggle the panel.\n        if (!this.triggersNestedDropdown()) {\n            return;\n        }\n\n        this._hoverSubscription = this._parent._hovered()\n        // Since we might have multiple competing triggers for the same dropdown (e.g. a nested dropdown\n        // with different data and triggers), we have to delay it by a tick to ensure that\n        // it won't be closed immediately after it is opened.\n            .pipe(\n                filter((active) => active === this._dropdownItemInstance && !active.disabled),\n                delay(0, asapScheduler)\n            )\n            .subscribe(() => {\n                this._openedBy = 'mouse';\n\n                // If the same dropdown is used between multiple triggers, it might still be animating\n                // while the new trigger tries to re-open it. Wait for the animation to finish\n                // before doing so. Also interrupt if the user moves to another item.\n                if (this.dropdown instanceof McDropdown && this.dropdown._isAnimating) {\n                    // We need the `delay(0)` here in order to avoid\n                    // 'changed after checked' errors in some cases. See #12194.\n                    this.dropdown._animationDone\n                        .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parent._hovered()))\n                        .subscribe(() => this.open());\n                } else {\n                    this.open();\n                }\n            });\n    }\n\n    /** Gets the portal that should be attached to the overlay. */\n    private _getPortal(): TemplatePortal {\n        // Note that we can avoid this check by keeping the portal on the dropdown panel.\n        // While it would be cleaner, we'd have to introduce another required method on\n        // `McDropdownPanel`, making it harder to consume.\n        if (!this._portal || this._portal.templateRef !== this.dropdown.templateRef) {\n            this._portal = new TemplatePortal(this.dropdown.templateRef, this._viewContainerRef);\n        }\n\n        return this._portal;\n    }\n\n}\n","/* tslint:disable:no-empty */\n\nimport {\n    AfterContentInit, AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Input,\n    isDevMode,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList, Renderer2,\n    Self,\n    SimpleChanges,\n    ViewChild, ViewChildren,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { ActiveDescendantKeyManager } from '@ptsecurity/cdk/a11y';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    RIGHT_ARROW,\n    SPACE,\n    UP_ARROW,\n    A\n} from '@ptsecurity/cdk/keycodes';\nimport {\n    CdkConnectedOverlay,\n    ViewportRuler\n} from '@ptsecurity/cdk/overlay';\nimport {\n    countGroupLabelsBeforeOption,\n    getOptionScrollPosition,\n    CanDisable,\n    CanDisableCtor,\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    HasTabIndex,\n    HasTabIndexCtor,\n    MC_OPTION_PARENT_COMPONENT,\n    McOptgroup,\n    McOption,\n    McOptionSelectionChange,\n    mixinDisabled,\n    mixinErrorState,\n    mixinTabIndex,\n    mcSelectAnimations,\n\n    SELECT_PANEL_INDENT_PADDING_X,\n    SELECT_PANEL_MAX_HEIGHT,\n    SELECT_PANEL_PADDING_X,\n    SELECT_PANEL_VIEWPORT_PADDING,\n\n    getMcSelectDynamicMultipleError,\n    getMcSelectNonFunctionValueError,\n    getMcSelectNonArrayValueError,\n    MC_SELECT_SCROLL_STRATEGY\n} from '@ptsecurity/mosaic/core';\nimport { McFormField, McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { McTag } from '@ptsecurity/mosaic/tags';\nimport { defer, merge, Observable, Subject } from 'rxjs';\nimport {\n    filter,\n    map,\n    startWith,\n    switchMap,\n    take,\n    takeUntil,\n    distinctUntilChanged\n} from 'rxjs/operators';\n\n\nlet nextUniqueId = 0;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 2;\n\n/** Change event object that is emitted when the select value has changed. */\nexport class McSelectChange {\n    constructor(public source: McSelect, public value: any) {}\n}\n\nexport class McSelectBase {\n    constructor(\n        public elementRef: ElementRef,\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {}\n}\n\nconst McSelectMixinBase: CanDisableCtor & HasTabIndexCtor & CanUpdateErrorStateCtor &\n    typeof McSelectBase = mixinTabIndex(mixinDisabled(mixinErrorState(McSelectBase)));\n\n\n@Directive({ selector: 'mc-select-trigger' })\nexport class McSelectTrigger {}\n\n\n@Component({\n    selector: 'mc-select',\n    exportAs: 'mcSelect',\n    templateUrl: 'select.html',\n    styleUrls: ['./select.css'],\n    inputs: ['disabled', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'tabIndex',\n        class: 'mc-select',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-select-invalid]': 'errorState',\n        '[class.mc-select-required]': 'required',\n        '(keydown)': 'handleKeydown($event)',\n        '(focus)': 'onFocus()',\n        '(blur)': 'onBlur()',\n        '(window:resize)': 'calculateHiddenItems()'\n    },\n    animations: [\n        mcSelectAnimations.transformPanel,\n        mcSelectAnimations.fadeInContent\n    ],\n    providers: [\n        { provide: McFormFieldControl, useExisting: McSelect },\n        { provide: MC_OPTION_PARENT_COMPONENT, useExisting: McSelect }\n    ]\n})\nexport class McSelect extends McSelectMixinBase implements\n    AfterContentInit, AfterViewInit, OnChanges, OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable,\n    HasTabIndex, McFormFieldControl<any>, CanUpdateErrorState {\n\n    /** A name for this control that can be used by `mc-form-field`. */\n    controlType = 'mc-select';\n\n    hiddenItems: number = 0;\n    oneMoreText: string = '...ещё';\n\n    /** The last measured value for the trigger's client bounding rect. */\n    triggerRect: ClientRect;\n\n    /** The cached font-size of the trigger element. */\n    triggerFontSize = 0;\n\n    /** Deals with the selection logic. */\n    selectionModel: SelectionModel<McOption>;\n\n    /** Manages keyboard events for options in the panel. */\n    keyManager: ActiveDescendantKeyManager<McOption>;\n\n    /** The IDs of child options to be passed to the aria-owns attribute. */\n    optionIds: string = '';\n\n    /** The value of the select panel's transform-origin property. */\n    transformOrigin: string = 'top';\n\n    /** Whether the panel's animation is done. */\n    panelDoneAnimating: boolean = false;\n\n    /** Emits when the panel element is finished transforming in. */\n    panelDoneAnimatingStream = new Subject<string>();\n\n    /** Strategy that will be used to handle scrolling while the select panel is open. */\n    scrollStrategy = this._scrollStrategyFactory();\n\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n    offsetY = 0;\n\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n    positions = [\n        {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top'\n        },\n        {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom'\n        }\n    ];\n\n    @ViewChild('trigger') trigger: ElementRef;\n\n    @ViewChild('panel') panel: ElementRef;\n\n    @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n    @ViewChildren(McTag) tags: QueryList<McTag>;\n\n    /** User-supplied override of the trigger element. */\n    @ContentChild(McSelectTrigger) customTrigger: McSelectTrigger;\n\n    /** All of the defined select options. */\n    @ContentChildren(McOption, { descendants: true }) options: QueryList<McOption>;\n\n    /** All of the defined groups of options. */\n    @ContentChildren(McOptgroup) optionGroups: QueryList<McOptgroup>;\n\n    /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n    @Input() panelClass: string | string[] | Set<string> | { [key: string]: any };\n\n    /** Object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Function used to sort the values in a select in multiple mode.\n     * Follows the same logic as `Array.prototype.sort`.\n     */\n    @Input() sortComparator: (a: McOption, b: McOption, options: McOption[]) => number;\n\n    /** Combined stream of all of the child options' change events. */\n    readonly optionSelectionChanges: Observable<McOptionSelectionChange> = defer(() => {\n        if (this.options) {\n            return merge(...this.options.map((option) => option.onSelectionChange));\n        }\n\n        return this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n    }) as Observable<McOptionSelectionChange>;\n\n    /** Event emitted when the select panel has been toggled. */\n    @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted when the select has been opened. */\n    @Output('opened') readonly openedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => o), map(() => {}));\n\n    /** Event emitted when the select has been closed. */\n    @Output('closed') readonly closedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => !o), map(() => {}));\n\n    /** Event emitted when the selected value has been changed by the user. */\n    @Output() readonly selectionChange: EventEmitter<McSelectChange> = new EventEmitter<McSelectChange>();\n\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    @Input()\n    get placeholder(): string {\n        return this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n\n        this.stateChanges.next();\n    }\n\n    private _placeholder: string;\n\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n\n        this.stateChanges.next();\n    }\n\n    private _required: boolean = false;\n\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        if (this.selectionModel) {\n            throw getMcSelectDynamicMultipleError();\n        }\n\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    private _multiple: boolean = false;\n\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith() {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        /* tslint:disable-next-line:strict-type-predicates */\n        if (typeof fn !== 'function') {\n            throw getMcSelectNonFunctionValueError();\n        }\n\n        this._compareWith = fn;\n\n        if (this.selectionModel) {\n            // A different comparator means the selection could change.\n            this.initializeSelection();\n        }\n    }\n\n    /** Value of the select control. */\n    @Input()\n    get value(): any {\n        return this._value;\n    }\n\n    set value(newValue: any) {\n        if (newValue !== this._value) {\n            this.writeValue(newValue);\n            this._value = newValue;\n        }\n    }\n\n    private _value: any;\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n        this.stateChanges.next();\n    }\n\n    private _id: string;\n\n    /** Whether the select is focused. */\n    get focused(): boolean {\n        return this._focused || this._panelOpen;\n    }\n\n    /**\n     * @deprecated Setter to be removed as this property is intended to be readonly.\n     * @breaking-change 8.0.0\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n\n    private _focused = false;\n\n    get panelOpen(): boolean {\n        return this._panelOpen;\n    }\n\n    private _panelOpen = false;\n\n    /** The scroll position of the overlay panel, calculated to center the selected option. */\n    private scrollTop = 0;\n\n    /** Unique id for this input. */\n    private readonly uid = `mc-select-${nextUniqueId++}`;\n\n    /** Emits whenever the component is destroyed. */\n    private readonly destroy = new Subject<void>();\n\n    constructor(\n        private readonly _viewportRuler: ViewportRuler,\n        private readonly _changeDetectorRef: ChangeDetectorRef,\n        private readonly _ngZone: NgZone,\n        private readonly _renderer: Renderer2,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        elementRef: ElementRef,\n        @Optional() private readonly _dir: Directionality,\n        @Optional() parentForm: NgForm,\n        @Optional() parentFormGroup: FormGroupDirective,\n        @Optional() private readonly _parentFormField: McFormField,\n        @Self() @Optional() public ngControl: NgControl,\n        @Attribute('tabindex') tabIndex: string,\n        @Inject(MC_SELECT_SCROLL_STRATEGY) private readonly _scrollStrategyFactory\n    ) {\n        super(elementRef, defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnInit() {\n        this.selectionModel = new SelectionModel<McOption>(this.multiple);\n        this.stateChanges.next();\n\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this.panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this.panelOpen) {\n                    this.scrollTop = 0;\n                    this.openedChange.emit(true);\n                } else {\n                    this.openedChange.emit(false);\n                    this.panelDoneAnimating = false;\n                    this.overlayDir.offsetX = 0;\n                    this._changeDetectorRef.markForCheck();\n                }\n            });\n    }\n\n    ngAfterContentInit() {\n        this.initKeyManager();\n\n        this.selectionModel.changed\n            .pipe(takeUntil(this.destroy))\n            .subscribe((event) => {\n                event.added.forEach((option) => option.select());\n                event.removed.forEach((option) => option.deselect());\n            });\n\n        this.options.changes\n            .pipe(startWith(null), takeUntil(this.destroy))\n            .subscribe(() => {\n                this.resetOptions();\n                this.initializeSelection();\n            });\n    }\n\n    ngAfterViewInit(): void {\n        this.tags.changes\n            .subscribe(() => {\n                setTimeout(() => this.calculateHiddenItems(), 0);\n            });\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) { this.updateErrorState(); }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes.disabled) {\n            this.stateChanges.next();\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroy.next();\n        this.destroy.complete();\n        this.stateChanges.complete();\n    }\n\n    /** `View -> model callback called when value changes` */\n    _onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when select has been touched` */\n    _onTouched = () => {};\n\n    /** Toggles the overlay panel open or closed. */\n    toggle(): void {\n        if (this.panelOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    /** Opens the overlay panel. */\n    open(): void {\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) { return; }\n\n        this.triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this.triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n        this._panelOpen = true;\n        this.keyManager.withHorizontalOrientation(null);\n        this.calculateOverlayPosition();\n        this.highlightCorrectOption();\n        this._changeDetectorRef.markForCheck();\n\n        // Set the font size on the panel element once it exists.\n        this._ngZone.onStable.asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                if (this.triggerFontSize && this.overlayDir.overlayRef && this.overlayDir.overlayRef.overlayElement) {\n                    this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this.triggerFontSize}px`;\n                }\n            });\n    }\n\n    /** Closes the overlay panel and focuses the host element. */\n    close(): void {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this.keyManager.withHorizontalOrientation(this.isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value: any): void {\n        if (this.options) {\n            this.setSelectionByValue(value);\n        }\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn: (value: any) => void): void {\n        this._onChange = fn;\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn: () => {}): void {\n        this._onTouched = fn;\n    }\n\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    get selected(): McOption | McOption[] {\n        return this.multiple ? this.selectionModel.selected : this.selectionModel.selected[0];\n    }\n\n    get triggerValue(): string {\n        if (this.empty) { return ''; }\n\n        if (this._multiple) {\n            const selectedOptions = this.selectionModel.selected.map((option) => option.viewValue);\n\n            if (this.isRtl()) { selectedOptions.reverse(); }\n\n            return selectedOptions.join(', ');\n        }\n\n        return this.selectionModel.selected[0].viewValue;\n    }\n\n    get triggerValues(): McOption[] {\n        if (this.empty) { return []; }\n\n        if (this._multiple) {\n            const selectedOptions = this.selectionModel.selected;\n\n            if (this.isRtl()) { selectedOptions.reverse(); }\n\n            return selectedOptions;\n        }\n\n        return [this.selectionModel.selected[0]];\n    }\n\n    get empty(): boolean {\n        return !this.selectionModel || this.selectionModel.isEmpty();\n    }\n\n    isRtl(): boolean {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n\n    handleKeydown(event: KeyboardEvent): void {\n        if (!this.disabled) {\n            if (this.panelOpen) {\n                this.handleOpenKeydown(event);\n            } else {\n                this.handleClosedKeydown(event);\n            }\n        }\n    }\n\n    /**\n     * When the panel content is done fading in, the panelDoneAnimating property is\n     * set so the proper class can be added to the panel.\n     */\n    onFadeInDone(): void {\n        this.panelDoneAnimating = this.panelOpen;\n        this._changeDetectorRef.markForCheck();\n    }\n\n    onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    onBlur() {\n        this._focused = false;\n\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    onAttached(): void {\n        this.overlayDir.positionChange\n            .pipe(take(1))\n            .subscribe(() => {\n                this._changeDetectorRef.detectChanges();\n                this.calculateOverlayOffsetX();\n                this.panel.nativeElement.scrollTop = this.scrollTop;\n            });\n    }\n\n    /** Returns the theme to be used on the panel. */\n    getPanelTheme(): string {\n        return this._parentFormField ? `mc-${this._parentFormField.color}` : '';\n    }\n\n    /** Focuses the select element. */\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    calculateOverlayScroll(selectedIndex: number, scrollBuffer: number, maxScroll: number): number {\n        const itemHeight = this.getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n\n        /* tslint:disable-next-line:no-magic-numbers */\n        const halfOptionHeight = itemHeight / 2;\n\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n\n    /** Invoked when an option is clicked. */\n    onRemoveMatcherItem(option: McOption, $event): void {\n        $event.stopPropagation();\n\n        option.deselect();\n    }\n\n    calculateHiddenItems(): void {\n        if (this.empty || !this.multiple) { return; }\n\n        let visibleItems: number = 0;\n        const totalItemsWidth = this.getTotalItemsWidthInMatcher();\n        let totalVisibleItemsWidth: number = 0;\n        const itemMargin: number = 4;\n\n        this.tags.forEach((tag) => {\n            if (tag.nativeElement.offsetTop < tag.nativeElement.offsetHeight) {\n                totalVisibleItemsWidth += tag.nativeElement.getBoundingClientRect().width + itemMargin;\n                visibleItems++;\n            }\n        });\n\n        this.hiddenItems = (this.selected as ArrayLike<McOption>).length - visibleItems;\n\n        if (this.hiddenItems) {\n            const itemsCounter = this.trigger.nativeElement.querySelector('.mc-select__match-hidden-text');\n            const matcherList = this.trigger.nativeElement.querySelector('.mc-select__match-list');\n\n            const itemsCounterShowed = itemsCounter.offsetTop < itemsCounter.offsetHeight;\n            // const itemsCounterWidth: number = itemsCounter.getBoundingClientRect().width;\n            const itemsCounterWidth: number = 86;\n\n            const matcherListWidth: number = matcherList.getBoundingClientRect().width;\n            const matcherWidth: number = matcherListWidth + itemsCounterWidth;\n\n            if (itemsCounterShowed && (totalItemsWidth < matcherWidth)) { this.hiddenItems = 0; }\n\n            if (\n                totalVisibleItemsWidth === matcherListWidth ||\n                (totalVisibleItemsWidth + itemsCounterWidth) < matcherListWidth\n            ) {\n                this._changeDetectorRef.markForCheck();\n\n                return ;\n            } else if (!itemsCounterShowed && (totalItemsWidth + itemsCounterWidth) > matcherWidth) {\n                this.hiddenItems++;\n            }\n        }\n\n        this._changeDetectorRef.markForCheck();\n    }\n\n    private getTotalItemsWidthInMatcher(): number {\n        const triggerClone = this.trigger.nativeElement.cloneNode(true);\n        triggerClone.querySelector('.mc-select__match-hidden-text').remove();\n\n        this._renderer.setStyle(triggerClone, 'position', 'absolute');\n        this._renderer.setStyle(triggerClone, 'visibility', 'hidden');\n        this._renderer.setStyle(triggerClone, 'top', '-100%');\n        this._renderer.setStyle(triggerClone, 'left', '0');\n\n        this._renderer.appendChild(this.trigger.nativeElement, triggerClone);\n\n        let totalItemsWidth: number = 0;\n        const itemMargin: number = 4;\n        triggerClone.querySelectorAll('mc-tag').forEach((item) => {\n            totalItemsWidth += item.getBoundingClientRect().width as number + itemMargin;\n        });\n\n        triggerClone.remove();\n\n        return totalItemsWidth;\n    }\n\n    /** Handles keyboard events while the select is closed. */\n    private handleClosedKeydown(event: KeyboardEvent): void {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n        // Open the select on ALT + arrow key to match the native <select>\n        if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        } else if (!this.multiple) {\n            this.keyManager.onKeydown(event);\n        }\n    }\n\n    /** Handles keyboard events when the selected is open. */\n    private handleOpenKeydown(event: KeyboardEvent): void {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const manager = this.keyManager;\n\n        if (keyCode === HOME || keyCode === END) {\n            event.preventDefault();\n\n            if (keyCode === HOME) {\n                manager.setFirstItemActive();\n            } else {\n                manager.setLastItemActive();\n            }\n\n        } else if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n        } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n            event.preventDefault();\n            manager.activeItem.selectViaInteraction();\n        } else if (this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some((option) => !option.selected);\n            this.options.forEach((option) => {\n                if (hasDeselectedOptions && !option.disabled) {\n                    option.select();\n                } else {\n                    option.deselect();\n                }\n            });\n        } else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n\n            manager.onKeydown(event);\n\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem.selectViaInteraction();\n            }\n        }\n    }\n\n    private initializeSelection(): void {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this.setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n        });\n    }\n\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    private setSelectionByValue(value: any | any[]): void {\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw getMcSelectNonArrayValueError();\n            }\n\n            this.selectionModel.clear();\n            value.forEach((currentValue: any) => this.selectValue(currentValue));\n            this.sortValues();\n        } else {\n            this.selectionModel.clear();\n            const correspondingOption = this.selectValue(value);\n\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this.keyManager.setActiveItem(correspondingOption);\n            }\n        }\n\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    private selectValue(value: any): McOption | undefined {\n        const correspondingOption = this.options.find((option: McOption) => {\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            } catch (error) {\n                if (isDevMode()) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n\n                return false;\n            }\n        });\n\n        if (correspondingOption) {\n            this.selectionModel.select(correspondingOption);\n        }\n\n        return correspondingOption;\n    }\n\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    private initKeyManager() {\n        this.keyManager = new ActiveDescendantKeyManager<McOption>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this.isRtl() ? 'rtl' : 'ltr');\n\n        this.keyManager.tabOut\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            });\n\n        this.keyManager.change\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this._panelOpen && this.panel) {\n                    this.scrollActiveOptionIntoView();\n                } else if (!this._panelOpen && !this.multiple && this.keyManager.activeItem) {\n                    this.keyManager.activeItem.selectViaInteraction();\n                }\n            });\n    }\n\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    private resetOptions(): void {\n        const changedOrDestroyed = merge(this.options.changes, this.destroy);\n\n        this.optionSelectionChanges\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe((event) => {\n                this.onSelect(event.source, event.isUserInput);\n\n                if (event.isUserInput && !this.multiple && this._panelOpen) {\n                    this.close();\n                    this.focus();\n                }\n            });\n\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map((option) => option.stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n                this._changeDetectorRef.markForCheck();\n                this.stateChanges.next();\n            });\n\n        this.setOptionIds();\n    }\n\n    /** Invoked when an option is clicked. */\n    private onSelect(option: McOption, isUserInput: boolean): void {\n        const wasSelected = this.selectionModel.isSelected(option);\n\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this.selectionModel.clear();\n            this.propagateChanges(option.value);\n        } else {\n            if (option.selected) {\n                this.selectionModel.select(option);\n            } else {\n                this.selectionModel.deselect(option);\n            }\n\n            if (isUserInput) {\n                this.keyManager.setActiveItem(option);\n            }\n\n            if (this.multiple) {\n                this.sortValues();\n\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mc-option`.\n                    this.focus();\n                }\n            }\n        }\n\n        if (wasSelected !== this.selectionModel.isSelected(option)) {\n            this.propagateChanges();\n        }\n\n        this.stateChanges.next();\n    }\n\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    private sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n\n            this.selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n\n    /** Emits change event to set the model value. */\n    private propagateChanges(fallbackValue?: any): void {\n        let valueToEmit: any = null;\n\n        if (this.multiple) {\n            valueToEmit = (this.selected as McOption[]).map((option) => option.value);\n        } else {\n            valueToEmit = this.selected ? (this.selected as McOption).value : fallbackValue;\n        }\n\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(new McSelectChange(this, valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /** Records option IDs to pass to the aria-owns property. */\n    private setOptionIds() {\n        this.optionIds = this.options.map((option) => option.id).join(' ');\n    }\n\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    private highlightCorrectOption(): void {\n        if (this.keyManager) {\n            if (this.empty) {\n                this.keyManager.setFirstItemActive();\n            } else {\n                this.keyManager.setActiveItem(this.selectionModel.selected[0]);\n            }\n        }\n    }\n\n    /** Scrolls the active option into view. */\n    private scrollActiveOptionIntoView(): void {\n        const activeOptionIndex = this.keyManager.activeItemIndex || 0;\n        const labelCount = countGroupLabelsBeforeOption(activeOptionIndex, this.options, this.optionGroups);\n\n        this.panel.nativeElement.scrollTop = getOptionScrollPosition(\n            activeOptionIndex + labelCount,\n            this.getItemHeight(),\n            this.panel.nativeElement.scrollTop,\n            SELECT_PANEL_MAX_HEIGHT\n        );\n    }\n\n    /** Gets the index of the provided option in the option list. */\n    private getOptionIndex(option: McOption): number | undefined {\n        /* tslint:disable-next-line */\n        return this.options.reduce((result: number, current: McOption, index: number) => {\n            /* tslint:disable-next-line:strict-type-predicates */\n            return result === undefined ? (option === current ? index : undefined) : result;\n        }, undefined);\n    }\n\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    private calculateOverlayPosition(): void {\n        const itemHeight = this.getItemHeight();\n        const items = this.getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n\n        // If no value is selected we open the popup to the first item.\n        let selectedOptionOffset =\n            this.empty ? 0 : this.getOptionIndex(this.selectionModel.selected[0])!;\n\n        selectedOptionOffset += countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        /* tslint:disable-next-line:no-magic-numbers */\n        const scrollBuffer = panelHeight / 2;\n        this.scrollTop = this.calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this.offsetY = this.calculateOverlayOffsetY();\n\n        this.checkOverlayWithinViewport(maxScroll);\n    }\n\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    private calculateOverlayOffsetX(): void {\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const isRtl = this.isRtl();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const paddingWidth = SELECT_PANEL_PADDING_X * 2;\n        let offsetX: number;\n\n        const selected = this.selectionModel.selected[0] || this.options.first;\n        offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n\n        // Invert the offset in LTR.\n        if (!isRtl) { offsetX *= -1; }\n\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        } else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    private calculateOverlayOffsetY(): number {\n        // const itemHeight = this.getItemHeight();\n        // const optionHeightAdjustment = (itemHeight - this.triggerRect.height) / 2;\n\n        // todo I'm not sure that we will use it\n        return 0;\n        // return Math.round(-optionHeightAdjustment);\n    }\n\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    private checkOverlayWithinViewport(maxScroll: number): void {\n        const itemHeight = this.getItemHeight();\n        const viewportSize = this._viewportRuler.getViewportSize();\n\n        const topSpaceAvailable = this.triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable =\n            viewportSize.height - this.triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n        const panelHeightTop = Math.abs(this.offsetY);\n        const totalPanelHeight =\n            Math.min(this.getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this.triggerRect.height;\n\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this.adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        } else if (panelHeightTop > topSpaceAvailable) {\n            this.adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        } else {\n            this.transformOrigin = this.getOriginBasedOnOption();\n        }\n    }\n\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    private adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this.scrollTop -= distanceBelowViewport;\n        this.offsetY -= distanceBelowViewport;\n        this.transformOrigin = this.getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this.scrollTop <= 0) {\n            this.scrollTop = 0;\n            this.offsetY = 0;\n            this.transformOrigin = `50% bottom 0px`;\n        }\n    }\n\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    private adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number, maxScroll: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this.scrollTop += distanceAboveViewport;\n        this.offsetY += distanceAboveViewport;\n        this.transformOrigin = this.getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this.scrollTop >= maxScroll) {\n            this.scrollTop = maxScroll;\n            this.offsetY = 0;\n            this.transformOrigin = `50% top 0px`;\n\n            return;\n        }\n    }\n\n    /** Sets the transform origin point based on the selected option. */\n    private getOriginBasedOnOption(): string {\n        const itemHeight = this.getItemHeight();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const optionHeightAdjustment = (itemHeight - this.triggerRect.height) / 2;\n        /* tslint:disable-next-line:no-magic-numbers */\n        const originY = Math.abs(this.offsetY) - optionHeightAdjustment + itemHeight / 2;\n\n        return `50% ${originY}px 0px`;\n    }\n\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    private getItemCount(): number {\n        return this.options.length + this.optionGroups.length;\n    }\n\n    /** Calculates the height of the select's options. */\n    private getItemHeight(): number {\n        // todo доделать\n        /* tslint:disable-next-line:no-magic-numbers */\n        return 32;\n        // return this.triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n}\n","export enum TimeParts {\n    hours,\n    minutes,\n    seconds\n}\n\nexport enum TimeFormats {\n    HHmmss = 'HH:mm:ss',\n    HHmm = 'HH:mm'\n}\n\nexport const TIMEFORMAT_PLACEHOLDERS: { [timeFormat: string]: string } = {\n    [TimeFormats.HHmmss]: '  :  :  ',\n    [TimeFormats.HHmm]: '  :  '\n};\n\nexport const DEFAULT_TIME_FORMAT: TimeFormats = TimeFormats.HHmm;\n\nexport const HOURS_MINUTES_SECONDS_REGEXP =\n    new RegExp(/^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]|[0-9]):([0-5][0-9]|[0-9])?$/);\nexport const HOURS_MINUTES_REGEXP = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]|[0-9])?$/;\nexport const HOURS_ONLY_REGEXP = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):?$/;\n\nexport const SECONDS_PER_MINUTE: number = 59;\nexport const MINUTES_PER_HOUR: number = 59;\nexport const HOURS_PER_DAY: number = 23;\n\n// TODO Move it to common CDK\nexport const ARROW_UP_KEYCODE: string = 'ArrowUp';\nexport const ARROW_DOWN_KEYCODE: string = 'ArrowDown';\nexport const ARROW_LEFT_KEYCODE: string = 'ArrowLeft';\nexport const ARROW_RIGHT_KEYCODE: string = 'ArrowRight';\n","import { AnimationEvent } from '@angular/animations';\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ComponentRef,\n    ElementRef,\n    EmbeddedViewRef,\n    EventEmitter, Inject, InjectionToken,\n    OnDestroy,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal } from '@ptsecurity/cdk/portal';\n\nimport {\n    mcSidepanelAnimations,\n    McSidepanelAnimationState,\n    mcSidepanelTransformAnimation\n} from './sidepanel-animations';\n\nimport { McSidepanelConfig, McSidepanelPosition } from './sidepanel-config';\n\n\nexport const MC_SIDEPANEL_WITH_INDENT =\n    new InjectionToken<boolean>('mc-sidepanel-with-indent');\n\nexport const MC_SIDEPANEL_WITH_SHADOW =\n    new InjectionToken<boolean>('mc-sidepanel-with-shadow');\n\n@Component({\n    selector: 'mc-sidepanel-container',\n    templateUrl: './sidepanel-container.component.html',\n    styleUrls: ['./sidepanel.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    animations: [mcSidepanelAnimations.sidepanelState],\n    host: {\n        class: 'mc-sidepanel-container',\n        tabindex: '-1',\n        role: 'dialog',\n        'aria-modal': 'true',\n        '[attr.id]': 'id',\n        '[@state]': `{\n            value: animationState,\n            params: animationTransform\n        }`,\n        '(@state.start)': 'onAnimation($event)',\n        '(@state.done)': 'onAnimation($event)'\n    }\n})\nexport class McSidepanelContainerComponent extends BasePortalOutlet implements OnDestroy {\n    /** ID for the container DOM element. */\n    id: string;\n\n    /** The portal outlet inside of this container into which the content will be loaded. */\n    @ViewChild(CdkPortalOutlet) portalOutlet: CdkPortalOutlet;\n\n    /** The state of the sidepanel animations. */\n    animationState: McSidepanelAnimationState = McSidepanelAnimationState.Void;\n\n    animationTransform: { transformIn: string; transformOut: string };\n\n    /** Emits whenever the state of the animation changes. */\n    animationStateChanged = new EventEmitter<AnimationEvent>();\n\n    /** Whether the component has been destroyed. */\n    private destroyed: boolean;\n\n    constructor(\n        private elementRef: ElementRef<HTMLElement>,\n        private changeDetectorRef: ChangeDetectorRef,\n        public sidepanelConfig: McSidepanelConfig,\n        @Inject(MC_SIDEPANEL_WITH_INDENT) public withIndent: boolean,\n        @Inject(MC_SIDEPANEL_WITH_SHADOW) public withShadow: boolean) {\n        super();\n    }\n\n    ngOnDestroy(): void {\n        this.destroyed = true;\n    }\n\n    /** Attach a component portal as content to this sidepanel container. */\n    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n        this.validatePortalAttached();\n        this.setAnimation();\n        this.setPanelClass();\n\n        return this.portalOutlet.attachComponentPortal(portal);\n    }\n\n    /** Attach a template portal as content to this sidepanel container. */\n    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n        this.validatePortalAttached();\n        this.setAnimation();\n        this.setPanelClass();\n\n        return this.portalOutlet.attachTemplatePortal(portal);\n    }\n\n    /** Begin animation of the sidepanel entrance into view. */\n    enter(): void {\n        if (!this.destroyed) {\n            this.animationState = McSidepanelAnimationState.Visible;\n            this.changeDetectorRef.detectChanges();\n        }\n    }\n\n    /** Begin animation of the sidepanel exiting from view. */\n    exit(): void {\n        if (!this.destroyed) {\n            this.animationState = McSidepanelAnimationState.Hidden;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    onAnimation(event: AnimationEvent) {\n        this.animationStateChanged.emit(event);\n    }\n\n    private setAnimation() {\n        const position: McSidepanelPosition = this.sidepanelConfig.position!;\n\n        this.animationTransform = {\n            transformIn: mcSidepanelTransformAnimation[position].in,\n            transformOut: mcSidepanelTransformAnimation[position].out\n        };\n    }\n\n    private setPanelClass() {\n        const element: HTMLElement = this.elementRef.nativeElement;\n        const position: McSidepanelPosition = this.sidepanelConfig.position!;\n\n        element.classList.add(`mc-sidepanel-container_${position}`);\n\n        if (this.withShadow) {\n            element.classList.add('mc-sidepanel-container_shadowed');\n        }\n    }\n\n    private validatePortalAttached() {\n        if (this.portalOutlet.hasAttached()) {\n            throw Error('Attempting to attach sidepanel content after content is already attached');\n        }\n    }\n}\n","import { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { merge, Observable, Subject } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\n\nimport { McSidepanelAnimationState } from './sidepanel-animations';\nimport { McSidepanelConfig } from './sidepanel-config';\nimport { McSidepanelContainerComponent } from './sidepanel-container.component';\n\n\n// Counter for unique sidepanel ids.\nlet uniqueId = 0;\n\nexport class McSidepanelRef<T = any, R = any> {\n    readonly id: string;\n\n    /** Instance of the component making up the content of the sidepanel. */\n    instance: T;\n\n    /** Subject for notifying the user that the sidepanel has been closed and dismissed. */\n    private readonly afterClosed$ = new Subject<R | undefined>();\n\n    /** Subject for notifying the user that the sidepanel has opened and appeared. */\n    private readonly afterOpened$ = new Subject<void>();\n\n    /** Result to be passed down to the `afterDismissed` stream. */\n    private result: R | undefined;\n\n    constructor(\n        public containerInstance: McSidepanelContainerComponent,\n        private overlayRef: OverlayRef,\n        public config: McSidepanelConfig) {\n\n        this.id = this.config.id || `mc-sidepanel-${uniqueId++}`;\n        this.containerInstance.id = this.id;\n\n        // Emit when opening animation completes\n        containerInstance.animationStateChanged.pipe(\n            filter(\n                (event) => event.phaseName === 'done' && event.toState === McSidepanelAnimationState.Visible\n            ),\n            take(1)\n        ).subscribe(() => {\n            this.afterOpened$.next();\n            this.afterOpened$.complete();\n        });\n\n        // Dispose overlay when closing animation is complete\n        containerInstance.animationStateChanged.pipe(\n            filter(\n                (event) => event.phaseName === 'done' && event.toState === McSidepanelAnimationState.Hidden\n            ),\n            take(1)\n        ).subscribe(() => {\n            overlayRef.dispose();\n            this.afterClosed$.next(this.result);\n            this.afterClosed$.complete();\n        });\n\n        if (!containerInstance.sidepanelConfig.disableClose) {\n            merge(\n                overlayRef.backdropClick(),\n                overlayRef.keydownEvents().pipe(\n                    // tslint:disable:deprecation\n                    // keyCode is deprecated, but IE11 and Edge don't support code property, which we need use instead\n                    filter((event) => event.keyCode === ESCAPE)\n                )\n            ).subscribe(() => this.close());\n        }\n    }\n\n    close(result?: R): void {\n        if (!this.afterClosed$.closed) {\n            // Transition the backdrop in parallel to the sidepanel.\n            this.containerInstance.animationStateChanged.pipe(\n                filter((event) => event.phaseName === 'done'),\n                take(1)\n            ).subscribe(() => this.overlayRef.detachBackdrop());\n\n            this.result = result;\n            this.containerInstance.exit();\n        }\n    }\n\n    /** Gets an observable that is notified when the sidepanel is finished closing. */\n    afterClosed(): Observable<R | undefined> {\n        return this.afterClosed$.asObservable();\n    }\n\n    /** Gets an observable that is notified when the sidepanel has opened and appeared. */\n    afterOpened(): Observable<void> {\n        return this.afterOpened$.asObservable();\n    }\n}\n","import {\n    ComponentRef,\n    Inject,\n    Injectable,\n    InjectionToken,\n    Injector, OnDestroy,\n    Optional,\n    SkipSelf,\n    TemplateRef\n} from '@angular/core';\nimport { Overlay, OverlayConfig, OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal, IComponentType, PortalInjector, TemplatePortal } from '@ptsecurity/cdk/portal';\n\nimport { MC_SIDEPANEL_DATA, McSidepanelConfig } from './sidepanel-config';\nimport {\n    McSidepanelContainerComponent,\n    MC_SIDEPANEL_WITH_INDENT,\n    MC_SIDEPANEL_WITH_SHADOW\n} from './sidepanel-container.component';\nimport { McSidepanelRef } from './sidepanel-ref';\n\n\n/** Injection token that can be used to specify default sidepanel options. */\nexport const MC_SIDEPANEL_DEFAULT_OPTIONS =\n    new InjectionToken<McSidepanelConfig>('mc-sidepanel-default-options');\n\n@Injectable()\nexport class McSidepanelService implements OnDestroy {\n    private openedSidepanelsAtThisLevel: McSidepanelRef[] = [];\n\n    /** Keeps track of the currently-open sidepanels. */\n    get openedSidepanels(): McSidepanelRef[] {\n        return this.parentSidepanelService ? this.parentSidepanelService.openedSidepanels :\n            this.openedSidepanelsAtThisLevel;\n    }\n\n    constructor(\n        private overlay: Overlay,\n        private injector: Injector,\n        @Optional() @Inject(MC_SIDEPANEL_DEFAULT_OPTIONS) private defaultOptions: McSidepanelConfig,\n        @Optional() @SkipSelf() private parentSidepanelService: McSidepanelService) {\n    }\n\n    ngOnDestroy() {\n        // Only close the sidepanels at this level on destroy\n        // since the parent service may still be active.\n        this.closeSidepanels(this.openedSidepanelsAtThisLevel);\n    }\n\n    open<T, D = any>(componentOrTemplateRef: IComponentType<T> | TemplateRef<T>,\n                     config?: McSidepanelConfig<D>): McSidepanelRef<T> {\n        const fullConfig = {\n            ...(this.defaultOptions || new McSidepanelConfig()),\n            ...config\n        };\n\n        if (fullConfig.id && this.getSidepanelById(fullConfig.id)) {\n            throw Error(`Sidepanel with id \"${fullConfig.id}\" exists already. The sidepanel id must be unique.`);\n        }\n\n        const overlayRef = this.createOverlay(fullConfig);\n        const container = this.attachContainer(overlayRef, fullConfig);\n        const ref = new McSidepanelRef(container, overlayRef, fullConfig);\n\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n                $implicit: fullConfig.data,\n                sidepanelRef: ref\n            } as any));\n        } else {\n            const injector = this.createInjector(fullConfig, ref, container);\n            const portal = new ComponentPortal(componentOrTemplateRef, undefined, injector);\n            const contentRef = container.attachComponentPortal(portal);\n\n            ref.instance = contentRef.instance;\n        }\n\n        this.openedSidepanels.push(ref);\n        ref.afterClosed().subscribe(() => this.removeOpenSidepanel(ref));\n        container.enter();\n\n        return ref;\n    }\n\n    /**\n     * Closes all of the currently-open sidepanels.\n     */\n    closeAll(): void {\n        this.closeSidepanels(this.openedSidepanels);\n    }\n\n    /**\n     * Finds an open sidepanel by its id.\n     * @param id ID to use when looking up the sidepanel.\n     */\n    getSidepanelById(id: string): McSidepanelRef | undefined {\n        return this.openedSidepanels.find((sidepanel) => sidepanel.id === id);\n    }\n\n    /**\n     * Attaches the sidepanel container component to the overlay.\n     */\n    private attachContainer(overlayRef: OverlayRef, config: McSidepanelConfig): McSidepanelContainerComponent {\n        const openedSidepanelsWithSamePosition = this.getOpenedSidepanelsWithSamePosition(config);\n\n        const injector = new PortalInjector(this.injector, new WeakMap<any>([\n            [McSidepanelConfig, config],\n            [MC_SIDEPANEL_WITH_INDENT, openedSidepanelsWithSamePosition.length >= 1],\n            [MC_SIDEPANEL_WITH_SHADOW, openedSidepanelsWithSamePosition.length < 2] // tslint:disable-line\n        ]));\n\n        const containerPortal = new ComponentPortal(McSidepanelContainerComponent, undefined, injector);\n        const containerRef: ComponentRef<McSidepanelContainerComponent> = overlayRef.attach(containerPortal);\n\n        return containerRef.instance;\n    }\n\n    /**\n     * Creates a custom injector to be used inside the sidepanel. This allows a component loaded inside\n     * of a sidepanel to close itself and, optionally, to return a value.\n     * @param config Config object that is used to construct the sidepanel.\n     * @param sidepanelRef Reference to the sidepanel.\n     * @param sidepanelContainer Sidepanel container element that wraps all of the contents.\n     * @returns The custom injector that can be used inside the sidepanel.\n     */\n    private createInjector<T>(\n        config: McSidepanelConfig,\n        sidepanelRef: McSidepanelRef<T>,\n        sidepanelContainer: McSidepanelContainerComponent): PortalInjector {\n\n        // The McSidepanelContainerComponent is injected in the portal as the McSidepanelContainerComponent and\n        // the sidepanel's content are created out of the same ViewContainerRef and as such, are siblings for injector\n        // purposes. To allow the hierarchy that is expected, the McSidepanelContainerComponent is explicitly\n        // added to the injection tokens.\n        const injectionTokens = new WeakMap<any>([\n            [McSidepanelContainerComponent, sidepanelContainer],\n            [MC_SIDEPANEL_DATA, config.data],\n            [McSidepanelRef, sidepanelRef]\n        ]);\n\n        return new PortalInjector(this.injector, injectionTokens);\n    }\n\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified sidepanel config.\n     */\n    private createOverlay(config: McSidepanelConfig): OverlayRef {\n        const overlayConfig = new OverlayConfig({\n            hasBackdrop: config.hasBackdrop,\n            backdropClass: this.getBackdropClass(config),\n            maxWidth: '100%',\n            panelClass: config.overlayPanelClass,\n            scrollStrategy: this.overlay.scrollStrategies.block(),\n            positionStrategy: this.overlay.position().global()\n        });\n\n        return this.overlay.create(overlayConfig);\n    }\n\n    private closeSidepanels(sidepanels: McSidepanelRef[]) {\n        const reversedOpenedSidepanels = [...sidepanels.reverse()];\n\n        reversedOpenedSidepanels.forEach((sidepanelRef: McSidepanelRef) => {\n            sidepanelRef.close();\n        });\n    }\n\n    private getBackdropClass(config: McSidepanelConfig): string {\n        const hasOpenedSidepanelWithBackdrop =\n            this.openedSidepanels.some((sidepanelRef) => sidepanelRef.config.hasBackdrop!);\n\n        return config.requiredBackdrop || !hasOpenedSidepanelWithBackdrop ? 'cdk-overlay-dark-backdrop' :\n            'cdk-overlay-transparent-backdrop';\n    }\n\n    private getOpenedSidepanelsWithSamePosition(config: McSidepanelConfig): McSidepanelRef[] {\n        return this.openedSidepanels.filter((sidepanelRef) => sidepanelRef.config.position === config.position);\n    }\n\n    /**\n     * Removes a sidepanel from the array of open sidepanels.\n     * @param sidepanelRef Sidepanel to be removed.\n     */\n    private removeOpenSidepanel(sidepanelRef: McSidepanelRef) {\n        const index = this.openedSidepanels.indexOf(sidepanelRef);\n\n        if (index > -1) {\n            this.openedSidepanels.splice(index, 1);\n        }\n    }\n}\n","import { Component, Directive, ElementRef, Input, OnChanges, OnInit, Optional, SimpleChanges } from '@angular/core';\n\nimport { McSidepanelRef } from './sidepanel-ref';\nimport { McSidepanelService } from './sidepanel.service';\n\n\n/**\n * Button that will close the current sidepanel.\n */\n@Directive({\n    selector: 'button[mc-sidepanel-close], button[mcSidepanelClose]',\n    host: {\n        '(click)': 'sidepanelRef.close(sidepanelResult)',\n        class: 'mc-sidepanel-close',\n        type: 'button'\n    }\n})\nexport class McSidepanelClose implements OnInit, OnChanges {\n    @Input('mc-sidepanel-close') sidepanelResult: any;\n\n    @Input('mcSidepanelClose') mcSidepanelClose: any;\n\n    constructor(\n        @Optional() public sidepanelRef: McSidepanelRef,\n        private elementRef: ElementRef<HTMLElement>,\n        private sidepanelService: McSidepanelService\n    ) {}\n\n    ngOnInit() {\n        if (!this.sidepanelRef) {\n            // When this directive is included in a sidepanel via TemplateRef (rather than being\n            // in a Component), the SidepanelRef isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the SidepanelRef by\n            // ID.\n            // This must occur in `onInit`, as the ID binding for the sidepanel container won't\n            // be resolved at constructor time. We use setTimeout by same reason.\n            setTimeout(() => {\n                this.sidepanelRef = getClosestSidepanel(this.elementRef, this.sidepanelService.openedSidepanels)!;\n            });\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const proxiedChange = changes.mcSidepanelClose || changes.sidepanelResult;\n\n        if (proxiedChange) {\n            this.sidepanelResult = proxiedChange.currentValue;\n        }\n    }\n}\n\n/**\n * Header of a sidepanel.\n */\n@Component({\n    selector: 'mc-sidepanel-header',\n    template: `\n        <div class=\"mc-sidepanel-title\">\n            <ng-content></ng-content>\n        </div>\n        <button *ngIf=\"closeable\" mc-sidepanel-close>\n            <span class=\"mc-sidepanel-close-x\">\n                <i mc-icon=\"mc-close-L_16\" class=\"mc-icon mc-icon_light\" color=\"second\"></i>\n            </span>\n        </button>\n    `,\n    host: {\n        class: 'mc-sidepanel-header'\n    }\n})\nexport class McSidepanelHeader {\n    @Input() closeable: boolean;\n}\n\n/**\n * Scrollable content container of a sidepanel.\n */\n@Directive({\n    selector: 'mc-sidepanel-body, [mc-sidepanel-body], mcSidepanelBody',\n    host: {\n        class: 'mc-sidepanel-body'\n    }\n})\nexport class McSidepanelBody {}\n\n/**\n * Footer of a sidepanel.\n */\n@Directive({\n    selector: 'mc-sidepanel-footer, [mc-sidepanel-footer], mcSidepanelFooter',\n    host: {\n        class: 'mc-sidepanel-footer'\n    }\n})\nexport class McSidepanelFooter {}\n\n/**\n * Actions block of a sidepanel footer.\n */\n@Directive({\n    selector: 'mc-sidepanel-actions, [mc-sidepanel-actions], mcSidepanelActions',\n    host: {\n        class: 'mc-sidepanel-actions'\n    }\n})\nexport class McSidepanelActions {}\n\n/**\n * Finds the closest McSidepanelRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a sidepanel.\n * @param openSidepanels References to the currently-open sidepanels.\n */\nfunction getClosestSidepanel(element: ElementRef<HTMLElement>, openSidepanels: McSidepanelRef[]) {\n    let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n    while (parent && !parent.classList.contains('mc-sidepanel-container')) {\n        parent = parent.parentElement;\n    }\n\n    return parent ? openSidepanels.find((sidepanel) => sidepanel.id === parent!.id) : null;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { PortalModule } from '@ptsecurity/cdk/portal';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McSidepanelContainerComponent } from './sidepanel-container.component';\nimport {\n    McSidepanelActions,\n    McSidepanelBody,\n    McSidepanelClose,\n    McSidepanelFooter,\n    McSidepanelHeader\n} from './sidepanel-directives';\nimport { McSidepanelService } from './sidepanel.service';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        PortalModule,\n        McCommonModule,\n        McIconModule\n    ],\n    providers: [McSidepanelService],\n    declarations: [\n        McSidepanelContainerComponent,\n        McSidepanelClose,\n        McSidepanelHeader,\n        McSidepanelBody,\n        McSidepanelFooter,\n        McSidepanelActions\n    ],\n    entryComponents: [McSidepanelContainerComponent],\n    exports: [\n        McSidepanelContainerComponent,\n        McSidepanelClose,\n        McSidepanelHeader,\n        McSidepanelBody,\n        McSidepanelFooter,\n        McSidepanelActions\n    ]\n})\nexport class McSidepanelModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    Input,\n    NgZone, OnDestroy,\n    OnInit,\n    Renderer2,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { coerceBooleanProperty, coerceCssPixelValue, coerceNumberProperty } from '@ptsecurity/cdk/coercion';\n\n\ninterface IArea {\n    area: McSplitterAreaDirective;\n    index: number;\n    order: number;\n    initialSize: number;\n}\n\ninterface IPoint {\n    x: number;\n    y: number;\n}\n\n\nconst enum AttributeProperty {\n    Disabled = 'disabled'\n}\n\nconst enum Cursor {\n    Default = 'default',\n    ResizeColumn = 'col-resize',\n    ResizeRow = 'row-resize'\n}\n\nconst enum StyleProperty {\n    Cursor = 'cursor',\n    Flex = 'flex',\n    FlexBasis = 'flex-basis',\n    FlexDirection = 'flex-direction',\n    Height = 'height',\n    MaxWidth = 'max-width',\n    MinHeight = 'min-height',\n    MinWidth = 'minWidth',\n    OffsetHeight = 'offsetHeight',\n    OffsetWidth = 'offsetWidth',\n    Order = 'order',\n    Width = 'width'\n}\n\nconst enum State {\n    Disabled = 'disabled',\n    Horizontal = 'horizontal',\n    Vertical = 'vertical'\n}\n\nexport const enum Direction {\n    Horizontal = 'horizontal',\n    Vertical = 'vertical'\n}\n\n@Component({\n    selector: 'mc-splitter',\n    preserveWhitespaces: false,\n    styleUrls: ['splitter.css'],\n    templateUrl: './splitter.component.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McSplitterComponent implements OnInit {\n    readonly areas: IArea[] = [];\n\n    private _direction: Direction;\n    private _disabled: boolean = false;\n    private _gutterSize: number = 6;\n\n    private isDragging: boolean = false;\n\n    private readonly areaPositionDivider: number = 2;\n    private readonly listeners: (() => void)[] = [];\n\n    @Input()\n    set direction(direction: Direction) {\n        this._direction = direction;\n    }\n\n    get direction(): Direction {\n        return this._direction;\n    }\n\n    @Input()\n    set disabled(disabled: boolean) {\n        this._disabled = coerceBooleanProperty(disabled);\n    }\n\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    @Input()\n    set gutterSize(gutterSize: number) {\n        const size = coerceNumberProperty(gutterSize);\n        this._gutterSize = size > 0 ? size : this.gutterSize;\n    }\n\n    get gutterSize(): number {\n        return this._gutterSize;\n    }\n\n    constructor(private elementRef: ElementRef,\n                private ngZone: NgZone,\n                private renderer: Renderer2) {}\n\n    addArea(area: McSplitterAreaDirective): void {\n        const index: number = this.areas.length;\n        const order: number = index * this.areaPositionDivider;\n        const size: number = area.getSize();\n\n        area.setOrder(order);\n\n        this.areas.push({\n            area,\n            index,\n            order,\n            initialSize: size\n        });\n    }\n\n    ngOnInit(): void {\n        if (!this.direction) {\n            this.direction = Direction.Horizontal;\n        }\n\n        this.setStyle(StyleProperty.FlexDirection, this.isVertical() ? 'column' : 'row');\n    }\n\n    onMouseDown(event: MouseEvent, leftAreaIndex: number, rightAreaIndex: number) {\n        if (this.disabled) {\n            return;\n        }\n\n        const leftArea = this.areas[leftAreaIndex];\n        const rightArea = this.areas[rightAreaIndex];\n\n        const startPoint: IPoint = {\n            x: event.screenX,\n            y: event.screenY\n        };\n\n        leftArea.initialSize = leftArea.area.getSize();\n        rightArea.initialSize = rightArea.area.getSize();\n\n        this.areas.forEach((item) => {\n            const size = item.area.getSize();\n            item.area.disableFlex();\n            item.area.setSize(size);\n        });\n\n        this.ngZone.runOutsideAngular(() => {\n            this.listeners.push(\n                this.renderer.listen(\n                    'document',\n                    'mouseup',\n                    () => this.onMouseUp()\n                )\n            );\n        });\n\n        this.ngZone.runOutsideAngular(() => {\n            this.listeners.push(\n                this.renderer.listen(\n                    'document',\n                    'mousemove',\n                    (e: MouseEvent) => this.onMouseMove(e, startPoint, leftArea, rightArea)\n                )\n            );\n        });\n\n        this.isDragging = true;\n    }\n\n    removeArea(area: McSplitterAreaDirective): void {\n        let indexToRemove: number = -1;\n\n        this.areas.some((item, index) => {\n            if (item.area === area) {\n                indexToRemove = index;\n\n                return true;\n            }\n\n            return false;\n        });\n\n        if (indexToRemove === -1) {\n            return;\n        }\n\n        this.areas.splice(indexToRemove, 1);\n    }\n\n    private isVertical(): boolean {\n        return this.direction === Direction.Vertical;\n    }\n\n    private onMouseMove(event: MouseEvent, startPoint: IPoint, leftArea: IArea, rightArea: IArea) {\n        if (!this.isDragging || this.disabled) {\n            return;\n        }\n\n        const endPoint: IPoint = {\n            x: event.screenX,\n            y: event.screenY\n        };\n\n        const offset = this.isVertical()\n            ? startPoint.y - endPoint.y\n            : startPoint.x - endPoint.x;\n\n        const newLeftAreaSize = leftArea.initialSize - offset;\n        const newRightAreaSize = rightArea.initialSize + offset;\n\n        const minLeftAreaSize = leftArea.area.getMinSize();\n        const minRightAreaSize = rightArea.area.getMinSize();\n\n        if (newLeftAreaSize <= minLeftAreaSize || newRightAreaSize <= minRightAreaSize) {\n            const rightAreaOffset = leftArea.initialSize - minLeftAreaSize;\n\n            leftArea.area.setSize(minLeftAreaSize);\n            rightArea.area.setSize(rightArea.initialSize + rightAreaOffset);\n        } else if (newLeftAreaSize <= 0) {\n            leftArea.area.setSize(0);\n            rightArea.area.setSize(rightArea.initialSize + leftArea.initialSize);\n        } else if (newRightAreaSize <= 0) {\n            leftArea.area.setSize(rightArea.initialSize + leftArea.initialSize);\n            rightArea.area.setSize(0);\n        } else {\n            leftArea.area.setSize(newLeftAreaSize);\n            rightArea.area.setSize(newRightAreaSize);\n        }\n    }\n\n    private onMouseUp() {\n        while (this.listeners.length > 0) {\n            const unsubscribe = this.listeners.pop();\n\n            if (unsubscribe) {\n                unsubscribe();\n            }\n        }\n\n        this.isDragging = false;\n    }\n\n    private setStyle(property: StyleProperty, value: string | number) {\n        this.renderer.setStyle(this.elementRef.nativeElement, property, value);\n    }\n}\n\n@Directive({\n    selector: 'mc-gutter'\n})\nexport class McGutterDirective implements OnInit {\n    private _direction: Direction = Direction.Vertical;\n    private _disabled: boolean = false;\n    private _order: number = 0;\n    private _size: number = 6;\n\n    @Input()\n    set direction(direction: Direction) {\n        this._direction = direction;\n    }\n\n    get direction(): Direction {\n        return this._direction;\n    }\n\n    @Input()\n    set disabled(disabled: boolean) {\n        this._disabled = coerceBooleanProperty(disabled);\n    }\n\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    @Input()\n    set order(order: number) {\n        this._order = coerceNumberProperty(order);\n    }\n\n    get order(): number {\n        return this._order;\n    }\n\n    @Input()\n    set size(size: number) {\n        this._size = coerceNumberProperty(size);\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    constructor(private renderer: Renderer2,\n                private elementRef: ElementRef) {\n    }\n\n    ngOnInit(): void {\n        this.setStyle(StyleProperty.Cursor, this.getCursor(this.getState()));\n        this.setStyle(StyleProperty.FlexBasis, coerceCssPixelValue(this.size));\n        this.setStyle(this.isVertical() ? StyleProperty.Height : StyleProperty.Width, coerceCssPixelValue(this.size));\n        this.setStyle(StyleProperty.Order, this.order);\n\n        if (!this.isVertical()) {\n            this.setStyle(StyleProperty.Height, '100%');\n        }\n\n        if (this.disabled) {\n            this.setAttr(AttributeProperty.Disabled, 'true');\n        }\n\n        // fix IE issue with gutter icon. flex-direction is requied for flex alignment options\n        this.setStyle(StyleProperty.FlexDirection, this.isVertical() ? 'row' : 'column');\n    }\n\n    private isVertical(): boolean {\n        return this.direction === Direction.Vertical;\n    }\n\n    private getCursor(state: State): string {\n        switch (state) {\n            case State.Disabled:\n                return Cursor.Default;\n            case State.Vertical:\n                return  Cursor.ResizeRow;\n            case State.Horizontal:\n                return Cursor.ResizeColumn;\n            default:\n                throw Error(`Unknown gutter state for cursor: ${state}`);\n        }\n    }\n\n    private getState(): State {\n        return this.disabled\n            ? State.Disabled\n            : this.direction === Direction.Vertical\n                ? State.Vertical\n                : State.Horizontal;\n    }\n\n    private setStyle(property: StyleProperty, value: string | number) {\n        this.renderer.setStyle(this.elementRef.nativeElement, property, value);\n    }\n\n    private setAttr(attribute: AttributeProperty, value: string) {\n        this.renderer.setAttribute(this.elementRef.nativeElement, attribute, value);\n    }\n}\n\n@Directive({\n    selector: 'mc-splitter-area'\n})\nexport class McSplitterAreaDirective implements OnInit, OnDestroy {\n    constructor(private elementRef: ElementRef,\n                private renderer: Renderer2,\n                private splitter: McSplitterComponent) {}\n\n    disableFlex(): void {\n        this.renderer.removeStyle(this.elementRef.nativeElement, 'flex');\n    }\n\n    ngOnInit(): void {\n        this.splitter.addArea(this);\n\n        this.removeStyle(StyleProperty.MaxWidth);\n        this.setStyle(StyleProperty.Flex, '1');\n\n        if (this.splitter.direction === Direction.Vertical) {\n            this.setStyle(StyleProperty.Width, '100%');\n            this.removeStyle(StyleProperty.Height);\n        } else {\n            this.setStyle(StyleProperty.Height, '100%');\n            this.removeStyle(StyleProperty.Width);\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.splitter.removeArea(this);\n    }\n\n    setOrder(order: number): void {\n        this.setStyle(StyleProperty.Order, order);\n    }\n\n    setSize(size: number): void {\n        const sz = coerceNumberProperty(size);\n        this.setStyle(this.getSizeProperty(), coerceCssPixelValue(sz));\n    }\n\n    getSize(): number {\n        return this.elementRef.nativeElement[this.getOffsetSizeProperty()];\n    }\n\n    getMinSize(): number {\n        const styles = getComputedStyle(this.elementRef.nativeElement);\n\n        return parseFloat(styles[this.getMinSizeProperty()]);\n    }\n\n    private isVertical(): boolean {\n        return this.splitter.direction === Direction.Vertical;\n    }\n\n    private getMinSizeProperty(): StyleProperty {\n        return this.isVertical()\n            ? StyleProperty.MinHeight\n            : StyleProperty.MinWidth;\n    }\n\n    private getOffsetSizeProperty(): StyleProperty {\n        return this.isVertical()\n            ? StyleProperty.OffsetHeight\n            : StyleProperty.OffsetWidth;\n    }\n\n    private getSizeProperty(): StyleProperty {\n        return this.isVertical()\n            ? StyleProperty.Height\n            : StyleProperty.Width;\n    }\n\n    private setStyle(style: StyleProperty, value: string | number) {\n        this.renderer.setStyle(this.elementRef.nativeElement, style, value);\n    }\n\n    private removeStyle(style: StyleProperty) {\n        this.renderer.removeStyle(this.elementRef.nativeElement, style);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McGutterDirective, McSplitterAreaDirective, McSplitterComponent } from './splitter.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        McIconModule\n    ],\n    exports: [\n        McGutterDirective,\n        McSplitterAreaDirective,\n        McSplitterComponent\n    ],\n    declarations: [\n        McGutterDirective,\n        McSplitterAreaDirective,\n        McSplitterComponent\n    ]\n})\nexport class McSplitterModule {\n}\n","import { animate, state, style, transition, trigger } from '@angular/animations';\nimport {\n    Attribute,\n    ChangeDetectionStrategy, ChangeDetectorRef,\n    Component,\n    ElementRef, EventEmitter, forwardRef,\n    Input, Output, ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport {\n    ThemePalette,\n    CanColor, CanColorCtor,\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex\n} from '@ptsecurity/mosaic/core';\n\n\nlet nextUniqueId = 0;\n\ntype ToggleLabelPositionType = 'left' | 'right';\n\nexport class McToggleBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McToggleMixinBase:\n    HasTabIndexCtor &\n    CanDisableCtor &\n    CanColorCtor &\n    typeof McToggleBase = mixinTabIndex(mixinColor(mixinDisabled(McToggleBase), ThemePalette.Primary));\n\nexport class McToggleChange {\n    source: McToggleComponent;\n    checked: boolean;\n}\n\n@Component({\n    selector: 'mc-toggle',\n    exportAs: 'mcToggle',\n    templateUrl: './toggle.component.html',\n    styleUrls: ['./toggle.css'],\n    providers: [\n        {provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => McToggleComponent), multi: true}\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color', 'tabIndex'],\n    host: {\n        class: 'mc-toggle',\n        '[id]': 'id',\n        '[attr.id]': 'id',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-toggle_off]': '!checked'\n    },\n    animations: [\n        trigger('switch', [\n            state('true' , style({ left: '50%' })),\n            state('false', style({ left: '1px' })),\n            transition('true <=> false', animate('150ms'))\n        ])\n    ]\n})\nexport class McToggleComponent extends _McToggleMixinBase\n    implements ControlValueAccessor, CanColor, CanDisable, HasTabIndex {\n\n    @ViewChild('input') _inputElement: ElementRef;\n\n    @Input() labelPosition: ToggleLabelPositionType = 'right';\n\n    @Input('aria-label') ariaLabel: string = '';\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n    private _uniqueId: string = `mc-toggle-${++nextUniqueId}`;\n\n    // tslint:disable:member-ordering\n    @Input() id: string = this._uniqueId;\n\n    get inputId(): string {\n        return `${this.id || this._uniqueId}-input`;\n    }\n\n    @Input() name: string | null = null;\n\n    @Input() value: string;\n\n    private _disabled: boolean = false;\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value !== this._disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _checked: boolean = false;\n\n    get checked() {\n        return this._checked;\n    }\n\n    @Input()\n    set checked(value: boolean) {\n        if (value !== this._checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    @Output() readonly change: EventEmitter<McToggleChange> =\n        new EventEmitter<McToggleChange>();\n\n    constructor(public _elementRef: ElementRef,\n                private _focusMonitor: FocusMonitor,\n                private _changeDetectorRef: ChangeDetectorRef,\n                @Attribute('tabindex') tabIndex: string\n    ) {\n        super(_elementRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n    }\n\n    _getAriaChecked(): boolean {\n        return this.checked;\n    }\n\n    _onInteractionEvent(event: Event) {\n        event.stopPropagation();\n    }\n\n    _onLabelTextChange() {\n        this._changeDetectorRef.markForCheck();\n    }\n\n    _onInputClick(event: MouseEvent) {\n        event.stopPropagation();\n        this._updateModelValue();\n        this._emitChangeEvent();\n    }\n\n    writeValue(value: any) {\n        this.checked = !!value;\n    }\n\n    registerOnChange(fn: any) {\n        this._onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: any) {\n        this._onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n    }\n\n    // tslint:disable-next-line:no-empty\n    private _onTouchedCallback = () => {};\n\n    // tslint:disable-next-line:no-empty\n    private _onChangeCallback = (_: any) => {};\n\n    private _updateModelValue() {\n        this._checked = !this.checked;\n        this._onChangeCallback(this.checked);\n        this._onTouchedCallback();\n    }\n\n    private _emitChangeEvent() {\n        const event = new McToggleChange();\n        event.source = this;\n        event.checked = this.checked;\n\n        this._onChangeCallback(this.checked);\n        this.change.emit(event);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McToggleComponent } from './toggle.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule],\n    exports: [McToggleComponent],\n    declarations: [McToggleComponent]\n})\nexport class McToggleModule {\n}\n","/* tslint:disable:no-empty */\n\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    Directive,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Input,\n    isDevMode,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    Renderer2,\n    Self,\n    SimpleChanges,\n    ViewChild,\n    ViewChildren,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    RIGHT_ARROW,\n    SPACE,\n    UP_ARROW,\n    A\n} from '@ptsecurity/cdk/keycodes';\nimport {\n    CdkConnectedOverlay,\n    ViewportRuler\n} from '@ptsecurity/cdk/overlay';\nimport { CdkTree } from '@ptsecurity/cdk/tree';\nimport {\n    getOptionScrollPosition,\n    CanDisable,\n    CanUpdateErrorState,\n    ErrorStateMatcher,\n    HasTabIndex,\n    CanDisableCtor,\n    HasTabIndexCtor,\n    CanUpdateErrorStateCtor,\n    mixinTabIndex,\n    mixinDisabled,\n    mixinErrorState,\n    mcSelectAnimations,\n\n    SELECT_PANEL_MAX_HEIGHT,\n    SELECT_PANEL_PADDING_X,\n    SELECT_PANEL_VIEWPORT_PADDING,\n\n    getMcSelectDynamicMultipleError,\n    getMcSelectNonFunctionValueError,\n    getMcSelectNonArrayValueError,\n    MC_SELECT_SCROLL_STRATEGY\n} from '@ptsecurity/mosaic/core';\nimport { McFormField, McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { McTag } from '@ptsecurity/mosaic/tags';\nimport { McTreeSelection, McTreeOption } from '@ptsecurity/mosaic/tree';\nimport { defer, merge, Observable, Subject } from 'rxjs';\nimport {\n    filter,\n    map,\n    startWith,\n    switchMap,\n    take,\n    takeUntil,\n    distinctUntilChanged\n} from 'rxjs/operators';\n\n\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the select value has changed. */\nexport class McTreeSelectChange {\n    constructor(public source: McTreeOption, public value: any, public isUserInput = false) {}\n}\n\n\n@Directive({ selector: 'mc-tree-select-trigger' })\nexport class McTreeSelectTrigger {}\n\n\nclass McTreeSelectBase {\n    constructor(\n        public elementRef: ElementRef,\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {}\n}\n\n// tslint:disable-next-line:naming-convention\nconst McTreeSelectMixinBase: CanDisableCtor & HasTabIndexCtor & CanUpdateErrorStateCtor &\n    typeof McTreeSelectBase = mixinTabIndex(mixinDisabled(mixinErrorState(McTreeSelectBase)));\n\n\n@Component({\n    selector: 'mc-tree-select',\n    exportAs: 'mcTreeSelect',\n    templateUrl: 'tree-select.html',\n    styleUrls: ['./tree-select.css'],\n    inputs: ['disabled', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'tabIndex',\n\n        class: 'mc-tree-select',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-select-invalid]': 'errorState',\n        '[class.mc-select-required]': 'required',\n\n        '(keydown)': 'handleKeydown($event)',\n        '(focus)': 'onFocus()',\n        '(blur)': 'onBlur()',\n        '(window:resize)': 'calculateHiddenItems()'\n    },\n    animations: [\n        mcSelectAnimations.transformPanel,\n        mcSelectAnimations.fadeInContent\n    ],\n    providers: [\n        { provide: McFormFieldControl, useExisting: McTreeSelect },\n        { provide: CdkTree, useExisting: McTreeSelect }\n    ]\n})\nexport class McTreeSelect extends McTreeSelectMixinBase implements\n    AfterContentInit, AfterViewInit, OnChanges, OnDestroy, OnInit, DoCheck, ControlValueAccessor,\n    CanDisable, HasTabIndex, McFormFieldControl<any>, CanUpdateErrorState {\n\n    /** A name for this control that can be used by `mc-form-field`. */\n    controlType = 'mc-select';\n\n    hiddenItems: number = 0;\n    oneMoreText: string = '...ещё';\n\n    /** The last measured value for the trigger's client bounding rect. */\n    triggerRect: ClientRect;\n\n    /** The cached font-size of the trigger element. */\n    triggerFontSize = 0;\n\n    /** Deals with the selection logic. */\n    selectionModel: SelectionModel<McTreeOption>;\n\n    /** The IDs of child options to be passed to the aria-owns attribute. */\n    optionIds: string = '';\n\n    /** The value of the select panel's transform-origin property. */\n    transformOrigin: string = 'top';\n\n    /** Whether the panel's animation is done. */\n    panelDoneAnimating: boolean = false;\n\n    /** Emits when the panel element is finished transforming in. */\n    panelDoneAnimatingStream = new Subject<string>();\n\n    /** Strategy that will be used to handle scrolling while the select panel is open. */\n    scrollStrategy = this.scrollStrategyFactory();\n\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n    offsetY = 0;\n\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n    positions = [\n        {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top'\n        },\n        {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom'\n        }\n    ];\n\n    @ViewChild('trigger') trigger: ElementRef;\n\n    @ViewChild('panel') panel: ElementRef;\n\n    @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n    @ViewChildren(McTag) tags: QueryList<McTag>;\n\n    /** User-supplied override of the trigger element. */\n    @ContentChild(McTreeSelectTrigger) customTrigger: McTreeSelectTrigger;\n\n    @ContentChild(McTreeSelection) tree: McTreeSelection;\n\n    /** Event emitted when the select panel has been toggled. */\n    @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted when the select has been opened. */\n    @Output('opened') readonly openedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => o), map(() => {}));\n\n    /** Event emitted when the select has been closed. */\n    @Output('closed') readonly closedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => !o), map(() => {}));\n\n    /** Event emitted when the selected value has been changed by the user. */\n    @Output() readonly selectionChange = new EventEmitter<McTreeSelectChange>();\n\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n    @Input() panelClass: string | string[] | Set<string> | { [key: string]: any };\n\n    /** Object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Function used to sort the values in a select in multiple mode.\n     * Follows the same logic as `Array.prototype.sort`.\n     */\n    @Input() sortComparator: (\n        a: McTreeOption, b: McTreeOption, options: McTreeOption[]\n    ) => number;\n\n    /** Combined stream of all of the child options' change events. */\n    readonly optionSelectionChanges: Observable<McTreeSelectChange> = defer(() => {\n        if (this.options) {\n            return merge(...this.options.map((option) => option.onSelectionChange));\n        }\n\n        return this.ngZone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n    }) as Observable<McTreeSelectChange>;\n\n    options: QueryList<McTreeOption>;\n\n    private originalOnKeyDown: (event: KeyboardEvent) => void;\n\n    @Input()\n    get placeholder(): string {\n        return this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n\n        this.stateChanges.next();\n    }\n\n    private _placeholder: string;\n\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n\n        this.stateChanges.next();\n    }\n\n    private _required: boolean = false;\n\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        if (this.selectionModel) {\n            throw getMcSelectDynamicMultipleError();\n        }\n\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    private _multiple: boolean = false;\n\n    @Input()\n    get autoSelect(): boolean {\n        if (this.multiple) { return false; }\n\n        return this._autoSelect;\n    }\n\n    set autoSelect(value: boolean) {\n        this._autoSelect = coerceBooleanProperty(value);\n    }\n\n    private _autoSelect: boolean = true;\n\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith() {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        /* tslint:disable-next-line:strict-type-predicates */\n        if (typeof fn !== 'function') {\n            throw getMcSelectNonFunctionValueError();\n        }\n\n        this._compareWith = fn;\n\n        if (this.selectionModel) {\n            // A different comparator means the selection could change.\n            this.initializeSelection();\n        }\n    }\n\n    /** Value of the select control. */\n    @Input()\n    get value(): any {\n        return this._value;\n    }\n\n    set value(newValue: any) {\n        if (newValue !== this._value) {\n            this.writeValue(newValue);\n            this._value = newValue;\n        }\n    }\n\n    private _value: any;\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n        this.stateChanges.next();\n    }\n\n    private _id: string;\n\n    /** Whether the select is focused. */\n    get focused(): boolean {\n        return this._focused || this._panelOpen;\n    }\n\n    /**\n     * @deprecated Setter to be removed as this property is intended to be readonly.\n     * @breaking-change 8.0.0\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n\n    private _focused = false;\n\n    get panelOpen(): boolean {\n        return this._panelOpen;\n    }\n\n    private _panelOpen = false;\n\n    /** The scroll position of the overlay panel, calculated to center the selected option. */\n    private scrollTop = 0;\n\n    /** Unique id for this input. */\n    private readonly uid = `mc-select-${nextUniqueId++}`;\n\n    /** Emits whenever the component is destroyed. */\n    private readonly destroy = new Subject<void>();\n\n    constructor(\n        private readonly viewportRuler: ViewportRuler,\n        readonly changeDetectorRef: ChangeDetectorRef,\n        private readonly ngZone: NgZone,\n        private readonly renderer: Renderer2,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        public elementRef: ElementRef,\n        @Optional() private readonly dir: Directionality,\n        @Optional() parentForm: NgForm,\n        @Optional() parentFormGroup: FormGroupDirective,\n        @Optional() private readonly parentFormField: McFormField,\n        @Self() @Optional() public ngControl: NgControl,\n        @Attribute('tabindex') tabIndex: string,\n        @Inject(MC_SELECT_SCROLL_STRATEGY) private readonly scrollStrategyFactory\n    ) {\n        super(elementRef, defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnInit() {\n        if (this.tree) {\n            this.tree.multiple = this.multiple;\n        }\n\n        this.stateChanges.next();\n\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this.panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this.panelOpen) {\n                    this.scrollTop = 0;\n                    this.openedChange.emit(true);\n                } else {\n                    this.openedChange.emit(false);\n                    this.panelDoneAnimating = false;\n                    this.overlayDir.offsetX = 0;\n                    this.changeDetectorRef.markForCheck();\n                }\n            });\n    }\n\n    ngAfterContentInit() {\n        if (!this.tree) { return; }\n\n        this.initKeyManager();\n\n        this.selectionModel = this.tree.selectionModel = new SelectionModel<McTreeOption>(this.multiple);\n        this.options = this.tree.options;\n        this.tree.autoSelect = this.autoSelect;\n\n        this.selectionModel.changed\n            .pipe(takeUntil(this.destroy))\n            .subscribe((event) => {\n                event.added.forEach((option) => option.select());\n                event.removed.forEach((option) => option.deselect());\n            });\n    }\n\n    ngAfterViewInit() {\n        if (!this.tree) { return; }\n\n        this.tags.changes\n            .subscribe(() => {\n                setTimeout(() => this.calculateHiddenItems(), 0);\n            });\n\n        this.options.changes\n            .pipe(startWith(null), takeUntil(this.destroy))\n            .subscribe(() => {\n                this.updateSelectedOptions();\n\n                this.resetOptions();\n            });\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) { this.updateErrorState(); }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes.disabled) {\n            this.stateChanges.next();\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroy.next();\n\n        this.destroy.complete();\n        this.stateChanges.complete();\n    }\n\n    /** `View -> model callback called when value changes` */\n    onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when select has been touched` */\n    onTouched = () => {};\n\n    toggle() {\n        if (this.panelOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    open() {\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) { return; }\n\n        this.triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this.triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n        this._panelOpen = true;\n        // this.tree.keyManager.withHorizontalOrientation(null);\n        this.calculateOverlayPosition();\n        this.highlightCorrectOption();\n        this.changeDetectorRef.markForCheck();\n\n        // Set the font size on the panel element once it exists.\n        this.ngZone.onStable.asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                if (this.triggerFontSize && this.overlayDir.overlayRef &&\n                    this.overlayDir.overlayRef.overlayElement) {\n                    this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this.triggerFontSize}px`;\n                }\n            });\n    }\n\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n\n            // this.tree.keyManager.setActiveItem(-1);\n\n            // this.tree.keyManager.withHorizontalOrientation(this.isRtl() ? 'rtl' : 'ltr');\n            this.changeDetectorRef.markForCheck();\n            this.onTouched();\n        }\n    }\n\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    // todo нужно доделать!\n    writeValue(value: any) {\n        if (this.options) {\n            this.setSelectionByValue(value);\n        }\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.onChange = fn;\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn: () => {}) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this.changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    get selected(): McTreeOption | McTreeOption[] {\n        return this.multiple ? this.selectionModel.selected : this.selectionModel.selected[0];\n    }\n\n    get triggerValue(): string {\n        if (this.empty) { return ''; }\n\n        return (this.selected as McTreeOption).viewValue;\n    }\n\n    get triggerValues(): McTreeOption[] {\n        if (this.empty) { return []; }\n\n        const selectedOptions = this.selectionModel.selected;\n\n        if (this.isRtl()) { selectedOptions.reverse(); }\n\n        return selectedOptions;\n    }\n\n    get empty(): boolean {\n        return !this.selectionModel || this.selectionModel.isEmpty();\n    }\n\n    isRtl(): boolean {\n        return this.dir ? this.dir.value === 'rtl' : false;\n    }\n\n    handleKeydown(event: KeyboardEvent) {\n        if (!this.disabled) {\n            if (this.panelOpen) {\n                this.handleOpenKeydown(event);\n            } else {\n                this.handleClosedKeydown(event);\n            }\n        }\n    }\n\n    /**\n     * When the panel content is done fading in, the panelDoneAnimating property is\n     * set so the proper class can be added to the panel.\n     */\n    onFadeInDone() {\n        this.panelDoneAnimating = this.panelOpen;\n        this.changeDetectorRef.markForCheck();\n    }\n\n    onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    onBlur() {\n        this._focused = false;\n\n        if (!this.disabled && !this.panelOpen) {\n            this.onTouched();\n            this.changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n\n    /** Callback that is invoked when the overlay panel has been attached. */\n    onAttached() {\n        this.overlayDir.positionChange\n            .pipe(take(1))\n            .subscribe(() => {\n                this.changeDetectorRef.detectChanges();\n                this.calculateOverlayOffsetX();\n                this.panel.nativeElement.scrollTop = this.scrollTop;\n            });\n    }\n\n    /** Returns the theme to be used on the panel. */\n    getPanelTheme(): string {\n        return this.parentFormField ? `mc-${this.parentFormField.color}` : '';\n    }\n\n    /** Focuses the select element. */\n    focus() {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    calculateOverlayScroll(selectedIndex: number, scrollBuffer: number, maxScroll: number): number {\n        const itemHeight = this.getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n\n        /* tslint:disable-next-line:no-magic-numbers */\n        const halfOptionHeight = itemHeight / 2;\n\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n\n    /** Invoked when an option is clicked. */\n    onRemoveSelectedOption(selectedOption: McTreeOption, $event) {\n        $event.stopPropagation();\n\n        this.options.forEach((option) => {\n            if (option.data === selectedOption.data) { option.deselect(); }\n        });\n\n        this.selectionModel.deselect(selectedOption);\n    }\n\n    calculateHiddenItems() {\n        if (this.empty || !this.multiple) { return; }\n\n        let visibleItems: number = 0;\n        const totalItemsWidth = this.getTotalItemsWidthInMatcher();\n        let totalVisibleItemsWidth: number = 0;\n        const itemMargin: number = 4;\n\n        this.tags.forEach((tag) => {\n            if (tag.nativeElement.offsetTop < tag.nativeElement.offsetHeight) {\n                totalVisibleItemsWidth += tag.nativeElement.getBoundingClientRect().width + itemMargin;\n                visibleItems++;\n            }\n        });\n\n        this.hiddenItems = this.selectionModel.selected.length - visibleItems;\n\n        if (this.hiddenItems) {\n            const itemsCounter = this.trigger.nativeElement.querySelector('.mc-tree-select__match-hidden-text');\n            const matcherList = this.trigger.nativeElement.querySelector('.mc-tree-select__match-list');\n\n            const itemsCounterShowed = itemsCounter.offsetTop < itemsCounter.offsetHeight;\n            // const itemsCounterWidth: number = itemsCounter.getBoundingClientRect().width;\n            const itemsCounterWidth: number = 86;\n\n            const matcherListWidth: number = matcherList.getBoundingClientRect().width;\n            const matcherWidth: number = matcherListWidth + itemsCounterWidth;\n\n            if (itemsCounterShowed && (totalItemsWidth < matcherWidth)) { this.hiddenItems = 0; }\n\n            if (\n                totalVisibleItemsWidth === matcherListWidth ||\n                (totalVisibleItemsWidth + itemsCounterWidth) < matcherListWidth\n            ) {\n                this.changeDetectorRef.markForCheck();\n\n                return ;\n            } else if (!itemsCounterShowed && (totalItemsWidth + itemsCounterWidth) > matcherWidth) {\n                this.hiddenItems++;\n            }\n        }\n\n        this.changeDetectorRef.markForCheck();\n    }\n\n    private updateSelectedOptions(): void {\n        this.selectionModel.selected.forEach((selectedOption) => {\n            this.options.forEach((option) => {\n                if (option.data === selectedOption.data) {\n                    this.selectionModel.deselect(selectedOption);\n                    this.selectionModel.select(option);\n\n                    option.select();\n                }\n            });\n        });\n    }\n\n    private getTotalItemsWidthInMatcher(): number {\n        const triggerClone = this.trigger.nativeElement.cloneNode(true);\n        triggerClone.querySelector('.mc-tree-select__match-hidden-text').remove();\n\n        this.renderer.setStyle(triggerClone, 'position', 'absolute');\n        this.renderer.setStyle(triggerClone, 'visibility', 'hidden');\n        this.renderer.setStyle(triggerClone, 'top', '-100%');\n        this.renderer.setStyle(triggerClone, 'left', '0');\n\n        this.renderer.appendChild(this.trigger.nativeElement, triggerClone);\n\n        let totalItemsWidth: number = 0;\n        const itemMargin: number = 4;\n        triggerClone.querySelectorAll('mc-tag').forEach((item) => {\n            totalItemsWidth += item.getBoundingClientRect().width as number + itemMargin;\n        });\n\n        triggerClone.remove();\n\n        return totalItemsWidth;\n    }\n\n    private handleClosedKeydown(event: KeyboardEvent) {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n        // Open the select on ALT + arrow key to match the native <select>\n        if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n            // prevents the page from scrolling down when pressing space\n            event.preventDefault();\n\n            this.open();\n        } else if (!this.multiple && this.tree.keyManager && this.tree.keyManager.onKeydown) {\n            this.tree.keyManager.onKeydown(event);\n        }\n    }\n\n    private handleOpenKeydown(event: KeyboardEvent) {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n\n            this.close();\n        } else if (keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW) {\n            return this.originalOnKeyDown.call(this.tree, event);\n        } else if (keyCode === HOME || keyCode === END) {\n            event.preventDefault();\n\n            if (keyCode === HOME) {\n                this.tree.keyManager.setFirstItemActive();\n            } else {\n                this.tree.keyManager.setLastItemActive();\n            }\n        } else if ((keyCode === ENTER || keyCode === SPACE) && this.tree.keyManager.activeItem) {\n            event.preventDefault();\n\n            this.tree.keyManager.activeItem.selectViaInteraction();\n        } else if (this.multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n\n            const hasDeselectedOptions = this.options.some((option) => !option.selected);\n\n            this.options.forEach((option) => {\n                if (hasDeselectedOptions && !option.disabled) {\n                    option.select();\n                } else {\n                    option.deselect();\n                }\n            });\n        } else {\n            const previouslyFocusedIndex = this.tree.keyManager.activeItemIndex;\n\n            this.tree.keyManager.onKeydown(event);\n\n            if (this.multiple && isArrowKey && event.shiftKey && this.tree.keyManager.activeItem &&\n                this.tree.keyManager.activeItemIndex !== previouslyFocusedIndex) {\n                this.tree.keyManager.activeItem.selectViaInteraction();\n            }\n        }\n    }\n\n    private initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this.setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n        });\n    }\n\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    private setSelectionByValue(value: any | any[]) {\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) { throw getMcSelectNonArrayValueError(); }\n\n            this.selectionModel.clear();\n            value.forEach((currentValue: any) => this.selectValue(currentValue));\n            this.sortValues();\n        } else {\n            this.selectionModel.clear();\n            const correspondingOption = this.selectValue(value);\n\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this.tree.keyManager.setActiveItem(correspondingOption);\n            }\n        }\n\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    private selectValue(value: any): McTreeOption | undefined {\n        const correspondingOption = this.options.find((option: McTreeOption) => {\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            } catch (error) {\n                if (isDevMode()) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n\n                return false;\n            }\n        });\n\n        if (correspondingOption) {\n            this.selectionModel.select(correspondingOption);\n        }\n\n        return correspondingOption;\n    }\n\n    private initKeyManager() {\n        this.originalOnKeyDown = this.tree.onKeyDown;\n\n        this.tree.onKeyDown = () => {};\n\n        this.tree.keyManager.tabOut\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            });\n\n        this.tree.keyManager.change\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this._panelOpen && this.panel) {\n                    this.scrollActiveOptionIntoView();\n                } else if (!this._panelOpen && !this.multiple && this.tree.keyManager.activeItem) {\n                    this.tree.keyManager.activeItem.selectViaInteraction();\n                }\n            });\n    }\n\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    private resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this.destroy);\n\n        this.optionSelectionChanges\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe((event) => {\n                this.onSelect(event.source, event.isUserInput);\n\n                if (event.isUserInput && !this.multiple && this._panelOpen) {\n                    this.close();\n                    this.focus();\n                }\n            });\n\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        // merge(...this.options.map((option) => option.stateChanges))\n        //     .pipe(takeUntil(changedOrDestroyed))\n        //     .subscribe(() => {\n        //         this.changeDetectorRef.markForCheck();\n        //         this.stateChanges.next();\n        //     });\n\n        this.setOptionIds();\n    }\n\n    /** Invoked when an option is clicked. */\n    private onSelect(option: McTreeOption, isUserInput: boolean) {\n        const wasSelected = this.selectionModel.isSelected(option);\n\n        if (option.value == null && !this.multiple) {\n            option.deselect();\n            this.selectionModel.clear();\n            this.propagateChanges(option.value);\n        } else {\n            if (option.selected) {\n                this.selectionModel.select(option);\n            } else {\n                this.selectionModel.deselect(option);\n            }\n\n            if (isUserInput) {\n                this.tree.keyManager.setActiveItem(option);\n            }\n\n            if (this.multiple) {\n                this.sortValues();\n\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mc-option`.\n                    this.focus();\n                }\n            }\n        }\n\n        if (wasSelected !== this.selectionModel.isSelected(option)) {\n            this.propagateChanges();\n        }\n\n        this.stateChanges.next();\n    }\n\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    private sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n\n            this.selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n\n    /** Emits change event to set the model value. */\n    private propagateChanges(fallbackValue?: any) {\n        let valueToEmit: any = null;\n\n        if (this.multiple) {\n            valueToEmit = (this.selected as any).map((option) => option.value);\n        } else {\n            valueToEmit = this.selected ? (this.selected as any).value : fallbackValue;\n        }\n\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this.onChange(valueToEmit);\n        this.selectionChange.emit(new McTreeSelectChange(this as any, valueToEmit));\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Records option IDs to pass to the aria-owns property. */\n    private setOptionIds() {\n        this.optionIds = this.options.map((option) => option.id).join(' ');\n    }\n\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    private highlightCorrectOption() {\n        if (this.tree.keyManager) {\n            if (this.empty) {\n                this.tree.keyManager.setFirstItemActive();\n            } else {\n                this.tree.keyManager.setActiveItem(this.selectionModel.selected[0]);\n            }\n        }\n    }\n\n    /** Scrolls the active option into view. */\n    private scrollActiveOptionIntoView() {\n        const activeOptionIndex = this.tree.keyManager.activeItemIndex || 0;\n\n        this.panel.nativeElement.scrollTop = getOptionScrollPosition(\n            activeOptionIndex,\n            this.getItemHeight(),\n            this.panel.nativeElement.scrollTop,\n            SELECT_PANEL_MAX_HEIGHT\n        );\n    }\n\n    /** Gets the index of the provided option in the option list. */\n    private getOptionIndex(option: McTreeOption): number | undefined {\n        // todo разобраться с этим срачем!\n        return this.options.reduce((result: number, current: McTreeOption, index: number) => {\n            /* tslint:disable-next-line:strict-type-predicates */\n            return result === undefined ? (option === current ? index : undefined) : result;\n        }, undefined);\n    }\n\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    private calculateOverlayPosition() {\n        const itemHeight = this.getItemHeight();\n        const items = this.getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n\n        // If no value is selected we open the popup to the first item.\n        const selectedOptionOffset =\n            this.empty ? 0 : this.getOptionIndex(this.selectionModel.selected[0])!;\n\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        /* tslint:disable-next-line:no-magic-numbers */\n        const scrollBuffer = panelHeight / 2;\n        this.scrollTop = this.calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this.offsetY = this.calculateOverlayOffsetY();\n\n        this.checkOverlayWithinViewport(maxScroll);\n    }\n\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    private calculateOverlayOffsetX() {\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this.viewportRuler.getViewportSize();\n        const isRtl = this.isRtl();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const paddingWidth = SELECT_PANEL_PADDING_X * 2;\n        let offsetX: number = SELECT_PANEL_PADDING_X;\n\n        // Invert the offset in LTR.\n        if (!isRtl) { offsetX *= -1; }\n\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        } else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    private calculateOverlayOffsetY(): number {\n        // const itemHeight = this.getItemHeight();\n        // const optionHeightAdjustment = (itemHeight - this.triggerRect.height) / 2;\n\n        // todo I'm not sure that we will use it\n        return 0;\n        // return Math.round(-optionHeightAdjustment);\n    }\n\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    private checkOverlayWithinViewport(maxScroll: number) {\n        const itemHeight = this.getItemHeight();\n        const viewportSize = this.viewportRuler.getViewportSize();\n\n        const topSpaceAvailable = this.triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable =\n            viewportSize.height - this.triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n        const panelHeightTop = Math.abs(this.offsetY);\n        const totalPanelHeight =\n            Math.min(this.getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this.triggerRect.height;\n\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this.adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        } else if (panelHeightTop > topSpaceAvailable) {\n            this.adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        } else {\n            this.transformOrigin = this.getOriginBasedOnOption();\n        }\n    }\n\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    private adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this.scrollTop -= distanceBelowViewport;\n        this.offsetY -= distanceBelowViewport;\n        this.transformOrigin = this.getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this.scrollTop <= 0) {\n            this.scrollTop = 0;\n            this.offsetY = 0;\n            this.transformOrigin = `50% bottom 0px`;\n        }\n    }\n\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    private adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number, maxScroll: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this.scrollTop += distanceAboveViewport;\n        this.offsetY += distanceAboveViewport;\n        this.transformOrigin = this.getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this.scrollTop >= maxScroll) {\n            this.scrollTop = maxScroll;\n            this.offsetY = 0;\n            this.transformOrigin = `50% top 0px`;\n\n            return;\n        }\n    }\n\n    /** Sets the transform origin point based on the selected option. */\n    private getOriginBasedOnOption(): string {\n        const itemHeight = this.getItemHeight();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const optionHeightAdjustment = (itemHeight - this.triggerRect.height) / 2;\n        /* tslint:disable-next-line:no-magic-numbers */\n        const originY = Math.abs(this.offsetY) - optionHeightAdjustment + itemHeight / 2;\n\n        return `50% ${originY}px 0px`;\n    }\n\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    private getItemCount(): number {\n        return this.options.length;\n    }\n\n    /** Calculates the height of the select's options. */\n    private getItemHeight(): number {\n        // todo доделать\n        /* tslint:disable-next-line:no-magic-numbers */\n        return 32;\n        // return this.triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { CdkTreeModule } from '@ptsecurity/cdk/tree';\nimport { MC_SELECT_SCROLL_STRATEGY_PROVIDER, McPseudoCheckboxModule } from '@ptsecurity/mosaic/core';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\nimport { McTagsModule } from '@ptsecurity/mosaic/tags';\nimport { McTreeModule } from '@ptsecurity/mosaic/tree';\n\nimport { McTreeSelect, McTreeSelectTrigger } from './tree-select.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        CdkTreeModule,\n        McTreeModule,\n        McIconModule,\n        McTagsModule,\n        McPseudoCheckboxModule\n    ],\n    exports: [McTreeSelect, McTreeSelectTrigger, CommonModule],\n    declarations: [McTreeSelect, McTreeSelectTrigger],\n    providers: [MC_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class McTreeSelectModule {}\n","import {\n    Directive, DoCheck, ElementRef, Inject,\n    Input, OnChanges, OnDestroy, Optional,\n    Self, InjectionToken, NgZone, OnInit\n} from '@angular/core';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { fromEvent, Subscription, Subject } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\n\n\nexport const MC_TEXTAREA_VALUE_ACCESSOR =\n    new InjectionToken<{ value: any }>('MC_TEXTAREA_VALUE_ACCESSOR');\n\nlet nextUniqueId = 0;\n\nconst ROW_SEPARATOR = '\\n';\n\nexport class McTextareaBase {\n    constructor(public defaultErrorStateMatcher: ErrorStateMatcher,\n                public parentForm: NgForm,\n                public parentFormGroup: FormGroupDirective,\n                public ngControl: NgControl) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McTextareaMixinBase: CanUpdateErrorStateCtor & typeof McTextareaBase = mixinErrorState(McTextareaBase);\n\n@Directive({\n    selector: 'textarea[mcTextarea]',\n    exportAs: 'mcTextarea',\n    host: {\n        class: 'mc-textarea',\n        '[class.mc-textarea-resizable]': '!canGrow',\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[attr.aria-invalid]': 'errorState',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '(blur)': 'focusChanged(false)',\n        '(focus)': 'focusChanged(true)'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McTextarea }]\n})\nexport class McTextarea extends McTextareaMixinBase implements McFormFieldControl<any>, OnInit, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n\n    @Input() canGrow: boolean = true;\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-textarea';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this.valueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this.valueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n\n    protected uid = `mc-textsrea-${nextUniqueId++}`;\n    protected previousNativeValue: any;\n    protected _disabled = false;\n    protected _id: string;\n    protected _required = false;\n\n    private valueAccessor: { value: any };\n    private growSubscription: Subscription;\n\n    private lineHeight: number = 0;\n    private freeRowsHeight: number = 0;\n    private minHeight: number = 0;\n\n    constructor(protected elementRef: ElementRef,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() parentForm: NgForm,\n                @Optional() parentFormGroup: FormGroupDirective,\n                defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_TEXTAREA_VALUE_ACCESSOR) inputValueAccessor: any,\n                private ngZone: NgZone) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n        // If no input value accessor was explicitly specified, use the element as the textarea value\n        // accessor.\n        this.valueAccessor = inputValueAccessor || this.elementRef.nativeElement;\n\n        this.previousNativeValue = this.value;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n\n        const growObserver = fromEvent(elementRef.nativeElement, 'input')\n            /*.pipe(\n                map((event: any) => this.getGrowHeight()),\n                // map((event: any) => event.target.scrollHeight),\n                distinctUntilChanged()\n            )*/;\n        this.growSubscription = growObserver.subscribe(this.grow.bind(this));\n    }\n\n    ngOnInit() {\n        setTimeout(() => this.grow(), 0);\n        this.lineHeight = parseInt(getComputedStyle(this.elementRef.nativeElement).lineHeight!, 10);\n\n        const paddingTop = parseInt(getComputedStyle(this.elementRef.nativeElement).paddingTop!, 10);\n        const paddingBottom = parseInt(getComputedStyle(this.elementRef.nativeElement).paddingBottom!, 10);\n\n        // tslint:disable-next-line:no-magic-numbers\n        this.minHeight = this.lineHeight * 2 + paddingTop + paddingBottom;\n        this.freeRowsHeight = this.lineHeight;\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        this.growSubscription.unsubscribe();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this.dirtyCheckNativeValue();\n    }\n\n    /** Grow textarea height to avoid vertical scroll  */\n    grow() {\n        if (!this.canGrow) {\n            return;\n        }\n\n        this.ngZone.runOutsideAngular(() => {\n            const textarea = this.elementRef.nativeElement;\n\n            const outerHeight = parseInt(window.getComputedStyle(textarea).height!, 10);\n            const diff = outerHeight - textarea.clientHeight;\n\n            textarea.style.height = 0; // this line is important to height recalculation\n\n            const height = Math.max(this.minHeight, textarea.scrollHeight + diff + this.freeRowsHeight);\n            textarea.style.height = `${height}px`;\n        });\n    }\n\n    /** Focuses the textarea. */\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /** Callback for the cases where the focused state of the textarea changes. */\n    focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this.elementRef.nativeElement.value && !this.isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Does some manual dirty checking on the native textarea `value` property. */\n    protected dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this.previousNativeValue !== newValue) {\n            this.previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Checks whether the textarea is invalid based on the native validation. */\n    protected isBadInput(): boolean {\n        // The `validity` property won't be present on platform-server.\n        const validity = (this.elementRef.nativeElement as HTMLTextAreaElement).validity;\n\n        return validity && validity.badInput;\n    }\n\n    private getGrowHeight(): number {\n        const textarea = this.elementRef.nativeElement;\n        const outerHeight = parseInt(window.getComputedStyle(textarea).height!.toString(), 10);\n        const diff = outerHeight - textarea.clientHeight;\n\n        return Math.max(this.minHeight, textarea.scrollHeight + diff);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McTextarea } from './textarea.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule, FormsModule],\n    exports: [McTextarea],\n    declarations: [McTextarea]\n})\nexport class McTextareaModule {\n}\n","import {\n    Directive,\n    DoCheck,\n    ElementRef,\n    forwardRef,\n    Inject,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Optional,\n    Renderer2,\n    Self\n} from '@angular/core';\nimport {\n    ControlValueAccessor,\n    FormControl,\n    FormGroupDirective,\n    NG_VALIDATORS,\n    NgControl,\n    NgForm,\n    ValidationErrors,\n    ValidatorFn,\n    Validators\n} from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { DateAdapter } from '@ptsecurity/cdk/datetime';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { MC_INPUT_VALUE_ACCESSOR } from '@ptsecurity/mosaic/input';\nimport {\n    noop,\n    Subject\n} from 'rxjs';\n\nimport {\n    ARROW_DOWN_KEYCODE,\n    ARROW_LEFT_KEYCODE,\n    ARROW_RIGHT_KEYCODE,\n    ARROW_UP_KEYCODE,\n    DEFAULT_TIME_FORMAT,\n    HOURS_PER_DAY,\n    HOURS_MINUTES_REGEXP,\n    HOURS_MINUTES_SECONDS_REGEXP,\n    HOURS_ONLY_REGEXP,\n    MINUTES_PER_HOUR,\n    SECONDS_PER_MINUTE,\n    TIMEFORMAT_PLACEHOLDERS,\n    TimeFormats,\n    TimeParts\n} from './timepicker.constants';\n\n\nlet uniqueComponentIdSuffix: number = 0;\n\nconst formValidators: WeakMap<FormControl, ValidatorFn | null> = new WeakMap();\nconst formValidatorOnChangeRegistrators: WeakMap<FormControl, () => void> = new WeakMap();\nconst validatorOnChange = (c: FormControl) => {\n    const validatorOnChangeHandler = formValidatorOnChangeRegistrators.get(c);\n\n    if (validatorOnChangeHandler !== undefined) { validatorOnChangeHandler(); }\n};\n\nexport class McTimepickerBase {\n    constructor(\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl) { }\n}\n\n// tslint:disable-next-line naming-convention\nexport const McTimepickerMixinBase:\n    CanUpdateErrorStateCtor &\n    typeof McTimepickerBase = mixinErrorState(McTimepickerBase);\n\n@Directive({\n    selector: 'input[mcTimepicker]',\n    exportAs: 'mcTimepickerInput',\n    host: {\n        class: 'mc-timepicker mc-input',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '[attr.time-format]': 'timeFormat',\n        '[attr.min-time]': 'minTime',\n        '[attr.max-time]': 'maxTime',\n        '[attr.value]': 'value',\n        '[attr.aria-invalid]': 'errorState',\n        '(blur)': 'onBlur()',\n        '(focus)': 'focusChanged(true)',\n        '(input)': 'onInput()',\n        '(paste)': 'onPaste($event)',\n        '(keydown)': 'onKeyDown($event)'\n    },\n    providers: [\n        {\n            provide: NG_VALIDATORS,\n            useValue: {\n                validate(c: FormControl) {\n                    // TODO This is `workaround` to bind singleton-like Validator implementation to\n                    // context of each validated component. This MUST be realized in proper way!\n                    if (this.__validatorOnChangeHandler !== undefined) {\n                        formValidatorOnChangeRegistrators.set(c, this.__validatorOnChangeHandler);\n                        this.__validatorOnChangeHandler = undefined;\n                    }\n                    const validator = formValidators.get(c);\n\n                    return validator ? validator(c) : null;\n                },\n                registerOnValidatorChange(fn: () => void): void {\n                    this.__validatorOnChangeHandler = fn;\n                }\n            },\n            multi: true\n        },\n        {\n            provide: McFormFieldControl,\n            useExisting: forwardRef(() => McTimepicker)\n        }\n    ]\n\n})\nexport class McTimepicker extends McTimepickerMixinBase\n    implements McFormFieldControl<any>,\n        OnChanges,\n        OnDestroy,\n        DoCheck,\n        CanUpdateErrorState,\n        ControlValueAccessor {\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-timepicker';\n\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) { return this.ngControl.disabled; }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n        }\n\n        this.stateChanges.next();\n    }\n\n    @Input()\n    get id(): string { return this._id; }\n\n    set id(value: string) { this._id = value || this.uid; }\n\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean { return this._required; }\n\n    set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string { return this.inputValueAccessor.value; }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this.inputValueAccessor.value = value;\n            this.applyInputChanges();\n        }\n    }\n\n    @Input('time-format')\n    get timeFormat(): TimeFormats { return this._timeFormat; }\n\n    set timeFormat(formatValue: TimeFormats) {\n        this._timeFormat = Object\n            .keys(TimeFormats)\n            .map((timeFormatKey) => TimeFormats[timeFormatKey])\n            .indexOf(formatValue) > -1 ? formatValue : DEFAULT_TIME_FORMAT;\n\n        validatorOnChange(<FormControl> this.ngControl.control);\n        this.placeholder = TIMEFORMAT_PLACEHOLDERS[this._timeFormat];\n    }\n\n    @Input('min-time')\n    get minTime(): string | null { return this._minTime; }\n\n    set minTime(minValue: string | null) {\n        this._minTime = minValue;\n        this.minDateTime = minValue !== null ? this.getDateFromTimeString(minValue) : undefined;\n        validatorOnChange(<FormControl> this.ngControl.control);\n    }\n\n    @Input('max-time')\n    get maxTime(): string | null { return this._maxTime; }\n\n    set maxTime(maxValue: string | null) {\n        this._maxTime = maxValue;\n        this.maxDateTime = maxValue !== null ? this.getDateFromTimeString(maxValue) : undefined;\n        validatorOnChange(<FormControl> this.ngControl.control);\n    }\n\n    private _id: string;\n    private readonly uid = `mc-timepicker-${uniqueComponentIdSuffix++}`;\n    private _disabled: boolean;\n    private _required: boolean;\n    private previousNativeValue: any;\n    private readonly inputValueAccessor: { value: any };\n    private onChange: (value: any) => void;\n    private onTouched: () => void;\n    private _timeFormat: TimeFormats;\n    private _minTime: string | null = null;\n    private minDateTime: Date | undefined;\n    private _maxTime: string | null = null;\n    private maxDateTime: Date | undefined;\n    private currentDateTimeInput: Date | undefined;\n\n    constructor(private readonly elementRef: ElementRef,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() parentForm: NgForm,\n                @Optional() parentFormGroup: FormGroupDirective,\n                defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n                private readonly renderer: Renderer2,\n                @Optional() private dateAdapter: DateAdapter<any>) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (!this.dateAdapter) {\n            throw Error(`McTimepicker: No provider found for DateAdapter. You must import one of the existing ` +\n                `modules at your application root or provide a custom implementation or use exists ones.`);\n        }\n\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this.inputValueAccessor = inputValueAccessor || this.elementRef.nativeElement;\n\n        this.previousNativeValue = this.value;\n        this.onChange = noop;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n\n        this.placeholder = TIMEFORMAT_PLACEHOLDERS[DEFAULT_TIME_FORMAT];\n\n        // Instead of NG_VALUE_ACCESSOR (https://github.com/angular/material2/issues/8158#issuecomment-344618103)\n        if (this.ngControl) { this.ngControl.valueAccessor = this; }\n\n        // Substitute initial empty validator with validator linked to directive object instance (workaround)\n\n        formValidators.set(\n            <FormControl> this.ngControl.control,\n            Validators.compose([\n                () => this.parseValidator(),\n                () => this.minTimeValidator(),\n                () => this.maxTimeValidator()\n            ])\n        );\n    }\n\n    ngOnChanges(): void {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy(): void {\n        this.stateChanges.complete();\n    }\n\n    ngDoCheck(): void {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this.dirtyCheckNativeValue();\n    }\n\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    focusChanged(isFocused: boolean): void {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.onTouched();\n            this.stateChanges.next();\n        }\n    }\n\n    onBlur() {\n        this.applyInputChanges();\n        this.focusChanged(false);\n    }\n\n    onPaste($event) {\n        $event.preventDefault();\n        const clipboardUserInput: string = $event.clipboardData.getData('text');\n\n        if (this.getDateFromTimeString(clipboardUserInput) === undefined) { return; }\n\n        this.elementRef.nativeElement.value = clipboardUserInput;\n        this.onInput();\n    }\n\n    onInput() {\n        const initialCursorStart: number = this.elementRef.nativeElement.selectionStart;\n        const initialCursorEnd: number = this.elementRef.nativeElement.selectionEnd;\n        let isAutocompleteTriggered: boolean = false;\n\n        const {\n            hoursOnly,\n            hoursAndMinutes,\n            hoursAndMinutesAndSeconds\n        } = this.getParsedTimeParts(this.elementRef.nativeElement.value);\n\n        // tslint:disable no-magic-numbers\n        if (hoursOnly &&\n            hoursOnly[1] &&\n            hoursOnly[1].length === 2) {\n            isAutocompleteTriggered = true;\n        } else if (hoursAndMinutes &&\n            hoursAndMinutes[1].length === 1 &&\n            hoursAndMinutes[2] &&\n            hoursAndMinutes[2].length === 2) {\n            isAutocompleteTriggered = true;\n        } else if (hoursAndMinutesAndSeconds &&\n            hoursAndMinutesAndSeconds[1].length === 2 &&\n            hoursAndMinutesAndSeconds[2].length === 2 &&\n            hoursAndMinutesAndSeconds[3] &&\n            hoursAndMinutesAndSeconds[3].length === 2) {\n            isAutocompleteTriggered = true;\n        }\n        // tslint:enable no-magic-numbers\n\n        this.applyInputChanges({ doTimestringReformat: isAutocompleteTriggered });\n\n        this.elementRef.nativeElement.selectionStart = initialCursorStart;\n        this.elementRef.nativeElement.selectionEnd = initialCursorEnd;\n\n        if (isAutocompleteTriggered && this.ngControl.errors === null) {\n            this.createSelectionOfTimeComponentInInput(initialCursorStart + 1);\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this.elementRef.nativeElement.value && !this.isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    writeValue(value: Date | null): void {\n        if (value !== null) {\n            this.renderer.setProperty(this.elementRef.nativeElement,\n                'value',\n                this.getTimeStringFromDate(value, this.timeFormat)\n            );\n        }\n        this.onChange(value || null);\n        this.applyInputChanges();\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n\n        const keyCode: string = this.getKeyCode(event);\n\n        if (keyCode === ARROW_UP_KEYCODE || keyCode === ARROW_DOWN_KEYCODE) {\n            this.upDownTimeByArrowKeys(event);\n        }\n        if (keyCode === ARROW_LEFT_KEYCODE || keyCode === ARROW_RIGHT_KEYCODE) {\n            this.switchSelectionBetweenTimeparts(event);\n        }\n    }\n\n    registerOnChange(fn: (value: Date) => void): void {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    /** Does some manual dirty checking on the native input `value` property. */\n    private dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this.previousNativeValue !== newValue) {\n            this.previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Checks whether the input is invalid based on the native validation. */\n    private isBadInput(): boolean {\n        const validity = (<HTMLInputElement> this.elementRef.nativeElement).validity;\n\n        return validity && validity.badInput;\n    }\n\n    private applyInputChanges(applyParams: {\n        changedTime?: Date;\n        doTimestringReformat?: boolean;\n    } = {}): void {\n        const { changedTime, doTimestringReformat = true } = applyParams;\n        const timeToApply: Date | undefined = changedTime ||\n            this.getDateFromTimeString(this.elementRef.nativeElement.value);\n        this.currentDateTimeInput = timeToApply;\n\n        if (doTimestringReformat && timeToApply !== undefined) {\n            const selectionStart: number = this.elementRef.nativeElement.selectionStart;\n            const selectionEnd: number = this.elementRef.nativeElement.selectionEnd;\n            this.renderer.setProperty(\n                this.elementRef.nativeElement,\n                'value',\n                this.getTimeStringFromDate(timeToApply, this.timeFormat));\n            this.elementRef.nativeElement.selectionStart = selectionStart;\n            this.elementRef.nativeElement.selectionEnd = selectionEnd;\n        }\n\n        (<FormControl> this.ngControl.control).updateValueAndValidity();\n        const result = this.ngControl.errors === null && timeToApply !== undefined ? timeToApply : null;\n        this.onChange(result);\n        this.stateChanges.next();\n    }\n\n    private upDownTimeByArrowKeys(event: KeyboardEvent): void {\n        event.preventDefault();\n\n        let changedTime: Date | undefined = this.currentDateTimeInput;\n        if (changedTime !== undefined) {\n            const cursorPos = this.elementRef.nativeElement.selectionStart;\n\n            const modifiedTimePart = this.getTimeEditMetrics(cursorPos)\n                .modifiedTimePart;\n            const keyCode: string = this.getKeyCode(event);\n            if (keyCode === ARROW_UP_KEYCODE) { changedTime = this.incrementTime(changedTime, modifiedTimePart); }\n            if (keyCode === ARROW_DOWN_KEYCODE) { changedTime = this.decrementTime(changedTime, modifiedTimePart); }\n            this.applyInputChanges({ changedTime });\n            this.createSelectionOfTimeComponentInInput(cursorPos);\n        }\n    }\n\n    private switchSelectionBetweenTimeparts(event: KeyboardEvent): void {\n        const changedTime: Date | undefined = this.currentDateTimeInput;\n        const keyCode: string = this.getKeyCode(event);\n\n        if (changedTime !== undefined) {\n            let cursorPos: number = this.elementRef.nativeElement.selectionStart;\n            if (keyCode === ARROW_LEFT_KEYCODE) {\n                cursorPos = this.getCursorPositionOfPrevTimePartStart(cursorPos, this.elementRef.nativeElement.value);\n            } else if (keyCode === ARROW_RIGHT_KEYCODE) {\n                cursorPos = this.getCursorPositionOfNextTimePartStart(cursorPos, this.elementRef.nativeElement.value);\n            }\n            this.createSelectionOfTimeComponentInInput(cursorPos);\n        }\n    }\n\n    /**\n     * @description Microsoft EDGE doesn't support KeyboaedEvent.code thus we need this helper\n     */\n    private getKeyCode(event: KeyboardEvent): string {\n        return event.code || event.key;\n    }\n\n    private createSelectionOfTimeComponentInInput(cursorPos: number): void {\n        setTimeout(() => {\n            const newEditParams = this.getTimeEditMetrics(cursorPos);\n            this.elementRef.nativeElement.selectionStart = newEditParams.cursorStartPosition;\n            this.elementRef.nativeElement.selectionEnd = newEditParams.cursorEndPosition;\n        });\n    }\n\n    private incrementTime(dateVal: Date,\n                          whatToIncrement: TimeParts = TimeParts.seconds): Date {\n        let { hours, minutes, seconds } = this.getTimeDigitsFromDate(dateVal);\n\n        switch (whatToIncrement) {\n            case TimeParts.hours:\n                hours++;\n                break;\n            case TimeParts.minutes:\n                minutes++;\n                break;\n            case TimeParts.seconds:\n                seconds++;\n                break;\n            default:\n        }\n\n        if (seconds > SECONDS_PER_MINUTE) { seconds = 0; }\n\n        if (minutes > MINUTES_PER_HOUR) { minutes = 0; }\n\n        if (hours > HOURS_PER_DAY) { hours = 0; }\n\n        return <Date> this.getDateFromTimeDigits(hours, minutes, seconds);\n    }\n\n    /**\n     * @description Decrement part of time\n     */\n    private decrementTime(dateVal: Date,\n                          whatToDecrement: TimeParts = TimeParts.seconds): Date {\n        let { hours, minutes, seconds } = this.getTimeDigitsFromDate(dateVal);\n\n        switch (whatToDecrement) {\n            case TimeParts.hours:\n                hours--;\n                break;\n            case TimeParts.minutes:\n                minutes--;\n                break;\n            case TimeParts.seconds:\n                seconds--;\n                break;\n            default:\n        }\n\n        if (seconds < 0) { seconds = SECONDS_PER_MINUTE; }\n\n        if (minutes < 0) { minutes = MINUTES_PER_HOUR; }\n\n        if (hours < 0) { hours = HOURS_PER_DAY; }\n\n        return <Date> this.getDateFromTimeDigits(hours, minutes, seconds);\n    }\n\n    private getCursorPositionOfPrevTimePartStart(cursorPos: number, timeString: string): number {\n        return cursorPos === 0 ? timeString.length : cursorPos - 1;\n    }\n\n    private getCursorPositionOfNextTimePartStart(cursorPos: number,\n                                                 timeString: string,\n                                                 timeDevider: string = ':'): number {\n        const nextDividerPos: number = timeString.indexOf(timeDevider, cursorPos);\n\n        return nextDividerPos !== undefined ? nextDividerPos + 1 : 0;\n    }\n\n    /**\n     * @description Get params for arrow-keys (up/down) time valie edit.\n     * @param cursorPosition Current cursor position in timeString\n     */\n    private getTimeEditMetrics(cursorPosition: number): {\n        modifiedTimePart: TimeParts;\n        cursorStartPosition: number;\n        cursorEndPosition: number;\n    } {\n        const timeString: string = this.elementRef.nativeElement.value;\n        let modifiedTimePart: TimeParts;\n        let cursorStartPosition: number;\n        let cursorEndPosition: number;\n        const hoursIndex = 0;\n        const minutesIndex = timeString.indexOf(':', hoursIndex + 1);\n        const secondsIndex = minutesIndex !== -1 ? timeString.indexOf(':', minutesIndex + 1) : -1;\n\n        if (secondsIndex !== -1 && cursorPosition > secondsIndex) {\n            modifiedTimePart = TimeParts.seconds;\n            cursorStartPosition = secondsIndex + 1;\n            cursorEndPosition = timeString.length;\n        } else if (minutesIndex !== -1 && cursorPosition > minutesIndex) {\n            modifiedTimePart = TimeParts.minutes;\n            cursorStartPosition = minutesIndex + 1;\n            cursorEndPosition = secondsIndex > -1 ? secondsIndex : timeString.length;\n        } else {\n            modifiedTimePart = TimeParts.hours;\n            cursorStartPosition = hoursIndex;\n            cursorEndPosition = minutesIndex !== -1 ? minutesIndex : timeString.length;\n        }\n\n        return {\n            modifiedTimePart,\n            cursorStartPosition,\n            cursorEndPosition\n        };\n    }\n\n    /**\n     * @description Create time string for displaying inside input element of UI\n     */\n    private getTimeStringFromDate(tempVal: Date,\n                                  timeFormat: TimeFormats = DEFAULT_TIME_FORMAT): string {\n        const hours: string = this.getNumberWithLeadingZero(tempVal.getHours());\n        const minutes: string = this.getNumberWithLeadingZero(tempVal.getMinutes());\n        const seconds: string = this.getNumberWithLeadingZero(tempVal.getSeconds());\n\n        const formattedTimeGenerators = {\n            [TimeFormats.HHmm]: () => `${hours}:${minutes}`,\n            [TimeFormats.HHmmss]: () => `${hours}:${minutes}:${seconds}`\n        };\n\n        return formattedTimeGenerators[timeFormat]();\n    }\n\n    private getParsedTimeParts(timeString: string): {\n        hoursOnly: any;\n        hoursAndMinutes: any;\n        hoursAndMinutesAndSeconds: any;\n    } {\n        const momentWrappedTime = this.dateAdapter.parse(timeString, [\n            'h:m a',\n            'h:m:s a',\n            'H:m',\n            'H:m:s'\n        ]);\n\n        const convertedTimeString = momentWrappedTime !== null\n            ? momentWrappedTime.format('HH:mm:ss')\n            : '';\n\n        const hoursAndMinutesAndSeconds = convertedTimeString.match(HOURS_MINUTES_SECONDS_REGEXP);\n        const hoursAndMinutes = convertedTimeString.match(HOURS_MINUTES_REGEXP);\n        const hoursOnly = convertedTimeString.match(HOURS_ONLY_REGEXP);\n\n        return {\n            hoursOnly,\n            hoursAndMinutes,\n            hoursAndMinutesAndSeconds\n        };\n    }\n\n    /**\n     * @description Create Date object from separate parts of time\n     */\n    private getDateFromTimeDigits(hours: number, minutes: number, seconds: number = 0): Date | undefined {\n        return this.getDateFromTimeString(`${hours}:${minutes}:${seconds}`);\n    }\n\n    private getDateFromTimeString(timeString: string | undefined): Date | undefined {\n        // TODO Use moment-js\n        if (timeString === undefined) { return; }\n\n        const {\n            hoursOnly,\n            hoursAndMinutes,\n            hoursAndMinutesAndSeconds\n        } = this.getParsedTimeParts(timeString);\n\n        if (timeString.trim().length === 0 ||\n            hoursOnly === null && hoursAndMinutes === null && hoursAndMinutesAndSeconds === null) {\n            return;\n        }\n\n        // tslint:disable no-magic-numbers\n        let hours: number = 0;\n        let minutes: number = 0;\n        let seconds: number = 0;\n\n        if (hoursOnly) {\n            hours = Number(hoursOnly[1]);\n        } else if (hoursAndMinutes) {\n            hours = Number(hoursAndMinutes[1]);\n            minutes = Number(hoursAndMinutes[2]);\n        } else if (hoursAndMinutesAndSeconds) {\n            hours = Number(hoursAndMinutesAndSeconds[1]);\n            minutes = Number(hoursAndMinutesAndSeconds[2]);\n            seconds = Number(hoursAndMinutesAndSeconds[3]);\n        }\n        // const timestamp: number = Date.parse(fullDateString);\n        const resultDate: Date = new Date(1970, 0, 1, hours, minutes, seconds);\n        // tslint:enable no-magic-numbers\n\n        return isNaN(resultDate.getTime()) ? undefined : resultDate;\n    }\n\n    private getNumberWithLeadingZero(digit: number): string {\n        const MAX_DIGIT_WITH_LEADING_ZERO: number = 9;\n\n        return digit > MAX_DIGIT_WITH_LEADING_ZERO ? `${digit}` : `0${digit}`;\n    }\n\n    private getTimeDigitsFromDate(dateVal: Date): { hours: number; minutes: number; seconds: number } {\n        return {\n            hours: dateVal.getHours(),\n            minutes: dateVal.getMinutes(),\n            seconds: dateVal.getSeconds()\n        };\n    }\n\n    private parseValidator(): ValidationErrors | null {\n        return this.currentDateTimeInput === undefined ?\n            { mcTimepickerParse: { text: this.elementRef.nativeElement.value } } :\n            null;\n    }\n\n    private minTimeValidator(): ValidationErrors | null {\n\n        if (this.currentDateTimeInput !== undefined &&\n            this.minDateTime !== undefined &&\n            this.isTimeLowerThenMin(this.currentDateTimeInput)) {\n            return { mcTimepickerLowerThenMintime: { text: this.elementRef.nativeElement.value } };\n        }\n\n        return null;\n    }\n\n    private maxTimeValidator(): ValidationErrors | null {\n        if (this.currentDateTimeInput !== undefined &&\n            this.maxDateTime !== undefined &&\n            this.isTimeGreaterThenMax(this.currentDateTimeInput)) {\n            return { mcTimepickerHigherThenMaxtime: { text: this.elementRef.nativeElement.value } };\n        }\n\n        return null;\n    }\n\n    private isTimeLowerThenMin(timeToCompare: Date): boolean {\n        return timeToCompare.getTime() - (<Date> this.minDateTime).getTime() < 0;\n    }\n\n    private isTimeGreaterThenMax(timeToCompare: Date): boolean {\n        return timeToCompare.getTime() - (<Date> this.maxDateTime).getTime() >= 0;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McTimepicker } from './timepicker';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        FormsModule\n    ],\n    declarations: [\n        McTimepicker\n    ],\n    exports: [\n        McTimepicker\n    ]\n})\nexport class McTimepickerModule {}\n","import { InjectionToken } from '@angular/core';\n\n\n/** Injection token that can be used to access the data that was passed in to a sidepanel. */\nexport const MC_SIDEPANEL_DATA = new InjectionToken<any>('McSidepanelData');\n\nexport enum McSidepanelPosition {\n    Right = 'right',\n    Left = 'left',\n    Top = 'top',\n    Bottom = 'bottom'\n}\n\nexport class McSidepanelConfig<D = any> {\n    /** ID for the sidepanel. If omitted, a unique one will be generated. */\n    id?: string;\n\n    /** Data being injected into the child component. */\n    data?: D | null = null;\n\n    position?: McSidepanelPosition = McSidepanelPosition.Right;\n\n    /** Whether the sidepanel has a backdrop. */\n    hasBackdrop?: boolean = true;\n\n    /** When we open multiple sidepanels, backdrop appears only once, except cases then this flag is true. */\n    requiredBackdrop?: boolean = false;\n\n    /** Whether the user can use escape or clicking outside to close the sidepanel. */\n    disableClose?: boolean = false;\n\n    /** Custom class for the overlay pane. */\n    overlayPanelClass?: string | string[] = '';\n}\n","import { animate, AnimationTriggerMetadata, state, style, transition, trigger } from '@angular/animations';\nimport { AnimationCurves } from '@ptsecurity/mosaic/core';\n\nimport { McSidepanelPosition } from './sidepanel-config';\n\n\nexport enum McSidepanelAnimationState {\n    Void = 'void',\n    Visible = 'visible',\n    Hidden = 'hidden'\n}\n\n// TODO Find a way to use dynamic keys and avoid error \"Expression form not supported.\"\n// tslint:disable-next-line\nexport const mcSidepanelTransformAnimation: Record<McSidepanelPosition, { in: string; out: string }> = {\n    right: { in: 'translateX(100%)', out: 'translateX(0%)' },\n    left: { in: 'translateX(-100%)', out: 'translateX(0%)' },\n    top: { in: 'translateY(-100%)', out: 'translateY(0%)' },\n    bottom: { in: 'translateY(100%)', out: 'translateY(0%)' }\n};\n\nexport const mcSidepanelAnimations: {\n    readonly sidepanelState: AnimationTriggerMetadata;\n} = {\n    sidepanelState: trigger('state', [\n        state('hidden',\n            style({ transform: '{{transformIn}}' }),\n            { params: { transformIn: mcSidepanelTransformAnimation[McSidepanelPosition.Right].in }}\n        ),\n        state('visible',\n            style({ transform: '{{transformOut}}' }),\n            { params: { transformOut: mcSidepanelTransformAnimation[McSidepanelPosition.Right].out }}\n        ),\n        transition('visible => void, visible => hidden',\n            animate(`200ms ${AnimationCurves.AccelerationCurve}`)),\n        transition('void => visible',\n            animate(`200ms ${AnimationCurves.DecelerationCurve}`))\n    ])\n};\n","import { Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output } from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { hasModifierKey } from '@ptsecurity/cdk/keycodes';\n\nimport { MC_TAGS_DEFAULT_OPTIONS, McTagsDefaultOptions } from './tag-default-options';\nimport { McTagList } from './tag-list.component';\nimport { McTagTextControl } from './tag-text-control';\n\n\n/** Represents an input event on a `mcTagInput`. */\n// tslint:disable-next-line: naming-convention\nexport interface McTagInputEvent {\n    /** The native `<input>` element that the event is being fired for. */\n    input: HTMLInputElement;\n\n    /** The value of the input. */\n    value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds tag-specific behaviors to an input element inside `<mc-form-field>`.\n * May be placed inside or outside of an `<mc-tag-list>`.\n */\n@Directive({\n    selector: 'input[mcTagInputFor]',\n    exportAs: 'mcTagInput, mcTagInputFor',\n    host: {\n        class: 'mc-tag-input mc-input-element',\n        '[id]': 'id',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.placeholder]': 'placeholder || null',\n        '[attr.aria-invalid]': '_tagList && _tagList.ngControl ? _tagList.ngControl.invalid : null',\n        '(keydown)': 'keydown($event)',\n        '(blur)': 'blur()',\n        '(focus)': 'onFocus()',\n        '(input)': 'onInput()'\n    }\n})\nexport class McTagInput implements McTagTextControl, OnChanges {\n    /** Whether the control is focused. */\n    focused: boolean = false;\n\n    /**\n     * The list of key codes that will trigger a tagEnd event.\n     *\n     * Defaults to `[ENTER]`.\n     */\n    @Input('mcTagInputSeparatorKeyCodes')\n    separatorKeyCodes: number[] | Set<number> = this.defaultOptions.separatorKeyCodes;\n\n    /** Emitted when a tag is to be added. */\n    @Output('mcTagInputTokenEnd')\n    tagEnd: EventEmitter<McTagInputEvent> = new EventEmitter<McTagInputEvent>();\n\n    /** The input's placeholder text. */\n    @Input() placeholder: string = '';\n\n    /** Unique id for the input. */\n    @Input() id: string = `mc-tag-list-input-${nextUniqueId++}`;\n\n    /** Register input for tag list */\n    @Input('mcTagInputFor')\n    set tagList(value: McTagList) {\n        if (value) {\n            this._tagList = value;\n            this._tagList.registerInput(this);\n        }\n    }\n\n    // tslint:disable-next-line: naming-convention\n    _tagList: McTagList;\n\n    /**\n     * Whether or not the tagEnd event will be emitted when the input is blurred.\n     */\n    @Input('mcTagInputAddOnBlur')\n    get addOnBlur(): boolean {\n        return this._addOnBlur;\n    }\n\n    set addOnBlur(value: boolean) {\n        this._addOnBlur = coerceBooleanProperty(value);\n    }\n\n    private _addOnBlur: boolean = false;\n\n    /** Whether the input is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this._tagList && this._tagList.disabled);\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    private _disabled: boolean = false;\n\n    /** Whether the input is empty. */\n    get empty(): boolean {\n        return !this.inputElement.value;\n    }\n\n    /** The native input element to which this directive is attached. */\n    private inputElement: HTMLInputElement;\n\n    constructor(\n        private elementRef: ElementRef<HTMLInputElement>,\n        @Inject(MC_TAGS_DEFAULT_OPTIONS) private defaultOptions: McTagsDefaultOptions\n    ) {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        this.inputElement = this.elementRef.nativeElement as HTMLInputElement;\n    }\n\n    ngOnChanges() {\n        this._tagList.stateChanges.next();\n    }\n\n    /** Utility method to make host definition/tests more clear. */\n    keydown(event?: KeyboardEvent) {\n        this.emittagEnd(event);\n    }\n\n    /** Checks to see if the blur should emit the (tagEnd) event. */\n    blur() {\n        if (this.addOnBlur) {\n            this.emittagEnd();\n        }\n\n        this.focused = false;\n        // Blur the tag list if it is not focused\n        if (!this._tagList.focused) {\n            this._tagList.blur();\n        }\n\n        this._tagList.stateChanges.next();\n    }\n\n    /** Checks to see if the (tagEnd) event needs to be emitted. */\n    emittagEnd(event?: KeyboardEvent) {\n        if (!this.inputElement.value && !!event) {\n            this._tagList.keydown(event);\n        }\n\n        if (!event || this.isSeparatorKey(event)) {\n            this.tagEnd.emit({ input: this.inputElement, value: this.inputElement.value });\n\n            if (event) {\n                event.preventDefault();\n            }\n        }\n    }\n\n    onInput() {\n        // Let tag list know whenever the value changes.\n        this._tagList.stateChanges.next();\n    }\n\n    onFocus() {\n        this.focused = true;\n        this._tagList.stateChanges.next();\n    }\n\n    /** Focuses the input. */\n    focus(): void {\n        this.inputElement.focus();\n    }\n\n    /** Checks whether a keycode is one of the configured separators. */\n    private isSeparatorKey(event: KeyboardEvent) {\n        if (hasModifierKey(event)) { return false; }\n\n        const separators = this.separatorKeyCodes;\n        // tslint:disable-next-line: deprecation\n        const keyCode = event.keyCode;\n\n        return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ENTER } from '@ptsecurity/cdk/keycodes';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { MC_TAGS_DEFAULT_OPTIONS, McTagsDefaultOptions } from './tag-default-options';\nimport { McTagInput } from './tag-input';\nimport { McTagList } from './tag-list.component';\nimport { McTag, McTagAvatar, McTagRemove, McTagTrailingIcon } from './tag.component';\n\n\n@NgModule({\n    imports: [CommonModule, PlatformModule],\n    exports: [\n        McTagList,\n        McTag,\n        McTagInput,\n        McTagTrailingIcon,\n        McTagAvatar,\n        McTagRemove\n    ],\n    declarations: [\n        McTagList,\n        McTag,\n        McTagInput,\n        McTagTrailingIcon,\n        McTagAvatar,\n        McTagRemove\n    ],\n    providers: [{\n        provide: MC_TAGS_DEFAULT_OPTIONS,\n        // tslint:disable-next-line: no-object-literal-type-assertion\n        useValue: { separatorKeyCodes: [ENTER] } as McTagsDefaultOptions\n    }]\n})\nexport class McTagsModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { MC_SELECT_SCROLL_STRATEGY_PROVIDER, McOptionModule } from '@ptsecurity/mosaic/core';\nimport { McFormFieldModule } from '@ptsecurity/mosaic/form-field';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\nimport { McTagsModule } from '@ptsecurity/mosaic/tags';\n\nimport { McSelect, McSelectTrigger } from './select.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        McOptionModule,\n        McIconModule,\n        McTagsModule\n    ],\n    exports: [McFormFieldModule, McSelect, McSelectTrigger, McOptionModule, CommonModule],\n    declarations: [McSelect, McSelectTrigger],\n    providers: [MC_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class McSelectModule {}\n","import {\n    AfterContentChecked,\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnDestroy,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    InjectionToken,\n    Inject,\n    Optional,\n    Directive, Attribute\n} from '@angular/core';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@ptsecurity/cdk/coercion';\nimport {\n    CanColor,\n    CanColorCtor,\n    mixinColor,\n    mixinDisabled\n} from '@ptsecurity/mosaic/core';\nimport { merge, Subscription } from 'rxjs';\n\nimport { McTab } from './tab';\nimport { McTabHeader } from './tab-header';\n\n\n@Directive({\n    selector: 'mc-tab-group[mc-light-tabs], [mc-tab-nav-bar][mc-light-tabs]',\n    host: { class: 'mc-tab-group_light' }\n})\nexport class McLightTabsCssStyler { }\n\n@Directive({\n    selector: 'mc-tab-group[mc-align-tabs-center], [mc-tab-nav-bar][mc-align-tabs-center]',\n    host: { class: 'mc-tab-group_align-labels-center' }\n})\nexport class McAlignTabsCenterCssStyler { }\n\n@Directive({\n    selector: 'mc-tab-group[mc-align-tabs-end], [mc-tab-nav-bar][mc-align-tabs-end]',\n    host: { class: 'mc-tab-group_align-labels-end' }\n})\nexport class McAlignTabsEndCssStyler { }\n\n@Directive({\n    selector: 'mc-tab-group[mc-stretch-tabs], [mc-tab-nav-bar][mc-stretch-tabs]',\n    host: { class: 'mc-tab-group_stretch-labels' }\n})\nexport class McStretchTabsCssStyler { }\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class McTabChangeEvent {\n    /** Index of the currently-selected tab. */\n    index: number;\n    /** Reference to the currently-selected tab. */\n    tab: McTab;\n}\n\n/** Possible positions for the tab header. */\nexport type McTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface IMcTabsConfig {\n    /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n    animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MC_TABS_CONFIG = new InjectionToken('MC_TABS_CONFIG');\n\n// Boilerplate for applying mixins to McTabGroup.\n/** @docs-private */\nexport class McTabGroupBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) { }\n}\nexport const mcTabGroupMixinBase:\n    CanColorCtor &\n    typeof McTabGroupBase =\n    mixinColor(mixinDisabled(McTabGroupBase));\n\n/**\n * Tab-group component.  Supports basic tab pairs (label + content) and includes\n * keyboard navigation.\n */\n@Component({\n    selector: 'mc-tab-group',\n    exportAs: 'mcTabGroup',\n    templateUrl: 'tab-group.html',\n    styleUrls: ['tab-group.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['color'],\n    host: {\n        class: 'mc-tab-group',\n        '[class.mc-tab-group_dynamic-height]': 'dynamicHeight',\n        '[class.mc-tab-group_inverted-header]': 'headerPosition === \"below\"'\n    }\n})\nexport class McTabGroup extends mcTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor {\n    lightTab: boolean;\n\n    /** Whether the tab group should grow to the size of the active tab. */\n    @Input()\n    get dynamicHeight(): boolean { return this._dynamicHeight; }\n    set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n\n    /** The index of the active tab. */\n    @Input()\n    get selectedIndex(): number | null { return this._selectedIndex; }\n    set selectedIndex(value: number | null) {\n        this.indexToSelect = coerceNumberProperty(value, null);\n    }\n\n    @ContentChildren(McTab) tabs: QueryList<McTab>;\n\n    @ViewChild('tabBodyWrapper') tabBodyWrapper: ElementRef;\n\n    @ViewChild('tabHeader') tabHeader: McTabHeader;\n\n    /** Position of the tab header. */\n    @Input() headerPosition: McTabHeaderPosition = 'above';\n\n    /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n    @Input() animationDuration: string;\n\n    /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n    @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n    /** Event emitted when focus has changed within a tab group. */\n    @Output() readonly focusChange: EventEmitter<McTabChangeEvent> =\n        new EventEmitter<McTabChangeEvent>();\n\n    /** Event emitted when the body animation has completed */\n    @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Event emitted when the tab selection has changed. */\n    @Output() readonly selectedTabChange: EventEmitter<McTabChangeEvent> =\n        new EventEmitter<McTabChangeEvent>(true);\n\n    /** The tab index that should be selected after the content has been checked. */\n    private indexToSelect: number | null = 0;\n\n    /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n    private tabBodyWrapperHeight: number = 0;\n\n    /** Subscription to tabs being added/removed. */\n    private tabsSubscription = Subscription.EMPTY;\n\n    /** Subscription to changes in the tab labels. */\n    private tabLabelSubscription = Subscription.EMPTY;\n    private _dynamicHeight: boolean = false;\n    private _selectedIndex: number | null = null;\n\n    private groupId: number;\n\n    constructor(\n        elementRef: ElementRef,\n        private changeDetectorRef: ChangeDetectorRef,\n        @Attribute('mc-light-tabs') lightTabs: string,\n        @Inject(MC_TABS_CONFIG) @Optional() defaultConfig?: IMcTabsConfig\n    ) {\n        super(elementRef);\n\n        this.lightTab = coerceBooleanProperty(lightTabs);\n\n        this.groupId = nextId++;\n        this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n            defaultConfig.animationDuration : '0ms';\n    }\n\n    /**\n     * After the content is checked, this component knows what tabs have been defined\n     * and what the selected index should be. This is where we can know exactly what position\n     * each tab should be in according to the new selected index, and additionally we know how\n     * a new selected tab should transition in (from the left or right).\n     */\n    ngAfterContentChecked() {\n        // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n        // the amount of tabs changes before the actual change detection runs.\n        const indexToSelect = this.indexToSelect = this.clampTabIndex(this.indexToSelect);\n\n        // If there is a change in selected index, emit a change event. Should not trigger if\n        // the selected index has not yet been initialized.\n        if (this._selectedIndex !== indexToSelect) {\n            const isFirstRun = this._selectedIndex == null;\n\n            if (!isFirstRun) {\n                this.selectedTabChange.emit(this.createChangeEvent(indexToSelect));\n            }\n\n            // Changing these values after change detection has run\n            // since the checked content may contain references to them.\n            Promise.resolve().then(() => {\n                this.tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n                if (!isFirstRun) {\n                    this.selectedIndexChange.emit(indexToSelect);\n                }\n            });\n        }\n\n        // Setup the position for each tab and optionally setup an origin on the next selected tab.\n        this.tabs.forEach((tab: McTab, index: number) => {\n            tab.position = index - indexToSelect;\n\n            // If there is already a selected tab, then set up an origin for the next selected tab\n            // if it doesn't have one already.\n            if (this._selectedIndex != null && tab.position === 0 && !tab.origin) {\n                tab.origin = indexToSelect - this._selectedIndex;\n            }\n        });\n\n        if (this._selectedIndex !== indexToSelect) {\n            this._selectedIndex = indexToSelect;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    ngAfterContentInit() {\n        this.subscribeToTabLabels();\n\n        // Subscribe to changes in the amount of tabs, in order to be\n        // able to re-render the content as new tabs are added or removed.\n        this.tabsSubscription = this.tabs.changes.subscribe(() => {\n            const indexToSelect = this.clampTabIndex(this.indexToSelect);\n\n            // Maintain the previously-selected tab if a new tab is added or removed and there is no\n            // explicit change that selects a different tab.\n            if (indexToSelect === this._selectedIndex) {\n                const tabs = this.tabs.toArray();\n\n                for (let i = 0; i < tabs.length; i++) {\n                    if (tabs[i].isActive) {\n                        // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n                        // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n                        // adding a tab within the `selectedIndexChange` event.\n                        this.indexToSelect = this._selectedIndex = i;\n                        break;\n                    }\n                }\n            }\n\n            this.subscribeToTabLabels();\n            this.changeDetectorRef.markForCheck();\n        });\n    }\n\n    ngOnDestroy() {\n        this.tabsSubscription.unsubscribe();\n        this.tabLabelSubscription.unsubscribe();\n    }\n\n    focusChanged(index: number) {\n        this.focusChange.emit(this.createChangeEvent(index));\n    }\n\n    /** Returns a unique id for each tab label element */\n    getTabLabelId(i: number): string {\n        return `mc-tab-label-${this.groupId}-${i}`;\n    }\n\n    /** Returns a unique id for each tab content element */\n    getTabContentId(i: number): string {\n        return `mc-tab-content-${this.groupId}-${i}`;\n    }\n\n    /**\n     * Sets the height of the body wrapper to the height of the activating tab if dynamic\n     * height property is true.\n     */\n    setTabBodyWrapperHeight(tabHeight: number): void {\n        if (!this._dynamicHeight || !this.tabBodyWrapperHeight) { return; }\n\n        const wrapper: HTMLElement = this.tabBodyWrapper.nativeElement;\n\n        wrapper.style.height = `${this.tabBodyWrapperHeight}px`;\n\n        // This conditional forces the browser to paint the height so that\n        // the animation to the new height can have an origin.\n        if (this.tabBodyWrapper.nativeElement.offsetHeight) {\n            wrapper.style.height = `${tabHeight}px`;\n        }\n    }\n\n    /** Removes the height of the tab body wrapper. */\n    removeTabBodyWrapperHeight(): void {\n        this.tabBodyWrapperHeight = this.tabBodyWrapper.nativeElement.clientHeight;\n        this.tabBodyWrapper.nativeElement.style.height = '';\n        this.animationDone.emit();\n    }\n\n    /** Handle click events, setting new selected index if appropriate. */\n    handleClick(tab: McTab, tabHeader: McTabHeader, index: number) {\n        if (!tab.disabled) {\n            this.selectedIndex = tabHeader.focusIndex = index;\n        }\n    }\n\n    /** Retrieves the tabindex for the tab. */\n    getTabIndex(tab: McTab, index: number): number | null {\n        if (tab.disabled) {\n            return null;\n        }\n\n        return this.selectedIndex === index ? 0 : -1;\n    }\n\n    private createChangeEvent(index: number): McTabChangeEvent {\n        const event = new McTabChangeEvent();\n        event.index = index;\n        if (this.tabs && this.tabs.length) {\n            event.tab = this.tabs.toArray()[index];\n        }\n\n        return event;\n    }\n\n    /**\n     * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n     * on the McTab component, whereas the data binding is inside the McTabGroup. In order for the\n     * binding to be updated, we need to subscribe to changes in it and trigger change detection\n     * manually.\n     */\n    private subscribeToTabLabels() {\n        if (this.tabLabelSubscription) {\n            this.tabLabelSubscription.unsubscribe();\n        }\n\n        this.tabLabelSubscription = merge(...this.tabs.map((tab) => tab.stateChanges))\n            .subscribe(() => this.changeDetectorRef.markForCheck());\n    }\n\n    /** Clamps the given index to the bounds of 0 and the tabs length. */\n    private clampTabIndex(index: number | null): number {\n        // Note the `|| 0`, which ensures that values like NaN can't get through\n        // and which would otherwise throw the component into an infinite loop\n        // (since Mch.max(NaN, 0) === NaN).\n        return Math.min(this.tabs.length - 1, Math.max(index || 0, 0));\n    }\n}\n","import {\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    Input,\n    OnDestroy,\n    ViewEncapsulation\n} from '@angular/core';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport {\n    CanColor,\n    CanColorCtor,\n    CanDisable,\n    CanDisableCtor,\n    HasTabIndex,\n    HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex\n} from '@ptsecurity/mosaic/core';\n\n\n// Boilerplate for applying mixins to McTabNav.\n/** @docs-private */\nexport class McTabNavBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {}\n}\nexport const mcTabNavMixinBase: CanColorCtor &\n    typeof McTabNavBase = mixinColor(McTabNavBase);\n\n/**\n * Navigation component matching the styles of the tab group header.\n */\n@Component({\n    selector: '[mc-tab-nav-bar]',\n    exportAs: 'mcTabNavBar, mcTabNav',\n    inputs: ['color'],\n    templateUrl: 'tab-nav-bar.html',\n    styleUrls: ['tab-nav-bar.css'],\n    host: { class: 'mc-tab-nav-bar' },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McTabNav extends mcTabNavMixinBase\n    implements CanColor {\n        constructor(elementRef: ElementRef) {\n            super(elementRef);\n        }\n     }\n\n// Boilerplate for applying mixins to McTabLink.\nexport class McTabLinkBase {}\nexport const mcTabLinkMixinBase: HasTabIndexCtor & CanDisableCtor &\n    typeof McTabLinkBase = mixinTabIndex(mixinDisabled(McTabLinkBase));\n\n/**\n * Link inside of a `mc-tab-nav-bar`.\n */\n@Directive({\n    selector: '[mc-tab-link], [mcTabLink]',\n    exportAs: 'mcTabLink',\n    inputs: ['disabled', 'tabIndex'],\n    host: {\n        class: 'mc-tab-link',\n        '[attr.aria-current]': 'active',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.tabIndex]': 'tabIndex',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-active]': 'active'\n    }\n})\nexport class McTabLink extends mcTabLinkMixinBase\n    implements OnDestroy, CanDisable, HasTabIndex {\n    /** Whether the link is active. */\n    @Input()\n    get active(): boolean {\n        return this.isActive;\n    }\n    set active(value: boolean) {\n        if (value !== this.isActive) {\n            this.isActive = value;\n        }\n    }\n\n    /** Whether the tab link is active or not. */\n    protected isActive: boolean = false;\n\n    constructor(\n        public elementRef: ElementRef,\n        @Attribute('tabindex') tabIndex: string,\n        private focusMonitor: FocusMonitor\n    ) {\n        super();\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n        this.focusMonitor.monitor(this.elementRef.nativeElement);\n    }\n\n    ngOnDestroy() {\n        this.focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PortalModule } from '@ptsecurity/cdk/portal';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McTab } from './tab';\nimport { McTabBody, McTabBodyPortal } from './tab-body';\nimport { McTabContent } from './tab-content';\nimport {\n    McTabGroup,\n    McLightTabsCssStyler,\n    McAlignTabsCenterCssStyler,\n    McAlignTabsEndCssStyler,\n    McStretchTabsCssStyler\n} from './tab-group';\nimport { McTabHeader } from './tab-header';\nimport { McTabLabel } from './tab-label';\nimport { McTabLabelWrapper } from './tab-label-wrapper';\nimport { McTabLink, McTabNav } from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        McCommonModule,\n        PortalModule,\n        A11yModule\n    ],\n    // Don't export all components because some are only to be used internally.\n    exports: [\n        McCommonModule,\n        McTabGroup,\n        McTabLabel,\n        McTab,\n        McTabNav,\n        McTabLink,\n        McTabContent,\n        McLightTabsCssStyler,\n        McAlignTabsCenterCssStyler,\n        McAlignTabsEndCssStyler,\n        McStretchTabsCssStyler\n    ],\n    declarations: [\n        McTabGroup,\n        McTabLabel,\n        McTab,\n        McTabLabelWrapper,\n        McTabNav,\n        McTabLink,\n        McTabBody,\n        McTabBodyPortal,\n        McTabHeader,\n        McTabContent,\n        McLightTabsCssStyler,\n        McAlignTabsCenterCssStyler,\n        McAlignTabsEndCssStyler,\n        McStretchTabsCssStyler\n    ]\n})\nexport class McTabsModule {}\n","import { InjectionToken } from '@angular/core';\n\n\n/** Default options, for the chips module, that can be overridden. */\n// tslint:disable-next-line: naming-convention\nexport interface McTagsDefaultOptions {\n    /** The list of key codes that will trigger a chipEnd event. */\n    separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MC_TAGS_DEFAULT_OPTIONS = new InjectionToken<McTagsDefaultOptions>('mc-tags-default-options');\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    NgZone,\n    OnDestroy,\n    Output,\n    QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { BACKSPACE, DELETE, SPACE } from '@ptsecurity/cdk/keycodes';\nimport {\n    CanColor,\n    CanColorCtor,\n    CanDisable,\n    CanDisableCtor,\n    mixinColor,\n    mixinDisabled\n} from '@ptsecurity/mosaic/core';\nimport { McIcon } from '@ptsecurity/mosaic/icon';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\n\n// tslint:disable-next-line:naming-convention\nexport interface McTagEvent {\n    tag: McTag;\n}\n\n/** Event object emitted by McTag when selected or deselected. */\nexport class McTagSelectionChange {\n    constructor(public source: McTag, public selected: boolean, public isUserInput = false) {}\n}\n\n\nconst TAG_ATTRIBUTE_NAMES = ['mc-basic-tag'];\n\n/**\n * Dummy directive to add CSS class to tag avatar.\n * @docs-private\n */\n@Directive({\n    selector: 'mc-tag-avatar, [mcTagAvatar]',\n    host: { class: 'mc-tag-avatar' }\n})\nexport class McTagAvatar {}\n\n/**\n * Dummy directive to add CSS class to tag trailing icon.\n * @docs-private\n */\n@Directive({\n    selector: 'mc-tag-trailing-icon, [mcTagTrailingIcon]',\n    host: { class: 'mc-tag-trailing-icon' }\n})\nexport class McTagTrailingIcon {}\n\nexport class McTagBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const _McTagMixinBase: CanColorCtor & CanDisableCtor & typeof McTagBase = mixinColor(mixinDisabled(McTagBase));\n\n\n@Component({\n    selector: 'mc-tag, [mc-tag], mc-basic-tag, [mc-basic-tag]',\n    exportAs: 'mcTag',\n    templateUrl: 'tag.partial.html',\n    styleUrls: ['./tag.css'],\n    inputs: ['color', 'disabled'],\n    host: {\n        class: 'mc-tag',\n        '[attr.tabindex]': 'disabled ? null : -1',\n        '[class.mc-tag-selected]': 'selected',\n        '[class.mc-tag-with-avatar]': 'avatar',\n        '[class.mc-tag-with-trailing-icon]': 'trailingIcon || removeIcon',\n        '[class.mc-tag-disabled]': 'disabled',\n        '[class.mc-disabled]': 'disabled',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': 'handleClick($event)',\n        '(keydown)': 'handleKeydown($event)',\n        '(focus)': 'focus()',\n        '(blur)': 'blur()'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McTag extends _McTagMixinBase implements IFocusableOption, OnDestroy, CanColor, CanDisable {\n    /** Emits when the tag is focused. */\n    readonly onFocus = new Subject<McTagEvent>();\n\n    /** Emits when the tag is blured. */\n    readonly onBlur = new Subject<McTagEvent>();\n\n    nativeElement: HTMLElement;\n\n    /** Whether the tag has focus. */\n    hasFocus: boolean = false;\n\n    /** Whether the tag list is selectable */\n    tagListSelectable: boolean = true;\n\n    @ContentChildren(McIcon) contentChildren: QueryList<McIcon>;\n\n    /** The tag avatar */\n    @ContentChild(McTagAvatar) avatar: McTagAvatar;\n\n    /** The tag's trailing icon. */\n    @ContentChild(McTagTrailingIcon) trailingIcon: McTagTrailingIcon;\n\n    /** The tag's remove toggler. */\n    @ContentChild(forwardRef(() => McTagRemove)) removeIcon: McTagRemove;\n\n    /** Emitted when the tag is selected or deselected. */\n    @Output() readonly selectionChange: EventEmitter<McTagSelectionChange> =\n        new EventEmitter<McTagSelectionChange>();\n\n    /** Emitted when the tag is destroyed. */\n    @Output() readonly destroyed: EventEmitter<McTagEvent> = new EventEmitter<McTagEvent>();\n\n    /** Emitted when a tag is to be removed. */\n    @Output() readonly removed: EventEmitter<McTagEvent> = new EventEmitter<McTagEvent>();\n\n    /** Whether the tag is selected. */\n    @Input()\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    set selected(value: boolean) {\n        const coercedValue = coerceBooleanProperty(value);\n\n        if (coercedValue !== this._selected) {\n            this._selected = coercedValue;\n            this.dispatchSelectionChange();\n        }\n    }\n\n    private _selected: boolean = false;\n\n    /** The value of the tag. Defaults to the content inside `<mc-tag>` tags. */\n    @Input()\n    get value(): any {\n        return this._value !== undefined\n            ? this._value\n            : this.elementRef.nativeElement.textContent;\n    }\n\n    set value(value: any) {\n        this._value = value;\n    }\n\n    private _value: any;\n\n    /**\n     * Whether or not the tag is selectable. When a tag is not selectable,\n     * changes to its selected state are always ignored. By default a tag is\n     * selectable, and it becomes non-selectable if its parent tag list is\n     * not selectable.\n     */\n    @Input()\n    get selectable(): boolean {\n        return this._selectable && this.tagListSelectable;\n    }\n\n    set selectable(value: boolean) {\n        this._selectable = coerceBooleanProperty(value);\n    }\n\n    private _selectable: boolean = true;\n\n    /**\n     * Determines whether or not the tag displays the remove styling and emits (removed) events.\n     */\n    @Input()\n    get removable(): boolean {\n        return this._removable;\n    }\n\n    set removable(value: boolean) {\n        this._removable = coerceBooleanProperty(value);\n    }\n\n    private _removable: boolean = true;\n\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value !== this.disabled) {\n            this._disabled = value;\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    constructor(public elementRef: ElementRef, private _ngZone: NgZone) {\n        super(elementRef);\n\n        this.addHostClassName();\n\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        this.addClassModificatorForIcons();\n    }\n\n    addClassModificatorForIcons() {\n        const icons = this.contentChildren.map((item) => item._elementRef.nativeElement);\n\n        if (icons.length === 1) {\n            const iconElement = icons[0];\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-left-icon');\n                }\n\n                if (iconElement.previousSibling) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-right-icon');\n                }\n            }\n        } else if (icons.length > 1) {\n            const firstIconElement = icons[0];\n            const secondIconElement = icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n\n    addHostClassName() {\n        // Add class for the different tags\n        for (const attr of TAG_ATTRIBUTE_NAMES) {\n            if (\n                this.elementRef.nativeElement.hasAttribute(attr) ||\n                this.elementRef.nativeElement.tagName.toLowerCase() === attr\n            ) {\n                    (this.elementRef.nativeElement as HTMLElement).classList.add(attr);\n\n                    return;\n            }\n        }\n        (this.elementRef.nativeElement as HTMLElement).classList.add('mc-standard-tag');\n    }\n\n    ngOnDestroy() {\n        this.destroyed.emit({ tag: this });\n    }\n\n    select(): void {\n        if (!this._selected) {\n            this._selected = true;\n            this.dispatchSelectionChange();\n        }\n    }\n\n    deselect(): void {\n        if (this._selected) {\n            this._selected = false;\n            this.dispatchSelectionChange();\n        }\n    }\n\n    selectViaInteraction(): void {\n        if (!this._selected) {\n            this._selected = true;\n            this.dispatchSelectionChange(true);\n        }\n    }\n\n    toggleSelected(isUserInput: boolean = false): boolean {\n        this._selected = !this.selected;\n        this.dispatchSelectionChange(isUserInput);\n\n        return this.selected;\n    }\n\n    /** Allows for programmatic focusing of the tag. */\n    focus(): void {\n        if (!this.hasFocus) {\n            this.elementRef.nativeElement.focus();\n            this.onFocus.next({ tag: this });\n        }\n        this.hasFocus = true;\n    }\n\n    /**\n     * Allows for programmatic removal of the tag. Called by the McTagList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the tag from the DOM.\n     */\n    remove(): void {\n        if (this.removable) {\n            this.removed.emit({ tag: this });\n        }\n    }\n\n    handleClick(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n        } else {\n            event.stopPropagation();\n        }\n    }\n\n    handleKeydown(event: KeyboardEvent): void {\n        if (this.disabled) { return; }\n\n        // tslint:disable-next-line: deprecation\n        switch (event.keyCode) {\n            case DELETE:\n            case BACKSPACE:\n                // If we are removable, remove the focused tag\n                this.remove();\n                // Always prevent so page navigation does not occur\n                event.preventDefault();\n                break;\n            case SPACE:\n                // If we are selectable, toggle the focused tag\n                if (this.selectable) {\n                    this.toggleSelected(true);\n                }\n\n                // Always prevent space from scrolling the page since the list has focus\n                event.preventDefault();\n                break;\n            default:\n        }\n    }\n\n    blur(): void {\n        // When animations are enabled, Angular may end up removing the tag from the DOM a little\n        // earlier than usual, causing it to be blurred and throwing off the logic in the tag list\n        // that moves focus not the next item. To work around the issue, we defer marking the tag\n        // as not focused until the next time the zone stabilizes.\n        this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                this._ngZone.run(() => {\n                    this.hasFocus = false;\n                    this.onBlur.next({ tag: this });\n                });\n            });\n    }\n\n    private dispatchSelectionChange(isUserInput = false) {\n        this.selectionChange.emit({\n            source: this,\n            isUserInput,\n            selected: this._selected\n        });\n    }\n}\n\n\n/**\n *\n * Example:\n *\n *     `<mc-tag>\n *       <mc-icon mcTagRemove>cancel</mc-icon>\n *     </mc-tag>`\n *\n * You *may* use a custom icon, but you may need to override the `mc-tag-remove` positioning\n * styles to properly center the icon within the tag.\n */\n@Directive({\n    selector: '[mcTagRemove]',\n    host: {\n        class: 'mc-tag-remove mc-tag-trailing-icon',\n        '(click)': 'handleClick($event)'\n    }\n})\nexport class McTagRemove {\n    constructor(protected parentTag: McTag) {}\n\n    /** Calls the parent tag's public `remove()` method if applicable. */\n    handleClick(event: Event): void {\n        if (this.parentTag.removable) {\n            this.parentTag.remove();\n        }\n\n        // We need to stop event propagation because otherwise the event will bubble up to the\n        // form field and cause the `onContainerClick` method to be invoked. This method would then\n        // reset the focused tag that has been focused after tag removal. Usually the parent\n        // the parent click listener of the `McTag` would prevent propagation, but it can happen\n        // that the tag is being removed before the event bubbles up.\n        event.stopPropagation();\n    }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    Self,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { FocusKeyManager } from '@ptsecurity/cdk/a11y';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { BACKSPACE, END, HOME } from '@ptsecurity/cdk/keycodes';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { merge, Observable, Subject, Subscription } from 'rxjs';\nimport { startWith, takeUntil } from 'rxjs/operators';\n\nimport { McTagTextControl } from './tag-text-control';\nimport { McTag, McTagEvent, McTagSelectionChange } from './tag.component';\n\n\nexport class McTagListBase {\n    constructor(\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const _McTagListMixinBase: CanUpdateErrorStateCtor & typeof McTagListBase = mixinErrorState(McTagListBase);\n\n\n// Increasing integer for generating unique ids for tag-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the tag list value has changed. */\nexport class McTagListChange {\n    constructor(public source: McTagList, public value: any) {}\n}\n\n\n@Component({\n    selector: 'mc-tag-list',\n    exportAs: 'mcTagList',\n    template: '<ng-content></ng-content>',\n    host: {\n        class: 'mc-tag-list',\n        '[attr.tabindex]': 'disabled ? null : _tabIndex',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-invalid]': 'errorState',\n        '[class.mc-required]': 'required',\n        '(focus)': 'focus()',\n        '(blur)': 'blur()',\n        '(keydown)': 'keydown($event)',\n        '[id]': 'uid'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McTagList }],\n    styleUrls: ['tag-list.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McTagList extends _McTagListMixinBase implements McFormFieldControl<any>,\n    ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n\n    readonly controlType: string = 'mc-tag-list';\n\n    /** Combined stream of all of the child tags' selection change events. */\n    get tagSelectionChanges(): Observable<McTagSelectionChange> {\n        return merge(...this.tags.map((tag) => tag.selectionChange));\n    }\n\n    /** Combined stream of all of the child tags' focus change events. */\n    get tagFocusChanges(): Observable<McTagEvent> {\n        return merge(...this.tags.map((tag) => tag.onFocus));\n    }\n\n    /** Combined stream of all of the child tags' blur change events. */\n    get tagBlurChanges(): Observable<McTagEvent> {\n        return merge(...this.tags.map((tag) => tag.onBlur));\n    }\n\n    /** Combined stream of all of the child tags' remove change events. */\n    get tagRemoveChanges(): Observable<McTagEvent> {\n        return merge(...this.tags.map((tag) => tag.destroyed));\n    }\n\n    /** The array of selected tags inside tag list. */\n    get selected(): McTag[] | McTag {\n        return this.multiple ? this.selectionModel.selected : this.selectionModel.selected[0];\n    }\n\n    /** Whether the user should be allowed to select multiple tags. */\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith(): (o1: any, o2: any) => boolean {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        this._compareWith = fn;\n\n        if (this.selectionModel) {\n            // A different comparator means the selection could change.\n            this.initializeSelection();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): any {\n        return this._value;\n    }\n\n    set value(value: any) {\n        this.writeValue(value);\n        this._value = value;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get id(): string {\n        return this.tagInput ? this.tagInput.id : this.uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get placeholder(): string {\n        return this.tagInput ? this.tagInput.placeholder : this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n\n    /** Whether any tags or the mcTagInput inside of this tag-list has focus. */\n    get focused(): boolean {\n        return (this.tagInput && this.tagInput.focused) || this.hasFocusedTag();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return (!this.tagInput || this.tagInput.empty) && this.tags.length === 0;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat(): boolean {\n        return !this.empty || this.focused;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        return this.ngControl ? !!this.ngControl.disabled : this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n        this.syncTagsDisabledState();\n    }\n\n    /**\n     * Whether or not this tag list is selectable. When a tag list is not selectable,\n     * the selected states for all the tags inside the tag list are always ignored.\n     */\n    @Input()\n    get selectable(): boolean {\n        return this._selectable;\n    }\n\n    set selectable(value: boolean) {\n        this._selectable = coerceBooleanProperty(value);\n\n        if (this.tags) {\n            this.tags.forEach((tag) => tag.tagListSelectable = this._selectable);\n        }\n    }\n\n    @Input()\n    set tabIndex(value: number) {\n        this.userTabIndex = value;\n        this._tabIndex = value;\n    }\n\n    /**\n     * Event that emits whenever the raw value of the tag-list changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    uid: string = `mc-tag-list-${nextUniqueId++}`;\n\n    /**\n     * User defined tab index.\n     * When it is not null, use user defined tab index. Otherwise use tabIndex\n     */\n    userTabIndex: number | null = null;\n\n    keyManager: FocusKeyManager<McTag>;\n\n    selectionModel: SelectionModel<McTag>;\n\n    tagChanges = new EventEmitter<any>();\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /** Orientation of the tag list. */\n    @Input('orientation') orientation: 'horizontal' | 'vertical' = 'horizontal';\n\n    /** Event emitted when the selected tag list value has been changed by the user. */\n    @Output() readonly change: EventEmitter<McTagListChange> = new EventEmitter<McTagListChange>();\n\n    /** The tag components contained within this tag list. */\n    @ContentChildren(McTag) tags: QueryList<McTag>;\n\n    _tabIndex = 0;\n\n    private _value: any;\n\n    private _required: boolean = false;\n\n    private _placeholder: string;\n\n    private _disabled: boolean = false;\n\n    private _selectable: boolean = true;\n\n    /** The tag input to add more tags */\n    private tagInput: McTagTextControl;\n\n    private _multiple: boolean = false;\n\n    /**\n     * When a tag is destroyed, we store the index of the destroyed tag until the tags\n     * query list notifies about the update. This is necessary because we cannot determine an\n     * appropriate tag that should receive focus until the array of tags updated completely.\n     */\n    private lastDestroyedTagIndex: number | null = null;\n\n    /** Subject that emits when the component has been destroyed. */\n    private destroyed = new Subject<void>();\n\n    /** Subscription to focus changes in the tags. */\n    private tagFocusSubscription: Subscription | null;\n\n    /** Subscription to blur changes in the tags. */\n    private tagBlurSubscription: Subscription | null;\n\n    /** Subscription to selection changes in tags. */\n    private tagSelectionSubscription: Subscription | null;\n\n    /** Subscription to remove changes in tags. */\n    private tagRemoveSubscription: Subscription | null;\n\n    constructor(\n        protected elementRef: ElementRef<HTMLElement>,\n        private changeDetectorRef: ChangeDetectorRef,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        @Optional() private dir: Directionality,\n        @Optional() parentForm: NgForm,\n        @Optional() parentFormGroup: FormGroupDirective,\n        @Optional() @Self() public ngControl: NgControl\n    ) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            this.ngControl.valueAccessor = this;\n        }\n    }\n\n    ngAfterContentInit() {\n        this.keyManager = new FocusKeyManager<McTag>(this.tags)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this.dir ? this.dir.value : 'ltr');\n\n        if (this.dir) {\n            this.dir.change\n                .pipe(takeUntil(this.destroyed))\n                .subscribe((dir) => this.keyManager.withHorizontalOrientation(dir));\n        }\n\n        // Prevents the tag list from capturing focus and redirecting\n        // it back to the first tag when the user tabs out.\n        this.keyManager.tabOut\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(() => {\n                this._tabIndex = -1;\n\n                setTimeout(() => {\n                    this._tabIndex = this.userTabIndex || 0;\n                    this.changeDetectorRef.markForCheck();\n                });\n            });\n\n        // When the list changes, re-subscribe\n        this.tags.changes\n            .pipe(startWith(null), takeUntil(this.destroyed))\n            .subscribe(() => {\n                if (this.disabled) {\n                    // Since this happens after the content has been\n                    // checked, we need to defer it to the next tick.\n                    Promise.resolve().then(() => { this.syncTagsDisabledState(); });\n                }\n\n                this.resetTags();\n\n                // Reset tags selected/deselected status\n                this.initializeSelection();\n\n                // Check to see if we need to update our tab index\n                this.updateTabIndex();\n\n                // Check to see if we have a destroyed tag and need to refocus\n                this.updateFocusForDestroyedTags();\n\n                // Defer setting the value in order to avoid the \"Expression\n                // has changed after it was checked\" errors from Angular.\n                Promise.resolve().then(() => { this.tagChanges.emit(this.tags.toArray()); });\n\n                this.stateChanges.next();\n            });\n    }\n\n    ngOnInit() {\n        this.selectionModel = new SelectionModel<McTag>(this.multiple, undefined, false);\n        this.stateChanges.next();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroyed.next();\n        this.destroyed.complete();\n        this.stateChanges.complete();\n\n        this.dropSubscriptions();\n    }\n\n    // tslint:disable-next-line:no-empty\n    onTouched = () => {};\n\n    // tslint:disable-next-line:no-empty\n    onChange: (value: any) => void = () => {};\n\n    /** Associates an HTML input element with this tag list. */\n    registerInput(inputElement: McTagTextControl): void {\n        this.tagInput = inputElement;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any): void {\n        if (this.tags) {\n            this.setSelectionByValue(value, false);\n        }\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this.onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n        this.stateChanges.next();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick(event: MouseEvent) {\n        if (!this.originatesFromTag(event)) {\n            this.focus();\n        }\n    }\n\n    /**\n     * Focuses the first non-disabled tag in this tag list, or the associated input when there\n     * are no eligible tags.\n     */\n    focus(): void {\n        if (this.disabled) { return; }\n\n        // TODO: ARIA says this should focus the first `selected` tag if any are selected.\n        // Focus on first element if there's no tagInput inside tag-list\n        if (this.tagInput && this.tagInput.focused) {\n            // do nothing\n        } else if (this.tags.length > 0) {\n            this.keyManager.setFirstItemActive();\n            this.stateChanges.next();\n        } else {\n            this.focusInput();\n            this.stateChanges.next();\n        }\n    }\n\n    /** Attempt to focus an input if we have one. */\n    focusInput() {\n        if (this.tagInput) {\n            this.tagInput.focus();\n        }\n    }\n\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n    keydown(event: KeyboardEvent) {\n        const target = event.target as HTMLElement;\n\n        // If they are on an empty input and hit backspace, focus the last tag\n        // tslint:disable-next-line: deprecation\n        if (event.keyCode === BACKSPACE && this.isInputEmpty(target)) {\n            this.keyManager.setLastItemActive();\n            event.preventDefault();\n        } else if (target && target.classList.contains('mc-tag')) {\n            // tslint:disable-next-line: deprecation\n            if (event.keyCode === HOME) {\n                this.keyManager.setFirstItemActive();\n                event.preventDefault();\n            // tslint:disable-next-line: deprecation\n            } else if (event.keyCode === END) {\n                this.keyManager.setLastItemActive();\n                event.preventDefault();\n            } else {\n                this.keyManager.onKeydown(event);\n            }\n\n            this.stateChanges.next();\n        }\n    }\n\n    setSelectionByValue(value: any, isUserInput: boolean = true) {\n        this.clearSelection();\n        this.tags.forEach((tag) => tag.deselect());\n\n        if (Array.isArray(value)) {\n            value.forEach((currentValue) => this.selectValue(currentValue, isUserInput));\n            this.sortValues();\n        } else {\n            const correspondingTag = this.selectValue(value, isUserInput);\n\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what tag the user interacted with last.\n            if (correspondingTag && isUserInput) {\n                this.keyManager.setActiveItem(correspondingTag);\n            }\n        }\n    }\n\n    /** When blurred, mark the field as touched when focus moved outside the tag list. */\n    blur() {\n        if (!this.hasFocusedTag()) {\n            this.keyManager.setActiveItem(-1);\n        }\n\n        if (!this.disabled) {\n            if (this.tagInput) {\n                // If there's a tag input, we should check whether the focus moved to tag input.\n                // If the focus is not moved to tag input, mark the field as touched. If the focus moved\n                // to tag input, do nothing.\n                // Timeout is needed to wait for the focus() event trigger on tag input.\n                setTimeout(() => {\n                    if (!this.focused) {\n                        this.markAsTouched();\n                    }\n                });\n            } else {\n                // If there's no tag input, then mark the field as touched.\n                this.markAsTouched();\n            }\n        }\n    }\n\n    /** Mark the field as touched */\n    markAsTouched() {\n        this.onTouched();\n        this.changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     */\n    protected updateTabIndex(): void {\n        // If we have 0 tags, we should not allow keyboard focus\n        this._tabIndex = this.userTabIndex || (this.tags.length === 0 ? -1 : 0);\n    }\n\n    /**\n     * If the amount of tags changed, we need to update the\n     * key manager state and focus the next closest tag.\n     */\n    protected updateFocusForDestroyedTags() {\n        if (this.lastDestroyedTagIndex != null && this.tags.length) {\n            const newTagIndex = Math.min(this.lastDestroyedTagIndex, this.tags.length - 1);\n            this.keyManager.setActiveItem(newTagIndex);\n        } else if (this.tags.length === 0) {\n            this.focusInput();\n        }\n\n        this.lastDestroyedTagIndex = null;\n    }\n\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of tags.\n     */\n    private isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.tags.length;\n    }\n\n    private isInputEmpty(element: HTMLElement): boolean {\n        if (element && element.nodeName.toLowerCase() === 'input') {\n            const input = element as HTMLInputElement;\n\n            return !input.value;\n        }\n\n        return false;\n    }\n\n    /**\n     * Finds and selects the tag based on its value.\n     * @returns Tag that has the corresponding value.\n     */\n    private selectValue(value: any, isUserInput: boolean = true): McTag | undefined {\n\n        const correspondingTag = this.tags.find((tag) => {\n            return tag.value != null && this._compareWith(tag.value, value);\n        });\n\n        if (correspondingTag) {\n            if (isUserInput) {\n                correspondingTag.selectViaInteraction();\n            } else {\n                correspondingTag.select();\n            }\n\n            this.selectionModel.select(correspondingTag);\n        }\n\n        return correspondingTag;\n    }\n\n    private initializeSelection(): void {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl || this._value) {\n                this.setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n                this.stateChanges.next();\n            }\n        });\n    }\n\n    /**\n     * Deselects every tag in the list.\n     * @param skip Tag that should not be deselected.\n     */\n    private clearSelection(skip?: McTag): void {\n        this.selectionModel.clear();\n        this.tags.forEach((tag) => {\n            if (tag !== skip) {\n                tag.deselect();\n            }\n        });\n        this.stateChanges.next();\n    }\n\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     */\n    private sortValues(): void {\n        if (this._multiple) {\n            this.selectionModel.clear();\n\n            this.tags.forEach((tag) => {\n                if (tag.selected) {\n                    this.selectionModel.select(tag);\n                }\n            });\n            this.stateChanges.next();\n        }\n    }\n\n    /** Emits change event to set the model value. */\n    private propagateChanges(fallbackValue?: any): void {\n        let valueToEmit: any = null;\n\n        if (Array.isArray(this.selected)) {\n            valueToEmit = this.selected.map((tag) => tag.value);\n        } else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.change.emit(new McTagListChange(this, valueToEmit));\n        this.valueChange.emit(valueToEmit);\n        this.onChange(valueToEmit);\n        this.changeDetectorRef.markForCheck();\n    }\n\n    private resetTags() {\n        this.dropSubscriptions();\n        this.listenToTagsFocus();\n        this.listenToTagsSelection();\n        this.listenToTagsRemoved();\n    }\n\n    private dropSubscriptions() {\n        if (this.tagFocusSubscription) {\n            this.tagFocusSubscription.unsubscribe();\n            this.tagFocusSubscription = null;\n        }\n\n        if (this.tagBlurSubscription) {\n            this.tagBlurSubscription.unsubscribe();\n            this.tagBlurSubscription = null;\n        }\n\n        if (this.tagSelectionSubscription) {\n            this.tagSelectionSubscription.unsubscribe();\n            this.tagSelectionSubscription = null;\n        }\n\n        if (this.tagRemoveSubscription) {\n            this.tagRemoveSubscription.unsubscribe();\n            this.tagRemoveSubscription = null;\n        }\n    }\n\n    /** Listens to user-generated selection events on each tag. */\n    private listenToTagsSelection(): void {\n        this.tagSelectionSubscription = this.tagSelectionChanges.subscribe((event) => {\n            if (event.source.selected) {\n                this.selectionModel.select(event.source);\n            } else {\n                this.selectionModel.deselect(event.source);\n            }\n\n            // For single selection tag list, make sure the deselected value is unselected.\n            if (!this.multiple) {\n                this.tags.forEach((tag) => {\n                    if (!this.selectionModel.isSelected(tag) && tag.selected) {\n                        tag.deselect();\n                    }\n                });\n            }\n\n            if (event.isUserInput) {\n                this.propagateChanges();\n            }\n        });\n    }\n\n    /** Listens to user-generated selection events on each tag. */\n    private listenToTagsFocus(): void {\n        this.tagFocusSubscription = this.tagFocusChanges.subscribe((event) => {\n            const tagIndex: number = this.tags.toArray().indexOf(event.tag);\n\n            if (this.isValidIndex(tagIndex)) {\n                this.keyManager.updateActiveItem(tagIndex);\n            }\n            this.stateChanges.next();\n        });\n\n        this.tagBlurSubscription = this.tagBlurChanges.subscribe(() => {\n            this.blur();\n            this.stateChanges.next();\n        });\n    }\n\n    private listenToTagsRemoved(): void {\n        this.tagRemoveSubscription = this.tagRemoveChanges.subscribe((event) => {\n            const tag = event.tag;\n            const tagIndex = this.tags.toArray().indexOf(event.tag);\n\n            // In case the tag that will be removed is currently focused, we temporarily store\n            // the index in order to be able to determine an appropriate sibling tag that will\n            // receive focus.\n            if (this.isValidIndex(tagIndex) && tag.hasFocus) {\n                this.lastDestroyedTagIndex = tagIndex;\n            }\n        });\n    }\n\n    /** Checks whether an event comes from inside a tag element. */\n    private originatesFromTag(event: Event): boolean {\n        let currentElement = event.target as HTMLElement | null;\n\n        while (currentElement && currentElement !== this.elementRef.nativeElement) {\n            if (currentElement.classList.contains('mc-tag')) {\n                return true;\n            }\n\n            currentElement = currentElement.parentElement;\n        }\n\n        return false;\n    }\n\n    /** Checks whether any of the tags is focused. */\n    private hasFocusedTag() {\n        return this.tags.some((tag) => tag.hasFocus);\n    }\n\n    /** Syncs the list's disabled state with the individual tags. */\n    private syncTagsDisabledState() {\n        if (this.tags) {\n            this.tags.forEach((tag) => {\n                tag.disabled = this._disabled;\n            });\n        }\n    }\n}\n\n","import { Directive, Input } from '@angular/core';\n\nimport { CdkTreeNodeDef } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodeDef]',\n    inputs: ['when: mcTreeNodeDefWhen'],\n    providers: [{ provide: CdkTreeNodeDef, useExisting: McTreeNodeDef }]\n})\nexport class McTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n    @Input('mcTreeNode') data: T;\n}\n","import { Directive, Input, OnInit } from '@angular/core';\nimport { CdkTreeNodePadding } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodePadding]',\n    providers: [{ provide: CdkTreeNodePadding, useExisting: McTreeNodePadding }]\n})\nexport class McTreeNodePadding<T> extends CdkTreeNodePadding<T> implements OnInit {\n    @Input('mcTreeNodePadding') level: number;\n\n    @Input('mcTreeNodePaddingIndent') indent: number;\n\n    baseLeftPadding: number = 12;\n    /* tslint:disable-next-line:naming-convention */\n    _indent: number = 20;\n\n    withIcon: boolean;\n    iconWidth: number = 20;\n\n    get leftPadding(): number {\n        return (this.withIcon ? 0 : this.iconWidth) + this.baseLeftPadding;\n    }\n\n    paddingIndent(): string | null {\n        const nodeLevel = (this.treeNode.data && this.tree.treeControl.getLevel)\n            ? this.tree.treeControl.getLevel(this.treeNode.data)\n            : null;\n\n        const level = this.level || nodeLevel;\n\n        return level ? `${(level * this._indent) + this.leftPadding}px` : `${this.baseLeftPadding}px`;\n    }\n\n    ngOnInit(): void {\n        this.withIcon = this.tree.treeControl.isExpandable(this.treeNode.data);\n\n        this.setPadding();\n    }\n}\n","import { Directive } from '@angular/core';\nimport { CdkTreeNodeToggle } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodeToggle]',\n    host: {\n        '(click)': 'toggle($event)'\n    },\n    providers: [{ provide: CdkTreeNodeToggle, useExisting: McTreeNodeToggle }]\n})\nexport class McTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {}\n","import {\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    Output,\n    ElementRef,\n    Inject,\n    Optional,\n    InjectionToken\n} from '@angular/core';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { CdkTreeNode } from '@ptsecurity/cdk/tree';\nimport { CanDisable, toBoolean } from '@ptsecurity/mosaic/core';\n\n\n/* tslint:disable-next-line:naming-convention */\nexport interface McTreeOptionParentComponent {\n    multiple: boolean;\n    selectionModel: SelectionModel<McTreeOption>;\n    setFocusedOption: any;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MC_TREE_OPTION_PARENT_COMPONENT =\n    new InjectionToken<McTreeOptionParentComponent>('MC_TREE_OPTION_PARENT_COMPONENT');\n\nexport class McTreeOptionChange {\n    constructor(public source: McTreeOption, public isUserInput = false) {}\n}\n\nlet uniqueIdCounter: number = 0;\n\n@Component({\n    selector: 'mc-tree-option',\n    exportAs: 'mcTreeOption',\n    host: {\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'getTabIndex()',\n\n        '[attr.disabled]': 'disabled || null',\n\n        class: 'mc-tree-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-active]': 'active',\n\n        '(click)': 'selectViaInteraction()'\n    },\n    templateUrl: './tree-option.html',\n    providers: [{ provide: CdkTreeNode, useExisting: McTreeOption }]\n})\nexport class McTreeOption extends CdkTreeNode<McTreeOption> implements CanDisable {\n    @Output() readonly onSelectionChange = new EventEmitter<McTreeOptionChange>();\n\n    @Input() value: any;\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    // @Input()\n    // get selected(): boolean {\n    //     return this.treeSelection.selectionModel && this.treeSelection.selectionModel.isSelected(this) || false;\n    // }\n\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            // this.treeSelection._reportValueChange();\n        }\n    }\n\n    private _selected: boolean = false;\n\n    /**\n     * Whether or not the option is currently active and ready to be selected.\n     * An active option displays styles as if it is focused, but the\n     * focus is actually retained somewhere else. This comes in handy\n     * for components like autocomplete where focus must remain on the input.\n     */\n    get active(): boolean {\n        return this._active;\n    }\n\n    private _active = false;\n\n    get id(): string {\n        return this._id;\n    }\n\n    private _id = `mc-tree-option-${uniqueIdCounter++}`;\n\n    get multiple(): boolean {\n        return this.parent.multiple;\n    }\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_TREE_OPTION_PARENT_COMPONENT) private readonly parent: McTreeOptionParentComponent\n    ) {\n        // todo any\n        super(elementRef, parent as any);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.parent.selectionModel) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.parent.selectionModel.select(this);\n        } else {\n            this.parent.selectionModel.deselect(this);\n        }\n\n        // this._changeDetector.markForCheck();\n    }\n\n    /**\n     * This method sets display styles on the option to make it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setActiveStyles(): void {\n        if (!this._active) {\n            this._active = true;\n\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    /**\n     * This method removes display styles on the option that made it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setInactiveStyles(): void {\n        if (this._active) {\n            this._active = false;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    getHeight(): number {\n        const clientRects = this.elementRef.nativeElement.getClientRects();\n        if (clientRects.length) {\n            return clientRects[0].height;\n        }\n\n        return 0;\n    }\n\n    focus(): void {\n        const element = this.getHostElement();\n\n        if (typeof element.focus === 'function') {\n            element.focus();\n        }\n    }\n\n    // todo старая реализация, нужно восстановить tree-selection\n    // handleClick(): void {\n    //     if (this.disabled) { return; }\n    //\n    //     this.treeSelection.setFocusedOption(this);\n    // }\n\n    /**\n     * The displayed value of the option. It is necessary to show the selected option in the\n     * select's trigger.\n     */\n    get viewValue(): string {\n        // TODO(kara): Add input property alternative for node envs.\n        return (this.getHostElement().textContent || '').trim();\n    }\n\n    select(): void {\n        if (!this._selected) {\n            this._selected = true;\n\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    deselect(): void {\n        if (this._selected) {\n            this._selected = false;\n\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    selectViaInteraction(): void {\n        if (!this.disabled) {\n            this._selected = this.multiple ? !this._selected : true;\n\n            this.changeDetectorRef.markForCheck();\n            this.emitSelectionChangeEvent(true);\n\n            if (this.parent.setFocusedOption) {\n                this.parent.setFocusedOption(this);\n            }\n        }\n    }\n\n    emitSelectionChangeEvent(isUserInput = false): void {\n        this.onSelectionChange.emit(new McTreeOptionChange(this, isUserInput));\n    }\n\n    getHostElement(): HTMLElement {\n        return this.elementRef.nativeElement;\n    }\n\n    getTabIndex(): string {\n        return this.disabled ? '-1' : '0';\n    }\n}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    EventEmitter,\n    Input,\n    IterableDiffer,\n    IterableDiffers,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    ElementRef\n} from '@angular/core';\nimport { NodeDef, ViewData } from '@angular/core/src/view';\nimport { ActiveDescendantKeyManager } from '@ptsecurity/cdk/a11y';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, SPACE } from '@ptsecurity/cdk/keycodes';\nimport { CdkTree, CdkTreeNodeOutlet } from '@ptsecurity/cdk/tree';\nimport {\n    CanDisable,\n    CanDisableCtor,\n    HasTabIndex,\n    HasTabIndexCtor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\nimport { Subject } from 'rxjs';\n\nimport { MC_TREE_OPTION_PARENT_COMPONENT, McTreeOption } from './tree-option';\n\n\nexport class McTreeNavigationChange {\n    constructor(\n        public source: McTreeSelection,\n        public option: McTreeOption\n    ) {}\n}\n\nexport class McTreeSelectionChange {\n    constructor(public source: McTreeSelection, public option: McTreeOption) {}\n}\n\nclass McTreeSelectionBase<T> extends CdkTree<T> {\n    constructor(differs: IterableDiffers, changeDetectorRef: ChangeDetectorRef) {\n        super(differs, changeDetectorRef);\n    }\n}\n\n/* tslint:disable-next-line:naming-convention */\nconst McTreeSelectionBaseMixin: HasTabIndexCtor & CanDisableCtor &\n    typeof McTreeSelectionBase = mixinTabIndex(mixinDisabled(McTreeSelectionBase));\n\n\n@Component({\n    selector: 'mc-tree-selection',\n    exportAs: 'mcTreeSelection',\n    template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n    host: {\n        class: 'mc-tree-selection',\n\n        '[attr.tabindex]': 'tabIndex',\n\n        '(keydown)': 'onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    styleUrls: ['./tree.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [\n        { provide: MC_TREE_OPTION_PARENT_COMPONENT, useExisting: McTreeSelection },\n        { provide: CdkTree, useExisting: McTreeSelection }\n    ]\n})\nexport class McTreeSelection extends McTreeSelectionBaseMixin<McTreeOption>\n    implements AfterContentInit, CanDisable, HasTabIndex {\n\n    @ViewChild(CdkTreeNodeOutlet) nodeOutlet: CdkTreeNodeOutlet;\n\n    @ContentChildren(McTreeOption) options: QueryList<McTreeOption>;\n\n    keyManager: ActiveDescendantKeyManager<McTreeOption>;\n\n    selectionModel: SelectionModel<McTreeOption>;\n\n    tabIndex: number;\n    multiple: boolean;\n    autoSelect: boolean;\n    noUnselect: boolean;\n\n    // todo temporary solution\n    withShift: boolean;\n    withCtrl: boolean;\n\n\n    @Output() readonly navigationChange = new EventEmitter<McTreeNavigationChange>();\n\n    @Output() readonly selectionChange = new EventEmitter<McTreeSelectionChange>();\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(rawValue: boolean) {\n        const value = toBoolean(rawValue);\n\n        if (this._disabled !== value) {\n            this._disabled = value;\n\n            if (this._disabled) {\n                /* tslint:disable-next-line:no-console */\n                console.log('need disable all options');\n            } else {\n                /* tslint:disable-next-line:no-console */\n                console.log('need enable all options');\n            }\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    private readonly destroy = new Subject<void>();\n\n    constructor(\n        private elementRef: ElementRef,\n        differs: IterableDiffers,\n        changeDetectorRef: ChangeDetectorRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('multiple') multiple: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string\n    ) {\n        super(differs, changeDetectorRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.multiple = multiple === null ? false : toBoolean(multiple);\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.selectionModel = new SelectionModel<McTreeOption>(this.multiple);\n    }\n\n    ngAfterContentInit(): void {\n        this.keyManager = new ActiveDescendantKeyManager<McTreeOption>(this.options)\n            .withVerticalOrientation(true)\n            .withHorizontalOrientation(null);\n    }\n\n    ngOnDestroy() {\n        this.destroy.next();\n\n        this.destroy.complete();\n    }\n\n    onKeyDown(event: KeyboardEvent) {\n        // tslint:disable-next-line: deprecation\n        const keyCode = event.keyCode;\n        this.withShift = event.shiftKey;\n        this.withCtrl = event.ctrlKey;\n\n        switch (keyCode) {\n            case LEFT_ARROW:\n                if (this.keyManager.activeItem) {\n                    this.treeControl.collapse(this.keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                break;\n            case RIGHT_ARROW:\n                if (this.keyManager.activeItem) {\n                    this.treeControl.expand(this.keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                break;\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this.keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this.keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                this.keyManager.setPreviousPageItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                this.keyManager.setNextPageItemActive();\n                event.preventDefault();\n\n                break;\n            default:\n                this.keyManager.onKeydown(event);\n        }\n    }\n\n    updateScrollSize(): void {\n        if (!this.options.first) { return; }\n\n        this.keyManager.withScrollSize(Math.floor(this.getHeight() / this.options.first.getHeight()));\n    }\n\n    setFocusedOption(option: McTreeOption) {\n        this.keyManager.setActiveItem(option);\n\n        if (this.withShift && this.multiple) {\n            const previousIndex = this.keyManager.previousActiveItemIndex;\n            const activeIndex = this.keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n\n            this.withShift = false;\n        } else if (this.withCtrl) {\n            this.withCtrl = false;\n\n            if (!this.canDeselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) {\n                this.options.forEach((item) => item.setSelected(false));\n                option.setSelected(true);\n            }\n        }\n\n        this.emitNavigationEvent(option);\n    }\n\n    toggleFocusedOption(): void {\n        const focusedIndex = this.keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this.isValidIndex(focusedIndex)) {\n            const focusedOption: McTreeOption = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this.canDeselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this.emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    renderNodeChanges(\n        data: McTreeOption[],\n        dataDiffer: IterableDiffer<McTreeOption> = this.dataDiffer,\n        viewContainer: any = this.nodeOutlet.viewContainer,\n        parentData?: McTreeOption\n    ): void {\n        super.renderNodeChanges(data, dataDiffer, viewContainer, parentData);\n\n        const arrayOfInstances = [];\n\n        viewContainer._embeddedViews.forEach((view: ViewData) => {\n            const viewDef = view.def;\n\n            viewDef.nodes.forEach((node: NodeDef) => {\n                if (viewDef.nodeMatchedQueries === node.matchedQueryIds) {\n                    const nodeData: any = view.nodes[node.nodeIndex];\n\n                    arrayOfInstances.push(nodeData.instance as never);\n                }\n            });\n        });\n\n        if (this.options) {\n            this.options.reset(arrayOfInstances);\n            this.options.notifyOnChanges();\n        }\n\n        this.updateScrollSize();\n    }\n\n    getHeight(): number {\n        const clientRects = this.elementRef.nativeElement.getClientRects();\n        if (clientRects.length) {\n            return clientRects[0].height;\n        }\n\n        return 0;\n    }\n\n    emitNavigationEvent(option: McTreeOption): void {\n        this.navigationChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    emitChangeEvent(option: McTreeOption): void {\n        this.selectionChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    private isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    private canDeselectLast(option: McTreeOption): boolean {\n        return !(this.noUnselect && this.selectionModel.selected.length === 1 && option.selected);\n    }\n}\n\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CdkTreeModule } from '@ptsecurity/cdk/tree';\nimport { McPseudoCheckboxModule } from '@ptsecurity/mosaic/core';\n\nimport { McTreeNodeDef } from './node';\nimport { McTreeNodePadding } from './padding';\nimport { McTreeNodeToggle } from './toggle';\nimport { McTreeOption } from './tree-option';\nimport { McTreeSelection } from './tree-selection';\n\n\nconst MC_TREE_DIRECTIVES = [\n    McTreeSelection,\n    McTreeOption,\n    McTreeNodeDef,\n    McTreeNodePadding,\n    McTreeNodeToggle\n];\n\n@NgModule({\n    imports: [CommonModule, CdkTreeModule, McPseudoCheckboxModule],\n    exports: MC_TREE_DIRECTIVES,\n    declarations: MC_TREE_DIRECTIVES\n})\nexport class McTreeModule {}\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { FlatTreeControl, ITreeControl } from '@ptsecurity/cdk/tree';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class McTreeFlattener<T, F> {\n    constructor(\n        public transformFunction: (node: T, level: number) => F,\n        public getLevel: (node: F) => number,\n        public isExpandable: (node: F) => boolean,\n        public getChildren: (node: T) => Observable<T[]>\n    ) {}\n\n    flattenNode(node: T, level: number, resultNodes: F[], parentMap: boolean[]): F[] {\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n\n        if (this.isExpandable(flatNode)) {\n            this.getChildren(node)\n                .pipe(take(1))\n                .subscribe((children) => {\n                    children.forEach((child, index) => {\n                        const childParentMap: boolean[] = parentMap.slice();\n                        childParentMap.push(index !== children.length - 1);\n\n                        this.flattenNode(child, level + 1, resultNodes, childParentMap);\n                    });\n                });\n        }\n\n        return resultNodes;\n    }\n\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n    flattenNodes(structuredData: T[]): F[] {\n        const resultNodes: F[] = [];\n        structuredData.forEach((node) => this.flattenNode(node, 0, resultNodes, []));\n\n        return resultNodes;\n    }\n\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n    expandFlattenedNodes(nodes: F[], treeControl: ITreeControl<F>): F[] {\n        const results: F[] = [];\n        const currentExpand: boolean[] = [];\n        currentExpand[0] = true;\n\n        nodes.forEach((node) => {\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n\n            if (expand) { results.push(node); }\n\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        });\n\n        return results;\n    }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `McTree`.\n * The nested tree nodes of type `T` are flattened through `MсTreeFlattener`, and converted\n * to type `F` for `McTree` to consume.\n */\nexport class McTreeFlatDataSource<T, F> extends DataSource<F> {\n    flattenedData = new BehaviorSubject<F[]>([]);\n\n    expandedData = new BehaviorSubject<F[]>([]);\n\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n\n        this.flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n        this.treeControl.dataNodes = this.flattenedData.value;\n    }\n\n    private _data: BehaviorSubject<T[]>;\n\n    constructor(\n        private treeControl: FlatTreeControl<F>,\n        private treeFlattener: McTreeFlattener<T, F>,\n        initialData: T[] = []\n    ) {\n        super();\n\n        this._data = new BehaviorSubject<T[]>(initialData);\n    }\n\n    connect(collectionViewer: ICollectionViewer): Observable<F[]> {\n        const changes = [\n            collectionViewer.viewChange,\n            this.treeControl.expansionModel.changed,\n            this.flattenedData\n        ];\n\n        return merge(...changes)\n            .pipe(map(() => {\n                this.expandedData.next(\n                    this.treeFlattener.expandFlattenedNodes(this.flattenedData.value, this.treeControl)\n                );\n\n                return this.expandedData.value;\n            }));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by ITreeControl and each non-leaf node.\n */\nexport class McTreeNestedDataSource<T> extends DataSource<T> {\n\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n    }\n\n    /* tslint:disable-next-line:naming-convention */\n    private _data = new BehaviorSubject<T[]>([]);\n\n    connect(collectionViewer: ICollectionViewer): Observable<T[]> {\n        return merge(...[collectionViewer.viewChange, this._data])\n            .pipe(map(() => this.data));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import { Directive, TemplateRef } from '@angular/core';\n\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({ selector: '[mcTabContent]' })\nexport class McTabContent {\n    constructor(public template: TemplateRef<any>) { }\n}\n","import { Directive } from '@angular/core';\nimport { CdkPortal } from '@ptsecurity/cdk/portal';\n\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n    selector: '[mc-tab-label], [mcTabLabel]'\n})\nexport class McTabLabel extends CdkPortal {}\n\n// TODO: workaround for https://github.com/angular/material2/issues/12760\n(McTabLabel as any).ctorParameters = () => (CdkPortal as any).ctorParameters;\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ContentChild,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    SimpleChanges,\n    TemplateRef,\n    ViewChild,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { TemplatePortal } from '@ptsecurity/cdk/portal';\nimport {\n    CanDisable,\n    CanDisableCtor,\n    mixinDisabled\n} from '@ptsecurity/mosaic/core';\nimport { Subject } from 'rxjs';\n\nimport { McTabContent } from './tab-content';\nimport { McTabLabel } from './tab-label';\n\n\nexport class McTabBase {}\nexport const mcTabMixinBase: CanDisableCtor & typeof McTabBase = mixinDisabled(\n    McTabBase\n);\n\n@Component({\n    selector: 'mc-tab',\n    // Create a template for the content of the <mc-tab> so that we can grab a reference to this\n    // TemplateRef and use it in a Portal to render the tab content in the appropriate place in the\n    // tab-group.\n    template: '<ng-template><ng-content></ng-content></ng-template>',\n    inputs: ['disabled'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcTab'\n})\nexport class McTab extends mcTabMixinBase\n    implements OnInit, CanDisable, OnChanges, OnDestroy {\n    /** @docs-private */\n    get content(): TemplatePortal | null {\n        return this.contentPortal;\n    }\n    /** Content for the tab label given by `<ng-template mc-tab-label>`. */\n    @ContentChild(McTabLabel)\n    templateLabel: McTabLabel;\n\n    /**\n     * Template provided in the tab content that will be used if present, used to enable lazy-loading\n     */\n    @ContentChild(McTabContent, { read: TemplateRef })\n    explicitContent: TemplateRef<any>;\n\n    /** Template inside the McTab view that contains an `<ng-content>`. */\n    @ViewChild(TemplateRef)\n    implicitContent: TemplateRef<any>;\n\n    /** Plain text label for the tab, used when there is no template label. */\n    @Input('label')\n    textLabel: string = '';\n\n    /** Aria label for the tab. */\n    @Input('aria-label')\n    ariaLabel: string;\n\n    /**\n     * Reference to the element that the tab is labelled by.\n     * Will be cleared if `aria-label` is set at the same time.\n     */\n    @Input('aria-labelledby')\n    ariaLabelledby: string;\n\n    /** Emits whenever the internal state of the tab changes. */\n    readonly stateChanges = new Subject<void>();\n\n    /**\n     * The relatively indexed position where 0 represents the center, negative is left, and positive\n     * represents the right.\n     */\n    position: number | null = null;\n\n    /**\n     * The initial relatively index origin of the tab if it was created and selected after there\n     * was already a selected tab. Provides context of what position the tab should originate from.\n     */\n    origin: number | null = null;\n\n    /**\n     * Whether the tab is currently active.\n     */\n    isActive = false;\n\n    /** Portal that will be the hosted content of the tab */\n    private contentPortal: TemplatePortal | null = null;\n\n    constructor(private viewContainerRef: ViewContainerRef) {\n        super();\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (\n            changes.hasOwnProperty('textLabel') ||\n            changes.hasOwnProperty('disabled')\n        ) {\n            this.stateChanges.next();\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.stateChanges.complete();\n    }\n\n    ngOnInit(): void {\n        this.contentPortal = new TemplatePortal(\n            this.explicitContent || this.implicitContent,\n            this.viewContainerRef\n        );\n    }\n}\n","import {\n    animate,\n    state,\n    style,\n    transition,\n    trigger,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n\nexport const mcTabsAnimations: {\n    readonly translateTab: AnimationTriggerMetadata;\n} = {\n    /** Animation translates a tab along the X axis. */\n    translateTab: trigger('translateTab', [\n        // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n        state(\n            'center, void, left-origin-center, right-origin-center',\n            style({ transform: 'none' })\n        ),\n\n        // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n        // in order to ensure that the element has a height before its state changes. This is\n        // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n        // not have a static height and is not rendered. See related issue: #9465\n        state(\n            'left',\n            style({ transform: 'translate3d(-100%, 0, 0)', minHeight: '1px' })\n        ),\n        state(\n            'right',\n            style({ transform: 'translate3d(100%, 0, 0)', minHeight: '1px' })\n        ),\n\n        transition(\n            '* => left, * => right, left => center, right => center',\n            animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n        ),\n        transition('void => left-origin-center', [\n            style({ transform: 'translate3d(-100%, 0, 0)' }),\n            animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n        ]),\n        transition('void => right-origin-center', [\n            style({ transform: 'translate3d(100%, 0, 0)' }),\n            animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n        ])\n    ])\n};\n","import { AnimationEvent } from '@angular/animations';\nimport {\n    Component,\n    ChangeDetectorRef,\n    Input,\n    Inject,\n    Output,\n    EventEmitter,\n    OnDestroy,\n    OnInit,\n    ElementRef,\n    Directive,\n    Optional,\n    ViewEncapsulation,\n    ChangeDetectionStrategy,\n    ComponentFactoryResolver,\n    ViewContainerRef,\n    forwardRef,\n    ViewChild\n} from '@angular/core';\nimport { Directionality, Direction } from '@ptsecurity/cdk/bidi';\nimport { TemplatePortal, CdkPortalOutlet, PortalHostDirective } from '@ptsecurity/cdk/portal';\nimport { Subscription } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n\nimport { mcTabsAnimations } from './tabs-animations';\n\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type McTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type McTabBodyOriginState = 'left' | 'right';\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n    selector: 'mc-tab-body',\n    templateUrl: 'tab-body.html',\n    styleUrls: ['tab-body.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [mcTabsAnimations.translateTab],\n    host: {\n        class: 'mc-tab-body'\n    }\n})\nexport class McTabBody implements OnInit, OnDestroy {\n\n    /** The shifted index position of the tab body, where zero represents the active center tab. */\n    @Input()\n    set position(position: number) {\n        this.positionIndex = position;\n        this.computePositionAnimationState();\n    }\n\n    /** Tab body position state. Used by the animation trigger for the current state. */\n    bodyPosition: McTabBodyPositionState;\n\n    /** Event emitted when the tab begins to animate towards the center as the active tab. */\n    @Output() readonly onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n    /** Event emitted before the centering of the tab begins. */\n    @Output() readonly beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted before the centering of the tab begins. */\n    @Output() readonly afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted when the tab completes its animation towards the center. */\n    @Output() readonly onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n    /** The portal host inside of this container into which the tab body content will be loaded. */\n    @ViewChild(PortalHostDirective) portalHost: PortalHostDirective;\n\n    /** The tab body content to display. */\n    @Input('content') content: TemplatePortal;\n\n    /** Position that will be used when the tab is immediately becoming visible after creation. */\n    @Input() origin: number;\n\n    // Note that the default value will always be overwritten by `McTabBody`, but we need one\n    // anyway to prevent the animations module from throwing an error if the body is used on its own.\n    /** Duration for the tab's animation. */\n    @Input() animationDuration: string = '0ms';\n\n    /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n    private positionIndex: number;\n\n    /** Subscription to the directionality change observable. */\n    private dirChangeSubscription = Subscription.EMPTY;\n\n    constructor(private elementRef: ElementRef<HTMLElement>,\n                @Optional() private dir: Directionality,\n                changeDetectorRef: ChangeDetectorRef) {\n\n        if (this.dir && changeDetectorRef) {\n            this.dirChangeSubscription = this.dir.change.subscribe((direction: Direction) => {\n                this.computePositionAnimationState(direction);\n                changeDetectorRef.markForCheck();\n            });\n        }\n    }\n\n    /**\n     * After initialized, check if the content is centered and has an origin. If so, set the\n     * special position states that transition the tab from the left or right before centering.\n     */\n    ngOnInit() {\n        if (this.bodyPosition === 'center' && this.origin != null) {\n            this.bodyPosition = this.computePositionFromOrigin();\n        }\n    }\n\n    ngOnDestroy() {\n        this.dirChangeSubscription.unsubscribe();\n    }\n\n    onTranslateTabStarted(e: AnimationEvent): void {\n        const isCentering = this.isCenterPosition(e.toState);\n        this.beforeCentering.emit(isCentering);\n        if (isCentering) {\n            this.onCentering.emit(this.elementRef.nativeElement.clientHeight);\n        }\n    }\n\n    onTranslateTabComplete(e: AnimationEvent): void {\n        // If the transition to the center is complete, emit an event.\n        if (this.isCenterPosition(e.toState) && this.isCenterPosition(this.bodyPosition)) {\n            this.onCentered.emit();\n        }\n\n        if (this.isCenterPosition(e.fromState) && !this.isCenterPosition(this.bodyPosition)) {\n            this.afterLeavingCenter.emit();\n        }\n    }\n\n    /** The text direction of the containing app. */\n    getLayoutDirection(): Direction {\n        return this.dir && this.dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n\n    /** Whether the provided position state is considered center, regardless of origin. */\n    isCenterPosition(position: McTabBodyPositionState | string): boolean {\n        return position === 'center' ||\n            position === 'left-origin-center' ||\n            position === 'right-origin-center';\n    }\n\n    /** Computes the position state that will be used for the tab-body animation trigger. */\n    private computePositionAnimationState(dir: Direction = this.getLayoutDirection()) {\n        if (this.positionIndex < 0) {\n            this.bodyPosition = dir === 'ltr' ? 'left' : 'right';\n        } else if (this.positionIndex > 0) {\n            this.bodyPosition = dir === 'ltr' ? 'right' : 'left';\n        } else {\n            this.bodyPosition = 'center';\n        }\n    }\n\n    /**\n     * Computes the position state based on the specified origin position. This is used if the\n     * tab is becoming visible immediately after creation.\n     */\n    private computePositionFromOrigin(): McTabBodyPositionState {\n        const dir = this.getLayoutDirection();\n\n        if ((dir === 'ltr' && this.origin <= 0) || (dir === 'rtl' && this.origin > 0)) {\n            return 'left-origin-center';\n        }\n\n        return 'right-origin-center';\n    }\n}\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n    selector: '[mcTabBodyHost]'\n})\nexport class McTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n    /** Subscription to events for when the tab body begins centering. */\n    private centeringSub = Subscription.EMPTY;\n    /** Subscription to events for when the tab body finishes leaving from center position. */\n    private leavingSub = Subscription.EMPTY;\n\n    constructor(\n        componentFactoryResolver: ComponentFactoryResolver,\n        viewContainerRef: ViewContainerRef,\n        @Inject(forwardRef(() => McTabBody)) private host: McTabBody) {\n        super(componentFactoryResolver, viewContainerRef);\n    }\n\n    /** Set initial visibility or set up subscription for changing visibility. */\n    ngOnInit(): void {\n        super.ngOnInit();\n\n        this.centeringSub = this.host.beforeCentering\n            .pipe(startWith(this.host.isCenterPosition(this.host.bodyPosition)))\n            .subscribe((isCentering: boolean) => {\n                if (isCentering && !this.hasAttached()) {\n                    this.attach(this.host.content);\n                }\n            });\n\n        this.leavingSub = this.host.afterLeavingCenter.subscribe(() => {\n            this.detach();\n        });\n    }\n\n    /** Clean up centering subscription. */\n    ngOnDestroy(): void {\n        super.ngOnDestroy();\n        this.centeringSub.unsubscribe();\n        this.leavingSub.unsubscribe();\n    }\n}\n","import { Directive, ElementRef } from '@angular/core';\nimport {\n    CanDisable,\n    CanDisableCtor,\n    mixinDisabled\n} from '@ptsecurity/mosaic/core';\n\n\n// Boilerplate for applying mixins to McTabLabelWrapper.\n/** @docs-private */\nexport class McTabLabelWrapperBase {}\nexport const mcTabLabelWrapperMixinBase: CanDisableCtor &\n    typeof McTabLabelWrapperBase = mixinDisabled(McTabLabelWrapperBase);\n\n/**\n * Used in the `mc-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n    selector: '[mcTabLabelWrapper]',\n    inputs: ['disabled'],\n    host: {\n        '[class.mc-disabled]': 'disabled',\n        '[attr.aria-disabled]': '!!disabled'\n    }\n})\nexport class McTabLabelWrapper extends mcTabLabelWrapperMixinBase implements CanDisable {\n    constructor(public elementRef: ElementRef) {\n        super();\n    }\n\n    /** Sets focus on the wrapper element */\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    getOffsetLeft(): number {\n        return this.elementRef.nativeElement.offsetLeft;\n    }\n\n    getOffsetWidth(): number {\n        return this.elementRef.nativeElement.offsetWidth;\n    }\n}\n","import {\n    AfterContentChecked,\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Input,\n    NgZone,\n    OnDestroy,\n    Optional,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { FocusKeyManager } from '@ptsecurity/cdk/a11y';\nimport { Direction, Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceNumberProperty } from '@ptsecurity/cdk/coercion';\nimport { END, ENTER, HOME, SPACE } from '@ptsecurity/cdk/keycodes';\nimport { ViewportRuler } from '@ptsecurity/cdk/scrolling';\nimport { merge, of as observableOf, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { McTabLabelWrapper } from './tab-label-wrapper';\n\n\nconst VIEWPORT_THROTTLE_TIME = 150;\nconst SCROLL_DISTANCE_DELIMITER = 3;\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to McTabHeader.\n/** @docs-private */\nexport class McTabHeaderBase {}\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group.\n * When the tabs list's width exceeds the width of the header container,\n * then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n    selector: 'mc-tab-header',\n    templateUrl: 'tab-header.html',\n    styleUrls: ['tab-header.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        class: 'mc-tab-header',\n        '[class.mc-tab-header__pagination-controls_enabled]':\n            'showPaginationControls',\n        '[class.mc-tab-header_rtl]': 'getLayoutDirection() == \\'rtl\\''\n    }\n})\nexport class McTabHeader extends McTabHeaderBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy {\n    /** The index of the active tab. */\n    @Input()\n    get selectedIndex(): number {\n        return this._selectedIndex;\n    }\n    set selectedIndex(value: number) {\n        const coercedValue = coerceNumberProperty(value);\n        this.selectedIndexChanged = this._selectedIndex !== coercedValue;\n        this._selectedIndex = coercedValue;\n\n        if (this.keyManager) {\n            this.keyManager.updateActiveItem(coercedValue);\n        }\n    }\n\n    /** Tracks which element has focus; used for keyboard navigation */\n    get focusIndex(): number {\n        return this.keyManager ? this.keyManager.activeItemIndex! : 0;\n    }\n\n    /** When the focus index is set, we must manually send focus to the correct label */\n    set focusIndex(value: number) {\n        if (\n            !this.isValidIndex(value) ||\n            this.focusIndex === value ||\n            !this.keyManager\n        ) {\n            return;\n        }\n\n        this.keyManager.setActiveItem(value);\n    }\n\n    /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n    get scrollDistance(): number {\n        return this._scrollDistance;\n    }\n    set scrollDistance(v: number) {\n        this._scrollDistance = Math.max(\n            0,\n            Math.min(this.getMaxScrollDistance(), v)\n        );\n\n        // Mark that the scroll distance has changed so that after the view is checked, the CSS\n        // transformation can move the header.\n        this.scrollDistanceChanged = true;\n        this.checkScrollingControls();\n    }\n\n    @ContentChildren(McTabLabelWrapper)\n    labelWrappers: QueryList<McTabLabelWrapper>;\n    @ViewChild('tabListContainer')\n    tabListContainer: ElementRef;\n    @ViewChild('tabList')\n    tabList: ElementRef;\n\n    /** Whether the controls for pagination should be displayed */\n    showPaginationControls = false;\n\n    /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n    disableScrollAfter = true;\n\n    /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n    disableScrollBefore = true;\n\n    /** Event emitted when the option is selected. */\n    @Output()\n    readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n    /** Event emitted when a label is focused. */\n    @Output()\n    readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n    /** The distance in pixels that the tab labels should be translated to the left. */\n    private _scrollDistance = 0;\n\n    /** Whether the header should scroll to the selected index after the view has been checked. */\n    private selectedIndexChanged = false;\n\n    /** Emits when the component is destroyed. */\n    private readonly destroyed = new Subject<void>();\n\n    /**\n     * The number of tab labels that are displayed on the header. When this changes, the header\n     * should re-evaluate the scroll position.\n     */\n    private tabLabelCount: number;\n\n    /** Whether the scroll distance has changed and should be applied after the view is checked. */\n    private scrollDistanceChanged: boolean;\n\n    /** Used to manage focus between the tabs. */\n    private keyManager: FocusKeyManager<McTabLabelWrapper>;\n\n    /** Cached text content of the header. */\n    private currentTextContent: string;\n\n    private _selectedIndex: number = 0;\n\n    constructor(\n        private elementRef: ElementRef,\n        private changeDetectorRef: ChangeDetectorRef,\n        private viewportRuler: ViewportRuler,\n        @Optional() private dir: Directionality,\n        private ngZone: NgZone\n    ) {\n        super();\n    }\n\n    ngAfterContentChecked(): void {\n        // If the number of tab labels have changed, check if scrolling should be enabled\n        if (this.tabLabelCount !== this.labelWrappers.length) {\n            this.updatePagination();\n            this.tabLabelCount = this.labelWrappers.length;\n            this.changeDetectorRef.markForCheck();\n        }\n\n        // If the selected index has changed, scroll to the label and check if the scrolling controls\n        // should be disabled.\n        if (this.selectedIndexChanged) {\n            this.scrollToLabel(this._selectedIndex);\n            this.checkScrollingControls();\n            this.selectedIndexChanged = false;\n            this.changeDetectorRef.markForCheck();\n        }\n\n        // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n        // then translate the header to reflect this.\n        if (this.scrollDistanceChanged) {\n            this.updateTabScrollPosition();\n            this.scrollDistanceChanged = false;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    handleKeydown(event: KeyboardEvent) {\n        switch (event.keyCode) {\n            case HOME:\n                this.keyManager.setFirstItemActive();\n                event.preventDefault();\n                break;\n            case END:\n                this.keyManager.setLastItemActive();\n                event.preventDefault();\n                break;\n            case ENTER:\n            case SPACE:\n                this.selectFocusedIndex.emit(this.focusIndex);\n                event.preventDefault();\n                break;\n            default:\n                this.keyManager.onKeydown(event);\n        }\n    }\n\n    ngAfterContentInit() {\n        const dirChange = this.dir ? this.dir.change : observableOf(null);\n        const resize = this.viewportRuler.change(VIEWPORT_THROTTLE_TIME);\n        const realign = () => {\n            this.updatePagination();\n        };\n\n        this.keyManager = new FocusKeyManager(this.labelWrappers)\n            .withHorizontalOrientation(this.getLayoutDirection())\n            .withWrap();\n\n        this.keyManager.updateActiveItem(0);\n\n        // Defer the first call in order to allow for slower browsers to lay out the elements.\n        // This helps in cases where the user lands directly on a page with paginated tabs.\n        typeof requestAnimationFrame === undefined\n            ? realign()\n            : requestAnimationFrame(realign);\n\n        // On dir change or window resize, update the orientation of\n        // the key manager if the direction has changed.\n        merge(dirChange, resize)\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(() => {\n                realign();\n                this.keyManager.withHorizontalOrientation(\n                    this.getLayoutDirection()\n                );\n            });\n\n        // If there is a change in the focus key manager we need to emit the `indexFocused`\n        // event in order to provide a public event that notifies about focus changes. Also we realign\n        // the tabs container by scrolling the new focused tab into the visible section.\n        this.keyManager.change\n            .pipe(takeUntil(this.destroyed))\n            .subscribe((newFocusIndex) => {\n                this.indexFocused.emit(newFocusIndex);\n                this.setTabFocus(newFocusIndex);\n            });\n    }\n\n    ngOnDestroy() {\n        this.destroyed.next();\n        this.destroyed.complete();\n    }\n\n    /**\n     * Callback for when the MutationObserver detects that the content has changed.\n     */\n    onContentChanges() {\n        const textContent = this.elementRef.nativeElement.textContent;\n\n        // We need to diff the text content of the header, because the MutationObserver callback\n        // will fire even if the text content didn't change which is inefficient and is prone\n        // to infinite loops if a poorly constructed expression is passed in.\n\n        if (textContent !== this.currentTextContent) {\n            this.currentTextContent = textContent;\n\n            const zoneCallback = () => {\n                this.updatePagination();\n                this.changeDetectorRef.markForCheck();\n            };\n\n            // The content observer runs outside the `NgZone` by default, which\n            // means that we need to bring the callback back in ourselves.\n            // TODO: Remove null check for `_ngZone` once it's a required parameter.\n            this.ngZone ? this.ngZone.run(zoneCallback) : zoneCallback();\n        }\n    }\n\n    /**\n     * Updating the view whether pagination should be enabled or not\n     *\n     * WARNING: Calling this method can be very costly in terms of performance.  It should be called\n     * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n     * page.\n     */\n    updatePagination() {\n        this.checkPaginationEnabled();\n        this.checkScrollingControls();\n        this.updateTabScrollPosition();\n    }\n\n    /**\n     * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n     * providing a valid index and return true.\n     */\n    isValidIndex(index: number): boolean {\n        if (!this.labelWrappers) {\n            return true;\n        }\n\n        const tab = this.labelWrappers\n            ? this.labelWrappers.toArray()[index]\n            : null;\n\n        return !!tab && !tab.disabled;\n    }\n\n    /**\n     * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n     * scrolling is enabled.\n     */\n    setTabFocus(tabIndex: number) {\n        if (this.showPaginationControls) {\n            this.scrollToLabel(tabIndex);\n        }\n\n        if (this.labelWrappers && this.labelWrappers.length) {\n            this.labelWrappers.toArray()[tabIndex].focus();\n\n            // Do not let the browser manage scrolling to focus the element, this will be handled\n            // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n            // should be the full width minus the offset width.\n            const containerEl = this.tabListContainer.nativeElement;\n            const dir = this.getLayoutDirection();\n\n            if (dir === 'ltr') {\n                containerEl.scrollLeft = 0;\n            } else {\n                containerEl.scrollLeft =\n                    containerEl.scrollWidth - containerEl.offsetWidth;\n            }\n        }\n    }\n\n    /** The layout direction of the containing app. */\n    getLayoutDirection(): Direction {\n        return this.dir && this.dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n\n    /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n    updateTabScrollPosition() {\n        const scrollDistance = this.scrollDistance;\n        const translateX =\n            this.getLayoutDirection() === 'ltr'\n                ? -scrollDistance\n                : scrollDistance;\n\n        // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n        // seems to cause flickering and overflow in Internet Explorer.\n        // See: https://github.com/angular/material2/issues/10276\n        // We round the `transform` here, because transforms with sub-pixel precision cause some\n        // browsers to blur the content of the element.\n        this.tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n        // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n        // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n        // it doesn't get thrown off.\n        this.tabList.nativeElement.scrollLeft = 0;\n    }\n\n    /**\n     * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n     * the end of the list, respectively). The distance to scroll is computed to be a third of the\n     * length of the tab list view window.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    scrollHeader(scrollDir: ScrollDirection) {\n        const viewLength = this.tabListContainer.nativeElement.offsetWidth;\n\n        // Move the scroll distance one-third the length of the tab list's viewport.\n        this.scrollDistance +=\n            ((scrollDir === 'before' ? -1 : 1) * viewLength) / SCROLL_DISTANCE_DELIMITER;\n    }\n\n    /**\n     * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    scrollToLabel(labelIndex: number) {\n        const selectedLabel = this.labelWrappers\n            ? this.labelWrappers.toArray()[labelIndex]\n            : null;\n\n        if (!selectedLabel) {\n            return;\n        }\n\n        // The view length is the visible width of the tab labels.\n        const viewLength = this.tabListContainer.nativeElement.offsetWidth;\n\n        let labelBeforePos: number;\n        let labelAfterPos: number;\n\n        if (this.getLayoutDirection() === 'ltr') {\n            labelBeforePos = selectedLabel.getOffsetLeft();\n            labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n        } else {\n            labelAfterPos =\n                this.tabList.nativeElement.offsetWidth -\n                selectedLabel.getOffsetLeft();\n            labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n        }\n\n        const beforeVisiblePos = this.scrollDistance;\n        const afterVisiblePos = this.scrollDistance + viewLength;\n\n        if (labelBeforePos < beforeVisiblePos) {\n            // Scroll header to move label to the before direction\n            this.scrollDistance -=\n                beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n        } else if (labelAfterPos > afterVisiblePos) {\n            // Scroll header to move label to the after direction\n            this.scrollDistance +=\n                labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n        }\n    }\n\n    /**\n     * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n     * tab list is wider than the size of the header container, then the pagination controls should\n     * be shown.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    checkPaginationEnabled() {\n        const isEnabled =\n            this.tabList.nativeElement.scrollWidth >\n            this.elementRef.nativeElement.offsetWidth;\n\n        if (!isEnabled) {\n            this.scrollDistance = 0;\n        }\n\n        if (isEnabled !== this.showPaginationControls) {\n            this.changeDetectorRef.markForCheck();\n        }\n\n        this.showPaginationControls = isEnabled;\n    }\n\n    /**\n     * Evaluate whether the before and after controls should be enabled or disabled.\n     * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n     * before button. If the header is at the end of the list (scroll distance is equal to the\n     * maximum distance we can scroll), then disable the after button.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    checkScrollingControls() {\n        // Check if the pagination arrows should be activated.\n        this.disableScrollBefore = this.scrollDistance === 0;\n        this.disableScrollAfter =\n            this.scrollDistance === this.getMaxScrollDistance();\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n     * is equal to the difference in width between the tab list container and tab header container.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    getMaxScrollDistance(): number {\n        const lengthOfTabList = this.tabList.nativeElement.scrollWidth;\n        const viewLength = this.tabListContainer.nativeElement.offsetWidth;\n\n        return lengthOfTabList - viewLength || 0;\n    }\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n    AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef,\n    Component,\n    ComponentFactoryResolver,\n    ComponentRef,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Injector,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    Renderer2,\n    SimpleChanges,\n    TemplateRef,\n    Type,\n    ViewChild,\n    ViewContainerRef, ViewEncapsulation\n} from '@angular/core';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { Overlay, OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { McMeasureScrollbarService } from '@ptsecurity/mosaic/core';\nimport { Observable } from 'rxjs';\n\nimport { McModalControlService } from './modal-control.service';\nimport { McModalRef } from './modal-ref.class';\n// tslint:disable-next-line\nimport ModalUtil from './modal-util';\nimport { IModalButtonOptions, IModalOptions, ModalType, OnClickCallback } from './modal.type';\n\n\n// Duration when perform animations (ms)\nexport const MODAL_ANIMATE_DURATION = 200;\n\ntype AnimationState = 'enter' | 'leave' | null;\n\n@Component({\n    selector: 'mc-modal',\n    templateUrl: './modal.component.html',\n    styleUrls: ['./modal.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        '(keydown)': 'onKeyDown($event)'\n    }\n})\nexport class McModalComponent<T = any, R = any> extends McModalRef<T, R>\n    implements OnInit, OnChanges, AfterViewInit, OnDestroy, IModalOptions {\n\n    // tslint:disable-next-line:no-any\n    @Input() mcModalType: ModalType = 'default';\n    // If not specified, will use <ng-content>\n    @Input() mcContent: string | TemplateRef<{}> | Type<T>;\n    // available when mcContent is a component\n    @Input() mcComponentParams: T;\n    // Default Modal ONLY\n    @Input() mcFooter: string | TemplateRef<{}> | IModalButtonOptions<T>[];\n\n    @Input()\n    get mcVisible() { return this._mcVisible; }\n    set mcVisible(value) { this._mcVisible = value; }\n\n    _mcVisible = false;\n\n    @Output() mcVisibleChange = new EventEmitter<boolean>();\n\n    @Input() mcZIndex: number = 1000;\n    @Input() mcWidth: number | string = 480;\n    @Input() mcWrapClassName: string;\n    @Input() mcClassName: string;\n    @Input() mcStyle: object;\n    @Input() mcTitle: string | TemplateRef<{}>;\n    @Input() mcCloseByESC: boolean = true;\n\n    @Input()\n    get mcClosable() { return this._mcClosable; }\n    set mcClosable(value) { this._mcClosable = value; }\n    _mcClosable = true;\n\n    @Input()\n    get mcMask() { return this._mcMask; }\n    set mcMask(value) { this._mcMask = value; }\n    _mcMask = true;\n\n    @Input()\n    get mcMaskClosable() { return this._mcMaskClosable; }\n    set mcMaskClosable(value) { this._mcMaskClosable = value; }\n    _mcMaskClosable = true;\n\n    @Input() mcMaskStyle: object;\n    @Input() mcBodyStyle: object;\n\n    // Trigger when modal open(visible) after animations\n    @Output() mcAfterOpen = new EventEmitter<void>();\n    // Trigger when modal leave-animation over\n    @Output() mcAfterClose = new EventEmitter<R>();\n\n    // --- Predefined OK & Cancel buttons\n    @Input() mcOkText: string;\n    @Input() mcOkType = 'primary';\n\n    @Input()\n    get mcOkLoading() { return this._mcOkLoading; }\n    set mcOkLoading(value) { this._mcOkLoading = value; }\n    _mcOkLoading = false;\n\n    @Input() @Output() mcOnOk: EventEmitter<T> | OnClickCallback<T> = new EventEmitter<T>();\n    @Input() mcCancelText: string;\n\n    @Input()\n    get mcCancelLoading() { return this._mcCancelLoading; }\n    set mcCancelLoading(value) { this._mcCancelLoading = value; }\n    _mcCancelLoading = false;\n\n    @Input() @Output() mcOnCancel: EventEmitter<T> | OnClickCallback<T> = new EventEmitter<T>();\n\n    @ViewChild('modalContainer') modalContainer: ElementRef;\n    @ViewChild('bodyContainer', { read: ViewContainerRef }) bodyContainer: ViewContainerRef;\n    // Only aim to focus the ok button that needs to be auto focused\n    @ViewChild('autoFocusButtonOk', { read: ElementRef }) autoFocusButtonOk: ElementRef;\n\n    maskAnimationClassMap: object;\n    modalAnimationClassMap: object;\n    // The origin point that animation based on\n    transformOrigin = '0px 0px 0px';\n\n    // Observable alias for mcAfterOpen\n    get afterOpen(): Observable<void> {\n        return this.mcAfterOpen.asObservable();\n    }\n\n    // Observable alias for mcAfterClose\n    get afterClose(): Observable<R> {\n        return this.mcAfterClose.asObservable();\n    }\n\n    get okText(): string {\n        return this.mcOkText;\n    }\n\n    get cancelText(): string {\n        return this.mcCancelText;\n    }\n\n    // Indicate whether this dialog should hidden\n    get hidden(): boolean {\n        return !this.mcVisible && !this.animationState;\n    }\n\n    // Handle the reference when using mcContent as Component\n    private contentComponentRef: ComponentRef<T>;\n    // Current animation state\n    private animationState: AnimationState;\n    private container: HTMLElement | OverlayRef;\n\n    constructor(\n        private overlay: Overlay,\n        private renderer: Renderer2,\n        private cfr: ComponentFactoryResolver,\n        private elementRef: ElementRef,\n        private viewContainer: ViewContainerRef,\n        private mcMeasureScrollbarService: McMeasureScrollbarService,\n        private modalControl: McModalControlService,\n        private changeDetector: ChangeDetectorRef,\n        @Inject(DOCUMENT) private document: any) {\n\n        super();\n    }\n\n    @Input() mcGetContainer: HTMLElement | OverlayRef | (() => HTMLElement | OverlayRef) = () => this.overlay.create();\n\n    ngOnInit() {\n\n        // Create component along without View\n        if (this.isComponent(this.mcContent)) {\n            this.createDynamicComponent(this.mcContent as Type<T>);\n        }\n\n        // Setup default button options\n        if (this.isModalButtons(this.mcFooter)) {\n            this.mcFooter = this.formatModalButtons(this.mcFooter as IModalButtonOptions<T>[]);\n        }\n\n        // Place the modal dom to elsewhere\n        this.container = typeof this.mcGetContainer === 'function' ? this.mcGetContainer() : this.mcGetContainer;\n        if (this.container instanceof HTMLElement) {\n            this.container.appendChild(this.elementRef.nativeElement);\n        } else if (this.container instanceof OverlayRef) {\n            // NOTE: only attach the dom to overlay, the view container is not changed actually\n            this.container.overlayElement.appendChild(this.elementRef.nativeElement);\n        }\n\n        // Register modal when afterOpen/afterClose is stable\n        this.modalControl.registerModal(this);\n    }\n\n    // [NOTE] NOT available when using by service!\n    // Because ngOnChanges never be called when using by service,\n    // here we can't support \"mcContent\"(Component) etc. as inputs that initialized dynamically.\n    // BUT: User also can change \"mcContent\" dynamically to trigger UI changes\n    // (provided you don't use \bComponent that needs initializations)\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.mcVisible) {\n            // Do not trigger animation while initializing\n            this.handleVisibleStateChange(this.mcVisible, !changes.mcVisible.firstChange);\n        }\n    }\n\n    ngAfterViewInit() {\n        // If using Component, it is the time to attach View while bodyContainer is ready\n        if (this.contentComponentRef) {\n            this.bodyContainer.insert(this.contentComponentRef.hostView);\n        }\n\n        if (this.autoFocusButtonOk) {\n            (this.autoFocusButtonOk.nativeElement as HTMLButtonElement).focus();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.container instanceof OverlayRef) {\n            this.container.dispose();\n        }\n    }\n\n    open() {\n        this.changeVisibleFromInside(true);\n    }\n\n    close(result?: R) {\n        this.changeVisibleFromInside(false, result);\n    }\n\n    // Destroy equals Close\n    destroy(result?: R) {\n        this.close(result);\n    }\n\n    triggerOk() {\n        this.onClickOkCancel('ok');\n    }\n\n    triggerCancel() {\n        this.onClickOkCancel('cancel');\n    }\n\n    getInstance(): McModalComponent {\n        return this;\n    }\n\n    getContentComponentRef(): ComponentRef<T> {\n        return this.contentComponentRef;\n    }\n\n    getContentComponent(): T {\n        return this.contentComponentRef && this.contentComponentRef.instance;\n    }\n\n    getElement(): HTMLElement {\n        return this.elementRef && this.elementRef.nativeElement;\n    }\n\n    onClickMask($event: MouseEvent) {\n        if (\n            this.mcMask &&\n            this.mcMaskClosable &&\n            ($event.target as HTMLElement).classList.contains('mc-modal-wrap') &&\n            this.mcVisible\n        ) {\n            this.onClickOkCancel('cancel');\n        }\n    }\n\n    // tslint:disable-next-line\n    isModalType(type: ModalType): boolean {\n        return this.mcModalType === type;\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n\n        if (event.keyCode === ESCAPE && this.container && (this.container instanceof OverlayRef)) {\n\n            this.close();\n            event.preventDefault();\n        }\n    }\n\n    // AoT\n    onClickCloseBtn() {\n        if (this.mcVisible) {\n            this.onClickOkCancel('cancel');\n        }\n    }\n\n    // AoT\n    // tslint:disable-next-line\n    onClickOkCancel(type: 'ok' | 'cancel') {\n        const trigger = { ok: this.mcOnOk, cancel: this.mcOnCancel }[type];\n        const loadingKey = { ok: 'mcOkLoading', cancel: 'mcCancelLoading' }[type];\n\n        if (trigger instanceof EventEmitter) {\n            trigger.emit(this.getContentComponent());\n        } else if (typeof trigger === 'function') {\n\n            const result = trigger(this.getContentComponent());\n            // Users can return \"false\" to prevent closing by default\n            const caseClose = (doClose: boolean | void | {}) => (doClose !== false) && this.close(doClose as R);\n\n            if (isPromise(result)) {\n                this[loadingKey] = true;\n                const handleThen = (doClose) => {\n                    this[loadingKey] = false;\n                    caseClose(doClose);\n                };\n                (result as Promise<void>).then(handleThen).catch(handleThen);\n            } else {\n                caseClose(result);\n            }\n        }\n    }\n\n    // AoT\n    isNonEmptyString(value: {}): boolean {\n        return typeof value === 'string' && value !== '';\n    }\n\n    // AoT\n    isTemplateRef(value: {}): boolean {\n        return value instanceof TemplateRef;\n    }\n\n    // AoT\n    isComponent(value: {}): boolean {\n        return value instanceof Type;\n    }\n\n    // AoT\n    isModalButtons(value: {}): boolean {\n        return Array.isArray(value) && value.length > 0;\n    }\n\n    // Do rest things when visible state changed\n    private handleVisibleStateChange(visible: boolean, animation: boolean = true, closeResult?: R): Promise<any> {\n        // Hide scrollbar at the first time when shown up\n        if (visible) {\n            this.changeBodyOverflow(1);\n        }\n\n        return Promise\n            .resolve(animation && this.animateTo(visible))\n            // Emit open/close event after animations over\n            .then(() => {\n                if (visible) {\n                    this.mcAfterOpen.emit();\n                } else {\n                    this.mcAfterClose.emit(closeResult);\n                    // Show/hide scrollbar when animation is over\n                    this.changeBodyOverflow();\n                }\n            });\n    }\n\n    // Lookup a button's property, if the prop is a function, call & then return the result, otherwise, return itself.\n    // AoT\n    // tslint:disable-next-line\n    getButtonCallableProp(options: IModalButtonOptions<T>, prop: string): {} {\n        const value = options[prop];\n        const args: any[] = [];\n        if (this.contentComponentRef) {\n            args.push(this.contentComponentRef.instance);\n        }\n\n        return typeof value === 'function' ? value.apply(options, args) : value;\n    }\n\n    // On mcFooter's modal button click\n    // AoT\n    // tslint:disable-next-line\n    onButtonClick(button: IModalButtonOptions<T>) {\n        // Call onClick directly\n        const result = this.getButtonCallableProp(button, 'onClick');\n        if (isPromise(result)) {\n            button.loading = true;\n            (result as Promise<{}>).then(() => button.loading = false).catch(() => button.loading = false);\n        }\n    }\n\n    // Change mcVisible from inside\n    private changeVisibleFromInside(visible: boolean, closeResult?: R): Promise<void> {\n        if (this.mcVisible !== visible) {\n            // Change mcVisible value immediately\n            this.mcVisible = visible;\n            this.mcVisibleChange.emit(visible);\n\n            return this.handleVisibleStateChange(visible, true, closeResult);\n        }\n\n        return Promise.resolve();\n    }\n\n    private changeAnimationState(state: AnimationState) {\n        this.animationState = state;\n        if (state) {\n            this.maskAnimationClassMap = {\n                [`fade-${state}`]: true,\n                [`fade-${state}-active`]: true\n            };\n            this.modalAnimationClassMap = {\n                [`zoom-${state}`]: true,\n                [`zoom-${state}-active`]: true\n            };\n        } else {\n            // @ts-ignore\n            this.maskAnimationClassMap = this.modalAnimationClassMap = null;\n        }\n\n        if (this.contentComponentRef) {\n            this.contentComponentRef.changeDetectorRef.markForCheck();\n        } else {\n            this.changeDetector.markForCheck();\n        }\n    }\n\n    private animateTo(isVisible: boolean): Promise<any> {\n        // Figure out the lastest click position when shows up\n        if (isVisible) {\n            // [NOTE] Using timeout due to the document.click event is fired later than visible change,\n            // so if not postponed to next event-loop, we can't get the lastest click position\n            window.setTimeout(() => this.updateTransformOrigin());\n        }\n\n        this.changeAnimationState(isVisible ? 'enter' : 'leave');\n\n        // Return when animation is over\n        return new Promise((resolve) => window.setTimeout(() => {\n            this.changeAnimationState(null);\n            resolve();\n        }, MODAL_ANIMATE_DURATION));\n    }\n\n    private formatModalButtons(buttons: IModalButtonOptions<T>[]): IModalButtonOptions<T>[] {\n        return buttons.map((button) => {\n\n            return {\n                ...{\n                    type: 'default',\n                    size: 'default',\n                    autoLoading: true,\n                    show: true,\n                    loading: false,\n                    disabled: false\n                },\n                ...button\n            };\n        });\n    }\n\n    /**\n     * Create a component dynamically but not attach to any View\n     * (this action will be executed when bodyContainer is ready)\n     * @param component Component class\n     */\n    private createDynamicComponent(component: Type<T>) {\n        const factory = this.cfr.resolveComponentFactory(component);\n        const childInjector = Injector.create({\n            providers: [{provide: McModalRef, useValue: this}],\n            parent: this.viewContainer.parentInjector\n        });\n\n        this.contentComponentRef = factory.create(childInjector);\n\n        if (this.mcComponentParams) {\n            Object.assign(this.contentComponentRef.instance, this.mcComponentParams);\n        }\n\n        // Do the first change detection immediately\n        // (or we do detection at ngAfterViewInit, multi-changes error will be thrown)\n        this.contentComponentRef.changeDetectorRef.detectChanges();\n\n\n    }\n\n    // Update transform-origin to the last click position on document\n    private updateTransformOrigin() {\n        const modalElement = this.modalContainer.nativeElement as HTMLElement;\n        const lastPosition = ModalUtil.getLastClickPosition();\n\n        if (lastPosition) {\n            // tslint:disable-next-line\n            this.transformOrigin = `${lastPosition.x - modalElement.offsetLeft}px ${lastPosition.y - modalElement.offsetTop}px 0px`;\n        }\n    }\n\n    /**\n     * Take care of the body's overflow to decide the existense of scrollbar\n     * @param plusNum The number that the openModals.length will increase soon\n     */\n    private changeBodyOverflow(plusNum: number = 0) {\n        const openModals = this.modalControl.openModals;\n\n        if (openModals.length + plusNum > 0) {\n            // tslint:disable-next-line\n            this.renderer.setStyle(this.document.body, 'padding-right', `${this.mcMeasureScrollbarService.scrollBarWidth}px`);\n            this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n        } else {\n            this.renderer.removeStyle(this.document.body, 'padding-right');\n            this.renderer.removeStyle(this.document.body, 'overflow');\n        }\n    }\n}\n\n////////////\n\nfunction isPromise(obj: {} | void): boolean {\n    // tslint:disable-next-line\n    return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof (obj as Promise<{}>).then === 'function' && typeof (obj as Promise<{}>).catch === 'function';\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n\n@Pipe({\n    name: 'toCssUnit'\n})\nexport class CssUnitPipe implements PipeTransform {\n    transform(value: number | string, defaultUnit: string = 'px'): string {\n        const formatted = +value;\n\n        return isNaN(formatted) ? `${value}` : `${formatted}${defaultUnit}`;\n    }\n}\n","import { ComponentRef, Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { Overlay, OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal } from '@ptsecurity/cdk/portal';\n\nimport { McModalControlService } from './modal-control.service';\nimport { McModalRef } from './modal-ref.class';\nimport { McModalComponent } from './modal.component';\nimport { ConfirmType, IModalOptions, IModalOptionsForService } from './modal.type';\n\n\n// A builder used for managing service creating modals\nexport class ModalBuilderForService {\n\n    // Modal ComponentRef, \"null\" means it has been destroyed\n    private modalRef: ComponentRef<McModalComponent> | null;\n    private overlayRef: OverlayRef;\n\n    constructor(private overlay: Overlay, options: IModalOptionsForService = {}) {\n        this.createModal();\n\n        if (!('mcGetContainer' in options)) {\n            options.mcGetContainer = undefined;\n        }\n\n        this.changeProps(options);\n        this.modalRef!.instance.open();\n        this.modalRef!.instance.mcAfterClose.subscribe(() => this.destroyModal());\n\n        this.overlayRef.keydownEvents()\n            // @ts-ignore\n            .pipe(filter((event: KeyboardEvent) => {\n                return event.keyCode === ESCAPE && options.mcCloseByESC;\n            }))\n            .subscribe(() => this.modalRef!.instance.close());\n    }\n\n    getInstance(): McModalComponent | null {\n        return this.modalRef && this.modalRef.instance;\n    }\n\n    destroyModal(): void {\n        if (this.modalRef) {\n            this.overlayRef.dispose();\n            this.modalRef = null;\n        }\n    }\n\n    private changeProps(options: IModalOptions): void {\n        if (this.modalRef) {\n            // here not limit user's inputs at runtime\n            Object.assign(this.modalRef.instance, options);\n        }\n    }\n\n    // Create component to ApplicationRef\n    private createModal(): void {\n        this.overlayRef = this.overlay.create();\n        this.modalRef = this.overlayRef.attach(new ComponentPortal(McModalComponent));\n    }\n}\n\n@Injectable()\nexport class McModalService {\n    // Track of the current close modals (we assume invisible is close this time)\n    get openModals(): McModalRef[] {\n        return this.modalControl.openModals;\n    }\n\n    get afterAllClose(): Observable<void> {\n        return this.modalControl.afterAllClose.asObservable();\n    }\n\n    constructor(\n        private overlay: Overlay,\n        private modalControl: McModalControlService) {\n    }\n\n    // Closes all of the currently-open dialogs\n    closeAll(): void {\n        this.modalControl.closeAll();\n    }\n\n    create<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n\n        if (typeof options.mcOnCancel !== 'function') {\n            // Leave a empty function to close this modal by default\n            // tslint:disable-next-line\n            options.mcOnCancel = () => {};\n        }\n\n        if (!('mcCloseByESC' in options)) {\n            options.mcCloseByESC = true;\n        }\n\n\n        if (!('mcWidth' in options)) {\n            // tslint:disable-next-line\n            options.mcWidth = 480;\n        }\n\n        return new ModalBuilderForService(this.overlay, options).getInstance()!;\n    }\n\n    confirm<T>(options: IModalOptionsForService<T> = {}, confirmType: ConfirmType = 'confirm'): McModalRef<T> {\n        if ('mcFooter' in options) {\n            console.warn(`The Confirm-Modal doesn't support \"mcFooter\", this property will be ignored.`);\n        }\n\n        // NOTE: only support function currently by calling confirm()\n        if (typeof options.mcOnOk !== 'function') {\n            // Leave a empty function to close this modal by default\n            // tslint:disable-next-line\n            options.mcOnOk = () => {};\n        }\n\n        options.mcModalType = 'confirm';\n        options.mcClassName = `mc-confirm mc-confirm-${confirmType} ${options.mcClassName || ''}`;\n        options.mcMaskClosable = false;\n\n        return this.create(options);\n    }\n\n    success<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n        return this.simpleConfirm(options, 'success');\n    }\n\n    delete<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n        return this.simpleConfirm(options, 'warn');\n    }\n\n    private simpleConfirm<T>(options: IModalOptionsForService<T> = {}, confirmType: ConfirmType): McModalRef<T> {\n        // Remove the Cancel button if the user not specify a Cancel button\n        if (!('mcCancelText' in options)) {\n            // @ts-ignore\n            options.mcCancelText = null;\n        }\n\n        return this.confirm(options, confirmType);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { McButtonModule } from '@ptsecurity/mosaic/button';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { CssUnitPipe } from './css-unit.pipe';\nimport { McModalControlService } from './modal-control.service';\nimport { McModalComponent } from './modal.component';\nimport { McModalService } from './modal.service';\n\n\n@NgModule({\n    imports: [ CommonModule, OverlayModule, McButtonModule, McIconModule ],\n    exports: [ McModalComponent ],\n    declarations: [ McModalComponent, CssUnitPipe ],\n    entryComponents: [ McModalComponent ],\n    providers: [ McModalControlService, McModalService ]\n})\nexport class McModalModule { }\n","import { fromEvent, Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nimport {\n    AfterViewInit,\n    Component, Directive,\n    ElementRef,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    ViewEncapsulation,\n    ContentChild,\n    TemplateRef,\n    ChangeDetectorRef,\n    ChangeDetectionStrategy,\n    ViewChild\n} from '@angular/core';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { SPACE } from '@ptsecurity/cdk/keycodes';\nimport { Platform } from '@ptsecurity/cdk/platform';\nimport { CanDisable, CanDisableCtor, mixinDisabled } from '@ptsecurity/mosaic/core';\n\n\nconst COLLAPSED_CLASS: string = 'mc-navbar-collapsed-title';\nconst MC_ICON = 'mc-icon';\nconst MC_NAVBAR = 'mc-navbar';\nconst MC_NAVBAR_CONTAINER = 'mc-navbar-container';\nconst MC_NAVBAR_ITEM = 'mc-navbar-item';\nconst MC_NAVBAR_BRAND = 'mc-navbar-brand';\nconst MC_NAVBAR_TITLE = 'mc-navbar-title';\nconst MC_NAVBAR_LOGO = 'mc-navbar-logo';\n\nexport type McNavbarContainerPositionType = 'left' | 'right';\n\nexport interface IMcNavbarDropdownItem {\n    link?: string;\n    text: string;\n}\n\n@Directive({\n    selector: MC_NAVBAR_LOGO,\n    host: {\n        class: MC_NAVBAR_LOGO\n    }\n})\nexport class McNavbarLogo {}\n\n@Directive({\n    selector: MC_NAVBAR_BRAND,\n    host: {\n        class: MC_NAVBAR_BRAND\n    }\n})\nexport class McNavbarBrand {}\n\n@Directive({\n    selector: MC_NAVBAR_TITLE,\n    host: {\n        class: MC_NAVBAR_TITLE\n    }\n})\nexport class McNavbarTitle {}\n\nexport class McNavbarItemBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McNavbarMixinBase: CanDisableCtor & typeof McNavbarItemBase = mixinDisabled(McNavbarItemBase);\n\n@Component({\n    selector: MC_NAVBAR_ITEM,\n    template: `\n        <a\n            [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\n            (click)=\"handleClickByItem()\"\n            (keydown)=\"handleKeydown($event)\"\n            class=\"mc-navbar-item\"\n        >\n            <ng-content></ng-content>\n            <i *ngIf=\"hasDropdownContent\" mc-icon=\"mc-angle-down-M_16\"></i>\n        </a>\n        <ul\n            #dropdownContent\n            *ngIf=\"hasDropdownContent\"\n            [ngClass]=\"{ 'is-collapsed': isCollapsed }\"\n            class=\"mc-navbar-dropdown\"\n        >\n            <li\n                *ngFor=\"let item of dropdownItems\"\n                (click)=\"handleClickByDropdownItem()\"\n                class=\"mc-navbar-dropdown-item\"\n            >\n                <ng-container *ngIf=\"dropdownItemTmpl\">\n                    <ng-container *ngTemplateOutlet=\"dropdownItemTmpl; context: { $implicit: item }\"></ng-container>\n                </ng-container>\n                <a\n                    *ngIf=\"!dropdownItemTmpl\"\n                    [attr.href]=\"item.link\"\n                    [ngClass]=\"{ 'is-active': isActiveDropdownLink(item.link) }\"\n                    class=\"mc-navbar-dropdown-link\"\n                >{{ item.text }}</a>\n            </li>\n        </ul>\n    `,\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': '-1'\n    }\n})\nexport class McNavbarItem extends _McNavbarMixinBase implements OnInit, AfterViewInit, OnDestroy, CanDisable {\n\n    @Input()\n    tabIndex: number = 0;\n\n    @Input()\n    dropdownItems: IMcNavbarDropdownItem[] = [];\n\n    @Input()\n    set collapsedTitle(value: string) {\n        this.elementRef.nativeElement.setAttribute('computedTitle', encodeURI(value));\n    }\n\n    @ContentChild('dropdownItemTmpl', { read: TemplateRef })\n    dropdownItemTmpl: TemplateRef<IMcNavbarDropdownItem>;\n\n    @ViewChild('dropdownContent', { read: ElementRef })\n    dropdownContent: ElementRef;\n\n    get hasDropdownContent() {\n        return this.dropdownItems.length > 0;\n    }\n\n    isCollapsed: boolean = true;\n\n    private _subscription: Subscription = new Subscription();\n    private _focusMonitor$: Observable<FocusOrigin>;\n\n    private get _dropdownElements(): HTMLElement[] {\n        return this.dropdownContent ? this.dropdownContent.nativeElement.querySelectorAll('li > *') : [];\n    }\n\n    constructor(\n        public  elementRef: ElementRef,\n        private _focusMonitor: FocusMonitor,\n        private _platform: Platform,\n        private _cdRef: ChangeDetectorRef\n    ) {\n        super(elementRef);\n    }\n\n    ngOnInit() {\n        this.denyClickIfDisabled();\n\n        this._focusMonitor$ = this._focusMonitor.monitor(this.elementRef.nativeElement, true);\n\n        if (this.hasDropdownContent) {\n            this.listenClickOutside();\n        }\n    }\n\n    ngAfterViewInit() {\n        if (!this.hasDropdownContent) {\n            return;\n        }\n\n        this.startListenFocusDropdownItems();\n    }\n\n    ngOnDestroy() {\n        this._subscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n        this.stopListenFocusDropdownItems();\n    }\n\n    isActiveDropdownLink(link: string): boolean {\n        if (!this._platform.isBrowser) {\n            return false;\n        }\n\n        return window.location.href.indexOf(link) >= 0;\n    }\n\n    handleClickByItem() {\n        this.toggleDropdown();\n    }\n\n    handleKeydown($event: KeyboardEvent) {\n        const isNavbarItem = ($event.target as HTMLElement).classList.contains(MC_NAVBAR_ITEM);\n\n        // tslint:disable-next-line\n        if (this.hasDropdownContent && $event.keyCode === SPACE && isNavbarItem) {\n            this.toggleDropdown();\n        }\n    }\n\n    handleClickByDropdownItem() {\n        this.forceCloseDropdown();\n    }\n\n    private listenClickOutside() {\n        this._subscription.add(\n            this._focusMonitor$.subscribe((origin) => {\n                if (origin === null) {\n                    this.forceCloseDropdown();\n                }\n            })\n        );\n    }\n\n    private toggleDropdown() {\n        this.isCollapsed = !this.isCollapsed;\n    }\n\n    private forceCloseDropdown() {\n        this.isCollapsed = true;\n        this._cdRef.detectChanges();\n    }\n\n    private startListenFocusDropdownItems() {\n        this._dropdownElements.forEach((el) => {\n            this._focusMonitor.monitor(el, true);\n        });\n    }\n\n    private stopListenFocusDropdownItems() {\n        this._dropdownElements.forEach((el) => {\n            this._focusMonitor.stopMonitoring(el);\n        });\n    }\n\n    // This method is required due to angular 2 issue https://github.com/angular/angular/issues/11200\n    private denyClickIfDisabled() {\n        const events: Event[] = this.elementRef.nativeElement.eventListeners('click');\n\n        events.forEach((event) => this.elementRef.nativeElement.removeEventListener('click', event));\n\n        this.elementRef.nativeElement.addEventListener('click', (event: MouseEvent) => {\n            if (this.elementRef.nativeElement.hasAttribute('disabled')) {\n                event.stopImmediatePropagation();\n            }\n        }, true);\n\n        events.forEach((event) => this.elementRef.nativeElement.addEventListener('click', event));\n    }\n}\n\n@Directive({\n    selector: MC_NAVBAR_CONTAINER\n})\nexport class McNavbarContainer {\n    @Input()\n    position: McNavbarContainerPositionType = 'left';\n\n    @HostBinding('class')\n    get cssClasses(): string {\n        return this.position === 'left' ? 'mc-navbar-left' : 'mc-navbar-right';\n    }\n}\n\nclass CollapsibleItem {\n    private _collapsed: boolean = false;\n\n    constructor(\n        public element: HTMLElement,\n        public width: number\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        this._collapsed = collapsed;\n\n        this.updateCollapsedClass();\n    }\n\n    private updateCollapsedClass() {\n        if (this._collapsed) {\n            this.element.classList.add(COLLAPSED_CLASS);\n        } else {\n            this.element.classList.remove(COLLAPSED_CLASS);\n        }\n\n    }\n}\n\nclass CachedItemWidth {\n\n    get canCollapse(): boolean {\n        return this.itemsForCollapse.length > 0;\n    }\n\n    private _collapsedItemsWidth: number;\n\n    get collapsedItemsWidth(): number {\n        if (this._collapsedItemsWidth !== undefined) {\n            return this._collapsedItemsWidth;\n        }\n\n        this.calculateAndCacheCollapsedItemsWidth();\n\n        return this._collapsedItemsWidth;\n    }\n\n    constructor(\n        public element: HTMLElement,\n        public width: number,\n        public itemsForCollapse: CollapsibleItem[] = []\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        if (this.itemsForCollapse.length > 0) {\n            this.updateTitle(collapsed);\n        }\n\n        this.itemsForCollapse.forEach((item) => item.processCollapsed(collapsed));\n    }\n\n    private calculateAndCacheCollapsedItemsWidth() {\n        this._collapsedItemsWidth = this.itemsForCollapse\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getTitle(): string {\n        const computedTitle = this.element.getAttribute('computedTitle');\n\n        return computedTitle\n            ? decodeURI(computedTitle)\n            : (this.itemsForCollapse.length > 0 ? this.itemsForCollapse[0].element.innerText : '');\n    }\n\n    private updateTitle(collapsed: boolean) {\n        if (collapsed) {\n            this.element.setAttribute('title', this.getTitle());\n        } else {\n            this.element.removeAttribute('title');\n        }\n    }\n}\n\n\n@Component({\n    selector: MC_NAVBAR,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    template: `\n        <nav class=\"mc-navbar\">\n            <ng-content select=\"[${MC_NAVBAR_CONTAINER}],${MC_NAVBAR_CONTAINER}\"></ng-content>\n        </nav>\n    `,\n    styleUrls: ['./navbar.css'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class McNavbar implements AfterViewInit, OnDestroy {\n\n    private readonly forceRecalculateItemsWidth: boolean = false;\n    private readonly resizeDebounceInterval: number = 100;\n    private readonly firstLevelElement: string = MC_NAVBAR_CONTAINER;\n    private readonly secondLevelElements: string[] = [\n        MC_NAVBAR_ITEM,\n        MC_NAVBAR_BRAND,\n        MC_NAVBAR_TITLE\n    ];\n\n    private _totalItemsWidths: number;\n    private _itemsWidths: CachedItemWidth[];\n\n    private get maxAllowedWidth(): number {\n        return this._elementRef.nativeElement.querySelector('nav').getBoundingClientRect().width;\n    }\n\n    private get itemsWidths(): CachedItemWidth[] {\n        if (this._itemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._itemsWidths;\n        }\n\n        this.calculateAndCacheItemsWidth();\n\n        return this._itemsWidths;\n    }\n\n    private get totalItemsWidth(): number {\n        if (this._totalItemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._totalItemsWidths;\n        }\n\n        this.calculateAndCacheTotalItemsWidth();\n\n        return this._totalItemsWidths;\n    }\n\n    private _resizeSubscription: Subscription;\n\n    constructor(\n        private _elementRef: ElementRef\n    ) {\n        const resizeObserver = fromEvent(window, 'resize')\n            .pipe(debounceTime(this.resizeDebounceInterval));\n\n        this._resizeSubscription = resizeObserver.subscribe(this.updateCollapsed.bind(this));\n    }\n\n    updateCollapsed(): void {\n        let collapseDelta = this.totalItemsWidth - this.maxAllowedWidth;\n\n        for (let i = this.itemsWidths.length - 1; i >= 0; i--) {\n            const item = this.itemsWidths[i];\n\n            if (!item.canCollapse) {\n                continue;\n            }\n\n            item.processCollapsed(collapseDelta > 0);\n            collapseDelta -= item.collapsedItemsWidth;\n        }\n    }\n\n    ngAfterViewInit(): void {\n        // Note: this wait is required for loading and rendering fonts for icons;\n        // unfortunately we cannot control font rendering\n        setTimeout(() => this.updateCollapsed(), 0);\n    }\n\n    ngOnDestroy() {\n        this._resizeSubscription.unsubscribe();\n    }\n\n    private calculateAndCacheTotalItemsWidth() {\n        this._totalItemsWidths = this.itemsWidths\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getOuterElementWidth(element: HTMLElement): number {\n        const baseWidth  = element.getBoundingClientRect().width;\n        const marginRight = parseInt(getComputedStyle(element).getPropertyValue('margin-right'));\n        const marginLeft = parseInt(getComputedStyle(element).getPropertyValue('margin-left'));\n\n        return baseWidth + marginRight + marginLeft;\n    }\n\n    private calculateAndCacheItemsWidth() {\n        const allItemsSelector = this.secondLevelElements\n            .map((e: string) => `${this.firstLevelElement}>${e}`);\n        const allItems: HTMLElement[] = Array.from(this._elementRef.nativeElement.querySelectorAll(allItemsSelector));\n\n        this._itemsWidths = allItems\n            .map((el) => new CachedItemWidth(el, this.getOuterElementWidth(el), this.getItemsForCollapse(el)));\n    }\n\n    private getItemsForCollapse(element: HTMLElement): CollapsibleItem[] {\n        const icon = element.querySelector(`[${MC_ICON}],${MC_NAVBAR_LOGO},[${MC_NAVBAR_LOGO}]`);\n\n        if (!icon) {\n            return [];\n        }\n\n        return Array.from(element.querySelectorAll(MC_NAVBAR_TITLE))\n            .map((el) => new CollapsibleItem(<HTMLElement> el, el.getBoundingClientRect().width));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport {\n    McNavbar,\n    McNavbarContainer,\n    McNavbarItem,\n    McNavbarTitle,\n    McNavbarBrand,\n    McNavbarLogo\n} from './navbar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        McIconModule\n    ],\n    exports: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ],\n    declarations: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ]\n})\nexport class McNavbarModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, CanColorCtor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressBarMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressBarBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressBarMixinBase:\n    CanColorCtor &\n    typeof McProgressBarBase =\n        mixinColor(McProgressBarBase);\n\n@Component({\n    selector: 'mc-progress-bar',\n    templateUrl: './progress-bar.component.html',\n    styleUrls: ['./progress-bar.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-bar',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressBar extends _McProgressBarMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-bar-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressBarMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McProgressBar\n} from './progress-bar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressBar\n    ],\n    declarations: [\n        McProgressBar\n    ]\n})\nexport class McProgressBarModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, CanColorCtor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressSpinnerBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressSpinnerMixinBase:\n    CanColorCtor &\n    typeof McProgressSpinnerBase =\n        mixinColor(McProgressSpinnerBase);\n\nconst MAX_DASH_ARRAY = 273;\n\n@Component({\n    selector: 'mc-progress-spinner',\n    templateUrl: './progress-spinner.component.html',\n    styleUrls: ['./progress-spinner.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-spinner',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressSpinner extends _McProgressSpinnerMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-spinner-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressSpinnerMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n\n    get dashOffsetPercent(): string {\n        return `${MAX_DASH_ARRAY - this.percentage * MAX_DASH_ARRAY}%`;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McProgressSpinner } from './progress-spinner.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressSpinner\n    ],\n    declarations: [\n        McProgressSpinner\n    ]\n})\nexport class McProgressSpinnerModule {}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef,\n    Input, OnDestroy, OnInit, Optional, Output, QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { UniqueSelectionDispatcher } from '@ptsecurity/cdk/collections';\n\nimport {\n    CanColor, CanColorCtor,\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/** Change event object emitted by McRadio. */\nexport class McRadioChange {\n    constructor(\n        /** The McRadioButton that emits the change event. */\n        public source: McRadioButton,\n        /** The value of the McRadioButton. */\n        public value: any) {}\n}\n\n// Boilerplate for applying mixins to McRadioGroup.\n/** @docs-private */\nexport class McRadioGroupBase {}\nexport const _McRadioGroupMixinBase: CanDisableCtor & typeof McRadioGroupBase = mixinDisabled(McRadioGroupBase);\n\n/**\n * Provider Expression that allows mc-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McRadioGroup),\n    multi: true\n};\n\n@Directive({\n    selector: 'mc-radio-group',\n    exportAs: 'mcRadioGroup',\n    providers: [MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n    host: {\n        role: 'radiogroup',\n        class: 'mc-radio-group'\n    },\n    inputs: ['disabled']\n})\nexport class McRadioGroup extends _McRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    @Input()\n    get name(): string { return this._name; }\n    set name(value: string) {\n        this._name = value;\n        this.updateRadioButtonNames();\n    }\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this.markRadiosForCheck();\n    }\n\n    /** Value of the radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n\n            this.updateSelectedRadioFromValue();\n            this.checkSelectedRadioButton();\n        }\n    }\n\n    /** Whether the radio button is selected. */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: McRadioButton | null) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this.checkSelectedRadioButton();\n    }\n\n    /** Whether the radio group is disabled */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /** Whether the radio group is required */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** Child radio buttons. */\n    @ContentChildren(forwardRef(() => McRadioButton), { descendants: true })\n    _radios: QueryList<McRadioButton>;\n\n    /**\n     * Selected value for group. Should equal the value of the selected radio button if there *is*\n     * a corresponding radio button with a matching value. If there is *not* such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    private _value: any = null;\n\n    /** The HTML name attribute applied to radio buttons in this group. */\n    private _name: string = `mc-radio-group-${nextUniqueId++}`;\n\n    /** The currently selected radio button. Should match value. */\n    private _selected: McRadioButton | null = null;\n\n    /** Whether the `value` has been set to its initial value. */\n    private _isInitialized: boolean = false;\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    private _labelPosition: 'before' | 'after' = 'after';\n\n    /** Whether the radio group is disabled. */\n    private _disabled: boolean = false;\n\n    /** Whether the radio group is required. */\n    private _required: boolean = false;\n\n    constructor(\n        private readonly _changeDetector: ChangeDetectorRef\n    ) {\n        super();\n    }\n\n    /** The method to be called in order to update ngModel */\n    // tslint:disable-next-line\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @docs-private\n     */\n    // tslint:disable-next-line\n    onTouched: () => any = () => {};\n\n    checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on McRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the McRadioGroup.\n        this._isInitialized = true;\n    }\n\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        if (this._isInitialized) {\n            this.change.emit(new McRadioChange(this._selected!, this._value));\n        }\n    }\n\n    markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach((radio) => radio.markForCheck());\n        }\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n\n    private updateRadioButtonNames(): void {\n        if (this._radios) {\n            this._radios.forEach((radio) => {\n                radio.name = this.name;\n            });\n        }\n    }\n\n    /** Updates the `selected` radio button from the internal _value state. */\n    private updateSelectedRadioFromValue(): void {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n        if (this._radios != null && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach((radio) => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n}\n\n\n// Boilerplate for applying mixins to McRadioButton.\n/** @docs-private */\nexport class McRadioButtonBase {\n    // Since the disabled property is manually defined for the McRadioButton and isn't set up in\n    // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n    // defined to properly work.\n    disabled: boolean;\n\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McRadioButtonMixinBase:\n    CanColorCtor &\n    HasTabIndexCtor &\n    typeof McRadioButtonBase =\n        mixinColor(mixinTabIndex(McRadioButtonBase));\n\n\n@Component({\n    selector: 'mc-radio-button',\n    templateUrl: 'radio.component.html',\n    styleUrls: ['radio.css'],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    exportAs: 'mcRadioButton',\n    host: {\n        class: 'mc-radio-button',\n        '[attr.id]': 'id',\n        '[class.mc-checked]': 'checked',\n        '[class.mc-disabled]': 'disabled',\n        '(focus)': '_inputElement.nativeElement.focus()'\n    }\n})\nexport class McRadioButton extends _McRadioButtonMixinBase\n    implements OnInit, OnDestroy, CanColor, HasTabIndex {\n\n    private readonly _uniqueId: string = `mc-radio-${++nextUniqueId}`;\n\n    /* tslint:disable:member-ordering */\n\n    /** The unique ID for the radio button. */\n    @Input() id: string = this._uniqueId;\n\n    /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n    @Input() name: string;\n\n    /** Used to set the 'aria-label' attribute on the underlying input element. */\n    @Input('aria-label') ariaLabel: string;\n\n    /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n    @Input('aria-labelledby') ariaLabelledby: string;\n\n    /** The 'aria-describedby' attribute is read after the element's label and field type. */\n    @Input('aria-describedby') ariaDescribedby: string;\n\n    /** Whether this radio button is checked. */\n    @Input()\n    get checked(): boolean { return this._checked; }\n    set checked(value: boolean) {\n        const newCheckedState = toBoolean(value);\n\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** The value of this radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(value: any) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup != null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n\n    /** Whether the radio button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n    }\n    set disabled(value: boolean) {\n        const newDisabledState = toBoolean(value);\n\n        if (this._disabled !== newDisabledState) {\n\n            this._disabled = newDisabledState;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** Whether the radio button is required. */\n    @Input()\n    get required(): boolean {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    private _labelPosition: 'before' | 'after';\n\n    /** The native `<input type=radio>` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** The parent radio group. May or may not be present. */\n    radioGroup: McRadioGroup;\n\n    @Input()\n    isFocused: boolean = false;\n\n    /** ID of the native input element inside `<mc-radio-button>` */\n    get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n    /** Whether this radio is checked. */\n    private _checked: boolean = false;\n\n    /** Whether this radio is disabled. */\n    private _disabled: boolean;\n\n    /** Whether this radio is required. */\n    private _required: boolean;\n\n    /** Value assigned to this radio. */\n    private _value: any = null;\n\n    /** Unregister function for _radioDispatcher */\n    // tslint:disable-next-line\n    private readonly removeUniqueSelectionListener: () => void = () => {};\n\n    constructor(\n        @Optional() radioGroup: McRadioGroup,\n        elementRef: ElementRef,\n        private readonly _changeDetector: ChangeDetectorRef,\n        private readonly _radioDispatcher: UniqueSelectionDispatcher\n    ) {\n\n        super(elementRef);\n\n        this.radioGroup = radioGroup;\n\n        this.removeUniqueSelectionListener =\n            _radioDispatcher.listen((id: string, name: string) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n\n    ngOnDestroy() {\n        this.removeUniqueSelectionListener();\n    }\n\n    /** Focuses the radio button. */\n    // tslint:disable-next-line\n    focus(): void {}\n\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n\n    onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n\n    onInputChange(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this.emitChangeEvent();\n\n        if (this.radioGroup) {\n            this.radioGroup.controlValueAccessorChangeFn(this.value);\n            this.radioGroup.touch();\n            if (groupValueChanged) {\n                this.radioGroup.emitChangeEvent();\n            }\n        }\n    }\n\n    /** Dispatch change event with current value. */\n    private emitChangeEvent(): void {\n        this.change.emit(new McRadioChange(this, this._value));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McRadioButton, McRadioGroup } from './radio.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule],\n    exports: [McRadioGroup, McRadioButton],\n    declarations: [McRadioGroup, McRadioButton]\n})\nexport class McRadioModule {\n}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    Output,\n    QueryList,\n    ViewEncapsulation,\n    ChangeDetectorRef,\n    Inject,\n    OnDestroy,\n    OnInit,\n    ViewChild\n} from '@angular/core';\n\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { Subscription } from 'rxjs';\n\nimport { FocusKeyManager, IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { END, ENTER, HOME, PAGE_DOWN, PAGE_UP, SPACE } from '@ptsecurity/cdk/keycodes';\n\nimport {\n    McLine,\n    McLineSetter,\n    CanDisable,\n    mixinDisabled,\n    toBoolean, CanDisableCtor\n} from '@ptsecurity/mosaic/core';\n\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n    exportAs: 'mcListOption',\n    selector: 'mc-list-option',\n    host: {\n        tabindex: '-1',\n\n        class: 'mc-list-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': '_hasFocus',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()',\n        '(click)': '_handleClick()'\n    },\n    templateUrl: 'list-option.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListOption implements AfterContentInit, OnDestroy, OnInit, IFocusableOption {\n    _hasFocus: boolean = false;\n\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    @ViewChild('text') _text: ElementRef;\n\n    // Whether the label should appear before or after the checkbox. Defaults to 'after'\n    @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n    @Input() value: any;\n\n    @Input()\n    get disabled() {\n        return this._disabled || (this.listSelection && this.listSelection.disabled);\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    @Input()\n    get selected(): boolean {\n        return this.listSelection.selectedOptions && this.listSelection.selectedOptions.isSelected(this) || false;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            this.listSelection._reportValueChange();\n        }\n    }\n\n    private _lineSetter: McLineSetter;\n    private _selected = false;\n    private _disabled = false;\n\n    constructor(\n        private _element: ElementRef,\n        private _changeDetector: ChangeDetectorRef,\n        @Inject(forwardRef(() => McListSelection))\n        public listSelection: McListSelection\n    ) {}\n\n    ngOnInit() {\n        if (this._selected) {\n            // List options that are selected at initialization can't be reported properly to the form\n            // control. This is because it takes some time until the selection-list knows about all\n            // available options. Also it can happen that the ControlValueAccessor has an initial value\n            // that should be used instead. Deferring the value change report to the next tick ensures\n            // that the form control value is not being overwritten.\n            const wasSelected = this._selected;\n\n            Promise.resolve().then(() => {\n                if (this._selected || wasSelected) {\n                    this.selected = true;\n                    this._changeDetector.markForCheck();\n                }\n            });\n        }\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    ngOnDestroy(): void {\n        if (this.selected) {\n            // We have to delay this until the next tick in order\n            // to avoid changed after checked errors.\n            Promise.resolve().then(() => this.selected = false);\n        }\n\n        this.listSelection._removeOptionFromList(this);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    focus(): void {\n        this._element.nativeElement.focus();\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    getLabel() {\n        return this._text ? this._text.nativeElement.textContent : '';\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.listSelection.selectedOptions) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.listSelection.selectedOptions.select(this);\n        } else {\n            this.listSelection.selectedOptions.deselect(this);\n        }\n\n        this._changeDetector.markForCheck();\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    _handleClick() {\n        if (this.disabled) { return; }\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    _handleFocus() {\n        if (this.disabled || this._hasFocus) { return; }\n\n        this._hasFocus = true;\n    }\n\n    _handleBlur() {\n        this._hasFocus = false;\n\n        this.listSelection._onTouched();\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n\n\nexport const MC_SELECTION_LIST_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McListSelection),\n    multi: true\n};\n\n// Change event that is being fired whenever the selected state of an option changes. */\nexport class McListSelectionChange {\n    constructor(\n        // Reference to the selection list that emitted the event.\n        public source: McListSelection,\n        // Reference to the option that has been changed.\n        public option: McListOption\n    ) {}\n}\n\n\nexport class McListSelectionBase {}\n\nexport const _McListSelectionMixinBase: CanDisableCtor & typeof McListSelectionBase\n    = mixinDisabled(McListSelectionBase);\n\n@Component({\n    exportAs: 'mcListSelection',\n    selector: 'mc-list-selection',\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'tabIndex'],\n    host: {\n        class: 'mc-list-selection',\n        '[tabIndex]': 'tabIndex',\n        '(focus)': 'focus()',\n        '(blur)': '_onTouched()',\n        '(keydown)': '_onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    providers: [MC_SELECTION_LIST_VALUE_ACCESSOR],\n    preserveWhitespaces: false\n})\nexport class McListSelection extends _McListSelectionMixinBase implements\n    IFocusableOption, CanDisable, AfterContentInit, ControlValueAccessor {\n\n    _keyManager: FocusKeyManager<McListOption>;\n\n    // The option components contained within this selection-list.\n    @ContentChildren(McListOption) options: QueryList<McListOption>;\n\n    tabIndex: number;\n\n    autoSelect: boolean;\n    noUnselect: boolean;\n    multiple: boolean;\n\n    // todo temporary solution\n    withShift: boolean;\n    withCtrl: boolean;\n\n    @Input() horizontal: boolean = false;\n\n    // Emits a change event whenever the selected state of an option changes.\n    @Output() readonly selectionChange: EventEmitter<McListSelectionChange> = new EventEmitter<McListSelectionChange>();\n\n    selectedOptions: SelectionModel<McListOption>;\n\n    // Used for storing the values that were assigned before the options were initialized.\n    private _tempValues: string[] | null;\n\n    private _modelChanges = Subscription.EMPTY;\n\n    constructor(\n        private _element: ElementRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string,\n        @Attribute('multiple') multiple: string\n    ) {\n        super();\n\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.multiple = multiple === null ? true : toBoolean(multiple);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.selectedOptions = new SelectionModel<McListOption>(this.multiple);\n    }\n\n    ngAfterContentInit(): void {\n        this.horizontal = toBoolean(this.horizontal);\n\n        this._keyManager = new FocusKeyManager<McListOption>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation(!this.horizontal)\n            .withHorizontalOrientation(this.horizontal ? 'ltr' : null);\n\n        if (this._tempValues) {\n            this._setOptionsFromValues(this._tempValues);\n            this._tempValues = null;\n        }\n\n        // Sync external changes to the model back to the options.\n        this._modelChanges = this.selectedOptions.onChange!.subscribe((event) => {\n            for (const item of event.added) {\n                item.selected = true;\n            }\n\n            for (const item of event.removed) {\n                item.selected = false;\n            }\n        });\n\n        this.updateScrollSize();\n    }\n\n    ngOnDestroy() {\n        this._modelChanges.unsubscribe();\n    }\n\n    focus() {\n        this._element.nativeElement.focus();\n    }\n\n    selectAll() {\n        this.options.forEach((option) => option.setSelected(true));\n\n        this._reportValueChange();\n    }\n\n    deselectAll() {\n        this.options.forEach((option) => option.setSelected(false));\n\n        this._reportValueChange();\n    }\n\n    updateScrollSize(): void {\n        if (this.horizontal || !this.options.first) { return; }\n\n        this._keyManager.withScrollSize(Math.floor(this._getHeight() / this.options.first._getHeight()));\n    }\n\n    // Sets the focused option of the selection-list.\n    setFocusedOption(option: McListOption): void {\n        this._keyManager.updateActiveItem(option);\n\n        if (this.withShift && this.multiple) {\n            const previousIndex = this._keyManager.previousActiveItemIndex;\n            const activeIndex = this._keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n\n            this.withShift = false;\n        } else if (this.withCtrl) {\n            this.withCtrl = false;\n\n            if (!this._canDeselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) {\n                this.options.forEach((item) => item.setSelected(false));\n                option.setSelected(true);\n            }\n        }\n\n        this._emitChangeEvent(option);\n        this._reportValueChange();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(values: string[]): void {\n        if (this.options) {\n            this._setOptionsFromValues(values || []);\n        } else {\n            this._tempValues = values;\n        }\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this._onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this._onTouched = fn;\n    }\n\n    // Implemented as a part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        if (this.options) {\n            this.options.forEach((option) => option.disabled = isDisabled);\n        }\n    }\n\n    getSelectedOptionValues(): string[] {\n        return this.options.filter((option) => option.selected).map((option) => option.value);\n    }\n\n    // Toggles the selected state of the currently focused option.\n    toggleFocusedOption(): void {\n        const focusedIndex = this._keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n            const focusedOption: McListOption = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this._canDeselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this._emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    _canDeselectLast(listOption: McListOption): boolean {\n        return !(this.noUnselect && this.selectedOptions.selected.length === 1 && listOption.selected);\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    // View to model callback that should be called if the list or its options lost focus.\n    _onTouched: () => void = () => {};\n\n    // Removes an option from the selection list and updates the active item.\n    _removeOptionFromList(option: McListOption) {\n        if (option._hasFocus) {\n            const optionIndex = this._getOptionIndex(option);\n\n            // Check whether the option is the last item\n            if (optionIndex > 0) {\n                this._keyManager.setPreviousItemActive();\n            } else if (optionIndex === 0 && this.options.length > 1) {\n                this._keyManager.setNextItemActive();\n            }\n        }\n    }\n\n    _onKeyDown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n        this.withShift = event.shiftKey;\n        this.withCtrl = event.ctrlKey;\n\n        switch (keyCode) {\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                if (!this.horizontal) { this._keyManager.setPreviousPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                if (!this.horizontal) { this._keyManager.setNextPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    // Reports a value change to the ControlValueAccessor\n    _reportValueChange() {\n        if (this.options) {\n            this._onChange(this.getSelectedOptionValues());\n        }\n    }\n\n    // Emits a change event if the selected state of an option changed.\n    _emitChangeEvent(option: McListOption) {\n        this.selectionChange.emit(new McListSelectionChange(this, option));\n    }\n\n    // Returns the option with the specified value.\n    private _getOptionByValue(value: string): McListOption | undefined {\n        return this.options.find((option) => option.value === value);\n    }\n\n    // Sets the selected options based on the specified values.\n    private _setOptionsFromValues(values: string[]) {\n        this.options.forEach((option) => option.setSelected(false));\n\n        values\n            .map((value) => this._getOptionByValue(value))\n            .filter(Boolean)\n            .forEach((option) => option!.setSelected(true));\n    }\n\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private _isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    // Returns the index of the specified list option.\n    private _getOptionIndex(option: McListOption): number {\n        return this.options.toArray().indexOf(option);\n    }\n\n    // View to model callback that should be called whenever the selected options change.\n    private _onChange: (value: any) => void = (_: any) => {};\n}\n","// todo пока не делаем, перенесено из материала, но у нас в доках таких простых списков нет.\nimport {\n    AfterContentInit, ChangeDetectionStrategy, Component, ContentChildren, Directive, ElementRef, QueryList,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { McLine, McLineSetter } from '@ptsecurity/mosaic/core';\n\n\nexport class McListBase {}\n\n@Component({\n    selector: 'mc-list',\n    host: { class: 'mc-list' },\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McList extends McListBase {}\n\n\n/**\n * Directive whose purpose is to add the mc- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n    selector: '[mc-subheader], [mcSubheader]',\n    host: { class: 'mc-subheader' }\n})\nexport class McListSubheaderCssStyler {}\n\n\n// Boilerplate for applying mixins to McListItem.\nexport class McListItemBase {}\n\n@Component({\n    selector: 'mc-list-item, a[mc-list-item]',\n    host: {\n        class: 'mc-list-item',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()'\n    },\n    templateUrl: './list-item.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListItem extends McListItemBase implements AfterContentInit {\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    private _lineSetter: McLineSetter;\n\n    constructor(private _element: ElementRef) {\n        super();\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    _handleFocus() {\n        this._element.nativeElement.classList.add('mc-focused');\n    }\n\n    _handleBlur() {\n        this._element.nativeElement.classList.remove('mc-focused');\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLineModule } from '@ptsecurity/mosaic/core';\n\nimport { McListSelection, McListOption } from './list-selection.component';\nimport { McList, McListItem, McListSubheaderCssStyler } from './list.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        McLineModule\n    ],\n    exports: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ],\n    declarations: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ]\n})\nexport class McListModule {}\n","import {\n    Input,\n    Attribute,\n    Component,\n    ElementRef,\n    OnDestroy,\n    ViewEncapsulation,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef\n} from '@angular/core';\n\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport {\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\nexport class McLinkBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\nexport const _McLinkBase: HasTabIndexCtor & CanDisableCtor & typeof McLinkBase\n    = mixinTabIndex(mixinDisabled(McLinkBase));\n\n@Component({\n    selector: 'a.mc-link',\n    template: `<ng-content></ng-content>`,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcLink',\n    styleUrls: ['./link.css'],\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': 'tabIndex'\n    }\n})\n\nexport class McLink extends _McLinkBase implements OnDestroy, HasTabIndex, CanDisable {\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    private _disabled = false;\n\n    constructor(\n        @Attribute('tabindex') tabIndex: string,\n        public elementRef: ElementRef,\n        private _focusMonitor: FocusMonitor,\n        private _changeDetector: ChangeDetectorRef) {\n\n        super(elementRef);\n        this._focusMonitor.monitor(elementRef.nativeElement, true);\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this._getHostElement().focus();\n    }\n\n    _getHostElement() {\n        return this.elementRef.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLink } from './link.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule\n    ],\n    declarations: [McLink],\n    exports: [McLink]\n})\nexport class McLinkModule {}\n","import { Injectable, Optional, SkipSelf } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\n\nimport { McModalRef } from './modal-ref.class';\n\n\ninterface IRegisteredMeta {\n    modalRef: McModalRef;\n    afterOpenSubscription: Subscription;\n    afterCloseSubscription: Subscription;\n}\n\n@Injectable()\nexport class McModalControlService {\n\n    // Track singleton afterAllClose through over the injection tree\n    get afterAllClose(): Subject<void> {\n        return this.parentService ? this.parentService.afterAllClose : this.rootAfterAllClose!;\n    }\n\n    // Track singleton openModals array through over the injection tree\n    get openModals(): McModalRef[] {\n        return this.parentService ? this.parentService.openModals : this.rootOpenModals!;\n    }\n\n    // @ts-ignore\n    private rootOpenModals: McModalRef[] = this.parentService ? null : [];\n    // @ts-ignore\n    private rootAfterAllClose: Subject<void> = this.parentService ? null : new Subject<void>();\n    // @ts-ignore\n    private rootRegisteredMetaMap: Map<McModalRef, IRegisteredMeta> = this.parentService ? null : new Map();\n\n    // Registered modal for later usage\n    private get registeredMetaMap(): Map<McModalRef, IRegisteredMeta> {\n        return this.parentService ? this.parentService.registeredMetaMap : this.rootRegisteredMetaMap;\n    }\n\n    constructor(\n        @Optional() @SkipSelf() private parentService: McModalControlService) {\n    }\n\n    // Register a modal to listen its open/close\n    registerModal(modalRef: McModalRef): void {\n        if (!this.hasRegistered(modalRef)) {\n            const afterOpenSubscription = modalRef.afterOpen.subscribe(() => this.openModals.push(modalRef));\n            const afterCloseSubscription = modalRef.afterClose.subscribe(() => this.removeOpenModal(modalRef));\n\n            this.registeredMetaMap.set(modalRef, {modalRef, afterOpenSubscription, afterCloseSubscription});\n        }\n    }\n\n    hasRegistered(modalRef: McModalRef): boolean {\n        return this.registeredMetaMap.has(modalRef);\n    }\n\n    // Close all registered opened modals\n    closeAll(): void {\n        let i = this.openModals.length;\n\n        while (i--) {\n            this.openModals[i].close();\n        }\n    }\n\n    private removeOpenModal(modalRef: McModalRef): void {\n        const index = this.openModals.indexOf(modalRef);\n\n        if (index > -1) {\n            this.openModals.splice(index, 1);\n\n            if (!this.openModals.length) {\n                this.afterAllClose.next();\n            }\n        }\n    }\n}\n","import { Observable } from 'rxjs';\n\nimport { McModalComponent } from './modal.component';\n\n\n/**\n * API class that public to users to handle the modal instance.\n * McModalRef is aim to avoid accessing to the modal instance directly by users.\n */\nexport abstract class McModalRef<T = any, R = any> {\n    abstract afterOpen: Observable<void>;\n    abstract afterClose: Observable<R>;\n\n    abstract open(): void;\n\n    abstract close(result?: R): void;\n\n    abstract destroy(result?: R): void;\n\n    /**\n     * Trigger the mcOnOk/mcOnCancel by manual\n     */\n    abstract triggerOk(): void;\n\n    abstract triggerCancel(): void;\n\n    // /**\n    //  * Return the ComponentRef of mcContent when specify mcContent as a Component\n    //  * Note: this method may return undefined if the Component has not ready yet.\n    //    (it only available after Modal's ngOnInit)\n    //  */\n    // abstract getContentComponentRef(): ComponentRef<{}>;\n\n    /**\n     * Return the component instance of mcContent when specify mcContent as a Component\n     * Note: this method may return undefined if the Component has not ready yet.\n     * (it only available after Modal's ngOnInit)\n     */\n    abstract getContentComponent(): T;\n\n    /**\n     * Get the dom element of this Modal\n     */\n    abstract getElement(): HTMLElement;\n\n    /**\n     * Get the instance of the Modal itself\n     */\n    abstract getInstance(): McModalComponent;\n}\n","export interface IClickPosition {\n    x: number;\n    y: number;\n}\n\nexport class ModalUtil {\n    private lastPosition: IClickPosition;\n\n    constructor(private document: Document) {\n        this.lastPosition = {x: -1, y: -1};\n        this.listenDocumentClick();\n    }\n\n    getLastClickPosition(): IClickPosition {\n        return this.lastPosition;\n    }\n\n    listenDocumentClick(): void {\n        this.document.addEventListener('click', (event: MouseEvent) => {\n            this.lastPosition = {x: event.clientX, y: event.clientY};\n        });\n    }\n}\n\nexport default new ModalUtil(document);\n","// tslint:disable:no-empty\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output\n} from '@angular/core';\nimport {\n    AbstractControl,\n    ControlValueAccessor,\n    NG_VALIDATORS,\n    NG_VALUE_ACCESSOR,\n    ValidationErrors,\n    Validator,\n    ValidatorFn,\n    Validators\n} from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport { DOWN_ARROW } from '@ptsecurity/cdk/keycodes';\nimport { ThemePalette } from '@ptsecurity/mosaic/core';\nimport { McFormField } from '@ptsecurity/mosaic/form-field';\nimport { MC_INPUT_VALUE_ACCESSOR } from '@ptsecurity/mosaic/input';\nimport { Subscription } from 'rxjs';\n\nimport { McDatepicker } from './datepicker';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\n/** @docs-private */\nexport const MC_DATEPICKER_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McDatepickerInput),\n    multi: true\n};\n\n/** @docs-private */\nexport const MC_DATEPICKER_VALIDATORS: any = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McDatepickerInput),\n    multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use McDatepickerInputEvent instead.\n */\nexport class McDatepickerInputEvent<D> {\n    /** The new value for the target datepicker input. */\n    value: D | null;\n\n    constructor(\n        /** Reference to the datepicker input component that emitted the event. */\n        public target: McDatepickerInput<D>,\n        /** Reference to the native input element associated with the datepicker input. */\n        public targetElement: HTMLElement) {\n        this.value = this.target.value;\n    }\n}\n\n\n/** Directive used to connect an input to a McDatepicker. */\n@Directive({\n    selector: 'input[mcDatepicker]',\n    providers: [\n        MC_DATEPICKER_VALUE_ACCESSOR,\n        MC_DATEPICKER_VALIDATORS,\n        { provide: MC_INPUT_VALUE_ACCESSOR, useExisting: McDatepickerInput }\n    ],\n    host: {\n        '[attr.aria-haspopup]': 'true',\n        '[attr.aria-owns]': '(datepicker?.opened && datepicker.id) || null',\n        '[attr.min]': 'min ? dateAdapter.toIso8601(min) : null',\n        '[attr.max]': 'max ? dateAdapter.toIso8601(max) : null',\n        '[disabled]': 'disabled',\n        '(input)': 'onInput($event.target.value)',\n        '(change)': 'onChange()',\n        '(blur)': 'onBlur()',\n        '(keydown)': 'onKeydown($event)'\n    },\n    exportAs: 'mcDatepickerInput'\n})\nexport class McDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n    /** The datepicker that this input is associated with. */\n    @Input()\n    set mcDatepicker(value: McDatepicker<D>) {\n        if (!value) {\n            return;\n        }\n\n        this.datepicker = value;\n        this.datepicker.registerInput(this);\n        this.datepickerSubscription.unsubscribe();\n\n        this.datepickerSubscription = this.datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this.cvaOnChange(selected);\n            this.onTouched();\n            this.dateInput.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));\n            this.dateChange.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));\n        });\n    }\n\n    /** Function that can be used to filter out dates within the datepicker. */\n    @Input()\n    set mcDatepickerFilter(value: (date: D | null) => boolean) {\n        this.dateFilter = value;\n        this.validatorOnChange();\n    }\n\n    /** The value of the input. */\n    @Input()\n    get value(): D | null {\n        return this._value;\n    }\n\n    set value(value: D | null) {\n        // tslint:disable-next-line:no-parameter-reassignment\n        value = this.dateAdapter.deserialize(value);\n        this.lastValueValid = !value || this.dateAdapter.isValid(value);\n        // tslint:disable-next-line:no-parameter-reassignment\n        value = this.getValidDateOrNull(value);\n        const oldDate = this.value;\n        this._value = value;\n        this.formatValue(value);\n\n        if (!this.dateAdapter.sameDate(oldDate, value)) {\n            this.valueChange.emit(value);\n        }\n    }\n\n    /** The minimum valid date. */\n    @Input()\n    get min(): D | null {\n        return this._min;\n    }\n\n    set min(value: D | null) {\n        this._min = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.validatorOnChange();\n    }\n\n    /** The maximum valid date. */\n    @Input()\n    get max(): D | null {\n        return this._max;\n    }\n\n    set max(value: D | null) {\n        this._max = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.validatorOnChange();\n    }\n\n    /** Whether the datepicker-input is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return !!this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        const newValue = coerceBooleanProperty(value);\n        const element = this.elementRef.nativeElement;\n\n        if (this._disabled !== newValue) {\n            this._disabled = newValue;\n            this.disabledChange.emit(newValue);\n        }\n\n        // We need to null check the `blur` method, because it's undefined during SSR.\n        if (newValue && element.blur) {\n            // Normally, native input elements automatically blur if they turn disabled. This behavior\n            // is problematic, because it would mean that it triggers another change detection cycle,\n            // which then causes a changed after checked error if the input element was focused before.\n            element.blur();\n        }\n    }\n\n    datepicker: McDatepicker<D>;\n    dateFilter: (date: D | null) => boolean;\n\n    /** Emits when a `change` event is fired on this `<input>`. */\n    @Output() readonly dateChange: EventEmitter<McDatepickerInputEvent<D>> =\n        new EventEmitter<McDatepickerInputEvent<D>>();\n\n    /** Emits when an `input` event is fired on this `<input>`. */\n    @Output() readonly dateInput: EventEmitter<McDatepickerInputEvent<D>> =\n        new EventEmitter<McDatepickerInputEvent<D>>();\n\n    /** Emits when the value changes (either due to user input or programmatic change). */\n    valueChange = new EventEmitter<D | null>();\n\n    /** Emits when the disabled state has changed */\n    disabledChange = new EventEmitter<boolean>();\n    private _value: D | null;\n    private _min: D | null;\n    private _max: D | null;\n    private _disabled: boolean;\n\n    private datepickerSubscription = Subscription.EMPTY;\n\n    private localeSubscription = Subscription.EMPTY;\n\n    /** Whether the last value set on the input was valid. */\n    private lastValueValid = false;\n\n    constructor(\n        public elementRef: ElementRef<HTMLInputElement>,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n        @Optional() private formField: McFormField\n    ) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        // Update the displayed date when the locale changes.\n        this.localeSubscription = dateAdapter.localeChanges.subscribe(() => {\n            this.value = this.value;\n        });\n    }\n\n    onTouched = () => {\n    }\n\n    ngOnDestroy() {\n        this.datepickerSubscription.unsubscribe();\n        this.localeSubscription.unsubscribe();\n        this.valueChange.complete();\n        this.disabledChange.complete();\n    }\n\n    /** @docs-private */\n    registerOnValidatorChange(fn: () => void): void {\n        this.validatorOnChange = fn;\n    }\n\n    /** @docs-private */\n    validate(c: AbstractControl): ValidationErrors | null {\n        return this.validator ? this.validator(c) : null;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: D): void {\n        this.value = value;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this.cvaOnChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    onKeydown(event: KeyboardEvent) {\n        // tslint:disable-next-line:deprecation\n        const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n        if (this.datepicker && isAltDownArrow && !this.elementRef.nativeElement.readOnly) {\n            this.datepicker.open();\n            event.preventDefault();\n        }\n    }\n\n    onInput(value: string) {\n        let date = this.dateAdapter.parse(value, this.dateFormats.parse.dateInput);\n        this.lastValueValid = !date || this.dateAdapter.isValid(date);\n        date = this.getValidDateOrNull(date);\n\n        if (!this.dateAdapter.sameDate(date, this._value)) {\n            this._value = date;\n            this.cvaOnChange(date);\n            this.valueChange.emit(date);\n            this.dateInput.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));\n        }\n    }\n\n    onChange() {\n        this.dateChange.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));\n    }\n\n    /** Returns the palette used by the input's form field, if any. */\n    getThemePalette(): ThemePalette | undefined {\n        return this.formField ? this.formField.color : undefined;\n    }\n\n    /** Handles blur events on the input. */\n    onBlur() {\n        // Reformat the input only if we have a valid value.\n        if (this.value) {\n            this.formatValue(this.value);\n        }\n\n        this.onTouched();\n    }\n\n    private cvaOnChange: (value: any) => void = () => {\n    }\n\n    private validatorOnChange = () => {\n    }\n\n    /** The form control validator for whether the input parses. */\n    private parseValidator: ValidatorFn = (): ValidationErrors | null => {\n        return this.lastValueValid ?\n            null : { mcDatepickerParse: { text: this.elementRef.nativeElement.value } };\n    }\n\n    /** The form control validator for the min date. */\n    private minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n        const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));\n\n        return (!this.min || !controlValue ||\n            this.dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n            null : { mcDatepickerMin: { min: this.min, actual: controlValue } };\n    }\n\n    /** The form control validator for the max date. */\n    private maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n        const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));\n\n        return (!this.max || !controlValue ||\n            this.dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n            null : { mcDatepickerMax: { max: this.max, actual: controlValue } };\n    }\n\n    /** The form control validator for the date filter. */\n    private filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n        const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));\n\n        return !this.dateFilter || !controlValue || this.dateFilter(controlValue) ?\n            null : { mcDatepickerFilter: true };\n    }\n\n    /** Formats a value and sets it on the input element. */\n    private formatValue(value: D | null) {\n        this.elementRef.nativeElement.value =\n            value ? this.dateAdapter.format(value, this.dateFormats.display.dateInput) : '';\n    }\n\n    /** The combined form control validator for this input. */\n        // tslint:disable:member-ordering\n    private validator: ValidatorFn | null =\n        Validators.compose([\n            this.parseValidator,\n            this.minValidator,\n            this.maxValidator,\n            this.filterValidator\n        ]);\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    Directive,\n    Input,\n    OnChanges,\n    OnDestroy,\n    SimpleChanges,\n    ViewEncapsulation,\n    ViewChild\n} from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { McButton } from '@ptsecurity/mosaic/button';\nimport { merge, of as observableOf, Subscription } from 'rxjs';\n\nimport { McDatepicker } from './datepicker';\nimport { McDatepickerIntl } from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `mcDatepickerToggle`. */\n@Directive({\n    selector: '[mcDatepickerToggleIcon]'\n})\nexport class McDatepickerToggleIcon {\n}\n\n\n@Component({\n    selector: 'mc-datepicker-toggle',\n    templateUrl: 'datepicker-toggle.html',\n    styleUrls: ['datepicker-toggle.css'],\n    host: {\n        class: 'mc-datepicker-toggle',\n        // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n        // consumer may have provided, while still being able to receive focus.\n        '[attr.tabindex]': '-1',\n        '[class.mc-datepicker-toggle_active]': 'datepicker && datepicker.opened',\n        '[class.mc-warn]': 'datepicker && datepicker.color === \"error\"',\n        '(focus)': 'button.focus()'\n    },\n    exportAs: 'mcDatepickerToggle',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n\n    /** Whether the toggle button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    /** Datepicker instance that the button will toggle. */\n    @Input('for') datepicker: McDatepicker<D>;\n\n    /** Tabindex for the toggle. */\n    @Input() tabIndex: number | null;\n\n    /** Custom icon set by the consumer. */\n    @ContentChild(McDatepickerToggleIcon) customIcon: McDatepickerToggleIcon;\n\n    /** Underlying button element. */\n    @ViewChild('button') button: McButton;\n    private stateChanges = Subscription.EMPTY;\n\n    private _disabled: boolean;\n\n    constructor(\n        public intl: McDatepickerIntl,\n        private changeDetectorRef: ChangeDetectorRef,\n        @Attribute('tabindex') defaultTabIndex: string\n    ) {\n        const parsedTabIndex = Number(defaultTabIndex);\n        this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.datepicker) {\n            this.watchStateChanges();\n        }\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.unsubscribe();\n    }\n\n    ngAfterContentInit() {\n        this.watchStateChanges();\n    }\n\n    open(event: Event): void {\n        if (this.datepicker && !this.disabled) {\n            this.datepicker.open();\n            event.stopPropagation();\n        }\n    }\n\n    private watchStateChanges() {\n        const datepickerDisabled = this.datepicker ? this.datepicker.disabledChange : observableOf();\n        const inputDisabled = this.datepicker && this.datepicker.datepickerInput ?\n            this.datepicker.datepickerInput.disabledChange : observableOf();\n        const datepickerToggled = this.datepicker ?\n            merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n            observableOf();\n\n        this.stateChanges.unsubscribe();\n        this.stateChanges = merge(\n            this.intl.changes,\n            datepickerDisabled,\n            inputDisabled,\n            datepickerToggled\n        ).subscribe(() => this.changeDetectorRef.markForCheck());\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { PortalModule } from '@ptsecurity/cdk/portal';\nimport { McButtonModule } from '@ptsecurity/mosaic/button';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McCalendar, McCalendarHeader } from './calendar';\nimport { McCalendarBody } from './calendar-body';\nimport {\n    McDatepicker,\n    McDatepickerContent,\n    MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './datepicker';\nimport { McDatepickerInput } from './datepicker-input';\nimport { McDatepickerIntl } from './datepicker-intl';\nimport { McDatepickerToggle, McDatepickerToggleIcon } from './datepicker-toggle';\nimport { McMonthView } from './month-view';\nimport { McMultiYearView } from './multi-year-view';\nimport { McYearView } from './year-view';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        McButtonModule,\n        OverlayModule,\n        A11yModule,\n        PortalModule,\n        McIconModule\n    ],\n    exports: [\n        McCalendar,\n        McCalendarBody,\n        McDatepicker,\n        McDatepickerContent,\n        McDatepickerInput,\n        McDatepickerToggle,\n        McDatepickerToggleIcon,\n        McMonthView,\n        McYearView,\n        McMultiYearView,\n        McCalendarHeader,\n        McButtonModule\n    ],\n    declarations: [\n        McCalendar,\n        McCalendarBody,\n        McDatepicker,\n        McDatepickerContent,\n        McDatepickerInput,\n        McDatepickerToggle,\n        McDatepickerToggleIcon,\n        McMonthView,\n        McYearView,\n        McMultiYearView,\n        McCalendarHeader\n    ],\n    providers: [\n        McDatepickerIntl,\n        MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER\n    ],\n    entryComponents: [\n        McDatepickerContent,\n        McCalendarHeader\n    ]\n})\nexport class McDatepickerModule {\n}\n","import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\n\n\n@Component({\n    selector: 'mc-divider',\n    host: {\n        class: 'mc-divider',\n        role: 'separator',\n        '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n        '[class.mc-divider-vertical]': 'vertical',\n        '[class.mc-divider-inset]': 'inset'\n    },\n    template: '',\n    styleUrls: ['divider.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false\n})\nexport class McDivider {\n    // Whether the divider is vertically aligned.\n    @Input()\n    get vertical(): boolean {\n        return this._vertical;\n    }\n\n    set vertical(value: boolean) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n\n    private _vertical: boolean = false;\n\n    // Whether the divider is an inset divider.\n    @Input()\n    get inset(): boolean {\n        return this._inset;\n    }\n\n    set inset(value: boolean) {\n        this._inset = coerceBooleanProperty(value);\n    }\n\n    private _inset: boolean = false;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McDivider } from './divider.component';\n\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [McDivider],\n    declarations: [McDivider]\n})\nexport class McDividerModule {\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n    Directive,\n    TemplateRef,\n    ComponentFactoryResolver,\n    ApplicationRef,\n    Injector,\n    ViewContainerRef,\n    Inject,\n    OnDestroy\n} from '@angular/core';\nimport { TemplatePortal, DomPortalOutlet } from '@ptsecurity/cdk/portal';\nimport { Subject } from 'rxjs';\n\n\n/**\n * Dropdown content that will be rendered lazily once the dropdown is opened.\n */\n@Directive({\n    selector: 'ng-template[mcDropdownContent]'\n})\nexport class McDropdownContent implements OnDestroy {\n\n    /** Emits when the dropdown content has been attached. */\n    _attached = new Subject<void>();\n    private _portal: TemplatePortal<any>;\n    private _outlet: DomPortalOutlet;\n\n    constructor(\n        private _template: TemplateRef<any>,\n        private _componentFactoryResolver: ComponentFactoryResolver,\n        private _appRef: ApplicationRef,\n        private _injector: Injector,\n        private _viewContainerRef: ViewContainerRef,\n        @Inject(DOCUMENT) private _document: any) {}\n\n    /**\n     * Attaches the content with a particular context.\n     * @docs-private\n     */\n    attach(context: any = {}) {\n        if (!this._portal) {\n            this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n        }\n\n        this.detach();\n\n        if (!this._outlet) {\n            this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n                this._componentFactoryResolver, this._appRef, this._injector);\n        }\n\n        const element: HTMLElement = this._template.elementRef.nativeElement;\n\n        // Because we support opening the same dropdown from different triggers (which in turn have their\n        // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n        // risk it staying attached to a pane that's no longer in the DOM.\n        element.parentNode!.insertBefore(this._outlet.outletElement, element);\n        this._portal.attach(this._outlet, context);\n        this._attached.next();\n    }\n\n    /**\n     * Detaches the content.\n     * @docs-private\n     */\n    detach() {\n        if (this._portal.isAttached) {\n            this._portal.detach();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._outlet) {\n            this._outlet.dispose();\n        }\n    }\n}\n","import { EventEmitter, TemplateRef, InjectionToken } from '@angular/core';\nimport { FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { Direction } from '@ptsecurity/cdk/bidi';\n\nimport { McDropdownContent } from './dropdown-content';\nimport { DropdownPositionX, DropdownPositionY } from './dropdown-positions';\n\n\n/**\n * Injection token used to provide the parent dropdown to dropdown-specific components.\n * @docs-private\n */\nexport const MC_DROPDOWN_PANEL = new InjectionToken<McDropdownPanel>('MC_DROPDOWN_PANEL');\n\n/**\n * Interface for a custom dropdown panel that can be used with `mcDropdownTriggerFor`.\n * @docs-private\n */\n// tslint:disable-next-line:interface-name\nexport interface McDropdownPanel<T = any> {\n    xPosition: DropdownPositionX;\n    yPosition: DropdownPositionY;\n    overlapTriggerX: boolean;\n    overlapTriggerY: boolean;\n    templateRef: TemplateRef<any>;\n    closed: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n    parent?: McDropdownPanel | undefined;\n    direction?: Direction;\n    lazyContent?: McDropdownContent;\n    backdropClass?: string;\n    hasBackdrop?: boolean;\n    focusFirstItem(origin?: FocusOrigin): void;\n    resetActiveItem(): void;\n    setPositionClasses?(x: DropdownPositionX, y: DropdownPositionY): void;\n    addItem?(item: T): void;\n    removeItem?(item: T): void;\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    OnDestroy,\n    ViewEncapsulation,\n    Inject,\n    Optional,\n    Input,\n    ViewChild\n} from '@angular/core';\nimport { IFocusableOption, FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { CanDisable, CanDisableCtor, mixinDisabled } from '@ptsecurity/mosaic/core';\nimport { Subject } from 'rxjs';\n\nimport { MC_DROPDOWN_PANEL, McDropdownPanel } from './dropdown-panel';\n\n\n// Boilerplate for applying mixins to McDropdownItem.\n/** @docs-private */\nexport class McDropdownItemBase {}\nexport const _McDropdownItemMixinBase: CanDisableCtor & typeof McDropdownItemBase =\n    mixinDisabled(McDropdownItemBase);\n\n/**\n * This directive is intended to be used inside an mc-dropdown tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n    selector: 'mc-dropdown-item, [mc-dropdown-item]',\n    exportAs: 'mcDropdownItem',\n    inputs: ['disabled'],\n    host: {\n        '[attr.role]': 'role',\n        class: 'mc-dropdown__item',\n        '[class.mc-dropdown__item_highlighted]': '_highlighted',\n        '[attr.tabindex]': '_getTabIndex()',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': '_checkDisabled($event)',\n        '(mouseenter)': '_handleMouseEnter()'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    template: `\n        <div #content>\n            <ng-content></ng-content>\n        </div>\n        <i *ngIf=\"_triggersNestedDropdown\" mc-icon=\"mc-angle-right-M_16\" class=\"mc-dropdown__trigger\"></i>\n    `\n})\nexport class McDropdownItem extends _McDropdownItemMixinBase\n    implements IFocusableOption, CanDisable, OnDestroy {\n\n    /** ARIA role for the dropdown item. */\n    @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n    @ViewChild('content') content;\n\n    private _document: Document;\n\n    /** Stream that emits when the dropdown item is hovered. */\n    readonly _hovered: Subject<McDropdownItem> = new Subject<McDropdownItem>();\n\n    /** Whether the dropdown item is highlighted. */\n    _highlighted: boolean = false;\n\n    /** Whether the dropdown item acts as a trigger for a nested dropdown. */\n    _triggersNestedDropdown: boolean = false;\n\n    constructor(\n        private _elementRef: ElementRef<HTMLElement>,\n        @Inject(DOCUMENT) document: any,\n        private _focusMonitor: FocusMonitor,\n        @Inject(MC_DROPDOWN_PANEL) @Optional() private _parentDropdownPanel?: McDropdownPanel<McDropdownItem>) {\n        super();\n\n        if (_focusMonitor) {\n            // Start monitoring the element so it gets the appropriate focused classes. We want\n            // to show the focus style for dropdown items only when the focus was not caused by a\n            // mouse or touch interaction.\n            _focusMonitor.monitor(this._elementRef.nativeElement, false);\n        }\n\n        if (_parentDropdownPanel && _parentDropdownPanel.addItem) {\n            _parentDropdownPanel.addItem(this);\n        }\n\n        this._document = document;\n    }\n\n    /** Focuses the dropdown item. */\n    focus(origin: FocusOrigin = 'program'): void {\n        if (this._focusMonitor) {\n            this._focusMonitor.focusVia(this._getHostElement(), origin);\n        } else {\n            this._getHostElement().focus();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._focusMonitor) {\n            this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n\n        if (this._parentDropdownPanel && this._parentDropdownPanel.removeItem) {\n            this._parentDropdownPanel.removeItem(this);\n        }\n\n        this._hovered.complete();\n    }\n\n    /** Used to set the `tabindex`. */\n    _getTabIndex(): string {\n        return this.disabled ? '-1' : '0';\n    }\n\n    /** Returns the host DOM element. */\n    _getHostElement(): HTMLElement {\n        return this._elementRef.nativeElement;\n    }\n\n    /** Prevents the default element actions if it is disabled. */\n    _checkDisabled(event: Event): void {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    /** Emits to the hover stream. */\n    _handleMouseEnter() {\n        this._hovered.next(this);\n    }\n\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel(): string {\n        const element: HTMLElement = this.content.nativeElement;\n        // tslint:disable-next-line:no-magic-numbers\n        const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n        let output = '';\n\n        if (element.childNodes) {\n            const length = element.childNodes.length;\n\n            // Go through all the top-level text nodes and extract their text.\n            // We skip anything that's not a text node to prevent the text from\n            // being thrown off by something like an icon.\n            for (let i = 0; i < length; i++) {\n                if (element.childNodes[i].nodeType === textNodeType) {\n                    output += element.childNodes[i].textContent;\n                }\n            }\n        }\n\n        return output.trim();\n    }\n}\n","import {\n    trigger,\n    state,\n    style,\n    animate,\n    transition,\n    query,\n    group,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n\n/**\n * Animations used by the mc-dropdown component.\n * @docs-private\n */\nexport const mcDropdownAnimations: {\n    readonly transformDropdown: AnimationTriggerMetadata;\n    readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n    /**\n     * This animation controls the dropdown panel's entry and exit from the page.\n     *\n     * When the dropdown panel is added to the DOM, it scales in and fades in its border.\n     *\n     * When the dropdown panel is removed from the DOM, it simply fades out after a brief\n     * delay to display the ripple.\n     */\n    transformDropdown: trigger('transformDropdown', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(0.8)'\n        })),\n        transition('void => enter', group([\n            query('.mc-dropdown__content', animate('50ms linear', style({opacity: 1}))),\n            animate('50ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'}))\n        ])),\n        transition('* => void', animate('50ms 25ms linear', style({opacity: 0})))\n    ]),\n\n\n    /**\n     * This animation fades in the background color and content of the dropdown panel\n     * after its containing element is scaled in.\n     */\n    fadeInItems: trigger('fadeInItems', [\n        // now. Remove next time we do breaking changes.\n        state('showing', style({opacity: 1})),\n        transition('void => *', [\n            style({opacity: 0}),\n            animate('200ms 60ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n\nexport const fadeInItems = mcDropdownAnimations.fadeInItems;\n\nexport const transformDropdown = mcDropdownAnimations.transformDropdown;\n","import { AnimationEvent } from '@angular/animations';\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChild,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    Output,\n    TemplateRef,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    OnInit\n} from '@angular/core';\nimport { FocusKeyManager, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { Direction } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW } from '@ptsecurity/cdk/keycodes';\nimport { merge, Observable, Subject, Subscription } from 'rxjs';\nimport { startWith, switchMap, take } from 'rxjs/operators';\n\nimport { mcDropdownAnimations } from './dropdown-animations';\nimport { McDropdownContent } from './dropdown-content';\nimport { throwMcDropdownInvalidPositionX, throwMcDropdownInvalidPositionY } from './dropdown-errors';\nimport { McDropdownItem } from './dropdown-item';\nimport { MC_DROPDOWN_PANEL, McDropdownPanel } from './dropdown-panel';\nimport { DropdownPositionX, DropdownPositionY } from './dropdown-positions';\n\n\n/** Default `mc-dropdown` options that can be overridden. */\n// tslint:disable-next-line:interface-name\nexport interface McDropdownDefaultOptions {\n    /** The x-axis position of the dropdown. */\n    xPosition: DropdownPositionX;\n\n    /** The y-axis position of the dropdown. */\n    yPosition: DropdownPositionY;\n\n    /** Whether the dropdown should overlap the dropdown trigger horizontally. */\n    overlapTriggerX: boolean;\n\n    /** Whether the dropdown should overlap the dropdown trigger vertically. */\n    overlapTriggerY: boolean;\n\n    /** Class to be applied to the dropdown's backdrop. */\n    backdropClass: string;\n\n    /** Whether the dropdown has a backdrop. */\n    hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mc-dropdown`. */\nexport const MC_DROPDOWN_DEFAULT_OPTIONS =\n    new InjectionToken<McDropdownDefaultOptions>('mc-dropdown-default-options', {\n        providedIn: 'root',\n        factory: MC_DROPDOWN_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MC_DROPDOWN_DEFAULT_OPTIONS_FACTORY(): McDropdownDefaultOptions {\n    return {\n        overlapTriggerX: true,\n        overlapTriggerY: false,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop'\n    };\n}\n\n@Component({\n    selector: 'mc-dropdown',\n    templateUrl: 'dropdown.html',\n    styleUrls: ['dropdown.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcDropdown',\n    animations: [\n        mcDropdownAnimations.transformDropdown,\n        mcDropdownAnimations.fadeInItems\n    ],\n    providers: [\n        { provide: MC_DROPDOWN_PANEL, useExisting: McDropdown }\n    ]\n})\nexport class McDropdown implements AfterContentInit, McDropdownPanel<McDropdownItem>, OnInit, OnDestroy {\n\n    /** Position of the dropdown in the X axis. */\n    @Input()\n    get xPosition(): DropdownPositionX {\n        return this._xPosition;\n    }\n\n    set xPosition(value: DropdownPositionX) {\n        if (value !== 'before' && value !== 'after') {\n            throwMcDropdownInvalidPositionX();\n        }\n        this._xPosition = value;\n        this.setPositionClasses();\n    }\n\n    /** Position of the dropdown in the Y axis. */\n    @Input()\n    get yPosition(): DropdownPositionY {\n        return this._yPosition;\n    }\n\n    set yPosition(value: DropdownPositionY) {\n        if (value !== 'above' && value !== 'below') {\n            throwMcDropdownInvalidPositionY();\n        }\n        this._yPosition = value;\n        this.setPositionClasses();\n    }\n\n    /** Whether the dropdown should overlap its trigger vertically. */\n    @Input()\n    get overlapTriggerY(): boolean {\n        return this._overlapTriggerY;\n    }\n\n    set overlapTriggerY(value: boolean) {\n        this._overlapTriggerY = coerceBooleanProperty(value);\n    }\n\n    /** Whether the dropdown should overlap its trigger horizontally. */\n    @Input()\n    get overlapTriggerX(): boolean {\n        return this._overlapTriggerX;\n    }\n\n    set overlapTriggerX(value: boolean) {\n        this._overlapTriggerX = coerceBooleanProperty(value);\n    }\n\n    /** Whether the dropdown has a backdrop. */\n    @Input()\n    get hasBackdrop(): boolean | undefined {\n        return this._hasBackdrop;\n    }\n\n    set hasBackdrop(value: boolean | undefined) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n\n    /**\n     * This method takes classes set on the host mc-dropdown element and applies them on the\n     * dropdown template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing dropdown from outside the component.\n     * @param classes list of class names\n     */\n    @Input('class')\n    set panelClass(classes: string) {\n        const previousPanelClass = this._previousPanelClass;\n\n        if (previousPanelClass && previousPanelClass.length) {\n            previousPanelClass.split(' ').forEach((className: string) => {\n                this._classList[className] = false;\n            });\n        }\n\n        this._previousPanelClass = classes;\n\n        if (classes && classes.length) {\n            classes.split(' ').forEach((className: string) => {\n                this._classList[className] = true;\n            });\n\n            this._elementRef.nativeElement.className = '';\n        }\n    }\n\n    /** Config object to be passed into the dropdown's ngClass */\n    _classList: { [key: string]: boolean } = {};\n\n    /** Current state of the panel animation. */\n    _panelAnimationState: 'void' | 'enter' = 'void';\n\n    /** Emits whenever an animation on the dropdown completes. */\n    _animationDone = new Subject<AnimationEvent>();\n\n    /** Whether the dropdown is animating. */\n    _isAnimating: boolean;\n\n    /** Parent dropdown of the current dropdown panel. */\n    parent: McDropdownPanel | undefined;\n\n    /** Layout direction of the dropdown. */\n    direction: Direction;\n\n    /** Class to be added to the backdrop element. */\n    @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n    /** @docs-private */\n    @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n    /**\n     * List of the items inside of a dropdown.\n     */\n    @ContentChildren(McDropdownItem) items: QueryList<McDropdownItem>;\n\n    /**\n     * Dropdown content that will be rendered lazily.\n     * @docs-private\n     */\n    @ContentChild(McDropdownContent) lazyContent: McDropdownContent;\n\n    private _previousPanelClass: string;\n\n    /** Event emitted when the dropdown is closed. */\n    @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n        new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n    private _keyManager: FocusKeyManager<McDropdownItem>;\n    private _xPosition: DropdownPositionX = this._defaultOptions.xPosition;\n    private _yPosition: DropdownPositionY = this._defaultOptions.yPosition;\n\n    /** Dropdown items inside the current dropdown. */\n    private _items: McDropdownItem[] = [];\n\n    /** Emits whenever the amount of dropdown items changes. */\n    private _itemChanges = new Subject<McDropdownItem[]>();\n\n    /** Subscription to tab events on the dropdown panel */\n    private _tabSubscription = Subscription.EMPTY;\n    private _overlapTriggerX: boolean = this._defaultOptions.overlapTriggerX;\n    private _overlapTriggerY: boolean = this._defaultOptions.overlapTriggerY;\n    private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n    constructor(\n        private _elementRef: ElementRef<HTMLElement>,\n        private _ngZone: NgZone,\n        @Inject(MC_DROPDOWN_DEFAULT_OPTIONS) private _defaultOptions: McDropdownDefaultOptions) { }\n\n    ngOnInit() {\n        this.setPositionClasses();\n    }\n\n    ngAfterContentInit() {\n        this._keyManager = new FocusKeyManager<McDropdownItem>(this.items).withWrap().withTypeAhead();\n        this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n    }\n\n    ngOnDestroy() {\n        this._tabSubscription.unsubscribe();\n        this.closed.complete();\n    }\n\n    /** Stream that emits whenever the hovered dropdown item changes. */\n    _hovered(): Observable<McDropdownItem> {\n        return this._itemChanges.pipe(\n            startWith(this._items),\n            switchMap(items => merge(...items.map(item => item._hovered)))\n        );\n    }\n\n    /** Handle a keyboard event from the dropdown, delegating to the appropriate action. */\n    _handleKeydown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n\n        switch (keyCode) {\n            case ESCAPE:\n                this.closed.emit('keydown');\n                break;\n            case LEFT_ARROW:\n                if (this.parent && this.direction === 'ltr') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            case RIGHT_ARROW:\n                if (this.parent && this.direction === 'rtl') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            default:\n                if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n                    this._keyManager.setFocusOrigin('keyboard');\n                }\n\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    /**\n     * Focus the first item in the dropdown.\n     * @param origin Action from which the focus originated. Used to set the correct styling.\n     */\n    focusFirstItem(origin: FocusOrigin = 'program'): void {\n        // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n        if (this.lazyContent) {\n            this._ngZone.onStable.asObservable()\n                .pipe(take(1))\n                .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n        } else {\n            this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n        }\n    }\n\n    /**\n     * Resets the active item in the dropdown. This is used when the dropdown is opened, allowing\n     * the user to start from the first option when pressing the down arrow.\n     */\n    resetActiveItem() {\n        this._keyManager.setActiveItem(-1);\n    }\n\n    /**\n     * Registers a dropdown item with the dropdown.\n     * @docs-private\n     */\n    addItem(item: McDropdownItem) {\n        // We register the items through this method, rather than picking them up through\n        // `ContentChildren`, because we need the items to be picked up by their closest\n        // `mc-dropdown` ancestor. If we used `@ContentChildren(McDropdownItem, {descendants: true})`,\n        // all descendant items will bleed into the top-level dropdown in the case where the consumer\n        // has `mc-dropdown` instances nested inside each other.\n        if (this._items.indexOf(item) === -1) {\n            this._items.push(item);\n            this._itemChanges.next(this._items);\n        }\n    }\n\n    /**\n     * Removes an item from the dropdown.\n     * @docs-private\n     */\n    removeItem(item: McDropdownItem) {\n        const index = this._items.indexOf(item);\n\n        if (this._items.indexOf(item) > -1) {\n            this._items.splice(index, 1);\n            this._itemChanges.next(this._items);\n        }\n    }\n\n    /**\n     * Adds classes to the dropdown panel based on its position. Can be used by\n     * consumers to add specific styling based on the position.\n     * @param posX Position of the dropdown along the x axis.\n     * @param posY Position of the dropdown along the y axis.\n     * @docs-private\n     */\n    setPositionClasses(posX: DropdownPositionX = this.xPosition, posY: DropdownPositionY = this.yPosition) {\n        const classes = this._classList;\n        classes['mc-dropdown-before'] = posX === 'before';\n        classes['mc-dropdown-after'] = posX === 'after';\n        classes['mc-dropdown-above'] = posY === 'above';\n        classes['mc-dropdown-below'] = posY === 'below';\n    }\n\n    /** Starts the enter animation. */\n    _startAnimation() {\n        this._panelAnimationState = 'enter';\n    }\n\n    /** Resets the panel animation to its initial state. */\n    _resetAnimation() {\n        this._panelAnimationState = 'void';\n    }\n\n    /** Callback that is invoked when the panel animation completes. */\n    _onAnimationDone(event: AnimationEvent) {\n        this._animationDone.next(event);\n        this._isAnimating = false;\n    }\n\n    _onAnimationStart(event: AnimationEvent) {\n        this._isAnimating = true;\n\n        // Scroll the content element to the top as soon as the animation starts. This is necessary,\n        // because we move focus to the first item while it's still being animated, which can throw\n        // the browser off when it determines the scroll position. Alternatively we can move focus\n        // when the animation is done, however moving focus asynchronously will interrupt screen\n        // readers which are in the process of reading out the dropdown already. We take the `element`\n        // from the `event` since we can't use a `ViewChild` to access the pane.\n        if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n            event.element.scrollTop = 0;\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McDropdownContent } from './dropdown-content';\nimport { McDropdownItem } from './dropdown-item';\nimport { MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER, McDropdownTrigger } from './dropdown-trigger';\nimport { McDropdown } from './dropdown.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        McIconModule\n    ],\n    exports: [McDropdown, McDropdownItem, McDropdownTrigger, McDropdownContent],\n    declarations: [McDropdown, McDropdownItem, McDropdownTrigger, McDropdownContent],\n    providers: [MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class McDropdownModule {}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-content',\n    preserveWhitespaces: false,\n    templateUrl: './content.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ],\n    host: {\n        '[class.mc-layout-content]': 'true'\n    }\n})\nexport class McContentComponent {\n}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-footer',\n    preserveWhitespaces: false,\n    templateUrl: './footer.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ],\n    host: {\n        '[class.mc-layout-footer]': 'true'\n    }\n})\nexport class McFooterComponent {\n}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector : 'mc-header',\n    preserveWhitespaces: false,\n    templateUrl: './header.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ],\n    host: {\n        '[class.mc-layout-header]': 'true'\n    }\n})\nexport class McHeaderComponent {\n}\n","import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-layout',\n    preserveWhitespaces: false,\n    styleUrls: ['layout.css'],\n    templateUrl: './layout.component.html',\n    host: {\n        '[class.mc-layout]': 'true',\n        '[class.mc-layout-has-sidebar]': 'hasSidebar'\n    },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McLayoutComponent {\n    hasSidebar = false;\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    EventEmitter,\n    Host,\n    Input,\n    OnInit,\n    Optional,\n    Output\n} from '@angular/core';\nimport { toBoolean } from '@ptsecurity/mosaic/core';\n\nimport { McLayoutComponent } from './layout.component';\n\n\n@Component({\n    selector: 'mc-sidebar',\n    preserveWhitespaces: false,\n    templateUrl: './sidebar.component.html',\n    host: {\n        '[class.mc-layout-sidebar]': 'true',\n        '[class.mc-layout-sidebar-collapsed]': 'mcCollapsed',\n        '[style.flex]': 'mcFlex',\n        '[style.max-width.px]': 'mcWidth',\n        '[style.min-width.px]': 'mcWidth',\n        '[style.width.px]': 'mcWidth'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McSidebarComponent implements OnInit {\n\n    @Input() _mcWidth = 200;\n    @Input() mcCollapsedWidth = 80;\n\n    @Input()\n    set mcCollapsible(value: boolean) {\n        this.collapsible = toBoolean(value);\n    }\n\n    get mcCollapsible(): boolean {\n        return this.collapsible;\n    }\n\n    @Input()\n    set mcCollapsed(value: boolean) {\n        this.collapsed = toBoolean(value);\n    }\n\n    get mcCollapsed(): boolean {\n        return this.collapsed;\n    }\n\n    // tslint:disable-next-line\n    @Output() mcCollapsedChange = new EventEmitter();\n\n    private collapsed = false;\n    private collapsible = false;\n\n    get mcFlex(): string {\n        if (this.mcCollapsed) {\n            return `0 0 ${this.mcCollapsedWidth}px`;\n        } else {\n            return `0 0 ${this.mcWidth}px`;\n        }\n    }\n\n    get mcWidth(): number {\n        if (this.mcCollapsed) {\n            return this.mcCollapsedWidth;\n        } else {\n            return this._mcWidth;\n        }\n    }\n\n    constructor(\n        @Optional() @Host() private mcLayoutComponent: McLayoutComponent) {\n    }\n\n    ngOnInit() {\n        if (this.mcLayoutComponent) {\n            this.mcLayoutComponent.hasSidebar = true;\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McContentComponent } from './content.component';\nimport { McFooterComponent } from './footer.component';\nimport { McHeaderComponent } from './header.component';\nimport { McLayoutComponent } from './layout.component';\nimport { McSidebarComponent } from './sidebar.component';\n\n\n@NgModule({\n    imports: [ CommonModule ],\n    exports: [\n        McLayoutComponent,\n        McContentComponent,\n        McFooterComponent,\n        McHeaderComponent,\n        McSidebarComponent\n    ],\n    declarations: [\n        McLayoutComponent,\n        McContentComponent,\n        McFooterComponent,\n        McHeaderComponent,\n        McSidebarComponent\n    ]\n})\nexport class McLayoutModule {\n}\n","// tslint:disable:no-magic-numbers\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { DateAdapter } from '@ptsecurity/cdk/datetime';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    PAGE_DOWN,\n    PAGE_UP,\n    RIGHT_ARROW,\n    UP_ARROW,\n    SPACE\n} from '@ptsecurity/cdk/keycodes';\n\nimport { McCalendarBody, McCalendarCell } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-multi-year-view',\n    templateUrl: 'multi-year-view.html',\n    exportAs: 'mcMultiYearView',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McMultiYearView<D> implements AfterContentInit {\n    /** The date to display in this multi-year view (everything other than the year is ignored). */\n    @Input()\n    get activeDate(): D {\n        return this._activeDate;\n    }\n\n    set activeDate(value: D) {\n        const oldActiveDate = this._activeDate;\n        const validDate =\n            this.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();\n        this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n        if (Math.floor(this.dateAdapter.getYear(oldActiveDate) / yearsPerPage) !==\n            Math.floor(this.dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n            this.init();\n        }\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.selectedYear = this._selected && this.dateAdapter.getYear(this._selected);\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** A function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Emits when a new year is selected. */\n    @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits the selected year. This doesn't imply a change on the selected date */\n    @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits when any date is activated. */\n    @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** The body of calendar table */\n    @ViewChild(McCalendarBody) mcCalendarBody: McCalendarBody;\n\n    /** Grid of calendar cells representing the currently displayed years. */\n    years: McCalendarCell[][];\n\n    /** The year that today falls on. */\n    todayYear: number;\n\n    /** The year of the selected date. Null if the selected date is null. */\n    selectedYear: number | null;\n    private _activeDate: D;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() private dir?: Directionality\n    ) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        this._activeDate = this.dateAdapter.today();\n    }\n\n    ngAfterContentInit() {\n        this.init();\n    }\n\n    /** Initializes this multi-year view. */\n    init() {\n        this.todayYear = this.dateAdapter.getYear(this.dateAdapter.today());\n        const activeYear = this.dateAdapter.getYear(this._activeDate);\n        const activeOffset = activeYear % yearsPerPage;\n        this.years = [];\n        for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n            row.push(activeYear - activeOffset + i);\n            if (row.length === yearsPerRow) {\n                this.years.push(row.map((year) => this.createCellForYear(year)));\n                row = [];\n            }\n        }\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Handles when a new year is selected. */\n    onYearSelected(year: number) {\n        this.yearSelected.emit(this.dateAdapter.createDate(year, 0, 1));\n        const month = this.dateAdapter.getMonth(this.activeDate);\n        const daysInMonth =\n            this.dateAdapter.getNumDaysInMonth(this.dateAdapter.createDate(year, month, 1));\n        this.selectedChange.emit(this.dateAdapter.createDate(year, month,\n            Math.min(this.dateAdapter.getDate(this.activeDate), daysInMonth)));\n    }\n\n    /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n    handleCalendarBodyKeydown(event: KeyboardEvent): void {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n        const oldActiveDate = this._activeDate;\n        const isRtl = this.isRtl();\n\n        // tslint:disable-next-line:deprecation\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n                break;\n            case HOME:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate,\n                    -this.dateAdapter.getYear(this._activeDate) % yearsPerPage);\n                break;\n            case END:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate,\n                    yearsPerPage - this.dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n                break;\n            case PAGE_UP:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(\n                        this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n                break;\n            case PAGE_DOWN:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(\n                        this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n                break;\n            case ENTER:\n            case SPACE:\n                this.onYearSelected(this.dateAdapter.getYear(this._activeDate));\n                break;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n\n        if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n\n        this.focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n\n    getActiveCell(): number {\n        return this.dateAdapter.getYear(this.activeDate) % yearsPerPage;\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.mcCalendarBody.focusActiveCell();\n    }\n\n    /** Creates an McCalendarCell for the given year. */\n    private createCellForYear(year: number) {\n        const yearName = this.dateAdapter.getYearName(this.dateAdapter.createDate(year, 0, 1));\n\n        return new McCalendarCell(year, yearName, yearName, this.shouldEnableYear(year));\n    }\n\n    /** Whether the given year is enabled. */\n    private shouldEnableYear(year: number) {\n        // disable if the year is greater than maxDate lower than minDate\n        if (year === undefined || year === null ||\n            (this.maxDate && year > this.dateAdapter.getYear(this.maxDate)) ||\n            (this.minDate && year < this.dateAdapter.getYear(this.minDate))) {\n            return false;\n        }\n\n        // enable if it reaches here and there's no filter defined\n        if (!this.dateFilter) {\n            return true;\n        }\n\n        const firstOfYear = this.dateAdapter.createDate(year, 0, 1);\n\n        // If any date in the year is enabled count the year as enabled.\n        for (let date = firstOfYear; this.dateAdapter.getYear(date) === year;\n             date = this.dateAdapter.addCalendarDays(date, 1)) {\n            if (this.dateFilter(date)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Determines whether the user has the RTL layout direction. */\n    private isRtl() {\n        return this.dir && this.dir.value === 'rtl';\n    }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Inject,\n    Input,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    PAGE_DOWN,\n    PAGE_UP,\n    RIGHT_ARROW,\n    UP_ARROW,\n    SPACE\n} from '@ptsecurity/cdk/keycodes';\n\nimport { McCalendarBody, McCalendarCell } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-year-view',\n    templateUrl: 'year-view.html',\n    exportAs: 'mcYearView',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McYearView<D> implements AfterContentInit {\n    /** The date to display in this year view (everything other than the year is ignored). */\n    @Input()\n    get activeDate(): D {\n        return this._activeDate;\n    }\n\n    set activeDate(value: D) {\n        const oldActiveDate = this._activeDate;\n        const validDate =\n            this.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();\n        this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n        if (this.dateAdapter.getYear(oldActiveDate) !== this.dateAdapter.getYear(this._activeDate)) {\n            this.init();\n        }\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.selectedMonth = this.getMonthInCurrentYear(this._selected);\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** A function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Emits when a new month is selected. */\n    @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits the selected month. This doesn't imply a change on the selected date */\n    @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits when any date is activated. */\n    @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** The body of calendar table */\n    @ViewChild(McCalendarBody) mcCalendarBody: McCalendarBody;\n\n    /** Grid of calendar cells representing the months of the year. */\n    months: McCalendarCell[][];\n\n    /** The label for this year (e.g. \"2017\"). */\n    yearLabel: string;\n\n    /** The month in this year that today falls on. Null if today is in a different year. */\n    todayMonth: number | null;\n\n    /**\n     * The month in this year that the selected Date falls on.\n     * Null if the selected Date is in a different year.\n     */\n    selectedMonth: number | null;\n    private _activeDate: D;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() private dir?: Directionality\n    ) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        this._activeDate = this.dateAdapter.today();\n    }\n\n    ngAfterContentInit() {\n        this.init();\n    }\n\n    /** Handles when a new month is selected. */\n    onMonthSelected(month: number) {\n        const normalizedDate =\n            this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate), month, 1);\n\n        this.monthSelected.emit(normalizedDate);\n\n        const daysInMonth = this.dateAdapter.getNumDaysInMonth(normalizedDate);\n\n        this.selectedChange.emit(this.dateAdapter.createDate(\n            this.dateAdapter.getYear(this.activeDate), month,\n            Math.min(this.dateAdapter.getDate(this.activeDate), daysInMonth)));\n    }\n\n    /** Handles keydown events on the calendar body when calendar is in year view. */\n    handleCalendarBodyKeydown(event: KeyboardEvent): void {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n        const oldActiveDate = this._activeDate;\n        const isRtl = this.isRtl();\n\n        const VERTICAL_SHIFT = 4;\n        const PAGE_SHIFT = 10;\n        const MAX_MONTH_INDEX = 11;\n\n        // tslint:disable-next-line:deprecation\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, -VERTICAL_SHIFT);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, VERTICAL_SHIFT);\n                break;\n            case HOME:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate,\n                    -this.dateAdapter.getMonth(this._activeDate));\n                break;\n            case END:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate,\n                    MAX_MONTH_INDEX - this.dateAdapter.getMonth(this._activeDate));\n                break;\n            case PAGE_UP:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -PAGE_SHIFT : -1);\n                break;\n            case PAGE_DOWN:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(this._activeDate, event.altKey ? PAGE_SHIFT : 1);\n                break;\n            case ENTER:\n            case SPACE:\n                this.onMonthSelected(this.dateAdapter.getMonth(this._activeDate));\n                break;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n\n        if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n\n        this.focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n\n    /** Initializes this year view. */\n    init() {\n        this.selectedMonth = this.getMonthInCurrentYear(this.selected);\n        this.todayMonth = this.getMonthInCurrentYear(this.dateAdapter.today());\n        this.yearLabel = this.dateAdapter.getYearName(this.activeDate);\n\n        const monthNames = this.dateAdapter.getMonthNames('short');\n\n        // First row of months only contains 5 elements so we can fit the year label on the same row.\n        // tslint:disable-next-line:no-magic-numbers\n        this.months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map((row) => row.map(\n            (month) => this.createCellForMonth(month, monthNames[month])));\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.mcCalendarBody.focusActiveCell();\n    }\n\n    /**\n     * Gets the month in this year that the given Date falls on.\n     * Returns null if the given Date is in another year.\n     */\n    private getMonthInCurrentYear(date: D | null) {\n        return date && this.dateAdapter.getYear(date) === this.dateAdapter.getYear(this.activeDate) ?\n            this.dateAdapter.getMonth(date) : null;\n    }\n\n    /** Creates an McCalendarCell for the given month. */\n    private createCellForMonth(month: number, monthName: string) {\n        const ariaLabel = this.dateAdapter.format(\n            this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate), month, 1),\n            this.dateFormats.display.monthYearA11yLabel);\n\n        const newMonthName = monthName[0].toLocaleUpperCase() + monthName.substr(1);\n\n        return new McCalendarCell(\n            month, newMonthName, ariaLabel, this.shouldEnableMonth(month));\n    }\n\n    /** Whether the given month is enabled. */\n    private shouldEnableMonth(month: number) {\n\n        const activeYear = this.dateAdapter.getYear(this.activeDate);\n\n        if (month === undefined || month === null ||\n            this.isYearAndMonthAfterMaxDate(activeYear, month) ||\n            this.isYearAndMonthBeforeMinDate(activeYear, month)) {\n            return false;\n        }\n\n        if (!this.dateFilter) {\n            return true;\n        }\n\n        const firstOfMonth = this.dateAdapter.createDate(activeYear, month, 1);\n\n        // If any date in the month is enabled count the month as enabled.\n        for (let date = firstOfMonth; this.dateAdapter.getMonth(date) === month;\n             date = this.dateAdapter.addCalendarDays(date, 1)) {\n            if (this.dateFilter(date)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Tests whether the combination month/year is after this.maxDate, considering\n     * just the month and year of this.maxDate\n     */\n    private isYearAndMonthAfterMaxDate(year: number, month: number) {\n        if (this.maxDate) {\n            const maxYear = this.dateAdapter.getYear(this.maxDate);\n            const maxMonth = this.dateAdapter.getMonth(this.maxDate);\n\n            return year > maxYear || (year === maxYear && month > maxMonth);\n        }\n\n        return false;\n    }\n\n    /**\n     * Tests whether the combination month/year is before this.minDate, considering\n     * just the month and year of this.minDate\n     */\n    private isYearAndMonthBeforeMinDate(year: number, month: number) {\n        if (this.minDate) {\n            const minYear = this.dateAdapter.getYear(this.minDate);\n            const minMonth = this.dateAdapter.getMonth(this.minDate);\n\n            return year < minYear || (year === minYear && month < minMonth);\n        }\n\n        return false;\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Determines whether the user has the RTL layout direction. */\n    private isRtl() {\n        return this.dir && this.dir.value === 'rtl';\n    }\n}\n","import {\n    AfterContentInit,\n    AfterViewChecked,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Optional,\n    Output,\n    SimpleChanges,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport { ComponentPortal, IComponentType, Portal } from '@ptsecurity/cdk/portal';\nimport { Subject, Subscription } from 'rxjs';\n\nimport { McCalendarCellCssClasses } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\nimport { McDatepickerIntl } from './datepicker-intl';\nimport { McMonthView } from './month-view';\nimport { McMultiYearView, yearsPerPage } from './multi-year-view';\nimport { McYearView } from './year-view';\n\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type McCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for McCalendar */\n@Component({\n    selector: 'mc-calendar-header',\n    templateUrl: 'calendar-header.html',\n    exportAs: 'mcCalendarHeader',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCalendarHeader<D> {\n    constructor(private intl: McDatepickerIntl,\n                @Inject(forwardRef(() => McCalendar)) public calendar: McCalendar<D>,\n                @Optional() private dateAdapter: DateAdapter<D>,\n                @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n                changeDetectorRef: ChangeDetectorRef) {\n\n        this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n    }\n\n    /** The label for the current calendar view. */\n    get periodButtonText(): string {\n        if (this.calendar.currentView === 'month') {\n            const label = this.dateAdapter\n                .format(this.calendar.activeDate, this.dateFormats.display.monthYearLabel);\n\n            return label[0].toLocaleUpperCase() + label.substr(1);\n        }\n\n        if (this.calendar.currentView === 'year') {\n            return this.dateAdapter.getYearName(this.calendar.activeDate);\n        }\n\n        const activeYear = this.dateAdapter.getYear(this.calendar.activeDate);\n        const firstYearInView = this.dateAdapter.getYearName(\n            // tslint:disable-next-line:no-magic-numbers\n            this.dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n        const lastYearInView = this.dateAdapter.getYearName(\n            // tslint:disable-next-line:no-magic-numbers\n            this.dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n\n        return `${firstYearInView} \\u2013 ${lastYearInView}`;\n    }\n\n    get periodButtonLabel(): string {\n        return this.calendar.currentView === 'month' ?\n            this.intl.switchToMultiYearViewLabel : this.intl.switchToMonthViewLabel;\n    }\n\n    /** The label for the previous button. */\n    get prevButtonLabel(): string {\n        return {\n            month: this.intl.prevMonthLabel,\n            year: this.intl.prevYearLabel,\n            'multi-year': this.intl.prevMultiYearLabel\n        }[this.calendar.currentView];\n    }\n\n    /** The label for the next button. */\n    get nextButtonLabel(): string {\n        return {\n            month: this.intl.nextMonthLabel,\n            year: this.intl.nextYearLabel,\n            'multi-year': this.intl.nextMultiYearLabel\n        }[this.calendar.currentView];\n    }\n\n    /** Handles user clicks on the period label. */\n    currentPeriodClicked(): void {\n        this.calendar.currentView = this.calendar.currentView === 'month' ? 'multi-year' : 'month';\n    }\n\n    /** Handles user clicks on the previous button. */\n    previousClicked(): void {\n        this.calendar.activeDate = this.calendar.currentView === 'month' ?\n            this.dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this.dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView === 'year' ? -1 : -yearsPerPage\n            );\n    }\n\n    /** Handles user clicks on the next button. */\n    nextClicked(): void {\n        this.calendar.activeDate = this.calendar.currentView === 'month' ?\n            this.dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this.dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                this.calendar.currentView === 'year' ? 1 : yearsPerPage\n            );\n    }\n\n    /** Whether the previous period button is enabled. */\n    previousEnabled(): boolean {\n        if (!this.calendar.minDate) {\n            return true;\n        }\n\n        return !this.calendar.minDate ||\n            !this.isSameView(this.calendar.activeDate, this.calendar.minDate);\n    }\n\n    /** Whether the next period button is enabled. */\n    nextEnabled(): boolean {\n        return !this.calendar.maxDate ||\n            !this.isSameView(this.calendar.activeDate, this.calendar.maxDate);\n    }\n\n    /** Whether the two dates represent the same view in the current view mode (month or year). */\n    private isSameView(date1: D, date2: D): boolean {\n        if (this.calendar.currentView === 'month') {\n            return this.dateAdapter.getYear(date1) === this.dateAdapter.getYear(date2) &&\n                this.dateAdapter.getMonth(date1) === this.dateAdapter.getMonth(date2);\n        }\n        if (this.calendar.currentView === 'year') {\n            return this.dateAdapter.getYear(date1) === this.dateAdapter.getYear(date2);\n        }\n\n        // Otherwise we are in 'multi-year' view.\n        return Math.floor(this.dateAdapter.getYear(date1) / yearsPerPage) ===\n            Math.floor(this.dateAdapter.getYear(date2) / yearsPerPage);\n    }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-calendar',\n    templateUrl: 'calendar.html',\n    styleUrls: ['calendar.css'],\n    host: {\n        class: 'mc-calendar'\n    },\n    exportAs: 'mcCalendar',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n\n    /** A date representing the period (month or year) to start the calendar in. */\n    @Input()\n    get startAt(): D | null {\n        return this._startAt;\n    }\n\n    set startAt(value: D | null) {\n        this._startAt = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /**\n     * The current active date. This determines which time period is shown and which date is\n     * highlighted when using keyboard navigation.\n     */\n    get activeDate(): D {\n        return this.clampedActiveDate;\n    }\n\n    set activeDate(value: D) {\n        this.clampedActiveDate = this.dateAdapter.clampDate(value, this.minDate, this.maxDate);\n        this.stateChanges.next();\n    }\n\n    /** Whether the calendar is in month view. */\n    get currentView(): McCalendarView {\n        return this._currentView;\n    }\n\n    set currentView(value: McCalendarView) {\n        this._currentView = value;\n        this.moveFocusOnNextTick = true;\n    }\n\n    /** An input indicating the type of the header component, if set. */\n    @Input() headerComponent: IComponentType<any>;\n\n    /** A portal containing the header component type for this calendar. */\n    calendarHeaderPortal: Portal<any>;\n\n    /** Whether the calendar should be started in month or year view. */\n    @Input() startView: McCalendarView = 'month';\n\n    /** Function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Function that can be used to add custom CSS classes to dates. */\n    @Input() dateClass: (date: D) => McCalendarCellCssClasses;\n\n    /** Emits when the currently selected date changes. */\n    @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /**\n     * Emits the year chosen in multiyear view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /**\n     * Emits the month chosen in year view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits when any date is selected. */\n    @Output() readonly userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Reference to the current month view component. */\n    @ViewChild(McMonthView) monthView: McMonthView<D>;\n\n    /** Reference to the current year view component. */\n    @ViewChild(McYearView) yearView: McYearView<D>;\n\n    /** Reference to the current multi-year view component. */\n    @ViewChild(McMultiYearView) multiYearView: McMultiYearView<D>;\n\n    /**\n     * Emits whenever there is a state change that the header may need to respond to.\n     */\n    stateChanges = new Subject<void>();\n\n    private intlChanges: Subscription;\n\n    /**\n     * Used for scheduling that focus should be moved to the active cell on the next tick.\n     * We need to schedule it, rather than do it immediately, because we have to wait\n     * for Angular to re-evaluate the view children.\n     */\n    private moveFocusOnNextTick = false;\n    private _startAt: D | null;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n    private clampedActiveDate: D;\n    private _currentView: McCalendarView;\n\n    constructor(\n        intl: McDatepickerIntl,\n        @Optional() private dateAdapter: DateAdapter<D>,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        this.intlChanges = intl.changes.subscribe(() => {\n            changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        });\n    }\n\n    ngAfterContentInit() {\n        this.calendarHeaderPortal = new ComponentPortal(this.headerComponent || McCalendarHeader);\n        this.activeDate = this.startAt || this.dateAdapter.today();\n\n        // Assign to the private property since we don't want to move focus on init.\n        this._currentView = this.startView;\n    }\n\n    ngAfterViewChecked() {\n        if (this.moveFocusOnNextTick) {\n            this.moveFocusOnNextTick = false;\n            this.focusActiveCell();\n        }\n    }\n\n    ngOnDestroy() {\n        this.intlChanges.unsubscribe();\n        this.stateChanges.complete();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n        if (change && !change.firstChange) {\n            const view = this.getCurrentViewComponent();\n\n            if (view) {\n                // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n                // passed down to the view via data bindings which won't be up-to-date when we call `init`.\n                this.changeDetectorRef.detectChanges();\n                view.init();\n            }\n        }\n\n        this.stateChanges.next();\n    }\n\n    focusActiveCell() {\n        this.getCurrentViewComponent().focusActiveCell();\n    }\n\n    /** Updates today's date after an update of the active date */\n    updateTodaysDate() {\n        const view = this.currentView === 'month' ? this.monthView :\n            (this.currentView === 'year' ? this.yearView : this.multiYearView);\n\n        view.ngAfterContentInit();\n    }\n\n    /** Handles date selection in the month view. */\n    dateSelected(date: D): void {\n        if (!this.dateAdapter.sameDate(date, this.selected)) {\n            this.selectedChange.emit(date);\n        }\n    }\n\n    /** Handles year selection in the multiyear view. */\n    yearSelectedInMultiYearView(normalizedYear: D) {\n        this.yearSelected.emit(normalizedYear);\n    }\n\n    /** Handles month selection in the year view. */\n    monthSelectedInYearView(normalizedMonth: D) {\n        this.monthSelected.emit(normalizedMonth);\n    }\n\n    userSelected(): void {\n        this.userSelection.emit();\n    }\n\n    /** Handles year/month selection in the multi-year/year views. */\n    goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n        this.activeDate = date;\n        this.currentView = view;\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Returns the component instance that corresponds to the current calendar view. */\n    private getCurrentViewComponent() {\n        return this.monthView || this.yearView || this.multiYearView;\n    }\n}\n","import {\n    animate,\n    state,\n    style,\n    transition,\n    trigger,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n\n/**\n * Animations used by the mosaic datepicker.\n * @docs-private\n */\nexport const mcDatepickerAnimations: {\n    readonly transformPanel: AnimationTriggerMetadata;\n    readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n    /** Transforms the height of the datepicker's calendar. */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(1, 0.8)'\n        })),\n        transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1, 1)'\n        }))),\n        transition('* => void', animate('100ms linear', style({ opacity: 0 })))\n    ]),\n\n    /** Fades in the content of the calendar. */\n    fadeInCalendar: trigger('fadeInCalendar', [\n        state('void', style({ opacity: 0 })),\n        state('enter', style({ opacity: 1 })),\n\n        // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n        transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n    ])\n};\n\n// todo should be put into polyfils\n// https://github.com/angular/angular/issues/24769\nif (!Element.prototype.matches) {\n    Element.prototype.matches = (Element.prototype as any).msMatchesSelector;\n}\n","// tslint:disable:no-unbound-method\n// tslint:disable:no-magic-numbers\nimport { DOCUMENT } from '@angular/common';\nimport {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    Component,\n    ComponentRef,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { DateAdapter } from '@ptsecurity/cdk/datetime';\nimport { ESCAPE, UP_ARROW } from '@ptsecurity/cdk/keycodes';\nimport {\n    Overlay,\n    OverlayConfig,\n    OverlayRef,\n    IPositionStrategy,\n    IScrollStrategy\n} from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal, IComponentType } from '@ptsecurity/cdk/portal';\nimport {\n    CanColor,\n    CanColorCtor,\n    mixinColor,\n    ThemePalette\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { merge, Observable, Subject, Subscription } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\n\nimport { McCalendar } from './calendar';\nimport { McCalendarCellCssClasses } from './calendar-body';\nimport { mcDatepickerAnimations } from './datepicker-animations';\nimport { createMissingDateImplError } from './datepicker-errors';\nimport { McDatepickerInput } from './datepicker-input';\n\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MC_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-datepicker-scroll-strategy');\n\n/** @docs-private */\n// tslint:disable-next-line:naming-convention\nexport function MC_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => IScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_DATEPICKER_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_DATEPICKER_SCROLL_STRATEGY_FACTORY\n};\n\n// Boilerplate for applying mixins to McDatepickerContent.\n/** @docs-private */\nexport class McDatepickerContentBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McDatepickerContentMixinBase: CanColorCtor & typeof McDatepickerContentBase =\n    mixinColor(McDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * McCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n    selector: 'mc-datepicker__content',\n    templateUrl: 'datepicker-content.html',\n    styleUrls: ['datepicker-content.css'],\n    host: {\n        class: 'mc-datepicker__content',\n        '[@transformPanel]': '\"enter\"'\n    },\n    animations: [\n        mcDatepickerAnimations.transformPanel,\n        mcDatepickerAnimations.fadeInCalendar\n    ],\n    exportAs: 'mcDatepickerContent',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['color']\n})\nexport class McDatepickerContent<D> extends McDatepickerContentMixinBase\n    implements AfterViewInit, CanColor {\n\n    /** Reference to the internal calendar component. */\n    @ViewChild(McCalendar) calendar: McCalendar<D>;\n\n    /** Reference to the datepicker that created the overlay. */\n    datepicker: McDatepicker<D>;\n\n    /** Whether the datepicker is above or below the input. */\n    isAbove: boolean;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    ngAfterViewInit() {\n        this.calendar.focusActiveCell();\n    }\n}\n\n\n// TODO: We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"mcDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n    selector: 'mc-datepicker',\n    template: '',\n    exportAs: 'mcDatepicker',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    providers: [{ provide: McFormFieldControl, useExisting: McDatepicker }]\n})\nexport class McDatepicker<D> implements OnDestroy, CanColor {\n\n    /** The date to open the calendar to initially. */\n    @Input()\n    get startAt(): D | null {\n        // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n        // selected value is.\n        return this._startAt || (this.datepickerInput ? this.datepickerInput.value : null);\n    }\n\n    set startAt(value: D | null) {\n        this._startAt = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** Color palette to use on the datepicker's calendar. */\n    @Input()\n    get color(): ThemePalette {\n        // @ts-ignore:next-line\n        return this._color ||\n            (this.datepickerInput ? this.datepickerInput.getThemePalette() : undefined);\n    }\n\n    set color(value: ThemePalette) {\n        this._color = value;\n    }\n\n    /** Whether the datepicker pop-up should be disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled === undefined && this.datepickerInput ?\n            this.datepickerInput.disabled : !!this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        const newValue = coerceBooleanProperty(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this.disabledChange.next(newValue);\n        }\n    }\n\n    /** Whether the calendar is open. */\n    @Input()\n    get opened(): boolean {\n        return this._opened;\n    }\n\n    set opened(value: boolean) {\n        if (value) {\n            this.open();\n        } else {\n            this.close();\n        }\n    }\n\n    /** The currently selected date. */\n    get selected(): D | null {\n        return this.validSelected;\n    }\n\n    set selected(value: D | null) {\n        this.validSelected = value;\n    }\n\n    /** The minimum selectable date. */\n    get minDate(): D | null {\n        return this.datepickerInput && this.datepickerInput.min;\n    }\n\n    /** The maximum selectable date. */\n    get maxDate(): D | null {\n        return this.datepickerInput && this.datepickerInput.max;\n    }\n\n    get dateFilter(): (date: D | null) => boolean {\n        return this.datepickerInput && this.datepickerInput.dateFilter;\n    }\n\n\n    get value(): D | null {\n        return this.selected;\n    }\n\n    /** An input indicating the type of the custom header component for the calendar, if set. */\n    @Input() calendarHeaderComponent: IComponentType<any>;\n\n    /** The view that the calendar should start in. */\n    @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n    /**\n     * Emits selected year in multiyear view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /**\n     * Emits selected month in year view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n    @Input() panelClass: string | string[];\n\n    /** Function that can be used to add custom CSS classes to dates. */\n    @Input() dateClass: (date: D) => McCalendarCellCssClasses;\n\n    /** Emits when the datepicker has been opened. */\n    @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Emits when the datepicker has been closed. */\n    @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n    /** The id for the datepicker calendar. */\n    id: string = `mc-datepicker-${datepickerUid++}`;\n\n    /** A reference to the overlay when the calendar is opened as a popup. */\n    popupRef: OverlayRef;\n\n    /** The input element this datepicker is associated with. */\n    datepickerInput: McDatepickerInput<D>;\n\n    readonly stateChanges: Observable<void> = new Subject<void>();\n\n    /** Emits when the datepicker is disabled. */\n    readonly disabledChange = new Subject<boolean>();\n\n    /** Emits new selected date when selected date changes. */\n    readonly selectedChanged = new Subject<D>();\n    private scrollStrategy: () => IScrollStrategy;\n    private _startAt: D | null;\n    private _disabled: boolean;\n    private _opened = false;\n    private validSelected: D | null = null;\n    private _color: ThemePalette;\n\n    /** A portal containing the calendar for this datepicker. */\n    private calendarPortal: ComponentPortal<McDatepickerContent<D>>;\n\n    /** Reference to the component instantiated in popup mode. */\n    private popupComponentRef: ComponentRef<McDatepickerContent<D>> | null;\n\n    /** The element that was focused before the datepicker was opened. */\n    private focusedElementBeforeOpen: HTMLElement | null = null;\n\n    /** Subscription to value changes in the associated input element. */\n    private inputSubscription = Subscription.EMPTY;\n\n    constructor(private overlay: Overlay,\n                private ngZone: NgZone,\n                private viewContainerRef: ViewContainerRef,\n                @Inject(MC_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n                @Optional() private dateAdapter: DateAdapter<D>,\n                @Optional() private dir: Directionality,\n                @Optional() @Inject(DOCUMENT) private document: any) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        this.scrollStrategy = scrollStrategy;\n    }\n\n    ngOnDestroy() {\n        this.close();\n        this.inputSubscription.unsubscribe();\n        this.disabledChange.complete();\n\n        if (this.popupRef) {\n            this.popupRef.dispose();\n            this.popupComponentRef = null;\n        }\n    }\n\n    /** Selects the given date */\n    select(date: D): void {\n        const oldValue = this.selected;\n        this.selected = date;\n        if (!this.dateAdapter.sameDate(oldValue, this.selected)) {\n            this.selectedChanged.next(date);\n        }\n    }\n\n    /** Emits the selected year in multiyear view */\n    selectYear(normalizedYear: D): void {\n        this.yearSelected.emit(normalizedYear);\n    }\n\n    /** Emits selected month in year view */\n    selectMonth(normalizedMonth: D): void {\n        this.monthSelected.emit(normalizedMonth);\n    }\n\n    /**\n     * Register an input with this datepicker.\n     * @param input The datepicker input to register with this datepicker.\n     */\n    registerInput(input: McDatepickerInput<D>): void {\n        if (this.datepickerInput) {\n            throw Error('A McDatepicker can only be associated with a single input.');\n        }\n        this.datepickerInput = input;\n        this.inputSubscription =\n            this.datepickerInput.valueChange.subscribe((value: D | null) => this.selected = value);\n    }\n\n    /** Open the calendar. */\n    open(): void {\n        if (this._opened || this.disabled) {\n            return;\n        }\n        if (!this.datepickerInput) {\n            throw Error('Attempted to open an McDatepicker with no associated input.');\n        }\n        if (this.document) {\n            this.focusedElementBeforeOpen = this.document.activeElement;\n        }\n\n        this.openAsPopup();\n\n        this._opened = true;\n        this.openedStream.emit();\n    }\n\n    /** Close the calendar. */\n    close(): void {\n        if (!this._opened) {\n            return;\n        }\n\n        if (this.popupRef && this.popupRef.hasAttached()) {\n            this.popupRef.detach();\n        }\n\n        if (this.calendarPortal && this.calendarPortal.isAttached) {\n            this.calendarPortal.detach();\n        }\n\n        const completeClose = () => {\n            // The `_opened` could've been reset already if\n            // we got two events in quick succession.\n            if (this._opened) {\n                this._opened = false;\n                this.closedStream.emit();\n                this.focusedElementBeforeOpen = null;\n            }\n        };\n\n        if (this.focusedElementBeforeOpen &&\n            typeof this.focusedElementBeforeOpen.focus === 'function') {\n            // Because IE moves focus asynchronously, we can't count on it being restored before we've\n            // marked the datepicker as closed. If the event fires out of sequence and the element that\n            // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n            // able to close the calendar at all. We work around it by making the logic, that marks\n            // the datepicker as closed, async as well.\n            this.focusedElementBeforeOpen.focus();\n            setTimeout(completeClose);\n        } else {\n            completeClose();\n        }\n    }\n\n    /** Open the calendar as a popup. */\n    private openAsPopup(): void {\n        if (!this.calendarPortal) {\n            this.calendarPortal = new ComponentPortal<McDatepickerContent<D>>(McDatepickerContent,\n                this.viewContainerRef);\n        }\n\n        if (!this.popupRef) {\n            this.createPopup();\n        }\n\n        if (!this.popupRef.hasAttached()) {\n            this.popupComponentRef = this.popupRef.attach(this.calendarPortal);\n            this.popupComponentRef.instance.datepicker = this;\n            this.setColor();\n\n            // Update the position once the calendar has rendered.\n            this.ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n                this.popupRef.updatePosition();\n            });\n        }\n    }\n\n    /** Create the popup. */\n    private createPopup(): void {\n        const overlayConfig = new OverlayConfig({\n            positionStrategy: this.createPopupPositionStrategy(),\n            hasBackdrop: true,\n            backdropClass: 'mc-overlay-transparent-backdrop',\n            direction: this.dir,\n            scrollStrategy: this.scrollStrategy(),\n            panelClass: 'mc-datepicker__popup'\n        });\n\n        this.popupRef = this.overlay.create(overlayConfig);\n        this.popupRef.overlayElement.setAttribute('role', 'dialog');\n\n        merge(\n            this.popupRef.backdropClick(),\n            this.popupRef.detachments(),\n            this.popupRef.keydownEvents().pipe(filter((event) => {\n                // Closing on alt + up is only valid when there's an input associated with the datepicker.\n                // tslint:disable-next-line:deprecation\n                return event.keyCode === ESCAPE || (this.datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n            }))\n        ).subscribe(() => this.close());\n    }\n\n    /** Create the popup PositionStrategy. */\n    private createPopupPositionStrategy(): IPositionStrategy {\n        return this.overlay.position()\n            .flexibleConnectedTo(this.datepickerInput.elementRef)\n            .withTransformOriginOn('.mc-datepicker__content')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(8)\n            .withLockedPosition()\n            .withPositions([\n                {\n                    originX: 'start',\n                    originY: 'bottom',\n                    overlayX: 'start',\n                    overlayY: 'top'\n                },\n                {\n                    originX: 'start',\n                    originY: 'top',\n                    overlayX: 'start',\n                    overlayY: 'bottom'\n                },\n                {\n                    originX: 'end',\n                    originY: 'bottom',\n                    overlayX: 'end',\n                    overlayY: 'top'\n                },\n                {\n                    originX: 'end',\n                    originY: 'top',\n                    overlayX: 'end',\n                    overlayY: 'bottom'\n                }\n            ]);\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Passes the current theme color along to the calendar overlay. */\n    private setColor(): void {\n        const color = this.color;\n        if (this.popupComponentRef) {\n            this.popupComponentRef.instance.color = color;\n        }\n    }\n}\n","import {\n    Output,\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef, Input,\n    OnDestroy, EventEmitter,\n    ViewEncapsulation, HostBinding\n} from '@angular/core';\n\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { SPACE } from '@ptsecurity/cdk/keycodes';\n\n\n@Component({\n    selector: 'mc-card',\n    templateUrl: './card.component.html',\n    styleUrls: ['./card.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['color'],\n    host: {\n        class: 'mc-card',\n        '[class.mc-card_readonly]': 'readonly',\n        '[class.mc-card_selected]': 'selected',\n        '(keydown)': 'onKeyDown($event)',\n        '(click)': 'onClick($event)'\n    }\n})\nexport class McCard implements OnDestroy {\n    get tabIndex(): number | null {\n        return this.readonly ? null : this._tabIndex;\n    }\n\n    @HostBinding('attr.tabIndex')\n    @Input()\n    set tabIndex(value: number | null) {\n        this._tabIndex = value;\n    }\n\n    @Input()\n    readonly = false;\n\n    @Input()\n    selected = false;\n\n    @Output()\n    selectedChange = new EventEmitter<boolean>();\n\n    private _tabIndex: number | null = 0;\n\n    constructor(private _elementRef: ElementRef, private _focusMonitor: FocusMonitor) {\n        this._focusMonitor.monitor(this._elementRef.nativeElement, false);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this.hostElement.focus();\n    }\n\n    onClick($event: MouseEvent) {\n        if (!this.readonly) {\n            $event.stopPropagation();\n\n            this.selectedChange.emit(!this.selected);\n        }\n    }\n\n    private get hostElement() {\n        return this._elementRef.nativeElement;\n    }\n\n    onKeyDown($event: KeyboardEvent) {\n        switch ($event.keyCode) {\n            case SPACE:\n                if (!this.readonly) {\n                    $event.preventDefault();\n                    this.selectedChange.emit(!this.selected);\n                }\n                break;\n            default:\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McCard\n} from './card.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [McCard],\n    declarations: [McCard]\n})\nexport class McCardModule {}\n","import { InjectionToken } from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type McCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MC_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<McCheckboxClickAction>('mc-checkbox-click-action');\n","import {\n    AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport {\n    CanColor, CanColorCtor,\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\nimport { MC_CHECKBOX_CLICK_ACTION, McCheckboxClickAction } from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mc-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McCheckbox),\n    multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n    /** The initial state of the component before any user interaction. */\n    Init,\n    /** The state representing the component when it's becoming checked. */\n    Checked,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate\n}\n\n/** Change event object emitted by McCheckbox. */\nexport class McCheckboxChange {\n    /** The source McCheckbox of the event. */\n    source: McCheckbox;\n    /** The new `checked` value of the checkbox. */\n    checked: boolean;\n}\n\n// Boilerplate for applying mixins to McCheckbox.\n/** @docs-private */\nexport class McCheckboxBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\nexport const _McCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof McCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisabled(McCheckboxBase)));\n\n\n/**\n * A mosaic checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A McCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n */\n@Component({\n    selector: 'mc-checkbox',\n    templateUrl: 'checkbox.html',\n    styleUrls: ['checkbox.css'],\n    exportAs: 'mcCheckbox',\n    host: {\n        class: 'mc-checkbox',\n        '[id]': 'id',\n        '[attr.id]': 'id',\n        '[class.mc-indeterminate]': 'indeterminate',\n        '[class.mc-checked]': 'checked',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-checkbox-label-before]': 'labelPosition == \"before\"'\n    },\n    providers: [MC_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCheckbox extends _McCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex {\n\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     */\n    @Input('aria-label') ariaLabel: string = '';\n\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n    private _uniqueId: string = `mc-checkbox-${++nextUniqueId}`;\n\n    /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n    @Input() id: string = this._uniqueId;\n\n    /** Returns the unique id for the visual hidden input. */\n    get inputId(): string {\n        return `${this.id || this._uniqueId}-input`;\n    }\n\n    /** Whether the checkbox is required. */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    private _required: boolean;\n\n    /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n    @Input() labelPosition: 'before' | 'after' = 'after';\n\n    /** Name value will be applied to the input element if present */\n    @Input() name: string | null = null;\n\n    /** Event emitted when the checkbox's `checked` value changes. */\n    @Output() readonly change: EventEmitter<McCheckboxChange> =\n        new EventEmitter<McCheckboxChange>();\n\n    /** Event emitted when the checkbox's `indeterminate` value changes. */\n    @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** The value attribute of the native input element */\n    @Input() value: string;\n\n    /** The native `<input type=\"checkbox\">` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * @docs-private\n     */\n    _onTouched: () => any = () => {\n    }\n\n    private _currentAnimationClass: string = '';\n\n    private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n    private _controlValueAccessorChangeFn: (value: any) => void = () => {\n    }\n\n    constructor(elementRef: ElementRef,\n                private _changeDetectorRef: ChangeDetectorRef,\n                private _focusMonitor: FocusMonitor,\n                @Attribute('tabindex') tabIndex: string,\n                @Optional() @Inject(MC_CHECKBOX_CLICK_ACTION)\n                private _clickAction: McCheckboxClickAction) {\n        super(elementRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._inputElement.nativeElement)\n            .subscribe((focusOrigin) => this._onInputFocusChange(focusOrigin));\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    }\n\n    /**\n     * Whether the checkbox is checked.\n     */\n    @Input()\n    get checked(): boolean {\n        return this._checked;\n    }\n\n    set checked(value: boolean) {\n        if (value != this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _checked: boolean = false;\n\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value != this.disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    @Input()\n    get indeterminate(): boolean {\n        return this._indeterminate;\n    }\n\n    set indeterminate(value: boolean) {\n        const changed = value != this._indeterminate;\n        this._indeterminate = value;\n\n        if (changed) {\n            if (this._indeterminate) {\n                this._transitionCheckState(TransitionCheckState.Indeterminate);\n            } else {\n                this._transitionCheckState(\n                    this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n    }\n\n    private _indeterminate: boolean = false;\n\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // This method is getting called whenever the label of the checkbox changes.\n        // Since the checkbox uses the OnPush strategy we need to notify it about the change\n        // that has been recognized by the cdkObserveContent directive.\n        this._changeDetectorRef.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any) {\n        this.checked = !!value;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this._onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n    }\n\n    _getAriaChecked(): 'true' | 'false' | 'mixed' {\n        return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n    }\n\n    private _transitionCheckState(newState: TransitionCheckState) {\n        const oldState = this._currentCheckState;\n        const element: HTMLElement = this._elementRef.nativeElement;\n\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n\n        this._currentCheckState = newState;\n\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n        }\n    }\n\n    private _emitChangeEvent() {\n        const event = new McCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    }\n\n    /** Function is called whenever the focus changes for the input element. */\n    private _onInputFocusChange(focusOrigin: FocusOrigin) {\n        if (focusOrigin) {\n            this._onTouched();\n        }\n    }\n\n    /** Toggles the `checked` state of the checkbox. */\n    toggle(): void {\n        this.checked = !this.checked;\n    }\n\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event\n     */\n    _onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && this._clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && this._clickAction !== 'check') {\n\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n\n            this.toggle();\n            this._transitionCheckState(\n                this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        } else if (!this.disabled && this._clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mc-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n\n    /** Focuses the checkbox. */\n    focus(): void {\n        this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n    }\n\n    _onInteractionEvent(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n}\n","import {\n    Directive,\n    forwardRef,\n    Provider\n} from '@angular/core';\nimport {\n    CheckboxRequiredValidator,\n    NG_VALIDATORS\n} from '@angular/forms';\n\n\nexport const MC_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McCheckboxRequiredValidator),\n    multi: true\n};\n\n/**\n * Validator for Mosaic checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mc-checkbox`.\n */\n@Directive({\n    selector: `mc-checkbox[required][formControlName],\n             mc-checkbox[required][formControl], mc-checkbox[required][ngModel]`,\n    providers: [MC_CHECKBOX_REQUIRED_VALIDATOR],\n    host: { '[attr.required]': 'required ? \"\" : null' }\n})\nexport class McCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McCheckbox } from './checkbox';\nimport { McCheckboxRequiredValidator } from './checkbox-required-validator';\n\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [McCheckbox, McCheckboxRequiredValidator],\n    declarations: [McCheckbox, McCheckboxRequiredValidator]\n})\nexport class McCheckboxModule {\n}\n","import { InjectionToken } from '@angular/core';\n\n\nexport const MC_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{ value: any }>('MC_INPUT_VALUE_ACCESSOR');\n","function sanitizeNumber(value: number): number | null {\n    return !isFinite(value) || isNaN(value)\n        ? null\n        : value;\n}\n\nfunction getPrecision(value: number): number {\n    const arr = value.toString().split('.');\n\n    return arr.length === 1\n        ? 1\n        // tslint:disable-next-line:no-magic-numbers\n        :  Math.pow(10, arr[1].length);\n}\n\nfunction add(value1: number, value2: number) {\n    const precision = Math.max(getPrecision(value1), getPrecision(value2));\n\n    const res = (value1 * precision + value2 * precision) / precision;\n\n    return sanitizeNumber(res);\n}\n\nexport const stepUp = (value: number | null,\n                       max: number,\n                       min: number,\n                       step: number\n): number | null => {\n    let res;\n\n    if (value === null) {\n        res = add(min, step);\n\n        return res === null ? null : Math.min(res, max);\n    }\n\n    res = add(value, step);\n\n    return res === null ? null : Math.max(Math.min(res, max), min);\n};\n\nexport const stepDown = (value: number | null,\n                         max: number,\n                         min: number,\n                         step: number\n): number | null => {\n    let res;\n\n    if (value === null) {\n        res = add(max, -step);\n\n        return res === null ? null : Math.max(res, min);\n    }\n\n    res = add(value, -step);\n\n    return res === null ? null : Math.min(Math.max(res, min), max);\n};\n","import {\n    Attribute,\n    Directive, DoCheck, ElementRef, Inject, Input, OnChanges,\n    OnDestroy, Optional, Self\n} from '@angular/core';\nimport {\n    FormGroupDirective,\n    NgControl,\n    NgForm, NgModel\n} from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport {\n    END, C, V, X, A, DELETE, BACKSPACE, TAB, ENTER,\n    ESCAPE, ZERO, NINE, NUMPAD_ZERO, NUMPAD_NINE, NUMPAD_MINUS, DASH,\n    FF_MINUS, LEFT_ARROW, RIGHT_ARROW, HOME, UP_ARROW, DOWN_ARROW, F1, F12\n} from '@ptsecurity/cdk/keycodes';\nimport { getSupportedInputTypes, Platform } from '@ptsecurity/cdk/platform';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl, McFormFieldNumberControl } from '@ptsecurity/mosaic/form-field';\nimport { Subject } from 'rxjs';\n\nimport { getMcInputUnsupportedTypeError } from './input-errors';\nimport { MC_INPUT_VALUE_ACCESSOR } from './input-value-accessor';\nimport { stepDown, stepUp } from './stepperUtils';\n\n\nconst MC_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\n\nexport const BIG_STEP = 10;\nexport const SMALL_STEP = 1;\n\nlet nextUniqueId = 0;\n\nexport class McInputBase {\n    constructor(public defaultErrorStateMatcher: ErrorStateMatcher,\n                public parentForm: NgForm,\n                public parentFormGroup: FormGroupDirective,\n                public ngControl: NgControl) {\n    }\n}\n\nexport const _McInputMixinBase: CanUpdateErrorStateCtor & typeof McInputBase = mixinErrorState(McInputBase);\n\n\n@Directive({\n    selector: `input[mcInput][type=\"number\"]`,\n    exportAs: 'mcNumericalInput',\n    providers: [NgModel, { provide: McFormFieldNumberControl, useExisting: McNumberInput }],\n    host: {\n        '(blur)': '_focusChanged(false)',\n        '(focus)': '_focusChanged(true)',\n        '(paste)': 'onPaste($event)',\n        '(keydown)': 'onKeyDown($event)'\n    }\n})\nexport class McNumberInput implements McFormFieldNumberControl<any> {\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    @Input()\n    bigStep: number;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    @Input()\n    step: number;\n\n    @Input()\n    min: number;\n\n    @Input()\n    max: number;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    value: any;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    private readonly _host: HTMLInputElement;\n\n    constructor(\n        private _platform: Platform ,\n        private _elementRef: ElementRef,\n        private _model: NgModel,\n        @Attribute('step') step: string,\n        @Attribute('big-step') bigStep: string,\n        @Attribute('min') min: string,\n        @Attribute('max') max: string\n    ) {\n        this.step = this.isDigit(step) ? parseFloat(step) : SMALL_STEP;\n        this.bigStep = this.isDigit(bigStep) ? parseFloat(bigStep) : BIG_STEP;\n        this.min = this.isDigit(min) ? parseFloat(min) : -Infinity;\n        this.max = this.isDigit(max) ? parseFloat(max) : Infinity;\n\n        this._host = this._elementRef.nativeElement;\n\n        const self = this;\n\n        if ('valueAsNumber' in this._host) {\n            Object.defineProperty(Object.getPrototypeOf(this._host), 'valueAsNumber', {\n                // tslint:disable-next-line:no-reserved-keywords\n                get() {\n                    const res = parseFloat(self.normalizeSplitter(this.value));\n\n                    return isNaN(res) ? null : res;\n                }\n            });\n        }\n    }\n\n    _focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent) {\n        // tslint:disable-next-line:deprecation\n        const keyCode = event.keyCode;\n\n        const isCtrlA = (e) => e.keyCode === A && (e.ctrlKey || e.metaKey);\n        const isCtrlC = (e) => e.keyCode === C && (e.ctrlKey || e.metaKey);\n        const isCtrlV = (e) => e.keyCode === V && (e.ctrlKey || e.metaKey);\n        const isCtrlX = (e) => e.keyCode === X && (e.ctrlKey || e.metaKey);\n\n        const isFKey = (e) => e.keyCode >= F1 && e.keyCode <= F12;\n\n        const isNumber = (e) => (e.keyCode >= ZERO && e.keyCode <= NINE) ||\n            (e.keyCode >= NUMPAD_ZERO && e.keyCode <= NUMPAD_NINE);\n\n        const minuses = [NUMPAD_MINUS, DASH, FF_MINUS];\n        const serviceKeys = [DELETE, BACKSPACE, TAB, ESCAPE, ENTER];\n        const arrows = [LEFT_ARROW, RIGHT_ARROW];\n        const allowedKeys =  [HOME, END].concat(arrows).concat(serviceKeys).concat(minuses);\n\n        const isIEPeriod = (e) => e.key === '.' || e.key === 'Decimal';\n        const isNotIEPeriod = (e) => e.key === '.' || e.key === ',';\n\n        // Decimal is for IE\n        const isPeriod = (e) => this._platform.EDGE || this._platform.TRIDENT\n            ? isIEPeriod(e)\n            : isNotIEPeriod(e);\n\n        if (allowedKeys.indexOf(keyCode) !== -1 ||\n            isCtrlA(event) ||\n            isCtrlC(event) ||\n            isCtrlV(event) ||\n            isCtrlX(event) ||\n            isFKey(event) ||\n            isPeriod(event)\n        ) {\n            // let it happen, don't do anything\n            return;\n        }\n        // Ensure that it is not a number and stop the keypress\n        if (event.shiftKey || !isNumber(event)) {\n            event.preventDefault();\n\n            // process steps\n            const step = event.shiftKey ? this.bigStep : this.step;\n\n            if (keyCode === UP_ARROW) {\n                this.stepUp(step);\n            }\n\n            if (keyCode === DOWN_ARROW) {\n                this.stepDown(step);\n            }\n        }\n    }\n\n    onPaste(event) {\n        let value = event.clipboardData.getData('text');\n        value = this.normalizeSplitter(value);\n\n        if (!this.isDigit(value)) {\n            event.preventDefault();\n        }\n    }\n\n    stepUp(step: number) {\n        this._elementRef.nativeElement.focus();\n        const res = stepUp(this._host.valueAsNumber, this.max, this.min, step);\n        this._host.value = res === null ? '' : res.toString();\n        this._model.update.emit(this._host.valueAsNumber);\n    }\n\n    stepDown(step: number) {\n        this._elementRef.nativeElement.focus();\n        const res = stepDown(this._host.valueAsNumber, this.max, this.min, step);\n        this._host.value = res === null ? '' : res.toString();\n        this._model.update.emit(this._host.valueAsNumber);\n    }\n\n    private normalizeSplitter(value: string): string {\n        return value ? value.replace(/,/g, '.') : value;\n    }\n\n    private isDigit(value: string): boolean {\n        return this.isFloat(value) || this.isInt(value);\n    }\n\n    private isFloat(value: string): boolean {\n        return /^-?\\d+\\.\\d+$/.test(value);\n    }\n\n    private isInt(value: string): boolean {\n        return /^-?\\d+$/.test(value);\n    }\n}\n\n@Directive({\n    selector: `input[mcInput]`,\n    exportAs: 'mcInput',\n    host: {\n        class: 'mc-input',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '(blur)': '_focusChanged(false)',\n        '(focus)': '_focusChanged(true)',\n        '(input)': '_onInput()'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McInput }]\n})\nexport class McInput extends _McInputMixinBase implements McFormFieldControl<any>, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-input';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this._uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    // tslint:disable no-reserved-keywords\n    /** Input type of the element. */\n    @Input()\n    get type(): string {\n        return this._type;\n    }\n\n    set type(value: string) {\n        this._type = value || 'text';\n        this._validateType();\n\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    // tslint:enable no-reserved-keywords\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this._inputValueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n\n    protected _uid = `mc-input-${nextUniqueId++}`;\n    protected _previousNativeValue: any;\n    protected _disabled = false;\n    protected _id: string;\n    protected _required = false;\n    protected _type = 'text';\n    protected _neverEmptyInputTypes = [\n        'date',\n        'datetime',\n        'datetime-local',\n        'month',\n        'time',\n        'week'\n    ].filter((t) => getSupportedInputTypes().has(t));\n\n    private _inputValueAccessor: { value: any };\n\n    constructor(protected _elementRef: ElementRef,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() parentForm: NgForm,\n                @Optional() parentFormGroup: FormGroupDirective,\n                defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_INPUT_VALUE_ACCESSOR) inputValueAccessor: any) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n        this._previousNativeValue = this.value;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n    }\n\n    /** Focuses the input. */\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Does some manual dirty checking on the native input `value` property. */\n    protected _dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Make sure the input is a supported type. */\n    protected _validateType() {\n        if (MC_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n            throw getMcInputUnsupportedTypeError(this._type);\n        }\n    }\n\n    /** Checks whether the input type is one of the types that are never empty. */\n    protected _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n\n    /** Checks whether the input is invalid based on the native validation. */\n    protected _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        const validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n\n        return validity && validity.badInput;\n    }\n}\n\n@Directive({\n    selector: 'input[mcInputMonospace]',\n    exportAs: 'McInputMonospace',\n    host: { class: 'mc-input_monospace' }\n})\nexport class McInputMono {\n}\n","import { Directive, forwardRef, Input, OnChanges, Provider, SimpleChanges } from '@angular/core';\nimport { AbstractControl, NG_VALIDATORS, ValidationErrors, Validator, ValidatorFn, Validators } from '@angular/forms';\n\n\nexport const MIN_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MinValidator),\n    multi: true\n};\n\n/**\n * A directive which installs the {@link MinValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `min` attribute.\n *\n * @experimental\n */\n@Directive({\n    selector: '[min][formControlName],[min][formControl],[min][ngModel]',\n    providers: [MIN_VALIDATOR],\n    host: {'[attr.min]': 'min ? min : null'}\n})\nexport class MinValidator implements Validator, OnChanges {\n\n    @Input() min: string;\n    private _validator: ValidatorFn;\n    private _onChange: () => void;\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('min' in changes) {\n            this._createValidator();\n            if (this._onChange) { this._onChange(); }\n        }\n    }\n\n    validate(c: AbstractControl): ValidationErrors | null { return this._validator(c); }\n\n    registerOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n\n    private _createValidator(): void { this._validator = Validators.min(parseInt(this.min, 10)); }\n}\n\n\nexport const MAX_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MaxValidator),\n    multi: true\n};\n\n/**\n * A directive which installs the {@link MaxValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `min` attribute.\n *\n * @experimental\n */\n@Directive({\n    selector: '[max][formControlName],[max][formControl],[max][ngModel]',\n    providers: [MAX_VALIDATOR],\n    host: {\n        '[attr.max]': 'max ? max : null'\n    }\n})\nexport class MaxValidator implements Validator,\n    OnChanges {\n\n    @Input() max: string;\n    private _validator: ValidatorFn;\n    private _onChange: () => void;\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('max' in changes) {\n            this._createValidator();\n            if (this._onChange) { this._onChange(); }\n        }\n    }\n\n    validate(c: AbstractControl): ValidationErrors | null { return this._validator(c); }\n\n    registerOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n\n    private _createValidator(): void { this._validator = Validators.max(parseInt(this.max, 10)); }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McInput, McInputMono, McNumberInput } from './input';\nimport { MaxValidator, MinValidator } from './input-number-validators';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule, FormsModule],\n    exports: [McInput, McNumberInput, McInputMono, MinValidator, MaxValidator],\n    declarations: [McInput, McNumberInput, McInputMono, MinValidator, MaxValidator ]\n})\nexport class McInputModule {\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({ providedIn: 'root' })\nexport class McDatepickerIntl {\n    /**\n     * Stream that emits whenever the labels here are changed. Use this to notify\n     * components if the labels have changed after initialization.\n     */\n    readonly changes: Subject<void> = new Subject<void>();\n\n    /** A label for the calendar popup (used by screen readers). */\n    calendarLabel: string = 'Calendar';\n\n    /** A label for the button used to open the calendar popup (used by screen readers). */\n    openCalendarLabel: string = 'Open calendar';\n\n    /** A label for the previous month button (used by screen readers). */\n    prevMonthLabel: string = 'Previous month';\n\n    /** A label for the next month button (used by screen readers). */\n    nextMonthLabel: string = 'Next month';\n\n    /** A label for the previous year button (used by screen readers). */\n    prevYearLabel: string = 'Previous year';\n\n    /** A label for the next year button (used by screen readers). */\n    nextYearLabel: string = 'Next year';\n\n    /** A label for the previous multi-year button (used by screen readers). */\n    prevMultiYearLabel: string = 'Previous 20 years';\n\n    /** A label for the next multi-year button (used by screen readers). */\n    nextMultiYearLabel: string = 'Next 20 years';\n\n    /** A label for the 'switch to month view' button (used by screen readers). */\n    switchToMonthViewLabel: string = 'Choose date';\n\n    /** A label for the 'switch to year view' button (used by screen readers). */\n    switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","// tslint:disable:no-magic-numbers\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    Output,\n    ViewEncapsulation,\n    NgZone,\n    OnChanges,\n    SimpleChanges\n} from '@angular/core';\nimport { take } from 'rxjs/operators';\n\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type McCalendarCellCssClasses = string | string[] | Set<string> | { [key: string]: any };\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class McCalendarCell {\n    constructor(\n        public value: number,\n        public displayValue: string,\n        public ariaLabel: string,\n        public enabled: boolean,\n        public cssClasses?: McCalendarCellCssClasses\n    ) {\n    }\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n    selector: '[mc-calendar-body]',\n    templateUrl: 'calendar-body.html',\n    styleUrls: ['calendar-body.css'],\n    host: {\n        class: 'mc-calendar__body',\n        role: 'grid',\n        'aria-readonly': 'true'\n    },\n    exportAs: 'mcCalendarBody',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCalendarBody implements OnChanges {\n    /** The label for the table. (e.g. \"Jan 2017\"). */\n    @Input() label: string;\n\n    /** The cells to display in the table. */\n    @Input() rows: McCalendarCell[][];\n\n    /** The value in the table that corresponds to today. */\n    @Input() todayValue: number;\n\n    /** The value in the table that is currently selected. */\n    @Input() selectedValue: number;\n\n    /** The minimum number of free cells needed to fit the label in the first row. */\n    @Input() labelMinRequiredCells: number;\n\n    /** The number of columns in the table. */\n    @Input() numCols = 7;\n\n    /** The cell number of the active cell in the table. */\n    @Input() activeCell = 0;\n\n    /**\n     * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n     * maintained even as the table resizes.\n     */\n    @Input() cellAspectRatio = 1;\n\n    /** Emits when a new value is selected. */\n    @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n    /** The number of blank cells to put at the beginning for the first row. */\n    firstRowOffset: number;\n\n    /** Padding for the individual date cells. */\n    cellPadding: string;\n\n    /** Width of an individual cell. */\n    cellWidth: string;\n\n    constructor(private elementRef: ElementRef<HTMLElement>, private ngZone: NgZone) {\n    }\n\n    cellClicked(cell: McCalendarCell): void {\n        if (cell.enabled) {\n            this.selectedValueChange.emit(cell.value);\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const columnChanges = changes.numCols;\n        // tslint:disable-next-line:no-this-assignment\n        const { rows, numCols } = this;\n\n        if (changes.rows || columnChanges) {\n            this.firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n        }\n\n        if (changes.cellAspectRatio || columnChanges || !this.cellPadding) {\n            this.cellPadding = `${this.cellAspectRatio * 50 / numCols}%`;\n        }\n\n        if (columnChanges || !this.cellWidth) {\n            this.cellWidth = `${100 / numCols}%`;\n        }\n    }\n\n    isActiveCell(rowIndex: number, colIndex: number): boolean {\n        let cellNumber = rowIndex * this.numCols + colIndex;\n\n        // Account for the fact that the first row may not have as many cells.\n        if (rowIndex) {\n            cellNumber -= this.firstRowOffset;\n        }\n\n        return cellNumber === this.activeCell;\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.ngZone.runOutsideAngular(() => {\n            this.ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n                const activeCell: HTMLElement | null =\n                    this.elementRef.nativeElement.querySelector('.mc-calendar__body_active');\n\n                if (activeCell) {\n                    activeCell.focus();\n                }\n            });\n        });\n    }\n}\n","// tslint:disable:no-magic-numbers\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Inject,\n    Input,\n    Optional,\n    Output,\n    ViewEncapsulation,\n    ViewChild\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    PAGE_DOWN,\n    PAGE_UP,\n    RIGHT_ARROW,\n    UP_ARROW,\n    SPACE\n} from '@ptsecurity/cdk/keycodes';\n\nimport { McCalendarBody, McCalendarCell, McCalendarCellCssClasses } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-month-view',\n    templateUrl: 'month-view.html',\n    exportAs: 'mcMonthView',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McMonthView<D> implements AfterContentInit {\n    /**\n     * The date to display in this month view (everything other than the month and year is ignored).\n     */\n    @Input()\n    get activeDate(): D {\n        return this._activeDate;\n    }\n\n    set activeDate(value: D) {\n        const oldActiveDate = this._activeDate;\n        const validDate =\n            this.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();\n        this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n        if (!this.hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n            this.init();\n        }\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.selectedDate = this.getDateInCurrentMonth(this._selected);\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** Function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Function that can be used to add custom CSS classes to dates. */\n    @Input() dateClass: (date: D) => McCalendarCellCssClasses;\n\n    /** Emits when a new date is selected. */\n    @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n    /** Emits when any date is selected. */\n    @Output() readonly userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Emits when any date is activated. */\n    @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** The body of calendar table */\n    @ViewChild(McCalendarBody) mcCalendarBody: McCalendarBody;\n\n    /** The label for this month (e.g. \"January 2017\"). */\n    monthLabel: string;\n\n    /** Grid of calendar cells representing the dates of the month. */\n    weeks: McCalendarCell[][];\n\n    /** The number of blank cells in the first row before the 1st of the month. */\n    firstWeekOffset: number;\n\n    /**\n     * The date of the month that the currently selected Date falls on.\n     * Null if the currently selected Date is in another month.\n     */\n    selectedDate: number | null;\n\n    /** The date of the month that today falls on. Null if today is in another month. */\n    todayDate: number | null;\n\n    /** The names of the weekdays. */\n    weekdays: { long: string; narrow: string }[];\n    private _activeDate: D;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() private dir?: Directionality\n    ) {\n\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        const firstDayOfWeek = this.dateAdapter.getFirstDayOfWeek();\n        const narrowWeekdays = this.dateAdapter.getDayOfWeekNames('narrow');\n        const longWeekdays = this.dateAdapter.getDayOfWeekNames('long');\n\n        // Rotate the labels for days of the week based on the configured first day of the week.\n        const weekdays = longWeekdays.map((long, i) => {\n            return { long, narrow: narrowWeekdays[i] };\n        });\n        this.weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n        this._activeDate = this.dateAdapter.today();\n    }\n\n    ngAfterContentInit() {\n        this.init();\n    }\n\n    /** Handles when a new date is selected. */\n    dateSelected(date: number) {\n        if (this.selectedDate !== date) {\n            const selectedYear = this.dateAdapter.getYear(this.activeDate);\n            const selectedMonth = this.dateAdapter.getMonth(this.activeDate);\n            const selectedDate = this.dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n            this.selectedChange.emit(selectedDate);\n        }\n\n        this.userSelection.emit();\n    }\n\n    /** Handles keydown events on the calendar body when calendar is in month view. */\n    handleCalendarBodyKeydown(event: KeyboardEvent): void {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n        const oldActiveDate = this._activeDate;\n        const isRtl = this.isRtl();\n\n        // tslint:disable-next-line:deprecation\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, -7);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, 7);\n                break;\n            case HOME:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate,\n                    1 - this.dateAdapter.getDate(this._activeDate));\n                break;\n            case END:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate,\n                    (this.dateAdapter.getNumDaysInMonth(this._activeDate) -\n                        this.dateAdapter.getDate(this._activeDate)));\n                break;\n            case PAGE_UP:\n                this.activeDate = event.altKey ?\n                    this.dateAdapter.addCalendarYears(this._activeDate, -1) :\n                    this.dateAdapter.addCalendarMonths(this._activeDate, -1);\n                break;\n            case PAGE_DOWN:\n                this.activeDate = event.altKey ?\n                    this.dateAdapter.addCalendarYears(this._activeDate, 1) :\n                    this.dateAdapter.addCalendarMonths(this._activeDate, 1);\n                break;\n            case ENTER:\n            case SPACE:\n                if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n                    this.dateSelected(this.dateAdapter.getDate(this._activeDate));\n                    this.userSelection.emit();\n                    // Prevent unexpected default actions such as form submission.\n                    event.preventDefault();\n                }\n\n                return;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n\n        if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n\n        this.focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n\n    /** Initializes this month view. */\n    init() {\n        this.selectedDate = this.getDateInCurrentMonth(this.selected);\n        this.todayDate = this.getDateInCurrentMonth(this.dateAdapter.today());\n        this.monthLabel =\n            this.dateAdapter.getMonthNames('short')[this.dateAdapter.getMonth(this.activeDate)];\n\n        this.monthLabel = this.monthLabel[0].toLocaleUpperCase() + this.monthLabel.substr(1);\n\n        const firstOfMonth = this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate),\n            this.dateAdapter.getMonth(this.activeDate), 1);\n        this.firstWeekOffset =\n            (DAYS_PER_WEEK + this.dateAdapter.getDayOfWeek(firstOfMonth) -\n                this.dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n        this.createWeekCells();\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.mcCalendarBody.focusActiveCell();\n    }\n\n    /** Creates McCalendarCells for the dates in this month. */\n    private createWeekCells() {\n        const daysInMonth = this.dateAdapter.getNumDaysInMonth(this.activeDate);\n        const dateNames = this.dateAdapter.getDateNames();\n\n        this.weeks = [[]];\n\n        for (let i = 0, cell = this.firstWeekOffset; i < daysInMonth; i++, cell++) {\n            if (cell === DAYS_PER_WEEK) {\n                this.weeks.push([]);\n                cell = 0;\n            }\n            const date = this.dateAdapter.createDate(\n                this.dateAdapter.getYear(this.activeDate),\n                this.dateAdapter.getMonth(this.activeDate), i + 1);\n            const enabled = this.shouldEnableDate(date);\n            const ariaLabel = this.dateAdapter.format(date, this.dateFormats.display.dateA11yLabel);\n            const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n            this.weeks[this.weeks.length - 1]\n                .push(new McCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n        }\n    }\n\n    /** Date filter for the month */\n    private shouldEnableDate(date: D): boolean {\n        return !!date &&\n            (!this.dateFilter || this.dateFilter(date)) &&\n            (!this.minDate || this.dateAdapter.compareDate(date, this.minDate) >= 0) &&\n            (!this.maxDate || this.dateAdapter.compareDate(date, this.maxDate) <= 0);\n    }\n\n    /**\n     * Gets the date in this month that the given Date falls on.\n     * Returns null if the given Date is in another month.\n     */\n    private getDateInCurrentMonth(date: D | null): number | null {\n        return date && this.hasSameMonthAndYear(date, this.activeDate) ?\n            this.dateAdapter.getDate(date) : null;\n    }\n\n    /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n    private hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n        return !!(d1 && d2 && this.dateAdapter.getMonth(d1) === this.dateAdapter.getMonth(d2) &&\n            this.dateAdapter.getYear(d1) === this.dateAdapter.getYear(d2));\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Determines whether the user has the RTL layout direction. */\n    private isRtl() {\n        return this.dir && this.dir.value === 'rtl';\n    }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ActiveDescendantKeyManager } from '@ptsecurity/cdk/a11y';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { MC_OPTION_PARENT_COMPONENT, McOptgroup, McOption } from '@ptsecurity/mosaic/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet uniqueAutocompleteIdCounter = 0;\n\nexport class McAutocompleteSelectedEvent {\n    constructor(public source: McAutocomplete, public option: McOption) {}\n}\n\n/** Default `mc-autocomplete` options that can be overridden. */\n// tslint:disable-next-line naming-convention\nexport interface McAutocompleteDefaultOptions {\n    /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n    autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mc-autocomplete`. */\nexport const MC_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<McAutocompleteDefaultOptions>('mc-autocomplete-default-options', {\n        providedIn: 'root',\n        factory: MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY\n    });\n\n// tslint:disable-next-line naming-convention\nexport function MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): McAutocompleteDefaultOptions {\n    return { autoActiveFirstOption: true };\n}\n\n@Component({\n    selector: 'mc-autocomplete',\n    exportAs: 'mcAutocomplete',\n    templateUrl: 'autocomplete.html',\n    styleUrls: ['autocomplete.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: { class: 'mc-autocomplete' },\n    providers: [\n        { provide: MC_OPTION_PARENT_COMPONENT, useExisting: McAutocomplete }\n    ]\n})\nexport class McAutocomplete implements AfterContentInit {\n    /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n    id: string = `mc-autocomplete-${uniqueAutocompleteIdCounter++}`;\n\n    /** Manages active item in option list based on key events. */\n    keyManager: ActiveDescendantKeyManager<McOption>;\n\n    /** Whether the autocomplete panel should be visible, depending on option length. */\n    showPanel: boolean = false;\n\n    @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n    @ViewChild('panel') panel: ElementRef;\n\n    @ContentChildren(McOption, { descendants: true }) options: QueryList<McOption>;\n\n    @ContentChildren(McOptgroup) optionGroups: QueryList<McOptgroup>;\n\n    /** Function that maps an option's control value to its display value in the trigger. */\n    @Input() displayWith: ((value: any) => string) | null = null;\n\n    /**\n     * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n     * match the width of its host.\n     */\n    @Input() panelWidth: string | number;\n\n    /** Event that is emitted whenever an option from the list is selected. */\n    @Output() readonly optionSelected: EventEmitter<McAutocompleteSelectedEvent> =\n        new EventEmitter<McAutocompleteSelectedEvent>();\n\n    /** Event that is emitted when the autocomplete panel is opened. */\n    @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Event that is emitted when the autocomplete panel is closed. */\n    @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n    /**\n     * Takes classes set on the host mc-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    get classList() {\n        return this._classList;\n    }\n\n    @Input('class')\n    set classList(value: string) {\n        if (value && value.length) {\n            value.split(' ')\n                .forEach((className) => this._classList[className.trim()] = true);\n\n            this.elementRef.nativeElement.className = '';\n        }\n    }\n\n    private _classList: any = {};\n\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MC_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     */\n    @Input()\n    get autoActiveFirstOption(): boolean {\n        return this._autoActiveFirstOption;\n    }\n\n    set autoActiveFirstOption(value: boolean) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n\n    private _autoActiveFirstOption: boolean;\n\n    get isOpen(): boolean {\n        return this._isOpen && this.showPanel;\n    }\n\n    set isOpen(value: boolean) {\n        this._isOpen = value;\n    }\n\n    private _isOpen: boolean = false;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        private elementRef: ElementRef<HTMLElement>,\n        @Inject(MC_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: McAutocompleteDefaultOptions\n    ) {\n        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    }\n\n    ngAfterContentInit() {\n        this.keyManager = new ActiveDescendantKeyManager<McOption>(this.options);\n        this.setVisibility();\n    }\n\n    setScrollTop(scrollTop: number): void {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n\n    getScrollTop(): number {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n\n    setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._classList['mc-autocomplete_visible'] = this.showPanel;\n        this._classList['mc-autocomplete_hidden'] = !this.showPanel;\n\n        this.changeDetectorRef.markForCheck();\n    }\n\n    emitSelectEvent(option: McOption): void {\n        const event = new McAutocompleteSelectedEvent(this, option);\n\n        this.optionSelected.emit(event);\n    }\n\n    onKeydown(event: KeyboardEvent): any {\n        this.keyManager.onKeydown(event);\n    }\n}\n\n","import { Directive, ElementRef } from '@angular/core';\n\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n    selector: '[mcAutocompleteOrigin]',\n    exportAs: 'mcAutocompleteOrigin'\n})\nexport class McAutocompleteOrigin {\n    constructor(public elementRef: ElementRef<HTMLElement>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { McOptionModule, McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McAutocompleteOrigin } from './autocomplete-origin.directive';\nimport {\n    McAutocompleteTrigger,\n    MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './autocomplete-trigger.directive';\nimport { McAutocomplete } from './autocomplete.component';\n\n\n@NgModule({\n    imports: [McOptionModule, OverlayModule, McCommonModule, CommonModule],\n    exports: [\n        McAutocomplete,\n        McOptionModule,\n        McAutocompleteTrigger,\n        McAutocompleteOrigin,\n        McCommonModule\n    ],\n    declarations: [McAutocomplete, McAutocompleteTrigger, McAutocompleteOrigin],\n    providers: [MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class McAutocompleteModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    OnDestroy,\n    ViewEncapsulation\n} from '@angular/core';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { mixinColor, mixinDisabled, CanColor, CanDisable, CanDisableCtor, CanColorCtor } from '@ptsecurity/mosaic/core';\n\n\n@Directive({\n    selector: 'button[mc-button], a[mc-button]',\n    host: {\n        '[class.mc-button]': '!isIconButton',\n        '[class.mc-icon-button]': 'isIconButton'\n    }\n})\nexport class McButtonCssStyler {\n    nativeElement: Element;\n\n    get isIconButton(): boolean {\n        return this.icons.length > 0;\n    }\n\n    private icons: HTMLElement[] = [];\n\n    constructor(elementRef: ElementRef) {\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        /**\n         * Here we had to use native selectors due to number of angular issues about ContentChildren limitations\n         * https://github.com/angular/angular/issues/16299\n         * https://github.com/angular/angular/issues/8563\n         * https://github.com/angular/angular/issues/14769\n         */\n        this.icons = Array.from(this.nativeElement.querySelectorAll('.mc-icon'));\n        this.addClassModificatorForIcons();\n    }\n\n    private addClassModificatorForIcons() {\n        const twoIcons = 2;\n\n        if (this.icons.length === 1) {\n            const iconElement = this.icons[0];\n            const COMMENT_NODE = 8;\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling && iconElement.nextSibling.nodeType !== COMMENT_NODE) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-icon-button_left');\n                }\n\n                if (iconElement.previousSibling && iconElement.previousSibling.nodeType !== COMMENT_NODE) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-icon-button_right');\n                }\n            }\n        } else if (this.icons.length === twoIcons) {\n            const firstIconElement = this.icons[0];\n            const secondIconElement = this.icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n}\n\nexport class McButtonBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {}\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McButtonMixinBase:\n    CanDisableCtor &\n    CanColorCtor &\n    typeof McButtonBase =\n        mixinColor(mixinDisabled(McButtonBase));\n\n\n@Component({\n    selector: 'button[mc-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[disabled]': 'disabled || null'\n    }\n})\nexport class McButton extends McButtonMixinBase implements OnDestroy, CanDisable, CanColor {\n    constructor(elementRef: ElementRef, private _focusMonitor: FocusMonitor) {\n        super(elementRef);\n\n        this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this.getHostElement().focus();\n    }\n\n    getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n\n\n@Component({\n    selector: 'a[mc-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[attr.tabindex]': 'disabled ? -1 : 0',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': 'haltDisabledEvents($event)'\n    }\n})\nexport class McAnchor extends McButton {\n    constructor(focusMonitor: FocusMonitor, elementRef: ElementRef) {\n        super(elementRef, focusMonitor);\n    }\n\n    haltDisabledEvents(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McButton,\n    McAnchor,\n    McButtonCssStyler\n} from './button.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McButton,\n        McAnchor,\n        McButtonCssStyler\n    ],\n    declarations: [\n        McButton,\n        McAnchor,\n        McButtonCssStyler\n    ]\n})\nexport class McButtonModule {}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    ViewEncapsulation,\n    ViewChild\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { McButton } from '@ptsecurity/mosaic/button';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/**\n * Provider Expression that allows mc-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McButtonToggleGroup),\n    multi: true\n};\n\n/** Change event object emitted by MсButtonToggle. */\nexport class McButtonToggleChange {\n    constructor(\n        /** The MсButtonToggle that emits the event. */\n        public source: McButtonToggle,\n        /** The value assigned to the MсButtonToggle. */\n        public value: any) {\n    }\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n    selector: 'mc-button-toggle-group',\n    providers: [MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n    host: {\n        role: 'group',\n        class: 'mc-button-toggle-group',\n        '[class.mc-button-toggle-vertical]': 'vertical'\n    },\n    exportAs: 'mcButtonToggleGroup'\n})\nexport class McButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n\n    /** Whether the toggle group is vertical. */\n    @Input()\n    get vertical(): boolean {\n        return this._vertical;\n    }\n\n    set vertical(value: boolean) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n\n    /** Value of the toggle group. */\n    @Input()\n    get value(): any {\n        const selected = this.selectionModel ? this.selectionModel.selected : [];\n\n        if (this.multiple) {\n            return selected.map((toggle) => toggle.value);\n        }\n\n        return selected[0] ? selected[0].value : undefined;\n    }\n\n    set value(newValue: any) {\n        this.setSelectionByValue(newValue);\n        this.valueChange.emit(this.value);\n    }\n\n    /** Selected button toggles in the group. */\n    get selected(): any {\n        const selected = this.selectionModel.selected;\n\n        return this.multiple ? selected : (selected[0] || null);\n    }\n\n    /** Whether multiple button toggles can be selected. */\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    /** Child button toggle buttons. */\n    @ContentChildren(forwardRef(() => McButtonToggle)) buttonToggles: QueryList<McButtonToggle>;\n\n    /** Whether multiple button toggle group is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        if (!this.buttonToggles) {\n            return;\n        }\n\n        this.buttonToggles.forEach((toggle) => toggle.markForCheck());\n    }\n\n    /**\n     * Event that emits whenever the value of the group changes.\n     * Used to facilitate two-way data binding.\n     * @docs-private\n     */\n    @Output() readonly valueChange = new EventEmitter<any>();\n\n    /** Event emitted when the group's value changes. */\n    @Output() readonly change: EventEmitter<McButtonToggleChange> =\n        new EventEmitter<McButtonToggleChange>();\n    private _vertical = false;\n    private _multiple = false;\n    private _disabled = false;\n    private selectionModel: SelectionModel<McButtonToggle>;\n\n    /**\n     * Reference to the raw value that the consumer tried to assign. The real\n     * value will exclude any values from this one that don't correspond to a\n     * toggle. Useful for the cases where the value is assigned before the toggles\n     * have been initialized or at the same that they're being swapped out.\n     */\n    private rawValue: any;\n\n    constructor(private _changeDetector: ChangeDetectorRef) {}\n\n    /**\n     * The method to be called in order to update ngModel.\n     * Now `ngModel` binding is not supported in multiple selection mode.\n     */\n    // tslint:disable-next-line:no-empty\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n    // tslint:disable-next-line:no-empty\n    onTouched: () => any = () => {};\n\n    ngOnInit() {\n        this.selectionModel = new SelectionModel<McButtonToggle>(this.multiple, undefined, false);\n    }\n\n    ngAfterContentInit() {\n        this.selectionModel.select(...this.buttonToggles.filter((toggle) => toggle.checked));\n        this.disabled = this._disabled;\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value Value to be set to the model.\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        const selected = this.selected;\n        const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n        const event = new McButtonToggleChange(source, this.value);\n        this.controlValueAccessorChangeFn(event.value);\n        this.change.emit(event);\n    }\n\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param toggle Toggle to be synced.\n     * @param select Whether the toggle should be selected.\n     * @param isUserInput Whether the change was a result of a user interaction.\n     */\n    syncButtonToggle(toggle: McButtonToggle, select: boolean, isUserInput = false) {\n        // Deselect the currently-selected toggle, if we're in single-selection\n        // mode and the button being toggled isn't selected at the moment.\n        if (!this.multiple && this.selected && !toggle.checked) {\n            (this.selected as McButtonToggle).checked = false;\n        }\n\n        if (select) {\n            this.selectionModel.select(toggle);\n        } else {\n            this.selectionModel.deselect(toggle);\n        }\n\n        // Only emit the change event for user input.\n        if (isUserInput) {\n            this.emitChangeEvent();\n        }\n\n        // Note: we emit this one no matter whether it was a user interaction, because\n        // it is used by Angular to sync up the two-way data binding.\n        this.valueChange.emit(this.value);\n    }\n\n    /** Checks whether a button toggle is selected. */\n    isSelected(toggle: McButtonToggle) {\n        return this.selectionModel.isSelected(toggle);\n    }\n\n    /** Determines whether a button toggle should be checked on init. */\n    isPrechecked(toggle: McButtonToggle) {\n        if (this.rawValue === undefined) {\n            return false;\n        }\n\n        if (this.multiple && Array.isArray(this.rawValue)) {\n            return this.rawValue.some((value) => toggle.value != null && value === toggle.value);\n        }\n\n        return toggle.value === this.rawValue;\n    }\n\n    /** Updates the selection state of the toggles in the group based on a value. */\n    private setSelectionByValue(value: any | any[]) {\n        this.rawValue = value;\n\n        if (!this.buttonToggles) {\n            return;\n        }\n\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw Error('Value must be an array in multiple-selection mode.');\n            }\n\n            this.clearSelection();\n            value.forEach((currentValue: any) => this.selectValue(currentValue));\n        } else {\n            this.clearSelection();\n            this.selectValue(value);\n        }\n    }\n\n    /** Clears the selected toggles. */\n    private clearSelection() {\n        this.selectionModel.clear();\n        this.buttonToggles.forEach((toggle) => toggle.checked = false);\n    }\n\n    /** Selects a value if there's a toggle that corresponds to it. */\n    private selectValue(value: any) {\n        const correspondingOption = this.buttonToggles.find((toggle) => {\n            return toggle.value != null && toggle.value === value;\n        });\n\n        if (correspondingOption) {\n            correspondingOption.checked = true;\n            this.selectionModel.select(correspondingOption);\n        }\n    }\n}\n\n/** Single button inside of a toggle group. */\n@Component({\n    selector: 'mc-button-toggle',\n    template: `\n        <button\n            mc-button\n            type=\"button\"\n            [disabled]=\"disabled\"\n            [attr.tabindex]=\"disabled ? -1 : tabIndex\"\n            (click)=\"onToggleClick()\">\n            <ng-content></ng-content>\n        </button>\n    `,\n    styleUrls: ['button-toggle.css'],\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcButtonToggle',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[class.mc-button-toggle-standalone]': '!buttonToggleGroup',\n        '[class.mc-button-toggle-checked]': 'checked',\n        class: 'mc-button-toggle',\n        // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n        // but can still receive focus from things like cdkFocusInitial.\n        '[attr.tabindex]': '-1',\n        '[attr.disabled]': 'disabled || null',\n        '(focus)': 'focus()'\n    }\n})\nexport class McButtonToggle implements OnInit, OnDestroy {\n\n    /** Whether the button is checked. */\n    @Input()\n    get checked(): boolean {\n        return this.buttonToggleGroup ? this.buttonToggleGroup.isSelected(this) : this._checked;\n    }\n\n    set checked(value: boolean) {\n        const newValue = coerceBooleanProperty(value);\n\n        if (newValue !== this._checked) {\n            this._checked = newValue;\n\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup.syncButtonToggle(this, this._checked);\n            }\n\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    // tslint:disable-next-line:no-reserved-keywords\n    type: ToggleType;\n\n    @ViewChild(McButton) mcButton: McButton;\n\n    /** McButtonToggleGroup reads this to assign its own value. */\n    @Input() value: any;\n\n    /** Tabindex for the toggle. */\n    @Input() tabIndex: number | null;\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n    }\n    set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n\n    /** Event emitted when the group value changes. */\n    @Output() readonly change: EventEmitter<McButtonToggleChange> =\n        new EventEmitter<McButtonToggleChange>();\n\n    private isSingleSelector = false;\n    private _checked = false;\n    private _disabled: boolean = false;\n\n    constructor(\n        @Optional() public buttonToggleGroup: McButtonToggleGroup,\n        private changeDetectorRef: ChangeDetectorRef,\n        private focusMonitor: FocusMonitor,\n        private element: ElementRef\n    ) {}\n\n    ngOnInit() {\n        this.isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n        this.type = this.isSingleSelector ? 'radio' : 'checkbox';\n\n        if (this.buttonToggleGroup && this.buttonToggleGroup.isPrechecked(this)) {\n            this.checked = true;\n        }\n\n        this.focusMonitor.monitor(this.element.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        const group = this.buttonToggleGroup;\n\n        this.focusMonitor.stopMonitoring(this.element.nativeElement);\n\n        // Remove the toggle from the selection once it's destroyed. Needs to happen\n        // on the next tick in order to avoid \"changed after checked\" errors.\n        if (group && group.isSelected(this)) {\n            Promise.resolve().then(() => group.syncButtonToggle(this, false));\n        }\n    }\n\n    /** Focuses the button. */\n    focus(): void {\n        this.element.nativeElement.focus();\n    }\n\n    /** Checks the button toggle due to an interaction with the underlying native button. */\n    onToggleClick() {\n        if (this.disabled) {\n            return;\n        }\n\n        const newChecked = this.isSingleSelector ? true : !this._checked;\n\n        if (newChecked !== this._checked) {\n            this._checked = newChecked;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup.syncButtonToggle(this, this._checked, true);\n                this.buttonToggleGroup.onTouched();\n            }\n        }\n        // Emit a change event when it's the single selector\n        this.change.emit(new McButtonToggleChange(this, this.value));\n    }\n\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When the group value changes, the button will not be notified.\n        // Use `markForCheck` to explicit update button toggle's status.\n        this.changeDetectorRef.markForCheck();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { McButtonModule } from '@ptsecurity/mosaic/button';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McButtonToggle, McButtonToggleGroup } from './button-toggle.component';\n\n\n@NgModule({\n    imports: [McCommonModule, McButtonModule],\n    exports: [McCommonModule, McButtonToggleGroup, McButtonToggle],\n    declarations: [McButtonToggleGroup, McButtonToggle]\n})\nexport class McButtonToggleModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","\nexport function isBoolean(val: any): val is boolean { return typeof val === 'boolean'; }\n\nexport function toBoolean(value: any): boolean {\n    return value != null && `${value}` !== 'false';\n}\n","import { NgModule, InjectionToken, Optional, Inject, isDevMode } from '@angular/core';\nimport { BidiModule } from '@ptsecurity/cdk/bidi';\n\n\n// Injection token that configures whether the Mosaic sanity checks are enabled.\nexport const MC_SANITY_CHECKS = new InjectionToken<boolean>('mc-sanity-checks', {\n    providedIn: 'root',\n    factory: MC_SANITY_CHECKS_FACTORY\n});\n\nexport function MC_SANITY_CHECKS_FACTORY(): boolean {\n    return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Mosaic\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., McTabsModule).\n */\n@NgModule({\n    imports: [ BidiModule ],\n    exports: [ BidiModule ]\n})\nexport class McCommonModule {\n    // Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n    private _hasDoneGlobalChecks = false;\n\n    // Reference to the global `document` object.\n    private _document = typeof document === 'object' && document ? document : null;\n\n    // Reference to the global 'window' object.\n    private _window = typeof window === 'object' && window ? window : null;\n\n    constructor(@Optional() @Inject(MC_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n        if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n            this._checkDoctypeIsDefined();\n            this._checkThemeIsPresent();\n            this._hasDoneGlobalChecks = true;\n        }\n    }\n\n    // Whether any sanity checks are enabled\n    private _areChecksEnabled(): boolean {\n        return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n    }\n\n    // Whether the code is running in tests.\n    private _isTestEnv() {\n        // tslint:disable-next-line\n        return this._window && (this._window['__karma__'] || this._window['jasmine']);\n    }\n\n    private _checkDoctypeIsDefined(): void {\n        if (this._document && !this._document.doctype) {\n            console.warn(\n                'Current document does not have a doctype. This may cause ' +\n                'some Mosaic components not to behave as expected.'\n            );\n        }\n    }\n\n    private _checkThemeIsPresent(): void {\n        if (this._document && typeof getComputedStyle === 'function') {\n            const testElement = this._document.createElement('div');\n\n            testElement.classList.add('mc-theme-loaded-marker');\n            this._document.body.appendChild(testElement);\n\n            const computedStyle = getComputedStyle(testElement);\n\n            // In some situations, the computed style of the test element can be null. For example in\n            // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n            // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n            if (computedStyle && computedStyle.display !== 'none') {\n                console.warn(\n                    'Could not find Mosaic core theme. Most Mosaic ' +\n                    'components may not work as expected. For more info refer ' +\n                    'to the theming guide: link there'\n                );\n            }\n\n            this._document.body.removeChild(testElement);\n        }\n    }\n}\n","import { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanDisable {\n    disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n    return class extends base {\n        get disabled() {\n            return this._disabled;\n        }\n\n        set disabled(value: any) {\n            this._disabled = coerceBooleanProperty(value);\n        }\n\n        private _disabled: boolean = false;\n\n        constructor(...args: any[]) {\n            // tslint:disable-next-line\n            super(...args);\n        }\n    };\n}\n","import { ElementRef } from '@angular/core';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanColor {\n    color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\nexport interface HasElementRef {\n    _elementRef: ElementRef;\n}\n\nexport enum ThemePalette {\n    Primary = 'primary',\n    Second = 'second',\n    Error = 'error',\n    Default = 'second',\n    Empty = ''\n}\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T,\n    defaultColor: ThemePalette = ThemePalette.Default\n): CanColorCtor & T {\n    return class extends base {\n\n        private _color: ThemePalette;\n\n        get color(): ThemePalette {\n            return this._color;\n        }\n\n        set color(value: ThemePalette) {\n            const colorPalette = value || defaultColor;\n\n            if (colorPalette !== this._color) {\n                if (this._color) {\n                    this._elementRef.nativeElement.classList.remove(`mc-${this._color}`);\n                }\n\n                if (colorPalette) {\n                    this._elementRef.nativeElement.classList.add(`mc-${colorPalette}`);\n                }\n\n                this._color = colorPalette;\n            }\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n\n            this.color = defaultColor;\n        }\n    };\n}\n\n","import { Constructor } from './constructor';\nimport { CanDisable } from './disabled';\n\n\nexport interface HasTabIndex {\n    tabIndex: number;\n}\n\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n// Mixin to augment a directive with a `tabIndex` property.\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0): HasTabIndexCtor & T {\n    return class extends base {\n        get tabIndex(): number {\n            return this.disabled ? -1 : this._tabIndex;\n        }\n\n        set tabIndex(value: number) {\n            this._tabIndex = value != null ? value : defaultTabIndex;\n        }\n\n        private _tabIndex: number = defaultTabIndex;\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n    };\n}\n","import { FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { Subject } from 'rxjs';\n\nimport { ErrorStateMatcher } from '../error/error-options';\n\nimport { Constructor } from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n\n    readonly stateChanges: Subject<void>;\n\n    errorState: boolean;\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState();\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n    parentFormGroup: FormGroupDirective;\n    parentForm: NgForm;\n    defaultErrorStateMatcher: ErrorStateMatcher;\n    ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T): CanUpdateErrorStateCtor & T {\n    return class extends base {\n        /** Whether the component is in an error state. */\n        errorState: boolean = false;\n\n        /**\n         * Stream that emits whenever the state of the input changes such that the wrapping\n         * `MatFormField` needs to run change detection.\n         */\n        readonly stateChanges = new Subject<void>();\n\n        errorStateMatcher: ErrorStateMatcher;\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n\n        updateErrorState() {\n            const oldState = this.errorState;\n            const parent = this.parentFormGroup || this.parentForm;\n            const matcher = this.errorStateMatcher || this.defaultErrorStateMatcher;\n            const control = this.ngControl ? this.ngControl.control as FormControl : null;\n            const newState = matcher.isErrorState(control, parent);\n\n            if (newState !== oldState) {\n                this.errorState = newState;\n                this.stateChanges.next();\n            }\n        }\n    };\n}\n","import {\n    AfterViewChecked,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { ENTER, SPACE } from '@ptsecurity/cdk/keycodes';\nimport { Subject } from 'rxjs';\n\nimport { McOptgroup } from './optgroup';\n\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet uniqueIdCounter = 0;\n\n/** Event object emitted by McOption when selected or deselected. */\nexport class McOptionSelectionChange {\n    constructor(public source: McOption, public isUserInput = false) {}\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\n// tslint:disable-next-line: naming-convention\nexport interface McOptionParentComponent {\n    multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MC_OPTION_PARENT_COMPONENT =\n    new InjectionToken<McOptionParentComponent>('MC_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mc-select>` element.\n */\n@Component({\n    selector: 'mc-option',\n    exportAs: 'mcOption',\n    host: {\n        '[attr.tabindex]': 'getTabIndex()',\n        class: 'mc-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-option-multiple]': 'multiple',\n        '[class.mc-active]': 'active',\n        '[class.mc-disabled]': 'disabled',\n        '[id]': 'id',\n\n        '(click)': 'selectViaInteraction()',\n        '(keydown)': 'handleKeydown($event)'\n    },\n    styleUrls: ['./option.css'],\n    templateUrl: './option.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McOption implements AfterViewChecked, OnDestroy {\n    /** The form value of the option. */\n    @Input() value: any;\n\n    /** Event emitted when the option is selected or deselected. */\n    // tslint:disable-next-line:no-output-on-prefix\n    @Output() readonly onSelectionChange = new EventEmitter<McOptionSelectionChange>();\n\n    /** Emits when the state of the option changes and any parents have to be notified. */\n    readonly stateChanges = new Subject<void>();\n\n    /**\n     * The displayed value of the option. It is necessary to show the selected option in the\n     * select's trigger.\n     */\n    get viewValue(): string {\n        // TODO(kara): Add input property alternative for node envs.\n        return (this.getHostElement().textContent || '').trim();\n    }\n\n    /** Whether the wrapping component is in multiple selection mode. */\n    get multiple() {\n        return this.parent && this.parent.multiple;\n    }\n\n    get id(): string {\n        return this._id;\n    }\n\n    private _id = `mc-option-${uniqueIdCounter++}`;\n\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    private _selected = false;\n\n    @Input()\n    get disabled() {\n        return (this.group && this.group.disabled) || this._disabled;\n    }\n\n    set disabled(value: any) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    private _disabled = false;\n\n    /**\n     * Whether or not the option is currently active and ready to be selected.\n     * An active option displays styles as if it is focused, but the\n     * focus is actually retained somewhere else. This comes in handy\n     * for components like autocomplete where focus must remain on the input.\n     */\n    get active(): boolean {\n        return this._active;\n    }\n\n    private _active = false;\n\n    private mostRecentViewValue = '';\n\n    constructor(\n        private readonly element: ElementRef,\n        private readonly changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_OPTION_PARENT_COMPONENT) private readonly parent: McOptionParentComponent,\n        @Optional() readonly group: McOptgroup\n    ) {}\n\n    ngAfterViewChecked() {\n        // Since parent components could be using the option's label to display the selected values\n        // (e.g. `mc-select`) and they don't have a way of knowing if the option's label has changed\n        // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n        // relatively cheap, however we still limit them only to selected options in order to avoid\n        // hitting the DOM too often.\n        if (this._selected) {\n            const viewValue = this.viewValue;\n\n            if (viewValue !== this.mostRecentViewValue) {\n                this.mostRecentViewValue = viewValue;\n                this.stateChanges.next();\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n    }\n\n    select(): void {\n        if (!this._selected) {\n            this._selected = true;\n\n            this.changeDetectorRef.markForCheck();\n            this.emitSelectionChangeEvent();\n        }\n    }\n\n    deselect(): void {\n        if (this._selected) {\n            this._selected = false;\n\n            this.changeDetectorRef.markForCheck();\n            this.emitSelectionChangeEvent();\n        }\n    }\n\n    focus(): void {\n        const element = this.getHostElement();\n\n        if (typeof element.focus === 'function') {\n            element.focus();\n        }\n    }\n\n    /**\n     * This method sets display styles on the option to make it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setActiveStyles(): void {\n        if (!this._active) {\n            this._active = true;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    /**\n     * This method removes display styles on the option that made it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setInactiveStyles(): void {\n        if (this._active) {\n            this._active = false;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel(): string {\n        return this.viewValue;\n    }\n\n    /** Ensures the option is selected when activated from the keyboard. */\n    handleKeydown(event: KeyboardEvent): void {\n        // tslint:disable-next-line\n        if (event.keyCode === ENTER || event.keyCode === SPACE) {\n            this.selectViaInteraction();\n\n            // Prevent the page from scrolling down and form submits.\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * `Selects the option while indicating the selection came from the user. Used to\n     * determine if the select's view -> model callback should be invoked.`\n     */\n    selectViaInteraction(): void {\n        if (!this.disabled) {\n            this._selected = this.multiple ? !this._selected : true;\n\n            this.changeDetectorRef.markForCheck();\n            this.emitSelectionChangeEvent(true);\n        }\n    }\n\n    getTabIndex(): string {\n        return this.disabled ? '-1' : '0';\n    }\n\n    getHostElement(): HTMLElement {\n        return this.element.nativeElement;\n    }\n\n    /** Emits the selection change event. */\n    private emitSelectionChangeEvent(isUserInput = false): void {\n        this.onSelectionChange.emit(new McOptionSelectionChange(this, isUserInput));\n    }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function countGroupLabelsBeforeOption(\n    optionIndex: number,\n    options: QueryList<McOption>,\n    optionGroups: QueryList<McOptgroup>\n): number {\n\n    if (optionGroups.length) {\n        const optionsArray = options.toArray();\n        const groups = optionGroups.toArray();\n\n        let groupCounter = 0;\n\n        for (let i = 0; i < optionIndex + 1; i++) {\n            if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n                groupCounter++;\n            }\n        }\n\n        return groupCounter;\n    }\n\n    return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function getOptionScrollPosition(\n    optionIndex: number,\n    optionHeight: number,\n    currentScrollPosition: number,\n    panelHeight: number\n): number {\n    const optionOffset = optionIndex * optionHeight;\n\n    if (optionOffset < currentScrollPosition) { return optionOffset; }\n\n    if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n        return Math.max(0, optionOffset - panelHeight + optionHeight);\n    }\n\n    return currentScrollPosition;\n}\n\n","import { ConnectionPositionPair } from '@ptsecurity/cdk/overlay';\n\n\nexport const POSITION_MAP: { [key: string]: ConnectionPositionPair } = {\n    top         : {\n        originX : 'center',\n        originY : 'top',\n        overlayX: 'center',\n        overlayY: 'bottom'\n    },\n    topCenter   : {\n        originX : 'center',\n        originY : 'top',\n        overlayX: 'center',\n        overlayY: 'bottom'\n    },\n    topLeft     : {\n        originX : 'start',\n        originY : 'top',\n        overlayX: 'start',\n        overlayY: 'bottom'\n    },\n    topRight    : {\n        originX : 'end',\n        originY : 'top',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    },\n    right       : {\n        originX : 'end',\n        originY : 'center',\n        overlayX: 'start',\n        overlayY: 'center'\n    },\n    rightTop    : {\n        originX : 'end',\n        originY : 'top',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    rightBottom : {\n        originX : 'end',\n        originY : 'bottom',\n        overlayX: 'start',\n        overlayY: 'bottom'\n    },\n    bottom      : {\n        originX : 'center',\n        originY : 'bottom',\n        overlayX: 'center',\n        overlayY: 'top'\n    },\n    bottomCenter: {\n        originX : 'center',\n        originY : 'bottom',\n        overlayX: 'center',\n        overlayY: 'top'\n    },\n    bottomLeft  : {\n        originX : 'start',\n        originY : 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    bottomRight : {\n        originX : 'end',\n        originY : 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n    },\n    left        : {\n        originX : 'start',\n        originY : 'center',\n        overlayX: 'end',\n        overlayY: 'center'\n    },\n    leftTop     : {\n        originX : 'start',\n        originY : 'top',\n        overlayX: 'end',\n        overlayY: 'top'\n    },\n    leftBottom  : {\n        originX : 'start',\n        originY : 'bottom',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    }\n};\n\nexport const DEFAULT_4_POSITIONS = objectValues([\n    POSITION_MAP.top, POSITION_MAP.right, POSITION_MAP.bottom, POSITION_MAP.left\n]);\n\nexport const EXTENDED_OVERLAY_POSITIONS = objectValues([\n    POSITION_MAP.top, POSITION_MAP.topLeft, POSITION_MAP.topRight, POSITION_MAP.right, POSITION_MAP.rightTop,\n    POSITION_MAP.rightBottom, POSITION_MAP.bottom, POSITION_MAP.bottomLeft, POSITION_MAP.bottomRight,\n    POSITION_MAP.left, POSITION_MAP.leftTop, POSITION_MAP.leftBottom\n]);\n\nexport const POSITION_TO_CSS_MAP: {[key: string]: string} = {\n    top: 'top',\n    topLeft: 'top-left',\n    topRight: 'top-right',\n    right: 'right',\n    rightTop: 'right-top',\n    rightBottom: 'right-bottom',\n    left: 'left',\n    leftTop: 'left-top',\n    leftBottom: 'left-bottom',\n    bottom: 'bottom',\n    bottomLeft: 'bottom-left',\n    bottomRight: 'bottom-right'\n};\n\nfunction arrayMap<T, S>(array: T[], iteratee: (item: T, index: number, arr: T[]) => S): S[] {\n    let index = -1;\n    const length = array == null ? 0 : array.length;\n    const result = Array(length);\n\n    while (++index < length) {\n        result[ index ] = iteratee(array[ index ], index, array);\n    }\n\n    return result;\n}\nfunction baseValues<T>(object: { [key: string]: T } | T[], props: string[]): T[] {\n    return arrayMap(props,  (key) => {\n        return object[ key ];\n    });\n}\nfunction objectValues<T>(object: { [key: string]: T } | T[]): T[] {\n    return object == null ? [] : baseValues(object, Object.keys(object));\n}\n","/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMcSelectDynamicMultipleError(): Error {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMcSelectNonArrayValueError(): Error {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMcSelectNonFunctionValueError(): Error {\n    return Error('`compareWith` must be a function.');\n}\n","export function getMcFormFieldMissingControlError(): Error {\n  return Error('mc-form-field must contain a McFormFieldControl.');\n}\n","export function getMcInputUnsupportedTypeError(inputType: string): Error {\n    return Error(`Input type \"${inputType}\" isn't supported by mcInput.`);\n}\n","/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n    return Error(\n        `McDatepicker: No provider found for ${provider}. You must import one of the existing ` +\n        `modules at your application root or provide a custom implementation or use exists ones.`);\n}\n","/**\n * Throws an exception for the case when dropdown trigger doesn't have a valid mc-dropdown instance\n * @docs-private\n */\nexport function throwMcDropdownMissingError() {\n    throw Error(`mcDropdownTriggerFor: must pass in an mc-dropdown instance.\n    Example:\n      <mc-dropdown #dropdown=\"mcDropdown\"></mc-dropdown>\n      <button [mcDropdownTriggerFor]=\"dropdown\"></button>`);\n}\n\n/**\n * Throws an exception for the case when dropdown's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMcDropdownInvalidPositionX() {\n    throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mc-dropdown xPosition=\"before\" #dropdown=\"mcDropdown\"></mc-dropdown>`);\n}\n\n/**\n * Throws an exception for the case when dropdown's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMcDropdownInvalidPositionY() {\n    throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mc-dropdown yPosition=\"above\" #dropdown=\"mcDropdown\"></mc-dropdown>`);\n}\n","import { animate, AnimationTriggerMetadata, style, transition, trigger, state } from '@angular/animations';\n\n\nexport function toggleVerticalNavbarAnimation(): AnimationTriggerMetadata {\n    return trigger('toggle', [\n        state('0', style({\n            width: '64px'\n        })),\n        state('1',  style({\n            width: '*'\n        })),\n        transition('0 <=> 1', animate('200ms cubic-bezier(0, 1, 0.5, 1)'))\n    ]);\n}\n","import { NgModule, Directive, ElementRef, QueryList } from '@angular/core';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(McLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n    selector: '[mc-line], [mcLine]',\n    host: { class: 'mc-line' }\n})\nexport class McLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class McLineSetter {\n    constructor(private _lines: QueryList<McLine>, private _element: ElementRef) {\n        this._setLineClass(this._lines.length);\n\n        this._lines.changes.subscribe(() => {\n            this._setLineClass(this._lines.length);\n        });\n    }\n\n    private _setLineClass(count: number): void {\n        this._resetClasses();\n        if (count === 2 || count === 3) {\n            this._setClass(`mc-${count}-line`, true);\n        } else if (count > 3) {\n            this._setClass(`mc-multi-line`, true);\n        }\n    }\n\n    private _resetClasses(): void {\n        this._setClass('mc-2-line', false);\n        this._setClass('mc-3-line', false);\n        this._setClass('mc-multi-line', false);\n    }\n\n    private _setClass(className: string, isAdd: boolean): void {\n        if (isAdd) {\n            this._element.nativeElement.classList.add(className);\n        } else {\n            this._element.nativeElement.classList.remove(className);\n        }\n    }\n}\n\n@NgModule({\n    imports: [],\n    exports: [McLine],\n    declarations: [McLine]\n})\nexport class McLineModule {}\n","import { Injectable } from '@angular/core';\nimport { FormGroupDirective, NgForm, FormControl } from '@angular/forms';\n\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n    }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({ providedIn: 'root' })\nexport class ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n    }\n}\n","import { Component, ViewEncapsulation, Input, ChangeDetectionStrategy } from '@angular/core';\n\n\nexport type McPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mc-primary .mc-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mc-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'mc-pseudo-checkbox',\n    styleUrls: ['pseudo-checkbox.css'],\n    templateUrl: 'pseudo-checkbox.partial.html',\n    host: {\n        class: 'mc-pseudo-checkbox',\n        '[class.mc-indeterminate]': 'state === \"indeterminate\"',\n        '[class.mc-checked]': 'state === \"checked\"',\n        '[class.mc-disabled]': 'disabled'\n    }\n})\nexport class McPseudoCheckbox {\n    @Input() state: McPseudoCheckboxState = 'unchecked';\n\n    @Input() disabled: boolean = false;\n}\n","import { NgModule } from '@angular/core';\n\nimport { McPseudoCheckbox } from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n    exports: [McPseudoCheckbox],\n    declarations: [McPseudoCheckbox]\n})\nexport class McPseudoCheckboxModule {}\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class McMeasureScrollbarService {\n\n    get scrollBarWidth(): number {\n        if (this._scrollbarWidth) {\n            return this._scrollbarWidth;\n        }\n        this.initScrollBarWidth();\n\n        return this._scrollbarWidth;\n    }\n\n    private _scrollbarWidth: number;\n    private scrollbarMeasure = {\n        position: 'absolute',\n        top: '-9999px',\n        width: '50px',\n        height: '50px',\n        overflow: 'scroll'\n    };\n\n    constructor(\n        @Inject(DOCUMENT) private document: any\n    ) {\n        this.initScrollBarWidth();\n    }\n\n    initScrollBarWidth() {\n        const scrollDiv = this.document.createElement('div');\n\n        // tslint:disable-next-line\n        for (const scrollProp in this.scrollbarMeasure) {\n            if (this.scrollbarMeasure.hasOwnProperty(scrollProp)) {\n                scrollDiv.style[scrollProp] = this.scrollbarMeasure[scrollProp];\n            }\n        }\n\n        this.document.body.appendChild(scrollDiv);\n\n        const width = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n\n        this.document.body.removeChild(scrollDiv);\n        this._scrollbarWidth = width;\n    }\n}\n","import { Component, ViewEncapsulation, Input, ChangeDetectionStrategy } from '@angular/core';\n\nimport { mixinDisabled, CanDisable, CanDisableCtor } from '../common-behaviors/index';\n\n\n// Boilerplate for applying mixins to McOptgroup.\n/** @docs-private */\nexport class McOptgroupBase {}\n\nexport const McOptgroupMixinBase: CanDisableCtor & typeof McOptgroupBase = mixinDisabled(McOptgroupBase);\n\n// Counter for unique group ids.\nlet uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mc-option`.\n */\n@Component({\n    selector: 'mc-optgroup',\n    exportAs: 'mcOptgroup',\n    templateUrl: 'optgroup.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['disabled'],\n    styleUrls: ['optgroup.css'],\n    host: {\n        class: 'mc-optgroup',\n        role: 'group',\n        '[class.mc-optgroup-disabled]': 'disabled',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-labelledby]': 'labelId'\n    }\n})\nexport class McOptgroup extends McOptgroupMixinBase implements CanDisable {\n    /** Label for the option group. */\n    @Input() label: string;\n\n    /** Unique id for the underlying label. */\n    labelId: string = `mc-optgroup-label-${uniqueOptgroupIdCounter++}`;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McPseudoCheckboxModule } from '../selection/index';\n\nimport { McOptgroup } from './optgroup';\nimport { McOption } from './option';\n\n\n@NgModule({\n    imports: [CommonModule, McPseudoCheckboxModule],\n    exports: [McOption, McOptgroup],\n    declarations: [McOption, McOptgroup]\n})\nexport class McOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","import { InjectionToken } from '@angular/core';\n\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MC_LABEL_GLOBAL_OPTIONS =\n    new InjectionToken<LabelOptions>('mc-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n    /**\n     * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n     * Default behavior is assumed to be `auto`.\n     */\n    float?: FloatLabelType;\n}\n","import {\n    animate,\n    state,\n    style,\n    transition,\n    trigger,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n\nexport const fadeAnimation: AnimationTriggerMetadata =  trigger('fadeAnimation', [\n    state('void', style({ opacity: 0 })),\n    state('true', style({ opacity: 1 })),\n    state('false', style({ opacity: 0 })),\n    transition('* => true', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => void', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)'))\n]);\n","export enum AnimationCurves {\n    StandardCurve = 'cubic-bezier(0.4,0.0,0.2,1)',\n    DecelerationCurve = 'cubic-bezier(0.0,0.0,0.2,1)',\n    AccelerationCurve = 'cubic-bezier(0.4,0.0,1,1)',\n    SharpCurve = 'cubic-bezier(0.4,0.0,0.6,1)'\n}\n","import {\n    animate,\n    AnimationTriggerMetadata,\n    state,\n    style,\n    transition,\n    trigger,\n    query,\n    animateChild,\n    group\n} from '@angular/animations';\n\n\n/**\n * The following are all the animations for the mc-select component, with each\n * const containing the metadata for one animation.\n *\n */\nexport const mcSelectAnimations: {\n    readonly transformPanel: AnimationTriggerMetadata;\n    readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0)',\n            minWidth: '100%',\n            opacity: 0\n        })),\n        transition('void => *', group([\n            query('@fadeInContent', animateChild()),\n            animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n        ])),\n        transition('* => void', [\n            animate('250ms 100ms linear', style({ opacity: 0 }))\n        ])\n    ]),\n\n    /**\n     * This animation fades in the background color and text content of the\n     * select's options. It is time delayed to occur 100ms after the overlay\n     * panel has transformed in.\n     */\n    fadeInContent: trigger('fadeInContent', [\n        state('showing', style({ opacity: 1 })),\n        transition('void => showing', [\n            style({ opacity: 0 }),\n            animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformPanel = mcSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInContent = mcSelectAnimations.fadeInContent;\n","import {\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { mixinColor, CanColor, CanColorCtor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\n@Directive({\n    selector: '[mc-icon]',\n    host: { class: 'mc mc-icon' }\n})\nexport class McIconCSSStyler {}\n\n\nexport class McIconBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McIconMixinBase: CanColorCtor & typeof McIconBase = mixinColor(McIconBase, ThemePalette.Empty);\n\n\n@Component({\n    selector: `[mc-icon]`,\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./icon.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['color']\n})\nexport class McIcon extends _McIconMixinBase implements CanColor {\n    constructor(elementRef: ElementRef, @Attribute('mc-icon') iconName: string) {\n        super(elementRef);\n\n        elementRef.nativeElement.classList.add(iconName);\n    }\n\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McIcon,\n    McIconCSSStyler\n} from './icon.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McIcon,\n        McIconCSSStyler\n    ],\n    declarations: [\n        McIcon,\n        McIconCSSStyler\n    ]\n})\nexport class McIconModule {}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-cleaner',\n    template: '<i class=\"mc-icon_light\" mc-icon=\"mc-close-M_16\" color=\"second\"></i>'\n})\nexport class McCleaner {}\n","import { NgControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\n\n/** An interface which allows a control to work inside of a `MсFormField`. */\nexport abstract class McFormFieldControl<T> {\n    /** The value of the control. */\n    value: T | null;\n\n    /**\n     * Stream that emits whenever the state of the control changes such that the parent `MсFormField`\n     * needs to run change detection.\n     */\n    readonly stateChanges: Observable<void>;\n\n    /** The element ID for this control. */\n    readonly id: string;\n\n    /** The placeholder for this control. */\n    readonly placeholder: string;\n\n    /** Gets the NgControl for this control. */\n    readonly ngControl: NgControl | null;\n\n    /** Whether the control is focused. */\n    readonly focused: boolean;\n\n    /** Whether the control is empty. */\n    readonly empty: boolean;\n\n    /** Whether the control is required. */\n    readonly required: boolean;\n\n    /** Whether the control is disabled. */\n    readonly disabled: boolean;\n\n    /** Whether the control is in an error state. */\n    readonly errorState: boolean;\n\n    /**\n     * An optional name for the control type that can be used to distinguish `mc-form-field` elements\n     * based on their control type. The form field will add a class,\n     * `mc-form-field-type-{{controlType}}` to its root element.\n     */\n    readonly controlType?: string;\n\n    /** Handles a click on the control's container. */\n    abstract onContainerClick(event: MouseEvent): void;\n}\n","import { Observable } from 'rxjs';\n\n\n/** An interface which allows a control to work inside of a `MсFormField`. */\nexport abstract class McFormFieldNumberControl<T> {\n    /** The value of the control. */\n    value: T | null;\n\n    /**\n     * Stream that emits whenever the state of the control changes such that the parent `MсFormField`\n     * needs to run change detection.\n     */\n    readonly stateChanges: Observable<void>;\n\n    /** the number step */\n    step: number;\n\n    /** the number big step */\n    bigStep: number;\n\n    /** Whether the control is focused. */\n    readonly focused: boolean;\n\n    /** Handles step up and down */\n    abstract stepUp(step: number): void;\n\n    abstract stepDown(step: number): void;\n}\n","import { Directive, Input } from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n@Directive({\n    selector: 'mc-hint',\n    host: {\n        class: 'mc-hint',\n        '[attr.id]': 'id'\n    }\n})\nexport class McHint {\n    @Input() id: string = `mc-hint-${nextUniqueId++}`;\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcPrefix]'\n})\nexport class McPrefix {\n}\n","import { Component, EventEmitter, Output } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-stepper',\n    template: `\n        <i class=\"mc mc-icon mc-icon_light mc-second mc-stepper-step-up mc-angle-down-L_16\"\n           (mousedown)=\"onStepUp($event)\">\n        </i>\n        <i class=\"mc mc-icon mc-icon_light mc-second mc-stepper-step-down mc-angle-down-L_16\"\n           (mousedown)=\"onStepDown($event)\">\n        </i>\n    `\n})\nexport class McStepper {\n    @Output()\n    readonly stepUp: EventEmitter<void> = new EventEmitter<void>();\n    @Output()\n    readonly stepDown: EventEmitter<void> = new EventEmitter<void>();\n\n    onStepUp($event: MouseEvent) {\n        this.stepUp.emit();\n        $event.preventDefault();\n    }\n\n    onStepDown($event: MouseEvent) {\n        this.stepDown.emit();\n        $event.preventDefault();\n    }\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcSuffix]'\n})\nexport class McSuffix {\n}\n","import {\n    AfterContentChecked,\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren, Directive,\n    ElementRef,\n    QueryList, ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { CanColor, CanColorCtor, mixinColor } from '@ptsecurity/mosaic/core';\nimport { EMPTY, merge } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n\n\nimport { McCleaner } from './cleaner';\nimport { McFormFieldControl } from './form-field-control';\nimport { getMcFormFieldMissingControlError } from './form-field-errors';\nimport { McFormFieldNumberControl } from './form-field-number-control';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McStepper } from './stepper';\nimport { McSuffix } from './suffix';\n\n\nlet nextUniqueId = 0;\n\nexport class McFormFieldBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McFormFieldMixinBase: CanColorCtor & typeof McFormFieldBase = mixinColor(McFormFieldBase);\n\n@Component({\n    selector: 'mc-form-field',\n    exportAs: 'mcFormField',\n    templateUrl: 'form-field.html',\n    // McInput is a directive and can't have styles, so we need to include its styles here.\n    // The McInput styles are fairly minimal so it shouldn't be a big deal for people who\n    // aren't using McInput.\n    styleUrls: [\n        'form-field.css',\n        '../input/input.css',\n        '../textarea/textarea.css'\n    ],\n    host: {\n        class: 'mc-form-field',\n        '[class.mc-form-field_invalid]': '_control.errorState',\n        '[class.mc-disabled]': '_control.disabled',\n        '[class.mc-form-field_has-prefix]': 'hasPrefix',\n        '[class.mc-form-field_has-suffix]': 'hasSuffix',\n        '[class.mc-form-field_has-cleaner]': 'canShowCleaner',\n        '[class.mc-form-field_has-stepper]': 'canShowStepper',\n        '[class.mc-focused]': '_control.focused',\n        '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n        '[class.ng-touched]': '_shouldForward(\"touched\")',\n        '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n        '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n        '[class.ng-valid]': '_shouldForward(\"valid\")',\n        '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n        '[class.ng-pending]': '_shouldForward(\"pending\")',\n        '(keydown)': 'onKeyDown($event)',\n        '(mouseenter)': 'onHoverChanged(true)',\n        '(mouseleave)': 'onHoverChanged(false)'\n    },\n    inputs: ['color'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class McFormField extends _McFormFieldMixinBase implements\n    AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n\n    @ContentChild(McFormFieldControl) _control: McFormFieldControl<any>;\n    @ContentChild(McFormFieldNumberControl) _numberControl: McFormFieldNumberControl<any>;\n    @ContentChild(McStepper) _stepper: McStepper;\n\n    @ContentChildren(McHint) _hint: QueryList<McHint>;\n    @ContentChildren(McSuffix) _suffix: QueryList<McSuffix>;\n    @ContentChildren(McPrefix) _prefix: QueryList<McPrefix>;\n    @ContentChildren(McCleaner) _cleaner: QueryList<McCleaner>;\n\n    @ViewChild('connectionContainer') connectionContainerRef: ElementRef;\n\n    // Unique id for the internal form field label.\n    _labelId = `mc-form-field-label-${nextUniqueId++}`;\n\n    hovered: boolean = false;\n\n    constructor(public _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef) {\n        super(_elementRef);\n    }\n\n    ngAfterContentInit() {\n        this._validateControlChild();\n\n        if (this._control.controlType) {\n            this._elementRef.nativeElement.classList\n                .add(`mc-form-field-type-${this._control.controlType}`);\n\n            if (this._numberControl && this.hasStepper) {\n                this._stepper.stepUp.subscribe(this.onStepUp.bind(this));\n                this._stepper.stepDown.subscribe(this.onStepDown.bind(this));\n            }\n        }\n\n        // Subscribe to changes in the child control state in order to update the form field UI.\n        this._control.stateChanges.pipe(startWith())\n            .subscribe(() => {\n                this._changeDetectorRef.markForCheck();\n            });\n\n        if (this._numberControl) {\n            this._numberControl.stateChanges.pipe(startWith())\n                .subscribe(() => {\n                    this._changeDetectorRef.markForCheck();\n                });\n        }\n\n        // Run change detection if the value changes.\n        const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n\n        merge(valueChanges)\n            .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    ngAfterContentChecked() {\n        this._validateControlChild();\n    }\n\n    ngAfterViewInit() {\n        // Avoid animations on load.\n        this._changeDetectorRef.detectChanges();\n    }\n\n    clearValue($event) {\n        $event.stopPropagation();\n\n        if (this._control && this._control.ngControl) {\n            this._control.ngControl.reset();\n        }\n    }\n\n    onContainerClick($event) {\n        if (this._control.onContainerClick) {\n            this._control.onContainerClick($event);\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n        // tslint:disable-next-line:deprecation\n        if (event.keyCode === ESCAPE && this._control.focused && this.hasCleaner) {\n            if (this._control && this._control.ngControl) {\n                this._control.ngControl.reset();\n            }\n\n            event.preventDefault();\n        }\n    }\n\n    onHoverChanged(isHovered: boolean) {\n        if (isHovered !== this.hovered) {\n            this.hovered  = isHovered;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    onStepUp() {\n        if (this._numberControl) {\n            this._numberControl.stepUp(this._numberControl.step);\n        }\n    }\n\n    onStepDown() {\n        if (this._numberControl) {\n            this._numberControl.stepDown(this._numberControl.step);\n        }\n    }\n\n    /**\n     * Gets an ElementRef for the element that a overlay attached to the form-field should be\n     * positioned relative to.\n     */\n    getConnectedOverlayOrigin(): ElementRef {\n        return this.connectionContainerRef || this._elementRef;\n    }\n\n        /** Determines whether a class from the NgControl should be forwarded to the host element. */\n    _shouldForward(prop: keyof NgControl): boolean {\n        const ngControl = this._control ? this._control.ngControl : null;\n\n        return ngControl && ngControl[prop];\n    }\n\n    /** Throws an error if the form field's control is missing. */\n    protected _validateControlChild() {\n        if (!this._control) {\n            throw getMcFormFieldMissingControlError();\n        }\n    }\n\n    get hasHint(): boolean {\n        return this._hint && this._hint.length > 0;\n    }\n\n    get hasSuffix(): boolean {\n        return this._suffix && this._suffix.length > 0;\n    }\n\n    get hasPrefix(): boolean {\n        return this._prefix && this._prefix.length > 0;\n    }\n\n    get hasCleaner(): boolean {\n        return this._cleaner && this._cleaner.length > 0;\n    }\n\n    get hasStepper(): boolean {\n        return !!this._stepper;\n    }\n\n    get canShowCleaner(): boolean {\n        return this.hasCleaner &&\n            this._control &&\n            this._control.ngControl\n                ? this._control.ngControl.value && !this._control.disabled\n                : false;\n    }\n\n\n    get disabled(): boolean {\n        return this._control && this._control.disabled;\n    }\n\n    get canShowStepper(): boolean {\n        return this._numberControl &&\n            !this.disabled &&\n            (\n                this._numberControl.focused ||\n                this.hovered\n            );\n    }\n}\n\n@Directive({\n    selector: 'mc-form-field[mcFormFieldWithoutBorders]',\n    exportAs: 'mcFormFieldWithoutBorders',\n    host: { class: 'mc-form-field_without-borders' }\n})\nexport class McFormFieldWithoutBorders {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McCleaner } from './cleaner';\nimport { McFormField, McFormFieldWithoutBorders } from './form-field';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McStepper } from './stepper';\nimport { McSuffix } from './suffix';\n\n\n@NgModule({\n    declarations: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner,\n        McStepper\n    ],\n    imports: [CommonModule, McIconModule],\n    exports: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner,\n        McStepper\n    ]\n})\nexport class McFormFieldModule {\n}\n"],"names":["strategy","this","overlay","position","flexibleConnectedTo","elementRef","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withPositions","DEFAULT_4_POSITIONS","slice","scrollableAncestors","scrollDispatcher","getAncestorScrollContainers","withScrollableContainers","positionChanges","pipe","takeUntil","destroyed","subscribe","change","_this","tooltip","onPositionChange","scrollableViewProperties","isOverlayClipped","mcVisible","ngZone","run","hide","overlayRef","create","direction","positionStrategy","panelClass","scrollStrategy","updatePosition","detachments","detach","McTooltip","prototype","hasAttached","$event","updatedPlacement","mcPlacement","Object","keys","availablePositions","some","key","connectionPair","originX","originY","overlayX","overlayY","updateCompValue","setClassMap","markForCheck","handlePositioningUpdate","createOverlay","pos","overlayElement","clientHeight","hostView","element","nativeElement","currentContainer","style","top","parseInt","split","value","isDynamicTooltip","ngOnInit","initElementRefListeners","ngOnDestroy","dispose","manualListeners","forEach","listener","event","removeEventListener","clear","$unsubscribe","next","complete","handleKeydown","e","isTooltipOpen","keyCode","ESCAPE","handleTouchend","mcTrigger","set","show","addEventListener","disabled","portal","ComponentPortal","McTooltipComponent","attach","instance","afterHidden","property","mcVisibleChange","distinctUntilChanged","data","emit","getConfig","origin","getOrigin","getOverlayPosition","tslib_1.__assign","main","fallback","originPosition","isLtr","getMcTooltipInvalidPositionError","_a","invertPosition","x","y","overlayPosition","newX","newY","type","Directive","args","selector","exportAs","host","(keydown)","(touchend)","Overlay","ElementRef","NgZone","ScrollDispatcher","ViewContainerRef","undefined","decorators","Inject","MC_TOOLTIP_SCROLL_STRATEGY","Directionality","Optional","Output","mcTitle","Input","setTitle","mcMouseEnterDelay","mcMouseLeaveDelay","mcTooltipClass","isOpen","HostBinding","isParentDisabled","McToolTipModule","NgModule","declarations","exports","imports","CommonModule","OverlayModule","providers","MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","entryComponents","McVerticalNavbarItemIcon","class","McVerticalNavbarItemBadge","Component","template","McVerticalNavbarItemBase","_elementRef","_McVerticalNavbarMixinBase","mixinDisabled","McVerticalNavbarItem","_super","focusMonitor","trigger","call","tabIndex","monitor","tslib_1.__extends","defineProperty","stopMonitoring","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","styles","inputs","[attr.disabled]","[attr.tabindex]","FocusMonitor","McDropdownTrigger","Self","McVerticalNavbarHeader","McVerticalNavbarTitle","McVerticalNavbar","cd","expanded","toggle","animations","toggleVerticalNavbarAnimation","ChangeDetectorRef","COMPONENTS","McVerticalNavbarModule","A11yModule","PlatformModule","McIconModule","VERSION","Version","SELECT_PANEL_PADDING_X","McSidepanelContainerComponent","setAnimation","sidepanelConfig","animationTransform","transformIn","mcSidepanelTransformAnimation","in","transformOut","out","setPanelClass","classList","add","withShadow","validatePortalAttached","portalOutlet","Error","mcSidepanelAnimations","sidepanelState","tabindex","role","aria-modal","[attr.id]","[@state]","(@state.start)","(@state.done)","McSidepanelConfig","Boolean","MC_SIDEPANEL_WITH_INDENT","MC_SIDEPANEL_WITH_SHADOW","ViewChild","CdkPortalOutlet","BasePortalOutlet","uniqueId","McSidepanelRef","containerInstance","config","afterClosed$","Subject","afterOpened$","id","animationStateChanged","filter","phaseName","toState","McSidepanelAnimationState","Visible","take","Hidden","result","disableClose","merge","backdropClick","keydownEvents","close","closed","detachBackdrop","exit","afterClosed","asObservable","afterOpened","MC_SIDEPANEL_DEFAULT_OPTIONS","InjectionToken","McSidepanelService","injector","defaultOptions","parentSidepanelService","openedSidepanelsAtThisLevel","openedSidepanels","closeSidepanels","open","componentOrTemplateRef","fullConfig","getSidepanelById","container","attachContainer","ref","TemplateRef","attachTemplatePortal","TemplatePortal","$implicit","sidepanelRef","createInjector","contentRef","attachComponentPortal","push","removeOpenSidepanel","enter","closeAll","find","sidepanel","openedSidepanelsWithSamePosition","getOpenedSidepanelsWithSamePosition","PortalInjector","WeakMap","length","containerPortal","sidepanelContainer","injectionTokens","MC_SIDEPANEL_DATA","overlayConfig","OverlayConfig","hasBackdrop","backdropClass","getBackdropClass","maxWidth","overlayPanelClass","scrollStrategies","block","global","sidepanels","reverse","hasOpenedSidepanelWithBackdrop","requiredBackdrop","index","indexOf","splice","Injectable","Injector","SkipSelf","McSidepanelClose","sidepanelService","setTimeout","getClosestSidepanel","ngOnChanges","changes","proxiedChange","mcSidepanelClose","sidepanelResult","currentValue","(click)","McSidepanelHeader","closeable","McSidepanelBody","McSidepanelFooter","McSidepanelActions","McSidepanelModule","PortalModule","McCommonModule","McSplitterComponent","renderer","areas","_disabled","_gutterSize","isDragging","areaPositionDivider","listeners","_direction","coerceBooleanProperty","gutterSize","size","coerceNumberProperty","addArea","area","order","getSize","setOrder","initialSize","setStyle","isVertical","onMouseDown","leftAreaIndex","rightAreaIndex","leftArea","rightArea","startPoint","screenX","screenY","item","disableFlex","setSize","runOutsideAngular","listen","onMouseUp","onMouseMove","removeArea","indexToRemove","endPoint","offset","newLeftAreaSize","newRightAreaSize","minLeftAreaSize","getMinSize","minRightAreaSize","rightAreaOffset","unsubscribe","pop","preserveWhitespaces","Renderer2","McGutterDirective","_order","_size","getCursor","getState","coerceCssPixelValue","setAttr","state","attribute","setAttribute","McSplitterAreaDirective","splitter","removeStyle","sz","getSizeProperty","getOffsetSizeProperty","getComputedStyle","parseFloat","getMinSizeProperty","McSplitterModule","nextUniqueId","McToggleBase","_McToggleMixinBase","mixinTabIndex","mixinColor","ThemePalette","Primary","McToggleChange","McToggleComponent","_focusMonitor","_changeDetectorRef","labelPosition","ariaLabel","ariaLabelledby","_uniqueId","name","_checked","EventEmitter","_onTouchedCallback","_onChangeCallback","_","focus","focusVia","_inputElement","_getAriaChecked","checked","_onInteractionEvent","stopPropagation","_onLabelTextChange","_onInputClick","_updateModelValue","_emitChangeEvent","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","source","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","[id]","[class.mc-disabled]","[class.mc-toggle_off]","left","transition","animate","String","Attribute","McToggleModule","cdr","prefix","positions","classMap","_mcTrigger","_mcPlacement","_mcVisible","BehaviorSubject","onHideSubject","closeOnInteraction","POSITION_MAP","$visible","_mcTitle","isTitleString","unshift","visible","hideTid","clearTimeout","isContentEmpty","showTid","handleBodyInteraction","outputs","fadeAnimation","(body:click)","deps","useFactory","mcTooltipScrollStrategyFactory","parentDisabled","Map","title","_mcMouseEnterDelay","_mcMouseLeaveDelay","_mcTooltipClass","externalValue","ENTER","SPACE","multiple","altKey","isArrowKey","preventDefault","tree","keyManager","onKeydown","McTreeSelect","handleOpenKeydown","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","originalOnKeyDown","HOME","END","setFirstItemActive","setLastItemActive","activeItem","A","ctrlKey","hasDeselectedOptions_1","options","option","selected","select","deselect","previouslyFocusedIndex","activeItemIndex","shiftKey","selectViaInteraction","initializeSelection","Promise","resolve","then","setSelectionByValue","ngControl","_value","Array","isArray","getMcSelectNonArrayValueError","selectionModel","selectValue","sortValues","correspondingOption","setActiveItem","changeDetectorRef","_compareWith","error","isDevMode","console","warn","initKeyManager","onKeyDown","tabOut","destroy","_panelOpen","panel","scrollActiveOptionIntoView","resetOptions","changedOrDestroyed","optionSelectionChanges","onSelect","isUserInput","setOptionIds","wasSelected","isSelected","propagateChanges","stateChanges","options_1","toArray","sort","a","b","sortComparator","fallbackValue","valueToEmit","map","valueChange","onChange","selectionChange","McTreeSelectChange","optionIds","join","highlightCorrectOption","empty","activeOptionIndex","scrollTop","getOptionScrollPosition","getItemHeight","getOptionIndex","reduce","current","calculateOverlayPosition","itemHeight","items","getItemCount","panelHeight","Math","min","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","calculateOverlayScroll","offsetY","calculateOverlayOffsetY","checkOverlayWithinViewport","calculateOverlayOffsetX","overlayRect","overlayDir","getBoundingClientRect","viewportSize","viewportRuler","getViewportSize","isRtl","offsetX","leftOverflow","rightOverflow","right","width","round","topSpaceAvailable","triggerRect","bottomSpaceAvailable","height","bottom","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","adjustPanelUp","adjustPanelDown","transformOrigin","getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","optionHeightAdjustment","[class.mc-select-invalid]","[class.mc-select-required]","(focus)","(blur)","(window:resize)","mcSelectAnimations","transformPanel","fadeInContent","McFormFieldControl","CdkTree","ViewportRuler","ErrorStateMatcher","NgForm","FormGroupDirective","McFormField","NgControl","MC_SELECT_SCROLL_STRATEGY","CdkConnectedOverlay","tags","ViewChildren","McTag","customTrigger","ContentChild","McTreeSelectTrigger","McTreeSelection","openedChange","openedStream","closedStream","errorStateMatcher","placeholder","required","autoSelect","compareWith","McTreeSelectMixinBase","McTreeSelectModule","CdkTreeModule","McTreeModule","McTagsModule","McPseudoCheckboxModule","MC_SELECT_SCROLL_STRATEGY_PROVIDER","MC_TEXTAREA_VALUE_ACCESSOR","McTextareaBase","defaultErrorStateMatcher","parentForm","parentFormGroup","McTextareaMixinBase","mixinErrorState","McTextarea","inputValueAccessor","canGrow","focused","controlType","uid","_required","lineHeight","freeRowsHeight","minHeight","valueAccessor","previousNativeValue","growObserver","fromEvent","growSubscription","grow","bind","_id","paddingTop","paddingBottom","ngDoCheck","updateErrorState","dirtyCheckNativeValue","textarea","outerHeight","window","diff","max","scrollHeight","focusChanged","isFocused","isBadInput","onContainerClick","newValue","validity","badInput","getGrowHeight","toString","[class.mc-textarea-resizable]","[attr.placeholder]","[attr.aria-invalid]","[disabled]","[required]","McTextareaModule","FormsModule","hours","minutes","seconds","HHmmss","HHmm","TIMEFORMAT_PLACEHOLDERS","TimeFormats","DEFAULT_TIME_FORMAT","HOURS_MINUTES_SECONDS_REGEXP","RegExp","HOURS_MINUTES_REGEXP","HOURS_ONLY_REGEXP","uniqueComponentIdSuffix","formValidators","formValidatorOnChangeRegistrators","validatorOnChange","c","validatorOnChangeHandler","get","McTimepickerBase","McTimepickerMixinBase","ɵ1","validate","__validatorOnChangeHandler","validator","registerOnValidatorChange","McTimepicker","dateAdapter","_minTime","_maxTime","noop","Validators","compose","parseValidator","minTimeValidator","maxTimeValidator","applyInputChanges","_timeFormat","formatValue","timeFormatKey","minValue","minDateTime","getDateFromTimeString","maxValue","maxDateTime","onTouched","onBlur","onPaste","clipboardUserInput","clipboardData","getData","onInput","initialCursorStart","selectionStart","initialCursorEnd","selectionEnd","isAutocompleteTriggered","getParsedTimeParts","hoursOnly","hoursAndMinutes","hoursAndMinutesAndSeconds","doTimestringReformat","errors","createSelectionOfTimeComponentInInput","setProperty","getTimeStringFromDate","timeFormat","getKeyCode","upDownTimeByArrowKeys","switchSelectionBetweenTimeparts","applyParams","changedTime","timeToApply","currentDateTimeInput","updateValueAndValidity","cursorPos","modifiedTimePart","getTimeEditMetrics","incrementTime","decrementTime","getCursorPositionOfPrevTimePartStart","getCursorPositionOfNextTimePartStart","code","newEditParams","cursorStartPosition","cursorEndPosition","dateVal","whatToIncrement","TimeParts","getTimeDigitsFromDate","getDateFromTimeDigits","whatToDecrement","timeString","timeDevider","nextDividerPos","cursorPosition","minutesIndex","hoursIndex","secondsIndex","tempVal","getNumberWithLeadingZero","getHours","getMinutes","getSeconds","momentWrappedTime","parse","convertedTimeString","format","match","trim","Number","resultDate","Date","isNaN","getTime","digit","mcTimepickerParse","text","isTimeLowerThenMin","mcTimepickerLowerThenMintime","isTimeGreaterThenMax","mcTimepickerHigherThenMaxtime","timeToCompare","[attr.time-format]","[attr.min-time]","[attr.max-time]","[attr.value]","(input)","(paste)","NG_VALIDATORS","useValue","MC_INPUT_VALUE_ACCESSOR","DateAdapter","minTime","maxTime","McTimepickerModule","Right","Left","Top","Bottom","McSidepanelPosition","Void","transform","params","AnimationCurves","AccelerationCurve","DecelerationCurve","withIndent","animationState","detectChanges","onAnimation","tagEnd","tagList","addOnBlur","McTagInput","ɵ0","separatorKeyCodes","McTagList","McTagTrailingIcon","McTagAvatar","McTagRemove","MC_TAGS_DEFAULT_OPTIONS","McSelectChange","McSelectBase","McSelectMixinBase","McSelectTrigger","McSelect","_viewportRuler","_ngZone","_renderer","_dir","_parentFormField","_scrollStrategyFactory","hiddenItems","oneMoreText","triggerFontSize","panelDoneAnimating","panelDoneAnimatingStream","defer","apply","onSelectionChange","onStable","switchMap","o","_multiple","_focused","_onChange","_onTouched","o1","o2","_placeholder","getMcSelectDynamicMultipleError","getMcSelectNonFunctionValueError","SelectionModel","panelOpen","ngAfterContentInit","changed","added","removed","startWith","ngAfterViewInit","calculateHiddenItems","withHorizontalOrientation","fontSize","selectedOptions","viewValue","isEmpty","handleClosedKeydown","onFadeInDone","onFocus","onAttached","positionChange","getPanelTheme","color","selectedIndex","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","onRemoveMatcherItem","visibleItems","totalItemsWidth","getTotalItemsWidthInMatcher","totalVisibleItemsWidth","tag","offsetTop","offsetHeight","itemsCounter","querySelector","matcherList","itemsCounterShowed","matcherListWidth","matcherWidth","triggerClone","cloneNode","remove","appendChild","querySelectorAll","manager","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","labelCount","countGroupLabelsBeforeOption","optionGroups","first","group","MC_OPTION_PARENT_COMPONENT","ContentChildren","McOption","descendants","McOptgroup","McSelectModule","McOptionModule","McFormFieldModule","McTreeSelectBase","dir","parentFormField","scrollStrategyFactory","_autoSelect","updateSelectedOptions","onRemoveSelectedOption","selectedOption","tabLabelSubscription","tabs","tab","McTabGroup","clampTabIndex","[class.mc-tab-group_dynamic-height]","[class.mc-tab-group_inverted-header]","MC_TABS_CONFIG","dynamicHeight","McTab","tabBodyWrapper","tabHeader","headerPosition","animationDuration","selectedIndexChange","focusChange","animationDone","selectedTabChange","mcTabGroupMixinBase","McTabNavBase","mcTabNavMixinBase","McTabNav","McTabLinkBase","mcTabLinkMixinBase","McTabLink","isActive","[attr.aria-current]","[attr.aria-disabled]","[attr.tabIndex]","[class.mc-active]","active","McTabsModule","McTabLabel","McTabContent","McLightTabsCssStyler","McAlignTabsCenterCssStyler","McAlignTabsEndCssStyler","McStretchTabsCssStyler","McTabLabelWrapper","McTabBody","McTabBodyPortal","McTabHeader","McTagSelectionChange","TAG_ATTRIBUTE_NAMES","McTagBase","_McTagMixinBase","hasFocus","tagListSelectable","_selected","_selectable","_removable","addHostClassName","coercedValue","dispatchSelectionChange","textContent","addClassModificatorForIcons","icons","contentChildren","iconElement","previousElementSibling","nextElementSibling","nextSibling","previousSibling","firstIconElement","secondIconElement","_i","TAG_ATTRIBUTE_NAMES_1","attr","hasAttribute","tagName","toLowerCase","toggleSelected","removable","handleClick","DELETE","BACKSPACE","selectable","blur","[class.mc-tag-selected]","[class.mc-tag-with-avatar]","[class.mc-tag-with-trailing-icon]","[class.mc-tag-disabled]","McIcon","avatar","trailingIcon","removeIcon","parentTag","McTagListBase","_McTagListMixinBase","McTagListChange","userTabIndex","tagChanges","orientation","_tabIndex","lastDestroyedTagIndex","tagInput","hasFocusedTag","syncTagsDisabledState","FocusKeyManager","resetTags","updateTabIndex","updateFocusForDestroyedTags","dropSubscriptions","registerInput","inputElement","originatesFromTag","focusInput","keydown","target","isInputEmpty","contains","clearSelection","correspondingTag","markAsTouched","newTagIndex","isValidIndex","nodeName","skip","listenToTagsFocus","listenToTagsSelection","listenToTagsRemoved","tagFocusSubscription","tagBlurSubscription","tagSelectionSubscription","tagRemoveSubscription","tagSelectionChanges","tagFocusChanges","tagIndex","updateActiveItem","tagBlurChanges","tagRemoveChanges","currentElement","parentElement","[class.mc-invalid]","[class.mc-required]","_addOnBlur","_tagList","emittagEnd","isSeparatorKey","input","hasModifierKey","separators","has","CdkTreeNodeDef","McTreeNodeDef","McTreeNodePadding","arguments","baseLeftPadding","_indent","iconWidth","withIcon","paddingIndent","nodeLevel","treeNode","treeControl","getLevel","level","leftPadding","isExpandable","setPadding","CdkTreeNodePadding","indent","McTreeNodeToggle","CdkTreeNodeToggle","MC_TREE_OPTION_PARENT_COMPONENT","McTreeOptionChange","uniqueIdCounter","McTreeOption","parent","_active","toBoolean","setSelected","setActiveStyles","setInactiveStyles","getHeight","clientRects","getClientRects","getHostElement","emitSelectionChangeEvent","setFocusedOption","getTabIndex","[class.mc-selected]","CdkTreeNode","McTreeNavigationChange","McTreeSelectionChange","McTreeSelectionBase","differs","McTreeSelectionBaseMixin","noUnselect","navigationChange","rawValue","log","withShift","withCtrl","collapse","expand","toggleFocusedOption","PAGE_UP","setPreviousPageItemActive","PAGE_DOWN","setNextPageItemActive","updateScrollSize","withScrollSize","floor","previousIndex_1","previousActiveItemIndex","activeIndex_1","canDeselectLast","emitNavigationEvent","focusedIndex","focusedOption","emitChangeEvent","renderNodeChanges","dataDiffer","viewContainer","parentData","nodeOutlet","arrayOfInstances","_embeddedViews","view","viewDef","def","nodes","node","nodeMatchedQueries","matchedQueryIds","nodeData","nodeIndex","reset","notifyOnChanges","IterableDiffers","CdkTreeNodeOutlet","MC_TREE_DIRECTIVES","McTreeFlattener","transformFunction","getChildren","flattenNode","resultNodes","parentMap","flatNode","children","child","childParentMap","flattenNodes","structuredData","expandFlattenedNodes","results","currentExpand","i","isExpanded","McTreeFlatDataSource","treeFlattener","initialData","flattenedData","expandedData","_data","dataNodes","connect","collectionViewer","viewChange","expansionModel","disconnect","DataSource","McTreeNestedDataSource","CdkPortal","ctorParameters","McTabBase","mcTabMixinBase","viewContainerRef","textLabel","contentPortal","hasOwnProperty","explicitContent","implicitContent","templateLabel","read","mcTabsAnimations","translateTab","onCentering","beforeCentering","afterLeavingCenter","onCentered","dirChangeSubscription","Subscription","EMPTY","computePositionAnimationState","positionIndex","bodyPosition","computePositionFromOrigin","onTranslateTabStarted","isCentering","isCenterPosition","onTranslateTabComplete","fromState","getLayoutDirection","portalHost","PortalHostDirective","content","componentFactoryResolver","centeringSub","leavingSub","ComponentFactoryResolver","McTabLabelWrapperBase","mcTabLabelWrapperMixinBase","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","McTabHeaderBase","showPaginationControls","disableScrollAfter","disableScrollBefore","selectFocusedIndex","indexFocused","_scrollDistance","selectedIndexChanged","_selectedIndex","focusIndex","v","getMaxScrollDistance","scrollDistanceChanged","checkScrollingControls","ngAfterContentChecked","tabLabelCount","labelWrappers","updatePagination","scrollToLabel","updateTabScrollPosition","dirChange","observableOf","resize","realign","withWrap","requestAnimationFrame","newFocusIndex","setTabFocus","onContentChanges","currentTextContent","zoneCallback","checkPaginationEnabled","containerEl","tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","tabList","scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","[class.mc-tab-header__pagination-controls_enabled]","[class.mc-tab-header_rtl]","nextId","McTabChangeEvent","McTabGroupBase","lightTabs","defaultConfig","indexToSelect","tabBodyWrapperHeight","tabsSubscription","_dynamicHeight","lightTab","groupId","isFirstRun_1","createChangeEvent","subscribeToTabLabels","getTabLabelId","getTabContentId","setTabBodyWrapperHeight","tabHeight","wrapper","removeTabBodyWrapperHeight","McMeasureScrollbarService","McModalControlService","DOCUMENT","mcModalType","mcContent","mcComponentParams","mcFooter","mcZIndex","mcWidth","mcWrapClassName","mcClassName","mcStyle","mcCloseByESC","mcClosable","mcMask","mcMaskClosable","mcMaskStyle","mcBodyStyle","mcAfterOpen","mcAfterClose","mcOkText","mcOkType","mcOkLoading","mcOnOk","mcCancelText","mcCancelLoading","mcOnCancel","modalContainer","bodyContainer","autoFocusButtonOk","mcGetContainer","McModalComponent","McModalRef","CssUnitPipe","defaultUnit","formatted","Pipe","ModalBuilderForService","createModal","changeProps","destroyModal","getInstance","modalRef","assign","McModalService","modalControl","openModals","afterAllClose","confirm","confirmType","success","simpleConfirm","delete","McModalModule","McButtonModule","MC_NAVBAR_CONTAINER","MC_NAVBAR_ITEM","MC_NAVBAR_BRAND","MC_NAVBAR_TITLE","McNavbarLogo","McNavbarBrand","McNavbarTitle","McNavbarItemBase","_McNavbarMixinBase","McNavbarItem","_platform","_cdRef","dropdownItems","isCollapsed","_subscription","encodeURI","dropdownContent","denyClickIfDisabled","_focusMonitor$","hasDropdownContent","listenClickOutside","startListenFocusDropdownItems","stopListenFocusDropdownItems","isActiveDropdownLink","link","isBrowser","location","href","handleClickByItem","toggleDropdown","isNavbarItem","handleClickByDropdownItem","forceCloseDropdown","_dropdownElements","el","events","eventListeners","stopImmediatePropagation","Platform","collapsedTitle","dropdownItemTmpl","McNavbarContainer","cssClasses","CollapsibleItem","_collapsed","processCollapsed","collapsed","updateCollapsedClass","CachedItemWidth","itemsForCollapse","_collapsedItemsWidth","calculateAndCacheCollapsedItemsWidth","updateTitle","acc","getTitle","computedTitle","getAttribute","decodeURI","innerText","removeAttribute","McNavbar","forceRecalculateItemsWidth","resizeDebounceInterval","firstLevelElement","secondLevelElements","resizeObserver","debounceTime","_resizeSubscription","updateCollapsed","_itemsWidths","calculateAndCacheItemsWidth","_totalItemsWidths","calculateAndCacheTotalItemsWidth","collapseDelta","maxAllowedWidth","itemsWidths","canCollapse","collapsedItemsWidth","getOuterElementWidth","getPropertyValue","allItemsSelector","allItems","from","getItemsForCollapse","McNavbarModule","idIterator","McProgressBarBase","_McProgressBarMixinBase","McProgressBar","mode","McProgressBarModule","McProgressSpinnerBase","_McProgressSpinnerMixinBase","McProgressSpinner","percentage","McProgressSpinnerModule","McRadioChange","McRadioGroupBase","_McRadioGroupMixinBase","MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","McRadioGroup","_changeDetector","_name","_isInitialized","_labelPosition","controlValueAccessorChangeFn","updateRadioButtonNames","markRadiosForCheck","updateSelectedRadioFromValue","checkSelectedRadioButton","touch","_radios","radio","isAlreadySelected","McRadioButton","McRadioButtonBase","_McRadioButtonMixinBase","radioGroup","_radioDispatcher","removeUniqueSelectionListener","newCheckedState","notify","newDisabledState","onInputClick","onInputChange","groupValueChanged","[class.mc-checked]","UniqueSelectionDispatcher","ariaDescribedby","McRadioModule","_element","horizontal","_modelChanges","McListSelection","_keyManager","_tempValues","_setOptionsFromValues","_b","_c","selectAll","_reportValueChange","deselectAll","_getHeight","_canDeselectLast","values","getSelectedOptionValues","_isValidIndex","listOption","_removeOptionFromList","_hasFocus","optionIndex","_getOptionIndex","setPreviousItemActive","setNextItemActive","_onKeyDown","McListSelectionChange","_getOptionByValue","[tabIndex]","MC_SELECTION_LIST_VALUE_ACCESSOR","McListOption","_McListSelectionMixinBase","McListBase","McList","McListSubheaderCssStyler","McListItemBase","McListItem","_lineSetter","McLineSetter","_lines","_handleFocus","_handleBlur","_getHostElement","McLine","McListModule","McLineModule","McLinkBase","_McLinkBase","McLink","McLinkModule","parentService","rootOpenModals","rootAfterAllClose","rootRegisteredMetaMap","registeredMetaMap","registerModal","hasRegistered","afterOpenSubscription","afterOpen","afterCloseSubscription","afterClose","removeOpenModal","ModalUtil","document","lastPosition","listenDocumentClick","getLastClickPosition","clientX","clientY","ModalUtil$1","cfr","mcMeasureScrollbarService","changeDetector","_mcClosable","_mcMask","_mcMaskClosable","_mcOkLoading","_mcCancelLoading","isComponent","createDynamicComponent","isModalButtons","formatModalButtons","HTMLElement","OverlayRef","handleVisibleStateChange","firstChange","contentComponentRef","insert","changeVisibleFromInside","triggerOk","onClickOkCancel","triggerCancel","getContentComponentRef","getContentComponent","getElement","onClickMask","isModalType","onClickCloseBtn","ok","cancel","loadingKey","caseClose_1","doClose","isPromise","handleThen","catch","isNonEmptyString","isTemplateRef","Type","animation","closeResult","changeBodyOverflow","animateTo","getButtonCallableProp","prop","onButtonClick","button","loading","changeAnimationState","maskAnimationClassMap","modalAnimationClassMap","isVisible","updateTransformOrigin","buttons","autoLoading","component","factory","resolveComponentFactory","childInjector","parentInjector","modalElement","plusNum","body","scrollBarWidth","lastValueValid","date","isValid","getValidDateOrNull","sameDate","cvaOnChange","dateInput","McDatepickerInputEvent","McDatepickerInput","dateChange","getThemePalette","formField","dateFormats","display","obj","isDateInstance","MC_DATEPICKER_VALUE_ACCESSOR","MC_DATEPICKER_VALIDATORS","[attr.aria-haspopup]","[attr.aria-owns]","[attr.min]","[attr.max]","(change)","MC_DATE_FORMATS","mcDatepicker","mcDatepickerFilter","McDatepickerToggleIcon","McDatepickerToggle","intl","defaultTabIndex","parsedTabIndex","datepicker","watchStateChanges","datepickerDisabled","disabledChange","inputDisabled","datepickerInput","datepickerToggled","[class.mc-datepicker-toggle_active]","[class.mc-warn]","McDatepickerIntl","customIcon","McDatepickerModule","McCalendar","McCalendarBody","McDatepicker","McDatepickerContent","McMonthView","McYearView","McMultiYearView","McCalendarHeader","MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","McDivider","_vertical","_inset","[attr.aria-orientation]","[class.mc-divider-vertical]","[class.mc-divider-inset]","vertical","inset","McDividerModule","McDropdownContent","_template","_componentFactoryResolver","_appRef","_injector","_viewContainerRef","_document","_attached","context","_portal","_outlet","DomPortalOutlet","createElement","insertBefore","outletElement","isAttached","ApplicationRef","MC_DROPDOWN_PANEL","McDropdownItemBase","_McDropdownItemMixinBase","McDropdownItem","_parentDropdownPanel","_hovered","_highlighted","_triggersNestedDropdown","addItem","removeItem","_getTabIndex","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","childNodes","length_1","nodeType","[attr.role]","[class.mc-dropdown__item_highlighted]","(mouseenter)","mcDropdownAnimations","transformDropdown","opacity","query","fadeInItems","MC_DROPDOWN_DEFAULT_OPTIONS","providedIn","MC_DROPDOWN_DEFAULT_OPTIONS_FACTORY","McDropdown","_defaultOptions","_classList","_panelAnimationState","_animationDone","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_overlapTriggerX","overlapTriggerX","_overlapTriggerY","overlapTriggerY","_hasBackdrop","throwMcDropdownInvalidPositionX","setPositionClasses","throwMcDropdownInvalidPositionY","classes","previousPanelClass","_previousPanelClass","className","_handleKeydown","setFocusOrigin","focusFirstItem","lazyContent","resetActiveItem","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","_onAnimationStart","templateRef","MC_DROPDOWN_SCROLL_STRATEGY","MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER","MC_DROPDOWN_SCROLL_STRATEGY_FACTORY","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","_overlay","_scrollStrategy","_parent","_dropdownItemInstance","_handleTouchStart","_openedBy","dropdownOpened","dropdownClosed","_overlayRef","_opened","_closeSubscription","_hoverSubscription","triggersNestedDropdown","_dropdown","dropdown","reason","_destroy","_check","_handleHover","_cleanUpSubscriptions","_createOverlay","_setPosition","_getPortal","_closingActions","_init","opened","_reset","_setIsOpened","throwMcDropdownMissingError","_getOverlayConfig","_subscribeToPositions","withLockedPosition","originFallbackX","overlayFallbackX","overlayFallbackY","originFallbackY","backdrop","parentClose","hover","_handleMousedown","_handleClick","delay","asapScheduler","aria-haspopup","[attr.aria-expanded]","(mousedown)","McDropdownModule","McContentComponent","[class.mc-layout-content]","McFooterComponent","[class.mc-layout-footer]","McHeaderComponent","[class.mc-layout-header]","McLayoutComponent","hasSidebar","[class.mc-layout]","[class.mc-layout-has-sidebar]","McSidebarComponent","mcLayoutComponent","_mcWidth","mcCollapsedWidth","mcCollapsedChange","collapsible","mcCollapsed","[class.mc-layout-sidebar]","[class.mc-layout-sidebar-collapsed]","[style.flex]","[style.max-width.px]","[style.min-width.px]","[style.width.px]","Host","mcCollapsible","McLayoutModule","listSelection","checkboxPosition","wasSelected_1","_text","[class.mc-focused]","McListSelectionBase","activeDate","addCalendarYears","_activeDate","yearsPerPage","onYearSelected","getYear","compareDate","oldActiveDate","activeDateChange","focusActiveCell","getActiveCell","mcCalendarBody","createCellForYear","year","yearName","getYearName","createDate","McCalendarCell","shouldEnableYear","maxDate","minDate","dateFilter","firstOfYear","addCalendarDays","selectedChange","yearSelected","monthSelected","createMissingDateImplError","today","validDate","deserialize","clampDate","init","selectedMonth","getMonthInCurrentYear","_minDate","_maxDate","onMonthSelected","month","normalizedDate","daysInMonth","getNumDaysInMonth","getDate","handleCalendarBodyKeydown","addCalendarMonths","getMonth","todayMonth","yearLabel","monthNames","getMonthNames","months","row","createCellForMonth","monthName","monthYearA11yLabel","newMonthName","toLocaleUpperCase","substr","shouldEnableMonth","activeYear","isYearAndMonthAfterMaxDate","isYearAndMonthBeforeMinDate","firstOfMonth","maxYear","maxMonth","minYear","minMonth","calendar","currentView","label","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","isSameView","nextEnabled","date1","date2","startView","userSelection","moveFocusOnNextTick","intlChanges","_startAt","clampedActiveDate","_currentView","calendarHeaderPortal","headerComponent","startAt","ngAfterViewChecked","getCurrentViewComponent","updateTodaysDate","monthView","yearView","multiYearView","dateSelected","yearSelectedInMultiYearView","normalizedYear","monthSelectedInYearView","normalizedMonth","userSelected","goToDateInView","dateClass","mcDatepickerAnimations","fadeInCalendar","Element","matches","msMatchesSelector","datepickerUid","MC_DATEPICKER_SCROLL_STRATEGY","MC_DATEPICKER_SCROLL_STRATEGY_FACTORY","McDatepickerContentBase","McDatepickerContentMixinBase","[@transformPanel]","selectedChanged","validSelected","focusedElementBeforeOpen","inputSubscription","_color","popupRef","popupComponentRef","oldValue","selectYear","selectMonth","activeElement","openAsPopup","calendarPortal","completeClose","createPopup","setColor","createPopupPositionStrategy","calendarHeaderComponent","targetElement","datepickerSubscription","localeSubscription","mcDatepickerParse","minValidator","control","controlValue","mcDatepickerMin","actual","maxValidator","mcDatepickerMax","filterValidator","localeChanges","oldDate","_min","_max","isAltDownArrow","readOnly","readonly","McCard","McCardModule","MC_CHECKBOX_CLICK_ACTION","MC_CHECKBOX_CONTROL_VALUE_ACCESSOR","McCheckbox","Init","Checked","Unchecked","Indeterminate","McCheckboxChange","McCheckboxBase","_McCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","_controlValueAccessorChangeFn","_indeterminate","focusOrigin","_onInputFocusChange","_transitionCheckState","indeterminate","newState","oldState","[class.mc-indeterminate]","[class.mc-checkbox-label-before]","MC_CHECKBOX_REQUIRED_VALIDATOR","McCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","McCheckboxModule","stepUp","step","res","stepDown","MC_INPUT_INVALID_TYPES","BIG_STEP","SMALL_STEP","McInputBase","_McInputMixinBase","McNumberInput","_model","bigStep","isDigit","Infinity","_host","self","getPrototypeOf","normalizeSplitter","_focusChanged","minuses","NUMPAD_MINUS","DASH","FF_MINUS","serviceKeys","TAB","arrows","allowedKeys","concat","isIEPeriod","isNotIEPeriod","metaKey","C","V","X","F1","F12","EDGE","TRIDENT","ZERO","NINE","NUMPAD_ZERO","NUMPAD_NINE","valueAsNumber","update","replace","isFloat","isInt","test","NgModel","McFormFieldNumberControl","McInput","_uid","_type","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","_validateType","_dirtyCheckNativeValue","_onInput","_isNeverEmpty","_isBadInput","getMcInputUnsupportedTypeError","McInputMono","MIN_VALIDATOR","MinValidator","_createValidator","_validator","MAX_VALIDATOR","MaxValidator","McInputModule","calendarLabel","openCalendarLabel","displayValue","enabled","numCols","activeCell","cellAspectRatio","selectedValueChange","cellClicked","cell","columnChanges","rows","firstRowOffset","cellPadding","cellWidth","isActiveCell","rowIndex","colIndex","cellNumber","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","hasSameMonthAndYear","selectedDate","getDateInCurrentMonth","selectedYear","todayDate","monthLabel","firstWeekOffset","getDayOfWeek","createWeekCells","dateNames","getDateNames","weeks","shouldEnableDate","dateA11yLabel","cellClasses","d1","d2","todayYear","activeOffset","years","_isOpen","showPanel","McAutocomplete","setVisibility","setScrollTop","getScrollTop","emitSelectEvent","McAutocompleteSelectedEvent","optionSelected","MC_AUTOCOMPLETE_DEFAULT_OPTIONS","displayWith","panelWidth","autoActiveFirstOption","McAutocompleteOrigin","MC_AUTOCOMPLETE_SCROLL_STRATEGY","MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","McAutocompleteTrigger","zone","optionSelections","autocomplete","autocompleteAttribute","_autocompleteDisabled","overlayAttached","componentDestroyed","viewportSubscription","canOpenOnNextFocus","closeKeyEventStream","windowBlurHandler","destroyPanel","openPanel","attachOverlay","closePanel","closingActionsSubscription","getOutsideClickStream","McOptionSelectionChange","setTriggerValue","activeOption","prevActiveItem","canOpen","scrollToOption","handleInput","previousValue","handleFocus","clickTarget","newScrollPosition","subscribeToClosingActions","firstStable","optionChanges","tap","reapplyLastPosition","panelClosingActions","setValueAndClose","toDisplay","inputValue","_control","clearPreviousSelectedOption","getMcAutocompleteMissingPanelError","setOrigin","getConnectedElement","updateSize","getPanelWidth","getOverlayConfig","wasOpen","withPush","connectedTo","getConnectedOverlayOrigin","getHostWidth","[attr.autocomplete]","(focusin)","autocompleteDisabled","McAutocompleteModule","McButtonCssStyler","[class.mc-button]","[class.mc-icon-button]","McButtonBase","McButtonMixinBase","McButton","McAnchor","haltDisabledEvents","MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","McButtonToggleGroup","McButtonToggleChange","buttonToggles","syncButtonToggle","isPrechecked","[class.mc-button-toggle-vertical]","McButtonToggle","buttonToggleGroup","isSingleSelector","onToggleClick","newChecked","[class.mc-button-toggle-standalone]","[class.mc-button-toggle-checked]","mcButton","McButtonToggleModule","hostElement","onClick","[class.mc-card_readonly]","[class.mc-card_selected]","__extends","d","__","constructor","extendStatics","isBoolean","val","MC_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","Default","colorPalette","errorState","matcher","isErrorState","optionsArray","groups","groupCounter","optionHeight","currentScrollPosition","optionOffset","arrayMap","array","iteratee","baseValues","object","props","objectValues","mcSelectScrollStrategyProviderFactory","reposition","getMcFormFieldMissingControlError","MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","inputType","sanitizeNumber","isFinite","getPrecision","arr","pow","value1","value2","precision","provider","openSidepanels","scrollThrottle","setPrototypeOf","__proto__","p","__assign","s","n","MC_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","computedStyle","removeChild","BidiModule","Second","Empty","_setLineClass","count","_resetClasses","_setClass","isAdd","ShowOnDirtyErrorStateMatcher","form","invalid","dirty","submitted","touched","McPseudoCheckbox","scrollbarMeasure","overflow","initScrollBarWidth","_scrollbarWidth","scrollDiv","scrollProp","clientWidth","McOptgroupBase","McOptgroupMixinBase","uniqueOptgroupIdCounter","labelId","[class.mc-optgroup-disabled]","[attr.aria-labelledby]","mostRecentViewValue","[class.mc-option-multiple]","MC_LABEL_GLOBAL_OPTIONS","StandardCurve","SharpCurve","topCenter","topLeft","topRight","rightTop","rightBottom","bottomCenter","bottomLeft","bottomRight","leftTop","leftBottom","EXTENDED_OVERLAY_POSITIONS","POSITION_TO_CSS_MAP","minWidth","animateChild","McIconCSSStyler","McIconBase","_McIconMixinBase","iconName","McCleaner","McHint","McPrefix","McStepper","onStepUp","onStepDown","McSuffix","McFormFieldBase","_McFormFieldMixinBase","_labelId","hovered","_validateControlChild","_numberControl","hasStepper","_stepper","valueChanges","clearValue","hasCleaner","onHoverChanged","isHovered","connectionContainerRef","_shouldForward","_hint","_suffix","_prefix","_cleaner","[class.mc-form-field_invalid]","[class.mc-form-field_has-prefix]","[class.mc-form-field_has-suffix]","[class.mc-form-field_has-cleaner]","[class.mc-form-field_has-stepper]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","(mouseleave)","McFormFieldWithoutBorders","uniqueAutocompleteIdCounter","defaults","_autoActiveFirstOption"],"mappings":"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"}