{"version":3,"file":"mosaic.umd.min.js","sources":["../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/version.ts","../../src/lib/radio/radio.component.ts","../../src/lib/radio/radio.module.ts","../../src/lib/list/list-selection.component.ts","../../src/lib/list/list.component.ts","../../src/lib/list/list.module.ts","../../src/lib/checkbox/checkbox-config.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/utils/utils.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/line/line.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/icon/icon.component.ts","../../src/lib/icon/icon.module.ts","../../src/lib/button/button.component.ts","../../src/lib/button/button.module.ts","../../src/lib/divider/divider.component.ts","../../src/lib/divider/divider.module.ts"],"sourcesContent":["import {\n    AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport {\n    CanColor,\n    CanDisable,\n    HasTabIndex,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\nimport { MC_CHECKBOX_CLICK_ACTION, McCheckboxClickAction } from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mc-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McCheckbox),\n    multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n    /** The initial state of the component before any user interaction. */\n    Init,\n    /** The state representing the component when it's becoming checked. */\n    Checked,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate\n}\n\n/** Change event object emitted by McCheckbox. */\nexport class McCheckboxChange {\n    /** The source McCheckbox of the event. */\n    source: McCheckbox;\n    /** The new `checked` value of the checkbox. */\n    checked: boolean;\n}\n\n// Boilerplate for applying mixins to McCheckbox.\n/** @docs-private */\nexport class McCheckboxBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\nexport const _McCheckboxMixinBase =\n    mixinTabIndex(mixinColor(mixinDisabled(McCheckboxBase)));\n\n\n/**\n * A mosaic checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A McCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n */\n@Component({\n    selector: 'mc-checkbox',\n    templateUrl: 'checkbox.html',\n    styleUrls: ['checkbox.css'],\n    exportAs: 'mcCheckbox',\n    host: {\n        class: 'mc-checkbox',\n        '[id]': 'id',\n        '[attr.id]': 'id',\n        '[class.mc-checkbox-indeterminate]': 'indeterminate',\n        '[class.mc-checkbox-checked]': 'checked',\n        '[class.mc-checkbox-disabled]': 'disabled',\n        '[class.mc-checkbox-label-before]': 'labelPosition == \"before\"'\n    },\n    providers: [MC_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCheckbox extends _McCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex {\n\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     */\n    @Input('aria-label') ariaLabel: string = '';\n\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n    private _uniqueId: string = `mc-checkbox-${++nextUniqueId}`;\n\n    /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n    @Input() id: string = this._uniqueId;\n\n    /** Returns the unique id for the visual hidden input. */\n    get inputId(): string {\n        return `${this.id || this._uniqueId}-input`;\n    }\n\n    /** Whether the checkbox is required. */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    private _required: boolean;\n\n    /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n    @Input() labelPosition: 'before' | 'after' = 'after';\n\n    /** Name value will be applied to the input element if present */\n    @Input() name: string | null = null;\n\n    /** Event emitted when the checkbox's `checked` value changes. */\n    @Output() readonly change: EventEmitter<McCheckboxChange> =\n        new EventEmitter<McCheckboxChange>();\n\n    /** Event emitted when the checkbox's `indeterminate` value changes. */\n    @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** The value attribute of the native input element */\n    @Input() value: string;\n\n    /** The native `<input type=\"checkbox\">` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * @docs-private\n     */\n    _onTouched: () => any = () => {\n    }\n\n    private _currentAnimationClass: string = '';\n\n    private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n    private _controlValueAccessorChangeFn: (value: any) => void = () => {\n    }\n\n    constructor(elementRef: ElementRef,\n                private _changeDetectorRef: ChangeDetectorRef,\n                private _focusMonitor: FocusMonitor,\n                @Attribute('tabindex') tabIndex: string,\n                @Optional() @Inject(MC_CHECKBOX_CLICK_ACTION)\n                private _clickAction: McCheckboxClickAction) {\n        super(elementRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._inputElement.nativeElement)\n            .subscribe((focusOrigin) => this._onInputFocusChange(focusOrigin));\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    }\n\n    /**\n     * Whether the checkbox is checked.\n     */\n    @Input()\n    get checked(): boolean {\n        return this._checked;\n    }\n\n    set checked(value: boolean) {\n        if (value != this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _checked: boolean = false;\n\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value != this.disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    @Input()\n    get indeterminate(): boolean {\n        return this._indeterminate;\n    }\n\n    set indeterminate(value: boolean) {\n        const changed = value != this._indeterminate;\n        this._indeterminate = value;\n\n        if (changed) {\n            if (this._indeterminate) {\n                this._transitionCheckState(TransitionCheckState.Indeterminate);\n            } else {\n                this._transitionCheckState(\n                    this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n    }\n\n    private _indeterminate: boolean = false;\n\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // This method is getting called whenever the label of the checkbox changes.\n        // Since the checkbox uses the OnPush strategy we need to notify it about the change\n        // that has been recognized by the cdkObserveContent directive.\n        this._changeDetectorRef.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any) {\n        this.checked = !!value;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this._onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n    }\n\n    _getAriaChecked(): 'true' | 'false' | 'mixed' {\n        return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n    }\n\n    private _transitionCheckState(newState: TransitionCheckState) {\n        const oldState = this._currentCheckState;\n        const element: HTMLElement = this._elementRef.nativeElement;\n\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n\n        this._currentCheckState = newState;\n\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n        }\n    }\n\n    private _emitChangeEvent() {\n        const event = new McCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    }\n\n    /** Function is called whenever the focus changes for the input element. */\n    private _onInputFocusChange(focusOrigin: FocusOrigin) {\n        if (focusOrigin) {\n            this._onTouched();\n        }\n    }\n\n    /** Toggles the `checked` state of the checkbox. */\n    toggle(): void {\n        this.checked = !this.checked;\n    }\n\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event\n     */\n    _onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && this._clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && this._clickAction !== 'check') {\n\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n\n            this.toggle();\n            this._transitionCheckState(\n                this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        } else if (!this.disabled && this._clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mc-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n\n    /** Focuses the checkbox. */\n    focus(): void {\n        this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n    }\n\n    _onInteractionEvent(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n}\n","import {\n    Directive,\n    forwardRef,\n    Provider\n} from '@angular/core';\nimport {\n    CheckboxRequiredValidator,\n    NG_VALIDATORS\n} from '@angular/forms';\n\n\nexport const MC_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McCheckboxRequiredValidator),\n    multi: true\n};\n\n/**\n * Validator for Mosaic checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mc-checkbox`.\n */\n@Directive({\n    selector: `mc-checkbox[required][formControlName],\n             mc-checkbox[required][formControl], mc-checkbox[required][ngModel]`,\n    providers: [MC_CHECKBOX_REQUIRED_VALIDATOR],\n    host: { '[attr.required]': 'required ? \"\" : null' }\n})\nexport class McCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McCheckbox } from './checkbox';\nimport { McCheckboxRequiredValidator } from './checkbox-required-validator';\n\n\n@NgModule({\n    imports: [CommonModule, McCommonModule],\n    exports: [McCheckbox, McCheckboxRequiredValidator, McCommonModule],\n    declarations: [McCheckbox, McCheckboxRequiredValidator]\n})\nexport class McCheckboxModule {\n}\n","\nimport { Version } from '@angular/core';\n\nexport const VERSION = new Version('0.0.1-4666d18');\n","import {\n    AfterContentInit, AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef,\n    Input, OnDestroy, OnInit, Optional, Output, QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\n\nimport {UniqueSelectionDispatcher} from '@ptsecurity/cdk/collections';\n\nimport {\n    CanColor,\n    CanDisable,\n    HasTabIndex,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/** Change event object emitted by McRadio. */\nexport class McRadioChange {\n    constructor(\n        /** The McRadioButton that emits the change event. */\n        public source: McRadioButton,\n        /** The value of the McRadioButton. */\n        public value: any) {}\n}\n\n// Boilerplate for applying mixins to McRadioGroup.\n/** @docs-private */\nexport class McRadioGroupBase { }\nexport const _McRadioGroupMixinBase = mixinDisabled(McRadioGroupBase);\n\n/**\n * Provider Expression that allows mc-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McRadioGroup),\n    multi: true\n};\n\n@Directive({\n    selector: 'mc-radio-group',\n    exportAs: 'mcRadioGroup',\n    providers: [MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n    host: {\n        'role': 'radiogroup',\n        'class': 'mc-radio-group'\n    },\n    inputs: ['disabled']\n})\nexport class McRadioGroup extends _McRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** Child radio buttons. */\n    @ContentChildren(forwardRef(() => McRadioButton), { descendants: true })\n    _radios: QueryList<McRadioButton>;\n\n    /**\n     * Selected value for group. Should equal the value of the selected radio button if there *is*\n     * a corresponding radio button with a matching value. If there is *not* such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    private _value: any = null;\n\n    /** The HTML name attribute applied to radio buttons in this group. */\n    private _name: string = `mc-radio-group-${nextUniqueId++}`;\n\n    /** The currently selected radio button. Should match value. */\n    private _selected: McRadioButton | null = null;\n\n    /** Whether the `value` has been set to its initial value. */\n    private _isInitialized: boolean = false;\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    private _labelPosition: 'before' | 'after' = 'after';\n\n    /** Whether the radio group is disabled. */\n    private _disabled: boolean = false;\n\n    /** Whether the radio group is required. */\n    private _required: boolean = false;\n\n    /** The method to be called in order to update ngModel */\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @docs-private\n     */\n    onTouched: () => any = () => {};\n\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    @Input()\n    get name(): string { return this._name; }\n    set name(value: string) {\n        this._name = value;\n        this.updateRadioButtonNames();\n    }\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this.markRadiosForCheck();\n    }\n\n    /** Value of the radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n\n            this.updateSelectedRadioFromValue();\n            this.checkSelectedRadioButton();\n        }\n    }\n\n    checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n\n    /** Whether the radio button is selected. */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: McRadioButton | null) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this.checkSelectedRadioButton();\n    }\n\n    /** Whether the radio group is disabled */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /** Whether the radio group is required */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    constructor(private _changeDetector: ChangeDetectorRef) {\n        super();\n    }\n\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on McRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the McRadioGroup.\n        this._isInitialized = true;\n    }\n\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        if (this._isInitialized) {\n            this.change.emit(new McRadioChange(this._selected!, this._value));\n        }\n    }\n\n    markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach((radio) => radio.markForCheck());\n        }\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n\n    private updateRadioButtonNames(): void {\n        if (this._radios) {\n            this._radios.forEach((radio) => {\n                radio.name = this.name;\n            });\n        }\n    }\n\n    /** Updates the `selected` radio button from the internal _value state. */\n    private updateSelectedRadioFromValue(): void {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected != null && this._selected.value === this._value;\n\n        if (this._radios != null && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach((radio) => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n}\n\n\n// Boilerplate for applying mixins to McRadioButton.\n/** @docs-private */\nexport class McRadioButtonBase {\n    // Since the disabled property is manually defined for the McRadioButton and isn't set up in\n    // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n    // defined to properly work.\n    disabled: boolean;\n\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McRadioButtonMixinBase =\n    mixinColor(mixinTabIndex(McRadioButtonBase));\n\n\n@Component({\n    selector: 'mc-radio-button',\n    templateUrl: 'radio.component.html',\n    styleUrls: ['radio.css'],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    exportAs: 'mcRadioButton',\n    host: {\n        'class': 'mc-radio-button',\n        '[attr.id]': 'id',\n        '[class.mc-radio-checked]': 'checked',\n        '[class.mc-radio-disabled]': 'disabled',\n        '(focus)': '_inputElement.nativeElement.focus()'\n    }\n})\nexport class McRadioButton extends _McRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, HasTabIndex {\n\n    private _uniqueId: string = `mc-radio-${++nextUniqueId}`;\n\n    /* tslint:disable:member-ordering */\n\n    /** The unique ID for the radio button. */\n    @Input() id: string = this._uniqueId;\n\n    /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n    @Input() name: string;\n\n    /** Used to set the 'aria-label' attribute on the underlying input element. */\n    @Input('aria-label') ariaLabel: string;\n\n    /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n    @Input('aria-labelledby') ariaLabelledby: string;\n\n    /** The 'aria-describedby' attribute is read after the element's label and field type. */\n    @Input('aria-describedby') ariaDescribedby: string;\n\n    /** Whether this radio button is checked. */\n    @Input()\n    get checked(): boolean { return this._checked; }\n    set checked(value: boolean) {\n        const newCheckedState = toBoolean(value);\n\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** The value of this radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(value: any) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup != null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n\n    /** Whether the radio button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n    }\n    set disabled(value: boolean) {\n        const newDisabledState = toBoolean(value);\n\n        if (this._disabled !== newDisabledState) {\n\n            this._disabled = newDisabledState;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** Whether the radio button is required. */\n    @Input()\n    get required(): boolean {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    private _labelPosition: 'before' | 'after';\n\n    /** The native `<input type=radio>` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** The parent radio group. May or may not be present. */\n    radioGroup: McRadioGroup;\n\n    @Input()\n    isFocused: boolean = false;\n\n    /** ID of the native input element inside `<mc-radio-button>` */\n    get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n    /** Whether this radio is checked. */\n    private _checked: boolean = false;\n\n    /** Whether this radio is disabled. */\n    private _disabled: boolean;\n\n    /** Whether this radio is required. */\n    private _required: boolean;\n\n    /** Value assigned to this radio. */\n    private _value: any = null;\n\n    /** Unregister function for _radioDispatcher */\n    private removeUniqueSelectionListener: () => void = () => {};\n\n    constructor(\n        @Optional() radioGroup: McRadioGroup,\n        elementRef: ElementRef,\n        private _changeDetector: ChangeDetectorRef,\n        private _radioDispatcher: UniqueSelectionDispatcher\n    ) {\n\n        super(elementRef);\n\n        this.radioGroup = radioGroup;\n\n        this.removeUniqueSelectionListener =\n            _radioDispatcher.listen((id: string, name: string) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n\n    ngAfterViewInit() {}\n\n    ngOnDestroy() {\n        this.removeUniqueSelectionListener();\n    }\n\n    /** Focuses the radio button. */\n    focus(): void {}\n\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n\n    onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n\n    onInputChange(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this.emitChangeEvent();\n\n        if (this.radioGroup) {\n            this.radioGroup.controlValueAccessorChangeFn(this.value);\n            this.radioGroup.touch();\n            if (groupValueChanged) {\n                this.radioGroup.emitChangeEvent();\n            }\n        }\n    }\n\n    /** Dispatch change event with current value. */\n    private emitChangeEvent(): void {\n        this.change.emit(new McRadioChange(this, this._value));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport {A11yModule} from '@ptsecurity/cdk/a11y';\nimport {McCommonModule} from '@ptsecurity/mosaic/core';\n\nimport {McRadioButton, McRadioGroup} from './radio.component';\n\n\n@NgModule({\n    imports: [ CommonModule, A11yModule, McCommonModule ],\n    exports: [ McRadioGroup, McRadioButton, McCommonModule ],\n    declarations: [ McRadioGroup, McRadioButton ]\n})\nexport class McRadioModule {}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    Output,\n    QueryList,\n    ViewEncapsulation,\n    ChangeDetectorRef,\n    Inject,\n    OnDestroy,\n    OnInit,\n    ViewChild\n} from '@angular/core';\n\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { Subscription } from 'rxjs';\n\nimport { FocusKeyManager, IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { DOWN_ARROW, END, ENTER, HOME, PAGE_DOWN, PAGE_UP, SPACE, UP_ARROW } from '@ptsecurity/cdk/keycodes';\n\nimport {\n    McLine,\n    McLineSetter,\n    CanDisable,\n    mixinDisabled,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n    exportAs: 'mcListOption',\n    selector: 'mc-list-option',\n    host: {\n        tabindex: '-1',\n\n        class: 'mc-list-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': '_hasFocus',\n        '[class.mc-list-option-disabled]': 'disabled',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()',\n        '(click)': '_handleClick()'\n    },\n    templateUrl: 'list-option.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListOption implements AfterContentInit, OnDestroy, OnInit, IFocusableOption {\n    _hasFocus: boolean = false;\n\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    @ViewChild('text') _text: ElementRef;\n\n    // Whether the label should appear before or after the checkbox. Defaults to 'after'\n    @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n    @Input() value: any;\n\n    private _focusHandlerInProgress: boolean;\n\n    @Input()\n    get disabled() {\n        return this._disabled || (this.listSelection && this.listSelection.disabled);\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    @Input()\n    get selected(): boolean {\n        return this.listSelection.selectedOptions && this.listSelection.selectedOptions.isSelected(this) || false;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            this.listSelection._reportValueChange();\n        }\n    }\n\n    private _lineSetter: McLineSetter;\n    private _selected = false;\n    private _disabled = false;\n\n    constructor(\n        private _element: ElementRef,\n        private _changeDetector: ChangeDetectorRef,\n        @Inject(forwardRef(() => McListSelection))\n        public listSelection: McListSelection\n    ) {}\n\n    ngOnInit() {\n        if (this._selected) {\n            // List options that are selected at initialization can't be reported properly to the form\n            // control. This is because it takes some time until the selection-list knows about all\n            // available options. Also it can happen that the ControlValueAccessor has an initial value\n            // that should be used instead. Deferring the value change report to the next tick ensures\n            // that the form control value is not being overwritten.\n            const wasSelected = this._selected;\n\n            Promise.resolve().then(() => {\n                if (this._selected || wasSelected) {\n                    this.selected = true;\n                    this._changeDetector.markForCheck();\n                }\n            });\n        }\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    ngOnDestroy(): void {\n        if (this.selected) {\n            // We have to delay this until the next tick in order\n            // to avoid changed after checked errors.\n            Promise.resolve().then(() => this.selected = false);\n        }\n\n        this.listSelection._removeOptionFromList(this);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    focus(): void {\n        this._element.nativeElement.focus();\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    getLabel() {\n        return this._text ? this._text.nativeElement.textContent : '';\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.listSelection.selectedOptions) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.listSelection.selectedOptions.select(this);\n        } else {\n            this.listSelection.selectedOptions.deselect(this);\n        }\n\n        this._changeDetector.markForCheck();\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    _handleClick() {\n        if (this.disabled) { return; }\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    _handleFocus() {\n        if (this.disabled || this._hasFocus) { return; }\n\n        this._hasFocus = true;\n    }\n\n    _handleBlur() {\n        this._hasFocus = false;\n\n        this.listSelection._onTouched();\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n\n\nexport const MC_SELECTION_LIST_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McListSelection),\n    multi: true\n};\n\n// Change event that is being fired whenever the selected state of an option changes. */\nexport class McListSelectionChange {\n    constructor(\n        // Reference to the selection list that emitted the event.\n        public source: McListSelection,\n        // Reference to the option that has been changed.\n        public option: McListOption\n    ) {}\n}\n\n\nexport class McListSelectionBase {}\n\nexport const _McListSelectionMixinBase = mixinDisabled(McListSelectionBase);\n\n@Component({\n    exportAs: 'mcListSelection',\n    selector: 'mc-list-selection',\n    template: '<ng-content></ng-content>',\n    styleUrls: ['list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'tabIndex'],\n    host: {\n        class: 'mc-list-selection',\n        '[tabIndex]': 'tabIndex',\n        '(focus)': 'focus()',\n        '(blur)': '_onTouched()',\n        '(keydown)': '_onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    providers: [MC_SELECTION_LIST_VALUE_ACCESSOR],\n    preserveWhitespaces: false\n})\nexport class McListSelection extends _McListSelectionMixinBase implements\n    IFocusableOption, CanDisable, AfterContentInit, ControlValueAccessor {\n\n    _keyManager: FocusKeyManager<McListOption>;\n\n    // The option components contained within this selection-list.\n    @ContentChildren(McListOption) options: QueryList<McListOption>;\n\n    tabIndex: number;\n\n    autoSelect: boolean;\n    noUnselect: boolean;\n    multiple: boolean;\n\n    // todo temporary solution\n    withShift: boolean;\n    withCtrl: boolean;\n\n    @Input() horizontal: boolean = false;\n\n    // Emits a change event whenever the selected state of an option changes.\n    @Output() readonly selectionChange: EventEmitter<McListSelectionChange> = new EventEmitter<McListSelectionChange>();\n\n    selectedOptions: SelectionModel<McListOption>;\n\n    // Used for storing the values that were assigned before the options were initialized.\n    private _tempValues: string[] | null;\n\n    private _modelChanges = Subscription.EMPTY;\n\n    constructor(\n        private _element: ElementRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string,\n        @Attribute('multiple') multiple: string\n    ) {\n        super();\n\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.multiple = multiple === null ? true : toBoolean(multiple);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.selectedOptions = new SelectionModel<McListOption>(this.multiple);\n    }\n\n    ngAfterContentInit(): void {\n        this.horizontal = toBoolean(this.horizontal);\n\n        this._keyManager = new FocusKeyManager<McListOption>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation(!this.horizontal)\n            .withHorizontalOrientation(this.horizontal ? 'ltr' : null);\n\n        if (this._tempValues) {\n            this._setOptionsFromValues(this._tempValues);\n            this._tempValues = null;\n        }\n\n        // Sync external changes to the model back to the options.\n        this._modelChanges = this.selectedOptions.onChange!.subscribe((event) => {\n            for (const item of event.added) {\n                item.selected = true;\n            }\n\n            for (const item of event.removed) {\n                item.selected = false;\n            }\n        });\n\n        this.updateScrollSize();\n    }\n\n    ngOnDestroy() {\n        this._modelChanges.unsubscribe();\n    }\n\n    focus() {\n        this._element.nativeElement.focus();\n    }\n\n    selectAll() {\n        this.options.forEach((option) => option.setSelected(true));\n\n        this._reportValueChange();\n    }\n\n    deselectAll() {\n        this.options.forEach((option) => option.setSelected(false));\n\n        this._reportValueChange();\n    }\n\n    updateScrollSize(): void {\n        if (this.horizontal || !this.options.first) { return; }\n\n        this._keyManager.withScrollSize(Math.floor(this._getHeight() / this.options.first._getHeight()));\n    }\n\n    // Sets the focused option of the selection-list.\n    setFocusedOption(option: McListOption): void {\n        this._keyManager.updateActiveItem(option);\n\n        if (this.withShift && this.multiple) {\n            const previousIndex = this._keyManager.previousActiveItemIndex;\n            const activeIndex = this._keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n\n            this.withShift = false;\n        } else if (this.withCtrl) {\n            this.withCtrl = false;\n\n            if (!this._canUnselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) { this.options.forEach((item) => item.setSelected(false)); }\n\n            option.setSelected(true);\n        }\n\n        this._emitChangeEvent(option);\n        this._reportValueChange();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(values: string[]): void {\n        if (this.options) {\n            this._setOptionsFromValues(values || []);\n        } else {\n            this._tempValues = values;\n        }\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this._onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this._onTouched = fn;\n    }\n\n    // Implemented as a part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        if (this.options) {\n            this.options.forEach((option) => option.disabled = isDisabled);\n        }\n    }\n\n    getSelectedOptionValues(): string[] {\n        return this.options.filter((option) => option.selected).map((option) => option.value);\n    }\n\n    // Toggles the selected state of the currently focused option.\n    toggleFocusedOption(): void {\n        const focusedIndex = this._keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n            const focusedOption: McListOption = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this._canUnselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this._emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    _canUnselectLast(listOption: McListOption): boolean {\n        return !(this.noUnselect && this.selectedOptions.selected.length === 1 && listOption.selected);\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    // View to model callback that should be called if the list or its options lost focus.\n    _onTouched: () => void = () => {};\n\n    // Removes an option from the selection list and updates the active item.\n    _removeOptionFromList(option: McListOption) {\n        if (option._hasFocus) {\n            const optionIndex = this._getOptionIndex(option);\n\n            // Check whether the option is the last item\n            if (optionIndex > 0) {\n                this._keyManager.setPreviousItemActive();\n            } else if (optionIndex === 0 && this.options.length > 1) {\n                this._keyManager.setNextItemActive();\n            }\n        }\n    }\n\n    _onKeyDown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n        this.withShift = event.shiftKey;\n        this.withCtrl = event.ctrlKey;\n\n        switch (keyCode) {\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                if (!this.horizontal) { this._keyManager.setPreviousPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                if (!this.horizontal) { this._keyManager.setNextPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    // Reports a value change to the ControlValueAccessor\n    _reportValueChange() {\n        if (this.options) {\n            this._onChange(this.getSelectedOptionValues());\n        }\n    }\n\n    // Emits a change event if the selected state of an option changed.\n    _emitChangeEvent(option: McListOption) {\n        this.selectionChange.emit(new McListSelectionChange(this, option));\n    }\n\n    // Returns the option with the specified value.\n    private _getOptionByValue(value: string): McListOption | undefined {\n        return this.options.find((option) => option.value === value);\n    }\n\n    // Sets the selected options based on the specified values.\n    private _setOptionsFromValues(values: string[]) {\n        this.options.forEach((option) => option.setSelected(false));\n\n        values\n            .map((value) => this._getOptionByValue(value))\n            .filter(Boolean)\n            .forEach((option) => option!.setSelected(true));\n    }\n\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private _isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    // Returns the index of the specified list option.\n    private _getOptionIndex(option: McListOption): number {\n        return this.options.toArray().indexOf(option);\n    }\n\n    // View to model callback that should be called whenever the selected options change.\n    private _onChange: (value: any) => void = (_: any) => {};\n}\n","// todo пока не делаем, перенесено из материала, но у нас в доках таких простых списков нет.\nimport {\n    AfterContentInit, ChangeDetectionStrategy, Component, ContentChildren, Directive, ElementRef, QueryList,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { McLine, McLineSetter } from '@ptsecurity/mosaic/core';\n\n\nexport class McListBase {}\n\n@Component({\n    selector: 'mc-list',\n    host: { class: 'mc-list' },\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McList extends McListBase {}\n\n\n/**\n * Directive whose purpose is to add the mc- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n    selector: '[mc-subheader], [mcSubheader]',\n    host: { class: 'mc-subheader' }\n})\nexport class McListSubheaderCssStyler {}\n\n\n// Boilerplate for applying mixins to McListItem.\nexport class McListItemBase {}\n\n@Component({\n    selector: 'mc-list-item, a[mc-list-item]',\n    host: {\n        class: 'mc-list-item',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()'\n    },\n    templateUrl: './list-item.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListItem extends McListItemBase implements AfterContentInit {\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    private _lineSetter: McLineSetter;\n\n    constructor(private _element: ElementRef) {\n        super();\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    _handleFocus() {\n        this._element.nativeElement.classList.add('mc-focused');\n    }\n\n    _handleBlur() {\n        this._element.nativeElement.classList.remove('mc-focused');\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLineModule } from '@ptsecurity/mosaic/core';\n\nimport { McListSelection, McListOption } from './list-selection.component';\nimport { McList, McListItem, McListSubheaderCssStyler} from './list.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        McLineModule\n    ],\n    exports: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ],\n    declarations: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ]\n})\nexport class McListModule {}\n","import { InjectionToken } from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type McCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MC_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<McCheckboxClickAction>('mc-checkbox-click-action');\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","\nexport function isBoolean(val: any): val is boolean { return typeof val === 'boolean'; }\n\nexport function toBoolean(value: any): boolean {\n    return value != null && `${value}` !== 'false';\n}\n\nexport function isNotNil(value: any): boolean {\n    return value !== 'undefined' && value !== null;\n}\n","import { NgModule, InjectionToken, Optional, Inject, isDevMode } from '@angular/core';\nimport { BidiModule } from '@ptsecurity/cdk/bidi';\n\n\n// Injection token that configures whether the Mosaic sanity checks are enabled.\nexport const MС_SANITY_CHECKS = new InjectionToken<boolean>('mc-sanity-checks', {\n    providedIn: 'root',\n    factory: MC_SANITY_CHECKS_FACTORY\n});\n\nexport function MC_SANITY_CHECKS_FACTORY(): boolean {\n    return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Mosaic\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n    imports: [ BidiModule ],\n    exports: [ BidiModule ]\n})\nexport class McCommonModule {\n    // Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n    private _hasDoneGlobalChecks = false;\n\n    // Reference to the global `document` object.\n    private _document = typeof document === 'object' && document ? document : null;\n\n    // Reference to the global 'window' object.\n    private _window = typeof window === 'object' && window ? window : null;\n\n    constructor(@Optional() @Inject(MС_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n        if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n            this._checkDoctypeIsDefined();\n            this._checkThemeIsPresent();\n            this._hasDoneGlobalChecks = true;\n        }\n    }\n\n    // Whether any sanity checks are enabled\n    private _areChecksEnabled(): boolean {\n        return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n    }\n\n    // Whether the code is running in tests.\n    private _isTestEnv() {\n        return this._window && (this._window['__karma__'] || this._window['jasmine']);\n    }\n\n    private _checkDoctypeIsDefined(): void {\n        if (this._document && !this._document.doctype) {\n            console.warn(\n                'Current document does not have a doctype. This may cause ' +\n                'some Mosaic components not to behave as expected.'\n            );\n        }\n    }\n\n    private _checkThemeIsPresent(): void {\n        if (this._document && typeof getComputedStyle === 'function') {\n            const testElement = this._document.createElement('div');\n\n            testElement.classList.add('mc-theme-loaded-marker');\n            this._document.body.appendChild(testElement);\n\n            const computedStyle = getComputedStyle(testElement);\n\n            // In some situations, the computed style of the test element can be null. For example in\n            // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n            // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n            if (computedStyle && computedStyle.display !== 'none') {\n                console.warn(\n                    'Could not find Mosaic core theme. Most Mosaic ' +\n                    'components may not work as expected. For more info refer ' +\n                    'to the theming guide: link there'\n                );\n            }\n\n            this._document.body.removeChild(testElement);\n        }\n    }\n}\n","import { toBoolean } from '../utils/index';\nimport { Constructor } from './constructor';\n\n\nexport interface CanDisable {\n    disabled: boolean;\n}\n\n// Mixin to augment a directive with a `disabled` property.\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n    return class extends base {\n        private _disabled: boolean = false;\n\n        get disabled() {\n            return this._disabled;\n        }\n\n        set disabled(value: any) {\n            this._disabled = toBoolean(value);\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n    };\n}\n","import { ElementRef } from '@angular/core';\nimport { Constructor } from './constructor';\n\n\nexport interface CanColor {\n    color: ThemePalette;\n}\n\nexport interface HasElementRef {\n    _elementRef: ElementRef;\n}\n\nexport enum ThemePalette {\n    Primary = 'primary',\n    Second = 'second',\n    Warn = 'warn',\n    Default = 'second'\n}\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T, defaultColor: ThemePalette = ThemePalette.Default): Constructor<CanColor> & T {\n    return class extends base {\n        private _color: ThemePalette;\n\n        get color(): ThemePalette {\n            return this._color;\n        }\n\n        set color(value: ThemePalette) {\n            const colorPalette = value || defaultColor;\n\n            if (colorPalette !== this._color) {\n                if (this._color) {\n                    this._elementRef.nativeElement.classList.remove(`mc-${this._color}`);\n                }\n\n                if (colorPalette) {\n                    this._elementRef.nativeElement.classList.add(`mc-${colorPalette}`);\n                }\n\n                this._color = colorPalette;\n            }\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n\n            // Set the default color that can be specified from the mixin.\n            this.color = defaultColor;\n        }\n    };\n}\n\n","import { Constructor } from './constructor';\nimport { CanDisable } from './disabled';\n\n\nexport interface HasTabIndex {\n    tabIndex: number;\n}\n\n// Mixin to augment a directive with a `tabIndex` property.\nexport function mixinTabIndex<\n        T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0): Constructor<HasTabIndex\n    > & T {\n    return class extends base {\n        private _tabIndex: number = defaultTabIndex;\n\n        get tabIndex(): number {\n            return this.disabled ? -1 : this._tabIndex;\n        }\n\n        set tabIndex(value: number) {\n            this._tabIndex = value != null ? value : defaultTabIndex;\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n    };\n}\n","import { NgModule, Directive, ElementRef, QueryList } from '@angular/core';\n\nimport { McCommonModule } from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(McLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n    selector: '[mc-line], [mcLine]',\n    host: { class: 'mc-line' }\n})\nexport class McLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class McLineSetter {\n    constructor(private _lines: QueryList<McLine>, private _element: ElementRef) {\n        this._setLineClass(this._lines.length);\n\n        this._lines.changes.subscribe(() => {\n            this._setLineClass(this._lines.length);\n        });\n    }\n\n    private _setLineClass(count: number): void {\n        this._resetClasses();\n        if (count === 2 || count === 3) {\n            this._setClass(`mc-${count}-line`, true);\n        } else if (count > 3) {\n            this._setClass(`mc-multi-line`, true);\n        }\n    }\n\n    private _resetClasses(): void {\n        this._setClass('mc-2-line', false);\n        this._setClass('mc-3-line', false);\n        this._setClass('mc-multi-line', false);\n    }\n\n    private _setClass(className: string, isAdd: boolean): void {\n        if (isAdd) {\n            this._element.nativeElement.classList.add(className);\n        } else {\n            this._element.nativeElement.classList.remove(className);\n        }\n    }\n}\n\n@NgModule({\n    imports: [McCommonModule],\n    exports: [McLine, McCommonModule],\n    declarations: [McLine]\n})\nexport class McLineModule {}\n","import { Component, ViewEncapsulation, Input, ChangeDetectionStrategy } from '@angular/core';\n\n\nexport type McPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mc-primary .mc-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mc-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'mc-pseudo-checkbox',\n    styleUrls: ['pseudo-checkbox.css'],\n    template: '',\n    host: {\n        class: 'mc-pseudo-checkbox',\n        '[class.mc-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n        '[class.mc-pseudo-checkbox-checked]': 'state === \"checked\"',\n        '[class.mc-pseudo-checkbox-disabled]': 'disabled'\n    }\n})\nexport class McPseudoCheckbox {\n    // Display state of the checkbox.\n    @Input() state: McPseudoCheckboxState = 'unchecked';\n\n    // Whether the checkbox is disabled.\n    @Input() disabled: boolean = false;\n}\n","import { NgModule } from '@angular/core';\n\nimport { McPseudoCheckbox } from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n    exports: [McPseudoCheckbox],\n    declarations: [McPseudoCheckbox]\n})\nexport class McPseudoCheckboxModule {}\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","import {\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { mixinColor, CanColor } from '@ptsecurity/mosaic/core';\n\n\n@Directive({\n    selector: '[mc-icon]',\n    host: { class: 'mc-icon mc' }\n})\nexport class McIconCSSStyler {}\n\n\nexport class McIconBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McIconMixinBase = mixinColor(McIconBase);\n\n\n@Component({\n    selector: `[mc-icon]`,\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./icon.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McIcon extends _McIconMixinBase implements CanColor {\n    constructor(elementRef: ElementRef, @Attribute('mc-icon') iconName: string) {\n        super(elementRef);\n\n        elementRef.nativeElement.classList.add(iconName);\n    }\n\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McIcon,\n    McIconCSSStyler\n} from './icon.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McIcon,\n        McIconCSSStyler\n    ],\n    declarations: [\n        McIcon,\n        McIconCSSStyler\n    ]\n})\nexport class McIconModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    OnDestroy,\n    QueryList,\n    ViewEncapsulation,\n    ContentChildren\n} from '@angular/core';\n\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { Platform } from '@ptsecurity/cdk/platform';\n\nimport { mixinColor, mixinDisabled, CanColor, CanDisable } from '@ptsecurity/mosaic/core';\nimport { McIcon } from '@ptsecurity/mosaic/icon';\n\n\n@Directive({\n    selector: 'button[mc-button], a[mc-button]',\n    host: { class: 'mc-button' }\n})\nexport class McButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-xs-button], a[mc-xs-button]',\n    host: { class: 'mc-button mc-button_xs' }\n})\nexport class McXSButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-sm-button], a[mc-sm-button]',\n    host: { class: 'mc-button mc-button_sm' }\n})\nexport class McSMButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-lg-button], a[mc-lg-button]',\n    host: { class: 'mc-button mc-button_lg' }\n})\nexport class McLGButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-xl-button], a[mc-xl-button]',\n    host: { class: 'mc-button mc-button_xl' }\n})\nexport class McXLButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-icon-button], a[mc-icon-button]',\n    queries: {\n        contentChildren: new ContentChildren(McIcon)\n    },\n    host: { class: 'mc-icon-button' }\n})\nexport class McIconButtonCSSStyler {\n    nativeElement: Element;\n\n    contentChildren: QueryList<McIcon>;\n\n    constructor(elementRef: ElementRef) {\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        this._addClassModificatorForIcons();\n    }\n\n    _addClassModificatorForIcons() {\n        const twoIcons = 2;\n        const icons = this.contentChildren.map((item) => item._elementRef.nativeElement);\n\n        if (icons.length === 1) {\n            const iconElement = icons[0];\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-icon-button_left');\n                }\n\n                if (iconElement.previousSibling) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-icon-button_right');\n                }\n            }\n        } else if (icons.length === twoIcons) {\n            const firstIconElement = icons[0];\n            const secondIconElement = icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n}\n\n\nexport class McButtonBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McButtonMixinBase = mixinColor(mixinDisabled(McButtonBase));\n\n\n@Component({\n    selector: `\n        button[mc-button],\n        button[mc-xs-button],\n        button[mc-sm-button],\n        button[mc-lg-button],\n        button[mc-xl-button]\n    `,\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[disabled]': 'disabled || null'\n    }\n})\nexport class McButton extends _McButtonMixinBase implements OnDestroy, CanDisable, CanColor {\n    constructor(elementRef: ElementRef, private _platform: Platform, private _focusMonitor: FocusMonitor) {\n        super(elementRef);\n\n        this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this._getHostElement().focus();\n    }\n\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n\n\n@Component({\n    selector: 'a[mc-button], a[mc-xs-button], a[mc-sm-button], a[mc-lg-button], a[mc-xl-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[attr.tabindex]': 'disabled ? -1 : 0',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': '_haltDisabledEvents($event)'\n    }\n})\nexport class McAnchor extends McButton {\n    constructor(platform: Platform, focusMonitor: FocusMonitor, elementRef: ElementRef) {\n        super(elementRef, platform, focusMonitor);\n    }\n\n    _haltDisabledEvents(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\n\n\n@Component({\n    selector: 'button[mc-icon-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[attr.tabindex]': 'disabled ? -1 : 0',\n        '[attr.disabled]': 'disabled || null'\n    }\n})\nexport class McIconButton extends McButton {\n    constructor(platform: Platform, focusMonitor: FocusMonitor, elementRef: ElementRef) {\n        super(elementRef, platform, focusMonitor);\n    }\n\n    _haltDisabledEvents(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McButton,\n    McAnchor,\n    McIconButton,\n    McButtonCSSStyler,\n    McXSButtonCSSStyler,\n    McSMButtonCSSStyler,\n    McLGButtonCSSStyler,\n    McXLButtonCSSStyler,\n    McIconButtonCSSStyler\n} from './button.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McButton,\n        McAnchor,\n        McIconButton,\n        McButtonCSSStyler,\n        McXSButtonCSSStyler,\n        McSMButtonCSSStyler,\n        McLGButtonCSSStyler,\n        McXLButtonCSSStyler,\n        McIconButtonCSSStyler\n    ],\n    declarations: [\n        McButton,\n        McAnchor,\n        McIconButton,\n        McButtonCSSStyler,\n        McXSButtonCSSStyler,\n        McSMButtonCSSStyler,\n        McLGButtonCSSStyler,\n        McXLButtonCSSStyler,\n        McIconButtonCSSStyler\n    ]\n})\nexport class McButtonModule {}\n","import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';\n\nimport { toBoolean } from '@ptsecurity/mosaic/core';\n\n\n@Component({\n    selector: 'mc-divider',\n    host: {\n        class: 'mc-divider',\n        role: 'separator',\n        '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n        '[class.mc-divider-vertical]': 'vertical',\n        '[class.mc-divider-inset]': 'inset'\n    },\n    template: '',\n    styleUrls: ['divider.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false\n})\nexport class McDivider {\n    // Whether the divider is vertically aligned.\n    @Input()\n    get vertical(): boolean {\n        return this._vertical;\n    }\n\n    set vertical(value: boolean) {\n        this._vertical = toBoolean(value);\n    }\n\n    private _vertical: boolean = false;\n\n    // Whether the divider is an inset divider.\n    @Input()\n    get inset(): boolean {\n        return this._inset;\n    }\n\n    set inset(value: boolean) {\n        this._inset = toBoolean(value);\n    }\n\n    private _inset: boolean = false;\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\n\nimport {McCommonModule} from '@ptsecurity/mosaic/core';\n\nimport {McDivider} from './divider.component';\n\n\n@NgModule({\n    imports: [\n        McCommonModule,\n        CommonModule\n    ],\n    exports: [\n        McDivider,\n        McCommonModule\n    ],\n    declarations: [\n        McDivider\n    ]\n})\nexport class McDividerModule {}\n"],"names":["type","FocusMonitor","undefined","decorators","Attribute","args","Optional","Inject","MC_CHECKBOX_CLICK_ACTION","ariaLabel","Input","ariaLabelledby","id","required","labelPosition","name","change","Output","indeterminateChange","value","_inputElement","ViewChild","checked","disabled","indeterminate","McCheckbox","_McCheckboxMixinBase","MC_CHECKBOX_REQUIRED_VALIDATOR","provide","NG_VALIDATORS","useExisting","forwardRef","McCheckboxRequiredValidator","multi","tslib_1.__extends","_super","Directive","selector","providers","host","[attr.required]","CheckboxRequiredValidator","NgModule","imports","CommonModule","McCommonModule","exports","declarations","McCheckboxModule","VERSION","Version","inputs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","exportAs","class","[attr.id]","[class.mc-radio-checked]","[class.mc-radio-disabled]","(focus)","McRadioGroup","ElementRef","ChangeDetectorRef","UniqueSelectionDispatcher","ariaDescribedby","isFocused","McRadioButton","_McRadioButtonMixinBase","A11yModule","McRadioModule","McListOption","_element","_changeDetector","listSelection","this","_hasFocus","checkboxPosition","_selected","_disabled","Object","defineProperty","prototype","newValue","toBoolean","markForCheck","selectedOptions","isSelected","setSelected","_reportValueChange","ngOnInit","_this","wasSelected_1","Promise","resolve","then","selected","ngAfterContentInit","_lineSetter","McLineSetter","_lines","ngOnDestroy","_removeOptionFromList","toggle","focus","nativeElement","setFocusedOption","getLabel","_text","textContent","select","deselect","_getHeight","getClientRects","height","_handleClick","_handleFocus","_handleBlur","_onTouched","_getHostElement","Component","tabindex","[class.mc-selected]","[class.mc-focused]","[class.mc-list-option-disabled]","(blur)","(click)","template","preserveWhitespaces","McListSelection","ContentChildren","McLine","MC_SELECTION_LIST_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","McListSelectionChange","source","option","McListSelectionBase","_McListSelectionMixinBase","mixinDisabled","tabIndex","autoSelect","noUnselect","multiple","call","horizontal","selectionChange","EventEmitter","_modelChanges","Subscription","EMPTY","_onChange","_","parseInt","SelectionModel","_keyManager","FocusKeyManager","options","withTypeAhead","withVerticalOrientation","withHorizontalOrientation","_tempValues","_setOptionsFromValues","subscribe","event","_i","_a","added","length","item","_b","_c","removed","updateScrollSize","unsubscribe","selectAll","forEach","deselectAll","first","withScrollSize","Math","floor","updateActiveItem","withShift","previousIndex_1","previousActiveItemIndex","activeIndex_1","activeItemIndex","index","withCtrl","_canUnselectLast","_emitChangeEvent","writeValue","values","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","getSelectedOptionValues","filter","map","toggleFocusedOption","focusedIndex","_isValidIndex","focusedOption","toArray","listOption","optionIndex","_getOptionIndex","setPreviousItemActive","setNextItemActive","_onKeyDown","keyCode","shiftKey","ctrlKey","SPACE","ENTER","preventDefault","HOME","setFirstItemActive","END","setLastItemActive","PAGE_UP","setPreviousPageItemActive","PAGE_DOWN","setNextPageItemActive","onKeydown","emit","_getOptionByValue","find","Boolean","indexOf","styles","[tabIndex]","(keydown)","(window:resize)","McListBase","McList","McListSubheaderCssStyler","McListItemBase","McListItem","classList","add","remove","McListModule","McLineModule","InjectionToken","nextUniqueId","MC_CHECKBOX_CONTROL_VALUE_ACCESSOR","TransitionCheckState","McCheckboxChange","McCheckboxBase","_elementRef","mixinTabIndex","mixinColor","elementRef","_changeDetectorRef","_focusMonitor","_clickAction","_uniqueId","_currentAnimationClass","_currentCheckState","Init","_controlValueAccessorChangeFn","_checked","_indeterminate","_required","set","ngAfterViewInit","monitor","focusOrigin","_onInputFocusChange","stopMonitoring","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_onLabelTextChange","_getAriaChecked","newState","oldState","element","_onInputClick","stopPropagation","focusVia","_onInteractionEvent","[id]","[class.mc-checkbox-indeterminate]","[class.mc-checkbox-checked]","[class.mc-checkbox-disabled]","[class.mc-checkbox-label-before]","__extends","d","b","__","constructor","extendStatics","create","isBoolean","val","isNotNil","MC_SANITY_CHECKS_FACTORY","base","class_1","arguments","apply","defaultColor","ThemePalette","Default","color","_color","colorPalette","defaultTabIndex","_tabIndex","setPrototypeOf","__proto__","Array","p","hasOwnProperty","MС_SANITY_CHECKS","providedIn","factory","_sanityChecksEnabled","_hasDoneGlobalChecks","_document","document","_window","window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","isDevMode","_isTestEnv","doctype","console","warn","getComputedStyle","testElement","createElement","body","appendChild","computedStyle","display","removeChild","BidiModule","Primary","Second","Warn","_setLineClass","changes","count","_resetClasses","_setClass","className","isAdd","state","[class.mc-pseudo-checkbox-indeterminate]","[class.mc-pseudo-checkbox-checked]","[class.mc-pseudo-checkbox-disabled]","McPseudoCheckbox","McPseudoCheckboxModule","McIconCSSStyler","McIconBase","_McIconMixinBase","McIcon","iconName","McIconModule","PlatformModule","McButtonCSSStyler","McXSButtonCSSStyler","McSMButtonCSSStyler","McLGButtonCSSStyler","McXLButtonCSSStyler","McIconButtonCSSStyler","_addClassModificatorForIcons","icons","contentChildren","iconElement","previousElementSibling","nextElementSibling","nextSibling","previousSibling","firstIconElement","secondIconElement","queries","McButtonBase","_McButtonMixinBase","McButton","_platform","[disabled]","Platform","McAnchor","platform","focusMonitor","_haltDisabledEvents","stopImmediatePropagation","[attr.tabindex]","[attr.disabled]","McIconButton","McButtonModule","McDivider","_vertical","_inset","role","[attr.aria-orientation]","[class.mc-divider-vertical]","[class.mc-divider-inset]","vertical","inset","McDividerModule","McRadioChange","McRadioGroupBase","_McRadioGroupMixinBase","MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","_value","_name","_isInitialized","_labelPosition","controlValueAccessorChangeFn","onTouched","updateRadioButtonNames","v","markRadiosForCheck","updateSelectedRadioFromValue","checkSelectedRadioButton","touch","emitChangeEvent","_radios","radio","isAlreadySelected","descendants","McRadioButtonBase","radioGroup","_radioDispatcher","removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","onInputClick","onInputChange","groupValueChanged"],"mappings":"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"}