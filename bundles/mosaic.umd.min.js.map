{"version":3,"file":"mosaic.umd.min.js","sources":["../../packages/mosaic/vertical-navbar/vertical-navbar-item.component.ts","../../packages/mosaic/vertical-navbar/vertical-navbar.component.ts","../../packages/mosaic/vertical-navbar/vertical-navbar.module.ts","../../packages/mosaic/version.ts","../../packages/mosaic/core/select/events.ts","../../packages/mosaic/core/select/constants.ts","../../packages/mosaic/autocomplete/autocomplete-trigger.directive.ts","../../packages/mosaic/dropdown/dropdown-trigger.ts","../../packages/mosaic/select/select.component.ts","../../packages/mosaic/timepicker/timepicker.constants.ts","../../packages/mosaic/sidepanel/sidepanel-directives.ts","../../packages/mosaic/sidepanel/sidepanel.module.ts","../../packages/mosaic/splitter/splitter.component.ts","../../packages/mosaic/splitter/splitter.module.ts","../../packages/mosaic/toggle/toggle.component.ts","../../packages/mosaic/toggle/toggle.module.ts","../../packages/mosaic/tooltip/tooltip.component.ts","../../packages/mosaic/tooltip/tooltip.module.ts","../../packages/mosaic/tree-select/tree-select.component.ts","../../packages/mosaic/tree-select/tree-select.module.ts","../../packages/mosaic/textarea/textarea.component.ts","../../packages/mosaic/textarea/textarea.module.ts","../../packages/mosaic/timepicker/timepicker.ts","../../packages/mosaic/timepicker/timepicker.module.ts","../../packages/mosaic/sidepanel/sidepanel-config.ts","../../packages/mosaic/sidepanel/sidepanel-animations.ts","../../packages/mosaic/sidepanel/sidepanel-container.component.ts","../../packages/mosaic/sidepanel/sidepanel-ref.ts","../../packages/mosaic/sidepanel/sidepanel.service.ts","../../packages/mosaic/select/select.module.ts","../../packages/mosaic/tags/tag.component.ts","../../packages/mosaic/tags/tag-list.component.ts","../../packages/mosaic/tags/tag-input.ts","../../packages/mosaic/tags/tag.module.ts","../../packages/mosaic/tabs/tab-content.ts","../../packages/mosaic/tabs/tab-label.ts","../../packages/mosaic/tabs/tab.ts","../../packages/mosaic/tabs/tabs-animations.ts","../../packages/mosaic/tabs/tab-body.ts","../../packages/mosaic/tabs/tab-label-wrapper.ts","../../packages/mosaic/tabs/tab-header.ts","../../packages/mosaic/tabs/tab-group.ts","../../packages/mosaic/tabs/tab-nav-bar/tab-nav-bar.ts","../../packages/mosaic/tabs/tabs.module.ts","../../packages/mosaic/tags/tag-default-options.ts","../../packages/mosaic/popover/popover.component.ts","../../packages/mosaic/popover/popover.module.ts","../../packages/mosaic/progress-bar/progress-bar.component.ts","../../packages/mosaic/progress-bar/progress-bar.module.ts","../../packages/mosaic/progress-spinner/progress-spinner.component.ts","../../packages/mosaic/progress-spinner/progress-spinner.module.ts","../../packages/mosaic/radio/radio.component.ts","../../packages/mosaic/radio/radio.module.ts","../../packages/mosaic/tree/node.ts","../../packages/mosaic/tree/padding.ts","../../packages/mosaic/tree/toggle.ts","../../packages/mosaic/tree/tree-option.ts","../../packages/mosaic/tree/tree-selection.ts","../../packages/mosaic/tree/tree.module.ts","../../packages/mosaic/tree/data-source/flat-data-source.ts","../../packages/mosaic/tree/data-source/nested-data-source.ts","../../packages/mosaic/modal/modal.component.ts","../../packages/mosaic/modal/css-unit.pipe.ts","../../packages/mosaic/modal/modal.service.ts","../../packages/mosaic/modal/modal.module.ts","../../packages/mosaic/navbar/navbar.component.ts","../../packages/mosaic/navbar/navbar.module.ts","../../packages/mosaic/popover/popover-animations.ts","../../packages/mosaic/list/list-selection.component.ts","../../packages/mosaic/list/list.component.ts","../../packages/mosaic/list/list.module.ts","../../packages/mosaic/link/link.component.ts","../../packages/mosaic/link/link.module.ts","../../packages/mosaic/modal/modal-control.service.ts","../../packages/mosaic/modal/modal-ref.class.ts","../../packages/mosaic/modal/modal-util.ts","../../packages/mosaic/datepicker/datepicker-input.ts","../../packages/mosaic/datepicker/datepicker-toggle.ts","../../packages/mosaic/datepicker/datepicker-module.ts","../../packages/mosaic/divider/divider.component.ts","../../packages/mosaic/divider/divider.module.ts","../../packages/mosaic/dropdown/dropdown-content.ts","../../packages/mosaic/dropdown/dropdown-panel.ts","../../packages/mosaic/dropdown/dropdown-item.ts","../../packages/mosaic/dropdown/dropdown-animations.ts","../../packages/mosaic/dropdown/dropdown.component.ts","../../packages/mosaic/dropdown/dropdown.module.ts","../../packages/mosaic/layout/content.component.ts","../../packages/mosaic/layout/footer.component.ts","../../packages/mosaic/layout/header.component.ts","../../packages/mosaic/layout/layout.component.ts","../../packages/mosaic/layout/sidebar.component.ts","../../packages/mosaic/layout/layout.module.ts","../../packages/mosaic/datepicker/multi-year-view.ts","../../packages/mosaic/datepicker/year-view.ts","../../packages/mosaic/datepicker/calendar.ts","../../packages/mosaic/datepicker/datepicker-animations.ts","../../packages/mosaic/datepicker/datepicker.ts","../../packages/mosaic/card/card.component.ts","../../packages/mosaic/card/card.module.ts","../../packages/mosaic/checkbox/checkbox-config.ts","../../packages/mosaic/checkbox/checkbox.ts","../../packages/mosaic/checkbox/checkbox-required-validator.ts","../../packages/mosaic/checkbox/checkbox-module.ts","../../packages/mosaic/input/input-value-accessor.ts","../../packages/mosaic/input/stepperUtils.ts","../../packages/mosaic/input/input.ts","../../packages/mosaic/input/input-number-validators.ts","../../packages/mosaic/input/input.module.ts","../../packages/mosaic/datepicker/datepicker-intl.ts","../../packages/mosaic/datepicker/calendar-body.ts","../../packages/mosaic/datepicker/month-view.ts","../../packages/mosaic/autocomplete/autocomplete.component.ts","../../packages/mosaic/autocomplete/autocomplete-origin.directive.ts","../../packages/mosaic/autocomplete/autocomplete.module.ts","../../packages/mosaic/button/button.component.ts","../../packages/mosaic/button/button.module.ts","../../packages/mosaic/button-toggle/button-toggle.component.ts","../../packages/mosaic/button-toggle/button-toggle.module.ts","../../node_modules/tslib/tslib.es6.js","../../packages/mosaic/core/utils/utils.ts","../../packages/mosaic/core/common-behaviors/common-module.ts","../../packages/mosaic/core/common-behaviors/disabled.ts","../../packages/mosaic/core/common-behaviors/color.ts","../../packages/mosaic/core/common-behaviors/tabindex.ts","../../packages/mosaic/core/common-behaviors/error-state.ts","../../packages/mosaic/core/option/option.ts","../../packages/mosaic/core/overlay/overlay-position-map.ts","../../packages/mosaic/core/select/errors.ts","../../packages/mosaic/form-field/form-field-errors.ts","../../packages/mosaic/input/input-errors.ts","../../packages/mosaic/datepicker/datepicker-errors.ts","../../packages/mosaic/dropdown/dropdown-errors.ts","../../packages/mosaic/vertical-navbar/vertical-navbar.animation.ts","../../packages/mosaic/core/line/line.ts","../../packages/mosaic/core/error/error-options.ts","../../packages/mosaic/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../packages/mosaic/core/selection/index.ts","../../packages/mosaic/core/services/measure-scrollbar.service.ts","../../packages/mosaic/core/option/optgroup.ts","../../packages/mosaic/core/option/index.ts","../../packages/mosaic/core/label/label-options.ts","../../packages/mosaic/core/animation/fade-animations.ts","../../packages/mosaic/core/animation/animation.ts","../../packages/mosaic/core/select/animations.ts","../../packages/mosaic/icon/icon.component.ts","../../packages/mosaic/icon/icon.module.ts","../../packages/mosaic/form-field/cleaner.ts","../../packages/mosaic/form-field/form-field-control.ts","../../packages/mosaic/form-field/form-field-number-control.ts","../../packages/mosaic/form-field/hint.ts","../../packages/mosaic/form-field/prefix.ts","../../packages/mosaic/form-field/stepper.ts","../../packages/mosaic/form-field/suffix.ts","../../packages/mosaic/form-field/form-field.ts","../../packages/mosaic/form-field/form-field.module.ts"],"sourcesContent":["import {\n    ChangeDetectionStrategy,\n    Component,\n    Input,\n    ViewEncapsulation,\n    Directive,\n    ElementRef,\n    OnDestroy,\n    Optional,\n    Self\n} from '@angular/core';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { CanDisable, mixinDisabled, CanDisableCtor } from '@ptsecurity/mosaic/core';\nimport { McDropdownTrigger } from '@ptsecurity/mosaic/dropdown';\n\n\n@Directive({\n    selector: 'mc-vertical-navbar-item-icon',\n    host: {\n        class: 'mc-vertical-navbar__item-icon'\n    }\n})\nexport class McVerticalNavbarItemIcon {}\n\n\n@Component({\n    selector: 'mc-vertical-navbar-badge',\n    template: `\n        <span class=\"mc-badge mc-badge_light\">\n            <ng-content></ng-content>\n        </span>\n    `,\n    host: {\n        class: 'mc-vertical-navbar__badge'\n    }\n})\nexport class McVerticalNavbarItemBadge {}\n\n\nclass McVerticalNavbarItemBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McVerticalNavbarMixinBase: CanDisableCtor & typeof McVerticalNavbarItemBase\n    = mixinDisabled(McVerticalNavbarItemBase);\n\n\n@Component({\n    selector: 'a[mc-vertical-navbar-item], mc-vertical-navbar-item',\n    templateUrl: './vertical-navbar-item.component.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    styleUrls: ['./vertical-navbar-item.component.css'],\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': 'disabled ? -1 : 0'\n    }\n})\nexport class McVerticalNavbarItem extends _McVerticalNavbarMixinBase implements CanDisable, OnDestroy {\n    @Input() tabIndex: number = 0;\n\n    constructor(\n        private element: ElementRef,\n        private focusMonitor: FocusMonitor,\n        @Optional() @Self() private trigger: McDropdownTrigger\n    ) {\n        super(element);\n\n        this.focusMonitor.monitor(this.element.nativeElement).subscribe();\n    }\n\n    get hasDropdownAttached() {\n        return !! this.trigger;\n    }\n\n    ngOnDestroy() {\n        this.focusMonitor.stopMonitoring(this.element.nativeElement);\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ViewEncapsulation,\n    Input,\n    ChangeDetectorRef\n} from '@angular/core';\n\nimport { toggleVerticalNavbarAnimation } from './vertical-navbar.animation';\n\n\n@Directive({\n    selector: 'mc-vertical-navbar-header, a[mc-vertical-navbar-header]',\n    host: {\n        class: 'mc-vertical-navbar__header'\n    }\n})\nexport class McVerticalNavbarHeader {}\n\n@Directive({\n    selector: 'mc-vertical-navbar-title',\n    host: {\n        class: 'mc-vertical-navbar__title'\n    }\n})\nexport class McVerticalNavbarTitle {}\n\n@Component({\n    selector: 'mc-vertical-navbar',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    templateUrl: './vertical-navbar.component.html',\n    styleUrls: ['./vertical-navbar.component.css'],\n    encapsulation: ViewEncapsulation.None,\n    animations: [\n        toggleVerticalNavbarAnimation()\n    ]\n})\nexport class McVerticalNavbar {\n\n    @Input() expanded: boolean = false;\n\n    constructor(\n        private cd: ChangeDetectorRef\n    ) {}\n\n    toggle() {\n        this.expanded = !this.expanded;\n        this.cd.markForCheck();\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport {\n    McVerticalNavbarItem,\n    McVerticalNavbarItemBadge,\n    McVerticalNavbarItemIcon\n} from './vertical-navbar-item.component';\nimport { McVerticalNavbar, McVerticalNavbarHeader, McVerticalNavbarTitle } from './vertical-navbar.component';\n\n\nconst COMPONENTS = [\n    McVerticalNavbar,\n    McVerticalNavbarTitle,\n    McVerticalNavbarItem,\n    McVerticalNavbarItemIcon,\n    McVerticalNavbarItemBadge,\n    McVerticalNavbarHeader\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        McIconModule\n    ],\n    exports: COMPONENTS,\n    declarations: COMPONENTS\n})\nexport class McVerticalNavbarModule {}\n","import { Version } from '@angular/core';\n\n\nexport const VERSION = new Version('1.0.0-beta.7-880ddc3');\n","export const selectEvents = 'selectEvents';\n","import { InjectionToken } from '@angular/core';\nimport { IScrollStrategy, Overlay, RepositionScrollStrategy } from '@ptsecurity/cdk/overlay';\n\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 224;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 1;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\n/* tslint:disable-next-line:no-magic-numbers */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MC_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-select-scroll-strategy');\n\n/** @docs-private */\nexport function mcSelectScrollStrategyProviderFactory(overlay: Overlay):\n    () => RepositionScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MC_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MC_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: mcSelectScrollStrategyProviderFactory\n};\n","import { DOCUMENT } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    forwardRef,\n    Host,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    Optional,\n    ViewContainerRef\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW } from '@ptsecurity/cdk/keycodes';\nimport {\n    FlexibleConnectedPositionStrategy,\n    Overlay,\n    OverlayConfig,\n    OverlayRef,\n    IPositionStrategy,\n    IScrollStrategy, IConnectedPosition\n} from '@ptsecurity/cdk/overlay';\nimport { TemplatePortal } from '@ptsecurity/cdk/portal';\nimport { ViewportRuler } from '@ptsecurity/cdk/scrolling';\nimport {\n    countGroupLabelsBeforeOption,\n    getOptionScrollPosition,\n    McOption,\n    McOptionSelectionChange\n} from '@ptsecurity/mosaic/core';\nimport { McFormField } from '@ptsecurity/mosaic/form-field';\nimport { Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable } from 'rxjs';\nimport { filter, take, switchMap, delay, tap, map } from 'rxjs/operators';\n\nimport { McAutocompleteOrigin } from './autocomplete-origin.directive';\nimport { McAutocomplete } from './autocomplete.component';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 32;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\nexport const AUTOCOMPLETE_BORDER_WIDTH: number = 2;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MC_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-autocomplete-scroll-strategy');\n\n// tslint:disable-next-line naming-convention\nexport function MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => IScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\nexport const MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McAutocompleteTrigger),\n    multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMcAutocompleteMissingPanelError(): Error {\n    return Error('Attempting to open an undefined instance of `mc-autocomplete`. ' +\n        'Make sure that the id passed to the `mcAutocomplete` is correct and that ' +\n        'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n    selector: `input[mcAutocomplete], textarea[mcAutocomplete]`,\n    host: {\n        class: 'mc-autocomplete-trigger',\n        '[attr.autocomplete]': 'autocompleteAttribute',\n        // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n        // a little earlier. This avoids issues where IE delays the focusing of the input.\n        '(focusin)': 'handleFocus()',\n        '(blur)': 'onTouched()',\n        '(input)': 'handleInput($event)',\n        '(keydown)': 'handleKeydown($event)',\n        '(click)': 'handleClick($event)'\n    },\n    exportAs: 'mcAutocompleteTrigger',\n    providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class McAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n    // @ts-ignore\n    readonly optionSelections: Observable<McOptionSelectionChange> = defer(() => {\n        if (this.autocomplete && this.autocomplete.options) {\n            return merge(...this.autocomplete.options.map((option) => option.onSelectionChange));\n        }\n\n        // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n        // Return a stream that we'll replace with the real one once everything is in place.\n        return this.zone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelections));\n    });\n\n    /** The currently active option, coerced to MatOption type. */\n    get activeOption(): McOption | null {\n        if (this.autocomplete && this.autocomplete.keyManager) {\n            return this.autocomplete.keyManager.activeItem;\n        }\n\n        return null;\n    }\n\n    get panelOpen(): boolean {\n        return this.overlayAttached && this.autocomplete.showPanel;\n    }\n\n    /** The autocomplete panel to be attached to this trigger. */\n    @Input('mcAutocomplete') autocomplete: McAutocomplete;\n\n    /**\n     * Reference relative to which to position the autocomplete panel.\n     * Defaults to the autocomplete trigger element.\n     */\n    @Input('mcAutocompleteConnectedTo') connectedTo: McAutocompleteOrigin;\n\n    /**\n     * `autocomplete` attribute to be set on the input element.\n     * @docs-private\n     */\n    @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     */\n    @Input('mcAutocompleteDisabled')\n    get autocompleteDisabled(): boolean {\n        return this._autocompleteDisabled;\n    }\n\n    set autocompleteDisabled(value: boolean) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n\n    private _autocompleteDisabled = false;\n\n    private overlayAttached: boolean = false;\n\n    private overlayRef: OverlayRef | null;\n\n    private portal: TemplatePortal;\n\n    private componentDestroyed = false;\n\n    private scrollStrategy: () => IScrollStrategy;\n\n    /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n    private previousValue: string | number | null;\n\n    /** Strategy that is used to position the panel. */\n    private positionStrategy: FlexibleConnectedPositionStrategy;\n\n    /** The subscription for closing actions (some are bound to document). */\n    private closingActionsSubscription: Subscription;\n\n    /** Subscription to viewport size changes. */\n    private viewportSubscription = Subscription.EMPTY;\n\n    /**\n     * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n     * closed autocomplete from being reopened if the user switches to another browser tab and then\n     * comes back.\n     */\n    private canOpenOnNextFocus = true;\n\n    /** Stream of keyboard events that can close the panel. */\n    private readonly closeKeyEventStream = new Subject<void>();\n\n    constructor(\n        private elementRef: ElementRef<HTMLInputElement>,\n        private viewContainerRef: ViewContainerRef,\n        private changeDetectorRef: ChangeDetectorRef,\n        private overlay: Overlay,\n        private zone: NgZone,\n        @Inject(MC_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n        @Optional() private dir: Directionality,\n        @Optional() @Host() private formField: McFormField,\n        @Optional() @Inject(DOCUMENT) private document: any,\n        // @breaking-change 8.0.0 Make `_viewportRuler` required.\n        private viewportRuler?: ViewportRuler\n    ) {\n        // tslint:disable-next-line no-typeof-undefined\n        if (typeof window !== 'undefined') {\n            zone.runOutsideAngular(() => {\n                window.addEventListener('blur', this.windowBlurHandler);\n            });\n        }\n\n        this.scrollStrategy = scrollStrategy;\n    }\n\n    ngOnDestroy() {\n        // tslint:disable-next-line no-typeof-undefined\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this.windowBlurHandler);\n        }\n\n        this.viewportSubscription.unsubscribe();\n        this.componentDestroyed = true;\n        this.destroyPanel();\n        this.closeKeyEventStream.complete();\n    }\n\n    /** `View -> model callback called when value changes` */\n    // tslint:disable-next-line no-empty\n    onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when autocomplete has been touched` */\n    // tslint:disable-next-line no-empty\n    onTouched: () => void = () => {};\n\n    /** Opens the autocomplete suggestion panel. */\n    openPanel(): void {\n        this.attachOverlay();\n    }\n\n    closePanel(): void {\n        if (!this.overlayAttached) { return; }\n\n        if (this.panelOpen) {\n            this.autocomplete.closed.emit();\n        }\n\n        this.autocomplete.isOpen = this.overlayAttached = false;\n\n        if (this.overlayRef && this.overlayRef.hasAttached()) {\n            this.overlayRef.detach();\n            this.closingActionsSubscription.unsubscribe();\n        }\n\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this.componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this.changeDetectorRef.detectChanges();\n        }\n    }\n\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n    updatePosition(): void {\n        if (this.overlayAttached) {\n            this.overlayRef!.updatePosition();\n        }\n    }\n\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    get panelClosingActions(): Observable<McOptionSelectionChange | null> {\n        return merge(\n            this.optionSelections,\n            this.autocomplete.keyManager.tabOut.pipe(filter(() => this.overlayAttached)),\n            this.closeKeyEventStream,\n            this.getOutsideClickStream(),\n            this.overlayRef ?\n                this.overlayRef.detachments().pipe(filter(() => this.overlayAttached)) :\n                observableOf()\n        ).pipe(\n            // Normalize the output so we return a consistent type.\n            map((event) => event instanceof McOptionSelectionChange ? event : null)\n        );\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any): void {\n        Promise.resolve(null).then(() => this.setTriggerValue(value));\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => {}): void {\n        this.onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => {}) {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.elementRef.nativeElement.disabled = isDisabled;\n    }\n\n    handleKeydown(event: KeyboardEvent): void {\n        // tslint:disable-next-line deprecation\n        const keyCode = event.keyCode;\n\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE) {\n            event.preventDefault();\n        }\n\n        if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n            this.activeOption.selectViaInteraction();\n            this.resetActiveItem();\n            event.preventDefault();\n        } else if (this.autocomplete) {\n            const prevActiveItem = this.autocomplete.keyManager.activeItem;\n\n            if (this.panelOpen || keyCode === TAB) {\n                this.autocomplete.onKeydown(event);\n            } else if (keyCode === DOWN_ARROW && this.canOpen()) {\n                this.openPanel();\n            }\n\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n            if (isArrowKey || this.autocomplete.keyManager.activeItem !== prevActiveItem) {\n                this.scrollToOption();\n            }\n        }\n    }\n\n    handleInput(event: KeyboardEvent): void {\n        const target = event.target as HTMLInputElement;\n        let value: number | string | null = target.value;\n\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value === '' ? null : parseFloat(value);\n        }\n\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this.previousValue !== value) {\n            this.previousValue = value;\n            this.onChange(value);\n\n            if (this.canOpen() && this.document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n\n    handleFocus(): void {\n        if (!this.canOpenOnNextFocus) {\n            this.canOpenOnNextFocus = true;\n        } else if (this.canOpen()) {\n            this.previousValue = this.elementRef.nativeElement.value;\n            this.attachOverlay();\n        }\n    }\n\n    handleClick($event: MouseEvent) {\n        if (this.canOpen() && this.document.activeElement === $event.target) {\n            this.openPanel();\n        }\n    }\n\n    /** Stream of clicks outside of the autocomplete panel. */\n    private getOutsideClickStream(): Observable<any> {\n        if (!this.document) { return observableOf(null); }\n\n        return fromEvent<MouseEvent>(this.document, 'click')\n            .pipe(filter((event) => {\n                const clickTarget = event.target as HTMLElement;\n                const formField = this.formField ?\n                    this.formField._elementRef.nativeElement : null;\n\n                return this.overlayAttached &&\n                    clickTarget !== this.elementRef.nativeElement &&\n                    (!formField || !formField.contains(clickTarget)) &&\n                    (!!this.overlayRef && !this.overlayRef.overlayElement.contains(clickTarget));\n            }));\n    }\n\n    /**\n     * Event handler for when the window is blurred. Needs to be an\n     * arrow function in order to preserve the context.\n     */\n    private windowBlurHandler = () => {\n        // If the user blurred the window while the autocomplete is focused, it means that it'll be\n        // refocused when they come back. In this case we want to skip the first focus event, if the\n        // pane was closed, in order to avoid reopening it unintentionally.\n        this.canOpenOnNextFocus = this.document.activeElement !== this.elementRef.nativeElement || this.panelOpen;\n    }\n\n    /**\n     * Given that we are not actually focusing active options, we must manually adjust scroll\n     * to reveal options below the fold. First, we find the offset of the option from the top\n     * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n     * the panel height + the option height, so the active option will be just visible at the\n     * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n     * will become the offset. If that offset is visible within the panel already, the scrollTop is\n     * not adjusted.\n     */\n    private scrollToOption(): void {\n        const index = this.autocomplete.keyManager.activeItemIndex || 0;\n        const labelCount = countGroupLabelsBeforeOption(index,\n            this.autocomplete.options, this.autocomplete.optionGroups);\n\n        const newScrollPosition = getOptionScrollPosition(\n            index + labelCount,\n            AUTOCOMPLETE_OPTION_HEIGHT,\n            this.autocomplete.getScrollTop(),\n            AUTOCOMPLETE_PANEL_HEIGHT\n        );\n\n        this.autocomplete.setScrollTop(newScrollPosition);\n    }\n\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    private subscribeToClosingActions(): Subscription {\n        const firstStable = this.zone.onStable.asObservable()\n            .pipe(take(1));\n        const optionChanges = this.autocomplete.options.changes\n            .pipe(\n                tap(() => this.positionStrategy.reapplyLastPosition()),\n                // Defer emitting to the stream until the next tick, because changing\n                // bindings in here will cause \"changed after checked\" errors.\n                delay(0)\n            );\n\n        // When the zone is stable initially, and when the option list changes...\n        return merge(firstStable, optionChanges)\n            .pipe(\n                // create a new stream of panelClosingActions, replacing any previous streams\n                // that were created, and flatten it so our stream only emits closing events...\n                switchMap(() => {\n                    this.resetActiveItem();\n                    this.autocomplete.setVisibility();\n\n                    if (this.panelOpen) {\n                        this.overlayRef!.updatePosition();\n                    }\n\n                    return this.panelClosingActions;\n                }),\n                // when the first closing event occurs...\n                take(1)\n            )\n            // set the value, close the panel, and complete.\n            .subscribe((event) => this.setValueAndClose(event));\n    }\n\n    /** Destroys the autocomplete suggestion panel. */\n    private destroyPanel(): void {\n        if (this.overlayRef) {\n            this.closePanel();\n            this.overlayRef.dispose();\n            this.overlayRef = null;\n        }\n    }\n\n    private setTriggerValue(value: any): void {\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n            this.autocomplete.displayWith(value) :\n            value;\n\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        const inputValue = toDisplay != null ? toDisplay : '';\n\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this.formField) {\n            this.formField._control.value = inputValue;\n        } else {\n            this.elementRef.nativeElement.value = inputValue;\n        }\n\n        this.previousValue = inputValue;\n    }\n\n    /** This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    private setValueAndClose(event: McOptionSelectionChange | null): void {\n        if (event && event.source) {\n            this.clearPreviousSelectedOption(event.source);\n            this.setTriggerValue(event.source.value);\n            this.onChange(event.source.value);\n            this.elementRef.nativeElement.focus();\n\n            this.autocomplete.emitSelectEvent(event.source);\n        }\n\n        this.closePanel();\n    }\n\n    /** Clear any previous selected option and emit a selection change event for this option */\n    private clearPreviousSelectedOption(skip: McOption) {\n        this.autocomplete.options.forEach((option) => {\n            if (option !== skip && option.selected) {\n                option.deselect();\n            }\n        });\n    }\n\n    private attachOverlay(): void {\n        if (!this.autocomplete) {\n            throw getMcAutocompleteMissingPanelError();\n        }\n\n        let overlayRef = this.overlayRef;\n\n        if (!overlayRef) {\n            this.portal = new TemplatePortal(this.autocomplete.template, this.viewContainerRef);\n            overlayRef = this.overlay.create(this.getOverlayConfig());\n            this.overlayRef = overlayRef;\n\n            // Use the `keydownEvents` in order to take advantage of\n            // the overlay event targeting provided by the CDK overlay.\n            overlayRef.keydownEvents().subscribe((event) => {\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                // tslint:disable-next-line deprecation\n                if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n                    this.resetActiveItem();\n                    this.closeKeyEventStream.next();\n                }\n            });\n\n            if (this.viewportRuler) {\n                this.viewportSubscription = this.viewportRuler.change().subscribe(() => {\n                    if (this.panelOpen && overlayRef) {\n                        overlayRef.updateSize({ width: this.getPanelWidth() });\n                    }\n                });\n            }\n        } else {\n            const position = overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n\n            // Update the trigger, panel width and direction, in case anything has changed.\n            position.setOrigin(this.getConnectedElement());\n            overlayRef.updateSize({ width: this.getPanelWidth() });\n        }\n\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this.portal);\n            this.closingActionsSubscription = this.subscribeToClosingActions();\n        }\n\n        const wasOpen = this.panelOpen;\n\n        this.autocomplete.setVisibility();\n        this.autocomplete.isOpen = this.overlayAttached = true;\n\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n\n    private getOverlayConfig(): OverlayConfig {\n        return new OverlayConfig({\n            positionStrategy: this.getOverlayPosition(),\n            scrollStrategy: this.scrollStrategy(),\n            width: this.getPanelWidth(),\n            direction: this.dir\n        });\n    }\n\n    private getOverlayPosition(): IPositionStrategy {\n        this.positionStrategy = this.overlay.position()\n            .flexibleConnectedTo(this.getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false)\n            .withPositions([\n                {\n                    originX: 'start',\n                    originY: 'bottom',\n                    overlayX: 'start',\n                    overlayY: 'top'\n                },\n                {\n                    originX: 'start',\n                    originY: 'top',\n                    overlayX: 'start',\n                    overlayY: 'bottom',\n\n                    // The overlay edge connected to the trigger should have squared corners, while\n                    // the opposite end has rounded corners. We apply a CSS class to swap the\n                    // border-radius based on the overlay position.\n                    panelClass: 'mc-autocomplete-panel-above'\n                }\n            ] as IConnectedPosition[]);\n\n        return this.positionStrategy;\n    }\n\n    private getConnectedElement(): ElementRef {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n\n        return this.formField ? this.formField.getConnectedOverlayOrigin() : this.elementRef;\n    }\n\n    private getPanelWidth(): number | string {\n        return this.autocomplete.panelWidth || this.getHostWidth() - AUTOCOMPLETE_BORDER_WIDTH;\n    }\n\n    private getHostWidth(): number {\n        return this.getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     */\n    private resetActiveItem(): void {\n        this.autocomplete.keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n    }\n\n    private canOpen(): boolean {\n        const element = this.elementRef.nativeElement;\n\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n}\n","import {\n    AfterContentInit,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    Self,\n    ViewContainerRef\n} from '@angular/core';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { Direction, Directionality } from '@ptsecurity/cdk/bidi';\nimport { LEFT_ARROW, RIGHT_ARROW, SPACE, ENTER } from '@ptsecurity/cdk/keycodes';\nimport {\n    FlexibleConnectedPositionStrategy,\n    HorizontalConnectionPos,\n    Overlay,\n    OverlayConfig,\n    OverlayRef,\n    VerticalConnectionPos,\n    IScrollStrategy\n} from '@ptsecurity/cdk/overlay';\nimport { normalizePassiveListenerOptions } from '@ptsecurity/cdk/platform';\nimport { TemplatePortal } from '@ptsecurity/cdk/portal';\nimport { asapScheduler, merge, of as observableOf, Subscription } from 'rxjs';\nimport { delay, filter, take, takeUntil } from 'rxjs/operators';\n\nimport { throwMcDropdownMissingError } from './dropdown-errors';\nimport { McDropdownItem } from './dropdown-item';\nimport { McDropdownPanel } from './dropdown-panel';\nimport { DropdownPositionX, DropdownPositionY } from './dropdown-positions';\nimport { McDropdown } from './dropdown.component';\n\n\n/** Injection token that determines the scroll handling while the dropdown is open. */\nexport const MC_DROPDOWN_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-dropdown-scroll-strategy');\n\n/** @docs-private */\nexport function MC_DROPDOWN_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => IScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_DROPDOWN_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_DROPDOWN_SCROLL_STRATEGY_FACTORY\n};\n\n/** Default top padding of the nested dropdown panel. */\nexport const NESTED_PANEL_TOP_PADDING = 2;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * This directive is intended to be used in conjunction with an mc-dropdown tag.  It is\n * responsible for toggling the display of the provided dropdown instance.\n */\n@Directive({\n    selector: `[mcDropdownTriggerFor]`,\n    host: {\n        'aria-haspopup': 'true',\n        '[attr.aria-expanded]': 'opened || null',\n        '(mousedown)': '_handleMousedown($event)',\n        '(keydown)': '_handleKeydown($event)',\n        '(click)': '_handleClick($event)'\n    },\n    exportAs: 'mcDropdownTrigger'\n})\nexport class McDropdownTrigger implements AfterContentInit, OnDestroy {\n\n\n    /**\n     * Handles touch start events on the trigger.\n     * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n     */\n    private _handleTouchStart = () => this._openedBy = 'touch';\n\n    /** The text direction of the containing app. */\n    get dir(): Direction {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n\n    // Tracking input type is necessary so it's possible to only auto-focus\n    // the first item of the list when the dropdown is opened via the keyboard\n    _openedBy: 'mouse' | 'touch' | null = null;\n\n\n    /** References the dropdown instance that the trigger is associated with. */\n    @Input('mcDropdownTriggerFor')\n    get dropdown() {\n        return this._dropdown;\n    }\n\n    set dropdown(dropdown: McDropdownPanel) {\n        if (dropdown === this._dropdown) {\n            return;\n        }\n\n        this._dropdown = dropdown;\n        this._closeSubscription.unsubscribe();\n\n        if (dropdown) {\n            this._closeSubscription = dropdown.closed.asObservable().subscribe(reason => {\n                this._destroy();\n\n                // If a click closed the dropdown, we should close the entire chain of nested dropdowns.\n                if ((reason === 'click' || reason === 'tab') && this._parent) {\n                    this._parent.closed.emit(reason);\n                }\n            });\n        }\n    }\n\n    private _dropdown: McDropdownPanel;\n\n    /** Data to be passed along to any lazily-rendered content. */\n    @Input('mcDropdownTriggerData') data: any;\n\n    /** Event emitted when the associated dropdown is opened. */\n    @Output() readonly dropdownOpened: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Event emitted when the associated dropdown is closed. */\n    @Output() readonly dropdownClosed: EventEmitter<void> = new EventEmitter<void>();\n\n    private _portal: TemplatePortal;\n    private _overlayRef: OverlayRef | null = null;\n    private _opened: boolean = false;\n    private _closeSubscription = Subscription.EMPTY;\n    private _hoverSubscription = Subscription.EMPTY;\n\n    constructor(private _overlay: Overlay,\n                private _element: ElementRef<HTMLElement>,\n                private _viewContainerRef: ViewContainerRef,\n                @Inject(MC_DROPDOWN_SCROLL_STRATEGY) private _scrollStrategy: any,\n                @Optional() private _parent: McDropdown,\n                @Optional() @Self() private _dropdownItemInstance: McDropdownItem,\n                @Optional() private _dir: Directionality,\n                private _focusMonitor?: FocusMonitor) {\n\n        _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n            passiveEventListenerOptions);\n\n        if (_dropdownItemInstance) {\n            _dropdownItemInstance._triggersNestedDropdown = this.triggersNestedDropdown();\n        }\n    }\n\n    ngAfterContentInit() {\n        this._check();\n        this._handleHover();\n    }\n\n    ngOnDestroy() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n\n        this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n            passiveEventListenerOptions);\n\n        this._cleanUpSubscriptions();\n        this._closeSubscription.unsubscribe();\n    }\n\n    /** Whether the dropdown is open. */\n    get opened(): boolean {\n        return this._opened;\n    }\n\n    /** Whether the dropdown triggers a nested dropdown or a top-level one. */\n    triggersNestedDropdown(): boolean {\n        return !!(this._dropdownItemInstance && this._parent);\n    }\n\n    /** Toggles the dropdown between the open and closed states. */\n    toggle(): void {\n        // tslint:disable-next-line:no-void-expression\n        return this._opened ? this.close() : this.open();\n    }\n\n    /** Opens the dropdown. */\n    open(): void {\n        if (this._opened) {\n            return;\n        }\n\n        this._check();\n\n        const overlayRef = this._createOverlay();\n        const overlayConfig = overlayRef.getConfig();\n\n        this._setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\n        overlayConfig.hasBackdrop = this.dropdown.hasBackdrop == null ? !this.triggersNestedDropdown() :\n            this.dropdown.hasBackdrop;\n        overlayRef.attach(this._getPortal());\n\n        if (this.dropdown.lazyContent) {\n            this.dropdown.lazyContent.attach(this.data);\n        }\n\n        this._closeSubscription = this._closingActions().subscribe(() => this.close());\n        this._init();\n\n        if (this.dropdown instanceof McDropdown) {\n            this.dropdown._startAnimation();\n        }\n    }\n\n    /** Closes the dropdown. */\n    close(): void {\n        this.dropdown.closed.emit();\n    }\n\n    /**\n     * Focuses the dropdown trigger.\n     * @param origin Source of the dropdown trigger's focus.\n     */\n    focus(origin: FocusOrigin = 'program') {\n        if (this._focusMonitor) {\n            this._focusMonitor.focusVia(this._element.nativeElement, origin);\n        } else {\n            this._element.nativeElement.focus();\n        }\n    }\n\n    /** Closes the dropdown and does the necessary cleanup. */\n    private _destroy() {\n        if (!this._overlayRef || !this.opened) {\n            return;\n        }\n\n        const dropdown = this.dropdown;\n\n        this._closeSubscription.unsubscribe();\n        this._overlayRef.detach();\n\n        if (dropdown instanceof McDropdown) {\n            dropdown._resetAnimation();\n\n            if (dropdown.lazyContent) {\n                // Wait for the exit animation to finish before detaching the content.\n                dropdown._animationDone\n                    .pipe(\n                        filter((event) => event.toState === 'void'),\n                        take(1),\n                        // Interrupt if the content got re-attached.\n                        takeUntil(dropdown.lazyContent._attached)\n                    )\n                    .subscribe(() => dropdown.lazyContent!.detach(), undefined, () => {\n                        // No matter whether the content got re-attached, reset the dropdown.\n                        this._reset();\n                    });\n            } else {\n                this._reset();\n            }\n        } else {\n            this._reset();\n\n            if (dropdown.lazyContent) {\n                dropdown.lazyContent.detach();\n            }\n        }\n    }\n\n    /**\n     * This method sets the dropdown state to open and focuses the first item if\n     * the dropdown was opened via the keyboard.\n     */\n    private _init(): void {\n        this.dropdown.parent = this.triggersNestedDropdown() ? this._parent : undefined;\n        this.dropdown.direction = this.dir;\n        this._setIsOpened(true);\n        this.dropdown.focusFirstItem(this._openedBy || 'program');\n    }\n\n    /**\n     * This method resets the dropdown when it's closed, most importantly restoring\n     * focus to the dropdown trigger if the dropdown was opened via the keyboard.\n     */\n    private _reset(): void {\n        this._setIsOpened(false);\n\n        // We should reset focus if the user is navigating using a keyboard or\n        // if we have a top-level trigger which might cause focus to be lost\n        // when clicking on the backdrop.\n        if (!this._openedBy) {\n            // Note that the focus style will show up both for `program` and\n            // `keyboard` so we don't have to specify which one it is.\n            this.focus();\n        } else if (!this.triggersNestedDropdown()) {\n            this.focus(this._openedBy);\n        }\n\n        this._openedBy = null;\n    }\n\n    // set state rather than toggle to support triggers sharing a dropdown\n    private _setIsOpened(isOpen: boolean): void {\n        this._opened = isOpen;\n        // tslint:disable-next-line:no-void-expression\n        this._opened ? this.dropdownOpened.emit() : this.dropdownClosed.emit();\n\n        if (this.triggersNestedDropdown()) {\n            this._dropdownItemInstance._highlighted = isOpen;\n        }\n    }\n\n    /**\n     * This method checks that a valid instance of McDropdown has been passed into\n     * mcDropdownTriggerFor. If not, an exception is thrown.\n     */\n    private _check() {\n        if (!this.dropdown) {\n            throwMcDropdownMissingError();\n        }\n    }\n\n    /**\n     * This method creates the overlay from the provided dropdown's template and saves its\n     * OverlayRef so that it can be attached to the DOM when open is called.\n     */\n    private _createOverlay(): OverlayRef {\n        if (!this._overlayRef) {\n            const config = this._getOverlayConfig();\n            this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n            this._overlayRef = this._overlay.create(config);\n\n            // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n            // Ideally we'd also have our keyboard event logic in here, however doing so will\n            // break anybody that may have implemented the `McDropdownPanel` themselves.\n            this._overlayRef.keydownEvents().subscribe();\n        }\n\n        return this._overlayRef;\n    }\n\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @returns OverlayConfig\n     */\n    private _getOverlayConfig(): OverlayConfig {\n        return new OverlayConfig({\n            positionStrategy: this._overlay.position()\n                .flexibleConnectedTo(this._element)\n                .withLockedPosition()\n                .withTransformOriginOn('.mc-dropdown__panel'),\n            backdropClass: this.dropdown.backdropClass || 'cdk-overlay-transparent-backdrop',\n            scrollStrategy: this._scrollStrategy(),\n            direction: this._dir\n        });\n    }\n\n    /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the dropdown based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     */\n    private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n        if (this.dropdown.setPositionClasses) {\n            position.positionChanges.subscribe(change => {\n                const posX: DropdownPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n                const posY: DropdownPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n                this.dropdown.setPositionClasses!(posX, posY);\n            });\n        }\n    }\n\n    /**\n     * Sets the appropriate positions on a position strategy\n     * so the overlay connects with the trigger correctly.\n     * @param positionStrategy Strategy whose position to update.\n     */\n    private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n\n        let [originX, originFallbackX, overlayX, overlayFallbackX]: HorizontalConnectionPos[] =\n            this.dropdown.xPosition === 'before' ?\n                ['end', 'start', 'end', 'start'] :\n                ['start', 'end', 'start', 'end'];\n\n        let [overlayY, overlayFallbackY, originY, originFallbackY]: VerticalConnectionPos[] =\n            this.dropdown.yPosition === 'above' ?\n                ['bottom', 'top', 'bottom', 'top'] :\n                ['top', 'bottom', 'top', 'bottom'];\n\n        let offsetY = 0;\n\n        if (this.triggersNestedDropdown()) {\n            // When the dropdown is nested, it should always align itself\n            // to the edges of the trigger, instead of overlapping it.\n            overlayFallbackX = originX = this.dropdown.xPosition === 'before' ? 'start' : 'end';\n            originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n            offsetY = overlayY === 'bottom' ? NESTED_PANEL_TOP_PADDING : -NESTED_PANEL_TOP_PADDING;\n        } else {\n            if (!this.dropdown.overlapTriggerY) {\n                originY = overlayY === 'top' ? 'bottom' : 'top';\n                originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n            }\n\n            if (!this.dropdown.overlapTriggerX) {\n                overlayFallbackX = originX = this.dropdown.xPosition === 'before' ? 'start' : 'end';\n                originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n            }\n        }\n\n        positionStrategy.withPositions([\n            {originX, originY, overlayX, overlayY, offsetY},\n            {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n            {\n                originX,\n                originY: originFallbackY,\n                overlayX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY\n            },\n            {\n                originX: originFallbackX,\n                originY: originFallbackY,\n                overlayX: overlayFallbackX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY\n            }\n        ]);\n    }\n\n    /** Cleans up the active subscriptions. */\n    private _cleanUpSubscriptions(): void {\n        this._closeSubscription.unsubscribe();\n        this._hoverSubscription.unsubscribe();\n    }\n\n    /** Returns a stream that emits whenever an action that should close the dropdown occurs. */\n    private _closingActions() {\n        const backdrop = this._overlayRef!.backdropClick();\n        const detachments = this._overlayRef!.detachments();\n        const parentClose = this._parent ? this._parent.closed : observableOf();\n        const hover = this._parent ? this._parent._hovered().pipe(\n            filter((active) => active !== this._dropdownItemInstance),\n            filter(() => this._opened)\n        ) : observableOf();\n\n        return merge(backdrop, parentClose, hover, detachments);\n    }\n\n    /** Handles mouse presses on the trigger. */\n    private _handleMousedown(event: MouseEvent): void {\n        // Since right or middle button clicks won't trigger the `click` event,\n        // we shouldn't consider the dropdown as opened by mouse in those cases.\n        this._openedBy = event.button === 0 ? 'mouse' : null;\n\n        // Since clicking on the trigger won't close the dropdown if it opens a nested dropdown,\n        // we should prevent focus from moving onto it via click to avoid the\n        // highlight from lingering on the dropdown item.\n        if (this.triggersNestedDropdown()) {\n            event.preventDefault();\n        }\n    }\n\n    /** Handles key presses on the trigger. */\n    private _handleKeydown(event: KeyboardEvent): void {\n        const keyCode = event.keyCode;\n\n        if (keyCode === SPACE || keyCode === ENTER) {\n            this.open();\n        }\n\n        if (this.triggersNestedDropdown() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n            this.open();\n        }\n    }\n\n    /** Handles click events on the trigger. */\n    private _handleClick(event: MouseEvent): void {\n        if (this.triggersNestedDropdown()) {\n            // Stop event propagation to avoid closing the parent dropdown.\n            event.stopPropagation();\n            this.open();\n        } else {\n            this.toggle();\n        }\n    }\n\n    /** Handles the cases where the user hovers over the trigger. */\n    private _handleHover() {\n        // Subscribe to changes in the hovered item in order to toggle the panel.\n        if (!this.triggersNestedDropdown()) {\n            return;\n        }\n\n        this._hoverSubscription = this._parent._hovered()\n        // Since we might have multiple competing triggers for the same dropdown (e.g. a nested dropdown\n        // with different data and triggers), we have to delay it by a tick to ensure that\n        // it won't be closed immediately after it is opened.\n            .pipe(\n                filter((active) => active === this._dropdownItemInstance && !active.disabled),\n                delay(0, asapScheduler)\n            )\n            .subscribe(() => {\n                this._openedBy = 'mouse';\n\n                // If the same dropdown is used between multiple triggers, it might still be animating\n                // while the new trigger tries to re-open it. Wait for the animation to finish\n                // before doing so. Also interrupt if the user moves to another item.\n                if (this.dropdown instanceof McDropdown && this.dropdown._isAnimating) {\n                    // We need the `delay(0)` here in order to avoid\n                    // 'changed after checked' errors in some cases. See #12194.\n                    this.dropdown._animationDone\n                        .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parent._hovered()))\n                        .subscribe(() => this.open());\n                } else {\n                    this.open();\n                }\n            });\n    }\n\n    /** Gets the portal that should be attached to the overlay. */\n    private _getPortal(): TemplatePortal {\n        // Note that we can avoid this check by keeping the portal on the dropdown panel.\n        // While it would be cleaner, we'd have to introduce another required method on\n        // `McDropdownPanel`, making it harder to consume.\n        if (!this._portal || this._portal.templateRef !== this.dropdown.templateRef) {\n            this._portal = new TemplatePortal(this.dropdown.templateRef, this._viewContainerRef);\n        }\n\n        return this._portal;\n    }\n\n}\n","/* tslint:disable:no-empty */\n\nimport {\n    AfterContentInit, AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Input,\n    isDevMode,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList, Renderer2,\n    Self,\n    SimpleChanges,\n    ViewChild, ViewChildren,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { ActiveDescendantKeyManager } from '@ptsecurity/cdk/a11y';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    RIGHT_ARROW,\n    SPACE,\n    UP_ARROW,\n    A,\n    PAGE_UP,\n    PAGE_DOWN\n} from '@ptsecurity/cdk/keycodes';\nimport {\n    CdkConnectedOverlay,\n    ViewportRuler\n} from '@ptsecurity/cdk/overlay';\nimport {\n    countGroupLabelsBeforeOption,\n    getOptionScrollPosition,\n    CanDisable,\n    CanDisableCtor,\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    HasTabIndex,\n    HasTabIndexCtor,\n    MC_OPTION_PARENT_COMPONENT,\n    McOptgroup,\n    McOption,\n    McOptionSelectionChange,\n    mixinDisabled,\n    mixinErrorState,\n    mixinTabIndex,\n    mcSelectAnimations,\n\n    SELECT_PANEL_INDENT_PADDING_X,\n    SELECT_PANEL_MAX_HEIGHT,\n    SELECT_PANEL_PADDING_X,\n    SELECT_PANEL_VIEWPORT_PADDING,\n\n    getMcSelectDynamicMultipleError,\n    getMcSelectNonFunctionValueError,\n    getMcSelectNonArrayValueError,\n    MC_SELECT_SCROLL_STRATEGY\n} from '@ptsecurity/mosaic/core';\nimport { McFormField, McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { McInput } from '@ptsecurity/mosaic/input';\nimport { McTag } from '@ptsecurity/mosaic/tags';\nimport { defer, merge, Observable, Subject, Subscription } from 'rxjs';\nimport {\n    filter,\n    map,\n    startWith,\n    switchMap,\n    take,\n    takeUntil,\n    distinctUntilChanged\n} from 'rxjs/operators';\n\n\nlet nextUniqueId = 0;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 2;\n\n/** Change event object that is emitted when the select value has changed. */\nexport class McSelectChange {\n    constructor(public source: McSelect, public value: any) {}\n}\n\nexport class McSelectBase {\n    constructor(\n        public elementRef: ElementRef,\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {}\n}\n\nconst McSelectMixinBase: CanDisableCtor & HasTabIndexCtor & CanUpdateErrorStateCtor &\n    typeof McSelectBase = mixinTabIndex(mixinDisabled(mixinErrorState(McSelectBase)));\n\n@Directive({\n    selector: '[mcSelectSearch]',\n    exportAs: 'mcSelectSearch'\n})\nexport class McSelectSearch implements AfterContentInit, OnDestroy {\n    @ContentChild(McInput) input: McInput;\n\n    searchChangesSubscription: Subscription = new Subscription();\n\n    isSearchChanged: boolean = false;\n\n    focus(): void {\n        this.input.focus();\n    }\n\n    reset(): void {\n        this.input.ngControl.reset();\n    }\n\n    ngAfterContentInit(): void {\n        if (!this.input) {\n            throw Error('McSelectSearch does not work without input');\n        }\n\n        if (!this.input.ngControl) {\n            throw Error('McSelectSearch does not work without ngControl');\n        }\n\n        this.searchChangesSubscription = this.input.ngControl.valueChanges!.subscribe(() => {\n            this.isSearchChanged = true;\n        });\n    }\n\n    ngOnDestroy(): void {\n        this.searchChangesSubscription.unsubscribe();\n    }\n}\n\n\n\n@Directive({ selector: 'mc-select-trigger' })\nexport class McSelectTrigger {}\n\n\n@Component({\n    selector: 'mc-select',\n    exportAs: 'mcSelect',\n    templateUrl: 'select.html',\n    styleUrls: ['./select.css'],\n    inputs: ['disabled', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'tabIndex',\n        class: 'mc-select',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-select-invalid]': 'errorState',\n        '[class.mc-select-required]': 'required',\n        '(keydown)': 'handleKeydown($event)',\n        '(focus)': 'onFocus()',\n        '(blur)': 'onBlur()',\n        '(window:resize)': 'calculateHiddenItems()'\n    },\n    animations: [\n        mcSelectAnimations.transformPanel,\n        mcSelectAnimations.fadeInContent\n    ],\n    providers: [\n        { provide: McFormFieldControl, useExisting: McSelect },\n        { provide: MC_OPTION_PARENT_COMPONENT, useExisting: McSelect }\n    ]\n})\nexport class McSelect extends McSelectMixinBase implements\n    AfterContentInit, AfterViewInit, OnChanges, OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable,\n    HasTabIndex, McFormFieldControl<any>, CanUpdateErrorState {\n\n    /** A name for this control that can be used by `mc-form-field`. */\n    controlType = 'mc-select';\n\n    hiddenItems: number = 0;\n    oneMoreText: string = '...ещё';\n\n    /** The last measured value for the trigger's client bounding rect. */\n    triggerRect: ClientRect;\n\n    /** The cached font-size of the trigger element. */\n    triggerFontSize = 0;\n\n    /** Deals with the selection logic. */\n    selectionModel: SelectionModel<McOption>;\n\n    previousSelectionModelSelected: McOption[] = [];\n\n    /** Manages keyboard events for options in the panel. */\n    keyManager: ActiveDescendantKeyManager<McOption>;\n\n    /** The IDs of child options to be passed to the aria-owns attribute. */\n    optionIds: string = '';\n\n    /** The value of the select panel's transform-origin property. */\n    transformOrigin: string = 'top';\n\n    /** Whether the panel's animation is done. */\n    panelDoneAnimating: boolean = false;\n\n    /** Emits when the panel element is finished transforming in. */\n    panelDoneAnimatingStream = new Subject<string>();\n\n    /** Strategy that will be used to handle scrolling while the select panel is open. */\n    scrollStrategy = this._scrollStrategyFactory();\n\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n    offsetY = 0;\n\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n    positions = [\n        {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top'\n        },\n        {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom'\n        }\n    ];\n\n    @ViewChild('trigger') trigger: ElementRef;\n\n    @ViewChild('panel') panel: ElementRef;\n\n    @ViewChild('optionsContainer') optionsContainer: ElementRef;\n\n    @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n    @ViewChildren(McTag) tags: QueryList<McTag>;\n\n    /** User-supplied override of the trigger element. */\n    @ContentChild(McSelectTrigger) customTrigger: McSelectTrigger;\n\n    /** All of the defined select options. */\n    @ContentChildren(McOption, { descendants: true }) options: QueryList<McOption>;\n\n    /** All of the defined groups of options. */\n    @ContentChildren(McOptgroup) optionGroups: QueryList<McOptgroup>;\n\n    @ContentChild(McSelectSearch) search: McSelectSearch;\n\n    /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n    @Input() panelClass: string | string[] | Set<string> | { [key: string]: any };\n\n    /** Object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Function used to sort the values in a select in multiple mode.\n     * Follows the same logic as `Array.prototype.sort`.\n     */\n    @Input() sortComparator: (a: McOption, b: McOption, options: McOption[]) => number;\n\n    /** Combined stream of all of the child options' change events. */\n    readonly optionSelectionChanges: Observable<McOptionSelectionChange> = defer(() => {\n        if (this.options) {\n            return merge(\n                ...this.options.map((option) => option.onSelectionChange),\n                ...this.selectionModel.selected.map((option) => option.onSelectionChange)\n            );\n        }\n\n        return this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n    }) as Observable<McOptionSelectionChange>;\n\n    /** Event emitted when the select panel has been toggled. */\n    @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted when the select has been opened. */\n    @Output('opened') readonly openedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => o), map(() => {}));\n\n    /** Event emitted when the select has been closed. */\n    @Output('closed') readonly closedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => !o), map(() => {}));\n\n    /** Event emitted when the selected value has been changed by the user. */\n    @Output() readonly selectionChange: EventEmitter<McSelectChange> = new EventEmitter<McSelectChange>();\n\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    @Input()\n    get placeholder(): string {\n        return this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n\n        this.stateChanges.next();\n    }\n\n    private _placeholder: string;\n\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n\n        this.stateChanges.next();\n    }\n\n    private _required: boolean = false;\n\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        if (this.selectionModel) {\n            throw getMcSelectDynamicMultipleError();\n        }\n\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    private _multiple: boolean = false;\n\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith() {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        /* tslint:disable-next-line:strict-type-predicates */\n        if (typeof fn !== 'function') {\n            throw getMcSelectNonFunctionValueError();\n        }\n\n        this._compareWith = fn;\n\n        if (this.selectionModel) {\n            // A different comparator means the selection could change.\n            this.initializeSelection();\n        }\n    }\n\n    /** Value of the select control. */\n    @Input()\n    get value(): any {\n        return this._value;\n    }\n\n    set value(newValue: any) {\n        if (newValue !== this._value) {\n            this.writeValue(newValue);\n            this._value = newValue;\n        }\n    }\n\n    private _value: any;\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n        this.stateChanges.next();\n    }\n\n    private _id: string;\n\n    /** Whether the select is focused. */\n    get focused(): boolean {\n        return this._focused || this._panelOpen;\n    }\n\n    /**\n     * @deprecated Setter to be removed as this property is intended to be readonly.\n     * @breaking-change 8.0.0\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n\n    private _focused = false;\n\n    get panelOpen(): boolean {\n        return this._panelOpen;\n    }\n\n    private _panelOpen = false;\n\n    /** The scroll position of the overlay panel, calculated to center the selected option. */\n    private scrollTop = 0;\n\n    /** Unique id for this input. */\n    private readonly uid = `mc-select-${nextUniqueId++}`;\n\n    /** Emits whenever the component is destroyed. */\n    private readonly destroy = new Subject<void>();\n\n    constructor(\n        private readonly _viewportRuler: ViewportRuler,\n        private readonly _changeDetectorRef: ChangeDetectorRef,\n        private readonly _ngZone: NgZone,\n        private readonly _renderer: Renderer2,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        elementRef: ElementRef,\n        @Optional() private readonly _dir: Directionality,\n        @Optional() parentForm: NgForm,\n        @Optional() parentFormGroup: FormGroupDirective,\n        @Optional() private readonly _parentFormField: McFormField,\n        @Self() @Optional() public ngControl: NgControl,\n        @Attribute('tabindex') tabIndex: string,\n        @Inject(MC_SELECT_SCROLL_STRATEGY) private readonly _scrollStrategyFactory\n    ) {\n        super(elementRef, defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnInit() {\n        this.selectionModel = new SelectionModel<McOption>(this.multiple);\n        this.stateChanges.next();\n\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this.panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this.panelOpen) {\n                    this.scrollTop = 0;\n                    this.openedChange.emit(true);\n                } else {\n                    this.openedChange.emit(false);\n                    this.panelDoneAnimating = false;\n                    this.overlayDir.offsetX = 0;\n                    this._changeDetectorRef.markForCheck();\n                }\n            });\n    }\n\n    ngAfterContentInit() {\n        this.initKeyManager();\n\n        this.selectionModel.changed\n            .pipe(takeUntil(this.destroy))\n            .subscribe((event) => {\n                event.added.forEach((option) => option.select());\n                event.removed.forEach((option) => option.deselect());\n            });\n\n        this.options.changes\n            .pipe(startWith(null), takeUntil(this.destroy))\n            .subscribe(() => {\n                this.resetOptions();\n                this.initializeSelection();\n            });\n    }\n\n    ngAfterViewInit(): void {\n        this.tags.changes\n            .subscribe(() => {\n                setTimeout(() => this.calculateHiddenItems(), 0);\n            });\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) { this.updateErrorState(); }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes.disabled) {\n            this.stateChanges.next();\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroy.next();\n        this.destroy.complete();\n        this.stateChanges.complete();\n    }\n\n    /** `View -> model callback called when value changes` */\n    onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when select has been touched` */\n    onTouched = () => {};\n\n    resetSearch(): void {\n        if (this.search) {\n            this.search.reset();\n        }\n    }\n\n    /** Toggles the overlay panel open or closed. */\n    toggle(): void {\n        if (this.panelOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    /** Opens the overlay panel. */\n    open(): void {\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) { return; }\n\n        this.triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this.triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n        this._panelOpen = true;\n        this.keyManager.withHorizontalOrientation(null);\n        this.calculateOverlayPosition();\n        this.highlightCorrectOption();\n        this._changeDetectorRef.markForCheck();\n\n        // Set the font size on the panel element once it exists.\n        this._ngZone.onStable.asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                if (this.triggerFontSize && this.overlayDir.overlayRef && this.overlayDir.overlayRef.overlayElement) {\n                    this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this.triggerFontSize}px`;\n                }\n            });\n\n        this.resetSearch();\n    }\n\n    /** Closes the overlay panel and focuses the host element. */\n    close(): void {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this.keyManager.withHorizontalOrientation(this.isRtl() ? 'rtl' : 'ltr');\n\n            this._changeDetectorRef.markForCheck();\n            this.onTouched();\n        }\n    }\n\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value: any): void {\n        if (this.options) {\n            this.setSelectionByValue(value);\n        }\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn: (value: any) => void): void {\n        this.onChange = fn;\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn: () => {}): void {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    get selected(): McOption | McOption[] {\n        return this.multiple ? this.selectionModel.selected : this.selectionModel.selected[0];\n    }\n\n    get triggerValue(): string {\n        if (this.empty) { return ''; }\n\n        if (this._multiple) {\n            const selectedOptions = this.selectionModel.selected.map((option) => option.viewValue);\n\n            if (this.isRtl()) { selectedOptions.reverse(); }\n\n            return selectedOptions.join(', ');\n        }\n\n        return this.selectionModel.selected[0].viewValue;\n    }\n\n    get triggerValues(): McOption[] {\n        if (this.empty) { return []; }\n\n        if (this._multiple) {\n            const selectedOptions = this.selectionModel.selected;\n\n            if (this.isRtl()) { selectedOptions.reverse(); }\n\n            return selectedOptions;\n        }\n\n        return [this.selectionModel.selected[0]];\n    }\n\n    get empty(): boolean {\n        return !this.selectionModel || this.selectionModel.isEmpty();\n    }\n\n    isRtl(): boolean {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n\n    handleKeydown(event: KeyboardEvent): void {\n        if (!this.disabled) {\n            if (this.panelOpen) {\n                this.handleOpenKeydown(event);\n            } else {\n                this.handleClosedKeydown(event);\n            }\n        }\n    }\n\n    /**\n     * When the panel content is done fading in, the panelDoneAnimating property is\n     * set so the proper class can be added to the panel.\n     */\n    onFadeInDone(): void {\n        this.panelDoneAnimating = this.panelOpen;\n        this._changeDetectorRef.markForCheck();\n\n        if (this.search && this._panelOpen) {\n            this.search.focus();\n        }\n    }\n\n    onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    onBlur() {\n        this._focused = false;\n\n        if (!this.disabled && !this.panelOpen) {\n            this.onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    onAttached(): void {\n        this.overlayDir.positionChange\n            .pipe(take(1))\n            .subscribe(() => {\n                this._changeDetectorRef.detectChanges();\n                this.calculateOverlayOffsetX();\n                this.optionsContainer.nativeElement.scrollTop = this.scrollTop;\n\n                this.updateScrollSize();\n            });\n    }\n\n    /** Returns the theme to be used on the panel. */\n    getPanelTheme(): string {\n        return this._parentFormField ? `mc-${this._parentFormField.color}` : '';\n    }\n\n    /** Focuses the select element. */\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    calculateOverlayScroll(selectedIndex: number, scrollBuffer: number, maxScroll: number): number {\n        const itemHeight = this.getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n\n        /* tslint:disable-next-line:no-magic-numbers */\n        const halfOptionHeight = itemHeight / 2;\n\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n\n    /** Invoked when an option is clicked. */\n    onRemoveMatcherItem(option: McOption, $event): void {\n        $event.stopPropagation();\n\n        option.deselect();\n    }\n\n    calculateHiddenItems(): void {\n        if (this.empty || !this.multiple) { return; }\n\n        let visibleItems: number = 0;\n        const totalItemsWidth = this.getTotalItemsWidthInMatcher();\n        let totalVisibleItemsWidth: number = 0;\n        const itemMargin: number = 4;\n\n        this.tags.forEach((tag) => {\n            if (tag.nativeElement.offsetTop < tag.nativeElement.offsetHeight) {\n                totalVisibleItemsWidth += tag.nativeElement.getBoundingClientRect().width + itemMargin;\n                visibleItems++;\n            }\n        });\n\n        this.hiddenItems = (this.selected as ArrayLike<McOption>).length - visibleItems;\n\n        if (this.hiddenItems) {\n            const itemsCounter = this.trigger.nativeElement.querySelector('.mc-select__match-hidden-text');\n            const matcherList = this.trigger.nativeElement.querySelector('.mc-select__match-list');\n\n            const itemsCounterShowed = itemsCounter.offsetTop < itemsCounter.offsetHeight;\n            // const itemsCounterWidth: number = itemsCounter.getBoundingClientRect().width;\n            const itemsCounterWidth: number = 86;\n\n            const matcherListWidth: number = matcherList.getBoundingClientRect().width;\n            const matcherWidth: number = matcherListWidth + itemsCounterWidth;\n\n            if (itemsCounterShowed && (totalItemsWidth < matcherWidth)) { this.hiddenItems = 0; }\n\n            if (\n                totalVisibleItemsWidth === matcherListWidth ||\n                (totalVisibleItemsWidth + itemsCounterWidth) < matcherListWidth\n            ) {\n                this._changeDetectorRef.markForCheck();\n\n                return ;\n            } else if (!itemsCounterShowed && (totalItemsWidth + itemsCounterWidth) > matcherWidth) {\n                this.hiddenItems++;\n            }\n        }\n\n        this._changeDetectorRef.markForCheck();\n    }\n\n    private getHeightOfOptionsContainer(): number {\n        return this.optionsContainer.nativeElement.getClientRects()[0].height;\n    }\n\n    private updateScrollSize(): void {\n        if (!this.options.first) { return; }\n\n        this.keyManager.withScrollSize(\n            Math.floor(this.getHeightOfOptionsContainer() / this.options.first.getHeight())\n        );\n    }\n\n    private getTotalItemsWidthInMatcher(): number {\n        const triggerClone = this.trigger.nativeElement.cloneNode(true);\n        triggerClone.querySelector('.mc-select__match-hidden-text').remove();\n\n        this._renderer.setStyle(triggerClone, 'position', 'absolute');\n        this._renderer.setStyle(triggerClone, 'visibility', 'hidden');\n        this._renderer.setStyle(triggerClone, 'top', '-100%');\n        this._renderer.setStyle(triggerClone, 'left', '0');\n\n        this._renderer.appendChild(this.trigger.nativeElement, triggerClone);\n\n        let totalItemsWidth: number = 0;\n        const itemMargin: number = 4;\n        triggerClone.querySelectorAll('mc-tag').forEach((item) => {\n            totalItemsWidth += item.getBoundingClientRect().width as number + itemMargin;\n        });\n\n        triggerClone.remove();\n\n        return totalItemsWidth;\n    }\n\n    /** Handles keyboard events while the select is closed. */\n    private handleClosedKeydown(event: KeyboardEvent): void {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n        // Open the select on ALT + arrow key to match the native <select>\n        if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        } else if (!this.multiple) {\n            this.keyManager.onKeydown(event);\n        }\n    }\n\n    /** Handles keyboard events when the selected is open. */\n    private handleOpenKeydown(event: KeyboardEvent): void {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const manager = this.keyManager;\n\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n        } else if (keyCode === HOME) {\n            event.preventDefault();\n\n            manager.setFirstItemActive();\n        } else if (keyCode === END) {\n            event.preventDefault();\n\n            manager.setLastItemActive();\n        } else if (keyCode === PAGE_UP) {\n            event.preventDefault();\n\n            manager.setPreviousPageItemActive();\n        } else if (keyCode === PAGE_DOWN) {\n            event.preventDefault();\n\n            manager.setNextPageItemActive();\n        } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n            event.preventDefault();\n            manager.activeItem.selectViaInteraction();\n        } else if (this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some((option) => !option.selected);\n            this.options.forEach((option) => {\n                if (hasDeselectedOptions && !option.disabled) {\n                    option.select();\n                } else {\n                    option.deselect();\n                }\n            });\n        } else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n\n            manager.onKeydown(event);\n\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem.selectViaInteraction();\n            }\n        }\n    }\n\n    private initializeSelection(): void {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this.setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n        });\n    }\n\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    private setSelectionByValue(value: any | any[]): void {\n        this.previousSelectionModelSelected = this.selectionModel.selected;\n\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw getMcSelectNonArrayValueError();\n            }\n\n            this.selectionModel.clear();\n            value.forEach((currentValue: any) => this.selectValue(currentValue));\n            this.sortValues();\n        } else {\n            this.selectionModel.clear();\n            const correspondingOption = this.selectValue(value);\n\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this.keyManager.setActiveItem(correspondingOption);\n            }\n        }\n\n        this._changeDetectorRef.markForCheck();\n    }\n\n    private getCorrespondOption(value: any): McOption | undefined {\n        return [\n            ...this.options.toArray(),\n            ...this.previousSelectionModelSelected\n        ].find((option: McOption) => {\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            } catch (error) {\n                if (isDevMode()) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n\n                return false;\n            }\n        });\n    }\n\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    private selectValue(value: any): McOption | undefined {\n        const correspondingOption = this.getCorrespondOption(value);\n\n        if (correspondingOption) {\n            this.selectionModel.select(correspondingOption);\n        }\n\n        return correspondingOption;\n    }\n\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    private initKeyManager() {\n        const typeAheadDebounce = 200;\n\n        this.keyManager = new ActiveDescendantKeyManager<McOption>(this.options)\n            .withTypeAhead(typeAheadDebounce, this.search ? -1 : 0)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this.isRtl() ? 'rtl' : 'ltr');\n\n        this.keyManager.tabOut\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            });\n\n        this.keyManager.change\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this._panelOpen && this.panel) {\n                    this.scrollActiveOptionIntoView();\n                } else if (!this._panelOpen && !this.multiple && this.keyManager.activeItem) {\n                    this.keyManager.activeItem.selectViaInteraction();\n                }\n            });\n    }\n\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    private resetOptions(): void {\n        const changedOrDestroyed = merge(this.options.changes, this.destroy);\n\n        this.optionSelectionChanges\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe((event) => {\n                this.onSelect(event.source, event.isUserInput);\n\n                if (this.search && this.search.isSearchChanged) {\n                    Promise.resolve().then(() => this.keyManager.setFirstItemActive());\n\n                    this.search.isSearchChanged = false;\n                }\n\n                if (event.isUserInput && !this.multiple && this._panelOpen) {\n                    this.close();\n                    this.focus();\n                }\n            });\n\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map((option) => option.stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n                this._changeDetectorRef.markForCheck();\n                this.stateChanges.next();\n            });\n\n        this.setOptionIds();\n    }\n\n    /** Invoked when an option is clicked. */\n    private onSelect(option: McOption, isUserInput: boolean): void {\n        const wasSelected = this.selectionModel.isSelected(option);\n\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this.selectionModel.clear();\n            this.propagateChanges(option.value);\n        } else {\n            if (option.selected) {\n                this.selectionModel.select(option);\n            } else {\n                this.selectionModel.deselect(option);\n            }\n\n            if (isUserInput) {\n                this.keyManager.setActiveItem(option);\n            }\n\n            if (this.multiple) {\n                this.sortValues();\n\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mc-option`.\n                    // If search is avaliable then we focus search again.\n                    if (this.search) {\n                        this.search.focus();\n                    } else {\n                        this.focus();\n                    }\n                }\n            }\n        }\n\n        if (wasSelected !== this.selectionModel.isSelected(option)) {\n            this.propagateChanges();\n        }\n\n        this.stateChanges.next();\n    }\n\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    private sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n\n            this.selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n\n    /** Emits change event to set the model value. */\n    private propagateChanges(fallbackValue?: any): void {\n        let valueToEmit: any = null;\n\n        if (this.multiple) {\n            valueToEmit = (this.selected as McOption[]).map((option) => option.value);\n        } else {\n            valueToEmit = this.selected ? (this.selected as McOption).value : fallbackValue;\n        }\n\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this.onChange(valueToEmit);\n        this.selectionChange.emit(new McSelectChange(this, valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /** Records option IDs to pass to the aria-owns property. */\n    private setOptionIds() {\n        this.optionIds = this.options.map((option) => option.id).join(' ');\n    }\n\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    private highlightCorrectOption(): void {\n        if (this.keyManager) {\n            if (this.empty) {\n                this.keyManager.setFirstItemActive();\n            } else {\n                this.keyManager.setActiveItem(this.selectionModel.selected[0]);\n            }\n        }\n    }\n\n    /** Scrolls the active option into view. */\n    private scrollActiveOptionIntoView(): void {\n        const activeOptionIndex = this.keyManager.activeItemIndex || 0;\n        const labelCount = countGroupLabelsBeforeOption(activeOptionIndex, this.options, this.optionGroups);\n\n        this.optionsContainer.nativeElement.scrollTop = getOptionScrollPosition(\n            activeOptionIndex + labelCount,\n            this.getItemHeight(),\n            this.optionsContainer.nativeElement.scrollTop,\n            SELECT_PANEL_MAX_HEIGHT\n        );\n    }\n\n    /** Gets the index of the provided option in the option list. */\n    private getOptionIndex(option: McOption): number | undefined {\n        /* tslint:disable-next-line */\n        return this.options.reduce((result: number, current: McOption, index: number) => {\n            /* tslint:disable-next-line:strict-type-predicates */\n            return result === undefined ? (option === current ? index : undefined) : result;\n        }, undefined);\n    }\n\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    private calculateOverlayPosition(): void {\n        const itemHeight = this.getItemHeight();\n        const items = this.getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n\n        // If no value is selected we open the popup to the first item.\n        let selectedOptionOffset =\n            this.empty ? 0 : this.getOptionIndex(this.selectionModel.selected[0])!;\n\n        selectedOptionOffset += countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        /* tslint:disable-next-line:no-magic-numbers */\n        const scrollBuffer = panelHeight / 2;\n        this.scrollTop = this.calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this.offsetY = this.calculateOverlayOffsetY();\n\n        this.checkOverlayWithinViewport(maxScroll);\n    }\n\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    private calculateOverlayOffsetX(): void {\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const isRtl = this.isRtl();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const paddingWidth = SELECT_PANEL_PADDING_X * 2;\n        let offsetX: number;\n\n        const selected = this.selectionModel.selected[0] || this.options.first;\n        offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n\n        // Invert the offset in LTR.\n        if (!isRtl) { offsetX *= -1; }\n\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        } else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    private calculateOverlayOffsetY(): number {\n        // const itemHeight = this.getItemHeight();\n        // const optionHeightAdjustment = (itemHeight - this.triggerRect.height) / 2;\n\n        // todo I'm not sure that we will use it\n        return 0;\n        // return Math.round(-optionHeightAdjustment);\n    }\n\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    private checkOverlayWithinViewport(maxScroll: number): void {\n        const itemHeight = this.getItemHeight();\n        const viewportSize = this._viewportRuler.getViewportSize();\n\n        const topSpaceAvailable = this.triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable =\n            viewportSize.height - this.triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n        const panelHeightTop = Math.abs(this.offsetY);\n        const totalPanelHeight =\n            Math.min(this.getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this.triggerRect.height;\n\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this.adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        } else if (panelHeightTop > topSpaceAvailable) {\n            this.adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        } else {\n            this.transformOrigin = this.getOriginBasedOnOption();\n        }\n    }\n\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    private adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this.scrollTop -= distanceBelowViewport;\n        this.offsetY -= distanceBelowViewport;\n        this.transformOrigin = this.getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this.scrollTop <= 0) {\n            this.scrollTop = 0;\n            this.offsetY = 0;\n            this.transformOrigin = `50% bottom 0px`;\n        }\n    }\n\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    private adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number, maxScroll: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this.scrollTop += distanceAboveViewport;\n        this.offsetY += distanceAboveViewport;\n        this.transformOrigin = this.getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this.scrollTop >= maxScroll) {\n            this.scrollTop = maxScroll;\n            this.offsetY = 0;\n            this.transformOrigin = `50% top 0px`;\n\n            return;\n        }\n    }\n\n    /** Sets the transform origin point based on the selected option. */\n    private getOriginBasedOnOption(): string {\n        const itemHeight = this.getItemHeight();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const optionHeightAdjustment = (itemHeight - this.triggerRect.height) / 2;\n        /* tslint:disable-next-line:no-magic-numbers */\n        const originY = Math.abs(this.offsetY) - optionHeightAdjustment + itemHeight / 2;\n\n        return `50% ${originY}px 0px`;\n    }\n\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    private getItemCount(): number {\n        return this.options.length + this.optionGroups.length;\n    }\n\n    /** Calculates the height of the select's options. */\n    private getItemHeight(): number {\n        // todo доделать\n        /* tslint:disable-next-line:no-magic-numbers */\n        return 32;\n        // return this.triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n}\n","export enum TimeParts {\n    hours,\n    minutes,\n    seconds\n}\n\nexport enum TimeFormats {\n    HHmmss = 'HH:mm:ss',\n    HHmm = 'HH:mm'\n}\n\nexport const TIMEFORMAT_PLACEHOLDERS: { [timeFormat: string]: string } = {\n    [TimeFormats.HHmmss]: '  :  :  ',\n    [TimeFormats.HHmm]: '  :  '\n};\n\nexport const DEFAULT_TIME_FORMAT: TimeFormats = TimeFormats.HHmm;\n\nexport const HOURS_MINUTES_SECONDS_REGEXP =\n    new RegExp(/^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]|[0-9]):([0-5][0-9]|[0-9])?$/);\nexport const HOURS_MINUTES_REGEXP = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]|[0-9])?$/;\nexport const HOURS_ONLY_REGEXP = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):?$/;\n\nexport const SECONDS_PER_MINUTE: number = 59;\nexport const MINUTES_PER_HOUR: number = 59;\nexport const HOURS_PER_DAY: number = 23;\n\n// TODO Move it to common CDK\nexport const ARROW_UP_KEYCODE: string = 'ArrowUp';\nexport const ARROW_DOWN_KEYCODE: string = 'ArrowDown';\nexport const ARROW_LEFT_KEYCODE: string = 'ArrowLeft';\nexport const ARROW_RIGHT_KEYCODE: string = 'ArrowRight';\n","import { Component, Directive, ElementRef, Input, OnChanges, OnInit, Optional, SimpleChanges } from '@angular/core';\n\nimport { McSidepanelRef } from './sidepanel-ref';\nimport { McSidepanelService } from './sidepanel.service';\n\n\n/**\n * Button that will close the current sidepanel.\n */\n@Directive({\n    selector: 'button[mc-sidepanel-close], button[mcSidepanelClose]',\n    host: {\n        '(click)': 'sidepanelRef.close(sidepanelResult)',\n        class: 'mc-sidepanel-close',\n        type: 'button'\n    }\n})\nexport class McSidepanelClose implements OnInit, OnChanges {\n    @Input('mc-sidepanel-close') sidepanelResult: any;\n\n    @Input('mcSidepanelClose') mcSidepanelClose: any;\n\n    constructor(\n        @Optional() public sidepanelRef: McSidepanelRef,\n        private elementRef: ElementRef<HTMLElement>,\n        private sidepanelService: McSidepanelService\n    ) {}\n\n    ngOnInit() {\n        if (!this.sidepanelRef) {\n            // When this directive is included in a sidepanel via TemplateRef (rather than being\n            // in a Component), the SidepanelRef isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the SidepanelRef by\n            // ID.\n            // This must occur in `onInit`, as the ID binding for the sidepanel container won't\n            // be resolved at constructor time. We use setTimeout by same reason.\n            setTimeout(() => {\n                this.sidepanelRef = getClosestSidepanel(this.elementRef, this.sidepanelService.openedSidepanels)!;\n            });\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const proxiedChange = changes.mcSidepanelClose || changes.sidepanelResult;\n\n        if (proxiedChange) {\n            this.sidepanelResult = proxiedChange.currentValue;\n        }\n    }\n}\n\n/**\n * Header of a sidepanel.\n */\n@Component({\n    selector: 'mc-sidepanel-header',\n    template: `\n        <div class=\"mc-sidepanel-title\">\n            <ng-content></ng-content>\n        </div>\n        <button *ngIf=\"closeable\" mc-sidepanel-close>\n            <span class=\"mc-sidepanel-close-x\">\n                <i mc-icon=\"mc-close-L_16\" class=\"mc-icon mc-icon_light\" color=\"second\"></i>\n            </span>\n        </button>\n    `,\n    host: {\n        class: 'mc-sidepanel-header'\n    }\n})\nexport class McSidepanelHeader {\n    @Input() closeable: boolean;\n}\n\n/**\n * Scrollable content container of a sidepanel.\n */\n@Directive({\n    selector: 'mc-sidepanel-body, [mc-sidepanel-body], mcSidepanelBody',\n    host: {\n        class: 'mc-sidepanel-body'\n    }\n})\nexport class McSidepanelBody {}\n\n/**\n * Footer of a sidepanel.\n */\n@Directive({\n    selector: 'mc-sidepanel-footer, [mc-sidepanel-footer], mcSidepanelFooter',\n    host: {\n        class: 'mc-sidepanel-footer'\n    }\n})\nexport class McSidepanelFooter {}\n\n/**\n * Actions block of a sidepanel footer.\n */\n@Directive({\n    selector: 'mc-sidepanel-actions, [mc-sidepanel-actions], mcSidepanelActions',\n    host: {\n        class: 'mc-sidepanel-actions'\n    }\n})\nexport class McSidepanelActions {}\n\n/**\n * Finds the closest McSidepanelRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a sidepanel.\n * @param openSidepanels References to the currently-open sidepanels.\n */\nfunction getClosestSidepanel(element: ElementRef<HTMLElement>, openSidepanels: McSidepanelRef[]) {\n    let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n    while (parent && !parent.classList.contains('mc-sidepanel-container')) {\n        parent = parent.parentElement;\n    }\n\n    return parent ? openSidepanels.find((sidepanel) => sidepanel.id === parent!.id) : null;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { PortalModule } from '@ptsecurity/cdk/portal';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McSidepanelContainerComponent } from './sidepanel-container.component';\nimport {\n    McSidepanelActions,\n    McSidepanelBody,\n    McSidepanelClose,\n    McSidepanelFooter,\n    McSidepanelHeader\n} from './sidepanel-directives';\nimport { McSidepanelService } from './sidepanel.service';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        PortalModule,\n        McCommonModule,\n        McIconModule\n    ],\n    providers: [McSidepanelService],\n    declarations: [\n        McSidepanelContainerComponent,\n        McSidepanelClose,\n        McSidepanelHeader,\n        McSidepanelBody,\n        McSidepanelFooter,\n        McSidepanelActions\n    ],\n    entryComponents: [McSidepanelContainerComponent],\n    exports: [\n        McSidepanelContainerComponent,\n        McSidepanelClose,\n        McSidepanelHeader,\n        McSidepanelBody,\n        McSidepanelFooter,\n        McSidepanelActions\n    ]\n})\nexport class McSidepanelModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    Input,\n    NgZone, OnDestroy,\n    OnInit,\n    Renderer2,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { coerceBooleanProperty, coerceCssPixelValue, coerceNumberProperty } from '@ptsecurity/cdk/coercion';\n\n\ninterface IArea {\n    area: McSplitterAreaDirective;\n    index: number;\n    order: number;\n    initialSize: number;\n}\n\ninterface IPoint {\n    x: number;\n    y: number;\n}\n\n\nconst enum AttributeProperty {\n    Disabled = 'disabled'\n}\n\nconst enum Cursor {\n    Default = 'default',\n    ResizeColumn = 'col-resize',\n    ResizeRow = 'row-resize'\n}\n\nconst enum StyleProperty {\n    Cursor = 'cursor',\n    Flex = 'flex',\n    FlexBasis = 'flex-basis',\n    FlexDirection = 'flex-direction',\n    Height = 'height',\n    MaxWidth = 'max-width',\n    MinHeight = 'min-height',\n    MinWidth = 'minWidth',\n    OffsetHeight = 'offsetHeight',\n    OffsetWidth = 'offsetWidth',\n    Order = 'order',\n    Width = 'width'\n}\n\nconst enum State {\n    Disabled = 'disabled',\n    Horizontal = 'horizontal',\n    Vertical = 'vertical'\n}\n\nexport const enum Direction {\n    Horizontal = 'horizontal',\n    Vertical = 'vertical'\n}\n\n@Component({\n    selector: 'mc-splitter',\n    preserveWhitespaces: false,\n    styleUrls: ['splitter.css'],\n    templateUrl: './splitter.component.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McSplitterComponent implements OnInit {\n    readonly areas: IArea[] = [];\n\n    private _direction: Direction;\n    private _disabled: boolean = false;\n    private _gutterSize: number = 6;\n\n    private isDragging: boolean = false;\n\n    private readonly areaPositionDivider: number = 2;\n    private readonly listeners: (() => void)[] = [];\n\n    @Input()\n    set direction(direction: Direction) {\n        this._direction = direction;\n    }\n\n    get direction(): Direction {\n        return this._direction;\n    }\n\n    @Input()\n    set disabled(disabled: boolean) {\n        this._disabled = coerceBooleanProperty(disabled);\n    }\n\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    @Input()\n    set gutterSize(gutterSize: number) {\n        const size = coerceNumberProperty(gutterSize);\n        this._gutterSize = size > 0 ? size : this.gutterSize;\n    }\n\n    get gutterSize(): number {\n        return this._gutterSize;\n    }\n\n    constructor(private elementRef: ElementRef,\n                private ngZone: NgZone,\n                private renderer: Renderer2) {}\n\n    addArea(area: McSplitterAreaDirective): void {\n        const index: number = this.areas.length;\n        const order: number = index * this.areaPositionDivider;\n        const size: number = area.getSize();\n\n        area.setOrder(order);\n\n        this.areas.push({\n            area,\n            index,\n            order,\n            initialSize: size\n        });\n    }\n\n    ngOnInit(): void {\n        if (!this.direction) {\n            this.direction = Direction.Horizontal;\n        }\n\n        this.setStyle(StyleProperty.FlexDirection, this.isVertical() ? 'column' : 'row');\n    }\n\n    onMouseDown(event: MouseEvent, leftAreaIndex: number, rightAreaIndex: number) {\n        if (this.disabled) {\n            return;\n        }\n\n        const leftArea = this.areas[leftAreaIndex];\n        const rightArea = this.areas[rightAreaIndex];\n\n        const startPoint: IPoint = {\n            x: event.screenX,\n            y: event.screenY\n        };\n\n        leftArea.initialSize = leftArea.area.getSize();\n        rightArea.initialSize = rightArea.area.getSize();\n\n        this.areas.forEach((item) => {\n            const size = item.area.getSize();\n            item.area.disableFlex();\n            item.area.setSize(size);\n        });\n\n        this.ngZone.runOutsideAngular(() => {\n            this.listeners.push(\n                this.renderer.listen(\n                    'document',\n                    'mouseup',\n                    () => this.onMouseUp()\n                )\n            );\n        });\n\n        this.ngZone.runOutsideAngular(() => {\n            this.listeners.push(\n                this.renderer.listen(\n                    'document',\n                    'mousemove',\n                    (e: MouseEvent) => this.onMouseMove(e, startPoint, leftArea, rightArea)\n                )\n            );\n        });\n\n        this.isDragging = true;\n    }\n\n    removeArea(area: McSplitterAreaDirective): void {\n        let indexToRemove: number = -1;\n\n        this.areas.some((item, index) => {\n            if (item.area === area) {\n                indexToRemove = index;\n\n                return true;\n            }\n\n            return false;\n        });\n\n        if (indexToRemove === -1) {\n            return;\n        }\n\n        this.areas.splice(indexToRemove, 1);\n    }\n\n    private isVertical(): boolean {\n        return this.direction === Direction.Vertical;\n    }\n\n    private onMouseMove(event: MouseEvent, startPoint: IPoint, leftArea: IArea, rightArea: IArea) {\n        if (!this.isDragging || this.disabled) {\n            return;\n        }\n\n        const endPoint: IPoint = {\n            x: event.screenX,\n            y: event.screenY\n        };\n\n        const offset = this.isVertical()\n            ? startPoint.y - endPoint.y\n            : startPoint.x - endPoint.x;\n\n        const newLeftAreaSize = leftArea.initialSize - offset;\n        const newRightAreaSize = rightArea.initialSize + offset;\n\n        const minLeftAreaSize = leftArea.area.getMinSize();\n        const minRightAreaSize = rightArea.area.getMinSize();\n\n        if (newLeftAreaSize <= minLeftAreaSize || newRightAreaSize <= minRightAreaSize) {\n            const rightAreaOffset = leftArea.initialSize - minLeftAreaSize;\n\n            leftArea.area.setSize(minLeftAreaSize);\n            rightArea.area.setSize(rightArea.initialSize + rightAreaOffset);\n        } else if (newLeftAreaSize <= 0) {\n            leftArea.area.setSize(0);\n            rightArea.area.setSize(rightArea.initialSize + leftArea.initialSize);\n        } else if (newRightAreaSize <= 0) {\n            leftArea.area.setSize(rightArea.initialSize + leftArea.initialSize);\n            rightArea.area.setSize(0);\n        } else {\n            leftArea.area.setSize(newLeftAreaSize);\n            rightArea.area.setSize(newRightAreaSize);\n        }\n    }\n\n    private onMouseUp() {\n        while (this.listeners.length > 0) {\n            const unsubscribe = this.listeners.pop();\n\n            if (unsubscribe) {\n                unsubscribe();\n            }\n        }\n\n        this.isDragging = false;\n    }\n\n    private setStyle(property: StyleProperty, value: string | number) {\n        this.renderer.setStyle(this.elementRef.nativeElement, property, value);\n    }\n}\n\n@Directive({\n    selector: 'mc-gutter'\n})\nexport class McGutterDirective implements OnInit {\n    private _direction: Direction = Direction.Vertical;\n    private _disabled: boolean = false;\n    private _order: number = 0;\n    private _size: number = 6;\n\n    @Input()\n    set direction(direction: Direction) {\n        this._direction = direction;\n    }\n\n    get direction(): Direction {\n        return this._direction;\n    }\n\n    @Input()\n    set disabled(disabled: boolean) {\n        this._disabled = coerceBooleanProperty(disabled);\n    }\n\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    @Input()\n    set order(order: number) {\n        this._order = coerceNumberProperty(order);\n    }\n\n    get order(): number {\n        return this._order;\n    }\n\n    @Input()\n    set size(size: number) {\n        this._size = coerceNumberProperty(size);\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    constructor(private renderer: Renderer2,\n                private elementRef: ElementRef) {\n    }\n\n    ngOnInit(): void {\n        this.setStyle(StyleProperty.Cursor, this.getCursor(this.getState()));\n        this.setStyle(StyleProperty.FlexBasis, coerceCssPixelValue(this.size));\n        this.setStyle(this.isVertical() ? StyleProperty.Height : StyleProperty.Width, coerceCssPixelValue(this.size));\n        this.setStyle(StyleProperty.Order, this.order);\n\n        if (!this.isVertical()) {\n            this.setStyle(StyleProperty.Height, '100%');\n        }\n\n        if (this.disabled) {\n            this.setAttr(AttributeProperty.Disabled, 'true');\n        }\n\n        // fix IE issue with gutter icon. flex-direction is requied for flex alignment options\n        this.setStyle(StyleProperty.FlexDirection, this.isVertical() ? 'row' : 'column');\n    }\n\n    private isVertical(): boolean {\n        return this.direction === Direction.Vertical;\n    }\n\n    private getCursor(state: State): string {\n        switch (state) {\n            case State.Disabled:\n                return Cursor.Default;\n            case State.Vertical:\n                return  Cursor.ResizeRow;\n            case State.Horizontal:\n                return Cursor.ResizeColumn;\n            default:\n                throw Error(`Unknown gutter state for cursor: ${state}`);\n        }\n    }\n\n    private getState(): State {\n        return this.disabled\n            ? State.Disabled\n            : this.direction === Direction.Vertical\n                ? State.Vertical\n                : State.Horizontal;\n    }\n\n    private setStyle(property: StyleProperty, value: string | number) {\n        this.renderer.setStyle(this.elementRef.nativeElement, property, value);\n    }\n\n    private setAttr(attribute: AttributeProperty, value: string) {\n        this.renderer.setAttribute(this.elementRef.nativeElement, attribute, value);\n    }\n}\n\n@Directive({\n    selector: 'mc-splitter-area'\n})\nexport class McSplitterAreaDirective implements OnInit, OnDestroy {\n    constructor(private elementRef: ElementRef,\n                private renderer: Renderer2,\n                private splitter: McSplitterComponent) {}\n\n    disableFlex(): void {\n        this.renderer.removeStyle(this.elementRef.nativeElement, 'flex');\n    }\n\n    ngOnInit(): void {\n        this.splitter.addArea(this);\n\n        this.removeStyle(StyleProperty.MaxWidth);\n        this.setStyle(StyleProperty.Flex, '1');\n\n        if (this.splitter.direction === Direction.Vertical) {\n            this.setStyle(StyleProperty.Width, '100%');\n            this.removeStyle(StyleProperty.Height);\n        } else {\n            this.setStyle(StyleProperty.Height, '100%');\n            this.removeStyle(StyleProperty.Width);\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.splitter.removeArea(this);\n    }\n\n    setOrder(order: number): void {\n        this.setStyle(StyleProperty.Order, order);\n    }\n\n    setSize(size: number): void {\n        const sz = coerceNumberProperty(size);\n        this.setStyle(this.getSizeProperty(), coerceCssPixelValue(sz));\n    }\n\n    getSize(): number {\n        return this.elementRef.nativeElement[this.getOffsetSizeProperty()];\n    }\n\n    getMinSize(): number {\n        const styles = getComputedStyle(this.elementRef.nativeElement);\n\n        return parseFloat(styles[this.getMinSizeProperty()]);\n    }\n\n    private isVertical(): boolean {\n        return this.splitter.direction === Direction.Vertical;\n    }\n\n    private getMinSizeProperty(): StyleProperty {\n        return this.isVertical()\n            ? StyleProperty.MinHeight\n            : StyleProperty.MinWidth;\n    }\n\n    private getOffsetSizeProperty(): StyleProperty {\n        return this.isVertical()\n            ? StyleProperty.OffsetHeight\n            : StyleProperty.OffsetWidth;\n    }\n\n    private getSizeProperty(): StyleProperty {\n        return this.isVertical()\n            ? StyleProperty.Height\n            : StyleProperty.Width;\n    }\n\n    private setStyle(style: StyleProperty, value: string | number) {\n        this.renderer.setStyle(this.elementRef.nativeElement, style, value);\n    }\n\n    private removeStyle(style: StyleProperty) {\n        this.renderer.removeStyle(this.elementRef.nativeElement, style);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McGutterDirective, McSplitterAreaDirective, McSplitterComponent } from './splitter.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        McIconModule\n    ],\n    exports: [\n        McGutterDirective,\n        McSplitterAreaDirective,\n        McSplitterComponent\n    ],\n    declarations: [\n        McGutterDirective,\n        McSplitterAreaDirective,\n        McSplitterComponent\n    ]\n})\nexport class McSplitterModule {\n}\n","import { animate, state, style, transition, trigger } from '@angular/animations';\nimport {\n    Attribute,\n    ChangeDetectionStrategy, ChangeDetectorRef,\n    Component,\n    ElementRef, EventEmitter, forwardRef,\n    Input, Output, ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport {\n    ThemePalette,\n    CanColor, CanColorCtor,\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex\n} from '@ptsecurity/mosaic/core';\n\n\nlet nextUniqueId = 0;\n\ntype ToggleLabelPositionType = 'left' | 'right';\n\nexport class McToggleBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McToggleMixinBase:\n    HasTabIndexCtor &\n    CanDisableCtor &\n    CanColorCtor &\n    typeof McToggleBase = mixinTabIndex(mixinColor(mixinDisabled(McToggleBase), ThemePalette.Primary));\n\nexport class McToggleChange {\n    source: McToggleComponent;\n    checked: boolean;\n}\n\n@Component({\n    selector: 'mc-toggle',\n    exportAs: 'mcToggle',\n    templateUrl: './toggle.component.html',\n    styleUrls: ['./toggle.css'],\n    providers: [\n        {provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => McToggleComponent), multi: true}\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color', 'tabIndex'],\n    host: {\n        class: 'mc-toggle',\n        '[id]': 'id',\n        '[attr.id]': 'id',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-toggle_off]': '!checked'\n    },\n    animations: [\n        trigger('switch', [\n            state('true' , style({ left: '50%' })),\n            state('false', style({ left: '1px' })),\n            transition('true <=> false', animate('150ms'))\n        ])\n    ]\n})\nexport class McToggleComponent extends _McToggleMixinBase\n    implements ControlValueAccessor, CanColor, CanDisable, HasTabIndex {\n\n    @ViewChild('input') _inputElement: ElementRef;\n\n    @Input() labelPosition: ToggleLabelPositionType = 'right';\n\n    @Input('aria-label') ariaLabel: string = '';\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n    private _uniqueId: string = `mc-toggle-${++nextUniqueId}`;\n\n    // tslint:disable:member-ordering\n    @Input() id: string = this._uniqueId;\n\n    get inputId(): string {\n        return `${this.id || this._uniqueId}-input`;\n    }\n\n    @Input() name: string | null = null;\n\n    @Input() value: string;\n\n    private _disabled: boolean = false;\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value !== this._disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _checked: boolean = false;\n\n    get checked() {\n        return this._checked;\n    }\n\n    @Input()\n    set checked(value: boolean) {\n        if (value !== this._checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    @Output() readonly change: EventEmitter<McToggleChange> =\n        new EventEmitter<McToggleChange>();\n\n    constructor(public _elementRef: ElementRef,\n                private _focusMonitor: FocusMonitor,\n                private _changeDetectorRef: ChangeDetectorRef,\n                @Attribute('tabindex') tabIndex: string\n    ) {\n        super(_elementRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n    }\n\n    _getAriaChecked(): boolean {\n        return this.checked;\n    }\n\n    _onInteractionEvent(event: Event) {\n        event.stopPropagation();\n    }\n\n    _onLabelTextChange() {\n        this._changeDetectorRef.markForCheck();\n    }\n\n    _onInputClick(event: MouseEvent) {\n        event.stopPropagation();\n        this._updateModelValue();\n        this._emitChangeEvent();\n    }\n\n    writeValue(value: any) {\n        this.checked = !!value;\n    }\n\n    registerOnChange(fn: any) {\n        this._onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: any) {\n        this._onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n    }\n\n    // tslint:disable-next-line:no-empty\n    private _onTouchedCallback = () => {};\n\n    // tslint:disable-next-line:no-empty\n    private _onChangeCallback = (_: any) => {};\n\n    private _updateModelValue() {\n        this._checked = !this.checked;\n        this._onChangeCallback(this.checked);\n        this._onTouchedCallback();\n    }\n\n    private _emitChangeEvent() {\n        const event = new McToggleChange();\n        event.source = this;\n        event.checked = this.checked;\n\n        this._onChangeCallback(this.checked);\n        this.change.emit(event);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McToggleComponent } from './toggle.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule],\n    exports: [McToggleComponent],\n    declarations: [McToggleComponent]\n})\nexport class McToggleModule {\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    TemplateRef,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport {\n    ConnectedOverlayPositionChange,\n    ConnectionPositionPair,\n    Overlay,\n    OverlayRef,\n    ScrollDispatcher,\n    IScrollStrategy,\n    FlexibleConnectedPositionStrategy,\n    IOverlayConnectionPosition,\n    IOriginConnectionPosition,\n    HorizontalConnectionPos,\n    VerticalConnectionPos\n} from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal } from '@ptsecurity/cdk/portal';\nimport {\n    fadeAnimation,\n    DEFAULT_4_POSITIONS,\n    POSITION_MAP\n} from '@ptsecurity/mosaic/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators';\n\n\n@Component({\n    selector: 'mc-tooltip-component',\n    inputs: [\n        'mcMouseEnterDelay',\n        'mcMouseLeaveDelay',\n        'mcTitle',\n        'mcVisible',\n        'mcTrigger',\n        'mcPlacement'\n    ],\n    outputs: ['mcVisibleChange'],\n    animations: [ fadeAnimation ],\n    templateUrl: './tooltip.component.html',\n    preserveWhitespaces: false,\n    styleUrls: ['./tooltip.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '(body:click)': 'this.handleBodyInteraction()'\n    }\n})\nexport class McTooltipComponent {\n    prefix = 'mc-tooltip_placement';\n    positions: ConnectionPositionPair[] = [ ...DEFAULT_4_POSITIONS ];\n    classMap = {};\n    isTitleString: boolean;\n    showTid: number;\n    hideTid: number;\n    availablePositions: any;\n    $visible: Observable<boolean>;\n\n    @Output() mcVisibleChange: EventEmitter<boolean> = new EventEmitter();\n\n    @Input() mcMouseEnterDelay = 400;\n\n    @Input() mcMouseLeaveDelay = 0;\n\n    @Input()\n    get mcTitle(): string | TemplateRef<void> {\n        return this._mcTitle;\n    }\n    set mcTitle(value: string | TemplateRef<void>) {\n        this.isTitleString = !(value instanceof TemplateRef);\n\n        if (this.isTitleString) {\n            this._mcTitle = value;\n        }\n    }\n    private _mcTitle: string | TemplateRef<void>;\n\n    @Input()\n    get mcTrigger(): string {\n        return this._mcTrigger;\n    }\n    set mcTrigger(value: string) {\n        this._mcTrigger = value;\n    }\n    private _mcTrigger: string = 'hover';\n\n    @Input()\n    get mcPlacement(): string {\n        return this._mcPlacement;\n    }\n    set mcPlacement(value: string) {\n        if (value !== this._mcPlacement) {\n            this._mcPlacement = value;\n            this.positions.unshift(POSITION_MAP[ this.mcPlacement ]);\n        } else if (!value) {\n            this._mcPlacement = 'top';\n        }\n    }\n    private _mcPlacement: string = 'top';\n\n    @Input()\n    get mcVisible(): boolean {\n        return this._mcVisible.value;\n    }\n    set mcVisible(value: boolean) {\n        const visible = coerceBooleanProperty(value);\n\n        if (this._mcVisible.value !== visible) {\n            this._mcVisible.next(visible);\n            this.mcVisibleChange.emit(visible);\n        }\n    }\n    private _mcVisible: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n    /** Subject for notifying that the tooltip has been hidden from the view */\n    private readonly onHideSubject: Subject<any> = new Subject();\n    private closeOnInteraction: boolean = false;\n\n    constructor(public cdr: ChangeDetectorRef) {\n        this.availablePositions = POSITION_MAP;\n        this.$visible = this._mcVisible.asObservable();\n    }\n\n    show(): void {\n        if (this.hideTid) {\n            clearTimeout(this.hideTid);\n        }\n\n        if (!this.isContentEmpty()) {\n            if (this.mcTrigger !== 'manual') {\n                this.closeOnInteraction = true;\n            }\n            this.showTid = setTimeout(() => {\n                this.mcVisible = true;\n                this.mcVisibleChange.emit(true);\n\n                // Mark for check so if any parent component has set the\n                // ChangeDetectionStrategy to OnPush it will be checked anyways\n                this.markForCheck();\n            }, this.mcMouseEnterDelay);\n        }\n    }\n\n    hide(): void {\n        if (this.showTid) {\n            clearTimeout(this.showTid);\n        }\n\n        this.hideTid = setTimeout(() => {\n            this.mcVisible = false;\n            this.mcVisibleChange.emit(false);\n            this.onHideSubject.next();\n\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this.markForCheck();\n        }, this.mcMouseLeaveDelay);\n    }\n\n    setClassMap(): void {\n        this.classMap = `${this.prefix}-${this.mcPlacement}`;\n    }\n\n    isContentEmpty(): boolean {\n        return this.isTitleString ? (this.mcTitle === '' || !this.mcTitle) : false;\n    }\n\n    /** Returns an observable that notifies when the tooltip has been hidden from view. */\n    afterHidden(): Observable<void> {\n        return this.onHideSubject.asObservable();\n    }\n\n    markForCheck(): void {\n        this.cdr.markForCheck();\n    }\n\n    handleBodyInteraction(): void {\n        if (this.closeOnInteraction) {\n            this.hide();\n        }\n    }\n}\n\nexport const MC_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function mcTooltipScrollStrategyFactory(overlay: Overlay): () => IScrollStrategy {\n    return () => overlay.scrollStrategies.reposition({scrollThrottle: 20});\n}\n\n/** @docs-private */\nexport const MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_TOOLTIP_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: mcTooltipScrollStrategyFactory\n};\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMcTooltipInvalidPositionError(position: string) {\n    return Error(`McTooltip position \"${position}\" is invalid.`);\n}\n\nconst VIEWPORT_MARGIN: number = 8;\n\n@Directive({\n    selector: '[mcTooltip], [attribute^=\"mcTooltip\"]',\n    exportAs: 'mcTooltip',\n    host: {\n        '(keydown)': 'handleKeydown($event)',\n        '(touchend)': 'handleTouchend()'\n    }\n})\nexport class McTooltip implements OnInit, OnDestroy {\n    isTooltipOpen: boolean = false;\n    isDynamicTooltip = false;\n    parentDisabled: boolean = false;\n    overlayRef: OverlayRef | null;\n    portal: ComponentPortal<McTooltipComponent>;\n    availablePositions: any;\n    tooltip: McTooltipComponent | null;\n\n    @Output() mcVisibleChange = new EventEmitter<boolean>();\n    private $unsubscribe = new Subject<void>();\n\n    @Input('mcTooltip')\n    get mcTitle(): string {\n        return this._mcTitle;\n    }\n    set mcTitle(title: string) {\n        this._mcTitle = title;\n        this.updateCompValue('mcTitle', title);\n    }\n    private _mcTitle: string;\n\n    @Input('mcTitle')\n    set setTitle(title: string) {\n        this.mcTitle = title;\n    }\n\n    @Input('mcTooltipDisabled')\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this.updateCompValue('mcTooltipDisabled', value);\n    }\n    private _disabled: boolean = false;\n\n    @Input('mcMouseEnterDelay')\n    get mcMouseEnterDelay(): number {\n        return this._mcMouseEnterDelay;\n    }\n    set mcMouseEnterDelay(value: number) {\n        this._mcMouseEnterDelay = value;\n        this.updateCompValue('mcMouseEnterDelay', value);\n    }\n    private _mcMouseEnterDelay: number;\n\n    @Input('mcMouseLeaveDelay')\n    get mcMouseLeaveDelay(): number {\n        return this._mcMouseLeaveDelay;\n    }\n    set mcMouseLeaveDelay(value: number) {\n        this._mcMouseLeaveDelay = value;\n        this.updateCompValue('mcMouseLeaveDelay', value);\n    }\n    private _mcMouseLeaveDelay: number;\n\n    @Input('mcTrigger')\n    get mcTrigger(): string {\n        return this._mcTrigger;\n    }\n    set mcTrigger(value: string) {\n        if (value) {\n            this._mcTrigger = value;\n            this.updateCompValue('mcTrigger', value);\n        } else {\n            this._mcTrigger = 'hover';\n        }\n    }\n    private _mcTrigger: string = 'hover';\n\n    @Input('mcPlacement')\n    get mcPlacement(): string {\n        return this._mcPlacement;\n    }\n    set mcPlacement(value: string) {\n        if (value) {\n            this._mcPlacement = value;\n            this.updateCompValue('mcPlacement', value);\n        } else {\n            this._mcPlacement = 'top';\n        }\n    }\n    private _mcPlacement: string = 'top';\n\n    @Input('mcTooltipClass')\n    get mcTooltipClass() { return this._mcTooltipClass; }\n    set mсTooltipClass(value: string | string[] | Set<string> | {[key: string]: any}) {\n        this._mcTooltipClass = value;\n\n        if (this.tooltip) {\n            this.tooltip.setClassMap();\n        }\n    }\n    private _mcTooltipClass: string | string[] | Set<string> | {[key: string]: any};\n\n    @Input('mcVisible')\n    get mcVisible(): boolean {\n        return this._mcVisible;\n    }\n    set mcVisible(externalValue: boolean) {\n        const value = coerceBooleanProperty(externalValue);\n        this._mcVisible = value;\n        this.updateCompValue('mcVisible', value);\n\n        if (value) {\n            this.show();\n        } else {\n            this.hide();\n        }\n    }\n    private _mcVisible: boolean;\n\n    @HostBinding('class.mc-tooltip-open')\n    get isOpen(): boolean {\n        return this.isTooltipOpen;\n    }\n\n    @HostBinding('class.disabled')\n    get isParentDisabled(): boolean {\n        return this.parentDisabled;\n    }\n\n    private manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n    private readonly destroyed = new Subject<void>();\n\n    constructor(\n        private overlay: Overlay,\n        private elementRef: ElementRef,\n        private ngZone: NgZone,\n        private scrollDispatcher: ScrollDispatcher,\n        private hostView: ViewContainerRef,\n        @Inject(MC_TOOLTIP_SCROLL_STRATEGY) private scrollStrategy,\n        @Optional() private direction: Directionality) {\n            this.availablePositions = POSITION_MAP;\n        }\n\n    /** Create the overlay config and position strategy */\n    createOverlay(): OverlayRef {\n        if (this.overlayRef) {\n            return this.overlayRef;\n        }\n\n        // Create connected position strategy that listens for scroll events to reposition.\n        const strategy = this.overlay.position()\n            .flexibleConnectedTo(this.elementRef)\n            .withTransformOriginOn('.mc-tooltip')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(VIEWPORT_MARGIN)\n            .withPositions([ ...DEFAULT_4_POSITIONS ]);\n\n        const scrollableAncestors = this.scrollDispatcher\n            .getAncestorScrollContainers(this.elementRef);\n\n        strategy.withScrollableContainers(scrollableAncestors);\n\n        strategy.positionChanges.pipe(takeUntil(this.destroyed)).subscribe((change) => {\n            if (this.tooltip) {\n                this.onPositionChange(change);\n                if (change.scrollableViewProperties.isOverlayClipped && this.tooltip.mcVisible) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the tooltip.\n                    this.ngZone.run(() => this.hide());\n                }\n            }\n        });\n\n        this.overlayRef = this.overlay.create({\n            direction: this.direction,\n            positionStrategy: strategy,\n            panelClass: 'mc-tooltip-panel',\n            scrollStrategy: this.scrollStrategy()\n        });\n\n        this.updatePosition();\n\n        this.overlayRef.detachments()\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(() => this.detach());\n\n        return this.overlayRef;\n    }\n\n    detach() {\n        if (this.overlayRef && this.overlayRef.hasAttached()) {\n            this.overlayRef.detach();\n        }\n\n        this.tooltip = null;\n    }\n\n    onPositionChange($event: ConnectedOverlayPositionChange): void {\n        let updatedPlacement = this.mcPlacement;\n        Object.keys(this.availablePositions).some((key) => {\n            if ($event.connectionPair.originX === this.availablePositions[key].originX &&\n                $event.connectionPair.originY === this.availablePositions[key].originY &&\n                $event.connectionPair.overlayX === this.availablePositions[key].overlayX &&\n                $event.connectionPair.overlayY === this.availablePositions[key].overlayY) {\n                updatedPlacement = key;\n\n                return true;\n            }\n\n            return false;\n        });\n        this.updateCompValue('mcPlacement', updatedPlacement);\n\n        if (this.tooltip) {\n            this.tooltip.setClassMap();\n            this.tooltip.markForCheck();\n        }\n\n        this.handlePositioningUpdate();\n    }\n\n    handlePositioningUpdate() {\n        if (!this.overlayRef) {\n            this.overlayRef = this.createOverlay();\n        }\n        if (this.mcPlacement === 'right' || this.mcPlacement === 'left') {\n            const pos =\n                (this.overlayRef.overlayElement.clientHeight -\n                    this.hostView.element.nativeElement.clientHeight) / 2; // tslint:disable-line\n            const currentContainer = this.overlayRef.overlayElement.style.top || '0px';\n            this.overlayRef.overlayElement.style.top =\n                `${parseInt(currentContainer.split('px')[0], 10) + pos - 1}px`;\n            // TODO: обновлять положение стрелки\\указателя\\\"дятла\"\n        }\n    }\n\n    // tslint:disable-next-line:no-any\n    updateCompValue(key: string, value: any): void {\n        if (this.isDynamicTooltip && value) {\n            if (this.tooltip) {\n                this.tooltip[key] = value;\n            }\n        }\n    }\n\n    ngOnInit(): void {\n        this.initElementRefListeners();\n    }\n\n    ngOnDestroy(): void {\n        if (this.overlayRef) {\n            this.overlayRef.dispose();\n        }\n        this.manualListeners.forEach((listener, event) =>\n            this.elementRef.nativeElement.removeEventListener(event, listener));\n        this.manualListeners.clear();\n\n        this.$unsubscribe.next();\n        this.$unsubscribe.complete();\n    }\n\n    handleKeydown(e: KeyboardEvent) {\n        if (this.isTooltipOpen && e.keyCode === ESCAPE) { // tslint:disable-line\n            this.hide();\n        }\n    }\n\n    handleTouchend() {\n        this.hide();\n    }\n\n    initElementRefListeners() {\n        if (this.mcTrigger === 'hover') {\n\n            this.manualListeners\n                .set('mouseenter', () => this.show())\n                .set('mouseleave', () => this.hide())\n                .forEach((listener, event) => this.elementRef.nativeElement.addEventListener(event, listener));\n        }\n\n        if (this.mcTrigger === 'focus') {\n\n            this.manualListeners\n                .set('focus', () => this.show())\n                .set('blur', () => this.hide())\n                .forEach((listener, event) => this.elementRef.nativeElement.addEventListener(event, listener));\n        }\n    }\n\n    show(): void {\n        if (!this.disabled) {\n            if (!this.tooltip) {\n                const overlayRef = this.createOverlay();\n                this.detach();\n\n                this.portal = this.portal || new ComponentPortal(McTooltipComponent, this.hostView);\n\n                this.tooltip = overlayRef.attach(this.portal).instance;\n                this.tooltip.afterHidden()\n                    .pipe(takeUntil(this.destroyed))\n                    .subscribe(() => this.detach());\n                this.isDynamicTooltip = true;\n                const properties = [\n                    'mcTitle',\n                    'mcPlacement',\n                    'mcTrigger',\n                    'mcTooltipDisabled',\n                    'mcMouseEnterDelay',\n                    'mcMouseLeaveDelay',\n                    'mсTooltipClass',\n                    'mcVisible'\n                ];\n                properties.forEach((property) => this.updateCompValue(property, this[ property ]));\n                this.tooltip.mcVisibleChange.pipe(takeUntil(this.$unsubscribe), distinctUntilChanged())\n                    .subscribe((data) => {\n                        this.mcVisible = data;\n                        this.mcVisibleChange.emit(data);\n                        this.isTooltipOpen = data;\n                    });\n            }\n            this.updatePosition();\n            this.tooltip.show();\n        }\n    }\n\n    hide(): void {\n        if (this.tooltip) {\n            this.tooltip.hide();\n        }\n    }\n\n    /** Updates the position of the current tooltip. */\n    updatePosition() {\n        if (!this.overlayRef) {\n            this.overlayRef = this.createOverlay();\n        }\n        const position =\n            this.overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n        const origin = this.getOrigin();\n        const overlay = this.getOverlayPosition();\n\n        position.withPositions([\n            {...origin.main, ...overlay.main},\n            {...origin.fallback, ...overlay.fallback}\n        ]);\n    }\n\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    getOrigin(): {main: IOriginConnectionPosition; fallback: IOriginConnectionPosition} {\n        const position = this.mcPlacement;\n        const isLtr = !this.direction || this.direction.value === 'ltr';\n        let originPosition: IOriginConnectionPosition;\n\n        if (position === 'top' || position === 'bottom') {\n            originPosition = {originX: 'center', originY: position === 'top' ? 'top' : 'bottom'};\n        } else if (\n            position === 'top' ||\n            (position === 'left' && isLtr) ||\n            (position === 'right' && !isLtr)) {\n            originPosition = {originX: 'start', originY: 'center'};\n        } else if (\n            position === 'bottom' ||\n            (position === 'right' && isLtr) ||\n            (position === 'left' && !isLtr)) {\n            originPosition = {originX: 'end', originY: 'center'};\n        } else {\n            throw getMcTooltipInvalidPositionError(position);\n        }\n\n        const {x, y} = this.invertPosition(originPosition.originX, originPosition.originY);\n\n        return {\n            main: originPosition,\n            fallback: {originX: x, originY: y}\n        };\n    }\n\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    getOverlayPosition(): {main: IOverlayConnectionPosition; fallback: IOverlayConnectionPosition} {\n        const position = this.mcPlacement;\n        const isLtr = !this.direction || this.direction.value === 'ltr';\n        let overlayPosition: IOverlayConnectionPosition;\n\n        if (position === 'top') {\n            overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n        } else if (position === 'bottom') {\n            overlayPosition = {overlayX: 'center', overlayY: 'top'};\n        } else if (\n            position === 'top' ||\n            (position === 'left' && isLtr) ||\n            (position === 'right' && !isLtr)) {\n            overlayPosition = {overlayX: 'end', overlayY: 'center'};\n        } else if (\n            position === 'bottom' ||\n            (position === 'right' && isLtr) ||\n            (position === 'left' && !isLtr)) {\n            overlayPosition = {overlayX: 'start', overlayY: 'center'};\n        } else {\n            throw getMcTooltipInvalidPositionError(position);\n        }\n\n        const {x, y} = this.invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n        return {\n            main: overlayPosition,\n            fallback: {overlayX: x, overlayY: y}\n        };\n    }\n\n    /** Inverts an overlay position. */\n    private invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n        let newX: HorizontalConnectionPos = x;\n        let newY: VerticalConnectionPos = y;\n        if (this.mcPlacement === 'top' || this.mcPlacement === 'bottom') {\n            if (y === 'top') {\n                newY = 'bottom';\n            } else if (y === 'bottom') {\n                newY = 'top';\n            }\n        } else {\n            if (x === 'end') {\n                newX = 'start';\n            } else if (x === 'start') {\n                newX = 'end';\n            }\n        }\n\n        return {x: newX, y: newY};\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\n\nimport {\n    McTooltipComponent,\n    McTooltip,\n    MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './tooltip.component';\n\n\n@NgModule({\n    declarations: [McTooltipComponent, McTooltip],\n    exports: [McTooltipComponent, McTooltip],\n    imports: [CommonModule, OverlayModule],\n    providers: [MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],\n    entryComponents: [McTooltipComponent]\n})\nexport class McToolTipModule {\n}\n","/* tslint:disable:no-empty */\n\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    Directive,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Input,\n    isDevMode,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    Renderer2,\n    Self,\n    SimpleChanges,\n    ViewChild,\n    ViewChildren,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    RIGHT_ARROW,\n    SPACE,\n    UP_ARROW,\n    A, PAGE_UP, PAGE_DOWN\n} from '@ptsecurity/cdk/keycodes';\nimport {\n    CdkConnectedOverlay,\n    ViewportRuler\n} from '@ptsecurity/cdk/overlay';\nimport { CdkTree } from '@ptsecurity/cdk/tree';\nimport {\n    getOptionScrollPosition,\n    CanDisable,\n    CanUpdateErrorState,\n    ErrorStateMatcher,\n    HasTabIndex,\n    CanDisableCtor,\n    HasTabIndexCtor,\n    CanUpdateErrorStateCtor,\n    mixinTabIndex,\n    mixinDisabled,\n    mixinErrorState,\n    mcSelectAnimations,\n\n    SELECT_PANEL_MAX_HEIGHT,\n    SELECT_PANEL_PADDING_X,\n    SELECT_PANEL_VIEWPORT_PADDING,\n\n    getMcSelectDynamicMultipleError,\n    getMcSelectNonFunctionValueError,\n    getMcSelectNonArrayValueError,\n    MC_SELECT_SCROLL_STRATEGY\n} from '@ptsecurity/mosaic/core';\nimport { McFormField, McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { McTag } from '@ptsecurity/mosaic/tags';\nimport { McTreeSelection, McTreeOption } from '@ptsecurity/mosaic/tree';\nimport { defer, merge, Observable, Subject } from 'rxjs';\nimport {\n    filter,\n    map,\n    startWith,\n    switchMap,\n    take,\n    takeUntil,\n    distinctUntilChanged\n} from 'rxjs/operators';\n\n\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the select value has changed. */\nexport class McTreeSelectChange {\n    constructor(public source: McTreeOption, public value: any, public isUserInput = false) {}\n}\n\n\n@Directive({ selector: 'mc-tree-select-trigger' })\nexport class McTreeSelectTrigger {}\n\n\nclass McTreeSelectBase {\n    constructor(\n        public elementRef: ElementRef,\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {}\n}\n\n// tslint:disable-next-line:naming-convention\nconst McTreeSelectMixinBase: CanDisableCtor & HasTabIndexCtor & CanUpdateErrorStateCtor &\n    typeof McTreeSelectBase = mixinTabIndex(mixinDisabled(mixinErrorState(McTreeSelectBase)));\n\n\n@Component({\n    selector: 'mc-tree-select',\n    exportAs: 'mcTreeSelect',\n    templateUrl: 'tree-select.html',\n    styleUrls: ['./tree-select.css'],\n    inputs: ['disabled', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'tabIndex',\n\n        class: 'mc-tree-select',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-select-invalid]': 'errorState',\n        '[class.mc-select-required]': 'required',\n\n        '(keydown)': 'handleKeydown($event)',\n        '(focus)': 'onFocus()',\n        '(blur)': 'onBlur()',\n        '(window:resize)': 'calculateHiddenItems()'\n    },\n    animations: [\n        mcSelectAnimations.transformPanel,\n        mcSelectAnimations.fadeInContent\n    ],\n    providers: [\n        { provide: McFormFieldControl, useExisting: McTreeSelect },\n        { provide: CdkTree, useExisting: McTreeSelect }\n    ]\n})\nexport class McTreeSelect extends McTreeSelectMixinBase implements\n    AfterContentInit, AfterViewInit, OnChanges, OnDestroy, OnInit, DoCheck, ControlValueAccessor,\n    CanDisable, HasTabIndex, McFormFieldControl<any>, CanUpdateErrorState {\n\n    /** A name for this control that can be used by `mc-form-field`. */\n    controlType = 'mc-select';\n\n    hiddenItems: number = 0;\n    oneMoreText: string = '...ещё';\n\n    /** The last measured value for the trigger's client bounding rect. */\n    triggerRect: ClientRect;\n\n    /** The cached font-size of the trigger element. */\n    triggerFontSize = 0;\n\n    /** Deals with the selection logic. */\n    selectionModel: SelectionModel<McTreeOption>;\n\n    /** The IDs of child options to be passed to the aria-owns attribute. */\n    optionIds: string = '';\n\n    /** The value of the select panel's transform-origin property. */\n    transformOrigin: string = 'top';\n\n    /** Whether the panel's animation is done. */\n    panelDoneAnimating: boolean = false;\n\n    /** Emits when the panel element is finished transforming in. */\n    panelDoneAnimatingStream = new Subject<string>();\n\n    /** Strategy that will be used to handle scrolling while the select panel is open. */\n    scrollStrategy = this.scrollStrategyFactory();\n\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n    offsetY = 0;\n\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n    positions = [\n        {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top'\n        },\n        {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom'\n        }\n    ];\n\n    @ViewChild('trigger') trigger: ElementRef;\n\n    @ViewChild('panel') panel: ElementRef;\n\n    @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n    @ViewChildren(McTag) tags: QueryList<McTag>;\n\n    /** User-supplied override of the trigger element. */\n    @ContentChild(McTreeSelectTrigger) customTrigger: McTreeSelectTrigger;\n\n    @ContentChild(McTreeSelection) tree: McTreeSelection;\n\n    /** Event emitted when the select panel has been toggled. */\n    @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted when the select has been opened. */\n    @Output('opened') readonly openedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => o), map(() => {}));\n\n    /** Event emitted when the select has been closed. */\n    @Output('closed') readonly closedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => !o), map(() => {}));\n\n    /** Event emitted when the selected value has been changed by the user. */\n    @Output() readonly selectionChange = new EventEmitter<McTreeSelectChange>();\n\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n    @Input() panelClass: string | string[] | Set<string> | { [key: string]: any };\n\n    /** Object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Function used to sort the values in a select in multiple mode.\n     * Follows the same logic as `Array.prototype.sort`.\n     */\n    @Input() sortComparator: (\n        a: McTreeOption, b: McTreeOption, options: McTreeOption[]\n    ) => number;\n\n    /** Combined stream of all of the child options' change events. */\n    readonly optionSelectionChanges: Observable<McTreeSelectChange> = defer(() => {\n        if (this.options) {\n            return merge(...this.options.map((option) => option.onSelectionChange));\n        }\n\n        return this.ngZone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n    }) as Observable<McTreeSelectChange>;\n\n    options: QueryList<McTreeOption>;\n\n    private originalOnKeyDown: (event: KeyboardEvent) => void;\n\n    @Input()\n    get placeholder(): string {\n        return this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n\n        this.stateChanges.next();\n    }\n\n    private _placeholder: string;\n\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n\n        this.stateChanges.next();\n    }\n\n    private _required: boolean = false;\n\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        if (this.selectionModel) {\n            throw getMcSelectDynamicMultipleError();\n        }\n\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    private _multiple: boolean = false;\n\n    @Input()\n    get autoSelect(): boolean {\n        if (this.multiple) { return false; }\n\n        return this._autoSelect;\n    }\n\n    set autoSelect(value: boolean) {\n        this._autoSelect = coerceBooleanProperty(value);\n    }\n\n    private _autoSelect: boolean = true;\n\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith() {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        /* tslint:disable-next-line:strict-type-predicates */\n        if (typeof fn !== 'function') {\n            throw getMcSelectNonFunctionValueError();\n        }\n\n        this._compareWith = fn;\n\n        if (this.selectionModel) {\n            // A different comparator means the selection could change.\n            this.initializeSelection();\n        }\n    }\n\n    /** Value of the select control. */\n    @Input()\n    get value(): any {\n        return this._value;\n    }\n\n    set value(newValue: any) {\n        if (newValue !== this._value) {\n            this.writeValue(newValue);\n            this._value = newValue;\n        }\n    }\n\n    private _value: any;\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n        this.stateChanges.next();\n    }\n\n    private _id: string;\n\n    /** Whether the select is focused. */\n    get focused(): boolean {\n        return this._focused || this._panelOpen;\n    }\n\n    /**\n     * @deprecated Setter to be removed as this property is intended to be readonly.\n     * @breaking-change 8.0.0\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n\n    private _focused = false;\n\n    get panelOpen(): boolean {\n        return this._panelOpen;\n    }\n\n    private _panelOpen = false;\n\n    /** The scroll position of the overlay panel, calculated to center the selected option. */\n    private scrollTop = 0;\n\n    /** Unique id for this input. */\n    private readonly uid = `mc-select-${nextUniqueId++}`;\n\n    /** Emits whenever the component is destroyed. */\n    private readonly destroy = new Subject<void>();\n\n    constructor(\n        private readonly viewportRuler: ViewportRuler,\n        readonly changeDetectorRef: ChangeDetectorRef,\n        private readonly ngZone: NgZone,\n        private readonly renderer: Renderer2,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        public elementRef: ElementRef,\n        @Optional() private readonly dir: Directionality,\n        @Optional() parentForm: NgForm,\n        @Optional() parentFormGroup: FormGroupDirective,\n        @Optional() private readonly parentFormField: McFormField,\n        @Self() @Optional() public ngControl: NgControl,\n        @Attribute('tabindex') tabIndex: string,\n        @Inject(MC_SELECT_SCROLL_STRATEGY) private readonly scrollStrategyFactory\n    ) {\n        super(elementRef, defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnInit() {\n        if (this.tree) {\n            this.tree.multiple = this.multiple;\n        }\n\n        this.stateChanges.next();\n\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this.panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this.panelOpen) {\n                    this.scrollTop = 0;\n                    this.openedChange.emit(true);\n                } else {\n                    this.openedChange.emit(false);\n                    this.panelDoneAnimating = false;\n                    this.overlayDir.offsetX = 0;\n                    this.changeDetectorRef.markForCheck();\n                }\n            });\n    }\n\n    ngAfterContentInit() {\n        if (!this.tree) { return; }\n\n        this.initKeyManager();\n\n        this.selectionModel = this.tree.selectionModel = new SelectionModel<McTreeOption>(this.multiple);\n        this.options = this.tree.options;\n        this.tree.autoSelect = this.autoSelect;\n\n        this.selectionModel.changed\n            .pipe(takeUntil(this.destroy))\n            .subscribe((event) => {\n                event.added.forEach((option) => option.select());\n                event.removed.forEach((option) => option.deselect());\n            });\n    }\n\n    ngAfterViewInit() {\n        if (!this.tree) { return; }\n\n        this.tags.changes\n            .subscribe(() => {\n                setTimeout(() => this.calculateHiddenItems(), 0);\n            });\n\n        this.options.changes\n            .pipe(startWith(null), takeUntil(this.destroy))\n            .subscribe(() => {\n                this.updateSelectedOptions();\n\n                this.resetOptions();\n            });\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) { this.updateErrorState(); }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes.disabled) {\n            this.stateChanges.next();\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroy.next();\n\n        this.destroy.complete();\n        this.stateChanges.complete();\n    }\n\n    /** `View -> model callback called when value changes` */\n    onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when select has been touched` */\n    onTouched = () => {};\n\n    toggle() {\n        if (this.panelOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    open() {\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) { return; }\n\n        this.triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this.triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n        this._panelOpen = true;\n        // this.tree.keyManager.withHorizontalOrientation(null);\n        this.calculateOverlayPosition();\n        this.highlightCorrectOption();\n        this.changeDetectorRef.markForCheck();\n\n        // Set the font size on the panel element once it exists.\n        this.ngZone.onStable.asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                if (this.triggerFontSize && this.overlayDir.overlayRef && this.overlayDir.overlayRef.overlayElement) {\n                    this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this.triggerFontSize}px`;\n                }\n            });\n    }\n\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n\n            // this.tree.keyManager.setActiveItem(-1);\n\n            // this.tree.keyManager.withHorizontalOrientation(this.isRtl() ? 'rtl' : 'ltr');\n            this.changeDetectorRef.markForCheck();\n            this.onTouched();\n        }\n    }\n\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    // todo нужно доделать!\n    writeValue(value: any) {\n        if (this.options) {\n            this.setSelectionByValue(value);\n        }\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.onChange = fn;\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn: () => {}) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this.changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    get selected(): McTreeOption | McTreeOption[] {\n        return this.multiple ? this.selectionModel.selected : this.selectionModel.selected[0];\n    }\n\n    get triggerValue(): string {\n        if (this.empty) { return ''; }\n\n        return (this.selected as McTreeOption).viewValue;\n    }\n\n    get triggerValues(): McTreeOption[] {\n        if (this.empty) { return []; }\n\n        const selectedOptions = this.selectionModel.selected;\n\n        if (this.isRtl()) { selectedOptions.reverse(); }\n\n        return selectedOptions;\n    }\n\n    get empty(): boolean {\n        return !this.selectionModel || this.selectionModel.isEmpty();\n    }\n\n    isRtl(): boolean {\n        return this.dir ? this.dir.value === 'rtl' : false;\n    }\n\n    handleKeydown(event: KeyboardEvent) {\n        if (!this.disabled) {\n            if (this.panelOpen) {\n                this.handleOpenKeydown(event);\n            } else {\n                this.handleClosedKeydown(event);\n            }\n        }\n    }\n\n    /**\n     * When the panel content is done fading in, the panelDoneAnimating property is\n     * set so the proper class can be added to the panel.\n     */\n    onFadeInDone() {\n        this.panelDoneAnimating = this.panelOpen;\n        this.changeDetectorRef.markForCheck();\n    }\n\n    onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    onBlur() {\n        this._focused = false;\n\n        if (!this.disabled && !this.panelOpen) {\n            this.onTouched();\n            this.changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n\n    /** Callback that is invoked when the overlay panel has been attached. */\n    onAttached() {\n        this.overlayDir.positionChange\n            .pipe(take(1))\n            .subscribe(() => {\n                this.changeDetectorRef.detectChanges();\n                this.calculateOverlayOffsetX();\n                this.panel.nativeElement.scrollTop = this.scrollTop;\n\n                this.tree.updateScrollSize();\n            });\n    }\n\n    /** Returns the theme to be used on the panel. */\n    getPanelTheme(): string {\n        return this.parentFormField ? `mc-${this.parentFormField.color}` : '';\n    }\n\n    /** Focuses the select element. */\n    focus() {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    calculateOverlayScroll(selectedIndex: number, scrollBuffer: number, maxScroll: number): number {\n        const itemHeight = this.getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n\n        /* tslint:disable-next-line:no-magic-numbers */\n        const halfOptionHeight = itemHeight / 2;\n\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n\n    /** Invoked when an option is clicked. */\n    onRemoveSelectedOption(selectedOption: McTreeOption, $event) {\n        $event.stopPropagation();\n\n        this.options.forEach((option) => {\n            if (option.data === selectedOption.data) { option.deselect(); }\n        });\n\n        this.selectionModel.deselect(selectedOption);\n    }\n\n    calculateHiddenItems() {\n        if (this.empty || !this.multiple) { return; }\n\n        let visibleItems: number = 0;\n        const totalItemsWidth = this.getTotalItemsWidthInMatcher();\n        let totalVisibleItemsWidth: number = 0;\n        const itemMargin: number = 4;\n\n        this.tags.forEach((tag) => {\n            if (tag.nativeElement.offsetTop < tag.nativeElement.offsetHeight) {\n                totalVisibleItemsWidth += tag.nativeElement.getBoundingClientRect().width + itemMargin;\n                visibleItems++;\n            }\n        });\n\n        this.hiddenItems = this.selectionModel.selected.length - visibleItems;\n\n        if (this.hiddenItems) {\n            const itemsCounter = this.trigger.nativeElement.querySelector('.mc-tree-select__match-hidden-text');\n            const matcherList = this.trigger.nativeElement.querySelector('.mc-tree-select__match-list');\n\n            const itemsCounterShowed = itemsCounter.offsetTop < itemsCounter.offsetHeight;\n            // const itemsCounterWidth: number = itemsCounter.getBoundingClientRect().width;\n            const itemsCounterWidth: number = 86;\n\n            const matcherListWidth: number = matcherList.getBoundingClientRect().width;\n            const matcherWidth: number = matcherListWidth + itemsCounterWidth;\n\n            if (itemsCounterShowed && (totalItemsWidth < matcherWidth)) { this.hiddenItems = 0; }\n\n            if (\n                totalVisibleItemsWidth === matcherListWidth ||\n                (totalVisibleItemsWidth + itemsCounterWidth) < matcherListWidth\n            ) {\n                this.changeDetectorRef.markForCheck();\n\n                return ;\n            } else if (!itemsCounterShowed && (totalItemsWidth + itemsCounterWidth) > matcherWidth) {\n                this.hiddenItems++;\n            }\n        }\n\n        this.changeDetectorRef.markForCheck();\n    }\n\n    private updateSelectedOptions(): void {\n        this.selectionModel.selected.forEach((selectedOption) => {\n            this.options.forEach((option) => {\n                if (option.data === selectedOption.data) {\n                    this.selectionModel.deselect(selectedOption);\n                    this.selectionModel.select(option);\n\n                    option.select();\n                }\n            });\n        });\n    }\n\n    private getTotalItemsWidthInMatcher(): number {\n        const triggerClone = this.trigger.nativeElement.cloneNode(true);\n        triggerClone.querySelector('.mc-tree-select__match-hidden-text').remove();\n\n        this.renderer.setStyle(triggerClone, 'position', 'absolute');\n        this.renderer.setStyle(triggerClone, 'visibility', 'hidden');\n        this.renderer.setStyle(triggerClone, 'top', '-100%');\n        this.renderer.setStyle(triggerClone, 'left', '0');\n\n        this.renderer.appendChild(this.trigger.nativeElement, triggerClone);\n\n        let totalItemsWidth: number = 0;\n        const itemMargin: number = 4;\n        triggerClone.querySelectorAll('mc-tag').forEach((item) => {\n            totalItemsWidth += item.getBoundingClientRect().width as number + itemMargin;\n        });\n\n        triggerClone.remove();\n\n        return totalItemsWidth;\n    }\n\n    private handleClosedKeydown(event: KeyboardEvent) {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n        // Open the select on ALT + arrow key to match the native <select>\n        if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n            // prevents the page from scrolling down when pressing space\n            event.preventDefault();\n\n            this.open();\n        } else if (!this.multiple && this.tree.keyManager && this.tree.keyManager.onKeydown) {\n            this.tree.keyManager.onKeydown(event);\n        }\n    }\n\n    private handleOpenKeydown(event: KeyboardEvent) {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n\n            this.close();\n        } else if (keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW) {\n            return this.originalOnKeyDown.call(this.tree, event);\n        } else if (keyCode === HOME) {\n            event.preventDefault();\n\n            this.tree.keyManager.setFirstItemActive();\n        } else if (keyCode === END) {\n            event.preventDefault();\n\n            this.tree.keyManager.setLastItemActive();\n        } else if (keyCode === PAGE_UP) {\n            event.preventDefault();\n\n            this.tree.keyManager.setPreviousPageItemActive();\n        } else if (keyCode === PAGE_DOWN) {\n            event.preventDefault();\n\n            this.tree.keyManager.setNextPageItemActive();\n        } else if ((keyCode === ENTER || keyCode === SPACE) && this.tree.keyManager.activeItem) {\n            event.preventDefault();\n\n            this.tree.keyManager.activeItem.selectViaInteraction();\n        } else if (this.multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n\n            const hasDeselectedOptions = this.options.some((option) => !option.selected);\n\n            this.options.forEach((option) => {\n                if (hasDeselectedOptions && !option.disabled) {\n                    option.select();\n                } else {\n                    option.deselect();\n                }\n            });\n        } else {\n            const previouslyFocusedIndex = this.tree.keyManager.activeItemIndex;\n\n            this.tree.keyManager.onKeydown(event);\n\n            if (this.multiple && isArrowKey && event.shiftKey && this.tree.keyManager.activeItem &&\n                this.tree.keyManager.activeItemIndex !== previouslyFocusedIndex) {\n                this.tree.keyManager.activeItem.selectViaInteraction();\n            }\n        }\n    }\n\n    private initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this.setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n        });\n    }\n\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    private setSelectionByValue(value: any | any[]) {\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) { throw getMcSelectNonArrayValueError(); }\n\n            this.selectionModel.clear();\n            value.forEach((currentValue: any) => this.selectValue(currentValue));\n            this.sortValues();\n        } else {\n            this.selectionModel.clear();\n            const correspondingOption = this.selectValue(value);\n\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this.tree.keyManager.setActiveItem(correspondingOption);\n            }\n        }\n\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    private selectValue(value: any): McTreeOption | undefined {\n        const correspondingOption = this.options.find((option: McTreeOption) => {\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            } catch (error) {\n                if (isDevMode()) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n\n                return false;\n            }\n        });\n\n        if (correspondingOption) {\n            this.selectionModel.select(correspondingOption);\n        }\n\n        return correspondingOption;\n    }\n\n    private initKeyManager() {\n        this.originalOnKeyDown = this.tree.onKeyDown;\n\n        this.tree.onKeyDown = () => {};\n\n        this.tree.keyManager.tabOut\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            });\n\n        this.tree.keyManager.change\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this._panelOpen && this.panel) {\n                    this.scrollActiveOptionIntoView();\n                } else if (!this._panelOpen && !this.multiple && this.tree.keyManager.activeItem) {\n                    this.tree.keyManager.activeItem.selectViaInteraction();\n                }\n            });\n    }\n\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    private resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this.destroy);\n\n        this.optionSelectionChanges\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe((event) => {\n                this.onSelect(event.source, event.isUserInput);\n\n                if (event.isUserInput && !this.multiple && this._panelOpen) {\n                    this.close();\n                    this.focus();\n                }\n            });\n\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        // merge(...this.options.map((option) => option.stateChanges))\n        //     .pipe(takeUntil(changedOrDestroyed))\n        //     .subscribe(() => {\n        //         this.changeDetectorRef.markForCheck();\n        //         this.stateChanges.next();\n        //     });\n\n        this.setOptionIds();\n    }\n\n    /** Invoked when an option is clicked. */\n    private onSelect(option: McTreeOption, isUserInput: boolean) {\n        const wasSelected = this.selectionModel.isSelected(option);\n\n        if (option.value == null && !this.multiple) {\n            option.deselect();\n            this.selectionModel.clear();\n            this.propagateChanges(option.value);\n        } else {\n            if (option.selected) {\n                this.selectionModel.select(option);\n            } else {\n                this.selectionModel.deselect(option);\n            }\n\n            if (isUserInput) {\n                this.tree.keyManager.setActiveItem(option);\n            }\n\n            if (this.multiple) {\n                this.sortValues();\n\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mc-option`.\n                    this.focus();\n                }\n            }\n        }\n\n        if (wasSelected !== this.selectionModel.isSelected(option)) {\n            this.propagateChanges();\n        }\n\n        this.stateChanges.next();\n    }\n\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    private sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n\n            this.selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n\n    /** Emits change event to set the model value. */\n    private propagateChanges(fallbackValue?: any) {\n        let valueToEmit: any = null;\n\n        if (this.multiple) {\n            valueToEmit = (this.selected as any).map((option) => option.value);\n        } else {\n            valueToEmit = this.selected ? (this.selected as any).value : fallbackValue;\n        }\n\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this.onChange(valueToEmit);\n        this.selectionChange.emit(new McTreeSelectChange(this as any, valueToEmit));\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Records option IDs to pass to the aria-owns property. */\n    private setOptionIds() {\n        this.optionIds = this.options.map((option) => option.id).join(' ');\n    }\n\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    private highlightCorrectOption() {\n        if (this.tree.keyManager) {\n            if (this.empty) {\n                this.tree.keyManager.setFirstItemActive();\n            } else {\n                this.tree.keyManager.setActiveItem(this.selectionModel.selected[0]);\n            }\n        }\n    }\n\n    /** Scrolls the active option into view. */\n    private scrollActiveOptionIntoView() {\n        const activeOptionIndex = this.tree.keyManager.activeItemIndex || 0;\n\n        this.panel.nativeElement.scrollTop = getOptionScrollPosition(\n            activeOptionIndex,\n            this.getItemHeight(),\n            this.panel.nativeElement.scrollTop,\n            SELECT_PANEL_MAX_HEIGHT\n        );\n    }\n\n    /** Gets the index of the provided option in the option list. */\n    private getOptionIndex(option: McTreeOption): number | undefined {\n        // todo разобраться с этим срачем!\n        return this.options.reduce((result: number, current: McTreeOption, index: number) => {\n            /* tslint:disable-next-line:strict-type-predicates */\n            return result === undefined ? (option === current ? index : undefined) : result;\n        }, undefined);\n    }\n\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    private calculateOverlayPosition() {\n        const itemHeight = this.getItemHeight();\n        const items = this.getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n\n        // If no value is selected we open the popup to the first item.\n        const selectedOptionOffset =\n            this.empty ? 0 : this.getOptionIndex(this.selectionModel.selected[0])!;\n\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        /* tslint:disable-next-line:no-magic-numbers */\n        const scrollBuffer = panelHeight / 2;\n        this.scrollTop = this.calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this.offsetY = this.calculateOverlayOffsetY();\n\n        this.checkOverlayWithinViewport(maxScroll);\n    }\n\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    private calculateOverlayOffsetX() {\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this.viewportRuler.getViewportSize();\n        const isRtl = this.isRtl();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const paddingWidth = SELECT_PANEL_PADDING_X * 2;\n        let offsetX: number = SELECT_PANEL_PADDING_X;\n\n        // Invert the offset in LTR.\n        if (!isRtl) { offsetX *= -1; }\n\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        } else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    private calculateOverlayOffsetY(): number {\n        // const itemHeight = this.getItemHeight();\n        // const optionHeightAdjustment = (itemHeight - this.triggerRect.height) / 2;\n\n        // todo I'm not sure that we will use it\n        return 0;\n        // return Math.round(-optionHeightAdjustment);\n    }\n\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    private checkOverlayWithinViewport(maxScroll: number) {\n        const itemHeight = this.getItemHeight();\n        const viewportSize = this.viewportRuler.getViewportSize();\n\n        const topSpaceAvailable = this.triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable =\n            viewportSize.height - this.triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n        const panelHeightTop = Math.abs(this.offsetY);\n        const totalPanelHeight =\n            Math.min(this.getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this.triggerRect.height;\n\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this.adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        } else if (panelHeightTop > topSpaceAvailable) {\n            this.adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        } else {\n            this.transformOrigin = this.getOriginBasedOnOption();\n        }\n    }\n\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    private adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this.scrollTop -= distanceBelowViewport;\n        this.offsetY -= distanceBelowViewport;\n        this.transformOrigin = this.getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this.scrollTop <= 0) {\n            this.scrollTop = 0;\n            this.offsetY = 0;\n            this.transformOrigin = `50% bottom 0px`;\n        }\n    }\n\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    private adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number, maxScroll: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this.scrollTop += distanceAboveViewport;\n        this.offsetY += distanceAboveViewport;\n        this.transformOrigin = this.getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this.scrollTop >= maxScroll) {\n            this.scrollTop = maxScroll;\n            this.offsetY = 0;\n            this.transformOrigin = `50% top 0px`;\n\n            return;\n        }\n    }\n\n    /** Sets the transform origin point based on the selected option. */\n    private getOriginBasedOnOption(): string {\n        const itemHeight = this.getItemHeight();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const optionHeightAdjustment = (itemHeight - this.triggerRect.height) / 2;\n        /* tslint:disable-next-line:no-magic-numbers */\n        const originY = Math.abs(this.offsetY) - optionHeightAdjustment + itemHeight / 2;\n\n        return `50% ${originY}px 0px`;\n    }\n\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    private getItemCount(): number {\n        return this.options.length;\n    }\n\n    /** Calculates the height of the select's options. */\n    private getItemHeight(): number {\n        // todo доделать\n        /* tslint:disable-next-line:no-magic-numbers */\n        return 32;\n        // return this.triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { CdkTreeModule } from '@ptsecurity/cdk/tree';\nimport { MC_SELECT_SCROLL_STRATEGY_PROVIDER, McPseudoCheckboxModule } from '@ptsecurity/mosaic/core';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\nimport { McTagsModule } from '@ptsecurity/mosaic/tags';\nimport { McTreeModule } from '@ptsecurity/mosaic/tree';\n\nimport { McTreeSelect, McTreeSelectTrigger } from './tree-select.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        CdkTreeModule,\n        McTreeModule,\n        McIconModule,\n        McTagsModule,\n        McPseudoCheckboxModule\n    ],\n    exports: [McTreeSelect, McTreeSelectTrigger, CommonModule],\n    declarations: [McTreeSelect, McTreeSelectTrigger],\n    providers: [MC_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class McTreeSelectModule {}\n","import {\n    Directive, DoCheck, ElementRef, Inject,\n    Input, OnChanges, OnDestroy, Optional,\n    Self, InjectionToken, NgZone, OnInit\n} from '@angular/core';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { fromEvent, Subscription, Subject } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\n\n\nexport const MC_TEXTAREA_VALUE_ACCESSOR =\n    new InjectionToken<{ value: any }>('MC_TEXTAREA_VALUE_ACCESSOR');\n\nlet nextUniqueId = 0;\n\nconst ROW_SEPARATOR = '\\n';\n\nexport class McTextareaBase {\n    constructor(public defaultErrorStateMatcher: ErrorStateMatcher,\n                public parentForm: NgForm,\n                public parentFormGroup: FormGroupDirective,\n                public ngControl: NgControl) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McTextareaMixinBase: CanUpdateErrorStateCtor & typeof McTextareaBase = mixinErrorState(McTextareaBase);\n\n@Directive({\n    selector: 'textarea[mcTextarea]',\n    exportAs: 'mcTextarea',\n    host: {\n        class: 'mc-textarea',\n        '[class.mc-textarea-resizable]': '!canGrow',\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[attr.aria-invalid]': 'errorState',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '(blur)': 'focusChanged(false)',\n        '(focus)': 'focusChanged(true)'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McTextarea }]\n})\nexport class McTextarea extends McTextareaMixinBase implements McFormFieldControl<any>, OnInit, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n\n    @Input() canGrow: boolean = true;\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-textarea';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this.valueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this.valueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n\n    protected uid = `mc-textsrea-${nextUniqueId++}`;\n    protected previousNativeValue: any;\n    protected _disabled = false;\n    protected _id: string;\n    protected _required = false;\n\n    private valueAccessor: { value: any };\n    private growSubscription: Subscription;\n\n    private lineHeight: number = 0;\n    private freeRowsHeight: number = 0;\n    private minHeight: number = 0;\n\n    constructor(protected elementRef: ElementRef,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() parentForm: NgForm,\n                @Optional() parentFormGroup: FormGroupDirective,\n                defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_TEXTAREA_VALUE_ACCESSOR) inputValueAccessor: any,\n                private ngZone: NgZone) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n        // If no input value accessor was explicitly specified, use the element as the textarea value\n        // accessor.\n        this.valueAccessor = inputValueAccessor || this.elementRef.nativeElement;\n\n        this.previousNativeValue = this.value;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n\n        const growObserver = fromEvent(elementRef.nativeElement, 'input')\n            /*.pipe(\n                map((event: any) => this.getGrowHeight()),\n                // map((event: any) => event.target.scrollHeight),\n                distinctUntilChanged()\n            )*/;\n        this.growSubscription = growObserver.subscribe(this.grow.bind(this));\n    }\n\n    ngOnInit() {\n        setTimeout(() => this.grow(), 0);\n        this.lineHeight = parseInt(getComputedStyle(this.elementRef.nativeElement).lineHeight!, 10);\n\n        const paddingTop = parseInt(getComputedStyle(this.elementRef.nativeElement).paddingTop!, 10);\n        const paddingBottom = parseInt(getComputedStyle(this.elementRef.nativeElement).paddingBottom!, 10);\n\n        // tslint:disable-next-line:no-magic-numbers\n        this.minHeight = this.lineHeight * 2 + paddingTop + paddingBottom;\n        this.freeRowsHeight = this.lineHeight;\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        this.growSubscription.unsubscribe();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this.dirtyCheckNativeValue();\n    }\n\n    /** Grow textarea height to avoid vertical scroll  */\n    grow() {\n        if (!this.canGrow) {\n            return;\n        }\n\n        this.ngZone.runOutsideAngular(() => {\n            const textarea = this.elementRef.nativeElement;\n\n            const outerHeight = parseInt(window.getComputedStyle(textarea).height!, 10);\n            const diff = outerHeight - textarea.clientHeight;\n\n            textarea.style.height = 0; // this line is important to height recalculation\n\n            const height = Math.max(this.minHeight, textarea.scrollHeight + diff + this.freeRowsHeight);\n            textarea.style.height = `${height}px`;\n        });\n    }\n\n    /** Focuses the textarea. */\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /** Callback for the cases where the focused state of the textarea changes. */\n    focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this.elementRef.nativeElement.value && !this.isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Does some manual dirty checking on the native textarea `value` property. */\n    protected dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this.previousNativeValue !== newValue) {\n            this.previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Checks whether the textarea is invalid based on the native validation. */\n    protected isBadInput(): boolean {\n        // The `validity` property won't be present on platform-server.\n        const validity = (this.elementRef.nativeElement as HTMLTextAreaElement).validity;\n\n        return validity && validity.badInput;\n    }\n\n    private getGrowHeight(): number {\n        const textarea = this.elementRef.nativeElement;\n        const outerHeight = parseInt(window.getComputedStyle(textarea).height!.toString(), 10);\n        const diff = outerHeight - textarea.clientHeight;\n\n        return Math.max(this.minHeight, textarea.scrollHeight + diff);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McTextarea } from './textarea.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule, FormsModule],\n    exports: [McTextarea],\n    declarations: [McTextarea]\n})\nexport class McTextareaModule {\n}\n","import {\n    Directive,\n    DoCheck,\n    ElementRef,\n    forwardRef,\n    Inject,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Optional,\n    Renderer2,\n    Self\n} from '@angular/core';\nimport {\n    ControlValueAccessor,\n    FormControl,\n    FormGroupDirective,\n    NgControl,\n    NgForm,\n    ValidationErrors\n} from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { DateAdapter } from '@ptsecurity/cdk/datetime';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { MC_INPUT_VALUE_ACCESSOR } from '@ptsecurity/mosaic/input';\nimport {\n    noop,\n    Subject\n} from 'rxjs';\n\nimport {\n    ARROW_DOWN_KEYCODE,\n    ARROW_LEFT_KEYCODE,\n    ARROW_RIGHT_KEYCODE,\n    ARROW_UP_KEYCODE,\n    DEFAULT_TIME_FORMAT,\n    HOURS_PER_DAY,\n    HOURS_MINUTES_REGEXP,\n    HOURS_MINUTES_SECONDS_REGEXP,\n    HOURS_ONLY_REGEXP,\n    MINUTES_PER_HOUR,\n    SECONDS_PER_MINUTE,\n    TIMEFORMAT_PLACEHOLDERS,\n    TimeFormats,\n    TimeParts\n} from './timepicker.constants';\n\n\nlet uniqueComponentIdSuffix: number = 0;\n\nexport class McTimepickerBase {\n    constructor(\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl) { }\n}\n\n// tslint:disable-next-line naming-convention\nexport const McTimepickerMixinBase:\n    CanUpdateErrorStateCtor &\n    typeof McTimepickerBase = mixinErrorState(McTimepickerBase);\n\n@Directive({\n    selector: 'input[mcTimepicker]',\n    exportAs: 'mcTimepickerInput',\n    host: {\n        class: 'mc-timepicker mc-input',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '[attr.time-format]': 'timeFormat',\n        '[attr.min-time]': 'minTime',\n        '[attr.max-time]': 'maxTime',\n        '[attr.value]': 'value',\n        '[attr.aria-invalid]': 'errorState',\n        '(blur)': 'onBlur()',\n        '(focus)': 'focusChanged(true)',\n        '(input)': 'onInput()',\n        '(paste)': 'onPaste($event)',\n        '(keydown)': 'onKeyDown($event)'\n    },\n    providers: [\n        {\n            provide: McFormFieldControl,\n            useExisting: forwardRef(() => McTimepicker)\n        }\n    ]\n})\nexport class McTimepicker extends McTimepickerMixinBase\n    implements McFormFieldControl<any>,\n        OnChanges,\n        OnDestroy,\n        DoCheck,\n        CanUpdateErrorState,\n        ControlValueAccessor {\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-timepicker';\n\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) { return this.ngControl.disabled; }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n        }\n\n        this.stateChanges.next();\n    }\n\n    @Input()\n    get id(): string { return this._id; }\n\n    set id(value: string) { this._id = value || this.uid; }\n\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean { return this._required; }\n\n    set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string { return this.inputValueAccessor.value; }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this.inputValueAccessor.value = value;\n            this.applyInputChanges();\n        }\n    }\n\n    @Input('time-format')\n    get timeFormat(): TimeFormats { return this._timeFormat; }\n\n    set timeFormat(formatValue: TimeFormats) {\n        this._timeFormat = Object\n            .keys(TimeFormats)\n            .map((timeFormatKey) => TimeFormats[timeFormatKey])\n            .indexOf(formatValue) > -1 ? formatValue : DEFAULT_TIME_FORMAT;\n\n        (this.ngControl.control as FormControl).updateValueAndValidity();\n        this.placeholder = TIMEFORMAT_PLACEHOLDERS[this._timeFormat];\n    }\n\n    @Input('min-time')\n    get minTime(): string | null { return this._minTime; }\n\n    set minTime(minValue: string | null) {\n        this._minTime = minValue;\n        this.minDateTime = minValue !== null ? this.getDateFromTimeString(minValue) : undefined;\n        (this.ngControl.control as FormControl).updateValueAndValidity();\n    }\n\n    @Input('max-time')\n    get maxTime(): string | null { return this._maxTime; }\n\n    set maxTime(maxValue: string | null) {\n        this._maxTime = maxValue;\n        this.maxDateTime = maxValue !== null ? this.getDateFromTimeString(maxValue) : undefined;\n        (this.ngControl.control as FormControl).updateValueAndValidity();\n    }\n\n    private _id: string;\n    private readonly uid = `mc-timepicker-${uniqueComponentIdSuffix++}`;\n    private _disabled: boolean;\n    private _required: boolean;\n    private previousNativeValue: any;\n    private readonly inputValueAccessor: { value: any };\n    private onChange: (value: any) => void;\n    private onTouched: () => void;\n    private _timeFormat: TimeFormats;\n    private _minTime: string | null = null;\n    private minDateTime: Date | undefined;\n    private _maxTime: string | null = null;\n    private maxDateTime: Date | undefined;\n    private currentDateTimeInput: Date | undefined;\n\n    constructor(private readonly elementRef: ElementRef,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() parentForm: NgForm,\n                @Optional() parentFormGroup: FormGroupDirective,\n                defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n                private readonly renderer: Renderer2,\n                @Optional() private dateAdapter: DateAdapter<any>) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (!this.dateAdapter) {\n            throw Error(`McTimepicker: No provider found for DateAdapter. You must import one of the existing ` +\n                `modules at your application root or provide a custom implementation or use exists ones.`);\n        }\n\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this.inputValueAccessor = inputValueAccessor || this.elementRef.nativeElement;\n\n        this.previousNativeValue = this.value;\n        this.onChange = noop;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n\n        this.placeholder = TIMEFORMAT_PLACEHOLDERS[DEFAULT_TIME_FORMAT];\n\n        if (this.ngControl) {\n            // Instead of NG_VALUE_ACCESSOR (https://github.com/angular/material2/issues/8158#issuecomment-344618103)\n            this.ngControl.valueAccessor = this;\n\n            // To avoid cyclic dependency https://stackoverflow.com/a/49578414\n            const control = this.ngControl.control as FormControl;\n            const myValidators = [\n                () => this.parseValidator(),\n                () => this.minTimeValidator(),\n                () => this.maxTimeValidator()\n            ];\n            const validators = control.validator\n                ? [control.validator, ...myValidators]\n                : myValidators;\n\n            control.setValidators(validators);\n            control.updateValueAndValidity();\n        }\n    }\n\n    ngOnChanges(): void {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy(): void {\n        this.stateChanges.complete();\n    }\n\n    ngDoCheck(): void {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this.dirtyCheckNativeValue();\n    }\n\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    focusChanged(isFocused: boolean): void {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.onTouched();\n            this.stateChanges.next();\n        }\n    }\n\n    onBlur() {\n        this.applyInputChanges();\n        this.focusChanged(false);\n    }\n\n    onPaste($event) {\n        $event.preventDefault();\n        const clipboardUserInput: string = $event.clipboardData.getData('text');\n\n        if (this.getDateFromTimeString(clipboardUserInput) === undefined) { return; }\n\n        this.elementRef.nativeElement.value = clipboardUserInput;\n        this.onInput();\n    }\n\n    onInput() {\n        const initialCursorStart: number = this.elementRef.nativeElement.selectionStart;\n        const initialCursorEnd: number = this.elementRef.nativeElement.selectionEnd;\n        let isAutocompleteTriggered: boolean = false;\n\n        const {\n            hoursOnly,\n            hoursAndMinutes,\n            hoursAndMinutesAndSeconds\n        } = this.getParsedTimeParts(this.elementRef.nativeElement.value);\n\n        // tslint:disable no-magic-numbers\n        if (hoursOnly &&\n            hoursOnly[1] &&\n            hoursOnly[1].length === 2) {\n            isAutocompleteTriggered = true;\n        } else if (hoursAndMinutes &&\n            hoursAndMinutes[1].length === 1 &&\n            hoursAndMinutes[2] &&\n            hoursAndMinutes[2].length === 2) {\n            isAutocompleteTriggered = true;\n        } else if (hoursAndMinutesAndSeconds &&\n            hoursAndMinutesAndSeconds[1].length === 2 &&\n            hoursAndMinutesAndSeconds[2].length === 2 &&\n            hoursAndMinutesAndSeconds[3] &&\n            hoursAndMinutesAndSeconds[3].length === 2) {\n            isAutocompleteTriggered = true;\n        }\n        // tslint:enable no-magic-numbers\n\n        this.applyInputChanges({ doTimestringReformat: isAutocompleteTriggered });\n\n        this.elementRef.nativeElement.selectionStart = initialCursorStart;\n        this.elementRef.nativeElement.selectionEnd = initialCursorEnd;\n\n        if (isAutocompleteTriggered && this.ngControl.errors === null) {\n            this.createSelectionOfTimeComponentInInput(initialCursorStart + 1);\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this.elementRef.nativeElement.value && !this.isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    writeValue(value: Date | null): void {\n        if (value !== null) {\n            this.renderer.setProperty(this.elementRef.nativeElement,\n                'value',\n                this.getTimeStringFromDate(value, this.timeFormat)\n            );\n        }\n        this.onChange(value || null);\n        this.applyInputChanges();\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n\n        const keyCode: string = this.getKeyCode(event);\n\n        if (keyCode === ARROW_UP_KEYCODE || keyCode === ARROW_DOWN_KEYCODE) {\n            this.upDownTimeByArrowKeys(event);\n        }\n        if (keyCode === ARROW_LEFT_KEYCODE || keyCode === ARROW_RIGHT_KEYCODE) {\n            this.switchSelectionBetweenTimeparts(event);\n        }\n    }\n\n    registerOnChange(fn: (value: Date) => void): void {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    /** Does some manual dirty checking on the native input `value` property. */\n    private dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this.previousNativeValue !== newValue) {\n            this.previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Checks whether the input is invalid based on the native validation. */\n    private isBadInput(): boolean {\n        const validity = (<HTMLInputElement> this.elementRef.nativeElement).validity;\n\n        return validity && validity.badInput;\n    }\n\n    private applyInputChanges(applyParams: {\n        changedTime?: Date;\n        doTimestringReformat?: boolean;\n    } = {}): void {\n        const { changedTime, doTimestringReformat = true } = applyParams;\n        const timeToApply: Date | undefined = changedTime ||\n            this.getDateFromTimeString(this.elementRef.nativeElement.value);\n        this.currentDateTimeInput = timeToApply;\n\n        if (doTimestringReformat && timeToApply !== undefined) {\n            const selectionStart: number = this.elementRef.nativeElement.selectionStart;\n            const selectionEnd: number = this.elementRef.nativeElement.selectionEnd;\n            this.renderer.setProperty(\n                this.elementRef.nativeElement,\n                'value',\n                this.getTimeStringFromDate(timeToApply, this.timeFormat));\n            this.elementRef.nativeElement.selectionStart = selectionStart;\n            this.elementRef.nativeElement.selectionEnd = selectionEnd;\n        }\n\n        (<FormControl> this.ngControl.control).updateValueAndValidity();\n        const result = this.ngControl.errors === null && timeToApply !== undefined ? timeToApply : null;\n        this.onChange(result);\n        this.stateChanges.next();\n    }\n\n    private upDownTimeByArrowKeys(event: KeyboardEvent): void {\n        event.preventDefault();\n\n        let changedTime: Date | undefined = this.currentDateTimeInput;\n        if (changedTime !== undefined) {\n            const cursorPos = this.elementRef.nativeElement.selectionStart;\n\n            const modifiedTimePart = this.getTimeEditMetrics(cursorPos)\n                .modifiedTimePart;\n            const keyCode: string = this.getKeyCode(event);\n            if (keyCode === ARROW_UP_KEYCODE) { changedTime = this.incrementTime(changedTime, modifiedTimePart); }\n            if (keyCode === ARROW_DOWN_KEYCODE) { changedTime = this.decrementTime(changedTime, modifiedTimePart); }\n            this.applyInputChanges({ changedTime });\n            this.createSelectionOfTimeComponentInInput(cursorPos);\n        }\n    }\n\n    private switchSelectionBetweenTimeparts(event: KeyboardEvent): void {\n        const changedTime: Date | undefined = this.currentDateTimeInput;\n        const keyCode: string = this.getKeyCode(event);\n\n        if (changedTime !== undefined) {\n            let cursorPos: number = this.elementRef.nativeElement.selectionStart;\n            if (keyCode === ARROW_LEFT_KEYCODE) {\n                cursorPos = this.getCursorPositionOfPrevTimePartStart(cursorPos, this.elementRef.nativeElement.value);\n            } else if (keyCode === ARROW_RIGHT_KEYCODE) {\n                cursorPos = this.getCursorPositionOfNextTimePartStart(cursorPos, this.elementRef.nativeElement.value);\n            }\n            this.createSelectionOfTimeComponentInInput(cursorPos);\n        }\n    }\n\n    /**\n     * @description Microsoft EDGE doesn't support KeyboaedEvent.code thus we need this helper\n     */\n    private getKeyCode(event: KeyboardEvent): string {\n        return event.code || event.key;\n    }\n\n    private createSelectionOfTimeComponentInInput(cursorPos: number): void {\n        setTimeout(() => {\n            const newEditParams = this.getTimeEditMetrics(cursorPos);\n            this.elementRef.nativeElement.selectionStart = newEditParams.cursorStartPosition;\n            this.elementRef.nativeElement.selectionEnd = newEditParams.cursorEndPosition;\n        });\n    }\n\n    private incrementTime(dateVal: Date,\n                          whatToIncrement: TimeParts = TimeParts.seconds): Date {\n        let { hours, minutes, seconds } = this.getTimeDigitsFromDate(dateVal);\n\n        switch (whatToIncrement) {\n            case TimeParts.hours:\n                hours++;\n                break;\n            case TimeParts.minutes:\n                minutes++;\n                break;\n            case TimeParts.seconds:\n                seconds++;\n                break;\n            default:\n        }\n\n        if (seconds > SECONDS_PER_MINUTE) { seconds = 0; }\n\n        if (minutes > MINUTES_PER_HOUR) { minutes = 0; }\n\n        if (hours > HOURS_PER_DAY) { hours = 0; }\n\n        return <Date> this.getDateFromTimeDigits(hours, minutes, seconds);\n    }\n\n    /**\n     * @description Decrement part of time\n     */\n    private decrementTime(dateVal: Date,\n                          whatToDecrement: TimeParts = TimeParts.seconds): Date {\n        let { hours, minutes, seconds } = this.getTimeDigitsFromDate(dateVal);\n\n        switch (whatToDecrement) {\n            case TimeParts.hours:\n                hours--;\n                break;\n            case TimeParts.minutes:\n                minutes--;\n                break;\n            case TimeParts.seconds:\n                seconds--;\n                break;\n            default:\n        }\n\n        if (seconds < 0) { seconds = SECONDS_PER_MINUTE; }\n\n        if (minutes < 0) { minutes = MINUTES_PER_HOUR; }\n\n        if (hours < 0) { hours = HOURS_PER_DAY; }\n\n        return <Date> this.getDateFromTimeDigits(hours, minutes, seconds);\n    }\n\n    private getCursorPositionOfPrevTimePartStart(cursorPos: number, timeString: string): number {\n        return cursorPos === 0 ? timeString.length : cursorPos - 1;\n    }\n\n    private getCursorPositionOfNextTimePartStart(cursorPos: number,\n                                                 timeString: string,\n                                                 timeDevider: string = ':'): number {\n        const nextDividerPos: number = timeString.indexOf(timeDevider, cursorPos);\n\n        return nextDividerPos !== undefined ? nextDividerPos + 1 : 0;\n    }\n\n    /**\n     * @description Get params for arrow-keys (up/down) time valie edit.\n     * @param cursorPosition Current cursor position in timeString\n     */\n    private getTimeEditMetrics(cursorPosition: number): {\n        modifiedTimePart: TimeParts;\n        cursorStartPosition: number;\n        cursorEndPosition: number;\n    } {\n        const timeString: string = this.elementRef.nativeElement.value;\n        let modifiedTimePart: TimeParts;\n        let cursorStartPosition: number;\n        let cursorEndPosition: number;\n        const hoursIndex = 0;\n        const minutesIndex = timeString.indexOf(':', hoursIndex + 1);\n        const secondsIndex = minutesIndex !== -1 ? timeString.indexOf(':', minutesIndex + 1) : -1;\n\n        if (secondsIndex !== -1 && cursorPosition > secondsIndex) {\n            modifiedTimePart = TimeParts.seconds;\n            cursorStartPosition = secondsIndex + 1;\n            cursorEndPosition = timeString.length;\n        } else if (minutesIndex !== -1 && cursorPosition > minutesIndex) {\n            modifiedTimePart = TimeParts.minutes;\n            cursorStartPosition = minutesIndex + 1;\n            cursorEndPosition = secondsIndex > -1 ? secondsIndex : timeString.length;\n        } else {\n            modifiedTimePart = TimeParts.hours;\n            cursorStartPosition = hoursIndex;\n            cursorEndPosition = minutesIndex !== -1 ? minutesIndex : timeString.length;\n        }\n\n        return {\n            modifiedTimePart,\n            cursorStartPosition,\n            cursorEndPosition\n        };\n    }\n\n    /**\n     * @description Create time string for displaying inside input element of UI\n     */\n    private getTimeStringFromDate(tempVal: Date,\n                                  timeFormat: TimeFormats = DEFAULT_TIME_FORMAT): string {\n        const hours: string = this.getNumberWithLeadingZero(tempVal.getHours());\n        const minutes: string = this.getNumberWithLeadingZero(tempVal.getMinutes());\n        const seconds: string = this.getNumberWithLeadingZero(tempVal.getSeconds());\n\n        const formattedTimeGenerators = {\n            [TimeFormats.HHmm]: () => `${hours}:${minutes}`,\n            [TimeFormats.HHmmss]: () => `${hours}:${minutes}:${seconds}`\n        };\n\n        return formattedTimeGenerators[timeFormat]();\n    }\n\n    private getParsedTimeParts(timeString: string): {\n        hoursOnly: any;\n        hoursAndMinutes: any;\n        hoursAndMinutesAndSeconds: any;\n    } {\n        const momentWrappedTime = this.dateAdapter.parse(timeString, [\n            'h:m a',\n            'h:m:s a',\n            'H:m',\n            'H:m:s'\n        ]);\n\n        const convertedTimeString = momentWrappedTime !== null\n            ? momentWrappedTime.format('HH:mm:ss')\n            : '';\n\n        const hoursAndMinutesAndSeconds = convertedTimeString.match(HOURS_MINUTES_SECONDS_REGEXP);\n        const hoursAndMinutes = convertedTimeString.match(HOURS_MINUTES_REGEXP);\n        const hoursOnly = convertedTimeString.match(HOURS_ONLY_REGEXP);\n\n        return {\n            hoursOnly,\n            hoursAndMinutes,\n            hoursAndMinutesAndSeconds\n        };\n    }\n\n    /**\n     * @description Create Date object from separate parts of time\n     */\n    private getDateFromTimeDigits(hours: number, minutes: number, seconds: number = 0): Date | undefined {\n        return this.getDateFromTimeString(`${hours}:${minutes}:${seconds}`);\n    }\n\n    private getDateFromTimeString(timeString: string | undefined): Date | undefined {\n        // TODO Use moment-js\n        if (timeString === undefined) { return; }\n\n        const {\n            hoursOnly,\n            hoursAndMinutes,\n            hoursAndMinutesAndSeconds\n        } = this.getParsedTimeParts(timeString);\n\n        if (timeString.trim().length === 0 ||\n            hoursOnly === null && hoursAndMinutes === null && hoursAndMinutesAndSeconds === null) {\n            return;\n        }\n\n        // tslint:disable no-magic-numbers\n        let hours: number = 0;\n        let minutes: number = 0;\n        let seconds: number = 0;\n\n        if (hoursOnly) {\n            hours = Number(hoursOnly[1]);\n        } else if (hoursAndMinutes) {\n            hours = Number(hoursAndMinutes[1]);\n            minutes = Number(hoursAndMinutes[2]);\n        } else if (hoursAndMinutesAndSeconds) {\n            hours = Number(hoursAndMinutesAndSeconds[1]);\n            minutes = Number(hoursAndMinutesAndSeconds[2]);\n            seconds = Number(hoursAndMinutesAndSeconds[3]);\n        }\n        // const timestamp: number = Date.parse(fullDateString);\n        const resultDate: Date = new Date(1970, 0, 1, hours, minutes, seconds);\n        // tslint:enable no-magic-numbers\n\n        return isNaN(resultDate.getTime()) ? undefined : resultDate;\n    }\n\n    private getNumberWithLeadingZero(digit: number): string {\n        const MAX_DIGIT_WITH_LEADING_ZERO: number = 9;\n\n        return digit > MAX_DIGIT_WITH_LEADING_ZERO ? `${digit}` : `0${digit}`;\n    }\n\n    private getTimeDigitsFromDate(dateVal: Date): { hours: number; minutes: number; seconds: number } {\n        return {\n            hours: dateVal.getHours(),\n            minutes: dateVal.getMinutes(),\n            seconds: dateVal.getSeconds()\n        };\n    }\n\n    private parseValidator(): ValidationErrors | null {\n        return this.currentDateTimeInput === undefined ?\n            { mcTimepickerParse: { text: this.elementRef.nativeElement.value } } :\n            null;\n    }\n\n    private minTimeValidator(): ValidationErrors | null {\n\n        if (this.currentDateTimeInput !== undefined &&\n            this.minDateTime !== undefined &&\n            this.isTimeLowerThenMin(this.currentDateTimeInput)) {\n            return { mcTimepickerLowerThenMintime: { text: this.elementRef.nativeElement.value } };\n        }\n\n        return null;\n    }\n\n    private maxTimeValidator(): ValidationErrors | null {\n        if (this.currentDateTimeInput !== undefined &&\n            this.maxDateTime !== undefined &&\n            this.isTimeGreaterThenMax(this.currentDateTimeInput)) {\n            return { mcTimepickerHigherThenMaxtime: { text: this.elementRef.nativeElement.value } };\n        }\n\n        return null;\n    }\n\n    private isTimeLowerThenMin(timeToCompare: Date): boolean {\n        return timeToCompare.getTime() - (<Date> this.minDateTime).getTime() < 0;\n    }\n\n    private isTimeGreaterThenMax(timeToCompare: Date): boolean {\n        return timeToCompare.getTime() - (<Date> this.maxDateTime).getTime() >= 0;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McTimepicker } from './timepicker';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        FormsModule\n    ],\n    declarations: [\n        McTimepicker\n    ],\n    exports: [\n        McTimepicker\n    ]\n})\nexport class McTimepickerModule {}\n","import { InjectionToken } from '@angular/core';\n\n\n/** Injection token that can be used to access the data that was passed in to a sidepanel. */\nexport const MC_SIDEPANEL_DATA = new InjectionToken<any>('McSidepanelData');\n\nexport enum McSidepanelPosition {\n    Right = 'right',\n    Left = 'left',\n    Top = 'top',\n    Bottom = 'bottom'\n}\n\nexport class McSidepanelConfig<D = any> {\n    /** ID for the sidepanel. If omitted, a unique one will be generated. */\n    id?: string;\n\n    /** Data being injected into the child component. */\n    data?: D | null = null;\n\n    position?: McSidepanelPosition = McSidepanelPosition.Right;\n\n    /** Whether the sidepanel has a backdrop. */\n    hasBackdrop?: boolean = true;\n\n    /** When we open multiple sidepanels, backdrop appears only once, except cases then this flag is true. */\n    requiredBackdrop?: boolean = false;\n\n    /** Whether the user can use escape or clicking outside to close the sidepanel. */\n    disableClose?: boolean = false;\n\n    /** Custom class for the overlay pane. */\n    overlayPanelClass?: string | string[] = '';\n}\n","import { animate, AnimationTriggerMetadata, state, style, transition, trigger } from '@angular/animations';\nimport { AnimationCurves } from '@ptsecurity/mosaic/core';\n\nimport { McSidepanelPosition } from './sidepanel-config';\n\n\nexport enum McSidepanelAnimationState {\n    Void = 'void',\n    Visible = 'visible',\n    Hidden = 'hidden'\n}\n\n// TODO Find a way to use dynamic keys and avoid error \"Expression form not supported.\"\n// tslint:disable-next-line\nexport const mcSidepanelTransformAnimation: Record<McSidepanelPosition, { in: string; out: string }> = {\n    right: { in: 'translateX(100%)', out: 'translateX(0%)' },\n    left: { in: 'translateX(-100%)', out: 'translateX(0%)' },\n    top: { in: 'translateY(-100%)', out: 'translateY(0%)' },\n    bottom: { in: 'translateY(100%)', out: 'translateY(0%)' }\n};\n\nexport const mcSidepanelAnimations: {\n    readonly sidepanelState: AnimationTriggerMetadata;\n} = {\n    sidepanelState: trigger('state', [\n        state('hidden',\n            style({ transform: '{{transformIn}}' }),\n            { params: { transformIn: mcSidepanelTransformAnimation[McSidepanelPosition.Right].in }}\n        ),\n        state('visible',\n            style({ transform: '{{transformOut}}' }),\n            { params: { transformOut: mcSidepanelTransformAnimation[McSidepanelPosition.Right].out }}\n        ),\n        transition('visible => void, visible => hidden',\n            animate(`200ms ${AnimationCurves.AccelerationCurve}`)),\n        transition('void => visible',\n            animate(`200ms ${AnimationCurves.DecelerationCurve}`))\n    ])\n};\n","import { AnimationEvent } from '@angular/animations';\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ComponentRef,\n    ElementRef,\n    EmbeddedViewRef,\n    EventEmitter, Inject, InjectionToken,\n    OnDestroy,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal } from '@ptsecurity/cdk/portal';\n\nimport {\n    mcSidepanelAnimations,\n    McSidepanelAnimationState,\n    mcSidepanelTransformAnimation\n} from './sidepanel-animations';\n\nimport { McSidepanelConfig, McSidepanelPosition } from './sidepanel-config';\n\n\nexport const MC_SIDEPANEL_WITH_INDENT =\n    new InjectionToken<boolean>('mc-sidepanel-with-indent');\n\nexport const MC_SIDEPANEL_WITH_SHADOW =\n    new InjectionToken<boolean>('mc-sidepanel-with-shadow');\n\n@Component({\n    selector: 'mc-sidepanel-container',\n    templateUrl: './sidepanel-container.component.html',\n    styleUrls: ['./sidepanel.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    animations: [mcSidepanelAnimations.sidepanelState],\n    host: {\n        class: 'mc-sidepanel-container',\n        tabindex: '-1',\n        role: 'dialog',\n        'aria-modal': 'true',\n        '[attr.id]': 'id',\n        '[@state]': `{\n            value: animationState,\n            params: animationTransform\n        }`,\n        '(@state.start)': 'onAnimation($event)',\n        '(@state.done)': 'onAnimation($event)'\n    }\n})\nexport class McSidepanelContainerComponent extends BasePortalOutlet implements OnDestroy {\n    /** ID for the container DOM element. */\n    id: string;\n\n    /** The portal outlet inside of this container into which the content will be loaded. */\n    @ViewChild(CdkPortalOutlet) portalOutlet: CdkPortalOutlet;\n\n    /** The state of the sidepanel animations. */\n    animationState: McSidepanelAnimationState = McSidepanelAnimationState.Void;\n\n    animationTransform: { transformIn: string; transformOut: string };\n\n    /** Emits whenever the state of the animation changes. */\n    animationStateChanged = new EventEmitter<AnimationEvent>();\n\n    /** Whether the component has been destroyed. */\n    private destroyed: boolean;\n\n    constructor(\n        private elementRef: ElementRef<HTMLElement>,\n        private changeDetectorRef: ChangeDetectorRef,\n        public sidepanelConfig: McSidepanelConfig,\n        @Inject(MC_SIDEPANEL_WITH_INDENT) public withIndent: boolean,\n        @Inject(MC_SIDEPANEL_WITH_SHADOW) public withShadow: boolean) {\n        super();\n    }\n\n    ngOnDestroy(): void {\n        this.destroyed = true;\n    }\n\n    /** Attach a component portal as content to this sidepanel container. */\n    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n        this.validatePortalAttached();\n        this.setAnimation();\n        this.setPanelClass();\n\n        return this.portalOutlet.attachComponentPortal(portal);\n    }\n\n    /** Attach a template portal as content to this sidepanel container. */\n    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n        this.validatePortalAttached();\n        this.setAnimation();\n        this.setPanelClass();\n\n        return this.portalOutlet.attachTemplatePortal(portal);\n    }\n\n    /** Begin animation of the sidepanel entrance into view. */\n    enter(): void {\n        if (!this.destroyed) {\n            this.animationState = McSidepanelAnimationState.Visible;\n            this.changeDetectorRef.detectChanges();\n        }\n    }\n\n    /** Begin animation of the sidepanel exiting from view. */\n    exit(): void {\n        if (!this.destroyed) {\n            this.animationState = McSidepanelAnimationState.Hidden;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    onAnimation(event: AnimationEvent) {\n        this.animationStateChanged.emit(event);\n    }\n\n    private setAnimation() {\n        const position: McSidepanelPosition = this.sidepanelConfig.position!;\n\n        this.animationTransform = {\n            transformIn: mcSidepanelTransformAnimation[position].in,\n            transformOut: mcSidepanelTransformAnimation[position].out\n        };\n    }\n\n    private setPanelClass() {\n        const element: HTMLElement = this.elementRef.nativeElement;\n        const position: McSidepanelPosition = this.sidepanelConfig.position!;\n\n        element.classList.add(`mc-sidepanel-container_${position}`);\n\n        if (this.withShadow) {\n            element.classList.add('mc-sidepanel-container_shadowed');\n        }\n    }\n\n    private validatePortalAttached() {\n        if (this.portalOutlet.hasAttached()) {\n            throw Error('Attempting to attach sidepanel content after content is already attached');\n        }\n    }\n}\n","import { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { merge, Observable, Subject } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\n\nimport { McSidepanelAnimationState } from './sidepanel-animations';\nimport { McSidepanelConfig } from './sidepanel-config';\nimport { McSidepanelContainerComponent } from './sidepanel-container.component';\n\n\n// Counter for unique sidepanel ids.\nlet uniqueId = 0;\n\nexport class McSidepanelRef<T = any, R = any> {\n    readonly id: string;\n\n    /** Instance of the component making up the content of the sidepanel. */\n    instance: T;\n\n    /** Subject for notifying the user that the sidepanel has been closed and dismissed. */\n    private readonly afterClosed$ = new Subject<R | undefined>();\n\n    /** Subject for notifying the user that the sidepanel has opened and appeared. */\n    private readonly afterOpened$ = new Subject<void>();\n\n    /** Result to be passed down to the `afterDismissed` stream. */\n    private result: R | undefined;\n\n    constructor(\n        public containerInstance: McSidepanelContainerComponent,\n        private overlayRef: OverlayRef,\n        public config: McSidepanelConfig) {\n\n        this.id = this.config.id || `mc-sidepanel-${uniqueId++}`;\n        this.containerInstance.id = this.id;\n\n        // Emit when opening animation completes\n        containerInstance.animationStateChanged.pipe(\n            filter(\n                (event) => event.phaseName === 'done' && event.toState === McSidepanelAnimationState.Visible\n            ),\n            take(1)\n        ).subscribe(() => {\n            this.afterOpened$.next();\n            this.afterOpened$.complete();\n        });\n\n        // Dispose overlay when closing animation is complete\n        containerInstance.animationStateChanged.pipe(\n            filter(\n                (event) => event.phaseName === 'done' && event.toState === McSidepanelAnimationState.Hidden\n            ),\n            take(1)\n        ).subscribe(() => {\n            overlayRef.dispose();\n            this.afterClosed$.next(this.result);\n            this.afterClosed$.complete();\n        });\n\n        if (!containerInstance.sidepanelConfig.disableClose) {\n            merge(\n                overlayRef.backdropClick(),\n                overlayRef.keydownEvents().pipe(\n                    // tslint:disable:deprecation\n                    // keyCode is deprecated, but IE11 and Edge don't support code property, which we need use instead\n                    filter((event) => event.keyCode === ESCAPE)\n                )\n            ).subscribe(() => this.close());\n        }\n    }\n\n    close(result?: R): void {\n        if (!this.afterClosed$.closed) {\n            // Transition the backdrop in parallel to the sidepanel.\n            this.containerInstance.animationStateChanged.pipe(\n                filter((event) => event.phaseName === 'done'),\n                take(1)\n            ).subscribe(() => this.overlayRef.detachBackdrop());\n\n            this.result = result;\n            this.containerInstance.exit();\n        }\n    }\n\n    /** Gets an observable that is notified when the sidepanel is finished closing. */\n    afterClosed(): Observable<R | undefined> {\n        return this.afterClosed$.asObservable();\n    }\n\n    /** Gets an observable that is notified when the sidepanel has opened and appeared. */\n    afterOpened(): Observable<void> {\n        return this.afterOpened$.asObservable();\n    }\n}\n","import {\n    ComponentRef,\n    Inject,\n    Injectable,\n    InjectionToken,\n    Injector, OnDestroy,\n    Optional,\n    SkipSelf,\n    TemplateRef\n} from '@angular/core';\nimport { Overlay, OverlayConfig, OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal, IComponentType, PortalInjector, TemplatePortal } from '@ptsecurity/cdk/portal';\n\nimport { MC_SIDEPANEL_DATA, McSidepanelConfig } from './sidepanel-config';\nimport {\n    McSidepanelContainerComponent,\n    MC_SIDEPANEL_WITH_INDENT,\n    MC_SIDEPANEL_WITH_SHADOW\n} from './sidepanel-container.component';\nimport { McSidepanelRef } from './sidepanel-ref';\n\n\n/** Injection token that can be used to specify default sidepanel options. */\nexport const MC_SIDEPANEL_DEFAULT_OPTIONS =\n    new InjectionToken<McSidepanelConfig>('mc-sidepanel-default-options');\n\n@Injectable()\nexport class McSidepanelService implements OnDestroy {\n    private openedSidepanelsAtThisLevel: McSidepanelRef[] = [];\n\n    /** Keeps track of the currently-open sidepanels. */\n    get openedSidepanels(): McSidepanelRef[] {\n        return this.parentSidepanelService ? this.parentSidepanelService.openedSidepanels :\n            this.openedSidepanelsAtThisLevel;\n    }\n\n    constructor(\n        private overlay: Overlay,\n        private injector: Injector,\n        @Optional() @Inject(MC_SIDEPANEL_DEFAULT_OPTIONS) private defaultOptions: McSidepanelConfig,\n        @Optional() @SkipSelf() private parentSidepanelService: McSidepanelService) {\n    }\n\n    ngOnDestroy() {\n        // Only close the sidepanels at this level on destroy\n        // since the parent service may still be active.\n        this.closeSidepanels(this.openedSidepanelsAtThisLevel);\n    }\n\n    open<T, D = any>(componentOrTemplateRef: IComponentType<T> | TemplateRef<T>,\n                     config?: McSidepanelConfig<D>): McSidepanelRef<T> {\n        const fullConfig = {\n            ...(this.defaultOptions || new McSidepanelConfig()),\n            ...config\n        };\n\n        if (fullConfig.id && this.getSidepanelById(fullConfig.id)) {\n            throw Error(`Sidepanel with id \"${fullConfig.id}\" exists already. The sidepanel id must be unique.`);\n        }\n\n        const overlayRef = this.createOverlay(fullConfig);\n        const container = this.attachContainer(overlayRef, fullConfig);\n        const ref = new McSidepanelRef(container, overlayRef, fullConfig);\n\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n                $implicit: fullConfig.data,\n                sidepanelRef: ref\n            } as any));\n        } else {\n            const injector = this.createInjector(fullConfig, ref, container);\n            const portal = new ComponentPortal(componentOrTemplateRef, undefined, injector);\n            const contentRef = container.attachComponentPortal(portal);\n\n            ref.instance = contentRef.instance;\n        }\n\n        this.openedSidepanels.push(ref);\n        ref.afterClosed().subscribe(() => this.removeOpenSidepanel(ref));\n        container.enter();\n\n        return ref;\n    }\n\n    /**\n     * Closes all of the currently-open sidepanels.\n     */\n    closeAll(): void {\n        this.closeSidepanels(this.openedSidepanels);\n    }\n\n    /**\n     * Finds an open sidepanel by its id.\n     * @param id ID to use when looking up the sidepanel.\n     */\n    getSidepanelById(id: string): McSidepanelRef | undefined {\n        return this.openedSidepanels.find((sidepanel) => sidepanel.id === id);\n    }\n\n    /**\n     * Attaches the sidepanel container component to the overlay.\n     */\n    private attachContainer(overlayRef: OverlayRef, config: McSidepanelConfig): McSidepanelContainerComponent {\n        const openedSidepanelsWithSamePosition = this.getOpenedSidepanelsWithSamePosition(config);\n\n        const injector = new PortalInjector(this.injector, new WeakMap<any>([\n            [McSidepanelConfig, config],\n            [MC_SIDEPANEL_WITH_INDENT, openedSidepanelsWithSamePosition.length >= 1],\n            [MC_SIDEPANEL_WITH_SHADOW, openedSidepanelsWithSamePosition.length < 2] // tslint:disable-line\n        ]));\n\n        const containerPortal = new ComponentPortal(McSidepanelContainerComponent, undefined, injector);\n        const containerRef: ComponentRef<McSidepanelContainerComponent> = overlayRef.attach(containerPortal);\n\n        return containerRef.instance;\n    }\n\n    /**\n     * Creates a custom injector to be used inside the sidepanel. This allows a component loaded inside\n     * of a sidepanel to close itself and, optionally, to return a value.\n     * @param config Config object that is used to construct the sidepanel.\n     * @param sidepanelRef Reference to the sidepanel.\n     * @param sidepanelContainer Sidepanel container element that wraps all of the contents.\n     * @returns The custom injector that can be used inside the sidepanel.\n     */\n    private createInjector<T>(\n        config: McSidepanelConfig,\n        sidepanelRef: McSidepanelRef<T>,\n        sidepanelContainer: McSidepanelContainerComponent): PortalInjector {\n\n        // The McSidepanelContainerComponent is injected in the portal as the McSidepanelContainerComponent and\n        // the sidepanel's content are created out of the same ViewContainerRef and as such, are siblings for injector\n        // purposes. To allow the hierarchy that is expected, the McSidepanelContainerComponent is explicitly\n        // added to the injection tokens.\n        const injectionTokens = new WeakMap<any>([\n            [McSidepanelContainerComponent, sidepanelContainer],\n            [MC_SIDEPANEL_DATA, config.data],\n            [McSidepanelRef, sidepanelRef]\n        ]);\n\n        return new PortalInjector(this.injector, injectionTokens);\n    }\n\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified sidepanel config.\n     */\n    private createOverlay(config: McSidepanelConfig): OverlayRef {\n        const overlayConfig = new OverlayConfig({\n            hasBackdrop: config.hasBackdrop,\n            backdropClass: this.getBackdropClass(config),\n            maxWidth: '100%',\n            panelClass: config.overlayPanelClass,\n            scrollStrategy: this.overlay.scrollStrategies.block(),\n            positionStrategy: this.overlay.position().global()\n        });\n\n        return this.overlay.create(overlayConfig);\n    }\n\n    private closeSidepanels(sidepanels: McSidepanelRef[]) {\n        const reversedOpenedSidepanels = [...sidepanels.reverse()];\n\n        reversedOpenedSidepanels.forEach((sidepanelRef: McSidepanelRef) => {\n            sidepanelRef.close();\n        });\n    }\n\n    private getBackdropClass(config: McSidepanelConfig): string {\n        const hasOpenedSidepanelWithBackdrop =\n            this.openedSidepanels.some((sidepanelRef) => sidepanelRef.config.hasBackdrop!);\n\n        return config.requiredBackdrop || !hasOpenedSidepanelWithBackdrop ? 'cdk-overlay-dark-backdrop' :\n            'cdk-overlay-transparent-backdrop';\n    }\n\n    private getOpenedSidepanelsWithSamePosition(config: McSidepanelConfig): McSidepanelRef[] {\n        return this.openedSidepanels.filter((sidepanelRef) => sidepanelRef.config.position === config.position);\n    }\n\n    /**\n     * Removes a sidepanel from the array of open sidepanels.\n     * @param sidepanelRef Sidepanel to be removed.\n     */\n    private removeOpenSidepanel(sidepanelRef: McSidepanelRef) {\n        const index = this.openedSidepanels.indexOf(sidepanelRef);\n\n        if (index > -1) {\n            this.openedSidepanels.splice(index, 1);\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { MC_SELECT_SCROLL_STRATEGY_PROVIDER, McOptionModule } from '@ptsecurity/mosaic/core';\nimport { McFormFieldModule } from '@ptsecurity/mosaic/form-field';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\nimport { McTagsModule } from '@ptsecurity/mosaic/tags';\n\nimport { McSelect, McSelectSearch, McSelectTrigger } from './select.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        McOptionModule,\n        McIconModule,\n        McTagsModule\n    ],\n    exports: [\n        McFormFieldModule,\n        McSelect,\n        McSelectSearch,\n        McSelectTrigger,\n        McOptionModule,\n        CommonModule\n    ],\n    declarations: [\n        McSelect,\n        McSelectSearch,\n        McSelectTrigger],\n    providers: [MC_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class McSelectModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    NgZone,\n    OnDestroy,\n    Output,\n    QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { BACKSPACE, DELETE, SPACE } from '@ptsecurity/cdk/keycodes';\nimport {\n    CanColor,\n    CanColorCtor,\n    CanDisable,\n    CanDisableCtor,\n    mixinColor,\n    mixinDisabled\n} from '@ptsecurity/mosaic/core';\nimport { McIcon } from '@ptsecurity/mosaic/icon';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\n\n// tslint:disable-next-line:naming-convention\nexport interface McTagEvent {\n    tag: McTag;\n}\n\n/** Event object emitted by McTag when selected or deselected. */\nexport class McTagSelectionChange {\n    constructor(public source: McTag, public selected: boolean, public isUserInput = false) {}\n}\n\n\nconst TAG_ATTRIBUTE_NAMES = ['mc-basic-tag'];\n\n/**\n * Dummy directive to add CSS class to tag avatar.\n * @docs-private\n */\n@Directive({\n    selector: 'mc-tag-avatar, [mcTagAvatar]',\n    host: { class: 'mc-tag-avatar' }\n})\nexport class McTagAvatar {}\n\n/**\n * Dummy directive to add CSS class to tag trailing icon.\n * @docs-private\n */\n@Directive({\n    selector: 'mc-tag-trailing-icon, [mcTagTrailingIcon]',\n    host: { class: 'mc-tag-trailing-icon' }\n})\nexport class McTagTrailingIcon {}\n\nexport class McTagBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const _McTagMixinBase: CanColorCtor & CanDisableCtor & typeof McTagBase = mixinColor(mixinDisabled(McTagBase));\n\n\n@Component({\n    selector: 'mc-tag, [mc-tag], mc-basic-tag, [mc-basic-tag]',\n    exportAs: 'mcTag',\n    templateUrl: 'tag.partial.html',\n    styleUrls: ['./tag.css'],\n    inputs: ['color', 'disabled'],\n    host: {\n        class: 'mc-tag',\n        '[attr.tabindex]': 'disabled ? null : -1',\n        '[class.mc-tag-selected]': 'selected',\n        '[class.mc-tag-with-avatar]': 'avatar',\n        '[class.mc-tag-with-trailing-icon]': 'trailingIcon || removeIcon',\n        '[class.mc-tag-disabled]': 'disabled',\n        '[class.mc-disabled]': 'disabled',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': 'handleClick($event)',\n        '(keydown)': 'handleKeydown($event)',\n        '(focus)': 'focus()',\n        '(blur)': 'blur()'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McTag extends _McTagMixinBase implements IFocusableOption, OnDestroy, CanColor, CanDisable {\n    /** Emits when the tag is focused. */\n    readonly onFocus = new Subject<McTagEvent>();\n\n    /** Emits when the tag is blured. */\n    readonly onBlur = new Subject<McTagEvent>();\n\n    nativeElement: HTMLElement;\n\n    /** Whether the tag has focus. */\n    hasFocus: boolean = false;\n\n    /** Whether the tag list is selectable */\n    tagListSelectable: boolean = true;\n\n    @ContentChildren(McIcon) contentChildren: QueryList<McIcon>;\n\n    /** The tag avatar */\n    @ContentChild(McTagAvatar) avatar: McTagAvatar;\n\n    /** The tag's trailing icon. */\n    @ContentChild(McTagTrailingIcon) trailingIcon: McTagTrailingIcon;\n\n    /** The tag's remove toggler. */\n    @ContentChild(forwardRef(() => McTagRemove)) removeIcon: McTagRemove;\n\n    /** Emitted when the tag is selected or deselected. */\n    @Output() readonly selectionChange: EventEmitter<McTagSelectionChange> =\n        new EventEmitter<McTagSelectionChange>();\n\n    /** Emitted when the tag is destroyed. */\n    @Output() readonly destroyed: EventEmitter<McTagEvent> = new EventEmitter<McTagEvent>();\n\n    /** Emitted when a tag is to be removed. */\n    @Output() readonly removed: EventEmitter<McTagEvent> = new EventEmitter<McTagEvent>();\n\n    /** Whether the tag is selected. */\n    @Input()\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    set selected(value: boolean) {\n        const coercedValue = coerceBooleanProperty(value);\n\n        if (coercedValue !== this._selected) {\n            this._selected = coercedValue;\n            this.dispatchSelectionChange();\n        }\n    }\n\n    private _selected: boolean = false;\n\n    /** The value of the tag. Defaults to the content inside `<mc-tag>` tags. */\n    @Input()\n    get value(): any {\n        return this._value !== undefined\n            ? this._value\n            : this.elementRef.nativeElement.textContent;\n    }\n\n    set value(value: any) {\n        this._value = value;\n    }\n\n    private _value: any;\n\n    /**\n     * Whether or not the tag is selectable. When a tag is not selectable,\n     * changes to its selected state are always ignored. By default a tag is\n     * selectable, and it becomes non-selectable if its parent tag list is\n     * not selectable.\n     */\n    @Input()\n    get selectable(): boolean {\n        return this._selectable && this.tagListSelectable;\n    }\n\n    set selectable(value: boolean) {\n        this._selectable = coerceBooleanProperty(value);\n    }\n\n    private _selectable: boolean = true;\n\n    /**\n     * Determines whether or not the tag displays the remove styling and emits (removed) events.\n     */\n    @Input()\n    get removable(): boolean {\n        return this._removable;\n    }\n\n    set removable(value: boolean) {\n        this._removable = coerceBooleanProperty(value);\n    }\n\n    private _removable: boolean = true;\n\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value !== this.disabled) {\n            this._disabled = value;\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    constructor(public elementRef: ElementRef, private _ngZone: NgZone) {\n        super(elementRef);\n\n        this.addHostClassName();\n\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        this.addClassModificatorForIcons();\n    }\n\n    addClassModificatorForIcons() {\n        const icons = this.contentChildren.map((item) => item._elementRef.nativeElement);\n\n        if (icons.length === 1) {\n            const iconElement = icons[0];\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-left-icon');\n                }\n\n                if (iconElement.previousSibling) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-right-icon');\n                }\n            }\n        } else if (icons.length > 1) {\n            const firstIconElement = icons[0];\n            const secondIconElement = icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n\n    addHostClassName() {\n        // Add class for the different tags\n        for (const attr of TAG_ATTRIBUTE_NAMES) {\n            if (\n                this.elementRef.nativeElement.hasAttribute(attr) ||\n                this.elementRef.nativeElement.tagName.toLowerCase() === attr\n            ) {\n                    (this.elementRef.nativeElement as HTMLElement).classList.add(attr);\n\n                    return;\n            }\n        }\n        (this.elementRef.nativeElement as HTMLElement).classList.add('mc-standard-tag');\n    }\n\n    ngOnDestroy() {\n        this.destroyed.emit({ tag: this });\n    }\n\n    select(): void {\n        if (!this._selected) {\n            this._selected = true;\n            this.dispatchSelectionChange();\n        }\n    }\n\n    deselect(): void {\n        if (this._selected) {\n            this._selected = false;\n            this.dispatchSelectionChange();\n        }\n    }\n\n    selectViaInteraction(): void {\n        if (!this._selected) {\n            this._selected = true;\n            this.dispatchSelectionChange(true);\n        }\n    }\n\n    toggleSelected(isUserInput: boolean = false): boolean {\n        this._selected = !this.selected;\n        this.dispatchSelectionChange(isUserInput);\n\n        return this.selected;\n    }\n\n    /** Allows for programmatic focusing of the tag. */\n    focus(): void {\n        if (!this.hasFocus) {\n            this.elementRef.nativeElement.focus();\n            this.onFocus.next({ tag: this });\n        }\n        this.hasFocus = true;\n    }\n\n    /**\n     * Allows for programmatic removal of the tag. Called by the McTagList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the tag from the DOM.\n     */\n    remove(): void {\n        if (this.removable) {\n            this.removed.emit({ tag: this });\n        }\n    }\n\n    handleClick(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n        } else {\n            event.stopPropagation();\n        }\n    }\n\n    handleKeydown(event: KeyboardEvent): void {\n        if (this.disabled) { return; }\n\n        // tslint:disable-next-line: deprecation\n        switch (event.keyCode) {\n            case DELETE:\n            case BACKSPACE:\n                // If we are removable, remove the focused tag\n                this.remove();\n                // Always prevent so page navigation does not occur\n                event.preventDefault();\n                break;\n            case SPACE:\n                // If we are selectable, toggle the focused tag\n                if (this.selectable) {\n                    this.toggleSelected(true);\n                }\n\n                // Always prevent space from scrolling the page since the list has focus\n                event.preventDefault();\n                break;\n            default:\n        }\n    }\n\n    blur(): void {\n        // When animations are enabled, Angular may end up removing the tag from the DOM a little\n        // earlier than usual, causing it to be blurred and throwing off the logic in the tag list\n        // that moves focus not the next item. To work around the issue, we defer marking the tag\n        // as not focused until the next time the zone stabilizes.\n        this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                this._ngZone.run(() => {\n                    this.hasFocus = false;\n                    this.onBlur.next({ tag: this });\n                });\n            });\n    }\n\n    private dispatchSelectionChange(isUserInput = false) {\n        this.selectionChange.emit({\n            source: this,\n            isUserInput,\n            selected: this._selected\n        });\n    }\n}\n\n\n/**\n *\n * Example:\n *\n *     `<mc-tag>\n *       <mc-icon mcTagRemove>cancel</mc-icon>\n *     </mc-tag>`\n *\n * You *may* use a custom icon, but you may need to override the `mc-tag-remove` positioning\n * styles to properly center the icon within the tag.\n */\n@Directive({\n    selector: '[mcTagRemove]',\n    host: {\n        class: 'mc-tag-remove mc-tag-trailing-icon',\n        '(click)': 'handleClick($event)'\n    }\n})\nexport class McTagRemove {\n    constructor(protected parentTag: McTag) {}\n\n    /** Calls the parent tag's public `remove()` method if applicable. */\n    handleClick(event: Event): void {\n        if (this.parentTag.removable) {\n            this.parentTag.remove();\n        }\n\n        // We need to stop event propagation because otherwise the event will bubble up to the\n        // form field and cause the `onContainerClick` method to be invoked. This method would then\n        // reset the focused tag that has been focused after tag removal. Usually the parent\n        // the parent click listener of the `McTag` would prevent propagation, but it can happen\n        // that the tag is being removed before the event bubbles up.\n        event.stopPropagation();\n    }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    Self,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { FocusKeyManager } from '@ptsecurity/cdk/a11y';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { BACKSPACE, END, HOME } from '@ptsecurity/cdk/keycodes';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { merge, Observable, Subject, Subscription } from 'rxjs';\nimport { startWith, takeUntil } from 'rxjs/operators';\n\nimport { McTagTextControl } from './tag-text-control';\nimport { McTag, McTagEvent, McTagSelectionChange } from './tag.component';\n\n\nexport class McTagListBase {\n    constructor(\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const _McTagListMixinBase: CanUpdateErrorStateCtor & typeof McTagListBase = mixinErrorState(McTagListBase);\n\n\n// Increasing integer for generating unique ids for tag-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the tag list value has changed. */\nexport class McTagListChange {\n    constructor(public source: McTagList, public value: any) {}\n}\n\n\n@Component({\n    selector: 'mc-tag-list',\n    exportAs: 'mcTagList',\n    template: '<ng-content></ng-content>',\n    host: {\n        class: 'mc-tag-list',\n        '[attr.tabindex]': 'disabled ? null : _tabIndex',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-invalid]': 'errorState',\n        '[class.mc-required]': 'required',\n        '(focus)': 'focus()',\n        '(blur)': 'blur()',\n        '(keydown)': 'keydown($event)',\n        '[id]': 'uid'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McTagList }],\n    styleUrls: ['tag-list.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McTagList extends _McTagListMixinBase implements McFormFieldControl<any>,\n    ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n\n    readonly controlType: string = 'mc-tag-list';\n\n    /** Combined stream of all of the child tags' selection change events. */\n    get tagSelectionChanges(): Observable<McTagSelectionChange> {\n        return merge(...this.tags.map((tag) => tag.selectionChange));\n    }\n\n    /** Combined stream of all of the child tags' focus change events. */\n    get tagFocusChanges(): Observable<McTagEvent> {\n        return merge(...this.tags.map((tag) => tag.onFocus));\n    }\n\n    /** Combined stream of all of the child tags' blur change events. */\n    get tagBlurChanges(): Observable<McTagEvent> {\n        return merge(...this.tags.map((tag) => tag.onBlur));\n    }\n\n    /** Combined stream of all of the child tags' remove change events. */\n    get tagRemoveChanges(): Observable<McTagEvent> {\n        return merge(...this.tags.map((tag) => tag.destroyed));\n    }\n\n    /** The array of selected tags inside tag list. */\n    get selected(): McTag[] | McTag {\n        return this.multiple ? this.selectionModel.selected : this.selectionModel.selected[0];\n    }\n\n    /** Whether the user should be allowed to select multiple tags. */\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith(): (o1: any, o2: any) => boolean {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        this._compareWith = fn;\n\n        if (this.selectionModel) {\n            // A different comparator means the selection could change.\n            this.initializeSelection();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): any {\n        return this._value;\n    }\n\n    set value(value: any) {\n        this.writeValue(value);\n        this._value = value;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get id(): string {\n        return this.tagInput ? this.tagInput.id : this.uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get placeholder(): string {\n        return this.tagInput ? this.tagInput.placeholder : this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n\n    /** Whether any tags or the mcTagInput inside of this tag-list has focus. */\n    get focused(): boolean {\n        return (this.tagInput && this.tagInput.focused) || this.hasFocusedTag();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return (!this.tagInput || this.tagInput.empty) && this.tags.length === 0;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat(): boolean {\n        return !this.empty || this.focused;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        return this.ngControl ? !!this.ngControl.disabled : this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n        this.syncTagsDisabledState();\n    }\n\n    /**\n     * Whether or not this tag list is selectable. When a tag list is not selectable,\n     * the selected states for all the tags inside the tag list are always ignored.\n     */\n    @Input()\n    get selectable(): boolean {\n        return this._selectable;\n    }\n\n    set selectable(value: boolean) {\n        this._selectable = coerceBooleanProperty(value);\n\n        if (this.tags) {\n            this.tags.forEach((tag) => tag.tagListSelectable = this._selectable);\n        }\n    }\n\n    @Input()\n    set tabIndex(value: number) {\n        this.userTabIndex = value;\n        this._tabIndex = value;\n    }\n\n    /**\n     * Event that emits whenever the raw value of the tag-list changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    uid: string = `mc-tag-list-${nextUniqueId++}`;\n\n    /**\n     * User defined tab index.\n     * When it is not null, use user defined tab index. Otherwise use tabIndex\n     */\n    userTabIndex: number | null = null;\n\n    keyManager: FocusKeyManager<McTag>;\n\n    selectionModel: SelectionModel<McTag>;\n\n    tagChanges = new EventEmitter<any>();\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /** Orientation of the tag list. */\n    @Input('orientation') orientation: 'horizontal' | 'vertical' = 'horizontal';\n\n    /** Event emitted when the selected tag list value has been changed by the user. */\n    @Output() readonly change: EventEmitter<McTagListChange> = new EventEmitter<McTagListChange>();\n\n    /** The tag components contained within this tag list. */\n    @ContentChildren(McTag) tags: QueryList<McTag>;\n\n    _tabIndex = 0;\n\n    private _value: any;\n\n    private _required: boolean = false;\n\n    private _placeholder: string;\n\n    private _disabled: boolean = false;\n\n    private _selectable: boolean = true;\n\n    /** The tag input to add more tags */\n    private tagInput: McTagTextControl;\n\n    private _multiple: boolean = false;\n\n    /**\n     * When a tag is destroyed, we store the index of the destroyed tag until the tags\n     * query list notifies about the update. This is necessary because we cannot determine an\n     * appropriate tag that should receive focus until the array of tags updated completely.\n     */\n    private lastDestroyedTagIndex: number | null = null;\n\n    /** Subject that emits when the component has been destroyed. */\n    private destroyed = new Subject<void>();\n\n    /** Subscription to focus changes in the tags. */\n    private tagFocusSubscription: Subscription | null;\n\n    /** Subscription to blur changes in the tags. */\n    private tagBlurSubscription: Subscription | null;\n\n    /** Subscription to selection changes in tags. */\n    private tagSelectionSubscription: Subscription | null;\n\n    /** Subscription to remove changes in tags. */\n    private tagRemoveSubscription: Subscription | null;\n\n    constructor(\n        protected elementRef: ElementRef<HTMLElement>,\n        private changeDetectorRef: ChangeDetectorRef,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        @Optional() private dir: Directionality,\n        @Optional() parentForm: NgForm,\n        @Optional() parentFormGroup: FormGroupDirective,\n        @Optional() @Self() public ngControl: NgControl\n    ) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            this.ngControl.valueAccessor = this;\n        }\n    }\n\n    ngAfterContentInit() {\n        this.keyManager = new FocusKeyManager<McTag>(this.tags)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this.dir ? this.dir.value : 'ltr');\n\n        if (this.dir) {\n            this.dir.change\n                .pipe(takeUntil(this.destroyed))\n                .subscribe((dir) => this.keyManager.withHorizontalOrientation(dir));\n        }\n\n        // Prevents the tag list from capturing focus and redirecting\n        // it back to the first tag when the user tabs out.\n        this.keyManager.tabOut\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(() => {\n                this._tabIndex = -1;\n\n                setTimeout(() => {\n                    this._tabIndex = this.userTabIndex || 0;\n                    this.changeDetectorRef.markForCheck();\n                });\n            });\n\n        // When the list changes, re-subscribe\n        this.tags.changes\n            .pipe(startWith(null), takeUntil(this.destroyed))\n            .subscribe(() => {\n                if (this.disabled) {\n                    // Since this happens after the content has been\n                    // checked, we need to defer it to the next tick.\n                    Promise.resolve().then(() => { this.syncTagsDisabledState(); });\n                }\n\n                this.resetTags();\n\n                // Reset tags selected/deselected status\n                this.initializeSelection();\n\n                // Check to see if we need to update our tab index\n                this.updateTabIndex();\n\n                // Check to see if we have a destroyed tag and need to refocus\n                this.updateFocusForDestroyedTags();\n\n                // Defer setting the value in order to avoid the \"Expression\n                // has changed after it was checked\" errors from Angular.\n                Promise.resolve().then(() => { this.tagChanges.emit(this.tags.toArray()); });\n\n                this.stateChanges.next();\n            });\n    }\n\n    ngOnInit() {\n        this.selectionModel = new SelectionModel<McTag>(this.multiple, undefined, false);\n        this.stateChanges.next();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroyed.next();\n        this.destroyed.complete();\n        this.stateChanges.complete();\n\n        this.dropSubscriptions();\n    }\n\n    // tslint:disable-next-line:no-empty\n    onTouched = () => {};\n\n    // tslint:disable-next-line:no-empty\n    onChange: (value: any) => void = () => {};\n\n    /** Associates an HTML input element with this tag list. */\n    registerInput(inputElement: McTagTextControl): void {\n        this.tagInput = inputElement;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any): void {\n        if (this.tags) {\n            this.setSelectionByValue(value, false);\n        }\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this.onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n        this.stateChanges.next();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick(event: MouseEvent) {\n        if (!this.originatesFromTag(event)) {\n            this.focus();\n        }\n    }\n\n    /**\n     * Focuses the first non-disabled tag in this tag list, or the associated input when there\n     * are no eligible tags.\n     */\n    focus(): void {\n        if (this.disabled) { return; }\n\n        // TODO: ARIA says this should focus the first `selected` tag if any are selected.\n        // Focus on first element if there's no tagInput inside tag-list\n        if (this.tagInput && this.tagInput.focused) {\n            // do nothing\n        } else if (this.tags.length > 0) {\n            this.keyManager.setFirstItemActive();\n            this.stateChanges.next();\n        } else {\n            this.focusInput();\n            this.stateChanges.next();\n        }\n    }\n\n    /** Attempt to focus an input if we have one. */\n    focusInput() {\n        if (this.tagInput) {\n            this.tagInput.focus();\n        }\n    }\n\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n    keydown(event: KeyboardEvent) {\n        const target = event.target as HTMLElement;\n\n        // If they are on an empty input and hit backspace, focus the last tag\n        // tslint:disable-next-line: deprecation\n        if (event.keyCode === BACKSPACE && this.isInputEmpty(target)) {\n            this.keyManager.setLastItemActive();\n            event.preventDefault();\n        } else if (target && target.classList.contains('mc-tag')) {\n            // tslint:disable-next-line: deprecation\n            if (event.keyCode === HOME) {\n                this.keyManager.setFirstItemActive();\n                event.preventDefault();\n            // tslint:disable-next-line: deprecation\n            } else if (event.keyCode === END) {\n                this.keyManager.setLastItemActive();\n                event.preventDefault();\n            } else {\n                this.keyManager.onKeydown(event);\n            }\n\n            this.stateChanges.next();\n        }\n    }\n\n    setSelectionByValue(value: any, isUserInput: boolean = true) {\n        this.clearSelection();\n        this.tags.forEach((tag) => tag.deselect());\n\n        if (Array.isArray(value)) {\n            value.forEach((currentValue) => this.selectValue(currentValue, isUserInput));\n            this.sortValues();\n        } else {\n            const correspondingTag = this.selectValue(value, isUserInput);\n\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what tag the user interacted with last.\n            if (correspondingTag && isUserInput) {\n                this.keyManager.setActiveItem(correspondingTag);\n            }\n        }\n    }\n\n    /** When blurred, mark the field as touched when focus moved outside the tag list. */\n    blur() {\n        if (!this.hasFocusedTag()) {\n            this.keyManager.setActiveItem(-1);\n        }\n\n        if (!this.disabled) {\n            if (this.tagInput) {\n                // If there's a tag input, we should check whether the focus moved to tag input.\n                // If the focus is not moved to tag input, mark the field as touched. If the focus moved\n                // to tag input, do nothing.\n                // Timeout is needed to wait for the focus() event trigger on tag input.\n                setTimeout(() => {\n                    if (!this.focused) {\n                        this.markAsTouched();\n                    }\n                });\n            } else {\n                // If there's no tag input, then mark the field as touched.\n                this.markAsTouched();\n            }\n        }\n    }\n\n    /** Mark the field as touched */\n    markAsTouched() {\n        this.onTouched();\n        this.changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     */\n    protected updateTabIndex(): void {\n        // If we have 0 tags, we should not allow keyboard focus\n        this._tabIndex = this.userTabIndex || (this.tags.length === 0 ? -1 : 0);\n    }\n\n    /**\n     * If the amount of tags changed, we need to update the\n     * key manager state and focus the next closest tag.\n     */\n    protected updateFocusForDestroyedTags() {\n        if (this.lastDestroyedTagIndex != null && this.tags.length) {\n            const newTagIndex = Math.min(this.lastDestroyedTagIndex, this.tags.length - 1);\n            this.keyManager.setActiveItem(newTagIndex);\n        } else if (this.tags.length === 0) {\n            this.focusInput();\n        }\n\n        this.lastDestroyedTagIndex = null;\n    }\n\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of tags.\n     */\n    private isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.tags.length;\n    }\n\n    private isInputEmpty(element: HTMLElement): boolean {\n        if (element && element.nodeName.toLowerCase() === 'input') {\n            const input = element as HTMLInputElement;\n\n            return !input.value;\n        }\n\n        return false;\n    }\n\n    /**\n     * Finds and selects the tag based on its value.\n     * @returns Tag that has the corresponding value.\n     */\n    private selectValue(value: any, isUserInput: boolean = true): McTag | undefined {\n\n        const correspondingTag = this.tags.find((tag) => {\n            return tag.value != null && this._compareWith(tag.value, value);\n        });\n\n        if (correspondingTag) {\n            if (isUserInput) {\n                correspondingTag.selectViaInteraction();\n            } else {\n                correspondingTag.select();\n            }\n\n            this.selectionModel.select(correspondingTag);\n        }\n\n        return correspondingTag;\n    }\n\n    private initializeSelection(): void {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl || this._value) {\n                this.setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n                this.stateChanges.next();\n            }\n        });\n    }\n\n    /**\n     * Deselects every tag in the list.\n     * @param skip Tag that should not be deselected.\n     */\n    private clearSelection(skip?: McTag): void {\n        this.selectionModel.clear();\n        this.tags.forEach((tag) => {\n            if (tag !== skip) {\n                tag.deselect();\n            }\n        });\n        this.stateChanges.next();\n    }\n\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     */\n    private sortValues(): void {\n        if (this._multiple) {\n            this.selectionModel.clear();\n\n            this.tags.forEach((tag) => {\n                if (tag.selected) {\n                    this.selectionModel.select(tag);\n                }\n            });\n            this.stateChanges.next();\n        }\n    }\n\n    /** Emits change event to set the model value. */\n    private propagateChanges(fallbackValue?: any): void {\n        let valueToEmit: any = null;\n\n        if (Array.isArray(this.selected)) {\n            valueToEmit = this.selected.map((tag) => tag.value);\n        } else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.change.emit(new McTagListChange(this, valueToEmit));\n        this.valueChange.emit(valueToEmit);\n        this.onChange(valueToEmit);\n        this.changeDetectorRef.markForCheck();\n    }\n\n    private resetTags() {\n        this.dropSubscriptions();\n        this.listenToTagsFocus();\n        this.listenToTagsSelection();\n        this.listenToTagsRemoved();\n    }\n\n    private dropSubscriptions() {\n        if (this.tagFocusSubscription) {\n            this.tagFocusSubscription.unsubscribe();\n            this.tagFocusSubscription = null;\n        }\n\n        if (this.tagBlurSubscription) {\n            this.tagBlurSubscription.unsubscribe();\n            this.tagBlurSubscription = null;\n        }\n\n        if (this.tagSelectionSubscription) {\n            this.tagSelectionSubscription.unsubscribe();\n            this.tagSelectionSubscription = null;\n        }\n\n        if (this.tagRemoveSubscription) {\n            this.tagRemoveSubscription.unsubscribe();\n            this.tagRemoveSubscription = null;\n        }\n    }\n\n    /** Listens to user-generated selection events on each tag. */\n    private listenToTagsSelection(): void {\n        this.tagSelectionSubscription = this.tagSelectionChanges.subscribe((event) => {\n            if (event.source.selected) {\n                this.selectionModel.select(event.source);\n            } else {\n                this.selectionModel.deselect(event.source);\n            }\n\n            // For single selection tag list, make sure the deselected value is unselected.\n            if (!this.multiple) {\n                this.tags.forEach((tag) => {\n                    if (!this.selectionModel.isSelected(tag) && tag.selected) {\n                        tag.deselect();\n                    }\n                });\n            }\n\n            if (event.isUserInput) {\n                this.propagateChanges();\n            }\n        });\n    }\n\n    /** Listens to user-generated selection events on each tag. */\n    private listenToTagsFocus(): void {\n        this.tagFocusSubscription = this.tagFocusChanges.subscribe((event) => {\n            const tagIndex: number = this.tags.toArray().indexOf(event.tag);\n\n            if (this.isValidIndex(tagIndex)) {\n                this.keyManager.updateActiveItem(tagIndex);\n            }\n            this.stateChanges.next();\n        });\n\n        this.tagBlurSubscription = this.tagBlurChanges.subscribe(() => {\n            this.blur();\n            this.stateChanges.next();\n        });\n    }\n\n    private listenToTagsRemoved(): void {\n        this.tagRemoveSubscription = this.tagRemoveChanges.subscribe((event) => {\n            const tag = event.tag;\n            const tagIndex = this.tags.toArray().indexOf(event.tag);\n\n            // In case the tag that will be removed is currently focused, we temporarily store\n            // the index in order to be able to determine an appropriate sibling tag that will\n            // receive focus.\n            if (this.isValidIndex(tagIndex) && tag.hasFocus) {\n                this.lastDestroyedTagIndex = tagIndex;\n            }\n        });\n    }\n\n    /** Checks whether an event comes from inside a tag element. */\n    private originatesFromTag(event: Event): boolean {\n        let currentElement = event.target as HTMLElement | null;\n\n        while (currentElement && currentElement !== this.elementRef.nativeElement) {\n            if (currentElement.classList.contains('mc-tag')) {\n                return true;\n            }\n\n            currentElement = currentElement.parentElement;\n        }\n\n        return false;\n    }\n\n    /** Checks whether any of the tags is focused. */\n    private hasFocusedTag() {\n        return this.tags.some((tag) => tag.hasFocus);\n    }\n\n    /** Syncs the list's disabled state with the individual tags. */\n    private syncTagsDisabledState() {\n        if (this.tags) {\n            this.tags.forEach((tag) => {\n                tag.disabled = this._disabled;\n            });\n        }\n    }\n}\n\n","import { Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output } from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { hasModifierKey } from '@ptsecurity/cdk/keycodes';\n\nimport { MC_TAGS_DEFAULT_OPTIONS, McTagsDefaultOptions } from './tag-default-options';\nimport { McTagList } from './tag-list.component';\nimport { McTagTextControl } from './tag-text-control';\n\n\n/** Represents an input event on a `mcTagInput`. */\n// tslint:disable-next-line: naming-convention\nexport interface McTagInputEvent {\n    /** The native `<input>` element that the event is being fired for. */\n    input: HTMLInputElement;\n\n    /** The value of the input. */\n    value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds tag-specific behaviors to an input element inside `<mc-form-field>`.\n * May be placed inside or outside of an `<mc-tag-list>`.\n */\n@Directive({\n    selector: 'input[mcTagInputFor]',\n    exportAs: 'mcTagInput, mcTagInputFor',\n    host: {\n        class: 'mc-tag-input mc-input-element',\n        '[id]': 'id',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.placeholder]': 'placeholder || null',\n        '[attr.aria-invalid]': '_tagList && _tagList.ngControl ? _tagList.ngControl.invalid : null',\n        '(keydown)': 'keydown($event)',\n        '(blur)': 'blur()',\n        '(focus)': 'onFocus()',\n        '(input)': 'onInput()'\n    }\n})\nexport class McTagInput implements McTagTextControl, OnChanges {\n    /** Whether the control is focused. */\n    focused: boolean = false;\n\n    /**\n     * The list of key codes that will trigger a tagEnd event.\n     *\n     * Defaults to `[ENTER]`.\n     */\n    @Input('mcTagInputSeparatorKeyCodes')\n    separatorKeyCodes: number[] | Set<number> = this.defaultOptions.separatorKeyCodes;\n\n    /** Emitted when a tag is to be added. */\n    @Output('mcTagInputTokenEnd')\n    tagEnd: EventEmitter<McTagInputEvent> = new EventEmitter<McTagInputEvent>();\n\n    /** The input's placeholder text. */\n    @Input() placeholder: string = '';\n\n    /** Unique id for the input. */\n    @Input() id: string = `mc-tag-list-input-${nextUniqueId++}`;\n\n    /** Register input for tag list */\n    @Input('mcTagInputFor')\n    set tagList(value: McTagList) {\n        if (value) {\n            this._tagList = value;\n            this._tagList.registerInput(this);\n        }\n    }\n\n    // tslint:disable-next-line: naming-convention\n    _tagList: McTagList;\n\n    /**\n     * Whether or not the tagEnd event will be emitted when the input is blurred.\n     */\n    @Input('mcTagInputAddOnBlur')\n    get addOnBlur(): boolean {\n        return this._addOnBlur;\n    }\n\n    set addOnBlur(value: boolean) {\n        this._addOnBlur = coerceBooleanProperty(value);\n    }\n\n    private _addOnBlur: boolean = false;\n\n    /** Whether the input is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this._tagList && this._tagList.disabled);\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    private _disabled: boolean = false;\n\n    /** Whether the input is empty. */\n    get empty(): boolean {\n        return !this.inputElement.value;\n    }\n\n    /** The native input element to which this directive is attached. */\n    private inputElement: HTMLInputElement;\n\n    constructor(\n        private elementRef: ElementRef<HTMLInputElement>,\n        @Inject(MC_TAGS_DEFAULT_OPTIONS) private defaultOptions: McTagsDefaultOptions\n    ) {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        this.inputElement = this.elementRef.nativeElement as HTMLInputElement;\n    }\n\n    ngOnChanges() {\n        this._tagList.stateChanges.next();\n    }\n\n    /** Utility method to make host definition/tests more clear. */\n    keydown(event?: KeyboardEvent) {\n        this.emittagEnd(event);\n    }\n\n    /** Checks to see if the blur should emit the (tagEnd) event. */\n    blur() {\n        if (this.addOnBlur) {\n            this.emittagEnd();\n        }\n\n        this.focused = false;\n        // Blur the tag list if it is not focused\n        if (!this._tagList.focused) {\n            this._tagList.blur();\n        }\n\n        this._tagList.stateChanges.next();\n    }\n\n    /** Checks to see if the (tagEnd) event needs to be emitted. */\n    emittagEnd(event?: KeyboardEvent) {\n        if (!this.inputElement.value && !!event) {\n            this._tagList.keydown(event);\n        }\n\n        if (!event || this.isSeparatorKey(event)) {\n            this.tagEnd.emit({ input: this.inputElement, value: this.inputElement.value });\n\n            if (event) {\n                event.preventDefault();\n            }\n        }\n    }\n\n    onInput() {\n        // Let tag list know whenever the value changes.\n        this._tagList.stateChanges.next();\n    }\n\n    onFocus() {\n        this.focused = true;\n        this._tagList.stateChanges.next();\n    }\n\n    /** Focuses the input. */\n    focus(): void {\n        this.inputElement.focus();\n    }\n\n    /** Checks whether a keycode is one of the configured separators. */\n    private isSeparatorKey(event: KeyboardEvent) {\n        if (hasModifierKey(event)) { return false; }\n\n        const separators = this.separatorKeyCodes;\n        // tslint:disable-next-line: deprecation\n        const keyCode = event.keyCode;\n\n        return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ENTER } from '@ptsecurity/cdk/keycodes';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { MC_TAGS_DEFAULT_OPTIONS, McTagsDefaultOptions } from './tag-default-options';\nimport { McTagInput } from './tag-input';\nimport { McTagList } from './tag-list.component';\nimport { McTag, McTagAvatar, McTagRemove, McTagTrailingIcon } from './tag.component';\n\n\n@NgModule({\n    imports: [CommonModule, PlatformModule],\n    exports: [\n        McTagList,\n        McTag,\n        McTagInput,\n        McTagTrailingIcon,\n        McTagAvatar,\n        McTagRemove\n    ],\n    declarations: [\n        McTagList,\n        McTag,\n        McTagInput,\n        McTagTrailingIcon,\n        McTagAvatar,\n        McTagRemove\n    ],\n    providers: [{\n        provide: MC_TAGS_DEFAULT_OPTIONS,\n        // tslint:disable-next-line: no-object-literal-type-assertion\n        useValue: { separatorKeyCodes: [ENTER] } as McTagsDefaultOptions\n    }]\n})\nexport class McTagsModule {}\n","import { Directive, TemplateRef } from '@angular/core';\n\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({ selector: '[mcTabContent]' })\nexport class McTabContent {\n    constructor(public template: TemplateRef<any>) { }\n}\n","import { Directive } from '@angular/core';\nimport { CdkPortal } from '@ptsecurity/cdk/portal';\n\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n    selector: '[mc-tab-label], [mcTabLabel]'\n})\nexport class McTabLabel extends CdkPortal {}\n\n// TODO: workaround for https://github.com/angular/material2/issues/12760\n(McTabLabel as any).ctorParameters = () => (CdkPortal as any).ctorParameters;\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ContentChild,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    SimpleChanges,\n    TemplateRef,\n    ViewChild,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { TemplatePortal } from '@ptsecurity/cdk/portal';\nimport {\n    CanDisable,\n    CanDisableCtor,\n    mixinDisabled\n} from '@ptsecurity/mosaic/core';\nimport { Subject } from 'rxjs';\n\nimport { McTabContent } from './tab-content';\nimport { McTabLabel } from './tab-label';\n\n\nexport class McTabBase {}\nexport const mcTabMixinBase: CanDisableCtor & typeof McTabBase = mixinDisabled(\n    McTabBase\n);\n\n@Component({\n    selector: 'mc-tab',\n    // Create a template for the content of the <mc-tab> so that we can grab a reference to this\n    // TemplateRef and use it in a Portal to render the tab content in the appropriate place in the\n    // tab-group.\n    template: '<ng-template><ng-content></ng-content></ng-template>',\n    inputs: ['disabled'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcTab'\n})\nexport class McTab extends mcTabMixinBase\n    implements OnInit, CanDisable, OnChanges, OnDestroy {\n    /** @docs-private */\n    get content(): TemplatePortal | null {\n        return this.contentPortal;\n    }\n    /** Content for the tab label given by `<ng-template mc-tab-label>`. */\n    @ContentChild(McTabLabel)\n    templateLabel: McTabLabel;\n\n    /**\n     * Template provided in the tab content that will be used if present, used to enable lazy-loading\n     */\n    @ContentChild(McTabContent, { read: TemplateRef })\n    explicitContent: TemplateRef<any>;\n\n    /** Template inside the McTab view that contains an `<ng-content>`. */\n    @ViewChild(TemplateRef)\n    implicitContent: TemplateRef<any>;\n\n    /** Plain text label for the tab, used when there is no template label. */\n    @Input('label')\n    textLabel: string = '';\n\n    /** Aria label for the tab. */\n    @Input('aria-label')\n    ariaLabel: string;\n\n    /**\n     * Reference to the element that the tab is labelled by.\n     * Will be cleared if `aria-label` is set at the same time.\n     */\n    @Input('aria-labelledby')\n    ariaLabelledby: string;\n\n    /** Emits whenever the internal state of the tab changes. */\n    readonly stateChanges = new Subject<void>();\n\n    /**\n     * The relatively indexed position where 0 represents the center, negative is left, and positive\n     * represents the right.\n     */\n    position: number | null = null;\n\n    /**\n     * The initial relatively index origin of the tab if it was created and selected after there\n     * was already a selected tab. Provides context of what position the tab should originate from.\n     */\n    origin: number | null = null;\n\n    /**\n     * Whether the tab is currently active.\n     */\n    isActive = false;\n\n    /** Portal that will be the hosted content of the tab */\n    private contentPortal: TemplatePortal | null = null;\n\n    constructor(private viewContainerRef: ViewContainerRef) {\n        super();\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (\n            changes.hasOwnProperty('textLabel') ||\n            changes.hasOwnProperty('disabled')\n        ) {\n            this.stateChanges.next();\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.stateChanges.complete();\n    }\n\n    ngOnInit(): void {\n        this.contentPortal = new TemplatePortal(\n            this.explicitContent || this.implicitContent,\n            this.viewContainerRef\n        );\n    }\n}\n","import {\n    animate,\n    state,\n    style,\n    transition,\n    trigger,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n\nexport const mcTabsAnimations: {\n    readonly translateTab: AnimationTriggerMetadata;\n} = {\n    /** Animation translates a tab along the X axis. */\n    translateTab: trigger('translateTab', [\n        // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n        state(\n            'center, void, left-origin-center, right-origin-center',\n            style({ transform: 'none' })\n        ),\n\n        // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n        // in order to ensure that the element has a height before its state changes. This is\n        // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n        // not have a static height and is not rendered. See related issue: #9465\n        state(\n            'left',\n            style({ transform: 'translate3d(-100%, 0, 0)', minHeight: '1px' })\n        ),\n        state(\n            'right',\n            style({ transform: 'translate3d(100%, 0, 0)', minHeight: '1px' })\n        ),\n\n        transition(\n            '* => left, * => right, left => center, right => center',\n            animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n        ),\n        transition('void => left-origin-center', [\n            style({ transform: 'translate3d(-100%, 0, 0)' }),\n            animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n        ]),\n        transition('void => right-origin-center', [\n            style({ transform: 'translate3d(100%, 0, 0)' }),\n            animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n        ])\n    ])\n};\n","import { AnimationEvent } from '@angular/animations';\nimport {\n    Component,\n    ChangeDetectorRef,\n    Input,\n    Inject,\n    Output,\n    EventEmitter,\n    OnDestroy,\n    OnInit,\n    ElementRef,\n    Directive,\n    Optional,\n    ViewEncapsulation,\n    ChangeDetectionStrategy,\n    ComponentFactoryResolver,\n    ViewContainerRef,\n    forwardRef,\n    ViewChild\n} from '@angular/core';\nimport { Directionality, Direction } from '@ptsecurity/cdk/bidi';\nimport { TemplatePortal, CdkPortalOutlet, PortalHostDirective } from '@ptsecurity/cdk/portal';\nimport { Subscription } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n\nimport { mcTabsAnimations } from './tabs-animations';\n\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type McTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type McTabBodyOriginState = 'left' | 'right';\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n    selector: 'mc-tab-body',\n    templateUrl: 'tab-body.html',\n    styleUrls: ['tab-body.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [mcTabsAnimations.translateTab],\n    host: {\n        class: 'mc-tab-body'\n    }\n})\nexport class McTabBody implements OnInit, OnDestroy {\n\n    /** The shifted index position of the tab body, where zero represents the active center tab. */\n    @Input()\n    set position(position: number) {\n        this.positionIndex = position;\n        this.computePositionAnimationState();\n    }\n\n    /** Tab body position state. Used by the animation trigger for the current state. */\n    bodyPosition: McTabBodyPositionState;\n\n    /** Event emitted when the tab begins to animate towards the center as the active tab. */\n    @Output() readonly onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n    /** Event emitted before the centering of the tab begins. */\n    @Output() readonly beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted before the centering of the tab begins. */\n    @Output() readonly afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted when the tab completes its animation towards the center. */\n    @Output() readonly onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n    /** The portal host inside of this container into which the tab body content will be loaded. */\n    @ViewChild(PortalHostDirective) portalHost: PortalHostDirective;\n\n    /** The tab body content to display. */\n    @Input('content') content: TemplatePortal;\n\n    /** Position that will be used when the tab is immediately becoming visible after creation. */\n    @Input() origin: number;\n\n    // Note that the default value will always be overwritten by `McTabBody`, but we need one\n    // anyway to prevent the animations module from throwing an error if the body is used on its own.\n    /** Duration for the tab's animation. */\n    @Input() animationDuration: string = '0ms';\n\n    /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n    private positionIndex: number;\n\n    /** Subscription to the directionality change observable. */\n    private dirChangeSubscription = Subscription.EMPTY;\n\n    constructor(private elementRef: ElementRef<HTMLElement>,\n                @Optional() private dir: Directionality,\n                changeDetectorRef: ChangeDetectorRef) {\n\n        if (this.dir && changeDetectorRef) {\n            this.dirChangeSubscription = this.dir.change.subscribe((direction: Direction) => {\n                this.computePositionAnimationState(direction);\n                changeDetectorRef.markForCheck();\n            });\n        }\n    }\n\n    /**\n     * After initialized, check if the content is centered and has an origin. If so, set the\n     * special position states that transition the tab from the left or right before centering.\n     */\n    ngOnInit() {\n        if (this.bodyPosition === 'center' && this.origin != null) {\n            this.bodyPosition = this.computePositionFromOrigin();\n        }\n    }\n\n    ngOnDestroy() {\n        this.dirChangeSubscription.unsubscribe();\n    }\n\n    onTranslateTabStarted(e: AnimationEvent): void {\n        const isCentering = this.isCenterPosition(e.toState);\n        this.beforeCentering.emit(isCentering);\n        if (isCentering) {\n            this.onCentering.emit(this.elementRef.nativeElement.clientHeight);\n        }\n    }\n\n    onTranslateTabComplete(e: AnimationEvent): void {\n        // If the transition to the center is complete, emit an event.\n        if (this.isCenterPosition(e.toState) && this.isCenterPosition(this.bodyPosition)) {\n            this.onCentered.emit();\n        }\n\n        if (this.isCenterPosition(e.fromState) && !this.isCenterPosition(this.bodyPosition)) {\n            this.afterLeavingCenter.emit();\n        }\n    }\n\n    /** The text direction of the containing app. */\n    getLayoutDirection(): Direction {\n        return this.dir && this.dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n\n    /** Whether the provided position state is considered center, regardless of origin. */\n    isCenterPosition(position: McTabBodyPositionState | string): boolean {\n        return position === 'center' ||\n            position === 'left-origin-center' ||\n            position === 'right-origin-center';\n    }\n\n    /** Computes the position state that will be used for the tab-body animation trigger. */\n    private computePositionAnimationState(dir: Direction = this.getLayoutDirection()) {\n        if (this.positionIndex < 0) {\n            this.bodyPosition = dir === 'ltr' ? 'left' : 'right';\n        } else if (this.positionIndex > 0) {\n            this.bodyPosition = dir === 'ltr' ? 'right' : 'left';\n        } else {\n            this.bodyPosition = 'center';\n        }\n    }\n\n    /**\n     * Computes the position state based on the specified origin position. This is used if the\n     * tab is becoming visible immediately after creation.\n     */\n    private computePositionFromOrigin(): McTabBodyPositionState {\n        const dir = this.getLayoutDirection();\n\n        if ((dir === 'ltr' && this.origin <= 0) || (dir === 'rtl' && this.origin > 0)) {\n            return 'left-origin-center';\n        }\n\n        return 'right-origin-center';\n    }\n}\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n    selector: '[mcTabBodyHost]'\n})\nexport class McTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n    /** Subscription to events for when the tab body begins centering. */\n    private centeringSub = Subscription.EMPTY;\n    /** Subscription to events for when the tab body finishes leaving from center position. */\n    private leavingSub = Subscription.EMPTY;\n\n    constructor(\n        componentFactoryResolver: ComponentFactoryResolver,\n        viewContainerRef: ViewContainerRef,\n        @Inject(forwardRef(() => McTabBody)) private host: McTabBody) {\n        super(componentFactoryResolver, viewContainerRef);\n    }\n\n    /** Set initial visibility or set up subscription for changing visibility. */\n    ngOnInit(): void {\n        super.ngOnInit();\n\n        this.centeringSub = this.host.beforeCentering\n            .pipe(startWith(this.host.isCenterPosition(this.host.bodyPosition)))\n            .subscribe((isCentering: boolean) => {\n                if (isCentering && !this.hasAttached()) {\n                    this.attach(this.host.content);\n                }\n            });\n\n        this.leavingSub = this.host.afterLeavingCenter.subscribe(() => {\n            this.detach();\n        });\n    }\n\n    /** Clean up centering subscription. */\n    ngOnDestroy(): void {\n        super.ngOnDestroy();\n        this.centeringSub.unsubscribe();\n        this.leavingSub.unsubscribe();\n    }\n}\n","import { Directive, ElementRef } from '@angular/core';\nimport {\n    CanDisable,\n    CanDisableCtor,\n    mixinDisabled\n} from '@ptsecurity/mosaic/core';\n\n\n// Boilerplate for applying mixins to McTabLabelWrapper.\n/** @docs-private */\nexport class McTabLabelWrapperBase {}\nexport const mcTabLabelWrapperMixinBase: CanDisableCtor &\n    typeof McTabLabelWrapperBase = mixinDisabled(McTabLabelWrapperBase);\n\n/**\n * Used in the `mc-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n    selector: '[mcTabLabelWrapper]',\n    inputs: ['disabled'],\n    host: {\n        '[class.mc-disabled]': 'disabled',\n        '[attr.aria-disabled]': '!!disabled'\n    }\n})\nexport class McTabLabelWrapper extends mcTabLabelWrapperMixinBase implements CanDisable {\n    constructor(public elementRef: ElementRef) {\n        super();\n    }\n\n    /** Sets focus on the wrapper element */\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    getOffsetLeft(): number {\n        return this.elementRef.nativeElement.offsetLeft;\n    }\n\n    getOffsetWidth(): number {\n        return this.elementRef.nativeElement.offsetWidth;\n    }\n}\n","import {\n    AfterContentChecked,\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Input,\n    NgZone,\n    OnDestroy,\n    Optional,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { FocusKeyManager } from '@ptsecurity/cdk/a11y';\nimport { Direction, Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceNumberProperty } from '@ptsecurity/cdk/coercion';\nimport { END, ENTER, HOME, SPACE } from '@ptsecurity/cdk/keycodes';\nimport { ViewportRuler } from '@ptsecurity/cdk/scrolling';\nimport { merge, of as observableOf, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { McTabLabelWrapper } from './tab-label-wrapper';\n\n\nconst VIEWPORT_THROTTLE_TIME = 150;\nconst SCROLL_DISTANCE_DELIMITER = 3;\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to McTabHeader.\n/** @docs-private */\nexport class McTabHeaderBase {}\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group.\n * When the tabs list's width exceeds the width of the header container,\n * then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n    selector: 'mc-tab-header',\n    templateUrl: 'tab-header.html',\n    styleUrls: ['tab-header.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        class: 'mc-tab-header',\n        '[class.mc-tab-header__pagination-controls_enabled]':\n            'showPaginationControls',\n        '[class.mc-tab-header_rtl]': 'getLayoutDirection() == \\'rtl\\''\n    }\n})\nexport class McTabHeader extends McTabHeaderBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy {\n    /** The index of the active tab. */\n    @Input()\n    get selectedIndex(): number {\n        return this._selectedIndex;\n    }\n    set selectedIndex(value: number) {\n        const coercedValue = coerceNumberProperty(value);\n        this.selectedIndexChanged = this._selectedIndex !== coercedValue;\n        this._selectedIndex = coercedValue;\n\n        if (this.keyManager) {\n            this.keyManager.updateActiveItem(coercedValue);\n        }\n    }\n\n    /** Tracks which element has focus; used for keyboard navigation */\n    get focusIndex(): number {\n        return this.keyManager ? this.keyManager.activeItemIndex! : 0;\n    }\n\n    /** When the focus index is set, we must manually send focus to the correct label */\n    set focusIndex(value: number) {\n        if (\n            !this.isValidIndex(value) ||\n            this.focusIndex === value ||\n            !this.keyManager\n        ) {\n            return;\n        }\n\n        this.keyManager.setActiveItem(value);\n    }\n\n    /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n    get scrollDistance(): number {\n        return this._scrollDistance;\n    }\n    set scrollDistance(v: number) {\n        this._scrollDistance = Math.max(\n            0,\n            Math.min(this.getMaxScrollDistance(), v)\n        );\n\n        // Mark that the scroll distance has changed so that after the view is checked, the CSS\n        // transformation can move the header.\n        this.scrollDistanceChanged = true;\n        this.checkScrollingControls();\n    }\n\n    @ContentChildren(McTabLabelWrapper)\n    labelWrappers: QueryList<McTabLabelWrapper>;\n    @ViewChild('tabListContainer')\n    tabListContainer: ElementRef;\n    @ViewChild('tabList')\n    tabList: ElementRef;\n\n    /** Whether the controls for pagination should be displayed */\n    showPaginationControls = false;\n\n    /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n    disableScrollAfter = true;\n\n    /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n    disableScrollBefore = true;\n\n    /** Event emitted when the option is selected. */\n    @Output()\n    readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n    /** Event emitted when a label is focused. */\n    @Output()\n    readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n    /** The distance in pixels that the tab labels should be translated to the left. */\n    private _scrollDistance = 0;\n\n    /** Whether the header should scroll to the selected index after the view has been checked. */\n    private selectedIndexChanged = false;\n\n    /** Emits when the component is destroyed. */\n    private readonly destroyed = new Subject<void>();\n\n    /**\n     * The number of tab labels that are displayed on the header. When this changes, the header\n     * should re-evaluate the scroll position.\n     */\n    private tabLabelCount: number;\n\n    /** Whether the scroll distance has changed and should be applied after the view is checked. */\n    private scrollDistanceChanged: boolean;\n\n    /** Used to manage focus between the tabs. */\n    private keyManager: FocusKeyManager<McTabLabelWrapper>;\n\n    /** Cached text content of the header. */\n    private currentTextContent: string;\n\n    private _selectedIndex: number = 0;\n\n    constructor(\n        private elementRef: ElementRef,\n        private changeDetectorRef: ChangeDetectorRef,\n        private viewportRuler: ViewportRuler,\n        @Optional() private dir: Directionality,\n        private ngZone: NgZone\n    ) {\n        super();\n    }\n\n    ngAfterContentChecked(): void {\n        // If the number of tab labels have changed, check if scrolling should be enabled\n        if (this.tabLabelCount !== this.labelWrappers.length) {\n            this.updatePagination();\n            this.tabLabelCount = this.labelWrappers.length;\n            this.changeDetectorRef.markForCheck();\n        }\n\n        // If the selected index has changed, scroll to the label and check if the scrolling controls\n        // should be disabled.\n        if (this.selectedIndexChanged) {\n            this.scrollToLabel(this._selectedIndex);\n            this.checkScrollingControls();\n            this.selectedIndexChanged = false;\n            this.changeDetectorRef.markForCheck();\n        }\n\n        // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n        // then translate the header to reflect this.\n        if (this.scrollDistanceChanged) {\n            this.updateTabScrollPosition();\n            this.scrollDistanceChanged = false;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    handleKeydown(event: KeyboardEvent) {\n        switch (event.keyCode) {\n            case HOME:\n                this.keyManager.setFirstItemActive();\n                event.preventDefault();\n                break;\n            case END:\n                this.keyManager.setLastItemActive();\n                event.preventDefault();\n                break;\n            case ENTER:\n            case SPACE:\n                this.selectFocusedIndex.emit(this.focusIndex);\n                event.preventDefault();\n                break;\n            default:\n                this.keyManager.onKeydown(event);\n        }\n    }\n\n    ngAfterContentInit() {\n        const dirChange = this.dir ? this.dir.change : observableOf(null);\n        const resize = this.viewportRuler.change(VIEWPORT_THROTTLE_TIME);\n        const realign = () => {\n            this.updatePagination();\n        };\n\n        this.keyManager = new FocusKeyManager(this.labelWrappers)\n            .withHorizontalOrientation(this.getLayoutDirection())\n            .withWrap();\n\n        this.keyManager.updateActiveItem(0);\n\n        // Defer the first call in order to allow for slower browsers to lay out the elements.\n        // This helps in cases where the user lands directly on a page with paginated tabs.\n        typeof requestAnimationFrame === undefined\n            ? realign()\n            : requestAnimationFrame(realign);\n\n        // On dir change or window resize, update the orientation of\n        // the key manager if the direction has changed.\n        merge(dirChange, resize)\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(() => {\n                realign();\n                this.keyManager.withHorizontalOrientation(\n                    this.getLayoutDirection()\n                );\n            });\n\n        // If there is a change in the focus key manager we need to emit the `indexFocused`\n        // event in order to provide a public event that notifies about focus changes. Also we realign\n        // the tabs container by scrolling the new focused tab into the visible section.\n        this.keyManager.change\n            .pipe(takeUntil(this.destroyed))\n            .subscribe((newFocusIndex) => {\n                this.indexFocused.emit(newFocusIndex);\n                this.setTabFocus(newFocusIndex);\n            });\n    }\n\n    ngOnDestroy() {\n        this.destroyed.next();\n        this.destroyed.complete();\n    }\n\n    /**\n     * Callback for when the MutationObserver detects that the content has changed.\n     */\n    onContentChanges() {\n        const textContent = this.elementRef.nativeElement.textContent;\n\n        // We need to diff the text content of the header, because the MutationObserver callback\n        // will fire even if the text content didn't change which is inefficient and is prone\n        // to infinite loops if a poorly constructed expression is passed in.\n\n        if (textContent !== this.currentTextContent) {\n            this.currentTextContent = textContent;\n\n            const zoneCallback = () => {\n                this.updatePagination();\n                this.changeDetectorRef.markForCheck();\n            };\n\n            // The content observer runs outside the `NgZone` by default, which\n            // means that we need to bring the callback back in ourselves.\n            // TODO: Remove null check for `_ngZone` once it's a required parameter.\n            this.ngZone ? this.ngZone.run(zoneCallback) : zoneCallback();\n        }\n    }\n\n    /**\n     * Updating the view whether pagination should be enabled or not\n     *\n     * WARNING: Calling this method can be very costly in terms of performance.  It should be called\n     * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n     * page.\n     */\n    updatePagination() {\n        this.checkPaginationEnabled();\n        this.checkScrollingControls();\n        this.updateTabScrollPosition();\n    }\n\n    /**\n     * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n     * providing a valid index and return true.\n     */\n    isValidIndex(index: number): boolean {\n        if (!this.labelWrappers) {\n            return true;\n        }\n\n        const tab = this.labelWrappers\n            ? this.labelWrappers.toArray()[index]\n            : null;\n\n        return !!tab && !tab.disabled;\n    }\n\n    /**\n     * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n     * scrolling is enabled.\n     */\n    setTabFocus(tabIndex: number) {\n        if (this.showPaginationControls) {\n            this.scrollToLabel(tabIndex);\n        }\n\n        if (this.labelWrappers && this.labelWrappers.length) {\n            this.labelWrappers.toArray()[tabIndex].focus();\n\n            // Do not let the browser manage scrolling to focus the element, this will be handled\n            // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n            // should be the full width minus the offset width.\n            const containerEl = this.tabListContainer.nativeElement;\n            const dir = this.getLayoutDirection();\n\n            if (dir === 'ltr') {\n                containerEl.scrollLeft = 0;\n            } else {\n                containerEl.scrollLeft =\n                    containerEl.scrollWidth - containerEl.offsetWidth;\n            }\n        }\n    }\n\n    /** The layout direction of the containing app. */\n    getLayoutDirection(): Direction {\n        return this.dir && this.dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n\n    /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n    updateTabScrollPosition() {\n        const scrollDistance = this.scrollDistance;\n        const translateX =\n            this.getLayoutDirection() === 'ltr'\n                ? -scrollDistance\n                : scrollDistance;\n\n        // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n        // seems to cause flickering and overflow in Internet Explorer.\n        // See: https://github.com/angular/material2/issues/10276\n        // We round the `transform` here, because transforms with sub-pixel precision cause some\n        // browsers to blur the content of the element.\n        this.tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n        // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n        // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n        // it doesn't get thrown off.\n        this.tabList.nativeElement.scrollLeft = 0;\n    }\n\n    /**\n     * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n     * the end of the list, respectively). The distance to scroll is computed to be a third of the\n     * length of the tab list view window.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    scrollHeader(scrollDir: ScrollDirection) {\n        const viewLength = this.tabListContainer.nativeElement.offsetWidth;\n\n        // Move the scroll distance one-third the length of the tab list's viewport.\n        this.scrollDistance +=\n            ((scrollDir === 'before' ? -1 : 1) * viewLength) / SCROLL_DISTANCE_DELIMITER;\n    }\n\n    /**\n     * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    scrollToLabel(labelIndex: number) {\n        const selectedLabel = this.labelWrappers\n            ? this.labelWrappers.toArray()[labelIndex]\n            : null;\n\n        if (!selectedLabel) {\n            return;\n        }\n\n        // The view length is the visible width of the tab labels.\n        const viewLength = this.tabListContainer.nativeElement.offsetWidth;\n\n        let labelBeforePos: number;\n        let labelAfterPos: number;\n\n        if (this.getLayoutDirection() === 'ltr') {\n            labelBeforePos = selectedLabel.getOffsetLeft();\n            labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n        } else {\n            labelAfterPos =\n                this.tabList.nativeElement.offsetWidth -\n                selectedLabel.getOffsetLeft();\n            labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n        }\n\n        const beforeVisiblePos = this.scrollDistance;\n        const afterVisiblePos = this.scrollDistance + viewLength;\n\n        if (labelBeforePos < beforeVisiblePos) {\n            // Scroll header to move label to the before direction\n            this.scrollDistance -=\n                beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n        } else if (labelAfterPos > afterVisiblePos) {\n            // Scroll header to move label to the after direction\n            this.scrollDistance +=\n                labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n        }\n    }\n\n    /**\n     * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n     * tab list is wider than the size of the header container, then the pagination controls should\n     * be shown.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    checkPaginationEnabled() {\n        const isEnabled =\n            this.tabList.nativeElement.scrollWidth >\n            this.elementRef.nativeElement.offsetWidth;\n\n        if (!isEnabled) {\n            this.scrollDistance = 0;\n        }\n\n        if (isEnabled !== this.showPaginationControls) {\n            this.changeDetectorRef.markForCheck();\n        }\n\n        this.showPaginationControls = isEnabled;\n    }\n\n    /**\n     * Evaluate whether the before and after controls should be enabled or disabled.\n     * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n     * before button. If the header is at the end of the list (scroll distance is equal to the\n     * maximum distance we can scroll), then disable the after button.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    checkScrollingControls() {\n        // Check if the pagination arrows should be activated.\n        this.disableScrollBefore = this.scrollDistance === 0;\n        this.disableScrollAfter =\n            this.scrollDistance === this.getMaxScrollDistance();\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n     * is equal to the difference in width between the tab list container and tab header container.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    getMaxScrollDistance(): number {\n        const lengthOfTabList = this.tabList.nativeElement.scrollWidth;\n        const viewLength = this.tabListContainer.nativeElement.offsetWidth;\n\n        return lengthOfTabList - viewLength || 0;\n    }\n}\n","import {\n    AfterContentChecked,\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnDestroy,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    InjectionToken,\n    Inject,\n    Optional,\n    Directive, Attribute\n} from '@angular/core';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@ptsecurity/cdk/coercion';\nimport {\n    CanColor,\n    CanColorCtor,\n    mixinColor,\n    mixinDisabled\n} from '@ptsecurity/mosaic/core';\nimport { merge, Subscription } from 'rxjs';\n\nimport { McTab } from './tab';\nimport { McTabHeader } from './tab-header';\n\n\n@Directive({\n    selector: 'mc-tab-group[mc-light-tabs], [mc-tab-nav-bar][mc-light-tabs]',\n    host: { class: 'mc-tab-group_light' }\n})\nexport class McLightTabsCssStyler { }\n\n@Directive({\n    selector: 'mc-tab-group[mc-align-tabs-center], [mc-tab-nav-bar][mc-align-tabs-center]',\n    host: { class: 'mc-tab-group_align-labels-center' }\n})\nexport class McAlignTabsCenterCssStyler { }\n\n@Directive({\n    selector: 'mc-tab-group[mc-align-tabs-end], [mc-tab-nav-bar][mc-align-tabs-end]',\n    host: { class: 'mc-tab-group_align-labels-end' }\n})\nexport class McAlignTabsEndCssStyler { }\n\n@Directive({\n    selector: 'mc-tab-group[mc-stretch-tabs], [mc-tab-nav-bar][mc-stretch-tabs]',\n    host: { class: 'mc-tab-group_stretch-labels' }\n})\nexport class McStretchTabsCssStyler { }\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class McTabChangeEvent {\n    /** Index of the currently-selected tab. */\n    index: number;\n    /** Reference to the currently-selected tab. */\n    tab: McTab;\n}\n\n/** Possible positions for the tab header. */\nexport type McTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface IMcTabsConfig {\n    /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n    animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MC_TABS_CONFIG = new InjectionToken('MC_TABS_CONFIG');\n\n// Boilerplate for applying mixins to McTabGroup.\n/** @docs-private */\nexport class McTabGroupBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) { }\n}\nexport const mcTabGroupMixinBase:\n    CanColorCtor &\n    typeof McTabGroupBase =\n    mixinColor(mixinDisabled(McTabGroupBase));\n\n/**\n * Tab-group component.  Supports basic tab pairs (label + content) and includes\n * keyboard navigation.\n */\n@Component({\n    selector: 'mc-tab-group',\n    exportAs: 'mcTabGroup',\n    templateUrl: 'tab-group.html',\n    styleUrls: ['tab-group.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['color'],\n    host: {\n        class: 'mc-tab-group',\n        '[class.mc-tab-group_dynamic-height]': 'dynamicHeight',\n        '[class.mc-tab-group_inverted-header]': 'headerPosition === \"below\"'\n    }\n})\nexport class McTabGroup extends mcTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor {\n    lightTab: boolean;\n\n    /** Whether the tab group should grow to the size of the active tab. */\n    @Input()\n    get dynamicHeight(): boolean { return this._dynamicHeight; }\n    set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n\n    /** The index of the active tab. */\n    @Input()\n    get selectedIndex(): number | null { return this._selectedIndex; }\n    set selectedIndex(value: number | null) {\n        this.indexToSelect = coerceNumberProperty(value, null);\n    }\n\n    @ContentChildren(McTab) tabs: QueryList<McTab>;\n\n    @ViewChild('tabBodyWrapper') tabBodyWrapper: ElementRef;\n\n    @ViewChild('tabHeader') tabHeader: McTabHeader;\n\n    /** Position of the tab header. */\n    @Input() headerPosition: McTabHeaderPosition = 'above';\n\n    /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n    @Input() animationDuration: string;\n\n    /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n    @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n    /** Event emitted when focus has changed within a tab group. */\n    @Output() readonly focusChange: EventEmitter<McTabChangeEvent> =\n        new EventEmitter<McTabChangeEvent>();\n\n    /** Event emitted when the body animation has completed */\n    @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Event emitted when the tab selection has changed. */\n    @Output() readonly selectedTabChange: EventEmitter<McTabChangeEvent> =\n        new EventEmitter<McTabChangeEvent>(true);\n\n    /** The tab index that should be selected after the content has been checked. */\n    private indexToSelect: number | null = 0;\n\n    /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n    private tabBodyWrapperHeight: number = 0;\n\n    /** Subscription to tabs being added/removed. */\n    private tabsSubscription = Subscription.EMPTY;\n\n    /** Subscription to changes in the tab labels. */\n    private tabLabelSubscription = Subscription.EMPTY;\n    private _dynamicHeight: boolean = false;\n    private _selectedIndex: number | null = null;\n\n    private groupId: number;\n\n    constructor(\n        elementRef: ElementRef,\n        private changeDetectorRef: ChangeDetectorRef,\n        @Attribute('mc-light-tabs') lightTabs: string,\n        @Inject(MC_TABS_CONFIG) @Optional() defaultConfig?: IMcTabsConfig\n    ) {\n        super(elementRef);\n\n        this.lightTab = coerceBooleanProperty(lightTabs);\n\n        this.groupId = nextId++;\n        this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n            defaultConfig.animationDuration : '0ms';\n    }\n\n    /**\n     * After the content is checked, this component knows what tabs have been defined\n     * and what the selected index should be. This is where we can know exactly what position\n     * each tab should be in according to the new selected index, and additionally we know how\n     * a new selected tab should transition in (from the left or right).\n     */\n    ngAfterContentChecked() {\n        // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n        // the amount of tabs changes before the actual change detection runs.\n        const indexToSelect = this.indexToSelect = this.clampTabIndex(this.indexToSelect);\n\n        // If there is a change in selected index, emit a change event. Should not trigger if\n        // the selected index has not yet been initialized.\n        if (this._selectedIndex !== indexToSelect) {\n            const isFirstRun = this._selectedIndex == null;\n\n            if (!isFirstRun) {\n                this.selectedTabChange.emit(this.createChangeEvent(indexToSelect));\n            }\n\n            // Changing these values after change detection has run\n            // since the checked content may contain references to them.\n            Promise.resolve().then(() => {\n                this.tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n                if (!isFirstRun) {\n                    this.selectedIndexChange.emit(indexToSelect);\n                }\n            });\n        }\n\n        // Setup the position for each tab and optionally setup an origin on the next selected tab.\n        this.tabs.forEach((tab: McTab, index: number) => {\n            tab.position = index - indexToSelect;\n\n            // If there is already a selected tab, then set up an origin for the next selected tab\n            // if it doesn't have one already.\n            if (this._selectedIndex != null && tab.position === 0 && !tab.origin) {\n                tab.origin = indexToSelect - this._selectedIndex;\n            }\n        });\n\n        if (this._selectedIndex !== indexToSelect) {\n            this._selectedIndex = indexToSelect;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    ngAfterContentInit() {\n        this.subscribeToTabLabels();\n\n        // Subscribe to changes in the amount of tabs, in order to be\n        // able to re-render the content as new tabs are added or removed.\n        this.tabsSubscription = this.tabs.changes.subscribe(() => {\n            const indexToSelect = this.clampTabIndex(this.indexToSelect);\n\n            // Maintain the previously-selected tab if a new tab is added or removed and there is no\n            // explicit change that selects a different tab.\n            if (indexToSelect === this._selectedIndex) {\n                const tabs = this.tabs.toArray();\n\n                for (let i = 0; i < tabs.length; i++) {\n                    if (tabs[i].isActive) {\n                        // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n                        // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n                        // adding a tab within the `selectedIndexChange` event.\n                        this.indexToSelect = this._selectedIndex = i;\n                        break;\n                    }\n                }\n            }\n\n            this.subscribeToTabLabels();\n            this.changeDetectorRef.markForCheck();\n        });\n    }\n\n    ngOnDestroy() {\n        this.tabsSubscription.unsubscribe();\n        this.tabLabelSubscription.unsubscribe();\n    }\n\n    focusChanged(index: number) {\n        this.focusChange.emit(this.createChangeEvent(index));\n    }\n\n    /** Returns a unique id for each tab label element */\n    getTabLabelId(i: number): string {\n        return `mc-tab-label-${this.groupId}-${i}`;\n    }\n\n    /** Returns a unique id for each tab content element */\n    getTabContentId(i: number): string {\n        return `mc-tab-content-${this.groupId}-${i}`;\n    }\n\n    /**\n     * Sets the height of the body wrapper to the height of the activating tab if dynamic\n     * height property is true.\n     */\n    setTabBodyWrapperHeight(tabHeight: number): void {\n        if (!this._dynamicHeight || !this.tabBodyWrapperHeight) { return; }\n\n        const wrapper: HTMLElement = this.tabBodyWrapper.nativeElement;\n\n        wrapper.style.height = `${this.tabBodyWrapperHeight}px`;\n\n        // This conditional forces the browser to paint the height so that\n        // the animation to the new height can have an origin.\n        if (this.tabBodyWrapper.nativeElement.offsetHeight) {\n            wrapper.style.height = `${tabHeight}px`;\n        }\n    }\n\n    /** Removes the height of the tab body wrapper. */\n    removeTabBodyWrapperHeight(): void {\n        this.tabBodyWrapperHeight = this.tabBodyWrapper.nativeElement.clientHeight;\n        this.tabBodyWrapper.nativeElement.style.height = '';\n        this.animationDone.emit();\n    }\n\n    /** Handle click events, setting new selected index if appropriate. */\n    handleClick(tab: McTab, tabHeader: McTabHeader, index: number) {\n        if (!tab.disabled) {\n            this.selectedIndex = tabHeader.focusIndex = index;\n        }\n    }\n\n    /** Retrieves the tabindex for the tab. */\n    getTabIndex(tab: McTab, index: number): number | null {\n        if (tab.disabled) {\n            return null;\n        }\n\n        return this.selectedIndex === index ? 0 : -1;\n    }\n\n    private createChangeEvent(index: number): McTabChangeEvent {\n        const event = new McTabChangeEvent();\n        event.index = index;\n        if (this.tabs && this.tabs.length) {\n            event.tab = this.tabs.toArray()[index];\n        }\n\n        return event;\n    }\n\n    /**\n     * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n     * on the McTab component, whereas the data binding is inside the McTabGroup. In order for the\n     * binding to be updated, we need to subscribe to changes in it and trigger change detection\n     * manually.\n     */\n    private subscribeToTabLabels() {\n        if (this.tabLabelSubscription) {\n            this.tabLabelSubscription.unsubscribe();\n        }\n\n        this.tabLabelSubscription = merge(...this.tabs.map((tab) => tab.stateChanges))\n            .subscribe(() => this.changeDetectorRef.markForCheck());\n    }\n\n    /** Clamps the given index to the bounds of 0 and the tabs length. */\n    private clampTabIndex(index: number | null): number {\n        // Note the `|| 0`, which ensures that values like NaN can't get through\n        // and which would otherwise throw the component into an infinite loop\n        // (since Mch.max(NaN, 0) === NaN).\n        return Math.min(this.tabs.length - 1, Math.max(index || 0, 0));\n    }\n}\n","import {\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    Input,\n    OnDestroy,\n    ViewEncapsulation\n} from '@angular/core';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport {\n    CanColor,\n    CanColorCtor,\n    CanDisable,\n    CanDisableCtor,\n    HasTabIndex,\n    HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex\n} from '@ptsecurity/mosaic/core';\n\n\n// Boilerplate for applying mixins to McTabNav.\n/** @docs-private */\nexport class McTabNavBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {}\n}\nexport const mcTabNavMixinBase: CanColorCtor &\n    typeof McTabNavBase = mixinColor(McTabNavBase);\n\n/**\n * Navigation component matching the styles of the tab group header.\n */\n@Component({\n    selector: '[mc-tab-nav-bar]',\n    exportAs: 'mcTabNavBar, mcTabNav',\n    inputs: ['color'],\n    templateUrl: 'tab-nav-bar.html',\n    styleUrls: ['tab-nav-bar.css'],\n    host: { class: 'mc-tab-nav-bar' },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McTabNav extends mcTabNavMixinBase\n    implements CanColor {\n        constructor(elementRef: ElementRef) {\n            super(elementRef);\n        }\n     }\n\n// Boilerplate for applying mixins to McTabLink.\nexport class McTabLinkBase {}\nexport const mcTabLinkMixinBase: HasTabIndexCtor & CanDisableCtor &\n    typeof McTabLinkBase = mixinTabIndex(mixinDisabled(McTabLinkBase));\n\n/**\n * Link inside of a `mc-tab-nav-bar`.\n */\n@Directive({\n    selector: '[mc-tab-link], [mcTabLink]',\n    exportAs: 'mcTabLink',\n    inputs: ['disabled', 'tabIndex'],\n    host: {\n        class: 'mc-tab-link',\n        '[attr.aria-current]': 'active',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.tabIndex]': 'tabIndex',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-active]': 'active'\n    }\n})\nexport class McTabLink extends mcTabLinkMixinBase\n    implements OnDestroy, CanDisable, HasTabIndex {\n    /** Whether the link is active. */\n    @Input()\n    get active(): boolean {\n        return this.isActive;\n    }\n    set active(value: boolean) {\n        if (value !== this.isActive) {\n            this.isActive = value;\n        }\n    }\n\n    /** Whether the tab link is active or not. */\n    protected isActive: boolean = false;\n\n    constructor(\n        public elementRef: ElementRef,\n        @Attribute('tabindex') tabIndex: string,\n        private focusMonitor: FocusMonitor\n    ) {\n        super();\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n        this.focusMonitor.monitor(this.elementRef.nativeElement);\n    }\n\n    ngOnDestroy() {\n        this.focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PortalModule } from '@ptsecurity/cdk/portal';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McTab } from './tab';\nimport { McTabBody, McTabBodyPortal } from './tab-body';\nimport { McTabContent } from './tab-content';\nimport {\n    McTabGroup,\n    McLightTabsCssStyler,\n    McAlignTabsCenterCssStyler,\n    McAlignTabsEndCssStyler,\n    McStretchTabsCssStyler\n} from './tab-group';\nimport { McTabHeader } from './tab-header';\nimport { McTabLabel } from './tab-label';\nimport { McTabLabelWrapper } from './tab-label-wrapper';\nimport { McTabLink, McTabNav } from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        McCommonModule,\n        PortalModule,\n        A11yModule\n    ],\n    // Don't export all components because some are only to be used internally.\n    exports: [\n        McCommonModule,\n        McTabGroup,\n        McTabLabel,\n        McTab,\n        McTabNav,\n        McTabLink,\n        McTabContent,\n        McLightTabsCssStyler,\n        McAlignTabsCenterCssStyler,\n        McAlignTabsEndCssStyler,\n        McStretchTabsCssStyler\n    ],\n    declarations: [\n        McTabGroup,\n        McTabLabel,\n        McTab,\n        McTabLabelWrapper,\n        McTabNav,\n        McTabLink,\n        McTabBody,\n        McTabBodyPortal,\n        McTabHeader,\n        McTabContent,\n        McLightTabsCssStyler,\n        McAlignTabsCenterCssStyler,\n        McAlignTabsEndCssStyler,\n        McStretchTabsCssStyler\n    ]\n})\nexport class McTabsModule {}\n","import { InjectionToken } from '@angular/core';\n\n\n/** Default options, for the chips module, that can be overridden. */\n// tslint:disable-next-line: naming-convention\nexport interface McTagsDefaultOptions {\n    /** The list of key codes that will trigger a chipEnd event. */\n    separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MC_TAGS_DEFAULT_OPTIONS = new InjectionToken<McTagsDefaultOptions>('mc-tags-default-options');\n","import { AnimationEvent } from '@angular/animations';\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    TemplateRef,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport {\n    ConnectedOverlayPositionChange,\n    ConnectionPositionPair,\n    Overlay,\n    OverlayRef,\n    ScrollDispatcher,\n    IScrollStrategy,\n    FlexibleConnectedPositionStrategy,\n    IOverlayConnectionPosition,\n    IOriginConnectionPosition,\n    HorizontalConnectionPos,\n    VerticalConnectionPos\n} from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal } from '@ptsecurity/cdk/portal';\nimport {\n    EXTENDED_OVERLAY_POSITIONS,\n    POSITION_MAP,\n    POSITION_TO_CSS_MAP\n} from '@ptsecurity/mosaic/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators';\n\nimport { mcPopoverAnimations } from './popover-animations';\n\n\nexport type PopoverVisibility = 'initial' | 'visible' | 'hidden';\n\n@Component({\n    selector: 'mc-popover',\n    templateUrl: './popover.component.html',\n    preserveWhitespaces: false,\n    styleUrls: ['./popover.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [mcPopoverAnimations.popoverState],\n    host: {\n        '[class]': 'getCssClassesList',\n        '(body:click)': 'handleBodyInteraction($event)'\n    }\n})\nexport class McPopoverComponent {\n    positions: ConnectionPositionPair[] = [ ...EXTENDED_OVERLAY_POSITIONS ];\n    availablePositions: any;\n    popoverVisibility: PopoverVisibility = 'initial';\n    closeOnInteraction: boolean = false;\n    mcContent: string | TemplateRef<any>;\n    mcHeader: string | TemplateRef<any>;\n    mcFooter: string | TemplateRef<any>;\n\n    @Output('mcPopoverVisibleChange') mcVisibleChange: EventEmitter<boolean> = new EventEmitter();\n\n    get mcTrigger(): string {\n        return this._mcTrigger;\n    }\n    set mcTrigger(value: string) {\n        this._mcTrigger = value;\n    }\n    private _mcTrigger: string = 'hover';\n\n    get mcPlacement(): string {\n        return this._mcPlacement;\n    }\n    set mcPlacement(value: string) {\n        if (value !== this._mcPlacement) {\n            this._mcPlacement = value;\n            this.positions.unshift(POSITION_MAP[ this.mcPlacement ]);\n        } else if (!value) {\n            this._mcPlacement = 'top';\n        }\n    }\n    private _mcPlacement: string = 'top';\n\n    get mcPopoverSize(): string {\n        return this.popoverSize;\n    }\n    set mcPopoverSize(value: string) {\n        if (value !== this.popoverSize) {\n            this.popoverSize = value;\n        } else if (!value) {\n            this.popoverSize = 'normal';\n        }\n    }\n    private popoverSize: string;\n\n    get mcVisible(): boolean {\n        return this._mcVisible.value;\n    }\n    set mcVisible(value: boolean) {\n        const visible = coerceBooleanProperty(value);\n\n        if (this._mcVisible.value !== visible) {\n            this._mcVisible.next(visible);\n            this.mcVisibleChange.emit(visible);\n        }\n    }\n    private _mcVisible: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n    get classList() {\n        return this._classList.join(' ');\n    }\n    set classList(value: string | string[]) {\n        let list: string[] = [];\n\n        if (Array.isArray(value)) {\n            list = value;\n        } else {\n            list.push(value);\n        }\n\n        this._classList = list;\n    }\n    private _classList: string[] = [];\n\n    get getCssClassesList(): string {\n        return `${this.classList} mc-popover-${this.mcPopoverSize} mc-popover_placement-${this.getPlacementClass}`;\n    }\n\n    get getPlacementClass(): string {\n        return POSITION_TO_CSS_MAP[this.mcPlacement];\n    }\n\n    /** Subject for notifying that the popover has been hidden from the view */\n    private readonly onHideSubject: Subject<any> = new Subject();\n\n    constructor(public changeDetectorRef: ChangeDetectorRef, public componentElementRef: ElementRef) {\n        this.availablePositions = POSITION_MAP;\n    }\n\n    show(): void {\n        if (this.isNonEmptyContent()) {\n            this.closeOnInteraction = true;\n            this.popoverVisibility = 'visible';\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this.markForCheck();\n        }\n    }\n\n    hide(): void {\n        this.popoverVisibility = 'hidden';\n        this.mcVisibleChange.emit(false);\n\n        // Mark for check so if any parent component has set the\n        // ChangeDetectionStrategy to OnPush it will be checked anyways\n        this.markForCheck();\n    }\n\n    isNonEmptyContent(): boolean {\n        return !!this.mcContent && (this.isTemplateRef(this.mcContent) || this.isNonEmptyString(this.mcContent));\n    }\n\n    /** Returns an observable that notifies when the popover has been hidden from view. */\n    afterHidden(): Observable<void> {\n        return this.onHideSubject.asObservable();\n    }\n\n    isVisible(): boolean {\n        return this.popoverVisibility === 'visible';\n    }\n\n    markForCheck(): void {\n        this.changeDetectorRef.markForCheck();\n    }\n\n    isTemplateRef(value: any): boolean {\n        return value instanceof TemplateRef;\n    }\n\n    isNonEmptyString(value: any): boolean {\n        return typeof value === 'string' && value !== '';\n    }\n\n    handleBodyInteraction(e): void {\n        if (this.closeOnInteraction && !this.componentElementRef.nativeElement.contains(e.target)) {\n            this.hide();\n        }\n    }\n\n    animationStart() {\n            this.closeOnInteraction = false;\n    }\n\n    animationDone(event: AnimationEvent): void {\n        const toState = event.toState as PopoverVisibility;\n\n        if (toState === 'hidden' && !this.isVisible()) {\n            this.onHideSubject.next();\n        }\n\n        if (toState === 'visible' || toState === 'hidden') {\n            this.closeOnInteraction = true;\n        }\n    }\n\n    ngOnDestroy() {\n        this.onHideSubject.complete();\n    }\n}\n\nexport const MC_POPOVER_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-popover-scroll-strategy');\n\n/** @docs-private */\nexport function mcPopoverScrollStrategyFactory(overlay: Overlay): () => IScrollStrategy {\n    return () => overlay.scrollStrategies.reposition({scrollThrottle: 20});\n}\n\n/** @docs-private */\nexport const MC_POPOVER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_POPOVER_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: mcPopoverScrollStrategyFactory\n};\n\n/** Creates an error to be thrown if the user supplied an invalid popover position. */\nexport function getMcPopoverInvalidPositionError(position: string) {\n    return Error(`McPopover position \"${position}\" is invalid.`);\n}\n\nconst VIEWPORT_MARGIN: number = 8;\n/** @docs-private\n * Minimal width of anchor element should be equal or greater than popover arrow width plus arrow offset right/left\n * MIN_ANCHOR_ELEMENT_WIDTH used for positioning update inside handlePositionUpdate()\n */\nconst MIN_ANCHOR_ELEMENT_WIDTH: number = 40;\n\n@Directive({\n    selector: '[mcPopover]',\n    exportAs: 'mcPopover',\n    host: {\n        '(keydown)': 'handleKeydown($event)',\n        '(touchend)': 'handleTouchend()',\n        '[class.mc-popover_open]': 'isOpen'\n    }\n})\nexport class McPopover implements OnInit, OnDestroy {\n    isPopoverOpen: boolean = false;\n    isDynamicPopover = false;\n    overlayRef: OverlayRef | null;\n    portal: ComponentPortal<McPopoverComponent>;\n    availablePositions: any;\n    popover: McPopoverComponent | null;\n\n    @Output('mcPopoverVisibleChange') mcVisibleChange = new EventEmitter<boolean>();\n\n    @Input('mcPopoverHeader')\n    get mcHeader(): string | TemplateRef<any> {\n        return this._mcHeader;\n    }\n    set mcHeader(value: string | TemplateRef<any>) {\n        this._mcHeader = value;\n        this.updateCompValue('mcHeader', value);\n\n        if (this.isPopoverOpen) {\n            this.updatePosition(true);\n        }\n    }\n    private _mcHeader: string | TemplateRef<any>;\n\n    @Input('mcPopoverContent')\n    get mcContent(): string | TemplateRef<any> {\n        return this._mcContent;\n    }\n    set mcContent(value: string | TemplateRef<any>) {\n        this._mcContent = value;\n        this.updateCompValue('mcContent', value);\n\n        if (this.isPopoverOpen) {\n            this.updatePosition(true);\n        }\n    }\n    private _mcContent: string | TemplateRef<any>;\n\n    @Input('mcPopoverFooter')\n    get mcFooter(): string | TemplateRef<any> {\n        return this._mcFooter;\n    }\n    set mcFooter(value: string | TemplateRef<any>) {\n        this._mcFooter = value;\n        this.updateCompValue('mcFooter', value);\n\n        if (this.isPopoverOpen) {\n            this.updatePosition(true);\n        }\n    }\n    private _mcFooter: string | TemplateRef<any>;\n\n    private $unsubscribe = new Subject<void>();\n\n    @Input('mcPopoverDisabled')\n    get disabled(): boolean {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    private _disabled: boolean = false;\n\n    @Input('mcPopoverMouseEnterDelay')\n    get mcMouseEnterDelay(): number {\n        return this._mcMouseEnterDelay;\n    }\n    set mcMouseEnterDelay(value: number) {\n        this._mcMouseEnterDelay = value;\n        this.updateCompValue('mcMouseEnterDelay', value);\n    }\n    private _mcMouseEnterDelay: number;\n\n    @Input('mcPopoverMouseLeaveDelay')\n    get mcMouseLeaveDelay(): number {\n        return this._mcMouseLeaveDelay;\n    }\n    set mcMouseLeaveDelay(value: number) {\n        this._mcMouseLeaveDelay = value;\n        this.updateCompValue('mcMouseLeaveDelay', value);\n    }\n    private _mcMouseLeaveDelay: number;\n\n    @Input('mcPopoverTrigger')\n    get mcTrigger(): string {\n        return this._mcTrigger;\n    }\n    set mcTrigger(value: string) {\n        if (value) {\n            this._mcTrigger = value;\n            this.updateCompValue('mcTrigger', value);\n        } else {\n            this._mcTrigger = 'hover';\n        }\n    }\n    private _mcTrigger: string = 'hover';\n\n    @Input('mcPopoverSize')\n    get mcPopoverSize(): string {\n        return this.popoverSize;\n    }\n    set mcPopoverSize(value: string) {\n        if (value && (value === 'small' || value === 'normal' || value === 'large')) {\n            this.popoverSize = value;\n            this.updateCompValue('mcPopoverSize', value);\n        } else {\n            this.popoverSize = 'normal';\n        }\n    }\n    private popoverSize: string = 'normal';\n\n    @Input('mcPopoverPlacement')\n    get mcPlacement(): string {\n        return this._mcPlacement;\n    }\n    set mcPlacement(value: string) {\n        if (value) {\n            this._mcPlacement = value;\n            this.updateCompValue('mcPlacement', value);\n        } else {\n            this._mcPlacement = 'top';\n        }\n    }\n    private _mcPlacement: string = 'top';\n\n    @Input('mcPopoverClass')\n    get classList() {\n        return this._classList;\n    }\n    set classList(value: string | string[]) {\n        this._classList = value;\n        this.updateCompValue('classList', this._classList);\n    }\n    private _classList: string | string[];\n\n    @Input('mcPopoverVisible')\n    get mcVisible(): boolean {\n        return this._mcVisible;\n    }\n    set mcVisible(externalValue: boolean) {\n        const value = coerceBooleanProperty(externalValue);\n        this._mcVisible = value;\n        this.updateCompValue('mcVisible', value);\n\n        if (value) {\n            this.show();\n        } else {\n            this.hide();\n        }\n    }\n    private _mcVisible: boolean;\n\n    get isOpen(): boolean {\n        return this.isPopoverOpen;\n    }\n\n    private manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n    private readonly destroyed = new Subject<void>();\n\n    constructor(\n        private overlay: Overlay,\n        private elementRef: ElementRef,\n        private ngZone: NgZone,\n        private scrollDispatcher: ScrollDispatcher,\n        private hostView: ViewContainerRef,\n        @Inject(MC_POPOVER_SCROLL_STRATEGY) private scrollStrategy,\n        @Optional() private direction: Directionality) {\n            this.availablePositions = POSITION_MAP;\n        }\n\n    /** Create the overlay config and position strategy */\n    createOverlay(): OverlayRef {\n        if (this.overlayRef) {\n            return this.overlayRef;\n        }\n\n        // Create connected position strategy that listens for scroll events to reposition.\n        const strategy = this.overlay.position()\n            .flexibleConnectedTo(this.elementRef)\n            .withTransformOriginOn('.mc-popover')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(VIEWPORT_MARGIN)\n            .withPositions([ ...EXTENDED_OVERLAY_POSITIONS ]);\n\n        const scrollableAncestors = this.scrollDispatcher\n            .getAncestorScrollContainers(this.elementRef);\n\n        strategy.withScrollableContainers(scrollableAncestors);\n\n        strategy.positionChanges.pipe(takeUntil(this.destroyed)).subscribe((change) => {\n            if (this.popover) {\n                this.onPositionChange(change);\n                if (change.scrollableViewProperties.isOverlayClipped && this.popover.mcVisible) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the popover.\n                    this.ngZone.run(() => this.hide());\n                }\n            }\n        });\n\n        this.overlayRef = this.overlay.create({\n            direction: this.direction,\n            positionStrategy: strategy,\n            panelClass: 'mc-popover__panel',\n            scrollStrategy: this.scrollStrategy()\n        });\n\n        this.updatePosition();\n\n        this.overlayRef.detachments()\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(() => this.detach());\n\n        return this.overlayRef;\n    }\n\n    detach() {\n        if (this.overlayRef && this.overlayRef.hasAttached() && this.popover) {\n            this.overlayRef.detach();\n            this.popover = null;\n        }\n    }\n\n    onPositionChange($event: ConnectedOverlayPositionChange): void {\n        let updatedPlacement = this.mcPlacement;\n        Object.keys(this.availablePositions).some((key) => {\n            if ($event.connectionPair.originX === this.availablePositions[key].originX &&\n                $event.connectionPair.originY === this.availablePositions[key].originY &&\n                $event.connectionPair.overlayX === this.availablePositions[key].overlayX &&\n                $event.connectionPair.overlayY === this.availablePositions[key].overlayY) {\n                updatedPlacement = key;\n\n                return true;\n            }\n\n            return false;\n        });\n        this.updateCompValue('mcPlacement', updatedPlacement);\n\n        if (this.popover) {\n            this.updateCompValue('classList', this.classList);\n            this.popover.markForCheck();\n        }\n\n        this.handlePositionUpdate();\n    }\n\n    handlePositionUpdate() {\n        if (!this.overlayRef) {\n            this.overlayRef = this.createOverlay();\n        }\n\n        const verticalOffset = this.hostView.element.nativeElement.clientHeight / 2; // tslint:disable-line\n        const anchorElementWidth = this.hostView.element.nativeElement.clientWidth; // tslint:disable-line\n\n        if (this.mcPlacement === 'rightTop' || this.mcPlacement === 'leftTop') {\n            const currentContainer = this.overlayRef.overlayElement.style.top || '0px';\n            this.overlayRef.overlayElement.style.top =\n                `${parseInt(currentContainer.split('px')[0], 10) + verticalOffset - 20}px`; // tslint:disable-line\n        }\n\n        if (this.mcPlacement === 'rightBottom' || this.mcPlacement === 'leftBottom') {\n            const currentContainer = this.overlayRef.overlayElement.style.bottom || '0px';\n            this.overlayRef.overlayElement.style.bottom =\n                `${parseInt(currentContainer.split('px')[0], 10) + verticalOffset - 22}px`; // tslint:disable-line\n        }\n\n        if ((this.mcPlacement === 'topRight' || this.mcPlacement === 'bottomRight') &&\n            anchorElementWidth < MIN_ANCHOR_ELEMENT_WIDTH) {\n            const currentContainer = this.overlayRef.overlayElement.style.right || '0px';\n            this.overlayRef.overlayElement.style.right =\n                `${parseInt(currentContainer.split('px')[0], 10) - 18}px`; // tslint:disable-line\n        }\n\n        if ((this.mcPlacement === 'topLeft' || this.mcPlacement === 'bottomLeft') &&\n            anchorElementWidth < MIN_ANCHOR_ELEMENT_WIDTH) {\n            const currentContainer = this.overlayRef.overlayElement.style.left || '0px';\n            this.overlayRef.overlayElement.style.left =\n                `${parseInt(currentContainer.split('px')[0], 10) - 20}px`; // tslint:disable-line\n        }\n    }\n\n    // tslint:disable-next-line:no-any\n    updateCompValue(key: string, value: any): void {\n        if (this.isDynamicPopover && value) {\n            if (this.popover) {\n                this.popover[key] = value;\n            }\n        }\n    }\n\n    ngOnInit(): void {\n        this.initElementRefListeners();\n    }\n\n    ngOnDestroy(): void {\n        if (this.overlayRef) {\n            this.overlayRef.dispose();\n        }\n        this.manualListeners.forEach((listener, event) =>\n            this.elementRef.nativeElement.removeEventListener(event, listener));\n        this.manualListeners.clear();\n\n        this.$unsubscribe.next();\n        this.$unsubscribe.complete();\n    }\n\n    handleKeydown(e: KeyboardEvent) {\n        if (this.isOpen && e.keyCode === ESCAPE) { // tslint:disable-line\n            this.hide();\n        }\n    }\n\n    handleTouchend() {\n        this.hide();\n    }\n\n    initElementRefListeners() {\n        if (this.mcTrigger === 'hover') {\n\n            this.manualListeners\n                .set('mouseenter', () => this.show())\n                .set('mouseleave', () => this.hide())\n                .forEach((listener, event) => this.elementRef.nativeElement.addEventListener(event, listener));\n        }\n\n        if (this.mcTrigger === 'focus') {\n\n            this.manualListeners\n                .set('focus', () => this.show())\n                .set('blur', () => this.hide())\n                .forEach((listener, event) => this.elementRef.nativeElement.addEventListener(event, listener));\n        }\n    }\n\n    show(): void {\n        if (!this.disabled) {\n            if (!this.popover) {\n                const overlayRef = this.createOverlay();\n                this.detach();\n\n                this.portal = this.portal || new ComponentPortal(McPopoverComponent, this.hostView);\n\n                this.popover = overlayRef.attach(this.portal).instance;\n                this.isDynamicPopover = true;\n                const properties = [\n                    'mcPlacement',\n                    'mcPopoverSize',\n                    'mcTrigger',\n                    'mcMouseEnterDelay',\n                    'mcMouseLeaveDelay',\n                    'classList',\n                    'mcVisible',\n                    'mcHeader',\n                    'mcContent',\n                    'mcFooter'\n                ];\n\n                properties.forEach((property) => this.updateCompValue(property, this[ property ]));\n                this.popover.mcVisibleChange.pipe(takeUntil(this.$unsubscribe), distinctUntilChanged())\n                    .subscribe((data) => {\n                        this.mcVisible = data;\n                        this.mcVisibleChange.emit(data);\n                        this.isPopoverOpen = data;\n                    });\n                this.popover.afterHidden()\n                    .pipe(takeUntil(this.destroyed))\n                    .subscribe(() => this.detach());\n            }\n            this.updatePosition();\n            this.popover.show();\n        }\n    }\n\n    hide(): void {\n        if (this.popover) {\n            this.popover.hide();\n        }\n    }\n\n    /** Updates the position of the current popover. */\n    updatePosition(reapplyPosition: boolean = false) {\n        if (!this.overlayRef) {\n            this.overlayRef = this.createOverlay();\n        }\n        const position =\n            this.overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n        const origin = this.getOrigin();\n        const overlay = this.getOverlayPosition();\n\n        position.withPositions([\n            {...origin.main, ...overlay.main},\n            {...origin.fallback, ...overlay.fallback}\n        ]);\n\n        //\n        // FIXME: Необходимо в некоторых моментах форсировать позиционировать только после рендеринга всего контента\n        //\n        if (reapplyPosition) {\n            setTimeout(() => {\n                position.reapplyLastPosition();\n            });\n        }\n    }\n\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    getOrigin(): {main: IOriginConnectionPosition; fallback: IOriginConnectionPosition} {\n        let originPosition: IOriginConnectionPosition;\n        const originXPosition = this.getOriginXaxis();\n        const originYPosition = this.getOriginYaxis();\n        originPosition = {originX: originXPosition, originY: originYPosition};\n\n        const {x, y} = this.invertPosition(originPosition.originX, originPosition.originY);\n\n        return {\n            main: originPosition,\n            fallback: {originX: x, originY: y}\n        };\n    }\n\n    getOriginXaxis(): HorizontalConnectionPos {\n        const position = this.mcPlacement;\n        let origX: HorizontalConnectionPos;\n        const isLtr = !this.direction || this.direction.value === 'ltr';\n        if (position === 'top' || position === 'bottom') {\n            origX = 'center';\n        } else if (position.toLowerCase().includes('right') && !isLtr ||\n            position.toLowerCase().includes('left') && isLtr) {\n            origX = 'start';\n        } else if (position.toLowerCase().includes('right') && isLtr ||\n            position.toLowerCase().includes('left') && !isLtr) {\n            origX = 'end';\n        } else {\n            throw getMcPopoverInvalidPositionError(position);\n        }\n\n        return origX;\n    }\n\n    getOriginYaxis(): VerticalConnectionPos {\n        const position = this.mcPlacement;\n        let origY: VerticalConnectionPos;\n        if (position === 'right' || position === 'left') {\n            origY = 'center';\n        } else if (position.toLowerCase().includes('top')) {\n            origY = 'top';\n        } else if (position.toLowerCase().includes('bottom')) {\n            origY = 'bottom';\n        } else {\n            throw getMcPopoverInvalidPositionError(position);\n        }\n\n        return origY;\n    }\n\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    getOverlayPosition(): {main: IOverlayConnectionPosition; fallback: IOverlayConnectionPosition} {\n        const position = this.mcPlacement;\n        let overlayPosition: IOverlayConnectionPosition;\n        if (this.availablePositions[position]) {\n            overlayPosition = {\n                overlayX : this.availablePositions[position].overlayX,\n                overlayY: this.availablePositions[position].overlayY\n            };\n        } else {\n            throw getMcPopoverInvalidPositionError(position);\n        }\n\n        const {x, y} = this.invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n        return {\n            main: overlayPosition,\n            fallback: {overlayX: x, overlayY: y}\n        };\n    }\n\n    /** Inverts an overlay position. */\n    private invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n        let newX: HorizontalConnectionPos = x;\n        let newY: VerticalConnectionPos = y;\n        if (this.mcPlacement === 'top' || this.mcPlacement === 'bottom') {\n            if (y === 'top') {\n                newY = 'bottom';\n            } else if (y === 'bottom') {\n                newY = 'top';\n            }\n        } else {\n            if (x === 'end') {\n                newX = 'start';\n            } else if (x === 'start') {\n                newX = 'end';\n            }\n        }\n\n        return {x: newX, y: newY};\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\n\nimport {\n    McPopoverComponent,\n    McPopover,\n    MC_POPOVER_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './popover.component';\n\n\n@NgModule({\n    declarations: [McPopoverComponent, McPopover],\n    exports: [McPopoverComponent, McPopover],\n    imports: [CommonModule, OverlayModule],\n    providers: [MC_POPOVER_SCROLL_STRATEGY_FACTORY_PROVIDER],\n    entryComponents: [McPopoverComponent]\n})\nexport class McPopoverModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, CanColorCtor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressBarMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressBarBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressBarMixinBase:\n    CanColorCtor &\n    typeof McProgressBarBase =\n        mixinColor(McProgressBarBase);\n\n@Component({\n    selector: 'mc-progress-bar',\n    templateUrl: './progress-bar.component.html',\n    styleUrls: ['./progress-bar.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-bar',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressBar extends _McProgressBarMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-bar-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressBarMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McProgressBar\n} from './progress-bar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressBar\n    ],\n    declarations: [\n        McProgressBar\n    ]\n})\nexport class McProgressBarModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, CanColorCtor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressSpinnerBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressSpinnerMixinBase:\n    CanColorCtor &\n    typeof McProgressSpinnerBase =\n        mixinColor(McProgressSpinnerBase);\n\nconst MAX_DASH_ARRAY = 273;\n\n@Component({\n    selector: 'mc-progress-spinner',\n    templateUrl: './progress-spinner.component.html',\n    styleUrls: ['./progress-spinner.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-spinner',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressSpinner extends _McProgressSpinnerMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-spinner-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressSpinnerMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n\n    get dashOffsetPercent(): string {\n        return `${MAX_DASH_ARRAY - this.percentage * MAX_DASH_ARRAY}%`;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McProgressSpinner } from './progress-spinner.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressSpinner\n    ],\n    declarations: [\n        McProgressSpinner\n    ]\n})\nexport class McProgressSpinnerModule {}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef,\n    Input, OnDestroy, OnInit, Optional, Output, QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { UniqueSelectionDispatcher } from '@ptsecurity/cdk/collections';\n\nimport {\n    CanColor, CanColorCtor,\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/** Change event object emitted by McRadio. */\nexport class McRadioChange {\n    constructor(\n        /** The McRadioButton that emits the change event. */\n        public source: McRadioButton,\n        /** The value of the McRadioButton. */\n        public value: any) {}\n}\n\n// Boilerplate for applying mixins to McRadioGroup.\n/** @docs-private */\nexport class McRadioGroupBase {}\nexport const _McRadioGroupMixinBase: CanDisableCtor & typeof McRadioGroupBase = mixinDisabled(McRadioGroupBase);\n\n/**\n * Provider Expression that allows mc-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McRadioGroup),\n    multi: true\n};\n\n@Directive({\n    selector: 'mc-radio-group',\n    exportAs: 'mcRadioGroup',\n    providers: [MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n    host: {\n        role: 'radiogroup',\n        class: 'mc-radio-group'\n    },\n    inputs: ['disabled']\n})\nexport class McRadioGroup extends _McRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    @Input()\n    get name(): string { return this._name; }\n    set name(value: string) {\n        this._name = value;\n        this.updateRadioButtonNames();\n    }\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this.markRadiosForCheck();\n    }\n\n    /** Value of the radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n\n            this.updateSelectedRadioFromValue();\n            this.checkSelectedRadioButton();\n        }\n    }\n\n    /** Whether the radio button is selected. */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: McRadioButton | null) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this.checkSelectedRadioButton();\n    }\n\n    /** Whether the radio group is disabled */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /** Whether the radio group is required */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** Child radio buttons. */\n    @ContentChildren(forwardRef(() => McRadioButton), { descendants: true })\n    _radios: QueryList<McRadioButton>;\n\n    /**\n     * Selected value for group. Should equal the value of the selected radio button if there *is*\n     * a corresponding radio button with a matching value. If there is *not* such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    private _value: any = null;\n\n    /** The HTML name attribute applied to radio buttons in this group. */\n    private _name: string = `mc-radio-group-${nextUniqueId++}`;\n\n    /** The currently selected radio button. Should match value. */\n    private _selected: McRadioButton | null = null;\n\n    /** Whether the `value` has been set to its initial value. */\n    private _isInitialized: boolean = false;\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    private _labelPosition: 'before' | 'after' = 'after';\n\n    /** Whether the radio group is disabled. */\n    private _disabled: boolean = false;\n\n    /** Whether the radio group is required. */\n    private _required: boolean = false;\n\n    constructor(\n        private readonly _changeDetector: ChangeDetectorRef\n    ) {\n        super();\n    }\n\n    /** The method to be called in order to update ngModel */\n    // tslint:disable-next-line\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @docs-private\n     */\n    // tslint:disable-next-line\n    onTouched: () => any = () => {};\n\n    checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on McRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the McRadioGroup.\n        this._isInitialized = true;\n    }\n\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        if (this._isInitialized) {\n            this.change.emit(new McRadioChange(this._selected!, this._value));\n        }\n    }\n\n    markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach((radio) => radio.markForCheck());\n        }\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n\n    private updateRadioButtonNames(): void {\n        if (this._radios) {\n            this._radios.forEach((radio) => {\n                radio.name = this.name;\n            });\n        }\n    }\n\n    /** Updates the `selected` radio button from the internal _value state. */\n    private updateSelectedRadioFromValue(): void {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n        if (this._radios != null && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach((radio) => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n}\n\n\n// Boilerplate for applying mixins to McRadioButton.\n/** @docs-private */\nexport class McRadioButtonBase {\n    // Since the disabled property is manually defined for the McRadioButton and isn't set up in\n    // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n    // defined to properly work.\n    disabled: boolean;\n\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McRadioButtonMixinBase:\n    CanColorCtor &\n    HasTabIndexCtor &\n    typeof McRadioButtonBase =\n        mixinColor(mixinTabIndex(McRadioButtonBase));\n\n\n@Component({\n    selector: 'mc-radio-button',\n    templateUrl: 'radio.component.html',\n    styleUrls: ['radio.css'],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    exportAs: 'mcRadioButton',\n    host: {\n        class: 'mc-radio-button',\n        '[attr.id]': 'id',\n        '[class.mc-checked]': 'checked',\n        '[class.mc-disabled]': 'disabled',\n        '(focus)': '_inputElement.nativeElement.focus()'\n    }\n})\nexport class McRadioButton extends _McRadioButtonMixinBase\n    implements OnInit, OnDestroy, CanColor, HasTabIndex {\n\n    private readonly _uniqueId: string = `mc-radio-${++nextUniqueId}`;\n\n    /* tslint:disable:member-ordering */\n\n    /** The unique ID for the radio button. */\n    @Input() id: string = this._uniqueId;\n\n    /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n    @Input() name: string;\n\n    /** Used to set the 'aria-label' attribute on the underlying input element. */\n    @Input('aria-label') ariaLabel: string;\n\n    /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n    @Input('aria-labelledby') ariaLabelledby: string;\n\n    /** The 'aria-describedby' attribute is read after the element's label and field type. */\n    @Input('aria-describedby') ariaDescribedby: string;\n\n    /** Whether this radio button is checked. */\n    @Input()\n    get checked(): boolean { return this._checked; }\n    set checked(value: boolean) {\n        const newCheckedState = toBoolean(value);\n\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** The value of this radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(value: any) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup != null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n\n    /** Whether the radio button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n    }\n    set disabled(value: boolean) {\n        const newDisabledState = toBoolean(value);\n\n        if (this._disabled !== newDisabledState) {\n\n            this._disabled = newDisabledState;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** Whether the radio button is required. */\n    @Input()\n    get required(): boolean {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    private _labelPosition: 'before' | 'after';\n\n    /** The native `<input type=radio>` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** The parent radio group. May or may not be present. */\n    radioGroup: McRadioGroup;\n\n    @Input()\n    isFocused: boolean = false;\n\n    /** ID of the native input element inside `<mc-radio-button>` */\n    get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n    /** Whether this radio is checked. */\n    private _checked: boolean = false;\n\n    /** Whether this radio is disabled. */\n    private _disabled: boolean;\n\n    /** Whether this radio is required. */\n    private _required: boolean;\n\n    /** Value assigned to this radio. */\n    private _value: any = null;\n\n    /** Unregister function for _radioDispatcher */\n    // tslint:disable-next-line\n    private readonly removeUniqueSelectionListener: () => void = () => {};\n\n    constructor(\n        @Optional() radioGroup: McRadioGroup,\n        elementRef: ElementRef,\n        private readonly _changeDetector: ChangeDetectorRef,\n        private readonly _radioDispatcher: UniqueSelectionDispatcher\n    ) {\n\n        super(elementRef);\n\n        this.radioGroup = radioGroup;\n\n        this.removeUniqueSelectionListener =\n            _radioDispatcher.listen((id: string, name: string) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n\n    ngOnDestroy() {\n        this.removeUniqueSelectionListener();\n    }\n\n    /** Focuses the radio button. */\n    // tslint:disable-next-line\n    focus(): void {}\n\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n\n    onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n\n    onInputChange(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this.emitChangeEvent();\n\n        if (this.radioGroup) {\n            this.radioGroup.controlValueAccessorChangeFn(this.value);\n            this.radioGroup.touch();\n            if (groupValueChanged) {\n                this.radioGroup.emitChangeEvent();\n            }\n        }\n    }\n\n    /** Dispatch change event with current value. */\n    private emitChangeEvent(): void {\n        this.change.emit(new McRadioChange(this, this._value));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McRadioButton, McRadioGroup } from './radio.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule],\n    exports: [McRadioGroup, McRadioButton],\n    declarations: [McRadioGroup, McRadioButton]\n})\nexport class McRadioModule {\n}\n","import { Directive, Input } from '@angular/core';\n\nimport { CdkTreeNodeDef } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodeDef]',\n    inputs: ['when: mcTreeNodeDefWhen'],\n    providers: [{ provide: CdkTreeNodeDef, useExisting: McTreeNodeDef }]\n})\nexport class McTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n    @Input('mcTreeNode') data: T;\n}\n","import { Directive, Input, OnInit } from '@angular/core';\nimport { CdkTreeNodePadding } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodePadding]',\n    providers: [{ provide: CdkTreeNodePadding, useExisting: McTreeNodePadding }]\n})\nexport class McTreeNodePadding<T> extends CdkTreeNodePadding<T> implements OnInit {\n    @Input('mcTreeNodePadding') level: number;\n\n    @Input('mcTreeNodePaddingIndent') indent: number;\n\n    baseLeftPadding: number = 12;\n    /* tslint:disable-next-line:naming-convention */\n    _indent: number = 20;\n\n    withIcon: boolean;\n    iconWidth: number = 20;\n\n    get leftPadding(): number {\n        return (this.withIcon ? 0 : this.iconWidth) + this.baseLeftPadding;\n    }\n\n    paddingIndent(): string | null {\n        const nodeLevel = (this.treeNode.data && this.tree.treeControl.getLevel)\n            ? this.tree.treeControl.getLevel(this.treeNode.data)\n            : null;\n\n        const level = this.level || nodeLevel;\n\n        return level ? `${(level * this._indent) + this.leftPadding}px` : `${this.baseLeftPadding}px`;\n    }\n\n    ngOnInit(): void {\n        this.withIcon = this.tree.treeControl.isExpandable(this.treeNode.data);\n\n        this.setPadding();\n    }\n}\n","import { Directive } from '@angular/core';\nimport { CdkTreeNodeToggle } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodeToggle]',\n    host: {\n        '(click)': 'toggle($event)'\n    },\n    providers: [{ provide: CdkTreeNodeToggle, useExisting: McTreeNodeToggle }]\n})\nexport class McTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {}\n","import {\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    Output,\n    ElementRef,\n    Inject,\n    Optional,\n    InjectionToken\n} from '@angular/core';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { CdkTreeNode } from '@ptsecurity/cdk/tree';\nimport { CanDisable, toBoolean } from '@ptsecurity/mosaic/core';\n\n\n/* tslint:disable-next-line:naming-convention */\nexport interface McTreeOptionParentComponent {\n    multiple: boolean;\n    selectionModel: SelectionModel<McTreeOption>;\n    setFocusedOption: any;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MC_TREE_OPTION_PARENT_COMPONENT =\n    new InjectionToken<McTreeOptionParentComponent>('MC_TREE_OPTION_PARENT_COMPONENT');\n\nexport class McTreeOptionChange {\n    constructor(public source: McTreeOption, public isUserInput = false) {}\n}\n\nlet uniqueIdCounter: number = 0;\n\n@Component({\n    selector: 'mc-tree-option',\n    exportAs: 'mcTreeOption',\n    host: {\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'getTabIndex()',\n\n        '[attr.disabled]': 'disabled || null',\n\n        class: 'mc-tree-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-active]': 'active',\n\n        '(click)': 'selectViaInteraction()'\n    },\n    templateUrl: './tree-option.html',\n    providers: [{ provide: CdkTreeNode, useExisting: McTreeOption }]\n})\nexport class McTreeOption extends CdkTreeNode<McTreeOption> implements CanDisable {\n    @Output() readonly onSelectionChange = new EventEmitter<McTreeOptionChange>();\n\n    @Input() value: any;\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    // @Input()\n    // get selected(): boolean {\n    //     return this.treeSelection.selectionModel && this.treeSelection.selectionModel.isSelected(this) || false;\n    // }\n\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            // this.treeSelection._reportValueChange();\n        }\n    }\n\n    private _selected: boolean = false;\n\n    /**\n     * Whether or not the option is currently active and ready to be selected.\n     * An active option displays styles as if it is focused, but the\n     * focus is actually retained somewhere else. This comes in handy\n     * for components like autocomplete where focus must remain on the input.\n     */\n    get active(): boolean {\n        return this._active;\n    }\n\n    private _active = false;\n\n    get id(): string {\n        return this._id;\n    }\n\n    private _id = `mc-tree-option-${uniqueIdCounter++}`;\n\n    get multiple(): boolean {\n        return this.parent.multiple;\n    }\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_TREE_OPTION_PARENT_COMPONENT) private readonly parent: McTreeOptionParentComponent\n    ) {\n        // todo any\n        super(elementRef, parent as any);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.parent.selectionModel) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.parent.selectionModel.select(this);\n        } else {\n            this.parent.selectionModel.deselect(this);\n        }\n\n        // this._changeDetector.markForCheck();\n    }\n\n    /**\n     * This method sets display styles on the option to make it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setActiveStyles(): void {\n        if (!this._active) {\n            this._active = true;\n\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    /**\n     * This method removes display styles on the option that made it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setInactiveStyles(): void {\n        if (this._active) {\n            this._active = false;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    getHeight(): number {\n        const clientRects = this.elementRef.nativeElement.getClientRects();\n\n        if (clientRects.length) {\n            return clientRects[0].height;\n        }\n\n        return 0;\n    }\n\n    focus(): void {\n        const element = this.getHostElement();\n\n        if (typeof element.focus === 'function') {\n            element.focus();\n        }\n    }\n\n    // todo старая реализация, нужно восстановить tree-selection\n    // handleClick(): void {\n    //     if (this.disabled) { return; }\n    //\n    //     this.treeSelection.setFocusedOption(this);\n    // }\n\n    /**\n     * The displayed value of the option. It is necessary to show the selected option in the\n     * select's trigger.\n     */\n    get viewValue(): string {\n        // TODO(kara): Add input property alternative for node envs.\n        return (this.getHostElement().textContent || '').trim();\n    }\n\n    select(): void {\n        if (!this._selected) {\n            this._selected = true;\n\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    deselect(): void {\n        if (this._selected) {\n            this._selected = false;\n\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    selectViaInteraction(): void {\n        if (!this.disabled) {\n            this._selected = this.multiple ? !this._selected : true;\n\n            this.changeDetectorRef.markForCheck();\n            this.emitSelectionChangeEvent(true);\n\n            if (this.parent.setFocusedOption) {\n                this.parent.setFocusedOption(this);\n            }\n        }\n    }\n\n    emitSelectionChangeEvent(isUserInput = false): void {\n        this.onSelectionChange.emit(new McTreeOptionChange(this, isUserInput));\n    }\n\n    getHostElement(): HTMLElement {\n        return this.elementRef.nativeElement;\n    }\n\n    getTabIndex(): string {\n        return this.disabled ? '-1' : '0';\n    }\n}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    EventEmitter,\n    Input,\n    IterableDiffer,\n    IterableDiffers,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    ElementRef\n} from '@angular/core';\nimport { NodeDef, ViewData } from '@angular/core/src/view';\nimport { ActiveDescendantKeyManager } from '@ptsecurity/cdk/a11y';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, SPACE } from '@ptsecurity/cdk/keycodes';\nimport { CdkTree, CdkTreeNodeOutlet } from '@ptsecurity/cdk/tree';\nimport {\n    CanDisable,\n    CanDisableCtor,\n    HasTabIndex,\n    HasTabIndexCtor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\nimport { Subject } from 'rxjs';\n\nimport { MC_TREE_OPTION_PARENT_COMPONENT, McTreeOption } from './tree-option';\n\n\nexport class McTreeNavigationChange {\n    constructor(\n        public source: McTreeSelection,\n        public option: McTreeOption\n    ) {}\n}\n\nexport class McTreeSelectionChange {\n    constructor(public source: McTreeSelection, public option: McTreeOption) {}\n}\n\nclass McTreeSelectionBase<T> extends CdkTree<T> {\n    constructor(differs: IterableDiffers, changeDetectorRef: ChangeDetectorRef) {\n        super(differs, changeDetectorRef);\n    }\n}\n\n/* tslint:disable-next-line:naming-convention */\nconst McTreeSelectionBaseMixin: HasTabIndexCtor & CanDisableCtor &\n    typeof McTreeSelectionBase = mixinTabIndex(mixinDisabled(McTreeSelectionBase));\n\n\n@Component({\n    selector: 'mc-tree-selection',\n    exportAs: 'mcTreeSelection',\n    template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n    host: {\n        class: 'mc-tree-selection',\n\n        '[attr.tabindex]': 'tabIndex',\n\n        '(keydown)': 'onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    styleUrls: ['./tree.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [\n        { provide: MC_TREE_OPTION_PARENT_COMPONENT, useExisting: McTreeSelection },\n        { provide: CdkTree, useExisting: McTreeSelection }\n    ]\n})\nexport class McTreeSelection extends McTreeSelectionBaseMixin<McTreeOption>\n    implements AfterContentInit, CanDisable, HasTabIndex {\n\n    @ViewChild(CdkTreeNodeOutlet) nodeOutlet: CdkTreeNodeOutlet;\n\n    @ContentChildren(McTreeOption) options: QueryList<McTreeOption>;\n\n    keyManager: ActiveDescendantKeyManager<McTreeOption>;\n\n    selectionModel: SelectionModel<McTreeOption>;\n\n    tabIndex: number;\n    multiple: boolean;\n    autoSelect: boolean;\n    noUnselect: boolean;\n\n    // todo temporary solution\n    withShift: boolean;\n    withCtrl: boolean;\n\n\n    @Output() readonly navigationChange = new EventEmitter<McTreeNavigationChange>();\n\n    @Output() readonly selectionChange = new EventEmitter<McTreeSelectionChange>();\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(rawValue: boolean) {\n        const value = toBoolean(rawValue);\n\n        if (this._disabled !== value) {\n            this._disabled = value;\n\n            if (this._disabled) {\n                /* tslint:disable-next-line:no-console */\n                console.log('need disable all options');\n            } else {\n                /* tslint:disable-next-line:no-console */\n                console.log('need enable all options');\n            }\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    private readonly destroy = new Subject<void>();\n\n    constructor(\n        private elementRef: ElementRef,\n        differs: IterableDiffers,\n        changeDetectorRef: ChangeDetectorRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('multiple') multiple: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string\n    ) {\n        super(differs, changeDetectorRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.multiple = multiple === null ? false : toBoolean(multiple);\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.selectionModel = new SelectionModel<McTreeOption>(this.multiple);\n    }\n\n    ngAfterContentInit(): void {\n        this.keyManager = new ActiveDescendantKeyManager<McTreeOption>(this.options)\n            .withVerticalOrientation(true)\n            .withHorizontalOrientation(null);\n    }\n\n    ngOnDestroy() {\n        this.destroy.next();\n\n        this.destroy.complete();\n    }\n\n    onKeyDown(event: KeyboardEvent) {\n        // tslint:disable-next-line: deprecation\n        const keyCode = event.keyCode;\n        this.withShift = event.shiftKey;\n        this.withCtrl = event.ctrlKey;\n\n        switch (keyCode) {\n            case LEFT_ARROW:\n                if (this.keyManager.activeItem) {\n                    this.treeControl.collapse(this.keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                break;\n            case RIGHT_ARROW:\n                if (this.keyManager.activeItem) {\n                    this.treeControl.expand(this.keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                break;\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this.keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this.keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                this.keyManager.setPreviousPageItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                this.keyManager.setNextPageItemActive();\n                event.preventDefault();\n\n                break;\n            default:\n                this.keyManager.onKeydown(event);\n        }\n    }\n\n    updateScrollSize(): void {\n        if (!this.options.first) { return; }\n\n        this.keyManager.withScrollSize(Math.floor(this.getHeight() / this.options.first.getHeight()));\n    }\n\n    setFocusedOption(option: McTreeOption) {\n        this.keyManager.setActiveItem(option);\n\n        if (this.withShift && this.multiple) {\n            const previousIndex = this.keyManager.previousActiveItemIndex;\n            const activeIndex = this.keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n\n            this.withShift = false;\n        } else if (this.withCtrl) {\n            this.withCtrl = false;\n\n            if (!this.canDeselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) {\n                this.options.forEach((item) => item.setSelected(false));\n                option.setSelected(true);\n            }\n        }\n\n        this.emitNavigationEvent(option);\n    }\n\n    toggleFocusedOption(): void {\n        const focusedIndex = this.keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this.isValidIndex(focusedIndex)) {\n            const focusedOption: McTreeOption = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this.canDeselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this.emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    renderNodeChanges(\n        data: McTreeOption[],\n        dataDiffer: IterableDiffer<McTreeOption> = this.dataDiffer,\n        viewContainer: any = this.nodeOutlet.viewContainer,\n        parentData?: McTreeOption\n    ): void {\n        super.renderNodeChanges(data, dataDiffer, viewContainer, parentData);\n\n        const arrayOfInstances = [];\n\n        viewContainer._embeddedViews.forEach((view: ViewData) => {\n            const viewDef = view.def;\n\n            viewDef.nodes.forEach((node: NodeDef) => {\n                if (viewDef.nodeMatchedQueries === node.matchedQueryIds) {\n                    const nodeData: any = view.nodes[node.nodeIndex];\n\n                    arrayOfInstances.push(nodeData.instance as never);\n                }\n            });\n        });\n\n        if (this.options) {\n            this.options.reset(arrayOfInstances);\n            this.options.notifyOnChanges();\n        }\n\n        this.updateScrollSize();\n    }\n\n    getHeight(): number {\n        const clientRects = this.elementRef.nativeElement.getClientRects();\n\n        if (clientRects.length) {\n            return clientRects[0].height;\n        }\n\n        return 0;\n    }\n\n    emitNavigationEvent(option: McTreeOption): void {\n        this.navigationChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    emitChangeEvent(option: McTreeOption): void {\n        this.selectionChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    private isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    private canDeselectLast(option: McTreeOption): boolean {\n        return !(this.noUnselect && this.selectionModel.selected.length === 1 && option.selected);\n    }\n}\n\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CdkTreeModule } from '@ptsecurity/cdk/tree';\nimport { McPseudoCheckboxModule } from '@ptsecurity/mosaic/core';\n\nimport { McTreeNodeDef } from './node';\nimport { McTreeNodePadding } from './padding';\nimport { McTreeNodeToggle } from './toggle';\nimport { McTreeOption } from './tree-option';\nimport { McTreeSelection } from './tree-selection';\n\n\nconst MC_TREE_DIRECTIVES = [\n    McTreeSelection,\n    McTreeOption,\n    McTreeNodeDef,\n    McTreeNodePadding,\n    McTreeNodeToggle\n];\n\n@NgModule({\n    imports: [CommonModule, CdkTreeModule, McPseudoCheckboxModule],\n    exports: MC_TREE_DIRECTIVES,\n    declarations: MC_TREE_DIRECTIVES\n})\nexport class McTreeModule {}\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { FlatTreeControl, ITreeControl } from '@ptsecurity/cdk/tree';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class McTreeFlattener<T, F> {\n    constructor(\n        public transformFunction: (node: T, level: number) => F,\n        public getLevel: (node: F) => number,\n        public isExpandable: (node: F) => boolean,\n        public getChildren: (node: T) => Observable<T[]>\n    ) {}\n\n    flattenNode(node: T, level: number, resultNodes: F[], parentMap: boolean[]): F[] {\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n\n        if (this.isExpandable(flatNode)) {\n            this.getChildren(node)\n                .pipe(take(1))\n                .subscribe((children) => {\n                    children.forEach((child, index) => {\n                        const childParentMap: boolean[] = parentMap.slice();\n                        childParentMap.push(index !== children.length - 1);\n\n                        this.flattenNode(child, level + 1, resultNodes, childParentMap);\n                    });\n                });\n        }\n\n        return resultNodes;\n    }\n\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n    flattenNodes(structuredData: T[]): F[] {\n        const resultNodes: F[] = [];\n        structuredData.forEach((node) => this.flattenNode(node, 0, resultNodes, []));\n\n        return resultNodes;\n    }\n\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n    expandFlattenedNodes(nodes: F[], treeControl: ITreeControl<F>): F[] {\n        const results: F[] = [];\n        const currentExpand: boolean[] = [];\n        currentExpand[0] = true;\n\n        nodes.forEach((node) => {\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n\n            if (expand) { results.push(node); }\n\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        });\n\n        return results;\n    }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `McTree`.\n * The nested tree nodes of type `T` are flattened through `MсTreeFlattener`, and converted\n * to type `F` for `McTree` to consume.\n */\nexport class McTreeFlatDataSource<T, F> extends DataSource<F> {\n    flattenedData = new BehaviorSubject<F[]>([]);\n\n    expandedData = new BehaviorSubject<F[]>([]);\n\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n\n        this.flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n        this.treeControl.dataNodes = this.flattenedData.value;\n    }\n\n    private _data: BehaviorSubject<T[]>;\n\n    constructor(\n        private treeControl: FlatTreeControl<F>,\n        private treeFlattener: McTreeFlattener<T, F>,\n        initialData: T[] = []\n    ) {\n        super();\n\n        this._data = new BehaviorSubject<T[]>(initialData);\n    }\n\n    connect(collectionViewer: ICollectionViewer): Observable<F[]> {\n        const changes = [\n            collectionViewer.viewChange,\n            this.treeControl.expansionModel.changed,\n            this.flattenedData\n        ];\n\n        return merge(...changes)\n            .pipe(map(() => {\n                this.expandedData.next(\n                    this.treeFlattener.expandFlattenedNodes(this.flattenedData.value, this.treeControl)\n                );\n\n                return this.expandedData.value;\n            }));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by ITreeControl and each non-leaf node.\n */\nexport class McTreeNestedDataSource<T> extends DataSource<T> {\n\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n    }\n\n    /* tslint:disable-next-line:naming-convention */\n    private _data = new BehaviorSubject<T[]>([]);\n\n    connect(collectionViewer: ICollectionViewer): Observable<T[]> {\n        return merge(...[collectionViewer.viewChange, this._data])\n            .pipe(map(() => this.data));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import { DOCUMENT } from '@angular/common';\nimport {\n    AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef,\n    Component,\n    ComponentFactoryResolver,\n    ComponentRef,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Injector,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    Renderer2,\n    SimpleChanges,\n    TemplateRef,\n    Type,\n    ViewChild,\n    ViewContainerRef, ViewEncapsulation\n} from '@angular/core';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { Overlay, OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { McMeasureScrollbarService } from '@ptsecurity/mosaic/core';\nimport { Observable } from 'rxjs';\n\nimport { McModalControlService } from './modal-control.service';\nimport { McModalRef } from './modal-ref.class';\n// tslint:disable-next-line\nimport ModalUtil from './modal-util';\nimport { IModalButtonOptions, IModalOptions, ModalType, OnClickCallback } from './modal.type';\n\n\n// Duration when perform animations (ms)\nexport const MODAL_ANIMATE_DURATION = 200;\n\ntype AnimationState = 'enter' | 'leave' | null;\n\n@Component({\n    selector: 'mc-modal',\n    templateUrl: './modal.component.html',\n    styleUrls: ['./modal.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        '(keydown)': 'onKeyDown($event)'\n    }\n})\nexport class McModalComponent<T = any, R = any> extends McModalRef<T, R>\n    implements OnInit, OnChanges, AfterViewInit, OnDestroy, IModalOptions {\n\n    // tslint:disable-next-line:no-any\n    @Input() mcModalType: ModalType = 'default';\n    // If not specified, will use <ng-content>\n    @Input() mcContent: string | TemplateRef<{}> | Type<T>;\n    // available when mcContent is a component\n    @Input() mcComponentParams: T;\n    // Default Modal ONLY\n    @Input() mcFooter: string | TemplateRef<{}> | IModalButtonOptions<T>[];\n\n    @Input()\n    get mcVisible() { return this._mcVisible; }\n    set mcVisible(value) { this._mcVisible = value; }\n\n    _mcVisible = false;\n\n    @Output() mcVisibleChange = new EventEmitter<boolean>();\n\n    @Input() mcZIndex: number = 1000;\n    @Input() mcWidth: number | string = 480;\n    @Input() mcWrapClassName: string;\n    @Input() mcClassName: string;\n    @Input() mcStyle: object;\n    @Input() mcTitle: string | TemplateRef<{}>;\n    @Input() mcCloseByESC: boolean = true;\n\n    @Input()\n    get mcClosable() { return this._mcClosable; }\n    set mcClosable(value) { this._mcClosable = value; }\n    _mcClosable = true;\n\n    @Input()\n    get mcMask() { return this._mcMask; }\n    set mcMask(value) { this._mcMask = value; }\n    _mcMask = true;\n\n    @Input()\n    get mcMaskClosable() { return this._mcMaskClosable; }\n    set mcMaskClosable(value) { this._mcMaskClosable = value; }\n    _mcMaskClosable = true;\n\n    @Input() mcMaskStyle: object;\n    @Input() mcBodyStyle: object;\n\n    // Trigger when modal open(visible) after animations\n    @Output() mcAfterOpen = new EventEmitter<void>();\n    // Trigger when modal leave-animation over\n    @Output() mcAfterClose = new EventEmitter<R>();\n\n    // --- Predefined OK & Cancel buttons\n    @Input() mcOkText: string;\n    @Input() mcOkType = 'primary';\n\n    @Input()\n    get mcOkLoading() { return this._mcOkLoading; }\n    set mcOkLoading(value) { this._mcOkLoading = value; }\n    _mcOkLoading = false;\n\n    @Input() @Output() mcOnOk: EventEmitter<T> | OnClickCallback<T> = new EventEmitter<T>();\n    @Input() mcCancelText: string;\n\n    @Input()\n    get mcCancelLoading() { return this._mcCancelLoading; }\n    set mcCancelLoading(value) { this._mcCancelLoading = value; }\n    _mcCancelLoading = false;\n\n    @Input() @Output() mcOnCancel: EventEmitter<T> | OnClickCallback<T> = new EventEmitter<T>();\n\n    @ViewChild('modalContainer') modalContainer: ElementRef;\n    @ViewChild('bodyContainer', { read: ViewContainerRef }) bodyContainer: ViewContainerRef;\n    // Only aim to focus the ok button that needs to be auto focused\n    @ViewChild('autoFocusButtonOk', { read: ElementRef }) autoFocusButtonOk: ElementRef;\n\n    maskAnimationClassMap: object;\n    modalAnimationClassMap: object;\n    // The origin point that animation based on\n    transformOrigin = '0px 0px 0px';\n\n    // Observable alias for mcAfterOpen\n    get afterOpen(): Observable<void> {\n        return this.mcAfterOpen.asObservable();\n    }\n\n    // Observable alias for mcAfterClose\n    get afterClose(): Observable<R> {\n        return this.mcAfterClose.asObservable();\n    }\n\n    get okText(): string {\n        return this.mcOkText;\n    }\n\n    get cancelText(): string {\n        return this.mcCancelText;\n    }\n\n    // Indicate whether this dialog should hidden\n    get hidden(): boolean {\n        return !this.mcVisible && !this.animationState;\n    }\n\n    // Handle the reference when using mcContent as Component\n    private contentComponentRef: ComponentRef<T>;\n    // Current animation state\n    private animationState: AnimationState;\n    private container: HTMLElement | OverlayRef;\n\n    constructor(\n        private overlay: Overlay,\n        private renderer: Renderer2,\n        private cfr: ComponentFactoryResolver,\n        private elementRef: ElementRef,\n        private viewContainer: ViewContainerRef,\n        private mcMeasureScrollbarService: McMeasureScrollbarService,\n        private modalControl: McModalControlService,\n        private changeDetector: ChangeDetectorRef,\n        @Inject(DOCUMENT) private document: any) {\n\n        super();\n    }\n\n    @Input() mcGetContainer: HTMLElement | OverlayRef | (() => HTMLElement | OverlayRef) = () => this.overlay.create();\n\n    ngOnInit() {\n\n        // Create component along without View\n        if (this.isComponent(this.mcContent)) {\n            this.createDynamicComponent(this.mcContent as Type<T>);\n        }\n\n        // Setup default button options\n        if (this.isModalButtons(this.mcFooter)) {\n            this.mcFooter = this.formatModalButtons(this.mcFooter as IModalButtonOptions<T>[]);\n        }\n\n        // Place the modal dom to elsewhere\n        this.container = typeof this.mcGetContainer === 'function' ? this.mcGetContainer() : this.mcGetContainer;\n        if (this.container instanceof HTMLElement) {\n            this.container.appendChild(this.elementRef.nativeElement);\n        } else if (this.container instanceof OverlayRef) {\n            // NOTE: only attach the dom to overlay, the view container is not changed actually\n            this.container.overlayElement.appendChild(this.elementRef.nativeElement);\n        }\n\n        // Register modal when afterOpen/afterClose is stable\n        this.modalControl.registerModal(this);\n    }\n\n    // [NOTE] NOT available when using by service!\n    // Because ngOnChanges never be called when using by service,\n    // here we can't support \"mcContent\"(Component) etc. as inputs that initialized dynamically.\n    // BUT: User also can change \"mcContent\" dynamically to trigger UI changes\n    // (provided you don't use \bComponent that needs initializations)\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.mcVisible) {\n            // Do not trigger animation while initializing\n            this.handleVisibleStateChange(this.mcVisible, !changes.mcVisible.firstChange);\n        }\n    }\n\n    ngAfterViewInit() {\n        // If using Component, it is the time to attach View while bodyContainer is ready\n        if (this.contentComponentRef) {\n            this.bodyContainer.insert(this.contentComponentRef.hostView);\n        }\n\n        if (this.autoFocusButtonOk) {\n            (this.autoFocusButtonOk.nativeElement as HTMLButtonElement).focus();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.container instanceof OverlayRef) {\n            this.container.dispose();\n        }\n    }\n\n    open() {\n        this.changeVisibleFromInside(true);\n    }\n\n    close(result?: R) {\n        this.changeVisibleFromInside(false, result);\n    }\n\n    // Destroy equals Close\n    destroy(result?: R) {\n        this.close(result);\n    }\n\n    triggerOk() {\n        this.onClickOkCancel('ok');\n    }\n\n    triggerCancel() {\n        this.onClickOkCancel('cancel');\n    }\n\n    getInstance(): McModalComponent {\n        return this;\n    }\n\n    getContentComponentRef(): ComponentRef<T> {\n        return this.contentComponentRef;\n    }\n\n    getContentComponent(): T {\n        return this.contentComponentRef && this.contentComponentRef.instance;\n    }\n\n    getElement(): HTMLElement {\n        return this.elementRef && this.elementRef.nativeElement;\n    }\n\n    onClickMask($event: MouseEvent) {\n        if (\n            this.mcMask &&\n            this.mcMaskClosable &&\n            ($event.target as HTMLElement).classList.contains('mc-modal-wrap') &&\n            this.mcVisible\n        ) {\n            this.onClickOkCancel('cancel');\n        }\n    }\n\n    // tslint:disable-next-line\n    isModalType(type: ModalType): boolean {\n        return this.mcModalType === type;\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n\n        if (event.keyCode === ESCAPE && this.container && (this.container instanceof OverlayRef)) {\n\n            this.close();\n            event.preventDefault();\n        }\n    }\n\n    // AoT\n    onClickCloseBtn() {\n        if (this.mcVisible) {\n            this.onClickOkCancel('cancel');\n        }\n    }\n\n    // AoT\n    // tslint:disable-next-line\n    onClickOkCancel(type: 'ok' | 'cancel') {\n        const trigger = { ok: this.mcOnOk, cancel: this.mcOnCancel }[type];\n        const loadingKey = { ok: 'mcOkLoading', cancel: 'mcCancelLoading' }[type];\n\n        if (trigger instanceof EventEmitter) {\n            trigger.emit(this.getContentComponent());\n        } else if (typeof trigger === 'function') {\n\n            const result = trigger(this.getContentComponent());\n            // Users can return \"false\" to prevent closing by default\n            const caseClose = (doClose: boolean | void | {}) => (doClose !== false) && this.close(doClose as R);\n\n            if (isPromise(result)) {\n                this[loadingKey] = true;\n                const handleThen = (doClose) => {\n                    this[loadingKey] = false;\n                    caseClose(doClose);\n                };\n                (result as Promise<void>).then(handleThen).catch(handleThen);\n            } else {\n                caseClose(result);\n            }\n        }\n    }\n\n    // AoT\n    isNonEmptyString(value: {}): boolean {\n        return typeof value === 'string' && value !== '';\n    }\n\n    // AoT\n    isTemplateRef(value: {}): boolean {\n        return value instanceof TemplateRef;\n    }\n\n    // AoT\n    isComponent(value: {}): boolean {\n        return value instanceof Type;\n    }\n\n    // AoT\n    isModalButtons(value: {}): boolean {\n        return Array.isArray(value) && value.length > 0;\n    }\n\n    // Do rest things when visible state changed\n    private handleVisibleStateChange(visible: boolean, animation: boolean = true, closeResult?: R): Promise<any> {\n        // Hide scrollbar at the first time when shown up\n        if (visible) {\n            this.changeBodyOverflow(1);\n        }\n\n        return Promise\n            .resolve(animation && this.animateTo(visible))\n            // Emit open/close event after animations over\n            .then(() => {\n                if (visible) {\n                    this.mcAfterOpen.emit();\n                } else {\n                    this.mcAfterClose.emit(closeResult);\n                    // Show/hide scrollbar when animation is over\n                    this.changeBodyOverflow();\n                }\n            });\n    }\n\n    // Lookup a button's property, if the prop is a function, call & then return the result, otherwise, return itself.\n    // AoT\n    // tslint:disable-next-line\n    getButtonCallableProp(options: IModalButtonOptions<T>, prop: string): {} {\n        const value = options[prop];\n        const args: any[] = [];\n        if (this.contentComponentRef) {\n            args.push(this.contentComponentRef.instance);\n        }\n\n        return typeof value === 'function' ? value.apply(options, args) : value;\n    }\n\n    // On mcFooter's modal button click\n    // AoT\n    // tslint:disable-next-line\n    onButtonClick(button: IModalButtonOptions<T>) {\n        // Call onClick directly\n        const result = this.getButtonCallableProp(button, 'onClick');\n        if (isPromise(result)) {\n            button.loading = true;\n            (result as Promise<{}>).then(() => button.loading = false).catch(() => button.loading = false);\n        }\n    }\n\n    // Change mcVisible from inside\n    private changeVisibleFromInside(visible: boolean, closeResult?: R): Promise<void> {\n        if (this.mcVisible !== visible) {\n            // Change mcVisible value immediately\n            this.mcVisible = visible;\n            this.mcVisibleChange.emit(visible);\n\n            return this.handleVisibleStateChange(visible, true, closeResult);\n        }\n\n        return Promise.resolve();\n    }\n\n    private changeAnimationState(state: AnimationState) {\n        this.animationState = state;\n        if (state) {\n            this.maskAnimationClassMap = {\n                [`fade-${state}`]: true,\n                [`fade-${state}-active`]: true\n            };\n            this.modalAnimationClassMap = {\n                [`zoom-${state}`]: true,\n                [`zoom-${state}-active`]: true\n            };\n        } else {\n            // @ts-ignore\n            this.maskAnimationClassMap = this.modalAnimationClassMap = null;\n        }\n\n        if (this.contentComponentRef) {\n            this.contentComponentRef.changeDetectorRef.markForCheck();\n        } else {\n            this.changeDetector.markForCheck();\n        }\n    }\n\n    private animateTo(isVisible: boolean): Promise<any> {\n        // Figure out the lastest click position when shows up\n        if (isVisible) {\n            // [NOTE] Using timeout due to the document.click event is fired later than visible change,\n            // so if not postponed to next event-loop, we can't get the lastest click position\n            window.setTimeout(() => this.updateTransformOrigin());\n        }\n\n        this.changeAnimationState(isVisible ? 'enter' : 'leave');\n\n        // Return when animation is over\n        return new Promise((resolve) => window.setTimeout(() => {\n            this.changeAnimationState(null);\n            resolve();\n        }, MODAL_ANIMATE_DURATION));\n    }\n\n    private formatModalButtons(buttons: IModalButtonOptions<T>[]): IModalButtonOptions<T>[] {\n        return buttons.map((button) => {\n\n            return {\n                ...{\n                    type: 'default',\n                    size: 'default',\n                    autoLoading: true,\n                    show: true,\n                    loading: false,\n                    disabled: false\n                },\n                ...button\n            };\n        });\n    }\n\n    /**\n     * Create a component dynamically but not attach to any View\n     * (this action will be executed when bodyContainer is ready)\n     * @param component Component class\n     */\n    private createDynamicComponent(component: Type<T>) {\n        const factory = this.cfr.resolveComponentFactory(component);\n        const childInjector = Injector.create({\n            providers: [{provide: McModalRef, useValue: this}],\n            parent: this.viewContainer.parentInjector\n        });\n\n        this.contentComponentRef = factory.create(childInjector);\n\n        if (this.mcComponentParams) {\n            Object.assign(this.contentComponentRef.instance, this.mcComponentParams);\n        }\n\n        // Do the first change detection immediately\n        // (or we do detection at ngAfterViewInit, multi-changes error will be thrown)\n        this.contentComponentRef.changeDetectorRef.detectChanges();\n\n\n    }\n\n    // Update transform-origin to the last click position on document\n    private updateTransformOrigin() {\n        const modalElement = this.modalContainer.nativeElement as HTMLElement;\n        const lastPosition = ModalUtil.getLastClickPosition();\n\n        if (lastPosition) {\n            // tslint:disable-next-line\n            this.transformOrigin = `${lastPosition.x - modalElement.offsetLeft}px ${lastPosition.y - modalElement.offsetTop}px 0px`;\n        }\n    }\n\n    /**\n     * Take care of the body's overflow to decide the existense of scrollbar\n     * @param plusNum The number that the openModals.length will increase soon\n     */\n    private changeBodyOverflow(plusNum: number = 0) {\n        const openModals = this.modalControl.openModals;\n\n        if (openModals.length + plusNum > 0) {\n            // tslint:disable-next-line\n            this.renderer.setStyle(this.document.body, 'padding-right', `${this.mcMeasureScrollbarService.scrollBarWidth}px`);\n            this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n        } else {\n            this.renderer.removeStyle(this.document.body, 'padding-right');\n            this.renderer.removeStyle(this.document.body, 'overflow');\n        }\n    }\n}\n\n////////////\n\nfunction isPromise(obj: {} | void): boolean {\n    // tslint:disable-next-line\n    return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof (obj as Promise<{}>).then === 'function' && typeof (obj as Promise<{}>).catch === 'function';\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n\n@Pipe({\n    name: 'toCssUnit'\n})\nexport class CssUnitPipe implements PipeTransform {\n    transform(value: number | string, defaultUnit: string = 'px'): string {\n        const formatted = +value;\n\n        return isNaN(formatted) ? `${value}` : `${formatted}${defaultUnit}`;\n    }\n}\n","import { ComponentRef, Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { Overlay, OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal } from '@ptsecurity/cdk/portal';\n\nimport { McModalControlService } from './modal-control.service';\nimport { McModalRef } from './modal-ref.class';\nimport { McModalComponent } from './modal.component';\nimport { ConfirmType, IModalOptions, IModalOptionsForService } from './modal.type';\n\n\n// A builder used for managing service creating modals\nexport class ModalBuilderForService {\n\n    // Modal ComponentRef, \"null\" means it has been destroyed\n    private modalRef: ComponentRef<McModalComponent> | null;\n    private overlayRef: OverlayRef;\n\n    constructor(private overlay: Overlay, options: IModalOptionsForService = {}) {\n        this.createModal();\n\n        if (!('mcGetContainer' in options)) {\n            options.mcGetContainer = undefined;\n        }\n\n        this.changeProps(options);\n        this.modalRef!.instance.open();\n        this.modalRef!.instance.mcAfterClose.subscribe(() => this.destroyModal());\n\n        this.overlayRef.keydownEvents()\n            // @ts-ignore\n            .pipe(filter((event: KeyboardEvent) => {\n                return event.keyCode === ESCAPE && options.mcCloseByESC;\n            }))\n            .subscribe(() => this.modalRef!.instance.close());\n    }\n\n    getInstance(): McModalComponent | null {\n        return this.modalRef && this.modalRef.instance;\n    }\n\n    destroyModal(): void {\n        if (this.modalRef) {\n            this.overlayRef.dispose();\n            this.modalRef = null;\n        }\n    }\n\n    private changeProps(options: IModalOptions): void {\n        if (this.modalRef) {\n            // here not limit user's inputs at runtime\n            Object.assign(this.modalRef.instance, options);\n        }\n    }\n\n    // Create component to ApplicationRef\n    private createModal(): void {\n        this.overlayRef = this.overlay.create();\n        this.modalRef = this.overlayRef.attach(new ComponentPortal(McModalComponent));\n    }\n}\n\n@Injectable()\nexport class McModalService {\n    // Track of the current close modals (we assume invisible is close this time)\n    get openModals(): McModalRef[] {\n        return this.modalControl.openModals;\n    }\n\n    get afterAllClose(): Observable<void> {\n        return this.modalControl.afterAllClose.asObservable();\n    }\n\n    constructor(\n        private overlay: Overlay,\n        private modalControl: McModalControlService) {\n    }\n\n    // Closes all of the currently-open dialogs\n    closeAll(): void {\n        this.modalControl.closeAll();\n    }\n\n    create<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n\n        if (typeof options.mcOnCancel !== 'function') {\n            // Leave a empty function to close this modal by default\n            // tslint:disable-next-line\n            options.mcOnCancel = () => {};\n        }\n\n        if (!('mcCloseByESC' in options)) {\n            options.mcCloseByESC = true;\n        }\n\n\n        if (!('mcWidth' in options)) {\n            // tslint:disable-next-line\n            options.mcWidth = 480;\n        }\n\n        return new ModalBuilderForService(this.overlay, options).getInstance()!;\n    }\n\n    confirm<T>(options: IModalOptionsForService<T> = {}, confirmType: ConfirmType = 'confirm'): McModalRef<T> {\n        if ('mcFooter' in options) {\n            console.warn(`The Confirm-Modal doesn't support \"mcFooter\", this property will be ignored.`);\n        }\n\n        // NOTE: only support function currently by calling confirm()\n        if (typeof options.mcOnOk !== 'function') {\n            // Leave a empty function to close this modal by default\n            // tslint:disable-next-line\n            options.mcOnOk = () => {};\n        }\n\n        options.mcModalType = 'confirm';\n        options.mcClassName = `mc-confirm mc-confirm-${confirmType} ${options.mcClassName || ''}`;\n        options.mcMaskClosable = false;\n\n        return this.create(options);\n    }\n\n    success<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n        return this.simpleConfirm(options, 'success');\n    }\n\n    delete<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n        return this.simpleConfirm(options, 'warn');\n    }\n\n    private simpleConfirm<T>(options: IModalOptionsForService<T> = {}, confirmType: ConfirmType): McModalRef<T> {\n        // Remove the Cancel button if the user not specify a Cancel button\n        if (!('mcCancelText' in options)) {\n            // @ts-ignore\n            options.mcCancelText = null;\n        }\n\n        return this.confirm(options, confirmType);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { McButtonModule } from '@ptsecurity/mosaic/button';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { CssUnitPipe } from './css-unit.pipe';\nimport { McModalControlService } from './modal-control.service';\nimport { McModalComponent } from './modal.component';\nimport { McModalService } from './modal.service';\n\n\n@NgModule({\n    imports: [ CommonModule, OverlayModule, McButtonModule, McIconModule ],\n    exports: [ McModalComponent ],\n    declarations: [ McModalComponent, CssUnitPipe ],\n    entryComponents: [ McModalComponent ],\n    providers: [ McModalControlService, McModalService ]\n})\nexport class McModalModule { }\n","import { fromEvent, Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nimport {\n    AfterViewInit,\n    Component, Directive,\n    ElementRef,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    ViewEncapsulation,\n    ContentChild,\n    TemplateRef,\n    ChangeDetectorRef,\n    ChangeDetectionStrategy,\n    ViewChild\n} from '@angular/core';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { SPACE } from '@ptsecurity/cdk/keycodes';\nimport { Platform } from '@ptsecurity/cdk/platform';\nimport { CanDisable, CanDisableCtor, mixinDisabled } from '@ptsecurity/mosaic/core';\n\n\nconst COLLAPSED_CLASS: string = 'mc-navbar-collapsed-title';\nconst MC_ICON = 'mc-icon';\nconst MC_NAVBAR = 'mc-navbar';\nconst MC_NAVBAR_CONTAINER = 'mc-navbar-container';\nconst MC_NAVBAR_ITEM = 'mc-navbar-item';\nconst MC_NAVBAR_BRAND = 'mc-navbar-brand';\nconst MC_NAVBAR_TITLE = 'mc-navbar-title';\nconst MC_NAVBAR_LOGO = 'mc-navbar-logo';\n\nexport type McNavbarContainerPositionType = 'left' | 'right';\n\nexport interface IMcNavbarDropdownItem {\n    link?: string;\n    text: string;\n}\n\n@Directive({\n    selector: MC_NAVBAR_LOGO,\n    host: {\n        class: MC_NAVBAR_LOGO\n    }\n})\nexport class McNavbarLogo {}\n\n@Directive({\n    selector: MC_NAVBAR_BRAND,\n    host: {\n        class: MC_NAVBAR_BRAND\n    }\n})\nexport class McNavbarBrand {}\n\n@Directive({\n    selector: MC_NAVBAR_TITLE,\n    host: {\n        class: MC_NAVBAR_TITLE\n    }\n})\nexport class McNavbarTitle {}\n\nexport class McNavbarItemBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McNavbarMixinBase: CanDisableCtor & typeof McNavbarItemBase = mixinDisabled(McNavbarItemBase);\n\n@Component({\n    selector: MC_NAVBAR_ITEM,\n    template: `\n        <a\n            [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\n            (click)=\"handleClickByItem()\"\n            (keydown)=\"handleKeydown($event)\"\n            class=\"mc-navbar-item\"\n        >\n            <ng-content></ng-content>\n            <i *ngIf=\"hasDropdownContent\" mc-icon=\"mc-angle-down-M_16\"></i>\n        </a>\n        <ul\n            #dropdownContent\n            *ngIf=\"hasDropdownContent\"\n            [ngClass]=\"{ 'is-collapsed': isCollapsed }\"\n            class=\"mc-navbar-dropdown\"\n        >\n            <li\n                *ngFor=\"let item of dropdownItems\"\n                (click)=\"handleClickByDropdownItem()\"\n                class=\"mc-navbar-dropdown-item\"\n            >\n                <ng-container *ngIf=\"dropdownItemTmpl\">\n                    <ng-container *ngTemplateOutlet=\"dropdownItemTmpl; context: { $implicit: item }\"></ng-container>\n                </ng-container>\n                <a\n                    *ngIf=\"!dropdownItemTmpl\"\n                    [attr.href]=\"item.link\"\n                    [ngClass]=\"{ 'is-active': isActiveDropdownLink(item.link) }\"\n                    class=\"mc-navbar-dropdown-link\"\n                >{{ item.text }}</a>\n            </li>\n        </ul>\n    `,\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': '-1'\n    }\n})\nexport class McNavbarItem extends _McNavbarMixinBase implements OnInit, AfterViewInit, OnDestroy, CanDisable {\n\n    @Input()\n    tabIndex: number = 0;\n\n    @Input()\n    dropdownItems: IMcNavbarDropdownItem[] = [];\n\n    @Input()\n    set collapsedTitle(value: string) {\n        this.elementRef.nativeElement.setAttribute('computedTitle', encodeURI(value));\n    }\n\n    @ContentChild('dropdownItemTmpl', { read: TemplateRef })\n    dropdownItemTmpl: TemplateRef<IMcNavbarDropdownItem>;\n\n    @ViewChild('dropdownContent', { read: ElementRef })\n    dropdownContent: ElementRef;\n\n    get hasDropdownContent() {\n        return this.dropdownItems.length > 0;\n    }\n\n    isCollapsed: boolean = true;\n\n    private _subscription: Subscription = new Subscription();\n    private _focusMonitor$: Observable<FocusOrigin>;\n\n    private get _dropdownElements(): HTMLElement[] {\n        return this.dropdownContent ? this.dropdownContent.nativeElement.querySelectorAll('li > *') : [];\n    }\n\n    constructor(\n        public  elementRef: ElementRef,\n        private _focusMonitor: FocusMonitor,\n        private _platform: Platform,\n        private _cdRef: ChangeDetectorRef\n    ) {\n        super(elementRef);\n    }\n\n    ngOnInit() {\n        this.denyClickIfDisabled();\n\n        this._focusMonitor$ = this._focusMonitor.monitor(this.elementRef.nativeElement, true);\n\n        if (this.hasDropdownContent) {\n            this.listenClickOutside();\n        }\n    }\n\n    ngAfterViewInit() {\n        if (!this.hasDropdownContent) {\n            return;\n        }\n\n        this.startListenFocusDropdownItems();\n    }\n\n    ngOnDestroy() {\n        this._subscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n        this.stopListenFocusDropdownItems();\n    }\n\n    isActiveDropdownLink(link: string): boolean {\n        if (!this._platform.isBrowser) {\n            return false;\n        }\n\n        return window.location.href.indexOf(link) >= 0;\n    }\n\n    handleClickByItem() {\n        this.toggleDropdown();\n    }\n\n    handleKeydown($event: KeyboardEvent) {\n        const isNavbarItem = ($event.target as HTMLElement).classList.contains(MC_NAVBAR_ITEM);\n\n        // tslint:disable-next-line\n        if (this.hasDropdownContent && $event.keyCode === SPACE && isNavbarItem) {\n            this.toggleDropdown();\n        }\n    }\n\n    handleClickByDropdownItem() {\n        this.forceCloseDropdown();\n    }\n\n    private listenClickOutside() {\n        this._subscription.add(\n            this._focusMonitor$.subscribe((origin) => {\n                if (origin === null) {\n                    this.forceCloseDropdown();\n                }\n            })\n        );\n    }\n\n    private toggleDropdown() {\n        this.isCollapsed = !this.isCollapsed;\n    }\n\n    private forceCloseDropdown() {\n        this.isCollapsed = true;\n        this._cdRef.detectChanges();\n    }\n\n    private startListenFocusDropdownItems() {\n        this._dropdownElements.forEach((el) => {\n            this._focusMonitor.monitor(el, true);\n        });\n    }\n\n    private stopListenFocusDropdownItems() {\n        this._dropdownElements.forEach((el) => {\n            this._focusMonitor.stopMonitoring(el);\n        });\n    }\n\n    // This method is required due to angular 2 issue https://github.com/angular/angular/issues/11200\n    private denyClickIfDisabled() {\n        const events: Event[] = this.elementRef.nativeElement.eventListeners('click');\n\n        events.forEach((event) => this.elementRef.nativeElement.removeEventListener('click', event));\n\n        this.elementRef.nativeElement.addEventListener('click', (event: MouseEvent) => {\n            if (this.elementRef.nativeElement.hasAttribute('disabled')) {\n                event.stopImmediatePropagation();\n            }\n        }, true);\n\n        events.forEach((event) => this.elementRef.nativeElement.addEventListener('click', event));\n    }\n}\n\n@Directive({\n    selector: MC_NAVBAR_CONTAINER\n})\nexport class McNavbarContainer {\n    @Input()\n    position: McNavbarContainerPositionType = 'left';\n\n    @HostBinding('class')\n    get cssClasses(): string {\n        return this.position === 'left' ? 'mc-navbar-left' : 'mc-navbar-right';\n    }\n}\n\nclass CollapsibleItem {\n    private _collapsed: boolean = false;\n\n    constructor(\n        public element: HTMLElement,\n        public width: number\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        this._collapsed = collapsed;\n\n        this.updateCollapsedClass();\n    }\n\n    private updateCollapsedClass() {\n        if (this._collapsed) {\n            this.element.classList.add(COLLAPSED_CLASS);\n        } else {\n            this.element.classList.remove(COLLAPSED_CLASS);\n        }\n\n    }\n}\n\nclass CachedItemWidth {\n\n    get canCollapse(): boolean {\n        return this.itemsForCollapse.length > 0;\n    }\n\n    private _collapsedItemsWidth: number;\n\n    get collapsedItemsWidth(): number {\n        if (this._collapsedItemsWidth !== undefined) {\n            return this._collapsedItemsWidth;\n        }\n\n        this.calculateAndCacheCollapsedItemsWidth();\n\n        return this._collapsedItemsWidth;\n    }\n\n    constructor(\n        public element: HTMLElement,\n        public width: number,\n        public itemsForCollapse: CollapsibleItem[] = []\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        if (this.itemsForCollapse.length > 0) {\n            this.updateTitle(collapsed);\n        }\n\n        this.itemsForCollapse.forEach((item) => item.processCollapsed(collapsed));\n    }\n\n    private calculateAndCacheCollapsedItemsWidth() {\n        this._collapsedItemsWidth = this.itemsForCollapse\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getTitle(): string {\n        const computedTitle = this.element.getAttribute('computedTitle');\n\n        return computedTitle\n            ? decodeURI(computedTitle)\n            : (this.itemsForCollapse.length > 0 ? this.itemsForCollapse[0].element.innerText : '');\n    }\n\n    private updateTitle(collapsed: boolean) {\n        if (collapsed) {\n            this.element.setAttribute('title', this.getTitle());\n        } else {\n            this.element.removeAttribute('title');\n        }\n    }\n}\n\n\n@Component({\n    selector: MC_NAVBAR,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    template: `\n        <nav class=\"mc-navbar\">\n            <ng-content select=\"[${MC_NAVBAR_CONTAINER}],${MC_NAVBAR_CONTAINER}\"></ng-content>\n        </nav>\n    `,\n    styleUrls: ['./navbar.css'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class McNavbar implements AfterViewInit, OnDestroy {\n\n    private readonly forceRecalculateItemsWidth: boolean = false;\n    private readonly resizeDebounceInterval: number = 100;\n    private readonly firstLevelElement: string = MC_NAVBAR_CONTAINER;\n    private readonly secondLevelElements: string[] = [\n        MC_NAVBAR_ITEM,\n        MC_NAVBAR_BRAND,\n        MC_NAVBAR_TITLE\n    ];\n\n    private _totalItemsWidths: number;\n    private _itemsWidths: CachedItemWidth[];\n\n    private get maxAllowedWidth(): number {\n        return this._elementRef.nativeElement.querySelector('nav').getBoundingClientRect().width;\n    }\n\n    private get itemsWidths(): CachedItemWidth[] {\n        if (this._itemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._itemsWidths;\n        }\n\n        this.calculateAndCacheItemsWidth();\n\n        return this._itemsWidths;\n    }\n\n    private get totalItemsWidth(): number {\n        if (this._totalItemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._totalItemsWidths;\n        }\n\n        this.calculateAndCacheTotalItemsWidth();\n\n        return this._totalItemsWidths;\n    }\n\n    private _resizeSubscription: Subscription;\n\n    constructor(\n        private _elementRef: ElementRef\n    ) {\n        const resizeObserver = fromEvent(window, 'resize')\n            .pipe(debounceTime(this.resizeDebounceInterval));\n\n        this._resizeSubscription = resizeObserver.subscribe(this.updateCollapsed.bind(this));\n    }\n\n    updateCollapsed(): void {\n        let collapseDelta = this.totalItemsWidth - this.maxAllowedWidth;\n\n        for (let i = this.itemsWidths.length - 1; i >= 0; i--) {\n            const item = this.itemsWidths[i];\n\n            if (!item.canCollapse) {\n                continue;\n            }\n\n            item.processCollapsed(collapseDelta > 0);\n            collapseDelta -= item.collapsedItemsWidth;\n        }\n    }\n\n    ngAfterViewInit(): void {\n        // Note: this wait is required for loading and rendering fonts for icons;\n        // unfortunately we cannot control font rendering\n        setTimeout(() => this.updateCollapsed(), 0);\n    }\n\n    ngOnDestroy() {\n        this._resizeSubscription.unsubscribe();\n    }\n\n    private calculateAndCacheTotalItemsWidth() {\n        this._totalItemsWidths = this.itemsWidths\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getOuterElementWidth(element: HTMLElement): number {\n        const baseWidth  = element.getBoundingClientRect().width;\n        const marginRight = parseInt(getComputedStyle(element).getPropertyValue('margin-right'));\n        const marginLeft = parseInt(getComputedStyle(element).getPropertyValue('margin-left'));\n\n        return baseWidth + marginRight + marginLeft;\n    }\n\n    private calculateAndCacheItemsWidth() {\n        const allItemsSelector = this.secondLevelElements\n            .map((e: string) => `${this.firstLevelElement}>${e}`);\n        const allItems: HTMLElement[] = Array.from(this._elementRef.nativeElement.querySelectorAll(allItemsSelector));\n\n        this._itemsWidths = allItems\n            .map((el) => new CachedItemWidth(el, this.getOuterElementWidth(el), this.getItemsForCollapse(el)));\n    }\n\n    private getItemsForCollapse(element: HTMLElement): CollapsibleItem[] {\n        const icon = element.querySelector(`[${MC_ICON}],${MC_NAVBAR_LOGO},[${MC_NAVBAR_LOGO}]`);\n\n        if (!icon) {\n            return [];\n        }\n\n        return Array.from(element.querySelectorAll(MC_NAVBAR_TITLE))\n            .map((el) => new CollapsibleItem(<HTMLElement> el, el.getBoundingClientRect().width));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport {\n    McNavbar,\n    McNavbarContainer,\n    McNavbarItem,\n    McNavbarTitle,\n    McNavbarBrand,\n    McNavbarLogo\n} from './navbar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        McIconModule\n    ],\n    exports: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ],\n    declarations: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ]\n})\nexport class McNavbarModule {}\n","import {\n    animate,\n    AnimationTriggerMetadata,\n    state,\n    style,\n    transition,\n    trigger\n} from '@angular/animations';\n\n\nexport const mcPopoverAnimations: {\n    readonly popoverState: AnimationTriggerMetadata;\n} = {\n    /** Animation that transitions a tooltip in and out. */\n    popoverState: trigger('state', [\n        state('initial', style({\n            opacity: 0,\n            transform: 'scale(1, 0.8)'\n        })),\n        transition('* => visible', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1, 1)'\n        }))),\n        transition('* => hidden', animate('100ms linear', style({ opacity: 0 })))\n    ])\n};\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    Output,\n    QueryList,\n    ViewEncapsulation,\n    ChangeDetectorRef,\n    Inject,\n    OnDestroy,\n    OnInit,\n    ViewChild\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusKeyManager, IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    hasModifierKey,\n    HOME, LEFT_ARROW,\n    PAGE_DOWN,\n    PAGE_UP, RIGHT_ARROW,\n    SPACE,\n    TAB,\n    UP_ARROW\n} from '@ptsecurity/cdk/keycodes';\nimport {\n    McLine,\n    CanDisable,\n    mixinDisabled,\n    toBoolean, CanDisableCtor\n} from '@ptsecurity/mosaic/core';\nimport { Subscription } from 'rxjs';\n\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n    exportAs: 'mcListOption',\n    selector: 'mc-list-option',\n    host: {\n        tabindex: '-1',\n\n        class: 'mc-list-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': 'hasFocus',\n        '(focus)': 'handleFocus()',\n        '(blur)': 'handleBlur()',\n        '(click)': 'handleClick($event)'\n    },\n    templateUrl: 'list-option.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListOption implements OnDestroy, OnInit, IFocusableOption {\n    hasFocus: boolean = false;\n\n    @ContentChildren(McLine) lines: QueryList<McLine>;\n\n    @ViewChild('text') text: ElementRef;\n\n    // Whether the label should appear before or after the checkbox. Defaults to 'after'\n    @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n    @Input() value: any;\n\n    @Input()\n    get disabled() {\n        return this._disabled || (this.listSelection && this.listSelection.disabled);\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    private _disabled = false;\n\n    @Input()\n    get selected(): boolean {\n        return this.listSelection.selectedOptions && this.listSelection.selectedOptions.isSelected(this) || false;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            this.listSelection.reportValueChange();\n        }\n    }\n\n    private _selected = false;\n\n    constructor(\n        private _element: ElementRef,\n        private _changeDetector: ChangeDetectorRef,\n        @Inject(forwardRef(() => McListSelection))\n        public listSelection: McListSelection\n    ) {}\n\n    ngOnInit() {\n        if (this._selected) {\n            // List options that are selected at initialization can't be reported properly to the form\n            // control. This is because it takes some time until the selection-list knows about all\n            // available options. Also it can happen that the ControlValueAccessor has an initial value\n            // that should be used instead. Deferring the value change report to the next tick ensures\n            // that the form control value is not being overwritten.\n            const wasSelected = this._selected;\n\n            Promise.resolve().then(() => {\n                if (this._selected || wasSelected) {\n                    this.selected = true;\n                    this._changeDetector.markForCheck();\n                }\n            });\n        }\n    }\n\n    ngOnDestroy(): void {\n        if (this.selected) {\n            // We have to delay this until the next tick in order\n            // to avoid changed after checked errors.\n            Promise.resolve().then(() => this.selected = false);\n        }\n\n        this.listSelection.removeOptionFromList(this);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    focus(): void {\n        this._element.nativeElement.focus();\n    }\n\n    getLabel() {\n        return this.text ? this.text.nativeElement.textContent : '';\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.listSelection.selectedOptions) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.listSelection.selectedOptions.select(this);\n        } else {\n            this.listSelection.selectedOptions.deselect(this);\n        }\n\n        this._changeDetector.markForCheck();\n    }\n\n    getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    handleClick($event) {\n        if (this.disabled) { return; }\n\n        this.listSelection.setFocusedOption(this, $event);\n    }\n\n    handleFocus() {\n        if (this.disabled || this.hasFocus) { return; }\n\n        this.hasFocus = true;\n    }\n\n    handleBlur() {\n        this.hasFocus = false;\n\n        this.listSelection.onTouched();\n    }\n\n    getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n\n\nexport const MC_SELECTION_LIST_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McListSelection),\n    multi: true\n};\n\nexport class McListSelectionChange {\n    constructor(\n        public source: McListSelection,\n        public option: McListOption\n    ) {}\n}\n\n\nexport class McListSelectionBase {}\n\n// tslint:disable-next-line:naming-convention\nexport const _McListSelectionMixinBase: CanDisableCtor & typeof McListSelectionBase\n    = mixinDisabled(McListSelectionBase);\n\n@Component({\n    exportAs: 'mcListSelection',\n    selector: 'mc-list-selection',\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'tabIndex'],\n    host: {\n        class: 'mc-list-selection',\n        '[tabIndex]': 'tabIndex',\n        '(focus)': 'focus()',\n        '(blur)': 'onTouched()',\n        '(keydown)': 'onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    providers: [MC_SELECTION_LIST_VALUE_ACCESSOR],\n    preserveWhitespaces: false\n})\nexport class McListSelection extends _McListSelectionMixinBase implements\n    IFocusableOption, CanDisable, AfterContentInit, ControlValueAccessor {\n\n    keyManager: FocusKeyManager<McListOption>;\n\n    // The option components contained within this selection-list.\n    @ContentChildren(McListOption) options: QueryList<McListOption>;\n\n    tabIndex: number;\n\n    autoSelect: boolean;\n    noUnselect: boolean;\n    multiple: boolean;\n\n    @Input() horizontal: boolean = false;\n\n    // Emits a change event whenever the selected state of an option changes.\n    @Output() readonly selectionChange: EventEmitter<McListSelectionChange> = new EventEmitter<McListSelectionChange>();\n\n    selectedOptions: SelectionModel<McListOption>;\n\n    // Used for storing the values that were assigned before the options were initialized.\n    private tempValues: string[] | null;\n\n    private modelChanges = Subscription.EMPTY;\n\n    constructor(\n        private element: ElementRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string,\n        @Attribute('multiple') multiple: string\n    ) {\n        super();\n\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.multiple = multiple === null ? true : toBoolean(multiple);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.selectedOptions = new SelectionModel<McListOption>(this.multiple);\n    }\n\n    ngAfterContentInit(): void {\n        this.horizontal = toBoolean(this.horizontal);\n\n        this.keyManager = new FocusKeyManager<McListOption>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation(!this.horizontal)\n            .withHorizontalOrientation(this.horizontal ? 'ltr' : null);\n\n        if (this.tempValues) {\n            this.setOptionsFromValues(this.tempValues);\n            this.tempValues = null;\n        }\n\n        // Sync external changes to the model back to the options.\n        this.modelChanges = this.selectedOptions.onChange!.subscribe((event) => {\n            for (const item of event.added) {\n                item.selected = true;\n            }\n\n            for (const item of event.removed) {\n                item.selected = false;\n            }\n        });\n\n        this.updateScrollSize();\n    }\n\n    ngOnDestroy() {\n        this.modelChanges.unsubscribe();\n    }\n\n    focus() {\n        this.element.nativeElement.focus();\n    }\n\n    selectAll() {\n        this.options.forEach((option) => option.setSelected(true));\n\n        this.reportValueChange();\n    }\n\n    deselectAll() {\n        this.options.forEach((option) => option.setSelected(false));\n\n        this.reportValueChange();\n    }\n\n    updateScrollSize(): void {\n        if (this.horizontal || !this.options.first) { return; }\n\n        this.keyManager.withScrollSize(Math.floor(this.getHeight() / this.options.first.getHeight()));\n    }\n\n    // Sets the focused option of the selection-list.\n    setFocusedOption(option: McListOption, $event?: KeyboardEvent): void {\n        this.keyManager.updateActiveItem(option);\n\n        const withShift = $event ? hasModifierKey($event, 'shiftKey') : false;\n        const withCtrl = $event ? hasModifierKey($event, 'ctrlKey') : false;\n\n        if (withShift && this.multiple) {\n            const previousIndex = this.keyManager.previousActiveItemIndex;\n            const activeIndex = this.keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n        } else if (withCtrl) {\n\n            if (!this.canDeselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) {\n                this.options.forEach((item) => item.setSelected(false));\n                option.setSelected(true);\n            }\n        }\n\n        this.emitChangeEvent(option);\n        this.reportValueChange();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(values: string[]): void {\n        if (this.options) {\n            this.setOptionsFromValues(values || []);\n        } else {\n            this.tempValues = values;\n        }\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this.onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    // Implemented as a part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        if (this.options) {\n            this.options.forEach((option) => option.disabled = isDisabled);\n        }\n    }\n\n    getSelectedOptionValues(): string[] {\n        return this.options.filter((option) => option.selected).map((option) => option.value);\n    }\n\n    // Toggles the selected state of the currently focused option.\n    toggleFocusedOption(): void {\n        const focusedIndex = this.keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this.isValidIndex(focusedIndex)) {\n            const focusedOption: McListOption = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this.canDeselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this.emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    canDeselectLast(listOption: McListOption): boolean {\n        return !(this.noUnselect && this.selectedOptions.selected.length === 1 && listOption.selected);\n    }\n\n    getHeight(): number {\n        return this.element.nativeElement.getClientRects()[0].height;\n    }\n\n    // View to model callback that should be called if the list or its options lost focus.\n    // tslint:disable-next-line:no-empty\n    onTouched: () => void = () => {};\n\n    // Removes an option from the selection list and updates the active item.\n    removeOptionFromList(option: McListOption) {\n        if (option.hasFocus) {\n            const optionIndex = this.getOptionIndex(option);\n\n            // Check whether the option is the last item\n            if (optionIndex > 0) {\n                this.keyManager.setPreviousItemActive();\n            } else if (optionIndex === 0 && this.options.length > 1) {\n                this.keyManager.setNextItemActive();\n            }\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n\n        switch (keyCode) {\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n\n                break;\n\n            case TAB:\n                this.keyManager.tabOut.next();\n\n                return;\n\n            case DOWN_ARROW:\n                this.keyManager.setNextItemActive();\n\n                break;\n            case UP_ARROW:\n                this.keyManager.setPreviousItemActive();\n\n                break;\n            case HOME:\n                this.keyManager.setFirstItemActive();\n\n                break;\n            case END:\n                this.keyManager.setLastItemActive();\n\n                break;\n            case PAGE_UP:\n                this.keyManager.setPreviousPageItemActive();\n\n                break;\n            case PAGE_DOWN:\n                this.keyManager.setNextPageItemActive();\n\n                break;\n            default:\n                return;\n        }\n\n        event.preventDefault();\n\n        this.setFocusedOption(this.keyManager.activeItem as McListOption, event);\n    }\n\n    // Reports a value change to the ControlValueAccessor\n    reportValueChange() {\n        if (this.options) {\n            this.onChange(this.getSelectedOptionValues());\n        }\n    }\n\n    // Emits a change event if the selected state of an option changed.\n    emitChangeEvent(option: McListOption) {\n        this.selectionChange.emit(new McListSelectionChange(this, option));\n    }\n\n    // Returns the option with the specified value.\n    private getOptionByValue(value: string): McListOption | undefined {\n        return this.options.find((option) => option.value === value);\n    }\n\n    // Sets the selected options based on the specified values.\n    private setOptionsFromValues(values: string[]) {\n        this.options.forEach((option) => option.setSelected(false));\n\n        values\n            .map((value) => this.getOptionByValue(value))\n            .filter(Boolean)\n            .forEach((option) => option!.setSelected(true));\n    }\n\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    // Returns the index of the specified list option.\n    private getOptionIndex(option: McListOption): number {\n        return this.options.toArray().indexOf(option);\n    }\n\n    // View to model callback that should be called whenever the selected options change.\n    private onChange: (value: any) => void = (_: any) => {};\n}\n","// todo пока не делаем, перенесено из материала, но у нас в доках таких простых списков нет.\nimport {\n    AfterContentInit, ChangeDetectionStrategy, Component, ContentChildren, Directive, ElementRef, QueryList,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { McLine, McLineSetter } from '@ptsecurity/mosaic/core';\n\n\nexport class McListBase {}\n\n@Component({\n    selector: 'mc-list',\n    host: { class: 'mc-list' },\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McList extends McListBase {}\n\n\n/**\n * Directive whose purpose is to add the mc- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n    selector: '[mc-subheader], [mcSubheader]',\n    host: { class: 'mc-subheader' }\n})\nexport class McListSubheaderCssStyler {}\n\n\n// Boilerplate for applying mixins to McListItem.\nexport class McListItemBase {}\n\n@Component({\n    selector: 'mc-list-item, a[mc-list-item]',\n    host: {\n        class: 'mc-list-item',\n        '(focus)': 'handleFocus()',\n        '(blur)': 'handleBlur()'\n    },\n    templateUrl: './list-item.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListItem extends McListItemBase implements AfterContentInit {\n    @ContentChildren(McLine) lines: QueryList<McLine>;\n\n    private lineSetter: McLineSetter;\n\n    constructor(private _element: ElementRef) {\n        super();\n    }\n\n    ngAfterContentInit() {\n        this.lineSetter = new McLineSetter(this.lines, this._element);\n    }\n\n    handleFocus() {\n        this._element.nativeElement.classList.add('mc-focused');\n    }\n\n    handleBlur() {\n        this._element.nativeElement.classList.remove('mc-focused');\n    }\n\n    getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLineModule } from '@ptsecurity/mosaic/core';\n\nimport { McListSelection, McListOption } from './list-selection.component';\nimport { McList, McListItem, McListSubheaderCssStyler } from './list.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        McLineModule\n    ],\n    exports: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ],\n    declarations: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ]\n})\nexport class McListModule {}\n","import {\n    Input,\n    Attribute,\n    Component,\n    ElementRef,\n    OnDestroy,\n    ViewEncapsulation,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef\n} from '@angular/core';\n\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport {\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\nexport class McLinkBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\nexport const _McLinkBase: HasTabIndexCtor & CanDisableCtor & typeof McLinkBase\n    = mixinTabIndex(mixinDisabled(McLinkBase));\n\n@Component({\n    selector: 'a.mc-link',\n    template: `<ng-content></ng-content>`,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcLink',\n    styleUrls: ['./link.css'],\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': 'tabIndex'\n    }\n})\n\nexport class McLink extends _McLinkBase implements OnDestroy, HasTabIndex, CanDisable {\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    private _disabled = false;\n\n    constructor(\n        @Attribute('tabindex') tabIndex: string,\n        public elementRef: ElementRef,\n        private _focusMonitor: FocusMonitor,\n        private _changeDetector: ChangeDetectorRef) {\n\n        super(elementRef);\n        this._focusMonitor.monitor(elementRef.nativeElement, true);\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this._getHostElement().focus();\n    }\n\n    _getHostElement() {\n        return this.elementRef.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLink } from './link.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule\n    ],\n    declarations: [McLink],\n    exports: [McLink]\n})\nexport class McLinkModule {}\n","import { Injectable, Optional, SkipSelf } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\n\nimport { McModalRef } from './modal-ref.class';\n\n\ninterface IRegisteredMeta {\n    modalRef: McModalRef;\n    afterOpenSubscription: Subscription;\n    afterCloseSubscription: Subscription;\n}\n\n@Injectable()\nexport class McModalControlService {\n\n    // Track singleton afterAllClose through over the injection tree\n    get afterAllClose(): Subject<void> {\n        return this.parentService ? this.parentService.afterAllClose : this.rootAfterAllClose!;\n    }\n\n    // Track singleton openModals array through over the injection tree\n    get openModals(): McModalRef[] {\n        return this.parentService ? this.parentService.openModals : this.rootOpenModals!;\n    }\n\n    // @ts-ignore\n    private rootOpenModals: McModalRef[] = this.parentService ? null : [];\n    // @ts-ignore\n    private rootAfterAllClose: Subject<void> = this.parentService ? null : new Subject<void>();\n    // @ts-ignore\n    private rootRegisteredMetaMap: Map<McModalRef, IRegisteredMeta> = this.parentService ? null : new Map();\n\n    // Registered modal for later usage\n    private get registeredMetaMap(): Map<McModalRef, IRegisteredMeta> {\n        return this.parentService ? this.parentService.registeredMetaMap : this.rootRegisteredMetaMap;\n    }\n\n    constructor(\n        @Optional() @SkipSelf() private parentService: McModalControlService) {\n    }\n\n    // Register a modal to listen its open/close\n    registerModal(modalRef: McModalRef): void {\n        if (!this.hasRegistered(modalRef)) {\n            const afterOpenSubscription = modalRef.afterOpen.subscribe(() => this.openModals.push(modalRef));\n            const afterCloseSubscription = modalRef.afterClose.subscribe(() => this.removeOpenModal(modalRef));\n\n            this.registeredMetaMap.set(modalRef, {modalRef, afterOpenSubscription, afterCloseSubscription});\n        }\n    }\n\n    hasRegistered(modalRef: McModalRef): boolean {\n        return this.registeredMetaMap.has(modalRef);\n    }\n\n    // Close all registered opened modals\n    closeAll(): void {\n        let i = this.openModals.length;\n\n        while (i--) {\n            this.openModals[i].close();\n        }\n    }\n\n    private removeOpenModal(modalRef: McModalRef): void {\n        const index = this.openModals.indexOf(modalRef);\n\n        if (index > -1) {\n            this.openModals.splice(index, 1);\n\n            if (!this.openModals.length) {\n                this.afterAllClose.next();\n            }\n        }\n    }\n}\n","import { Observable } from 'rxjs';\n\nimport { McModalComponent } from './modal.component';\n\n\n/**\n * API class that public to users to handle the modal instance.\n * McModalRef is aim to avoid accessing to the modal instance directly by users.\n */\nexport abstract class McModalRef<T = any, R = any> {\n    abstract afterOpen: Observable<void>;\n    abstract afterClose: Observable<R>;\n\n    abstract open(): void;\n\n    abstract close(result?: R): void;\n\n    abstract destroy(result?: R): void;\n\n    /**\n     * Trigger the mcOnOk/mcOnCancel by manual\n     */\n    abstract triggerOk(): void;\n\n    abstract triggerCancel(): void;\n\n    // /**\n    //  * Return the ComponentRef of mcContent when specify mcContent as a Component\n    //  * Note: this method may return undefined if the Component has not ready yet.\n    //    (it only available after Modal's ngOnInit)\n    //  */\n    // abstract getContentComponentRef(): ComponentRef<{}>;\n\n    /**\n     * Return the component instance of mcContent when specify mcContent as a Component\n     * Note: this method may return undefined if the Component has not ready yet.\n     * (it only available after Modal's ngOnInit)\n     */\n    abstract getContentComponent(): T;\n\n    /**\n     * Get the dom element of this Modal\n     */\n    abstract getElement(): HTMLElement;\n\n    /**\n     * Get the instance of the Modal itself\n     */\n    abstract getInstance(): McModalComponent;\n}\n","export interface IClickPosition {\n    x: number;\n    y: number;\n}\n\nexport class ModalUtil {\n    private lastPosition: IClickPosition;\n\n    constructor(private document: Document) {\n        this.lastPosition = {x: -1, y: -1};\n        this.listenDocumentClick();\n    }\n\n    getLastClickPosition(): IClickPosition {\n        return this.lastPosition;\n    }\n\n    listenDocumentClick(): void {\n        this.document.addEventListener('click', (event: MouseEvent) => {\n            this.lastPosition = {x: event.clientX, y: event.clientY};\n        });\n    }\n}\n\nexport default new ModalUtil(document);\n","// tslint:disable:no-empty\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output\n} from '@angular/core';\nimport {\n    AbstractControl,\n    ControlValueAccessor,\n    NG_VALIDATORS,\n    NG_VALUE_ACCESSOR,\n    ValidationErrors,\n    Validator,\n    ValidatorFn,\n    Validators\n} from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport { DOWN_ARROW } from '@ptsecurity/cdk/keycodes';\nimport { ThemePalette } from '@ptsecurity/mosaic/core';\nimport { McFormField } from '@ptsecurity/mosaic/form-field';\nimport { MC_INPUT_VALUE_ACCESSOR } from '@ptsecurity/mosaic/input';\nimport { Subscription } from 'rxjs';\n\nimport { McDatepicker } from './datepicker';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\n/** @docs-private */\nexport const MC_DATEPICKER_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McDatepickerInput),\n    multi: true\n};\n\n/** @docs-private */\nexport const MC_DATEPICKER_VALIDATORS: any = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McDatepickerInput),\n    multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use McDatepickerInputEvent instead.\n */\nexport class McDatepickerInputEvent<D> {\n    /** The new value for the target datepicker input. */\n    value: D | null;\n\n    constructor(\n        /** Reference to the datepicker input component that emitted the event. */\n        public target: McDatepickerInput<D>,\n        /** Reference to the native input element associated with the datepicker input. */\n        public targetElement: HTMLElement) {\n        this.value = this.target.value;\n    }\n}\n\n\n/** Directive used to connect an input to a McDatepicker. */\n@Directive({\n    selector: 'input[mcDatepicker]',\n    providers: [\n        MC_DATEPICKER_VALUE_ACCESSOR,\n        MC_DATEPICKER_VALIDATORS,\n        { provide: MC_INPUT_VALUE_ACCESSOR, useExisting: McDatepickerInput }\n    ],\n    host: {\n        '[attr.aria-haspopup]': 'true',\n        '[attr.aria-owns]': '(datepicker?.opened && datepicker.id) || null',\n        '[attr.min]': 'min ? dateAdapter.toIso8601(min) : null',\n        '[attr.max]': 'max ? dateAdapter.toIso8601(max) : null',\n        '[disabled]': 'disabled',\n        '(input)': 'onInput($event.target.value)',\n        '(change)': 'onChange()',\n        '(blur)': 'onBlur()',\n        '(keydown)': 'onKeydown($event)'\n    },\n    exportAs: 'mcDatepickerInput'\n})\nexport class McDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n    /** The datepicker that this input is associated with. */\n    @Input()\n    set mcDatepicker(value: McDatepicker<D>) {\n        if (!value) {\n            return;\n        }\n\n        this.datepicker = value;\n        this.datepicker.registerInput(this);\n        this.datepickerSubscription.unsubscribe();\n\n        this.datepickerSubscription = this.datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this.cvaOnChange(selected);\n            this.onTouched();\n            this.dateInput.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));\n            this.dateChange.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));\n        });\n    }\n\n    /** Function that can be used to filter out dates within the datepicker. */\n    @Input()\n    set mcDatepickerFilter(value: (date: D | null) => boolean) {\n        this.dateFilter = value;\n        this.validatorOnChange();\n    }\n\n    /** The value of the input. */\n    @Input()\n    get value(): D | null {\n        return this._value;\n    }\n\n    set value(value: D | null) {\n        // tslint:disable-next-line:no-parameter-reassignment\n        value = this.dateAdapter.deserialize(value);\n        this.lastValueValid = !value || this.dateAdapter.isValid(value);\n        // tslint:disable-next-line:no-parameter-reassignment\n        value = this.getValidDateOrNull(value);\n        const oldDate = this.value;\n        this._value = value;\n        this.formatValue(value);\n\n        if (!this.dateAdapter.sameDate(oldDate, value)) {\n            this.valueChange.emit(value);\n        }\n    }\n\n    /** The minimum valid date. */\n    @Input()\n    get min(): D | null {\n        return this._min;\n    }\n\n    set min(value: D | null) {\n        this._min = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.validatorOnChange();\n    }\n\n    /** The maximum valid date. */\n    @Input()\n    get max(): D | null {\n        return this._max;\n    }\n\n    set max(value: D | null) {\n        this._max = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.validatorOnChange();\n    }\n\n    /** Whether the datepicker-input is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return !!this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        const newValue = coerceBooleanProperty(value);\n        const element = this.elementRef.nativeElement;\n\n        if (this._disabled !== newValue) {\n            this._disabled = newValue;\n            this.disabledChange.emit(newValue);\n        }\n\n        // We need to null check the `blur` method, because it's undefined during SSR.\n        if (newValue && element.blur) {\n            // Normally, native input elements automatically blur if they turn disabled. This behavior\n            // is problematic, because it would mean that it triggers another change detection cycle,\n            // which then causes a changed after checked error if the input element was focused before.\n            element.blur();\n        }\n    }\n\n    datepicker: McDatepicker<D>;\n    dateFilter: (date: D | null) => boolean;\n\n    /** Emits when a `change` event is fired on this `<input>`. */\n    @Output() readonly dateChange: EventEmitter<McDatepickerInputEvent<D>> =\n        new EventEmitter<McDatepickerInputEvent<D>>();\n\n    /** Emits when an `input` event is fired on this `<input>`. */\n    @Output() readonly dateInput: EventEmitter<McDatepickerInputEvent<D>> =\n        new EventEmitter<McDatepickerInputEvent<D>>();\n\n    /** Emits when the value changes (either due to user input or programmatic change). */\n    valueChange = new EventEmitter<D | null>();\n\n    /** Emits when the disabled state has changed */\n    disabledChange = new EventEmitter<boolean>();\n    private _value: D | null;\n    private _min: D | null;\n    private _max: D | null;\n    private _disabled: boolean;\n\n    private datepickerSubscription = Subscription.EMPTY;\n\n    private localeSubscription = Subscription.EMPTY;\n\n    /** Whether the last value set on the input was valid. */\n    private lastValueValid = false;\n\n    constructor(\n        public elementRef: ElementRef<HTMLInputElement>,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n        @Optional() private formField: McFormField\n    ) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        // Update the displayed date when the locale changes.\n        this.localeSubscription = dateAdapter.localeChanges.subscribe(() => {\n            this.value = this.value;\n        });\n    }\n\n    onTouched = () => {\n    }\n\n    ngOnDestroy() {\n        this.datepickerSubscription.unsubscribe();\n        this.localeSubscription.unsubscribe();\n        this.valueChange.complete();\n        this.disabledChange.complete();\n    }\n\n    /** @docs-private */\n    registerOnValidatorChange(fn: () => void): void {\n        this.validatorOnChange = fn;\n    }\n\n    /** @docs-private */\n    validate(c: AbstractControl): ValidationErrors | null {\n        return this.validator ? this.validator(c) : null;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: D): void {\n        this.value = value;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this.cvaOnChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    onKeydown(event: KeyboardEvent) {\n        // tslint:disable-next-line:deprecation\n        const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n        if (this.datepicker && isAltDownArrow && !this.elementRef.nativeElement.readOnly) {\n            this.datepicker.open();\n            event.preventDefault();\n        }\n    }\n\n    onInput(value: string) {\n        let date = this.dateAdapter.parse(value, this.dateFormats.parse.dateInput);\n        this.lastValueValid = !date || this.dateAdapter.isValid(date);\n        date = this.getValidDateOrNull(date);\n\n        if (!this.dateAdapter.sameDate(date, this._value)) {\n            this._value = date;\n            this.cvaOnChange(date);\n            this.valueChange.emit(date);\n            this.dateInput.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));\n        }\n    }\n\n    onChange() {\n        this.dateChange.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));\n    }\n\n    /** Returns the palette used by the input's form field, if any. */\n    getThemePalette(): ThemePalette | undefined {\n        return this.formField ? this.formField.color : undefined;\n    }\n\n    /** Handles blur events on the input. */\n    onBlur() {\n        // Reformat the input only if we have a valid value.\n        if (this.value) {\n            this.formatValue(this.value);\n        }\n\n        this.onTouched();\n    }\n\n    private cvaOnChange: (value: any) => void = () => {\n    }\n\n    private validatorOnChange = () => {\n    }\n\n    /** The form control validator for whether the input parses. */\n    private parseValidator: ValidatorFn = (): ValidationErrors | null => {\n        return this.lastValueValid ?\n            null : { mcDatepickerParse: { text: this.elementRef.nativeElement.value } };\n    }\n\n    /** The form control validator for the min date. */\n    private minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n        const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));\n\n        return (!this.min || !controlValue ||\n            this.dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n            null : { mcDatepickerMin: { min: this.min, actual: controlValue } };\n    }\n\n    /** The form control validator for the max date. */\n    private maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n        const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));\n\n        return (!this.max || !controlValue ||\n            this.dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n            null : { mcDatepickerMax: { max: this.max, actual: controlValue } };\n    }\n\n    /** The form control validator for the date filter. */\n    private filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n        const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));\n\n        return !this.dateFilter || !controlValue || this.dateFilter(controlValue) ?\n            null : { mcDatepickerFilter: true };\n    }\n\n    /** Formats a value and sets it on the input element. */\n    private formatValue(value: D | null) {\n        this.elementRef.nativeElement.value =\n            value ? this.dateAdapter.format(value, this.dateFormats.display.dateInput) : '';\n    }\n\n    /** The combined form control validator for this input. */\n        // tslint:disable:member-ordering\n    private validator: ValidatorFn | null =\n        Validators.compose([\n            this.parseValidator,\n            this.minValidator,\n            this.maxValidator,\n            this.filterValidator\n        ]);\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    Directive,\n    Input,\n    OnChanges,\n    OnDestroy,\n    SimpleChanges,\n    ViewEncapsulation,\n    ViewChild\n} from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { McButton } from '@ptsecurity/mosaic/button';\nimport { merge, of as observableOf, Subscription } from 'rxjs';\n\nimport { McDatepicker } from './datepicker';\nimport { McDatepickerIntl } from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `mcDatepickerToggle`. */\n@Directive({\n    selector: '[mcDatepickerToggleIcon]'\n})\nexport class McDatepickerToggleIcon {\n}\n\n\n@Component({\n    selector: 'mc-datepicker-toggle',\n    templateUrl: 'datepicker-toggle.html',\n    styleUrls: ['datepicker-toggle.css'],\n    host: {\n        class: 'mc-datepicker-toggle',\n        // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n        // consumer may have provided, while still being able to receive focus.\n        '[attr.tabindex]': '-1',\n        '[class.mc-datepicker-toggle_active]': 'datepicker && datepicker.opened',\n        '[class.mc-warn]': 'datepicker && datepicker.color === \"error\"',\n        '(focus)': 'button.focus()'\n    },\n    exportAs: 'mcDatepickerToggle',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n\n    /** Whether the toggle button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    /** Datepicker instance that the button will toggle. */\n    @Input('for') datepicker: McDatepicker<D>;\n\n    /** Tabindex for the toggle. */\n    @Input() tabIndex: number | null;\n\n    /** Custom icon set by the consumer. */\n    @ContentChild(McDatepickerToggleIcon) customIcon: McDatepickerToggleIcon;\n\n    /** Underlying button element. */\n    @ViewChild('button') button: McButton;\n    private stateChanges = Subscription.EMPTY;\n\n    private _disabled: boolean;\n\n    constructor(\n        public intl: McDatepickerIntl,\n        private changeDetectorRef: ChangeDetectorRef,\n        @Attribute('tabindex') defaultTabIndex: string\n    ) {\n        const parsedTabIndex = Number(defaultTabIndex);\n        this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.datepicker) {\n            this.watchStateChanges();\n        }\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.unsubscribe();\n    }\n\n    ngAfterContentInit() {\n        this.watchStateChanges();\n    }\n\n    open(event: Event): void {\n        if (this.datepicker && !this.disabled) {\n            this.datepicker.open();\n            event.stopPropagation();\n        }\n    }\n\n    private watchStateChanges() {\n        const datepickerDisabled = this.datepicker ? this.datepicker.disabledChange : observableOf();\n        const inputDisabled = this.datepicker && this.datepicker.datepickerInput ?\n            this.datepicker.datepickerInput.disabledChange : observableOf();\n        const datepickerToggled = this.datepicker ?\n            merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n            observableOf();\n\n        this.stateChanges.unsubscribe();\n        this.stateChanges = merge(\n            this.intl.changes,\n            datepickerDisabled,\n            inputDisabled,\n            datepickerToggled\n        ).subscribe(() => this.changeDetectorRef.markForCheck());\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { PortalModule } from '@ptsecurity/cdk/portal';\nimport { McButtonModule } from '@ptsecurity/mosaic/button';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McCalendar, McCalendarHeader } from './calendar';\nimport { McCalendarBody } from './calendar-body';\nimport {\n    McDatepicker,\n    McDatepickerContent,\n    MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './datepicker';\nimport { McDatepickerInput } from './datepicker-input';\nimport { McDatepickerIntl } from './datepicker-intl';\nimport { McDatepickerToggle, McDatepickerToggleIcon } from './datepicker-toggle';\nimport { McMonthView } from './month-view';\nimport { McMultiYearView } from './multi-year-view';\nimport { McYearView } from './year-view';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        McButtonModule,\n        OverlayModule,\n        A11yModule,\n        PortalModule,\n        McIconModule\n    ],\n    exports: [\n        McCalendar,\n        McCalendarBody,\n        McDatepicker,\n        McDatepickerContent,\n        McDatepickerInput,\n        McDatepickerToggle,\n        McDatepickerToggleIcon,\n        McMonthView,\n        McYearView,\n        McMultiYearView,\n        McCalendarHeader,\n        McButtonModule\n    ],\n    declarations: [\n        McCalendar,\n        McCalendarBody,\n        McDatepicker,\n        McDatepickerContent,\n        McDatepickerInput,\n        McDatepickerToggle,\n        McDatepickerToggleIcon,\n        McMonthView,\n        McYearView,\n        McMultiYearView,\n        McCalendarHeader\n    ],\n    providers: [\n        McDatepickerIntl,\n        MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER\n    ],\n    entryComponents: [\n        McDatepickerContent,\n        McCalendarHeader\n    ]\n})\nexport class McDatepickerModule {\n}\n","import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\n\n\n@Component({\n    selector: 'mc-divider',\n    host: {\n        class: 'mc-divider',\n        role: 'separator',\n        '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n        '[class.mc-divider-vertical]': 'vertical',\n        '[class.mc-divider-inset]': 'inset'\n    },\n    template: '',\n    styleUrls: ['divider.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false\n})\nexport class McDivider {\n    // Whether the divider is vertically aligned.\n    @Input()\n    get vertical(): boolean {\n        return this._vertical;\n    }\n\n    set vertical(value: boolean) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n\n    private _vertical: boolean = false;\n\n    // Whether the divider is an inset divider.\n    @Input()\n    get inset(): boolean {\n        return this._inset;\n    }\n\n    set inset(value: boolean) {\n        this._inset = coerceBooleanProperty(value);\n    }\n\n    private _inset: boolean = false;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McDivider } from './divider.component';\n\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [McDivider],\n    declarations: [McDivider]\n})\nexport class McDividerModule {\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n    Directive,\n    TemplateRef,\n    ComponentFactoryResolver,\n    ApplicationRef,\n    Injector,\n    ViewContainerRef,\n    Inject,\n    OnDestroy\n} from '@angular/core';\nimport { TemplatePortal, DomPortalOutlet } from '@ptsecurity/cdk/portal';\nimport { Subject } from 'rxjs';\n\n\n/**\n * Dropdown content that will be rendered lazily once the dropdown is opened.\n */\n@Directive({\n    selector: 'ng-template[mcDropdownContent]'\n})\nexport class McDropdownContent implements OnDestroy {\n\n    /** Emits when the dropdown content has been attached. */\n    _attached = new Subject<void>();\n    private _portal: TemplatePortal<any>;\n    private _outlet: DomPortalOutlet;\n\n    constructor(\n        private _template: TemplateRef<any>,\n        private _componentFactoryResolver: ComponentFactoryResolver,\n        private _appRef: ApplicationRef,\n        private _injector: Injector,\n        private _viewContainerRef: ViewContainerRef,\n        @Inject(DOCUMENT) private _document: any) {}\n\n    /**\n     * Attaches the content with a particular context.\n     * @docs-private\n     */\n    attach(context: any = {}) {\n        if (!this._portal) {\n            this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n        }\n\n        this.detach();\n\n        if (!this._outlet) {\n            this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n                this._componentFactoryResolver, this._appRef, this._injector);\n        }\n\n        const element: HTMLElement = this._template.elementRef.nativeElement;\n\n        // Because we support opening the same dropdown from different triggers (which in turn have their\n        // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n        // risk it staying attached to a pane that's no longer in the DOM.\n        element.parentNode!.insertBefore(this._outlet.outletElement, element);\n        this._portal.attach(this._outlet, context);\n        this._attached.next();\n    }\n\n    /**\n     * Detaches the content.\n     * @docs-private\n     */\n    detach() {\n        if (this._portal.isAttached) {\n            this._portal.detach();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._outlet) {\n            this._outlet.dispose();\n        }\n    }\n}\n","import { EventEmitter, TemplateRef, InjectionToken } from '@angular/core';\nimport { FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { Direction } from '@ptsecurity/cdk/bidi';\n\nimport { McDropdownContent } from './dropdown-content';\nimport { DropdownPositionX, DropdownPositionY } from './dropdown-positions';\n\n\n/**\n * Injection token used to provide the parent dropdown to dropdown-specific components.\n * @docs-private\n */\nexport const MC_DROPDOWN_PANEL = new InjectionToken<McDropdownPanel>('MC_DROPDOWN_PANEL');\n\n/**\n * Interface for a custom dropdown panel that can be used with `mcDropdownTriggerFor`.\n * @docs-private\n */\n// tslint:disable-next-line:interface-name\nexport interface McDropdownPanel<T = any> {\n    xPosition: DropdownPositionX;\n    yPosition: DropdownPositionY;\n    overlapTriggerX: boolean;\n    overlapTriggerY: boolean;\n    templateRef: TemplateRef<any>;\n    closed: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n    parent?: McDropdownPanel | undefined;\n    direction?: Direction;\n    lazyContent?: McDropdownContent;\n    backdropClass?: string;\n    hasBackdrop?: boolean;\n    focusFirstItem(origin?: FocusOrigin): void;\n    resetActiveItem(): void;\n    setPositionClasses?(x: DropdownPositionX, y: DropdownPositionY): void;\n    addItem?(item: T): void;\n    removeItem?(item: T): void;\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    OnDestroy,\n    ViewEncapsulation,\n    Inject,\n    Optional,\n    Input,\n    ViewChild\n} from '@angular/core';\nimport { IFocusableOption, FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { CanDisable, CanDisableCtor, mixinDisabled } from '@ptsecurity/mosaic/core';\nimport { Subject } from 'rxjs';\n\nimport { MC_DROPDOWN_PANEL, McDropdownPanel } from './dropdown-panel';\n\n\n// Boilerplate for applying mixins to McDropdownItem.\n/** @docs-private */\nexport class McDropdownItemBase {}\nexport const _McDropdownItemMixinBase: CanDisableCtor & typeof McDropdownItemBase =\n    mixinDisabled(McDropdownItemBase);\n\n/**\n * This directive is intended to be used inside an mc-dropdown tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n    selector: 'mc-dropdown-item, [mc-dropdown-item]',\n    exportAs: 'mcDropdownItem',\n    inputs: ['disabled'],\n    host: {\n        '[attr.role]': 'role',\n        class: 'mc-dropdown__item',\n        '[class.mc-dropdown__item_highlighted]': '_highlighted',\n        '[attr.tabindex]': '_getTabIndex()',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': '_checkDisabled($event)',\n        '(mouseenter)': '_handleMouseEnter()'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    template: `\n        <div #content>\n            <ng-content></ng-content>\n        </div>\n        <i *ngIf=\"_triggersNestedDropdown\" mc-icon=\"mc-angle-right-M_16\" class=\"mc-dropdown__trigger\"></i>\n    `\n})\nexport class McDropdownItem extends _McDropdownItemMixinBase\n    implements IFocusableOption, CanDisable, OnDestroy {\n\n    /** ARIA role for the dropdown item. */\n    @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n    @ViewChild('content') content;\n\n    private _document: Document;\n\n    /** Stream that emits when the dropdown item is hovered. */\n    readonly _hovered: Subject<McDropdownItem> = new Subject<McDropdownItem>();\n\n    /** Whether the dropdown item is highlighted. */\n    _highlighted: boolean = false;\n\n    /** Whether the dropdown item acts as a trigger for a nested dropdown. */\n    _triggersNestedDropdown: boolean = false;\n\n    constructor(\n        private _elementRef: ElementRef<HTMLElement>,\n        @Inject(DOCUMENT) document: any,\n        private _focusMonitor: FocusMonitor,\n        @Inject(MC_DROPDOWN_PANEL) @Optional() private _parentDropdownPanel?: McDropdownPanel<McDropdownItem>) {\n        super();\n\n        if (_focusMonitor) {\n            // Start monitoring the element so it gets the appropriate focused classes. We want\n            // to show the focus style for dropdown items only when the focus was not caused by a\n            // mouse or touch interaction.\n            _focusMonitor.monitor(this._elementRef.nativeElement, false);\n        }\n\n        if (_parentDropdownPanel && _parentDropdownPanel.addItem) {\n            _parentDropdownPanel.addItem(this);\n        }\n\n        this._document = document;\n    }\n\n    /** Focuses the dropdown item. */\n    focus(origin: FocusOrigin = 'program'): void {\n        if (this._focusMonitor) {\n            this._focusMonitor.focusVia(this._getHostElement(), origin);\n        } else {\n            this._getHostElement().focus();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._focusMonitor) {\n            this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n\n        if (this._parentDropdownPanel && this._parentDropdownPanel.removeItem) {\n            this._parentDropdownPanel.removeItem(this);\n        }\n\n        this._hovered.complete();\n    }\n\n    /** Used to set the `tabindex`. */\n    _getTabIndex(): string {\n        return this.disabled ? '-1' : '0';\n    }\n\n    /** Returns the host DOM element. */\n    _getHostElement(): HTMLElement {\n        return this._elementRef.nativeElement;\n    }\n\n    /** Prevents the default element actions if it is disabled. */\n    _checkDisabled(event: Event): void {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    /** Emits to the hover stream. */\n    _handleMouseEnter() {\n        this._hovered.next(this);\n    }\n\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel(): string {\n        const element: HTMLElement = this.content.nativeElement;\n        // tslint:disable-next-line:no-magic-numbers\n        const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n        let output = '';\n\n        if (element.childNodes) {\n            const length = element.childNodes.length;\n\n            // Go through all the top-level text nodes and extract their text.\n            // We skip anything that's not a text node to prevent the text from\n            // being thrown off by something like an icon.\n            for (let i = 0; i < length; i++) {\n                if (element.childNodes[i].nodeType === textNodeType) {\n                    output += element.childNodes[i].textContent;\n                }\n            }\n        }\n\n        return output.trim();\n    }\n}\n","import {\n    trigger,\n    state,\n    style,\n    animate,\n    transition,\n    query,\n    group,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n\n/**\n * Animations used by the mc-dropdown component.\n * @docs-private\n */\nexport const mcDropdownAnimations: {\n    readonly transformDropdown: AnimationTriggerMetadata;\n    readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n    /**\n     * This animation controls the dropdown panel's entry and exit from the page.\n     *\n     * When the dropdown panel is added to the DOM, it scales in and fades in its border.\n     *\n     * When the dropdown panel is removed from the DOM, it simply fades out after a brief\n     * delay to display the ripple.\n     */\n    transformDropdown: trigger('transformDropdown', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(0.8)'\n        })),\n        transition('void => enter', group([\n            query('.mc-dropdown__content', animate('50ms linear', style({opacity: 1}))),\n            animate('50ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'}))\n        ])),\n        transition('* => void', animate('50ms 25ms linear', style({opacity: 0})))\n    ]),\n\n\n    /**\n     * This animation fades in the background color and content of the dropdown panel\n     * after its containing element is scaled in.\n     */\n    fadeInItems: trigger('fadeInItems', [\n        // now. Remove next time we do breaking changes.\n        state('showing', style({opacity: 1})),\n        transition('void => *', [\n            style({opacity: 0}),\n            animate('200ms 60ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n\nexport const fadeInItems = mcDropdownAnimations.fadeInItems;\n\nexport const transformDropdown = mcDropdownAnimations.transformDropdown;\n","import { AnimationEvent } from '@angular/animations';\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChild,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    Output,\n    TemplateRef,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    OnInit\n} from '@angular/core';\nimport { FocusKeyManager, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { Direction } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW } from '@ptsecurity/cdk/keycodes';\nimport { merge, Observable, Subject, Subscription } from 'rxjs';\nimport { startWith, switchMap, take } from 'rxjs/operators';\n\nimport { mcDropdownAnimations } from './dropdown-animations';\nimport { McDropdownContent } from './dropdown-content';\nimport { throwMcDropdownInvalidPositionX, throwMcDropdownInvalidPositionY } from './dropdown-errors';\nimport { McDropdownItem } from './dropdown-item';\nimport { MC_DROPDOWN_PANEL, McDropdownPanel } from './dropdown-panel';\nimport { DropdownPositionX, DropdownPositionY } from './dropdown-positions';\n\n\n/** Default `mc-dropdown` options that can be overridden. */\n// tslint:disable-next-line:interface-name\nexport interface McDropdownDefaultOptions {\n    /** The x-axis position of the dropdown. */\n    xPosition: DropdownPositionX;\n\n    /** The y-axis position of the dropdown. */\n    yPosition: DropdownPositionY;\n\n    /** Whether the dropdown should overlap the dropdown trigger horizontally. */\n    overlapTriggerX: boolean;\n\n    /** Whether the dropdown should overlap the dropdown trigger vertically. */\n    overlapTriggerY: boolean;\n\n    /** Class to be applied to the dropdown's backdrop. */\n    backdropClass: string;\n\n    /** Whether the dropdown has a backdrop. */\n    hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mc-dropdown`. */\nexport const MC_DROPDOWN_DEFAULT_OPTIONS =\n    new InjectionToken<McDropdownDefaultOptions>('mc-dropdown-default-options', {\n        providedIn: 'root',\n        factory: MC_DROPDOWN_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MC_DROPDOWN_DEFAULT_OPTIONS_FACTORY(): McDropdownDefaultOptions {\n    return {\n        overlapTriggerX: true,\n        overlapTriggerY: false,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop'\n    };\n}\n\n@Component({\n    selector: 'mc-dropdown',\n    templateUrl: 'dropdown.html',\n    styleUrls: ['dropdown.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcDropdown',\n    animations: [\n        mcDropdownAnimations.transformDropdown,\n        mcDropdownAnimations.fadeInItems\n    ],\n    providers: [\n        { provide: MC_DROPDOWN_PANEL, useExisting: McDropdown }\n    ]\n})\nexport class McDropdown implements AfterContentInit, McDropdownPanel<McDropdownItem>, OnInit, OnDestroy {\n\n    /** Position of the dropdown in the X axis. */\n    @Input()\n    get xPosition(): DropdownPositionX {\n        return this._xPosition;\n    }\n\n    set xPosition(value: DropdownPositionX) {\n        if (value !== 'before' && value !== 'after') {\n            throwMcDropdownInvalidPositionX();\n        }\n        this._xPosition = value;\n        this.setPositionClasses();\n    }\n\n    /** Position of the dropdown in the Y axis. */\n    @Input()\n    get yPosition(): DropdownPositionY {\n        return this._yPosition;\n    }\n\n    set yPosition(value: DropdownPositionY) {\n        if (value !== 'above' && value !== 'below') {\n            throwMcDropdownInvalidPositionY();\n        }\n        this._yPosition = value;\n        this.setPositionClasses();\n    }\n\n    /** Whether the dropdown should overlap its trigger vertically. */\n    @Input()\n    get overlapTriggerY(): boolean {\n        return this._overlapTriggerY;\n    }\n\n    set overlapTriggerY(value: boolean) {\n        this._overlapTriggerY = coerceBooleanProperty(value);\n    }\n\n    /** Whether the dropdown should overlap its trigger horizontally. */\n    @Input()\n    get overlapTriggerX(): boolean {\n        return this._overlapTriggerX;\n    }\n\n    set overlapTriggerX(value: boolean) {\n        this._overlapTriggerX = coerceBooleanProperty(value);\n    }\n\n    /** Whether the dropdown has a backdrop. */\n    @Input()\n    get hasBackdrop(): boolean | undefined {\n        return this._hasBackdrop;\n    }\n\n    set hasBackdrop(value: boolean | undefined) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n\n    /**\n     * This method takes classes set on the host mc-dropdown element and applies them on the\n     * dropdown template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing dropdown from outside the component.\n     * @param classes list of class names\n     */\n    @Input('class')\n    set panelClass(classes: string) {\n        const previousPanelClass = this._previousPanelClass;\n\n        if (previousPanelClass && previousPanelClass.length) {\n            previousPanelClass.split(' ').forEach((className: string) => {\n                this._classList[className] = false;\n            });\n        }\n\n        this._previousPanelClass = classes;\n\n        if (classes && classes.length) {\n            classes.split(' ').forEach((className: string) => {\n                this._classList[className] = true;\n            });\n\n            this._elementRef.nativeElement.className = '';\n        }\n    }\n\n    /** Config object to be passed into the dropdown's ngClass */\n    _classList: { [key: string]: boolean } = {};\n\n    /** Current state of the panel animation. */\n    _panelAnimationState: 'void' | 'enter' = 'void';\n\n    /** Emits whenever an animation on the dropdown completes. */\n    _animationDone = new Subject<AnimationEvent>();\n\n    /** Whether the dropdown is animating. */\n    _isAnimating: boolean;\n\n    /** Parent dropdown of the current dropdown panel. */\n    parent: McDropdownPanel | undefined;\n\n    /** Layout direction of the dropdown. */\n    direction: Direction;\n\n    /** Class to be added to the backdrop element. */\n    @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n    /** @docs-private */\n    @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n    /**\n     * List of the items inside of a dropdown.\n     */\n    @ContentChildren(McDropdownItem) items: QueryList<McDropdownItem>;\n\n    /**\n     * Dropdown content that will be rendered lazily.\n     * @docs-private\n     */\n    @ContentChild(McDropdownContent) lazyContent: McDropdownContent;\n\n    private _previousPanelClass: string;\n\n    /** Event emitted when the dropdown is closed. */\n    @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n        new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n    private _keyManager: FocusKeyManager<McDropdownItem>;\n    private _xPosition: DropdownPositionX = this._defaultOptions.xPosition;\n    private _yPosition: DropdownPositionY = this._defaultOptions.yPosition;\n\n    /** Dropdown items inside the current dropdown. */\n    private _items: McDropdownItem[] = [];\n\n    /** Emits whenever the amount of dropdown items changes. */\n    private _itemChanges = new Subject<McDropdownItem[]>();\n\n    /** Subscription to tab events on the dropdown panel */\n    private _tabSubscription = Subscription.EMPTY;\n    private _overlapTriggerX: boolean = this._defaultOptions.overlapTriggerX;\n    private _overlapTriggerY: boolean = this._defaultOptions.overlapTriggerY;\n    private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n    constructor(\n        private _elementRef: ElementRef<HTMLElement>,\n        private _ngZone: NgZone,\n        @Inject(MC_DROPDOWN_DEFAULT_OPTIONS) private _defaultOptions: McDropdownDefaultOptions) { }\n\n    ngOnInit() {\n        this.setPositionClasses();\n    }\n\n    ngAfterContentInit() {\n        this._keyManager = new FocusKeyManager<McDropdownItem>(this.items).withWrap().withTypeAhead();\n        this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n    }\n\n    ngOnDestroy() {\n        this._tabSubscription.unsubscribe();\n        this.closed.complete();\n    }\n\n    /** Stream that emits whenever the hovered dropdown item changes. */\n    _hovered(): Observable<McDropdownItem> {\n        return this._itemChanges.pipe(\n            startWith(this._items),\n            switchMap(items => merge(...items.map(item => item._hovered)))\n        );\n    }\n\n    /** Handle a keyboard event from the dropdown, delegating to the appropriate action. */\n    _handleKeydown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n\n        switch (keyCode) {\n            case ESCAPE:\n                this.closed.emit('keydown');\n                break;\n            case LEFT_ARROW:\n                if (this.parent && this.direction === 'ltr') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            case RIGHT_ARROW:\n                if (this.parent && this.direction === 'rtl') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            default:\n                if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n                    this._keyManager.setFocusOrigin('keyboard');\n                }\n\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    /**\n     * Focus the first item in the dropdown.\n     * @param origin Action from which the focus originated. Used to set the correct styling.\n     */\n    focusFirstItem(origin: FocusOrigin = 'program'): void {\n        // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n        if (this.lazyContent) {\n            this._ngZone.onStable.asObservable()\n                .pipe(take(1))\n                .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n        } else {\n            this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n        }\n    }\n\n    /**\n     * Resets the active item in the dropdown. This is used when the dropdown is opened, allowing\n     * the user to start from the first option when pressing the down arrow.\n     */\n    resetActiveItem() {\n        this._keyManager.setActiveItem(-1);\n    }\n\n    /**\n     * Registers a dropdown item with the dropdown.\n     * @docs-private\n     */\n    addItem(item: McDropdownItem) {\n        // We register the items through this method, rather than picking them up through\n        // `ContentChildren`, because we need the items to be picked up by their closest\n        // `mc-dropdown` ancestor. If we used `@ContentChildren(McDropdownItem, {descendants: true})`,\n        // all descendant items will bleed into the top-level dropdown in the case where the consumer\n        // has `mc-dropdown` instances nested inside each other.\n        if (this._items.indexOf(item) === -1) {\n            this._items.push(item);\n            this._itemChanges.next(this._items);\n        }\n    }\n\n    /**\n     * Removes an item from the dropdown.\n     * @docs-private\n     */\n    removeItem(item: McDropdownItem) {\n        const index = this._items.indexOf(item);\n\n        if (this._items.indexOf(item) > -1) {\n            this._items.splice(index, 1);\n            this._itemChanges.next(this._items);\n        }\n    }\n\n    /**\n     * Adds classes to the dropdown panel based on its position. Can be used by\n     * consumers to add specific styling based on the position.\n     * @param posX Position of the dropdown along the x axis.\n     * @param posY Position of the dropdown along the y axis.\n     * @docs-private\n     */\n    setPositionClasses(posX: DropdownPositionX = this.xPosition, posY: DropdownPositionY = this.yPosition) {\n        const classes = this._classList;\n        classes['mc-dropdown-before'] = posX === 'before';\n        classes['mc-dropdown-after'] = posX === 'after';\n        classes['mc-dropdown-above'] = posY === 'above';\n        classes['mc-dropdown-below'] = posY === 'below';\n    }\n\n    /** Starts the enter animation. */\n    _startAnimation() {\n        this._panelAnimationState = 'enter';\n    }\n\n    /** Resets the panel animation to its initial state. */\n    _resetAnimation() {\n        this._panelAnimationState = 'void';\n    }\n\n    /** Callback that is invoked when the panel animation completes. */\n    _onAnimationDone(event: AnimationEvent) {\n        this._animationDone.next(event);\n        this._isAnimating = false;\n    }\n\n    _onAnimationStart(event: AnimationEvent) {\n        this._isAnimating = true;\n\n        // Scroll the content element to the top as soon as the animation starts. This is necessary,\n        // because we move focus to the first item while it's still being animated, which can throw\n        // the browser off when it determines the scroll position. Alternatively we can move focus\n        // when the animation is done, however moving focus asynchronously will interrupt screen\n        // readers which are in the process of reading out the dropdown already. We take the `element`\n        // from the `event` since we can't use a `ViewChild` to access the pane.\n        if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n            event.element.scrollTop = 0;\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McDropdownContent } from './dropdown-content';\nimport { McDropdownItem } from './dropdown-item';\nimport { MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER, McDropdownTrigger } from './dropdown-trigger';\nimport { McDropdown } from './dropdown.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        McIconModule\n    ],\n    exports: [McDropdown, McDropdownItem, McDropdownTrigger, McDropdownContent],\n    declarations: [McDropdown, McDropdownItem, McDropdownTrigger, McDropdownContent],\n    providers: [MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class McDropdownModule {}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-content',\n    preserveWhitespaces: false,\n    templateUrl: './content.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ],\n    host: {\n        '[class.mc-layout-content]': 'true'\n    }\n})\nexport class McContentComponent {\n}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-footer',\n    preserveWhitespaces: false,\n    templateUrl: './footer.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ],\n    host: {\n        '[class.mc-layout-footer]': 'true'\n    }\n})\nexport class McFooterComponent {\n}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector : 'mc-header',\n    preserveWhitespaces: false,\n    templateUrl: './header.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ],\n    host: {\n        '[class.mc-layout-header]': 'true'\n    }\n})\nexport class McHeaderComponent {\n}\n","import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-layout',\n    preserveWhitespaces: false,\n    styleUrls: ['layout.css'],\n    templateUrl: './layout.component.html',\n    host: {\n        '[class.mc-layout]': 'true',\n        '[class.mc-layout-has-sidebar]': 'hasSidebar'\n    },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McLayoutComponent {\n    hasSidebar = false;\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    EventEmitter,\n    Host,\n    Input,\n    OnInit,\n    Optional,\n    Output\n} from '@angular/core';\nimport { toBoolean } from '@ptsecurity/mosaic/core';\n\nimport { McLayoutComponent } from './layout.component';\n\n\n@Component({\n    selector: 'mc-sidebar',\n    preserveWhitespaces: false,\n    templateUrl: './sidebar.component.html',\n    host: {\n        '[class.mc-layout-sidebar]': 'true',\n        '[class.mc-layout-sidebar-collapsed]': 'mcCollapsed',\n        '[style.flex]': 'mcFlex',\n        '[style.max-width.px]': 'mcWidth',\n        '[style.min-width.px]': 'mcWidth',\n        '[style.width.px]': 'mcWidth'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McSidebarComponent implements OnInit {\n\n    @Input() _mcWidth = 200;\n    @Input() mcCollapsedWidth = 80;\n\n    @Input()\n    set mcCollapsible(value: boolean) {\n        this.collapsible = toBoolean(value);\n    }\n\n    get mcCollapsible(): boolean {\n        return this.collapsible;\n    }\n\n    @Input()\n    set mcCollapsed(value: boolean) {\n        this.collapsed = toBoolean(value);\n    }\n\n    get mcCollapsed(): boolean {\n        return this.collapsed;\n    }\n\n    // tslint:disable-next-line\n    @Output() mcCollapsedChange = new EventEmitter();\n\n    private collapsed = false;\n    private collapsible = false;\n\n    get mcFlex(): string {\n        if (this.mcCollapsed) {\n            return `0 0 ${this.mcCollapsedWidth}px`;\n        } else {\n            return `0 0 ${this.mcWidth}px`;\n        }\n    }\n\n    get mcWidth(): number {\n        if (this.mcCollapsed) {\n            return this.mcCollapsedWidth;\n        } else {\n            return this._mcWidth;\n        }\n    }\n\n    constructor(\n        @Optional() @Host() private mcLayoutComponent: McLayoutComponent) {\n    }\n\n    ngOnInit() {\n        if (this.mcLayoutComponent) {\n            this.mcLayoutComponent.hasSidebar = true;\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McContentComponent } from './content.component';\nimport { McFooterComponent } from './footer.component';\nimport { McHeaderComponent } from './header.component';\nimport { McLayoutComponent } from './layout.component';\nimport { McSidebarComponent } from './sidebar.component';\n\n\n@NgModule({\n    imports: [ CommonModule ],\n    exports: [\n        McLayoutComponent,\n        McContentComponent,\n        McFooterComponent,\n        McHeaderComponent,\n        McSidebarComponent\n    ],\n    declarations: [\n        McLayoutComponent,\n        McContentComponent,\n        McFooterComponent,\n        McHeaderComponent,\n        McSidebarComponent\n    ]\n})\nexport class McLayoutModule {\n}\n","// tslint:disable:no-magic-numbers\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { DateAdapter } from '@ptsecurity/cdk/datetime';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    PAGE_DOWN,\n    PAGE_UP,\n    RIGHT_ARROW,\n    UP_ARROW,\n    SPACE\n} from '@ptsecurity/cdk/keycodes';\n\nimport { McCalendarBody, McCalendarCell } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-multi-year-view',\n    templateUrl: 'multi-year-view.html',\n    exportAs: 'mcMultiYearView',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McMultiYearView<D> implements AfterContentInit {\n    /** The date to display in this multi-year view (everything other than the year is ignored). */\n    @Input()\n    get activeDate(): D {\n        return this._activeDate;\n    }\n\n    set activeDate(value: D) {\n        const oldActiveDate = this._activeDate;\n        const validDate =\n            this.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();\n        this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n        if (Math.floor(this.dateAdapter.getYear(oldActiveDate) / yearsPerPage) !==\n            Math.floor(this.dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n            this.init();\n        }\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.selectedYear = this._selected && this.dateAdapter.getYear(this._selected);\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** A function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Emits when a new year is selected. */\n    @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits the selected year. This doesn't imply a change on the selected date */\n    @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits when any date is activated. */\n    @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** The body of calendar table */\n    @ViewChild(McCalendarBody) mcCalendarBody: McCalendarBody;\n\n    /** Grid of calendar cells representing the currently displayed years. */\n    years: McCalendarCell[][];\n\n    /** The year that today falls on. */\n    todayYear: number;\n\n    /** The year of the selected date. Null if the selected date is null. */\n    selectedYear: number | null;\n    private _activeDate: D;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() private dir?: Directionality\n    ) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        this._activeDate = this.dateAdapter.today();\n    }\n\n    ngAfterContentInit() {\n        this.init();\n    }\n\n    /** Initializes this multi-year view. */\n    init() {\n        this.todayYear = this.dateAdapter.getYear(this.dateAdapter.today());\n        const activeYear = this.dateAdapter.getYear(this._activeDate);\n        const activeOffset = activeYear % yearsPerPage;\n        this.years = [];\n        for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n            row.push(activeYear - activeOffset + i);\n            if (row.length === yearsPerRow) {\n                this.years.push(row.map((year) => this.createCellForYear(year)));\n                row = [];\n            }\n        }\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Handles when a new year is selected. */\n    onYearSelected(year: number) {\n        this.yearSelected.emit(this.dateAdapter.createDate(year, 0, 1));\n        const month = this.dateAdapter.getMonth(this.activeDate);\n        const daysInMonth =\n            this.dateAdapter.getNumDaysInMonth(this.dateAdapter.createDate(year, month, 1));\n        this.selectedChange.emit(this.dateAdapter.createDate(year, month,\n            Math.min(this.dateAdapter.getDate(this.activeDate), daysInMonth)));\n    }\n\n    /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n    handleCalendarBodyKeydown(event: KeyboardEvent): void {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n        const oldActiveDate = this._activeDate;\n        const isRtl = this.isRtl();\n\n        // tslint:disable-next-line:deprecation\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n                break;\n            case HOME:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate,\n                    -this.dateAdapter.getYear(this._activeDate) % yearsPerPage);\n                break;\n            case END:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate,\n                    yearsPerPage - this.dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n                break;\n            case PAGE_UP:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(\n                        this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n                break;\n            case PAGE_DOWN:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(\n                        this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n                break;\n            case ENTER:\n            case SPACE:\n                this.onYearSelected(this.dateAdapter.getYear(this._activeDate));\n                break;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n\n        if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n\n        this.focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n\n    getActiveCell(): number {\n        return this.dateAdapter.getYear(this.activeDate) % yearsPerPage;\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.mcCalendarBody.focusActiveCell();\n    }\n\n    /** Creates an McCalendarCell for the given year. */\n    private createCellForYear(year: number) {\n        const yearName = this.dateAdapter.getYearName(this.dateAdapter.createDate(year, 0, 1));\n\n        return new McCalendarCell(year, yearName, yearName, this.shouldEnableYear(year));\n    }\n\n    /** Whether the given year is enabled. */\n    private shouldEnableYear(year: number) {\n        // disable if the year is greater than maxDate lower than minDate\n        if (year === undefined || year === null ||\n            (this.maxDate && year > this.dateAdapter.getYear(this.maxDate)) ||\n            (this.minDate && year < this.dateAdapter.getYear(this.minDate))) {\n            return false;\n        }\n\n        // enable if it reaches here and there's no filter defined\n        if (!this.dateFilter) {\n            return true;\n        }\n\n        const firstOfYear = this.dateAdapter.createDate(year, 0, 1);\n\n        // If any date in the year is enabled count the year as enabled.\n        for (let date = firstOfYear; this.dateAdapter.getYear(date) === year;\n             date = this.dateAdapter.addCalendarDays(date, 1)) {\n            if (this.dateFilter(date)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Determines whether the user has the RTL layout direction. */\n    private isRtl() {\n        return this.dir && this.dir.value === 'rtl';\n    }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Inject,\n    Input,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    PAGE_DOWN,\n    PAGE_UP,\n    RIGHT_ARROW,\n    UP_ARROW,\n    SPACE\n} from '@ptsecurity/cdk/keycodes';\n\nimport { McCalendarBody, McCalendarCell } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-year-view',\n    templateUrl: 'year-view.html',\n    exportAs: 'mcYearView',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McYearView<D> implements AfterContentInit {\n    /** The date to display in this year view (everything other than the year is ignored). */\n    @Input()\n    get activeDate(): D {\n        return this._activeDate;\n    }\n\n    set activeDate(value: D) {\n        const oldActiveDate = this._activeDate;\n        const validDate =\n            this.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();\n        this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n        if (this.dateAdapter.getYear(oldActiveDate) !== this.dateAdapter.getYear(this._activeDate)) {\n            this.init();\n        }\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.selectedMonth = this.getMonthInCurrentYear(this._selected);\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** A function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Emits when a new month is selected. */\n    @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits the selected month. This doesn't imply a change on the selected date */\n    @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits when any date is activated. */\n    @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** The body of calendar table */\n    @ViewChild(McCalendarBody) mcCalendarBody: McCalendarBody;\n\n    /** Grid of calendar cells representing the months of the year. */\n    months: McCalendarCell[][];\n\n    /** The label for this year (e.g. \"2017\"). */\n    yearLabel: string;\n\n    /** The month in this year that today falls on. Null if today is in a different year. */\n    todayMonth: number | null;\n\n    /**\n     * The month in this year that the selected Date falls on.\n     * Null if the selected Date is in a different year.\n     */\n    selectedMonth: number | null;\n    private _activeDate: D;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() private dir?: Directionality\n    ) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        this._activeDate = this.dateAdapter.today();\n    }\n\n    ngAfterContentInit() {\n        this.init();\n    }\n\n    /** Handles when a new month is selected. */\n    onMonthSelected(month: number) {\n        const normalizedDate =\n            this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate), month, 1);\n\n        this.monthSelected.emit(normalizedDate);\n\n        const daysInMonth = this.dateAdapter.getNumDaysInMonth(normalizedDate);\n\n        this.selectedChange.emit(this.dateAdapter.createDate(\n            this.dateAdapter.getYear(this.activeDate), month,\n            Math.min(this.dateAdapter.getDate(this.activeDate), daysInMonth)));\n    }\n\n    /** Handles keydown events on the calendar body when calendar is in year view. */\n    handleCalendarBodyKeydown(event: KeyboardEvent): void {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n        const oldActiveDate = this._activeDate;\n        const isRtl = this.isRtl();\n\n        const VERTICAL_SHIFT = 4;\n        const PAGE_SHIFT = 10;\n        const MAX_MONTH_INDEX = 11;\n\n        // tslint:disable-next-line:deprecation\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, -VERTICAL_SHIFT);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, VERTICAL_SHIFT);\n                break;\n            case HOME:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate,\n                    -this.dateAdapter.getMonth(this._activeDate));\n                break;\n            case END:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate,\n                    MAX_MONTH_INDEX - this.dateAdapter.getMonth(this._activeDate));\n                break;\n            case PAGE_UP:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -PAGE_SHIFT : -1);\n                break;\n            case PAGE_DOWN:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(this._activeDate, event.altKey ? PAGE_SHIFT : 1);\n                break;\n            case ENTER:\n            case SPACE:\n                this.onMonthSelected(this.dateAdapter.getMonth(this._activeDate));\n                break;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n\n        if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n\n        this.focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n\n    /** Initializes this year view. */\n    init() {\n        this.selectedMonth = this.getMonthInCurrentYear(this.selected);\n        this.todayMonth = this.getMonthInCurrentYear(this.dateAdapter.today());\n        this.yearLabel = this.dateAdapter.getYearName(this.activeDate);\n\n        const monthNames = this.dateAdapter.getMonthNames('short');\n\n        // First row of months only contains 5 elements so we can fit the year label on the same row.\n        // tslint:disable-next-line:no-magic-numbers\n        this.months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map((row) => row.map(\n            (month) => this.createCellForMonth(month, monthNames[month])));\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.mcCalendarBody.focusActiveCell();\n    }\n\n    /**\n     * Gets the month in this year that the given Date falls on.\n     * Returns null if the given Date is in another year.\n     */\n    private getMonthInCurrentYear(date: D | null) {\n        return date && this.dateAdapter.getYear(date) === this.dateAdapter.getYear(this.activeDate) ?\n            this.dateAdapter.getMonth(date) : null;\n    }\n\n    /** Creates an McCalendarCell for the given month. */\n    private createCellForMonth(month: number, monthName: string) {\n        const ariaLabel = this.dateAdapter.format(\n            this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate), month, 1),\n            this.dateFormats.display.monthYearA11yLabel);\n\n        const newMonthName = monthName[0].toLocaleUpperCase() + monthName.substr(1);\n\n        return new McCalendarCell(\n            month, newMonthName, ariaLabel, this.shouldEnableMonth(month));\n    }\n\n    /** Whether the given month is enabled. */\n    private shouldEnableMonth(month: number) {\n\n        const activeYear = this.dateAdapter.getYear(this.activeDate);\n\n        if (month === undefined || month === null ||\n            this.isYearAndMonthAfterMaxDate(activeYear, month) ||\n            this.isYearAndMonthBeforeMinDate(activeYear, month)) {\n            return false;\n        }\n\n        if (!this.dateFilter) {\n            return true;\n        }\n\n        const firstOfMonth = this.dateAdapter.createDate(activeYear, month, 1);\n\n        // If any date in the month is enabled count the month as enabled.\n        for (let date = firstOfMonth; this.dateAdapter.getMonth(date) === month;\n             date = this.dateAdapter.addCalendarDays(date, 1)) {\n            if (this.dateFilter(date)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Tests whether the combination month/year is after this.maxDate, considering\n     * just the month and year of this.maxDate\n     */\n    private isYearAndMonthAfterMaxDate(year: number, month: number) {\n        if (this.maxDate) {\n            const maxYear = this.dateAdapter.getYear(this.maxDate);\n            const maxMonth = this.dateAdapter.getMonth(this.maxDate);\n\n            return year > maxYear || (year === maxYear && month > maxMonth);\n        }\n\n        return false;\n    }\n\n    /**\n     * Tests whether the combination month/year is before this.minDate, considering\n     * just the month and year of this.minDate\n     */\n    private isYearAndMonthBeforeMinDate(year: number, month: number) {\n        if (this.minDate) {\n            const minYear = this.dateAdapter.getYear(this.minDate);\n            const minMonth = this.dateAdapter.getMonth(this.minDate);\n\n            return year < minYear || (year === minYear && month < minMonth);\n        }\n\n        return false;\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Determines whether the user has the RTL layout direction. */\n    private isRtl() {\n        return this.dir && this.dir.value === 'rtl';\n    }\n}\n","import {\n    AfterContentInit,\n    AfterViewChecked,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Optional,\n    Output,\n    SimpleChanges,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport { ComponentPortal, IComponentType, Portal } from '@ptsecurity/cdk/portal';\nimport { Subject, Subscription } from 'rxjs';\n\nimport { McCalendarCellCssClasses } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\nimport { McDatepickerIntl } from './datepicker-intl';\nimport { McMonthView } from './month-view';\nimport { McMultiYearView, yearsPerPage } from './multi-year-view';\nimport { McYearView } from './year-view';\n\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type McCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for McCalendar */\n@Component({\n    selector: 'mc-calendar-header',\n    templateUrl: 'calendar-header.html',\n    exportAs: 'mcCalendarHeader',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCalendarHeader<D> {\n    constructor(private intl: McDatepickerIntl,\n                @Inject(forwardRef(() => McCalendar)) public calendar: McCalendar<D>,\n                @Optional() private dateAdapter: DateAdapter<D>,\n                @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n                changeDetectorRef: ChangeDetectorRef) {\n\n        this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n    }\n\n    /** The label for the current calendar view. */\n    get periodButtonText(): string {\n        if (this.calendar.currentView === 'month') {\n            const label = this.dateAdapter\n                .format(this.calendar.activeDate, this.dateFormats.display.monthYearLabel);\n\n            return label[0].toLocaleUpperCase() + label.substr(1);\n        }\n\n        if (this.calendar.currentView === 'year') {\n            return this.dateAdapter.getYearName(this.calendar.activeDate);\n        }\n\n        const activeYear = this.dateAdapter.getYear(this.calendar.activeDate);\n        const firstYearInView = this.dateAdapter.getYearName(\n            // tslint:disable-next-line:no-magic-numbers\n            this.dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n        const lastYearInView = this.dateAdapter.getYearName(\n            // tslint:disable-next-line:no-magic-numbers\n            this.dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n\n        return `${firstYearInView} \\u2013 ${lastYearInView}`;\n    }\n\n    get periodButtonLabel(): string {\n        return this.calendar.currentView === 'month' ?\n            this.intl.switchToMultiYearViewLabel : this.intl.switchToMonthViewLabel;\n    }\n\n    /** The label for the previous button. */\n    get prevButtonLabel(): string {\n        return {\n            month: this.intl.prevMonthLabel,\n            year: this.intl.prevYearLabel,\n            'multi-year': this.intl.prevMultiYearLabel\n        }[this.calendar.currentView];\n    }\n\n    /** The label for the next button. */\n    get nextButtonLabel(): string {\n        return {\n            month: this.intl.nextMonthLabel,\n            year: this.intl.nextYearLabel,\n            'multi-year': this.intl.nextMultiYearLabel\n        }[this.calendar.currentView];\n    }\n\n    /** Handles user clicks on the period label. */\n    currentPeriodClicked(): void {\n        this.calendar.currentView = this.calendar.currentView === 'month' ? 'multi-year' : 'month';\n    }\n\n    /** Handles user clicks on the previous button. */\n    previousClicked(): void {\n        this.calendar.activeDate = this.calendar.currentView === 'month' ?\n            this.dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this.dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView === 'year' ? -1 : -yearsPerPage\n            );\n    }\n\n    /** Handles user clicks on the next button. */\n    nextClicked(): void {\n        this.calendar.activeDate = this.calendar.currentView === 'month' ?\n            this.dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this.dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                this.calendar.currentView === 'year' ? 1 : yearsPerPage\n            );\n    }\n\n    /** Whether the previous period button is enabled. */\n    previousEnabled(): boolean {\n        if (!this.calendar.minDate) {\n            return true;\n        }\n\n        return !this.calendar.minDate ||\n            !this.isSameView(this.calendar.activeDate, this.calendar.minDate);\n    }\n\n    /** Whether the next period button is enabled. */\n    nextEnabled(): boolean {\n        return !this.calendar.maxDate ||\n            !this.isSameView(this.calendar.activeDate, this.calendar.maxDate);\n    }\n\n    /** Whether the two dates represent the same view in the current view mode (month or year). */\n    private isSameView(date1: D, date2: D): boolean {\n        if (this.calendar.currentView === 'month') {\n            return this.dateAdapter.getYear(date1) === this.dateAdapter.getYear(date2) &&\n                this.dateAdapter.getMonth(date1) === this.dateAdapter.getMonth(date2);\n        }\n        if (this.calendar.currentView === 'year') {\n            return this.dateAdapter.getYear(date1) === this.dateAdapter.getYear(date2);\n        }\n\n        // Otherwise we are in 'multi-year' view.\n        return Math.floor(this.dateAdapter.getYear(date1) / yearsPerPage) ===\n            Math.floor(this.dateAdapter.getYear(date2) / yearsPerPage);\n    }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-calendar',\n    templateUrl: 'calendar.html',\n    styleUrls: ['calendar.css'],\n    host: {\n        class: 'mc-calendar'\n    },\n    exportAs: 'mcCalendar',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n\n    /** A date representing the period (month or year) to start the calendar in. */\n    @Input()\n    get startAt(): D | null {\n        return this._startAt;\n    }\n\n    set startAt(value: D | null) {\n        this._startAt = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /**\n     * The current active date. This determines which time period is shown and which date is\n     * highlighted when using keyboard navigation.\n     */\n    get activeDate(): D {\n        return this.clampedActiveDate;\n    }\n\n    set activeDate(value: D) {\n        this.clampedActiveDate = this.dateAdapter.clampDate(value, this.minDate, this.maxDate);\n        this.stateChanges.next();\n    }\n\n    /** Whether the calendar is in month view. */\n    get currentView(): McCalendarView {\n        return this._currentView;\n    }\n\n    set currentView(value: McCalendarView) {\n        this._currentView = value;\n        this.moveFocusOnNextTick = true;\n    }\n\n    /** An input indicating the type of the header component, if set. */\n    @Input() headerComponent: IComponentType<any>;\n\n    /** A portal containing the header component type for this calendar. */\n    calendarHeaderPortal: Portal<any>;\n\n    /** Whether the calendar should be started in month or year view. */\n    @Input() startView: McCalendarView = 'month';\n\n    /** Function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Function that can be used to add custom CSS classes to dates. */\n    @Input() dateClass: (date: D) => McCalendarCellCssClasses;\n\n    /** Emits when the currently selected date changes. */\n    @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /**\n     * Emits the year chosen in multiyear view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /**\n     * Emits the month chosen in year view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits when any date is selected. */\n    @Output() readonly userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Reference to the current month view component. */\n    @ViewChild(McMonthView) monthView: McMonthView<D>;\n\n    /** Reference to the current year view component. */\n    @ViewChild(McYearView) yearView: McYearView<D>;\n\n    /** Reference to the current multi-year view component. */\n    @ViewChild(McMultiYearView) multiYearView: McMultiYearView<D>;\n\n    /**\n     * Emits whenever there is a state change that the header may need to respond to.\n     */\n    stateChanges = new Subject<void>();\n\n    private intlChanges: Subscription;\n\n    /**\n     * Used for scheduling that focus should be moved to the active cell on the next tick.\n     * We need to schedule it, rather than do it immediately, because we have to wait\n     * for Angular to re-evaluate the view children.\n     */\n    private moveFocusOnNextTick = false;\n    private _startAt: D | null;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n    private clampedActiveDate: D;\n    private _currentView: McCalendarView;\n\n    constructor(\n        intl: McDatepickerIntl,\n        @Optional() private dateAdapter: DateAdapter<D>,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        this.intlChanges = intl.changes.subscribe(() => {\n            changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        });\n    }\n\n    ngAfterContentInit() {\n        this.calendarHeaderPortal = new ComponentPortal(this.headerComponent || McCalendarHeader);\n        this.activeDate = this.startAt || this.dateAdapter.today();\n\n        // Assign to the private property since we don't want to move focus on init.\n        this._currentView = this.startView;\n    }\n\n    ngAfterViewChecked() {\n        if (this.moveFocusOnNextTick) {\n            this.moveFocusOnNextTick = false;\n            this.focusActiveCell();\n        }\n    }\n\n    ngOnDestroy() {\n        this.intlChanges.unsubscribe();\n        this.stateChanges.complete();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n        if (change && !change.firstChange) {\n            const view = this.getCurrentViewComponent();\n\n            if (view) {\n                // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n                // passed down to the view via data bindings which won't be up-to-date when we call `init`.\n                this.changeDetectorRef.detectChanges();\n                view.init();\n            }\n        }\n\n        this.stateChanges.next();\n    }\n\n    focusActiveCell() {\n        this.getCurrentViewComponent().focusActiveCell();\n    }\n\n    /** Updates today's date after an update of the active date */\n    updateTodaysDate() {\n        const view = this.currentView === 'month' ? this.monthView :\n            (this.currentView === 'year' ? this.yearView : this.multiYearView);\n\n        view.ngAfterContentInit();\n    }\n\n    /** Handles date selection in the month view. */\n    dateSelected(date: D): void {\n        if (!this.dateAdapter.sameDate(date, this.selected)) {\n            this.selectedChange.emit(date);\n        }\n    }\n\n    /** Handles year selection in the multiyear view. */\n    yearSelectedInMultiYearView(normalizedYear: D) {\n        this.yearSelected.emit(normalizedYear);\n    }\n\n    /** Handles month selection in the year view. */\n    monthSelectedInYearView(normalizedMonth: D) {\n        this.monthSelected.emit(normalizedMonth);\n    }\n\n    userSelected(): void {\n        this.userSelection.emit();\n    }\n\n    /** Handles year/month selection in the multi-year/year views. */\n    goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n        this.activeDate = date;\n        this.currentView = view;\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Returns the component instance that corresponds to the current calendar view. */\n    private getCurrentViewComponent() {\n        return this.monthView || this.yearView || this.multiYearView;\n    }\n}\n","import {\n    animate,\n    state,\n    style,\n    transition,\n    trigger,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n\n/**\n * Animations used by the mosaic datepicker.\n * @docs-private\n */\nexport const mcDatepickerAnimations: {\n    readonly transformPanel: AnimationTriggerMetadata;\n    readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n    /** Transforms the height of the datepicker's calendar. */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(1, 0.8)'\n        })),\n        transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1, 1)'\n        }))),\n        transition('* => void', animate('100ms linear', style({ opacity: 0 })))\n    ]),\n\n    /** Fades in the content of the calendar. */\n    fadeInCalendar: trigger('fadeInCalendar', [\n        state('void', style({ opacity: 0 })),\n        state('enter', style({ opacity: 1 })),\n\n        // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n        transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n    ])\n};\n\n// todo should be put into polyfils\n// https://github.com/angular/angular/issues/24769\nif (!Element.prototype.matches) {\n    Element.prototype.matches = (Element.prototype as any).msMatchesSelector;\n}\n","// tslint:disable:no-unbound-method\n// tslint:disable:no-magic-numbers\nimport { DOCUMENT } from '@angular/common';\nimport {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    Component,\n    ComponentRef,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { DateAdapter } from '@ptsecurity/cdk/datetime';\nimport { ESCAPE, UP_ARROW } from '@ptsecurity/cdk/keycodes';\nimport {\n    Overlay,\n    OverlayConfig,\n    OverlayRef,\n    IPositionStrategy,\n    IScrollStrategy\n} from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal, IComponentType } from '@ptsecurity/cdk/portal';\nimport {\n    CanColor,\n    CanColorCtor,\n    mixinColor,\n    ThemePalette\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { merge, Observable, Subject, Subscription } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\n\nimport { McCalendar } from './calendar';\nimport { McCalendarCellCssClasses } from './calendar-body';\nimport { mcDatepickerAnimations } from './datepicker-animations';\nimport { createMissingDateImplError } from './datepicker-errors';\nimport { McDatepickerInput } from './datepicker-input';\n\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MC_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-datepicker-scroll-strategy');\n\n/** @docs-private */\n// tslint:disable-next-line:naming-convention\nexport function MC_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => IScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_DATEPICKER_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_DATEPICKER_SCROLL_STRATEGY_FACTORY\n};\n\n// Boilerplate for applying mixins to McDatepickerContent.\n/** @docs-private */\nexport class McDatepickerContentBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McDatepickerContentMixinBase: CanColorCtor & typeof McDatepickerContentBase =\n    mixinColor(McDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * McCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n    selector: 'mc-datepicker__content',\n    templateUrl: 'datepicker-content.html',\n    styleUrls: ['datepicker-content.css'],\n    host: {\n        class: 'mc-datepicker__content',\n        '[@transformPanel]': '\"enter\"'\n    },\n    animations: [\n        mcDatepickerAnimations.transformPanel,\n        mcDatepickerAnimations.fadeInCalendar\n    ],\n    exportAs: 'mcDatepickerContent',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['color']\n})\nexport class McDatepickerContent<D> extends McDatepickerContentMixinBase\n    implements AfterViewInit, CanColor {\n\n    /** Reference to the internal calendar component. */\n    @ViewChild(McCalendar) calendar: McCalendar<D>;\n\n    /** Reference to the datepicker that created the overlay. */\n    datepicker: McDatepicker<D>;\n\n    /** Whether the datepicker is above or below the input. */\n    isAbove: boolean;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    ngAfterViewInit() {\n        this.calendar.focusActiveCell();\n    }\n}\n\n\n// TODO: We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"mcDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n    selector: 'mc-datepicker',\n    template: '',\n    exportAs: 'mcDatepicker',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    providers: [{ provide: McFormFieldControl, useExisting: McDatepicker }]\n})\nexport class McDatepicker<D> implements OnDestroy, CanColor {\n\n    /** The date to open the calendar to initially. */\n    @Input()\n    get startAt(): D | null {\n        // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n        // selected value is.\n        return this._startAt || (this.datepickerInput ? this.datepickerInput.value : null);\n    }\n\n    set startAt(value: D | null) {\n        this._startAt = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** Color palette to use on the datepicker's calendar. */\n    @Input()\n    get color(): ThemePalette {\n        // @ts-ignore:next-line\n        return this._color ||\n            (this.datepickerInput ? this.datepickerInput.getThemePalette() : undefined);\n    }\n\n    set color(value: ThemePalette) {\n        this._color = value;\n    }\n\n    /** Whether the datepicker pop-up should be disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled === undefined && this.datepickerInput ?\n            this.datepickerInput.disabled : !!this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        const newValue = coerceBooleanProperty(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this.disabledChange.next(newValue);\n        }\n    }\n\n    /** Whether the calendar is open. */\n    @Input()\n    get opened(): boolean {\n        return this._opened;\n    }\n\n    set opened(value: boolean) {\n        if (value) {\n            this.open();\n        } else {\n            this.close();\n        }\n    }\n\n    /** The currently selected date. */\n    get selected(): D | null {\n        return this.validSelected;\n    }\n\n    set selected(value: D | null) {\n        this.validSelected = value;\n    }\n\n    /** The minimum selectable date. */\n    get minDate(): D | null {\n        return this.datepickerInput && this.datepickerInput.min;\n    }\n\n    /** The maximum selectable date. */\n    get maxDate(): D | null {\n        return this.datepickerInput && this.datepickerInput.max;\n    }\n\n    get dateFilter(): (date: D | null) => boolean {\n        return this.datepickerInput && this.datepickerInput.dateFilter;\n    }\n\n\n    get value(): D | null {\n        return this.selected;\n    }\n\n    /** An input indicating the type of the custom header component for the calendar, if set. */\n    @Input() calendarHeaderComponent: IComponentType<any>;\n\n    /** The view that the calendar should start in. */\n    @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n    /**\n     * Emits selected year in multiyear view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /**\n     * Emits selected month in year view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n    @Input() panelClass: string | string[];\n\n    /** Function that can be used to add custom CSS classes to dates. */\n    @Input() dateClass: (date: D) => McCalendarCellCssClasses;\n\n    /** Emits when the datepicker has been opened. */\n    @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Emits when the datepicker has been closed. */\n    @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n    /** The id for the datepicker calendar. */\n    id: string = `mc-datepicker-${datepickerUid++}`;\n\n    /** A reference to the overlay when the calendar is opened as a popup. */\n    popupRef: OverlayRef;\n\n    /** The input element this datepicker is associated with. */\n    datepickerInput: McDatepickerInput<D>;\n\n    readonly stateChanges: Observable<void> = new Subject<void>();\n\n    /** Emits when the datepicker is disabled. */\n    readonly disabledChange = new Subject<boolean>();\n\n    /** Emits new selected date when selected date changes. */\n    readonly selectedChanged = new Subject<D>();\n    private scrollStrategy: () => IScrollStrategy;\n    private _startAt: D | null;\n    private _disabled: boolean;\n    private _opened = false;\n    private validSelected: D | null = null;\n    private _color: ThemePalette;\n\n    /** A portal containing the calendar for this datepicker. */\n    private calendarPortal: ComponentPortal<McDatepickerContent<D>>;\n\n    /** Reference to the component instantiated in popup mode. */\n    private popupComponentRef: ComponentRef<McDatepickerContent<D>> | null;\n\n    /** The element that was focused before the datepicker was opened. */\n    private focusedElementBeforeOpen: HTMLElement | null = null;\n\n    /** Subscription to value changes in the associated input element. */\n    private inputSubscription = Subscription.EMPTY;\n\n    constructor(private overlay: Overlay,\n                private ngZone: NgZone,\n                private viewContainerRef: ViewContainerRef,\n                @Inject(MC_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n                @Optional() private dateAdapter: DateAdapter<D>,\n                @Optional() private dir: Directionality,\n                @Optional() @Inject(DOCUMENT) private document: any) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        this.scrollStrategy = scrollStrategy;\n    }\n\n    ngOnDestroy() {\n        this.close();\n        this.inputSubscription.unsubscribe();\n        this.disabledChange.complete();\n\n        if (this.popupRef) {\n            this.popupRef.dispose();\n            this.popupComponentRef = null;\n        }\n    }\n\n    /** Selects the given date */\n    select(date: D): void {\n        const oldValue = this.selected;\n        this.selected = date;\n        if (!this.dateAdapter.sameDate(oldValue, this.selected)) {\n            this.selectedChanged.next(date);\n        }\n    }\n\n    /** Emits the selected year in multiyear view */\n    selectYear(normalizedYear: D): void {\n        this.yearSelected.emit(normalizedYear);\n    }\n\n    /** Emits selected month in year view */\n    selectMonth(normalizedMonth: D): void {\n        this.monthSelected.emit(normalizedMonth);\n    }\n\n    /**\n     * Register an input with this datepicker.\n     * @param input The datepicker input to register with this datepicker.\n     */\n    registerInput(input: McDatepickerInput<D>): void {\n        if (this.datepickerInput) {\n            throw Error('A McDatepicker can only be associated with a single input.');\n        }\n        this.datepickerInput = input;\n        this.inputSubscription =\n            this.datepickerInput.valueChange.subscribe((value: D | null) => this.selected = value);\n    }\n\n    /** Open the calendar. */\n    open(): void {\n        if (this._opened || this.disabled) {\n            return;\n        }\n        if (!this.datepickerInput) {\n            throw Error('Attempted to open an McDatepicker with no associated input.');\n        }\n        if (this.document) {\n            this.focusedElementBeforeOpen = this.document.activeElement;\n        }\n\n        this.openAsPopup();\n\n        this._opened = true;\n        this.openedStream.emit();\n    }\n\n    /** Close the calendar. */\n    close(): void {\n        if (!this._opened) {\n            return;\n        }\n\n        if (this.popupRef && this.popupRef.hasAttached()) {\n            this.popupRef.detach();\n        }\n\n        if (this.calendarPortal && this.calendarPortal.isAttached) {\n            this.calendarPortal.detach();\n        }\n\n        const completeClose = () => {\n            // The `_opened` could've been reset already if\n            // we got two events in quick succession.\n            if (this._opened) {\n                this._opened = false;\n                this.closedStream.emit();\n                this.focusedElementBeforeOpen = null;\n\n                this.datepickerInput.elementRef.nativeElement.focus();\n            }\n        };\n\n        if (this.focusedElementBeforeOpen &&\n            typeof this.focusedElementBeforeOpen.focus === 'function') {\n            // Because IE moves focus asynchronously, we can't count on it being restored before we've\n            // marked the datepicker as closed. If the event fires out of sequence and the element that\n            // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n            // able to close the calendar at all. We work around it by making the logic, that marks\n            // the datepicker as closed, async as well.\n            this.focusedElementBeforeOpen.focus();\n            setTimeout(completeClose);\n        } else {\n            completeClose();\n        }\n    }\n\n    /** Open the calendar as a popup. */\n    private openAsPopup(): void {\n        if (!this.calendarPortal) {\n            this.calendarPortal = new ComponentPortal<McDatepickerContent<D>>(McDatepickerContent,\n                this.viewContainerRef);\n        }\n\n        if (!this.popupRef) {\n            this.createPopup();\n        }\n\n        if (!this.popupRef.hasAttached()) {\n            this.popupComponentRef = this.popupRef.attach(this.calendarPortal);\n            this.popupComponentRef.instance.datepicker = this;\n            this.setColor();\n\n            // Update the position once the calendar has rendered.\n            this.ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n                this.popupRef.updatePosition();\n            });\n        }\n    }\n\n    /** Create the popup. */\n    private createPopup(): void {\n        const overlayConfig = new OverlayConfig({\n            positionStrategy: this.createPopupPositionStrategy(),\n            hasBackdrop: true,\n            backdropClass: 'mc-overlay-transparent-backdrop',\n            direction: this.dir,\n            scrollStrategy: this.scrollStrategy(),\n            panelClass: 'mc-datepicker__popup'\n        });\n\n        this.popupRef = this.overlay.create(overlayConfig);\n        this.popupRef.overlayElement.setAttribute('role', 'dialog');\n\n        merge(\n            this.popupRef.backdropClick(),\n            this.popupRef.detachments(),\n            this.popupRef.keydownEvents().pipe(filter((event) => {\n                // Closing on alt + up is only valid when there's an input associated with the datepicker.\n                // tslint:disable-next-line:deprecation\n                return event.keyCode === ESCAPE || (this.datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n            }))\n        ).subscribe(() => this.close());\n    }\n\n    /** Create the popup PositionStrategy. */\n    private createPopupPositionStrategy(): IPositionStrategy {\n        return this.overlay.position()\n            .flexibleConnectedTo(this.datepickerInput.elementRef)\n            .withTransformOriginOn('.mc-datepicker__content')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(8)\n            .withLockedPosition()\n            .withPositions([\n                {\n                    originX: 'start',\n                    originY: 'bottom',\n                    overlayX: 'start',\n                    overlayY: 'top'\n                },\n                {\n                    originX: 'start',\n                    originY: 'top',\n                    overlayX: 'start',\n                    overlayY: 'bottom'\n                },\n                {\n                    originX: 'end',\n                    originY: 'bottom',\n                    overlayX: 'end',\n                    overlayY: 'top'\n                },\n                {\n                    originX: 'end',\n                    originY: 'top',\n                    overlayX: 'end',\n                    overlayY: 'bottom'\n                }\n            ]);\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Passes the current theme color along to the calendar overlay. */\n    private setColor(): void {\n        const color = this.color;\n        if (this.popupComponentRef) {\n            this.popupComponentRef.instance.color = color;\n        }\n    }\n}\n","import {\n    Output,\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef, Input,\n    OnDestroy, EventEmitter,\n    ViewEncapsulation, HostBinding\n} from '@angular/core';\n\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { SPACE } from '@ptsecurity/cdk/keycodes';\n\n\n@Component({\n    selector: 'mc-card',\n    templateUrl: './card.component.html',\n    styleUrls: ['./card.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['color'],\n    host: {\n        class: 'mc-card',\n        '[class.mc-card_readonly]': 'readonly',\n        '[class.mc-card_selected]': 'selected',\n        '(keydown)': 'onKeyDown($event)',\n        '(click)': 'onClick($event)'\n    }\n})\nexport class McCard implements OnDestroy {\n    get tabIndex(): number | null {\n        return this.readonly ? null : this._tabIndex;\n    }\n\n    @HostBinding('attr.tabIndex')\n    @Input()\n    set tabIndex(value: number | null) {\n        this._tabIndex = value;\n    }\n\n    @Input()\n    readonly = false;\n\n    @Input()\n    selected = false;\n\n    @Output()\n    selectedChange = new EventEmitter<boolean>();\n\n    private _tabIndex: number | null = 0;\n\n    constructor(private _elementRef: ElementRef, private _focusMonitor: FocusMonitor) {\n        this._focusMonitor.monitor(this._elementRef.nativeElement, false);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this.hostElement.focus();\n    }\n\n    onClick($event: MouseEvent) {\n        if (!this.readonly) {\n            $event.stopPropagation();\n\n            this.selectedChange.emit(!this.selected);\n        }\n    }\n\n    private get hostElement() {\n        return this._elementRef.nativeElement;\n    }\n\n    onKeyDown($event: KeyboardEvent) {\n        switch ($event.keyCode) {\n            case SPACE:\n                if (!this.readonly) {\n                    $event.preventDefault();\n                    this.selectedChange.emit(!this.selected);\n                }\n                break;\n            default:\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McCard\n} from './card.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [McCard],\n    declarations: [McCard]\n})\nexport class McCardModule {}\n","import { InjectionToken } from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type McCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MC_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<McCheckboxClickAction>('mc-checkbox-click-action');\n","import {\n    AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport {\n    CanColor, CanColorCtor,\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\nimport { MC_CHECKBOX_CLICK_ACTION, McCheckboxClickAction } from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mc-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McCheckbox),\n    multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n    /** The initial state of the component before any user interaction. */\n    Init,\n    /** The state representing the component when it's becoming checked. */\n    Checked,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate\n}\n\n/** Change event object emitted by McCheckbox. */\nexport class McCheckboxChange {\n    /** The source McCheckbox of the event. */\n    source: McCheckbox;\n    /** The new `checked` value of the checkbox. */\n    checked: boolean;\n}\n\n// Boilerplate for applying mixins to McCheckbox.\n/** @docs-private */\nexport class McCheckboxBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\nexport const _McCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof McCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisabled(McCheckboxBase)));\n\n\n/**\n * A mosaic checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A McCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n */\n@Component({\n    selector: 'mc-checkbox',\n    templateUrl: 'checkbox.html',\n    styleUrls: ['checkbox.css'],\n    exportAs: 'mcCheckbox',\n    host: {\n        class: 'mc-checkbox',\n        '[id]': 'id',\n        '[attr.id]': 'id',\n        '[class.mc-indeterminate]': 'indeterminate',\n        '[class.mc-checked]': 'checked',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-checkbox-label-before]': 'labelPosition == \"before\"'\n    },\n    providers: [MC_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCheckbox extends _McCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex {\n\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     */\n    @Input('aria-label') ariaLabel: string = '';\n\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n    private _uniqueId: string = `mc-checkbox-${++nextUniqueId}`;\n\n    /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n    @Input() id: string = this._uniqueId;\n\n    /** Returns the unique id for the visual hidden input. */\n    get inputId(): string {\n        return `${this.id || this._uniqueId}-input`;\n    }\n\n    /** Whether the checkbox is required. */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    private _required: boolean;\n\n    /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n    @Input() labelPosition: 'before' | 'after' = 'after';\n\n    /** Name value will be applied to the input element if present */\n    @Input() name: string | null = null;\n\n    /** Event emitted when the checkbox's `checked` value changes. */\n    @Output() readonly change: EventEmitter<McCheckboxChange> =\n        new EventEmitter<McCheckboxChange>();\n\n    /** Event emitted when the checkbox's `indeterminate` value changes. */\n    @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** The value attribute of the native input element */\n    @Input() value: string;\n\n    /** The native `<input type=\"checkbox\">` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * @docs-private\n     */\n    _onTouched: () => any = () => {\n    }\n\n    private _currentAnimationClass: string = '';\n\n    private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n    private _controlValueAccessorChangeFn: (value: any) => void = () => {\n    }\n\n    constructor(elementRef: ElementRef,\n                private _changeDetectorRef: ChangeDetectorRef,\n                private _focusMonitor: FocusMonitor,\n                @Attribute('tabindex') tabIndex: string,\n                @Optional() @Inject(MC_CHECKBOX_CLICK_ACTION)\n                private _clickAction: McCheckboxClickAction) {\n        super(elementRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._inputElement.nativeElement)\n            .subscribe((focusOrigin) => this._onInputFocusChange(focusOrigin));\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    }\n\n    /**\n     * Whether the checkbox is checked.\n     */\n    @Input()\n    get checked(): boolean {\n        return this._checked;\n    }\n\n    set checked(value: boolean) {\n        if (value != this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _checked: boolean = false;\n\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value != this.disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    @Input()\n    get indeterminate(): boolean {\n        return this._indeterminate;\n    }\n\n    set indeterminate(value: boolean) {\n        const changed = value != this._indeterminate;\n        this._indeterminate = value;\n\n        if (changed) {\n            if (this._indeterminate) {\n                this._transitionCheckState(TransitionCheckState.Indeterminate);\n            } else {\n                this._transitionCheckState(\n                    this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n    }\n\n    private _indeterminate: boolean = false;\n\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // This method is getting called whenever the label of the checkbox changes.\n        // Since the checkbox uses the OnPush strategy we need to notify it about the change\n        // that has been recognized by the cdkObserveContent directive.\n        this._changeDetectorRef.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any) {\n        this.checked = !!value;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this._onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n    }\n\n    _getAriaChecked(): 'true' | 'false' | 'mixed' {\n        return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n    }\n\n    private _transitionCheckState(newState: TransitionCheckState) {\n        const oldState = this._currentCheckState;\n        const element: HTMLElement = this._elementRef.nativeElement;\n\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n\n        this._currentCheckState = newState;\n\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n        }\n    }\n\n    private _emitChangeEvent() {\n        const event = new McCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    }\n\n    /** Function is called whenever the focus changes for the input element. */\n    private _onInputFocusChange(focusOrigin: FocusOrigin) {\n        if (focusOrigin) {\n            this._onTouched();\n        }\n    }\n\n    /** Toggles the `checked` state of the checkbox. */\n    toggle(): void {\n        this.checked = !this.checked;\n    }\n\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event\n     */\n    _onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && this._clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && this._clickAction !== 'check') {\n\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n\n            this.toggle();\n            this._transitionCheckState(\n                this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        } else if (!this.disabled && this._clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mc-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n\n    /** Focuses the checkbox. */\n    focus(): void {\n        this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n    }\n\n    _onInteractionEvent(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n}\n","import {\n    Directive,\n    forwardRef,\n    Provider\n} from '@angular/core';\nimport {\n    CheckboxRequiredValidator,\n    NG_VALIDATORS\n} from '@angular/forms';\n\n\nexport const MC_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McCheckboxRequiredValidator),\n    multi: true\n};\n\n/**\n * Validator for Mosaic checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mc-checkbox`.\n */\n@Directive({\n    selector: `mc-checkbox[required][formControlName],\n             mc-checkbox[required][formControl], mc-checkbox[required][ngModel]`,\n    providers: [MC_CHECKBOX_REQUIRED_VALIDATOR],\n    host: { '[attr.required]': 'required ? \"\" : null' }\n})\nexport class McCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McCheckbox } from './checkbox';\nimport { McCheckboxRequiredValidator } from './checkbox-required-validator';\n\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [McCheckbox, McCheckboxRequiredValidator],\n    declarations: [McCheckbox, McCheckboxRequiredValidator]\n})\nexport class McCheckboxModule {\n}\n","import { InjectionToken } from '@angular/core';\n\n\nexport const MC_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{ value: any }>('MC_INPUT_VALUE_ACCESSOR');\n","function sanitizeNumber(value: number): number | null {\n    return !isFinite(value) || isNaN(value)\n        ? null\n        : value;\n}\n\nfunction getPrecision(value: number): number {\n    const arr = value.toString().split('.');\n\n    return arr.length === 1\n        ? 1\n        // tslint:disable-next-line:no-magic-numbers\n        :  Math.pow(10, arr[1].length);\n}\n\nfunction add(value1: number, value2: number) {\n    const precision = Math.max(getPrecision(value1), getPrecision(value2));\n\n    const res = (value1 * precision + value2 * precision) / precision;\n\n    return sanitizeNumber(res);\n}\n\nexport const stepUp = (value: number | null,\n                       max: number,\n                       min: number,\n                       step: number\n): number | null => {\n    let res;\n\n    if (value === null) {\n        res = add(min, step);\n\n        return res === null ? null : Math.min(res, max);\n    }\n\n    res = add(value, step);\n\n    return res === null ? null : Math.max(Math.min(res, max), min);\n};\n\nexport const stepDown = (value: number | null,\n                         max: number,\n                         min: number,\n                         step: number\n): number | null => {\n    let res;\n\n    if (value === null) {\n        res = add(max, -step);\n\n        return res === null ? null : Math.max(res, min);\n    }\n\n    res = add(value, -step);\n\n    return res === null ? null : Math.min(Math.max(res, min), max);\n};\n","import {\n    Attribute,\n    Directive, DoCheck, ElementRef, Inject, Input, OnChanges,\n    OnDestroy, Optional, Self\n} from '@angular/core';\nimport {\n    FormGroupDirective,\n    NgControl,\n    NgForm, NgModel\n} from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport {\n    END, C, V, X, A, DELETE, BACKSPACE, TAB, ENTER,\n    ESCAPE, ZERO, NINE, NUMPAD_ZERO, NUMPAD_NINE, NUMPAD_MINUS, DASH,\n    FF_MINUS, LEFT_ARROW, RIGHT_ARROW, HOME, UP_ARROW, DOWN_ARROW, F1, F12\n} from '@ptsecurity/cdk/keycodes';\nimport { getSupportedInputTypes, Platform } from '@ptsecurity/cdk/platform';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl, McFormFieldNumberControl } from '@ptsecurity/mosaic/form-field';\nimport { Subject } from 'rxjs';\n\nimport { getMcInputUnsupportedTypeError } from './input-errors';\nimport { MC_INPUT_VALUE_ACCESSOR } from './input-value-accessor';\nimport { stepDown, stepUp } from './stepperUtils';\n\n\nconst MC_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\n\nexport const BIG_STEP = 10;\nexport const SMALL_STEP = 1;\n\nlet nextUniqueId = 0;\n\nexport class McInputBase {\n    constructor(public defaultErrorStateMatcher: ErrorStateMatcher,\n                public parentForm: NgForm,\n                public parentFormGroup: FormGroupDirective,\n                public ngControl: NgControl) {\n    }\n}\n\nexport const _McInputMixinBase: CanUpdateErrorStateCtor & typeof McInputBase = mixinErrorState(McInputBase);\n\n\n@Directive({\n    selector: `input[mcInput][type=\"number\"]`,\n    exportAs: 'mcNumericalInput',\n    providers: [NgModel, { provide: McFormFieldNumberControl, useExisting: McNumberInput }],\n    host: {\n        '(blur)': '_focusChanged(false)',\n        '(focus)': '_focusChanged(true)',\n        '(paste)': 'onPaste($event)',\n        '(keydown)': 'onKeyDown($event)'\n    }\n})\nexport class McNumberInput implements McFormFieldNumberControl<any> {\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    @Input()\n    bigStep: number;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    @Input()\n    step: number;\n\n    @Input()\n    min: number;\n\n    @Input()\n    max: number;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    value: any;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    private readonly _host: HTMLInputElement;\n\n    constructor(\n        private _platform: Platform ,\n        private _elementRef: ElementRef,\n        private _model: NgModel,\n        @Attribute('step') step: string,\n        @Attribute('big-step') bigStep: string,\n        @Attribute('min') min: string,\n        @Attribute('max') max: string\n    ) {\n        this.step = this.isDigit(step) ? parseFloat(step) : SMALL_STEP;\n        this.bigStep = this.isDigit(bigStep) ? parseFloat(bigStep) : BIG_STEP;\n        this.min = this.isDigit(min) ? parseFloat(min) : -Infinity;\n        this.max = this.isDigit(max) ? parseFloat(max) : Infinity;\n\n        this._host = this._elementRef.nativeElement;\n\n        const self = this;\n\n        if ('valueAsNumber' in this._host) {\n            Object.defineProperty(Object.getPrototypeOf(this._host), 'valueAsNumber', {\n                // tslint:disable-next-line:no-reserved-keywords\n                get() {\n                    const res = parseFloat(self.normalizeSplitter(this.value));\n\n                    return isNaN(res) ? null : res;\n                }\n            });\n        }\n    }\n\n    _focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent) {\n        // tslint:disable-next-line:deprecation\n        const keyCode = event.keyCode;\n\n        const isCtrlA = (e) => e.keyCode === A && (e.ctrlKey || e.metaKey);\n        const isCtrlC = (e) => e.keyCode === C && (e.ctrlKey || e.metaKey);\n        const isCtrlV = (e) => e.keyCode === V && (e.ctrlKey || e.metaKey);\n        const isCtrlX = (e) => e.keyCode === X && (e.ctrlKey || e.metaKey);\n\n        const isFKey = (e) => e.keyCode >= F1 && e.keyCode <= F12;\n\n        const isNumber = (e) => (e.keyCode >= ZERO && e.keyCode <= NINE) ||\n            (e.keyCode >= NUMPAD_ZERO && e.keyCode <= NUMPAD_NINE);\n\n        const minuses = [NUMPAD_MINUS, DASH, FF_MINUS];\n        const serviceKeys = [DELETE, BACKSPACE, TAB, ESCAPE, ENTER];\n        const arrows = [LEFT_ARROW, RIGHT_ARROW];\n        const allowedKeys =  [HOME, END].concat(arrows).concat(serviceKeys).concat(minuses);\n\n        const isIEPeriod = (e) => e.key === '.' || e.key === 'Decimal';\n        const isNotIEPeriod = (e) => e.key === '.' || e.key === ',';\n\n        // Decimal is for IE\n        const isPeriod = (e) => this._platform.EDGE || this._platform.TRIDENT\n            ? isIEPeriod(e)\n            : isNotIEPeriod(e);\n\n        if (allowedKeys.indexOf(keyCode) !== -1 ||\n            isCtrlA(event) ||\n            isCtrlC(event) ||\n            isCtrlV(event) ||\n            isCtrlX(event) ||\n            isFKey(event) ||\n            isPeriod(event)\n        ) {\n            // let it happen, don't do anything\n            return;\n        }\n        // Ensure that it is not a number and stop the keypress\n        if (event.shiftKey || !isNumber(event)) {\n            event.preventDefault();\n\n            // process steps\n            const step = event.shiftKey ? this.bigStep : this.step;\n\n            if (keyCode === UP_ARROW) {\n                this.stepUp(step);\n            }\n\n            if (keyCode === DOWN_ARROW) {\n                this.stepDown(step);\n            }\n        }\n    }\n\n    onPaste(event) {\n        let value = event.clipboardData.getData('text');\n        value = this.normalizeSplitter(value);\n\n        if (!this.isDigit(value)) {\n            event.preventDefault();\n        }\n    }\n\n    stepUp(step: number) {\n        this._elementRef.nativeElement.focus();\n        const res = stepUp(this._host.valueAsNumber, this.max, this.min, step);\n        this._host.value = res === null ? '' : res.toString();\n        this._model.update.emit(this._host.valueAsNumber);\n    }\n\n    stepDown(step: number) {\n        this._elementRef.nativeElement.focus();\n        const res = stepDown(this._host.valueAsNumber, this.max, this.min, step);\n        this._host.value = res === null ? '' : res.toString();\n        this._model.update.emit(this._host.valueAsNumber);\n    }\n\n    private normalizeSplitter(value: string): string {\n        return value ? value.replace(/,/g, '.') : value;\n    }\n\n    private isDigit(value: string): boolean {\n        return this.isFloat(value) || this.isInt(value);\n    }\n\n    private isFloat(value: string): boolean {\n        return /^-?\\d+\\.\\d+$/.test(value);\n    }\n\n    private isInt(value: string): boolean {\n        return /^-?\\d+$/.test(value);\n    }\n}\n\n@Directive({\n    selector: `input[mcInput]`,\n    exportAs: 'mcInput',\n    host: {\n        class: 'mc-input',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '(blur)': '_focusChanged(false)',\n        '(focus)': '_focusChanged(true)',\n        '(input)': '_onInput()'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McInput }]\n})\nexport class McInput extends _McInputMixinBase implements McFormFieldControl<any>, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-input';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this._uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    // tslint:disable no-reserved-keywords\n    /** Input type of the element. */\n    @Input()\n    get type(): string {\n        return this._type;\n    }\n\n    set type(value: string) {\n        this._type = value || 'text';\n        this._validateType();\n\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    // tslint:enable no-reserved-keywords\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this._inputValueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n\n    protected _uid = `mc-input-${nextUniqueId++}`;\n    protected _previousNativeValue: any;\n    protected _disabled = false;\n    protected _id: string;\n    protected _required = false;\n    protected _type = 'text';\n    protected _neverEmptyInputTypes = [\n        'date',\n        'datetime',\n        'datetime-local',\n        'month',\n        'time',\n        'week'\n    ].filter((t) => getSupportedInputTypes().has(t));\n\n    private _inputValueAccessor: { value: any };\n\n    constructor(protected _elementRef: ElementRef,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() parentForm: NgForm,\n                @Optional() parentFormGroup: FormGroupDirective,\n                defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_INPUT_VALUE_ACCESSOR) inputValueAccessor: any) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n        this._previousNativeValue = this.value;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n    }\n\n    /** Focuses the input. */\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Does some manual dirty checking on the native input `value` property. */\n    protected _dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Make sure the input is a supported type. */\n    protected _validateType() {\n        if (MC_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n            throw getMcInputUnsupportedTypeError(this._type);\n        }\n    }\n\n    /** Checks whether the input type is one of the types that are never empty. */\n    protected _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n\n    /** Checks whether the input is invalid based on the native validation. */\n    protected _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        const validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n\n        return validity && validity.badInput;\n    }\n}\n\n@Directive({\n    selector: 'input[mcInputMonospace]',\n    exportAs: 'McInputMonospace',\n    host: { class: 'mc-input_monospace' }\n})\nexport class McInputMono {\n}\n","import { Directive, forwardRef, Input, OnChanges, Provider, SimpleChanges } from '@angular/core';\nimport { AbstractControl, NG_VALIDATORS, ValidationErrors, Validator, ValidatorFn, Validators } from '@angular/forms';\n\n\nexport const MIN_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MinValidator),\n    multi: true\n};\n\n/**\n * A directive which installs the {@link MinValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `min` attribute.\n *\n * @experimental\n */\n@Directive({\n    selector: '[min][formControlName],[min][formControl],[min][ngModel]',\n    providers: [MIN_VALIDATOR],\n    host: {'[attr.min]': 'min ? min : null'}\n})\nexport class MinValidator implements Validator, OnChanges {\n\n    @Input() min: string;\n    private _validator: ValidatorFn;\n    private _onChange: () => void;\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('min' in changes) {\n            this._createValidator();\n            if (this._onChange) { this._onChange(); }\n        }\n    }\n\n    validate(c: AbstractControl): ValidationErrors | null { return this._validator(c); }\n\n    registerOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n\n    private _createValidator(): void { this._validator = Validators.min(parseInt(this.min, 10)); }\n}\n\n\nexport const MAX_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MaxValidator),\n    multi: true\n};\n\n/**\n * A directive which installs the {@link MaxValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `min` attribute.\n *\n * @experimental\n */\n@Directive({\n    selector: '[max][formControlName],[max][formControl],[max][ngModel]',\n    providers: [MAX_VALIDATOR],\n    host: {\n        '[attr.max]': 'max ? max : null'\n    }\n})\nexport class MaxValidator implements Validator,\n    OnChanges {\n\n    @Input() max: string;\n    private _validator: ValidatorFn;\n    private _onChange: () => void;\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('max' in changes) {\n            this._createValidator();\n            if (this._onChange) { this._onChange(); }\n        }\n    }\n\n    validate(c: AbstractControl): ValidationErrors | null { return this._validator(c); }\n\n    registerOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n\n    private _createValidator(): void { this._validator = Validators.max(parseInt(this.max, 10)); }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McInput, McInputMono, McNumberInput } from './input';\nimport { MaxValidator, MinValidator } from './input-number-validators';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule, FormsModule],\n    exports: [McInput, McNumberInput, McInputMono, MinValidator, MaxValidator],\n    declarations: [McInput, McNumberInput, McInputMono, MinValidator, MaxValidator ]\n})\nexport class McInputModule {\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({ providedIn: 'root' })\nexport class McDatepickerIntl {\n    /**\n     * Stream that emits whenever the labels here are changed. Use this to notify\n     * components if the labels have changed after initialization.\n     */\n    readonly changes: Subject<void> = new Subject<void>();\n\n    /** A label for the calendar popup (used by screen readers). */\n    calendarLabel: string = 'Calendar';\n\n    /** A label for the button used to open the calendar popup (used by screen readers). */\n    openCalendarLabel: string = 'Open calendar';\n\n    /** A label for the previous month button (used by screen readers). */\n    prevMonthLabel: string = 'Previous month';\n\n    /** A label for the next month button (used by screen readers). */\n    nextMonthLabel: string = 'Next month';\n\n    /** A label for the previous year button (used by screen readers). */\n    prevYearLabel: string = 'Previous year';\n\n    /** A label for the next year button (used by screen readers). */\n    nextYearLabel: string = 'Next year';\n\n    /** A label for the previous multi-year button (used by screen readers). */\n    prevMultiYearLabel: string = 'Previous 20 years';\n\n    /** A label for the next multi-year button (used by screen readers). */\n    nextMultiYearLabel: string = 'Next 20 years';\n\n    /** A label for the 'switch to month view' button (used by screen readers). */\n    switchToMonthViewLabel: string = 'Choose date';\n\n    /** A label for the 'switch to year view' button (used by screen readers). */\n    switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","// tslint:disable:no-magic-numbers\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    Output,\n    ViewEncapsulation,\n    NgZone,\n    OnChanges,\n    SimpleChanges\n} from '@angular/core';\nimport { take } from 'rxjs/operators';\n\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type McCalendarCellCssClasses = string | string[] | Set<string> | { [key: string]: any };\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class McCalendarCell {\n    constructor(\n        public value: number,\n        public displayValue: string,\n        public ariaLabel: string,\n        public enabled: boolean,\n        public cssClasses?: McCalendarCellCssClasses\n    ) {\n    }\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n    selector: '[mc-calendar-body]',\n    templateUrl: 'calendar-body.html',\n    styleUrls: ['calendar-body.css'],\n    host: {\n        class: 'mc-calendar__body',\n        role: 'grid',\n        'aria-readonly': 'true'\n    },\n    exportAs: 'mcCalendarBody',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCalendarBody implements OnChanges {\n    /** The label for the table. (e.g. \"Jan 2017\"). */\n    @Input() label: string;\n\n    /** The cells to display in the table. */\n    @Input() rows: McCalendarCell[][];\n\n    /** The value in the table that corresponds to today. */\n    @Input() todayValue: number;\n\n    /** The value in the table that is currently selected. */\n    @Input() selectedValue: number;\n\n    /** The minimum number of free cells needed to fit the label in the first row. */\n    @Input() labelMinRequiredCells: number;\n\n    /** The number of columns in the table. */\n    @Input() numCols = 7;\n\n    /** The cell number of the active cell in the table. */\n    @Input() activeCell = 0;\n\n    /**\n     * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n     * maintained even as the table resizes.\n     */\n    @Input() cellAspectRatio = 1;\n\n    /** Emits when a new value is selected. */\n    @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n    /** The number of blank cells to put at the beginning for the first row. */\n    firstRowOffset: number;\n\n    /** Padding for the individual date cells. */\n    cellPadding: string;\n\n    /** Width of an individual cell. */\n    cellWidth: string;\n\n    constructor(private elementRef: ElementRef<HTMLElement>, private ngZone: NgZone) {\n    }\n\n    cellClicked(cell: McCalendarCell): void {\n        if (cell.enabled) {\n            this.selectedValueChange.emit(cell.value);\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const columnChanges = changes.numCols;\n        // tslint:disable-next-line:no-this-assignment\n        const { rows, numCols } = this;\n\n        if (changes.rows || columnChanges) {\n            this.firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n        }\n\n        if (changes.cellAspectRatio || columnChanges || !this.cellPadding) {\n            this.cellPadding = `${this.cellAspectRatio * 50 / numCols}%`;\n        }\n\n        if (columnChanges || !this.cellWidth) {\n            this.cellWidth = `${100 / numCols}%`;\n        }\n    }\n\n    isActiveCell(rowIndex: number, colIndex: number): boolean {\n        let cellNumber = rowIndex * this.numCols + colIndex;\n\n        // Account for the fact that the first row may not have as many cells.\n        if (rowIndex) {\n            cellNumber -= this.firstRowOffset;\n        }\n\n        return cellNumber === this.activeCell;\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.ngZone.runOutsideAngular(() => {\n            this.ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n                const activeCell: HTMLElement | null =\n                    this.elementRef.nativeElement.querySelector('.mc-calendar__body_active');\n\n                if (activeCell) {\n                    activeCell.focus();\n                }\n            });\n        });\n    }\n}\n","// tslint:disable:no-magic-numbers\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Inject,\n    Input,\n    Optional,\n    Output,\n    ViewEncapsulation,\n    ViewChild\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    PAGE_DOWN,\n    PAGE_UP,\n    RIGHT_ARROW,\n    UP_ARROW,\n    SPACE\n} from '@ptsecurity/cdk/keycodes';\n\nimport { McCalendarBody, McCalendarCell, McCalendarCellCssClasses } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-month-view',\n    templateUrl: 'month-view.html',\n    exportAs: 'mcMonthView',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McMonthView<D> implements AfterContentInit {\n    /**\n     * The date to display in this month view (everything other than the month and year is ignored).\n     */\n    @Input()\n    get activeDate(): D {\n        return this._activeDate;\n    }\n\n    set activeDate(value: D) {\n        const oldActiveDate = this._activeDate;\n        const validDate =\n            this.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();\n        this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n        if (!this.hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n            this.init();\n        }\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.selectedDate = this.getDateInCurrentMonth(this._selected);\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** Function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Function that can be used to add custom CSS classes to dates. */\n    @Input() dateClass: (date: D) => McCalendarCellCssClasses;\n\n    /** Emits when a new date is selected. */\n    @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n    /** Emits when any date is selected. */\n    @Output() readonly userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Emits when any date is activated. */\n    @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** The body of calendar table */\n    @ViewChild(McCalendarBody) mcCalendarBody: McCalendarBody;\n\n    /** The label for this month (e.g. \"January 2017\"). */\n    monthLabel: string;\n\n    /** Grid of calendar cells representing the dates of the month. */\n    weeks: McCalendarCell[][];\n\n    /** The number of blank cells in the first row before the 1st of the month. */\n    firstWeekOffset: number;\n\n    /**\n     * The date of the month that the currently selected Date falls on.\n     * Null if the currently selected Date is in another month.\n     */\n    selectedDate: number | null;\n\n    /** The date of the month that today falls on. Null if today is in another month. */\n    todayDate: number | null;\n\n    /** The names of the weekdays. */\n    weekdays: { long: string; narrow: string }[];\n    private _activeDate: D;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() private dir?: Directionality\n    ) {\n\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        const firstDayOfWeek = this.dateAdapter.getFirstDayOfWeek();\n        const narrowWeekdays = this.dateAdapter.getDayOfWeekNames('narrow');\n        const longWeekdays = this.dateAdapter.getDayOfWeekNames('long');\n\n        // Rotate the labels for days of the week based on the configured first day of the week.\n        const weekdays = longWeekdays.map((long, i) => {\n            return { long, narrow: narrowWeekdays[i] };\n        });\n        this.weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n        this._activeDate = this.dateAdapter.today();\n    }\n\n    ngAfterContentInit() {\n        this.init();\n    }\n\n    /** Handles when a new date is selected. */\n    dateSelected(date: number) {\n        if (this.selectedDate !== date) {\n            const selectedYear = this.dateAdapter.getYear(this.activeDate);\n            const selectedMonth = this.dateAdapter.getMonth(this.activeDate);\n            const selectedDate = this.dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n            this.selectedChange.emit(selectedDate);\n        }\n\n        this.userSelection.emit();\n    }\n\n    /** Handles keydown events on the calendar body when calendar is in month view. */\n    handleCalendarBodyKeydown(event: KeyboardEvent): void {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n        const oldActiveDate = this._activeDate;\n        const isRtl = this.isRtl();\n\n        // tslint:disable-next-line:deprecation\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, -7);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, 7);\n                break;\n            case HOME:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate,\n                    1 - this.dateAdapter.getDate(this._activeDate));\n                break;\n            case END:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate,\n                    (this.dateAdapter.getNumDaysInMonth(this._activeDate) -\n                        this.dateAdapter.getDate(this._activeDate)));\n                break;\n            case PAGE_UP:\n                this.activeDate = event.altKey ?\n                    this.dateAdapter.addCalendarYears(this._activeDate, -1) :\n                    this.dateAdapter.addCalendarMonths(this._activeDate, -1);\n                break;\n            case PAGE_DOWN:\n                this.activeDate = event.altKey ?\n                    this.dateAdapter.addCalendarYears(this._activeDate, 1) :\n                    this.dateAdapter.addCalendarMonths(this._activeDate, 1);\n                break;\n            case ENTER:\n            case SPACE:\n                if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n                    this.dateSelected(this.dateAdapter.getDate(this._activeDate));\n                    this.userSelection.emit();\n                    // Prevent unexpected default actions such as form submission.\n                    event.preventDefault();\n                }\n\n                return;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n\n        if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n\n        this.focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n\n    /** Initializes this month view. */\n    init() {\n        this.selectedDate = this.getDateInCurrentMonth(this.selected);\n        this.todayDate = this.getDateInCurrentMonth(this.dateAdapter.today());\n        this.monthLabel =\n            this.dateAdapter.getMonthNames('short')[this.dateAdapter.getMonth(this.activeDate)];\n\n        this.monthLabel = this.monthLabel[0].toLocaleUpperCase() + this.monthLabel.substr(1);\n\n        const firstOfMonth = this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate),\n            this.dateAdapter.getMonth(this.activeDate), 1);\n        this.firstWeekOffset =\n            (DAYS_PER_WEEK + this.dateAdapter.getDayOfWeek(firstOfMonth) -\n                this.dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n        this.createWeekCells();\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.mcCalendarBody.focusActiveCell();\n    }\n\n    /** Creates McCalendarCells for the dates in this month. */\n    private createWeekCells() {\n        const daysInMonth = this.dateAdapter.getNumDaysInMonth(this.activeDate);\n        const dateNames = this.dateAdapter.getDateNames();\n\n        this.weeks = [[]];\n\n        for (let i = 0, cell = this.firstWeekOffset; i < daysInMonth; i++, cell++) {\n            if (cell === DAYS_PER_WEEK) {\n                this.weeks.push([]);\n                cell = 0;\n            }\n            const date = this.dateAdapter.createDate(\n                this.dateAdapter.getYear(this.activeDate),\n                this.dateAdapter.getMonth(this.activeDate), i + 1);\n            const enabled = this.shouldEnableDate(date);\n            const ariaLabel = this.dateAdapter.format(date, this.dateFormats.display.dateA11yLabel);\n            const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n            this.weeks[this.weeks.length - 1]\n                .push(new McCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n        }\n    }\n\n    /** Date filter for the month */\n    private shouldEnableDate(date: D): boolean {\n        return !!date &&\n            (!this.dateFilter || this.dateFilter(date)) &&\n            (!this.minDate || this.dateAdapter.compareDate(date, this.minDate) >= 0) &&\n            (!this.maxDate || this.dateAdapter.compareDate(date, this.maxDate) <= 0);\n    }\n\n    /**\n     * Gets the date in this month that the given Date falls on.\n     * Returns null if the given Date is in another month.\n     */\n    private getDateInCurrentMonth(date: D | null): number | null {\n        return date && this.hasSameMonthAndYear(date, this.activeDate) ?\n            this.dateAdapter.getDate(date) : null;\n    }\n\n    /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n    private hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n        return !!(d1 && d2 && this.dateAdapter.getMonth(d1) === this.dateAdapter.getMonth(d2) &&\n            this.dateAdapter.getYear(d1) === this.dateAdapter.getYear(d2));\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Determines whether the user has the RTL layout direction. */\n    private isRtl() {\n        return this.dir && this.dir.value === 'rtl';\n    }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ActiveDescendantKeyManager } from '@ptsecurity/cdk/a11y';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { MC_OPTION_PARENT_COMPONENT, McOptgroup, McOption } from '@ptsecurity/mosaic/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet uniqueAutocompleteIdCounter = 0;\n\nexport class McAutocompleteSelectedEvent {\n    constructor(public source: McAutocomplete, public option: McOption) {}\n}\n\n/** Default `mc-autocomplete` options that can be overridden. */\n// tslint:disable-next-line naming-convention\nexport interface McAutocompleteDefaultOptions {\n    /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n    autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mc-autocomplete`. */\nexport const MC_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<McAutocompleteDefaultOptions>('mc-autocomplete-default-options', {\n        providedIn: 'root',\n        factory: MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY\n    });\n\n// tslint:disable-next-line naming-convention\nexport function MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): McAutocompleteDefaultOptions {\n    return { autoActiveFirstOption: true };\n}\n\n@Component({\n    selector: 'mc-autocomplete',\n    exportAs: 'mcAutocomplete',\n    templateUrl: 'autocomplete.html',\n    styleUrls: ['autocomplete.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: { class: 'mc-autocomplete' },\n    providers: [\n        { provide: MC_OPTION_PARENT_COMPONENT, useExisting: McAutocomplete }\n    ]\n})\nexport class McAutocomplete implements AfterContentInit {\n    /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n    id: string = `mc-autocomplete-${uniqueAutocompleteIdCounter++}`;\n\n    /** Manages active item in option list based on key events. */\n    keyManager: ActiveDescendantKeyManager<McOption>;\n\n    /** Whether the autocomplete panel should be visible, depending on option length. */\n    showPanel: boolean = false;\n\n    @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n    @ViewChild('panel') panel: ElementRef;\n\n    @ContentChildren(McOption, { descendants: true }) options: QueryList<McOption>;\n\n    @ContentChildren(McOptgroup) optionGroups: QueryList<McOptgroup>;\n\n    /** Function that maps an option's control value to its display value in the trigger. */\n    @Input() displayWith: ((value: any) => string) | null = null;\n\n    /**\n     * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n     * match the width of its host.\n     */\n    @Input() panelWidth: string | number;\n\n    /** Event that is emitted whenever an option from the list is selected. */\n    @Output() readonly optionSelected: EventEmitter<McAutocompleteSelectedEvent> =\n        new EventEmitter<McAutocompleteSelectedEvent>();\n\n    /** Event that is emitted when the autocomplete panel is opened. */\n    @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Event that is emitted when the autocomplete panel is closed. */\n    @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n    /**\n     * Takes classes set on the host mc-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    get classList() {\n        return this._classList;\n    }\n\n    @Input('class')\n    set classList(value: string) {\n        if (value && value.length) {\n            value.split(' ')\n                .forEach((className) => this._classList[className.trim()] = true);\n\n            this.elementRef.nativeElement.className = '';\n        }\n    }\n\n    private _classList: any = {};\n\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MC_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     */\n    @Input()\n    get autoActiveFirstOption(): boolean {\n        return this._autoActiveFirstOption;\n    }\n\n    set autoActiveFirstOption(value: boolean) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n\n    private _autoActiveFirstOption: boolean;\n\n    get isOpen(): boolean {\n        return this._isOpen && this.showPanel;\n    }\n\n    set isOpen(value: boolean) {\n        this._isOpen = value;\n    }\n\n    private _isOpen: boolean = false;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        private elementRef: ElementRef<HTMLElement>,\n        @Inject(MC_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: McAutocompleteDefaultOptions\n    ) {\n        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    }\n\n    ngAfterContentInit() {\n        this.keyManager = new ActiveDescendantKeyManager<McOption>(this.options);\n        this.setVisibility();\n    }\n\n    setScrollTop(scrollTop: number): void {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n\n    getScrollTop(): number {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n\n    setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._classList['mc-autocomplete_visible'] = this.showPanel;\n        this._classList['mc-autocomplete_hidden'] = !this.showPanel;\n\n        this.changeDetectorRef.markForCheck();\n    }\n\n    emitSelectEvent(option: McOption): void {\n        const event = new McAutocompleteSelectedEvent(this, option);\n\n        this.optionSelected.emit(event);\n    }\n\n    onKeydown(event: KeyboardEvent): any {\n        this.keyManager.onKeydown(event);\n    }\n}\n\n","import { Directive, ElementRef } from '@angular/core';\n\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n    selector: '[mcAutocompleteOrigin]',\n    exportAs: 'mcAutocompleteOrigin'\n})\nexport class McAutocompleteOrigin {\n    constructor(public elementRef: ElementRef<HTMLElement>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { McOptionModule, McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McAutocompleteOrigin } from './autocomplete-origin.directive';\nimport {\n    McAutocompleteTrigger,\n    MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './autocomplete-trigger.directive';\nimport { McAutocomplete } from './autocomplete.component';\n\n\n@NgModule({\n    imports: [McOptionModule, OverlayModule, McCommonModule, CommonModule],\n    exports: [\n        McAutocomplete,\n        McOptionModule,\n        McAutocompleteTrigger,\n        McAutocompleteOrigin,\n        McCommonModule\n    ],\n    declarations: [McAutocomplete, McAutocompleteTrigger, McAutocompleteOrigin],\n    providers: [MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class McAutocompleteModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    OnDestroy,\n    ViewEncapsulation\n} from '@angular/core';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { mixinColor, mixinDisabled, CanColor, CanDisable, CanDisableCtor, CanColorCtor } from '@ptsecurity/mosaic/core';\n\n\n@Directive({\n    selector: 'button[mc-button], a[mc-button]',\n    host: {\n        '[class.mc-button]': '!isIconButton',\n        '[class.mc-icon-button]': 'isIconButton'\n    }\n})\nexport class McButtonCssStyler {\n    nativeElement: Element;\n\n    get isIconButton(): boolean {\n        return this.icons.length > 0;\n    }\n\n    private icons: HTMLElement[] = [];\n\n    constructor(elementRef: ElementRef) {\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        /**\n         * Here we had to use native selectors due to number of angular issues about ContentChildren limitations\n         * https://github.com/angular/angular/issues/16299\n         * https://github.com/angular/angular/issues/8563\n         * https://github.com/angular/angular/issues/14769\n         */\n        this.icons = Array.from(this.nativeElement.querySelectorAll('.mc-icon'));\n        this.addClassModificatorForIcons();\n    }\n\n    private addClassModificatorForIcons() {\n        const twoIcons = 2;\n\n        if (this.icons.length === 1) {\n            const iconElement = this.icons[0];\n            const COMMENT_NODE = 8;\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling && iconElement.nextSibling.nodeType !== COMMENT_NODE) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-icon-button_left');\n                }\n\n                if (iconElement.previousSibling && iconElement.previousSibling.nodeType !== COMMENT_NODE) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-icon-button_right');\n                }\n            }\n        } else if (this.icons.length === twoIcons) {\n            const firstIconElement = this.icons[0];\n            const secondIconElement = this.icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n}\n\nexport class McButtonBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {}\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McButtonMixinBase:\n    CanDisableCtor &\n    CanColorCtor &\n    typeof McButtonBase =\n        mixinColor(mixinDisabled(McButtonBase));\n\n\n@Component({\n    selector: 'button[mc-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[disabled]': 'disabled || null'\n    }\n})\nexport class McButton extends McButtonMixinBase implements OnDestroy, CanDisable, CanColor {\n    constructor(elementRef: ElementRef, private _focusMonitor: FocusMonitor) {\n        super(elementRef);\n\n        this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this.getHostElement().focus();\n    }\n\n    getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n\n\n@Component({\n    selector: 'a[mc-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[attr.tabindex]': 'disabled ? -1 : 0',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': 'haltDisabledEvents($event)'\n    }\n})\nexport class McAnchor extends McButton {\n    constructor(focusMonitor: FocusMonitor, elementRef: ElementRef) {\n        super(elementRef, focusMonitor);\n    }\n\n    haltDisabledEvents(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McButton,\n    McAnchor,\n    McButtonCssStyler\n} from './button.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McButton,\n        McAnchor,\n        McButtonCssStyler\n    ],\n    declarations: [\n        McButton,\n        McAnchor,\n        McButtonCssStyler\n    ]\n})\nexport class McButtonModule {}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    ViewEncapsulation,\n    ViewChild\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { McButton } from '@ptsecurity/mosaic/button';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/**\n * Provider Expression that allows mc-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McButtonToggleGroup),\n    multi: true\n};\n\n/** Change event object emitted by MсButtonToggle. */\nexport class McButtonToggleChange {\n    constructor(\n        /** The MсButtonToggle that emits the event. */\n        public source: McButtonToggle,\n        /** The value assigned to the MсButtonToggle. */\n        public value: any) {\n    }\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n    selector: 'mc-button-toggle-group',\n    providers: [MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n    host: {\n        role: 'group',\n        class: 'mc-button-toggle-group',\n        '[class.mc-button-toggle-vertical]': 'vertical'\n    },\n    exportAs: 'mcButtonToggleGroup'\n})\nexport class McButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n\n    /** Whether the toggle group is vertical. */\n    @Input()\n    get vertical(): boolean {\n        return this._vertical;\n    }\n\n    set vertical(value: boolean) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n\n    /** Value of the toggle group. */\n    @Input()\n    get value(): any {\n        const selected = this.selectionModel ? this.selectionModel.selected : [];\n\n        if (this.multiple) {\n            return selected.map((toggle) => toggle.value);\n        }\n\n        return selected[0] ? selected[0].value : undefined;\n    }\n\n    set value(newValue: any) {\n        this.setSelectionByValue(newValue);\n        this.valueChange.emit(this.value);\n    }\n\n    /** Selected button toggles in the group. */\n    get selected(): any {\n        const selected = this.selectionModel.selected;\n\n        return this.multiple ? selected : (selected[0] || null);\n    }\n\n    /** Whether multiple button toggles can be selected. */\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    /** Child button toggle buttons. */\n    @ContentChildren(forwardRef(() => McButtonToggle)) buttonToggles: QueryList<McButtonToggle>;\n\n    /** Whether multiple button toggle group is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        if (!this.buttonToggles) {\n            return;\n        }\n\n        this.buttonToggles.forEach((toggle) => toggle.markForCheck());\n    }\n\n    /**\n     * Event that emits whenever the value of the group changes.\n     * Used to facilitate two-way data binding.\n     * @docs-private\n     */\n    @Output() readonly valueChange = new EventEmitter<any>();\n\n    /** Event emitted when the group's value changes. */\n    @Output() readonly change: EventEmitter<McButtonToggleChange> =\n        new EventEmitter<McButtonToggleChange>();\n    private _vertical = false;\n    private _multiple = false;\n    private _disabled = false;\n    private selectionModel: SelectionModel<McButtonToggle>;\n\n    /**\n     * Reference to the raw value that the consumer tried to assign. The real\n     * value will exclude any values from this one that don't correspond to a\n     * toggle. Useful for the cases where the value is assigned before the toggles\n     * have been initialized or at the same that they're being swapped out.\n     */\n    private rawValue: any;\n\n    constructor(private _changeDetector: ChangeDetectorRef) {}\n\n    /**\n     * The method to be called in order to update ngModel.\n     * Now `ngModel` binding is not supported in multiple selection mode.\n     */\n    // tslint:disable-next-line:no-empty\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n    // tslint:disable-next-line:no-empty\n    onTouched: () => any = () => {};\n\n    ngOnInit() {\n        this.selectionModel = new SelectionModel<McButtonToggle>(this.multiple, undefined, false);\n    }\n\n    ngAfterContentInit() {\n        this.selectionModel.select(...this.buttonToggles.filter((toggle) => toggle.checked));\n        this.disabled = this._disabled;\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value Value to be set to the model.\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        const selected = this.selected;\n        const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n        const event = new McButtonToggleChange(source, this.value);\n        this.controlValueAccessorChangeFn(event.value);\n        this.change.emit(event);\n    }\n\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param toggle Toggle to be synced.\n     * @param select Whether the toggle should be selected.\n     * @param isUserInput Whether the change was a result of a user interaction.\n     */\n    syncButtonToggle(toggle: McButtonToggle, select: boolean, isUserInput = false) {\n        // Deselect the currently-selected toggle, if we're in single-selection\n        // mode and the button being toggled isn't selected at the moment.\n        if (!this.multiple && this.selected && !toggle.checked) {\n            (this.selected as McButtonToggle).checked = false;\n        }\n\n        if (select) {\n            this.selectionModel.select(toggle);\n        } else {\n            this.selectionModel.deselect(toggle);\n        }\n\n        // Only emit the change event for user input.\n        if (isUserInput) {\n            this.emitChangeEvent();\n        }\n\n        // Note: we emit this one no matter whether it was a user interaction, because\n        // it is used by Angular to sync up the two-way data binding.\n        this.valueChange.emit(this.value);\n    }\n\n    /** Checks whether a button toggle is selected. */\n    isSelected(toggle: McButtonToggle) {\n        return this.selectionModel.isSelected(toggle);\n    }\n\n    /** Determines whether a button toggle should be checked on init. */\n    isPrechecked(toggle: McButtonToggle) {\n        if (this.rawValue === undefined) {\n            return false;\n        }\n\n        if (this.multiple && Array.isArray(this.rawValue)) {\n            return this.rawValue.some((value) => toggle.value != null && value === toggle.value);\n        }\n\n        return toggle.value === this.rawValue;\n    }\n\n    /** Updates the selection state of the toggles in the group based on a value. */\n    private setSelectionByValue(value: any | any[]) {\n        this.rawValue = value;\n\n        if (!this.buttonToggles) {\n            return;\n        }\n\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw Error('Value must be an array in multiple-selection mode.');\n            }\n\n            this.clearSelection();\n            value.forEach((currentValue: any) => this.selectValue(currentValue));\n        } else {\n            this.clearSelection();\n            this.selectValue(value);\n        }\n    }\n\n    /** Clears the selected toggles. */\n    private clearSelection() {\n        this.selectionModel.clear();\n        this.buttonToggles.forEach((toggle) => toggle.checked = false);\n    }\n\n    /** Selects a value if there's a toggle that corresponds to it. */\n    private selectValue(value: any) {\n        const correspondingOption = this.buttonToggles.find((toggle) => {\n            return toggle.value != null && toggle.value === value;\n        });\n\n        if (correspondingOption) {\n            correspondingOption.checked = true;\n            this.selectionModel.select(correspondingOption);\n        }\n    }\n}\n\n/** Single button inside of a toggle group. */\n@Component({\n    selector: 'mc-button-toggle',\n    template: `\n        <button\n            mc-button\n            type=\"button\"\n            [disabled]=\"disabled\"\n            [attr.tabindex]=\"disabled ? -1 : tabIndex\"\n            (click)=\"onToggleClick()\">\n            <ng-content></ng-content>\n        </button>\n    `,\n    styleUrls: ['button-toggle.css'],\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcButtonToggle',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[class.mc-button-toggle-standalone]': '!buttonToggleGroup',\n        '[class.mc-button-toggle-checked]': 'checked',\n        class: 'mc-button-toggle',\n        // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n        // but can still receive focus from things like cdkFocusInitial.\n        '[attr.tabindex]': '-1',\n        '[attr.disabled]': 'disabled || null',\n        '(focus)': 'focus()'\n    }\n})\nexport class McButtonToggle implements OnInit, OnDestroy {\n\n    /** Whether the button is checked. */\n    @Input()\n    get checked(): boolean {\n        return this.buttonToggleGroup ? this.buttonToggleGroup.isSelected(this) : this._checked;\n    }\n\n    set checked(value: boolean) {\n        const newValue = coerceBooleanProperty(value);\n\n        if (newValue !== this._checked) {\n            this._checked = newValue;\n\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup.syncButtonToggle(this, this._checked);\n            }\n\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    // tslint:disable-next-line:no-reserved-keywords\n    type: ToggleType;\n\n    @ViewChild(McButton) mcButton: McButton;\n\n    /** McButtonToggleGroup reads this to assign its own value. */\n    @Input() value: any;\n\n    /** Tabindex for the toggle. */\n    @Input() tabIndex: number | null;\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n    }\n    set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n\n    /** Event emitted when the group value changes. */\n    @Output() readonly change: EventEmitter<McButtonToggleChange> =\n        new EventEmitter<McButtonToggleChange>();\n\n    private isSingleSelector = false;\n    private _checked = false;\n    private _disabled: boolean = false;\n\n    constructor(\n        @Optional() public buttonToggleGroup: McButtonToggleGroup,\n        private changeDetectorRef: ChangeDetectorRef,\n        private focusMonitor: FocusMonitor,\n        private element: ElementRef\n    ) {}\n\n    ngOnInit() {\n        this.isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n        this.type = this.isSingleSelector ? 'radio' : 'checkbox';\n\n        if (this.buttonToggleGroup && this.buttonToggleGroup.isPrechecked(this)) {\n            this.checked = true;\n        }\n\n        this.focusMonitor.monitor(this.element.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        const group = this.buttonToggleGroup;\n\n        this.focusMonitor.stopMonitoring(this.element.nativeElement);\n\n        // Remove the toggle from the selection once it's destroyed. Needs to happen\n        // on the next tick in order to avoid \"changed after checked\" errors.\n        if (group && group.isSelected(this)) {\n            Promise.resolve().then(() => group.syncButtonToggle(this, false));\n        }\n    }\n\n    /** Focuses the button. */\n    focus(): void {\n        this.element.nativeElement.focus();\n    }\n\n    /** Checks the button toggle due to an interaction with the underlying native button. */\n    onToggleClick() {\n        if (this.disabled) {\n            return;\n        }\n\n        const newChecked = this.isSingleSelector ? true : !this._checked;\n\n        if (newChecked !== this._checked) {\n            this._checked = newChecked;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup.syncButtonToggle(this, this._checked, true);\n                this.buttonToggleGroup.onTouched();\n            }\n        }\n        // Emit a change event when it's the single selector\n        this.change.emit(new McButtonToggleChange(this, this.value));\n    }\n\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When the group value changes, the button will not be notified.\n        // Use `markForCheck` to explicit update button toggle's status.\n        this.changeDetectorRef.markForCheck();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { McButtonModule } from '@ptsecurity/mosaic/button';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McButtonToggle, McButtonToggleGroup } from './button-toggle.component';\n\n\n@NgModule({\n    imports: [McCommonModule, McButtonModule],\n    exports: [McCommonModule, McButtonToggleGroup, McButtonToggle],\n    declarations: [McButtonToggleGroup, McButtonToggle]\n})\nexport class McButtonToggleModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","\nexport function isBoolean(val: any): val is boolean { return typeof val === 'boolean'; }\n\nexport function toBoolean(value: any): boolean {\n    return value != null && `${value}` !== 'false';\n}\n","import { NgModule, InjectionToken, Optional, Inject, isDevMode } from '@angular/core';\nimport { BidiModule } from '@ptsecurity/cdk/bidi';\n\n\n// Injection token that configures whether the Mosaic sanity checks are enabled.\nexport const MC_SANITY_CHECKS = new InjectionToken<boolean>('mc-sanity-checks', {\n    providedIn: 'root',\n    factory: MC_SANITY_CHECKS_FACTORY\n});\n\nexport function MC_SANITY_CHECKS_FACTORY(): boolean {\n    return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Mosaic\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., McTabsModule).\n */\n@NgModule({\n    imports: [ BidiModule ],\n    exports: [ BidiModule ]\n})\nexport class McCommonModule {\n    // Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n    private _hasDoneGlobalChecks = false;\n\n    // Reference to the global `document` object.\n    private _document = typeof document === 'object' && document ? document : null;\n\n    // Reference to the global 'window' object.\n    private _window = typeof window === 'object' && window ? window : null;\n\n    constructor(@Optional() @Inject(MC_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n        if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n            this._checkDoctypeIsDefined();\n            this._checkThemeIsPresent();\n            this._hasDoneGlobalChecks = true;\n        }\n    }\n\n    // Whether any sanity checks are enabled\n    private _areChecksEnabled(): boolean {\n        return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n    }\n\n    // Whether the code is running in tests.\n    private _isTestEnv() {\n        // tslint:disable-next-line\n        return this._window && (this._window['__karma__'] || this._window['jasmine']);\n    }\n\n    private _checkDoctypeIsDefined(): void {\n        if (this._document && !this._document.doctype) {\n            console.warn(\n                'Current document does not have a doctype. This may cause ' +\n                'some Mosaic components not to behave as expected.'\n            );\n        }\n    }\n\n    private _checkThemeIsPresent(): void {\n        if (this._document && typeof getComputedStyle === 'function') {\n            const testElement = this._document.createElement('div');\n\n            testElement.classList.add('mc-theme-loaded-marker');\n            this._document.body.appendChild(testElement);\n\n            const computedStyle = getComputedStyle(testElement);\n\n            // In some situations, the computed style of the test element can be null. For example in\n            // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n            // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n            if (computedStyle && computedStyle.display !== 'none') {\n                console.warn(\n                    'Could not find Mosaic core theme. Most Mosaic ' +\n                    'components may not work as expected. For more info refer ' +\n                    'to the theming guide: link there'\n                );\n            }\n\n            this._document.body.removeChild(testElement);\n        }\n    }\n}\n","import { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanDisable {\n    disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n    return class extends base {\n        get disabled() {\n            return this._disabled;\n        }\n\n        set disabled(value: any) {\n            this._disabled = coerceBooleanProperty(value);\n        }\n\n        private _disabled: boolean = false;\n\n        constructor(...args: any[]) {\n            // tslint:disable-next-line\n            super(...args);\n        }\n    };\n}\n","import { ElementRef } from '@angular/core';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanColor {\n    color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\nexport interface HasElementRef {\n    _elementRef: ElementRef;\n}\n\nexport enum ThemePalette {\n    Primary = 'primary',\n    Second = 'second',\n    Error = 'error',\n    Default = 'second',\n    Empty = ''\n}\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T,\n    defaultColor: ThemePalette = ThemePalette.Default\n): CanColorCtor & T {\n    return class extends base {\n\n        private _color: ThemePalette;\n\n        get color(): ThemePalette {\n            return this._color;\n        }\n\n        set color(value: ThemePalette) {\n            const colorPalette = value || defaultColor;\n\n            if (colorPalette !== this._color) {\n                if (this._color) {\n                    this._elementRef.nativeElement.classList.remove(`mc-${this._color}`);\n                }\n\n                if (colorPalette) {\n                    this._elementRef.nativeElement.classList.add(`mc-${colorPalette}`);\n                }\n\n                this._color = colorPalette;\n            }\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n\n            this.color = defaultColor;\n        }\n    };\n}\n\n","import { Constructor } from './constructor';\nimport { CanDisable } from './disabled';\n\n\nexport interface HasTabIndex {\n    tabIndex: number;\n}\n\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n// Mixin to augment a directive with a `tabIndex` property.\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0): HasTabIndexCtor & T {\n    return class extends base {\n        get tabIndex(): number {\n            return this.disabled ? -1 : this._tabIndex;\n        }\n\n        set tabIndex(value: number) {\n            this._tabIndex = value != null ? value : defaultTabIndex;\n        }\n\n        private _tabIndex: number = defaultTabIndex;\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n    };\n}\n","import { FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { Subject } from 'rxjs';\n\nimport { ErrorStateMatcher } from '../error/error-options';\n\nimport { Constructor } from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n\n    readonly stateChanges: Subject<void>;\n\n    errorState: boolean;\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState();\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n    parentFormGroup: FormGroupDirective;\n    parentForm: NgForm;\n    defaultErrorStateMatcher: ErrorStateMatcher;\n    ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T): CanUpdateErrorStateCtor & T {\n    return class extends base {\n        /** Whether the component is in an error state. */\n        errorState: boolean = false;\n\n        /**\n         * Stream that emits whenever the state of the input changes such that the wrapping\n         * `MatFormField` needs to run change detection.\n         */\n        readonly stateChanges = new Subject<void>();\n\n        errorStateMatcher: ErrorStateMatcher;\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n\n        updateErrorState() {\n            const oldState = this.errorState;\n            const parent = this.parentFormGroup || this.parentForm;\n            const matcher = this.errorStateMatcher || this.defaultErrorStateMatcher;\n            const control = this.ngControl ? this.ngControl.control as FormControl : null;\n            const newState = matcher.isErrorState(control, parent);\n\n            if (newState !== oldState) {\n                this.errorState = newState;\n                this.stateChanges.next();\n            }\n        }\n    };\n}\n","import {\n    AfterViewChecked,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { ENTER, SPACE } from '@ptsecurity/cdk/keycodes';\nimport { Subject } from 'rxjs';\n\nimport { McOptgroup } from './optgroup';\n\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet uniqueIdCounter = 0;\n\n/** Event object emitted by McOption when selected or deselected. */\nexport class McOptionSelectionChange {\n    constructor(public source: McOption, public isUserInput = false) {}\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\n// tslint:disable-next-line: naming-convention\nexport interface McOptionParentComponent {\n    multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MC_OPTION_PARENT_COMPONENT =\n    new InjectionToken<McOptionParentComponent>('MC_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mc-select>` element.\n */\n@Component({\n    selector: 'mc-option',\n    exportAs: 'mcOption',\n    host: {\n        '[attr.tabindex]': 'getTabIndex()',\n        class: 'mc-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-option-multiple]': 'multiple',\n        '[class.mc-active]': 'active',\n        '[class.mc-disabled]': 'disabled',\n        '[id]': 'id',\n\n        '(click)': 'selectViaInteraction()',\n        '(keydown)': 'handleKeydown($event)'\n    },\n    styleUrls: ['./option.css'],\n    templateUrl: './option.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McOption implements AfterViewChecked, OnDestroy {\n    /** The form value of the option. */\n    @Input() value: any;\n\n    /** Event emitted when the option is selected or deselected. */\n    // tslint:disable-next-line:no-output-on-prefix\n    @Output() readonly onSelectionChange = new EventEmitter<McOptionSelectionChange>();\n\n    /** Emits when the state of the option changes and any parents have to be notified. */\n    readonly stateChanges = new Subject<void>();\n\n    /**\n     * The displayed value of the option. It is necessary to show the selected option in the\n     * select's trigger.\n     */\n    get viewValue(): string {\n        // TODO(kara): Add input property alternative for node envs.\n        return (this.getHostElement().textContent || '').trim();\n    }\n\n    /** Whether the wrapping component is in multiple selection mode. */\n    get multiple() {\n        return this.parent && this.parent.multiple;\n    }\n\n    get id(): string {\n        return this._id;\n    }\n\n    private _id = `mc-option-${uniqueIdCounter++}`;\n\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    private _selected = false;\n\n    @Input()\n    get disabled() {\n        return (this.group && this.group.disabled) || this._disabled;\n    }\n\n    set disabled(value: any) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    private _disabled = false;\n\n    /**\n     * Whether or not the option is currently active and ready to be selected.\n     * An active option displays styles as if it is focused, but the\n     * focus is actually retained somewhere else. This comes in handy\n     * for components like autocomplete where focus must remain on the input.\n     */\n    get active(): boolean {\n        return this._active;\n    }\n\n    private _active = false;\n\n    private mostRecentViewValue = '';\n\n    constructor(\n        private readonly element: ElementRef,\n        private readonly changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_OPTION_PARENT_COMPONENT) private readonly parent: McOptionParentComponent,\n        @Optional() readonly group: McOptgroup\n    ) {}\n\n    ngAfterViewChecked() {\n        // Since parent components could be using the option's label to display the selected values\n        // (e.g. `mc-select`) and they don't have a way of knowing if the option's label has changed\n        // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n        // relatively cheap, however we still limit them only to selected options in order to avoid\n        // hitting the DOM too often.\n        if (this._selected) {\n            const viewValue = this.viewValue;\n\n            if (viewValue !== this.mostRecentViewValue) {\n                this.mostRecentViewValue = viewValue;\n                this.stateChanges.next();\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n    }\n\n    getHeight(): number {\n        return this.element.nativeElement.getClientRects()[0].height;\n    }\n\n    select(): void {\n        if (!this._selected) {\n            this._selected = true;\n\n            this.changeDetectorRef.markForCheck();\n            this.emitSelectionChangeEvent();\n        }\n    }\n\n    deselect(): void {\n        if (this._selected) {\n            this._selected = false;\n\n            this.changeDetectorRef.markForCheck();\n            this.emitSelectionChangeEvent();\n        }\n    }\n\n    focus(): void {\n        const element = this.getHostElement();\n\n        if (typeof element.focus === 'function') {\n            element.focus();\n        }\n    }\n\n    /**\n     * This method sets display styles on the option to make it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setActiveStyles(): void {\n        if (!this._active) {\n            this._active = true;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    /**\n     * This method removes display styles on the option that made it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setInactiveStyles(): void {\n        if (this._active) {\n            this._active = false;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel(): string {\n        return this.viewValue;\n    }\n\n    /** Ensures the option is selected when activated from the keyboard. */\n    handleKeydown(event: KeyboardEvent): void {\n        // tslint:disable-next-line\n        if (event.keyCode === ENTER || event.keyCode === SPACE) {\n            this.selectViaInteraction();\n\n            // Prevent the page from scrolling down and form submits.\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * `Selects the option while indicating the selection came from the user. Used to\n     * determine if the select's view -> model callback should be invoked.`\n     */\n    selectViaInteraction(): void {\n        if (!this.disabled) {\n            this._selected = this.multiple ? !this._selected : true;\n\n            this.changeDetectorRef.markForCheck();\n            this.emitSelectionChangeEvent(true);\n        }\n    }\n\n    getTabIndex(): string {\n        return this.disabled ? '-1' : '0';\n    }\n\n    getHostElement(): HTMLElement {\n        return this.element.nativeElement;\n    }\n\n    /** Emits the selection change event. */\n    private emitSelectionChangeEvent(isUserInput = false): void {\n        this.onSelectionChange.emit(new McOptionSelectionChange(this, isUserInput));\n    }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function countGroupLabelsBeforeOption(\n    optionIndex: number,\n    options: QueryList<McOption>,\n    optionGroups: QueryList<McOptgroup>\n): number {\n\n    if (optionGroups.length) {\n        const optionsArray = options.toArray();\n        const groups = optionGroups.toArray();\n\n        let groupCounter = 0;\n\n        for (let i = 0; i < optionIndex + 1; i++) {\n            if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n                groupCounter++;\n            }\n        }\n\n        return groupCounter;\n    }\n\n    return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function getOptionScrollPosition(\n    optionIndex: number,\n    optionHeight: number,\n    currentScrollPosition: number,\n    panelHeight: number\n): number {\n    const optionOffset = optionIndex * optionHeight;\n\n    if (optionOffset < currentScrollPosition) { return optionOffset; }\n\n    if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n        return Math.max(0, optionOffset - panelHeight + optionHeight);\n    }\n\n    return currentScrollPosition;\n}\n\n","import { ConnectionPositionPair } from '@ptsecurity/cdk/overlay';\n\n\nexport const POSITION_MAP: { [key: string]: ConnectionPositionPair } = {\n    top         : {\n        originX : 'center',\n        originY : 'top',\n        overlayX: 'center',\n        overlayY: 'bottom'\n    },\n    topCenter   : {\n        originX : 'center',\n        originY : 'top',\n        overlayX: 'center',\n        overlayY: 'bottom'\n    },\n    topLeft     : {\n        originX : 'start',\n        originY : 'top',\n        overlayX: 'start',\n        overlayY: 'bottom'\n    },\n    topRight    : {\n        originX : 'end',\n        originY : 'top',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    },\n    right       : {\n        originX : 'end',\n        originY : 'center',\n        overlayX: 'start',\n        overlayY: 'center'\n    },\n    rightTop    : {\n        originX : 'end',\n        originY : 'top',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    rightBottom : {\n        originX : 'end',\n        originY : 'bottom',\n        overlayX: 'start',\n        overlayY: 'bottom'\n    },\n    bottom      : {\n        originX : 'center',\n        originY : 'bottom',\n        overlayX: 'center',\n        overlayY: 'top'\n    },\n    bottomCenter: {\n        originX : 'center',\n        originY : 'bottom',\n        overlayX: 'center',\n        overlayY: 'top'\n    },\n    bottomLeft  : {\n        originX : 'start',\n        originY : 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    bottomRight : {\n        originX : 'end',\n        originY : 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n    },\n    left        : {\n        originX : 'start',\n        originY : 'center',\n        overlayX: 'end',\n        overlayY: 'center'\n    },\n    leftTop     : {\n        originX : 'start',\n        originY : 'top',\n        overlayX: 'end',\n        overlayY: 'top'\n    },\n    leftBottom  : {\n        originX : 'start',\n        originY : 'bottom',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    }\n};\n\nexport const DEFAULT_4_POSITIONS = objectValues([\n    POSITION_MAP.top, POSITION_MAP.right, POSITION_MAP.bottom, POSITION_MAP.left\n]);\n\nexport const EXTENDED_OVERLAY_POSITIONS = objectValues([\n    POSITION_MAP.top, POSITION_MAP.topLeft, POSITION_MAP.topRight, POSITION_MAP.right, POSITION_MAP.rightTop,\n    POSITION_MAP.rightBottom, POSITION_MAP.bottom, POSITION_MAP.bottomLeft, POSITION_MAP.bottomRight,\n    POSITION_MAP.left, POSITION_MAP.leftTop, POSITION_MAP.leftBottom\n]);\n\nexport const POSITION_TO_CSS_MAP: {[key: string]: string} = {\n    top: 'top',\n    topLeft: 'top-left',\n    topRight: 'top-right',\n    right: 'right',\n    rightTop: 'right-top',\n    rightBottom: 'right-bottom',\n    left: 'left',\n    leftTop: 'left-top',\n    leftBottom: 'left-bottom',\n    bottom: 'bottom',\n    bottomLeft: 'bottom-left',\n    bottomRight: 'bottom-right'\n};\n\nfunction arrayMap<T, S>(array: T[], iteratee: (item: T, index: number, arr: T[]) => S): S[] {\n    let index = -1;\n    const length = array == null ? 0 : array.length;\n    const result = Array(length);\n\n    while (++index < length) {\n        result[ index ] = iteratee(array[ index ], index, array);\n    }\n\n    return result;\n}\nfunction baseValues<T>(object: { [key: string]: T } | T[], props: string[]): T[] {\n    return arrayMap(props,  (key) => {\n        return object[ key ];\n    });\n}\nfunction objectValues<T>(object: { [key: string]: T } | T[]): T[] {\n    return object == null ? [] : baseValues(object, Object.keys(object));\n}\n","/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMcSelectDynamicMultipleError(): Error {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMcSelectNonArrayValueError(): Error {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMcSelectNonFunctionValueError(): Error {\n    return Error('`compareWith` must be a function.');\n}\n","export function getMcFormFieldMissingControlError(): Error {\n  return Error('mc-form-field must contain a McFormFieldControl.');\n}\n","export function getMcInputUnsupportedTypeError(inputType: string): Error {\n    return Error(`Input type \"${inputType}\" isn't supported by mcInput.`);\n}\n","/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n    return Error(\n        `McDatepicker: No provider found for ${provider}. You must import one of the existing ` +\n        `modules at your application root or provide a custom implementation or use exists ones.`);\n}\n","/**\n * Throws an exception for the case when dropdown trigger doesn't have a valid mc-dropdown instance\n * @docs-private\n */\nexport function throwMcDropdownMissingError() {\n    throw Error(`mcDropdownTriggerFor: must pass in an mc-dropdown instance.\n    Example:\n      <mc-dropdown #dropdown=\"mcDropdown\"></mc-dropdown>\n      <button [mcDropdownTriggerFor]=\"dropdown\"></button>`);\n}\n\n/**\n * Throws an exception for the case when dropdown's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMcDropdownInvalidPositionX() {\n    throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mc-dropdown xPosition=\"before\" #dropdown=\"mcDropdown\"></mc-dropdown>`);\n}\n\n/**\n * Throws an exception for the case when dropdown's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMcDropdownInvalidPositionY() {\n    throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mc-dropdown yPosition=\"above\" #dropdown=\"mcDropdown\"></mc-dropdown>`);\n}\n","import { animate, AnimationTriggerMetadata, style, transition, trigger, state } from '@angular/animations';\n\n\nexport function toggleVerticalNavbarAnimation(): AnimationTriggerMetadata {\n    return trigger('toggle', [\n        state('0', style({\n            width: '64px'\n        })),\n        state('1',  style({\n            width: '*'\n        })),\n        transition('0 <=> 1', animate('200ms cubic-bezier(0, 1, 0.5, 1)'))\n    ]);\n}\n","import { NgModule, Directive, ElementRef, QueryList } from '@angular/core';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(McLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n    selector: '[mc-line], [mcLine]',\n    host: { class: 'mc-line' }\n})\nexport class McLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class McLineSetter {\n    constructor(private _lines: QueryList<McLine>, private _element: ElementRef) {\n        this._setLineClass(this._lines.length);\n\n        this._lines.changes.subscribe(() => {\n            this._setLineClass(this._lines.length);\n        });\n    }\n\n    private _setLineClass(count: number): void {\n        this._resetClasses();\n        if (count === 2 || count === 3) {\n            this._setClass(`mc-${count}-line`, true);\n        } else if (count > 3) {\n            this._setClass(`mc-multi-line`, true);\n        }\n    }\n\n    private _resetClasses(): void {\n        this._setClass('mc-2-line', false);\n        this._setClass('mc-3-line', false);\n        this._setClass('mc-multi-line', false);\n    }\n\n    private _setClass(className: string, isAdd: boolean): void {\n        if (isAdd) {\n            this._element.nativeElement.classList.add(className);\n        } else {\n            this._element.nativeElement.classList.remove(className);\n        }\n    }\n}\n\n@NgModule({\n    imports: [],\n    exports: [McLine],\n    declarations: [McLine]\n})\nexport class McLineModule {}\n","import { Injectable } from '@angular/core';\nimport { FormGroupDirective, NgForm, FormControl } from '@angular/forms';\n\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n    }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({ providedIn: 'root' })\nexport class ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n    }\n}\n","import { Component, ViewEncapsulation, Input, ChangeDetectionStrategy } from '@angular/core';\n\n\nexport type McPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mc-primary .mc-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mc-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'mc-pseudo-checkbox',\n    styleUrls: ['pseudo-checkbox.css'],\n    templateUrl: 'pseudo-checkbox.partial.html',\n    host: {\n        class: 'mc-pseudo-checkbox',\n        '[class.mc-indeterminate]': 'state === \"indeterminate\"',\n        '[class.mc-checked]': 'state === \"checked\"',\n        '[class.mc-disabled]': 'disabled'\n    }\n})\nexport class McPseudoCheckbox {\n    @Input() state: McPseudoCheckboxState = 'unchecked';\n\n    @Input() disabled: boolean = false;\n}\n","import { NgModule } from '@angular/core';\n\nimport { McPseudoCheckbox } from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n    exports: [McPseudoCheckbox],\n    declarations: [McPseudoCheckbox]\n})\nexport class McPseudoCheckboxModule {}\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class McMeasureScrollbarService {\n\n    get scrollBarWidth(): number {\n        if (this._scrollbarWidth) {\n            return this._scrollbarWidth;\n        }\n        this.initScrollBarWidth();\n\n        return this._scrollbarWidth;\n    }\n\n    private _scrollbarWidth: number;\n    private scrollbarMeasure = {\n        position: 'absolute',\n        top: '-9999px',\n        width: '50px',\n        height: '50px',\n        overflow: 'scroll'\n    };\n\n    constructor(\n        @Inject(DOCUMENT) private document: any\n    ) {\n        this.initScrollBarWidth();\n    }\n\n    initScrollBarWidth() {\n        const scrollDiv = this.document.createElement('div');\n\n        // tslint:disable-next-line\n        for (const scrollProp in this.scrollbarMeasure) {\n            if (this.scrollbarMeasure.hasOwnProperty(scrollProp)) {\n                scrollDiv.style[scrollProp] = this.scrollbarMeasure[scrollProp];\n            }\n        }\n\n        this.document.body.appendChild(scrollDiv);\n\n        const width = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n\n        this.document.body.removeChild(scrollDiv);\n        this._scrollbarWidth = width;\n    }\n}\n","import { Component, ViewEncapsulation, Input, ChangeDetectionStrategy } from '@angular/core';\n\nimport { mixinDisabled, CanDisable, CanDisableCtor } from '../common-behaviors/index';\n\n\n// Boilerplate for applying mixins to McOptgroup.\n/** @docs-private */\nexport class McOptgroupBase {}\n\nexport const McOptgroupMixinBase: CanDisableCtor & typeof McOptgroupBase = mixinDisabled(McOptgroupBase);\n\n// Counter for unique group ids.\nlet uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mc-option`.\n */\n@Component({\n    selector: 'mc-optgroup',\n    exportAs: 'mcOptgroup',\n    templateUrl: 'optgroup.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['disabled'],\n    styleUrls: ['optgroup.css'],\n    host: {\n        class: 'mc-optgroup',\n        role: 'group',\n        '[class.mc-optgroup-disabled]': 'disabled',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-labelledby]': 'labelId'\n    }\n})\nexport class McOptgroup extends McOptgroupMixinBase implements CanDisable {\n    /** Label for the option group. */\n    @Input() label: string;\n\n    /** Unique id for the underlying label. */\n    labelId: string = `mc-optgroup-label-${uniqueOptgroupIdCounter++}`;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McPseudoCheckboxModule } from '../selection/index';\n\nimport { McOptgroup } from './optgroup';\nimport { McOption } from './option';\n\n\n@NgModule({\n    imports: [CommonModule, McPseudoCheckboxModule],\n    exports: [McOption, McOptgroup],\n    declarations: [McOption, McOptgroup]\n})\nexport class McOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","import { InjectionToken } from '@angular/core';\n\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MC_LABEL_GLOBAL_OPTIONS =\n    new InjectionToken<LabelOptions>('mc-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n    /**\n     * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n     * Default behavior is assumed to be `auto`.\n     */\n    float?: FloatLabelType;\n}\n","import {\n    animate,\n    state,\n    style,\n    transition,\n    trigger,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n\nexport const fadeAnimation: AnimationTriggerMetadata =  trigger('fadeAnimation', [\n    state('void', style({ opacity: 0 })),\n    state('true', style({ opacity: 1 })),\n    state('false', style({ opacity: 0 })),\n    transition('* => true', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => void', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)'))\n]);\n","export enum AnimationCurves {\n    StandardCurve = 'cubic-bezier(0.4,0.0,0.2,1)',\n    DecelerationCurve = 'cubic-bezier(0.0,0.0,0.2,1)',\n    AccelerationCurve = 'cubic-bezier(0.4,0.0,1,1)',\n    SharpCurve = 'cubic-bezier(0.4,0.0,0.6,1)'\n}\n","import {\n    animate,\n    AnimationTriggerMetadata,\n    state,\n    style,\n    transition,\n    trigger,\n    query,\n    animateChild,\n    group\n} from '@angular/animations';\n\n\n/**\n * The following are all the animations for the mc-select component, with each\n * const containing the metadata for one animation.\n *\n */\nexport const mcSelectAnimations: {\n    readonly transformPanel: AnimationTriggerMetadata;\n    readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0)',\n            minWidth: '100%',\n            opacity: 0\n        })),\n        transition('void => *', group([\n            query('@fadeInContent', animateChild()),\n            animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n        ])),\n        transition('* => void', [\n            animate('250ms 100ms linear', style({ opacity: 0 }))\n        ])\n    ]),\n\n    /**\n     * This animation fades in the background color and text content of the\n     * select's options. It is time delayed to occur 100ms after the overlay\n     * panel has transformed in.\n     */\n    fadeInContent: trigger('fadeInContent', [\n        state('showing', style({ opacity: 1 })),\n        transition('void => showing', [\n            style({ opacity: 0 }),\n            animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformPanel = mcSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInContent = mcSelectAnimations.fadeInContent;\n","import {\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { mixinColor, CanColor, CanColorCtor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\n@Directive({\n    selector: '[mc-icon]',\n    host: { class: 'mc mc-icon' }\n})\nexport class McIconCSSStyler {}\n\n\nexport class McIconBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McIconMixinBase: CanColorCtor & typeof McIconBase = mixinColor(McIconBase, ThemePalette.Empty);\n\n\n@Component({\n    selector: `[mc-icon]`,\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./icon.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['color']\n})\nexport class McIcon extends _McIconMixinBase implements CanColor {\n    constructor(elementRef: ElementRef, @Attribute('mc-icon') iconName: string) {\n        super(elementRef);\n\n        elementRef.nativeElement.classList.add(iconName);\n    }\n\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McIcon,\n    McIconCSSStyler\n} from './icon.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McIcon,\n        McIconCSSStyler\n    ],\n    declarations: [\n        McIcon,\n        McIconCSSStyler\n    ]\n})\nexport class McIconModule {}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-cleaner',\n    template: '<i class=\"mc-icon_light\" mc-icon=\"mc-close-M_16\" color=\"second\"></i>'\n})\nexport class McCleaner {}\n","import { NgControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\n\n/** An interface which allows a control to work inside of a `MсFormField`. */\nexport abstract class McFormFieldControl<T> {\n    /** The value of the control. */\n    value: T | null;\n\n    /**\n     * Stream that emits whenever the state of the control changes such that the parent `MсFormField`\n     * needs to run change detection.\n     */\n    readonly stateChanges: Observable<void>;\n\n    /** The element ID for this control. */\n    readonly id: string;\n\n    /** The placeholder for this control. */\n    readonly placeholder: string;\n\n    /** Gets the NgControl for this control. */\n    readonly ngControl: NgControl | null;\n\n    /** Whether the control is focused. */\n    readonly focused: boolean;\n\n    /** Whether the control is empty. */\n    readonly empty: boolean;\n\n    /** Whether the control is required. */\n    readonly required: boolean;\n\n    /** Whether the control is disabled. */\n    readonly disabled: boolean;\n\n    /** Whether the control is in an error state. */\n    readonly errorState: boolean;\n\n    /**\n     * An optional name for the control type that can be used to distinguish `mc-form-field` elements\n     * based on their control type. The form field will add a class,\n     * `mc-form-field-type-{{controlType}}` to its root element.\n     */\n    readonly controlType?: string;\n\n    /** Handles a click on the control's container. */\n    abstract onContainerClick(event: MouseEvent): void;\n\n    abstract focus(): void;\n}\n","import { Observable } from 'rxjs';\n\n\n/** An interface which allows a control to work inside of a `MсFormField`. */\nexport abstract class McFormFieldNumberControl<T> {\n    /** The value of the control. */\n    value: T | null;\n\n    /**\n     * Stream that emits whenever the state of the control changes such that the parent `MсFormField`\n     * needs to run change detection.\n     */\n    readonly stateChanges: Observable<void>;\n\n    /** the number step */\n    step: number;\n\n    /** the number big step */\n    bigStep: number;\n\n    /** Whether the control is focused. */\n    readonly focused: boolean;\n\n    /** Handles step up and down */\n    abstract stepUp(step: number): void;\n\n    abstract stepDown(step: number): void;\n}\n","import { Directive, Input } from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n@Directive({\n    selector: 'mc-hint',\n    host: {\n        class: 'mc-hint',\n        '[attr.id]': 'id'\n    }\n})\nexport class McHint {\n    @Input() id: string = `mc-hint-${nextUniqueId++}`;\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcPrefix]'\n})\nexport class McPrefix {\n}\n","import { Component, EventEmitter, Output } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-stepper',\n    template: `\n        <i class=\"mc mc-icon mc-icon_light mc-second mc-stepper-step-up mc-angle-down-L_16\"\n           (mousedown)=\"onStepUp($event)\">\n        </i>\n        <i class=\"mc mc-icon mc-icon_light mc-second mc-stepper-step-down mc-angle-down-L_16\"\n           (mousedown)=\"onStepDown($event)\">\n        </i>\n    `\n})\nexport class McStepper {\n    @Output()\n    readonly stepUp: EventEmitter<void> = new EventEmitter<void>();\n    @Output()\n    readonly stepDown: EventEmitter<void> = new EventEmitter<void>();\n\n    onStepUp($event: MouseEvent) {\n        this.stepUp.emit();\n        $event.preventDefault();\n    }\n\n    onStepDown($event: MouseEvent) {\n        this.stepDown.emit();\n        $event.preventDefault();\n    }\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcSuffix]'\n})\nexport class McSuffix {\n}\n","import {\n    AfterContentChecked,\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren, Directive,\n    ElementRef,\n    QueryList, ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { CanColor, CanColorCtor, mixinColor } from '@ptsecurity/mosaic/core';\nimport { EMPTY, merge } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n\n\nimport { McCleaner } from './cleaner';\nimport { McFormFieldControl } from './form-field-control';\nimport { getMcFormFieldMissingControlError } from './form-field-errors';\nimport { McFormFieldNumberControl } from './form-field-number-control';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McStepper } from './stepper';\nimport { McSuffix } from './suffix';\n\n\nlet nextUniqueId = 0;\n\nexport class McFormFieldBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McFormFieldMixinBase: CanColorCtor & typeof McFormFieldBase = mixinColor(McFormFieldBase);\n\n@Component({\n    selector: 'mc-form-field',\n    exportAs: 'mcFormField',\n    templateUrl: 'form-field.html',\n    // McInput is a directive and can't have styles, so we need to include its styles here.\n    // The McInput styles are fairly minimal so it shouldn't be a big deal for people who\n    // aren't using McInput.\n    styleUrls: [\n        'form-field.css',\n        '../input/input.css',\n        '../textarea/textarea.css'\n    ],\n    host: {\n        class: 'mc-form-field',\n        '[class.mc-form-field_invalid]': '_control.errorState',\n        '[class.mc-disabled]': '_control.disabled',\n        '[class.mc-form-field_has-prefix]': 'hasPrefix',\n        '[class.mc-form-field_has-suffix]': 'hasSuffix',\n        '[class.mc-form-field_has-cleaner]': 'canShowCleaner',\n        '[class.mc-form-field_has-stepper]': 'canShowStepper',\n        '[class.mc-focused]': '_control.focused',\n        '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n        '[class.ng-touched]': '_shouldForward(\"touched\")',\n        '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n        '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n        '[class.ng-valid]': '_shouldForward(\"valid\")',\n        '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n        '[class.ng-pending]': '_shouldForward(\"pending\")',\n        '(keydown)': 'onKeyDown($event)',\n        '(mouseenter)': 'onHoverChanged(true)',\n        '(mouseleave)': 'onHoverChanged(false)'\n    },\n    inputs: ['color'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class McFormField extends _McFormFieldMixinBase implements\n    AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n\n    @ContentChild(McFormFieldControl) _control: McFormFieldControl<any>;\n    @ContentChild(McFormFieldNumberControl) _numberControl: McFormFieldNumberControl<any>;\n    @ContentChild(McStepper) _stepper: McStepper;\n\n    @ContentChildren(McHint) _hint: QueryList<McHint>;\n    @ContentChildren(McSuffix) _suffix: QueryList<McSuffix>;\n    @ContentChildren(McPrefix) _prefix: QueryList<McPrefix>;\n    @ContentChildren(McCleaner) _cleaner: QueryList<McCleaner>;\n\n    @ViewChild('connectionContainer') connectionContainerRef: ElementRef;\n\n    // Unique id for the internal form field label.\n    _labelId = `mc-form-field-label-${nextUniqueId++}`;\n\n    hovered: boolean = false;\n\n    constructor(public _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef) {\n        super(_elementRef);\n    }\n\n    ngAfterContentInit() {\n        this._validateControlChild();\n\n        if (this._control.controlType) {\n            this._elementRef.nativeElement.classList\n                .add(`mc-form-field-type-${this._control.controlType}`);\n\n            if (this._numberControl && this.hasStepper) {\n                this._stepper.stepUp.subscribe(this.onStepUp.bind(this));\n                this._stepper.stepDown.subscribe(this.onStepDown.bind(this));\n            }\n        }\n\n        // Subscribe to changes in the child control state in order to update the form field UI.\n        this._control.stateChanges.pipe(startWith())\n            .subscribe(() => {\n                this._changeDetectorRef.markForCheck();\n            });\n\n        if (this._numberControl) {\n            this._numberControl.stateChanges.pipe(startWith())\n                .subscribe(() => {\n                    this._changeDetectorRef.markForCheck();\n                });\n        }\n\n        // Run change detection if the value changes.\n        const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n\n        merge(valueChanges)\n            .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    ngAfterContentChecked() {\n        this._validateControlChild();\n    }\n\n    ngAfterViewInit() {\n        // Avoid animations on load.\n        this._changeDetectorRef.detectChanges();\n    }\n\n    clearValue($event) {\n        $event.stopPropagation();\n\n        if (this._control && this._control.ngControl) {\n            this._control.ngControl.reset();\n            this._control.focus();\n        }\n    }\n\n    onContainerClick($event) {\n        if (this._control.onContainerClick) {\n            this._control.onContainerClick($event);\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n        // tslint:disable-next-line:deprecation\n        if (event.keyCode === ESCAPE && this._control.focused && this.hasCleaner) {\n            if (this._control && this._control.ngControl) {\n                this._control.ngControl.reset();\n            }\n\n            event.preventDefault();\n        }\n    }\n\n    onHoverChanged(isHovered: boolean) {\n        if (isHovered !== this.hovered) {\n            this.hovered  = isHovered;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    onStepUp() {\n        if (this._numberControl) {\n            this._numberControl.stepUp(this._numberControl.step);\n        }\n    }\n\n    onStepDown() {\n        if (this._numberControl) {\n            this._numberControl.stepDown(this._numberControl.step);\n        }\n    }\n\n    /**\n     * Gets an ElementRef for the element that a overlay attached to the form-field should be\n     * positioned relative to.\n     */\n    getConnectedOverlayOrigin(): ElementRef {\n        return this.connectionContainerRef || this._elementRef;\n    }\n\n        /** Determines whether a class from the NgControl should be forwarded to the host element. */\n    _shouldForward(prop: keyof NgControl): boolean {\n        const ngControl = this._control ? this._control.ngControl : null;\n\n        return ngControl && ngControl[prop];\n    }\n\n    /** Throws an error if the form field's control is missing. */\n    protected _validateControlChild() {\n        if (!this._control) {\n            throw getMcFormFieldMissingControlError();\n        }\n    }\n\n    get hasHint(): boolean {\n        return this._hint && this._hint.length > 0;\n    }\n\n    get hasSuffix(): boolean {\n        return this._suffix && this._suffix.length > 0;\n    }\n\n    get hasPrefix(): boolean {\n        return this._prefix && this._prefix.length > 0;\n    }\n\n    get hasCleaner(): boolean {\n        return this._cleaner && this._cleaner.length > 0;\n    }\n\n    get hasStepper(): boolean {\n        return !!this._stepper;\n    }\n\n    get canShowCleaner(): boolean {\n        return this.hasCleaner &&\n            this._control &&\n            this._control.ngControl\n                ? this._control.ngControl.value && !this._control.disabled\n                : false;\n    }\n\n\n    get disabled(): boolean {\n        return this._control && this._control.disabled;\n    }\n\n    get canShowStepper(): boolean {\n        return this._numberControl &&\n            !this.disabled &&\n            (\n                this._numberControl.focused ||\n                this.hovered\n            );\n    }\n}\n\n@Directive({\n    selector: 'mc-form-field[mcFormFieldWithoutBorders]',\n    exportAs: 'mcFormFieldWithoutBorders',\n    host: { class: 'mc-form-field_without-borders' }\n})\nexport class McFormFieldWithoutBorders {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McCleaner } from './cleaner';\nimport { McFormField, McFormFieldWithoutBorders } from './form-field';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McStepper } from './stepper';\nimport { McSuffix } from './suffix';\n\n\n@NgModule({\n    declarations: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner,\n        McStepper\n    ],\n    imports: [CommonModule, McIconModule],\n    exports: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner,\n        McStepper\n    ]\n})\nexport class McFormFieldModule {\n}\n"],"names":["inputs","host","[attr.disabled]","[attr.tabindex]","type","ElementRef","FocusMonitor","McDropdownTrigger","decorators","Optional","Self","tabIndex","Input","McVerticalNavbarItem","_McVerticalNavbarMixinBase","McVerticalNavbarHeader","Directive","args","selector","class","McVerticalNavbarTitle","McVerticalNavbar","cd","this","expanded","prototype","toggle","markForCheck","Component","changeDetection","ChangeDetectionStrategy","OnPush","template","styles","encapsulation","ViewEncapsulation","None","animations","toggleVerticalNavbarAnimation","ChangeDetectorRef","COMPONENTS","McVerticalNavbarItemIcon","McVerticalNavbarItemBadge","McVerticalNavbarModule","NgModule","imports","CommonModule","A11yModule","PlatformModule","McIconModule","exports","declarations","VERSION","Version","SELECT_PANEL_PADDING_X","(click)","McSidepanelRef","McSidepanelService","sidepanelResult","mcSidepanelClose","McSidepanelClose","McSidepanelHeader","closeable","McSidepanelBody","McSidepanelFooter","McSidepanelActions","McSidepanelModule","OverlayModule","PortalModule","McCommonModule","providers","McSidepanelContainerComponent","entryComponents","McSplitterComponent","elementRef","ngZone","renderer","areas","_disabled","_gutterSize","isDragging","areaPositionDivider","listeners","Object","defineProperty","_direction","direction","disabled","coerceBooleanProperty","gutterSize","size","coerceNumberProperty","addArea","area","index","length","order","getSize","setOrder","push","initialSize","ngOnInit","setStyle","isVertical","onMouseDown","event","leftAreaIndex","rightAreaIndex","_this","leftArea","rightArea","startPoint","x","screenX","y","screenY","forEach","item","disableFlex","setSize","runOutsideAngular","listen","onMouseUp","e","onMouseMove","removeArea","indexToRemove","some","splice","endPoint","offset","newLeftAreaSize","newRightAreaSize","minLeftAreaSize","getMinSize","minRightAreaSize","rightAreaOffset","unsubscribe","pop","property","value","nativeElement","preserveWhitespaces","NgZone","Renderer2","McGutterDirective","_order","_size","getCursor","getState","coerceCssPixelValue","setAttr","state","Error","attribute","setAttribute","McSplitterAreaDirective","splitter","removeStyle","ngOnDestroy","sz","getSizeProperty","getOffsetSizeProperty","getComputedStyle","parseFloat","getMinSizeProperty","style","McSplitterModule","nextUniqueId","McToggleBase","_elementRef","_McToggleMixinBase","mixinTabIndex","mixinColor","mixinDisabled","ThemePalette","Primary","McToggleChange","McToggleComponent","_super","_focusMonitor","_changeDetectorRef","call","labelPosition","ariaLabel","ariaLabelledby","_uniqueId","id","name","_checked","change","EventEmitter","_onTouchedCallback","_onChangeCallback","_","parseInt","monitor","tslib_1.__extends","stopMonitoring","focus","focusVia","_inputElement","_getAriaChecked","checked","_onInteractionEvent","stopPropagation","_onLabelTextChange","_onInputClick","_updateModelValue","_emitChangeEvent","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","source","emit","exportAs","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","[id]","[attr.id]","[class.mc-disabled]","[class.mc-toggle_off]","trigger","left","transition","animate","String","Attribute","ViewChild","Output","McToggleModule","McTooltipComponent","cdr","prefix","positions","DEFAULT_4_POSITIONS","slice","classMap","mcVisibleChange","mcMouseEnterDelay","mcMouseLeaveDelay","_mcTrigger","_mcPlacement","_mcVisible","BehaviorSubject","onHideSubject","Subject","closeOnInteraction","availablePositions","POSITION_MAP","$visible","asObservable","_mcTitle","isTitleString","TemplateRef","unshift","mcPlacement","visible","next","show","hideTid","clearTimeout","isContentEmpty","mcTrigger","showTid","setTimeout","mcVisible","hide","setClassMap","mcTitle","afterHidden","handleBodyInteraction","outputs","fadeAnimation","(body:click)","MC_TOOLTIP_SCROLL_STRATEGY","InjectionToken","MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","Overlay","useFactory","mcTooltipScrollStrategyFactory","McTooltip","overlay","scrollDispatcher","hostView","scrollStrategy","isTooltipOpen","isDynamicTooltip","parentDisabled","$unsubscribe","manualListeners","Map","destroyed","title","updateCompValue","_mcMouseEnterDelay","_mcMouseLeaveDelay","_mcTooltipClass","tooltip","externalValue","createOverlay","overlayRef","strategy","position","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withPositions","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","pipe","takeUntil","subscribe","onPositionChange","scrollableViewProperties","isOverlayClipped","run","create","positionStrategy","panelClass","updatePosition","detachments","detach","hasAttached","$event","updatedPlacement","keys","key","connectionPair","originX","originY","overlayX","overlayY","handlePositioningUpdate","pos","overlayElement","clientHeight","element","currentContainer","top","split","initElementRefListeners","dispose","listener","removeEventListener","clear","complete","handleKeydown","keyCode","ESCAPE","handleTouchend","set","addEventListener","portal","ComponentPortal","attach","instance","distinctUntilChanged","data","getConfig","origin","getOrigin","getOverlayPosition","tslib_1.__assign","main","fallback","originPosition","isLtr","getMcTooltipInvalidPositionError","_a","invertPosition","overlayPosition","newX","newY","(keydown)","(touchend)","ScrollDispatcher","ViewContainerRef","undefined","Inject","Directionality","setTitle","mcTooltipClass","isOpen","HostBinding","isParentDisabled","McToolTipModule","McVerticalNavbarItemBase","focusMonitor","[class.mc-select-invalid]","[class.mc-select-required]","(focus)","(blur)","(window:resize)","mcSelectAnimations","transformPanel","fadeInContent","McFormFieldControl","McTreeSelect","CdkTree","ViewportRuler","ErrorStateMatcher","NgForm","FormGroupDirective","McFormField","NgControl","MC_SELECT_SCROLL_STRATEGY","panel","overlayDir","CdkConnectedOverlay","tags","ViewChildren","McTag","customTrigger","ContentChild","McTreeSelectTrigger","tree","McTreeSelection","openedChange","openedStream","closedStream","selectionChange","valueChange","errorStateMatcher","sortComparator","placeholder","required","multiple","autoSelect","compareWith","McTreeSelectMixinBase","McTreeSelectModule","CdkTreeModule","McTreeModule","McTagsModule","McPseudoCheckboxModule","MC_SELECT_SCROLL_STRATEGY_PROVIDER","MC_TEXTAREA_VALUE_ACCESSOR","McTextareaBase","defaultErrorStateMatcher","parentForm","parentFormGroup","ngControl","McTextareaMixinBase","mixinErrorState","McTextarea","inputValueAccessor","canGrow","focused","stateChanges","controlType","uid","_required","lineHeight","freeRowsHeight","minHeight","valueAccessor","previousNativeValue","growObserver","fromEvent","growSubscription","grow","bind","_id","paddingTop","paddingBottom","ngOnChanges","ngDoCheck","updateErrorState","dirtyCheckNativeValue","textarea","outerHeight","window","diff","height","Math","max","scrollHeight","focusChanged","isFocused","isBadInput","onContainerClick","newValue","validity","badInput","getGrowHeight","toString","[class.mc-textarea-resizable]","[attr.placeholder]","[attr.aria-invalid]","[disabled]","[required]","McTextareaModule","FormsModule","hours","minutes","seconds","HHmmss","HHmm","TIMEFORMAT_PLACEHOLDERS","TimeFormats","DEFAULT_TIME_FORMAT","HOURS_MINUTES_SECONDS_REGEXP","RegExp","HOURS_MINUTES_REGEXP","HOURS_ONLY_REGEXP","uniqueComponentIdSuffix","McTimepickerBase","McTimepickerMixinBase","McTimepicker","dateAdapter","_minTime","_maxTime","onChange","noop","control","myValidators","parseValidator","minTimeValidator","maxTimeValidator","validators","validator","concat","setValidators","updateValueAndValidity","applyInputChanges","_timeFormat","formatValue","map","timeFormatKey","indexOf","minValue","minDateTime","getDateFromTimeString","maxValue","maxDateTime","onTouched","onBlur","onPaste","preventDefault","clipboardUserInput","clipboardData","getData","onInput","initialCursorStart","selectionStart","initialCursorEnd","selectionEnd","isAutocompleteTriggered","getParsedTimeParts","hoursOnly","hoursAndMinutes","hoursAndMinutesAndSeconds","doTimestringReformat","errors","createSelectionOfTimeComponentInInput","setProperty","getTimeStringFromDate","timeFormat","onKeyDown","getKeyCode","upDownTimeByArrowKeys","switchSelectionBetweenTimeparts","applyParams","changedTime","timeToApply","currentDateTimeInput","result","cursorPos","modifiedTimePart","getTimeEditMetrics","incrementTime","decrementTime","getCursorPositionOfPrevTimePartStart","getCursorPositionOfNextTimePartStart","code","newEditParams","cursorStartPosition","cursorEndPosition","dateVal","whatToIncrement","TimeParts","getTimeDigitsFromDate","getDateFromTimeDigits","whatToDecrement","timeString","timeDevider","nextDividerPos","cursorPosition","minutesIndex","hoursIndex","secondsIndex","tempVal","getNumberWithLeadingZero","getHours","getMinutes","getSeconds","momentWrappedTime","parse","convertedTimeString","format","match","trim","Number","resultDate","Date","isNaN","getTime","digit","mcTimepickerParse","text","isTimeLowerThenMin","mcTimepickerLowerThenMintime","isTimeGreaterThenMax","mcTimepickerHigherThenMaxtime","timeToCompare","[attr.time-format]","[attr.min-time]","[attr.max-time]","[attr.value]","(input)","(paste)","MC_INPUT_VALUE_ACCESSOR","DateAdapter","minTime","maxTime","McTimepickerModule","MC_SIDEPANEL_DATA","Right","Left","Top","Bottom","McSidepanelConfig","McSidepanelPosition","hasBackdrop","requiredBackdrop","disableClose","overlayPanelClass","Void","Visible","Hidden","mcSidepanelTransformAnimation","right","in","out","bottom","mcSidepanelAnimations","sidepanelState","transform","params","transformIn","transformOut","AnimationCurves","AccelerationCurve","DecelerationCurve","MC_SIDEPANEL_WITH_INDENT","MC_SIDEPANEL_WITH_SHADOW","changeDetectorRef","sidepanelConfig","withIndent","withShadow","animationState","McSidepanelAnimationState","animationStateChanged","attachComponentPortal","validatePortalAttached","setAnimation","setPanelClass","portalOutlet","attachTemplatePortal","enter","detectChanges","exit","onAnimation","animationTransform","classList","add","tabindex","role","aria-modal","[@state]","(@state.start)","(@state.done)","Boolean","CdkPortalOutlet","BasePortalOutlet","uniqueId","containerInstance","config","afterClosed$","afterOpened$","filter","phaseName","toState","take","merge","backdropClick","keydownEvents","close","closed","detachBackdrop","afterClosed","afterOpened","MC_SIDEPANEL_DEFAULT_OPTIONS","injector","defaultOptions","parentSidepanelService","openedSidepanelsAtThisLevel","openedSidepanels","closeSidepanels","open","componentOrTemplateRef","fullConfig","getSidepanelById","container","attachContainer","ref","TemplatePortal","$implicit","sidepanelRef","createInjector","contentRef","removeOpenSidepanel","closeAll","find","sidepanel","openedSidepanelsWithSamePosition","getOpenedSidepanelsWithSamePosition","PortalInjector","WeakMap","containerPortal","sidepanelContainer","injectionTokens","overlayConfig","OverlayConfig","backdropClass","getBackdropClass","maxWidth","scrollStrategies","block","global","sidepanels","reverse","hasOpenedSidepanelWithBackdrop","Injectable","Injector","SkipSelf","sidepanelService","getClosestSidepanel","changes","proxiedChange","currentValue","option","_compareWith","error","isDevMode","console","warn","McSelect","selectValue","correspondingOption","getCorrespondOption","selectionModel","select","initKeyManager","keyManager","ActiveDescendantKeyManager","options","withTypeAhead","search","withVerticalOrientation","withHorizontalOrientation","isRtl","tabOut","destroy","_panelOpen","scrollActiveOptionIntoView","activeItem","selectViaInteraction","resetOptions","changedOrDestroyed","optionSelectionChanges","onSelect","isUserInput","isSearchChanged","Promise","resolve","then","setFirstItemActive","apply","setOptionIds","wasSelected","isSelected","_multiple","selected","deselect","setActiveItem","sortValues","propagateChanges","options_1","toArray","sort","a","b","fallbackValue","valueToEmit","_value","McSelectChange","optionIds","join","highlightCorrectOption","empty","activeOptionIndex","activeItemIndex","labelCount","countGroupLabelsBeforeOption","optionGroups","optionsContainer","scrollTop","getOptionScrollPosition","getItemHeight","getOptionIndex","reduce","current","calculateOverlayPosition","itemHeight","items","getItemCount","panelHeight","min","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","calculateOverlayScroll","offsetY","calculateOverlayOffsetY","checkOverlayWithinViewport","calculateOverlayOffsetX","offsetX","overlayRect","getBoundingClientRect","viewportSize","_viewportRuler","getViewportSize","first","group","leftOverflow","rightOverflow","width","round","topSpaceAvailable","triggerRect","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","adjustPanelUp","adjustPanelDown","transformOrigin","getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","optionHeightAdjustment","MC_OPTION_PARENT_COMPONENT","McSelectTrigger","ContentChildren","McOption","descendants","McOptgroup","McSelectSearch","McSelectMixinBase","McSelectModule","McOptionModule","McFormFieldModule","McTreeSelectChange","McTreeSelectBase","viewportRuler","dir","parentFormField","scrollStrategyFactory","hiddenItems","oneMoreText","triggerFontSize","panelDoneAnimating","panelDoneAnimatingStream","o","defer","onSelectionChange","onStable","switchMap","_autoSelect","_focused","o1","o2","_placeholder","getMcSelectDynamicMultipleError","getMcSelectNonFunctionValueError","initializeSelection","panelOpen","ngAfterContentInit","SelectionModel","changed","added","removed","ngAfterViewInit","calculateHiddenItems","startWith","updateSelectedOptions","fontSize","setSelectionByValue","viewValue","selectedOptions","isEmpty","handleOpenKeydown","handleClosedKeydown","onFadeInDone","onFocus","onAttached","positionChange","updateScrollSize","getPanelTheme","color","selectedIndex","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","onRemoveSelectedOption","selectedOption","visibleItems","totalItemsWidth","getTotalItemsWidthInMatcher","totalVisibleItemsWidth","tag","offsetTop","offsetHeight","itemsCounter","querySelector","matcherList","itemsCounterShowed","matcherListWidth","matcherWidth","triggerClone","cloneNode","remove","appendChild","querySelectorAll","isArrowKey","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","ENTER","SPACE","altKey","onKeydown","originalOnKeyDown","HOME","END","setLastItemActive","PAGE_UP","setPreviousPageItemActive","PAGE_DOWN","setNextPageItemActive","A","ctrlKey","hasDeselectedOptions_1","previouslyFocusedIndex","shiftKey","Array","isArray","getMcSelectNonArrayValueError","addClassModificatorForIcons","icons","contentChildren","iconElement","previousElementSibling","nextElementSibling","nextSibling","previousSibling","firstIconElement","secondIconElement","addHostClassName","_i","TAG_ATTRIBUTE_NAMES_1","TAG_ATTRIBUTE_NAMES","attr","hasAttribute","tagName","toLowerCase","_selected","dispatchSelectionChange","toggleSelected","hasFocus","removable","handleClick","DELETE","BACKSPACE","selectable","blur","_ngZone","[class.mc-tag-selected]","[class.mc-tag-with-avatar]","[class.mc-tag-with-trailing-icon]","[class.mc-tag-disabled]","McIcon","avatar","McTagAvatar","trailingIcon","McTagTrailingIcon","removeIcon","McTagRemove","_McTagMixinBase","parentTag","McTagListBase","_McTagListMixinBase","McTagListChange","McTagList","userTabIndex","tagChanges","orientation","_tabIndex","_selectable","lastDestroyedTagIndex","tagInput","hasFocusedTag","syncTagsDisabledState","tagListSelectable","FocusKeyManager","resetTags","updateTabIndex","updateFocusForDestroyedTags","dropSubscriptions","registerInput","inputElement","originatesFromTag","focusInput","keydown","target","isInputEmpty","contains","clearSelection","correspondingTag","markAsTouched","newTagIndex","isValidIndex","nodeName","skip","listenToTagsFocus","listenToTagsSelection","listenToTagsRemoved","tagFocusSubscription","tagBlurSubscription","tagSelectionSubscription","tagRemoveSubscription","tagSelectionChanges","tagFocusChanges","tagIndex","updateActiveItem","tagBlurChanges","tagRemoveChanges","currentElement","parentElement","[class.mc-invalid]","[class.mc-required]","McTagInput","separatorKeyCodes","tagEnd","_addOnBlur","_tagList","emittagEnd","addOnBlur","isSeparatorKey","input","hasModifierKey","separators","has","MC_TAGS_DEFAULT_OPTIONS","tagList","ɵ0","useValue","McSelectBase","searchChangesSubscription","Subscription","reset","McInput","_renderer","_dir","_parentFormField","_scrollStrategyFactory","previousSelectionModelSelected","resetSearch","onRemoveMatcherItem","getHeightOfOptionsContainer","getClientRects","withScrollSize","floor","getHeight","manager","McTabContent","McTabLabel","CdkPortal","ctorParameters","McTabBase","mcTabMixinBase","McTab","viewContainerRef","textLabel","isActive","contentPortal","hasOwnProperty","explicitContent","implicitContent","templateLabel","read","mcTabsAnimations","translateTab","McTabBody","onCentering","beforeCentering","afterLeavingCenter","onCentered","animationDuration","dirChangeSubscription","EMPTY","computePositionAnimationState","positionIndex","bodyPosition","computePositionFromOrigin","onTranslateTabStarted","isCentering","isCenterPosition","onTranslateTabComplete","fromState","getLayoutDirection","portalHost","PortalHostDirective","content","McTabBodyPortal","componentFactoryResolver","centeringSub","leavingSub","ComponentFactoryResolver","McTabLabelWrapperBase","mcTabLabelWrapperMixinBase","McTabLabelWrapper","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[attr.aria-disabled]","McTabHeaderBase","McTabHeader","showPaginationControls","disableScrollAfter","disableScrollBefore","selectFocusedIndex","indexFocused","_scrollDistance","selectedIndexChanged","_selectedIndex","coercedValue","focusIndex","v","getMaxScrollDistance","scrollDistanceChanged","checkScrollingControls","ngAfterContentChecked","tabLabelCount","labelWrappers","updatePagination","scrollToLabel","updateTabScrollPosition","dirChange","observableOf","resize","realign","withWrap","requestAnimationFrame","newFocusIndex","setTabFocus","onContentChanges","textContent","currentTextContent","zoneCallback","checkPaginationEnabled","tab","containerEl","tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","tabList","scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","[class.mc-tab-header__pagination-controls_enabled]","[class.mc-tab-header_rtl]","McLightTabsCssStyler","McAlignTabsCenterCssStyler","McAlignTabsEndCssStyler","McStretchTabsCssStyler","nextId","McTabChangeEvent","MC_TABS_CONFIG","McTabGroupBase","mcTabGroupMixinBase","McTabGroup","lightTabs","defaultConfig","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","indexToSelect","tabBodyWrapperHeight","tabsSubscription","tabLabelSubscription","_dynamicHeight","lightTab","groupId","clampTabIndex","isFirstRun_1","createChangeEvent","tabs","subscribeToTabLabels","i","getTabLabelId","getTabContentId","setTabBodyWrapperHeight","tabHeight","wrapper","tabBodyWrapper","removeTabBodyWrapperHeight","tabHeader","getTabIndex","[class.mc-tab-group_dynamic-height]","[class.mc-tab-group_inverted-header]","dynamicHeight","McTabNavBase","mcTabNavMixinBase","McTabNav","McTabLinkBase","mcTabLinkMixinBase","McTabLink","[attr.aria-current]","[attr.tabIndex]","[class.mc-active]","active","McTabsModule","McTagSelectionChange","McTagBase","_removable","popover","handlePositionUpdate","McPopover","verticalOffset","anchorElementWidth","clientWidth","isDynamicPopover","McPopoverComponent","isPopoverOpen","reapplyPosition","reapplyLastPosition","getOriginXaxis","getOriginYaxis","origX","includes","getMcPopoverInvalidPositionError","origY","[class.mc-popover_open]","MC_POPOVER_SCROLL_STRATEGY","mcHeader","mcContent","mcFooter","mcPopoverSize","McPopoverModule","MC_POPOVER_SCROLL_STRATEGY_FACTORY_PROVIDER","idIterator","McProgressBarBase","_McProgressBarMixinBase","McProgressBar","mode","McProgressBarModule","McProgressSpinnerBase","_McProgressSpinnerMixinBase","McProgressSpinner","percentage","McProgressSpinnerModule","McRadioChange","McRadioGroupBase","_McRadioGroupMixinBase","MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","McRadioGroup","_changeDetector","_name","_isInitialized","_labelPosition","controlValueAccessorChangeFn","updateRadioButtonNames","markRadiosForCheck","updateSelectedRadioFromValue","checkSelectedRadioButton","toBoolean","touch","emitChangeEvent","_radios","radio","isAlreadySelected","McRadioButton","McRadioButtonBase","_McRadioButtonMixinBase","radioGroup","_radioDispatcher","removeUniqueSelectionListener","newCheckedState","notify","newDisabledState","onInputClick","onInputChange","groupValueChanged","[class.mc-checked]","UniqueSelectionDispatcher","ariaDescribedby","McRadioModule","McTreeNodeDef","CdkTreeNodeDef","McTreeNodePadding","arguments","baseLeftPadding","_indent","iconWidth","withIcon","paddingIndent","nodeLevel","treeNode","treeControl","getLevel","level","leftPadding","isExpandable","setPadding","CdkTreeNodePadding","indent","McTreeNodeToggle","CdkTreeNodeToggle","MC_TREE_OPTION_PARENT_COMPONENT","McTreeOptionChange","uniqueIdCounter","McTreeOption","parent","_active","setSelected","setActiveStyles","setInactiveStyles","clientRects","getHostElement","emitSelectionChangeEvent","setFocusedOption","[class.mc-selected]","CdkTreeNode","McTreeNavigationChange","McTreeSelectionChange","McTreeSelectionBase","differs","McTreeSelectionBaseMixin","noUnselect","navigationChange","rawValue","log","withShift","withCtrl","collapse","expand","toggleFocusedOption","previousIndex_1","previousActiveItemIndex","activeIndex_1","canDeselectLast","emitNavigationEvent","focusedIndex","focusedOption","renderNodeChanges","dataDiffer","viewContainer","parentData","nodeOutlet","arrayOfInstances","_embeddedViews","view","viewDef","def","nodes","node","nodeMatchedQueries","matchedQueryIds","nodeData","nodeIndex","notifyOnChanges","IterableDiffers","CdkTreeNodeOutlet","MC_TREE_DIRECTIVES","McTreeFlattener","transformFunction","getChildren","flattenNode","resultNodes","parentMap","flatNode","children","child","childParentMap","flattenNodes","structuredData","expandFlattenedNodes","results","currentExpand","isExpanded","McTreeFlatDataSource","treeFlattener","initialData","flattenedData","expandedData","_data","dataNodes","connect","collectionViewer","viewChange","expansionModel","disconnect","DataSource","McTreeNestedDataSource","McMeasureScrollbarService","McModalControlService","DOCUMENT","mcModalType","mcComponentParams","mcZIndex","mcWidth","mcWrapClassName","mcClassName","mcStyle","mcCloseByESC","mcClosable","mcMask","mcMaskClosable","mcMaskStyle","mcBodyStyle","mcAfterOpen","mcAfterClose","mcOkText","mcOkType","mcOkLoading","mcOnOk","mcCancelText","mcCancelLoading","mcOnCancel","modalContainer","bodyContainer","autoFocusButtonOk","mcGetContainer","McModalComponent","McModalRef","CssUnitPipe","defaultUnit","formatted","Pipe","ModalBuilderForService","createModal","changeProps","destroyModal","getInstance","modalRef","assign","McModalService","modalControl","openModals","afterAllClose","confirm","confirmType","success","simpleConfirm","delete","McModalModule","McButtonModule","MC_NAVBAR_CONTAINER","MC_NAVBAR_ITEM","MC_NAVBAR_BRAND","MC_NAVBAR_TITLE","McNavbarLogo","McNavbarBrand","McNavbarTitle","McNavbarItemBase","_McNavbarMixinBase","McNavbarItem","_platform","_cdRef","dropdownItems","isCollapsed","_subscription","encodeURI","dropdownContent","denyClickIfDisabled","_focusMonitor$","hasDropdownContent","listenClickOutside","startListenFocusDropdownItems","stopListenFocusDropdownItems","isActiveDropdownLink","link","isBrowser","location","href","handleClickByItem","toggleDropdown","isNavbarItem","handleClickByDropdownItem","forceCloseDropdown","_dropdownElements","el","events","eventListeners","stopImmediatePropagation","Platform","collapsedTitle","dropdownItemTmpl","McNavbarContainer","cssClasses","CollapsibleItem","_collapsed","processCollapsed","collapsed","updateCollapsedClass","CachedItemWidth","itemsForCollapse","_collapsedItemsWidth","calculateAndCacheCollapsedItemsWidth","updateTitle","acc","getTitle","computedTitle","getAttribute","decodeURI","innerText","removeAttribute","McNavbar","forceRecalculateItemsWidth","resizeDebounceInterval","firstLevelElement","secondLevelElements","resizeObserver","debounceTime","_resizeSubscription","updateCollapsed","_itemsWidths","calculateAndCacheItemsWidth","_totalItemsWidths","calculateAndCacheTotalItemsWidth","collapseDelta","maxAllowedWidth","itemsWidths","canCollapse","collapsedItemsWidth","getOuterElementWidth","getPropertyValue","allItemsSelector","allItems","from","getItemsForCollapse","McNavbarModule","mcPopoverAnimations","popoverState","opacity","componentElementRef","EXTENDED_OVERLAY_POSITIONS","popoverVisibility","_classList","popoverSize","list","getPlacementClass","POSITION_TO_CSS_MAP","isNonEmptyContent","isTemplateRef","isNonEmptyString","isVisible","animationStart","[class]","mcPopoverScrollStrategyFactory","_mcHeader","_mcContent","_mcFooter","McListSelection","lines","McLine","checkboxPosition","McListOption","MC_SELECTION_LIST_VALUE_ACCESSOR","McListSelectionChange","McListSelectionBase","_McListSelectionMixinBase","horizontal","modelChanges","tempValues","setOptionsFromValues","_b","_c","selectAll","reportValueChange","deselectAll","values","getSelectedOptionValues","listOption","removeOptionFromList","optionIndex","setPreviousItemActive","setNextItemActive","TAB","getOptionByValue","[tabIndex]","McListBase","McList","McListSubheaderCssStyler","McListItemBase","McListItem","_element","lineSetter","McLineSetter","handleFocus","handleBlur","McListModule","McLineModule","McLinkBase","_McLinkBase","McLink","_getHostElement","McLinkModule","parentService","rootOpenModals","rootAfterAllClose","rootRegisteredMetaMap","registeredMetaMap","registerModal","hasRegistered","afterOpenSubscription","afterOpen","afterCloseSubscription","afterClose","removeOpenModal","ModalUtil","document","lastPosition","listenDocumentClick","getLastClickPosition","clientX","clientY","ModalUtil$1","cfr","mcMeasureScrollbarService","changeDetector","_mcClosable","_mcMask","_mcMaskClosable","_mcOkLoading","_mcCancelLoading","isComponent","createDynamicComponent","isModalButtons","formatModalButtons","HTMLElement","OverlayRef","handleVisibleStateChange","firstChange","contentComponentRef","insert","changeVisibleFromInside","triggerOk","onClickOkCancel","triggerCancel","getContentComponentRef","getContentComponent","getElement","onClickMask","isModalType","onClickCloseBtn","ok","cancel","loadingKey","caseClose_1","doClose","isPromise","handleThen","catch","Type","animation","closeResult","changeBodyOverflow","animateTo","getButtonCallableProp","prop","onButtonClick","button","loading","changeAnimationState","maskAnimationClassMap","modalAnimationClassMap","updateTransformOrigin","buttons","autoLoading","component","factory","resolveComponentFactory","childInjector","parentInjector","modalElement","plusNum","body","scrollBarWidth","disabledChange","McDatepickerInput","registerOnValidatorChange","validatorOnChange","validate","c","cvaOnChange","isAltDownArrow","datepicker","readOnly","date","dateFormats","dateInput","lastValueValid","isValid","getValidDateOrNull","sameDate","McDatepickerInputEvent","dateChange","getThemePalette","formField","display","obj","isDateInstance","MC_DATEPICKER_VALUE_ACCESSOR","MC_DATEPICKER_VALIDATORS","[attr.aria-haspopup]","[attr.aria-owns]","[attr.min]","[attr.max]","(change)","MC_DATE_FORMATS","mcDatepicker","mcDatepickerFilter","McDatepickerToggleIcon","McDatepickerToggle","intl","defaultTabIndex","parsedTabIndex","watchStateChanges","datepickerDisabled","inputDisabled","datepickerInput","datepickerToggled","[class.mc-datepicker-toggle_active]","[class.mc-warn]","McDatepickerIntl","customIcon","McDatepickerModule","McCalendar","McCalendarBody","McDatepicker","McDatepickerContent","McMonthView","McYearView","McMultiYearView","McCalendarHeader","MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","McDivider","_vertical","_inset","[attr.aria-orientation]","[class.mc-divider-vertical]","[class.mc-divider-inset]","vertical","inset","McDividerModule","McDropdownContent","_template","_componentFactoryResolver","_appRef","_injector","_viewContainerRef","_document","_attached","context","_portal","_outlet","DomPortalOutlet","createElement","insertBefore","outletElement","isAttached","ApplicationRef","MC_DROPDOWN_PANEL","McDropdownItemBase","_McDropdownItemMixinBase","McDropdownItem","_parentDropdownPanel","_hovered","_highlighted","_triggersNestedDropdown","addItem","removeItem","_getTabIndex","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","childNodes","length_1","nodeType","[attr.role]","[class.mc-dropdown__item_highlighted]","(mouseenter)","mcDropdownAnimations","transformDropdown","query","fadeInItems","MC_DROPDOWN_DEFAULT_OPTIONS","providedIn","MC_DROPDOWN_DEFAULT_OPTIONS_FACTORY","McDropdown","_defaultOptions","_panelAnimationState","_animationDone","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_overlapTriggerX","overlapTriggerX","_overlapTriggerY","overlapTriggerY","_hasBackdrop","throwMcDropdownInvalidPositionX","setPositionClasses","throwMcDropdownInvalidPositionY","classes","previousPanelClass","_previousPanelClass","className","_keyManager","_handleKeydown","setFocusOrigin","focusFirstItem","lazyContent","resetActiveItem","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","_onAnimationStart","templateRef","MC_DROPDOWN_SCROLL_STRATEGY","MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER","MC_DROPDOWN_SCROLL_STRATEGY_FACTORY","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","_overlay","_scrollStrategy","_parent","_dropdownItemInstance","_handleTouchStart","_openedBy","dropdownOpened","dropdownClosed","_overlayRef","_opened","_closeSubscription","_hoverSubscription","triggersNestedDropdown","_dropdown","dropdown","reason","_destroy","_check","_handleHover","_cleanUpSubscriptions","_createOverlay","_setPosition","_getPortal","_closingActions","_init","opened","_reset","_setIsOpened","throwMcDropdownMissingError","_getOverlayConfig","_subscribeToPositions","withLockedPosition","originFallbackX","overlayFallbackX","overlayFallbackY","originFallbackY","backdrop","parentClose","hover","_handleMousedown","_handleClick","delay","asapScheduler","aria-haspopup","[attr.aria-expanded]","(mousedown)","McDropdownModule","McContentComponent","[class.mc-layout-content]","McFooterComponent","[class.mc-layout-footer]","McHeaderComponent","[class.mc-layout-header]","McLayoutComponent","hasSidebar","[class.mc-layout]","[class.mc-layout-has-sidebar]","McSidebarComponent","mcLayoutComponent","_mcWidth","mcCollapsedWidth","mcCollapsedChange","collapsible","mcCollapsed","[class.mc-layout-sidebar]","[class.mc-layout-sidebar-collapsed]","[style.flex]","[style.max-width.px]","[style.min-width.px]","[style.width.px]","Host","mcCollapsible","McLayoutModule","listSelection","wasSelected_1","[class.mc-focused]","activeDate","addCalendarYears","_activeDate","getYear","yearsPerPage","onYearSelected","compareDate","oldActiveDate","activeDateChange","focusActiveCell","getActiveCell","mcCalendarBody","createCellForYear","year","yearName","getYearName","createDate","McCalendarCell","shouldEnableYear","maxDate","minDate","dateFilter","firstOfYear","addCalendarDays","selectedChange","yearSelected","monthSelected","createMissingDateImplError","today","validDate","deserialize","clampDate","init","selectedMonth","getMonthInCurrentYear","_minDate","_maxDate","onMonthSelected","month","normalizedDate","daysInMonth","getNumDaysInMonth","getDate","handleCalendarBodyKeydown","addCalendarMonths","getMonth","todayMonth","yearLabel","monthNames","getMonthNames","months","row","createCellForMonth","monthName","monthYearA11yLabel","newMonthName","toLocaleUpperCase","substr","shouldEnableMonth","activeYear","isYearAndMonthAfterMaxDate","isYearAndMonthBeforeMinDate","firstOfMonth","maxYear","maxMonth","minYear","minMonth","calendar","currentView","label","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","isSameView","nextEnabled","date1","date2","startView","userSelection","moveFocusOnNextTick","intlChanges","_startAt","clampedActiveDate","_currentView","calendarHeaderPortal","headerComponent","startAt","ngAfterViewChecked","getCurrentViewComponent","updateTodaysDate","monthView","yearView","multiYearView","dateSelected","yearSelectedInMultiYearView","normalizedYear","monthSelectedInYearView","normalizedMonth","userSelected","goToDateInView","dateClass","mcDatepickerAnimations","fadeInCalendar","Element","matches","msMatchesSelector","datepickerUid","MC_DATEPICKER_SCROLL_STRATEGY","MC_DATEPICKER_SCROLL_STRATEGY_FACTORY","McDatepickerContentBase","McDatepickerContentMixinBase","[@transformPanel]","selectedChanged","validSelected","focusedElementBeforeOpen","inputSubscription","_color","popupRef","popupComponentRef","oldValue","selectYear","selectMonth","activeElement","openAsPopup","calendarPortal","completeClose","createPopup","setColor","createPopupPositionStrategy","calendarHeaderComponent","NG_VALIDATORS","targetElement","datepickerSubscription","localeSubscription","mcDatepickerParse","minValidator","controlValue","mcDatepickerMin","actual","maxValidator","mcDatepickerMax","filterValidator","Validators","compose","localeChanges","oldDate","_min","_max","[class.mc-card_readonly]","[class.mc-card_selected]","readonly","McCard","McCardModule","MC_CHECKBOX_CLICK_ACTION","MC_CHECKBOX_CONTROL_VALUE_ACCESSOR","McCheckbox","Init","Checked","Unchecked","Indeterminate","McCheckboxChange","McCheckboxBase","_McCheckboxMixinBase","_clickAction","indeterminateChange","_onTouched","_currentAnimationClass","_currentCheckState","TransitionCheckState","_controlValueAccessorChangeFn","_indeterminate","focusOrigin","_onInputFocusChange","_transitionCheckState","indeterminate","newState","oldState","[class.mc-indeterminate]","[class.mc-checkbox-label-before]","MC_CHECKBOX_REQUIRED_VALIDATOR","McCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","McCheckboxModule","stepUp","step","res","stepDown","MC_INPUT_INVALID_TYPES","BIG_STEP","SMALL_STEP","McInputBase","_McInputMixinBase","McNumberInput","_model","bigStep","isDigit","Infinity","_host","self","getPrototypeOf","get","normalizeSplitter","_focusChanged","minuses","NUMPAD_MINUS","DASH","FF_MINUS","serviceKeys","arrows","allowedKeys","isIEPeriod","isNotIEPeriod","metaKey","C","V","X","F1","F12","EDGE","TRIDENT","ZERO","NINE","NUMPAD_ZERO","NUMPAD_NINE","valueAsNumber","update","replace","isFloat","isInt","test","NgModel","McFormFieldNumberControl","_uid","_type","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","_validateType","_dirtyCheckNativeValue","_onInput","_isNeverEmpty","_isBadInput","getMcInputUnsupportedTypeError","McInputMono","MIN_VALIDATOR","MinValidator","_createValidator","_onChange","_validator","MAX_VALIDATOR","MaxValidator","McInputModule","calendarLabel","openCalendarLabel","displayValue","enabled","numCols","activeCell","cellAspectRatio","selectedValueChange","cellClicked","cell","columnChanges","rows","firstRowOffset","cellPadding","cellWidth","isActiveCell","rowIndex","colIndex","cellNumber","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","hasSameMonthAndYear","selectedDate","getDateInCurrentMonth","selectedYear","todayDate","monthLabel","firstWeekOffset","getDayOfWeek","createWeekCells","dateNames","getDateNames","weeks","shouldEnableDate","dateA11yLabel","cellClasses","d1","d2","todayYear","activeOffset","years","McAutocomplete","_autoActiveFirstOption","_isOpen","showPanel","setVisibility","setScrollTop","getScrollTop","emitSelectEvent","McAutocompleteSelectedEvent","optionSelected","MC_AUTOCOMPLETE_DEFAULT_OPTIONS","displayWith","panelWidth","autoActiveFirstOption","McAutocompleteOrigin","MC_AUTOCOMPLETE_SCROLL_STRATEGY","MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","McAutocompleteTrigger","zone","optionSelections","autocomplete","autocompleteAttribute","_autocompleteDisabled","overlayAttached","componentDestroyed","viewportSubscription","canOpenOnNextFocus","closeKeyEventStream","windowBlurHandler","destroyPanel","openPanel","attachOverlay","closePanel","closingActionsSubscription","getOutsideClickStream","McOptionSelectionChange","setTriggerValue","activeOption","prevActiveItem","canOpen","scrollToOption","handleInput","previousValue","clickTarget","newScrollPosition","subscribeToClosingActions","firstStable","optionChanges","tap","panelClosingActions","setValueAndClose","toDisplay","inputValue","_control","clearPreviousSelectedOption","getMcAutocompleteMissingPanelError","setOrigin","getConnectedElement","updateSize","getPanelWidth","getOverlayConfig","wasOpen","withPush","connectedTo","getConnectedOverlayOrigin","getHostWidth","[attr.autocomplete]","(focusin)","autocompleteDisabled","McAutocompleteModule","McButtonCssStyler","[class.mc-button]","[class.mc-icon-button]","McButtonBase","McButtonMixinBase","McButton","McAnchor","haltDisabledEvents","MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","McButtonToggleGroup","McButtonToggleChange","buttonToggles","syncButtonToggle","isPrechecked","[class.mc-button-toggle-vertical]","McButtonToggle","buttonToggleGroup","isSingleSelector","onToggleClick","newChecked","[class.mc-button-toggle-standalone]","[class.mc-button-toggle-checked]","mcButton","McButtonToggleModule","hostElement","onClick","__extends","d","__","constructor","extendStatics","isBoolean","val","MC_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","Default","colorPalette","errorState","matcher","isErrorState","optionsArray","groups","groupCounter","optionHeight","currentScrollPosition","optionOffset","arrayMap","array","iteratee","baseValues","object","props","objectValues","mcSelectScrollStrategyProviderFactory","reposition","getMcFormFieldMissingControlError","MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","inputType","sanitizeNumber","isFinite","getPrecision","arr","pow","value1","value2","precision","provider","scrollThrottle","openSidepanels","setPrototypeOf","__proto__","p","__assign","s","n","MC_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","computedStyle","removeChild","BidiModule","Second","Empty","_lines","_setLineClass","count","_resetClasses","_setClass","isAdd","ShowOnDirtyErrorStateMatcher","form","invalid","dirty","submitted","touched","McPseudoCheckbox","scrollbarMeasure","overflow","initScrollBarWidth","_scrollbarWidth","scrollDiv","scrollProp","McOptgroupBase","McOptgroupMixinBase","uniqueOptgroupIdCounter","labelId","[class.mc-optgroup-disabled]","[attr.aria-labelledby]","mostRecentViewValue","[class.mc-option-multiple]","MC_LABEL_GLOBAL_OPTIONS","StandardCurve","SharpCurve","topCenter","topLeft","topRight","rightTop","rightBottom","bottomCenter","bottomLeft","bottomRight","leftTop","leftBottom","minWidth","animateChild","McIconCSSStyler","McIconBase","_McIconMixinBase","iconName","McCleaner","McHint","McPrefix","McStepper","onStepUp","onStepDown","McSuffix","McFormFieldBase","_McFormFieldMixinBase","_labelId","hovered","_validateControlChild","_numberControl","hasStepper","_stepper","valueChanges","clearValue","hasCleaner","onHoverChanged","isHovered","connectionContainerRef","_shouldForward","_hint","_suffix","_prefix","_cleaner","[class.mc-form-field_invalid]","[class.mc-form-field_has-prefix]","[class.mc-form-field_has-suffix]","[class.mc-form-field_has-cleaner]","[class.mc-form-field_has-stepper]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","(mouseleave)","McFormFieldWithoutBorders","uniqueAutocompleteIdCounter","defaults"],"mappings":"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"}