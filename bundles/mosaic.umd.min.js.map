{"version":3,"file":"mosaic.umd.min.js","sources":["../../src/lib/tree/tree-selection.ts","../../src/lib/tree/tree.module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/navbar/navbar.component.ts","../../src/lib/navbar/navbar.module.ts","../../src/lib/progress-bar/progress-bar.component.ts","../../src/lib/progress-bar/progress-bar.module.ts","../../src/lib/progress-spinner/progress-spinner.component.ts","../../src/lib/progress-spinner/progress-spinner.module.ts","../../src/lib/radio/radio.component.ts","../../src/lib/radio/radio.module.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/form-field/cleaner.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field.module.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input.module.ts","../../src/lib/list/list-selection.component.ts","../../src/lib/list/list.component.ts","../../src/lib/list/list.module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/utils/utils.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/core/line/line.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/icon/icon.component.ts","../../src/lib/icon/icon.module.ts","../../src/lib/button/button.component.ts","../../src/lib/button/button.module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/divider/divider.component.ts","../../src/lib/divider/divider.module.ts"],"sourcesContent":["import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, ContentChildren, EventEmitter, forwardRef, Input, IterableDiffer,\n    IterableDiffers, Output, QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    Directive, ElementRef, Inject\n} from '@angular/core';\nimport { NodeDef, ViewData } from '@angular/core/src/view';\n\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { CdkTreeNode, CdkTree, CdkTreeNodeOutlet } from '@ptsecurity/cdk/tree';\n\nimport { CanDisable, HasTabIndex, mixinDisabled, mixinTabIndex, toBoolean } from '@ptsecurity/mosaic/core';\n\nimport { FocusKeyManager } from '@ptsecurity/cdk/a11y';\n\nimport { END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, SPACE } from '@ptsecurity/cdk/keycodes';\n\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n    exportAs: 'mcTreeNodeOption',\n    selector: 'mc-tree-node-option',\n    host: {\n        tabindex: '-1',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': '_hasFocus',\n        '[attr.aria-expanded]': 'isExpanded',\n        '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n        class: 'mc-tree-node',\n\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()',\n\n        '(click)': '_handleClick()'\n    },\n    providers: [\n        { provide: CdkTreeNode, useExisting: McTreeNodeOption }\n    ]\n})\nexport class McTreeNodeOption<T> extends CdkTreeNode<T> implements CanDisable {\n    @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n        }\n    }\n\n    @Input()\n    get selected(): boolean {\n        return this.treeSelection.selectedOptions && this.treeSelection.selectedOptions.isSelected(this) || false;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            // this.treeSelection._reportValueChange();\n        }\n    }\n\n    private _hasFocus: boolean = false;\n\n    private _disabled: boolean = false;\n    private _selected: boolean = false;\n\n    constructor(\n        protected _elementRef: ElementRef,\n        @Inject(forwardRef(() => McTreeSelection))\n        protected treeSelection: McTreeSelection<T>\n    ) {\n        super(_elementRef, treeSelection);\n    }\n\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n\n        this.treeSelection.setFocusedOption(this);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.treeSelection.selectedOptions) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.treeSelection.selectedOptions.select(this);\n        } else {\n            this.treeSelection.selectedOptions.deselect(this);\n        }\n\n        // this._changeDetector.markForCheck();\n    }\n\n    _getHeight(): number {\n        return this._elementRef.nativeElement.getClientRects()[0].height;\n    }\n\n    _handleFocus(): void {\n        if (this.disabled || this._hasFocus) { return; }\n\n        this._hasFocus = true;\n    }\n\n    _handleBlur(): void {\n        this._hasFocus = false;\n    }\n\n    _handleClick(): void {\n        if (this.disabled) { return; }\n\n        this.treeSelection.setFocusedOption(this);\n    }\n}\n\nexport const _McTreeSelectionBase = mixinTabIndex(mixinDisabled(CdkTree));\n\nexport class McTreeNavigationChange {\n    constructor(\n        public source: McTreeSelection<any>,\n        public option: McTreeNodeOption<any>\n    ) {}\n}\n\nexport class McTreeSelectionChange {\n    constructor(\n        public source: McTreeSelection<any>,\n        public option: McTreeNodeOption<any>\n    ) {}\n}\n\n@Component({\n    exportAs: 'mcTreeSelection',\n    selector: 'mc-tree-selection',\n    template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n    host: {\n        '[tabIndex]': 'tabIndex',\n        class: 'mc-tree-selection',\n        role: 'tree-selection',\n        '(keydown)': '_onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    styleUrls: ['./tree.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{ provide: CdkTree, useExisting: McTreeSelection }]\n})\nexport class McTreeSelection<T> extends _McTreeSelectionBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex {\n    // Outlets within the tree's template where the dataNodes will be inserted.\n    @ViewChild(CdkTreeNodeOutlet) _nodeOutlet: CdkTreeNodeOutlet;\n\n    @ContentChildren(forwardRef(() => McTreeNodeOption)) options: QueryList<McTreeNodeOption<T>>;\n\n    _keyManager: FocusKeyManager<McTreeNodeOption<T>>;\n\n    selectedOptions: SelectionModel<McTreeNodeOption<T>>;\n\n    _disabled: boolean = false;\n    tabIndex: number;\n    multiple: boolean;\n    autoSelect: boolean;\n    noUnselect: boolean;\n\n    // todo temporary solution\n    withShift: boolean;\n    withCtrl: boolean;\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(rawValue: boolean) {\n        const value = toBoolean(rawValue);\n\n        if (this._disabled !== value) {\n            this._disabled = value;\n\n            if (this._disabled) {\n                console.log('need disable all options');\n            } else {\n                console.log('need enable all options');\n            }\n        }\n    }\n\n    @Output() readonly navigationChange = new EventEmitter<McTreeNavigationChange>();\n\n    @Output() readonly selectionChange = new EventEmitter<McTreeSelectionChange>();\n\n    constructor(\n        private _elementRef: ElementRef,\n        _differs: IterableDiffers,\n        _changeDetectorRef: ChangeDetectorRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('multiple') multiple: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string\n    ) {\n        super(_differs, _changeDetectorRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.multiple = multiple === null ? true : toBoolean(multiple);\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.selectedOptions = new SelectionModel<McTreeNodeOption<T>>(this.multiple);\n    }\n\n    _onKeyDown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n        this.withShift = event.shiftKey;\n        this.withCtrl = event.ctrlKey;\n\n        switch (keyCode) {\n            case LEFT_ARROW:\n                if (this._keyManager.activeItem) {\n                    this.treeControl.collapse(this._keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                break;\n            case RIGHT_ARROW:\n                if (this._keyManager.activeItem) {\n                    this.treeControl.expand(this._keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                break;\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                this._keyManager.setPreviousPageItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                this._keyManager.setNextPageItemActive();\n                event.preventDefault();\n\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    ngAfterContentInit(): void {\n        this._keyManager = new FocusKeyManager<McTreeNodeOption<T>>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation(true)\n            .withHorizontalOrientation(null);\n    }\n\n    updateScrollSize(): void {\n        if (!this.options.first) { return; }\n\n        this._keyManager.withScrollSize(Math.floor(this._getHeight() / this.options.first._getHeight()));\n    }\n\n    setFocusedOption(option: McTreeNodeOption<T>): void {\n        this._keyManager.updateActiveItem(option);\n\n        if (this.withShift && this.multiple) {\n            const previousIndex = this._keyManager.previousActiveItemIndex;\n            const activeIndex = this._keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n\n            this.withShift = false;\n        } else if (this.withCtrl) {\n            this.withCtrl = false;\n\n            if (!this._canDeselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) {\n                this.options.forEach((item) => item.setSelected(false));\n                option.setSelected(true);\n            }\n        }\n\n        this._emitNavigationEvent(option);\n    }\n\n    // Toggles the selected state of the currently focused option.\n    toggleFocusedOption(): void {\n        const focusedIndex = this._keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n            const focusedOption: McTreeNodeOption<T> = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this._canDeselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this._emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    renderNodeChanges(\n        data: T[],\n        dataDiffer: IterableDiffer<T> = this._dataDiffer,\n        viewContainer: any = this._nodeOutlet.viewContainer,\n        parentData?: T\n    ) {\n        super.renderNodeChanges(data, dataDiffer, viewContainer, parentData);\n\n        const arrayOfInstances = [];\n\n        viewContainer._embeddedViews.forEach((view: ViewData) => {\n            const viewDef = view.def;\n\n            viewDef.nodes.forEach((node: NodeDef) => {\n                if (viewDef.nodeMatchedQueries === node.matchedQueryIds) {\n                    const nodeData: any = view.nodes[node.nodeIndex];\n\n                    arrayOfInstances.push(nodeData.instance as never);\n                }\n            });\n        });\n\n        if (this.options) {\n            this.options.reset(arrayOfInstances);\n            this.options.notifyOnChanges();\n        }\n\n        this.updateScrollSize();\n    }\n\n    _getHeight(): number {\n        return this._elementRef.nativeElement.getClientRects()[0].height;\n    }\n\n    _emitNavigationEvent(option: McTreeNodeOption<T>): void {\n        this.navigationChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    _emitChangeEvent(option: McTreeNodeOption<T>): void {\n        this.selectionChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private _isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    private _canDeselectLast(option: McTreeNodeOption<T>): boolean {\n        return !(this.noUnselect && this.selectedOptions.selected.length === 1 && option.selected);\n    }\n}\n\n","import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { CdkTreeModule } from '@ptsecurity/cdk/tree';\n\nimport { McTreeNodeDef } from './node';\nimport { McTreeNodePadding } from './padding';\nimport { McTreeSelection, McTreeNodeOption } from './tree-selection';\n\n\nconst MC_TREE_DIRECTIVES = [\n    McTreeNodeDef,\n    McTreeNodePadding,\n    McTreeSelection,\n    McTreeNodeOption\n];\n\n@NgModule({\n    imports: [CommonModule, CdkTreeModule],\n    exports: MC_TREE_DIRECTIVES,\n    declarations: MC_TREE_DIRECTIVES\n})\nexport class McTreeModule {}\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { FlatTreeControl, ITreeControl } from '@ptsecurity/cdk/tree';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class McTreeFlattener<T, F> {\n\n    constructor(public transformFunction: (node: T, level: number) => F,\n                public getLevel: (node: F) => number,\n                public isExpandable: (node: F) => boolean,\n                public getChildren: (node: T) => Observable<T[]>) {\n    }\n\n    _flattenNode(node: T, level: number,\n                 resultNodes: F[], parentMap: boolean[]): F[] {\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n\n        if (this.isExpandable(flatNode)) {\n            this.getChildren(node).pipe(take(1)).subscribe((children) => {\n                children.forEach((child, index) => {\n                    const childParentMap: boolean[] = parentMap.slice();\n                    childParentMap.push(index !== children.length - 1);\n                    this._flattenNode(child, level + 1, resultNodes, childParentMap);\n                });\n            });\n        }\n\n        return resultNodes;\n    }\n\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n    flattenNodes(structuredData: T[]): F[] {\n        const resultNodes: F[] = [];\n        structuredData.forEach((node) => this._flattenNode(node, 0, resultNodes, []));\n\n        return resultNodes;\n    }\n\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n    expandFlattenedNodes(nodes: F[], treeControl: ITreeControl<F>): F[] {\n        const results: F[] = [];\n        const currentExpand: boolean[] = [];\n        currentExpand[0] = true;\n\n        nodes.forEach((node) => {\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n\n            if (expand) { results.push(node); }\n\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        });\n\n        return results;\n    }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `McTree`.\n * The nested tree nodes of type `T` are flattened through `MсTreeFlattener`, and converted\n * to type `F` for `McTree` to consume.\n */\nexport class McTreeFlatDataSource<T, F> extends DataSource<F> {\n    _flattenedData = new BehaviorSubject<F[]>([]);\n\n    _expandedData = new BehaviorSubject<F[]>([]);\n\n    _data: BehaviorSubject<T[]>;\n\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n        this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n        this.treeControl.dataNodes = this._flattenedData.value;\n    }\n\n    constructor(private treeControl: FlatTreeControl<F>,\n                private treeFlattener: McTreeFlattener<T, F>,\n                initialData: T[] = []) {\n        super();\n        this._data = new BehaviorSubject<T[]>(initialData);\n    }\n\n    connect(collectionViewer: ICollectionViewer): Observable<F[]> {\n        const changes = [\n            collectionViewer.viewChange,\n            this.treeControl.expansionModel.onChange!,\n            this._flattenedData\n        ];\n\n        return merge(...changes).pipe(map(() => {\n            this._expandedData.next(\n                this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n\n            return this._expandedData.value;\n        }));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by ITreeControl and each non-leaf node.\n */\nexport class McTreeNestedDataSource<T> extends DataSource<T> {\n    _data = new BehaviorSubject<T[]>([]);\n\n    /**\n     * Data for the nested tree\n     */\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n    }\n\n    connect(collectionViewer: ICollectionViewer): Observable<T[]> {\n        return merge(...[collectionViewer.viewChange, this._data])\n            .pipe(map(() => this.data));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import { Version } from '@angular/core';\n\n\nexport const VERSION = new Version('0.0.1-f242499');\n","import { fromEvent, Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nimport {\n    AfterViewInit,\n    Component, Directive,\n    ElementRef,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    ViewEncapsulation,\n    ContentChild,\n    TemplateRef,\n    ChangeDetectorRef,\n    ChangeDetectionStrategy,\n    ViewChild\n} from '@angular/core';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { SPACE } from '@ptsecurity/cdk/keycodes';\nimport { Platform } from '@ptsecurity/cdk/platform';\nimport { CanDisable, mixinDisabled } from '@ptsecurity/mosaic/core';\n\n\nconst COLLAPSED_CLASS: string = 'mc-navbar-collapsed-title';\nconst MC_ICON = 'mc-icon';\nconst MC_NAVBAR = 'mc-navbar';\nconst MC_NAVBAR_CONTAINER = 'mc-navbar-container';\nconst MC_NAVBAR_ITEM = 'mc-navbar-item';\nconst MC_NAVBAR_BRAND = 'mc-navbar-brand';\nconst MC_NAVBAR_TITLE = 'mc-navbar-title';\nconst MC_NAVBAR_LOGO = 'mc-navbar-logo';\n\nexport type McNavbarContainerPositionType = 'left' | 'right';\n\nexport interface IMcNavbarDropdownItem {\n    link?: string;\n    text: string;\n}\n\n@Directive({\n    selector: MC_NAVBAR_LOGO,\n    host: {\n        class: MC_NAVBAR_LOGO\n    }\n})\nexport class McNavbarLogo {}\n\n@Directive({\n    selector: MC_NAVBAR_BRAND,\n    host: {\n        class: MC_NAVBAR_BRAND\n    }\n})\nexport class McNavbarBrand {}\n\n@Directive({\n    selector: MC_NAVBAR_TITLE,\n    host: {\n        class: MC_NAVBAR_TITLE\n    }\n})\nexport class McNavbarTitle {}\n\nexport class McNavbarItemBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McNavbarMixinBase = mixinDisabled(McNavbarItemBase);\n\n@Component({\n    selector: MC_NAVBAR_ITEM,\n    template: `\n        <a\n            [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\n            (click)=\"handleClickByItem()\"\n            (keydown)=\"handleKeydown($event)\"\n            class=\"mc-navbar-item\"\n        >\n            <ng-content></ng-content>\n            <i *ngIf=\"hasDropdownContent\" mc-icon=\"mc-angle-M_16\"></i>\n        </a>\n        <ul\n            #dropdownContent\n            *ngIf=\"hasDropdownContent\"\n            [ngClass]=\"{ 'is-collapsed': isCollapsed }\"\n            class=\"mc-navbar-dropdown\"\n        >\n            <li\n                *ngFor=\"let item of dropdownItems\"\n                (click)=\"handleClickByDropdownItem()\"\n                class=\"mc-navbar-dropdown-item\"\n            >\n                <ng-container *ngIf=\"dropdownItemTmpl\">\n                    <ng-container *ngTemplateOutlet=\"dropdownItemTmpl; context: { $implicit: item }\"></ng-container>\n                </ng-container>\n                <a\n                    *ngIf=\"!dropdownItemTmpl\"\n                    [attr.href]=\"item.link\"\n                    [ngClass]=\"{ 'is-active': isActiveDropdownLink(item.link) }\"\n                    class=\"mc-navbar-dropdown-link\"\n                >{{ item.text }}</a>\n            </li>\n        </ul>\n    `,\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': '-1'\n    }\n})\nexport class McNavbarItem extends _McNavbarMixinBase implements OnInit, AfterViewInit, OnDestroy, CanDisable {\n\n    @Input()\n    tabIndex: number = 0;\n\n    @Input()\n    dropdownItems: IMcNavbarDropdownItem[] = [];\n\n    @Input()\n    set collapsedTitle(value: string) {\n        this.elementRef.nativeElement.setAttribute('computedTitle', encodeURI(value));\n    }\n\n    @ContentChild('dropdownItemTmpl', { read: TemplateRef })\n    dropdownItemTmpl: TemplateRef<IMcNavbarDropdownItem>;\n\n    @ViewChild('dropdownContent', { read: ElementRef })\n    dropdownContent: ElementRef;\n\n    get hasDropdownContent() {\n        return this.dropdownItems.length > 0;\n    }\n\n    isCollapsed: boolean = true;\n\n    private _subscription: Subscription = new Subscription();\n    private _focusMonitor$: Observable<FocusOrigin>;\n    private _lastFocusedElement: HTMLElement;\n\n    private get _dropdownElements(): HTMLElement[] {\n        return this.dropdownContent ? this.dropdownContent.nativeElement.querySelectorAll('li > *') : [];\n    }\n\n    constructor(\n        public  elementRef: ElementRef,\n        private _focusMonitor: FocusMonitor,\n        private _platform: Platform,\n        private _cdRef: ChangeDetectorRef\n    ) {\n        super(elementRef);\n    }\n\n    ngOnInit() {\n        this.denyClickIfDisabled();\n\n        this._focusMonitor$ = this._focusMonitor.monitor(this.elementRef.nativeElement, true);\n\n        if (this.hasDropdownContent) {\n            this.listenClickOutside();\n        }\n    }\n\n    ngAfterViewInit() {\n        if (!this.hasDropdownContent) {\n            return;\n        }\n\n        this.startListenFocusDropdownItems();\n    }\n\n    ngOnDestroy() {\n        this._subscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n        this.stopListenFocusDropdownItems();\n    }\n\n    isActiveDropdownLink(link: string): boolean {\n        if (!this._platform.isBrowser) {\n            return false;\n        }\n\n        return window.location.href.indexOf(link) >= 0;\n    }\n\n    handleClickByItem() {\n        this.toggleDropdown();\n    }\n\n    handleKeydown($event: KeyboardEvent) {\n        const isNavbarItem = ($event.target as HTMLElement).classList.contains(MC_NAVBAR_ITEM);\n\n        if (this.hasDropdownContent && $event.keyCode === SPACE && isNavbarItem) {\n            this.toggleDropdown();\n        }\n    }\n\n    handleClickByDropdownItem() {\n        this.forceCloseDropdown();\n    }\n\n    private listenClickOutside() {\n        this._subscription.add(\n            this._focusMonitor$.subscribe((origin) => {\n                if (origin === null) {\n                    this.forceCloseDropdown();\n                }\n            })\n        );\n    }\n\n    private toggleDropdown() {\n        this.isCollapsed = !this.isCollapsed;\n    }\n\n    private forceCloseDropdown() {\n        this.isCollapsed = true;\n        this._cdRef.detectChanges();\n    }\n\n    private startListenFocusDropdownItems() {\n        this._dropdownElements.forEach((el) => {\n            this._focusMonitor.monitor(el, true);\n        });\n    }\n\n    private stopListenFocusDropdownItems() {\n        this._dropdownElements.forEach((el) => {\n            this._focusMonitor.stopMonitoring(el);\n        });\n    }\n\n    // This method is required due to angular 2 issue https://github.com/angular/angular/issues/11200\n    private denyClickIfDisabled() {\n        const events: Event[] = this.elementRef.nativeElement.eventListeners('click');\n\n        events.forEach((event) => this.elementRef.nativeElement.removeEventListener('click', event));\n\n        this.elementRef.nativeElement.addEventListener('click', (event: MouseEvent) => {\n            if (this.elementRef.nativeElement.hasAttribute('disabled')) {\n                event.stopImmediatePropagation();\n            }\n        }, true);\n\n        events.forEach((event) => this.elementRef.nativeElement.addEventListener('click', event));\n    }\n}\n\n@Directive({\n    selector: MC_NAVBAR_CONTAINER\n})\nexport class McNavbarContainer {\n    @Input()\n    position: McNavbarContainerPositionType = 'left';\n\n    @HostBinding('class')\n    get cssClasses(): string {\n        return this.position === 'left' ? 'mc-navbar-left' : 'mc-navbar-right';\n    }\n}\n\nclass CollapsibleItem {\n    private _collapsed: boolean = false;\n\n    constructor(\n        public element: HTMLElement,\n        public width: number\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        this._collapsed = collapsed;\n\n        this.updateCollapsedClass();\n    }\n\n    private updateCollapsedClass() {\n        if (this._collapsed) {\n            this.element.classList.add(COLLAPSED_CLASS);\n        } else {\n            this.element.classList.remove(COLLAPSED_CLASS);\n        }\n\n    }\n}\n\nclass CachedItemWidth {\n\n    get canCollapse(): boolean {\n        return this.itemsForCollapse.length > 0;\n    }\n\n    private _collapsedItemsWidth: number;\n\n    get collapsedItemsWidth(): number {\n        if (this._collapsedItemsWidth !== undefined) {\n            return this._collapsedItemsWidth;\n        }\n\n        this.calculateAndCacheCollapsedItemsWidth();\n\n        return this._collapsedItemsWidth;\n    }\n\n    constructor(\n        public element: HTMLElement,\n        public width: number,\n        public itemsForCollapse: CollapsibleItem[] = []\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        if (this.itemsForCollapse.length > 0) {\n            this.updateTitle(collapsed);\n        }\n\n        this.itemsForCollapse.forEach((item) => item.processCollapsed(collapsed));\n    }\n\n    private calculateAndCacheCollapsedItemsWidth() {\n        this._collapsedItemsWidth = this.itemsForCollapse\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getTitle(): string {\n        const computedTitle = this.element.getAttribute('computedTitle');\n\n        return computedTitle\n            ? decodeURI(computedTitle)\n            : (this.itemsForCollapse.length > 0 ? this.itemsForCollapse[0].element.innerText : '');\n    }\n\n    private updateTitle(collapsed: boolean) {\n        if (collapsed) {\n            this.element.setAttribute('title', this.getTitle());\n        } else {\n            this.element.removeAttribute('title');\n        }\n    }\n}\n\n\n@Component({\n    selector: MC_NAVBAR,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    template: `\n        <nav class=\"mc-navbar\">\n            <ng-content select=\"[${MC_NAVBAR_CONTAINER}],${MC_NAVBAR_CONTAINER}\"></ng-content>\n        </nav>\n    `,\n    styleUrls: ['./navbar.css'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class McNavbar implements AfterViewInit, OnDestroy {\n\n    private readonly forceRecalculateItemsWidth: boolean = false;\n    private readonly resizeDebounceInterval: number = 100;\n    private readonly firstLevelElement: string = MC_NAVBAR_CONTAINER;\n    private readonly secondLevelElements: string[] = [\n        MC_NAVBAR_ITEM,\n        MC_NAVBAR_BRAND,\n        MC_NAVBAR_TITLE\n    ];\n\n    private _totalItemsWidths: number;\n    private _itemsWidths: CachedItemWidth[];\n\n    private get maxAllowedWidth(): number {\n        return this._elementRef.nativeElement.querySelector('nav').getBoundingClientRect().width;\n    }\n\n    private get itemsWidths(): CachedItemWidth[] {\n        if (this._itemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._itemsWidths;\n        }\n\n        this.calculateAndCacheItemsWidth();\n\n        return this._itemsWidths;\n    }\n\n    private get totalItemsWidth(): number {\n        if (this._totalItemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._totalItemsWidths;\n        }\n\n        this.calculateAndCacheTotalItemsWidth();\n\n        return this._totalItemsWidths;\n    }\n\n    private _resizeSubscription: Subscription;\n\n    constructor(\n        private _elementRef: ElementRef\n    ) {\n        const resizeObserver = fromEvent(window, 'resize')\n            .pipe(debounceTime(this.resizeDebounceInterval));\n\n        this._resizeSubscription = resizeObserver.subscribe(this.updateCollapsed.bind(this));\n    }\n\n    updateCollapsed(): void {\n        let collapseDelta = this.totalItemsWidth - this.maxAllowedWidth;\n\n        for (let i = this.itemsWidths.length - 1; i >= 0; i--) {\n            const item = this.itemsWidths[i];\n\n            if (!item.canCollapse) {\n                continue;\n            }\n\n            item.processCollapsed(collapseDelta > 0);\n            collapseDelta -= item.collapsedItemsWidth;\n        }\n    }\n\n    ngAfterViewInit(): void {\n        // Note: this wait is required for loading and rendering fonts for icons;\n        // unfortunately we cannot control font rendering\n        setTimeout(() => this.updateCollapsed(), 0);\n    }\n\n    ngOnDestroy() {\n        this._resizeSubscription.unsubscribe();\n    }\n\n    private calculateAndCacheTotalItemsWidth() {\n        this._totalItemsWidths = this.itemsWidths\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getOuterElementWidth(element: HTMLElement): number {\n        const baseWidth  = element.getBoundingClientRect().width;\n        const marginRight = parseInt(getComputedStyle(element).getPropertyValue('margin-right'));\n        const marginLeft = parseInt(getComputedStyle(element).getPropertyValue('margin-left'));\n\n        return baseWidth + marginRight + marginLeft;\n    }\n\n    private calculateAndCacheItemsWidth() {\n        const allItemsSelector = this.secondLevelElements\n            .map((e: string) => `${this.firstLevelElement}>${e}`);\n        const allItems: HTMLElement[] = Array.from(this._elementRef.nativeElement.querySelectorAll(allItemsSelector));\n\n        this._itemsWidths = allItems\n            .map((el) => new CachedItemWidth(el, this.getOuterElementWidth(el), this.getItemsForCollapse(el)));\n    }\n\n    private getItemsForCollapse(element: HTMLElement): CollapsibleItem[] {\n        const icon = element.querySelector(`[${MC_ICON}],${MC_NAVBAR_LOGO},[${MC_NAVBAR_LOGO}]`);\n\n        if (!icon) {\n            return [];\n        }\n\n        return Array.from(element.querySelectorAll(MC_NAVBAR_TITLE))\n            .map((el) => new CollapsibleItem(<HTMLElement> el, el.getBoundingClientRect().width));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport {\n    McNavbar,\n    McNavbarContainer,\n    McNavbarItem,\n    McNavbarTitle,\n    McNavbarBrand,\n    McNavbarLogo\n} from './navbar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        McIconModule\n    ],\n    exports: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ],\n    declarations: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ]\n})\nexport class McNavbarModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressBarMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressBarBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressBarMixinBase = mixinColor(McProgressBarBase);\n\n@Component({\n    selector: 'mc-progress-bar',\n    templateUrl: './progress-bar.component.html',\n    styleUrls: ['./progress-bar.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-bar',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressBar extends _McProgressBarMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-bar-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressBarMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McProgressBar\n} from './progress-bar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressBar\n    ],\n    declarations: [\n        McProgressBar\n    ]\n})\nexport class McProgressBarModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressSpinnerBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressPinnerMixinBase = mixinColor(McProgressSpinnerBase);\n\nconst MAX_DASH_ARRAY = 273;\n\n@Component({\n    selector: 'mc-progress-spinner',\n    templateUrl: './progress-spinner.component.html',\n    styleUrls: ['./progress-spinner.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-spinner',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressSpinner extends _McProgressPinnerMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-spinner-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressSpinnerMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n\n    get dashOffsetPercent(): string {\n        return `${MAX_DASH_ARRAY - this.percentage * MAX_DASH_ARRAY}%`;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McProgressSpinner } from './progress-spinner.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressSpinner\n    ],\n    declarations: [\n        McProgressSpinner\n    ]\n})\nexport class McProgressSpinnerModule {}\n","import {\n    AfterContentInit, AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef,\n    Input, OnDestroy, OnInit, Optional, Output, QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\n\nimport {UniqueSelectionDispatcher} from '@ptsecurity/cdk/collections';\n\nimport {\n    CanColor,\n    CanDisable,\n    HasTabIndex,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/** Change event object emitted by McRadio. */\nexport class McRadioChange {\n    constructor(\n        /** The McRadioButton that emits the change event. */\n        public source: McRadioButton,\n        /** The value of the McRadioButton. */\n        public value: any) {}\n}\n\n// Boilerplate for applying mixins to McRadioGroup.\n/** @docs-private */\nexport class McRadioGroupBase { }\nexport const _McRadioGroupMixinBase = mixinDisabled(McRadioGroupBase);\n\n/**\n * Provider Expression that allows mc-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McRadioGroup),\n    multi: true\n};\n\n@Directive({\n    selector: 'mc-radio-group',\n    exportAs: 'mcRadioGroup',\n    providers: [MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n    host: {\n        'role': 'radiogroup',\n        'class': 'mc-radio-group'\n    },\n    inputs: ['disabled']\n})\nexport class McRadioGroup extends _McRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** Child radio buttons. */\n    @ContentChildren(forwardRef(() => McRadioButton), { descendants: true })\n    _radios: QueryList<McRadioButton>;\n\n    /**\n     * Selected value for group. Should equal the value of the selected radio button if there *is*\n     * a corresponding radio button with a matching value. If there is *not* such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    private _value: any = null;\n\n    /** The HTML name attribute applied to radio buttons in this group. */\n    private _name: string = `mc-radio-group-${nextUniqueId++}`;\n\n    /** The currently selected radio button. Should match value. */\n    private _selected: McRadioButton | null = null;\n\n    /** Whether the `value` has been set to its initial value. */\n    private _isInitialized: boolean = false;\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    private _labelPosition: 'before' | 'after' = 'after';\n\n    /** Whether the radio group is disabled. */\n    private _disabled: boolean = false;\n\n    /** Whether the radio group is required. */\n    private _required: boolean = false;\n\n    /** The method to be called in order to update ngModel */\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @docs-private\n     */\n    onTouched: () => any = () => {};\n\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    @Input()\n    get name(): string { return this._name; }\n    set name(value: string) {\n        this._name = value;\n        this.updateRadioButtonNames();\n    }\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this.markRadiosForCheck();\n    }\n\n    /** Value of the radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n\n            this.updateSelectedRadioFromValue();\n            this.checkSelectedRadioButton();\n        }\n    }\n\n    checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n\n    /** Whether the radio button is selected. */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: McRadioButton | null) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this.checkSelectedRadioButton();\n    }\n\n    /** Whether the radio group is disabled */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /** Whether the radio group is required */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    constructor(private _changeDetector: ChangeDetectorRef) {\n        super();\n    }\n\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on McRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the McRadioGroup.\n        this._isInitialized = true;\n    }\n\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        if (this._isInitialized) {\n            this.change.emit(new McRadioChange(this._selected!, this._value));\n        }\n    }\n\n    markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach((radio) => radio.markForCheck());\n        }\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n\n    private updateRadioButtonNames(): void {\n        if (this._radios) {\n            this._radios.forEach((radio) => {\n                radio.name = this.name;\n            });\n        }\n    }\n\n    /** Updates the `selected` radio button from the internal _value state. */\n    private updateSelectedRadioFromValue(): void {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected != null && this._selected.value === this._value;\n\n        if (this._radios != null && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach((radio) => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n}\n\n\n// Boilerplate for applying mixins to McRadioButton.\n/** @docs-private */\nexport class McRadioButtonBase {\n    // Since the disabled property is manually defined for the McRadioButton and isn't set up in\n    // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n    // defined to properly work.\n    disabled: boolean;\n\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McRadioButtonMixinBase =\n    mixinColor(mixinTabIndex(McRadioButtonBase));\n\n\n@Component({\n    selector: 'mc-radio-button',\n    templateUrl: 'radio.component.html',\n    styleUrls: ['radio.css'],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    exportAs: 'mcRadioButton',\n    host: {\n        class: 'mc-radio-button',\n        '[attr.id]': 'id',\n        '[class.mc-radio-checked]': 'checked',\n        '[class.mc-radio-disabled]': 'disabled',\n        '(focus)': '_inputElement.nativeElement.focus()'\n    }\n})\nexport class McRadioButton extends _McRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, HasTabIndex {\n\n    private _uniqueId: string = `mc-radio-${++nextUniqueId}`;\n\n    /* tslint:disable:member-ordering */\n\n    /** The unique ID for the radio button. */\n    @Input() id: string = this._uniqueId;\n\n    /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n    @Input() name: string;\n\n    /** Used to set the 'aria-label' attribute on the underlying input element. */\n    @Input('aria-label') ariaLabel: string;\n\n    /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n    @Input('aria-labelledby') ariaLabelledby: string;\n\n    /** The 'aria-describedby' attribute is read after the element's label and field type. */\n    @Input('aria-describedby') ariaDescribedby: string;\n\n    /** Whether this radio button is checked. */\n    @Input()\n    get checked(): boolean { return this._checked; }\n    set checked(value: boolean) {\n        const newCheckedState = toBoolean(value);\n\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** The value of this radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(value: any) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup != null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n\n    /** Whether the radio button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n    }\n    set disabled(value: boolean) {\n        const newDisabledState = toBoolean(value);\n\n        if (this._disabled !== newDisabledState) {\n\n            this._disabled = newDisabledState;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** Whether the radio button is required. */\n    @Input()\n    get required(): boolean {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    private _labelPosition: 'before' | 'after';\n\n    /** The native `<input type=radio>` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** The parent radio group. May or may not be present. */\n    radioGroup: McRadioGroup;\n\n    @Input()\n    isFocused: boolean = false;\n\n    /** ID of the native input element inside `<mc-radio-button>` */\n    get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n    /** Whether this radio is checked. */\n    private _checked: boolean = false;\n\n    /** Whether this radio is disabled. */\n    private _disabled: boolean;\n\n    /** Whether this radio is required. */\n    private _required: boolean;\n\n    /** Value assigned to this radio. */\n    private _value: any = null;\n\n    /** Unregister function for _radioDispatcher */\n    private removeUniqueSelectionListener: () => void = () => {};\n\n    constructor(\n        @Optional() radioGroup: McRadioGroup,\n        elementRef: ElementRef,\n        private _changeDetector: ChangeDetectorRef,\n        private _radioDispatcher: UniqueSelectionDispatcher\n    ) {\n\n        super(elementRef);\n\n        this.radioGroup = radioGroup;\n\n        this.removeUniqueSelectionListener =\n            _radioDispatcher.listen((id: string, name: string) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n\n    ngAfterViewInit() {}\n\n    ngOnDestroy() {\n        this.removeUniqueSelectionListener();\n    }\n\n    /** Focuses the radio button. */\n    focus(): void {}\n\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n\n    onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n\n    onInputChange(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this.emitChangeEvent();\n\n        if (this.radioGroup) {\n            this.radioGroup.controlValueAccessorChangeFn(this.value);\n            this.radioGroup.touch();\n            if (groupValueChanged) {\n                this.radioGroup.emitChangeEvent();\n            }\n        }\n    }\n\n    /** Dispatch change event with current value. */\n    private emitChangeEvent(): void {\n        this.change.emit(new McRadioChange(this, this._value));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport {A11yModule} from '@ptsecurity/cdk/a11y';\nimport {McCommonModule} from '@ptsecurity/mosaic/core';\n\nimport {McRadioButton, McRadioGroup} from './radio.component';\n\n\n@NgModule({\n    imports: [ CommonModule, A11yModule, McCommonModule ],\n    exports: [ McRadioGroup, McRadioButton, McCommonModule ],\n    declarations: [ McRadioGroup, McRadioButton ]\n})\nexport class McRadioModule {}\n","import { Directive, Input } from '@angular/core';\n\nimport { CdkTreeNodeDef } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodeDef]',\n    inputs: ['when: mcTreeNodeDefWhen'],\n    providers: [{ provide: CdkTreeNodeDef, useExisting: McTreeNodeDef }]\n})\nexport class McTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n    @Input('mcTreeNode') data: T;\n}\n","import { Directive, Input, OnInit } from '@angular/core';\nimport { CdkTreeNodePadding } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodePadding]',\n    providers: [{ provide: CdkTreeNodePadding, useExisting: McTreeNodePadding }]\n})\nexport class McTreeNodePadding<T> extends CdkTreeNodePadding<T> implements OnInit {\n    get leftPadding(): number {\n        return (this._withIcon ? 0 : this._iconWidth) + this._baseLeftPadding;\n    }\n\n    _baseLeftPadding: number = 6;\n    _iconWidth: number = 20;\n    _indent: number = 16;\n\n    @Input('mcTreeNodePadding') level: number;\n\n    @Input('mcTreeNodePaddingIndent') indent: number;\n\n    _withIcon: boolean;\n\n    _paddingIndent(): string | null {\n        const nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)\n            ? this._tree.treeControl.getLevel(this._treeNode.data)\n            : null;\n\n        const level = this._level || nodeLevel;\n\n        return level ? `${(level * this._indent) + this.leftPadding}px` : `${this._baseLeftPadding}px`;\n    }\n\n    ngOnInit(): void {\n        this._withIcon = this._tree.treeControl.isExpandable(this._treeNode.data);\n        this._setPadding();\n    }\n}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-cleaner',\n    template: '<i mc-icon=\"mc-close-M_16\" class=\"mc-cleaner__icon\"></i>'\n})\nexport class McCleaner {\n}\n","import { NgControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\n\n/** An interface which allows a control to work inside of a `MсFormField`. */\nexport abstract class McFormFieldControl<T> {\n    /** The value of the control. */\n    value: T | null;\n\n    /**\n     * Stream that emits whenever the state of the control changes such that the parent `MсFormField`\n     * needs to run change detection.\n     */\n    readonly stateChanges: Observable<void>;\n\n    /** The element ID for this control. */\n    readonly id: string;\n\n    /** The placeholder for this control. */\n    readonly placeholder: string;\n\n    /** Gets the NgControl for this control. */\n    readonly ngControl: NgControl | null;\n\n    /** Whether the control is focused. */\n    readonly focused: boolean;\n\n    /** Whether the control is empty. */\n    readonly empty: boolean;\n\n    /** Whether the control is required. */\n    readonly required: boolean;\n\n    /** Whether the control is disabled. */\n    readonly disabled: boolean;\n\n    /** Whether the control is in an error state. */\n    readonly errorState: boolean;\n\n    /**\n     * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n     * based on their control type. The form field will add a class,\n     * `mat-form-field-type-{{controlType}}` to its root element.\n     */\n    readonly controlType?: string;\n\n    /** Handles a click on the control's container. */\n    abstract onContainerClick(event: MouseEvent): void;\n}\n","import { Directive, Input } from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n@Directive({\n    selector: 'mc-hint',\n    host: {\n        class: 'mc-hint',\n        '[attr.id]': 'id'\n    }\n})\nexport class McHint {\n    @Input() id: string = `mc-hint-${nextUniqueId++}`;\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcPrefix]'\n})\nexport class McPrefix {\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcSuffix]'\n})\nexport class McSuffix {\n}\n","import {\n    AfterContentChecked,\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren, Directive,\n    ElementRef,\n    QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { EMPTY, merge } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n\n\nimport { McCleaner } from './cleaner';\nimport { McFormFieldControl } from './form-field-control';\nimport { getMcFormFieldMissingControlError } from './form-field-errors';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McSuffix } from './suffix';\n\n\nexport class McFormFieldBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\n@Component({\n    selector: 'mc-form-field',\n    exportAs: 'mcFormField',\n    templateUrl: 'form-field.html',\n    // McInput is a directive and can't have styles, so we need to include its styles here.\n    // The McInput styles are fairly minimal so it shouldn't be a big deal for people who\n    // aren't using McInput.\n    styleUrls: [\n        'form-field.css',\n        '../input/input.css'\n    ],\n    host: {\n        class: 'mc-form-field',\n        '[class.mc-form-field_invalid]': '_control.errorState',\n        '[class.mc-form-field_disabled]': '_control.disabled',\n        '[class.mc-form-field_has-prefix]': 'hasPrefix',\n        '[class.mc-form-field_has-suffix]': 'hasSuffix',\n        '[class.mc-form-field_has-cleaner]': 'canShowCleaner',\n        '[class.mc-focused]': '_control.focused',\n        '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n        '[class.ng-touched]': '_shouldForward(\"touched\")',\n        '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n        '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n        '[class.ng-valid]': '_shouldForward(\"valid\")',\n        '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n        '[class.ng-pending]': '_shouldForward(\"pending\")',\n        '(keydown)': 'onKeyDown($event)'\n    },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class McFormField extends McFormFieldBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit {\n\n    @ContentChild(McFormFieldControl) _control: McFormFieldControl<any>;\n    @ContentChildren(McHint) _hint: QueryList<McHint>;\n    @ContentChildren(McSuffix) _suffix: QueryList<McSuffix>;\n    @ContentChildren(McPrefix) _prefix: QueryList<McPrefix>;\n    @ContentChildren(McCleaner) _cleaner: QueryList<McCleaner>;\n\n\n    constructor(\n        public _elementRef: ElementRef,\n        private _changeDetectorRef: ChangeDetectorRef) {\n        super(_elementRef);\n    }\n\n    ngAfterContentInit() {\n        this._validateControlChild();\n        if (this._control.controlType) {\n            this._elementRef.nativeElement.classList\n                .add(`mc-form-field-type-${this._control.controlType}`);\n        }\n\n        // Subscribe to changes in the child control state in order to update the form field UI.\n        this._control.stateChanges.pipe(startWith()).subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n        });\n\n        // Run change detection if the value changes.\n        const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n        merge(valueChanges)\n            .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    ngAfterContentChecked() {\n        this._validateControlChild();\n    }\n\n    ngAfterViewInit() {\n        // Avoid animations on load.\n        this._changeDetectorRef.detectChanges();\n    }\n\n    clearValue($event) {\n        $event.stopPropagation();\n\n        if (this._control && this._control.ngControl) {\n            this._control.ngControl.reset();\n        }\n    }\n\n    onContainerClick($event) {\n        return this._control.onContainerClick && this._control.onContainerClick($event);\n    }\n\n    onKeyDown(e: KeyboardEvent): void {\n        if (e.keyCode === ESCAPE &&\n            this._control.focused &&\n            this.hasCleaner) {\n            if (this._control && this._control.ngControl) {\n                this._control.ngControl.reset();\n            }\n            e.preventDefault();\n        }\n    }\n\n    /** Determines whether a class from the NgControl should be forwarded to the host element. */\n    _shouldForward(prop: string): boolean {\n        const ngControl = this._control ? this._control.ngControl : null;\n\n        return ngControl && ngControl[prop];\n    }\n\n    /** Throws an error if the form field's control is missing. */\n    protected _validateControlChild() {\n        if (!this._control) {\n            throw getMcFormFieldMissingControlError();\n        }\n    }\n\n    get hasHint() {\n        return this._hint && this._hint.length > 0;\n    }\n\n    get hasSuffix() {\n        return this._suffix && this._suffix.length > 0;\n    }\n\n    get hasPrefix() {\n        return this._prefix && this._prefix.length > 0;\n    }\n\n    get hasCleaner() {\n        return this._cleaner && this._cleaner.length > 0;\n    }\n\n    get canShowCleaner() {\n        return  this.hasCleaner &&\n        this._control && this._control.ngControl\n            ? this._control.ngControl.value && !this._control.disabled\n            : false;\n    }\n}\n\n@Directive({\n    selector: 'mc-form-field[mcFormFieldWithoutBorders]',\n    exportAs: 'mcFormFieldWithoutBorders',\n    host: { class: 'mc-form-field_without-borders' }\n})\nexport class McFormFieldWithoutBorders {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McCleaner } from './cleaner';\nimport { McFormField, McFormFieldWithoutBorders } from './form-field';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McSuffix } from './suffix';\n\n\n@NgModule({\n    declarations: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner\n    ],\n    imports: [CommonModule, McIconModule],\n    exports: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner\n    ]\n})\nexport class McFormFieldModule {\n}\n","import { InjectionToken } from '@angular/core';\n\n\nexport const MC_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{ value: any }>('MC_INPUT_VALUE_ACCESSOR');\n","import {\n    Directive, DoCheck, ElementRef, Inject, Input, OnChanges,\n    OnDestroy, OnInit, Optional, Self\n} from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@ptsecurity/cdk/platform';\nimport { CanUpdateErrorState, ErrorStateMatcher, mixinErrorState } from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\n\nimport { getMcInputUnsupportedTypeError } from './input-errors';\nimport { MC_INPUT_VALUE_ACCESSOR } from './input-value-accessor';\n\n\nconst MC_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\n\nlet nextUniqueId = 0;\n\nexport class McInputBase {\n    constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n                public _parentForm: NgForm,\n                public _parentFormGroup: FormGroupDirective,\n                public ngControl: NgControl) {\n    }\n}\n\nexport const _McInputMixinBase = mixinErrorState(McInputBase);\n\n\n@Directive({\n    selector: `input[mcInput]`,\n    exportAs: 'mcInput',\n    host: {\n        'class': 'mc-input',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '(blur)': '_focusChanged(false)',\n        '(focus)': '_focusChanged(true)',\n        '(input)': '_onInput()'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McInput }]\n})\nexport class McInput extends _McInputMixinBase implements McFormFieldControl<any>, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-input';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this._uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    // tslint:disable no-reserved-keywords\n    /** Input type of the element. */\n    @Input()\n    get type(): string {\n        return this._type;\n    }\n\n    set type(value: string) {\n        this._type = value || 'text';\n        this._validateType();\n\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    // tslint:enable no-reserved-keywords\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this._inputValueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n\n    protected _uid = `mc-input-${nextUniqueId++}`;\n    protected _previousNativeValue: any;\n    protected _disabled = false;\n    protected _id: string;\n    protected _required = false;\n    protected _type = 'text';\n    protected _neverEmptyInputTypes = [\n        'date',\n        'datetime',\n        'datetime-local',\n        'month',\n        'time',\n        'week'\n    ].filter((t) => getSupportedInputTypes().has(t));\n\n    private _inputValueAccessor: { value: any };\n\n    constructor(protected _elementRef: ElementRef,\n                protected _platform: Platform,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() _parentForm: NgForm,\n                @Optional() _parentFormGroup: FormGroupDirective,\n                _defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_INPUT_VALUE_ACCESSOR) inputValueAccessor: any) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n        this._previousNativeValue = this.value;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n    }\n\n    /** Focuses the input. */\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Does some manual dirty checking on the native input `value` property. */\n    protected _dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Make sure the input is a supported type. */\n    protected _validateType() {\n        if (MC_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n            throw getMcInputUnsupportedTypeError(this._type);\n        }\n    }\n\n    /** Checks whether the input type is one of the types that are never empty. */\n    protected _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n\n    /** Checks whether the input is invalid based on the native validation. */\n    protected _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        const validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n\n        return validity && validity.badInput;\n    }\n}\n\n@Directive({\n    selector: 'input[mcInputMonospace]',\n    exportAs: 'McInputMonospace',\n    host: { class: 'mc-input_monospace' }\n})\nexport class McInputMono {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McInput, McInputMono } from './input';\n\n\n@NgModule({\n    imports: [ CommonModule, A11yModule, McCommonModule, FormsModule ],\n    exports: [ McInput, McInputMono ],\n    declarations: [ McInput, McInputMono ]\n})\nexport class McInputModule {}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    Output,\n    QueryList,\n    ViewEncapsulation,\n    ChangeDetectorRef,\n    Inject,\n    OnDestroy,\n    OnInit,\n    ViewChild\n} from '@angular/core';\n\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { Subscription } from 'rxjs';\n\nimport { FocusKeyManager, IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { END, ENTER, HOME, PAGE_DOWN, PAGE_UP, SPACE } from '@ptsecurity/cdk/keycodes';\n\nimport {\n    McLine,\n    McLineSetter,\n    CanDisable,\n    mixinDisabled,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n    exportAs: 'mcListOption',\n    selector: 'mc-list-option',\n    host: {\n        tabindex: '-1',\n\n        class: 'mc-list-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': '_hasFocus',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()',\n        '(click)': '_handleClick()'\n    },\n    templateUrl: 'list-option.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListOption implements AfterContentInit, OnDestroy, OnInit, IFocusableOption {\n    _hasFocus: boolean = false;\n\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    @ViewChild('text') _text: ElementRef;\n\n    // Whether the label should appear before or after the checkbox. Defaults to 'after'\n    @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n    @Input() value: any;\n\n    private _focusHandlerInProgress: boolean;\n\n    @Input()\n    get disabled() {\n        return this._disabled || (this.listSelection && this.listSelection.disabled);\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    @Input()\n    get selected(): boolean {\n        return this.listSelection.selectedOptions && this.listSelection.selectedOptions.isSelected(this) || false;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            this.listSelection._reportValueChange();\n        }\n    }\n\n    private _lineSetter: McLineSetter;\n    private _selected = false;\n    private _disabled = false;\n\n    constructor(\n        private _element: ElementRef,\n        private _changeDetector: ChangeDetectorRef,\n        @Inject(forwardRef(() => McListSelection))\n        public listSelection: McListSelection\n    ) {}\n\n    ngOnInit() {\n        if (this._selected) {\n            // List options that are selected at initialization can't be reported properly to the form\n            // control. This is because it takes some time until the selection-list knows about all\n            // available options. Also it can happen that the ControlValueAccessor has an initial value\n            // that should be used instead. Deferring the value change report to the next tick ensures\n            // that the form control value is not being overwritten.\n            const wasSelected = this._selected;\n\n            Promise.resolve().then(() => {\n                if (this._selected || wasSelected) {\n                    this.selected = true;\n                    this._changeDetector.markForCheck();\n                }\n            });\n        }\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    ngOnDestroy(): void {\n        if (this.selected) {\n            // We have to delay this until the next tick in order\n            // to avoid changed after checked errors.\n            Promise.resolve().then(() => this.selected = false);\n        }\n\n        this.listSelection._removeOptionFromList(this);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    focus(): void {\n        this._element.nativeElement.focus();\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    getLabel() {\n        return this._text ? this._text.nativeElement.textContent : '';\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.listSelection.selectedOptions) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.listSelection.selectedOptions.select(this);\n        } else {\n            this.listSelection.selectedOptions.deselect(this);\n        }\n\n        this._changeDetector.markForCheck();\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    _handleClick() {\n        if (this.disabled) { return; }\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    _handleFocus() {\n        if (this.disabled || this._hasFocus) { return; }\n\n        this._hasFocus = true;\n    }\n\n    _handleBlur() {\n        this._hasFocus = false;\n\n        this.listSelection._onTouched();\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n\n\nexport const MC_SELECTION_LIST_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McListSelection),\n    multi: true\n};\n\n// Change event that is being fired whenever the selected state of an option changes. */\nexport class McListSelectionChange {\n    constructor(\n        // Reference to the selection list that emitted the event.\n        public source: McListSelection,\n        // Reference to the option that has been changed.\n        public option: McListOption\n    ) {}\n}\n\n\nexport class McListSelectionBase {}\n\nexport const _McListSelectionMixinBase = mixinDisabled(McListSelectionBase);\n\n@Component({\n    exportAs: 'mcListSelection',\n    selector: 'mc-list-selection',\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'tabIndex'],\n    host: {\n        class: 'mc-list-selection',\n        '[tabIndex]': 'tabIndex',\n        '(focus)': 'focus()',\n        '(blur)': '_onTouched()',\n        '(keydown)': '_onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    providers: [MC_SELECTION_LIST_VALUE_ACCESSOR],\n    preserveWhitespaces: false\n})\nexport class McListSelection extends _McListSelectionMixinBase implements\n    IFocusableOption, CanDisable, AfterContentInit, ControlValueAccessor {\n\n    _keyManager: FocusKeyManager<McListOption>;\n\n    // The option components contained within this selection-list.\n    @ContentChildren(McListOption) options: QueryList<McListOption>;\n\n    tabIndex: number;\n\n    autoSelect: boolean;\n    noUnselect: boolean;\n    multiple: boolean;\n\n    // todo temporary solution\n    withShift: boolean;\n    withCtrl: boolean;\n\n    @Input() horizontal: boolean = false;\n\n    // Emits a change event whenever the selected state of an option changes.\n    @Output() readonly selectionChange: EventEmitter<McListSelectionChange> = new EventEmitter<McListSelectionChange>();\n\n    selectedOptions: SelectionModel<McListOption>;\n\n    // Used for storing the values that were assigned before the options were initialized.\n    private _tempValues: string[] | null;\n\n    private _modelChanges = Subscription.EMPTY;\n\n    constructor(\n        private _element: ElementRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string,\n        @Attribute('multiple') multiple: string\n    ) {\n        super();\n\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.multiple = multiple === null ? true : toBoolean(multiple);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.selectedOptions = new SelectionModel<McListOption>(this.multiple);\n    }\n\n    ngAfterContentInit(): void {\n        this.horizontal = toBoolean(this.horizontal);\n\n        this._keyManager = new FocusKeyManager<McListOption>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation(!this.horizontal)\n            .withHorizontalOrientation(this.horizontal ? 'ltr' : null);\n\n        if (this._tempValues) {\n            this._setOptionsFromValues(this._tempValues);\n            this._tempValues = null;\n        }\n\n        // Sync external changes to the model back to the options.\n        this._modelChanges = this.selectedOptions.onChange!.subscribe((event) => {\n            for (const item of event.added) {\n                item.selected = true;\n            }\n\n            for (const item of event.removed) {\n                item.selected = false;\n            }\n        });\n\n        this.updateScrollSize();\n    }\n\n    ngOnDestroy() {\n        this._modelChanges.unsubscribe();\n    }\n\n    focus() {\n        this._element.nativeElement.focus();\n    }\n\n    selectAll() {\n        this.options.forEach((option) => option.setSelected(true));\n\n        this._reportValueChange();\n    }\n\n    deselectAll() {\n        this.options.forEach((option) => option.setSelected(false));\n\n        this._reportValueChange();\n    }\n\n    updateScrollSize(): void {\n        if (this.horizontal || !this.options.first) { return; }\n\n        this._keyManager.withScrollSize(Math.floor(this._getHeight() / this.options.first._getHeight()));\n    }\n\n    // Sets the focused option of the selection-list.\n    setFocusedOption(option: McListOption): void {\n        this._keyManager.updateActiveItem(option);\n\n        if (this.withShift && this.multiple) {\n            const previousIndex = this._keyManager.previousActiveItemIndex;\n            const activeIndex = this._keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n\n            this.withShift = false;\n        } else if (this.withCtrl) {\n            this.withCtrl = false;\n\n            if (!this._canDeselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) {\n                this.options.forEach((item) => item.setSelected(false));\n                option.setSelected(true);\n            }\n        }\n\n        this._emitChangeEvent(option);\n        this._reportValueChange();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(values: string[]): void {\n        if (this.options) {\n            this._setOptionsFromValues(values || []);\n        } else {\n            this._tempValues = values;\n        }\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this._onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this._onTouched = fn;\n    }\n\n    // Implemented as a part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        if (this.options) {\n            this.options.forEach((option) => option.disabled = isDisabled);\n        }\n    }\n\n    getSelectedOptionValues(): string[] {\n        return this.options.filter((option) => option.selected).map((option) => option.value);\n    }\n\n    // Toggles the selected state of the currently focused option.\n    toggleFocusedOption(): void {\n        const focusedIndex = this._keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n            const focusedOption: McListOption = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this._canDeselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this._emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    _canDeselectLast(listOption: McListOption): boolean {\n        return !(this.noUnselect && this.selectedOptions.selected.length === 1 && listOption.selected);\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    // View to model callback that should be called if the list or its options lost focus.\n    _onTouched: () => void = () => {};\n\n    // Removes an option from the selection list and updates the active item.\n    _removeOptionFromList(option: McListOption) {\n        if (option._hasFocus) {\n            const optionIndex = this._getOptionIndex(option);\n\n            // Check whether the option is the last item\n            if (optionIndex > 0) {\n                this._keyManager.setPreviousItemActive();\n            } else if (optionIndex === 0 && this.options.length > 1) {\n                this._keyManager.setNextItemActive();\n            }\n        }\n    }\n\n    _onKeyDown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n        this.withShift = event.shiftKey;\n        this.withCtrl = event.ctrlKey;\n\n        switch (keyCode) {\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                if (!this.horizontal) { this._keyManager.setPreviousPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                if (!this.horizontal) { this._keyManager.setNextPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    // Reports a value change to the ControlValueAccessor\n    _reportValueChange() {\n        if (this.options) {\n            this._onChange(this.getSelectedOptionValues());\n        }\n    }\n\n    // Emits a change event if the selected state of an option changed.\n    _emitChangeEvent(option: McListOption) {\n        this.selectionChange.emit(new McListSelectionChange(this, option));\n    }\n\n    // Returns the option with the specified value.\n    private _getOptionByValue(value: string): McListOption | undefined {\n        return this.options.find((option) => option.value === value);\n    }\n\n    // Sets the selected options based on the specified values.\n    private _setOptionsFromValues(values: string[]) {\n        this.options.forEach((option) => option.setSelected(false));\n\n        values\n            .map((value) => this._getOptionByValue(value))\n            .filter(Boolean)\n            .forEach((option) => option!.setSelected(true));\n    }\n\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private _isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    // Returns the index of the specified list option.\n    private _getOptionIndex(option: McListOption): number {\n        return this.options.toArray().indexOf(option);\n    }\n\n    // View to model callback that should be called whenever the selected options change.\n    private _onChange: (value: any) => void = (_: any) => {};\n}\n","// todo пока не делаем, перенесено из материала, но у нас в доках таких простых списков нет.\nimport {\n    AfterContentInit, ChangeDetectionStrategy, Component, ContentChildren, Directive, ElementRef, QueryList,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { McLine, McLineSetter } from '@ptsecurity/mosaic/core';\n\n\nexport class McListBase {}\n\n@Component({\n    selector: 'mc-list',\n    host: { class: 'mc-list' },\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McList extends McListBase {}\n\n\n/**\n * Directive whose purpose is to add the mc- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n    selector: '[mc-subheader], [mcSubheader]',\n    host: { class: 'mc-subheader' }\n})\nexport class McListSubheaderCssStyler {}\n\n\n// Boilerplate for applying mixins to McListItem.\nexport class McListItemBase {}\n\n@Component({\n    selector: 'mc-list-item, a[mc-list-item]',\n    host: {\n        class: 'mc-list-item',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()'\n    },\n    templateUrl: './list-item.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListItem extends McListItemBase implements AfterContentInit {\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    private _lineSetter: McLineSetter;\n\n    constructor(private _element: ElementRef) {\n        super();\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    _handleFocus() {\n        this._element.nativeElement.classList.add('mc-focused');\n    }\n\n    _handleBlur() {\n        this._element.nativeElement.classList.remove('mc-focused');\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLineModule } from '@ptsecurity/mosaic/core';\n\nimport { McListSelection, McListOption } from './list-selection.component';\nimport { McList, McListItem, McListSubheaderCssStyler } from './list.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        McLineModule\n    ],\n    exports: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ],\n    declarations: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ]\n})\nexport class McListModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","\nexport function isBoolean(val: any): val is boolean { return typeof val === 'boolean'; }\n\nexport function toBoolean(value: any): boolean {\n    return value != null && `${value}` !== 'false';\n}\n","import { NgModule, InjectionToken, Optional, Inject, isDevMode } from '@angular/core';\nimport { BidiModule } from '@ptsecurity/cdk/bidi';\n\n\n// Injection token that configures whether the Mosaic sanity checks are enabled.\nexport const MC_SANITY_CHECKS = new InjectionToken<boolean>('mc-sanity-checks', {\n    providedIn: 'root',\n    factory: MC_SANITY_CHECKS_FACTORY\n});\n\nexport function MC_SANITY_CHECKS_FACTORY(): boolean {\n    return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Mosaic\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n    imports: [ BidiModule ],\n    exports: [ BidiModule ]\n})\nexport class McCommonModule {\n    // Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n    private _hasDoneGlobalChecks = false;\n\n    // Reference to the global `document` object.\n    private _document = typeof document === 'object' && document ? document : null;\n\n    // Reference to the global 'window' object.\n    private _window = typeof window === 'object' && window ? window : null;\n\n    constructor(@Optional() @Inject(MC_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n        if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n            this._checkDoctypeIsDefined();\n            this._checkThemeIsPresent();\n            this._hasDoneGlobalChecks = true;\n        }\n    }\n\n    // Whether any sanity checks are enabled\n    private _areChecksEnabled(): boolean {\n        return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n    }\n\n    // Whether the code is running in tests.\n    private _isTestEnv() {\n        return this._window && (this._window['__karma__'] || this._window['jasmine']);\n    }\n\n    private _checkDoctypeIsDefined(): void {\n        if (this._document && !this._document.doctype) {\n            console.warn(\n                'Current document does not have a doctype. This may cause ' +\n                'some Mosaic components not to behave as expected.'\n            );\n        }\n    }\n\n    private _checkThemeIsPresent(): void {\n        if (this._document && typeof getComputedStyle === 'function') {\n            const testElement = this._document.createElement('div');\n\n            testElement.classList.add('mc-theme-loaded-marker');\n            this._document.body.appendChild(testElement);\n\n            const computedStyle = getComputedStyle(testElement);\n\n            // In some situations, the computed style of the test element can be null. For example in\n            // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n            // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n            if (computedStyle && computedStyle.display !== 'none') {\n                console.warn(\n                    'Could not find Mosaic core theme. Most Mosaic ' +\n                    'components may not work as expected. For more info refer ' +\n                    'to the theming guide: link there'\n                );\n            }\n\n            this._document.body.removeChild(testElement);\n        }\n    }\n}\n","import { toBoolean } from '../utils/index';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanDisable {\n    disabled: boolean;\n}\n\n// Mixin to augment a directive with a `disabled` property.\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n    return class extends base {\n        private _disabled: boolean = false;\n\n        get disabled() {\n            return this._disabled;\n        }\n\n        set disabled(value: any) {\n            this._disabled = toBoolean(value);\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n    };\n}\n","import { ElementRef } from '@angular/core';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanColor {\n    color: ThemePalette;\n}\n\nexport interface HasElementRef {\n    _elementRef: ElementRef;\n}\n\nexport enum ThemePalette {\n    Primary = 'primary',\n    Second = 'second',\n    Warn = 'warn',\n    Default = 'second'\n}\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T, defaultColor: ThemePalette = ThemePalette.Default): Constructor<CanColor> & T {\n    return class extends base {\n        private _color: ThemePalette;\n\n        get color(): ThemePalette {\n            return this._color;\n        }\n\n        set color(value: ThemePalette) {\n            const colorPalette = value || defaultColor;\n\n            if (colorPalette !== this._color) {\n                if (this._color) {\n                    this._elementRef.nativeElement.classList.remove(`mc-${this._color}`);\n                }\n\n                if (colorPalette) {\n                    this._elementRef.nativeElement.classList.add(`mc-${colorPalette}`);\n                }\n\n                this._color = colorPalette;\n            }\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n\n            // Set the default color that can be specified from the mixin.\n            this.color = defaultColor;\n        }\n    };\n}\n\n","import { Constructor } from './constructor';\nimport { CanDisable } from './disabled';\n\n\nexport interface HasTabIndex {\n    tabIndex: number;\n}\n\n// Mixin to augment a directive with a `tabIndex` property.\nexport function mixinTabIndex<\n        T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0): Constructor<HasTabIndex\n    > & T {\n    return class extends base {\n        private _tabIndex: number = defaultTabIndex;\n\n        get tabIndex(): number {\n            return this.disabled ? -1 : this._tabIndex;\n        }\n\n        set tabIndex(value: number) {\n            this._tabIndex = value != null ? value : defaultTabIndex;\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n    };\n}\n","import { FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { ErrorStateMatcher } from '../error/error-options';\nimport { Constructor } from './constructor';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n    readonly stateChanges: Subject<void>;\n    errorState: boolean;\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState();\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n    _parentFormGroup: FormGroupDirective;\n    _parentForm: NgForm;\n    _defaultErrorStateMatcher: ErrorStateMatcher;\n    ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n    : Constructor<CanUpdateErrorState> & T {\n    return class extends base {\n        /** Whether the component is in an error state. */\n        errorState: boolean = false;\n\n        /**\n         * Stream that emits whenever the state of the input changes such that the wrapping\n         * `MсFormField` needs to run change detection.\n         */\n        readonly stateChanges = new Subject<void>();\n\n        errorStateMatcher: ErrorStateMatcher;\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n\n        updateErrorState() {\n            const oldState = this.errorState;\n            const parent = this._parentFormGroup || this._parentForm;\n            const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n            const control = this.ngControl ? this.ngControl.control as FormControl : null;\n            const newState = matcher.isErrorState(control, parent);\n\n            if (newState !== oldState) {\n                this.errorState = newState;\n                this.stateChanges.next();\n            }\n        }\n    };\n}\n","export function getMcFormFieldMissingControlError(): Error {\n  return Error('mc-form-field must contain a McFormFieldControl.');\n}\n","export function getMcInputUnsupportedTypeError(inputType: string): Error {\n    return Error(`Input type \"${inputType}\" isn't supported by mcInput.`);\n}\n","import { NgModule, Directive, ElementRef, QueryList } from '@angular/core';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(McLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n    selector: '[mc-line], [mcLine]',\n    host: { class: 'mc-line' }\n})\nexport class McLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class McLineSetter {\n    constructor(private _lines: QueryList<McLine>, private _element: ElementRef) {\n        this._setLineClass(this._lines.length);\n\n        this._lines.changes.subscribe(() => {\n            this._setLineClass(this._lines.length);\n        });\n    }\n\n    private _setLineClass(count: number): void {\n        this._resetClasses();\n        if (count === 2 || count === 3) {\n            this._setClass(`mc-${count}-line`, true);\n        } else if (count > 3) {\n            this._setClass(`mc-multi-line`, true);\n        }\n    }\n\n    private _resetClasses(): void {\n        this._setClass('mc-2-line', false);\n        this._setClass('mc-3-line', false);\n        this._setClass('mc-multi-line', false);\n    }\n\n    private _setClass(className: string, isAdd: boolean): void {\n        if (isAdd) {\n            this._element.nativeElement.classList.add(className);\n        } else {\n            this._element.nativeElement.classList.remove(className);\n        }\n    }\n}\n\n@NgModule({\n    imports: [],\n    exports: [McLine],\n    declarations: [McLine]\n})\nexport class McLineModule {}\n","import { Injectable } from '@angular/core';\nimport { FormGroupDirective, NgForm, FormControl } from '@angular/forms';\n\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n    }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({ providedIn: 'root' })\nexport class ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n    }\n}\n","import { Component, ViewEncapsulation, Input, ChangeDetectionStrategy } from '@angular/core';\n\n\nexport type McPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mc-primary .mc-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mc-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'mc-pseudo-checkbox',\n    styleUrls: ['pseudo-checkbox.css'],\n    template: '',\n    host: {\n        class: 'mc-pseudo-checkbox',\n        '[class.mc-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n        '[class.mc-pseudo-checkbox-checked]': 'state === \"checked\"',\n        '[class.mc-pseudo-checkbox-disabled]': 'disabled'\n    }\n})\nexport class McPseudoCheckbox {\n    // Display state of the checkbox.\n    @Input() state: McPseudoCheckboxState = 'unchecked';\n\n    // Whether the checkbox is disabled.\n    @Input() disabled: boolean = false;\n}\n","import { NgModule } from '@angular/core';\n\nimport { McPseudoCheckbox } from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n    exports: [McPseudoCheckbox],\n    declarations: [McPseudoCheckbox]\n})\nexport class McPseudoCheckboxModule {}\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","import {\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { mixinColor, CanColor } from '@ptsecurity/mosaic/core';\n\n\n@Directive({\n    selector: '[mc-icon]',\n    host: { class: 'mc mc-icon' }\n})\nexport class McIconCSSStyler {}\n\n\nexport class McIconBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McIconMixinBase = mixinColor(McIconBase);\n\n\n@Component({\n    selector: `[mc-icon]`,\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./icon.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McIcon extends _McIconMixinBase implements CanColor {\n    constructor(elementRef: ElementRef, @Attribute('mc-icon') iconName: string) {\n        super(elementRef);\n\n        elementRef.nativeElement.classList.add(iconName);\n    }\n\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McIcon,\n    McIconCSSStyler\n} from './icon.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McIcon,\n        McIconCSSStyler\n    ],\n    declarations: [\n        McIcon,\n        McIconCSSStyler\n    ]\n})\nexport class McIconModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    OnDestroy,\n    QueryList,\n    ViewEncapsulation,\n    ContentChildren\n} from '@angular/core';\n\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { Platform } from '@ptsecurity/cdk/platform';\n\nimport { mixinColor, mixinDisabled, CanColor, CanDisable } from '@ptsecurity/mosaic/core';\nimport { McIcon } from '@ptsecurity/mosaic/icon';\n\n\n@Directive({\n    selector: 'button[mc-button], a[mc-button]',\n    host: { class: 'mc-button' }\n})\nexport class McButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-xs-button], a[mc-xs-button]',\n    host: { class: 'mc-button mc-button_xs' }\n})\nexport class McXSButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-sm-button], a[mc-sm-button]',\n    host: { class: 'mc-button mc-button_sm' }\n})\nexport class McSMButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-lg-button], a[mc-lg-button]',\n    host: { class: 'mc-button mc-button_lg' }\n})\nexport class McLGButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-xl-button], a[mc-xl-button]',\n    host: { class: 'mc-button mc-button_xl' }\n})\nexport class McXLButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-icon-button], a[mc-icon-button]',\n    queries: {\n        contentChildren: new ContentChildren(McIcon)\n    },\n    host: { class: 'mc-icon-button' }\n})\nexport class McIconButtonCSSStyler {\n    nativeElement: Element;\n\n    contentChildren: QueryList<McIcon>;\n\n    constructor(elementRef: ElementRef) {\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        this._addClassModificatorForIcons();\n    }\n\n    _addClassModificatorForIcons() {\n        const twoIcons = 2;\n        const icons = this.contentChildren.map((item) => item._elementRef.nativeElement);\n\n        if (icons.length === 1) {\n            const iconElement = icons[0];\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-icon-button_left');\n                }\n\n                if (iconElement.previousSibling) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-icon-button_right');\n                }\n            }\n        } else if (icons.length === twoIcons) {\n            const firstIconElement = icons[0];\n            const secondIconElement = icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n}\n\n\nexport class McButtonBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McButtonMixinBase = mixinColor(mixinDisabled(McButtonBase));\n\n\n@Component({\n    selector: `\n        button[mc-button],\n        button[mc-xs-button],\n        button[mc-sm-button],\n        button[mc-lg-button],\n        button[mc-xl-button]\n    `,\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[disabled]': 'disabled || null'\n    }\n})\nexport class McButton extends _McButtonMixinBase implements OnDestroy, CanDisable, CanColor {\n    constructor(elementRef: ElementRef, private _platform: Platform, private _focusMonitor: FocusMonitor) {\n        super(elementRef);\n\n        this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this._getHostElement().focus();\n    }\n\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n\n\n@Component({\n    selector: 'a[mc-button], a[mc-xs-button], a[mc-sm-button], a[mc-lg-button], a[mc-xl-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[attr.tabindex]': 'disabled ? -1 : 0',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': '_haltDisabledEvents($event)'\n    }\n})\nexport class McAnchor extends McButton {\n    constructor(platform: Platform, focusMonitor: FocusMonitor, elementRef: ElementRef) {\n        super(elementRef, platform, focusMonitor);\n    }\n\n    _haltDisabledEvents(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\n\n\n@Component({\n    selector: 'button[mc-icon-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[attr.tabindex]': 'disabled ? -1 : 0',\n        '[attr.disabled]': 'disabled || null'\n    }\n})\nexport class McIconButton extends McButton {\n    constructor(platform: Platform, focusMonitor: FocusMonitor, elementRef: ElementRef) {\n        super(elementRef, platform, focusMonitor);\n    }\n\n    _haltDisabledEvents(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McButton,\n    McAnchor,\n    McIconButton,\n    McButtonCSSStyler,\n    McXSButtonCSSStyler,\n    McSMButtonCSSStyler,\n    McLGButtonCSSStyler,\n    McXLButtonCSSStyler,\n    McIconButtonCSSStyler\n} from './button.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McButton,\n        McAnchor,\n        McIconButton,\n        McButtonCSSStyler,\n        McXSButtonCSSStyler,\n        McSMButtonCSSStyler,\n        McLGButtonCSSStyler,\n        McXLButtonCSSStyler,\n        McIconButtonCSSStyler\n    ],\n    declarations: [\n        McButton,\n        McAnchor,\n        McIconButton,\n        McButtonCSSStyler,\n        McXSButtonCSSStyler,\n        McSMButtonCSSStyler,\n        McLGButtonCSSStyler,\n        McXLButtonCSSStyler,\n        McIconButtonCSSStyler\n    ]\n})\nexport class McButtonModule {}\n","import { InjectionToken } from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type McCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MC_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<McCheckboxClickAction>('mc-checkbox-click-action');\n","import {\n    AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport {\n    CanColor,\n    CanDisable,\n    HasTabIndex,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\nimport { MC_CHECKBOX_CLICK_ACTION, McCheckboxClickAction } from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mc-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McCheckbox),\n    multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n    /** The initial state of the component before any user interaction. */\n    Init,\n    /** The state representing the component when it's becoming checked. */\n    Checked,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate\n}\n\n/** Change event object emitted by McCheckbox. */\nexport class McCheckboxChange {\n    /** The source McCheckbox of the event. */\n    source: McCheckbox;\n    /** The new `checked` value of the checkbox. */\n    checked: boolean;\n}\n\n// Boilerplate for applying mixins to McCheckbox.\n/** @docs-private */\nexport class McCheckboxBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\nexport const _McCheckboxMixinBase =\n    mixinTabIndex(mixinColor(mixinDisabled(McCheckboxBase)));\n\n\n/**\n * A mosaic checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A McCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n */\n@Component({\n    selector: 'mc-checkbox',\n    templateUrl: 'checkbox.html',\n    styleUrls: ['checkbox.css'],\n    exportAs: 'mcCheckbox',\n    host: {\n        class: 'mc-checkbox',\n        '[id]': 'id',\n        '[attr.id]': 'id',\n        '[class.mc-checkbox-indeterminate]': 'indeterminate',\n        '[class.mc-checkbox-checked]': 'checked',\n        '[class.mc-checkbox-disabled]': 'disabled',\n        '[class.mc-checkbox-label-before]': 'labelPosition == \"before\"'\n    },\n    providers: [MC_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCheckbox extends _McCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex {\n\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     */\n    @Input('aria-label') ariaLabel: string = '';\n\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n    private _uniqueId: string = `mc-checkbox-${++nextUniqueId}`;\n\n    /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n    @Input() id: string = this._uniqueId;\n\n    /** Returns the unique id for the visual hidden input. */\n    get inputId(): string {\n        return `${this.id || this._uniqueId}-input`;\n    }\n\n    /** Whether the checkbox is required. */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    private _required: boolean;\n\n    /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n    @Input() labelPosition: 'before' | 'after' = 'after';\n\n    /** Name value will be applied to the input element if present */\n    @Input() name: string | null = null;\n\n    /** Event emitted when the checkbox's `checked` value changes. */\n    @Output() readonly change: EventEmitter<McCheckboxChange> =\n        new EventEmitter<McCheckboxChange>();\n\n    /** Event emitted when the checkbox's `indeterminate` value changes. */\n    @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** The value attribute of the native input element */\n    @Input() value: string;\n\n    /** The native `<input type=\"checkbox\">` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * @docs-private\n     */\n    _onTouched: () => any = () => {\n    }\n\n    private _currentAnimationClass: string = '';\n\n    private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n    private _controlValueAccessorChangeFn: (value: any) => void = () => {\n    }\n\n    constructor(elementRef: ElementRef,\n                private _changeDetectorRef: ChangeDetectorRef,\n                private _focusMonitor: FocusMonitor,\n                @Attribute('tabindex') tabIndex: string,\n                @Optional() @Inject(MC_CHECKBOX_CLICK_ACTION)\n                private _clickAction: McCheckboxClickAction) {\n        super(elementRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._inputElement.nativeElement)\n            .subscribe((focusOrigin) => this._onInputFocusChange(focusOrigin));\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    }\n\n    /**\n     * Whether the checkbox is checked.\n     */\n    @Input()\n    get checked(): boolean {\n        return this._checked;\n    }\n\n    set checked(value: boolean) {\n        if (value != this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _checked: boolean = false;\n\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value != this.disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    @Input()\n    get indeterminate(): boolean {\n        return this._indeterminate;\n    }\n\n    set indeterminate(value: boolean) {\n        const changed = value != this._indeterminate;\n        this._indeterminate = value;\n\n        if (changed) {\n            if (this._indeterminate) {\n                this._transitionCheckState(TransitionCheckState.Indeterminate);\n            } else {\n                this._transitionCheckState(\n                    this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n    }\n\n    private _indeterminate: boolean = false;\n\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // This method is getting called whenever the label of the checkbox changes.\n        // Since the checkbox uses the OnPush strategy we need to notify it about the change\n        // that has been recognized by the cdkObserveContent directive.\n        this._changeDetectorRef.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any) {\n        this.checked = !!value;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this._onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n    }\n\n    _getAriaChecked(): 'true' | 'false' | 'mixed' {\n        return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n    }\n\n    private _transitionCheckState(newState: TransitionCheckState) {\n        const oldState = this._currentCheckState;\n        const element: HTMLElement = this._elementRef.nativeElement;\n\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n\n        this._currentCheckState = newState;\n\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n        }\n    }\n\n    private _emitChangeEvent() {\n        const event = new McCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    }\n\n    /** Function is called whenever the focus changes for the input element. */\n    private _onInputFocusChange(focusOrigin: FocusOrigin) {\n        if (focusOrigin) {\n            this._onTouched();\n        }\n    }\n\n    /** Toggles the `checked` state of the checkbox. */\n    toggle(): void {\n        this.checked = !this.checked;\n    }\n\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event\n     */\n    _onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && this._clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && this._clickAction !== 'check') {\n\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n\n            this.toggle();\n            this._transitionCheckState(\n                this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        } else if (!this.disabled && this._clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mc-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n\n    /** Focuses the checkbox. */\n    focus(): void {\n        this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n    }\n\n    _onInteractionEvent(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n}\n","import {\n    Directive,\n    forwardRef,\n    Provider\n} from '@angular/core';\nimport {\n    CheckboxRequiredValidator,\n    NG_VALIDATORS\n} from '@angular/forms';\n\n\nexport const MC_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McCheckboxRequiredValidator),\n    multi: true\n};\n\n/**\n * Validator for Mosaic checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mc-checkbox`.\n */\n@Directive({\n    selector: `mc-checkbox[required][formControlName],\n             mc-checkbox[required][formControl], mc-checkbox[required][ngModel]`,\n    providers: [MC_CHECKBOX_REQUIRED_VALIDATOR],\n    host: { '[attr.required]': 'required ? \"\" : null' }\n})\nexport class McCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McCheckbox } from './checkbox';\nimport { McCheckboxRequiredValidator } from './checkbox-required-validator';\n\n\n@NgModule({\n    imports: [CommonModule, McCommonModule],\n    exports: [McCheckbox, McCheckboxRequiredValidator, McCommonModule],\n    declarations: [McCheckbox, McCheckboxRequiredValidator]\n})\nexport class McCheckboxModule {\n}\n","import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';\n\nimport { toBoolean } from '@ptsecurity/mosaic/core';\n\n\n@Component({\n    selector: 'mc-divider',\n    host: {\n        class: 'mc-divider',\n        role: 'separator',\n        '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n        '[class.mc-divider-vertical]': 'vertical',\n        '[class.mc-divider-inset]': 'inset'\n    },\n    template: '',\n    styleUrls: ['divider.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false\n})\nexport class McDivider {\n    // Whether the divider is vertically aligned.\n    @Input()\n    get vertical(): boolean {\n        return this._vertical;\n    }\n\n    set vertical(value: boolean) {\n        this._vertical = toBoolean(value);\n    }\n\n    private _vertical: boolean = false;\n\n    // Whether the divider is an inset divider.\n    @Input()\n    get inset(): boolean {\n        return this._inset;\n    }\n\n    set inset(value: boolean) {\n        this._inset = toBoolean(value);\n    }\n\n    private _inset: boolean = false;\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\n\nimport {McCommonModule} from '@ptsecurity/mosaic/core';\n\nimport {McDivider} from './divider.component';\n\n\n@NgModule({\n    imports: [\n        McCommonModule,\n        CommonModule\n    ],\n    exports: [\n        McDivider,\n        McCommonModule\n    ],\n    declarations: [\n        McDivider\n    ]\n})\nexport class McDividerModule {}\n"],"names":["encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","providers","provide","CdkTree","useExisting","McTreeSelection","type","ElementRef","IterableDiffers","ChangeDetectorRef","String","decorators","Attribute","args","_nodeOutlet","ViewChild","CdkTreeNodeOutlet","options","ContentChildren","forwardRef","McTreeNodeOption","disabled","Input","navigationChange","Output","selectionChange","_McTreeSelectionBase","MC_TREE_DIRECTIVES","McTreeNodeDef","McTreeNodePadding","NgModule","imports","CommonModule","CdkTreeModule","exports","declarations","McTreeModule","McTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","this","prototype","_flattenNode","node","level","resultNodes","parentMap","_this","flatNode","push","pipe","take","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","McTreeFlatDataSource","_super","treeFlattener","initialData","call","_flattenedData","BehaviorSubject","_expandedData","_data","tslib_1.__extends","Object","defineProperty","value","next","data","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","merge","apply","map","disconnect","DataSource","McTreeNestedDataSource","VERSION","Version","Directive","selector","MC_NAVBAR_BRAND","host","class","McNavbarBrand","McNavbarTitle","MC_NAVBAR_TITLE","McNavbarItemBase","_elementRef","_McNavbarMixinBase","mixinDisabled","McNavbarItem","elementRef","_focusMonitor","_platform","_cdRef","tabIndex","dropdownItems","isCollapsed","_subscription","Subscription","nativeElement","setAttribute","encodeURI","dropdownContent","querySelectorAll","ngOnInit","denyClickIfDisabled","_focusMonitor$","monitor","hasDropdownContent","listenClickOutside","ngAfterViewInit","startListenFocusDropdownItems","ngOnDestroy","unsubscribe","stopMonitoring","stopListenFocusDropdownItems","isActiveDropdownLink","link","isBrowser","window","location","href","indexOf","handleClickByItem","toggleDropdown","handleKeydown","$event","isNavbarItem","classList","contains","MC_NAVBAR_ITEM","keyCode","SPACE","handleClickByDropdownItem","forceCloseDropdown","add","origin","detectChanges","_dropdownElements","el","events","eventListeners","event","removeEventListener","addEventListener","hasAttribute","stopImmediatePropagation","Component","template","inputs","[attr.disabled]","[attr.tabindex]","FocusMonitor","Platform","collapsedTitle","dropdownItemTmpl","ContentChild","read","TemplateRef","McNavbarContainer","position","MC_NAVBAR_CONTAINER","cssClasses","HostBinding","CollapsibleItem","element","width","_collapsed","processCollapsed","collapsed","updateCollapsedClass","remove","CachedItemWidth","itemsForCollapse","undefined","_collapsedItemsWidth","calculateAndCacheCollapsedItemsWidth","updateTitle","item","reduce","acc","getTitle","computedTitle","getAttribute","decodeURI","innerText","removeAttribute","McNavbar","forceRecalculateItemsWidth","resizeDebounceInterval","firstLevelElement","secondLevelElements","resizeObserver","fromEvent","debounceTime","_resizeSubscription","updateCollapsed","bind","querySelector","getBoundingClientRect","_itemsWidths","calculateAndCacheItemsWidth","_totalItemsWidths","calculateAndCacheTotalItemsWidth","collapseDelta","totalItemsWidth","maxAllowedWidth","itemsWidths","canCollapse","collapsedItemsWidth","setTimeout","getOuterElementWidth","parseInt","getComputedStyle","getPropertyValue","allItemsSelector","e","allItems","Array","from","getItemsForCollapse","styles","McNavbarModule","A11yModule","PlatformModule","McIconModule","McNavbarLogo","idIterator","McProgressBarBase","_McProgressBarMixinBase","mixinColor","McProgressBar","id","mode","color","ThemePalette","Primary","get","Math","max","min","[attr.id]","McProgressBarModule","McProgressSpinnerBase","_McProgressPinnerMixinBase","McProgressSpinner","percentage","McProgressSpinnerModule","nextUniqueId","McRadioChange","source","McRadioGroupBase","_McRadioGroupMixinBase","MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","McRadioGroup","multi","_changeDetector","change","EventEmitter","_value","_name","_selected","_isInitialized","_labelPosition","_disabled","_required","controlValueAccessorChangeFn","onTouched","set","updateRadioButtonNames","v","markRadiosForCheck","newValue","updateSelectedRadioFromValue","checkSelectedRadioButton","checked","selected","toBoolean","ngAfterContentInit","touch","emitChangeEvent","emit","_radios","radio","markForCheck","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","name","isAlreadySelected","exportAs","role","McRadioButton","descendants","labelPosition","required","McRadioButtonBase","_McRadioButtonMixinBase","mixinTabIndex","radioGroup","_radioDispatcher","_uniqueId","isFocused","_checked","removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","focus","onInputClick","stopPropagation","onInputChange","groupValueChanged","[class.mc-radio-checked]","[class.mc-radio-disabled]","(focus)","Optional","UniqueSelectionDispatcher","ariaLabel","ariaLabelledby","ariaDescribedby","_inputElement","McRadioModule","McCommonModule","CdkTreeNodeDef","_baseLeftPadding","_iconWidth","_indent","_withIcon","_paddingIndent","nodeLevel","_treeNode","_tree","_level","leftPadding","_setPadding","CdkTreeNodePadding","indent","treeSelection","_hasFocus","selectedOptions","isSelected","setSelected","setFocusedOption","toggle","select","deselect","_getHeight","getClientRects","height","_handleFocus","_handleBlur","_handleClick","tabindex","[class.mc-selected]","[class.mc-focused]","[attr.aria-expanded]","[attr.aria-level]","(blur)","(click)","CdkTreeNode","Inject","McTreeNavigationChange","option","McTreeSelectionChange","_differs","_changeDetectorRef","multiple","autoSelect","noUnselect","SelectionModel","rawValue","console","log","_onKeyDown","withShift","shiftKey","withCtrl","ctrlKey","LEFT_ARROW","_keyManager","activeItem","collapse","preventDefault","RIGHT_ARROW","ENTER","toggleFocusedOption","HOME","setFirstItemActive","END","setLastItemActive","PAGE_UP","setPreviousPageItemActive","PAGE_DOWN","setNextPageItemActive","onKeydown","FocusKeyManager","withTypeAhead","withVerticalOrientation","withHorizontalOrientation","updateScrollSize","first","withScrollSize","floor","updateActiveItem","previousIndex_1","previousActiveItemIndex","activeIndex_1","activeItemIndex","_canDeselectLast","_emitNavigationEvent","focusedIndex","_isValidIndex","focusedOption","toArray","_emitChangeEvent","renderNodeChanges","dataDiffer","viewContainer","parentData","_dataDiffer","arrayOfInstances","_embeddedViews","view","viewDef","def","nodeMatchedQueries","matchedQueryIds","nodeData","nodeIndex","reset","notifyOnChanges","[tabIndex]","(keydown)","(window:resize)","McCleaner","McFormFieldControl","McHint","McPrefix","McSuffix","McFormFieldBase","McFormField","_validateControlChild","_control","controlType","stateChanges","startWith","valueChanges","ngControl","EMPTY","ngAfterContentChecked","clearValue","onContainerClick","onKeyDown","ESCAPE","focused","hasCleaner","_shouldForward","prop","getMcFormFieldMissingControlError","_hint","_suffix","_prefix","_cleaner","[class.mc-form-field_invalid]","[class.mc-form-field_disabled]","[class.mc-form-field_has-prefix]","[class.mc-form-field_has-suffix]","[class.mc-form-field_has-cleaner]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","ctorParameters","propDecorators","McFormFieldWithoutBorders","McFormFieldModule","MC_INPUT_VALUE_ACCESSOR","InjectionToken","MC_INPUT_INVALID_TYPES","McInputBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","_McInputMixinBase","mixinErrorState","McInput","inputValueAccessor","Subject","_uid","_type","_neverEmptyInputTypes","filter","t","getSupportedInputTypes","has","_inputValueAccessor","_previousNativeValue","coerceBooleanProperty","_id","_validateType","ngOnChanges","complete","ngDoCheck","updateErrorState","_dirtyCheckNativeValue","_focusChanged","_onInput","_isNeverEmpty","_isBadInput","getMcInputUnsupportedTypeError","validity","badInput","[attr.placeholder]","[disabled]","[required]","(input)","NgControl","Self","NgForm","FormGroupDirective","ErrorStateMatcher","errorStateMatcher","placeholder","McInputMono","McInputModule","FormsModule","McListOption","_element","listSelection","checkboxPosition","_reportValueChange","wasSelected_1","Promise","resolve","then","_lineSetter","McLineSetter","_lines","_removeOptionFromList","getLabel","_text","textContent","_onTouched","_getHostElement","preserveWhitespaces","McListSelection","McLine","MC_SELECTION_LIST_VALUE_ACCESSOR","McListSelectionChange","McListSelectionBase","_McListSelectionMixinBase","horizontal","_modelChanges","_onChange","_","_tempValues","_setOptionsFromValues","_i","_a","added","_b","_c","removed","selectAll","deselectAll","values","getSelectedOptionValues","listOption","optionIndex","_getOptionIndex","setPreviousItemActive","setNextItemActive","_getOptionByValue","find","Boolean","McListBase","McList","McListSubheaderCssStyler","McListItemBase","McListItem","McListModule","McLineModule","__extends","d","b","__","constructor","extendStatics","create","isBoolean","val","MC_SANITY_CHECKS_FACTORY","base","class_1","arguments","defaultColor","Default","_color","colorPalette","defaultTabIndex","_tabIndex","errorState","oldState","parent","matcher","control","newState","isErrorState","Error","inputType","setPrototypeOf","__proto__","p","hasOwnProperty","MC_SANITY_CHECKS","providedIn","factory","_sanityChecksEnabled","_hasDoneGlobalChecks","_document","document","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","isDevMode","_isTestEnv","doctype","warn","testElement","createElement","body","appendChild","computedStyle","display","removeChild","BidiModule","Second","Warn","_setLineClass","count","_resetClasses","_setClass","className","isAdd","ShowOnDirtyErrorStateMatcher","form","invalid","dirty","submitted","Injectable","touched","state","[class.mc-pseudo-checkbox-indeterminate]","[class.mc-pseudo-checkbox-checked]","[class.mc-pseudo-checkbox-disabled]","McPseudoCheckbox","McPseudoCheckboxModule","McIconCSSStyler","McIconBase","_McIconMixinBase","McIcon","iconName","McButtonCSSStyler","McXSButtonCSSStyler","McSMButtonCSSStyler","McLGButtonCSSStyler","McXLButtonCSSStyler","McIconButtonCSSStyler","_addClassModificatorForIcons","icons","contentChildren","iconElement","previousElementSibling","nextElementSibling","nextSibling","previousSibling","firstIconElement","secondIconElement","queries","McButtonBase","_McButtonMixinBase","McButton","McAnchor","platform","focusMonitor","_haltDisabledEvents","McIconButton","McButtonModule","MC_CHECKBOX_CLICK_ACTION","MC_CHECKBOX_CONTROL_VALUE_ACCESSOR","McCheckbox","TransitionCheckState","McCheckboxChange","McCheckboxBase","_McCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","Init","_controlValueAccessorChangeFn","_indeterminate","focusOrigin","_onInputFocusChange","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_onLabelTextChange","_getAriaChecked","indeterminate","_onInputClick","focusVia","_onInteractionEvent","[id]","[class.mc-checkbox-indeterminate]","[class.mc-checkbox-checked]","[class.mc-checkbox-disabled]","[class.mc-checkbox-label-before]","MC_CHECKBOX_REQUIRED_VALIDATOR","NG_VALIDATORS","McCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","McCheckboxModule","McDivider","_vertical","_inset","[attr.aria-orientation]","[class.mc-divider-vertical]","[class.mc-divider-inset]","vertical","inset","McDividerModule"],"mappings":"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"}