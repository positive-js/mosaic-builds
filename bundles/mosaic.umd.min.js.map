{"version":3,"file":"mosaic.umd.min.js","sources":["../../src/lib/tree/tree-selection.ts","../../src/lib/tree/tree.module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/navbar/navbar.component.ts","../../src/lib/navbar/navbar.module.ts","../../src/lib/progress-bar/progress-bar.component.ts","../../src/lib/progress-bar/progress-bar.module.ts","../../src/lib/progress-spinner/progress-spinner.component.ts","../../src/lib/progress-spinner/progress-spinner.module.ts","../../src/lib/radio/radio.component.ts","../../src/lib/radio/radio.module.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/list/list.component.ts","../../src/lib/list/list.module.ts","../../src/lib/link/link.component.ts","../../src/lib/link/link.module.ts","../../src/lib/modal/modal-control.service.ts","../../src/lib/modal/modal-ref.class.ts","../../src/lib/modal/modal-util.ts","../../src/lib/modal/modal.component.ts","../../src/lib/modal/css-unit.pipe.ts","../../src/lib/modal/modal.service.ts","../../src/lib/modal/modal.module.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/divider/divider.component.ts","../../src/lib/divider/divider.module.ts","../../src/lib/form-field/cleaner.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field.module.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input.module.ts","../../src/lib/list/list-selection.component.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/utils/utils.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/core/line/line.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/services/measure-scrollbar.service.ts","../../src/lib/icon/icon.component.ts","../../src/lib/icon/icon.module.ts","../../src/lib/button/button.component.ts","../../src/lib/button/button.module.ts","../../src/lib/checkbox/checkbox-config.ts"],"sourcesContent":["import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, ContentChildren, EventEmitter, forwardRef, Input, IterableDiffer,\n    IterableDiffers, Output, QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    Directive, ElementRef, Inject\n} from '@angular/core';\nimport { NodeDef, ViewData } from '@angular/core/src/view';\n\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { CdkTreeNode, CdkTree, CdkTreeNodeOutlet } from '@ptsecurity/cdk/tree';\n\nimport { CanDisable, HasTabIndex, mixinDisabled, mixinTabIndex, toBoolean } from '@ptsecurity/mosaic/core';\n\nimport { FocusKeyManager } from '@ptsecurity/cdk/a11y';\n\nimport { END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, SPACE } from '@ptsecurity/cdk/keycodes';\n\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n    exportAs: 'mcTreeNodeOption',\n    selector: 'mc-tree-node-option',\n    host: {\n        tabindex: '-1',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': '_hasFocus',\n        '[attr.aria-expanded]': 'isExpanded',\n        '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n        class: 'mc-tree-node',\n\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()',\n\n        '(click)': '_handleClick()'\n    },\n    providers: [\n        { provide: CdkTreeNode, useExisting: McTreeNodeOption }\n    ]\n})\nexport class McTreeNodeOption<T> extends CdkTreeNode<T> implements CanDisable {\n    @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n        }\n    }\n\n    @Input()\n    get selected(): boolean {\n        return this.treeSelection.selectedOptions && this.treeSelection.selectedOptions.isSelected(this) || false;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            // this.treeSelection._reportValueChange();\n        }\n    }\n\n    private _hasFocus: boolean = false;\n\n    private _disabled: boolean = false;\n    private _selected: boolean = false;\n\n    constructor(\n        protected _elementRef: ElementRef,\n        @Inject(forwardRef(() => McTreeSelection))\n        protected treeSelection: McTreeSelection<T>\n    ) {\n        super(_elementRef, treeSelection);\n    }\n\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n\n        this.treeSelection.setFocusedOption(this);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.treeSelection.selectedOptions) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.treeSelection.selectedOptions.select(this);\n        } else {\n            this.treeSelection.selectedOptions.deselect(this);\n        }\n\n        // this._changeDetector.markForCheck();\n    }\n\n    _getHeight(): number {\n        return this._elementRef.nativeElement.getClientRects()[0].height;\n    }\n\n    _handleFocus(): void {\n        if (this.disabled || this._hasFocus) { return; }\n\n        this._hasFocus = true;\n    }\n\n    _handleBlur(): void {\n        this._hasFocus = false;\n    }\n\n    _handleClick(): void {\n        if (this.disabled) { return; }\n\n        this.treeSelection.setFocusedOption(this);\n    }\n}\n\nexport const _McTreeSelectionBase = mixinTabIndex(mixinDisabled(CdkTree));\n\nexport class McTreeNavigationChange {\n    constructor(\n        public source: McTreeSelection<any>,\n        public option: McTreeNodeOption<any>\n    ) {}\n}\n\nexport class McTreeSelectionChange {\n    constructor(\n        public source: McTreeSelection<any>,\n        public option: McTreeNodeOption<any>\n    ) {}\n}\n\n@Component({\n    exportAs: 'mcTreeSelection',\n    selector: 'mc-tree-selection',\n    template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n    host: {\n        '[tabIndex]': 'tabIndex',\n        class: 'mc-tree-selection',\n        role: 'tree-selection',\n        '(keydown)': '_onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    styleUrls: ['./tree.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{ provide: CdkTree, useExisting: McTreeSelection }]\n})\nexport class McTreeSelection<T> extends _McTreeSelectionBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex {\n    // Outlets within the tree's template where the dataNodes will be inserted.\n    @ViewChild(CdkTreeNodeOutlet) _nodeOutlet: CdkTreeNodeOutlet;\n\n    @ContentChildren(forwardRef(() => McTreeNodeOption)) options: QueryList<McTreeNodeOption<T>>;\n\n    _keyManager: FocusKeyManager<McTreeNodeOption<T>>;\n\n    selectedOptions: SelectionModel<McTreeNodeOption<T>>;\n\n    _disabled: boolean = false;\n    tabIndex: number;\n    multiple: boolean;\n    autoSelect: boolean;\n    noUnselect: boolean;\n\n    // todo temporary solution\n    withShift: boolean;\n    withCtrl: boolean;\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(rawValue: boolean) {\n        const value = toBoolean(rawValue);\n\n        if (this._disabled !== value) {\n            this._disabled = value;\n\n            if (this._disabled) {\n                console.log('need disable all options');\n            } else {\n                console.log('need enable all options');\n            }\n        }\n    }\n\n    @Output() readonly navigationChange = new EventEmitter<McTreeNavigationChange>();\n\n    @Output() readonly selectionChange = new EventEmitter<McTreeSelectionChange>();\n\n    constructor(\n        private _elementRef: ElementRef,\n        _differs: IterableDiffers,\n        _changeDetectorRef: ChangeDetectorRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('multiple') multiple: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string\n    ) {\n        super(_differs, _changeDetectorRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.multiple = multiple === null ? true : toBoolean(multiple);\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.selectedOptions = new SelectionModel<McTreeNodeOption<T>>(this.multiple);\n    }\n\n    _onKeyDown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n        this.withShift = event.shiftKey;\n        this.withCtrl = event.ctrlKey;\n\n        switch (keyCode) {\n            case LEFT_ARROW:\n                if (this._keyManager.activeItem) {\n                    this.treeControl.collapse(this._keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                break;\n            case RIGHT_ARROW:\n                if (this._keyManager.activeItem) {\n                    this.treeControl.expand(this._keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                break;\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                this._keyManager.setPreviousPageItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                this._keyManager.setNextPageItemActive();\n                event.preventDefault();\n\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    ngAfterContentInit(): void {\n        this._keyManager = new FocusKeyManager<McTreeNodeOption<T>>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation(true)\n            .withHorizontalOrientation(null);\n    }\n\n    updateScrollSize(): void {\n        if (!this.options.first) { return; }\n\n        this._keyManager.withScrollSize(Math.floor(this._getHeight() / this.options.first._getHeight()));\n    }\n\n    setFocusedOption(option: McTreeNodeOption<T>): void {\n        this._keyManager.updateActiveItem(option);\n\n        if (this.withShift && this.multiple) {\n            const previousIndex = this._keyManager.previousActiveItemIndex;\n            const activeIndex = this._keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n\n            this.withShift = false;\n        } else if (this.withCtrl) {\n            this.withCtrl = false;\n\n            if (!this._canDeselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) {\n                this.options.forEach((item) => item.setSelected(false));\n                option.setSelected(true);\n            }\n        }\n\n        this._emitNavigationEvent(option);\n    }\n\n    // Toggles the selected state of the currently focused option.\n    toggleFocusedOption(): void {\n        const focusedIndex = this._keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n            const focusedOption: McTreeNodeOption<T> = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this._canDeselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this._emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    renderNodeChanges(\n        data: T[],\n        dataDiffer: IterableDiffer<T> = this._dataDiffer,\n        viewContainer: any = this._nodeOutlet.viewContainer,\n        parentData?: T\n    ) {\n        super.renderNodeChanges(data, dataDiffer, viewContainer, parentData);\n\n        const arrayOfInstances = [];\n\n        viewContainer._embeddedViews.forEach((view: ViewData) => {\n            const viewDef = view.def;\n\n            viewDef.nodes.forEach((node: NodeDef) => {\n                if (viewDef.nodeMatchedQueries === node.matchedQueryIds) {\n                    const nodeData: any = view.nodes[node.nodeIndex];\n\n                    arrayOfInstances.push(nodeData.instance as never);\n                }\n            });\n        });\n\n        if (this.options) {\n            this.options.reset(arrayOfInstances);\n            this.options.notifyOnChanges();\n        }\n\n        this.updateScrollSize();\n    }\n\n    _getHeight(): number {\n        return this._elementRef.nativeElement.getClientRects()[0].height;\n    }\n\n    _emitNavigationEvent(option: McTreeNodeOption<T>): void {\n        this.navigationChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    _emitChangeEvent(option: McTreeNodeOption<T>): void {\n        this.selectionChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private _isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    private _canDeselectLast(option: McTreeNodeOption<T>): boolean {\n        return !(this.noUnselect && this.selectedOptions.selected.length === 1 && option.selected);\n    }\n}\n\n","import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { CdkTreeModule } from '@ptsecurity/cdk/tree';\n\nimport { McTreeNodeDef } from './node';\nimport { McTreeNodePadding } from './padding';\nimport { McTreeSelection, McTreeNodeOption } from './tree-selection';\n\n\nconst MC_TREE_DIRECTIVES = [\n    McTreeNodeDef,\n    McTreeNodePadding,\n    McTreeSelection,\n    McTreeNodeOption\n];\n\n@NgModule({\n    imports: [CommonModule, CdkTreeModule],\n    exports: MC_TREE_DIRECTIVES,\n    declarations: MC_TREE_DIRECTIVES\n})\nexport class McTreeModule {}\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { FlatTreeControl, ITreeControl } from '@ptsecurity/cdk/tree';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class McTreeFlattener<T, F> {\n\n    constructor(public transformFunction: (node: T, level: number) => F,\n                public getLevel: (node: F) => number,\n                public isExpandable: (node: F) => boolean,\n                public getChildren: (node: T) => Observable<T[]>) {\n    }\n\n    _flattenNode(node: T, level: number,\n                 resultNodes: F[], parentMap: boolean[]): F[] {\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n\n        if (this.isExpandable(flatNode)) {\n            this.getChildren(node).pipe(take(1)).subscribe((children) => {\n                children.forEach((child, index) => {\n                    const childParentMap: boolean[] = parentMap.slice();\n                    childParentMap.push(index !== children.length - 1);\n                    this._flattenNode(child, level + 1, resultNodes, childParentMap);\n                });\n            });\n        }\n\n        return resultNodes;\n    }\n\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n    flattenNodes(structuredData: T[]): F[] {\n        const resultNodes: F[] = [];\n        structuredData.forEach((node) => this._flattenNode(node, 0, resultNodes, []));\n\n        return resultNodes;\n    }\n\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n    expandFlattenedNodes(nodes: F[], treeControl: ITreeControl<F>): F[] {\n        const results: F[] = [];\n        const currentExpand: boolean[] = [];\n        currentExpand[0] = true;\n\n        nodes.forEach((node) => {\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n\n            if (expand) { results.push(node); }\n\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        });\n\n        return results;\n    }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `McTree`.\n * The nested tree nodes of type `T` are flattened through `MсTreeFlattener`, and converted\n * to type `F` for `McTree` to consume.\n */\nexport class McTreeFlatDataSource<T, F> extends DataSource<F> {\n    _flattenedData = new BehaviorSubject<F[]>([]);\n\n    _expandedData = new BehaviorSubject<F[]>([]);\n\n    _data: BehaviorSubject<T[]>;\n\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n        this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n        this.treeControl.dataNodes = this._flattenedData.value;\n    }\n\n    constructor(private treeControl: FlatTreeControl<F>,\n                private treeFlattener: McTreeFlattener<T, F>,\n                initialData: T[] = []) {\n        super();\n        this._data = new BehaviorSubject<T[]>(initialData);\n    }\n\n    connect(collectionViewer: ICollectionViewer): Observable<F[]> {\n        const changes = [\n            collectionViewer.viewChange,\n            this.treeControl.expansionModel.onChange!,\n            this._flattenedData\n        ];\n\n        return merge(...changes).pipe(map(() => {\n            this._expandedData.next(\n                this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n\n            return this._expandedData.value;\n        }));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by ITreeControl and each non-leaf node.\n */\nexport class McTreeNestedDataSource<T> extends DataSource<T> {\n    _data = new BehaviorSubject<T[]>([]);\n\n    /**\n     * Data for the nested tree\n     */\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n    }\n\n    connect(collectionViewer: ICollectionViewer): Observable<T[]> {\n        return merge(...[collectionViewer.viewChange, this._data])\n            .pipe(map(() => this.data));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import { Version } from '@angular/core';\n\n\nexport const VERSION = new Version('0.0.1-867dd4a');\n","import { fromEvent, Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nimport {\n    AfterViewInit,\n    Component, Directive,\n    ElementRef,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    ViewEncapsulation,\n    ContentChild,\n    TemplateRef,\n    ChangeDetectorRef,\n    ChangeDetectionStrategy,\n    ViewChild\n} from '@angular/core';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { SPACE } from '@ptsecurity/cdk/keycodes';\nimport { Platform } from '@ptsecurity/cdk/platform';\nimport { CanDisable, mixinDisabled } from '@ptsecurity/mosaic/core';\n\n\nconst COLLAPSED_CLASS: string = 'mc-navbar-collapsed-title';\nconst MC_ICON = 'mc-icon';\nconst MC_NAVBAR = 'mc-navbar';\nconst MC_NAVBAR_CONTAINER = 'mc-navbar-container';\nconst MC_NAVBAR_ITEM = 'mc-navbar-item';\nconst MC_NAVBAR_BRAND = 'mc-navbar-brand';\nconst MC_NAVBAR_TITLE = 'mc-navbar-title';\nconst MC_NAVBAR_LOGO = 'mc-navbar-logo';\n\nexport type McNavbarContainerPositionType = 'left' | 'right';\n\nexport interface IMcNavbarDropdownItem {\n    link?: string;\n    text: string;\n}\n\n@Directive({\n    selector: MC_NAVBAR_LOGO,\n    host: {\n        class: MC_NAVBAR_LOGO\n    }\n})\nexport class McNavbarLogo {}\n\n@Directive({\n    selector: MC_NAVBAR_BRAND,\n    host: {\n        class: MC_NAVBAR_BRAND\n    }\n})\nexport class McNavbarBrand {}\n\n@Directive({\n    selector: MC_NAVBAR_TITLE,\n    host: {\n        class: MC_NAVBAR_TITLE\n    }\n})\nexport class McNavbarTitle {}\n\nexport class McNavbarItemBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McNavbarMixinBase = mixinDisabled(McNavbarItemBase);\n\n@Component({\n    selector: MC_NAVBAR_ITEM,\n    template: `\n        <a\n            [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\n            (click)=\"handleClickByItem()\"\n            (keydown)=\"handleKeydown($event)\"\n            class=\"mc-navbar-item\"\n        >\n            <ng-content></ng-content>\n            <i *ngIf=\"hasDropdownContent\" mc-icon=\"mc-angle-M_16\"></i>\n        </a>\n        <ul\n            #dropdownContent\n            *ngIf=\"hasDropdownContent\"\n            [ngClass]=\"{ 'is-collapsed': isCollapsed }\"\n            class=\"mc-navbar-dropdown\"\n        >\n            <li\n                *ngFor=\"let item of dropdownItems\"\n                (click)=\"handleClickByDropdownItem()\"\n                class=\"mc-navbar-dropdown-item\"\n            >\n                <ng-container *ngIf=\"dropdownItemTmpl\">\n                    <ng-container *ngTemplateOutlet=\"dropdownItemTmpl; context: { $implicit: item }\"></ng-container>\n                </ng-container>\n                <a\n                    *ngIf=\"!dropdownItemTmpl\"\n                    [attr.href]=\"item.link\"\n                    [ngClass]=\"{ 'is-active': isActiveDropdownLink(item.link) }\"\n                    class=\"mc-navbar-dropdown-link\"\n                >{{ item.text }}</a>\n            </li>\n        </ul>\n    `,\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': '-1'\n    }\n})\nexport class McNavbarItem extends _McNavbarMixinBase implements OnInit, AfterViewInit, OnDestroy, CanDisable {\n\n    @Input()\n    tabIndex: number = 0;\n\n    @Input()\n    dropdownItems: IMcNavbarDropdownItem[] = [];\n\n    @Input()\n    set collapsedTitle(value: string) {\n        this.elementRef.nativeElement.setAttribute('computedTitle', encodeURI(value));\n    }\n\n    @ContentChild('dropdownItemTmpl', { read: TemplateRef })\n    dropdownItemTmpl: TemplateRef<IMcNavbarDropdownItem>;\n\n    @ViewChild('dropdownContent', { read: ElementRef })\n    dropdownContent: ElementRef;\n\n    get hasDropdownContent() {\n        return this.dropdownItems.length > 0;\n    }\n\n    isCollapsed: boolean = true;\n\n    private _subscription: Subscription = new Subscription();\n    private _focusMonitor$: Observable<FocusOrigin>;\n\n    private get _dropdownElements(): HTMLElement[] {\n        return this.dropdownContent ? this.dropdownContent.nativeElement.querySelectorAll('li > *') : [];\n    }\n\n    constructor(\n        public  elementRef: ElementRef,\n        private _focusMonitor: FocusMonitor,\n        private _platform: Platform,\n        private _cdRef: ChangeDetectorRef\n    ) {\n        super(elementRef);\n    }\n\n    ngOnInit() {\n        this.denyClickIfDisabled();\n\n        this._focusMonitor$ = this._focusMonitor.monitor(this.elementRef.nativeElement, true);\n\n        if (this.hasDropdownContent) {\n            this.listenClickOutside();\n        }\n    }\n\n    ngAfterViewInit() {\n        if (!this.hasDropdownContent) {\n            return;\n        }\n\n        this.startListenFocusDropdownItems();\n    }\n\n    ngOnDestroy() {\n        this._subscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n        this.stopListenFocusDropdownItems();\n    }\n\n    isActiveDropdownLink(link: string): boolean {\n        if (!this._platform.isBrowser) {\n            return false;\n        }\n\n        return window.location.href.indexOf(link) >= 0;\n    }\n\n    handleClickByItem() {\n        this.toggleDropdown();\n    }\n\n    handleKeydown($event: KeyboardEvent) {\n        const isNavbarItem = ($event.target as HTMLElement).classList.contains(MC_NAVBAR_ITEM);\n\n        // tslint:disable-next-line\n        if (this.hasDropdownContent && $event.keyCode === SPACE && isNavbarItem) {\n            this.toggleDropdown();\n        }\n    }\n\n    handleClickByDropdownItem() {\n        this.forceCloseDropdown();\n    }\n\n    private listenClickOutside() {\n        this._subscription.add(\n            this._focusMonitor$.subscribe((origin) => {\n                if (origin === null) {\n                    this.forceCloseDropdown();\n                }\n            })\n        );\n    }\n\n    private toggleDropdown() {\n        this.isCollapsed = !this.isCollapsed;\n    }\n\n    private forceCloseDropdown() {\n        this.isCollapsed = true;\n        this._cdRef.detectChanges();\n    }\n\n    private startListenFocusDropdownItems() {\n        this._dropdownElements.forEach((el) => {\n            this._focusMonitor.monitor(el, true);\n        });\n    }\n\n    private stopListenFocusDropdownItems() {\n        this._dropdownElements.forEach((el) => {\n            this._focusMonitor.stopMonitoring(el);\n        });\n    }\n\n    // This method is required due to angular 2 issue https://github.com/angular/angular/issues/11200\n    private denyClickIfDisabled() {\n        const events: Event[] = this.elementRef.nativeElement.eventListeners('click');\n\n        events.forEach((event) => this.elementRef.nativeElement.removeEventListener('click', event));\n\n        this.elementRef.nativeElement.addEventListener('click', (event: MouseEvent) => {\n            if (this.elementRef.nativeElement.hasAttribute('disabled')) {\n                event.stopImmediatePropagation();\n            }\n        }, true);\n\n        events.forEach((event) => this.elementRef.nativeElement.addEventListener('click', event));\n    }\n}\n\n@Directive({\n    selector: MC_NAVBAR_CONTAINER\n})\nexport class McNavbarContainer {\n    @Input()\n    position: McNavbarContainerPositionType = 'left';\n\n    @HostBinding('class')\n    get cssClasses(): string {\n        return this.position === 'left' ? 'mc-navbar-left' : 'mc-navbar-right';\n    }\n}\n\nclass CollapsibleItem {\n    private _collapsed: boolean = false;\n\n    constructor(\n        public element: HTMLElement,\n        public width: number\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        this._collapsed = collapsed;\n\n        this.updateCollapsedClass();\n    }\n\n    private updateCollapsedClass() {\n        if (this._collapsed) {\n            this.element.classList.add(COLLAPSED_CLASS);\n        } else {\n            this.element.classList.remove(COLLAPSED_CLASS);\n        }\n\n    }\n}\n\nclass CachedItemWidth {\n\n    get canCollapse(): boolean {\n        return this.itemsForCollapse.length > 0;\n    }\n\n    private _collapsedItemsWidth: number;\n\n    get collapsedItemsWidth(): number {\n        if (this._collapsedItemsWidth !== undefined) {\n            return this._collapsedItemsWidth;\n        }\n\n        this.calculateAndCacheCollapsedItemsWidth();\n\n        return this._collapsedItemsWidth;\n    }\n\n    constructor(\n        public element: HTMLElement,\n        public width: number,\n        public itemsForCollapse: CollapsibleItem[] = []\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        if (this.itemsForCollapse.length > 0) {\n            this.updateTitle(collapsed);\n        }\n\n        this.itemsForCollapse.forEach((item) => item.processCollapsed(collapsed));\n    }\n\n    private calculateAndCacheCollapsedItemsWidth() {\n        this._collapsedItemsWidth = this.itemsForCollapse\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getTitle(): string {\n        const computedTitle = this.element.getAttribute('computedTitle');\n\n        return computedTitle\n            ? decodeURI(computedTitle)\n            : (this.itemsForCollapse.length > 0 ? this.itemsForCollapse[0].element.innerText : '');\n    }\n\n    private updateTitle(collapsed: boolean) {\n        if (collapsed) {\n            this.element.setAttribute('title', this.getTitle());\n        } else {\n            this.element.removeAttribute('title');\n        }\n    }\n}\n\n\n@Component({\n    selector: MC_NAVBAR,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    template: `\n        <nav class=\"mc-navbar\">\n            <ng-content select=\"[${MC_NAVBAR_CONTAINER}],${MC_NAVBAR_CONTAINER}\"></ng-content>\n        </nav>\n    `,\n    styleUrls: ['./navbar.css'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class McNavbar implements AfterViewInit, OnDestroy {\n\n    private readonly forceRecalculateItemsWidth: boolean = false;\n    private readonly resizeDebounceInterval: number = 100;\n    private readonly firstLevelElement: string = MC_NAVBAR_CONTAINER;\n    private readonly secondLevelElements: string[] = [\n        MC_NAVBAR_ITEM,\n        MC_NAVBAR_BRAND,\n        MC_NAVBAR_TITLE\n    ];\n\n    private _totalItemsWidths: number;\n    private _itemsWidths: CachedItemWidth[];\n\n    private get maxAllowedWidth(): number {\n        return this._elementRef.nativeElement.querySelector('nav').getBoundingClientRect().width;\n    }\n\n    private get itemsWidths(): CachedItemWidth[] {\n        if (this._itemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._itemsWidths;\n        }\n\n        this.calculateAndCacheItemsWidth();\n\n        return this._itemsWidths;\n    }\n\n    private get totalItemsWidth(): number {\n        if (this._totalItemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._totalItemsWidths;\n        }\n\n        this.calculateAndCacheTotalItemsWidth();\n\n        return this._totalItemsWidths;\n    }\n\n    private _resizeSubscription: Subscription;\n\n    constructor(\n        private _elementRef: ElementRef\n    ) {\n        const resizeObserver = fromEvent(window, 'resize')\n            .pipe(debounceTime(this.resizeDebounceInterval));\n\n        this._resizeSubscription = resizeObserver.subscribe(this.updateCollapsed.bind(this));\n    }\n\n    updateCollapsed(): void {\n        let collapseDelta = this.totalItemsWidth - this.maxAllowedWidth;\n\n        for (let i = this.itemsWidths.length - 1; i >= 0; i--) {\n            const item = this.itemsWidths[i];\n\n            if (!item.canCollapse) {\n                continue;\n            }\n\n            item.processCollapsed(collapseDelta > 0);\n            collapseDelta -= item.collapsedItemsWidth;\n        }\n    }\n\n    ngAfterViewInit(): void {\n        // Note: this wait is required for loading and rendering fonts for icons;\n        // unfortunately we cannot control font rendering\n        setTimeout(() => this.updateCollapsed(), 0);\n    }\n\n    ngOnDestroy() {\n        this._resizeSubscription.unsubscribe();\n    }\n\n    private calculateAndCacheTotalItemsWidth() {\n        this._totalItemsWidths = this.itemsWidths\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getOuterElementWidth(element: HTMLElement): number {\n        const baseWidth  = element.getBoundingClientRect().width;\n        const marginRight = parseInt(getComputedStyle(element).getPropertyValue('margin-right'));\n        const marginLeft = parseInt(getComputedStyle(element).getPropertyValue('margin-left'));\n\n        return baseWidth + marginRight + marginLeft;\n    }\n\n    private calculateAndCacheItemsWidth() {\n        const allItemsSelector = this.secondLevelElements\n            .map((e: string) => `${this.firstLevelElement}>${e}`);\n        const allItems: HTMLElement[] = Array.from(this._elementRef.nativeElement.querySelectorAll(allItemsSelector));\n\n        this._itemsWidths = allItems\n            .map((el) => new CachedItemWidth(el, this.getOuterElementWidth(el), this.getItemsForCollapse(el)));\n    }\n\n    private getItemsForCollapse(element: HTMLElement): CollapsibleItem[] {\n        const icon = element.querySelector(`[${MC_ICON}],${MC_NAVBAR_LOGO},[${MC_NAVBAR_LOGO}]`);\n\n        if (!icon) {\n            return [];\n        }\n\n        return Array.from(element.querySelectorAll(MC_NAVBAR_TITLE))\n            .map((el) => new CollapsibleItem(<HTMLElement> el, el.getBoundingClientRect().width));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport {\n    McNavbar,\n    McNavbarContainer,\n    McNavbarItem,\n    McNavbarTitle,\n    McNavbarBrand,\n    McNavbarLogo\n} from './navbar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        McIconModule\n    ],\n    exports: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ],\n    declarations: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ]\n})\nexport class McNavbarModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressBarMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressBarBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressBarMixinBase = mixinColor(McProgressBarBase);\n\n@Component({\n    selector: 'mc-progress-bar',\n    templateUrl: './progress-bar.component.html',\n    styleUrls: ['./progress-bar.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-bar',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressBar extends _McProgressBarMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-bar-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressBarMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McProgressBar\n} from './progress-bar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressBar\n    ],\n    declarations: [\n        McProgressBar\n    ]\n})\nexport class McProgressBarModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressSpinnerBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressPinnerMixinBase = mixinColor(McProgressSpinnerBase);\n\nconst MAX_DASH_ARRAY = 273;\n\n@Component({\n    selector: 'mc-progress-spinner',\n    templateUrl: './progress-spinner.component.html',\n    styleUrls: ['./progress-spinner.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-spinner',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressSpinner extends _McProgressPinnerMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-spinner-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressSpinnerMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n\n    get dashOffsetPercent(): string {\n        return `${MAX_DASH_ARRAY - this.percentage * MAX_DASH_ARRAY}%`;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McProgressSpinner } from './progress-spinner.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressSpinner\n    ],\n    declarations: [\n        McProgressSpinner\n    ]\n})\nexport class McProgressSpinnerModule {}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef,\n    Input, OnDestroy, OnInit, Optional, Output, QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { UniqueSelectionDispatcher } from '@ptsecurity/cdk/collections';\n\nimport {\n    CanColor,\n    CanDisable,\n    HasTabIndex,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/** Change event object emitted by McRadio. */\nexport class McRadioChange {\n    constructor(\n        /** The McRadioButton that emits the change event. */\n        public source: McRadioButton,\n        /** The value of the McRadioButton. */\n        public value: any) {}\n}\n\n// Boilerplate for applying mixins to McRadioGroup.\n/** @docs-private */\nexport class McRadioGroupBase {}\nexport const _McRadioGroupMixinBase = mixinDisabled(McRadioGroupBase);\n\n/**\n * Provider Expression that allows mc-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McRadioGroup),\n    multi: true\n};\n\n@Directive({\n    selector: 'mc-radio-group',\n    exportAs: 'mcRadioGroup',\n    providers: [MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n    host: {\n        role: 'radiogroup',\n        class: 'mc-radio-group'\n    },\n    inputs: ['disabled']\n})\nexport class McRadioGroup extends _McRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    @Input()\n    get name(): string { return this._name; }\n    set name(value: string) {\n        this._name = value;\n        this.updateRadioButtonNames();\n    }\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this.markRadiosForCheck();\n    }\n\n    /** Value of the radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n\n            this.updateSelectedRadioFromValue();\n            this.checkSelectedRadioButton();\n        }\n    }\n\n    /** Whether the radio button is selected. */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: McRadioButton | null) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this.checkSelectedRadioButton();\n    }\n\n    /** Whether the radio group is disabled */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /** Whether the radio group is required */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** Child radio buttons. */\n    @ContentChildren(forwardRef(() => McRadioButton), { descendants: true })\n    _radios: QueryList<McRadioButton>;\n\n    /**\n     * Selected value for group. Should equal the value of the selected radio button if there *is*\n     * a corresponding radio button with a matching value. If there is *not* such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    private _value: any = null;\n\n    /** The HTML name attribute applied to radio buttons in this group. */\n    private _name: string = `mc-radio-group-${nextUniqueId++}`;\n\n    /** The currently selected radio button. Should match value. */\n    private _selected: McRadioButton | null = null;\n\n    /** Whether the `value` has been set to its initial value. */\n    private _isInitialized: boolean = false;\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    private _labelPosition: 'before' | 'after' = 'after';\n\n    /** Whether the radio group is disabled. */\n    private _disabled: boolean = false;\n\n    /** Whether the radio group is required. */\n    private _required: boolean = false;\n\n    constructor(\n        private readonly _changeDetector: ChangeDetectorRef\n    ) {\n        super();\n    }\n\n    /** The method to be called in order to update ngModel */\n    // tslint:disable-next-line\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @docs-private\n     */\n    // tslint:disable-next-line\n    onTouched: () => any = () => {};\n\n    checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on McRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the McRadioGroup.\n        this._isInitialized = true;\n    }\n\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        if (this._isInitialized) {\n            this.change.emit(new McRadioChange(this._selected!, this._value));\n        }\n    }\n\n    markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach((radio) => radio.markForCheck());\n        }\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n\n    private updateRadioButtonNames(): void {\n        if (this._radios) {\n            this._radios.forEach((radio) => {\n                radio.name = this.name;\n            });\n        }\n    }\n\n    /** Updates the `selected` radio button from the internal _value state. */\n    private updateSelectedRadioFromValue(): void {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n        if (this._radios != null && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach((radio) => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n}\n\n\n// Boilerplate for applying mixins to McRadioButton.\n/** @docs-private */\nexport class McRadioButtonBase {\n    // Since the disabled property is manually defined for the McRadioButton and isn't set up in\n    // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n    // defined to properly work.\n    disabled: boolean;\n\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McRadioButtonMixinBase =\n    mixinColor(mixinTabIndex(McRadioButtonBase));\n\n\n@Component({\n    selector: 'mc-radio-button',\n    templateUrl: 'radio.component.html',\n    styleUrls: ['radio.css'],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    exportAs: 'mcRadioButton',\n    host: {\n        class: 'mc-radio-button',\n        '[attr.id]': 'id',\n        '[class.mc-radio-checked]': 'checked',\n        '[class.mc-radio-disabled]': 'disabled',\n        '(focus)': '_inputElement.nativeElement.focus()'\n    }\n})\nexport class McRadioButton extends _McRadioButtonMixinBase\n    implements OnInit, OnDestroy, CanColor, HasTabIndex {\n\n    private readonly _uniqueId: string = `mc-radio-${++nextUniqueId}`;\n\n    /* tslint:disable:member-ordering */\n\n    /** The unique ID for the radio button. */\n    @Input() id: string = this._uniqueId;\n\n    /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n    @Input() name: string;\n\n    /** Used to set the 'aria-label' attribute on the underlying input element. */\n    @Input('aria-label') ariaLabel: string;\n\n    /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n    @Input('aria-labelledby') ariaLabelledby: string;\n\n    /** The 'aria-describedby' attribute is read after the element's label and field type. */\n    @Input('aria-describedby') ariaDescribedby: string;\n\n    /** Whether this radio button is checked. */\n    @Input()\n    get checked(): boolean { return this._checked; }\n    set checked(value: boolean) {\n        const newCheckedState = toBoolean(value);\n\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** The value of this radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(value: any) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup != null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n\n    /** Whether the radio button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n    }\n    set disabled(value: boolean) {\n        const newDisabledState = toBoolean(value);\n\n        if (this._disabled !== newDisabledState) {\n\n            this._disabled = newDisabledState;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** Whether the radio button is required. */\n    @Input()\n    get required(): boolean {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    private _labelPosition: 'before' | 'after';\n\n    /** The native `<input type=radio>` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** The parent radio group. May or may not be present. */\n    radioGroup: McRadioGroup;\n\n    @Input()\n    isFocused: boolean = false;\n\n    /** ID of the native input element inside `<mc-radio-button>` */\n    get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n    /** Whether this radio is checked. */\n    private _checked: boolean = false;\n\n    /** Whether this radio is disabled. */\n    private _disabled: boolean;\n\n    /** Whether this radio is required. */\n    private _required: boolean;\n\n    /** Value assigned to this radio. */\n    private _value: any = null;\n\n    /** Unregister function for _radioDispatcher */\n    // tslint:disable-next-line\n    private readonly removeUniqueSelectionListener: () => void = () => {};\n\n    constructor(\n        @Optional() radioGroup: McRadioGroup,\n        elementRef: ElementRef,\n        private readonly _changeDetector: ChangeDetectorRef,\n        private readonly _radioDispatcher: UniqueSelectionDispatcher\n    ) {\n\n        super(elementRef);\n\n        this.radioGroup = radioGroup;\n\n        this.removeUniqueSelectionListener =\n            _radioDispatcher.listen((id: string, name: string) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n\n    ngOnDestroy() {\n        this.removeUniqueSelectionListener();\n    }\n\n    /** Focuses the radio button. */\n    // tslint:disable-next-line\n    focus(): void {}\n\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n\n    onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n\n    onInputChange(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this.emitChangeEvent();\n\n        if (this.radioGroup) {\n            this.radioGroup.controlValueAccessorChangeFn(this.value);\n            this.radioGroup.touch();\n            if (groupValueChanged) {\n                this.radioGroup.emitChangeEvent();\n            }\n        }\n    }\n\n    /** Dispatch change event with current value. */\n    private emitChangeEvent(): void {\n        this.change.emit(new McRadioChange(this, this._value));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McRadioButton, McRadioGroup } from './radio.component';\n\n\n@NgModule({\n    imports: [ CommonModule, A11yModule, McCommonModule ],\n    exports: [ McRadioGroup, McRadioButton, McCommonModule ],\n    declarations: [ McRadioGroup, McRadioButton ]\n})\nexport class McRadioModule {}\n","import { Directive, Input } from '@angular/core';\n\nimport { CdkTreeNodeDef } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodeDef]',\n    inputs: ['when: mcTreeNodeDefWhen'],\n    providers: [{ provide: CdkTreeNodeDef, useExisting: McTreeNodeDef }]\n})\nexport class McTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n    @Input('mcTreeNode') data: T;\n}\n","import { Directive, Input, OnInit } from '@angular/core';\nimport { CdkTreeNodePadding } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodePadding]',\n    providers: [{ provide: CdkTreeNodePadding, useExisting: McTreeNodePadding }]\n})\nexport class McTreeNodePadding<T> extends CdkTreeNodePadding<T> implements OnInit {\n    get leftPadding(): number {\n        return (this._withIcon ? 0 : this._iconWidth) + this._baseLeftPadding;\n    }\n\n    _baseLeftPadding: number = 6;\n    _iconWidth: number = 20;\n    _indent: number = 16;\n\n    @Input('mcTreeNodePadding') level: number;\n\n    @Input('mcTreeNodePaddingIndent') indent: number;\n\n    _withIcon: boolean;\n\n    _paddingIndent(): string | null {\n        const nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)\n            ? this._tree.treeControl.getLevel(this._treeNode.data)\n            : null;\n\n        const level = this._level || nodeLevel;\n\n        return level ? `${(level * this._indent) + this.leftPadding}px` : `${this._baseLeftPadding}px`;\n    }\n\n    ngOnInit(): void {\n        this._withIcon = this._tree.treeControl.isExpandable(this._treeNode.data);\n        this._setPadding();\n    }\n}\n","// todo пока не делаем, перенесено из материала, но у нас в доках таких простых списков нет.\nimport {\n    AfterContentInit, ChangeDetectionStrategy, Component, ContentChildren, Directive, ElementRef, QueryList,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { McLine, McLineSetter } from '@ptsecurity/mosaic/core';\n\n\nexport class McListBase {}\n\n@Component({\n    selector: 'mc-list',\n    host: { class: 'mc-list' },\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McList extends McListBase {}\n\n\n/**\n * Directive whose purpose is to add the mc- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n    selector: '[mc-subheader], [mcSubheader]',\n    host: { class: 'mc-subheader' }\n})\nexport class McListSubheaderCssStyler {}\n\n\n// Boilerplate for applying mixins to McListItem.\nexport class McListItemBase {}\n\n@Component({\n    selector: 'mc-list-item, a[mc-list-item]',\n    host: {\n        class: 'mc-list-item',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()'\n    },\n    templateUrl: './list-item.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListItem extends McListItemBase implements AfterContentInit {\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    private _lineSetter: McLineSetter;\n\n    constructor(private _element: ElementRef) {\n        super();\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    _handleFocus() {\n        this._element.nativeElement.classList.add('mc-focused');\n    }\n\n    _handleBlur() {\n        this._element.nativeElement.classList.remove('mc-focused');\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLineModule } from '@ptsecurity/mosaic/core';\n\nimport { McListSelection, McListOption } from './list-selection.component';\nimport { McList, McListItem, McListSubheaderCssStyler } from './list.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        McLineModule\n    ],\n    exports: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ],\n    declarations: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ]\n})\nexport class McListModule {}\n","import {\n    Input,\n    Attribute,\n    Component,\n    ElementRef,\n    OnDestroy,\n    ViewEncapsulation,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef\n} from '@angular/core';\n\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport {\n    CanDisable,\n    HasTabIndex,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\nexport class McLinkBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\nexport const _McLinkBase = mixinTabIndex(mixinDisabled(McLinkBase));\n\n@Component({\n    selector: 'a.mc-link',\n    template: `<ng-content></ng-content>`,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcLink',\n    styleUrls: ['./link.css'],\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': 'tabIndex'\n    }\n})\n\nexport class McLink extends _McLinkBase implements OnDestroy, HasTabIndex, CanDisable {\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    private _disabled = false;\n\n    constructor(\n        @Attribute('tabindex') tabIndex: string,\n        public elementRef: ElementRef,\n        private _focusMonitor: FocusMonitor,\n        private _changeDetector: ChangeDetectorRef) {\n\n        super(elementRef);\n        this._focusMonitor.monitor(elementRef.nativeElement, true);\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this._getHostElement().focus();\n    }\n\n    _getHostElement() {\n        return this.elementRef.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLink } from './link.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule\n    ],\n    declarations: [\n        McLink\n    ],\n    exports: [\n        McLink\n    ]\n})\nexport class McLinkModule {}\n","import { Injectable, Optional, SkipSelf } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\n\nimport { McModalRef } from './modal-ref.class';\n\n\ninterface IRegisteredMeta {\n    modalRef: McModalRef;\n    afterOpenSubscription: Subscription;\n    afterCloseSubscription: Subscription;\n}\n\n@Injectable()\nexport class McModalControlService {\n\n    // Track singleton afterAllClose through over the injection tree\n    get afterAllClose(): Subject<void> {\n        return this.parentService ? this.parentService.afterAllClose : this.rootAfterAllClose;\n    }\n\n    // Track singleton openModals array through over the injection tree\n    get openModals(): McModalRef[] {\n        return this.parentService ? this.parentService.openModals : this.rootOpenModals;\n    }\n\n    // @ts-ignore\n    private rootOpenModals: McModalRef[] = this.parentService ? null : [];\n    // @ts-ignore\n    private rootAfterAllClose: Subject<void> = this.parentService ? null : new Subject<void>();\n    // @ts-ignore\n    private rootRegisteredMetaMap: Map<McModalRef, IRegisteredMeta> = this.parentService ? null : new Map();\n\n    // Registered modal for later usage\n    private get registeredMetaMap(): Map<McModalRef, IRegisteredMeta> {\n        return this.parentService ? this.parentService.registeredMetaMap : this.rootRegisteredMetaMap;\n    }\n\n    constructor(\n        @Optional() @SkipSelf() private parentService: McModalControlService) {\n    }\n\n    // Register a modal to listen its open/close\n    registerModal(modalRef: McModalRef): void {\n        if (!this.hasRegistered(modalRef)) {\n            const afterOpenSubscription = modalRef.afterOpen.subscribe(() => this.openModals.push(modalRef));\n            const afterCloseSubscription = modalRef.afterClose.subscribe(() => this.removeOpenModal(modalRef));\n\n            this.registeredMetaMap.set(modalRef, {modalRef, afterOpenSubscription, afterCloseSubscription});\n        }\n    }\n\n    hasRegistered(modalRef: McModalRef): boolean {\n        return this.registeredMetaMap.has(modalRef);\n    }\n\n    // Close all registered opened modals\n    closeAll(): void {\n        let i = this.openModals.length;\n\n        while (i--) {\n            this.openModals[i].close();\n        }\n    }\n\n    private removeOpenModal(modalRef: McModalRef): void {\n        const index = this.openModals.indexOf(modalRef);\n\n        if (index > -1) {\n            this.openModals.splice(index, 1);\n\n            if (!this.openModals.length) {\n                this.afterAllClose.next();\n            }\n        }\n    }\n}\n","import { Observable } from 'rxjs';\n\nimport { McModalComponent } from './modal.component';\n\n\n/**\n * API class that public to users to handle the modal instance.\n * McModalRef is aim to avoid accessing to the modal instance directly by users.\n */\nexport abstract class McModalRef<T = any, R = any> {\n    abstract afterOpen: Observable<void>;\n    abstract afterClose: Observable<R>;\n\n    abstract open(): void;\n\n    abstract close(result?: R): void;\n\n    abstract destroy(result?: R): void;\n\n    /**\n     * Trigger the nzOnOk/nzOnCancel by manual\n     */\n    abstract triggerOk(): void;\n\n    abstract triggerCancel(): void;\n\n    // /**\n    //  * Return the ComponentRef of nzContent when specify nzContent as a Component\n    //  * Note: this method may return undefined if the Component has not ready yet.\n    //    (it only available after Modal's ngOnInit)\n    //  */\n    // abstract getContentComponentRef(): ComponentRef<{}>;\n\n    /**\n     * Return the component instance of nzContent when specify nzContent as a Component\n     * Note: this method may return undefined if the Component has not ready yet.\n     * (it only available after Modal's ngOnInit)\n     */\n    abstract getContentComponent(): T;\n\n    /**\n     * Get the dom element of this Modal\n     */\n    abstract getElement(): HTMLElement;\n\n    /**\n     * Get the instance of the Modal itself\n     */\n    abstract getInstance(): McModalComponent;\n}\n","export interface IClickPosition {\n    x: number;\n    y: number;\n}\n\nexport class ModalUtil {\n    private lastPosition: IClickPosition;\n\n    constructor(private document: Document) {\n        this.lastPosition = {x: -1, y: -1};\n        this.listenDocumentClick();\n    }\n\n    getLastClickPosition(): IClickPosition {\n        return this.lastPosition;\n    }\n\n    listenDocumentClick(): void {\n        this.document.addEventListener('click', (event: MouseEvent) => {\n            this.lastPosition = {x: event.clientX, y: event.clientY};\n        });\n    }\n}\n\nexport default new ModalUtil(document);\n","import { DOCUMENT } from '@angular/common';\nimport {\n    AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef,\n    Component,\n    ComponentFactoryResolver,\n    ComponentRef,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Injector,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    Renderer2,\n    SimpleChanges,\n    TemplateRef,\n    Type,\n    ViewChild,\n    ViewContainerRef, ViewEncapsulation\n} from '@angular/core';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { Overlay, OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { McMeasureScrollbarService } from '@ptsecurity/mosaic/core';\nimport { Observable } from 'rxjs';\n\nimport { McModalControlService } from './modal-control.service';\nimport { McModalRef } from './modal-ref.class';\n// tslint:disable-next-line\nimport ModalUtil from './modal-util';\nimport { IModalButtonOptions, IModalOptions, ModalType, OnClickCallback } from './modal.type';\n\n\n// Duration when perform animations (ms)\nexport const MODAL_ANIMATE_DURATION = 200;\n\ntype AnimationState = 'enter' | 'leave' | null;\n\n@Component({\n    selector: 'mc-modal',\n    templateUrl: './modal.component.html',\n    styleUrls: ['./modal.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        '(keydown)': 'onKeyDown($event)'\n    }\n})\nexport class McModalComponent<T = any, R = any> extends McModalRef<T, R>\n    implements OnInit, OnChanges, AfterViewInit, OnDestroy, IModalOptions {\n\n    // tslint:disable-next-line:no-any\n    @Input() mcModalType: ModalType = 'default';\n    // If not specified, will use <ng-content>\n    @Input() mcContent: string | TemplateRef<{}> | Type<T>;\n    // available when mcContent is a component\n    @Input() mcComponentParams: object;\n    // Default Modal ONLY\n    @Input() mcFooter: string | TemplateRef<{}> | IModalButtonOptions<T>[];\n\n    @Input()\n    get mcVisible() { return this._mcVisible; }\n    set mcVisible(value) { this._mcVisible = value; }\n    _mcVisible = false;\n\n    @Output() mcVisibleChange = new EventEmitter<boolean>();\n\n    @Input() mcZIndex: number = 1000;\n    @Input() mcWidth: number | string = 480;\n    @Input() mcWrapClassName: string;\n    @Input() mcClassName: string;\n    @Input() mcStyle: object;\n    @Input() mcTitle: string | TemplateRef<{}>;\n    @Input() mcCloseByESC: boolean = true;\n\n    @Input()\n    get mcClosable() { return this._mcClosable; }\n    set mcClosable(value) { this._mcClosable = value; }\n    _mcClosable = true;\n\n    @Input()\n    get mcMask() { return this._mcMask; }\n    set mcMask(value) { this._mcMask = value; }\n    _mcMask = true;\n\n    @Input()\n    get mcMaskClosable() { return this._mcMaskClosable; }\n    set mcMaskClosable(value) { this._mcMaskClosable = value; }\n    _mcMaskClosable = true;\n\n    @Input() mcMaskStyle: object;\n    @Input() mcBodyStyle: object;\n\n    // Trigger when modal open(visible) after animations\n    @Output() mcAfterOpen = new EventEmitter<void>();\n    // Trigger when modal leave-animation over\n    @Output() mcAfterClose = new EventEmitter<R>();\n\n    // --- Predefined OK & Cancel buttons\n    @Input() mcOkText: string;\n    @Input() mcOkType = 'primary';\n\n    @Input()\n    get mcOkLoading() { return this._mcOkLoading; }\n    set mcOkLoading(value) { this._mcOkLoading = value; }\n    _mcOkLoading = false;\n\n    @Input() @Output() mcOnOk: EventEmitter<T> | OnClickCallback<T> = new EventEmitter<T>();\n    // Only aim to focus the ok button that needs to be auto focused\n    @ViewChild('autoFocusButtonOk', {read: ElementRef}) autoFocusButtonOk: ElementRef;\n    @Input() mcCancelText: string;\n\n    @Input()\n    get mcCancelLoading() { return this._mcCancelLoading; }\n    set mcCancelLoading(value) { this._mcCancelLoading = value; }\n    _mcCancelLoading = false;\n\n    @Input() @Output() mcOnCancel: EventEmitter<T> | OnClickCallback<T> = new EventEmitter<T>();\n    @ViewChild('modalContainer') modalContainer: ElementRef;\n    @ViewChild('bodyContainer', {read: ViewContainerRef}) bodyContainer: ViewContainerRef;\n    maskAnimationClassMap: object;\n    modalAnimationClassMap: object;\n    // The origin point that animation based on\n    transformOrigin = '0px 0px 0px';\n\n    // Observable alias for mcAfterOpen\n    get afterOpen(): Observable<void> {\n        return this.mcAfterOpen.asObservable();\n    }\n\n    // Observable alias for mcAfterClose\n    get afterClose(): Observable<R> {\n        return this.mcAfterClose.asObservable();\n    }\n\n    get okText(): string {\n        return this.mcOkText;\n    }\n\n    get cancelText(): string {\n        return this.mcCancelText;\n    }\n\n    // Indicate whether this dialog should hidden\n    get hidden(): boolean {\n        return !this.mcVisible && !this.animationState;\n    }\n\n    // Handle the reference when using mcContent as Component\n    private contentComponentRef: ComponentRef<T>;\n    // Current animation state\n    private animationState: AnimationState;\n    private container: HTMLElement | OverlayRef;\n\n    constructor(\n        private overlay: Overlay,\n        private renderer: Renderer2,\n        private cfr: ComponentFactoryResolver,\n        private elementRef: ElementRef,\n        private viewContainer: ViewContainerRef,\n        private mcMeasureScrollbarService: McMeasureScrollbarService,\n        private modalControl: McModalControlService,\n        private changeDetector: ChangeDetectorRef,\n        @Inject(DOCUMENT) private document: any) {\n\n        super();\n    }\n\n    @Input() mcGetContainer: HTMLElement | OverlayRef | (() => HTMLElement | OverlayRef) = () => this.overlay.create();\n\n    ngOnInit() {\n\n        // Create component along without View\n        if (this.isComponent(this.mcContent)) {\n            this.createDynamicComponent(this.mcContent as Type<T>);\n        }\n\n        // Setup default button options\n        if (this.isModalButtons(this.mcFooter)) {\n            this.mcFooter = this.formatModalButtons(this.mcFooter as IModalButtonOptions<T>[]);\n        }\n\n        // Place the modal dom to elsewhere\n        this.container = typeof this.mcGetContainer === 'function' ? this.mcGetContainer() : this.mcGetContainer;\n        if (this.container instanceof HTMLElement) {\n            this.container.appendChild(this.elementRef.nativeElement);\n        } else if (this.container instanceof OverlayRef) {\n            // NOTE: only attach the dom to overlay, the view container is not changed actually\n            this.container.overlayElement.appendChild(this.elementRef.nativeElement);\n        }\n\n        // Register modal when afterOpen/afterClose is stable\n        this.modalControl.registerModal(this);\n    }\n\n    // [NOTE] NOT available when using by service!\n    // Because ngOnChanges never be called when using by service,\n    // here we can't support \"mcContent\"(Component) etc. as inputs that initialized dynamically.\n    // BUT: User also can change \"mcContent\" dynamically to trigger UI changes\n    // (provided you don't use \bComponent that needs initializations)\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.mcVisible) {\n            // Do not trigger animation while initializing\n            this.handleVisibleStateChange(this.mcVisible, !changes.mcVisible.firstChange);\n        }\n    }\n\n    ngAfterViewInit() {\n        // If using Component, it is the time to attach View while bodyContainer is ready\n        if (this.contentComponentRef) {\n            this.bodyContainer.insert(this.contentComponentRef.hostView);\n        }\n\n        if (this.autoFocusButtonOk) {\n            (this.autoFocusButtonOk.nativeElement as HTMLButtonElement).focus();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.container instanceof OverlayRef) {\n            this.container.dispose();\n        }\n    }\n\n    open() {\n        this.changeVisibleFromInside(true);\n    }\n\n    close(result?: R) {\n        this.changeVisibleFromInside(false, result);\n    }\n\n    // Destroy equals Close\n    destroy(result?: R) {\n        this.close(result);\n    }\n\n    triggerOk() {\n        this.onClickOkCancel('ok');\n    }\n\n    triggerCancel() {\n        this.onClickOkCancel('cancel');\n    }\n\n    getInstance(): McModalComponent {\n        return this;\n    }\n\n    getContentComponentRef(): ComponentRef<T> {\n        return this.contentComponentRef;\n    }\n\n    getContentComponent(): T {\n        return this.contentComponentRef && this.contentComponentRef.instance;\n    }\n\n    getElement(): HTMLElement {\n        return this.elementRef && this.elementRef.nativeElement;\n    }\n\n    onClickMask($event: MouseEvent) {\n        if (\n            this.mcMask &&\n            this.mcMaskClosable &&\n            ($event.target as HTMLElement).classList.contains('mc-modal-wrap') &&\n            this.mcVisible\n        ) {\n            this.onClickOkCancel('cancel');\n        }\n    }\n\n    // tslint:disable-next-line\n    isModalType(type: ModalType): boolean {\n        return this.mcModalType === type;\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n\n        if (event.keyCode === ESCAPE && this.container && (this.container instanceof OverlayRef)) {\n\n            this.close();\n            event.preventDefault();\n        }\n    }\n\n    // AoT\n    onClickCloseBtn() {\n        if (this.mcVisible) {\n            this.onClickOkCancel('cancel');\n        }\n    }\n\n    // AoT\n    // tslint:disable-next-line\n    onClickOkCancel(type: 'ok' | 'cancel') {\n        const trigger = { ok: this.mcOnOk, cancel: this.mcOnCancel }[type];\n        const loadingKey = { ok: 'mcOkLoading', cancel: 'mcCancelLoading' }[type];\n\n        if (trigger instanceof EventEmitter) {\n            trigger.emit(this.getContentComponent());\n        } else if (typeof trigger === 'function') {\n\n            const result = trigger(this.getContentComponent());\n            // Users can return \"false\" to prevent closing by default\n            const caseClose = (doClose: boolean | void | {}) => (doClose !== false) && this.close(doClose as R);\n\n            if (isPromise(result)) {\n                this[loadingKey] = true;\n                const handleThen = (doClose) => {\n                    this[loadingKey] = false;\n                    caseClose(doClose);\n                };\n                (result as Promise<void>).then(handleThen).catch(handleThen);\n            } else {\n                caseClose(result);\n            }\n        }\n    }\n\n    // AoT\n    isNonEmptyString(value: {}): boolean {\n        return typeof value === 'string' && value !== '';\n    }\n\n    // AoT\n    isTemplateRef(value: {}): boolean {\n        return value instanceof TemplateRef;\n    }\n\n    // AoT\n    isComponent(value: {}): boolean {\n        return value instanceof Type;\n    }\n\n    // AoT\n    isModalButtons(value: {}): boolean {\n        return Array.isArray(value) && value.length > 0;\n    }\n\n    // Do rest things when visible state changed\n    private handleVisibleStateChange(visible: boolean, animation: boolean = true, closeResult?: R): Promise<any> {\n        // Hide scrollbar at the first time when shown up\n        if (visible) {\n            this.changeBodyOverflow(1);\n        }\n\n        return Promise\n            .resolve(animation && this.animateTo(visible))\n            // Emit open/close event after animations over\n            .then(() => {\n                if (visible) {\n                    this.mcAfterOpen.emit();\n                } else {\n                    this.mcAfterClose.emit(closeResult);\n                    // Show/hide scrollbar when animation is over\n                    this.changeBodyOverflow();\n                }\n            });\n    }\n\n    // Lookup a button's property, if the prop is a function, call & then return the result, otherwise, return itself.\n    // AoT\n    // tslint:disable-next-line\n    getButtonCallableProp(options: IModalButtonOptions<T>, prop: string): {} {\n        const value = options[prop];\n        const args: any[] = [];\n        if (this.contentComponentRef) {\n            args.push(this.contentComponentRef.instance);\n        }\n\n        return typeof value === 'function' ? value.apply(options, args) : value;\n    }\n\n    // On mcFooter's modal button click\n    // AoT\n    // tslint:disable-next-line\n    onButtonClick(button: IModalButtonOptions<T>) {\n        // Call onClick directly\n        const result = this.getButtonCallableProp(button, 'onClick');\n        if (isPromise(result)) {\n            button.loading = true;\n            (result as Promise<{}>).then(() => button.loading = false).catch(() => button.loading = false);\n        }\n    }\n\n    // Change mcVisible from inside\n    private changeVisibleFromInside(visible: boolean, closeResult?: R): Promise<void> {\n        if (this.mcVisible !== visible) {\n            // Change mcVisible value immediately\n            this.mcVisible = visible;\n            this.mcVisibleChange.emit(visible);\n\n            return this.handleVisibleStateChange(visible, true, closeResult);\n        }\n\n        return Promise.resolve();\n    }\n\n    private changeAnimationState(state: AnimationState) {\n        this.animationState = state;\n        if (state) {\n            this.maskAnimationClassMap = {\n                [`fade-${state}`]: true,\n                [`fade-${state}-active`]: true\n            };\n            this.modalAnimationClassMap = {\n                [`zoom-${state}`]: true,\n                [`zoom-${state}-active`]: true\n            };\n        } else {\n            // @ts-ignore\n            this.maskAnimationClassMap = this.modalAnimationClassMap = null;\n        }\n\n        if (this.contentComponentRef) {\n            this.contentComponentRef.changeDetectorRef.markForCheck();\n        } else {\n            this.changeDetector.markForCheck();\n        }\n    }\n\n    private animateTo(isVisible: boolean): Promise<any> {\n        // Figure out the lastest click position when shows up\n        if (isVisible) {\n            // [NOTE] Using timeout due to the document.click event is fired later than visible change,\n            // so if not postponed to next event-loop, we can't get the lastest click position\n            window.setTimeout(() => this.updateTransformOrigin());\n        }\n\n        this.changeAnimationState(isVisible ? 'enter' : 'leave');\n\n        // Return when animation is over\n        return new Promise((resolve) => window.setTimeout(() => {\n            this.changeAnimationState(null);\n            resolve();\n        }, MODAL_ANIMATE_DURATION));\n    }\n\n    private formatModalButtons(buttons: IModalButtonOptions<T>[]): IModalButtonOptions<T>[] {\n        return buttons.map((button) => {\n\n            return {\n                ...{\n                    type: 'default',\n                    size: 'default',\n                    autoLoading: true,\n                    show: true,\n                    loading: false,\n                    disabled: false\n                },\n                ...button\n            };\n        });\n    }\n\n    /**\n     * Create a component dynamically but not attach to any View\n     * (this action will be executed when bodyContainer is ready)\n     * @param component Component class\n     */\n    private createDynamicComponent(component: Type<T>) {\n        const factory = this.cfr.resolveComponentFactory(component);\n        const childInjector = Injector.create({\n            providers: [{provide: McModalRef, useValue: this}],\n            parent: this.viewContainer.parentInjector\n        });\n\n        this.contentComponentRef = factory.create(childInjector);\n\n        if (this.mcComponentParams) {\n            Object.assign(this.contentComponentRef.instance, this.mcComponentParams);\n        }\n\n        // Do the first change detection immediately\n        // (or we do detection at ngAfterViewInit, multi-changes error will be thrown)\n        this.contentComponentRef.changeDetectorRef.detectChanges();\n\n\n    }\n\n    // Update transform-origin to the last click position on document\n    private updateTransformOrigin() {\n        const modalElement = this.modalContainer.nativeElement as HTMLElement;\n        const lastPosition = ModalUtil.getLastClickPosition();\n\n        if (lastPosition) {\n            // tslint:disable-next-line\n            this.transformOrigin = `${lastPosition.x - modalElement.offsetLeft}px ${lastPosition.y - modalElement.offsetTop}px 0px`;\n        }\n    }\n\n    /**\n     * Take care of the body's overflow to decide the existense of scrollbar\n     * @param plusNum The number that the openModals.length will increase soon\n     */\n    private changeBodyOverflow(plusNum: number = 0) {\n        const openModals = this.modalControl.openModals;\n\n        if (openModals.length + plusNum > 0) {\n            // tslint:disable-next-line\n            this.renderer.setStyle(this.document.body, 'padding-right', `${this.mcMeasureScrollbarService.scrollBarWidth}px`);\n            this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n        } else {\n            this.renderer.removeStyle(this.document.body, 'padding-right');\n            this.renderer.removeStyle(this.document.body, 'overflow');\n        }\n    }\n}\n\n////////////\n\nfunction isPromise(obj: {} | void): boolean {\n    // tslint:disable-next-line\n    return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof (obj as Promise<{}>).then === 'function' && typeof (obj as Promise<{}>).catch === 'function';\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n\n@Pipe({\n    name: 'toCssUnit'\n})\nexport class CssUnitPipe implements PipeTransform {\n    transform(value: number | string, defaultUnit: string = 'px'): string {\n        const formatted = +value;\n\n        return isNaN(formatted) ? `${value}` : `${formatted}${defaultUnit}`;\n    }\n}\n","import { ComponentRef, Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { Overlay, OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal } from '@ptsecurity/cdk/portal';\n\nimport { McModalControlService } from './modal-control.service';\nimport { McModalRef } from './modal-ref.class';\nimport { McModalComponent } from './modal.component';\nimport { ConfirmType, IModalOptions, IModalOptionsForService } from './modal.type';\n\n\n// A builder used for managing service creating modals\nexport class ModalBuilderForService {\n\n    // Modal ComponentRef, \"null\" means it has been destroyed\n    private modalRef: ComponentRef<McModalComponent>;\n    private overlayRef: OverlayRef;\n\n    constructor(private overlay: Overlay, options: IModalOptionsForService = {}) {\n        this.createModal();\n\n        if (!('mcGetContainer' in options)) {\n            options.mcGetContainer = null;\n        }\n\n        this.changeProps(options);\n        this.modalRef.instance.open();\n        this.modalRef.instance.mcAfterClose.subscribe(() => this.destroyModal());\n\n        this.overlayRef.keydownEvents()\n            // @ts-ignore\n            .pipe(filter((event: KeyboardEvent) => {\n                return event.keyCode === ESCAPE && options.mcCloseByESC;\n            }))\n            .subscribe(() => this.modalRef.instance.close());\n    }\n\n    getInstance(): McModalComponent {\n        return this.modalRef && this.modalRef.instance;\n    }\n\n    destroyModal(): void {\n        if (this.modalRef) {\n            this.overlayRef.dispose();\n            // @ts-ignore\n            this.modalRef = null;\n        }\n    }\n\n    private changeProps(options: IModalOptions): void {\n        if (this.modalRef) {\n            // here not limit user's inputs at runtime\n            Object.assign(this.modalRef.instance, options);\n        }\n    }\n\n    // Create component to ApplicationRef\n    private createModal(): void {\n        this.overlayRef = this.overlay.create();\n        this.modalRef = this.overlayRef.attach(new ComponentPortal(McModalComponent));\n    }\n}\n\n@Injectable()\nexport class McModalService {\n    // Track of the current close modals (we assume invisible is close this time)\n    get openModals(): McModalRef[] {\n        return this.modalControl.openModals;\n    }\n\n    get afterAllClose(): Observable<void> {\n        return this.modalControl.afterAllClose.asObservable();\n    }\n\n    constructor(\n        private overlay: Overlay,\n        private modalControl: McModalControlService) {\n    }\n\n    // Closes all of the currently-open dialogs\n    closeAll(): void {\n        this.modalControl.closeAll();\n    }\n\n    create<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n\n        if (typeof options.mcOnCancel !== 'function') {\n            // Leave a empty function to close this modal by default\n            // tslint:disable-next-line\n            options.mcOnCancel = () => {};\n        }\n\n        if (!('mcCloseByESC' in options)) {\n            options.mcCloseByESC = true;\n        }\n\n\n        if (!('mcWidth' in options)) {\n            // tslint:disable-next-line\n            options.mcWidth = 480;\n        }\n\n        return new ModalBuilderForService(this.overlay, options).getInstance();\n    }\n\n    confirm<T>(options: IModalOptionsForService<T> = {}, confirmType: ConfirmType = 'confirm'): McModalRef<T> {\n        if ('mcFooter' in options) {\n            console.warn(`The Confirm-Modal doesn't support \"mcFooter\", this property will be ignored.`);\n        }\n\n        // NOTE: only support function currently by calling confirm()\n        if (typeof options.mcOnOk !== 'function') {\n            // Leave a empty function to close this modal by default\n            // tslint:disable-next-line\n            options.mcOnOk = () => {};\n        }\n\n        options.mcModalType = 'confirm';\n        options.mcClassName = `mc-confirm mc-confirm-${confirmType} ${options.mcClassName || ''}`;\n        options.mcMaskClosable = false;\n\n        return this.create(options);\n    }\n\n    success<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n        return this.simpleConfirm(options, 'success');\n    }\n\n    delete<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n        return this.simpleConfirm(options, 'warn');\n    }\n\n    private simpleConfirm<T>(options: IModalOptionsForService<T> = {}, confirmType: ConfirmType): McModalRef<T> {\n        // Remove the Cancel button if the user not specify a Cancel button\n        if (!('mcCancelText' in options)) {\n            // @ts-ignore\n            options.mcCancelText = null;\n        }\n\n        return this.confirm(options, confirmType);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { McButtonModule } from '@ptsecurity/mosaic/button';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { CssUnitPipe } from './css-unit.pipe';\nimport { McModalControlService } from './modal-control.service';\nimport { McModalComponent } from './modal.component';\nimport { McModalService } from './modal.service';\n\n\n@NgModule({\n    imports: [ CommonModule, OverlayModule, McButtonModule, McIconModule ],\n    exports: [ McModalComponent ],\n    declarations: [ McModalComponent, CssUnitPipe ],\n    entryComponents: [ McModalComponent ],\n    providers: [ McModalControlService, McModalService ]\n})\nexport class McModalModule { }\n","import {\n    AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport {\n    CanColor,\n    CanDisable,\n    HasTabIndex,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\nimport { MC_CHECKBOX_CLICK_ACTION, McCheckboxClickAction } from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mc-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McCheckbox),\n    multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n    /** The initial state of the component before any user interaction. */\n    Init,\n    /** The state representing the component when it's becoming checked. */\n    Checked,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate\n}\n\n/** Change event object emitted by McCheckbox. */\nexport class McCheckboxChange {\n    /** The source McCheckbox of the event. */\n    source: McCheckbox;\n    /** The new `checked` value of the checkbox. */\n    checked: boolean;\n}\n\n// Boilerplate for applying mixins to McCheckbox.\n/** @docs-private */\nexport class McCheckboxBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\nexport const _McCheckboxMixinBase =\n    mixinTabIndex(mixinColor(mixinDisabled(McCheckboxBase)));\n\n\n/**\n * A mosaic checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A McCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n */\n@Component({\n    selector: 'mc-checkbox',\n    templateUrl: 'checkbox.html',\n    styleUrls: ['checkbox.css'],\n    exportAs: 'mcCheckbox',\n    host: {\n        class: 'mc-checkbox',\n        '[id]': 'id',\n        '[attr.id]': 'id',\n        '[class.mc-checkbox-indeterminate]': 'indeterminate',\n        '[class.mc-checkbox-checked]': 'checked',\n        '[class.mc-checkbox-disabled]': 'disabled',\n        '[class.mc-checkbox-label-before]': 'labelPosition == \"before\"'\n    },\n    providers: [MC_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCheckbox extends _McCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex {\n\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     */\n    @Input('aria-label') ariaLabel: string = '';\n\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n    private _uniqueId: string = `mc-checkbox-${++nextUniqueId}`;\n\n    /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n    @Input() id: string = this._uniqueId;\n\n    /** Returns the unique id for the visual hidden input. */\n    get inputId(): string {\n        return `${this.id || this._uniqueId}-input`;\n    }\n\n    /** Whether the checkbox is required. */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    private _required: boolean;\n\n    /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n    @Input() labelPosition: 'before' | 'after' = 'after';\n\n    /** Name value will be applied to the input element if present */\n    @Input() name: string | null = null;\n\n    /** Event emitted when the checkbox's `checked` value changes. */\n    @Output() readonly change: EventEmitter<McCheckboxChange> =\n        new EventEmitter<McCheckboxChange>();\n\n    /** Event emitted when the checkbox's `indeterminate` value changes. */\n    @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** The value attribute of the native input element */\n    @Input() value: string;\n\n    /** The native `<input type=\"checkbox\">` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * @docs-private\n     */\n    _onTouched: () => any = () => {\n    }\n\n    private _currentAnimationClass: string = '';\n\n    private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n    private _controlValueAccessorChangeFn: (value: any) => void = () => {\n    }\n\n    constructor(elementRef: ElementRef,\n                private _changeDetectorRef: ChangeDetectorRef,\n                private _focusMonitor: FocusMonitor,\n                @Attribute('tabindex') tabIndex: string,\n                @Optional() @Inject(MC_CHECKBOX_CLICK_ACTION)\n                private _clickAction: McCheckboxClickAction) {\n        super(elementRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._inputElement.nativeElement)\n            .subscribe((focusOrigin) => this._onInputFocusChange(focusOrigin));\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    }\n\n    /**\n     * Whether the checkbox is checked.\n     */\n    @Input()\n    get checked(): boolean {\n        return this._checked;\n    }\n\n    set checked(value: boolean) {\n        if (value != this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _checked: boolean = false;\n\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value != this.disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    @Input()\n    get indeterminate(): boolean {\n        return this._indeterminate;\n    }\n\n    set indeterminate(value: boolean) {\n        const changed = value != this._indeterminate;\n        this._indeterminate = value;\n\n        if (changed) {\n            if (this._indeterminate) {\n                this._transitionCheckState(TransitionCheckState.Indeterminate);\n            } else {\n                this._transitionCheckState(\n                    this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n    }\n\n    private _indeterminate: boolean = false;\n\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // This method is getting called whenever the label of the checkbox changes.\n        // Since the checkbox uses the OnPush strategy we need to notify it about the change\n        // that has been recognized by the cdkObserveContent directive.\n        this._changeDetectorRef.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any) {\n        this.checked = !!value;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this._onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n    }\n\n    _getAriaChecked(): 'true' | 'false' | 'mixed' {\n        return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n    }\n\n    private _transitionCheckState(newState: TransitionCheckState) {\n        const oldState = this._currentCheckState;\n        const element: HTMLElement = this._elementRef.nativeElement;\n\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n\n        this._currentCheckState = newState;\n\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n        }\n    }\n\n    private _emitChangeEvent() {\n        const event = new McCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    }\n\n    /** Function is called whenever the focus changes for the input element. */\n    private _onInputFocusChange(focusOrigin: FocusOrigin) {\n        if (focusOrigin) {\n            this._onTouched();\n        }\n    }\n\n    /** Toggles the `checked` state of the checkbox. */\n    toggle(): void {\n        this.checked = !this.checked;\n    }\n\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event\n     */\n    _onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && this._clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && this._clickAction !== 'check') {\n\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n\n            this.toggle();\n            this._transitionCheckState(\n                this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        } else if (!this.disabled && this._clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mc-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n\n    /** Focuses the checkbox. */\n    focus(): void {\n        this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n    }\n\n    _onInteractionEvent(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n}\n","import {\n    Directive,\n    forwardRef,\n    Provider\n} from '@angular/core';\nimport {\n    CheckboxRequiredValidator,\n    NG_VALIDATORS\n} from '@angular/forms';\n\n\nexport const MC_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McCheckboxRequiredValidator),\n    multi: true\n};\n\n/**\n * Validator for Mosaic checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mc-checkbox`.\n */\n@Directive({\n    selector: `mc-checkbox[required][formControlName],\n             mc-checkbox[required][formControl], mc-checkbox[required][ngModel]`,\n    providers: [MC_CHECKBOX_REQUIRED_VALIDATOR],\n    host: { '[attr.required]': 'required ? \"\" : null' }\n})\nexport class McCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McCheckbox } from './checkbox';\nimport { McCheckboxRequiredValidator } from './checkbox-required-validator';\n\n\n@NgModule({\n    imports: [CommonModule, McCommonModule],\n    exports: [McCheckbox, McCheckboxRequiredValidator, McCommonModule],\n    declarations: [McCheckbox, McCheckboxRequiredValidator]\n})\nexport class McCheckboxModule {\n}\n","import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';\n\nimport { toBoolean } from '@ptsecurity/mosaic/core';\n\n\n@Component({\n    selector: 'mc-divider',\n    host: {\n        class: 'mc-divider',\n        role: 'separator',\n        '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n        '[class.mc-divider-vertical]': 'vertical',\n        '[class.mc-divider-inset]': 'inset'\n    },\n    template: '',\n    styleUrls: ['divider.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false\n})\nexport class McDivider {\n    // Whether the divider is vertically aligned.\n    @Input()\n    get vertical(): boolean {\n        return this._vertical;\n    }\n\n    set vertical(value: boolean) {\n        this._vertical = toBoolean(value);\n    }\n\n    private _vertical: boolean = false;\n\n    // Whether the divider is an inset divider.\n    @Input()\n    get inset(): boolean {\n        return this._inset;\n    }\n\n    set inset(value: boolean) {\n        this._inset = toBoolean(value);\n    }\n\n    private _inset: boolean = false;\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\n\nimport {McCommonModule} from '@ptsecurity/mosaic/core';\n\nimport {McDivider} from './divider.component';\n\n\n@NgModule({\n    imports: [\n        McCommonModule,\n        CommonModule\n    ],\n    exports: [\n        McDivider,\n        McCommonModule\n    ],\n    declarations: [\n        McDivider\n    ]\n})\nexport class McDividerModule {}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-cleaner',\n    template: '<i mc-icon=\"mc-close-M_16\" class=\"mc-cleaner__icon\"></i>'\n})\nexport class McCleaner {\n}\n","import { NgControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\n\n/** An interface which allows a control to work inside of a `MсFormField`. */\nexport abstract class McFormFieldControl<T> {\n    /** The value of the control. */\n    value: T | null;\n\n    /**\n     * Stream that emits whenever the state of the control changes such that the parent `MсFormField`\n     * needs to run change detection.\n     */\n    readonly stateChanges: Observable<void>;\n\n    /** The element ID for this control. */\n    readonly id: string;\n\n    /** The placeholder for this control. */\n    readonly placeholder: string;\n\n    /** Gets the NgControl for this control. */\n    readonly ngControl: NgControl | null;\n\n    /** Whether the control is focused. */\n    readonly focused: boolean;\n\n    /** Whether the control is empty. */\n    readonly empty: boolean;\n\n    /** Whether the control is required. */\n    readonly required: boolean;\n\n    /** Whether the control is disabled. */\n    readonly disabled: boolean;\n\n    /** Whether the control is in an error state. */\n    readonly errorState: boolean;\n\n    /**\n     * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n     * based on their control type. The form field will add a class,\n     * `mat-form-field-type-{{controlType}}` to its root element.\n     */\n    readonly controlType?: string;\n\n    /** Handles a click on the control's container. */\n    abstract onContainerClick(event: MouseEvent): void;\n}\n","import { Directive, Input } from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n@Directive({\n    selector: 'mc-hint',\n    host: {\n        class: 'mc-hint',\n        '[attr.id]': 'id'\n    }\n})\nexport class McHint {\n    @Input() id: string = `mc-hint-${nextUniqueId++}`;\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcPrefix]'\n})\nexport class McPrefix {\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcSuffix]'\n})\nexport class McSuffix {\n}\n","import {\n    AfterContentChecked,\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren, Directive,\n    ElementRef,\n    QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { EMPTY, merge } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n\n\nimport { McCleaner } from './cleaner';\nimport { McFormFieldControl } from './form-field-control';\nimport { getMcFormFieldMissingControlError } from './form-field-errors';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McSuffix } from './suffix';\n\n\nexport class McFormFieldBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\n@Component({\n    selector: 'mc-form-field',\n    exportAs: 'mcFormField',\n    templateUrl: 'form-field.html',\n    // McInput is a directive and can't have styles, so we need to include its styles here.\n    // The McInput styles are fairly minimal so it shouldn't be a big deal for people who\n    // aren't using McInput.\n    styleUrls: [\n        'form-field.css',\n        '../input/input.css'\n    ],\n    host: {\n        class: 'mc-form-field',\n        '[class.mc-form-field_invalid]': '_control.errorState',\n        '[class.mc-form-field_disabled]': '_control.disabled',\n        '[class.mc-form-field_has-prefix]': 'hasPrefix',\n        '[class.mc-form-field_has-suffix]': 'hasSuffix',\n        '[class.mc-form-field_has-cleaner]': 'canShowCleaner',\n        '[class.mc-focused]': '_control.focused',\n        '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n        '[class.ng-touched]': '_shouldForward(\"touched\")',\n        '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n        '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n        '[class.ng-valid]': '_shouldForward(\"valid\")',\n        '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n        '[class.ng-pending]': '_shouldForward(\"pending\")',\n        '(keydown)': 'onKeyDown($event)'\n    },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class McFormField extends McFormFieldBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit {\n\n    @ContentChild(McFormFieldControl) _control: McFormFieldControl<any>;\n    @ContentChildren(McHint) _hint: QueryList<McHint>;\n    @ContentChildren(McSuffix) _suffix: QueryList<McSuffix>;\n    @ContentChildren(McPrefix) _prefix: QueryList<McPrefix>;\n    @ContentChildren(McCleaner) _cleaner: QueryList<McCleaner>;\n\n\n    constructor(\n        public _elementRef: ElementRef,\n        private _changeDetectorRef: ChangeDetectorRef) {\n        super(_elementRef);\n    }\n\n    ngAfterContentInit() {\n        this._validateControlChild();\n        if (this._control.controlType) {\n            this._elementRef.nativeElement.classList\n                .add(`mc-form-field-type-${this._control.controlType}`);\n        }\n\n        // Subscribe to changes in the child control state in order to update the form field UI.\n        this._control.stateChanges.pipe(startWith()).subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n        });\n\n        // Run change detection if the value changes.\n        const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n        merge(valueChanges)\n            .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    ngAfterContentChecked() {\n        this._validateControlChild();\n    }\n\n    ngAfterViewInit() {\n        // Avoid animations on load.\n        this._changeDetectorRef.detectChanges();\n    }\n\n    clearValue($event) {\n        $event.stopPropagation();\n\n        if (this._control && this._control.ngControl) {\n            this._control.ngControl.reset();\n        }\n    }\n\n    onContainerClick($event) {\n        return this._control.onContainerClick && this._control.onContainerClick($event);\n    }\n\n    onKeyDown(e: KeyboardEvent): void {\n        if (e.keyCode === ESCAPE &&\n            this._control.focused &&\n            this.hasCleaner) {\n            if (this._control && this._control.ngControl) {\n                this._control.ngControl.reset();\n            }\n            e.preventDefault();\n        }\n    }\n\n    /** Determines whether a class from the NgControl should be forwarded to the host element. */\n    _shouldForward(prop: string): boolean {\n        const ngControl = this._control ? this._control.ngControl : null;\n\n        return ngControl && ngControl[prop];\n    }\n\n    /** Throws an error if the form field's control is missing. */\n    protected _validateControlChild() {\n        if (!this._control) {\n            throw getMcFormFieldMissingControlError();\n        }\n    }\n\n    get hasHint() {\n        return this._hint && this._hint.length > 0;\n    }\n\n    get hasSuffix() {\n        return this._suffix && this._suffix.length > 0;\n    }\n\n    get hasPrefix() {\n        return this._prefix && this._prefix.length > 0;\n    }\n\n    get hasCleaner() {\n        return this._cleaner && this._cleaner.length > 0;\n    }\n\n    get canShowCleaner() {\n        return  this.hasCleaner &&\n        this._control && this._control.ngControl\n            ? this._control.ngControl.value && !this._control.disabled\n            : false;\n    }\n}\n\n@Directive({\n    selector: 'mc-form-field[mcFormFieldWithoutBorders]',\n    exportAs: 'mcFormFieldWithoutBorders',\n    host: { class: 'mc-form-field_without-borders' }\n})\nexport class McFormFieldWithoutBorders {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McCleaner } from './cleaner';\nimport { McFormField, McFormFieldWithoutBorders } from './form-field';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McSuffix } from './suffix';\n\n\n@NgModule({\n    declarations: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner\n    ],\n    imports: [CommonModule, McIconModule],\n    exports: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner\n    ]\n})\nexport class McFormFieldModule {\n}\n","import { InjectionToken } from '@angular/core';\n\n\nexport const MC_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{ value: any }>('MC_INPUT_VALUE_ACCESSOR');\n","import {\n    Directive, DoCheck, ElementRef, Inject, Input, OnChanges,\n    OnDestroy, OnInit, Optional, Self\n} from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@ptsecurity/cdk/platform';\nimport { CanUpdateErrorState, ErrorStateMatcher, mixinErrorState } from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\n\nimport { getMcInputUnsupportedTypeError } from './input-errors';\nimport { MC_INPUT_VALUE_ACCESSOR } from './input-value-accessor';\n\n\nconst MC_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\n\nlet nextUniqueId = 0;\n\nexport class McInputBase {\n    constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n                public _parentForm: NgForm,\n                public _parentFormGroup: FormGroupDirective,\n                public ngControl: NgControl) {\n    }\n}\n\nexport const _McInputMixinBase = mixinErrorState(McInputBase);\n\n\n@Directive({\n    selector: `input[mcInput]`,\n    exportAs: 'mcInput',\n    host: {\n        'class': 'mc-input',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '(blur)': '_focusChanged(false)',\n        '(focus)': '_focusChanged(true)',\n        '(input)': '_onInput()'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McInput }]\n})\nexport class McInput extends _McInputMixinBase implements McFormFieldControl<any>, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-input';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this._uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    // tslint:disable no-reserved-keywords\n    /** Input type of the element. */\n    @Input()\n    get type(): string {\n        return this._type;\n    }\n\n    set type(value: string) {\n        this._type = value || 'text';\n        this._validateType();\n\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    // tslint:enable no-reserved-keywords\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this._inputValueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n\n    protected _uid = `mc-input-${nextUniqueId++}`;\n    protected _previousNativeValue: any;\n    protected _disabled = false;\n    protected _id: string;\n    protected _required = false;\n    protected _type = 'text';\n    protected _neverEmptyInputTypes = [\n        'date',\n        'datetime',\n        'datetime-local',\n        'month',\n        'time',\n        'week'\n    ].filter((t) => getSupportedInputTypes().has(t));\n\n    private _inputValueAccessor: { value: any };\n\n    constructor(protected _elementRef: ElementRef,\n                protected _platform: Platform,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() _parentForm: NgForm,\n                @Optional() _parentFormGroup: FormGroupDirective,\n                _defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_INPUT_VALUE_ACCESSOR) inputValueAccessor: any) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n        this._previousNativeValue = this.value;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n    }\n\n    /** Focuses the input. */\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Does some manual dirty checking on the native input `value` property. */\n    protected _dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Make sure the input is a supported type. */\n    protected _validateType() {\n        if (MC_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n            throw getMcInputUnsupportedTypeError(this._type);\n        }\n    }\n\n    /** Checks whether the input type is one of the types that are never empty. */\n    protected _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n\n    /** Checks whether the input is invalid based on the native validation. */\n    protected _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        const validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n\n        return validity && validity.badInput;\n    }\n}\n\n@Directive({\n    selector: 'input[mcInputMonospace]',\n    exportAs: 'McInputMonospace',\n    host: { class: 'mc-input_monospace' }\n})\nexport class McInputMono {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McInput, McInputMono } from './input';\n\n\n@NgModule({\n    imports: [ CommonModule, A11yModule, McCommonModule, FormsModule ],\n    exports: [ McInput, McInputMono ],\n    declarations: [ McInput, McInputMono ]\n})\nexport class McInputModule {}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    Output,\n    QueryList,\n    ViewEncapsulation,\n    ChangeDetectorRef,\n    Inject,\n    OnDestroy,\n    OnInit,\n    ViewChild\n} from '@angular/core';\n\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { Subscription } from 'rxjs';\n\nimport { FocusKeyManager, IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { END, ENTER, HOME, PAGE_DOWN, PAGE_UP, SPACE } from '@ptsecurity/cdk/keycodes';\n\nimport {\n    McLine,\n    McLineSetter,\n    CanDisable,\n    mixinDisabled,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n    exportAs: 'mcListOption',\n    selector: 'mc-list-option',\n    host: {\n        tabindex: '-1',\n\n        class: 'mc-list-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': '_hasFocus',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()',\n        '(click)': '_handleClick()'\n    },\n    templateUrl: 'list-option.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListOption implements AfterContentInit, OnDestroy, OnInit, IFocusableOption {\n    _hasFocus: boolean = false;\n\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    @ViewChild('text') _text: ElementRef;\n\n    // Whether the label should appear before or after the checkbox. Defaults to 'after'\n    @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n    @Input() value: any;\n\n    private _focusHandlerInProgress: boolean;\n\n    @Input()\n    get disabled() {\n        return this._disabled || (this.listSelection && this.listSelection.disabled);\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    @Input()\n    get selected(): boolean {\n        return this.listSelection.selectedOptions && this.listSelection.selectedOptions.isSelected(this) || false;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            this.listSelection._reportValueChange();\n        }\n    }\n\n    private _lineSetter: McLineSetter;\n    private _selected = false;\n    private _disabled = false;\n\n    constructor(\n        private _element: ElementRef,\n        private _changeDetector: ChangeDetectorRef,\n        @Inject(forwardRef(() => McListSelection))\n        public listSelection: McListSelection\n    ) {}\n\n    ngOnInit() {\n        if (this._selected) {\n            // List options that are selected at initialization can't be reported properly to the form\n            // control. This is because it takes some time until the selection-list knows about all\n            // available options. Also it can happen that the ControlValueAccessor has an initial value\n            // that should be used instead. Deferring the value change report to the next tick ensures\n            // that the form control value is not being overwritten.\n            const wasSelected = this._selected;\n\n            Promise.resolve().then(() => {\n                if (this._selected || wasSelected) {\n                    this.selected = true;\n                    this._changeDetector.markForCheck();\n                }\n            });\n        }\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    ngOnDestroy(): void {\n        if (this.selected) {\n            // We have to delay this until the next tick in order\n            // to avoid changed after checked errors.\n            Promise.resolve().then(() => this.selected = false);\n        }\n\n        this.listSelection._removeOptionFromList(this);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    focus(): void {\n        this._element.nativeElement.focus();\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    getLabel() {\n        return this._text ? this._text.nativeElement.textContent : '';\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.listSelection.selectedOptions) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.listSelection.selectedOptions.select(this);\n        } else {\n            this.listSelection.selectedOptions.deselect(this);\n        }\n\n        this._changeDetector.markForCheck();\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    _handleClick() {\n        if (this.disabled) { return; }\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    _handleFocus() {\n        if (this.disabled || this._hasFocus) { return; }\n\n        this._hasFocus = true;\n    }\n\n    _handleBlur() {\n        this._hasFocus = false;\n\n        this.listSelection._onTouched();\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n\n\nexport const MC_SELECTION_LIST_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McListSelection),\n    multi: true\n};\n\n// Change event that is being fired whenever the selected state of an option changes. */\nexport class McListSelectionChange {\n    constructor(\n        // Reference to the selection list that emitted the event.\n        public source: McListSelection,\n        // Reference to the option that has been changed.\n        public option: McListOption\n    ) {}\n}\n\n\nexport class McListSelectionBase {}\n\nexport const _McListSelectionMixinBase = mixinDisabled(McListSelectionBase);\n\n@Component({\n    exportAs: 'mcListSelection',\n    selector: 'mc-list-selection',\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'tabIndex'],\n    host: {\n        class: 'mc-list-selection',\n        '[tabIndex]': 'tabIndex',\n        '(focus)': 'focus()',\n        '(blur)': '_onTouched()',\n        '(keydown)': '_onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    providers: [MC_SELECTION_LIST_VALUE_ACCESSOR],\n    preserveWhitespaces: false\n})\nexport class McListSelection extends _McListSelectionMixinBase implements\n    IFocusableOption, CanDisable, AfterContentInit, ControlValueAccessor {\n\n    _keyManager: FocusKeyManager<McListOption>;\n\n    // The option components contained within this selection-list.\n    @ContentChildren(McListOption) options: QueryList<McListOption>;\n\n    tabIndex: number;\n\n    autoSelect: boolean;\n    noUnselect: boolean;\n    multiple: boolean;\n\n    // todo temporary solution\n    withShift: boolean;\n    withCtrl: boolean;\n\n    @Input() horizontal: boolean = false;\n\n    // Emits a change event whenever the selected state of an option changes.\n    @Output() readonly selectionChange: EventEmitter<McListSelectionChange> = new EventEmitter<McListSelectionChange>();\n\n    selectedOptions: SelectionModel<McListOption>;\n\n    // Used for storing the values that were assigned before the options were initialized.\n    private _tempValues: string[] | null;\n\n    private _modelChanges = Subscription.EMPTY;\n\n    constructor(\n        private _element: ElementRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string,\n        @Attribute('multiple') multiple: string\n    ) {\n        super();\n\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.multiple = multiple === null ? true : toBoolean(multiple);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.selectedOptions = new SelectionModel<McListOption>(this.multiple);\n    }\n\n    ngAfterContentInit(): void {\n        this.horizontal = toBoolean(this.horizontal);\n\n        this._keyManager = new FocusKeyManager<McListOption>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation(!this.horizontal)\n            .withHorizontalOrientation(this.horizontal ? 'ltr' : null);\n\n        if (this._tempValues) {\n            this._setOptionsFromValues(this._tempValues);\n            this._tempValues = null;\n        }\n\n        // Sync external changes to the model back to the options.\n        this._modelChanges = this.selectedOptions.onChange!.subscribe((event) => {\n            for (const item of event.added) {\n                item.selected = true;\n            }\n\n            for (const item of event.removed) {\n                item.selected = false;\n            }\n        });\n\n        this.updateScrollSize();\n    }\n\n    ngOnDestroy() {\n        this._modelChanges.unsubscribe();\n    }\n\n    focus() {\n        this._element.nativeElement.focus();\n    }\n\n    selectAll() {\n        this.options.forEach((option) => option.setSelected(true));\n\n        this._reportValueChange();\n    }\n\n    deselectAll() {\n        this.options.forEach((option) => option.setSelected(false));\n\n        this._reportValueChange();\n    }\n\n    updateScrollSize(): void {\n        if (this.horizontal || !this.options.first) { return; }\n\n        this._keyManager.withScrollSize(Math.floor(this._getHeight() / this.options.first._getHeight()));\n    }\n\n    // Sets the focused option of the selection-list.\n    setFocusedOption(option: McListOption): void {\n        this._keyManager.updateActiveItem(option);\n\n        if (this.withShift && this.multiple) {\n            const previousIndex = this._keyManager.previousActiveItemIndex;\n            const activeIndex = this._keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n\n            this.withShift = false;\n        } else if (this.withCtrl) {\n            this.withCtrl = false;\n\n            if (!this._canDeselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) {\n                this.options.forEach((item) => item.setSelected(false));\n                option.setSelected(true);\n            }\n        }\n\n        this._emitChangeEvent(option);\n        this._reportValueChange();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(values: string[]): void {\n        if (this.options) {\n            this._setOptionsFromValues(values || []);\n        } else {\n            this._tempValues = values;\n        }\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this._onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this._onTouched = fn;\n    }\n\n    // Implemented as a part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        if (this.options) {\n            this.options.forEach((option) => option.disabled = isDisabled);\n        }\n    }\n\n    getSelectedOptionValues(): string[] {\n        return this.options.filter((option) => option.selected).map((option) => option.value);\n    }\n\n    // Toggles the selected state of the currently focused option.\n    toggleFocusedOption(): void {\n        const focusedIndex = this._keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n            const focusedOption: McListOption = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this._canDeselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this._emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    _canDeselectLast(listOption: McListOption): boolean {\n        return !(this.noUnselect && this.selectedOptions.selected.length === 1 && listOption.selected);\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    // View to model callback that should be called if the list or its options lost focus.\n    _onTouched: () => void = () => {};\n\n    // Removes an option from the selection list and updates the active item.\n    _removeOptionFromList(option: McListOption) {\n        if (option._hasFocus) {\n            const optionIndex = this._getOptionIndex(option);\n\n            // Check whether the option is the last item\n            if (optionIndex > 0) {\n                this._keyManager.setPreviousItemActive();\n            } else if (optionIndex === 0 && this.options.length > 1) {\n                this._keyManager.setNextItemActive();\n            }\n        }\n    }\n\n    _onKeyDown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n        this.withShift = event.shiftKey;\n        this.withCtrl = event.ctrlKey;\n\n        switch (keyCode) {\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                if (!this.horizontal) { this._keyManager.setPreviousPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                if (!this.horizontal) { this._keyManager.setNextPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    // Reports a value change to the ControlValueAccessor\n    _reportValueChange() {\n        if (this.options) {\n            this._onChange(this.getSelectedOptionValues());\n        }\n    }\n\n    // Emits a change event if the selected state of an option changed.\n    _emitChangeEvent(option: McListOption) {\n        this.selectionChange.emit(new McListSelectionChange(this, option));\n    }\n\n    // Returns the option with the specified value.\n    private _getOptionByValue(value: string): McListOption | undefined {\n        return this.options.find((option) => option.value === value);\n    }\n\n    // Sets the selected options based on the specified values.\n    private _setOptionsFromValues(values: string[]) {\n        this.options.forEach((option) => option.setSelected(false));\n\n        values\n            .map((value) => this._getOptionByValue(value))\n            .filter(Boolean)\n            .forEach((option) => option!.setSelected(true));\n    }\n\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private _isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    // Returns the index of the specified list option.\n    private _getOptionIndex(option: McListOption): number {\n        return this.options.toArray().indexOf(option);\n    }\n\n    // View to model callback that should be called whenever the selected options change.\n    private _onChange: (value: any) => void = (_: any) => {};\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","\nexport function isBoolean(val: any): val is boolean { return typeof val === 'boolean'; }\n\nexport function toBoolean(value: any): boolean {\n    return value != null && `${value}` !== 'false';\n}\n","import { NgModule, InjectionToken, Optional, Inject, isDevMode } from '@angular/core';\nimport { BidiModule } from '@ptsecurity/cdk/bidi';\n\n\n// Injection token that configures whether the Mosaic sanity checks are enabled.\nexport const MC_SANITY_CHECKS = new InjectionToken<boolean>('mc-sanity-checks', {\n    providedIn: 'root',\n    factory: MC_SANITY_CHECKS_FACTORY\n});\n\nexport function MC_SANITY_CHECKS_FACTORY(): boolean {\n    return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Mosaic\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n    imports: [ BidiModule ],\n    exports: [ BidiModule ]\n})\nexport class McCommonModule {\n    // Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n    private _hasDoneGlobalChecks = false;\n\n    // Reference to the global `document` object.\n    private _document = typeof document === 'object' && document ? document : null;\n\n    // Reference to the global 'window' object.\n    private _window = typeof window === 'object' && window ? window : null;\n\n    constructor(@Optional() @Inject(MC_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n        if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n            this._checkDoctypeIsDefined();\n            this._checkThemeIsPresent();\n            this._hasDoneGlobalChecks = true;\n        }\n    }\n\n    // Whether any sanity checks are enabled\n    private _areChecksEnabled(): boolean {\n        return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n    }\n\n    // Whether the code is running in tests.\n    private _isTestEnv() {\n        return this._window && (this._window['__karma__'] || this._window['jasmine']);\n    }\n\n    private _checkDoctypeIsDefined(): void {\n        if (this._document && !this._document.doctype) {\n            console.warn(\n                'Current document does not have a doctype. This may cause ' +\n                'some Mosaic components not to behave as expected.'\n            );\n        }\n    }\n\n    private _checkThemeIsPresent(): void {\n        if (this._document && typeof getComputedStyle === 'function') {\n            const testElement = this._document.createElement('div');\n\n            testElement.classList.add('mc-theme-loaded-marker');\n            this._document.body.appendChild(testElement);\n\n            const computedStyle = getComputedStyle(testElement);\n\n            // In some situations, the computed style of the test element can be null. For example in\n            // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n            // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n            if (computedStyle && computedStyle.display !== 'none') {\n                console.warn(\n                    'Could not find Mosaic core theme. Most Mosaic ' +\n                    'components may not work as expected. For more info refer ' +\n                    'to the theming guide: link there'\n                );\n            }\n\n            this._document.body.removeChild(testElement);\n        }\n    }\n}\n","import { toBoolean } from '../utils/index';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanDisable {\n    disabled: boolean;\n}\n\n// Mixin to augment a directive with a `disabled` property.\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n    return class extends base {\n        private _disabled: boolean = false;\n\n        get disabled() {\n            return this._disabled;\n        }\n\n        set disabled(value: any) {\n            this._disabled = toBoolean(value);\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n    };\n}\n","import { ElementRef } from '@angular/core';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanColor {\n    color: ThemePalette;\n}\n\nexport interface HasElementRef {\n    _elementRef: ElementRef;\n}\n\nexport enum ThemePalette {\n    Primary = 'primary',\n    Second = 'second',\n    Warn = 'warn',\n    Default = 'second'\n}\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T, defaultColor: ThemePalette = ThemePalette.Default): Constructor<CanColor> & T {\n    return class extends base {\n        private _color: ThemePalette;\n\n        get color(): ThemePalette {\n            return this._color;\n        }\n\n        set color(value: ThemePalette) {\n            const colorPalette = value || defaultColor;\n\n            if (colorPalette !== this._color) {\n                if (this._color) {\n                    this._elementRef.nativeElement.classList.remove(`mc-${this._color}`);\n                }\n\n                if (colorPalette) {\n                    this._elementRef.nativeElement.classList.add(`mc-${colorPalette}`);\n                }\n\n                this._color = colorPalette;\n            }\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n\n            // Set the default color that can be specified from the mixin.\n            this.color = defaultColor;\n        }\n    };\n}\n\n","import { Constructor } from './constructor';\nimport { CanDisable } from './disabled';\n\n\nexport interface HasTabIndex {\n    tabIndex: number;\n}\n\n// Mixin to augment a directive with a `tabIndex` property.\nexport function mixinTabIndex<\n        T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0): Constructor<HasTabIndex\n    > & T {\n    return class extends base {\n        private _tabIndex: number = defaultTabIndex;\n\n        get tabIndex(): number {\n            return this.disabled ? -1 : this._tabIndex;\n        }\n\n        set tabIndex(value: number) {\n            this._tabIndex = value != null ? value : defaultTabIndex;\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n    };\n}\n","import { FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { ErrorStateMatcher } from '../error/error-options';\nimport { Constructor } from './constructor';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n    readonly stateChanges: Subject<void>;\n    errorState: boolean;\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState();\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n    _parentFormGroup: FormGroupDirective;\n    _parentForm: NgForm;\n    _defaultErrorStateMatcher: ErrorStateMatcher;\n    ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n    : Constructor<CanUpdateErrorState> & T {\n    return class extends base {\n        /** Whether the component is in an error state. */\n        errorState: boolean = false;\n\n        /**\n         * Stream that emits whenever the state of the input changes such that the wrapping\n         * `MсFormField` needs to run change detection.\n         */\n        readonly stateChanges = new Subject<void>();\n\n        errorStateMatcher: ErrorStateMatcher;\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n\n        updateErrorState() {\n            const oldState = this.errorState;\n            const parent = this._parentFormGroup || this._parentForm;\n            const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n            const control = this.ngControl ? this.ngControl.control as FormControl : null;\n            const newState = matcher.isErrorState(control, parent);\n\n            if (newState !== oldState) {\n                this.errorState = newState;\n                this.stateChanges.next();\n            }\n        }\n    };\n}\n","export function getMcFormFieldMissingControlError(): Error {\n  return Error('mc-form-field must contain a McFormFieldControl.');\n}\n","export function getMcInputUnsupportedTypeError(inputType: string): Error {\n    return Error(`Input type \"${inputType}\" isn't supported by mcInput.`);\n}\n","import { NgModule, Directive, ElementRef, QueryList } from '@angular/core';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(McLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n    selector: '[mc-line], [mcLine]',\n    host: { class: 'mc-line' }\n})\nexport class McLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class McLineSetter {\n    constructor(private _lines: QueryList<McLine>, private _element: ElementRef) {\n        this._setLineClass(this._lines.length);\n\n        this._lines.changes.subscribe(() => {\n            this._setLineClass(this._lines.length);\n        });\n    }\n\n    private _setLineClass(count: number): void {\n        this._resetClasses();\n        if (count === 2 || count === 3) {\n            this._setClass(`mc-${count}-line`, true);\n        } else if (count > 3) {\n            this._setClass(`mc-multi-line`, true);\n        }\n    }\n\n    private _resetClasses(): void {\n        this._setClass('mc-2-line', false);\n        this._setClass('mc-3-line', false);\n        this._setClass('mc-multi-line', false);\n    }\n\n    private _setClass(className: string, isAdd: boolean): void {\n        if (isAdd) {\n            this._element.nativeElement.classList.add(className);\n        } else {\n            this._element.nativeElement.classList.remove(className);\n        }\n    }\n}\n\n@NgModule({\n    imports: [],\n    exports: [McLine],\n    declarations: [McLine]\n})\nexport class McLineModule {}\n","import { Injectable } from '@angular/core';\nimport { FormGroupDirective, NgForm, FormControl } from '@angular/forms';\n\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n    }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({ providedIn: 'root' })\nexport class ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n    }\n}\n","import { Component, ViewEncapsulation, Input, ChangeDetectionStrategy } from '@angular/core';\n\n\nexport type McPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mc-primary .mc-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mc-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'mc-pseudo-checkbox',\n    styleUrls: ['pseudo-checkbox.css'],\n    template: '',\n    host: {\n        class: 'mc-pseudo-checkbox',\n        '[class.mc-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n        '[class.mc-pseudo-checkbox-checked]': 'state === \"checked\"',\n        '[class.mc-pseudo-checkbox-disabled]': 'disabled'\n    }\n})\nexport class McPseudoCheckbox {\n    // Display state of the checkbox.\n    @Input() state: McPseudoCheckboxState = 'unchecked';\n\n    // Whether the checkbox is disabled.\n    @Input() disabled: boolean = false;\n}\n","import { NgModule } from '@angular/core';\n\nimport { McPseudoCheckbox } from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n    exports: [McPseudoCheckbox],\n    declarations: [McPseudoCheckbox]\n})\nexport class McPseudoCheckboxModule {}\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class McMeasureScrollbarService {\n\n    get scrollBarWidth(): number {\n        if (this._scrollbarWidth) {\n            return this._scrollbarWidth;\n        }\n        this.initScrollBarWidth();\n\n        return this._scrollbarWidth;\n    }\n\n    private _scrollbarWidth: number;\n    private scrollbarMeasure = {\n        position: 'absolute',\n        top: '-9999px',\n        width: '50px',\n        height: '50px',\n        overflow: 'scroll'\n    };\n\n    constructor(\n        @Inject(DOCUMENT) private document: any\n    ) {\n        this.initScrollBarWidth();\n    }\n\n    initScrollBarWidth() {\n        const scrollDiv = this.document.createElement('div');\n\n        for (const scrollProp in this.scrollbarMeasure) {\n            if (this.scrollbarMeasure.hasOwnProperty(scrollProp)) {\n                scrollDiv.style[scrollProp] = this.scrollbarMeasure[scrollProp];\n            }\n        }\n\n        this.document.body.appendChild(scrollDiv);\n\n        const width = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n\n        this.document.body.removeChild(scrollDiv);\n        this._scrollbarWidth = width;\n    }\n}\n","import {\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { mixinColor, CanColor } from '@ptsecurity/mosaic/core';\n\n\n@Directive({\n    selector: '[mc-icon]',\n    host: { class: 'mc mc-icon' }\n})\nexport class McIconCSSStyler {}\n\n\nexport class McIconBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McIconMixinBase = mixinColor(McIconBase);\n\n\n@Component({\n    selector: `[mc-icon]`,\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./icon.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McIcon extends _McIconMixinBase implements CanColor {\n    constructor(elementRef: ElementRef, @Attribute('mc-icon') iconName: string) {\n        super(elementRef);\n\n        elementRef.nativeElement.classList.add(iconName);\n    }\n\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McIcon,\n    McIconCSSStyler\n} from './icon.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McIcon,\n        McIconCSSStyler\n    ],\n    declarations: [\n        McIcon,\n        McIconCSSStyler\n    ]\n})\nexport class McIconModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    OnDestroy,\n    QueryList,\n    ViewEncapsulation,\n    ContentChildren\n} from '@angular/core';\n\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { Platform } from '@ptsecurity/cdk/platform';\n\nimport { mixinColor, mixinDisabled, CanColor, CanDisable } from '@ptsecurity/mosaic/core';\nimport { McIcon } from '@ptsecurity/mosaic/icon';\n\n\n@Directive({\n    selector: 'button[mc-button], a[mc-button]',\n    host: { class: 'mc-button' }\n})\nexport class McButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-xs-button], a[mc-xs-button]',\n    host: { class: 'mc-button mc-button_xs' }\n})\nexport class McXSButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-sm-button], a[mc-sm-button]',\n    host: { class: 'mc-button mc-button_sm' }\n})\nexport class McSMButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-lg-button], a[mc-lg-button]',\n    host: { class: 'mc-button mc-button_lg' }\n})\nexport class McLGButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-xl-button], a[mc-xl-button]',\n    host: { class: 'mc-button mc-button_xl' }\n})\nexport class McXLButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-icon-button], a[mc-icon-button]',\n    queries: {\n        contentChildren: new ContentChildren(McIcon)\n    },\n    host: { class: 'mc-icon-button' }\n})\nexport class McIconButtonCSSStyler {\n    nativeElement: Element;\n\n    contentChildren: QueryList<McIcon>;\n\n    constructor(elementRef: ElementRef) {\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        this._addClassModificatorForIcons();\n    }\n\n    _addClassModificatorForIcons() {\n        const twoIcons = 2;\n        const icons = this.contentChildren.map((item) => item._elementRef.nativeElement);\n\n        if (icons.length === 1) {\n            const iconElement = icons[0];\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-icon-button_left');\n                }\n\n                if (iconElement.previousSibling) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-icon-button_right');\n                }\n            }\n        } else if (icons.length === twoIcons) {\n            const firstIconElement = icons[0];\n            const secondIconElement = icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n}\n\n\nexport class McButtonBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McButtonMixinBase = mixinColor(mixinDisabled(McButtonBase));\n\n\n@Component({\n    selector: `\n        button[mc-button],\n        button[mc-xs-button],\n        button[mc-sm-button],\n        button[mc-lg-button],\n        button[mc-xl-button]\n    `,\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[disabled]': 'disabled || null'\n    }\n})\nexport class McButton extends _McButtonMixinBase implements OnDestroy, CanDisable, CanColor {\n    constructor(elementRef: ElementRef, private _platform: Platform, private _focusMonitor: FocusMonitor) {\n        super(elementRef);\n\n        this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this._getHostElement().focus();\n    }\n\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n\n\n@Component({\n    selector: 'a[mc-button], a[mc-xs-button], a[mc-sm-button], a[mc-lg-button], a[mc-xl-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[attr.tabindex]': 'disabled ? -1 : 0',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': '_haltDisabledEvents($event)'\n    }\n})\nexport class McAnchor extends McButton {\n    constructor(platform: Platform, focusMonitor: FocusMonitor, elementRef: ElementRef) {\n        super(elementRef, platform, focusMonitor);\n    }\n\n    _haltDisabledEvents(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\n\n\n@Component({\n    selector: 'button[mc-icon-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[attr.tabindex]': 'disabled ? -1 : 0',\n        '[attr.disabled]': 'disabled || null'\n    }\n})\nexport class McIconButton extends McButton {\n    constructor(platform: Platform, focusMonitor: FocusMonitor, elementRef: ElementRef) {\n        super(elementRef, platform, focusMonitor);\n    }\n\n    _haltDisabledEvents(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McButton,\n    McAnchor,\n    McIconButton,\n    McButtonCSSStyler,\n    McXSButtonCSSStyler,\n    McSMButtonCSSStyler,\n    McLGButtonCSSStyler,\n    McXLButtonCSSStyler,\n    McIconButtonCSSStyler\n} from './button.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McButton,\n        McAnchor,\n        McIconButton,\n        McButtonCSSStyler,\n        McXSButtonCSSStyler,\n        McSMButtonCSSStyler,\n        McLGButtonCSSStyler,\n        McXLButtonCSSStyler,\n        McIconButtonCSSStyler\n    ],\n    declarations: [\n        McButton,\n        McAnchor,\n        McIconButton,\n        McButtonCSSStyler,\n        McXSButtonCSSStyler,\n        McSMButtonCSSStyler,\n        McLGButtonCSSStyler,\n        McXLButtonCSSStyler,\n        McIconButtonCSSStyler\n    ]\n})\nexport class McButtonModule {}\n","import { InjectionToken } from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type McCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MC_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<McCheckboxClickAction>('mc-checkbox-click-action');\n"],"names":["this","options","reset","arrayOfInstances","notifyOnChanges","updateScrollSize","McTreeSelection","prototype","_getHeight","_elementRef","nativeElement","getClientRects","height","_emitNavigationEvent","option","navigationChange","emit","McTreeNavigationChange","_emitChangeEvent","selectionChange","_isValidIndex","index","length","_canDeselectLast","noUnselect","selectedOptions","selected","tslib_1.__decorate","ViewChild","CdkTreeNodeOutlet","tslib_1.__metadata","ContentChildren","forwardRef","McTreeNodeOption","QueryList","Input","Output","McTreeSelection_1","Component","exportAs","selector","template","host","[tabIndex]","class","role","(keydown)","(window:resize)","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","providers","provide","CdkTree","useExisting","tslib_1.__param","Attribute","ElementRef","IterableDiffers","ChangeDetectorRef","String","_McTreeSelectionBase","MC_TREE_DIRECTIVES","McTreeNodeDef","McTreeNodePadding","McTreeModule","NgModule","imports","CommonModule","CdkTreeModule","exports","declarations","McTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","node","level","resultNodes","parentMap","_this","flatNode","push","pipe","take","subscribe","children","forEach","child","childParentMap","slice","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","McTreeFlatDataSource","_super","treeFlattener","initialData","call","_flattenedData","BehaviorSubject","_expandedData","_data","tslib_1.__extends","Object","defineProperty","get","value","set","next","data","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","onChange","merge","apply","map","disconnect","DataSource","McTreeNestedDataSource","arguments","VERSION","Version","elementRef","setAttribute","encodeURI","McNavbarItem","dropdownItems","dropdownContent","querySelectorAll","ngOnInit","denyClickIfDisabled","_focusMonitor$","_focusMonitor","monitor","hasDropdownContent","listenClickOutside","ngAfterViewInit","startListenFocusDropdownItems","ngOnDestroy","_subscription","unsubscribe","stopMonitoring","stopListenFocusDropdownItems","isActiveDropdownLink","link","_platform","isBrowser","window","location","href","indexOf","handleClickByItem","toggleDropdown","handleKeydown","$event","isNavbarItem","target","classList","contains","MC_NAVBAR_ITEM","keyCode","SPACE","handleClickByDropdownItem","forceCloseDropdown","add","origin","isCollapsed","_cdRef","detectChanges","_dropdownElements","el","events","eventListeners","event","removeEventListener","addEventListener","hasAttribute","stopImmediatePropagation","ContentChild","read","TemplateRef","inputs","[attr.disabled]","[attr.tabindex]","FocusMonitor","Platform","_McNavbarMixinBase","McNavbarContainer","position","HostBinding","Directive","MC_NAVBAR_CONTAINER","CollapsibleItem","element","width","_collapsed","processCollapsed","collapsed","updateCollapsedClass","remove","CachedItemWidth","itemsForCollapse","undefined","_collapsedItemsWidth","calculateAndCacheCollapsedItemsWidth","updateTitle","item","reduce","acc","getTitle","computedTitle","getAttribute","decodeURI","innerText","removeAttribute","McNavbar","forceRecalculateItemsWidth","resizeDebounceInterval","firstLevelElement","secondLevelElements","MC_NAVBAR_BRAND","MC_NAVBAR_TITLE","resizeObserver","fromEvent","debounceTime","_resizeSubscription","updateCollapsed","bind","querySelector","getBoundingClientRect","_itemsWidths","calculateAndCacheItemsWidth","_totalItemsWidths","calculateAndCacheTotalItemsWidth","collapseDelta","totalItemsWidth","maxAllowedWidth","itemsWidths","canCollapse","collapsedItemsWidth","setTimeout","getOuterElementWidth","parseInt","getComputedStyle","getPropertyValue","allItemsSelector","e","allItems","Array","from","getItemsForCollapse","McNavbarModule","A11yModule","PlatformModule","McIconModule","McNavbarTitle","McNavbarBrand","McNavbarLogo","idIterator","McProgressBarBase","_McProgressBarMixinBase","mixinColor","McProgressBar","id","mode","color","ThemePalette","Primary","Math","max","min","[attr.id]","McProgressBarModule","McProgressSpinnerBase","_McProgressPinnerMixinBase","McProgressSpinner","percentage","McProgressSpinnerModule","nextUniqueId","McRadioChange","source","McRadioGroupBase","_McRadioGroupMixinBase","mixinDisabled","MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","McRadioGroup","multi","_changeDetector","change","EventEmitter","_value","_name","_selected","_isInitialized","_labelPosition","_disabled","_required","controlValueAccessorChangeFn","onTouched","updateRadioButtonNames","v","markRadiosForCheck","newValue","updateSelectedRadioFromValue","checkSelectedRadioButton","toBoolean","checked","ngAfterContentInit","touch","emitChangeEvent","_radios","radio","markForCheck","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","name","isAlreadySelected","McRadioButton","descendants","McRadioButtonBase","_McRadioButtonMixinBase","mixinTabIndex","radioGroup","_radioDispatcher","_uniqueId","isFocused","_checked","removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","required","labelPosition","focus","onInputClick","stopPropagation","onInputChange","groupValueChanged","[class.mc-radio-checked]","[class.mc-radio-disabled]","(focus)","Optional","UniqueSelectionDispatcher","McRadioModule","McCommonModule","McTreeNodeDef_1","CdkTreeNodeDef","_baseLeftPadding","_iconWidth","_indent","McTreeNodePadding_1","_withIcon","_paddingIndent","nodeLevel","_treeNode","_tree","_level","leftPadding","_setPadding","CdkTreeNodePadding","treeSelection","_hasFocus","McTreeNodeOption_1","isSelected","setSelected","setFocusedOption","toggle","select","deselect","_handleFocus","_handleBlur","_handleClick","tabindex","[class.mc-selected]","[class.mc-focused]","[attr.aria-expanded]","[attr.aria-level]","(blur)","(click)","CdkTreeNode","Inject","McTreeSelectionChange","_differs","_changeDetectorRef","tabIndex","multiple","autoSelect","SelectionModel","rawValue","console","log","_onKeyDown","withShift","shiftKey","withCtrl","ctrlKey","LEFT_ARROW","_keyManager","activeItem","collapse","preventDefault","RIGHT_ARROW","ENTER","toggleFocusedOption","HOME","setFirstItemActive","END","setLastItemActive","PAGE_UP","setPreviousPageItemActive","PAGE_DOWN","setNextPageItemActive","onKeydown","FocusKeyManager","withTypeAhead","withVerticalOrientation","withHorizontalOrientation","first","withScrollSize","floor","updateActiveItem","previousIndex_1","previousActiveItemIndex","activeIndex_1","activeItemIndex","focusedIndex","focusedOption","toArray","renderNodeChanges","dataDiffer","viewContainer","parentData","_dataDiffer","_nodeOutlet","_embeddedViews","view","viewDef","def","nodeMatchedQueries","matchedQueryIds","nodeData","nodeIndex","instance","McList","McListBase","McListSubheaderCssStyler","McListItemBase","McListItem","_element","_lineSetter","McLineSetter","_lines","_getHostElement","McLine","preserveWhitespaces","McListModule","McLineModule","McListSelection","McListOption","McLinkBase","_McLinkBase","McLink","McLinkModule","McModalControlService","parentService","rootOpenModals","rootAfterAllClose","Subject","rootRegisteredMetaMap","Map","afterAllClose","openModals","registeredMetaMap","registerModal","modalRef","hasRegistered","afterOpenSubscription","afterOpen","afterCloseSubscription","afterClose","removeOpenModal","has","closeAll","close","splice","Injectable","SkipSelf","McModalRef","ModalUtil","document","lastPosition","x","y","listenDocumentClick","getLastClickPosition","clientX","clientY","ModalUtil$1","McModalComponent","overlay","renderer","cfr","mcMeasureScrollbarService","modalControl","changeDetector","mcModalType","_mcVisible","mcVisibleChange","mcZIndex","mcWidth","mcCloseByESC","_mcClosable","_mcMask","_mcMaskClosable","mcAfterOpen","mcAfterClose","mcOkType","_mcOkLoading","mcOnOk","_mcCancelLoading","mcOnCancel","transformOrigin","mcGetContainer","create","asObservable","mcOkText","mcCancelText","mcVisible","animationState","isComponent","mcContent","createDynamicComponent","isModalButtons","mcFooter","formatModalButtons","container","HTMLElement","appendChild","OverlayRef","overlayElement","ngOnChanges","handleVisibleStateChange","firstChange","contentComponentRef","bodyContainer","insert","hostView","autoFocusButtonOk","dispose","open","changeVisibleFromInside","result","destroy","triggerOk","onClickOkCancel","triggerCancel","getInstance","getContentComponentRef","getContentComponent","getElement","onClickMask","mcMask","mcMaskClosable","isModalType","type","onKeyDown","ESCAPE","onClickCloseBtn","trigger","ok","cancel","loadingKey","caseClose_1","doClose","isPromise","handleThen","then","catch","isNonEmptyString","isTemplateRef","Type","isArray","visible","animation","closeResult","changeBodyOverflow","Promise","resolve","animateTo","getButtonCallableProp","prop","args","onButtonClick","button","loading","changeAnimationState","state","maskAnimationClassMap","_a","modalAnimationClassMap","_b","changeDetectorRef","isVisible","updateTransformOrigin","buttons","tslib_1.__assign","size","autoLoading","show","component","factory","resolveComponentFactory","childInjector","Injector","useValue","parent","parentInjector","mcComponentParams","assign","modalElement","modalContainer","offsetLeft","offsetTop","plusNum","setStyle","body","scrollBarWidth","removeStyle","ViewContainerRef","DOCUMENT","Overlay","Renderer2","ComponentFactoryResolver","McMeasureScrollbarService","CssUnitPipe","transform","defaultUnit","formatted","isNaN","Pipe","ModalBuilderForService","createModal","changeProps","destroyModal","overlayRef","keydownEvents","filter","attach","ComponentPortal","McModalService","confirm","confirmType","warn","mcClassName","success","simpleConfirm","delete","McModalModule","OverlayModule","McButtonModule","entryComponents","McNavbarItemBase","Subscription","_McCheckboxMixinBase","MC_CHECKBOX_REQUIRED_VALIDATOR","NG_VALIDATORS","McCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","McCheckboxModule","McCheckbox","McDivider","_vertical","_inset","[attr.aria-orientation]","[class.mc-divider-vertical]","[class.mc-divider-inset]","McDividerModule","McCleaner","McFormFieldControl","McHint","McPrefix","McSuffix","McFormFieldBase","McFormField","_validateControlChild","_control","controlType","stateChanges","startWith","valueChanges","ngControl","EMPTY","ngAfterContentChecked","clearValue","onContainerClick","focused","hasCleaner","_shouldForward","getMcFormFieldMissingControlError","_hint","_suffix","_prefix","_cleaner","[class.mc-form-field_invalid]","[class.mc-form-field_disabled]","[class.mc-form-field_has-prefix]","[class.mc-form-field_has-suffix]","[class.mc-form-field_has-cleaner]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","McFormFieldWithoutBorders","McFormFieldModule","MC_INPUT_VALUE_ACCESSOR","InjectionToken","MC_INPUT_INVALID_TYPES","McInputBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","_McInputMixinBase","mixinErrorState","McInput","inputValueAccessor","_uid","_type","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","McInput_1","coerceBooleanProperty","_id","_validateType","complete","ngDoCheck","updateErrorState","_dirtyCheckNativeValue","_focusChanged","_onInput","_isNeverEmpty","_isBadInput","getMcInputUnsupportedTypeError","validity","badInput","ErrorStateMatcher","[attr.placeholder]","[disabled]","[required]","(input)","Self","NgControl","NgForm","FormGroupDirective","McInputMono","McInputModule","FormsModule","listSelection","checkboxPosition","_reportValueChange","wasSelected_1","_removeOptionFromList","getLabel","_text","textContent","_onTouched","MC_SELECTION_LIST_VALUE_ACCESSOR","McListSelectionChange","McListSelectionBase","_McListSelectionMixinBase","horizontal","_modelChanges","_onChange","_","_tempValues","_setOptionsFromValues","_i","added","_c","removed","selectAll","deselectAll","values","getSelectedOptionValues","listOption","optionIndex","_getOptionIndex","setPreviousItemActive","setNextItemActive","_getOptionByValue","find","Boolean","__extends","d","b","__","constructor","extendStatics","__decorate","decorators","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","isBoolean","val","MC_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","Default","_color","colorPalette","defaultTabIndex","_tabIndex","errorState","oldState","matcher","errorStateMatcher","control","newState","isErrorState","Error","inputType","obj","setPrototypeOf","__proto__","p","hasOwnProperty","__assign","s","n","MC_SANITY_CHECKS","providedIn","_sanityChecksEnabled","_hasDoneGlobalChecks","_document","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","isDevMode","_isTestEnv","doctype","testElement","createElement","computedStyle","display","removeChild","BidiModule","_setLineClass","count","_resetClasses","_setClass","className","isAdd","ShowOnDirtyErrorStateMatcher","form","invalid","dirty","submitted","touched","McPseudoCheckbox","[class.mc-pseudo-checkbox-indeterminate]","[class.mc-pseudo-checkbox-checked]","[class.mc-pseudo-checkbox-disabled]","McPseudoCheckboxModule","scrollbarMeasure","top","overflow","initScrollBarWidth","_scrollbarWidth","scrollDiv","scrollProp","style","offsetWidth","clientWidth","McIconCSSStyler","McIconBase","_McIconMixinBase","McIcon","iconName","McButtonCSSStyler","McXSButtonCSSStyler","McSMButtonCSSStyler","McLGButtonCSSStyler","McXLButtonCSSStyler","McIconButtonCSSStyler","_addClassModificatorForIcons","icons","contentChildren","iconElement","previousElementSibling","nextElementSibling","nextSibling","previousSibling","firstIconElement","secondIconElement","queries","McButtonBase","_McButtonMixinBase","McButton","McAnchor","platform","focusMonitor","_haltDisabledEvents","McIconButton","MC_CHECKBOX_CLICK_ACTION","MC_CHECKBOX_CONTROL_VALUE_ACCESSOR","TransitionCheckState","McCheckboxChange","McCheckboxBase","_clickAction","ariaLabel","ariaLabelledby","indeterminateChange","_currentAnimationClass","_currentCheckState","Init","_controlValueAccessorChangeFn","_indeterminate","_inputElement","focusOrigin","_onInputFocusChange","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_onLabelTextChange","_getAriaChecked","indeterminate","_onInputClick","focusVia","_onInteractionEvent","[id]","[class.mc-checkbox-indeterminate]","[class.mc-checkbox-checked]","[class.mc-checkbox-disabled]","[class.mc-checkbox-label-before]"],"mappings":"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"}