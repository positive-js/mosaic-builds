{"version":3,"file":"mosaic.umd.min.js","sources":["../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/form-field/cleaner.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field.module.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input.module.ts","../../src/lib/progress-bar/progress-bar.component.ts","../../src/lib/progress-bar/progress-bar.module.ts","../../src/lib/progress-spinner/progress-spinner.component.ts","../../src/lib/progress-spinner/progress-spinner.module.ts","../../src/lib/navbar/navbar.component.ts","../../src/lib/navbar/navbar.module.ts","../../src/lib/version.ts","../../src/lib/radio/radio.component.ts","../../src/lib/radio/radio.module.ts","../../src/lib/list/list-selection.component.ts","../../src/lib/list/list.component.ts","../../src/lib/list/list.module.ts","../../src/lib/checkbox/checkbox-config.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/utils/utils.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/core/line/line.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/icon/icon.component.ts","../../src/lib/icon/icon.module.ts","../../src/lib/button/button.component.ts","../../src/lib/button/button.module.ts","../../src/lib/divider/divider.component.ts","../../src/lib/divider/divider.module.ts"],"sourcesContent":["import {\n    AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport {\n    CanColor,\n    CanDisable,\n    HasTabIndex,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\nimport { MC_CHECKBOX_CLICK_ACTION, McCheckboxClickAction } from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mc-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McCheckbox),\n    multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n    /** The initial state of the component before any user interaction. */\n    Init,\n    /** The state representing the component when it's becoming checked. */\n    Checked,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate\n}\n\n/** Change event object emitted by McCheckbox. */\nexport class McCheckboxChange {\n    /** The source McCheckbox of the event. */\n    source: McCheckbox;\n    /** The new `checked` value of the checkbox. */\n    checked: boolean;\n}\n\n// Boilerplate for applying mixins to McCheckbox.\n/** @docs-private */\nexport class McCheckboxBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\nexport const _McCheckboxMixinBase =\n    mixinTabIndex(mixinColor(mixinDisabled(McCheckboxBase)));\n\n\n/**\n * A mosaic checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A McCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n */\n@Component({\n    selector: 'mc-checkbox',\n    templateUrl: 'checkbox.html',\n    styleUrls: ['checkbox.css'],\n    exportAs: 'mcCheckbox',\n    host: {\n        class: 'mc-checkbox',\n        '[id]': 'id',\n        '[attr.id]': 'id',\n        '[class.mc-checkbox-indeterminate]': 'indeterminate',\n        '[class.mc-checkbox-checked]': 'checked',\n        '[class.mc-checkbox-disabled]': 'disabled',\n        '[class.mc-checkbox-label-before]': 'labelPosition == \"before\"'\n    },\n    providers: [MC_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCheckbox extends _McCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex {\n\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     */\n    @Input('aria-label') ariaLabel: string = '';\n\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n    private _uniqueId: string = `mc-checkbox-${++nextUniqueId}`;\n\n    /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n    @Input() id: string = this._uniqueId;\n\n    /** Returns the unique id for the visual hidden input. */\n    get inputId(): string {\n        return `${this.id || this._uniqueId}-input`;\n    }\n\n    /** Whether the checkbox is required. */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    private _required: boolean;\n\n    /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n    @Input() labelPosition: 'before' | 'after' = 'after';\n\n    /** Name value will be applied to the input element if present */\n    @Input() name: string | null = null;\n\n    /** Event emitted when the checkbox's `checked` value changes. */\n    @Output() readonly change: EventEmitter<McCheckboxChange> =\n        new EventEmitter<McCheckboxChange>();\n\n    /** Event emitted when the checkbox's `indeterminate` value changes. */\n    @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** The value attribute of the native input element */\n    @Input() value: string;\n\n    /** The native `<input type=\"checkbox\">` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * @docs-private\n     */\n    _onTouched: () => any = () => {\n    }\n\n    private _currentAnimationClass: string = '';\n\n    private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n    private _controlValueAccessorChangeFn: (value: any) => void = () => {\n    }\n\n    constructor(elementRef: ElementRef,\n                private _changeDetectorRef: ChangeDetectorRef,\n                private _focusMonitor: FocusMonitor,\n                @Attribute('tabindex') tabIndex: string,\n                @Optional() @Inject(MC_CHECKBOX_CLICK_ACTION)\n                private _clickAction: McCheckboxClickAction) {\n        super(elementRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._inputElement.nativeElement)\n            .subscribe((focusOrigin) => this._onInputFocusChange(focusOrigin));\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    }\n\n    /**\n     * Whether the checkbox is checked.\n     */\n    @Input()\n    get checked(): boolean {\n        return this._checked;\n    }\n\n    set checked(value: boolean) {\n        if (value != this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _checked: boolean = false;\n\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value != this.disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    @Input()\n    get indeterminate(): boolean {\n        return this._indeterminate;\n    }\n\n    set indeterminate(value: boolean) {\n        const changed = value != this._indeterminate;\n        this._indeterminate = value;\n\n        if (changed) {\n            if (this._indeterminate) {\n                this._transitionCheckState(TransitionCheckState.Indeterminate);\n            } else {\n                this._transitionCheckState(\n                    this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n    }\n\n    private _indeterminate: boolean = false;\n\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // This method is getting called whenever the label of the checkbox changes.\n        // Since the checkbox uses the OnPush strategy we need to notify it about the change\n        // that has been recognized by the cdkObserveContent directive.\n        this._changeDetectorRef.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any) {\n        this.checked = !!value;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this._onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n    }\n\n    _getAriaChecked(): 'true' | 'false' | 'mixed' {\n        return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n    }\n\n    private _transitionCheckState(newState: TransitionCheckState) {\n        const oldState = this._currentCheckState;\n        const element: HTMLElement = this._elementRef.nativeElement;\n\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n\n        this._currentCheckState = newState;\n\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n        }\n    }\n\n    private _emitChangeEvent() {\n        const event = new McCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    }\n\n    /** Function is called whenever the focus changes for the input element. */\n    private _onInputFocusChange(focusOrigin: FocusOrigin) {\n        if (focusOrigin) {\n            this._onTouched();\n        }\n    }\n\n    /** Toggles the `checked` state of the checkbox. */\n    toggle(): void {\n        this.checked = !this.checked;\n    }\n\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event\n     */\n    _onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && this._clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && this._clickAction !== 'check') {\n\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n\n            this.toggle();\n            this._transitionCheckState(\n                this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        } else if (!this.disabled && this._clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mc-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n\n    /** Focuses the checkbox. */\n    focus(): void {\n        this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n    }\n\n    _onInteractionEvent(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n}\n","import {\n    Directive,\n    forwardRef,\n    Provider\n} from '@angular/core';\nimport {\n    CheckboxRequiredValidator,\n    NG_VALIDATORS\n} from '@angular/forms';\n\n\nexport const MC_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McCheckboxRequiredValidator),\n    multi: true\n};\n\n/**\n * Validator for Mosaic checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mc-checkbox`.\n */\n@Directive({\n    selector: `mc-checkbox[required][formControlName],\n             mc-checkbox[required][formControl], mc-checkbox[required][ngModel]`,\n    providers: [MC_CHECKBOX_REQUIRED_VALIDATOR],\n    host: { '[attr.required]': 'required ? \"\" : null' }\n})\nexport class McCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McCheckbox } from './checkbox';\nimport { McCheckboxRequiredValidator } from './checkbox-required-validator';\n\n\n@NgModule({\n    imports: [CommonModule, McCommonModule],\n    exports: [McCheckbox, McCheckboxRequiredValidator, McCommonModule],\n    declarations: [McCheckbox, McCheckboxRequiredValidator]\n})\nexport class McCheckboxModule {\n}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-cleaner',\n    template: '<i mc-icon=\"mc-close-M_16\" class=\"mc-cleaner__icon\"></i>'\n})\nexport class McCleaner {\n}\n","import { NgControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\n\n/** An interface which allows a control to work inside of a `MсFormField`. */\nexport abstract class McFormFieldControl<T> {\n    /** The value of the control. */\n    value: T | null;\n\n    /**\n     * Stream that emits whenever the state of the control changes such that the parent `MсFormField`\n     * needs to run change detection.\n     */\n    readonly stateChanges: Observable<void>;\n\n    /** The element ID for this control. */\n    readonly id: string;\n\n    /** The placeholder for this control. */\n    readonly placeholder: string;\n\n    /** Gets the NgControl for this control. */\n    readonly ngControl: NgControl | null;\n\n    /** Whether the control is focused. */\n    readonly focused: boolean;\n\n    /** Whether the control is empty. */\n    readonly empty: boolean;\n\n    /** Whether the control is required. */\n    readonly required: boolean;\n\n    /** Whether the control is disabled. */\n    readonly disabled: boolean;\n\n    /** Whether the control is in an error state. */\n    readonly errorState: boolean;\n\n    /**\n     * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n     * based on their control type. The form field will add a class,\n     * `mat-form-field-type-{{controlType}}` to its root element.\n     */\n    readonly controlType?: string;\n\n    /** Handles a click on the control's container. */\n    abstract onContainerClick(event: MouseEvent): void;\n}\n","import { Directive, Input } from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n@Directive({\n    selector: 'mc-hint',\n    host: {\n        class: 'mc-hint',\n        '[attr.id]': 'id'\n    }\n})\nexport class McHint {\n    @Input() id: string = `mc-hint-${nextUniqueId++}`;\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcPrefix]'\n})\nexport class McPrefix {\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcSuffix]'\n})\nexport class McSuffix {\n}\n","import {\n    AfterContentChecked,\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren, Directive,\n    ElementRef,\n    QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { EMPTY, merge } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n\n\nimport { McCleaner } from './cleaner';\nimport { McFormFieldControl } from './form-field-control';\nimport { getMcFormFieldMissingControlError } from './form-field-errors';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McSuffix } from './suffix';\n\n\nexport class McFormFieldBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\n@Component({\n    selector: 'mc-form-field',\n    exportAs: 'mcFormField',\n    templateUrl: 'form-field.html',\n    // McInput is a directive and can't have styles, so we need to include its styles here.\n    // The McInput styles are fairly minimal so it shouldn't be a big deal for people who\n    // aren't using McInput.\n    styleUrls: [\n        'form-field.css',\n        '../input/input.css'\n    ],\n    host: {\n        class: 'mc-form-field',\n        '[class.mc-form-field_invalid]': '_control.errorState',\n        '[class.mc-form-field_disabled]': '_control.disabled',\n        '[class.mc-form-field_has-prefix]': 'hasPrefix',\n        '[class.mc-form-field_has-suffix]': 'hasSuffix',\n        '[class.mc-form-field_has-cleaner]': 'canShowCleaner',\n        '[class.mc-focused]': '_control.focused',\n        '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n        '[class.ng-touched]': '_shouldForward(\"touched\")',\n        '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n        '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n        '[class.ng-valid]': '_shouldForward(\"valid\")',\n        '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n        '[class.ng-pending]': '_shouldForward(\"pending\")',\n        '(keydown)': 'onKeyDown($event)'\n    },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class McFormField extends McFormFieldBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit {\n\n    @ContentChild(McFormFieldControl) _control: McFormFieldControl<any>;\n    @ContentChildren(McHint) _hint: QueryList<McHint>;\n    @ContentChildren(McSuffix) _suffix: QueryList<McSuffix>;\n    @ContentChildren(McPrefix) _prefix: QueryList<McPrefix>;\n    @ContentChildren(McCleaner) _cleaner: QueryList<McCleaner>;\n\n\n    constructor(\n        public _elementRef: ElementRef,\n        private _changeDetectorRef: ChangeDetectorRef) {\n        super(_elementRef);\n    }\n\n    ngAfterContentInit() {\n        this._validateControlChild();\n        if (this._control.controlType) {\n            this._elementRef.nativeElement.classList\n                .add(`mc-form-field-type-${this._control.controlType}`);\n        }\n\n        // Subscribe to changes in the child control state in order to update the form field UI.\n        this._control.stateChanges.pipe(startWith()).subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n        });\n\n        // Run change detection if the value changes.\n        const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n        merge(valueChanges)\n            .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    ngAfterContentChecked() {\n        this._validateControlChild();\n    }\n\n    ngAfterViewInit() {\n        // Avoid animations on load.\n        this._changeDetectorRef.detectChanges();\n    }\n\n    clearValue($event) {\n        $event.stopPropagation();\n\n        if (this._control && this._control.ngControl) {\n            this._control.ngControl.reset();\n        }\n    }\n\n    onContainerClick($event) {\n        return this._control.onContainerClick && this._control.onContainerClick($event);\n    }\n\n    onKeyDown(e: KeyboardEvent): void {\n        if (e.keyCode === ESCAPE &&\n            this._control.focused &&\n            this.hasCleaner) {\n            if (this._control && this._control.ngControl) {\n                this._control.ngControl.reset();\n            }\n            e.preventDefault();\n        }\n    }\n\n    /** Determines whether a class from the NgControl should be forwarded to the host element. */\n    _shouldForward(prop: string): boolean {\n        const ngControl = this._control ? this._control.ngControl : null;\n\n        return ngControl && ngControl[prop];\n    }\n\n    /** Throws an error if the form field's control is missing. */\n    protected _validateControlChild() {\n        if (!this._control) {\n            throw getMcFormFieldMissingControlError();\n        }\n    }\n\n    get hasHint() {\n        return this._hint && this._hint.length > 0;\n    }\n\n    get hasSuffix() {\n        return this._suffix && this._suffix.length > 0;\n    }\n\n    get hasPrefix() {\n        return this._prefix && this._prefix.length > 0;\n    }\n\n    get hasCleaner() {\n        return this._cleaner && this._cleaner.length > 0;\n    }\n\n    get canShowCleaner() {\n        return  this.hasCleaner &&\n        this._control && this._control.ngControl\n            ? this._control.ngControl.value && !this._control.disabled\n            : false;\n    }\n}\n\n@Directive({\n    selector: 'mc-form-field[mcFormFieldWithoutBorders]',\n    exportAs: 'mcFormFieldWithoutBorders',\n    host: { class: 'mc-form-field_without-borders' }\n})\nexport class McFormFieldWithoutBorders {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McCleaner } from './cleaner';\nimport { McFormField, McFormFieldWithoutBorders } from './form-field';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McSuffix } from './suffix';\n\n\n@NgModule({\n    declarations: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner\n    ],\n    imports: [CommonModule, McIconModule],\n    exports: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner\n    ]\n})\nexport class McFormFieldModule {\n}\n","import { InjectionToken } from '@angular/core';\n\n\nexport const MC_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{ value: any }>('MC_INPUT_VALUE_ACCESSOR');\n","import {\n    Directive, DoCheck, ElementRef, Inject, Input, OnChanges,\n    OnDestroy, OnInit, Optional, Self\n} from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@ptsecurity/cdk/platform';\nimport { CanUpdateErrorState, ErrorStateMatcher, mixinErrorState } from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\n\nimport { getMcInputUnsupportedTypeError } from './input-errors';\nimport { MC_INPUT_VALUE_ACCESSOR } from './input-value-accessor';\n\n\nconst MC_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\n\nlet nextUniqueId = 0;\n\nexport class McInputBase {\n    constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n                public _parentForm: NgForm,\n                public _parentFormGroup: FormGroupDirective,\n                public ngControl: NgControl) {\n    }\n}\n\nexport const _McInputMixinBase = mixinErrorState(McInputBase);\n\n\n@Directive({\n    selector: `input[mcInput]`,\n    exportAs: 'mcInput',\n    host: {\n        'class': 'mc-input',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '(blur)': '_focusChanged(false)',\n        '(focus)': '_focusChanged(true)',\n        '(input)': '_onInput()'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McInput }]\n})\nexport class McInput extends _McInputMixinBase implements McFormFieldControl<any>, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-input';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this._uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    // tslint:disable no-reserved-keywords\n    /** Input type of the element. */\n    @Input()\n    get type(): string {\n        return this._type;\n    }\n\n    set type(value: string) {\n        this._type = value || 'text';\n        this._validateType();\n\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    // tslint:enable no-reserved-keywords\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this._inputValueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n\n    protected _uid = `mc-input-${nextUniqueId++}`;\n    protected _previousNativeValue: any;\n    protected _disabled = false;\n    protected _id: string;\n    protected _required = false;\n    protected _type = 'text';\n    protected _neverEmptyInputTypes = [\n        'date',\n        'datetime',\n        'datetime-local',\n        'month',\n        'time',\n        'week'\n    ].filter((t) => getSupportedInputTypes().has(t));\n\n    private _inputValueAccessor: { value: any };\n\n    constructor(protected _elementRef: ElementRef,\n                protected _platform: Platform,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() _parentForm: NgForm,\n                @Optional() _parentFormGroup: FormGroupDirective,\n                _defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_INPUT_VALUE_ACCESSOR) inputValueAccessor: any) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n        this._previousNativeValue = this.value;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n    }\n\n    /** Focuses the input. */\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Does some manual dirty checking on the native input `value` property. */\n    protected _dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Make sure the input is a supported type. */\n    protected _validateType() {\n        if (MC_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n            throw getMcInputUnsupportedTypeError(this._type);\n        }\n    }\n\n    /** Checks whether the input type is one of the types that are never empty. */\n    protected _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n\n    /** Checks whether the input is invalid based on the native validation. */\n    protected _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        const validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n\n        return validity && validity.badInput;\n    }\n}\n\n@Directive({\n    selector: 'input[mcInputMonospace]',\n    exportAs: 'McInputMonospace',\n    host: { class: 'mc-input_monospace' }\n})\nexport class McInputMono {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McInput, McInputMono } from './input';\n\n\n@NgModule({\n    imports: [ CommonModule, A11yModule, McCommonModule, FormsModule ],\n    exports: [ McInput, McInputMono ],\n    declarations: [ McInput, McInputMono ]\n})\nexport class McInputModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressBarMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressBarBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressBarMixinBase = mixinColor(McProgressBarBase);\n\n@Component({\n    selector: 'mc-progress-bar',\n    templateUrl: './progress-bar.component.html',\n    styleUrls: ['./progress-bar.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-bar',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressBar extends _McProgressBarMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-bar-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressBarMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McProgressBar\n} from './progress-bar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressBar\n    ],\n    declarations: [\n        McProgressBar\n    ]\n})\nexport class McProgressBarModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressSpinnerBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressPinnerMixinBase = mixinColor(McProgressSpinnerBase);\n\nconst MAX_DASH_ARRAY = 273;\n\n@Component({\n    selector: 'mc-progress-spinner',\n    templateUrl: './progress-spinner.component.html',\n    styleUrls: ['./progress-spinner.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-spinner',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressSpinner extends _McProgressPinnerMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-spinner-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressSpinnerMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n\n    get dashOffsetPercent(): string {\n        return `${MAX_DASH_ARRAY - this.percentage * MAX_DASH_ARRAY}%`;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McProgressSpinner } from './progress-spinner.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressSpinner\n    ],\n    declarations: [\n        McProgressSpinner\n    ]\n})\nexport class McProgressSpinnerModule {}\n","import { fromEvent } from 'rxjs';\nimport { Subscription } from 'rxjs/internal/Subscription';\nimport { debounceTime } from 'rxjs/operators';\n\nimport {\n    AfterViewInit,\n    Component, Directive,\n    ElementRef,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    ViewEncapsulation\n} from '@angular/core';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\n\nimport { CanDisable, mixinDisabled } from '@ptsecurity/mosaic/core';\n\n\nconst COLLAPSED_CLASS: string = 'mc-navbar-collapsed-title';\nconst MC_ICON = 'mc-icon';\nconst MC_NAVBAR = 'mc-navbar';\nconst MC_NAVBAR_CONTAINER = 'mc-navbar-container';\nconst MC_NAVBAR_ITEM = 'mc-navbar-item';\nconst MC_NAVBAR_BRAND = 'mc-navbar-brand';\nconst MC_NAVBAR_TITLE = 'mc-navbar-title';\nconst MC_NAVBAR_LOGO = 'mc-navbar-logo';\n\nexport type McNavbarContainerPositionType = 'left' | 'right';\n\n@Directive({\n    selector: MC_NAVBAR_LOGO,\n    host: {\n        class: MC_NAVBAR_LOGO\n    }\n})\nexport class McNavbarLogo {}\n\n@Directive({\n    selector: MC_NAVBAR_BRAND,\n    host: {\n        class: MC_NAVBAR_BRAND\n    }\n})\nexport class McNavbarBrand {}\n\n@Directive({\n    selector: MC_NAVBAR_TITLE,\n    host: {\n        class: MC_NAVBAR_TITLE\n    }\n})\nexport class McNavbarTitle {}\n\nexport class McNavbarItemBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McNavbarMixinBase = mixinDisabled(McNavbarItemBase);\n\n@Component({\n    selector: MC_NAVBAR_ITEM,\n    template: `\n        <a [attr.tabindex]=\"disabled ? -1 : tabIndex\" class=\"mc-navbar-item\">\n            <ng-content>\n            </ng-content>\n        </a>\n    `,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null'\n    }\n})\nexport class McNavbarItem extends _McNavbarMixinBase implements OnInit, OnDestroy, CanDisable {\n\n    @Input()\n    tabIndex: number = 0;\n\n    @Input()\n    set collapsedTitle(value: string) {\n        this.elementRef.nativeElement.setAttribute('computedTitle', encodeURI(value));\n    }\n\n    constructor(\n        public  elementRef: ElementRef,\n        private _focusMonitor: FocusMonitor\n    ) {\n        super(elementRef);\n    }\n\n    ngOnInit() {\n        this.denyClickIfDisabled();\n\n        this._focusMonitor.monitor(this.elementRef.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n    }\n\n    // This method is required due to angular 2 issue https://github.com/angular/angular/issues/11200\n    private denyClickIfDisabled() {\n        const events: Event[] = this.elementRef.nativeElement.eventListeners('click');\n\n        events.forEach((event) => this.elementRef.nativeElement.removeEventListener('click', event));\n\n        this.elementRef.nativeElement.addEventListener('click', (event: MouseEvent) => {\n            if (this.elementRef.nativeElement.hasAttribute('disabled')) {\n                event.stopImmediatePropagation();\n            }\n        }, true);\n\n        events.forEach((event) => this.elementRef.nativeElement.addEventListener('click', event));\n    }\n}\n\n@Directive({\n    selector: MC_NAVBAR_CONTAINER\n})\nexport class McNavbarContainer {\n    @Input()\n    position: McNavbarContainerPositionType = 'left';\n\n    @HostBinding('class')\n    get cssClasses(): string {\n        return this.position === 'left' ? 'mc-navbar-left' : 'mc-navbar-right';\n    }\n}\n\nclass CollapsibleItem {\n    private _collapsed: boolean = false;\n\n    constructor(\n        public element: HTMLElement,\n        public width: number\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        this._collapsed = collapsed;\n\n        this.updateCollapsedClass();\n    }\n\n    private updateCollapsedClass() {\n        if (this._collapsed) {\n            this.element.classList.add(COLLAPSED_CLASS);\n        } else {\n            this.element.classList.remove(COLLAPSED_CLASS);\n        }\n\n    }\n}\n\nclass CachedItemWidth {\n\n    get canCollapse(): boolean {\n        return this.itemsForCollapse.length > 0;\n    }\n\n    private _collapsedItemsWidth: number;\n\n    get collapsedItemsWidth(): number {\n        if (this._collapsedItemsWidth !== undefined) {\n            return this._collapsedItemsWidth;\n        }\n\n        this.calculateAndCacheCollapsedItemsWidth();\n\n        return this._collapsedItemsWidth;\n    }\n\n    constructor(\n        public element: HTMLElement,\n        public width: number,\n        public itemsForCollapse: CollapsibleItem[] = []\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        if (this.itemsForCollapse.length > 0) {\n            this.updateTitle(collapsed);\n        }\n\n        this.itemsForCollapse.forEach((item) => item.processCollapsed(collapsed));\n    }\n\n    private calculateAndCacheCollapsedItemsWidth() {\n        this._collapsedItemsWidth = this.itemsForCollapse\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getTitle(): string {\n        const computedTitle = this.element.getAttribute('computedTitle');\n\n        return computedTitle\n            ? decodeURI(computedTitle)\n            : (this.itemsForCollapse.length > 0 ? this.itemsForCollapse[0].element.innerText : '');\n    }\n\n    private updateTitle(collapsed: boolean) {\n        if (collapsed) {\n            this.element.setAttribute('title', this.getTitle());\n        } else {\n            this.element.removeAttribute('title');\n        }\n    }\n}\n\n\n@Component({\n    selector: MC_NAVBAR,\n    template: `\n        <nav class=\"mc-navbar\">\n            <ng-content select=\"[${MC_NAVBAR_CONTAINER}],${MC_NAVBAR_CONTAINER}\"></ng-content>\n        </nav>\n    `,\n    styleUrls: ['./navbar.css'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class McNavbar implements AfterViewInit, OnDestroy {\n\n    private readonly forceRecalculateItemsWidth: boolean = false;\n    private readonly resizeDebounceInterval: number = 100;\n    private readonly firstLevelElement: string = MC_NAVBAR_CONTAINER;\n    private readonly secondLevelElements: string[] = [\n        MC_NAVBAR_ITEM,\n        MC_NAVBAR_BRAND,\n        MC_NAVBAR_TITLE\n    ];\n\n    private _totalItemsWidths: number;\n    private _itemsWidths: CachedItemWidth[];\n\n    private get maxAllowedWidth(): number {\n        return this._elementRef.nativeElement.querySelector('nav').getBoundingClientRect().width;\n    }\n\n    private get itemsWidths(): CachedItemWidth[] {\n        if (this._itemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._itemsWidths;\n        }\n\n        this.calculateAndCacheItemsWidth();\n\n        return this._itemsWidths;\n    }\n\n    private get totalItemsWidth(): number {\n        if (this._totalItemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._totalItemsWidths;\n        }\n\n        this.calculateAndCacheTotalItemsWidth();\n\n        return this._totalItemsWidths;\n    }\n\n    private _resizeSubscription: Subscription;\n\n    constructor(\n        private _elementRef: ElementRef\n    ) {\n        const resizeObserver = fromEvent(window, 'resize')\n            .pipe(debounceTime(this.resizeDebounceInterval));\n\n        this._resizeSubscription = resizeObserver.subscribe(this.updateCollapsed.bind(this));\n    }\n\n    updateCollapsed(): void {\n        let collapseDelta = this.totalItemsWidth - this.maxAllowedWidth;\n\n        for (let i = this.itemsWidths.length - 1; i >= 0; i--) {\n            const item = this.itemsWidths[i];\n\n            if (!item.canCollapse) {\n                continue;\n            }\n\n            item.processCollapsed(collapseDelta > 0);\n            collapseDelta -= item.collapsedItemsWidth;\n        }\n    }\n\n    ngAfterViewInit(): void {\n        // Note: this wait is required for loading and rendering fonts for icons;\n        // unfortunately we cannot control font rendering\n        setTimeout(() => this.updateCollapsed(), 0);\n    }\n\n    ngOnDestroy() {\n        this._resizeSubscription.unsubscribe();\n    }\n\n    private calculateAndCacheTotalItemsWidth() {\n        this._totalItemsWidths = this.itemsWidths\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getOuterElementWidth(element: HTMLElement): number {\n        const baseWidth  = element.getBoundingClientRect().width;\n        const marginRight = parseInt(getComputedStyle(element).getPropertyValue('margin-right'));\n        const marginLeft = parseInt(getComputedStyle(element).getPropertyValue('margin-left'));\n\n        return baseWidth + marginRight + marginLeft;\n    }\n\n    private calculateAndCacheItemsWidth() {\n        const allItemsSelector = this.secondLevelElements\n            .map((e: string) => `${this.firstLevelElement}>${e}`);\n        const allItems: HTMLElement[] = Array.from(this._elementRef.nativeElement.querySelectorAll(allItemsSelector));\n\n        this._itemsWidths = allItems\n            .map((el) => new CachedItemWidth(el, this.getOuterElementWidth(el), this.getItemsForCollapse(el)));\n    }\n\n    private getItemsForCollapse(element: HTMLElement): CollapsibleItem[] {\n        const icon = element.querySelector(`[${MC_ICON}],${MC_NAVBAR_LOGO},[${MC_NAVBAR_LOGO}]`);\n\n        if (!icon) {\n            return [];\n        }\n\n        return Array.from(element.querySelectorAll(MC_NAVBAR_TITLE))\n            .map((el) => new CollapsibleItem(<HTMLElement> el, el.getBoundingClientRect().width));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McNavbar,\n    McNavbarContainer,\n    McNavbarItem,\n    McNavbarTitle,\n    McNavbarBrand,\n    McNavbarLogo\n} from './navbar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ],\n    declarations: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ]\n})\nexport class McNavbarModule {}\n","\nimport { Version } from '@angular/core';\n\nexport const VERSION = new Version('0.0.1-e1a80b9');\n","import {\n    AfterContentInit, AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef,\n    Input, OnDestroy, OnInit, Optional, Output, QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\n\nimport {UniqueSelectionDispatcher} from '@ptsecurity/cdk/collections';\n\nimport {\n    CanColor,\n    CanDisable,\n    HasTabIndex,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/** Change event object emitted by McRadio. */\nexport class McRadioChange {\n    constructor(\n        /** The McRadioButton that emits the change event. */\n        public source: McRadioButton,\n        /** The value of the McRadioButton. */\n        public value: any) {}\n}\n\n// Boilerplate for applying mixins to McRadioGroup.\n/** @docs-private */\nexport class McRadioGroupBase { }\nexport const _McRadioGroupMixinBase = mixinDisabled(McRadioGroupBase);\n\n/**\n * Provider Expression that allows mc-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McRadioGroup),\n    multi: true\n};\n\n@Directive({\n    selector: 'mc-radio-group',\n    exportAs: 'mcRadioGroup',\n    providers: [MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n    host: {\n        'role': 'radiogroup',\n        'class': 'mc-radio-group'\n    },\n    inputs: ['disabled']\n})\nexport class McRadioGroup extends _McRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** Child radio buttons. */\n    @ContentChildren(forwardRef(() => McRadioButton), { descendants: true })\n    _radios: QueryList<McRadioButton>;\n\n    /**\n     * Selected value for group. Should equal the value of the selected radio button if there *is*\n     * a corresponding radio button with a matching value. If there is *not* such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    private _value: any = null;\n\n    /** The HTML name attribute applied to radio buttons in this group. */\n    private _name: string = `mc-radio-group-${nextUniqueId++}`;\n\n    /** The currently selected radio button. Should match value. */\n    private _selected: McRadioButton | null = null;\n\n    /** Whether the `value` has been set to its initial value. */\n    private _isInitialized: boolean = false;\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    private _labelPosition: 'before' | 'after' = 'after';\n\n    /** Whether the radio group is disabled. */\n    private _disabled: boolean = false;\n\n    /** Whether the radio group is required. */\n    private _required: boolean = false;\n\n    /** The method to be called in order to update ngModel */\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @docs-private\n     */\n    onTouched: () => any = () => {};\n\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    @Input()\n    get name(): string { return this._name; }\n    set name(value: string) {\n        this._name = value;\n        this.updateRadioButtonNames();\n    }\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this.markRadiosForCheck();\n    }\n\n    /** Value of the radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n\n            this.updateSelectedRadioFromValue();\n            this.checkSelectedRadioButton();\n        }\n    }\n\n    checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n\n    /** Whether the radio button is selected. */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: McRadioButton | null) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this.checkSelectedRadioButton();\n    }\n\n    /** Whether the radio group is disabled */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /** Whether the radio group is required */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    constructor(private _changeDetector: ChangeDetectorRef) {\n        super();\n    }\n\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on McRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the McRadioGroup.\n        this._isInitialized = true;\n    }\n\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        if (this._isInitialized) {\n            this.change.emit(new McRadioChange(this._selected!, this._value));\n        }\n    }\n\n    markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach((radio) => radio.markForCheck());\n        }\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n\n    private updateRadioButtonNames(): void {\n        if (this._radios) {\n            this._radios.forEach((radio) => {\n                radio.name = this.name;\n            });\n        }\n    }\n\n    /** Updates the `selected` radio button from the internal _value state. */\n    private updateSelectedRadioFromValue(): void {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected != null && this._selected.value === this._value;\n\n        if (this._radios != null && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach((radio) => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n}\n\n\n// Boilerplate for applying mixins to McRadioButton.\n/** @docs-private */\nexport class McRadioButtonBase {\n    // Since the disabled property is manually defined for the McRadioButton and isn't set up in\n    // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n    // defined to properly work.\n    disabled: boolean;\n\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McRadioButtonMixinBase =\n    mixinColor(mixinTabIndex(McRadioButtonBase));\n\n\n@Component({\n    selector: 'mc-radio-button',\n    templateUrl: 'radio.component.html',\n    styleUrls: ['radio.css'],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    exportAs: 'mcRadioButton',\n    host: {\n        'class': 'mc-radio-button',\n        '[attr.id]': 'id',\n        '[class.mc-radio-checked]': 'checked',\n        '[class.mc-radio-disabled]': 'disabled',\n        '(focus)': '_inputElement.nativeElement.focus()'\n    }\n})\nexport class McRadioButton extends _McRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, HasTabIndex {\n\n    private _uniqueId: string = `mc-radio-${++nextUniqueId}`;\n\n    /* tslint:disable:member-ordering */\n\n    /** The unique ID for the radio button. */\n    @Input() id: string = this._uniqueId;\n\n    /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n    @Input() name: string;\n\n    /** Used to set the 'aria-label' attribute on the underlying input element. */\n    @Input('aria-label') ariaLabel: string;\n\n    /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n    @Input('aria-labelledby') ariaLabelledby: string;\n\n    /** The 'aria-describedby' attribute is read after the element's label and field type. */\n    @Input('aria-describedby') ariaDescribedby: string;\n\n    /** Whether this radio button is checked. */\n    @Input()\n    get checked(): boolean { return this._checked; }\n    set checked(value: boolean) {\n        const newCheckedState = toBoolean(value);\n\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** The value of this radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(value: any) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup != null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n\n    /** Whether the radio button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n    }\n    set disabled(value: boolean) {\n        const newDisabledState = toBoolean(value);\n\n        if (this._disabled !== newDisabledState) {\n\n            this._disabled = newDisabledState;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** Whether the radio button is required. */\n    @Input()\n    get required(): boolean {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    private _labelPosition: 'before' | 'after';\n\n    /** The native `<input type=radio>` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** The parent radio group. May or may not be present. */\n    radioGroup: McRadioGroup;\n\n    @Input()\n    isFocused: boolean = false;\n\n    /** ID of the native input element inside `<mc-radio-button>` */\n    get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n    /** Whether this radio is checked. */\n    private _checked: boolean = false;\n\n    /** Whether this radio is disabled. */\n    private _disabled: boolean;\n\n    /** Whether this radio is required. */\n    private _required: boolean;\n\n    /** Value assigned to this radio. */\n    private _value: any = null;\n\n    /** Unregister function for _radioDispatcher */\n    private removeUniqueSelectionListener: () => void = () => {};\n\n    constructor(\n        @Optional() radioGroup: McRadioGroup,\n        elementRef: ElementRef,\n        private _changeDetector: ChangeDetectorRef,\n        private _radioDispatcher: UniqueSelectionDispatcher\n    ) {\n\n        super(elementRef);\n\n        this.radioGroup = radioGroup;\n\n        this.removeUniqueSelectionListener =\n            _radioDispatcher.listen((id: string, name: string) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n\n    ngAfterViewInit() {}\n\n    ngOnDestroy() {\n        this.removeUniqueSelectionListener();\n    }\n\n    /** Focuses the radio button. */\n    focus(): void {}\n\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n\n    onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n\n    onInputChange(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this.emitChangeEvent();\n\n        if (this.radioGroup) {\n            this.radioGroup.controlValueAccessorChangeFn(this.value);\n            this.radioGroup.touch();\n            if (groupValueChanged) {\n                this.radioGroup.emitChangeEvent();\n            }\n        }\n    }\n\n    /** Dispatch change event with current value. */\n    private emitChangeEvent(): void {\n        this.change.emit(new McRadioChange(this, this._value));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport {A11yModule} from '@ptsecurity/cdk/a11y';\nimport {McCommonModule} from '@ptsecurity/mosaic/core';\n\nimport {McRadioButton, McRadioGroup} from './radio.component';\n\n\n@NgModule({\n    imports: [ CommonModule, A11yModule, McCommonModule ],\n    exports: [ McRadioGroup, McRadioButton, McCommonModule ],\n    declarations: [ McRadioGroup, McRadioButton ]\n})\nexport class McRadioModule {}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    Output,\n    QueryList,\n    ViewEncapsulation,\n    ChangeDetectorRef,\n    Inject,\n    OnDestroy,\n    OnInit,\n    ViewChild\n} from '@angular/core';\n\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { Subscription } from 'rxjs';\n\nimport { FocusKeyManager, IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { DOWN_ARROW, END, ENTER, HOME, PAGE_DOWN, PAGE_UP, SPACE, UP_ARROW } from '@ptsecurity/cdk/keycodes';\n\nimport {\n    McLine,\n    McLineSetter,\n    CanDisable,\n    mixinDisabled,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n    exportAs: 'mcListOption',\n    selector: 'mc-list-option',\n    host: {\n        tabindex: '-1',\n\n        class: 'mc-list-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': '_hasFocus',\n        '[class.mc-list-option-disabled]': 'disabled',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()',\n        '(click)': '_handleClick()'\n    },\n    templateUrl: 'list-option.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListOption implements AfterContentInit, OnDestroy, OnInit, IFocusableOption {\n    _hasFocus: boolean = false;\n\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    @ViewChild('text') _text: ElementRef;\n\n    // Whether the label should appear before or after the checkbox. Defaults to 'after'\n    @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n    @Input() value: any;\n\n    private _focusHandlerInProgress: boolean;\n\n    @Input()\n    get disabled() {\n        return this._disabled || (this.listSelection && this.listSelection.disabled);\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    @Input()\n    get selected(): boolean {\n        return this.listSelection.selectedOptions && this.listSelection.selectedOptions.isSelected(this) || false;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            this.listSelection._reportValueChange();\n        }\n    }\n\n    private _lineSetter: McLineSetter;\n    private _selected = false;\n    private _disabled = false;\n\n    constructor(\n        private _element: ElementRef,\n        private _changeDetector: ChangeDetectorRef,\n        @Inject(forwardRef(() => McListSelection))\n        public listSelection: McListSelection\n    ) {}\n\n    ngOnInit() {\n        if (this._selected) {\n            // List options that are selected at initialization can't be reported properly to the form\n            // control. This is because it takes some time until the selection-list knows about all\n            // available options. Also it can happen that the ControlValueAccessor has an initial value\n            // that should be used instead. Deferring the value change report to the next tick ensures\n            // that the form control value is not being overwritten.\n            const wasSelected = this._selected;\n\n            Promise.resolve().then(() => {\n                if (this._selected || wasSelected) {\n                    this.selected = true;\n                    this._changeDetector.markForCheck();\n                }\n            });\n        }\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    ngOnDestroy(): void {\n        if (this.selected) {\n            // We have to delay this until the next tick in order\n            // to avoid changed after checked errors.\n            Promise.resolve().then(() => this.selected = false);\n        }\n\n        this.listSelection._removeOptionFromList(this);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    focus(): void {\n        this._element.nativeElement.focus();\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    getLabel() {\n        return this._text ? this._text.nativeElement.textContent : '';\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.listSelection.selectedOptions) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.listSelection.selectedOptions.select(this);\n        } else {\n            this.listSelection.selectedOptions.deselect(this);\n        }\n\n        this._changeDetector.markForCheck();\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    _handleClick() {\n        if (this.disabled) { return; }\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    _handleFocus() {\n        if (this.disabled || this._hasFocus) { return; }\n\n        this._hasFocus = true;\n    }\n\n    _handleBlur() {\n        this._hasFocus = false;\n\n        this.listSelection._onTouched();\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n\n\nexport const MC_SELECTION_LIST_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McListSelection),\n    multi: true\n};\n\n// Change event that is being fired whenever the selected state of an option changes. */\nexport class McListSelectionChange {\n    constructor(\n        // Reference to the selection list that emitted the event.\n        public source: McListSelection,\n        // Reference to the option that has been changed.\n        public option: McListOption\n    ) {}\n}\n\n\nexport class McListSelectionBase {}\n\nexport const _McListSelectionMixinBase = mixinDisabled(McListSelectionBase);\n\n@Component({\n    exportAs: 'mcListSelection',\n    selector: 'mc-list-selection',\n    template: '<ng-content></ng-content>',\n    styleUrls: ['list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'tabIndex'],\n    host: {\n        class: 'mc-list-selection',\n        '[tabIndex]': 'tabIndex',\n        '(focus)': 'focus()',\n        '(blur)': '_onTouched()',\n        '(keydown)': '_onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    providers: [MC_SELECTION_LIST_VALUE_ACCESSOR],\n    preserveWhitespaces: false\n})\nexport class McListSelection extends _McListSelectionMixinBase implements\n    IFocusableOption, CanDisable, AfterContentInit, ControlValueAccessor {\n\n    _keyManager: FocusKeyManager<McListOption>;\n\n    // The option components contained within this selection-list.\n    @ContentChildren(McListOption) options: QueryList<McListOption>;\n\n    tabIndex: number;\n\n    autoSelect: boolean;\n    noUnselect: boolean;\n    multiple: boolean;\n\n    // todo temporary solution\n    withShift: boolean;\n    withCtrl: boolean;\n\n    @Input() horizontal: boolean = false;\n\n    // Emits a change event whenever the selected state of an option changes.\n    @Output() readonly selectionChange: EventEmitter<McListSelectionChange> = new EventEmitter<McListSelectionChange>();\n\n    selectedOptions: SelectionModel<McListOption>;\n\n    // Used for storing the values that were assigned before the options were initialized.\n    private _tempValues: string[] | null;\n\n    private _modelChanges = Subscription.EMPTY;\n\n    constructor(\n        private _element: ElementRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string,\n        @Attribute('multiple') multiple: string\n    ) {\n        super();\n\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.multiple = multiple === null ? true : toBoolean(multiple);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.selectedOptions = new SelectionModel<McListOption>(this.multiple);\n    }\n\n    ngAfterContentInit(): void {\n        this.horizontal = toBoolean(this.horizontal);\n\n        this._keyManager = new FocusKeyManager<McListOption>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation(!this.horizontal)\n            .withHorizontalOrientation(this.horizontal ? 'ltr' : null);\n\n        if (this._tempValues) {\n            this._setOptionsFromValues(this._tempValues);\n            this._tempValues = null;\n        }\n\n        // Sync external changes to the model back to the options.\n        this._modelChanges = this.selectedOptions.onChange!.subscribe((event) => {\n            for (const item of event.added) {\n                item.selected = true;\n            }\n\n            for (const item of event.removed) {\n                item.selected = false;\n            }\n        });\n\n        this.updateScrollSize();\n    }\n\n    ngOnDestroy() {\n        this._modelChanges.unsubscribe();\n    }\n\n    focus() {\n        this._element.nativeElement.focus();\n    }\n\n    selectAll() {\n        this.options.forEach((option) => option.setSelected(true));\n\n        this._reportValueChange();\n    }\n\n    deselectAll() {\n        this.options.forEach((option) => option.setSelected(false));\n\n        this._reportValueChange();\n    }\n\n    updateScrollSize(): void {\n        if (this.horizontal || !this.options.first) { return; }\n\n        this._keyManager.withScrollSize(Math.floor(this._getHeight() / this.options.first._getHeight()));\n    }\n\n    // Sets the focused option of the selection-list.\n    setFocusedOption(option: McListOption): void {\n        this._keyManager.updateActiveItem(option);\n\n        if (this.withShift && this.multiple) {\n            const previousIndex = this._keyManager.previousActiveItemIndex;\n            const activeIndex = this._keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n\n            this.withShift = false;\n        } else if (this.withCtrl) {\n            this.withCtrl = false;\n\n            if (!this._canUnselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) { this.options.forEach((item) => item.setSelected(false)); }\n\n            option.setSelected(true);\n        }\n\n        this._emitChangeEvent(option);\n        this._reportValueChange();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(values: string[]): void {\n        if (this.options) {\n            this._setOptionsFromValues(values || []);\n        } else {\n            this._tempValues = values;\n        }\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this._onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this._onTouched = fn;\n    }\n\n    // Implemented as a part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        if (this.options) {\n            this.options.forEach((option) => option.disabled = isDisabled);\n        }\n    }\n\n    getSelectedOptionValues(): string[] {\n        return this.options.filter((option) => option.selected).map((option) => option.value);\n    }\n\n    // Toggles the selected state of the currently focused option.\n    toggleFocusedOption(): void {\n        const focusedIndex = this._keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n            const focusedOption: McListOption = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this._canUnselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this._emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    _canUnselectLast(listOption: McListOption): boolean {\n        return !(this.noUnselect && this.selectedOptions.selected.length === 1 && listOption.selected);\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    // View to model callback that should be called if the list or its options lost focus.\n    _onTouched: () => void = () => {};\n\n    // Removes an option from the selection list and updates the active item.\n    _removeOptionFromList(option: McListOption) {\n        if (option._hasFocus) {\n            const optionIndex = this._getOptionIndex(option);\n\n            // Check whether the option is the last item\n            if (optionIndex > 0) {\n                this._keyManager.setPreviousItemActive();\n            } else if (optionIndex === 0 && this.options.length > 1) {\n                this._keyManager.setNextItemActive();\n            }\n        }\n    }\n\n    _onKeyDown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n        this.withShift = event.shiftKey;\n        this.withCtrl = event.ctrlKey;\n\n        switch (keyCode) {\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                if (!this.horizontal) { this._keyManager.setPreviousPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                if (!this.horizontal) { this._keyManager.setNextPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    // Reports a value change to the ControlValueAccessor\n    _reportValueChange() {\n        if (this.options) {\n            this._onChange(this.getSelectedOptionValues());\n        }\n    }\n\n    // Emits a change event if the selected state of an option changed.\n    _emitChangeEvent(option: McListOption) {\n        this.selectionChange.emit(new McListSelectionChange(this, option));\n    }\n\n    // Returns the option with the specified value.\n    private _getOptionByValue(value: string): McListOption | undefined {\n        return this.options.find((option) => option.value === value);\n    }\n\n    // Sets the selected options based on the specified values.\n    private _setOptionsFromValues(values: string[]) {\n        this.options.forEach((option) => option.setSelected(false));\n\n        values\n            .map((value) => this._getOptionByValue(value))\n            .filter(Boolean)\n            .forEach((option) => option!.setSelected(true));\n    }\n\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private _isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    // Returns the index of the specified list option.\n    private _getOptionIndex(option: McListOption): number {\n        return this.options.toArray().indexOf(option);\n    }\n\n    // View to model callback that should be called whenever the selected options change.\n    private _onChange: (value: any) => void = (_: any) => {};\n}\n","// todo пока не делаем, перенесено из материала, но у нас в доках таких простых списков нет.\nimport {\n    AfterContentInit, ChangeDetectionStrategy, Component, ContentChildren, Directive, ElementRef, QueryList,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { McLine, McLineSetter } from '@ptsecurity/mosaic/core';\n\n\nexport class McListBase {}\n\n@Component({\n    selector: 'mc-list',\n    host: { class: 'mc-list' },\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McList extends McListBase {}\n\n\n/**\n * Directive whose purpose is to add the mc- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n    selector: '[mc-subheader], [mcSubheader]',\n    host: { class: 'mc-subheader' }\n})\nexport class McListSubheaderCssStyler {}\n\n\n// Boilerplate for applying mixins to McListItem.\nexport class McListItemBase {}\n\n@Component({\n    selector: 'mc-list-item, a[mc-list-item]',\n    host: {\n        class: 'mc-list-item',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()'\n    },\n    templateUrl: './list-item.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListItem extends McListItemBase implements AfterContentInit {\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    private _lineSetter: McLineSetter;\n\n    constructor(private _element: ElementRef) {\n        super();\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    _handleFocus() {\n        this._element.nativeElement.classList.add('mc-focused');\n    }\n\n    _handleBlur() {\n        this._element.nativeElement.classList.remove('mc-focused');\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLineModule } from '@ptsecurity/mosaic/core';\n\nimport { McListSelection, McListOption } from './list-selection.component';\nimport { McList, McListItem, McListSubheaderCssStyler} from './list.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        McLineModule\n    ],\n    exports: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ],\n    declarations: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ]\n})\nexport class McListModule {}\n","import { InjectionToken } from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type McCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MC_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<McCheckboxClickAction>('mc-checkbox-click-action');\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","\nexport function isBoolean(val: any): val is boolean { return typeof val === 'boolean'; }\n\nexport function toBoolean(value: any): boolean {\n    return value != null && `${value}` !== 'false';\n}\n","import { NgModule, InjectionToken, Optional, Inject, isDevMode } from '@angular/core';\nimport { BidiModule } from '@ptsecurity/cdk/bidi';\n\n\n// Injection token that configures whether the Mosaic sanity checks are enabled.\nexport const MС_SANITY_CHECKS = new InjectionToken<boolean>('mc-sanity-checks', {\n    providedIn: 'root',\n    factory: MC_SANITY_CHECKS_FACTORY\n});\n\nexport function MC_SANITY_CHECKS_FACTORY(): boolean {\n    return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Mosaic\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n    imports: [ BidiModule ],\n    exports: [ BidiModule ]\n})\nexport class McCommonModule {\n    // Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n    private _hasDoneGlobalChecks = false;\n\n    // Reference to the global `document` object.\n    private _document = typeof document === 'object' && document ? document : null;\n\n    // Reference to the global 'window' object.\n    private _window = typeof window === 'object' && window ? window : null;\n\n    constructor(@Optional() @Inject(MС_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n        if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n            this._checkDoctypeIsDefined();\n            this._checkThemeIsPresent();\n            this._hasDoneGlobalChecks = true;\n        }\n    }\n\n    // Whether any sanity checks are enabled\n    private _areChecksEnabled(): boolean {\n        return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n    }\n\n    // Whether the code is running in tests.\n    private _isTestEnv() {\n        return this._window && (this._window['__karma__'] || this._window['jasmine']);\n    }\n\n    private _checkDoctypeIsDefined(): void {\n        if (this._document && !this._document.doctype) {\n            console.warn(\n                'Current document does not have a doctype. This may cause ' +\n                'some Mosaic components not to behave as expected.'\n            );\n        }\n    }\n\n    private _checkThemeIsPresent(): void {\n        if (this._document && typeof getComputedStyle === 'function') {\n            const testElement = this._document.createElement('div');\n\n            testElement.classList.add('mc-theme-loaded-marker');\n            this._document.body.appendChild(testElement);\n\n            const computedStyle = getComputedStyle(testElement);\n\n            // In some situations, the computed style of the test element can be null. For example in\n            // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n            // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n            if (computedStyle && computedStyle.display !== 'none') {\n                console.warn(\n                    'Could not find Mosaic core theme. Most Mosaic ' +\n                    'components may not work as expected. For more info refer ' +\n                    'to the theming guide: link there'\n                );\n            }\n\n            this._document.body.removeChild(testElement);\n        }\n    }\n}\n","import { toBoolean } from '../utils/index';\nimport { Constructor } from './constructor';\n\n\nexport interface CanDisable {\n    disabled: boolean;\n}\n\n// Mixin to augment a directive with a `disabled` property.\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n    return class extends base {\n        private _disabled: boolean = false;\n\n        get disabled() {\n            return this._disabled;\n        }\n\n        set disabled(value: any) {\n            this._disabled = toBoolean(value);\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n    };\n}\n","import { ElementRef } from '@angular/core';\nimport { Constructor } from './constructor';\n\n\nexport interface CanColor {\n    color: ThemePalette;\n}\n\nexport interface HasElementRef {\n    _elementRef: ElementRef;\n}\n\nexport enum ThemePalette {\n    Primary = 'primary',\n    Second = 'second',\n    Warn = 'warn',\n    Default = 'second'\n}\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T, defaultColor: ThemePalette = ThemePalette.Default): Constructor<CanColor> & T {\n    return class extends base {\n        private _color: ThemePalette;\n\n        get color(): ThemePalette {\n            return this._color;\n        }\n\n        set color(value: ThemePalette) {\n            const colorPalette = value || defaultColor;\n\n            if (colorPalette !== this._color) {\n                if (this._color) {\n                    this._elementRef.nativeElement.classList.remove(`mc-${this._color}`);\n                }\n\n                if (colorPalette) {\n                    this._elementRef.nativeElement.classList.add(`mc-${colorPalette}`);\n                }\n\n                this._color = colorPalette;\n            }\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n\n            // Set the default color that can be specified from the mixin.\n            this.color = defaultColor;\n        }\n    };\n}\n\n","import { Constructor } from './constructor';\nimport { CanDisable } from './disabled';\n\n\nexport interface HasTabIndex {\n    tabIndex: number;\n}\n\n// Mixin to augment a directive with a `tabIndex` property.\nexport function mixinTabIndex<\n        T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0): Constructor<HasTabIndex\n    > & T {\n    return class extends base {\n        private _tabIndex: number = defaultTabIndex;\n\n        get tabIndex(): number {\n            return this.disabled ? -1 : this._tabIndex;\n        }\n\n        set tabIndex(value: number) {\n            this._tabIndex = value != null ? value : defaultTabIndex;\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n    };\n}\n","import { FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { ErrorStateMatcher } from '../error/error-options';\nimport { Constructor } from './constructor';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n    readonly stateChanges: Subject<void>;\n    errorState: boolean;\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState();\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n    _parentFormGroup: FormGroupDirective;\n    _parentForm: NgForm;\n    _defaultErrorStateMatcher: ErrorStateMatcher;\n    ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n    : Constructor<CanUpdateErrorState> & T {\n    return class extends base {\n        /** Whether the component is in an error state. */\n        errorState: boolean = false;\n\n        /**\n         * Stream that emits whenever the state of the input changes such that the wrapping\n         * `MсFormField` needs to run change detection.\n         */\n        readonly stateChanges = new Subject<void>();\n\n        errorStateMatcher: ErrorStateMatcher;\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n\n        updateErrorState() {\n            const oldState = this.errorState;\n            const parent = this._parentFormGroup || this._parentForm;\n            const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n            const control = this.ngControl ? this.ngControl.control as FormControl : null;\n            const newState = matcher.isErrorState(control, parent);\n\n            if (newState !== oldState) {\n                this.errorState = newState;\n                this.stateChanges.next();\n            }\n        }\n    };\n}\n","export function getMcFormFieldMissingControlError(): Error {\n  return Error('mc-form-field must contain a McFormFieldControl.');\n}\n","export function getMcInputUnsupportedTypeError(inputType: string): Error {\n    return Error(`Input type \"${inputType}\" isn't supported by mcInput.`);\n}\n","import { NgModule, Directive, ElementRef, QueryList } from '@angular/core';\n\nimport { McCommonModule } from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(McLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n    selector: '[mc-line], [mcLine]',\n    host: { class: 'mc-line' }\n})\nexport class McLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class McLineSetter {\n    constructor(private _lines: QueryList<McLine>, private _element: ElementRef) {\n        this._setLineClass(this._lines.length);\n\n        this._lines.changes.subscribe(() => {\n            this._setLineClass(this._lines.length);\n        });\n    }\n\n    private _setLineClass(count: number): void {\n        this._resetClasses();\n        if (count === 2 || count === 3) {\n            this._setClass(`mc-${count}-line`, true);\n        } else if (count > 3) {\n            this._setClass(`mc-multi-line`, true);\n        }\n    }\n\n    private _resetClasses(): void {\n        this._setClass('mc-2-line', false);\n        this._setClass('mc-3-line', false);\n        this._setClass('mc-multi-line', false);\n    }\n\n    private _setClass(className: string, isAdd: boolean): void {\n        if (isAdd) {\n            this._element.nativeElement.classList.add(className);\n        } else {\n            this._element.nativeElement.classList.remove(className);\n        }\n    }\n}\n\n@NgModule({\n    imports: [McCommonModule],\n    exports: [McLine, McCommonModule],\n    declarations: [McLine]\n})\nexport class McLineModule {}\n","import { Injectable } from '@angular/core';\nimport { FormGroupDirective, NgForm, FormControl } from '@angular/forms';\n\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n    }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({ providedIn: 'root' })\nexport class ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n    }\n}\n","import { Component, ViewEncapsulation, Input, ChangeDetectionStrategy } from '@angular/core';\n\n\nexport type McPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mc-primary .mc-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mc-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'mc-pseudo-checkbox',\n    styleUrls: ['pseudo-checkbox.css'],\n    template: '',\n    host: {\n        class: 'mc-pseudo-checkbox',\n        '[class.mc-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n        '[class.mc-pseudo-checkbox-checked]': 'state === \"checked\"',\n        '[class.mc-pseudo-checkbox-disabled]': 'disabled'\n    }\n})\nexport class McPseudoCheckbox {\n    // Display state of the checkbox.\n    @Input() state: McPseudoCheckboxState = 'unchecked';\n\n    // Whether the checkbox is disabled.\n    @Input() disabled: boolean = false;\n}\n","import { NgModule } from '@angular/core';\n\nimport { McPseudoCheckbox } from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n    exports: [McPseudoCheckbox],\n    declarations: [McPseudoCheckbox]\n})\nexport class McPseudoCheckboxModule {}\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","import {\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { mixinColor, CanColor } from '@ptsecurity/mosaic/core';\n\n\n@Directive({\n    selector: '[mc-icon]',\n    host: { class: 'mc-icon mc' }\n})\nexport class McIconCSSStyler {}\n\n\nexport class McIconBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McIconMixinBase = mixinColor(McIconBase);\n\n\n@Component({\n    selector: `[mc-icon]`,\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./icon.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McIcon extends _McIconMixinBase implements CanColor {\n    constructor(elementRef: ElementRef, @Attribute('mc-icon') iconName: string) {\n        super(elementRef);\n\n        elementRef.nativeElement.classList.add(iconName);\n    }\n\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McIcon,\n    McIconCSSStyler\n} from './icon.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McIcon,\n        McIconCSSStyler\n    ],\n    declarations: [\n        McIcon,\n        McIconCSSStyler\n    ]\n})\nexport class McIconModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    OnDestroy,\n    QueryList,\n    ViewEncapsulation,\n    ContentChildren\n} from '@angular/core';\n\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { Platform } from '@ptsecurity/cdk/platform';\n\nimport { mixinColor, mixinDisabled, CanColor, CanDisable } from '@ptsecurity/mosaic/core';\nimport { McIcon } from '@ptsecurity/mosaic/icon';\n\n\n@Directive({\n    selector: 'button[mc-button], a[mc-button]',\n    host: { class: 'mc-button' }\n})\nexport class McButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-xs-button], a[mc-xs-button]',\n    host: { class: 'mc-button mc-button_xs' }\n})\nexport class McXSButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-sm-button], a[mc-sm-button]',\n    host: { class: 'mc-button mc-button_sm' }\n})\nexport class McSMButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-lg-button], a[mc-lg-button]',\n    host: { class: 'mc-button mc-button_lg' }\n})\nexport class McLGButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-xl-button], a[mc-xl-button]',\n    host: { class: 'mc-button mc-button_xl' }\n})\nexport class McXLButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-icon-button], a[mc-icon-button]',\n    queries: {\n        contentChildren: new ContentChildren(McIcon)\n    },\n    host: { class: 'mc-icon-button' }\n})\nexport class McIconButtonCSSStyler {\n    nativeElement: Element;\n\n    contentChildren: QueryList<McIcon>;\n\n    constructor(elementRef: ElementRef) {\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        this._addClassModificatorForIcons();\n    }\n\n    _addClassModificatorForIcons() {\n        const twoIcons = 2;\n        const icons = this.contentChildren.map((item) => item._elementRef.nativeElement);\n\n        if (icons.length === 1) {\n            const iconElement = icons[0];\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-icon-button_left');\n                }\n\n                if (iconElement.previousSibling) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-icon-button_right');\n                }\n            }\n        } else if (icons.length === twoIcons) {\n            const firstIconElement = icons[0];\n            const secondIconElement = icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n}\n\n\nexport class McButtonBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McButtonMixinBase = mixinColor(mixinDisabled(McButtonBase));\n\n\n@Component({\n    selector: `\n        button[mc-button],\n        button[mc-xs-button],\n        button[mc-sm-button],\n        button[mc-lg-button],\n        button[mc-xl-button]\n    `,\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[disabled]': 'disabled || null'\n    }\n})\nexport class McButton extends _McButtonMixinBase implements OnDestroy, CanDisable, CanColor {\n    constructor(elementRef: ElementRef, private _platform: Platform, private _focusMonitor: FocusMonitor) {\n        super(elementRef);\n\n        this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this._getHostElement().focus();\n    }\n\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n\n\n@Component({\n    selector: 'a[mc-button], a[mc-xs-button], a[mc-sm-button], a[mc-lg-button], a[mc-xl-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[attr.tabindex]': 'disabled ? -1 : 0',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': '_haltDisabledEvents($event)'\n    }\n})\nexport class McAnchor extends McButton {\n    constructor(platform: Platform, focusMonitor: FocusMonitor, elementRef: ElementRef) {\n        super(elementRef, platform, focusMonitor);\n    }\n\n    _haltDisabledEvents(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\n\n\n@Component({\n    selector: 'button[mc-icon-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[attr.tabindex]': 'disabled ? -1 : 0',\n        '[attr.disabled]': 'disabled || null'\n    }\n})\nexport class McIconButton extends McButton {\n    constructor(platform: Platform, focusMonitor: FocusMonitor, elementRef: ElementRef) {\n        super(elementRef, platform, focusMonitor);\n    }\n\n    _haltDisabledEvents(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McButton,\n    McAnchor,\n    McIconButton,\n    McButtonCSSStyler,\n    McXSButtonCSSStyler,\n    McSMButtonCSSStyler,\n    McLGButtonCSSStyler,\n    McXLButtonCSSStyler,\n    McIconButtonCSSStyler\n} from './button.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McButton,\n        McAnchor,\n        McIconButton,\n        McButtonCSSStyler,\n        McXSButtonCSSStyler,\n        McSMButtonCSSStyler,\n        McLGButtonCSSStyler,\n        McXLButtonCSSStyler,\n        McIconButtonCSSStyler\n    ],\n    declarations: [\n        McButton,\n        McAnchor,\n        McIconButton,\n        McButtonCSSStyler,\n        McXSButtonCSSStyler,\n        McSMButtonCSSStyler,\n        McLGButtonCSSStyler,\n        McXLButtonCSSStyler,\n        McIconButtonCSSStyler\n    ]\n})\nexport class McButtonModule {}\n","import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';\n\nimport { toBoolean } from '@ptsecurity/mosaic/core';\n\n\n@Component({\n    selector: 'mc-divider',\n    host: {\n        class: 'mc-divider',\n        role: 'separator',\n        '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n        '[class.mc-divider-vertical]': 'vertical',\n        '[class.mc-divider-inset]': 'inset'\n    },\n    template: '',\n    styleUrls: ['divider.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false\n})\nexport class McDivider {\n    // Whether the divider is vertically aligned.\n    @Input()\n    get vertical(): boolean {\n        return this._vertical;\n    }\n\n    set vertical(value: boolean) {\n        this._vertical = toBoolean(value);\n    }\n\n    private _vertical: boolean = false;\n\n    // Whether the divider is an inset divider.\n    @Input()\n    get inset(): boolean {\n        return this._inset;\n    }\n\n    set inset(value: boolean) {\n        this._inset = toBoolean(value);\n    }\n\n    private _inset: boolean = false;\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\n\nimport {McCommonModule} from '@ptsecurity/mosaic/core';\n\nimport {McDivider} from './divider.component';\n\n\n@NgModule({\n    imports: [\n        McCommonModule,\n        CommonModule\n    ],\n    exports: [\n        McDivider,\n        McCommonModule\n    ],\n    declarations: [\n        McDivider\n    ]\n})\nexport class McDividerModule {}\n"],"names":["exportAs","host","class","[id]","[attr.id]","[class.mc-checkbox-indeterminate]","[class.mc-checkbox-checked]","[class.mc-checkbox-disabled]","[class.mc-checkbox-label-before]","providers","MC_CHECKBOX_CONTROL_VALUE_ACCESSOR","inputs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","type","ElementRef","ChangeDetectorRef","FocusMonitor","undefined","decorators","Attribute","args","Optional","Inject","MC_CHECKBOX_CLICK_ACTION","ariaLabel","Input","ariaLabelledby","id","required","labelPosition","name","change","Output","indeterminateChange","value","_inputElement","ViewChild","checked","disabled","indeterminate","McCheckbox","_McCheckboxMixinBase","MC_CHECKBOX_REQUIRED_VALIDATOR","provide","NG_VALIDATORS","useExisting","forwardRef","McCheckboxRequiredValidator","multi","tslib_1.__extends","_super","Directive","selector","[attr.required]","CheckboxRequiredValidator","NgModule","imports","CommonModule","McCommonModule","exports","declarations","McCheckboxModule","Component","template","McCleaner","McFormFieldControl","nextUniqueId","this","McHint","McPrefix","McSuffix","McFormFieldBase","_elementRef","McFormField","_changeDetectorRef","_this","call","prototype","ngAfterContentInit","_validateControlChild","_control","controlType","nativeElement","classList","add","stateChanges","pipe","startWith","subscribe","markForCheck","valueChanges","ngControl","EMPTY","merge","ngAfterContentChecked","ngAfterViewInit","detectChanges","clearValue","$event","stopPropagation","reset","onContainerClick","onKeyDown","e","keyCode","ESCAPE","focused","hasCleaner","preventDefault","_shouldForward","prop","getMcFormFieldMissingControlError","Object","defineProperty","get","_hint","length","_suffix","_prefix","_cleaner","styles","[class.mc-form-field_invalid]","[class.mc-form-field_disabled]","[class.mc-form-field_has-prefix]","[class.mc-form-field_has-suffix]","[class.mc-form-field_has-cleaner]","[class.mc-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","(keydown)","ctorParameters","propDecorators","ContentChild","ContentChildren","McFormFieldWithoutBorders","McIconModule","McFormFieldModule","MC_INPUT_VALUE_ACCESSOR","InjectionToken","MC_INPUT_INVALID_TYPES","McInputBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","_McInputMixinBase","mixinErrorState","McInput","_platform","inputValueAccessor","Subject","_uid","_disabled","_required","_type","_neverEmptyInputTypes","filter","t","getSupportedInputTypes","has","_inputValueAccessor","_previousNativeValue","set","coerceBooleanProperty","next","_id","_validateType","ngOnChanges","ngOnDestroy","complete","ngDoCheck","updateErrorState","_dirtyCheckNativeValue","focus","_focusChanged","isFocused","_onInput","_isNeverEmpty","_isBadInput","newValue","indexOf","getMcInputUnsupportedTypeError","validity","badInput","[attr.placeholder]","[disabled]","[required]","(blur)","(focus)","(input)","Platform","NgControl","Self","NgForm","FormGroupDirective","ErrorStateMatcher","errorStateMatcher","placeholder","McInputMono","A11yModule","FormsModule","McInputModule","idIterator","McProgressBarBase","_McProgressBarMixinBase","mixinColor","McProgressBar","elementRef","mode","color","ThemePalette","Primary","Math","max","min","PlatformModule","McProgressBarModule","McProgressSpinnerBase","_McProgressPinnerMixinBase","McProgressSpinner","percentage","McProgressSpinnerModule","MC_NAVBAR_CONTAINER","MC_NAVBAR_ITEM","MC_NAVBAR_BRAND","MC_NAVBAR_TITLE","McNavbarLogo","McNavbarBrand","McNavbarTitle","McNavbarItemBase","_McNavbarMixinBase","mixinDisabled","McNavbarItem","_focusMonitor","tabIndex","setAttribute","encodeURI","ngOnInit","denyClickIfDisabled","monitor","stopMonitoring","events","eventListeners","forEach","event","removeEventListener","addEventListener","hasAttribute","stopImmediatePropagation","[attr.disabled]","collapsedTitle","McNavbarContainer","position","cssClasses","HostBinding","CollapsibleItem","element","width","_collapsed","processCollapsed","collapsed","updateCollapsedClass","remove","CachedItemWidth","itemsForCollapse","_collapsedItemsWidth","calculateAndCacheCollapsedItemsWidth","updateTitle","item","reduce","acc","getTitle","computedTitle","getAttribute","decodeURI","innerText","removeAttribute","McNavbar","forceRecalculateItemsWidth","resizeDebounceInterval","firstLevelElement","secondLevelElements","resizeObserver","fromEvent","window","debounceTime","_resizeSubscription","updateCollapsed","bind","querySelector","getBoundingClientRect","_itemsWidths","calculateAndCacheItemsWidth","_totalItemsWidths","calculateAndCacheTotalItemsWidth","collapseDelta","totalItemsWidth","maxAllowedWidth","i","itemsWidths","canCollapse","collapsedItemsWidth","setTimeout","unsubscribe","getOuterElementWidth","parseInt","getComputedStyle","getPropertyValue","allItemsSelector","map","allItems","Array","from","querySelectorAll","el","getItemsForCollapse","McNavbarModule","VERSION","Version","[class.mc-radio-checked]","[class.mc-radio-disabled]","McRadioGroup","UniqueSelectionDispatcher","ariaDescribedby","McRadioButton","_McRadioButtonMixinBase","McRadioModule","McListOption","_element","_changeDetector","listSelection","_hasFocus","checkboxPosition","_selected","toBoolean","selectedOptions","isSelected","setSelected","_reportValueChange","wasSelected_1","Promise","resolve","then","selected","_lineSetter","McLineSetter","_lines","_removeOptionFromList","toggle","setFocusedOption","getLabel","_text","textContent","select","deselect","_getHeight","getClientRects","height","_handleClick","_handleFocus","_handleBlur","_onTouched","_getHostElement","tabindex","[class.mc-selected]","[class.mc-list-option-disabled]","(click)","preserveWhitespaces","McListSelection","McLine","MC_SELECTION_LIST_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","McListSelectionChange","source","option","McListSelectionBase","_McListSelectionMixinBase","autoSelect","noUnselect","multiple","horizontal","selectionChange","EventEmitter","_modelChanges","Subscription","_onChange","_","SelectionModel","_keyManager","FocusKeyManager","options","withTypeAhead","withVerticalOrientation","withHorizontalOrientation","_tempValues","_setOptionsFromValues","_i","_a","added","_b","_c","removed","updateScrollSize","selectAll","deselectAll","first","withScrollSize","floor","updateActiveItem","withShift","previousIndex_1","previousActiveItemIndex","activeIndex_1","activeItemIndex","index","withCtrl","_canUnselectLast","_emitChangeEvent","writeValue","values","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","getSelectedOptionValues","toggleFocusedOption","focusedIndex","_isValidIndex","focusedOption","toArray","listOption","optionIndex","_getOptionIndex","setPreviousItemActive","setNextItemActive","_onKeyDown","shiftKey","ctrlKey","SPACE","ENTER","HOME","setFirstItemActive","END","setLastItemActive","PAGE_UP","setPreviousPageItemActive","PAGE_DOWN","setNextPageItemActive","onKeydown","emit","_getOptionByValue","find","Boolean","[tabIndex]","(window:resize)","McListBase","McList","McListSubheaderCssStyler","McListItemBase","McListItem","McListModule","McLineModule","TransitionCheckState","McCheckboxChange","McCheckboxBase","mixinTabIndex","_clickAction","_uniqueId","_currentAnimationClass","_currentCheckState","Init","_controlValueAccessorChangeFn","_checked","_indeterminate","focusOrigin","_onInputFocusChange","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_onLabelTextChange","_getAriaChecked","newState","oldState","_onInputClick","focusVia","_onInteractionEvent","__extends","d","b","__","constructor","extendStatics","create","isBoolean","val","MC_SANITY_CHECKS_FACTORY","base","class_1","arguments","apply","defaultColor","Default","_color","colorPalette","defaultTabIndex","_tabIndex","errorState","parent","matcher","control","isErrorState","Error","inputType","setPrototypeOf","__proto__","p","hasOwnProperty","MС_SANITY_CHECKS","providedIn","factory","_sanityChecksEnabled","_hasDoneGlobalChecks","_document","document","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","isDevMode","_isTestEnv","doctype","console","warn","testElement","createElement","body","appendChild","computedStyle","display","removeChild","BidiModule","Second","Warn","_setLineClass","changes","count","_resetClasses","_setClass","className","isAdd","ShowOnDirtyErrorStateMatcher","form","invalid","dirty","submitted","Injectable","touched","state","[class.mc-pseudo-checkbox-indeterminate]","[class.mc-pseudo-checkbox-checked]","[class.mc-pseudo-checkbox-disabled]","McPseudoCheckbox","McPseudoCheckboxModule","McIconCSSStyler","McIconBase","_McIconMixinBase","McIcon","iconName","McButtonCSSStyler","McXSButtonCSSStyler","McSMButtonCSSStyler","McLGButtonCSSStyler","McXLButtonCSSStyler","McIconButtonCSSStyler","_addClassModificatorForIcons","icons","contentChildren","iconElement","previousElementSibling","nextElementSibling","nextSibling","previousSibling","firstIconElement","secondIconElement","queries","McButtonBase","_McButtonMixinBase","McButton","McAnchor","platform","focusMonitor","_haltDisabledEvents","[attr.tabindex]","McIconButton","McButtonModule","McDivider","_vertical","_inset","role","[attr.aria-orientation]","[class.mc-divider-vertical]","[class.mc-divider-inset]","vertical","inset","McDividerModule","McRadioChange","McRadioGroupBase","_McRadioGroupMixinBase","MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","_value","_name","_isInitialized","_labelPosition","controlValueAccessorChangeFn","onTouched","updateRadioButtonNames","v","markRadiosForCheck","updateSelectedRadioFromValue","checkSelectedRadioButton","touch","emitChangeEvent","_radios","radio","isAlreadySelected","descendants","McRadioButtonBase","radioGroup","_radioDispatcher","removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","onInputClick","onInputChange","groupValueChanged"],"mappings":"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"}