{"version":3,"file":"mosaic.umd.min.js","sources":["../../src/lib/splitter/splitter.component.ts","../../src/lib/splitter/splitter.module.ts","../../src/lib/tooltip/tooltip.component.ts","../../src/lib/tooltip/tooltip.module.ts","../../src/lib/version.ts","../../src/lib/timepicker/timepicker.constants.ts","../../src/lib/select/select.component.ts","../../src/lib/timepicker/timepicker.ts","../../src/lib/timepicker/timepicker.module.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select.module.ts","../../src/lib/radio/radio.component.ts","../../src/lib/radio/radio.module.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree-selection.ts","../../src/lib/tree/tree.module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/tag/tag.component.ts","../../src/lib/tag/tag.module.ts","../../src/lib/modal/modal.component.ts","../../src/lib/modal/css-unit.pipe.ts","../../src/lib/modal/modal.service.ts","../../src/lib/modal/modal.module.ts","../../src/lib/navbar/navbar.component.ts","../../src/lib/navbar/navbar.module.ts","../../src/lib/progress-bar/progress-bar.component.ts","../../src/lib/progress-bar/progress-bar.module.ts","../../src/lib/progress-spinner/progress-spinner.component.ts","../../src/lib/progress-spinner/progress-spinner.module.ts","../../src/lib/layout/sidebar.component.ts","../../src/lib/layout/layout.module.ts","../../src/lib/list/list-selection.component.ts","../../src/lib/list/list.component.ts","../../src/lib/list/list.module.ts","../../src/lib/link/link.component.ts","../../src/lib/link/link.module.ts","../../src/lib/modal/modal-control.service.ts","../../src/lib/modal/modal-ref.class.ts","../../src/lib/modal/modal-util.ts","../../src/lib/button/button.component.ts","../../src/lib/button/button.module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/divider/divider.component.ts","../../src/lib/divider/divider.module.ts","../../src/lib/form-field/cleaner.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/form-field-number-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/stepper.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field.module.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/stepperUtils.ts","../../src/lib/input/input.ts","../../src/lib/input/input-number-validators.ts","../../src/lib/input/input.module.ts","../../src/lib/layout/content.component.ts","../../src/lib/layout/footer.component.ts","../../src/lib/layout/header.component.ts","../../src/lib/layout/layout.component.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/utils/utils.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/option/option.ts","../../src/lib/core/overlay/overlay-position-map.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/core/line/line.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/services/measure-scrollbar.service.ts","../../src/lib/core/option/optgroup.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/core/animation/fade-animations.ts","../../src/lib/icon/icon.component.ts","../../src/lib/icon/icon.module.ts"],"sourcesContent":["import {\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    Input,\n    NgZone, OnDestroy,\n    OnInit,\n    Renderer2,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { coerceBooleanProperty, coerceCssPixelValue, coerceNumberProperty } from '@ptsecurity/cdk/coercion';\n\n\ninterface IArea {\n    area: McSplitterAreaDirective;\n    index: number;\n    order: number;\n    initialSize: number;\n}\n\ninterface IPoint {\n    x: number;\n    y: number;\n}\n\n\nconst enum AttributeProperty {\n    Disabled = 'disabled'\n}\n\nconst enum Cursor {\n    Default = 'default',\n    ResizeColumn = 'col-resize',\n    ResizeRow = 'row-resize'\n}\n\nconst enum StyleProperty {\n    Cursor = 'cursor',\n    Flex = 'flex',\n    FlexBasis = 'flex-basis',\n    FlexDirection = 'flex-direction',\n    Height = 'height',\n    MaxWidth = 'max-width',\n    MinHeight = 'min-height',\n    MinWidth = 'minWidth',\n    OffsetHeight = 'offsetHeight',\n    OffsetWidth = 'offsetWidth',\n    Order = 'order',\n    Width = 'width'\n}\n\nconst enum State {\n    Disabled = 'disabled',\n    Horizontal = 'horizontal',\n    Vertical = 'vertical'\n}\n\nexport const enum Direction {\n    Horizontal = 'horizontal',\n    Vertical = 'vertical'\n}\n\n@Component({\n    selector: 'mc-splitter',\n    preserveWhitespaces: false,\n    styleUrls: ['splitter.css'],\n    templateUrl: './splitter.component.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McSplitterComponent implements OnInit {\n    readonly areas: IArea[] = [];\n\n    private _direction: Direction;\n    private _disabled: boolean = false;\n    private _gutterSize: number = 6;\n\n    private isDragging: boolean = false;\n\n    private readonly areaPositionDivider: number = 2;\n    private readonly listeners: (() => void)[] = [];\n\n    @Input()\n    set direction(direction: Direction) {\n        this._direction = direction;\n    }\n\n    get direction(): Direction {\n        return this._direction;\n    }\n\n    @Input()\n    set disabled(disabled: boolean) {\n        this._disabled = coerceBooleanProperty(disabled);\n    }\n\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    @Input()\n    set gutterSize(gutterSize: number) {\n        const size = coerceNumberProperty(gutterSize);\n        this._gutterSize = size > 0 ? size : this.gutterSize;\n    }\n\n    get gutterSize(): number {\n        return this._gutterSize;\n    }\n\n    constructor(private elementRef: ElementRef,\n                private ngZone: NgZone,\n                private renderer: Renderer2) {}\n\n    addArea(area: McSplitterAreaDirective): void {\n        const index: number = this.areas.length;\n        const order: number = index * this.areaPositionDivider;\n        const size: number = area.getSize();\n\n        area.setOrder(order);\n\n        this.areas.push({\n            area,\n            index,\n            order,\n            initialSize: size\n        });\n    }\n\n    ngOnInit(): void {\n        if (!this.direction) {\n            this.direction = Direction.Horizontal;\n        }\n\n        this.setStyle(StyleProperty.FlexDirection, this.isVertical() ? 'column' : 'row');\n    }\n\n    onMouseDown(event: MouseEvent, leftAreaIndex: number, rightAreaIndex: number) {\n        if (this.disabled) {\n            return;\n        }\n\n        const leftArea = this.areas[leftAreaIndex];\n        const rightArea = this.areas[rightAreaIndex];\n\n        const startPoint: IPoint = {\n            x: event.screenX,\n            y: event.screenY\n        };\n\n        leftArea.initialSize = leftArea.area.getSize();\n        rightArea.initialSize = rightArea.area.getSize();\n\n        this.areas.forEach((item) => {\n            const size = item.area.getSize();\n            item.area.disableFlex();\n            item.area.setSize(size);\n        });\n\n        this.ngZone.runOutsideAngular(() => {\n            this.listeners.push(\n                this.renderer.listen(\n                    'document',\n                    'mouseup',\n                    () => this.onMouseUp()\n                )\n            );\n        });\n\n        this.ngZone.runOutsideAngular(() => {\n            this.listeners.push(\n                this.renderer.listen(\n                    'document',\n                    'mousemove',\n                    (e: MouseEvent) => this.onMouseMove(e, startPoint, leftArea, rightArea)\n                )\n            );\n        });\n\n        this.isDragging = true;\n    }\n\n    removeArea(area: McSplitterAreaDirective): void {\n        let indexToRemove: number = -1;\n\n        this.areas.some((item, index) => {\n            if (item.area === area) {\n                indexToRemove = index;\n\n                return true;\n            }\n\n            return false;\n        });\n\n        if (indexToRemove === -1) {\n            return;\n        }\n\n        this.areas.splice(indexToRemove, 1);\n    }\n\n    private isVertical(): boolean {\n        return this.direction === Direction.Vertical;\n    }\n\n    private onMouseMove(event: MouseEvent, startPoint: IPoint, leftArea: IArea, rightArea: IArea) {\n        if (!this.isDragging || this.disabled) {\n            return;\n        }\n\n        const endPoint: IPoint = {\n            x: event.screenX,\n            y: event.screenY\n        };\n\n        const offset = this.isVertical()\n            ? startPoint.y - endPoint.y\n            : startPoint.x - endPoint.x;\n\n        const newLeftAreaSize = leftArea.initialSize - offset;\n        const newRightAreaSize = rightArea.initialSize + offset;\n\n        const minLeftAreaSize = leftArea.area.getMinSize();\n        const minRightAreaSize = rightArea.area.getMinSize();\n\n        if (newLeftAreaSize <= minLeftAreaSize || newRightAreaSize <= minRightAreaSize) {\n            const rightAreaOffset = leftArea.initialSize - minLeftAreaSize;\n\n            leftArea.area.setSize(minLeftAreaSize);\n            rightArea.area.setSize(rightArea.initialSize + rightAreaOffset);\n        } else if (newLeftAreaSize <= 0) {\n            leftArea.area.setSize(0);\n            rightArea.area.setSize(rightArea.initialSize + leftArea.initialSize);\n        } else if (newRightAreaSize <= 0) {\n            leftArea.area.setSize(rightArea.initialSize + leftArea.initialSize);\n            rightArea.area.setSize(0);\n        } else {\n            leftArea.area.setSize(newLeftAreaSize);\n            rightArea.area.setSize(newRightAreaSize);\n        }\n    }\n\n    private onMouseUp() {\n        while (this.listeners.length > 0) {\n            const unsubscribe = this.listeners.pop();\n\n            if (unsubscribe) {\n                unsubscribe();\n            }\n        }\n\n        this.isDragging = false;\n    }\n\n    private setStyle(property: StyleProperty, value: string | number) {\n        this.renderer.setStyle(this.elementRef.nativeElement, property, value);\n    }\n}\n\n@Directive({\n    selector: 'mc-gutter'\n})\nexport class McGutterDirective implements OnInit {\n    private _direction: Direction = Direction.Vertical;\n    private _disabled: boolean = false;\n    private _order: number = 0;\n    private _size: number = 6;\n\n    @Input()\n    set direction(direction: Direction) {\n        this._direction = direction;\n    }\n\n    get direction(): Direction {\n        return this._direction;\n    }\n\n    @Input()\n    set disabled(disabled: boolean) {\n        this._disabled = coerceBooleanProperty(disabled);\n    }\n\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    @Input()\n    set order(order: number) {\n        this._order = coerceNumberProperty(order);\n    }\n\n    get order(): number {\n        return this._order;\n    }\n\n    @Input()\n    set size(size: number) {\n        this._size = coerceNumberProperty(size);\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    constructor(private renderer: Renderer2,\n                private elementRef: ElementRef) {\n    }\n\n    ngOnInit(): void {\n        this.setStyle(StyleProperty.Cursor, this.getCursor(this.getState()));\n        this.setStyle(StyleProperty.FlexBasis, coerceCssPixelValue(this.size));\n        this.setStyle(this.isVertical() ? StyleProperty.Height : StyleProperty.Width, coerceCssPixelValue(this.size));\n        this.setStyle(StyleProperty.Order, this.order);\n\n        if (!this.isVertical()) {\n            this.setStyle(StyleProperty.Height, '100%');\n        }\n\n        if (this.disabled) {\n            this.setAttr(AttributeProperty.Disabled, 'true');\n        }\n\n        // fix IE issue with gutter icon. flex-direction is requied for flex alignment options\n        this.setStyle(StyleProperty.FlexDirection, this.isVertical() ? 'row' : 'column');\n    }\n\n    private isVertical(): boolean {\n        return this.direction === Direction.Vertical;\n    }\n\n    private getCursor(state: State): string {\n        switch (state) {\n            case State.Disabled:\n                return Cursor.Default;\n            case State.Vertical:\n                return  Cursor.ResizeRow;\n            case State.Horizontal:\n                return Cursor.ResizeColumn;\n            default:\n                throw Error(`Unknown gutter state for cursor: ${state}`);\n        }\n    }\n\n    private getState(): State {\n        return this.disabled\n            ? State.Disabled\n            : this.direction === Direction.Vertical\n                ? State.Vertical\n                : State.Horizontal;\n    }\n\n    private setStyle(property: StyleProperty, value: string | number) {\n        this.renderer.setStyle(this.elementRef.nativeElement, property, value);\n    }\n\n    private setAttr(attribute: AttributeProperty, value: string) {\n        this.renderer.setAttribute(this.elementRef.nativeElement, attribute, value);\n    }\n}\n\n@Directive({\n    selector: 'mc-splitter-area'\n})\nexport class McSplitterAreaDirective implements OnInit, OnDestroy {\n    constructor(private elementRef: ElementRef,\n                private renderer: Renderer2,\n                private splitter: McSplitterComponent) {}\n\n    disableFlex(): void {\n        this.renderer.removeStyle(this.elementRef.nativeElement, 'flex');\n    }\n\n    ngOnInit(): void {\n        this.splitter.addArea(this);\n\n        this.removeStyle(StyleProperty.MaxWidth);\n        this.setStyle(StyleProperty.Flex, '1');\n\n        if (this.splitter.direction === Direction.Vertical) {\n            this.setStyle(StyleProperty.Width, '100%');\n            this.removeStyle(StyleProperty.Height);\n        } else {\n            this.setStyle(StyleProperty.Height, '100%');\n            this.removeStyle(StyleProperty.Width);\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.splitter.removeArea(this);\n    }\n\n    setOrder(order: number): void {\n        this.setStyle(StyleProperty.Order, order);\n    }\n\n    setSize(size: number): void {\n        const sz = coerceNumberProperty(size);\n        this.setStyle(this.getSizeProperty(), coerceCssPixelValue(sz));\n    }\n\n    getSize(): number {\n        return this.elementRef.nativeElement[this.getOffsetSizeProperty()];\n    }\n\n    getMinSize(): number {\n        const styles = getComputedStyle(this.elementRef.nativeElement);\n\n        return parseFloat(styles[this.getMinSizeProperty()]);\n    }\n\n    private isVertical(): boolean {\n        return this.splitter.direction === Direction.Vertical;\n    }\n\n    private getMinSizeProperty(): StyleProperty {\n        return this.isVertical()\n            ? StyleProperty.MinHeight\n            : StyleProperty.MinWidth;\n    }\n\n    private getOffsetSizeProperty(): StyleProperty {\n        return this.isVertical()\n            ? StyleProperty.OffsetHeight\n            : StyleProperty.OffsetWidth;\n    }\n\n    private getSizeProperty(): StyleProperty {\n        return this.isVertical()\n            ? StyleProperty.Height\n            : StyleProperty.Width;\n    }\n\n    private setStyle(style: StyleProperty, value: string | number) {\n        this.renderer.setStyle(this.elementRef.nativeElement, style, value);\n    }\n\n    private removeStyle(style: StyleProperty) {\n        this.renderer.removeStyle(this.elementRef.nativeElement, style);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McGutterDirective, McSplitterAreaDirective, McSplitterComponent } from './splitter.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        McIconModule\n    ],\n    exports: [\n        McGutterDirective,\n        McSplitterAreaDirective,\n        McSplitterComponent\n    ],\n    declarations: [\n        McGutterDirective,\n        McSplitterAreaDirective,\n        McSplitterComponent\n    ]\n})\nexport class McSplitterModule {\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    TemplateRef,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport {\n    ConnectedOverlayPositionChange,\n    ConnectionPositionPair,\n    Overlay,\n    OverlayRef,\n    ScrollDispatcher,\n    IScrollStrategy,\n    FlexibleConnectedPositionStrategy,\n    IOverlayConnectionPosition,\n    IOriginConnectionPosition,\n    HorizontalConnectionPos,\n    VerticalConnectionPos\n} from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal } from '@ptsecurity/cdk/portal';\nimport {\n    fadeAnimation,\n    DEFAULT_4_POSITIONS,\n    POSITION_MAP\n} from '@ptsecurity/mosaic/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators';\n\n\n@Component({\n    selector: 'mc-tooltip',\n    animations: [ fadeAnimation ],\n    templateUrl: './tooltip.component.html',\n    preserveWhitespaces: false,\n    styleUrls: ['./tooltip.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '(body:click)': 'this._handleBodyInteraction()'\n    }\n})\n\nexport class McToolTipComponent {\n    _prefix = 'mc-tooltip_placement';\n    _positions: ConnectionPositionPair[] = [ ...DEFAULT_4_POSITIONS ];\n    _classMap = {};\n    _placement = 'top';\n    _trigger = 'hover';\n    isTitleString: boolean;\n    visibleSource = new BehaviorSubject<boolean>(false);\n    $visible: Observable<boolean> = this.visibleSource.asObservable();\n    _title: string | TemplateRef<void>;\n    showTId: number;\n    hideTId: number;\n    availablePositions: any;\n\n    @Output() mcVisibleChange: EventEmitter<boolean> = new EventEmitter();\n\n    @Input() mcMouseEnterDelay = 400;\n\n    @Input() mcMouseLeaveDelay = 0;\n\n    @Input()\n    set mcTitle(value: string | TemplateRef<void>) {\n        this.isTitleString = !(value instanceof TemplateRef);\n\n        if (this.isTitleString) {\n            this._title = value;\n        }\n    }\n\n    get mcTitle(): string | TemplateRef<void> {\n        return this._title;\n    }\n\n    @Input()\n    set mcVisible(value: boolean) {\n        const visible = coerceBooleanProperty(value);\n\n        if (this.visibleSource.value !== visible) {\n            this.visibleSource.next(visible);\n            this.mcVisibleChange.emit(visible);\n        }\n    }\n\n    get mcVisible(): boolean {\n        return this.visibleSource.value;\n    }\n\n    @Input()\n    set mcTrigger(value: string) {\n        this._trigger = value;\n    }\n\n    get mcTrigger(): string {\n        return this._trigger;\n    }\n\n    @Input()\n    set mcPlacement(value: string) {\n        if (value !== this._placement) {\n            this._placement = value;\n            this._positions.unshift(POSITION_MAP[ this.mcPlacement ]);\n        } else if (!value) {\n            this._placement = 'top';\n        }\n    }\n    get mcPlacement(): string {\n        return this._placement;\n    }\n\n    /** Subject for notifying that the tooltip has been hidden from the view */\n    private readonly _onHide: Subject<any> = new Subject();\n    private _closeOnInteraction: boolean = false;\n\n    constructor(public cdr: ChangeDetectorRef) {\n        this.availablePositions = POSITION_MAP;\n    }\n\n    show(): void {\n        if (this.hideTId) {\n            clearTimeout(this.hideTId);\n        }\n\n        if (!this.isContentEmpty()) {\n            this._closeOnInteraction = true;\n            this.showTId = setTimeout(() => {\n                this.mcVisible = true;\n                this.mcVisibleChange.emit(true);\n\n                // Mark for check so if any parent component has set the\n                // ChangeDetectionStrategy to OnPush it will be checked anyways\n                this._markForCheck();\n            }, this.mcMouseEnterDelay);\n        }\n    }\n\n    hide(): void {\n        if (this.showTId) {\n            clearTimeout(this.showTId);\n        }\n\n        this.hideTId = setTimeout(() => {\n            this.mcVisible = false;\n            this.mcVisibleChange.emit(false);\n            this._onHide.next();\n\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this._markForCheck();\n        }, this.mcMouseLeaveDelay);\n    }\n\n    setClassMap(): void {\n        this._classMap = {\n            [ `${this._prefix}-${this._placement}` ]: true\n        };\n    }\n\n    isContentEmpty(): boolean {\n        return this.isTitleString ? (this.mcTitle === '' || !this.mcTitle) : false;\n    }\n\n    /** Returns an observable that notifies when the tooltip has been hidden from view. */\n    afterHidden(): Observable<void> {\n        return this._onHide.asObservable();\n    }\n\n    _markForCheck(): void {\n        this.cdr.markForCheck();\n    }\n\n    _handleBodyInteraction(): void {\n        if (this._closeOnInteraction) {\n            this.hide();\n        }\n    }\n}\n\nexport const MC_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MC_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => IScrollStrategy {\n    return () => overlay.scrollStrategies.reposition({scrollThrottle: 20});\n}\n\n/** @docs-private */\nexport const MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_TOOLTIP_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_TOOLTIP_SCROLL_STRATEGY_FACTORY\n};\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMcTooltipInvalidPositionError(position: string) {\n    return Error(`McTooltip position \"${position}\" is invalid.`);\n}\n\nconst VIEWPORT_MARGIN: number = 8;\n\n@Directive({\n    selector: '[mc-tooltip]',\n    host: {\n        '(keydown)': 'handleKeydown($event)',\n        '(touchend)': 'handleTouchend()'\n    }\n})\n\nexport class McTooltipDirective implements OnInit, OnDestroy {\n    isTooltipOpen: boolean = false;\n    isDynamicTooltip = false;\n    parentDisabled: boolean = false;\n    _title: string;\n    _disabled: boolean = false;\n    _mouseEnterDelay: number;\n    _mouseLeaveDelay: number;\n    _visible: boolean;\n    _trigger: string = 'hover';\n    _placement: string = 'top';\n    _overlayRef: OverlayRef | null;\n    _portal: ComponentPortal<McToolTipComponent>;\n    availablePositions: any;\n    tooltip: McToolTipComponent | null;\n\n    @Output() mcVisibleChange = new EventEmitter<boolean>();\n    private $unsubscribe = new Subject<void>();\n\n    @Input('mc-tooltip')\n    set mcTitle(title: string) {\n        this._title = title;\n        this.updateCompValue('mcTitle', title);\n    }\n\n    get mcTitle(): string {\n        return this._title;\n    }\n\n    @Input('mcTitle')\n    set setTitle(title: string) {\n        this.mcTitle = title;\n    }\n\n    @Input('mcTooltipDisabled')\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    @Input('mcMouseEnterDelay')\n    set mcMouseEnterDelay(value: number) {\n        this._mouseEnterDelay = value;\n        this.updateCompValue('mcMouseEnterDelay', value);\n    }\n\n    get mcMouseEnterDelay(): number {\n        return this._mouseEnterDelay;\n    }\n\n    @Input('mcMouseLeaveDelay')\n    set mcMouseLeaveDelay(value: number) {\n        this._mouseLeaveDelay = value;\n        this.updateCompValue('mcMouseLeaveDelay', value);\n    }\n\n    get mcMouseLeaveDelay(): number {\n        return this._mouseEnterDelay;\n    }\n\n    @Input('mcVisible')\n    set mcVisible(value: boolean) {\n        this._visible = value;\n        this.updateCompValue('mcVisible', value);\n    }\n\n    get mcVisible(): boolean {\n        return this._visible;\n    }\n\n    @Input('mcTrigger')\n    set mcTrigger(value: string) {\n        this._trigger = value;\n        this.updateCompValue('mcTrigger', value);\n    }\n\n    get mcTrigger(): string {\n        return this._trigger;\n    }\n\n    @Input('mcPlacement')\n    set mcPlacement(value: string) {\n        if (value) {\n            this._placement = value;\n            this.updateCompValue('mcPlacement', value);\n        } else {\n            this._placement = 'top';\n        }\n    }\n\n    get mcPlacement(): string {\n        return this._placement;\n    }\n\n    @HostBinding('class.mc-tooltip-open')\n    get isOpen(): boolean {\n        return this.isTooltipOpen;\n    }\n\n    @HostBinding('class.disabled')\n    get isParentDisabled(): boolean {\n        return this.parentDisabled;\n    }\n\n    private manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n    private readonly _destroyed = new Subject<void>();\n\n    constructor(\n        private _overlay: Overlay,\n        private elementRef: ElementRef,\n        private _ngZone: NgZone,\n        private _scrollDispatcher: ScrollDispatcher,\n        private hostView: ViewContainerRef,\n        @Inject(MC_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n        @Optional() private _dir: Directionality) {\n            this.availablePositions = POSITION_MAP;\n        }\n\n    /** Create the overlay config and position strategy */\n    _createOverlay(): OverlayRef {\n        if (this._overlayRef) {\n            return this._overlayRef;\n        }\n\n        // Create connected position strategy that listens for scroll events to reposition.\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this.elementRef)\n            .withTransformOriginOn('.mc-tooltip')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(VIEWPORT_MARGIN)\n            .withPositions([ ...DEFAULT_4_POSITIONS ]);\n\n        const scrollableAncestors = this._scrollDispatcher\n            .getAncestorScrollContainers(this.elementRef);\n\n        strategy.withScrollableContainers(scrollableAncestors);\n\n        strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe((change) => {\n            if (this.tooltip) {\n                this.onPositionChange(change);\n                if (change.scrollableViewProperties.isOverlayClipped && this.tooltip.mcVisible) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the tooltip.\n                    this._ngZone.run(() => this.hide());\n                }\n            }\n        });\n\n        this._overlayRef = this._overlay.create({\n            direction: this._dir,\n            positionStrategy: strategy,\n            panelClass: 'mc-tooltip-panel',\n            scrollStrategy: this._scrollStrategy()\n        });\n\n        this._updatePosition();\n\n        this._overlayRef.detachments()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n\n        return this._overlayRef;\n    }\n\n    _detach() {\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n\n        this.tooltip = null;\n    }\n\n    onPositionChange($event: ConnectedOverlayPositionChange): void {\n        let updatedPlacement = this.mcPlacement;\n        Object.keys(this.availablePositions).some((key) => {\n            if ($event.connectionPair.originX === this.availablePositions[key].originX &&\n                $event.connectionPair.originY === this.availablePositions[key].originY &&\n                $event.connectionPair.overlayX === this.availablePositions[key].overlayX &&\n                $event.connectionPair.overlayY === this.availablePositions[key].overlayY) {\n                updatedPlacement = key;\n\n                return true;\n            }\n\n            return false;\n        });\n        this.updateCompValue('mcPlacement', updatedPlacement);\n\n        if (this.tooltip) {\n            this.tooltip.setClassMap();\n        }\n\n        this.handlePositioningUpdate();\n    }\n\n    handlePositioningUpdate() {\n        if (!this._overlayRef) {\n            this._overlayRef = this._createOverlay();\n        }\n        if (this.mcPlacement === 'right' || this.mcPlacement === 'left') {\n            const pos =\n                (this._overlayRef.overlayElement.clientHeight -\n                    this.hostView.element.nativeElement.clientHeight) / 2; // tslint:disable-line\n            const currentContainer = this._overlayRef.overlayElement.style.top || '0px';\n            this._overlayRef.overlayElement.style.top =\n                `${parseInt(currentContainer.split('px')[0], 10) + pos - 1}px`;\n            // TODO: обновлять положение стрелки\\указателя\\\"дятла\"\n        }\n    }\n\n    // tslint:disable-next-line:no-any\n    updateCompValue(key: string, value: any): void {\n        if (this.isDynamicTooltip && value) {\n            if (this.tooltip) {\n                this.tooltip[key] = value;\n            }\n        }\n    }\n\n    ngOnInit(): void {\n        if (this.mcTrigger === 'hover') {\n\n            this.manualListeners\n                .set('mouseenter', () => this.show())\n                .set('mouseleave', () => this.hide())\n                .forEach((listener, event) => this.elementRef.nativeElement.addEventListener(event, listener));\n        }\n\n        if (this.mcTrigger === 'focus') {\n\n            this.manualListeners\n                .set('focus', () => this.show())\n                .set('blur', () => this.hide())\n                .forEach((listener, event) => this.elementRef.nativeElement.addEventListener(event, listener));\n        }\n    }\n\n    ngOnDestroy(): void {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n        this.manualListeners.forEach((listener, event) =>\n            this.elementRef.nativeElement.removeEventListener(event, listener));\n        this.manualListeners.clear();\n\n        this.$unsubscribe.next();\n        this.$unsubscribe.complete();\n    }\n\n    handleKeydown(e: KeyboardEvent) {\n        if (this.isTooltipOpen && e.keyCode === ESCAPE) { // tslint:disable-line\n            this.hide();\n        }\n    }\n\n    handleTouchend() {\n        this.hide();\n    }\n\n    /** Updates the position of the current tooltip. */\n    _updatePosition() {\n        if (!this._overlayRef) {\n            this._overlayRef = this._createOverlay();\n        }\n        const position =\n            this._overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n        const origin = this._getOrigin();\n        const overlay = this._getOverlayPosition();\n\n        position.withPositions([\n            {...origin.main, ...overlay.main},\n            {...origin.fallback, ...overlay.fallback}\n        ]);\n    }\n\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    _getOrigin(): {main: IOriginConnectionPosition; fallback: IOriginConnectionPosition} {\n        const position = this.mcPlacement;\n        const isLtr = !this._dir || this._dir.value === 'ltr';\n        let originPosition: IOriginConnectionPosition;\n\n        if (position === 'top' || position === 'bottom') {\n            originPosition = {originX: 'center', originY: position === 'top' ? 'top' : 'bottom'};\n        } else if (\n            position === 'top' ||\n            (position === 'left' && isLtr) ||\n            (position === 'right' && !isLtr)) {\n            originPosition = {originX: 'start', originY: 'center'};\n        } else if (\n            position === 'bottom' ||\n            (position === 'right' && isLtr) ||\n            (position === 'left' && !isLtr)) {\n            originPosition = {originX: 'end', originY: 'center'};\n        } else {\n            throw getMcTooltipInvalidPositionError(position);\n        }\n\n        const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n        return {\n            main: originPosition,\n            fallback: {originX: x, originY: y}\n        };\n    }\n\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    _getOverlayPosition(): {main: IOverlayConnectionPosition; fallback: IOverlayConnectionPosition} {\n        const position = this.mcPlacement;\n        const isLtr = !this._dir || this._dir.value === 'ltr';\n        let overlayPosition: IOverlayConnectionPosition;\n\n        if (position === 'top') {\n            overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n        } else if (position === 'bottom') {\n            overlayPosition = {overlayX: 'center', overlayY: 'top'};\n        } else if (\n            position === 'top' ||\n            (position === 'left' && isLtr) ||\n            (position === 'right' && !isLtr)) {\n            overlayPosition = {overlayX: 'end', overlayY: 'center'};\n        } else if (\n            position === 'bottom' ||\n            (position === 'right' && isLtr) ||\n            (position === 'left' && !isLtr)) {\n            overlayPosition = {overlayX: 'start', overlayY: 'center'};\n        } else {\n            throw getMcTooltipInvalidPositionError(position);\n        }\n\n        const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n        return {\n            main: overlayPosition,\n            fallback: {overlayX: x, overlayY: y}\n        };\n    }\n\n    /** Inverts an overlay position. */\n    private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n        let newX: HorizontalConnectionPos = x;\n        let newY: VerticalConnectionPos = y;\n        if (this.mcPlacement === 'top' || this.mcPlacement === 'bottom') {\n            if (y === 'top') {\n                newY = 'bottom';\n            } else if (y === 'bottom') {\n                newY = 'top';\n            }\n        } else {\n            if (x === 'end') {\n                newX = 'start';\n            } else if (x === 'start') {\n                newX = 'end';\n            }\n        }\n\n        return {x: newX, y: newY};\n    }\n\n    private show(): void {\n        if (!this.disabled) {\n            if (!this.tooltip) {\n                const overlayRef = this._createOverlay();\n                this._detach();\n                this._portal = this._portal || new ComponentPortal(McToolTipComponent, this.hostView);\n                this.tooltip = overlayRef.attach(this._portal).instance;\n                this.tooltip.afterHidden()\n                    .pipe(takeUntil(this._destroyed))\n                    .subscribe(() => this._detach());\n                this.isDynamicTooltip = true;\n                const properties = [\n                    'mcTitle',\n                    'mcMouseEnterDelay',\n                    'mcMouseLeaveDelay',\n                    'mcVisible',\n                    'mcTrigger',\n                    'mcPlacement' ];\n                properties.forEach((property) => this.updateCompValue(property, this[ property ]));\n                this.tooltip.mcVisibleChange.pipe(takeUntil(this.$unsubscribe), distinctUntilChanged())\n                    .subscribe((data) => {\n                        this._visible = data;\n                        this.mcVisibleChange.emit(data);\n                    });\n            }\n            this._updatePosition();\n            this.tooltip.show();\n            this.isTooltipOpen = true;\n        }\n    }\n\n    private hide(): void {\n        if (this.tooltip) {\n            this.tooltip.hide();\n            this.isTooltipOpen = false;\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\n\nimport {\n    McToolTipComponent,\n    McTooltipDirective,\n    MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './tooltip.component';\n\n\n@NgModule({\n    declarations: [ McToolTipComponent, McTooltipDirective ],\n    exports: [ McToolTipComponent, McTooltipDirective ],\n    imports: [ BrowserAnimationsModule, CommonModule, OverlayModule ],\n    providers: [MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],\n    entryComponents: [ McToolTipComponent ]\n})\nexport class McToolTipModule {\n}\n","import { Version } from '@angular/core';\n\n\nexport const VERSION = new Version('0.0.1-d1857fa');\n","export enum TimeParts {\n    hours,\n    minutes,\n    seconds\n}\n\nexport enum TimeFormats {\n    HHmmss = 'HH:mm:ss',\n    HHmm = 'HH:mm'\n}\n\nexport const TIMEFORMAT_PLACEHOLDERS: { [timeFormat: string]: string } = {\n    'hh:mm:ss': '  :  :  ',\n    'hh:mm': '  :  '\n};\n\nexport const DEFAULT_TIME_FORMAT: TimeFormats = TimeFormats.HHmm;\n\nexport const HOURS_MINUTES_SECONDS_REGEXP =\n    new RegExp(/^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]|[0-9]):([0-5][0-9]|[0-9])?$/);\nexport const HOURS_MINUTES_REGEXP = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]|[0-9])?$/;\nexport const HOURS_ONLY_REGEXP = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):?$/;\n\nexport const SECONDS_PER_MINUTE: number = 59;\nexport const MINUTES_PER_HOUR: number = 59;\nexport const HOURS_PER_DAY: number = 23;\n\n// TODO Move it to common CDK\nexport const ARROW_UP_KEYCODE: string = 'ArrowUp';\nexport const ARROW_DOWN_KEYCODE: string = 'ArrowDown';\nexport const ARROW_LEFT_KEYCODE: string = 'ArrowLeft';\nexport const ARROW_RIGHT_KEYCODE: string = 'ArrowRight';\n","/* tslint:disable:no-empty */\n\nimport { ActiveDescendantKeyManager } from '@ptsecurity/cdk/a11y';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    RIGHT_ARROW,\n    SPACE,\n    UP_ARROW,\n    A\n} from '@ptsecurity/cdk/keycodes';\nimport {\n    CdkConnectedOverlay,\n    Overlay,\n    RepositionScrollStrategy,\n    IScrollStrategy,\n    ViewportRuler\n} from '@ptsecurity/cdk/overlay';\n\nimport {\n    AfterContentInit, AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    isDevMode,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList, Renderer2,\n    Self,\n    SimpleChanges,\n    ViewChild, ViewChildren,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport {\n    _countGroupLabelsBeforeOption,\n    _getOptionScrollPosition,\n    CanDisable,\n    CanDisableCtor,\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    HasTabIndex, HasTabIndexCtor,\n    MC_OPTION_PARENT_COMPONENT,\n    McOptgroup,\n    McOption,\n    McOptionSelectionChange,\n    mixinDisabled,\n    mixinErrorState,\n    mixinTabIndex\n} from '@ptsecurity/mosaic/core';\n\nimport { McFormField, McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { McTag } from '@ptsecurity/mosaic/tag';\n\n\nimport { defer, merge, Observable, Subject } from 'rxjs';\nimport {\n    filter,\n    map,\n    startWith,\n    switchMap,\n    take,\n    takeUntil,\n    distinctUntilChanged\n} from 'rxjs/operators';\n\nimport {\n    getMcSelectDynamicMultipleError,\n    getMcSelectNonArrayValueError,\n    getMcSelectNonFunctionValueError\n} from './select-errors';\n\nimport { mcSelectAnimations } from './select-animations';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 224;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 1;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\n/* tslint:disable-next-line:no-magic-numbers */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 2;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MC_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-select-scroll-strategy');\n\n/** @docs-private */\nexport function MC_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MC_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MC_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class McSelectChange {\n    constructor(\n        /** Reference to the select that emitted the change event. */\n        public source: McSelect,\n        /** Current value of the select that emitted the event. */\n        public value: any) {\n    }\n}\n\n// Boilerplate for applying mixins to McSelect.\n/** @docs-private */\nexport class McSelectBase {\n    constructor(\n        public _elementRef: ElementRef,\n        public _defaultErrorStateMatcher: ErrorStateMatcher,\n        public _parentForm: NgForm,\n        public _parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {}\n}\n\nexport const _McSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanUpdateErrorStateCtor & typeof McSelectBase\n    = mixinTabIndex(mixinDisabled(mixinErrorState(McSelectBase)));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({ selector: 'mc-select-trigger' })\nexport class McSelectTrigger {}\n\n\n@Component({\n    selector: 'mc-select',\n    exportAs: 'mcSelect',\n    templateUrl: 'select.html',\n    styleUrls: ['./select.css'],\n    inputs: ['disabled', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'tabIndex',\n        class: 'mc-select',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-select-invalid]': 'errorState',\n        '[class.mc-select-required]': 'required',\n        '(keydown)': '_handleKeydown($event)',\n        '(focus)': '_onFocus()',\n        '(blur)': '_onBlur()',\n        '(window:resize)': '_calculateHiddenItems()'\n    },\n    animations: [\n        mcSelectAnimations.transformPanel,\n        mcSelectAnimations.fadeInContent\n    ],\n    providers: [\n        { provide: McFormFieldControl, useExisting: McSelect },\n        { provide: MC_OPTION_PARENT_COMPONENT, useExisting: McSelect }\n    ]\n})\nexport class McSelect extends _McSelectMixinBase implements\n    AfterContentInit, AfterViewInit, OnChanges, OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable,\n    HasTabIndex, McFormFieldControl<any>, CanUpdateErrorState {\n\n    /** The last measured value for the trigger's client bounding rect. */\n    _triggerRect: ClientRect;\n\n    /** The cached font-size of the trigger element. */\n    _triggerFontSize = 0;\n\n    /** Deals with the selection logic. */\n    _selectionModel: SelectionModel<McOption>;\n\n    /** Manages keyboard events for options in the panel. */\n    _keyManager: ActiveDescendantKeyManager<McOption>;\n\n    /** The IDs of child options to be passed to the aria-owns attribute. */\n    _optionIds: string = '';\n\n    /** The value of the select panel's transform-origin property. */\n    _transformOrigin: string = 'top';\n\n    /** Whether the panel's animation is done. */\n    _panelDoneAnimating: boolean = false;\n\n    /** Emits when the panel element is finished transforming in. */\n    _panelDoneAnimatingStream = new Subject<string>();\n\n    /** Strategy that will be used to handle scrolling while the select panel is open. */\n    _scrollStrategy = this._scrollStrategyFactory();\n\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n    _offsetY = 0;\n\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n    _positions = [\n        {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top'\n        },\n        {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom'\n        }\n    ];\n\n    /** Whether the select is focused. */\n    get focused(): boolean {\n        return this._focused || this._panelOpen;\n    }\n\n    /**\n     * @deprecated Setter to be removed as this property is intended to be readonly.\n     * @breaking-change 8.0.0\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n\n    /** A name for this control that can be used by `mc-form-field`. */\n    controlType = 'mc-select';\n\n    @ViewChild('trigger') trigger: ElementRef;\n    @ViewChildren(McTag) tags: QueryList<McTag>;\n\n    @ViewChild('panel') panel: ElementRef;\n\n    /** Overlay pane containing the options. */\n    @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n    /** All of the defined select options. */\n    @ContentChildren(McOption, { descendants: true }) options: QueryList<McOption>;\n\n    /** All of the defined groups of options. */\n    @ContentChildren(McOptgroup) optionGroups: QueryList<McOptgroup>;\n\n    /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n    @Input() panelClass: string | string[] | Set<string> | { [key: string]: any };\n\n    /** User-supplied override of the trigger element. */\n    @ContentChild(McSelectTrigger) customTrigger: McSelectTrigger;\n\n    /** Placeholder to be shown if no value has been selected. */\n    @Input()\n    get placeholder(): string {\n        return this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n\n    /** Whether the component is required. */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n\n    /** Whether the user should be allowed to select multiple options. */\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        if (this._selectionModel) {\n            throw getMcSelectDynamicMultipleError();\n        }\n\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith() {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        /* tslint:disable-next-line:strict-type-predicates */\n        if (typeof fn !== 'function') {\n            throw getMcSelectNonFunctionValueError();\n        }\n\n        this._compareWith = fn;\n\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n\n    /** Value of the select control. */\n    @Input()\n    get value(): any {\n        return this._value;\n    }\n\n    set value(newValue: any) {\n        if (newValue !== this._value) {\n            this.writeValue(newValue);\n            this._value = newValue;\n        }\n    }\n\n    /** Object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Function used to sort the values in a select in multiple mode.\n     * Follows the same logic as `Array.prototype.sort`.\n     */\n    @Input() sortComparator: (a: McOption, b: McOption, options: McOption[]) => number;\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n\n    /** Combined stream of all of the child options' change events. */\n    readonly optionSelectionChanges: Observable<McOptionSelectionChange> = defer(() => {\n        if (this.options) {\n            return merge(...this.options.map((option) => option.onSelectionChange));\n        }\n\n        return this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n    });\n\n    /** Event emitted when the select panel has been toggled. */\n    @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted when the select has been opened. */\n    @Output('opened') readonly _openedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => o), map(() => {}));\n\n    /** Event emitted when the select has been closed. */\n    @Output('closed') readonly _closedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => !o), map(() => {}));\n\n    /** Event emitted when the selected value has been changed by the user. */\n    @Output() readonly selectionChange: EventEmitter<McSelectChange> = new EventEmitter<McSelectChange>();\n\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    hiddenItems: number = 0;\n\n    /** Whether or not the overlay panel is open. */\n    private _panelOpen = false;\n\n    /** Whether filling out the select is required in the form. */\n    private _required: boolean = false;\n\n    /** The scroll position of the overlay panel, calculated to center the selected option. */\n    private _scrollTop = 0;\n\n    /** The placeholder displayed in the trigger of the select. */\n    private _placeholder: string;\n\n    /** Whether the component is in multiple selection mode. */\n    private _multiple: boolean = false;\n\n    /** Unique id for this input. */\n    private readonly _uid = `mc-select-${nextUniqueId++}`;\n\n    /** Emits whenever the component is destroyed. */\n    private readonly _destroy = new Subject<void>();\n\n    private _focused = false;\n\n    private _value: any;\n\n    private _id: string;\n\n    constructor(\n        private readonly _viewportRuler: ViewportRuler,\n        private readonly _changeDetectorRef: ChangeDetectorRef,\n        private readonly _ngZone: NgZone,\n        private readonly _renderer: Renderer2,\n        _defaultErrorStateMatcher: ErrorStateMatcher,\n        elementRef: ElementRef,\n        @Optional() private readonly _dir: Directionality,\n        @Optional() _parentForm: NgForm,\n        @Optional() _parentFormGroup: FormGroupDirective,\n        @Optional() private readonly _parentFormField: McFormField,\n        @Self() @Optional() public ngControl: NgControl,\n        @Attribute('tabindex') tabIndex: string,\n        @Inject(MC_SELECT_SCROLL_STRATEGY) private readonly _scrollStrategyFactory\n    ) {\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnInit() {\n        this._selectionModel = new SelectionModel<McOption>(this.multiple);\n        this.stateChanges.next();\n\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => {\n                if (this.panelOpen) {\n                    this._scrollTop = 0;\n                    this.openedChange.emit(true);\n                } else {\n                    this.openedChange.emit(false);\n                    this._panelDoneAnimating = false;\n                    this.overlayDir.offsetX = 0;\n                    this._changeDetectorRef.markForCheck();\n                }\n            });\n    }\n\n    ngAfterContentInit() {\n        this._initKeyManager();\n\n        this._selectionModel.onChange!\n            .pipe(takeUntil(this._destroy))\n            .subscribe((event) => {\n                event.added.forEach((option) => option.select());\n                event.removed.forEach((option) => option.deselect());\n            });\n\n        this.options.changes\n            .pipe(startWith(null), takeUntil(this._destroy))\n            .subscribe(() => {\n                this._resetOptions();\n                this._initializeSelection();\n            });\n    }\n\n    ngAfterViewInit(): void {\n        this.tags.changes\n            .subscribe(() => {\n                setTimeout(() => this._calculateHiddenItems(), 0);\n            });\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) { this.updateErrorState(); }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes.disabled) {\n            this.stateChanges.next();\n        }\n    }\n\n    ngOnDestroy() {\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n    }\n\n    /** `View -> model callback called when value changes` */\n    _onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when select has been touched` */\n    _onTouched = () => {};\n\n    /** Toggles the overlay panel open or closed. */\n    toggle(): void {\n        if (this.panelOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    /** Opens the overlay panel. */\n    open(): void {\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) { return; }\n\n        this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n        this._panelOpen = true;\n        this._keyManager.withHorizontalOrientation(null);\n        this._calculateOverlayPosition();\n        this._highlightCorrectOption();\n        this._changeDetectorRef.markForCheck();\n\n        // Set the font size on the panel element once it exists.\n        this._ngZone.onStable.asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                if (this._triggerFontSize && this.overlayDir.overlayRef &&\n                    this.overlayDir.overlayRef.overlayElement) {\n                    this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n                }\n            });\n    }\n\n    /** Closes the overlay panel and focuses the host element. */\n    close(): void {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value: any): void {\n        if (this.options) {\n            this._setSelectionByValue(value);\n        }\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn: (value: any) => void): void {\n        this._onChange = fn;\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn: () => {}): void {\n        this._onTouched = fn;\n    }\n\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    get panelOpen(): boolean {\n        return this._panelOpen;\n    }\n\n    get selected(): McOption | McOption[] {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n\n    get triggerValue(): string {\n        if (this.empty) { return ''; }\n\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map((option) => option.viewValue);\n\n            if (this._isRtl()) { selectedOptions.reverse(); }\n\n            return selectedOptions.join(', ');\n        }\n\n        return this._selectionModel.selected[0].viewValue;\n    }\n\n    get triggerValues(): McOption[] {\n        if (this.empty) { return []; }\n\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected;\n\n            if (this._isRtl()) { selectedOptions.reverse(); }\n\n            return selectedOptions;\n        }\n\n        return [this._selectionModel.selected[0]];\n    }\n\n    get empty(): boolean {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n\n    _isRtl(): boolean {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n\n    _handleKeydown(event: KeyboardEvent): void {\n        if (!this.disabled) {\n            if (this.panelOpen) {\n                this._handleOpenKeydown(event);\n            } else {\n                this._handleClosedKeydown(event);\n            }\n        }\n    }\n\n    /**\n     * When the panel content is done fading in, the _panelDoneAnimating property is\n     * set so the proper class can be added to the panel.\n     */\n    _onFadeInDone(): void {\n        this._panelDoneAnimating = this.panelOpen;\n        this._changeDetectorRef.markForCheck();\n    }\n\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached(): void {\n        this.overlayDir.positionChange\n            .pipe(take(1))\n            .subscribe(() => {\n                this._changeDetectorRef.detectChanges();\n                this._calculateOverlayOffsetX();\n                this.panel.nativeElement.scrollTop = this._scrollTop;\n            });\n    }\n\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme(): string {\n        return this._parentFormField ? `mc-${this._parentFormField.color}` : '';\n    }\n\n    /** Focuses the select element. */\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number, maxScroll: number): number {\n        const itemHeight = this._getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n\n        /* tslint:disable-next-line:no-magic-numbers */\n        const halfOptionHeight = itemHeight / 2;\n\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n\n    /** Invoked when an option is clicked. */\n    onRemoveMatcherItem(option: McOption, $event): void {\n        $event.stopPropagation();\n\n        option.deselect();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat(): boolean {\n        return this._panelOpen || !this.empty;\n    }\n\n    _calculateHiddenItems(): void {\n        if (this.empty) { return; }\n\n        let visibleItems: number = 0;\n        const totalItemsWidth = this._getTotalItemsWidthInMatcher();\n        let totalVisibleItemsWidth: number = 0;\n        const itemMargin: number = 4;\n\n        this.tags.forEach((tag) => {\n            if (tag.nativeElement.offsetTop < tag.nativeElement.offsetHeight) {\n                totalVisibleItemsWidth += tag.nativeElement.getBoundingClientRect().width + itemMargin;\n                visibleItems++;\n            }\n        });\n\n        this.hiddenItems = (this.selected as ArrayLike<McOption>).length - visibleItems;\n\n        if (this.hiddenItems) {\n            const itemsCounter = this.trigger.nativeElement.querySelector('.mc-select__match-hidden-text');\n            const matcherList = this.trigger.nativeElement.querySelector('.mc-select__match-list');\n\n            const itemsCounterShowed = itemsCounter.offsetTop < itemsCounter.offsetHeight;\n            // const itemsCounterWidth: number = itemsCounter.getBoundingClientRect().width;\n            const itemsCounterWidth: number = 86;\n\n            const matcherListWidth: number = matcherList.getBoundingClientRect().width;\n            const matcherWidth: number = matcherListWidth + itemsCounterWidth;\n\n            if (itemsCounterShowed && (totalItemsWidth < matcherWidth)) { this.hiddenItems = 0; }\n\n            if (\n                totalVisibleItemsWidth === matcherListWidth ||\n                (totalVisibleItemsWidth + itemsCounterWidth) < matcherListWidth\n            ) {\n                this._changeDetectorRef.markForCheck();\n\n                return ;\n            } else if (!itemsCounterShowed && (totalItemsWidth + itemsCounterWidth) > matcherWidth) {\n                this.hiddenItems++;\n            }\n        }\n\n        this._changeDetectorRef.markForCheck();\n    }\n\n    private _getTotalItemsWidthInMatcher(): number {\n        const triggerClone = this.trigger.nativeElement.cloneNode(true);\n        triggerClone.querySelector('.mc-select__match-hidden-text').remove();\n\n        this._renderer.setStyle(triggerClone, 'position', 'absolute');\n        this._renderer.setStyle(triggerClone, 'visibility', 'hidden');\n        this._renderer.setStyle(triggerClone, 'top', '-100%');\n        this._renderer.setStyle(triggerClone, 'left', '0');\n\n        this._renderer.appendChild(this.trigger.nativeElement, triggerClone);\n\n        let totalItemsWidth: number = 0;\n        const itemMargin: number = 4;\n        triggerClone.querySelectorAll('mc-tag').forEach((item) => {\n            totalItemsWidth += item.getBoundingClientRect().width as number + itemMargin;\n        });\n\n        triggerClone.remove();\n\n        return totalItemsWidth;\n    }\n\n    /** Handles keyboard events while the select is closed. */\n    private _handleClosedKeydown(event: KeyboardEvent): void {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n        // Open the select on ALT + arrow key to match the native <select>\n        if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        } else if (!this.multiple) {\n            this._keyManager.onKeydown(event);\n        }\n    }\n\n    /** Handles keyboard events when the selected is open. */\n    private _handleOpenKeydown(event: KeyboardEvent): void {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const manager = this._keyManager;\n\n        if (keyCode === HOME || keyCode === END) {\n            event.preventDefault();\n\n            if (keyCode === HOME) {\n                manager.setFirstItemActive();\n            } else {\n                manager.setLastItemActive();\n            }\n\n        } else if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n        } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        } else if (this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some((option) => !option.selected);\n            this.options.forEach((option) => {\n                if (hasDeselectedOptions && !option.disabled) {\n                    option.select();\n                } else {\n                    option.deselect();\n                }\n            });\n        } else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n\n            manager.onKeydown(event);\n\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n\n    private _initializeSelection(): void {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n        });\n    }\n\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    private _setSelectionByValue(value: any | any[]): void {\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw getMcSelectNonArrayValueError();\n            }\n\n            this._selectionModel.clear();\n            value.forEach((currentValue: any) => this._selectValue(currentValue));\n            this._sortValues();\n        } else {\n            this._selectionModel.clear();\n            const correspondingOption = this._selectValue(value);\n\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.setActiveItem(correspondingOption);\n            }\n        }\n\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    private _selectValue(value: any): McOption | undefined {\n        const correspondingOption = this.options.find((option: McOption) => {\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            } catch (error) {\n                if (isDevMode()) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n\n                return false;\n            }\n        });\n\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n\n        return correspondingOption;\n    }\n\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    private _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager<McOption>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n        this._keyManager.tabOut\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            });\n\n        this._keyManager.change\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n                if (this._panelOpen && this.panel) {\n                    this._scrollActiveOptionIntoView();\n                } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n            });\n    }\n\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    private _resetOptions(): void {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n        this.optionSelectionChanges\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe((event) => {\n                this._onSelect(event.source, event.isUserInput);\n\n                if (event.isUserInput && !this.multiple && this._panelOpen) {\n                    this.close();\n                    this.focus();\n                }\n            });\n\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map((option) => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n                this._changeDetectorRef.markForCheck();\n                this.stateChanges.next();\n            });\n\n        this._setOptionIds();\n    }\n\n    /** Invoked when an option is clicked. */\n    private _onSelect(option: McOption, isUserInput: boolean): void {\n        const wasSelected = this._selectionModel.isSelected(option);\n\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            this._propagateChanges(option.value);\n        } else {\n            if (option.selected) {\n                this._selectionModel.select(option);\n            } else {\n                this._selectionModel.deselect(option);\n            }\n\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n\n            if (this.multiple) {\n                this._sortValues();\n\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mc-option`.\n                    this.focus();\n                }\n            }\n        }\n\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n\n        this.stateChanges.next();\n    }\n\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    private _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n\n    /** Emits change event to set the model value. */\n    private _propagateChanges(fallbackValue?: any): void {\n        let valueToEmit: any = null;\n\n        if (this.multiple) {\n            valueToEmit = (this.selected as McOption[]).map((option) => option.value);\n        } else {\n            valueToEmit = this.selected ? (this.selected as McOption).value : fallbackValue;\n        }\n\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(new McSelectChange(this, valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /** Records option IDs to pass to the aria-owns property. */\n    private _setOptionIds() {\n        this._optionIds = this.options.map((option) => option.id).join(' ');\n    }\n\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    private _highlightCorrectOption(): void {\n        if (this._keyManager) {\n            if (this.empty) {\n                this._keyManager.setFirstItemActive();\n            } else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n\n    /** Scrolls the active option into view. */\n    private _scrollActiveOptionIntoView(): void {\n        const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n        const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options, this.optionGroups);\n\n        this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n            activeOptionIndex + labelCount,\n            this._getItemHeight(),\n            this.panel.nativeElement.scrollTop,\n            SELECT_PANEL_MAX_HEIGHT\n        );\n    }\n\n    /** Gets the index of the provided option in the option list. */\n    private _getOptionIndex(option: McOption): number | undefined {\n        /* tslint:disable-next-line */\n        return this.options.reduce((result: number, current: McOption, index: number) => {\n            /* tslint:disable-next-line:strict-type-predicates */\n            return result === undefined ? (option === current ? index : undefined) : result;\n        }, undefined);\n    }\n\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    private _calculateOverlayPosition(): void {\n        const itemHeight = this._getItemHeight();\n        const items = this._getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n\n        // If no value is selected we open the popup to the first item.\n        let selectedOptionOffset =\n            this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n        selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n            this.optionGroups);\n\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        /* tslint:disable-next-line:no-magic-numbers */\n        const scrollBuffer = panelHeight / 2;\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._offsetY = this._calculateOverlayOffsetY();\n\n        this._checkOverlayWithinViewport(maxScroll);\n    }\n\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    private _calculateOverlayOffsetX(): void {\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const isRtl = this._isRtl();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const paddingWidth = SELECT_PANEL_PADDING_X * 2;\n        let offsetX: number;\n\n        const selected = this._selectionModel.selected[0] || this.options.first;\n        offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n\n        // Invert the offset in LTR.\n        if (!isRtl) { offsetX *= -1; }\n\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        } else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    private _calculateOverlayOffsetY(): number {\n        // const itemHeight = this._getItemHeight();\n        // const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n\n        // todo I'm not sure that we will use it\n        return 0;\n        // return Math.round(-optionHeightAdjustment);\n    }\n\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    private _checkOverlayWithinViewport(maxScroll: number): void {\n        const itemHeight = this._getItemHeight();\n        const viewportSize = this._viewportRuler.getViewportSize();\n\n        const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable =\n            viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n        const panelHeightTop = Math.abs(this._offsetY);\n        const totalPanelHeight =\n            Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        } else if (panelHeightTop > topSpaceAvailable) {\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        } else {\n            this._transformOrigin = this._getOriginBasedOnOption();\n        }\n    }\n\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this._scrollTop <= 0) {\n            this._scrollTop = 0;\n            this._offsetY = 0;\n            this._transformOrigin = `50% bottom 0px`;\n        }\n    }\n\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number, maxScroll: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this._scrollTop >= maxScroll) {\n            this._scrollTop = maxScroll;\n            this._offsetY = 0;\n            this._transformOrigin = `50% top 0px`;\n\n            return;\n        }\n    }\n\n    /** Sets the transform origin point based on the selected option. */\n    private _getOriginBasedOnOption(): string {\n        const itemHeight = this._getItemHeight();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        /* tslint:disable-next-line:no-magic-numbers */\n        const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n\n        return `50% ${originY}px 0px`;\n    }\n\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    private _getItemCount(): number {\n        return this.options.length + this.optionGroups.length;\n    }\n\n    /** Calculates the height of the select's options. */\n    private _getItemHeight(): number {\n        /* tslint:disable-next-line:no-magic-numbers */\n        return 32;\n        // return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n}\n","import {\n    Directive,\n    DoCheck,\n    ElementRef,\n    forwardRef,\n    Inject,\n    InjectionToken,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Optional,\n    Renderer2,\n    Self\n} from '@angular/core';\nimport {\n    ControlValueAccessor,\n    FormControl,\n    FormGroupDirective,\n    NG_VALIDATORS,\n    NgControl,\n    NgForm,\n    ValidationErrors,\n    ValidatorFn,\n    Validators\n} from '@angular/forms';\nimport {\n    noop,\n    Subject\n} from 'rxjs';\n\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\n\nimport {\n    ARROW_DOWN_KEYCODE,\n    ARROW_LEFT_KEYCODE,\n    ARROW_RIGHT_KEYCODE,\n    ARROW_UP_KEYCODE,\n    DEFAULT_TIME_FORMAT,\n    HOURS_PER_DAY,\n    HOURS_MINUTES_REGEXP,\n    HOURS_MINUTES_SECONDS_REGEXP,\n    HOURS_ONLY_REGEXP,\n    MINUTES_PER_HOUR,\n    SECONDS_PER_MINUTE,\n    TIMEFORMAT_PLACEHOLDERS,\n    TimeFormats,\n    TimeParts\n} from './timepicker.constants';\n\n\nlet _uniqueComponentIdSuffix: number = 0;\nlet _validatorOnChange: () => void = noop;\nlet _validator: ValidatorFn | null = () => null;\n\nexport const MC_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{ value: any }>('MC_INPUT_VALUE_ACCESSOR');\n\nexport class McTimepickerBase {\n    constructor(\n        public _defaultErrorStateMatcher: ErrorStateMatcher,\n        public _parentForm: NgForm,\n        public _parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl) { }\n}\n\nexport const McTimepickerMixinBase:\n    CanUpdateErrorStateCtor &\n    typeof McTimepickerBase = mixinErrorState(McTimepickerBase);\n\n@Directive({\n    selector: 'input[mcTimepicker]',\n    exportAs: 'mcTimepickerInput',\n    host: {\n        class: 'mc-timepicker mc-input',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '[attr.time-format]': 'timeFormat',\n        '[attr.min-time]': 'minTime',\n        '[attr.max-time]': 'maxTime',\n        '[attr.value]': 'value',\n        '(blur)': 'onBlur()',\n        '(focus)': 'focusChanged(true)',\n        '(input)': 'onInput()',\n        '(paste)': 'onPaste($event)',\n        '(keydown)': 'onKeyDown($event)'\n    },\n    providers: [\n        {\n            provide: NG_VALIDATORS,\n            useValue: {\n                validate(c) { return _validator ? _validator(c) : null; },\n                registerOnValidatorChange(fn: () => void): void { _validatorOnChange = fn; }\n            },\n            multi: true\n        },\n        {\n            provide: McFormFieldControl,\n            useExisting: forwardRef(() => McTimepicker)\n        }\n    ]\n\n})\nexport class McTimepicker extends McTimepickerMixinBase\n    implements McFormFieldControl<any>,\n        OnChanges,\n        OnDestroy,\n        DoCheck,\n        CanUpdateErrorState,\n        ControlValueAccessor {\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-timepicker';\n\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) { return this.ngControl.disabled; }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n        }\n\n        this.stateChanges.next();\n    }\n\n    @Input()\n    get id(): string { return this._id; }\n\n    set id(value: string) { this._id = value || this._uid; }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean { return this._required; }\n\n    set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string { return this._inputValueAccessor.value; }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this._applyInputChanges();\n        }\n    }\n\n    @Input('time-format')\n    get timeFormat(): TimeFormats { return this._timeFormat; }\n\n    set timeFormat(formatValue: TimeFormats) {\n        this._timeFormat = Object\n            .keys(TimeFormats)\n            .map((timeFormatKey) => TimeFormats[timeFormatKey])\n            .indexOf(formatValue) > -1 ? formatValue : DEFAULT_TIME_FORMAT;\n\n        _validatorOnChange();\n        this.placeholder = TIMEFORMAT_PLACEHOLDERS[this._timeFormat.toLowerCase()];\n    }\n\n    @Input('min-time')\n    get minTime(): string | null { return this._minTime; }\n\n    set minTime(minValue: string | null) {\n        this._minTime = minValue;\n        this._minDTime = minValue !== null ? this._getDateFromTimeString(minValue) : undefined;\n        _validatorOnChange();\n    }\n\n    @Input('max-time')\n    get maxTime(): string | null { return this._maxTime; }\n\n    set maxTime(maxValue: string | null) {\n        this._maxTime = maxValue;\n        this._maxDTime = maxValue !== null ? this._getDateFromTimeString(maxValue) : undefined;\n        _validatorOnChange();\n    }\n\n    private _id: string;\n    private readonly _uid = `mc-timepicker-${_uniqueComponentIdSuffix++}`;\n    private _disabled: boolean;\n    private _required: boolean;\n    private _previousNativeValue: any;\n    private readonly _inputValueAccessor: { value: any };\n    private _onChange: (value: any) => void;\n    private _onTouched: () => void;\n    private _timeFormat: TimeFormats;\n    private _minTime: string | null = null;\n    private _minDTime: Date | undefined;\n    private _maxTime: string | null = null;\n    private _maxDTime: Date | undefined;\n    private _currentDTimeInput: Date | undefined;\n\n    constructor(private readonly _elementRef: ElementRef,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() _parentForm: NgForm,\n                @Optional() _parentFormGroup: FormGroupDirective,\n                _defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n                private readonly _renderer: Renderer2) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n        this._previousNativeValue = this.value;\n        this._onChange = noop;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n\n        // Instead of NG_VALUE_ACCESSOR (https://github.com/angular/material2/issues/8158#issuecomment-344618103)\n        if (this.ngControl) { this.ngControl.valueAccessor = this; }\n\n        // Substitute initial empty validator with validator linked to directive object instance (workaround)\n        _validator = Validators.compose([\n            () => this._parseValidator(),\n            () => this._minTimeValidator(),\n            () => this._maxTimeValidator()\n        ]);\n    }\n\n    ngOnChanges(): void {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy(): void {\n        this.stateChanges.complete();\n    }\n\n    ngDoCheck(): void {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n    }\n\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    focusChanged(isFocused: boolean): void {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this._onTouched();\n            this.stateChanges.next();\n        }\n    }\n\n    onBlur() {\n        this._applyInputChanges();\n        this.focusChanged(false);\n    }\n\n    onPaste($event) {\n        $event.preventDefault();\n        const clipboardUserInput: string = $event.clipboardData.getData('text');\n\n        if (this._getDateFromTimeString(clipboardUserInput) === undefined) { return; }\n\n        this._elementRef.nativeElement.value = clipboardUserInput;\n        this.onInput();\n    }\n\n    onInput() {\n        const initialCursorStart: number = this._elementRef.nativeElement.selectionStart;\n        const initialCursorEnd: number = this._elementRef.nativeElement.selectionEnd;\n        let isAutocompleteTriggered: boolean = false;\n\n        const {\n            hoursOnly,\n            hoursAndMinutes,\n            hoursAndMinutesAndSeconds\n        } = this._getParsedTimeParts(this._elementRef.nativeElement.value);\n\n        // tslint:disable no-magic-numbers\n        if (hoursOnly &&\n            hoursOnly[1] &&\n            hoursOnly[1].length === 2) {\n            isAutocompleteTriggered = true;\n        } else if (hoursAndMinutes &&\n            hoursAndMinutes[1].length === 1 &&\n            hoursAndMinutes[2] &&\n            hoursAndMinutes[2].length === 2) {\n            isAutocompleteTriggered = true;\n        } else if (hoursAndMinutesAndSeconds &&\n            hoursAndMinutesAndSeconds[1].length === 2 &&\n            hoursAndMinutesAndSeconds[2].length === 2 &&\n            hoursAndMinutesAndSeconds[3] &&\n            hoursAndMinutesAndSeconds[3].length === 2) {\n            isAutocompleteTriggered = true;\n        }\n        // tslint:enable no-magic-numbers\n\n        this._applyInputChanges({ doTimestringReformat: isAutocompleteTriggered });\n\n        this._elementRef.nativeElement.selectionStart = initialCursorStart;\n        this._elementRef.nativeElement.selectionEnd = initialCursorEnd;\n\n        if (isAutocompleteTriggered && this.ngControl.errors === null) {\n            this._createSelectionOfTimeComponentInInput(initialCursorStart + 1);\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this._elementRef.nativeElement.value && !this._isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    writeValue(value: Date | null): void {\n        if (value !== null) {\n            this._renderer.setProperty(this._elementRef.nativeElement,\n                'value',\n                this._getTimeStringFromDate(value, this.timeFormat)\n            );\n        }\n        this._onChange(value || null);\n        this._applyInputChanges();\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n\n        const keyCode: string = this._getKeyCode(event);\n\n        if (keyCode === ARROW_UP_KEYCODE || keyCode === ARROW_DOWN_KEYCODE) {\n            this._upDownTimeByArrowKeys(event);\n        }\n        if (keyCode === ARROW_LEFT_KEYCODE || keyCode === ARROW_RIGHT_KEYCODE) {\n            this._switchSelectionBetweenTimeparts(event);\n        }\n    }\n\n    registerOnChange(fn: (value: Date) => void): void {\n        this._onChange = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this._onTouched = fn;\n    }\n\n    /** Does some manual dirty checking on the native input `value` property. */\n    private _dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Checks whether the input is invalid based on the native validation. */\n    private _isBadInput(): boolean {\n        const validity = (<HTMLInputElement> this._elementRef.nativeElement).validity;\n\n        return validity && validity.badInput;\n    }\n\n    private _applyInputChanges(applyParams: {\n        changedTime?: Date;\n        doTimestringReformat?: boolean;\n    } = {}): void {\n        const { changedTime, doTimestringReformat = true } = applyParams;\n\n        const timeToApply: Date | undefined = changedTime ||\n            this._getDateFromTimeString(this._elementRef.nativeElement.value);\n        this._currentDTimeInput = timeToApply;\n\n        if (doTimestringReformat && timeToApply !== undefined) {\n            this._renderer.setProperty(\n                this._elementRef.nativeElement,\n                'value',\n                this._getTimeStringFromDate(timeToApply, this.timeFormat));\n        }\n\n        (<FormControl> this.ngControl.control).updateValueAndValidity();\n        const result = this.ngControl.errors === null && timeToApply !== undefined ? timeToApply : null;\n        this._onChange(result);\n        this.stateChanges.next();\n    }\n\n    private _upDownTimeByArrowKeys(event: KeyboardEvent): void {\n        event.preventDefault();\n\n        let changedTime: Date | undefined = this._currentDTimeInput;\n        if (changedTime !== undefined) {\n            const cursorPos = this._elementRef.nativeElement.selectionStart;\n\n            const modifiedTimePart = this._getTimeEditMetrics(cursorPos)\n                .modifiedTimePart;\n            const keyCode: string = this._getKeyCode(event);\n            if (keyCode === ARROW_UP_KEYCODE) { changedTime = this._incrementTime(changedTime, modifiedTimePart); }\n            if (keyCode === ARROW_DOWN_KEYCODE) { changedTime = this._decrementTime(changedTime, modifiedTimePart); }\n            this._applyInputChanges({ changedTime });\n            this._createSelectionOfTimeComponentInInput(cursorPos);\n        }\n    }\n\n    private _switchSelectionBetweenTimeparts(event: KeyboardEvent): void {\n        const changedTime: Date | undefined = this._currentDTimeInput;\n        const keyCode: string = this._getKeyCode(event);\n\n        if (changedTime !== undefined) {\n            let cursorPos: number = this._elementRef.nativeElement.selectionStart;\n            if (keyCode === ARROW_LEFT_KEYCODE) {\n                cursorPos = this._getCursorPositionOfPrevTimePartStart(cursorPos, this._elementRef.nativeElement.value);\n            } else if (keyCode === ARROW_RIGHT_KEYCODE) {\n                cursorPos = this._getCursorPositionOfNextTimePartStart(cursorPos, this._elementRef.nativeElement.value);\n            }\n            this._createSelectionOfTimeComponentInInput(cursorPos);\n        }\n    }\n\n    /**\n     * @description Microsoft EDGE doesn't support KeyboaedEvent.code thus we need this helper\n     */\n    private _getKeyCode(event: KeyboardEvent): string {\n        return event.code || event.key;\n    }\n\n    private _createSelectionOfTimeComponentInInput(cursorPos: number): void {\n        setTimeout(() => {\n            const newEditParams = this._getTimeEditMetrics(cursorPos);\n            this._elementRef.nativeElement.selectionStart = newEditParams.cursorStartPosition;\n            this._elementRef.nativeElement.selectionEnd = newEditParams.cursorEndPosition;\n        });\n    }\n\n    private _incrementTime(dateVal: Date,\n                           whatToIncrement: TimeParts = TimeParts.seconds): Date {\n        let { hours, minutes, seconds } = this._getTimeDigitsFromDate(dateVal);\n\n        switch (whatToIncrement) {\n            case TimeParts.hours:\n                hours++;\n                break;\n            case TimeParts.minutes:\n                minutes++;\n                break;\n            case TimeParts.seconds:\n                seconds++;\n                break;\n            default:\n        }\n\n        if (seconds > SECONDS_PER_MINUTE) { seconds = 0; }\n\n        if (minutes > MINUTES_PER_HOUR) { minutes = 0; }\n\n        if (hours > HOURS_PER_DAY) { hours = 0; }\n\n        return <Date> this._getDateFromTimeDigits(hours, minutes, seconds);\n    }\n\n    /**\n     * @description Decrement part of time\n     */\n    private _decrementTime(dateVal: Date,\n                           whatToDecrement: TimeParts = TimeParts.seconds): Date {\n        let { hours, minutes, seconds } = this._getTimeDigitsFromDate(dateVal);\n\n        switch (whatToDecrement) {\n            case TimeParts.hours:\n                hours--;\n                break;\n            case TimeParts.minutes:\n                minutes--;\n                break;\n            case TimeParts.seconds:\n                seconds--;\n                break;\n            default:\n        }\n\n        if (seconds < 0) { seconds = SECONDS_PER_MINUTE; }\n\n        if (minutes < 0) { minutes = MINUTES_PER_HOUR; }\n\n        if (hours < 0) { hours = HOURS_PER_DAY; }\n\n        return <Date> this._getDateFromTimeDigits(hours, minutes, seconds);\n    }\n\n    private _getCursorPositionOfPrevTimePartStart(cursorPos: number, timeString: string): number {\n        return cursorPos === 0 ? timeString.length : cursorPos - 1;\n    }\n\n    private _getCursorPositionOfNextTimePartStart(cursorPos: number,\n                                                  timeString: string,\n                                                  timeDevider: string = ':'): number {\n        const nextDividerPos: number = timeString.indexOf(timeDevider, cursorPos);\n\n        return nextDividerPos !== undefined ? nextDividerPos + 1 : 0;\n    }\n\n    /**\n     * @description Get params for arrow-keys (up/down) time valie edit.\n     * @param cursorPosition Current cursor position in timeString\n     */\n    private _getTimeEditMetrics(cursorPosition: number): {\n        modifiedTimePart: TimeParts;\n        cursorStartPosition: number;\n        cursorEndPosition: number;\n    } {\n        const timeString: string = this._elementRef.nativeElement.value;\n        let modifiedTimePart: TimeParts;\n        let cursorStartPosition: number;\n        let cursorEndPosition: number;\n        const hoursIndex = 0;\n        const minutesIndex = timeString.indexOf(':', hoursIndex + 1);\n        const secondsIndex = minutesIndex !== -1 ? timeString.indexOf(':', minutesIndex + 1) : -1;\n\n        if (secondsIndex !== -1 && cursorPosition > secondsIndex) {\n            modifiedTimePart = TimeParts.seconds;\n            cursorStartPosition = secondsIndex + 1;\n            cursorEndPosition = timeString.length;\n        } else if (minutesIndex !== -1 && cursorPosition > minutesIndex) {\n            modifiedTimePart = TimeParts.minutes;\n            cursorStartPosition = minutesIndex + 1;\n            cursorEndPosition = secondsIndex > -1 ? secondsIndex : timeString.length;\n        } else {\n            modifiedTimePart = TimeParts.hours;\n            cursorStartPosition = hoursIndex;\n            cursorEndPosition = minutesIndex !== -1 ? minutesIndex : timeString.length;\n        }\n\n        return {\n            modifiedTimePart,\n            cursorStartPosition,\n            cursorEndPosition\n        };\n    }\n\n    /**\n     * @description Create time string for displaying inside input element of UI\n     */\n    private _getTimeStringFromDate(tempVal: Date,\n                                   timeFormat: TimeFormats = DEFAULT_TIME_FORMAT): string {\n        const hours: string = this._getNumberWithLeadingZero(tempVal.getHours());\n        const minutes: string = this._getNumberWithLeadingZero(tempVal.getMinutes());\n        const seconds: string = this._getNumberWithLeadingZero(tempVal.getSeconds());\n\n        const formattedTimeGenerators = {\n            [TimeFormats.HHmm]: () => `${hours}:${minutes}`,\n            [TimeFormats.HHmmss]: () => `${hours}:${minutes}:${seconds}`\n        };\n\n        return formattedTimeGenerators[timeFormat]();\n    }\n\n    private _getParsedTimeParts(timeString: string): {\n        hoursOnly: any;\n        hoursAndMinutes: any;\n        hoursAndMinutesAndSeconds: any;\n    } {\n        const hoursAndMinutesAndSeconds = timeString.match(HOURS_MINUTES_SECONDS_REGEXP);\n        const hoursAndMinutes = timeString.match(HOURS_MINUTES_REGEXP);\n        const hoursOnly = timeString.match(HOURS_ONLY_REGEXP);\n\n        return {\n            hoursOnly,\n            hoursAndMinutes,\n            hoursAndMinutesAndSeconds\n        };\n    }\n\n    /**\n     * @description Create Date object from separate parts of time\n     */\n    private _getDateFromTimeDigits(hours: number, minutes: number, seconds: number = 0): Date | undefined {\n        return this._getDateFromTimeString(`${hours}:${minutes}:${seconds}`);\n    }\n\n    private _getDateFromTimeString(timeString: string | undefined): Date | undefined {\n        // TODO Use moment-js\n        if (timeString === undefined) { return; }\n\n        const {\n            hoursOnly,\n            hoursAndMinutes,\n            hoursAndMinutesAndSeconds\n        } = this._getParsedTimeParts(timeString);\n\n        if (timeString.trim().length === 0 ||\n            hoursOnly === null && hoursAndMinutes === null && hoursAndMinutesAndSeconds === null) {\n            return;\n        }\n\n        // tslint:disable no-magic-numbers\n        let hours: number = 0;\n        let minutes: number = 0;\n        let seconds: number = 0;\n\n        if (hoursOnly) {\n            hours = Number(hoursOnly[1]);\n        } else if (hoursAndMinutes) {\n            hours = Number(hoursAndMinutes[1]);\n            minutes = Number(hoursAndMinutes[2]);\n        } else if (hoursAndMinutesAndSeconds) {\n            hours = Number(hoursAndMinutesAndSeconds[1]);\n            minutes = Number(hoursAndMinutesAndSeconds[2]);\n            seconds = Number(hoursAndMinutesAndSeconds[3]);\n        }\n        // const timestamp: number = Date.parse(fullDateString);\n        const resultDate: Date = new Date(1970, 0, 1, hours, minutes, seconds);\n        // tslint:enable no-magic-numbers\n\n        return isNaN(resultDate.getTime()) ? undefined : resultDate;\n    }\n\n    private _getNumberWithLeadingZero(digit: number): string {\n        const MAX_DIGIT_WITH_LEADING_ZERO: number = 9;\n\n        return digit > MAX_DIGIT_WITH_LEADING_ZERO ? `${digit}` : `0${digit}`;\n    }\n\n    private _getTimeDigitsFromDate(dateVal: Date): { hours: number; minutes: number; seconds: number } {\n        return {\n            hours: dateVal.getHours(),\n            minutes: dateVal.getMinutes(),\n            seconds: dateVal.getSeconds()\n        };\n    }\n\n    private _parseValidator(): ValidationErrors | null {\n        return this._currentDTimeInput === undefined ?\n            { mcTimepickerParse: { text: this._elementRef.nativeElement.value } } :\n            null;\n    }\n\n    private _minTimeValidator(): ValidationErrors | null {\n\n        if (this._currentDTimeInput !== undefined &&\n            this._minDTime !== undefined &&\n            this._isTimeLowerThenMin(this._currentDTimeInput)) {\n            return { mcTimepickerLowerThenMintime: { text: this._elementRef.nativeElement.value } };\n        }\n\n        return null;\n    }\n\n    private _maxTimeValidator(): ValidationErrors | null {\n        if (this._currentDTimeInput !== undefined &&\n            this._maxDTime !== undefined &&\n            this._isTimeGreaterThenMax(this._currentDTimeInput)) {\n            return { mcTimepickerHigherThenMaxtime: { text: this._elementRef.nativeElement.value } };\n        }\n\n        return null;\n    }\n\n    private _isTimeLowerThenMin(timeToCompare: Date): boolean {\n        return timeToCompare.getTime() - (<Date> this._minDTime).getTime() < 0;\n    }\n\n    private _isTimeGreaterThenMax(timeToCompare: Date): boolean {\n        return timeToCompare.getTime() - (<Date> this._maxDTime).getTime() >= 0;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McTimepicker } from './timepicker';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        FormsModule\n    ],\n    declarations: [\n        McTimepicker\n    ],\n    exports: [\n        McTimepicker\n    ]\n})\nexport class McTimepickerModule {}\n","import {\n    animate,\n    AnimationTriggerMetadata,\n    state,\n    style,\n    transition,\n    trigger,\n    query,\n    animateChild,\n    group\n} from '@angular/animations';\n\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const mcSelectAnimations: {\n    readonly transformPanel: AnimationTriggerMetadata;\n    readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0)',\n            minWidth: '100%',\n            opacity: 0\n        })),\n        transition('void => *', group([\n            query('@fadeInContent', animateChild()),\n            animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n        ])),\n        transition('* => void', [\n            animate('250ms 100ms linear', style({ opacity: 0 }))\n        ])\n    ]),\n\n    /**\n     * This animation fades in the background color and text content of the\n     * select's options. It is time delayed to occur 100ms after the overlay\n     * panel has transformed in.\n     */\n    fadeInContent: trigger('fadeInContent', [\n        state('showing', style({ opacity: 1 })),\n        transition('void => showing', [\n            style({ opacity: 0 }),\n            animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformPanel = mcSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInContent = mcSelectAnimations.fadeInContent;\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { McOptionModule } from '@ptsecurity/mosaic/core';\nimport { McFormFieldModule } from '@ptsecurity/mosaic/form-field';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\nimport { McTagModule } from '@ptsecurity/mosaic/tag';\n\nimport { MC_SELECT_SCROLL_STRATEGY_PROVIDER, McSelect, McSelectTrigger } from './select.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        McOptionModule,\n        McIconModule,\n        McTagModule\n    ],\n    exports: [McFormFieldModule, McSelect, McSelectTrigger, McOptionModule, CommonModule],\n    declarations: [McSelect, McSelectTrigger],\n    providers: [MC_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class McSelectModule {}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef,\n    Input, OnDestroy, OnInit, Optional, Output, QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { UniqueSelectionDispatcher } from '@ptsecurity/cdk/collections';\n\nimport {\n    CanColor, CanColorCtor,\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/** Change event object emitted by McRadio. */\nexport class McRadioChange {\n    constructor(\n        /** The McRadioButton that emits the change event. */\n        public source: McRadioButton,\n        /** The value of the McRadioButton. */\n        public value: any) {}\n}\n\n// Boilerplate for applying mixins to McRadioGroup.\n/** @docs-private */\nexport class McRadioGroupBase {}\nexport const _McRadioGroupMixinBase: CanDisableCtor & typeof McRadioGroupBase = mixinDisabled(McRadioGroupBase);\n\n/**\n * Provider Expression that allows mc-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McRadioGroup),\n    multi: true\n};\n\n@Directive({\n    selector: 'mc-radio-group',\n    exportAs: 'mcRadioGroup',\n    providers: [MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n    host: {\n        role: 'radiogroup',\n        class: 'mc-radio-group'\n    },\n    inputs: ['disabled']\n})\nexport class McRadioGroup extends _McRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    @Input()\n    get name(): string { return this._name; }\n    set name(value: string) {\n        this._name = value;\n        this.updateRadioButtonNames();\n    }\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this.markRadiosForCheck();\n    }\n\n    /** Value of the radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n\n            this.updateSelectedRadioFromValue();\n            this.checkSelectedRadioButton();\n        }\n    }\n\n    /** Whether the radio button is selected. */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: McRadioButton | null) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this.checkSelectedRadioButton();\n    }\n\n    /** Whether the radio group is disabled */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /** Whether the radio group is required */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** Child radio buttons. */\n    @ContentChildren(forwardRef(() => McRadioButton), { descendants: true })\n    _radios: QueryList<McRadioButton>;\n\n    /**\n     * Selected value for group. Should equal the value of the selected radio button if there *is*\n     * a corresponding radio button with a matching value. If there is *not* such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    private _value: any = null;\n\n    /** The HTML name attribute applied to radio buttons in this group. */\n    private _name: string = `mc-radio-group-${nextUniqueId++}`;\n\n    /** The currently selected radio button. Should match value. */\n    private _selected: McRadioButton | null = null;\n\n    /** Whether the `value` has been set to its initial value. */\n    private _isInitialized: boolean = false;\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    private _labelPosition: 'before' | 'after' = 'after';\n\n    /** Whether the radio group is disabled. */\n    private _disabled: boolean = false;\n\n    /** Whether the radio group is required. */\n    private _required: boolean = false;\n\n    constructor(\n        private readonly _changeDetector: ChangeDetectorRef\n    ) {\n        super();\n    }\n\n    /** The method to be called in order to update ngModel */\n    // tslint:disable-next-line\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @docs-private\n     */\n    // tslint:disable-next-line\n    onTouched: () => any = () => {};\n\n    checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on McRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the McRadioGroup.\n        this._isInitialized = true;\n    }\n\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        if (this._isInitialized) {\n            this.change.emit(new McRadioChange(this._selected!, this._value));\n        }\n    }\n\n    markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach((radio) => radio.markForCheck());\n        }\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n\n    private updateRadioButtonNames(): void {\n        if (this._radios) {\n            this._radios.forEach((radio) => {\n                radio.name = this.name;\n            });\n        }\n    }\n\n    /** Updates the `selected` radio button from the internal _value state. */\n    private updateSelectedRadioFromValue(): void {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n        if (this._radios != null && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach((radio) => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n}\n\n\n// Boilerplate for applying mixins to McRadioButton.\n/** @docs-private */\nexport class McRadioButtonBase {\n    // Since the disabled property is manually defined for the McRadioButton and isn't set up in\n    // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n    // defined to properly work.\n    disabled: boolean;\n\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McRadioButtonMixinBase:\n    CanColorCtor &\n    HasTabIndexCtor &\n    typeof McRadioButtonBase =\n        mixinColor(mixinTabIndex(McRadioButtonBase));\n\n\n@Component({\n    selector: 'mc-radio-button',\n    templateUrl: 'radio.component.html',\n    styleUrls: ['radio.css'],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    exportAs: 'mcRadioButton',\n    host: {\n        class: 'mc-radio-button',\n        '[attr.id]': 'id',\n        '[class.mc-radio-checked]': 'checked',\n        '[class.mc-radio-disabled]': 'disabled',\n        '(focus)': '_inputElement.nativeElement.focus()'\n    }\n})\nexport class McRadioButton extends _McRadioButtonMixinBase\n    implements OnInit, OnDestroy, CanColor, HasTabIndex {\n\n    private readonly _uniqueId: string = `mc-radio-${++nextUniqueId}`;\n\n    /* tslint:disable:member-ordering */\n\n    /** The unique ID for the radio button. */\n    @Input() id: string = this._uniqueId;\n\n    /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n    @Input() name: string;\n\n    /** Used to set the 'aria-label' attribute on the underlying input element. */\n    @Input('aria-label') ariaLabel: string;\n\n    /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n    @Input('aria-labelledby') ariaLabelledby: string;\n\n    /** The 'aria-describedby' attribute is read after the element's label and field type. */\n    @Input('aria-describedby') ariaDescribedby: string;\n\n    /** Whether this radio button is checked. */\n    @Input()\n    get checked(): boolean { return this._checked; }\n    set checked(value: boolean) {\n        const newCheckedState = toBoolean(value);\n\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** The value of this radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(value: any) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup != null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n\n    /** Whether the radio button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n    }\n    set disabled(value: boolean) {\n        const newDisabledState = toBoolean(value);\n\n        if (this._disabled !== newDisabledState) {\n\n            this._disabled = newDisabledState;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** Whether the radio button is required. */\n    @Input()\n    get required(): boolean {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    private _labelPosition: 'before' | 'after';\n\n    /** The native `<input type=radio>` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** The parent radio group. May or may not be present. */\n    radioGroup: McRadioGroup;\n\n    @Input()\n    isFocused: boolean = false;\n\n    /** ID of the native input element inside `<mc-radio-button>` */\n    get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n    /** Whether this radio is checked. */\n    private _checked: boolean = false;\n\n    /** Whether this radio is disabled. */\n    private _disabled: boolean;\n\n    /** Whether this radio is required. */\n    private _required: boolean;\n\n    /** Value assigned to this radio. */\n    private _value: any = null;\n\n    /** Unregister function for _radioDispatcher */\n    // tslint:disable-next-line\n    private readonly removeUniqueSelectionListener: () => void = () => {};\n\n    constructor(\n        @Optional() radioGroup: McRadioGroup,\n        elementRef: ElementRef,\n        private readonly _changeDetector: ChangeDetectorRef,\n        private readonly _radioDispatcher: UniqueSelectionDispatcher\n    ) {\n\n        super(elementRef);\n\n        this.radioGroup = radioGroup;\n\n        this.removeUniqueSelectionListener =\n            _radioDispatcher.listen((id: string, name: string) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n\n    ngOnDestroy() {\n        this.removeUniqueSelectionListener();\n    }\n\n    /** Focuses the radio button. */\n    // tslint:disable-next-line\n    focus(): void {}\n\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n\n    onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n\n    onInputChange(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this.emitChangeEvent();\n\n        if (this.radioGroup) {\n            this.radioGroup.controlValueAccessorChangeFn(this.value);\n            this.radioGroup.touch();\n            if (groupValueChanged) {\n                this.radioGroup.emitChangeEvent();\n            }\n        }\n    }\n\n    /** Dispatch change event with current value. */\n    private emitChangeEvent(): void {\n        this.change.emit(new McRadioChange(this, this._value));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McRadioButton, McRadioGroup } from './radio.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule],\n    exports: [McRadioGroup, McRadioButton],\n    declarations: [McRadioGroup, McRadioButton]\n})\nexport class McRadioModule {\n}\n","import { Directive, Input } from '@angular/core';\n\nimport { CdkTreeNodeDef } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodeDef]',\n    inputs: ['when: mcTreeNodeDefWhen'],\n    providers: [{ provide: CdkTreeNodeDef, useExisting: McTreeNodeDef }]\n})\nexport class McTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n    @Input('mcTreeNode') data: T;\n}\n","import { Directive, Input, OnInit } from '@angular/core';\nimport { CdkTreeNodePadding } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodePadding]',\n    providers: [{ provide: CdkTreeNodePadding, useExisting: McTreeNodePadding }]\n})\nexport class McTreeNodePadding<T> extends CdkTreeNodePadding<T> implements OnInit {\n    get leftPadding(): number {\n        return (this._withIcon ? 0 : this._iconWidth) + this._baseLeftPadding;\n    }\n\n    _baseLeftPadding: number = 6;\n    _iconWidth: number = 20;\n    _indent: number = 16;\n\n    @Input('mcTreeNodePadding') level: number;\n\n    @Input('mcTreeNodePaddingIndent') indent: number;\n\n    _withIcon: boolean;\n\n    _paddingIndent(): string | null {\n        const nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)\n            ? this._tree.treeControl.getLevel(this._treeNode.data)\n            : null;\n\n        const level = this._level || nodeLevel;\n\n        return level ? `${(level * this._indent) + this.leftPadding}px` : `${this._baseLeftPadding}px`;\n    }\n\n    ngOnInit(): void {\n        this._withIcon = this._tree.treeControl.isExpandable(this._treeNode.data);\n        this._setPadding();\n    }\n}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, ContentChildren, EventEmitter, forwardRef, Input, IterableDiffer,\n    IterableDiffers, Output, QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    Directive, ElementRef, Inject\n} from '@angular/core';\nimport { NodeDef, ViewData } from '@angular/core/src/view';\n\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { CdkTreeNode, CdkTree, CdkTreeNodeOutlet } from '@ptsecurity/cdk/tree';\n\nimport {\n    CanDisable, CanDisableCtor,\n    HasTabIndex,\n    HasTabIndexCtor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\nimport { FocusKeyManager } from '@ptsecurity/cdk/a11y';\n\nimport { END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, SPACE } from '@ptsecurity/cdk/keycodes';\n\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n    exportAs: 'mcTreeNodeOption',\n    selector: 'mc-tree-node-option',\n    host: {\n        tabindex: '-1',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': '_hasFocus',\n        '[attr.aria-expanded]': 'isExpanded',\n        '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n        class: 'mc-tree-node',\n\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()',\n\n        '(click)': '_handleClick()'\n    },\n    providers: [\n        { provide: CdkTreeNode, useExisting: McTreeNodeOption }\n    ]\n})\nexport class McTreeNodeOption<T> extends CdkTreeNode<T> implements CanDisable {\n    @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n        }\n    }\n\n    @Input()\n    get selected(): boolean {\n        return this.treeSelection.selectedOptions && this.treeSelection.selectedOptions.isSelected(this) || false;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            // this.treeSelection._reportValueChange();\n        }\n    }\n\n    private _hasFocus: boolean = false;\n\n    private _disabled: boolean = false;\n    private _selected: boolean = false;\n\n    constructor(\n        protected _elementRef: ElementRef,\n        @Inject(forwardRef(() => McTreeSelection))\n        protected treeSelection: McTreeSelection<T>\n    ) {\n        super(_elementRef, treeSelection);\n    }\n\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n\n        this.treeSelection.setFocusedOption(this);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.treeSelection.selectedOptions) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.treeSelection.selectedOptions.select(this);\n        } else {\n            this.treeSelection.selectedOptions.deselect(this);\n        }\n\n        // this._changeDetector.markForCheck();\n    }\n\n    _getHeight(): number {\n        return this._elementRef.nativeElement.getClientRects()[0].height;\n    }\n\n    _handleFocus(): void {\n        if (this.disabled || this._hasFocus) { return; }\n\n        this._hasFocus = true;\n    }\n\n    _handleBlur(): void {\n        this._hasFocus = false;\n    }\n\n    _handleClick(): void {\n        if (this.disabled) { return; }\n\n        this.treeSelection.setFocusedOption(this);\n    }\n}\n\nexport const _McTreeSelectionBase:\n    HasTabIndexCtor &\n    CanDisableCtor &\n    typeof CdkTree\n    = mixinTabIndex(mixinDisabled(CdkTree));\n\nexport class McTreeNavigationChange {\n    constructor(\n        public source: McTreeSelection<any>,\n        public option: McTreeNodeOption<any>\n    ) {}\n}\n\nexport class McTreeSelectionChange {\n    constructor(\n        public source: McTreeSelection<any>,\n        public option: McTreeNodeOption<any>\n    ) {}\n}\n\n@Component({\n    exportAs: 'mcTreeSelection',\n    selector: 'mc-tree-selection',\n    template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n    host: {\n        '[tabIndex]': 'tabIndex',\n        class: 'mc-tree-selection',\n        role: 'tree-selection',\n        '(keydown)': '_onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    styleUrls: ['./tree.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{ provide: CdkTree, useExisting: McTreeSelection }]\n})\nexport class McTreeSelection<T> extends _McTreeSelectionBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex {\n    // Outlets within the tree's template where the dataNodes will be inserted.\n    @ViewChild(CdkTreeNodeOutlet) _nodeOutlet: CdkTreeNodeOutlet;\n\n    @ContentChildren(forwardRef(() => McTreeNodeOption)) options: QueryList<McTreeNodeOption<T>>;\n\n    _keyManager: FocusKeyManager<McTreeNodeOption<T>>;\n\n    selectedOptions: SelectionModel<McTreeNodeOption<T>>;\n\n    _disabled: boolean = false;\n    tabIndex: number;\n    multiple: boolean;\n    autoSelect: boolean;\n    noUnselect: boolean;\n\n    // todo temporary solution\n    withShift: boolean;\n    withCtrl: boolean;\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(rawValue: boolean) {\n        const value = toBoolean(rawValue);\n\n        if (this._disabled !== value) {\n            this._disabled = value;\n\n            if (this._disabled) {\n                console.log('need disable all options');\n            } else {\n                console.log('need enable all options');\n            }\n        }\n    }\n\n    @Output() readonly navigationChange = new EventEmitter<McTreeNavigationChange>();\n\n    @Output() readonly selectionChange = new EventEmitter<McTreeSelectionChange>();\n\n    constructor(\n        private _elementRef: ElementRef,\n        _differs: IterableDiffers,\n        _changeDetectorRef: ChangeDetectorRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('multiple') multiple: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string\n    ) {\n        super(_differs, _changeDetectorRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.multiple = multiple === null ? true : toBoolean(multiple);\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.selectedOptions = new SelectionModel<McTreeNodeOption<T>>(this.multiple);\n    }\n\n    _onKeyDown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n        this.withShift = event.shiftKey;\n        this.withCtrl = event.ctrlKey;\n\n        switch (keyCode) {\n            case LEFT_ARROW:\n                if (this._keyManager.activeItem) {\n                    this.treeControl.collapse(this._keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                break;\n            case RIGHT_ARROW:\n                if (this._keyManager.activeItem) {\n                    this.treeControl.expand(this._keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                break;\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                this._keyManager.setPreviousPageItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                this._keyManager.setNextPageItemActive();\n                event.preventDefault();\n\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    ngAfterContentInit(): void {\n        this._keyManager = new FocusKeyManager<McTreeNodeOption<T>>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation(true)\n            .withHorizontalOrientation(null);\n    }\n\n    updateScrollSize(): void {\n        if (!this.options.first) { return; }\n\n        this._keyManager.withScrollSize(Math.floor(this._getHeight() / this.options.first._getHeight()));\n    }\n\n    setFocusedOption(option: McTreeNodeOption<T>): void {\n        this._keyManager.updateActiveItem(option);\n\n        if (this.withShift && this.multiple) {\n            const previousIndex = this._keyManager.previousActiveItemIndex;\n            const activeIndex = this._keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n\n            this.withShift = false;\n        } else if (this.withCtrl) {\n            this.withCtrl = false;\n\n            if (!this._canDeselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) {\n                this.options.forEach((item) => item.setSelected(false));\n                option.setSelected(true);\n            }\n        }\n\n        this._emitNavigationEvent(option);\n    }\n\n    // Toggles the selected state of the currently focused option.\n    toggleFocusedOption(): void {\n        const focusedIndex = this._keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n            const focusedOption: McTreeNodeOption<T> = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this._canDeselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this._emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    renderNodeChanges(\n        data: T[],\n        dataDiffer: IterableDiffer<T> = this._dataDiffer,\n        viewContainer: any = this._nodeOutlet.viewContainer,\n        parentData?: T\n    ) {\n        super.renderNodeChanges(data, dataDiffer, viewContainer, parentData);\n\n        const arrayOfInstances = [];\n\n        viewContainer._embeddedViews.forEach((view: ViewData) => {\n            const viewDef = view.def;\n\n            viewDef.nodes.forEach((node: NodeDef) => {\n                if (viewDef.nodeMatchedQueries === node.matchedQueryIds) {\n                    const nodeData: any = view.nodes[node.nodeIndex];\n\n                    arrayOfInstances.push(nodeData.instance as never);\n                }\n            });\n        });\n\n        if (this.options) {\n            this.options.reset(arrayOfInstances);\n            this.options.notifyOnChanges();\n        }\n\n        this.updateScrollSize();\n    }\n\n    _getHeight(): number {\n        return this._elementRef.nativeElement.getClientRects()[0].height;\n    }\n\n    _emitNavigationEvent(option: McTreeNodeOption<T>): void {\n        this.navigationChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    _emitChangeEvent(option: McTreeNodeOption<T>): void {\n        this.selectionChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private _isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    private _canDeselectLast(option: McTreeNodeOption<T>): boolean {\n        return !(this.noUnselect && this.selectedOptions.selected.length === 1 && option.selected);\n    }\n}\n\n","import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { CdkTreeModule } from '@ptsecurity/cdk/tree';\n\nimport { McTreeNodeDef } from './node';\nimport { McTreeNodePadding } from './padding';\nimport { McTreeSelection, McTreeNodeOption } from './tree-selection';\n\n\nconst MC_TREE_DIRECTIVES = [\n    McTreeNodeDef,\n    McTreeNodePadding,\n    McTreeSelection,\n    McTreeNodeOption\n];\n\n@NgModule({\n    imports: [CommonModule, CdkTreeModule],\n    exports: MC_TREE_DIRECTIVES,\n    declarations: MC_TREE_DIRECTIVES\n})\nexport class McTreeModule {}\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { FlatTreeControl, ITreeControl } from '@ptsecurity/cdk/tree';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class McTreeFlattener<T, F> {\n\n    constructor(public transformFunction: (node: T, level: number) => F,\n                public getLevel: (node: F) => number,\n                public isExpandable: (node: F) => boolean,\n                public getChildren: (node: T) => Observable<T[]>) {\n    }\n\n    _flattenNode(node: T, level: number,\n                 resultNodes: F[], parentMap: boolean[]): F[] {\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n\n        if (this.isExpandable(flatNode)) {\n            this.getChildren(node).pipe(take(1)).subscribe((children) => {\n                children.forEach((child, index) => {\n                    const childParentMap: boolean[] = parentMap.slice();\n                    childParentMap.push(index !== children.length - 1);\n                    this._flattenNode(child, level + 1, resultNodes, childParentMap);\n                });\n            });\n        }\n\n        return resultNodes;\n    }\n\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n    flattenNodes(structuredData: T[]): F[] {\n        const resultNodes: F[] = [];\n        structuredData.forEach((node) => this._flattenNode(node, 0, resultNodes, []));\n\n        return resultNodes;\n    }\n\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n    expandFlattenedNodes(nodes: F[], treeControl: ITreeControl<F>): F[] {\n        const results: F[] = [];\n        const currentExpand: boolean[] = [];\n        currentExpand[0] = true;\n\n        nodes.forEach((node) => {\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n\n            if (expand) { results.push(node); }\n\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        });\n\n        return results;\n    }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `McTree`.\n * The nested tree nodes of type `T` are flattened through `MсTreeFlattener`, and converted\n * to type `F` for `McTree` to consume.\n */\nexport class McTreeFlatDataSource<T, F> extends DataSource<F> {\n    _flattenedData = new BehaviorSubject<F[]>([]);\n\n    _expandedData = new BehaviorSubject<F[]>([]);\n\n    _data: BehaviorSubject<T[]>;\n\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n        this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n        this.treeControl.dataNodes = this._flattenedData.value;\n    }\n\n    constructor(private treeControl: FlatTreeControl<F>,\n                private treeFlattener: McTreeFlattener<T, F>,\n                initialData: T[] = []) {\n        super();\n        this._data = new BehaviorSubject<T[]>(initialData);\n    }\n\n    connect(collectionViewer: ICollectionViewer): Observable<F[]> {\n        const changes = [\n            collectionViewer.viewChange,\n            this.treeControl.expansionModel.onChange!,\n            this._flattenedData\n        ];\n\n        return merge(...changes).pipe(map(() => {\n            this._expandedData.next(\n                this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n\n            return this._expandedData.value;\n        }));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by ITreeControl and each non-leaf node.\n */\nexport class McTreeNestedDataSource<T> extends DataSource<T> {\n    _data = new BehaviorSubject<T[]>([]);\n\n    /**\n     * Data for the nested tree\n     */\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n    }\n\n    connect(collectionViewer: ICollectionViewer): Observable<T[]> {\n        return merge(...[collectionViewer.viewChange, this._data])\n            .pipe(map(() => this.data));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import {\n    ElementRef,\n    QueryList,\n    ContentChildren,\n    Component,\n    ChangeDetectionStrategy,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { mixinColor, CanColor, CanColorCtor } from '@ptsecurity/mosaic/core';\nimport { McIcon } from '@ptsecurity/mosaic/icon';\n\n\nexport class McTagBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McTagMixinBase: CanColorCtor & typeof McTagBase\n    = mixinColor(McTagBase);\n\n\n@Component({\n    selector: 'mc-tag',\n    templateUrl: 'tag.partial.html',\n    styleUrls: ['./tag.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'mc-tag' },\n    inputs: ['color']\n})\nexport class McTag extends _McTagMixinBase implements CanColor {\n    @ContentChildren(McIcon) contentChildren: QueryList<McIcon>;\n\n    nativeElement: HTMLElement;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        this._addClassModificatorForIcons();\n    }\n\n    _addClassModificatorForIcons() {\n        const icons = this.contentChildren.map((item) => item._elementRef.nativeElement);\n\n        if (icons.length === 1) {\n            const iconElement = icons[0];\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-left-icon');\n                }\n\n                if (iconElement.previousSibling) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-right-icon');\n                }\n            }\n        } else if (icons.length > 1) {\n            const firstIconElement = icons[0];\n            const secondIconElement = icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McTag } from './tag.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McTag\n    ],\n    declarations: [\n        McTag\n    ]\n})\nexport class McTagModule {}\n","import { DOCUMENT } from '@angular/common';\nimport {\n    AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef,\n    Component,\n    ComponentFactoryResolver,\n    ComponentRef,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Injector,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    Renderer2,\n    SimpleChanges,\n    TemplateRef,\n    Type,\n    ViewChild,\n    ViewContainerRef, ViewEncapsulation\n} from '@angular/core';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { Overlay, OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { McMeasureScrollbarService } from '@ptsecurity/mosaic/core';\nimport { Observable } from 'rxjs';\n\nimport { McModalControlService } from './modal-control.service';\nimport { McModalRef } from './modal-ref.class';\n// tslint:disable-next-line\nimport ModalUtil from './modal-util';\nimport { IModalButtonOptions, IModalOptions, ModalType, OnClickCallback } from './modal.type';\n\n\n// Duration when perform animations (ms)\nexport const MODAL_ANIMATE_DURATION = 200;\n\ntype AnimationState = 'enter' | 'leave' | null;\n\n@Component({\n    selector: 'mc-modal',\n    templateUrl: './modal.component.html',\n    styleUrls: ['./modal.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        '(keydown)': 'onKeyDown($event)'\n    }\n})\nexport class McModalComponent<T = any, R = any> extends McModalRef<T, R>\n    implements OnInit, OnChanges, AfterViewInit, OnDestroy, IModalOptions {\n\n    // tslint:disable-next-line:no-any\n    @Input() mcModalType: ModalType = 'default';\n    // If not specified, will use <ng-content>\n    @Input() mcContent: string | TemplateRef<{}> | Type<T>;\n    // available when mcContent is a component\n    @Input() mcComponentParams: object;\n    // Default Modal ONLY\n    @Input() mcFooter: string | TemplateRef<{}> | IModalButtonOptions<T>[];\n\n    @Input()\n    get mcVisible() { return this._mcVisible; }\n    set mcVisible(value) { this._mcVisible = value; }\n    _mcVisible = false;\n\n    @Output() mcVisibleChange = new EventEmitter<boolean>();\n\n    @Input() mcZIndex: number = 1000;\n    @Input() mcWidth: number | string = 480;\n    @Input() mcWrapClassName: string;\n    @Input() mcClassName: string;\n    @Input() mcStyle: object;\n    @Input() mcTitle: string | TemplateRef<{}>;\n    @Input() mcCloseByESC: boolean = true;\n\n    @Input()\n    get mcClosable() { return this._mcClosable; }\n    set mcClosable(value) { this._mcClosable = value; }\n    _mcClosable = true;\n\n    @Input()\n    get mcMask() { return this._mcMask; }\n    set mcMask(value) { this._mcMask = value; }\n    _mcMask = true;\n\n    @Input()\n    get mcMaskClosable() { return this._mcMaskClosable; }\n    set mcMaskClosable(value) { this._mcMaskClosable = value; }\n    _mcMaskClosable = true;\n\n    @Input() mcMaskStyle: object;\n    @Input() mcBodyStyle: object;\n\n    // Trigger when modal open(visible) after animations\n    @Output() mcAfterOpen = new EventEmitter<void>();\n    // Trigger when modal leave-animation over\n    @Output() mcAfterClose = new EventEmitter<R>();\n\n    // --- Predefined OK & Cancel buttons\n    @Input() mcOkText: string;\n    @Input() mcOkType = 'primary';\n\n    @Input()\n    get mcOkLoading() { return this._mcOkLoading; }\n    set mcOkLoading(value) { this._mcOkLoading = value; }\n    _mcOkLoading = false;\n\n    @Input() @Output() mcOnOk: EventEmitter<T> | OnClickCallback<T> = new EventEmitter<T>();\n    // Only aim to focus the ok button that needs to be auto focused\n    @ViewChild('autoFocusButtonOk', {read: ElementRef}) autoFocusButtonOk: ElementRef;\n    @Input() mcCancelText: string;\n\n    @Input()\n    get mcCancelLoading() { return this._mcCancelLoading; }\n    set mcCancelLoading(value) { this._mcCancelLoading = value; }\n    _mcCancelLoading = false;\n\n    @Input() @Output() mcOnCancel: EventEmitter<T> | OnClickCallback<T> = new EventEmitter<T>();\n    @ViewChild('modalContainer') modalContainer: ElementRef;\n    @ViewChild('bodyContainer', {read: ViewContainerRef}) bodyContainer: ViewContainerRef;\n    maskAnimationClassMap: object;\n    modalAnimationClassMap: object;\n    // The origin point that animation based on\n    transformOrigin = '0px 0px 0px';\n\n    // Observable alias for mcAfterOpen\n    get afterOpen(): Observable<void> {\n        return this.mcAfterOpen.asObservable();\n    }\n\n    // Observable alias for mcAfterClose\n    get afterClose(): Observable<R> {\n        return this.mcAfterClose.asObservable();\n    }\n\n    get okText(): string {\n        return this.mcOkText;\n    }\n\n    get cancelText(): string {\n        return this.mcCancelText;\n    }\n\n    // Indicate whether this dialog should hidden\n    get hidden(): boolean {\n        return !this.mcVisible && !this.animationState;\n    }\n\n    // Handle the reference when using mcContent as Component\n    private contentComponentRef: ComponentRef<T>;\n    // Current animation state\n    private animationState: AnimationState;\n    private container: HTMLElement | OverlayRef;\n\n    constructor(\n        private overlay: Overlay,\n        private renderer: Renderer2,\n        private cfr: ComponentFactoryResolver,\n        private elementRef: ElementRef,\n        private viewContainer: ViewContainerRef,\n        private mcMeasureScrollbarService: McMeasureScrollbarService,\n        private modalControl: McModalControlService,\n        private changeDetector: ChangeDetectorRef,\n        @Inject(DOCUMENT) private document: any) {\n\n        super();\n    }\n\n    @Input() mcGetContainer: HTMLElement | OverlayRef | (() => HTMLElement | OverlayRef) = () => this.overlay.create();\n\n    ngOnInit() {\n\n        // Create component along without View\n        if (this.isComponent(this.mcContent)) {\n            this.createDynamicComponent(this.mcContent as Type<T>);\n        }\n\n        // Setup default button options\n        if (this.isModalButtons(this.mcFooter)) {\n            this.mcFooter = this.formatModalButtons(this.mcFooter as IModalButtonOptions<T>[]);\n        }\n\n        // Place the modal dom to elsewhere\n        this.container = typeof this.mcGetContainer === 'function' ? this.mcGetContainer() : this.mcGetContainer;\n        if (this.container instanceof HTMLElement) {\n            this.container.appendChild(this.elementRef.nativeElement);\n        } else if (this.container instanceof OverlayRef) {\n            // NOTE: only attach the dom to overlay, the view container is not changed actually\n            this.container.overlayElement.appendChild(this.elementRef.nativeElement);\n        }\n\n        // Register modal when afterOpen/afterClose is stable\n        this.modalControl.registerModal(this);\n    }\n\n    // [NOTE] NOT available when using by service!\n    // Because ngOnChanges never be called when using by service,\n    // here we can't support \"mcContent\"(Component) etc. as inputs that initialized dynamically.\n    // BUT: User also can change \"mcContent\" dynamically to trigger UI changes\n    // (provided you don't use \bComponent that needs initializations)\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.mcVisible) {\n            // Do not trigger animation while initializing\n            this.handleVisibleStateChange(this.mcVisible, !changes.mcVisible.firstChange);\n        }\n    }\n\n    ngAfterViewInit() {\n        // If using Component, it is the time to attach View while bodyContainer is ready\n        if (this.contentComponentRef) {\n            this.bodyContainer.insert(this.contentComponentRef.hostView);\n        }\n\n        if (this.autoFocusButtonOk) {\n            (this.autoFocusButtonOk.nativeElement as HTMLButtonElement).focus();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.container instanceof OverlayRef) {\n            this.container.dispose();\n        }\n    }\n\n    open() {\n        this.changeVisibleFromInside(true);\n    }\n\n    close(result?: R) {\n        this.changeVisibleFromInside(false, result);\n    }\n\n    // Destroy equals Close\n    destroy(result?: R) {\n        this.close(result);\n    }\n\n    triggerOk() {\n        this.onClickOkCancel('ok');\n    }\n\n    triggerCancel() {\n        this.onClickOkCancel('cancel');\n    }\n\n    getInstance(): McModalComponent {\n        return this;\n    }\n\n    getContentComponentRef(): ComponentRef<T> {\n        return this.contentComponentRef;\n    }\n\n    getContentComponent(): T {\n        return this.contentComponentRef && this.contentComponentRef.instance;\n    }\n\n    getElement(): HTMLElement {\n        return this.elementRef && this.elementRef.nativeElement;\n    }\n\n    onClickMask($event: MouseEvent) {\n        if (\n            this.mcMask &&\n            this.mcMaskClosable &&\n            ($event.target as HTMLElement).classList.contains('mc-modal-wrap') &&\n            this.mcVisible\n        ) {\n            this.onClickOkCancel('cancel');\n        }\n    }\n\n    // tslint:disable-next-line\n    isModalType(type: ModalType): boolean {\n        return this.mcModalType === type;\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n\n        if (event.keyCode === ESCAPE && this.container && (this.container instanceof OverlayRef)) {\n\n            this.close();\n            event.preventDefault();\n        }\n    }\n\n    // AoT\n    onClickCloseBtn() {\n        if (this.mcVisible) {\n            this.onClickOkCancel('cancel');\n        }\n    }\n\n    // AoT\n    // tslint:disable-next-line\n    onClickOkCancel(type: 'ok' | 'cancel') {\n        const trigger = { ok: this.mcOnOk, cancel: this.mcOnCancel }[type];\n        const loadingKey = { ok: 'mcOkLoading', cancel: 'mcCancelLoading' }[type];\n\n        if (trigger instanceof EventEmitter) {\n            trigger.emit(this.getContentComponent());\n        } else if (typeof trigger === 'function') {\n\n            const result = trigger(this.getContentComponent());\n            // Users can return \"false\" to prevent closing by default\n            const caseClose = (doClose: boolean | void | {}) => (doClose !== false) && this.close(doClose as R);\n\n            if (isPromise(result)) {\n                this[loadingKey] = true;\n                const handleThen = (doClose) => {\n                    this[loadingKey] = false;\n                    caseClose(doClose);\n                };\n                (result as Promise<void>).then(handleThen).catch(handleThen);\n            } else {\n                caseClose(result);\n            }\n        }\n    }\n\n    // AoT\n    isNonEmptyString(value: {}): boolean {\n        return typeof value === 'string' && value !== '';\n    }\n\n    // AoT\n    isTemplateRef(value: {}): boolean {\n        return value instanceof TemplateRef;\n    }\n\n    // AoT\n    isComponent(value: {}): boolean {\n        return value instanceof Type;\n    }\n\n    // AoT\n    isModalButtons(value: {}): boolean {\n        return Array.isArray(value) && value.length > 0;\n    }\n\n    // Do rest things when visible state changed\n    private handleVisibleStateChange(visible: boolean, animation: boolean = true, closeResult?: R): Promise<any> {\n        // Hide scrollbar at the first time when shown up\n        if (visible) {\n            this.changeBodyOverflow(1);\n        }\n\n        return Promise\n            .resolve(animation && this.animateTo(visible))\n            // Emit open/close event after animations over\n            .then(() => {\n                if (visible) {\n                    this.mcAfterOpen.emit();\n                } else {\n                    this.mcAfterClose.emit(closeResult);\n                    // Show/hide scrollbar when animation is over\n                    this.changeBodyOverflow();\n                }\n            });\n    }\n\n    // Lookup a button's property, if the prop is a function, call & then return the result, otherwise, return itself.\n    // AoT\n    // tslint:disable-next-line\n    getButtonCallableProp(options: IModalButtonOptions<T>, prop: string): {} {\n        const value = options[prop];\n        const args: any[] = [];\n        if (this.contentComponentRef) {\n            args.push(this.contentComponentRef.instance);\n        }\n\n        return typeof value === 'function' ? value.apply(options, args) : value;\n    }\n\n    // On mcFooter's modal button click\n    // AoT\n    // tslint:disable-next-line\n    onButtonClick(button: IModalButtonOptions<T>) {\n        // Call onClick directly\n        const result = this.getButtonCallableProp(button, 'onClick');\n        if (isPromise(result)) {\n            button.loading = true;\n            (result as Promise<{}>).then(() => button.loading = false).catch(() => button.loading = false);\n        }\n    }\n\n    // Change mcVisible from inside\n    private changeVisibleFromInside(visible: boolean, closeResult?: R): Promise<void> {\n        if (this.mcVisible !== visible) {\n            // Change mcVisible value immediately\n            this.mcVisible = visible;\n            this.mcVisibleChange.emit(visible);\n\n            return this.handleVisibleStateChange(visible, true, closeResult);\n        }\n\n        return Promise.resolve();\n    }\n\n    private changeAnimationState(state: AnimationState) {\n        this.animationState = state;\n        if (state) {\n            this.maskAnimationClassMap = {\n                [`fade-${state}`]: true,\n                [`fade-${state}-active`]: true\n            };\n            this.modalAnimationClassMap = {\n                [`zoom-${state}`]: true,\n                [`zoom-${state}-active`]: true\n            };\n        } else {\n            // @ts-ignore\n            this.maskAnimationClassMap = this.modalAnimationClassMap = null;\n        }\n\n        if (this.contentComponentRef) {\n            this.contentComponentRef.changeDetectorRef.markForCheck();\n        } else {\n            this.changeDetector.markForCheck();\n        }\n    }\n\n    private animateTo(isVisible: boolean): Promise<any> {\n        // Figure out the lastest click position when shows up\n        if (isVisible) {\n            // [NOTE] Using timeout due to the document.click event is fired later than visible change,\n            // so if not postponed to next event-loop, we can't get the lastest click position\n            window.setTimeout(() => this.updateTransformOrigin());\n        }\n\n        this.changeAnimationState(isVisible ? 'enter' : 'leave');\n\n        // Return when animation is over\n        return new Promise((resolve) => window.setTimeout(() => {\n            this.changeAnimationState(null);\n            resolve();\n        }, MODAL_ANIMATE_DURATION));\n    }\n\n    private formatModalButtons(buttons: IModalButtonOptions<T>[]): IModalButtonOptions<T>[] {\n        return buttons.map((button) => {\n\n            return {\n                ...{\n                    type: 'default',\n                    size: 'default',\n                    autoLoading: true,\n                    show: true,\n                    loading: false,\n                    disabled: false\n                },\n                ...button\n            };\n        });\n    }\n\n    /**\n     * Create a component dynamically but not attach to any View\n     * (this action will be executed when bodyContainer is ready)\n     * @param component Component class\n     */\n    private createDynamicComponent(component: Type<T>) {\n        const factory = this.cfr.resolveComponentFactory(component);\n        const childInjector = Injector.create({\n            providers: [{provide: McModalRef, useValue: this}],\n            parent: this.viewContainer.parentInjector\n        });\n\n        this.contentComponentRef = factory.create(childInjector);\n\n        if (this.mcComponentParams) {\n            Object.assign(this.contentComponentRef.instance, this.mcComponentParams);\n        }\n\n        // Do the first change detection immediately\n        // (or we do detection at ngAfterViewInit, multi-changes error will be thrown)\n        this.contentComponentRef.changeDetectorRef.detectChanges();\n\n\n    }\n\n    // Update transform-origin to the last click position on document\n    private updateTransformOrigin() {\n        const modalElement = this.modalContainer.nativeElement as HTMLElement;\n        const lastPosition = ModalUtil.getLastClickPosition();\n\n        if (lastPosition) {\n            // tslint:disable-next-line\n            this.transformOrigin = `${lastPosition.x - modalElement.offsetLeft}px ${lastPosition.y - modalElement.offsetTop}px 0px`;\n        }\n    }\n\n    /**\n     * Take care of the body's overflow to decide the existense of scrollbar\n     * @param plusNum The number that the openModals.length will increase soon\n     */\n    private changeBodyOverflow(plusNum: number = 0) {\n        const openModals = this.modalControl.openModals;\n\n        if (openModals.length + plusNum > 0) {\n            // tslint:disable-next-line\n            this.renderer.setStyle(this.document.body, 'padding-right', `${this.mcMeasureScrollbarService.scrollBarWidth}px`);\n            this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n        } else {\n            this.renderer.removeStyle(this.document.body, 'padding-right');\n            this.renderer.removeStyle(this.document.body, 'overflow');\n        }\n    }\n}\n\n////////////\n\nfunction isPromise(obj: {} | void): boolean {\n    // tslint:disable-next-line\n    return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof (obj as Promise<{}>).then === 'function' && typeof (obj as Promise<{}>).catch === 'function';\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n\n@Pipe({\n    name: 'toCssUnit'\n})\nexport class CssUnitPipe implements PipeTransform {\n    transform(value: number | string, defaultUnit: string = 'px'): string {\n        const formatted = +value;\n\n        return isNaN(formatted) ? `${value}` : `${formatted}${defaultUnit}`;\n    }\n}\n","import { ComponentRef, Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { Overlay, OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal } from '@ptsecurity/cdk/portal';\n\nimport { McModalControlService } from './modal-control.service';\nimport { McModalRef } from './modal-ref.class';\nimport { McModalComponent } from './modal.component';\nimport { ConfirmType, IModalOptions, IModalOptionsForService } from './modal.type';\n\n\n// A builder used for managing service creating modals\nexport class ModalBuilderForService {\n\n    // Modal ComponentRef, \"null\" means it has been destroyed\n    private modalRef: ComponentRef<McModalComponent>;\n    private overlayRef: OverlayRef;\n\n    constructor(private overlay: Overlay, options: IModalOptionsForService = {}) {\n        this.createModal();\n\n        if (!('mcGetContainer' in options)) {\n            options.mcGetContainer = null;\n        }\n\n        this.changeProps(options);\n        this.modalRef.instance.open();\n        this.modalRef.instance.mcAfterClose.subscribe(() => this.destroyModal());\n\n        this.overlayRef.keydownEvents()\n            // @ts-ignore\n            .pipe(filter((event: KeyboardEvent) => {\n                return event.keyCode === ESCAPE && options.mcCloseByESC;\n            }))\n            .subscribe(() => this.modalRef.instance.close());\n    }\n\n    getInstance(): McModalComponent {\n        return this.modalRef && this.modalRef.instance;\n    }\n\n    destroyModal(): void {\n        if (this.modalRef) {\n            this.overlayRef.dispose();\n            // @ts-ignore\n            this.modalRef = null;\n        }\n    }\n\n    private changeProps(options: IModalOptions): void {\n        if (this.modalRef) {\n            // here not limit user's inputs at runtime\n            Object.assign(this.modalRef.instance, options);\n        }\n    }\n\n    // Create component to ApplicationRef\n    private createModal(): void {\n        this.overlayRef = this.overlay.create();\n        this.modalRef = this.overlayRef.attach(new ComponentPortal(McModalComponent));\n    }\n}\n\n@Injectable()\nexport class McModalService {\n    // Track of the current close modals (we assume invisible is close this time)\n    get openModals(): McModalRef[] {\n        return this.modalControl.openModals;\n    }\n\n    get afterAllClose(): Observable<void> {\n        return this.modalControl.afterAllClose.asObservable();\n    }\n\n    constructor(\n        private overlay: Overlay,\n        private modalControl: McModalControlService) {\n    }\n\n    // Closes all of the currently-open dialogs\n    closeAll(): void {\n        this.modalControl.closeAll();\n    }\n\n    create<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n\n        if (typeof options.mcOnCancel !== 'function') {\n            // Leave a empty function to close this modal by default\n            // tslint:disable-next-line\n            options.mcOnCancel = () => {};\n        }\n\n        if (!('mcCloseByESC' in options)) {\n            options.mcCloseByESC = true;\n        }\n\n\n        if (!('mcWidth' in options)) {\n            // tslint:disable-next-line\n            options.mcWidth = 480;\n        }\n\n        return new ModalBuilderForService(this.overlay, options).getInstance();\n    }\n\n    confirm<T>(options: IModalOptionsForService<T> = {}, confirmType: ConfirmType = 'confirm'): McModalRef<T> {\n        if ('mcFooter' in options) {\n            console.warn(`The Confirm-Modal doesn't support \"mcFooter\", this property will be ignored.`);\n        }\n\n        // NOTE: only support function currently by calling confirm()\n        if (typeof options.mcOnOk !== 'function') {\n            // Leave a empty function to close this modal by default\n            // tslint:disable-next-line\n            options.mcOnOk = () => {};\n        }\n\n        options.mcModalType = 'confirm';\n        options.mcClassName = `mc-confirm mc-confirm-${confirmType} ${options.mcClassName || ''}`;\n        options.mcMaskClosable = false;\n\n        return this.create(options);\n    }\n\n    success<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n        return this.simpleConfirm(options, 'success');\n    }\n\n    delete<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n        return this.simpleConfirm(options, 'warn');\n    }\n\n    private simpleConfirm<T>(options: IModalOptionsForService<T> = {}, confirmType: ConfirmType): McModalRef<T> {\n        // Remove the Cancel button if the user not specify a Cancel button\n        if (!('mcCancelText' in options)) {\n            // @ts-ignore\n            options.mcCancelText = null;\n        }\n\n        return this.confirm(options, confirmType);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { McButtonModule } from '@ptsecurity/mosaic/button';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { CssUnitPipe } from './css-unit.pipe';\nimport { McModalControlService } from './modal-control.service';\nimport { McModalComponent } from './modal.component';\nimport { McModalService } from './modal.service';\n\n\n@NgModule({\n    imports: [ CommonModule, OverlayModule, McButtonModule, McIconModule ],\n    exports: [ McModalComponent ],\n    declarations: [ McModalComponent, CssUnitPipe ],\n    entryComponents: [ McModalComponent ],\n    providers: [ McModalControlService, McModalService ]\n})\nexport class McModalModule { }\n","import { fromEvent, Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nimport {\n    AfterViewInit,\n    Component, Directive,\n    ElementRef,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    ViewEncapsulation,\n    ContentChild,\n    TemplateRef,\n    ChangeDetectorRef,\n    ChangeDetectionStrategy,\n    ViewChild\n} from '@angular/core';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { SPACE } from '@ptsecurity/cdk/keycodes';\nimport { Platform } from '@ptsecurity/cdk/platform';\nimport { CanDisable, CanDisableCtor, mixinDisabled } from '@ptsecurity/mosaic/core';\n\n\nconst COLLAPSED_CLASS: string = 'mc-navbar-collapsed-title';\nconst MC_ICON = 'mc-icon';\nconst MC_NAVBAR = 'mc-navbar';\nconst MC_NAVBAR_CONTAINER = 'mc-navbar-container';\nconst MC_NAVBAR_ITEM = 'mc-navbar-item';\nconst MC_NAVBAR_BRAND = 'mc-navbar-brand';\nconst MC_NAVBAR_TITLE = 'mc-navbar-title';\nconst MC_NAVBAR_LOGO = 'mc-navbar-logo';\n\nexport type McNavbarContainerPositionType = 'left' | 'right';\n\nexport interface IMcNavbarDropdownItem {\n    link?: string;\n    text: string;\n}\n\n@Directive({\n    selector: MC_NAVBAR_LOGO,\n    host: {\n        class: MC_NAVBAR_LOGO\n    }\n})\nexport class McNavbarLogo {}\n\n@Directive({\n    selector: MC_NAVBAR_BRAND,\n    host: {\n        class: MC_NAVBAR_BRAND\n    }\n})\nexport class McNavbarBrand {}\n\n@Directive({\n    selector: MC_NAVBAR_TITLE,\n    host: {\n        class: MC_NAVBAR_TITLE\n    }\n})\nexport class McNavbarTitle {}\n\nexport class McNavbarItemBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McNavbarMixinBase: CanDisableCtor & typeof McNavbarItemBase = mixinDisabled(McNavbarItemBase);\n\n@Component({\n    selector: MC_NAVBAR_ITEM,\n    template: `\n        <a\n            [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\n            (click)=\"handleClickByItem()\"\n            (keydown)=\"handleKeydown($event)\"\n            class=\"mc-navbar-item\"\n        >\n            <ng-content></ng-content>\n            <i *ngIf=\"hasDropdownContent\" mc-icon=\"mc-angle-M_16\"></i>\n        </a>\n        <ul\n            #dropdownContent\n            *ngIf=\"hasDropdownContent\"\n            [ngClass]=\"{ 'is-collapsed': isCollapsed }\"\n            class=\"mc-navbar-dropdown\"\n        >\n            <li\n                *ngFor=\"let item of dropdownItems\"\n                (click)=\"handleClickByDropdownItem()\"\n                class=\"mc-navbar-dropdown-item\"\n            >\n                <ng-container *ngIf=\"dropdownItemTmpl\">\n                    <ng-container *ngTemplateOutlet=\"dropdownItemTmpl; context: { $implicit: item }\"></ng-container>\n                </ng-container>\n                <a\n                    *ngIf=\"!dropdownItemTmpl\"\n                    [attr.href]=\"item.link\"\n                    [ngClass]=\"{ 'is-active': isActiveDropdownLink(item.link) }\"\n                    class=\"mc-navbar-dropdown-link\"\n                >{{ item.text }}</a>\n            </li>\n        </ul>\n    `,\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': '-1'\n    }\n})\nexport class McNavbarItem extends _McNavbarMixinBase implements OnInit, AfterViewInit, OnDestroy, CanDisable {\n\n    @Input()\n    tabIndex: number = 0;\n\n    @Input()\n    dropdownItems: IMcNavbarDropdownItem[] = [];\n\n    @Input()\n    set collapsedTitle(value: string) {\n        this.elementRef.nativeElement.setAttribute('computedTitle', encodeURI(value));\n    }\n\n    @ContentChild('dropdownItemTmpl', { read: TemplateRef })\n    dropdownItemTmpl: TemplateRef<IMcNavbarDropdownItem>;\n\n    @ViewChild('dropdownContent', { read: ElementRef })\n    dropdownContent: ElementRef;\n\n    get hasDropdownContent() {\n        return this.dropdownItems.length > 0;\n    }\n\n    isCollapsed: boolean = true;\n\n    private _subscription: Subscription = new Subscription();\n    private _focusMonitor$: Observable<FocusOrigin>;\n\n    private get _dropdownElements(): HTMLElement[] {\n        return this.dropdownContent ? this.dropdownContent.nativeElement.querySelectorAll('li > *') : [];\n    }\n\n    constructor(\n        public  elementRef: ElementRef,\n        private _focusMonitor: FocusMonitor,\n        private _platform: Platform,\n        private _cdRef: ChangeDetectorRef\n    ) {\n        super(elementRef);\n    }\n\n    ngOnInit() {\n        this.denyClickIfDisabled();\n\n        this._focusMonitor$ = this._focusMonitor.monitor(this.elementRef.nativeElement, true);\n\n        if (this.hasDropdownContent) {\n            this.listenClickOutside();\n        }\n    }\n\n    ngAfterViewInit() {\n        if (!this.hasDropdownContent) {\n            return;\n        }\n\n        this.startListenFocusDropdownItems();\n    }\n\n    ngOnDestroy() {\n        this._subscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n        this.stopListenFocusDropdownItems();\n    }\n\n    isActiveDropdownLink(link: string): boolean {\n        if (!this._platform.isBrowser) {\n            return false;\n        }\n\n        return window.location.href.indexOf(link) >= 0;\n    }\n\n    handleClickByItem() {\n        this.toggleDropdown();\n    }\n\n    handleKeydown($event: KeyboardEvent) {\n        const isNavbarItem = ($event.target as HTMLElement).classList.contains(MC_NAVBAR_ITEM);\n\n        // tslint:disable-next-line\n        if (this.hasDropdownContent && $event.keyCode === SPACE && isNavbarItem) {\n            this.toggleDropdown();\n        }\n    }\n\n    handleClickByDropdownItem() {\n        this.forceCloseDropdown();\n    }\n\n    private listenClickOutside() {\n        this._subscription.add(\n            this._focusMonitor$.subscribe((origin) => {\n                if (origin === null) {\n                    this.forceCloseDropdown();\n                }\n            })\n        );\n    }\n\n    private toggleDropdown() {\n        this.isCollapsed = !this.isCollapsed;\n    }\n\n    private forceCloseDropdown() {\n        this.isCollapsed = true;\n        this._cdRef.detectChanges();\n    }\n\n    private startListenFocusDropdownItems() {\n        this._dropdownElements.forEach((el) => {\n            this._focusMonitor.monitor(el, true);\n        });\n    }\n\n    private stopListenFocusDropdownItems() {\n        this._dropdownElements.forEach((el) => {\n            this._focusMonitor.stopMonitoring(el);\n        });\n    }\n\n    // This method is required due to angular 2 issue https://github.com/angular/angular/issues/11200\n    private denyClickIfDisabled() {\n        const events: Event[] = this.elementRef.nativeElement.eventListeners('click');\n\n        events.forEach((event) => this.elementRef.nativeElement.removeEventListener('click', event));\n\n        this.elementRef.nativeElement.addEventListener('click', (event: MouseEvent) => {\n            if (this.elementRef.nativeElement.hasAttribute('disabled')) {\n                event.stopImmediatePropagation();\n            }\n        }, true);\n\n        events.forEach((event) => this.elementRef.nativeElement.addEventListener('click', event));\n    }\n}\n\n@Directive({\n    selector: MC_NAVBAR_CONTAINER\n})\nexport class McNavbarContainer {\n    @Input()\n    position: McNavbarContainerPositionType = 'left';\n\n    @HostBinding('class')\n    get cssClasses(): string {\n        return this.position === 'left' ? 'mc-navbar-left' : 'mc-navbar-right';\n    }\n}\n\nclass CollapsibleItem {\n    private _collapsed: boolean = false;\n\n    constructor(\n        public element: HTMLElement,\n        public width: number\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        this._collapsed = collapsed;\n\n        this.updateCollapsedClass();\n    }\n\n    private updateCollapsedClass() {\n        if (this._collapsed) {\n            this.element.classList.add(COLLAPSED_CLASS);\n        } else {\n            this.element.classList.remove(COLLAPSED_CLASS);\n        }\n\n    }\n}\n\nclass CachedItemWidth {\n\n    get canCollapse(): boolean {\n        return this.itemsForCollapse.length > 0;\n    }\n\n    private _collapsedItemsWidth: number;\n\n    get collapsedItemsWidth(): number {\n        if (this._collapsedItemsWidth !== undefined) {\n            return this._collapsedItemsWidth;\n        }\n\n        this.calculateAndCacheCollapsedItemsWidth();\n\n        return this._collapsedItemsWidth;\n    }\n\n    constructor(\n        public element: HTMLElement,\n        public width: number,\n        public itemsForCollapse: CollapsibleItem[] = []\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        if (this.itemsForCollapse.length > 0) {\n            this.updateTitle(collapsed);\n        }\n\n        this.itemsForCollapse.forEach((item) => item.processCollapsed(collapsed));\n    }\n\n    private calculateAndCacheCollapsedItemsWidth() {\n        this._collapsedItemsWidth = this.itemsForCollapse\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getTitle(): string {\n        const computedTitle = this.element.getAttribute('computedTitle');\n\n        return computedTitle\n            ? decodeURI(computedTitle)\n            : (this.itemsForCollapse.length > 0 ? this.itemsForCollapse[0].element.innerText : '');\n    }\n\n    private updateTitle(collapsed: boolean) {\n        if (collapsed) {\n            this.element.setAttribute('title', this.getTitle());\n        } else {\n            this.element.removeAttribute('title');\n        }\n    }\n}\n\n\n@Component({\n    selector: MC_NAVBAR,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    template: `\n        <nav class=\"mc-navbar\">\n            <ng-content select=\"[${MC_NAVBAR_CONTAINER}],${MC_NAVBAR_CONTAINER}\"></ng-content>\n        </nav>\n    `,\n    styleUrls: ['./navbar.css'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class McNavbar implements AfterViewInit, OnDestroy {\n\n    private readonly forceRecalculateItemsWidth: boolean = false;\n    private readonly resizeDebounceInterval: number = 100;\n    private readonly firstLevelElement: string = MC_NAVBAR_CONTAINER;\n    private readonly secondLevelElements: string[] = [\n        MC_NAVBAR_ITEM,\n        MC_NAVBAR_BRAND,\n        MC_NAVBAR_TITLE\n    ];\n\n    private _totalItemsWidths: number;\n    private _itemsWidths: CachedItemWidth[];\n\n    private get maxAllowedWidth(): number {\n        return this._elementRef.nativeElement.querySelector('nav').getBoundingClientRect().width;\n    }\n\n    private get itemsWidths(): CachedItemWidth[] {\n        if (this._itemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._itemsWidths;\n        }\n\n        this.calculateAndCacheItemsWidth();\n\n        return this._itemsWidths;\n    }\n\n    private get totalItemsWidth(): number {\n        if (this._totalItemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._totalItemsWidths;\n        }\n\n        this.calculateAndCacheTotalItemsWidth();\n\n        return this._totalItemsWidths;\n    }\n\n    private _resizeSubscription: Subscription;\n\n    constructor(\n        private _elementRef: ElementRef\n    ) {\n        const resizeObserver = fromEvent(window, 'resize')\n            .pipe(debounceTime(this.resizeDebounceInterval));\n\n        this._resizeSubscription = resizeObserver.subscribe(this.updateCollapsed.bind(this));\n    }\n\n    updateCollapsed(): void {\n        let collapseDelta = this.totalItemsWidth - this.maxAllowedWidth;\n\n        for (let i = this.itemsWidths.length - 1; i >= 0; i--) {\n            const item = this.itemsWidths[i];\n\n            if (!item.canCollapse) {\n                continue;\n            }\n\n            item.processCollapsed(collapseDelta > 0);\n            collapseDelta -= item.collapsedItemsWidth;\n        }\n    }\n\n    ngAfterViewInit(): void {\n        // Note: this wait is required for loading and rendering fonts for icons;\n        // unfortunately we cannot control font rendering\n        setTimeout(() => this.updateCollapsed(), 0);\n    }\n\n    ngOnDestroy() {\n        this._resizeSubscription.unsubscribe();\n    }\n\n    private calculateAndCacheTotalItemsWidth() {\n        this._totalItemsWidths = this.itemsWidths\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getOuterElementWidth(element: HTMLElement): number {\n        const baseWidth  = element.getBoundingClientRect().width;\n        const marginRight = parseInt(getComputedStyle(element).getPropertyValue('margin-right'));\n        const marginLeft = parseInt(getComputedStyle(element).getPropertyValue('margin-left'));\n\n        return baseWidth + marginRight + marginLeft;\n    }\n\n    private calculateAndCacheItemsWidth() {\n        const allItemsSelector = this.secondLevelElements\n            .map((e: string) => `${this.firstLevelElement}>${e}`);\n        const allItems: HTMLElement[] = Array.from(this._elementRef.nativeElement.querySelectorAll(allItemsSelector));\n\n        this._itemsWidths = allItems\n            .map((el) => new CachedItemWidth(el, this.getOuterElementWidth(el), this.getItemsForCollapse(el)));\n    }\n\n    private getItemsForCollapse(element: HTMLElement): CollapsibleItem[] {\n        const icon = element.querySelector(`[${MC_ICON}],${MC_NAVBAR_LOGO},[${MC_NAVBAR_LOGO}]`);\n\n        if (!icon) {\n            return [];\n        }\n\n        return Array.from(element.querySelectorAll(MC_NAVBAR_TITLE))\n            .map((el) => new CollapsibleItem(<HTMLElement> el, el.getBoundingClientRect().width));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport {\n    McNavbar,\n    McNavbarContainer,\n    McNavbarItem,\n    McNavbarTitle,\n    McNavbarBrand,\n    McNavbarLogo\n} from './navbar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        McIconModule\n    ],\n    exports: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ],\n    declarations: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ]\n})\nexport class McNavbarModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, CanColorCtor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressBarMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressBarBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressBarMixinBase:\n    CanColorCtor &\n    typeof McProgressBarBase =\n        mixinColor(McProgressBarBase);\n\n@Component({\n    selector: 'mc-progress-bar',\n    templateUrl: './progress-bar.component.html',\n    styleUrls: ['./progress-bar.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-bar',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressBar extends _McProgressBarMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-bar-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressBarMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McProgressBar\n} from './progress-bar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressBar\n    ],\n    declarations: [\n        McProgressBar\n    ]\n})\nexport class McProgressBarModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, CanColorCtor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressSpinnerBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressSpinnerMixinBase:\n    CanColorCtor &\n    typeof McProgressSpinnerBase =\n        mixinColor(McProgressSpinnerBase);\n\nconst MAX_DASH_ARRAY = 273;\n\n@Component({\n    selector: 'mc-progress-spinner',\n    templateUrl: './progress-spinner.component.html',\n    styleUrls: ['./progress-spinner.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-spinner',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressSpinner extends _McProgressSpinnerMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-spinner-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressSpinnerMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n\n    get dashOffsetPercent(): string {\n        return `${MAX_DASH_ARRAY - this.percentage * MAX_DASH_ARRAY}%`;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McProgressSpinner } from './progress-spinner.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressSpinner\n    ],\n    declarations: [\n        McProgressSpinner\n    ]\n})\nexport class McProgressSpinnerModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    EventEmitter,\n    Host,\n    Input,\n    OnInit,\n    Optional,\n    Output\n} from '@angular/core';\nimport { toBoolean } from '@ptsecurity/mosaic/core';\n\nimport { McLayoutComponent } from './layout.component';\n\n\n@Component({\n    selector: 'mc-sidebar',\n    preserveWhitespaces: false,\n    templateUrl: './sidebar.component.html',\n    host: {\n        '[class.mc-layout-sidebar]': 'true',\n        '[class.mc-layout-sidebar-collapsed]': 'mcCollapsed',\n        '[style.flex]': 'mcFlex',\n        '[style.max-width.px]': 'mcWidth',\n        '[style.min-width.px]': 'mcWidth',\n        '[style.width.px]': 'mcWidth'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McSidebarComponent implements OnInit {\n\n    @Input() _mcWidth = 200;\n    @Input() mcCollapsedWidth = 80;\n\n    @Input()\n    set mcCollapsible(value: boolean) {\n        this.collapsible = toBoolean(value);\n    }\n\n    get mcCollapsible(): boolean {\n        return this.collapsible;\n    }\n\n    @Input()\n    set mcCollapsed(value: boolean) {\n        this.collapsed = toBoolean(value);\n    }\n\n    get mcCollapsed(): boolean {\n        return this.collapsed;\n    }\n\n    // tslint:disable-next-line\n    @Output() mcCollapsedChange = new EventEmitter();\n\n    private collapsed = false;\n    private collapsible = false;\n\n    get mcFlex(): string {\n        if (this.mcCollapsed) {\n            return `0 0 ${this.mcCollapsedWidth}px`;\n        } else {\n            return `0 0 ${this.mcWidth}px`;\n        }\n    }\n\n    get mcWidth(): number {\n        if (this.mcCollapsed) {\n            return this.mcCollapsedWidth;\n        } else {\n            return this._mcWidth;\n        }\n    }\n\n    constructor(\n        @Optional() @Host() private mcLayoutComponent: McLayoutComponent) {\n    }\n\n    ngOnInit() {\n        if (this.mcLayoutComponent) {\n            this.mcLayoutComponent.hasSidebar = true;\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McContentComponent } from './content.component';\nimport { McFooterComponent } from './footer.component';\nimport { McHeaderComponent } from './header.component';\nimport { McLayoutComponent } from './layout.component';\nimport { McSidebarComponent } from './sidebar.component';\n\n\n@NgModule({\n    imports: [ CommonModule ],\n    exports: [\n        McLayoutComponent,\n        McContentComponent,\n        McFooterComponent,\n        McHeaderComponent,\n        McSidebarComponent\n    ],\n    declarations: [\n        McLayoutComponent,\n        McContentComponent,\n        McFooterComponent,\n        McHeaderComponent,\n        McSidebarComponent\n    ]\n})\nexport class McLayoutModule {\n}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    Output,\n    QueryList,\n    ViewEncapsulation,\n    ChangeDetectorRef,\n    Inject,\n    OnDestroy,\n    OnInit,\n    ViewChild\n} from '@angular/core';\n\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { Subscription } from 'rxjs';\n\nimport { FocusKeyManager, IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { END, ENTER, HOME, PAGE_DOWN, PAGE_UP, SPACE } from '@ptsecurity/cdk/keycodes';\n\nimport {\n    McLine,\n    McLineSetter,\n    CanDisable,\n    mixinDisabled,\n    toBoolean, CanDisableCtor\n} from '@ptsecurity/mosaic/core';\n\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n    exportAs: 'mcListOption',\n    selector: 'mc-list-option',\n    host: {\n        tabindex: '-1',\n\n        class: 'mc-list-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': '_hasFocus',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()',\n        '(click)': '_handleClick()'\n    },\n    templateUrl: 'list-option.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListOption implements AfterContentInit, OnDestroy, OnInit, IFocusableOption {\n    _hasFocus: boolean = false;\n\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    @ViewChild('text') _text: ElementRef;\n\n    // Whether the label should appear before or after the checkbox. Defaults to 'after'\n    @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n    @Input() value: any;\n\n    @Input()\n    get disabled() {\n        return this._disabled || (this.listSelection && this.listSelection.disabled);\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    @Input()\n    get selected(): boolean {\n        return this.listSelection.selectedOptions && this.listSelection.selectedOptions.isSelected(this) || false;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            this.listSelection._reportValueChange();\n        }\n    }\n\n    private _lineSetter: McLineSetter;\n    private _selected = false;\n    private _disabled = false;\n\n    constructor(\n        private _element: ElementRef,\n        private _changeDetector: ChangeDetectorRef,\n        @Inject(forwardRef(() => McListSelection))\n        public listSelection: McListSelection\n    ) {}\n\n    ngOnInit() {\n        if (this._selected) {\n            // List options that are selected at initialization can't be reported properly to the form\n            // control. This is because it takes some time until the selection-list knows about all\n            // available options. Also it can happen that the ControlValueAccessor has an initial value\n            // that should be used instead. Deferring the value change report to the next tick ensures\n            // that the form control value is not being overwritten.\n            const wasSelected = this._selected;\n\n            Promise.resolve().then(() => {\n                if (this._selected || wasSelected) {\n                    this.selected = true;\n                    this._changeDetector.markForCheck();\n                }\n            });\n        }\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    ngOnDestroy(): void {\n        if (this.selected) {\n            // We have to delay this until the next tick in order\n            // to avoid changed after checked errors.\n            Promise.resolve().then(() => this.selected = false);\n        }\n\n        this.listSelection._removeOptionFromList(this);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    focus(): void {\n        this._element.nativeElement.focus();\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    getLabel() {\n        return this._text ? this._text.nativeElement.textContent : '';\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.listSelection.selectedOptions) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.listSelection.selectedOptions.select(this);\n        } else {\n            this.listSelection.selectedOptions.deselect(this);\n        }\n\n        this._changeDetector.markForCheck();\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    _handleClick() {\n        if (this.disabled) { return; }\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    _handleFocus() {\n        if (this.disabled || this._hasFocus) { return; }\n\n        this._hasFocus = true;\n    }\n\n    _handleBlur() {\n        this._hasFocus = false;\n\n        this.listSelection._onTouched();\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n\n\nexport const MC_SELECTION_LIST_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McListSelection),\n    multi: true\n};\n\n// Change event that is being fired whenever the selected state of an option changes. */\nexport class McListSelectionChange {\n    constructor(\n        // Reference to the selection list that emitted the event.\n        public source: McListSelection,\n        // Reference to the option that has been changed.\n        public option: McListOption\n    ) {}\n}\n\n\nexport class McListSelectionBase {}\n\nexport const _McListSelectionMixinBase: CanDisableCtor & typeof McListSelectionBase\n    = mixinDisabled(McListSelectionBase);\n\n@Component({\n    exportAs: 'mcListSelection',\n    selector: 'mc-list-selection',\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'tabIndex'],\n    host: {\n        class: 'mc-list-selection',\n        '[tabIndex]': 'tabIndex',\n        '(focus)': 'focus()',\n        '(blur)': '_onTouched()',\n        '(keydown)': '_onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    providers: [MC_SELECTION_LIST_VALUE_ACCESSOR],\n    preserveWhitespaces: false\n})\nexport class McListSelection extends _McListSelectionMixinBase implements\n    IFocusableOption, CanDisable, AfterContentInit, ControlValueAccessor {\n\n    _keyManager: FocusKeyManager<McListOption>;\n\n    // The option components contained within this selection-list.\n    @ContentChildren(McListOption) options: QueryList<McListOption>;\n\n    tabIndex: number;\n\n    autoSelect: boolean;\n    noUnselect: boolean;\n    multiple: boolean;\n\n    // todo temporary solution\n    withShift: boolean;\n    withCtrl: boolean;\n\n    @Input() horizontal: boolean = false;\n\n    // Emits a change event whenever the selected state of an option changes.\n    @Output() readonly selectionChange: EventEmitter<McListSelectionChange> = new EventEmitter<McListSelectionChange>();\n\n    selectedOptions: SelectionModel<McListOption>;\n\n    // Used for storing the values that were assigned before the options were initialized.\n    private _tempValues: string[] | null;\n\n    private _modelChanges = Subscription.EMPTY;\n\n    constructor(\n        private _element: ElementRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string,\n        @Attribute('multiple') multiple: string\n    ) {\n        super();\n\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.multiple = multiple === null ? true : toBoolean(multiple);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.selectedOptions = new SelectionModel<McListOption>(this.multiple);\n    }\n\n    ngAfterContentInit(): void {\n        this.horizontal = toBoolean(this.horizontal);\n\n        this._keyManager = new FocusKeyManager<McListOption>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation(!this.horizontal)\n            .withHorizontalOrientation(this.horizontal ? 'ltr' : null);\n\n        if (this._tempValues) {\n            this._setOptionsFromValues(this._tempValues);\n            this._tempValues = null;\n        }\n\n        // Sync external changes to the model back to the options.\n        this._modelChanges = this.selectedOptions.onChange!.subscribe((event) => {\n            for (const item of event.added) {\n                item.selected = true;\n            }\n\n            for (const item of event.removed) {\n                item.selected = false;\n            }\n        });\n\n        this.updateScrollSize();\n    }\n\n    ngOnDestroy() {\n        this._modelChanges.unsubscribe();\n    }\n\n    focus() {\n        this._element.nativeElement.focus();\n    }\n\n    selectAll() {\n        this.options.forEach((option) => option.setSelected(true));\n\n        this._reportValueChange();\n    }\n\n    deselectAll() {\n        this.options.forEach((option) => option.setSelected(false));\n\n        this._reportValueChange();\n    }\n\n    updateScrollSize(): void {\n        if (this.horizontal || !this.options.first) { return; }\n\n        this._keyManager.withScrollSize(Math.floor(this._getHeight() / this.options.first._getHeight()));\n    }\n\n    // Sets the focused option of the selection-list.\n    setFocusedOption(option: McListOption): void {\n        this._keyManager.updateActiveItem(option);\n\n        if (this.withShift && this.multiple) {\n            const previousIndex = this._keyManager.previousActiveItemIndex;\n            const activeIndex = this._keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n\n            this.withShift = false;\n        } else if (this.withCtrl) {\n            this.withCtrl = false;\n\n            if (!this._canDeselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) {\n                this.options.forEach((item) => item.setSelected(false));\n                option.setSelected(true);\n            }\n        }\n\n        this._emitChangeEvent(option);\n        this._reportValueChange();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(values: string[]): void {\n        if (this.options) {\n            this._setOptionsFromValues(values || []);\n        } else {\n            this._tempValues = values;\n        }\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this._onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this._onTouched = fn;\n    }\n\n    // Implemented as a part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        if (this.options) {\n            this.options.forEach((option) => option.disabled = isDisabled);\n        }\n    }\n\n    getSelectedOptionValues(): string[] {\n        return this.options.filter((option) => option.selected).map((option) => option.value);\n    }\n\n    // Toggles the selected state of the currently focused option.\n    toggleFocusedOption(): void {\n        const focusedIndex = this._keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n            const focusedOption: McListOption = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this._canDeselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this._emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    _canDeselectLast(listOption: McListOption): boolean {\n        return !(this.noUnselect && this.selectedOptions.selected.length === 1 && listOption.selected);\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    // View to model callback that should be called if the list or its options lost focus.\n    _onTouched: () => void = () => {};\n\n    // Removes an option from the selection list and updates the active item.\n    _removeOptionFromList(option: McListOption) {\n        if (option._hasFocus) {\n            const optionIndex = this._getOptionIndex(option);\n\n            // Check whether the option is the last item\n            if (optionIndex > 0) {\n                this._keyManager.setPreviousItemActive();\n            } else if (optionIndex === 0 && this.options.length > 1) {\n                this._keyManager.setNextItemActive();\n            }\n        }\n    }\n\n    _onKeyDown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n        this.withShift = event.shiftKey;\n        this.withCtrl = event.ctrlKey;\n\n        switch (keyCode) {\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                if (!this.horizontal) { this._keyManager.setPreviousPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                if (!this.horizontal) { this._keyManager.setNextPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    // Reports a value change to the ControlValueAccessor\n    _reportValueChange() {\n        if (this.options) {\n            this._onChange(this.getSelectedOptionValues());\n        }\n    }\n\n    // Emits a change event if the selected state of an option changed.\n    _emitChangeEvent(option: McListOption) {\n        this.selectionChange.emit(new McListSelectionChange(this, option));\n    }\n\n    // Returns the option with the specified value.\n    private _getOptionByValue(value: string): McListOption | undefined {\n        return this.options.find((option) => option.value === value);\n    }\n\n    // Sets the selected options based on the specified values.\n    private _setOptionsFromValues(values: string[]) {\n        this.options.forEach((option) => option.setSelected(false));\n\n        values\n            .map((value) => this._getOptionByValue(value))\n            .filter(Boolean)\n            .forEach((option) => option!.setSelected(true));\n    }\n\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private _isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    // Returns the index of the specified list option.\n    private _getOptionIndex(option: McListOption): number {\n        return this.options.toArray().indexOf(option);\n    }\n\n    // View to model callback that should be called whenever the selected options change.\n    private _onChange: (value: any) => void = (_: any) => {};\n}\n","// todo пока не делаем, перенесено из материала, но у нас в доках таких простых списков нет.\nimport {\n    AfterContentInit, ChangeDetectionStrategy, Component, ContentChildren, Directive, ElementRef, QueryList,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { McLine, McLineSetter } from '@ptsecurity/mosaic/core';\n\n\nexport class McListBase {}\n\n@Component({\n    selector: 'mc-list',\n    host: { class: 'mc-list' },\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McList extends McListBase {}\n\n\n/**\n * Directive whose purpose is to add the mc- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n    selector: '[mc-subheader], [mcSubheader]',\n    host: { class: 'mc-subheader' }\n})\nexport class McListSubheaderCssStyler {}\n\n\n// Boilerplate for applying mixins to McListItem.\nexport class McListItemBase {}\n\n@Component({\n    selector: 'mc-list-item, a[mc-list-item]',\n    host: {\n        class: 'mc-list-item',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()'\n    },\n    templateUrl: './list-item.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListItem extends McListItemBase implements AfterContentInit {\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    private _lineSetter: McLineSetter;\n\n    constructor(private _element: ElementRef) {\n        super();\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    _handleFocus() {\n        this._element.nativeElement.classList.add('mc-focused');\n    }\n\n    _handleBlur() {\n        this._element.nativeElement.classList.remove('mc-focused');\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLineModule } from '@ptsecurity/mosaic/core';\n\nimport { McListSelection, McListOption } from './list-selection.component';\nimport { McList, McListItem, McListSubheaderCssStyler } from './list.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        McLineModule\n    ],\n    exports: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ],\n    declarations: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ]\n})\nexport class McListModule {}\n","import {\n    Input,\n    Attribute,\n    Component,\n    ElementRef,\n    OnDestroy,\n    ViewEncapsulation,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef\n} from '@angular/core';\n\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport {\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\nexport class McLinkBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\nexport const _McLinkBase: HasTabIndexCtor & CanDisableCtor & typeof McLinkBase\n    = mixinTabIndex(mixinDisabled(McLinkBase));\n\n@Component({\n    selector: 'a.mc-link',\n    template: `<ng-content></ng-content>`,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcLink',\n    styleUrls: ['./link.css'],\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': 'tabIndex'\n    }\n})\n\nexport class McLink extends _McLinkBase implements OnDestroy, HasTabIndex, CanDisable {\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    private _disabled = false;\n\n    constructor(\n        @Attribute('tabindex') tabIndex: string,\n        public elementRef: ElementRef,\n        private _focusMonitor: FocusMonitor,\n        private _changeDetector: ChangeDetectorRef) {\n\n        super(elementRef);\n        this._focusMonitor.monitor(elementRef.nativeElement, true);\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this._getHostElement().focus();\n    }\n\n    _getHostElement() {\n        return this.elementRef.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLink } from './link.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule\n    ],\n    declarations: [McLink],\n    exports: [McLink]\n})\nexport class McLinkModule {}\n","import { Injectable, Optional, SkipSelf } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\n\nimport { McModalRef } from './modal-ref.class';\n\n\ninterface IRegisteredMeta {\n    modalRef: McModalRef;\n    afterOpenSubscription: Subscription;\n    afterCloseSubscription: Subscription;\n}\n\n@Injectable()\nexport class McModalControlService {\n\n    // Track singleton afterAllClose through over the injection tree\n    get afterAllClose(): Subject<void> {\n        return this.parentService ? this.parentService.afterAllClose : this.rootAfterAllClose;\n    }\n\n    // Track singleton openModals array through over the injection tree\n    get openModals(): McModalRef[] {\n        return this.parentService ? this.parentService.openModals : this.rootOpenModals;\n    }\n\n    // @ts-ignore\n    private rootOpenModals: McModalRef[] = this.parentService ? null : [];\n    // @ts-ignore\n    private rootAfterAllClose: Subject<void> = this.parentService ? null : new Subject<void>();\n    // @ts-ignore\n    private rootRegisteredMetaMap: Map<McModalRef, IRegisteredMeta> = this.parentService ? null : new Map();\n\n    // Registered modal for later usage\n    private get registeredMetaMap(): Map<McModalRef, IRegisteredMeta> {\n        return this.parentService ? this.parentService.registeredMetaMap : this.rootRegisteredMetaMap;\n    }\n\n    constructor(\n        @Optional() @SkipSelf() private parentService: McModalControlService) {\n    }\n\n    // Register a modal to listen its open/close\n    registerModal(modalRef: McModalRef): void {\n        if (!this.hasRegistered(modalRef)) {\n            const afterOpenSubscription = modalRef.afterOpen.subscribe(() => this.openModals.push(modalRef));\n            const afterCloseSubscription = modalRef.afterClose.subscribe(() => this.removeOpenModal(modalRef));\n\n            this.registeredMetaMap.set(modalRef, {modalRef, afterOpenSubscription, afterCloseSubscription});\n        }\n    }\n\n    hasRegistered(modalRef: McModalRef): boolean {\n        return this.registeredMetaMap.has(modalRef);\n    }\n\n    // Close all registered opened modals\n    closeAll(): void {\n        let i = this.openModals.length;\n\n        while (i--) {\n            this.openModals[i].close();\n        }\n    }\n\n    private removeOpenModal(modalRef: McModalRef): void {\n        const index = this.openModals.indexOf(modalRef);\n\n        if (index > -1) {\n            this.openModals.splice(index, 1);\n\n            if (!this.openModals.length) {\n                this.afterAllClose.next();\n            }\n        }\n    }\n}\n","import { Observable } from 'rxjs';\n\nimport { McModalComponent } from './modal.component';\n\n\n/**\n * API class that public to users to handle the modal instance.\n * McModalRef is aim to avoid accessing to the modal instance directly by users.\n */\nexport abstract class McModalRef<T = any, R = any> {\n    abstract afterOpen: Observable<void>;\n    abstract afterClose: Observable<R>;\n\n    abstract open(): void;\n\n    abstract close(result?: R): void;\n\n    abstract destroy(result?: R): void;\n\n    /**\n     * Trigger the nzOnOk/nzOnCancel by manual\n     */\n    abstract triggerOk(): void;\n\n    abstract triggerCancel(): void;\n\n    // /**\n    //  * Return the ComponentRef of nzContent when specify nzContent as a Component\n    //  * Note: this method may return undefined if the Component has not ready yet.\n    //    (it only available after Modal's ngOnInit)\n    //  */\n    // abstract getContentComponentRef(): ComponentRef<{}>;\n\n    /**\n     * Return the component instance of nzContent when specify nzContent as a Component\n     * Note: this method may return undefined if the Component has not ready yet.\n     * (it only available after Modal's ngOnInit)\n     */\n    abstract getContentComponent(): T;\n\n    /**\n     * Get the dom element of this Modal\n     */\n    abstract getElement(): HTMLElement;\n\n    /**\n     * Get the instance of the Modal itself\n     */\n    abstract getInstance(): McModalComponent;\n}\n","export interface IClickPosition {\n    x: number;\n    y: number;\n}\n\nexport class ModalUtil {\n    private lastPosition: IClickPosition;\n\n    constructor(private document: Document) {\n        this.lastPosition = {x: -1, y: -1};\n        this.listenDocumentClick();\n    }\n\n    getLastClickPosition(): IClickPosition {\n        return this.lastPosition;\n    }\n\n    listenDocumentClick(): void {\n        this.document.addEventListener('click', (event: MouseEvent) => {\n            this.lastPosition = {x: event.clientX, y: event.clientY};\n        });\n    }\n}\n\nexport default new ModalUtil(document);\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    OnDestroy,\n    QueryList,\n    ViewEncapsulation,\n    ContentChildren\n} from '@angular/core';\n\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { Platform } from '@ptsecurity/cdk/platform';\n\nimport { mixinColor, mixinDisabled, CanColor, CanDisable, CanDisableCtor, CanColorCtor } from '@ptsecurity/mosaic/core';\nimport { McIcon } from '@ptsecurity/mosaic/icon';\n\n\n@Directive({\n    selector: 'button[mc-button], a[mc-button]',\n    host: { class: 'mc-button' }\n})\nexport class McButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-xs-button], a[mc-xs-button]',\n    host: { class: 'mc-button mc-button_xs' }\n})\nexport class McXSButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-sm-button], a[mc-sm-button]',\n    host: { class: 'mc-button mc-button_sm' }\n})\nexport class McSMButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-lg-button], a[mc-lg-button]',\n    host: { class: 'mc-button mc-button_lg' }\n})\nexport class McLGButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-xl-button], a[mc-xl-button]',\n    host: { class: 'mc-button mc-button_xl' }\n})\nexport class McXLButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-icon-button], a[mc-icon-button]',\n    queries: {\n        contentChildren: new ContentChildren(McIcon)\n    },\n    host: { class: 'mc-icon-button' }\n})\nexport class McIconButtonCSSStyler {\n    nativeElement: Element;\n\n    contentChildren: QueryList<McIcon>;\n\n    constructor(elementRef: ElementRef) {\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        this._addClassModificatorForIcons();\n    }\n\n    _addClassModificatorForIcons() {\n        const twoIcons = 2;\n        const icons = this.contentChildren.map((item) => item._elementRef.nativeElement);\n\n        if (icons.length === 1) {\n            const iconElement = icons[0];\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-icon-button_left');\n                }\n\n                if (iconElement.previousSibling) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-icon-button_right');\n                }\n            }\n        } else if (icons.length === twoIcons) {\n            const firstIconElement = icons[0];\n            const secondIconElement = icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n}\n\n\nexport class McButtonBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McButtonMixinBase:\n    CanDisableCtor &\n    CanColorCtor &\n    typeof McButtonBase =\n        mixinColor(mixinDisabled(McButtonBase));\n\n\n@Component({\n    selector: `\n        button[mc-button],\n        button[mc-xs-button],\n        button[mc-sm-button],\n        button[mc-lg-button],\n        button[mc-xl-button]\n    `,\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[disabled]': 'disabled || null'\n    }\n})\nexport class McButton extends _McButtonMixinBase implements OnDestroy, CanDisable, CanColor {\n    constructor(elementRef: ElementRef, private _focusMonitor: FocusMonitor) {\n        super(elementRef);\n\n        this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this._getHostElement().focus();\n    }\n\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n\n\n@Component({\n    selector: 'a[mc-button], a[mc-xs-button], a[mc-sm-button], a[mc-lg-button], a[mc-xl-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[attr.tabindex]': 'disabled ? -1 : 0',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': '_haltDisabledEvents($event)'\n    }\n})\nexport class McAnchor extends McButton {\n    constructor(focusMonitor: FocusMonitor, elementRef: ElementRef) {\n        super(elementRef, focusMonitor);\n    }\n\n    _haltDisabledEvents(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\n\n\n@Component({\n    selector: 'button[mc-icon-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[attr.tabindex]': 'disabled ? -1 : 0',\n        '[attr.disabled]': 'disabled || null'\n    }\n})\nexport class McIconButton extends McButton {\n    constructor(focusMonitor: FocusMonitor, elementRef: ElementRef) {\n        super(elementRef, focusMonitor);\n    }\n\n    _haltDisabledEvents(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McButton,\n    McAnchor,\n    McIconButton,\n    McButtonCSSStyler,\n    McXSButtonCSSStyler,\n    McSMButtonCSSStyler,\n    McLGButtonCSSStyler,\n    McXLButtonCSSStyler,\n    McIconButtonCSSStyler\n} from './button.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McButton,\n        McAnchor,\n        McIconButton,\n        McButtonCSSStyler,\n        McXSButtonCSSStyler,\n        McSMButtonCSSStyler,\n        McLGButtonCSSStyler,\n        McXLButtonCSSStyler,\n        McIconButtonCSSStyler\n    ],\n    declarations: [\n        McButton,\n        McAnchor,\n        McIconButton,\n        McButtonCSSStyler,\n        McXSButtonCSSStyler,\n        McSMButtonCSSStyler,\n        McLGButtonCSSStyler,\n        McXLButtonCSSStyler,\n        McIconButtonCSSStyler\n    ]\n})\nexport class McButtonModule {}\n","import { InjectionToken } from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type McCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MC_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<McCheckboxClickAction>('mc-checkbox-click-action');\n","import {\n    AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport {\n    CanColor, CanColorCtor,\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\nimport { MC_CHECKBOX_CLICK_ACTION, McCheckboxClickAction } from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mc-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McCheckbox),\n    multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n    /** The initial state of the component before any user interaction. */\n    Init,\n    /** The state representing the component when it's becoming checked. */\n    Checked,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate\n}\n\n/** Change event object emitted by McCheckbox. */\nexport class McCheckboxChange {\n    /** The source McCheckbox of the event. */\n    source: McCheckbox;\n    /** The new `checked` value of the checkbox. */\n    checked: boolean;\n}\n\n// Boilerplate for applying mixins to McCheckbox.\n/** @docs-private */\nexport class McCheckboxBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\nexport const _McCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof McCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisabled(McCheckboxBase)));\n\n\n/**\n * A mosaic checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A McCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n */\n@Component({\n    selector: 'mc-checkbox',\n    templateUrl: 'checkbox.html',\n    styleUrls: ['checkbox.css'],\n    exportAs: 'mcCheckbox',\n    host: {\n        class: 'mc-checkbox',\n        '[id]': 'id',\n        '[attr.id]': 'id',\n        '[class.mc-checkbox-indeterminate]': 'indeterminate',\n        '[class.mc-checkbox-checked]': 'checked',\n        '[class.mc-checkbox-disabled]': 'disabled',\n        '[class.mc-checkbox-label-before]': 'labelPosition == \"before\"'\n    },\n    providers: [MC_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCheckbox extends _McCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex {\n\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     */\n    @Input('aria-label') ariaLabel: string = '';\n\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n    private _uniqueId: string = `mc-checkbox-${++nextUniqueId}`;\n\n    /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n    @Input() id: string = this._uniqueId;\n\n    /** Returns the unique id for the visual hidden input. */\n    get inputId(): string {\n        return `${this.id || this._uniqueId}-input`;\n    }\n\n    /** Whether the checkbox is required. */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    private _required: boolean;\n\n    /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n    @Input() labelPosition: 'before' | 'after' = 'after';\n\n    /** Name value will be applied to the input element if present */\n    @Input() name: string | null = null;\n\n    /** Event emitted when the checkbox's `checked` value changes. */\n    @Output() readonly change: EventEmitter<McCheckboxChange> =\n        new EventEmitter<McCheckboxChange>();\n\n    /** Event emitted when the checkbox's `indeterminate` value changes. */\n    @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** The value attribute of the native input element */\n    @Input() value: string;\n\n    /** The native `<input type=\"checkbox\">` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * @docs-private\n     */\n    _onTouched: () => any = () => {\n    }\n\n    private _currentAnimationClass: string = '';\n\n    private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n    private _controlValueAccessorChangeFn: (value: any) => void = () => {\n    }\n\n    constructor(elementRef: ElementRef,\n                private _changeDetectorRef: ChangeDetectorRef,\n                private _focusMonitor: FocusMonitor,\n                @Attribute('tabindex') tabIndex: string,\n                @Optional() @Inject(MC_CHECKBOX_CLICK_ACTION)\n                private _clickAction: McCheckboxClickAction) {\n        super(elementRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._inputElement.nativeElement)\n            .subscribe((focusOrigin) => this._onInputFocusChange(focusOrigin));\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    }\n\n    /**\n     * Whether the checkbox is checked.\n     */\n    @Input()\n    get checked(): boolean {\n        return this._checked;\n    }\n\n    set checked(value: boolean) {\n        if (value != this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _checked: boolean = false;\n\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value != this.disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    @Input()\n    get indeterminate(): boolean {\n        return this._indeterminate;\n    }\n\n    set indeterminate(value: boolean) {\n        const changed = value != this._indeterminate;\n        this._indeterminate = value;\n\n        if (changed) {\n            if (this._indeterminate) {\n                this._transitionCheckState(TransitionCheckState.Indeterminate);\n            } else {\n                this._transitionCheckState(\n                    this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n    }\n\n    private _indeterminate: boolean = false;\n\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // This method is getting called whenever the label of the checkbox changes.\n        // Since the checkbox uses the OnPush strategy we need to notify it about the change\n        // that has been recognized by the cdkObserveContent directive.\n        this._changeDetectorRef.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any) {\n        this.checked = !!value;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this._onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n    }\n\n    _getAriaChecked(): 'true' | 'false' | 'mixed' {\n        return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n    }\n\n    private _transitionCheckState(newState: TransitionCheckState) {\n        const oldState = this._currentCheckState;\n        const element: HTMLElement = this._elementRef.nativeElement;\n\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n\n        this._currentCheckState = newState;\n\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n        }\n    }\n\n    private _emitChangeEvent() {\n        const event = new McCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    }\n\n    /** Function is called whenever the focus changes for the input element. */\n    private _onInputFocusChange(focusOrigin: FocusOrigin) {\n        if (focusOrigin) {\n            this._onTouched();\n        }\n    }\n\n    /** Toggles the `checked` state of the checkbox. */\n    toggle(): void {\n        this.checked = !this.checked;\n    }\n\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event\n     */\n    _onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && this._clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && this._clickAction !== 'check') {\n\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n\n            this.toggle();\n            this._transitionCheckState(\n                this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        } else if (!this.disabled && this._clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mc-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n\n    /** Focuses the checkbox. */\n    focus(): void {\n        this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n    }\n\n    _onInteractionEvent(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n}\n","import {\n    Directive,\n    forwardRef,\n    Provider\n} from '@angular/core';\nimport {\n    CheckboxRequiredValidator,\n    NG_VALIDATORS\n} from '@angular/forms';\n\n\nexport const MC_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McCheckboxRequiredValidator),\n    multi: true\n};\n\n/**\n * Validator for Mosaic checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mc-checkbox`.\n */\n@Directive({\n    selector: `mc-checkbox[required][formControlName],\n             mc-checkbox[required][formControl], mc-checkbox[required][ngModel]`,\n    providers: [MC_CHECKBOX_REQUIRED_VALIDATOR],\n    host: { '[attr.required]': 'required ? \"\" : null' }\n})\nexport class McCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McCheckbox } from './checkbox';\nimport { McCheckboxRequiredValidator } from './checkbox-required-validator';\n\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [McCheckbox, McCheckboxRequiredValidator],\n    declarations: [McCheckbox, McCheckboxRequiredValidator]\n})\nexport class McCheckboxModule {\n}\n","import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\n\n\n@Component({\n    selector: 'mc-divider',\n    host: {\n        class: 'mc-divider',\n        role: 'separator',\n        '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n        '[class.mc-divider-vertical]': 'vertical',\n        '[class.mc-divider-inset]': 'inset'\n    },\n    template: '',\n    styleUrls: ['divider.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false\n})\nexport class McDivider {\n    // Whether the divider is vertically aligned.\n    @Input()\n    get vertical(): boolean {\n        return this._vertical;\n    }\n\n    set vertical(value: boolean) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n\n    private _vertical: boolean = false;\n\n    // Whether the divider is an inset divider.\n    @Input()\n    get inset(): boolean {\n        return this._inset;\n    }\n\n    set inset(value: boolean) {\n        this._inset = coerceBooleanProperty(value);\n    }\n\n    private _inset: boolean = false;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McDivider } from './divider.component';\n\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [McDivider],\n    declarations: [McDivider]\n})\nexport class McDividerModule {\n}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-cleaner',\n    template: '<i mc-icon=\"mc-close-M_16\" class=\"mc-cleaner__icon\"></i>'\n})\nexport class McCleaner {\n}\n","import { NgControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\n\n/** An interface which allows a control to work inside of a `MсFormField`. */\nexport abstract class McFormFieldControl<T> {\n    /** The value of the control. */\n    value: T | null;\n\n    /**\n     * Stream that emits whenever the state of the control changes such that the parent `MсFormField`\n     * needs to run change detection.\n     */\n    readonly stateChanges: Observable<void>;\n\n    /** The element ID for this control. */\n    readonly id: string;\n\n    /** The placeholder for this control. */\n    readonly placeholder: string;\n\n    /** Gets the NgControl for this control. */\n    readonly ngControl: NgControl | null;\n\n    /** Whether the control is focused. */\n    readonly focused: boolean;\n\n    /** Whether the control is empty. */\n    readonly empty: boolean;\n\n    /** Whether the control is required. */\n    readonly required: boolean;\n\n    /** Whether the control is disabled. */\n    readonly disabled: boolean;\n\n    /** Whether the control is in an error state. */\n    readonly errorState: boolean;\n\n    /**\n     * An optional name for the control type that can be used to distinguish `mc-form-field` elements\n     * based on their control type. The form field will add a class,\n     * `mc-form-field-type-{{controlType}}` to its root element.\n     */\n    readonly controlType?: string;\n\n    /** Handles a click on the control's container. */\n    abstract onContainerClick(event: MouseEvent): void;\n}\n","import { Observable } from 'rxjs';\n\n\n/** An interface which allows a control to work inside of a `MсFormField`. */\nexport abstract class McFormFieldNumberControl<T> {\n    /** The value of the control. */\n    value: T | null;\n\n    /**\n     * Stream that emits whenever the state of the control changes such that the parent `MсFormField`\n     * needs to run change detection.\n     */\n    readonly stateChanges: Observable<void>;\n\n    /** the number step */\n    step: number;\n\n    /** the number big step */\n    bigStep: number;\n\n    /** Whether the control is focused. */\n    readonly focused: boolean;\n\n    /** Handles step up and down */\n    abstract stepUp(step: number): void;\n\n    abstract stepDown(step: number): void;\n}\n","import { Directive, Input } from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n@Directive({\n    selector: 'mc-hint',\n    host: {\n        class: 'mc-hint',\n        '[attr.id]': 'id'\n    }\n})\nexport class McHint {\n    @Input() id: string = `mc-hint-${nextUniqueId++}`;\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcPrefix]'\n})\nexport class McPrefix {\n}\n","import { Component, EventEmitter, Output } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-stepper',\n    template: `\n        <i class=\"mc mc-stepper-step-up mc-icon mc-angle-L_16 mc-icon-flip-h\" (mousedown)=\"onStepUp($event)\"></i>\n        <i class=\"mc mc-stepper-step-down mc-icon mc-angle-L_16\" (mousedown)=\"onStepDown($event)\"></i>\n    `\n})\nexport class McStepper {\n    @Output()\n    readonly stepUp: EventEmitter<void> = new EventEmitter<void>();\n    @Output()\n    readonly stepDown: EventEmitter<void> = new EventEmitter<void>();\n\n    onStepUp($event: MouseEvent) {\n        this.stepUp.emit();\n        $event.preventDefault();\n    }\n\n    onStepDown($event: MouseEvent) {\n        this.stepDown.emit();\n        $event.preventDefault();\n    }\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcSuffix]'\n})\nexport class McSuffix {\n}\n","import {\n    AfterContentChecked,\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren, Directive,\n    ElementRef,\n    QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { CanColor, CanColorCtor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\nimport { EMPTY, merge } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n\n\nimport { McCleaner } from './cleaner';\nimport { McFormFieldControl } from './form-field-control';\nimport { getMcFormFieldMissingControlError } from './form-field-errors';\nimport { McFormFieldNumberControl } from './form-field-number-control';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McStepper } from './stepper';\nimport { McSuffix } from './suffix';\n\n\nlet nextUniqueId = 0;\n\nexport class McFormFieldBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McFormFieldMixinBase: CanColorCtor & typeof McFormFieldBase\n    = mixinColor(McFormFieldBase, ThemePalette.Primary);\n\n@Component({\n    selector: 'mc-form-field',\n    exportAs: 'mcFormField',\n    templateUrl: 'form-field.html',\n    // McInput is a directive and can't have styles, so we need to include its styles here.\n    // The McInput styles are fairly minimal so it shouldn't be a big deal for people who\n    // aren't using McInput.\n    styleUrls: [\n        'form-field.css',\n        '../input/input.css'\n    ],\n    host: {\n        class: 'mc-form-field',\n        '[class.mc-form-field_invalid]': '_control.errorState',\n        '[class.mc-form-field_disabled]': '_control.disabled',\n        '[class.mc-form-field_has-prefix]': 'hasPrefix',\n        '[class.mc-form-field_has-suffix]': 'hasSuffix',\n        '[class.mc-form-field_has-cleaner]': 'canShowCleaner',\n        '[class.mc-form-field_has-stepper]': 'canShowStepper',\n        '[class.mc-focused]': '_control.focused',\n        '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n        '[class.ng-touched]': '_shouldForward(\"touched\")',\n        '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n        '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n        '[class.ng-valid]': '_shouldForward(\"valid\")',\n        '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n        '[class.ng-pending]': '_shouldForward(\"pending\")',\n        '(keydown)': 'onKeyDown($event)',\n        '(mouseenter)': 'onHoverChanged(true)',\n        '(mouseleave)': 'onHoverChanged(false)'\n    },\n    inputs: ['color'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class McFormField extends _McFormFieldMixinBase implements\n    AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n\n    @ContentChild(McFormFieldControl) _control: McFormFieldControl<any>;\n    @ContentChild(McFormFieldNumberControl) _numberControl: McFormFieldNumberControl<any>;\n    @ContentChildren(McHint) _hint: QueryList<McHint>;\n    @ContentChildren(McSuffix) _suffix: QueryList<McSuffix>;\n    @ContentChildren(McPrefix) _prefix: QueryList<McPrefix>;\n    @ContentChildren(McCleaner) _cleaner: QueryList<McCleaner>;\n    @ContentChild(McStepper) _stepper: McStepper;\n\n    // Unique id for the internal form field label.\n    _labelId = `mc-form-field-label-${nextUniqueId++}`;\n\n    hovered: boolean = false;\n\n    constructor(public _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef) {\n        super(_elementRef);\n    }\n\n    ngAfterContentInit() {\n        this._validateControlChild();\n        if (this._control.controlType) {\n            this._elementRef.nativeElement.classList\n                .add(`mc-form-field-type-${this._control.controlType}`);\n\n            if (this._numberControl && this.hasStepper) {\n                this._stepper.stepUp.subscribe(this.onStepUp.bind(this));\n                this._stepper.stepDown.subscribe(this.onStepDown.bind(this));\n            }\n        }\n\n        // Subscribe to changes in the child control state in order to update the form field UI.\n        this._control.stateChanges.pipe(startWith())\n            .subscribe(() => {\n                this._changeDetectorRef.markForCheck();\n            });\n\n        if (this._numberControl) {\n            this._numberControl.stateChanges.pipe(startWith())\n                .subscribe(() => {\n                    this._changeDetectorRef.markForCheck();\n                });\n        }\n\n        // Run change detection if the value changes.\n        const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n        merge(valueChanges)\n            .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    ngAfterContentChecked() {\n        this._validateControlChild();\n    }\n\n    ngAfterViewInit() {\n        // Avoid animations on load.\n        this._changeDetectorRef.detectChanges();\n    }\n\n    clearValue($event) {\n        $event.stopPropagation();\n\n        if (this._control && this._control.ngControl) {\n            this._control.ngControl.reset();\n        }\n    }\n\n    onContainerClick($event) {\n        if (this._control.onContainerClick) {\n            this._control.onContainerClick($event);\n        }\n    }\n\n    onKeyDown(e: KeyboardEvent): void {\n        // tslint:disable-next-line:deprecation\n        if (e.keyCode === ESCAPE &&\n            this._control.focused &&\n            this.hasCleaner) {\n\n            if (this._control && this._control.ngControl) {\n                this._control.ngControl.reset();\n            }\n\n            e.preventDefault();\n        }\n    }\n\n    onHoverChanged(isHovered: boolean) {\n        if (isHovered !== this.hovered) {\n            this.hovered  = isHovered;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    onStepUp() {\n        if (this._numberControl) {\n            this._numberControl.stepUp(this._numberControl.step);\n        }\n    }\n\n    onStepDown() {\n        if (this._numberControl) {\n            this._numberControl.stepDown(this._numberControl.step);\n        }\n    }\n\n    /** Determines whether a class from the NgControl should be forwarded to the host element. */\n    _shouldForward(prop: string): boolean {\n        const ngControl = this._control ? this._control.ngControl : null;\n\n        return ngControl && ngControl[prop];\n    }\n\n    /** Throws an error if the form field's control is missing. */\n    protected _validateControlChild() {\n        if (!this._control) {\n            throw getMcFormFieldMissingControlError();\n        }\n    }\n\n    get hasHint(): boolean {\n        return this._hint && this._hint.length > 0;\n    }\n\n    get hasSuffix(): boolean {\n        return this._suffix && this._suffix.length > 0;\n    }\n\n    get hasPrefix(): boolean {\n        return this._prefix && this._prefix.length > 0;\n    }\n\n    get hasCleaner(): boolean {\n        return this._cleaner && this._cleaner.length > 0;\n    }\n\n    get hasStepper(): boolean {\n        return !!this._stepper;\n    }\n\n    get canShowCleaner(): boolean {\n        return this.hasCleaner &&\n            this._control &&\n            this._control.ngControl\n                ? this._control.ngControl.value && !this._control.disabled\n                : false;\n    }\n\n\n    get disabled(): boolean {\n        return this._control && this._control.disabled;\n    }\n\n    get canShowStepper(): boolean {\n        return this._numberControl &&\n            !this.disabled &&\n            (\n                this._numberControl.focused ||\n                this.hovered\n            );\n    }\n}\n\n@Directive({\n    selector: 'mc-form-field[mcFormFieldWithoutBorders]',\n    exportAs: 'mcFormFieldWithoutBorders',\n    host: { class: 'mc-form-field_without-borders' }\n})\nexport class McFormFieldWithoutBorders {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McCleaner } from './cleaner';\nimport { McFormField, McFormFieldWithoutBorders } from './form-field';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McStepper } from './stepper';\nimport { McSuffix } from './suffix';\n\n\n@NgModule({\n    declarations: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner,\n        McStepper\n    ],\n    imports: [CommonModule, McIconModule],\n    exports: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner,\n        McStepper\n    ]\n})\nexport class McFormFieldModule {\n}\n","import { InjectionToken } from '@angular/core';\n\n\nexport const MC_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{ value: any }>('MC_INPUT_VALUE_ACCESSOR');\n","function sanitizeNumber(value: number): number | null {\n    return !isFinite(value) || isNaN(value)\n        ? null\n        : value;\n}\n\nfunction getPrecision(value: number): number {\n    const arr = value.toString().split('.');\n\n    return arr.length === 1\n        ? 1\n        // tslint:disable-next-line:no-magic-numbers\n        :  Math.pow(10, arr[1].length);\n}\n\nfunction add(value1: number, value2: number) {\n    const precision = Math.max(getPrecision(value1), getPrecision(value2));\n\n    const res = (value1 * precision + value2 * precision) / precision;\n\n    return sanitizeNumber(res);\n}\n\nexport const stepUp = (value: number | null,\n                       max: number,\n                       min: number,\n                       step: number\n): number | null => {\n    let res;\n\n    if (value === null) {\n        res = add(min, step);\n\n        return res === null ? null : Math.min(res, max);\n    }\n\n    res = add(value, step);\n\n    return res === null ? null : Math.max(Math.min(res, max), min);\n};\n\nexport const stepDown = (value: number | null,\n                         max: number,\n                         min: number,\n                         step: number\n): number | null => {\n    let res;\n\n    if (value === null) {\n        res = add(max, -step);\n\n        return res === null ? null : Math.max(res, min);\n    }\n\n    res = add(value, -step);\n\n    return res === null ? null : Math.min(Math.max(res, min), max);\n};\n","import {\n    Attribute,\n    Directive, DoCheck, ElementRef, Inject, Input, OnChanges,\n    OnDestroy, Optional, Self\n} from '@angular/core';\nimport {\n    FormGroupDirective,\n    NgControl,\n    NgForm, NgModel\n} from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport {\n    END, C, V, X, A, DELETE, BACKSPACE, TAB, ENTER,\n    ESCAPE, ZERO, NINE, NUMPAD_ZERO, NUMPAD_NINE, NUMPAD_MINUS, DASH,\n    FF_MINUS, LEFT_ARROW, RIGHT_ARROW, HOME, UP_ARROW, DOWN_ARROW, F1, F12\n} from '@ptsecurity/cdk/keycodes';\nimport { getSupportedInputTypes, Platform } from '@ptsecurity/cdk/platform';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl, McFormFieldNumberControl } from '@ptsecurity/mosaic/form-field';\nimport { Subject } from 'rxjs';\n\nimport { getMcInputUnsupportedTypeError } from './input-errors';\nimport { MC_INPUT_VALUE_ACCESSOR } from './input-value-accessor';\nimport { stepDown, stepUp } from './stepperUtils';\n\n\nconst MC_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\n\nexport const BIG_STEP = 10;\nexport const SMALL_STEP = 1;\n\nlet nextUniqueId = 0;\n\nexport class McInputBase {\n    constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n                public _parentForm: NgForm,\n                public _parentFormGroup: FormGroupDirective,\n                public ngControl: NgControl) {\n    }\n}\n\nexport const _McInputMixinBase: CanUpdateErrorStateCtor & typeof McInputBase =\n    mixinErrorState(McInputBase);\n\n\n@Directive({\n    selector: `input[mcInput][type=\"number\"]`,\n    exportAs: 'mcNumericalInput',\n    providers: [NgModel, { provide: McFormFieldNumberControl, useExisting: McNumberInput }],\n    host: {\n        '(blur)': '_focusChanged(false)',\n        '(focus)': '_focusChanged(true)',\n        '(paste)': 'onPaste($event)',\n        '(keydown)': 'onKeyDown($event)'\n    }\n})\nexport class McNumberInput implements McFormFieldNumberControl<any> {\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    @Input()\n    bigStep: number;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    @Input()\n    step: number;\n\n    @Input()\n    min: number;\n\n    @Input()\n    max: number;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    value: any;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    private readonly _host: HTMLInputElement;\n\n    constructor(\n        private _platform: Platform ,\n        private _elementRef: ElementRef,\n        private _model: NgModel,\n        @Attribute('step') step: string,\n        @Attribute('big-step') bigStep: string,\n        @Attribute('min') min: string,\n        @Attribute('max') max: string\n    ) {\n        this.step = this.isDigit(step) ? parseFloat(step) : SMALL_STEP;\n        this.bigStep = this.isDigit(bigStep) ? parseFloat(bigStep) : BIG_STEP;\n        this.min = this.isDigit(min) ? parseFloat(min) : -Infinity;\n        this.max = this.isDigit(max) ? parseFloat(max) : Infinity;\n\n        this._host = this._elementRef.nativeElement;\n\n        const self = this;\n\n        if ('valueAsNumber' in this._host) {\n            Object.defineProperty(Object.getPrototypeOf(this._host), 'valueAsNumber', {\n                // tslint:disable-next-line:no-reserved-keywords\n                get() {\n                    const res = parseFloat(self.normalizeSplitter(this.value));\n\n                    return isNaN(res) ? null : res;\n                }\n            });\n        }\n    }\n\n    _focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent) {\n        // tslint:disable-next-line:deprecation\n        const keyCode = event.keyCode;\n\n        const isCtrlA = (e) => e.keyCode === A && (e.ctrlKey || e.metaKey);\n        const isCtrlC = (e) => e.keyCode === C && (e.ctrlKey || e.metaKey);\n        const isCtrlV = (e) => e.keyCode === V && (e.ctrlKey || e.metaKey);\n        const isCtrlX = (e) => e.keyCode === X && (e.ctrlKey || e.metaKey);\n\n        const isFKey = (e) => e.keyCode >= F1 && e.keyCode <= F12;\n\n        const isNumber = (e) => (e.keyCode >= ZERO && e.keyCode <= NINE) ||\n            (e.keyCode >= NUMPAD_ZERO && e.keyCode <= NUMPAD_NINE);\n\n        const minuses = [NUMPAD_MINUS, DASH, FF_MINUS];\n        const serviceKeys = [DELETE, BACKSPACE, TAB, ESCAPE, ENTER];\n        const arrows = [LEFT_ARROW, RIGHT_ARROW];\n        const allowedKeys =  [HOME, END].concat(arrows).concat(serviceKeys).concat(minuses);\n\n        const isIEPeriod = (e) => e.key === '.' || e.key === 'Decimal';\n        const isNotIEPeriod = (e) => e.key === '.' || e.key === ',';\n\n        // Decimal is for IE\n        const isPeriod = (e) => this._platform.EDGE || this._platform.TRIDENT\n            ? isIEPeriod(e)\n            : isNotIEPeriod(e);\n\n        if (allowedKeys.indexOf(keyCode) !== -1 ||\n            isCtrlA(event) ||\n            isCtrlC(event) ||\n            isCtrlV(event) ||\n            isCtrlX(event) ||\n            isFKey(event) ||\n            isPeriod(event)\n        ) {\n            // let it happen, don't do anything\n            return;\n        }\n        // Ensure that it is not a number and stop the keypress\n        if (event.shiftKey || !isNumber(event)) {\n            event.preventDefault();\n\n            // process steps\n            const step = event.shiftKey ? this.bigStep : this.step;\n\n            if (keyCode === UP_ARROW) {\n                this.stepUp(step);\n            }\n\n            if (keyCode === DOWN_ARROW) {\n                this.stepDown(step);\n            }\n        }\n    }\n\n    onPaste(event) {\n        let value = event.clipboardData.getData('text');\n        value = this.normalizeSplitter(value);\n\n        if (!this.isDigit(value)) {\n            event.preventDefault();\n        }\n    }\n\n    stepUp(step: number) {\n        this._elementRef.nativeElement.focus();\n        const res = stepUp(this._host.valueAsNumber, this.max, this.min, step);\n        this._host.value = res === null ? '' : res.toString();\n        this._model.update.emit(this._host.valueAsNumber);\n    }\n\n    stepDown(step: number) {\n        this._elementRef.nativeElement.focus();\n        const res = stepDown(this._host.valueAsNumber, this.max, this.min, step);\n        this._host.value = res === null ? '' : res.toString();\n        this._model.update.emit(this._host.valueAsNumber);\n    }\n\n    private normalizeSplitter(value: string): string {\n        return value ? value.replace(/,/g, '.') : value;\n    }\n\n    private isDigit(value: string): boolean {\n        return this.isFloat(value) || this.isInt(value);\n    }\n\n    private isFloat(value: string): boolean {\n        return /^-?\\d+\\.\\d+$/.test(value);\n    }\n\n    private isInt(value: string): boolean {\n        return /^-?\\d+$/.test(value);\n    }\n}\n\n@Directive({\n    selector: `input[mcInput]`,\n    exportAs: 'mcInput',\n    host: {\n        class: 'mc-input',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '(blur)': '_focusChanged(false)',\n        '(focus)': '_focusChanged(true)',\n        '(input)': '_onInput()'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McInput }]\n})\nexport class McInput extends _McInputMixinBase implements McFormFieldControl<any>, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-input';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this._uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    // tslint:disable no-reserved-keywords\n    /** Input type of the element. */\n    @Input()\n    get type(): string {\n        return this._type;\n    }\n\n    set type(value: string) {\n        this._type = value || 'text';\n        this._validateType();\n\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    // tslint:enable no-reserved-keywords\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this._inputValueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n\n    protected _uid = `mc-input-${nextUniqueId++}`;\n    protected _previousNativeValue: any;\n    protected _disabled = false;\n    protected _id: string;\n    protected _required = false;\n    protected _type = 'text';\n    protected _neverEmptyInputTypes = [\n        'date',\n        'datetime',\n        'datetime-local',\n        'month',\n        'time',\n        'week'\n    ].filter((t) => getSupportedInputTypes().has(t));\n\n    private _inputValueAccessor: { value: any };\n\n    constructor(protected _elementRef: ElementRef,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() _parentForm: NgForm,\n                @Optional() _parentFormGroup: FormGroupDirective,\n                _defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_INPUT_VALUE_ACCESSOR) inputValueAccessor: any) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n        this._previousNativeValue = this.value;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n    }\n\n    /** Focuses the input. */\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Does some manual dirty checking on the native input `value` property. */\n    protected _dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Make sure the input is a supported type. */\n    protected _validateType() {\n        if (MC_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n            throw getMcInputUnsupportedTypeError(this._type);\n        }\n    }\n\n    /** Checks whether the input type is one of the types that are never empty. */\n    protected _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n\n    /** Checks whether the input is invalid based on the native validation. */\n    protected _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        const validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n\n        return validity && validity.badInput;\n    }\n}\n\n@Directive({\n    selector: 'input[mcInputMonospace]',\n    exportAs: 'McInputMonospace',\n    host: { class: 'mc-input_monospace' }\n})\nexport class McInputMono {\n}\n","import { Directive, forwardRef, Input, OnChanges, Provider, SimpleChanges } from '@angular/core';\nimport { AbstractControl, NG_VALIDATORS, ValidationErrors, Validator, ValidatorFn, Validators } from '@angular/forms';\n\n\nexport const MIN_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MinValidator),\n    multi: true\n};\n\n/**\n * A directive which installs the {@link MinValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `min` attribute.\n *\n * @experimental\n */\n@Directive({\n    selector: '[min][formControlName],[min][formControl],[min][ngModel]',\n    providers: [MIN_VALIDATOR],\n    host: {'[attr.min]': 'min ? min : null'}\n})\nexport class MinValidator implements Validator, OnChanges {\n\n    @Input() min: string;\n    private _validator: ValidatorFn;\n    private _onChange: () => void;\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('min' in changes) {\n            this._createValidator();\n            if (this._onChange) { this._onChange(); }\n        }\n    }\n\n    validate(c: AbstractControl): ValidationErrors | null { return this._validator(c); }\n\n    registerOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n\n    private _createValidator(): void { this._validator = Validators.min(parseInt(this.min, 10)); }\n}\n\n\nexport const MAX_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MaxValidator),\n    multi: true\n};\n\n/**\n * A directive which installs the {@link MaxValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `min` attribute.\n *\n * @experimental\n */\n@Directive({\n    selector: '[max][formControlName],[max][formControl],[max][ngModel]',\n    providers: [MAX_VALIDATOR],\n    host: {'[attr.max]': 'max ? max : null'}\n})\nexport class MaxValidator implements Validator,\n    OnChanges {\n\n    @Input() max: string;\n    private _validator: ValidatorFn;\n    private _onChange: () => void;\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('max' in changes) {\n            this._createValidator();\n            if (this._onChange) { this._onChange(); }\n        }\n    }\n\n    validate(c: AbstractControl): ValidationErrors | null { return this._validator(c); }\n\n    registerOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n\n    private _createValidator(): void { this._validator = Validators.max(parseInt(this.max, 10)); }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McInput, McInputMono, McNumberInput } from './input';\nimport { MaxValidator, MinValidator } from './input-number-validators';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule, FormsModule],\n    exports: [McInput, McNumberInput, McInputMono, MinValidator, MaxValidator],\n    declarations: [McInput, McNumberInput, McInputMono, MinValidator, MaxValidator ]\n})\nexport class McInputModule {\n}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-content',\n    preserveWhitespaces: false,\n    templateUrl: './content.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ],\n    host: {\n        '[class.mc-layout-content]': 'true'\n    }\n})\nexport class McContentComponent {\n}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-footer',\n    preserveWhitespaces: false,\n    templateUrl: './footer.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ],\n    host: {\n        '[class.mc-layout-footer]': 'true'\n    }\n})\nexport class McFooterComponent {\n}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector : 'mc-header',\n    preserveWhitespaces: false,\n    templateUrl: './header.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ],\n    host: {\n        '[class.mc-layout-header]': 'true'\n    }\n})\nexport class McHeaderComponent {\n}\n","import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-layout',\n    preserveWhitespaces: false,\n    styleUrls: ['layout.css'],\n    templateUrl: './layout.component.html',\n    host: {\n        '[class.mc-layout]': 'true',\n        '[class.mc-layout-has-sidebar]': 'hasSidebar'\n    },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McLayoutComponent {\n    hasSidebar = false;\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","\nexport function isBoolean(val: any): val is boolean { return typeof val === 'boolean'; }\n\nexport function toBoolean(value: any): boolean {\n    return value != null && `${value}` !== 'false';\n}\n","import { NgModule, InjectionToken, Optional, Inject, isDevMode } from '@angular/core';\nimport { BidiModule } from '@ptsecurity/cdk/bidi';\n\n\n// Injection token that configures whether the Mosaic sanity checks are enabled.\nexport const MC_SANITY_CHECKS = new InjectionToken<boolean>('mc-sanity-checks', {\n    providedIn: 'root',\n    factory: MC_SANITY_CHECKS_FACTORY\n});\n\nexport function MC_SANITY_CHECKS_FACTORY(): boolean {\n    return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Mosaic\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n    imports: [ BidiModule ],\n    exports: [ BidiModule ]\n})\nexport class McCommonModule {\n    // Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n    private _hasDoneGlobalChecks = false;\n\n    // Reference to the global `document` object.\n    private _document = typeof document === 'object' && document ? document : null;\n\n    // Reference to the global 'window' object.\n    private _window = typeof window === 'object' && window ? window : null;\n\n    constructor(@Optional() @Inject(MC_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n        if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n            this._checkDoctypeIsDefined();\n            this._checkThemeIsPresent();\n            this._hasDoneGlobalChecks = true;\n        }\n    }\n\n    // Whether any sanity checks are enabled\n    private _areChecksEnabled(): boolean {\n        return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n    }\n\n    // Whether the code is running in tests.\n    private _isTestEnv() {\n        // tslint:disable-next-line\n        return this._window && (this._window['__karma__'] || this._window['jasmine']);\n    }\n\n    private _checkDoctypeIsDefined(): void {\n        if (this._document && !this._document.doctype) {\n            console.warn(\n                'Current document does not have a doctype. This may cause ' +\n                'some Mosaic components not to behave as expected.'\n            );\n        }\n    }\n\n    private _checkThemeIsPresent(): void {\n        if (this._document && typeof getComputedStyle === 'function') {\n            const testElement = this._document.createElement('div');\n\n            testElement.classList.add('mc-theme-loaded-marker');\n            this._document.body.appendChild(testElement);\n\n            const computedStyle = getComputedStyle(testElement);\n\n            // In some situations, the computed style of the test element can be null. For example in\n            // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n            // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n            if (computedStyle && computedStyle.display !== 'none') {\n                console.warn(\n                    'Could not find Mosaic core theme. Most Mosaic ' +\n                    'components may not work as expected. For more info refer ' +\n                    'to the theming guide: link there'\n                );\n            }\n\n            this._document.body.removeChild(testElement);\n        }\n    }\n}\n","import { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanDisable {\n    disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n// Mixin to augment a directive with a `disabled` property.\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n    return class extends base {\n        private _disabled: boolean = false;\n\n        get disabled() {\n            return this._disabled;\n        }\n\n        set disabled(value: any) {\n            this._disabled = coerceBooleanProperty(value);\n        }\n\n        constructor(...args: any[]) {\n            // tslint:disable-next-line\n            super(...args);\n        }\n    };\n}\n","import { ElementRef } from '@angular/core';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanColor {\n    color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\nexport interface HasElementRef {\n    _elementRef: ElementRef;\n}\n\nexport enum ThemePalette {\n    Primary = 'primary',\n    Second = 'second',\n    Error = 'error',\n    Default = 'second'\n}\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T,\n    defaultColor: ThemePalette = ThemePalette.Default\n): CanColorCtor & T {\n    return class extends base {\n\n        private _color: ThemePalette;\n\n        get color(): ThemePalette {\n            return this._color;\n        }\n\n        set color(value: ThemePalette) {\n            const colorPalette = value || defaultColor;\n\n            if (colorPalette !== this._color) {\n                if (this._color) {\n                    this._elementRef.nativeElement.classList.remove(`mc-${this._color}`);\n                }\n\n                if (colorPalette) {\n                    this._elementRef.nativeElement.classList.add(`mc-${colorPalette}`);\n                }\n\n                this._color = colorPalette;\n            }\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n\n            this.color = defaultColor;\n        }\n    };\n}\n\n","import { Constructor } from './constructor';\nimport { CanDisable } from './disabled';\n\n\nexport interface HasTabIndex {\n    tabIndex: number;\n}\n\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n// Mixin to augment a directive with a `tabIndex` property.\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n    return class extends base {\n        private _tabIndex: number = defaultTabIndex;\n\n        get tabIndex(): number {\n            return this.disabled ? -1 : this._tabIndex;\n        }\n\n        set tabIndex(value: number) {\n            this._tabIndex = value != null ? value : defaultTabIndex;\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n    };\n}\n","import { FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { Subject } from 'rxjs';\n\nimport { ErrorStateMatcher } from '../error/error-options';\n\nimport { Constructor } from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n\n    readonly stateChanges: Subject<void>;\n\n    errorState: boolean;\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState();\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n    _parentFormGroup: FormGroupDirective;\n    _parentForm: NgForm;\n    _defaultErrorStateMatcher: ErrorStateMatcher;\n    ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n    : CanUpdateErrorStateCtor & T {\n    return class extends base {\n        /** Whether the component is in an error state. */\n        errorState: boolean = false;\n\n        /**\n         * Stream that emits whenever the state of the input changes such that the wrapping\n         * `MatFormField` needs to run change detection.\n         */\n        readonly stateChanges = new Subject<void>();\n\n        errorStateMatcher: ErrorStateMatcher;\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n\n        updateErrorState() {\n            const oldState = this.errorState;\n            const parent = this._parentFormGroup || this._parentForm;\n            const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n            const control = this.ngControl ? this.ngControl.control as FormControl : null;\n            const newState = matcher.isErrorState(control, parent);\n\n            if (newState !== oldState) {\n                this.errorState = newState;\n                this.stateChanges.next();\n            }\n        }\n    };\n}\n","import {\n    AfterViewChecked,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { ENTER, SPACE } from '@ptsecurity/cdk/keycodes';\nimport { Subject } from 'rxjs';\n\nimport { McOptgroup } from './optgroup';\n\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by McOption when selected or deselected. */\nexport class McOptionSelectionChange {\n    constructor(\n        /** Reference to the option that emitted the event. */\n        public source: McOption,\n        /** Whether the change in the option's value was a result of a user action. */\n        public isUserInput = false) {\n    }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface IMcOptionParentComponent {\n    disableRipple?: boolean;\n    multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MC_OPTION_PARENT_COMPONENT =\n    new InjectionToken<IMcOptionParentComponent>('MC_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n    selector: 'mc-option',\n    exportAs: 'mcOption',\n    host: {\n        '[attr.tabindex]': '_getTabIndex()',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-option-multiple]': 'multiple',\n        '[class.mc-active]': 'active',\n        '[id]': 'id',\n        '[class.mc-disabled]': 'disabled',\n        '(click)': '_selectViaInteraction()',\n        '(keydown)': '_handleKeydown($event)',\n        class: 'mc-option'\n    },\n    styleUrls: ['option.css'],\n    templateUrl: 'option.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McOption implements AfterViewChecked, OnDestroy {\n    /** Whether the wrapping component is in multiple selection mode. */\n    get multiple() {\n        return this._parent && this._parent.multiple;\n    }\n\n    /** The unique ID of the option. */\n    get id(): string {\n        return this._id;\n    }\n\n    /** Whether or not the option is currently selected. */\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    /** The form value of the option. */\n    @Input() value: any;\n\n    /** Whether the option is disabled. */\n    @Input()\n    get disabled() {\n        return (this.group && this.group.disabled) || this._disabled;\n    }\n\n    set disabled(value: any) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    /** Whether ripples for the option are disabled. */\n    get disableRipple() {\n        return this._parent && this._parent.disableRipple;\n    }\n\n    /** Event emitted when the option is selected or deselected. */\n        // tslint:disable-next-line:no-output-on-prefix\n    @Output() readonly onSelectionChange = new EventEmitter<McOptionSelectionChange>();\n\n    /** Emits when the state of the option changes and any parents have to be notified. */\n    readonly _stateChanges = new Subject<void>();\n\n    private _selected = false;\n    private _active = false;\n    private _disabled = false;\n    private readonly _id = `mc-option-${_uniqueIdCounter++}`;\n    private _mostRecentViewValue = '';\n\n    constructor(\n        private readonly _element: ElementRef,\n        private readonly _changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_OPTION_PARENT_COMPONENT) private readonly _parent: IMcOptionParentComponent,\n        @Optional() readonly group: McOptgroup) {\n    }\n\n    /**\n     * Whether or not the option is currently active and ready to be selected.\n     * An active option displays styles as if it is focused, but the\n     * focus is actually retained somewhere else. This comes in handy\n     * for components like autocomplete where focus must remain on the input.\n     */\n    get active(): boolean {\n        return this._active;\n    }\n\n    /**\n     * The displayed value of the option. It is necessary to show the selected option in the\n     * select's trigger.\n     */\n    get viewValue(): string {\n        // TODO(kara): Add input property alternative for node envs.\n        return (this._getHostElement().textContent || '').trim();\n    }\n\n    /** Selects the option. */\n    select(): void {\n        if (!this._selected) {\n            this._selected = true;\n            this._changeDetectorRef.markForCheck();\n            this._emitSelectionChangeEvent();\n        }\n    }\n\n    /** Deselects the option. */\n    deselect(): void {\n        if (this._selected) {\n            this._selected = false;\n            this._changeDetectorRef.markForCheck();\n            this._emitSelectionChangeEvent();\n        }\n    }\n\n    /** Sets focus onto this option. */\n    focus(): void {\n        const element = this._getHostElement();\n\n        if (typeof element.focus === 'function') {\n            element.focus();\n        }\n    }\n\n    /**\n     * This method sets display styles on the option to make it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setActiveStyles(): void {\n        if (!this._active) {\n            this._active = true;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    /**\n     * This method removes display styles on the option that made it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setInactiveStyles(): void {\n        if (this._active) {\n            this._active = false;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel(): string {\n        return this.viewValue;\n    }\n\n    /** Ensures the option is selected when activated from the keyboard. */\n    _handleKeydown(event: KeyboardEvent): void {\n        // tslint:disable-next-line\n        if (event.keyCode === ENTER || event.keyCode === SPACE) {\n            this._selectViaInteraction();\n\n            // Prevent the page from scrolling down and form submits.\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * `Selects the option while indicating the selection came from the user. Used to\n     * determine if the select's view -> model callback should be invoked.`\n     */\n    _selectViaInteraction(): void {\n        if (!this.disabled) {\n            this._selected = this.multiple ? !this._selected : true;\n            this._changeDetectorRef.markForCheck();\n            this._emitSelectionChangeEvent(true);\n        }\n    }\n\n    /** Returns the correct tabindex for the option depending on disabled state. */\n    _getTabIndex(): string {\n        return this.disabled ? '-1' : '0';\n    }\n\n    /** Gets the host DOM element. */\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n\n    ngAfterViewChecked() {\n        // Since parent components could be using the option's label to display the selected values\n        // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n        // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n        // relatively cheap, however we still limit them only to selected options in order to avoid\n        // hitting the DOM too often.\n        if (this._selected) {\n            const viewValue = this.viewValue;\n\n            if (viewValue !== this._mostRecentViewValue) {\n                this._mostRecentViewValue = viewValue;\n                this._stateChanges.next();\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n\n    /** Emits the selection change event. */\n    private _emitSelectionChangeEvent(isUserInput = false): void {\n        this.onSelectionChange.emit(new McOptionSelectionChange(this, isUserInput));\n    }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(\n    optionIndex: number, options: QueryList<McOption>,\n    optionGroups: QueryList<McOptgroup>\n): number {\n\n    if (optionGroups.length) {\n        const optionsArray = options.toArray();\n        const groups = optionGroups.toArray();\n\n        let groupCounter = 0;\n\n        for (let i = 0; i < optionIndex + 1; i++) {\n            if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n                groupCounter++;\n            }\n        }\n\n        return groupCounter;\n    }\n\n    return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(\n    optionIndex: number,\n    optionHeight: number,\n    currentScrollPosition: number,\n    panelHeight: number\n): number {\n    const optionOffset = optionIndex * optionHeight;\n\n    if (optionOffset < currentScrollPosition) { return optionOffset; }\n\n    if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n        return Math.max(0, optionOffset - panelHeight + optionHeight);\n    }\n\n    return currentScrollPosition;\n}\n\n","import { ConnectionPositionPair } from '@ptsecurity/cdk/overlay';\n\n\nexport const POSITION_MAP: { [key: string]: ConnectionPositionPair } = {\n    top         : {\n        originX : 'center',\n        originY : 'top',\n        overlayX: 'center',\n        overlayY: 'bottom'\n    },\n    topCenter   : {\n        originX : 'center',\n        originY : 'top',\n        overlayX: 'center',\n        overlayY: 'bottom',\n        offsetX : undefined,\n        offsetY : undefined\n    },\n    topLeft     : {\n        originX : 'start',\n        originY : 'top',\n        overlayX: 'start',\n        overlayY: 'bottom',\n        offsetX : undefined,\n        offsetY : undefined\n    },\n    topRight    : {\n        originX : 'end',\n        originY : 'top',\n        overlayX: 'end',\n        overlayY: 'bottom',\n        offsetX : undefined,\n        offsetY : undefined\n    },\n    right       : {\n        originX : 'end',\n        originY : 'center',\n        overlayX: 'start',\n        overlayY: 'center'\n    },\n    rightTop    : {\n        originX : 'end',\n        originY : 'top',\n        overlayX: 'start',\n        overlayY: 'top',\n        offsetX : undefined,\n        offsetY : undefined\n    },\n    rightBottom : {\n        originX : 'end',\n        originY : 'bottom',\n        overlayX: 'start',\n        overlayY: 'bottom',\n        offsetX : undefined,\n        offsetY : undefined\n    },\n    bottom      : {\n        originX : 'center',\n        originY : 'bottom',\n        overlayX: 'center',\n        overlayY: 'top'\n    },\n    bottomCenter: {\n        originX : 'center',\n        originY : 'bottom',\n        overlayX: 'center',\n        overlayY: 'top'\n    },\n    bottomLeft  : {\n        originX : 'start',\n        originY : 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    bottomRight : {\n        originX : 'end',\n        originY : 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n    },\n    left        : {\n        originX : 'start',\n        originY : 'center',\n        overlayX: 'end',\n        overlayY: 'center'\n    },\n    leftTop     : {\n        originX : 'start',\n        originY : 'top',\n        overlayX: 'end',\n        overlayY: 'top'\n    },\n    leftBottom  : {\n        originX : 'start',\n        originY : 'bottom',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    }\n};\n\nexport const DEFAULT_4_POSITIONS = _objectValues([\n    POSITION_MAP.top, POSITION_MAP.right, POSITION_MAP.bottom, POSITION_MAP.left\n]);\n\nfunction arrayMap<T, S>(array: T[], iteratee: (item: T, index: number, arr: T[]) => S): S[] {\n    let index = -1;\n    const length = array == null ? 0 : array.length;\n    const result = Array(length);\n\n    while (++index < length) {\n        result[ index ] = iteratee(array[ index ], index, array);\n    }\n\n    return result;\n}\nfunction baseValues<T>(object: { [key: string]: T } | T[], props: string[]): T[] {\n    return arrayMap(props,  (key) => {\n        return object[ key ];\n    });\n}\nfunction _objectValues<T>(object: { [key: string]: T } | T[]): T[] {\n    return object == null ? [] : baseValues(object, Object.keys(object));\n}\n","export function getMcFormFieldMissingControlError(): Error {\n  return Error('mc-form-field must contain a McFormFieldControl.');\n}\n","export function getMcInputUnsupportedTypeError(inputType: string): Error {\n    return Error(`Input type \"${inputType}\" isn't supported by mcInput.`);\n}\n","/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMcSelectDynamicMultipleError(): Error {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMcSelectNonArrayValueError(): Error {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMcSelectNonFunctionValueError(): Error {\n    return Error('`compareWith` must be a function.');\n}\n","import { NgModule, Directive, ElementRef, QueryList } from '@angular/core';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(McLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n    selector: '[mc-line], [mcLine]',\n    host: { class: 'mc-line' }\n})\nexport class McLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class McLineSetter {\n    constructor(private _lines: QueryList<McLine>, private _element: ElementRef) {\n        this._setLineClass(this._lines.length);\n\n        this._lines.changes.subscribe(() => {\n            this._setLineClass(this._lines.length);\n        });\n    }\n\n    private _setLineClass(count: number): void {\n        this._resetClasses();\n        if (count === 2 || count === 3) {\n            this._setClass(`mc-${count}-line`, true);\n        } else if (count > 3) {\n            this._setClass(`mc-multi-line`, true);\n        }\n    }\n\n    private _resetClasses(): void {\n        this._setClass('mc-2-line', false);\n        this._setClass('mc-3-line', false);\n        this._setClass('mc-multi-line', false);\n    }\n\n    private _setClass(className: string, isAdd: boolean): void {\n        if (isAdd) {\n            this._element.nativeElement.classList.add(className);\n        } else {\n            this._element.nativeElement.classList.remove(className);\n        }\n    }\n}\n\n@NgModule({\n    imports: [],\n    exports: [McLine],\n    declarations: [McLine]\n})\nexport class McLineModule {}\n","import { Injectable } from '@angular/core';\nimport { FormGroupDirective, NgForm, FormControl } from '@angular/forms';\n\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n    }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({ providedIn: 'root' })\nexport class ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n    }\n}\n","import { Component, ViewEncapsulation, Input, ChangeDetectionStrategy } from '@angular/core';\n\n\nexport type McPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mc-primary .mc-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mc-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'mc-pseudo-checkbox',\n    styleUrls: ['pseudo-checkbox.css'],\n    templateUrl: 'pseudo-checkbox.partial.html',\n    host: {\n        class: 'mc-pseudo-checkbox',\n        '[class.mc-pseudo-checkbox_indeterminate]': 'state === \"indeterminate\"',\n        '[class.mc-pseudo-checkbox_checked]': 'state === \"checked\"',\n        '[class.mc-disabled]': 'disabled'\n    }\n})\nexport class McPseudoCheckbox {\n    @Input() state: McPseudoCheckboxState = 'unchecked';\n\n    @Input() disabled: boolean = false;\n}\n","import { NgModule } from '@angular/core';\n\nimport { McPseudoCheckbox } from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n    exports: [McPseudoCheckbox],\n    declarations: [McPseudoCheckbox]\n})\nexport class McPseudoCheckboxModule {}\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class McMeasureScrollbarService {\n\n    get scrollBarWidth(): number {\n        if (this._scrollbarWidth) {\n            return this._scrollbarWidth;\n        }\n        this.initScrollBarWidth();\n\n        return this._scrollbarWidth;\n    }\n\n    private _scrollbarWidth: number;\n    private scrollbarMeasure = {\n        position: 'absolute',\n        top: '-9999px',\n        width: '50px',\n        height: '50px',\n        overflow: 'scroll'\n    };\n\n    constructor(\n        @Inject(DOCUMENT) private document: any\n    ) {\n        this.initScrollBarWidth();\n    }\n\n    initScrollBarWidth() {\n        const scrollDiv = this.document.createElement('div');\n\n        // tslint:disable-next-line\n        for (const scrollProp in this.scrollbarMeasure) {\n            if (this.scrollbarMeasure.hasOwnProperty(scrollProp)) {\n                scrollDiv.style[scrollProp] = this.scrollbarMeasure[scrollProp];\n            }\n        }\n\n        this.document.body.appendChild(scrollDiv);\n\n        const width = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n\n        this.document.body.removeChild(scrollDiv);\n        this._scrollbarWidth = width;\n    }\n}\n","import { Component, ViewEncapsulation, Input, ChangeDetectionStrategy } from '@angular/core';\n\nimport { mixinDisabled, CanDisable, CanDisableCtor } from '../common-behaviors/index';\n\n\n// Boilerplate for applying mixins to McOptgroup.\n/** @docs-private */\nexport class McOptgroupBase {}\n\nexport const _McOptgroupMixinBase: CanDisableCtor & typeof McOptgroupBase = mixinDisabled(McOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mc-option`.\n */\n@Component({\n    selector: 'mc-optgroup',\n    exportAs: 'mcOptgroup',\n    templateUrl: 'optgroup.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['disabled'],\n    styleUrls: ['optgroup.css'],\n    host: {\n        class: 'mc-optgroup',\n        role: 'group',\n        '[class.mc-optgroup-disabled]': 'disabled',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-labelledby]': '_labelId'\n    }\n})\nexport class McOptgroup extends _McOptgroupMixinBase implements CanDisable {\n    /** Label for the option group. */\n    @Input() label: string;\n\n    /** Unique id for the underlying label. */\n    _labelId: string = `mc-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McPseudoCheckboxModule } from '../selection/index';\n\nimport { McOptgroup } from './optgroup';\nimport { McOption } from './option';\n\n\n@NgModule({\n    imports: [CommonModule, McPseudoCheckboxModule],\n    exports: [McOption, McOptgroup],\n    declarations: [McOption, McOptgroup]\n})\nexport class McOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","import { InjectionToken } from '@angular/core';\n\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MC_LABEL_GLOBAL_OPTIONS =\n    new InjectionToken<LabelOptions>('mc-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n    /**\n     * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n     * Default behavior is assumed to be `auto`.\n     */\n    float?: FloatLabelType;\n}\n","import {\n    animate,\n    state,\n    style,\n    transition,\n    trigger,\n    AnimationTriggerMetadata,\n} from '@angular/animations';\n\n\nexport const fadeAnimation: AnimationTriggerMetadata =  trigger('fadeAnimation', [\n    state('void', style({ opacity: 0 })),\n    state('true', style({ opacity: 1 })),\n    state('false', style({ opacity: 0 })),\n    transition('* => true', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => void', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n]);\n","import {\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { mixinColor, CanColor, CanColorCtor } from '@ptsecurity/mosaic/core';\n\n\n@Directive({\n    selector: '[mc-icon]',\n    host: { class: 'mc mc-icon' }\n})\nexport class McIconCSSStyler {}\n\n\nexport class McIconBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McIconMixinBase: CanColorCtor & typeof McIconBase\n    = mixinColor(McIconBase);\n\n\n@Component({\n    selector: `[mc-icon]`,\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./icon.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['color']\n})\nexport class McIcon extends _McIconMixinBase implements CanColor {\n    constructor(elementRef: ElementRef, @Attribute('mc-icon') iconName: string) {\n        super(elementRef);\n\n        elementRef.nativeElement.classList.add(iconName);\n    }\n\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McIcon,\n    McIconCSSStyler\n} from './icon.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McIcon,\n        McIconCSSStyler\n    ],\n    declarations: [\n        McIcon,\n        McIconCSSStyler\n    ]\n})\nexport class McIconModule {}\n"],"names":["McSplitterAreaDirective","prototype","setOrder","order","this","setStyle","setSize","size","sz","coerceNumberProperty","getSizeProperty","coerceCssPixelValue","getSize","elementRef","nativeElement","getOffsetSizeProperty","getMinSize","styles","getComputedStyle","parseFloat","getMinSizeProperty","isVertical","splitter","direction","style","value","renderer","removeStyle","tslib_1.__decorate","Directive","selector","tslib_1.__metadata","ElementRef","Renderer2","McSplitterComponent","McSplitterModule","NgModule","imports","CommonModule","McIconModule","exports","McGutterDirective","declarations","McToolTipComponent","cdr","_prefix","_positions","DEFAULT_4_POSITIONS","slice","_classMap","_placement","_trigger","visibleSource","BehaviorSubject","$visible","asObservable","mcVisibleChange","EventEmitter","mcMouseEnterDelay","mcMouseLeaveDelay","_onHide","Subject","_closeOnInteraction","availablePositions","POSITION_MAP","Object","defineProperty","get","_title","set","isTitleString","TemplateRef","visible","coerceBooleanProperty","next","emit","unshift","mcPlacement","show","_this","hideTId","clearTimeout","isContentEmpty","showTId","setTimeout","mcVisible","_markForCheck","hide","setClassMap","_a","mcTitle","afterHidden","markForCheck","_handleBodyInteraction","Output","Input","Component","animations","fadeAnimation","template","preserveWhitespaces","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","host","(body:click)","ChangeDetectorRef","MC_TOOLTIP_SCROLL_STRATEGY","InjectionToken","MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","provide","deps","Overlay","useFactory","MC_TOOLTIP_SCROLL_STRATEGY_FACTORY","McTooltipDirective","_overlay","_ngZone","_scrollDispatcher","hostView","_scrollStrategy","_dir","isTooltipOpen","isDynamicTooltip","parentDisabled","_disabled","$unsubscribe","manualListeners","Map","_destroyed","title","updateCompValue","_mouseEnterDelay","_mouseLeaveDelay","_visible","_createOverlay","_overlayRef","strategy","position","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withPositions","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","pipe","takeUntil","subscribe","change","tooltip","onPositionChange","scrollableViewProperties","isOverlayClipped","run","create","positionStrategy","panelClass","scrollStrategy","_updatePosition","detachments","_detach","hasAttached","detach","$event","updatedPlacement","keys","some","key","connectionPair","originX","originY","overlayX","overlayY","handlePositioningUpdate","pos","overlayElement","clientHeight","element","currentContainer","top","parseInt","split","ngOnInit","mcTrigger","forEach","listener","event","addEventListener","ngOnDestroy","dispose","removeEventListener","clear","complete","handleKeydown","e","keyCode","ESCAPE","handleTouchend","getConfig","origin","_getOrigin","overlay","_getOverlayPosition","tslib_1.__assign","main","fallback","originPosition","isLtr","getMcTooltipInvalidPositionError","_invertPosition","x","y","overlayPosition","newX","newY","disabled","overlayRef","_portal","ComponentPortal","attach","instance","property","distinctUntilChanged","data","HostBinding","(keydown)","(touchend)","tslib_1.__param","Inject","Optional","NgZone","ScrollDispatcher","ViewContainerRef","Directionality","McToolTipModule","BrowserAnimationsModule","OverlayModule","providers","entryComponents","VERSION","Version","SELECT_PANEL_PADDING_X","McTimepicker","McTimepicker_1","exportAs","class","[attr.id]","[attr.placeholder]","[disabled]","[required]","[attr.time-format]","[attr.min-time]","[attr.max-time]","[attr.value]","(blur)","(focus)","(input)","(paste)","NG_VALIDATORS","useValue","ɵ1","multi","McFormFieldControl","useExisting","forwardRef","Self","MC_INPUT_VALUE_ACCESSOR","NgControl","NgForm","FormGroupDirective","ErrorStateMatcher","McTimepickerMixinBase","McTimepickerModule","A11yModule","PlatformModule","FormsModule","mcSelectAnimations","transformPanel","trigger","state","transform","minWidth","opacity","transition","group","query","animateChild","animate","fadeInContent","nextUniqueId","MC_SELECT_SCROLL_STRATEGY","MC_SELECT_SCROLL_STRATEGY_PROVIDER","MC_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","McSelectChange","source","McSelectBase","_elementRef","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_McSelectMixinBase","mixinTabIndex","mixinDisabled","mixinErrorState","McSelectTrigger","McSelect","_super","_viewportRuler","_changeDetectorRef","_renderer","_parentFormField","tabIndex","_scrollStrategyFactory","call","_triggerFontSize","_optionIds","_transformOrigin","_panelDoneAnimating","_panelDoneAnimatingStream","_offsetY","controlType","optionSelectionChanges","defer","options","merge","apply","map","option","onSelectionChange","onStable","take","switchMap","openedChange","_openedStream","filter","o","_closedStream","selectionChange","valueChange","hiddenItems","_panelOpen","_required","_scrollTop","_multiple","_uid","_destroy","_focused","_onChange","_onTouched","_compareWith","o1","o2","valueAccessor","id","tslib_1.__extends","McSelect_1","_placeholder","stateChanges","_selectionModel","getMcSelectDynamicMultipleError","fn","getMcSelectNonFunctionValueError","_initializeSelection","_value","newValue","writeValue","_id","SelectionModel","multiple","panelOpen","overlayDir","offsetX","ngAfterContentInit","_initKeyManager","onChange","added","select","removed","deselect","changes","startWith","_resetOptions","ngAfterViewInit","tags","_calculateHiddenItems","ngDoCheck","updateErrorState","ngOnChanges","toggle","close","open","length","_triggerRect","getBoundingClientRect","_keyManager","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","fontSize","_isRtl","_setSelectionByValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","selected","empty","selectedOptions","viewValue","reverse","join","isEmpty","_handleKeydown","_handleOpenKeydown","_handleClosedKeydown","_onFadeInDone","_onFocus","_onBlur","_onAttached","positionChange","detectChanges","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","focus","_calculateOverlayScroll","selectedIndex","scrollBuffer","maxScroll","itemHeight","_getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","Math","min","max","onContainerClick","onRemoveMatcherItem","stopPropagation","visibleItems","totalItemsWidth","_getTotalItemsWidthInMatcher","totalVisibleItemsWidth","tag","offsetTop","offsetHeight","width","itemsCounter","querySelector","matcherList","itemsCounterShowed","matcherListWidth","matcherWidth","triggerClone","cloneNode","remove","appendChild","querySelectorAll","item","isArrowKey","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","ENTER","SPACE","altKey","preventDefault","onKeydown","manager","HOME","END","setFirstItemActive","setLastItemActive","activeItem","A","ctrlKey","hasDeselectedOptions_1","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","Promise","resolve","then","Array","isArray","getMcSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","find","error","isDevMode","console","warn","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","toArray","sort","a","b","sortComparator","indexOf","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getOptionIndex","reduce","result","current","index","undefined","items","_getItemCount","panelHeight","scrollContainerHeight","selectedOptionOffset","_calculateOverlayOffsetY","_checkOverlayWithinViewport","overlayRect","viewportSize","getViewportSize","isRtl","first","leftOverflow","left","rightOverflow","right","round","updatePosition","topSpaceAvailable","bottomSpaceAvailable","height","bottom","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","optionHeightAdjustment","ViewChild","ViewChildren","McTag","QueryList","CdkConnectedOverlay","ContentChildren","McOption","descendants","McOptgroup","ContentChild","Observable","inputs","[attr.tabindex]","[class.mc-disabled]","[class.mc-select-invalid]","[class.mc-select-required]","(window:resize)","MC_OPTION_PARENT_COMPONENT","Attribute","ViewportRuler","McFormField","String","McSelectModule","McOptionModule","McTagModule","McFormFieldModule","ngZone","areas","_gutterSize","isDragging","areaPositionDivider","listeners","_direction","gutterSize","addArea","area","push","initialSize","onMouseDown","leftAreaIndex","rightAreaIndex","leftArea","rightArea","startPoint","screenX","screenY","disableFlex","runOutsideAngular","listen","onMouseUp","onMouseMove","removeArea","indexToRemove","splice","endPoint","offset","newLeftAreaSize","newRightAreaSize","minLeftAreaSize","minRightAreaSize","rightAreaOffset","unsubscribe","pop","_order","_size","getCursor","getState","setAttr","Error","attribute","setAttribute","toBoolean","markRadiosForCheck","McRadioGroup","checkSelectedRadioButton","_selected","checked","_isInitialized","touch","onTouched","emitChangeEvent","McRadioChange","_radios","radio","_changeDetector","controlValueAccessorChangeFn","updateRadioButtonNames","name","updateSelectedRadioFromValue","isAlreadySelected","McRadioButton","MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","role","_McRadioGroupMixinBase","McRadioButtonBase","_McRadioButtonMixinBase","mixinColor","radioGroup","_radioDispatcher","_uniqueId","isFocused","_checked","removeUniqueSelectionListener","newCheckedState","notify","newDisabledState","required","_labelPosition","labelPosition","onInputClick","onInputChange","groupValueChanged","[class.mc-radio-checked]","[class.mc-radio-disabled]","UniqueSelectionDispatcher","McRadioModule","McCommonModule","McTreeNodeDef","McTreeNodeDef_1","CdkTreeNodeDef","McTreeNodePadding","arguments","_baseLeftPadding","_iconWidth","_indent","McTreeNodePadding_1","_withIcon","_paddingIndent","nodeLevel","_treeNode","_tree","treeControl","getLevel","level","_level","leftPadding","isExpandable","_setPadding","CdkTreeNodePadding","McTreeNodeOption","treeSelection","_hasFocus","McTreeNodeOption_1","setSelected","setFocusedOption","_getHeight","getClientRects","_handleFocus","_handleBlur","_handleClick","tabindex","[class.mc-selected]","[class.mc-focused]","[attr.aria-expanded]","[attr.aria-level]","(click)","CdkTreeNode","McTreeSelection","_McTreeSelectionBase","CdkTree","McTreeNavigationChange","McTreeSelectionChange","_differs","autoSelect","noUnselect","navigationChange","McTreeSelection_1","rawValue","log","_onKeyDown","withShift","withCtrl","collapse","expand","toggleFocusedOption","PAGE_UP","setPreviousPageItemActive","PAGE_DOWN","setNextPageItemActive","FocusKeyManager","updateScrollSize","withScrollSize","floor","updateActiveItem","previousIndex_1","previousActiveItemIndex","activeIndex_1","_canDeselectLast","_emitNavigationEvent","focusedIndex","_isValidIndex","focusedOption","_emitChangeEvent","renderNodeChanges","dataDiffer","viewContainer","parentData","_dataDiffer","_nodeOutlet","arrayOfInstances","_embeddedViews","view","viewDef","def","nodes","node","nodeMatchedQueries","matchedQueryIds","nodeData","nodeIndex","reset","notifyOnChanges","CdkTreeNodeOutlet","[tabIndex]","IterableDiffers","MC_TREE_DIRECTIVES","McTreeModule","CdkTreeModule","McTreeFlattener","transformFunction","getChildren","_flattenNode","resultNodes","parentMap","flatNode","children","child","childParentMap","flattenNodes","structuredData","expandFlattenedNodes","results","currentExpand","i","isExpanded","McTreeFlatDataSource","treeFlattener","initialData","_flattenedData","_expandedData","_data","dataNodes","connect","collectionViewer","viewChange","expansionModel","disconnect","DataSource","McTreeNestedDataSource","McTagBase","_McTagMixinBase","_addClassModificatorForIcons","icons","contentChildren","iconElement","previousElementSibling","nextElementSibling","nextSibling","classList","add","previousSibling","firstIconElement","secondIconElement","McIcon","TimeParts","TimeFormats","TIMEFORMAT_PLACEHOLDERS","hh:mm:ss","hh:mm","DEFAULT_TIME_FORMAT","HHmm","HOURS_MINUTES_SECONDS_REGEXP","RegExp","HOURS_MINUTES_REGEXP","HOURS_ONLY_REGEXP","_uniqueComponentIdSuffix","_validatorOnChange","noop","_validator","McTimepickerBase","validate","c","registerOnValidatorChange","inputValueAccessor","focused","_minTime","_maxTime","_inputValueAccessor","_previousNativeValue","Validators","compose","_parseValidator","_minTimeValidator","_maxTimeValidator","_applyInputChanges","_timeFormat","formatValue","timeFormatKey","placeholder","toLowerCase","minValue","_minDTime","_getDateFromTimeString","maxValue","_maxDTime","_dirtyCheckNativeValue","focusChanged","onBlur","onPaste","clipboardUserInput","clipboardData","getData","onInput","initialCursorStart","selectionStart","initialCursorEnd","selectionEnd","isAutocompleteTriggered","_getParsedTimeParts","hoursOnly","hoursAndMinutes","hoursAndMinutesAndSeconds","doTimestringReformat","errors","_createSelectionOfTimeComponentInInput","_isBadInput","setProperty","_getTimeStringFromDate","timeFormat","onKeyDown","_getKeyCode","_upDownTimeByArrowKeys","_switchSelectionBetweenTimeparts","validity","badInput","applyParams","changedTime","timeToApply","_currentDTimeInput","control","updateValueAndValidity","cursorPos","modifiedTimePart","_getTimeEditMetrics","_incrementTime","_decrementTime","_getCursorPositionOfPrevTimePartStart","_getCursorPositionOfNextTimePartStart","code","newEditParams","cursorStartPosition","cursorEndPosition","dateVal","whatToIncrement","seconds","_getTimeDigitsFromDate","hours","minutes","_getDateFromTimeDigits","whatToDecrement","timeString","timeDevider","nextDividerPos","cursorPosition","minutesIndex","hoursIndex","secondsIndex","tempVal","_getNumberWithLeadingZero","getHours","getMinutes","getSeconds","HHmmss","match","trim","Number","resultDate","Date","isNaN","getTime","digit","mcTimepickerParse","text","_isTimeLowerThenMin","mcTimepickerLowerThenMintime","_isTimeGreaterThenMax","mcTimepickerHigherThenMaxtime","timeToCompare","McModalComponent","onButtonClick","button","getButtonCallableProp","isPromise","loading","catch","changeVisibleFromInside","closeResult","handleVisibleStateChange","changeAnimationState","animationState","maskAnimationClassMap","modalAnimationClassMap","_b","contentComponentRef","changeDetectorRef","changeDetector","animateTo","isVisible","window","updateTransformOrigin","formatModalButtons","buttons","type","autoLoading","createDynamicComponent","component","factory","cfr","resolveComponentFactory","childInjector","Injector","McModalRef","parent","parentInjector","mcComponentParams","assign","modalElement","modalContainer","lastPosition","ModalUtil","getLastClickPosition","transformOrigin","offsetLeft","changeBodyOverflow","plusNum","modalControl","openModals","document","body","mcMeasureScrollbarService","scrollBarWidth","read","DOCUMENT","ComponentFactoryResolver","McMeasureScrollbarService","McModalControlService","CssUnitPipe","defaultUnit","formatted","Pipe","ModalBuilderForService","createModal","mcGetContainer","changeProps","modalRef","mcAfterClose","destroyModal","keydownEvents","mcCloseByESC","getInstance","McModalService","afterAllClose","closeAll","mcOnCancel","mcWidth","confirm","confirmType","mcOnOk","mcModalType","mcClassName","mcMaskClosable","success","simpleConfirm","delete","mcCancelText","Injectable","McModalModule","McButtonModule","MC_NAVBAR_CONTAINER","MC_NAVBAR_ITEM","MC_NAVBAR_BRAND","MC_NAVBAR_TITLE","McNavbarLogo","McNavbarBrand","McNavbarTitle","McNavbarItemBase","_McNavbarMixinBase","McNavbarItem","_focusMonitor","_platform","_cdRef","dropdownItems","isCollapsed","_subscription","Subscription","encodeURI","dropdownContent","denyClickIfDisabled","_focusMonitor$","monitor","hasDropdownContent","listenClickOutside","startListenFocusDropdownItems","stopMonitoring","stopListenFocusDropdownItems","isActiveDropdownLink","link","isBrowser","location","href","handleClickByItem","toggleDropdown","isNavbarItem","target","contains","handleClickByDropdownItem","forceCloseDropdown","_dropdownElements","el","events","eventListeners","hasAttribute","stopImmediatePropagation","[attr.disabled]","FocusMonitor","Platform","McNavbarContainer","CollapsibleItem","_collapsed","processCollapsed","collapsed","updateCollapsedClass","CachedItemWidth","itemsForCollapse","_collapsedItemsWidth","calculateAndCacheCollapsedItemsWidth","updateTitle","acc","getTitle","computedTitle","getAttribute","decodeURI","innerText","removeAttribute","McNavbar","forceRecalculateItemsWidth","resizeDebounceInterval","firstLevelElement","secondLevelElements","resizeObserver","fromEvent","debounceTime","_resizeSubscription","updateCollapsed","bind","_itemsWidths","calculateAndCacheItemsWidth","_totalItemsWidths","calculateAndCacheTotalItemsWidth","collapseDelta","maxAllowedWidth","itemsWidths","canCollapse","collapsedItemsWidth","getOuterElementWidth","getPropertyValue","allItemsSelector","allItems","from","getItemsForCollapse","McNavbarModule","idIterator","McProgressBarBase","_McProgressBarMixinBase","McProgressBar","mode","ThemePalette","Primary","McProgressBarModule","McProgressSpinnerBase","_McProgressSpinnerMixinBase","McProgressSpinner","percentage","McProgressSpinnerModule","McRadioGroupBase","NG_VALUE_ACCESSOR","_name","v","McSidebarComponent","[class.mc-layout-sidebar]","[class.mc-layout-sidebar-collapsed]","[style.flex]","[style.max-width.px]","[style.min-width.px]","[style.width.px]","Host","McLayoutComponent","McLayoutModule","McContentComponent","McFooterComponent","McHeaderComponent","McListOption","_element","listSelection","checkboxPosition","_reportValueChange","wasSelected_1","_lineSetter","McLineSetter","_lines","_removeOptionFromList","getLabel","_text","textContent","_getHostElement","McLine","McListSelection","MC_SELECTION_LIST_VALUE_ACCESSOR","McListSelectionChange","McListSelectionBase","_McListSelectionMixinBase","horizontal","_modelChanges","EMPTY","_","_tempValues","_setOptionsFromValues","_i","_c","selectAll","deselectAll","values","getSelectedOptionValues","listOption","optionIndex","setPreviousItemActive","setNextItemActive","_getOptionByValue","Boolean","McListBase","McList","McListSubheaderCssStyler","McListItemBase","McListItem","McListModule","McLineModule","McLinkBase","_McLinkBase","McLink","McLinkModule","parentService","rootOpenModals","rootAfterAllClose","rootRegisteredMetaMap","registeredMetaMap","registerModal","hasRegistered","afterOpenSubscription","afterOpen","afterCloseSubscription","afterClose","removeOpenModal","has","SkipSelf","listenDocumentClick","clientX","clientY","ModalUtil$1","_mcVisible","mcZIndex","_mcClosable","_mcMask","_mcMaskClosable","mcAfterOpen","mcOkType","_mcOkLoading","_mcCancelLoading","mcOkText","isComponent","mcContent","isModalButtons","mcFooter","container","HTMLElement","OverlayRef","firstChange","bodyContainer","insert","autoFocusButtonOk","destroy","triggerOk","onClickOkCancel","triggerCancel","getContentComponentRef","getContentComponent","getElement","onClickMask","mcMask","isModalType","onClickCloseBtn","ok","cancel","loadingKey","caseClose_1","doClose","handleThen","isNonEmptyString","isTemplateRef","Type","animation","prop","args","McButton","McAnchor","McIconButton","McButtonCSSStyler","McXSButtonCSSStyler","McSMButtonCSSStyler","McLGButtonCSSStyler","McXLButtonCSSStyler","McIconButtonCSSStyler","MC_CHECKBOX_CLICK_ACTION","MC_CHECKBOX_CONTROL_VALUE_ACCESSOR","McCheckbox","TransitionCheckState","McCheckboxChange","McCheckboxBase","_McCheckboxMixinBase","_clickAction","ariaLabel","ariaLabelledby","indeterminateChange","_currentAnimationClass","_currentCheckState","Init","_controlValueAccessorChangeFn","_indeterminate","_inputElement","focusOrigin","_onInputFocusChange","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_onLabelTextChange","_getAriaChecked","indeterminate","newState","oldState","_onInputClick","focusVia","_onInteractionEvent","[id]","[class.mc-checkbox-indeterminate]","[class.mc-checkbox-checked]","[class.mc-checkbox-disabled]","[class.mc-checkbox-label-before]","MC_CHECKBOX_REQUIRED_VALIDATOR","McCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","McCheckboxModule","McDivider","_vertical","_inset","[attr.aria-orientation]","[class.mc-divider-vertical]","[class.mc-divider-inset]","McDividerModule","McCleaner","McFormFieldNumberControl","McHint","McPrefix","McStepper","stepUp","stepDown","onStepUp","onStepDown","McSuffix","McFormFieldBase","_McFormFieldMixinBase","_labelId","hovered","_validateControlChild","_control","_numberControl","hasStepper","_stepper","valueChanges","ngAfterContentChecked","clearValue","hasCleaner","onHoverChanged","isHovered","step","_shouldForward","getMcFormFieldMissingControlError","_hint","_suffix","_cleaner","[class.mc-form-field_invalid]","[class.mc-form-field_disabled]","[class.mc-form-field_has-prefix]","[class.mc-form-field_has-suffix]","[class.mc-form-field_has-cleaner]","[class.mc-form-field_has-stepper]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","(mouseenter)","(mouseleave)","McFormFieldWithoutBorders","res","MC_INPUT_INVALID_TYPES","BIG_STEP","SMALL_STEP","McInputBase","_McInputMixinBase","McNumberInput","_model","bigStep","isDigit","Infinity","_host","self","getPrototypeOf","normalizeSplitter","McNumberInput_1","_focusChanged","minuses","NUMPAD_MINUS","DASH","FF_MINUS","serviceKeys","DELETE","BACKSPACE","TAB","arrows","allowedKeys","concat","isIEPeriod","isNotIEPeriod","metaKey","C","V","X","F1","F12","EDGE","TRIDENT","ZERO","NINE","NUMPAD_ZERO","NUMPAD_NINE","valueAsNumber","toString","update","replace","isFloat","isInt","test","NgModel","McInput","_type","_neverEmptyInputTypes","t","getSupportedInputTypes","McInput_1","_validateType","_onInput","_isNeverEmpty","getMcInputUnsupportedTypeError","McInputMono","MIN_VALIDATOR","MinValidator","_createValidator","[attr.min]","MAX_VALIDATOR","MaxValidator","[attr.max]","McInputModule","[class.mc-layout-content]","[class.mc-layout-footer]","[class.mc-layout-header]","hasSidebar","[class.mc-layout]","[class.mc-layout-has-sidebar]","mcLayoutComponent","_mcWidth","mcCollapsedWidth","mcCollapsedChange","collapsible","mcCollapsed","__extends","d","__","constructor","extendStatics","__decorate","decorators","desc","r","getOwnPropertyDescriptor","Reflect","decorate","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","isBoolean","val","MC_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","Default","_color","colorPalette","defaultTabIndex","_tabIndex","errorState","matcher","errorStateMatcher","isErrorState","optionsArray","groups","groupCounter","optionHeight","currentScrollPosition","optionOffset","arrayMap","array","iteratee","baseValues","object","props","inputType","sanitizeNumber","isFinite","getPrecision","arr","pow","value1","value2","precision","obj","scrollStrategies","reposition","scrollThrottle","setPrototypeOf","__proto__","p","hasOwnProperty","__assign","s","n","MC_SANITY_CHECKS","providedIn","_sanityChecksEnabled","_hasDoneGlobalChecks","_document","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","createElement","computedStyle","display","removeChild","BidiModule","_setLineClass","count","_resetClasses","_setClass","className","isAdd","ShowOnDirtyErrorStateMatcher","form","invalid","dirty","submitted","touched","McPseudoCheckbox","[class.mc-pseudo-checkbox_indeterminate]","[class.mc-pseudo-checkbox_checked]","McPseudoCheckboxModule","scrollbarMeasure","overflow","initScrollBarWidth","_scrollbarWidth","scrollDiv","scrollProp","offsetWidth","clientWidth","McOptgroupBase","_McOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mc-optgroup-disabled]","[attr.aria-disabled]","[attr.aria-labelledby]","_uniqueIdCounter","McOptionSelectionChange","_parent","_active","_mostRecentViewValue","disableRipple","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_getTabIndex","ngAfterViewChecked","[class.mc-option-multiple]","[class.mc-active]","MC_LABEL_GLOBAL_OPTIONS","topCenter","offsetY","topLeft","topRight","rightTop","rightBottom","bottomCenter","bottomLeft","bottomRight","leftTop","leftBottom","McIconCSSStyler","McIconBase","_McIconMixinBase","iconName","queries","McButtonBase","_McButtonMixinBase","focusMonitor","_haltDisabledEvents"],"mappings":"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"}