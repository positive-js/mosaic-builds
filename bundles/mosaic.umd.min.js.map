{"version":3,"file":"mosaic.umd.min.js","sources":["../../packages/mosaic/vertical-navbar/vertical-navbar-item.component.ts","../../packages/mosaic/vertical-navbar/vertical-navbar.component.ts","../../packages/mosaic/vertical-navbar/vertical-navbar.module.ts","../../packages/mosaic/version.ts","../../packages/mosaic/core/select/events.ts","../../packages/mosaic/core/select/constants.ts","../../packages/mosaic/autocomplete/autocomplete-trigger.directive.ts","../../packages/mosaic/dropdown/dropdown-trigger.ts","../../packages/mosaic/select/select.component.ts","../../packages/mosaic/timepicker/timepicker.constants.ts","../../packages/mosaic/sidepanel/sidepanel-directives.ts","../../packages/mosaic/sidepanel/sidepanel.module.ts","../../packages/mosaic/splitter/splitter.component.ts","../../packages/mosaic/splitter/splitter.module.ts","../../packages/mosaic/toggle/toggle.component.ts","../../packages/mosaic/toggle/toggle.module.ts","../../packages/mosaic/tooltip/tooltip.component.ts","../../packages/mosaic/tooltip/tooltip.module.ts","../../packages/mosaic/tree-select/tree-select.component.ts","../../packages/mosaic/tree-select/tree-select.module.ts","../../packages/mosaic/textarea/textarea.component.ts","../../packages/mosaic/textarea/textarea.module.ts","../../packages/mosaic/timepicker/timepicker.ts","../../packages/mosaic/timepicker/timepicker.module.ts","../../packages/mosaic/sidepanel/sidepanel-config.ts","../../packages/mosaic/sidepanel/sidepanel-animations.ts","../../packages/mosaic/sidepanel/sidepanel-container.component.ts","../../packages/mosaic/sidepanel/sidepanel-ref.ts","../../packages/mosaic/sidepanel/sidepanel.service.ts","../../packages/mosaic/select/select.module.ts","../../packages/mosaic/tags/tag.component.ts","../../packages/mosaic/tags/tag-list.component.ts","../../packages/mosaic/tags/tag-input.ts","../../packages/mosaic/tags/tag.module.ts","../../packages/mosaic/tabs/tab-content.ts","../../packages/mosaic/tabs/tab-label.ts","../../packages/mosaic/tabs/tab.ts","../../packages/mosaic/tabs/tabs-animations.ts","../../packages/mosaic/tabs/tab-body.ts","../../packages/mosaic/tabs/tab-label-wrapper.ts","../../packages/mosaic/tabs/tab-header.ts","../../packages/mosaic/tabs/tab-group.ts","../../packages/mosaic/tabs/tab-nav-bar/tab-nav-bar.ts","../../packages/mosaic/tabs/tabs.module.ts","../../packages/mosaic/tags/tag-default-options.ts","../../packages/mosaic/popover/popover.component.ts","../../packages/mosaic/popover/popover.module.ts","../../packages/mosaic/progress-bar/progress-bar.component.ts","../../packages/mosaic/progress-bar/progress-bar.module.ts","../../packages/mosaic/progress-spinner/progress-spinner.component.ts","../../packages/mosaic/progress-spinner/progress-spinner.module.ts","../../packages/mosaic/radio/radio.component.ts","../../packages/mosaic/radio/radio.module.ts","../../packages/mosaic/tree/node.ts","../../packages/mosaic/tree/padding.ts","../../packages/mosaic/tree/toggle.ts","../../packages/mosaic/tree/tree-option.ts","../../packages/mosaic/tree/tree-selection.ts","../../packages/mosaic/tree/tree.module.ts","../../packages/mosaic/tree/data-source/flat-data-source.ts","../../packages/mosaic/tree/data-source/nested-data-source.ts","../../packages/mosaic/modal/modal.component.ts","../../packages/mosaic/modal/css-unit.pipe.ts","../../packages/mosaic/modal/modal.service.ts","../../packages/mosaic/modal/modal.module.ts","../../packages/mosaic/navbar/navbar.component.ts","../../packages/mosaic/navbar/navbar.module.ts","../../packages/mosaic/popover/popover-animations.ts","../../packages/mosaic/list/list-selection.component.ts","../../packages/mosaic/list/list.component.ts","../../packages/mosaic/list/list.module.ts","../../packages/mosaic/link/link.component.ts","../../packages/mosaic/link/link.module.ts","../../packages/mosaic/modal/modal-control.service.ts","../../packages/mosaic/modal/modal-ref.class.ts","../../packages/mosaic/modal/modal-util.ts","../../packages/mosaic/datepicker/datepicker-input.ts","../../packages/mosaic/datepicker/datepicker-toggle.ts","../../packages/mosaic/datepicker/datepicker-module.ts","../../packages/mosaic/divider/divider.component.ts","../../packages/mosaic/divider/divider.module.ts","../../packages/mosaic/dropdown/dropdown-content.ts","../../packages/mosaic/dropdown/dropdown-panel.ts","../../packages/mosaic/dropdown/dropdown-item.ts","../../packages/mosaic/dropdown/dropdown-animations.ts","../../packages/mosaic/dropdown/dropdown.component.ts","../../packages/mosaic/dropdown/dropdown.module.ts","../../packages/mosaic/layout/content.component.ts","../../packages/mosaic/layout/footer.component.ts","../../packages/mosaic/layout/header.component.ts","../../packages/mosaic/layout/layout.component.ts","../../packages/mosaic/layout/sidebar.component.ts","../../packages/mosaic/layout/layout.module.ts","../../packages/mosaic/datepicker/multi-year-view.ts","../../packages/mosaic/datepicker/year-view.ts","../../packages/mosaic/datepicker/calendar.ts","../../packages/mosaic/datepicker/datepicker-animations.ts","../../packages/mosaic/datepicker/datepicker.ts","../../packages/mosaic/card/card.component.ts","../../packages/mosaic/card/card.module.ts","../../packages/mosaic/checkbox/checkbox-config.ts","../../packages/mosaic/checkbox/checkbox.ts","../../packages/mosaic/checkbox/checkbox-required-validator.ts","../../packages/mosaic/checkbox/checkbox-module.ts","../../packages/mosaic/input/input-value-accessor.ts","../../packages/mosaic/input/stepperUtils.ts","../../packages/mosaic/input/input.ts","../../packages/mosaic/input/input-number-validators.ts","../../packages/mosaic/input/input.module.ts","../../packages/mosaic/datepicker/datepicker-intl.ts","../../packages/mosaic/datepicker/calendar-body.ts","../../packages/mosaic/datepicker/month-view.ts","../../packages/mosaic/autocomplete/autocomplete.component.ts","../../packages/mosaic/autocomplete/autocomplete-origin.directive.ts","../../packages/mosaic/autocomplete/autocomplete.module.ts","../../packages/mosaic/button/button.component.ts","../../packages/mosaic/button/button.module.ts","../../packages/mosaic/button-toggle/button-toggle.component.ts","../../packages/mosaic/button-toggle/button-toggle.module.ts","../../node_modules/tslib/tslib.es6.js","../../packages/mosaic/core/utils/utils.ts","../../packages/mosaic/core/common-behaviors/common-module.ts","../../packages/mosaic/core/common-behaviors/disabled.ts","../../packages/mosaic/core/common-behaviors/color.ts","../../packages/mosaic/core/common-behaviors/tabindex.ts","../../packages/mosaic/core/common-behaviors/error-state.ts","../../packages/mosaic/core/option/option.ts","../../packages/mosaic/core/overlay/overlay-position-map.ts","../../packages/mosaic/core/select/errors.ts","../../packages/mosaic/form-field/form-field-errors.ts","../../packages/mosaic/input/input-errors.ts","../../packages/mosaic/datepicker/datepicker-errors.ts","../../packages/mosaic/dropdown/dropdown-errors.ts","../../packages/mosaic/vertical-navbar/vertical-navbar.animation.ts","../../packages/mosaic/core/line/line.ts","../../packages/mosaic/core/error/error-options.ts","../../packages/mosaic/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../packages/mosaic/core/selection/index.ts","../../packages/mosaic/core/services/measure-scrollbar.service.ts","../../packages/mosaic/core/option/optgroup.ts","../../packages/mosaic/core/option/index.ts","../../packages/mosaic/core/label/label-options.ts","../../packages/mosaic/core/animation/fade-animations.ts","../../packages/mosaic/core/animation/animation.ts","../../packages/mosaic/core/select/animations.ts","../../packages/mosaic/icon/icon.component.ts","../../packages/mosaic/icon/icon.module.ts","../../packages/mosaic/form-field/cleaner.ts","../../packages/mosaic/form-field/form-field-control.ts","../../packages/mosaic/form-field/form-field-number-control.ts","../../packages/mosaic/form-field/hint.ts","../../packages/mosaic/form-field/prefix.ts","../../packages/mosaic/form-field/stepper.ts","../../packages/mosaic/form-field/suffix.ts","../../packages/mosaic/form-field/form-field.ts","../../packages/mosaic/form-field/form-field.module.ts"],"sourcesContent":["import {\n    ChangeDetectionStrategy,\n    Component,\n    Input,\n    ViewEncapsulation,\n    Directive,\n    ElementRef,\n    OnDestroy,\n    Optional,\n    Self\n} from '@angular/core';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { CanDisable, mixinDisabled, CanDisableCtor } from '@ptsecurity/mosaic/core';\nimport { McDropdownTrigger } from '@ptsecurity/mosaic/dropdown';\n\n\n@Directive({\n    selector: 'mc-vertical-navbar-item-icon',\n    host: {\n        class: 'mc-vertical-navbar__item-icon'\n    }\n})\nexport class McVerticalNavbarItemIcon {}\n\n\n@Component({\n    selector: 'mc-vertical-navbar-badge',\n    template: `\n        <span class=\"mc-badge mc-badge_light\">\n            <ng-content></ng-content>\n        </span>\n    `,\n    host: {\n        class: 'mc-vertical-navbar__badge'\n    }\n})\nexport class McVerticalNavbarItemBadge {}\n\n\nclass McVerticalNavbarItemBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McVerticalNavbarMixinBase: CanDisableCtor & typeof McVerticalNavbarItemBase\n    = mixinDisabled(McVerticalNavbarItemBase);\n\n\n@Component({\n    selector: 'a[mc-vertical-navbar-item], mc-vertical-navbar-item',\n    templateUrl: './vertical-navbar-item.component.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    styleUrls: ['./vertical-navbar-item.component.css'],\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': 'disabled ? -1 : 0'\n    }\n})\nexport class McVerticalNavbarItem extends _McVerticalNavbarMixinBase implements CanDisable, OnDestroy {\n    @Input() tabIndex: number = 0;\n\n    constructor(\n        private element: ElementRef,\n        private focusMonitor: FocusMonitor,\n        @Optional() @Self() private trigger: McDropdownTrigger\n    ) {\n        super(element);\n\n        this.focusMonitor.monitor(this.element.nativeElement).subscribe();\n    }\n\n    get hasDropdownAttached() {\n        return !! this.trigger;\n    }\n\n    ngOnDestroy() {\n        this.focusMonitor.stopMonitoring(this.element.nativeElement);\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ViewEncapsulation,\n    Input,\n    ChangeDetectorRef\n} from '@angular/core';\n\nimport { toggleVerticalNavbarAnimation } from './vertical-navbar.animation';\n\n\n@Directive({\n    selector: 'mc-vertical-navbar-header, a[mc-vertical-navbar-header]',\n    host: {\n        class: 'mc-vertical-navbar__header'\n    }\n})\nexport class McVerticalNavbarHeader {}\n\n@Directive({\n    selector: 'mc-vertical-navbar-title',\n    host: {\n        class: 'mc-vertical-navbar__title'\n    }\n})\nexport class McVerticalNavbarTitle {}\n\n@Component({\n    selector: 'mc-vertical-navbar',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    templateUrl: './vertical-navbar.component.html',\n    styleUrls: ['./vertical-navbar.component.css'],\n    encapsulation: ViewEncapsulation.None,\n    animations: [\n        toggleVerticalNavbarAnimation()\n    ]\n})\nexport class McVerticalNavbar {\n\n    @Input() expanded: boolean = false;\n\n    constructor(\n        private cd: ChangeDetectorRef\n    ) {}\n\n    toggle() {\n        this.expanded = !this.expanded;\n        this.cd.markForCheck();\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport {\n    McVerticalNavbarItem,\n    McVerticalNavbarItemBadge,\n    McVerticalNavbarItemIcon\n} from './vertical-navbar-item.component';\nimport { McVerticalNavbar, McVerticalNavbarHeader, McVerticalNavbarTitle } from './vertical-navbar.component';\n\n\nconst COMPONENTS = [\n    McVerticalNavbar,\n    McVerticalNavbarTitle,\n    McVerticalNavbarItem,\n    McVerticalNavbarItemIcon,\n    McVerticalNavbarItemBadge,\n    McVerticalNavbarHeader\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        McIconModule\n    ],\n    exports: COMPONENTS,\n    declarations: COMPONENTS\n})\nexport class McVerticalNavbarModule {}\n","import { Version } from '@angular/core';\n\n\nexport const VERSION = new Version('1.0.0-beta.6-1c7267f');\n","export const selectEvents = 'selectEvents';\n","import { InjectionToken } from '@angular/core';\nimport { IScrollStrategy, Overlay, RepositionScrollStrategy } from '@ptsecurity/cdk/overlay';\n\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 224;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 1;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\n/* tslint:disable-next-line:no-magic-numbers */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MC_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-select-scroll-strategy');\n\n/** @docs-private */\nexport function mcSelectScrollStrategyProviderFactory(overlay: Overlay):\n    () => RepositionScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MC_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MC_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: mcSelectScrollStrategyProviderFactory\n};\n","import { DOCUMENT } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    forwardRef,\n    Host,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    Optional,\n    ViewContainerRef\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW } from '@ptsecurity/cdk/keycodes';\nimport {\n    FlexibleConnectedPositionStrategy,\n    Overlay,\n    OverlayConfig,\n    OverlayRef,\n    IPositionStrategy,\n    IScrollStrategy, IConnectedPosition\n} from '@ptsecurity/cdk/overlay';\nimport { TemplatePortal } from '@ptsecurity/cdk/portal';\nimport { ViewportRuler } from '@ptsecurity/cdk/scrolling';\nimport {\n    countGroupLabelsBeforeOption,\n    getOptionScrollPosition,\n    McOption,\n    McOptionSelectionChange\n} from '@ptsecurity/mosaic/core';\nimport { McFormField } from '@ptsecurity/mosaic/form-field';\nimport { Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable } from 'rxjs';\nimport { filter, take, switchMap, delay, tap, map } from 'rxjs/operators';\n\nimport { McAutocompleteOrigin } from './autocomplete-origin.directive';\nimport { McAutocomplete } from './autocomplete.component';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 32;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\nexport const AUTOCOMPLETE_BORDER_WIDTH: number = 2;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MC_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-autocomplete-scroll-strategy');\n\n// tslint:disable-next-line naming-convention\nexport function MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => IScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\nexport const MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McAutocompleteTrigger),\n    multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMcAutocompleteMissingPanelError(): Error {\n    return Error('Attempting to open an undefined instance of `mc-autocomplete`. ' +\n        'Make sure that the id passed to the `mcAutocomplete` is correct and that ' +\n        'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n    selector: `input[mcAutocomplete], textarea[mcAutocomplete]`,\n    host: {\n        class: 'mc-autocomplete-trigger',\n        '[attr.autocomplete]': 'autocompleteAttribute',\n        // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n        // a little earlier. This avoids issues where IE delays the focusing of the input.\n        '(focusin)': 'handleFocus()',\n        '(blur)': 'onTouched()',\n        '(input)': 'handleInput($event)',\n        '(keydown)': 'handleKeydown($event)',\n        '(click)': 'handleClick($event)'\n    },\n    exportAs: 'mcAutocompleteTrigger',\n    providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class McAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n    // @ts-ignore\n    readonly optionSelections: Observable<McOptionSelectionChange> = defer(() => {\n        if (this.autocomplete && this.autocomplete.options) {\n            return merge(...this.autocomplete.options.map((option) => option.onSelectionChange));\n        }\n\n        // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n        // Return a stream that we'll replace with the real one once everything is in place.\n        return this.zone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelections));\n    });\n\n    /** The currently active option, coerced to MatOption type. */\n    get activeOption(): McOption | null {\n        if (this.autocomplete && this.autocomplete.keyManager) {\n            return this.autocomplete.keyManager.activeItem;\n        }\n\n        return null;\n    }\n\n    get panelOpen(): boolean {\n        return this.overlayAttached && this.autocomplete.showPanel;\n    }\n\n    /** The autocomplete panel to be attached to this trigger. */\n    @Input('mcAutocomplete') autocomplete: McAutocomplete;\n\n    /**\n     * Reference relative to which to position the autocomplete panel.\n     * Defaults to the autocomplete trigger element.\n     */\n    @Input('mcAutocompleteConnectedTo') connectedTo: McAutocompleteOrigin;\n\n    /**\n     * `autocomplete` attribute to be set on the input element.\n     * @docs-private\n     */\n    @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     */\n    @Input('mcAutocompleteDisabled')\n    get autocompleteDisabled(): boolean {\n        return this._autocompleteDisabled;\n    }\n\n    set autocompleteDisabled(value: boolean) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n\n    private _autocompleteDisabled = false;\n\n    private overlayAttached: boolean = false;\n\n    private overlayRef: OverlayRef | null;\n\n    private portal: TemplatePortal;\n\n    private componentDestroyed = false;\n\n    private scrollStrategy: () => IScrollStrategy;\n\n    /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n    private previousValue: string | number | null;\n\n    /** Strategy that is used to position the panel. */\n    private positionStrategy: FlexibleConnectedPositionStrategy;\n\n    /** The subscription for closing actions (some are bound to document). */\n    private closingActionsSubscription: Subscription;\n\n    /** Subscription to viewport size changes. */\n    private viewportSubscription = Subscription.EMPTY;\n\n    /**\n     * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n     * closed autocomplete from being reopened if the user switches to another browser tab and then\n     * comes back.\n     */\n    private canOpenOnNextFocus = true;\n\n    /** Stream of keyboard events that can close the panel. */\n    private readonly closeKeyEventStream = new Subject<void>();\n\n    constructor(\n        private elementRef: ElementRef<HTMLInputElement>,\n        private viewContainerRef: ViewContainerRef,\n        private changeDetectorRef: ChangeDetectorRef,\n        private overlay: Overlay,\n        private zone: NgZone,\n        @Inject(MC_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n        @Optional() private dir: Directionality,\n        @Optional() @Host() private formField: McFormField,\n        @Optional() @Inject(DOCUMENT) private document: any,\n        // @breaking-change 8.0.0 Make `_viewportRuler` required.\n        private viewportRuler?: ViewportRuler\n    ) {\n        // tslint:disable-next-line no-typeof-undefined\n        if (typeof window !== 'undefined') {\n            zone.runOutsideAngular(() => {\n                window.addEventListener('blur', this.windowBlurHandler);\n            });\n        }\n\n        this.scrollStrategy = scrollStrategy;\n    }\n\n    ngOnDestroy() {\n        // tslint:disable-next-line no-typeof-undefined\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this.windowBlurHandler);\n        }\n\n        this.viewportSubscription.unsubscribe();\n        this.componentDestroyed = true;\n        this.destroyPanel();\n        this.closeKeyEventStream.complete();\n    }\n\n    /** `View -> model callback called when value changes` */\n    // tslint:disable-next-line no-empty\n    onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when autocomplete has been touched` */\n    // tslint:disable-next-line no-empty\n    onTouched: () => void = () => {};\n\n    /** Opens the autocomplete suggestion panel. */\n    openPanel(): void {\n        this.attachOverlay();\n    }\n\n    closePanel(): void {\n        if (!this.overlayAttached) { return; }\n\n        if (this.panelOpen) {\n            this.autocomplete.closed.emit();\n        }\n\n        this.autocomplete.isOpen = this.overlayAttached = false;\n\n        if (this.overlayRef && this.overlayRef.hasAttached()) {\n            this.overlayRef.detach();\n            this.closingActionsSubscription.unsubscribe();\n        }\n\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this.componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this.changeDetectorRef.detectChanges();\n        }\n    }\n\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n    updatePosition(): void {\n        if (this.overlayAttached) {\n            this.overlayRef!.updatePosition();\n        }\n    }\n\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    get panelClosingActions(): Observable<McOptionSelectionChange | null> {\n        return merge(\n            this.optionSelections,\n            this.autocomplete.keyManager.tabOut.pipe(filter(() => this.overlayAttached)),\n            this.closeKeyEventStream,\n            this.getOutsideClickStream(),\n            this.overlayRef ?\n                this.overlayRef.detachments().pipe(filter(() => this.overlayAttached)) :\n                observableOf()\n        ).pipe(\n            // Normalize the output so we return a consistent type.\n            map((event) => event instanceof McOptionSelectionChange ? event : null)\n        );\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any): void {\n        Promise.resolve(null).then(() => this.setTriggerValue(value));\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => {}): void {\n        this.onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => {}) {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.elementRef.nativeElement.disabled = isDisabled;\n    }\n\n    handleKeydown(event: KeyboardEvent): void {\n        // tslint:disable-next-line deprecation\n        const keyCode = event.keyCode;\n\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE) {\n            event.preventDefault();\n        }\n\n        if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n            this.activeOption.selectViaInteraction();\n            this.resetActiveItem();\n            event.preventDefault();\n        } else if (this.autocomplete) {\n            const prevActiveItem = this.autocomplete.keyManager.activeItem;\n\n            if (this.panelOpen || keyCode === TAB) {\n                this.autocomplete.onKeydown(event);\n            } else if (keyCode === DOWN_ARROW && this.canOpen()) {\n                this.openPanel();\n            }\n\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n            if (isArrowKey || this.autocomplete.keyManager.activeItem !== prevActiveItem) {\n                this.scrollToOption();\n            }\n        }\n    }\n\n    handleInput(event: KeyboardEvent): void {\n        const target = event.target as HTMLInputElement;\n        let value: number | string | null = target.value;\n\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value === '' ? null : parseFloat(value);\n        }\n\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this.previousValue !== value) {\n            this.previousValue = value;\n            this.onChange(value);\n\n            if (this.canOpen() && this.document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n\n    handleFocus(): void {\n        if (!this.canOpenOnNextFocus) {\n            this.canOpenOnNextFocus = true;\n        } else if (this.canOpen()) {\n            this.previousValue = this.elementRef.nativeElement.value;\n            this.attachOverlay();\n        }\n    }\n\n    handleClick($event: MouseEvent) {\n        if (this.canOpen() && this.document.activeElement === $event.target) {\n            this.openPanel();\n        }\n    }\n\n    /** Stream of clicks outside of the autocomplete panel. */\n    private getOutsideClickStream(): Observable<any> {\n        if (!this.document) { return observableOf(null); }\n\n        return fromEvent<MouseEvent>(this.document, 'click')\n            .pipe(filter((event) => {\n                const clickTarget = event.target as HTMLElement;\n                const formField = this.formField ?\n                    this.formField._elementRef.nativeElement : null;\n\n                return this.overlayAttached &&\n                    clickTarget !== this.elementRef.nativeElement &&\n                    (!formField || !formField.contains(clickTarget)) &&\n                    (!!this.overlayRef && !this.overlayRef.overlayElement.contains(clickTarget));\n            }));\n    }\n\n    /**\n     * Event handler for when the window is blurred. Needs to be an\n     * arrow function in order to preserve the context.\n     */\n    private windowBlurHandler = () => {\n        // If the user blurred the window while the autocomplete is focused, it means that it'll be\n        // refocused when they come back. In this case we want to skip the first focus event, if the\n        // pane was closed, in order to avoid reopening it unintentionally.\n        this.canOpenOnNextFocus = this.document.activeElement !== this.elementRef.nativeElement || this.panelOpen;\n    }\n\n    /**\n     * Given that we are not actually focusing active options, we must manually adjust scroll\n     * to reveal options below the fold. First, we find the offset of the option from the top\n     * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n     * the panel height + the option height, so the active option will be just visible at the\n     * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n     * will become the offset. If that offset is visible within the panel already, the scrollTop is\n     * not adjusted.\n     */\n    private scrollToOption(): void {\n        const index = this.autocomplete.keyManager.activeItemIndex || 0;\n        const labelCount = countGroupLabelsBeforeOption(index,\n            this.autocomplete.options, this.autocomplete.optionGroups);\n\n        const newScrollPosition = getOptionScrollPosition(\n            index + labelCount,\n            AUTOCOMPLETE_OPTION_HEIGHT,\n            this.autocomplete.getScrollTop(),\n            AUTOCOMPLETE_PANEL_HEIGHT\n        );\n\n        this.autocomplete.setScrollTop(newScrollPosition);\n    }\n\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    private subscribeToClosingActions(): Subscription {\n        const firstStable = this.zone.onStable.asObservable()\n            .pipe(take(1));\n        const optionChanges = this.autocomplete.options.changes\n            .pipe(\n                tap(() => this.positionStrategy.reapplyLastPosition()),\n                // Defer emitting to the stream until the next tick, because changing\n                // bindings in here will cause \"changed after checked\" errors.\n                delay(0)\n            );\n\n        // When the zone is stable initially, and when the option list changes...\n        return merge(firstStable, optionChanges)\n            .pipe(\n                // create a new stream of panelClosingActions, replacing any previous streams\n                // that were created, and flatten it so our stream only emits closing events...\n                switchMap(() => {\n                    this.resetActiveItem();\n                    this.autocomplete.setVisibility();\n\n                    if (this.panelOpen) {\n                        this.overlayRef!.updatePosition();\n                    }\n\n                    return this.panelClosingActions;\n                }),\n                // when the first closing event occurs...\n                take(1)\n            )\n            // set the value, close the panel, and complete.\n            .subscribe((event) => this.setValueAndClose(event));\n    }\n\n    /** Destroys the autocomplete suggestion panel. */\n    private destroyPanel(): void {\n        if (this.overlayRef) {\n            this.closePanel();\n            this.overlayRef.dispose();\n            this.overlayRef = null;\n        }\n    }\n\n    private setTriggerValue(value: any): void {\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n            this.autocomplete.displayWith(value) :\n            value;\n\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        const inputValue = toDisplay != null ? toDisplay : '';\n\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this.formField) {\n            this.formField._control.value = inputValue;\n        } else {\n            this.elementRef.nativeElement.value = inputValue;\n        }\n\n        this.previousValue = inputValue;\n    }\n\n    /** This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    private setValueAndClose(event: McOptionSelectionChange | null): void {\n        if (event && event.source) {\n            this.clearPreviousSelectedOption(event.source);\n            this.setTriggerValue(event.source.value);\n            this.onChange(event.source.value);\n            this.elementRef.nativeElement.focus();\n\n            this.autocomplete.emitSelectEvent(event.source);\n        }\n\n        this.closePanel();\n    }\n\n    /** Clear any previous selected option and emit a selection change event for this option */\n    private clearPreviousSelectedOption(skip: McOption) {\n        this.autocomplete.options.forEach((option) => {\n            if (option !== skip && option.selected) {\n                option.deselect();\n            }\n        });\n    }\n\n    private attachOverlay(): void {\n        if (!this.autocomplete) {\n            throw getMcAutocompleteMissingPanelError();\n        }\n\n        let overlayRef = this.overlayRef;\n\n        if (!overlayRef) {\n            this.portal = new TemplatePortal(this.autocomplete.template, this.viewContainerRef);\n            overlayRef = this.overlay.create(this.getOverlayConfig());\n            this.overlayRef = overlayRef;\n\n            // Use the `keydownEvents` in order to take advantage of\n            // the overlay event targeting provided by the CDK overlay.\n            overlayRef.keydownEvents().subscribe((event) => {\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                // tslint:disable-next-line deprecation\n                if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n                    this.resetActiveItem();\n                    this.closeKeyEventStream.next();\n                }\n            });\n\n            if (this.viewportRuler) {\n                this.viewportSubscription = this.viewportRuler.change().subscribe(() => {\n                    if (this.panelOpen && overlayRef) {\n                        overlayRef.updateSize({ width: this.getPanelWidth() });\n                    }\n                });\n            }\n        } else {\n            const position = overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n\n            // Update the trigger, panel width and direction, in case anything has changed.\n            position.setOrigin(this.getConnectedElement());\n            overlayRef.updateSize({ width: this.getPanelWidth() });\n        }\n\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this.portal);\n            this.closingActionsSubscription = this.subscribeToClosingActions();\n        }\n\n        const wasOpen = this.panelOpen;\n\n        this.autocomplete.setVisibility();\n        this.autocomplete.isOpen = this.overlayAttached = true;\n\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n\n    private getOverlayConfig(): OverlayConfig {\n        return new OverlayConfig({\n            positionStrategy: this.getOverlayPosition(),\n            scrollStrategy: this.scrollStrategy(),\n            width: this.getPanelWidth(),\n            direction: this.dir\n        });\n    }\n\n    private getOverlayPosition(): IPositionStrategy {\n        this.positionStrategy = this.overlay.position()\n            .flexibleConnectedTo(this.getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false)\n            .withPositions([\n                {\n                    originX: 'start',\n                    originY: 'bottom',\n                    overlayX: 'start',\n                    overlayY: 'top'\n                },\n                {\n                    originX: 'start',\n                    originY: 'top',\n                    overlayX: 'start',\n                    overlayY: 'bottom',\n\n                    // The overlay edge connected to the trigger should have squared corners, while\n                    // the opposite end has rounded corners. We apply a CSS class to swap the\n                    // border-radius based on the overlay position.\n                    panelClass: 'mc-autocomplete-panel-above'\n                }\n            ] as IConnectedPosition[]);\n\n        return this.positionStrategy;\n    }\n\n    private getConnectedElement(): ElementRef {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n\n        return this.formField ? this.formField.getConnectedOverlayOrigin() : this.elementRef;\n    }\n\n    private getPanelWidth(): number | string {\n        return this.autocomplete.panelWidth || this.getHostWidth() - AUTOCOMPLETE_BORDER_WIDTH;\n    }\n\n    private getHostWidth(): number {\n        return this.getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     */\n    private resetActiveItem(): void {\n        this.autocomplete.keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n    }\n\n    private canOpen(): boolean {\n        const element = this.elementRef.nativeElement;\n\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n}\n","import {\n    AfterContentInit,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    Self,\n    ViewContainerRef\n} from '@angular/core';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { Direction, Directionality } from '@ptsecurity/cdk/bidi';\nimport { LEFT_ARROW, RIGHT_ARROW, SPACE, ENTER } from '@ptsecurity/cdk/keycodes';\nimport {\n    FlexibleConnectedPositionStrategy,\n    HorizontalConnectionPos,\n    Overlay,\n    OverlayConfig,\n    OverlayRef,\n    VerticalConnectionPos,\n    IScrollStrategy\n} from '@ptsecurity/cdk/overlay';\nimport { normalizePassiveListenerOptions } from '@ptsecurity/cdk/platform';\nimport { TemplatePortal } from '@ptsecurity/cdk/portal';\nimport { asapScheduler, merge, of as observableOf, Subscription } from 'rxjs';\nimport { delay, filter, take, takeUntil } from 'rxjs/operators';\n\nimport { throwMcDropdownMissingError } from './dropdown-errors';\nimport { McDropdownItem } from './dropdown-item';\nimport { McDropdownPanel } from './dropdown-panel';\nimport { DropdownPositionX, DropdownPositionY } from './dropdown-positions';\nimport { McDropdown } from './dropdown.component';\n\n\n/** Injection token that determines the scroll handling while the dropdown is open. */\nexport const MC_DROPDOWN_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-dropdown-scroll-strategy');\n\n/** @docs-private */\nexport function MC_DROPDOWN_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => IScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_DROPDOWN_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_DROPDOWN_SCROLL_STRATEGY_FACTORY\n};\n\n/** Default top padding of the nested dropdown panel. */\nexport const NESTED_PANEL_TOP_PADDING = 2;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * This directive is intended to be used in conjunction with an mc-dropdown tag.  It is\n * responsible for toggling the display of the provided dropdown instance.\n */\n@Directive({\n    selector: `[mcDropdownTriggerFor]`,\n    host: {\n        'aria-haspopup': 'true',\n        '[attr.aria-expanded]': 'opened || null',\n        '(mousedown)': '_handleMousedown($event)',\n        '(keydown)': '_handleKeydown($event)',\n        '(click)': '_handleClick($event)'\n    },\n    exportAs: 'mcDropdownTrigger'\n})\nexport class McDropdownTrigger implements AfterContentInit, OnDestroy {\n\n\n    /**\n     * Handles touch start events on the trigger.\n     * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n     */\n    private _handleTouchStart = () => this._openedBy = 'touch';\n\n    /** The text direction of the containing app. */\n    get dir(): Direction {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n\n    // Tracking input type is necessary so it's possible to only auto-focus\n    // the first item of the list when the dropdown is opened via the keyboard\n    _openedBy: 'mouse' | 'touch' | null = null;\n\n\n    /** References the dropdown instance that the trigger is associated with. */\n    @Input('mcDropdownTriggerFor')\n    get dropdown() {\n        return this._dropdown;\n    }\n\n    set dropdown(dropdown: McDropdownPanel) {\n        if (dropdown === this._dropdown) {\n            return;\n        }\n\n        this._dropdown = dropdown;\n        this._closeSubscription.unsubscribe();\n\n        if (dropdown) {\n            this._closeSubscription = dropdown.closed.asObservable().subscribe(reason => {\n                this._destroy();\n\n                // If a click closed the dropdown, we should close the entire chain of nested dropdowns.\n                if ((reason === 'click' || reason === 'tab') && this._parent) {\n                    this._parent.closed.emit(reason);\n                }\n            });\n        }\n    }\n\n    private _dropdown: McDropdownPanel;\n\n    /** Data to be passed along to any lazily-rendered content. */\n    @Input('mcDropdownTriggerData') data: any;\n\n    /** Event emitted when the associated dropdown is opened. */\n    @Output() readonly dropdownOpened: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Event emitted when the associated dropdown is closed. */\n    @Output() readonly dropdownClosed: EventEmitter<void> = new EventEmitter<void>();\n\n    private _portal: TemplatePortal;\n    private _overlayRef: OverlayRef | null = null;\n    private _opened: boolean = false;\n    private _closeSubscription = Subscription.EMPTY;\n    private _hoverSubscription = Subscription.EMPTY;\n\n    constructor(private _overlay: Overlay,\n                private _element: ElementRef<HTMLElement>,\n                private _viewContainerRef: ViewContainerRef,\n                @Inject(MC_DROPDOWN_SCROLL_STRATEGY) private _scrollStrategy: any,\n                @Optional() private _parent: McDropdown,\n                @Optional() @Self() private _dropdownItemInstance: McDropdownItem,\n                @Optional() private _dir: Directionality,\n                private _focusMonitor?: FocusMonitor) {\n\n        _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n            passiveEventListenerOptions);\n\n        if (_dropdownItemInstance) {\n            _dropdownItemInstance._triggersNestedDropdown = this.triggersNestedDropdown();\n        }\n    }\n\n    ngAfterContentInit() {\n        this._check();\n        this._handleHover();\n    }\n\n    ngOnDestroy() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n\n        this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n            passiveEventListenerOptions);\n\n        this._cleanUpSubscriptions();\n        this._closeSubscription.unsubscribe();\n    }\n\n    /** Whether the dropdown is open. */\n    get opened(): boolean {\n        return this._opened;\n    }\n\n    /** Whether the dropdown triggers a nested dropdown or a top-level one. */\n    triggersNestedDropdown(): boolean {\n        return !!(this._dropdownItemInstance && this._parent);\n    }\n\n    /** Toggles the dropdown between the open and closed states. */\n    toggle(): void {\n        // tslint:disable-next-line:no-void-expression\n        return this._opened ? this.close() : this.open();\n    }\n\n    /** Opens the dropdown. */\n    open(): void {\n        if (this._opened) {\n            return;\n        }\n\n        this._check();\n\n        const overlayRef = this._createOverlay();\n        const overlayConfig = overlayRef.getConfig();\n\n        this._setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\n        overlayConfig.hasBackdrop = this.dropdown.hasBackdrop == null ? !this.triggersNestedDropdown() :\n            this.dropdown.hasBackdrop;\n        overlayRef.attach(this._getPortal());\n\n        if (this.dropdown.lazyContent) {\n            this.dropdown.lazyContent.attach(this.data);\n        }\n\n        this._closeSubscription = this._closingActions().subscribe(() => this.close());\n        this._init();\n\n        if (this.dropdown instanceof McDropdown) {\n            this.dropdown._startAnimation();\n        }\n    }\n\n    /** Closes the dropdown. */\n    close(): void {\n        this.dropdown.closed.emit();\n    }\n\n    /**\n     * Focuses the dropdown trigger.\n     * @param origin Source of the dropdown trigger's focus.\n     */\n    focus(origin: FocusOrigin = 'program') {\n        if (this._focusMonitor) {\n            this._focusMonitor.focusVia(this._element.nativeElement, origin);\n        } else {\n            this._element.nativeElement.focus();\n        }\n    }\n\n    /** Closes the dropdown and does the necessary cleanup. */\n    private _destroy() {\n        if (!this._overlayRef || !this.opened) {\n            return;\n        }\n\n        const dropdown = this.dropdown;\n\n        this._closeSubscription.unsubscribe();\n        this._overlayRef.detach();\n\n        if (dropdown instanceof McDropdown) {\n            dropdown._resetAnimation();\n\n            if (dropdown.lazyContent) {\n                // Wait for the exit animation to finish before detaching the content.\n                dropdown._animationDone\n                    .pipe(\n                        filter((event) => event.toState === 'void'),\n                        take(1),\n                        // Interrupt if the content got re-attached.\n                        takeUntil(dropdown.lazyContent._attached)\n                    )\n                    .subscribe(() => dropdown.lazyContent!.detach(), undefined, () => {\n                        // No matter whether the content got re-attached, reset the dropdown.\n                        this._reset();\n                    });\n            } else {\n                this._reset();\n            }\n        } else {\n            this._reset();\n\n            if (dropdown.lazyContent) {\n                dropdown.lazyContent.detach();\n            }\n        }\n    }\n\n    /**\n     * This method sets the dropdown state to open and focuses the first item if\n     * the dropdown was opened via the keyboard.\n     */\n    private _init(): void {\n        this.dropdown.parent = this.triggersNestedDropdown() ? this._parent : undefined;\n        this.dropdown.direction = this.dir;\n        this._setIsOpened(true);\n        this.dropdown.focusFirstItem(this._openedBy || 'program');\n    }\n\n    /**\n     * This method resets the dropdown when it's closed, most importantly restoring\n     * focus to the dropdown trigger if the dropdown was opened via the keyboard.\n     */\n    private _reset(): void {\n        this._setIsOpened(false);\n\n        // We should reset focus if the user is navigating using a keyboard or\n        // if we have a top-level trigger which might cause focus to be lost\n        // when clicking on the backdrop.\n        if (!this._openedBy) {\n            // Note that the focus style will show up both for `program` and\n            // `keyboard` so we don't have to specify which one it is.\n            this.focus();\n        } else if (!this.triggersNestedDropdown()) {\n            this.focus(this._openedBy);\n        }\n\n        this._openedBy = null;\n    }\n\n    // set state rather than toggle to support triggers sharing a dropdown\n    private _setIsOpened(isOpen: boolean): void {\n        this._opened = isOpen;\n        // tslint:disable-next-line:no-void-expression\n        this._opened ? this.dropdownOpened.emit() : this.dropdownClosed.emit();\n\n        if (this.triggersNestedDropdown()) {\n            this._dropdownItemInstance._highlighted = isOpen;\n        }\n    }\n\n    /**\n     * This method checks that a valid instance of McDropdown has been passed into\n     * mcDropdownTriggerFor. If not, an exception is thrown.\n     */\n    private _check() {\n        if (!this.dropdown) {\n            throwMcDropdownMissingError();\n        }\n    }\n\n    /**\n     * This method creates the overlay from the provided dropdown's template and saves its\n     * OverlayRef so that it can be attached to the DOM when open is called.\n     */\n    private _createOverlay(): OverlayRef {\n        if (!this._overlayRef) {\n            const config = this._getOverlayConfig();\n            this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n            this._overlayRef = this._overlay.create(config);\n\n            // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n            // Ideally we'd also have our keyboard event logic in here, however doing so will\n            // break anybody that may have implemented the `McDropdownPanel` themselves.\n            this._overlayRef.keydownEvents().subscribe();\n        }\n\n        return this._overlayRef;\n    }\n\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @returns OverlayConfig\n     */\n    private _getOverlayConfig(): OverlayConfig {\n        return new OverlayConfig({\n            positionStrategy: this._overlay.position()\n                .flexibleConnectedTo(this._element)\n                .withLockedPosition()\n                .withTransformOriginOn('.mc-dropdown__panel'),\n            backdropClass: this.dropdown.backdropClass || 'cdk-overlay-transparent-backdrop',\n            scrollStrategy: this._scrollStrategy(),\n            direction: this._dir\n        });\n    }\n\n    /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the dropdown based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     */\n    private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n        if (this.dropdown.setPositionClasses) {\n            position.positionChanges.subscribe(change => {\n                const posX: DropdownPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n                const posY: DropdownPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n                this.dropdown.setPositionClasses!(posX, posY);\n            });\n        }\n    }\n\n    /**\n     * Sets the appropriate positions on a position strategy\n     * so the overlay connects with the trigger correctly.\n     * @param positionStrategy Strategy whose position to update.\n     */\n    private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n\n        let [originX, originFallbackX, overlayX, overlayFallbackX]: HorizontalConnectionPos[] =\n            this.dropdown.xPosition === 'before' ?\n                ['end', 'start', 'end', 'start'] :\n                ['start', 'end', 'start', 'end'];\n\n        let [overlayY, overlayFallbackY, originY, originFallbackY]: VerticalConnectionPos[] =\n            this.dropdown.yPosition === 'above' ?\n                ['bottom', 'top', 'bottom', 'top'] :\n                ['top', 'bottom', 'top', 'bottom'];\n\n        let offsetY = 0;\n\n        if (this.triggersNestedDropdown()) {\n            // When the dropdown is nested, it should always align itself\n            // to the edges of the trigger, instead of overlapping it.\n            overlayFallbackX = originX = this.dropdown.xPosition === 'before' ? 'start' : 'end';\n            originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n            offsetY = overlayY === 'bottom' ? NESTED_PANEL_TOP_PADDING : -NESTED_PANEL_TOP_PADDING;\n        } else {\n            if (!this.dropdown.overlapTriggerY) {\n                originY = overlayY === 'top' ? 'bottom' : 'top';\n                originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n            }\n\n            if (!this.dropdown.overlapTriggerX) {\n                overlayFallbackX = originX = this.dropdown.xPosition === 'before' ? 'start' : 'end';\n                originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n            }\n        }\n\n        positionStrategy.withPositions([\n            {originX, originY, overlayX, overlayY, offsetY},\n            {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n            {\n                originX,\n                originY: originFallbackY,\n                overlayX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY\n            },\n            {\n                originX: originFallbackX,\n                originY: originFallbackY,\n                overlayX: overlayFallbackX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY\n            }\n        ]);\n    }\n\n    /** Cleans up the active subscriptions. */\n    private _cleanUpSubscriptions(): void {\n        this._closeSubscription.unsubscribe();\n        this._hoverSubscription.unsubscribe();\n    }\n\n    /** Returns a stream that emits whenever an action that should close the dropdown occurs. */\n    private _closingActions() {\n        const backdrop = this._overlayRef!.backdropClick();\n        const detachments = this._overlayRef!.detachments();\n        const parentClose = this._parent ? this._parent.closed : observableOf();\n        const hover = this._parent ? this._parent._hovered().pipe(\n            filter((active) => active !== this._dropdownItemInstance),\n            filter(() => this._opened)\n        ) : observableOf();\n\n        return merge(backdrop, parentClose, hover, detachments);\n    }\n\n    /** Handles mouse presses on the trigger. */\n    private _handleMousedown(event: MouseEvent): void {\n        // Since right or middle button clicks won't trigger the `click` event,\n        // we shouldn't consider the dropdown as opened by mouse in those cases.\n        this._openedBy = event.button === 0 ? 'mouse' : null;\n\n        // Since clicking on the trigger won't close the dropdown if it opens a nested dropdown,\n        // we should prevent focus from moving onto it via click to avoid the\n        // highlight from lingering on the dropdown item.\n        if (this.triggersNestedDropdown()) {\n            event.preventDefault();\n        }\n    }\n\n    /** Handles key presses on the trigger. */\n    private _handleKeydown(event: KeyboardEvent): void {\n        const keyCode = event.keyCode;\n\n        if (keyCode === SPACE || keyCode === ENTER) {\n            this.open();\n        }\n\n        if (this.triggersNestedDropdown() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n            this.open();\n        }\n    }\n\n    /** Handles click events on the trigger. */\n    private _handleClick(event: MouseEvent): void {\n        if (this.triggersNestedDropdown()) {\n            // Stop event propagation to avoid closing the parent dropdown.\n            event.stopPropagation();\n            this.open();\n        } else {\n            this.toggle();\n        }\n    }\n\n    /** Handles the cases where the user hovers over the trigger. */\n    private _handleHover() {\n        // Subscribe to changes in the hovered item in order to toggle the panel.\n        if (!this.triggersNestedDropdown()) {\n            return;\n        }\n\n        this._hoverSubscription = this._parent._hovered()\n        // Since we might have multiple competing triggers for the same dropdown (e.g. a nested dropdown\n        // with different data and triggers), we have to delay it by a tick to ensure that\n        // it won't be closed immediately after it is opened.\n            .pipe(\n                filter((active) => active === this._dropdownItemInstance && !active.disabled),\n                delay(0, asapScheduler)\n            )\n            .subscribe(() => {\n                this._openedBy = 'mouse';\n\n                // If the same dropdown is used between multiple triggers, it might still be animating\n                // while the new trigger tries to re-open it. Wait for the animation to finish\n                // before doing so. Also interrupt if the user moves to another item.\n                if (this.dropdown instanceof McDropdown && this.dropdown._isAnimating) {\n                    // We need the `delay(0)` here in order to avoid\n                    // 'changed after checked' errors in some cases. See #12194.\n                    this.dropdown._animationDone\n                        .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parent._hovered()))\n                        .subscribe(() => this.open());\n                } else {\n                    this.open();\n                }\n            });\n    }\n\n    /** Gets the portal that should be attached to the overlay. */\n    private _getPortal(): TemplatePortal {\n        // Note that we can avoid this check by keeping the portal on the dropdown panel.\n        // While it would be cleaner, we'd have to introduce another required method on\n        // `McDropdownPanel`, making it harder to consume.\n        if (!this._portal || this._portal.templateRef !== this.dropdown.templateRef) {\n            this._portal = new TemplatePortal(this.dropdown.templateRef, this._viewContainerRef);\n        }\n\n        return this._portal;\n    }\n\n}\n","/* tslint:disable:no-empty */\n\nimport {\n    AfterContentInit, AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Input,\n    isDevMode,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList, Renderer2,\n    Self,\n    SimpleChanges,\n    ViewChild, ViewChildren,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { ActiveDescendantKeyManager } from '@ptsecurity/cdk/a11y';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    RIGHT_ARROW,\n    SPACE,\n    UP_ARROW,\n    A\n} from '@ptsecurity/cdk/keycodes';\nimport {\n    CdkConnectedOverlay,\n    ViewportRuler\n} from '@ptsecurity/cdk/overlay';\nimport {\n    countGroupLabelsBeforeOption,\n    getOptionScrollPosition,\n    CanDisable,\n    CanDisableCtor,\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    HasTabIndex,\n    HasTabIndexCtor,\n    MC_OPTION_PARENT_COMPONENT,\n    McOptgroup,\n    McOption,\n    McOptionSelectionChange,\n    mixinDisabled,\n    mixinErrorState,\n    mixinTabIndex,\n    mcSelectAnimations,\n\n    SELECT_PANEL_INDENT_PADDING_X,\n    SELECT_PANEL_MAX_HEIGHT,\n    SELECT_PANEL_PADDING_X,\n    SELECT_PANEL_VIEWPORT_PADDING,\n\n    getMcSelectDynamicMultipleError,\n    getMcSelectNonFunctionValueError,\n    getMcSelectNonArrayValueError,\n    MC_SELECT_SCROLL_STRATEGY\n} from '@ptsecurity/mosaic/core';\nimport { McFormField, McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { McInput } from '@ptsecurity/mosaic/input';\nimport { McTag } from '@ptsecurity/mosaic/tags';\nimport { defer, merge, Observable, Subject, Subscription } from 'rxjs';\nimport {\n    filter,\n    map,\n    startWith,\n    switchMap,\n    take,\n    takeUntil,\n    distinctUntilChanged\n} from 'rxjs/operators';\n\n\nlet nextUniqueId = 0;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 2;\n\n/** Change event object that is emitted when the select value has changed. */\nexport class McSelectChange {\n    constructor(public source: McSelect, public value: any) {}\n}\n\nexport class McSelectBase {\n    constructor(\n        public elementRef: ElementRef,\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {}\n}\n\nconst McSelectMixinBase: CanDisableCtor & HasTabIndexCtor & CanUpdateErrorStateCtor &\n    typeof McSelectBase = mixinTabIndex(mixinDisabled(mixinErrorState(McSelectBase)));\n\n@Directive({\n    selector: '[mcSelectSearch]',\n    exportAs: 'mcSelectSearch'\n})\nexport class McSelectSearch implements AfterContentInit, OnDestroy {\n    @ContentChild(McInput) input: McInput;\n\n    searchChangesSubscription: Subscription = new Subscription();\n\n    isSearchChanged: boolean = false;\n\n    focus(): void {\n        this.input.focus();\n    }\n\n    reset(): void {\n        this.input.ngControl.reset();\n    }\n\n    ngAfterContentInit(): void {\n        if (!this.input) {\n            throw Error('McSelectSearch does not work without input');\n        }\n\n        if (!this.input.ngControl) {\n            throw Error('McSelectSearch does not work without ngControl');\n        }\n\n        this.searchChangesSubscription = this.input.ngControl.valueChanges!.subscribe(() => {\n            this.isSearchChanged = true;\n        });\n    }\n\n    ngOnDestroy(): void {\n        this.searchChangesSubscription.unsubscribe();\n    }\n}\n\n\n\n@Directive({ selector: 'mc-select-trigger' })\nexport class McSelectTrigger {}\n\n\n@Component({\n    selector: 'mc-select',\n    exportAs: 'mcSelect',\n    templateUrl: 'select.html',\n    styleUrls: ['./select.css'],\n    inputs: ['disabled', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'tabIndex',\n        class: 'mc-select',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-select-invalid]': 'errorState',\n        '[class.mc-select-required]': 'required',\n        '(keydown)': 'handleKeydown($event)',\n        '(focus)': 'onFocus()',\n        '(blur)': 'onBlur()',\n        '(window:resize)': 'calculateHiddenItems()'\n    },\n    animations: [\n        mcSelectAnimations.transformPanel,\n        mcSelectAnimations.fadeInContent\n    ],\n    providers: [\n        { provide: McFormFieldControl, useExisting: McSelect },\n        { provide: MC_OPTION_PARENT_COMPONENT, useExisting: McSelect }\n    ]\n})\nexport class McSelect extends McSelectMixinBase implements\n    AfterContentInit, AfterViewInit, OnChanges, OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable,\n    HasTabIndex, McFormFieldControl<any>, CanUpdateErrorState {\n\n    /** A name for this control that can be used by `mc-form-field`. */\n    controlType = 'mc-select';\n\n    hiddenItems: number = 0;\n    oneMoreText: string = '...ещё';\n\n    /** The last measured value for the trigger's client bounding rect. */\n    triggerRect: ClientRect;\n\n    /** The cached font-size of the trigger element. */\n    triggerFontSize = 0;\n\n    /** Deals with the selection logic. */\n    selectionModel: SelectionModel<McOption>;\n\n    previousSelectionModelSelected: McOption[] = [];\n\n    /** Manages keyboard events for options in the panel. */\n    keyManager: ActiveDescendantKeyManager<McOption>;\n\n    /** The IDs of child options to be passed to the aria-owns attribute. */\n    optionIds: string = '';\n\n    /** The value of the select panel's transform-origin property. */\n    transformOrigin: string = 'top';\n\n    /** Whether the panel's animation is done. */\n    panelDoneAnimating: boolean = false;\n\n    /** Emits when the panel element is finished transforming in. */\n    panelDoneAnimatingStream = new Subject<string>();\n\n    /** Strategy that will be used to handle scrolling while the select panel is open. */\n    scrollStrategy = this._scrollStrategyFactory();\n\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n    offsetY = 0;\n\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n    positions = [\n        {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top'\n        },\n        {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom'\n        }\n    ];\n\n    @ViewChild('trigger') trigger: ElementRef;\n\n    @ViewChild('panel') panel: ElementRef;\n\n    @ViewChild('optionsContainer') optionsContainer: ElementRef;\n\n    @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n    @ViewChildren(McTag) tags: QueryList<McTag>;\n\n    /** User-supplied override of the trigger element. */\n    @ContentChild(McSelectTrigger) customTrigger: McSelectTrigger;\n\n    /** All of the defined select options. */\n    @ContentChildren(McOption, { descendants: true }) options: QueryList<McOption>;\n\n    /** All of the defined groups of options. */\n    @ContentChildren(McOptgroup) optionGroups: QueryList<McOptgroup>;\n\n    @ContentChild(McSelectSearch) search: McSelectSearch;\n\n    /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n    @Input() panelClass: string | string[] | Set<string> | { [key: string]: any };\n\n    /** Object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Function used to sort the values in a select in multiple mode.\n     * Follows the same logic as `Array.prototype.sort`.\n     */\n    @Input() sortComparator: (a: McOption, b: McOption, options: McOption[]) => number;\n\n    /** Combined stream of all of the child options' change events. */\n    readonly optionSelectionChanges: Observable<McOptionSelectionChange> = defer(() => {\n        if (this.options) {\n            return merge(\n                ...this.options.map((option) => option.onSelectionChange),\n                ...this.selectionModel.selected.map((option) => option.onSelectionChange)\n            );\n        }\n\n        return this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n    }) as Observable<McOptionSelectionChange>;\n\n    /** Event emitted when the select panel has been toggled. */\n    @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted when the select has been opened. */\n    @Output('opened') readonly openedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => o), map(() => {}));\n\n    /** Event emitted when the select has been closed. */\n    @Output('closed') readonly closedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => !o), map(() => {}));\n\n    /** Event emitted when the selected value has been changed by the user. */\n    @Output() readonly selectionChange: EventEmitter<McSelectChange> = new EventEmitter<McSelectChange>();\n\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    @Input()\n    get placeholder(): string {\n        return this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n\n        this.stateChanges.next();\n    }\n\n    private _placeholder: string;\n\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n\n        this.stateChanges.next();\n    }\n\n    private _required: boolean = false;\n\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        if (this.selectionModel) {\n            throw getMcSelectDynamicMultipleError();\n        }\n\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    private _multiple: boolean = false;\n\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith() {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        /* tslint:disable-next-line:strict-type-predicates */\n        if (typeof fn !== 'function') {\n            throw getMcSelectNonFunctionValueError();\n        }\n\n        this._compareWith = fn;\n\n        if (this.selectionModel) {\n            // A different comparator means the selection could change.\n            this.initializeSelection();\n        }\n    }\n\n    /** Value of the select control. */\n    @Input()\n    get value(): any {\n        return this._value;\n    }\n\n    set value(newValue: any) {\n        if (newValue !== this._value) {\n            this.writeValue(newValue);\n            this._value = newValue;\n        }\n    }\n\n    private _value: any;\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n        this.stateChanges.next();\n    }\n\n    private _id: string;\n\n    /** Whether the select is focused. */\n    get focused(): boolean {\n        return this._focused || this._panelOpen;\n    }\n\n    /**\n     * @deprecated Setter to be removed as this property is intended to be readonly.\n     * @breaking-change 8.0.0\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n\n    private _focused = false;\n\n    get panelOpen(): boolean {\n        return this._panelOpen;\n    }\n\n    private _panelOpen = false;\n\n    /** The scroll position of the overlay panel, calculated to center the selected option. */\n    private scrollTop = 0;\n\n    /** Unique id for this input. */\n    private readonly uid = `mc-select-${nextUniqueId++}`;\n\n    /** Emits whenever the component is destroyed. */\n    private readonly destroy = new Subject<void>();\n\n    constructor(\n        private readonly _viewportRuler: ViewportRuler,\n        private readonly _changeDetectorRef: ChangeDetectorRef,\n        private readonly _ngZone: NgZone,\n        private readonly _renderer: Renderer2,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        elementRef: ElementRef,\n        @Optional() private readonly _dir: Directionality,\n        @Optional() parentForm: NgForm,\n        @Optional() parentFormGroup: FormGroupDirective,\n        @Optional() private readonly _parentFormField: McFormField,\n        @Self() @Optional() public ngControl: NgControl,\n        @Attribute('tabindex') tabIndex: string,\n        @Inject(MC_SELECT_SCROLL_STRATEGY) private readonly _scrollStrategyFactory\n    ) {\n        super(elementRef, defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnInit() {\n        this.selectionModel = new SelectionModel<McOption>(this.multiple);\n        this.stateChanges.next();\n\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this.panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this.panelOpen) {\n                    this.scrollTop = 0;\n                    this.openedChange.emit(true);\n                } else {\n                    this.openedChange.emit(false);\n                    this.panelDoneAnimating = false;\n                    this.overlayDir.offsetX = 0;\n                    this._changeDetectorRef.markForCheck();\n                }\n            });\n    }\n\n    ngAfterContentInit() {\n        this.initKeyManager();\n\n        this.selectionModel.changed\n            .pipe(takeUntil(this.destroy))\n            .subscribe((event) => {\n                event.added.forEach((option) => option.select());\n                event.removed.forEach((option) => option.deselect());\n            });\n\n        this.options.changes\n            .pipe(startWith(null), takeUntil(this.destroy))\n            .subscribe(() => {\n                this.resetOptions();\n                this.initializeSelection();\n            });\n    }\n\n    ngAfterViewInit(): void {\n        this.tags.changes\n            .subscribe(() => {\n                setTimeout(() => this.calculateHiddenItems(), 0);\n            });\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) { this.updateErrorState(); }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes.disabled) {\n            this.stateChanges.next();\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroy.next();\n        this.destroy.complete();\n        this.stateChanges.complete();\n    }\n\n    /** `View -> model callback called when value changes` */\n    onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when select has been touched` */\n    onTouched = () => {};\n\n    resetSearch(): void {\n        if (this.search) {\n            this.search.reset();\n        }\n    }\n\n    /** Toggles the overlay panel open or closed. */\n    toggle(): void {\n        if (this.panelOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    /** Opens the overlay panel. */\n    open(): void {\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) { return; }\n\n        this.triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this.triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n        this._panelOpen = true;\n        this.keyManager.withHorizontalOrientation(null);\n        this.calculateOverlayPosition();\n        this.highlightCorrectOption();\n        this._changeDetectorRef.markForCheck();\n\n        // Set the font size on the panel element once it exists.\n        this._ngZone.onStable.asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                if (this.triggerFontSize && this.overlayDir.overlayRef && this.overlayDir.overlayRef.overlayElement) {\n                    this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this.triggerFontSize}px`;\n                }\n            });\n\n        this.resetSearch();\n    }\n\n    /** Closes the overlay panel and focuses the host element. */\n    close(): void {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this.keyManager.withHorizontalOrientation(this.isRtl() ? 'rtl' : 'ltr');\n\n            this._changeDetectorRef.markForCheck();\n            this.onTouched();\n        }\n    }\n\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value: any): void {\n        if (this.options) {\n            this.setSelectionByValue(value);\n        }\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn: (value: any) => void): void {\n        this.onChange = fn;\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn: () => {}): void {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    get selected(): McOption | McOption[] {\n        return this.multiple ? this.selectionModel.selected : this.selectionModel.selected[0];\n    }\n\n    get triggerValue(): string {\n        if (this.empty) { return ''; }\n\n        if (this._multiple) {\n            const selectedOptions = this.selectionModel.selected.map((option) => option.viewValue);\n\n            if (this.isRtl()) { selectedOptions.reverse(); }\n\n            return selectedOptions.join(', ');\n        }\n\n        return this.selectionModel.selected[0].viewValue;\n    }\n\n    get triggerValues(): McOption[] {\n        if (this.empty) { return []; }\n\n        if (this._multiple) {\n            const selectedOptions = this.selectionModel.selected;\n\n            if (this.isRtl()) { selectedOptions.reverse(); }\n\n            return selectedOptions;\n        }\n\n        return [this.selectionModel.selected[0]];\n    }\n\n    get empty(): boolean {\n        return !this.selectionModel || this.selectionModel.isEmpty();\n    }\n\n    isRtl(): boolean {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n\n    handleKeydown(event: KeyboardEvent): void {\n        if (!this.disabled) {\n            if (this.panelOpen) {\n                this.handleOpenKeydown(event);\n            } else {\n                this.handleClosedKeydown(event);\n            }\n        }\n    }\n\n    /**\n     * When the panel content is done fading in, the panelDoneAnimating property is\n     * set so the proper class can be added to the panel.\n     */\n    onFadeInDone(): void {\n        this.panelDoneAnimating = this.panelOpen;\n        this._changeDetectorRef.markForCheck();\n\n        if (this.search && this._panelOpen) {\n            this.search.focus();\n        }\n    }\n\n    onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    onBlur() {\n        this._focused = false;\n\n        if (!this.disabled && !this.panelOpen) {\n            this.onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    onAttached(): void {\n        this.overlayDir.positionChange\n            .pipe(take(1))\n            .subscribe(() => {\n                this._changeDetectorRef.detectChanges();\n                this.calculateOverlayOffsetX();\n                this.optionsContainer.nativeElement.scrollTop = this.scrollTop;\n            });\n    }\n\n    /** Returns the theme to be used on the panel. */\n    getPanelTheme(): string {\n        return this._parentFormField ? `mc-${this._parentFormField.color}` : '';\n    }\n\n    /** Focuses the select element. */\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    calculateOverlayScroll(selectedIndex: number, scrollBuffer: number, maxScroll: number): number {\n        const itemHeight = this.getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n\n        /* tslint:disable-next-line:no-magic-numbers */\n        const halfOptionHeight = itemHeight / 2;\n\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n\n    /** Invoked when an option is clicked. */\n    onRemoveMatcherItem(option: McOption, $event): void {\n        $event.stopPropagation();\n\n        option.deselect();\n    }\n\n    calculateHiddenItems(): void {\n        if (this.empty || !this.multiple) { return; }\n\n        let visibleItems: number = 0;\n        const totalItemsWidth = this.getTotalItemsWidthInMatcher();\n        let totalVisibleItemsWidth: number = 0;\n        const itemMargin: number = 4;\n\n        this.tags.forEach((tag) => {\n            if (tag.nativeElement.offsetTop < tag.nativeElement.offsetHeight) {\n                totalVisibleItemsWidth += tag.nativeElement.getBoundingClientRect().width + itemMargin;\n                visibleItems++;\n            }\n        });\n\n        this.hiddenItems = (this.selected as ArrayLike<McOption>).length - visibleItems;\n\n        if (this.hiddenItems) {\n            const itemsCounter = this.trigger.nativeElement.querySelector('.mc-select__match-hidden-text');\n            const matcherList = this.trigger.nativeElement.querySelector('.mc-select__match-list');\n\n            const itemsCounterShowed = itemsCounter.offsetTop < itemsCounter.offsetHeight;\n            // const itemsCounterWidth: number = itemsCounter.getBoundingClientRect().width;\n            const itemsCounterWidth: number = 86;\n\n            const matcherListWidth: number = matcherList.getBoundingClientRect().width;\n            const matcherWidth: number = matcherListWidth + itemsCounterWidth;\n\n            if (itemsCounterShowed && (totalItemsWidth < matcherWidth)) { this.hiddenItems = 0; }\n\n            if (\n                totalVisibleItemsWidth === matcherListWidth ||\n                (totalVisibleItemsWidth + itemsCounterWidth) < matcherListWidth\n            ) {\n                this._changeDetectorRef.markForCheck();\n\n                return ;\n            } else if (!itemsCounterShowed && (totalItemsWidth + itemsCounterWidth) > matcherWidth) {\n                this.hiddenItems++;\n            }\n        }\n\n        this._changeDetectorRef.markForCheck();\n    }\n\n    private getTotalItemsWidthInMatcher(): number {\n        const triggerClone = this.trigger.nativeElement.cloneNode(true);\n        triggerClone.querySelector('.mc-select__match-hidden-text').remove();\n\n        this._renderer.setStyle(triggerClone, 'position', 'absolute');\n        this._renderer.setStyle(triggerClone, 'visibility', 'hidden');\n        this._renderer.setStyle(triggerClone, 'top', '-100%');\n        this._renderer.setStyle(triggerClone, 'left', '0');\n\n        this._renderer.appendChild(this.trigger.nativeElement, triggerClone);\n\n        let totalItemsWidth: number = 0;\n        const itemMargin: number = 4;\n        triggerClone.querySelectorAll('mc-tag').forEach((item) => {\n            totalItemsWidth += item.getBoundingClientRect().width as number + itemMargin;\n        });\n\n        triggerClone.remove();\n\n        return totalItemsWidth;\n    }\n\n    /** Handles keyboard events while the select is closed. */\n    private handleClosedKeydown(event: KeyboardEvent): void {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n        // Open the select on ALT + arrow key to match the native <select>\n        if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        } else if (!this.multiple) {\n            this.keyManager.onKeydown(event);\n        }\n    }\n\n    /** Handles keyboard events when the selected is open. */\n    private handleOpenKeydown(event: KeyboardEvent): void {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const manager = this.keyManager;\n\n        if (keyCode === HOME || keyCode === END) {\n            event.preventDefault();\n\n            if (keyCode === HOME) {\n                manager.setFirstItemActive();\n            } else {\n                manager.setLastItemActive();\n            }\n\n        } else if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n        } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n            event.preventDefault();\n            manager.activeItem.selectViaInteraction();\n        } else if (this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some((option) => !option.selected);\n            this.options.forEach((option) => {\n                if (hasDeselectedOptions && !option.disabled) {\n                    option.select();\n                } else {\n                    option.deselect();\n                }\n            });\n        } else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n\n            manager.onKeydown(event);\n\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem.selectViaInteraction();\n            }\n        }\n    }\n\n    private initializeSelection(): void {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this.setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n        });\n    }\n\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    private setSelectionByValue(value: any | any[]): void {\n        this.previousSelectionModelSelected = this.selectionModel.selected;\n\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw getMcSelectNonArrayValueError();\n            }\n\n            this.selectionModel.clear();\n            value.forEach((currentValue: any) => this.selectValue(currentValue));\n            this.sortValues();\n        } else {\n            this.selectionModel.clear();\n            const correspondingOption = this.selectValue(value);\n\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this.keyManager.setActiveItem(correspondingOption);\n            }\n        }\n\n        this._changeDetectorRef.markForCheck();\n    }\n\n    private getCorrespondOption(value: any): McOption | undefined {\n        return [\n            ...this.options.toArray(),\n            ...this.previousSelectionModelSelected\n        ].find((option: McOption) => {\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            } catch (error) {\n                if (isDevMode()) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n\n                return false;\n            }\n        });\n    }\n\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    private selectValue(value: any): McOption | undefined {\n        const correspondingOption = this.getCorrespondOption(value);\n\n        if (correspondingOption) {\n            this.selectionModel.select(correspondingOption);\n        }\n\n        return correspondingOption;\n    }\n\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    private initKeyManager() {\n        const typeAheadDebounce = 200;\n\n        this.keyManager = new ActiveDescendantKeyManager<McOption>(this.options)\n            .withTypeAhead(typeAheadDebounce, this.search ? -1 : 0)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this.isRtl() ? 'rtl' : 'ltr');\n\n        this.keyManager.tabOut\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            });\n\n        this.keyManager.change\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this._panelOpen && this.panel) {\n                    this.scrollActiveOptionIntoView();\n                } else if (!this._panelOpen && !this.multiple && this.keyManager.activeItem) {\n                    this.keyManager.activeItem.selectViaInteraction();\n                }\n            });\n    }\n\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    private resetOptions(): void {\n        const changedOrDestroyed = merge(this.options.changes, this.destroy);\n\n        this.optionSelectionChanges\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe((event) => {\n                this.onSelect(event.source, event.isUserInput);\n\n                if (this.search && this.search.isSearchChanged) {\n                    Promise.resolve().then(() => this.keyManager.setFirstItemActive());\n\n                    this.search.isSearchChanged = false;\n                }\n\n                if (event.isUserInput && !this.multiple && this._panelOpen) {\n                    this.close();\n                    this.focus();\n                }\n            });\n\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map((option) => option.stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n                this._changeDetectorRef.markForCheck();\n                this.stateChanges.next();\n            });\n\n        this.setOptionIds();\n    }\n\n    /** Invoked when an option is clicked. */\n    private onSelect(option: McOption, isUserInput: boolean): void {\n        const wasSelected = this.selectionModel.isSelected(option);\n\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this.selectionModel.clear();\n            this.propagateChanges(option.value);\n        } else {\n            if (option.selected) {\n                this.selectionModel.select(option);\n            } else {\n                this.selectionModel.deselect(option);\n            }\n\n            if (isUserInput) {\n                this.keyManager.setActiveItem(option);\n            }\n\n            if (this.multiple) {\n                this.sortValues();\n\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mc-option`.\n                    // If search is avaliable then we focus search again.\n                    if (this.search) {\n                        this.search.focus();\n                    } else {\n                        this.focus();\n                    }\n                }\n            }\n        }\n\n        if (wasSelected !== this.selectionModel.isSelected(option)) {\n            this.propagateChanges();\n        }\n\n        this.stateChanges.next();\n    }\n\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    private sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n\n            this.selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n\n    /** Emits change event to set the model value. */\n    private propagateChanges(fallbackValue?: any): void {\n        let valueToEmit: any = null;\n\n        if (this.multiple) {\n            valueToEmit = (this.selected as McOption[]).map((option) => option.value);\n        } else {\n            valueToEmit = this.selected ? (this.selected as McOption).value : fallbackValue;\n        }\n\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this.onChange(valueToEmit);\n        this.selectionChange.emit(new McSelectChange(this, valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /** Records option IDs to pass to the aria-owns property. */\n    private setOptionIds() {\n        this.optionIds = this.options.map((option) => option.id).join(' ');\n    }\n\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    private highlightCorrectOption(): void {\n        if (this.keyManager) {\n            if (this.empty) {\n                this.keyManager.setFirstItemActive();\n            } else {\n                this.keyManager.setActiveItem(this.selectionModel.selected[0]);\n            }\n        }\n    }\n\n    /** Scrolls the active option into view. */\n    private scrollActiveOptionIntoView(): void {\n        const activeOptionIndex = this.keyManager.activeItemIndex || 0;\n        const labelCount = countGroupLabelsBeforeOption(activeOptionIndex, this.options, this.optionGroups);\n\n        this.optionsContainer.nativeElement.scrollTop = getOptionScrollPosition(\n            activeOptionIndex + labelCount,\n            this.getItemHeight(),\n            this.optionsContainer.nativeElement.scrollTop,\n            SELECT_PANEL_MAX_HEIGHT\n        );\n    }\n\n    /** Gets the index of the provided option in the option list. */\n    private getOptionIndex(option: McOption): number | undefined {\n        /* tslint:disable-next-line */\n        return this.options.reduce((result: number, current: McOption, index: number) => {\n            /* tslint:disable-next-line:strict-type-predicates */\n            return result === undefined ? (option === current ? index : undefined) : result;\n        }, undefined);\n    }\n\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    private calculateOverlayPosition(): void {\n        const itemHeight = this.getItemHeight();\n        const items = this.getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n\n        // If no value is selected we open the popup to the first item.\n        let selectedOptionOffset =\n            this.empty ? 0 : this.getOptionIndex(this.selectionModel.selected[0])!;\n\n        selectedOptionOffset += countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        /* tslint:disable-next-line:no-magic-numbers */\n        const scrollBuffer = panelHeight / 2;\n        this.scrollTop = this.calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this.offsetY = this.calculateOverlayOffsetY();\n\n        this.checkOverlayWithinViewport(maxScroll);\n    }\n\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    private calculateOverlayOffsetX(): void {\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const isRtl = this.isRtl();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const paddingWidth = SELECT_PANEL_PADDING_X * 2;\n        let offsetX: number;\n\n        const selected = this.selectionModel.selected[0] || this.options.first;\n        offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n\n        // Invert the offset in LTR.\n        if (!isRtl) { offsetX *= -1; }\n\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        } else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    private calculateOverlayOffsetY(): number {\n        // const itemHeight = this.getItemHeight();\n        // const optionHeightAdjustment = (itemHeight - this.triggerRect.height) / 2;\n\n        // todo I'm not sure that we will use it\n        return 0;\n        // return Math.round(-optionHeightAdjustment);\n    }\n\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    private checkOverlayWithinViewport(maxScroll: number): void {\n        const itemHeight = this.getItemHeight();\n        const viewportSize = this._viewportRuler.getViewportSize();\n\n        const topSpaceAvailable = this.triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable =\n            viewportSize.height - this.triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n        const panelHeightTop = Math.abs(this.offsetY);\n        const totalPanelHeight =\n            Math.min(this.getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this.triggerRect.height;\n\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this.adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        } else if (panelHeightTop > topSpaceAvailable) {\n            this.adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        } else {\n            this.transformOrigin = this.getOriginBasedOnOption();\n        }\n    }\n\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    private adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this.scrollTop -= distanceBelowViewport;\n        this.offsetY -= distanceBelowViewport;\n        this.transformOrigin = this.getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this.scrollTop <= 0) {\n            this.scrollTop = 0;\n            this.offsetY = 0;\n            this.transformOrigin = `50% bottom 0px`;\n        }\n    }\n\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    private adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number, maxScroll: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this.scrollTop += distanceAboveViewport;\n        this.offsetY += distanceAboveViewport;\n        this.transformOrigin = this.getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this.scrollTop >= maxScroll) {\n            this.scrollTop = maxScroll;\n            this.offsetY = 0;\n            this.transformOrigin = `50% top 0px`;\n\n            return;\n        }\n    }\n\n    /** Sets the transform origin point based on the selected option. */\n    private getOriginBasedOnOption(): string {\n        const itemHeight = this.getItemHeight();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const optionHeightAdjustment = (itemHeight - this.triggerRect.height) / 2;\n        /* tslint:disable-next-line:no-magic-numbers */\n        const originY = Math.abs(this.offsetY) - optionHeightAdjustment + itemHeight / 2;\n\n        return `50% ${originY}px 0px`;\n    }\n\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    private getItemCount(): number {\n        return this.options.length + this.optionGroups.length;\n    }\n\n    /** Calculates the height of the select's options. */\n    private getItemHeight(): number {\n        // todo доделать\n        /* tslint:disable-next-line:no-magic-numbers */\n        return 32;\n        // return this.triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n}\n","export enum TimeParts {\n    hours,\n    minutes,\n    seconds\n}\n\nexport enum TimeFormats {\n    HHmmss = 'HH:mm:ss',\n    HHmm = 'HH:mm'\n}\n\nexport const TIMEFORMAT_PLACEHOLDERS: { [timeFormat: string]: string } = {\n    [TimeFormats.HHmmss]: '  :  :  ',\n    [TimeFormats.HHmm]: '  :  '\n};\n\nexport const DEFAULT_TIME_FORMAT: TimeFormats = TimeFormats.HHmm;\n\nexport const HOURS_MINUTES_SECONDS_REGEXP =\n    new RegExp(/^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]|[0-9]):([0-5][0-9]|[0-9])?$/);\nexport const HOURS_MINUTES_REGEXP = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]|[0-9])?$/;\nexport const HOURS_ONLY_REGEXP = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):?$/;\n\nexport const SECONDS_PER_MINUTE: number = 59;\nexport const MINUTES_PER_HOUR: number = 59;\nexport const HOURS_PER_DAY: number = 23;\n\n// TODO Move it to common CDK\nexport const ARROW_UP_KEYCODE: string = 'ArrowUp';\nexport const ARROW_DOWN_KEYCODE: string = 'ArrowDown';\nexport const ARROW_LEFT_KEYCODE: string = 'ArrowLeft';\nexport const ARROW_RIGHT_KEYCODE: string = 'ArrowRight';\n","import { Component, Directive, ElementRef, Input, OnChanges, OnInit, Optional, SimpleChanges } from '@angular/core';\n\nimport { McSidepanelRef } from './sidepanel-ref';\nimport { McSidepanelService } from './sidepanel.service';\n\n\n/**\n * Button that will close the current sidepanel.\n */\n@Directive({\n    selector: 'button[mc-sidepanel-close], button[mcSidepanelClose]',\n    host: {\n        '(click)': 'sidepanelRef.close(sidepanelResult)',\n        class: 'mc-sidepanel-close',\n        type: 'button'\n    }\n})\nexport class McSidepanelClose implements OnInit, OnChanges {\n    @Input('mc-sidepanel-close') sidepanelResult: any;\n\n    @Input('mcSidepanelClose') mcSidepanelClose: any;\n\n    constructor(\n        @Optional() public sidepanelRef: McSidepanelRef,\n        private elementRef: ElementRef<HTMLElement>,\n        private sidepanelService: McSidepanelService\n    ) {}\n\n    ngOnInit() {\n        if (!this.sidepanelRef) {\n            // When this directive is included in a sidepanel via TemplateRef (rather than being\n            // in a Component), the SidepanelRef isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the SidepanelRef by\n            // ID.\n            // This must occur in `onInit`, as the ID binding for the sidepanel container won't\n            // be resolved at constructor time. We use setTimeout by same reason.\n            setTimeout(() => {\n                this.sidepanelRef = getClosestSidepanel(this.elementRef, this.sidepanelService.openedSidepanels)!;\n            });\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const proxiedChange = changes.mcSidepanelClose || changes.sidepanelResult;\n\n        if (proxiedChange) {\n            this.sidepanelResult = proxiedChange.currentValue;\n        }\n    }\n}\n\n/**\n * Header of a sidepanel.\n */\n@Component({\n    selector: 'mc-sidepanel-header',\n    template: `\n        <div class=\"mc-sidepanel-title\">\n            <ng-content></ng-content>\n        </div>\n        <button *ngIf=\"closeable\" mc-sidepanel-close>\n            <span class=\"mc-sidepanel-close-x\">\n                <i mc-icon=\"mc-close-L_16\" class=\"mc-icon mc-icon_light\" color=\"second\"></i>\n            </span>\n        </button>\n    `,\n    host: {\n        class: 'mc-sidepanel-header'\n    }\n})\nexport class McSidepanelHeader {\n    @Input() closeable: boolean;\n}\n\n/**\n * Scrollable content container of a sidepanel.\n */\n@Directive({\n    selector: 'mc-sidepanel-body, [mc-sidepanel-body], mcSidepanelBody',\n    host: {\n        class: 'mc-sidepanel-body'\n    }\n})\nexport class McSidepanelBody {}\n\n/**\n * Footer of a sidepanel.\n */\n@Directive({\n    selector: 'mc-sidepanel-footer, [mc-sidepanel-footer], mcSidepanelFooter',\n    host: {\n        class: 'mc-sidepanel-footer'\n    }\n})\nexport class McSidepanelFooter {}\n\n/**\n * Actions block of a sidepanel footer.\n */\n@Directive({\n    selector: 'mc-sidepanel-actions, [mc-sidepanel-actions], mcSidepanelActions',\n    host: {\n        class: 'mc-sidepanel-actions'\n    }\n})\nexport class McSidepanelActions {}\n\n/**\n * Finds the closest McSidepanelRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a sidepanel.\n * @param openSidepanels References to the currently-open sidepanels.\n */\nfunction getClosestSidepanel(element: ElementRef<HTMLElement>, openSidepanels: McSidepanelRef[]) {\n    let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n    while (parent && !parent.classList.contains('mc-sidepanel-container')) {\n        parent = parent.parentElement;\n    }\n\n    return parent ? openSidepanels.find((sidepanel) => sidepanel.id === parent!.id) : null;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { PortalModule } from '@ptsecurity/cdk/portal';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McSidepanelContainerComponent } from './sidepanel-container.component';\nimport {\n    McSidepanelActions,\n    McSidepanelBody,\n    McSidepanelClose,\n    McSidepanelFooter,\n    McSidepanelHeader\n} from './sidepanel-directives';\nimport { McSidepanelService } from './sidepanel.service';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        PortalModule,\n        McCommonModule,\n        McIconModule\n    ],\n    providers: [McSidepanelService],\n    declarations: [\n        McSidepanelContainerComponent,\n        McSidepanelClose,\n        McSidepanelHeader,\n        McSidepanelBody,\n        McSidepanelFooter,\n        McSidepanelActions\n    ],\n    entryComponents: [McSidepanelContainerComponent],\n    exports: [\n        McSidepanelContainerComponent,\n        McSidepanelClose,\n        McSidepanelHeader,\n        McSidepanelBody,\n        McSidepanelFooter,\n        McSidepanelActions\n    ]\n})\nexport class McSidepanelModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    Input,\n    NgZone, OnDestroy,\n    OnInit,\n    Renderer2,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { coerceBooleanProperty, coerceCssPixelValue, coerceNumberProperty } from '@ptsecurity/cdk/coercion';\n\n\ninterface IArea {\n    area: McSplitterAreaDirective;\n    index: number;\n    order: number;\n    initialSize: number;\n}\n\ninterface IPoint {\n    x: number;\n    y: number;\n}\n\n\nconst enum AttributeProperty {\n    Disabled = 'disabled'\n}\n\nconst enum Cursor {\n    Default = 'default',\n    ResizeColumn = 'col-resize',\n    ResizeRow = 'row-resize'\n}\n\nconst enum StyleProperty {\n    Cursor = 'cursor',\n    Flex = 'flex',\n    FlexBasis = 'flex-basis',\n    FlexDirection = 'flex-direction',\n    Height = 'height',\n    MaxWidth = 'max-width',\n    MinHeight = 'min-height',\n    MinWidth = 'minWidth',\n    OffsetHeight = 'offsetHeight',\n    OffsetWidth = 'offsetWidth',\n    Order = 'order',\n    Width = 'width'\n}\n\nconst enum State {\n    Disabled = 'disabled',\n    Horizontal = 'horizontal',\n    Vertical = 'vertical'\n}\n\nexport const enum Direction {\n    Horizontal = 'horizontal',\n    Vertical = 'vertical'\n}\n\n@Component({\n    selector: 'mc-splitter',\n    preserveWhitespaces: false,\n    styleUrls: ['splitter.css'],\n    templateUrl: './splitter.component.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McSplitterComponent implements OnInit {\n    readonly areas: IArea[] = [];\n\n    private _direction: Direction;\n    private _disabled: boolean = false;\n    private _gutterSize: number = 6;\n\n    private isDragging: boolean = false;\n\n    private readonly areaPositionDivider: number = 2;\n    private readonly listeners: (() => void)[] = [];\n\n    @Input()\n    set direction(direction: Direction) {\n        this._direction = direction;\n    }\n\n    get direction(): Direction {\n        return this._direction;\n    }\n\n    @Input()\n    set disabled(disabled: boolean) {\n        this._disabled = coerceBooleanProperty(disabled);\n    }\n\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    @Input()\n    set gutterSize(gutterSize: number) {\n        const size = coerceNumberProperty(gutterSize);\n        this._gutterSize = size > 0 ? size : this.gutterSize;\n    }\n\n    get gutterSize(): number {\n        return this._gutterSize;\n    }\n\n    constructor(private elementRef: ElementRef,\n                private ngZone: NgZone,\n                private renderer: Renderer2) {}\n\n    addArea(area: McSplitterAreaDirective): void {\n        const index: number = this.areas.length;\n        const order: number = index * this.areaPositionDivider;\n        const size: number = area.getSize();\n\n        area.setOrder(order);\n\n        this.areas.push({\n            area,\n            index,\n            order,\n            initialSize: size\n        });\n    }\n\n    ngOnInit(): void {\n        if (!this.direction) {\n            this.direction = Direction.Horizontal;\n        }\n\n        this.setStyle(StyleProperty.FlexDirection, this.isVertical() ? 'column' : 'row');\n    }\n\n    onMouseDown(event: MouseEvent, leftAreaIndex: number, rightAreaIndex: number) {\n        if (this.disabled) {\n            return;\n        }\n\n        const leftArea = this.areas[leftAreaIndex];\n        const rightArea = this.areas[rightAreaIndex];\n\n        const startPoint: IPoint = {\n            x: event.screenX,\n            y: event.screenY\n        };\n\n        leftArea.initialSize = leftArea.area.getSize();\n        rightArea.initialSize = rightArea.area.getSize();\n\n        this.areas.forEach((item) => {\n            const size = item.area.getSize();\n            item.area.disableFlex();\n            item.area.setSize(size);\n        });\n\n        this.ngZone.runOutsideAngular(() => {\n            this.listeners.push(\n                this.renderer.listen(\n                    'document',\n                    'mouseup',\n                    () => this.onMouseUp()\n                )\n            );\n        });\n\n        this.ngZone.runOutsideAngular(() => {\n            this.listeners.push(\n                this.renderer.listen(\n                    'document',\n                    'mousemove',\n                    (e: MouseEvent) => this.onMouseMove(e, startPoint, leftArea, rightArea)\n                )\n            );\n        });\n\n        this.isDragging = true;\n    }\n\n    removeArea(area: McSplitterAreaDirective): void {\n        let indexToRemove: number = -1;\n\n        this.areas.some((item, index) => {\n            if (item.area === area) {\n                indexToRemove = index;\n\n                return true;\n            }\n\n            return false;\n        });\n\n        if (indexToRemove === -1) {\n            return;\n        }\n\n        this.areas.splice(indexToRemove, 1);\n    }\n\n    private isVertical(): boolean {\n        return this.direction === Direction.Vertical;\n    }\n\n    private onMouseMove(event: MouseEvent, startPoint: IPoint, leftArea: IArea, rightArea: IArea) {\n        if (!this.isDragging || this.disabled) {\n            return;\n        }\n\n        const endPoint: IPoint = {\n            x: event.screenX,\n            y: event.screenY\n        };\n\n        const offset = this.isVertical()\n            ? startPoint.y - endPoint.y\n            : startPoint.x - endPoint.x;\n\n        const newLeftAreaSize = leftArea.initialSize - offset;\n        const newRightAreaSize = rightArea.initialSize + offset;\n\n        const minLeftAreaSize = leftArea.area.getMinSize();\n        const minRightAreaSize = rightArea.area.getMinSize();\n\n        if (newLeftAreaSize <= minLeftAreaSize || newRightAreaSize <= minRightAreaSize) {\n            const rightAreaOffset = leftArea.initialSize - minLeftAreaSize;\n\n            leftArea.area.setSize(minLeftAreaSize);\n            rightArea.area.setSize(rightArea.initialSize + rightAreaOffset);\n        } else if (newLeftAreaSize <= 0) {\n            leftArea.area.setSize(0);\n            rightArea.area.setSize(rightArea.initialSize + leftArea.initialSize);\n        } else if (newRightAreaSize <= 0) {\n            leftArea.area.setSize(rightArea.initialSize + leftArea.initialSize);\n            rightArea.area.setSize(0);\n        } else {\n            leftArea.area.setSize(newLeftAreaSize);\n            rightArea.area.setSize(newRightAreaSize);\n        }\n    }\n\n    private onMouseUp() {\n        while (this.listeners.length > 0) {\n            const unsubscribe = this.listeners.pop();\n\n            if (unsubscribe) {\n                unsubscribe();\n            }\n        }\n\n        this.isDragging = false;\n    }\n\n    private setStyle(property: StyleProperty, value: string | number) {\n        this.renderer.setStyle(this.elementRef.nativeElement, property, value);\n    }\n}\n\n@Directive({\n    selector: 'mc-gutter'\n})\nexport class McGutterDirective implements OnInit {\n    private _direction: Direction = Direction.Vertical;\n    private _disabled: boolean = false;\n    private _order: number = 0;\n    private _size: number = 6;\n\n    @Input()\n    set direction(direction: Direction) {\n        this._direction = direction;\n    }\n\n    get direction(): Direction {\n        return this._direction;\n    }\n\n    @Input()\n    set disabled(disabled: boolean) {\n        this._disabled = coerceBooleanProperty(disabled);\n    }\n\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    @Input()\n    set order(order: number) {\n        this._order = coerceNumberProperty(order);\n    }\n\n    get order(): number {\n        return this._order;\n    }\n\n    @Input()\n    set size(size: number) {\n        this._size = coerceNumberProperty(size);\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    constructor(private renderer: Renderer2,\n                private elementRef: ElementRef) {\n    }\n\n    ngOnInit(): void {\n        this.setStyle(StyleProperty.Cursor, this.getCursor(this.getState()));\n        this.setStyle(StyleProperty.FlexBasis, coerceCssPixelValue(this.size));\n        this.setStyle(this.isVertical() ? StyleProperty.Height : StyleProperty.Width, coerceCssPixelValue(this.size));\n        this.setStyle(StyleProperty.Order, this.order);\n\n        if (!this.isVertical()) {\n            this.setStyle(StyleProperty.Height, '100%');\n        }\n\n        if (this.disabled) {\n            this.setAttr(AttributeProperty.Disabled, 'true');\n        }\n\n        // fix IE issue with gutter icon. flex-direction is requied for flex alignment options\n        this.setStyle(StyleProperty.FlexDirection, this.isVertical() ? 'row' : 'column');\n    }\n\n    private isVertical(): boolean {\n        return this.direction === Direction.Vertical;\n    }\n\n    private getCursor(state: State): string {\n        switch (state) {\n            case State.Disabled:\n                return Cursor.Default;\n            case State.Vertical:\n                return  Cursor.ResizeRow;\n            case State.Horizontal:\n                return Cursor.ResizeColumn;\n            default:\n                throw Error(`Unknown gutter state for cursor: ${state}`);\n        }\n    }\n\n    private getState(): State {\n        return this.disabled\n            ? State.Disabled\n            : this.direction === Direction.Vertical\n                ? State.Vertical\n                : State.Horizontal;\n    }\n\n    private setStyle(property: StyleProperty, value: string | number) {\n        this.renderer.setStyle(this.elementRef.nativeElement, property, value);\n    }\n\n    private setAttr(attribute: AttributeProperty, value: string) {\n        this.renderer.setAttribute(this.elementRef.nativeElement, attribute, value);\n    }\n}\n\n@Directive({\n    selector: 'mc-splitter-area'\n})\nexport class McSplitterAreaDirective implements OnInit, OnDestroy {\n    constructor(private elementRef: ElementRef,\n                private renderer: Renderer2,\n                private splitter: McSplitterComponent) {}\n\n    disableFlex(): void {\n        this.renderer.removeStyle(this.elementRef.nativeElement, 'flex');\n    }\n\n    ngOnInit(): void {\n        this.splitter.addArea(this);\n\n        this.removeStyle(StyleProperty.MaxWidth);\n        this.setStyle(StyleProperty.Flex, '1');\n\n        if (this.splitter.direction === Direction.Vertical) {\n            this.setStyle(StyleProperty.Width, '100%');\n            this.removeStyle(StyleProperty.Height);\n        } else {\n            this.setStyle(StyleProperty.Height, '100%');\n            this.removeStyle(StyleProperty.Width);\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.splitter.removeArea(this);\n    }\n\n    setOrder(order: number): void {\n        this.setStyle(StyleProperty.Order, order);\n    }\n\n    setSize(size: number): void {\n        const sz = coerceNumberProperty(size);\n        this.setStyle(this.getSizeProperty(), coerceCssPixelValue(sz));\n    }\n\n    getSize(): number {\n        return this.elementRef.nativeElement[this.getOffsetSizeProperty()];\n    }\n\n    getMinSize(): number {\n        const styles = getComputedStyle(this.elementRef.nativeElement);\n\n        return parseFloat(styles[this.getMinSizeProperty()]);\n    }\n\n    private isVertical(): boolean {\n        return this.splitter.direction === Direction.Vertical;\n    }\n\n    private getMinSizeProperty(): StyleProperty {\n        return this.isVertical()\n            ? StyleProperty.MinHeight\n            : StyleProperty.MinWidth;\n    }\n\n    private getOffsetSizeProperty(): StyleProperty {\n        return this.isVertical()\n            ? StyleProperty.OffsetHeight\n            : StyleProperty.OffsetWidth;\n    }\n\n    private getSizeProperty(): StyleProperty {\n        return this.isVertical()\n            ? StyleProperty.Height\n            : StyleProperty.Width;\n    }\n\n    private setStyle(style: StyleProperty, value: string | number) {\n        this.renderer.setStyle(this.elementRef.nativeElement, style, value);\n    }\n\n    private removeStyle(style: StyleProperty) {\n        this.renderer.removeStyle(this.elementRef.nativeElement, style);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McGutterDirective, McSplitterAreaDirective, McSplitterComponent } from './splitter.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        McIconModule\n    ],\n    exports: [\n        McGutterDirective,\n        McSplitterAreaDirective,\n        McSplitterComponent\n    ],\n    declarations: [\n        McGutterDirective,\n        McSplitterAreaDirective,\n        McSplitterComponent\n    ]\n})\nexport class McSplitterModule {\n}\n","import { animate, state, style, transition, trigger } from '@angular/animations';\nimport {\n    Attribute,\n    ChangeDetectionStrategy, ChangeDetectorRef,\n    Component,\n    ElementRef, EventEmitter, forwardRef,\n    Input, Output, ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport {\n    ThemePalette,\n    CanColor, CanColorCtor,\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex\n} from '@ptsecurity/mosaic/core';\n\n\nlet nextUniqueId = 0;\n\ntype ToggleLabelPositionType = 'left' | 'right';\n\nexport class McToggleBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McToggleMixinBase:\n    HasTabIndexCtor &\n    CanDisableCtor &\n    CanColorCtor &\n    typeof McToggleBase = mixinTabIndex(mixinColor(mixinDisabled(McToggleBase), ThemePalette.Primary));\n\nexport class McToggleChange {\n    source: McToggleComponent;\n    checked: boolean;\n}\n\n@Component({\n    selector: 'mc-toggle',\n    exportAs: 'mcToggle',\n    templateUrl: './toggle.component.html',\n    styleUrls: ['./toggle.css'],\n    providers: [\n        {provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => McToggleComponent), multi: true}\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color', 'tabIndex'],\n    host: {\n        class: 'mc-toggle',\n        '[id]': 'id',\n        '[attr.id]': 'id',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-toggle_off]': '!checked'\n    },\n    animations: [\n        trigger('switch', [\n            state('true' , style({ left: '50%' })),\n            state('false', style({ left: '1px' })),\n            transition('true <=> false', animate('150ms'))\n        ])\n    ]\n})\nexport class McToggleComponent extends _McToggleMixinBase\n    implements ControlValueAccessor, CanColor, CanDisable, HasTabIndex {\n\n    @ViewChild('input') _inputElement: ElementRef;\n\n    @Input() labelPosition: ToggleLabelPositionType = 'right';\n\n    @Input('aria-label') ariaLabel: string = '';\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n    private _uniqueId: string = `mc-toggle-${++nextUniqueId}`;\n\n    // tslint:disable:member-ordering\n    @Input() id: string = this._uniqueId;\n\n    get inputId(): string {\n        return `${this.id || this._uniqueId}-input`;\n    }\n\n    @Input() name: string | null = null;\n\n    @Input() value: string;\n\n    private _disabled: boolean = false;\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value !== this._disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _checked: boolean = false;\n\n    get checked() {\n        return this._checked;\n    }\n\n    @Input()\n    set checked(value: boolean) {\n        if (value !== this._checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    @Output() readonly change: EventEmitter<McToggleChange> =\n        new EventEmitter<McToggleChange>();\n\n    constructor(public _elementRef: ElementRef,\n                private _focusMonitor: FocusMonitor,\n                private _changeDetectorRef: ChangeDetectorRef,\n                @Attribute('tabindex') tabIndex: string\n    ) {\n        super(_elementRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n    }\n\n    _getAriaChecked(): boolean {\n        return this.checked;\n    }\n\n    _onInteractionEvent(event: Event) {\n        event.stopPropagation();\n    }\n\n    _onLabelTextChange() {\n        this._changeDetectorRef.markForCheck();\n    }\n\n    _onInputClick(event: MouseEvent) {\n        event.stopPropagation();\n        this._updateModelValue();\n        this._emitChangeEvent();\n    }\n\n    writeValue(value: any) {\n        this.checked = !!value;\n    }\n\n    registerOnChange(fn: any) {\n        this._onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: any) {\n        this._onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n    }\n\n    // tslint:disable-next-line:no-empty\n    private _onTouchedCallback = () => {};\n\n    // tslint:disable-next-line:no-empty\n    private _onChangeCallback = (_: any) => {};\n\n    private _updateModelValue() {\n        this._checked = !this.checked;\n        this._onChangeCallback(this.checked);\n        this._onTouchedCallback();\n    }\n\n    private _emitChangeEvent() {\n        const event = new McToggleChange();\n        event.source = this;\n        event.checked = this.checked;\n\n        this._onChangeCallback(this.checked);\n        this.change.emit(event);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McToggleComponent } from './toggle.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule],\n    exports: [McToggleComponent],\n    declarations: [McToggleComponent]\n})\nexport class McToggleModule {\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    TemplateRef,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport {\n    ConnectedOverlayPositionChange,\n    ConnectionPositionPair,\n    Overlay,\n    OverlayRef,\n    ScrollDispatcher,\n    IScrollStrategy,\n    FlexibleConnectedPositionStrategy,\n    IOverlayConnectionPosition,\n    IOriginConnectionPosition,\n    HorizontalConnectionPos,\n    VerticalConnectionPos\n} from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal } from '@ptsecurity/cdk/portal';\nimport {\n    fadeAnimation,\n    DEFAULT_4_POSITIONS,\n    POSITION_MAP\n} from '@ptsecurity/mosaic/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators';\n\n\n@Component({\n    selector: 'mc-tooltip-component',\n    inputs: [\n        'mcMouseEnterDelay',\n        'mcMouseLeaveDelay',\n        'mcTitle',\n        'mcVisible',\n        'mcTrigger',\n        'mcPlacement'\n    ],\n    outputs: ['mcVisibleChange'],\n    animations: [ fadeAnimation ],\n    templateUrl: './tooltip.component.html',\n    preserveWhitespaces: false,\n    styleUrls: ['./tooltip.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '(body:click)': 'this.handleBodyInteraction()'\n    }\n})\nexport class McTooltipComponent {\n    prefix = 'mc-tooltip_placement';\n    positions: ConnectionPositionPair[] = [ ...DEFAULT_4_POSITIONS ];\n    classMap = {};\n    isTitleString: boolean;\n    showTid: number;\n    hideTid: number;\n    availablePositions: any;\n    $visible: Observable<boolean>;\n\n    @Output() mcVisibleChange: EventEmitter<boolean> = new EventEmitter();\n\n    @Input() mcMouseEnterDelay = 400;\n\n    @Input() mcMouseLeaveDelay = 0;\n\n    @Input()\n    get mcTitle(): string | TemplateRef<void> {\n        return this._mcTitle;\n    }\n    set mcTitle(value: string | TemplateRef<void>) {\n        this.isTitleString = !(value instanceof TemplateRef);\n\n        if (this.isTitleString) {\n            this._mcTitle = value;\n        }\n    }\n    private _mcTitle: string | TemplateRef<void>;\n\n    @Input()\n    get mcTrigger(): string {\n        return this._mcTrigger;\n    }\n    set mcTrigger(value: string) {\n        this._mcTrigger = value;\n    }\n    private _mcTrigger: string = 'hover';\n\n    @Input()\n    get mcPlacement(): string {\n        return this._mcPlacement;\n    }\n    set mcPlacement(value: string) {\n        if (value !== this._mcPlacement) {\n            this._mcPlacement = value;\n            this.positions.unshift(POSITION_MAP[ this.mcPlacement ]);\n        } else if (!value) {\n            this._mcPlacement = 'top';\n        }\n    }\n    private _mcPlacement: string = 'top';\n\n    @Input()\n    get mcVisible(): boolean {\n        return this._mcVisible.value;\n    }\n    set mcVisible(value: boolean) {\n        const visible = coerceBooleanProperty(value);\n\n        if (this._mcVisible.value !== visible) {\n            this._mcVisible.next(visible);\n            this.mcVisibleChange.emit(visible);\n        }\n    }\n    private _mcVisible: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n    /** Subject for notifying that the tooltip has been hidden from the view */\n    private readonly onHideSubject: Subject<any> = new Subject();\n    private closeOnInteraction: boolean = false;\n\n    constructor(public cdr: ChangeDetectorRef) {\n        this.availablePositions = POSITION_MAP;\n        this.$visible = this._mcVisible.asObservable();\n    }\n\n    show(): void {\n        if (this.hideTid) {\n            clearTimeout(this.hideTid);\n        }\n\n        if (!this.isContentEmpty()) {\n            if (this.mcTrigger !== 'manual') {\n                this.closeOnInteraction = true;\n            }\n            this.showTid = setTimeout(() => {\n                this.mcVisible = true;\n                this.mcVisibleChange.emit(true);\n\n                // Mark for check so if any parent component has set the\n                // ChangeDetectionStrategy to OnPush it will be checked anyways\n                this.markForCheck();\n            }, this.mcMouseEnterDelay);\n        }\n    }\n\n    hide(): void {\n        if (this.showTid) {\n            clearTimeout(this.showTid);\n        }\n\n        this.hideTid = setTimeout(() => {\n            this.mcVisible = false;\n            this.mcVisibleChange.emit(false);\n            this.onHideSubject.next();\n\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this.markForCheck();\n        }, this.mcMouseLeaveDelay);\n    }\n\n    setClassMap(): void {\n        this.classMap = `${this.prefix}-${this.mcPlacement}`;\n    }\n\n    isContentEmpty(): boolean {\n        return this.isTitleString ? (this.mcTitle === '' || !this.mcTitle) : false;\n    }\n\n    /** Returns an observable that notifies when the tooltip has been hidden from view. */\n    afterHidden(): Observable<void> {\n        return this.onHideSubject.asObservable();\n    }\n\n    markForCheck(): void {\n        this.cdr.markForCheck();\n    }\n\n    handleBodyInteraction(): void {\n        if (this.closeOnInteraction) {\n            this.hide();\n        }\n    }\n}\n\nexport const MC_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function mcTooltipScrollStrategyFactory(overlay: Overlay): () => IScrollStrategy {\n    return () => overlay.scrollStrategies.reposition({scrollThrottle: 20});\n}\n\n/** @docs-private */\nexport const MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_TOOLTIP_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: mcTooltipScrollStrategyFactory\n};\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMcTooltipInvalidPositionError(position: string) {\n    return Error(`McTooltip position \"${position}\" is invalid.`);\n}\n\nconst VIEWPORT_MARGIN: number = 8;\n\n@Directive({\n    selector: '[mcTooltip], [attribute^=\"mcTooltip\"]',\n    exportAs: 'mcTooltip',\n    host: {\n        '(keydown)': 'handleKeydown($event)',\n        '(touchend)': 'handleTouchend()'\n    }\n})\nexport class McTooltip implements OnInit, OnDestroy {\n    isTooltipOpen: boolean = false;\n    isDynamicTooltip = false;\n    parentDisabled: boolean = false;\n    overlayRef: OverlayRef | null;\n    portal: ComponentPortal<McTooltipComponent>;\n    availablePositions: any;\n    tooltip: McTooltipComponent | null;\n\n    @Output() mcVisibleChange = new EventEmitter<boolean>();\n    private $unsubscribe = new Subject<void>();\n\n    @Input('mcTooltip')\n    get mcTitle(): string {\n        return this._mcTitle;\n    }\n    set mcTitle(title: string) {\n        this._mcTitle = title;\n        this.updateCompValue('mcTitle', title);\n    }\n    private _mcTitle: string;\n\n    @Input('mcTitle')\n    set setTitle(title: string) {\n        this.mcTitle = title;\n    }\n\n    @Input('mcTooltipDisabled')\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this.updateCompValue('mcTooltipDisabled', value);\n    }\n    private _disabled: boolean = false;\n\n    @Input('mcMouseEnterDelay')\n    get mcMouseEnterDelay(): number {\n        return this._mcMouseEnterDelay;\n    }\n    set mcMouseEnterDelay(value: number) {\n        this._mcMouseEnterDelay = value;\n        this.updateCompValue('mcMouseEnterDelay', value);\n    }\n    private _mcMouseEnterDelay: number;\n\n    @Input('mcMouseLeaveDelay')\n    get mcMouseLeaveDelay(): number {\n        return this._mcMouseLeaveDelay;\n    }\n    set mcMouseLeaveDelay(value: number) {\n        this._mcMouseLeaveDelay = value;\n        this.updateCompValue('mcMouseLeaveDelay', value);\n    }\n    private _mcMouseLeaveDelay: number;\n\n    @Input('mcTrigger')\n    get mcTrigger(): string {\n        return this._mcTrigger;\n    }\n    set mcTrigger(value: string) {\n        if (value) {\n            this._mcTrigger = value;\n            this.updateCompValue('mcTrigger', value);\n        } else {\n            this._mcTrigger = 'hover';\n        }\n    }\n    private _mcTrigger: string = 'hover';\n\n    @Input('mcPlacement')\n    get mcPlacement(): string {\n        return this._mcPlacement;\n    }\n    set mcPlacement(value: string) {\n        if (value) {\n            this._mcPlacement = value;\n            this.updateCompValue('mcPlacement', value);\n        } else {\n            this._mcPlacement = 'top';\n        }\n    }\n    private _mcPlacement: string = 'top';\n\n    @Input('mcTooltipClass')\n    get mcTooltipClass() { return this._mcTooltipClass; }\n    set mсTooltipClass(value: string | string[] | Set<string> | {[key: string]: any}) {\n        this._mcTooltipClass = value;\n\n        if (this.tooltip) {\n            this.tooltip.setClassMap();\n        }\n    }\n    private _mcTooltipClass: string | string[] | Set<string> | {[key: string]: any};\n\n    @Input('mcVisible')\n    get mcVisible(): boolean {\n        return this._mcVisible;\n    }\n    set mcVisible(externalValue: boolean) {\n        const value = coerceBooleanProperty(externalValue);\n        this._mcVisible = value;\n        this.updateCompValue('mcVisible', value);\n\n        if (value) {\n            this.show();\n        } else {\n            this.hide();\n        }\n    }\n    private _mcVisible: boolean;\n\n    @HostBinding('class.mc-tooltip-open')\n    get isOpen(): boolean {\n        return this.isTooltipOpen;\n    }\n\n    @HostBinding('class.disabled')\n    get isParentDisabled(): boolean {\n        return this.parentDisabled;\n    }\n\n    private manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n    private readonly destroyed = new Subject<void>();\n\n    constructor(\n        private overlay: Overlay,\n        private elementRef: ElementRef,\n        private ngZone: NgZone,\n        private scrollDispatcher: ScrollDispatcher,\n        private hostView: ViewContainerRef,\n        @Inject(MC_TOOLTIP_SCROLL_STRATEGY) private scrollStrategy,\n        @Optional() private direction: Directionality) {\n            this.availablePositions = POSITION_MAP;\n        }\n\n    /** Create the overlay config and position strategy */\n    createOverlay(): OverlayRef {\n        if (this.overlayRef) {\n            return this.overlayRef;\n        }\n\n        // Create connected position strategy that listens for scroll events to reposition.\n        const strategy = this.overlay.position()\n            .flexibleConnectedTo(this.elementRef)\n            .withTransformOriginOn('.mc-tooltip')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(VIEWPORT_MARGIN)\n            .withPositions([ ...DEFAULT_4_POSITIONS ]);\n\n        const scrollableAncestors = this.scrollDispatcher\n            .getAncestorScrollContainers(this.elementRef);\n\n        strategy.withScrollableContainers(scrollableAncestors);\n\n        strategy.positionChanges.pipe(takeUntil(this.destroyed)).subscribe((change) => {\n            if (this.tooltip) {\n                this.onPositionChange(change);\n                if (change.scrollableViewProperties.isOverlayClipped && this.tooltip.mcVisible) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the tooltip.\n                    this.ngZone.run(() => this.hide());\n                }\n            }\n        });\n\n        this.overlayRef = this.overlay.create({\n            direction: this.direction,\n            positionStrategy: strategy,\n            panelClass: 'mc-tooltip-panel',\n            scrollStrategy: this.scrollStrategy()\n        });\n\n        this.updatePosition();\n\n        this.overlayRef.detachments()\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(() => this.detach());\n\n        return this.overlayRef;\n    }\n\n    detach() {\n        if (this.overlayRef && this.overlayRef.hasAttached()) {\n            this.overlayRef.detach();\n        }\n\n        this.tooltip = null;\n    }\n\n    onPositionChange($event: ConnectedOverlayPositionChange): void {\n        let updatedPlacement = this.mcPlacement;\n        Object.keys(this.availablePositions).some((key) => {\n            if ($event.connectionPair.originX === this.availablePositions[key].originX &&\n                $event.connectionPair.originY === this.availablePositions[key].originY &&\n                $event.connectionPair.overlayX === this.availablePositions[key].overlayX &&\n                $event.connectionPair.overlayY === this.availablePositions[key].overlayY) {\n                updatedPlacement = key;\n\n                return true;\n            }\n\n            return false;\n        });\n        this.updateCompValue('mcPlacement', updatedPlacement);\n\n        if (this.tooltip) {\n            this.tooltip.setClassMap();\n            this.tooltip.markForCheck();\n        }\n\n        this.handlePositioningUpdate();\n    }\n\n    handlePositioningUpdate() {\n        if (!this.overlayRef) {\n            this.overlayRef = this.createOverlay();\n        }\n        if (this.mcPlacement === 'right' || this.mcPlacement === 'left') {\n            const pos =\n                (this.overlayRef.overlayElement.clientHeight -\n                    this.hostView.element.nativeElement.clientHeight) / 2; // tslint:disable-line\n            const currentContainer = this.overlayRef.overlayElement.style.top || '0px';\n            this.overlayRef.overlayElement.style.top =\n                `${parseInt(currentContainer.split('px')[0], 10) + pos - 1}px`;\n            // TODO: обновлять положение стрелки\\указателя\\\"дятла\"\n        }\n    }\n\n    // tslint:disable-next-line:no-any\n    updateCompValue(key: string, value: any): void {\n        if (this.isDynamicTooltip && value) {\n            if (this.tooltip) {\n                this.tooltip[key] = value;\n            }\n        }\n    }\n\n    ngOnInit(): void {\n        this.initElementRefListeners();\n    }\n\n    ngOnDestroy(): void {\n        if (this.overlayRef) {\n            this.overlayRef.dispose();\n        }\n        this.manualListeners.forEach((listener, event) =>\n            this.elementRef.nativeElement.removeEventListener(event, listener));\n        this.manualListeners.clear();\n\n        this.$unsubscribe.next();\n        this.$unsubscribe.complete();\n    }\n\n    handleKeydown(e: KeyboardEvent) {\n        if (this.isTooltipOpen && e.keyCode === ESCAPE) { // tslint:disable-line\n            this.hide();\n        }\n    }\n\n    handleTouchend() {\n        this.hide();\n    }\n\n    initElementRefListeners() {\n        if (this.mcTrigger === 'hover') {\n\n            this.manualListeners\n                .set('mouseenter', () => this.show())\n                .set('mouseleave', () => this.hide())\n                .forEach((listener, event) => this.elementRef.nativeElement.addEventListener(event, listener));\n        }\n\n        if (this.mcTrigger === 'focus') {\n\n            this.manualListeners\n                .set('focus', () => this.show())\n                .set('blur', () => this.hide())\n                .forEach((listener, event) => this.elementRef.nativeElement.addEventListener(event, listener));\n        }\n    }\n\n    show(): void {\n        if (!this.disabled) {\n            if (!this.tooltip) {\n                const overlayRef = this.createOverlay();\n                this.detach();\n\n                this.portal = this.portal || new ComponentPortal(McTooltipComponent, this.hostView);\n\n                this.tooltip = overlayRef.attach(this.portal).instance;\n                this.tooltip.afterHidden()\n                    .pipe(takeUntil(this.destroyed))\n                    .subscribe(() => this.detach());\n                this.isDynamicTooltip = true;\n                const properties = [\n                    'mcTitle',\n                    'mcPlacement',\n                    'mcTrigger',\n                    'mcTooltipDisabled',\n                    'mcMouseEnterDelay',\n                    'mcMouseLeaveDelay',\n                    'mсTooltipClass',\n                    'mcVisible'\n                ];\n                properties.forEach((property) => this.updateCompValue(property, this[ property ]));\n                this.tooltip.mcVisibleChange.pipe(takeUntil(this.$unsubscribe), distinctUntilChanged())\n                    .subscribe((data) => {\n                        this.mcVisible = data;\n                        this.mcVisibleChange.emit(data);\n                        this.isTooltipOpen = data;\n                    });\n            }\n            this.updatePosition();\n            this.tooltip.show();\n        }\n    }\n\n    hide(): void {\n        if (this.tooltip) {\n            this.tooltip.hide();\n        }\n    }\n\n    /** Updates the position of the current tooltip. */\n    updatePosition() {\n        if (!this.overlayRef) {\n            this.overlayRef = this.createOverlay();\n        }\n        const position =\n            this.overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n        const origin = this.getOrigin();\n        const overlay = this.getOverlayPosition();\n\n        position.withPositions([\n            {...origin.main, ...overlay.main},\n            {...origin.fallback, ...overlay.fallback}\n        ]);\n    }\n\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    getOrigin(): {main: IOriginConnectionPosition; fallback: IOriginConnectionPosition} {\n        const position = this.mcPlacement;\n        const isLtr = !this.direction || this.direction.value === 'ltr';\n        let originPosition: IOriginConnectionPosition;\n\n        if (position === 'top' || position === 'bottom') {\n            originPosition = {originX: 'center', originY: position === 'top' ? 'top' : 'bottom'};\n        } else if (\n            position === 'top' ||\n            (position === 'left' && isLtr) ||\n            (position === 'right' && !isLtr)) {\n            originPosition = {originX: 'start', originY: 'center'};\n        } else if (\n            position === 'bottom' ||\n            (position === 'right' && isLtr) ||\n            (position === 'left' && !isLtr)) {\n            originPosition = {originX: 'end', originY: 'center'};\n        } else {\n            throw getMcTooltipInvalidPositionError(position);\n        }\n\n        const {x, y} = this.invertPosition(originPosition.originX, originPosition.originY);\n\n        return {\n            main: originPosition,\n            fallback: {originX: x, originY: y}\n        };\n    }\n\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    getOverlayPosition(): {main: IOverlayConnectionPosition; fallback: IOverlayConnectionPosition} {\n        const position = this.mcPlacement;\n        const isLtr = !this.direction || this.direction.value === 'ltr';\n        let overlayPosition: IOverlayConnectionPosition;\n\n        if (position === 'top') {\n            overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n        } else if (position === 'bottom') {\n            overlayPosition = {overlayX: 'center', overlayY: 'top'};\n        } else if (\n            position === 'top' ||\n            (position === 'left' && isLtr) ||\n            (position === 'right' && !isLtr)) {\n            overlayPosition = {overlayX: 'end', overlayY: 'center'};\n        } else if (\n            position === 'bottom' ||\n            (position === 'right' && isLtr) ||\n            (position === 'left' && !isLtr)) {\n            overlayPosition = {overlayX: 'start', overlayY: 'center'};\n        } else {\n            throw getMcTooltipInvalidPositionError(position);\n        }\n\n        const {x, y} = this.invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n        return {\n            main: overlayPosition,\n            fallback: {overlayX: x, overlayY: y}\n        };\n    }\n\n    /** Inverts an overlay position. */\n    private invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n        let newX: HorizontalConnectionPos = x;\n        let newY: VerticalConnectionPos = y;\n        if (this.mcPlacement === 'top' || this.mcPlacement === 'bottom') {\n            if (y === 'top') {\n                newY = 'bottom';\n            } else if (y === 'bottom') {\n                newY = 'top';\n            }\n        } else {\n            if (x === 'end') {\n                newX = 'start';\n            } else if (x === 'start') {\n                newX = 'end';\n            }\n        }\n\n        return {x: newX, y: newY};\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\n\nimport {\n    McTooltipComponent,\n    McTooltip,\n    MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './tooltip.component';\n\n\n@NgModule({\n    declarations: [McTooltipComponent, McTooltip],\n    exports: [McTooltipComponent, McTooltip],\n    imports: [CommonModule, OverlayModule],\n    providers: [MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],\n    entryComponents: [McTooltipComponent]\n})\nexport class McToolTipModule {\n}\n","/* tslint:disable:no-empty */\n\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    Directive,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Input,\n    isDevMode,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    Renderer2,\n    Self,\n    SimpleChanges,\n    ViewChild,\n    ViewChildren,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    RIGHT_ARROW,\n    SPACE,\n    UP_ARROW,\n    A\n} from '@ptsecurity/cdk/keycodes';\nimport {\n    CdkConnectedOverlay,\n    ViewportRuler\n} from '@ptsecurity/cdk/overlay';\nimport { CdkTree } from '@ptsecurity/cdk/tree';\nimport {\n    getOptionScrollPosition,\n    CanDisable,\n    CanUpdateErrorState,\n    ErrorStateMatcher,\n    HasTabIndex,\n    CanDisableCtor,\n    HasTabIndexCtor,\n    CanUpdateErrorStateCtor,\n    mixinTabIndex,\n    mixinDisabled,\n    mixinErrorState,\n    mcSelectAnimations,\n\n    SELECT_PANEL_MAX_HEIGHT,\n    SELECT_PANEL_PADDING_X,\n    SELECT_PANEL_VIEWPORT_PADDING,\n\n    getMcSelectDynamicMultipleError,\n    getMcSelectNonFunctionValueError,\n    getMcSelectNonArrayValueError,\n    MC_SELECT_SCROLL_STRATEGY\n} from '@ptsecurity/mosaic/core';\nimport { McFormField, McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { McTag } from '@ptsecurity/mosaic/tags';\nimport { McTreeSelection, McTreeOption } from '@ptsecurity/mosaic/tree';\nimport { defer, merge, Observable, Subject } from 'rxjs';\nimport {\n    filter,\n    map,\n    startWith,\n    switchMap,\n    take,\n    takeUntil,\n    distinctUntilChanged\n} from 'rxjs/operators';\n\n\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the select value has changed. */\nexport class McTreeSelectChange {\n    constructor(public source: McTreeOption, public value: any, public isUserInput = false) {}\n}\n\n\n@Directive({ selector: 'mc-tree-select-trigger' })\nexport class McTreeSelectTrigger {}\n\n\nclass McTreeSelectBase {\n    constructor(\n        public elementRef: ElementRef,\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {}\n}\n\n// tslint:disable-next-line:naming-convention\nconst McTreeSelectMixinBase: CanDisableCtor & HasTabIndexCtor & CanUpdateErrorStateCtor &\n    typeof McTreeSelectBase = mixinTabIndex(mixinDisabled(mixinErrorState(McTreeSelectBase)));\n\n\n@Component({\n    selector: 'mc-tree-select',\n    exportAs: 'mcTreeSelect',\n    templateUrl: 'tree-select.html',\n    styleUrls: ['./tree-select.css'],\n    inputs: ['disabled', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'tabIndex',\n\n        class: 'mc-tree-select',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-select-invalid]': 'errorState',\n        '[class.mc-select-required]': 'required',\n\n        '(keydown)': 'handleKeydown($event)',\n        '(focus)': 'onFocus()',\n        '(blur)': 'onBlur()',\n        '(window:resize)': 'calculateHiddenItems()'\n    },\n    animations: [\n        mcSelectAnimations.transformPanel,\n        mcSelectAnimations.fadeInContent\n    ],\n    providers: [\n        { provide: McFormFieldControl, useExisting: McTreeSelect },\n        { provide: CdkTree, useExisting: McTreeSelect }\n    ]\n})\nexport class McTreeSelect extends McTreeSelectMixinBase implements\n    AfterContentInit, AfterViewInit, OnChanges, OnDestroy, OnInit, DoCheck, ControlValueAccessor,\n    CanDisable, HasTabIndex, McFormFieldControl<any>, CanUpdateErrorState {\n\n    /** A name for this control that can be used by `mc-form-field`. */\n    controlType = 'mc-select';\n\n    hiddenItems: number = 0;\n    oneMoreText: string = '...ещё';\n\n    /** The last measured value for the trigger's client bounding rect. */\n    triggerRect: ClientRect;\n\n    /** The cached font-size of the trigger element. */\n    triggerFontSize = 0;\n\n    /** Deals with the selection logic. */\n    selectionModel: SelectionModel<McTreeOption>;\n\n    /** The IDs of child options to be passed to the aria-owns attribute. */\n    optionIds: string = '';\n\n    /** The value of the select panel's transform-origin property. */\n    transformOrigin: string = 'top';\n\n    /** Whether the panel's animation is done. */\n    panelDoneAnimating: boolean = false;\n\n    /** Emits when the panel element is finished transforming in. */\n    panelDoneAnimatingStream = new Subject<string>();\n\n    /** Strategy that will be used to handle scrolling while the select panel is open. */\n    scrollStrategy = this.scrollStrategyFactory();\n\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n    offsetY = 0;\n\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n    positions = [\n        {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top'\n        },\n        {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom'\n        }\n    ];\n\n    @ViewChild('trigger') trigger: ElementRef;\n\n    @ViewChild('panel') panel: ElementRef;\n\n    @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n    @ViewChildren(McTag) tags: QueryList<McTag>;\n\n    /** User-supplied override of the trigger element. */\n    @ContentChild(McTreeSelectTrigger) customTrigger: McTreeSelectTrigger;\n\n    @ContentChild(McTreeSelection) tree: McTreeSelection;\n\n    /** Event emitted when the select panel has been toggled. */\n    @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted when the select has been opened. */\n    @Output('opened') readonly openedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => o), map(() => {}));\n\n    /** Event emitted when the select has been closed. */\n    @Output('closed') readonly closedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => !o), map(() => {}));\n\n    /** Event emitted when the selected value has been changed by the user. */\n    @Output() readonly selectionChange = new EventEmitter<McTreeSelectChange>();\n\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n    @Input() panelClass: string | string[] | Set<string> | { [key: string]: any };\n\n    /** Object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Function used to sort the values in a select in multiple mode.\n     * Follows the same logic as `Array.prototype.sort`.\n     */\n    @Input() sortComparator: (\n        a: McTreeOption, b: McTreeOption, options: McTreeOption[]\n    ) => number;\n\n    /** Combined stream of all of the child options' change events. */\n    readonly optionSelectionChanges: Observable<McTreeSelectChange> = defer(() => {\n        if (this.options) {\n            return merge(...this.options.map((option) => option.onSelectionChange));\n        }\n\n        return this.ngZone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n    }) as Observable<McTreeSelectChange>;\n\n    options: QueryList<McTreeOption>;\n\n    private originalOnKeyDown: (event: KeyboardEvent) => void;\n\n    @Input()\n    get placeholder(): string {\n        return this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n\n        this.stateChanges.next();\n    }\n\n    private _placeholder: string;\n\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n\n        this.stateChanges.next();\n    }\n\n    private _required: boolean = false;\n\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        if (this.selectionModel) {\n            throw getMcSelectDynamicMultipleError();\n        }\n\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    private _multiple: boolean = false;\n\n    @Input()\n    get autoSelect(): boolean {\n        if (this.multiple) { return false; }\n\n        return this._autoSelect;\n    }\n\n    set autoSelect(value: boolean) {\n        this._autoSelect = coerceBooleanProperty(value);\n    }\n\n    private _autoSelect: boolean = true;\n\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith() {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        /* tslint:disable-next-line:strict-type-predicates */\n        if (typeof fn !== 'function') {\n            throw getMcSelectNonFunctionValueError();\n        }\n\n        this._compareWith = fn;\n\n        if (this.selectionModel) {\n            // A different comparator means the selection could change.\n            this.initializeSelection();\n        }\n    }\n\n    /** Value of the select control. */\n    @Input()\n    get value(): any {\n        return this._value;\n    }\n\n    set value(newValue: any) {\n        if (newValue !== this._value) {\n            this.writeValue(newValue);\n            this._value = newValue;\n        }\n    }\n\n    private _value: any;\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n        this.stateChanges.next();\n    }\n\n    private _id: string;\n\n    /** Whether the select is focused. */\n    get focused(): boolean {\n        return this._focused || this._panelOpen;\n    }\n\n    /**\n     * @deprecated Setter to be removed as this property is intended to be readonly.\n     * @breaking-change 8.0.0\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n\n    private _focused = false;\n\n    get panelOpen(): boolean {\n        return this._panelOpen;\n    }\n\n    private _panelOpen = false;\n\n    /** The scroll position of the overlay panel, calculated to center the selected option. */\n    private scrollTop = 0;\n\n    /** Unique id for this input. */\n    private readonly uid = `mc-select-${nextUniqueId++}`;\n\n    /** Emits whenever the component is destroyed. */\n    private readonly destroy = new Subject<void>();\n\n    constructor(\n        private readonly viewportRuler: ViewportRuler,\n        readonly changeDetectorRef: ChangeDetectorRef,\n        private readonly ngZone: NgZone,\n        private readonly renderer: Renderer2,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        public elementRef: ElementRef,\n        @Optional() private readonly dir: Directionality,\n        @Optional() parentForm: NgForm,\n        @Optional() parentFormGroup: FormGroupDirective,\n        @Optional() private readonly parentFormField: McFormField,\n        @Self() @Optional() public ngControl: NgControl,\n        @Attribute('tabindex') tabIndex: string,\n        @Inject(MC_SELECT_SCROLL_STRATEGY) private readonly scrollStrategyFactory\n    ) {\n        super(elementRef, defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnInit() {\n        if (this.tree) {\n            this.tree.multiple = this.multiple;\n        }\n\n        this.stateChanges.next();\n\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this.panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this.panelOpen) {\n                    this.scrollTop = 0;\n                    this.openedChange.emit(true);\n                } else {\n                    this.openedChange.emit(false);\n                    this.panelDoneAnimating = false;\n                    this.overlayDir.offsetX = 0;\n                    this.changeDetectorRef.markForCheck();\n                }\n            });\n    }\n\n    ngAfterContentInit() {\n        if (!this.tree) { return; }\n\n        this.initKeyManager();\n\n        this.selectionModel = this.tree.selectionModel = new SelectionModel<McTreeOption>(this.multiple);\n        this.options = this.tree.options;\n        this.tree.autoSelect = this.autoSelect;\n\n        this.selectionModel.changed\n            .pipe(takeUntil(this.destroy))\n            .subscribe((event) => {\n                event.added.forEach((option) => option.select());\n                event.removed.forEach((option) => option.deselect());\n            });\n    }\n\n    ngAfterViewInit() {\n        if (!this.tree) { return; }\n\n        this.tags.changes\n            .subscribe(() => {\n                setTimeout(() => this.calculateHiddenItems(), 0);\n            });\n\n        this.options.changes\n            .pipe(startWith(null), takeUntil(this.destroy))\n            .subscribe(() => {\n                this.updateSelectedOptions();\n\n                this.resetOptions();\n            });\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) { this.updateErrorState(); }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes.disabled) {\n            this.stateChanges.next();\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroy.next();\n\n        this.destroy.complete();\n        this.stateChanges.complete();\n    }\n\n    /** `View -> model callback called when value changes` */\n    onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when select has been touched` */\n    onTouched = () => {};\n\n    toggle() {\n        if (this.panelOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    open() {\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) { return; }\n\n        this.triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this.triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n        this._panelOpen = true;\n        // this.tree.keyManager.withHorizontalOrientation(null);\n        this.calculateOverlayPosition();\n        this.highlightCorrectOption();\n        this.changeDetectorRef.markForCheck();\n\n        // Set the font size on the panel element once it exists.\n        this.ngZone.onStable.asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                if (this.triggerFontSize && this.overlayDir.overlayRef &&\n                    this.overlayDir.overlayRef.overlayElement) {\n                    this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this.triggerFontSize}px`;\n                }\n            });\n    }\n\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n\n            // this.tree.keyManager.setActiveItem(-1);\n\n            // this.tree.keyManager.withHorizontalOrientation(this.isRtl() ? 'rtl' : 'ltr');\n            this.changeDetectorRef.markForCheck();\n            this.onTouched();\n        }\n    }\n\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    // todo нужно доделать!\n    writeValue(value: any) {\n        if (this.options) {\n            this.setSelectionByValue(value);\n        }\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.onChange = fn;\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn: () => {}) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this.changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    get selected(): McTreeOption | McTreeOption[] {\n        return this.multiple ? this.selectionModel.selected : this.selectionModel.selected[0];\n    }\n\n    get triggerValue(): string {\n        if (this.empty) { return ''; }\n\n        return (this.selected as McTreeOption).viewValue;\n    }\n\n    get triggerValues(): McTreeOption[] {\n        if (this.empty) { return []; }\n\n        const selectedOptions = this.selectionModel.selected;\n\n        if (this.isRtl()) { selectedOptions.reverse(); }\n\n        return selectedOptions;\n    }\n\n    get empty(): boolean {\n        return !this.selectionModel || this.selectionModel.isEmpty();\n    }\n\n    isRtl(): boolean {\n        return this.dir ? this.dir.value === 'rtl' : false;\n    }\n\n    handleKeydown(event: KeyboardEvent) {\n        if (!this.disabled) {\n            if (this.panelOpen) {\n                this.handleOpenKeydown(event);\n            } else {\n                this.handleClosedKeydown(event);\n            }\n        }\n    }\n\n    /**\n     * When the panel content is done fading in, the panelDoneAnimating property is\n     * set so the proper class can be added to the panel.\n     */\n    onFadeInDone() {\n        this.panelDoneAnimating = this.panelOpen;\n        this.changeDetectorRef.markForCheck();\n    }\n\n    onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    onBlur() {\n        this._focused = false;\n\n        if (!this.disabled && !this.panelOpen) {\n            this.onTouched();\n            this.changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n\n    /** Callback that is invoked when the overlay panel has been attached. */\n    onAttached() {\n        this.overlayDir.positionChange\n            .pipe(take(1))\n            .subscribe(() => {\n                this.changeDetectorRef.detectChanges();\n                this.calculateOverlayOffsetX();\n                this.panel.nativeElement.scrollTop = this.scrollTop;\n            });\n    }\n\n    /** Returns the theme to be used on the panel. */\n    getPanelTheme(): string {\n        return this.parentFormField ? `mc-${this.parentFormField.color}` : '';\n    }\n\n    /** Focuses the select element. */\n    focus() {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    calculateOverlayScroll(selectedIndex: number, scrollBuffer: number, maxScroll: number): number {\n        const itemHeight = this.getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n\n        /* tslint:disable-next-line:no-magic-numbers */\n        const halfOptionHeight = itemHeight / 2;\n\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n\n    /** Invoked when an option is clicked. */\n    onRemoveSelectedOption(selectedOption: McTreeOption, $event) {\n        $event.stopPropagation();\n\n        this.options.forEach((option) => {\n            if (option.data === selectedOption.data) { option.deselect(); }\n        });\n\n        this.selectionModel.deselect(selectedOption);\n    }\n\n    calculateHiddenItems() {\n        if (this.empty || !this.multiple) { return; }\n\n        let visibleItems: number = 0;\n        const totalItemsWidth = this.getTotalItemsWidthInMatcher();\n        let totalVisibleItemsWidth: number = 0;\n        const itemMargin: number = 4;\n\n        this.tags.forEach((tag) => {\n            if (tag.nativeElement.offsetTop < tag.nativeElement.offsetHeight) {\n                totalVisibleItemsWidth += tag.nativeElement.getBoundingClientRect().width + itemMargin;\n                visibleItems++;\n            }\n        });\n\n        this.hiddenItems = this.selectionModel.selected.length - visibleItems;\n\n        if (this.hiddenItems) {\n            const itemsCounter = this.trigger.nativeElement.querySelector('.mc-tree-select__match-hidden-text');\n            const matcherList = this.trigger.nativeElement.querySelector('.mc-tree-select__match-list');\n\n            const itemsCounterShowed = itemsCounter.offsetTop < itemsCounter.offsetHeight;\n            // const itemsCounterWidth: number = itemsCounter.getBoundingClientRect().width;\n            const itemsCounterWidth: number = 86;\n\n            const matcherListWidth: number = matcherList.getBoundingClientRect().width;\n            const matcherWidth: number = matcherListWidth + itemsCounterWidth;\n\n            if (itemsCounterShowed && (totalItemsWidth < matcherWidth)) { this.hiddenItems = 0; }\n\n            if (\n                totalVisibleItemsWidth === matcherListWidth ||\n                (totalVisibleItemsWidth + itemsCounterWidth) < matcherListWidth\n            ) {\n                this.changeDetectorRef.markForCheck();\n\n                return ;\n            } else if (!itemsCounterShowed && (totalItemsWidth + itemsCounterWidth) > matcherWidth) {\n                this.hiddenItems++;\n            }\n        }\n\n        this.changeDetectorRef.markForCheck();\n    }\n\n    private updateSelectedOptions(): void {\n        this.selectionModel.selected.forEach((selectedOption) => {\n            this.options.forEach((option) => {\n                if (option.data === selectedOption.data) {\n                    this.selectionModel.deselect(selectedOption);\n                    this.selectionModel.select(option);\n\n                    option.select();\n                }\n            });\n        });\n    }\n\n    private getTotalItemsWidthInMatcher(): number {\n        const triggerClone = this.trigger.nativeElement.cloneNode(true);\n        triggerClone.querySelector('.mc-tree-select__match-hidden-text').remove();\n\n        this.renderer.setStyle(triggerClone, 'position', 'absolute');\n        this.renderer.setStyle(triggerClone, 'visibility', 'hidden');\n        this.renderer.setStyle(triggerClone, 'top', '-100%');\n        this.renderer.setStyle(triggerClone, 'left', '0');\n\n        this.renderer.appendChild(this.trigger.nativeElement, triggerClone);\n\n        let totalItemsWidth: number = 0;\n        const itemMargin: number = 4;\n        triggerClone.querySelectorAll('mc-tag').forEach((item) => {\n            totalItemsWidth += item.getBoundingClientRect().width as number + itemMargin;\n        });\n\n        triggerClone.remove();\n\n        return totalItemsWidth;\n    }\n\n    private handleClosedKeydown(event: KeyboardEvent) {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n        // Open the select on ALT + arrow key to match the native <select>\n        if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n            // prevents the page from scrolling down when pressing space\n            event.preventDefault();\n\n            this.open();\n        } else if (!this.multiple && this.tree.keyManager && this.tree.keyManager.onKeydown) {\n            this.tree.keyManager.onKeydown(event);\n        }\n    }\n\n    private handleOpenKeydown(event: KeyboardEvent) {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n\n            this.close();\n        } else if (keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW) {\n            return this.originalOnKeyDown.call(this.tree, event);\n        } else if (keyCode === HOME || keyCode === END) {\n            event.preventDefault();\n\n            if (keyCode === HOME) {\n                this.tree.keyManager.setFirstItemActive();\n            } else {\n                this.tree.keyManager.setLastItemActive();\n            }\n        } else if ((keyCode === ENTER || keyCode === SPACE) && this.tree.keyManager.activeItem) {\n            event.preventDefault();\n\n            this.tree.keyManager.activeItem.selectViaInteraction();\n        } else if (this.multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n\n            const hasDeselectedOptions = this.options.some((option) => !option.selected);\n\n            this.options.forEach((option) => {\n                if (hasDeselectedOptions && !option.disabled) {\n                    option.select();\n                } else {\n                    option.deselect();\n                }\n            });\n        } else {\n            const previouslyFocusedIndex = this.tree.keyManager.activeItemIndex;\n\n            this.tree.keyManager.onKeydown(event);\n\n            if (this.multiple && isArrowKey && event.shiftKey && this.tree.keyManager.activeItem &&\n                this.tree.keyManager.activeItemIndex !== previouslyFocusedIndex) {\n                this.tree.keyManager.activeItem.selectViaInteraction();\n            }\n        }\n    }\n\n    private initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this.setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n        });\n    }\n\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    private setSelectionByValue(value: any | any[]) {\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) { throw getMcSelectNonArrayValueError(); }\n\n            this.selectionModel.clear();\n            value.forEach((currentValue: any) => this.selectValue(currentValue));\n            this.sortValues();\n        } else {\n            this.selectionModel.clear();\n            const correspondingOption = this.selectValue(value);\n\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this.tree.keyManager.setActiveItem(correspondingOption);\n            }\n        }\n\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    private selectValue(value: any): McTreeOption | undefined {\n        const correspondingOption = this.options.find((option: McTreeOption) => {\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            } catch (error) {\n                if (isDevMode()) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n\n                return false;\n            }\n        });\n\n        if (correspondingOption) {\n            this.selectionModel.select(correspondingOption);\n        }\n\n        return correspondingOption;\n    }\n\n    private initKeyManager() {\n        this.originalOnKeyDown = this.tree.onKeyDown;\n\n        this.tree.onKeyDown = () => {};\n\n        this.tree.keyManager.tabOut\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            });\n\n        this.tree.keyManager.change\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this._panelOpen && this.panel) {\n                    this.scrollActiveOptionIntoView();\n                } else if (!this._panelOpen && !this.multiple && this.tree.keyManager.activeItem) {\n                    this.tree.keyManager.activeItem.selectViaInteraction();\n                }\n            });\n    }\n\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    private resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this.destroy);\n\n        this.optionSelectionChanges\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe((event) => {\n                this.onSelect(event.source, event.isUserInput);\n\n                if (event.isUserInput && !this.multiple && this._panelOpen) {\n                    this.close();\n                    this.focus();\n                }\n            });\n\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        // merge(...this.options.map((option) => option.stateChanges))\n        //     .pipe(takeUntil(changedOrDestroyed))\n        //     .subscribe(() => {\n        //         this.changeDetectorRef.markForCheck();\n        //         this.stateChanges.next();\n        //     });\n\n        this.setOptionIds();\n    }\n\n    /** Invoked when an option is clicked. */\n    private onSelect(option: McTreeOption, isUserInput: boolean) {\n        const wasSelected = this.selectionModel.isSelected(option);\n\n        if (option.value == null && !this.multiple) {\n            option.deselect();\n            this.selectionModel.clear();\n            this.propagateChanges(option.value);\n        } else {\n            if (option.selected) {\n                this.selectionModel.select(option);\n            } else {\n                this.selectionModel.deselect(option);\n            }\n\n            if (isUserInput) {\n                this.tree.keyManager.setActiveItem(option);\n            }\n\n            if (this.multiple) {\n                this.sortValues();\n\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mc-option`.\n                    this.focus();\n                }\n            }\n        }\n\n        if (wasSelected !== this.selectionModel.isSelected(option)) {\n            this.propagateChanges();\n        }\n\n        this.stateChanges.next();\n    }\n\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    private sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n\n            this.selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n\n    /** Emits change event to set the model value. */\n    private propagateChanges(fallbackValue?: any) {\n        let valueToEmit: any = null;\n\n        if (this.multiple) {\n            valueToEmit = (this.selected as any).map((option) => option.value);\n        } else {\n            valueToEmit = this.selected ? (this.selected as any).value : fallbackValue;\n        }\n\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this.onChange(valueToEmit);\n        this.selectionChange.emit(new McTreeSelectChange(this as any, valueToEmit));\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Records option IDs to pass to the aria-owns property. */\n    private setOptionIds() {\n        this.optionIds = this.options.map((option) => option.id).join(' ');\n    }\n\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    private highlightCorrectOption() {\n        if (this.tree.keyManager) {\n            if (this.empty) {\n                this.tree.keyManager.setFirstItemActive();\n            } else {\n                this.tree.keyManager.setActiveItem(this.selectionModel.selected[0]);\n            }\n        }\n    }\n\n    /** Scrolls the active option into view. */\n    private scrollActiveOptionIntoView() {\n        const activeOptionIndex = this.tree.keyManager.activeItemIndex || 0;\n\n        this.panel.nativeElement.scrollTop = getOptionScrollPosition(\n            activeOptionIndex,\n            this.getItemHeight(),\n            this.panel.nativeElement.scrollTop,\n            SELECT_PANEL_MAX_HEIGHT\n        );\n    }\n\n    /** Gets the index of the provided option in the option list. */\n    private getOptionIndex(option: McTreeOption): number | undefined {\n        // todo разобраться с этим срачем!\n        return this.options.reduce((result: number, current: McTreeOption, index: number) => {\n            /* tslint:disable-next-line:strict-type-predicates */\n            return result === undefined ? (option === current ? index : undefined) : result;\n        }, undefined);\n    }\n\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    private calculateOverlayPosition() {\n        const itemHeight = this.getItemHeight();\n        const items = this.getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n\n        // If no value is selected we open the popup to the first item.\n        const selectedOptionOffset =\n            this.empty ? 0 : this.getOptionIndex(this.selectionModel.selected[0])!;\n\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        /* tslint:disable-next-line:no-magic-numbers */\n        const scrollBuffer = panelHeight / 2;\n        this.scrollTop = this.calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this.offsetY = this.calculateOverlayOffsetY();\n\n        this.checkOverlayWithinViewport(maxScroll);\n    }\n\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    private calculateOverlayOffsetX() {\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this.viewportRuler.getViewportSize();\n        const isRtl = this.isRtl();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const paddingWidth = SELECT_PANEL_PADDING_X * 2;\n        let offsetX: number = SELECT_PANEL_PADDING_X;\n\n        // Invert the offset in LTR.\n        if (!isRtl) { offsetX *= -1; }\n\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        } else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    private calculateOverlayOffsetY(): number {\n        // const itemHeight = this.getItemHeight();\n        // const optionHeightAdjustment = (itemHeight - this.triggerRect.height) / 2;\n\n        // todo I'm not sure that we will use it\n        return 0;\n        // return Math.round(-optionHeightAdjustment);\n    }\n\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    private checkOverlayWithinViewport(maxScroll: number) {\n        const itemHeight = this.getItemHeight();\n        const viewportSize = this.viewportRuler.getViewportSize();\n\n        const topSpaceAvailable = this.triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable =\n            viewportSize.height - this.triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n        const panelHeightTop = Math.abs(this.offsetY);\n        const totalPanelHeight =\n            Math.min(this.getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this.triggerRect.height;\n\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this.adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        } else if (panelHeightTop > topSpaceAvailable) {\n            this.adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        } else {\n            this.transformOrigin = this.getOriginBasedOnOption();\n        }\n    }\n\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    private adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this.scrollTop -= distanceBelowViewport;\n        this.offsetY -= distanceBelowViewport;\n        this.transformOrigin = this.getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this.scrollTop <= 0) {\n            this.scrollTop = 0;\n            this.offsetY = 0;\n            this.transformOrigin = `50% bottom 0px`;\n        }\n    }\n\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    private adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number, maxScroll: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this.scrollTop += distanceAboveViewport;\n        this.offsetY += distanceAboveViewport;\n        this.transformOrigin = this.getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this.scrollTop >= maxScroll) {\n            this.scrollTop = maxScroll;\n            this.offsetY = 0;\n            this.transformOrigin = `50% top 0px`;\n\n            return;\n        }\n    }\n\n    /** Sets the transform origin point based on the selected option. */\n    private getOriginBasedOnOption(): string {\n        const itemHeight = this.getItemHeight();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const optionHeightAdjustment = (itemHeight - this.triggerRect.height) / 2;\n        /* tslint:disable-next-line:no-magic-numbers */\n        const originY = Math.abs(this.offsetY) - optionHeightAdjustment + itemHeight / 2;\n\n        return `50% ${originY}px 0px`;\n    }\n\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    private getItemCount(): number {\n        return this.options.length;\n    }\n\n    /** Calculates the height of the select's options. */\n    private getItemHeight(): number {\n        // todo доделать\n        /* tslint:disable-next-line:no-magic-numbers */\n        return 32;\n        // return this.triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { CdkTreeModule } from '@ptsecurity/cdk/tree';\nimport { MC_SELECT_SCROLL_STRATEGY_PROVIDER, McPseudoCheckboxModule } from '@ptsecurity/mosaic/core';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\nimport { McTagsModule } from '@ptsecurity/mosaic/tags';\nimport { McTreeModule } from '@ptsecurity/mosaic/tree';\n\nimport { McTreeSelect, McTreeSelectTrigger } from './tree-select.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        CdkTreeModule,\n        McTreeModule,\n        McIconModule,\n        McTagsModule,\n        McPseudoCheckboxModule\n    ],\n    exports: [McTreeSelect, McTreeSelectTrigger, CommonModule],\n    declarations: [McTreeSelect, McTreeSelectTrigger],\n    providers: [MC_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class McTreeSelectModule {}\n","import {\n    Directive, DoCheck, ElementRef, Inject,\n    Input, OnChanges, OnDestroy, Optional,\n    Self, InjectionToken, NgZone, OnInit\n} from '@angular/core';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { fromEvent, Subscription, Subject } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\n\n\nexport const MC_TEXTAREA_VALUE_ACCESSOR =\n    new InjectionToken<{ value: any }>('MC_TEXTAREA_VALUE_ACCESSOR');\n\nlet nextUniqueId = 0;\n\nconst ROW_SEPARATOR = '\\n';\n\nexport class McTextareaBase {\n    constructor(public defaultErrorStateMatcher: ErrorStateMatcher,\n                public parentForm: NgForm,\n                public parentFormGroup: FormGroupDirective,\n                public ngControl: NgControl) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McTextareaMixinBase: CanUpdateErrorStateCtor & typeof McTextareaBase = mixinErrorState(McTextareaBase);\n\n@Directive({\n    selector: 'textarea[mcTextarea]',\n    exportAs: 'mcTextarea',\n    host: {\n        class: 'mc-textarea',\n        '[class.mc-textarea-resizable]': '!canGrow',\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[attr.aria-invalid]': 'errorState',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '(blur)': 'focusChanged(false)',\n        '(focus)': 'focusChanged(true)'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McTextarea }]\n})\nexport class McTextarea extends McTextareaMixinBase implements McFormFieldControl<any>, OnInit, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n\n    @Input() canGrow: boolean = true;\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-textarea';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this.valueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this.valueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n\n    protected uid = `mc-textsrea-${nextUniqueId++}`;\n    protected previousNativeValue: any;\n    protected _disabled = false;\n    protected _id: string;\n    protected _required = false;\n\n    private valueAccessor: { value: any };\n    private growSubscription: Subscription;\n\n    private lineHeight: number = 0;\n    private freeRowsHeight: number = 0;\n    private minHeight: number = 0;\n\n    constructor(protected elementRef: ElementRef,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() parentForm: NgForm,\n                @Optional() parentFormGroup: FormGroupDirective,\n                defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_TEXTAREA_VALUE_ACCESSOR) inputValueAccessor: any,\n                private ngZone: NgZone) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n        // If no input value accessor was explicitly specified, use the element as the textarea value\n        // accessor.\n        this.valueAccessor = inputValueAccessor || this.elementRef.nativeElement;\n\n        this.previousNativeValue = this.value;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n\n        const growObserver = fromEvent(elementRef.nativeElement, 'input')\n            /*.pipe(\n                map((event: any) => this.getGrowHeight()),\n                // map((event: any) => event.target.scrollHeight),\n                distinctUntilChanged()\n            )*/;\n        this.growSubscription = growObserver.subscribe(this.grow.bind(this));\n    }\n\n    ngOnInit() {\n        setTimeout(() => this.grow(), 0);\n        this.lineHeight = parseInt(getComputedStyle(this.elementRef.nativeElement).lineHeight!, 10);\n\n        const paddingTop = parseInt(getComputedStyle(this.elementRef.nativeElement).paddingTop!, 10);\n        const paddingBottom = parseInt(getComputedStyle(this.elementRef.nativeElement).paddingBottom!, 10);\n\n        // tslint:disable-next-line:no-magic-numbers\n        this.minHeight = this.lineHeight * 2 + paddingTop + paddingBottom;\n        this.freeRowsHeight = this.lineHeight;\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        this.growSubscription.unsubscribe();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this.dirtyCheckNativeValue();\n    }\n\n    /** Grow textarea height to avoid vertical scroll  */\n    grow() {\n        if (!this.canGrow) {\n            return;\n        }\n\n        this.ngZone.runOutsideAngular(() => {\n            const textarea = this.elementRef.nativeElement;\n\n            const outerHeight = parseInt(window.getComputedStyle(textarea).height!, 10);\n            const diff = outerHeight - textarea.clientHeight;\n\n            textarea.style.height = 0; // this line is important to height recalculation\n\n            const height = Math.max(this.minHeight, textarea.scrollHeight + diff + this.freeRowsHeight);\n            textarea.style.height = `${height}px`;\n        });\n    }\n\n    /** Focuses the textarea. */\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /** Callback for the cases where the focused state of the textarea changes. */\n    focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this.elementRef.nativeElement.value && !this.isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Does some manual dirty checking on the native textarea `value` property. */\n    protected dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this.previousNativeValue !== newValue) {\n            this.previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Checks whether the textarea is invalid based on the native validation. */\n    protected isBadInput(): boolean {\n        // The `validity` property won't be present on platform-server.\n        const validity = (this.elementRef.nativeElement as HTMLTextAreaElement).validity;\n\n        return validity && validity.badInput;\n    }\n\n    private getGrowHeight(): number {\n        const textarea = this.elementRef.nativeElement;\n        const outerHeight = parseInt(window.getComputedStyle(textarea).height!.toString(), 10);\n        const diff = outerHeight - textarea.clientHeight;\n\n        return Math.max(this.minHeight, textarea.scrollHeight + diff);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McTextarea } from './textarea.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule, FormsModule],\n    exports: [McTextarea],\n    declarations: [McTextarea]\n})\nexport class McTextareaModule {\n}\n","import {\n    Directive,\n    DoCheck,\n    ElementRef,\n    forwardRef,\n    Inject,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Optional,\n    Renderer2,\n    Self\n} from '@angular/core';\nimport {\n    ControlValueAccessor,\n    FormControl,\n    FormGroupDirective,\n    NgControl,\n    NgForm,\n    ValidationErrors\n} from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { DateAdapter } from '@ptsecurity/cdk/datetime';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { MC_INPUT_VALUE_ACCESSOR } from '@ptsecurity/mosaic/input';\nimport {\n    noop,\n    Subject\n} from 'rxjs';\n\nimport {\n    ARROW_DOWN_KEYCODE,\n    ARROW_LEFT_KEYCODE,\n    ARROW_RIGHT_KEYCODE,\n    ARROW_UP_KEYCODE,\n    DEFAULT_TIME_FORMAT,\n    HOURS_PER_DAY,\n    HOURS_MINUTES_REGEXP,\n    HOURS_MINUTES_SECONDS_REGEXP,\n    HOURS_ONLY_REGEXP,\n    MINUTES_PER_HOUR,\n    SECONDS_PER_MINUTE,\n    TIMEFORMAT_PLACEHOLDERS,\n    TimeFormats,\n    TimeParts\n} from './timepicker.constants';\n\n\nlet uniqueComponentIdSuffix: number = 0;\n\nexport class McTimepickerBase {\n    constructor(\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl) { }\n}\n\n// tslint:disable-next-line naming-convention\nexport const McTimepickerMixinBase:\n    CanUpdateErrorStateCtor &\n    typeof McTimepickerBase = mixinErrorState(McTimepickerBase);\n\n@Directive({\n    selector: 'input[mcTimepicker]',\n    exportAs: 'mcTimepickerInput',\n    host: {\n        class: 'mc-timepicker mc-input',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '[attr.time-format]': 'timeFormat',\n        '[attr.min-time]': 'minTime',\n        '[attr.max-time]': 'maxTime',\n        '[attr.value]': 'value',\n        '[attr.aria-invalid]': 'errorState',\n        '(blur)': 'onBlur()',\n        '(focus)': 'focusChanged(true)',\n        '(input)': 'onInput()',\n        '(paste)': 'onPaste($event)',\n        '(keydown)': 'onKeyDown($event)'\n    },\n    providers: [\n        {\n            provide: McFormFieldControl,\n            useExisting: forwardRef(() => McTimepicker)\n        }\n    ]\n})\nexport class McTimepicker extends McTimepickerMixinBase\n    implements McFormFieldControl<any>,\n        OnChanges,\n        OnDestroy,\n        DoCheck,\n        CanUpdateErrorState,\n        ControlValueAccessor {\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-timepicker';\n\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) { return this.ngControl.disabled; }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n        }\n\n        this.stateChanges.next();\n    }\n\n    @Input()\n    get id(): string { return this._id; }\n\n    set id(value: string) { this._id = value || this.uid; }\n\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean { return this._required; }\n\n    set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string { return this.inputValueAccessor.value; }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this.inputValueAccessor.value = value;\n            this.applyInputChanges();\n        }\n    }\n\n    @Input('time-format')\n    get timeFormat(): TimeFormats { return this._timeFormat; }\n\n    set timeFormat(formatValue: TimeFormats) {\n        this._timeFormat = Object\n            .keys(TimeFormats)\n            .map((timeFormatKey) => TimeFormats[timeFormatKey])\n            .indexOf(formatValue) > -1 ? formatValue : DEFAULT_TIME_FORMAT;\n\n        (this.ngControl.control as FormControl).updateValueAndValidity();\n        this.placeholder = TIMEFORMAT_PLACEHOLDERS[this._timeFormat];\n    }\n\n    @Input('min-time')\n    get minTime(): string | null { return this._minTime; }\n\n    set minTime(minValue: string | null) {\n        this._minTime = minValue;\n        this.minDateTime = minValue !== null ? this.getDateFromTimeString(minValue) : undefined;\n        (this.ngControl.control as FormControl).updateValueAndValidity();\n    }\n\n    @Input('max-time')\n    get maxTime(): string | null { return this._maxTime; }\n\n    set maxTime(maxValue: string | null) {\n        this._maxTime = maxValue;\n        this.maxDateTime = maxValue !== null ? this.getDateFromTimeString(maxValue) : undefined;\n        (this.ngControl.control as FormControl).updateValueAndValidity();\n    }\n\n    private _id: string;\n    private readonly uid = `mc-timepicker-${uniqueComponentIdSuffix++}`;\n    private _disabled: boolean;\n    private _required: boolean;\n    private previousNativeValue: any;\n    private readonly inputValueAccessor: { value: any };\n    private onChange: (value: any) => void;\n    private onTouched: () => void;\n    private _timeFormat: TimeFormats;\n    private _minTime: string | null = null;\n    private minDateTime: Date | undefined;\n    private _maxTime: string | null = null;\n    private maxDateTime: Date | undefined;\n    private currentDateTimeInput: Date | undefined;\n\n    constructor(private readonly elementRef: ElementRef,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() parentForm: NgForm,\n                @Optional() parentFormGroup: FormGroupDirective,\n                defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n                private readonly renderer: Renderer2,\n                @Optional() private dateAdapter: DateAdapter<any>) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (!this.dateAdapter) {\n            throw Error(`McTimepicker: No provider found for DateAdapter. You must import one of the existing ` +\n                `modules at your application root or provide a custom implementation or use exists ones.`);\n        }\n\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this.inputValueAccessor = inputValueAccessor || this.elementRef.nativeElement;\n\n        this.previousNativeValue = this.value;\n        this.onChange = noop;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n\n        this.placeholder = TIMEFORMAT_PLACEHOLDERS[DEFAULT_TIME_FORMAT];\n\n        if (this.ngControl) {\n            // Instead of NG_VALUE_ACCESSOR (https://github.com/angular/material2/issues/8158#issuecomment-344618103)\n            this.ngControl.valueAccessor = this;\n\n            // To avoid cyclic dependency https://stackoverflow.com/a/49578414\n            const control = this.ngControl.control as FormControl;\n            const myValidators = [\n                () => this.parseValidator(),\n                () => this.minTimeValidator(),\n                () => this.maxTimeValidator()\n            ];\n            const validators = control.validator\n                ? [control.validator, ...myValidators]\n                : myValidators;\n\n            control.setValidators(validators);\n            control.updateValueAndValidity();\n        }\n    }\n\n    ngOnChanges(): void {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy(): void {\n        this.stateChanges.complete();\n    }\n\n    ngDoCheck(): void {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this.dirtyCheckNativeValue();\n    }\n\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    focusChanged(isFocused: boolean): void {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.onTouched();\n            this.stateChanges.next();\n        }\n    }\n\n    onBlur() {\n        this.applyInputChanges();\n        this.focusChanged(false);\n    }\n\n    onPaste($event) {\n        $event.preventDefault();\n        const clipboardUserInput: string = $event.clipboardData.getData('text');\n\n        if (this.getDateFromTimeString(clipboardUserInput) === undefined) { return; }\n\n        this.elementRef.nativeElement.value = clipboardUserInput;\n        this.onInput();\n    }\n\n    onInput() {\n        const initialCursorStart: number = this.elementRef.nativeElement.selectionStart;\n        const initialCursorEnd: number = this.elementRef.nativeElement.selectionEnd;\n        let isAutocompleteTriggered: boolean = false;\n\n        const {\n            hoursOnly,\n            hoursAndMinutes,\n            hoursAndMinutesAndSeconds\n        } = this.getParsedTimeParts(this.elementRef.nativeElement.value);\n\n        // tslint:disable no-magic-numbers\n        if (hoursOnly &&\n            hoursOnly[1] &&\n            hoursOnly[1].length === 2) {\n            isAutocompleteTriggered = true;\n        } else if (hoursAndMinutes &&\n            hoursAndMinutes[1].length === 1 &&\n            hoursAndMinutes[2] &&\n            hoursAndMinutes[2].length === 2) {\n            isAutocompleteTriggered = true;\n        } else if (hoursAndMinutesAndSeconds &&\n            hoursAndMinutesAndSeconds[1].length === 2 &&\n            hoursAndMinutesAndSeconds[2].length === 2 &&\n            hoursAndMinutesAndSeconds[3] &&\n            hoursAndMinutesAndSeconds[3].length === 2) {\n            isAutocompleteTriggered = true;\n        }\n        // tslint:enable no-magic-numbers\n\n        this.applyInputChanges({ doTimestringReformat: isAutocompleteTriggered });\n\n        this.elementRef.nativeElement.selectionStart = initialCursorStart;\n        this.elementRef.nativeElement.selectionEnd = initialCursorEnd;\n\n        if (isAutocompleteTriggered && this.ngControl.errors === null) {\n            this.createSelectionOfTimeComponentInInput(initialCursorStart + 1);\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this.elementRef.nativeElement.value && !this.isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    writeValue(value: Date | null): void {\n        if (value !== null) {\n            this.renderer.setProperty(this.elementRef.nativeElement,\n                'value',\n                this.getTimeStringFromDate(value, this.timeFormat)\n            );\n        }\n        this.onChange(value || null);\n        this.applyInputChanges();\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n\n        const keyCode: string = this.getKeyCode(event);\n\n        if (keyCode === ARROW_UP_KEYCODE || keyCode === ARROW_DOWN_KEYCODE) {\n            this.upDownTimeByArrowKeys(event);\n        }\n        if (keyCode === ARROW_LEFT_KEYCODE || keyCode === ARROW_RIGHT_KEYCODE) {\n            this.switchSelectionBetweenTimeparts(event);\n        }\n    }\n\n    registerOnChange(fn: (value: Date) => void): void {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    /** Does some manual dirty checking on the native input `value` property. */\n    private dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this.previousNativeValue !== newValue) {\n            this.previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Checks whether the input is invalid based on the native validation. */\n    private isBadInput(): boolean {\n        const validity = (<HTMLInputElement> this.elementRef.nativeElement).validity;\n\n        return validity && validity.badInput;\n    }\n\n    private applyInputChanges(applyParams: {\n        changedTime?: Date;\n        doTimestringReformat?: boolean;\n    } = {}): void {\n        const { changedTime, doTimestringReformat = true } = applyParams;\n        const timeToApply: Date | undefined = changedTime ||\n            this.getDateFromTimeString(this.elementRef.nativeElement.value);\n        this.currentDateTimeInput = timeToApply;\n\n        if (doTimestringReformat && timeToApply !== undefined) {\n            const selectionStart: number = this.elementRef.nativeElement.selectionStart;\n            const selectionEnd: number = this.elementRef.nativeElement.selectionEnd;\n            this.renderer.setProperty(\n                this.elementRef.nativeElement,\n                'value',\n                this.getTimeStringFromDate(timeToApply, this.timeFormat));\n            this.elementRef.nativeElement.selectionStart = selectionStart;\n            this.elementRef.nativeElement.selectionEnd = selectionEnd;\n        }\n\n        (<FormControl> this.ngControl.control).updateValueAndValidity();\n        const result = this.ngControl.errors === null && timeToApply !== undefined ? timeToApply : null;\n        this.onChange(result);\n        this.stateChanges.next();\n    }\n\n    private upDownTimeByArrowKeys(event: KeyboardEvent): void {\n        event.preventDefault();\n\n        let changedTime: Date | undefined = this.currentDateTimeInput;\n        if (changedTime !== undefined) {\n            const cursorPos = this.elementRef.nativeElement.selectionStart;\n\n            const modifiedTimePart = this.getTimeEditMetrics(cursorPos)\n                .modifiedTimePart;\n            const keyCode: string = this.getKeyCode(event);\n            if (keyCode === ARROW_UP_KEYCODE) { changedTime = this.incrementTime(changedTime, modifiedTimePart); }\n            if (keyCode === ARROW_DOWN_KEYCODE) { changedTime = this.decrementTime(changedTime, modifiedTimePart); }\n            this.applyInputChanges({ changedTime });\n            this.createSelectionOfTimeComponentInInput(cursorPos);\n        }\n    }\n\n    private switchSelectionBetweenTimeparts(event: KeyboardEvent): void {\n        const changedTime: Date | undefined = this.currentDateTimeInput;\n        const keyCode: string = this.getKeyCode(event);\n\n        if (changedTime !== undefined) {\n            let cursorPos: number = this.elementRef.nativeElement.selectionStart;\n            if (keyCode === ARROW_LEFT_KEYCODE) {\n                cursorPos = this.getCursorPositionOfPrevTimePartStart(cursorPos, this.elementRef.nativeElement.value);\n            } else if (keyCode === ARROW_RIGHT_KEYCODE) {\n                cursorPos = this.getCursorPositionOfNextTimePartStart(cursorPos, this.elementRef.nativeElement.value);\n            }\n            this.createSelectionOfTimeComponentInInput(cursorPos);\n        }\n    }\n\n    /**\n     * @description Microsoft EDGE doesn't support KeyboaedEvent.code thus we need this helper\n     */\n    private getKeyCode(event: KeyboardEvent): string {\n        return event.code || event.key;\n    }\n\n    private createSelectionOfTimeComponentInInput(cursorPos: number): void {\n        setTimeout(() => {\n            const newEditParams = this.getTimeEditMetrics(cursorPos);\n            this.elementRef.nativeElement.selectionStart = newEditParams.cursorStartPosition;\n            this.elementRef.nativeElement.selectionEnd = newEditParams.cursorEndPosition;\n        });\n    }\n\n    private incrementTime(dateVal: Date,\n                          whatToIncrement: TimeParts = TimeParts.seconds): Date {\n        let { hours, minutes, seconds } = this.getTimeDigitsFromDate(dateVal);\n\n        switch (whatToIncrement) {\n            case TimeParts.hours:\n                hours++;\n                break;\n            case TimeParts.minutes:\n                minutes++;\n                break;\n            case TimeParts.seconds:\n                seconds++;\n                break;\n            default:\n        }\n\n        if (seconds > SECONDS_PER_MINUTE) { seconds = 0; }\n\n        if (minutes > MINUTES_PER_HOUR) { minutes = 0; }\n\n        if (hours > HOURS_PER_DAY) { hours = 0; }\n\n        return <Date> this.getDateFromTimeDigits(hours, minutes, seconds);\n    }\n\n    /**\n     * @description Decrement part of time\n     */\n    private decrementTime(dateVal: Date,\n                          whatToDecrement: TimeParts = TimeParts.seconds): Date {\n        let { hours, minutes, seconds } = this.getTimeDigitsFromDate(dateVal);\n\n        switch (whatToDecrement) {\n            case TimeParts.hours:\n                hours--;\n                break;\n            case TimeParts.minutes:\n                minutes--;\n                break;\n            case TimeParts.seconds:\n                seconds--;\n                break;\n            default:\n        }\n\n        if (seconds < 0) { seconds = SECONDS_PER_MINUTE; }\n\n        if (minutes < 0) { minutes = MINUTES_PER_HOUR; }\n\n        if (hours < 0) { hours = HOURS_PER_DAY; }\n\n        return <Date> this.getDateFromTimeDigits(hours, minutes, seconds);\n    }\n\n    private getCursorPositionOfPrevTimePartStart(cursorPos: number, timeString: string): number {\n        return cursorPos === 0 ? timeString.length : cursorPos - 1;\n    }\n\n    private getCursorPositionOfNextTimePartStart(cursorPos: number,\n                                                 timeString: string,\n                                                 timeDevider: string = ':'): number {\n        const nextDividerPos: number = timeString.indexOf(timeDevider, cursorPos);\n\n        return nextDividerPos !== undefined ? nextDividerPos + 1 : 0;\n    }\n\n    /**\n     * @description Get params for arrow-keys (up/down) time valie edit.\n     * @param cursorPosition Current cursor position in timeString\n     */\n    private getTimeEditMetrics(cursorPosition: number): {\n        modifiedTimePart: TimeParts;\n        cursorStartPosition: number;\n        cursorEndPosition: number;\n    } {\n        const timeString: string = this.elementRef.nativeElement.value;\n        let modifiedTimePart: TimeParts;\n        let cursorStartPosition: number;\n        let cursorEndPosition: number;\n        const hoursIndex = 0;\n        const minutesIndex = timeString.indexOf(':', hoursIndex + 1);\n        const secondsIndex = minutesIndex !== -1 ? timeString.indexOf(':', minutesIndex + 1) : -1;\n\n        if (secondsIndex !== -1 && cursorPosition > secondsIndex) {\n            modifiedTimePart = TimeParts.seconds;\n            cursorStartPosition = secondsIndex + 1;\n            cursorEndPosition = timeString.length;\n        } else if (minutesIndex !== -1 && cursorPosition > minutesIndex) {\n            modifiedTimePart = TimeParts.minutes;\n            cursorStartPosition = minutesIndex + 1;\n            cursorEndPosition = secondsIndex > -1 ? secondsIndex : timeString.length;\n        } else {\n            modifiedTimePart = TimeParts.hours;\n            cursorStartPosition = hoursIndex;\n            cursorEndPosition = minutesIndex !== -1 ? minutesIndex : timeString.length;\n        }\n\n        return {\n            modifiedTimePart,\n            cursorStartPosition,\n            cursorEndPosition\n        };\n    }\n\n    /**\n     * @description Create time string for displaying inside input element of UI\n     */\n    private getTimeStringFromDate(tempVal: Date,\n                                  timeFormat: TimeFormats = DEFAULT_TIME_FORMAT): string {\n        const hours: string = this.getNumberWithLeadingZero(tempVal.getHours());\n        const minutes: string = this.getNumberWithLeadingZero(tempVal.getMinutes());\n        const seconds: string = this.getNumberWithLeadingZero(tempVal.getSeconds());\n\n        const formattedTimeGenerators = {\n            [TimeFormats.HHmm]: () => `${hours}:${minutes}`,\n            [TimeFormats.HHmmss]: () => `${hours}:${minutes}:${seconds}`\n        };\n\n        return formattedTimeGenerators[timeFormat]();\n    }\n\n    private getParsedTimeParts(timeString: string): {\n        hoursOnly: any;\n        hoursAndMinutes: any;\n        hoursAndMinutesAndSeconds: any;\n    } {\n        const momentWrappedTime = this.dateAdapter.parse(timeString, [\n            'h:m a',\n            'h:m:s a',\n            'H:m',\n            'H:m:s'\n        ]);\n\n        const convertedTimeString = momentWrappedTime !== null\n            ? momentWrappedTime.format('HH:mm:ss')\n            : '';\n\n        const hoursAndMinutesAndSeconds = convertedTimeString.match(HOURS_MINUTES_SECONDS_REGEXP);\n        const hoursAndMinutes = convertedTimeString.match(HOURS_MINUTES_REGEXP);\n        const hoursOnly = convertedTimeString.match(HOURS_ONLY_REGEXP);\n\n        return {\n            hoursOnly,\n            hoursAndMinutes,\n            hoursAndMinutesAndSeconds\n        };\n    }\n\n    /**\n     * @description Create Date object from separate parts of time\n     */\n    private getDateFromTimeDigits(hours: number, minutes: number, seconds: number = 0): Date | undefined {\n        return this.getDateFromTimeString(`${hours}:${minutes}:${seconds}`);\n    }\n\n    private getDateFromTimeString(timeString: string | undefined): Date | undefined {\n        // TODO Use moment-js\n        if (timeString === undefined) { return; }\n\n        const {\n            hoursOnly,\n            hoursAndMinutes,\n            hoursAndMinutesAndSeconds\n        } = this.getParsedTimeParts(timeString);\n\n        if (timeString.trim().length === 0 ||\n            hoursOnly === null && hoursAndMinutes === null && hoursAndMinutesAndSeconds === null) {\n            return;\n        }\n\n        // tslint:disable no-magic-numbers\n        let hours: number = 0;\n        let minutes: number = 0;\n        let seconds: number = 0;\n\n        if (hoursOnly) {\n            hours = Number(hoursOnly[1]);\n        } else if (hoursAndMinutes) {\n            hours = Number(hoursAndMinutes[1]);\n            minutes = Number(hoursAndMinutes[2]);\n        } else if (hoursAndMinutesAndSeconds) {\n            hours = Number(hoursAndMinutesAndSeconds[1]);\n            minutes = Number(hoursAndMinutesAndSeconds[2]);\n            seconds = Number(hoursAndMinutesAndSeconds[3]);\n        }\n        // const timestamp: number = Date.parse(fullDateString);\n        const resultDate: Date = new Date(1970, 0, 1, hours, minutes, seconds);\n        // tslint:enable no-magic-numbers\n\n        return isNaN(resultDate.getTime()) ? undefined : resultDate;\n    }\n\n    private getNumberWithLeadingZero(digit: number): string {\n        const MAX_DIGIT_WITH_LEADING_ZERO: number = 9;\n\n        return digit > MAX_DIGIT_WITH_LEADING_ZERO ? `${digit}` : `0${digit}`;\n    }\n\n    private getTimeDigitsFromDate(dateVal: Date): { hours: number; minutes: number; seconds: number } {\n        return {\n            hours: dateVal.getHours(),\n            minutes: dateVal.getMinutes(),\n            seconds: dateVal.getSeconds()\n        };\n    }\n\n    private parseValidator(): ValidationErrors | null {\n        return this.currentDateTimeInput === undefined ?\n            { mcTimepickerParse: { text: this.elementRef.nativeElement.value } } :\n            null;\n    }\n\n    private minTimeValidator(): ValidationErrors | null {\n\n        if (this.currentDateTimeInput !== undefined &&\n            this.minDateTime !== undefined &&\n            this.isTimeLowerThenMin(this.currentDateTimeInput)) {\n            return { mcTimepickerLowerThenMintime: { text: this.elementRef.nativeElement.value } };\n        }\n\n        return null;\n    }\n\n    private maxTimeValidator(): ValidationErrors | null {\n        if (this.currentDateTimeInput !== undefined &&\n            this.maxDateTime !== undefined &&\n            this.isTimeGreaterThenMax(this.currentDateTimeInput)) {\n            return { mcTimepickerHigherThenMaxtime: { text: this.elementRef.nativeElement.value } };\n        }\n\n        return null;\n    }\n\n    private isTimeLowerThenMin(timeToCompare: Date): boolean {\n        return timeToCompare.getTime() - (<Date> this.minDateTime).getTime() < 0;\n    }\n\n    private isTimeGreaterThenMax(timeToCompare: Date): boolean {\n        return timeToCompare.getTime() - (<Date> this.maxDateTime).getTime() >= 0;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McTimepicker } from './timepicker';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        FormsModule\n    ],\n    declarations: [\n        McTimepicker\n    ],\n    exports: [\n        McTimepicker\n    ]\n})\nexport class McTimepickerModule {}\n","import { InjectionToken } from '@angular/core';\n\n\n/** Injection token that can be used to access the data that was passed in to a sidepanel. */\nexport const MC_SIDEPANEL_DATA = new InjectionToken<any>('McSidepanelData');\n\nexport enum McSidepanelPosition {\n    Right = 'right',\n    Left = 'left',\n    Top = 'top',\n    Bottom = 'bottom'\n}\n\nexport class McSidepanelConfig<D = any> {\n    /** ID for the sidepanel. If omitted, a unique one will be generated. */\n    id?: string;\n\n    /** Data being injected into the child component. */\n    data?: D | null = null;\n\n    position?: McSidepanelPosition = McSidepanelPosition.Right;\n\n    /** Whether the sidepanel has a backdrop. */\n    hasBackdrop?: boolean = true;\n\n    /** When we open multiple sidepanels, backdrop appears only once, except cases then this flag is true. */\n    requiredBackdrop?: boolean = false;\n\n    /** Whether the user can use escape or clicking outside to close the sidepanel. */\n    disableClose?: boolean = false;\n\n    /** Custom class for the overlay pane. */\n    overlayPanelClass?: string | string[] = '';\n}\n","import { animate, AnimationTriggerMetadata, state, style, transition, trigger } from '@angular/animations';\nimport { AnimationCurves } from '@ptsecurity/mosaic/core';\n\nimport { McSidepanelPosition } from './sidepanel-config';\n\n\nexport enum McSidepanelAnimationState {\n    Void = 'void',\n    Visible = 'visible',\n    Hidden = 'hidden'\n}\n\n// TODO Find a way to use dynamic keys and avoid error \"Expression form not supported.\"\n// tslint:disable-next-line\nexport const mcSidepanelTransformAnimation: Record<McSidepanelPosition, { in: string; out: string }> = {\n    right: { in: 'translateX(100%)', out: 'translateX(0%)' },\n    left: { in: 'translateX(-100%)', out: 'translateX(0%)' },\n    top: { in: 'translateY(-100%)', out: 'translateY(0%)' },\n    bottom: { in: 'translateY(100%)', out: 'translateY(0%)' }\n};\n\nexport const mcSidepanelAnimations: {\n    readonly sidepanelState: AnimationTriggerMetadata;\n} = {\n    sidepanelState: trigger('state', [\n        state('hidden',\n            style({ transform: '{{transformIn}}' }),\n            { params: { transformIn: mcSidepanelTransformAnimation[McSidepanelPosition.Right].in }}\n        ),\n        state('visible',\n            style({ transform: '{{transformOut}}' }),\n            { params: { transformOut: mcSidepanelTransformAnimation[McSidepanelPosition.Right].out }}\n        ),\n        transition('visible => void, visible => hidden',\n            animate(`200ms ${AnimationCurves.AccelerationCurve}`)),\n        transition('void => visible',\n            animate(`200ms ${AnimationCurves.DecelerationCurve}`))\n    ])\n};\n","import { AnimationEvent } from '@angular/animations';\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ComponentRef,\n    ElementRef,\n    EmbeddedViewRef,\n    EventEmitter, Inject, InjectionToken,\n    OnDestroy,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal } from '@ptsecurity/cdk/portal';\n\nimport {\n    mcSidepanelAnimations,\n    McSidepanelAnimationState,\n    mcSidepanelTransformAnimation\n} from './sidepanel-animations';\n\nimport { McSidepanelConfig, McSidepanelPosition } from './sidepanel-config';\n\n\nexport const MC_SIDEPANEL_WITH_INDENT =\n    new InjectionToken<boolean>('mc-sidepanel-with-indent');\n\nexport const MC_SIDEPANEL_WITH_SHADOW =\n    new InjectionToken<boolean>('mc-sidepanel-with-shadow');\n\n@Component({\n    selector: 'mc-sidepanel-container',\n    templateUrl: './sidepanel-container.component.html',\n    styleUrls: ['./sidepanel.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    animations: [mcSidepanelAnimations.sidepanelState],\n    host: {\n        class: 'mc-sidepanel-container',\n        tabindex: '-1',\n        role: 'dialog',\n        'aria-modal': 'true',\n        '[attr.id]': 'id',\n        '[@state]': `{\n            value: animationState,\n            params: animationTransform\n        }`,\n        '(@state.start)': 'onAnimation($event)',\n        '(@state.done)': 'onAnimation($event)'\n    }\n})\nexport class McSidepanelContainerComponent extends BasePortalOutlet implements OnDestroy {\n    /** ID for the container DOM element. */\n    id: string;\n\n    /** The portal outlet inside of this container into which the content will be loaded. */\n    @ViewChild(CdkPortalOutlet) portalOutlet: CdkPortalOutlet;\n\n    /** The state of the sidepanel animations. */\n    animationState: McSidepanelAnimationState = McSidepanelAnimationState.Void;\n\n    animationTransform: { transformIn: string; transformOut: string };\n\n    /** Emits whenever the state of the animation changes. */\n    animationStateChanged = new EventEmitter<AnimationEvent>();\n\n    /** Whether the component has been destroyed. */\n    private destroyed: boolean;\n\n    constructor(\n        private elementRef: ElementRef<HTMLElement>,\n        private changeDetectorRef: ChangeDetectorRef,\n        public sidepanelConfig: McSidepanelConfig,\n        @Inject(MC_SIDEPANEL_WITH_INDENT) public withIndent: boolean,\n        @Inject(MC_SIDEPANEL_WITH_SHADOW) public withShadow: boolean) {\n        super();\n    }\n\n    ngOnDestroy(): void {\n        this.destroyed = true;\n    }\n\n    /** Attach a component portal as content to this sidepanel container. */\n    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n        this.validatePortalAttached();\n        this.setAnimation();\n        this.setPanelClass();\n\n        return this.portalOutlet.attachComponentPortal(portal);\n    }\n\n    /** Attach a template portal as content to this sidepanel container. */\n    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n        this.validatePortalAttached();\n        this.setAnimation();\n        this.setPanelClass();\n\n        return this.portalOutlet.attachTemplatePortal(portal);\n    }\n\n    /** Begin animation of the sidepanel entrance into view. */\n    enter(): void {\n        if (!this.destroyed) {\n            this.animationState = McSidepanelAnimationState.Visible;\n            this.changeDetectorRef.detectChanges();\n        }\n    }\n\n    /** Begin animation of the sidepanel exiting from view. */\n    exit(): void {\n        if (!this.destroyed) {\n            this.animationState = McSidepanelAnimationState.Hidden;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    onAnimation(event: AnimationEvent) {\n        this.animationStateChanged.emit(event);\n    }\n\n    private setAnimation() {\n        const position: McSidepanelPosition = this.sidepanelConfig.position!;\n\n        this.animationTransform = {\n            transformIn: mcSidepanelTransformAnimation[position].in,\n            transformOut: mcSidepanelTransformAnimation[position].out\n        };\n    }\n\n    private setPanelClass() {\n        const element: HTMLElement = this.elementRef.nativeElement;\n        const position: McSidepanelPosition = this.sidepanelConfig.position!;\n\n        element.classList.add(`mc-sidepanel-container_${position}`);\n\n        if (this.withShadow) {\n            element.classList.add('mc-sidepanel-container_shadowed');\n        }\n    }\n\n    private validatePortalAttached() {\n        if (this.portalOutlet.hasAttached()) {\n            throw Error('Attempting to attach sidepanel content after content is already attached');\n        }\n    }\n}\n","import { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { merge, Observable, Subject } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\n\nimport { McSidepanelAnimationState } from './sidepanel-animations';\nimport { McSidepanelConfig } from './sidepanel-config';\nimport { McSidepanelContainerComponent } from './sidepanel-container.component';\n\n\n// Counter for unique sidepanel ids.\nlet uniqueId = 0;\n\nexport class McSidepanelRef<T = any, R = any> {\n    readonly id: string;\n\n    /** Instance of the component making up the content of the sidepanel. */\n    instance: T;\n\n    /** Subject for notifying the user that the sidepanel has been closed and dismissed. */\n    private readonly afterClosed$ = new Subject<R | undefined>();\n\n    /** Subject for notifying the user that the sidepanel has opened and appeared. */\n    private readonly afterOpened$ = new Subject<void>();\n\n    /** Result to be passed down to the `afterDismissed` stream. */\n    private result: R | undefined;\n\n    constructor(\n        public containerInstance: McSidepanelContainerComponent,\n        private overlayRef: OverlayRef,\n        public config: McSidepanelConfig) {\n\n        this.id = this.config.id || `mc-sidepanel-${uniqueId++}`;\n        this.containerInstance.id = this.id;\n\n        // Emit when opening animation completes\n        containerInstance.animationStateChanged.pipe(\n            filter(\n                (event) => event.phaseName === 'done' && event.toState === McSidepanelAnimationState.Visible\n            ),\n            take(1)\n        ).subscribe(() => {\n            this.afterOpened$.next();\n            this.afterOpened$.complete();\n        });\n\n        // Dispose overlay when closing animation is complete\n        containerInstance.animationStateChanged.pipe(\n            filter(\n                (event) => event.phaseName === 'done' && event.toState === McSidepanelAnimationState.Hidden\n            ),\n            take(1)\n        ).subscribe(() => {\n            overlayRef.dispose();\n            this.afterClosed$.next(this.result);\n            this.afterClosed$.complete();\n        });\n\n        if (!containerInstance.sidepanelConfig.disableClose) {\n            merge(\n                overlayRef.backdropClick(),\n                overlayRef.keydownEvents().pipe(\n                    // tslint:disable:deprecation\n                    // keyCode is deprecated, but IE11 and Edge don't support code property, which we need use instead\n                    filter((event) => event.keyCode === ESCAPE)\n                )\n            ).subscribe(() => this.close());\n        }\n    }\n\n    close(result?: R): void {\n        if (!this.afterClosed$.closed) {\n            // Transition the backdrop in parallel to the sidepanel.\n            this.containerInstance.animationStateChanged.pipe(\n                filter((event) => event.phaseName === 'done'),\n                take(1)\n            ).subscribe(() => this.overlayRef.detachBackdrop());\n\n            this.result = result;\n            this.containerInstance.exit();\n        }\n    }\n\n    /** Gets an observable that is notified when the sidepanel is finished closing. */\n    afterClosed(): Observable<R | undefined> {\n        return this.afterClosed$.asObservable();\n    }\n\n    /** Gets an observable that is notified when the sidepanel has opened and appeared. */\n    afterOpened(): Observable<void> {\n        return this.afterOpened$.asObservable();\n    }\n}\n","import {\n    ComponentRef,\n    Inject,\n    Injectable,\n    InjectionToken,\n    Injector, OnDestroy,\n    Optional,\n    SkipSelf,\n    TemplateRef\n} from '@angular/core';\nimport { Overlay, OverlayConfig, OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal, IComponentType, PortalInjector, TemplatePortal } from '@ptsecurity/cdk/portal';\n\nimport { MC_SIDEPANEL_DATA, McSidepanelConfig } from './sidepanel-config';\nimport {\n    McSidepanelContainerComponent,\n    MC_SIDEPANEL_WITH_INDENT,\n    MC_SIDEPANEL_WITH_SHADOW\n} from './sidepanel-container.component';\nimport { McSidepanelRef } from './sidepanel-ref';\n\n\n/** Injection token that can be used to specify default sidepanel options. */\nexport const MC_SIDEPANEL_DEFAULT_OPTIONS =\n    new InjectionToken<McSidepanelConfig>('mc-sidepanel-default-options');\n\n@Injectable()\nexport class McSidepanelService implements OnDestroy {\n    private openedSidepanelsAtThisLevel: McSidepanelRef[] = [];\n\n    /** Keeps track of the currently-open sidepanels. */\n    get openedSidepanels(): McSidepanelRef[] {\n        return this.parentSidepanelService ? this.parentSidepanelService.openedSidepanels :\n            this.openedSidepanelsAtThisLevel;\n    }\n\n    constructor(\n        private overlay: Overlay,\n        private injector: Injector,\n        @Optional() @Inject(MC_SIDEPANEL_DEFAULT_OPTIONS) private defaultOptions: McSidepanelConfig,\n        @Optional() @SkipSelf() private parentSidepanelService: McSidepanelService) {\n    }\n\n    ngOnDestroy() {\n        // Only close the sidepanels at this level on destroy\n        // since the parent service may still be active.\n        this.closeSidepanels(this.openedSidepanelsAtThisLevel);\n    }\n\n    open<T, D = any>(componentOrTemplateRef: IComponentType<T> | TemplateRef<T>,\n                     config?: McSidepanelConfig<D>): McSidepanelRef<T> {\n        const fullConfig = {\n            ...(this.defaultOptions || new McSidepanelConfig()),\n            ...config\n        };\n\n        if (fullConfig.id && this.getSidepanelById(fullConfig.id)) {\n            throw Error(`Sidepanel with id \"${fullConfig.id}\" exists already. The sidepanel id must be unique.`);\n        }\n\n        const overlayRef = this.createOverlay(fullConfig);\n        const container = this.attachContainer(overlayRef, fullConfig);\n        const ref = new McSidepanelRef(container, overlayRef, fullConfig);\n\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n                $implicit: fullConfig.data,\n                sidepanelRef: ref\n            } as any));\n        } else {\n            const injector = this.createInjector(fullConfig, ref, container);\n            const portal = new ComponentPortal(componentOrTemplateRef, undefined, injector);\n            const contentRef = container.attachComponentPortal(portal);\n\n            ref.instance = contentRef.instance;\n        }\n\n        this.openedSidepanels.push(ref);\n        ref.afterClosed().subscribe(() => this.removeOpenSidepanel(ref));\n        container.enter();\n\n        return ref;\n    }\n\n    /**\n     * Closes all of the currently-open sidepanels.\n     */\n    closeAll(): void {\n        this.closeSidepanels(this.openedSidepanels);\n    }\n\n    /**\n     * Finds an open sidepanel by its id.\n     * @param id ID to use when looking up the sidepanel.\n     */\n    getSidepanelById(id: string): McSidepanelRef | undefined {\n        return this.openedSidepanels.find((sidepanel) => sidepanel.id === id);\n    }\n\n    /**\n     * Attaches the sidepanel container component to the overlay.\n     */\n    private attachContainer(overlayRef: OverlayRef, config: McSidepanelConfig): McSidepanelContainerComponent {\n        const openedSidepanelsWithSamePosition = this.getOpenedSidepanelsWithSamePosition(config);\n\n        const injector = new PortalInjector(this.injector, new WeakMap<any>([\n            [McSidepanelConfig, config],\n            [MC_SIDEPANEL_WITH_INDENT, openedSidepanelsWithSamePosition.length >= 1],\n            [MC_SIDEPANEL_WITH_SHADOW, openedSidepanelsWithSamePosition.length < 2] // tslint:disable-line\n        ]));\n\n        const containerPortal = new ComponentPortal(McSidepanelContainerComponent, undefined, injector);\n        const containerRef: ComponentRef<McSidepanelContainerComponent> = overlayRef.attach(containerPortal);\n\n        return containerRef.instance;\n    }\n\n    /**\n     * Creates a custom injector to be used inside the sidepanel. This allows a component loaded inside\n     * of a sidepanel to close itself and, optionally, to return a value.\n     * @param config Config object that is used to construct the sidepanel.\n     * @param sidepanelRef Reference to the sidepanel.\n     * @param sidepanelContainer Sidepanel container element that wraps all of the contents.\n     * @returns The custom injector that can be used inside the sidepanel.\n     */\n    private createInjector<T>(\n        config: McSidepanelConfig,\n        sidepanelRef: McSidepanelRef<T>,\n        sidepanelContainer: McSidepanelContainerComponent): PortalInjector {\n\n        // The McSidepanelContainerComponent is injected in the portal as the McSidepanelContainerComponent and\n        // the sidepanel's content are created out of the same ViewContainerRef and as such, are siblings for injector\n        // purposes. To allow the hierarchy that is expected, the McSidepanelContainerComponent is explicitly\n        // added to the injection tokens.\n        const injectionTokens = new WeakMap<any>([\n            [McSidepanelContainerComponent, sidepanelContainer],\n            [MC_SIDEPANEL_DATA, config.data],\n            [McSidepanelRef, sidepanelRef]\n        ]);\n\n        return new PortalInjector(this.injector, injectionTokens);\n    }\n\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified sidepanel config.\n     */\n    private createOverlay(config: McSidepanelConfig): OverlayRef {\n        const overlayConfig = new OverlayConfig({\n            hasBackdrop: config.hasBackdrop,\n            backdropClass: this.getBackdropClass(config),\n            maxWidth: '100%',\n            panelClass: config.overlayPanelClass,\n            scrollStrategy: this.overlay.scrollStrategies.block(),\n            positionStrategy: this.overlay.position().global()\n        });\n\n        return this.overlay.create(overlayConfig);\n    }\n\n    private closeSidepanels(sidepanels: McSidepanelRef[]) {\n        const reversedOpenedSidepanels = [...sidepanels.reverse()];\n\n        reversedOpenedSidepanels.forEach((sidepanelRef: McSidepanelRef) => {\n            sidepanelRef.close();\n        });\n    }\n\n    private getBackdropClass(config: McSidepanelConfig): string {\n        const hasOpenedSidepanelWithBackdrop =\n            this.openedSidepanels.some((sidepanelRef) => sidepanelRef.config.hasBackdrop!);\n\n        return config.requiredBackdrop || !hasOpenedSidepanelWithBackdrop ? 'cdk-overlay-dark-backdrop' :\n            'cdk-overlay-transparent-backdrop';\n    }\n\n    private getOpenedSidepanelsWithSamePosition(config: McSidepanelConfig): McSidepanelRef[] {\n        return this.openedSidepanels.filter((sidepanelRef) => sidepanelRef.config.position === config.position);\n    }\n\n    /**\n     * Removes a sidepanel from the array of open sidepanels.\n     * @param sidepanelRef Sidepanel to be removed.\n     */\n    private removeOpenSidepanel(sidepanelRef: McSidepanelRef) {\n        const index = this.openedSidepanels.indexOf(sidepanelRef);\n\n        if (index > -1) {\n            this.openedSidepanels.splice(index, 1);\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { MC_SELECT_SCROLL_STRATEGY_PROVIDER, McOptionModule } from '@ptsecurity/mosaic/core';\nimport { McFormFieldModule } from '@ptsecurity/mosaic/form-field';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\nimport { McTagsModule } from '@ptsecurity/mosaic/tags';\n\nimport { McSelect, McSelectSearch, McSelectTrigger } from './select.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        McOptionModule,\n        McIconModule,\n        McTagsModule\n    ],\n    exports: [\n        McFormFieldModule,\n        McSelect,\n        McSelectSearch,\n        McSelectTrigger,\n        McOptionModule,\n        CommonModule\n    ],\n    declarations: [\n        McSelect,\n        McSelectSearch,\n        McSelectTrigger],\n    providers: [MC_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class McSelectModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    NgZone,\n    OnDestroy,\n    Output,\n    QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { BACKSPACE, DELETE, SPACE } from '@ptsecurity/cdk/keycodes';\nimport {\n    CanColor,\n    CanColorCtor,\n    CanDisable,\n    CanDisableCtor,\n    mixinColor,\n    mixinDisabled\n} from '@ptsecurity/mosaic/core';\nimport { McIcon } from '@ptsecurity/mosaic/icon';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\n\n// tslint:disable-next-line:naming-convention\nexport interface McTagEvent {\n    tag: McTag;\n}\n\n/** Event object emitted by McTag when selected or deselected. */\nexport class McTagSelectionChange {\n    constructor(public source: McTag, public selected: boolean, public isUserInput = false) {}\n}\n\n\nconst TAG_ATTRIBUTE_NAMES = ['mc-basic-tag'];\n\n/**\n * Dummy directive to add CSS class to tag avatar.\n * @docs-private\n */\n@Directive({\n    selector: 'mc-tag-avatar, [mcTagAvatar]',\n    host: { class: 'mc-tag-avatar' }\n})\nexport class McTagAvatar {}\n\n/**\n * Dummy directive to add CSS class to tag trailing icon.\n * @docs-private\n */\n@Directive({\n    selector: 'mc-tag-trailing-icon, [mcTagTrailingIcon]',\n    host: { class: 'mc-tag-trailing-icon' }\n})\nexport class McTagTrailingIcon {}\n\nexport class McTagBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const _McTagMixinBase: CanColorCtor & CanDisableCtor & typeof McTagBase = mixinColor(mixinDisabled(McTagBase));\n\n\n@Component({\n    selector: 'mc-tag, [mc-tag], mc-basic-tag, [mc-basic-tag]',\n    exportAs: 'mcTag',\n    templateUrl: 'tag.partial.html',\n    styleUrls: ['./tag.css'],\n    inputs: ['color', 'disabled'],\n    host: {\n        class: 'mc-tag',\n        '[attr.tabindex]': 'disabled ? null : -1',\n        '[class.mc-tag-selected]': 'selected',\n        '[class.mc-tag-with-avatar]': 'avatar',\n        '[class.mc-tag-with-trailing-icon]': 'trailingIcon || removeIcon',\n        '[class.mc-tag-disabled]': 'disabled',\n        '[class.mc-disabled]': 'disabled',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': 'handleClick($event)',\n        '(keydown)': 'handleKeydown($event)',\n        '(focus)': 'focus()',\n        '(blur)': 'blur()'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McTag extends _McTagMixinBase implements IFocusableOption, OnDestroy, CanColor, CanDisable {\n    /** Emits when the tag is focused. */\n    readonly onFocus = new Subject<McTagEvent>();\n\n    /** Emits when the tag is blured. */\n    readonly onBlur = new Subject<McTagEvent>();\n\n    nativeElement: HTMLElement;\n\n    /** Whether the tag has focus. */\n    hasFocus: boolean = false;\n\n    /** Whether the tag list is selectable */\n    tagListSelectable: boolean = true;\n\n    @ContentChildren(McIcon) contentChildren: QueryList<McIcon>;\n\n    /** The tag avatar */\n    @ContentChild(McTagAvatar) avatar: McTagAvatar;\n\n    /** The tag's trailing icon. */\n    @ContentChild(McTagTrailingIcon) trailingIcon: McTagTrailingIcon;\n\n    /** The tag's remove toggler. */\n    @ContentChild(forwardRef(() => McTagRemove)) removeIcon: McTagRemove;\n\n    /** Emitted when the tag is selected or deselected. */\n    @Output() readonly selectionChange: EventEmitter<McTagSelectionChange> =\n        new EventEmitter<McTagSelectionChange>();\n\n    /** Emitted when the tag is destroyed. */\n    @Output() readonly destroyed: EventEmitter<McTagEvent> = new EventEmitter<McTagEvent>();\n\n    /** Emitted when a tag is to be removed. */\n    @Output() readonly removed: EventEmitter<McTagEvent> = new EventEmitter<McTagEvent>();\n\n    /** Whether the tag is selected. */\n    @Input()\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    set selected(value: boolean) {\n        const coercedValue = coerceBooleanProperty(value);\n\n        if (coercedValue !== this._selected) {\n            this._selected = coercedValue;\n            this.dispatchSelectionChange();\n        }\n    }\n\n    private _selected: boolean = false;\n\n    /** The value of the tag. Defaults to the content inside `<mc-tag>` tags. */\n    @Input()\n    get value(): any {\n        return this._value !== undefined\n            ? this._value\n            : this.elementRef.nativeElement.textContent;\n    }\n\n    set value(value: any) {\n        this._value = value;\n    }\n\n    private _value: any;\n\n    /**\n     * Whether or not the tag is selectable. When a tag is not selectable,\n     * changes to its selected state are always ignored. By default a tag is\n     * selectable, and it becomes non-selectable if its parent tag list is\n     * not selectable.\n     */\n    @Input()\n    get selectable(): boolean {\n        return this._selectable && this.tagListSelectable;\n    }\n\n    set selectable(value: boolean) {\n        this._selectable = coerceBooleanProperty(value);\n    }\n\n    private _selectable: boolean = true;\n\n    /**\n     * Determines whether or not the tag displays the remove styling and emits (removed) events.\n     */\n    @Input()\n    get removable(): boolean {\n        return this._removable;\n    }\n\n    set removable(value: boolean) {\n        this._removable = coerceBooleanProperty(value);\n    }\n\n    private _removable: boolean = true;\n\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value !== this.disabled) {\n            this._disabled = value;\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    constructor(public elementRef: ElementRef, private _ngZone: NgZone) {\n        super(elementRef);\n\n        this.addHostClassName();\n\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        this.addClassModificatorForIcons();\n    }\n\n    addClassModificatorForIcons() {\n        const icons = this.contentChildren.map((item) => item._elementRef.nativeElement);\n\n        if (icons.length === 1) {\n            const iconElement = icons[0];\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-left-icon');\n                }\n\n                if (iconElement.previousSibling) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-right-icon');\n                }\n            }\n        } else if (icons.length > 1) {\n            const firstIconElement = icons[0];\n            const secondIconElement = icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n\n    addHostClassName() {\n        // Add class for the different tags\n        for (const attr of TAG_ATTRIBUTE_NAMES) {\n            if (\n                this.elementRef.nativeElement.hasAttribute(attr) ||\n                this.elementRef.nativeElement.tagName.toLowerCase() === attr\n            ) {\n                    (this.elementRef.nativeElement as HTMLElement).classList.add(attr);\n\n                    return;\n            }\n        }\n        (this.elementRef.nativeElement as HTMLElement).classList.add('mc-standard-tag');\n    }\n\n    ngOnDestroy() {\n        this.destroyed.emit({ tag: this });\n    }\n\n    select(): void {\n        if (!this._selected) {\n            this._selected = true;\n            this.dispatchSelectionChange();\n        }\n    }\n\n    deselect(): void {\n        if (this._selected) {\n            this._selected = false;\n            this.dispatchSelectionChange();\n        }\n    }\n\n    selectViaInteraction(): void {\n        if (!this._selected) {\n            this._selected = true;\n            this.dispatchSelectionChange(true);\n        }\n    }\n\n    toggleSelected(isUserInput: boolean = false): boolean {\n        this._selected = !this.selected;\n        this.dispatchSelectionChange(isUserInput);\n\n        return this.selected;\n    }\n\n    /** Allows for programmatic focusing of the tag. */\n    focus(): void {\n        if (!this.hasFocus) {\n            this.elementRef.nativeElement.focus();\n            this.onFocus.next({ tag: this });\n        }\n        this.hasFocus = true;\n    }\n\n    /**\n     * Allows for programmatic removal of the tag. Called by the McTagList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the tag from the DOM.\n     */\n    remove(): void {\n        if (this.removable) {\n            this.removed.emit({ tag: this });\n        }\n    }\n\n    handleClick(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n        } else {\n            event.stopPropagation();\n        }\n    }\n\n    handleKeydown(event: KeyboardEvent): void {\n        if (this.disabled) { return; }\n\n        // tslint:disable-next-line: deprecation\n        switch (event.keyCode) {\n            case DELETE:\n            case BACKSPACE:\n                // If we are removable, remove the focused tag\n                this.remove();\n                // Always prevent so page navigation does not occur\n                event.preventDefault();\n                break;\n            case SPACE:\n                // If we are selectable, toggle the focused tag\n                if (this.selectable) {\n                    this.toggleSelected(true);\n                }\n\n                // Always prevent space from scrolling the page since the list has focus\n                event.preventDefault();\n                break;\n            default:\n        }\n    }\n\n    blur(): void {\n        // When animations are enabled, Angular may end up removing the tag from the DOM a little\n        // earlier than usual, causing it to be blurred and throwing off the logic in the tag list\n        // that moves focus not the next item. To work around the issue, we defer marking the tag\n        // as not focused until the next time the zone stabilizes.\n        this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                this._ngZone.run(() => {\n                    this.hasFocus = false;\n                    this.onBlur.next({ tag: this });\n                });\n            });\n    }\n\n    private dispatchSelectionChange(isUserInput = false) {\n        this.selectionChange.emit({\n            source: this,\n            isUserInput,\n            selected: this._selected\n        });\n    }\n}\n\n\n/**\n *\n * Example:\n *\n *     `<mc-tag>\n *       <mc-icon mcTagRemove>cancel</mc-icon>\n *     </mc-tag>`\n *\n * You *may* use a custom icon, but you may need to override the `mc-tag-remove` positioning\n * styles to properly center the icon within the tag.\n */\n@Directive({\n    selector: '[mcTagRemove]',\n    host: {\n        class: 'mc-tag-remove mc-tag-trailing-icon',\n        '(click)': 'handleClick($event)'\n    }\n})\nexport class McTagRemove {\n    constructor(protected parentTag: McTag) {}\n\n    /** Calls the parent tag's public `remove()` method if applicable. */\n    handleClick(event: Event): void {\n        if (this.parentTag.removable) {\n            this.parentTag.remove();\n        }\n\n        // We need to stop event propagation because otherwise the event will bubble up to the\n        // form field and cause the `onContainerClick` method to be invoked. This method would then\n        // reset the focused tag that has been focused after tag removal. Usually the parent\n        // the parent click listener of the `McTag` would prevent propagation, but it can happen\n        // that the tag is being removed before the event bubbles up.\n        event.stopPropagation();\n    }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    Self,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { FocusKeyManager } from '@ptsecurity/cdk/a11y';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { BACKSPACE, END, HOME } from '@ptsecurity/cdk/keycodes';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { merge, Observable, Subject, Subscription } from 'rxjs';\nimport { startWith, takeUntil } from 'rxjs/operators';\n\nimport { McTagTextControl } from './tag-text-control';\nimport { McTag, McTagEvent, McTagSelectionChange } from './tag.component';\n\n\nexport class McTagListBase {\n    constructor(\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const _McTagListMixinBase: CanUpdateErrorStateCtor & typeof McTagListBase = mixinErrorState(McTagListBase);\n\n\n// Increasing integer for generating unique ids for tag-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the tag list value has changed. */\nexport class McTagListChange {\n    constructor(public source: McTagList, public value: any) {}\n}\n\n\n@Component({\n    selector: 'mc-tag-list',\n    exportAs: 'mcTagList',\n    template: '<ng-content></ng-content>',\n    host: {\n        class: 'mc-tag-list',\n        '[attr.tabindex]': 'disabled ? null : _tabIndex',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-invalid]': 'errorState',\n        '[class.mc-required]': 'required',\n        '(focus)': 'focus()',\n        '(blur)': 'blur()',\n        '(keydown)': 'keydown($event)',\n        '[id]': 'uid'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McTagList }],\n    styleUrls: ['tag-list.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McTagList extends _McTagListMixinBase implements McFormFieldControl<any>,\n    ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n\n    readonly controlType: string = 'mc-tag-list';\n\n    /** Combined stream of all of the child tags' selection change events. */\n    get tagSelectionChanges(): Observable<McTagSelectionChange> {\n        return merge(...this.tags.map((tag) => tag.selectionChange));\n    }\n\n    /** Combined stream of all of the child tags' focus change events. */\n    get tagFocusChanges(): Observable<McTagEvent> {\n        return merge(...this.tags.map((tag) => tag.onFocus));\n    }\n\n    /** Combined stream of all of the child tags' blur change events. */\n    get tagBlurChanges(): Observable<McTagEvent> {\n        return merge(...this.tags.map((tag) => tag.onBlur));\n    }\n\n    /** Combined stream of all of the child tags' remove change events. */\n    get tagRemoveChanges(): Observable<McTagEvent> {\n        return merge(...this.tags.map((tag) => tag.destroyed));\n    }\n\n    /** The array of selected tags inside tag list. */\n    get selected(): McTag[] | McTag {\n        return this.multiple ? this.selectionModel.selected : this.selectionModel.selected[0];\n    }\n\n    /** Whether the user should be allowed to select multiple tags. */\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith(): (o1: any, o2: any) => boolean {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        this._compareWith = fn;\n\n        if (this.selectionModel) {\n            // A different comparator means the selection could change.\n            this.initializeSelection();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): any {\n        return this._value;\n    }\n\n    set value(value: any) {\n        this.writeValue(value);\n        this._value = value;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get id(): string {\n        return this.tagInput ? this.tagInput.id : this.uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get placeholder(): string {\n        return this.tagInput ? this.tagInput.placeholder : this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n\n    /** Whether any tags or the mcTagInput inside of this tag-list has focus. */\n    get focused(): boolean {\n        return (this.tagInput && this.tagInput.focused) || this.hasFocusedTag();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return (!this.tagInput || this.tagInput.empty) && this.tags.length === 0;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat(): boolean {\n        return !this.empty || this.focused;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        return this.ngControl ? !!this.ngControl.disabled : this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n        this.syncTagsDisabledState();\n    }\n\n    /**\n     * Whether or not this tag list is selectable. When a tag list is not selectable,\n     * the selected states for all the tags inside the tag list are always ignored.\n     */\n    @Input()\n    get selectable(): boolean {\n        return this._selectable;\n    }\n\n    set selectable(value: boolean) {\n        this._selectable = coerceBooleanProperty(value);\n\n        if (this.tags) {\n            this.tags.forEach((tag) => tag.tagListSelectable = this._selectable);\n        }\n    }\n\n    @Input()\n    set tabIndex(value: number) {\n        this.userTabIndex = value;\n        this._tabIndex = value;\n    }\n\n    /**\n     * Event that emits whenever the raw value of the tag-list changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    uid: string = `mc-tag-list-${nextUniqueId++}`;\n\n    /**\n     * User defined tab index.\n     * When it is not null, use user defined tab index. Otherwise use tabIndex\n     */\n    userTabIndex: number | null = null;\n\n    keyManager: FocusKeyManager<McTag>;\n\n    selectionModel: SelectionModel<McTag>;\n\n    tagChanges = new EventEmitter<any>();\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /** Orientation of the tag list. */\n    @Input('orientation') orientation: 'horizontal' | 'vertical' = 'horizontal';\n\n    /** Event emitted when the selected tag list value has been changed by the user. */\n    @Output() readonly change: EventEmitter<McTagListChange> = new EventEmitter<McTagListChange>();\n\n    /** The tag components contained within this tag list. */\n    @ContentChildren(McTag) tags: QueryList<McTag>;\n\n    _tabIndex = 0;\n\n    private _value: any;\n\n    private _required: boolean = false;\n\n    private _placeholder: string;\n\n    private _disabled: boolean = false;\n\n    private _selectable: boolean = true;\n\n    /** The tag input to add more tags */\n    private tagInput: McTagTextControl;\n\n    private _multiple: boolean = false;\n\n    /**\n     * When a tag is destroyed, we store the index of the destroyed tag until the tags\n     * query list notifies about the update. This is necessary because we cannot determine an\n     * appropriate tag that should receive focus until the array of tags updated completely.\n     */\n    private lastDestroyedTagIndex: number | null = null;\n\n    /** Subject that emits when the component has been destroyed. */\n    private destroyed = new Subject<void>();\n\n    /** Subscription to focus changes in the tags. */\n    private tagFocusSubscription: Subscription | null;\n\n    /** Subscription to blur changes in the tags. */\n    private tagBlurSubscription: Subscription | null;\n\n    /** Subscription to selection changes in tags. */\n    private tagSelectionSubscription: Subscription | null;\n\n    /** Subscription to remove changes in tags. */\n    private tagRemoveSubscription: Subscription | null;\n\n    constructor(\n        protected elementRef: ElementRef<HTMLElement>,\n        private changeDetectorRef: ChangeDetectorRef,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        @Optional() private dir: Directionality,\n        @Optional() parentForm: NgForm,\n        @Optional() parentFormGroup: FormGroupDirective,\n        @Optional() @Self() public ngControl: NgControl\n    ) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            this.ngControl.valueAccessor = this;\n        }\n    }\n\n    ngAfterContentInit() {\n        this.keyManager = new FocusKeyManager<McTag>(this.tags)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this.dir ? this.dir.value : 'ltr');\n\n        if (this.dir) {\n            this.dir.change\n                .pipe(takeUntil(this.destroyed))\n                .subscribe((dir) => this.keyManager.withHorizontalOrientation(dir));\n        }\n\n        // Prevents the tag list from capturing focus and redirecting\n        // it back to the first tag when the user tabs out.\n        this.keyManager.tabOut\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(() => {\n                this._tabIndex = -1;\n\n                setTimeout(() => {\n                    this._tabIndex = this.userTabIndex || 0;\n                    this.changeDetectorRef.markForCheck();\n                });\n            });\n\n        // When the list changes, re-subscribe\n        this.tags.changes\n            .pipe(startWith(null), takeUntil(this.destroyed))\n            .subscribe(() => {\n                if (this.disabled) {\n                    // Since this happens after the content has been\n                    // checked, we need to defer it to the next tick.\n                    Promise.resolve().then(() => { this.syncTagsDisabledState(); });\n                }\n\n                this.resetTags();\n\n                // Reset tags selected/deselected status\n                this.initializeSelection();\n\n                // Check to see if we need to update our tab index\n                this.updateTabIndex();\n\n                // Check to see if we have a destroyed tag and need to refocus\n                this.updateFocusForDestroyedTags();\n\n                // Defer setting the value in order to avoid the \"Expression\n                // has changed after it was checked\" errors from Angular.\n                Promise.resolve().then(() => { this.tagChanges.emit(this.tags.toArray()); });\n\n                this.stateChanges.next();\n            });\n    }\n\n    ngOnInit() {\n        this.selectionModel = new SelectionModel<McTag>(this.multiple, undefined, false);\n        this.stateChanges.next();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroyed.next();\n        this.destroyed.complete();\n        this.stateChanges.complete();\n\n        this.dropSubscriptions();\n    }\n\n    // tslint:disable-next-line:no-empty\n    onTouched = () => {};\n\n    // tslint:disable-next-line:no-empty\n    onChange: (value: any) => void = () => {};\n\n    /** Associates an HTML input element with this tag list. */\n    registerInput(inputElement: McTagTextControl): void {\n        this.tagInput = inputElement;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any): void {\n        if (this.tags) {\n            this.setSelectionByValue(value, false);\n        }\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this.onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n        this.stateChanges.next();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick(event: MouseEvent) {\n        if (!this.originatesFromTag(event)) {\n            this.focus();\n        }\n    }\n\n    /**\n     * Focuses the first non-disabled tag in this tag list, or the associated input when there\n     * are no eligible tags.\n     */\n    focus(): void {\n        if (this.disabled) { return; }\n\n        // TODO: ARIA says this should focus the first `selected` tag if any are selected.\n        // Focus on first element if there's no tagInput inside tag-list\n        if (this.tagInput && this.tagInput.focused) {\n            // do nothing\n        } else if (this.tags.length > 0) {\n            this.keyManager.setFirstItemActive();\n            this.stateChanges.next();\n        } else {\n            this.focusInput();\n            this.stateChanges.next();\n        }\n    }\n\n    /** Attempt to focus an input if we have one. */\n    focusInput() {\n        if (this.tagInput) {\n            this.tagInput.focus();\n        }\n    }\n\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n    keydown(event: KeyboardEvent) {\n        const target = event.target as HTMLElement;\n\n        // If they are on an empty input and hit backspace, focus the last tag\n        // tslint:disable-next-line: deprecation\n        if (event.keyCode === BACKSPACE && this.isInputEmpty(target)) {\n            this.keyManager.setLastItemActive();\n            event.preventDefault();\n        } else if (target && target.classList.contains('mc-tag')) {\n            // tslint:disable-next-line: deprecation\n            if (event.keyCode === HOME) {\n                this.keyManager.setFirstItemActive();\n                event.preventDefault();\n            // tslint:disable-next-line: deprecation\n            } else if (event.keyCode === END) {\n                this.keyManager.setLastItemActive();\n                event.preventDefault();\n            } else {\n                this.keyManager.onKeydown(event);\n            }\n\n            this.stateChanges.next();\n        }\n    }\n\n    setSelectionByValue(value: any, isUserInput: boolean = true) {\n        this.clearSelection();\n        this.tags.forEach((tag) => tag.deselect());\n\n        if (Array.isArray(value)) {\n            value.forEach((currentValue) => this.selectValue(currentValue, isUserInput));\n            this.sortValues();\n        } else {\n            const correspondingTag = this.selectValue(value, isUserInput);\n\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what tag the user interacted with last.\n            if (correspondingTag && isUserInput) {\n                this.keyManager.setActiveItem(correspondingTag);\n            }\n        }\n    }\n\n    /** When blurred, mark the field as touched when focus moved outside the tag list. */\n    blur() {\n        if (!this.hasFocusedTag()) {\n            this.keyManager.setActiveItem(-1);\n        }\n\n        if (!this.disabled) {\n            if (this.tagInput) {\n                // If there's a tag input, we should check whether the focus moved to tag input.\n                // If the focus is not moved to tag input, mark the field as touched. If the focus moved\n                // to tag input, do nothing.\n                // Timeout is needed to wait for the focus() event trigger on tag input.\n                setTimeout(() => {\n                    if (!this.focused) {\n                        this.markAsTouched();\n                    }\n                });\n            } else {\n                // If there's no tag input, then mark the field as touched.\n                this.markAsTouched();\n            }\n        }\n    }\n\n    /** Mark the field as touched */\n    markAsTouched() {\n        this.onTouched();\n        this.changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     */\n    protected updateTabIndex(): void {\n        // If we have 0 tags, we should not allow keyboard focus\n        this._tabIndex = this.userTabIndex || (this.tags.length === 0 ? -1 : 0);\n    }\n\n    /**\n     * If the amount of tags changed, we need to update the\n     * key manager state and focus the next closest tag.\n     */\n    protected updateFocusForDestroyedTags() {\n        if (this.lastDestroyedTagIndex != null && this.tags.length) {\n            const newTagIndex = Math.min(this.lastDestroyedTagIndex, this.tags.length - 1);\n            this.keyManager.setActiveItem(newTagIndex);\n        } else if (this.tags.length === 0) {\n            this.focusInput();\n        }\n\n        this.lastDestroyedTagIndex = null;\n    }\n\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of tags.\n     */\n    private isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.tags.length;\n    }\n\n    private isInputEmpty(element: HTMLElement): boolean {\n        if (element && element.nodeName.toLowerCase() === 'input') {\n            const input = element as HTMLInputElement;\n\n            return !input.value;\n        }\n\n        return false;\n    }\n\n    /**\n     * Finds and selects the tag based on its value.\n     * @returns Tag that has the corresponding value.\n     */\n    private selectValue(value: any, isUserInput: boolean = true): McTag | undefined {\n\n        const correspondingTag = this.tags.find((tag) => {\n            return tag.value != null && this._compareWith(tag.value, value);\n        });\n\n        if (correspondingTag) {\n            if (isUserInput) {\n                correspondingTag.selectViaInteraction();\n            } else {\n                correspondingTag.select();\n            }\n\n            this.selectionModel.select(correspondingTag);\n        }\n\n        return correspondingTag;\n    }\n\n    private initializeSelection(): void {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl || this._value) {\n                this.setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n                this.stateChanges.next();\n            }\n        });\n    }\n\n    /**\n     * Deselects every tag in the list.\n     * @param skip Tag that should not be deselected.\n     */\n    private clearSelection(skip?: McTag): void {\n        this.selectionModel.clear();\n        this.tags.forEach((tag) => {\n            if (tag !== skip) {\n                tag.deselect();\n            }\n        });\n        this.stateChanges.next();\n    }\n\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     */\n    private sortValues(): void {\n        if (this._multiple) {\n            this.selectionModel.clear();\n\n            this.tags.forEach((tag) => {\n                if (tag.selected) {\n                    this.selectionModel.select(tag);\n                }\n            });\n            this.stateChanges.next();\n        }\n    }\n\n    /** Emits change event to set the model value. */\n    private propagateChanges(fallbackValue?: any): void {\n        let valueToEmit: any = null;\n\n        if (Array.isArray(this.selected)) {\n            valueToEmit = this.selected.map((tag) => tag.value);\n        } else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.change.emit(new McTagListChange(this, valueToEmit));\n        this.valueChange.emit(valueToEmit);\n        this.onChange(valueToEmit);\n        this.changeDetectorRef.markForCheck();\n    }\n\n    private resetTags() {\n        this.dropSubscriptions();\n        this.listenToTagsFocus();\n        this.listenToTagsSelection();\n        this.listenToTagsRemoved();\n    }\n\n    private dropSubscriptions() {\n        if (this.tagFocusSubscription) {\n            this.tagFocusSubscription.unsubscribe();\n            this.tagFocusSubscription = null;\n        }\n\n        if (this.tagBlurSubscription) {\n            this.tagBlurSubscription.unsubscribe();\n            this.tagBlurSubscription = null;\n        }\n\n        if (this.tagSelectionSubscription) {\n            this.tagSelectionSubscription.unsubscribe();\n            this.tagSelectionSubscription = null;\n        }\n\n        if (this.tagRemoveSubscription) {\n            this.tagRemoveSubscription.unsubscribe();\n            this.tagRemoveSubscription = null;\n        }\n    }\n\n    /** Listens to user-generated selection events on each tag. */\n    private listenToTagsSelection(): void {\n        this.tagSelectionSubscription = this.tagSelectionChanges.subscribe((event) => {\n            if (event.source.selected) {\n                this.selectionModel.select(event.source);\n            } else {\n                this.selectionModel.deselect(event.source);\n            }\n\n            // For single selection tag list, make sure the deselected value is unselected.\n            if (!this.multiple) {\n                this.tags.forEach((tag) => {\n                    if (!this.selectionModel.isSelected(tag) && tag.selected) {\n                        tag.deselect();\n                    }\n                });\n            }\n\n            if (event.isUserInput) {\n                this.propagateChanges();\n            }\n        });\n    }\n\n    /** Listens to user-generated selection events on each tag. */\n    private listenToTagsFocus(): void {\n        this.tagFocusSubscription = this.tagFocusChanges.subscribe((event) => {\n            const tagIndex: number = this.tags.toArray().indexOf(event.tag);\n\n            if (this.isValidIndex(tagIndex)) {\n                this.keyManager.updateActiveItem(tagIndex);\n            }\n            this.stateChanges.next();\n        });\n\n        this.tagBlurSubscription = this.tagBlurChanges.subscribe(() => {\n            this.blur();\n            this.stateChanges.next();\n        });\n    }\n\n    private listenToTagsRemoved(): void {\n        this.tagRemoveSubscription = this.tagRemoveChanges.subscribe((event) => {\n            const tag = event.tag;\n            const tagIndex = this.tags.toArray().indexOf(event.tag);\n\n            // In case the tag that will be removed is currently focused, we temporarily store\n            // the index in order to be able to determine an appropriate sibling tag that will\n            // receive focus.\n            if (this.isValidIndex(tagIndex) && tag.hasFocus) {\n                this.lastDestroyedTagIndex = tagIndex;\n            }\n        });\n    }\n\n    /** Checks whether an event comes from inside a tag element. */\n    private originatesFromTag(event: Event): boolean {\n        let currentElement = event.target as HTMLElement | null;\n\n        while (currentElement && currentElement !== this.elementRef.nativeElement) {\n            if (currentElement.classList.contains('mc-tag')) {\n                return true;\n            }\n\n            currentElement = currentElement.parentElement;\n        }\n\n        return false;\n    }\n\n    /** Checks whether any of the tags is focused. */\n    private hasFocusedTag() {\n        return this.tags.some((tag) => tag.hasFocus);\n    }\n\n    /** Syncs the list's disabled state with the individual tags. */\n    private syncTagsDisabledState() {\n        if (this.tags) {\n            this.tags.forEach((tag) => {\n                tag.disabled = this._disabled;\n            });\n        }\n    }\n}\n\n","import { Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output } from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { hasModifierKey } from '@ptsecurity/cdk/keycodes';\n\nimport { MC_TAGS_DEFAULT_OPTIONS, McTagsDefaultOptions } from './tag-default-options';\nimport { McTagList } from './tag-list.component';\nimport { McTagTextControl } from './tag-text-control';\n\n\n/** Represents an input event on a `mcTagInput`. */\n// tslint:disable-next-line: naming-convention\nexport interface McTagInputEvent {\n    /** The native `<input>` element that the event is being fired for. */\n    input: HTMLInputElement;\n\n    /** The value of the input. */\n    value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds tag-specific behaviors to an input element inside `<mc-form-field>`.\n * May be placed inside or outside of an `<mc-tag-list>`.\n */\n@Directive({\n    selector: 'input[mcTagInputFor]',\n    exportAs: 'mcTagInput, mcTagInputFor',\n    host: {\n        class: 'mc-tag-input mc-input-element',\n        '[id]': 'id',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.placeholder]': 'placeholder || null',\n        '[attr.aria-invalid]': '_tagList && _tagList.ngControl ? _tagList.ngControl.invalid : null',\n        '(keydown)': 'keydown($event)',\n        '(blur)': 'blur()',\n        '(focus)': 'onFocus()',\n        '(input)': 'onInput()'\n    }\n})\nexport class McTagInput implements McTagTextControl, OnChanges {\n    /** Whether the control is focused. */\n    focused: boolean = false;\n\n    /**\n     * The list of key codes that will trigger a tagEnd event.\n     *\n     * Defaults to `[ENTER]`.\n     */\n    @Input('mcTagInputSeparatorKeyCodes')\n    separatorKeyCodes: number[] | Set<number> = this.defaultOptions.separatorKeyCodes;\n\n    /** Emitted when a tag is to be added. */\n    @Output('mcTagInputTokenEnd')\n    tagEnd: EventEmitter<McTagInputEvent> = new EventEmitter<McTagInputEvent>();\n\n    /** The input's placeholder text. */\n    @Input() placeholder: string = '';\n\n    /** Unique id for the input. */\n    @Input() id: string = `mc-tag-list-input-${nextUniqueId++}`;\n\n    /** Register input for tag list */\n    @Input('mcTagInputFor')\n    set tagList(value: McTagList) {\n        if (value) {\n            this._tagList = value;\n            this._tagList.registerInput(this);\n        }\n    }\n\n    // tslint:disable-next-line: naming-convention\n    _tagList: McTagList;\n\n    /**\n     * Whether or not the tagEnd event will be emitted when the input is blurred.\n     */\n    @Input('mcTagInputAddOnBlur')\n    get addOnBlur(): boolean {\n        return this._addOnBlur;\n    }\n\n    set addOnBlur(value: boolean) {\n        this._addOnBlur = coerceBooleanProperty(value);\n    }\n\n    private _addOnBlur: boolean = false;\n\n    /** Whether the input is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this._tagList && this._tagList.disabled);\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    private _disabled: boolean = false;\n\n    /** Whether the input is empty. */\n    get empty(): boolean {\n        return !this.inputElement.value;\n    }\n\n    /** The native input element to which this directive is attached. */\n    private inputElement: HTMLInputElement;\n\n    constructor(\n        private elementRef: ElementRef<HTMLInputElement>,\n        @Inject(MC_TAGS_DEFAULT_OPTIONS) private defaultOptions: McTagsDefaultOptions\n    ) {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        this.inputElement = this.elementRef.nativeElement as HTMLInputElement;\n    }\n\n    ngOnChanges() {\n        this._tagList.stateChanges.next();\n    }\n\n    /** Utility method to make host definition/tests more clear. */\n    keydown(event?: KeyboardEvent) {\n        this.emittagEnd(event);\n    }\n\n    /** Checks to see if the blur should emit the (tagEnd) event. */\n    blur() {\n        if (this.addOnBlur) {\n            this.emittagEnd();\n        }\n\n        this.focused = false;\n        // Blur the tag list if it is not focused\n        if (!this._tagList.focused) {\n            this._tagList.blur();\n        }\n\n        this._tagList.stateChanges.next();\n    }\n\n    /** Checks to see if the (tagEnd) event needs to be emitted. */\n    emittagEnd(event?: KeyboardEvent) {\n        if (!this.inputElement.value && !!event) {\n            this._tagList.keydown(event);\n        }\n\n        if (!event || this.isSeparatorKey(event)) {\n            this.tagEnd.emit({ input: this.inputElement, value: this.inputElement.value });\n\n            if (event) {\n                event.preventDefault();\n            }\n        }\n    }\n\n    onInput() {\n        // Let tag list know whenever the value changes.\n        this._tagList.stateChanges.next();\n    }\n\n    onFocus() {\n        this.focused = true;\n        this._tagList.stateChanges.next();\n    }\n\n    /** Focuses the input. */\n    focus(): void {\n        this.inputElement.focus();\n    }\n\n    /** Checks whether a keycode is one of the configured separators. */\n    private isSeparatorKey(event: KeyboardEvent) {\n        if (hasModifierKey(event)) { return false; }\n\n        const separators = this.separatorKeyCodes;\n        // tslint:disable-next-line: deprecation\n        const keyCode = event.keyCode;\n\n        return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ENTER } from '@ptsecurity/cdk/keycodes';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { MC_TAGS_DEFAULT_OPTIONS, McTagsDefaultOptions } from './tag-default-options';\nimport { McTagInput } from './tag-input';\nimport { McTagList } from './tag-list.component';\nimport { McTag, McTagAvatar, McTagRemove, McTagTrailingIcon } from './tag.component';\n\n\n@NgModule({\n    imports: [CommonModule, PlatformModule],\n    exports: [\n        McTagList,\n        McTag,\n        McTagInput,\n        McTagTrailingIcon,\n        McTagAvatar,\n        McTagRemove\n    ],\n    declarations: [\n        McTagList,\n        McTag,\n        McTagInput,\n        McTagTrailingIcon,\n        McTagAvatar,\n        McTagRemove\n    ],\n    providers: [{\n        provide: MC_TAGS_DEFAULT_OPTIONS,\n        // tslint:disable-next-line: no-object-literal-type-assertion\n        useValue: { separatorKeyCodes: [ENTER] } as McTagsDefaultOptions\n    }]\n})\nexport class McTagsModule {}\n","import { Directive, TemplateRef } from '@angular/core';\n\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({ selector: '[mcTabContent]' })\nexport class McTabContent {\n    constructor(public template: TemplateRef<any>) { }\n}\n","import { Directive } from '@angular/core';\nimport { CdkPortal } from '@ptsecurity/cdk/portal';\n\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n    selector: '[mc-tab-label], [mcTabLabel]'\n})\nexport class McTabLabel extends CdkPortal {}\n\n// TODO: workaround for https://github.com/angular/material2/issues/12760\n(McTabLabel as any).ctorParameters = () => (CdkPortal as any).ctorParameters;\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ContentChild,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    SimpleChanges,\n    TemplateRef,\n    ViewChild,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { TemplatePortal } from '@ptsecurity/cdk/portal';\nimport {\n    CanDisable,\n    CanDisableCtor,\n    mixinDisabled\n} from '@ptsecurity/mosaic/core';\nimport { Subject } from 'rxjs';\n\nimport { McTabContent } from './tab-content';\nimport { McTabLabel } from './tab-label';\n\n\nexport class McTabBase {}\nexport const mcTabMixinBase: CanDisableCtor & typeof McTabBase = mixinDisabled(\n    McTabBase\n);\n\n@Component({\n    selector: 'mc-tab',\n    // Create a template for the content of the <mc-tab> so that we can grab a reference to this\n    // TemplateRef and use it in a Portal to render the tab content in the appropriate place in the\n    // tab-group.\n    template: '<ng-template><ng-content></ng-content></ng-template>',\n    inputs: ['disabled'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcTab'\n})\nexport class McTab extends mcTabMixinBase\n    implements OnInit, CanDisable, OnChanges, OnDestroy {\n    /** @docs-private */\n    get content(): TemplatePortal | null {\n        return this.contentPortal;\n    }\n    /** Content for the tab label given by `<ng-template mc-tab-label>`. */\n    @ContentChild(McTabLabel)\n    templateLabel: McTabLabel;\n\n    /**\n     * Template provided in the tab content that will be used if present, used to enable lazy-loading\n     */\n    @ContentChild(McTabContent, { read: TemplateRef })\n    explicitContent: TemplateRef<any>;\n\n    /** Template inside the McTab view that contains an `<ng-content>`. */\n    @ViewChild(TemplateRef)\n    implicitContent: TemplateRef<any>;\n\n    /** Plain text label for the tab, used when there is no template label. */\n    @Input('label')\n    textLabel: string = '';\n\n    /** Aria label for the tab. */\n    @Input('aria-label')\n    ariaLabel: string;\n\n    /**\n     * Reference to the element that the tab is labelled by.\n     * Will be cleared if `aria-label` is set at the same time.\n     */\n    @Input('aria-labelledby')\n    ariaLabelledby: string;\n\n    /** Emits whenever the internal state of the tab changes. */\n    readonly stateChanges = new Subject<void>();\n\n    /**\n     * The relatively indexed position where 0 represents the center, negative is left, and positive\n     * represents the right.\n     */\n    position: number | null = null;\n\n    /**\n     * The initial relatively index origin of the tab if it was created and selected after there\n     * was already a selected tab. Provides context of what position the tab should originate from.\n     */\n    origin: number | null = null;\n\n    /**\n     * Whether the tab is currently active.\n     */\n    isActive = false;\n\n    /** Portal that will be the hosted content of the tab */\n    private contentPortal: TemplatePortal | null = null;\n\n    constructor(private viewContainerRef: ViewContainerRef) {\n        super();\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (\n            changes.hasOwnProperty('textLabel') ||\n            changes.hasOwnProperty('disabled')\n        ) {\n            this.stateChanges.next();\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.stateChanges.complete();\n    }\n\n    ngOnInit(): void {\n        this.contentPortal = new TemplatePortal(\n            this.explicitContent || this.implicitContent,\n            this.viewContainerRef\n        );\n    }\n}\n","import {\n    animate,\n    state,\n    style,\n    transition,\n    trigger,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n\nexport const mcTabsAnimations: {\n    readonly translateTab: AnimationTriggerMetadata;\n} = {\n    /** Animation translates a tab along the X axis. */\n    translateTab: trigger('translateTab', [\n        // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n        state(\n            'center, void, left-origin-center, right-origin-center',\n            style({ transform: 'none' })\n        ),\n\n        // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n        // in order to ensure that the element has a height before its state changes. This is\n        // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n        // not have a static height and is not rendered. See related issue: #9465\n        state(\n            'left',\n            style({ transform: 'translate3d(-100%, 0, 0)', minHeight: '1px' })\n        ),\n        state(\n            'right',\n            style({ transform: 'translate3d(100%, 0, 0)', minHeight: '1px' })\n        ),\n\n        transition(\n            '* => left, * => right, left => center, right => center',\n            animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n        ),\n        transition('void => left-origin-center', [\n            style({ transform: 'translate3d(-100%, 0, 0)' }),\n            animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n        ]),\n        transition('void => right-origin-center', [\n            style({ transform: 'translate3d(100%, 0, 0)' }),\n            animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n        ])\n    ])\n};\n","import { AnimationEvent } from '@angular/animations';\nimport {\n    Component,\n    ChangeDetectorRef,\n    Input,\n    Inject,\n    Output,\n    EventEmitter,\n    OnDestroy,\n    OnInit,\n    ElementRef,\n    Directive,\n    Optional,\n    ViewEncapsulation,\n    ChangeDetectionStrategy,\n    ComponentFactoryResolver,\n    ViewContainerRef,\n    forwardRef,\n    ViewChild\n} from '@angular/core';\nimport { Directionality, Direction } from '@ptsecurity/cdk/bidi';\nimport { TemplatePortal, CdkPortalOutlet, PortalHostDirective } from '@ptsecurity/cdk/portal';\nimport { Subscription } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n\nimport { mcTabsAnimations } from './tabs-animations';\n\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type McTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type McTabBodyOriginState = 'left' | 'right';\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n    selector: 'mc-tab-body',\n    templateUrl: 'tab-body.html',\n    styleUrls: ['tab-body.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [mcTabsAnimations.translateTab],\n    host: {\n        class: 'mc-tab-body'\n    }\n})\nexport class McTabBody implements OnInit, OnDestroy {\n\n    /** The shifted index position of the tab body, where zero represents the active center tab. */\n    @Input()\n    set position(position: number) {\n        this.positionIndex = position;\n        this.computePositionAnimationState();\n    }\n\n    /** Tab body position state. Used by the animation trigger for the current state. */\n    bodyPosition: McTabBodyPositionState;\n\n    /** Event emitted when the tab begins to animate towards the center as the active tab. */\n    @Output() readonly onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n    /** Event emitted before the centering of the tab begins. */\n    @Output() readonly beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted before the centering of the tab begins. */\n    @Output() readonly afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted when the tab completes its animation towards the center. */\n    @Output() readonly onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n    /** The portal host inside of this container into which the tab body content will be loaded. */\n    @ViewChild(PortalHostDirective) portalHost: PortalHostDirective;\n\n    /** The tab body content to display. */\n    @Input('content') content: TemplatePortal;\n\n    /** Position that will be used when the tab is immediately becoming visible after creation. */\n    @Input() origin: number;\n\n    // Note that the default value will always be overwritten by `McTabBody`, but we need one\n    // anyway to prevent the animations module from throwing an error if the body is used on its own.\n    /** Duration for the tab's animation. */\n    @Input() animationDuration: string = '0ms';\n\n    /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n    private positionIndex: number;\n\n    /** Subscription to the directionality change observable. */\n    private dirChangeSubscription = Subscription.EMPTY;\n\n    constructor(private elementRef: ElementRef<HTMLElement>,\n                @Optional() private dir: Directionality,\n                changeDetectorRef: ChangeDetectorRef) {\n\n        if (this.dir && changeDetectorRef) {\n            this.dirChangeSubscription = this.dir.change.subscribe((direction: Direction) => {\n                this.computePositionAnimationState(direction);\n                changeDetectorRef.markForCheck();\n            });\n        }\n    }\n\n    /**\n     * After initialized, check if the content is centered and has an origin. If so, set the\n     * special position states that transition the tab from the left or right before centering.\n     */\n    ngOnInit() {\n        if (this.bodyPosition === 'center' && this.origin != null) {\n            this.bodyPosition = this.computePositionFromOrigin();\n        }\n    }\n\n    ngOnDestroy() {\n        this.dirChangeSubscription.unsubscribe();\n    }\n\n    onTranslateTabStarted(e: AnimationEvent): void {\n        const isCentering = this.isCenterPosition(e.toState);\n        this.beforeCentering.emit(isCentering);\n        if (isCentering) {\n            this.onCentering.emit(this.elementRef.nativeElement.clientHeight);\n        }\n    }\n\n    onTranslateTabComplete(e: AnimationEvent): void {\n        // If the transition to the center is complete, emit an event.\n        if (this.isCenterPosition(e.toState) && this.isCenterPosition(this.bodyPosition)) {\n            this.onCentered.emit();\n        }\n\n        if (this.isCenterPosition(e.fromState) && !this.isCenterPosition(this.bodyPosition)) {\n            this.afterLeavingCenter.emit();\n        }\n    }\n\n    /** The text direction of the containing app. */\n    getLayoutDirection(): Direction {\n        return this.dir && this.dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n\n    /** Whether the provided position state is considered center, regardless of origin. */\n    isCenterPosition(position: McTabBodyPositionState | string): boolean {\n        return position === 'center' ||\n            position === 'left-origin-center' ||\n            position === 'right-origin-center';\n    }\n\n    /** Computes the position state that will be used for the tab-body animation trigger. */\n    private computePositionAnimationState(dir: Direction = this.getLayoutDirection()) {\n        if (this.positionIndex < 0) {\n            this.bodyPosition = dir === 'ltr' ? 'left' : 'right';\n        } else if (this.positionIndex > 0) {\n            this.bodyPosition = dir === 'ltr' ? 'right' : 'left';\n        } else {\n            this.bodyPosition = 'center';\n        }\n    }\n\n    /**\n     * Computes the position state based on the specified origin position. This is used if the\n     * tab is becoming visible immediately after creation.\n     */\n    private computePositionFromOrigin(): McTabBodyPositionState {\n        const dir = this.getLayoutDirection();\n\n        if ((dir === 'ltr' && this.origin <= 0) || (dir === 'rtl' && this.origin > 0)) {\n            return 'left-origin-center';\n        }\n\n        return 'right-origin-center';\n    }\n}\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n    selector: '[mcTabBodyHost]'\n})\nexport class McTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n    /** Subscription to events for when the tab body begins centering. */\n    private centeringSub = Subscription.EMPTY;\n    /** Subscription to events for when the tab body finishes leaving from center position. */\n    private leavingSub = Subscription.EMPTY;\n\n    constructor(\n        componentFactoryResolver: ComponentFactoryResolver,\n        viewContainerRef: ViewContainerRef,\n        @Inject(forwardRef(() => McTabBody)) private host: McTabBody) {\n        super(componentFactoryResolver, viewContainerRef);\n    }\n\n    /** Set initial visibility or set up subscription for changing visibility. */\n    ngOnInit(): void {\n        super.ngOnInit();\n\n        this.centeringSub = this.host.beforeCentering\n            .pipe(startWith(this.host.isCenterPosition(this.host.bodyPosition)))\n            .subscribe((isCentering: boolean) => {\n                if (isCentering && !this.hasAttached()) {\n                    this.attach(this.host.content);\n                }\n            });\n\n        this.leavingSub = this.host.afterLeavingCenter.subscribe(() => {\n            this.detach();\n        });\n    }\n\n    /** Clean up centering subscription. */\n    ngOnDestroy(): void {\n        super.ngOnDestroy();\n        this.centeringSub.unsubscribe();\n        this.leavingSub.unsubscribe();\n    }\n}\n","import { Directive, ElementRef } from '@angular/core';\nimport {\n    CanDisable,\n    CanDisableCtor,\n    mixinDisabled\n} from '@ptsecurity/mosaic/core';\n\n\n// Boilerplate for applying mixins to McTabLabelWrapper.\n/** @docs-private */\nexport class McTabLabelWrapperBase {}\nexport const mcTabLabelWrapperMixinBase: CanDisableCtor &\n    typeof McTabLabelWrapperBase = mixinDisabled(McTabLabelWrapperBase);\n\n/**\n * Used in the `mc-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n    selector: '[mcTabLabelWrapper]',\n    inputs: ['disabled'],\n    host: {\n        '[class.mc-disabled]': 'disabled',\n        '[attr.aria-disabled]': '!!disabled'\n    }\n})\nexport class McTabLabelWrapper extends mcTabLabelWrapperMixinBase implements CanDisable {\n    constructor(public elementRef: ElementRef) {\n        super();\n    }\n\n    /** Sets focus on the wrapper element */\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    getOffsetLeft(): number {\n        return this.elementRef.nativeElement.offsetLeft;\n    }\n\n    getOffsetWidth(): number {\n        return this.elementRef.nativeElement.offsetWidth;\n    }\n}\n","import {\n    AfterContentChecked,\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Input,\n    NgZone,\n    OnDestroy,\n    Optional,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { FocusKeyManager } from '@ptsecurity/cdk/a11y';\nimport { Direction, Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceNumberProperty } from '@ptsecurity/cdk/coercion';\nimport { END, ENTER, HOME, SPACE } from '@ptsecurity/cdk/keycodes';\nimport { ViewportRuler } from '@ptsecurity/cdk/scrolling';\nimport { merge, of as observableOf, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { McTabLabelWrapper } from './tab-label-wrapper';\n\n\nconst VIEWPORT_THROTTLE_TIME = 150;\nconst SCROLL_DISTANCE_DELIMITER = 3;\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to McTabHeader.\n/** @docs-private */\nexport class McTabHeaderBase {}\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group.\n * When the tabs list's width exceeds the width of the header container,\n * then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n    selector: 'mc-tab-header',\n    templateUrl: 'tab-header.html',\n    styleUrls: ['tab-header.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        class: 'mc-tab-header',\n        '[class.mc-tab-header__pagination-controls_enabled]':\n            'showPaginationControls',\n        '[class.mc-tab-header_rtl]': 'getLayoutDirection() == \\'rtl\\''\n    }\n})\nexport class McTabHeader extends McTabHeaderBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy {\n    /** The index of the active tab. */\n    @Input()\n    get selectedIndex(): number {\n        return this._selectedIndex;\n    }\n    set selectedIndex(value: number) {\n        const coercedValue = coerceNumberProperty(value);\n        this.selectedIndexChanged = this._selectedIndex !== coercedValue;\n        this._selectedIndex = coercedValue;\n\n        if (this.keyManager) {\n            this.keyManager.updateActiveItem(coercedValue);\n        }\n    }\n\n    /** Tracks which element has focus; used for keyboard navigation */\n    get focusIndex(): number {\n        return this.keyManager ? this.keyManager.activeItemIndex! : 0;\n    }\n\n    /** When the focus index is set, we must manually send focus to the correct label */\n    set focusIndex(value: number) {\n        if (\n            !this.isValidIndex(value) ||\n            this.focusIndex === value ||\n            !this.keyManager\n        ) {\n            return;\n        }\n\n        this.keyManager.setActiveItem(value);\n    }\n\n    /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n    get scrollDistance(): number {\n        return this._scrollDistance;\n    }\n    set scrollDistance(v: number) {\n        this._scrollDistance = Math.max(\n            0,\n            Math.min(this.getMaxScrollDistance(), v)\n        );\n\n        // Mark that the scroll distance has changed so that after the view is checked, the CSS\n        // transformation can move the header.\n        this.scrollDistanceChanged = true;\n        this.checkScrollingControls();\n    }\n\n    @ContentChildren(McTabLabelWrapper)\n    labelWrappers: QueryList<McTabLabelWrapper>;\n    @ViewChild('tabListContainer')\n    tabListContainer: ElementRef;\n    @ViewChild('tabList')\n    tabList: ElementRef;\n\n    /** Whether the controls for pagination should be displayed */\n    showPaginationControls = false;\n\n    /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n    disableScrollAfter = true;\n\n    /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n    disableScrollBefore = true;\n\n    /** Event emitted when the option is selected. */\n    @Output()\n    readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n    /** Event emitted when a label is focused. */\n    @Output()\n    readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n    /** The distance in pixels that the tab labels should be translated to the left. */\n    private _scrollDistance = 0;\n\n    /** Whether the header should scroll to the selected index after the view has been checked. */\n    private selectedIndexChanged = false;\n\n    /** Emits when the component is destroyed. */\n    private readonly destroyed = new Subject<void>();\n\n    /**\n     * The number of tab labels that are displayed on the header. When this changes, the header\n     * should re-evaluate the scroll position.\n     */\n    private tabLabelCount: number;\n\n    /** Whether the scroll distance has changed and should be applied after the view is checked. */\n    private scrollDistanceChanged: boolean;\n\n    /** Used to manage focus between the tabs. */\n    private keyManager: FocusKeyManager<McTabLabelWrapper>;\n\n    /** Cached text content of the header. */\n    private currentTextContent: string;\n\n    private _selectedIndex: number = 0;\n\n    constructor(\n        private elementRef: ElementRef,\n        private changeDetectorRef: ChangeDetectorRef,\n        private viewportRuler: ViewportRuler,\n        @Optional() private dir: Directionality,\n        private ngZone: NgZone\n    ) {\n        super();\n    }\n\n    ngAfterContentChecked(): void {\n        // If the number of tab labels have changed, check if scrolling should be enabled\n        if (this.tabLabelCount !== this.labelWrappers.length) {\n            this.updatePagination();\n            this.tabLabelCount = this.labelWrappers.length;\n            this.changeDetectorRef.markForCheck();\n        }\n\n        // If the selected index has changed, scroll to the label and check if the scrolling controls\n        // should be disabled.\n        if (this.selectedIndexChanged) {\n            this.scrollToLabel(this._selectedIndex);\n            this.checkScrollingControls();\n            this.selectedIndexChanged = false;\n            this.changeDetectorRef.markForCheck();\n        }\n\n        // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n        // then translate the header to reflect this.\n        if (this.scrollDistanceChanged) {\n            this.updateTabScrollPosition();\n            this.scrollDistanceChanged = false;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    handleKeydown(event: KeyboardEvent) {\n        switch (event.keyCode) {\n            case HOME:\n                this.keyManager.setFirstItemActive();\n                event.preventDefault();\n                break;\n            case END:\n                this.keyManager.setLastItemActive();\n                event.preventDefault();\n                break;\n            case ENTER:\n            case SPACE:\n                this.selectFocusedIndex.emit(this.focusIndex);\n                event.preventDefault();\n                break;\n            default:\n                this.keyManager.onKeydown(event);\n        }\n    }\n\n    ngAfterContentInit() {\n        const dirChange = this.dir ? this.dir.change : observableOf(null);\n        const resize = this.viewportRuler.change(VIEWPORT_THROTTLE_TIME);\n        const realign = () => {\n            this.updatePagination();\n        };\n\n        this.keyManager = new FocusKeyManager(this.labelWrappers)\n            .withHorizontalOrientation(this.getLayoutDirection())\n            .withWrap();\n\n        this.keyManager.updateActiveItem(0);\n\n        // Defer the first call in order to allow for slower browsers to lay out the elements.\n        // This helps in cases where the user lands directly on a page with paginated tabs.\n        typeof requestAnimationFrame === undefined\n            ? realign()\n            : requestAnimationFrame(realign);\n\n        // On dir change or window resize, update the orientation of\n        // the key manager if the direction has changed.\n        merge(dirChange, resize)\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(() => {\n                realign();\n                this.keyManager.withHorizontalOrientation(\n                    this.getLayoutDirection()\n                );\n            });\n\n        // If there is a change in the focus key manager we need to emit the `indexFocused`\n        // event in order to provide a public event that notifies about focus changes. Also we realign\n        // the tabs container by scrolling the new focused tab into the visible section.\n        this.keyManager.change\n            .pipe(takeUntil(this.destroyed))\n            .subscribe((newFocusIndex) => {\n                this.indexFocused.emit(newFocusIndex);\n                this.setTabFocus(newFocusIndex);\n            });\n    }\n\n    ngOnDestroy() {\n        this.destroyed.next();\n        this.destroyed.complete();\n    }\n\n    /**\n     * Callback for when the MutationObserver detects that the content has changed.\n     */\n    onContentChanges() {\n        const textContent = this.elementRef.nativeElement.textContent;\n\n        // We need to diff the text content of the header, because the MutationObserver callback\n        // will fire even if the text content didn't change which is inefficient and is prone\n        // to infinite loops if a poorly constructed expression is passed in.\n\n        if (textContent !== this.currentTextContent) {\n            this.currentTextContent = textContent;\n\n            const zoneCallback = () => {\n                this.updatePagination();\n                this.changeDetectorRef.markForCheck();\n            };\n\n            // The content observer runs outside the `NgZone` by default, which\n            // means that we need to bring the callback back in ourselves.\n            // TODO: Remove null check for `_ngZone` once it's a required parameter.\n            this.ngZone ? this.ngZone.run(zoneCallback) : zoneCallback();\n        }\n    }\n\n    /**\n     * Updating the view whether pagination should be enabled or not\n     *\n     * WARNING: Calling this method can be very costly in terms of performance.  It should be called\n     * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n     * page.\n     */\n    updatePagination() {\n        this.checkPaginationEnabled();\n        this.checkScrollingControls();\n        this.updateTabScrollPosition();\n    }\n\n    /**\n     * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n     * providing a valid index and return true.\n     */\n    isValidIndex(index: number): boolean {\n        if (!this.labelWrappers) {\n            return true;\n        }\n\n        const tab = this.labelWrappers\n            ? this.labelWrappers.toArray()[index]\n            : null;\n\n        return !!tab && !tab.disabled;\n    }\n\n    /**\n     * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n     * scrolling is enabled.\n     */\n    setTabFocus(tabIndex: number) {\n        if (this.showPaginationControls) {\n            this.scrollToLabel(tabIndex);\n        }\n\n        if (this.labelWrappers && this.labelWrappers.length) {\n            this.labelWrappers.toArray()[tabIndex].focus();\n\n            // Do not let the browser manage scrolling to focus the element, this will be handled\n            // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n            // should be the full width minus the offset width.\n            const containerEl = this.tabListContainer.nativeElement;\n            const dir = this.getLayoutDirection();\n\n            if (dir === 'ltr') {\n                containerEl.scrollLeft = 0;\n            } else {\n                containerEl.scrollLeft =\n                    containerEl.scrollWidth - containerEl.offsetWidth;\n            }\n        }\n    }\n\n    /** The layout direction of the containing app. */\n    getLayoutDirection(): Direction {\n        return this.dir && this.dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n\n    /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n    updateTabScrollPosition() {\n        const scrollDistance = this.scrollDistance;\n        const translateX =\n            this.getLayoutDirection() === 'ltr'\n                ? -scrollDistance\n                : scrollDistance;\n\n        // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n        // seems to cause flickering and overflow in Internet Explorer.\n        // See: https://github.com/angular/material2/issues/10276\n        // We round the `transform` here, because transforms with sub-pixel precision cause some\n        // browsers to blur the content of the element.\n        this.tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n        // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n        // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n        // it doesn't get thrown off.\n        this.tabList.nativeElement.scrollLeft = 0;\n    }\n\n    /**\n     * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n     * the end of the list, respectively). The distance to scroll is computed to be a third of the\n     * length of the tab list view window.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    scrollHeader(scrollDir: ScrollDirection) {\n        const viewLength = this.tabListContainer.nativeElement.offsetWidth;\n\n        // Move the scroll distance one-third the length of the tab list's viewport.\n        this.scrollDistance +=\n            ((scrollDir === 'before' ? -1 : 1) * viewLength) / SCROLL_DISTANCE_DELIMITER;\n    }\n\n    /**\n     * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    scrollToLabel(labelIndex: number) {\n        const selectedLabel = this.labelWrappers\n            ? this.labelWrappers.toArray()[labelIndex]\n            : null;\n\n        if (!selectedLabel) {\n            return;\n        }\n\n        // The view length is the visible width of the tab labels.\n        const viewLength = this.tabListContainer.nativeElement.offsetWidth;\n\n        let labelBeforePos: number;\n        let labelAfterPos: number;\n\n        if (this.getLayoutDirection() === 'ltr') {\n            labelBeforePos = selectedLabel.getOffsetLeft();\n            labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n        } else {\n            labelAfterPos =\n                this.tabList.nativeElement.offsetWidth -\n                selectedLabel.getOffsetLeft();\n            labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n        }\n\n        const beforeVisiblePos = this.scrollDistance;\n        const afterVisiblePos = this.scrollDistance + viewLength;\n\n        if (labelBeforePos < beforeVisiblePos) {\n            // Scroll header to move label to the before direction\n            this.scrollDistance -=\n                beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n        } else if (labelAfterPos > afterVisiblePos) {\n            // Scroll header to move label to the after direction\n            this.scrollDistance +=\n                labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n        }\n    }\n\n    /**\n     * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n     * tab list is wider than the size of the header container, then the pagination controls should\n     * be shown.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    checkPaginationEnabled() {\n        const isEnabled =\n            this.tabList.nativeElement.scrollWidth >\n            this.elementRef.nativeElement.offsetWidth;\n\n        if (!isEnabled) {\n            this.scrollDistance = 0;\n        }\n\n        if (isEnabled !== this.showPaginationControls) {\n            this.changeDetectorRef.markForCheck();\n        }\n\n        this.showPaginationControls = isEnabled;\n    }\n\n    /**\n     * Evaluate whether the before and after controls should be enabled or disabled.\n     * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n     * before button. If the header is at the end of the list (scroll distance is equal to the\n     * maximum distance we can scroll), then disable the after button.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    checkScrollingControls() {\n        // Check if the pagination arrows should be activated.\n        this.disableScrollBefore = this.scrollDistance === 0;\n        this.disableScrollAfter =\n            this.scrollDistance === this.getMaxScrollDistance();\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n     * is equal to the difference in width between the tab list container and tab header container.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    getMaxScrollDistance(): number {\n        const lengthOfTabList = this.tabList.nativeElement.scrollWidth;\n        const viewLength = this.tabListContainer.nativeElement.offsetWidth;\n\n        return lengthOfTabList - viewLength || 0;\n    }\n}\n","import {\n    AfterContentChecked,\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnDestroy,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    InjectionToken,\n    Inject,\n    Optional,\n    Directive, Attribute\n} from '@angular/core';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@ptsecurity/cdk/coercion';\nimport {\n    CanColor,\n    CanColorCtor,\n    mixinColor,\n    mixinDisabled\n} from '@ptsecurity/mosaic/core';\nimport { merge, Subscription } from 'rxjs';\n\nimport { McTab } from './tab';\nimport { McTabHeader } from './tab-header';\n\n\n@Directive({\n    selector: 'mc-tab-group[mc-light-tabs], [mc-tab-nav-bar][mc-light-tabs]',\n    host: { class: 'mc-tab-group_light' }\n})\nexport class McLightTabsCssStyler { }\n\n@Directive({\n    selector: 'mc-tab-group[mc-align-tabs-center], [mc-tab-nav-bar][mc-align-tabs-center]',\n    host: { class: 'mc-tab-group_align-labels-center' }\n})\nexport class McAlignTabsCenterCssStyler { }\n\n@Directive({\n    selector: 'mc-tab-group[mc-align-tabs-end], [mc-tab-nav-bar][mc-align-tabs-end]',\n    host: { class: 'mc-tab-group_align-labels-end' }\n})\nexport class McAlignTabsEndCssStyler { }\n\n@Directive({\n    selector: 'mc-tab-group[mc-stretch-tabs], [mc-tab-nav-bar][mc-stretch-tabs]',\n    host: { class: 'mc-tab-group_stretch-labels' }\n})\nexport class McStretchTabsCssStyler { }\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class McTabChangeEvent {\n    /** Index of the currently-selected tab. */\n    index: number;\n    /** Reference to the currently-selected tab. */\n    tab: McTab;\n}\n\n/** Possible positions for the tab header. */\nexport type McTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface IMcTabsConfig {\n    /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n    animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MC_TABS_CONFIG = new InjectionToken('MC_TABS_CONFIG');\n\n// Boilerplate for applying mixins to McTabGroup.\n/** @docs-private */\nexport class McTabGroupBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) { }\n}\nexport const mcTabGroupMixinBase:\n    CanColorCtor &\n    typeof McTabGroupBase =\n    mixinColor(mixinDisabled(McTabGroupBase));\n\n/**\n * Tab-group component.  Supports basic tab pairs (label + content) and includes\n * keyboard navigation.\n */\n@Component({\n    selector: 'mc-tab-group',\n    exportAs: 'mcTabGroup',\n    templateUrl: 'tab-group.html',\n    styleUrls: ['tab-group.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['color'],\n    host: {\n        class: 'mc-tab-group',\n        '[class.mc-tab-group_dynamic-height]': 'dynamicHeight',\n        '[class.mc-tab-group_inverted-header]': 'headerPosition === \"below\"'\n    }\n})\nexport class McTabGroup extends mcTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor {\n    lightTab: boolean;\n\n    /** Whether the tab group should grow to the size of the active tab. */\n    @Input()\n    get dynamicHeight(): boolean { return this._dynamicHeight; }\n    set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n\n    /** The index of the active tab. */\n    @Input()\n    get selectedIndex(): number | null { return this._selectedIndex; }\n    set selectedIndex(value: number | null) {\n        this.indexToSelect = coerceNumberProperty(value, null);\n    }\n\n    @ContentChildren(McTab) tabs: QueryList<McTab>;\n\n    @ViewChild('tabBodyWrapper') tabBodyWrapper: ElementRef;\n\n    @ViewChild('tabHeader') tabHeader: McTabHeader;\n\n    /** Position of the tab header. */\n    @Input() headerPosition: McTabHeaderPosition = 'above';\n\n    /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n    @Input() animationDuration: string;\n\n    /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n    @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n    /** Event emitted when focus has changed within a tab group. */\n    @Output() readonly focusChange: EventEmitter<McTabChangeEvent> =\n        new EventEmitter<McTabChangeEvent>();\n\n    /** Event emitted when the body animation has completed */\n    @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Event emitted when the tab selection has changed. */\n    @Output() readonly selectedTabChange: EventEmitter<McTabChangeEvent> =\n        new EventEmitter<McTabChangeEvent>(true);\n\n    /** The tab index that should be selected after the content has been checked. */\n    private indexToSelect: number | null = 0;\n\n    /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n    private tabBodyWrapperHeight: number = 0;\n\n    /** Subscription to tabs being added/removed. */\n    private tabsSubscription = Subscription.EMPTY;\n\n    /** Subscription to changes in the tab labels. */\n    private tabLabelSubscription = Subscription.EMPTY;\n    private _dynamicHeight: boolean = false;\n    private _selectedIndex: number | null = null;\n\n    private groupId: number;\n\n    constructor(\n        elementRef: ElementRef,\n        private changeDetectorRef: ChangeDetectorRef,\n        @Attribute('mc-light-tabs') lightTabs: string,\n        @Inject(MC_TABS_CONFIG) @Optional() defaultConfig?: IMcTabsConfig\n    ) {\n        super(elementRef);\n\n        this.lightTab = coerceBooleanProperty(lightTabs);\n\n        this.groupId = nextId++;\n        this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n            defaultConfig.animationDuration : '0ms';\n    }\n\n    /**\n     * After the content is checked, this component knows what tabs have been defined\n     * and what the selected index should be. This is where we can know exactly what position\n     * each tab should be in according to the new selected index, and additionally we know how\n     * a new selected tab should transition in (from the left or right).\n     */\n    ngAfterContentChecked() {\n        // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n        // the amount of tabs changes before the actual change detection runs.\n        const indexToSelect = this.indexToSelect = this.clampTabIndex(this.indexToSelect);\n\n        // If there is a change in selected index, emit a change event. Should not trigger if\n        // the selected index has not yet been initialized.\n        if (this._selectedIndex !== indexToSelect) {\n            const isFirstRun = this._selectedIndex == null;\n\n            if (!isFirstRun) {\n                this.selectedTabChange.emit(this.createChangeEvent(indexToSelect));\n            }\n\n            // Changing these values after change detection has run\n            // since the checked content may contain references to them.\n            Promise.resolve().then(() => {\n                this.tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n                if (!isFirstRun) {\n                    this.selectedIndexChange.emit(indexToSelect);\n                }\n            });\n        }\n\n        // Setup the position for each tab and optionally setup an origin on the next selected tab.\n        this.tabs.forEach((tab: McTab, index: number) => {\n            tab.position = index - indexToSelect;\n\n            // If there is already a selected tab, then set up an origin for the next selected tab\n            // if it doesn't have one already.\n            if (this._selectedIndex != null && tab.position === 0 && !tab.origin) {\n                tab.origin = indexToSelect - this._selectedIndex;\n            }\n        });\n\n        if (this._selectedIndex !== indexToSelect) {\n            this._selectedIndex = indexToSelect;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    ngAfterContentInit() {\n        this.subscribeToTabLabels();\n\n        // Subscribe to changes in the amount of tabs, in order to be\n        // able to re-render the content as new tabs are added or removed.\n        this.tabsSubscription = this.tabs.changes.subscribe(() => {\n            const indexToSelect = this.clampTabIndex(this.indexToSelect);\n\n            // Maintain the previously-selected tab if a new tab is added or removed and there is no\n            // explicit change that selects a different tab.\n            if (indexToSelect === this._selectedIndex) {\n                const tabs = this.tabs.toArray();\n\n                for (let i = 0; i < tabs.length; i++) {\n                    if (tabs[i].isActive) {\n                        // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n                        // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n                        // adding a tab within the `selectedIndexChange` event.\n                        this.indexToSelect = this._selectedIndex = i;\n                        break;\n                    }\n                }\n            }\n\n            this.subscribeToTabLabels();\n            this.changeDetectorRef.markForCheck();\n        });\n    }\n\n    ngOnDestroy() {\n        this.tabsSubscription.unsubscribe();\n        this.tabLabelSubscription.unsubscribe();\n    }\n\n    focusChanged(index: number) {\n        this.focusChange.emit(this.createChangeEvent(index));\n    }\n\n    /** Returns a unique id for each tab label element */\n    getTabLabelId(i: number): string {\n        return `mc-tab-label-${this.groupId}-${i}`;\n    }\n\n    /** Returns a unique id for each tab content element */\n    getTabContentId(i: number): string {\n        return `mc-tab-content-${this.groupId}-${i}`;\n    }\n\n    /**\n     * Sets the height of the body wrapper to the height of the activating tab if dynamic\n     * height property is true.\n     */\n    setTabBodyWrapperHeight(tabHeight: number): void {\n        if (!this._dynamicHeight || !this.tabBodyWrapperHeight) { return; }\n\n        const wrapper: HTMLElement = this.tabBodyWrapper.nativeElement;\n\n        wrapper.style.height = `${this.tabBodyWrapperHeight}px`;\n\n        // This conditional forces the browser to paint the height so that\n        // the animation to the new height can have an origin.\n        if (this.tabBodyWrapper.nativeElement.offsetHeight) {\n            wrapper.style.height = `${tabHeight}px`;\n        }\n    }\n\n    /** Removes the height of the tab body wrapper. */\n    removeTabBodyWrapperHeight(): void {\n        this.tabBodyWrapperHeight = this.tabBodyWrapper.nativeElement.clientHeight;\n        this.tabBodyWrapper.nativeElement.style.height = '';\n        this.animationDone.emit();\n    }\n\n    /** Handle click events, setting new selected index if appropriate. */\n    handleClick(tab: McTab, tabHeader: McTabHeader, index: number) {\n        if (!tab.disabled) {\n            this.selectedIndex = tabHeader.focusIndex = index;\n        }\n    }\n\n    /** Retrieves the tabindex for the tab. */\n    getTabIndex(tab: McTab, index: number): number | null {\n        if (tab.disabled) {\n            return null;\n        }\n\n        return this.selectedIndex === index ? 0 : -1;\n    }\n\n    private createChangeEvent(index: number): McTabChangeEvent {\n        const event = new McTabChangeEvent();\n        event.index = index;\n        if (this.tabs && this.tabs.length) {\n            event.tab = this.tabs.toArray()[index];\n        }\n\n        return event;\n    }\n\n    /**\n     * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n     * on the McTab component, whereas the data binding is inside the McTabGroup. In order for the\n     * binding to be updated, we need to subscribe to changes in it and trigger change detection\n     * manually.\n     */\n    private subscribeToTabLabels() {\n        if (this.tabLabelSubscription) {\n            this.tabLabelSubscription.unsubscribe();\n        }\n\n        this.tabLabelSubscription = merge(...this.tabs.map((tab) => tab.stateChanges))\n            .subscribe(() => this.changeDetectorRef.markForCheck());\n    }\n\n    /** Clamps the given index to the bounds of 0 and the tabs length. */\n    private clampTabIndex(index: number | null): number {\n        // Note the `|| 0`, which ensures that values like NaN can't get through\n        // and which would otherwise throw the component into an infinite loop\n        // (since Mch.max(NaN, 0) === NaN).\n        return Math.min(this.tabs.length - 1, Math.max(index || 0, 0));\n    }\n}\n","import {\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    Input,\n    OnDestroy,\n    ViewEncapsulation\n} from '@angular/core';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport {\n    CanColor,\n    CanColorCtor,\n    CanDisable,\n    CanDisableCtor,\n    HasTabIndex,\n    HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex\n} from '@ptsecurity/mosaic/core';\n\n\n// Boilerplate for applying mixins to McTabNav.\n/** @docs-private */\nexport class McTabNavBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {}\n}\nexport const mcTabNavMixinBase: CanColorCtor &\n    typeof McTabNavBase = mixinColor(McTabNavBase);\n\n/**\n * Navigation component matching the styles of the tab group header.\n */\n@Component({\n    selector: '[mc-tab-nav-bar]',\n    exportAs: 'mcTabNavBar, mcTabNav',\n    inputs: ['color'],\n    templateUrl: 'tab-nav-bar.html',\n    styleUrls: ['tab-nav-bar.css'],\n    host: { class: 'mc-tab-nav-bar' },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McTabNav extends mcTabNavMixinBase\n    implements CanColor {\n        constructor(elementRef: ElementRef) {\n            super(elementRef);\n        }\n     }\n\n// Boilerplate for applying mixins to McTabLink.\nexport class McTabLinkBase {}\nexport const mcTabLinkMixinBase: HasTabIndexCtor & CanDisableCtor &\n    typeof McTabLinkBase = mixinTabIndex(mixinDisabled(McTabLinkBase));\n\n/**\n * Link inside of a `mc-tab-nav-bar`.\n */\n@Directive({\n    selector: '[mc-tab-link], [mcTabLink]',\n    exportAs: 'mcTabLink',\n    inputs: ['disabled', 'tabIndex'],\n    host: {\n        class: 'mc-tab-link',\n        '[attr.aria-current]': 'active',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.tabIndex]': 'tabIndex',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-active]': 'active'\n    }\n})\nexport class McTabLink extends mcTabLinkMixinBase\n    implements OnDestroy, CanDisable, HasTabIndex {\n    /** Whether the link is active. */\n    @Input()\n    get active(): boolean {\n        return this.isActive;\n    }\n    set active(value: boolean) {\n        if (value !== this.isActive) {\n            this.isActive = value;\n        }\n    }\n\n    /** Whether the tab link is active or not. */\n    protected isActive: boolean = false;\n\n    constructor(\n        public elementRef: ElementRef,\n        @Attribute('tabindex') tabIndex: string,\n        private focusMonitor: FocusMonitor\n    ) {\n        super();\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n        this.focusMonitor.monitor(this.elementRef.nativeElement);\n    }\n\n    ngOnDestroy() {\n        this.focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PortalModule } from '@ptsecurity/cdk/portal';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McTab } from './tab';\nimport { McTabBody, McTabBodyPortal } from './tab-body';\nimport { McTabContent } from './tab-content';\nimport {\n    McTabGroup,\n    McLightTabsCssStyler,\n    McAlignTabsCenterCssStyler,\n    McAlignTabsEndCssStyler,\n    McStretchTabsCssStyler\n} from './tab-group';\nimport { McTabHeader } from './tab-header';\nimport { McTabLabel } from './tab-label';\nimport { McTabLabelWrapper } from './tab-label-wrapper';\nimport { McTabLink, McTabNav } from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        McCommonModule,\n        PortalModule,\n        A11yModule\n    ],\n    // Don't export all components because some are only to be used internally.\n    exports: [\n        McCommonModule,\n        McTabGroup,\n        McTabLabel,\n        McTab,\n        McTabNav,\n        McTabLink,\n        McTabContent,\n        McLightTabsCssStyler,\n        McAlignTabsCenterCssStyler,\n        McAlignTabsEndCssStyler,\n        McStretchTabsCssStyler\n    ],\n    declarations: [\n        McTabGroup,\n        McTabLabel,\n        McTab,\n        McTabLabelWrapper,\n        McTabNav,\n        McTabLink,\n        McTabBody,\n        McTabBodyPortal,\n        McTabHeader,\n        McTabContent,\n        McLightTabsCssStyler,\n        McAlignTabsCenterCssStyler,\n        McAlignTabsEndCssStyler,\n        McStretchTabsCssStyler\n    ]\n})\nexport class McTabsModule {}\n","import { InjectionToken } from '@angular/core';\n\n\n/** Default options, for the chips module, that can be overridden. */\n// tslint:disable-next-line: naming-convention\nexport interface McTagsDefaultOptions {\n    /** The list of key codes that will trigger a chipEnd event. */\n    separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MC_TAGS_DEFAULT_OPTIONS = new InjectionToken<McTagsDefaultOptions>('mc-tags-default-options');\n","import { AnimationEvent } from '@angular/animations';\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    TemplateRef,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport {\n    ConnectedOverlayPositionChange,\n    ConnectionPositionPair,\n    Overlay,\n    OverlayRef,\n    ScrollDispatcher,\n    IScrollStrategy,\n    FlexibleConnectedPositionStrategy,\n    IOverlayConnectionPosition,\n    IOriginConnectionPosition,\n    HorizontalConnectionPos,\n    VerticalConnectionPos\n} from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal } from '@ptsecurity/cdk/portal';\nimport {\n    EXTENDED_OVERLAY_POSITIONS,\n    POSITION_MAP,\n    POSITION_TO_CSS_MAP\n} from '@ptsecurity/mosaic/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators';\n\nimport { mcPopoverAnimations } from './popover-animations';\n\n\nexport type PopoverVisibility = 'initial' | 'visible' | 'hidden';\n\n@Component({\n    selector: 'mc-popover',\n    templateUrl: './popover.component.html',\n    preserveWhitespaces: false,\n    styleUrls: ['./popover.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [mcPopoverAnimations.popoverState],\n    host: {\n        '[class]': 'getCssClassesList',\n        '(body:click)': 'handleBodyInteraction($event)'\n    }\n})\nexport class McPopoverComponent {\n    positions: ConnectionPositionPair[] = [ ...EXTENDED_OVERLAY_POSITIONS ];\n    availablePositions: any;\n    popoverVisibility: PopoverVisibility = 'initial';\n    closeOnInteraction: boolean = false;\n    mcContent: string | TemplateRef<any>;\n    mcHeader: string | TemplateRef<any>;\n    mcFooter: string | TemplateRef<any>;\n\n    @Output('mcPopoverVisibleChange') mcVisibleChange: EventEmitter<boolean> = new EventEmitter();\n\n    get mcTrigger(): string {\n        return this._mcTrigger;\n    }\n    set mcTrigger(value: string) {\n        this._mcTrigger = value;\n    }\n    private _mcTrigger: string = 'hover';\n\n    get mcPlacement(): string {\n        return this._mcPlacement;\n    }\n    set mcPlacement(value: string) {\n        if (value !== this._mcPlacement) {\n            this._mcPlacement = value;\n            this.positions.unshift(POSITION_MAP[ this.mcPlacement ]);\n        } else if (!value) {\n            this._mcPlacement = 'top';\n        }\n    }\n    private _mcPlacement: string = 'top';\n\n    get mcPopoverSize(): string {\n        return this.popoverSize;\n    }\n    set mcPopoverSize(value: string) {\n        if (value !== this.popoverSize) {\n            this.popoverSize = value;\n        } else if (!value) {\n            this.popoverSize = 'normal';\n        }\n    }\n    private popoverSize: string;\n\n    get mcVisible(): boolean {\n        return this._mcVisible.value;\n    }\n    set mcVisible(value: boolean) {\n        const visible = coerceBooleanProperty(value);\n\n        if (this._mcVisible.value !== visible) {\n            this._mcVisible.next(visible);\n            this.mcVisibleChange.emit(visible);\n        }\n    }\n    private _mcVisible: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n    get classList() {\n        return this._classList.join(' ');\n    }\n    set classList(value: string | string[]) {\n        let list: string[] = [];\n\n        if (Array.isArray(value)) {\n            list = value;\n        } else {\n            list.push(value);\n        }\n\n        this._classList = list;\n    }\n    private _classList: string[] = [];\n\n    get getCssClassesList(): string {\n        return `${this.classList} mc-popover-${this.mcPopoverSize} mc-popover_placement-${this.getPlacementClass}`;\n    }\n\n    get getPlacementClass(): string {\n        return POSITION_TO_CSS_MAP[this.mcPlacement];\n    }\n\n    /** Subject for notifying that the popover has been hidden from the view */\n    private readonly onHideSubject: Subject<any> = new Subject();\n\n    constructor(public changeDetectorRef: ChangeDetectorRef, public componentElementRef: ElementRef) {\n        this.availablePositions = POSITION_MAP;\n    }\n\n    show(): void {\n        if (this.isNonEmptyContent()) {\n            this.closeOnInteraction = true;\n            this.popoverVisibility = 'visible';\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this.markForCheck();\n        }\n    }\n\n    hide(): void {\n        this.popoverVisibility = 'hidden';\n        this.mcVisibleChange.emit(false);\n\n        // Mark for check so if any parent component has set the\n        // ChangeDetectionStrategy to OnPush it will be checked anyways\n        this.markForCheck();\n    }\n\n    isNonEmptyContent(): boolean {\n        return !!this.mcContent && (this.isTemplateRef(this.mcContent) || this.isNonEmptyString(this.mcContent));\n    }\n\n    /** Returns an observable that notifies when the popover has been hidden from view. */\n    afterHidden(): Observable<void> {\n        return this.onHideSubject.asObservable();\n    }\n\n    isVisible(): boolean {\n        return this.popoverVisibility === 'visible';\n    }\n\n    markForCheck(): void {\n        this.changeDetectorRef.markForCheck();\n    }\n\n    isTemplateRef(value: any): boolean {\n        return value instanceof TemplateRef;\n    }\n\n    isNonEmptyString(value: any): boolean {\n        return typeof value === 'string' && value !== '';\n    }\n\n    handleBodyInteraction(e): void {\n        if (this.closeOnInteraction && !this.componentElementRef.nativeElement.contains(e.target)) {\n            this.hide();\n        }\n    }\n\n    animationStart() {\n            this.closeOnInteraction = false;\n    }\n\n    animationDone(event: AnimationEvent): void {\n        const toState = event.toState as PopoverVisibility;\n\n        if (toState === 'hidden' && !this.isVisible()) {\n            this.onHideSubject.next();\n        }\n\n        if (toState === 'visible' || toState === 'hidden') {\n            this.closeOnInteraction = true;\n        }\n    }\n\n    ngOnDestroy() {\n        this.onHideSubject.complete();\n    }\n}\n\nexport const MC_POPOVER_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-popover-scroll-strategy');\n\n/** @docs-private */\nexport function mcPopoverScrollStrategyFactory(overlay: Overlay): () => IScrollStrategy {\n    return () => overlay.scrollStrategies.reposition({scrollThrottle: 20});\n}\n\n/** @docs-private */\nexport const MC_POPOVER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_POPOVER_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: mcPopoverScrollStrategyFactory\n};\n\n/** Creates an error to be thrown if the user supplied an invalid popover position. */\nexport function getMcPopoverInvalidPositionError(position: string) {\n    return Error(`McPopover position \"${position}\" is invalid.`);\n}\n\nconst VIEWPORT_MARGIN: number = 8;\n/** @docs-private\n * Minimal width of anchor element should be equal or greater than popover arrow width plus arrow offset right/left\n * MIN_ANCHOR_ELEMENT_WIDTH used for positioning update inside handlePositionUpdate()\n */\nconst MIN_ANCHOR_ELEMENT_WIDTH: number = 40;\n\n@Directive({\n    selector: '[mcPopover]',\n    exportAs: 'mcPopover',\n    host: {\n        '(keydown)': 'handleKeydown($event)',\n        '(touchend)': 'handleTouchend()',\n        '[class.mc-popover_open]': 'isOpen'\n    }\n})\nexport class McPopover implements OnInit, OnDestroy {\n    isPopoverOpen: boolean = false;\n    isDynamicPopover = false;\n    overlayRef: OverlayRef | null;\n    portal: ComponentPortal<McPopoverComponent>;\n    availablePositions: any;\n    popover: McPopoverComponent | null;\n\n    @Output('mcPopoverVisibleChange') mcVisibleChange = new EventEmitter<boolean>();\n\n    @Input('mcPopoverHeader')\n    get mcHeader(): string | TemplateRef<any> {\n        return this._mcHeader;\n    }\n    set mcHeader(value: string | TemplateRef<any>) {\n        this._mcHeader = value;\n        this.updateCompValue('mcHeader', value);\n\n        if (this.isPopoverOpen) {\n            this.updatePosition(true);\n        }\n    }\n    private _mcHeader: string | TemplateRef<any>;\n\n    @Input('mcPopoverContent')\n    get mcContent(): string | TemplateRef<any> {\n        return this._mcContent;\n    }\n    set mcContent(value: string | TemplateRef<any>) {\n        this._mcContent = value;\n        this.updateCompValue('mcContent', value);\n\n        if (this.isPopoverOpen) {\n            this.updatePosition(true);\n        }\n    }\n    private _mcContent: string | TemplateRef<any>;\n\n    @Input('mcPopoverFooter')\n    get mcFooter(): string | TemplateRef<any> {\n        return this._mcFooter;\n    }\n    set mcFooter(value: string | TemplateRef<any>) {\n        this._mcFooter = value;\n        this.updateCompValue('mcFooter', value);\n\n        if (this.isPopoverOpen) {\n            this.updatePosition(true);\n        }\n    }\n    private _mcFooter: string | TemplateRef<any>;\n\n    private $unsubscribe = new Subject<void>();\n\n    @Input('mcPopoverDisabled')\n    get disabled(): boolean {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    private _disabled: boolean = false;\n\n    @Input('mcPopoverMouseEnterDelay')\n    get mcMouseEnterDelay(): number {\n        return this._mcMouseEnterDelay;\n    }\n    set mcMouseEnterDelay(value: number) {\n        this._mcMouseEnterDelay = value;\n        this.updateCompValue('mcMouseEnterDelay', value);\n    }\n    private _mcMouseEnterDelay: number;\n\n    @Input('mcPopoverMouseLeaveDelay')\n    get mcMouseLeaveDelay(): number {\n        return this._mcMouseLeaveDelay;\n    }\n    set mcMouseLeaveDelay(value: number) {\n        this._mcMouseLeaveDelay = value;\n        this.updateCompValue('mcMouseLeaveDelay', value);\n    }\n    private _mcMouseLeaveDelay: number;\n\n    @Input('mcPopoverTrigger')\n    get mcTrigger(): string {\n        return this._mcTrigger;\n    }\n    set mcTrigger(value: string) {\n        if (value) {\n            this._mcTrigger = value;\n            this.updateCompValue('mcTrigger', value);\n        } else {\n            this._mcTrigger = 'hover';\n        }\n    }\n    private _mcTrigger: string = 'hover';\n\n    @Input('mcPopoverSize')\n    get mcPopoverSize(): string {\n        return this.popoverSize;\n    }\n    set mcPopoverSize(value: string) {\n        if (value && (value === 'small' || value === 'normal' || value === 'large')) {\n            this.popoverSize = value;\n            this.updateCompValue('mcPopoverSize', value);\n        } else {\n            this.popoverSize = 'normal';\n        }\n    }\n    private popoverSize: string = 'normal';\n\n    @Input('mcPopoverPlacement')\n    get mcPlacement(): string {\n        return this._mcPlacement;\n    }\n    set mcPlacement(value: string) {\n        if (value) {\n            this._mcPlacement = value;\n            this.updateCompValue('mcPlacement', value);\n        } else {\n            this._mcPlacement = 'top';\n        }\n    }\n    private _mcPlacement: string = 'top';\n\n    @Input('mcPopoverClass')\n    get classList() {\n        return this._classList;\n    }\n    set classList(value: string | string[]) {\n        this._classList = value;\n        this.updateCompValue('classList', this._classList);\n    }\n    private _classList: string | string[];\n\n    @Input('mcPopoverVisible')\n    get mcVisible(): boolean {\n        return this._mcVisible;\n    }\n    set mcVisible(externalValue: boolean) {\n        const value = coerceBooleanProperty(externalValue);\n        this._mcVisible = value;\n        this.updateCompValue('mcVisible', value);\n\n        if (value) {\n            this.show();\n        } else {\n            this.hide();\n        }\n    }\n    private _mcVisible: boolean;\n\n    get isOpen(): boolean {\n        return this.isPopoverOpen;\n    }\n\n    private manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n    private readonly destroyed = new Subject<void>();\n\n    constructor(\n        private overlay: Overlay,\n        private elementRef: ElementRef,\n        private ngZone: NgZone,\n        private scrollDispatcher: ScrollDispatcher,\n        private hostView: ViewContainerRef,\n        @Inject(MC_POPOVER_SCROLL_STRATEGY) private scrollStrategy,\n        @Optional() private direction: Directionality) {\n            this.availablePositions = POSITION_MAP;\n        }\n\n    /** Create the overlay config and position strategy */\n    createOverlay(): OverlayRef {\n        if (this.overlayRef) {\n            return this.overlayRef;\n        }\n\n        // Create connected position strategy that listens for scroll events to reposition.\n        const strategy = this.overlay.position()\n            .flexibleConnectedTo(this.elementRef)\n            .withTransformOriginOn('.mc-popover')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(VIEWPORT_MARGIN)\n            .withPositions([ ...EXTENDED_OVERLAY_POSITIONS ]);\n\n        const scrollableAncestors = this.scrollDispatcher\n            .getAncestorScrollContainers(this.elementRef);\n\n        strategy.withScrollableContainers(scrollableAncestors);\n\n        strategy.positionChanges.pipe(takeUntil(this.destroyed)).subscribe((change) => {\n            if (this.popover) {\n                this.onPositionChange(change);\n                if (change.scrollableViewProperties.isOverlayClipped && this.popover.mcVisible) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the popover.\n                    this.ngZone.run(() => this.hide());\n                }\n            }\n        });\n\n        this.overlayRef = this.overlay.create({\n            direction: this.direction,\n            positionStrategy: strategy,\n            panelClass: 'mc-popover__panel',\n            scrollStrategy: this.scrollStrategy()\n        });\n\n        this.updatePosition();\n\n        this.overlayRef.detachments()\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(() => this.detach());\n\n        return this.overlayRef;\n    }\n\n    detach() {\n        if (this.overlayRef && this.overlayRef.hasAttached() && this.popover) {\n            this.overlayRef.detach();\n            this.popover = null;\n        }\n    }\n\n    onPositionChange($event: ConnectedOverlayPositionChange): void {\n        let updatedPlacement = this.mcPlacement;\n        Object.keys(this.availablePositions).some((key) => {\n            if ($event.connectionPair.originX === this.availablePositions[key].originX &&\n                $event.connectionPair.originY === this.availablePositions[key].originY &&\n                $event.connectionPair.overlayX === this.availablePositions[key].overlayX &&\n                $event.connectionPair.overlayY === this.availablePositions[key].overlayY) {\n                updatedPlacement = key;\n\n                return true;\n            }\n\n            return false;\n        });\n        this.updateCompValue('mcPlacement', updatedPlacement);\n\n        if (this.popover) {\n            this.updateCompValue('classList', this.classList);\n            this.popover.markForCheck();\n        }\n\n        this.handlePositionUpdate();\n    }\n\n    handlePositionUpdate() {\n        if (!this.overlayRef) {\n            this.overlayRef = this.createOverlay();\n        }\n\n        const verticalOffset = this.hostView.element.nativeElement.clientHeight / 2; // tslint:disable-line\n        const anchorElementWidth = this.hostView.element.nativeElement.clientWidth; // tslint:disable-line\n\n        if (this.mcPlacement === 'rightTop' || this.mcPlacement === 'leftTop') {\n            const currentContainer = this.overlayRef.overlayElement.style.top || '0px';\n            this.overlayRef.overlayElement.style.top =\n                `${parseInt(currentContainer.split('px')[0], 10) + verticalOffset - 20}px`; // tslint:disable-line\n        }\n\n        if (this.mcPlacement === 'rightBottom' || this.mcPlacement === 'leftBottom') {\n            const currentContainer = this.overlayRef.overlayElement.style.bottom || '0px';\n            this.overlayRef.overlayElement.style.bottom =\n                `${parseInt(currentContainer.split('px')[0], 10) + verticalOffset - 22}px`; // tslint:disable-line\n        }\n\n        if ((this.mcPlacement === 'topRight' || this.mcPlacement === 'bottomRight') &&\n            anchorElementWidth < MIN_ANCHOR_ELEMENT_WIDTH) {\n            const currentContainer = this.overlayRef.overlayElement.style.right || '0px';\n            this.overlayRef.overlayElement.style.right =\n                `${parseInt(currentContainer.split('px')[0], 10) - 18}px`; // tslint:disable-line\n        }\n\n        if ((this.mcPlacement === 'topLeft' || this.mcPlacement === 'bottomLeft') &&\n            anchorElementWidth < MIN_ANCHOR_ELEMENT_WIDTH) {\n            const currentContainer = this.overlayRef.overlayElement.style.left || '0px';\n            this.overlayRef.overlayElement.style.left =\n                `${parseInt(currentContainer.split('px')[0], 10) - 20}px`; // tslint:disable-line\n        }\n    }\n\n    // tslint:disable-next-line:no-any\n    updateCompValue(key: string, value: any): void {\n        if (this.isDynamicPopover && value) {\n            if (this.popover) {\n                this.popover[key] = value;\n            }\n        }\n    }\n\n    ngOnInit(): void {\n        this.initElementRefListeners();\n    }\n\n    ngOnDestroy(): void {\n        if (this.overlayRef) {\n            this.overlayRef.dispose();\n        }\n        this.manualListeners.forEach((listener, event) =>\n            this.elementRef.nativeElement.removeEventListener(event, listener));\n        this.manualListeners.clear();\n\n        this.$unsubscribe.next();\n        this.$unsubscribe.complete();\n    }\n\n    handleKeydown(e: KeyboardEvent) {\n        if (this.isOpen && e.keyCode === ESCAPE) { // tslint:disable-line\n            this.hide();\n        }\n    }\n\n    handleTouchend() {\n        this.hide();\n    }\n\n    initElementRefListeners() {\n        if (this.mcTrigger === 'hover') {\n\n            this.manualListeners\n                .set('mouseenter', () => this.show())\n                .set('mouseleave', () => this.hide())\n                .forEach((listener, event) => this.elementRef.nativeElement.addEventListener(event, listener));\n        }\n\n        if (this.mcTrigger === 'focus') {\n\n            this.manualListeners\n                .set('focus', () => this.show())\n                .set('blur', () => this.hide())\n                .forEach((listener, event) => this.elementRef.nativeElement.addEventListener(event, listener));\n        }\n    }\n\n    show(): void {\n        if (!this.disabled) {\n            if (!this.popover) {\n                const overlayRef = this.createOverlay();\n                this.detach();\n\n                this.portal = this.portal || new ComponentPortal(McPopoverComponent, this.hostView);\n\n                this.popover = overlayRef.attach(this.portal).instance;\n                this.isDynamicPopover = true;\n                const properties = [\n                    'mcPlacement',\n                    'mcPopoverSize',\n                    'mcTrigger',\n                    'mcMouseEnterDelay',\n                    'mcMouseLeaveDelay',\n                    'classList',\n                    'mcVisible',\n                    'mcHeader',\n                    'mcContent',\n                    'mcFooter'\n                ];\n\n                properties.forEach((property) => this.updateCompValue(property, this[ property ]));\n                this.popover.mcVisibleChange.pipe(takeUntil(this.$unsubscribe), distinctUntilChanged())\n                    .subscribe((data) => {\n                        this.mcVisible = data;\n                        this.mcVisibleChange.emit(data);\n                        this.isPopoverOpen = data;\n                    });\n                this.popover.afterHidden()\n                    .pipe(takeUntil(this.destroyed))\n                    .subscribe(() => this.detach());\n            }\n            this.updatePosition();\n            this.popover.show();\n        }\n    }\n\n    hide(): void {\n        if (this.popover) {\n            this.popover.hide();\n        }\n    }\n\n    /** Updates the position of the current popover. */\n    updatePosition(reapplyPosition: boolean = false) {\n        if (!this.overlayRef) {\n            this.overlayRef = this.createOverlay();\n        }\n        const position =\n            this.overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n        const origin = this.getOrigin();\n        const overlay = this.getOverlayPosition();\n\n        position.withPositions([\n            {...origin.main, ...overlay.main},\n            {...origin.fallback, ...overlay.fallback}\n        ]);\n\n        //\n        // FIXME: Необходимо в некоторых моментах форсировать позиционировать только после рендеринга всего контента\n        //\n        if (reapplyPosition) {\n            setTimeout(() => {\n                position.reapplyLastPosition();\n            });\n        }\n    }\n\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    getOrigin(): {main: IOriginConnectionPosition; fallback: IOriginConnectionPosition} {\n        let originPosition: IOriginConnectionPosition;\n        const originXPosition = this.getOriginXaxis();\n        const originYPosition = this.getOriginYaxis();\n        originPosition = {originX: originXPosition, originY: originYPosition};\n\n        const {x, y} = this.invertPosition(originPosition.originX, originPosition.originY);\n\n        return {\n            main: originPosition,\n            fallback: {originX: x, originY: y}\n        };\n    }\n\n    getOriginXaxis(): HorizontalConnectionPos {\n        const position = this.mcPlacement;\n        let origX: HorizontalConnectionPos;\n        const isLtr = !this.direction || this.direction.value === 'ltr';\n        if (position === 'top' || position === 'bottom') {\n            origX = 'center';\n        } else if (position.toLowerCase().includes('right') && !isLtr ||\n            position.toLowerCase().includes('left') && isLtr) {\n            origX = 'start';\n        } else if (position.toLowerCase().includes('right') && isLtr ||\n            position.toLowerCase().includes('left') && !isLtr) {\n            origX = 'end';\n        } else {\n            throw getMcPopoverInvalidPositionError(position);\n        }\n\n        return origX;\n    }\n\n    getOriginYaxis(): VerticalConnectionPos {\n        const position = this.mcPlacement;\n        let origY: VerticalConnectionPos;\n        if (position === 'right' || position === 'left') {\n            origY = 'center';\n        } else if (position.toLowerCase().includes('top')) {\n            origY = 'top';\n        } else if (position.toLowerCase().includes('bottom')) {\n            origY = 'bottom';\n        } else {\n            throw getMcPopoverInvalidPositionError(position);\n        }\n\n        return origY;\n    }\n\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    getOverlayPosition(): {main: IOverlayConnectionPosition; fallback: IOverlayConnectionPosition} {\n        const position = this.mcPlacement;\n        let overlayPosition: IOverlayConnectionPosition;\n        if (this.availablePositions[position]) {\n            overlayPosition = {\n                overlayX : this.availablePositions[position].overlayX,\n                overlayY: this.availablePositions[position].overlayY\n            };\n        } else {\n            throw getMcPopoverInvalidPositionError(position);\n        }\n\n        const {x, y} = this.invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n        return {\n            main: overlayPosition,\n            fallback: {overlayX: x, overlayY: y}\n        };\n    }\n\n    /** Inverts an overlay position. */\n    private invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n        let newX: HorizontalConnectionPos = x;\n        let newY: VerticalConnectionPos = y;\n        if (this.mcPlacement === 'top' || this.mcPlacement === 'bottom') {\n            if (y === 'top') {\n                newY = 'bottom';\n            } else if (y === 'bottom') {\n                newY = 'top';\n            }\n        } else {\n            if (x === 'end') {\n                newX = 'start';\n            } else if (x === 'start') {\n                newX = 'end';\n            }\n        }\n\n        return {x: newX, y: newY};\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\n\nimport {\n    McPopoverComponent,\n    McPopover,\n    MC_POPOVER_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './popover.component';\n\n\n@NgModule({\n    declarations: [McPopoverComponent, McPopover],\n    exports: [McPopoverComponent, McPopover],\n    imports: [CommonModule, OverlayModule],\n    providers: [MC_POPOVER_SCROLL_STRATEGY_FACTORY_PROVIDER],\n    entryComponents: [McPopoverComponent]\n})\nexport class McPopoverModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, CanColorCtor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressBarMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressBarBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressBarMixinBase:\n    CanColorCtor &\n    typeof McProgressBarBase =\n        mixinColor(McProgressBarBase);\n\n@Component({\n    selector: 'mc-progress-bar',\n    templateUrl: './progress-bar.component.html',\n    styleUrls: ['./progress-bar.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-bar',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressBar extends _McProgressBarMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-bar-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressBarMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McProgressBar\n} from './progress-bar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressBar\n    ],\n    declarations: [\n        McProgressBar\n    ]\n})\nexport class McProgressBarModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, CanColorCtor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressSpinnerBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressSpinnerMixinBase:\n    CanColorCtor &\n    typeof McProgressSpinnerBase =\n        mixinColor(McProgressSpinnerBase);\n\nconst MAX_DASH_ARRAY = 273;\n\n@Component({\n    selector: 'mc-progress-spinner',\n    templateUrl: './progress-spinner.component.html',\n    styleUrls: ['./progress-spinner.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-spinner',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressSpinner extends _McProgressSpinnerMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-spinner-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressSpinnerMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n\n    get dashOffsetPercent(): string {\n        return `${MAX_DASH_ARRAY - this.percentage * MAX_DASH_ARRAY}%`;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McProgressSpinner } from './progress-spinner.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressSpinner\n    ],\n    declarations: [\n        McProgressSpinner\n    ]\n})\nexport class McProgressSpinnerModule {}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef,\n    Input, OnDestroy, OnInit, Optional, Output, QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { UniqueSelectionDispatcher } from '@ptsecurity/cdk/collections';\n\nimport {\n    CanColor, CanColorCtor,\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/** Change event object emitted by McRadio. */\nexport class McRadioChange {\n    constructor(\n        /** The McRadioButton that emits the change event. */\n        public source: McRadioButton,\n        /** The value of the McRadioButton. */\n        public value: any) {}\n}\n\n// Boilerplate for applying mixins to McRadioGroup.\n/** @docs-private */\nexport class McRadioGroupBase {}\nexport const _McRadioGroupMixinBase: CanDisableCtor & typeof McRadioGroupBase = mixinDisabled(McRadioGroupBase);\n\n/**\n * Provider Expression that allows mc-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McRadioGroup),\n    multi: true\n};\n\n@Directive({\n    selector: 'mc-radio-group',\n    exportAs: 'mcRadioGroup',\n    providers: [MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n    host: {\n        role: 'radiogroup',\n        class: 'mc-radio-group'\n    },\n    inputs: ['disabled']\n})\nexport class McRadioGroup extends _McRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    @Input()\n    get name(): string { return this._name; }\n    set name(value: string) {\n        this._name = value;\n        this.updateRadioButtonNames();\n    }\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this.markRadiosForCheck();\n    }\n\n    /** Value of the radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n\n            this.updateSelectedRadioFromValue();\n            this.checkSelectedRadioButton();\n        }\n    }\n\n    /** Whether the radio button is selected. */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: McRadioButton | null) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this.checkSelectedRadioButton();\n    }\n\n    /** Whether the radio group is disabled */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /** Whether the radio group is required */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** Child radio buttons. */\n    @ContentChildren(forwardRef(() => McRadioButton), { descendants: true })\n    _radios: QueryList<McRadioButton>;\n\n    /**\n     * Selected value for group. Should equal the value of the selected radio button if there *is*\n     * a corresponding radio button with a matching value. If there is *not* such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    private _value: any = null;\n\n    /** The HTML name attribute applied to radio buttons in this group. */\n    private _name: string = `mc-radio-group-${nextUniqueId++}`;\n\n    /** The currently selected radio button. Should match value. */\n    private _selected: McRadioButton | null = null;\n\n    /** Whether the `value` has been set to its initial value. */\n    private _isInitialized: boolean = false;\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    private _labelPosition: 'before' | 'after' = 'after';\n\n    /** Whether the radio group is disabled. */\n    private _disabled: boolean = false;\n\n    /** Whether the radio group is required. */\n    private _required: boolean = false;\n\n    constructor(\n        private readonly _changeDetector: ChangeDetectorRef\n    ) {\n        super();\n    }\n\n    /** The method to be called in order to update ngModel */\n    // tslint:disable-next-line\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @docs-private\n     */\n    // tslint:disable-next-line\n    onTouched: () => any = () => {};\n\n    checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on McRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the McRadioGroup.\n        this._isInitialized = true;\n    }\n\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        if (this._isInitialized) {\n            this.change.emit(new McRadioChange(this._selected!, this._value));\n        }\n    }\n\n    markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach((radio) => radio.markForCheck());\n        }\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n\n    private updateRadioButtonNames(): void {\n        if (this._radios) {\n            this._radios.forEach((radio) => {\n                radio.name = this.name;\n            });\n        }\n    }\n\n    /** Updates the `selected` radio button from the internal _value state. */\n    private updateSelectedRadioFromValue(): void {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n        if (this._radios != null && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach((radio) => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n}\n\n\n// Boilerplate for applying mixins to McRadioButton.\n/** @docs-private */\nexport class McRadioButtonBase {\n    // Since the disabled property is manually defined for the McRadioButton and isn't set up in\n    // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n    // defined to properly work.\n    disabled: boolean;\n\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McRadioButtonMixinBase:\n    CanColorCtor &\n    HasTabIndexCtor &\n    typeof McRadioButtonBase =\n        mixinColor(mixinTabIndex(McRadioButtonBase));\n\n\n@Component({\n    selector: 'mc-radio-button',\n    templateUrl: 'radio.component.html',\n    styleUrls: ['radio.css'],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    exportAs: 'mcRadioButton',\n    host: {\n        class: 'mc-radio-button',\n        '[attr.id]': 'id',\n        '[class.mc-checked]': 'checked',\n        '[class.mc-disabled]': 'disabled',\n        '(focus)': '_inputElement.nativeElement.focus()'\n    }\n})\nexport class McRadioButton extends _McRadioButtonMixinBase\n    implements OnInit, OnDestroy, CanColor, HasTabIndex {\n\n    private readonly _uniqueId: string = `mc-radio-${++nextUniqueId}`;\n\n    /* tslint:disable:member-ordering */\n\n    /** The unique ID for the radio button. */\n    @Input() id: string = this._uniqueId;\n\n    /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n    @Input() name: string;\n\n    /** Used to set the 'aria-label' attribute on the underlying input element. */\n    @Input('aria-label') ariaLabel: string;\n\n    /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n    @Input('aria-labelledby') ariaLabelledby: string;\n\n    /** The 'aria-describedby' attribute is read after the element's label and field type. */\n    @Input('aria-describedby') ariaDescribedby: string;\n\n    /** Whether this radio button is checked. */\n    @Input()\n    get checked(): boolean { return this._checked; }\n    set checked(value: boolean) {\n        const newCheckedState = toBoolean(value);\n\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** The value of this radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(value: any) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup != null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n\n    /** Whether the radio button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n    }\n    set disabled(value: boolean) {\n        const newDisabledState = toBoolean(value);\n\n        if (this._disabled !== newDisabledState) {\n\n            this._disabled = newDisabledState;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** Whether the radio button is required. */\n    @Input()\n    get required(): boolean {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    private _labelPosition: 'before' | 'after';\n\n    /** The native `<input type=radio>` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** The parent radio group. May or may not be present. */\n    radioGroup: McRadioGroup;\n\n    @Input()\n    isFocused: boolean = false;\n\n    /** ID of the native input element inside `<mc-radio-button>` */\n    get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n    /** Whether this radio is checked. */\n    private _checked: boolean = false;\n\n    /** Whether this radio is disabled. */\n    private _disabled: boolean;\n\n    /** Whether this radio is required. */\n    private _required: boolean;\n\n    /** Value assigned to this radio. */\n    private _value: any = null;\n\n    /** Unregister function for _radioDispatcher */\n    // tslint:disable-next-line\n    private readonly removeUniqueSelectionListener: () => void = () => {};\n\n    constructor(\n        @Optional() radioGroup: McRadioGroup,\n        elementRef: ElementRef,\n        private readonly _changeDetector: ChangeDetectorRef,\n        private readonly _radioDispatcher: UniqueSelectionDispatcher\n    ) {\n\n        super(elementRef);\n\n        this.radioGroup = radioGroup;\n\n        this.removeUniqueSelectionListener =\n            _radioDispatcher.listen((id: string, name: string) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n\n    ngOnDestroy() {\n        this.removeUniqueSelectionListener();\n    }\n\n    /** Focuses the radio button. */\n    // tslint:disable-next-line\n    focus(): void {}\n\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n\n    onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n\n    onInputChange(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this.emitChangeEvent();\n\n        if (this.radioGroup) {\n            this.radioGroup.controlValueAccessorChangeFn(this.value);\n            this.radioGroup.touch();\n            if (groupValueChanged) {\n                this.radioGroup.emitChangeEvent();\n            }\n        }\n    }\n\n    /** Dispatch change event with current value. */\n    private emitChangeEvent(): void {\n        this.change.emit(new McRadioChange(this, this._value));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McRadioButton, McRadioGroup } from './radio.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule],\n    exports: [McRadioGroup, McRadioButton],\n    declarations: [McRadioGroup, McRadioButton]\n})\nexport class McRadioModule {\n}\n","import { Directive, Input } from '@angular/core';\n\nimport { CdkTreeNodeDef } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodeDef]',\n    inputs: ['when: mcTreeNodeDefWhen'],\n    providers: [{ provide: CdkTreeNodeDef, useExisting: McTreeNodeDef }]\n})\nexport class McTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n    @Input('mcTreeNode') data: T;\n}\n","import { Directive, Input, OnInit } from '@angular/core';\nimport { CdkTreeNodePadding } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodePadding]',\n    providers: [{ provide: CdkTreeNodePadding, useExisting: McTreeNodePadding }]\n})\nexport class McTreeNodePadding<T> extends CdkTreeNodePadding<T> implements OnInit {\n    @Input('mcTreeNodePadding') level: number;\n\n    @Input('mcTreeNodePaddingIndent') indent: number;\n\n    baseLeftPadding: number = 12;\n    /* tslint:disable-next-line:naming-convention */\n    _indent: number = 20;\n\n    withIcon: boolean;\n    iconWidth: number = 20;\n\n    get leftPadding(): number {\n        return (this.withIcon ? 0 : this.iconWidth) + this.baseLeftPadding;\n    }\n\n    paddingIndent(): string | null {\n        const nodeLevel = (this.treeNode.data && this.tree.treeControl.getLevel)\n            ? this.tree.treeControl.getLevel(this.treeNode.data)\n            : null;\n\n        const level = this.level || nodeLevel;\n\n        return level ? `${(level * this._indent) + this.leftPadding}px` : `${this.baseLeftPadding}px`;\n    }\n\n    ngOnInit(): void {\n        this.withIcon = this.tree.treeControl.isExpandable(this.treeNode.data);\n\n        this.setPadding();\n    }\n}\n","import { Directive } from '@angular/core';\nimport { CdkTreeNodeToggle } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodeToggle]',\n    host: {\n        '(click)': 'toggle($event)'\n    },\n    providers: [{ provide: CdkTreeNodeToggle, useExisting: McTreeNodeToggle }]\n})\nexport class McTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {}\n","import {\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    Output,\n    ElementRef,\n    Inject,\n    Optional,\n    InjectionToken\n} from '@angular/core';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { CdkTreeNode } from '@ptsecurity/cdk/tree';\nimport { CanDisable, toBoolean } from '@ptsecurity/mosaic/core';\n\n\n/* tslint:disable-next-line:naming-convention */\nexport interface McTreeOptionParentComponent {\n    multiple: boolean;\n    selectionModel: SelectionModel<McTreeOption>;\n    setFocusedOption: any;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MC_TREE_OPTION_PARENT_COMPONENT =\n    new InjectionToken<McTreeOptionParentComponent>('MC_TREE_OPTION_PARENT_COMPONENT');\n\nexport class McTreeOptionChange {\n    constructor(public source: McTreeOption, public isUserInput = false) {}\n}\n\nlet uniqueIdCounter: number = 0;\n\n@Component({\n    selector: 'mc-tree-option',\n    exportAs: 'mcTreeOption',\n    host: {\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'getTabIndex()',\n\n        '[attr.disabled]': 'disabled || null',\n\n        class: 'mc-tree-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-active]': 'active',\n\n        '(click)': 'selectViaInteraction()'\n    },\n    templateUrl: './tree-option.html',\n    providers: [{ provide: CdkTreeNode, useExisting: McTreeOption }]\n})\nexport class McTreeOption extends CdkTreeNode<McTreeOption> implements CanDisable {\n    @Output() readonly onSelectionChange = new EventEmitter<McTreeOptionChange>();\n\n    @Input() value: any;\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    // @Input()\n    // get selected(): boolean {\n    //     return this.treeSelection.selectionModel && this.treeSelection.selectionModel.isSelected(this) || false;\n    // }\n\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            // this.treeSelection._reportValueChange();\n        }\n    }\n\n    private _selected: boolean = false;\n\n    /**\n     * Whether or not the option is currently active and ready to be selected.\n     * An active option displays styles as if it is focused, but the\n     * focus is actually retained somewhere else. This comes in handy\n     * for components like autocomplete where focus must remain on the input.\n     */\n    get active(): boolean {\n        return this._active;\n    }\n\n    private _active = false;\n\n    get id(): string {\n        return this._id;\n    }\n\n    private _id = `mc-tree-option-${uniqueIdCounter++}`;\n\n    get multiple(): boolean {\n        return this.parent.multiple;\n    }\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_TREE_OPTION_PARENT_COMPONENT) private readonly parent: McTreeOptionParentComponent\n    ) {\n        // todo any\n        super(elementRef, parent as any);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.parent.selectionModel) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.parent.selectionModel.select(this);\n        } else {\n            this.parent.selectionModel.deselect(this);\n        }\n\n        // this._changeDetector.markForCheck();\n    }\n\n    /**\n     * This method sets display styles on the option to make it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setActiveStyles(): void {\n        if (!this._active) {\n            this._active = true;\n\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    /**\n     * This method removes display styles on the option that made it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setInactiveStyles(): void {\n        if (this._active) {\n            this._active = false;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    getHeight(): number {\n        const clientRects = this.elementRef.nativeElement.getClientRects();\n        if (clientRects.length) {\n            return clientRects[0].height;\n        }\n\n        return 0;\n    }\n\n    focus(): void {\n        const element = this.getHostElement();\n\n        if (typeof element.focus === 'function') {\n            element.focus();\n        }\n    }\n\n    // todo старая реализация, нужно восстановить tree-selection\n    // handleClick(): void {\n    //     if (this.disabled) { return; }\n    //\n    //     this.treeSelection.setFocusedOption(this);\n    // }\n\n    /**\n     * The displayed value of the option. It is necessary to show the selected option in the\n     * select's trigger.\n     */\n    get viewValue(): string {\n        // TODO(kara): Add input property alternative for node envs.\n        return (this.getHostElement().textContent || '').trim();\n    }\n\n    select(): void {\n        if (!this._selected) {\n            this._selected = true;\n\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    deselect(): void {\n        if (this._selected) {\n            this._selected = false;\n\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    selectViaInteraction(): void {\n        if (!this.disabled) {\n            this._selected = this.multiple ? !this._selected : true;\n\n            this.changeDetectorRef.markForCheck();\n            this.emitSelectionChangeEvent(true);\n\n            if (this.parent.setFocusedOption) {\n                this.parent.setFocusedOption(this);\n            }\n        }\n    }\n\n    emitSelectionChangeEvent(isUserInput = false): void {\n        this.onSelectionChange.emit(new McTreeOptionChange(this, isUserInput));\n    }\n\n    getHostElement(): HTMLElement {\n        return this.elementRef.nativeElement;\n    }\n\n    getTabIndex(): string {\n        return this.disabled ? '-1' : '0';\n    }\n}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    EventEmitter,\n    Input,\n    IterableDiffer,\n    IterableDiffers,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    ElementRef\n} from '@angular/core';\nimport { NodeDef, ViewData } from '@angular/core/src/view';\nimport { ActiveDescendantKeyManager } from '@ptsecurity/cdk/a11y';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, SPACE } from '@ptsecurity/cdk/keycodes';\nimport { CdkTree, CdkTreeNodeOutlet } from '@ptsecurity/cdk/tree';\nimport {\n    CanDisable,\n    CanDisableCtor,\n    HasTabIndex,\n    HasTabIndexCtor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\nimport { Subject } from 'rxjs';\n\nimport { MC_TREE_OPTION_PARENT_COMPONENT, McTreeOption } from './tree-option';\n\n\nexport class McTreeNavigationChange {\n    constructor(\n        public source: McTreeSelection,\n        public option: McTreeOption\n    ) {}\n}\n\nexport class McTreeSelectionChange {\n    constructor(public source: McTreeSelection, public option: McTreeOption) {}\n}\n\nclass McTreeSelectionBase<T> extends CdkTree<T> {\n    constructor(differs: IterableDiffers, changeDetectorRef: ChangeDetectorRef) {\n        super(differs, changeDetectorRef);\n    }\n}\n\n/* tslint:disable-next-line:naming-convention */\nconst McTreeSelectionBaseMixin: HasTabIndexCtor & CanDisableCtor &\n    typeof McTreeSelectionBase = mixinTabIndex(mixinDisabled(McTreeSelectionBase));\n\n\n@Component({\n    selector: 'mc-tree-selection',\n    exportAs: 'mcTreeSelection',\n    template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n    host: {\n        class: 'mc-tree-selection',\n\n        '[attr.tabindex]': 'tabIndex',\n\n        '(keydown)': 'onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    styleUrls: ['./tree.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [\n        { provide: MC_TREE_OPTION_PARENT_COMPONENT, useExisting: McTreeSelection },\n        { provide: CdkTree, useExisting: McTreeSelection }\n    ]\n})\nexport class McTreeSelection extends McTreeSelectionBaseMixin<McTreeOption>\n    implements AfterContentInit, CanDisable, HasTabIndex {\n\n    @ViewChild(CdkTreeNodeOutlet) nodeOutlet: CdkTreeNodeOutlet;\n\n    @ContentChildren(McTreeOption) options: QueryList<McTreeOption>;\n\n    keyManager: ActiveDescendantKeyManager<McTreeOption>;\n\n    selectionModel: SelectionModel<McTreeOption>;\n\n    tabIndex: number;\n    multiple: boolean;\n    autoSelect: boolean;\n    noUnselect: boolean;\n\n    // todo temporary solution\n    withShift: boolean;\n    withCtrl: boolean;\n\n\n    @Output() readonly navigationChange = new EventEmitter<McTreeNavigationChange>();\n\n    @Output() readonly selectionChange = new EventEmitter<McTreeSelectionChange>();\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(rawValue: boolean) {\n        const value = toBoolean(rawValue);\n\n        if (this._disabled !== value) {\n            this._disabled = value;\n\n            if (this._disabled) {\n                /* tslint:disable-next-line:no-console */\n                console.log('need disable all options');\n            } else {\n                /* tslint:disable-next-line:no-console */\n                console.log('need enable all options');\n            }\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    private readonly destroy = new Subject<void>();\n\n    constructor(\n        private elementRef: ElementRef,\n        differs: IterableDiffers,\n        changeDetectorRef: ChangeDetectorRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('multiple') multiple: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string\n    ) {\n        super(differs, changeDetectorRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.multiple = multiple === null ? false : toBoolean(multiple);\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.selectionModel = new SelectionModel<McTreeOption>(this.multiple);\n    }\n\n    ngAfterContentInit(): void {\n        this.keyManager = new ActiveDescendantKeyManager<McTreeOption>(this.options)\n            .withVerticalOrientation(true)\n            .withHorizontalOrientation(null);\n    }\n\n    ngOnDestroy() {\n        this.destroy.next();\n\n        this.destroy.complete();\n    }\n\n    onKeyDown(event: KeyboardEvent) {\n        // tslint:disable-next-line: deprecation\n        const keyCode = event.keyCode;\n        this.withShift = event.shiftKey;\n        this.withCtrl = event.ctrlKey;\n\n        switch (keyCode) {\n            case LEFT_ARROW:\n                if (this.keyManager.activeItem) {\n                    this.treeControl.collapse(this.keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                break;\n            case RIGHT_ARROW:\n                if (this.keyManager.activeItem) {\n                    this.treeControl.expand(this.keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                break;\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this.keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this.keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                this.keyManager.setPreviousPageItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                this.keyManager.setNextPageItemActive();\n                event.preventDefault();\n\n                break;\n            default:\n                this.keyManager.onKeydown(event);\n        }\n    }\n\n    updateScrollSize(): void {\n        if (!this.options.first) { return; }\n\n        this.keyManager.withScrollSize(Math.floor(this.getHeight() / this.options.first.getHeight()));\n    }\n\n    setFocusedOption(option: McTreeOption) {\n        this.keyManager.setActiveItem(option);\n\n        if (this.withShift && this.multiple) {\n            const previousIndex = this.keyManager.previousActiveItemIndex;\n            const activeIndex = this.keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n\n            this.withShift = false;\n        } else if (this.withCtrl) {\n            this.withCtrl = false;\n\n            if (!this.canDeselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) {\n                this.options.forEach((item) => item.setSelected(false));\n                option.setSelected(true);\n            }\n        }\n\n        this.emitNavigationEvent(option);\n    }\n\n    toggleFocusedOption(): void {\n        const focusedIndex = this.keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this.isValidIndex(focusedIndex)) {\n            const focusedOption: McTreeOption = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this.canDeselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this.emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    renderNodeChanges(\n        data: McTreeOption[],\n        dataDiffer: IterableDiffer<McTreeOption> = this.dataDiffer,\n        viewContainer: any = this.nodeOutlet.viewContainer,\n        parentData?: McTreeOption\n    ): void {\n        super.renderNodeChanges(data, dataDiffer, viewContainer, parentData);\n\n        const arrayOfInstances = [];\n\n        viewContainer._embeddedViews.forEach((view: ViewData) => {\n            const viewDef = view.def;\n\n            viewDef.nodes.forEach((node: NodeDef) => {\n                if (viewDef.nodeMatchedQueries === node.matchedQueryIds) {\n                    const nodeData: any = view.nodes[node.nodeIndex];\n\n                    arrayOfInstances.push(nodeData.instance as never);\n                }\n            });\n        });\n\n        if (this.options) {\n            this.options.reset(arrayOfInstances);\n            this.options.notifyOnChanges();\n        }\n\n        this.updateScrollSize();\n    }\n\n    getHeight(): number {\n        const clientRects = this.elementRef.nativeElement.getClientRects();\n        if (clientRects.length) {\n            return clientRects[0].height;\n        }\n\n        return 0;\n    }\n\n    emitNavigationEvent(option: McTreeOption): void {\n        this.navigationChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    emitChangeEvent(option: McTreeOption): void {\n        this.selectionChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    private isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    private canDeselectLast(option: McTreeOption): boolean {\n        return !(this.noUnselect && this.selectionModel.selected.length === 1 && option.selected);\n    }\n}\n\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CdkTreeModule } from '@ptsecurity/cdk/tree';\nimport { McPseudoCheckboxModule } from '@ptsecurity/mosaic/core';\n\nimport { McTreeNodeDef } from './node';\nimport { McTreeNodePadding } from './padding';\nimport { McTreeNodeToggle } from './toggle';\nimport { McTreeOption } from './tree-option';\nimport { McTreeSelection } from './tree-selection';\n\n\nconst MC_TREE_DIRECTIVES = [\n    McTreeSelection,\n    McTreeOption,\n    McTreeNodeDef,\n    McTreeNodePadding,\n    McTreeNodeToggle\n];\n\n@NgModule({\n    imports: [CommonModule, CdkTreeModule, McPseudoCheckboxModule],\n    exports: MC_TREE_DIRECTIVES,\n    declarations: MC_TREE_DIRECTIVES\n})\nexport class McTreeModule {}\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { FlatTreeControl, ITreeControl } from '@ptsecurity/cdk/tree';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class McTreeFlattener<T, F> {\n    constructor(\n        public transformFunction: (node: T, level: number) => F,\n        public getLevel: (node: F) => number,\n        public isExpandable: (node: F) => boolean,\n        public getChildren: (node: T) => Observable<T[]>\n    ) {}\n\n    flattenNode(node: T, level: number, resultNodes: F[], parentMap: boolean[]): F[] {\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n\n        if (this.isExpandable(flatNode)) {\n            this.getChildren(node)\n                .pipe(take(1))\n                .subscribe((children) => {\n                    children.forEach((child, index) => {\n                        const childParentMap: boolean[] = parentMap.slice();\n                        childParentMap.push(index !== children.length - 1);\n\n                        this.flattenNode(child, level + 1, resultNodes, childParentMap);\n                    });\n                });\n        }\n\n        return resultNodes;\n    }\n\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n    flattenNodes(structuredData: T[]): F[] {\n        const resultNodes: F[] = [];\n        structuredData.forEach((node) => this.flattenNode(node, 0, resultNodes, []));\n\n        return resultNodes;\n    }\n\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n    expandFlattenedNodes(nodes: F[], treeControl: ITreeControl<F>): F[] {\n        const results: F[] = [];\n        const currentExpand: boolean[] = [];\n        currentExpand[0] = true;\n\n        nodes.forEach((node) => {\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n\n            if (expand) { results.push(node); }\n\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        });\n\n        return results;\n    }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `McTree`.\n * The nested tree nodes of type `T` are flattened through `MсTreeFlattener`, and converted\n * to type `F` for `McTree` to consume.\n */\nexport class McTreeFlatDataSource<T, F> extends DataSource<F> {\n    flattenedData = new BehaviorSubject<F[]>([]);\n\n    expandedData = new BehaviorSubject<F[]>([]);\n\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n\n        this.flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n        this.treeControl.dataNodes = this.flattenedData.value;\n    }\n\n    private _data: BehaviorSubject<T[]>;\n\n    constructor(\n        private treeControl: FlatTreeControl<F>,\n        private treeFlattener: McTreeFlattener<T, F>,\n        initialData: T[] = []\n    ) {\n        super();\n\n        this._data = new BehaviorSubject<T[]>(initialData);\n    }\n\n    connect(collectionViewer: ICollectionViewer): Observable<F[]> {\n        const changes = [\n            collectionViewer.viewChange,\n            this.treeControl.expansionModel.changed,\n            this.flattenedData\n        ];\n\n        return merge(...changes)\n            .pipe(map(() => {\n                this.expandedData.next(\n                    this.treeFlattener.expandFlattenedNodes(this.flattenedData.value, this.treeControl)\n                );\n\n                return this.expandedData.value;\n            }));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by ITreeControl and each non-leaf node.\n */\nexport class McTreeNestedDataSource<T> extends DataSource<T> {\n\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n    }\n\n    /* tslint:disable-next-line:naming-convention */\n    private _data = new BehaviorSubject<T[]>([]);\n\n    connect(collectionViewer: ICollectionViewer): Observable<T[]> {\n        return merge(...[collectionViewer.viewChange, this._data])\n            .pipe(map(() => this.data));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import { DOCUMENT } from '@angular/common';\nimport {\n    AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef,\n    Component,\n    ComponentFactoryResolver,\n    ComponentRef,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Injector,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    Renderer2,\n    SimpleChanges,\n    TemplateRef,\n    Type,\n    ViewChild,\n    ViewContainerRef, ViewEncapsulation\n} from '@angular/core';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { Overlay, OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { McMeasureScrollbarService } from '@ptsecurity/mosaic/core';\nimport { Observable } from 'rxjs';\n\nimport { McModalControlService } from './modal-control.service';\nimport { McModalRef } from './modal-ref.class';\n// tslint:disable-next-line\nimport ModalUtil from './modal-util';\nimport { IModalButtonOptions, IModalOptions, ModalType, OnClickCallback } from './modal.type';\n\n\n// Duration when perform animations (ms)\nexport const MODAL_ANIMATE_DURATION = 200;\n\ntype AnimationState = 'enter' | 'leave' | null;\n\n@Component({\n    selector: 'mc-modal',\n    templateUrl: './modal.component.html',\n    styleUrls: ['./modal.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        '(keydown)': 'onKeyDown($event)'\n    }\n})\nexport class McModalComponent<T = any, R = any> extends McModalRef<T, R>\n    implements OnInit, OnChanges, AfterViewInit, OnDestroy, IModalOptions {\n\n    // tslint:disable-next-line:no-any\n    @Input() mcModalType: ModalType = 'default';\n    // If not specified, will use <ng-content>\n    @Input() mcContent: string | TemplateRef<{}> | Type<T>;\n    // available when mcContent is a component\n    @Input() mcComponentParams: T;\n    // Default Modal ONLY\n    @Input() mcFooter: string | TemplateRef<{}> | IModalButtonOptions<T>[];\n\n    @Input()\n    get mcVisible() { return this._mcVisible; }\n    set mcVisible(value) { this._mcVisible = value; }\n\n    _mcVisible = false;\n\n    @Output() mcVisibleChange = new EventEmitter<boolean>();\n\n    @Input() mcZIndex: number = 1000;\n    @Input() mcWidth: number | string = 480;\n    @Input() mcWrapClassName: string;\n    @Input() mcClassName: string;\n    @Input() mcStyle: object;\n    @Input() mcTitle: string | TemplateRef<{}>;\n    @Input() mcCloseByESC: boolean = true;\n\n    @Input()\n    get mcClosable() { return this._mcClosable; }\n    set mcClosable(value) { this._mcClosable = value; }\n    _mcClosable = true;\n\n    @Input()\n    get mcMask() { return this._mcMask; }\n    set mcMask(value) { this._mcMask = value; }\n    _mcMask = true;\n\n    @Input()\n    get mcMaskClosable() { return this._mcMaskClosable; }\n    set mcMaskClosable(value) { this._mcMaskClosable = value; }\n    _mcMaskClosable = true;\n\n    @Input() mcMaskStyle: object;\n    @Input() mcBodyStyle: object;\n\n    // Trigger when modal open(visible) after animations\n    @Output() mcAfterOpen = new EventEmitter<void>();\n    // Trigger when modal leave-animation over\n    @Output() mcAfterClose = new EventEmitter<R>();\n\n    // --- Predefined OK & Cancel buttons\n    @Input() mcOkText: string;\n    @Input() mcOkType = 'primary';\n\n    @Input()\n    get mcOkLoading() { return this._mcOkLoading; }\n    set mcOkLoading(value) { this._mcOkLoading = value; }\n    _mcOkLoading = false;\n\n    @Input() @Output() mcOnOk: EventEmitter<T> | OnClickCallback<T> = new EventEmitter<T>();\n    @Input() mcCancelText: string;\n\n    @Input()\n    get mcCancelLoading() { return this._mcCancelLoading; }\n    set mcCancelLoading(value) { this._mcCancelLoading = value; }\n    _mcCancelLoading = false;\n\n    @Input() @Output() mcOnCancel: EventEmitter<T> | OnClickCallback<T> = new EventEmitter<T>();\n\n    @ViewChild('modalContainer') modalContainer: ElementRef;\n    @ViewChild('bodyContainer', { read: ViewContainerRef }) bodyContainer: ViewContainerRef;\n    // Only aim to focus the ok button that needs to be auto focused\n    @ViewChild('autoFocusButtonOk', { read: ElementRef }) autoFocusButtonOk: ElementRef;\n\n    maskAnimationClassMap: object;\n    modalAnimationClassMap: object;\n    // The origin point that animation based on\n    transformOrigin = '0px 0px 0px';\n\n    // Observable alias for mcAfterOpen\n    get afterOpen(): Observable<void> {\n        return this.mcAfterOpen.asObservable();\n    }\n\n    // Observable alias for mcAfterClose\n    get afterClose(): Observable<R> {\n        return this.mcAfterClose.asObservable();\n    }\n\n    get okText(): string {\n        return this.mcOkText;\n    }\n\n    get cancelText(): string {\n        return this.mcCancelText;\n    }\n\n    // Indicate whether this dialog should hidden\n    get hidden(): boolean {\n        return !this.mcVisible && !this.animationState;\n    }\n\n    // Handle the reference when using mcContent as Component\n    private contentComponentRef: ComponentRef<T>;\n    // Current animation state\n    private animationState: AnimationState;\n    private container: HTMLElement | OverlayRef;\n\n    constructor(\n        private overlay: Overlay,\n        private renderer: Renderer2,\n        private cfr: ComponentFactoryResolver,\n        private elementRef: ElementRef,\n        private viewContainer: ViewContainerRef,\n        private mcMeasureScrollbarService: McMeasureScrollbarService,\n        private modalControl: McModalControlService,\n        private changeDetector: ChangeDetectorRef,\n        @Inject(DOCUMENT) private document: any) {\n\n        super();\n    }\n\n    @Input() mcGetContainer: HTMLElement | OverlayRef | (() => HTMLElement | OverlayRef) = () => this.overlay.create();\n\n    ngOnInit() {\n\n        // Create component along without View\n        if (this.isComponent(this.mcContent)) {\n            this.createDynamicComponent(this.mcContent as Type<T>);\n        }\n\n        // Setup default button options\n        if (this.isModalButtons(this.mcFooter)) {\n            this.mcFooter = this.formatModalButtons(this.mcFooter as IModalButtonOptions<T>[]);\n        }\n\n        // Place the modal dom to elsewhere\n        this.container = typeof this.mcGetContainer === 'function' ? this.mcGetContainer() : this.mcGetContainer;\n        if (this.container instanceof HTMLElement) {\n            this.container.appendChild(this.elementRef.nativeElement);\n        } else if (this.container instanceof OverlayRef) {\n            // NOTE: only attach the dom to overlay, the view container is not changed actually\n            this.container.overlayElement.appendChild(this.elementRef.nativeElement);\n        }\n\n        // Register modal when afterOpen/afterClose is stable\n        this.modalControl.registerModal(this);\n    }\n\n    // [NOTE] NOT available when using by service!\n    // Because ngOnChanges never be called when using by service,\n    // here we can't support \"mcContent\"(Component) etc. as inputs that initialized dynamically.\n    // BUT: User also can change \"mcContent\" dynamically to trigger UI changes\n    // (provided you don't use \bComponent that needs initializations)\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.mcVisible) {\n            // Do not trigger animation while initializing\n            this.handleVisibleStateChange(this.mcVisible, !changes.mcVisible.firstChange);\n        }\n    }\n\n    ngAfterViewInit() {\n        // If using Component, it is the time to attach View while bodyContainer is ready\n        if (this.contentComponentRef) {\n            this.bodyContainer.insert(this.contentComponentRef.hostView);\n        }\n\n        if (this.autoFocusButtonOk) {\n            (this.autoFocusButtonOk.nativeElement as HTMLButtonElement).focus();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.container instanceof OverlayRef) {\n            this.container.dispose();\n        }\n    }\n\n    open() {\n        this.changeVisibleFromInside(true);\n    }\n\n    close(result?: R) {\n        this.changeVisibleFromInside(false, result);\n    }\n\n    // Destroy equals Close\n    destroy(result?: R) {\n        this.close(result);\n    }\n\n    triggerOk() {\n        this.onClickOkCancel('ok');\n    }\n\n    triggerCancel() {\n        this.onClickOkCancel('cancel');\n    }\n\n    getInstance(): McModalComponent {\n        return this;\n    }\n\n    getContentComponentRef(): ComponentRef<T> {\n        return this.contentComponentRef;\n    }\n\n    getContentComponent(): T {\n        return this.contentComponentRef && this.contentComponentRef.instance;\n    }\n\n    getElement(): HTMLElement {\n        return this.elementRef && this.elementRef.nativeElement;\n    }\n\n    onClickMask($event: MouseEvent) {\n        if (\n            this.mcMask &&\n            this.mcMaskClosable &&\n            ($event.target as HTMLElement).classList.contains('mc-modal-wrap') &&\n            this.mcVisible\n        ) {\n            this.onClickOkCancel('cancel');\n        }\n    }\n\n    // tslint:disable-next-line\n    isModalType(type: ModalType): boolean {\n        return this.mcModalType === type;\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n\n        if (event.keyCode === ESCAPE && this.container && (this.container instanceof OverlayRef)) {\n\n            this.close();\n            event.preventDefault();\n        }\n    }\n\n    // AoT\n    onClickCloseBtn() {\n        if (this.mcVisible) {\n            this.onClickOkCancel('cancel');\n        }\n    }\n\n    // AoT\n    // tslint:disable-next-line\n    onClickOkCancel(type: 'ok' | 'cancel') {\n        const trigger = { ok: this.mcOnOk, cancel: this.mcOnCancel }[type];\n        const loadingKey = { ok: 'mcOkLoading', cancel: 'mcCancelLoading' }[type];\n\n        if (trigger instanceof EventEmitter) {\n            trigger.emit(this.getContentComponent());\n        } else if (typeof trigger === 'function') {\n\n            const result = trigger(this.getContentComponent());\n            // Users can return \"false\" to prevent closing by default\n            const caseClose = (doClose: boolean | void | {}) => (doClose !== false) && this.close(doClose as R);\n\n            if (isPromise(result)) {\n                this[loadingKey] = true;\n                const handleThen = (doClose) => {\n                    this[loadingKey] = false;\n                    caseClose(doClose);\n                };\n                (result as Promise<void>).then(handleThen).catch(handleThen);\n            } else {\n                caseClose(result);\n            }\n        }\n    }\n\n    // AoT\n    isNonEmptyString(value: {}): boolean {\n        return typeof value === 'string' && value !== '';\n    }\n\n    // AoT\n    isTemplateRef(value: {}): boolean {\n        return value instanceof TemplateRef;\n    }\n\n    // AoT\n    isComponent(value: {}): boolean {\n        return value instanceof Type;\n    }\n\n    // AoT\n    isModalButtons(value: {}): boolean {\n        return Array.isArray(value) && value.length > 0;\n    }\n\n    // Do rest things when visible state changed\n    private handleVisibleStateChange(visible: boolean, animation: boolean = true, closeResult?: R): Promise<any> {\n        // Hide scrollbar at the first time when shown up\n        if (visible) {\n            this.changeBodyOverflow(1);\n        }\n\n        return Promise\n            .resolve(animation && this.animateTo(visible))\n            // Emit open/close event after animations over\n            .then(() => {\n                if (visible) {\n                    this.mcAfterOpen.emit();\n                } else {\n                    this.mcAfterClose.emit(closeResult);\n                    // Show/hide scrollbar when animation is over\n                    this.changeBodyOverflow();\n                }\n            });\n    }\n\n    // Lookup a button's property, if the prop is a function, call & then return the result, otherwise, return itself.\n    // AoT\n    // tslint:disable-next-line\n    getButtonCallableProp(options: IModalButtonOptions<T>, prop: string): {} {\n        const value = options[prop];\n        const args: any[] = [];\n        if (this.contentComponentRef) {\n            args.push(this.contentComponentRef.instance);\n        }\n\n        return typeof value === 'function' ? value.apply(options, args) : value;\n    }\n\n    // On mcFooter's modal button click\n    // AoT\n    // tslint:disable-next-line\n    onButtonClick(button: IModalButtonOptions<T>) {\n        // Call onClick directly\n        const result = this.getButtonCallableProp(button, 'onClick');\n        if (isPromise(result)) {\n            button.loading = true;\n            (result as Promise<{}>).then(() => button.loading = false).catch(() => button.loading = false);\n        }\n    }\n\n    // Change mcVisible from inside\n    private changeVisibleFromInside(visible: boolean, closeResult?: R): Promise<void> {\n        if (this.mcVisible !== visible) {\n            // Change mcVisible value immediately\n            this.mcVisible = visible;\n            this.mcVisibleChange.emit(visible);\n\n            return this.handleVisibleStateChange(visible, true, closeResult);\n        }\n\n        return Promise.resolve();\n    }\n\n    private changeAnimationState(state: AnimationState) {\n        this.animationState = state;\n        if (state) {\n            this.maskAnimationClassMap = {\n                [`fade-${state}`]: true,\n                [`fade-${state}-active`]: true\n            };\n            this.modalAnimationClassMap = {\n                [`zoom-${state}`]: true,\n                [`zoom-${state}-active`]: true\n            };\n        } else {\n            // @ts-ignore\n            this.maskAnimationClassMap = this.modalAnimationClassMap = null;\n        }\n\n        if (this.contentComponentRef) {\n            this.contentComponentRef.changeDetectorRef.markForCheck();\n        } else {\n            this.changeDetector.markForCheck();\n        }\n    }\n\n    private animateTo(isVisible: boolean): Promise<any> {\n        // Figure out the lastest click position when shows up\n        if (isVisible) {\n            // [NOTE] Using timeout due to the document.click event is fired later than visible change,\n            // so if not postponed to next event-loop, we can't get the lastest click position\n            window.setTimeout(() => this.updateTransformOrigin());\n        }\n\n        this.changeAnimationState(isVisible ? 'enter' : 'leave');\n\n        // Return when animation is over\n        return new Promise((resolve) => window.setTimeout(() => {\n            this.changeAnimationState(null);\n            resolve();\n        }, MODAL_ANIMATE_DURATION));\n    }\n\n    private formatModalButtons(buttons: IModalButtonOptions<T>[]): IModalButtonOptions<T>[] {\n        return buttons.map((button) => {\n\n            return {\n                ...{\n                    type: 'default',\n                    size: 'default',\n                    autoLoading: true,\n                    show: true,\n                    loading: false,\n                    disabled: false\n                },\n                ...button\n            };\n        });\n    }\n\n    /**\n     * Create a component dynamically but not attach to any View\n     * (this action will be executed when bodyContainer is ready)\n     * @param component Component class\n     */\n    private createDynamicComponent(component: Type<T>) {\n        const factory = this.cfr.resolveComponentFactory(component);\n        const childInjector = Injector.create({\n            providers: [{provide: McModalRef, useValue: this}],\n            parent: this.viewContainer.parentInjector\n        });\n\n        this.contentComponentRef = factory.create(childInjector);\n\n        if (this.mcComponentParams) {\n            Object.assign(this.contentComponentRef.instance, this.mcComponentParams);\n        }\n\n        // Do the first change detection immediately\n        // (or we do detection at ngAfterViewInit, multi-changes error will be thrown)\n        this.contentComponentRef.changeDetectorRef.detectChanges();\n\n\n    }\n\n    // Update transform-origin to the last click position on document\n    private updateTransformOrigin() {\n        const modalElement = this.modalContainer.nativeElement as HTMLElement;\n        const lastPosition = ModalUtil.getLastClickPosition();\n\n        if (lastPosition) {\n            // tslint:disable-next-line\n            this.transformOrigin = `${lastPosition.x - modalElement.offsetLeft}px ${lastPosition.y - modalElement.offsetTop}px 0px`;\n        }\n    }\n\n    /**\n     * Take care of the body's overflow to decide the existense of scrollbar\n     * @param plusNum The number that the openModals.length will increase soon\n     */\n    private changeBodyOverflow(plusNum: number = 0) {\n        const openModals = this.modalControl.openModals;\n\n        if (openModals.length + plusNum > 0) {\n            // tslint:disable-next-line\n            this.renderer.setStyle(this.document.body, 'padding-right', `${this.mcMeasureScrollbarService.scrollBarWidth}px`);\n            this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n        } else {\n            this.renderer.removeStyle(this.document.body, 'padding-right');\n            this.renderer.removeStyle(this.document.body, 'overflow');\n        }\n    }\n}\n\n////////////\n\nfunction isPromise(obj: {} | void): boolean {\n    // tslint:disable-next-line\n    return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof (obj as Promise<{}>).then === 'function' && typeof (obj as Promise<{}>).catch === 'function';\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n\n@Pipe({\n    name: 'toCssUnit'\n})\nexport class CssUnitPipe implements PipeTransform {\n    transform(value: number | string, defaultUnit: string = 'px'): string {\n        const formatted = +value;\n\n        return isNaN(formatted) ? `${value}` : `${formatted}${defaultUnit}`;\n    }\n}\n","import { ComponentRef, Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { Overlay, OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal } from '@ptsecurity/cdk/portal';\n\nimport { McModalControlService } from './modal-control.service';\nimport { McModalRef } from './modal-ref.class';\nimport { McModalComponent } from './modal.component';\nimport { ConfirmType, IModalOptions, IModalOptionsForService } from './modal.type';\n\n\n// A builder used for managing service creating modals\nexport class ModalBuilderForService {\n\n    // Modal ComponentRef, \"null\" means it has been destroyed\n    private modalRef: ComponentRef<McModalComponent> | null;\n    private overlayRef: OverlayRef;\n\n    constructor(private overlay: Overlay, options: IModalOptionsForService = {}) {\n        this.createModal();\n\n        if (!('mcGetContainer' in options)) {\n            options.mcGetContainer = undefined;\n        }\n\n        this.changeProps(options);\n        this.modalRef!.instance.open();\n        this.modalRef!.instance.mcAfterClose.subscribe(() => this.destroyModal());\n\n        this.overlayRef.keydownEvents()\n            // @ts-ignore\n            .pipe(filter((event: KeyboardEvent) => {\n                return event.keyCode === ESCAPE && options.mcCloseByESC;\n            }))\n            .subscribe(() => this.modalRef!.instance.close());\n    }\n\n    getInstance(): McModalComponent | null {\n        return this.modalRef && this.modalRef.instance;\n    }\n\n    destroyModal(): void {\n        if (this.modalRef) {\n            this.overlayRef.dispose();\n            this.modalRef = null;\n        }\n    }\n\n    private changeProps(options: IModalOptions): void {\n        if (this.modalRef) {\n            // here not limit user's inputs at runtime\n            Object.assign(this.modalRef.instance, options);\n        }\n    }\n\n    // Create component to ApplicationRef\n    private createModal(): void {\n        this.overlayRef = this.overlay.create();\n        this.modalRef = this.overlayRef.attach(new ComponentPortal(McModalComponent));\n    }\n}\n\n@Injectable()\nexport class McModalService {\n    // Track of the current close modals (we assume invisible is close this time)\n    get openModals(): McModalRef[] {\n        return this.modalControl.openModals;\n    }\n\n    get afterAllClose(): Observable<void> {\n        return this.modalControl.afterAllClose.asObservable();\n    }\n\n    constructor(\n        private overlay: Overlay,\n        private modalControl: McModalControlService) {\n    }\n\n    // Closes all of the currently-open dialogs\n    closeAll(): void {\n        this.modalControl.closeAll();\n    }\n\n    create<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n\n        if (typeof options.mcOnCancel !== 'function') {\n            // Leave a empty function to close this modal by default\n            // tslint:disable-next-line\n            options.mcOnCancel = () => {};\n        }\n\n        if (!('mcCloseByESC' in options)) {\n            options.mcCloseByESC = true;\n        }\n\n\n        if (!('mcWidth' in options)) {\n            // tslint:disable-next-line\n            options.mcWidth = 480;\n        }\n\n        return new ModalBuilderForService(this.overlay, options).getInstance()!;\n    }\n\n    confirm<T>(options: IModalOptionsForService<T> = {}, confirmType: ConfirmType = 'confirm'): McModalRef<T> {\n        if ('mcFooter' in options) {\n            console.warn(`The Confirm-Modal doesn't support \"mcFooter\", this property will be ignored.`);\n        }\n\n        // NOTE: only support function currently by calling confirm()\n        if (typeof options.mcOnOk !== 'function') {\n            // Leave a empty function to close this modal by default\n            // tslint:disable-next-line\n            options.mcOnOk = () => {};\n        }\n\n        options.mcModalType = 'confirm';\n        options.mcClassName = `mc-confirm mc-confirm-${confirmType} ${options.mcClassName || ''}`;\n        options.mcMaskClosable = false;\n\n        return this.create(options);\n    }\n\n    success<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n        return this.simpleConfirm(options, 'success');\n    }\n\n    delete<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n        return this.simpleConfirm(options, 'warn');\n    }\n\n    private simpleConfirm<T>(options: IModalOptionsForService<T> = {}, confirmType: ConfirmType): McModalRef<T> {\n        // Remove the Cancel button if the user not specify a Cancel button\n        if (!('mcCancelText' in options)) {\n            // @ts-ignore\n            options.mcCancelText = null;\n        }\n\n        return this.confirm(options, confirmType);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { McButtonModule } from '@ptsecurity/mosaic/button';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { CssUnitPipe } from './css-unit.pipe';\nimport { McModalControlService } from './modal-control.service';\nimport { McModalComponent } from './modal.component';\nimport { McModalService } from './modal.service';\n\n\n@NgModule({\n    imports: [ CommonModule, OverlayModule, McButtonModule, McIconModule ],\n    exports: [ McModalComponent ],\n    declarations: [ McModalComponent, CssUnitPipe ],\n    entryComponents: [ McModalComponent ],\n    providers: [ McModalControlService, McModalService ]\n})\nexport class McModalModule { }\n","import { fromEvent, Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nimport {\n    AfterViewInit,\n    Component, Directive,\n    ElementRef,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    ViewEncapsulation,\n    ContentChild,\n    TemplateRef,\n    ChangeDetectorRef,\n    ChangeDetectionStrategy,\n    ViewChild\n} from '@angular/core';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { SPACE } from '@ptsecurity/cdk/keycodes';\nimport { Platform } from '@ptsecurity/cdk/platform';\nimport { CanDisable, CanDisableCtor, mixinDisabled } from '@ptsecurity/mosaic/core';\n\n\nconst COLLAPSED_CLASS: string = 'mc-navbar-collapsed-title';\nconst MC_ICON = 'mc-icon';\nconst MC_NAVBAR = 'mc-navbar';\nconst MC_NAVBAR_CONTAINER = 'mc-navbar-container';\nconst MC_NAVBAR_ITEM = 'mc-navbar-item';\nconst MC_NAVBAR_BRAND = 'mc-navbar-brand';\nconst MC_NAVBAR_TITLE = 'mc-navbar-title';\nconst MC_NAVBAR_LOGO = 'mc-navbar-logo';\n\nexport type McNavbarContainerPositionType = 'left' | 'right';\n\nexport interface IMcNavbarDropdownItem {\n    link?: string;\n    text: string;\n}\n\n@Directive({\n    selector: MC_NAVBAR_LOGO,\n    host: {\n        class: MC_NAVBAR_LOGO\n    }\n})\nexport class McNavbarLogo {}\n\n@Directive({\n    selector: MC_NAVBAR_BRAND,\n    host: {\n        class: MC_NAVBAR_BRAND\n    }\n})\nexport class McNavbarBrand {}\n\n@Directive({\n    selector: MC_NAVBAR_TITLE,\n    host: {\n        class: MC_NAVBAR_TITLE\n    }\n})\nexport class McNavbarTitle {}\n\nexport class McNavbarItemBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McNavbarMixinBase: CanDisableCtor & typeof McNavbarItemBase = mixinDisabled(McNavbarItemBase);\n\n@Component({\n    selector: MC_NAVBAR_ITEM,\n    template: `\n        <a\n            [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\n            (click)=\"handleClickByItem()\"\n            (keydown)=\"handleKeydown($event)\"\n            class=\"mc-navbar-item\"\n        >\n            <ng-content></ng-content>\n            <i *ngIf=\"hasDropdownContent\" mc-icon=\"mc-angle-down-M_16\"></i>\n        </a>\n        <ul\n            #dropdownContent\n            *ngIf=\"hasDropdownContent\"\n            [ngClass]=\"{ 'is-collapsed': isCollapsed }\"\n            class=\"mc-navbar-dropdown\"\n        >\n            <li\n                *ngFor=\"let item of dropdownItems\"\n                (click)=\"handleClickByDropdownItem()\"\n                class=\"mc-navbar-dropdown-item\"\n            >\n                <ng-container *ngIf=\"dropdownItemTmpl\">\n                    <ng-container *ngTemplateOutlet=\"dropdownItemTmpl; context: { $implicit: item }\"></ng-container>\n                </ng-container>\n                <a\n                    *ngIf=\"!dropdownItemTmpl\"\n                    [attr.href]=\"item.link\"\n                    [ngClass]=\"{ 'is-active': isActiveDropdownLink(item.link) }\"\n                    class=\"mc-navbar-dropdown-link\"\n                >{{ item.text }}</a>\n            </li>\n        </ul>\n    `,\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': '-1'\n    }\n})\nexport class McNavbarItem extends _McNavbarMixinBase implements OnInit, AfterViewInit, OnDestroy, CanDisable {\n\n    @Input()\n    tabIndex: number = 0;\n\n    @Input()\n    dropdownItems: IMcNavbarDropdownItem[] = [];\n\n    @Input()\n    set collapsedTitle(value: string) {\n        this.elementRef.nativeElement.setAttribute('computedTitle', encodeURI(value));\n    }\n\n    @ContentChild('dropdownItemTmpl', { read: TemplateRef })\n    dropdownItemTmpl: TemplateRef<IMcNavbarDropdownItem>;\n\n    @ViewChild('dropdownContent', { read: ElementRef })\n    dropdownContent: ElementRef;\n\n    get hasDropdownContent() {\n        return this.dropdownItems.length > 0;\n    }\n\n    isCollapsed: boolean = true;\n\n    private _subscription: Subscription = new Subscription();\n    private _focusMonitor$: Observable<FocusOrigin>;\n\n    private get _dropdownElements(): HTMLElement[] {\n        return this.dropdownContent ? this.dropdownContent.nativeElement.querySelectorAll('li > *') : [];\n    }\n\n    constructor(\n        public  elementRef: ElementRef,\n        private _focusMonitor: FocusMonitor,\n        private _platform: Platform,\n        private _cdRef: ChangeDetectorRef\n    ) {\n        super(elementRef);\n    }\n\n    ngOnInit() {\n        this.denyClickIfDisabled();\n\n        this._focusMonitor$ = this._focusMonitor.monitor(this.elementRef.nativeElement, true);\n\n        if (this.hasDropdownContent) {\n            this.listenClickOutside();\n        }\n    }\n\n    ngAfterViewInit() {\n        if (!this.hasDropdownContent) {\n            return;\n        }\n\n        this.startListenFocusDropdownItems();\n    }\n\n    ngOnDestroy() {\n        this._subscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n        this.stopListenFocusDropdownItems();\n    }\n\n    isActiveDropdownLink(link: string): boolean {\n        if (!this._platform.isBrowser) {\n            return false;\n        }\n\n        return window.location.href.indexOf(link) >= 0;\n    }\n\n    handleClickByItem() {\n        this.toggleDropdown();\n    }\n\n    handleKeydown($event: KeyboardEvent) {\n        const isNavbarItem = ($event.target as HTMLElement).classList.contains(MC_NAVBAR_ITEM);\n\n        // tslint:disable-next-line\n        if (this.hasDropdownContent && $event.keyCode === SPACE && isNavbarItem) {\n            this.toggleDropdown();\n        }\n    }\n\n    handleClickByDropdownItem() {\n        this.forceCloseDropdown();\n    }\n\n    private listenClickOutside() {\n        this._subscription.add(\n            this._focusMonitor$.subscribe((origin) => {\n                if (origin === null) {\n                    this.forceCloseDropdown();\n                }\n            })\n        );\n    }\n\n    private toggleDropdown() {\n        this.isCollapsed = !this.isCollapsed;\n    }\n\n    private forceCloseDropdown() {\n        this.isCollapsed = true;\n        this._cdRef.detectChanges();\n    }\n\n    private startListenFocusDropdownItems() {\n        this._dropdownElements.forEach((el) => {\n            this._focusMonitor.monitor(el, true);\n        });\n    }\n\n    private stopListenFocusDropdownItems() {\n        this._dropdownElements.forEach((el) => {\n            this._focusMonitor.stopMonitoring(el);\n        });\n    }\n\n    // This method is required due to angular 2 issue https://github.com/angular/angular/issues/11200\n    private denyClickIfDisabled() {\n        const events: Event[] = this.elementRef.nativeElement.eventListeners('click');\n\n        events.forEach((event) => this.elementRef.nativeElement.removeEventListener('click', event));\n\n        this.elementRef.nativeElement.addEventListener('click', (event: MouseEvent) => {\n            if (this.elementRef.nativeElement.hasAttribute('disabled')) {\n                event.stopImmediatePropagation();\n            }\n        }, true);\n\n        events.forEach((event) => this.elementRef.nativeElement.addEventListener('click', event));\n    }\n}\n\n@Directive({\n    selector: MC_NAVBAR_CONTAINER\n})\nexport class McNavbarContainer {\n    @Input()\n    position: McNavbarContainerPositionType = 'left';\n\n    @HostBinding('class')\n    get cssClasses(): string {\n        return this.position === 'left' ? 'mc-navbar-left' : 'mc-navbar-right';\n    }\n}\n\nclass CollapsibleItem {\n    private _collapsed: boolean = false;\n\n    constructor(\n        public element: HTMLElement,\n        public width: number\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        this._collapsed = collapsed;\n\n        this.updateCollapsedClass();\n    }\n\n    private updateCollapsedClass() {\n        if (this._collapsed) {\n            this.element.classList.add(COLLAPSED_CLASS);\n        } else {\n            this.element.classList.remove(COLLAPSED_CLASS);\n        }\n\n    }\n}\n\nclass CachedItemWidth {\n\n    get canCollapse(): boolean {\n        return this.itemsForCollapse.length > 0;\n    }\n\n    private _collapsedItemsWidth: number;\n\n    get collapsedItemsWidth(): number {\n        if (this._collapsedItemsWidth !== undefined) {\n            return this._collapsedItemsWidth;\n        }\n\n        this.calculateAndCacheCollapsedItemsWidth();\n\n        return this._collapsedItemsWidth;\n    }\n\n    constructor(\n        public element: HTMLElement,\n        public width: number,\n        public itemsForCollapse: CollapsibleItem[] = []\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        if (this.itemsForCollapse.length > 0) {\n            this.updateTitle(collapsed);\n        }\n\n        this.itemsForCollapse.forEach((item) => item.processCollapsed(collapsed));\n    }\n\n    private calculateAndCacheCollapsedItemsWidth() {\n        this._collapsedItemsWidth = this.itemsForCollapse\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getTitle(): string {\n        const computedTitle = this.element.getAttribute('computedTitle');\n\n        return computedTitle\n            ? decodeURI(computedTitle)\n            : (this.itemsForCollapse.length > 0 ? this.itemsForCollapse[0].element.innerText : '');\n    }\n\n    private updateTitle(collapsed: boolean) {\n        if (collapsed) {\n            this.element.setAttribute('title', this.getTitle());\n        } else {\n            this.element.removeAttribute('title');\n        }\n    }\n}\n\n\n@Component({\n    selector: MC_NAVBAR,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    template: `\n        <nav class=\"mc-navbar\">\n            <ng-content select=\"[${MC_NAVBAR_CONTAINER}],${MC_NAVBAR_CONTAINER}\"></ng-content>\n        </nav>\n    `,\n    styleUrls: ['./navbar.css'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class McNavbar implements AfterViewInit, OnDestroy {\n\n    private readonly forceRecalculateItemsWidth: boolean = false;\n    private readonly resizeDebounceInterval: number = 100;\n    private readonly firstLevelElement: string = MC_NAVBAR_CONTAINER;\n    private readonly secondLevelElements: string[] = [\n        MC_NAVBAR_ITEM,\n        MC_NAVBAR_BRAND,\n        MC_NAVBAR_TITLE\n    ];\n\n    private _totalItemsWidths: number;\n    private _itemsWidths: CachedItemWidth[];\n\n    private get maxAllowedWidth(): number {\n        return this._elementRef.nativeElement.querySelector('nav').getBoundingClientRect().width;\n    }\n\n    private get itemsWidths(): CachedItemWidth[] {\n        if (this._itemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._itemsWidths;\n        }\n\n        this.calculateAndCacheItemsWidth();\n\n        return this._itemsWidths;\n    }\n\n    private get totalItemsWidth(): number {\n        if (this._totalItemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._totalItemsWidths;\n        }\n\n        this.calculateAndCacheTotalItemsWidth();\n\n        return this._totalItemsWidths;\n    }\n\n    private _resizeSubscription: Subscription;\n\n    constructor(\n        private _elementRef: ElementRef\n    ) {\n        const resizeObserver = fromEvent(window, 'resize')\n            .pipe(debounceTime(this.resizeDebounceInterval));\n\n        this._resizeSubscription = resizeObserver.subscribe(this.updateCollapsed.bind(this));\n    }\n\n    updateCollapsed(): void {\n        let collapseDelta = this.totalItemsWidth - this.maxAllowedWidth;\n\n        for (let i = this.itemsWidths.length - 1; i >= 0; i--) {\n            const item = this.itemsWidths[i];\n\n            if (!item.canCollapse) {\n                continue;\n            }\n\n            item.processCollapsed(collapseDelta > 0);\n            collapseDelta -= item.collapsedItemsWidth;\n        }\n    }\n\n    ngAfterViewInit(): void {\n        // Note: this wait is required for loading and rendering fonts for icons;\n        // unfortunately we cannot control font rendering\n        setTimeout(() => this.updateCollapsed(), 0);\n    }\n\n    ngOnDestroy() {\n        this._resizeSubscription.unsubscribe();\n    }\n\n    private calculateAndCacheTotalItemsWidth() {\n        this._totalItemsWidths = this.itemsWidths\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getOuterElementWidth(element: HTMLElement): number {\n        const baseWidth  = element.getBoundingClientRect().width;\n        const marginRight = parseInt(getComputedStyle(element).getPropertyValue('margin-right'));\n        const marginLeft = parseInt(getComputedStyle(element).getPropertyValue('margin-left'));\n\n        return baseWidth + marginRight + marginLeft;\n    }\n\n    private calculateAndCacheItemsWidth() {\n        const allItemsSelector = this.secondLevelElements\n            .map((e: string) => `${this.firstLevelElement}>${e}`);\n        const allItems: HTMLElement[] = Array.from(this._elementRef.nativeElement.querySelectorAll(allItemsSelector));\n\n        this._itemsWidths = allItems\n            .map((el) => new CachedItemWidth(el, this.getOuterElementWidth(el), this.getItemsForCollapse(el)));\n    }\n\n    private getItemsForCollapse(element: HTMLElement): CollapsibleItem[] {\n        const icon = element.querySelector(`[${MC_ICON}],${MC_NAVBAR_LOGO},[${MC_NAVBAR_LOGO}]`);\n\n        if (!icon) {\n            return [];\n        }\n\n        return Array.from(element.querySelectorAll(MC_NAVBAR_TITLE))\n            .map((el) => new CollapsibleItem(<HTMLElement> el, el.getBoundingClientRect().width));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport {\n    McNavbar,\n    McNavbarContainer,\n    McNavbarItem,\n    McNavbarTitle,\n    McNavbarBrand,\n    McNavbarLogo\n} from './navbar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        McIconModule\n    ],\n    exports: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ],\n    declarations: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ]\n})\nexport class McNavbarModule {}\n","import {\n    animate,\n    AnimationTriggerMetadata,\n    state,\n    style,\n    transition,\n    trigger\n} from '@angular/animations';\n\n\nexport const mcPopoverAnimations: {\n    readonly popoverState: AnimationTriggerMetadata;\n} = {\n    /** Animation that transitions a tooltip in and out. */\n    popoverState: trigger('state', [\n        state('initial', style({\n            opacity: 0,\n            transform: 'scale(1, 0.8)'\n        })),\n        transition('* => visible', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1, 1)'\n        }))),\n        transition('* => hidden', animate('100ms linear', style({ opacity: 0 })))\n    ])\n};\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    Output,\n    QueryList,\n    ViewEncapsulation,\n    ChangeDetectorRef,\n    Inject,\n    OnDestroy,\n    OnInit,\n    ViewChild\n} from '@angular/core';\n\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { Subscription } from 'rxjs';\n\nimport { FocusKeyManager, IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { END, ENTER, HOME, PAGE_DOWN, PAGE_UP, SPACE } from '@ptsecurity/cdk/keycodes';\n\nimport {\n    McLine,\n    McLineSetter,\n    CanDisable,\n    mixinDisabled,\n    toBoolean, CanDisableCtor\n} from '@ptsecurity/mosaic/core';\n\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n    exportAs: 'mcListOption',\n    selector: 'mc-list-option',\n    host: {\n        tabindex: '-1',\n\n        class: 'mc-list-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': '_hasFocus',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()',\n        '(click)': '_handleClick()'\n    },\n    templateUrl: 'list-option.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListOption implements AfterContentInit, OnDestroy, OnInit, IFocusableOption {\n    _hasFocus: boolean = false;\n\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    @ViewChild('text') _text: ElementRef;\n\n    // Whether the label should appear before or after the checkbox. Defaults to 'after'\n    @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n    @Input() value: any;\n\n    @Input()\n    get disabled() {\n        return this._disabled || (this.listSelection && this.listSelection.disabled);\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    @Input()\n    get selected(): boolean {\n        return this.listSelection.selectedOptions && this.listSelection.selectedOptions.isSelected(this) || false;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            this.listSelection._reportValueChange();\n        }\n    }\n\n    private _lineSetter: McLineSetter;\n    private _selected = false;\n    private _disabled = false;\n\n    constructor(\n        private _element: ElementRef,\n        private _changeDetector: ChangeDetectorRef,\n        @Inject(forwardRef(() => McListSelection))\n        public listSelection: McListSelection\n    ) {}\n\n    ngOnInit() {\n        if (this._selected) {\n            // List options that are selected at initialization can't be reported properly to the form\n            // control. This is because it takes some time until the selection-list knows about all\n            // available options. Also it can happen that the ControlValueAccessor has an initial value\n            // that should be used instead. Deferring the value change report to the next tick ensures\n            // that the form control value is not being overwritten.\n            const wasSelected = this._selected;\n\n            Promise.resolve().then(() => {\n                if (this._selected || wasSelected) {\n                    this.selected = true;\n                    this._changeDetector.markForCheck();\n                }\n            });\n        }\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    ngOnDestroy(): void {\n        if (this.selected) {\n            // We have to delay this until the next tick in order\n            // to avoid changed after checked errors.\n            Promise.resolve().then(() => this.selected = false);\n        }\n\n        this.listSelection._removeOptionFromList(this);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    focus(): void {\n        this._element.nativeElement.focus();\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    getLabel() {\n        return this._text ? this._text.nativeElement.textContent : '';\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.listSelection.selectedOptions) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.listSelection.selectedOptions.select(this);\n        } else {\n            this.listSelection.selectedOptions.deselect(this);\n        }\n\n        this._changeDetector.markForCheck();\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    _handleClick() {\n        if (this.disabled) { return; }\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    _handleFocus() {\n        if (this.disabled || this._hasFocus) { return; }\n\n        this._hasFocus = true;\n    }\n\n    _handleBlur() {\n        this._hasFocus = false;\n\n        this.listSelection._onTouched();\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n\n\nexport const MC_SELECTION_LIST_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McListSelection),\n    multi: true\n};\n\n// Change event that is being fired whenever the selected state of an option changes. */\nexport class McListSelectionChange {\n    constructor(\n        // Reference to the selection list that emitted the event.\n        public source: McListSelection,\n        // Reference to the option that has been changed.\n        public option: McListOption\n    ) {}\n}\n\n\nexport class McListSelectionBase {}\n\nexport const _McListSelectionMixinBase: CanDisableCtor & typeof McListSelectionBase\n    = mixinDisabled(McListSelectionBase);\n\n@Component({\n    exportAs: 'mcListSelection',\n    selector: 'mc-list-selection',\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'tabIndex'],\n    host: {\n        class: 'mc-list-selection',\n        '[tabIndex]': 'tabIndex',\n        '(focus)': 'focus()',\n        '(blur)': '_onTouched()',\n        '(keydown)': '_onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    providers: [MC_SELECTION_LIST_VALUE_ACCESSOR],\n    preserveWhitespaces: false\n})\nexport class McListSelection extends _McListSelectionMixinBase implements\n    IFocusableOption, CanDisable, AfterContentInit, ControlValueAccessor {\n\n    _keyManager: FocusKeyManager<McListOption>;\n\n    // The option components contained within this selection-list.\n    @ContentChildren(McListOption) options: QueryList<McListOption>;\n\n    tabIndex: number;\n\n    autoSelect: boolean;\n    noUnselect: boolean;\n    multiple: boolean;\n\n    // todo temporary solution\n    withShift: boolean;\n    withCtrl: boolean;\n\n    @Input() horizontal: boolean = false;\n\n    // Emits a change event whenever the selected state of an option changes.\n    @Output() readonly selectionChange: EventEmitter<McListSelectionChange> = new EventEmitter<McListSelectionChange>();\n\n    selectedOptions: SelectionModel<McListOption>;\n\n    // Used for storing the values that were assigned before the options were initialized.\n    private _tempValues: string[] | null;\n\n    private _modelChanges = Subscription.EMPTY;\n\n    constructor(\n        private _element: ElementRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string,\n        @Attribute('multiple') multiple: string\n    ) {\n        super();\n\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.multiple = multiple === null ? true : toBoolean(multiple);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.selectedOptions = new SelectionModel<McListOption>(this.multiple);\n    }\n\n    ngAfterContentInit(): void {\n        this.horizontal = toBoolean(this.horizontal);\n\n        this._keyManager = new FocusKeyManager<McListOption>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation(!this.horizontal)\n            .withHorizontalOrientation(this.horizontal ? 'ltr' : null);\n\n        if (this._tempValues) {\n            this._setOptionsFromValues(this._tempValues);\n            this._tempValues = null;\n        }\n\n        // Sync external changes to the model back to the options.\n        this._modelChanges = this.selectedOptions.onChange!.subscribe((event) => {\n            for (const item of event.added) {\n                item.selected = true;\n            }\n\n            for (const item of event.removed) {\n                item.selected = false;\n            }\n        });\n\n        this.updateScrollSize();\n    }\n\n    ngOnDestroy() {\n        this._modelChanges.unsubscribe();\n    }\n\n    focus() {\n        this._element.nativeElement.focus();\n    }\n\n    selectAll() {\n        this.options.forEach((option) => option.setSelected(true));\n\n        this._reportValueChange();\n    }\n\n    deselectAll() {\n        this.options.forEach((option) => option.setSelected(false));\n\n        this._reportValueChange();\n    }\n\n    updateScrollSize(): void {\n        if (this.horizontal || !this.options.first) { return; }\n\n        this._keyManager.withScrollSize(Math.floor(this._getHeight() / this.options.first._getHeight()));\n    }\n\n    // Sets the focused option of the selection-list.\n    setFocusedOption(option: McListOption): void {\n        this._keyManager.updateActiveItem(option);\n\n        if (this.withShift && this.multiple) {\n            const previousIndex = this._keyManager.previousActiveItemIndex;\n            const activeIndex = this._keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n\n            this.withShift = false;\n        } else if (this.withCtrl) {\n            this.withCtrl = false;\n\n            if (!this._canDeselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) {\n                this.options.forEach((item) => item.setSelected(false));\n                option.setSelected(true);\n            }\n        }\n\n        this._emitChangeEvent(option);\n        this._reportValueChange();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(values: string[]): void {\n        if (this.options) {\n            this._setOptionsFromValues(values || []);\n        } else {\n            this._tempValues = values;\n        }\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this._onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this._onTouched = fn;\n    }\n\n    // Implemented as a part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        if (this.options) {\n            this.options.forEach((option) => option.disabled = isDisabled);\n        }\n    }\n\n    getSelectedOptionValues(): string[] {\n        return this.options.filter((option) => option.selected).map((option) => option.value);\n    }\n\n    // Toggles the selected state of the currently focused option.\n    toggleFocusedOption(): void {\n        const focusedIndex = this._keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n            const focusedOption: McListOption = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this._canDeselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this._emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    _canDeselectLast(listOption: McListOption): boolean {\n        return !(this.noUnselect && this.selectedOptions.selected.length === 1 && listOption.selected);\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    // View to model callback that should be called if the list or its options lost focus.\n    _onTouched: () => void = () => {};\n\n    // Removes an option from the selection list and updates the active item.\n    _removeOptionFromList(option: McListOption) {\n        if (option._hasFocus) {\n            const optionIndex = this._getOptionIndex(option);\n\n            // Check whether the option is the last item\n            if (optionIndex > 0) {\n                this._keyManager.setPreviousItemActive();\n            } else if (optionIndex === 0 && this.options.length > 1) {\n                this._keyManager.setNextItemActive();\n            }\n        }\n    }\n\n    _onKeyDown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n        this.withShift = event.shiftKey;\n        this.withCtrl = event.ctrlKey;\n\n        switch (keyCode) {\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                if (!this.horizontal) { this._keyManager.setPreviousPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                if (!this.horizontal) { this._keyManager.setNextPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    // Reports a value change to the ControlValueAccessor\n    _reportValueChange() {\n        if (this.options) {\n            this._onChange(this.getSelectedOptionValues());\n        }\n    }\n\n    // Emits a change event if the selected state of an option changed.\n    _emitChangeEvent(option: McListOption) {\n        this.selectionChange.emit(new McListSelectionChange(this, option));\n    }\n\n    // Returns the option with the specified value.\n    private _getOptionByValue(value: string): McListOption | undefined {\n        return this.options.find((option) => option.value === value);\n    }\n\n    // Sets the selected options based on the specified values.\n    private _setOptionsFromValues(values: string[]) {\n        this.options.forEach((option) => option.setSelected(false));\n\n        values\n            .map((value) => this._getOptionByValue(value))\n            .filter(Boolean)\n            .forEach((option) => option!.setSelected(true));\n    }\n\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private _isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    // Returns the index of the specified list option.\n    private _getOptionIndex(option: McListOption): number {\n        return this.options.toArray().indexOf(option);\n    }\n\n    // View to model callback that should be called whenever the selected options change.\n    private _onChange: (value: any) => void = (_: any) => {};\n}\n","// todo пока не делаем, перенесено из материала, но у нас в доках таких простых списков нет.\nimport {\n    AfterContentInit, ChangeDetectionStrategy, Component, ContentChildren, Directive, ElementRef, QueryList,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { McLine, McLineSetter } from '@ptsecurity/mosaic/core';\n\n\nexport class McListBase {}\n\n@Component({\n    selector: 'mc-list',\n    host: { class: 'mc-list' },\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McList extends McListBase {}\n\n\n/**\n * Directive whose purpose is to add the mc- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n    selector: '[mc-subheader], [mcSubheader]',\n    host: { class: 'mc-subheader' }\n})\nexport class McListSubheaderCssStyler {}\n\n\n// Boilerplate for applying mixins to McListItem.\nexport class McListItemBase {}\n\n@Component({\n    selector: 'mc-list-item, a[mc-list-item]',\n    host: {\n        class: 'mc-list-item',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()'\n    },\n    templateUrl: './list-item.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListItem extends McListItemBase implements AfterContentInit {\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    private _lineSetter: McLineSetter;\n\n    constructor(private _element: ElementRef) {\n        super();\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    _handleFocus() {\n        this._element.nativeElement.classList.add('mc-focused');\n    }\n\n    _handleBlur() {\n        this._element.nativeElement.classList.remove('mc-focused');\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLineModule } from '@ptsecurity/mosaic/core';\n\nimport { McListSelection, McListOption } from './list-selection.component';\nimport { McList, McListItem, McListSubheaderCssStyler } from './list.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        McLineModule\n    ],\n    exports: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ],\n    declarations: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ]\n})\nexport class McListModule {}\n","import {\n    Input,\n    Attribute,\n    Component,\n    ElementRef,\n    OnDestroy,\n    ViewEncapsulation,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef\n} from '@angular/core';\n\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport {\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\nexport class McLinkBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\nexport const _McLinkBase: HasTabIndexCtor & CanDisableCtor & typeof McLinkBase\n    = mixinTabIndex(mixinDisabled(McLinkBase));\n\n@Component({\n    selector: 'a.mc-link',\n    template: `<ng-content></ng-content>`,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcLink',\n    styleUrls: ['./link.css'],\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': 'tabIndex'\n    }\n})\n\nexport class McLink extends _McLinkBase implements OnDestroy, HasTabIndex, CanDisable {\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    private _disabled = false;\n\n    constructor(\n        @Attribute('tabindex') tabIndex: string,\n        public elementRef: ElementRef,\n        private _focusMonitor: FocusMonitor,\n        private _changeDetector: ChangeDetectorRef) {\n\n        super(elementRef);\n        this._focusMonitor.monitor(elementRef.nativeElement, true);\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this._getHostElement().focus();\n    }\n\n    _getHostElement() {\n        return this.elementRef.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLink } from './link.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule\n    ],\n    declarations: [McLink],\n    exports: [McLink]\n})\nexport class McLinkModule {}\n","import { Injectable, Optional, SkipSelf } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\n\nimport { McModalRef } from './modal-ref.class';\n\n\ninterface IRegisteredMeta {\n    modalRef: McModalRef;\n    afterOpenSubscription: Subscription;\n    afterCloseSubscription: Subscription;\n}\n\n@Injectable()\nexport class McModalControlService {\n\n    // Track singleton afterAllClose through over the injection tree\n    get afterAllClose(): Subject<void> {\n        return this.parentService ? this.parentService.afterAllClose : this.rootAfterAllClose!;\n    }\n\n    // Track singleton openModals array through over the injection tree\n    get openModals(): McModalRef[] {\n        return this.parentService ? this.parentService.openModals : this.rootOpenModals!;\n    }\n\n    // @ts-ignore\n    private rootOpenModals: McModalRef[] = this.parentService ? null : [];\n    // @ts-ignore\n    private rootAfterAllClose: Subject<void> = this.parentService ? null : new Subject<void>();\n    // @ts-ignore\n    private rootRegisteredMetaMap: Map<McModalRef, IRegisteredMeta> = this.parentService ? null : new Map();\n\n    // Registered modal for later usage\n    private get registeredMetaMap(): Map<McModalRef, IRegisteredMeta> {\n        return this.parentService ? this.parentService.registeredMetaMap : this.rootRegisteredMetaMap;\n    }\n\n    constructor(\n        @Optional() @SkipSelf() private parentService: McModalControlService) {\n    }\n\n    // Register a modal to listen its open/close\n    registerModal(modalRef: McModalRef): void {\n        if (!this.hasRegistered(modalRef)) {\n            const afterOpenSubscription = modalRef.afterOpen.subscribe(() => this.openModals.push(modalRef));\n            const afterCloseSubscription = modalRef.afterClose.subscribe(() => this.removeOpenModal(modalRef));\n\n            this.registeredMetaMap.set(modalRef, {modalRef, afterOpenSubscription, afterCloseSubscription});\n        }\n    }\n\n    hasRegistered(modalRef: McModalRef): boolean {\n        return this.registeredMetaMap.has(modalRef);\n    }\n\n    // Close all registered opened modals\n    closeAll(): void {\n        let i = this.openModals.length;\n\n        while (i--) {\n            this.openModals[i].close();\n        }\n    }\n\n    private removeOpenModal(modalRef: McModalRef): void {\n        const index = this.openModals.indexOf(modalRef);\n\n        if (index > -1) {\n            this.openModals.splice(index, 1);\n\n            if (!this.openModals.length) {\n                this.afterAllClose.next();\n            }\n        }\n    }\n}\n","import { Observable } from 'rxjs';\n\nimport { McModalComponent } from './modal.component';\n\n\n/**\n * API class that public to users to handle the modal instance.\n * McModalRef is aim to avoid accessing to the modal instance directly by users.\n */\nexport abstract class McModalRef<T = any, R = any> {\n    abstract afterOpen: Observable<void>;\n    abstract afterClose: Observable<R>;\n\n    abstract open(): void;\n\n    abstract close(result?: R): void;\n\n    abstract destroy(result?: R): void;\n\n    /**\n     * Trigger the mcOnOk/mcOnCancel by manual\n     */\n    abstract triggerOk(): void;\n\n    abstract triggerCancel(): void;\n\n    // /**\n    //  * Return the ComponentRef of mcContent when specify mcContent as a Component\n    //  * Note: this method may return undefined if the Component has not ready yet.\n    //    (it only available after Modal's ngOnInit)\n    //  */\n    // abstract getContentComponentRef(): ComponentRef<{}>;\n\n    /**\n     * Return the component instance of mcContent when specify mcContent as a Component\n     * Note: this method may return undefined if the Component has not ready yet.\n     * (it only available after Modal's ngOnInit)\n     */\n    abstract getContentComponent(): T;\n\n    /**\n     * Get the dom element of this Modal\n     */\n    abstract getElement(): HTMLElement;\n\n    /**\n     * Get the instance of the Modal itself\n     */\n    abstract getInstance(): McModalComponent;\n}\n","export interface IClickPosition {\n    x: number;\n    y: number;\n}\n\nexport class ModalUtil {\n    private lastPosition: IClickPosition;\n\n    constructor(private document: Document) {\n        this.lastPosition = {x: -1, y: -1};\n        this.listenDocumentClick();\n    }\n\n    getLastClickPosition(): IClickPosition {\n        return this.lastPosition;\n    }\n\n    listenDocumentClick(): void {\n        this.document.addEventListener('click', (event: MouseEvent) => {\n            this.lastPosition = {x: event.clientX, y: event.clientY};\n        });\n    }\n}\n\nexport default new ModalUtil(document);\n","// tslint:disable:no-empty\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output\n} from '@angular/core';\nimport {\n    AbstractControl,\n    ControlValueAccessor,\n    NG_VALIDATORS,\n    NG_VALUE_ACCESSOR,\n    ValidationErrors,\n    Validator,\n    ValidatorFn,\n    Validators\n} from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport { DOWN_ARROW } from '@ptsecurity/cdk/keycodes';\nimport { ThemePalette } from '@ptsecurity/mosaic/core';\nimport { McFormField } from '@ptsecurity/mosaic/form-field';\nimport { MC_INPUT_VALUE_ACCESSOR } from '@ptsecurity/mosaic/input';\nimport { Subscription } from 'rxjs';\n\nimport { McDatepicker } from './datepicker';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\n/** @docs-private */\nexport const MC_DATEPICKER_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McDatepickerInput),\n    multi: true\n};\n\n/** @docs-private */\nexport const MC_DATEPICKER_VALIDATORS: any = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McDatepickerInput),\n    multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use McDatepickerInputEvent instead.\n */\nexport class McDatepickerInputEvent<D> {\n    /** The new value for the target datepicker input. */\n    value: D | null;\n\n    constructor(\n        /** Reference to the datepicker input component that emitted the event. */\n        public target: McDatepickerInput<D>,\n        /** Reference to the native input element associated with the datepicker input. */\n        public targetElement: HTMLElement) {\n        this.value = this.target.value;\n    }\n}\n\n\n/** Directive used to connect an input to a McDatepicker. */\n@Directive({\n    selector: 'input[mcDatepicker]',\n    providers: [\n        MC_DATEPICKER_VALUE_ACCESSOR,\n        MC_DATEPICKER_VALIDATORS,\n        { provide: MC_INPUT_VALUE_ACCESSOR, useExisting: McDatepickerInput }\n    ],\n    host: {\n        '[attr.aria-haspopup]': 'true',\n        '[attr.aria-owns]': '(datepicker?.opened && datepicker.id) || null',\n        '[attr.min]': 'min ? dateAdapter.toIso8601(min) : null',\n        '[attr.max]': 'max ? dateAdapter.toIso8601(max) : null',\n        '[disabled]': 'disabled',\n        '(input)': 'onInput($event.target.value)',\n        '(change)': 'onChange()',\n        '(blur)': 'onBlur()',\n        '(keydown)': 'onKeydown($event)'\n    },\n    exportAs: 'mcDatepickerInput'\n})\nexport class McDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n    /** The datepicker that this input is associated with. */\n    @Input()\n    set mcDatepicker(value: McDatepicker<D>) {\n        if (!value) {\n            return;\n        }\n\n        this.datepicker = value;\n        this.datepicker.registerInput(this);\n        this.datepickerSubscription.unsubscribe();\n\n        this.datepickerSubscription = this.datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this.cvaOnChange(selected);\n            this.onTouched();\n            this.dateInput.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));\n            this.dateChange.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));\n        });\n    }\n\n    /** Function that can be used to filter out dates within the datepicker. */\n    @Input()\n    set mcDatepickerFilter(value: (date: D | null) => boolean) {\n        this.dateFilter = value;\n        this.validatorOnChange();\n    }\n\n    /** The value of the input. */\n    @Input()\n    get value(): D | null {\n        return this._value;\n    }\n\n    set value(value: D | null) {\n        // tslint:disable-next-line:no-parameter-reassignment\n        value = this.dateAdapter.deserialize(value);\n        this.lastValueValid = !value || this.dateAdapter.isValid(value);\n        // tslint:disable-next-line:no-parameter-reassignment\n        value = this.getValidDateOrNull(value);\n        const oldDate = this.value;\n        this._value = value;\n        this.formatValue(value);\n\n        if (!this.dateAdapter.sameDate(oldDate, value)) {\n            this.valueChange.emit(value);\n        }\n    }\n\n    /** The minimum valid date. */\n    @Input()\n    get min(): D | null {\n        return this._min;\n    }\n\n    set min(value: D | null) {\n        this._min = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.validatorOnChange();\n    }\n\n    /** The maximum valid date. */\n    @Input()\n    get max(): D | null {\n        return this._max;\n    }\n\n    set max(value: D | null) {\n        this._max = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.validatorOnChange();\n    }\n\n    /** Whether the datepicker-input is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return !!this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        const newValue = coerceBooleanProperty(value);\n        const element = this.elementRef.nativeElement;\n\n        if (this._disabled !== newValue) {\n            this._disabled = newValue;\n            this.disabledChange.emit(newValue);\n        }\n\n        // We need to null check the `blur` method, because it's undefined during SSR.\n        if (newValue && element.blur) {\n            // Normally, native input elements automatically blur if they turn disabled. This behavior\n            // is problematic, because it would mean that it triggers another change detection cycle,\n            // which then causes a changed after checked error if the input element was focused before.\n            element.blur();\n        }\n    }\n\n    datepicker: McDatepicker<D>;\n    dateFilter: (date: D | null) => boolean;\n\n    /** Emits when a `change` event is fired on this `<input>`. */\n    @Output() readonly dateChange: EventEmitter<McDatepickerInputEvent<D>> =\n        new EventEmitter<McDatepickerInputEvent<D>>();\n\n    /** Emits when an `input` event is fired on this `<input>`. */\n    @Output() readonly dateInput: EventEmitter<McDatepickerInputEvent<D>> =\n        new EventEmitter<McDatepickerInputEvent<D>>();\n\n    /** Emits when the value changes (either due to user input or programmatic change). */\n    valueChange = new EventEmitter<D | null>();\n\n    /** Emits when the disabled state has changed */\n    disabledChange = new EventEmitter<boolean>();\n    private _value: D | null;\n    private _min: D | null;\n    private _max: D | null;\n    private _disabled: boolean;\n\n    private datepickerSubscription = Subscription.EMPTY;\n\n    private localeSubscription = Subscription.EMPTY;\n\n    /** Whether the last value set on the input was valid. */\n    private lastValueValid = false;\n\n    constructor(\n        public elementRef: ElementRef<HTMLInputElement>,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n        @Optional() private formField: McFormField\n    ) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        // Update the displayed date when the locale changes.\n        this.localeSubscription = dateAdapter.localeChanges.subscribe(() => {\n            this.value = this.value;\n        });\n    }\n\n    onTouched = () => {\n    }\n\n    ngOnDestroy() {\n        this.datepickerSubscription.unsubscribe();\n        this.localeSubscription.unsubscribe();\n        this.valueChange.complete();\n        this.disabledChange.complete();\n    }\n\n    /** @docs-private */\n    registerOnValidatorChange(fn: () => void): void {\n        this.validatorOnChange = fn;\n    }\n\n    /** @docs-private */\n    validate(c: AbstractControl): ValidationErrors | null {\n        return this.validator ? this.validator(c) : null;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: D): void {\n        this.value = value;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this.cvaOnChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    onKeydown(event: KeyboardEvent) {\n        // tslint:disable-next-line:deprecation\n        const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n        if (this.datepicker && isAltDownArrow && !this.elementRef.nativeElement.readOnly) {\n            this.datepicker.open();\n            event.preventDefault();\n        }\n    }\n\n    onInput(value: string) {\n        let date = this.dateAdapter.parse(value, this.dateFormats.parse.dateInput);\n        this.lastValueValid = !date || this.dateAdapter.isValid(date);\n        date = this.getValidDateOrNull(date);\n\n        if (!this.dateAdapter.sameDate(date, this._value)) {\n            this._value = date;\n            this.cvaOnChange(date);\n            this.valueChange.emit(date);\n            this.dateInput.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));\n        }\n    }\n\n    onChange() {\n        this.dateChange.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));\n    }\n\n    /** Returns the palette used by the input's form field, if any. */\n    getThemePalette(): ThemePalette | undefined {\n        return this.formField ? this.formField.color : undefined;\n    }\n\n    /** Handles blur events on the input. */\n    onBlur() {\n        // Reformat the input only if we have a valid value.\n        if (this.value) {\n            this.formatValue(this.value);\n        }\n\n        this.onTouched();\n    }\n\n    private cvaOnChange: (value: any) => void = () => {\n    }\n\n    private validatorOnChange = () => {\n    }\n\n    /** The form control validator for whether the input parses. */\n    private parseValidator: ValidatorFn = (): ValidationErrors | null => {\n        return this.lastValueValid ?\n            null : { mcDatepickerParse: { text: this.elementRef.nativeElement.value } };\n    }\n\n    /** The form control validator for the min date. */\n    private minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n        const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));\n\n        return (!this.min || !controlValue ||\n            this.dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n            null : { mcDatepickerMin: { min: this.min, actual: controlValue } };\n    }\n\n    /** The form control validator for the max date. */\n    private maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n        const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));\n\n        return (!this.max || !controlValue ||\n            this.dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n            null : { mcDatepickerMax: { max: this.max, actual: controlValue } };\n    }\n\n    /** The form control validator for the date filter. */\n    private filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n        const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));\n\n        return !this.dateFilter || !controlValue || this.dateFilter(controlValue) ?\n            null : { mcDatepickerFilter: true };\n    }\n\n    /** Formats a value and sets it on the input element. */\n    private formatValue(value: D | null) {\n        this.elementRef.nativeElement.value =\n            value ? this.dateAdapter.format(value, this.dateFormats.display.dateInput) : '';\n    }\n\n    /** The combined form control validator for this input. */\n        // tslint:disable:member-ordering\n    private validator: ValidatorFn | null =\n        Validators.compose([\n            this.parseValidator,\n            this.minValidator,\n            this.maxValidator,\n            this.filterValidator\n        ]);\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    Directive,\n    Input,\n    OnChanges,\n    OnDestroy,\n    SimpleChanges,\n    ViewEncapsulation,\n    ViewChild\n} from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { McButton } from '@ptsecurity/mosaic/button';\nimport { merge, of as observableOf, Subscription } from 'rxjs';\n\nimport { McDatepicker } from './datepicker';\nimport { McDatepickerIntl } from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `mcDatepickerToggle`. */\n@Directive({\n    selector: '[mcDatepickerToggleIcon]'\n})\nexport class McDatepickerToggleIcon {\n}\n\n\n@Component({\n    selector: 'mc-datepicker-toggle',\n    templateUrl: 'datepicker-toggle.html',\n    styleUrls: ['datepicker-toggle.css'],\n    host: {\n        class: 'mc-datepicker-toggle',\n        // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n        // consumer may have provided, while still being able to receive focus.\n        '[attr.tabindex]': '-1',\n        '[class.mc-datepicker-toggle_active]': 'datepicker && datepicker.opened',\n        '[class.mc-warn]': 'datepicker && datepicker.color === \"error\"',\n        '(focus)': 'button.focus()'\n    },\n    exportAs: 'mcDatepickerToggle',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n\n    /** Whether the toggle button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    /** Datepicker instance that the button will toggle. */\n    @Input('for') datepicker: McDatepicker<D>;\n\n    /** Tabindex for the toggle. */\n    @Input() tabIndex: number | null;\n\n    /** Custom icon set by the consumer. */\n    @ContentChild(McDatepickerToggleIcon) customIcon: McDatepickerToggleIcon;\n\n    /** Underlying button element. */\n    @ViewChild('button') button: McButton;\n    private stateChanges = Subscription.EMPTY;\n\n    private _disabled: boolean;\n\n    constructor(\n        public intl: McDatepickerIntl,\n        private changeDetectorRef: ChangeDetectorRef,\n        @Attribute('tabindex') defaultTabIndex: string\n    ) {\n        const parsedTabIndex = Number(defaultTabIndex);\n        this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.datepicker) {\n            this.watchStateChanges();\n        }\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.unsubscribe();\n    }\n\n    ngAfterContentInit() {\n        this.watchStateChanges();\n    }\n\n    open(event: Event): void {\n        if (this.datepicker && !this.disabled) {\n            this.datepicker.open();\n            event.stopPropagation();\n        }\n    }\n\n    private watchStateChanges() {\n        const datepickerDisabled = this.datepicker ? this.datepicker.disabledChange : observableOf();\n        const inputDisabled = this.datepicker && this.datepicker.datepickerInput ?\n            this.datepicker.datepickerInput.disabledChange : observableOf();\n        const datepickerToggled = this.datepicker ?\n            merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n            observableOf();\n\n        this.stateChanges.unsubscribe();\n        this.stateChanges = merge(\n            this.intl.changes,\n            datepickerDisabled,\n            inputDisabled,\n            datepickerToggled\n        ).subscribe(() => this.changeDetectorRef.markForCheck());\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { PortalModule } from '@ptsecurity/cdk/portal';\nimport { McButtonModule } from '@ptsecurity/mosaic/button';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McCalendar, McCalendarHeader } from './calendar';\nimport { McCalendarBody } from './calendar-body';\nimport {\n    McDatepicker,\n    McDatepickerContent,\n    MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './datepicker';\nimport { McDatepickerInput } from './datepicker-input';\nimport { McDatepickerIntl } from './datepicker-intl';\nimport { McDatepickerToggle, McDatepickerToggleIcon } from './datepicker-toggle';\nimport { McMonthView } from './month-view';\nimport { McMultiYearView } from './multi-year-view';\nimport { McYearView } from './year-view';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        McButtonModule,\n        OverlayModule,\n        A11yModule,\n        PortalModule,\n        McIconModule\n    ],\n    exports: [\n        McCalendar,\n        McCalendarBody,\n        McDatepicker,\n        McDatepickerContent,\n        McDatepickerInput,\n        McDatepickerToggle,\n        McDatepickerToggleIcon,\n        McMonthView,\n        McYearView,\n        McMultiYearView,\n        McCalendarHeader,\n        McButtonModule\n    ],\n    declarations: [\n        McCalendar,\n        McCalendarBody,\n        McDatepicker,\n        McDatepickerContent,\n        McDatepickerInput,\n        McDatepickerToggle,\n        McDatepickerToggleIcon,\n        McMonthView,\n        McYearView,\n        McMultiYearView,\n        McCalendarHeader\n    ],\n    providers: [\n        McDatepickerIntl,\n        MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER\n    ],\n    entryComponents: [\n        McDatepickerContent,\n        McCalendarHeader\n    ]\n})\nexport class McDatepickerModule {\n}\n","import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\n\n\n@Component({\n    selector: 'mc-divider',\n    host: {\n        class: 'mc-divider',\n        role: 'separator',\n        '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n        '[class.mc-divider-vertical]': 'vertical',\n        '[class.mc-divider-inset]': 'inset'\n    },\n    template: '',\n    styleUrls: ['divider.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false\n})\nexport class McDivider {\n    // Whether the divider is vertically aligned.\n    @Input()\n    get vertical(): boolean {\n        return this._vertical;\n    }\n\n    set vertical(value: boolean) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n\n    private _vertical: boolean = false;\n\n    // Whether the divider is an inset divider.\n    @Input()\n    get inset(): boolean {\n        return this._inset;\n    }\n\n    set inset(value: boolean) {\n        this._inset = coerceBooleanProperty(value);\n    }\n\n    private _inset: boolean = false;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McDivider } from './divider.component';\n\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [McDivider],\n    declarations: [McDivider]\n})\nexport class McDividerModule {\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n    Directive,\n    TemplateRef,\n    ComponentFactoryResolver,\n    ApplicationRef,\n    Injector,\n    ViewContainerRef,\n    Inject,\n    OnDestroy\n} from '@angular/core';\nimport { TemplatePortal, DomPortalOutlet } from '@ptsecurity/cdk/portal';\nimport { Subject } from 'rxjs';\n\n\n/**\n * Dropdown content that will be rendered lazily once the dropdown is opened.\n */\n@Directive({\n    selector: 'ng-template[mcDropdownContent]'\n})\nexport class McDropdownContent implements OnDestroy {\n\n    /** Emits when the dropdown content has been attached. */\n    _attached = new Subject<void>();\n    private _portal: TemplatePortal<any>;\n    private _outlet: DomPortalOutlet;\n\n    constructor(\n        private _template: TemplateRef<any>,\n        private _componentFactoryResolver: ComponentFactoryResolver,\n        private _appRef: ApplicationRef,\n        private _injector: Injector,\n        private _viewContainerRef: ViewContainerRef,\n        @Inject(DOCUMENT) private _document: any) {}\n\n    /**\n     * Attaches the content with a particular context.\n     * @docs-private\n     */\n    attach(context: any = {}) {\n        if (!this._portal) {\n            this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n        }\n\n        this.detach();\n\n        if (!this._outlet) {\n            this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n                this._componentFactoryResolver, this._appRef, this._injector);\n        }\n\n        const element: HTMLElement = this._template.elementRef.nativeElement;\n\n        // Because we support opening the same dropdown from different triggers (which in turn have their\n        // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n        // risk it staying attached to a pane that's no longer in the DOM.\n        element.parentNode!.insertBefore(this._outlet.outletElement, element);\n        this._portal.attach(this._outlet, context);\n        this._attached.next();\n    }\n\n    /**\n     * Detaches the content.\n     * @docs-private\n     */\n    detach() {\n        if (this._portal.isAttached) {\n            this._portal.detach();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._outlet) {\n            this._outlet.dispose();\n        }\n    }\n}\n","import { EventEmitter, TemplateRef, InjectionToken } from '@angular/core';\nimport { FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { Direction } from '@ptsecurity/cdk/bidi';\n\nimport { McDropdownContent } from './dropdown-content';\nimport { DropdownPositionX, DropdownPositionY } from './dropdown-positions';\n\n\n/**\n * Injection token used to provide the parent dropdown to dropdown-specific components.\n * @docs-private\n */\nexport const MC_DROPDOWN_PANEL = new InjectionToken<McDropdownPanel>('MC_DROPDOWN_PANEL');\n\n/**\n * Interface for a custom dropdown panel that can be used with `mcDropdownTriggerFor`.\n * @docs-private\n */\n// tslint:disable-next-line:interface-name\nexport interface McDropdownPanel<T = any> {\n    xPosition: DropdownPositionX;\n    yPosition: DropdownPositionY;\n    overlapTriggerX: boolean;\n    overlapTriggerY: boolean;\n    templateRef: TemplateRef<any>;\n    closed: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n    parent?: McDropdownPanel | undefined;\n    direction?: Direction;\n    lazyContent?: McDropdownContent;\n    backdropClass?: string;\n    hasBackdrop?: boolean;\n    focusFirstItem(origin?: FocusOrigin): void;\n    resetActiveItem(): void;\n    setPositionClasses?(x: DropdownPositionX, y: DropdownPositionY): void;\n    addItem?(item: T): void;\n    removeItem?(item: T): void;\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    OnDestroy,\n    ViewEncapsulation,\n    Inject,\n    Optional,\n    Input,\n    ViewChild\n} from '@angular/core';\nimport { IFocusableOption, FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { CanDisable, CanDisableCtor, mixinDisabled } from '@ptsecurity/mosaic/core';\nimport { Subject } from 'rxjs';\n\nimport { MC_DROPDOWN_PANEL, McDropdownPanel } from './dropdown-panel';\n\n\n// Boilerplate for applying mixins to McDropdownItem.\n/** @docs-private */\nexport class McDropdownItemBase {}\nexport const _McDropdownItemMixinBase: CanDisableCtor & typeof McDropdownItemBase =\n    mixinDisabled(McDropdownItemBase);\n\n/**\n * This directive is intended to be used inside an mc-dropdown tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n    selector: 'mc-dropdown-item, [mc-dropdown-item]',\n    exportAs: 'mcDropdownItem',\n    inputs: ['disabled'],\n    host: {\n        '[attr.role]': 'role',\n        class: 'mc-dropdown__item',\n        '[class.mc-dropdown__item_highlighted]': '_highlighted',\n        '[attr.tabindex]': '_getTabIndex()',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': '_checkDisabled($event)',\n        '(mouseenter)': '_handleMouseEnter()'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    template: `\n        <div #content>\n            <ng-content></ng-content>\n        </div>\n        <i *ngIf=\"_triggersNestedDropdown\" mc-icon=\"mc-angle-right-M_16\" class=\"mc-dropdown__trigger\"></i>\n    `\n})\nexport class McDropdownItem extends _McDropdownItemMixinBase\n    implements IFocusableOption, CanDisable, OnDestroy {\n\n    /** ARIA role for the dropdown item. */\n    @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n    @ViewChild('content') content;\n\n    private _document: Document;\n\n    /** Stream that emits when the dropdown item is hovered. */\n    readonly _hovered: Subject<McDropdownItem> = new Subject<McDropdownItem>();\n\n    /** Whether the dropdown item is highlighted. */\n    _highlighted: boolean = false;\n\n    /** Whether the dropdown item acts as a trigger for a nested dropdown. */\n    _triggersNestedDropdown: boolean = false;\n\n    constructor(\n        private _elementRef: ElementRef<HTMLElement>,\n        @Inject(DOCUMENT) document: any,\n        private _focusMonitor: FocusMonitor,\n        @Inject(MC_DROPDOWN_PANEL) @Optional() private _parentDropdownPanel?: McDropdownPanel<McDropdownItem>) {\n        super();\n\n        if (_focusMonitor) {\n            // Start monitoring the element so it gets the appropriate focused classes. We want\n            // to show the focus style for dropdown items only when the focus was not caused by a\n            // mouse or touch interaction.\n            _focusMonitor.monitor(this._elementRef.nativeElement, false);\n        }\n\n        if (_parentDropdownPanel && _parentDropdownPanel.addItem) {\n            _parentDropdownPanel.addItem(this);\n        }\n\n        this._document = document;\n    }\n\n    /** Focuses the dropdown item. */\n    focus(origin: FocusOrigin = 'program'): void {\n        if (this._focusMonitor) {\n            this._focusMonitor.focusVia(this._getHostElement(), origin);\n        } else {\n            this._getHostElement().focus();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._focusMonitor) {\n            this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n\n        if (this._parentDropdownPanel && this._parentDropdownPanel.removeItem) {\n            this._parentDropdownPanel.removeItem(this);\n        }\n\n        this._hovered.complete();\n    }\n\n    /** Used to set the `tabindex`. */\n    _getTabIndex(): string {\n        return this.disabled ? '-1' : '0';\n    }\n\n    /** Returns the host DOM element. */\n    _getHostElement(): HTMLElement {\n        return this._elementRef.nativeElement;\n    }\n\n    /** Prevents the default element actions if it is disabled. */\n    _checkDisabled(event: Event): void {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    /** Emits to the hover stream. */\n    _handleMouseEnter() {\n        this._hovered.next(this);\n    }\n\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel(): string {\n        const element: HTMLElement = this.content.nativeElement;\n        // tslint:disable-next-line:no-magic-numbers\n        const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n        let output = '';\n\n        if (element.childNodes) {\n            const length = element.childNodes.length;\n\n            // Go through all the top-level text nodes and extract their text.\n            // We skip anything that's not a text node to prevent the text from\n            // being thrown off by something like an icon.\n            for (let i = 0; i < length; i++) {\n                if (element.childNodes[i].nodeType === textNodeType) {\n                    output += element.childNodes[i].textContent;\n                }\n            }\n        }\n\n        return output.trim();\n    }\n}\n","import {\n    trigger,\n    state,\n    style,\n    animate,\n    transition,\n    query,\n    group,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n\n/**\n * Animations used by the mc-dropdown component.\n * @docs-private\n */\nexport const mcDropdownAnimations: {\n    readonly transformDropdown: AnimationTriggerMetadata;\n    readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n    /**\n     * This animation controls the dropdown panel's entry and exit from the page.\n     *\n     * When the dropdown panel is added to the DOM, it scales in and fades in its border.\n     *\n     * When the dropdown panel is removed from the DOM, it simply fades out after a brief\n     * delay to display the ripple.\n     */\n    transformDropdown: trigger('transformDropdown', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(0.8)'\n        })),\n        transition('void => enter', group([\n            query('.mc-dropdown__content', animate('50ms linear', style({opacity: 1}))),\n            animate('50ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'}))\n        ])),\n        transition('* => void', animate('50ms 25ms linear', style({opacity: 0})))\n    ]),\n\n\n    /**\n     * This animation fades in the background color and content of the dropdown panel\n     * after its containing element is scaled in.\n     */\n    fadeInItems: trigger('fadeInItems', [\n        // now. Remove next time we do breaking changes.\n        state('showing', style({opacity: 1})),\n        transition('void => *', [\n            style({opacity: 0}),\n            animate('200ms 60ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n\nexport const fadeInItems = mcDropdownAnimations.fadeInItems;\n\nexport const transformDropdown = mcDropdownAnimations.transformDropdown;\n","import { AnimationEvent } from '@angular/animations';\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChild,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    Output,\n    TemplateRef,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    OnInit\n} from '@angular/core';\nimport { FocusKeyManager, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { Direction } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW } from '@ptsecurity/cdk/keycodes';\nimport { merge, Observable, Subject, Subscription } from 'rxjs';\nimport { startWith, switchMap, take } from 'rxjs/operators';\n\nimport { mcDropdownAnimations } from './dropdown-animations';\nimport { McDropdownContent } from './dropdown-content';\nimport { throwMcDropdownInvalidPositionX, throwMcDropdownInvalidPositionY } from './dropdown-errors';\nimport { McDropdownItem } from './dropdown-item';\nimport { MC_DROPDOWN_PANEL, McDropdownPanel } from './dropdown-panel';\nimport { DropdownPositionX, DropdownPositionY } from './dropdown-positions';\n\n\n/** Default `mc-dropdown` options that can be overridden. */\n// tslint:disable-next-line:interface-name\nexport interface McDropdownDefaultOptions {\n    /** The x-axis position of the dropdown. */\n    xPosition: DropdownPositionX;\n\n    /** The y-axis position of the dropdown. */\n    yPosition: DropdownPositionY;\n\n    /** Whether the dropdown should overlap the dropdown trigger horizontally. */\n    overlapTriggerX: boolean;\n\n    /** Whether the dropdown should overlap the dropdown trigger vertically. */\n    overlapTriggerY: boolean;\n\n    /** Class to be applied to the dropdown's backdrop. */\n    backdropClass: string;\n\n    /** Whether the dropdown has a backdrop. */\n    hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mc-dropdown`. */\nexport const MC_DROPDOWN_DEFAULT_OPTIONS =\n    new InjectionToken<McDropdownDefaultOptions>('mc-dropdown-default-options', {\n        providedIn: 'root',\n        factory: MC_DROPDOWN_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MC_DROPDOWN_DEFAULT_OPTIONS_FACTORY(): McDropdownDefaultOptions {\n    return {\n        overlapTriggerX: true,\n        overlapTriggerY: false,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop'\n    };\n}\n\n@Component({\n    selector: 'mc-dropdown',\n    templateUrl: 'dropdown.html',\n    styleUrls: ['dropdown.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcDropdown',\n    animations: [\n        mcDropdownAnimations.transformDropdown,\n        mcDropdownAnimations.fadeInItems\n    ],\n    providers: [\n        { provide: MC_DROPDOWN_PANEL, useExisting: McDropdown }\n    ]\n})\nexport class McDropdown implements AfterContentInit, McDropdownPanel<McDropdownItem>, OnInit, OnDestroy {\n\n    /** Position of the dropdown in the X axis. */\n    @Input()\n    get xPosition(): DropdownPositionX {\n        return this._xPosition;\n    }\n\n    set xPosition(value: DropdownPositionX) {\n        if (value !== 'before' && value !== 'after') {\n            throwMcDropdownInvalidPositionX();\n        }\n        this._xPosition = value;\n        this.setPositionClasses();\n    }\n\n    /** Position of the dropdown in the Y axis. */\n    @Input()\n    get yPosition(): DropdownPositionY {\n        return this._yPosition;\n    }\n\n    set yPosition(value: DropdownPositionY) {\n        if (value !== 'above' && value !== 'below') {\n            throwMcDropdownInvalidPositionY();\n        }\n        this._yPosition = value;\n        this.setPositionClasses();\n    }\n\n    /** Whether the dropdown should overlap its trigger vertically. */\n    @Input()\n    get overlapTriggerY(): boolean {\n        return this._overlapTriggerY;\n    }\n\n    set overlapTriggerY(value: boolean) {\n        this._overlapTriggerY = coerceBooleanProperty(value);\n    }\n\n    /** Whether the dropdown should overlap its trigger horizontally. */\n    @Input()\n    get overlapTriggerX(): boolean {\n        return this._overlapTriggerX;\n    }\n\n    set overlapTriggerX(value: boolean) {\n        this._overlapTriggerX = coerceBooleanProperty(value);\n    }\n\n    /** Whether the dropdown has a backdrop. */\n    @Input()\n    get hasBackdrop(): boolean | undefined {\n        return this._hasBackdrop;\n    }\n\n    set hasBackdrop(value: boolean | undefined) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n\n    /**\n     * This method takes classes set on the host mc-dropdown element and applies them on the\n     * dropdown template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing dropdown from outside the component.\n     * @param classes list of class names\n     */\n    @Input('class')\n    set panelClass(classes: string) {\n        const previousPanelClass = this._previousPanelClass;\n\n        if (previousPanelClass && previousPanelClass.length) {\n            previousPanelClass.split(' ').forEach((className: string) => {\n                this._classList[className] = false;\n            });\n        }\n\n        this._previousPanelClass = classes;\n\n        if (classes && classes.length) {\n            classes.split(' ').forEach((className: string) => {\n                this._classList[className] = true;\n            });\n\n            this._elementRef.nativeElement.className = '';\n        }\n    }\n\n    /** Config object to be passed into the dropdown's ngClass */\n    _classList: { [key: string]: boolean } = {};\n\n    /** Current state of the panel animation. */\n    _panelAnimationState: 'void' | 'enter' = 'void';\n\n    /** Emits whenever an animation on the dropdown completes. */\n    _animationDone = new Subject<AnimationEvent>();\n\n    /** Whether the dropdown is animating. */\n    _isAnimating: boolean;\n\n    /** Parent dropdown of the current dropdown panel. */\n    parent: McDropdownPanel | undefined;\n\n    /** Layout direction of the dropdown. */\n    direction: Direction;\n\n    /** Class to be added to the backdrop element. */\n    @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n    /** @docs-private */\n    @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n    /**\n     * List of the items inside of a dropdown.\n     */\n    @ContentChildren(McDropdownItem) items: QueryList<McDropdownItem>;\n\n    /**\n     * Dropdown content that will be rendered lazily.\n     * @docs-private\n     */\n    @ContentChild(McDropdownContent) lazyContent: McDropdownContent;\n\n    private _previousPanelClass: string;\n\n    /** Event emitted when the dropdown is closed. */\n    @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n        new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n    private _keyManager: FocusKeyManager<McDropdownItem>;\n    private _xPosition: DropdownPositionX = this._defaultOptions.xPosition;\n    private _yPosition: DropdownPositionY = this._defaultOptions.yPosition;\n\n    /** Dropdown items inside the current dropdown. */\n    private _items: McDropdownItem[] = [];\n\n    /** Emits whenever the amount of dropdown items changes. */\n    private _itemChanges = new Subject<McDropdownItem[]>();\n\n    /** Subscription to tab events on the dropdown panel */\n    private _tabSubscription = Subscription.EMPTY;\n    private _overlapTriggerX: boolean = this._defaultOptions.overlapTriggerX;\n    private _overlapTriggerY: boolean = this._defaultOptions.overlapTriggerY;\n    private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n    constructor(\n        private _elementRef: ElementRef<HTMLElement>,\n        private _ngZone: NgZone,\n        @Inject(MC_DROPDOWN_DEFAULT_OPTIONS) private _defaultOptions: McDropdownDefaultOptions) { }\n\n    ngOnInit() {\n        this.setPositionClasses();\n    }\n\n    ngAfterContentInit() {\n        this._keyManager = new FocusKeyManager<McDropdownItem>(this.items).withWrap().withTypeAhead();\n        this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n    }\n\n    ngOnDestroy() {\n        this._tabSubscription.unsubscribe();\n        this.closed.complete();\n    }\n\n    /** Stream that emits whenever the hovered dropdown item changes. */\n    _hovered(): Observable<McDropdownItem> {\n        return this._itemChanges.pipe(\n            startWith(this._items),\n            switchMap(items => merge(...items.map(item => item._hovered)))\n        );\n    }\n\n    /** Handle a keyboard event from the dropdown, delegating to the appropriate action. */\n    _handleKeydown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n\n        switch (keyCode) {\n            case ESCAPE:\n                this.closed.emit('keydown');\n                break;\n            case LEFT_ARROW:\n                if (this.parent && this.direction === 'ltr') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            case RIGHT_ARROW:\n                if (this.parent && this.direction === 'rtl') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            default:\n                if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n                    this._keyManager.setFocusOrigin('keyboard');\n                }\n\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    /**\n     * Focus the first item in the dropdown.\n     * @param origin Action from which the focus originated. Used to set the correct styling.\n     */\n    focusFirstItem(origin: FocusOrigin = 'program'): void {\n        // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n        if (this.lazyContent) {\n            this._ngZone.onStable.asObservable()\n                .pipe(take(1))\n                .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n        } else {\n            this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n        }\n    }\n\n    /**\n     * Resets the active item in the dropdown. This is used when the dropdown is opened, allowing\n     * the user to start from the first option when pressing the down arrow.\n     */\n    resetActiveItem() {\n        this._keyManager.setActiveItem(-1);\n    }\n\n    /**\n     * Registers a dropdown item with the dropdown.\n     * @docs-private\n     */\n    addItem(item: McDropdownItem) {\n        // We register the items through this method, rather than picking them up through\n        // `ContentChildren`, because we need the items to be picked up by their closest\n        // `mc-dropdown` ancestor. If we used `@ContentChildren(McDropdownItem, {descendants: true})`,\n        // all descendant items will bleed into the top-level dropdown in the case where the consumer\n        // has `mc-dropdown` instances nested inside each other.\n        if (this._items.indexOf(item) === -1) {\n            this._items.push(item);\n            this._itemChanges.next(this._items);\n        }\n    }\n\n    /**\n     * Removes an item from the dropdown.\n     * @docs-private\n     */\n    removeItem(item: McDropdownItem) {\n        const index = this._items.indexOf(item);\n\n        if (this._items.indexOf(item) > -1) {\n            this._items.splice(index, 1);\n            this._itemChanges.next(this._items);\n        }\n    }\n\n    /**\n     * Adds classes to the dropdown panel based on its position. Can be used by\n     * consumers to add specific styling based on the position.\n     * @param posX Position of the dropdown along the x axis.\n     * @param posY Position of the dropdown along the y axis.\n     * @docs-private\n     */\n    setPositionClasses(posX: DropdownPositionX = this.xPosition, posY: DropdownPositionY = this.yPosition) {\n        const classes = this._classList;\n        classes['mc-dropdown-before'] = posX === 'before';\n        classes['mc-dropdown-after'] = posX === 'after';\n        classes['mc-dropdown-above'] = posY === 'above';\n        classes['mc-dropdown-below'] = posY === 'below';\n    }\n\n    /** Starts the enter animation. */\n    _startAnimation() {\n        this._panelAnimationState = 'enter';\n    }\n\n    /** Resets the panel animation to its initial state. */\n    _resetAnimation() {\n        this._panelAnimationState = 'void';\n    }\n\n    /** Callback that is invoked when the panel animation completes. */\n    _onAnimationDone(event: AnimationEvent) {\n        this._animationDone.next(event);\n        this._isAnimating = false;\n    }\n\n    _onAnimationStart(event: AnimationEvent) {\n        this._isAnimating = true;\n\n        // Scroll the content element to the top as soon as the animation starts. This is necessary,\n        // because we move focus to the first item while it's still being animated, which can throw\n        // the browser off when it determines the scroll position. Alternatively we can move focus\n        // when the animation is done, however moving focus asynchronously will interrupt screen\n        // readers which are in the process of reading out the dropdown already. We take the `element`\n        // from the `event` since we can't use a `ViewChild` to access the pane.\n        if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n            event.element.scrollTop = 0;\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McDropdownContent } from './dropdown-content';\nimport { McDropdownItem } from './dropdown-item';\nimport { MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER, McDropdownTrigger } from './dropdown-trigger';\nimport { McDropdown } from './dropdown.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        McIconModule\n    ],\n    exports: [McDropdown, McDropdownItem, McDropdownTrigger, McDropdownContent],\n    declarations: [McDropdown, McDropdownItem, McDropdownTrigger, McDropdownContent],\n    providers: [MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class McDropdownModule {}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-content',\n    preserveWhitespaces: false,\n    templateUrl: './content.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ],\n    host: {\n        '[class.mc-layout-content]': 'true'\n    }\n})\nexport class McContentComponent {\n}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-footer',\n    preserveWhitespaces: false,\n    templateUrl: './footer.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ],\n    host: {\n        '[class.mc-layout-footer]': 'true'\n    }\n})\nexport class McFooterComponent {\n}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector : 'mc-header',\n    preserveWhitespaces: false,\n    templateUrl: './header.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ],\n    host: {\n        '[class.mc-layout-header]': 'true'\n    }\n})\nexport class McHeaderComponent {\n}\n","import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-layout',\n    preserveWhitespaces: false,\n    styleUrls: ['layout.css'],\n    templateUrl: './layout.component.html',\n    host: {\n        '[class.mc-layout]': 'true',\n        '[class.mc-layout-has-sidebar]': 'hasSidebar'\n    },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McLayoutComponent {\n    hasSidebar = false;\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    EventEmitter,\n    Host,\n    Input,\n    OnInit,\n    Optional,\n    Output\n} from '@angular/core';\nimport { toBoolean } from '@ptsecurity/mosaic/core';\n\nimport { McLayoutComponent } from './layout.component';\n\n\n@Component({\n    selector: 'mc-sidebar',\n    preserveWhitespaces: false,\n    templateUrl: './sidebar.component.html',\n    host: {\n        '[class.mc-layout-sidebar]': 'true',\n        '[class.mc-layout-sidebar-collapsed]': 'mcCollapsed',\n        '[style.flex]': 'mcFlex',\n        '[style.max-width.px]': 'mcWidth',\n        '[style.min-width.px]': 'mcWidth',\n        '[style.width.px]': 'mcWidth'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McSidebarComponent implements OnInit {\n\n    @Input() _mcWidth = 200;\n    @Input() mcCollapsedWidth = 80;\n\n    @Input()\n    set mcCollapsible(value: boolean) {\n        this.collapsible = toBoolean(value);\n    }\n\n    get mcCollapsible(): boolean {\n        return this.collapsible;\n    }\n\n    @Input()\n    set mcCollapsed(value: boolean) {\n        this.collapsed = toBoolean(value);\n    }\n\n    get mcCollapsed(): boolean {\n        return this.collapsed;\n    }\n\n    // tslint:disable-next-line\n    @Output() mcCollapsedChange = new EventEmitter();\n\n    private collapsed = false;\n    private collapsible = false;\n\n    get mcFlex(): string {\n        if (this.mcCollapsed) {\n            return `0 0 ${this.mcCollapsedWidth}px`;\n        } else {\n            return `0 0 ${this.mcWidth}px`;\n        }\n    }\n\n    get mcWidth(): number {\n        if (this.mcCollapsed) {\n            return this.mcCollapsedWidth;\n        } else {\n            return this._mcWidth;\n        }\n    }\n\n    constructor(\n        @Optional() @Host() private mcLayoutComponent: McLayoutComponent) {\n    }\n\n    ngOnInit() {\n        if (this.mcLayoutComponent) {\n            this.mcLayoutComponent.hasSidebar = true;\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McContentComponent } from './content.component';\nimport { McFooterComponent } from './footer.component';\nimport { McHeaderComponent } from './header.component';\nimport { McLayoutComponent } from './layout.component';\nimport { McSidebarComponent } from './sidebar.component';\n\n\n@NgModule({\n    imports: [ CommonModule ],\n    exports: [\n        McLayoutComponent,\n        McContentComponent,\n        McFooterComponent,\n        McHeaderComponent,\n        McSidebarComponent\n    ],\n    declarations: [\n        McLayoutComponent,\n        McContentComponent,\n        McFooterComponent,\n        McHeaderComponent,\n        McSidebarComponent\n    ]\n})\nexport class McLayoutModule {\n}\n","// tslint:disable:no-magic-numbers\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { DateAdapter } from '@ptsecurity/cdk/datetime';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    PAGE_DOWN,\n    PAGE_UP,\n    RIGHT_ARROW,\n    UP_ARROW,\n    SPACE\n} from '@ptsecurity/cdk/keycodes';\n\nimport { McCalendarBody, McCalendarCell } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-multi-year-view',\n    templateUrl: 'multi-year-view.html',\n    exportAs: 'mcMultiYearView',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McMultiYearView<D> implements AfterContentInit {\n    /** The date to display in this multi-year view (everything other than the year is ignored). */\n    @Input()\n    get activeDate(): D {\n        return this._activeDate;\n    }\n\n    set activeDate(value: D) {\n        const oldActiveDate = this._activeDate;\n        const validDate =\n            this.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();\n        this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n        if (Math.floor(this.dateAdapter.getYear(oldActiveDate) / yearsPerPage) !==\n            Math.floor(this.dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n            this.init();\n        }\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.selectedYear = this._selected && this.dateAdapter.getYear(this._selected);\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** A function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Emits when a new year is selected. */\n    @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits the selected year. This doesn't imply a change on the selected date */\n    @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits when any date is activated. */\n    @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** The body of calendar table */\n    @ViewChild(McCalendarBody) mcCalendarBody: McCalendarBody;\n\n    /** Grid of calendar cells representing the currently displayed years. */\n    years: McCalendarCell[][];\n\n    /** The year that today falls on. */\n    todayYear: number;\n\n    /** The year of the selected date. Null if the selected date is null. */\n    selectedYear: number | null;\n    private _activeDate: D;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() private dir?: Directionality\n    ) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        this._activeDate = this.dateAdapter.today();\n    }\n\n    ngAfterContentInit() {\n        this.init();\n    }\n\n    /** Initializes this multi-year view. */\n    init() {\n        this.todayYear = this.dateAdapter.getYear(this.dateAdapter.today());\n        const activeYear = this.dateAdapter.getYear(this._activeDate);\n        const activeOffset = activeYear % yearsPerPage;\n        this.years = [];\n        for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n            row.push(activeYear - activeOffset + i);\n            if (row.length === yearsPerRow) {\n                this.years.push(row.map((year) => this.createCellForYear(year)));\n                row = [];\n            }\n        }\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Handles when a new year is selected. */\n    onYearSelected(year: number) {\n        this.yearSelected.emit(this.dateAdapter.createDate(year, 0, 1));\n        const month = this.dateAdapter.getMonth(this.activeDate);\n        const daysInMonth =\n            this.dateAdapter.getNumDaysInMonth(this.dateAdapter.createDate(year, month, 1));\n        this.selectedChange.emit(this.dateAdapter.createDate(year, month,\n            Math.min(this.dateAdapter.getDate(this.activeDate), daysInMonth)));\n    }\n\n    /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n    handleCalendarBodyKeydown(event: KeyboardEvent): void {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n        const oldActiveDate = this._activeDate;\n        const isRtl = this.isRtl();\n\n        // tslint:disable-next-line:deprecation\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n                break;\n            case HOME:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate,\n                    -this.dateAdapter.getYear(this._activeDate) % yearsPerPage);\n                break;\n            case END:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate,\n                    yearsPerPage - this.dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n                break;\n            case PAGE_UP:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(\n                        this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n                break;\n            case PAGE_DOWN:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(\n                        this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n                break;\n            case ENTER:\n            case SPACE:\n                this.onYearSelected(this.dateAdapter.getYear(this._activeDate));\n                break;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n\n        if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n\n        this.focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n\n    getActiveCell(): number {\n        return this.dateAdapter.getYear(this.activeDate) % yearsPerPage;\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.mcCalendarBody.focusActiveCell();\n    }\n\n    /** Creates an McCalendarCell for the given year. */\n    private createCellForYear(year: number) {\n        const yearName = this.dateAdapter.getYearName(this.dateAdapter.createDate(year, 0, 1));\n\n        return new McCalendarCell(year, yearName, yearName, this.shouldEnableYear(year));\n    }\n\n    /** Whether the given year is enabled. */\n    private shouldEnableYear(year: number) {\n        // disable if the year is greater than maxDate lower than minDate\n        if (year === undefined || year === null ||\n            (this.maxDate && year > this.dateAdapter.getYear(this.maxDate)) ||\n            (this.minDate && year < this.dateAdapter.getYear(this.minDate))) {\n            return false;\n        }\n\n        // enable if it reaches here and there's no filter defined\n        if (!this.dateFilter) {\n            return true;\n        }\n\n        const firstOfYear = this.dateAdapter.createDate(year, 0, 1);\n\n        // If any date in the year is enabled count the year as enabled.\n        for (let date = firstOfYear; this.dateAdapter.getYear(date) === year;\n             date = this.dateAdapter.addCalendarDays(date, 1)) {\n            if (this.dateFilter(date)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Determines whether the user has the RTL layout direction. */\n    private isRtl() {\n        return this.dir && this.dir.value === 'rtl';\n    }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Inject,\n    Input,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    PAGE_DOWN,\n    PAGE_UP,\n    RIGHT_ARROW,\n    UP_ARROW,\n    SPACE\n} from '@ptsecurity/cdk/keycodes';\n\nimport { McCalendarBody, McCalendarCell } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-year-view',\n    templateUrl: 'year-view.html',\n    exportAs: 'mcYearView',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McYearView<D> implements AfterContentInit {\n    /** The date to display in this year view (everything other than the year is ignored). */\n    @Input()\n    get activeDate(): D {\n        return this._activeDate;\n    }\n\n    set activeDate(value: D) {\n        const oldActiveDate = this._activeDate;\n        const validDate =\n            this.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();\n        this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n        if (this.dateAdapter.getYear(oldActiveDate) !== this.dateAdapter.getYear(this._activeDate)) {\n            this.init();\n        }\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.selectedMonth = this.getMonthInCurrentYear(this._selected);\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** A function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Emits when a new month is selected. */\n    @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits the selected month. This doesn't imply a change on the selected date */\n    @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits when any date is activated. */\n    @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** The body of calendar table */\n    @ViewChild(McCalendarBody) mcCalendarBody: McCalendarBody;\n\n    /** Grid of calendar cells representing the months of the year. */\n    months: McCalendarCell[][];\n\n    /** The label for this year (e.g. \"2017\"). */\n    yearLabel: string;\n\n    /** The month in this year that today falls on. Null if today is in a different year. */\n    todayMonth: number | null;\n\n    /**\n     * The month in this year that the selected Date falls on.\n     * Null if the selected Date is in a different year.\n     */\n    selectedMonth: number | null;\n    private _activeDate: D;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() private dir?: Directionality\n    ) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        this._activeDate = this.dateAdapter.today();\n    }\n\n    ngAfterContentInit() {\n        this.init();\n    }\n\n    /** Handles when a new month is selected. */\n    onMonthSelected(month: number) {\n        const normalizedDate =\n            this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate), month, 1);\n\n        this.monthSelected.emit(normalizedDate);\n\n        const daysInMonth = this.dateAdapter.getNumDaysInMonth(normalizedDate);\n\n        this.selectedChange.emit(this.dateAdapter.createDate(\n            this.dateAdapter.getYear(this.activeDate), month,\n            Math.min(this.dateAdapter.getDate(this.activeDate), daysInMonth)));\n    }\n\n    /** Handles keydown events on the calendar body when calendar is in year view. */\n    handleCalendarBodyKeydown(event: KeyboardEvent): void {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n        const oldActiveDate = this._activeDate;\n        const isRtl = this.isRtl();\n\n        const VERTICAL_SHIFT = 4;\n        const PAGE_SHIFT = 10;\n        const MAX_MONTH_INDEX = 11;\n\n        // tslint:disable-next-line:deprecation\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, -VERTICAL_SHIFT);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, VERTICAL_SHIFT);\n                break;\n            case HOME:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate,\n                    -this.dateAdapter.getMonth(this._activeDate));\n                break;\n            case END:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate,\n                    MAX_MONTH_INDEX - this.dateAdapter.getMonth(this._activeDate));\n                break;\n            case PAGE_UP:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -PAGE_SHIFT : -1);\n                break;\n            case PAGE_DOWN:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(this._activeDate, event.altKey ? PAGE_SHIFT : 1);\n                break;\n            case ENTER:\n            case SPACE:\n                this.onMonthSelected(this.dateAdapter.getMonth(this._activeDate));\n                break;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n\n        if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n\n        this.focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n\n    /** Initializes this year view. */\n    init() {\n        this.selectedMonth = this.getMonthInCurrentYear(this.selected);\n        this.todayMonth = this.getMonthInCurrentYear(this.dateAdapter.today());\n        this.yearLabel = this.dateAdapter.getYearName(this.activeDate);\n\n        const monthNames = this.dateAdapter.getMonthNames('short');\n\n        // First row of months only contains 5 elements so we can fit the year label on the same row.\n        // tslint:disable-next-line:no-magic-numbers\n        this.months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map((row) => row.map(\n            (month) => this.createCellForMonth(month, monthNames[month])));\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.mcCalendarBody.focusActiveCell();\n    }\n\n    /**\n     * Gets the month in this year that the given Date falls on.\n     * Returns null if the given Date is in another year.\n     */\n    private getMonthInCurrentYear(date: D | null) {\n        return date && this.dateAdapter.getYear(date) === this.dateAdapter.getYear(this.activeDate) ?\n            this.dateAdapter.getMonth(date) : null;\n    }\n\n    /** Creates an McCalendarCell for the given month. */\n    private createCellForMonth(month: number, monthName: string) {\n        const ariaLabel = this.dateAdapter.format(\n            this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate), month, 1),\n            this.dateFormats.display.monthYearA11yLabel);\n\n        const newMonthName = monthName[0].toLocaleUpperCase() + monthName.substr(1);\n\n        return new McCalendarCell(\n            month, newMonthName, ariaLabel, this.shouldEnableMonth(month));\n    }\n\n    /** Whether the given month is enabled. */\n    private shouldEnableMonth(month: number) {\n\n        const activeYear = this.dateAdapter.getYear(this.activeDate);\n\n        if (month === undefined || month === null ||\n            this.isYearAndMonthAfterMaxDate(activeYear, month) ||\n            this.isYearAndMonthBeforeMinDate(activeYear, month)) {\n            return false;\n        }\n\n        if (!this.dateFilter) {\n            return true;\n        }\n\n        const firstOfMonth = this.dateAdapter.createDate(activeYear, month, 1);\n\n        // If any date in the month is enabled count the month as enabled.\n        for (let date = firstOfMonth; this.dateAdapter.getMonth(date) === month;\n             date = this.dateAdapter.addCalendarDays(date, 1)) {\n            if (this.dateFilter(date)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Tests whether the combination month/year is after this.maxDate, considering\n     * just the month and year of this.maxDate\n     */\n    private isYearAndMonthAfterMaxDate(year: number, month: number) {\n        if (this.maxDate) {\n            const maxYear = this.dateAdapter.getYear(this.maxDate);\n            const maxMonth = this.dateAdapter.getMonth(this.maxDate);\n\n            return year > maxYear || (year === maxYear && month > maxMonth);\n        }\n\n        return false;\n    }\n\n    /**\n     * Tests whether the combination month/year is before this.minDate, considering\n     * just the month and year of this.minDate\n     */\n    private isYearAndMonthBeforeMinDate(year: number, month: number) {\n        if (this.minDate) {\n            const minYear = this.dateAdapter.getYear(this.minDate);\n            const minMonth = this.dateAdapter.getMonth(this.minDate);\n\n            return year < minYear || (year === minYear && month < minMonth);\n        }\n\n        return false;\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Determines whether the user has the RTL layout direction. */\n    private isRtl() {\n        return this.dir && this.dir.value === 'rtl';\n    }\n}\n","import {\n    AfterContentInit,\n    AfterViewChecked,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Optional,\n    Output,\n    SimpleChanges,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport { ComponentPortal, IComponentType, Portal } from '@ptsecurity/cdk/portal';\nimport { Subject, Subscription } from 'rxjs';\n\nimport { McCalendarCellCssClasses } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\nimport { McDatepickerIntl } from './datepicker-intl';\nimport { McMonthView } from './month-view';\nimport { McMultiYearView, yearsPerPage } from './multi-year-view';\nimport { McYearView } from './year-view';\n\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type McCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for McCalendar */\n@Component({\n    selector: 'mc-calendar-header',\n    templateUrl: 'calendar-header.html',\n    exportAs: 'mcCalendarHeader',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCalendarHeader<D> {\n    constructor(private intl: McDatepickerIntl,\n                @Inject(forwardRef(() => McCalendar)) public calendar: McCalendar<D>,\n                @Optional() private dateAdapter: DateAdapter<D>,\n                @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n                changeDetectorRef: ChangeDetectorRef) {\n\n        this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n    }\n\n    /** The label for the current calendar view. */\n    get periodButtonText(): string {\n        if (this.calendar.currentView === 'month') {\n            const label = this.dateAdapter\n                .format(this.calendar.activeDate, this.dateFormats.display.monthYearLabel);\n\n            return label[0].toLocaleUpperCase() + label.substr(1);\n        }\n\n        if (this.calendar.currentView === 'year') {\n            return this.dateAdapter.getYearName(this.calendar.activeDate);\n        }\n\n        const activeYear = this.dateAdapter.getYear(this.calendar.activeDate);\n        const firstYearInView = this.dateAdapter.getYearName(\n            // tslint:disable-next-line:no-magic-numbers\n            this.dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n        const lastYearInView = this.dateAdapter.getYearName(\n            // tslint:disable-next-line:no-magic-numbers\n            this.dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n\n        return `${firstYearInView} \\u2013 ${lastYearInView}`;\n    }\n\n    get periodButtonLabel(): string {\n        return this.calendar.currentView === 'month' ?\n            this.intl.switchToMultiYearViewLabel : this.intl.switchToMonthViewLabel;\n    }\n\n    /** The label for the previous button. */\n    get prevButtonLabel(): string {\n        return {\n            month: this.intl.prevMonthLabel,\n            year: this.intl.prevYearLabel,\n            'multi-year': this.intl.prevMultiYearLabel\n        }[this.calendar.currentView];\n    }\n\n    /** The label for the next button. */\n    get nextButtonLabel(): string {\n        return {\n            month: this.intl.nextMonthLabel,\n            year: this.intl.nextYearLabel,\n            'multi-year': this.intl.nextMultiYearLabel\n        }[this.calendar.currentView];\n    }\n\n    /** Handles user clicks on the period label. */\n    currentPeriodClicked(): void {\n        this.calendar.currentView = this.calendar.currentView === 'month' ? 'multi-year' : 'month';\n    }\n\n    /** Handles user clicks on the previous button. */\n    previousClicked(): void {\n        this.calendar.activeDate = this.calendar.currentView === 'month' ?\n            this.dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this.dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView === 'year' ? -1 : -yearsPerPage\n            );\n    }\n\n    /** Handles user clicks on the next button. */\n    nextClicked(): void {\n        this.calendar.activeDate = this.calendar.currentView === 'month' ?\n            this.dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this.dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                this.calendar.currentView === 'year' ? 1 : yearsPerPage\n            );\n    }\n\n    /** Whether the previous period button is enabled. */\n    previousEnabled(): boolean {\n        if (!this.calendar.minDate) {\n            return true;\n        }\n\n        return !this.calendar.minDate ||\n            !this.isSameView(this.calendar.activeDate, this.calendar.minDate);\n    }\n\n    /** Whether the next period button is enabled. */\n    nextEnabled(): boolean {\n        return !this.calendar.maxDate ||\n            !this.isSameView(this.calendar.activeDate, this.calendar.maxDate);\n    }\n\n    /** Whether the two dates represent the same view in the current view mode (month or year). */\n    private isSameView(date1: D, date2: D): boolean {\n        if (this.calendar.currentView === 'month') {\n            return this.dateAdapter.getYear(date1) === this.dateAdapter.getYear(date2) &&\n                this.dateAdapter.getMonth(date1) === this.dateAdapter.getMonth(date2);\n        }\n        if (this.calendar.currentView === 'year') {\n            return this.dateAdapter.getYear(date1) === this.dateAdapter.getYear(date2);\n        }\n\n        // Otherwise we are in 'multi-year' view.\n        return Math.floor(this.dateAdapter.getYear(date1) / yearsPerPage) ===\n            Math.floor(this.dateAdapter.getYear(date2) / yearsPerPage);\n    }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-calendar',\n    templateUrl: 'calendar.html',\n    styleUrls: ['calendar.css'],\n    host: {\n        class: 'mc-calendar'\n    },\n    exportAs: 'mcCalendar',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n\n    /** A date representing the period (month or year) to start the calendar in. */\n    @Input()\n    get startAt(): D | null {\n        return this._startAt;\n    }\n\n    set startAt(value: D | null) {\n        this._startAt = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /**\n     * The current active date. This determines which time period is shown and which date is\n     * highlighted when using keyboard navigation.\n     */\n    get activeDate(): D {\n        return this.clampedActiveDate;\n    }\n\n    set activeDate(value: D) {\n        this.clampedActiveDate = this.dateAdapter.clampDate(value, this.minDate, this.maxDate);\n        this.stateChanges.next();\n    }\n\n    /** Whether the calendar is in month view. */\n    get currentView(): McCalendarView {\n        return this._currentView;\n    }\n\n    set currentView(value: McCalendarView) {\n        this._currentView = value;\n        this.moveFocusOnNextTick = true;\n    }\n\n    /** An input indicating the type of the header component, if set. */\n    @Input() headerComponent: IComponentType<any>;\n\n    /** A portal containing the header component type for this calendar. */\n    calendarHeaderPortal: Portal<any>;\n\n    /** Whether the calendar should be started in month or year view. */\n    @Input() startView: McCalendarView = 'month';\n\n    /** Function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Function that can be used to add custom CSS classes to dates. */\n    @Input() dateClass: (date: D) => McCalendarCellCssClasses;\n\n    /** Emits when the currently selected date changes. */\n    @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /**\n     * Emits the year chosen in multiyear view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /**\n     * Emits the month chosen in year view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits when any date is selected. */\n    @Output() readonly userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Reference to the current month view component. */\n    @ViewChild(McMonthView) monthView: McMonthView<D>;\n\n    /** Reference to the current year view component. */\n    @ViewChild(McYearView) yearView: McYearView<D>;\n\n    /** Reference to the current multi-year view component. */\n    @ViewChild(McMultiYearView) multiYearView: McMultiYearView<D>;\n\n    /**\n     * Emits whenever there is a state change that the header may need to respond to.\n     */\n    stateChanges = new Subject<void>();\n\n    private intlChanges: Subscription;\n\n    /**\n     * Used for scheduling that focus should be moved to the active cell on the next tick.\n     * We need to schedule it, rather than do it immediately, because we have to wait\n     * for Angular to re-evaluate the view children.\n     */\n    private moveFocusOnNextTick = false;\n    private _startAt: D | null;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n    private clampedActiveDate: D;\n    private _currentView: McCalendarView;\n\n    constructor(\n        intl: McDatepickerIntl,\n        @Optional() private dateAdapter: DateAdapter<D>,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        this.intlChanges = intl.changes.subscribe(() => {\n            changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        });\n    }\n\n    ngAfterContentInit() {\n        this.calendarHeaderPortal = new ComponentPortal(this.headerComponent || McCalendarHeader);\n        this.activeDate = this.startAt || this.dateAdapter.today();\n\n        // Assign to the private property since we don't want to move focus on init.\n        this._currentView = this.startView;\n    }\n\n    ngAfterViewChecked() {\n        if (this.moveFocusOnNextTick) {\n            this.moveFocusOnNextTick = false;\n            this.focusActiveCell();\n        }\n    }\n\n    ngOnDestroy() {\n        this.intlChanges.unsubscribe();\n        this.stateChanges.complete();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n        if (change && !change.firstChange) {\n            const view = this.getCurrentViewComponent();\n\n            if (view) {\n                // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n                // passed down to the view via data bindings which won't be up-to-date when we call `init`.\n                this.changeDetectorRef.detectChanges();\n                view.init();\n            }\n        }\n\n        this.stateChanges.next();\n    }\n\n    focusActiveCell() {\n        this.getCurrentViewComponent().focusActiveCell();\n    }\n\n    /** Updates today's date after an update of the active date */\n    updateTodaysDate() {\n        const view = this.currentView === 'month' ? this.monthView :\n            (this.currentView === 'year' ? this.yearView : this.multiYearView);\n\n        view.ngAfterContentInit();\n    }\n\n    /** Handles date selection in the month view. */\n    dateSelected(date: D): void {\n        if (!this.dateAdapter.sameDate(date, this.selected)) {\n            this.selectedChange.emit(date);\n        }\n    }\n\n    /** Handles year selection in the multiyear view. */\n    yearSelectedInMultiYearView(normalizedYear: D) {\n        this.yearSelected.emit(normalizedYear);\n    }\n\n    /** Handles month selection in the year view. */\n    monthSelectedInYearView(normalizedMonth: D) {\n        this.monthSelected.emit(normalizedMonth);\n    }\n\n    userSelected(): void {\n        this.userSelection.emit();\n    }\n\n    /** Handles year/month selection in the multi-year/year views. */\n    goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n        this.activeDate = date;\n        this.currentView = view;\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Returns the component instance that corresponds to the current calendar view. */\n    private getCurrentViewComponent() {\n        return this.monthView || this.yearView || this.multiYearView;\n    }\n}\n","import {\n    animate,\n    state,\n    style,\n    transition,\n    trigger,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n\n/**\n * Animations used by the mosaic datepicker.\n * @docs-private\n */\nexport const mcDatepickerAnimations: {\n    readonly transformPanel: AnimationTriggerMetadata;\n    readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n    /** Transforms the height of the datepicker's calendar. */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(1, 0.8)'\n        })),\n        transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1, 1)'\n        }))),\n        transition('* => void', animate('100ms linear', style({ opacity: 0 })))\n    ]),\n\n    /** Fades in the content of the calendar. */\n    fadeInCalendar: trigger('fadeInCalendar', [\n        state('void', style({ opacity: 0 })),\n        state('enter', style({ opacity: 1 })),\n\n        // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n        transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n    ])\n};\n\n// todo should be put into polyfils\n// https://github.com/angular/angular/issues/24769\nif (!Element.prototype.matches) {\n    Element.prototype.matches = (Element.prototype as any).msMatchesSelector;\n}\n","// tslint:disable:no-unbound-method\n// tslint:disable:no-magic-numbers\nimport { DOCUMENT } from '@angular/common';\nimport {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    Component,\n    ComponentRef,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { DateAdapter } from '@ptsecurity/cdk/datetime';\nimport { ESCAPE, UP_ARROW } from '@ptsecurity/cdk/keycodes';\nimport {\n    Overlay,\n    OverlayConfig,\n    OverlayRef,\n    IPositionStrategy,\n    IScrollStrategy\n} from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal, IComponentType } from '@ptsecurity/cdk/portal';\nimport {\n    CanColor,\n    CanColorCtor,\n    mixinColor,\n    ThemePalette\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { merge, Observable, Subject, Subscription } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\n\nimport { McCalendar } from './calendar';\nimport { McCalendarCellCssClasses } from './calendar-body';\nimport { mcDatepickerAnimations } from './datepicker-animations';\nimport { createMissingDateImplError } from './datepicker-errors';\nimport { McDatepickerInput } from './datepicker-input';\n\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MC_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-datepicker-scroll-strategy');\n\n/** @docs-private */\n// tslint:disable-next-line:naming-convention\nexport function MC_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => IScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_DATEPICKER_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_DATEPICKER_SCROLL_STRATEGY_FACTORY\n};\n\n// Boilerplate for applying mixins to McDatepickerContent.\n/** @docs-private */\nexport class McDatepickerContentBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McDatepickerContentMixinBase: CanColorCtor & typeof McDatepickerContentBase =\n    mixinColor(McDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * McCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n    selector: 'mc-datepicker__content',\n    templateUrl: 'datepicker-content.html',\n    styleUrls: ['datepicker-content.css'],\n    host: {\n        class: 'mc-datepicker__content',\n        '[@transformPanel]': '\"enter\"'\n    },\n    animations: [\n        mcDatepickerAnimations.transformPanel,\n        mcDatepickerAnimations.fadeInCalendar\n    ],\n    exportAs: 'mcDatepickerContent',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['color']\n})\nexport class McDatepickerContent<D> extends McDatepickerContentMixinBase\n    implements AfterViewInit, CanColor {\n\n    /** Reference to the internal calendar component. */\n    @ViewChild(McCalendar) calendar: McCalendar<D>;\n\n    /** Reference to the datepicker that created the overlay. */\n    datepicker: McDatepicker<D>;\n\n    /** Whether the datepicker is above or below the input. */\n    isAbove: boolean;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    ngAfterViewInit() {\n        this.calendar.focusActiveCell();\n    }\n}\n\n\n// TODO: We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"mcDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n    selector: 'mc-datepicker',\n    template: '',\n    exportAs: 'mcDatepicker',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    providers: [{ provide: McFormFieldControl, useExisting: McDatepicker }]\n})\nexport class McDatepicker<D> implements OnDestroy, CanColor {\n\n    /** The date to open the calendar to initially. */\n    @Input()\n    get startAt(): D | null {\n        // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n        // selected value is.\n        return this._startAt || (this.datepickerInput ? this.datepickerInput.value : null);\n    }\n\n    set startAt(value: D | null) {\n        this._startAt = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** Color palette to use on the datepicker's calendar. */\n    @Input()\n    get color(): ThemePalette {\n        // @ts-ignore:next-line\n        return this._color ||\n            (this.datepickerInput ? this.datepickerInput.getThemePalette() : undefined);\n    }\n\n    set color(value: ThemePalette) {\n        this._color = value;\n    }\n\n    /** Whether the datepicker pop-up should be disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled === undefined && this.datepickerInput ?\n            this.datepickerInput.disabled : !!this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        const newValue = coerceBooleanProperty(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this.disabledChange.next(newValue);\n        }\n    }\n\n    /** Whether the calendar is open. */\n    @Input()\n    get opened(): boolean {\n        return this._opened;\n    }\n\n    set opened(value: boolean) {\n        if (value) {\n            this.open();\n        } else {\n            this.close();\n        }\n    }\n\n    /** The currently selected date. */\n    get selected(): D | null {\n        return this.validSelected;\n    }\n\n    set selected(value: D | null) {\n        this.validSelected = value;\n    }\n\n    /** The minimum selectable date. */\n    get minDate(): D | null {\n        return this.datepickerInput && this.datepickerInput.min;\n    }\n\n    /** The maximum selectable date. */\n    get maxDate(): D | null {\n        return this.datepickerInput && this.datepickerInput.max;\n    }\n\n    get dateFilter(): (date: D | null) => boolean {\n        return this.datepickerInput && this.datepickerInput.dateFilter;\n    }\n\n\n    get value(): D | null {\n        return this.selected;\n    }\n\n    /** An input indicating the type of the custom header component for the calendar, if set. */\n    @Input() calendarHeaderComponent: IComponentType<any>;\n\n    /** The view that the calendar should start in. */\n    @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n    /**\n     * Emits selected year in multiyear view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /**\n     * Emits selected month in year view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n    @Input() panelClass: string | string[];\n\n    /** Function that can be used to add custom CSS classes to dates. */\n    @Input() dateClass: (date: D) => McCalendarCellCssClasses;\n\n    /** Emits when the datepicker has been opened. */\n    @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Emits when the datepicker has been closed. */\n    @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n    /** The id for the datepicker calendar. */\n    id: string = `mc-datepicker-${datepickerUid++}`;\n\n    /** A reference to the overlay when the calendar is opened as a popup. */\n    popupRef: OverlayRef;\n\n    /** The input element this datepicker is associated with. */\n    datepickerInput: McDatepickerInput<D>;\n\n    readonly stateChanges: Observable<void> = new Subject<void>();\n\n    /** Emits when the datepicker is disabled. */\n    readonly disabledChange = new Subject<boolean>();\n\n    /** Emits new selected date when selected date changes. */\n    readonly selectedChanged = new Subject<D>();\n    private scrollStrategy: () => IScrollStrategy;\n    private _startAt: D | null;\n    private _disabled: boolean;\n    private _opened = false;\n    private validSelected: D | null = null;\n    private _color: ThemePalette;\n\n    /** A portal containing the calendar for this datepicker. */\n    private calendarPortal: ComponentPortal<McDatepickerContent<D>>;\n\n    /** Reference to the component instantiated in popup mode. */\n    private popupComponentRef: ComponentRef<McDatepickerContent<D>> | null;\n\n    /** The element that was focused before the datepicker was opened. */\n    private focusedElementBeforeOpen: HTMLElement | null = null;\n\n    /** Subscription to value changes in the associated input element. */\n    private inputSubscription = Subscription.EMPTY;\n\n    constructor(private overlay: Overlay,\n                private ngZone: NgZone,\n                private viewContainerRef: ViewContainerRef,\n                @Inject(MC_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n                @Optional() private dateAdapter: DateAdapter<D>,\n                @Optional() private dir: Directionality,\n                @Optional() @Inject(DOCUMENT) private document: any) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        this.scrollStrategy = scrollStrategy;\n    }\n\n    ngOnDestroy() {\n        this.close();\n        this.inputSubscription.unsubscribe();\n        this.disabledChange.complete();\n\n        if (this.popupRef) {\n            this.popupRef.dispose();\n            this.popupComponentRef = null;\n        }\n    }\n\n    /** Selects the given date */\n    select(date: D): void {\n        const oldValue = this.selected;\n        this.selected = date;\n        if (!this.dateAdapter.sameDate(oldValue, this.selected)) {\n            this.selectedChanged.next(date);\n        }\n    }\n\n    /** Emits the selected year in multiyear view */\n    selectYear(normalizedYear: D): void {\n        this.yearSelected.emit(normalizedYear);\n    }\n\n    /** Emits selected month in year view */\n    selectMonth(normalizedMonth: D): void {\n        this.monthSelected.emit(normalizedMonth);\n    }\n\n    /**\n     * Register an input with this datepicker.\n     * @param input The datepicker input to register with this datepicker.\n     */\n    registerInput(input: McDatepickerInput<D>): void {\n        if (this.datepickerInput) {\n            throw Error('A McDatepicker can only be associated with a single input.');\n        }\n        this.datepickerInput = input;\n        this.inputSubscription =\n            this.datepickerInput.valueChange.subscribe((value: D | null) => this.selected = value);\n    }\n\n    /** Open the calendar. */\n    open(): void {\n        if (this._opened || this.disabled) {\n            return;\n        }\n        if (!this.datepickerInput) {\n            throw Error('Attempted to open an McDatepicker with no associated input.');\n        }\n        if (this.document) {\n            this.focusedElementBeforeOpen = this.document.activeElement;\n        }\n\n        this.openAsPopup();\n\n        this._opened = true;\n        this.openedStream.emit();\n    }\n\n    /** Close the calendar. */\n    close(): void {\n        if (!this._opened) {\n            return;\n        }\n\n        if (this.popupRef && this.popupRef.hasAttached()) {\n            this.popupRef.detach();\n        }\n\n        if (this.calendarPortal && this.calendarPortal.isAttached) {\n            this.calendarPortal.detach();\n        }\n\n        const completeClose = () => {\n            // The `_opened` could've been reset already if\n            // we got two events in quick succession.\n            if (this._opened) {\n                this._opened = false;\n                this.closedStream.emit();\n                this.focusedElementBeforeOpen = null;\n            }\n        };\n\n        if (this.focusedElementBeforeOpen &&\n            typeof this.focusedElementBeforeOpen.focus === 'function') {\n            // Because IE moves focus asynchronously, we can't count on it being restored before we've\n            // marked the datepicker as closed. If the event fires out of sequence and the element that\n            // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n            // able to close the calendar at all. We work around it by making the logic, that marks\n            // the datepicker as closed, async as well.\n            this.focusedElementBeforeOpen.focus();\n            setTimeout(completeClose);\n        } else {\n            completeClose();\n        }\n    }\n\n    /** Open the calendar as a popup. */\n    private openAsPopup(): void {\n        if (!this.calendarPortal) {\n            this.calendarPortal = new ComponentPortal<McDatepickerContent<D>>(McDatepickerContent,\n                this.viewContainerRef);\n        }\n\n        if (!this.popupRef) {\n            this.createPopup();\n        }\n\n        if (!this.popupRef.hasAttached()) {\n            this.popupComponentRef = this.popupRef.attach(this.calendarPortal);\n            this.popupComponentRef.instance.datepicker = this;\n            this.setColor();\n\n            // Update the position once the calendar has rendered.\n            this.ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n                this.popupRef.updatePosition();\n            });\n        }\n    }\n\n    /** Create the popup. */\n    private createPopup(): void {\n        const overlayConfig = new OverlayConfig({\n            positionStrategy: this.createPopupPositionStrategy(),\n            hasBackdrop: true,\n            backdropClass: 'mc-overlay-transparent-backdrop',\n            direction: this.dir,\n            scrollStrategy: this.scrollStrategy(),\n            panelClass: 'mc-datepicker__popup'\n        });\n\n        this.popupRef = this.overlay.create(overlayConfig);\n        this.popupRef.overlayElement.setAttribute('role', 'dialog');\n\n        merge(\n            this.popupRef.backdropClick(),\n            this.popupRef.detachments(),\n            this.popupRef.keydownEvents().pipe(filter((event) => {\n                // Closing on alt + up is only valid when there's an input associated with the datepicker.\n                // tslint:disable-next-line:deprecation\n                return event.keyCode === ESCAPE || (this.datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n            }))\n        ).subscribe(() => this.close());\n    }\n\n    /** Create the popup PositionStrategy. */\n    private createPopupPositionStrategy(): IPositionStrategy {\n        return this.overlay.position()\n            .flexibleConnectedTo(this.datepickerInput.elementRef)\n            .withTransformOriginOn('.mc-datepicker__content')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(8)\n            .withLockedPosition()\n            .withPositions([\n                {\n                    originX: 'start',\n                    originY: 'bottom',\n                    overlayX: 'start',\n                    overlayY: 'top'\n                },\n                {\n                    originX: 'start',\n                    originY: 'top',\n                    overlayX: 'start',\n                    overlayY: 'bottom'\n                },\n                {\n                    originX: 'end',\n                    originY: 'bottom',\n                    overlayX: 'end',\n                    overlayY: 'top'\n                },\n                {\n                    originX: 'end',\n                    originY: 'top',\n                    overlayX: 'end',\n                    overlayY: 'bottom'\n                }\n            ]);\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Passes the current theme color along to the calendar overlay. */\n    private setColor(): void {\n        const color = this.color;\n        if (this.popupComponentRef) {\n            this.popupComponentRef.instance.color = color;\n        }\n    }\n}\n","import {\n    Output,\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef, Input,\n    OnDestroy, EventEmitter,\n    ViewEncapsulation, HostBinding\n} from '@angular/core';\n\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { SPACE } from '@ptsecurity/cdk/keycodes';\n\n\n@Component({\n    selector: 'mc-card',\n    templateUrl: './card.component.html',\n    styleUrls: ['./card.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['color'],\n    host: {\n        class: 'mc-card',\n        '[class.mc-card_readonly]': 'readonly',\n        '[class.mc-card_selected]': 'selected',\n        '(keydown)': 'onKeyDown($event)',\n        '(click)': 'onClick($event)'\n    }\n})\nexport class McCard implements OnDestroy {\n    get tabIndex(): number | null {\n        return this.readonly ? null : this._tabIndex;\n    }\n\n    @HostBinding('attr.tabIndex')\n    @Input()\n    set tabIndex(value: number | null) {\n        this._tabIndex = value;\n    }\n\n    @Input()\n    readonly = false;\n\n    @Input()\n    selected = false;\n\n    @Output()\n    selectedChange = new EventEmitter<boolean>();\n\n    private _tabIndex: number | null = 0;\n\n    constructor(private _elementRef: ElementRef, private _focusMonitor: FocusMonitor) {\n        this._focusMonitor.monitor(this._elementRef.nativeElement, false);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this.hostElement.focus();\n    }\n\n    onClick($event: MouseEvent) {\n        if (!this.readonly) {\n            $event.stopPropagation();\n\n            this.selectedChange.emit(!this.selected);\n        }\n    }\n\n    private get hostElement() {\n        return this._elementRef.nativeElement;\n    }\n\n    onKeyDown($event: KeyboardEvent) {\n        switch ($event.keyCode) {\n            case SPACE:\n                if (!this.readonly) {\n                    $event.preventDefault();\n                    this.selectedChange.emit(!this.selected);\n                }\n                break;\n            default:\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McCard\n} from './card.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [McCard],\n    declarations: [McCard]\n})\nexport class McCardModule {}\n","import { InjectionToken } from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type McCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MC_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<McCheckboxClickAction>('mc-checkbox-click-action');\n","import {\n    AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport {\n    CanColor, CanColorCtor,\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\nimport { MC_CHECKBOX_CLICK_ACTION, McCheckboxClickAction } from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mc-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McCheckbox),\n    multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n    /** The initial state of the component before any user interaction. */\n    Init,\n    /** The state representing the component when it's becoming checked. */\n    Checked,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate\n}\n\n/** Change event object emitted by McCheckbox. */\nexport class McCheckboxChange {\n    /** The source McCheckbox of the event. */\n    source: McCheckbox;\n    /** The new `checked` value of the checkbox. */\n    checked: boolean;\n}\n\n// Boilerplate for applying mixins to McCheckbox.\n/** @docs-private */\nexport class McCheckboxBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\nexport const _McCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof McCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisabled(McCheckboxBase)));\n\n\n/**\n * A mosaic checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A McCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n */\n@Component({\n    selector: 'mc-checkbox',\n    templateUrl: 'checkbox.html',\n    styleUrls: ['checkbox.css'],\n    exportAs: 'mcCheckbox',\n    host: {\n        class: 'mc-checkbox',\n        '[id]': 'id',\n        '[attr.id]': 'id',\n        '[class.mc-indeterminate]': 'indeterminate',\n        '[class.mc-checked]': 'checked',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-checkbox-label-before]': 'labelPosition == \"before\"'\n    },\n    providers: [MC_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCheckbox extends _McCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex {\n\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     */\n    @Input('aria-label') ariaLabel: string = '';\n\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n    private _uniqueId: string = `mc-checkbox-${++nextUniqueId}`;\n\n    /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n    @Input() id: string = this._uniqueId;\n\n    /** Returns the unique id for the visual hidden input. */\n    get inputId(): string {\n        return `${this.id || this._uniqueId}-input`;\n    }\n\n    /** Whether the checkbox is required. */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    private _required: boolean;\n\n    /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n    @Input() labelPosition: 'before' | 'after' = 'after';\n\n    /** Name value will be applied to the input element if present */\n    @Input() name: string | null = null;\n\n    /** Event emitted when the checkbox's `checked` value changes. */\n    @Output() readonly change: EventEmitter<McCheckboxChange> =\n        new EventEmitter<McCheckboxChange>();\n\n    /** Event emitted when the checkbox's `indeterminate` value changes. */\n    @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** The value attribute of the native input element */\n    @Input() value: string;\n\n    /** The native `<input type=\"checkbox\">` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * @docs-private\n     */\n    _onTouched: () => any = () => {\n    }\n\n    private _currentAnimationClass: string = '';\n\n    private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n    private _controlValueAccessorChangeFn: (value: any) => void = () => {\n    }\n\n    constructor(elementRef: ElementRef,\n                private _changeDetectorRef: ChangeDetectorRef,\n                private _focusMonitor: FocusMonitor,\n                @Attribute('tabindex') tabIndex: string,\n                @Optional() @Inject(MC_CHECKBOX_CLICK_ACTION)\n                private _clickAction: McCheckboxClickAction) {\n        super(elementRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._inputElement.nativeElement)\n            .subscribe((focusOrigin) => this._onInputFocusChange(focusOrigin));\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    }\n\n    /**\n     * Whether the checkbox is checked.\n     */\n    @Input()\n    get checked(): boolean {\n        return this._checked;\n    }\n\n    set checked(value: boolean) {\n        if (value != this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _checked: boolean = false;\n\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value != this.disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    @Input()\n    get indeterminate(): boolean {\n        return this._indeterminate;\n    }\n\n    set indeterminate(value: boolean) {\n        const changed = value != this._indeterminate;\n        this._indeterminate = value;\n\n        if (changed) {\n            if (this._indeterminate) {\n                this._transitionCheckState(TransitionCheckState.Indeterminate);\n            } else {\n                this._transitionCheckState(\n                    this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n    }\n\n    private _indeterminate: boolean = false;\n\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // This method is getting called whenever the label of the checkbox changes.\n        // Since the checkbox uses the OnPush strategy we need to notify it about the change\n        // that has been recognized by the cdkObserveContent directive.\n        this._changeDetectorRef.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any) {\n        this.checked = !!value;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this._onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n    }\n\n    _getAriaChecked(): 'true' | 'false' | 'mixed' {\n        return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n    }\n\n    private _transitionCheckState(newState: TransitionCheckState) {\n        const oldState = this._currentCheckState;\n        const element: HTMLElement = this._elementRef.nativeElement;\n\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n\n        this._currentCheckState = newState;\n\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n        }\n    }\n\n    private _emitChangeEvent() {\n        const event = new McCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    }\n\n    /** Function is called whenever the focus changes for the input element. */\n    private _onInputFocusChange(focusOrigin: FocusOrigin) {\n        if (focusOrigin) {\n            this._onTouched();\n        }\n    }\n\n    /** Toggles the `checked` state of the checkbox. */\n    toggle(): void {\n        this.checked = !this.checked;\n    }\n\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event\n     */\n    _onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && this._clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && this._clickAction !== 'check') {\n\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n\n            this.toggle();\n            this._transitionCheckState(\n                this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        } else if (!this.disabled && this._clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mc-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n\n    /** Focuses the checkbox. */\n    focus(): void {\n        this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n    }\n\n    _onInteractionEvent(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n}\n","import {\n    Directive,\n    forwardRef,\n    Provider\n} from '@angular/core';\nimport {\n    CheckboxRequiredValidator,\n    NG_VALIDATORS\n} from '@angular/forms';\n\n\nexport const MC_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McCheckboxRequiredValidator),\n    multi: true\n};\n\n/**\n * Validator for Mosaic checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mc-checkbox`.\n */\n@Directive({\n    selector: `mc-checkbox[required][formControlName],\n             mc-checkbox[required][formControl], mc-checkbox[required][ngModel]`,\n    providers: [MC_CHECKBOX_REQUIRED_VALIDATOR],\n    host: { '[attr.required]': 'required ? \"\" : null' }\n})\nexport class McCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McCheckbox } from './checkbox';\nimport { McCheckboxRequiredValidator } from './checkbox-required-validator';\n\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [McCheckbox, McCheckboxRequiredValidator],\n    declarations: [McCheckbox, McCheckboxRequiredValidator]\n})\nexport class McCheckboxModule {\n}\n","import { InjectionToken } from '@angular/core';\n\n\nexport const MC_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{ value: any }>('MC_INPUT_VALUE_ACCESSOR');\n","function sanitizeNumber(value: number): number | null {\n    return !isFinite(value) || isNaN(value)\n        ? null\n        : value;\n}\n\nfunction getPrecision(value: number): number {\n    const arr = value.toString().split('.');\n\n    return arr.length === 1\n        ? 1\n        // tslint:disable-next-line:no-magic-numbers\n        :  Math.pow(10, arr[1].length);\n}\n\nfunction add(value1: number, value2: number) {\n    const precision = Math.max(getPrecision(value1), getPrecision(value2));\n\n    const res = (value1 * precision + value2 * precision) / precision;\n\n    return sanitizeNumber(res);\n}\n\nexport const stepUp = (value: number | null,\n                       max: number,\n                       min: number,\n                       step: number\n): number | null => {\n    let res;\n\n    if (value === null) {\n        res = add(min, step);\n\n        return res === null ? null : Math.min(res, max);\n    }\n\n    res = add(value, step);\n\n    return res === null ? null : Math.max(Math.min(res, max), min);\n};\n\nexport const stepDown = (value: number | null,\n                         max: number,\n                         min: number,\n                         step: number\n): number | null => {\n    let res;\n\n    if (value === null) {\n        res = add(max, -step);\n\n        return res === null ? null : Math.max(res, min);\n    }\n\n    res = add(value, -step);\n\n    return res === null ? null : Math.min(Math.max(res, min), max);\n};\n","import {\n    Attribute,\n    Directive, DoCheck, ElementRef, Inject, Input, OnChanges,\n    OnDestroy, Optional, Self\n} from '@angular/core';\nimport {\n    FormGroupDirective,\n    NgControl,\n    NgForm, NgModel\n} from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport {\n    END, C, V, X, A, DELETE, BACKSPACE, TAB, ENTER,\n    ESCAPE, ZERO, NINE, NUMPAD_ZERO, NUMPAD_NINE, NUMPAD_MINUS, DASH,\n    FF_MINUS, LEFT_ARROW, RIGHT_ARROW, HOME, UP_ARROW, DOWN_ARROW, F1, F12\n} from '@ptsecurity/cdk/keycodes';\nimport { getSupportedInputTypes, Platform } from '@ptsecurity/cdk/platform';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl, McFormFieldNumberControl } from '@ptsecurity/mosaic/form-field';\nimport { Subject } from 'rxjs';\n\nimport { getMcInputUnsupportedTypeError } from './input-errors';\nimport { MC_INPUT_VALUE_ACCESSOR } from './input-value-accessor';\nimport { stepDown, stepUp } from './stepperUtils';\n\n\nconst MC_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\n\nexport const BIG_STEP = 10;\nexport const SMALL_STEP = 1;\n\nlet nextUniqueId = 0;\n\nexport class McInputBase {\n    constructor(public defaultErrorStateMatcher: ErrorStateMatcher,\n                public parentForm: NgForm,\n                public parentFormGroup: FormGroupDirective,\n                public ngControl: NgControl) {\n    }\n}\n\nexport const _McInputMixinBase: CanUpdateErrorStateCtor & typeof McInputBase = mixinErrorState(McInputBase);\n\n\n@Directive({\n    selector: `input[mcInput][type=\"number\"]`,\n    exportAs: 'mcNumericalInput',\n    providers: [NgModel, { provide: McFormFieldNumberControl, useExisting: McNumberInput }],\n    host: {\n        '(blur)': '_focusChanged(false)',\n        '(focus)': '_focusChanged(true)',\n        '(paste)': 'onPaste($event)',\n        '(keydown)': 'onKeyDown($event)'\n    }\n})\nexport class McNumberInput implements McFormFieldNumberControl<any> {\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    @Input()\n    bigStep: number;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    @Input()\n    step: number;\n\n    @Input()\n    min: number;\n\n    @Input()\n    max: number;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    value: any;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    private readonly _host: HTMLInputElement;\n\n    constructor(\n        private _platform: Platform ,\n        private _elementRef: ElementRef,\n        private _model: NgModel,\n        @Attribute('step') step: string,\n        @Attribute('big-step') bigStep: string,\n        @Attribute('min') min: string,\n        @Attribute('max') max: string\n    ) {\n        this.step = this.isDigit(step) ? parseFloat(step) : SMALL_STEP;\n        this.bigStep = this.isDigit(bigStep) ? parseFloat(bigStep) : BIG_STEP;\n        this.min = this.isDigit(min) ? parseFloat(min) : -Infinity;\n        this.max = this.isDigit(max) ? parseFloat(max) : Infinity;\n\n        this._host = this._elementRef.nativeElement;\n\n        const self = this;\n\n        if ('valueAsNumber' in this._host) {\n            Object.defineProperty(Object.getPrototypeOf(this._host), 'valueAsNumber', {\n                // tslint:disable-next-line:no-reserved-keywords\n                get() {\n                    const res = parseFloat(self.normalizeSplitter(this.value));\n\n                    return isNaN(res) ? null : res;\n                }\n            });\n        }\n    }\n\n    _focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent) {\n        // tslint:disable-next-line:deprecation\n        const keyCode = event.keyCode;\n\n        const isCtrlA = (e) => e.keyCode === A && (e.ctrlKey || e.metaKey);\n        const isCtrlC = (e) => e.keyCode === C && (e.ctrlKey || e.metaKey);\n        const isCtrlV = (e) => e.keyCode === V && (e.ctrlKey || e.metaKey);\n        const isCtrlX = (e) => e.keyCode === X && (e.ctrlKey || e.metaKey);\n\n        const isFKey = (e) => e.keyCode >= F1 && e.keyCode <= F12;\n\n        const isNumber = (e) => (e.keyCode >= ZERO && e.keyCode <= NINE) ||\n            (e.keyCode >= NUMPAD_ZERO && e.keyCode <= NUMPAD_NINE);\n\n        const minuses = [NUMPAD_MINUS, DASH, FF_MINUS];\n        const serviceKeys = [DELETE, BACKSPACE, TAB, ESCAPE, ENTER];\n        const arrows = [LEFT_ARROW, RIGHT_ARROW];\n        const allowedKeys =  [HOME, END].concat(arrows).concat(serviceKeys).concat(minuses);\n\n        const isIEPeriod = (e) => e.key === '.' || e.key === 'Decimal';\n        const isNotIEPeriod = (e) => e.key === '.' || e.key === ',';\n\n        // Decimal is for IE\n        const isPeriod = (e) => this._platform.EDGE || this._platform.TRIDENT\n            ? isIEPeriod(e)\n            : isNotIEPeriod(e);\n\n        if (allowedKeys.indexOf(keyCode) !== -1 ||\n            isCtrlA(event) ||\n            isCtrlC(event) ||\n            isCtrlV(event) ||\n            isCtrlX(event) ||\n            isFKey(event) ||\n            isPeriod(event)\n        ) {\n            // let it happen, don't do anything\n            return;\n        }\n        // Ensure that it is not a number and stop the keypress\n        if (event.shiftKey || !isNumber(event)) {\n            event.preventDefault();\n\n            // process steps\n            const step = event.shiftKey ? this.bigStep : this.step;\n\n            if (keyCode === UP_ARROW) {\n                this.stepUp(step);\n            }\n\n            if (keyCode === DOWN_ARROW) {\n                this.stepDown(step);\n            }\n        }\n    }\n\n    onPaste(event) {\n        let value = event.clipboardData.getData('text');\n        value = this.normalizeSplitter(value);\n\n        if (!this.isDigit(value)) {\n            event.preventDefault();\n        }\n    }\n\n    stepUp(step: number) {\n        this._elementRef.nativeElement.focus();\n        const res = stepUp(this._host.valueAsNumber, this.max, this.min, step);\n        this._host.value = res === null ? '' : res.toString();\n        this._model.update.emit(this._host.valueAsNumber);\n    }\n\n    stepDown(step: number) {\n        this._elementRef.nativeElement.focus();\n        const res = stepDown(this._host.valueAsNumber, this.max, this.min, step);\n        this._host.value = res === null ? '' : res.toString();\n        this._model.update.emit(this._host.valueAsNumber);\n    }\n\n    private normalizeSplitter(value: string): string {\n        return value ? value.replace(/,/g, '.') : value;\n    }\n\n    private isDigit(value: string): boolean {\n        return this.isFloat(value) || this.isInt(value);\n    }\n\n    private isFloat(value: string): boolean {\n        return /^-?\\d+\\.\\d+$/.test(value);\n    }\n\n    private isInt(value: string): boolean {\n        return /^-?\\d+$/.test(value);\n    }\n}\n\n@Directive({\n    selector: `input[mcInput]`,\n    exportAs: 'mcInput',\n    host: {\n        class: 'mc-input',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '(blur)': '_focusChanged(false)',\n        '(focus)': '_focusChanged(true)',\n        '(input)': '_onInput()'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McInput }]\n})\nexport class McInput extends _McInputMixinBase implements McFormFieldControl<any>, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-input';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this._uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    // tslint:disable no-reserved-keywords\n    /** Input type of the element. */\n    @Input()\n    get type(): string {\n        return this._type;\n    }\n\n    set type(value: string) {\n        this._type = value || 'text';\n        this._validateType();\n\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    // tslint:enable no-reserved-keywords\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this._inputValueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n\n    protected _uid = `mc-input-${nextUniqueId++}`;\n    protected _previousNativeValue: any;\n    protected _disabled = false;\n    protected _id: string;\n    protected _required = false;\n    protected _type = 'text';\n    protected _neverEmptyInputTypes = [\n        'date',\n        'datetime',\n        'datetime-local',\n        'month',\n        'time',\n        'week'\n    ].filter((t) => getSupportedInputTypes().has(t));\n\n    private _inputValueAccessor: { value: any };\n\n    constructor(protected _elementRef: ElementRef,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() parentForm: NgForm,\n                @Optional() parentFormGroup: FormGroupDirective,\n                defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_INPUT_VALUE_ACCESSOR) inputValueAccessor: any) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n        this._previousNativeValue = this.value;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n    }\n\n    /** Focuses the input. */\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Does some manual dirty checking on the native input `value` property. */\n    protected _dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Make sure the input is a supported type. */\n    protected _validateType() {\n        if (MC_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n            throw getMcInputUnsupportedTypeError(this._type);\n        }\n    }\n\n    /** Checks whether the input type is one of the types that are never empty. */\n    protected _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n\n    /** Checks whether the input is invalid based on the native validation. */\n    protected _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        const validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n\n        return validity && validity.badInput;\n    }\n}\n\n@Directive({\n    selector: 'input[mcInputMonospace]',\n    exportAs: 'McInputMonospace',\n    host: { class: 'mc-input_monospace' }\n})\nexport class McInputMono {\n}\n","import { Directive, forwardRef, Input, OnChanges, Provider, SimpleChanges } from '@angular/core';\nimport { AbstractControl, NG_VALIDATORS, ValidationErrors, Validator, ValidatorFn, Validators } from '@angular/forms';\n\n\nexport const MIN_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MinValidator),\n    multi: true\n};\n\n/**\n * A directive which installs the {@link MinValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `min` attribute.\n *\n * @experimental\n */\n@Directive({\n    selector: '[min][formControlName],[min][formControl],[min][ngModel]',\n    providers: [MIN_VALIDATOR],\n    host: {'[attr.min]': 'min ? min : null'}\n})\nexport class MinValidator implements Validator, OnChanges {\n\n    @Input() min: string;\n    private _validator: ValidatorFn;\n    private _onChange: () => void;\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('min' in changes) {\n            this._createValidator();\n            if (this._onChange) { this._onChange(); }\n        }\n    }\n\n    validate(c: AbstractControl): ValidationErrors | null { return this._validator(c); }\n\n    registerOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n\n    private _createValidator(): void { this._validator = Validators.min(parseInt(this.min, 10)); }\n}\n\n\nexport const MAX_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MaxValidator),\n    multi: true\n};\n\n/**\n * A directive which installs the {@link MaxValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `min` attribute.\n *\n * @experimental\n */\n@Directive({\n    selector: '[max][formControlName],[max][formControl],[max][ngModel]',\n    providers: [MAX_VALIDATOR],\n    host: {\n        '[attr.max]': 'max ? max : null'\n    }\n})\nexport class MaxValidator implements Validator,\n    OnChanges {\n\n    @Input() max: string;\n    private _validator: ValidatorFn;\n    private _onChange: () => void;\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('max' in changes) {\n            this._createValidator();\n            if (this._onChange) { this._onChange(); }\n        }\n    }\n\n    validate(c: AbstractControl): ValidationErrors | null { return this._validator(c); }\n\n    registerOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n\n    private _createValidator(): void { this._validator = Validators.max(parseInt(this.max, 10)); }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McInput, McInputMono, McNumberInput } from './input';\nimport { MaxValidator, MinValidator } from './input-number-validators';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule, FormsModule],\n    exports: [McInput, McNumberInput, McInputMono, MinValidator, MaxValidator],\n    declarations: [McInput, McNumberInput, McInputMono, MinValidator, MaxValidator ]\n})\nexport class McInputModule {\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({ providedIn: 'root' })\nexport class McDatepickerIntl {\n    /**\n     * Stream that emits whenever the labels here are changed. Use this to notify\n     * components if the labels have changed after initialization.\n     */\n    readonly changes: Subject<void> = new Subject<void>();\n\n    /** A label for the calendar popup (used by screen readers). */\n    calendarLabel: string = 'Calendar';\n\n    /** A label for the button used to open the calendar popup (used by screen readers). */\n    openCalendarLabel: string = 'Open calendar';\n\n    /** A label for the previous month button (used by screen readers). */\n    prevMonthLabel: string = 'Previous month';\n\n    /** A label for the next month button (used by screen readers). */\n    nextMonthLabel: string = 'Next month';\n\n    /** A label for the previous year button (used by screen readers). */\n    prevYearLabel: string = 'Previous year';\n\n    /** A label for the next year button (used by screen readers). */\n    nextYearLabel: string = 'Next year';\n\n    /** A label for the previous multi-year button (used by screen readers). */\n    prevMultiYearLabel: string = 'Previous 20 years';\n\n    /** A label for the next multi-year button (used by screen readers). */\n    nextMultiYearLabel: string = 'Next 20 years';\n\n    /** A label for the 'switch to month view' button (used by screen readers). */\n    switchToMonthViewLabel: string = 'Choose date';\n\n    /** A label for the 'switch to year view' button (used by screen readers). */\n    switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","// tslint:disable:no-magic-numbers\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    Output,\n    ViewEncapsulation,\n    NgZone,\n    OnChanges,\n    SimpleChanges\n} from '@angular/core';\nimport { take } from 'rxjs/operators';\n\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type McCalendarCellCssClasses = string | string[] | Set<string> | { [key: string]: any };\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class McCalendarCell {\n    constructor(\n        public value: number,\n        public displayValue: string,\n        public ariaLabel: string,\n        public enabled: boolean,\n        public cssClasses?: McCalendarCellCssClasses\n    ) {\n    }\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n    selector: '[mc-calendar-body]',\n    templateUrl: 'calendar-body.html',\n    styleUrls: ['calendar-body.css'],\n    host: {\n        class: 'mc-calendar__body',\n        role: 'grid',\n        'aria-readonly': 'true'\n    },\n    exportAs: 'mcCalendarBody',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCalendarBody implements OnChanges {\n    /** The label for the table. (e.g. \"Jan 2017\"). */\n    @Input() label: string;\n\n    /** The cells to display in the table. */\n    @Input() rows: McCalendarCell[][];\n\n    /** The value in the table that corresponds to today. */\n    @Input() todayValue: number;\n\n    /** The value in the table that is currently selected. */\n    @Input() selectedValue: number;\n\n    /** The minimum number of free cells needed to fit the label in the first row. */\n    @Input() labelMinRequiredCells: number;\n\n    /** The number of columns in the table. */\n    @Input() numCols = 7;\n\n    /** The cell number of the active cell in the table. */\n    @Input() activeCell = 0;\n\n    /**\n     * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n     * maintained even as the table resizes.\n     */\n    @Input() cellAspectRatio = 1;\n\n    /** Emits when a new value is selected. */\n    @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n    /** The number of blank cells to put at the beginning for the first row. */\n    firstRowOffset: number;\n\n    /** Padding for the individual date cells. */\n    cellPadding: string;\n\n    /** Width of an individual cell. */\n    cellWidth: string;\n\n    constructor(private elementRef: ElementRef<HTMLElement>, private ngZone: NgZone) {\n    }\n\n    cellClicked(cell: McCalendarCell): void {\n        if (cell.enabled) {\n            this.selectedValueChange.emit(cell.value);\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const columnChanges = changes.numCols;\n        // tslint:disable-next-line:no-this-assignment\n        const { rows, numCols } = this;\n\n        if (changes.rows || columnChanges) {\n            this.firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n        }\n\n        if (changes.cellAspectRatio || columnChanges || !this.cellPadding) {\n            this.cellPadding = `${this.cellAspectRatio * 50 / numCols}%`;\n        }\n\n        if (columnChanges || !this.cellWidth) {\n            this.cellWidth = `${100 / numCols}%`;\n        }\n    }\n\n    isActiveCell(rowIndex: number, colIndex: number): boolean {\n        let cellNumber = rowIndex * this.numCols + colIndex;\n\n        // Account for the fact that the first row may not have as many cells.\n        if (rowIndex) {\n            cellNumber -= this.firstRowOffset;\n        }\n\n        return cellNumber === this.activeCell;\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.ngZone.runOutsideAngular(() => {\n            this.ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n                const activeCell: HTMLElement | null =\n                    this.elementRef.nativeElement.querySelector('.mc-calendar__body_active');\n\n                if (activeCell) {\n                    activeCell.focus();\n                }\n            });\n        });\n    }\n}\n","// tslint:disable:no-magic-numbers\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Inject,\n    Input,\n    Optional,\n    Output,\n    ViewEncapsulation,\n    ViewChild\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    PAGE_DOWN,\n    PAGE_UP,\n    RIGHT_ARROW,\n    UP_ARROW,\n    SPACE\n} from '@ptsecurity/cdk/keycodes';\n\nimport { McCalendarBody, McCalendarCell, McCalendarCellCssClasses } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-month-view',\n    templateUrl: 'month-view.html',\n    exportAs: 'mcMonthView',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McMonthView<D> implements AfterContentInit {\n    /**\n     * The date to display in this month view (everything other than the month and year is ignored).\n     */\n    @Input()\n    get activeDate(): D {\n        return this._activeDate;\n    }\n\n    set activeDate(value: D) {\n        const oldActiveDate = this._activeDate;\n        const validDate =\n            this.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();\n        this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n        if (!this.hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n            this.init();\n        }\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.selectedDate = this.getDateInCurrentMonth(this._selected);\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** Function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Function that can be used to add custom CSS classes to dates. */\n    @Input() dateClass: (date: D) => McCalendarCellCssClasses;\n\n    /** Emits when a new date is selected. */\n    @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n    /** Emits when any date is selected. */\n    @Output() readonly userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Emits when any date is activated. */\n    @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** The body of calendar table */\n    @ViewChild(McCalendarBody) mcCalendarBody: McCalendarBody;\n\n    /** The label for this month (e.g. \"January 2017\"). */\n    monthLabel: string;\n\n    /** Grid of calendar cells representing the dates of the month. */\n    weeks: McCalendarCell[][];\n\n    /** The number of blank cells in the first row before the 1st of the month. */\n    firstWeekOffset: number;\n\n    /**\n     * The date of the month that the currently selected Date falls on.\n     * Null if the currently selected Date is in another month.\n     */\n    selectedDate: number | null;\n\n    /** The date of the month that today falls on. Null if today is in another month. */\n    todayDate: number | null;\n\n    /** The names of the weekdays. */\n    weekdays: { long: string; narrow: string }[];\n    private _activeDate: D;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() private dir?: Directionality\n    ) {\n\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        const firstDayOfWeek = this.dateAdapter.getFirstDayOfWeek();\n        const narrowWeekdays = this.dateAdapter.getDayOfWeekNames('narrow');\n        const longWeekdays = this.dateAdapter.getDayOfWeekNames('long');\n\n        // Rotate the labels for days of the week based on the configured first day of the week.\n        const weekdays = longWeekdays.map((long, i) => {\n            return { long, narrow: narrowWeekdays[i] };\n        });\n        this.weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n        this._activeDate = this.dateAdapter.today();\n    }\n\n    ngAfterContentInit() {\n        this.init();\n    }\n\n    /** Handles when a new date is selected. */\n    dateSelected(date: number) {\n        if (this.selectedDate !== date) {\n            const selectedYear = this.dateAdapter.getYear(this.activeDate);\n            const selectedMonth = this.dateAdapter.getMonth(this.activeDate);\n            const selectedDate = this.dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n            this.selectedChange.emit(selectedDate);\n        }\n\n        this.userSelection.emit();\n    }\n\n    /** Handles keydown events on the calendar body when calendar is in month view. */\n    handleCalendarBodyKeydown(event: KeyboardEvent): void {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n        const oldActiveDate = this._activeDate;\n        const isRtl = this.isRtl();\n\n        // tslint:disable-next-line:deprecation\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, -7);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, 7);\n                break;\n            case HOME:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate,\n                    1 - this.dateAdapter.getDate(this._activeDate));\n                break;\n            case END:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate,\n                    (this.dateAdapter.getNumDaysInMonth(this._activeDate) -\n                        this.dateAdapter.getDate(this._activeDate)));\n                break;\n            case PAGE_UP:\n                this.activeDate = event.altKey ?\n                    this.dateAdapter.addCalendarYears(this._activeDate, -1) :\n                    this.dateAdapter.addCalendarMonths(this._activeDate, -1);\n                break;\n            case PAGE_DOWN:\n                this.activeDate = event.altKey ?\n                    this.dateAdapter.addCalendarYears(this._activeDate, 1) :\n                    this.dateAdapter.addCalendarMonths(this._activeDate, 1);\n                break;\n            case ENTER:\n            case SPACE:\n                if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n                    this.dateSelected(this.dateAdapter.getDate(this._activeDate));\n                    this.userSelection.emit();\n                    // Prevent unexpected default actions such as form submission.\n                    event.preventDefault();\n                }\n\n                return;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n\n        if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n\n        this.focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n\n    /** Initializes this month view. */\n    init() {\n        this.selectedDate = this.getDateInCurrentMonth(this.selected);\n        this.todayDate = this.getDateInCurrentMonth(this.dateAdapter.today());\n        this.monthLabel =\n            this.dateAdapter.getMonthNames('short')[this.dateAdapter.getMonth(this.activeDate)];\n\n        this.monthLabel = this.monthLabel[0].toLocaleUpperCase() + this.monthLabel.substr(1);\n\n        const firstOfMonth = this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate),\n            this.dateAdapter.getMonth(this.activeDate), 1);\n        this.firstWeekOffset =\n            (DAYS_PER_WEEK + this.dateAdapter.getDayOfWeek(firstOfMonth) -\n                this.dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n        this.createWeekCells();\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.mcCalendarBody.focusActiveCell();\n    }\n\n    /** Creates McCalendarCells for the dates in this month. */\n    private createWeekCells() {\n        const daysInMonth = this.dateAdapter.getNumDaysInMonth(this.activeDate);\n        const dateNames = this.dateAdapter.getDateNames();\n\n        this.weeks = [[]];\n\n        for (let i = 0, cell = this.firstWeekOffset; i < daysInMonth; i++, cell++) {\n            if (cell === DAYS_PER_WEEK) {\n                this.weeks.push([]);\n                cell = 0;\n            }\n            const date = this.dateAdapter.createDate(\n                this.dateAdapter.getYear(this.activeDate),\n                this.dateAdapter.getMonth(this.activeDate), i + 1);\n            const enabled = this.shouldEnableDate(date);\n            const ariaLabel = this.dateAdapter.format(date, this.dateFormats.display.dateA11yLabel);\n            const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n            this.weeks[this.weeks.length - 1]\n                .push(new McCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n        }\n    }\n\n    /** Date filter for the month */\n    private shouldEnableDate(date: D): boolean {\n        return !!date &&\n            (!this.dateFilter || this.dateFilter(date)) &&\n            (!this.minDate || this.dateAdapter.compareDate(date, this.minDate) >= 0) &&\n            (!this.maxDate || this.dateAdapter.compareDate(date, this.maxDate) <= 0);\n    }\n\n    /**\n     * Gets the date in this month that the given Date falls on.\n     * Returns null if the given Date is in another month.\n     */\n    private getDateInCurrentMonth(date: D | null): number | null {\n        return date && this.hasSameMonthAndYear(date, this.activeDate) ?\n            this.dateAdapter.getDate(date) : null;\n    }\n\n    /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n    private hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n        return !!(d1 && d2 && this.dateAdapter.getMonth(d1) === this.dateAdapter.getMonth(d2) &&\n            this.dateAdapter.getYear(d1) === this.dateAdapter.getYear(d2));\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Determines whether the user has the RTL layout direction. */\n    private isRtl() {\n        return this.dir && this.dir.value === 'rtl';\n    }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ActiveDescendantKeyManager } from '@ptsecurity/cdk/a11y';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { MC_OPTION_PARENT_COMPONENT, McOptgroup, McOption } from '@ptsecurity/mosaic/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet uniqueAutocompleteIdCounter = 0;\n\nexport class McAutocompleteSelectedEvent {\n    constructor(public source: McAutocomplete, public option: McOption) {}\n}\n\n/** Default `mc-autocomplete` options that can be overridden. */\n// tslint:disable-next-line naming-convention\nexport interface McAutocompleteDefaultOptions {\n    /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n    autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mc-autocomplete`. */\nexport const MC_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<McAutocompleteDefaultOptions>('mc-autocomplete-default-options', {\n        providedIn: 'root',\n        factory: MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY\n    });\n\n// tslint:disable-next-line naming-convention\nexport function MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): McAutocompleteDefaultOptions {\n    return { autoActiveFirstOption: true };\n}\n\n@Component({\n    selector: 'mc-autocomplete',\n    exportAs: 'mcAutocomplete',\n    templateUrl: 'autocomplete.html',\n    styleUrls: ['autocomplete.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: { class: 'mc-autocomplete' },\n    providers: [\n        { provide: MC_OPTION_PARENT_COMPONENT, useExisting: McAutocomplete }\n    ]\n})\nexport class McAutocomplete implements AfterContentInit {\n    /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n    id: string = `mc-autocomplete-${uniqueAutocompleteIdCounter++}`;\n\n    /** Manages active item in option list based on key events. */\n    keyManager: ActiveDescendantKeyManager<McOption>;\n\n    /** Whether the autocomplete panel should be visible, depending on option length. */\n    showPanel: boolean = false;\n\n    @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n    @ViewChild('panel') panel: ElementRef;\n\n    @ContentChildren(McOption, { descendants: true }) options: QueryList<McOption>;\n\n    @ContentChildren(McOptgroup) optionGroups: QueryList<McOptgroup>;\n\n    /** Function that maps an option's control value to its display value in the trigger. */\n    @Input() displayWith: ((value: any) => string) | null = null;\n\n    /**\n     * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n     * match the width of its host.\n     */\n    @Input() panelWidth: string | number;\n\n    /** Event that is emitted whenever an option from the list is selected. */\n    @Output() readonly optionSelected: EventEmitter<McAutocompleteSelectedEvent> =\n        new EventEmitter<McAutocompleteSelectedEvent>();\n\n    /** Event that is emitted when the autocomplete panel is opened. */\n    @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Event that is emitted when the autocomplete panel is closed. */\n    @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n    /**\n     * Takes classes set on the host mc-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    get classList() {\n        return this._classList;\n    }\n\n    @Input('class')\n    set classList(value: string) {\n        if (value && value.length) {\n            value.split(' ')\n                .forEach((className) => this._classList[className.trim()] = true);\n\n            this.elementRef.nativeElement.className = '';\n        }\n    }\n\n    private _classList: any = {};\n\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MC_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     */\n    @Input()\n    get autoActiveFirstOption(): boolean {\n        return this._autoActiveFirstOption;\n    }\n\n    set autoActiveFirstOption(value: boolean) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n\n    private _autoActiveFirstOption: boolean;\n\n    get isOpen(): boolean {\n        return this._isOpen && this.showPanel;\n    }\n\n    set isOpen(value: boolean) {\n        this._isOpen = value;\n    }\n\n    private _isOpen: boolean = false;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        private elementRef: ElementRef<HTMLElement>,\n        @Inject(MC_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: McAutocompleteDefaultOptions\n    ) {\n        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    }\n\n    ngAfterContentInit() {\n        this.keyManager = new ActiveDescendantKeyManager<McOption>(this.options);\n        this.setVisibility();\n    }\n\n    setScrollTop(scrollTop: number): void {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n\n    getScrollTop(): number {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n\n    setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._classList['mc-autocomplete_visible'] = this.showPanel;\n        this._classList['mc-autocomplete_hidden'] = !this.showPanel;\n\n        this.changeDetectorRef.markForCheck();\n    }\n\n    emitSelectEvent(option: McOption): void {\n        const event = new McAutocompleteSelectedEvent(this, option);\n\n        this.optionSelected.emit(event);\n    }\n\n    onKeydown(event: KeyboardEvent): any {\n        this.keyManager.onKeydown(event);\n    }\n}\n\n","import { Directive, ElementRef } from '@angular/core';\n\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n    selector: '[mcAutocompleteOrigin]',\n    exportAs: 'mcAutocompleteOrigin'\n})\nexport class McAutocompleteOrigin {\n    constructor(public elementRef: ElementRef<HTMLElement>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { McOptionModule, McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McAutocompleteOrigin } from './autocomplete-origin.directive';\nimport {\n    McAutocompleteTrigger,\n    MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './autocomplete-trigger.directive';\nimport { McAutocomplete } from './autocomplete.component';\n\n\n@NgModule({\n    imports: [McOptionModule, OverlayModule, McCommonModule, CommonModule],\n    exports: [\n        McAutocomplete,\n        McOptionModule,\n        McAutocompleteTrigger,\n        McAutocompleteOrigin,\n        McCommonModule\n    ],\n    declarations: [McAutocomplete, McAutocompleteTrigger, McAutocompleteOrigin],\n    providers: [MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class McAutocompleteModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    OnDestroy,\n    ViewEncapsulation\n} from '@angular/core';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { mixinColor, mixinDisabled, CanColor, CanDisable, CanDisableCtor, CanColorCtor } from '@ptsecurity/mosaic/core';\n\n\n@Directive({\n    selector: 'button[mc-button], a[mc-button]',\n    host: {\n        '[class.mc-button]': '!isIconButton',\n        '[class.mc-icon-button]': 'isIconButton'\n    }\n})\nexport class McButtonCssStyler {\n    nativeElement: Element;\n\n    get isIconButton(): boolean {\n        return this.icons.length > 0;\n    }\n\n    private icons: HTMLElement[] = [];\n\n    constructor(elementRef: ElementRef) {\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        /**\n         * Here we had to use native selectors due to number of angular issues about ContentChildren limitations\n         * https://github.com/angular/angular/issues/16299\n         * https://github.com/angular/angular/issues/8563\n         * https://github.com/angular/angular/issues/14769\n         */\n        this.icons = Array.from(this.nativeElement.querySelectorAll('.mc-icon'));\n        this.addClassModificatorForIcons();\n    }\n\n    private addClassModificatorForIcons() {\n        const twoIcons = 2;\n\n        if (this.icons.length === 1) {\n            const iconElement = this.icons[0];\n            const COMMENT_NODE = 8;\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling && iconElement.nextSibling.nodeType !== COMMENT_NODE) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-icon-button_left');\n                }\n\n                if (iconElement.previousSibling && iconElement.previousSibling.nodeType !== COMMENT_NODE) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-icon-button_right');\n                }\n            }\n        } else if (this.icons.length === twoIcons) {\n            const firstIconElement = this.icons[0];\n            const secondIconElement = this.icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n}\n\nexport class McButtonBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {}\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McButtonMixinBase:\n    CanDisableCtor &\n    CanColorCtor &\n    typeof McButtonBase =\n        mixinColor(mixinDisabled(McButtonBase));\n\n\n@Component({\n    selector: 'button[mc-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[disabled]': 'disabled || null'\n    }\n})\nexport class McButton extends McButtonMixinBase implements OnDestroy, CanDisable, CanColor {\n    constructor(elementRef: ElementRef, private _focusMonitor: FocusMonitor) {\n        super(elementRef);\n\n        this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this.getHostElement().focus();\n    }\n\n    getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n\n\n@Component({\n    selector: 'a[mc-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[attr.tabindex]': 'disabled ? -1 : 0',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': 'haltDisabledEvents($event)'\n    }\n})\nexport class McAnchor extends McButton {\n    constructor(focusMonitor: FocusMonitor, elementRef: ElementRef) {\n        super(elementRef, focusMonitor);\n    }\n\n    haltDisabledEvents(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McButton,\n    McAnchor,\n    McButtonCssStyler\n} from './button.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McButton,\n        McAnchor,\n        McButtonCssStyler\n    ],\n    declarations: [\n        McButton,\n        McAnchor,\n        McButtonCssStyler\n    ]\n})\nexport class McButtonModule {}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    ViewEncapsulation,\n    ViewChild\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { McButton } from '@ptsecurity/mosaic/button';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/**\n * Provider Expression that allows mc-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McButtonToggleGroup),\n    multi: true\n};\n\n/** Change event object emitted by MсButtonToggle. */\nexport class McButtonToggleChange {\n    constructor(\n        /** The MсButtonToggle that emits the event. */\n        public source: McButtonToggle,\n        /** The value assigned to the MсButtonToggle. */\n        public value: any) {\n    }\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n    selector: 'mc-button-toggle-group',\n    providers: [MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n    host: {\n        role: 'group',\n        class: 'mc-button-toggle-group',\n        '[class.mc-button-toggle-vertical]': 'vertical'\n    },\n    exportAs: 'mcButtonToggleGroup'\n})\nexport class McButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n\n    /** Whether the toggle group is vertical. */\n    @Input()\n    get vertical(): boolean {\n        return this._vertical;\n    }\n\n    set vertical(value: boolean) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n\n    /** Value of the toggle group. */\n    @Input()\n    get value(): any {\n        const selected = this.selectionModel ? this.selectionModel.selected : [];\n\n        if (this.multiple) {\n            return selected.map((toggle) => toggle.value);\n        }\n\n        return selected[0] ? selected[0].value : undefined;\n    }\n\n    set value(newValue: any) {\n        this.setSelectionByValue(newValue);\n        this.valueChange.emit(this.value);\n    }\n\n    /** Selected button toggles in the group. */\n    get selected(): any {\n        const selected = this.selectionModel.selected;\n\n        return this.multiple ? selected : (selected[0] || null);\n    }\n\n    /** Whether multiple button toggles can be selected. */\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    /** Child button toggle buttons. */\n    @ContentChildren(forwardRef(() => McButtonToggle)) buttonToggles: QueryList<McButtonToggle>;\n\n    /** Whether multiple button toggle group is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        if (!this.buttonToggles) {\n            return;\n        }\n\n        this.buttonToggles.forEach((toggle) => toggle.markForCheck());\n    }\n\n    /**\n     * Event that emits whenever the value of the group changes.\n     * Used to facilitate two-way data binding.\n     * @docs-private\n     */\n    @Output() readonly valueChange = new EventEmitter<any>();\n\n    /** Event emitted when the group's value changes. */\n    @Output() readonly change: EventEmitter<McButtonToggleChange> =\n        new EventEmitter<McButtonToggleChange>();\n    private _vertical = false;\n    private _multiple = false;\n    private _disabled = false;\n    private selectionModel: SelectionModel<McButtonToggle>;\n\n    /**\n     * Reference to the raw value that the consumer tried to assign. The real\n     * value will exclude any values from this one that don't correspond to a\n     * toggle. Useful for the cases where the value is assigned before the toggles\n     * have been initialized or at the same that they're being swapped out.\n     */\n    private rawValue: any;\n\n    constructor(private _changeDetector: ChangeDetectorRef) {}\n\n    /**\n     * The method to be called in order to update ngModel.\n     * Now `ngModel` binding is not supported in multiple selection mode.\n     */\n    // tslint:disable-next-line:no-empty\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n    // tslint:disable-next-line:no-empty\n    onTouched: () => any = () => {};\n\n    ngOnInit() {\n        this.selectionModel = new SelectionModel<McButtonToggle>(this.multiple, undefined, false);\n    }\n\n    ngAfterContentInit() {\n        this.selectionModel.select(...this.buttonToggles.filter((toggle) => toggle.checked));\n        this.disabled = this._disabled;\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value Value to be set to the model.\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        const selected = this.selected;\n        const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n        const event = new McButtonToggleChange(source, this.value);\n        this.controlValueAccessorChangeFn(event.value);\n        this.change.emit(event);\n    }\n\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param toggle Toggle to be synced.\n     * @param select Whether the toggle should be selected.\n     * @param isUserInput Whether the change was a result of a user interaction.\n     */\n    syncButtonToggle(toggle: McButtonToggle, select: boolean, isUserInput = false) {\n        // Deselect the currently-selected toggle, if we're in single-selection\n        // mode and the button being toggled isn't selected at the moment.\n        if (!this.multiple && this.selected && !toggle.checked) {\n            (this.selected as McButtonToggle).checked = false;\n        }\n\n        if (select) {\n            this.selectionModel.select(toggle);\n        } else {\n            this.selectionModel.deselect(toggle);\n        }\n\n        // Only emit the change event for user input.\n        if (isUserInput) {\n            this.emitChangeEvent();\n        }\n\n        // Note: we emit this one no matter whether it was a user interaction, because\n        // it is used by Angular to sync up the two-way data binding.\n        this.valueChange.emit(this.value);\n    }\n\n    /** Checks whether a button toggle is selected. */\n    isSelected(toggle: McButtonToggle) {\n        return this.selectionModel.isSelected(toggle);\n    }\n\n    /** Determines whether a button toggle should be checked on init. */\n    isPrechecked(toggle: McButtonToggle) {\n        if (this.rawValue === undefined) {\n            return false;\n        }\n\n        if (this.multiple && Array.isArray(this.rawValue)) {\n            return this.rawValue.some((value) => toggle.value != null && value === toggle.value);\n        }\n\n        return toggle.value === this.rawValue;\n    }\n\n    /** Updates the selection state of the toggles in the group based on a value. */\n    private setSelectionByValue(value: any | any[]) {\n        this.rawValue = value;\n\n        if (!this.buttonToggles) {\n            return;\n        }\n\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw Error('Value must be an array in multiple-selection mode.');\n            }\n\n            this.clearSelection();\n            value.forEach((currentValue: any) => this.selectValue(currentValue));\n        } else {\n            this.clearSelection();\n            this.selectValue(value);\n        }\n    }\n\n    /** Clears the selected toggles. */\n    private clearSelection() {\n        this.selectionModel.clear();\n        this.buttonToggles.forEach((toggle) => toggle.checked = false);\n    }\n\n    /** Selects a value if there's a toggle that corresponds to it. */\n    private selectValue(value: any) {\n        const correspondingOption = this.buttonToggles.find((toggle) => {\n            return toggle.value != null && toggle.value === value;\n        });\n\n        if (correspondingOption) {\n            correspondingOption.checked = true;\n            this.selectionModel.select(correspondingOption);\n        }\n    }\n}\n\n/** Single button inside of a toggle group. */\n@Component({\n    selector: 'mc-button-toggle',\n    template: `\n        <button\n            mc-button\n            type=\"button\"\n            [disabled]=\"disabled\"\n            [attr.tabindex]=\"disabled ? -1 : tabIndex\"\n            (click)=\"onToggleClick()\">\n            <ng-content></ng-content>\n        </button>\n    `,\n    styleUrls: ['button-toggle.css'],\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcButtonToggle',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[class.mc-button-toggle-standalone]': '!buttonToggleGroup',\n        '[class.mc-button-toggle-checked]': 'checked',\n        class: 'mc-button-toggle',\n        // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n        // but can still receive focus from things like cdkFocusInitial.\n        '[attr.tabindex]': '-1',\n        '[attr.disabled]': 'disabled || null',\n        '(focus)': 'focus()'\n    }\n})\nexport class McButtonToggle implements OnInit, OnDestroy {\n\n    /** Whether the button is checked. */\n    @Input()\n    get checked(): boolean {\n        return this.buttonToggleGroup ? this.buttonToggleGroup.isSelected(this) : this._checked;\n    }\n\n    set checked(value: boolean) {\n        const newValue = coerceBooleanProperty(value);\n\n        if (newValue !== this._checked) {\n            this._checked = newValue;\n\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup.syncButtonToggle(this, this._checked);\n            }\n\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    // tslint:disable-next-line:no-reserved-keywords\n    type: ToggleType;\n\n    @ViewChild(McButton) mcButton: McButton;\n\n    /** McButtonToggleGroup reads this to assign its own value. */\n    @Input() value: any;\n\n    /** Tabindex for the toggle. */\n    @Input() tabIndex: number | null;\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n    }\n    set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n\n    /** Event emitted when the group value changes. */\n    @Output() readonly change: EventEmitter<McButtonToggleChange> =\n        new EventEmitter<McButtonToggleChange>();\n\n    private isSingleSelector = false;\n    private _checked = false;\n    private _disabled: boolean = false;\n\n    constructor(\n        @Optional() public buttonToggleGroup: McButtonToggleGroup,\n        private changeDetectorRef: ChangeDetectorRef,\n        private focusMonitor: FocusMonitor,\n        private element: ElementRef\n    ) {}\n\n    ngOnInit() {\n        this.isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n        this.type = this.isSingleSelector ? 'radio' : 'checkbox';\n\n        if (this.buttonToggleGroup && this.buttonToggleGroup.isPrechecked(this)) {\n            this.checked = true;\n        }\n\n        this.focusMonitor.monitor(this.element.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        const group = this.buttonToggleGroup;\n\n        this.focusMonitor.stopMonitoring(this.element.nativeElement);\n\n        // Remove the toggle from the selection once it's destroyed. Needs to happen\n        // on the next tick in order to avoid \"changed after checked\" errors.\n        if (group && group.isSelected(this)) {\n            Promise.resolve().then(() => group.syncButtonToggle(this, false));\n        }\n    }\n\n    /** Focuses the button. */\n    focus(): void {\n        this.element.nativeElement.focus();\n    }\n\n    /** Checks the button toggle due to an interaction with the underlying native button. */\n    onToggleClick() {\n        if (this.disabled) {\n            return;\n        }\n\n        const newChecked = this.isSingleSelector ? true : !this._checked;\n\n        if (newChecked !== this._checked) {\n            this._checked = newChecked;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup.syncButtonToggle(this, this._checked, true);\n                this.buttonToggleGroup.onTouched();\n            }\n        }\n        // Emit a change event when it's the single selector\n        this.change.emit(new McButtonToggleChange(this, this.value));\n    }\n\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When the group value changes, the button will not be notified.\n        // Use `markForCheck` to explicit update button toggle's status.\n        this.changeDetectorRef.markForCheck();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { McButtonModule } from '@ptsecurity/mosaic/button';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McButtonToggle, McButtonToggleGroup } from './button-toggle.component';\n\n\n@NgModule({\n    imports: [McCommonModule, McButtonModule],\n    exports: [McCommonModule, McButtonToggleGroup, McButtonToggle],\n    declarations: [McButtonToggleGroup, McButtonToggle]\n})\nexport class McButtonToggleModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","\nexport function isBoolean(val: any): val is boolean { return typeof val === 'boolean'; }\n\nexport function toBoolean(value: any): boolean {\n    return value != null && `${value}` !== 'false';\n}\n","import { NgModule, InjectionToken, Optional, Inject, isDevMode } from '@angular/core';\nimport { BidiModule } from '@ptsecurity/cdk/bidi';\n\n\n// Injection token that configures whether the Mosaic sanity checks are enabled.\nexport const MC_SANITY_CHECKS = new InjectionToken<boolean>('mc-sanity-checks', {\n    providedIn: 'root',\n    factory: MC_SANITY_CHECKS_FACTORY\n});\n\nexport function MC_SANITY_CHECKS_FACTORY(): boolean {\n    return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Mosaic\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., McTabsModule).\n */\n@NgModule({\n    imports: [ BidiModule ],\n    exports: [ BidiModule ]\n})\nexport class McCommonModule {\n    // Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n    private _hasDoneGlobalChecks = false;\n\n    // Reference to the global `document` object.\n    private _document = typeof document === 'object' && document ? document : null;\n\n    // Reference to the global 'window' object.\n    private _window = typeof window === 'object' && window ? window : null;\n\n    constructor(@Optional() @Inject(MC_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n        if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n            this._checkDoctypeIsDefined();\n            this._checkThemeIsPresent();\n            this._hasDoneGlobalChecks = true;\n        }\n    }\n\n    // Whether any sanity checks are enabled\n    private _areChecksEnabled(): boolean {\n        return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n    }\n\n    // Whether the code is running in tests.\n    private _isTestEnv() {\n        // tslint:disable-next-line\n        return this._window && (this._window['__karma__'] || this._window['jasmine']);\n    }\n\n    private _checkDoctypeIsDefined(): void {\n        if (this._document && !this._document.doctype) {\n            console.warn(\n                'Current document does not have a doctype. This may cause ' +\n                'some Mosaic components not to behave as expected.'\n            );\n        }\n    }\n\n    private _checkThemeIsPresent(): void {\n        if (this._document && typeof getComputedStyle === 'function') {\n            const testElement = this._document.createElement('div');\n\n            testElement.classList.add('mc-theme-loaded-marker');\n            this._document.body.appendChild(testElement);\n\n            const computedStyle = getComputedStyle(testElement);\n\n            // In some situations, the computed style of the test element can be null. For example in\n            // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n            // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n            if (computedStyle && computedStyle.display !== 'none') {\n                console.warn(\n                    'Could not find Mosaic core theme. Most Mosaic ' +\n                    'components may not work as expected. For more info refer ' +\n                    'to the theming guide: link there'\n                );\n            }\n\n            this._document.body.removeChild(testElement);\n        }\n    }\n}\n","import { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanDisable {\n    disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n    return class extends base {\n        get disabled() {\n            return this._disabled;\n        }\n\n        set disabled(value: any) {\n            this._disabled = coerceBooleanProperty(value);\n        }\n\n        private _disabled: boolean = false;\n\n        constructor(...args: any[]) {\n            // tslint:disable-next-line\n            super(...args);\n        }\n    };\n}\n","import { ElementRef } from '@angular/core';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanColor {\n    color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\nexport interface HasElementRef {\n    _elementRef: ElementRef;\n}\n\nexport enum ThemePalette {\n    Primary = 'primary',\n    Second = 'second',\n    Error = 'error',\n    Default = 'second',\n    Empty = ''\n}\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T,\n    defaultColor: ThemePalette = ThemePalette.Default\n): CanColorCtor & T {\n    return class extends base {\n\n        private _color: ThemePalette;\n\n        get color(): ThemePalette {\n            return this._color;\n        }\n\n        set color(value: ThemePalette) {\n            const colorPalette = value || defaultColor;\n\n            if (colorPalette !== this._color) {\n                if (this._color) {\n                    this._elementRef.nativeElement.classList.remove(`mc-${this._color}`);\n                }\n\n                if (colorPalette) {\n                    this._elementRef.nativeElement.classList.add(`mc-${colorPalette}`);\n                }\n\n                this._color = colorPalette;\n            }\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n\n            this.color = defaultColor;\n        }\n    };\n}\n\n","import { Constructor } from './constructor';\nimport { CanDisable } from './disabled';\n\n\nexport interface HasTabIndex {\n    tabIndex: number;\n}\n\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n// Mixin to augment a directive with a `tabIndex` property.\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0): HasTabIndexCtor & T {\n    return class extends base {\n        get tabIndex(): number {\n            return this.disabled ? -1 : this._tabIndex;\n        }\n\n        set tabIndex(value: number) {\n            this._tabIndex = value != null ? value : defaultTabIndex;\n        }\n\n        private _tabIndex: number = defaultTabIndex;\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n    };\n}\n","import { FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { Subject } from 'rxjs';\n\nimport { ErrorStateMatcher } from '../error/error-options';\n\nimport { Constructor } from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n\n    readonly stateChanges: Subject<void>;\n\n    errorState: boolean;\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState();\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n    parentFormGroup: FormGroupDirective;\n    parentForm: NgForm;\n    defaultErrorStateMatcher: ErrorStateMatcher;\n    ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T): CanUpdateErrorStateCtor & T {\n    return class extends base {\n        /** Whether the component is in an error state. */\n        errorState: boolean = false;\n\n        /**\n         * Stream that emits whenever the state of the input changes such that the wrapping\n         * `MatFormField` needs to run change detection.\n         */\n        readonly stateChanges = new Subject<void>();\n\n        errorStateMatcher: ErrorStateMatcher;\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n\n        updateErrorState() {\n            const oldState = this.errorState;\n            const parent = this.parentFormGroup || this.parentForm;\n            const matcher = this.errorStateMatcher || this.defaultErrorStateMatcher;\n            const control = this.ngControl ? this.ngControl.control as FormControl : null;\n            const newState = matcher.isErrorState(control, parent);\n\n            if (newState !== oldState) {\n                this.errorState = newState;\n                this.stateChanges.next();\n            }\n        }\n    };\n}\n","import {\n    AfterViewChecked,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { ENTER, SPACE } from '@ptsecurity/cdk/keycodes';\nimport { Subject } from 'rxjs';\n\nimport { McOptgroup } from './optgroup';\n\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet uniqueIdCounter = 0;\n\n/** Event object emitted by McOption when selected or deselected. */\nexport class McOptionSelectionChange {\n    constructor(public source: McOption, public isUserInput = false) {}\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\n// tslint:disable-next-line: naming-convention\nexport interface McOptionParentComponent {\n    multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MC_OPTION_PARENT_COMPONENT =\n    new InjectionToken<McOptionParentComponent>('MC_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mc-select>` element.\n */\n@Component({\n    selector: 'mc-option',\n    exportAs: 'mcOption',\n    host: {\n        '[attr.tabindex]': 'getTabIndex()',\n        class: 'mc-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-option-multiple]': 'multiple',\n        '[class.mc-active]': 'active',\n        '[class.mc-disabled]': 'disabled',\n        '[id]': 'id',\n\n        '(click)': 'selectViaInteraction()',\n        '(keydown)': 'handleKeydown($event)'\n    },\n    styleUrls: ['./option.css'],\n    templateUrl: './option.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McOption implements AfterViewChecked, OnDestroy {\n    /** The form value of the option. */\n    @Input() value: any;\n\n    /** Event emitted when the option is selected or deselected. */\n    // tslint:disable-next-line:no-output-on-prefix\n    @Output() readonly onSelectionChange = new EventEmitter<McOptionSelectionChange>();\n\n    /** Emits when the state of the option changes and any parents have to be notified. */\n    readonly stateChanges = new Subject<void>();\n\n    /**\n     * The displayed value of the option. It is necessary to show the selected option in the\n     * select's trigger.\n     */\n    get viewValue(): string {\n        // TODO(kara): Add input property alternative for node envs.\n        return (this.getHostElement().textContent || '').trim();\n    }\n\n    /** Whether the wrapping component is in multiple selection mode. */\n    get multiple() {\n        return this.parent && this.parent.multiple;\n    }\n\n    get id(): string {\n        return this._id;\n    }\n\n    private _id = `mc-option-${uniqueIdCounter++}`;\n\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    private _selected = false;\n\n    @Input()\n    get disabled() {\n        return (this.group && this.group.disabled) || this._disabled;\n    }\n\n    set disabled(value: any) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    private _disabled = false;\n\n    /**\n     * Whether or not the option is currently active and ready to be selected.\n     * An active option displays styles as if it is focused, but the\n     * focus is actually retained somewhere else. This comes in handy\n     * for components like autocomplete where focus must remain on the input.\n     */\n    get active(): boolean {\n        return this._active;\n    }\n\n    private _active = false;\n\n    private mostRecentViewValue = '';\n\n    constructor(\n        private readonly element: ElementRef,\n        private readonly changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_OPTION_PARENT_COMPONENT) private readonly parent: McOptionParentComponent,\n        @Optional() readonly group: McOptgroup\n    ) {}\n\n    ngAfterViewChecked() {\n        // Since parent components could be using the option's label to display the selected values\n        // (e.g. `mc-select`) and they don't have a way of knowing if the option's label has changed\n        // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n        // relatively cheap, however we still limit them only to selected options in order to avoid\n        // hitting the DOM too often.\n        if (this._selected) {\n            const viewValue = this.viewValue;\n\n            if (viewValue !== this.mostRecentViewValue) {\n                this.mostRecentViewValue = viewValue;\n                this.stateChanges.next();\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n    }\n\n    select(): void {\n        if (!this._selected) {\n            this._selected = true;\n\n            this.changeDetectorRef.markForCheck();\n            this.emitSelectionChangeEvent();\n        }\n    }\n\n    deselect(): void {\n        if (this._selected) {\n            this._selected = false;\n\n            this.changeDetectorRef.markForCheck();\n            this.emitSelectionChangeEvent();\n        }\n    }\n\n    focus(): void {\n        const element = this.getHostElement();\n\n        if (typeof element.focus === 'function') {\n            element.focus();\n        }\n    }\n\n    /**\n     * This method sets display styles on the option to make it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setActiveStyles(): void {\n        if (!this._active) {\n            this._active = true;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    /**\n     * This method removes display styles on the option that made it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setInactiveStyles(): void {\n        if (this._active) {\n            this._active = false;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel(): string {\n        return this.viewValue;\n    }\n\n    /** Ensures the option is selected when activated from the keyboard. */\n    handleKeydown(event: KeyboardEvent): void {\n        // tslint:disable-next-line\n        if (event.keyCode === ENTER || event.keyCode === SPACE) {\n            this.selectViaInteraction();\n\n            // Prevent the page from scrolling down and form submits.\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * `Selects the option while indicating the selection came from the user. Used to\n     * determine if the select's view -> model callback should be invoked.`\n     */\n    selectViaInteraction(): void {\n        if (!this.disabled) {\n            this._selected = this.multiple ? !this._selected : true;\n\n            this.changeDetectorRef.markForCheck();\n            this.emitSelectionChangeEvent(true);\n        }\n    }\n\n    getTabIndex(): string {\n        return this.disabled ? '-1' : '0';\n    }\n\n    getHostElement(): HTMLElement {\n        return this.element.nativeElement;\n    }\n\n    /** Emits the selection change event. */\n    private emitSelectionChangeEvent(isUserInput = false): void {\n        this.onSelectionChange.emit(new McOptionSelectionChange(this, isUserInput));\n    }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function countGroupLabelsBeforeOption(\n    optionIndex: number,\n    options: QueryList<McOption>,\n    optionGroups: QueryList<McOptgroup>\n): number {\n\n    if (optionGroups.length) {\n        const optionsArray = options.toArray();\n        const groups = optionGroups.toArray();\n\n        let groupCounter = 0;\n\n        for (let i = 0; i < optionIndex + 1; i++) {\n            if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n                groupCounter++;\n            }\n        }\n\n        return groupCounter;\n    }\n\n    return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function getOptionScrollPosition(\n    optionIndex: number,\n    optionHeight: number,\n    currentScrollPosition: number,\n    panelHeight: number\n): number {\n    const optionOffset = optionIndex * optionHeight;\n\n    if (optionOffset < currentScrollPosition) { return optionOffset; }\n\n    if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n        return Math.max(0, optionOffset - panelHeight + optionHeight);\n    }\n\n    return currentScrollPosition;\n}\n\n","import { ConnectionPositionPair } from '@ptsecurity/cdk/overlay';\n\n\nexport const POSITION_MAP: { [key: string]: ConnectionPositionPair } = {\n    top         : {\n        originX : 'center',\n        originY : 'top',\n        overlayX: 'center',\n        overlayY: 'bottom'\n    },\n    topCenter   : {\n        originX : 'center',\n        originY : 'top',\n        overlayX: 'center',\n        overlayY: 'bottom'\n    },\n    topLeft     : {\n        originX : 'start',\n        originY : 'top',\n        overlayX: 'start',\n        overlayY: 'bottom'\n    },\n    topRight    : {\n        originX : 'end',\n        originY : 'top',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    },\n    right       : {\n        originX : 'end',\n        originY : 'center',\n        overlayX: 'start',\n        overlayY: 'center'\n    },\n    rightTop    : {\n        originX : 'end',\n        originY : 'top',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    rightBottom : {\n        originX : 'end',\n        originY : 'bottom',\n        overlayX: 'start',\n        overlayY: 'bottom'\n    },\n    bottom      : {\n        originX : 'center',\n        originY : 'bottom',\n        overlayX: 'center',\n        overlayY: 'top'\n    },\n    bottomCenter: {\n        originX : 'center',\n        originY : 'bottom',\n        overlayX: 'center',\n        overlayY: 'top'\n    },\n    bottomLeft  : {\n        originX : 'start',\n        originY : 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    bottomRight : {\n        originX : 'end',\n        originY : 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n    },\n    left        : {\n        originX : 'start',\n        originY : 'center',\n        overlayX: 'end',\n        overlayY: 'center'\n    },\n    leftTop     : {\n        originX : 'start',\n        originY : 'top',\n        overlayX: 'end',\n        overlayY: 'top'\n    },\n    leftBottom  : {\n        originX : 'start',\n        originY : 'bottom',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    }\n};\n\nexport const DEFAULT_4_POSITIONS = objectValues([\n    POSITION_MAP.top, POSITION_MAP.right, POSITION_MAP.bottom, POSITION_MAP.left\n]);\n\nexport const EXTENDED_OVERLAY_POSITIONS = objectValues([\n    POSITION_MAP.top, POSITION_MAP.topLeft, POSITION_MAP.topRight, POSITION_MAP.right, POSITION_MAP.rightTop,\n    POSITION_MAP.rightBottom, POSITION_MAP.bottom, POSITION_MAP.bottomLeft, POSITION_MAP.bottomRight,\n    POSITION_MAP.left, POSITION_MAP.leftTop, POSITION_MAP.leftBottom\n]);\n\nexport const POSITION_TO_CSS_MAP: {[key: string]: string} = {\n    top: 'top',\n    topLeft: 'top-left',\n    topRight: 'top-right',\n    right: 'right',\n    rightTop: 'right-top',\n    rightBottom: 'right-bottom',\n    left: 'left',\n    leftTop: 'left-top',\n    leftBottom: 'left-bottom',\n    bottom: 'bottom',\n    bottomLeft: 'bottom-left',\n    bottomRight: 'bottom-right'\n};\n\nfunction arrayMap<T, S>(array: T[], iteratee: (item: T, index: number, arr: T[]) => S): S[] {\n    let index = -1;\n    const length = array == null ? 0 : array.length;\n    const result = Array(length);\n\n    while (++index < length) {\n        result[ index ] = iteratee(array[ index ], index, array);\n    }\n\n    return result;\n}\nfunction baseValues<T>(object: { [key: string]: T } | T[], props: string[]): T[] {\n    return arrayMap(props,  (key) => {\n        return object[ key ];\n    });\n}\nfunction objectValues<T>(object: { [key: string]: T } | T[]): T[] {\n    return object == null ? [] : baseValues(object, Object.keys(object));\n}\n","/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMcSelectDynamicMultipleError(): Error {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMcSelectNonArrayValueError(): Error {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMcSelectNonFunctionValueError(): Error {\n    return Error('`compareWith` must be a function.');\n}\n","export function getMcFormFieldMissingControlError(): Error {\n  return Error('mc-form-field must contain a McFormFieldControl.');\n}\n","export function getMcInputUnsupportedTypeError(inputType: string): Error {\n    return Error(`Input type \"${inputType}\" isn't supported by mcInput.`);\n}\n","/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n    return Error(\n        `McDatepicker: No provider found for ${provider}. You must import one of the existing ` +\n        `modules at your application root or provide a custom implementation or use exists ones.`);\n}\n","/**\n * Throws an exception for the case when dropdown trigger doesn't have a valid mc-dropdown instance\n * @docs-private\n */\nexport function throwMcDropdownMissingError() {\n    throw Error(`mcDropdownTriggerFor: must pass in an mc-dropdown instance.\n    Example:\n      <mc-dropdown #dropdown=\"mcDropdown\"></mc-dropdown>\n      <button [mcDropdownTriggerFor]=\"dropdown\"></button>`);\n}\n\n/**\n * Throws an exception for the case when dropdown's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMcDropdownInvalidPositionX() {\n    throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mc-dropdown xPosition=\"before\" #dropdown=\"mcDropdown\"></mc-dropdown>`);\n}\n\n/**\n * Throws an exception for the case when dropdown's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMcDropdownInvalidPositionY() {\n    throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mc-dropdown yPosition=\"above\" #dropdown=\"mcDropdown\"></mc-dropdown>`);\n}\n","import { animate, AnimationTriggerMetadata, style, transition, trigger, state } from '@angular/animations';\n\n\nexport function toggleVerticalNavbarAnimation(): AnimationTriggerMetadata {\n    return trigger('toggle', [\n        state('0', style({\n            width: '64px'\n        })),\n        state('1',  style({\n            width: '*'\n        })),\n        transition('0 <=> 1', animate('200ms cubic-bezier(0, 1, 0.5, 1)'))\n    ]);\n}\n","import { NgModule, Directive, ElementRef, QueryList } from '@angular/core';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(McLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n    selector: '[mc-line], [mcLine]',\n    host: { class: 'mc-line' }\n})\nexport class McLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class McLineSetter {\n    constructor(private _lines: QueryList<McLine>, private _element: ElementRef) {\n        this._setLineClass(this._lines.length);\n\n        this._lines.changes.subscribe(() => {\n            this._setLineClass(this._lines.length);\n        });\n    }\n\n    private _setLineClass(count: number): void {\n        this._resetClasses();\n        if (count === 2 || count === 3) {\n            this._setClass(`mc-${count}-line`, true);\n        } else if (count > 3) {\n            this._setClass(`mc-multi-line`, true);\n        }\n    }\n\n    private _resetClasses(): void {\n        this._setClass('mc-2-line', false);\n        this._setClass('mc-3-line', false);\n        this._setClass('mc-multi-line', false);\n    }\n\n    private _setClass(className: string, isAdd: boolean): void {\n        if (isAdd) {\n            this._element.nativeElement.classList.add(className);\n        } else {\n            this._element.nativeElement.classList.remove(className);\n        }\n    }\n}\n\n@NgModule({\n    imports: [],\n    exports: [McLine],\n    declarations: [McLine]\n})\nexport class McLineModule {}\n","import { Injectable } from '@angular/core';\nimport { FormGroupDirective, NgForm, FormControl } from '@angular/forms';\n\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n    }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({ providedIn: 'root' })\nexport class ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n    }\n}\n","import { Component, ViewEncapsulation, Input, ChangeDetectionStrategy } from '@angular/core';\n\n\nexport type McPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mc-primary .mc-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mc-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'mc-pseudo-checkbox',\n    styleUrls: ['pseudo-checkbox.css'],\n    templateUrl: 'pseudo-checkbox.partial.html',\n    host: {\n        class: 'mc-pseudo-checkbox',\n        '[class.mc-indeterminate]': 'state === \"indeterminate\"',\n        '[class.mc-checked]': 'state === \"checked\"',\n        '[class.mc-disabled]': 'disabled'\n    }\n})\nexport class McPseudoCheckbox {\n    @Input() state: McPseudoCheckboxState = 'unchecked';\n\n    @Input() disabled: boolean = false;\n}\n","import { NgModule } from '@angular/core';\n\nimport { McPseudoCheckbox } from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n    exports: [McPseudoCheckbox],\n    declarations: [McPseudoCheckbox]\n})\nexport class McPseudoCheckboxModule {}\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class McMeasureScrollbarService {\n\n    get scrollBarWidth(): number {\n        if (this._scrollbarWidth) {\n            return this._scrollbarWidth;\n        }\n        this.initScrollBarWidth();\n\n        return this._scrollbarWidth;\n    }\n\n    private _scrollbarWidth: number;\n    private scrollbarMeasure = {\n        position: 'absolute',\n        top: '-9999px',\n        width: '50px',\n        height: '50px',\n        overflow: 'scroll'\n    };\n\n    constructor(\n        @Inject(DOCUMENT) private document: any\n    ) {\n        this.initScrollBarWidth();\n    }\n\n    initScrollBarWidth() {\n        const scrollDiv = this.document.createElement('div');\n\n        // tslint:disable-next-line\n        for (const scrollProp in this.scrollbarMeasure) {\n            if (this.scrollbarMeasure.hasOwnProperty(scrollProp)) {\n                scrollDiv.style[scrollProp] = this.scrollbarMeasure[scrollProp];\n            }\n        }\n\n        this.document.body.appendChild(scrollDiv);\n\n        const width = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n\n        this.document.body.removeChild(scrollDiv);\n        this._scrollbarWidth = width;\n    }\n}\n","import { Component, ViewEncapsulation, Input, ChangeDetectionStrategy } from '@angular/core';\n\nimport { mixinDisabled, CanDisable, CanDisableCtor } from '../common-behaviors/index';\n\n\n// Boilerplate for applying mixins to McOptgroup.\n/** @docs-private */\nexport class McOptgroupBase {}\n\nexport const McOptgroupMixinBase: CanDisableCtor & typeof McOptgroupBase = mixinDisabled(McOptgroupBase);\n\n// Counter for unique group ids.\nlet uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mc-option`.\n */\n@Component({\n    selector: 'mc-optgroup',\n    exportAs: 'mcOptgroup',\n    templateUrl: 'optgroup.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['disabled'],\n    styleUrls: ['optgroup.css'],\n    host: {\n        class: 'mc-optgroup',\n        role: 'group',\n        '[class.mc-optgroup-disabled]': 'disabled',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-labelledby]': 'labelId'\n    }\n})\nexport class McOptgroup extends McOptgroupMixinBase implements CanDisable {\n    /** Label for the option group. */\n    @Input() label: string;\n\n    /** Unique id for the underlying label. */\n    labelId: string = `mc-optgroup-label-${uniqueOptgroupIdCounter++}`;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McPseudoCheckboxModule } from '../selection/index';\n\nimport { McOptgroup } from './optgroup';\nimport { McOption } from './option';\n\n\n@NgModule({\n    imports: [CommonModule, McPseudoCheckboxModule],\n    exports: [McOption, McOptgroup],\n    declarations: [McOption, McOptgroup]\n})\nexport class McOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","import { InjectionToken } from '@angular/core';\n\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MC_LABEL_GLOBAL_OPTIONS =\n    new InjectionToken<LabelOptions>('mc-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n    /**\n     * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n     * Default behavior is assumed to be `auto`.\n     */\n    float?: FloatLabelType;\n}\n","import {\n    animate,\n    state,\n    style,\n    transition,\n    trigger,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n\nexport const fadeAnimation: AnimationTriggerMetadata =  trigger('fadeAnimation', [\n    state('void', style({ opacity: 0 })),\n    state('true', style({ opacity: 1 })),\n    state('false', style({ opacity: 0 })),\n    transition('* => true', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => void', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)'))\n]);\n","export enum AnimationCurves {\n    StandardCurve = 'cubic-bezier(0.4,0.0,0.2,1)',\n    DecelerationCurve = 'cubic-bezier(0.0,0.0,0.2,1)',\n    AccelerationCurve = 'cubic-bezier(0.4,0.0,1,1)',\n    SharpCurve = 'cubic-bezier(0.4,0.0,0.6,1)'\n}\n","import {\n    animate,\n    AnimationTriggerMetadata,\n    state,\n    style,\n    transition,\n    trigger,\n    query,\n    animateChild,\n    group\n} from '@angular/animations';\n\n\n/**\n * The following are all the animations for the mc-select component, with each\n * const containing the metadata for one animation.\n *\n */\nexport const mcSelectAnimations: {\n    readonly transformPanel: AnimationTriggerMetadata;\n    readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0)',\n            minWidth: '100%',\n            opacity: 0\n        })),\n        transition('void => *', group([\n            query('@fadeInContent', animateChild()),\n            animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n        ])),\n        transition('* => void', [\n            animate('250ms 100ms linear', style({ opacity: 0 }))\n        ])\n    ]),\n\n    /**\n     * This animation fades in the background color and text content of the\n     * select's options. It is time delayed to occur 100ms after the overlay\n     * panel has transformed in.\n     */\n    fadeInContent: trigger('fadeInContent', [\n        state('showing', style({ opacity: 1 })),\n        transition('void => showing', [\n            style({ opacity: 0 }),\n            animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformPanel = mcSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInContent = mcSelectAnimations.fadeInContent;\n","import {\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { mixinColor, CanColor, CanColorCtor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\n@Directive({\n    selector: '[mc-icon]',\n    host: { class: 'mc mc-icon' }\n})\nexport class McIconCSSStyler {}\n\n\nexport class McIconBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McIconMixinBase: CanColorCtor & typeof McIconBase = mixinColor(McIconBase, ThemePalette.Empty);\n\n\n@Component({\n    selector: `[mc-icon]`,\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./icon.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['color']\n})\nexport class McIcon extends _McIconMixinBase implements CanColor {\n    constructor(elementRef: ElementRef, @Attribute('mc-icon') iconName: string) {\n        super(elementRef);\n\n        elementRef.nativeElement.classList.add(iconName);\n    }\n\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McIcon,\n    McIconCSSStyler\n} from './icon.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McIcon,\n        McIconCSSStyler\n    ],\n    declarations: [\n        McIcon,\n        McIconCSSStyler\n    ]\n})\nexport class McIconModule {}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-cleaner',\n    template: '<i class=\"mc-icon_light\" mc-icon=\"mc-close-M_16\" color=\"second\"></i>'\n})\nexport class McCleaner {}\n","import { NgControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\n\n/** An interface which allows a control to work inside of a `MсFormField`. */\nexport abstract class McFormFieldControl<T> {\n    /** The value of the control. */\n    value: T | null;\n\n    /**\n     * Stream that emits whenever the state of the control changes such that the parent `MсFormField`\n     * needs to run change detection.\n     */\n    readonly stateChanges: Observable<void>;\n\n    /** The element ID for this control. */\n    readonly id: string;\n\n    /** The placeholder for this control. */\n    readonly placeholder: string;\n\n    /** Gets the NgControl for this control. */\n    readonly ngControl: NgControl | null;\n\n    /** Whether the control is focused. */\n    readonly focused: boolean;\n\n    /** Whether the control is empty. */\n    readonly empty: boolean;\n\n    /** Whether the control is required. */\n    readonly required: boolean;\n\n    /** Whether the control is disabled. */\n    readonly disabled: boolean;\n\n    /** Whether the control is in an error state. */\n    readonly errorState: boolean;\n\n    /**\n     * An optional name for the control type that can be used to distinguish `mc-form-field` elements\n     * based on their control type. The form field will add a class,\n     * `mc-form-field-type-{{controlType}}` to its root element.\n     */\n    readonly controlType?: string;\n\n    /** Handles a click on the control's container. */\n    abstract onContainerClick(event: MouseEvent): void;\n\n    abstract focus(): void;\n}\n","import { Observable } from 'rxjs';\n\n\n/** An interface which allows a control to work inside of a `MсFormField`. */\nexport abstract class McFormFieldNumberControl<T> {\n    /** The value of the control. */\n    value: T | null;\n\n    /**\n     * Stream that emits whenever the state of the control changes such that the parent `MсFormField`\n     * needs to run change detection.\n     */\n    readonly stateChanges: Observable<void>;\n\n    /** the number step */\n    step: number;\n\n    /** the number big step */\n    bigStep: number;\n\n    /** Whether the control is focused. */\n    readonly focused: boolean;\n\n    /** Handles step up and down */\n    abstract stepUp(step: number): void;\n\n    abstract stepDown(step: number): void;\n}\n","import { Directive, Input } from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n@Directive({\n    selector: 'mc-hint',\n    host: {\n        class: 'mc-hint',\n        '[attr.id]': 'id'\n    }\n})\nexport class McHint {\n    @Input() id: string = `mc-hint-${nextUniqueId++}`;\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcPrefix]'\n})\nexport class McPrefix {\n}\n","import { Component, EventEmitter, Output } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-stepper',\n    template: `\n        <i class=\"mc mc-icon mc-icon_light mc-second mc-stepper-step-up mc-angle-down-L_16\"\n           (mousedown)=\"onStepUp($event)\">\n        </i>\n        <i class=\"mc mc-icon mc-icon_light mc-second mc-stepper-step-down mc-angle-down-L_16\"\n           (mousedown)=\"onStepDown($event)\">\n        </i>\n    `\n})\nexport class McStepper {\n    @Output()\n    readonly stepUp: EventEmitter<void> = new EventEmitter<void>();\n    @Output()\n    readonly stepDown: EventEmitter<void> = new EventEmitter<void>();\n\n    onStepUp($event: MouseEvent) {\n        this.stepUp.emit();\n        $event.preventDefault();\n    }\n\n    onStepDown($event: MouseEvent) {\n        this.stepDown.emit();\n        $event.preventDefault();\n    }\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcSuffix]'\n})\nexport class McSuffix {\n}\n","import {\n    AfterContentChecked,\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren, Directive,\n    ElementRef,\n    QueryList, ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { CanColor, CanColorCtor, mixinColor } from '@ptsecurity/mosaic/core';\nimport { EMPTY, merge } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n\n\nimport { McCleaner } from './cleaner';\nimport { McFormFieldControl } from './form-field-control';\nimport { getMcFormFieldMissingControlError } from './form-field-errors';\nimport { McFormFieldNumberControl } from './form-field-number-control';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McStepper } from './stepper';\nimport { McSuffix } from './suffix';\n\n\nlet nextUniqueId = 0;\n\nexport class McFormFieldBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McFormFieldMixinBase: CanColorCtor & typeof McFormFieldBase = mixinColor(McFormFieldBase);\n\n@Component({\n    selector: 'mc-form-field',\n    exportAs: 'mcFormField',\n    templateUrl: 'form-field.html',\n    // McInput is a directive and can't have styles, so we need to include its styles here.\n    // The McInput styles are fairly minimal so it shouldn't be a big deal for people who\n    // aren't using McInput.\n    styleUrls: [\n        'form-field.css',\n        '../input/input.css',\n        '../textarea/textarea.css'\n    ],\n    host: {\n        class: 'mc-form-field',\n        '[class.mc-form-field_invalid]': '_control.errorState',\n        '[class.mc-disabled]': '_control.disabled',\n        '[class.mc-form-field_has-prefix]': 'hasPrefix',\n        '[class.mc-form-field_has-suffix]': 'hasSuffix',\n        '[class.mc-form-field_has-cleaner]': 'canShowCleaner',\n        '[class.mc-form-field_has-stepper]': 'canShowStepper',\n        '[class.mc-focused]': '_control.focused',\n        '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n        '[class.ng-touched]': '_shouldForward(\"touched\")',\n        '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n        '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n        '[class.ng-valid]': '_shouldForward(\"valid\")',\n        '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n        '[class.ng-pending]': '_shouldForward(\"pending\")',\n        '(keydown)': 'onKeyDown($event)',\n        '(mouseenter)': 'onHoverChanged(true)',\n        '(mouseleave)': 'onHoverChanged(false)'\n    },\n    inputs: ['color'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class McFormField extends _McFormFieldMixinBase implements\n    AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n\n    @ContentChild(McFormFieldControl) _control: McFormFieldControl<any>;\n    @ContentChild(McFormFieldNumberControl) _numberControl: McFormFieldNumberControl<any>;\n    @ContentChild(McStepper) _stepper: McStepper;\n\n    @ContentChildren(McHint) _hint: QueryList<McHint>;\n    @ContentChildren(McSuffix) _suffix: QueryList<McSuffix>;\n    @ContentChildren(McPrefix) _prefix: QueryList<McPrefix>;\n    @ContentChildren(McCleaner) _cleaner: QueryList<McCleaner>;\n\n    @ViewChild('connectionContainer') connectionContainerRef: ElementRef;\n\n    // Unique id for the internal form field label.\n    _labelId = `mc-form-field-label-${nextUniqueId++}`;\n\n    hovered: boolean = false;\n\n    constructor(public _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef) {\n        super(_elementRef);\n    }\n\n    ngAfterContentInit() {\n        this._validateControlChild();\n\n        if (this._control.controlType) {\n            this._elementRef.nativeElement.classList\n                .add(`mc-form-field-type-${this._control.controlType}`);\n\n            if (this._numberControl && this.hasStepper) {\n                this._stepper.stepUp.subscribe(this.onStepUp.bind(this));\n                this._stepper.stepDown.subscribe(this.onStepDown.bind(this));\n            }\n        }\n\n        // Subscribe to changes in the child control state in order to update the form field UI.\n        this._control.stateChanges.pipe(startWith())\n            .subscribe(() => {\n                this._changeDetectorRef.markForCheck();\n            });\n\n        if (this._numberControl) {\n            this._numberControl.stateChanges.pipe(startWith())\n                .subscribe(() => {\n                    this._changeDetectorRef.markForCheck();\n                });\n        }\n\n        // Run change detection if the value changes.\n        const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n\n        merge(valueChanges)\n            .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    ngAfterContentChecked() {\n        this._validateControlChild();\n    }\n\n    ngAfterViewInit() {\n        // Avoid animations on load.\n        this._changeDetectorRef.detectChanges();\n    }\n\n    clearValue($event) {\n        $event.stopPropagation();\n\n        if (this._control && this._control.ngControl) {\n            this._control.ngControl.reset();\n            this._control.focus();\n        }\n    }\n\n    onContainerClick($event) {\n        if (this._control.onContainerClick) {\n            this._control.onContainerClick($event);\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n        // tslint:disable-next-line:deprecation\n        if (event.keyCode === ESCAPE && this._control.focused && this.hasCleaner) {\n            if (this._control && this._control.ngControl) {\n                this._control.ngControl.reset();\n            }\n\n            event.preventDefault();\n        }\n    }\n\n    onHoverChanged(isHovered: boolean) {\n        if (isHovered !== this.hovered) {\n            this.hovered  = isHovered;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    onStepUp() {\n        if (this._numberControl) {\n            this._numberControl.stepUp(this._numberControl.step);\n        }\n    }\n\n    onStepDown() {\n        if (this._numberControl) {\n            this._numberControl.stepDown(this._numberControl.step);\n        }\n    }\n\n    /**\n     * Gets an ElementRef for the element that a overlay attached to the form-field should be\n     * positioned relative to.\n     */\n    getConnectedOverlayOrigin(): ElementRef {\n        return this.connectionContainerRef || this._elementRef;\n    }\n\n        /** Determines whether a class from the NgControl should be forwarded to the host element. */\n    _shouldForward(prop: keyof NgControl): boolean {\n        const ngControl = this._control ? this._control.ngControl : null;\n\n        return ngControl && ngControl[prop];\n    }\n\n    /** Throws an error if the form field's control is missing. */\n    protected _validateControlChild() {\n        if (!this._control) {\n            throw getMcFormFieldMissingControlError();\n        }\n    }\n\n    get hasHint(): boolean {\n        return this._hint && this._hint.length > 0;\n    }\n\n    get hasSuffix(): boolean {\n        return this._suffix && this._suffix.length > 0;\n    }\n\n    get hasPrefix(): boolean {\n        return this._prefix && this._prefix.length > 0;\n    }\n\n    get hasCleaner(): boolean {\n        return this._cleaner && this._cleaner.length > 0;\n    }\n\n    get hasStepper(): boolean {\n        return !!this._stepper;\n    }\n\n    get canShowCleaner(): boolean {\n        return this.hasCleaner &&\n            this._control &&\n            this._control.ngControl\n                ? this._control.ngControl.value && !this._control.disabled\n                : false;\n    }\n\n\n    get disabled(): boolean {\n        return this._control && this._control.disabled;\n    }\n\n    get canShowStepper(): boolean {\n        return this._numberControl &&\n            !this.disabled &&\n            (\n                this._numberControl.focused ||\n                this.hovered\n            );\n    }\n}\n\n@Directive({\n    selector: 'mc-form-field[mcFormFieldWithoutBorders]',\n    exportAs: 'mcFormFieldWithoutBorders',\n    host: { class: 'mc-form-field_without-borders' }\n})\nexport class McFormFieldWithoutBorders {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McCleaner } from './cleaner';\nimport { McFormField, McFormFieldWithoutBorders } from './form-field';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McStepper } from './stepper';\nimport { McSuffix } from './suffix';\n\n\n@NgModule({\n    declarations: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner,\n        McStepper\n    ],\n    imports: [CommonModule, McIconModule],\n    exports: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner,\n        McStepper\n    ]\n})\nexport class McFormFieldModule {\n}\n"],"names":["inputs","host","[attr.disabled]","[attr.tabindex]","type","ElementRef","FocusMonitor","McDropdownTrigger","decorators","Optional","Self","tabIndex","Input","McVerticalNavbarItem","_McVerticalNavbarMixinBase","McVerticalNavbarHeader","Directive","args","selector","class","McVerticalNavbarTitle","McVerticalNavbar","cd","this","expanded","prototype","toggle","markForCheck","Component","changeDetection","ChangeDetectionStrategy","OnPush","template","styles","encapsulation","ViewEncapsulation","None","animations","toggleVerticalNavbarAnimation","ChangeDetectorRef","COMPONENTS","McVerticalNavbarItemIcon","McVerticalNavbarItemBadge","McVerticalNavbarModule","NgModule","imports","CommonModule","A11yModule","PlatformModule","McIconModule","exports","declarations","VERSION","Version","SELECT_PANEL_PADDING_X","(click)","McSidepanelRef","McSidepanelService","sidepanelResult","mcSidepanelClose","McSidepanelClose","McSidepanelHeader","closeable","McSidepanelBody","McSidepanelFooter","McSidepanelActions","McSidepanelModule","OverlayModule","PortalModule","McCommonModule","providers","McSidepanelContainerComponent","entryComponents","McSplitterComponent","elementRef","ngZone","renderer","areas","_disabled","_gutterSize","isDragging","areaPositionDivider","listeners","Object","defineProperty","_direction","direction","disabled","coerceBooleanProperty","gutterSize","size","coerceNumberProperty","addArea","area","index","length","order","getSize","setOrder","push","initialSize","ngOnInit","setStyle","isVertical","onMouseDown","event","leftAreaIndex","rightAreaIndex","_this","leftArea","rightArea","startPoint","x","screenX","y","screenY","forEach","item","disableFlex","setSize","runOutsideAngular","listen","onMouseUp","e","onMouseMove","removeArea","indexToRemove","some","splice","endPoint","offset","newLeftAreaSize","newRightAreaSize","minLeftAreaSize","getMinSize","minRightAreaSize","rightAreaOffset","unsubscribe","pop","property","value","nativeElement","preserveWhitespaces","NgZone","Renderer2","McGutterDirective","_order","_size","getCursor","getState","coerceCssPixelValue","setAttr","state","Error","attribute","setAttribute","McSplitterAreaDirective","splitter","removeStyle","ngOnDestroy","sz","getSizeProperty","getOffsetSizeProperty","getComputedStyle","parseFloat","getMinSizeProperty","style","McSplitterModule","nextUniqueId","McToggleBase","_elementRef","_McToggleMixinBase","mixinTabIndex","mixinColor","mixinDisabled","ThemePalette","Primary","McToggleChange","McToggleComponent","_super","_focusMonitor","_changeDetectorRef","call","labelPosition","ariaLabel","ariaLabelledby","_uniqueId","id","name","_checked","change","EventEmitter","_onTouchedCallback","_onChangeCallback","_","parseInt","monitor","tslib_1.__extends","stopMonitoring","focus","focusVia","_inputElement","_getAriaChecked","checked","_onInteractionEvent","stopPropagation","_onLabelTextChange","_onInputClick","_updateModelValue","_emitChangeEvent","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","source","emit","exportAs","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","[id]","[attr.id]","[class.mc-disabled]","[class.mc-toggle_off]","trigger","left","transition","animate","String","Attribute","ViewChild","Output","McToggleModule","McTooltipComponent","cdr","prefix","positions","DEFAULT_4_POSITIONS","slice","classMap","mcVisibleChange","mcMouseEnterDelay","mcMouseLeaveDelay","_mcTrigger","_mcPlacement","_mcVisible","BehaviorSubject","onHideSubject","Subject","closeOnInteraction","availablePositions","POSITION_MAP","$visible","asObservable","_mcTitle","isTitleString","TemplateRef","unshift","mcPlacement","visible","next","show","hideTid","clearTimeout","isContentEmpty","mcTrigger","showTid","setTimeout","mcVisible","hide","setClassMap","mcTitle","afterHidden","handleBodyInteraction","outputs","fadeAnimation","(body:click)","MC_TOOLTIP_SCROLL_STRATEGY","InjectionToken","MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","Overlay","useFactory","mcTooltipScrollStrategyFactory","McTooltip","overlay","scrollDispatcher","hostView","scrollStrategy","isTooltipOpen","isDynamicTooltip","parentDisabled","$unsubscribe","manualListeners","Map","destroyed","title","updateCompValue","_mcMouseEnterDelay","_mcMouseLeaveDelay","_mcTooltipClass","tooltip","externalValue","createOverlay","overlayRef","strategy","position","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withPositions","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","pipe","takeUntil","subscribe","onPositionChange","scrollableViewProperties","isOverlayClipped","run","create","positionStrategy","panelClass","updatePosition","detachments","detach","hasAttached","$event","updatedPlacement","keys","key","connectionPair","originX","originY","overlayX","overlayY","handlePositioningUpdate","pos","overlayElement","clientHeight","element","currentContainer","top","split","initElementRefListeners","dispose","listener","removeEventListener","clear","complete","handleKeydown","keyCode","ESCAPE","handleTouchend","set","addEventListener","portal","ComponentPortal","attach","instance","distinctUntilChanged","data","getConfig","origin","getOrigin","getOverlayPosition","tslib_1.__assign","main","fallback","originPosition","isLtr","getMcTooltipInvalidPositionError","_a","invertPosition","overlayPosition","newX","newY","(keydown)","(touchend)","ScrollDispatcher","ViewContainerRef","undefined","Inject","Directionality","setTitle","mcTooltipClass","isOpen","HostBinding","isParentDisabled","McToolTipModule","McVerticalNavbarItemBase","focusMonitor","[class.mc-select-invalid]","[class.mc-select-required]","(focus)","(blur)","(window:resize)","mcSelectAnimations","transformPanel","fadeInContent","McFormFieldControl","McTreeSelect","CdkTree","ViewportRuler","ErrorStateMatcher","NgForm","FormGroupDirective","McFormField","NgControl","MC_SELECT_SCROLL_STRATEGY","panel","overlayDir","CdkConnectedOverlay","tags","ViewChildren","McTag","customTrigger","ContentChild","McTreeSelectTrigger","tree","McTreeSelection","openedChange","openedStream","closedStream","selectionChange","valueChange","errorStateMatcher","sortComparator","placeholder","required","multiple","autoSelect","compareWith","McTreeSelectMixinBase","McTreeSelectModule","CdkTreeModule","McTreeModule","McTagsModule","McPseudoCheckboxModule","MC_SELECT_SCROLL_STRATEGY_PROVIDER","MC_TEXTAREA_VALUE_ACCESSOR","McTextareaBase","defaultErrorStateMatcher","parentForm","parentFormGroup","ngControl","McTextareaMixinBase","mixinErrorState","McTextarea","inputValueAccessor","canGrow","focused","stateChanges","controlType","uid","_required","lineHeight","freeRowsHeight","minHeight","valueAccessor","previousNativeValue","growObserver","fromEvent","growSubscription","grow","bind","_id","paddingTop","paddingBottom","ngOnChanges","ngDoCheck","updateErrorState","dirtyCheckNativeValue","textarea","outerHeight","window","diff","height","Math","max","scrollHeight","focusChanged","isFocused","isBadInput","onContainerClick","newValue","validity","badInput","getGrowHeight","toString","[class.mc-textarea-resizable]","[attr.placeholder]","[attr.aria-invalid]","[disabled]","[required]","McTextareaModule","FormsModule","hours","minutes","seconds","HHmmss","HHmm","TIMEFORMAT_PLACEHOLDERS","TimeFormats","DEFAULT_TIME_FORMAT","HOURS_MINUTES_SECONDS_REGEXP","RegExp","HOURS_MINUTES_REGEXP","HOURS_ONLY_REGEXP","uniqueComponentIdSuffix","McTimepickerBase","McTimepickerMixinBase","McTimepicker","dateAdapter","_minTime","_maxTime","onChange","noop","control","myValidators","parseValidator","minTimeValidator","maxTimeValidator","validators","validator","concat","setValidators","updateValueAndValidity","applyInputChanges","_timeFormat","formatValue","map","timeFormatKey","indexOf","minValue","minDateTime","getDateFromTimeString","maxValue","maxDateTime","onTouched","onBlur","onPaste","preventDefault","clipboardUserInput","clipboardData","getData","onInput","initialCursorStart","selectionStart","initialCursorEnd","selectionEnd","isAutocompleteTriggered","getParsedTimeParts","hoursOnly","hoursAndMinutes","hoursAndMinutesAndSeconds","doTimestringReformat","errors","createSelectionOfTimeComponentInInput","setProperty","getTimeStringFromDate","timeFormat","onKeyDown","getKeyCode","upDownTimeByArrowKeys","switchSelectionBetweenTimeparts","applyParams","changedTime","timeToApply","currentDateTimeInput","result","cursorPos","modifiedTimePart","getTimeEditMetrics","incrementTime","decrementTime","getCursorPositionOfPrevTimePartStart","getCursorPositionOfNextTimePartStart","code","newEditParams","cursorStartPosition","cursorEndPosition","dateVal","whatToIncrement","TimeParts","getTimeDigitsFromDate","getDateFromTimeDigits","whatToDecrement","timeString","timeDevider","nextDividerPos","cursorPosition","minutesIndex","hoursIndex","secondsIndex","tempVal","getNumberWithLeadingZero","getHours","getMinutes","getSeconds","momentWrappedTime","parse","convertedTimeString","format","match","trim","Number","resultDate","Date","isNaN","getTime","digit","mcTimepickerParse","text","isTimeLowerThenMin","mcTimepickerLowerThenMintime","isTimeGreaterThenMax","mcTimepickerHigherThenMaxtime","timeToCompare","[attr.time-format]","[attr.min-time]","[attr.max-time]","[attr.value]","(input)","(paste)","MC_INPUT_VALUE_ACCESSOR","DateAdapter","minTime","maxTime","McTimepickerModule","MC_SIDEPANEL_DATA","Right","Left","Top","Bottom","McSidepanelConfig","McSidepanelPosition","hasBackdrop","requiredBackdrop","disableClose","overlayPanelClass","Void","Visible","Hidden","mcSidepanelTransformAnimation","right","in","out","bottom","mcSidepanelAnimations","sidepanelState","transform","params","transformIn","transformOut","AnimationCurves","AccelerationCurve","DecelerationCurve","MC_SIDEPANEL_WITH_INDENT","MC_SIDEPANEL_WITH_SHADOW","changeDetectorRef","sidepanelConfig","withIndent","withShadow","animationState","McSidepanelAnimationState","animationStateChanged","attachComponentPortal","validatePortalAttached","setAnimation","setPanelClass","portalOutlet","attachTemplatePortal","enter","detectChanges","exit","onAnimation","animationTransform","classList","add","tabindex","role","aria-modal","[@state]","(@state.start)","(@state.done)","Boolean","CdkPortalOutlet","BasePortalOutlet","uniqueId","containerInstance","config","afterClosed$","afterOpened$","filter","phaseName","toState","take","merge","backdropClick","keydownEvents","close","closed","detachBackdrop","afterClosed","afterOpened","MC_SIDEPANEL_DEFAULT_OPTIONS","injector","defaultOptions","parentSidepanelService","openedSidepanelsAtThisLevel","openedSidepanels","closeSidepanels","open","componentOrTemplateRef","fullConfig","getSidepanelById","container","attachContainer","ref","TemplatePortal","$implicit","sidepanelRef","createInjector","contentRef","removeOpenSidepanel","closeAll","find","sidepanel","openedSidepanelsWithSamePosition","getOpenedSidepanelsWithSamePosition","PortalInjector","WeakMap","containerPortal","sidepanelContainer","injectionTokens","overlayConfig","OverlayConfig","backdropClass","getBackdropClass","maxWidth","scrollStrategies","block","global","sidepanels","reverse","hasOpenedSidepanelWithBackdrop","Injectable","Injector","SkipSelf","sidepanelService","getClosestSidepanel","changes","proxiedChange","currentValue","keyManager","tabOut","destroy","_panelOpen","scrollActiveOptionIntoView","activeItem","selectViaInteraction","McSelect","resetOptions","changedOrDestroyed","options","optionSelectionChanges","onSelect","isUserInput","search","isSearchChanged","Promise","resolve","then","setFirstItemActive","apply","option","setOptionIds","wasSelected","selectionModel","isSelected","_multiple","selected","select","deselect","setActiveItem","sortValues","propagateChanges","options_1","toArray","sort","a","b","fallbackValue","valueToEmit","_value","McSelectChange","optionIds","join","highlightCorrectOption","empty","activeOptionIndex","activeItemIndex","labelCount","countGroupLabelsBeforeOption","optionGroups","optionsContainer","scrollTop","getOptionScrollPosition","getItemHeight","getOptionIndex","reduce","current","calculateOverlayPosition","itemHeight","items","getItemCount","panelHeight","min","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","calculateOverlayScroll","offsetY","calculateOverlayOffsetY","checkOverlayWithinViewport","calculateOverlayOffsetX","offsetX","overlayRect","getBoundingClientRect","viewportSize","_viewportRuler","getViewportSize","isRtl","first","group","leftOverflow","rightOverflow","width","round","topSpaceAvailable","triggerRect","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","adjustPanelUp","adjustPanelDown","transformOrigin","getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","optionHeightAdjustment","MC_OPTION_PARENT_COMPONENT","McSelectTrigger","ContentChildren","McOption","descendants","McOptgroup","McSelectSearch","McSelectMixinBase","McSelectModule","McOptionModule","McFormFieldModule","McTreeSelectChange","McTreeSelectBase","viewportRuler","dir","parentFormField","scrollStrategyFactory","hiddenItems","oneMoreText","triggerFontSize","panelDoneAnimating","panelDoneAnimatingStream","o","defer","onSelectionChange","onStable","switchMap","_autoSelect","_focused","_compareWith","o1","o2","_placeholder","getMcSelectDynamicMultipleError","getMcSelectNonFunctionValueError","initializeSelection","panelOpen","ngAfterContentInit","initKeyManager","SelectionModel","changed","added","removed","ngAfterViewInit","calculateHiddenItems","startWith","updateSelectedOptions","fontSize","setSelectionByValue","viewValue","selectedOptions","isEmpty","handleOpenKeydown","handleClosedKeydown","onFadeInDone","onFocus","onAttached","positionChange","getPanelTheme","color","selectedIndex","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","onRemoveSelectedOption","selectedOption","visibleItems","totalItemsWidth","getTotalItemsWidthInMatcher","totalVisibleItemsWidth","tag","offsetTop","offsetHeight","itemsCounter","querySelector","matcherList","itemsCounterShowed","matcherListWidth","matcherWidth","triggerClone","cloneNode","remove","appendChild","querySelectorAll","isArrowKey","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","ENTER","SPACE","altKey","onKeydown","originalOnKeyDown","HOME","END","setLastItemActive","A","ctrlKey","hasDeselectedOptions_1","previouslyFocusedIndex","shiftKey","Array","isArray","getMcSelectNonArrayValueError","selectValue","correspondingOption","error","isDevMode","console","warn","addClassModificatorForIcons","icons","contentChildren","iconElement","previousElementSibling","nextElementSibling","nextSibling","previousSibling","firstIconElement","secondIconElement","addHostClassName","_i","TAG_ATTRIBUTE_NAMES_1","TAG_ATTRIBUTE_NAMES","attr","hasAttribute","tagName","toLowerCase","_selected","dispatchSelectionChange","toggleSelected","hasFocus","removable","handleClick","DELETE","BACKSPACE","selectable","blur","_ngZone","[class.mc-tag-selected]","[class.mc-tag-with-avatar]","[class.mc-tag-with-trailing-icon]","[class.mc-tag-disabled]","McIcon","avatar","McTagAvatar","trailingIcon","McTagTrailingIcon","removeIcon","McTagRemove","_McTagMixinBase","parentTag","McTagListBase","_McTagListMixinBase","McTagListChange","McTagList","userTabIndex","tagChanges","orientation","_tabIndex","_selectable","lastDestroyedTagIndex","tagInput","hasFocusedTag","syncTagsDisabledState","tagListSelectable","FocusKeyManager","withVerticalOrientation","withHorizontalOrientation","resetTags","updateTabIndex","updateFocusForDestroyedTags","dropSubscriptions","registerInput","inputElement","originatesFromTag","focusInput","keydown","target","isInputEmpty","contains","clearSelection","correspondingTag","markAsTouched","newTagIndex","isValidIndex","nodeName","skip","listenToTagsFocus","listenToTagsSelection","listenToTagsRemoved","tagFocusSubscription","tagBlurSubscription","tagSelectionSubscription","tagRemoveSubscription","tagSelectionChanges","tagFocusChanges","tagIndex","updateActiveItem","tagBlurChanges","tagRemoveChanges","currentElement","parentElement","[class.mc-invalid]","[class.mc-required]","McTagInput","separatorKeyCodes","tagEnd","_addOnBlur","_tagList","emittagEnd","addOnBlur","isSeparatorKey","input","hasModifierKey","separators","has","MC_TAGS_DEFAULT_OPTIONS","tagList","ɵ0","useValue","McSelectBase","searchChangesSubscription","Subscription","reset","McInput","_renderer","_dir","_parentFormField","_scrollStrategyFactory","previousSelectionModelSelected","resetSearch","onRemoveMatcherItem","manager","getCorrespondOption","ActiveDescendantKeyManager","withTypeAhead","McTabContent","McTabLabel","CdkPortal","ctorParameters","McTabBase","mcTabMixinBase","McTab","viewContainerRef","textLabel","isActive","contentPortal","hasOwnProperty","explicitContent","implicitContent","templateLabel","read","mcTabsAnimations","translateTab","McTabBody","onCentering","beforeCentering","afterLeavingCenter","onCentered","animationDuration","dirChangeSubscription","EMPTY","computePositionAnimationState","positionIndex","bodyPosition","computePositionFromOrigin","onTranslateTabStarted","isCentering","isCenterPosition","onTranslateTabComplete","fromState","getLayoutDirection","portalHost","PortalHostDirective","content","McTabBodyPortal","componentFactoryResolver","centeringSub","leavingSub","ComponentFactoryResolver","McTabLabelWrapperBase","mcTabLabelWrapperMixinBase","McTabLabelWrapper","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[attr.aria-disabled]","McTabHeaderBase","McTabHeader","showPaginationControls","disableScrollAfter","disableScrollBefore","selectFocusedIndex","indexFocused","_scrollDistance","selectedIndexChanged","_selectedIndex","coercedValue","focusIndex","v","getMaxScrollDistance","scrollDistanceChanged","checkScrollingControls","ngAfterContentChecked","tabLabelCount","labelWrappers","updatePagination","scrollToLabel","updateTabScrollPosition","dirChange","observableOf","resize","realign","withWrap","requestAnimationFrame","newFocusIndex","setTabFocus","onContentChanges","textContent","currentTextContent","zoneCallback","checkPaginationEnabled","tab","containerEl","tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","tabList","scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","[class.mc-tab-header__pagination-controls_enabled]","[class.mc-tab-header_rtl]","McLightTabsCssStyler","McAlignTabsCenterCssStyler","McAlignTabsEndCssStyler","McStretchTabsCssStyler","nextId","McTabChangeEvent","MC_TABS_CONFIG","McTabGroupBase","mcTabGroupMixinBase","McTabGroup","lightTabs","defaultConfig","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","indexToSelect","tabBodyWrapperHeight","tabsSubscription","tabLabelSubscription","_dynamicHeight","lightTab","groupId","clampTabIndex","isFirstRun_1","createChangeEvent","tabs","subscribeToTabLabels","i","getTabLabelId","getTabContentId","setTabBodyWrapperHeight","tabHeight","wrapper","tabBodyWrapper","removeTabBodyWrapperHeight","tabHeader","getTabIndex","[class.mc-tab-group_dynamic-height]","[class.mc-tab-group_inverted-header]","dynamicHeight","McTabNavBase","mcTabNavMixinBase","McTabNav","McTabLinkBase","mcTabLinkMixinBase","McTabLink","[attr.aria-current]","[attr.tabIndex]","[class.mc-active]","active","McTabsModule","McTagSelectionChange","McTagBase","_removable","popover","handlePositionUpdate","McPopover","verticalOffset","anchorElementWidth","clientWidth","isDynamicPopover","McPopoverComponent","isPopoverOpen","reapplyPosition","reapplyLastPosition","getOriginXaxis","getOriginYaxis","origX","includes","getMcPopoverInvalidPositionError","origY","[class.mc-popover_open]","MC_POPOVER_SCROLL_STRATEGY","mcHeader","mcContent","mcFooter","mcPopoverSize","McPopoverModule","MC_POPOVER_SCROLL_STRATEGY_FACTORY_PROVIDER","idIterator","McProgressBarBase","_McProgressBarMixinBase","McProgressBar","mode","McProgressBarModule","McProgressSpinnerBase","_McProgressSpinnerMixinBase","McProgressSpinner","percentage","McProgressSpinnerModule","McRadioChange","McRadioGroupBase","_McRadioGroupMixinBase","MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","McRadioGroup","_changeDetector","_name","_isInitialized","_labelPosition","controlValueAccessorChangeFn","updateRadioButtonNames","markRadiosForCheck","updateSelectedRadioFromValue","checkSelectedRadioButton","toBoolean","touch","emitChangeEvent","_radios","radio","isAlreadySelected","McRadioButton","McRadioButtonBase","_McRadioButtonMixinBase","radioGroup","_radioDispatcher","removeUniqueSelectionListener","newCheckedState","notify","newDisabledState","onInputClick","onInputChange","groupValueChanged","[class.mc-checked]","UniqueSelectionDispatcher","ariaDescribedby","McRadioModule","McTreeNodeDef","CdkTreeNodeDef","McTreeNodePadding","arguments","baseLeftPadding","_indent","iconWidth","withIcon","paddingIndent","nodeLevel","treeNode","treeControl","getLevel","level","leftPadding","isExpandable","setPadding","CdkTreeNodePadding","indent","McTreeNodeToggle","CdkTreeNodeToggle","MC_TREE_OPTION_PARENT_COMPONENT","McTreeOptionChange","uniqueIdCounter","McTreeOption","parent","_active","setSelected","setActiveStyles","setInactiveStyles","getHeight","clientRects","getClientRects","getHostElement","emitSelectionChangeEvent","setFocusedOption","[class.mc-selected]","CdkTreeNode","McTreeNavigationChange","McTreeSelectionChange","McTreeSelectionBase","differs","McTreeSelectionBaseMixin","noUnselect","navigationChange","rawValue","log","withShift","withCtrl","collapse","expand","toggleFocusedOption","PAGE_UP","setPreviousPageItemActive","PAGE_DOWN","setNextPageItemActive","updateScrollSize","withScrollSize","floor","previousIndex_1","previousActiveItemIndex","activeIndex_1","canDeselectLast","emitNavigationEvent","focusedIndex","focusedOption","renderNodeChanges","dataDiffer","viewContainer","parentData","nodeOutlet","arrayOfInstances","_embeddedViews","view","viewDef","def","nodes","node","nodeMatchedQueries","matchedQueryIds","nodeData","nodeIndex","notifyOnChanges","IterableDiffers","CdkTreeNodeOutlet","MC_TREE_DIRECTIVES","McTreeFlattener","transformFunction","getChildren","flattenNode","resultNodes","parentMap","flatNode","children","child","childParentMap","flattenNodes","structuredData","expandFlattenedNodes","results","currentExpand","isExpanded","McTreeFlatDataSource","treeFlattener","initialData","flattenedData","expandedData","_data","dataNodes","connect","collectionViewer","viewChange","expansionModel","disconnect","DataSource","McTreeNestedDataSource","McMeasureScrollbarService","McModalControlService","DOCUMENT","mcModalType","mcComponentParams","mcZIndex","mcWidth","mcWrapClassName","mcClassName","mcStyle","mcCloseByESC","mcClosable","mcMask","mcMaskClosable","mcMaskStyle","mcBodyStyle","mcAfterOpen","mcAfterClose","mcOkText","mcOkType","mcOkLoading","mcOnOk","mcCancelText","mcCancelLoading","mcOnCancel","modalContainer","bodyContainer","autoFocusButtonOk","mcGetContainer","McModalComponent","McModalRef","CssUnitPipe","defaultUnit","formatted","Pipe","ModalBuilderForService","createModal","changeProps","destroyModal","getInstance","modalRef","assign","McModalService","modalControl","openModals","afterAllClose","confirm","confirmType","success","simpleConfirm","delete","McModalModule","McButtonModule","MC_NAVBAR_CONTAINER","MC_NAVBAR_ITEM","MC_NAVBAR_BRAND","MC_NAVBAR_TITLE","McNavbarLogo","McNavbarBrand","McNavbarTitle","McNavbarItemBase","_McNavbarMixinBase","McNavbarItem","_platform","_cdRef","dropdownItems","isCollapsed","_subscription","encodeURI","dropdownContent","denyClickIfDisabled","_focusMonitor$","hasDropdownContent","listenClickOutside","startListenFocusDropdownItems","stopListenFocusDropdownItems","isActiveDropdownLink","link","isBrowser","location","href","handleClickByItem","toggleDropdown","isNavbarItem","handleClickByDropdownItem","forceCloseDropdown","_dropdownElements","el","events","eventListeners","stopImmediatePropagation","Platform","collapsedTitle","dropdownItemTmpl","McNavbarContainer","cssClasses","CollapsibleItem","_collapsed","processCollapsed","collapsed","updateCollapsedClass","CachedItemWidth","itemsForCollapse","_collapsedItemsWidth","calculateAndCacheCollapsedItemsWidth","updateTitle","acc","getTitle","computedTitle","getAttribute","decodeURI","innerText","removeAttribute","McNavbar","forceRecalculateItemsWidth","resizeDebounceInterval","firstLevelElement","secondLevelElements","resizeObserver","debounceTime","_resizeSubscription","updateCollapsed","_itemsWidths","calculateAndCacheItemsWidth","_totalItemsWidths","calculateAndCacheTotalItemsWidth","collapseDelta","maxAllowedWidth","itemsWidths","canCollapse","collapsedItemsWidth","getOuterElementWidth","getPropertyValue","allItemsSelector","allItems","from","getItemsForCollapse","McNavbarModule","mcPopoverAnimations","popoverState","opacity","componentElementRef","EXTENDED_OVERLAY_POSITIONS","popoverVisibility","_classList","popoverSize","list","getPlacementClass","POSITION_TO_CSS_MAP","isNonEmptyContent","isTemplateRef","isNonEmptyString","isVisible","animationStart","[class]","mcPopoverScrollStrategyFactory","_mcHeader","_mcContent","_mcFooter","McListSelection","McListSelectionChange","McListSelectionBase","_McListSelectionMixinBase","_element","horizontal","_modelChanges","_onTouched","_onChange","_keyManager","_tempValues","_setOptionsFromValues","_b","_c","selectAll","_reportValueChange","deselectAll","_getHeight","_canDeselectLast","values","getSelectedOptionValues","_isValidIndex","listOption","_removeOptionFromList","_hasFocus","optionIndex","_getOptionIndex","setPreviousItemActive","setNextItemActive","_onKeyDown","_getOptionByValue","[tabIndex]","MC_SELECTION_LIST_VALUE_ACCESSOR","McListOption","McListBase","McList","McListSubheaderCssStyler","McListItemBase","McListItem","_lineSetter","McLineSetter","_lines","_handleFocus","_handleBlur","_getHostElement","McLine","McListModule","McLineModule","McLinkBase","_McLinkBase","McLink","McLinkModule","parentService","rootOpenModals","rootAfterAllClose","rootRegisteredMetaMap","registeredMetaMap","registerModal","hasRegistered","afterOpenSubscription","afterOpen","afterCloseSubscription","afterClose","removeOpenModal","ModalUtil","document","lastPosition","listenDocumentClick","getLastClickPosition","clientX","clientY","ModalUtil$1","cfr","mcMeasureScrollbarService","changeDetector","_mcClosable","_mcMask","_mcMaskClosable","_mcOkLoading","_mcCancelLoading","isComponent","createDynamicComponent","isModalButtons","formatModalButtons","HTMLElement","OverlayRef","handleVisibleStateChange","firstChange","contentComponentRef","insert","changeVisibleFromInside","triggerOk","onClickOkCancel","triggerCancel","getContentComponentRef","getContentComponent","getElement","onClickMask","isModalType","onClickCloseBtn","ok","cancel","loadingKey","caseClose_1","doClose","isPromise","handleThen","catch","Type","animation","closeResult","changeBodyOverflow","animateTo","getButtonCallableProp","prop","onButtonClick","button","loading","changeAnimationState","maskAnimationClassMap","modalAnimationClassMap","updateTransformOrigin","buttons","autoLoading","component","factory","resolveComponentFactory","childInjector","parentInjector","modalElement","plusNum","body","scrollBarWidth","McDatepickerInput","isAltDownArrow","datepicker","readOnly","date","dateFormats","dateInput","lastValueValid","isValid","getValidDateOrNull","sameDate","cvaOnChange","McDatepickerInputEvent","dateChange","getThemePalette","formField","display","obj","isDateInstance","MC_DATEPICKER_VALUE_ACCESSOR","MC_DATEPICKER_VALIDATORS","[attr.aria-haspopup]","[attr.aria-owns]","[attr.min]","[attr.max]","(change)","MC_DATE_FORMATS","mcDatepicker","mcDatepickerFilter","McDatepickerToggleIcon","McDatepickerToggle","intl","defaultTabIndex","parsedTabIndex","watchStateChanges","datepickerDisabled","disabledChange","inputDisabled","datepickerInput","datepickerToggled","[class.mc-datepicker-toggle_active]","[class.mc-warn]","McDatepickerIntl","customIcon","McDatepickerModule","McCalendar","McCalendarBody","McDatepicker","McDatepickerContent","McMonthView","McYearView","McMultiYearView","McCalendarHeader","MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","McDivider","_vertical","_inset","[attr.aria-orientation]","[class.mc-divider-vertical]","[class.mc-divider-inset]","vertical","inset","McDividerModule","McDropdownContent","_template","_componentFactoryResolver","_appRef","_injector","_viewContainerRef","_document","_attached","context","_portal","_outlet","DomPortalOutlet","createElement","insertBefore","outletElement","isAttached","ApplicationRef","MC_DROPDOWN_PANEL","McDropdownItemBase","_McDropdownItemMixinBase","McDropdownItem","_parentDropdownPanel","_hovered","_highlighted","_triggersNestedDropdown","addItem","removeItem","_getTabIndex","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","childNodes","length_1","nodeType","[attr.role]","[class.mc-dropdown__item_highlighted]","(mouseenter)","mcDropdownAnimations","transformDropdown","query","fadeInItems","MC_DROPDOWN_DEFAULT_OPTIONS","providedIn","MC_DROPDOWN_DEFAULT_OPTIONS_FACTORY","McDropdown","_defaultOptions","_panelAnimationState","_animationDone","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_overlapTriggerX","overlapTriggerX","_overlapTriggerY","overlapTriggerY","_hasBackdrop","throwMcDropdownInvalidPositionX","setPositionClasses","throwMcDropdownInvalidPositionY","classes","previousPanelClass","_previousPanelClass","className","_handleKeydown","setFocusOrigin","focusFirstItem","lazyContent","resetActiveItem","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","_onAnimationStart","templateRef","MC_DROPDOWN_SCROLL_STRATEGY","MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER","MC_DROPDOWN_SCROLL_STRATEGY_FACTORY","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","_overlay","_scrollStrategy","_parent","_dropdownItemInstance","_handleTouchStart","_openedBy","dropdownOpened","dropdownClosed","_overlayRef","_opened","_closeSubscription","_hoverSubscription","triggersNestedDropdown","_dropdown","dropdown","reason","_destroy","_check","_handleHover","_cleanUpSubscriptions","_createOverlay","_setPosition","_getPortal","_closingActions","_init","opened","_reset","_setIsOpened","throwMcDropdownMissingError","_getOverlayConfig","_subscribeToPositions","withLockedPosition","originFallbackX","overlayFallbackX","overlayFallbackY","originFallbackY","backdrop","parentClose","hover","_handleMousedown","_handleClick","delay","asapScheduler","aria-haspopup","[attr.aria-expanded]","(mousedown)","McDropdownModule","McContentComponent","[class.mc-layout-content]","McFooterComponent","[class.mc-layout-footer]","McHeaderComponent","[class.mc-layout-header]","McLayoutComponent","hasSidebar","[class.mc-layout]","[class.mc-layout-has-sidebar]","McSidebarComponent","mcLayoutComponent","_mcWidth","mcCollapsedWidth","mcCollapsedChange","collapsible","mcCollapsed","[class.mc-layout-sidebar]","[class.mc-layout-sidebar-collapsed]","[style.flex]","[style.max-width.px]","[style.min-width.px]","[style.width.px]","Host","mcCollapsible","McLayoutModule","listSelection","checkboxPosition","wasSelected_1","_text","[class.mc-focused]","activeDate","addCalendarYears","_activeDate","getYear","yearsPerPage","onYearSelected","compareDate","oldActiveDate","activeDateChange","focusActiveCell","getActiveCell","mcCalendarBody","createCellForYear","year","yearName","getYearName","createDate","McCalendarCell","shouldEnableYear","maxDate","minDate","dateFilter","firstOfYear","addCalendarDays","selectedChange","yearSelected","monthSelected","createMissingDateImplError","today","validDate","deserialize","clampDate","init","selectedMonth","getMonthInCurrentYear","_minDate","_maxDate","onMonthSelected","month","normalizedDate","daysInMonth","getNumDaysInMonth","getDate","handleCalendarBodyKeydown","addCalendarMonths","getMonth","todayMonth","yearLabel","monthNames","getMonthNames","months","row","createCellForMonth","monthName","monthYearA11yLabel","newMonthName","toLocaleUpperCase","substr","shouldEnableMonth","activeYear","isYearAndMonthAfterMaxDate","isYearAndMonthBeforeMinDate","firstOfMonth","maxYear","maxMonth","minYear","minMonth","calendar","currentView","label","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","isSameView","nextEnabled","date1","date2","startView","userSelection","moveFocusOnNextTick","intlChanges","_startAt","clampedActiveDate","_currentView","calendarHeaderPortal","headerComponent","startAt","ngAfterViewChecked","getCurrentViewComponent","updateTodaysDate","monthView","yearView","multiYearView","dateSelected","yearSelectedInMultiYearView","normalizedYear","monthSelectedInYearView","normalizedMonth","userSelected","goToDateInView","dateClass","mcDatepickerAnimations","fadeInCalendar","Element","matches","msMatchesSelector","datepickerUid","MC_DATEPICKER_SCROLL_STRATEGY","MC_DATEPICKER_SCROLL_STRATEGY_FACTORY","McDatepickerContentBase","McDatepickerContentMixinBase","[@transformPanel]","selectedChanged","validSelected","focusedElementBeforeOpen","inputSubscription","_color","popupRef","popupComponentRef","oldValue","selectYear","selectMonth","activeElement","openAsPopup","calendarPortal","completeClose","createPopup","setColor","createPopupPositionStrategy","calendarHeaderComponent","NG_VALIDATORS","targetElement","datepickerSubscription","localeSubscription","validatorOnChange","mcDatepickerParse","minValidator","controlValue","mcDatepickerMin","actual","maxValidator","mcDatepickerMax","filterValidator","Validators","compose","localeChanges","oldDate","_min","_max","registerOnValidatorChange","validate","c","[class.mc-card_readonly]","[class.mc-card_selected]","readonly","McCard","McCardModule","MC_CHECKBOX_CLICK_ACTION","MC_CHECKBOX_CONTROL_VALUE_ACCESSOR","McCheckbox","Init","Checked","Unchecked","Indeterminate","McCheckboxChange","McCheckboxBase","_McCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","_controlValueAccessorChangeFn","_indeterminate","focusOrigin","_onInputFocusChange","_transitionCheckState","indeterminate","newState","oldState","[class.mc-indeterminate]","[class.mc-checkbox-label-before]","MC_CHECKBOX_REQUIRED_VALIDATOR","McCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","McCheckboxModule","stepUp","step","res","stepDown","MC_INPUT_INVALID_TYPES","BIG_STEP","SMALL_STEP","McInputBase","_McInputMixinBase","McNumberInput","_model","bigStep","isDigit","Infinity","_host","self","getPrototypeOf","get","normalizeSplitter","_focusChanged","minuses","NUMPAD_MINUS","DASH","FF_MINUS","serviceKeys","TAB","arrows","allowedKeys","isIEPeriod","isNotIEPeriod","metaKey","C","V","X","F1","F12","EDGE","TRIDENT","ZERO","NINE","NUMPAD_ZERO","NUMPAD_NINE","valueAsNumber","update","replace","isFloat","isInt","test","NgModel","McFormFieldNumberControl","_uid","_type","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","_validateType","_dirtyCheckNativeValue","_onInput","_isNeverEmpty","_isBadInput","getMcInputUnsupportedTypeError","McInputMono","MIN_VALIDATOR","MinValidator","_createValidator","_validator","MAX_VALIDATOR","MaxValidator","McInputModule","calendarLabel","openCalendarLabel","displayValue","enabled","numCols","activeCell","cellAspectRatio","selectedValueChange","cellClicked","cell","columnChanges","rows","firstRowOffset","cellPadding","cellWidth","isActiveCell","rowIndex","colIndex","cellNumber","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","hasSameMonthAndYear","selectedDate","getDateInCurrentMonth","selectedYear","todayDate","monthLabel","firstWeekOffset","getDayOfWeek","createWeekCells","dateNames","getDateNames","weeks","shouldEnableDate","dateA11yLabel","cellClasses","d1","d2","todayYear","activeOffset","years","_autoActiveFirstOption","McAutocomplete","_isOpen","showPanel","setVisibility","setScrollTop","getScrollTop","emitSelectEvent","McAutocompleteSelectedEvent","optionSelected","MC_AUTOCOMPLETE_DEFAULT_OPTIONS","displayWith","panelWidth","autoActiveFirstOption","McAutocompleteOrigin","MC_AUTOCOMPLETE_SCROLL_STRATEGY","MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","McAutocompleteTrigger","zone","optionSelections","autocomplete","autocompleteAttribute","_autocompleteDisabled","overlayAttached","componentDestroyed","viewportSubscription","canOpenOnNextFocus","closeKeyEventStream","windowBlurHandler","destroyPanel","openPanel","attachOverlay","closePanel","closingActionsSubscription","getOutsideClickStream","McOptionSelectionChange","setTriggerValue","activeOption","prevActiveItem","canOpen","scrollToOption","handleInput","previousValue","handleFocus","clickTarget","newScrollPosition","subscribeToClosingActions","firstStable","optionChanges","tap","panelClosingActions","setValueAndClose","toDisplay","inputValue","_control","clearPreviousSelectedOption","getMcAutocompleteMissingPanelError","setOrigin","getConnectedElement","updateSize","getPanelWidth","getOverlayConfig","wasOpen","withPush","connectedTo","getConnectedOverlayOrigin","getHostWidth","[attr.autocomplete]","(focusin)","autocompleteDisabled","McAutocompleteModule","McButtonCssStyler","[class.mc-button]","[class.mc-icon-button]","McButtonBase","McButtonMixinBase","McButton","McAnchor","haltDisabledEvents","MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","McButtonToggleGroup","McButtonToggleChange","buttonToggles","syncButtonToggle","isPrechecked","[class.mc-button-toggle-vertical]","McButtonToggle","buttonToggleGroup","isSingleSelector","onToggleClick","newChecked","[class.mc-button-toggle-standalone]","[class.mc-button-toggle-checked]","mcButton","McButtonToggleModule","hostElement","onClick","__extends","d","__","constructor","extendStatics","isBoolean","val","MC_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","Default","colorPalette","errorState","matcher","isErrorState","optionsArray","groups","groupCounter","optionHeight","currentScrollPosition","optionOffset","arrayMap","array","iteratee","baseValues","object","props","objectValues","mcSelectScrollStrategyProviderFactory","reposition","getMcFormFieldMissingControlError","MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","inputType","sanitizeNumber","isFinite","getPrecision","arr","pow","value1","value2","precision","provider","scrollThrottle","openSidepanels","setPrototypeOf","__proto__","p","__assign","s","n","MC_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","computedStyle","removeChild","BidiModule","Second","Empty","_setLineClass","count","_resetClasses","_setClass","isAdd","ShowOnDirtyErrorStateMatcher","form","invalid","dirty","submitted","touched","McPseudoCheckbox","scrollbarMeasure","overflow","initScrollBarWidth","_scrollbarWidth","scrollDiv","scrollProp","McOptgroupBase","McOptgroupMixinBase","uniqueOptgroupIdCounter","labelId","[class.mc-optgroup-disabled]","[attr.aria-labelledby]","mostRecentViewValue","[class.mc-option-multiple]","MC_LABEL_GLOBAL_OPTIONS","StandardCurve","SharpCurve","topCenter","topLeft","topRight","rightTop","rightBottom","bottomCenter","bottomLeft","bottomRight","leftTop","leftBottom","minWidth","animateChild","McIconCSSStyler","McIconBase","_McIconMixinBase","iconName","McCleaner","McHint","McPrefix","McStepper","onStepUp","onStepDown","McSuffix","McFormFieldBase","_McFormFieldMixinBase","_labelId","hovered","_validateControlChild","_numberControl","hasStepper","_stepper","valueChanges","clearValue","hasCleaner","onHoverChanged","isHovered","connectionContainerRef","_shouldForward","_hint","_suffix","_prefix","_cleaner","[class.mc-form-field_invalid]","[class.mc-form-field_has-prefix]","[class.mc-form-field_has-suffix]","[class.mc-form-field_has-cleaner]","[class.mc-form-field_has-stepper]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","(mouseleave)","McFormFieldWithoutBorders","uniqueAutocompleteIdCounter","defaults"],"mappings":"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"}