{"version":3,"file":"mosaic.umd.min.js","sources":["../../src/lib/tree/tree.ts","../../src/lib/tree/tree.module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/list/list.component.ts","../../src/lib/list/list.module.ts","../../src/lib/navbar/navbar.component.ts","../../src/lib/navbar/navbar.module.ts","../../src/lib/progress-bar/progress-bar.component.ts","../../src/lib/progress-bar/progress-bar.module.ts","../../src/lib/progress-spinner/progress-spinner.component.ts","../../src/lib/progress-spinner/progress-spinner.module.ts","../../src/lib/radio/radio.component.ts","../../src/lib/radio/radio.module.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/divider/divider.component.ts","../../src/lib/divider/divider.module.ts","../../src/lib/form-field/cleaner.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field.module.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input.module.ts","../../src/lib/list/list-selection.component.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/utils/utils.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/core/line/line.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/icon/icon.component.ts","../../src/lib/icon/icon.module.ts","../../src/lib/button/button.component.ts","../../src/lib/button/button.module.ts","../../src/lib/checkbox/checkbox-config.ts"],"sourcesContent":["import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, ContentChildren, EventEmitter, forwardRef, Input, IterableDiffer,\n    IterableDiffers, Output, QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    Directive, ElementRef, Inject\n} from '@angular/core';\nimport { NodeDef, ViewData } from '@angular/core/src/view';\n\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { CdkTreeNode, CdkTree, CdkTreeNodeOutlet } from '@ptsecurity/cdk/tree';\n\nimport { CanDisable, HasTabIndex, mixinDisabled, mixinTabIndex, toBoolean } from '@ptsecurity/mosaic/core';\n\nimport { FocusKeyManager } from '@ptsecurity/cdk/a11y';\n\nimport { END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, SPACE } from '@ptsecurity/cdk/keycodes';\n\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n    exportAs: 'mcTreeNodeOption',\n    selector: 'mc-tree-node-option',\n    host: {\n        tabindex: '-1',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': '_hasFocus',\n        '[attr.aria-expanded]': 'isExpanded',\n        '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n        class: 'mc-tree-node',\n\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()',\n\n        '(click)': '_handleClick()'\n    },\n    providers: [\n        { provide: CdkTreeNode, useExisting: McTreeNodeOption }\n    ]\n})\nexport class McTreeNodeOption<T> extends CdkTreeNode<T> implements CanDisable {\n    @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n        }\n    }\n\n    @Input()\n    get selected(): boolean {\n        return this.treeSelection.selectedOptions && this.treeSelection.selectedOptions.isSelected(this) || false;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            // this.treeSelection._reportValueChange();\n        }\n    }\n\n    private _hasFocus: boolean = false;\n\n    private _disabled: boolean = false;\n    private _selected: boolean = false;\n\n    constructor(\n        protected _elementRef: ElementRef,\n        @Inject(forwardRef(() => McTreeSelection))\n        protected treeSelection: McTreeSelection<T>\n    ) {\n        super(_elementRef, treeSelection);\n    }\n\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n\n        this.treeSelection.setFocusedOption(this);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.treeSelection.selectedOptions) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.treeSelection.selectedOptions.select(this);\n        } else {\n            this.treeSelection.selectedOptions.deselect(this);\n        }\n\n        // this._changeDetector.markForCheck();\n    }\n\n    _handleFocus(): void {\n        if (this.disabled || this._hasFocus) { return; }\n\n        this._hasFocus = true;\n    }\n\n    _handleBlur(): void {\n        this._hasFocus = false;\n    }\n\n    _handleClick(): void {\n        if (this.disabled) { return; }\n\n        this.treeSelection.setFocusedOption(this);\n    }\n}\n\nexport const _McTreeSelectionBase = mixinTabIndex(mixinDisabled(CdkTree));\n\nexport class McTreeNavigationChange {\n    constructor(\n        public source: McTreeSelection<any>,\n        public option: McTreeNodeOption<any>\n    ) {}\n}\n\nexport class McTreeSelectionChange {\n    constructor(\n        public source: McTreeSelection<any>,\n        public option: McTreeNodeOption<any>\n    ) {}\n}\n\n@Component({\n    exportAs: 'mcTreeSelection',\n    selector: 'mc-tree-selection',\n    template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n    host: {\n        '[tabIndex]': 'tabIndex',\n        class: 'mc-tree',\n        role: 'tree-selection',\n        '(keydown)': '_onKeyDown($event)'\n    },\n    styleUrls: ['./tree.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{ provide: CdkTree, useExisting: McTreeSelection }]\n})\nexport class McTreeSelection<T> extends _McTreeSelectionBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex {\n    // Outlets within the tree's template where the dataNodes will be inserted.\n    @ViewChild(CdkTreeNodeOutlet) _nodeOutlet: CdkTreeNodeOutlet;\n\n    @ContentChildren(forwardRef(() => McTreeNodeOption)) options: QueryList<McTreeNodeOption<T>>;\n\n    _keyManager: FocusKeyManager<McTreeNodeOption<T>>;\n\n    selectedOptions: SelectionModel<McTreeNodeOption<T>>;\n\n    _disabled: boolean = false;\n    tabIndex: number;\n    multiple: boolean;\n    autoSelect: boolean;\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(rawValue: boolean) {\n        const value = toBoolean(rawValue);\n\n        if (this._disabled !== value) {\n            this._disabled = value;\n\n            if (this._disabled) {\n                console.log('need disable all options');\n            } else {\n                console.log('need enable all options');\n            }\n        }\n    }\n\n    @Output() readonly navigationChange = new EventEmitter<McTreeNavigationChange>();\n\n    @Output() readonly selectionChange = new EventEmitter<McTreeSelectionChange>();\n\n    constructor(\n        _differs: IterableDiffers,\n        _changeDetectorRef: ChangeDetectorRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('multiple') multiple: string,\n        @Attribute('auto-select') autoSelect: string\n    ) {\n        super(_differs, _changeDetectorRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.multiple = multiple === null ? true : toBoolean(multiple);\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n\n        this.selectedOptions = new SelectionModel<McTreeNodeOption<T>>(this.multiple);\n    }\n\n    _onKeyDown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n\n        switch (keyCode) {\n            case LEFT_ARROW:\n                if (this._keyManager.activeItem) {\n                    this.treeControl.collapse(this._keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                break;\n            case RIGHT_ARROW:\n                if (this._keyManager.activeItem) {\n                    this.treeControl.expand(this._keyManager.activeItem.data);\n                }\n                event.preventDefault();\n\n                break;\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n\n                event.preventDefault();\n\n                break;\n            case HOME:\n                console.log('need set focus on first node');\n                event.preventDefault();\n\n                break;\n            case END:\n                console.log('need set focus on last node');\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                console.log('need do scroll page and set focus on first in viewport');\n\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                console.log('need do scroll page and set focus on last in viewport');\n\n                event.preventDefault();\n\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    ngAfterContentInit(): void {\n        this._keyManager = new FocusKeyManager<McTreeNodeOption<T>>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation(true)\n            .withHorizontalOrientation(null);\n    }\n\n    setFocusedOption(option: McTreeNodeOption<T>): void {\n        this._keyManager.updateActiveItem(option);\n\n        if (this.autoSelect) {\n            this.options.forEach((item) => item.setSelected(false));\n            option.setSelected(true);\n        }\n\n        this._emitNavigationEvent(option);\n    }\n\n    // Toggles the selected state of the currently focused option.\n    toggleFocusedOption(): void {\n        const focusedIndex = this._keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n            const focusedOption: McTreeNodeOption<T> = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this._canUnselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this._emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    renderNodeChanges(\n        data: T[],\n        dataDiffer: IterableDiffer<T> = this._dataDiffer,\n        viewContainer: any = this._nodeOutlet.viewContainer,\n        parentData?: T\n    ) {\n        super.renderNodeChanges(data, dataDiffer, viewContainer, parentData);\n\n        const arrayOfInstances = [];\n\n        viewContainer._embeddedViews.forEach((view: ViewData) => {\n            const viewDef = view.def;\n\n            viewDef.nodes.forEach((node: NodeDef) => {\n                if (viewDef.nodeMatchedQueries === node.matchedQueryIds) {\n                    const nodeData: any = view.nodes[node.nodeIndex];\n\n                    arrayOfInstances.push(nodeData.instance as never);\n                }\n            });\n        });\n\n        if (this.options) {\n            this.options.reset(arrayOfInstances);\n            this.options.notifyOnChanges();\n        }\n    }\n\n    _emitNavigationEvent(option: McTreeNodeOption<T>): void {\n        this.navigationChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    _emitChangeEvent(option: McTreeNodeOption<T>): void {\n        this.selectionChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private _isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    private _canUnselectLast(_option: McTreeNodeOption<T>): boolean {\n        return true;\n        // return !(this.noUnselect && this.selectedOptions.selected.length === 1 && listOption.selected);\n    }\n}\n\n","import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { CdkTreeModule } from '@ptsecurity/cdk/tree';\n\nimport { McTreeNodeDef } from './node';\nimport { McTreeNodePadding } from './padding';\nimport { McTreeSelection, McTreeNodeOption } from './tree';\n\n\nconst MC_TREE_DIRECTIVES = [\n    McTreeNodeDef,\n    McTreeNodePadding,\n    McTreeSelection,\n    McTreeNodeOption\n];\n\n@NgModule({\n    imports: [CommonModule, CdkTreeModule],\n    exports: MC_TREE_DIRECTIVES,\n    declarations: MC_TREE_DIRECTIVES\n})\nexport class McTreeModule {}\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { FlatTreeControl, ITreeControl } from '@ptsecurity/cdk/tree';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class McTreeFlattener<T, F> {\n\n    constructor(public transformFunction: (node: T, level: number) => F,\n                public getLevel: (node: F) => number,\n                public isExpandable: (node: F) => boolean,\n                public getChildren: (node: T) => Observable<T[]>) {\n    }\n\n    _flattenNode(node: T, level: number,\n                 resultNodes: F[], parentMap: boolean[]): F[] {\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n\n        if (this.isExpandable(flatNode)) {\n            this.getChildren(node).pipe(take(1)).subscribe((children) => {\n                children.forEach((child, index) => {\n                    const childParentMap: boolean[] = parentMap.slice();\n                    childParentMap.push(index !== children.length - 1);\n                    this._flattenNode(child, level + 1, resultNodes, childParentMap);\n                });\n            });\n        }\n\n        return resultNodes;\n    }\n\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n    flattenNodes(structuredData: T[]): F[] {\n        const resultNodes: F[] = [];\n        structuredData.forEach((node) => this._flattenNode(node, 0, resultNodes, []));\n\n        return resultNodes;\n    }\n\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n    expandFlattenedNodes(nodes: F[], treeControl: ITreeControl<F>): F[] {\n        const results: F[] = [];\n        const currentExpand: boolean[] = [];\n        currentExpand[0] = true;\n\n        nodes.forEach((node) => {\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n\n            if (expand) { results.push(node); }\n\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        });\n\n        return results;\n    }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `McTree`.\n * The nested tree nodes of type `T` are flattened through `MсTreeFlattener`, and converted\n * to type `F` for `McTree` to consume.\n */\nexport class McTreeFlatDataSource<T, F> extends DataSource<F> {\n    _flattenedData = new BehaviorSubject<F[]>([]);\n\n    _expandedData = new BehaviorSubject<F[]>([]);\n\n    _data: BehaviorSubject<T[]>;\n\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n        this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n        this.treeControl.dataNodes = this._flattenedData.value;\n    }\n\n    constructor(private treeControl: FlatTreeControl<F>,\n                private treeFlattener: McTreeFlattener<T, F>,\n                initialData: T[] = []) {\n        super();\n        this._data = new BehaviorSubject<T[]>(initialData);\n    }\n\n    connect(collectionViewer: ICollectionViewer): Observable<F[]> {\n        const changes = [\n            collectionViewer.viewChange,\n            this.treeControl.expansionModel.onChange!,\n            this._flattenedData\n        ];\n\n        return merge(...changes).pipe(map(() => {\n            this._expandedData.next(\n                this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n\n            return this._expandedData.value;\n        }));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by ITreeControl and each non-leaf node.\n */\nexport class McTreeNestedDataSource<T> extends DataSource<T> {\n    _data = new BehaviorSubject<T[]>([]);\n\n    /**\n     * Data for the nested tree\n     */\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n    }\n\n    connect(collectionViewer: ICollectionViewer): Observable<T[]> {\n        return merge(...[collectionViewer.viewChange, this._data])\n            .pipe(map(() => this.data));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import { Version } from '@angular/core';\n\n\nexport const VERSION = new Version('0.0.1-8e04110');\n","// todo пока не делаем, перенесено из материала, но у нас в доках таких простых списков нет.\nimport {\n    AfterContentInit, ChangeDetectionStrategy, Component, ContentChildren, Directive, ElementRef, QueryList,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { McLine, McLineSetter } from '@ptsecurity/mosaic/core';\n\n\nexport class McListBase {}\n\n@Component({\n    selector: 'mc-list',\n    host: { class: 'mc-list' },\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McList extends McListBase {}\n\n\n/**\n * Directive whose purpose is to add the mc- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n    selector: '[mc-subheader], [mcSubheader]',\n    host: { class: 'mc-subheader' }\n})\nexport class McListSubheaderCssStyler {}\n\n\n// Boilerplate for applying mixins to McListItem.\nexport class McListItemBase {}\n\n@Component({\n    selector: 'mc-list-item, a[mc-list-item]',\n    host: {\n        class: 'mc-list-item',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()'\n    },\n    templateUrl: './list-item.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListItem extends McListItemBase implements AfterContentInit {\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    private _lineSetter: McLineSetter;\n\n    constructor(private _element: ElementRef) {\n        super();\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    _handleFocus() {\n        this._element.nativeElement.classList.add('mc-focused');\n    }\n\n    _handleBlur() {\n        this._element.nativeElement.classList.remove('mc-focused');\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLineModule } from '@ptsecurity/mosaic/core';\n\nimport { McListSelection, McListOption } from './list-selection.component';\nimport { McList, McListItem, McListSubheaderCssStyler } from './list.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        McLineModule\n    ],\n    exports: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ],\n    declarations: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ]\n})\nexport class McListModule {}\n","import { fromEvent } from 'rxjs';\nimport { Subscription } from 'rxjs/internal/Subscription';\nimport { debounceTime } from 'rxjs/operators';\n\nimport {\n    AfterViewInit,\n    Component, Directive,\n    ElementRef,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    ViewEncapsulation\n} from '@angular/core';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\n\nimport { CanDisable, mixinDisabled } from '@ptsecurity/mosaic/core';\n\n\nconst COLLAPSED_CLASS: string = 'mc-navbar-collapsed-title';\nconst MC_ICON = 'mc-icon';\nconst MC_NAVBAR = 'mc-navbar';\nconst MC_NAVBAR_CONTAINER = 'mc-navbar-container';\nconst MC_NAVBAR_ITEM = 'mc-navbar-item';\nconst MC_NAVBAR_BRAND = 'mc-navbar-brand';\nconst MC_NAVBAR_TITLE = 'mc-navbar-title';\nconst MC_NAVBAR_LOGO = 'mc-navbar-logo';\n\nexport type McNavbarContainerPositionType = 'left' | 'right';\n\n@Directive({\n    selector: MC_NAVBAR_LOGO,\n    host: {\n        class: MC_NAVBAR_LOGO\n    }\n})\nexport class McNavbarLogo {}\n\n@Directive({\n    selector: MC_NAVBAR_BRAND,\n    host: {\n        class: MC_NAVBAR_BRAND\n    }\n})\nexport class McNavbarBrand {}\n\n@Directive({\n    selector: MC_NAVBAR_TITLE,\n    host: {\n        class: MC_NAVBAR_TITLE\n    }\n})\nexport class McNavbarTitle {}\n\nexport class McNavbarItemBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McNavbarMixinBase = mixinDisabled(McNavbarItemBase);\n\n@Component({\n    selector: MC_NAVBAR_ITEM,\n    template: `\n        <a [attr.tabindex]=\"disabled ? -1 : tabIndex\" class=\"mc-navbar-item\">\n            <ng-content>\n            </ng-content>\n        </a>\n    `,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null'\n    }\n})\nexport class McNavbarItem extends _McNavbarMixinBase implements OnInit, OnDestroy, CanDisable {\n\n    @Input()\n    tabIndex: number = 0;\n\n    @Input()\n    set collapsedTitle(value: string) {\n        this.elementRef.nativeElement.setAttribute('computedTitle', encodeURI(value));\n    }\n\n    constructor(\n        public  elementRef: ElementRef,\n        private _focusMonitor: FocusMonitor\n    ) {\n        super(elementRef);\n    }\n\n    ngOnInit() {\n        this.denyClickIfDisabled();\n\n        this._focusMonitor.monitor(this.elementRef.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n    }\n\n    // This method is required due to angular 2 issue https://github.com/angular/angular/issues/11200\n    private denyClickIfDisabled() {\n        const events: Event[] = this.elementRef.nativeElement.eventListeners('click');\n\n        events.forEach((event) => this.elementRef.nativeElement.removeEventListener('click', event));\n\n        this.elementRef.nativeElement.addEventListener('click', (event: MouseEvent) => {\n            if (this.elementRef.nativeElement.hasAttribute('disabled')) {\n                event.stopImmediatePropagation();\n            }\n        }, true);\n\n        events.forEach((event) => this.elementRef.nativeElement.addEventListener('click', event));\n    }\n}\n\n@Directive({\n    selector: MC_NAVBAR_CONTAINER\n})\nexport class McNavbarContainer {\n    @Input()\n    position: McNavbarContainerPositionType = 'left';\n\n    @HostBinding('class')\n    get cssClasses(): string {\n        return this.position === 'left' ? 'mc-navbar-left' : 'mc-navbar-right';\n    }\n}\n\nclass CollapsibleItem {\n    private _collapsed: boolean = false;\n\n    constructor(\n        public element: HTMLElement,\n        public width: number\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        this._collapsed = collapsed;\n\n        this.updateCollapsedClass();\n    }\n\n    private updateCollapsedClass() {\n        if (this._collapsed) {\n            this.element.classList.add(COLLAPSED_CLASS);\n        } else {\n            this.element.classList.remove(COLLAPSED_CLASS);\n        }\n\n    }\n}\n\nclass CachedItemWidth {\n\n    get canCollapse(): boolean {\n        return this.itemsForCollapse.length > 0;\n    }\n\n    private _collapsedItemsWidth: number;\n\n    get collapsedItemsWidth(): number {\n        if (this._collapsedItemsWidth !== undefined) {\n            return this._collapsedItemsWidth;\n        }\n\n        this.calculateAndCacheCollapsedItemsWidth();\n\n        return this._collapsedItemsWidth;\n    }\n\n    constructor(\n        public element: HTMLElement,\n        public width: number,\n        public itemsForCollapse: CollapsibleItem[] = []\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        if (this.itemsForCollapse.length > 0) {\n            this.updateTitle(collapsed);\n        }\n\n        this.itemsForCollapse.forEach((item) => item.processCollapsed(collapsed));\n    }\n\n    private calculateAndCacheCollapsedItemsWidth() {\n        this._collapsedItemsWidth = this.itemsForCollapse\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getTitle(): string {\n        const computedTitle = this.element.getAttribute('computedTitle');\n\n        return computedTitle\n            ? decodeURI(computedTitle)\n            : (this.itemsForCollapse.length > 0 ? this.itemsForCollapse[0].element.innerText : '');\n    }\n\n    private updateTitle(collapsed: boolean) {\n        if (collapsed) {\n            this.element.setAttribute('title', this.getTitle());\n        } else {\n            this.element.removeAttribute('title');\n        }\n    }\n}\n\n\n@Component({\n    selector: MC_NAVBAR,\n    template: `\n        <nav class=\"mc-navbar\">\n            <ng-content select=\"[${MC_NAVBAR_CONTAINER}],${MC_NAVBAR_CONTAINER}\"></ng-content>\n        </nav>\n    `,\n    styleUrls: ['./navbar.css'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class McNavbar implements AfterViewInit, OnDestroy {\n\n    private readonly forceRecalculateItemsWidth: boolean = false;\n    private readonly resizeDebounceInterval: number = 100;\n    private readonly firstLevelElement: string = MC_NAVBAR_CONTAINER;\n    private readonly secondLevelElements: string[] = [\n        MC_NAVBAR_ITEM,\n        MC_NAVBAR_BRAND,\n        MC_NAVBAR_TITLE\n    ];\n\n    private _totalItemsWidths: number;\n    private _itemsWidths: CachedItemWidth[];\n\n    private get maxAllowedWidth(): number {\n        return this._elementRef.nativeElement.querySelector('nav').getBoundingClientRect().width;\n    }\n\n    private get itemsWidths(): CachedItemWidth[] {\n        if (this._itemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._itemsWidths;\n        }\n\n        this.calculateAndCacheItemsWidth();\n\n        return this._itemsWidths;\n    }\n\n    private get totalItemsWidth(): number {\n        if (this._totalItemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._totalItemsWidths;\n        }\n\n        this.calculateAndCacheTotalItemsWidth();\n\n        return this._totalItemsWidths;\n    }\n\n    private _resizeSubscription: Subscription;\n\n    constructor(\n        private _elementRef: ElementRef\n    ) {\n        const resizeObserver = fromEvent(window, 'resize')\n            .pipe(debounceTime(this.resizeDebounceInterval));\n\n        this._resizeSubscription = resizeObserver.subscribe(this.updateCollapsed.bind(this));\n    }\n\n    updateCollapsed(): void {\n        let collapseDelta = this.totalItemsWidth - this.maxAllowedWidth;\n\n        for (let i = this.itemsWidths.length - 1; i >= 0; i--) {\n            const item = this.itemsWidths[i];\n\n            if (!item.canCollapse) {\n                continue;\n            }\n\n            item.processCollapsed(collapseDelta > 0);\n            collapseDelta -= item.collapsedItemsWidth;\n        }\n    }\n\n    ngAfterViewInit(): void {\n        // Note: this wait is required for loading and rendering fonts for icons;\n        // unfortunately we cannot control font rendering\n        setTimeout(() => this.updateCollapsed(), 0);\n    }\n\n    ngOnDestroy() {\n        this._resizeSubscription.unsubscribe();\n    }\n\n    private calculateAndCacheTotalItemsWidth() {\n        this._totalItemsWidths = this.itemsWidths\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getOuterElementWidth(element: HTMLElement): number {\n        const baseWidth  = element.getBoundingClientRect().width;\n        const marginRight = parseInt(getComputedStyle(element).getPropertyValue('margin-right'));\n        const marginLeft = parseInt(getComputedStyle(element).getPropertyValue('margin-left'));\n\n        return baseWidth + marginRight + marginLeft;\n    }\n\n    private calculateAndCacheItemsWidth() {\n        const allItemsSelector = this.secondLevelElements\n            .map((e: string) => `${this.firstLevelElement}>${e}`);\n        const allItems: HTMLElement[] = Array.from(this._elementRef.nativeElement.querySelectorAll(allItemsSelector));\n\n        this._itemsWidths = allItems\n            .map((el) => new CachedItemWidth(el, this.getOuterElementWidth(el), this.getItemsForCollapse(el)));\n    }\n\n    private getItemsForCollapse(element: HTMLElement): CollapsibleItem[] {\n        const icon = element.querySelector(`[${MC_ICON}],${MC_NAVBAR_LOGO},[${MC_NAVBAR_LOGO}]`);\n\n        if (!icon) {\n            return [];\n        }\n\n        return Array.from(element.querySelectorAll(MC_NAVBAR_TITLE))\n            .map((el) => new CollapsibleItem(<HTMLElement> el, el.getBoundingClientRect().width));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McNavbar,\n    McNavbarContainer,\n    McNavbarItem,\n    McNavbarTitle,\n    McNavbarBrand,\n    McNavbarLogo\n} from './navbar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ],\n    declarations: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ]\n})\nexport class McNavbarModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressBarMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressBarBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressBarMixinBase = mixinColor(McProgressBarBase);\n\n@Component({\n    selector: 'mc-progress-bar',\n    templateUrl: './progress-bar.component.html',\n    styleUrls: ['./progress-bar.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-bar',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressBar extends _McProgressBarMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-bar-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressBarMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McProgressBar\n} from './progress-bar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressBar\n    ],\n    declarations: [\n        McProgressBar\n    ]\n})\nexport class McProgressBarModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressSpinnerBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressPinnerMixinBase = mixinColor(McProgressSpinnerBase);\n\nconst MAX_DASH_ARRAY = 273;\n\n@Component({\n    selector: 'mc-progress-spinner',\n    templateUrl: './progress-spinner.component.html',\n    styleUrls: ['./progress-spinner.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-spinner',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressSpinner extends _McProgressPinnerMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-spinner-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressSpinnerMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n\n    get dashOffsetPercent(): string {\n        return `${MAX_DASH_ARRAY - this.percentage * MAX_DASH_ARRAY}%`;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McProgressSpinner } from './progress-spinner.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressSpinner\n    ],\n    declarations: [\n        McProgressSpinner\n    ]\n})\nexport class McProgressSpinnerModule {}\n","import {\n    AfterContentInit, AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef,\n    Input, OnDestroy, OnInit, Optional, Output, QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\n\nimport {UniqueSelectionDispatcher} from '@ptsecurity/cdk/collections';\n\nimport {\n    CanColor,\n    CanDisable,\n    HasTabIndex,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/** Change event object emitted by McRadio. */\nexport class McRadioChange {\n    constructor(\n        /** The McRadioButton that emits the change event. */\n        public source: McRadioButton,\n        /** The value of the McRadioButton. */\n        public value: any) {}\n}\n\n// Boilerplate for applying mixins to McRadioGroup.\n/** @docs-private */\nexport class McRadioGroupBase { }\nexport const _McRadioGroupMixinBase = mixinDisabled(McRadioGroupBase);\n\n/**\n * Provider Expression that allows mc-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McRadioGroup),\n    multi: true\n};\n\n@Directive({\n    selector: 'mc-radio-group',\n    exportAs: 'mcRadioGroup',\n    providers: [MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n    host: {\n        'role': 'radiogroup',\n        'class': 'mc-radio-group'\n    },\n    inputs: ['disabled']\n})\nexport class McRadioGroup extends _McRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** Child radio buttons. */\n    @ContentChildren(forwardRef(() => McRadioButton), { descendants: true })\n    _radios: QueryList<McRadioButton>;\n\n    /**\n     * Selected value for group. Should equal the value of the selected radio button if there *is*\n     * a corresponding radio button with a matching value. If there is *not* such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    private _value: any = null;\n\n    /** The HTML name attribute applied to radio buttons in this group. */\n    private _name: string = `mc-radio-group-${nextUniqueId++}`;\n\n    /** The currently selected radio button. Should match value. */\n    private _selected: McRadioButton | null = null;\n\n    /** Whether the `value` has been set to its initial value. */\n    private _isInitialized: boolean = false;\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    private _labelPosition: 'before' | 'after' = 'after';\n\n    /** Whether the radio group is disabled. */\n    private _disabled: boolean = false;\n\n    /** Whether the radio group is required. */\n    private _required: boolean = false;\n\n    /** The method to be called in order to update ngModel */\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @docs-private\n     */\n    onTouched: () => any = () => {};\n\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    @Input()\n    get name(): string { return this._name; }\n    set name(value: string) {\n        this._name = value;\n        this.updateRadioButtonNames();\n    }\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this.markRadiosForCheck();\n    }\n\n    /** Value of the radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n\n            this.updateSelectedRadioFromValue();\n            this.checkSelectedRadioButton();\n        }\n    }\n\n    checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n\n    /** Whether the radio button is selected. */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: McRadioButton | null) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this.checkSelectedRadioButton();\n    }\n\n    /** Whether the radio group is disabled */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /** Whether the radio group is required */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    constructor(private _changeDetector: ChangeDetectorRef) {\n        super();\n    }\n\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on McRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the McRadioGroup.\n        this._isInitialized = true;\n    }\n\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        if (this._isInitialized) {\n            this.change.emit(new McRadioChange(this._selected!, this._value));\n        }\n    }\n\n    markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach((radio) => radio.markForCheck());\n        }\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n\n    private updateRadioButtonNames(): void {\n        if (this._radios) {\n            this._radios.forEach((radio) => {\n                radio.name = this.name;\n            });\n        }\n    }\n\n    /** Updates the `selected` radio button from the internal _value state. */\n    private updateSelectedRadioFromValue(): void {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected != null && this._selected.value === this._value;\n\n        if (this._radios != null && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach((radio) => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n}\n\n\n// Boilerplate for applying mixins to McRadioButton.\n/** @docs-private */\nexport class McRadioButtonBase {\n    // Since the disabled property is manually defined for the McRadioButton and isn't set up in\n    // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n    // defined to properly work.\n    disabled: boolean;\n\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McRadioButtonMixinBase =\n    mixinColor(mixinTabIndex(McRadioButtonBase));\n\n\n@Component({\n    selector: 'mc-radio-button',\n    templateUrl: 'radio.component.html',\n    styleUrls: ['radio.css'],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    exportAs: 'mcRadioButton',\n    host: {\n        class: 'mc-radio-button',\n        '[attr.id]': 'id',\n        '[class.mc-radio-checked]': 'checked',\n        '[class.mc-radio-disabled]': 'disabled',\n        '(focus)': '_inputElement.nativeElement.focus()'\n    }\n})\nexport class McRadioButton extends _McRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, HasTabIndex {\n\n    private _uniqueId: string = `mc-radio-${++nextUniqueId}`;\n\n    /* tslint:disable:member-ordering */\n\n    /** The unique ID for the radio button. */\n    @Input() id: string = this._uniqueId;\n\n    /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n    @Input() name: string;\n\n    /** Used to set the 'aria-label' attribute on the underlying input element. */\n    @Input('aria-label') ariaLabel: string;\n\n    /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n    @Input('aria-labelledby') ariaLabelledby: string;\n\n    /** The 'aria-describedby' attribute is read after the element's label and field type. */\n    @Input('aria-describedby') ariaDescribedby: string;\n\n    /** Whether this radio button is checked. */\n    @Input()\n    get checked(): boolean { return this._checked; }\n    set checked(value: boolean) {\n        const newCheckedState = toBoolean(value);\n\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** The value of this radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(value: any) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup != null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n\n    /** Whether the radio button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n    }\n    set disabled(value: boolean) {\n        const newDisabledState = toBoolean(value);\n\n        if (this._disabled !== newDisabledState) {\n\n            this._disabled = newDisabledState;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** Whether the radio button is required. */\n    @Input()\n    get required(): boolean {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    private _labelPosition: 'before' | 'after';\n\n    /** The native `<input type=radio>` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** The parent radio group. May or may not be present. */\n    radioGroup: McRadioGroup;\n\n    @Input()\n    isFocused: boolean = false;\n\n    /** ID of the native input element inside `<mc-radio-button>` */\n    get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n    /** Whether this radio is checked. */\n    private _checked: boolean = false;\n\n    /** Whether this radio is disabled. */\n    private _disabled: boolean;\n\n    /** Whether this radio is required. */\n    private _required: boolean;\n\n    /** Value assigned to this radio. */\n    private _value: any = null;\n\n    /** Unregister function for _radioDispatcher */\n    private removeUniqueSelectionListener: () => void = () => {};\n\n    constructor(\n        @Optional() radioGroup: McRadioGroup,\n        elementRef: ElementRef,\n        private _changeDetector: ChangeDetectorRef,\n        private _radioDispatcher: UniqueSelectionDispatcher\n    ) {\n\n        super(elementRef);\n\n        this.radioGroup = radioGroup;\n\n        this.removeUniqueSelectionListener =\n            _radioDispatcher.listen((id: string, name: string) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n\n    ngAfterViewInit() {}\n\n    ngOnDestroy() {\n        this.removeUniqueSelectionListener();\n    }\n\n    /** Focuses the radio button. */\n    focus(): void {}\n\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n\n    onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n\n    onInputChange(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this.emitChangeEvent();\n\n        if (this.radioGroup) {\n            this.radioGroup.controlValueAccessorChangeFn(this.value);\n            this.radioGroup.touch();\n            if (groupValueChanged) {\n                this.radioGroup.emitChangeEvent();\n            }\n        }\n    }\n\n    /** Dispatch change event with current value. */\n    private emitChangeEvent(): void {\n        this.change.emit(new McRadioChange(this, this._value));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport {A11yModule} from '@ptsecurity/cdk/a11y';\nimport {McCommonModule} from '@ptsecurity/mosaic/core';\n\nimport {McRadioButton, McRadioGroup} from './radio.component';\n\n\n@NgModule({\n    imports: [ CommonModule, A11yModule, McCommonModule ],\n    exports: [ McRadioGroup, McRadioButton, McCommonModule ],\n    declarations: [ McRadioGroup, McRadioButton ]\n})\nexport class McRadioModule {}\n","import { Directive, Input } from '@angular/core';\n\nimport { CdkTreeNodeDef } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodeDef]',\n    inputs: ['when: mcTreeNodeDefWhen'],\n    providers: [{ provide: CdkTreeNodeDef, useExisting: McTreeNodeDef }]\n})\nexport class McTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n    @Input('mcTreeNode') data: T;\n}\n","import { Directive, Input } from '@angular/core';\nimport { CdkTreeNodePadding } from '@ptsecurity/cdk/tree';\n\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n    selector: '[mcTreeNodePadding]',\n    providers: [{ provide: CdkTreeNodePadding, useExisting: McTreeNodePadding }]\n})\nexport class McTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n    /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n    @Input('mcTreeNodePadding') level: number;\n\n    /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n    @Input('matTreeNodePaddingIndent') indent: number;\n\n    _paddingIndent(): string | null {\n        const nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)\n            ? this._tree.treeControl.getLevel(this._treeNode.data)\n            : null;\n\n        const level = this._level || nodeLevel;\n\n        return level ? `${(level * this._indent) + 8}px` : '8px';\n    }\n}\n","import {\n    AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport {\n    CanColor,\n    CanDisable,\n    HasTabIndex,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\nimport { MC_CHECKBOX_CLICK_ACTION, McCheckboxClickAction } from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mc-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McCheckbox),\n    multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n    /** The initial state of the component before any user interaction. */\n    Init,\n    /** The state representing the component when it's becoming checked. */\n    Checked,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate\n}\n\n/** Change event object emitted by McCheckbox. */\nexport class McCheckboxChange {\n    /** The source McCheckbox of the event. */\n    source: McCheckbox;\n    /** The new `checked` value of the checkbox. */\n    checked: boolean;\n}\n\n// Boilerplate for applying mixins to McCheckbox.\n/** @docs-private */\nexport class McCheckboxBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\nexport const _McCheckboxMixinBase =\n    mixinTabIndex(mixinColor(mixinDisabled(McCheckboxBase)));\n\n\n/**\n * A mosaic checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A McCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n */\n@Component({\n    selector: 'mc-checkbox',\n    templateUrl: 'checkbox.html',\n    styleUrls: ['checkbox.css'],\n    exportAs: 'mcCheckbox',\n    host: {\n        class: 'mc-checkbox',\n        '[id]': 'id',\n        '[attr.id]': 'id',\n        '[class.mc-checkbox-indeterminate]': 'indeterminate',\n        '[class.mc-checkbox-checked]': 'checked',\n        '[class.mc-checkbox-disabled]': 'disabled',\n        '[class.mc-checkbox-label-before]': 'labelPosition == \"before\"'\n    },\n    providers: [MC_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCheckbox extends _McCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex {\n\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     */\n    @Input('aria-label') ariaLabel: string = '';\n\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n    private _uniqueId: string = `mc-checkbox-${++nextUniqueId}`;\n\n    /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n    @Input() id: string = this._uniqueId;\n\n    /** Returns the unique id for the visual hidden input. */\n    get inputId(): string {\n        return `${this.id || this._uniqueId}-input`;\n    }\n\n    /** Whether the checkbox is required. */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    private _required: boolean;\n\n    /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n    @Input() labelPosition: 'before' | 'after' = 'after';\n\n    /** Name value will be applied to the input element if present */\n    @Input() name: string | null = null;\n\n    /** Event emitted when the checkbox's `checked` value changes. */\n    @Output() readonly change: EventEmitter<McCheckboxChange> =\n        new EventEmitter<McCheckboxChange>();\n\n    /** Event emitted when the checkbox's `indeterminate` value changes. */\n    @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** The value attribute of the native input element */\n    @Input() value: string;\n\n    /** The native `<input type=\"checkbox\">` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * @docs-private\n     */\n    _onTouched: () => any = () => {\n    }\n\n    private _currentAnimationClass: string = '';\n\n    private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n    private _controlValueAccessorChangeFn: (value: any) => void = () => {\n    }\n\n    constructor(elementRef: ElementRef,\n                private _changeDetectorRef: ChangeDetectorRef,\n                private _focusMonitor: FocusMonitor,\n                @Attribute('tabindex') tabIndex: string,\n                @Optional() @Inject(MC_CHECKBOX_CLICK_ACTION)\n                private _clickAction: McCheckboxClickAction) {\n        super(elementRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._inputElement.nativeElement)\n            .subscribe((focusOrigin) => this._onInputFocusChange(focusOrigin));\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    }\n\n    /**\n     * Whether the checkbox is checked.\n     */\n    @Input()\n    get checked(): boolean {\n        return this._checked;\n    }\n\n    set checked(value: boolean) {\n        if (value != this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _checked: boolean = false;\n\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value != this.disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    @Input()\n    get indeterminate(): boolean {\n        return this._indeterminate;\n    }\n\n    set indeterminate(value: boolean) {\n        const changed = value != this._indeterminate;\n        this._indeterminate = value;\n\n        if (changed) {\n            if (this._indeterminate) {\n                this._transitionCheckState(TransitionCheckState.Indeterminate);\n            } else {\n                this._transitionCheckState(\n                    this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n    }\n\n    private _indeterminate: boolean = false;\n\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // This method is getting called whenever the label of the checkbox changes.\n        // Since the checkbox uses the OnPush strategy we need to notify it about the change\n        // that has been recognized by the cdkObserveContent directive.\n        this._changeDetectorRef.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any) {\n        this.checked = !!value;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this._onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n    }\n\n    _getAriaChecked(): 'true' | 'false' | 'mixed' {\n        return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n    }\n\n    private _transitionCheckState(newState: TransitionCheckState) {\n        const oldState = this._currentCheckState;\n        const element: HTMLElement = this._elementRef.nativeElement;\n\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n\n        this._currentCheckState = newState;\n\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n        }\n    }\n\n    private _emitChangeEvent() {\n        const event = new McCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    }\n\n    /** Function is called whenever the focus changes for the input element. */\n    private _onInputFocusChange(focusOrigin: FocusOrigin) {\n        if (focusOrigin) {\n            this._onTouched();\n        }\n    }\n\n    /** Toggles the `checked` state of the checkbox. */\n    toggle(): void {\n        this.checked = !this.checked;\n    }\n\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event\n     */\n    _onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && this._clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && this._clickAction !== 'check') {\n\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n\n            this.toggle();\n            this._transitionCheckState(\n                this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        } else if (!this.disabled && this._clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mc-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n\n    /** Focuses the checkbox. */\n    focus(): void {\n        this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n    }\n\n    _onInteractionEvent(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n}\n","import {\n    Directive,\n    forwardRef,\n    Provider\n} from '@angular/core';\nimport {\n    CheckboxRequiredValidator,\n    NG_VALIDATORS\n} from '@angular/forms';\n\n\nexport const MC_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McCheckboxRequiredValidator),\n    multi: true\n};\n\n/**\n * Validator for Mosaic checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mc-checkbox`.\n */\n@Directive({\n    selector: `mc-checkbox[required][formControlName],\n             mc-checkbox[required][formControl], mc-checkbox[required][ngModel]`,\n    providers: [MC_CHECKBOX_REQUIRED_VALIDATOR],\n    host: { '[attr.required]': 'required ? \"\" : null' }\n})\nexport class McCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McCheckbox } from './checkbox';\nimport { McCheckboxRequiredValidator } from './checkbox-required-validator';\n\n\n@NgModule({\n    imports: [CommonModule, McCommonModule],\n    exports: [McCheckbox, McCheckboxRequiredValidator, McCommonModule],\n    declarations: [McCheckbox, McCheckboxRequiredValidator]\n})\nexport class McCheckboxModule {\n}\n","import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';\n\nimport { toBoolean } from '@ptsecurity/mosaic/core';\n\n\n@Component({\n    selector: 'mc-divider',\n    host: {\n        class: 'mc-divider',\n        role: 'separator',\n        '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n        '[class.mc-divider-vertical]': 'vertical',\n        '[class.mc-divider-inset]': 'inset'\n    },\n    template: '',\n    styleUrls: ['divider.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false\n})\nexport class McDivider {\n    // Whether the divider is vertically aligned.\n    @Input()\n    get vertical(): boolean {\n        return this._vertical;\n    }\n\n    set vertical(value: boolean) {\n        this._vertical = toBoolean(value);\n    }\n\n    private _vertical: boolean = false;\n\n    // Whether the divider is an inset divider.\n    @Input()\n    get inset(): boolean {\n        return this._inset;\n    }\n\n    set inset(value: boolean) {\n        this._inset = toBoolean(value);\n    }\n\n    private _inset: boolean = false;\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\n\nimport {McCommonModule} from '@ptsecurity/mosaic/core';\n\nimport {McDivider} from './divider.component';\n\n\n@NgModule({\n    imports: [\n        McCommonModule,\n        CommonModule\n    ],\n    exports: [\n        McDivider,\n        McCommonModule\n    ],\n    declarations: [\n        McDivider\n    ]\n})\nexport class McDividerModule {}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-cleaner',\n    template: '<i mc-icon=\"mc-close-M_16\" class=\"mc-cleaner__icon\"></i>'\n})\nexport class McCleaner {\n}\n","import { NgControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\n\n/** An interface which allows a control to work inside of a `MсFormField`. */\nexport abstract class McFormFieldControl<T> {\n    /** The value of the control. */\n    value: T | null;\n\n    /**\n     * Stream that emits whenever the state of the control changes such that the parent `MсFormField`\n     * needs to run change detection.\n     */\n    readonly stateChanges: Observable<void>;\n\n    /** The element ID for this control. */\n    readonly id: string;\n\n    /** The placeholder for this control. */\n    readonly placeholder: string;\n\n    /** Gets the NgControl for this control. */\n    readonly ngControl: NgControl | null;\n\n    /** Whether the control is focused. */\n    readonly focused: boolean;\n\n    /** Whether the control is empty. */\n    readonly empty: boolean;\n\n    /** Whether the control is required. */\n    readonly required: boolean;\n\n    /** Whether the control is disabled. */\n    readonly disabled: boolean;\n\n    /** Whether the control is in an error state. */\n    readonly errorState: boolean;\n\n    /**\n     * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n     * based on their control type. The form field will add a class,\n     * `mat-form-field-type-{{controlType}}` to its root element.\n     */\n    readonly controlType?: string;\n\n    /** Handles a click on the control's container. */\n    abstract onContainerClick(event: MouseEvent): void;\n}\n","import { Directive, Input } from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n@Directive({\n    selector: 'mc-hint',\n    host: {\n        class: 'mc-hint',\n        '[attr.id]': 'id'\n    }\n})\nexport class McHint {\n    @Input() id: string = `mc-hint-${nextUniqueId++}`;\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcPrefix]'\n})\nexport class McPrefix {\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcSuffix]'\n})\nexport class McSuffix {\n}\n","import {\n    AfterContentChecked,\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren, Directive,\n    ElementRef,\n    QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { EMPTY, merge } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n\n\nimport { McCleaner } from './cleaner';\nimport { McFormFieldControl } from './form-field-control';\nimport { getMcFormFieldMissingControlError } from './form-field-errors';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McSuffix } from './suffix';\n\n\nexport class McFormFieldBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\n@Component({\n    selector: 'mc-form-field',\n    exportAs: 'mcFormField',\n    templateUrl: 'form-field.html',\n    // McInput is a directive and can't have styles, so we need to include its styles here.\n    // The McInput styles are fairly minimal so it shouldn't be a big deal for people who\n    // aren't using McInput.\n    styleUrls: [\n        'form-field.css',\n        '../input/input.css'\n    ],\n    host: {\n        class: 'mc-form-field',\n        '[class.mc-form-field_invalid]': '_control.errorState',\n        '[class.mc-form-field_disabled]': '_control.disabled',\n        '[class.mc-form-field_has-prefix]': 'hasPrefix',\n        '[class.mc-form-field_has-suffix]': 'hasSuffix',\n        '[class.mc-form-field_has-cleaner]': 'canShowCleaner',\n        '[class.mc-focused]': '_control.focused',\n        '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n        '[class.ng-touched]': '_shouldForward(\"touched\")',\n        '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n        '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n        '[class.ng-valid]': '_shouldForward(\"valid\")',\n        '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n        '[class.ng-pending]': '_shouldForward(\"pending\")',\n        '(keydown)': 'onKeyDown($event)'\n    },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class McFormField extends McFormFieldBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit {\n\n    @ContentChild(McFormFieldControl) _control: McFormFieldControl<any>;\n    @ContentChildren(McHint) _hint: QueryList<McHint>;\n    @ContentChildren(McSuffix) _suffix: QueryList<McSuffix>;\n    @ContentChildren(McPrefix) _prefix: QueryList<McPrefix>;\n    @ContentChildren(McCleaner) _cleaner: QueryList<McCleaner>;\n\n\n    constructor(\n        public _elementRef: ElementRef,\n        private _changeDetectorRef: ChangeDetectorRef) {\n        super(_elementRef);\n    }\n\n    ngAfterContentInit() {\n        this._validateControlChild();\n        if (this._control.controlType) {\n            this._elementRef.nativeElement.classList\n                .add(`mc-form-field-type-${this._control.controlType}`);\n        }\n\n        // Subscribe to changes in the child control state in order to update the form field UI.\n        this._control.stateChanges.pipe(startWith()).subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n        });\n\n        // Run change detection if the value changes.\n        const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n        merge(valueChanges)\n            .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    ngAfterContentChecked() {\n        this._validateControlChild();\n    }\n\n    ngAfterViewInit() {\n        // Avoid animations on load.\n        this._changeDetectorRef.detectChanges();\n    }\n\n    clearValue($event) {\n        $event.stopPropagation();\n\n        if (this._control && this._control.ngControl) {\n            this._control.ngControl.reset();\n        }\n    }\n\n    onContainerClick($event) {\n        return this._control.onContainerClick && this._control.onContainerClick($event);\n    }\n\n    onKeyDown(e: KeyboardEvent): void {\n        if (e.keyCode === ESCAPE &&\n            this._control.focused &&\n            this.hasCleaner) {\n            if (this._control && this._control.ngControl) {\n                this._control.ngControl.reset();\n            }\n            e.preventDefault();\n        }\n    }\n\n    /** Determines whether a class from the NgControl should be forwarded to the host element. */\n    _shouldForward(prop: string): boolean {\n        const ngControl = this._control ? this._control.ngControl : null;\n\n        return ngControl && ngControl[prop];\n    }\n\n    /** Throws an error if the form field's control is missing. */\n    protected _validateControlChild() {\n        if (!this._control) {\n            throw getMcFormFieldMissingControlError();\n        }\n    }\n\n    get hasHint() {\n        return this._hint && this._hint.length > 0;\n    }\n\n    get hasSuffix() {\n        return this._suffix && this._suffix.length > 0;\n    }\n\n    get hasPrefix() {\n        return this._prefix && this._prefix.length > 0;\n    }\n\n    get hasCleaner() {\n        return this._cleaner && this._cleaner.length > 0;\n    }\n\n    get canShowCleaner() {\n        return  this.hasCleaner &&\n        this._control && this._control.ngControl\n            ? this._control.ngControl.value && !this._control.disabled\n            : false;\n    }\n}\n\n@Directive({\n    selector: 'mc-form-field[mcFormFieldWithoutBorders]',\n    exportAs: 'mcFormFieldWithoutBorders',\n    host: { class: 'mc-form-field_without-borders' }\n})\nexport class McFormFieldWithoutBorders {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McCleaner } from './cleaner';\nimport { McFormField, McFormFieldWithoutBorders } from './form-field';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McSuffix } from './suffix';\n\n\n@NgModule({\n    declarations: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner\n    ],\n    imports: [CommonModule, McIconModule],\n    exports: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner\n    ]\n})\nexport class McFormFieldModule {\n}\n","import { InjectionToken } from '@angular/core';\n\n\nexport const MC_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{ value: any }>('MC_INPUT_VALUE_ACCESSOR');\n","import {\n    Directive, DoCheck, ElementRef, Inject, Input, OnChanges,\n    OnDestroy, OnInit, Optional, Self\n} from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@ptsecurity/cdk/platform';\nimport { CanUpdateErrorState, ErrorStateMatcher, mixinErrorState } from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\n\nimport { getMcInputUnsupportedTypeError } from './input-errors';\nimport { MC_INPUT_VALUE_ACCESSOR } from './input-value-accessor';\n\n\nconst MC_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\n\nlet nextUniqueId = 0;\n\nexport class McInputBase {\n    constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n                public _parentForm: NgForm,\n                public _parentFormGroup: FormGroupDirective,\n                public ngControl: NgControl) {\n    }\n}\n\nexport const _McInputMixinBase = mixinErrorState(McInputBase);\n\n\n@Directive({\n    selector: `input[mcInput]`,\n    exportAs: 'mcInput',\n    host: {\n        'class': 'mc-input',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '(blur)': '_focusChanged(false)',\n        '(focus)': '_focusChanged(true)',\n        '(input)': '_onInput()'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McInput }]\n})\nexport class McInput extends _McInputMixinBase implements McFormFieldControl<any>, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-input';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this._uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    // tslint:disable no-reserved-keywords\n    /** Input type of the element. */\n    @Input()\n    get type(): string {\n        return this._type;\n    }\n\n    set type(value: string) {\n        this._type = value || 'text';\n        this._validateType();\n\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    // tslint:enable no-reserved-keywords\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this._inputValueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n\n    protected _uid = `mc-input-${nextUniqueId++}`;\n    protected _previousNativeValue: any;\n    protected _disabled = false;\n    protected _id: string;\n    protected _required = false;\n    protected _type = 'text';\n    protected _neverEmptyInputTypes = [\n        'date',\n        'datetime',\n        'datetime-local',\n        'month',\n        'time',\n        'week'\n    ].filter((t) => getSupportedInputTypes().has(t));\n\n    private _inputValueAccessor: { value: any };\n\n    constructor(protected _elementRef: ElementRef,\n                protected _platform: Platform,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() _parentForm: NgForm,\n                @Optional() _parentFormGroup: FormGroupDirective,\n                _defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_INPUT_VALUE_ACCESSOR) inputValueAccessor: any) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n        this._previousNativeValue = this.value;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n    }\n\n    /** Focuses the input. */\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Does some manual dirty checking on the native input `value` property. */\n    protected _dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Make sure the input is a supported type. */\n    protected _validateType() {\n        if (MC_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n            throw getMcInputUnsupportedTypeError(this._type);\n        }\n    }\n\n    /** Checks whether the input type is one of the types that are never empty. */\n    protected _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n\n    /** Checks whether the input is invalid based on the native validation. */\n    protected _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        const validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n\n        return validity && validity.badInput;\n    }\n}\n\n@Directive({\n    selector: 'input[mcInputMonospace]',\n    exportAs: 'McInputMonospace',\n    host: { class: 'mc-input_monospace' }\n})\nexport class McInputMono {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McInput, McInputMono } from './input';\n\n\n@NgModule({\n    imports: [ CommonModule, A11yModule, McCommonModule, FormsModule ],\n    exports: [ McInput, McInputMono ],\n    declarations: [ McInput, McInputMono ]\n})\nexport class McInputModule {}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    Output,\n    QueryList,\n    ViewEncapsulation,\n    ChangeDetectorRef,\n    Inject,\n    OnDestroy,\n    OnInit,\n    ViewChild\n} from '@angular/core';\n\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { Subscription } from 'rxjs';\n\nimport { FocusKeyManager, IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { END, ENTER, HOME, PAGE_DOWN, PAGE_UP, SPACE } from '@ptsecurity/cdk/keycodes';\n\nimport {\n    McLine,\n    McLineSetter,\n    CanDisable,\n    mixinDisabled,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n    exportAs: 'mcListOption',\n    selector: 'mc-list-option',\n    host: {\n        tabindex: '-1',\n\n        class: 'mc-list-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': '_hasFocus',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()',\n        '(click)': '_handleClick()'\n    },\n    templateUrl: 'list-option.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListOption implements AfterContentInit, OnDestroy, OnInit, IFocusableOption {\n    _hasFocus: boolean = false;\n\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    @ViewChild('text') _text: ElementRef;\n\n    // Whether the label should appear before or after the checkbox. Defaults to 'after'\n    @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n    @Input() value: any;\n\n    private _focusHandlerInProgress: boolean;\n\n    @Input()\n    get disabled() {\n        return this._disabled || (this.listSelection && this.listSelection.disabled);\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    @Input()\n    get selected(): boolean {\n        return this.listSelection.selectedOptions && this.listSelection.selectedOptions.isSelected(this) || false;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            this.listSelection._reportValueChange();\n        }\n    }\n\n    private _lineSetter: McLineSetter;\n    private _selected = false;\n    private _disabled = false;\n\n    constructor(\n        private _element: ElementRef,\n        private _changeDetector: ChangeDetectorRef,\n        @Inject(forwardRef(() => McListSelection))\n        public listSelection: McListSelection\n    ) {}\n\n    ngOnInit() {\n        if (this._selected) {\n            // List options that are selected at initialization can't be reported properly to the form\n            // control. This is because it takes some time until the selection-list knows about all\n            // available options. Also it can happen that the ControlValueAccessor has an initial value\n            // that should be used instead. Deferring the value change report to the next tick ensures\n            // that the form control value is not being overwritten.\n            const wasSelected = this._selected;\n\n            Promise.resolve().then(() => {\n                if (this._selected || wasSelected) {\n                    this.selected = true;\n                    this._changeDetector.markForCheck();\n                }\n            });\n        }\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    ngOnDestroy(): void {\n        if (this.selected) {\n            // We have to delay this until the next tick in order\n            // to avoid changed after checked errors.\n            Promise.resolve().then(() => this.selected = false);\n        }\n\n        this.listSelection._removeOptionFromList(this);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    focus(): void {\n        this._element.nativeElement.focus();\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    getLabel() {\n        return this._text ? this._text.nativeElement.textContent : '';\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.listSelection.selectedOptions) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.listSelection.selectedOptions.select(this);\n        } else {\n            this.listSelection.selectedOptions.deselect(this);\n        }\n\n        this._changeDetector.markForCheck();\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    _handleClick() {\n        if (this.disabled) { return; }\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    _handleFocus() {\n        if (this.disabled || this._hasFocus) { return; }\n\n        this._hasFocus = true;\n    }\n\n    _handleBlur() {\n        this._hasFocus = false;\n\n        this.listSelection._onTouched();\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n\n\nexport const MC_SELECTION_LIST_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McListSelection),\n    multi: true\n};\n\n// Change event that is being fired whenever the selected state of an option changes. */\nexport class McListSelectionChange {\n    constructor(\n        // Reference to the selection list that emitted the event.\n        public source: McListSelection,\n        // Reference to the option that has been changed.\n        public option: McListOption\n    ) {}\n}\n\n\nexport class McListSelectionBase {}\n\nexport const _McListSelectionMixinBase = mixinDisabled(McListSelectionBase);\n\n@Component({\n    exportAs: 'mcListSelection',\n    selector: 'mc-list-selection',\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'tabIndex'],\n    host: {\n        class: 'mc-list-selection',\n        '[tabIndex]': 'tabIndex',\n        '(focus)': 'focus()',\n        '(blur)': '_onTouched()',\n        '(keydown)': '_onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    providers: [MC_SELECTION_LIST_VALUE_ACCESSOR],\n    preserveWhitespaces: false\n})\nexport class McListSelection extends _McListSelectionMixinBase implements\n    IFocusableOption, CanDisable, AfterContentInit, ControlValueAccessor {\n\n    _keyManager: FocusKeyManager<McListOption>;\n\n    // The option components contained within this selection-list.\n    @ContentChildren(McListOption) options: QueryList<McListOption>;\n\n    tabIndex: number;\n\n    autoSelect: boolean;\n    noUnselect: boolean;\n    multiple: boolean;\n\n    // todo temporary solution\n    withShift: boolean;\n    withCtrl: boolean;\n\n    @Input() horizontal: boolean = false;\n\n    // Emits a change event whenever the selected state of an option changes.\n    @Output() readonly selectionChange: EventEmitter<McListSelectionChange> = new EventEmitter<McListSelectionChange>();\n\n    selectedOptions: SelectionModel<McListOption>;\n\n    // Used for storing the values that were assigned before the options were initialized.\n    private _tempValues: string[] | null;\n\n    private _modelChanges = Subscription.EMPTY;\n\n    constructor(\n        private _element: ElementRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string,\n        @Attribute('multiple') multiple: string\n    ) {\n        super();\n\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.multiple = multiple === null ? true : toBoolean(multiple);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.selectedOptions = new SelectionModel<McListOption>(this.multiple);\n    }\n\n    ngAfterContentInit(): void {\n        this.horizontal = toBoolean(this.horizontal);\n\n        this._keyManager = new FocusKeyManager<McListOption>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation(!this.horizontal)\n            .withHorizontalOrientation(this.horizontal ? 'ltr' : null);\n\n        if (this._tempValues) {\n            this._setOptionsFromValues(this._tempValues);\n            this._tempValues = null;\n        }\n\n        // Sync external changes to the model back to the options.\n        this._modelChanges = this.selectedOptions.onChange!.subscribe((event) => {\n            for (const item of event.added) {\n                item.selected = true;\n            }\n\n            for (const item of event.removed) {\n                item.selected = false;\n            }\n        });\n\n        this.updateScrollSize();\n    }\n\n    ngOnDestroy() {\n        this._modelChanges.unsubscribe();\n    }\n\n    focus() {\n        this._element.nativeElement.focus();\n    }\n\n    selectAll() {\n        this.options.forEach((option) => option.setSelected(true));\n\n        this._reportValueChange();\n    }\n\n    deselectAll() {\n        this.options.forEach((option) => option.setSelected(false));\n\n        this._reportValueChange();\n    }\n\n    updateScrollSize(): void {\n        if (this.horizontal || !this.options.first) { return; }\n\n        this._keyManager.withScrollSize(Math.floor(this._getHeight() / this.options.first._getHeight()));\n    }\n\n    // Sets the focused option of the selection-list.\n    setFocusedOption(option: McListOption): void {\n        this._keyManager.updateActiveItem(option);\n\n        if (this.withShift && this.multiple) {\n            const previousIndex = this._keyManager.previousActiveItemIndex;\n            const activeIndex = this._keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n\n            this.withShift = false;\n        } else if (this.withCtrl) {\n            this.withCtrl = false;\n\n            if (!this._canUnselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) {\n                this.options.forEach((item) => item.setSelected(false));\n                option.setSelected(true);\n            }\n        }\n\n        this._emitChangeEvent(option);\n        this._reportValueChange();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(values: string[]): void {\n        if (this.options) {\n            this._setOptionsFromValues(values || []);\n        } else {\n            this._tempValues = values;\n        }\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this._onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this._onTouched = fn;\n    }\n\n    // Implemented as a part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        if (this.options) {\n            this.options.forEach((option) => option.disabled = isDisabled);\n        }\n    }\n\n    getSelectedOptionValues(): string[] {\n        return this.options.filter((option) => option.selected).map((option) => option.value);\n    }\n\n    // Toggles the selected state of the currently focused option.\n    toggleFocusedOption(): void {\n        const focusedIndex = this._keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n            const focusedOption: McListOption = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this._canUnselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this._emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    _canUnselectLast(listOption: McListOption): boolean {\n        return !(this.noUnselect && this.selectedOptions.selected.length === 1 && listOption.selected);\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    // View to model callback that should be called if the list or its options lost focus.\n    _onTouched: () => void = () => {};\n\n    // Removes an option from the selection list and updates the active item.\n    _removeOptionFromList(option: McListOption) {\n        if (option._hasFocus) {\n            const optionIndex = this._getOptionIndex(option);\n\n            // Check whether the option is the last item\n            if (optionIndex > 0) {\n                this._keyManager.setPreviousItemActive();\n            } else if (optionIndex === 0 && this.options.length > 1) {\n                this._keyManager.setNextItemActive();\n            }\n        }\n    }\n\n    _onKeyDown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n        this.withShift = event.shiftKey;\n        this.withCtrl = event.ctrlKey;\n\n        switch (keyCode) {\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                if (!this.horizontal) { this._keyManager.setPreviousPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                if (!this.horizontal) { this._keyManager.setNextPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    // Reports a value change to the ControlValueAccessor\n    _reportValueChange() {\n        if (this.options) {\n            this._onChange(this.getSelectedOptionValues());\n        }\n    }\n\n    // Emits a change event if the selected state of an option changed.\n    _emitChangeEvent(option: McListOption) {\n        this.selectionChange.emit(new McListSelectionChange(this, option));\n    }\n\n    // Returns the option with the specified value.\n    private _getOptionByValue(value: string): McListOption | undefined {\n        return this.options.find((option) => option.value === value);\n    }\n\n    // Sets the selected options based on the specified values.\n    private _setOptionsFromValues(values: string[]) {\n        this.options.forEach((option) => option.setSelected(false));\n\n        values\n            .map((value) => this._getOptionByValue(value))\n            .filter(Boolean)\n            .forEach((option) => option!.setSelected(true));\n    }\n\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private _isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    // Returns the index of the specified list option.\n    private _getOptionIndex(option: McListOption): number {\n        return this.options.toArray().indexOf(option);\n    }\n\n    // View to model callback that should be called whenever the selected options change.\n    private _onChange: (value: any) => void = (_: any) => {};\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","\nexport function isBoolean(val: any): val is boolean { return typeof val === 'boolean'; }\n\nexport function toBoolean(value: any): boolean {\n    return value != null && `${value}` !== 'false';\n}\n","import { NgModule, InjectionToken, Optional, Inject, isDevMode } from '@angular/core';\nimport { BidiModule } from '@ptsecurity/cdk/bidi';\n\n\n// Injection token that configures whether the Mosaic sanity checks are enabled.\nexport const MC_SANITY_CHECKS = new InjectionToken<boolean>('mc-sanity-checks', {\n    providedIn: 'root',\n    factory: MC_SANITY_CHECKS_FACTORY\n});\n\nexport function MC_SANITY_CHECKS_FACTORY(): boolean {\n    return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Mosaic\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n    imports: [ BidiModule ],\n    exports: [ BidiModule ]\n})\nexport class McCommonModule {\n    // Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n    private _hasDoneGlobalChecks = false;\n\n    // Reference to the global `document` object.\n    private _document = typeof document === 'object' && document ? document : null;\n\n    // Reference to the global 'window' object.\n    private _window = typeof window === 'object' && window ? window : null;\n\n    constructor(@Optional() @Inject(MC_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n        if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n            this._checkDoctypeIsDefined();\n            this._checkThemeIsPresent();\n            this._hasDoneGlobalChecks = true;\n        }\n    }\n\n    // Whether any sanity checks are enabled\n    private _areChecksEnabled(): boolean {\n        return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n    }\n\n    // Whether the code is running in tests.\n    private _isTestEnv() {\n        return this._window && (this._window['__karma__'] || this._window['jasmine']);\n    }\n\n    private _checkDoctypeIsDefined(): void {\n        if (this._document && !this._document.doctype) {\n            console.warn(\n                'Current document does not have a doctype. This may cause ' +\n                'some Mosaic components not to behave as expected.'\n            );\n        }\n    }\n\n    private _checkThemeIsPresent(): void {\n        if (this._document && typeof getComputedStyle === 'function') {\n            const testElement = this._document.createElement('div');\n\n            testElement.classList.add('mc-theme-loaded-marker');\n            this._document.body.appendChild(testElement);\n\n            const computedStyle = getComputedStyle(testElement);\n\n            // In some situations, the computed style of the test element can be null. For example in\n            // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n            // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n            if (computedStyle && computedStyle.display !== 'none') {\n                console.warn(\n                    'Could not find Mosaic core theme. Most Mosaic ' +\n                    'components may not work as expected. For more info refer ' +\n                    'to the theming guide: link there'\n                );\n            }\n\n            this._document.body.removeChild(testElement);\n        }\n    }\n}\n","import { toBoolean } from '../utils/index';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanDisable {\n    disabled: boolean;\n}\n\n// Mixin to augment a directive with a `disabled` property.\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n    return class extends base {\n        private _disabled: boolean = false;\n\n        get disabled() {\n            return this._disabled;\n        }\n\n        set disabled(value: any) {\n            this._disabled = toBoolean(value);\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n    };\n}\n","import { ElementRef } from '@angular/core';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanColor {\n    color: ThemePalette;\n}\n\nexport interface HasElementRef {\n    _elementRef: ElementRef;\n}\n\nexport enum ThemePalette {\n    Primary = 'primary',\n    Second = 'second',\n    Warn = 'warn',\n    Default = 'second'\n}\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T, defaultColor: ThemePalette = ThemePalette.Default): Constructor<CanColor> & T {\n    return class extends base {\n        private _color: ThemePalette;\n\n        get color(): ThemePalette {\n            return this._color;\n        }\n\n        set color(value: ThemePalette) {\n            const colorPalette = value || defaultColor;\n\n            if (colorPalette !== this._color) {\n                if (this._color) {\n                    this._elementRef.nativeElement.classList.remove(`mc-${this._color}`);\n                }\n\n                if (colorPalette) {\n                    this._elementRef.nativeElement.classList.add(`mc-${colorPalette}`);\n                }\n\n                this._color = colorPalette;\n            }\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n\n            // Set the default color that can be specified from the mixin.\n            this.color = defaultColor;\n        }\n    };\n}\n\n","import { Constructor } from './constructor';\nimport { CanDisable } from './disabled';\n\n\nexport interface HasTabIndex {\n    tabIndex: number;\n}\n\n// Mixin to augment a directive with a `tabIndex` property.\nexport function mixinTabIndex<\n        T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0): Constructor<HasTabIndex\n    > & T {\n    return class extends base {\n        private _tabIndex: number = defaultTabIndex;\n\n        get tabIndex(): number {\n            return this.disabled ? -1 : this._tabIndex;\n        }\n\n        set tabIndex(value: number) {\n            this._tabIndex = value != null ? value : defaultTabIndex;\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n    };\n}\n","import { FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { ErrorStateMatcher } from '../error/error-options';\nimport { Constructor } from './constructor';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n    readonly stateChanges: Subject<void>;\n    errorState: boolean;\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState();\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n    _parentFormGroup: FormGroupDirective;\n    _parentForm: NgForm;\n    _defaultErrorStateMatcher: ErrorStateMatcher;\n    ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n    : Constructor<CanUpdateErrorState> & T {\n    return class extends base {\n        /** Whether the component is in an error state. */\n        errorState: boolean = false;\n\n        /**\n         * Stream that emits whenever the state of the input changes such that the wrapping\n         * `MсFormField` needs to run change detection.\n         */\n        readonly stateChanges = new Subject<void>();\n\n        errorStateMatcher: ErrorStateMatcher;\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n\n        updateErrorState() {\n            const oldState = this.errorState;\n            const parent = this._parentFormGroup || this._parentForm;\n            const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n            const control = this.ngControl ? this.ngControl.control as FormControl : null;\n            const newState = matcher.isErrorState(control, parent);\n\n            if (newState !== oldState) {\n                this.errorState = newState;\n                this.stateChanges.next();\n            }\n        }\n    };\n}\n","export function getMcFormFieldMissingControlError(): Error {\n  return Error('mc-form-field must contain a McFormFieldControl.');\n}\n","export function getMcInputUnsupportedTypeError(inputType: string): Error {\n    return Error(`Input type \"${inputType}\" isn't supported by mcInput.`);\n}\n","import { NgModule, Directive, ElementRef, QueryList } from '@angular/core';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(McLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n    selector: '[mc-line], [mcLine]',\n    host: { class: 'mc-line' }\n})\nexport class McLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class McLineSetter {\n    constructor(private _lines: QueryList<McLine>, private _element: ElementRef) {\n        this._setLineClass(this._lines.length);\n\n        this._lines.changes.subscribe(() => {\n            this._setLineClass(this._lines.length);\n        });\n    }\n\n    private _setLineClass(count: number): void {\n        this._resetClasses();\n        if (count === 2 || count === 3) {\n            this._setClass(`mc-${count}-line`, true);\n        } else if (count > 3) {\n            this._setClass(`mc-multi-line`, true);\n        }\n    }\n\n    private _resetClasses(): void {\n        this._setClass('mc-2-line', false);\n        this._setClass('mc-3-line', false);\n        this._setClass('mc-multi-line', false);\n    }\n\n    private _setClass(className: string, isAdd: boolean): void {\n        if (isAdd) {\n            this._element.nativeElement.classList.add(className);\n        } else {\n            this._element.nativeElement.classList.remove(className);\n        }\n    }\n}\n\n@NgModule({\n    imports: [],\n    exports: [McLine],\n    declarations: [McLine]\n})\nexport class McLineModule {}\n","import { Injectable } from '@angular/core';\nimport { FormGroupDirective, NgForm, FormControl } from '@angular/forms';\n\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n    }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({ providedIn: 'root' })\nexport class ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n    }\n}\n","import { Component, ViewEncapsulation, Input, ChangeDetectionStrategy } from '@angular/core';\n\n\nexport type McPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mc-primary .mc-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mc-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'mc-pseudo-checkbox',\n    styleUrls: ['pseudo-checkbox.css'],\n    template: '',\n    host: {\n        class: 'mc-pseudo-checkbox',\n        '[class.mc-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n        '[class.mc-pseudo-checkbox-checked]': 'state === \"checked\"',\n        '[class.mc-pseudo-checkbox-disabled]': 'disabled'\n    }\n})\nexport class McPseudoCheckbox {\n    // Display state of the checkbox.\n    @Input() state: McPseudoCheckboxState = 'unchecked';\n\n    // Whether the checkbox is disabled.\n    @Input() disabled: boolean = false;\n}\n","import { NgModule } from '@angular/core';\n\nimport { McPseudoCheckbox } from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n    exports: [McPseudoCheckbox],\n    declarations: [McPseudoCheckbox]\n})\nexport class McPseudoCheckboxModule {}\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","import {\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { mixinColor, CanColor } from '@ptsecurity/mosaic/core';\n\n\n@Directive({\n    selector: '[mc-icon]',\n    host: { class: 'mc mc-icon' }\n})\nexport class McIconCSSStyler {}\n\n\nexport class McIconBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McIconMixinBase = mixinColor(McIconBase);\n\n\n@Component({\n    selector: `[mc-icon]`,\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./icon.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McIcon extends _McIconMixinBase implements CanColor {\n    constructor(elementRef: ElementRef, @Attribute('mc-icon') iconName: string) {\n        super(elementRef);\n\n        elementRef.nativeElement.classList.add(iconName);\n    }\n\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McIcon,\n    McIconCSSStyler\n} from './icon.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McIcon,\n        McIconCSSStyler\n    ],\n    declarations: [\n        McIcon,\n        McIconCSSStyler\n    ]\n})\nexport class McIconModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    OnDestroy,\n    QueryList,\n    ViewEncapsulation,\n    ContentChildren\n} from '@angular/core';\n\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { Platform } from '@ptsecurity/cdk/platform';\n\nimport { mixinColor, mixinDisabled, CanColor, CanDisable } from '@ptsecurity/mosaic/core';\nimport { McIcon } from '@ptsecurity/mosaic/icon';\n\n\n@Directive({\n    selector: 'button, a[mc-button]',\n    host: { class: 'mc-button mc-olololo' }\n})\nexport class McButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-xs-button], a[mc-xs-button]',\n    host: { class: 'mc-button mc-button_xs' }\n})\nexport class McXSButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-sm-button], a[mc-sm-button]',\n    host: { class: 'mc-button mc-button_sm' }\n})\nexport class McSMButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-lg-button], a[mc-lg-button]',\n    host: { class: 'mc-button mc-button_lg' }\n})\nexport class McLGButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-xl-button], a[mc-xl-button]',\n    host: { class: 'mc-button mc-button_xl' }\n})\nexport class McXLButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-icon-button], a[mc-icon-button]',\n    queries: {\n        contentChildren: new ContentChildren(McIcon)\n    },\n    host: { class: 'mc-icon-button' }\n})\nexport class McIconButtonCSSStyler {\n    nativeElement: Element;\n\n    contentChildren: QueryList<McIcon>;\n\n    constructor(elementRef: ElementRef) {\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        this._addClassModificatorForIcons();\n    }\n\n    _addClassModificatorForIcons() {\n        const twoIcons = 2;\n        const icons = this.contentChildren.map((item) => item._elementRef.nativeElement);\n\n        if (icons.length === 1) {\n            const iconElement = icons[0];\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-icon-button_left');\n                }\n\n                if (iconElement.previousSibling) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-icon-button_right');\n                }\n            }\n        } else if (icons.length === twoIcons) {\n            const firstIconElement = icons[0];\n            const secondIconElement = icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n}\n\n\nexport class McButtonBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McButtonMixinBase = mixinColor(mixinDisabled(McButtonBase));\n\n\n@Component({\n    selector: `\n        button[mc-button],\n        button[mc-xs-button],\n        button[mc-sm-button],\n        button[mc-lg-button],\n        button[mc-xl-button]\n    `,\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[disabled]': 'disabled || null'\n    }\n})\nexport class McButton extends _McButtonMixinBase implements OnDestroy, CanDisable, CanColor {\n    constructor(elementRef: ElementRef, private _platform: Platform, private _focusMonitor: FocusMonitor) {\n        super(elementRef);\n\n        this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this._getHostElement().focus();\n    }\n\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n\n\n@Component({\n    selector: 'a[mc-button], a[mc-xs-button], a[mc-sm-button], a[mc-lg-button], a[mc-xl-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[attr.tabindex]': 'disabled ? -1 : 0',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': '_haltDisabledEvents($event)'\n    }\n})\nexport class McAnchor extends McButton {\n    constructor(platform: Platform, focusMonitor: FocusMonitor, elementRef: ElementRef) {\n        super(elementRef, platform, focusMonitor);\n    }\n\n    _haltDisabledEvents(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\n\n\n@Component({\n    selector: 'button[mc-icon-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[attr.tabindex]': 'disabled ? -1 : 0',\n        '[attr.disabled]': 'disabled || null'\n    }\n})\nexport class McIconButton extends McButton {\n    constructor(platform: Platform, focusMonitor: FocusMonitor, elementRef: ElementRef) {\n        super(elementRef, platform, focusMonitor);\n    }\n\n    _haltDisabledEvents(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McButton,\n    McAnchor,\n    McIconButton,\n    McButtonCSSStyler,\n    McXSButtonCSSStyler,\n    McSMButtonCSSStyler,\n    McLGButtonCSSStyler,\n    McXLButtonCSSStyler,\n    McIconButtonCSSStyler\n} from './button.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McButton,\n        McAnchor,\n        McIconButton,\n        McButtonCSSStyler,\n        McXSButtonCSSStyler,\n        McSMButtonCSSStyler,\n        McLGButtonCSSStyler,\n        McXLButtonCSSStyler,\n        McIconButtonCSSStyler\n    ],\n    declarations: [\n        McButton,\n        McAnchor,\n        McIconButton,\n        McButtonCSSStyler,\n        McXSButtonCSSStyler,\n        McSMButtonCSSStyler,\n        McLGButtonCSSStyler,\n        McXLButtonCSSStyler,\n        McIconButtonCSSStyler\n    ]\n})\nexport class McButtonModule {}\n","import { InjectionToken } from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type McCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MC_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<McCheckboxClickAction>('mc-checkbox-click-action');\n"],"names":["tslib_1.__extends","McTreeSelection","_super","Object","defineProperty","prototype","this","_disabled","rawValue","value","toBoolean","console","log","_onKeyDown","event","keyCode","LEFT_ARROW","_keyManager","activeItem","treeControl","collapse","data","preventDefault","RIGHT_ARROW","expand","SPACE","ENTER","toggleFocusedOption","HOME","END","PAGE_UP","PAGE_DOWN","onKeydown","ngAfterContentInit","FocusKeyManager","options","withTypeAhead","withVerticalOrientation","withHorizontalOrientation","setFocusedOption","option","updateActiveItem","autoSelect","forEach","item","setSelected","_emitNavigationEvent","focusedIndex","activeItemIndex","_isValidIndex","focusedOption","toArray","_canUnselectLast","toggle","_emitChangeEvent","renderNodeChanges","dataDiffer","viewContainer","parentData","_dataDiffer","_nodeOutlet","call","arrayOfInstances","_embeddedViews","view","viewDef","def","nodes","node","nodeMatchedQueries","matchedQueryIds","nodeData","nodeIndex","push","reset","notifyOnChanges","navigationChange","emit","McTreeNavigationChange","selectionChange","index","length","_option","type","Component","args","exportAs","selector","template","host","[tabIndex]","class","role","(keydown)","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","providers","provide","CdkTree","useExisting","IterableDiffers","ChangeDetectorRef","undefined","decorators","Attribute","ViewChild","CdkTreeNodeOutlet","ContentChildren","forwardRef","McTreeNodeOption","disabled","Input","Output","_McTreeSelectionBase","MC_TREE_DIRECTIVES","McTreeNodeDef","McTreeNodePadding","NgModule","imports","CommonModule","CdkTreeModule","exports","declarations","McTreeModule","McTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","level","resultNodes","parentMap","_this","flatNode","pipe","take","subscribe","children","child","childParentMap","slice","flattenNodes","structuredData","expandFlattenedNodes","results","currentExpand","i","isExpanded","McTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","next","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","merge","apply","map","disconnect","DataSource","McTreeNestedDataSource","VERSION","Version","McList","McListBase","Directive","McListSubheaderCssStyler","McListItemBase","McListItem","_element","_lineSetter","McLineSetter","_lines","_handleFocus","nativeElement","classList","add","_handleBlur","remove","_getHostElement","(focus)","(blur)","preserveWhitespaces","ElementRef","McLine","McListModule","A11yModule","McLineModule","McListSelection","McListOption","MC_NAVBAR_CONTAINER","MC_NAVBAR_ITEM","MC_NAVBAR_BRAND","MC_NAVBAR_TITLE","McNavbarLogo","McNavbarBrand","McNavbarTitle","McNavbarItemBase","_elementRef","_McNavbarMixinBase","mixinDisabled","McNavbarItem","elementRef","_focusMonitor","tabIndex","setAttribute","encodeURI","ngOnInit","denyClickIfDisabled","monitor","ngOnDestroy","stopMonitoring","events","eventListeners","removeEventListener","addEventListener","hasAttribute","stopImmediatePropagation","inputs","[attr.disabled]","FocusMonitor","collapsedTitle","McNavbarContainer","position","cssClasses","HostBinding","CollapsibleItem","element","width","_collapsed","processCollapsed","collapsed","updateCollapsedClass","CachedItemWidth","itemsForCollapse","_collapsedItemsWidth","calculateAndCacheCollapsedItemsWidth","updateTitle","reduce","acc","getTitle","computedTitle","getAttribute","decodeURI","innerText","removeAttribute","McNavbar","forceRecalculateItemsWidth","resizeDebounceInterval","firstLevelElement","secondLevelElements","resizeObserver","fromEvent","window","debounceTime","_resizeSubscription","updateCollapsed","bind","querySelector","getBoundingClientRect","_itemsWidths","calculateAndCacheItemsWidth","_totalItemsWidths","calculateAndCacheTotalItemsWidth","collapseDelta","totalItemsWidth","maxAllowedWidth","itemsWidths","canCollapse","collapsedItemsWidth","ngAfterViewInit","setTimeout","unsubscribe","getOuterElementWidth","parseInt","getComputedStyle","getPropertyValue","allItemsSelector","e","allItems","Array","from","querySelectorAll","el","getItemsForCollapse","McNavbarModule","PlatformModule","idIterator","McProgressBarBase","_McProgressBarMixinBase","mixinColor","McProgressBar","id","mode","color","ThemePalette","Primary","get","Math","max","min","[attr.id]","McProgressBarModule","McProgressSpinnerBase","_McProgressPinnerMixinBase","McProgressSpinner","percentage","McProgressSpinnerModule","nextUniqueId","McRadioChange","source","McRadioGroupBase","_McRadioGroupMixinBase","MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","McRadioGroup","multi","_changeDetector","change","EventEmitter","_value","_name","_selected","_isInitialized","_labelPosition","_required","controlValueAccessorChangeFn","onTouched","set","updateRadioButtonNames","v","markRadiosForCheck","newValue","updateSelectedRadioFromValue","checkSelectedRadioButton","checked","selected","touch","emitChangeEvent","_radios","radio","markForCheck","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","name","isAlreadySelected","McRadioButton","descendants","labelPosition","required","McRadioButtonBase","_McRadioButtonMixinBase","mixinTabIndex","radioGroup","_radioDispatcher","_uniqueId","isFocused","_checked","removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","focus","onInputClick","stopPropagation","onInputChange","groupValueChanged","[class.mc-radio-checked]","[class.mc-radio-disabled]","Optional","UniqueSelectionDispatcher","ariaLabel","ariaLabelledby","ariaDescribedby","_inputElement","McCommonModule","McRadioModule","CdkTreeNodeDef","_paddingIndent","nodeLevel","_treeNode","_tree","_level","_indent","CdkTreeNodePadding","indent","treeSelection","_hasFocus","selectedOptions","isSelected","select","deselect","_handleClick","tabindex","[class.mc-selected]","[class.mc-focused]","[attr.aria-expanded]","[attr.aria-level]","(click)","CdkTreeNode","Inject","McTreeSelectionChange","_differs","_changeDetectorRef","multiple","SelectionModel","MC_CHECKBOX_CLICK_ACTION","indeterminateChange","indeterminate","McCheckbox","_McCheckboxMixinBase","MC_CHECKBOX_REQUIRED_VALIDATOR","NG_VALIDATORS","McCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","McCheckboxModule","McDivider","_vertical","_inset","[attr.aria-orientation]","[class.mc-divider-vertical]","[class.mc-divider-inset]","vertical","inset","McDividerModule","McCleaner","McFormFieldControl","McHint","McPrefix","McSuffix","McFormFieldBase","McFormField","_validateControlChild","_control","controlType","stateChanges","startWith","valueChanges","ngControl","EMPTY","ngAfterContentChecked","detectChanges","clearValue","$event","onContainerClick","onKeyDown","ESCAPE","focused","hasCleaner","_shouldForward","prop","getMcFormFieldMissingControlError","_hint","_suffix","_prefix","_cleaner","[class.mc-form-field_invalid]","[class.mc-form-field_disabled]","[class.mc-form-field_has-prefix]","[class.mc-form-field_has-suffix]","[class.mc-form-field_has-cleaner]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","ctorParameters","propDecorators","ContentChild","McFormFieldWithoutBorders","McIconModule","McFormFieldModule","MC_INPUT_VALUE_ACCESSOR","InjectionToken","MC_INPUT_INVALID_TYPES","McInputBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","_McInputMixinBase","mixinErrorState","McInput","_platform","inputValueAccessor","Subject","_uid","_type","_neverEmptyInputTypes","filter","t","getSupportedInputTypes","has","_inputValueAccessor","_previousNativeValue","coerceBooleanProperty","_id","_validateType","ngOnChanges","complete","ngDoCheck","updateErrorState","_dirtyCheckNativeValue","_focusChanged","_onInput","_isNeverEmpty","_isBadInput","indexOf","getMcInputUnsupportedTypeError","validity","badInput","[attr.placeholder]","[disabled]","[required]","(input)","Platform","NgControl","Self","NgForm","FormGroupDirective","ErrorStateMatcher","errorStateMatcher","placeholder","McInputMono","FormsModule","McInputModule","listSelection","checkboxPosition","_reportValueChange","wasSelected_1","Promise","resolve","then","_removeOptionFromList","getLabel","_text","textContent","_getHeight","getClientRects","height","_onTouched","MC_SELECTION_LIST_VALUE_ACCESSOR","McListSelectionChange","McListSelectionBase","_McListSelectionMixinBase","noUnselect","horizontal","_modelChanges","Subscription","_onChange","_","_tempValues","_setOptionsFromValues","_i","_a","added","_b","_c","removed","updateScrollSize","selectAll","deselectAll","first","withScrollSize","floor","withShift","previousIndex_1","previousActiveItemIndex","activeIndex_1","withCtrl","values","getSelectedOptionValues","listOption","optionIndex","_getOptionIndex","setPreviousItemActive","setNextItemActive","shiftKey","ctrlKey","setFirstItemActive","setLastItemActive","setPreviousPageItemActive","setNextPageItemActive","_getOptionByValue","find","Boolean","(window:resize)","__extends","d","b","__","constructor","extendStatics","create","isBoolean","val","MC_SANITY_CHECKS_FACTORY","base","class_1","arguments","defaultColor","Default","_color","colorPalette","defaultTabIndex","_tabIndex","errorState","oldState","parent","matcher","control","newState","isErrorState","Error","inputType","setPrototypeOf","__proto__","p","hasOwnProperty","MC_SANITY_CHECKS","providedIn","factory","_sanityChecksEnabled","_hasDoneGlobalChecks","_document","document","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","isDevMode","_isTestEnv","doctype","warn","testElement","createElement","body","appendChild","computedStyle","display","removeChild","BidiModule","Second","Warn","_setLineClass","count","_resetClasses","_setClass","className","isAdd","ShowOnDirtyErrorStateMatcher","form","invalid","dirty","submitted","Injectable","touched","state","[class.mc-pseudo-checkbox-indeterminate]","[class.mc-pseudo-checkbox-checked]","[class.mc-pseudo-checkbox-disabled]","McPseudoCheckbox","McPseudoCheckboxModule","McIconCSSStyler","McIconBase","_McIconMixinBase","McIcon","iconName","McButtonCSSStyler","McXSButtonCSSStyler","McSMButtonCSSStyler","McLGButtonCSSStyler","McXLButtonCSSStyler","McIconButtonCSSStyler","_addClassModificatorForIcons","icons","contentChildren","iconElement","previousElementSibling","nextElementSibling","nextSibling","previousSibling","firstIconElement","secondIconElement","queries","McButtonBase","_McButtonMixinBase","McButton","McAnchor","platform","focusMonitor","_haltDisabledEvents","[attr.tabindex]","McIconButton","McButtonModule","MC_CHECKBOX_CONTROL_VALUE_ACCESSOR","TransitionCheckState","McCheckboxChange","McCheckboxBase","_clickAction","_currentAnimationClass","_currentCheckState","Init","_controlValueAccessorChangeFn","_indeterminate","focusOrigin","_onInputFocusChange","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_onLabelTextChange","_getAriaChecked","_onInputClick","focusVia","_onInteractionEvent","[id]","[class.mc-checkbox-indeterminate]","[class.mc-checkbox-checked]","[class.mc-checkbox-disabled]","[class.mc-checkbox-label-before]"],"mappings":";;;;;;ghCiCuBA,SAAgB+lB,GAAUC,EAAGC,GAEzB,QAASC,KAAO5lB,KAAK6lB,YAAcH,EADnCI,EAAcJ,EAAGC,GAEjBD,EAAE3lB,UAAkB,OAAN4lB,EAAa9lB,OAAOkmB,OAAOJ,IAAMC,EAAG7lB,UAAY4lB,EAAE5lB,UAAW,GAAI6lB,ICzBnF,QAAAI,GAA0BC,GAA4B,MAAsB,iBAARA,GAEpE,QAAA7lB,GAA0BD,GACtB,MAAgB,OAATA,GAAiB,GAAGA,GAAY,QCM3C,QAAA+lB,KACI,OAAO,ECDX,QAAAnZ,GAAyDoZ,GACrD,MAAJ,UAAAvmB,GAWQ,QAARwmB,KAAA,IAAoB,GAApBrhB,MAAAwe,EAAA,EAAoBA,EAApB8C,UAAA1hB,OAAoB4e,IAAAxe,EAApBwe,GAAA8C,UAAA9C,EAAQ,IAARnb,GAAAxI,EAAAuK,MAAAnK,KACqB+E,IADrB/E,WAVAoI,GAAAnI,WAAqC,IAZrC,MAWyBP,GAAzB0mB,EAAAxmB,GAGQC,OAARC,eAAYsmB,EAAZrmB,UAAA,gBAAQ,WACI,MAAOC,MAAKC,eAGhB,SAAaE,GACTH,KAAKC,UAAYG,EAAUD,oCAnBvCimB,GAWyBD,GCUzB,QAAA1T,GAAiE0T,EAASG,GACtE,WADJ,KAAAA,IAA0EA,EAA6BxT,EAAayT,SACpH,SAAA3mB,GAuBQ,QAARwmB,KAAA,IAAoB,GAApBrhB,MAAAwe,EAAA,EAAoBA,EAApB8C,UAAA1hB,OAAoB4e,IAAAxe,EAApBwe,GAAA8C,UAAA9C,EAAQ,IAARnb,GAAAxI,EAAAuK,MAAAnK,KACqB+E,IADrB/E,WAIYoI,GAAKyK,MAAQyT,IAjDzB,MAsByB5mB,GAAzB0mB,EAAAxmB,GAGQC,OAARC,eAAYsmB,EAAZrmB,UAAA,aAAQ,WACI,MAAOC,MAAKwmB,YAGhB,SAAUrmB,GACN,GAAMsmB,GAAetmB,GAASmmB,CAE1BG,KAAiBzmB,KAAKwmB,SAClBxmB,KAAKwmB,QACLxmB,KAAK6M,YAAYxB,cAAcC,UAAUG,OAAO,MAAMzL,KAAKwmB,QAG3DC,GACAzmB,KAAK6M,YAAYxB,cAAcC,UAAUC,IAAI,MAAMkb,GAGvDzmB,KAAKwmB,OAASC,oCAzC9BL,GAsByBD,GCbzB,QAAAxP,GAC2CwP,EAASO,GAEhD,WAFJ,KAAAA,IAAoDA,EAApD,GAEA,SAAA9mB,GAWQ,QAARwmB,KAAA,IAAoB,GAApBrhB,MAAAwe,EAAA,EAAoBA,EAApB8C,UAAA1hB,OAAoB4e,IAAAxe,EAApBwe,GAAA8C,UAAA9C,EAAQ,IAARnb,GAAAxI,EAAAuK,MAAAnK,KACqB+E,IADrB/E,WAVAoI,GAAAue,UAAoCD,IAbpC,MAYyBhnB,GAAzB0mB,EAAAxmB,GAGQC,OAARC,eAAYsmB,EAAZrmB,UAAA,gBAAQ,WACI,MAAOC,MAAK6G,UAAY,EAAI7G,KAAK2mB,eAGrC,SAAaxmB,GACTH,KAAK2mB,UAAqB,MAATxmB,EAAgBA,EAAQumB,mCApBrDN,GAYyBD,GCczB,QAAApH,GAAsEoH,GAElE,MAAJ,UAAAvmB,GAYQ,QAARwmB,KAAA,IAAoB,GAApBrhB,MAAAwe,EAAA,EAAoBA,EAApB8C,UAAA1hB,OAAoB4e,IAAAxe,EAApBwe,GAAA8C,UAAA9C,EAAQ,IAARnb,GAAAxI,EAAAuK,MAAAnK,KACqB+E,IADrB/E,WAVAoI,GAAAwe,YAA8B,EAM9Bxe,EAAA4T,aAAgC,GAAImD,GAAAA,UApCpC,MA4ByBzf,GAAzB0mB,EAAAxmB,GAgBQwmB,EAARrmB,UAAAogB,iBAAQ,WACI,GAAM0G,GAAW7mB,KAAK4mB,WAChBE,EAAS9mB,KAAK6e,kBAAoB7e,KAAK4e,YACvCmI,EAAU/mB,KAAKuhB,mBAAqBvhB,KAAK2e,0BACzCqI,EAAUhnB,KAAKmc,UAAYnc,KAAKmc,UAAgC,QAAG,KACnE8K,EAAWF,EAAQG,aAAaF,EAASF,EAE3CG,KAAaJ,IACb7mB,KAAK4mB,WAAaK,EAClBjnB,KAAKgc,aAAarS,SArDlCyc,GA4ByBD,GC5BzB,QAAAnJ,KACE,MAAOmK,OAAM,oDCDf,QAAAzG,GAA+C0G,GAC3C,MAAOD,OAAM,eAAeC,EAAhC,kCReA,GAAItB,GAAgB,SAASJ,EAAGC,GAI5B,OAHAG,EAAgBjmB,OAAOwnB,iBAChBC,uBAA2BvV,QAAS,SAAU2T,EAAGC,GAAKD,EAAE4B,UAAY3B,IACvE,SAAUD,EAAGC,GAAK,IAAK,GAAI4B,KAAK5B,GAAOA,EAAE6B,eAAeD,KAAI7B,EAAE6B,GAAK5B,EAAE4B,MACpD7B,EAAGC,IEff8B,EAAmB,GAAIjJ,GAAAA,eAAwB,oBACxDkJ,WAAY,OACZC,QAASzB,iBA2BT,QAAJ/N,GAA8DyP,GAAA5nB,KAA9D4nB,qBAA8DA,EAR9D5nB,KAAA6nB,sBAAmC,EAGnC7nB,KAAA8nB,UAA4C,gBAAbC,WAAyBA,SAAWA,SAAW,KAG9E/nB,KAAAgoB,QAAwC,gBAAX5X,SAAuBA,OAASA,OAAS,KAG1DpQ,KAAKioB,sBAAwBjoB,KAAK6nB,uBAClC7nB,KAAKkoB,yBACLloB,KAAKmoB,uBACLnoB,KAAK6nB,sBAAuB,GAtCxC,MA2CY1P,GAAZpY,UAAAkoB,6BACQ,MAAOjoB,MAAK4nB,sBAAwBQ,EAAAA,cAAgBpoB,KAAKqoB,cAIrDlQ,EAAZpY,UAAAsoB,sBACQ,MAAOroB,MAAKgoB,UAAYhoB,KAAKgoB,QAAmB,WAAKhoB,KAAKgoB,QAAiB,UAGvE7P,EAAZpY,UAAAmoB,kCACYloB,KAAK8nB,YAAc9nB,KAAK8nB,UAAUQ,SAClCjoB,QAAQkoB,KACJ,+GAMJpQ,EAAZpY,UAAAooB,gCACQ,GAAInoB,KAAK8nB,WAAyC,kBAArBpW,kBAAiC,CAC1D,GAAM8W,GAAcxoB,KAAK8nB,UAAUW,cAAc,MAEjDD,GAAYld,UAAUC,IAAI,0BAC1BvL,KAAK8nB,UAAUY,KAAKC,YAAYH,EAEhC,IAAMI,GAAgBlX,iBAAiB8W,EAKnCI,IAA2C,SAA1BA,EAAcC,SAC/BxoB,QAAQkoB,KACJ,2IAMRvoB,KAAK8nB,UAAUY,KAAKI,YAAYN,oBA7D5C3jB,KAACuC,EAAAA,SAADrC,OACIsC,SAAW0hB,EAAAA,YACXvhB,SAAWuhB,EAAAA,oDAYflkB,SAAAwB,GAAAC,aAAAzB,KAAiBgT,EAAAA,WAAjBhT,KAA6B+U,EAAAA,OAA7B7U,MAAoC0iB,QAlCpCtP,QEcApF,QAAc,UACdiW,OAAa,SACbC,KAAW,OACX1C,QAAc,qCKjBd,sBAQA1hB,KAAC+F,EAAAA,UAAD7F,OACIE,SAAU,sBACVE,MAAQE,MAAO,eAVnB0G,KAkBAb,EAAA,WACI,QAAJA,GAAwBC,EAAmCH,GAAvD,GAAJ5C,GAAApI,IAAwBA,MAAxBmL,OAAwBA,EAAmCnL,KAA3DgL,SAA2DA,EACnDhL,KAAKkpB,cAAclpB,KAAKmL,OAAOxG,QAE/B3E,KAAKmL,OAAOpB,QAAQvB,UAAU,WAC1BJ,EAAK8gB,cAAc9gB,EAAK+C,OAAOxG,UAvB3C,MA2BYuG,GAAZnL,UAAAmpB,cAAA,SAA0BC,GAClBnpB,KAAKopB,gBACS,IAAVD,GAAyB,IAAVA,EACfnpB,KAAKqpB,UAAU,MAAMF,EAAjC,SAA+C,GAC5BA,EAAQ,GACfnpB,KAAKqpB,UAAU,iBAAiB,IAIhCne,EAAZnL,UAAAqpB,yBACQppB,KAAKqpB,UAAU,aAAa,GAC5BrpB,KAAKqpB,UAAU,aAAa,GAC5BrpB,KAAKqpB,UAAU,iBAAiB,IAG5Bne,EAAZnL,UAAAspB,UAAA,SAAsBC,EAAmBC,GAC7BA,EACAvpB,KAAKgL,SAASK,cAAcC,UAAUC,IAAI+d,GAE1CtpB,KAAKgL,SAASK,cAAcC,UAAUG,OAAO6d,IA9CzDpe,gCAAA,sBAmDArG,KAACuC,EAAAA,SAADrC,OACIsC,WACAG,SAAUuE,GACVtE,cAAesE,OAtDnBG,gCCAA,MAOIsd,GAAJzpB,UAAAmnB,aAAI,SAAaF,EAA6ByC,GACtC,SAAUzC,GAAWA,EAAQ0C,UAAY1C,EAAQ2C,OAAUF,GAAQA,EAAKG,4BAHhF/kB,KAACglB,EAAAA,aALDL,gCAAA,MAeIlI,GAAJvhB,UAAAmnB,aAAI,SAAaF,EAA6ByC,GACtC,SAAUzC,GAAWA,EAAQ0C,UAAY1C,EAAQ8C,SAAYL,GAAQA,EAAKG,4BAHlF/kB,KAACglB,EAAAA,WAAD9kB,OAAc2iB,WAAY,8GAb1BpG,+BCkCAthB,KAAA+pB,MAA4C,YAG5C/pB,KAAA6G,UAAiC,EArCjC,sBAkBAhC,KAACC,EAAAA,UAADC,OACIU,cAAeC,EAAAA,kBAAkBC,KACjCkG,qBAAqB,EACrBjG,gBAAiBC,EAAAA,wBAAwBC,OACzCb,SAAU,qBACVO,QAAS,IACTN,SAAU,GACVC,MACIE,MAAO,qBACP2kB,2CAA4C,4BAC5CC,qCAAsC,sBACtCC,sCAAuC,kCAK/CH,QAAAllB,KAAKiC,EAAAA,QAGLD,WAAAhC,KAAKiC,EAAAA,SArCLqjB,KCAAC,EAAA,yBAAA,sBAKAvlB,KAACuC,EAAAA,SAADrC,OACIyC,SAAU2iB,GACV1iB,cAAe0iB,OAPnBC,gCCAA,sBAYAvlB,KAAC+F,EAAAA,UAAD7F,OACIE,SAAU,YACVE,MAAQE,MAAO,kBAdnBglB,KAmBAC,EAAA,WACI,QAAJA,GAAuBzd,GAAA7M,KAAvB6M,YAAuBA,EApBvB,MAAAyd,MAuBaC,EAAmB9X,EAAW6X,iBAWvC,QAAJE,GAAgBvd,EAA8Cwd,GAA1D,GAAJriB,GACQxI,EADR2D,KAAAvD,KACciN,IADdjN,WAGQiN,GAAW5B,cAAcC,UAAUC,IAAIkf,KArC/C,MAiC4B/qB,GAA5B8qB,EAAA5qB,GAOI4qB,EAAJzqB,UAAA2L,gBAAI,WACI,MAAO1L,MAAK6M,YAAYxB,8BAfhCxG,KAACC,EAAAA,UAADC,OACIE,SAAU,YACVC,SAAU,4BACVM,QAAS,IACTI,gBAAiBC,EAAAA,wBAAwBC,OACzCL,cAAeC,EAAAA,kBAAkBC,6CA1BrCd,KAAIiH,EAAAA,aA6BJjH,SAAAwB,GAAAC,aAAAzB,KAAyC0B,EAAAA,UAAzCxB,MAAmD,gBAlCnDylB,GAiC4BD,GCjC5BlM,EAAA,yBAAA,sBAYAxZ,KAACuC,EAAAA,SAADrC,OACIsC,SACIC,EAAAA,aACA2E,EAAAA,WACAoG,EAAAA,gBAEJ7K,SACIgjB,EACAH,GAEJ5iB,cACI+iB,EACAH,OAxBRhM,gCCAA,sBAkBAxZ,KAAC+F,EAAAA,UAAD7F,OACIE,SAAU,uBACVE,MAAQE,MAAO,4BApBnBqlB,KAsBAC,EAAA,yBAtBA,sBAyBA9lB,KAAC+F,EAAAA,UAAD7F,OACIE,SAAU,wCACVE,MAAQE,MAAO,8BA3BnBslB,KA6BAC,EAAA,yBA7BA,sBAgCA/lB,KAAC+F,EAAAA,UAAD7F,OACIE,SAAU,wCACVE,MAAQE,MAAO,8BAlCnBulB,KAoCAC,EAAA,yBApCA,sBAuCAhmB,KAAC+F,EAAAA,UAAD7F,OACIE,SAAU,wCACVE,MAAQE,MAAO,8BAzCnBwlB,KA2CAC,EAAA,yBA3CA,sBA8CAjmB,KAAC+F,EAAAA,UAAD7F,OACIE,SAAU,wCACVE,MAAQE,MAAO,8BAhDnBylB,KAkDAC,EAAA,WAeI,QAAJA,GAAgB9d,GACRjN,KAAKqL,cAAgB4B,EAAW5B,cAlExC,MAqEI0f,GAAJhrB,UAAA4B,mBAAI,WACI3B,KAAKgrB,gCAGTD,EAAJhrB,UAAAirB,6BAAI,WACI,GACMC,GAAQjrB,KAAKkrB,gBAAgB9gB,IAAI,SAAC9H,GAAS,MAAAA,GAAKuK,YAAYxB,eAElE,IAAqB,IAAjB4f,EAAMtmB,OAAc,CACpB,GAAMwmB,GAAcF,EAAM,EAErBE,GAAYC,wBAA2BD,EAAYE,qBAChDF,EAAYG,cACZH,EAAY7f,UAAUC,IAAI,gBAC1BvL,KAAKqL,cAAcC,UAAUC,IAAI,wBAGjC4f,EAAYI,kBACZJ,EAAY7f,UAAUC,IAAI,iBAC1BvL,KAAKqL,cAAcC,UAAUC,IAAI,8BAGtC,IAjBU,IAiBN0f,EAAMtmB,OAAqB,CAClC,GAAM6mB,GAAmBP,EAAM,GACzBQ,EAAoBR,EAAM,EAEhCO,GAAiBlgB,UAAUC,IAAI,gBAC/BkgB,EAAkBngB,UAAUC,IAAI,kCA3C5C1G,KAAC+F,EAAAA,UAAD7F,OACIE,SAAU,4CACVymB,SACIR,gBAAiB,GAAIxkB,GAAAA,gBAAgB8jB,IAEzCrlB,MAAQE,MAAO,0DAtDnBR,KAAIiH,EAAAA,cAJJif,KAsGAY,EAAA,WACI,QAAJA,GAAuB9e,GAAA7M,KAAvB6M,YAAuBA,EAvGvB,MAAA8e,MA0GaC,EAAqBnZ,EAAW1F,EAAc4e,kBAqBvD,QAAJE,GAAgB5e,EAAgCgS,EAA6B/R,GAAzE,GAAJ9E,GACQxI,EADR2D,KAAAvD,KACciN,IADdjN,WAAgDoI,GAAhD6W,UAAgDA,EAA6B7W,EAA7E8E,cAA6EA,EAGrE9E,EAAK8E,cAAcM,QAAQpF,EAAKyE,YAAYxB,eAAe,KAlInE,MA8H8B3L,GAA9BmsB,EAAAjsB,GAOIisB,EAAJ9rB,UAAA0N,YAAI,WACIzN,KAAKkN,cAAcQ,eAAe1N,KAAK6M,YAAYxB,gBAGvDwgB,EAAJ9rB,UAAAuX,MAAI,WACItX,KAAK0L,kBAAkB4L,SAG3BuU,EAAJ9rB,UAAA2L,gBAAI,WACI,MAAO1L,MAAK6M,YAAYxB,8BAjChCxG,KAACC,EAAAA,UAADC,OACIE,SAAU,gKAOVC,SAAJ,4GACIM,QAAS,m9HACTI,gBAAiBC,EAAAA,wBAAwBC,OACzCL,cAAeC,EAAAA,kBAAkBC,KACjCsI,QAAS,WAAY,SACrB9I,MACI2b,aAAc,4DAvHtBjc,KAAIiH,EAAAA,aAQJjH,KAASoc,EAAAA,WADTpc,KAASsJ,EAAAA,gBAXT0d,GA8H8BD,GAA9BE,EAAA,SAAAlsB,GAmCI,QAAJksB,GAAgBC,EAAoBC,EAA4B/e,GAChE,MAAQrN,GAAR2D,KAAAvD,KAAciN,EAAY8e,EAAUC,IAApChsB,KAlKA,MAgK8BN,GAA9BosB,EAAAlsB,GAKIksB,EAAJ/rB,UAAAksB,oBAAI,SAAoBzrB,GACZR,KAAK6G,WACLrG,EAAMQ,iBACNR,EAAMwN,4CArBlBnJ,KAACC,EAAAA,UAADC,OACIE,SAAU,mFACVC,SAAJ,4GACIM,QAAS,m9HACTI,gBAAiBC,EAAAA,wBAAwBC,OACzCL,cAAeC,EAAAA,kBAAkBC,KACjCsI,QAAS,WAAY,SACrB9I,MACI+mB,kBAAmB,oBACnBhe,kBAAmB,mBACnBwL,UAAW,uEAjJnB7U,KAASoc,EAAAA,WADTpc,KAASsJ,EAAAA,eAPTtJ,KAAIiH,EAAAA,cAJJggB,GAgK8BD,GAA9BM,EAAA,SAAAvsB,GA2BI,QAAJusB,GAAgBJ,EAAoBC,EAA4B/e,GAChE,MAAQrN,GAAR2D,KAAAvD,KAAciN,EAAY8e,EAAUC,IAApChsB,KA5LA,MA0LkCN,GAAlCysB,EAAAvsB,GAKIusB,EAAJpsB,UAAAksB,oBAAI,SAAoBzrB,GACZR,KAAK6G,WACLrG,EAAMQ,iBACNR,EAAMwN,4CApBlBnJ,KAACC,EAAAA,UAADC,OACIE,SAAU,yBACVC,SAAJ,4GACIM,QAAS,m9HACTI,gBAAiBC,EAAAA,wBAAwBC,OACzCL,cAAeC,EAAAA,kBAAkBC,KACjCsI,QAAS,WAAY,SACrB9I,MACI+mB,kBAAmB,oBACnBhe,kBAAmB,4DA3K3BrJ,KAASoc,EAAAA,WADTpc,KAASsJ,EAAAA,eAPTtJ,KAAIiH,EAAAA,cAJJqgB,GA0LkCN,GC1LlCO,EAAA,yBAAA,sBAmBAvnB,KAACuC,EAAAA,SAADrC,OACIsC,SACIC,EAAAA,aACA2E,EAAAA,WACAoG,EAAAA,gBAEJ7K,SACIqkB,EACAC,EACAK,EACAzB,EACAC,EACAC,EACAC,EACAC,EACAC,GAEJtjB,cACIokB,EACAC,EACAK,EACAzB,EACAC,EACAC,EACAC,EACAC,EACAC,OA7CRqB,KCealS,EACT,GAAIsE,GAAAA,eAAsC,4BjCiB1C7K,EAAe,EAON0Y,GACTrmB,QAASiO,EAAAA,kBACT/N,YAAaS,EAAAA,WAAW,WAAM,MAAA0T,MAC9BlG,OAAO,IAOX,SAAYmY,GAERA,EAAJA,EAAA,KAAA,GAAA,OAEIA,EAAJA,EAAA,QAAA,GAAA,UAEIA,EAAJA,EAAA,UAAA,GAAA,YAEIA,EAAJA,EAAA,cAAA,GAAA,iBARYA,EAAAA,uBAAAA,EAAAA,yBAYZ,IAAAC,IAAA,yBA9DA,MAAAA,MAuEAC,GAAA,WACI,QAAJA,GAAuB3f,GAAA7M,KAAvB6M,YAAuBA,EAxEvB,MAAA2f,MA4EalS,GACT3D,EAAclE,EAAW1F,EAAcyf,qBAkGvC,QAAJnS,GAAgBpN,EACQ8M,EACA7M,EACeC,EAEfsf,GALpB,GAAJrkB,GAMQxI,EANR2D,KAAAvD,KAMciN,IANdjN,WACwBoI,GAAxB2R,mBAAwBA,EACA3R,EAAxB8E,cAAwBA,EAGA9E,EAAxBqkB,aAAwBA,EAnExBrkB,EAAA2P,UAA6C,GAK7C3P,EAAA4P,eAA8D,KAE9D5P,EAAA0O,UAAgC,kBAAiBnD,EAGjDvL,EAAAuK,GAA0BvK,EAAK0O,UAoB/B1O,EAAAmO,cAAiD,QAGjDnO,EAAA+N,KAAmC,KAInC/N,EAAAiM,OAAQ,GAAIC,GAAAA,aAGZlM,EAAA+R,oBAAoE,GAAI7F,GAAAA,aAYxElM,EAAAsa,WAA4B,aAG5Bta,EAAAskB,uBAA6C,GAE7CtkB,EAAAukB,mBAAuDL,EAAAA,qBAAqBM,KAE5ExkB,EAAAykB,8BAAkE,aAuClEzkB,EAAA4O,UAAgC,EAkBhC5O,EAAAnI,WAAiC,EA4BjCmI,EAAA0kB,gBAAsC,EA1E9B1kB,EAAK+E,SAAWsE,SAAStE,IAAa,IAvL9C,MA0GgCzN,GAAhC2a,EAAAza,GAoBIC,OAAJC,eAAQua,EAARta,UAAA,eAAI,WACI,OAAUC,KAAK2S,IAAM3S,KAAK8W,WAAlC,0CAKAjX,OAAAC,eAAQua,EAARta,UAAA,2BACQ,MAAOC,MAAK4U,WAGpBG,IAAI,SAAa5U,GACTH,KAAK4U,UAAYxU,EAAUD,oCAiD/Bka,EAAJta,UAAAsR,gBAAI,WAAA,GAAJjJ,GAAApI,IACQA,MAAKkN,cACAM,QAAQxN,KAAKkY,cAAc7M,eAC3B7C,UAAU,SAACukB,GAAgB,MAAA3kB,GAAK4kB,oBAAoBD,MAG7D1S,EAAJta,UAAA0N,YAAI,WACIzN,KAAKkN,cAAcQ,eAAe1N,KAAKkY,cAAc7M,gBAO7DxL,OAAAC,eAAQua,EAARta,UAAA,0BACQ,MAAOC,MAAKgX,UAGpBjC,IAAI,SAAY5U,GACJA,GAASH,KAAKsV,UACdtV,KAAKgX,SAAW7W,EAChBH,KAAK+Z,mBAAmBnE,iDAWpC/V,OAAAC,eAAQua,EAARta,UAAA,2BACQ,MAAOC,MAAKC,WAGpB8U,IAAI,SAAa5U,GACLA,GAASH,KAAK6G,WACd7G,KAAKC,UAAYE,EACjBH,KAAK+Z,mBAAmBnE,iDAapC/V,OAAAC,eAAQua,EAARta,UAAA,gCACQ,MAAOC,MAAK8sB,gBAGpB/X,IAAI,SAAkB5U,GACd,GAAM8sB,GAAU9sB,GAASH,KAAK8sB,cAC9B9sB,MAAK8sB,eAAiB3sB,EAElB8sB,IACIjtB,KAAK8sB,eACL9sB,KAAKktB,sBAAsBZ,EAAAA,qBAAqBa,eAEhDntB,KAAKktB,sBACDltB,KAAKsV,QAAUgX,EAAAA,qBAAqBc,QAAUd,EAAAA,qBAAqBe,WAE3ErtB,KAAKma,oBAAoB5V,KAAKvE,KAAK8sB,kDAO3CzS,EAAJta,UAAAutB,mBAAI,WAIIttB,KAAK+Z,mBAAmBnE,gBAI5ByE,EAAJta,UAAA8V,WAAI,SAAW1V,GACPH,KAAKsV,UAAYnV,GAIrBka,EAAJta,UAAA+V,iBAAI,SAAiBC,GACb/V,KAAK6sB,8BAAgC9W,GAIzCsE,EAAJta,UAAAiW,kBAAI,SAAkBD,GACd/V,KAAK0iB,WAAa3M,GAItBsE,EAAJta,UAAAkW,iBAAI,SAAiBC,GACblW,KAAK6G,SAAWqP,GAGpBmE,EAAJta,UAAAwtB,gBAAI,WACI,MAAOvtB,MAAKsV,QAAU,OAAUtV,KAAKoa,cAAgB,QAAU,SAG3DC,EAAZta,UAAAmtB,sBAAI,SAA8BjG,GAC1B,GAAMJ,GAAW7mB,KAAK2sB,mBAChBje,EAAuB1O,KAAK6M,YAAYxB,aAE1Cwb,KAAaI,IAGbjnB,KAAK0sB,uBAAuB/nB,OAAS,GACrC+J,EAAQpD,UAAUG,OAAOzL,KAAK0sB,wBAGlC1sB,KAAK2sB,mBAAqB1F,EAEtBjnB,KAAK0sB,uBAAuB/nB,OAAS,GACrC+J,EAAQpD,UAAUC,IAAIvL,KAAK0sB,0BAI3BrS,EAAZta,UAAAiD,iBAAI,WACI,GAAMxC,GAAQ,GAAI+rB,GAClB/rB,GAAMqT,OAAS7T,KACfQ,EAAM8U,QAAUtV,KAAKsV,QAErBtV,KAAK6sB,8BAA8B7sB,KAAKsV,SACxCtV,KAAKqU,OAAO9P,KAAK/D,IAIb6Z,EAAZta,UAAAitB,oBAAI,SAA4BD,GACpBA,GACA/sB,KAAK0iB,cAKbrI,EAAJta,UAAAgD,OAAI,WACI/C,KAAKsV,SAAWtV,KAAKsV,SAUzB+E,EAAJta,UAAAytB,cAAI,SAAchtB,GAAd,GAAJ4H,GAAApI,IAQQQ,GAAMgX,kBAGDxX,KAAK6G,UAAkC,SAAtB7G,KAAKysB,aAkBfzsB,KAAK6G,UAAkC,SAAtB7G,KAAKysB,eAG9BzsB,KAAKkY,cAAc7M,cAAciK,QAAUtV,KAAKsV,QAChDtV,KAAKkY,cAAc7M,cAAc+O,cAAgBpa,KAAKoa,gBApBlDpa,KAAKoa,eAAuC,UAAtBpa,KAAKysB,cAE3BzK,QAAQC,UAAUC,KAAK,WACnB9Z,EAAK0kB,gBAAiB,EACtB1kB,EAAK+R,oBAAoB5V,KAAK6D,EAAK0kB,kBAI3C9sB,KAAK+C,SACL/C,KAAKktB,sBACDltB,KAAKgX,SAAWsV,EAAAA,qBAAqBc,QAAUd,EAAAA,qBAAqBe,WAKxErtB,KAAKgD,qBAUbqX,EAAJta,UAAAuX,MAAI,WACItX,KAAKkN,cAAcugB,SAASztB,KAAKkY,cAAc7M,cAAe,aAGlEgP,EAAJta,UAAA2tB,oBAAI,SAAoBltB,GAIhBA,EAAMgX,kCAxSd3S,KAACC,EAAAA,UAADC,OACIE,SAAU,cACVC,SAAJ,6/BACIM,QAAS,qxDACTR,SAAU,aACVG,MACIE,MAAO,cACPsoB,OAAQ,KACRva,YAAa,KACbwa,oCAAqC,gBACrCC,8BAA+B,UAC/BC,+BAAgC,WAChCC,mCAAoC,6BAExChoB,WAAYsmB,GACZpe,QAAS,QAAS,YAClBxI,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,+CAlG7CjB,KAAIiH,EAAAA,aAFJjH,KAAIuB,EAAAA;2BAcJvB,KAASsJ,EAAAA,eAgKTtJ,SAAAwB,GAAAC,aAAAzB,KAAiB0B,EAAAA,UAAjBxB,MAA2B,gBAC3BF,SAAAwB,GAAAC,aAAAzB,KAAiBgT,EAAAA,WAAjBhT,KAA6B+U,EAAAA,OAA7B7U,MAAoCmV,0BAlEpCnC,YAAAlT,KAAKiC,EAAAA,MAAL/B,MAAW,gBAKXiT,iBAAAnT,KAAKiC,EAAAA,MAAL/B,MAAW,qBAKX4N,KAAA9N,KAAKiC,EAAAA,QAQL0P,WAAA3R,KAAKiC,EAAAA,QAYLyP,gBAAA1R,KAAKiC,EAAAA,QAGLqP,OAAAtR,KAAKiC,EAAAA,QAGLuN,SAAAxP,KAAKkC,EAAAA,SAILoT,sBAAAtV,KAAKkC,EAAAA,SAGL5G,QAAA0E,KAAKiC,EAAAA,QAGLoR,gBAAArT,KAAK2B,EAAAA,UAALzB,MAAe,WAwCfuQ,UAAAzQ,KAAKiC,EAAAA,QAkBLD,WAAAhC,KAAKiC,EAAAA,QAoBLsT,gBAAAvV,KAAKiC,EAAAA,SA7OLuT,GA0GgCC,IC/FnBC,IACTvU,QAASwU,EAAAA,cACTtU,YAAaS,EAAAA,WAAW,WAAM,MAAA8T,MAC9BtG,OAAO,8EAdX,MA4BiDzU,GAAjD+a,EAAA7a,kBANAiF,KAAC+F,EAAAA,UAAD7F,OACIE,SAAU,2HAEVc,WAAYwU,IACZpV,MAAQuV,kBAAmB,4BA1B/BD,GA4BiDE,EAAAA,uDC5BjD,sBAQA9V,KAACuC,EAAAA,SAADrC,OACIsC,SAAUC,EAAAA,aAAc6Q,GACxB3Q,SAAU6S,GAAYI,GAA6BtC,GACnD1Q,cAAe4S,GAAYI,QAX/BG,KCAAC,GAAA,wBA+BA7a,KAAA8a,WAAiC,EAYjC9a,KAAA+a,QAA8B,EA3C9B,MAuBAlb,QAAAC,eAAQ+a,EAAR9a,UAAA,2BACQ,MAAOC,MAAK8a,eAGhB,SAAa3a,GACTH,KAAK8a,UAAY1a,EAAUD,oCAOnCN,OAAAC,eAAQ+a,EAAR9a,UAAA,wBACQ,MAAOC,MAAK+a,YAGhB,SAAU5a,GACNH,KAAK+a,OAAS3a,EAAUD,mDAnChC0E,KAACC,EAAAA,UAADC,OACIE,SAAU,aACVE,MACIE,MAAO,aACPC,KAAM,YACN0V,0BAA2B,uCAC3BC,8BAA+B,WAC/BC,2BAA4B,SAEhChW,SAAU,GACVM,QAAS,wSACTC,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,OACzC+F,qBAAqB,wBAIzBsP,WAAAtW,KAAKiC,EAAAA,QAYLsU,QAAAvW,KAAKiC,EAAAA,SAlCL+T,KCAAQ,GAAA,yBAAA,sBAQAxW,KAACuC,EAAAA,SAADrC,OACIsC,SACI8Q,EACA7Q,EAAAA,cAEJE,SACIqT,GACA1C,GAEJ1Q,cACIoT,QAlBRQ,iCCAA,sBAGAxW,KAACC,EAAAA,UAADC,OACIE,SAAU,aACVC,SAAU,+DALdoW,KCKAC,GAAA,yBALA,MAAAA,MCGI5H,GAAe,6BAUnB3T,KAAA2S,GAA0B,WAAWgB,KAbrC,sBAKA9O,KAAC+F,EAAAA,UAAD7F,OACIE,SAAU,UACVE,MACIE,MAAO,UACP+N,YAAa,4BAIrBT,KAAA9N,KAAKiC,EAAAA,SAbL0U,iCCAA,sBAGA3W,KAAC+F,EAAAA,UAAD7F,OACIE,SAAU,iBAJdwW,iCCAA,sBAGA5W,KAAC+F,EAAAA,UAAD7F,OACIE,SAAU,iBAJdyW,KC0BAC,GAAA,WACI,QAAJA,GAAuB9O,GAAA7M,KAAvB6M,YAAuBA,EA3BvB,MAAA8O,MA0BAC,GAAA,SAAAhc,GA+CI,QAAJgc,GACe/O,EACCkN,GAFZ,GAAJ3R,GAGQxI,EAHR2D,KAAAvD,KAGc6M,IAHd7M,WACeoI,GAAfyE,YAAeA,EACCzE,EAAhB2R,mBAAgBA,IANhB,MANiCra,GAAjCkc,EAAAhc,GAgBIgc,EAAJ7b,UAAA4B,mBAAI,WAAA,GAAJyG,GAAApI,IACQA,MAAK6b,wBACD7b,KAAK8b,SAASC,aACd/b,KAAK6M,YAAYxB,cAAcC,UAC1BC,IAAI,sBAAsBvL,KAAK8b,SAASC,aAIjD/b,KAAK8b,SAASE,aAAa1T,KAAK2T,EAAAA,aAAazT,UAAU,WACnDJ,EAAK2R,mBAAmBnE,gBAI5B,IAAMsG,GAAelc,KAAK8b,SAASK,WAAanc,KAAK8b,SAASK,UAAUD,cAAgBE,EAAAA,KACxFlS,GAAAA,MAAMgS,GACD1T,UAAU,WAAM,MAAAJ,GAAK2R,mBAAmBnE,kBAGjDgG,EAAJ7b,UAAAsc,sBAAI,WACIrc,KAAK6b,yBAGTD,EAAJ7b,UAAAsR,gBAAI,WAEIrR,KAAK+Z,mBAAmBuC,iBAG5BV,EAAJ7b,UAAAwc,WAAI,SAAWC,GACPA,EAAOhF,kBAEHxX,KAAK8b,UAAY9b,KAAK8b,SAASK,WAC/Bnc,KAAK8b,SAASK,UAAU/X,SAIhCwX,EAAJ7b,UAAA0c,iBAAI,SAAiBD,GACb,MAAOxc,MAAK8b,SAASW,kBAAoBzc,KAAK8b,SAASW,iBAAiBD,IAG5EZ,EAAJ7b,UAAA2c,UAAI,SAAU7K,GACFA,EAAEpR,UAAYkc,EAAAA,QACd3c,KAAK8b,SAASc,SACd5c,KAAK6c,aACD7c,KAAK8b,UAAY9b,KAAK8b,SAASK,WAC/Bnc,KAAK8b,SAASK,UAAU/X,QAE5ByN,EAAE7Q,mBAKV4a,EAAJ7b,UAAA+c,eAAI,SAAeC,GACX,GAAMZ,GAAYnc,KAAK8b,SAAW9b,KAAK8b,SAASK,UAAY,IAE5D,OAAOA,IAAaA,EAAUY,IAIxBnB,EAAd7b,UAAA8b,sBAAI,WACI,IAAK7b,KAAK8b,SACN,KAAMkB,MAIdnd,OAAJC,eAAQ8b,EAAR7b,UAAA,WAAAiT,IAAI,WACI,MAAOhT,MAAKid,OAASjd,KAAKid,MAAMtY,OAAS,mCAG7C9E,OAAJC,eAAQ8b,EAAR7b,UAAA,aAAAiT,IAAI,WACI,MAAOhT,MAAKkd,SAAWld,KAAKkd,QAAQvY,OAAS,mCAGjD9E,OAAJC,eAAQ8b,EAAR7b,UAAA,aAAAiT,IAAI,WACI,MAAOhT,MAAKmd,SAAWnd,KAAKmd,QAAQxY,OAAS,mCAGjD9E,OAAJC,eAAQ8b,EAAR7b,UAAA,cAAAiT,IAAI,WACI,MAAOhT,MAAKod,UAAYpd,KAAKod,SAASzY,OAAS,mCAGnD9E,OAAJC,eAAQ8b,EAAR7b,UAAA,kBAAAiT,IAAI,WACI,SAAQhT,KAAK6c,YACb7c,KAAK8b,UAAY9b,KAAK8b,SAASK,aACzBnc,KAAK8b,SAASK,UAAUhc,QAAUH,KAAK8b,SAASjV,0DAnI9DhC,KAACC,EAAAA,UAADC,OACIE,SAAU,gBACVD,SAAU,cACVE,SAAJ,uoBAIIM,QAAS,6tCACbL,MACQE,MAAR,gBACAgY,gCAAA,sBACQC,iCAAR,oBACQC,mCAAR,YACQC,mCAAR,YACQC,oCAAR,iBACQlE,qBAAR,mBACQmE,uBAAR,8BACQC,qBAAR,4BACQC,sBAAR,6BACQC,mBAAR,0BACQC,mBAAoB,0BACpBC,qBAAR,4BACQC,qBAAR,4BACQzY,YAAR,qBAEAE,cAAAC,EAAAA,kBAAAC,KACAC,gBAAqBC,EAAAA,wBAArBC,WAIA8V,EAAAqC,eAAA,WAAA,wDApDArC,EAAIsC,gBAJJpC,WAAAjX,KAAAsZ,EAAAA,aAAApZ,MAAAwW,8FA6DA4B,UAAAtY,KAAA6B,EAAAA,gBAAA3B,MAAA0W,MACA2B,WAAAvY,KAAA6B,EAAAA,gBAAA3B,MAAAuW,OAEAM,GACAD,IAtEAyC,GAAA,WA+DA,QAAAA,MA2GA,uIAHAjZ,MAAAE,MAAA,qCAGA+Y,iCC1KA,sBAYAvZ,KAACuC,EAAAA,SAADrC,OACI0C,cACImU,GACAwC,GACA5C,GACAC,GACAC,GACAJ,IAEJjU,SAAUC,EAAAA,aAAc+W,GACxB7W,SACIoU,GACAwC,GACA5C,GACAC,GACAC,GACAJ,QA5BRgD,KCGaC,GACT,GAAIC,GAAAA,eAA+B,2BCYjCC,IACF,SACA,WACA,OACA,SACA,QACA,QACA,QACA,QACA,UAGA9K,GAAe,EAEnB+K,GAAA,WACI,QAAJA,GAAuBC,EACAC,EACAC,EACA1C,GAHAnc,KAAvB2e,0BAAuBA,EACA3e,KAAvB4e,YAAuBA,EACA5e,KAAvB6e,iBAAuBA,EACA7e,KAAvBmc,UAAuBA,EAlCvB,MAAAuC,MAsCaI,GAAoBC,EAAgBL,mBAyJ7C,QAAJM,GAA0BnS,EACAoS,EACiB9C,EACfyC,EACAC,EACZF,EACqDO,GANjE,GAAJ9W,GAOQxI,EAPR2D,KAAAvD,KAOc2e,EAA2BC,EAAaC,EAAkB1C,IAPxEnc,WAA0BoI,GAA1ByE,YAA0BA,EACAzE,EAA1B6W,UAA0BA,EACiB7W,EAA3C+T,UAA2CA,EA7H3C/T,EAAAwU,SAAuB,EAMvBxU,EAAA4T,aAA2C,GAAImD,GAAAA,QAM/C/W,EAAA2T,YAA0B,WA8F1B3T,EAAAgX,KAAqB,YAAYzL,KAEjCvL,EAAAnI,WAA0B,EAE1BmI,EAAAwM,WAA0B,EAC1BxM,EAAAiX,MAAsB,OACtBjX,EAAAkX,uBACQ,OACA,WACA,iBACA,QACA,OACA,QACFC,OAAO,SAACC,GAAM,MAAAC,GAAAA,yBAAyBC,IAAIF,KAczCpX,EAAKuX,oBAAsBT,GAAsB9W,EAAKyE,YAAYxB,cAElEjD,EAAKwX,qBAAuBxX,EAAKjI,MAGjCiI,EAAKuK,GAAKvK,EAAKuK,KA9MvB,MA0D6BjT,GAA7Bsf,EAAApf,GA6BAC,OAAAC,eAAQkf,EAARjf,UAAA,2BACQ,MAAIC,MAAKmc,WAAyC,OAA5Bnc,KAAKmc,UAAUtV,SAC1B7G,KAAKmc,UAAUtV,SAGnB7G,KAAKC,WAGpB8U,IAAI,SAAa5U,GACTH,KAAKC,UAAY4f,EAAAA,sBAAsB1f,GAInCH,KAAK4c,UACL5c,KAAK4c,SAAU,EACf5c,KAAKgc,aAAarS,yCAS9B9J,OAAAC,eAAQkf,EAARjf,UAAA,qBACQ,MAAOC,MAAK8f,KAGpB/K,IAAI,SAAO5U,GACHH,KAAK8f,IAAM3f,GAASH,KAAKof,sCAcjCvf,OAAAC,eAAQkf,EAARjf,UAAA,2BACQ,MAAOC,MAAK4U,WAGpBG,IAAI,SAAa5U,GACTH,KAAK4U,UAAYiL,EAAAA,sBAAsB1f,oCAM/CN,OAAAC,eAAQkf,EAARjf,UAAA,uBACQ,MAAOC,MAAKqf,OAGpBtK,IAAI,SAAS5U,GACLH,KAAKqf,MAAQlf,GAAS,OACtBH,KAAK+f,gBAKDN,EAAAA,yBAAyBC,IAAI1f,KAAKqf,SAClCrf,KAAK6M,YAAYxB,cAAcxG,KAAO7E,KAAKqf,wCAUvDxf,OAAAC,eAAQkf,EAARjf,UAAA,wBACQ,MAAOC,MAAK2f,oBAAoBxf,OAGxC4U,IAAI,SAAU5U,GACFA,IAAUH,KAAKG,QACfH,KAAK2f,oBAAoBxf,MAAQA,EACjCH,KAAKgc,aAAarS,yCAuC1BqV,EAAJjf,UAAAigB,YAAI,WACIhgB,KAAKgc,aAAarS,QAGtBqV,EAAJjf,UAAA0N,YAAI,WACIzN,KAAKgc,aAAaiE,YAGtBjB,EAAJjf,UAAAmgB,UAAI,WACQlgB,KAAKmc,WAILnc,KAAKmgB,mBAMTngB,KAAKogB,0BAITpB,EAAJjf,UAAAuX,MAAI,WACItX,KAAK6M,YAAYxB,cAAciM,SAInC0H,EAAJjf,UAAAsgB,cAAI,SAActJ,GACNA,IAAc/W,KAAK4c,UACnB5c,KAAK4c,QAAU7F,EACf/W,KAAKgc,aAAarS,SAI1BqV,EAAJjf,UAAAugB,SAAI,aAcAzgB,OAAJC,eAAQkf,EAARjf,UAAA,aAAI,WACI,OAAQC,KAAKugB,kBAAoBvgB,KAAK6M,YAAYxB,cAAclL,QAAUH,KAAKwgB,+CAOnFxB,EAAJjf,UAAA0c,iBAAI,WACIzc,KAAKsX,SAIC0H,EAAdjf,UAAAqgB,uBAAI,WACI,GAAMjL,GAAWnV,KAAKG,KAElBH,MAAK4f,uBAAyBzK,IAC9BnV,KAAK4f,qBAAuBzK,EAC5BnV,KAAKgc,aAAarS,SAKhBqV,EAAdjf,UAAAggB,cAAI,WACI,GAAItB,GAAuBgC,QAAQzgB,KAAKqf,QAAU,EAC9C,KAAMqB,GAA+B1gB,KAAKqf,QAKxCL,EAAdjf,UAAAwgB,cAAI,WACI,MAAOvgB,MAAKsf,sBAAsBmB,QAAQzgB,KAAKqf,QAAU,GAInDL,EAAdjf,UAAAygB,YAAI,WAEI,GAAMG,GAAY3gB,KAAK6M,YAAYxB,cAAmCsV,QAEtE,OAAOA,IAAYA,EAASC,yBAhQpC/b,KAAC+F,EAAAA,UAAD7F,OACIE,SAAU,iBACVD,SAAU,UACVG,MACIE,MAAS,WAGT+N,YAAa,KACbyN,qBAAsB,cACtBC,aAAc,WACdC,aAAc,WACdnV,SAAU,uBACVD,UAAW,sBACXqV,UAAW,cAEfjb,YAAcC,QAASuV,GAAoBrV,YAAa8Y,4CAvD5Dna,KAAwBiH,EAAAA,aAOxBjH,KAAiCoc,EAAAA,WAFjCpc,KAA6Bqc,EAAAA,UAA7B5a,aAAAzB,KA2LiBgT,EAAAA,WA3LjBhT,KA2L6Bsc,EAAAA,SA3L7Btc,KAAwCuc,EAAAA,OAAxC9a,aAAAzB,KA4LiBgT,EAAAA,aA5LjBhT,KAASwc,EAAAA,mBAAT/a,aAAAzB,KA6LiBgT,EAAAA,aA1LjBhT,KAA8Byc,IA4L9Bzc,SAAAwB,GAAAC,aAAAzB,KAAiBgT,EAAAA,WAAjBhT,KAA6Bsc,EAAAA,OAA7Btc,KAAqC+U,EAAAA,OAArC7U,MAA4CwZ,2BAvI5CgD,oBAAA1c,KAAKiC,EAAAA,QAwBLD,WAAAhC,KAAKiC,EAAAA,QAwBL6L,KAAA9N,KAAKiC,EAAAA,QAaL0a,cAAA3c,KAAKiC,EAAAA,QAML0P,WAAA3R,KAAKiC,EAAAA,QAWLjC,OAAAA,KAAKiC,EAAAA,QAsBL3G,QAAA0E,KAAKiC,EAAAA,SAlKLkY,GA0D6BF,IAA7B2C,GAAA,yBA1DA,sBA6SA5c,KAAC+F,EAAAA,UAAD7F,OACIE,SAAU,0BACVD,SAAU,mBACVG,MAAQE,MAAO,0BAhTnBoc,iCCAA,sBASA5c,KAACuC,EAAAA,SAADrC,OACIsC,SAAWC,EAAAA,aAAc2E,EAAAA,WAAYkM,EAAgBuJ,EAAAA,aACrDla,SAAWwX,GAASyC,IACpBha,cAAgBuX,GAASyC,QAZ7BE,mBC2GI,QAAJvV,GACgBpB,EACAoJ,EAEDwN,GAHC5hB,KAAhBgL,SAAgBA,EACAhL,KAAhBoU,gBAAgBA,EAEDpU,KAAf4hB,cAAeA,EAlDf5hB,KAAA+Y,WAAyB,EAOzB/Y,KAAA6hB,iBAAoD,QAoCpD7hB,KAAAyU,WAAwB,EACxBzU,KAAAC,WAAwB,EAzGxB,MA2EAJ,QAAAC,eAAQsM,EAARrM,UAAA,2BACQ,MAAOC,MAAKC,WAAcD,KAAK4hB,eAAiB5hB,KAAK4hB,cAAc/a,cAGvE,SAAa1G,GACT,GAAMgV,GAAW/U,EAAUD,EAEvBgV,KAAanV,KAAKC,YAClBD,KAAKC,UAAYkV,EACjBnV,KAAKoU,gBAAgBwB,iDAKjC/V,OAAAC,eAAQsM,EAARrM,UAAA,2BACQ,MAAOC,MAAK4hB,cAAc5I,iBAAmBhZ,KAAK4hB,cAAc5I,gBAAgBC,WAAWjZ,QAAS,OAGxG,SAAaG,GACT,GAAM8Y,GAAa7Y,EAAUD,EAEzB8Y,KAAejZ,KAAKyU,YACpBzU,KAAKuC,YAAY0W,GAEjBjZ,KAAK4hB,cAAcE,uDAe3B1V,EAAJrM,UAAAuN,SAAI,WAAA,GAAJlF,GAAApI,IACQ,IAAIA,KAAKyU,UAAW,CAMhB,GAAMsN,GAAc/hB,KAAKyU,SAEzBuN,SAAQC,UAAUC,KAAK,YACf9Z,EAAKqM,WAAasN,KAClB3Z,EAAKmN,UAAW,EAChBnN,EAAKgM,gBAAgBwB,oBAMrCxJ,EAAJrM,UAAA4B,mBAAI,WACI3B,KAAKiL,YAAc,GAAIC,GAAalL,KAAKmL,OAAQnL,KAAKgL,WAG1DoB,EAAJrM,UAAA0N,YAAI,WAAA,GAAJrF,GAAApI,IACYA,MAAKuV,UAGLyM,QAAQC,UAAUC,KAAK,WAAM,MAAA9Z,GAAKmN,UAAW,IAGjDvV,KAAK4hB,cAAcO,sBAAsBniB,OAG7CoM,EAAJrM,UAAAgD,OAAI,WACI/C,KAAKuV,UAAYvV,KAAKuV,UAG1BnJ,EAAJrM,UAAAuX,MAAI,WACItX,KAAKgL,SAASK,cAAciM,QAE5BtX,KAAK4hB,cAAc3f,iBAAiBjC,OAGxCoM,EAAJrM,UAAAqiB,SAAI,WACI,MAAOpiB,MAAKqiB,MAAQriB,KAAKqiB,MAAMhX,cAAciX,YAAc,IAG/DlW,EAAJrM,UAAAwC,YAAI,SAAYgT,GACJvV,KAAKyU,YAAcc,GAAavV,KAAK4hB,cAAc5I,kBAEvDhZ,KAAKyU,UAAYc,EAEbA,EACAvV,KAAK4hB,cAAc5I,gBAAgBE,OAAOlZ,MAE1CA,KAAK4hB,cAAc5I,gBAAgBG,SAASnZ,MAGhDA,KAAKoU,gBAAgBwB,iBAGzBxJ,EAAJrM,UAAAwiB,WAAI,WACI,MAAOviB,MAAKgL,SAASK,cAAcmX,iBAAiB,GAAGC,QAG3DrW,EAAJrM,UAAAqZ,aAAI,WACQpZ,KAAK6G,UAET7G,KAAK4hB,cAAc3f,iBAAiBjC,OAGxCoM,EAAJrM,UAAAqL,aAAI,WACQpL,KAAK6G,UAAY7G,KAAK+Y,YAE1B/Y,KAAK+Y,WAAY,IAGrB3M,EAAJrM,UAAAyL,YAAI,WACIxL,KAAK+Y,WAAY,EAEjB/Y,KAAK4hB,cAAcc,cAGvBtW,EAAJrM,UAAA2L,gBAAI,WACI,MAAO1L,MAAKgL,SAASK,8BA3J7BxG,KAACC,EAAAA,UAADC,OACIC,SAAU,eACVC,SAAU,iBACVE,MACIkU,SAAU,KAEVhU,MAAO,iBACPiU,sBAAuB,WACvBC,qBAAsB,YACtB5N,UAAW,iBACXC,SAAU,gBACV8N,UAAW,kBAEfxU,SAAJ,0GACIO,cAAeC,EAAAA,kBAAkBC,KACjCkG,qBAAqB,EACrBjG,gBAAiBC,EAAAA,wBAAwBC,+CApD7CjB,KAAIiH,EAAAA,aAOJjH,KAAIuB,EAAAA,oBAqOJvB,KAAasH,GAAb7F,aAAAzB,KApIS+U,EAAAA,OAoIT7U,MApIgB4B,EAAAA,WAAW,WAAM,MAAAwF,8BA/CjChB,SAAAtG,KAAK6B,EAAAA,gBAAL3B,MAAqBgH,KAErBsW,QAAAxd,KAAK2B,EAAAA,UAALzB,MAAe,UAGf8c,mBAAAhd,KAAKiC,EAAAA,QAEL3G,QAAA0E,KAAKiC,EAAAA,QAILD,WAAAhC,KAAKiC,EAAAA,QAcLyO,WAAA1Q,KAAKiC,EAAAA,SAxFLsF,KA0MauW,IACT3c,QAASiO,EAAAA,kBACT/N,YAAaS,EAAAA,WAAW,WAAM,MAAAwF,MAC9BgI,OAAO,GAIXyO,GAAA,WACI,QAAJA,GAEe/O,EAEA3R,GAFAlC,KAAf6T,OAAeA,EAEA7T,KAAfkC,OAAeA,EAtNf,MAAA0gB,MA2NAC,GAAA,yBA3NA,MAAAA,MA6NaC,GAA4B/V,EAAc8V,mBAmDnD,QAAJ1W,GACgBnB,EACemC,EACG/K,EACA2gB,EACH/I,GAL3B,GAAJ5R,GAOQxI,EAPR2D,KAAAvD,OAAAA,WACgBoI,GAAhB4C,SAAgBA,EAbhB5C,EAAA4a,YAAmC,EAGnC5a,EAAA3D,gBAA8E,GAAI6P,GAAAA,aAOlFlM,EAAA6a,cAA4BC,EAAAA,aAAa9G,MAoKzChU,EAAAsa,WAA6B,aAiG7Bta,EAAA+a,UAA8C,SAACC,KA1PvChb,EAAKhG,WAA4B,OAAfA,GAA6BhC,EAAUgC,GACzDgG,EAAK4R,SAAwB,OAAbA,GAA2B5Z,EAAU4Z,GACrD5R,EAAK2a,WAA4B,OAAfA,GAA6B3iB,EAAU2iB,GAEzD3a,EAAK+E,SAAWsE,SAAStE,IAAa,EAEtC/E,EAAK4Q,gBAAkB,GAAIiB,GAAAA,eAA6B7R,EAAK4R,YA/RrE,MAkPqCta,GAArCyM,EAAAvM,GAgDIuM,EAAJpM,UAAA4B,mBAAI,WACI3B,KAAKgjB,WAAa5iB,EAAUJ,KAAKgjB,YAEjChjB,KAAKW,YAAc,GAAIiB,GAAAA,gBAA8B5B,KAAK6B,SACrDC,gBACAC,yBAAyB/B,KAAKgjB,YAC9BhhB,0BAA0BhC,KAAKgjB,WAAa,MAAQ,MAErDhjB,KAAKqjB,cACLrjB,KAAKsjB,sBAAsBtjB,KAAKqjB,aAChCrjB,KAAKqjB,YAAc,MAIvBrjB,KAAKijB,cAAgBjjB,KAAKgZ,gBAAwB,SAAExQ,UAAU,SAAChI,GAC3D,IAAmB,GAA/B+iB,GAAA,EAA+BC,EAAAhjB,EAAMijB,MAANF,EAA/BC,EAAA7e,OAA+B4e,IAA/B,CAAiB,GAAMjhB,GAAvBkhB,EAAAD,EACgBjhB,GAAKiT,UAAW,EAGpB,IAAmB,GAA/BmO,GAAA,EAA+BC,EAAAnjB,EAAMojB,QAANF,EAA/BC,EAAAhf,OAA+B+e,IAA/B,CAAiB,GAAMphB,GAAvBqhB,EAAAD,EACgBphB,GAAKiT,UAAW,KAIxBvV,KAAK6jB,oBAGT1X,EAAJpM,UAAA0N,YAAI,WACIzN,KAAKijB,cAAc1R,eAGvBpF,EAAJpM,UAAAuX,MAAI,WACItX,KAAKgL,SAASK,cAAciM,SAGhCnL,EAAJpM,UAAA+jB,UAAI,WACI9jB,KAAK6B,QAAQQ,QAAQ,SAACH,GAAW,MAAAA,GAAOK,aAAY,KAEpDvC,KAAK8hB,sBAGT3V,EAAJpM,UAAAgkB,YAAI,WACI/jB,KAAK6B,QAAQQ,QAAQ,SAACH,GAAW,MAAAA,GAAOK,aAAY,KAEpDvC,KAAK8hB,sBAGT3V,EAAJpM,UAAA8jB,iBAAI,YACQ7jB,KAAKgjB,YAAehjB,KAAK6B,QAAQmiB,OAErChkB,KAAKW,YAAYsjB,eAAehR,KAAKiR,MAAMlkB,KAAKuiB,aAAeviB,KAAK6B,QAAQmiB,MAAMzB,gBAItFpW,EAAJpM,UAAAkC,iBAAI,SAAiBC,GAGb,GAFAlC,KAAKW,YAAYwB,iBAAiBD,GAE9BlC,KAAKmkB,WAAankB,KAAKga,SAAU,CACjC,GAAMoK,GAAgBpkB,KAAKW,YAAY0jB,wBACjCC,EAActkB,KAAKW,YAAY+B,eAEjC0hB,GAAgBE,EAChBtkB,KAAK6B,QAAQQ,QAAQ,SAACC,EAAMoC,GACpBA,GAAS0f,GAAiB1f,GAAS4f,GAAehiB,EAAKC,aAAY,KAG3EvC,KAAK6B,QAAQQ,QAAQ,SAACC,EAAMoC,GACpBA,GAAS4f,GAAe5f,GAAS0f,GAAiB9hB,EAAKC,aAAY,KAI/EvC,KAAKmkB,WAAY,MACd,IAAInkB,KAAKukB,SAAU,CAGtB,GAFAvkB,KAAKukB,UAAW,GAEXvkB,KAAK8C,iBAAiBZ,GAAW,MAEtCA,GAAOa,aAEH/C,MAAKoC,aACLpC,KAAK6B,QAAQQ,QAAQ,SAACC,GAAS,MAAAA,GAAKC,aAAY,KAChDL,EAAOK,aAAY,GAI3BvC,MAAKgD,iBAAiBd,GACtBlC,KAAK8hB,sBAIT3V,EAAJpM,UAAA8V,WAAI,SAAW2O,GACHxkB,KAAK6B,QACL7B,KAAKsjB,sBAAsBkB,OAE3BxkB,KAAKqjB,YAAcmB,GAK3BrY,EAAJpM,UAAA+V,iBAAI,SAAiBC,GACb/V,KAAKmjB,UAAYpN,GAIrB5J,EAAJpM,UAAAiW,kBAAI,SAAkBD,GACd/V,KAAK0iB,WAAa3M,GAItB5J,EAAJpM,UAAAkW,iBAAI,SAAiBC,GACTlW,KAAK6B,SACL7B,KAAK6B,QAAQQ,QAAQ,SAACH,GAAW,MAAAA,GAAO2E,SAAWqP,KAI3D/J,EAAJpM,UAAA0kB,wBAAI,WACI,MAAOzkB,MAAK6B,QAAQ0d,OAAO,SAACrd,GAAW,MAAAA,GAAOqT,WAAUnL,IAAI,SAAClI,GAAW,MAAAA,GAAO/B,SAInFgM,EAAJpM,UAAAsB,oBAAI,WACI,GAAMoB,GAAezC,KAAKW,YAAY+B,eAEtC,IAAoB,MAAhBD,GAAwBzC,KAAK2C,cAAcF,GAAe,CAC1D,GAAMG,GAA8B5C,KAAK6B,QAAQgB,UAAUJ,EAEvDG,IAAiB5C,KAAK8C,iBAAiBF,KACvCA,EAAcG,SAGd/C,KAAKgD,iBAAiBJ,MAKlCuJ,EAAJpM,UAAA+C,iBAAI,SAAiB4hB,GACb,QAAS1kB,KAAK+iB,YAAuD,IAAzC/iB,KAAKgZ,gBAAgBzD,SAAS5Q,QAAgB+f,EAAWnP,WAGzFpJ,EAAJpM,UAAAwiB,WAAI,WACI,MAAOviB,MAAKgL,SAASK,cAAcmX,iBAAiB,GAAGC,QAO3DtW,EAAJpM,UAAAoiB,sBAAI,SAAsBjgB,GAClB,GAAIA,EAAO6W,UAAW,CAClB,GAAM4L,GAAc3kB,KAAK4kB,gBAAgB1iB,EAGrCyiB,GAAc,EACd3kB,KAAKW,YAAYkkB,wBACM,IAAhBF,GAAqB3kB,KAAK6B,QAAQ8C,OAAS,GAClD3E,KAAKW,YAAYmkB,sBAK7B3Y,EAAJpM,UAAAQ,WAAI,SAAWC,GACP,GAAMC,GAAUD,EAAMC,OAItB,QAHAT,KAAKmkB,UAAY3jB,EAAMukB,SACvB/kB,KAAKukB,SAAW/jB,EAAMwkB,QAEdvkB,GACJ,IAAKU,GAAAA,MACL,IAAKC,GAAAA,MACDpB,KAAKqB,sBACLb,EAAMQ,gBAEN,MACJ,KAAKM,GAAAA,KACDtB,KAAKW,YAAYskB,qBACjBzkB,EAAMQ,gBAEN,MACJ,KAAKO,GAAAA,IACDvB,KAAKW,YAAYukB,oBACjB1kB,EAAMQ,gBAEN,MACJ,KAAKQ,GAAAA,QACIxB,KAAKgjB,YAAchjB,KAAKW,YAAYwkB,4BAEzC3kB,EAAMQ,gBAEN,MACJ,KAAKS,GAAAA,UACIzB,KAAKgjB,YAAchjB,KAAKW,YAAYykB,wBAEzC5kB,EAAMQ,gBAEN,MACJ,SACIhB,KAAKW,YAAYe,UAAUlB,KAKvC2L,EAAJpM,UAAA+hB,mBAAI,WACQ9hB,KAAK6B,SACL7B,KAAKmjB,UAAUnjB,KAAKykB,4BAK5BtY,EAAJpM,UAAAiD,iBAAI,SAAiBd,GACblC,KAAKyE,gBAAgBF,KAAK,GAAIqe,IAAsB5iB,KAAMkC,KAItDiK,EAAZpM,UAAAslB,kBAAA,SAA8BllB,GACtB,MAAOH,MAAK6B,QAAQyjB,KAAK,SAACpjB,GAAW,MAAAA,GAAO/B,QAAUA,KAIlDgM,EAAZpM,UAAAujB,sBAAA,SAAkCkB,aAC1BxkB,MAAK6B,QAAQQ,QAAQ,SAACH,GAAW,MAAAA,GAAOK,aAAY,KAEpDiiB,EACKpa,IAAI,SAACjK,GAAU,MAAAiI,GAAKid,kBAAkBllB,KACtCof,OAAOgG,SACPljB,QAAQ,SAACH,GAAtB,MAAA,GAAyCK,aAAY,MAQzC4J,EAAZpM,UAAA4C,cAAA,SAA0B+B,GAClB,MAAOA,IAAS,GAAKA,EAAQ1E,KAAK6B,QAAQ8C,QAItCwH,EAAZpM,UAAA6kB,gBAAA,SAA4B1iB,GACpB,MAAOlC,MAAK6B,QAAQgB,UAAU4d,QAAQve,mBAhT9C2C,KAACC,EAAAA,UAADC,OACIC,SAAU,kBACVC,SAAU,oBACVC,SAAU,4BACVM,QAAS,0rLACTI,gBAAiBC,EAAAA,wBAAwBC,OACzCL,cAAeC,EAAAA,kBAAkBC,KACjCsI,QAAS,WAAY,YACrB9I,MACIE,MAAO,oBACPD,aAAc,WACduG,UAAW,UACXC,SAAU,eACVrG,YAAa,qBACbigB,kBAAmB,sBAEvBzf,WAAY4c,IACZ9W,qBAAqB,0CA1OzBhH,KAAIiH,EAAAA,aA4QJjH,SAAAwB,GAAAC,aAAAzB,KAAS0B,EAAAA,UAATxB,MAAmB,gBACnBF,SAAAwB,GAAAC,aAAAzB,KAAS0B,EAAAA,UAATxB,MAAmB,mBACnBF,SAAAwB,GAAAC,aAAAzB,KAAS0B,EAAAA,UAATxB,MAAmB,mBACnBF,SAAAwB,GAAAC,aAAAzB,KAAS0B,EAAAA,UAATxB,MAAmB,mCA7BnBlD,UAAAgD,KAAK6B,EAAAA,gBAAL3B,MAAqBqH,MAYrB4W,aAAAne,KAAKiC,EAAAA,QAGLrC,kBAAAI,KAAKkC,EAAAA,UAvQLoF,GAkPqC2W,I3BzOrCnY,GAAA,yBATA,MAAAA,MASAD,GAAA,SAAA9K,+DATA,MAmB4BF,GAA5BgL,EAAA9K,kBARAiF,KAACC,EAAAA,UAADC,OACIE,SAAU,UACVE,MAAQE,MAAO,WACfH,SAAU,4BACVM,QAAS;ksLACTI,gBAAiBC,EAAAA,wBAAwBC,OACzCL,cAAeC,EAAAA,kBAAkBC,SAjBrC+E,GAmB4BC,gCAnB5B,sBA0BA9F,KAAC+F,EAAAA,UAAD7F,OACIE,SAAU,gCACVE,MAAQE,MAAO,oBA5BnBwF,KAkCAC,GAAA,yBAlCA,MAAAA,MAkCAC,GAAA,SAAAnL,GAmBI,QAAJmL,GAAwBC,GAApB,GAAJ5C,GACQxI,EADR2D,KAAAvD,OAAAA,WAAwBoI,GAAxB4C,SAAwBA,IArDxB,MAgDgCtL,GAAhCqL,EAAAnL,GASImL,EAAJhL,UAAA4B,mBAAI,WACI3B,KAAKiL,YAAc,GAAIC,GAAalL,KAAKmL,OAAQnL,KAAKgL,WAG1DD,EAAJhL,UAAAqL,aAAI,WACIpL,KAAKgL,SAASK,cAAcC,UAAUC,IAAI,eAG9CR,EAAJhL,UAAAyL,YAAI,WACIxL,KAAKgL,SAASK,cAAcC,UAAUG,OAAO,eAGjDV,EAAJhL,UAAA2L,gBAAI,WACI,MAAO1L,MAAKgL,SAASK,8BAlC7BxG,KAACC,EAAAA,UAADC,OACIE,SAAU,gCACVE,MACIE,MAAO,eACPsG,UAAW,iBACXC,SAAU,iBAEd1G,SAAJ,yNACIO,cAAeC,EAAAA,kBAAkBC,KACjCkG,qBAAqB,EACrBjG,gBAAiBC,EAAAA,wBAAwBC,+CA5C7CjB,KAAsFiH,EAAAA,gCA+CtFX,SAAAtG,KAAK6B,EAAAA,gBAAL3B,MAAqBgH,MAjDrBhB,GAgDgCD,IChDhCkB,GAAA,yBAAA,sBAWAnH,KAACuC,EAAAA,SAADrC,OACIsC,SACIC,EAAAA,aACA2E,EAAAA,WACAC,GAEJ1E,SACIkD,GACAyB,GACApB,GACAqB,GACAvB,IAEJpD,cACIiD,GACAyB,GACApB,GACAqB,GACAvB,QA7BRmB,KCsBMK,GAAsB,sBACtBC,GAAiB,iBACjBC,GAAkB,kBAClBC,GAAkB,8CAzBxB,sBA8BA3H,KAAC+F,EAAAA,UAAD7F,OACIE,SALmB,iBAMnBE,MACIE,MAPe,sBA1BvBoH,KAoCAC,GAAA,yBApCA,sBAsCA7H,KAAC+F,EAAAA,UAAD7F,OACIE,SAAUsH,GACVpH,MACIE,MAAOkH,QAzCfG,KA4CAC,GAAA,yBA5CA,sBA8CA9H,KAAC+F,EAAAA,UAAD7F,OACIE,SAAUuH,GACVrH,MACIE,MAAOmH,QAjDfG,KAsDAC,GAAA,WACI,QAAJA,GAAuBC,GAAA7M,KAAvB6M,YAAuBA,EAvDvB,MAAAD,MA0DaE,GAAqBC,EAAcH,mBA0B5C,QAAJI,GACgBC,EACAC,GAFZ,GAAJ9E,GAIQxI,EAJR2D,KAAAvD,KAIciN,IAJdjN,WACgBoI,GAAhB6E,WAAgBA,EACA7E,EAAhB8E,cAAgBA,EAThB9E,EAAA+E,SAAuB,IA7EvB,MA0EkCzN,GAAlCsN,EAAApN,GAMAC,OAAAC,eAAQkN,EAARjN,UAAA,sBAAA,SAAuBI,GACfH,KAAKiN,WAAW5B,cAAc+B,aAAa,gBAAiBC,UAAUlN,qCAU1E6M,EAAJjN,UAAAuN,SAAI,WACItN,KAAKuN,sBAELvN,KAAKkN,cAAcM,QAAQxN,KAAKiN,WAAW5B,eAAe,IAG9D2B,EAAJjN,UAAA0N,YAAI,WACIzN,KAAKkN,cAAcQ,eAAe1N,KAAKiN,WAAW5B,gBAI9C2B,EAAZjN,UAAAwN,0CACcI,EAAkB3N,KAAKiN,WAAW5B,cAAcuC,eAAe,QAErED,GAAOtL,QAAQ,SAAC7B,GAAU,MAAA4H,GAAK6E,WAAW5B,cAAcwC,oBAAoB,QAASrN,KAErFR,KAAKiN,WAAW5B,cAAcyC,iBAAiB,QAAS,SAACtN,GACjD4H,EAAK6E,WAAW5B,cAAc0C,aAAa,aAC3CvN,EAAMwN,6BAEX,GAEHL,EAAOtL,QAAQ,SAAC7B,GAAU,MAAA4H,GAAK6E,WAAW5B,cAAcyC,iBAAiB,QAAStN,qBArD1FqE,KAACC,EAAAA,UAADC,OACIE,SAAUqH,GACVpH,SAAU,2JAMVO,cAAeC,EAAAA,kBAAkBC,KACjCsI,QAAS,YACT9I,MACI+I,kBAAmB,4DAhE3BrJ,KAAIiH,EAAAA,aAOJjH,KAASsJ,EAAAA,kCA8DThB,WAAAtI,KAAKiC,EAAAA,QAGLsH,iBAAAvJ,KAAKiC,EAAAA,SA/ELkG,GA0EkCF,IAAlCuB,GAAA,wBAgDArO,KAAAsO,SAA8C,OA1H9C,MA6HAzO,QAAAC,eAAQuO,EAARtO,UAAA,6BACQ,MAAyB,SAAlBC,KAAKsO,SAAsB,iBAAmB,kEAT7DzJ,KAAC+F,EAAAA,UAAD7F,OACIE,SAAUoH,yBAGdiC,WAAAzJ,KAAKiC,EAAAA,QAGLyH,aAAA1J,KAAK2J,EAAAA,YAALzJ,MAAiB,YA5HjBsJ,KAkIAI,GAAA,WAGI,QAAJA,GACeC,EACAC,GADA3O,KAAf0O,QAAeA,EACA1O,KAAf2O,MAAeA,EAJf3O,KAAA4O,YAAkC,EAnIlC,MA0IIH,GAAJ1O,UAAA8O,iBAAI,SAAiBC,GACb9O,KAAK4O,WAAaE,EAElB9O,KAAK+O,wBAGDN,EAAZ1O,UAAAgP,gCACY/O,KAAK4O,WACL5O,KAAK0O,QAAQpD,UAAUC,IA/HH,6BAiIpBvL,KAAK0O,QAAQpD,UAAUG,OAjIH,8BAnBhCgD,KA0JAO,GAAA,WAkBI,QAAJA,GACeN,EACAC,EACAM,sBAFAjP,KAAf0O,QAAeA,EACA1O,KAAf2O,MAAeA,EACA3O,KAAfiP,iBAAeA,EA/Kf,MA4JIpP,QAAJC,eAAQkP,EAARjP,UAAA,mBAAI,WACI,MAAOC,MAAKiP,iBAAiBtK,OAAS,mCAK1C9E,OAAJC,eAAQkP,EAARjP,UAAA,2BAAI,WACI,WAAkCsG,KAA9BrG,KAAKkP,qBACElP,KAAKkP,sBAGhBlP,KAAKmP,uCAEEnP,KAAKkP,uDAShBF,EAAJjP,UAAA8O,iBAAI,SAAiBC,GACT9O,KAAKiP,iBAAiBtK,OAAS,GAC/B3E,KAAKoP,YAAYN,GAGrB9O,KAAKiP,iBAAiB5M,QAAQ,SAACC,GAAS,MAAAA,GAAKuM,iBAAiBC,MAG1DE,EAAZjP,UAAAoP,gDACQnP,KAAKkP,qBAAuBlP,KAAKiP,iBAC5BI,OAAO,SAACC,EAAKhN,GAAS,MAAAgN,GAAMhN,EAAKqM,OAAO,IAGzCK,EAAZjP,UAAAwP,oBACQ,GAAMC,GAAgBxP,KAAK0O,QAAQe,aAAa,gBAEhD,OAAOD,GACDE,UAAUF,GACTxP,KAAKiP,iBAAiBtK,OAAS,EAAI3E,KAAKiP,iBAAiB,GAAGP,QAAQiB,UAAY,IAGnFX,EAAZjP,UAAAqP,YAAA,SAAwBN,GACZA,EACA9O,KAAK0O,QAAQtB,aAAa,QAASpN,KAAKuP,YAExCvP,KAAK0O,QAAQkB,gBAAgB,UA3MzCZ,mBAmQI,QAAJa,GACgBhD,GAAA7M,KAAhB6M,YAAgBA,EAvChB7M,KAAA8P,4BAA2D,EAC3D9P,KAAA+P,uBAAsD,IACtD/P,KAAAgQ,kBAAiD3D,GACjDrM,KAAAiQ,qBACQ3D,GACAC,GACAC,GAmCA,IAAM0D,GAAiBC,EAAAA,UAAUC,OAAQ,UACpC9H,KAAK+H,EAAAA,aAAarQ,KAAK+P,wBAE5B/P,MAAKsQ,oBAAsBJ,EAAe1H,UAAUxI,KAAKuQ,gBAAgBC,KAAKxQ,OAzQtF,MAyOAH,QAAAC,eAAgB+P,EAAhB9P,UAAA,kCACQ,MAAOC,MAAK6M,YAAYxB,cAAcoF,cAAc,OAAOC,wBAAwB/B,uCAG3F9O,OAAAC,eAAgB+P,EAAhB9P,UAAA,8BACQ,WAA0BsG,KAAtBrG,KAAK2Q,cAA+B3Q,KAAK8P,4BAI7C9P,KAAK4Q,8BAEE5Q,KAAK2Q,cALD3Q,KAAK2Q,8CAQxB9Q,OAAAC,eAAgB+P,EAAhB9P,UAAA,kCACQ,WAA+BsG,KAA3BrG,KAAK6Q,mBAAoC7Q,KAAK8P,4BAIlD9P,KAAK8Q,mCAEE9Q,KAAK6Q,mBALD7Q,KAAK6Q,mDAmBpBhB,EAAJ9P,UAAAwQ,gBAAI,WAGI,IAAK,GAFDQ,GAAgB/Q,KAAKgR,gBAAkBhR,KAAKiR,gBAEvC/H,EAAIlJ,KAAKkR,YAAYvM,OAAS,EAAGuE,GAAK,EAAGA,IAAK,CACnD,GAAM5G,GAAOtC,KAAKkR,YAAYhI,EAEzB5G,GAAK6O,cAIV7O,EAAKuM,iBAAiBkC,EAAgB,GACtCA,GAAiBzO,EAAK8O,uBAI9BvB,EAAJ9P,UAAAsR,gBAAI,WAAA,GAAJjJ,GAAApI,IAGQsR,YAAW,WAAM,MAAAlJ,GAAKmI,mBAAmB,IAG7CV,EAAJ9P,UAAA0N,YAAI,WACIzN,KAAKsQ,oBAAoBiB,eAGrB1B,EAAZ9P,UAAA+Q,4CACQ9Q,KAAK6Q,kBAAoB7Q,KAAKkR,YACzB7B,OAAO,SAACC,EAAKhN,GAAS,MAAAgN,GAAMhN,EAAKqM,OAAO,IAGzCkB,EAAZ9P,UAAAyR,qBAAA,SAAiC9C,GAKzB,MAJmBA,GAAQgC,wBAAwB/B,MAC/B8C,SAASC,iBAAiBhD,GAASiD,iBAAiB,iBACrDF,SAASC,iBAAiBhD,GAASiD,iBAAiB,iBAKnE9B,EAAZ9P,UAAA6Q,kDACcgB,EAAmB5R,KAAKiQ,oBACzB7F,IAAI,SAACyH,GAAc,MAAGzJ,GAAK4H,kBAAxC,IAA6D6B,IAC/CC,EAA0BC,MAAMC,KAAKhS,KAAK6M,YAAYxB,cAAc4G,iBAAiBL,GAE3F5R,MAAK2Q,aAAemB,EACf1H,IAAI,SAAC8H,GAAO,MAAA,IAAIlD,IAAgBkD,EAAI9J,EAAKoJ,qBAAqBU,GAAK9J,EAAK+J,oBAAoBD,OAG7FrC,EAAZ9P,UAAAoS,oBAAA,SAAgCzD,GAGxB,MAFaA,GAAQ+B,cAAc,6CAM5BsB,MAAMC,KAAKtD,EAAQuD,iBAAiBzF,KACtCpC,IAAI,SAAC8H,GAAO,MAAA,IAAIzD,IAAe,EAAmByD,EAAGxB,wBAAwB/B,4BAlH1F9J,KAACC,EAAAA,UAADC,OACIE,SA7Lc,YA8LdC,SAAU,uEAEqBmH,GAFnC,KAE2DA,GAF3D,wCAKI7G,QAAS,ulDACTC,cAAeC,EAAAA,kBAAkBC,6CAlNrCd,KAAIiH,EAAAA,cAPJ+D,KCAAuC,GAAA,yBAAA,sBAgBAvN,KAACuC,EAAAA,SAADrC,OACIsC,SACIC,EAAAA,aACA2E,EAAAA,WACAoG,EAAAA,gBAEJ7K,SACIqI,GACAxB,GACA1B,GACAK,GACAN,GACAD,IAEJhF,cACIoI,GACAxB,GACA1B,GACAK,GACAN,GACAD,QApCR2F,KCYIE,GAAa,EAKjBC,GAAA,WACI,QAAJA,GAAuB1F,GAAA7M,KAAvB6M,YAAuBA,EAlBvB,MAAA0F,MAqBaC,GAA0BC,EAAWF,mBAmB9C,QAAJG,GAAgBzF,GAAZ,GAAJ7E,GACQxI,EADR2D,KAAAvD,KACciN,IADdjN,WALAoI,GAAAuK,GAA0B,mBAAmBL,KAC7ClK,EAAAjI,MAA6B,EAC7BiI,EAAAwK,KAAqC,cACrCxK,EAAAyK,MAAmCC,EAAaC,UAtChD,MAkCmCrT,GAAnCgT,EAAA9S,GAUIC,OAAJC,eAAQ4S,EAAR3S,UAAA,cAAAiT,IAAI,WACI,MAAOC,MAAKC,IA/BA,EA+BiBD,KAAKE,IA9BtB,IA8BuCnT,KAAKG,QA9B5C,oDAQpB0E,KAACC,EAAAA,UAADC,OACIE,SAAU,kBACVC,SAAJ,gVACIM,QAAS,ydACTI,gBAAiBC,EAAAA,wBAAwBC,OACzCL,cAAeC,EAAAA,kBAAkBC,KACjCR,MACIE,MAAO,kBACP+N,YAAa,8CA3BrBvO,KAAIiH,EAAAA,gCA+BJ6G,KAAA9N,KAAKiC,EAAAA,QACL3G,QAAA0E,KAAKiC,EAAAA,QACL8L,OAAA/N,KAAKiC,EAAAA,QACL+L,QAAAhO,KAAKiC,EAAAA,SAtCL4L,GAkCmCF,gCClCnC,sBAUA3N,KAACuC,EAAAA,SAADrC,OACIsC,SACIC,EAAAA,aACA+K,EAAAA,gBAEJ7K,SACIkL,IAEJjL,cACIiL,QAnBRW,KCYIf,GAAa,EAKjBgB,GAAA,WACI,QAAJA,GAAuBzG,GAAA7M,KAAvB6M,YAAuBA,EAlBvB,MAAAyG,MAqBaC,GAA6Bd,EAAWa,mBAqBjD,QAAJE,GAAgBvG,GAAZ,GAAJ7E,GACQxI,EADR2D,KAAAvD,KACciN,IADdjN,WALAoI,GAAAuK,GAA0B,uBAAuBL,KACjDlK,EAAAjI,MAA6B,EAC7BiI,EAAAwK,KAAyC,cACzCxK,EAAAyK,MAAmCC,EAAaC,UAxChD,MAoCuCrT,GAAvC8T,EAAA5T,GAUIC,OAAJC,eAAQ0T,EAARzT,UAAA,cAAAiT,IAAI,WACI,MAAOC,MAAKC,IAjCA,EAiCiBD,KAAKE,IAhCtB,IAgCuCnT,KAAKG,QAhC5C,qCAmChBN,OAAJC,eAAQ0T,EAARzT,UAAA,qBAAAiT,IAAI,WACI,MA5Be,KAAA,IA4BYhT,KAAKyT,WAAxC,oDA1BA5O,KAACC,EAAAA,UAADC,OACIE,SAAU,sBACVC,SAAJ,2aACIM,QAAS,8pBACTI,gBAAiBC,EAAAA,wBAAwBC,OACzCL,cAAeC,EAAAA,kBAAkBC,KACjCR,MACIE,MAAO,sBACP+N,YAAa,8CA7BrBvO,KAAIiH,EAAAA,gCAiCJ6G,KAAA9N,KAAKiC,EAAAA,QACL3G,QAAA0E,KAAKiC,EAAAA,QACL8L,OAAA/N,KAAKiC,EAAAA,QACL+L,QAAAhO,KAAKiC,EAAAA,SAxCL0M,GAoCuCD,gCCpCvC,sBAQA1O,KAACuC,EAAAA,SAADrC,OACIsC,SACIC,EAAAA,aACA+K,EAAAA,gBAEJ7K,SACIgM,IAEJ/L,cACI+L,QAjBRE,KCyBIC,GAAe,EAGnBC,GAAA,WACI,QAAJA,GAEeC,EAEA1T,GAFAH,KAAf6T,OAAeA,EAEA7T,KAAfG,MAAeA,EAjCf,MAAAyT,MAsCAE,GAAA,yBAtCA,MAAAA,MAuCaC,GAAyBhH,EAAc+G,IAOvCE,IACThO,QAASiO,EAAAA,kBACT/N,YAAaS,EAAAA,WAAW,WAAM,MAAAuN,MAC9BC,OAAO,kBA4HP,QAAJD,GAAwBE,GAApB,GAAJhM,GACQxI,EADR2D,KAAAvD,OAAAA,WAAwBoI,GAAxBgM,gBAAwBA,EAvGxBhM,EAAAiM,OAA6D,GAAIC,GAAAA,aAYjElM,EAAAmM,OAA0B,KAG1BnM,EAAAoM,MAA4B,kBAAkBb,KAG9CvL,EAAAqM,UAA8C,KAG9CrM,EAAAsM,gBAAsC,EAGtCtM,EAAAuM,eAAiD,QAGjDvM,EAAAnI,WAAiC,EAGjCmI,EAAAwM,WAAiC,EAGjCxM,EAAAyM,6BAAyD,aAMzDzM,EAAA0M,UAA2B,eA7G3B,MA8DkCpV,GAAlCwU,EAAAtU,GAmDAC,OAAAC,eAAQoU,EAARnU,UAAA,YAAA,WAAyB,MAAOC,MAAKwU,OACrCO,IAAI,SAAS5U,GACLH,KAAKwU,MAAQrU,EACbH,KAAKgV,0DAKbnV,OAAAC,eAAQoU,EAARnU,UAAA,gCACQ,MAAOC,MAAK2U,gBAEpBI,IAAI,SAAkBE,GACdjV,KAAK2U,eAAuB,WAANM,EAAiB,SAAW,QAClDjV,KAAKkV,sDAKbrV,OAAAC,eAAQoU,EAARnU,UAAA,aAAA,WAAuB,MAAOC,MAAKuU,QACnCQ,IAAI,SAAUI,GACFnV,KAAKuU,SAAWY,IAEhBnV,KAAKuU,OAASY,EAEdnV,KAAKoV,+BACLpV,KAAKqV,6DAIbnB,EAAJnU,UAAAsV,yBAAI,WACQrV,KAAKyU,YAAczU,KAAKyU,UAAUa,UAClCtV,KAAKyU,UAAUa,SAAU,IAMrCzV,OAAAC,eAAQoU,EAARnU,UAAA,gBAAA,WAAqB,MAAOC,MAAKyU,WACjCM,IAAI,SAAaQ,GACTvV,KAAKyU,UAAYc,EACjBvV,KAAKG,MAAQoV,EAAWA,EAASpV,MAAQ,KACzCH,KAAKqV,4DAKbxV,OAAAC,eAAQoU,EAARnU,UAAA,gBAAA,WAA8B,MAAOC,MAAKC,WAC1C8U,IAAI,SAAa5U,GACTH,KAAKC,UAAYG,EAAUD,GAC3BH,KAAKkV,sDAKbrV,OAAAC,eAAQoU,EAARnU,UAAA,gBAAA,WAA8B,MAAOC,MAAK4U,WAC1CG,IAAI,SAAa5U,GACTH,KAAK4U,UAAYxU,EAAUD,GAC3BH,KAAKkV,sDAWThB,EAAJnU,UAAA4B,mBAAI,WAII3B,KAAK0U,gBAAiB,GAO1BR,EAAJnU,UAAAyV,MAAI,WACQxV,KAAK8U,WACL9U,KAAK8U,aAKbZ,EAAJnU,UAAA0V,gBAAI,WACQzV,KAAK0U,gBACL1U,KAAKqU,OAAO9P,KAAK,GAAIqP,IAAc5T,KAAe,UAAEA,KAAKuU,UAIjEL,EAAJnU,UAAAmV,mBAAI,WACQlV,KAAK0V,SACL1V,KAAK0V,QAAQrT,QAAQ,SAACsT,GAAU,MAAAA,GAAMC,kBAQ9C1B,EAAJnU,UAAA8V,WAAI,SAAW1V,GACPH,KAAKG,MAAQA,EACbH,KAAKoU,gBAAgBwB,gBAQzB1B,EAAJnU,UAAA+V,iBAAI,SAAiBC,GACb/V,KAAK6U,6BAA+BkB,GAQxC7B,EAAJnU,UAAAiW,kBAAI,SAAkBD,GACd/V,KAAK8U,UAAYiB,GAOrB7B,EAAJnU,UAAAkW,iBAAI,SAAiBC,GACblW,KAAK6G,SAAWqP,EAChBlW,KAAKoU,gBAAgBwB,gBAGjB1B,EAAZnU,UAAAiV,uBAAI,WAAA,GAAJ5M,GAAApI,IACYA,MAAK0V,SACL1V,KAAK0V,QAAQrT,QAAQ,SAACsT,GAClBA,EAAMQ,KAAO/N,EAAK+N,QAMtBjC,EAAZnU,UAAAqV,6BAAI,WAAA,GAAJhN,GAAApI,KAEcoW,EAAsC,MAAlBpW,KAAKyU,WAAqBzU,KAAKyU,UAAUtU,QAAUH,KAAKuU,MAE9D,OAAhBvU,KAAK0V,SAAoBU,IACzBpW,KAAKyU,UAAY,KACjBzU,KAAK0V,QAAQrT,QAAQ,SAACsT,GAClBA,EAAML,QAAUlN,EAAKjI,QAAUwV,EAAMxV,MACjCwV,EAAML,UACNlN,EAAKqM,UAAYkB,sBArNrC9Q,KAAC+F,EAAAA,UAAD7F,OACIE,SAAU,iBACVD,SAAU,eACVe,WAAYiO,IACZ7O,MACIG,KAAQ,aACRD,MAAS,kBAEb4I,QAAS,oDAzDbpJ,KAAIuB,EAAAA,uCAmEJiO,SAAAxP,KAAKkC,EAAAA,SAGL2O,UAAA7Q,KAAK6B,EAAAA,gBAAL3B,MAAqB4B,EAAAA,WAAW,WAAM,MAAA0P,OAAkBC,aAAa,MAuCrEH,OAAAtR,KAAKiC,EAAAA,QAQLyP,gBAAA1R,KAAKiC,EAAAA,QAUL3G,QAAA0E,KAAKiC,EAAAA,QAmBLyO,WAAA1Q,KAAKiC,EAAAA,QASLD,WAAAhC,KAAKiC,EAAAA,QAQL0P,WAAA3R,KAAKiC,EAAAA,SAtKLoN,GA8DkCH,IAqNlC0C,GAAA,WAMI,QAAJA,GAAuB5J,GAAA7M,KAAvB6M,YAAuBA,EAzRvB,MAAA4J,MA4RaC,GACTjE,EAAWkE,EAAcF,oBAwJzB,QAAJJ,GACoBO,EACZ3J,EACQmH,EACAyC,GAJZ,GAAJzO,GAOQxI,EAPR2D,KAAAvD,KAOciN,IAPdjN,WAGgBoI,GAAhBgM,gBAAgBA,EACAhM,EAAhByO,iBAAgBA,EAtIhBzO,EAAA0O,UAAgC,eAAcnD,GAK9CvL,EAAAuK,GAA0BvK,EAAK0O,UAmG/B1O,EAAAiM,OAA6D,GAAIC,GAAAA,aAMjElM,EAAA2O,WAAyB,EAMzB3O,EAAA4O,UAAgC,EAShC5O,EAAAmM,OAA0B,KAG1BnM,EAAA6O,8BAAwD,aAWhD7O,EAAKwO,WAAaA,EAElBxO,EAAK6O,8BACDJ,EAAiBK,OAAO,SAACvE,EAAYwD,GAC7BxD,IAAOvK,EAAKuK,IAAMwD,IAAS/N,EAAK+N,OAChC/N,EAAKkN,SAAU,OAncnC,MAgTmC5V,GAAnC2W,EAAAzW,GAwBAC,OAAAC,eAAQuW,EAARtW,UAAA,eAAA,WAA6B,MAAOC,MAAKgX,UACzCjC,IAAI,SAAY5U,GACR,GAAMgX,GAAkB/W,EAAUD,EAE9BH,MAAKgX,WAAaG,IAClBnX,KAAKgX,SAAWG,EAEZA,GAAmBnX,KAAK4W,YAAc5W,KAAK4W,WAAWzW,QAAUH,KAAKG,MACrEH,KAAK4W,WAAWrB,SAAWvV,MACnBmX,GAAmBnX,KAAK4W,YAAc5W,KAAK4W,WAAWzW,QAAUH,KAAKG,QAG7EH,KAAK4W,WAAWrB,SAAW,MAG3B4B,GAEAnX,KAAK6W,iBAAiBO,OAAOpX,KAAK2S,GAAI3S,KAAKmW,MAE/CnW,KAAKoU,gBAAgBwB,iDAMjC/V,OAAAC,eAAQuW,EAARtW,UAAA,aAAA,WAAuB,MAAOC,MAAKuU,QACnCQ,IAAI,SAAU5U,GACFH,KAAKuU,SAAWpU,IAChBH,KAAKuU,OAASpU,EACS,MAAnBH,KAAK4W,aACA5W,KAAKsV,UAENtV,KAAKsV,QAAUtV,KAAK4W,WAAWzW,QAAUA,GAEzCH,KAAKsV,UACLtV,KAAK4W,WAAWrB,SAAWvV,yCAQ/CH,OAAAC,eAAQuW,EAARtW,UAAA,2BACQ,MAAOC,MAAKC,WAAiC,MAAnBD,KAAK4W,YAAsB5W,KAAK4W,WAAW/P,UAE7EkO,IAAI,SAAa5U,GACT,GAAMkX,GAAmBjX,EAAUD,EAE/BH,MAAKC,YAAcoX,IAEnBrX,KAAKC,UAAYoX,EACjBrX,KAAKoU,gBAAgBwB,iDAMjC/V,OAAAC,eAAQuW,EAARtW,UAAA,2BACQ,MAAOC,MAAK4U,WAAc5U,KAAK4W,YAAc5W,KAAK4W,WAAWJ,UAErEzB,IAAI,SAAa5U,GACTH,KAAK4U,UAAYxU,EAAUD,oCAKnCN,OAAAC,eAAQuW,EAARtW,UAAA,gCACQ,MAAOC,MAAK2U,gBAAmB3U,KAAK4W,YAAc5W,KAAK4W,WAAWL,eAAkB,SAE5FxB,IAAI,SAAkB5U,GACdH,KAAK2U,eAAiBxU,mCAqB1BN,OAAJC,eAAQuW,EAARtW,UAAA,eAAI,WAAwB,OAAUC,KAAK2S,IAAM3S,KAAK8W,WAAtD,0CAoCIT,EAAJtW,UAAAuN,SAAI,WACQtN,KAAK4W,aAEL5W,KAAKsV,QAAUtV,KAAK4W,WAAWzW,QAAUH,KAAKuU,OAE9CvU,KAAKmW,KAAOnW,KAAK4W,WAAWT,OAIpCE,EAAJtW,UAAAsR,gBAAI,aAEAgF,EAAJtW,UAAA0N,YAAI,WACIzN,KAAKiX,iCAITZ,EAAJtW,UAAAuX,MAAI,aAOAjB,EAAJtW,UAAA6V,aAAI,WAGI5V,KAAKoU,gBAAgBwB,gBAGzBS,EAAJtW,UAAAwX,aAAI,SAAa/W,GAQTA,EAAMgX,mBAGVnB,EAAJtW,UAAA0X,cAAI,SAAcjX,GAIVA,EAAMgX,iBAEN,IAAME,GAAoB1X,KAAK4W,YAAc5W,KAAKG,QAAUH,KAAK4W,WAAWzW,KAC5EH,MAAKsV,SAAU,EACftV,KAAKyV,kBAEDzV,KAAK4W,aACL5W,KAAK4W,WAAW/B,6BAA6B7U,KAAKG,OAClDH,KAAK4W,WAAWpB,QACZkC,GACA1X,KAAK4W,WAAWnB,oBAMpBY,EAAZtW,UAAA0V,gBAAI,WACIzV,KAAKqU,OAAO9P,KAAK,GAAIqP,IAAc5T,KAAMA,KAAKuU,yBArOtD1P,KAACC,EAAAA,UAADC,OACIE,SAAU,kBACVC,SAAJ,0lBACIM,QAAS,srCACTyI,QAAS,QAAS,YAClBxI,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,OACzCd,SAAU,gBACVG,MACIE,MAAO,kBACP+N,YAAa,KACbuE,2BAA4B,UAC5BC,4BAA6B,WAC7BjM,UAAW,+EA/OnB9G,KAAaqP,GAAb5N,aAAAzB,KAwXSgT,EAAAA,aAlbThT,KAA2CiH,EAAAA,aAD3CjH,KAAIuB,EAAAA,oBAQJvB,KAAQiT,EAAAA,+CA6SRnF,KAAA9N,KAAKiC,EAAAA,QAGLqP,OAAAtR,KAAKiC,EAAAA,QAGLiR,YAAAlT,KAAKiC,EAAAA,MAAL/B,MAAW,gBAGXiT,iBAAAnT,KAAKiC,EAAAA,MAAL/B,MAAW,qBAGXkT,kBAAApT,KAAKiC,EAAAA,MAAL/B,MAAW,sBAGXuQ,UAAAzQ,KAAKiC,EAAAA,QAyBL3G,QAAA0E,KAAKiC,EAAAA,QAkBLD,WAAAhC,KAAKiC,EAAAA,QAeL0P,WAAA3R,KAAKiC,EAAAA,QASLyP,gBAAA1R,KAAKiC,EAAAA,QAULoR,gBAAArT,KAAK2B,EAAAA,UAALzB,MAAe,WAOfsP,SAAAxP,KAAKkC,EAAAA,SAKLgQ,YAAAlS,KAAKiC,EAAAA,SAhaLuP,GAgTmCK,gCChTnC,sBASA7R,KAACuC,EAAAA,SAADrC,OACIsC,SAAWC,EAAAA,aAAc2E,EAAAA,WAAYkM,GACrC3Q,SAAW0M,GAAcmC,GAAe8B,GACxC1Q,cAAgByM,GAAcmC,QAZlC+B,gFCAA,MAUsC1Y,GAAtCwH,EAAAtH,kBALAiF,KAAC+F,EAAAA,UAAD7F,OACIE,SAAU,kBACVgJ,QAAS,2BACTlI,YAAcC,QAASqS,EAAAA,eAAgBnS,YAAagB,0BAGxDnG,OAAA8D,KAAKiC,EAAAA,MAAL/B,MAAW,iBAXXmC,GAUsCmR,EAAAA,2FCVtC,MAW0C3Y,GAA1CyH,EAAAvH,GAQIuH,EAAJpH,UAAAuY,eAAI,WACI,GAAMC,GAAavY,KAAKwY,UAAUzX,MAAQf,KAAKyY,MAAM5X,YAAYgH,SAC3D7H,KAAKyY,MAAM5X,YAAYgH,SAAS7H,KAAKwY,UAAUzX,MAC/C,KAEAkH,EAAQjI,KAAK0Y,QAAUH,CAE7B,OAAOtQ,GAAYA,EAAQjI,KAAK2Y,QAAW,EAAnD,KAA2D,sBAnB3D9T,KAAC+F,EAAAA,UAAD7F,OACIE,SAAU,sBACVc,YAAcC,QAAS4S,EAAAA,mBAAoB1S,YAAaiB,0BAK5Dc,QAAApD,KAAKiC,EAAAA,MAAL/B,MAAW,uBAGX8T,SAAAhU,KAAKiC,EAAAA,MAAL/B,MAAW,+BAjBXoC,GAW0CyR,EAAAA,mChBuEtC,QAAJhS,GACkBiG,EAEAiM,GAHd,GAAJ1Q,GAKQxI,EALR2D,KAAAvD,KAKc6M,EAAaiM,IAL3B9Y,WACkBoI,GAAlByE,YAAkBA,EAEAzE,EAAlB0Q,cAAkBA,EAtClB1Q,EAAA9C,KAA0C,WA8B1C8C,EAAA2Q,WAAiC,EAEjC3Q,EAAAnI,WAAiC,EACjCmI,EAAAqM,WAAiC,IAhFjC,MA8CyC/U,GAAzCkH,EAAAhH,GAIAC,OAAAC,eAAQ8G,EAAR7G,UAAA,2BACQ,MAAOC,MAAKC,eAGhB,SAAaE,GACT,GAAMgV,GAAW/U,EAAUD,EAEvBgV,KAAanV,KAAKC,YAClBD,KAAKC,UAAYkV,oCAK7BtV,OAAAC,eAAQ8G,EAAR7G,UAAA,2BACQ,MAAOC,MAAK8Y,cAAcE,iBAAmBhZ,KAAK8Y,cAAcE,gBAAgBC,WAAWjZ,QAAS,OAGxG,SAAaG,GACT,GAAM8Y,GAAa7Y,EAAUD,EAEzB8Y,KAAejZ,KAAKyU,WACpBzU,KAAKuC,YAAY0W,oCAmBzBrS,EAAJ7G,UAAAuX,MAAI,WACItX,KAAK6M,YAAYxB,cAAciM,QAE/BtX,KAAK8Y,cAAc7W,iBAAiBjC,OAGxC4G,EAAJ7G,UAAAgD,OAAI,WACI/C,KAAKuV,UAAYvV,KAAKuV,UAG1B3O,EAAJ7G,UAAAwC,YAAI,SAAYgT,GACJvV,KAAKyU,YAAcc,GAAavV,KAAK8Y,cAAcE,kBAEvDhZ,KAAKyU,UAAYc,EAEbA,EACAvV,KAAK8Y,cAAcE,gBAAgBE,OAAOlZ,MAE1CA,KAAK8Y,cAAcE,gBAAgBG,SAASnZ,QAMpD4G,EAAJ7G,UAAAqL,aAAI,WACQpL,KAAK6G,UAAY7G,KAAK+Y,YAE1B/Y,KAAK+Y,WAAY,IAGrBnS,EAAJ7G,UAAAyL,YAAI,WACIxL,KAAK+Y,WAAY,GAGrBnS,EAAJ7G,UAAAqZ,aAAI,WACQpZ,KAAK6G,UAET7G,KAAK8Y,cAAc7W,iBAAiBjC,sBArG5C6E,KAAC+F,EAAAA,UAAD7F,OACIC,SAAU,mBACVC,SAAU,sBACVE,MACIkU,SAAU,KACVC,sBAAuB,WACvBC,qBAAsB,YACtBC,uBAAwB,aACxBC,oBAAqB,qCACrBpU,MAAO,eAEPsG,UAAW,iBACXC,SAAU,gBAEV8N,UAAW,kBAEf3T,YACMC,QAAS2T,EAAAA,YAAazT,YAAaU,4CAlC7C/B,KAAeiH,EAAAA,aAyJfjH,KAAalF,GAAb2G,aAAAzB,KA9ES+U,EAAAA,OA8ET7U,MA9EgB4B,EAAAA,WAAW,WAAM,MAAAhH,8BArCjC2F,OAAAT,KAAKiC,EAAAA,QAELD,WAAAhC,KAAKiC,EAAAA,QAaLyO,WAAA1Q,KAAKiC,EAAAA,SA9DLF,GA8CyC+S,EAAAA,aAqF5B3S,GAAuB2P,EAAc5J,EAAc9G,EAAAA,UAEhEzB,GAAA,WACI,QAAJA,GACeqP,EACA3R,GADAlC,KAAf6T,OAAeA,EACA7T,KAAfkC,OAAeA,EAxIf,MAAAsC,MA4IAqV,GAAA,WACI,QAAJA,GACehG,EACA3R,GADAlC,KAAf6T,OAAeA,EACA7T,KAAfkC,OAAeA,EA/If,MAAA2X,qBAyMI,QAAJla,GACQma,EACAC,EACuB5M,EACA6M,EACG5X,GAL9B,GAAJgG,GAOQxI,EAPR2D,KAAAvD,KAOc8Z,EAAUC,IAPxB/Z,WA5BAoI,GAAAnI,WAAyB,EAwBzBmI,EAAA9D,iBAA0C,GAAIgQ,GAAAA,aAE9ClM,EAAA3D,gBAAyC,GAAI6P,GAAAA,aAWrClM,EAAK+E,SAAWsE,SAAStE,IAAa,EAEtC/E,EAAK4R,SAAwB,OAAbA,GAA2B5Z,EAAU4Z,GACrD5R,EAAKhG,WAA4B,OAAfA,GAA6BhC,EAAUgC,GAEzDgG,EAAK4Q,gBAAkB,GAAIiB,GAAAA,eAAoC7R,EAAK4R;qDAvN5E,MAkKwCta,GAAxCC,EAAAC,GAiBAC,OAAAC,eAAQH,EAARI,UAAA,2BACQ,MAAOC,MAAKC,eAGhB,SAAaC,GACT,GAAMC,GAAQC,EAAUF,EAEpBF,MAAKC,YAAcE,IACnBH,KAAKC,UAAYE,EAEbH,KAAKC,UACLI,QAAQC,IAAI,4BAEZD,QAAQC,IAAI,6DA0BxBX,EAAJI,UAAAQ,WAAI,SAAWC,GAGP,OAFgBA,EAAMC,SAGlB,IAAKC,GAAAA,WACGV,KAAKW,YAAYC,YACjBZ,KAAKa,YAAYC,SAASd,KAAKW,YAAYC,WAAWG,MAG1DP,EAAMQ,gBAEN,MACJ,KAAKC,GAAAA,YACGjB,KAAKW,YAAYC,YACjBZ,KAAKa,YAAYK,OAAOlB,KAAKW,YAAYC,WAAWG,MAExDP,EAAMQ,gBAEN,MACJ,KAAKG,GAAAA,MACL,IAAKC,GAAAA,MACDpB,KAAKqB,sBAELb,EAAMQ,gBAEN,MACJ,KAAKM,GAAAA,KACDjB,QAAQC,IAAI,gCACZE,EAAMQ,gBAEN,MACJ,KAAKO,GAAAA,IACDlB,QAAQC,IAAI,+BACZE,EAAMQ,gBAEN,MACJ,KAAKQ,GAAAA,QACDnB,QAAQC,IAAI,0DAEZE,EAAMQ,gBAEN,MACJ,KAAKS,GAAAA,UACDpB,QAAQC,IAAI,yDAEZE,EAAMQ,gBAEN,MACJ,SACIhB,KAAKW,YAAYe,UAAUlB,KAIvCb,EAAJI,UAAA4B,mBAAI,WACI3B,KAAKW,YAAc,GAAIiB,GAAAA,gBAAqC5B,KAAK6B,SAC5DC,gBACAC,yBAAwB,GACxBC,0BAA0B,OAGnCrC,EAAJI,UAAAkC,iBAAI,SAAiBC,GACblC,KAAKW,YAAYwB,iBAAiBD,GAE9BlC,KAAKoC,aACLpC,KAAK6B,QAAQQ,QAAQ,SAACC,GAAS,MAAAA,GAAKC,aAAY,KAChDL,EAAOK,aAAY,IAGvBvC,KAAKwC,qBAAqBN,IAI9BvC,EAAJI,UAAAsB,oBAAI,WACI,GAAMoB,GAAezC,KAAKW,YAAY+B,eAEtC,IAAoB,MAAhBD,GAAwBzC,KAAK2C,cAAcF,GAAe,CAC1D,GAAMG,GAAqC5C,KAAK6B,QAAQgB,UAAUJ,EAE9DG,IAAiB5C,KAAK8C,iBAAiBF,KACvCA,EAAcG,SAGd/C,KAAKgD,iBAAiBJ,MAKlCjD,EAAJI,UAAAkD,kBAAI,SACIlC,EACAmC,EACAC,EACAC,OAFR,KAAAF,IAAQA,EAAgClD,KAAKqD,iBAC7C,KAAAF,IAAQA,EAAqBnD,KAAKsD,YAAYH,eAGtCvD,EAARG,UAAckD,kBAAdM,KAAAvD,KAAgCe,EAAMmC,EAAYC,EAAeC,EAEzD,IAAMI,KAENL,GAAcM,eAAepB,QAAQ,SAACqB,GAClC,GAAMC,GAAUD,EAAKE,GAErBD,GAAQE,MAAMxB,QAAQ,SAACyB,GACnB,GAAIH,EAAQI,qBAAuBD,EAAKE,gBAAiB,CACrD,GAAMC,GAAgBP,EAAKG,MAAMC,EAAKI,UAEtCV,GAAiBW,KAAKF,EAA0B,eAKxDjE,KAAK6B,UACL7B,KAAK6B,QAAQuC,MAAMZ,GACnBxD,KAAK6B,QAAQwC,oBAIrB1E,EAAJI,UAAAyC,qBAAI,SAAqBN,GACjBlC,KAAKsE,iBAAiBC,KAAK,GAAIC,IAAuBxE,KAAMkC,KAGhEvC,EAAJI,UAAAiD,iBAAI,SAAiBd,GACblC,KAAKyE,gBAAgBF,KAAK,GAAIC,IAAuBxE,KAAMkC,KAQvDvC,EAAZI,UAAA4C,cAAA,SAA0B+B,GAClB,MAAOA,IAAS,GAAKA,EAAQ1E,KAAK6B,QAAQ8C,QAGtChF,EAAZI,UAAA+C,iBAAA,SAA6B8B,GACrB,OAAO,kBA5MfC,KAACC,EAAAA,UAADC,OACIC,SAAU,kBACVC,SAAU,oBACVC,SAAU,kDACVC,MACIC,aAAc,WACdC,MAAO,UACPC,KAAM,iBACNC,YAAa,sBAEjBC,QAAS,4ZACTC,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,OACzCC,YAAcC,QAASC,EAAAA,QAASC,YAAavG,4CA1JjDkF,KAAIsB,EAAAA,kBAFJtB,KAAIuB,EAAAA,oBAwMJvB,SAAAwB,GAAAC,aAAAzB,KAAS0B,EAAAA,UAATxB,MAAmB,gBACnBF,SAAAwB,GAAAC,aAAAzB,KAAS0B,EAAAA,UAATxB,MAAmB,gBACnBF,SAAAwB,GAAAC,aAAAzB,KAAS0B,EAAAA,UAATxB,MAAmB,sCAzCnBzB,cAAAuB,KAAK2B,EAAAA,UAALzB,MAAe0B,EAAAA,qBAEf5E,UAAAgD,KAAK6B,EAAAA,gBAAL3B,MAAqB4B,EAAAA,WAAW,WAAM,MAAAC,SAWtCC,WAAAhC,KAAKiC,EAAAA,QAmBLxC,mBAAAO,KAAKkC,EAAAA,SAELtC,kBAAAI,KAAKkC,EAAAA,UAvMLpH,GAkKwCqH,ICxJlCC,IACFC,GACAC,GACAxH,GACAiH,gCAdJ,sBAiBA/B,KAACuC,EAAAA,SAADrC,OACIsC,SAAUC,EAAAA,aAAcC,EAAAA,eACxBC,QAASP,GACTQ,aAAcR,OApBlBS,KCwCAC,GAAA,WAEI,QAAJA,GAAuBC,EACAC,EACAC,EACAC,GAHA/H,KAAvB4H,kBAAuBA,EACA5H,KAAvB6H,SAAuBA,EACA7H,KAAvB8H,aAAuBA,EACA9H,KAAvB+H,YAAuBA,EA7CvB,MAgDIJ,GAAJ5H,UAAAiI,aAAI,SAAalE,EAASmE,EACTC,EAAkBC,GAD/B,GAAJC,GAAApI,KAEcqI,EAAWrI,KAAK4H,kBAAkB9D,EAAMmE,EAa9C,OAZAC,GAAY/D,KAAKkE,GAEbrI,KAAK8H,aAAaO,IAClBrI,KAAK+H,YAAYjE,GAAMwE,KAAKC,EAAAA,KAAK,IAAIC,UAAU,SAACC,GAC5CA,EAASpG,QAAQ,SAACqG,EAAOhE,GACrB,GAAMiE,GAA4BR,EAAUS,OAC5CD,GAAexE,KAAKO,IAAU+D,EAAS9D,OAAS,GAChDyD,EAAKJ,aAAaU,EAAOT,EAAQ,EAAGC,EAAaS,OAKtDT,GAQXP,EAAJ5H,UAAA8I,aAAI,SAAaC,GAAb,GAAJV,GAAApI,KACckI,IAGN,OAFAY,GAAezG,QAAQ,SAACyB,GAAS,MAAAsE,GAAKJ,aAAalE,EAAM,EAAGoE,QAErDA,GAOXP,EAAJ5H,UAAAgJ,qBAAI,SAAqBlF,EAAYhD,GAAjC,GAAJuH,GAAApI,KACcgJ,KACAC,IAgBN,OAfAA,GAAc,IAAK,EAEnBpF,EAAMxB,QAAQ,SAACyB,GAEX,IAAK,GADD5C,IAAS,EACJgI,EAAI,EAAGA,GAAKd,EAAKP,SAAS/D,GAAOoF,IACtChI,EAASA,GAAU+H,EAAcC,EAGjChI,IAAU8H,EAAQ7E,KAAKL,GAEvBsE,EAAKN,aAAahE,KAClBmF,EAAcb,EAAKP,SAAS/D,GAAQ,GAAKjD,EAAYsI,WAAWrF,MAIjEkF,GApGfrB,KAgHAyB,GAAA,SAAAxJ,GAiBI,QAAJwJ,GAAwBvI,EACAwI,EACRC,OAAhB,KAAAA,IAAgBA,KAFZ,IAAJlB,GAGQxI,EAHR2D,KAAAvD,OAAAA,WAAwBoI,GAAxBvH,YAAwBA,EACAuH,EAAxBiB,cAAwBA,EAjBxBjB,EAAAmB,eAAqB,GAAIC,GAAAA,oBAEzBpB,EAAAqB,cAAoB,GAAID,GAAAA,oBAkBhBpB,EAAKsB,MAAQ,GAAIF,GAAAA,gBAAqBF,KArI9C,MAgHgD5J,GAAhD0J,EAAAxJ,GAOIC,OAAJC,eAAQsJ,EAARrJ,UAAA,YAAI,WACI,MAAOC,MAAK0J,MAAMvJ,WAGtB,SAASA,GACLH,KAAK0J,MAAMC,KAAKxJ,GAChBH,KAAKuJ,eAAeI,KAAK3J,KAAKqJ,cAAcR,aAAa7I,KAAKe,OAC9Df,KAAKa,YAAY+I,UAAY5J,KAAKuJ,eAAepJ,uCAUrDiJ,EAAJrJ,UAAA8J,QAAI,SAAQC,GAAR,GAAJ1B,GAAApI,KACc+J,GACFD,EAAiBE,WACjBhK,KAAKa,YAAYoJ,eAAuB,SACxCjK,KAAKuJ,eAGT,OAAOW,GAAAA,MAAfC,UAAA,GAAwBJ,GAASzB,KAAK8B,EAAAA,IAAI,WAI9B,MAHAhC,GAAKqB,cAAcE,KACfvB,EAAKiB,cAAcN,qBAAqBX,EAAKmB,eAAepJ,MAAOiI,EAAKvH,cAErEuH,EAAKqB,cAActJ,UAIlCiJ,EAAJrJ,UAAAsK,WAAI,aAvJJjB,GAgHgDkB,EAAAA,YCrGhDC,GAAA,SAAA3K,oEACAwI,GAAAsB,MAAY,GAAIF,GAAAA,sBAZhB,MAW+C9J,GAA/C6K,EAAA3K,GAMIC,OAAJC,eAAQyK,EAARxK,UAAA,YAAI,WACI,MAAOC,MAAK0J,MAAMvJ,WAGtB,SAASA,GACLH,KAAK0J,MAAMC,KAAKxJ,oCAGpBoK,EAAJxK,UAAA8J,QAAI,SAAQC,GAAR,GAAJ1B,GAAApI,IACQ,OAAOkK,GAAAA,MAAfC,UAAA,IAAyBL,EAAiBE,WAAYhK,KAAK0J,QAC9CpB,KAAK8B,EAAAA,IAAI,WAAM,MAAAhC,GAAKrH,SAG7BwJ,EAAJxK,UAAAsK,WAAI,aA9BJE,GAW+CD,EAAAA,YCRlCE,GAAU,GAAIC,GAAAA,QAAQ"}