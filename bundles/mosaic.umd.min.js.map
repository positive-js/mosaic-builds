{"version":3,"file":"mosaic.umd.min.js","sources":["../../src/lib/core/select/events.ts","../../src/lib/core/select/constants.ts","../../src/lib/autocomplete/autocomplete-trigger.directive.ts","../../src/lib/select/select.component.ts","../../src/lib/timepicker/timepicker.constants.ts","../../src/lib/sidepanel/sidepanel.service.ts","../../src/lib/sidepanel/sidepanel-directives.ts","../../src/lib/sidepanel/sidepanel.module.ts","../../src/lib/splitter/splitter.component.ts","../../src/lib/splitter/splitter.module.ts","../../src/lib/toggle/toggle.component.ts","../../src/lib/toggle/toggle.module.ts","../../src/lib/tooltip/tooltip.component.ts","../../src/lib/tooltip/tooltip.module.ts","../../src/lib/version.ts","../../src/lib/tree-select/tree-select.component.ts","../../src/lib/tree-select/tree-select.module.ts","../../src/lib/textarea/textarea.component.ts","../../src/lib/textarea/textarea.module.ts","../../src/lib/timepicker/timepicker.ts","../../src/lib/timepicker/timepicker.module.ts","../../src/lib/sidepanel/sidepanel-config.ts","../../src/lib/sidepanel/sidepanel-animations.ts","../../src/lib/sidepanel/sidepanel-container.component.ts","../../src/lib/sidepanel/sidepanel-ref.ts","../../src/lib/select/select.module.ts","../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs.module.ts","../../src/lib/tags/tag-default-options.ts","../../src/lib/tags/tag.component.ts","../../src/lib/tags/tag-list.component.ts","../../src/lib/tags/tag-input.ts","../../src/lib/tags/tag.module.ts","../../src/lib/tree/tree-selection.ts","../../src/lib/tree/tree.module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/modal/modal.service.ts","../../src/lib/modal/modal.module.ts","../../src/lib/navbar/navbar.component.ts","../../src/lib/navbar/navbar.module.ts","../../src/lib/progress-bar/progress-bar.component.ts","../../src/lib/progress-bar/progress-bar.module.ts","../../src/lib/progress-spinner/progress-spinner.component.ts","../../src/lib/progress-spinner/progress-spinner.module.ts","../../src/lib/radio/radio.component.ts","../../src/lib/radio/radio.module.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-option.ts","../../src/lib/list/list-selection.component.ts","../../src/lib/list/list.component.ts","../../src/lib/list/list.module.ts","../../src/lib/link/link.component.ts","../../src/lib/link/link.module.ts","../../src/lib/modal/modal-control.service.ts","../../src/lib/modal/modal-ref.class.ts","../../src/lib/modal/modal-util.ts","../../src/lib/modal/modal.component.ts","../../src/lib/modal/css-unit.pipe.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.component.ts","../../src/lib/divider/divider.module.ts","../../src/lib/dropdown/dropdown-content.ts","../../src/lib/dropdown/dropdown-panel.ts","../../src/lib/dropdown/dropdown-item.ts","../../src/lib/dropdown/dropdown-animations.ts","../../src/lib/dropdown/dropdown.component.ts","../../src/lib/dropdown/dropdown-trigger.ts","../../src/lib/dropdown/dropdown.module.ts","../../src/lib/layout/content.component.ts","../../src/lib/layout/footer.component.ts","../../src/lib/layout/header.component.ts","../../src/lib/layout/layout.component.ts","../../src/lib/layout/sidebar.component.ts","../../src/lib/layout/layout.module.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/stepperUtils.ts","../../src/lib/input/input.ts","../../src/lib/input/input-number-validators.ts","../../src/lib/input/input.module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/autocomplete/autocomplete.component.ts","../../src/lib/autocomplete/autocomplete-origin.directive.ts","../../src/lib/autocomplete/autocomplete.module.ts","../../src/lib/button/button.component.ts","../../src/lib/button/button.module.ts","../../src/lib/button-toggle/button-toggle.component.ts","../../src/lib/button-toggle/button-toggle.module.ts","../../src/lib/card/card.component.ts","../../src/lib/card/card.module.ts","../../src/lib/checkbox/checkbox-config.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/utils/utils.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/option/option.ts","../../src/lib/core/overlay/overlay-position-map.ts","../../src/lib/core/select/errors.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/dropdown/dropdown-errors.ts","../../src/lib/core/line/line.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/services/measure-scrollbar.service.ts","../../src/lib/core/option/optgroup.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/core/animation/fade-animations.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/select/animations.ts","../../src/lib/icon/icon.component.ts","../../src/lib/icon/icon.module.ts","../../src/lib/form-field/cleaner.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/form-field-number-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/stepper.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field.module.ts"],"sourcesContent":["export const selectEvents = 'selectEvents';\n","import { InjectionToken } from '@angular/core';\nimport { IScrollStrategy, Overlay, RepositionScrollStrategy } from '@ptsecurity/cdk/overlay';\n\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 224;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 1;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\n/* tslint:disable-next-line:no-magic-numbers */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MC_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-select-scroll-strategy');\n\n/** @docs-private */\nexport function mcSelectScrollStrategyProviderFactory(overlay: Overlay):\n    () => RepositionScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MC_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MC_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: mcSelectScrollStrategyProviderFactory\n};\n","import { DOCUMENT } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    forwardRef,\n    Host,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    Optional,\n    ViewContainerRef\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW } from '@ptsecurity/cdk/keycodes';\nimport {\n    FlexibleConnectedPositionStrategy,\n    Overlay,\n    OverlayConfig,\n    OverlayRef,\n    IPositionStrategy,\n    IScrollStrategy, IConnectedPosition\n} from '@ptsecurity/cdk/overlay';\nimport { TemplatePortal } from '@ptsecurity/cdk/portal';\nimport { ViewportRuler } from '@ptsecurity/cdk/scrolling';\nimport {\n    countGroupLabelsBeforeOption,\n    getOptionScrollPosition,\n    McOption,\n    McOptionSelectionChange\n} from '@ptsecurity/mosaic/core';\nimport { McFormField } from '@ptsecurity/mosaic/form-field';\nimport { Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable } from 'rxjs';\nimport { filter, take, switchMap, delay, tap, map } from 'rxjs/operators';\n\nimport { McAutocompleteOrigin } from './autocomplete-origin.directive';\nimport { McAutocomplete } from './autocomplete.component';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 32;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\nexport const AUTOCOMPLETE_BORDER_WIDTH: number = 2;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MC_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-autocomplete-scroll-strategy');\n\n// tslint:disable-next-line naming-convention\nexport function MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => IScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\nexport const MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McAutocompleteTrigger),\n    multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMcAutocompleteMissingPanelError(): Error {\n    return Error('Attempting to open an undefined instance of `mc-autocomplete`. ' +\n        'Make sure that the id passed to the `mcAutocomplete` is correct and that ' +\n        'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n    selector: `input[mcAutocomplete], textarea[mcAutocomplete]`,\n    host: {\n        class: 'mc-autocomplete-trigger',\n        '[attr.autocomplete]': 'autocompleteAttribute',\n        // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n        // a little earlier. This avoids issues where IE delays the focusing of the input.\n        '(focusin)': 'handleFocus()',\n        '(blur)': 'onTouched()',\n        '(input)': 'handleInput($event)',\n        '(keydown)': 'handleKeydown($event)',\n        '(click)': 'handleClick($event)'\n    },\n    exportAs: 'mcAutocompleteTrigger',\n    providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class McAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n    // @ts-ignore\n    readonly optionSelections: Observable<McOptionSelectionChange> = defer(() => {\n        if (this.autocomplete && this.autocomplete.options) {\n            return merge(...this.autocomplete.options.map((option) => option.onSelectionChange));\n        }\n\n        // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n        // Return a stream that we'll replace with the real one once everything is in place.\n        return this.zone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelections));\n    });\n\n    /** The currently active option, coerced to MatOption type. */\n    get activeOption(): McOption | null {\n        if (this.autocomplete && this.autocomplete.keyManager) {\n            return this.autocomplete.keyManager.activeItem;\n        }\n\n        return null;\n    }\n\n    get panelOpen(): boolean {\n        return this.overlayAttached && this.autocomplete.showPanel;\n    }\n\n    /** The autocomplete panel to be attached to this trigger. */\n    @Input('mcAutocomplete') autocomplete: McAutocomplete;\n\n    /**\n     * Reference relative to which to position the autocomplete panel.\n     * Defaults to the autocomplete trigger element.\n     */\n    @Input('mcAutocompleteConnectedTo') connectedTo: McAutocompleteOrigin;\n\n    /**\n     * `autocomplete` attribute to be set on the input element.\n     * @docs-private\n     */\n    @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     */\n    @Input('mcAutocompleteDisabled')\n    get autocompleteDisabled(): boolean {\n        return this._autocompleteDisabled;\n    }\n\n    set autocompleteDisabled(value: boolean) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n\n    private _autocompleteDisabled = false;\n\n    private overlayAttached: boolean = false;\n\n    private overlayRef: OverlayRef | null;\n\n    private portal: TemplatePortal;\n\n    private componentDestroyed = false;\n\n    private scrollStrategy: () => IScrollStrategy;\n\n    /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n    private previousValue: string | number | null;\n\n    /** Strategy that is used to position the panel. */\n    private positionStrategy: FlexibleConnectedPositionStrategy;\n\n    /** The subscription for closing actions (some are bound to document). */\n    private closingActionsSubscription: Subscription;\n\n    /** Subscription to viewport size changes. */\n    private viewportSubscription = Subscription.EMPTY;\n\n    /**\n     * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n     * closed autocomplete from being reopened if the user switches to another browser tab and then\n     * comes back.\n     */\n    private canOpenOnNextFocus = true;\n\n    /** Stream of keyboard events that can close the panel. */\n    private readonly closeKeyEventStream = new Subject<void>();\n\n    constructor(\n        private elementRef: ElementRef<HTMLInputElement>,\n        private viewContainerRef: ViewContainerRef,\n        private changeDetectorRef: ChangeDetectorRef,\n        private overlay: Overlay,\n        private zone: NgZone,\n        @Inject(MC_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n        @Optional() private dir: Directionality,\n        @Optional() @Host() private formField: McFormField,\n        @Optional() @Inject(DOCUMENT) private document: any,\n        // @breaking-change 8.0.0 Make `_viewportRuler` required.\n        private viewportRuler?: ViewportRuler\n    ) {\n        // tslint:disable-next-line no-typeof-undefined\n        if (typeof window !== 'undefined') {\n            zone.runOutsideAngular(() => {\n                window.addEventListener('blur', this.windowBlurHandler);\n            });\n        }\n\n        this.scrollStrategy = scrollStrategy;\n    }\n\n    ngOnDestroy() {\n        // tslint:disable-next-line no-typeof-undefined\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this.windowBlurHandler);\n        }\n\n        this.viewportSubscription.unsubscribe();\n        this.componentDestroyed = true;\n        this.destroyPanel();\n        this.closeKeyEventStream.complete();\n    }\n\n    /** `View -> model callback called when value changes` */\n    // tslint:disable-next-line no-empty\n    onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when autocomplete has been touched` */\n    // tslint:disable-next-line no-empty\n    onTouched: () => void = () => {};\n\n    /** Opens the autocomplete suggestion panel. */\n    openPanel(): void {\n        this.attachOverlay();\n    }\n\n    closePanel(): void {\n        if (!this.overlayAttached) { return; }\n\n        if (this.panelOpen) {\n            this.autocomplete.closed.emit();\n        }\n\n        this.autocomplete.isOpen = this.overlayAttached = false;\n\n        if (this.overlayRef && this.overlayRef.hasAttached()) {\n            this.overlayRef.detach();\n            this.closingActionsSubscription.unsubscribe();\n        }\n\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this.componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this.changeDetectorRef.detectChanges();\n        }\n    }\n\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n    updatePosition(): void {\n        if (this.overlayAttached) {\n            this.overlayRef!.updatePosition();\n        }\n    }\n\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    get panelClosingActions(): Observable<McOptionSelectionChange | null> {\n        return merge(\n            this.optionSelections,\n            this.autocomplete.keyManager.tabOut.pipe(filter(() => this.overlayAttached)),\n            this.closeKeyEventStream,\n            this.getOutsideClickStream(),\n            this.overlayRef ?\n                this.overlayRef.detachments().pipe(filter(() => this.overlayAttached)) :\n                observableOf()\n        ).pipe(\n            // Normalize the output so we return a consistent type.\n            map((event) => event instanceof McOptionSelectionChange ? event : null)\n        );\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any): void {\n        Promise.resolve(null).then(() => this.setTriggerValue(value));\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => {}): void {\n        this.onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => {}) {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.elementRef.nativeElement.disabled = isDisabled;\n    }\n\n    handleKeydown(event: KeyboardEvent): void {\n        // tslint:disable-next-line deprecation\n        const keyCode = event.keyCode;\n\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE) {\n            event.preventDefault();\n        }\n\n        if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n            this.activeOption.selectViaInteraction();\n            this.resetActiveItem();\n            event.preventDefault();\n        } else if (this.autocomplete) {\n            const prevActiveItem = this.autocomplete.keyManager.activeItem;\n\n            if (this.panelOpen || keyCode === TAB) {\n                this.autocomplete.onKeydown(event);\n            } else if (keyCode === DOWN_ARROW && this.canOpen()) {\n                this.openPanel();\n            }\n\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n            if (isArrowKey || this.autocomplete.keyManager.activeItem !== prevActiveItem) {\n                this.scrollToOption();\n            }\n        }\n    }\n\n    handleInput(event: KeyboardEvent): void {\n        const target = event.target as HTMLInputElement;\n        let value: number | string | null = target.value;\n\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value === '' ? null : parseFloat(value);\n        }\n\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this.previousValue !== value) {\n            this.previousValue = value;\n            this.onChange(value);\n\n            if (this.canOpen() && this.document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n\n    handleFocus(): void {\n        if (!this.canOpenOnNextFocus) {\n            this.canOpenOnNextFocus = true;\n        } else if (this.canOpen()) {\n            this.previousValue = this.elementRef.nativeElement.value;\n            this.attachOverlay();\n        }\n    }\n\n    handleClick($event: MouseEvent) {\n        if (this.canOpen() && this.document.activeElement === $event.target) {\n            this.openPanel();\n        }\n    }\n\n    /** Stream of clicks outside of the autocomplete panel. */\n    private getOutsideClickStream(): Observable<any> {\n        if (!this.document) { return observableOf(null); }\n\n        return fromEvent<MouseEvent>(this.document, 'click')\n            .pipe(filter((event) => {\n                const clickTarget = event.target as HTMLElement;\n                const formField = this.formField ?\n                    this.formField._elementRef.nativeElement : null;\n\n                return this.overlayAttached &&\n                    clickTarget !== this.elementRef.nativeElement &&\n                    (!formField || !formField.contains(clickTarget)) &&\n                    (!!this.overlayRef && !this.overlayRef.overlayElement.contains(clickTarget));\n            }));\n    }\n\n    /**\n     * Event handler for when the window is blurred. Needs to be an\n     * arrow function in order to preserve the context.\n     */\n    private windowBlurHandler = () => {\n        // If the user blurred the window while the autocomplete is focused, it means that it'll be\n        // refocused when they come back. In this case we want to skip the first focus event, if the\n        // pane was closed, in order to avoid reopening it unintentionally.\n        this.canOpenOnNextFocus = this.document.activeElement !== this.elementRef.nativeElement || this.panelOpen;\n    }\n\n    /**\n     * Given that we are not actually focusing active options, we must manually adjust scroll\n     * to reveal options below the fold. First, we find the offset of the option from the top\n     * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n     * the panel height + the option height, so the active option will be just visible at the\n     * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n     * will become the offset. If that offset is visible within the panel already, the scrollTop is\n     * not adjusted.\n     */\n    private scrollToOption(): void {\n        const index = this.autocomplete.keyManager.activeItemIndex || 0;\n        const labelCount = countGroupLabelsBeforeOption(index,\n            this.autocomplete.options, this.autocomplete.optionGroups);\n\n        const newScrollPosition = getOptionScrollPosition(\n            index + labelCount,\n            AUTOCOMPLETE_OPTION_HEIGHT,\n            this.autocomplete.getScrollTop(),\n            AUTOCOMPLETE_PANEL_HEIGHT\n        );\n\n        this.autocomplete.setScrollTop(newScrollPosition);\n    }\n\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    private subscribeToClosingActions(): Subscription {\n        const firstStable = this.zone.onStable.asObservable()\n            .pipe(take(1));\n        const optionChanges = this.autocomplete.options.changes\n            .pipe(\n                tap(() => this.positionStrategy.reapplyLastPosition()),\n                // Defer emitting to the stream until the next tick, because changing\n                // bindings in here will cause \"changed after checked\" errors.\n                delay(0)\n            );\n\n        // When the zone is stable initially, and when the option list changes...\n        return merge(firstStable, optionChanges)\n            .pipe(\n                // create a new stream of panelClosingActions, replacing any previous streams\n                // that were created, and flatten it so our stream only emits closing events...\n                switchMap(() => {\n                    this.resetActiveItem();\n                    this.autocomplete.setVisibility();\n\n                    if (this.panelOpen) {\n                        this.overlayRef!.updatePosition();\n                    }\n\n                    return this.panelClosingActions;\n                }),\n                // when the first closing event occurs...\n                take(1)\n            )\n            // set the value, close the panel, and complete.\n            .subscribe((event) => this.setValueAndClose(event));\n    }\n\n    /** Destroys the autocomplete suggestion panel. */\n    private destroyPanel(): void {\n        if (this.overlayRef) {\n            this.closePanel();\n            this.overlayRef.dispose();\n            this.overlayRef = null;\n        }\n    }\n\n    private setTriggerValue(value: any): void {\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n            this.autocomplete.displayWith(value) :\n            value;\n\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        const inputValue = toDisplay != null ? toDisplay : '';\n\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this.formField) {\n            this.formField._control.value = inputValue;\n        } else {\n            this.elementRef.nativeElement.value = inputValue;\n        }\n\n        this.previousValue = inputValue;\n    }\n\n    /** This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    private setValueAndClose(event: McOptionSelectionChange | null): void {\n        if (event && event.source) {\n            this.clearPreviousSelectedOption(event.source);\n            this.setTriggerValue(event.source.value);\n            this.onChange(event.source.value);\n            this.elementRef.nativeElement.focus();\n\n            this.autocomplete.emitSelectEvent(event.source);\n        }\n\n        this.closePanel();\n    }\n\n    /** Clear any previous selected option and emit a selection change event for this option */\n    private clearPreviousSelectedOption(skip: McOption) {\n        this.autocomplete.options.forEach((option) => {\n            if (option !== skip && option.selected) {\n                option.deselect();\n            }\n        });\n    }\n\n    private attachOverlay(): void {\n        if (!this.autocomplete) {\n            throw getMcAutocompleteMissingPanelError();\n        }\n\n        let overlayRef = this.overlayRef;\n\n        if (!overlayRef) {\n            this.portal = new TemplatePortal(this.autocomplete.template, this.viewContainerRef);\n            overlayRef = this.overlay.create(this.getOverlayConfig());\n            this.overlayRef = overlayRef;\n\n            // Use the `keydownEvents` in order to take advantage of\n            // the overlay event targeting provided by the CDK overlay.\n            overlayRef.keydownEvents().subscribe((event) => {\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                // tslint:disable-next-line deprecation\n                if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n                    this.resetActiveItem();\n                    this.closeKeyEventStream.next();\n                }\n            });\n\n            if (this.viewportRuler) {\n                this.viewportSubscription = this.viewportRuler.change().subscribe(() => {\n                    if (this.panelOpen && overlayRef) {\n                        overlayRef.updateSize({ width: this.getPanelWidth() });\n                    }\n                });\n            }\n        } else {\n            const position = overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n\n            // Update the trigger, panel width and direction, in case anything has changed.\n            position.setOrigin(this.getConnectedElement());\n            overlayRef.updateSize({ width: this.getPanelWidth() });\n        }\n\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this.portal);\n            this.closingActionsSubscription = this.subscribeToClosingActions();\n        }\n\n        const wasOpen = this.panelOpen;\n\n        this.autocomplete.setVisibility();\n        this.autocomplete.isOpen = this.overlayAttached = true;\n\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n\n    private getOverlayConfig(): OverlayConfig {\n        return new OverlayConfig({\n            positionStrategy: this.getOverlayPosition(),\n            scrollStrategy: this.scrollStrategy(),\n            width: this.getPanelWidth(),\n            direction: this.dir\n        });\n    }\n\n    private getOverlayPosition(): IPositionStrategy {\n        this.positionStrategy = this.overlay.position()\n            .flexibleConnectedTo(this.getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false)\n            .withPositions([\n                {\n                    originX: 'start',\n                    originY: 'bottom',\n                    overlayX: 'start',\n                    overlayY: 'top'\n                },\n                {\n                    originX: 'start',\n                    originY: 'top',\n                    overlayX: 'start',\n                    overlayY: 'bottom',\n\n                    // The overlay edge connected to the trigger should have squared corners, while\n                    // the opposite end has rounded corners. We apply a CSS class to swap the\n                    // border-radius based on the overlay position.\n                    panelClass: 'mc-autocomplete-panel-above'\n                }\n            ] as IConnectedPosition[]);\n\n        return this.positionStrategy;\n    }\n\n    private getConnectedElement(): ElementRef {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n\n        return this.formField ? this.formField.getConnectedOverlayOrigin() : this.elementRef;\n    }\n\n    private getPanelWidth(): number | string {\n        return this.autocomplete.panelWidth || this.getHostWidth() - AUTOCOMPLETE_BORDER_WIDTH;\n    }\n\n    private getHostWidth(): number {\n        return this.getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     */\n    private resetActiveItem(): void {\n        this.autocomplete.keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n    }\n\n    private canOpen(): boolean {\n        const element = this.elementRef.nativeElement;\n\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n}\n","/* tslint:disable:no-empty */\n\nimport {\n    AfterContentInit, AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Input,\n    isDevMode,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList, Renderer2,\n    Self,\n    SimpleChanges,\n    ViewChild, ViewChildren,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { ActiveDescendantKeyManager } from '@ptsecurity/cdk/a11y';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    RIGHT_ARROW,\n    SPACE,\n    UP_ARROW,\n    A\n} from '@ptsecurity/cdk/keycodes';\nimport {\n    CdkConnectedOverlay,\n    ViewportRuler\n} from '@ptsecurity/cdk/overlay';\nimport {\n    countGroupLabelsBeforeOption,\n    getOptionScrollPosition,\n    CanDisable,\n    CanDisableCtor,\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    HasTabIndex,\n    HasTabIndexCtor,\n    MC_OPTION_PARENT_COMPONENT,\n    McOptgroup,\n    McOption,\n    McOptionSelectionChange,\n    mixinDisabled,\n    mixinErrorState,\n    mixinTabIndex,\n    mcSelectAnimations,\n\n    SELECT_PANEL_INDENT_PADDING_X,\n    SELECT_PANEL_MAX_HEIGHT,\n    SELECT_PANEL_PADDING_X,\n    SELECT_PANEL_VIEWPORT_PADDING,\n\n    getMcSelectDynamicMultipleError,\n    getMcSelectNonFunctionValueError,\n    getMcSelectNonArrayValueError,\n    MC_SELECT_SCROLL_STRATEGY\n} from '@ptsecurity/mosaic/core';\nimport { McFormField, McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { McTag } from '@ptsecurity/mosaic/tags';\nimport { defer, merge, Observable, Subject } from 'rxjs';\nimport {\n    filter,\n    map,\n    startWith,\n    switchMap,\n    take,\n    takeUntil,\n    distinctUntilChanged\n} from 'rxjs/operators';\n\n\nlet nextUniqueId = 0;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 2;\n\n/** Change event object that is emitted when the select value has changed. */\nexport class McSelectChange {\n    constructor(public source: McSelect, public value: any) {}\n}\n\nexport class McSelectBase {\n    constructor(\n        public elementRef: ElementRef,\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {}\n}\n\nconst McSelectMixinBase: CanDisableCtor & HasTabIndexCtor & CanUpdateErrorStateCtor &\n    typeof McSelectBase = mixinTabIndex(mixinDisabled(mixinErrorState(McSelectBase)));\n\n\n@Directive({ selector: 'mc-select-trigger' })\nexport class McSelectTrigger {}\n\n\n@Component({\n    selector: 'mc-select',\n    exportAs: 'mcSelect',\n    templateUrl: 'select.html',\n    styleUrls: ['./select.css'],\n    inputs: ['disabled', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'tabIndex',\n        class: 'mc-select',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-select-invalid]': 'errorState',\n        '[class.mc-select-required]': 'required',\n        '(keydown)': 'handleKeydown($event)',\n        '(focus)': 'onFocus()',\n        '(blur)': 'onBlur()',\n        '(window:resize)': 'calculateHiddenItems()'\n    },\n    animations: [\n        mcSelectAnimations.transformPanel,\n        mcSelectAnimations.fadeInContent\n    ],\n    providers: [\n        { provide: McFormFieldControl, useExisting: McSelect },\n        { provide: MC_OPTION_PARENT_COMPONENT, useExisting: McSelect }\n    ]\n})\nexport class McSelect extends McSelectMixinBase implements\n    AfterContentInit, AfterViewInit, OnChanges, OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable,\n    HasTabIndex, McFormFieldControl<any>, CanUpdateErrorState {\n\n    /** A name for this control that can be used by `mc-form-field`. */\n    controlType = 'mc-select';\n\n    hiddenItems: number = 0;\n    oneMoreText: string = '...ещё';\n\n    /** The last measured value for the trigger's client bounding rect. */\n    triggerRect: ClientRect;\n\n    /** The cached font-size of the trigger element. */\n    triggerFontSize = 0;\n\n    /** Deals with the selection logic. */\n    selectionModel: SelectionModel<McOption>;\n\n    /** Manages keyboard events for options in the panel. */\n    keyManager: ActiveDescendantKeyManager<McOption>;\n\n    /** The IDs of child options to be passed to the aria-owns attribute. */\n    optionIds: string = '';\n\n    /** The value of the select panel's transform-origin property. */\n    transformOrigin: string = 'top';\n\n    /** Whether the panel's animation is done. */\n    panelDoneAnimating: boolean = false;\n\n    /** Emits when the panel element is finished transforming in. */\n    panelDoneAnimatingStream = new Subject<string>();\n\n    /** Strategy that will be used to handle scrolling while the select panel is open. */\n    scrollStrategy = this._scrollStrategyFactory();\n\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n    offsetY = 0;\n\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n    positions = [\n        {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top'\n        },\n        {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom'\n        }\n    ];\n\n    @ViewChild('trigger') trigger: ElementRef;\n\n    @ViewChild('panel') panel: ElementRef;\n\n    @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n    @ViewChildren(McTag) tags: QueryList<McTag>;\n\n    /** User-supplied override of the trigger element. */\n    @ContentChild(McSelectTrigger) customTrigger: McSelectTrigger;\n\n    /** All of the defined select options. */\n    @ContentChildren(McOption, { descendants: true }) options: QueryList<McOption>;\n\n    /** All of the defined groups of options. */\n    @ContentChildren(McOptgroup) optionGroups: QueryList<McOptgroup>;\n\n    /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n    @Input() panelClass: string | string[] | Set<string> | { [key: string]: any };\n\n    /** Object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Function used to sort the values in a select in multiple mode.\n     * Follows the same logic as `Array.prototype.sort`.\n     */\n    @Input() sortComparator: (a: McOption, b: McOption, options: McOption[]) => number;\n\n    /** Combined stream of all of the child options' change events. */\n    readonly optionSelectionChanges: Observable<McOptionSelectionChange> = defer(() => {\n        if (this.options) {\n            return merge(...this.options.map((option) => option.onSelectionChange));\n        }\n\n        return this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n    }) as Observable<McOptionSelectionChange>;\n\n    /** Event emitted when the select panel has been toggled. */\n    @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted when the select has been opened. */\n    @Output('opened') readonly openedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => o), map(() => {}));\n\n    /** Event emitted when the select has been closed. */\n    @Output('closed') readonly closedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => !o), map(() => {}));\n\n    /** Event emitted when the selected value has been changed by the user. */\n    @Output() readonly selectionChange: EventEmitter<McSelectChange> = new EventEmitter<McSelectChange>();\n\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    @Input()\n    get placeholder(): string {\n        return this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n\n        this.stateChanges.next();\n    }\n\n    private _placeholder: string;\n\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n\n        this.stateChanges.next();\n    }\n\n    private _required: boolean = false;\n\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        if (this.selectionModel) {\n            throw getMcSelectDynamicMultipleError();\n        }\n\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    private _multiple: boolean = false;\n\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith() {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        /* tslint:disable-next-line:strict-type-predicates */\n        if (typeof fn !== 'function') {\n            throw getMcSelectNonFunctionValueError();\n        }\n\n        this._compareWith = fn;\n\n        if (this.selectionModel) {\n            // A different comparator means the selection could change.\n            this.initializeSelection();\n        }\n    }\n\n    /** Value of the select control. */\n    @Input()\n    get value(): any {\n        return this._value;\n    }\n\n    set value(newValue: any) {\n        if (newValue !== this._value) {\n            this.writeValue(newValue);\n            this._value = newValue;\n        }\n    }\n\n    private _value: any;\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n        this.stateChanges.next();\n    }\n\n    private _id: string;\n\n    /** Whether the select is focused. */\n    get focused(): boolean {\n        return this._focused || this._panelOpen;\n    }\n\n    /**\n     * @deprecated Setter to be removed as this property is intended to be readonly.\n     * @breaking-change 8.0.0\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n\n    private _focused = false;\n\n    get panelOpen(): boolean {\n        return this._panelOpen;\n    }\n\n    private _panelOpen = false;\n\n    /** The scroll position of the overlay panel, calculated to center the selected option. */\n    private scrollTop = 0;\n\n    /** Unique id for this input. */\n    private readonly uid = `mc-select-${nextUniqueId++}`;\n\n    /** Emits whenever the component is destroyed. */\n    private readonly destroy = new Subject<void>();\n\n    constructor(\n        private readonly _viewportRuler: ViewportRuler,\n        private readonly _changeDetectorRef: ChangeDetectorRef,\n        private readonly _ngZone: NgZone,\n        private readonly _renderer: Renderer2,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        elementRef: ElementRef,\n        @Optional() private readonly _dir: Directionality,\n        @Optional() parentForm: NgForm,\n        @Optional() parentFormGroup: FormGroupDirective,\n        @Optional() private readonly _parentFormField: McFormField,\n        @Self() @Optional() public ngControl: NgControl,\n        @Attribute('tabindex') tabIndex: string,\n        @Inject(MC_SELECT_SCROLL_STRATEGY) private readonly _scrollStrategyFactory\n    ) {\n        super(elementRef, defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnInit() {\n        this.selectionModel = new SelectionModel<McOption>(this.multiple);\n        this.stateChanges.next();\n\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this.panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this.panelOpen) {\n                    this.scrollTop = 0;\n                    this.openedChange.emit(true);\n                } else {\n                    this.openedChange.emit(false);\n                    this.panelDoneAnimating = false;\n                    this.overlayDir.offsetX = 0;\n                    this._changeDetectorRef.markForCheck();\n                }\n            });\n    }\n\n    ngAfterContentInit() {\n        this.initKeyManager();\n\n        this.selectionModel.changed\n            .pipe(takeUntil(this.destroy))\n            .subscribe((event) => {\n                event.added.forEach((option) => option.select());\n                event.removed.forEach((option) => option.deselect());\n            });\n\n        this.options.changes\n            .pipe(startWith(null), takeUntil(this.destroy))\n            .subscribe(() => {\n                this.resetOptions();\n                this.initializeSelection();\n            });\n    }\n\n    ngAfterViewInit(): void {\n        this.tags.changes\n            .subscribe(() => {\n                setTimeout(() => this.calculateHiddenItems(), 0);\n            });\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) { this.updateErrorState(); }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes.disabled) {\n            this.stateChanges.next();\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroy.next();\n        this.destroy.complete();\n        this.stateChanges.complete();\n    }\n\n    /** `View -> model callback called when value changes` */\n    _onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when select has been touched` */\n    _onTouched = () => {};\n\n    /** Toggles the overlay panel open or closed. */\n    toggle(): void {\n        if (this.panelOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    /** Opens the overlay panel. */\n    open(): void {\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) { return; }\n\n        this.triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this.triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n        this._panelOpen = true;\n        this.keyManager.withHorizontalOrientation(null);\n        this.calculateOverlayPosition();\n        this.highlightCorrectOption();\n        this._changeDetectorRef.markForCheck();\n\n        // Set the font size on the panel element once it exists.\n        this._ngZone.onStable.asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                if (this.triggerFontSize && this.overlayDir.overlayRef && this.overlayDir.overlayRef.overlayElement) {\n                    this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this.triggerFontSize}px`;\n                }\n            });\n    }\n\n    /** Closes the overlay panel and focuses the host element. */\n    close(): void {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this.keyManager.withHorizontalOrientation(this.isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value: any): void {\n        if (this.options) {\n            this.setSelectionByValue(value);\n        }\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn: (value: any) => void): void {\n        this._onChange = fn;\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn: () => {}): void {\n        this._onTouched = fn;\n    }\n\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    get selected(): McOption | McOption[] {\n        return this.multiple ? this.selectionModel.selected : this.selectionModel.selected[0];\n    }\n\n    get triggerValue(): string {\n        if (this.empty) { return ''; }\n\n        if (this._multiple) {\n            const selectedOptions = this.selectionModel.selected.map((option) => option.viewValue);\n\n            if (this.isRtl()) { selectedOptions.reverse(); }\n\n            return selectedOptions.join(', ');\n        }\n\n        return this.selectionModel.selected[0].viewValue;\n    }\n\n    get triggerValues(): McOption[] {\n        if (this.empty) { return []; }\n\n        if (this._multiple) {\n            const selectedOptions = this.selectionModel.selected;\n\n            if (this.isRtl()) { selectedOptions.reverse(); }\n\n            return selectedOptions;\n        }\n\n        return [this.selectionModel.selected[0]];\n    }\n\n    get empty(): boolean {\n        return !this.selectionModel || this.selectionModel.isEmpty();\n    }\n\n    isRtl(): boolean {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n\n    handleKeydown(event: KeyboardEvent): void {\n        if (!this.disabled) {\n            if (this.panelOpen) {\n                this.handleOpenKeydown(event);\n            } else {\n                this.handleClosedKeydown(event);\n            }\n        }\n    }\n\n    /**\n     * When the panel content is done fading in, the panelDoneAnimating property is\n     * set so the proper class can be added to the panel.\n     */\n    onFadeInDone(): void {\n        this.panelDoneAnimating = this.panelOpen;\n        this._changeDetectorRef.markForCheck();\n    }\n\n    onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    onBlur() {\n        this._focused = false;\n\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    onAttached(): void {\n        this.overlayDir.positionChange\n            .pipe(take(1))\n            .subscribe(() => {\n                this._changeDetectorRef.detectChanges();\n                this.calculateOverlayOffsetX();\n                this.panel.nativeElement.scrollTop = this.scrollTop;\n            });\n    }\n\n    /** Returns the theme to be used on the panel. */\n    getPanelTheme(): string {\n        return this._parentFormField ? `mc-${this._parentFormField.color}` : '';\n    }\n\n    /** Focuses the select element. */\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    calculateOverlayScroll(selectedIndex: number, scrollBuffer: number, maxScroll: number): number {\n        const itemHeight = this.getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n\n        /* tslint:disable-next-line:no-magic-numbers */\n        const halfOptionHeight = itemHeight / 2;\n\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n\n    /** Invoked when an option is clicked. */\n    onRemoveMatcherItem(option: McOption, $event): void {\n        $event.stopPropagation();\n\n        option.deselect();\n    }\n\n    calculateHiddenItems(): void {\n        if (this.empty || !this.multiple) { return; }\n\n        let visibleItems: number = 0;\n        const totalItemsWidth = this.getTotalItemsWidthInMatcher();\n        let totalVisibleItemsWidth: number = 0;\n        const itemMargin: number = 4;\n\n        this.tags.forEach((tag) => {\n            if (tag.nativeElement.offsetTop < tag.nativeElement.offsetHeight) {\n                totalVisibleItemsWidth += tag.nativeElement.getBoundingClientRect().width + itemMargin;\n                visibleItems++;\n            }\n        });\n\n        this.hiddenItems = (this.selected as ArrayLike<McOption>).length - visibleItems;\n\n        if (this.hiddenItems) {\n            const itemsCounter = this.trigger.nativeElement.querySelector('.mc-select__match-hidden-text');\n            const matcherList = this.trigger.nativeElement.querySelector('.mc-select__match-list');\n\n            const itemsCounterShowed = itemsCounter.offsetTop < itemsCounter.offsetHeight;\n            // const itemsCounterWidth: number = itemsCounter.getBoundingClientRect().width;\n            const itemsCounterWidth: number = 86;\n\n            const matcherListWidth: number = matcherList.getBoundingClientRect().width;\n            const matcherWidth: number = matcherListWidth + itemsCounterWidth;\n\n            if (itemsCounterShowed && (totalItemsWidth < matcherWidth)) { this.hiddenItems = 0; }\n\n            if (\n                totalVisibleItemsWidth === matcherListWidth ||\n                (totalVisibleItemsWidth + itemsCounterWidth) < matcherListWidth\n            ) {\n                this._changeDetectorRef.markForCheck();\n\n                return ;\n            } else if (!itemsCounterShowed && (totalItemsWidth + itemsCounterWidth) > matcherWidth) {\n                this.hiddenItems++;\n            }\n        }\n\n        this._changeDetectorRef.markForCheck();\n    }\n\n    private getTotalItemsWidthInMatcher(): number {\n        const triggerClone = this.trigger.nativeElement.cloneNode(true);\n        triggerClone.querySelector('.mc-select__match-hidden-text').remove();\n\n        this._renderer.setStyle(triggerClone, 'position', 'absolute');\n        this._renderer.setStyle(triggerClone, 'visibility', 'hidden');\n        this._renderer.setStyle(triggerClone, 'top', '-100%');\n        this._renderer.setStyle(triggerClone, 'left', '0');\n\n        this._renderer.appendChild(this.trigger.nativeElement, triggerClone);\n\n        let totalItemsWidth: number = 0;\n        const itemMargin: number = 4;\n        triggerClone.querySelectorAll('mc-tag').forEach((item) => {\n            totalItemsWidth += item.getBoundingClientRect().width as number + itemMargin;\n        });\n\n        triggerClone.remove();\n\n        return totalItemsWidth;\n    }\n\n    /** Handles keyboard events while the select is closed. */\n    private handleClosedKeydown(event: KeyboardEvent): void {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n        // Open the select on ALT + arrow key to match the native <select>\n        if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        } else if (!this.multiple) {\n            this.keyManager.onKeydown(event);\n        }\n    }\n\n    /** Handles keyboard events when the selected is open. */\n    private handleOpenKeydown(event: KeyboardEvent): void {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const manager = this.keyManager;\n\n        if (keyCode === HOME || keyCode === END) {\n            event.preventDefault();\n\n            if (keyCode === HOME) {\n                manager.setFirstItemActive();\n            } else {\n                manager.setLastItemActive();\n            }\n\n        } else if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n        } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n            event.preventDefault();\n            manager.activeItem.selectViaInteraction();\n        } else if (this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some((option) => !option.selected);\n            this.options.forEach((option) => {\n                if (hasDeselectedOptions && !option.disabled) {\n                    option.select();\n                } else {\n                    option.deselect();\n                }\n            });\n        } else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n\n            manager.onKeydown(event);\n\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem.selectViaInteraction();\n            }\n        }\n    }\n\n    private initializeSelection(): void {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this.setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n        });\n    }\n\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    private setSelectionByValue(value: any | any[]): void {\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw getMcSelectNonArrayValueError();\n            }\n\n            this.selectionModel.clear();\n            value.forEach((currentValue: any) => this.selectValue(currentValue));\n            this.sortValues();\n        } else {\n            this.selectionModel.clear();\n            const correspondingOption = this.selectValue(value);\n\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this.keyManager.setActiveItem(correspondingOption);\n            }\n        }\n\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    private selectValue(value: any): McOption | undefined {\n        const correspondingOption = this.options.find((option: McOption) => {\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            } catch (error) {\n                if (isDevMode()) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n\n                return false;\n            }\n        });\n\n        if (correspondingOption) {\n            this.selectionModel.select(correspondingOption);\n        }\n\n        return correspondingOption;\n    }\n\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    private initKeyManager() {\n        this.keyManager = new ActiveDescendantKeyManager<McOption>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this.isRtl() ? 'rtl' : 'ltr');\n\n        this.keyManager.tabOut\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            });\n\n        this.keyManager.change\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this._panelOpen && this.panel) {\n                    this.scrollActiveOptionIntoView();\n                } else if (!this._panelOpen && !this.multiple && this.keyManager.activeItem) {\n                    this.keyManager.activeItem.selectViaInteraction();\n                }\n            });\n    }\n\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    private resetOptions(): void {\n        const changedOrDestroyed = merge(this.options.changes, this.destroy);\n\n        this.optionSelectionChanges\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe((event) => {\n                this.onSelect(event.source, event.isUserInput);\n\n                if (event.isUserInput && !this.multiple && this._panelOpen) {\n                    this.close();\n                    this.focus();\n                }\n            });\n\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map((option) => option.stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n                this._changeDetectorRef.markForCheck();\n                this.stateChanges.next();\n            });\n\n        this.setOptionIds();\n    }\n\n    /** Invoked when an option is clicked. */\n    private onSelect(option: McOption, isUserInput: boolean): void {\n        const wasSelected = this.selectionModel.isSelected(option);\n\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this.selectionModel.clear();\n            this.propagateChanges(option.value);\n        } else {\n            if (option.selected) {\n                this.selectionModel.select(option);\n            } else {\n                this.selectionModel.deselect(option);\n            }\n\n            if (isUserInput) {\n                this.keyManager.setActiveItem(option);\n            }\n\n            if (this.multiple) {\n                this.sortValues();\n\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mc-option`.\n                    this.focus();\n                }\n            }\n        }\n\n        if (wasSelected !== this.selectionModel.isSelected(option)) {\n            this.propagateChanges();\n        }\n\n        this.stateChanges.next();\n    }\n\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    private sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n\n            this.selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n\n    /** Emits change event to set the model value. */\n    private propagateChanges(fallbackValue?: any): void {\n        let valueToEmit: any = null;\n\n        if (this.multiple) {\n            valueToEmit = (this.selected as McOption[]).map((option) => option.value);\n        } else {\n            valueToEmit = this.selected ? (this.selected as McOption).value : fallbackValue;\n        }\n\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(new McSelectChange(this, valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /** Records option IDs to pass to the aria-owns property. */\n    private setOptionIds() {\n        this.optionIds = this.options.map((option) => option.id).join(' ');\n    }\n\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    private highlightCorrectOption(): void {\n        if (this.keyManager) {\n            if (this.empty) {\n                this.keyManager.setFirstItemActive();\n            } else {\n                this.keyManager.setActiveItem(this.selectionModel.selected[0]);\n            }\n        }\n    }\n\n    /** Scrolls the active option into view. */\n    private scrollActiveOptionIntoView(): void {\n        const activeOptionIndex = this.keyManager.activeItemIndex || 0;\n        const labelCount = countGroupLabelsBeforeOption(activeOptionIndex, this.options, this.optionGroups);\n\n        this.panel.nativeElement.scrollTop = getOptionScrollPosition(\n            activeOptionIndex + labelCount,\n            this.getItemHeight(),\n            this.panel.nativeElement.scrollTop,\n            SELECT_PANEL_MAX_HEIGHT\n        );\n    }\n\n    /** Gets the index of the provided option in the option list. */\n    private getOptionIndex(option: McOption): number | undefined {\n        /* tslint:disable-next-line */\n        return this.options.reduce((result: number, current: McOption, index: number) => {\n            /* tslint:disable-next-line:strict-type-predicates */\n            return result === undefined ? (option === current ? index : undefined) : result;\n        }, undefined);\n    }\n\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    private calculateOverlayPosition(): void {\n        const itemHeight = this.getItemHeight();\n        const items = this.getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n\n        // If no value is selected we open the popup to the first item.\n        let selectedOptionOffset =\n            this.empty ? 0 : this.getOptionIndex(this.selectionModel.selected[0])!;\n\n        selectedOptionOffset += countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        /* tslint:disable-next-line:no-magic-numbers */\n        const scrollBuffer = panelHeight / 2;\n        this.scrollTop = this.calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this.offsetY = this.calculateOverlayOffsetY();\n\n        this.checkOverlayWithinViewport(maxScroll);\n    }\n\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    private calculateOverlayOffsetX(): void {\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const isRtl = this.isRtl();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const paddingWidth = SELECT_PANEL_PADDING_X * 2;\n        let offsetX: number;\n\n        const selected = this.selectionModel.selected[0] || this.options.first;\n        offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n\n        // Invert the offset in LTR.\n        if (!isRtl) { offsetX *= -1; }\n\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        } else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    private calculateOverlayOffsetY(): number {\n        // const itemHeight = this.getItemHeight();\n        // const optionHeightAdjustment = (itemHeight - this.triggerRect.height) / 2;\n\n        // todo I'm not sure that we will use it\n        return 0;\n        // return Math.round(-optionHeightAdjustment);\n    }\n\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    private checkOverlayWithinViewport(maxScroll: number): void {\n        const itemHeight = this.getItemHeight();\n        const viewportSize = this._viewportRuler.getViewportSize();\n\n        const topSpaceAvailable = this.triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable =\n            viewportSize.height - this.triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n        const panelHeightTop = Math.abs(this.offsetY);\n        const totalPanelHeight =\n            Math.min(this.getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this.triggerRect.height;\n\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this.adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        } else if (panelHeightTop > topSpaceAvailable) {\n            this.adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        } else {\n            this.transformOrigin = this.getOriginBasedOnOption();\n        }\n    }\n\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    private adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this.scrollTop -= distanceBelowViewport;\n        this.offsetY -= distanceBelowViewport;\n        this.transformOrigin = this.getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this.scrollTop <= 0) {\n            this.scrollTop = 0;\n            this.offsetY = 0;\n            this.transformOrigin = `50% bottom 0px`;\n        }\n    }\n\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    private adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number, maxScroll: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this.scrollTop += distanceAboveViewport;\n        this.offsetY += distanceAboveViewport;\n        this.transformOrigin = this.getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this.scrollTop >= maxScroll) {\n            this.scrollTop = maxScroll;\n            this.offsetY = 0;\n            this.transformOrigin = `50% top 0px`;\n\n            return;\n        }\n    }\n\n    /** Sets the transform origin point based on the selected option. */\n    private getOriginBasedOnOption(): string {\n        const itemHeight = this.getItemHeight();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const optionHeightAdjustment = (itemHeight - this.triggerRect.height) / 2;\n        /* tslint:disable-next-line:no-magic-numbers */\n        const originY = Math.abs(this.offsetY) - optionHeightAdjustment + itemHeight / 2;\n\n        return `50% ${originY}px 0px`;\n    }\n\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    private getItemCount(): number {\n        return this.options.length + this.optionGroups.length;\n    }\n\n    /** Calculates the height of the select's options. */\n    private getItemHeight(): number {\n        // todo доделать\n        /* tslint:disable-next-line:no-magic-numbers */\n        return 32;\n        // return this.triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n}\n","export enum TimeParts {\n    hours,\n    minutes,\n    seconds\n}\n\nexport enum TimeFormats {\n    HHmmss = 'HH:mm:ss',\n    HHmm = 'HH:mm'\n}\n\nexport const TIMEFORMAT_PLACEHOLDERS: { [timeFormat: string]: string } = {\n    [TimeFormats.HHmmss]: '  :  :  ',\n    [TimeFormats.HHmm]: '  :  '\n};\n\nexport const DEFAULT_TIME_FORMAT: TimeFormats = TimeFormats.HHmm;\n\nexport const HOURS_MINUTES_SECONDS_REGEXP =\n    new RegExp(/^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]|[0-9]):([0-5][0-9]|[0-9])?$/);\nexport const HOURS_MINUTES_REGEXP = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]|[0-9])?$/;\nexport const HOURS_ONLY_REGEXP = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):?$/;\n\nexport const SECONDS_PER_MINUTE: number = 59;\nexport const MINUTES_PER_HOUR: number = 59;\nexport const HOURS_PER_DAY: number = 23;\n\n// TODO Move it to common CDK\nexport const ARROW_UP_KEYCODE: string = 'ArrowUp';\nexport const ARROW_DOWN_KEYCODE: string = 'ArrowDown';\nexport const ARROW_LEFT_KEYCODE: string = 'ArrowLeft';\nexport const ARROW_RIGHT_KEYCODE: string = 'ArrowRight';\n","import {\n    ComponentRef,\n    Inject,\n    Injectable,\n    InjectionToken,\n    Injector, OnDestroy,\n    Optional,\n    SkipSelf,\n    TemplateRef\n} from '@angular/core';\nimport { Overlay, OverlayConfig, OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal, IComponentType, PortalInjector, TemplatePortal } from '@ptsecurity/cdk/portal';\n\nimport { MC_SIDEPANEL_DATA, McSidepanelConfig } from './sidepanel-config';\nimport {\n    McSidepanelContainerComponent,\n    MC_SIDEPANEL_WITH_INDENT,\n    MC_SIDEPANEL_WITH_SHADOW\n} from './sidepanel-container.component';\nimport { McSidepanelRef } from './sidepanel-ref';\n\n\n/** Injection token that can be used to specify default sidepanel options. */\nexport const MC_SIDEPANEL_DEFAULT_OPTIONS =\n    new InjectionToken<McSidepanelConfig>('mc-sidepanel-default-options');\n\n@Injectable()\nexport class McSidepanelService implements OnDestroy {\n    private openedSidepanelsAtThisLevel: McSidepanelRef[] = [];\n\n    /** Keeps track of the currently-open sidepanels. */\n    get openedSidepanels(): McSidepanelRef[] {\n        return this.parentSidepanelService ? this.parentSidepanelService.openedSidepanels :\n            this.openedSidepanelsAtThisLevel;\n    }\n\n    constructor(\n        private overlay: Overlay,\n        private injector: Injector,\n        @Optional() @Inject(MC_SIDEPANEL_DEFAULT_OPTIONS) private defaultOptions: McSidepanelConfig,\n        @Optional() @SkipSelf() private parentSidepanelService: McSidepanelService) {\n    }\n\n    ngOnDestroy() {\n        // Only close the sidepanels at this level on destroy\n        // since the parent service may still be active.\n        this.closeSidepanels(this.openedSidepanelsAtThisLevel);\n    }\n\n    open<T, D = any>(componentOrTemplateRef: IComponentType<T> | TemplateRef<T>,\n                     config?: McSidepanelConfig<D>): McSidepanelRef<T> {\n        const fullConfig = {\n            ...(this.defaultOptions || new McSidepanelConfig()),\n            ...config\n        };\n\n        if (fullConfig.id && this.getSidepanelById(fullConfig.id)) {\n            throw Error(`Sidepanel with id \"${fullConfig.id}\" exists already. The sidepanel id must be unique.`);\n        }\n\n        const overlayRef = this.createOverlay(fullConfig);\n        const container = this.attachContainer(overlayRef, fullConfig);\n        const ref = new McSidepanelRef(container, overlayRef, fullConfig);\n\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n                $implicit: fullConfig.data,\n                sidepanelRef: ref\n            } as any));\n        } else {\n            const injector = this.createInjector(fullConfig, ref, container);\n            const portal = new ComponentPortal(componentOrTemplateRef, undefined, injector);\n            const contentRef = container.attachComponentPortal(portal);\n\n            ref.instance = contentRef.instance;\n        }\n\n        this.openedSidepanels.push(ref);\n        ref.afterClosed().subscribe(() => this.removeOpenSidepanel(ref));\n        container.enter();\n\n        return ref;\n    }\n\n    /**\n     * Closes all of the currently-open sidepanels.\n     */\n    closeAll(): void {\n        this.closeSidepanels(this.openedSidepanels);\n    }\n\n    /**\n     * Finds an open sidepanel by its id.\n     * @param id ID to use when looking up the sidepanel.\n     */\n    getSidepanelById(id: string): McSidepanelRef | undefined {\n        return this.openedSidepanels.find((sidepanel) => sidepanel.id === id);\n    }\n\n    /**\n     * Attaches the sidepanel container component to the overlay.\n     */\n    private attachContainer(overlayRef: OverlayRef, config: McSidepanelConfig): McSidepanelContainerComponent {\n        const openedSidepanelsWithSamePosition = this.getOpenedSidepanelsWithSamePosition(config);\n\n        const injector = new PortalInjector(this.injector, new WeakMap<any>([\n            [McSidepanelConfig, config],\n            [MC_SIDEPANEL_WITH_INDENT, openedSidepanelsWithSamePosition.length >= 1],\n            [MC_SIDEPANEL_WITH_SHADOW, openedSidepanelsWithSamePosition.length < 2] // tslint:disable-line\n        ]));\n\n        const containerPortal = new ComponentPortal(McSidepanelContainerComponent, undefined, injector);\n        const containerRef: ComponentRef<McSidepanelContainerComponent> = overlayRef.attach(containerPortal);\n\n        return containerRef.instance;\n    }\n\n    /**\n     * Creates a custom injector to be used inside the sidepanel. This allows a component loaded inside\n     * of a sidepanel to close itself and, optionally, to return a value.\n     * @param config Config object that is used to construct the sidepanel.\n     * @param sidepanelRef Reference to the sidepanel.\n     * @param sidepanelContainer Sidepanel container element that wraps all of the contents.\n     * @returns The custom injector that can be used inside the sidepanel.\n     */\n    private createInjector<T>(\n        config: McSidepanelConfig,\n        sidepanelRef: McSidepanelRef<T>,\n        sidepanelContainer: McSidepanelContainerComponent): PortalInjector {\n\n        // The McSidepanelContainerComponent is injected in the portal as the McSidepanelContainerComponent and\n        // the sidepanel's content are created out of the same ViewContainerRef and as such, are siblings for injector\n        // purposes. To allow the hierarchy that is expected, the McSidepanelContainerComponent is explicitly\n        // added to the injection tokens.\n        const injectionTokens = new WeakMap<any>([\n            [McSidepanelContainerComponent, sidepanelContainer],\n            [MC_SIDEPANEL_DATA, config.data],\n            [McSidepanelRef, sidepanelRef]\n        ]);\n\n        return new PortalInjector(this.injector, injectionTokens);\n    }\n\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified sidepanel config.\n     */\n    private createOverlay(config: McSidepanelConfig): OverlayRef {\n        const overlayConfig = new OverlayConfig({\n            hasBackdrop: config.hasBackdrop,\n            backdropClass: this.getBackdropClass(config),\n            maxWidth: '100%',\n            panelClass: config.overlayPanelClass,\n            scrollStrategy: this.overlay.scrollStrategies.block(),\n            positionStrategy: this.overlay.position().global()\n        });\n\n        return this.overlay.create(overlayConfig);\n    }\n\n    private closeSidepanels(sidepanels: McSidepanelRef[]) {\n        const reversedOpenedSidepanels = [...sidepanels.reverse()];\n\n        reversedOpenedSidepanels.forEach((sidepanelRef: McSidepanelRef) => {\n            sidepanelRef.close();\n        });\n    }\n\n    private getBackdropClass(config: McSidepanelConfig): string {\n        const hasOpenedSidepanelWithBackdrop =\n            this.openedSidepanels.some((sidepanelRef) => sidepanelRef.config.hasBackdrop!);\n\n        return config.requiredBackdrop || !hasOpenedSidepanelWithBackdrop ? 'cdk-overlay-dark-backdrop' :\n            'cdk-overlay-transparent-backdrop';\n    }\n\n    private getOpenedSidepanelsWithSamePosition(config: McSidepanelConfig): McSidepanelRef[] {\n        return this.openedSidepanels.filter((sidepanelRef) => sidepanelRef.config.position === config.position);\n    }\n\n    /**\n     * Removes a sidepanel from the array of open sidepanels.\n     * @param sidepanelRef Sidepanel to be removed.\n     */\n    private removeOpenSidepanel(sidepanelRef: McSidepanelRef) {\n        const index = this.openedSidepanels.indexOf(sidepanelRef);\n\n        if (index > -1) {\n            this.openedSidepanels.splice(index, 1);\n        }\n    }\n}\n","import { Component, Directive, ElementRef, Input, OnChanges, OnInit, Optional, SimpleChanges } from '@angular/core';\n\nimport { McSidepanelRef } from './sidepanel-ref';\nimport { McSidepanelService } from './sidepanel.service';\n\n\n/**\n * Button that will close the current sidepanel.\n */\n@Directive({\n    selector: 'button[mc-sidepanel-close], button[mcSidepanelClose]',\n    host: {\n        '(click)': 'sidepanelRef.close(sidepanelResult)',\n        class: 'mc-sidepanel-close',\n        type: 'button'\n    }\n})\nexport class McSidepanelClose implements OnInit, OnChanges {\n    @Input('mc-sidepanel-close') sidepanelResult: any;\n\n    @Input('mcSidepanelClose') mcSidepanelClose: any;\n\n    constructor(\n        @Optional() public sidepanelRef: McSidepanelRef,\n        private elementRef: ElementRef<HTMLElement>,\n        private sidepanelService: McSidepanelService\n    ) {}\n\n    ngOnInit() {\n        if (!this.sidepanelRef) {\n            // When this directive is included in a sidepanel via TemplateRef (rather than being\n            // in a Component), the SidepanelRef isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the SidepanelRef by\n            // ID.\n            // This must occur in `onInit`, as the ID binding for the sidepanel container won't\n            // be resolved at constructor time. We use setTimeout by same reason.\n            setTimeout(() => {\n                this.sidepanelRef = getClosestSidepanel(this.elementRef, this.sidepanelService.openedSidepanels)!;\n            });\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const proxiedChange = changes.mcSidepanelClose || changes.sidepanelResult;\n\n        if (proxiedChange) {\n            this.sidepanelResult = proxiedChange.currentValue;\n        }\n    }\n}\n\n/**\n * Header of a sidepanel.\n */\n@Component({\n    selector: 'mc-sidepanel-header',\n    template: `\n        <div class=\"mc-sidepanel-title\">\n            <ng-content></ng-content>\n        </div>\n        <button *ngIf=\"closeable\" mc-sidepanel-close>\n            <span class=\"mc-sidepanel-close-x\">\n                <i mc-icon=\"mc-close-L_16\" class=\"mc-icon mc-icon_light\" color=\"second\"></i>\n            </span>\n        </button>\n    `,\n    host: {\n        class: 'mc-sidepanel-header'\n    }\n})\nexport class McSidepanelHeader {\n    @Input() closeable: boolean;\n}\n\n/**\n * Scrollable content container of a sidepanel.\n */\n@Directive({\n    selector: 'mc-sidepanel-body, [mc-sidepanel-body], mcSidepanelBody',\n    host: {\n        class: 'mc-sidepanel-body'\n    }\n})\nexport class McSidepanelBody {}\n\n/**\n * Footer of a sidepanel.\n */\n@Directive({\n    selector: 'mc-sidepanel-footer, [mc-sidepanel-footer], mcSidepanelFooter',\n    host: {\n        class: 'mc-sidepanel-footer'\n    }\n})\nexport class McSidepanelFooter {}\n\n/**\n * Actions block of a sidepanel footer.\n */\n@Directive({\n    selector: 'mc-sidepanel-actions, [mc-sidepanel-actions], mcSidepanelActions',\n    host: {\n        class: 'mc-sidepanel-actions'\n    }\n})\nexport class McSidepanelActions {}\n\n/**\n * Finds the closest McSidepanelRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a sidepanel.\n * @param openSidepanels References to the currently-open sidepanels.\n */\nfunction getClosestSidepanel(element: ElementRef<HTMLElement>, openSidepanels: McSidepanelRef[]) {\n    let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n    while (parent && !parent.classList.contains('mc-sidepanel-container')) {\n        parent = parent.parentElement;\n    }\n\n    return parent ? openSidepanels.find((sidepanel) => sidepanel.id === parent!.id) : null;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { PortalModule } from '@ptsecurity/cdk/portal';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McSidepanelContainerComponent } from './sidepanel-container.component';\nimport {\n    McSidepanelActions,\n    McSidepanelBody,\n    McSidepanelClose,\n    McSidepanelFooter,\n    McSidepanelHeader\n} from './sidepanel-directives';\nimport { McSidepanelService } from './sidepanel.service';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        PortalModule,\n        McCommonModule,\n        McIconModule\n    ],\n    providers: [McSidepanelService],\n    declarations: [\n        McSidepanelContainerComponent,\n        McSidepanelClose,\n        McSidepanelHeader,\n        McSidepanelBody,\n        McSidepanelFooter,\n        McSidepanelActions\n    ],\n    entryComponents: [McSidepanelContainerComponent],\n    exports: [\n        McSidepanelContainerComponent,\n        McSidepanelClose,\n        McSidepanelHeader,\n        McSidepanelBody,\n        McSidepanelFooter,\n        McSidepanelActions\n    ]\n})\nexport class McSidepanelModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    Input,\n    NgZone, OnDestroy,\n    OnInit,\n    Renderer2,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { coerceBooleanProperty, coerceCssPixelValue, coerceNumberProperty } from '@ptsecurity/cdk/coercion';\n\n\ninterface IArea {\n    area: McSplitterAreaDirective;\n    index: number;\n    order: number;\n    initialSize: number;\n}\n\ninterface IPoint {\n    x: number;\n    y: number;\n}\n\n\nconst enum AttributeProperty {\n    Disabled = 'disabled'\n}\n\nconst enum Cursor {\n    Default = 'default',\n    ResizeColumn = 'col-resize',\n    ResizeRow = 'row-resize'\n}\n\nconst enum StyleProperty {\n    Cursor = 'cursor',\n    Flex = 'flex',\n    FlexBasis = 'flex-basis',\n    FlexDirection = 'flex-direction',\n    Height = 'height',\n    MaxWidth = 'max-width',\n    MinHeight = 'min-height',\n    MinWidth = 'minWidth',\n    OffsetHeight = 'offsetHeight',\n    OffsetWidth = 'offsetWidth',\n    Order = 'order',\n    Width = 'width'\n}\n\nconst enum State {\n    Disabled = 'disabled',\n    Horizontal = 'horizontal',\n    Vertical = 'vertical'\n}\n\nexport const enum Direction {\n    Horizontal = 'horizontal',\n    Vertical = 'vertical'\n}\n\n@Component({\n    selector: 'mc-splitter',\n    preserveWhitespaces: false,\n    styleUrls: ['splitter.css'],\n    templateUrl: './splitter.component.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McSplitterComponent implements OnInit {\n    readonly areas: IArea[] = [];\n\n    private _direction: Direction;\n    private _disabled: boolean = false;\n    private _gutterSize: number = 6;\n\n    private isDragging: boolean = false;\n\n    private readonly areaPositionDivider: number = 2;\n    private readonly listeners: (() => void)[] = [];\n\n    @Input()\n    set direction(direction: Direction) {\n        this._direction = direction;\n    }\n\n    get direction(): Direction {\n        return this._direction;\n    }\n\n    @Input()\n    set disabled(disabled: boolean) {\n        this._disabled = coerceBooleanProperty(disabled);\n    }\n\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    @Input()\n    set gutterSize(gutterSize: number) {\n        const size = coerceNumberProperty(gutterSize);\n        this._gutterSize = size > 0 ? size : this.gutterSize;\n    }\n\n    get gutterSize(): number {\n        return this._gutterSize;\n    }\n\n    constructor(private elementRef: ElementRef,\n                private ngZone: NgZone,\n                private renderer: Renderer2) {}\n\n    addArea(area: McSplitterAreaDirective): void {\n        const index: number = this.areas.length;\n        const order: number = index * this.areaPositionDivider;\n        const size: number = area.getSize();\n\n        area.setOrder(order);\n\n        this.areas.push({\n            area,\n            index,\n            order,\n            initialSize: size\n        });\n    }\n\n    ngOnInit(): void {\n        if (!this.direction) {\n            this.direction = Direction.Horizontal;\n        }\n\n        this.setStyle(StyleProperty.FlexDirection, this.isVertical() ? 'column' : 'row');\n    }\n\n    onMouseDown(event: MouseEvent, leftAreaIndex: number, rightAreaIndex: number) {\n        if (this.disabled) {\n            return;\n        }\n\n        const leftArea = this.areas[leftAreaIndex];\n        const rightArea = this.areas[rightAreaIndex];\n\n        const startPoint: IPoint = {\n            x: event.screenX,\n            y: event.screenY\n        };\n\n        leftArea.initialSize = leftArea.area.getSize();\n        rightArea.initialSize = rightArea.area.getSize();\n\n        this.areas.forEach((item) => {\n            const size = item.area.getSize();\n            item.area.disableFlex();\n            item.area.setSize(size);\n        });\n\n        this.ngZone.runOutsideAngular(() => {\n            this.listeners.push(\n                this.renderer.listen(\n                    'document',\n                    'mouseup',\n                    () => this.onMouseUp()\n                )\n            );\n        });\n\n        this.ngZone.runOutsideAngular(() => {\n            this.listeners.push(\n                this.renderer.listen(\n                    'document',\n                    'mousemove',\n                    (e: MouseEvent) => this.onMouseMove(e, startPoint, leftArea, rightArea)\n                )\n            );\n        });\n\n        this.isDragging = true;\n    }\n\n    removeArea(area: McSplitterAreaDirective): void {\n        let indexToRemove: number = -1;\n\n        this.areas.some((item, index) => {\n            if (item.area === area) {\n                indexToRemove = index;\n\n                return true;\n            }\n\n            return false;\n        });\n\n        if (indexToRemove === -1) {\n            return;\n        }\n\n        this.areas.splice(indexToRemove, 1);\n    }\n\n    private isVertical(): boolean {\n        return this.direction === Direction.Vertical;\n    }\n\n    private onMouseMove(event: MouseEvent, startPoint: IPoint, leftArea: IArea, rightArea: IArea) {\n        if (!this.isDragging || this.disabled) {\n            return;\n        }\n\n        const endPoint: IPoint = {\n            x: event.screenX,\n            y: event.screenY\n        };\n\n        const offset = this.isVertical()\n            ? startPoint.y - endPoint.y\n            : startPoint.x - endPoint.x;\n\n        const newLeftAreaSize = leftArea.initialSize - offset;\n        const newRightAreaSize = rightArea.initialSize + offset;\n\n        const minLeftAreaSize = leftArea.area.getMinSize();\n        const minRightAreaSize = rightArea.area.getMinSize();\n\n        if (newLeftAreaSize <= minLeftAreaSize || newRightAreaSize <= minRightAreaSize) {\n            const rightAreaOffset = leftArea.initialSize - minLeftAreaSize;\n\n            leftArea.area.setSize(minLeftAreaSize);\n            rightArea.area.setSize(rightArea.initialSize + rightAreaOffset);\n        } else if (newLeftAreaSize <= 0) {\n            leftArea.area.setSize(0);\n            rightArea.area.setSize(rightArea.initialSize + leftArea.initialSize);\n        } else if (newRightAreaSize <= 0) {\n            leftArea.area.setSize(rightArea.initialSize + leftArea.initialSize);\n            rightArea.area.setSize(0);\n        } else {\n            leftArea.area.setSize(newLeftAreaSize);\n            rightArea.area.setSize(newRightAreaSize);\n        }\n    }\n\n    private onMouseUp() {\n        while (this.listeners.length > 0) {\n            const unsubscribe = this.listeners.pop();\n\n            if (unsubscribe) {\n                unsubscribe();\n            }\n        }\n\n        this.isDragging = false;\n    }\n\n    private setStyle(property: StyleProperty, value: string | number) {\n        this.renderer.setStyle(this.elementRef.nativeElement, property, value);\n    }\n}\n\n@Directive({\n    selector: 'mc-gutter'\n})\nexport class McGutterDirective implements OnInit {\n    private _direction: Direction = Direction.Vertical;\n    private _disabled: boolean = false;\n    private _order: number = 0;\n    private _size: number = 6;\n\n    @Input()\n    set direction(direction: Direction) {\n        this._direction = direction;\n    }\n\n    get direction(): Direction {\n        return this._direction;\n    }\n\n    @Input()\n    set disabled(disabled: boolean) {\n        this._disabled = coerceBooleanProperty(disabled);\n    }\n\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    @Input()\n    set order(order: number) {\n        this._order = coerceNumberProperty(order);\n    }\n\n    get order(): number {\n        return this._order;\n    }\n\n    @Input()\n    set size(size: number) {\n        this._size = coerceNumberProperty(size);\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    constructor(private renderer: Renderer2,\n                private elementRef: ElementRef) {\n    }\n\n    ngOnInit(): void {\n        this.setStyle(StyleProperty.Cursor, this.getCursor(this.getState()));\n        this.setStyle(StyleProperty.FlexBasis, coerceCssPixelValue(this.size));\n        this.setStyle(this.isVertical() ? StyleProperty.Height : StyleProperty.Width, coerceCssPixelValue(this.size));\n        this.setStyle(StyleProperty.Order, this.order);\n\n        if (!this.isVertical()) {\n            this.setStyle(StyleProperty.Height, '100%');\n        }\n\n        if (this.disabled) {\n            this.setAttr(AttributeProperty.Disabled, 'true');\n        }\n\n        // fix IE issue with gutter icon. flex-direction is requied for flex alignment options\n        this.setStyle(StyleProperty.FlexDirection, this.isVertical() ? 'row' : 'column');\n    }\n\n    private isVertical(): boolean {\n        return this.direction === Direction.Vertical;\n    }\n\n    private getCursor(state: State): string {\n        switch (state) {\n            case State.Disabled:\n                return Cursor.Default;\n            case State.Vertical:\n                return  Cursor.ResizeRow;\n            case State.Horizontal:\n                return Cursor.ResizeColumn;\n            default:\n                throw Error(`Unknown gutter state for cursor: ${state}`);\n        }\n    }\n\n    private getState(): State {\n        return this.disabled\n            ? State.Disabled\n            : this.direction === Direction.Vertical\n                ? State.Vertical\n                : State.Horizontal;\n    }\n\n    private setStyle(property: StyleProperty, value: string | number) {\n        this.renderer.setStyle(this.elementRef.nativeElement, property, value);\n    }\n\n    private setAttr(attribute: AttributeProperty, value: string) {\n        this.renderer.setAttribute(this.elementRef.nativeElement, attribute, value);\n    }\n}\n\n@Directive({\n    selector: 'mc-splitter-area'\n})\nexport class McSplitterAreaDirective implements OnInit, OnDestroy {\n    constructor(private elementRef: ElementRef,\n                private renderer: Renderer2,\n                private splitter: McSplitterComponent) {}\n\n    disableFlex(): void {\n        this.renderer.removeStyle(this.elementRef.nativeElement, 'flex');\n    }\n\n    ngOnInit(): void {\n        this.splitter.addArea(this);\n\n        this.removeStyle(StyleProperty.MaxWidth);\n        this.setStyle(StyleProperty.Flex, '1');\n\n        if (this.splitter.direction === Direction.Vertical) {\n            this.setStyle(StyleProperty.Width, '100%');\n            this.removeStyle(StyleProperty.Height);\n        } else {\n            this.setStyle(StyleProperty.Height, '100%');\n            this.removeStyle(StyleProperty.Width);\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.splitter.removeArea(this);\n    }\n\n    setOrder(order: number): void {\n        this.setStyle(StyleProperty.Order, order);\n    }\n\n    setSize(size: number): void {\n        const sz = coerceNumberProperty(size);\n        this.setStyle(this.getSizeProperty(), coerceCssPixelValue(sz));\n    }\n\n    getSize(): number {\n        return this.elementRef.nativeElement[this.getOffsetSizeProperty()];\n    }\n\n    getMinSize(): number {\n        const styles = getComputedStyle(this.elementRef.nativeElement);\n\n        return parseFloat(styles[this.getMinSizeProperty()]);\n    }\n\n    private isVertical(): boolean {\n        return this.splitter.direction === Direction.Vertical;\n    }\n\n    private getMinSizeProperty(): StyleProperty {\n        return this.isVertical()\n            ? StyleProperty.MinHeight\n            : StyleProperty.MinWidth;\n    }\n\n    private getOffsetSizeProperty(): StyleProperty {\n        return this.isVertical()\n            ? StyleProperty.OffsetHeight\n            : StyleProperty.OffsetWidth;\n    }\n\n    private getSizeProperty(): StyleProperty {\n        return this.isVertical()\n            ? StyleProperty.Height\n            : StyleProperty.Width;\n    }\n\n    private setStyle(style: StyleProperty, value: string | number) {\n        this.renderer.setStyle(this.elementRef.nativeElement, style, value);\n    }\n\n    private removeStyle(style: StyleProperty) {\n        this.renderer.removeStyle(this.elementRef.nativeElement, style);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McGutterDirective, McSplitterAreaDirective, McSplitterComponent } from './splitter.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        McIconModule\n    ],\n    exports: [\n        McGutterDirective,\n        McSplitterAreaDirective,\n        McSplitterComponent\n    ],\n    declarations: [\n        McGutterDirective,\n        McSplitterAreaDirective,\n        McSplitterComponent\n    ]\n})\nexport class McSplitterModule {\n}\n","import { animate, state, style, transition, trigger } from '@angular/animations';\nimport {\n    Attribute,\n    ChangeDetectionStrategy, ChangeDetectorRef,\n    Component,\n    ElementRef, EventEmitter, forwardRef,\n    Input, Output, ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport {\n    ThemePalette,\n    CanColor, CanColorCtor,\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex\n} from '@ptsecurity/mosaic/core';\n\n\nlet nextUniqueId = 0;\n\ntype ToggleLabelPositionType = 'left' | 'right';\n\nexport class McToggleBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McToggleMixinBase:\n    HasTabIndexCtor &\n    CanDisableCtor &\n    CanColorCtor &\n    typeof McToggleBase = mixinTabIndex(mixinColor(mixinDisabled(McToggleBase), ThemePalette.Primary));\n\nexport class McToggleChange {\n    source: McToggleComponent;\n    checked: boolean;\n}\n\n@Component({\n    selector: 'mc-toggle',\n    exportAs: 'mcToggle',\n    templateUrl: './toggle.component.html',\n    styleUrls: ['./toggle.css'],\n    providers: [\n        {provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => McToggleComponent), multi: true}\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color', 'tabIndex'],\n    host: {\n        class: 'mc-toggle',\n        '[id]': 'id',\n        '[attr.id]': 'id',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-toggle_off]': '!checked'\n    },\n    animations: [\n        trigger('switch', [\n            state('true' , style({ left: '50%' })),\n            state('false', style({ left: '1px' })),\n            transition('true <=> false', animate('150ms'))\n        ])\n    ]\n})\nexport class McToggleComponent extends _McToggleMixinBase\n    implements ControlValueAccessor, CanColor, CanDisable, HasTabIndex {\n\n    @ViewChild('input') _inputElement: ElementRef;\n\n    @Input() labelPosition: ToggleLabelPositionType = 'right';\n\n    @Input('aria-label') ariaLabel: string = '';\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n    private _uniqueId: string = `mc-toggle-${++nextUniqueId}`;\n\n    // tslint:disable:member-ordering\n    @Input() id: string = this._uniqueId;\n\n    get inputId(): string {\n        return `${this.id || this._uniqueId}-input`;\n    }\n\n    @Input() name: string | null = null;\n\n    @Input() value: string;\n\n    private _disabled: boolean = false;\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value !== this._disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _checked: boolean = false;\n\n    get checked() {\n        return this._checked;\n    }\n\n    @Input()\n    set checked(value: boolean) {\n        if (value !== this._checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    @Output() readonly change: EventEmitter<McToggleChange> =\n        new EventEmitter<McToggleChange>();\n\n    constructor(public _elementRef: ElementRef,\n                private _focusMonitor: FocusMonitor,\n                private _changeDetectorRef: ChangeDetectorRef,\n                @Attribute('tabindex') tabIndex: string\n    ) {\n        super(_elementRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n    }\n\n    _getAriaChecked(): boolean {\n        return this.checked;\n    }\n\n    _onInteractionEvent(event: Event) {\n        event.stopPropagation();\n    }\n\n    _onLabelTextChange() {\n        this._changeDetectorRef.markForCheck();\n    }\n\n    _onInputClick(event: MouseEvent) {\n        event.stopPropagation();\n        this._updateModelValue();\n        this._emitChangeEvent();\n    }\n\n    writeValue(value: any) {\n        this.checked = !!value;\n    }\n\n    registerOnChange(fn: any) {\n        this._onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: any) {\n        this._onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n    }\n\n    // tslint:disable-next-line:no-empty\n    private _onTouchedCallback = () => {};\n\n    // tslint:disable-next-line:no-empty\n    private _onChangeCallback = (_: any) => {};\n\n    private _updateModelValue() {\n        this._checked = !this.checked;\n        this._onChangeCallback(this.checked);\n        this._onTouchedCallback();\n    }\n\n    private _emitChangeEvent() {\n        const event = new McToggleChange();\n        event.source = this;\n        event.checked = this.checked;\n\n        this._onChangeCallback(this.checked);\n        this.change.emit(event);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McToggleComponent } from './toggle.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule],\n    exports: [McToggleComponent],\n    declarations: [McToggleComponent]\n})\nexport class McToggleModule {\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    TemplateRef,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport {\n    ConnectedOverlayPositionChange,\n    ConnectionPositionPair,\n    Overlay,\n    OverlayRef,\n    ScrollDispatcher,\n    IScrollStrategy,\n    FlexibleConnectedPositionStrategy,\n    IOverlayConnectionPosition,\n    IOriginConnectionPosition,\n    HorizontalConnectionPos,\n    VerticalConnectionPos\n} from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal } from '@ptsecurity/cdk/portal';\nimport {\n    fadeAnimation,\n    DEFAULT_4_POSITIONS,\n    POSITION_MAP\n} from '@ptsecurity/mosaic/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators';\n\n\n@Component({\n    selector: 'mc-tooltip-component',\n    inputs: [\n        'mcMouseEnterDelay',\n        'mcMouseLeaveDelay',\n        'mcTitle',\n        'mcVisible',\n        'mcTrigger',\n        'mcPlacement'\n    ],\n    outputs: ['mcVisibleChange'],\n    animations: [ fadeAnimation ],\n    templateUrl: './tooltip.component.html',\n    preserveWhitespaces: false,\n    styleUrls: ['./tooltip.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '(body:click)': 'this.handleBodyInteraction()'\n    }\n})\nexport class McTooltipComponent {\n    prefix = 'mc-tooltip_placement';\n    positions: ConnectionPositionPair[] = [ ...DEFAULT_4_POSITIONS ];\n    classMap = {};\n    isTitleString: boolean;\n    showTid: number;\n    hideTid: number;\n    availablePositions: any;\n    $visible: Observable<boolean>;\n\n    @Output() mcVisibleChange: EventEmitter<boolean> = new EventEmitter();\n\n    @Input() mcMouseEnterDelay = 400;\n\n    @Input() mcMouseLeaveDelay = 0;\n\n    @Input()\n    get mcTitle(): string | TemplateRef<void> {\n        return this._mcTitle;\n    }\n    set mcTitle(value: string | TemplateRef<void>) {\n        this.isTitleString = !(value instanceof TemplateRef);\n\n        if (this.isTitleString) {\n            this._mcTitle = value;\n        }\n    }\n    private _mcTitle: string | TemplateRef<void>;\n\n    @Input()\n    get mcTrigger(): string {\n        return this._mcTrigger;\n    }\n    set mcTrigger(value: string) {\n        this._mcTrigger = value;\n    }\n    private _mcTrigger: string = 'hover';\n\n    @Input()\n    get mcPlacement(): string {\n        return this._mcPlacement;\n    }\n    set mcPlacement(value: string) {\n        if (value !== this._mcPlacement) {\n            this._mcPlacement = value;\n            this.positions.unshift(POSITION_MAP[ this.mcPlacement ]);\n        } else if (!value) {\n            this._mcPlacement = 'top';\n        }\n    }\n    private _mcPlacement: string = 'top';\n\n    @Input()\n    get mcVisible(): boolean {\n        return this._mcVisible.value;\n    }\n    set mcVisible(value: boolean) {\n        const visible = coerceBooleanProperty(value);\n\n        if (this._mcVisible.value !== visible) {\n            this._mcVisible.next(visible);\n            this.mcVisibleChange.emit(visible);\n        }\n    }\n    private _mcVisible: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n    /** Subject for notifying that the tooltip has been hidden from the view */\n    private readonly onHideSubject: Subject<any> = new Subject();\n    private closeOnInteraction: boolean = false;\n\n    constructor(public cdr: ChangeDetectorRef) {\n        this.availablePositions = POSITION_MAP;\n        this.$visible = this._mcVisible.asObservable();\n    }\n\n    show(): void {\n        if (this.hideTid) {\n            clearTimeout(this.hideTid);\n        }\n\n        if (!this.isContentEmpty()) {\n            if (this.mcTrigger !== 'manual') {\n                this.closeOnInteraction = true;\n            }\n            this.showTid = setTimeout(() => {\n                this.mcVisible = true;\n                this.mcVisibleChange.emit(true);\n\n                // Mark for check so if any parent component has set the\n                // ChangeDetectionStrategy to OnPush it will be checked anyways\n                this.markForCheck();\n            }, this.mcMouseEnterDelay);\n        }\n    }\n\n    hide(): void {\n        if (this.showTid) {\n            clearTimeout(this.showTid);\n        }\n\n        this.hideTid = setTimeout(() => {\n            this.mcVisible = false;\n            this.mcVisibleChange.emit(false);\n            this.onHideSubject.next();\n\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this.markForCheck();\n        }, this.mcMouseLeaveDelay);\n    }\n\n    setClassMap(): void {\n        this.classMap = `${this.prefix}-${this.mcPlacement}`;\n    }\n\n    isContentEmpty(): boolean {\n        return this.isTitleString ? (this.mcTitle === '' || !this.mcTitle) : false;\n    }\n\n    /** Returns an observable that notifies when the tooltip has been hidden from view. */\n    afterHidden(): Observable<void> {\n        return this.onHideSubject.asObservable();\n    }\n\n    markForCheck(): void {\n        this.cdr.markForCheck();\n    }\n\n    handleBodyInteraction(): void {\n        if (this.closeOnInteraction) {\n            this.hide();\n        }\n    }\n}\n\nexport const MC_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function mcTooltipScrollStrategyFactory(overlay: Overlay): () => IScrollStrategy {\n    return () => overlay.scrollStrategies.reposition({scrollThrottle: 20});\n}\n\n/** @docs-private */\nexport const MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_TOOLTIP_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: mcTooltipScrollStrategyFactory\n};\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMcTooltipInvalidPositionError(position: string) {\n    return Error(`McTooltip position \"${position}\" is invalid.`);\n}\n\nconst VIEWPORT_MARGIN: number = 8;\n\n@Directive({\n    selector: '[mcTooltip], [attribute^=\"mcTooltip\"]',\n    exportAs: 'mcTooltip',\n    host: {\n        '(keydown)': 'handleKeydown($event)',\n        '(touchend)': 'handleTouchend()'\n    }\n})\nexport class McTooltip implements OnInit, OnDestroy {\n    isTooltipOpen: boolean = false;\n    isDynamicTooltip = false;\n    parentDisabled: boolean = false;\n    overlayRef: OverlayRef | null;\n    portal: ComponentPortal<McTooltipComponent>;\n    availablePositions: any;\n    tooltip: McTooltipComponent | null;\n\n    @Output() mcVisibleChange = new EventEmitter<boolean>();\n    private $unsubscribe = new Subject<void>();\n\n    @Input('mcTooltip')\n    get mcTitle(): string {\n        return this._mcTitle;\n    }\n    set mcTitle(title: string) {\n        this._mcTitle = title;\n        this.updateCompValue('mcTitle', title);\n    }\n    private _mcTitle: string;\n\n    @Input('mcTitle')\n    set setTitle(title: string) {\n        this.mcTitle = title;\n    }\n\n    @Input('mcTooltipDisabled')\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    private _disabled: boolean = false;\n\n    @Input('mcMouseEnterDelay')\n    get mcMouseEnterDelay(): number {\n        return this._mcMouseEnterDelay;\n    }\n    set mcMouseEnterDelay(value: number) {\n        this._mcMouseEnterDelay = value;\n        this.updateCompValue('mcMouseEnterDelay', value);\n    }\n    private _mcMouseEnterDelay: number;\n\n    @Input('mcMouseLeaveDelay')\n    get mcMouseLeaveDelay(): number {\n        return this._mcMouseLeaveDelay;\n    }\n    set mcMouseLeaveDelay(value: number) {\n        this._mcMouseLeaveDelay = value;\n        this.updateCompValue('mcMouseLeaveDelay', value);\n    }\n    private _mcMouseLeaveDelay: number;\n\n    @Input('mcTrigger')\n    get mcTrigger(): string {\n        return this._mcTrigger;\n    }\n    set mcTrigger(value: string) {\n        if (value) {\n            this._mcTrigger = value;\n            this.updateCompValue('mcTrigger', value);\n        } else {\n            this._mcTrigger = 'hover';\n        }\n    }\n    private _mcTrigger: string = 'hover';\n\n    @Input('mcPlacement')\n    get mcPlacement(): string {\n        return this._mcPlacement;\n    }\n    set mcPlacement(value: string) {\n        if (value) {\n            this._mcPlacement = value;\n            this.updateCompValue('mcPlacement', value);\n        } else {\n            this._mcPlacement = 'top';\n        }\n    }\n    private _mcPlacement: string = 'top';\n\n    @Input('mcTooltipClass')\n    get mcTooltipClass() { return this._mcTooltipClass; }\n    set mсTooltipClass(value: string | string[] | Set<string> | {[key: string]: any}) {\n        this._mcTooltipClass = value;\n\n        if (this.tooltip) {\n            this.tooltip.setClassMap();\n        }\n    }\n    private _mcTooltipClass: string | string[] | Set<string> | {[key: string]: any};\n\n    @Input('mcVisible')\n    get mcVisible(): boolean {\n        return this._mcVisible;\n    }\n    set mcVisible(externalValue: boolean) {\n        const value = coerceBooleanProperty(externalValue);\n        this._mcVisible = value;\n        this.updateCompValue('mcVisible', value);\n\n        if (value) {\n            this.show();\n        }\n    }\n    private _mcVisible: boolean;\n\n    @HostBinding('class.mc-tooltip-open')\n    get isOpen(): boolean {\n        return this.isTooltipOpen;\n    }\n\n    @HostBinding('class.disabled')\n    get isParentDisabled(): boolean {\n        return this.parentDisabled;\n    }\n\n    private manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n    private readonly destroyed = new Subject<void>();\n\n    constructor(\n        private overlay: Overlay,\n        private elementRef: ElementRef,\n        private ngZone: NgZone,\n        private scrollDispatcher: ScrollDispatcher,\n        private hostView: ViewContainerRef,\n        @Inject(MC_TOOLTIP_SCROLL_STRATEGY) private scrollStrategy,\n        @Optional() private direction: Directionality) {\n            this.availablePositions = POSITION_MAP;\n        }\n\n    /** Create the overlay config and position strategy */\n    createOverlay(): OverlayRef {\n        if (this.overlayRef) {\n            return this.overlayRef;\n        }\n\n        // Create connected position strategy that listens for scroll events to reposition.\n        const strategy = this.overlay.position()\n            .flexibleConnectedTo(this.elementRef)\n            .withTransformOriginOn('.mc-tooltip')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(VIEWPORT_MARGIN)\n            .withPositions([ ...DEFAULT_4_POSITIONS ]);\n\n        const scrollableAncestors = this.scrollDispatcher\n            .getAncestorScrollContainers(this.elementRef);\n\n        strategy.withScrollableContainers(scrollableAncestors);\n\n        strategy.positionChanges.pipe(takeUntil(this.destroyed)).subscribe((change) => {\n            if (this.tooltip) {\n                this.onPositionChange(change);\n                if (change.scrollableViewProperties.isOverlayClipped && this.tooltip.mcVisible) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the tooltip.\n                    this.ngZone.run(() => this.hide());\n                }\n            }\n        });\n\n        this.overlayRef = this.overlay.create({\n            direction: this.direction,\n            positionStrategy: strategy,\n            panelClass: 'mc-tooltip-panel',\n            scrollStrategy: this.scrollStrategy()\n        });\n\n        this.updatePosition();\n\n        this.overlayRef.detachments()\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(() => this.detach());\n\n        return this.overlayRef;\n    }\n\n    detach() {\n        if (this.overlayRef && this.overlayRef.hasAttached()) {\n            this.overlayRef.detach();\n        }\n\n        this.tooltip = null;\n    }\n\n    onPositionChange($event: ConnectedOverlayPositionChange): void {\n        let updatedPlacement = this.mcPlacement;\n        Object.keys(this.availablePositions).some((key) => {\n            if ($event.connectionPair.originX === this.availablePositions[key].originX &&\n                $event.connectionPair.originY === this.availablePositions[key].originY &&\n                $event.connectionPair.overlayX === this.availablePositions[key].overlayX &&\n                $event.connectionPair.overlayY === this.availablePositions[key].overlayY) {\n                updatedPlacement = key;\n\n                return true;\n            }\n\n            return false;\n        });\n        this.updateCompValue('mcPlacement', updatedPlacement);\n\n        if (this.tooltip) {\n            this.tooltip.setClassMap();\n            this.tooltip.markForCheck();\n        }\n\n        this.handlePositioningUpdate();\n    }\n\n    handlePositioningUpdate() {\n        if (!this.overlayRef) {\n            this.overlayRef = this.createOverlay();\n        }\n        if (this.mcPlacement === 'right' || this.mcPlacement === 'left') {\n            const pos =\n                (this.overlayRef.overlayElement.clientHeight -\n                    this.hostView.element.nativeElement.clientHeight) / 2; // tslint:disable-line\n            const currentContainer = this.overlayRef.overlayElement.style.top || '0px';\n            this.overlayRef.overlayElement.style.top =\n                `${parseInt(currentContainer.split('px')[0], 10) + pos - 1}px`;\n            // TODO: обновлять положение стрелки\\указателя\\\"дятла\"\n        }\n    }\n\n    // tslint:disable-next-line:no-any\n    updateCompValue(key: string, value: any): void {\n        if (this.isDynamicTooltip && value) {\n            if (this.tooltip) {\n                this.tooltip[key] = value;\n            }\n        }\n    }\n\n    ngOnInit(): void {\n        this.initElementRefListeners();\n    }\n\n    ngOnDestroy(): void {\n        if (this.overlayRef) {\n            this.overlayRef.dispose();\n        }\n        this.manualListeners.forEach((listener, event) =>\n            this.elementRef.nativeElement.removeEventListener(event, listener));\n        this.manualListeners.clear();\n\n        this.$unsubscribe.next();\n        this.$unsubscribe.complete();\n    }\n\n    handleKeydown(e: KeyboardEvent) {\n        if (this.isTooltipOpen && e.keyCode === ESCAPE) { // tslint:disable-line\n            this.hide();\n        }\n    }\n\n    handleTouchend() {\n        this.hide();\n    }\n\n    initElementRefListeners() {\n        if (this.mcTrigger === 'hover') {\n\n            this.manualListeners\n                .set('mouseenter', () => this.show())\n                .set('mouseleave', () => this.hide())\n                .forEach((listener, event) => this.elementRef.nativeElement.addEventListener(event, listener));\n        }\n\n        if (this.mcTrigger === 'focus') {\n\n            this.manualListeners\n                .set('focus', () => this.show())\n                .set('blur', () => this.hide())\n                .forEach((listener, event) => this.elementRef.nativeElement.addEventListener(event, listener));\n        }\n    }\n\n    show(): void {\n        if (!this.disabled) {\n            if (!this.tooltip) {\n                const overlayRef = this.createOverlay();\n                this.detach();\n\n                this.portal = this.portal || new ComponentPortal(McTooltipComponent, this.hostView);\n\n                this.tooltip = overlayRef.attach(this.portal).instance;\n                this.tooltip.afterHidden()\n                    .pipe(takeUntil(this.destroyed))\n                    .subscribe(() => this.detach());\n                this.isDynamicTooltip = true;\n                const properties = [\n                    'mcTitle',\n                    'mcPlacement',\n                    'mcTrigger',\n                    'mcTooltipDisabled',\n                    'mcMouseEnterDelay',\n                    'mcMouseLeaveDelay',\n                    'mсTooltipClass',\n                    'mcVisible'\n                ];\n                properties.forEach((property) => this.updateCompValue(property, this[ property ]));\n                this.tooltip.mcVisibleChange.pipe(takeUntil(this.$unsubscribe), distinctUntilChanged())\n                    .subscribe((data) => {\n                        this.mcVisible = data;\n                        this.mcVisibleChange.emit(data);\n                        this.isTooltipOpen = data;\n                    });\n            }\n            this.updatePosition();\n            this.tooltip.show();\n        }\n    }\n\n    hide(): void {\n        if (this.tooltip) {\n            this.tooltip.hide();\n        }\n    }\n\n    /** Updates the position of the current tooltip. */\n    updatePosition() {\n        if (!this.overlayRef) {\n            this.overlayRef = this.createOverlay();\n        }\n        const position =\n            this.overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n        const origin = this.getOrigin();\n        const overlay = this.getOverlayPosition();\n\n        position.withPositions([\n            {...origin.main, ...overlay.main},\n            {...origin.fallback, ...overlay.fallback}\n        ]);\n    }\n\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    getOrigin(): {main: IOriginConnectionPosition; fallback: IOriginConnectionPosition} {\n        const position = this.mcPlacement;\n        const isLtr = !this.direction || this.direction.value === 'ltr';\n        let originPosition: IOriginConnectionPosition;\n\n        if (position === 'top' || position === 'bottom') {\n            originPosition = {originX: 'center', originY: position === 'top' ? 'top' : 'bottom'};\n        } else if (\n            position === 'top' ||\n            (position === 'left' && isLtr) ||\n            (position === 'right' && !isLtr)) {\n            originPosition = {originX: 'start', originY: 'center'};\n        } else if (\n            position === 'bottom' ||\n            (position === 'right' && isLtr) ||\n            (position === 'left' && !isLtr)) {\n            originPosition = {originX: 'end', originY: 'center'};\n        } else {\n            throw getMcTooltipInvalidPositionError(position);\n        }\n\n        const {x, y} = this.invertPosition(originPosition.originX, originPosition.originY);\n\n        return {\n            main: originPosition,\n            fallback: {originX: x, originY: y}\n        };\n    }\n\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    getOverlayPosition(): {main: IOverlayConnectionPosition; fallback: IOverlayConnectionPosition} {\n        const position = this.mcPlacement;\n        const isLtr = !this.direction || this.direction.value === 'ltr';\n        let overlayPosition: IOverlayConnectionPosition;\n\n        if (position === 'top') {\n            overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n        } else if (position === 'bottom') {\n            overlayPosition = {overlayX: 'center', overlayY: 'top'};\n        } else if (\n            position === 'top' ||\n            (position === 'left' && isLtr) ||\n            (position === 'right' && !isLtr)) {\n            overlayPosition = {overlayX: 'end', overlayY: 'center'};\n        } else if (\n            position === 'bottom' ||\n            (position === 'right' && isLtr) ||\n            (position === 'left' && !isLtr)) {\n            overlayPosition = {overlayX: 'start', overlayY: 'center'};\n        } else {\n            throw getMcTooltipInvalidPositionError(position);\n        }\n\n        const {x, y} = this.invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n        return {\n            main: overlayPosition,\n            fallback: {overlayX: x, overlayY: y}\n        };\n    }\n\n    /** Inverts an overlay position. */\n    private invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n        let newX: HorizontalConnectionPos = x;\n        let newY: VerticalConnectionPos = y;\n        if (this.mcPlacement === 'top' || this.mcPlacement === 'bottom') {\n            if (y === 'top') {\n                newY = 'bottom';\n            } else if (y === 'bottom') {\n                newY = 'top';\n            }\n        } else {\n            if (x === 'end') {\n                newX = 'start';\n            } else if (x === 'start') {\n                newX = 'end';\n            }\n        }\n\n        return {x: newX, y: newY};\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\n\nimport {\n    McTooltipComponent,\n    McTooltip,\n    MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './tooltip.component';\n\n\n@NgModule({\n    declarations: [McTooltipComponent, McTooltip],\n    exports: [McTooltipComponent, McTooltip],\n    imports: [CommonModule, OverlayModule],\n    providers: [MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],\n    entryComponents: [McTooltipComponent]\n})\nexport class McToolTipModule {\n}\n","import { Version } from '@angular/core';\n\n\nexport const VERSION = new Version('1.0.0-beta.5-b05d86e');\n","/* tslint:disable:no-empty */\n\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    Directive,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Input,\n    isDevMode,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    Renderer2,\n    Self,\n    SimpleChanges,\n    ViewChild,\n    ViewChildren,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    RIGHT_ARROW,\n    SPACE,\n    UP_ARROW,\n    A\n} from '@ptsecurity/cdk/keycodes';\nimport {\n    CdkConnectedOverlay,\n    ViewportRuler\n} from '@ptsecurity/cdk/overlay';\nimport { CdkTree } from '@ptsecurity/cdk/tree';\nimport {\n    getOptionScrollPosition,\n    CanDisable,\n    CanUpdateErrorState,\n    ErrorStateMatcher,\n    HasTabIndex,\n    CanDisableCtor,\n    HasTabIndexCtor,\n    CanUpdateErrorStateCtor,\n    mixinTabIndex,\n    mixinDisabled,\n    mixinErrorState,\n    mcSelectAnimations,\n\n    SELECT_PANEL_MAX_HEIGHT,\n    SELECT_PANEL_PADDING_X,\n    SELECT_PANEL_VIEWPORT_PADDING,\n\n    getMcSelectDynamicMultipleError,\n    getMcSelectNonFunctionValueError,\n    getMcSelectNonArrayValueError,\n    MC_SELECT_SCROLL_STRATEGY\n} from '@ptsecurity/mosaic/core';\nimport { McFormField, McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { McTag } from '@ptsecurity/mosaic/tags';\nimport { McTreeSelection, McTreeOption } from '@ptsecurity/mosaic/tree';\nimport { defer, merge, Observable, Subject } from 'rxjs';\nimport {\n    filter,\n    map,\n    startWith,\n    switchMap,\n    take,\n    takeUntil,\n    distinctUntilChanged\n} from 'rxjs/operators';\n\n\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the select value has changed. */\nexport class McTreeSelectChange {\n    constructor(public source: McTreeOption, public value: any, public isUserInput = false) {}\n}\n\n\n@Directive({ selector: 'mc-tree-select-trigger' })\nexport class McTreeSelectTrigger {}\n\n\nclass McTreeSelectBase {\n    constructor(\n        public elementRef: ElementRef,\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {}\n}\n\n// tslint:disable-next-line:naming-convention\nconst McTreeSelectMixinBase: CanDisableCtor & HasTabIndexCtor & CanUpdateErrorStateCtor &\n    typeof McTreeSelectBase = mixinTabIndex(mixinDisabled(mixinErrorState(McTreeSelectBase)));\n\n\n@Component({\n    selector: 'mc-tree-select',\n    exportAs: 'mcTreeSelect',\n    templateUrl: 'tree-select.html',\n    styleUrls: ['./tree-select.css'],\n    inputs: ['disabled', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'tabIndex',\n\n        class: 'mc-tree-select',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-select-invalid]': 'errorState',\n        '[class.mc-select-required]': 'required',\n\n        '(keydown)': 'handleKeydown($event)',\n        '(focus)': 'onFocus()',\n        '(blur)': 'onBlur()',\n        '(window:resize)': 'calculateHiddenItems()'\n    },\n    animations: [\n        mcSelectAnimations.transformPanel,\n        mcSelectAnimations.fadeInContent\n    ],\n    providers: [\n        { provide: McFormFieldControl, useExisting: McTreeSelect },\n        { provide: CdkTree, useExisting: McTreeSelect }\n    ]\n})\nexport class McTreeSelect extends McTreeSelectMixinBase implements\n    AfterContentInit, AfterViewInit, OnChanges, OnDestroy, OnInit, DoCheck, ControlValueAccessor,\n    CanDisable, HasTabIndex, McFormFieldControl<any>, CanUpdateErrorState {\n\n    /** A name for this control that can be used by `mc-form-field`. */\n    controlType = 'mc-select';\n\n    hiddenItems: number = 0;\n    oneMoreText: string = '...ещё';\n\n    /** The last measured value for the trigger's client bounding rect. */\n    triggerRect: ClientRect;\n\n    /** The cached font-size of the trigger element. */\n    triggerFontSize = 0;\n\n    /** Deals with the selection logic. */\n    selectionModel: SelectionModel<McTreeOption>;\n\n    /** The IDs of child options to be passed to the aria-owns attribute. */\n    optionIds: string = '';\n\n    /** The value of the select panel's transform-origin property. */\n    transformOrigin: string = 'top';\n\n    /** Whether the panel's animation is done. */\n    panelDoneAnimating: boolean = false;\n\n    /** Emits when the panel element is finished transforming in. */\n    panelDoneAnimatingStream = new Subject<string>();\n\n    /** Strategy that will be used to handle scrolling while the select panel is open. */\n    scrollStrategy = this.scrollStrategyFactory();\n\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n    offsetY = 0;\n\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n    positions = [\n        {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top'\n        },\n        {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom'\n        }\n    ];\n\n    @ViewChild('trigger') trigger: ElementRef;\n\n    @ViewChild('panel') panel: ElementRef;\n\n    @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n    @ViewChildren(McTag) tags: QueryList<McTag>;\n\n    /** User-supplied override of the trigger element. */\n    @ContentChild(McTreeSelectTrigger) customTrigger: McTreeSelectTrigger;\n\n    @ContentChild(McTreeSelection) tree: McTreeSelection;\n\n    /** Event emitted when the select panel has been toggled. */\n    @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted when the select has been opened. */\n    @Output('opened') readonly openedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => o), map(() => {}));\n\n    /** Event emitted when the select has been closed. */\n    @Output('closed') readonly closedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => !o), map(() => {}));\n\n    /** Event emitted when the selected value has been changed by the user. */\n    @Output() readonly selectionChange = new EventEmitter<McTreeSelectChange>();\n\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n    @Input() panelClass: string | string[] | Set<string> | { [key: string]: any };\n\n    /** Object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Function used to sort the values in a select in multiple mode.\n     * Follows the same logic as `Array.prototype.sort`.\n     */\n    @Input() sortComparator: (\n        a: McTreeOption, b: McTreeOption, options: McTreeOption[]\n    ) => number;\n\n    /** Combined stream of all of the child options' change events. */\n    readonly optionSelectionChanges: Observable<McTreeSelectChange> = defer(() => {\n        if (this.options) {\n            return merge(...this.options.map((option) => option.onSelectionChange));\n        }\n\n        return this.ngZone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n    }) as Observable<McTreeSelectChange>;\n\n    options: QueryList<McTreeOption>;\n\n    private originalOnKeyDown: (event: KeyboardEvent) => void;\n\n    @Input()\n    get placeholder(): string {\n        return this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n\n        this.stateChanges.next();\n    }\n\n    private _placeholder: string;\n\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n\n        this.stateChanges.next();\n    }\n\n    private _required: boolean = false;\n\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        if (this.selectionModel) {\n            throw getMcSelectDynamicMultipleError();\n        }\n\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    private _multiple: boolean = false;\n\n    @Input()\n    get autoSelect(): boolean {\n        if (this.multiple) { return false; }\n\n        return this._autoSelect;\n    }\n\n    set autoSelect(value: boolean) {\n        this._autoSelect = coerceBooleanProperty(value);\n    }\n\n    private _autoSelect: boolean = true;\n\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith() {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        /* tslint:disable-next-line:strict-type-predicates */\n        if (typeof fn !== 'function') {\n            throw getMcSelectNonFunctionValueError();\n        }\n\n        this._compareWith = fn;\n\n        if (this.selectionModel) {\n            // A different comparator means the selection could change.\n            this.initializeSelection();\n        }\n    }\n\n    /** Value of the select control. */\n    @Input()\n    get value(): any {\n        return this._value;\n    }\n\n    set value(newValue: any) {\n        if (newValue !== this._value) {\n            this.writeValue(newValue);\n            this._value = newValue;\n        }\n    }\n\n    private _value: any;\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n        this.stateChanges.next();\n    }\n\n    private _id: string;\n\n    /** Whether the select is focused. */\n    get focused(): boolean {\n        return this._focused || this._panelOpen;\n    }\n\n    /**\n     * @deprecated Setter to be removed as this property is intended to be readonly.\n     * @breaking-change 8.0.0\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n\n    private _focused = false;\n\n    get panelOpen(): boolean {\n        return this._panelOpen;\n    }\n\n    private _panelOpen = false;\n\n    /** The scroll position of the overlay panel, calculated to center the selected option. */\n    private scrollTop = 0;\n\n    /** Unique id for this input. */\n    private readonly uid = `mc-select-${nextUniqueId++}`;\n\n    /** Emits whenever the component is destroyed. */\n    private readonly destroy = new Subject<void>();\n\n    constructor(\n        private readonly viewportRuler: ViewportRuler,\n        readonly changeDetectorRef: ChangeDetectorRef,\n        private readonly ngZone: NgZone,\n        private readonly renderer: Renderer2,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        public elementRef: ElementRef,\n        @Optional() private readonly dir: Directionality,\n        @Optional() parentForm: NgForm,\n        @Optional() parentFormGroup: FormGroupDirective,\n        @Optional() private readonly parentFormField: McFormField,\n        @Self() @Optional() public ngControl: NgControl,\n        @Attribute('tabindex') tabIndex: string,\n        @Inject(MC_SELECT_SCROLL_STRATEGY) private readonly scrollStrategyFactory\n    ) {\n        super(elementRef, defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnInit() {\n        if (this.tree) {\n            this.tree.multiple = this.multiple;\n        }\n\n        this.stateChanges.next();\n\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this.panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this.panelOpen) {\n                    this.scrollTop = 0;\n                    this.openedChange.emit(true);\n                } else {\n                    this.openedChange.emit(false);\n                    this.panelDoneAnimating = false;\n                    this.overlayDir.offsetX = 0;\n                    this.changeDetectorRef.markForCheck();\n                }\n            });\n    }\n\n    ngAfterContentInit() {\n        if (!this.tree) { return; }\n\n        this.initKeyManager();\n\n        this.selectionModel = this.tree.selectionModel = new SelectionModel<McTreeOption>(this.multiple);\n        this.options = this.tree.options;\n        this.tree.autoSelect = this.autoSelect;\n\n        this.selectionModel.changed\n            .pipe(takeUntil(this.destroy))\n            .subscribe((event) => {\n                event.added.forEach((option) => option.select());\n                event.removed.forEach((option) => option.deselect());\n            });\n    }\n\n    ngAfterViewInit() {\n        if (!this.tree) { return; }\n\n        this.tags.changes\n            .subscribe(() => {\n                setTimeout(() => this.calculateHiddenItems(), 0);\n            });\n\n        this.options.changes\n            .pipe(startWith(null), takeUntil(this.destroy))\n            .subscribe(() => {\n                this.updateSelectedOptions();\n\n                this.resetOptions();\n            });\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) { this.updateErrorState(); }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes.disabled) {\n            this.stateChanges.next();\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroy.next();\n\n        this.destroy.complete();\n        this.stateChanges.complete();\n    }\n\n    /** `View -> model callback called when value changes` */\n    onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when select has been touched` */\n    onTouched = () => {};\n\n    toggle() {\n        if (this.panelOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    open() {\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) { return; }\n\n        this.triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this.triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n        this._panelOpen = true;\n        // this.tree.keyManager.withHorizontalOrientation(null);\n        this.calculateOverlayPosition();\n        this.highlightCorrectOption();\n        this.changeDetectorRef.markForCheck();\n\n        // Set the font size on the panel element once it exists.\n        this.ngZone.onStable.asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                if (this.triggerFontSize && this.overlayDir.overlayRef &&\n                    this.overlayDir.overlayRef.overlayElement) {\n                    this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this.triggerFontSize}px`;\n                }\n            });\n    }\n\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n\n            // this.tree.keyManager.setActiveItem(-1);\n\n            // this.tree.keyManager.withHorizontalOrientation(this.isRtl() ? 'rtl' : 'ltr');\n            this.changeDetectorRef.markForCheck();\n            this.onTouched();\n        }\n    }\n\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    // todo нужно доделать!\n    writeValue(value: any) {\n        if (this.options) {\n            this.setSelectionByValue(value);\n        }\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.onChange = fn;\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn: () => {}) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this.changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    get selected(): McTreeOption | McTreeOption[] {\n        return this.multiple ? this.selectionModel.selected : this.selectionModel.selected[0];\n    }\n\n    get triggerValue(): string {\n        if (this.empty) { return ''; }\n\n        return (this.selected as McTreeOption).viewValue;\n    }\n\n    get triggerValues(): McTreeOption[] {\n        if (this.empty) { return []; }\n\n        const selectedOptions = this.selectionModel.selected;\n\n        if (this.isRtl()) { selectedOptions.reverse(); }\n\n        return selectedOptions;\n    }\n\n    get empty(): boolean {\n        return !this.selectionModel || this.selectionModel.isEmpty();\n    }\n\n    isRtl(): boolean {\n        return this.dir ? this.dir.value === 'rtl' : false;\n    }\n\n    handleKeydown(event: KeyboardEvent) {\n        if (!this.disabled) {\n            if (this.panelOpen) {\n                this.handleOpenKeydown(event);\n            } else {\n                this.handleClosedKeydown(event);\n            }\n        }\n    }\n\n    /**\n     * When the panel content is done fading in, the panelDoneAnimating property is\n     * set so the proper class can be added to the panel.\n     */\n    onFadeInDone() {\n        this.panelDoneAnimating = this.panelOpen;\n        this.changeDetectorRef.markForCheck();\n    }\n\n    onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    onBlur() {\n        this._focused = false;\n\n        if (!this.disabled && !this.panelOpen) {\n            this.onTouched();\n            this.changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n\n    /** Callback that is invoked when the overlay panel has been attached. */\n    onAttached() {\n        this.overlayDir.positionChange\n            .pipe(take(1))\n            .subscribe(() => {\n                this.changeDetectorRef.detectChanges();\n                this.calculateOverlayOffsetX();\n                this.panel.nativeElement.scrollTop = this.scrollTop;\n            });\n    }\n\n    /** Returns the theme to be used on the panel. */\n    getPanelTheme(): string {\n        return this.parentFormField ? `mc-${this.parentFormField.color}` : '';\n    }\n\n    /** Focuses the select element. */\n    focus() {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    calculateOverlayScroll(selectedIndex: number, scrollBuffer: number, maxScroll: number): number {\n        const itemHeight = this.getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n\n        /* tslint:disable-next-line:no-magic-numbers */\n        const halfOptionHeight = itemHeight / 2;\n\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n\n    /** Invoked when an option is clicked. */\n    onRemoveSelectedOption(selectedOption: McTreeOption, $event) {\n        $event.stopPropagation();\n\n        this.options.forEach((option) => {\n            if (option.data === selectedOption.data) { option.deselect(); }\n        });\n\n        this.selectionModel.deselect(selectedOption);\n    }\n\n    calculateHiddenItems() {\n        if (this.empty || !this.multiple) { return; }\n\n        let visibleItems: number = 0;\n        const totalItemsWidth = this.getTotalItemsWidthInMatcher();\n        let totalVisibleItemsWidth: number = 0;\n        const itemMargin: number = 4;\n\n        this.tags.forEach((tag) => {\n            if (tag.nativeElement.offsetTop < tag.nativeElement.offsetHeight) {\n                totalVisibleItemsWidth += tag.nativeElement.getBoundingClientRect().width + itemMargin;\n                visibleItems++;\n            }\n        });\n\n        this.hiddenItems = this.selectionModel.selected.length - visibleItems;\n\n        if (this.hiddenItems) {\n            const itemsCounter = this.trigger.nativeElement.querySelector('.mc-tree-select__match-hidden-text');\n            const matcherList = this.trigger.nativeElement.querySelector('.mc-tree-select__match-list');\n\n            const itemsCounterShowed = itemsCounter.offsetTop < itemsCounter.offsetHeight;\n            // const itemsCounterWidth: number = itemsCounter.getBoundingClientRect().width;\n            const itemsCounterWidth: number = 86;\n\n            const matcherListWidth: number = matcherList.getBoundingClientRect().width;\n            const matcherWidth: number = matcherListWidth + itemsCounterWidth;\n\n            if (itemsCounterShowed && (totalItemsWidth < matcherWidth)) { this.hiddenItems = 0; }\n\n            if (\n                totalVisibleItemsWidth === matcherListWidth ||\n                (totalVisibleItemsWidth + itemsCounterWidth) < matcherListWidth\n            ) {\n                this.changeDetectorRef.markForCheck();\n\n                return ;\n            } else if (!itemsCounterShowed && (totalItemsWidth + itemsCounterWidth) > matcherWidth) {\n                this.hiddenItems++;\n            }\n        }\n\n        this.changeDetectorRef.markForCheck();\n    }\n\n    private updateSelectedOptions(): void {\n        this.selectionModel.selected.forEach((selectedOption) => {\n            this.options.forEach((option) => {\n                if (option.data === selectedOption.data) {\n                    this.selectionModel.deselect(selectedOption);\n                    this.selectionModel.select(option);\n\n                    option.select();\n                }\n            });\n        });\n    }\n\n    private getTotalItemsWidthInMatcher(): number {\n        const triggerClone = this.trigger.nativeElement.cloneNode(true);\n        triggerClone.querySelector('.mc-tree-select__match-hidden-text').remove();\n\n        this.renderer.setStyle(triggerClone, 'position', 'absolute');\n        this.renderer.setStyle(triggerClone, 'visibility', 'hidden');\n        this.renderer.setStyle(triggerClone, 'top', '-100%');\n        this.renderer.setStyle(triggerClone, 'left', '0');\n\n        this.renderer.appendChild(this.trigger.nativeElement, triggerClone);\n\n        let totalItemsWidth: number = 0;\n        const itemMargin: number = 4;\n        triggerClone.querySelectorAll('mc-tag').forEach((item) => {\n            totalItemsWidth += item.getBoundingClientRect().width as number + itemMargin;\n        });\n\n        triggerClone.remove();\n\n        return totalItemsWidth;\n    }\n\n    private handleClosedKeydown(event: KeyboardEvent) {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n        // Open the select on ALT + arrow key to match the native <select>\n        if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n            // prevents the page from scrolling down when pressing space\n            event.preventDefault();\n\n            this.open();\n        } else if (!this.multiple && this.tree.keyManager && this.tree.keyManager.onKeydown) {\n            this.tree.keyManager.onKeydown(event);\n        }\n    }\n\n    private handleOpenKeydown(event: KeyboardEvent) {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n\n            this.close();\n        } else if (keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW) {\n            return this.originalOnKeyDown.call(this.tree, event);\n        } else if (keyCode === HOME || keyCode === END) {\n            event.preventDefault();\n\n            if (keyCode === HOME) {\n                this.tree.keyManager.setFirstItemActive();\n            } else {\n                this.tree.keyManager.setLastItemActive();\n            }\n        } else if ((keyCode === ENTER || keyCode === SPACE) && this.tree.keyManager.activeItem) {\n            event.preventDefault();\n\n            this.tree.keyManager.activeItem.selectViaInteraction();\n        } else if (this.multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n\n            const hasDeselectedOptions = this.options.some((option) => !option.selected);\n\n            this.options.forEach((option) => {\n                if (hasDeselectedOptions && !option.disabled) {\n                    option.select();\n                } else {\n                    option.deselect();\n                }\n            });\n        } else {\n            const previouslyFocusedIndex = this.tree.keyManager.activeItemIndex;\n\n            this.tree.keyManager.onKeydown(event);\n\n            if (this.multiple && isArrowKey && event.shiftKey && this.tree.keyManager.activeItem &&\n                this.tree.keyManager.activeItemIndex !== previouslyFocusedIndex) {\n                this.tree.keyManager.activeItem.selectViaInteraction();\n            }\n        }\n    }\n\n    private initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this.setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n        });\n    }\n\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    private setSelectionByValue(value: any | any[]) {\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) { throw getMcSelectNonArrayValueError(); }\n\n            this.selectionModel.clear();\n            value.forEach((currentValue: any) => this.selectValue(currentValue));\n            this.sortValues();\n        } else {\n            this.selectionModel.clear();\n            const correspondingOption = this.selectValue(value);\n\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this.tree.keyManager.setActiveItem(correspondingOption);\n            }\n        }\n\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    private selectValue(value: any): McTreeOption | undefined {\n        const correspondingOption = this.options.find((option: McTreeOption) => {\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            } catch (error) {\n                if (isDevMode()) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n\n                return false;\n            }\n        });\n\n        if (correspondingOption) {\n            this.selectionModel.select(correspondingOption);\n        }\n\n        return correspondingOption;\n    }\n\n    private initKeyManager() {\n        this.originalOnKeyDown = this.tree.onKeyDown;\n\n        this.tree.onKeyDown = () => {};\n\n        this.tree.keyManager.tabOut\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            });\n\n        this.tree.keyManager.change\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this._panelOpen && this.panel) {\n                    this.scrollActiveOptionIntoView();\n                } else if (!this._panelOpen && !this.multiple && this.tree.keyManager.activeItem) {\n                    this.tree.keyManager.activeItem.selectViaInteraction();\n                }\n            });\n    }\n\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    private resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this.destroy);\n\n        this.optionSelectionChanges\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe((event) => {\n                this.onSelect(event.source, event.isUserInput);\n\n                if (event.isUserInput && !this.multiple && this._panelOpen) {\n                    this.close();\n                    this.focus();\n                }\n            });\n\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        // merge(...this.options.map((option) => option.stateChanges))\n        //     .pipe(takeUntil(changedOrDestroyed))\n        //     .subscribe(() => {\n        //         this.changeDetectorRef.markForCheck();\n        //         this.stateChanges.next();\n        //     });\n\n        this.setOptionIds();\n    }\n\n    /** Invoked when an option is clicked. */\n    private onSelect(option: McTreeOption, isUserInput: boolean) {\n        const wasSelected = this.selectionModel.isSelected(option);\n\n        if (option.value == null && !this.multiple) {\n            option.deselect();\n            this.selectionModel.clear();\n            this.propagateChanges(option.value);\n        } else {\n            if (option.selected) {\n                this.selectionModel.select(option);\n            } else {\n                this.selectionModel.deselect(option);\n            }\n\n            if (isUserInput) {\n                this.tree.keyManager.setActiveItem(option);\n            }\n\n            if (this.multiple) {\n                this.sortValues();\n\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mc-option`.\n                    this.focus();\n                }\n            }\n        }\n\n        if (wasSelected !== this.selectionModel.isSelected(option)) {\n            this.propagateChanges();\n        }\n\n        this.stateChanges.next();\n    }\n\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    private sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n\n            this.selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n\n    /** Emits change event to set the model value. */\n    private propagateChanges(fallbackValue?: any) {\n        let valueToEmit: any = null;\n\n        if (this.multiple) {\n            valueToEmit = (this.selected as any).map((option) => option.value);\n        } else {\n            valueToEmit = this.selected ? (this.selected as any).value : fallbackValue;\n        }\n\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this.onChange(valueToEmit);\n        this.selectionChange.emit(new McTreeSelectChange(this as any, valueToEmit));\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Records option IDs to pass to the aria-owns property. */\n    private setOptionIds() {\n        this.optionIds = this.options.map((option) => option.id).join(' ');\n    }\n\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    private highlightCorrectOption() {\n        if (this.tree.keyManager) {\n            if (this.empty) {\n                this.tree.keyManager.setFirstItemActive();\n            } else {\n                this.tree.keyManager.setActiveItem(this.selectionModel.selected[0]);\n            }\n        }\n    }\n\n    /** Scrolls the active option into view. */\n    private scrollActiveOptionIntoView() {\n        const activeOptionIndex = this.tree.keyManager.activeItemIndex || 0;\n\n        this.panel.nativeElement.scrollTop = getOptionScrollPosition(\n            activeOptionIndex,\n            this.getItemHeight(),\n            this.panel.nativeElement.scrollTop,\n            SELECT_PANEL_MAX_HEIGHT\n        );\n    }\n\n    /** Gets the index of the provided option in the option list. */\n    private getOptionIndex(option: McTreeOption): number | undefined {\n        // todo разобраться с этим срачем!\n        return this.options.reduce((result: number, current: McTreeOption, index: number) => {\n            /* tslint:disable-next-line:strict-type-predicates */\n            return result === undefined ? (option === current ? index : undefined) : result;\n        }, undefined);\n    }\n\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    private calculateOverlayPosition() {\n        const itemHeight = this.getItemHeight();\n        const items = this.getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n\n        // If no value is selected we open the popup to the first item.\n        const selectedOptionOffset =\n            this.empty ? 0 : this.getOptionIndex(this.selectionModel.selected[0])!;\n\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        /* tslint:disable-next-line:no-magic-numbers */\n        const scrollBuffer = panelHeight / 2;\n        this.scrollTop = this.calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this.offsetY = this.calculateOverlayOffsetY();\n\n        this.checkOverlayWithinViewport(maxScroll);\n    }\n\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    private calculateOverlayOffsetX() {\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this.viewportRuler.getViewportSize();\n        const isRtl = this.isRtl();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const paddingWidth = SELECT_PANEL_PADDING_X * 2;\n        let offsetX: number = SELECT_PANEL_PADDING_X;\n\n        // Invert the offset in LTR.\n        if (!isRtl) { offsetX *= -1; }\n\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        } else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    private calculateOverlayOffsetY(): number {\n        // const itemHeight = this.getItemHeight();\n        // const optionHeightAdjustment = (itemHeight - this.triggerRect.height) / 2;\n\n        // todo I'm not sure that we will use it\n        return 0;\n        // return Math.round(-optionHeightAdjustment);\n    }\n\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    private checkOverlayWithinViewport(maxScroll: number) {\n        const itemHeight = this.getItemHeight();\n        const viewportSize = this.viewportRuler.getViewportSize();\n\n        const topSpaceAvailable = this.triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable =\n            viewportSize.height - this.triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n        const panelHeightTop = Math.abs(this.offsetY);\n        const totalPanelHeight =\n            Math.min(this.getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this.triggerRect.height;\n\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this.adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        } else if (panelHeightTop > topSpaceAvailable) {\n            this.adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        } else {\n            this.transformOrigin = this.getOriginBasedOnOption();\n        }\n    }\n\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    private adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this.scrollTop -= distanceBelowViewport;\n        this.offsetY -= distanceBelowViewport;\n        this.transformOrigin = this.getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this.scrollTop <= 0) {\n            this.scrollTop = 0;\n            this.offsetY = 0;\n            this.transformOrigin = `50% bottom 0px`;\n        }\n    }\n\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    private adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number, maxScroll: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this.scrollTop += distanceAboveViewport;\n        this.offsetY += distanceAboveViewport;\n        this.transformOrigin = this.getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this.scrollTop >= maxScroll) {\n            this.scrollTop = maxScroll;\n            this.offsetY = 0;\n            this.transformOrigin = `50% top 0px`;\n\n            return;\n        }\n    }\n\n    /** Sets the transform origin point based on the selected option. */\n    private getOriginBasedOnOption(): string {\n        const itemHeight = this.getItemHeight();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const optionHeightAdjustment = (itemHeight - this.triggerRect.height) / 2;\n        /* tslint:disable-next-line:no-magic-numbers */\n        const originY = Math.abs(this.offsetY) - optionHeightAdjustment + itemHeight / 2;\n\n        return `50% ${originY}px 0px`;\n    }\n\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    private getItemCount(): number {\n        return this.options.length;\n    }\n\n    /** Calculates the height of the select's options. */\n    private getItemHeight(): number {\n        // todo доделать\n        /* tslint:disable-next-line:no-magic-numbers */\n        return 32;\n        // return this.triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { CdkTreeModule } from '@ptsecurity/cdk/tree';\nimport { MC_SELECT_SCROLL_STRATEGY_PROVIDER, McPseudoCheckboxModule } from '@ptsecurity/mosaic/core';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\nimport { McTagsModule } from '@ptsecurity/mosaic/tags';\nimport { McTreeModule } from '@ptsecurity/mosaic/tree';\n\nimport { McTreeSelect, McTreeSelectTrigger } from './tree-select.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        CdkTreeModule,\n        McTreeModule,\n        McIconModule,\n        McTagsModule,\n        McPseudoCheckboxModule\n    ],\n    exports: [McTreeSelect, McTreeSelectTrigger, CommonModule],\n    declarations: [McTreeSelect, McTreeSelectTrigger],\n    providers: [MC_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class McTreeSelectModule {}\n","import {\n    Directive, DoCheck, ElementRef, Inject,\n    Input, OnChanges, OnDestroy, Optional,\n    Self, InjectionToken, NgZone, OnInit\n} from '@angular/core';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { fromEvent, Subscription, Subject } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\n\n\nexport const MC_TEXTAREA_VALUE_ACCESSOR =\n    new InjectionToken<{ value: any }>('MC_TEXTAREA_VALUE_ACCESSOR');\n\nlet nextUniqueId = 0;\n\nconst ROW_SEPARATOR = '\\n';\n\nexport class McTextareaBase {\n    constructor(public defaultErrorStateMatcher: ErrorStateMatcher,\n                public parentForm: NgForm,\n                public parentFormGroup: FormGroupDirective,\n                public ngControl: NgControl) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McTextareaMixinBase: CanUpdateErrorStateCtor & typeof McTextareaBase = mixinErrorState(McTextareaBase);\n\n@Directive({\n    selector: 'textarea[mcTextarea]',\n    exportAs: 'mcTextarea',\n    host: {\n        class: 'mc-textarea',\n        '[class.mc-textarea-resizable]': '!canGrow',\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[attr.aria-invalid]': 'errorState',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '(blur)': 'focusChanged(false)',\n        '(focus)': 'focusChanged(true)'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McTextarea }]\n})\nexport class McTextarea extends McTextareaMixinBase implements McFormFieldControl<any>, OnInit, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n\n    @Input() canGrow: boolean = true;\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-textarea';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this.valueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this.valueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n\n    protected uid = `mc-textsrea-${nextUniqueId++}`;\n    protected previousNativeValue: any;\n    protected _disabled = false;\n    protected _id: string;\n    protected _required = false;\n\n    private valueAccessor: { value: any };\n    private growSubscription: Subscription;\n\n    private lineHeight: number = 0;\n    private freeRowsHeight: number = 0;\n    private minHeight: number = 0;\n\n    constructor(protected elementRef: ElementRef,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() parentForm: NgForm,\n                @Optional() parentFormGroup: FormGroupDirective,\n                defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_TEXTAREA_VALUE_ACCESSOR) inputValueAccessor: any,\n                private ngZone: NgZone) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n        // If no input value accessor was explicitly specified, use the element as the textarea value\n        // accessor.\n        this.valueAccessor = inputValueAccessor || this.elementRef.nativeElement;\n\n        this.previousNativeValue = this.value;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n\n        const growObserver = fromEvent(elementRef.nativeElement, 'input')\n            /*.pipe(\n                map((event: any) => this.getGrowHeight()),\n                // map((event: any) => event.target.scrollHeight),\n                distinctUntilChanged()\n            )*/;\n        this.growSubscription = growObserver.subscribe(this.grow.bind(this));\n    }\n\n    ngOnInit() {\n        setTimeout(() => this.grow(), 0);\n        this.lineHeight = parseInt(getComputedStyle(this.elementRef.nativeElement).lineHeight!, 10);\n\n        const paddingTop = parseInt(getComputedStyle(this.elementRef.nativeElement).paddingTop!, 10);\n        const paddingBottom = parseInt(getComputedStyle(this.elementRef.nativeElement).paddingBottom!, 10);\n\n        // tslint:disable-next-line:no-magic-numbers\n        this.minHeight = this.lineHeight * 2 + paddingTop + paddingBottom;\n        this.freeRowsHeight = this.lineHeight;\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        this.growSubscription.unsubscribe();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this.dirtyCheckNativeValue();\n    }\n\n    /** Grow textarea height to avoid vertical scroll  */\n    grow() {\n        if (!this.canGrow) {\n            return;\n        }\n\n        this.ngZone.runOutsideAngular(() => {\n            const textarea = this.elementRef.nativeElement;\n\n            const outerHeight = parseInt(window.getComputedStyle(textarea).height!, 10);\n            const diff = outerHeight - textarea.clientHeight;\n\n            textarea.style.height = 0; // this line is important to height recalculation\n\n            const height = Math.max(this.minHeight, textarea.scrollHeight + diff + this.freeRowsHeight);\n            textarea.style.height = `${height}px`;\n        });\n    }\n\n    /** Focuses the textarea. */\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /** Callback for the cases where the focused state of the textarea changes. */\n    focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this.elementRef.nativeElement.value && !this.isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Does some manual dirty checking on the native textarea `value` property. */\n    protected dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this.previousNativeValue !== newValue) {\n            this.previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Checks whether the textarea is invalid based on the native validation. */\n    protected isBadInput(): boolean {\n        // The `validity` property won't be present on platform-server.\n        const validity = (this.elementRef.nativeElement as HTMLTextAreaElement).validity;\n\n        return validity && validity.badInput;\n    }\n\n    private getGrowHeight(): number {\n        const textarea = this.elementRef.nativeElement;\n        const outerHeight = parseInt(window.getComputedStyle(textarea).height!.toString(), 10);\n        const diff = outerHeight - textarea.clientHeight;\n\n        return Math.max(this.minHeight, textarea.scrollHeight + diff);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McTextarea } from './textarea.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule, FormsModule],\n    exports: [McTextarea],\n    declarations: [McTextarea]\n})\nexport class McTextareaModule {\n}\n","import {\n    Directive,\n    DoCheck,\n    ElementRef,\n    forwardRef,\n    Inject,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Optional,\n    Renderer2,\n    Self\n} from '@angular/core';\nimport {\n    ControlValueAccessor,\n    FormControl,\n    FormGroupDirective,\n    NG_VALIDATORS,\n    NgControl,\n    NgForm,\n    ValidationErrors,\n    ValidatorFn,\n    Validators\n} from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { MC_INPUT_VALUE_ACCESSOR } from '@ptsecurity/mosaic/input';\nimport {\n    noop,\n    Subject\n} from 'rxjs';\n\nimport {\n    ARROW_DOWN_KEYCODE,\n    ARROW_LEFT_KEYCODE,\n    ARROW_RIGHT_KEYCODE,\n    ARROW_UP_KEYCODE,\n    DEFAULT_TIME_FORMAT,\n    HOURS_PER_DAY,\n    HOURS_MINUTES_REGEXP,\n    HOURS_MINUTES_SECONDS_REGEXP,\n    HOURS_ONLY_REGEXP,\n    MINUTES_PER_HOUR,\n    SECONDS_PER_MINUTE,\n    TIMEFORMAT_PLACEHOLDERS,\n    TimeFormats,\n    TimeParts\n} from './timepicker.constants';\n\n\nlet uniqueComponentIdSuffix: number = 0;\n\nconst formValidators: WeakMap<FormControl, ValidatorFn | null> = new WeakMap();\nconst formValidatorOnChangeRegistrators: WeakMap<FormControl, () => void> = new WeakMap();\nconst validatorOnChange = (c: FormControl) => {\n    const validatorOnChangeHandler = formValidatorOnChangeRegistrators.get(c);\n\n    if (validatorOnChangeHandler !== undefined) { validatorOnChangeHandler(); }\n};\n\nexport class McTimepickerBase {\n    constructor(\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl) { }\n}\n\n// tslint:disable-next-line naming-convention\nexport const McTimepickerMixinBase:\n    CanUpdateErrorStateCtor &\n    typeof McTimepickerBase = mixinErrorState(McTimepickerBase);\n\n@Directive({\n    selector: 'input[mcTimepicker]',\n    exportAs: 'mcTimepickerInput',\n    host: {\n        class: 'mc-timepicker mc-input',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '[attr.time-format]': 'timeFormat',\n        '[attr.min-time]': 'minTime',\n        '[attr.max-time]': 'maxTime',\n        '[attr.value]': 'value',\n        '[attr.aria-invalid]': 'errorState',\n        '(blur)': 'onBlur()',\n        '(focus)': 'focusChanged(true)',\n        '(input)': 'onInput()',\n        '(paste)': 'onPaste($event)',\n        '(keydown)': 'onKeyDown($event)'\n    },\n    providers: [\n        {\n            provide: NG_VALIDATORS,\n            useValue: {\n                validate(c: FormControl) {\n                    // TODO This is `workaround` to bind singleton-like Validator implementation to\n                    // context of each validated component. This MUST be realized in proper way!\n                    if (this.__validatorOnChangeHandler !== undefined) {\n                        formValidatorOnChangeRegistrators.set(c, this.__validatorOnChangeHandler);\n                        this.__validatorOnChangeHandler = undefined;\n                    }\n                    const validator = formValidators.get(c);\n\n                    return validator ? validator(c) : null;\n                },\n                registerOnValidatorChange(fn: () => void): void {\n                    this.__validatorOnChangeHandler = fn;\n                }\n            },\n            multi: true\n        },\n        {\n            provide: McFormFieldControl,\n            useExisting: forwardRef(() => McTimepicker)\n        }\n    ]\n\n})\nexport class McTimepicker extends McTimepickerMixinBase\n    implements McFormFieldControl<any>,\n        OnChanges,\n        OnDestroy,\n        DoCheck,\n        CanUpdateErrorState,\n        ControlValueAccessor {\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-timepicker';\n\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) { return this.ngControl.disabled; }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n        }\n\n        this.stateChanges.next();\n    }\n\n    @Input()\n    get id(): string { return this._id; }\n\n    set id(value: string) { this._id = value || this.uid; }\n\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean { return this._required; }\n\n    set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string { return this.inputValueAccessor.value; }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this.inputValueAccessor.value = value;\n            this.applyInputChanges();\n        }\n    }\n\n    @Input('time-format')\n    get timeFormat(): TimeFormats { return this._timeFormat; }\n\n    set timeFormat(formatValue: TimeFormats) {\n        this._timeFormat = Object\n            .keys(TimeFormats)\n            .map((timeFormatKey) => TimeFormats[timeFormatKey])\n            .indexOf(formatValue) > -1 ? formatValue : DEFAULT_TIME_FORMAT;\n\n        validatorOnChange(<FormControl> this.ngControl.control);\n        this.placeholder = TIMEFORMAT_PLACEHOLDERS[this._timeFormat];\n    }\n\n    @Input('min-time')\n    get minTime(): string | null { return this._minTime; }\n\n    set minTime(minValue: string | null) {\n        this._minTime = minValue;\n        this.minDateTime = minValue !== null ? this.getDateFromTimeString(minValue) : undefined;\n        validatorOnChange(<FormControl> this.ngControl.control);\n    }\n\n    @Input('max-time')\n    get maxTime(): string | null { return this._maxTime; }\n\n    set maxTime(maxValue: string | null) {\n        this._maxTime = maxValue;\n        this.maxDateTime = maxValue !== null ? this.getDateFromTimeString(maxValue) : undefined;\n        validatorOnChange(<FormControl> this.ngControl.control);\n    }\n\n    private _id: string;\n    private readonly uid = `mc-timepicker-${uniqueComponentIdSuffix++}`;\n    private _disabled: boolean;\n    private _required: boolean;\n    private previousNativeValue: any;\n    private readonly inputValueAccessor: { value: any };\n    private onChange: (value: any) => void;\n    private onTouched: () => void;\n    private _timeFormat: TimeFormats;\n    private _minTime: string | null = null;\n    private minDateTime: Date | undefined;\n    private _maxTime: string | null = null;\n    private maxDateTime: Date | undefined;\n    private currentDateTimeInput: Date | undefined;\n\n    constructor(private readonly elementRef: ElementRef,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() parentForm: NgForm,\n                @Optional() parentFormGroup: FormGroupDirective,\n                defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n                private readonly renderer: Renderer2) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this.inputValueAccessor = inputValueAccessor || this.elementRef.nativeElement;\n\n        this.previousNativeValue = this.value;\n        this.onChange = noop;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n\n        this.placeholder = TIMEFORMAT_PLACEHOLDERS[DEFAULT_TIME_FORMAT];\n\n        // Instead of NG_VALUE_ACCESSOR (https://github.com/angular/material2/issues/8158#issuecomment-344618103)\n        if (this.ngControl) { this.ngControl.valueAccessor = this; }\n\n        // Substitute initial empty validator with validator linked to directive object instance (workaround)\n\n        formValidators.set(\n            <FormControl> this.ngControl.control,\n            Validators.compose([\n                () => this.parseValidator(),\n                () => this.minTimeValidator(),\n                () => this.maxTimeValidator()\n            ])\n        );\n    }\n\n    ngOnChanges(): void {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy(): void {\n        this.stateChanges.complete();\n    }\n\n    ngDoCheck(): void {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this.dirtyCheckNativeValue();\n    }\n\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    focusChanged(isFocused: boolean): void {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.onTouched();\n            this.stateChanges.next();\n        }\n    }\n\n    onBlur() {\n        this.applyInputChanges();\n        this.focusChanged(false);\n    }\n\n    onPaste($event) {\n        $event.preventDefault();\n        const clipboardUserInput: string = $event.clipboardData.getData('text');\n\n        if (this.getDateFromTimeString(clipboardUserInput) === undefined) { return; }\n\n        this.elementRef.nativeElement.value = clipboardUserInput;\n        this.onInput();\n    }\n\n    onInput() {\n        const initialCursorStart: number = this.elementRef.nativeElement.selectionStart;\n        const initialCursorEnd: number = this.elementRef.nativeElement.selectionEnd;\n        let isAutocompleteTriggered: boolean = false;\n\n        const {\n            hoursOnly,\n            hoursAndMinutes,\n            hoursAndMinutesAndSeconds\n        } = this.getParsedTimeParts(this.elementRef.nativeElement.value);\n\n        // tslint:disable no-magic-numbers\n        if (hoursOnly &&\n            hoursOnly[1] &&\n            hoursOnly[1].length === 2) {\n            isAutocompleteTriggered = true;\n        } else if (hoursAndMinutes &&\n            hoursAndMinutes[1].length === 1 &&\n            hoursAndMinutes[2] &&\n            hoursAndMinutes[2].length === 2) {\n            isAutocompleteTriggered = true;\n        } else if (hoursAndMinutesAndSeconds &&\n            hoursAndMinutesAndSeconds[1].length === 2 &&\n            hoursAndMinutesAndSeconds[2].length === 2 &&\n            hoursAndMinutesAndSeconds[3] &&\n            hoursAndMinutesAndSeconds[3].length === 2) {\n            isAutocompleteTriggered = true;\n        }\n        // tslint:enable no-magic-numbers\n\n        this.applyInputChanges({ doTimestringReformat: isAutocompleteTriggered });\n\n        this.elementRef.nativeElement.selectionStart = initialCursorStart;\n        this.elementRef.nativeElement.selectionEnd = initialCursorEnd;\n\n        if (isAutocompleteTriggered && this.ngControl.errors === null) {\n            this.createSelectionOfTimeComponentInInput(initialCursorStart + 1);\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this.elementRef.nativeElement.value && !this.isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    writeValue(value: Date | null): void {\n        if (value !== null) {\n            this.renderer.setProperty(this.elementRef.nativeElement,\n                'value',\n                this.getTimeStringFromDate(value, this.timeFormat)\n            );\n        }\n        this.onChange(value || null);\n        this.applyInputChanges();\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n\n        const keyCode: string = this.getKeyCode(event);\n\n        if (keyCode === ARROW_UP_KEYCODE || keyCode === ARROW_DOWN_KEYCODE) {\n            this.upDownTimeByArrowKeys(event);\n        }\n        if (keyCode === ARROW_LEFT_KEYCODE || keyCode === ARROW_RIGHT_KEYCODE) {\n            this.switchSelectionBetweenTimeparts(event);\n        }\n    }\n\n    registerOnChange(fn: (value: Date) => void): void {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    /** Does some manual dirty checking on the native input `value` property. */\n    private dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this.previousNativeValue !== newValue) {\n            this.previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Checks whether the input is invalid based on the native validation. */\n    private isBadInput(): boolean {\n        const validity = (<HTMLInputElement> this.elementRef.nativeElement).validity;\n\n        return validity && validity.badInput;\n    }\n\n    private applyInputChanges(applyParams: {\n        changedTime?: Date;\n        doTimestringReformat?: boolean;\n    } = {}): void {\n        const { changedTime, doTimestringReformat = true } = applyParams;\n        const timeToApply: Date | undefined = changedTime ||\n            this.getDateFromTimeString(this.elementRef.nativeElement.value);\n        this.currentDateTimeInput = timeToApply;\n\n        if (doTimestringReformat && timeToApply !== undefined) {\n            const selectionStart: number = this.elementRef.nativeElement.selectionStart;\n            const selectionEnd: number = this.elementRef.nativeElement.selectionEnd;\n            this.renderer.setProperty(\n                this.elementRef.nativeElement,\n                'value',\n                this.getTimeStringFromDate(timeToApply, this.timeFormat));\n            this.elementRef.nativeElement.selectionStart = selectionStart;\n            this.elementRef.nativeElement.selectionEnd = selectionEnd;\n        }\n\n        (<FormControl> this.ngControl.control).updateValueAndValidity();\n        const result = this.ngControl.errors === null && timeToApply !== undefined ? timeToApply : null;\n        this.onChange(result);\n        this.stateChanges.next();\n    }\n\n    private upDownTimeByArrowKeys(event: KeyboardEvent): void {\n        event.preventDefault();\n\n        let changedTime: Date | undefined = this.currentDateTimeInput;\n        if (changedTime !== undefined) {\n            const cursorPos = this.elementRef.nativeElement.selectionStart;\n\n            const modifiedTimePart = this.getTimeEditMetrics(cursorPos)\n                .modifiedTimePart;\n            const keyCode: string = this.getKeyCode(event);\n            if (keyCode === ARROW_UP_KEYCODE) { changedTime = this.incrementTime(changedTime, modifiedTimePart); }\n            if (keyCode === ARROW_DOWN_KEYCODE) { changedTime = this.decrementTime(changedTime, modifiedTimePart); }\n            this.applyInputChanges({ changedTime });\n            this.createSelectionOfTimeComponentInInput(cursorPos);\n        }\n    }\n\n    private switchSelectionBetweenTimeparts(event: KeyboardEvent): void {\n        const changedTime: Date | undefined = this.currentDateTimeInput;\n        const keyCode: string = this.getKeyCode(event);\n\n        if (changedTime !== undefined) {\n            let cursorPos: number = this.elementRef.nativeElement.selectionStart;\n            if (keyCode === ARROW_LEFT_KEYCODE) {\n                cursorPos = this.getCursorPositionOfPrevTimePartStart(cursorPos, this.elementRef.nativeElement.value);\n            } else if (keyCode === ARROW_RIGHT_KEYCODE) {\n                cursorPos = this.getCursorPositionOfNextTimePartStart(cursorPos, this.elementRef.nativeElement.value);\n            }\n            this.createSelectionOfTimeComponentInInput(cursorPos);\n        }\n    }\n\n    /**\n     * @description Microsoft EDGE doesn't support KeyboaedEvent.code thus we need this helper\n     */\n    private getKeyCode(event: KeyboardEvent): string {\n        return event.code || event.key;\n    }\n\n    private createSelectionOfTimeComponentInInput(cursorPos: number): void {\n        setTimeout(() => {\n            const newEditParams = this.getTimeEditMetrics(cursorPos);\n            this.elementRef.nativeElement.selectionStart = newEditParams.cursorStartPosition;\n            this.elementRef.nativeElement.selectionEnd = newEditParams.cursorEndPosition;\n        });\n    }\n\n    private incrementTime(dateVal: Date,\n                          whatToIncrement: TimeParts = TimeParts.seconds): Date {\n        let { hours, minutes, seconds } = this.getTimeDigitsFromDate(dateVal);\n\n        switch (whatToIncrement) {\n            case TimeParts.hours:\n                hours++;\n                break;\n            case TimeParts.minutes:\n                minutes++;\n                break;\n            case TimeParts.seconds:\n                seconds++;\n                break;\n            default:\n        }\n\n        if (seconds > SECONDS_PER_MINUTE) { seconds = 0; }\n\n        if (minutes > MINUTES_PER_HOUR) { minutes = 0; }\n\n        if (hours > HOURS_PER_DAY) { hours = 0; }\n\n        return <Date> this.getDateFromTimeDigits(hours, minutes, seconds);\n    }\n\n    /**\n     * @description Decrement part of time\n     */\n    private decrementTime(dateVal: Date,\n                          whatToDecrement: TimeParts = TimeParts.seconds): Date {\n        let { hours, minutes, seconds } = this.getTimeDigitsFromDate(dateVal);\n\n        switch (whatToDecrement) {\n            case TimeParts.hours:\n                hours--;\n                break;\n            case TimeParts.minutes:\n                minutes--;\n                break;\n            case TimeParts.seconds:\n                seconds--;\n                break;\n            default:\n        }\n\n        if (seconds < 0) { seconds = SECONDS_PER_MINUTE; }\n\n        if (minutes < 0) { minutes = MINUTES_PER_HOUR; }\n\n        if (hours < 0) { hours = HOURS_PER_DAY; }\n\n        return <Date> this.getDateFromTimeDigits(hours, minutes, seconds);\n    }\n\n    private getCursorPositionOfPrevTimePartStart(cursorPos: number, timeString: string): number {\n        return cursorPos === 0 ? timeString.length : cursorPos - 1;\n    }\n\n    private getCursorPositionOfNextTimePartStart(cursorPos: number,\n                                                 timeString: string,\n                                                 timeDevider: string = ':'): number {\n        const nextDividerPos: number = timeString.indexOf(timeDevider, cursorPos);\n\n        return nextDividerPos !== undefined ? nextDividerPos + 1 : 0;\n    }\n\n    /**\n     * @description Get params for arrow-keys (up/down) time valie edit.\n     * @param cursorPosition Current cursor position in timeString\n     */\n    private getTimeEditMetrics(cursorPosition: number): {\n        modifiedTimePart: TimeParts;\n        cursorStartPosition: number;\n        cursorEndPosition: number;\n    } {\n        const timeString: string = this.elementRef.nativeElement.value;\n        let modifiedTimePart: TimeParts;\n        let cursorStartPosition: number;\n        let cursorEndPosition: number;\n        const hoursIndex = 0;\n        const minutesIndex = timeString.indexOf(':', hoursIndex + 1);\n        const secondsIndex = minutesIndex !== -1 ? timeString.indexOf(':', minutesIndex + 1) : -1;\n\n        if (secondsIndex !== -1 && cursorPosition > secondsIndex) {\n            modifiedTimePart = TimeParts.seconds;\n            cursorStartPosition = secondsIndex + 1;\n            cursorEndPosition = timeString.length;\n        } else if (minutesIndex !== -1 && cursorPosition > minutesIndex) {\n            modifiedTimePart = TimeParts.minutes;\n            cursorStartPosition = minutesIndex + 1;\n            cursorEndPosition = secondsIndex > -1 ? secondsIndex : timeString.length;\n        } else {\n            modifiedTimePart = TimeParts.hours;\n            cursorStartPosition = hoursIndex;\n            cursorEndPosition = minutesIndex !== -1 ? minutesIndex : timeString.length;\n        }\n\n        return {\n            modifiedTimePart,\n            cursorStartPosition,\n            cursorEndPosition\n        };\n    }\n\n    /**\n     * @description Create time string for displaying inside input element of UI\n     */\n    private getTimeStringFromDate(tempVal: Date,\n                                  timeFormat: TimeFormats = DEFAULT_TIME_FORMAT): string {\n        const hours: string = this.getNumberWithLeadingZero(tempVal.getHours());\n        const minutes: string = this.getNumberWithLeadingZero(tempVal.getMinutes());\n        const seconds: string = this.getNumberWithLeadingZero(tempVal.getSeconds());\n\n        const formattedTimeGenerators = {\n            [TimeFormats.HHmm]: () => `${hours}:${minutes}`,\n            [TimeFormats.HHmmss]: () => `${hours}:${minutes}:${seconds}`\n        };\n\n        return formattedTimeGenerators[timeFormat]();\n    }\n\n    private getParsedTimeParts(timeString: string): {\n        hoursOnly: any;\n        hoursAndMinutes: any;\n        hoursAndMinutesAndSeconds: any;\n    } {\n        const hoursAndMinutesAndSeconds = timeString.match(HOURS_MINUTES_SECONDS_REGEXP);\n        const hoursAndMinutes = timeString.match(HOURS_MINUTES_REGEXP);\n        const hoursOnly = timeString.match(HOURS_ONLY_REGEXP);\n\n        return {\n            hoursOnly,\n            hoursAndMinutes,\n            hoursAndMinutesAndSeconds\n        };\n    }\n\n    /**\n     * @description Create Date object from separate parts of time\n     */\n    private getDateFromTimeDigits(hours: number, minutes: number, seconds: number = 0): Date | undefined {\n        return this.getDateFromTimeString(`${hours}:${minutes}:${seconds}`);\n    }\n\n    private getDateFromTimeString(timeString: string | undefined): Date | undefined {\n        // TODO Use moment-js\n        if (timeString === undefined) { return; }\n\n        const {\n            hoursOnly,\n            hoursAndMinutes,\n            hoursAndMinutesAndSeconds\n        } = this.getParsedTimeParts(timeString);\n\n        if (timeString.trim().length === 0 ||\n            hoursOnly === null && hoursAndMinutes === null && hoursAndMinutesAndSeconds === null) {\n            return;\n        }\n\n        // tslint:disable no-magic-numbers\n        let hours: number = 0;\n        let minutes: number = 0;\n        let seconds: number = 0;\n\n        if (hoursOnly) {\n            hours = Number(hoursOnly[1]);\n        } else if (hoursAndMinutes) {\n            hours = Number(hoursAndMinutes[1]);\n            minutes = Number(hoursAndMinutes[2]);\n        } else if (hoursAndMinutesAndSeconds) {\n            hours = Number(hoursAndMinutesAndSeconds[1]);\n            minutes = Number(hoursAndMinutesAndSeconds[2]);\n            seconds = Number(hoursAndMinutesAndSeconds[3]);\n        }\n        // const timestamp: number = Date.parse(fullDateString);\n        const resultDate: Date = new Date(1970, 0, 1, hours, minutes, seconds);\n        // tslint:enable no-magic-numbers\n\n        return isNaN(resultDate.getTime()) ? undefined : resultDate;\n    }\n\n    private getNumberWithLeadingZero(digit: number): string {\n        const MAX_DIGIT_WITH_LEADING_ZERO: number = 9;\n\n        return digit > MAX_DIGIT_WITH_LEADING_ZERO ? `${digit}` : `0${digit}`;\n    }\n\n    private getTimeDigitsFromDate(dateVal: Date): { hours: number; minutes: number; seconds: number } {\n        return {\n            hours: dateVal.getHours(),\n            minutes: dateVal.getMinutes(),\n            seconds: dateVal.getSeconds()\n        };\n    }\n\n    private parseValidator(): ValidationErrors | null {\n        return this.currentDateTimeInput === undefined ?\n            { mcTimepickerParse: { text: this.elementRef.nativeElement.value } } :\n            null;\n    }\n\n    private minTimeValidator(): ValidationErrors | null {\n\n        if (this.currentDateTimeInput !== undefined &&\n            this.minDateTime !== undefined &&\n            this.isTimeLowerThenMin(this.currentDateTimeInput)) {\n            return { mcTimepickerLowerThenMintime: { text: this.elementRef.nativeElement.value } };\n        }\n\n        return null;\n    }\n\n    private maxTimeValidator(): ValidationErrors | null {\n        if (this.currentDateTimeInput !== undefined &&\n            this.maxDateTime !== undefined &&\n            this.isTimeGreaterThenMax(this.currentDateTimeInput)) {\n            return { mcTimepickerHigherThenMaxtime: { text: this.elementRef.nativeElement.value } };\n        }\n\n        return null;\n    }\n\n    private isTimeLowerThenMin(timeToCompare: Date): boolean {\n        return timeToCompare.getTime() - (<Date> this.minDateTime).getTime() < 0;\n    }\n\n    private isTimeGreaterThenMax(timeToCompare: Date): boolean {\n        return timeToCompare.getTime() - (<Date> this.maxDateTime).getTime() >= 0;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McTimepicker } from './timepicker';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        FormsModule\n    ],\n    declarations: [\n        McTimepicker\n    ],\n    exports: [\n        McTimepicker\n    ]\n})\nexport class McTimepickerModule {}\n","import { InjectionToken } from '@angular/core';\n\n\n/** Injection token that can be used to access the data that was passed in to a sidepanel. */\nexport const MC_SIDEPANEL_DATA = new InjectionToken<any>('McSidepanelData');\n\nexport enum McSidepanelPosition {\n    Right = 'right',\n    Left = 'left',\n    Top = 'top',\n    Bottom = 'bottom'\n}\n\nexport class McSidepanelConfig<D = any> {\n    /** ID for the sidepanel. If omitted, a unique one will be generated. */\n    id?: string;\n\n    /** Data being injected into the child component. */\n    data?: D | null = null;\n\n    position?: McSidepanelPosition = McSidepanelPosition.Right;\n\n    /** Whether the sidepanel has a backdrop. */\n    hasBackdrop?: boolean = true;\n\n    /** When we open multiple sidepanels, backdrop appears only once, except cases then this flag is true. */\n    requiredBackdrop?: boolean = false;\n\n    /** Whether the user can use escape or clicking outside to close the sidepanel. */\n    disableClose?: boolean = false;\n\n    /** Custom class for the overlay pane. */\n    overlayPanelClass?: string | string[] = '';\n}\n","import { animate, AnimationTriggerMetadata, state, style, transition, trigger } from '@angular/animations';\nimport { AnimationCurves } from '@ptsecurity/mosaic/core';\n\nimport { McSidepanelPosition } from './sidepanel-config';\n\n\nexport enum McSidepanelAnimationState {\n    Void = 'void',\n    Visible = 'visible',\n    Hidden = 'hidden'\n}\n\n// TODO Find a way to use dynamic keys and avoid error \"Expression form not supported.\"\n// tslint:disable-next-line\nexport const mcSidepanelTransformAnimation: Record<McSidepanelPosition, { in: string; out: string }> = {\n    right: { in: 'translateX(100%)', out: 'translateX(0%)' },\n    left: { in: 'translateX(-100%)', out: 'translateX(0%)' },\n    top: { in: 'translateY(-100%)', out: 'translateY(0%)' },\n    bottom: { in: 'translateY(100%)', out: 'translateY(0%)' }\n};\n\nexport const mcSidepanelAnimations: {\n    readonly sidepanelState: AnimationTriggerMetadata;\n} = {\n    sidepanelState: trigger('state', [\n        state('hidden',\n            style({ transform: '{{transformIn}}' }),\n            { params: { transformIn: mcSidepanelTransformAnimation[McSidepanelPosition.Right].in }}\n        ),\n        state('visible',\n            style({ transform: '{{transformOut}}' }),\n            { params: { transformOut: mcSidepanelTransformAnimation[McSidepanelPosition.Right].out }}\n        ),\n        transition('visible => void, visible => hidden',\n            animate(`200ms ${AnimationCurves.AccelerationCurve}`)),\n        transition('void => visible',\n            animate(`200ms ${AnimationCurves.DecelerationCurve}`))\n    ])\n};\n","import { AnimationEvent } from '@angular/animations';\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ComponentRef,\n    ElementRef,\n    EmbeddedViewRef,\n    EventEmitter, Inject, InjectionToken,\n    OnDestroy,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal } from '@ptsecurity/cdk/portal';\n\nimport {\n    mcSidepanelAnimations,\n    McSidepanelAnimationState,\n    mcSidepanelTransformAnimation\n} from './sidepanel-animations';\n\nimport { McSidepanelConfig, McSidepanelPosition } from './sidepanel-config';\n\n\nexport const MC_SIDEPANEL_WITH_INDENT =\n    new InjectionToken<boolean>('mc-sidepanel-with-indent');\n\nexport const MC_SIDEPANEL_WITH_SHADOW =\n    new InjectionToken<boolean>('mc-sidepanel-with-shadow');\n\n@Component({\n    selector: 'mc-sidepanel-container',\n    templateUrl: './sidepanel-container.component.html',\n    styleUrls: ['./sidepanel.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    animations: [mcSidepanelAnimations.sidepanelState],\n    host: {\n        class: 'mc-sidepanel-container',\n        tabindex: '-1',\n        role: 'dialog',\n        'aria-modal': 'true',\n        '[attr.id]': 'id',\n        '[@state]': `{\n            value: animationState,\n            params: animationTransform\n        }`,\n        '(@state.start)': 'onAnimation($event)',\n        '(@state.done)': 'onAnimation($event)'\n    }\n})\nexport class McSidepanelContainerComponent extends BasePortalOutlet implements OnDestroy {\n    /** ID for the container DOM element. */\n    id: string;\n\n    /** The portal outlet inside of this container into which the content will be loaded. */\n    @ViewChild(CdkPortalOutlet) portalOutlet: CdkPortalOutlet;\n\n    /** The state of the sidepanel animations. */\n    animationState: McSidepanelAnimationState = McSidepanelAnimationState.Void;\n\n    animationTransform: { transformIn: string; transformOut: string };\n\n    /** Emits whenever the state of the animation changes. */\n    animationStateChanged = new EventEmitter<AnimationEvent>();\n\n    /** Whether the component has been destroyed. */\n    private destroyed: boolean;\n\n    constructor(\n        private elementRef: ElementRef<HTMLElement>,\n        private changeDetectorRef: ChangeDetectorRef,\n        public sidepanelConfig: McSidepanelConfig,\n        @Inject(MC_SIDEPANEL_WITH_INDENT) public withIndent: boolean,\n        @Inject(MC_SIDEPANEL_WITH_SHADOW) public withShadow: boolean) {\n        super();\n    }\n\n    ngOnDestroy(): void {\n        this.destroyed = true;\n    }\n\n    /** Attach a component portal as content to this sidepanel container. */\n    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n        this.validatePortalAttached();\n        this.setAnimation();\n        this.setPanelClass();\n\n        return this.portalOutlet.attachComponentPortal(portal);\n    }\n\n    /** Attach a template portal as content to this sidepanel container. */\n    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n        this.validatePortalAttached();\n        this.setAnimation();\n        this.setPanelClass();\n\n        return this.portalOutlet.attachTemplatePortal(portal);\n    }\n\n    /** Begin animation of the sidepanel entrance into view. */\n    enter(): void {\n        if (!this.destroyed) {\n            this.animationState = McSidepanelAnimationState.Visible;\n            this.changeDetectorRef.detectChanges();\n        }\n    }\n\n    /** Begin animation of the sidepanel exiting from view. */\n    exit(): void {\n        if (!this.destroyed) {\n            this.animationState = McSidepanelAnimationState.Hidden;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    onAnimation(event: AnimationEvent) {\n        this.animationStateChanged.emit(event);\n    }\n\n    private setAnimation() {\n        const position: McSidepanelPosition = this.sidepanelConfig.position!;\n\n        this.animationTransform = {\n            transformIn: mcSidepanelTransformAnimation[position].in,\n            transformOut: mcSidepanelTransformAnimation[position].out\n        };\n    }\n\n    private setPanelClass() {\n        const element: HTMLElement = this.elementRef.nativeElement;\n        const position: McSidepanelPosition = this.sidepanelConfig.position!;\n\n        element.classList.add(`mc-sidepanel-container_${position}`);\n\n        if (this.withShadow) {\n            element.classList.add('mc-sidepanel-container_shadowed');\n        }\n    }\n\n    private validatePortalAttached() {\n        if (this.portalOutlet.hasAttached()) {\n            throw Error('Attempting to attach sidepanel content after content is already attached');\n        }\n    }\n}\n","import { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { merge, Observable, Subject } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\n\nimport { McSidepanelAnimationState } from './sidepanel-animations';\nimport { McSidepanelConfig } from './sidepanel-config';\nimport { McSidepanelContainerComponent } from './sidepanel-container.component';\n\n\n// Counter for unique sidepanel ids.\nlet uniqueId = 0;\n\nexport class McSidepanelRef<T = any, R = any> {\n    readonly id: string;\n\n    /** Instance of the component making up the content of the sidepanel. */\n    instance: T;\n\n    /** Subject for notifying the user that the sidepanel has been closed and dismissed. */\n    private readonly afterClosed$ = new Subject<R | undefined>();\n\n    /** Subject for notifying the user that the sidepanel has opened and appeared. */\n    private readonly afterOpened$ = new Subject<void>();\n\n    /** Result to be passed down to the `afterDismissed` stream. */\n    private result: R | undefined;\n\n    constructor(\n        public containerInstance: McSidepanelContainerComponent,\n        private overlayRef: OverlayRef,\n        public config: McSidepanelConfig) {\n\n        this.id = this.config.id || `mc-sidepanel-${uniqueId++}`;\n        this.containerInstance.id = this.id;\n\n        // Emit when opening animation completes\n        containerInstance.animationStateChanged.pipe(\n            filter(\n                (event) => event.phaseName === 'done' && event.toState === McSidepanelAnimationState.Visible\n            ),\n            take(1)\n        ).subscribe(() => {\n            this.afterOpened$.next();\n            this.afterOpened$.complete();\n        });\n\n        // Dispose overlay when closing animation is complete\n        containerInstance.animationStateChanged.pipe(\n            filter(\n                (event) => event.phaseName === 'done' && event.toState === McSidepanelAnimationState.Hidden\n            ),\n            take(1)\n        ).subscribe(() => {\n            overlayRef.dispose();\n            this.afterClosed$.next(this.result);\n            this.afterClosed$.complete();\n        });\n\n        if (!containerInstance.sidepanelConfig.disableClose) {\n            merge(\n                overlayRef.backdropClick(),\n                overlayRef.keydownEvents().pipe(\n                    // tslint:disable:deprecation\n                    // keyCode is deprecated, but IE11 and Edge don't support code property, which we need use instead\n                    filter((event) => event.keyCode === ESCAPE)\n                )\n            ).subscribe(() => this.close());\n        }\n    }\n\n    close(result?: R): void {\n        if (!this.afterClosed$.closed) {\n            // Transition the backdrop in parallel to the sidepanel.\n            this.containerInstance.animationStateChanged.pipe(\n                filter((event) => event.phaseName === 'done'),\n                take(1)\n            ).subscribe(() => this.overlayRef.detachBackdrop());\n\n            this.result = result;\n            this.containerInstance.exit();\n        }\n    }\n\n    /** Gets an observable that is notified when the sidepanel is finished closing. */\n    afterClosed(): Observable<R | undefined> {\n        return this.afterClosed$.asObservable();\n    }\n\n    /** Gets an observable that is notified when the sidepanel has opened and appeared. */\n    afterOpened(): Observable<void> {\n        return this.afterOpened$.asObservable();\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { MC_SELECT_SCROLL_STRATEGY_PROVIDER, McOptionModule } from '@ptsecurity/mosaic/core';\nimport { McFormFieldModule } from '@ptsecurity/mosaic/form-field';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\nimport { McTagsModule } from '@ptsecurity/mosaic/tags';\n\nimport { McSelect, McSelectTrigger } from './select.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        McOptionModule,\n        McIconModule,\n        McTagsModule\n    ],\n    exports: [McFormFieldModule, McSelect, McSelectTrigger, McOptionModule, CommonModule],\n    declarations: [McSelect, McSelectTrigger],\n    providers: [MC_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class McSelectModule {}\n","import {\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    Input,\n    OnDestroy,\n    ViewEncapsulation\n} from '@angular/core';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport {\n    CanColor,\n    CanColorCtor,\n    CanDisable,\n    CanDisableCtor,\n    HasTabIndex,\n    HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex\n} from '@ptsecurity/mosaic/core';\n\n\n// Boilerplate for applying mixins to McTabNav.\n/** @docs-private */\nexport class McTabNavBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {}\n}\nexport const mcTabNavMixinBase: CanColorCtor &\n    typeof McTabNavBase = mixinColor(McTabNavBase);\n\n/**\n * Navigation component matching the styles of the tab group header.\n */\n@Component({\n    selector: '[mc-tab-nav-bar]',\n    exportAs: 'mcTabNavBar, mcTabNav',\n    inputs: ['color'],\n    templateUrl: 'tab-nav-bar.html',\n    styleUrls: ['tab-nav-bar.css'],\n    host: { class: 'mc-tab-nav-bar' },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McTabNav extends mcTabNavMixinBase\n    implements CanColor {\n        constructor(elementRef: ElementRef) {\n            super(elementRef);\n        }\n     }\n\n// Boilerplate for applying mixins to McTabLink.\nexport class McTabLinkBase {}\nexport const mcTabLinkMixinBase: HasTabIndexCtor & CanDisableCtor &\n    typeof McTabLinkBase = mixinTabIndex(mixinDisabled(McTabLinkBase));\n\n/**\n * Link inside of a `mc-tab-nav-bar`.\n */\n@Directive({\n    selector: '[mc-tab-link], [mcTabLink]',\n    exportAs: 'mcTabLink',\n    inputs: ['disabled', 'tabIndex'],\n    host: {\n        class: 'mc-tab-link',\n        '[attr.aria-current]': 'active',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.tabIndex]': 'tabIndex',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-active]': 'active'\n    }\n})\nexport class McTabLink extends mcTabLinkMixinBase\n    implements OnDestroy, CanDisable, HasTabIndex {\n    /** Whether the link is active. */\n    @Input()\n    get active(): boolean {\n        return this.isActive;\n    }\n    set active(value: boolean) {\n        if (value !== this.isActive) {\n            this.isActive = value;\n        }\n    }\n\n    /** Whether the tab link is active or not. */\n    protected isActive: boolean = false;\n\n    constructor(\n        public elementRef: ElementRef,\n        @Attribute('tabindex') tabIndex: string,\n        private focusMonitor: FocusMonitor\n    ) {\n        super();\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n        this.focusMonitor.monitor(this.elementRef.nativeElement);\n    }\n\n    ngOnDestroy() {\n        this.focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PortalModule } from '@ptsecurity/cdk/portal';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McTab } from './tab';\nimport { McTabBody, McTabBodyPortal } from './tab-body';\nimport { McTabContent } from './tab-content';\nimport {\n    McTabGroup,\n    McLightTabsCssStyler,\n    McAlignTabsCenterCssStyler,\n    McAlignTabsEndCssStyler,\n    McStretchTabsCssStyler\n} from './tab-group';\nimport { McTabHeader } from './tab-header';\nimport { McTabLabel } from './tab-label';\nimport { McTabLabelWrapper } from './tab-label-wrapper';\nimport { McTabLink, McTabNav } from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        McCommonModule,\n        PortalModule,\n        A11yModule\n    ],\n    // Don't export all components because some are only to be used internally.\n    exports: [\n        McCommonModule,\n        McTabGroup,\n        McTabLabel,\n        McTab,\n        McTabNav,\n        McTabLink,\n        McTabContent,\n        McLightTabsCssStyler,\n        McAlignTabsCenterCssStyler,\n        McAlignTabsEndCssStyler,\n        McStretchTabsCssStyler\n    ],\n    declarations: [\n        McTabGroup,\n        McTabLabel,\n        McTab,\n        McTabLabelWrapper,\n        McTabNav,\n        McTabLink,\n        McTabBody,\n        McTabBodyPortal,\n        McTabHeader,\n        McTabContent,\n        McLightTabsCssStyler,\n        McAlignTabsCenterCssStyler,\n        McAlignTabsEndCssStyler,\n        McStretchTabsCssStyler\n    ]\n})\nexport class McTabsModule {}\n","import { InjectionToken } from '@angular/core';\n\n\n/** Default options, for the chips module, that can be overridden. */\n// tslint:disable-next-line: naming-convention\nexport interface McTagsDefaultOptions {\n    /** The list of key codes that will trigger a chipEnd event. */\n    separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MC_TAGS_DEFAULT_OPTIONS = new InjectionToken<McTagsDefaultOptions>('mc-tags-default-options');\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    NgZone,\n    OnDestroy,\n    Output,\n    QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { BACKSPACE, DELETE, SPACE } from '@ptsecurity/cdk/keycodes';\nimport {\n    CanColor,\n    CanColorCtor,\n    CanDisable,\n    CanDisableCtor,\n    mixinColor,\n    mixinDisabled\n} from '@ptsecurity/mosaic/core';\nimport { McIcon } from '@ptsecurity/mosaic/icon';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\n\n// tslint:disable-next-line:naming-convention\nexport interface McTagEvent {\n    tag: McTag;\n}\n\n/** Event object emitted by McTag when selected or deselected. */\nexport class McTagSelectionChange {\n    constructor(public source: McTag, public selected: boolean, public isUserInput = false) {}\n}\n\n\nconst TAG_ATTRIBUTE_NAMES = ['mc-basic-tag'];\n\n/**\n * Dummy directive to add CSS class to tag avatar.\n * @docs-private\n */\n@Directive({\n    selector: 'mc-tag-avatar, [mcTagAvatar]',\n    host: { class: 'mc-tag-avatar' }\n})\nexport class McTagAvatar {}\n\n/**\n * Dummy directive to add CSS class to tag trailing icon.\n * @docs-private\n */\n@Directive({\n    selector: 'mc-tag-trailing-icon, [mcTagTrailingIcon]',\n    host: { class: 'mc-tag-trailing-icon' }\n})\nexport class McTagTrailingIcon {}\n\nexport class McTagBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const _McTagMixinBase: CanColorCtor & CanDisableCtor & typeof McTagBase = mixinColor(mixinDisabled(McTagBase));\n\n\n@Component({\n    selector: 'mc-tag, [mc-tag], mc-basic-tag, [mc-basic-tag]',\n    exportAs: 'mcTag',\n    templateUrl: 'tag.partial.html',\n    styleUrls: ['./tag.css'],\n    inputs: ['color', 'disabled'],\n    host: {\n        class: 'mc-tag',\n        '[attr.tabindex]': 'disabled ? null : -1',\n        '[class.mc-tag-selected]': 'selected',\n        '[class.mc-tag-with-avatar]': 'avatar',\n        '[class.mc-tag-with-trailing-icon]': 'trailingIcon || removeIcon',\n        '[class.mc-tag-disabled]': 'disabled',\n        '[class.mc-disabled]': 'disabled',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': 'handleClick($event)',\n        '(keydown)': 'handleKeydown($event)',\n        '(focus)': 'focus()',\n        '(blur)': 'blur()'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McTag extends _McTagMixinBase implements IFocusableOption, OnDestroy, CanColor, CanDisable {\n    /** Emits when the tag is focused. */\n    readonly onFocus = new Subject<McTagEvent>();\n\n    /** Emits when the tag is blured. */\n    readonly onBlur = new Subject<McTagEvent>();\n\n    nativeElement: HTMLElement;\n\n    /** Whether the tag has focus. */\n    hasFocus: boolean = false;\n\n    /** Whether the tag list is selectable */\n    tagListSelectable: boolean = true;\n\n    @ContentChildren(McIcon) contentChildren: QueryList<McIcon>;\n\n    /** The tag avatar */\n    @ContentChild(McTagAvatar) avatar: McTagAvatar;\n\n    /** The tag's trailing icon. */\n    @ContentChild(McTagTrailingIcon) trailingIcon: McTagTrailingIcon;\n\n    /** The tag's remove toggler. */\n    @ContentChild(forwardRef(() => McTagRemove)) removeIcon: McTagRemove;\n\n    /** Emitted when the tag is selected or deselected. */\n    @Output() readonly selectionChange: EventEmitter<McTagSelectionChange> =\n        new EventEmitter<McTagSelectionChange>();\n\n    /** Emitted when the tag is destroyed. */\n    @Output() readonly destroyed: EventEmitter<McTagEvent> = new EventEmitter<McTagEvent>();\n\n    /** Emitted when a tag is to be removed. */\n    @Output() readonly removed: EventEmitter<McTagEvent> = new EventEmitter<McTagEvent>();\n\n    /** Whether the tag is selected. */\n    @Input()\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    set selected(value: boolean) {\n        const coercedValue = coerceBooleanProperty(value);\n\n        if (coercedValue !== this._selected) {\n            this._selected = coercedValue;\n            this.dispatchSelectionChange();\n        }\n    }\n\n    private _selected: boolean = false;\n\n    /** The value of the tag. Defaults to the content inside `<mc-tag>` tags. */\n    @Input()\n    get value(): any {\n        return this._value !== undefined\n            ? this._value\n            : this.elementRef.nativeElement.textContent;\n    }\n\n    set value(value: any) {\n        this._value = value;\n    }\n\n    private _value: any;\n\n    /**\n     * Whether or not the tag is selectable. When a tag is not selectable,\n     * changes to its selected state are always ignored. By default a tag is\n     * selectable, and it becomes non-selectable if its parent tag list is\n     * not selectable.\n     */\n    @Input()\n    get selectable(): boolean {\n        return this._selectable && this.tagListSelectable;\n    }\n\n    set selectable(value: boolean) {\n        this._selectable = coerceBooleanProperty(value);\n    }\n\n    private _selectable: boolean = true;\n\n    /**\n     * Determines whether or not the tag displays the remove styling and emits (removed) events.\n     */\n    @Input()\n    get removable(): boolean {\n        return this._removable;\n    }\n\n    set removable(value: boolean) {\n        this._removable = coerceBooleanProperty(value);\n    }\n\n    private _removable: boolean = true;\n\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value !== this.disabled) {\n            this._disabled = value;\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    constructor(public elementRef: ElementRef, private _ngZone: NgZone) {\n        super(elementRef);\n\n        this.addHostClassName();\n\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        this.addClassModificatorForIcons();\n    }\n\n    addClassModificatorForIcons() {\n        const icons = this.contentChildren.map((item) => item._elementRef.nativeElement);\n\n        if (icons.length === 1) {\n            const iconElement = icons[0];\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-left-icon');\n                }\n\n                if (iconElement.previousSibling) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-right-icon');\n                }\n            }\n        } else if (icons.length > 1) {\n            const firstIconElement = icons[0];\n            const secondIconElement = icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n\n    addHostClassName() {\n        // Add class for the different tags\n        for (const attr of TAG_ATTRIBUTE_NAMES) {\n            if (\n                this.elementRef.nativeElement.hasAttribute(attr) ||\n                this.elementRef.nativeElement.tagName.toLowerCase() === attr\n            ) {\n                    (this.elementRef.nativeElement as HTMLElement).classList.add(attr);\n\n                    return;\n            }\n        }\n        (this.elementRef.nativeElement as HTMLElement).classList.add('mc-standard-tag');\n    }\n\n    ngOnDestroy() {\n        this.destroyed.emit({ tag: this });\n    }\n\n    select(): void {\n        if (!this._selected) {\n            this._selected = true;\n            this.dispatchSelectionChange();\n        }\n    }\n\n    deselect(): void {\n        if (this._selected) {\n            this._selected = false;\n            this.dispatchSelectionChange();\n        }\n    }\n\n    selectViaInteraction(): void {\n        if (!this._selected) {\n            this._selected = true;\n            this.dispatchSelectionChange(true);\n        }\n    }\n\n    toggleSelected(isUserInput: boolean = false): boolean {\n        this._selected = !this.selected;\n        this.dispatchSelectionChange(isUserInput);\n\n        return this.selected;\n    }\n\n    /** Allows for programmatic focusing of the tag. */\n    focus(): void {\n        if (!this.hasFocus) {\n            this.elementRef.nativeElement.focus();\n            this.onFocus.next({ tag: this });\n        }\n        this.hasFocus = true;\n    }\n\n    /**\n     * Allows for programmatic removal of the tag. Called by the McTagList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the tag from the DOM.\n     */\n    remove(): void {\n        if (this.removable) {\n            this.removed.emit({ tag: this });\n        }\n    }\n\n    handleClick(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n        } else {\n            event.stopPropagation();\n        }\n    }\n\n    handleKeydown(event: KeyboardEvent): void {\n        if (this.disabled) { return; }\n\n        // tslint:disable-next-line: deprecation\n        switch (event.keyCode) {\n            case DELETE:\n            case BACKSPACE:\n                // If we are removable, remove the focused tag\n                this.remove();\n                // Always prevent so page navigation does not occur\n                event.preventDefault();\n                break;\n            case SPACE:\n                // If we are selectable, toggle the focused tag\n                if (this.selectable) {\n                    this.toggleSelected(true);\n                }\n\n                // Always prevent space from scrolling the page since the list has focus\n                event.preventDefault();\n                break;\n            default:\n        }\n    }\n\n    blur(): void {\n        // When animations are enabled, Angular may end up removing the tag from the DOM a little\n        // earlier than usual, causing it to be blurred and throwing off the logic in the tag list\n        // that moves focus not the next item. To work around the issue, we defer marking the tag\n        // as not focused until the next time the zone stabilizes.\n        this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                this._ngZone.run(() => {\n                    this.hasFocus = false;\n                    this.onBlur.next({ tag: this });\n                });\n            });\n    }\n\n    private dispatchSelectionChange(isUserInput = false) {\n        this.selectionChange.emit({\n            source: this,\n            isUserInput,\n            selected: this._selected\n        });\n    }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mc-tag>\n *       <mc-icon mcTagRemove>cancel</mc-icon>\n *     </mc-tag>`\n *\n * You *may* use a custom icon, but you may need to override the `mc-tag-remove` positioning\n * styles to properly center the icon within the tag.\n */\n@Directive({\n    selector: '[mcTagRemove]',\n    host: {\n        class: 'mc-tag-remove mc-tag-trailing-icon',\n        '(click)': 'handleClick($event)'\n    }\n})\nexport class McTagRemove {\n    constructor(protected parentTag: McTag) {}\n\n    /** Calls the parent tag's public `remove()` method if applicable. */\n    handleClick(event: Event): void {\n        if (this.parentTag.removable) {\n            this.parentTag.remove();\n        }\n\n        // We need to stop event propagation because otherwise the event will bubble up to the\n        // form field and cause the `onContainerClick` method to be invoked. This method would then\n        // reset the focused tag that has been focused after tag removal. Usually the parent\n        // the parent click listener of the `McTag` would prevent propagation, but it can happen\n        // that the tag is being removed before the event bubbles up.\n        event.stopPropagation();\n    }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    Self,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { FocusKeyManager } from '@ptsecurity/cdk/a11y';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { BACKSPACE, END, HOME } from '@ptsecurity/cdk/keycodes';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { merge, Observable, Subject, Subscription } from 'rxjs';\nimport { startWith, takeUntil } from 'rxjs/operators';\n\nimport { McTagTextControl } from './tag-text-control';\nimport { McTag, McTagEvent, McTagSelectionChange } from './tag.component';\n\n\nexport class McTagListBase {\n    constructor(\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const _McTagListMixinBase: CanUpdateErrorStateCtor & typeof McTagListBase = mixinErrorState(McTagListBase);\n\n\n// Increasing integer for generating unique ids for tag-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the tag list value has changed. */\nexport class McTagListChange {\n    constructor(public source: McTagList, public value: any) {}\n}\n\n\n@Component({\n    selector: 'mc-tag-list',\n    exportAs: 'mcTagList',\n    template: '<ng-content></ng-content>',\n    host: {\n        class: 'mc-tag-list',\n        '[attr.tabindex]': 'disabled ? null : _tabIndex',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-invalid]': 'errorState',\n        '[class.mc-required]': 'required',\n        '(focus)': 'focus()',\n        '(blur)': 'blur()',\n        '(keydown)': 'keydown($event)',\n        '[id]': 'uid'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McTagList }],\n    styleUrls: ['tag-list.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McTagList extends _McTagListMixinBase implements McFormFieldControl<any>,\n    ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n\n    readonly controlType: string = 'mc-tag-list';\n\n    /** Combined stream of all of the child tags' selection change events. */\n    get tagSelectionChanges(): Observable<McTagSelectionChange> {\n        return merge(...this.tags.map((tag) => tag.selectionChange));\n    }\n\n    /** Combined stream of all of the child tags' focus change events. */\n    get tagFocusChanges(): Observable<McTagEvent> {\n        return merge(...this.tags.map((tag) => tag.onFocus));\n    }\n\n    /** Combined stream of all of the child tags' blur change events. */\n    get tagBlurChanges(): Observable<McTagEvent> {\n        return merge(...this.tags.map((tag) => tag.onBlur));\n    }\n\n    /** Combined stream of all of the child tags' remove change events. */\n    get tagRemoveChanges(): Observable<McTagEvent> {\n        return merge(...this.tags.map((tag) => tag.destroyed));\n    }\n\n    /** The array of selected tags inside tag list. */\n    get selected(): McTag[] | McTag {\n        return this.multiple ? this.selectionModel.selected : this.selectionModel.selected[0];\n    }\n\n    /** Whether the user should be allowed to select multiple tags. */\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith(): (o1: any, o2: any) => boolean {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        this._compareWith = fn;\n\n        if (this.selectionModel) {\n            // A different comparator means the selection could change.\n            this.initializeSelection();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): any {\n        return this._value;\n    }\n\n    set value(value: any) {\n        this.writeValue(value);\n        this._value = value;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get id(): string {\n        return this.tagInput ? this.tagInput.id : this.uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get placeholder(): string {\n        return this.tagInput ? this.tagInput.placeholder : this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n\n    /** Whether any tags or the mcTagInput inside of this tag-list has focus. */\n    get focused(): boolean {\n        return (this.tagInput && this.tagInput.focused) || this.hasFocusedTag();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return (!this.tagInput || this.tagInput.empty) && this.tags.length === 0;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat(): boolean {\n        return !this.empty || this.focused;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        return this.ngControl ? !!this.ngControl.disabled : this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n        this.syncTagsDisabledState();\n    }\n\n    /**\n     * Whether or not this tag list is selectable. When a tag list is not selectable,\n     * the selected states for all the tags inside the tag list are always ignored.\n     */\n    @Input()\n    get selectable(): boolean {\n        return this._selectable;\n    }\n\n    set selectable(value: boolean) {\n        this._selectable = coerceBooleanProperty(value);\n\n        if (this.tags) {\n            this.tags.forEach((tag) => tag.tagListSelectable = this._selectable);\n        }\n    }\n\n    @Input()\n    set tabIndex(value: number) {\n        this.userTabIndex = value;\n        this._tabIndex = value;\n    }\n\n    /**\n     * Event that emits whenever the raw value of the tag-list changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    uid: string = `mc-tag-list-${nextUniqueId++}`;\n\n    /**\n     * User defined tab index.\n     * When it is not null, use user defined tab index. Otherwise use tabIndex\n     */\n    userTabIndex: number | null = null;\n\n    keyManager: FocusKeyManager<McTag>;\n\n    selectionModel: SelectionModel<McTag>;\n\n    tagChanges = new EventEmitter<any>();\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /** Orientation of the tag list. */\n    @Input('orientation') orientation: 'horizontal' | 'vertical' = 'horizontal';\n\n    /** Event emitted when the selected tag list value has been changed by the user. */\n    @Output() readonly change: EventEmitter<McTagListChange> = new EventEmitter<McTagListChange>();\n\n    /** The tag components contained within this tag list. */\n    @ContentChildren(McTag) tags: QueryList<McTag>;\n\n    _tabIndex = 0;\n\n    private _value: any;\n\n    private _required: boolean = false;\n\n    private _placeholder: string;\n\n    private _disabled: boolean = false;\n\n    private _selectable: boolean = true;\n\n    /** The tag input to add more tags */\n    private tagInput: McTagTextControl;\n\n    private _multiple: boolean = false;\n\n    /**\n     * When a tag is destroyed, we store the index of the destroyed tag until the tags\n     * query list notifies about the update. This is necessary because we cannot determine an\n     * appropriate tag that should receive focus until the array of tags updated completely.\n     */\n    private lastDestroyedTagIndex: number | null = null;\n\n    /** Subject that emits when the component has been destroyed. */\n    private destroyed = new Subject<void>();\n\n    /** Subscription to focus changes in the tags. */\n    private tagFocusSubscription: Subscription | null;\n\n    /** Subscription to blur changes in the tags. */\n    private tagBlurSubscription: Subscription | null;\n\n    /** Subscription to selection changes in tags. */\n    private tagSelectionSubscription: Subscription | null;\n\n    /** Subscription to remove changes in tags. */\n    private tagRemoveSubscription: Subscription | null;\n\n    constructor(\n        protected elementRef: ElementRef<HTMLElement>,\n        private changeDetectorRef: ChangeDetectorRef,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        @Optional() private dir: Directionality,\n        @Optional() parentForm: NgForm,\n        @Optional() parentFormGroup: FormGroupDirective,\n        @Optional() @Self() public ngControl: NgControl\n    ) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            this.ngControl.valueAccessor = this;\n        }\n    }\n\n    ngAfterContentInit() {\n        this.keyManager = new FocusKeyManager<McTag>(this.tags)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this.dir ? this.dir.value : 'ltr');\n\n        if (this.dir) {\n            this.dir.change\n                .pipe(takeUntil(this.destroyed))\n                .subscribe((dir) => this.keyManager.withHorizontalOrientation(dir));\n        }\n\n        // Prevents the tag list from capturing focus and redirecting\n        // it back to the first tag when the user tabs out.\n        this.keyManager.tabOut\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(() => {\n                this._tabIndex = -1;\n\n                setTimeout(() => {\n                    this._tabIndex = this.userTabIndex || 0;\n                    this.changeDetectorRef.markForCheck();\n                });\n            });\n\n        // When the list changes, re-subscribe\n        this.tags.changes\n            .pipe(startWith(null), takeUntil(this.destroyed))\n            .subscribe(() => {\n                if (this.disabled) {\n                    // Since this happens after the content has been\n                    // checked, we need to defer it to the next tick.\n                    Promise.resolve().then(() => { this.syncTagsDisabledState(); });\n                }\n\n                this.resetTags();\n\n                // Reset tags selected/deselected status\n                this.initializeSelection();\n\n                // Check to see if we need to update our tab index\n                this.updateTabIndex();\n\n                // Check to see if we have a destroyed tag and need to refocus\n                this.updateFocusForDestroyedTags();\n\n                // Defer setting the value in order to avoid the \"Expression\n                // has changed after it was checked\" errors from Angular.\n                Promise.resolve().then(() => { this.tagChanges.emit(this.tags.toArray()); });\n\n                this.stateChanges.next();\n            });\n    }\n\n    ngOnInit() {\n        this.selectionModel = new SelectionModel<McTag>(this.multiple, undefined, false);\n        this.stateChanges.next();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroyed.next();\n        this.destroyed.complete();\n        this.stateChanges.complete();\n\n        this.dropSubscriptions();\n    }\n\n    // tslint:disable-next-line:no-empty\n    onTouched = () => {};\n\n    // tslint:disable-next-line:no-empty\n    onChange: (value: any) => void = () => {};\n\n    /** Associates an HTML input element with this tag list. */\n    registerInput(inputElement: McTagTextControl): void {\n        this.tagInput = inputElement;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any): void {\n        if (this.tags) {\n            this.setSelectionByValue(value, false);\n        }\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this.onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n        this.stateChanges.next();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick(event: MouseEvent) {\n        if (!this.originatesFromTag(event)) {\n            this.focus();\n        }\n    }\n\n    /**\n     * Focuses the first non-disabled tag in this tag list, or the associated input when there\n     * are no eligible tags.\n     */\n    focus(): void {\n        if (this.disabled) { return; }\n\n        // TODO: ARIA says this should focus the first `selected` tag if any are selected.\n        // Focus on first element if there's no tagInput inside tag-list\n        if (this.tagInput && this.tagInput.focused) {\n            // do nothing\n        } else if (this.tags.length > 0) {\n            this.keyManager.setFirstItemActive();\n            this.stateChanges.next();\n        } else {\n            this.focusInput();\n            this.stateChanges.next();\n        }\n    }\n\n    /** Attempt to focus an input if we have one. */\n    focusInput() {\n        if (this.tagInput) {\n            this.tagInput.focus();\n        }\n    }\n\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n    keydown(event: KeyboardEvent) {\n        const target = event.target as HTMLElement;\n\n        // If they are on an empty input and hit backspace, focus the last tag\n        // tslint:disable-next-line: deprecation\n        if (event.keyCode === BACKSPACE && this.isInputEmpty(target)) {\n            this.keyManager.setLastItemActive();\n            event.preventDefault();\n        } else if (target && target.classList.contains('mc-tag')) {\n            // tslint:disable-next-line: deprecation\n            if (event.keyCode === HOME) {\n                this.keyManager.setFirstItemActive();\n                event.preventDefault();\n            // tslint:disable-next-line: deprecation\n            } else if (event.keyCode === END) {\n                this.keyManager.setLastItemActive();\n                event.preventDefault();\n            } else {\n                this.keyManager.onKeydown(event);\n            }\n\n            this.stateChanges.next();\n        }\n    }\n\n    setSelectionByValue(value: any, isUserInput: boolean = true) {\n        this.clearSelection();\n        this.tags.forEach((tag) => tag.deselect());\n\n        if (Array.isArray(value)) {\n            value.forEach((currentValue) => this.selectValue(currentValue, isUserInput));\n            this.sortValues();\n        } else {\n            const correspondingTag = this.selectValue(value, isUserInput);\n\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what tag the user interacted with last.\n            if (correspondingTag && isUserInput) {\n                this.keyManager.setActiveItem(correspondingTag);\n            }\n        }\n    }\n\n    /** When blurred, mark the field as touched when focus moved outside the tag list. */\n    blur() {\n        if (!this.hasFocusedTag()) {\n            this.keyManager.setActiveItem(-1);\n        }\n\n        if (!this.disabled) {\n            if (this.tagInput) {\n                // If there's a tag input, we should check whether the focus moved to tag input.\n                // If the focus is not moved to tag input, mark the field as touched. If the focus moved\n                // to tag input, do nothing.\n                // Timeout is needed to wait for the focus() event trigger on tag input.\n                setTimeout(() => {\n                    if (!this.focused) {\n                        this.markAsTouched();\n                    }\n                });\n            } else {\n                // If there's no tag input, then mark the field as touched.\n                this.markAsTouched();\n            }\n        }\n    }\n\n    /** Mark the field as touched */\n    markAsTouched() {\n        this.onTouched();\n        this.changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     */\n    protected updateTabIndex(): void {\n        // If we have 0 tags, we should not allow keyboard focus\n        this._tabIndex = this.userTabIndex || (this.tags.length === 0 ? -1 : 0);\n    }\n\n    /**\n     * If the amount of tags changed, we need to update the\n     * key manager state and focus the next closest tag.\n     */\n    protected updateFocusForDestroyedTags() {\n        if (this.lastDestroyedTagIndex != null && this.tags.length) {\n            const newTagIndex = Math.min(this.lastDestroyedTagIndex, this.tags.length - 1);\n            this.keyManager.setActiveItem(newTagIndex);\n        } else if (this.tags.length === 0) {\n            this.focusInput();\n        }\n\n        this.lastDestroyedTagIndex = null;\n    }\n\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of tags.\n     */\n    private isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.tags.length;\n    }\n\n    private isInputEmpty(element: HTMLElement): boolean {\n        if (element && element.nodeName.toLowerCase() === 'input') {\n            const input = element as HTMLInputElement;\n\n            return !input.value;\n        }\n\n        return false;\n    }\n\n    /**\n     * Finds and selects the tag based on its value.\n     * @returns Tag that has the corresponding value.\n     */\n    private selectValue(value: any, isUserInput: boolean = true): McTag | undefined {\n\n        const correspondingTag = this.tags.find((tag) => {\n            return tag.value != null && this._compareWith(tag.value, value);\n        });\n\n        if (correspondingTag) {\n            if (isUserInput) {\n                correspondingTag.selectViaInteraction();\n            } else {\n                correspondingTag.select();\n            }\n\n            this.selectionModel.select(correspondingTag);\n        }\n\n        return correspondingTag;\n    }\n\n    private initializeSelection(): void {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl || this._value) {\n                this.setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n                this.stateChanges.next();\n            }\n        });\n    }\n\n    /**\n     * Deselects every tag in the list.\n     * @param skip Tag that should not be deselected.\n     */\n    private clearSelection(skip?: McTag): void {\n        this.selectionModel.clear();\n        this.tags.forEach((tag) => {\n            if (tag !== skip) {\n                tag.deselect();\n            }\n        });\n        this.stateChanges.next();\n    }\n\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     */\n    private sortValues(): void {\n        if (this._multiple) {\n            this.selectionModel.clear();\n\n            this.tags.forEach((tag) => {\n                if (tag.selected) {\n                    this.selectionModel.select(tag);\n                }\n            });\n            this.stateChanges.next();\n        }\n    }\n\n    /** Emits change event to set the model value. */\n    private propagateChanges(fallbackValue?: any): void {\n        let valueToEmit: any = null;\n\n        if (Array.isArray(this.selected)) {\n            valueToEmit = this.selected.map((tag) => tag.value);\n        } else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.change.emit(new McTagListChange(this, valueToEmit));\n        this.valueChange.emit(valueToEmit);\n        this.onChange(valueToEmit);\n        this.changeDetectorRef.markForCheck();\n    }\n\n    private resetTags() {\n        this.dropSubscriptions();\n        this.listenToTagsFocus();\n        this.listenToTagsSelection();\n        this.listenToTagsRemoved();\n    }\n\n    private dropSubscriptions() {\n        if (this.tagFocusSubscription) {\n            this.tagFocusSubscription.unsubscribe();\n            this.tagFocusSubscription = null;\n        }\n\n        if (this.tagBlurSubscription) {\n            this.tagBlurSubscription.unsubscribe();\n            this.tagBlurSubscription = null;\n        }\n\n        if (this.tagSelectionSubscription) {\n            this.tagSelectionSubscription.unsubscribe();\n            this.tagSelectionSubscription = null;\n        }\n\n        if (this.tagRemoveSubscription) {\n            this.tagRemoveSubscription.unsubscribe();\n            this.tagRemoveSubscription = null;\n        }\n    }\n\n    /** Listens to user-generated selection events on each tag. */\n    private listenToTagsSelection(): void {\n        this.tagSelectionSubscription = this.tagSelectionChanges.subscribe((event) => {\n            if (event.source.selected) {\n                this.selectionModel.select(event.source);\n            } else {\n                this.selectionModel.deselect(event.source);\n            }\n\n            // For single selection tag list, make sure the deselected value is unselected.\n            if (!this.multiple) {\n                this.tags.forEach((tag) => {\n                    if (!this.selectionModel.isSelected(tag) && tag.selected) {\n                        tag.deselect();\n                    }\n                });\n            }\n\n            if (event.isUserInput) {\n                this.propagateChanges();\n            }\n        });\n    }\n\n    /** Listens to user-generated selection events on each tag. */\n    private listenToTagsFocus(): void {\n        this.tagFocusSubscription = this.tagFocusChanges.subscribe((event) => {\n            const tagIndex: number = this.tags.toArray().indexOf(event.tag);\n\n            if (this.isValidIndex(tagIndex)) {\n                this.keyManager.updateActiveItem(tagIndex);\n            }\n            this.stateChanges.next();\n        });\n\n        this.tagBlurSubscription = this.tagBlurChanges.subscribe(() => {\n            this.blur();\n            this.stateChanges.next();\n        });\n    }\n\n    private listenToTagsRemoved(): void {\n        this.tagRemoveSubscription = this.tagRemoveChanges.subscribe((event) => {\n            const tag = event.tag;\n            const tagIndex = this.tags.toArray().indexOf(event.tag);\n\n            // In case the tag that will be removed is currently focused, we temporarily store\n            // the index in order to be able to determine an appropriate sibling tag that will\n            // receive focus.\n            if (this.isValidIndex(tagIndex) && tag.hasFocus) {\n                this.lastDestroyedTagIndex = tagIndex;\n            }\n        });\n    }\n\n    /** Checks whether an event comes from inside a tag element. */\n    private originatesFromTag(event: Event): boolean {\n        let currentElement = event.target as HTMLElement | null;\n\n        while (currentElement && currentElement !== this.elementRef.nativeElement) {\n            if (currentElement.classList.contains('mc-tag')) {\n                return true;\n            }\n\n            currentElement = currentElement.parentElement;\n        }\n\n        return false;\n    }\n\n    /** Checks whether any of the tags is focused. */\n    private hasFocusedTag() {\n        return this.tags.some((tag) => tag.hasFocus);\n    }\n\n    /** Syncs the list's disabled state with the individual tags. */\n    private syncTagsDisabledState() {\n        if (this.tags) {\n            this.tags.forEach((tag) => {\n                tag.disabled = this._disabled;\n            });\n        }\n    }\n}\n\n","import { Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output } from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { hasModifierKey } from '@ptsecurity/cdk/keycodes';\n\nimport { MC_TAGS_DEFAULT_OPTIONS, McTagsDefaultOptions } from './tag-default-options';\nimport { McTagList } from './tag-list.component';\nimport { McTagTextControl } from './tag-text-control';\n\n\n/** Represents an input event on a `mcTagInput`. */\n// tslint:disable-next-line: naming-convention\nexport interface McTagInputEvent {\n    /** The native `<input>` element that the event is being fired for. */\n    input: HTMLInputElement;\n\n    /** The value of the input. */\n    value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds tag-specific behaviors to an input element inside `<mc-form-field>`.\n * May be placed inside or outside of an `<mc-tag-list>`.\n */\n@Directive({\n    selector: 'input[mcTagInputFor]',\n    exportAs: 'mcTagInput, mcTagInputFor',\n    host: {\n        class: 'mc-tag-input mc-input-element',\n        '[id]': 'id',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.placeholder]': 'placeholder || null',\n        '[attr.aria-invalid]': '_tagList && _tagList.ngControl ? _tagList.ngControl.invalid : null',\n        '(keydown)': 'keydown($event)',\n        '(blur)': 'blur()',\n        '(focus)': 'onFocus()',\n        '(input)': 'onInput()'\n    }\n})\nexport class McTagInput implements McTagTextControl, OnChanges {\n    /** Whether the control is focused. */\n    focused: boolean = false;\n\n    /**\n     * The list of key codes that will trigger a tagEnd event.\n     *\n     * Defaults to `[ENTER]`.\n     */\n    @Input('mcTagInputSeparatorKeyCodes')\n    separatorKeyCodes: number[] | Set<number> = this.defaultOptions.separatorKeyCodes;\n\n    /** Emitted when a tag is to be added. */\n    @Output('mcTagInputTokenEnd')\n    tagEnd: EventEmitter<McTagInputEvent> = new EventEmitter<McTagInputEvent>();\n\n    /** The input's placeholder text. */\n    @Input() placeholder: string = '';\n\n    /** Unique id for the input. */\n    @Input() id: string = `mc-tag-list-input-${nextUniqueId++}`;\n\n    /** Register input for tag list */\n    @Input('mcTagInputFor')\n    set tagList(value: McTagList) {\n        if (value) {\n            this._tagList = value;\n            this._tagList.registerInput(this);\n        }\n    }\n\n    // tslint:disable-next-line: naming-convention\n    _tagList: McTagList;\n\n    /**\n     * Whether or not the tagEnd event will be emitted when the input is blurred.\n     */\n    @Input('mcTagInputAddOnBlur')\n    get addOnBlur(): boolean {\n        return this._addOnBlur;\n    }\n\n    set addOnBlur(value: boolean) {\n        this._addOnBlur = coerceBooleanProperty(value);\n    }\n\n    private _addOnBlur: boolean = false;\n\n    /** Whether the input is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this._tagList && this._tagList.disabled);\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    private _disabled: boolean = false;\n\n    /** Whether the input is empty. */\n    get empty(): boolean {\n        return !this.inputElement.value;\n    }\n\n    /** The native input element to which this directive is attached. */\n    private inputElement: HTMLInputElement;\n\n    constructor(\n        private elementRef: ElementRef<HTMLInputElement>,\n        @Inject(MC_TAGS_DEFAULT_OPTIONS) private defaultOptions: McTagsDefaultOptions\n    ) {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        this.inputElement = this.elementRef.nativeElement as HTMLInputElement;\n    }\n\n    ngOnChanges() {\n        this._tagList.stateChanges.next();\n    }\n\n    /** Utility method to make host definition/tests more clear. */\n    keydown(event?: KeyboardEvent) {\n        this.emittagEnd(event);\n    }\n\n    /** Checks to see if the blur should emit the (tagEnd) event. */\n    blur() {\n        if (this.addOnBlur) {\n            this.emittagEnd();\n        }\n\n        this.focused = false;\n        // Blur the tag list if it is not focused\n        if (!this._tagList.focused) {\n            this._tagList.blur();\n        }\n\n        this._tagList.stateChanges.next();\n    }\n\n    /** Checks to see if the (tagEnd) event needs to be emitted. */\n    emittagEnd(event?: KeyboardEvent) {\n        if (!this.inputElement.value && !!event) {\n            this._tagList.keydown(event);\n        }\n\n        if (!event || this.isSeparatorKey(event)) {\n            this.tagEnd.emit({ input: this.inputElement, value: this.inputElement.value });\n\n            if (event) {\n                event.preventDefault();\n            }\n        }\n    }\n\n    onInput() {\n        // Let tag list know whenever the value changes.\n        this._tagList.stateChanges.next();\n    }\n\n    onFocus() {\n        this.focused = true;\n        this._tagList.stateChanges.next();\n    }\n\n    /** Focuses the input. */\n    focus(): void {\n        this.inputElement.focus();\n    }\n\n    /** Checks whether a keycode is one of the configured separators. */\n    private isSeparatorKey(event: KeyboardEvent) {\n        if (hasModifierKey(event)) { return false; }\n\n        const separators = this.separatorKeyCodes;\n        // tslint:disable-next-line: deprecation\n        const keyCode = event.keyCode;\n\n        return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ENTER } from '@ptsecurity/cdk/keycodes';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { MC_TAGS_DEFAULT_OPTIONS, McTagsDefaultOptions } from './tag-default-options';\nimport { McTagInput } from './tag-input';\nimport { McTagList } from './tag-list.component';\nimport { McTag, McTagAvatar, McTagRemove, McTagTrailingIcon } from './tag.component';\n\n\n@NgModule({\n    imports: [CommonModule, PlatformModule],\n    exports: [\n        McTagList,\n        McTag,\n        McTagInput,\n        McTagTrailingIcon,\n        McTagAvatar,\n        McTagRemove\n    ],\n    declarations: [\n        McTagList,\n        McTag,\n        McTagInput,\n        McTagTrailingIcon,\n        McTagAvatar,\n        McTagRemove\n    ],\n    providers: [{\n        provide: MC_TAGS_DEFAULT_OPTIONS,\n        // tslint:disable-next-line: no-object-literal-type-assertion\n        useValue: { separatorKeyCodes: [ENTER] } as McTagsDefaultOptions\n    }]\n})\nexport class McTagsModule {}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    EventEmitter,\n    Input,\n    IterableDiffer,\n    IterableDiffers,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    ElementRef\n} from '@angular/core';\nimport { NodeDef, ViewData } from '@angular/core/src/view';\nimport { ActiveDescendantKeyManager } from '@ptsecurity/cdk/a11y';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, SPACE } from '@ptsecurity/cdk/keycodes';\nimport { CdkTree, CdkTreeNodeOutlet } from '@ptsecurity/cdk/tree';\nimport {\n    CanDisable,\n    CanDisableCtor,\n    HasTabIndex,\n    HasTabIndexCtor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\nimport { Subject } from 'rxjs';\n\nimport { MC_TREE_OPTION_PARENT_COMPONENT, McTreeOption } from './tree-option';\n\n\nexport class McTreeNavigationChange {\n    constructor(\n        public source: McTreeSelection,\n        public option: McTreeOption\n    ) {}\n}\n\nexport class McTreeSelectionChange {\n    constructor(public source: McTreeSelection, public option: McTreeOption) {}\n}\n\nclass McTreeSelectionBase<T> extends CdkTree<T> {\n    constructor(differs: IterableDiffers, changeDetectorRef: ChangeDetectorRef) {\n        super(differs, changeDetectorRef);\n    }\n}\n\n/* tslint:disable-next-line:naming-convention */\nconst McTreeSelectionBaseMixin: HasTabIndexCtor & CanDisableCtor &\n    typeof McTreeSelectionBase = mixinTabIndex(mixinDisabled(McTreeSelectionBase));\n\n\n@Component({\n    selector: 'mc-tree-selection',\n    exportAs: 'mcTreeSelection',\n    template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n    host: {\n        class: 'mc-tree-selection',\n\n        '[attr.tabindex]': 'tabIndex',\n\n        '(keydown)': 'onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    styleUrls: ['./tree.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [\n        { provide: MC_TREE_OPTION_PARENT_COMPONENT, useExisting: McTreeSelection },\n        { provide: CdkTree, useExisting: McTreeSelection }\n    ]\n})\nexport class McTreeSelection extends McTreeSelectionBaseMixin<McTreeOption>\n    implements AfterContentInit, CanDisable, HasTabIndex {\n\n    @ViewChild(CdkTreeNodeOutlet) nodeOutlet: CdkTreeNodeOutlet;\n\n    @ContentChildren(McTreeOption) options: QueryList<McTreeOption>;\n\n    keyManager: ActiveDescendantKeyManager<McTreeOption>;\n\n    selectionModel: SelectionModel<McTreeOption>;\n\n    tabIndex: number;\n    multiple: boolean;\n    autoSelect: boolean;\n    noUnselect: boolean;\n\n    // todo temporary solution\n    withShift: boolean;\n    withCtrl: boolean;\n\n\n    @Output() readonly navigationChange = new EventEmitter<McTreeNavigationChange>();\n\n    @Output() readonly selectionChange = new EventEmitter<McTreeSelectionChange>();\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(rawValue: boolean) {\n        const value = toBoolean(rawValue);\n\n        if (this._disabled !== value) {\n            this._disabled = value;\n\n            if (this._disabled) {\n                /* tslint:disable-next-line:no-console */\n                console.log('need disable all options');\n            } else {\n                /* tslint:disable-next-line:no-console */\n                console.log('need enable all options');\n            }\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    private readonly destroy = new Subject<void>();\n\n    constructor(\n        private elementRef: ElementRef,\n        differs: IterableDiffers,\n        changeDetectorRef: ChangeDetectorRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('multiple') multiple: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string\n    ) {\n        super(differs, changeDetectorRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.multiple = multiple === null ? false : toBoolean(multiple);\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.selectionModel = new SelectionModel<McTreeOption>(this.multiple);\n    }\n\n    ngAfterContentInit(): void {\n        this.keyManager = new ActiveDescendantKeyManager<McTreeOption>(this.options)\n            .withVerticalOrientation(true)\n            .withHorizontalOrientation(null);\n    }\n\n    ngOnDestroy() {\n        this.destroy.next();\n\n        this.destroy.complete();\n    }\n\n    onKeyDown(event: KeyboardEvent) {\n        // tslint:disable-next-line: deprecation\n        const keyCode = event.keyCode;\n        this.withShift = event.shiftKey;\n        this.withCtrl = event.ctrlKey;\n\n        switch (keyCode) {\n            case LEFT_ARROW:\n                if (this.keyManager.activeItem) {\n                    this.treeControl.collapse(this.keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                break;\n            case RIGHT_ARROW:\n                if (this.keyManager.activeItem) {\n                    this.treeControl.expand(this.keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                break;\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this.keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this.keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                this.keyManager.setPreviousPageItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                this.keyManager.setNextPageItemActive();\n                event.preventDefault();\n\n                break;\n            default:\n                this.keyManager.onKeydown(event);\n        }\n    }\n\n    updateScrollSize(): void {\n        if (!this.options.first) { return; }\n\n        this.keyManager.withScrollSize(Math.floor(this.getHeight() / this.options.first.getHeight()));\n    }\n\n    setFocusedOption(option: McTreeOption) {\n        this.keyManager.setActiveItem(option);\n\n        if (this.withShift && this.multiple) {\n            const previousIndex = this.keyManager.previousActiveItemIndex;\n            const activeIndex = this.keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n\n            this.withShift = false;\n        } else if (this.withCtrl) {\n            this.withCtrl = false;\n\n            if (!this.canDeselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) {\n                this.options.forEach((item) => item.setSelected(false));\n                option.setSelected(true);\n            }\n        }\n\n        this.emitNavigationEvent(option);\n    }\n\n    toggleFocusedOption(): void {\n        const focusedIndex = this.keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this.isValidIndex(focusedIndex)) {\n            const focusedOption: McTreeOption = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this.canDeselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this.emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    renderNodeChanges(\n        data: McTreeOption[],\n        dataDiffer: IterableDiffer<McTreeOption> = this.dataDiffer,\n        viewContainer: any = this.nodeOutlet.viewContainer,\n        parentData?: McTreeOption\n    ): void {\n        super.renderNodeChanges(data, dataDiffer, viewContainer, parentData);\n\n        const arrayOfInstances = [];\n\n        viewContainer._embeddedViews.forEach((view: ViewData) => {\n            const viewDef = view.def;\n\n            viewDef.nodes.forEach((node: NodeDef) => {\n                if (viewDef.nodeMatchedQueries === node.matchedQueryIds) {\n                    const nodeData: any = view.nodes[node.nodeIndex];\n\n                    arrayOfInstances.push(nodeData.instance as never);\n                }\n            });\n        });\n\n        if (this.options) {\n            this.options.reset(arrayOfInstances);\n            this.options.notifyOnChanges();\n        }\n\n        this.updateScrollSize();\n    }\n\n    getHeight(): number {\n        const clientRects = this.elementRef.nativeElement.getClientRects();\n        if (clientRects.length) {\n            return clientRects[0].height;\n        }\n\n        return 0;\n    }\n\n    emitNavigationEvent(option: McTreeOption): void {\n        this.navigationChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    emitChangeEvent(option: McTreeOption): void {\n        this.selectionChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    private isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    private canDeselectLast(option: McTreeOption): boolean {\n        return !(this.noUnselect && this.selectionModel.selected.length === 1 && option.selected);\n    }\n}\n\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CdkTreeModule } from '@ptsecurity/cdk/tree';\nimport { McPseudoCheckboxModule } from '@ptsecurity/mosaic/core';\n\nimport { McTreeNodeDef } from './node';\nimport { McTreeNodePadding } from './padding';\nimport { McTreeNodeToggle } from './toggle';\nimport { McTreeOption } from './tree-option';\nimport { McTreeSelection } from './tree-selection';\n\n\nconst MC_TREE_DIRECTIVES = [\n    McTreeSelection,\n    McTreeOption,\n    McTreeNodeDef,\n    McTreeNodePadding,\n    McTreeNodeToggle\n];\n\n@NgModule({\n    imports: [CommonModule, CdkTreeModule, McPseudoCheckboxModule],\n    exports: MC_TREE_DIRECTIVES,\n    declarations: MC_TREE_DIRECTIVES\n})\nexport class McTreeModule {}\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { FlatTreeControl, ITreeControl } from '@ptsecurity/cdk/tree';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class McTreeFlattener<T, F> {\n    constructor(\n        public transformFunction: (node: T, level: number) => F,\n        public getLevel: (node: F) => number,\n        public isExpandable: (node: F) => boolean,\n        public getChildren: (node: T) => Observable<T[]>\n    ) {}\n\n    flattenNode(node: T, level: number, resultNodes: F[], parentMap: boolean[]): F[] {\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n\n        if (this.isExpandable(flatNode)) {\n            this.getChildren(node)\n                .pipe(take(1))\n                .subscribe((children) => {\n                    children.forEach((child, index) => {\n                        const childParentMap: boolean[] = parentMap.slice();\n                        childParentMap.push(index !== children.length - 1);\n\n                        this.flattenNode(child, level + 1, resultNodes, childParentMap);\n                    });\n                });\n        }\n\n        return resultNodes;\n    }\n\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n    flattenNodes(structuredData: T[]): F[] {\n        const resultNodes: F[] = [];\n        structuredData.forEach((node) => this.flattenNode(node, 0, resultNodes, []));\n\n        return resultNodes;\n    }\n\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n    expandFlattenedNodes(nodes: F[], treeControl: ITreeControl<F>): F[] {\n        const results: F[] = [];\n        const currentExpand: boolean[] = [];\n        currentExpand[0] = true;\n\n        nodes.forEach((node) => {\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n\n            if (expand) { results.push(node); }\n\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        });\n\n        return results;\n    }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `McTree`.\n * The nested tree nodes of type `T` are flattened through `MсTreeFlattener`, and converted\n * to type `F` for `McTree` to consume.\n */\nexport class McTreeFlatDataSource<T, F> extends DataSource<F> {\n    flattenedData = new BehaviorSubject<F[]>([]);\n\n    expandedData = new BehaviorSubject<F[]>([]);\n\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n\n        this.flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n        this.treeControl.dataNodes = this.flattenedData.value;\n    }\n\n    private _data: BehaviorSubject<T[]>;\n\n    constructor(\n        private treeControl: FlatTreeControl<F>,\n        private treeFlattener: McTreeFlattener<T, F>,\n        initialData: T[] = []\n    ) {\n        super();\n\n        this._data = new BehaviorSubject<T[]>(initialData);\n    }\n\n    connect(collectionViewer: ICollectionViewer): Observable<F[]> {\n        const changes = [\n            collectionViewer.viewChange,\n            this.treeControl.expansionModel.changed,\n            this.flattenedData\n        ];\n\n        return merge(...changes)\n            .pipe(map(() => {\n                this.expandedData.next(\n                    this.treeFlattener.expandFlattenedNodes(this.flattenedData.value, this.treeControl)\n                );\n\n                return this.expandedData.value;\n            }));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by ITreeControl and each non-leaf node.\n */\nexport class McTreeNestedDataSource<T> extends DataSource<T> {\n\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n    }\n\n    /* tslint:disable-next-line:naming-convention */\n    private _data = new BehaviorSubject<T[]>([]);\n\n    connect(collectionViewer: ICollectionViewer): Observable<T[]> {\n        return merge(...[collectionViewer.viewChange, this._data])\n            .pipe(map(() => this.data));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import { Directive, TemplateRef } from '@angular/core';\n\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({ selector: '[mcTabContent]' })\nexport class McTabContent {\n    constructor(public template: TemplateRef<any>) { }\n}\n","import { Directive } from '@angular/core';\nimport { CdkPortal } from '@ptsecurity/cdk/portal';\n\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n    selector: '[mc-tab-label], [mcTabLabel]'\n})\nexport class McTabLabel extends CdkPortal {}\n\n// TODO: workaround for https://github.com/angular/material2/issues/12760\n(McTabLabel as any).ctorParameters = () => (CdkPortal as any).ctorParameters;\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ContentChild,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    SimpleChanges,\n    TemplateRef,\n    ViewChild,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { TemplatePortal } from '@ptsecurity/cdk/portal';\nimport {\n    CanDisable,\n    CanDisableCtor,\n    mixinDisabled\n} from '@ptsecurity/mosaic/core';\nimport { Subject } from 'rxjs';\n\nimport { McTabContent } from './tab-content';\nimport { McTabLabel } from './tab-label';\n\n\nexport class McTabBase {}\nexport const mcTabMixinBase: CanDisableCtor & typeof McTabBase = mixinDisabled(\n    McTabBase\n);\n\n@Component({\n    selector: 'mc-tab',\n    // Create a template for the content of the <mc-tab> so that we can grab a reference to this\n    // TemplateRef and use it in a Portal to render the tab content in the appropriate place in the\n    // tab-group.\n    template: '<ng-template><ng-content></ng-content></ng-template>',\n    inputs: ['disabled'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcTab'\n})\nexport class McTab extends mcTabMixinBase\n    implements OnInit, CanDisable, OnChanges, OnDestroy {\n    /** @docs-private */\n    get content(): TemplatePortal | null {\n        return this.contentPortal;\n    }\n    /** Content for the tab label given by `<ng-template mc-tab-label>`. */\n    @ContentChild(McTabLabel)\n    templateLabel: McTabLabel;\n\n    /**\n     * Template provided in the tab content that will be used if present, used to enable lazy-loading\n     */\n    @ContentChild(McTabContent, { read: TemplateRef })\n    explicitContent: TemplateRef<any>;\n\n    /** Template inside the McTab view that contains an `<ng-content>`. */\n    @ViewChild(TemplateRef)\n    implicitContent: TemplateRef<any>;\n\n    /** Plain text label for the tab, used when there is no template label. */\n    @Input('label')\n    textLabel: string = '';\n\n    /** Aria label for the tab. */\n    @Input('aria-label')\n    ariaLabel: string;\n\n    /**\n     * Reference to the element that the tab is labelled by.\n     * Will be cleared if `aria-label` is set at the same time.\n     */\n    @Input('aria-labelledby')\n    ariaLabelledby: string;\n\n    /** Emits whenever the internal state of the tab changes. */\n    readonly stateChanges = new Subject<void>();\n\n    /**\n     * The relatively indexed position where 0 represents the center, negative is left, and positive\n     * represents the right.\n     */\n    position: number | null = null;\n\n    /**\n     * The initial relatively index origin of the tab if it was created and selected after there\n     * was already a selected tab. Provides context of what position the tab should originate from.\n     */\n    origin: number | null = null;\n\n    /**\n     * Whether the tab is currently active.\n     */\n    isActive = false;\n\n    /** Portal that will be the hosted content of the tab */\n    private contentPortal: TemplatePortal | null = null;\n\n    constructor(private viewContainerRef: ViewContainerRef) {\n        super();\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (\n            changes.hasOwnProperty('textLabel') ||\n            changes.hasOwnProperty('disabled')\n        ) {\n            this.stateChanges.next();\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.stateChanges.complete();\n    }\n\n    ngOnInit(): void {\n        this.contentPortal = new TemplatePortal(\n            this.explicitContent || this.implicitContent,\n            this.viewContainerRef\n        );\n    }\n}\n","import {\n    animate,\n    state,\n    style,\n    transition,\n    trigger,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n\nexport const mcTabsAnimations: {\n    readonly translateTab: AnimationTriggerMetadata;\n} = {\n    /** Animation translates a tab along the X axis. */\n    translateTab: trigger('translateTab', [\n        // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n        state(\n            'center, void, left-origin-center, right-origin-center',\n            style({ transform: 'none' })\n        ),\n\n        // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n        // in order to ensure that the element has a height before its state changes. This is\n        // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n        // not have a static height and is not rendered. See related issue: #9465\n        state(\n            'left',\n            style({ transform: 'translate3d(-100%, 0, 0)', minHeight: '1px' })\n        ),\n        state(\n            'right',\n            style({ transform: 'translate3d(100%, 0, 0)', minHeight: '1px' })\n        ),\n\n        transition(\n            '* => left, * => right, left => center, right => center',\n            animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n        ),\n        transition('void => left-origin-center', [\n            style({ transform: 'translate3d(-100%, 0, 0)' }),\n            animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n        ]),\n        transition('void => right-origin-center', [\n            style({ transform: 'translate3d(100%, 0, 0)' }),\n            animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n        ])\n    ])\n};\n","import { AnimationEvent } from '@angular/animations';\nimport {\n    Component,\n    ChangeDetectorRef,\n    Input,\n    Inject,\n    Output,\n    EventEmitter,\n    OnDestroy,\n    OnInit,\n    ElementRef,\n    Directive,\n    Optional,\n    ViewEncapsulation,\n    ChangeDetectionStrategy,\n    ComponentFactoryResolver,\n    ViewContainerRef,\n    forwardRef,\n    ViewChild\n} from '@angular/core';\nimport { Directionality, Direction } from '@ptsecurity/cdk/bidi';\nimport { TemplatePortal, CdkPortalOutlet, PortalHostDirective } from '@ptsecurity/cdk/portal';\nimport { Subscription } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n\nimport { mcTabsAnimations } from './tabs-animations';\n\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type McTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type McTabBodyOriginState = 'left' | 'right';\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n    selector: 'mc-tab-body',\n    templateUrl: 'tab-body.html',\n    styleUrls: ['tab-body.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [mcTabsAnimations.translateTab],\n    host: {\n        class: 'mc-tab-body'\n    }\n})\nexport class McTabBody implements OnInit, OnDestroy {\n\n    /** The shifted index position of the tab body, where zero represents the active center tab. */\n    @Input()\n    set position(position: number) {\n        this.positionIndex = position;\n        this.computePositionAnimationState();\n    }\n\n    /** Tab body position state. Used by the animation trigger for the current state. */\n    bodyPosition: McTabBodyPositionState;\n\n    /** Event emitted when the tab begins to animate towards the center as the active tab. */\n    @Output() readonly onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n    /** Event emitted before the centering of the tab begins. */\n    @Output() readonly beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted before the centering of the tab begins. */\n    @Output() readonly afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted when the tab completes its animation towards the center. */\n    @Output() readonly onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n    /** The portal host inside of this container into which the tab body content will be loaded. */\n    @ViewChild(PortalHostDirective) portalHost: PortalHostDirective;\n\n    /** The tab body content to display. */\n    @Input('content') content: TemplatePortal;\n\n    /** Position that will be used when the tab is immediately becoming visible after creation. */\n    @Input() origin: number;\n\n    // Note that the default value will always be overwritten by `McTabBody`, but we need one\n    // anyway to prevent the animations module from throwing an error if the body is used on its own.\n    /** Duration for the tab's animation. */\n    @Input() animationDuration: string = '0ms';\n\n    /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n    private positionIndex: number;\n\n    /** Subscription to the directionality change observable. */\n    private dirChangeSubscription = Subscription.EMPTY;\n\n    constructor(private elementRef: ElementRef<HTMLElement>,\n                @Optional() private dir: Directionality,\n                changeDetectorRef: ChangeDetectorRef) {\n\n        if (this.dir && changeDetectorRef) {\n            this.dirChangeSubscription = this.dir.change.subscribe((direction: Direction) => {\n                this.computePositionAnimationState(direction);\n                changeDetectorRef.markForCheck();\n            });\n        }\n    }\n\n    /**\n     * After initialized, check if the content is centered and has an origin. If so, set the\n     * special position states that transition the tab from the left or right before centering.\n     */\n    ngOnInit() {\n        if (this.bodyPosition === 'center' && this.origin != null) {\n            this.bodyPosition = this.computePositionFromOrigin();\n        }\n    }\n\n    ngOnDestroy() {\n        this.dirChangeSubscription.unsubscribe();\n    }\n\n    onTranslateTabStarted(e: AnimationEvent): void {\n        const isCentering = this.isCenterPosition(e.toState);\n        this.beforeCentering.emit(isCentering);\n        if (isCentering) {\n            this.onCentering.emit(this.elementRef.nativeElement.clientHeight);\n        }\n    }\n\n    onTranslateTabComplete(e: AnimationEvent): void {\n        // If the transition to the center is complete, emit an event.\n        if (this.isCenterPosition(e.toState) && this.isCenterPosition(this.bodyPosition)) {\n            this.onCentered.emit();\n        }\n\n        if (this.isCenterPosition(e.fromState) && !this.isCenterPosition(this.bodyPosition)) {\n            this.afterLeavingCenter.emit();\n        }\n    }\n\n    /** The text direction of the containing app. */\n    getLayoutDirection(): Direction {\n        return this.dir && this.dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n\n    /** Whether the provided position state is considered center, regardless of origin. */\n    isCenterPosition(position: McTabBodyPositionState | string): boolean {\n        return position === 'center' ||\n            position === 'left-origin-center' ||\n            position === 'right-origin-center';\n    }\n\n    /** Computes the position state that will be used for the tab-body animation trigger. */\n    private computePositionAnimationState(dir: Direction = this.getLayoutDirection()) {\n        if (this.positionIndex < 0) {\n            this.bodyPosition = dir === 'ltr' ? 'left' : 'right';\n        } else if (this.positionIndex > 0) {\n            this.bodyPosition = dir === 'ltr' ? 'right' : 'left';\n        } else {\n            this.bodyPosition = 'center';\n        }\n    }\n\n    /**\n     * Computes the position state based on the specified origin position. This is used if the\n     * tab is becoming visible immediately after creation.\n     */\n    private computePositionFromOrigin(): McTabBodyPositionState {\n        const dir = this.getLayoutDirection();\n\n        if ((dir === 'ltr' && this.origin <= 0) || (dir === 'rtl' && this.origin > 0)) {\n            return 'left-origin-center';\n        }\n\n        return 'right-origin-center';\n    }\n}\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n    selector: '[mcTabBodyHost]'\n})\nexport class McTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n    /** Subscription to events for when the tab body begins centering. */\n    private centeringSub = Subscription.EMPTY;\n    /** Subscription to events for when the tab body finishes leaving from center position. */\n    private leavingSub = Subscription.EMPTY;\n\n    constructor(\n        componentFactoryResolver: ComponentFactoryResolver,\n        viewContainerRef: ViewContainerRef,\n        @Inject(forwardRef(() => McTabBody)) private host: McTabBody) {\n        super(componentFactoryResolver, viewContainerRef);\n    }\n\n    /** Set initial visibility or set up subscription for changing visibility. */\n    ngOnInit(): void {\n        super.ngOnInit();\n\n        this.centeringSub = this.host.beforeCentering\n            .pipe(startWith(this.host.isCenterPosition(this.host.bodyPosition)))\n            .subscribe((isCentering: boolean) => {\n                if (isCentering && !this.hasAttached()) {\n                    this.attach(this.host.content);\n                }\n            });\n\n        this.leavingSub = this.host.afterLeavingCenter.subscribe(() => {\n            this.detach();\n        });\n    }\n\n    /** Clean up centering subscription. */\n    ngOnDestroy(): void {\n        super.ngOnDestroy();\n        this.centeringSub.unsubscribe();\n        this.leavingSub.unsubscribe();\n    }\n}\n","import { Directive, ElementRef } from '@angular/core';\nimport {\n    CanDisable,\n    CanDisableCtor,\n    mixinDisabled\n} from '@ptsecurity/mosaic/core';\n\n\n// Boilerplate for applying mixins to McTabLabelWrapper.\n/** @docs-private */\nexport class McTabLabelWrapperBase {}\nexport const mcTabLabelWrapperMixinBase: CanDisableCtor &\n    typeof McTabLabelWrapperBase = mixinDisabled(McTabLabelWrapperBase);\n\n/**\n * Used in the `mc-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n    selector: '[mcTabLabelWrapper]',\n    inputs: ['disabled'],\n    host: {\n        '[class.mc-disabled]': 'disabled',\n        '[attr.aria-disabled]': '!!disabled'\n    }\n})\nexport class McTabLabelWrapper extends mcTabLabelWrapperMixinBase implements CanDisable {\n    constructor(public elementRef: ElementRef) {\n        super();\n    }\n\n    /** Sets focus on the wrapper element */\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    getOffsetLeft(): number {\n        return this.elementRef.nativeElement.offsetLeft;\n    }\n\n    getOffsetWidth(): number {\n        return this.elementRef.nativeElement.offsetWidth;\n    }\n}\n","import {\n    AfterContentChecked,\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Input,\n    NgZone,\n    OnDestroy,\n    Optional,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { FocusKeyManager } from '@ptsecurity/cdk/a11y';\nimport { Direction, Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceNumberProperty } from '@ptsecurity/cdk/coercion';\nimport { END, ENTER, HOME, SPACE } from '@ptsecurity/cdk/keycodes';\nimport { ViewportRuler } from '@ptsecurity/cdk/scrolling';\nimport { merge, of as observableOf, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { McTabLabelWrapper } from './tab-label-wrapper';\n\n\nconst VIEWPORT_THROTTLE_TIME = 150;\nconst SCROLL_DISTANCE_DELIMITER = 3;\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to McTabHeader.\n/** @docs-private */\nexport class McTabHeaderBase {}\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group.\n * When the tabs list's width exceeds the width of the header container,\n * then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n    selector: 'mc-tab-header',\n    templateUrl: 'tab-header.html',\n    styleUrls: ['tab-header.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        class: 'mc-tab-header',\n        '[class.mc-tab-header__pagination-controls_enabled]':\n            'showPaginationControls',\n        '[class.mc-tab-header_rtl]': 'getLayoutDirection() == \\'rtl\\''\n    }\n})\nexport class McTabHeader extends McTabHeaderBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy {\n    /** The index of the active tab. */\n    @Input()\n    get selectedIndex(): number {\n        return this._selectedIndex;\n    }\n    set selectedIndex(value: number) {\n        const coercedValue = coerceNumberProperty(value);\n        this.selectedIndexChanged = this._selectedIndex !== coercedValue;\n        this._selectedIndex = coercedValue;\n\n        if (this.keyManager) {\n            this.keyManager.updateActiveItem(coercedValue);\n        }\n    }\n\n    /** Tracks which element has focus; used for keyboard navigation */\n    get focusIndex(): number {\n        return this.keyManager ? this.keyManager.activeItemIndex! : 0;\n    }\n\n    /** When the focus index is set, we must manually send focus to the correct label */\n    set focusIndex(value: number) {\n        if (\n            !this.isValidIndex(value) ||\n            this.focusIndex === value ||\n            !this.keyManager\n        ) {\n            return;\n        }\n\n        this.keyManager.setActiveItem(value);\n    }\n\n    /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n    get scrollDistance(): number {\n        return this._scrollDistance;\n    }\n    set scrollDistance(v: number) {\n        this._scrollDistance = Math.max(\n            0,\n            Math.min(this.getMaxScrollDistance(), v)\n        );\n\n        // Mark that the scroll distance has changed so that after the view is checked, the CSS\n        // transformation can move the header.\n        this.scrollDistanceChanged = true;\n        this.checkScrollingControls();\n    }\n\n    @ContentChildren(McTabLabelWrapper)\n    labelWrappers: QueryList<McTabLabelWrapper>;\n    @ViewChild('tabListContainer')\n    tabListContainer: ElementRef;\n    @ViewChild('tabList')\n    tabList: ElementRef;\n\n    /** Whether the controls for pagination should be displayed */\n    showPaginationControls = false;\n\n    /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n    disableScrollAfter = true;\n\n    /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n    disableScrollBefore = true;\n\n    /** Event emitted when the option is selected. */\n    @Output()\n    readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n    /** Event emitted when a label is focused. */\n    @Output()\n    readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n    /** The distance in pixels that the tab labels should be translated to the left. */\n    private _scrollDistance = 0;\n\n    /** Whether the header should scroll to the selected index after the view has been checked. */\n    private selectedIndexChanged = false;\n\n    /** Emits when the component is destroyed. */\n    private readonly destroyed = new Subject<void>();\n\n    /**\n     * The number of tab labels that are displayed on the header. When this changes, the header\n     * should re-evaluate the scroll position.\n     */\n    private tabLabelCount: number;\n\n    /** Whether the scroll distance has changed and should be applied after the view is checked. */\n    private scrollDistanceChanged: boolean;\n\n    /** Used to manage focus between the tabs. */\n    private keyManager: FocusKeyManager<McTabLabelWrapper>;\n\n    /** Cached text content of the header. */\n    private currentTextContent: string;\n\n    private _selectedIndex: number = 0;\n\n    constructor(\n        private elementRef: ElementRef,\n        private changeDetectorRef: ChangeDetectorRef,\n        private viewportRuler: ViewportRuler,\n        @Optional() private dir: Directionality,\n        private ngZone: NgZone\n    ) {\n        super();\n    }\n\n    ngAfterContentChecked(): void {\n        // If the number of tab labels have changed, check if scrolling should be enabled\n        if (this.tabLabelCount !== this.labelWrappers.length) {\n            this.updatePagination();\n            this.tabLabelCount = this.labelWrappers.length;\n            this.changeDetectorRef.markForCheck();\n        }\n\n        // If the selected index has changed, scroll to the label and check if the scrolling controls\n        // should be disabled.\n        if (this.selectedIndexChanged) {\n            this.scrollToLabel(this._selectedIndex);\n            this.checkScrollingControls();\n            this.selectedIndexChanged = false;\n            this.changeDetectorRef.markForCheck();\n        }\n\n        // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n        // then translate the header to reflect this.\n        if (this.scrollDistanceChanged) {\n            this.updateTabScrollPosition();\n            this.scrollDistanceChanged = false;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    handleKeydown(event: KeyboardEvent) {\n        switch (event.keyCode) {\n            case HOME:\n                this.keyManager.setFirstItemActive();\n                event.preventDefault();\n                break;\n            case END:\n                this.keyManager.setLastItemActive();\n                event.preventDefault();\n                break;\n            case ENTER:\n            case SPACE:\n                this.selectFocusedIndex.emit(this.focusIndex);\n                event.preventDefault();\n                break;\n            default:\n                this.keyManager.onKeydown(event);\n        }\n    }\n\n    ngAfterContentInit() {\n        const dirChange = this.dir ? this.dir.change : observableOf(null);\n        const resize = this.viewportRuler.change(VIEWPORT_THROTTLE_TIME);\n        const realign = () => {\n            this.updatePagination();\n        };\n\n        this.keyManager = new FocusKeyManager(this.labelWrappers)\n            .withHorizontalOrientation(this.getLayoutDirection())\n            .withWrap();\n\n        this.keyManager.updateActiveItem(0);\n\n        // Defer the first call in order to allow for slower browsers to lay out the elements.\n        // This helps in cases where the user lands directly on a page with paginated tabs.\n        typeof requestAnimationFrame === undefined\n            ? realign()\n            : requestAnimationFrame(realign);\n\n        // On dir change or window resize, update the orientation of\n        // the key manager if the direction has changed.\n        merge(dirChange, resize)\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(() => {\n                realign();\n                this.keyManager.withHorizontalOrientation(\n                    this.getLayoutDirection()\n                );\n            });\n\n        // If there is a change in the focus key manager we need to emit the `indexFocused`\n        // event in order to provide a public event that notifies about focus changes. Also we realign\n        // the tabs container by scrolling the new focused tab into the visible section.\n        this.keyManager.change\n            .pipe(takeUntil(this.destroyed))\n            .subscribe((newFocusIndex) => {\n                this.indexFocused.emit(newFocusIndex);\n                this.setTabFocus(newFocusIndex);\n            });\n    }\n\n    ngOnDestroy() {\n        this.destroyed.next();\n        this.destroyed.complete();\n    }\n\n    /**\n     * Callback for when the MutationObserver detects that the content has changed.\n     */\n    onContentChanges() {\n        const textContent = this.elementRef.nativeElement.textContent;\n\n        // We need to diff the text content of the header, because the MutationObserver callback\n        // will fire even if the text content didn't change which is inefficient and is prone\n        // to infinite loops if a poorly constructed expression is passed in.\n\n        if (textContent !== this.currentTextContent) {\n            this.currentTextContent = textContent;\n\n            const zoneCallback = () => {\n                this.updatePagination();\n                this.changeDetectorRef.markForCheck();\n            };\n\n            // The content observer runs outside the `NgZone` by default, which\n            // means that we need to bring the callback back in ourselves.\n            // TODO: Remove null check for `_ngZone` once it's a required parameter.\n            this.ngZone ? this.ngZone.run(zoneCallback) : zoneCallback();\n        }\n    }\n\n    /**\n     * Updating the view whether pagination should be enabled or not\n     *\n     * WARNING: Calling this method can be very costly in terms of performance.  It should be called\n     * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n     * page.\n     */\n    updatePagination() {\n        this.checkPaginationEnabled();\n        this.checkScrollingControls();\n        this.updateTabScrollPosition();\n    }\n\n    /**\n     * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n     * providing a valid index and return true.\n     */\n    isValidIndex(index: number): boolean {\n        if (!this.labelWrappers) {\n            return true;\n        }\n\n        const tab = this.labelWrappers\n            ? this.labelWrappers.toArray()[index]\n            : null;\n\n        return !!tab && !tab.disabled;\n    }\n\n    /**\n     * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n     * scrolling is enabled.\n     */\n    setTabFocus(tabIndex: number) {\n        if (this.showPaginationControls) {\n            this.scrollToLabel(tabIndex);\n        }\n\n        if (this.labelWrappers && this.labelWrappers.length) {\n            this.labelWrappers.toArray()[tabIndex].focus();\n\n            // Do not let the browser manage scrolling to focus the element, this will be handled\n            // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n            // should be the full width minus the offset width.\n            const containerEl = this.tabListContainer.nativeElement;\n            const dir = this.getLayoutDirection();\n\n            if (dir === 'ltr') {\n                containerEl.scrollLeft = 0;\n            } else {\n                containerEl.scrollLeft =\n                    containerEl.scrollWidth - containerEl.offsetWidth;\n            }\n        }\n    }\n\n    /** The layout direction of the containing app. */\n    getLayoutDirection(): Direction {\n        return this.dir && this.dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n\n    /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n    updateTabScrollPosition() {\n        const scrollDistance = this.scrollDistance;\n        const translateX =\n            this.getLayoutDirection() === 'ltr'\n                ? -scrollDistance\n                : scrollDistance;\n\n        // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n        // seems to cause flickering and overflow in Internet Explorer.\n        // See: https://github.com/angular/material2/issues/10276\n        // We round the `transform` here, because transforms with sub-pixel precision cause some\n        // browsers to blur the content of the element.\n        this.tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n        // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n        // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n        // it doesn't get thrown off.\n        this.tabList.nativeElement.scrollLeft = 0;\n    }\n\n    /**\n     * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n     * the end of the list, respectively). The distance to scroll is computed to be a third of the\n     * length of the tab list view window.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    scrollHeader(scrollDir: ScrollDirection) {\n        const viewLength = this.tabListContainer.nativeElement.offsetWidth;\n\n        // Move the scroll distance one-third the length of the tab list's viewport.\n        this.scrollDistance +=\n            ((scrollDir === 'before' ? -1 : 1) * viewLength) / SCROLL_DISTANCE_DELIMITER;\n    }\n\n    /**\n     * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    scrollToLabel(labelIndex: number) {\n        const selectedLabel = this.labelWrappers\n            ? this.labelWrappers.toArray()[labelIndex]\n            : null;\n\n        if (!selectedLabel) {\n            return;\n        }\n\n        // The view length is the visible width of the tab labels.\n        const viewLength = this.tabListContainer.nativeElement.offsetWidth;\n\n        let labelBeforePos: number;\n        let labelAfterPos: number;\n\n        if (this.getLayoutDirection() === 'ltr') {\n            labelBeforePos = selectedLabel.getOffsetLeft();\n            labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n        } else {\n            labelAfterPos =\n                this.tabList.nativeElement.offsetWidth -\n                selectedLabel.getOffsetLeft();\n            labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n        }\n\n        const beforeVisiblePos = this.scrollDistance;\n        const afterVisiblePos = this.scrollDistance + viewLength;\n\n        if (labelBeforePos < beforeVisiblePos) {\n            // Scroll header to move label to the before direction\n            this.scrollDistance -=\n                beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n        } else if (labelAfterPos > afterVisiblePos) {\n            // Scroll header to move label to the after direction\n            this.scrollDistance +=\n                labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n        }\n    }\n\n    /**\n     * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n     * tab list is wider than the size of the header container, then the pagination controls should\n     * be shown.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    checkPaginationEnabled() {\n        const isEnabled =\n            this.tabList.nativeElement.scrollWidth >\n            this.elementRef.nativeElement.offsetWidth;\n\n        if (!isEnabled) {\n            this.scrollDistance = 0;\n        }\n\n        if (isEnabled !== this.showPaginationControls) {\n            this.changeDetectorRef.markForCheck();\n        }\n\n        this.showPaginationControls = isEnabled;\n    }\n\n    /**\n     * Evaluate whether the before and after controls should be enabled or disabled.\n     * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n     * before button. If the header is at the end of the list (scroll distance is equal to the\n     * maximum distance we can scroll), then disable the after button.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    checkScrollingControls() {\n        // Check if the pagination arrows should be activated.\n        this.disableScrollBefore = this.scrollDistance === 0;\n        this.disableScrollAfter =\n            this.scrollDistance === this.getMaxScrollDistance();\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n     * is equal to the difference in width between the tab list container and tab header container.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    getMaxScrollDistance(): number {\n        const lengthOfTabList = this.tabList.nativeElement.scrollWidth;\n        const viewLength = this.tabListContainer.nativeElement.offsetWidth;\n\n        return lengthOfTabList - viewLength || 0;\n    }\n}\n","import {\n    AfterContentChecked,\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnDestroy,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    InjectionToken,\n    Inject,\n    Optional,\n    Directive, Attribute\n} from '@angular/core';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@ptsecurity/cdk/coercion';\nimport {\n    CanColor,\n    CanColorCtor,\n    mixinColor,\n    mixinDisabled\n} from '@ptsecurity/mosaic/core';\nimport { merge, Subscription } from 'rxjs';\n\nimport { McTab } from './tab';\nimport { McTabHeader } from './tab-header';\n\n\n@Directive({\n    selector: 'mc-tab-group[mc-light-tabs], [mc-tab-nav-bar][mc-light-tabs]',\n    host: { class: 'mc-tab-group_light' }\n})\nexport class McLightTabsCssStyler { }\n\n@Directive({\n    selector: 'mc-tab-group[mc-align-tabs-center], [mc-tab-nav-bar][mc-align-tabs-center]',\n    host: { class: 'mc-tab-group_align-labels-center' }\n})\nexport class McAlignTabsCenterCssStyler { }\n\n@Directive({\n    selector: 'mc-tab-group[mc-align-tabs-end], [mc-tab-nav-bar][mc-align-tabs-end]',\n    host: { class: 'mc-tab-group_align-labels-end' }\n})\nexport class McAlignTabsEndCssStyler { }\n\n@Directive({\n    selector: 'mc-tab-group[mc-stretch-tabs], [mc-tab-nav-bar][mc-stretch-tabs]',\n    host: { class: 'mc-tab-group_stretch-labels' }\n})\nexport class McStretchTabsCssStyler { }\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class McTabChangeEvent {\n    /** Index of the currently-selected tab. */\n    index: number;\n    /** Reference to the currently-selected tab. */\n    tab: McTab;\n}\n\n/** Possible positions for the tab header. */\nexport type McTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface IMcTabsConfig {\n    /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n    animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MC_TABS_CONFIG = new InjectionToken('MC_TABS_CONFIG');\n\n// Boilerplate for applying mixins to McTabGroup.\n/** @docs-private */\nexport class McTabGroupBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) { }\n}\nexport const mcTabGroupMixinBase:\n    CanColorCtor &\n    typeof McTabGroupBase =\n    mixinColor(mixinDisabled(McTabGroupBase));\n\n/**\n * Tab-group component.  Supports basic tab pairs (label + content) and includes\n * keyboard navigation.\n */\n@Component({\n    selector: 'mc-tab-group',\n    exportAs: 'mcTabGroup',\n    templateUrl: 'tab-group.html',\n    styleUrls: ['tab-group.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['color'],\n    host: {\n        class: 'mc-tab-group',\n        '[class.mc-tab-group_dynamic-height]': 'dynamicHeight',\n        '[class.mc-tab-group_inverted-header]': 'headerPosition === \"below\"'\n    }\n})\nexport class McTabGroup extends mcTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor {\n    lightTab: boolean;\n\n    /** Whether the tab group should grow to the size of the active tab. */\n    @Input()\n    get dynamicHeight(): boolean { return this._dynamicHeight; }\n    set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n\n    /** The index of the active tab. */\n    @Input()\n    get selectedIndex(): number | null { return this._selectedIndex; }\n    set selectedIndex(value: number | null) {\n        this.indexToSelect = coerceNumberProperty(value, null);\n    }\n\n    @ContentChildren(McTab) tabs: QueryList<McTab>;\n\n    @ViewChild('tabBodyWrapper') tabBodyWrapper: ElementRef;\n\n    @ViewChild('tabHeader') tabHeader: McTabHeader;\n\n    /** Position of the tab header. */\n    @Input() headerPosition: McTabHeaderPosition = 'above';\n\n    /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n    @Input() animationDuration: string;\n\n    /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n    @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n    /** Event emitted when focus has changed within a tab group. */\n    @Output() readonly focusChange: EventEmitter<McTabChangeEvent> =\n        new EventEmitter<McTabChangeEvent>();\n\n    /** Event emitted when the body animation has completed */\n    @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Event emitted when the tab selection has changed. */\n    @Output() readonly selectedTabChange: EventEmitter<McTabChangeEvent> =\n        new EventEmitter<McTabChangeEvent>(true);\n\n    /** The tab index that should be selected after the content has been checked. */\n    private indexToSelect: number | null = 0;\n\n    /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n    private tabBodyWrapperHeight: number = 0;\n\n    /** Subscription to tabs being added/removed. */\n    private tabsSubscription = Subscription.EMPTY;\n\n    /** Subscription to changes in the tab labels. */\n    private tabLabelSubscription = Subscription.EMPTY;\n    private _dynamicHeight: boolean = false;\n    private _selectedIndex: number | null = null;\n\n    private groupId: number;\n\n    constructor(\n        elementRef: ElementRef,\n        private changeDetectorRef: ChangeDetectorRef,\n        @Attribute('mc-light-tabs') lightTabs: string,\n        @Inject(MC_TABS_CONFIG) @Optional() defaultConfig?: IMcTabsConfig\n    ) {\n        super(elementRef);\n\n        this.lightTab = coerceBooleanProperty(lightTabs);\n\n        this.groupId = nextId++;\n        this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n            defaultConfig.animationDuration : '0ms';\n    }\n\n    /**\n     * After the content is checked, this component knows what tabs have been defined\n     * and what the selected index should be. This is where we can know exactly what position\n     * each tab should be in according to the new selected index, and additionally we know how\n     * a new selected tab should transition in (from the left or right).\n     */\n    ngAfterContentChecked() {\n        // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n        // the amount of tabs changes before the actual change detection runs.\n        const indexToSelect = this.indexToSelect = this.clampTabIndex(this.indexToSelect);\n\n        // If there is a change in selected index, emit a change event. Should not trigger if\n        // the selected index has not yet been initialized.\n        if (this._selectedIndex !== indexToSelect) {\n            const isFirstRun = this._selectedIndex == null;\n\n            if (!isFirstRun) {\n                this.selectedTabChange.emit(this.createChangeEvent(indexToSelect));\n            }\n\n            // Changing these values after change detection has run\n            // since the checked content may contain references to them.\n            Promise.resolve().then(() => {\n                this.tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n                if (!isFirstRun) {\n                    this.selectedIndexChange.emit(indexToSelect);\n                }\n            });\n        }\n\n        // Setup the position for each tab and optionally setup an origin on the next selected tab.\n        this.tabs.forEach((tab: McTab, index: number) => {\n            tab.position = index - indexToSelect;\n\n            // If there is already a selected tab, then set up an origin for the next selected tab\n            // if it doesn't have one already.\n            if (this._selectedIndex != null && tab.position === 0 && !tab.origin) {\n                tab.origin = indexToSelect - this._selectedIndex;\n            }\n        });\n\n        if (this._selectedIndex !== indexToSelect) {\n            this._selectedIndex = indexToSelect;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    ngAfterContentInit() {\n        this.subscribeToTabLabels();\n\n        // Subscribe to changes in the amount of tabs, in order to be\n        // able to re-render the content as new tabs are added or removed.\n        this.tabsSubscription = this.tabs.changes.subscribe(() => {\n            const indexToSelect = this.clampTabIndex(this.indexToSelect);\n\n            // Maintain the previously-selected tab if a new tab is added or removed and there is no\n            // explicit change that selects a different tab.\n            if (indexToSelect === this._selectedIndex) {\n                const tabs = this.tabs.toArray();\n\n                for (let i = 0; i < tabs.length; i++) {\n                    if (tabs[i].isActive) {\n                        // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n                        // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n                        // adding a tab within the `selectedIndexChange` event.\n                        this.indexToSelect = this._selectedIndex = i;\n                        break;\n                    }\n                }\n            }\n\n            this.subscribeToTabLabels();\n            this.changeDetectorRef.markForCheck();\n        });\n    }\n\n    ngOnDestroy() {\n        this.tabsSubscription.unsubscribe();\n        this.tabLabelSubscription.unsubscribe();\n    }\n\n    focusChanged(index: number) {\n        this.focusChange.emit(this.createChangeEvent(index));\n    }\n\n    /** Returns a unique id for each tab label element */\n    getTabLabelId(i: number): string {\n        return `mc-tab-label-${this.groupId}-${i}`;\n    }\n\n    /** Returns a unique id for each tab content element */\n    getTabContentId(i: number): string {\n        return `mc-tab-content-${this.groupId}-${i}`;\n    }\n\n    /**\n     * Sets the height of the body wrapper to the height of the activating tab if dynamic\n     * height property is true.\n     */\n    setTabBodyWrapperHeight(tabHeight: number): void {\n        if (!this._dynamicHeight || !this.tabBodyWrapperHeight) { return; }\n\n        const wrapper: HTMLElement = this.tabBodyWrapper.nativeElement;\n\n        wrapper.style.height = `${this.tabBodyWrapperHeight}px`;\n\n        // This conditional forces the browser to paint the height so that\n        // the animation to the new height can have an origin.\n        if (this.tabBodyWrapper.nativeElement.offsetHeight) {\n            wrapper.style.height = `${tabHeight}px`;\n        }\n    }\n\n    /** Removes the height of the tab body wrapper. */\n    removeTabBodyWrapperHeight(): void {\n        this.tabBodyWrapperHeight = this.tabBodyWrapper.nativeElement.clientHeight;\n        this.tabBodyWrapper.nativeElement.style.height = '';\n        this.animationDone.emit();\n    }\n\n    /** Handle click events, setting new selected index if appropriate. */\n    handleClick(tab: McTab, tabHeader: McTabHeader, index: number) {\n        if (!tab.disabled) {\n            this.selectedIndex = tabHeader.focusIndex = index;\n        }\n    }\n\n    /** Retrieves the tabindex for the tab. */\n    getTabIndex(tab: McTab, index: number): number | null {\n        if (tab.disabled) {\n            return null;\n        }\n\n        return this.selectedIndex === index ? 0 : -1;\n    }\n\n    private createChangeEvent(index: number): McTabChangeEvent {\n        const event = new McTabChangeEvent();\n        event.index = index;\n        if (this.tabs && this.tabs.length) {\n            event.tab = this.tabs.toArray()[index];\n        }\n\n        return event;\n    }\n\n    /**\n     * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n     * on the McTab component, whereas the data binding is inside the McTabGroup. In order for the\n     * binding to be updated, we need to subscribe to changes in it and trigger change detection\n     * manually.\n     */\n    private subscribeToTabLabels() {\n        if (this.tabLabelSubscription) {\n            this.tabLabelSubscription.unsubscribe();\n        }\n\n        this.tabLabelSubscription = merge(...this.tabs.map((tab) => tab.stateChanges))\n            .subscribe(() => this.changeDetectorRef.markForCheck());\n    }\n\n    /** Clamps the given index to the bounds of 0 and the tabs length. */\n    private clampTabIndex(index: number | null): number {\n        // Note the `|| 0`, which ensures that values like NaN can't get through\n        // and which would otherwise throw the component into an infinite loop\n        // (since Mch.max(NaN, 0) === NaN).\n        return Math.min(this.tabs.length - 1, Math.max(index || 0, 0));\n    }\n}\n","import { ComponentRef, Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { Overlay, OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal } from '@ptsecurity/cdk/portal';\n\nimport { McModalControlService } from './modal-control.service';\nimport { McModalRef } from './modal-ref.class';\nimport { McModalComponent } from './modal.component';\nimport { ConfirmType, IModalOptions, IModalOptionsForService } from './modal.type';\n\n\n// A builder used for managing service creating modals\nexport class ModalBuilderForService {\n\n    // Modal ComponentRef, \"null\" means it has been destroyed\n    private modalRef: ComponentRef<McModalComponent> | null;\n    private overlayRef: OverlayRef;\n\n    constructor(private overlay: Overlay, options: IModalOptionsForService = {}) {\n        this.createModal();\n\n        if (!('mcGetContainer' in options)) {\n            options.mcGetContainer = undefined;\n        }\n\n        this.changeProps(options);\n        this.modalRef!.instance.open();\n        this.modalRef!.instance.mcAfterClose.subscribe(() => this.destroyModal());\n\n        this.overlayRef.keydownEvents()\n            // @ts-ignore\n            .pipe(filter((event: KeyboardEvent) => {\n                return event.keyCode === ESCAPE && options.mcCloseByESC;\n            }))\n            .subscribe(() => this.modalRef!.instance.close());\n    }\n\n    getInstance(): McModalComponent | null {\n        return this.modalRef && this.modalRef.instance;\n    }\n\n    destroyModal(): void {\n        if (this.modalRef) {\n            this.overlayRef.dispose();\n            this.modalRef = null;\n        }\n    }\n\n    private changeProps(options: IModalOptions): void {\n        if (this.modalRef) {\n            // here not limit user's inputs at runtime\n            Object.assign(this.modalRef.instance, options);\n        }\n    }\n\n    // Create component to ApplicationRef\n    private createModal(): void {\n        this.overlayRef = this.overlay.create();\n        this.modalRef = this.overlayRef.attach(new ComponentPortal(McModalComponent));\n    }\n}\n\n@Injectable()\nexport class McModalService {\n    // Track of the current close modals (we assume invisible is close this time)\n    get openModals(): McModalRef[] {\n        return this.modalControl.openModals;\n    }\n\n    get afterAllClose(): Observable<void> {\n        return this.modalControl.afterAllClose.asObservable();\n    }\n\n    constructor(\n        private overlay: Overlay,\n        private modalControl: McModalControlService) {\n    }\n\n    // Closes all of the currently-open dialogs\n    closeAll(): void {\n        this.modalControl.closeAll();\n    }\n\n    create<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n\n        if (typeof options.mcOnCancel !== 'function') {\n            // Leave a empty function to close this modal by default\n            // tslint:disable-next-line\n            options.mcOnCancel = () => {};\n        }\n\n        if (!('mcCloseByESC' in options)) {\n            options.mcCloseByESC = true;\n        }\n\n\n        if (!('mcWidth' in options)) {\n            // tslint:disable-next-line\n            options.mcWidth = 480;\n        }\n\n        return new ModalBuilderForService(this.overlay, options).getInstance()!;\n    }\n\n    confirm<T>(options: IModalOptionsForService<T> = {}, confirmType: ConfirmType = 'confirm'): McModalRef<T> {\n        if ('mcFooter' in options) {\n            console.warn(`The Confirm-Modal doesn't support \"mcFooter\", this property will be ignored.`);\n        }\n\n        // NOTE: only support function currently by calling confirm()\n        if (typeof options.mcOnOk !== 'function') {\n            // Leave a empty function to close this modal by default\n            // tslint:disable-next-line\n            options.mcOnOk = () => {};\n        }\n\n        options.mcModalType = 'confirm';\n        options.mcClassName = `mc-confirm mc-confirm-${confirmType} ${options.mcClassName || ''}`;\n        options.mcMaskClosable = false;\n\n        return this.create(options);\n    }\n\n    success<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n        return this.simpleConfirm(options, 'success');\n    }\n\n    delete<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n        return this.simpleConfirm(options, 'warn');\n    }\n\n    private simpleConfirm<T>(options: IModalOptionsForService<T> = {}, confirmType: ConfirmType): McModalRef<T> {\n        // Remove the Cancel button if the user not specify a Cancel button\n        if (!('mcCancelText' in options)) {\n            // @ts-ignore\n            options.mcCancelText = null;\n        }\n\n        return this.confirm(options, confirmType);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { McButtonModule } from '@ptsecurity/mosaic/button';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { CssUnitPipe } from './css-unit.pipe';\nimport { McModalControlService } from './modal-control.service';\nimport { McModalComponent } from './modal.component';\nimport { McModalService } from './modal.service';\n\n\n@NgModule({\n    imports: [ CommonModule, OverlayModule, McButtonModule, McIconModule ],\n    exports: [ McModalComponent ],\n    declarations: [ McModalComponent, CssUnitPipe ],\n    entryComponents: [ McModalComponent ],\n    providers: [ McModalControlService, McModalService ]\n})\nexport class McModalModule { }\n","import { fromEvent, Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nimport {\n    AfterViewInit,\n    Component, Directive,\n    ElementRef,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    ViewEncapsulation,\n    ContentChild,\n    TemplateRef,\n    ChangeDetectorRef,\n    ChangeDetectionStrategy,\n    ViewChild\n} from '@angular/core';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { SPACE } from '@ptsecurity/cdk/keycodes';\nimport { Platform } from '@ptsecurity/cdk/platform';\nimport { CanDisable, CanDisableCtor, mixinDisabled } from '@ptsecurity/mosaic/core';\n\n\nconst COLLAPSED_CLASS: string = 'mc-navbar-collapsed-title';\nconst MC_ICON = 'mc-icon';\nconst MC_NAVBAR = 'mc-navbar';\nconst MC_NAVBAR_CONTAINER = 'mc-navbar-container';\nconst MC_NAVBAR_ITEM = 'mc-navbar-item';\nconst MC_NAVBAR_BRAND = 'mc-navbar-brand';\nconst MC_NAVBAR_TITLE = 'mc-navbar-title';\nconst MC_NAVBAR_LOGO = 'mc-navbar-logo';\n\nexport type McNavbarContainerPositionType = 'left' | 'right';\n\nexport interface IMcNavbarDropdownItem {\n    link?: string;\n    text: string;\n}\n\n@Directive({\n    selector: MC_NAVBAR_LOGO,\n    host: {\n        class: MC_NAVBAR_LOGO\n    }\n})\nexport class McNavbarLogo {}\n\n@Directive({\n    selector: MC_NAVBAR_BRAND,\n    host: {\n        class: MC_NAVBAR_BRAND\n    }\n})\nexport class McNavbarBrand {}\n\n@Directive({\n    selector: MC_NAVBAR_TITLE,\n    host: {\n        class: MC_NAVBAR_TITLE\n    }\n})\nexport class McNavbarTitle {}\n\nexport class McNavbarItemBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McNavbarMixinBase: CanDisableCtor & typeof McNavbarItemBase = mixinDisabled(McNavbarItemBase);\n\n@Component({\n    selector: MC_NAVBAR_ITEM,\n    template: `\n        <a\n            [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\n            (click)=\"handleClickByItem()\"\n            (keydown)=\"handleKeydown($event)\"\n            class=\"mc-navbar-item\"\n        >\n            <ng-content></ng-content>\n            <i *ngIf=\"hasDropdownContent\" mc-icon=\"mc-angle-down-M_16\"></i>\n        </a>\n        <ul\n            #dropdownContent\n            *ngIf=\"hasDropdownContent\"\n            [ngClass]=\"{ 'is-collapsed': isCollapsed }\"\n            class=\"mc-navbar-dropdown\"\n        >\n            <li\n                *ngFor=\"let item of dropdownItems\"\n                (click)=\"handleClickByDropdownItem()\"\n                class=\"mc-navbar-dropdown-item\"\n            >\n                <ng-container *ngIf=\"dropdownItemTmpl\">\n                    <ng-container *ngTemplateOutlet=\"dropdownItemTmpl; context: { $implicit: item }\"></ng-container>\n                </ng-container>\n                <a\n                    *ngIf=\"!dropdownItemTmpl\"\n                    [attr.href]=\"item.link\"\n                    [ngClass]=\"{ 'is-active': isActiveDropdownLink(item.link) }\"\n                    class=\"mc-navbar-dropdown-link\"\n                >{{ item.text }}</a>\n            </li>\n        </ul>\n    `,\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': '-1'\n    }\n})\nexport class McNavbarItem extends _McNavbarMixinBase implements OnInit, AfterViewInit, OnDestroy, CanDisable {\n\n    @Input()\n    tabIndex: number = 0;\n\n    @Input()\n    dropdownItems: IMcNavbarDropdownItem[] = [];\n\n    @Input()\n    set collapsedTitle(value: string) {\n        this.elementRef.nativeElement.setAttribute('computedTitle', encodeURI(value));\n    }\n\n    @ContentChild('dropdownItemTmpl', { read: TemplateRef })\n    dropdownItemTmpl: TemplateRef<IMcNavbarDropdownItem>;\n\n    @ViewChild('dropdownContent', { read: ElementRef })\n    dropdownContent: ElementRef;\n\n    get hasDropdownContent() {\n        return this.dropdownItems.length > 0;\n    }\n\n    isCollapsed: boolean = true;\n\n    private _subscription: Subscription = new Subscription();\n    private _focusMonitor$: Observable<FocusOrigin>;\n\n    private get _dropdownElements(): HTMLElement[] {\n        return this.dropdownContent ? this.dropdownContent.nativeElement.querySelectorAll('li > *') : [];\n    }\n\n    constructor(\n        public  elementRef: ElementRef,\n        private _focusMonitor: FocusMonitor,\n        private _platform: Platform,\n        private _cdRef: ChangeDetectorRef\n    ) {\n        super(elementRef);\n    }\n\n    ngOnInit() {\n        this.denyClickIfDisabled();\n\n        this._focusMonitor$ = this._focusMonitor.monitor(this.elementRef.nativeElement, true);\n\n        if (this.hasDropdownContent) {\n            this.listenClickOutside();\n        }\n    }\n\n    ngAfterViewInit() {\n        if (!this.hasDropdownContent) {\n            return;\n        }\n\n        this.startListenFocusDropdownItems();\n    }\n\n    ngOnDestroy() {\n        this._subscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n        this.stopListenFocusDropdownItems();\n    }\n\n    isActiveDropdownLink(link: string): boolean {\n        if (!this._platform.isBrowser) {\n            return false;\n        }\n\n        return window.location.href.indexOf(link) >= 0;\n    }\n\n    handleClickByItem() {\n        this.toggleDropdown();\n    }\n\n    handleKeydown($event: KeyboardEvent) {\n        const isNavbarItem = ($event.target as HTMLElement).classList.contains(MC_NAVBAR_ITEM);\n\n        // tslint:disable-next-line\n        if (this.hasDropdownContent && $event.keyCode === SPACE && isNavbarItem) {\n            this.toggleDropdown();\n        }\n    }\n\n    handleClickByDropdownItem() {\n        this.forceCloseDropdown();\n    }\n\n    private listenClickOutside() {\n        this._subscription.add(\n            this._focusMonitor$.subscribe((origin) => {\n                if (origin === null) {\n                    this.forceCloseDropdown();\n                }\n            })\n        );\n    }\n\n    private toggleDropdown() {\n        this.isCollapsed = !this.isCollapsed;\n    }\n\n    private forceCloseDropdown() {\n        this.isCollapsed = true;\n        this._cdRef.detectChanges();\n    }\n\n    private startListenFocusDropdownItems() {\n        this._dropdownElements.forEach((el) => {\n            this._focusMonitor.monitor(el, true);\n        });\n    }\n\n    private stopListenFocusDropdownItems() {\n        this._dropdownElements.forEach((el) => {\n            this._focusMonitor.stopMonitoring(el);\n        });\n    }\n\n    // This method is required due to angular 2 issue https://github.com/angular/angular/issues/11200\n    private denyClickIfDisabled() {\n        const events: Event[] = this.elementRef.nativeElement.eventListeners('click');\n\n        events.forEach((event) => this.elementRef.nativeElement.removeEventListener('click', event));\n\n        this.elementRef.nativeElement.addEventListener('click', (event: MouseEvent) => {\n            if (this.elementRef.nativeElement.hasAttribute('disabled')) {\n                event.stopImmediatePropagation();\n            }\n        }, true);\n\n        events.forEach((event) => this.elementRef.nativeElement.addEventListener('click', event));\n    }\n}\n\n@Directive({\n    selector: MC_NAVBAR_CONTAINER\n})\nexport class McNavbarContainer {\n    @Input()\n    position: McNavbarContainerPositionType = 'left';\n\n    @HostBinding('class')\n    get cssClasses(): string {\n        return this.position === 'left' ? 'mc-navbar-left' : 'mc-navbar-right';\n    }\n}\n\nclass CollapsibleItem {\n    private _collapsed: boolean = false;\n\n    constructor(\n        public element: HTMLElement,\n        public width: number\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        this._collapsed = collapsed;\n\n        this.updateCollapsedClass();\n    }\n\n    private updateCollapsedClass() {\n        if (this._collapsed) {\n            this.element.classList.add(COLLAPSED_CLASS);\n        } else {\n            this.element.classList.remove(COLLAPSED_CLASS);\n        }\n\n    }\n}\n\nclass CachedItemWidth {\n\n    get canCollapse(): boolean {\n        return this.itemsForCollapse.length > 0;\n    }\n\n    private _collapsedItemsWidth: number;\n\n    get collapsedItemsWidth(): number {\n        if (this._collapsedItemsWidth !== undefined) {\n            return this._collapsedItemsWidth;\n        }\n\n        this.calculateAndCacheCollapsedItemsWidth();\n\n        return this._collapsedItemsWidth;\n    }\n\n    constructor(\n        public element: HTMLElement,\n        public width: number,\n        public itemsForCollapse: CollapsibleItem[] = []\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        if (this.itemsForCollapse.length > 0) {\n            this.updateTitle(collapsed);\n        }\n\n        this.itemsForCollapse.forEach((item) => item.processCollapsed(collapsed));\n    }\n\n    private calculateAndCacheCollapsedItemsWidth() {\n        this._collapsedItemsWidth = this.itemsForCollapse\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getTitle(): string {\n        const computedTitle = this.element.getAttribute('computedTitle');\n\n        return computedTitle\n            ? decodeURI(computedTitle)\n            : (this.itemsForCollapse.length > 0 ? this.itemsForCollapse[0].element.innerText : '');\n    }\n\n    private updateTitle(collapsed: boolean) {\n        if (collapsed) {\n            this.element.setAttribute('title', this.getTitle());\n        } else {\n            this.element.removeAttribute('title');\n        }\n    }\n}\n\n\n@Component({\n    selector: MC_NAVBAR,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    template: `\n        <nav class=\"mc-navbar\">\n            <ng-content select=\"[${MC_NAVBAR_CONTAINER}],${MC_NAVBAR_CONTAINER}\"></ng-content>\n        </nav>\n    `,\n    styleUrls: ['./navbar.css'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class McNavbar implements AfterViewInit, OnDestroy {\n\n    private readonly forceRecalculateItemsWidth: boolean = false;\n    private readonly resizeDebounceInterval: number = 100;\n    private readonly firstLevelElement: string = MC_NAVBAR_CONTAINER;\n    private readonly secondLevelElements: string[] = [\n        MC_NAVBAR_ITEM,\n        MC_NAVBAR_BRAND,\n        MC_NAVBAR_TITLE\n    ];\n\n    private _totalItemsWidths: number;\n    private _itemsWidths: CachedItemWidth[];\n\n    private get maxAllowedWidth(): number {\n        return this._elementRef.nativeElement.querySelector('nav').getBoundingClientRect().width;\n    }\n\n    private get itemsWidths(): CachedItemWidth[] {\n        if (this._itemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._itemsWidths;\n        }\n\n        this.calculateAndCacheItemsWidth();\n\n        return this._itemsWidths;\n    }\n\n    private get totalItemsWidth(): number {\n        if (this._totalItemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._totalItemsWidths;\n        }\n\n        this.calculateAndCacheTotalItemsWidth();\n\n        return this._totalItemsWidths;\n    }\n\n    private _resizeSubscription: Subscription;\n\n    constructor(\n        private _elementRef: ElementRef\n    ) {\n        const resizeObserver = fromEvent(window, 'resize')\n            .pipe(debounceTime(this.resizeDebounceInterval));\n\n        this._resizeSubscription = resizeObserver.subscribe(this.updateCollapsed.bind(this));\n    }\n\n    updateCollapsed(): void {\n        let collapseDelta = this.totalItemsWidth - this.maxAllowedWidth;\n\n        for (let i = this.itemsWidths.length - 1; i >= 0; i--) {\n            const item = this.itemsWidths[i];\n\n            if (!item.canCollapse) {\n                continue;\n            }\n\n            item.processCollapsed(collapseDelta > 0);\n            collapseDelta -= item.collapsedItemsWidth;\n        }\n    }\n\n    ngAfterViewInit(): void {\n        // Note: this wait is required for loading and rendering fonts for icons;\n        // unfortunately we cannot control font rendering\n        setTimeout(() => this.updateCollapsed(), 0);\n    }\n\n    ngOnDestroy() {\n        this._resizeSubscription.unsubscribe();\n    }\n\n    private calculateAndCacheTotalItemsWidth() {\n        this._totalItemsWidths = this.itemsWidths\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getOuterElementWidth(element: HTMLElement): number {\n        const baseWidth  = element.getBoundingClientRect().width;\n        const marginRight = parseInt(getComputedStyle(element).getPropertyValue('margin-right'));\n        const marginLeft = parseInt(getComputedStyle(element).getPropertyValue('margin-left'));\n\n        return baseWidth + marginRight + marginLeft;\n    }\n\n    private calculateAndCacheItemsWidth() {\n        const allItemsSelector = this.secondLevelElements\n            .map((e: string) => `${this.firstLevelElement}>${e}`);\n        const allItems: HTMLElement[] = Array.from(this._elementRef.nativeElement.querySelectorAll(allItemsSelector));\n\n        this._itemsWidths = allItems\n            .map((el) => new CachedItemWidth(el, this.getOuterElementWidth(el), this.getItemsForCollapse(el)));\n    }\n\n    private getItemsForCollapse(element: HTMLElement): CollapsibleItem[] {\n        const icon = element.querySelector(`[${MC_ICON}],${MC_NAVBAR_LOGO},[${MC_NAVBAR_LOGO}]`);\n\n        if (!icon) {\n            return [];\n        }\n\n        return Array.from(element.querySelectorAll(MC_NAVBAR_TITLE))\n            .map((el) => new CollapsibleItem(<HTMLElement> el, el.getBoundingClientRect().width));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport {\n    McNavbar,\n    McNavbarContainer,\n    McNavbarItem,\n    McNavbarTitle,\n    McNavbarBrand,\n    McNavbarLogo\n} from './navbar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        McIconModule\n    ],\n    exports: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ],\n    declarations: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ]\n})\nexport class McNavbarModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, CanColorCtor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressBarMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressBarBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressBarMixinBase:\n    CanColorCtor &\n    typeof McProgressBarBase =\n        mixinColor(McProgressBarBase);\n\n@Component({\n    selector: 'mc-progress-bar',\n    templateUrl: './progress-bar.component.html',\n    styleUrls: ['./progress-bar.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-bar',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressBar extends _McProgressBarMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-bar-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressBarMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McProgressBar\n} from './progress-bar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressBar\n    ],\n    declarations: [\n        McProgressBar\n    ]\n})\nexport class McProgressBarModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, CanColorCtor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressSpinnerBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressSpinnerMixinBase:\n    CanColorCtor &\n    typeof McProgressSpinnerBase =\n        mixinColor(McProgressSpinnerBase);\n\nconst MAX_DASH_ARRAY = 273;\n\n@Component({\n    selector: 'mc-progress-spinner',\n    templateUrl: './progress-spinner.component.html',\n    styleUrls: ['./progress-spinner.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-spinner',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressSpinner extends _McProgressSpinnerMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-spinner-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressSpinnerMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n\n    get dashOffsetPercent(): string {\n        return `${MAX_DASH_ARRAY - this.percentage * MAX_DASH_ARRAY}%`;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McProgressSpinner } from './progress-spinner.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressSpinner\n    ],\n    declarations: [\n        McProgressSpinner\n    ]\n})\nexport class McProgressSpinnerModule {}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef,\n    Input, OnDestroy, OnInit, Optional, Output, QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { UniqueSelectionDispatcher } from '@ptsecurity/cdk/collections';\n\nimport {\n    CanColor, CanColorCtor,\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/** Change event object emitted by McRadio. */\nexport class McRadioChange {\n    constructor(\n        /** The McRadioButton that emits the change event. */\n        public source: McRadioButton,\n        /** The value of the McRadioButton. */\n        public value: any) {}\n}\n\n// Boilerplate for applying mixins to McRadioGroup.\n/** @docs-private */\nexport class McRadioGroupBase {}\nexport const _McRadioGroupMixinBase: CanDisableCtor & typeof McRadioGroupBase = mixinDisabled(McRadioGroupBase);\n\n/**\n * Provider Expression that allows mc-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McRadioGroup),\n    multi: true\n};\n\n@Directive({\n    selector: 'mc-radio-group',\n    exportAs: 'mcRadioGroup',\n    providers: [MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n    host: {\n        role: 'radiogroup',\n        class: 'mc-radio-group'\n    },\n    inputs: ['disabled']\n})\nexport class McRadioGroup extends _McRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    @Input()\n    get name(): string { return this._name; }\n    set name(value: string) {\n        this._name = value;\n        this.updateRadioButtonNames();\n    }\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this.markRadiosForCheck();\n    }\n\n    /** Value of the radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n\n            this.updateSelectedRadioFromValue();\n            this.checkSelectedRadioButton();\n        }\n    }\n\n    /** Whether the radio button is selected. */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: McRadioButton | null) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this.checkSelectedRadioButton();\n    }\n\n    /** Whether the radio group is disabled */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /** Whether the radio group is required */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** Child radio buttons. */\n    @ContentChildren(forwardRef(() => McRadioButton), { descendants: true })\n    _radios: QueryList<McRadioButton>;\n\n    /**\n     * Selected value for group. Should equal the value of the selected radio button if there *is*\n     * a corresponding radio button with a matching value. If there is *not* such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    private _value: any = null;\n\n    /** The HTML name attribute applied to radio buttons in this group. */\n    private _name: string = `mc-radio-group-${nextUniqueId++}`;\n\n    /** The currently selected radio button. Should match value. */\n    private _selected: McRadioButton | null = null;\n\n    /** Whether the `value` has been set to its initial value. */\n    private _isInitialized: boolean = false;\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    private _labelPosition: 'before' | 'after' = 'after';\n\n    /** Whether the radio group is disabled. */\n    private _disabled: boolean = false;\n\n    /** Whether the radio group is required. */\n    private _required: boolean = false;\n\n    constructor(\n        private readonly _changeDetector: ChangeDetectorRef\n    ) {\n        super();\n    }\n\n    /** The method to be called in order to update ngModel */\n    // tslint:disable-next-line\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @docs-private\n     */\n    // tslint:disable-next-line\n    onTouched: () => any = () => {};\n\n    checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on McRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the McRadioGroup.\n        this._isInitialized = true;\n    }\n\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        if (this._isInitialized) {\n            this.change.emit(new McRadioChange(this._selected!, this._value));\n        }\n    }\n\n    markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach((radio) => radio.markForCheck());\n        }\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n\n    private updateRadioButtonNames(): void {\n        if (this._radios) {\n            this._radios.forEach((radio) => {\n                radio.name = this.name;\n            });\n        }\n    }\n\n    /** Updates the `selected` radio button from the internal _value state. */\n    private updateSelectedRadioFromValue(): void {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n        if (this._radios != null && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach((radio) => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n}\n\n\n// Boilerplate for applying mixins to McRadioButton.\n/** @docs-private */\nexport class McRadioButtonBase {\n    // Since the disabled property is manually defined for the McRadioButton and isn't set up in\n    // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n    // defined to properly work.\n    disabled: boolean;\n\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McRadioButtonMixinBase:\n    CanColorCtor &\n    HasTabIndexCtor &\n    typeof McRadioButtonBase =\n        mixinColor(mixinTabIndex(McRadioButtonBase));\n\n\n@Component({\n    selector: 'mc-radio-button',\n    templateUrl: 'radio.component.html',\n    styleUrls: ['radio.css'],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    exportAs: 'mcRadioButton',\n    host: {\n        class: 'mc-radio-button',\n        '[attr.id]': 'id',\n        '[class.mc-checked]': 'checked',\n        '[class.mc-disabled]': 'disabled',\n        '(focus)': '_inputElement.nativeElement.focus()'\n    }\n})\nexport class McRadioButton extends _McRadioButtonMixinBase\n    implements OnInit, OnDestroy, CanColor, HasTabIndex {\n\n    private readonly _uniqueId: string = `mc-radio-${++nextUniqueId}`;\n\n    /* tslint:disable:member-ordering */\n\n    /** The unique ID for the radio button. */\n    @Input() id: string = this._uniqueId;\n\n    /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n    @Input() name: string;\n\n    /** Used to set the 'aria-label' attribute on the underlying input element. */\n    @Input('aria-label') ariaLabel: string;\n\n    /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n    @Input('aria-labelledby') ariaLabelledby: string;\n\n    /** The 'aria-describedby' attribute is read after the element's label and field type. */\n    @Input('aria-describedby') ariaDescribedby: string;\n\n    /** Whether this radio button is checked. */\n    @Input()\n    get checked(): boolean { return this._checked; }\n    set checked(value: boolean) {\n        const newCheckedState = toBoolean(value);\n\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** The value of this radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(value: any) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup != null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n\n    /** Whether the radio button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n    }\n    set disabled(value: boolean) {\n        const newDisabledState = toBoolean(value);\n\n        if (this._disabled !== newDisabledState) {\n\n            this._disabled = newDisabledState;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** Whether the radio button is required. */\n    @Input()\n    get required(): boolean {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    private _labelPosition: 'before' | 'after';\n\n    /** The native `<input type=radio>` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** The parent radio group. May or may not be present. */\n    radioGroup: McRadioGroup;\n\n    @Input()\n    isFocused: boolean = false;\n\n    /** ID of the native input element inside `<mc-radio-button>` */\n    get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n    /** Whether this radio is checked. */\n    private _checked: boolean = false;\n\n    /** Whether this radio is disabled. */\n    private _disabled: boolean;\n\n    /** Whether this radio is required. */\n    private _required: boolean;\n\n    /** Value assigned to this radio. */\n    private _value: any = null;\n\n    /** Unregister function for _radioDispatcher */\n    // tslint:disable-next-line\n    private readonly removeUniqueSelectionListener: () => void = () => {};\n\n    constructor(\n        @Optional() radioGroup: McRadioGroup,\n        elementRef: ElementRef,\n        private readonly _changeDetector: ChangeDetectorRef,\n        private readonly _radioDispatcher: UniqueSelectionDispatcher\n    ) {\n\n        super(elementRef);\n\n        this.radioGroup = radioGroup;\n\n        this.removeUniqueSelectionListener =\n            _radioDispatcher.listen((id: string, name: string) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n\n    ngOnDestroy() {\n        this.removeUniqueSelectionListener();\n    }\n\n    /** Focuses the radio button. */\n    // tslint:disable-next-line\n    focus(): void {}\n\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n\n    onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n\n    onInputChange(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this.emitChangeEvent();\n\n        if (this.radioGroup) {\n            this.radioGroup.controlValueAccessorChangeFn(this.value);\n            this.radioGroup.touch();\n            if (groupValueChanged) {\n                this.radioGroup.emitChangeEvent();\n            }\n        }\n    }\n\n    /** Dispatch change event with current value. */\n    private emitChangeEvent(): void {\n        this.change.emit(new McRadioChange(this, this._value));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McRadioButton, McRadioGroup } from './radio.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule],\n    exports: [McRadioGroup, McRadioButton],\n    declarations: [McRadioGroup, McRadioButton]\n})\nexport class McRadioModule {\n}\n","import { Directive, Input } from '@angular/core';\n\nimport { CdkTreeNodeDef } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodeDef]',\n    inputs: ['when: mcTreeNodeDefWhen'],\n    providers: [{ provide: CdkTreeNodeDef, useExisting: McTreeNodeDef }]\n})\nexport class McTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n    @Input('mcTreeNode') data: T;\n}\n","import { Directive, Input, OnInit } from '@angular/core';\nimport { CdkTreeNodePadding } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodePadding]',\n    providers: [{ provide: CdkTreeNodePadding, useExisting: McTreeNodePadding }]\n})\nexport class McTreeNodePadding<T> extends CdkTreeNodePadding<T> implements OnInit {\n    @Input('mcTreeNodePadding') level: number;\n\n    @Input('mcTreeNodePaddingIndent') indent: number;\n\n    baseLeftPadding: number = 12;\n    /* tslint:disable-next-line:naming-convention */\n    _indent: number = 20;\n\n    withIcon: boolean;\n    iconWidth: number = 20;\n\n    get leftPadding(): number {\n        return (this.withIcon ? 0 : this.iconWidth) + this.baseLeftPadding;\n    }\n\n    paddingIndent(): string | null {\n        const nodeLevel = (this.treeNode.data && this.tree.treeControl.getLevel)\n            ? this.tree.treeControl.getLevel(this.treeNode.data)\n            : null;\n\n        const level = this.level || nodeLevel;\n\n        return level ? `${(level * this._indent) + this.leftPadding}px` : `${this.baseLeftPadding}px`;\n    }\n\n    ngOnInit(): void {\n        this.withIcon = this.tree.treeControl.isExpandable(this.treeNode.data);\n\n        this.setPadding();\n    }\n}\n","import { Directive } from '@angular/core';\nimport { CdkTreeNodeToggle } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodeToggle]',\n    host: {\n        '(click)': 'toggle($event)'\n    },\n    providers: [{ provide: CdkTreeNodeToggle, useExisting: McTreeNodeToggle }]\n})\nexport class McTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {}\n","import {\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    Output,\n    ElementRef,\n    Inject,\n    Optional,\n    InjectionToken\n} from '@angular/core';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { CdkTreeNode } from '@ptsecurity/cdk/tree';\nimport { CanDisable, toBoolean } from '@ptsecurity/mosaic/core';\n\n\n/* tslint:disable-next-line:naming-convention */\nexport interface McTreeOptionParentComponent {\n    multiple: boolean;\n    selectionModel: SelectionModel<McTreeOption>;\n    setFocusedOption: any;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MC_TREE_OPTION_PARENT_COMPONENT =\n    new InjectionToken<McTreeOptionParentComponent>('MC_TREE_OPTION_PARENT_COMPONENT');\n\nexport class McTreeOptionChange {\n    constructor(public source: McTreeOption, public isUserInput = false) {}\n}\n\nlet uniqueIdCounter: number = 0;\n\n@Component({\n    selector: 'mc-tree-option',\n    exportAs: 'mcTreeOption',\n    host: {\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'getTabIndex()',\n\n        '[attr.disabled]': 'disabled || null',\n\n        class: 'mc-tree-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-active]': 'active',\n\n        '(click)': 'selectViaInteraction()'\n    },\n    templateUrl: './tree-option.html',\n    providers: [{ provide: CdkTreeNode, useExisting: McTreeOption }]\n})\nexport class McTreeOption extends CdkTreeNode<McTreeOption> implements CanDisable {\n    @Output() readonly onSelectionChange = new EventEmitter<McTreeOptionChange>();\n\n    @Input() value: any;\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    // @Input()\n    // get selected(): boolean {\n    //     return this.treeSelection.selectionModel && this.treeSelection.selectionModel.isSelected(this) || false;\n    // }\n\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            // this.treeSelection._reportValueChange();\n        }\n    }\n\n    private _selected: boolean = false;\n\n    /**\n     * Whether or not the option is currently active and ready to be selected.\n     * An active option displays styles as if it is focused, but the\n     * focus is actually retained somewhere else. This comes in handy\n     * for components like autocomplete where focus must remain on the input.\n     */\n    get active(): boolean {\n        return this._active;\n    }\n\n    private _active = false;\n\n    get id(): string {\n        return this._id;\n    }\n\n    private _id = `mc-tree-option-${uniqueIdCounter++}`;\n\n    get multiple(): boolean {\n        return this.parent.multiple;\n    }\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_TREE_OPTION_PARENT_COMPONENT) private readonly parent: McTreeOptionParentComponent\n    ) {\n        // todo any\n        super(elementRef, parent as any);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.parent.selectionModel) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.parent.selectionModel.select(this);\n        } else {\n            this.parent.selectionModel.deselect(this);\n        }\n\n        // this._changeDetector.markForCheck();\n    }\n\n    /**\n     * This method sets display styles on the option to make it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setActiveStyles(): void {\n        if (!this._active) {\n            this._active = true;\n\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    /**\n     * This method removes display styles on the option that made it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setInactiveStyles(): void {\n        if (this._active) {\n            this._active = false;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    getHeight(): number {\n        const clientRects = this.elementRef.nativeElement.getClientRects();\n        if (clientRects.length) {\n            return clientRects[0].height;\n        }\n\n        return 0;\n    }\n\n    focus(): void {\n        const element = this.getHostElement();\n\n        if (typeof element.focus === 'function') {\n            element.focus();\n        }\n    }\n\n    // todo старая реализация, нужно восстановить tree-selection\n    // handleClick(): void {\n    //     if (this.disabled) { return; }\n    //\n    //     this.treeSelection.setFocusedOption(this);\n    // }\n\n    /**\n     * The displayed value of the option. It is necessary to show the selected option in the\n     * select's trigger.\n     */\n    get viewValue(): string {\n        // TODO(kara): Add input property alternative for node envs.\n        return (this.getHostElement().textContent || '').trim();\n    }\n\n    select(): void {\n        if (!this._selected) {\n            this._selected = true;\n\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    deselect(): void {\n        if (this._selected) {\n            this._selected = false;\n\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    selectViaInteraction(): void {\n        if (!this.disabled) {\n            this._selected = this.multiple ? !this._selected : true;\n\n            this.changeDetectorRef.markForCheck();\n            this.emitSelectionChangeEvent(true);\n\n            if (this.parent.setFocusedOption) {\n                this.parent.setFocusedOption(this);\n            }\n        }\n    }\n\n    emitSelectionChangeEvent(isUserInput = false): void {\n        this.onSelectionChange.emit(new McTreeOptionChange(this, isUserInput));\n    }\n\n    getHostElement(): HTMLElement {\n        return this.elementRef.nativeElement;\n    }\n\n    getTabIndex(): string {\n        return this.disabled ? '-1' : '0';\n    }\n}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    Output,\n    QueryList,\n    ViewEncapsulation,\n    ChangeDetectorRef,\n    Inject,\n    OnDestroy,\n    OnInit,\n    ViewChild\n} from '@angular/core';\n\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { Subscription } from 'rxjs';\n\nimport { FocusKeyManager, IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { END, ENTER, HOME, PAGE_DOWN, PAGE_UP, SPACE } from '@ptsecurity/cdk/keycodes';\n\nimport {\n    McLine,\n    McLineSetter,\n    CanDisable,\n    mixinDisabled,\n    toBoolean, CanDisableCtor\n} from '@ptsecurity/mosaic/core';\n\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n    exportAs: 'mcListOption',\n    selector: 'mc-list-option',\n    host: {\n        tabindex: '-1',\n\n        class: 'mc-list-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': '_hasFocus',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()',\n        '(click)': '_handleClick()'\n    },\n    templateUrl: 'list-option.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListOption implements AfterContentInit, OnDestroy, OnInit, IFocusableOption {\n    _hasFocus: boolean = false;\n\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    @ViewChild('text') _text: ElementRef;\n\n    // Whether the label should appear before or after the checkbox. Defaults to 'after'\n    @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n    @Input() value: any;\n\n    @Input()\n    get disabled() {\n        return this._disabled || (this.listSelection && this.listSelection.disabled);\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    @Input()\n    get selected(): boolean {\n        return this.listSelection.selectedOptions && this.listSelection.selectedOptions.isSelected(this) || false;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            this.listSelection._reportValueChange();\n        }\n    }\n\n    private _lineSetter: McLineSetter;\n    private _selected = false;\n    private _disabled = false;\n\n    constructor(\n        private _element: ElementRef,\n        private _changeDetector: ChangeDetectorRef,\n        @Inject(forwardRef(() => McListSelection))\n        public listSelection: McListSelection\n    ) {}\n\n    ngOnInit() {\n        if (this._selected) {\n            // List options that are selected at initialization can't be reported properly to the form\n            // control. This is because it takes some time until the selection-list knows about all\n            // available options. Also it can happen that the ControlValueAccessor has an initial value\n            // that should be used instead. Deferring the value change report to the next tick ensures\n            // that the form control value is not being overwritten.\n            const wasSelected = this._selected;\n\n            Promise.resolve().then(() => {\n                if (this._selected || wasSelected) {\n                    this.selected = true;\n                    this._changeDetector.markForCheck();\n                }\n            });\n        }\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    ngOnDestroy(): void {\n        if (this.selected) {\n            // We have to delay this until the next tick in order\n            // to avoid changed after checked errors.\n            Promise.resolve().then(() => this.selected = false);\n        }\n\n        this.listSelection._removeOptionFromList(this);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    focus(): void {\n        this._element.nativeElement.focus();\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    getLabel() {\n        return this._text ? this._text.nativeElement.textContent : '';\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.listSelection.selectedOptions) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.listSelection.selectedOptions.select(this);\n        } else {\n            this.listSelection.selectedOptions.deselect(this);\n        }\n\n        this._changeDetector.markForCheck();\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    _handleClick() {\n        if (this.disabled) { return; }\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    _handleFocus() {\n        if (this.disabled || this._hasFocus) { return; }\n\n        this._hasFocus = true;\n    }\n\n    _handleBlur() {\n        this._hasFocus = false;\n\n        this.listSelection._onTouched();\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n\n\nexport const MC_SELECTION_LIST_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McListSelection),\n    multi: true\n};\n\n// Change event that is being fired whenever the selected state of an option changes. */\nexport class McListSelectionChange {\n    constructor(\n        // Reference to the selection list that emitted the event.\n        public source: McListSelection,\n        // Reference to the option that has been changed.\n        public option: McListOption\n    ) {}\n}\n\n\nexport class McListSelectionBase {}\n\nexport const _McListSelectionMixinBase: CanDisableCtor & typeof McListSelectionBase\n    = mixinDisabled(McListSelectionBase);\n\n@Component({\n    exportAs: 'mcListSelection',\n    selector: 'mc-list-selection',\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'tabIndex'],\n    host: {\n        class: 'mc-list-selection',\n        '[tabIndex]': 'tabIndex',\n        '(focus)': 'focus()',\n        '(blur)': '_onTouched()',\n        '(keydown)': '_onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    providers: [MC_SELECTION_LIST_VALUE_ACCESSOR],\n    preserveWhitespaces: false\n})\nexport class McListSelection extends _McListSelectionMixinBase implements\n    IFocusableOption, CanDisable, AfterContentInit, ControlValueAccessor {\n\n    _keyManager: FocusKeyManager<McListOption>;\n\n    // The option components contained within this selection-list.\n    @ContentChildren(McListOption) options: QueryList<McListOption>;\n\n    tabIndex: number;\n\n    autoSelect: boolean;\n    noUnselect: boolean;\n    multiple: boolean;\n\n    // todo temporary solution\n    withShift: boolean;\n    withCtrl: boolean;\n\n    @Input() horizontal: boolean = false;\n\n    // Emits a change event whenever the selected state of an option changes.\n    @Output() readonly selectionChange: EventEmitter<McListSelectionChange> = new EventEmitter<McListSelectionChange>();\n\n    selectedOptions: SelectionModel<McListOption>;\n\n    // Used for storing the values that were assigned before the options were initialized.\n    private _tempValues: string[] | null;\n\n    private _modelChanges = Subscription.EMPTY;\n\n    constructor(\n        private _element: ElementRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string,\n        @Attribute('multiple') multiple: string\n    ) {\n        super();\n\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.multiple = multiple === null ? true : toBoolean(multiple);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.selectedOptions = new SelectionModel<McListOption>(this.multiple);\n    }\n\n    ngAfterContentInit(): void {\n        this.horizontal = toBoolean(this.horizontal);\n\n        this._keyManager = new FocusKeyManager<McListOption>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation(!this.horizontal)\n            .withHorizontalOrientation(this.horizontal ? 'ltr' : null);\n\n        if (this._tempValues) {\n            this._setOptionsFromValues(this._tempValues);\n            this._tempValues = null;\n        }\n\n        // Sync external changes to the model back to the options.\n        this._modelChanges = this.selectedOptions.onChange!.subscribe((event) => {\n            for (const item of event.added) {\n                item.selected = true;\n            }\n\n            for (const item of event.removed) {\n                item.selected = false;\n            }\n        });\n\n        this.updateScrollSize();\n    }\n\n    ngOnDestroy() {\n        this._modelChanges.unsubscribe();\n    }\n\n    focus() {\n        this._element.nativeElement.focus();\n    }\n\n    selectAll() {\n        this.options.forEach((option) => option.setSelected(true));\n\n        this._reportValueChange();\n    }\n\n    deselectAll() {\n        this.options.forEach((option) => option.setSelected(false));\n\n        this._reportValueChange();\n    }\n\n    updateScrollSize(): void {\n        if (this.horizontal || !this.options.first) { return; }\n\n        this._keyManager.withScrollSize(Math.floor(this._getHeight() / this.options.first._getHeight()));\n    }\n\n    // Sets the focused option of the selection-list.\n    setFocusedOption(option: McListOption): void {\n        this._keyManager.updateActiveItem(option);\n\n        if (this.withShift && this.multiple) {\n            const previousIndex = this._keyManager.previousActiveItemIndex;\n            const activeIndex = this._keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n\n            this.withShift = false;\n        } else if (this.withCtrl) {\n            this.withCtrl = false;\n\n            if (!this._canDeselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) {\n                this.options.forEach((item) => item.setSelected(false));\n                option.setSelected(true);\n            }\n        }\n\n        this._emitChangeEvent(option);\n        this._reportValueChange();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(values: string[]): void {\n        if (this.options) {\n            this._setOptionsFromValues(values || []);\n        } else {\n            this._tempValues = values;\n        }\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this._onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this._onTouched = fn;\n    }\n\n    // Implemented as a part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        if (this.options) {\n            this.options.forEach((option) => option.disabled = isDisabled);\n        }\n    }\n\n    getSelectedOptionValues(): string[] {\n        return this.options.filter((option) => option.selected).map((option) => option.value);\n    }\n\n    // Toggles the selected state of the currently focused option.\n    toggleFocusedOption(): void {\n        const focusedIndex = this._keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n            const focusedOption: McListOption = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this._canDeselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this._emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    _canDeselectLast(listOption: McListOption): boolean {\n        return !(this.noUnselect && this.selectedOptions.selected.length === 1 && listOption.selected);\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    // View to model callback that should be called if the list or its options lost focus.\n    _onTouched: () => void = () => {};\n\n    // Removes an option from the selection list and updates the active item.\n    _removeOptionFromList(option: McListOption) {\n        if (option._hasFocus) {\n            const optionIndex = this._getOptionIndex(option);\n\n            // Check whether the option is the last item\n            if (optionIndex > 0) {\n                this._keyManager.setPreviousItemActive();\n            } else if (optionIndex === 0 && this.options.length > 1) {\n                this._keyManager.setNextItemActive();\n            }\n        }\n    }\n\n    _onKeyDown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n        this.withShift = event.shiftKey;\n        this.withCtrl = event.ctrlKey;\n\n        switch (keyCode) {\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                if (!this.horizontal) { this._keyManager.setPreviousPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                if (!this.horizontal) { this._keyManager.setNextPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    // Reports a value change to the ControlValueAccessor\n    _reportValueChange() {\n        if (this.options) {\n            this._onChange(this.getSelectedOptionValues());\n        }\n    }\n\n    // Emits a change event if the selected state of an option changed.\n    _emitChangeEvent(option: McListOption) {\n        this.selectionChange.emit(new McListSelectionChange(this, option));\n    }\n\n    // Returns the option with the specified value.\n    private _getOptionByValue(value: string): McListOption | undefined {\n        return this.options.find((option) => option.value === value);\n    }\n\n    // Sets the selected options based on the specified values.\n    private _setOptionsFromValues(values: string[]) {\n        this.options.forEach((option) => option.setSelected(false));\n\n        values\n            .map((value) => this._getOptionByValue(value))\n            .filter(Boolean)\n            .forEach((option) => option!.setSelected(true));\n    }\n\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private _isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    // Returns the index of the specified list option.\n    private _getOptionIndex(option: McListOption): number {\n        return this.options.toArray().indexOf(option);\n    }\n\n    // View to model callback that should be called whenever the selected options change.\n    private _onChange: (value: any) => void = (_: any) => {};\n}\n","// todo пока не делаем, перенесено из материала, но у нас в доках таких простых списков нет.\nimport {\n    AfterContentInit, ChangeDetectionStrategy, Component, ContentChildren, Directive, ElementRef, QueryList,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { McLine, McLineSetter } from '@ptsecurity/mosaic/core';\n\n\nexport class McListBase {}\n\n@Component({\n    selector: 'mc-list',\n    host: { class: 'mc-list' },\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McList extends McListBase {}\n\n\n/**\n * Directive whose purpose is to add the mc- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n    selector: '[mc-subheader], [mcSubheader]',\n    host: { class: 'mc-subheader' }\n})\nexport class McListSubheaderCssStyler {}\n\n\n// Boilerplate for applying mixins to McListItem.\nexport class McListItemBase {}\n\n@Component({\n    selector: 'mc-list-item, a[mc-list-item]',\n    host: {\n        class: 'mc-list-item',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()'\n    },\n    templateUrl: './list-item.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListItem extends McListItemBase implements AfterContentInit {\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    private _lineSetter: McLineSetter;\n\n    constructor(private _element: ElementRef) {\n        super();\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    _handleFocus() {\n        this._element.nativeElement.classList.add('mc-focused');\n    }\n\n    _handleBlur() {\n        this._element.nativeElement.classList.remove('mc-focused');\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLineModule } from '@ptsecurity/mosaic/core';\n\nimport { McListSelection, McListOption } from './list-selection.component';\nimport { McList, McListItem, McListSubheaderCssStyler } from './list.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        McLineModule\n    ],\n    exports: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ],\n    declarations: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ]\n})\nexport class McListModule {}\n","import {\n    Input,\n    Attribute,\n    Component,\n    ElementRef,\n    OnDestroy,\n    ViewEncapsulation,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef\n} from '@angular/core';\n\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport {\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\nexport class McLinkBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\nexport const _McLinkBase: HasTabIndexCtor & CanDisableCtor & typeof McLinkBase\n    = mixinTabIndex(mixinDisabled(McLinkBase));\n\n@Component({\n    selector: 'a.mc-link',\n    template: `<ng-content></ng-content>`,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcLink',\n    styleUrls: ['./link.css'],\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': 'tabIndex'\n    }\n})\n\nexport class McLink extends _McLinkBase implements OnDestroy, HasTabIndex, CanDisable {\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    private _disabled = false;\n\n    constructor(\n        @Attribute('tabindex') tabIndex: string,\n        public elementRef: ElementRef,\n        private _focusMonitor: FocusMonitor,\n        private _changeDetector: ChangeDetectorRef) {\n\n        super(elementRef);\n        this._focusMonitor.monitor(elementRef.nativeElement, true);\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this._getHostElement().focus();\n    }\n\n    _getHostElement() {\n        return this.elementRef.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLink } from './link.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule\n    ],\n    declarations: [McLink],\n    exports: [McLink]\n})\nexport class McLinkModule {}\n","import { Injectable, Optional, SkipSelf } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\n\nimport { McModalRef } from './modal-ref.class';\n\n\ninterface IRegisteredMeta {\n    modalRef: McModalRef;\n    afterOpenSubscription: Subscription;\n    afterCloseSubscription: Subscription;\n}\n\n@Injectable()\nexport class McModalControlService {\n\n    // Track singleton afterAllClose through over the injection tree\n    get afterAllClose(): Subject<void> {\n        return this.parentService ? this.parentService.afterAllClose : this.rootAfterAllClose!;\n    }\n\n    // Track singleton openModals array through over the injection tree\n    get openModals(): McModalRef[] {\n        return this.parentService ? this.parentService.openModals : this.rootOpenModals!;\n    }\n\n    // @ts-ignore\n    private rootOpenModals: McModalRef[] = this.parentService ? null : [];\n    // @ts-ignore\n    private rootAfterAllClose: Subject<void> = this.parentService ? null : new Subject<void>();\n    // @ts-ignore\n    private rootRegisteredMetaMap: Map<McModalRef, IRegisteredMeta> = this.parentService ? null : new Map();\n\n    // Registered modal for later usage\n    private get registeredMetaMap(): Map<McModalRef, IRegisteredMeta> {\n        return this.parentService ? this.parentService.registeredMetaMap : this.rootRegisteredMetaMap;\n    }\n\n    constructor(\n        @Optional() @SkipSelf() private parentService: McModalControlService) {\n    }\n\n    // Register a modal to listen its open/close\n    registerModal(modalRef: McModalRef): void {\n        if (!this.hasRegistered(modalRef)) {\n            const afterOpenSubscription = modalRef.afterOpen.subscribe(() => this.openModals.push(modalRef));\n            const afterCloseSubscription = modalRef.afterClose.subscribe(() => this.removeOpenModal(modalRef));\n\n            this.registeredMetaMap.set(modalRef, {modalRef, afterOpenSubscription, afterCloseSubscription});\n        }\n    }\n\n    hasRegistered(modalRef: McModalRef): boolean {\n        return this.registeredMetaMap.has(modalRef);\n    }\n\n    // Close all registered opened modals\n    closeAll(): void {\n        let i = this.openModals.length;\n\n        while (i--) {\n            this.openModals[i].close();\n        }\n    }\n\n    private removeOpenModal(modalRef: McModalRef): void {\n        const index = this.openModals.indexOf(modalRef);\n\n        if (index > -1) {\n            this.openModals.splice(index, 1);\n\n            if (!this.openModals.length) {\n                this.afterAllClose.next();\n            }\n        }\n    }\n}\n","import { Observable } from 'rxjs';\n\nimport { McModalComponent } from './modal.component';\n\n\n/**\n * API class that public to users to handle the modal instance.\n * McModalRef is aim to avoid accessing to the modal instance directly by users.\n */\nexport abstract class McModalRef<T = any, R = any> {\n    abstract afterOpen: Observable<void>;\n    abstract afterClose: Observable<R>;\n\n    abstract open(): void;\n\n    abstract close(result?: R): void;\n\n    abstract destroy(result?: R): void;\n\n    /**\n     * Trigger the mcOnOk/mcOnCancel by manual\n     */\n    abstract triggerOk(): void;\n\n    abstract triggerCancel(): void;\n\n    // /**\n    //  * Return the ComponentRef of mcContent when specify mcContent as a Component\n    //  * Note: this method may return undefined if the Component has not ready yet.\n    //    (it only available after Modal's ngOnInit)\n    //  */\n    // abstract getContentComponentRef(): ComponentRef<{}>;\n\n    /**\n     * Return the component instance of mcContent when specify mcContent as a Component\n     * Note: this method may return undefined if the Component has not ready yet.\n     * (it only available after Modal's ngOnInit)\n     */\n    abstract getContentComponent(): T;\n\n    /**\n     * Get the dom element of this Modal\n     */\n    abstract getElement(): HTMLElement;\n\n    /**\n     * Get the instance of the Modal itself\n     */\n    abstract getInstance(): McModalComponent;\n}\n","export interface IClickPosition {\n    x: number;\n    y: number;\n}\n\nexport class ModalUtil {\n    private lastPosition: IClickPosition;\n\n    constructor(private document: Document) {\n        this.lastPosition = {x: -1, y: -1};\n        this.listenDocumentClick();\n    }\n\n    getLastClickPosition(): IClickPosition {\n        return this.lastPosition;\n    }\n\n    listenDocumentClick(): void {\n        this.document.addEventListener('click', (event: MouseEvent) => {\n            this.lastPosition = {x: event.clientX, y: event.clientY};\n        });\n    }\n}\n\nexport default new ModalUtil(document);\n","import { DOCUMENT } from '@angular/common';\nimport {\n    AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef,\n    Component,\n    ComponentFactoryResolver,\n    ComponentRef,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Injector,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    Renderer2,\n    SimpleChanges,\n    TemplateRef,\n    Type,\n    ViewChild,\n    ViewContainerRef, ViewEncapsulation\n} from '@angular/core';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { Overlay, OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { McMeasureScrollbarService } from '@ptsecurity/mosaic/core';\nimport { Observable } from 'rxjs';\n\nimport { McModalControlService } from './modal-control.service';\nimport { McModalRef } from './modal-ref.class';\n// tslint:disable-next-line\nimport ModalUtil from './modal-util';\nimport { IModalButtonOptions, IModalOptions, ModalType, OnClickCallback } from './modal.type';\n\n\n// Duration when perform animations (ms)\nexport const MODAL_ANIMATE_DURATION = 200;\n\ntype AnimationState = 'enter' | 'leave' | null;\n\n@Component({\n    selector: 'mc-modal',\n    templateUrl: './modal.component.html',\n    styleUrls: ['./modal.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        '(keydown)': 'onKeyDown($event)'\n    }\n})\nexport class McModalComponent<T = any, R = any> extends McModalRef<T, R>\n    implements OnInit, OnChanges, AfterViewInit, OnDestroy, IModalOptions {\n\n    // tslint:disable-next-line:no-any\n    @Input() mcModalType: ModalType = 'default';\n    // If not specified, will use <ng-content>\n    @Input() mcContent: string | TemplateRef<{}> | Type<T>;\n    // available when mcContent is a component\n    @Input() mcComponentParams: T;\n    // Default Modal ONLY\n    @Input() mcFooter: string | TemplateRef<{}> | IModalButtonOptions<T>[];\n\n    @Input()\n    get mcVisible() { return this._mcVisible; }\n    set mcVisible(value) { this._mcVisible = value; }\n\n    _mcVisible = false;\n\n    @Output() mcVisibleChange = new EventEmitter<boolean>();\n\n    @Input() mcZIndex: number = 1000;\n    @Input() mcWidth: number | string = 480;\n    @Input() mcWrapClassName: string;\n    @Input() mcClassName: string;\n    @Input() mcStyle: object;\n    @Input() mcTitle: string | TemplateRef<{}>;\n    @Input() mcCloseByESC: boolean = true;\n\n    @Input()\n    get mcClosable() { return this._mcClosable; }\n    set mcClosable(value) { this._mcClosable = value; }\n    _mcClosable = true;\n\n    @Input()\n    get mcMask() { return this._mcMask; }\n    set mcMask(value) { this._mcMask = value; }\n    _mcMask = true;\n\n    @Input()\n    get mcMaskClosable() { return this._mcMaskClosable; }\n    set mcMaskClosable(value) { this._mcMaskClosable = value; }\n    _mcMaskClosable = true;\n\n    @Input() mcMaskStyle: object;\n    @Input() mcBodyStyle: object;\n\n    // Trigger when modal open(visible) after animations\n    @Output() mcAfterOpen = new EventEmitter<void>();\n    // Trigger when modal leave-animation over\n    @Output() mcAfterClose = new EventEmitter<R>();\n\n    // --- Predefined OK & Cancel buttons\n    @Input() mcOkText: string;\n    @Input() mcOkType = 'primary';\n\n    @Input()\n    get mcOkLoading() { return this._mcOkLoading; }\n    set mcOkLoading(value) { this._mcOkLoading = value; }\n    _mcOkLoading = false;\n\n    @Input() @Output() mcOnOk: EventEmitter<T> | OnClickCallback<T> = new EventEmitter<T>();\n    @Input() mcCancelText: string;\n\n    @Input()\n    get mcCancelLoading() { return this._mcCancelLoading; }\n    set mcCancelLoading(value) { this._mcCancelLoading = value; }\n    _mcCancelLoading = false;\n\n    @Input() @Output() mcOnCancel: EventEmitter<T> | OnClickCallback<T> = new EventEmitter<T>();\n\n    @ViewChild('modalContainer') modalContainer: ElementRef;\n    @ViewChild('bodyContainer', { read: ViewContainerRef }) bodyContainer: ViewContainerRef;\n    // Only aim to focus the ok button that needs to be auto focused\n    @ViewChild('autoFocusButtonOk', { read: ElementRef }) autoFocusButtonOk: ElementRef;\n\n    maskAnimationClassMap: object;\n    modalAnimationClassMap: object;\n    // The origin point that animation based on\n    transformOrigin = '0px 0px 0px';\n\n    // Observable alias for mcAfterOpen\n    get afterOpen(): Observable<void> {\n        return this.mcAfterOpen.asObservable();\n    }\n\n    // Observable alias for mcAfterClose\n    get afterClose(): Observable<R> {\n        return this.mcAfterClose.asObservable();\n    }\n\n    get okText(): string {\n        return this.mcOkText;\n    }\n\n    get cancelText(): string {\n        return this.mcCancelText;\n    }\n\n    // Indicate whether this dialog should hidden\n    get hidden(): boolean {\n        return !this.mcVisible && !this.animationState;\n    }\n\n    // Handle the reference when using mcContent as Component\n    private contentComponentRef: ComponentRef<T>;\n    // Current animation state\n    private animationState: AnimationState;\n    private container: HTMLElement | OverlayRef;\n\n    constructor(\n        private overlay: Overlay,\n        private renderer: Renderer2,\n        private cfr: ComponentFactoryResolver,\n        private elementRef: ElementRef,\n        private viewContainer: ViewContainerRef,\n        private mcMeasureScrollbarService: McMeasureScrollbarService,\n        private modalControl: McModalControlService,\n        private changeDetector: ChangeDetectorRef,\n        @Inject(DOCUMENT) private document: any) {\n\n        super();\n    }\n\n    @Input() mcGetContainer: HTMLElement | OverlayRef | (() => HTMLElement | OverlayRef) = () => this.overlay.create();\n\n    ngOnInit() {\n\n        // Create component along without View\n        if (this.isComponent(this.mcContent)) {\n            this.createDynamicComponent(this.mcContent as Type<T>);\n        }\n\n        // Setup default button options\n        if (this.isModalButtons(this.mcFooter)) {\n            this.mcFooter = this.formatModalButtons(this.mcFooter as IModalButtonOptions<T>[]);\n        }\n\n        // Place the modal dom to elsewhere\n        this.container = typeof this.mcGetContainer === 'function' ? this.mcGetContainer() : this.mcGetContainer;\n        if (this.container instanceof HTMLElement) {\n            this.container.appendChild(this.elementRef.nativeElement);\n        } else if (this.container instanceof OverlayRef) {\n            // NOTE: only attach the dom to overlay, the view container is not changed actually\n            this.container.overlayElement.appendChild(this.elementRef.nativeElement);\n        }\n\n        // Register modal when afterOpen/afterClose is stable\n        this.modalControl.registerModal(this);\n    }\n\n    // [NOTE] NOT available when using by service!\n    // Because ngOnChanges never be called when using by service,\n    // here we can't support \"mcContent\"(Component) etc. as inputs that initialized dynamically.\n    // BUT: User also can change \"mcContent\" dynamically to trigger UI changes\n    // (provided you don't use \bComponent that needs initializations)\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.mcVisible) {\n            // Do not trigger animation while initializing\n            this.handleVisibleStateChange(this.mcVisible, !changes.mcVisible.firstChange);\n        }\n    }\n\n    ngAfterViewInit() {\n        // If using Component, it is the time to attach View while bodyContainer is ready\n        if (this.contentComponentRef) {\n            this.bodyContainer.insert(this.contentComponentRef.hostView);\n        }\n\n        if (this.autoFocusButtonOk) {\n            (this.autoFocusButtonOk.nativeElement as HTMLButtonElement).focus();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.container instanceof OverlayRef) {\n            this.container.dispose();\n        }\n    }\n\n    open() {\n        this.changeVisibleFromInside(true);\n    }\n\n    close(result?: R) {\n        this.changeVisibleFromInside(false, result);\n    }\n\n    // Destroy equals Close\n    destroy(result?: R) {\n        this.close(result);\n    }\n\n    triggerOk() {\n        this.onClickOkCancel('ok');\n    }\n\n    triggerCancel() {\n        this.onClickOkCancel('cancel');\n    }\n\n    getInstance(): McModalComponent {\n        return this;\n    }\n\n    getContentComponentRef(): ComponentRef<T> {\n        return this.contentComponentRef;\n    }\n\n    getContentComponent(): T {\n        return this.contentComponentRef && this.contentComponentRef.instance;\n    }\n\n    getElement(): HTMLElement {\n        return this.elementRef && this.elementRef.nativeElement;\n    }\n\n    onClickMask($event: MouseEvent) {\n        if (\n            this.mcMask &&\n            this.mcMaskClosable &&\n            ($event.target as HTMLElement).classList.contains('mc-modal-wrap') &&\n            this.mcVisible\n        ) {\n            this.onClickOkCancel('cancel');\n        }\n    }\n\n    // tslint:disable-next-line\n    isModalType(type: ModalType): boolean {\n        return this.mcModalType === type;\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n\n        if (event.keyCode === ESCAPE && this.container && (this.container instanceof OverlayRef)) {\n\n            this.close();\n            event.preventDefault();\n        }\n    }\n\n    // AoT\n    onClickCloseBtn() {\n        if (this.mcVisible) {\n            this.onClickOkCancel('cancel');\n        }\n    }\n\n    // AoT\n    // tslint:disable-next-line\n    onClickOkCancel(type: 'ok' | 'cancel') {\n        const trigger = { ok: this.mcOnOk, cancel: this.mcOnCancel }[type];\n        const loadingKey = { ok: 'mcOkLoading', cancel: 'mcCancelLoading' }[type];\n\n        if (trigger instanceof EventEmitter) {\n            trigger.emit(this.getContentComponent());\n        } else if (typeof trigger === 'function') {\n\n            const result = trigger(this.getContentComponent());\n            // Users can return \"false\" to prevent closing by default\n            const caseClose = (doClose: boolean | void | {}) => (doClose !== false) && this.close(doClose as R);\n\n            if (isPromise(result)) {\n                this[loadingKey] = true;\n                const handleThen = (doClose) => {\n                    this[loadingKey] = false;\n                    caseClose(doClose);\n                };\n                (result as Promise<void>).then(handleThen).catch(handleThen);\n            } else {\n                caseClose(result);\n            }\n        }\n    }\n\n    // AoT\n    isNonEmptyString(value: {}): boolean {\n        return typeof value === 'string' && value !== '';\n    }\n\n    // AoT\n    isTemplateRef(value: {}): boolean {\n        return value instanceof TemplateRef;\n    }\n\n    // AoT\n    isComponent(value: {}): boolean {\n        return value instanceof Type;\n    }\n\n    // AoT\n    isModalButtons(value: {}): boolean {\n        return Array.isArray(value) && value.length > 0;\n    }\n\n    // Do rest things when visible state changed\n    private handleVisibleStateChange(visible: boolean, animation: boolean = true, closeResult?: R): Promise<any> {\n        // Hide scrollbar at the first time when shown up\n        if (visible) {\n            this.changeBodyOverflow(1);\n        }\n\n        return Promise\n            .resolve(animation && this.animateTo(visible))\n            // Emit open/close event after animations over\n            .then(() => {\n                if (visible) {\n                    this.mcAfterOpen.emit();\n                } else {\n                    this.mcAfterClose.emit(closeResult);\n                    // Show/hide scrollbar when animation is over\n                    this.changeBodyOverflow();\n                }\n            });\n    }\n\n    // Lookup a button's property, if the prop is a function, call & then return the result, otherwise, return itself.\n    // AoT\n    // tslint:disable-next-line\n    getButtonCallableProp(options: IModalButtonOptions<T>, prop: string): {} {\n        const value = options[prop];\n        const args: any[] = [];\n        if (this.contentComponentRef) {\n            args.push(this.contentComponentRef.instance);\n        }\n\n        return typeof value === 'function' ? value.apply(options, args) : value;\n    }\n\n    // On mcFooter's modal button click\n    // AoT\n    // tslint:disable-next-line\n    onButtonClick(button: IModalButtonOptions<T>) {\n        // Call onClick directly\n        const result = this.getButtonCallableProp(button, 'onClick');\n        if (isPromise(result)) {\n            button.loading = true;\n            (result as Promise<{}>).then(() => button.loading = false).catch(() => button.loading = false);\n        }\n    }\n\n    // Change mcVisible from inside\n    private changeVisibleFromInside(visible: boolean, closeResult?: R): Promise<void> {\n        if (this.mcVisible !== visible) {\n            // Change mcVisible value immediately\n            this.mcVisible = visible;\n            this.mcVisibleChange.emit(visible);\n\n            return this.handleVisibleStateChange(visible, true, closeResult);\n        }\n\n        return Promise.resolve();\n    }\n\n    private changeAnimationState(state: AnimationState) {\n        this.animationState = state;\n        if (state) {\n            this.maskAnimationClassMap = {\n                [`fade-${state}`]: true,\n                [`fade-${state}-active`]: true\n            };\n            this.modalAnimationClassMap = {\n                [`zoom-${state}`]: true,\n                [`zoom-${state}-active`]: true\n            };\n        } else {\n            // @ts-ignore\n            this.maskAnimationClassMap = this.modalAnimationClassMap = null;\n        }\n\n        if (this.contentComponentRef) {\n            this.contentComponentRef.changeDetectorRef.markForCheck();\n        } else {\n            this.changeDetector.markForCheck();\n        }\n    }\n\n    private animateTo(isVisible: boolean): Promise<any> {\n        // Figure out the lastest click position when shows up\n        if (isVisible) {\n            // [NOTE] Using timeout due to the document.click event is fired later than visible change,\n            // so if not postponed to next event-loop, we can't get the lastest click position\n            window.setTimeout(() => this.updateTransformOrigin());\n        }\n\n        this.changeAnimationState(isVisible ? 'enter' : 'leave');\n\n        // Return when animation is over\n        return new Promise((resolve) => window.setTimeout(() => {\n            this.changeAnimationState(null);\n            resolve();\n        }, MODAL_ANIMATE_DURATION));\n    }\n\n    private formatModalButtons(buttons: IModalButtonOptions<T>[]): IModalButtonOptions<T>[] {\n        return buttons.map((button) => {\n\n            return {\n                ...{\n                    type: 'default',\n                    size: 'default',\n                    autoLoading: true,\n                    show: true,\n                    loading: false,\n                    disabled: false\n                },\n                ...button\n            };\n        });\n    }\n\n    /**\n     * Create a component dynamically but not attach to any View\n     * (this action will be executed when bodyContainer is ready)\n     * @param component Component class\n     */\n    private createDynamicComponent(component: Type<T>) {\n        const factory = this.cfr.resolveComponentFactory(component);\n        const childInjector = Injector.create({\n            providers: [{provide: McModalRef, useValue: this}],\n            parent: this.viewContainer.parentInjector\n        });\n\n        this.contentComponentRef = factory.create(childInjector);\n\n        if (this.mcComponentParams) {\n            Object.assign(this.contentComponentRef.instance, this.mcComponentParams);\n        }\n\n        // Do the first change detection immediately\n        // (or we do detection at ngAfterViewInit, multi-changes error will be thrown)\n        this.contentComponentRef.changeDetectorRef.detectChanges();\n\n\n    }\n\n    // Update transform-origin to the last click position on document\n    private updateTransformOrigin() {\n        const modalElement = this.modalContainer.nativeElement as HTMLElement;\n        const lastPosition = ModalUtil.getLastClickPosition();\n\n        if (lastPosition) {\n            // tslint:disable-next-line\n            this.transformOrigin = `${lastPosition.x - modalElement.offsetLeft}px ${lastPosition.y - modalElement.offsetTop}px 0px`;\n        }\n    }\n\n    /**\n     * Take care of the body's overflow to decide the existense of scrollbar\n     * @param plusNum The number that the openModals.length will increase soon\n     */\n    private changeBodyOverflow(plusNum: number = 0) {\n        const openModals = this.modalControl.openModals;\n\n        if (openModals.length + plusNum > 0) {\n            // tslint:disable-next-line\n            this.renderer.setStyle(this.document.body, 'padding-right', `${this.mcMeasureScrollbarService.scrollBarWidth}px`);\n            this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n        } else {\n            this.renderer.removeStyle(this.document.body, 'padding-right');\n            this.renderer.removeStyle(this.document.body, 'overflow');\n        }\n    }\n}\n\n////////////\n\nfunction isPromise(obj: {} | void): boolean {\n    // tslint:disable-next-line\n    return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof (obj as Promise<{}>).then === 'function' && typeof (obj as Promise<{}>).catch === 'function';\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n\n@Pipe({\n    name: 'toCssUnit'\n})\nexport class CssUnitPipe implements PipeTransform {\n    transform(value: number | string, defaultUnit: string = 'px'): string {\n        const formatted = +value;\n\n        return isNaN(formatted) ? `${value}` : `${formatted}${defaultUnit}`;\n    }\n}\n","// tslint:disable:no-empty\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output\n} from '@angular/core';\nimport {\n    AbstractControl,\n    ControlValueAccessor,\n    NG_VALIDATORS,\n    NG_VALUE_ACCESSOR,\n    ValidationErrors,\n    Validator,\n    ValidatorFn,\n    Validators\n} from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport { DOWN_ARROW } from '@ptsecurity/cdk/keycodes';\nimport { ThemePalette } from '@ptsecurity/mosaic/core';\nimport { McFormField } from '@ptsecurity/mosaic/form-field';\nimport { MC_INPUT_VALUE_ACCESSOR } from '@ptsecurity/mosaic/input';\nimport { Subscription } from 'rxjs';\n\nimport { McDatepicker } from './datepicker';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\n/** @docs-private */\nexport const MC_DATEPICKER_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McDatepickerInput),\n    multi: true\n};\n\n/** @docs-private */\nexport const MC_DATEPICKER_VALIDATORS: any = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McDatepickerInput),\n    multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use McDatepickerInputEvent instead.\n */\nexport class McDatepickerInputEvent<D> {\n    /** The new value for the target datepicker input. */\n    value: D | null;\n\n    constructor(\n        /** Reference to the datepicker input component that emitted the event. */\n        public target: McDatepickerInput<D>,\n        /** Reference to the native input element associated with the datepicker input. */\n        public targetElement: HTMLElement) {\n        this.value = this.target.value;\n    }\n}\n\n\n/** Directive used to connect an input to a McDatepicker. */\n@Directive({\n    selector: 'input[mcDatepicker]',\n    providers: [\n        MC_DATEPICKER_VALUE_ACCESSOR,\n        MC_DATEPICKER_VALIDATORS,\n        { provide: MC_INPUT_VALUE_ACCESSOR, useExisting: McDatepickerInput }\n    ],\n    host: {\n        '[attr.aria-haspopup]': 'true',\n        '[attr.aria-owns]': '(datepicker?.opened && datepicker.id) || null',\n        '[attr.min]': 'min ? dateAdapter.toIso8601(min) : null',\n        '[attr.max]': 'max ? dateAdapter.toIso8601(max) : null',\n        '[disabled]': 'disabled',\n        '(input)': 'onInput($event.target.value)',\n        '(change)': 'onChange()',\n        '(blur)': 'onBlur()',\n        '(keydown)': 'onKeydown($event)'\n    },\n    exportAs: 'mcDatepickerInput'\n})\nexport class McDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n    /** The datepicker that this input is associated with. */\n    @Input()\n    set mcDatepicker(value: McDatepicker<D>) {\n        if (!value) {\n            return;\n        }\n\n        this.datepicker = value;\n        this.datepicker.registerInput(this);\n        this.datepickerSubscription.unsubscribe();\n\n        this.datepickerSubscription = this.datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this.cvaOnChange(selected);\n            this.onTouched();\n            this.dateInput.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));\n            this.dateChange.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));\n        });\n    }\n\n    /** Function that can be used to filter out dates within the datepicker. */\n    @Input()\n    set mcDatepickerFilter(value: (date: D | null) => boolean) {\n        this.dateFilter = value;\n        this.validatorOnChange();\n    }\n\n    /** The value of the input. */\n    @Input()\n    get value(): D | null {\n        return this._value;\n    }\n\n    set value(value: D | null) {\n        // tslint:disable-next-line:no-parameter-reassignment\n        value = this.dateAdapter.deserialize(value);\n        this.lastValueValid = !value || this.dateAdapter.isValid(value);\n        // tslint:disable-next-line:no-parameter-reassignment\n        value = this.getValidDateOrNull(value);\n        const oldDate = this.value;\n        this._value = value;\n        this.formatValue(value);\n\n        if (!this.dateAdapter.sameDate(oldDate, value)) {\n            this.valueChange.emit(value);\n        }\n    }\n\n    /** The minimum valid date. */\n    @Input()\n    get min(): D | null {\n        return this._min;\n    }\n\n    set min(value: D | null) {\n        this._min = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.validatorOnChange();\n    }\n\n    /** The maximum valid date. */\n    @Input()\n    get max(): D | null {\n        return this._max;\n    }\n\n    set max(value: D | null) {\n        this._max = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.validatorOnChange();\n    }\n\n    /** Whether the datepicker-input is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return !!this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        const newValue = coerceBooleanProperty(value);\n        const element = this.elementRef.nativeElement;\n\n        if (this._disabled !== newValue) {\n            this._disabled = newValue;\n            this.disabledChange.emit(newValue);\n        }\n\n        // We need to null check the `blur` method, because it's undefined during SSR.\n        if (newValue && element.blur) {\n            // Normally, native input elements automatically blur if they turn disabled. This behavior\n            // is problematic, because it would mean that it triggers another change detection cycle,\n            // which then causes a changed after checked error if the input element was focused before.\n            element.blur();\n        }\n    }\n\n    datepicker: McDatepicker<D>;\n    dateFilter: (date: D | null) => boolean;\n\n    /** Emits when a `change` event is fired on this `<input>`. */\n    @Output() readonly dateChange: EventEmitter<McDatepickerInputEvent<D>> =\n        new EventEmitter<McDatepickerInputEvent<D>>();\n\n    /** Emits when an `input` event is fired on this `<input>`. */\n    @Output() readonly dateInput: EventEmitter<McDatepickerInputEvent<D>> =\n        new EventEmitter<McDatepickerInputEvent<D>>();\n\n    /** Emits when the value changes (either due to user input or programmatic change). */\n    valueChange = new EventEmitter<D | null>();\n\n    /** Emits when the disabled state has changed */\n    disabledChange = new EventEmitter<boolean>();\n    private _value: D | null;\n    private _min: D | null;\n    private _max: D | null;\n    private _disabled: boolean;\n\n    private datepickerSubscription = Subscription.EMPTY;\n\n    private localeSubscription = Subscription.EMPTY;\n\n    /** Whether the last value set on the input was valid. */\n    private lastValueValid = false;\n\n    constructor(\n        public elementRef: ElementRef<HTMLInputElement>,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n        @Optional() private formField: McFormField\n    ) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        // Update the displayed date when the locale changes.\n        this.localeSubscription = dateAdapter.localeChanges.subscribe(() => {\n            this.value = this.value;\n        });\n    }\n\n    onTouched = () => {\n    }\n\n    ngOnDestroy() {\n        this.datepickerSubscription.unsubscribe();\n        this.localeSubscription.unsubscribe();\n        this.valueChange.complete();\n        this.disabledChange.complete();\n    }\n\n    /** @docs-private */\n    registerOnValidatorChange(fn: () => void): void {\n        this.validatorOnChange = fn;\n    }\n\n    /** @docs-private */\n    validate(c: AbstractControl): ValidationErrors | null {\n        return this.validator ? this.validator(c) : null;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: D): void {\n        this.value = value;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this.cvaOnChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    onKeydown(event: KeyboardEvent) {\n        // tslint:disable-next-line:deprecation\n        const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n        if (this.datepicker && isAltDownArrow && !this.elementRef.nativeElement.readOnly) {\n            this.datepicker.open();\n            event.preventDefault();\n        }\n    }\n\n    onInput(value: string) {\n        let date = this.dateAdapter.parse(value, this.dateFormats.parse.dateInput);\n        this.lastValueValid = !date || this.dateAdapter.isValid(date);\n        date = this.getValidDateOrNull(date);\n\n        if (!this.dateAdapter.sameDate(date, this._value)) {\n            this._value = date;\n            this.cvaOnChange(date);\n            this.valueChange.emit(date);\n            this.dateInput.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));\n        }\n    }\n\n    onChange() {\n        this.dateChange.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));\n    }\n\n    /** Returns the palette used by the input's form field, if any. */\n    getThemePalette(): ThemePalette | undefined {\n        return this.formField ? this.formField.color : undefined;\n    }\n\n    /** Handles blur events on the input. */\n    onBlur() {\n        // Reformat the input only if we have a valid value.\n        if (this.value) {\n            this.formatValue(this.value);\n        }\n\n        this.onTouched();\n    }\n\n    private cvaOnChange: (value: any) => void = () => {\n    }\n\n    private validatorOnChange = () => {\n    }\n\n    /** The form control validator for whether the input parses. */\n    private parseValidator: ValidatorFn = (): ValidationErrors | null => {\n        return this.lastValueValid ?\n            null : { mcDatepickerParse: { text: this.elementRef.nativeElement.value } };\n    }\n\n    /** The form control validator for the min date. */\n    private minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n        const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));\n\n        return (!this.min || !controlValue ||\n            this.dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n            null : { mcDatepickerMin: { min: this.min, actual: controlValue } };\n    }\n\n    /** The form control validator for the max date. */\n    private maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n        const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));\n\n        return (!this.max || !controlValue ||\n            this.dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n            null : { mcDatepickerMax: { max: this.max, actual: controlValue } };\n    }\n\n    /** The form control validator for the date filter. */\n    private filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n        const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));\n\n        return !this.dateFilter || !controlValue || this.dateFilter(controlValue) ?\n            null : { mcDatepickerFilter: true };\n    }\n\n    /** Formats a value and sets it on the input element. */\n    private formatValue(value: D | null) {\n        this.elementRef.nativeElement.value =\n            value ? this.dateAdapter.format(value, this.dateFormats.display.dateInput) : '';\n    }\n\n    /** The combined form control validator for this input. */\n        // tslint:disable:member-ordering\n    private validator: ValidatorFn | null =\n        Validators.compose([\n            this.parseValidator,\n            this.minValidator,\n            this.maxValidator,\n            this.filterValidator\n        ]);\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    Directive,\n    Input,\n    OnChanges,\n    OnDestroy,\n    SimpleChanges,\n    ViewEncapsulation,\n    ViewChild\n} from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { McButton } from '@ptsecurity/mosaic/button';\nimport { merge, of as observableOf, Subscription } from 'rxjs';\n\nimport { McDatepicker } from './datepicker';\nimport { McDatepickerIntl } from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `mcDatepickerToggle`. */\n@Directive({\n    selector: '[mcDatepickerToggleIcon]'\n})\nexport class McDatepickerToggleIcon {\n}\n\n\n@Component({\n    selector: 'mc-datepicker-toggle',\n    templateUrl: 'datepicker-toggle.html',\n    styleUrls: ['datepicker-toggle.css'],\n    host: {\n        class: 'mc-datepicker-toggle',\n        // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n        // consumer may have provided, while still being able to receive focus.\n        '[attr.tabindex]': '-1',\n        '[class.mc-datepicker-toggle_active]': 'datepicker && datepicker.opened',\n        '[class.mc-warn]': 'datepicker && datepicker.color === \"error\"',\n        '(focus)': 'button.focus()'\n    },\n    exportAs: 'mcDatepickerToggle',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n\n    /** Whether the toggle button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    /** Datepicker instance that the button will toggle. */\n    @Input('for') datepicker: McDatepicker<D>;\n\n    /** Tabindex for the toggle. */\n    @Input() tabIndex: number | null;\n\n    /** Custom icon set by the consumer. */\n    @ContentChild(McDatepickerToggleIcon) customIcon: McDatepickerToggleIcon;\n\n    /** Underlying button element. */\n    @ViewChild('button') button: McButton;\n    private stateChanges = Subscription.EMPTY;\n\n    private _disabled: boolean;\n\n    constructor(\n        public intl: McDatepickerIntl,\n        private changeDetectorRef: ChangeDetectorRef,\n        @Attribute('tabindex') defaultTabIndex: string\n    ) {\n        const parsedTabIndex = Number(defaultTabIndex);\n        this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.datepicker) {\n            this.watchStateChanges();\n        }\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.unsubscribe();\n    }\n\n    ngAfterContentInit() {\n        this.watchStateChanges();\n    }\n\n    open(event: Event): void {\n        if (this.datepicker && !this.disabled) {\n            this.datepicker.open();\n            event.stopPropagation();\n        }\n    }\n\n    private watchStateChanges() {\n        const datepickerDisabled = this.datepicker ? this.datepicker.disabledChange : observableOf();\n        const inputDisabled = this.datepicker && this.datepicker.datepickerInput ?\n            this.datepicker.datepickerInput.disabledChange : observableOf();\n        const datepickerToggled = this.datepicker ?\n            merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n            observableOf();\n\n        this.stateChanges.unsubscribe();\n        this.stateChanges = merge(\n            this.intl.changes,\n            datepickerDisabled,\n            inputDisabled,\n            datepickerToggled\n        ).subscribe(() => this.changeDetectorRef.markForCheck());\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { PortalModule } from '@ptsecurity/cdk/portal';\nimport { McButtonModule } from '@ptsecurity/mosaic/button';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McCalendar, McCalendarHeader } from './calendar';\nimport { McCalendarBody } from './calendar-body';\nimport {\n    McDatepicker,\n    McDatepickerContent,\n    MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './datepicker';\nimport { McDatepickerInput } from './datepicker-input';\nimport { McDatepickerIntl } from './datepicker-intl';\nimport { McDatepickerToggle, McDatepickerToggleIcon } from './datepicker-toggle';\nimport { McMonthView } from './month-view';\nimport { McMultiYearView } from './multi-year-view';\nimport { McYearView } from './year-view';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        McButtonModule,\n        OverlayModule,\n        A11yModule,\n        PortalModule,\n        McIconModule\n    ],\n    exports: [\n        McCalendar,\n        McCalendarBody,\n        McDatepicker,\n        McDatepickerContent,\n        McDatepickerInput,\n        McDatepickerToggle,\n        McDatepickerToggleIcon,\n        McMonthView,\n        McYearView,\n        McMultiYearView,\n        McCalendarHeader,\n        McButtonModule\n    ],\n    declarations: [\n        McCalendar,\n        McCalendarBody,\n        McDatepicker,\n        McDatepickerContent,\n        McDatepickerInput,\n        McDatepickerToggle,\n        McDatepickerToggleIcon,\n        McMonthView,\n        McYearView,\n        McMultiYearView,\n        McCalendarHeader\n    ],\n    providers: [\n        McDatepickerIntl,\n        MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER\n    ],\n    entryComponents: [\n        McDatepickerContent,\n        McCalendarHeader\n    ]\n})\nexport class McDatepickerModule {\n}\n","import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\n\n\n@Component({\n    selector: 'mc-divider',\n    host: {\n        class: 'mc-divider',\n        role: 'separator',\n        '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n        '[class.mc-divider-vertical]': 'vertical',\n        '[class.mc-divider-inset]': 'inset'\n    },\n    template: '',\n    styleUrls: ['divider.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false\n})\nexport class McDivider {\n    // Whether the divider is vertically aligned.\n    @Input()\n    get vertical(): boolean {\n        return this._vertical;\n    }\n\n    set vertical(value: boolean) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n\n    private _vertical: boolean = false;\n\n    // Whether the divider is an inset divider.\n    @Input()\n    get inset(): boolean {\n        return this._inset;\n    }\n\n    set inset(value: boolean) {\n        this._inset = coerceBooleanProperty(value);\n    }\n\n    private _inset: boolean = false;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McDivider } from './divider.component';\n\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [McDivider],\n    declarations: [McDivider]\n})\nexport class McDividerModule {\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n    Directive,\n    TemplateRef,\n    ComponentFactoryResolver,\n    ApplicationRef,\n    Injector,\n    ViewContainerRef,\n    Inject,\n    OnDestroy\n} from '@angular/core';\nimport { TemplatePortal, DomPortalOutlet } from '@ptsecurity/cdk/portal';\nimport { Subject } from 'rxjs';\n\n\n/**\n * Dropdown content that will be rendered lazily once the dropdown is opened.\n */\n@Directive({\n    selector: 'ng-template[mcDropdownContent]'\n})\nexport class McDropdownContent implements OnDestroy {\n\n    /** Emits when the dropdown content has been attached. */\n    _attached = new Subject<void>();\n    private _portal: TemplatePortal;\n    private _outlet: DomPortalOutlet;\n\n    constructor(\n        private _template: TemplateRef<any>,\n        private _componentFactoryResolver: ComponentFactoryResolver,\n        private _appRef: ApplicationRef,\n        private _injector: Injector,\n        private _viewContainerRef: ViewContainerRef,\n        @Inject(DOCUMENT) private _document: any) {}\n\n    /**\n     * Attaches the content with a particular context.\n     * @docs-private\n     */\n    attach(context: any = {}) {\n        if (!this._portal) {\n            this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n        }\n\n        this.detach();\n\n        if (!this._outlet) {\n            this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n                this._componentFactoryResolver, this._appRef, this._injector);\n        }\n\n        const element: HTMLElement = this._template.elementRef.nativeElement;\n\n        // Because we support opening the same dropdown from different triggers (which in turn have their\n        // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n        // risk it staying attached to a pane that's no longer in the DOM.\n        element.parentNode!.insertBefore(this._outlet.outletElement, element);\n        this._portal.attach(this._outlet, context);\n        this._attached.next();\n    }\n\n    /**\n     * Detaches the content.\n     * @docs-private\n     */\n    detach() {\n        if (this._portal.isAttached) {\n            this._portal.detach();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._outlet) {\n            this._outlet.dispose();\n        }\n    }\n}\n","import { EventEmitter, TemplateRef, InjectionToken } from '@angular/core';\nimport { FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { Direction } from '@ptsecurity/cdk/bidi';\n\nimport { McDropdownContent } from './dropdown-content';\nimport { DropdownPositionX, DropdownPositionY } from './dropdown-positions';\n\n\n/**\n * Injection token used to provide the parent dropdown to dropdown-specific components.\n * @docs-private\n */\nexport const MC_DROPDOWN_PANEL = new InjectionToken<McDropdownPanel>('MC_DROPDOWN_PANEL');\n\n/**\n * Interface for a custom dropdown panel that can be used with `mcDropdownTriggerFor`.\n * @docs-private\n */\n// tslint:disable-next-line:interface-name\nexport interface McDropdownPanel<T = any> {\n    xPosition: DropdownPositionX;\n    yPosition: DropdownPositionY;\n    overlapTrigger: boolean;\n    templateRef: TemplateRef<any>;\n    closed: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n    direction?: Direction;\n    lazyContent?: McDropdownContent;\n    backdropClass?: string;\n    hasBackdrop?: boolean;\n    focusFirstItem(origin?: FocusOrigin): void;\n    resetActiveItem(): void;\n    setPositionClasses?(x: DropdownPositionX, y: DropdownPositionY): void;\n    addItem?(item: T): void;\n    removeItem?(item: T): void;\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    OnDestroy,\n    ViewEncapsulation,\n    Inject,\n    Optional\n} from '@angular/core';\nimport { IFocusableOption, FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport {\n    CanDisable, CanDisableCtor,\n    mixinDisabled\n} from '@ptsecurity/mosaic/core';\n\nimport { MC_DROPDOWN_PANEL, McDropdownPanel } from './dropdown-panel';\n\n\n// Boilerplate for applying mixins to McDropdownItem.\n/** @docs-private */\nexport class McDropdownItemBase {}\nexport const _McDropdownItemMixinBase: CanDisableCtor & typeof McDropdownItemBase =\n    mixinDisabled(McDropdownItemBase);\n\n/**\n * This directive is intended to be used inside an mc-dropdown tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n    selector: 'mc-dropdown-item, [mc-dropdown-item]',\n    exportAs: 'mcDropdownItem',\n    inputs: ['disabled'],\n    host: {\n        role: 'dropdown-item',\n        class: 'mc-dropdown__item',\n        '[attr.tabindex]': '_getTabIndex()',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': '_checkDisabled($event)'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    template: `<ng-content></ng-content>`\n})\nexport class McDropdownItem extends _McDropdownItemMixinBase\n    implements IFocusableOption, CanDisable, OnDestroy {\n\n    private _document: Document;\n\n    constructor(\n        private _elementRef: ElementRef<HTMLElement>,\n        @Inject(DOCUMENT) document: any,\n        private _focusMonitor: FocusMonitor,\n        @Inject(MC_DROPDOWN_PANEL) @Optional() private _parentDropdownPanel?: McDropdownPanel<McDropdownItem>) {\n        super();\n\n        if (_focusMonitor) {\n            // Start monitoring the element so it gets the appropriate focused classes. We want\n            // to show the focus style for dropdown items only when the focus was not caused by a\n            // mouse or touch interaction.\n            _focusMonitor.monitor(this._elementRef.nativeElement, false);\n        }\n\n        if (_parentDropdownPanel && _parentDropdownPanel.addItem) {\n            _parentDropdownPanel.addItem(this);\n        }\n\n        this._document = document;\n    }\n\n    /** Focuses the dropdown item. */\n    focus(origin: FocusOrigin = 'program'): void {\n        if (this._focusMonitor) {\n            this._focusMonitor.focusVia(this._getHostElement(), origin);\n        } else {\n            this._getHostElement().focus();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._focusMonitor) {\n            this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n\n        if (this._parentDropdownPanel && this._parentDropdownPanel.removeItem) {\n            this._parentDropdownPanel.removeItem(this);\n        }\n    }\n\n    /** Used to set the `tabindex`. */\n    _getTabIndex(): string {\n        return this.disabled ? '-1' : '0';\n    }\n\n    /** Returns the host DOM element. */\n    _getHostElement(): HTMLElement {\n        return this._elementRef.nativeElement;\n    }\n\n    /** Prevents the default element actions if it is disabled. */\n    _checkDisabled(event: Event): void {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel(): string {\n        const element: HTMLElement = this._elementRef.nativeElement;\n        // tslint:disable-next-line:no-magic-numbers\n        const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n        let output = '';\n\n        if (element.childNodes) {\n            const length = element.childNodes.length;\n\n            // Go through all the top-level text nodes and extract their text.\n            // We skip anything that's not a text node to prevent the text from\n            // being thrown off by something like an icon.\n            for (let i = 0; i < length; i++) {\n                if (element.childNodes[i].nodeType === textNodeType) {\n                    output += element.childNodes[i].textContent;\n                }\n            }\n        }\n\n        return output.trim();\n    }\n}\n","import {\n    trigger,\n    state,\n    style,\n    animate,\n    transition,\n    query,\n    group,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n\n/**\n * Animations used by the mc-dropdown component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const mcDropdownAnimations: {\n    readonly transformDropdown: AnimationTriggerMetadata;\n    readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n    /**\n     * This animation controls the dropdown panel's entry and exit from the page.\n     *\n     * When the dropdown panel is added to the DOM, it scales in and fades in its border.\n     *\n     * When the dropdown panel is removed from the DOM, it simply fades out after a brief\n     * delay to display the ripple.\n     */\n    transformDropdown: trigger('transformDropdown', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(0.8)'\n        })),\n        transition('void => enter', group([\n            query('.mc-dropdown__content', animate('50ms linear', style({opacity: 1}))),\n            animate('50ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'}))\n        ])),\n        transition('* => void', animate('50ms 25ms linear', style({opacity: 0})))\n    ]),\n\n\n    /**\n     * This animation fades in the background color and content of the dropdown panel\n     * after its containing element is scaled in.\n     */\n    fadeInItems: trigger('fadeInItems', [\n        // now. Remove next time we do breaking changes.\n        state('showing', style({opacity: 1})),\n        transition('void => *', [\n            style({opacity: 0}),\n            animate('200ms 60ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n\nexport const fadeInItems = mcDropdownAnimations.fadeInItems;\n\nexport const transformDropdown = mcDropdownAnimations.transformDropdown;\n","import { AnimationEvent } from '@angular/animations';\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChild,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    Output,\n    TemplateRef,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    OnInit\n} from '@angular/core';\nimport { FocusKeyManager, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { Direction } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { ESCAPE, DOWN_ARROW, UP_ARROW } from '@ptsecurity/cdk/keycodes';\nimport { Subject, Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { mcDropdownAnimations } from './dropdown-animations';\nimport { McDropdownContent } from './dropdown-content';\nimport { throwMcDropdownInvalidPositionX, throwMcDropdownInvalidPositionY } from './dropdown-errors';\nimport { McDropdownItem } from './dropdown-item';\nimport { MC_DROPDOWN_PANEL, McDropdownPanel } from './dropdown-panel';\nimport { DropdownPositionX, DropdownPositionY } from './dropdown-positions';\n\n\n/** Default `mc-dropdown` options that can be overridden. */\n// tslint:disable-next-line:interface-name\nexport interface McDropdownDefaultOptions {\n    /** The x-axis position of the dropdown. */\n    xPosition: DropdownPositionX;\n\n    /** The y-axis position of the dropdown. */\n    yPosition: DropdownPositionY;\n\n    /** Whether the dropdown should overlap the dropdown trigger. */\n    overlapTrigger: boolean;\n\n    /** Class to be applied to the dropdown's backdrop. */\n    backdropClass: string;\n\n    /** Whether the dropdown has a backdrop. */\n    hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mc-dropdown`. */\nexport const MC_DROPDOWN_DEFAULT_OPTIONS =\n    new InjectionToken<McDropdownDefaultOptions>('mc-dropdown-default-options', {\n        providedIn: 'root',\n        factory: MC_DROPDOWN_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MC_DROPDOWN_DEFAULT_OPTIONS_FACTORY(): McDropdownDefaultOptions {\n    return {\n        overlapTrigger: false,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop'\n    };\n}\n\n@Component({\n    selector: 'mc-dropdown',\n    templateUrl: 'dropdown.html',\n    styleUrls: ['dropdown.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcDropdown',\n    animations: [\n        mcDropdownAnimations.transformDropdown,\n        mcDropdownAnimations.fadeInItems\n    ],\n    providers: [\n        { provide: MC_DROPDOWN_PANEL, useExisting: McDropdown }\n    ]\n})\nexport class McDropdown implements AfterContentInit, McDropdownPanel<McDropdownItem>, OnInit, OnDestroy {\n\n    /** Position of the dropdown in the X axis. */\n    @Input()\n    get xPosition(): DropdownPositionX { return this._xPosition; }\n    set xPosition(value: DropdownPositionX) {\n        if (value !== 'before' && value !== 'after') {\n            throwMcDropdownInvalidPositionX();\n        }\n\n        this._xPosition = value;\n        this.setPositionClasses();\n    }\n\n    /** Position of the dropdown in the Y axis. */\n    @Input()\n    get yPosition(): DropdownPositionY { return this._yPosition; }\n    set yPosition(value: DropdownPositionY) {\n        if (value !== 'above' && value !== 'below') {\n            throwMcDropdownInvalidPositionY();\n        }\n\n        this._yPosition = value;\n        this.setPositionClasses();\n    }\n\n    /** Whether the dropdown should overlap its trigger. */\n    @Input()\n    get overlapTrigger(): boolean { return this._overlapTrigger; }\n    set overlapTrigger(value: boolean) {\n        this._overlapTrigger = coerceBooleanProperty(value);\n    }\n\n    /** Whether the dropdown has a backdrop. */\n    @Input()\n    get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n    set hasBackdrop(value: boolean | undefined) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n\n    /**\n     * This method takes classes set on the host mc-dropdown element and applies them on the\n     * dropdown template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing dropdown from outside the component.\n     * @param classes list of class names\n     */\n    @Input('class')\n    set panelClass(classes: string) {\n        if (classes && classes.length) {\n            this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n                obj[className] = true;\n\n                return obj;\n            }, {});\n\n            this._elementRef.nativeElement.className = '';\n        }\n    }\n\n    /** Config object to be passed into the dropdown's ngClass */\n    _classList: {[key: string]: boolean} = {};\n\n    /** Current state of the panel animation. */\n    _panelAnimationState: 'void' | 'enter' = 'void';\n\n    /** Emits whenever an animation on the dropdown completes. */\n    _animationDone = new Subject<AnimationEvent>();\n\n    /** Whether the dropdown is animating. */\n    _isAnimating: boolean;\n\n    /** Layout direction of the dropdown. */\n    direction: Direction;\n\n    /** Class to be added to the backdrop element. */\n    @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n    /** @docs-private */\n    @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n    /**\n     * List of the items inside of a dropdown.\n     */\n    @ContentChildren(McDropdownItem) items: QueryList<McDropdownItem>;\n\n    /**\n     * Dropdown content that will be rendered lazily.\n     * @docs-private\n     */\n    @ContentChild(McDropdownContent) lazyContent: McDropdownContent;\n\n    /** Event emitted when the dropdown is closed. */\n    @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n        new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n    private _keyManager: FocusKeyManager<McDropdownItem>;\n    private _xPosition: DropdownPositionX = this._defaultOptions.xPosition;\n    private _yPosition: DropdownPositionY = this._defaultOptions.yPosition;\n\n    /** Dropdown items inside the current dropdown. */\n    private _items: McDropdownItem[] = [];\n\n    /** Emits whenever the amount of dropdown items changes. */\n    private _itemChanges = new Subject<McDropdownItem[]>();\n\n    /** Subscription to tab events on the dropdown panel */\n    private _tabSubscription = Subscription.EMPTY;\n    private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n    private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n    constructor(\n        private _elementRef: ElementRef<HTMLElement>,\n        private _ngZone: NgZone,\n        @Inject(MC_DROPDOWN_DEFAULT_OPTIONS) private _defaultOptions: McDropdownDefaultOptions) { }\n\n    ngOnInit() {\n        this.setPositionClasses();\n    }\n\n    ngAfterContentInit() {\n        this._keyManager = new FocusKeyManager<McDropdownItem>(this.items).withWrap().withTypeAhead();\n        this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n    }\n\n    ngOnDestroy() {\n        this._tabSubscription.unsubscribe();\n        this.closed.complete();\n    }\n\n    /** Handle a keyboard event from the dropdown, delegating to the appropriate action. */\n    _handleKeydown(event: KeyboardEvent) {\n\n        // tslint:disable-next-line:deprecation\n        switch (event.keyCode) {\n            case ESCAPE:\n                this.closed.emit('keydown');\n                break;\n            case UP_ARROW:\n            case DOWN_ARROW:\n                this._keyManager.setFocusOrigin('keyboard');\n                this._keyManager.onKeydown(event);\n                break;\n            default:\n                // todo зачем обрабатывать лишние события ?\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    /**\n     * Focus the first item in the dropdown.\n     * @param origin Action from which the focus originated. Used to set the correct styling.\n     */\n    focusFirstItem(origin: FocusOrigin = 'program'): void {\n        // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n        if (this.lazyContent) {\n            this._ngZone.onStable.asObservable()\n                .pipe(take(1))\n                .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n        } else {\n            this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n        }\n    }\n\n    /**\n     * Resets the active item in the dropdown. This is used when the dropdown is opened, allowing\n     * the user to start from the first option when pressing the down arrow.\n     */\n    resetActiveItem() {\n        this._keyManager.setActiveItem(-1);\n    }\n\n    /**\n     * Registers a dropdown item with the dropdown.\n     * @docs-private\n     */\n    addItem(item: McDropdownItem) {\n        // We register the items through this method, rather than picking them up through\n        // `ContentChildren`, because we need the items to be picked up by their closest\n        // `mc-dropdown` ancestor. If we used `@ContentChildren(McDropdownItem, {descendants: true})`,\n        // all descendant items will bleed into the top-level dropdown in the case where the consumer\n        // has `mc-dropdown` instances nested inside each other.\n        if (this._items.indexOf(item) === -1) {\n            this._items.push(item);\n            this._itemChanges.next(this._items);\n        }\n    }\n\n    /**\n     * Removes an item from the dropdown.\n     * @docs-private\n     */\n    removeItem(item: McDropdownItem) {\n        const index = this._items.indexOf(item);\n\n        if (this._items.indexOf(item) > -1) {\n            this._items.splice(index, 1);\n            this._itemChanges.next(this._items);\n        }\n    }\n\n    /**\n     * Adds classes to the dropdown panel based on its position. Can be used by\n     * consumers to add specific styling based on the position.\n     * @param posX Position of the dropdown along the x axis.\n     * @param posY Position of the dropdown along the y axis.\n     * @docs-private\n     */\n    setPositionClasses(posX: DropdownPositionX = this.xPosition, posY: DropdownPositionY = this.yPosition) {\n        const classes = this._classList;\n        classes['mc-dropdown-before'] = posX === 'before';\n        classes['mc-dropdown-after'] = posX === 'after';\n        classes['mc-dropdown-above'] = posY === 'above';\n        classes['mc-dropdown-below'] = posY === 'below';\n    }\n\n    /** Starts the enter animation. */\n    _startAnimation() {\n        this._panelAnimationState = 'enter';\n    }\n\n    /** Resets the panel animation to its initial state. */\n    _resetAnimation() {\n        this._panelAnimationState = 'void';\n    }\n\n    /** Callback that is invoked when the panel animation completes. */\n    _onAnimationDone(event: AnimationEvent) {\n        this._animationDone.next(event);\n        this._isAnimating = false;\n\n        // Scroll the content element to the top once the animation is done. This is necessary, because\n        // we move focus to the first item while it's still being animated, which can throw the browser\n        // off when it determines the scroll position. Alternatively we can move focus when the\n        // animation is done, however moving focus asynchronously will interrupt screen readers\n        // which are in the process of reading out the dropdown already. We take the `element` from\n        // the `event` since we can't use a `ViewChild` to access the pane.\n        if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n            event.element.scrollTop = 0;\n        }\n    }\n}\n","import {\n    AfterContentInit,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    OnDestroy, OnInit,\n    Optional,\n    Output,\n    ViewContainerRef\n} from '@angular/core';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { Direction, Directionality } from '@ptsecurity/cdk/bidi';\nimport {\n    FlexibleConnectedPositionStrategy,\n    HorizontalConnectionPos,\n    Overlay,\n    OverlayConfig,\n    OverlayRef,\n    VerticalConnectionPos,\n    IScrollStrategy\n} from '@ptsecurity/cdk/overlay';\nimport { TemplatePortal } from '@ptsecurity/cdk/portal';\nimport { merge, Subscription } from 'rxjs';\nimport { filter, take, takeUntil } from 'rxjs/operators';\n\nimport { throwMcDropdownMissingError } from './dropdown-errors';\nimport { McDropdownPanel } from './dropdown-panel';\nimport { McDropdown } from './dropdown.component';\n\n\n/** Injection token that determines the scroll handling while the dropdown is open. */\nexport const MC_DROPDOWN_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-dropdown-scroll-strategy');\n\n/** @docs-private */\nexport function MC_DROPDOWN_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => IScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_DROPDOWN_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_DROPDOWN_SCROLL_STRATEGY_FACTORY\n};\n\n/**\n * This directive is intended to be used in conjunction with an mc-dropdown tag.  It is\n * responsible for toggling the display of the provided dropdown instance.\n */\n@Directive({\n    selector: `[mcDropdownTriggerFor]`,\n    host: {\n        '(touchstart)': '_openedBy = \"touch\"',\n        '(click)': 'toggle()'\n    },\n    exportAs: 'mcDropdownTrigger'\n})\nexport class McDropdownTrigger implements OnInit, AfterContentInit, OnDestroy {\n\n    /** Whether the dropdown is open. */\n    get opened(): boolean {\n        return this._opened;\n    }\n\n    /** The text direction of the containing app. */\n    get dir(): Direction {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n\n    // Tracking input type is necessary so it's possible to only auto-focus\n    // the first item of the list when the dropdown is opened via the keyboard\n    _openedBy: 'mouse' | 'touch' | null = null;\n\n    /** References the dropdown instance that the trigger is associated with. */\n    @Input('mcDropdownTriggerFor') dropdown: McDropdownPanel;\n\n    /** Data to be passed along to any lazily-rendered content. */\n    @Input('mcDropdownTriggerData') data: any;\n\n    /** Event emitted when the associated dropdown is opened. */\n    @Output() readonly dropdownOpened: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Event emitted when the associated dropdown is closed. */\n    @Output() readonly dropdownClosed: EventEmitter<void> = new EventEmitter<void>();\n\n    private _portal: TemplatePortal;\n    private _overlayRef: OverlayRef | null = null;\n    private _opened: boolean = false;\n    private _closeSubscription = Subscription.EMPTY;\n    private _hoverSubscription = Subscription.EMPTY;\n\n    constructor(private _overlay: Overlay,\n                private _element: ElementRef<HTMLElement>,\n                private _viewContainerRef: ViewContainerRef,\n                @Inject(MC_DROPDOWN_SCROLL_STRATEGY) private _scrollStrategy: any,\n                @Optional() private _dir: Directionality,\n                private _focusMonitor?: FocusMonitor) {}\n\n    ngOnInit(): void {\n        this.dropdown.closed = this.dropdown.closed || new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n    }\n\n    ngAfterContentInit() {\n        this._check();\n\n        this.dropdown.closed.asObservable().subscribe(() => {\n            this._destroy();\n        });\n    }\n\n    ngOnDestroy() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n\n        this._cleanUpSubscriptions();\n    }\n\n    /** Toggles the dropdown between the open and closed states. */\n    toggle(): void {\n        // tslint:disable-next-line:no-void-expression\n        return this._opened ? this.close() : this.open();\n    }\n\n    /** Opens the dropdown. */\n    open(): void {\n        if (this._opened) {\n            return;\n        }\n\n        this._check();\n\n        const overlayRef = this._createOverlay();\n        this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n        overlayRef.attach(this._portal);\n\n        if (this.dropdown.lazyContent) {\n            this.dropdown.lazyContent.attach(this.data);\n        }\n\n        this._closeSubscription = this._closingActions().subscribe(() => this.close());\n        this._init();\n\n        if (this.dropdown instanceof McDropdown) {\n            this.dropdown._startAnimation();\n        }\n    }\n\n    /** Closes the dropdown. */\n    close(): void {\n        this.dropdown.closed.emit();\n    }\n\n    /**\n     * Focuses the dropdown trigger.\n     * @param origin Source of the dropdown trigger's focus.\n     */\n    focus(origin: FocusOrigin = 'program') {\n        if (this._focusMonitor) {\n            this._focusMonitor.focusVia(this._element.nativeElement, origin);\n        } else {\n            this._element.nativeElement.focus();\n        }\n    }\n\n    /** Closes the dropdown and does the necessary cleanup. */\n    private _destroy() {\n        if (!this._overlayRef || !this.opened) {\n            return;\n        }\n\n        const dropdown = this.dropdown;\n\n        this._closeSubscription.unsubscribe();\n        this._overlayRef.detach();\n\n        if (dropdown instanceof McDropdown) {\n            dropdown._resetAnimation();\n\n            if (dropdown.lazyContent) {\n                // Wait for the exit animation to finish before detaching the content.\n                dropdown._animationDone\n                    .pipe(\n                        filter((event) => event.toState === 'void'),\n                        take(1),\n                        // Interrupt if the content got re-attached.\n                        takeUntil(dropdown.lazyContent._attached)\n                    )\n                    .subscribe(() => dropdown.lazyContent.detach(), undefined, () => {\n                        // No matter whether the content got re-attached, reset the dropdown.\n                        this._reset();\n                    });\n            } else {\n                this._reset();\n            }\n        } else {\n            this._reset();\n\n            if (dropdown.lazyContent) {\n                dropdown.lazyContent.detach();\n            }\n        }\n    }\n\n    /**\n     * This method sets the dropdown state to open and focuses the first item if\n     * the dropdown was opened via the keyboard.\n     */\n    private _init(): void {\n        this.dropdown.direction = this.dir;\n        this._setIsOpened(true);\n        this.dropdown.focusFirstItem(this._openedBy || 'program');\n    }\n\n    /**\n     * This method resets the dropdown when it's closed, most importantly restoring\n     * focus to the dropdown trigger if the dropdown was opened via the keyboard.\n     */\n    private _reset(): void {\n        this._setIsOpened(false);\n\n        // We should reset focus if the user is navigating using a keyboard or\n        // if we have a top-level trigger which might cause focus to be lost\n        // when clicking on the backdrop.\n        if (!this._openedBy) {\n            // Note that the focus style will show up both for `program` and\n            // `keyboard` so we don't have to specify which one it is.\n            this.focus();\n        } else {\n            this.focus(this._openedBy);\n        }\n\n        this._openedBy = null;\n    }\n\n    // set state rather than toggle to support triggers sharing a dropdown\n    private _setIsOpened(isOpen: boolean): void {\n        this._opened = isOpen;\n        // tslint:disable-next-line:no-void-expression\n        this._opened ? this.dropdownOpened.emit() : this.dropdownClosed.emit();\n    }\n\n    /**\n     * This method checks that a valid instance of Dropdown has been passed into\n     * mcDropdownTriggerFor. If not, an exception is thrown.\n     */\n    private _check() {\n        if (!this.dropdown) {\n            throwMcDropdownMissingError();\n        }\n    }\n\n    /**\n     * This method creates the overlay from the provided dropdown's template and saves its\n     * OverlayRef so that it can be attached to the DOM when open is called.\n     */\n    private _createOverlay(): OverlayRef {\n        if (!this._overlayRef) {\n            this._portal = new TemplatePortal(this.dropdown.templateRef, this._viewContainerRef);\n            const config = this._getOverlayConfig();\n            this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n            this._overlayRef = this._overlay.create(config);\n\n            // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n            // Ideally we'd also have our keyboard event logic in here, however doing so will\n            // break anybody that may have implemented the `McDropdownPanel` themselves.\n            this._overlayRef.keydownEvents().subscribe();\n        }\n\n        return this._overlayRef;\n    }\n\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @returns OverlayConfig\n     */\n    private _getOverlayConfig(): OverlayConfig {\n        return new OverlayConfig({\n            positionStrategy: this._overlay.position()\n                .flexibleConnectedTo(this._element)\n                .withLockedPosition()\n                .withTransformOriginOn('.mc-dropdown__panel'),\n            hasBackdrop: this.dropdown.hasBackdrop === null || this.dropdown.hasBackdrop === undefined\n                ? true\n                : this.dropdown.hasBackdrop,\n            backdropClass: this.dropdown.backdropClass || 'cdk-overlay-transparent-backdrop',\n            scrollStrategy: this._scrollStrategy(),\n            direction: this._dir\n        });\n    }\n\n    /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the dropdown based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     */\n    private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n        if (this.dropdown.setPositionClasses) {\n            // todo possibly we should not recompute positions there\n            /*position.positionChanges.subscribe((change) => {\n                const posX: DropdownPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n                const posY: DropdownPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n                this.dropdown.setPositionClasses!(posX, posY);\n            });*/\n            position.positionChanges.subscribe(() => {\n                this.dropdown.setPositionClasses!(this.dropdown.xPosition, this.dropdown.yPosition);\n            });\n        }\n    }\n\n    /**\n     * Sets the appropriate positions on a position strategy\n     * so the overlay connects with the trigger correctly.\n     * @param positionStrategy Strategy whose position to update.\n     */\n    private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n        const [originX, originFallbackX]: HorizontalConnectionPos[] =\n            this.dropdown.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n        const [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n            this.dropdown.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n        let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n        const [overlayX, overlayFallbackX] = [originX, originFallbackX];\n        const offsetY = 0;\n\n        if (!this.dropdown.overlapTrigger) {\n            originY = overlayY === 'top' ? 'bottom' : 'top';\n            originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n        }\n\n        positionStrategy.withPositions([\n            {originX, originY, overlayX, overlayY, offsetY},\n            {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n            {\n                originX,\n                originY: originFallbackY,\n                overlayX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY\n            },\n            {\n                originX: originFallbackX,\n                originY: originFallbackY,\n                overlayX: overlayFallbackX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY\n            }\n        ]);\n    }\n\n    /** Cleans up the active subscriptions. */\n    private _cleanUpSubscriptions(): void {\n        this._closeSubscription.unsubscribe();\n        this._hoverSubscription.unsubscribe();\n    }\n\n    /** Returns a stream that emits whenever an action that should close the dropdown occurs. */\n    private _closingActions() {\n        const backdrop = this._overlayRef!.backdropClick();\n        const detachments = this._overlayRef!.detachments();\n\n        return merge(backdrop, detachments);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\n\nimport { McDropdownContent } from './dropdown-content';\nimport { McDropdownItem } from './dropdown-item';\nimport { MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER, McDropdownTrigger } from './dropdown-trigger';\nimport { McDropdown } from './dropdown.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule\n    ],\n    exports: [McDropdown, McDropdownItem, McDropdownTrigger, McDropdownContent],\n    declarations: [McDropdown, McDropdownItem, McDropdownTrigger, McDropdownContent],\n    providers: [MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class McDropdownModule {}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-content',\n    preserveWhitespaces: false,\n    templateUrl: './content.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ],\n    host: {\n        '[class.mc-layout-content]': 'true'\n    }\n})\nexport class McContentComponent {\n}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-footer',\n    preserveWhitespaces: false,\n    templateUrl: './footer.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ],\n    host: {\n        '[class.mc-layout-footer]': 'true'\n    }\n})\nexport class McFooterComponent {\n}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector : 'mc-header',\n    preserveWhitespaces: false,\n    templateUrl: './header.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ],\n    host: {\n        '[class.mc-layout-header]': 'true'\n    }\n})\nexport class McHeaderComponent {\n}\n","import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-layout',\n    preserveWhitespaces: false,\n    styleUrls: ['layout.css'],\n    templateUrl: './layout.component.html',\n    host: {\n        '[class.mc-layout]': 'true',\n        '[class.mc-layout-has-sidebar]': 'hasSidebar'\n    },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McLayoutComponent {\n    hasSidebar = false;\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    EventEmitter,\n    Host,\n    Input,\n    OnInit,\n    Optional,\n    Output\n} from '@angular/core';\nimport { toBoolean } from '@ptsecurity/mosaic/core';\n\nimport { McLayoutComponent } from './layout.component';\n\n\n@Component({\n    selector: 'mc-sidebar',\n    preserveWhitespaces: false,\n    templateUrl: './sidebar.component.html',\n    host: {\n        '[class.mc-layout-sidebar]': 'true',\n        '[class.mc-layout-sidebar-collapsed]': 'mcCollapsed',\n        '[style.flex]': 'mcFlex',\n        '[style.max-width.px]': 'mcWidth',\n        '[style.min-width.px]': 'mcWidth',\n        '[style.width.px]': 'mcWidth'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McSidebarComponent implements OnInit {\n\n    @Input() _mcWidth = 200;\n    @Input() mcCollapsedWidth = 80;\n\n    @Input()\n    set mcCollapsible(value: boolean) {\n        this.collapsible = toBoolean(value);\n    }\n\n    get mcCollapsible(): boolean {\n        return this.collapsible;\n    }\n\n    @Input()\n    set mcCollapsed(value: boolean) {\n        this.collapsed = toBoolean(value);\n    }\n\n    get mcCollapsed(): boolean {\n        return this.collapsed;\n    }\n\n    // tslint:disable-next-line\n    @Output() mcCollapsedChange = new EventEmitter();\n\n    private collapsed = false;\n    private collapsible = false;\n\n    get mcFlex(): string {\n        if (this.mcCollapsed) {\n            return `0 0 ${this.mcCollapsedWidth}px`;\n        } else {\n            return `0 0 ${this.mcWidth}px`;\n        }\n    }\n\n    get mcWidth(): number {\n        if (this.mcCollapsed) {\n            return this.mcCollapsedWidth;\n        } else {\n            return this._mcWidth;\n        }\n    }\n\n    constructor(\n        @Optional() @Host() private mcLayoutComponent: McLayoutComponent) {\n    }\n\n    ngOnInit() {\n        if (this.mcLayoutComponent) {\n            this.mcLayoutComponent.hasSidebar = true;\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McContentComponent } from './content.component';\nimport { McFooterComponent } from './footer.component';\nimport { McHeaderComponent } from './header.component';\nimport { McLayoutComponent } from './layout.component';\nimport { McSidebarComponent } from './sidebar.component';\n\n\n@NgModule({\n    imports: [ CommonModule ],\n    exports: [\n        McLayoutComponent,\n        McContentComponent,\n        McFooterComponent,\n        McHeaderComponent,\n        McSidebarComponent\n    ],\n    declarations: [\n        McLayoutComponent,\n        McContentComponent,\n        McFooterComponent,\n        McHeaderComponent,\n        McSidebarComponent\n    ]\n})\nexport class McLayoutModule {\n}\n","// tslint:disable:no-magic-numbers\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { DateAdapter } from '@ptsecurity/cdk/datetime';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    PAGE_DOWN,\n    PAGE_UP,\n    RIGHT_ARROW,\n    UP_ARROW,\n    SPACE\n} from '@ptsecurity/cdk/keycodes';\n\nimport { McCalendarBody, McCalendarCell } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-multi-year-view',\n    templateUrl: 'multi-year-view.html',\n    exportAs: 'mcMultiYearView',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McMultiYearView<D> implements AfterContentInit {\n    /** The date to display in this multi-year view (everything other than the year is ignored). */\n    @Input()\n    get activeDate(): D {\n        return this._activeDate;\n    }\n\n    set activeDate(value: D) {\n        const oldActiveDate = this._activeDate;\n        const validDate =\n            this.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();\n        this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n        if (Math.floor(this.dateAdapter.getYear(oldActiveDate) / yearsPerPage) !==\n            Math.floor(this.dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n            this.init();\n        }\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.selectedYear = this._selected && this.dateAdapter.getYear(this._selected);\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** A function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Emits when a new year is selected. */\n    @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits the selected year. This doesn't imply a change on the selected date */\n    @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits when any date is activated. */\n    @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** The body of calendar table */\n    @ViewChild(McCalendarBody) mcCalendarBody: McCalendarBody;\n\n    /** Grid of calendar cells representing the currently displayed years. */\n    years: McCalendarCell[][];\n\n    /** The year that today falls on. */\n    todayYear: number;\n\n    /** The year of the selected date. Null if the selected date is null. */\n    selectedYear: number | null;\n    private _activeDate: D;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() private dir?: Directionality\n    ) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        this._activeDate = this.dateAdapter.today();\n    }\n\n    ngAfterContentInit() {\n        this.init();\n    }\n\n    /** Initializes this multi-year view. */\n    init() {\n        this.todayYear = this.dateAdapter.getYear(this.dateAdapter.today());\n        const activeYear = this.dateAdapter.getYear(this._activeDate);\n        const activeOffset = activeYear % yearsPerPage;\n        this.years = [];\n        for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n            row.push(activeYear - activeOffset + i);\n            if (row.length === yearsPerRow) {\n                this.years.push(row.map((year) => this.createCellForYear(year)));\n                row = [];\n            }\n        }\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Handles when a new year is selected. */\n    onYearSelected(year: number) {\n        this.yearSelected.emit(this.dateAdapter.createDate(year, 0, 1));\n        const month = this.dateAdapter.getMonth(this.activeDate);\n        const daysInMonth =\n            this.dateAdapter.getNumDaysInMonth(this.dateAdapter.createDate(year, month, 1));\n        this.selectedChange.emit(this.dateAdapter.createDate(year, month,\n            Math.min(this.dateAdapter.getDate(this.activeDate), daysInMonth)));\n    }\n\n    /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n    handleCalendarBodyKeydown(event: KeyboardEvent): void {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n        const oldActiveDate = this._activeDate;\n        const isRtl = this.isRtl();\n\n        // tslint:disable-next-line:deprecation\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n                break;\n            case HOME:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate,\n                    -this.dateAdapter.getYear(this._activeDate) % yearsPerPage);\n                break;\n            case END:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate,\n                    yearsPerPage - this.dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n                break;\n            case PAGE_UP:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(\n                        this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n                break;\n            case PAGE_DOWN:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(\n                        this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n                break;\n            case ENTER:\n            case SPACE:\n                this.onYearSelected(this.dateAdapter.getYear(this._activeDate));\n                break;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n\n        if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n\n        this.focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n\n    getActiveCell(): number {\n        return this.dateAdapter.getYear(this.activeDate) % yearsPerPage;\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.mcCalendarBody.focusActiveCell();\n    }\n\n    /** Creates an McCalendarCell for the given year. */\n    private createCellForYear(year: number) {\n        const yearName = this.dateAdapter.getYearName(this.dateAdapter.createDate(year, 0, 1));\n\n        return new McCalendarCell(year, yearName, yearName, this.shouldEnableYear(year));\n    }\n\n    /** Whether the given year is enabled. */\n    private shouldEnableYear(year: number) {\n        // disable if the year is greater than maxDate lower than minDate\n        if (year === undefined || year === null ||\n            (this.maxDate && year > this.dateAdapter.getYear(this.maxDate)) ||\n            (this.minDate && year < this.dateAdapter.getYear(this.minDate))) {\n            return false;\n        }\n\n        // enable if it reaches here and there's no filter defined\n        if (!this.dateFilter) {\n            return true;\n        }\n\n        const firstOfYear = this.dateAdapter.createDate(year, 0, 1);\n\n        // If any date in the year is enabled count the year as enabled.\n        for (let date = firstOfYear; this.dateAdapter.getYear(date) === year;\n             date = this.dateAdapter.addCalendarDays(date, 1)) {\n            if (this.dateFilter(date)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Determines whether the user has the RTL layout direction. */\n    private isRtl() {\n        return this.dir && this.dir.value === 'rtl';\n    }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Inject,\n    Input,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    PAGE_DOWN,\n    PAGE_UP,\n    RIGHT_ARROW,\n    UP_ARROW,\n    SPACE\n} from '@ptsecurity/cdk/keycodes';\n\nimport { McCalendarBody, McCalendarCell } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-year-view',\n    templateUrl: 'year-view.html',\n    exportAs: 'mcYearView',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McYearView<D> implements AfterContentInit {\n    /** The date to display in this year view (everything other than the year is ignored). */\n    @Input()\n    get activeDate(): D {\n        return this._activeDate;\n    }\n\n    set activeDate(value: D) {\n        const oldActiveDate = this._activeDate;\n        const validDate =\n            this.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();\n        this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n        if (this.dateAdapter.getYear(oldActiveDate) !== this.dateAdapter.getYear(this._activeDate)) {\n            this.init();\n        }\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.selectedMonth = this.getMonthInCurrentYear(this._selected);\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** A function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Emits when a new month is selected. */\n    @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits the selected month. This doesn't imply a change on the selected date */\n    @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits when any date is activated. */\n    @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** The body of calendar table */\n    @ViewChild(McCalendarBody) mcCalendarBody: McCalendarBody;\n\n    /** Grid of calendar cells representing the months of the year. */\n    months: McCalendarCell[][];\n\n    /** The label for this year (e.g. \"2017\"). */\n    yearLabel: string;\n\n    /** The month in this year that today falls on. Null if today is in a different year. */\n    todayMonth: number | null;\n\n    /**\n     * The month in this year that the selected Date falls on.\n     * Null if the selected Date is in a different year.\n     */\n    selectedMonth: number | null;\n    private _activeDate: D;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() private dir?: Directionality\n    ) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        this._activeDate = this.dateAdapter.today();\n    }\n\n    ngAfterContentInit() {\n        this.init();\n    }\n\n    /** Handles when a new month is selected. */\n    onMonthSelected(month: number) {\n        const normalizedDate =\n            this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate), month, 1);\n\n        this.monthSelected.emit(normalizedDate);\n\n        const daysInMonth = this.dateAdapter.getNumDaysInMonth(normalizedDate);\n\n        this.selectedChange.emit(this.dateAdapter.createDate(\n            this.dateAdapter.getYear(this.activeDate), month,\n            Math.min(this.dateAdapter.getDate(this.activeDate), daysInMonth)));\n    }\n\n    /** Handles keydown events on the calendar body when calendar is in year view. */\n    handleCalendarBodyKeydown(event: KeyboardEvent): void {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n        const oldActiveDate = this._activeDate;\n        const isRtl = this.isRtl();\n\n        const VERTICAL_SHIFT = 4;\n        const PAGE_SHIFT = 10;\n        const MAX_MONTH_INDEX = 11;\n\n        // tslint:disable-next-line:deprecation\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, -VERTICAL_SHIFT);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, VERTICAL_SHIFT);\n                break;\n            case HOME:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate,\n                    -this.dateAdapter.getMonth(this._activeDate));\n                break;\n            case END:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate,\n                    MAX_MONTH_INDEX - this.dateAdapter.getMonth(this._activeDate));\n                break;\n            case PAGE_UP:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -PAGE_SHIFT : -1);\n                break;\n            case PAGE_DOWN:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(this._activeDate, event.altKey ? PAGE_SHIFT : 1);\n                break;\n            case ENTER:\n            case SPACE:\n                this.onMonthSelected(this.dateAdapter.getMonth(this._activeDate));\n                break;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n\n        if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n\n        this.focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n\n    /** Initializes this year view. */\n    init() {\n        this.selectedMonth = this.getMonthInCurrentYear(this.selected);\n        this.todayMonth = this.getMonthInCurrentYear(this.dateAdapter.today());\n        this.yearLabel = this.dateAdapter.getYearName(this.activeDate);\n\n        const monthNames = this.dateAdapter.getMonthNames('short');\n\n        // First row of months only contains 5 elements so we can fit the year label on the same row.\n        // tslint:disable-next-line:no-magic-numbers\n        this.months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map((row) => row.map(\n            (month) => this.createCellForMonth(month, monthNames[month])));\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.mcCalendarBody.focusActiveCell();\n    }\n\n    /**\n     * Gets the month in this year that the given Date falls on.\n     * Returns null if the given Date is in another year.\n     */\n    private getMonthInCurrentYear(date: D | null) {\n        return date && this.dateAdapter.getYear(date) === this.dateAdapter.getYear(this.activeDate) ?\n            this.dateAdapter.getMonth(date) : null;\n    }\n\n    /** Creates an McCalendarCell for the given month. */\n    private createCellForMonth(month: number, monthName: string) {\n        const ariaLabel = this.dateAdapter.format(\n            this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate), month, 1),\n            this.dateFormats.display.monthYearA11yLabel);\n\n        const newMonthName = monthName[0].toLocaleUpperCase() + monthName.substr(1);\n\n        return new McCalendarCell(\n            month, newMonthName, ariaLabel, this.shouldEnableMonth(month));\n    }\n\n    /** Whether the given month is enabled. */\n    private shouldEnableMonth(month: number) {\n\n        const activeYear = this.dateAdapter.getYear(this.activeDate);\n\n        if (month === undefined || month === null ||\n            this.isYearAndMonthAfterMaxDate(activeYear, month) ||\n            this.isYearAndMonthBeforeMinDate(activeYear, month)) {\n            return false;\n        }\n\n        if (!this.dateFilter) {\n            return true;\n        }\n\n        const firstOfMonth = this.dateAdapter.createDate(activeYear, month, 1);\n\n        // If any date in the month is enabled count the month as enabled.\n        for (let date = firstOfMonth; this.dateAdapter.getMonth(date) === month;\n             date = this.dateAdapter.addCalendarDays(date, 1)) {\n            if (this.dateFilter(date)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Tests whether the combination month/year is after this.maxDate, considering\n     * just the month and year of this.maxDate\n     */\n    private isYearAndMonthAfterMaxDate(year: number, month: number) {\n        if (this.maxDate) {\n            const maxYear = this.dateAdapter.getYear(this.maxDate);\n            const maxMonth = this.dateAdapter.getMonth(this.maxDate);\n\n            return year > maxYear || (year === maxYear && month > maxMonth);\n        }\n\n        return false;\n    }\n\n    /**\n     * Tests whether the combination month/year is before this.minDate, considering\n     * just the month and year of this.minDate\n     */\n    private isYearAndMonthBeforeMinDate(year: number, month: number) {\n        if (this.minDate) {\n            const minYear = this.dateAdapter.getYear(this.minDate);\n            const minMonth = this.dateAdapter.getMonth(this.minDate);\n\n            return year < minYear || (year === minYear && month < minMonth);\n        }\n\n        return false;\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Determines whether the user has the RTL layout direction. */\n    private isRtl() {\n        return this.dir && this.dir.value === 'rtl';\n    }\n}\n","import {\n    AfterContentInit,\n    AfterViewChecked,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Optional,\n    Output,\n    SimpleChanges,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport { ComponentPortal, IComponentType, Portal } from '@ptsecurity/cdk/portal';\nimport { Subject, Subscription } from 'rxjs';\n\nimport { McCalendarCellCssClasses } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\nimport { McDatepickerIntl } from './datepicker-intl';\nimport { McMonthView } from './month-view';\nimport { McMultiYearView, yearsPerPage } from './multi-year-view';\nimport { McYearView } from './year-view';\n\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type McCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for McCalendar */\n@Component({\n    selector: 'mc-calendar-header',\n    templateUrl: 'calendar-header.html',\n    exportAs: 'mcCalendarHeader',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCalendarHeader<D> {\n    constructor(private intl: McDatepickerIntl,\n                @Inject(forwardRef(() => McCalendar)) public calendar: McCalendar<D>,\n                @Optional() private dateAdapter: DateAdapter<D>,\n                @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n                changeDetectorRef: ChangeDetectorRef) {\n\n        this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n    }\n\n    /** The label for the current calendar view. */\n    get periodButtonText(): string {\n        if (this.calendar.currentView === 'month') {\n            const label = this.dateAdapter\n                .format(this.calendar.activeDate, this.dateFormats.display.monthYearLabel);\n\n            return label[0].toLocaleUpperCase() + label.substr(1);\n        }\n\n        if (this.calendar.currentView === 'year') {\n            return this.dateAdapter.getYearName(this.calendar.activeDate);\n        }\n\n        const activeYear = this.dateAdapter.getYear(this.calendar.activeDate);\n        const firstYearInView = this.dateAdapter.getYearName(\n            // tslint:disable-next-line:no-magic-numbers\n            this.dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n        const lastYearInView = this.dateAdapter.getYearName(\n            // tslint:disable-next-line:no-magic-numbers\n            this.dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n\n        return `${firstYearInView} \\u2013 ${lastYearInView}`;\n    }\n\n    get periodButtonLabel(): string {\n        return this.calendar.currentView === 'month' ?\n            this.intl.switchToMultiYearViewLabel : this.intl.switchToMonthViewLabel;\n    }\n\n    /** The label for the previous button. */\n    get prevButtonLabel(): string {\n        return {\n            month: this.intl.prevMonthLabel,\n            year: this.intl.prevYearLabel,\n            'multi-year': this.intl.prevMultiYearLabel\n        }[this.calendar.currentView];\n    }\n\n    /** The label for the next button. */\n    get nextButtonLabel(): string {\n        return {\n            month: this.intl.nextMonthLabel,\n            year: this.intl.nextYearLabel,\n            'multi-year': this.intl.nextMultiYearLabel\n        }[this.calendar.currentView];\n    }\n\n    /** Handles user clicks on the period label. */\n    currentPeriodClicked(): void {\n        this.calendar.currentView = this.calendar.currentView === 'month' ? 'multi-year' : 'month';\n    }\n\n    /** Handles user clicks on the previous button. */\n    previousClicked(): void {\n        this.calendar.activeDate = this.calendar.currentView === 'month' ?\n            this.dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this.dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView === 'year' ? -1 : -yearsPerPage\n            );\n    }\n\n    /** Handles user clicks on the next button. */\n    nextClicked(): void {\n        this.calendar.activeDate = this.calendar.currentView === 'month' ?\n            this.dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this.dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                this.calendar.currentView === 'year' ? 1 : yearsPerPage\n            );\n    }\n\n    /** Whether the previous period button is enabled. */\n    previousEnabled(): boolean {\n        if (!this.calendar.minDate) {\n            return true;\n        }\n\n        return !this.calendar.minDate ||\n            !this.isSameView(this.calendar.activeDate, this.calendar.minDate);\n    }\n\n    /** Whether the next period button is enabled. */\n    nextEnabled(): boolean {\n        return !this.calendar.maxDate ||\n            !this.isSameView(this.calendar.activeDate, this.calendar.maxDate);\n    }\n\n    /** Whether the two dates represent the same view in the current view mode (month or year). */\n    private isSameView(date1: D, date2: D): boolean {\n        if (this.calendar.currentView === 'month') {\n            return this.dateAdapter.getYear(date1) === this.dateAdapter.getYear(date2) &&\n                this.dateAdapter.getMonth(date1) === this.dateAdapter.getMonth(date2);\n        }\n        if (this.calendar.currentView === 'year') {\n            return this.dateAdapter.getYear(date1) === this.dateAdapter.getYear(date2);\n        }\n\n        // Otherwise we are in 'multi-year' view.\n        return Math.floor(this.dateAdapter.getYear(date1) / yearsPerPage) ===\n            Math.floor(this.dateAdapter.getYear(date2) / yearsPerPage);\n    }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-calendar',\n    templateUrl: 'calendar.html',\n    styleUrls: ['calendar.css'],\n    host: {\n        class: 'mc-calendar'\n    },\n    exportAs: 'mcCalendar',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n\n    /** A date representing the period (month or year) to start the calendar in. */\n    @Input()\n    get startAt(): D | null {\n        return this._startAt;\n    }\n\n    set startAt(value: D | null) {\n        this._startAt = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /**\n     * The current active date. This determines which time period is shown and which date is\n     * highlighted when using keyboard navigation.\n     */\n    get activeDate(): D {\n        return this.clampedActiveDate;\n    }\n\n    set activeDate(value: D) {\n        this.clampedActiveDate = this.dateAdapter.clampDate(value, this.minDate, this.maxDate);\n        this.stateChanges.next();\n    }\n\n    /** Whether the calendar is in month view. */\n    get currentView(): McCalendarView {\n        return this._currentView;\n    }\n\n    set currentView(value: McCalendarView) {\n        this._currentView = value;\n        this.moveFocusOnNextTick = true;\n    }\n\n    /** An input indicating the type of the header component, if set. */\n    @Input() headerComponent: IComponentType<any>;\n\n    /** A portal containing the header component type for this calendar. */\n    calendarHeaderPortal: Portal<any>;\n\n    /** Whether the calendar should be started in month or year view. */\n    @Input() startView: McCalendarView = 'month';\n\n    /** Function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Function that can be used to add custom CSS classes to dates. */\n    @Input() dateClass: (date: D) => McCalendarCellCssClasses;\n\n    /** Emits when the currently selected date changes. */\n    @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /**\n     * Emits the year chosen in multiyear view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /**\n     * Emits the month chosen in year view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits when any date is selected. */\n    @Output() readonly userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Reference to the current month view component. */\n    @ViewChild(McMonthView) monthView: McMonthView<D>;\n\n    /** Reference to the current year view component. */\n    @ViewChild(McYearView) yearView: McYearView<D>;\n\n    /** Reference to the current multi-year view component. */\n    @ViewChild(McMultiYearView) multiYearView: McMultiYearView<D>;\n\n    /**\n     * Emits whenever there is a state change that the header may need to respond to.\n     */\n    stateChanges = new Subject<void>();\n\n    private intlChanges: Subscription;\n\n    /**\n     * Used for scheduling that focus should be moved to the active cell on the next tick.\n     * We need to schedule it, rather than do it immediately, because we have to wait\n     * for Angular to re-evaluate the view children.\n     */\n    private moveFocusOnNextTick = false;\n    private _startAt: D | null;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n    private clampedActiveDate: D;\n    private _currentView: McCalendarView;\n\n    constructor(\n        intl: McDatepickerIntl,\n        @Optional() private dateAdapter: DateAdapter<D>,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        this.intlChanges = intl.changes.subscribe(() => {\n            changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        });\n    }\n\n    ngAfterContentInit() {\n        this.calendarHeaderPortal = new ComponentPortal(this.headerComponent || McCalendarHeader);\n        this.activeDate = this.startAt || this.dateAdapter.today();\n\n        // Assign to the private property since we don't want to move focus on init.\n        this._currentView = this.startView;\n    }\n\n    ngAfterViewChecked() {\n        if (this.moveFocusOnNextTick) {\n            this.moveFocusOnNextTick = false;\n            this.focusActiveCell();\n        }\n    }\n\n    ngOnDestroy() {\n        this.intlChanges.unsubscribe();\n        this.stateChanges.complete();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n        if (change && !change.firstChange) {\n            const view = this.getCurrentViewComponent();\n\n            if (view) {\n                // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n                // passed down to the view via data bindings which won't be up-to-date when we call `init`.\n                this.changeDetectorRef.detectChanges();\n                view.init();\n            }\n        }\n\n        this.stateChanges.next();\n    }\n\n    focusActiveCell() {\n        this.getCurrentViewComponent().focusActiveCell();\n    }\n\n    /** Updates today's date after an update of the active date */\n    updateTodaysDate() {\n        const view = this.currentView === 'month' ? this.monthView :\n            (this.currentView === 'year' ? this.yearView : this.multiYearView);\n\n        view.ngAfterContentInit();\n    }\n\n    /** Handles date selection in the month view. */\n    dateSelected(date: D): void {\n        if (!this.dateAdapter.sameDate(date, this.selected)) {\n            this.selectedChange.emit(date);\n        }\n    }\n\n    /** Handles year selection in the multiyear view. */\n    yearSelectedInMultiYearView(normalizedYear: D) {\n        this.yearSelected.emit(normalizedYear);\n    }\n\n    /** Handles month selection in the year view. */\n    monthSelectedInYearView(normalizedMonth: D) {\n        this.monthSelected.emit(normalizedMonth);\n    }\n\n    userSelected(): void {\n        this.userSelection.emit();\n    }\n\n    /** Handles year/month selection in the multi-year/year views. */\n    goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n        this.activeDate = date;\n        this.currentView = view;\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Returns the component instance that corresponds to the current calendar view. */\n    private getCurrentViewComponent() {\n        return this.monthView || this.yearView || this.multiYearView;\n    }\n}\n","import {\n    animate,\n    state,\n    style,\n    transition,\n    trigger,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n\n/**\n * Animations used by the mosaic datepicker.\n * @docs-private\n */\nexport const mcDatepickerAnimations: {\n    readonly transformPanel: AnimationTriggerMetadata;\n    readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n    /** Transforms the height of the datepicker's calendar. */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(1, 0.8)'\n        })),\n        transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1, 1)'\n        }))),\n        transition('* => void', animate('100ms linear', style({ opacity: 0 })))\n    ]),\n\n    /** Fades in the content of the calendar. */\n    fadeInCalendar: trigger('fadeInCalendar', [\n        state('void', style({ opacity: 0 })),\n        state('enter', style({ opacity: 1 })),\n\n        // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n        transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n    ])\n};\n\n// todo should be put into polyfils\n// https://github.com/angular/angular/issues/24769\nif (!Element.prototype.matches) {\n    Element.prototype.matches = (Element.prototype as any).msMatchesSelector;\n}\n","// tslint:disable:no-unbound-method\n// tslint:disable:no-magic-numbers\nimport { DOCUMENT } from '@angular/common';\nimport {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    Component,\n    ComponentRef,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { DateAdapter } from '@ptsecurity/cdk/datetime';\nimport { ESCAPE, UP_ARROW } from '@ptsecurity/cdk/keycodes';\nimport {\n    Overlay,\n    OverlayConfig,\n    OverlayRef,\n    IPositionStrategy,\n    IScrollStrategy\n} from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal, IComponentType } from '@ptsecurity/cdk/portal';\nimport {\n    CanColor,\n    CanColorCtor,\n    mixinColor,\n    ThemePalette\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { merge, Observable, Subject, Subscription } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\n\nimport { McCalendar } from './calendar';\nimport { McCalendarCellCssClasses } from './calendar-body';\nimport { mcDatepickerAnimations } from './datepicker-animations';\nimport { createMissingDateImplError } from './datepicker-errors';\nimport { McDatepickerInput } from './datepicker-input';\n\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MC_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-datepicker-scroll-strategy');\n\n/** @docs-private */\n// tslint:disable-next-line:naming-convention\nexport function MC_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => IScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_DATEPICKER_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_DATEPICKER_SCROLL_STRATEGY_FACTORY\n};\n\n// Boilerplate for applying mixins to McDatepickerContent.\n/** @docs-private */\nexport class McDatepickerContentBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McDatepickerContentMixinBase: CanColorCtor & typeof McDatepickerContentBase =\n    mixinColor(McDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * McCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n    selector: 'mc-datepicker__content',\n    templateUrl: 'datepicker-content.html',\n    styleUrls: ['datepicker-content.css'],\n    host: {\n        class: 'mc-datepicker__content',\n        '[@transformPanel]': '\"enter\"'\n    },\n    animations: [\n        mcDatepickerAnimations.transformPanel,\n        mcDatepickerAnimations.fadeInCalendar\n    ],\n    exportAs: 'mcDatepickerContent',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['color']\n})\nexport class McDatepickerContent<D> extends McDatepickerContentMixinBase\n    implements AfterViewInit, CanColor {\n\n    /** Reference to the internal calendar component. */\n    @ViewChild(McCalendar) calendar: McCalendar<D>;\n\n    /** Reference to the datepicker that created the overlay. */\n    datepicker: McDatepicker<D>;\n\n    /** Whether the datepicker is above or below the input. */\n    isAbove: boolean;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    ngAfterViewInit() {\n        this.calendar.focusActiveCell();\n    }\n}\n\n\n// TODO: We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"mcDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n    selector: 'mc-datepicker',\n    template: '',\n    exportAs: 'mcDatepicker',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    providers: [{ provide: McFormFieldControl, useExisting: McDatepicker }]\n})\nexport class McDatepicker<D> implements OnDestroy, CanColor {\n\n    /** The date to open the calendar to initially. */\n    @Input()\n    get startAt(): D | null {\n        // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n        // selected value is.\n        return this._startAt || (this.datepickerInput ? this.datepickerInput.value : null);\n    }\n\n    set startAt(value: D | null) {\n        this._startAt = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** Color palette to use on the datepicker's calendar. */\n    @Input()\n    get color(): ThemePalette {\n        // @ts-ignore:next-line\n        return this._color ||\n            (this.datepickerInput ? this.datepickerInput.getThemePalette() : undefined);\n    }\n\n    set color(value: ThemePalette) {\n        this._color = value;\n    }\n\n    /** Whether the datepicker pop-up should be disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled === undefined && this.datepickerInput ?\n            this.datepickerInput.disabled : !!this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        const newValue = coerceBooleanProperty(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this.disabledChange.next(newValue);\n        }\n    }\n\n    /** Whether the calendar is open. */\n    @Input()\n    get opened(): boolean {\n        return this._opened;\n    }\n\n    set opened(value: boolean) {\n        if (value) {\n            this.open();\n        } else {\n            this.close();\n        }\n    }\n\n    /** The currently selected date. */\n    get selected(): D | null {\n        return this.validSelected;\n    }\n\n    set selected(value: D | null) {\n        this.validSelected = value;\n    }\n\n    /** The minimum selectable date. */\n    get minDate(): D | null {\n        return this.datepickerInput && this.datepickerInput.min;\n    }\n\n    /** The maximum selectable date. */\n    get maxDate(): D | null {\n        return this.datepickerInput && this.datepickerInput.max;\n    }\n\n    get dateFilter(): (date: D | null) => boolean {\n        return this.datepickerInput && this.datepickerInput.dateFilter;\n    }\n\n\n    get value(): D | null {\n        return this.selected;\n    }\n\n    /** An input indicating the type of the custom header component for the calendar, if set. */\n    @Input() calendarHeaderComponent: IComponentType<any>;\n\n    /** The view that the calendar should start in. */\n    @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n    /**\n     * Emits selected year in multiyear view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /**\n     * Emits selected month in year view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n    @Input() panelClass: string | string[];\n\n    /** Function that can be used to add custom CSS classes to dates. */\n    @Input() dateClass: (date: D) => McCalendarCellCssClasses;\n\n    /** Emits when the datepicker has been opened. */\n    @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Emits when the datepicker has been closed. */\n    @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n    /** The id for the datepicker calendar. */\n    id: string = `mc-datepicker-${datepickerUid++}`;\n\n    /** A reference to the overlay when the calendar is opened as a popup. */\n    popupRef: OverlayRef;\n\n    /** The input element this datepicker is associated with. */\n    datepickerInput: McDatepickerInput<D>;\n\n    readonly stateChanges: Observable<void> = new Subject<void>();\n\n    /** Emits when the datepicker is disabled. */\n    readonly disabledChange = new Subject<boolean>();\n\n    /** Emits new selected date when selected date changes. */\n    readonly selectedChanged = new Subject<D>();\n    private scrollStrategy: () => IScrollStrategy;\n    private _startAt: D | null;\n    private _disabled: boolean;\n    private _opened = false;\n    private validSelected: D | null = null;\n    private _color: ThemePalette;\n\n    /** A portal containing the calendar for this datepicker. */\n    private calendarPortal: ComponentPortal<McDatepickerContent<D>>;\n\n    /** Reference to the component instantiated in popup mode. */\n    private popupComponentRef: ComponentRef<McDatepickerContent<D>> | null;\n\n    /** The element that was focused before the datepicker was opened. */\n    private focusedElementBeforeOpen: HTMLElement | null = null;\n\n    /** Subscription to value changes in the associated input element. */\n    private inputSubscription = Subscription.EMPTY;\n\n    constructor(private overlay: Overlay,\n                private ngZone: NgZone,\n                private viewContainerRef: ViewContainerRef,\n                @Inject(MC_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n                @Optional() private dateAdapter: DateAdapter<D>,\n                @Optional() private dir: Directionality,\n                @Optional() @Inject(DOCUMENT) private document: any) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        this.scrollStrategy = scrollStrategy;\n    }\n\n    ngOnDestroy() {\n        this.close();\n        this.inputSubscription.unsubscribe();\n        this.disabledChange.complete();\n\n        if (this.popupRef) {\n            this.popupRef.dispose();\n            this.popupComponentRef = null;\n        }\n    }\n\n    /** Selects the given date */\n    select(date: D): void {\n        const oldValue = this.selected;\n        this.selected = date;\n        if (!this.dateAdapter.sameDate(oldValue, this.selected)) {\n            this.selectedChanged.next(date);\n        }\n    }\n\n    /** Emits the selected year in multiyear view */\n    selectYear(normalizedYear: D): void {\n        this.yearSelected.emit(normalizedYear);\n    }\n\n    /** Emits selected month in year view */\n    selectMonth(normalizedMonth: D): void {\n        this.monthSelected.emit(normalizedMonth);\n    }\n\n    /**\n     * Register an input with this datepicker.\n     * @param input The datepicker input to register with this datepicker.\n     */\n    registerInput(input: McDatepickerInput<D>): void {\n        if (this.datepickerInput) {\n            throw Error('A McDatepicker can only be associated with a single input.');\n        }\n        this.datepickerInput = input;\n        this.inputSubscription =\n            this.datepickerInput.valueChange.subscribe((value: D | null) => this.selected = value);\n    }\n\n    /** Open the calendar. */\n    open(): void {\n        if (this._opened || this.disabled) {\n            return;\n        }\n        if (!this.datepickerInput) {\n            throw Error('Attempted to open an McDatepicker with no associated input.');\n        }\n        if (this.document) {\n            this.focusedElementBeforeOpen = this.document.activeElement;\n        }\n\n        this.openAsPopup();\n\n        this._opened = true;\n        this.openedStream.emit();\n    }\n\n    /** Close the calendar. */\n    close(): void {\n        if (!this._opened) {\n            return;\n        }\n\n        if (this.popupRef && this.popupRef.hasAttached()) {\n            this.popupRef.detach();\n        }\n\n        if (this.calendarPortal && this.calendarPortal.isAttached) {\n            this.calendarPortal.detach();\n        }\n\n        const completeClose = () => {\n            // The `_opened` could've been reset already if\n            // we got two events in quick succession.\n            if (this._opened) {\n                this._opened = false;\n                this.closedStream.emit();\n                this.focusedElementBeforeOpen = null;\n            }\n        };\n\n        if (this.focusedElementBeforeOpen &&\n            typeof this.focusedElementBeforeOpen.focus === 'function') {\n            // Because IE moves focus asynchronously, we can't count on it being restored before we've\n            // marked the datepicker as closed. If the event fires out of sequence and the element that\n            // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n            // able to close the calendar at all. We work around it by making the logic, that marks\n            // the datepicker as closed, async as well.\n            this.focusedElementBeforeOpen.focus();\n            setTimeout(completeClose);\n        } else {\n            completeClose();\n        }\n    }\n\n    /** Open the calendar as a popup. */\n    private openAsPopup(): void {\n        if (!this.calendarPortal) {\n            this.calendarPortal = new ComponentPortal<McDatepickerContent<D>>(McDatepickerContent,\n                this.viewContainerRef);\n        }\n\n        if (!this.popupRef) {\n            this.createPopup();\n        }\n\n        if (!this.popupRef.hasAttached()) {\n            this.popupComponentRef = this.popupRef.attach(this.calendarPortal);\n            this.popupComponentRef.instance.datepicker = this;\n            this.setColor();\n\n            // Update the position once the calendar has rendered.\n            this.ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n                this.popupRef.updatePosition();\n            });\n        }\n    }\n\n    /** Create the popup. */\n    private createPopup(): void {\n        const overlayConfig = new OverlayConfig({\n            positionStrategy: this.createPopupPositionStrategy(),\n            hasBackdrop: true,\n            backdropClass: 'mc-overlay-transparent-backdrop',\n            direction: this.dir,\n            scrollStrategy: this.scrollStrategy(),\n            panelClass: 'mc-datepicker__popup'\n        });\n\n        this.popupRef = this.overlay.create(overlayConfig);\n        this.popupRef.overlayElement.setAttribute('role', 'dialog');\n\n        merge(\n            this.popupRef.backdropClick(),\n            this.popupRef.detachments(),\n            this.popupRef.keydownEvents().pipe(filter((event) => {\n                // Closing on alt + up is only valid when there's an input associated with the datepicker.\n                // tslint:disable-next-line:deprecation\n                return event.keyCode === ESCAPE || (this.datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n            }))\n        ).subscribe(() => this.close());\n    }\n\n    /** Create the popup PositionStrategy. */\n    private createPopupPositionStrategy(): IPositionStrategy {\n        return this.overlay.position()\n            .flexibleConnectedTo(this.datepickerInput.elementRef)\n            .withTransformOriginOn('.mc-datepicker__content')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(8)\n            .withLockedPosition()\n            .withPositions([\n                {\n                    originX: 'start',\n                    originY: 'bottom',\n                    overlayX: 'start',\n                    overlayY: 'top'\n                },\n                {\n                    originX: 'start',\n                    originY: 'top',\n                    overlayX: 'start',\n                    overlayY: 'bottom'\n                },\n                {\n                    originX: 'end',\n                    originY: 'bottom',\n                    overlayX: 'end',\n                    overlayY: 'top'\n                },\n                {\n                    originX: 'end',\n                    originY: 'top',\n                    overlayX: 'end',\n                    overlayY: 'bottom'\n                }\n            ]);\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Passes the current theme color along to the calendar overlay. */\n    private setColor(): void {\n        const color = this.color;\n        if (this.popupComponentRef) {\n            this.popupComponentRef.instance.color = color;\n        }\n    }\n}\n","import {\n    AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport {\n    CanColor, CanColorCtor,\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\nimport { MC_CHECKBOX_CLICK_ACTION, McCheckboxClickAction } from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mc-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McCheckbox),\n    multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n    /** The initial state of the component before any user interaction. */\n    Init,\n    /** The state representing the component when it's becoming checked. */\n    Checked,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate\n}\n\n/** Change event object emitted by McCheckbox. */\nexport class McCheckboxChange {\n    /** The source McCheckbox of the event. */\n    source: McCheckbox;\n    /** The new `checked` value of the checkbox. */\n    checked: boolean;\n}\n\n// Boilerplate for applying mixins to McCheckbox.\n/** @docs-private */\nexport class McCheckboxBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\nexport const _McCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof McCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisabled(McCheckboxBase)));\n\n\n/**\n * A mosaic checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A McCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n */\n@Component({\n    selector: 'mc-checkbox',\n    templateUrl: 'checkbox.html',\n    styleUrls: ['checkbox.css'],\n    exportAs: 'mcCheckbox',\n    host: {\n        class: 'mc-checkbox',\n        '[id]': 'id',\n        '[attr.id]': 'id',\n        '[class.mc-indeterminate]': 'indeterminate',\n        '[class.mc-checked]': 'checked',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-checkbox-label-before]': 'labelPosition == \"before\"'\n    },\n    providers: [MC_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCheckbox extends _McCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex {\n\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     */\n    @Input('aria-label') ariaLabel: string = '';\n\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n    private _uniqueId: string = `mc-checkbox-${++nextUniqueId}`;\n\n    /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n    @Input() id: string = this._uniqueId;\n\n    /** Returns the unique id for the visual hidden input. */\n    get inputId(): string {\n        return `${this.id || this._uniqueId}-input`;\n    }\n\n    /** Whether the checkbox is required. */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    private _required: boolean;\n\n    /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n    @Input() labelPosition: 'before' | 'after' = 'after';\n\n    /** Name value will be applied to the input element if present */\n    @Input() name: string | null = null;\n\n    /** Event emitted when the checkbox's `checked` value changes. */\n    @Output() readonly change: EventEmitter<McCheckboxChange> =\n        new EventEmitter<McCheckboxChange>();\n\n    /** Event emitted when the checkbox's `indeterminate` value changes. */\n    @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** The value attribute of the native input element */\n    @Input() value: string;\n\n    /** The native `<input type=\"checkbox\">` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * @docs-private\n     */\n    _onTouched: () => any = () => {\n    }\n\n    private _currentAnimationClass: string = '';\n\n    private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n    private _controlValueAccessorChangeFn: (value: any) => void = () => {\n    }\n\n    constructor(elementRef: ElementRef,\n                private _changeDetectorRef: ChangeDetectorRef,\n                private _focusMonitor: FocusMonitor,\n                @Attribute('tabindex') tabIndex: string,\n                @Optional() @Inject(MC_CHECKBOX_CLICK_ACTION)\n                private _clickAction: McCheckboxClickAction) {\n        super(elementRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._inputElement.nativeElement)\n            .subscribe((focusOrigin) => this._onInputFocusChange(focusOrigin));\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    }\n\n    /**\n     * Whether the checkbox is checked.\n     */\n    @Input()\n    get checked(): boolean {\n        return this._checked;\n    }\n\n    set checked(value: boolean) {\n        if (value != this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _checked: boolean = false;\n\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value != this.disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    @Input()\n    get indeterminate(): boolean {\n        return this._indeterminate;\n    }\n\n    set indeterminate(value: boolean) {\n        const changed = value != this._indeterminate;\n        this._indeterminate = value;\n\n        if (changed) {\n            if (this._indeterminate) {\n                this._transitionCheckState(TransitionCheckState.Indeterminate);\n            } else {\n                this._transitionCheckState(\n                    this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n    }\n\n    private _indeterminate: boolean = false;\n\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // This method is getting called whenever the label of the checkbox changes.\n        // Since the checkbox uses the OnPush strategy we need to notify it about the change\n        // that has been recognized by the cdkObserveContent directive.\n        this._changeDetectorRef.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any) {\n        this.checked = !!value;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this._onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n    }\n\n    _getAriaChecked(): 'true' | 'false' | 'mixed' {\n        return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n    }\n\n    private _transitionCheckState(newState: TransitionCheckState) {\n        const oldState = this._currentCheckState;\n        const element: HTMLElement = this._elementRef.nativeElement;\n\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n\n        this._currentCheckState = newState;\n\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n        }\n    }\n\n    private _emitChangeEvent() {\n        const event = new McCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    }\n\n    /** Function is called whenever the focus changes for the input element. */\n    private _onInputFocusChange(focusOrigin: FocusOrigin) {\n        if (focusOrigin) {\n            this._onTouched();\n        }\n    }\n\n    /** Toggles the `checked` state of the checkbox. */\n    toggle(): void {\n        this.checked = !this.checked;\n    }\n\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event\n     */\n    _onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && this._clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && this._clickAction !== 'check') {\n\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n\n            this.toggle();\n            this._transitionCheckState(\n                this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        } else if (!this.disabled && this._clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mc-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n\n    /** Focuses the checkbox. */\n    focus(): void {\n        this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n    }\n\n    _onInteractionEvent(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n}\n","import {\n    Directive,\n    forwardRef,\n    Provider\n} from '@angular/core';\nimport {\n    CheckboxRequiredValidator,\n    NG_VALIDATORS\n} from '@angular/forms';\n\n\nexport const MC_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McCheckboxRequiredValidator),\n    multi: true\n};\n\n/**\n * Validator for Mosaic checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mc-checkbox`.\n */\n@Directive({\n    selector: `mc-checkbox[required][formControlName],\n             mc-checkbox[required][formControl], mc-checkbox[required][ngModel]`,\n    providers: [MC_CHECKBOX_REQUIRED_VALIDATOR],\n    host: { '[attr.required]': 'required ? \"\" : null' }\n})\nexport class McCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McCheckbox } from './checkbox';\nimport { McCheckboxRequiredValidator } from './checkbox-required-validator';\n\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [McCheckbox, McCheckboxRequiredValidator],\n    declarations: [McCheckbox, McCheckboxRequiredValidator]\n})\nexport class McCheckboxModule {\n}\n","import { InjectionToken } from '@angular/core';\n\n\nexport const MC_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{ value: any }>('MC_INPUT_VALUE_ACCESSOR');\n","function sanitizeNumber(value: number): number | null {\n    return !isFinite(value) || isNaN(value)\n        ? null\n        : value;\n}\n\nfunction getPrecision(value: number): number {\n    const arr = value.toString().split('.');\n\n    return arr.length === 1\n        ? 1\n        // tslint:disable-next-line:no-magic-numbers\n        :  Math.pow(10, arr[1].length);\n}\n\nfunction add(value1: number, value2: number) {\n    const precision = Math.max(getPrecision(value1), getPrecision(value2));\n\n    const res = (value1 * precision + value2 * precision) / precision;\n\n    return sanitizeNumber(res);\n}\n\nexport const stepUp = (value: number | null,\n                       max: number,\n                       min: number,\n                       step: number\n): number | null => {\n    let res;\n\n    if (value === null) {\n        res = add(min, step);\n\n        return res === null ? null : Math.min(res, max);\n    }\n\n    res = add(value, step);\n\n    return res === null ? null : Math.max(Math.min(res, max), min);\n};\n\nexport const stepDown = (value: number | null,\n                         max: number,\n                         min: number,\n                         step: number\n): number | null => {\n    let res;\n\n    if (value === null) {\n        res = add(max, -step);\n\n        return res === null ? null : Math.max(res, min);\n    }\n\n    res = add(value, -step);\n\n    return res === null ? null : Math.min(Math.max(res, min), max);\n};\n","import {\n    Attribute,\n    Directive, DoCheck, ElementRef, Inject, Input, OnChanges,\n    OnDestroy, Optional, Self\n} from '@angular/core';\nimport {\n    FormGroupDirective,\n    NgControl,\n    NgForm, NgModel\n} from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport {\n    END, C, V, X, A, DELETE, BACKSPACE, TAB, ENTER,\n    ESCAPE, ZERO, NINE, NUMPAD_ZERO, NUMPAD_NINE, NUMPAD_MINUS, DASH,\n    FF_MINUS, LEFT_ARROW, RIGHT_ARROW, HOME, UP_ARROW, DOWN_ARROW, F1, F12\n} from '@ptsecurity/cdk/keycodes';\nimport { getSupportedInputTypes, Platform } from '@ptsecurity/cdk/platform';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl, McFormFieldNumberControl } from '@ptsecurity/mosaic/form-field';\nimport { Subject } from 'rxjs';\n\nimport { getMcInputUnsupportedTypeError } from './input-errors';\nimport { MC_INPUT_VALUE_ACCESSOR } from './input-value-accessor';\nimport { stepDown, stepUp } from './stepperUtils';\n\n\nconst MC_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\n\nexport const BIG_STEP = 10;\nexport const SMALL_STEP = 1;\n\nlet nextUniqueId = 0;\n\nexport class McInputBase {\n    constructor(public defaultErrorStateMatcher: ErrorStateMatcher,\n                public parentForm: NgForm,\n                public parentFormGroup: FormGroupDirective,\n                public ngControl: NgControl) {\n    }\n}\n\nexport const _McInputMixinBase: CanUpdateErrorStateCtor & typeof McInputBase = mixinErrorState(McInputBase);\n\n\n@Directive({\n    selector: `input[mcInput][type=\"number\"]`,\n    exportAs: 'mcNumericalInput',\n    providers: [NgModel, { provide: McFormFieldNumberControl, useExisting: McNumberInput }],\n    host: {\n        '(blur)': '_focusChanged(false)',\n        '(focus)': '_focusChanged(true)',\n        '(paste)': 'onPaste($event)',\n        '(keydown)': 'onKeyDown($event)'\n    }\n})\nexport class McNumberInput implements McFormFieldNumberControl<any> {\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    @Input()\n    bigStep: number;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    @Input()\n    step: number;\n\n    @Input()\n    min: number;\n\n    @Input()\n    max: number;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    value: any;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    private readonly _host: HTMLInputElement;\n\n    constructor(\n        private _platform: Platform ,\n        private _elementRef: ElementRef,\n        private _model: NgModel,\n        @Attribute('step') step: string,\n        @Attribute('big-step') bigStep: string,\n        @Attribute('min') min: string,\n        @Attribute('max') max: string\n    ) {\n        this.step = this.isDigit(step) ? parseFloat(step) : SMALL_STEP;\n        this.bigStep = this.isDigit(bigStep) ? parseFloat(bigStep) : BIG_STEP;\n        this.min = this.isDigit(min) ? parseFloat(min) : -Infinity;\n        this.max = this.isDigit(max) ? parseFloat(max) : Infinity;\n\n        this._host = this._elementRef.nativeElement;\n\n        const self = this;\n\n        if ('valueAsNumber' in this._host) {\n            Object.defineProperty(Object.getPrototypeOf(this._host), 'valueAsNumber', {\n                // tslint:disable-next-line:no-reserved-keywords\n                get() {\n                    const res = parseFloat(self.normalizeSplitter(this.value));\n\n                    return isNaN(res) ? null : res;\n                }\n            });\n        }\n    }\n\n    _focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent) {\n        // tslint:disable-next-line:deprecation\n        const keyCode = event.keyCode;\n\n        const isCtrlA = (e) => e.keyCode === A && (e.ctrlKey || e.metaKey);\n        const isCtrlC = (e) => e.keyCode === C && (e.ctrlKey || e.metaKey);\n        const isCtrlV = (e) => e.keyCode === V && (e.ctrlKey || e.metaKey);\n        const isCtrlX = (e) => e.keyCode === X && (e.ctrlKey || e.metaKey);\n\n        const isFKey = (e) => e.keyCode >= F1 && e.keyCode <= F12;\n\n        const isNumber = (e) => (e.keyCode >= ZERO && e.keyCode <= NINE) ||\n            (e.keyCode >= NUMPAD_ZERO && e.keyCode <= NUMPAD_NINE);\n\n        const minuses = [NUMPAD_MINUS, DASH, FF_MINUS];\n        const serviceKeys = [DELETE, BACKSPACE, TAB, ESCAPE, ENTER];\n        const arrows = [LEFT_ARROW, RIGHT_ARROW];\n        const allowedKeys =  [HOME, END].concat(arrows).concat(serviceKeys).concat(minuses);\n\n        const isIEPeriod = (e) => e.key === '.' || e.key === 'Decimal';\n        const isNotIEPeriod = (e) => e.key === '.' || e.key === ',';\n\n        // Decimal is for IE\n        const isPeriod = (e) => this._platform.EDGE || this._platform.TRIDENT\n            ? isIEPeriod(e)\n            : isNotIEPeriod(e);\n\n        if (allowedKeys.indexOf(keyCode) !== -1 ||\n            isCtrlA(event) ||\n            isCtrlC(event) ||\n            isCtrlV(event) ||\n            isCtrlX(event) ||\n            isFKey(event) ||\n            isPeriod(event)\n        ) {\n            // let it happen, don't do anything\n            return;\n        }\n        // Ensure that it is not a number and stop the keypress\n        if (event.shiftKey || !isNumber(event)) {\n            event.preventDefault();\n\n            // process steps\n            const step = event.shiftKey ? this.bigStep : this.step;\n\n            if (keyCode === UP_ARROW) {\n                this.stepUp(step);\n            }\n\n            if (keyCode === DOWN_ARROW) {\n                this.stepDown(step);\n            }\n        }\n    }\n\n    onPaste(event) {\n        let value = event.clipboardData.getData('text');\n        value = this.normalizeSplitter(value);\n\n        if (!this.isDigit(value)) {\n            event.preventDefault();\n        }\n    }\n\n    stepUp(step: number) {\n        this._elementRef.nativeElement.focus();\n        const res = stepUp(this._host.valueAsNumber, this.max, this.min, step);\n        this._host.value = res === null ? '' : res.toString();\n        this._model.update.emit(this._host.valueAsNumber);\n    }\n\n    stepDown(step: number) {\n        this._elementRef.nativeElement.focus();\n        const res = stepDown(this._host.valueAsNumber, this.max, this.min, step);\n        this._host.value = res === null ? '' : res.toString();\n        this._model.update.emit(this._host.valueAsNumber);\n    }\n\n    private normalizeSplitter(value: string): string {\n        return value ? value.replace(/,/g, '.') : value;\n    }\n\n    private isDigit(value: string): boolean {\n        return this.isFloat(value) || this.isInt(value);\n    }\n\n    private isFloat(value: string): boolean {\n        return /^-?\\d+\\.\\d+$/.test(value);\n    }\n\n    private isInt(value: string): boolean {\n        return /^-?\\d+$/.test(value);\n    }\n}\n\n@Directive({\n    selector: `input[mcInput]`,\n    exportAs: 'mcInput',\n    host: {\n        class: 'mc-input',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '(blur)': '_focusChanged(false)',\n        '(focus)': '_focusChanged(true)',\n        '(input)': '_onInput()'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McInput }]\n})\nexport class McInput extends _McInputMixinBase implements McFormFieldControl<any>, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-input';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this._uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    // tslint:disable no-reserved-keywords\n    /** Input type of the element. */\n    @Input()\n    get type(): string {\n        return this._type;\n    }\n\n    set type(value: string) {\n        this._type = value || 'text';\n        this._validateType();\n\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    // tslint:enable no-reserved-keywords\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this._inputValueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n\n    protected _uid = `mc-input-${nextUniqueId++}`;\n    protected _previousNativeValue: any;\n    protected _disabled = false;\n    protected _id: string;\n    protected _required = false;\n    protected _type = 'text';\n    protected _neverEmptyInputTypes = [\n        'date',\n        'datetime',\n        'datetime-local',\n        'month',\n        'time',\n        'week'\n    ].filter((t) => getSupportedInputTypes().has(t));\n\n    private _inputValueAccessor: { value: any };\n\n    constructor(protected _elementRef: ElementRef,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() parentForm: NgForm,\n                @Optional() parentFormGroup: FormGroupDirective,\n                defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_INPUT_VALUE_ACCESSOR) inputValueAccessor: any) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n        this._previousNativeValue = this.value;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n    }\n\n    /** Focuses the input. */\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Does some manual dirty checking on the native input `value` property. */\n    protected _dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Make sure the input is a supported type. */\n    protected _validateType() {\n        if (MC_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n            throw getMcInputUnsupportedTypeError(this._type);\n        }\n    }\n\n    /** Checks whether the input type is one of the types that are never empty. */\n    protected _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n\n    /** Checks whether the input is invalid based on the native validation. */\n    protected _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        const validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n\n        return validity && validity.badInput;\n    }\n}\n\n@Directive({\n    selector: 'input[mcInputMonospace]',\n    exportAs: 'McInputMonospace',\n    host: { class: 'mc-input_monospace' }\n})\nexport class McInputMono {\n}\n","import { Directive, forwardRef, Input, OnChanges, Provider, SimpleChanges } from '@angular/core';\nimport { AbstractControl, NG_VALIDATORS, ValidationErrors, Validator, ValidatorFn, Validators } from '@angular/forms';\n\n\nexport const MIN_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MinValidator),\n    multi: true\n};\n\n/**\n * A directive which installs the {@link MinValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `min` attribute.\n *\n * @experimental\n */\n@Directive({\n    selector: '[min][formControlName],[min][formControl],[min][ngModel]',\n    providers: [MIN_VALIDATOR],\n    host: {'[attr.min]': 'min ? min : null'}\n})\nexport class MinValidator implements Validator, OnChanges {\n\n    @Input() min: string;\n    private _validator: ValidatorFn;\n    private _onChange: () => void;\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('min' in changes) {\n            this._createValidator();\n            if (this._onChange) { this._onChange(); }\n        }\n    }\n\n    validate(c: AbstractControl): ValidationErrors | null { return this._validator(c); }\n\n    registerOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n\n    private _createValidator(): void { this._validator = Validators.min(parseInt(this.min, 10)); }\n}\n\n\nexport const MAX_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MaxValidator),\n    multi: true\n};\n\n/**\n * A directive which installs the {@link MaxValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `min` attribute.\n *\n * @experimental\n */\n@Directive({\n    selector: '[max][formControlName],[max][formControl],[max][ngModel]',\n    providers: [MAX_VALIDATOR],\n    host: {\n        '[attr.max]': 'max ? max : null'\n    }\n})\nexport class MaxValidator implements Validator,\n    OnChanges {\n\n    @Input() max: string;\n    private _validator: ValidatorFn;\n    private _onChange: () => void;\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('max' in changes) {\n            this._createValidator();\n            if (this._onChange) { this._onChange(); }\n        }\n    }\n\n    validate(c: AbstractControl): ValidationErrors | null { return this._validator(c); }\n\n    registerOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n\n    private _createValidator(): void { this._validator = Validators.max(parseInt(this.max, 10)); }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McInput, McInputMono, McNumberInput } from './input';\nimport { MaxValidator, MinValidator } from './input-number-validators';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule, FormsModule],\n    exports: [McInput, McNumberInput, McInputMono, MinValidator, MaxValidator],\n    declarations: [McInput, McNumberInput, McInputMono, MinValidator, MaxValidator ]\n})\nexport class McInputModule {\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({ providedIn: 'root' })\nexport class McDatepickerIntl {\n    /**\n     * Stream that emits whenever the labels here are changed. Use this to notify\n     * components if the labels have changed after initialization.\n     */\n    readonly changes: Subject<void> = new Subject<void>();\n\n    /** A label for the calendar popup (used by screen readers). */\n    calendarLabel: string = 'Calendar';\n\n    /** A label for the button used to open the calendar popup (used by screen readers). */\n    openCalendarLabel: string = 'Open calendar';\n\n    /** A label for the previous month button (used by screen readers). */\n    prevMonthLabel: string = 'Previous month';\n\n    /** A label for the next month button (used by screen readers). */\n    nextMonthLabel: string = 'Next month';\n\n    /** A label for the previous year button (used by screen readers). */\n    prevYearLabel: string = 'Previous year';\n\n    /** A label for the next year button (used by screen readers). */\n    nextYearLabel: string = 'Next year';\n\n    /** A label for the previous multi-year button (used by screen readers). */\n    prevMultiYearLabel: string = 'Previous 20 years';\n\n    /** A label for the next multi-year button (used by screen readers). */\n    nextMultiYearLabel: string = 'Next 20 years';\n\n    /** A label for the 'switch to month view' button (used by screen readers). */\n    switchToMonthViewLabel: string = 'Choose date';\n\n    /** A label for the 'switch to year view' button (used by screen readers). */\n    switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","// tslint:disable:no-magic-numbers\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    Output,\n    ViewEncapsulation,\n    NgZone,\n    OnChanges,\n    SimpleChanges\n} from '@angular/core';\nimport { take } from 'rxjs/operators';\n\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type McCalendarCellCssClasses = string | string[] | Set<string> | { [key: string]: any };\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class McCalendarCell {\n    constructor(\n        public value: number,\n        public displayValue: string,\n        public ariaLabel: string,\n        public enabled: boolean,\n        public cssClasses?: McCalendarCellCssClasses\n    ) {\n    }\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n    selector: '[mc-calendar-body]',\n    templateUrl: 'calendar-body.html',\n    styleUrls: ['calendar-body.css'],\n    host: {\n        class: 'mc-calendar__body',\n        role: 'grid',\n        'aria-readonly': 'true'\n    },\n    exportAs: 'mcCalendarBody',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCalendarBody implements OnChanges {\n    /** The label for the table. (e.g. \"Jan 2017\"). */\n    @Input() label: string;\n\n    /** The cells to display in the table. */\n    @Input() rows: McCalendarCell[][];\n\n    /** The value in the table that corresponds to today. */\n    @Input() todayValue: number;\n\n    /** The value in the table that is currently selected. */\n    @Input() selectedValue: number;\n\n    /** The minimum number of free cells needed to fit the label in the first row. */\n    @Input() labelMinRequiredCells: number;\n\n    /** The number of columns in the table. */\n    @Input() numCols = 7;\n\n    /** The cell number of the active cell in the table. */\n    @Input() activeCell = 0;\n\n    /**\n     * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n     * maintained even as the table resizes.\n     */\n    @Input() cellAspectRatio = 1;\n\n    /** Emits when a new value is selected. */\n    @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n    /** The number of blank cells to put at the beginning for the first row. */\n    firstRowOffset: number;\n\n    /** Padding for the individual date cells. */\n    cellPadding: string;\n\n    /** Width of an individual cell. */\n    cellWidth: string;\n\n    constructor(private elementRef: ElementRef<HTMLElement>, private ngZone: NgZone) {\n    }\n\n    cellClicked(cell: McCalendarCell): void {\n        if (cell.enabled) {\n            this.selectedValueChange.emit(cell.value);\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const columnChanges = changes.numCols;\n        // tslint:disable-next-line:no-this-assignment\n        const { rows, numCols } = this;\n\n        if (changes.rows || columnChanges) {\n            this.firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n        }\n\n        if (changes.cellAspectRatio || columnChanges || !this.cellPadding) {\n            this.cellPadding = `${this.cellAspectRatio * 50 / numCols}%`;\n        }\n\n        if (columnChanges || !this.cellWidth) {\n            this.cellWidth = `${100 / numCols}%`;\n        }\n    }\n\n    isActiveCell(rowIndex: number, colIndex: number): boolean {\n        let cellNumber = rowIndex * this.numCols + colIndex;\n\n        // Account for the fact that the first row may not have as many cells.\n        if (rowIndex) {\n            cellNumber -= this.firstRowOffset;\n        }\n\n        return cellNumber === this.activeCell;\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.ngZone.runOutsideAngular(() => {\n            this.ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n                const activeCell: HTMLElement | null =\n                    this.elementRef.nativeElement.querySelector('.mc-calendar__body_active');\n\n                if (activeCell) {\n                    activeCell.focus();\n                }\n            });\n        });\n    }\n}\n","// tslint:disable:no-magic-numbers\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Inject,\n    Input,\n    Optional,\n    Output,\n    ViewEncapsulation,\n    ViewChild\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    PAGE_DOWN,\n    PAGE_UP,\n    RIGHT_ARROW,\n    UP_ARROW,\n    SPACE\n} from '@ptsecurity/cdk/keycodes';\n\nimport { McCalendarBody, McCalendarCell, McCalendarCellCssClasses } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-month-view',\n    templateUrl: 'month-view.html',\n    exportAs: 'mcMonthView',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McMonthView<D> implements AfterContentInit {\n    /**\n     * The date to display in this month view (everything other than the month and year is ignored).\n     */\n    @Input()\n    get activeDate(): D {\n        return this._activeDate;\n    }\n\n    set activeDate(value: D) {\n        const oldActiveDate = this._activeDate;\n        const validDate =\n            this.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();\n        this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n        if (!this.hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n            this.init();\n        }\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.selectedDate = this.getDateInCurrentMonth(this._selected);\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** Function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Function that can be used to add custom CSS classes to dates. */\n    @Input() dateClass: (date: D) => McCalendarCellCssClasses;\n\n    /** Emits when a new date is selected. */\n    @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n    /** Emits when any date is selected. */\n    @Output() readonly userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Emits when any date is activated. */\n    @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** The body of calendar table */\n    @ViewChild(McCalendarBody) mcCalendarBody: McCalendarBody;\n\n    /** The label for this month (e.g. \"January 2017\"). */\n    monthLabel: string;\n\n    /** Grid of calendar cells representing the dates of the month. */\n    weeks: McCalendarCell[][];\n\n    /** The number of blank cells in the first row before the 1st of the month. */\n    firstWeekOffset: number;\n\n    /**\n     * The date of the month that the currently selected Date falls on.\n     * Null if the currently selected Date is in another month.\n     */\n    selectedDate: number | null;\n\n    /** The date of the month that today falls on. Null if today is in another month. */\n    todayDate: number | null;\n\n    /** The names of the weekdays. */\n    weekdays: { long: string; narrow: string }[];\n    private _activeDate: D;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() private dir?: Directionality\n    ) {\n\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        const firstDayOfWeek = this.dateAdapter.getFirstDayOfWeek();\n        const narrowWeekdays = this.dateAdapter.getDayOfWeekNames('narrow');\n        const longWeekdays = this.dateAdapter.getDayOfWeekNames('long');\n\n        // Rotate the labels for days of the week based on the configured first day of the week.\n        const weekdays = longWeekdays.map((long, i) => {\n            return { long, narrow: narrowWeekdays[i] };\n        });\n        this.weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n        this._activeDate = this.dateAdapter.today();\n    }\n\n    ngAfterContentInit() {\n        this.init();\n    }\n\n    /** Handles when a new date is selected. */\n    dateSelected(date: number) {\n        if (this.selectedDate !== date) {\n            const selectedYear = this.dateAdapter.getYear(this.activeDate);\n            const selectedMonth = this.dateAdapter.getMonth(this.activeDate);\n            const selectedDate = this.dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n            this.selectedChange.emit(selectedDate);\n        }\n\n        this.userSelection.emit();\n    }\n\n    /** Handles keydown events on the calendar body when calendar is in month view. */\n    handleCalendarBodyKeydown(event: KeyboardEvent): void {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n        const oldActiveDate = this._activeDate;\n        const isRtl = this.isRtl();\n\n        // tslint:disable-next-line:deprecation\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, -7);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, 7);\n                break;\n            case HOME:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate,\n                    1 - this.dateAdapter.getDate(this._activeDate));\n                break;\n            case END:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate,\n                    (this.dateAdapter.getNumDaysInMonth(this._activeDate) -\n                        this.dateAdapter.getDate(this._activeDate)));\n                break;\n            case PAGE_UP:\n                this.activeDate = event.altKey ?\n                    this.dateAdapter.addCalendarYears(this._activeDate, -1) :\n                    this.dateAdapter.addCalendarMonths(this._activeDate, -1);\n                break;\n            case PAGE_DOWN:\n                this.activeDate = event.altKey ?\n                    this.dateAdapter.addCalendarYears(this._activeDate, 1) :\n                    this.dateAdapter.addCalendarMonths(this._activeDate, 1);\n                break;\n            case ENTER:\n            case SPACE:\n                if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n                    this.dateSelected(this.dateAdapter.getDate(this._activeDate));\n                    this.userSelection.emit();\n                    // Prevent unexpected default actions such as form submission.\n                    event.preventDefault();\n                }\n\n                return;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n\n        if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n\n        this.focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n\n    /** Initializes this month view. */\n    init() {\n        this.selectedDate = this.getDateInCurrentMonth(this.selected);\n        this.todayDate = this.getDateInCurrentMonth(this.dateAdapter.today());\n        this.monthLabel =\n            this.dateAdapter.getMonthNames('short')[this.dateAdapter.getMonth(this.activeDate)];\n\n        this.monthLabel = this.monthLabel[0].toLocaleUpperCase() + this.monthLabel.substr(1);\n\n        const firstOfMonth = this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate),\n            this.dateAdapter.getMonth(this.activeDate), 1);\n        this.firstWeekOffset =\n            (DAYS_PER_WEEK + this.dateAdapter.getDayOfWeek(firstOfMonth) -\n                this.dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n        this.createWeekCells();\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.mcCalendarBody.focusActiveCell();\n    }\n\n    /** Creates McCalendarCells for the dates in this month. */\n    private createWeekCells() {\n        const daysInMonth = this.dateAdapter.getNumDaysInMonth(this.activeDate);\n        const dateNames = this.dateAdapter.getDateNames();\n\n        this.weeks = [[]];\n\n        for (let i = 0, cell = this.firstWeekOffset; i < daysInMonth; i++, cell++) {\n            if (cell === DAYS_PER_WEEK) {\n                this.weeks.push([]);\n                cell = 0;\n            }\n            const date = this.dateAdapter.createDate(\n                this.dateAdapter.getYear(this.activeDate),\n                this.dateAdapter.getMonth(this.activeDate), i + 1);\n            const enabled = this.shouldEnableDate(date);\n            const ariaLabel = this.dateAdapter.format(date, this.dateFormats.display.dateA11yLabel);\n            const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n            this.weeks[this.weeks.length - 1]\n                .push(new McCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n        }\n    }\n\n    /** Date filter for the month */\n    private shouldEnableDate(date: D): boolean {\n        return !!date &&\n            (!this.dateFilter || this.dateFilter(date)) &&\n            (!this.minDate || this.dateAdapter.compareDate(date, this.minDate) >= 0) &&\n            (!this.maxDate || this.dateAdapter.compareDate(date, this.maxDate) <= 0);\n    }\n\n    /**\n     * Gets the date in this month that the given Date falls on.\n     * Returns null if the given Date is in another month.\n     */\n    private getDateInCurrentMonth(date: D | null): number | null {\n        return date && this.hasSameMonthAndYear(date, this.activeDate) ?\n            this.dateAdapter.getDate(date) : null;\n    }\n\n    /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n    private hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n        return !!(d1 && d2 && this.dateAdapter.getMonth(d1) === this.dateAdapter.getMonth(d2) &&\n            this.dateAdapter.getYear(d1) === this.dateAdapter.getYear(d2));\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Determines whether the user has the RTL layout direction. */\n    private isRtl() {\n        return this.dir && this.dir.value === 'rtl';\n    }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ActiveDescendantKeyManager } from '@ptsecurity/cdk/a11y';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { MC_OPTION_PARENT_COMPONENT, McOptgroup, McOption } from '@ptsecurity/mosaic/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet uniqueAutocompleteIdCounter = 0;\n\nexport class McAutocompleteSelectedEvent {\n    constructor(public source: McAutocomplete, public option: McOption) {}\n}\n\n/** Default `mc-autocomplete` options that can be overridden. */\n// tslint:disable-next-line naming-convention\nexport interface McAutocompleteDefaultOptions {\n    /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n    autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mc-autocomplete`. */\nexport const MC_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<McAutocompleteDefaultOptions>('mc-autocomplete-default-options', {\n        providedIn: 'root',\n        factory: MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY\n    });\n\n// tslint:disable-next-line naming-convention\nexport function MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): McAutocompleteDefaultOptions {\n    return { autoActiveFirstOption: true };\n}\n\n@Component({\n    selector: 'mc-autocomplete',\n    exportAs: 'mcAutocomplete',\n    templateUrl: 'autocomplete.html',\n    styleUrls: ['autocomplete.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: { class: 'mc-autocomplete' },\n    providers: [\n        { provide: MC_OPTION_PARENT_COMPONENT, useExisting: McAutocomplete }\n    ]\n})\nexport class McAutocomplete implements AfterContentInit {\n    /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n    id: string = `mc-autocomplete-${uniqueAutocompleteIdCounter++}`;\n\n    /** Manages active item in option list based on key events. */\n    keyManager: ActiveDescendantKeyManager<McOption>;\n\n    /** Whether the autocomplete panel should be visible, depending on option length. */\n    showPanel: boolean = false;\n\n    @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n    @ViewChild('panel') panel: ElementRef;\n\n    @ContentChildren(McOption, { descendants: true }) options: QueryList<McOption>;\n\n    @ContentChildren(McOptgroup) optionGroups: QueryList<McOptgroup>;\n\n    /** Function that maps an option's control value to its display value in the trigger. */\n    @Input() displayWith: ((value: any) => string) | null = null;\n\n    /**\n     * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n     * match the width of its host.\n     */\n    @Input() panelWidth: string | number;\n\n    /** Event that is emitted whenever an option from the list is selected. */\n    @Output() readonly optionSelected: EventEmitter<McAutocompleteSelectedEvent> =\n        new EventEmitter<McAutocompleteSelectedEvent>();\n\n    /** Event that is emitted when the autocomplete panel is opened. */\n    @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Event that is emitted when the autocomplete panel is closed. */\n    @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n    /**\n     * Takes classes set on the host mc-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    get classList() {\n        return this._classList;\n    }\n\n    @Input('class')\n    set classList(value: string) {\n        if (value && value.length) {\n            value.split(' ')\n                .forEach((className) => this._classList[className.trim()] = true);\n\n            this.elementRef.nativeElement.className = '';\n        }\n    }\n\n    private _classList: any = {};\n\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MC_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     */\n    @Input()\n    get autoActiveFirstOption(): boolean {\n        return this._autoActiveFirstOption;\n    }\n\n    set autoActiveFirstOption(value: boolean) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n\n    private _autoActiveFirstOption: boolean;\n\n    get isOpen(): boolean {\n        return this._isOpen && this.showPanel;\n    }\n\n    set isOpen(value: boolean) {\n        this._isOpen = value;\n    }\n\n    private _isOpen: boolean = false;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        private elementRef: ElementRef<HTMLElement>,\n        @Inject(MC_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: McAutocompleteDefaultOptions\n    ) {\n        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    }\n\n    ngAfterContentInit() {\n        this.keyManager = new ActiveDescendantKeyManager<McOption>(this.options);\n        this.setVisibility();\n    }\n\n    setScrollTop(scrollTop: number): void {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n\n    getScrollTop(): number {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n\n    setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._classList['mc-autocomplete_visible'] = this.showPanel;\n        this._classList['mc-autocomplete_hidden'] = !this.showPanel;\n\n        this.changeDetectorRef.markForCheck();\n    }\n\n    emitSelectEvent(option: McOption): void {\n        const event = new McAutocompleteSelectedEvent(this, option);\n\n        this.optionSelected.emit(event);\n    }\n\n    onKeydown(event: KeyboardEvent): any {\n        this.keyManager.onKeydown(event);\n    }\n}\n\n","import { Directive, ElementRef } from '@angular/core';\n\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n    selector: '[mcAutocompleteOrigin]',\n    exportAs: 'mcAutocompleteOrigin'\n})\nexport class McAutocompleteOrigin {\n    constructor(public elementRef: ElementRef<HTMLElement>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { McOptionModule, McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McAutocompleteOrigin } from './autocomplete-origin.directive';\nimport {\n    McAutocompleteTrigger,\n    MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './autocomplete-trigger.directive';\nimport { McAutocomplete } from './autocomplete.component';\n\n\n@NgModule({\n    imports: [McOptionModule, OverlayModule, McCommonModule, CommonModule],\n    exports: [\n        McAutocomplete,\n        McOptionModule,\n        McAutocompleteTrigger,\n        McAutocompleteOrigin,\n        McCommonModule\n    ],\n    declarations: [McAutocomplete, McAutocompleteTrigger, McAutocompleteOrigin],\n    providers: [MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class McAutocompleteModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    OnDestroy,\n    ViewEncapsulation\n} from '@angular/core';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { mixinColor, mixinDisabled, CanColor, CanDisable, CanDisableCtor, CanColorCtor } from '@ptsecurity/mosaic/core';\n\n\n@Directive({\n    selector: 'button[mc-button], a[mc-button]',\n    host: {\n        '[class.mc-button]': '!isIconButton',\n        '[class.mc-icon-button]': 'isIconButton'\n    }\n})\nexport class McButtonCssStyler {\n    nativeElement: Element;\n\n    get isIconButton(): boolean {\n        return this.icons.length > 0;\n    }\n\n    private icons: HTMLElement[] = [];\n\n    constructor(elementRef: ElementRef) {\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        /**\n         * Here we had to use native selectors due to number of angular issues about ContentChildren limitations\n         * https://github.com/angular/angular/issues/16299\n         * https://github.com/angular/angular/issues/8563\n         * https://github.com/angular/angular/issues/14769\n         */\n        this.icons = Array.from(this.nativeElement.querySelectorAll('.mc-icon'));\n        this.addClassModificatorForIcons();\n    }\n\n    private addClassModificatorForIcons() {\n        const twoIcons = 2;\n\n        if (this.icons.length === 1) {\n            const iconElement = this.icons[0];\n            const COMMENT_NODE = 8;\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling && iconElement.nextSibling.nodeType !== COMMENT_NODE) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-icon-button_left');\n                }\n\n                if (iconElement.previousSibling && iconElement.previousSibling.nodeType !== COMMENT_NODE) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-icon-button_right');\n                }\n            }\n        } else if (this.icons.length === twoIcons) {\n            const firstIconElement = this.icons[0];\n            const secondIconElement = this.icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n}\n\nexport class McButtonBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {}\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McButtonMixinBase:\n    CanDisableCtor &\n    CanColorCtor &\n    typeof McButtonBase =\n        mixinColor(mixinDisabled(McButtonBase));\n\n\n@Component({\n    selector: 'button[mc-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[disabled]': 'disabled || null'\n    }\n})\nexport class McButton extends McButtonMixinBase implements OnDestroy, CanDisable, CanColor {\n    constructor(elementRef: ElementRef, private _focusMonitor: FocusMonitor) {\n        super(elementRef);\n\n        this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this.getHostElement().focus();\n    }\n\n    getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n\n\n@Component({\n    selector: 'a[mc-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[attr.tabindex]': 'disabled ? -1 : 0',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': 'haltDisabledEvents($event)'\n    }\n})\nexport class McAnchor extends McButton {\n    constructor(focusMonitor: FocusMonitor, elementRef: ElementRef) {\n        super(elementRef, focusMonitor);\n    }\n\n    haltDisabledEvents(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McButton,\n    McAnchor,\n    McButtonCssStyler\n} from './button.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McButton,\n        McAnchor,\n        McButtonCssStyler\n    ],\n    declarations: [\n        McButton,\n        McAnchor,\n        McButtonCssStyler\n    ]\n})\nexport class McButtonModule {}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    ViewEncapsulation,\n    ViewChild\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { McButton } from '@ptsecurity/mosaic/button';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/**\n * Provider Expression that allows mc-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McButtonToggleGroup),\n    multi: true\n};\n\n/** Change event object emitted by MсButtonToggle. */\nexport class McButtonToggleChange {\n    constructor(\n        /** The MсButtonToggle that emits the event. */\n        public source: McButtonToggle,\n        /** The value assigned to the MсButtonToggle. */\n        public value: any) {\n    }\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n    selector: 'mc-button-toggle-group',\n    providers: [MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n    host: {\n        role: 'group',\n        class: 'mc-button-toggle-group',\n        '[class.mc-button-toggle-vertical]': 'vertical'\n    },\n    exportAs: 'mcButtonToggleGroup'\n})\nexport class McButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n\n    /** Whether the toggle group is vertical. */\n    @Input()\n    get vertical(): boolean {\n        return this._vertical;\n    }\n\n    set vertical(value: boolean) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n\n    /** Value of the toggle group. */\n    @Input()\n    get value(): any {\n        const selected = this.selectionModel ? this.selectionModel.selected : [];\n\n        if (this.multiple) {\n            return selected.map((toggle) => toggle.value);\n        }\n\n        return selected[0] ? selected[0].value : undefined;\n    }\n\n    set value(newValue: any) {\n        this.setSelectionByValue(newValue);\n        this.valueChange.emit(this.value);\n    }\n\n    /** Selected button toggles in the group. */\n    get selected(): any {\n        const selected = this.selectionModel.selected;\n\n        return this.multiple ? selected : (selected[0] || null);\n    }\n\n    /** Whether multiple button toggles can be selected. */\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    /** Child button toggle buttons. */\n    @ContentChildren(forwardRef(() => McButtonToggle)) buttonToggles: QueryList<McButtonToggle>;\n\n    /** Whether multiple button toggle group is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        if (!this.buttonToggles) {\n            return;\n        }\n\n        this.buttonToggles.forEach((toggle) => toggle.markForCheck());\n    }\n\n    /**\n     * Event that emits whenever the value of the group changes.\n     * Used to facilitate two-way data binding.\n     * @docs-private\n     */\n    @Output() readonly valueChange = new EventEmitter<any>();\n\n    /** Event emitted when the group's value changes. */\n    @Output() readonly change: EventEmitter<McButtonToggleChange> =\n        new EventEmitter<McButtonToggleChange>();\n    private _vertical = false;\n    private _multiple = false;\n    private _disabled = false;\n    private selectionModel: SelectionModel<McButtonToggle>;\n\n    /**\n     * Reference to the raw value that the consumer tried to assign. The real\n     * value will exclude any values from this one that don't correspond to a\n     * toggle. Useful for the cases where the value is assigned before the toggles\n     * have been initialized or at the same that they're being swapped out.\n     */\n    private rawValue: any;\n\n    constructor(private _changeDetector: ChangeDetectorRef) {}\n\n    /**\n     * The method to be called in order to update ngModel.\n     * Now `ngModel` binding is not supported in multiple selection mode.\n     */\n    // tslint:disable-next-line:no-empty\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n    // tslint:disable-next-line:no-empty\n    onTouched: () => any = () => {};\n\n    ngOnInit() {\n        this.selectionModel = new SelectionModel<McButtonToggle>(this.multiple, undefined, false);\n    }\n\n    ngAfterContentInit() {\n        this.selectionModel.select(...this.buttonToggles.filter((toggle) => toggle.checked));\n        this.disabled = this._disabled;\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value Value to be set to the model.\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        const selected = this.selected;\n        const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n        const event = new McButtonToggleChange(source, this.value);\n        this.controlValueAccessorChangeFn(event.value);\n        this.change.emit(event);\n    }\n\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param toggle Toggle to be synced.\n     * @param select Whether the toggle should be selected.\n     * @param isUserInput Whether the change was a result of a user interaction.\n     */\n    syncButtonToggle(toggle: McButtonToggle, select: boolean, isUserInput = false) {\n        // Deselect the currently-selected toggle, if we're in single-selection\n        // mode and the button being toggled isn't selected at the moment.\n        if (!this.multiple && this.selected && !toggle.checked) {\n            (this.selected as McButtonToggle).checked = false;\n        }\n\n        if (select) {\n            this.selectionModel.select(toggle);\n        } else {\n            this.selectionModel.deselect(toggle);\n        }\n\n        // Only emit the change event for user input.\n        if (isUserInput) {\n            this.emitChangeEvent();\n        }\n\n        // Note: we emit this one no matter whether it was a user interaction, because\n        // it is used by Angular to sync up the two-way data binding.\n        this.valueChange.emit(this.value);\n    }\n\n    /** Checks whether a button toggle is selected. */\n    isSelected(toggle: McButtonToggle) {\n        return this.selectionModel.isSelected(toggle);\n    }\n\n    /** Determines whether a button toggle should be checked on init. */\n    isPrechecked(toggle: McButtonToggle) {\n        if (this.rawValue === undefined) {\n            return false;\n        }\n\n        if (this.multiple && Array.isArray(this.rawValue)) {\n            return this.rawValue.some((value) => toggle.value != null && value === toggle.value);\n        }\n\n        return toggle.value === this.rawValue;\n    }\n\n    /** Updates the selection state of the toggles in the group based on a value. */\n    private setSelectionByValue(value: any | any[]) {\n        this.rawValue = value;\n\n        if (!this.buttonToggles) {\n            return;\n        }\n\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw Error('Value must be an array in multiple-selection mode.');\n            }\n\n            this.clearSelection();\n            value.forEach((currentValue: any) => this.selectValue(currentValue));\n        } else {\n            this.clearSelection();\n            this.selectValue(value);\n        }\n    }\n\n    /** Clears the selected toggles. */\n    private clearSelection() {\n        this.selectionModel.clear();\n        this.buttonToggles.forEach((toggle) => toggle.checked = false);\n    }\n\n    /** Selects a value if there's a toggle that corresponds to it. */\n    private selectValue(value: any) {\n        const correspondingOption = this.buttonToggles.find((toggle) => {\n            return toggle.value != null && toggle.value === value;\n        });\n\n        if (correspondingOption) {\n            correspondingOption.checked = true;\n            this.selectionModel.select(correspondingOption);\n        }\n    }\n}\n\n/** Single button inside of a toggle group. */\n@Component({\n    selector: 'mc-button-toggle',\n    template: `\n        <button\n            mc-button\n            type=\"button\"\n            [disabled]=\"disabled\"\n            [attr.tabindex]=\"disabled ? -1 : tabIndex\"\n            (click)=\"onToggleClick()\">\n            <ng-content></ng-content>\n        </button>\n    `,\n    styleUrls: ['button-toggle.css'],\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcButtonToggle',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[class.mc-button-toggle-standalone]': '!buttonToggleGroup',\n        '[class.mc-button-toggle-checked]': 'checked',\n        class: 'mc-button-toggle',\n        // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n        // but can still receive focus from things like cdkFocusInitial.\n        '[attr.tabindex]': '-1',\n        '[attr.disabled]': 'disabled || null',\n        '(focus)': 'focus()'\n    }\n})\nexport class McButtonToggle implements OnInit, OnDestroy {\n\n    /** Whether the button is checked. */\n    @Input()\n    get checked(): boolean {\n        return this.buttonToggleGroup ? this.buttonToggleGroup.isSelected(this) : this._checked;\n    }\n\n    set checked(value: boolean) {\n        const newValue = coerceBooleanProperty(value);\n\n        if (newValue !== this._checked) {\n            this._checked = newValue;\n\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup.syncButtonToggle(this, this._checked);\n            }\n\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    // tslint:disable-next-line:no-reserved-keywords\n    type: ToggleType;\n\n    @ViewChild(McButton) mcButton: McButton;\n\n    /** McButtonToggleGroup reads this to assign its own value. */\n    @Input() value: any;\n\n    /** Tabindex for the toggle. */\n    @Input() tabIndex: number | null;\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n    }\n    set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n\n    /** Event emitted when the group value changes. */\n    @Output() readonly change: EventEmitter<McButtonToggleChange> =\n        new EventEmitter<McButtonToggleChange>();\n\n    private isSingleSelector = false;\n    private _checked = false;\n    private _disabled: boolean = false;\n\n    constructor(\n        @Optional() public buttonToggleGroup: McButtonToggleGroup,\n        private changeDetectorRef: ChangeDetectorRef,\n        private focusMonitor: FocusMonitor,\n        private element: ElementRef\n    ) {}\n\n    ngOnInit() {\n        this.isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n        this.type = this.isSingleSelector ? 'radio' : 'checkbox';\n\n        if (this.buttonToggleGroup && this.buttonToggleGroup.isPrechecked(this)) {\n            this.checked = true;\n        }\n\n        this.focusMonitor.monitor(this.element.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        const group = this.buttonToggleGroup;\n\n        this.focusMonitor.stopMonitoring(this.element.nativeElement);\n\n        // Remove the toggle from the selection once it's destroyed. Needs to happen\n        // on the next tick in order to avoid \"changed after checked\" errors.\n        if (group && group.isSelected(this)) {\n            Promise.resolve().then(() => group.syncButtonToggle(this, false));\n        }\n    }\n\n    /** Focuses the button. */\n    focus(): void {\n        this.element.nativeElement.focus();\n    }\n\n    /** Checks the button toggle due to an interaction with the underlying native button. */\n    onToggleClick() {\n        if (this.disabled) {\n            return;\n        }\n\n        const newChecked = this.isSingleSelector ? true : !this._checked;\n\n        if (newChecked !== this._checked) {\n            this._checked = newChecked;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup.syncButtonToggle(this, this._checked, true);\n                this.buttonToggleGroup.onTouched();\n            }\n        }\n        // Emit a change event when it's the single selector\n        this.change.emit(new McButtonToggleChange(this, this.value));\n    }\n\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When the group value changes, the button will not be notified.\n        // Use `markForCheck` to explicit update button toggle's status.\n        this.changeDetectorRef.markForCheck();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { McButtonModule } from '@ptsecurity/mosaic/button';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McButtonToggle, McButtonToggleGroup } from './button-toggle.component';\n\n\n@NgModule({\n    imports: [McCommonModule, McButtonModule],\n    exports: [McCommonModule, McButtonToggleGroup, McButtonToggle],\n    declarations: [McButtonToggleGroup, McButtonToggle]\n})\nexport class McButtonToggleModule {}\n","import {\n    Output,\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef, Input,\n    OnDestroy, EventEmitter,\n    ViewEncapsulation, HostBinding\n} from '@angular/core';\n\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { SPACE } from '@ptsecurity/cdk/keycodes';\n\n\n@Component({\n    selector: 'mc-card',\n    templateUrl: './card.component.html',\n    styleUrls: ['./card.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['color'],\n    host: {\n        class: 'mc-card',\n        '[class.mc-card_readonly]': 'readonly',\n        '[class.mc-card_selected]': 'selected',\n        '(keydown)': 'onKeyDown($event)',\n        '(click)': 'onClick($event)'\n    }\n})\nexport class McCard implements OnDestroy {\n    get tabIndex(): number | null {\n        return this.readonly ? null : this._tabIndex;\n    }\n\n    @HostBinding('attr.tabIndex')\n    @Input()\n    set tabIndex(value: number | null) {\n        this._tabIndex = value;\n    }\n\n    @Input()\n    readonly = false;\n\n    @Input()\n    selected = false;\n\n    @Output()\n    selectedChange = new EventEmitter<boolean>();\n\n    private _tabIndex: number | null = 0;\n\n    constructor(private _elementRef: ElementRef, private _focusMonitor: FocusMonitor) {\n        this._focusMonitor.monitor(this._elementRef.nativeElement, false);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this.hostElement.focus();\n    }\n\n    onClick($event: MouseEvent) {\n        if (!this.readonly) {\n            $event.stopPropagation();\n\n            this.selectedChange.emit(!this.selected);\n        }\n    }\n\n    private get hostElement() {\n        return this._elementRef.nativeElement;\n    }\n\n    onKeyDown($event: KeyboardEvent) {\n        switch ($event.keyCode) {\n            case SPACE:\n                if (!this.readonly) {\n                    $event.preventDefault();\n                    this.selectedChange.emit(!this.selected);\n                }\n                break;\n            default:\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McCard\n} from './card.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [McCard],\n    declarations: [McCard]\n})\nexport class McCardModule {}\n","import { InjectionToken } from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type McCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MC_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<McCheckboxClickAction>('mc-checkbox-click-action');\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","\nexport function isBoolean(val: any): val is boolean { return typeof val === 'boolean'; }\n\nexport function toBoolean(value: any): boolean {\n    return value != null && `${value}` !== 'false';\n}\n","import { NgModule, InjectionToken, Optional, Inject, isDevMode } from '@angular/core';\nimport { BidiModule } from '@ptsecurity/cdk/bidi';\n\n\n// Injection token that configures whether the Mosaic sanity checks are enabled.\nexport const MC_SANITY_CHECKS = new InjectionToken<boolean>('mc-sanity-checks', {\n    providedIn: 'root',\n    factory: MC_SANITY_CHECKS_FACTORY\n});\n\nexport function MC_SANITY_CHECKS_FACTORY(): boolean {\n    return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Mosaic\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., McTabsModule).\n */\n@NgModule({\n    imports: [ BidiModule ],\n    exports: [ BidiModule ]\n})\nexport class McCommonModule {\n    // Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n    private _hasDoneGlobalChecks = false;\n\n    // Reference to the global `document` object.\n    private _document = typeof document === 'object' && document ? document : null;\n\n    // Reference to the global 'window' object.\n    private _window = typeof window === 'object' && window ? window : null;\n\n    constructor(@Optional() @Inject(MC_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n        if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n            this._checkDoctypeIsDefined();\n            this._checkThemeIsPresent();\n            this._hasDoneGlobalChecks = true;\n        }\n    }\n\n    // Whether any sanity checks are enabled\n    private _areChecksEnabled(): boolean {\n        return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n    }\n\n    // Whether the code is running in tests.\n    private _isTestEnv() {\n        // tslint:disable-next-line\n        return this._window && (this._window['__karma__'] || this._window['jasmine']);\n    }\n\n    private _checkDoctypeIsDefined(): void {\n        if (this._document && !this._document.doctype) {\n            console.warn(\n                'Current document does not have a doctype. This may cause ' +\n                'some Mosaic components not to behave as expected.'\n            );\n        }\n    }\n\n    private _checkThemeIsPresent(): void {\n        if (this._document && typeof getComputedStyle === 'function') {\n            const testElement = this._document.createElement('div');\n\n            testElement.classList.add('mc-theme-loaded-marker');\n            this._document.body.appendChild(testElement);\n\n            const computedStyle = getComputedStyle(testElement);\n\n            // In some situations, the computed style of the test element can be null. For example in\n            // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n            // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n            if (computedStyle && computedStyle.display !== 'none') {\n                console.warn(\n                    'Could not find Mosaic core theme. Most Mosaic ' +\n                    'components may not work as expected. For more info refer ' +\n                    'to the theming guide: link there'\n                );\n            }\n\n            this._document.body.removeChild(testElement);\n        }\n    }\n}\n","import { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanDisable {\n    disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n    return class extends base {\n        get disabled() {\n            return this._disabled;\n        }\n\n        set disabled(value: any) {\n            this._disabled = coerceBooleanProperty(value);\n        }\n\n        private _disabled: boolean = false;\n\n        constructor(...args: any[]) {\n            // tslint:disable-next-line\n            super(...args);\n        }\n    };\n}\n","import { ElementRef } from '@angular/core';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanColor {\n    color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\nexport interface HasElementRef {\n    _elementRef: ElementRef;\n}\n\nexport enum ThemePalette {\n    Primary = 'primary',\n    Second = 'second',\n    Error = 'error',\n    Default = 'second',\n    Empty = ''\n}\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T,\n    defaultColor: ThemePalette = ThemePalette.Default\n): CanColorCtor & T {\n    return class extends base {\n\n        private _color: ThemePalette;\n\n        get color(): ThemePalette {\n            return this._color;\n        }\n\n        set color(value: ThemePalette) {\n            const colorPalette = value || defaultColor;\n\n            if (colorPalette !== this._color) {\n                if (this._color) {\n                    this._elementRef.nativeElement.classList.remove(`mc-${this._color}`);\n                }\n\n                if (colorPalette) {\n                    this._elementRef.nativeElement.classList.add(`mc-${colorPalette}`);\n                }\n\n                this._color = colorPalette;\n            }\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n\n            this.color = defaultColor;\n        }\n    };\n}\n\n","import { Constructor } from './constructor';\nimport { CanDisable } from './disabled';\n\n\nexport interface HasTabIndex {\n    tabIndex: number;\n}\n\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n// Mixin to augment a directive with a `tabIndex` property.\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0): HasTabIndexCtor & T {\n    return class extends base {\n        get tabIndex(): number {\n            return this.disabled ? -1 : this._tabIndex;\n        }\n\n        set tabIndex(value: number) {\n            this._tabIndex = value != null ? value : defaultTabIndex;\n        }\n\n        private _tabIndex: number = defaultTabIndex;\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n    };\n}\n","import { FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { Subject } from 'rxjs';\n\nimport { ErrorStateMatcher } from '../error/error-options';\n\nimport { Constructor } from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n\n    readonly stateChanges: Subject<void>;\n\n    errorState: boolean;\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState();\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n    parentFormGroup: FormGroupDirective;\n    parentForm: NgForm;\n    defaultErrorStateMatcher: ErrorStateMatcher;\n    ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T): CanUpdateErrorStateCtor & T {\n    return class extends base {\n        /** Whether the component is in an error state. */\n        errorState: boolean = false;\n\n        /**\n         * Stream that emits whenever the state of the input changes such that the wrapping\n         * `MatFormField` needs to run change detection.\n         */\n        readonly stateChanges = new Subject<void>();\n\n        errorStateMatcher: ErrorStateMatcher;\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n\n        updateErrorState() {\n            const oldState = this.errorState;\n            const parent = this.parentFormGroup || this.parentForm;\n            const matcher = this.errorStateMatcher || this.defaultErrorStateMatcher;\n            const control = this.ngControl ? this.ngControl.control as FormControl : null;\n            const newState = matcher.isErrorState(control, parent);\n\n            if (newState !== oldState) {\n                this.errorState = newState;\n                this.stateChanges.next();\n            }\n        }\n    };\n}\n","import {\n    AfterViewChecked,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { ENTER, SPACE } from '@ptsecurity/cdk/keycodes';\nimport { Subject } from 'rxjs';\n\nimport { McOptgroup } from './optgroup';\n\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet uniqueIdCounter = 0;\n\n/** Event object emitted by McOption when selected or deselected. */\nexport class McOptionSelectionChange {\n    constructor(public source: McOption, public isUserInput = false) {}\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\n// tslint:disable-next-line: naming-convention\nexport interface McOptionParentComponent {\n    multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MC_OPTION_PARENT_COMPONENT =\n    new InjectionToken<McOptionParentComponent>('MC_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mc-select>` element.\n */\n@Component({\n    selector: 'mc-option',\n    exportAs: 'mcOption',\n    host: {\n        '[attr.tabindex]': 'getTabIndex()',\n        class: 'mc-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-option-multiple]': 'multiple',\n        '[class.mc-active]': 'active',\n        '[class.mc-disabled]': 'disabled',\n        '[id]': 'id',\n\n        '(click)': 'selectViaInteraction()',\n        '(keydown)': 'handleKeydown($event)'\n    },\n    styleUrls: ['./option.css'],\n    templateUrl: './option.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McOption implements AfterViewChecked, OnDestroy {\n    /** The form value of the option. */\n    @Input() value: any;\n\n    /** Event emitted when the option is selected or deselected. */\n    // tslint:disable-next-line:no-output-on-prefix\n    @Output() readonly onSelectionChange = new EventEmitter<McOptionSelectionChange>();\n\n    /** Emits when the state of the option changes and any parents have to be notified. */\n    readonly stateChanges = new Subject<void>();\n\n    /**\n     * The displayed value of the option. It is necessary to show the selected option in the\n     * select's trigger.\n     */\n    get viewValue(): string {\n        // TODO(kara): Add input property alternative for node envs.\n        return (this.getHostElement().textContent || '').trim();\n    }\n\n    /** Whether the wrapping component is in multiple selection mode. */\n    get multiple() {\n        return this.parent && this.parent.multiple;\n    }\n\n    get id(): string {\n        return this._id;\n    }\n\n    private _id = `mc-option-${uniqueIdCounter++}`;\n\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    private _selected = false;\n\n    @Input()\n    get disabled() {\n        return (this.group && this.group.disabled) || this._disabled;\n    }\n\n    set disabled(value: any) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    private _disabled = false;\n\n    /**\n     * Whether or not the option is currently active and ready to be selected.\n     * An active option displays styles as if it is focused, but the\n     * focus is actually retained somewhere else. This comes in handy\n     * for components like autocomplete where focus must remain on the input.\n     */\n    get active(): boolean {\n        return this._active;\n    }\n\n    private _active = false;\n\n    private mostRecentViewValue = '';\n\n    constructor(\n        private readonly element: ElementRef,\n        private readonly changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_OPTION_PARENT_COMPONENT) private readonly parent: McOptionParentComponent,\n        @Optional() readonly group: McOptgroup\n    ) {}\n\n    ngAfterViewChecked() {\n        // Since parent components could be using the option's label to display the selected values\n        // (e.g. `mc-select`) and they don't have a way of knowing if the option's label has changed\n        // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n        // relatively cheap, however we still limit them only to selected options in order to avoid\n        // hitting the DOM too often.\n        if (this._selected) {\n            const viewValue = this.viewValue;\n\n            if (viewValue !== this.mostRecentViewValue) {\n                this.mostRecentViewValue = viewValue;\n                this.stateChanges.next();\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n    }\n\n    select(): void {\n        if (!this._selected) {\n            this._selected = true;\n\n            this.changeDetectorRef.markForCheck();\n            this.emitSelectionChangeEvent();\n        }\n    }\n\n    deselect(): void {\n        if (this._selected) {\n            this._selected = false;\n\n            this.changeDetectorRef.markForCheck();\n            this.emitSelectionChangeEvent();\n        }\n    }\n\n    focus(): void {\n        const element = this.getHostElement();\n\n        if (typeof element.focus === 'function') {\n            element.focus();\n        }\n    }\n\n    /**\n     * This method sets display styles on the option to make it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setActiveStyles(): void {\n        if (!this._active) {\n            this._active = true;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    /**\n     * This method removes display styles on the option that made it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setInactiveStyles(): void {\n        if (this._active) {\n            this._active = false;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel(): string {\n        return this.viewValue;\n    }\n\n    /** Ensures the option is selected when activated from the keyboard. */\n    handleKeydown(event: KeyboardEvent): void {\n        // tslint:disable-next-line\n        if (event.keyCode === ENTER || event.keyCode === SPACE) {\n            this.selectViaInteraction();\n\n            // Prevent the page from scrolling down and form submits.\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * `Selects the option while indicating the selection came from the user. Used to\n     * determine if the select's view -> model callback should be invoked.`\n     */\n    selectViaInteraction(): void {\n        if (!this.disabled) {\n            this._selected = this.multiple ? !this._selected : true;\n\n            this.changeDetectorRef.markForCheck();\n            this.emitSelectionChangeEvent(true);\n        }\n    }\n\n    getTabIndex(): string {\n        return this.disabled ? '-1' : '0';\n    }\n\n    getHostElement(): HTMLElement {\n        return this.element.nativeElement;\n    }\n\n    /** Emits the selection change event. */\n    private emitSelectionChangeEvent(isUserInput = false): void {\n        this.onSelectionChange.emit(new McOptionSelectionChange(this, isUserInput));\n    }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function countGroupLabelsBeforeOption(\n    optionIndex: number,\n    options: QueryList<McOption>,\n    optionGroups: QueryList<McOptgroup>\n): number {\n\n    if (optionGroups.length) {\n        const optionsArray = options.toArray();\n        const groups = optionGroups.toArray();\n\n        let groupCounter = 0;\n\n        for (let i = 0; i < optionIndex + 1; i++) {\n            if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n                groupCounter++;\n            }\n        }\n\n        return groupCounter;\n    }\n\n    return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function getOptionScrollPosition(\n    optionIndex: number,\n    optionHeight: number,\n    currentScrollPosition: number,\n    panelHeight: number\n): number {\n    const optionOffset = optionIndex * optionHeight;\n\n    if (optionOffset < currentScrollPosition) { return optionOffset; }\n\n    if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n        return Math.max(0, optionOffset - panelHeight + optionHeight);\n    }\n\n    return currentScrollPosition;\n}\n\n","import { ConnectionPositionPair } from '@ptsecurity/cdk/overlay';\n\n\nexport const POSITION_MAP: { [key: string]: ConnectionPositionPair } = {\n    top         : {\n        originX : 'center',\n        originY : 'top',\n        overlayX: 'center',\n        overlayY: 'bottom'\n    },\n    topCenter   : {\n        originX : 'center',\n        originY : 'top',\n        overlayX: 'center',\n        overlayY: 'bottom',\n        offsetX : undefined,\n        offsetY : undefined\n    },\n    topLeft     : {\n        originX : 'start',\n        originY : 'top',\n        overlayX: 'start',\n        overlayY: 'bottom',\n        offsetX : undefined,\n        offsetY : undefined\n    },\n    topRight    : {\n        originX : 'end',\n        originY : 'top',\n        overlayX: 'end',\n        overlayY: 'bottom',\n        offsetX : undefined,\n        offsetY : undefined\n    },\n    right       : {\n        originX : 'end',\n        originY : 'center',\n        overlayX: 'start',\n        overlayY: 'center'\n    },\n    rightTop    : {\n        originX : 'end',\n        originY : 'top',\n        overlayX: 'start',\n        overlayY: 'top',\n        offsetX : undefined,\n        offsetY : undefined\n    },\n    rightBottom : {\n        originX : 'end',\n        originY : 'bottom',\n        overlayX: 'start',\n        overlayY: 'bottom',\n        offsetX : undefined,\n        offsetY : undefined\n    },\n    bottom      : {\n        originX : 'center',\n        originY : 'bottom',\n        overlayX: 'center',\n        overlayY: 'top'\n    },\n    bottomCenter: {\n        originX : 'center',\n        originY : 'bottom',\n        overlayX: 'center',\n        overlayY: 'top'\n    },\n    bottomLeft  : {\n        originX : 'start',\n        originY : 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    bottomRight : {\n        originX : 'end',\n        originY : 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n    },\n    left        : {\n        originX : 'start',\n        originY : 'center',\n        overlayX: 'end',\n        overlayY: 'center'\n    },\n    leftTop     : {\n        originX : 'start',\n        originY : 'top',\n        overlayX: 'end',\n        overlayY: 'top'\n    },\n    leftBottom  : {\n        originX : 'start',\n        originY : 'bottom',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    }\n};\n\nexport const DEFAULT_4_POSITIONS = _objectValues([\n    POSITION_MAP.top, POSITION_MAP.right, POSITION_MAP.bottom, POSITION_MAP.left\n]);\n\nfunction arrayMap<T, S>(array: T[], iteratee: (item: T, index: number, arr: T[]) => S): S[] {\n    let index = -1;\n    const length = array == null ? 0 : array.length;\n    const result = Array(length);\n\n    while (++index < length) {\n        result[ index ] = iteratee(array[ index ], index, array);\n    }\n\n    return result;\n}\nfunction baseValues<T>(object: { [key: string]: T } | T[], props: string[]): T[] {\n    return arrayMap(props,  (key) => {\n        return object[ key ];\n    });\n}\nfunction _objectValues<T>(object: { [key: string]: T } | T[]): T[] {\n    return object == null ? [] : baseValues(object, Object.keys(object));\n}\n","/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMcSelectDynamicMultipleError(): Error {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMcSelectNonArrayValueError(): Error {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMcSelectNonFunctionValueError(): Error {\n    return Error('`compareWith` must be a function.');\n}\n","export function getMcFormFieldMissingControlError(): Error {\n  return Error('mc-form-field must contain a McFormFieldControl.');\n}\n","export function getMcInputUnsupportedTypeError(inputType: string): Error {\n    return Error(`Input type \"${inputType}\" isn't supported by mcInput.`);\n}\n","/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n    return Error(\n        `McDatepicker: No provider found for ${provider}. You must import one of the existing ` +\n        `modules at your application root or provide a custom implementation or use exists ones.`);\n}\n","export function throwMcDropdownMissingError() {\n    throw Error(`mcDropdownTriggerFor: must pass in an mc-dropdown instance.\n    Example:\n      <mc-dropdown #dropdown=\"mcDropdown\"></mc-dropdown>\n      <button [mcDropdownTriggerFor]=\"dropdown\"></button>`);\n}\n\n/**\n * Throws an exception for the case when dropdown's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMcDropdownInvalidPositionX() {\n    throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mc-dropdown xPosition=\"before\" #dropdown=\"mcDropdown\"></mc-dropdown>`);\n}\n\n/**\n * Throws an exception for the case when dropdown's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMcDropdownInvalidPositionY() {\n    throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mc-dropdown yPosition=\"above\" #dropdown=\"mcDropdown\"></mc-dropdown>`);\n}\n","import { NgModule, Directive, ElementRef, QueryList } from '@angular/core';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(McLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n    selector: '[mc-line], [mcLine]',\n    host: { class: 'mc-line' }\n})\nexport class McLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class McLineSetter {\n    constructor(private _lines: QueryList<McLine>, private _element: ElementRef) {\n        this._setLineClass(this._lines.length);\n\n        this._lines.changes.subscribe(() => {\n            this._setLineClass(this._lines.length);\n        });\n    }\n\n    private _setLineClass(count: number): void {\n        this._resetClasses();\n        if (count === 2 || count === 3) {\n            this._setClass(`mc-${count}-line`, true);\n        } else if (count > 3) {\n            this._setClass(`mc-multi-line`, true);\n        }\n    }\n\n    private _resetClasses(): void {\n        this._setClass('mc-2-line', false);\n        this._setClass('mc-3-line', false);\n        this._setClass('mc-multi-line', false);\n    }\n\n    private _setClass(className: string, isAdd: boolean): void {\n        if (isAdd) {\n            this._element.nativeElement.classList.add(className);\n        } else {\n            this._element.nativeElement.classList.remove(className);\n        }\n    }\n}\n\n@NgModule({\n    imports: [],\n    exports: [McLine],\n    declarations: [McLine]\n})\nexport class McLineModule {}\n","import { Injectable } from '@angular/core';\nimport { FormGroupDirective, NgForm, FormControl } from '@angular/forms';\n\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n    }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({ providedIn: 'root' })\nexport class ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n    }\n}\n","import { Component, ViewEncapsulation, Input, ChangeDetectionStrategy } from '@angular/core';\n\n\nexport type McPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mc-primary .mc-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mc-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'mc-pseudo-checkbox',\n    styleUrls: ['pseudo-checkbox.css'],\n    templateUrl: 'pseudo-checkbox.partial.html',\n    host: {\n        class: 'mc-pseudo-checkbox',\n        '[class.mc-indeterminate]': 'state === \"indeterminate\"',\n        '[class.mc-checked]': 'state === \"checked\"',\n        '[class.mc-disabled]': 'disabled'\n    }\n})\nexport class McPseudoCheckbox {\n    @Input() state: McPseudoCheckboxState = 'unchecked';\n\n    @Input() disabled: boolean = false;\n}\n","import { NgModule } from '@angular/core';\n\nimport { McPseudoCheckbox } from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n    exports: [McPseudoCheckbox],\n    declarations: [McPseudoCheckbox]\n})\nexport class McPseudoCheckboxModule {}\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class McMeasureScrollbarService {\n\n    get scrollBarWidth(): number {\n        if (this._scrollbarWidth) {\n            return this._scrollbarWidth;\n        }\n        this.initScrollBarWidth();\n\n        return this._scrollbarWidth;\n    }\n\n    private _scrollbarWidth: number;\n    private scrollbarMeasure = {\n        position: 'absolute',\n        top: '-9999px',\n        width: '50px',\n        height: '50px',\n        overflow: 'scroll'\n    };\n\n    constructor(\n        @Inject(DOCUMENT) private document: any\n    ) {\n        this.initScrollBarWidth();\n    }\n\n    initScrollBarWidth() {\n        const scrollDiv = this.document.createElement('div');\n\n        // tslint:disable-next-line\n        for (const scrollProp in this.scrollbarMeasure) {\n            if (this.scrollbarMeasure.hasOwnProperty(scrollProp)) {\n                scrollDiv.style[scrollProp] = this.scrollbarMeasure[scrollProp];\n            }\n        }\n\n        this.document.body.appendChild(scrollDiv);\n\n        const width = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n\n        this.document.body.removeChild(scrollDiv);\n        this._scrollbarWidth = width;\n    }\n}\n","import { Component, ViewEncapsulation, Input, ChangeDetectionStrategy } from '@angular/core';\n\nimport { mixinDisabled, CanDisable, CanDisableCtor } from '../common-behaviors/index';\n\n\n// Boilerplate for applying mixins to McOptgroup.\n/** @docs-private */\nexport class McOptgroupBase {}\n\nexport const McOptgroupMixinBase: CanDisableCtor & typeof McOptgroupBase = mixinDisabled(McOptgroupBase);\n\n// Counter for unique group ids.\nlet uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mc-option`.\n */\n@Component({\n    selector: 'mc-optgroup',\n    exportAs: 'mcOptgroup',\n    templateUrl: 'optgroup.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['disabled'],\n    styleUrls: ['optgroup.css'],\n    host: {\n        class: 'mc-optgroup',\n        role: 'group',\n        '[class.mc-optgroup-disabled]': 'disabled',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-labelledby]': 'labelId'\n    }\n})\nexport class McOptgroup extends McOptgroupMixinBase implements CanDisable {\n    /** Label for the option group. */\n    @Input() label: string;\n\n    /** Unique id for the underlying label. */\n    labelId: string = `mc-optgroup-label-${uniqueOptgroupIdCounter++}`;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McPseudoCheckboxModule } from '../selection/index';\n\nimport { McOptgroup } from './optgroup';\nimport { McOption } from './option';\n\n\n@NgModule({\n    imports: [CommonModule, McPseudoCheckboxModule],\n    exports: [McOption, McOptgroup],\n    declarations: [McOption, McOptgroup]\n})\nexport class McOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","import { InjectionToken } from '@angular/core';\n\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MC_LABEL_GLOBAL_OPTIONS =\n    new InjectionToken<LabelOptions>('mc-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n    /**\n     * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n     * Default behavior is assumed to be `auto`.\n     */\n    float?: FloatLabelType;\n}\n","import {\n    animate,\n    state,\n    style,\n    transition,\n    trigger,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n\nexport const fadeAnimation: AnimationTriggerMetadata =  trigger('fadeAnimation', [\n    state('void', style({ opacity: 0 })),\n    state('true', style({ opacity: 1 })),\n    state('false', style({ opacity: 0 })),\n    transition('* => true', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => void', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)'))\n]);\n","export enum AnimationCurves {\n    StandardCurve = 'cubic-bezier(0.4,0.0,0.2,1)',\n    DecelerationCurve = 'cubic-bezier(0.0,0.0,0.2,1)',\n    AccelerationCurve = 'cubic-bezier(0.4,0.0,1,1)',\n    SharpCurve = 'cubic-bezier(0.4,0.0,0.6,1)'\n}\n","import {\n    animate,\n    AnimationTriggerMetadata,\n    state,\n    style,\n    transition,\n    trigger,\n    query,\n    animateChild,\n    group\n} from '@angular/animations';\n\n\n/**\n * The following are all the animations for the mc-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mc-select animation.\n */\nexport const mcSelectAnimations: {\n    readonly transformPanel: AnimationTriggerMetadata;\n    readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0)',\n            minWidth: '100%',\n            opacity: 0\n        })),\n        transition('void => *', group([\n            query('@fadeInContent', animateChild()),\n            animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n        ])),\n        transition('* => void', [\n            animate('250ms 100ms linear', style({ opacity: 0 }))\n        ])\n    ]),\n\n    /**\n     * This animation fades in the background color and text content of the\n     * select's options. It is time delayed to occur 100ms after the overlay\n     * panel has transformed in.\n     */\n    fadeInContent: trigger('fadeInContent', [\n        state('showing', style({ opacity: 1 })),\n        transition('void => showing', [\n            style({ opacity: 0 }),\n            animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformPanel = mcSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInContent = mcSelectAnimations.fadeInContent;\n","import {\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { mixinColor, CanColor, CanColorCtor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\n@Directive({\n    selector: '[mc-icon]',\n    host: { class: 'mc mc-icon' }\n})\nexport class McIconCSSStyler {}\n\n\nexport class McIconBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McIconMixinBase: CanColorCtor & typeof McIconBase = mixinColor(McIconBase, ThemePalette.Empty);\n\n\n@Component({\n    selector: `[mc-icon]`,\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./icon.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['color']\n})\nexport class McIcon extends _McIconMixinBase implements CanColor {\n    constructor(elementRef: ElementRef, @Attribute('mc-icon') iconName: string) {\n        super(elementRef);\n\n        elementRef.nativeElement.classList.add(iconName);\n    }\n\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McIcon,\n    McIconCSSStyler\n} from './icon.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McIcon,\n        McIconCSSStyler\n    ],\n    declarations: [\n        McIcon,\n        McIconCSSStyler\n    ]\n})\nexport class McIconModule {}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-cleaner',\n    template: '<i class=\"mc-icon_light\" mc-icon=\"mc-close-M_16\" color=\"second\"></i>'\n})\nexport class McCleaner {}\n","import { NgControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\n\n/** An interface which allows a control to work inside of a `MсFormField`. */\nexport abstract class McFormFieldControl<T> {\n    /** The value of the control. */\n    value: T | null;\n\n    /**\n     * Stream that emits whenever the state of the control changes such that the parent `MсFormField`\n     * needs to run change detection.\n     */\n    readonly stateChanges: Observable<void>;\n\n    /** The element ID for this control. */\n    readonly id: string;\n\n    /** The placeholder for this control. */\n    readonly placeholder: string;\n\n    /** Gets the NgControl for this control. */\n    readonly ngControl: NgControl | null;\n\n    /** Whether the control is focused. */\n    readonly focused: boolean;\n\n    /** Whether the control is empty. */\n    readonly empty: boolean;\n\n    /** Whether the control is required. */\n    readonly required: boolean;\n\n    /** Whether the control is disabled. */\n    readonly disabled: boolean;\n\n    /** Whether the control is in an error state. */\n    readonly errorState: boolean;\n\n    /**\n     * An optional name for the control type that can be used to distinguish `mc-form-field` elements\n     * based on their control type. The form field will add a class,\n     * `mc-form-field-type-{{controlType}}` to its root element.\n     */\n    readonly controlType?: string;\n\n    /** Handles a click on the control's container. */\n    abstract onContainerClick(event: MouseEvent): void;\n}\n","import { Observable } from 'rxjs';\n\n\n/** An interface which allows a control to work inside of a `MсFormField`. */\nexport abstract class McFormFieldNumberControl<T> {\n    /** The value of the control. */\n    value: T | null;\n\n    /**\n     * Stream that emits whenever the state of the control changes such that the parent `MсFormField`\n     * needs to run change detection.\n     */\n    readonly stateChanges: Observable<void>;\n\n    /** the number step */\n    step: number;\n\n    /** the number big step */\n    bigStep: number;\n\n    /** Whether the control is focused. */\n    readonly focused: boolean;\n\n    /** Handles step up and down */\n    abstract stepUp(step: number): void;\n\n    abstract stepDown(step: number): void;\n}\n","import { Directive, Input } from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n@Directive({\n    selector: 'mc-hint',\n    host: {\n        class: 'mc-hint',\n        '[attr.id]': 'id'\n    }\n})\nexport class McHint {\n    @Input() id: string = `mc-hint-${nextUniqueId++}`;\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcPrefix]'\n})\nexport class McPrefix {\n}\n","import { Component, EventEmitter, Output } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-stepper',\n    template: `\n        <i class=\"mc mc-icon mc-icon_light mc-second mc-stepper-step-up mc-angle-down-L_16\"\n           (mousedown)=\"onStepUp($event)\">\n        </i>\n        <i class=\"mc mc-icon mc-icon_light mc-second mc-stepper-step-down mc-angle-down-L_16\"\n           (mousedown)=\"onStepDown($event)\">\n        </i>\n    `\n})\nexport class McStepper {\n    @Output()\n    readonly stepUp: EventEmitter<void> = new EventEmitter<void>();\n    @Output()\n    readonly stepDown: EventEmitter<void> = new EventEmitter<void>();\n\n    onStepUp($event: MouseEvent) {\n        this.stepUp.emit();\n        $event.preventDefault();\n    }\n\n    onStepDown($event: MouseEvent) {\n        this.stepDown.emit();\n        $event.preventDefault();\n    }\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcSuffix]'\n})\nexport class McSuffix {\n}\n","import {\n    AfterContentChecked,\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren, Directive,\n    ElementRef,\n    QueryList, ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { CanColor, CanColorCtor, mixinColor } from '@ptsecurity/mosaic/core';\nimport { EMPTY, merge } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n\n\nimport { McCleaner } from './cleaner';\nimport { McFormFieldControl } from './form-field-control';\nimport { getMcFormFieldMissingControlError } from './form-field-errors';\nimport { McFormFieldNumberControl } from './form-field-number-control';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McStepper } from './stepper';\nimport { McSuffix } from './suffix';\n\n\nlet nextUniqueId = 0;\n\nexport class McFormFieldBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McFormFieldMixinBase: CanColorCtor & typeof McFormFieldBase = mixinColor(McFormFieldBase);\n\n@Component({\n    selector: 'mc-form-field',\n    exportAs: 'mcFormField',\n    templateUrl: 'form-field.html',\n    // McInput is a directive and can't have styles, so we need to include its styles here.\n    // The McInput styles are fairly minimal so it shouldn't be a big deal for people who\n    // aren't using McInput.\n    styleUrls: [\n        'form-field.css',\n        '../input/input.css',\n        '../textarea/textarea.css'\n    ],\n    host: {\n        class: 'mc-form-field',\n        '[class.mc-form-field_invalid]': '_control.errorState',\n        '[class.mc-disabled]': '_control.disabled',\n        '[class.mc-form-field_has-prefix]': 'hasPrefix',\n        '[class.mc-form-field_has-suffix]': 'hasSuffix',\n        '[class.mc-form-field_has-cleaner]': 'canShowCleaner',\n        '[class.mc-form-field_has-stepper]': 'canShowStepper',\n        '[class.mc-focused]': '_control.focused',\n        '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n        '[class.ng-touched]': '_shouldForward(\"touched\")',\n        '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n        '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n        '[class.ng-valid]': '_shouldForward(\"valid\")',\n        '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n        '[class.ng-pending]': '_shouldForward(\"pending\")',\n        '(keydown)': 'onKeyDown($event)',\n        '(mouseenter)': 'onHoverChanged(true)',\n        '(mouseleave)': 'onHoverChanged(false)'\n    },\n    inputs: ['color'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class McFormField extends _McFormFieldMixinBase implements\n    AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n\n    @ContentChild(McFormFieldControl) _control: McFormFieldControl<any>;\n    @ContentChild(McFormFieldNumberControl) _numberControl: McFormFieldNumberControl<any>;\n    @ContentChild(McStepper) _stepper: McStepper;\n\n    @ContentChildren(McHint) _hint: QueryList<McHint>;\n    @ContentChildren(McSuffix) _suffix: QueryList<McSuffix>;\n    @ContentChildren(McPrefix) _prefix: QueryList<McPrefix>;\n    @ContentChildren(McCleaner) _cleaner: QueryList<McCleaner>;\n\n    @ViewChild('connectionContainer') connectionContainerRef: ElementRef;\n\n    // Unique id for the internal form field label.\n    _labelId = `mc-form-field-label-${nextUniqueId++}`;\n\n    hovered: boolean = false;\n\n    constructor(public _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef) {\n        super(_elementRef);\n    }\n\n    ngAfterContentInit() {\n        this._validateControlChild();\n\n        if (this._control.controlType) {\n            this._elementRef.nativeElement.classList\n                .add(`mc-form-field-type-${this._control.controlType}`);\n\n            if (this._numberControl && this.hasStepper) {\n                this._stepper.stepUp.subscribe(this.onStepUp.bind(this));\n                this._stepper.stepDown.subscribe(this.onStepDown.bind(this));\n            }\n        }\n\n        // Subscribe to changes in the child control state in order to update the form field UI.\n        this._control.stateChanges.pipe(startWith())\n            .subscribe(() => {\n                this._changeDetectorRef.markForCheck();\n            });\n\n        if (this._numberControl) {\n            this._numberControl.stateChanges.pipe(startWith())\n                .subscribe(() => {\n                    this._changeDetectorRef.markForCheck();\n                });\n        }\n\n        // Run change detection if the value changes.\n        const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n\n        merge(valueChanges)\n            .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    ngAfterContentChecked() {\n        this._validateControlChild();\n    }\n\n    ngAfterViewInit() {\n        // Avoid animations on load.\n        this._changeDetectorRef.detectChanges();\n    }\n\n    clearValue($event) {\n        $event.stopPropagation();\n\n        if (this._control && this._control.ngControl) {\n            this._control.ngControl.reset();\n        }\n    }\n\n    onContainerClick($event) {\n        if (this._control.onContainerClick) {\n            this._control.onContainerClick($event);\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n        // tslint:disable-next-line:deprecation\n        if (event.keyCode === ESCAPE && this._control.focused && this.hasCleaner) {\n            if (this._control && this._control.ngControl) {\n                this._control.ngControl.reset();\n            }\n\n            event.preventDefault();\n        }\n    }\n\n    onHoverChanged(isHovered: boolean) {\n        if (isHovered !== this.hovered) {\n            this.hovered  = isHovered;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    onStepUp() {\n        if (this._numberControl) {\n            this._numberControl.stepUp(this._numberControl.step);\n        }\n    }\n\n    onStepDown() {\n        if (this._numberControl) {\n            this._numberControl.stepDown(this._numberControl.step);\n        }\n    }\n\n    /**\n     * Gets an ElementRef for the element that a overlay attached to the form-field should be\n     * positioned relative to.\n     */\n    getConnectedOverlayOrigin(): ElementRef {\n        return this.connectionContainerRef || this._elementRef;\n    }\n\n        /** Determines whether a class from the NgControl should be forwarded to the host element. */\n    _shouldForward(prop: keyof NgControl): boolean {\n        const ngControl = this._control ? this._control.ngControl : null;\n\n        return ngControl && ngControl[prop];\n    }\n\n    /** Throws an error if the form field's control is missing. */\n    protected _validateControlChild() {\n        if (!this._control) {\n            throw getMcFormFieldMissingControlError();\n        }\n    }\n\n    get hasHint(): boolean {\n        return this._hint && this._hint.length > 0;\n    }\n\n    get hasSuffix(): boolean {\n        return this._suffix && this._suffix.length > 0;\n    }\n\n    get hasPrefix(): boolean {\n        return this._prefix && this._prefix.length > 0;\n    }\n\n    get hasCleaner(): boolean {\n        return this._cleaner && this._cleaner.length > 0;\n    }\n\n    get hasStepper(): boolean {\n        return !!this._stepper;\n    }\n\n    get canShowCleaner(): boolean {\n        return this.hasCleaner &&\n            this._control &&\n            this._control.ngControl\n                ? this._control.ngControl.value && !this._control.disabled\n                : false;\n    }\n\n\n    get disabled(): boolean {\n        return this._control && this._control.disabled;\n    }\n\n    get canShowStepper(): boolean {\n        return this._numberControl &&\n            !this.disabled &&\n            (\n                this._numberControl.focused ||\n                this.hovered\n            );\n    }\n}\n\n@Directive({\n    selector: 'mc-form-field[mcFormFieldWithoutBorders]',\n    exportAs: 'mcFormFieldWithoutBorders',\n    host: { class: 'mc-form-field_without-borders' }\n})\nexport class McFormFieldWithoutBorders {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McCleaner } from './cleaner';\nimport { McFormField, McFormFieldWithoutBorders } from './form-field';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McStepper } from './stepper';\nimport { McSuffix } from './suffix';\n\n\n@NgModule({\n    declarations: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner,\n        McStepper\n    ],\n    imports: [CommonModule, McIconModule],\n    exports: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner,\n        McStepper\n    ]\n})\nexport class McFormFieldModule {\n}\n"],"names":["SELECT_PANEL_PADDING_X","ref","instance","contentRef","this","openedSidepanels","push","afterClosed","subscribe","_this","removeOpenSidepanel","container","enter","McSidepanelService","prototype","closeAll","closeSidepanels","getSidepanelById","id","find","sidepanel","attachContainer","overlayRef","config","openedSidepanelsWithSamePosition","getOpenedSidepanelsWithSamePosition","injector","PortalInjector","WeakMap","McSidepanelConfig","MC_SIDEPANEL_WITH_INDENT","length","MC_SIDEPANEL_WITH_SHADOW","containerPortal","ComponentPortal","McSidepanelContainerComponent","undefined","attach","createInjector","sidepanelRef","sidepanelContainer","injectionTokens","MC_SIDEPANEL_DATA","data","McSidepanelRef","createOverlay","overlayConfig","OverlayConfig","hasBackdrop","backdropClass","getBackdropClass","maxWidth","panelClass","overlayPanelClass","scrollStrategy","overlay","scrollStrategies","block","positionStrategy","position","global","create","sidepanels","reverse","slice","forEach","close","hasOpenedSidepanelWithBackdrop","some","requiredBackdrop","filter","index","indexOf","splice","type","Injectable","Overlay","Injector","decorators","Optional","Inject","args","MC_SIDEPANEL_DEFAULT_OPTIONS","SkipSelf","McSidepanelClose","elementRef","sidepanelService","ngOnInit","setTimeout","getClosestSidepanel","ngOnChanges","changes","proxiedChange","mcSidepanelClose","sidepanelResult","currentValue","Directive","selector","host","(click)","class","ElementRef","Input","McSidepanelHeader","Component","template","closeable","McSidepanelBody","McSidepanelFooter","McSidepanelActions","McSidepanelModule","NgModule","imports","CommonModule","OverlayModule","PortalModule","McCommonModule","McIconModule","providers","declarations","entryComponents","exports","McSplitterComponent","ngZone","renderer","areas","_disabled","_gutterSize","isDragging","areaPositionDivider","listeners","Object","defineProperty","_direction","direction","disabled","coerceBooleanProperty","gutterSize","size","coerceNumberProperty","addArea","area","order","getSize","setOrder","initialSize","setStyle","isVertical","onMouseDown","event","leftAreaIndex","rightAreaIndex","leftArea","rightArea","startPoint","x","screenX","y","screenY","item","disableFlex","setSize","runOutsideAngular","listen","onMouseUp","e","onMouseMove","removeArea","indexToRemove","endPoint","offset","newLeftAreaSize","newRightAreaSize","minLeftAreaSize","getMinSize","minRightAreaSize","rightAreaOffset","unsubscribe","pop","property","value","nativeElement","preserveWhitespaces","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","NgZone","Renderer2","McGutterDirective","_order","_size","getCursor","getState","coerceCssPixelValue","setAttr","state","Error","attribute","setAttribute","McSplitterAreaDirective","splitter","removeStyle","ngOnDestroy","sz","getSizeProperty","getOffsetSizeProperty","getComputedStyle","parseFloat","getMinSizeProperty","style","McSplitterModule","nextUniqueId","McToggleBase","_elementRef","_McToggleMixinBase","mixinTabIndex","mixinColor","mixinDisabled","ThemePalette","Primary","McToggleChange","McToggleComponent","_super","_focusMonitor","_changeDetectorRef","tabIndex","call","labelPosition","ariaLabel","ariaLabelledby","_uniqueId","name","_checked","change","EventEmitter","_onTouchedCallback","_onChangeCallback","_","parseInt","monitor","tslib_1.__extends","markForCheck","stopMonitoring","focus","focusVia","_inputElement","_getAriaChecked","checked","_onInteractionEvent","stopPropagation","_onLabelTextChange","_onInputClick","_updateModelValue","_emitChangeEvent","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","source","emit","exportAs","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","inputs","[id]","[attr.id]","[class.mc-disabled]","[class.mc-toggle_off]","animations","trigger","left","transition","animate","FocusMonitor","ChangeDetectorRef","String","Attribute","ViewChild","Output","McToggleModule","A11yModule","McTooltipComponent","cdr","prefix","positions","DEFAULT_4_POSITIONS","classMap","mcVisibleChange","mcMouseEnterDelay","mcMouseLeaveDelay","_mcTrigger","_mcPlacement","_mcVisible","BehaviorSubject","onHideSubject","Subject","closeOnInteraction","availablePositions","POSITION_MAP","$visible","asObservable","_mcTitle","isTitleString","TemplateRef","unshift","mcPlacement","visible","next","show","hideTid","clearTimeout","isContentEmpty","mcTrigger","showTid","mcVisible","hide","setClassMap","mcTitle","afterHidden","handleBodyInteraction","outputs","fadeAnimation","(body:click)","MC_TOOLTIP_SCROLL_STRATEGY","InjectionToken","MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","mcTooltipScrollStrategyFactory","McTooltip","scrollDispatcher","hostView","isTooltipOpen","isDynamicTooltip","parentDisabled","$unsubscribe","manualListeners","Map","destroyed","title","updateCompValue","_mcMouseEnterDelay","_mcMouseLeaveDelay","_mcTooltipClass","tooltip","externalValue","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withPositions","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","pipe","takeUntil","onPositionChange","scrollableViewProperties","isOverlayClipped","run","updatePosition","detachments","detach","hasAttached","$event","updatedPlacement","keys","key","connectionPair","originX","originY","overlayX","overlayY","handlePositioningUpdate","pos","overlayElement","clientHeight","element","currentContainer","top","split","initElementRefListeners","dispose","listener","removeEventListener","clear","complete","handleKeydown","keyCode","ESCAPE","handleTouchend","set","addEventListener","portal","distinctUntilChanged","getConfig","origin","getOrigin","getOverlayPosition","tslib_1.__assign","main","fallback","originPosition","isLtr","getMcTooltipInvalidPositionError","_a","invertPosition","overlayPosition","newX","newY","(keydown)","(touchend)","ScrollDispatcher","ViewContainerRef","Directionality","setTitle","mcTooltipClass","isOpen","HostBinding","isParentDisabled","McToolTipModule","VERSION","Version","[attr.tabindex]","[class.mc-select-invalid]","[class.mc-select-required]","(focus)","(blur)","(window:resize)","mcSelectAnimations","transformPanel","fadeInContent","McFormFieldControl","McTreeSelect","CdkTree","ViewportRuler","ErrorStateMatcher","NgForm","FormGroupDirective","McFormField","NgControl","Self","MC_SELECT_SCROLL_STRATEGY","panel","overlayDir","CdkConnectedOverlay","tags","ViewChildren","McTag","customTrigger","ContentChild","McTreeSelectTrigger","tree","McTreeSelection","openedChange","openedStream","closedStream","selectionChange","valueChange","errorStateMatcher","sortComparator","placeholder","required","multiple","autoSelect","compareWith","McTreeSelectMixinBase","McTreeSelectModule","CdkTreeModule","McTreeModule","McTagsModule","McPseudoCheckboxModule","MC_SELECT_SCROLL_STRATEGY_PROVIDER","MC_TEXTAREA_VALUE_ACCESSOR","McTextareaBase","defaultErrorStateMatcher","parentForm","parentFormGroup","ngControl","McTextareaMixinBase","mixinErrorState","McTextarea","inputValueAccessor","canGrow","focused","stateChanges","controlType","uid","_required","lineHeight","freeRowsHeight","minHeight","valueAccessor","previousNativeValue","growObserver","fromEvent","growSubscription","grow","bind","_id","paddingTop","paddingBottom","ngDoCheck","updateErrorState","dirtyCheckNativeValue","textarea","outerHeight","window","diff","height","Math","max","scrollHeight","focusChanged","isFocused","isBadInput","onContainerClick","newValue","validity","badInput","getGrowHeight","toString","[class.mc-textarea-resizable]","[attr.placeholder]","[attr.aria-invalid]","[disabled]","[required]","McTextareaModule","FormsModule","hours","minutes","seconds","HHmmss","HHmm","TIMEFORMAT_PLACEHOLDERS","TimeFormats","DEFAULT_TIME_FORMAT","HOURS_MINUTES_SECONDS_REGEXP","RegExp","HOURS_MINUTES_REGEXP","HOURS_ONLY_REGEXP","uniqueComponentIdSuffix","formValidators","formValidatorOnChangeRegistrators","validatorOnChange","c","validatorOnChangeHandler","get","McTimepickerBase","McTimepickerMixinBase","ɵ1","validate","__validatorOnChangeHandler","validator","registerOnValidatorChange","McTimepicker","_minTime","_maxTime","onChange","noop","Validators","compose","parseValidator","minTimeValidator","maxTimeValidator","applyInputChanges","_timeFormat","formatValue","map","timeFormatKey","minValue","minDateTime","getDateFromTimeString","maxValue","maxDateTime","onTouched","onBlur","onPaste","preventDefault","clipboardUserInput","clipboardData","getData","onInput","initialCursorStart","selectionStart","initialCursorEnd","selectionEnd","isAutocompleteTriggered","getParsedTimeParts","hoursOnly","hoursAndMinutes","hoursAndMinutesAndSeconds","doTimestringReformat","errors","createSelectionOfTimeComponentInInput","setProperty","getTimeStringFromDate","timeFormat","onKeyDown","getKeyCode","upDownTimeByArrowKeys","switchSelectionBetweenTimeparts","applyParams","changedTime","timeToApply","currentDateTimeInput","updateValueAndValidity","result","cursorPos","modifiedTimePart","getTimeEditMetrics","incrementTime","decrementTime","getCursorPositionOfPrevTimePartStart","getCursorPositionOfNextTimePartStart","code","newEditParams","cursorStartPosition","cursorEndPosition","dateVal","whatToIncrement","TimeParts","getTimeDigitsFromDate","getDateFromTimeDigits","whatToDecrement","timeString","timeDevider","nextDividerPos","cursorPosition","minutesIndex","hoursIndex","secondsIndex","tempVal","getNumberWithLeadingZero","getHours","getMinutes","getSeconds","match","trim","Number","resultDate","Date","isNaN","getTime","digit","mcTimepickerParse","text","isTimeLowerThenMin","mcTimepickerLowerThenMintime","isTimeGreaterThenMax","mcTimepickerHigherThenMaxtime","timeToCompare","[attr.time-format]","[attr.min-time]","[attr.max-time]","[attr.value]","(input)","(paste)","NG_VALIDATORS","useValue","MC_INPUT_VALUE_ACCESSOR","minTime","maxTime","McTimepickerModule","PlatformModule","Right","Left","Top","Bottom","McSidepanelPosition","disableClose","Void","Visible","Hidden","mcSidepanelTransformAnimation","right","in","out","bottom","mcSidepanelAnimations","sidepanelState","transform","params","transformIn","transformOut","AnimationCurves","AccelerationCurve","DecelerationCurve","changeDetectorRef","sidepanelConfig","withIndent","withShadow","animationState","McSidepanelAnimationState","animationStateChanged","attachComponentPortal","validatePortalAttached","setAnimation","setPanelClass","portalOutlet","attachTemplatePortal","detectChanges","exit","onAnimation","animationTransform","classList","add","tabindex","role","aria-modal","[@state]","(@state.start)","(@state.done)","Boolean","CdkPortalOutlet","BasePortalOutlet","uniqueId","containerInstance","afterClosed$","afterOpened$","phaseName","toState","take","merge","backdropClick","keydownEvents","closed","detachBackdrop","afterOpened","defaultOptions","parentSidepanelService","openedSidepanelsAtThisLevel","open","componentOrTemplateRef","fullConfig","TemplatePortal","$implicit","_onTouched","McSelect","selectionModel","selected","empty","_multiple","selectedOptions","option","viewValue","isRtl","join","isEmpty","_dir","panelOpen","handleOpenKeydown","handleClosedKeydown","onFadeInDone","panelDoneAnimating","onFocus","_focused","onAttached","positionChange","calculateOverlayOffsetX","scrollTop","getPanelTheme","_parentFormField","color","calculateOverlayScroll","selectedIndex","scrollBuffer","maxScroll","itemHeight","getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","min","onRemoveMatcherItem","deselect","calculateHiddenItems","visibleItems","totalItemsWidth","getTotalItemsWidthInMatcher","totalVisibleItemsWidth","tag","offsetTop","offsetHeight","getBoundingClientRect","width","hiddenItems","itemsCounter","querySelector","matcherList","itemsCounterShowed","matcherListWidth","matcherWidth","triggerClone","cloneNode","remove","_renderer","appendChild","querySelectorAll","isArrowKey","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","ENTER","SPACE","altKey","keyManager","onKeydown","manager","HOME","END","setFirstItemActive","setLastItemActive","activeItem","A","ctrlKey","hasDeselectedOptions_1","options","select","previouslyFocusedIndex","activeItemIndex","shiftKey","selectViaInteraction","initializeSelection","Promise","resolve","then","setSelectionByValue","_value","Array","isArray","getMcSelectNonArrayValueError","selectValue","sortValues","correspondingOption","setActiveItem","_compareWith","error","isDevMode","console","warn","initKeyManager","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","withHorizontalOrientation","tabOut","destroy","_panelOpen","scrollActiveOptionIntoView","resetOptions","changedOrDestroyed","optionSelectionChanges","onSelect","isUserInput","apply","setOptionIds","wasSelected","isSelected","propagateChanges","options_1","toArray","sort","a","b","fallbackValue","valueToEmit","_onChange","McSelectChange","optionIds","highlightCorrectOption","activeOptionIndex","labelCount","countGroupLabelsBeforeOption","optionGroups","getOptionScrollPosition","getOptionIndex","reduce","current","calculateOverlayPosition","items","getItemCount","panelHeight","scrollContainerHeight","selectedOptionOffset","offsetY","calculateOverlayOffsetY","checkOverlayWithinViewport","offsetX","overlayRect","viewportSize","_viewportRuler","getViewportSize","first","group","leftOverflow","rightOverflow","round","topSpaceAvailable","triggerRect","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","adjustPanelUp","adjustPanelDown","transformOrigin","getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","optionHeightAdjustment","MC_OPTION_PARENT_COMPONENT","McSelectTrigger","ContentChildren","McOption","descendants","McOptgroup","McSelectMixinBase","McSelectModule","McOptionModule","McFormFieldModule","McTreeSelectChange","McTreeSelectBase","viewportRuler","dir","parentFormField","scrollStrategyFactory","oneMoreText","triggerFontSize","panelDoneAnimatingStream","o","defer","onSelectionChange","onStable","switchMap","_autoSelect","o1","o2","_placeholder","getMcSelectDynamicMultipleError","getMcSelectNonFunctionValueError","ngAfterContentInit","SelectionModel","changed","added","removed","ngAfterViewInit","startWith","updateSelectedOptions","toggle","fontSize","onRemoveSelectedOption","selectedOption","originalOnKeyDown","McTabNav","mcTabNavMixinBase","McTabLinkBase","mcTabLinkMixinBase","McTabLink","focusMonitor","isActive","[attr.aria-current]","[attr.aria-disabled]","[attr.tabIndex]","[class.mc-active]","active","McTabsModule","McTabGroup","McTabLabel","McTab","McTabContent","McLightTabsCssStyler","McAlignTabsCenterCssStyler","McAlignTabsEndCssStyler","McStretchTabsCssStyler","McTabLabelWrapper","McTabBody","McTabBodyPortal","McTabHeader","MC_TAGS_DEFAULT_OPTIONS","McTagSelectionChange","TAG_ATTRIBUTE_NAMES","McTagAvatar","McTagTrailingIcon","McTagBase","_McTagMixinBase","_ngZone","hasFocus","tagListSelectable","_selected","_selectable","_removable","addHostClassName","coercedValue","dispatchSelectionChange","textContent","addClassModificatorForIcons","icons","contentChildren","iconElement","previousElementSibling","nextElementSibling","nextSibling","previousSibling","firstIconElement","secondIconElement","_i","TAG_ATTRIBUTE_NAMES_1","attr","hasAttribute","tagName","toLowerCase","toggleSelected","removable","handleClick","DELETE","BACKSPACE","selectable","blur","[class.mc-tag-selected]","[class.mc-tag-with-avatar]","[class.mc-tag-with-trailing-icon]","[class.mc-tag-disabled]","[attr.disabled]","McIcon","avatar","trailingIcon","removeIcon","McTagRemove","parentTag","McTagListBase","_McTagListMixinBase","McTagListChange","McTagList","userTabIndex","tagChanges","orientation","_tabIndex","lastDestroyedTagIndex","tagInput","hasFocusedTag","syncTagsDisabledState","FocusKeyManager","resetTags","updateTabIndex","updateFocusForDestroyedTags","dropSubscriptions","registerInput","inputElement","originatesFromTag","focusInput","keydown","target","isInputEmpty","contains","clearSelection","correspondingTag","markAsTouched","newTagIndex","isValidIndex","nodeName","skip","listenToTagsFocus","listenToTagsSelection","listenToTagsRemoved","tagFocusSubscription","tagBlurSubscription","tagSelectionSubscription","tagRemoveSubscription","tagSelectionChanges","tagFocusChanges","tagIndex","updateActiveItem","tagBlurChanges","tagRemoveChanges","currentElement","parentElement","[class.mc-invalid]","[class.mc-required]","McTagInput","separatorKeyCodes","tagEnd","_addOnBlur","_tagList","emittagEnd","addOnBlur","isSeparatorKey","input","hasModifierKey","separators","has","tagList","ɵ0","McSelectBase","_scrollStrategyFactory","setFocusedOption","withShift","previousIndex_1","previousActiveItemIndex","activeIndex_1","setSelected","withCtrl","canDeselectLast","emitNavigationEvent","toggleFocusedOption","focusedIndex","focusedOption","emitChangeEvent","renderNodeChanges","dataDiffer","viewContainer","parentData","nodeOutlet","arrayOfInstances","_embeddedViews","view","viewDef","def","nodes","node","nodeMatchedQueries","matchedQueryIds","nodeData","nodeIndex","reset","notifyOnChanges","updateScrollSize","getHeight","clientRects","getClientRects","navigationChange","McTreeNavigationChange","noUnselect","MC_TREE_OPTION_PARENT_COMPONENT","IterableDiffers","CdkTreeNodeOutlet","McTreeOption","McTreeSelectionBaseMixin","MC_TREE_DIRECTIVES","McTreeNodeDef","McTreeNodePadding","McTreeNodeToggle","McTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","flattenNode","level","resultNodes","parentMap","flatNode","children","child","childParentMap","flattenNodes","structuredData","expandFlattenedNodes","treeControl","results","currentExpand","expand","i","isExpanded","McTreeFlatDataSource","treeFlattener","initialData","flattenedData","expandedData","_data","dataNodes","connect","collectionViewer","viewChange","expansionModel","disconnect","DataSource","McTreeNestedDataSource","arguments","CdkPortal","ctorParameters","McTabBase","mcTabMixinBase","viewContainerRef","textLabel","contentPortal","hasOwnProperty","explicitContent","implicitContent","templateLabel","read","mcTabsAnimations","translateTab","onCentering","beforeCentering","afterLeavingCenter","onCentered","animationDuration","dirChangeSubscription","Subscription","EMPTY","computePositionAnimationState","positionIndex","bodyPosition","computePositionFromOrigin","onTranslateTabStarted","isCentering","isCenterPosition","onTranslateTabComplete","fromState","getLayoutDirection","portalHost","PortalHostDirective","content","componentFactoryResolver","centeringSub","leavingSub","ComponentFactoryResolver","McTabLabelWrapperBase","mcTabLabelWrapperMixinBase","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","McTabHeaderBase","showPaginationControls","disableScrollAfter","disableScrollBefore","selectFocusedIndex","indexFocused","_scrollDistance","selectedIndexChanged","_selectedIndex","focusIndex","v","getMaxScrollDistance","scrollDistanceChanged","checkScrollingControls","ngAfterContentChecked","tabLabelCount","labelWrappers","updatePagination","scrollToLabel","updateTabScrollPosition","dirChange","observableOf","resize","realign","withWrap","requestAnimationFrame","newFocusIndex","setTabFocus","onContentChanges","currentTextContent","zoneCallback","checkPaginationEnabled","tab","containerEl","tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","tabList","scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","[class.mc-tab-header__pagination-controls_enabled]","[class.mc-tab-header_rtl]","nextId","McTabChangeEvent","MC_TABS_CONFIG","McTabGroupBase","mcTabGroupMixinBase","lightTabs","defaultConfig","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","indexToSelect","tabBodyWrapperHeight","tabsSubscription","tabLabelSubscription","_dynamicHeight","lightTab","groupId","clampTabIndex","isFirstRun_1","createChangeEvent","tabs","subscribeToTabLabels","getTabLabelId","getTabContentId","setTabBodyWrapperHeight","tabHeight","wrapper","tabBodyWrapper","removeTabBodyWrapperHeight","tabHeader","getTabIndex","[class.mc-tab-group_dynamic-height]","[class.mc-tab-group_inverted-header]","dynamicHeight","McTabNavBase","confirm","confirmType","McModalControlService","McModalService","McModalModule","McButtonModule","McModalComponent","CssUnitPipe","MC_NAVBAR_CONTAINER","MC_NAVBAR_ITEM","MC_NAVBAR_BRAND","MC_NAVBAR_TITLE","McNavbarLogo","McNavbarBrand","McNavbarTitle","McNavbarItemBase","_McNavbarMixinBase","McNavbarItem","_platform","_cdRef","dropdownItems","isCollapsed","_subscription","encodeURI","dropdownContent","denyClickIfDisabled","_focusMonitor$","hasDropdownContent","listenClickOutside","startListenFocusDropdownItems","stopListenFocusDropdownItems","isActiveDropdownLink","link","isBrowser","location","href","handleClickByItem","toggleDropdown","isNavbarItem","handleClickByDropdownItem","forceCloseDropdown","_dropdownElements","el","events","eventListeners","stopImmediatePropagation","Platform","collapsedTitle","dropdownItemTmpl","McNavbarContainer","cssClasses","CollapsibleItem","_collapsed","processCollapsed","collapsed","updateCollapsedClass","CachedItemWidth","itemsForCollapse","_collapsedItemsWidth","calculateAndCacheCollapsedItemsWidth","updateTitle","acc","getTitle","computedTitle","getAttribute","decodeURI","innerText","removeAttribute","McNavbar","forceRecalculateItemsWidth","resizeDebounceInterval","firstLevelElement","secondLevelElements","resizeObserver","debounceTime","_resizeSubscription","updateCollapsed","_itemsWidths","calculateAndCacheItemsWidth","_totalItemsWidths","calculateAndCacheTotalItemsWidth","collapseDelta","maxAllowedWidth","itemsWidths","canCollapse","collapsedItemsWidth","getOuterElementWidth","getPropertyValue","allItemsSelector","allItems","from","getItemsForCollapse","McNavbarModule","idIterator","McProgressBarBase","_McProgressBarMixinBase","McProgressBar","mode","McProgressBarModule","McProgressSpinnerBase","_McProgressSpinnerMixinBase","McProgressSpinner","percentage","McProgressSpinnerModule","McRadioChange","McRadioGroupBase","_McRadioGroupMixinBase","MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","McRadioGroup","_changeDetector","_name","_isInitialized","_labelPosition","controlValueAccessorChangeFn","updateRadioButtonNames","markRadiosForCheck","updateSelectedRadioFromValue","checkSelectedRadioButton","toBoolean","touch","_radios","radio","isAlreadySelected","McRadioButton","McRadioButtonBase","_McRadioButtonMixinBase","radioGroup","_radioDispatcher","removeUniqueSelectionListener","newCheckedState","notify","newDisabledState","onInputClick","onInputChange","groupValueChanged","[class.mc-checked]","UniqueSelectionDispatcher","ariaDescribedby","McRadioModule","CdkTreeNodeDef","baseLeftPadding","_indent","iconWidth","withIcon","paddingIndent","nodeLevel","treeNode","leftPadding","setPadding","CdkTreeNodePadding","indent","CdkTreeNodeToggle","McTreeOptionChange","uniqueIdCounter","parent","_active","setActiveStyles","setInactiveStyles","getHostElement","emitSelectionChangeEvent","[class.mc-selected]","CdkTreeNode","McTreeSelectionChange","McTreeSelectionBase","differs","rawValue","log","collapse","PAGE_UP","setPreviousPageItemActive","PAGE_DOWN","setNextPageItemActive","withScrollSize","floor","[tabIndex]","MC_SELECTION_LIST_VALUE_ACCESSOR","McListOption","horizontal","McListSelection","_McListSelectionMixinBase","McListBase","McList","McListSubheaderCssStyler","McListItemBase","McListItem","_element","_lineSetter","McLineSetter","_lines","_handleFocus","_handleBlur","_getHostElement","McLine","McListModule","McLineModule","McLinkBase","_McLinkBase","McLink","McLinkModule","parentService","rootOpenModals","rootAfterAllClose","rootRegisteredMetaMap","afterAllClose","openModals","registeredMetaMap","registerModal","modalRef","hasRegistered","afterOpenSubscription","afterOpen","afterCloseSubscription","afterClose","removeOpenModal","McModalRef","ModalUtil","document","lastPosition","listenDocumentClick","getLastClickPosition","clientX","clientY","ModalUtil$1","cfr","mcMeasureScrollbarService","modalControl","changeDetector","mcModalType","mcZIndex","mcWidth","mcCloseByESC","_mcClosable","_mcMask","_mcMaskClosable","mcAfterOpen","mcAfterClose","mcOkType","_mcOkLoading","mcOnOk","_mcCancelLoading","mcOnCancel","mcGetContainer","mcOkText","mcCancelText","isComponent","mcContent","createDynamicComponent","isModalButtons","mcFooter","formatModalButtons","HTMLElement","OverlayRef","handleVisibleStateChange","firstChange","contentComponentRef","bodyContainer","insert","autoFocusButtonOk","changeVisibleFromInside","triggerOk","onClickOkCancel","triggerCancel","getInstance","getContentComponentRef","getContentComponent","getElement","onClickMask","mcMask","mcMaskClosable","isModalType","onClickCloseBtn","ok","cancel","loadingKey","caseClose_1","doClose","isPromise","handleThen","catch","isNonEmptyString","isTemplateRef","Type","animation","closeResult","changeBodyOverflow","animateTo","getButtonCallableProp","prop","onButtonClick","button","loading","changeAnimationState","maskAnimationClassMap","modalAnimationClassMap","_b","isVisible","updateTransformOrigin","buttons","autoLoading","component","factory","resolveComponentFactory","childInjector","parentInjector","mcComponentParams","assign","modalElement","modalContainer","plusNum","body","scrollBarWidth","McMeasureScrollbarService","DOCUMENT","mcWrapClassName","mcClassName","mcStyle","mcClosable","mcMaskStyle","mcBodyStyle","mcOkLoading","mcCancelLoading","defaultUnit","formatted","Pipe","ModalBuilderForService","createModal","changeProps","destroyModal","success","simpleConfirm","delete","McDatepickerInput","dateAdapter","format","dateFormats","display","dateInput","getValidDateOrNull","obj","isDateInstance","isValid","MC_DATEPICKER_VALUE_ACCESSOR","MC_DATEPICKER_VALIDATORS","[attr.aria-haspopup]","[attr.aria-owns]","[attr.min]","[attr.max]","(change)","DateAdapter","MC_DATE_FORMATS","mcDatepicker","mcDatepickerFilter","dateChange","McDatepickerToggleIcon","McDatepickerToggle","intl","defaultTabIndex","parsedTabIndex","datepicker","watchStateChanges","datepickerDisabled","disabledChange","inputDisabled","datepickerInput","datepickerToggled","[class.mc-datepicker-toggle_active]","[class.mc-warn]","McDatepickerIntl","customIcon","McDatepickerModule","McCalendar","McCalendarBody","McDatepicker","McDatepickerContent","McMonthView","McYearView","McMultiYearView","McCalendarHeader","MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","McDivider","_vertical","_inset","[attr.aria-orientation]","[class.mc-divider-vertical]","[class.mc-divider-inset]","vertical","inset","McDividerModule","McDropdownContent","_template","_componentFactoryResolver","_appRef","_injector","_viewContainerRef","_document","_attached","context","_portal","_outlet","DomPortalOutlet","createElement","insertBefore","outletElement","isAttached","ApplicationRef","MC_DROPDOWN_PANEL","McDropdownItemBase","_McDropdownItemMixinBase","McDropdownItem","_parentDropdownPanel","addItem","removeItem","_getTabIndex","_checkDisabled","getLabel","textNodeType","TEXT_NODE","output","childNodes","length_1","nodeType","mcDropdownAnimations","transformDropdown","opacity","query","fadeInItems","MC_DROPDOWN_DEFAULT_OPTIONS","providedIn","MC_DROPDOWN_DEFAULT_OPTIONS_FACTORY","McDropdown","_defaultOptions","_classList","_panelAnimationState","_animationDone","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_overlapTrigger","overlapTrigger","_hasBackdrop","throwMcDropdownInvalidPositionX","setPositionClasses","throwMcDropdownInvalidPositionY","classes","className","_keyManager","_handleKeydown","setFocusOrigin","focusFirstItem","lazyContent","resetActiveItem","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","templateRef","MC_DROPDOWN_SCROLL_STRATEGY","MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER","MC_DROPDOWN_SCROLL_STRATEGY_FACTORY","McDropdownTrigger","_overlay","_scrollStrategy","_openedBy","dropdownOpened","dropdownClosed","_overlayRef","_opened","_closeSubscription","_hoverSubscription","dropdown","_check","_destroy","_cleanUpSubscriptions","_createOverlay","_setPosition","_closingActions","_init","opened","_reset","_setIsOpened","throwMcDropdownMissingError","_getOverlayConfig","_subscribeToPositions","withLockedPosition","originFallbackX","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","backdrop","(touchstart)","McDropdownModule","McContentComponent","[class.mc-layout-content]","McFooterComponent","[class.mc-layout-footer]","McHeaderComponent","[class.mc-layout-header]","McLayoutComponent","hasSidebar","[class.mc-layout]","[class.mc-layout-has-sidebar]","McSidebarComponent","mcLayoutComponent","_mcWidth","mcCollapsedWidth","mcCollapsedChange","collapsible","mcCollapsed","[class.mc-layout-sidebar]","[class.mc-layout-sidebar-collapsed]","[style.flex]","[style.max-width.px]","[style.min-width.px]","[style.width.px]","Host","mcCollapsible","McLayoutModule","listSelection","_hasFocus","checkboxPosition","_reportValueChange","wasSelected_1","_removeOptionFromList","_text","_getHeight","_handleClick","[class.mc-focused]","McListSelectionChange","McListSelectionBase","_modelChanges","_tempValues","_setOptionsFromValues","selectAll","deselectAll","_canDeselectLast","values","getSelectedOptionValues","_isValidIndex","listOption","optionIndex","_getOptionIndex","setPreviousItemActive","setNextItemActive","_onKeyDown","_getOptionByValue","getYear","activeDate","focusActiveCell","mcCalendarBody","createCellForYear","year","yearName","getYearName","createDate","McCalendarCell","shouldEnableYear","maxDate","minDate","dateFilter","firstOfYear","date","addCalendarDays","selectedChange","yearSelected","activeDateChange","monthSelected","createMissingDateImplError","_activeDate","today","oldActiveDate","validDate","deserialize","clampDate","init","selectedMonth","getMonthInCurrentYear","_minDate","_maxDate","onMonthSelected","month","normalizedDate","daysInMonth","getNumDaysInMonth","getDate","handleCalendarBodyKeydown","addCalendarMonths","getMonth","addCalendarYears","compareDate","todayMonth","yearLabel","monthNames","getMonthNames","months","row","createCellForMonth","monthName","monthYearA11yLabel","newMonthName","toLocaleUpperCase","substr","shouldEnableMonth","activeYear","isYearAndMonthAfterMaxDate","isYearAndMonthBeforeMinDate","firstOfMonth","maxYear","maxMonth","minYear","minMonth","calendar","currentView","label","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","isSameView","nextEnabled","date1","date2","startView","userSelection","moveFocusOnNextTick","intlChanges","_startAt","clampedActiveDate","_currentView","calendarHeaderPortal","headerComponent","startAt","ngAfterViewChecked","getCurrentViewComponent","updateTodaysDate","monthView","yearView","multiYearView","dateSelected","sameDate","yearSelectedInMultiYearView","normalizedYear","monthSelectedInYearView","normalizedMonth","userSelected","goToDateInView","dateClass","mcDatepickerAnimations","fadeInCalendar","Element","matches","msMatchesSelector","datepickerUid","MC_DATEPICKER_SCROLL_STRATEGY","MC_DATEPICKER_SCROLL_STRATEGY_FACTORY","McDatepickerContentBase","McDatepickerContentMixinBase","[@transformPanel]","selectedChanged","validSelected","focusedElementBeforeOpen","inputSubscription","_color","getThemePalette","popupRef","popupComponentRef","oldValue","selectYear","selectMonth","activeElement","openAsPopup","calendarPortal","completeClose","createPopup","setColor","createPopupPositionStrategy","calendarHeaderComponent","McDatepickerInputEvent","targetElement","formField","datepickerSubscription","localeSubscription","lastValueValid","cvaOnChange","mcDatepickerParse","minValidator","control","controlValue","mcDatepickerMin","actual","maxValidator","mcDatepickerMax","filterValidator","localeChanges","oldDate","_min","_max","isAltDownArrow","readOnly","parse","McCheckbox","Init","Checked","Unchecked","Indeterminate","McCheckboxChange","McCheckboxBase","_McCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","_controlValueAccessorChangeFn","_indeterminate","focusOrigin","_onInputFocusChange","_transitionCheckState","indeterminate","newState","oldState","[class.mc-indeterminate]","[class.mc-checkbox-label-before]","MC_CHECKBOX_CONTROL_VALUE_ACCESSOR","MC_CHECKBOX_CLICK_ACTION","MC_CHECKBOX_REQUIRED_VALIDATOR","McCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","McCheckboxModule","stepUp","step","res","stepDown","MC_INPUT_INVALID_TYPES","BIG_STEP","SMALL_STEP","McInputBase","_McInputMixinBase","McNumberInput","_model","bigStep","isDigit","Infinity","_host","self","getPrototypeOf","normalizeSplitter","_focusChanged","minuses","NUMPAD_MINUS","DASH","FF_MINUS","serviceKeys","TAB","arrows","allowedKeys","concat","isIEPeriod","isNotIEPeriod","metaKey","C","V","X","F1","F12","EDGE","TRIDENT","ZERO","NINE","NUMPAD_ZERO","NUMPAD_NINE","valueAsNumber","update","replace","isFloat","isInt","test","NgModel","McFormFieldNumberControl","McInput","_uid","_type","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","_validateType","_dirtyCheckNativeValue","_onInput","_isNeverEmpty","_isBadInput","getMcInputUnsupportedTypeError","McInputMono","MIN_VALIDATOR","MinValidator","_createValidator","_validator","MAX_VALIDATOR","MaxValidator","McInputModule","calendarLabel","openCalendarLabel","displayValue","enabled","numCols","activeCell","cellAspectRatio","selectedValueChange","cellClicked","cell","columnChanges","rows","firstRowOffset","cellPadding","cellWidth","isActiveCell","rowIndex","colIndex","cellNumber","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","hasSameMonthAndYear","selectedDate","getDateInCurrentMonth","selectedYear","todayDate","monthLabel","firstWeekOffset","getDayOfWeek","createWeekCells","dateNames","getDateNames","weeks","shouldEnableDate","dateA11yLabel","cellClasses","d1","d2","todayYear","activeOffset","years","onYearSelected","yearsPerPage","getActiveCell","showPanel","McAutocomplete","emitSelectEvent","McAutocompleteSelectedEvent","optionSelected","MC_AUTOCOMPLETE_DEFAULT_OPTIONS","displayWith","panelWidth","autoActiveFirstOption","McAutocompleteOrigin","MC_AUTOCOMPLETE_SCROLL_STRATEGY","MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","McAutocompleteTrigger","zone","optionSelections","autocomplete","autocompleteAttribute","_autocompleteDisabled","overlayAttached","componentDestroyed","viewportSubscription","canOpenOnNextFocus","closeKeyEventStream","windowBlurHandler","destroyPanel","openPanel","attachOverlay","closePanel","closingActionsSubscription","getOutsideClickStream","McOptionSelectionChange","setTriggerValue","activeOption","prevActiveItem","canOpen","scrollToOption","handleInput","previousValue","handleFocus","clickTarget","newScrollPosition","getScrollTop","setScrollTop","subscribeToClosingActions","firstStable","optionChanges","tap","reapplyLastPosition","delay","setVisibility","panelClosingActions","setValueAndClose","toDisplay","inputValue","_control","clearPreviousSelectedOption","getMcAutocompleteMissingPanelError","setOrigin","getConnectedElement","updateSize","getPanelWidth","getOverlayConfig","wasOpen","withPush","connectedTo","getConnectedOverlayOrigin","getHostWidth","[attr.autocomplete]","(focusin)","autocompleteDisabled","McAutocompleteModule","McButtonCssStyler","[class.mc-button]","[class.mc-icon-button]","McButtonBase","McButtonMixinBase","McButton","McAnchor","haltDisabledEvents","MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","McButtonToggleGroup","McButtonToggleChange","buttonToggles","syncButtonToggle","isPrechecked","[class.mc-button-toggle-vertical]","McButtonToggle","buttonToggleGroup","isSingleSelector","onToggleClick","newChecked","[class.mc-button-toggle-standalone]","[class.mc-button-toggle-checked]","mcButton","McButtonToggleModule","McCard","readonly","hostElement","onClick","[class.mc-card_readonly]","[class.mc-card_selected]","McCardModule","__extends","d","__","constructor","extendStatics","isBoolean","val","MC_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","Default","colorPalette","errorState","matcher","isErrorState","optionsArray","groups","groupCounter","optionHeight","currentScrollPosition","optionOffset","arrayMap","array","iteratee","baseValues","object","props","mcSelectScrollStrategyProviderFactory","reposition","getMcFormFieldMissingControlError","MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","inputType","sanitizeNumber","isFinite","getPrecision","arr","pow","value1","value2","precision","provider","openSidepanels","scrollThrottle","setPrototypeOf","__proto__","p","__assign","s","n","MC_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","computedStyle","removeChild","BidiModule","Second","Empty","_setLineClass","count","_resetClasses","_setClass","isAdd","ShowOnDirtyErrorStateMatcher","form","invalid","dirty","submitted","touched","McPseudoCheckbox","scrollbarMeasure","overflow","initScrollBarWidth","_scrollbarWidth","scrollDiv","scrollProp","clientWidth","McOptgroupBase","McOptgroupMixinBase","uniqueOptgroupIdCounter","labelId","[class.mc-optgroup-disabled]","[attr.aria-labelledby]","mostRecentViewValue","[class.mc-option-multiple]","MC_LABEL_GLOBAL_OPTIONS","StandardCurve","SharpCurve","topCenter","topLeft","topRight","rightTop","rightBottom","bottomCenter","bottomLeft","bottomRight","leftTop","leftBottom","minWidth","animateChild","McIconCSSStyler","McIconBase","_McIconMixinBase","iconName","McCleaner","McHint","McPrefix","McStepper","onStepUp","onStepDown","McSuffix","McFormFieldBase","_McFormFieldMixinBase","_labelId","hovered","_validateControlChild","_numberControl","hasStepper","_stepper","valueChanges","clearValue","hasCleaner","onHoverChanged","isHovered","connectionContainerRef","_shouldForward","_hint","_suffix","_prefix","_cleaner","[class.mc-form-field_invalid]","[class.mc-form-field_has-prefix]","[class.mc-form-field_has-suffix]","[class.mc-form-field_has-cleaner]","[class.mc-form-field_has-stepper]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","(mouseenter)","(mouseleave)","McFormFieldWithoutBorders","uniqueAutocompleteIdCounter","defaults","_isOpen","_autoActiveFirstOption"],"mappings":"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"}