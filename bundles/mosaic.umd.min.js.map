{"version":3,"file":"mosaic.umd.min.js","sources":["../../src/lib/radio/radio.component.ts","../../src/lib/radio/radio.module.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/tree.module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/list/list.component.ts","../../src/lib/list/list.module.ts","../../src/lib/icon/icon.component.ts","../../src/lib/icon/icon.module.ts","../../src/lib/navbar/navbar.component.ts","../../src/lib/navbar/navbar.module.ts","../../src/lib/progress-bar/progress-bar.component.ts","../../src/lib/progress-bar/progress-bar.module.ts","../../src/lib/progress-spinner/progress-spinner.component.ts","../../src/lib/progress-spinner/progress-spinner.module.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/divider/divider.component.ts","../../src/lib/divider/divider.module.ts","../../src/lib/form-field/cleaner.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field.module.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input.module.ts","../../src/lib/list/list-selection.component.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/utils/utils.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/core/line/line.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/button/button.component.ts","../../src/lib/button/button.module.ts","../../src/lib/checkbox/checkbox-config.ts"],"sourcesContent":["import {\n    AfterContentInit, AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef,\n    Input, OnDestroy, OnInit, Optional, Output, QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\n\nimport {UniqueSelectionDispatcher} from '@ptsecurity/cdk/collections';\n\nimport {\n    CanColor,\n    CanDisable,\n    HasTabIndex,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/** Change event object emitted by McRadio. */\nexport class McRadioChange {\n    constructor(\n        /** The McRadioButton that emits the change event. */\n        public source: McRadioButton,\n        /** The value of the McRadioButton. */\n        public value: any) {}\n}\n\n// Boilerplate for applying mixins to McRadioGroup.\n/** @docs-private */\nexport class McRadioGroupBase { }\nexport const _McRadioGroupMixinBase = mixinDisabled(McRadioGroupBase);\n\n/**\n * Provider Expression that allows mc-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McRadioGroup),\n    multi: true\n};\n\n@Directive({\n    selector: 'mc-radio-group',\n    exportAs: 'mcRadioGroup',\n    providers: [MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n    host: {\n        'role': 'radiogroup',\n        'class': 'mc-radio-group'\n    },\n    inputs: ['disabled']\n})\nexport class McRadioGroup extends _McRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** Child radio buttons. */\n    @ContentChildren(forwardRef(() => McRadioButton), { descendants: true })\n    _radios: QueryList<McRadioButton>;\n\n    /**\n     * Selected value for group. Should equal the value of the selected radio button if there *is*\n     * a corresponding radio button with a matching value. If there is *not* such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    private _value: any = null;\n\n    /** The HTML name attribute applied to radio buttons in this group. */\n    private _name: string = `mc-radio-group-${nextUniqueId++}`;\n\n    /** The currently selected radio button. Should match value. */\n    private _selected: McRadioButton | null = null;\n\n    /** Whether the `value` has been set to its initial value. */\n    private _isInitialized: boolean = false;\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    private _labelPosition: 'before' | 'after' = 'after';\n\n    /** Whether the radio group is disabled. */\n    private _disabled: boolean = false;\n\n    /** Whether the radio group is required. */\n    private _required: boolean = false;\n\n    /** The method to be called in order to update ngModel */\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @docs-private\n     */\n    onTouched: () => any = () => {};\n\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    @Input()\n    get name(): string { return this._name; }\n    set name(value: string) {\n        this._name = value;\n        this.updateRadioButtonNames();\n    }\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this.markRadiosForCheck();\n    }\n\n    /** Value of the radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n\n            this.updateSelectedRadioFromValue();\n            this.checkSelectedRadioButton();\n        }\n    }\n\n    checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n\n    /** Whether the radio button is selected. */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: McRadioButton | null) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this.checkSelectedRadioButton();\n    }\n\n    /** Whether the radio group is disabled */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /** Whether the radio group is required */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    constructor(private _changeDetector: ChangeDetectorRef) {\n        super();\n    }\n\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on McRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the McRadioGroup.\n        this._isInitialized = true;\n    }\n\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        if (this._isInitialized) {\n            this.change.emit(new McRadioChange(this._selected!, this._value));\n        }\n    }\n\n    markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach((radio) => radio.markForCheck());\n        }\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n\n    private updateRadioButtonNames(): void {\n        if (this._radios) {\n            this._radios.forEach((radio) => {\n                radio.name = this.name;\n            });\n        }\n    }\n\n    /** Updates the `selected` radio button from the internal _value state. */\n    private updateSelectedRadioFromValue(): void {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected != null && this._selected.value === this._value;\n\n        if (this._radios != null && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach((radio) => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n}\n\n\n// Boilerplate for applying mixins to McRadioButton.\n/** @docs-private */\nexport class McRadioButtonBase {\n    // Since the disabled property is manually defined for the McRadioButton and isn't set up in\n    // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n    // defined to properly work.\n    disabled: boolean;\n\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McRadioButtonMixinBase =\n    mixinColor(mixinTabIndex(McRadioButtonBase));\n\n\n@Component({\n    selector: 'mc-radio-button',\n    templateUrl: 'radio.component.html',\n    styleUrls: ['radio.css'],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    exportAs: 'mcRadioButton',\n    host: {\n        class: 'mc-radio-button',\n        '[attr.id]': 'id',\n        '[class.mc-radio-checked]': 'checked',\n        '[class.mc-radio-disabled]': 'disabled',\n        '(focus)': '_inputElement.nativeElement.focus()'\n    }\n})\nexport class McRadioButton extends _McRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, HasTabIndex {\n\n    private _uniqueId: string = `mc-radio-${++nextUniqueId}`;\n\n    /* tslint:disable:member-ordering */\n\n    /** The unique ID for the radio button. */\n    @Input() id: string = this._uniqueId;\n\n    /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n    @Input() name: string;\n\n    /** Used to set the 'aria-label' attribute on the underlying input element. */\n    @Input('aria-label') ariaLabel: string;\n\n    /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n    @Input('aria-labelledby') ariaLabelledby: string;\n\n    /** The 'aria-describedby' attribute is read after the element's label and field type. */\n    @Input('aria-describedby') ariaDescribedby: string;\n\n    /** Whether this radio button is checked. */\n    @Input()\n    get checked(): boolean { return this._checked; }\n    set checked(value: boolean) {\n        const newCheckedState = toBoolean(value);\n\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** The value of this radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(value: any) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup != null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n\n    /** Whether the radio button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n    }\n    set disabled(value: boolean) {\n        const newDisabledState = toBoolean(value);\n\n        if (this._disabled !== newDisabledState) {\n\n            this._disabled = newDisabledState;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** Whether the radio button is required. */\n    @Input()\n    get required(): boolean {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    private _labelPosition: 'before' | 'after';\n\n    /** The native `<input type=radio>` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** The parent radio group. May or may not be present. */\n    radioGroup: McRadioGroup;\n\n    @Input()\n    isFocused: boolean = false;\n\n    /** ID of the native input element inside `<mc-radio-button>` */\n    get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n    /** Whether this radio is checked. */\n    private _checked: boolean = false;\n\n    /** Whether this radio is disabled. */\n    private _disabled: boolean;\n\n    /** Whether this radio is required. */\n    private _required: boolean;\n\n    /** Value assigned to this radio. */\n    private _value: any = null;\n\n    /** Unregister function for _radioDispatcher */\n    private removeUniqueSelectionListener: () => void = () => {};\n\n    constructor(\n        @Optional() radioGroup: McRadioGroup,\n        elementRef: ElementRef,\n        private _changeDetector: ChangeDetectorRef,\n        private _radioDispatcher: UniqueSelectionDispatcher\n    ) {\n\n        super(elementRef);\n\n        this.radioGroup = radioGroup;\n\n        this.removeUniqueSelectionListener =\n            _radioDispatcher.listen((id: string, name: string) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n\n    ngAfterViewInit() {}\n\n    ngOnDestroy() {\n        this.removeUniqueSelectionListener();\n    }\n\n    /** Focuses the radio button. */\n    focus(): void {}\n\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n\n    onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n\n    onInputChange(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this.emitChangeEvent();\n\n        if (this.radioGroup) {\n            this.radioGroup.controlValueAccessorChangeFn(this.value);\n            this.radioGroup.touch();\n            if (groupValueChanged) {\n                this.radioGroup.emitChangeEvent();\n            }\n        }\n    }\n\n    /** Dispatch change event with current value. */\n    private emitChangeEvent(): void {\n        this.change.emit(new McRadioChange(this, this._value));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport {A11yModule} from '@ptsecurity/cdk/a11y';\nimport {McCommonModule} from '@ptsecurity/mosaic/core';\n\nimport {McRadioButton, McRadioGroup} from './radio.component';\n\n\n@NgModule({\n    imports: [ CommonModule, A11yModule, McCommonModule ],\n    exports: [ McRadioGroup, McRadioButton, McCommonModule ],\n    declarations: [ McRadioGroup, McRadioButton ]\n})\nexport class McRadioModule {}\n","import { Directive, Input } from '@angular/core';\n\nimport { CdkTreeNodeDef } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodeDef]',\n    inputs: ['when: mcTreeNodeDefWhen'],\n    providers: [{ provide: CdkTreeNodeDef, useExisting: McTreeNodeDef }]\n})\nexport class McTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n    @Input('mcTreeNode') data: T;\n}\n","import { AfterViewInit, Directive, Input, ViewChild } from '@angular/core';\nimport { CdkTreeNodePadding } from '@ptsecurity/cdk/tree';\nimport { McIcon } from '@ptsecurity/mosaic/icon';\n\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n    selector: '[mcTreeNodePadding]',\n    providers: [{ provide: CdkTreeNodePadding, useExisting: McTreeNodePadding }]\n})\nexport class McTreeNodePadding<T> extends CdkTreeNodePadding<T> implements AfterViewInit {\n    get leftPadding(): number {\n        return (this._innerIcon ? 0 : this._iconWidth) + this._baseLeftPadding;\n    }\n\n    _baseLeftPadding: number = 6;\n    _iconWidth: number = 20;\n    _indent: number = 16;\n\n    /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n    @Input('mcTreeNodePadding') level: number;\n\n    /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n    @Input('matTreeNodePaddingIndent') indent: number;\n\n    @ViewChild(McIcon) _innerIcon: McIcon;\n\n    _paddingIndent(): string | null {\n        const nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)\n            ? this._tree.treeControl.getLevel(this._treeNode.data)\n            : null;\n\n        const level = this._level || nodeLevel;\n\n        return level ? `${(level * this._indent) + this.leftPadding}px` : `${this._baseLeftPadding}px`;\n    }\n\n    ngAfterViewInit(): void {\n        this._setPadding();\n    }\n}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, ContentChildren, EventEmitter, forwardRef, Input, IterableDiffer,\n    IterableDiffers, Output, QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    Directive, ElementRef, Inject\n} from '@angular/core';\nimport { NodeDef, ViewData } from '@angular/core/src/view';\n\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { CdkTreeNode, CdkTree, CdkTreeNodeOutlet } from '@ptsecurity/cdk/tree';\n\nimport { CanDisable, HasTabIndex, mixinDisabled, mixinTabIndex, toBoolean } from '@ptsecurity/mosaic/core';\n\nimport { FocusKeyManager } from '@ptsecurity/cdk/a11y';\n\nimport { END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, SPACE } from '@ptsecurity/cdk/keycodes';\n\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n    exportAs: 'mcTreeNodeOption',\n    selector: 'mc-tree-node-option',\n    host: {\n        tabindex: '-1',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': '_hasFocus',\n        '[attr.aria-expanded]': 'isExpanded',\n        '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n        class: 'mc-tree-node',\n\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()',\n\n        '(click)': '_handleClick()'\n    },\n    providers: [\n        { provide: CdkTreeNode, useExisting: McTreeNodeOption }\n    ]\n})\nexport class McTreeNodeOption<T> extends CdkTreeNode<T> implements CanDisable {\n    @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n        }\n    }\n\n    @Input()\n    get selected(): boolean {\n        return this.treeSelection.selectedOptions && this.treeSelection.selectedOptions.isSelected(this) || false;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            // this.treeSelection._reportValueChange();\n        }\n    }\n\n    private _hasFocus: boolean = false;\n\n    private _disabled: boolean = false;\n    private _selected: boolean = false;\n\n    constructor(\n        protected _elementRef: ElementRef,\n        @Inject(forwardRef(() => McTreeSelection))\n        protected treeSelection: McTreeSelection<T>\n    ) {\n        super(_elementRef, treeSelection);\n    }\n\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n\n        this.treeSelection.setFocusedOption(this);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.treeSelection.selectedOptions) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.treeSelection.selectedOptions.select(this);\n        } else {\n            this.treeSelection.selectedOptions.deselect(this);\n        }\n\n        // this._changeDetector.markForCheck();\n    }\n\n    _handleFocus(): void {\n        if (this.disabled || this._hasFocus) { return; }\n\n        this._hasFocus = true;\n    }\n\n    _handleBlur(): void {\n        this._hasFocus = false;\n    }\n\n    _handleClick(): void {\n        if (this.disabled) { return; }\n\n        this.treeSelection.setFocusedOption(this);\n    }\n}\n\nexport const _McTreeSelectionBase = mixinTabIndex(mixinDisabled(CdkTree));\n\nexport class McTreeNavigationChange {\n    constructor(\n        public source: McTreeSelection<any>,\n        public option: McTreeNodeOption<any>\n    ) {}\n}\n\nexport class McTreeSelectionChange {\n    constructor(\n        public source: McTreeSelection<any>,\n        public option: McTreeNodeOption<any>\n    ) {}\n}\n\n@Component({\n    exportAs: 'mcTreeSelection',\n    selector: 'mc-tree-selection',\n    template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n    host: {\n        '[tabIndex]': 'tabIndex',\n        class: 'mc-tree',\n        role: 'tree-selection',\n        '(keydown)': '_onKeyDown($event)'\n    },\n    styleUrls: ['./tree.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{ provide: CdkTree, useExisting: McTreeSelection }]\n})\nexport class McTreeSelection<T> extends _McTreeSelectionBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex {\n    // Outlets within the tree's template where the dataNodes will be inserted.\n    @ViewChild(CdkTreeNodeOutlet) _nodeOutlet: CdkTreeNodeOutlet;\n\n    @ContentChildren(forwardRef(() => McTreeNodeOption)) options: QueryList<McTreeNodeOption<T>>;\n\n    _keyManager: FocusKeyManager<McTreeNodeOption<T>>;\n\n    selectedOptions: SelectionModel<McTreeNodeOption<T>>;\n\n    _disabled: boolean = false;\n    tabIndex: number;\n    multiple: boolean;\n    autoSelect: boolean;\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(rawValue: boolean) {\n        const value = toBoolean(rawValue);\n\n        if (this._disabled !== value) {\n            this._disabled = value;\n\n            if (this._disabled) {\n                console.log('need disable all options');\n            } else {\n                console.log('need enable all options');\n            }\n        }\n    }\n\n    @Output() readonly navigationChange = new EventEmitter<McTreeNavigationChange>();\n\n    @Output() readonly selectionChange = new EventEmitter<McTreeSelectionChange>();\n\n    constructor(\n        _differs: IterableDiffers,\n        _changeDetectorRef: ChangeDetectorRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('multiple') multiple: string,\n        @Attribute('auto-select') autoSelect: string\n    ) {\n        super(_differs, _changeDetectorRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.multiple = multiple === null ? true : toBoolean(multiple);\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n\n        this.selectedOptions = new SelectionModel<McTreeNodeOption<T>>(this.multiple);\n    }\n\n    _onKeyDown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n\n        switch (keyCode) {\n            case LEFT_ARROW:\n                if (this._keyManager.activeItem) {\n                    this.treeControl.collapse(this._keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                break;\n            case RIGHT_ARROW:\n                if (this._keyManager.activeItem) {\n                    this.treeControl.expand(this._keyManager.activeItem.data);\n                }\n                event.preventDefault();\n\n                break;\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n\n                event.preventDefault();\n\n                break;\n            case HOME:\n                console.log('need set focus on first node');\n                event.preventDefault();\n\n                break;\n            case END:\n                console.log('need set focus on last node');\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                console.log('need do scroll page and set focus on first in viewport');\n\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                console.log('need do scroll page and set focus on last in viewport');\n\n                event.preventDefault();\n\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    ngAfterContentInit(): void {\n        this._keyManager = new FocusKeyManager<McTreeNodeOption<T>>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation(true)\n            .withHorizontalOrientation(null);\n    }\n\n    setFocusedOption(option: McTreeNodeOption<T>): void {\n        this._keyManager.updateActiveItem(option);\n\n        if (this.autoSelect) {\n            this.options.forEach((item) => item.setSelected(false));\n            option.setSelected(true);\n        }\n\n        this._emitNavigationEvent(option);\n    }\n\n    // Toggles the selected state of the currently focused option.\n    toggleFocusedOption(): void {\n        const focusedIndex = this._keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n            const focusedOption: McTreeNodeOption<T> = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this._canUnselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this._emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    renderNodeChanges(\n        data: T[],\n        dataDiffer: IterableDiffer<T> = this._dataDiffer,\n        viewContainer: any = this._nodeOutlet.viewContainer,\n        parentData?: T\n    ) {\n        super.renderNodeChanges(data, dataDiffer, viewContainer, parentData);\n\n        const arrayOfInstances = [];\n\n        viewContainer._embeddedViews.forEach((view: ViewData) => {\n            const viewDef = view.def;\n\n            viewDef.nodes.forEach((node: NodeDef) => {\n                if (viewDef.nodeMatchedQueries === node.matchedQueryIds) {\n                    const nodeData: any = view.nodes[node.nodeIndex];\n\n                    arrayOfInstances.push(nodeData.instance as never);\n                }\n            });\n        });\n\n        if (this.options) {\n            this.options.reset(arrayOfInstances);\n            this.options.notifyOnChanges();\n        }\n    }\n\n    _emitNavigationEvent(option: McTreeNodeOption<T>): void {\n        this.navigationChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    _emitChangeEvent(option: McTreeNodeOption<T>): void {\n        this.selectionChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private _isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    private _canUnselectLast(_option: McTreeNodeOption<T>): boolean {\n        return true;\n        // return !(this.noUnselect && this.selectedOptions.selected.length === 1 && listOption.selected);\n    }\n}\n\n","import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { CdkTreeModule } from '@ptsecurity/cdk/tree';\n\nimport { McTreeNodeDef } from './node';\nimport { McTreeNodePadding } from './padding';\nimport { McTreeSelection, McTreeNodeOption } from './tree';\n\n\nconst MC_TREE_DIRECTIVES = [\n    McTreeNodeDef,\n    McTreeNodePadding,\n    McTreeSelection,\n    McTreeNodeOption\n];\n\n@NgModule({\n    imports: [CommonModule, CdkTreeModule],\n    exports: MC_TREE_DIRECTIVES,\n    declarations: MC_TREE_DIRECTIVES\n})\nexport class McTreeModule {}\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { FlatTreeControl, ITreeControl } from '@ptsecurity/cdk/tree';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class McTreeFlattener<T, F> {\n\n    constructor(public transformFunction: (node: T, level: number) => F,\n                public getLevel: (node: F) => number,\n                public isExpandable: (node: F) => boolean,\n                public getChildren: (node: T) => Observable<T[]>) {\n    }\n\n    _flattenNode(node: T, level: number,\n                 resultNodes: F[], parentMap: boolean[]): F[] {\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n\n        if (this.isExpandable(flatNode)) {\n            this.getChildren(node).pipe(take(1)).subscribe((children) => {\n                children.forEach((child, index) => {\n                    const childParentMap: boolean[] = parentMap.slice();\n                    childParentMap.push(index !== children.length - 1);\n                    this._flattenNode(child, level + 1, resultNodes, childParentMap);\n                });\n            });\n        }\n\n        return resultNodes;\n    }\n\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n    flattenNodes(structuredData: T[]): F[] {\n        const resultNodes: F[] = [];\n        structuredData.forEach((node) => this._flattenNode(node, 0, resultNodes, []));\n\n        return resultNodes;\n    }\n\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n    expandFlattenedNodes(nodes: F[], treeControl: ITreeControl<F>): F[] {\n        const results: F[] = [];\n        const currentExpand: boolean[] = [];\n        currentExpand[0] = true;\n\n        nodes.forEach((node) => {\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n\n            if (expand) { results.push(node); }\n\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        });\n\n        return results;\n    }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `McTree`.\n * The nested tree nodes of type `T` are flattened through `MсTreeFlattener`, and converted\n * to type `F` for `McTree` to consume.\n */\nexport class McTreeFlatDataSource<T, F> extends DataSource<F> {\n    _flattenedData = new BehaviorSubject<F[]>([]);\n\n    _expandedData = new BehaviorSubject<F[]>([]);\n\n    _data: BehaviorSubject<T[]>;\n\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n        this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n        this.treeControl.dataNodes = this._flattenedData.value;\n    }\n\n    constructor(private treeControl: FlatTreeControl<F>,\n                private treeFlattener: McTreeFlattener<T, F>,\n                initialData: T[] = []) {\n        super();\n        this._data = new BehaviorSubject<T[]>(initialData);\n    }\n\n    connect(collectionViewer: ICollectionViewer): Observable<F[]> {\n        const changes = [\n            collectionViewer.viewChange,\n            this.treeControl.expansionModel.onChange!,\n            this._flattenedData\n        ];\n\n        return merge(...changes).pipe(map(() => {\n            this._expandedData.next(\n                this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n\n            return this._expandedData.value;\n        }));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by ITreeControl and each non-leaf node.\n */\nexport class McTreeNestedDataSource<T> extends DataSource<T> {\n    _data = new BehaviorSubject<T[]>([]);\n\n    /**\n     * Data for the nested tree\n     */\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n    }\n\n    connect(collectionViewer: ICollectionViewer): Observable<T[]> {\n        return merge(...[collectionViewer.viewChange, this._data])\n            .pipe(map(() => this.data));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import { Version } from '@angular/core';\n\n\nexport const VERSION = new Version('0.0.1-f8f40a2');\n","// todo пока не делаем, перенесено из материала, но у нас в доках таких простых списков нет.\nimport {\n    AfterContentInit, ChangeDetectionStrategy, Component, ContentChildren, Directive, ElementRef, QueryList,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { McLine, McLineSetter } from '@ptsecurity/mosaic/core';\n\n\nexport class McListBase {}\n\n@Component({\n    selector: 'mc-list',\n    host: { class: 'mc-list' },\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McList extends McListBase {}\n\n\n/**\n * Directive whose purpose is to add the mc- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n    selector: '[mc-subheader], [mcSubheader]',\n    host: { class: 'mc-subheader' }\n})\nexport class McListSubheaderCssStyler {}\n\n\n// Boilerplate for applying mixins to McListItem.\nexport class McListItemBase {}\n\n@Component({\n    selector: 'mc-list-item, a[mc-list-item]',\n    host: {\n        class: 'mc-list-item',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()'\n    },\n    templateUrl: './list-item.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListItem extends McListItemBase implements AfterContentInit {\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    private _lineSetter: McLineSetter;\n\n    constructor(private _element: ElementRef) {\n        super();\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    _handleFocus() {\n        this._element.nativeElement.classList.add('mc-focused');\n    }\n\n    _handleBlur() {\n        this._element.nativeElement.classList.remove('mc-focused');\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLineModule } from '@ptsecurity/mosaic/core';\n\nimport { McListSelection, McListOption } from './list-selection.component';\nimport { McList, McListItem, McListSubheaderCssStyler } from './list.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        McLineModule\n    ],\n    exports: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ],\n    declarations: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ]\n})\nexport class McListModule {}\n","import {\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { mixinColor, CanColor } from '@ptsecurity/mosaic/core';\n\n\n@Directive({\n    selector: '[mc-icon]',\n    host: { class: 'mc mc-icon' }\n})\nexport class McIconCSSStyler {}\n\n\nexport class McIconBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McIconMixinBase = mixinColor(McIconBase);\n\n\n@Component({\n    selector: `[mc-icon]`,\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./icon.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McIcon extends _McIconMixinBase implements CanColor {\n    constructor(elementRef: ElementRef, @Attribute('mc-icon') iconName: string) {\n        super(elementRef);\n\n        elementRef.nativeElement.classList.add(iconName);\n    }\n\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McIcon,\n    McIconCSSStyler\n} from './icon.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McIcon,\n        McIconCSSStyler\n    ],\n    declarations: [\n        McIcon,\n        McIconCSSStyler\n    ]\n})\nexport class McIconModule {}\n","import { fromEvent, Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nimport {\n    AfterViewInit,\n    Component, Directive,\n    ElementRef,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    ViewEncapsulation,\n    ContentChild,\n    TemplateRef,\n    ChangeDetectorRef,\n    ChangeDetectionStrategy,\n    ViewChild\n} from '@angular/core';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { SPACE } from '@ptsecurity/cdk/keycodes';\nimport { Platform } from '@ptsecurity/cdk/platform';\nimport { CanDisable, mixinDisabled } from '@ptsecurity/mosaic/core';\n\n\nconst COLLAPSED_CLASS: string = 'mc-navbar-collapsed-title';\nconst MC_ICON = 'mc-icon';\nconst MC_NAVBAR = 'mc-navbar';\nconst MC_NAVBAR_CONTAINER = 'mc-navbar-container';\nconst MC_NAVBAR_ITEM = 'mc-navbar-item';\nconst MC_NAVBAR_BRAND = 'mc-navbar-brand';\nconst MC_NAVBAR_TITLE = 'mc-navbar-title';\nconst MC_NAVBAR_LOGO = 'mc-navbar-logo';\n\nexport type McNavbarContainerPositionType = 'left' | 'right';\n\nexport interface IMcNavbarDropdownItem {\n    link?: string;\n    text: string;\n}\n\n@Directive({\n    selector: MC_NAVBAR_LOGO,\n    host: {\n        class: MC_NAVBAR_LOGO\n    }\n})\nexport class McNavbarLogo {}\n\n@Directive({\n    selector: MC_NAVBAR_BRAND,\n    host: {\n        class: MC_NAVBAR_BRAND\n    }\n})\nexport class McNavbarBrand {}\n\n@Directive({\n    selector: MC_NAVBAR_TITLE,\n    host: {\n        class: MC_NAVBAR_TITLE\n    }\n})\nexport class McNavbarTitle {}\n\nexport class McNavbarItemBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McNavbarMixinBase = mixinDisabled(McNavbarItemBase);\n\n@Component({\n    selector: MC_NAVBAR_ITEM,\n    template: `\n        <a\n            [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\n            (click)=\"handleClickByItem()\"\n            (keydown)=\"handleKeydown($event)\"\n            class=\"mc-navbar-item\"\n        >\n            <ng-content></ng-content>\n            <i *ngIf=\"hasDropdownContent\" mc-icon=\"mc-angle-M_16\"></i>\n        </a>\n        <ul\n            #dropdownContent\n            *ngIf=\"hasDropdownContent\"\n            [ngClass]=\"{ 'is-collapsed': isCollapsed }\"\n            class=\"mc-navbar-dropdown\"\n        >\n            <li\n                *ngFor=\"let item of dropdownItems\"\n                (click)=\"handleClickByDropdownItem()\"\n                class=\"mc-navbar-dropdown-item\"\n            >\n                <ng-container *ngIf=\"dropdownItemTmpl\">\n                    <ng-container *ngTemplateOutlet=\"dropdownItemTmpl; context: { $implicit: item }\"></ng-container>\n                </ng-container>\n                <a\n                    *ngIf=\"!dropdownItemTmpl\"\n                    [attr.href]=\"item.link\"\n                    [ngClass]=\"{ 'is-active': isActiveDropdownLink(item.link) }\"\n                    class=\"mc-navbar-dropdown-link\"\n                >{{ item.text }}</a>\n            </li>\n        </ul>\n    `,\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': '-1'\n    }\n})\nexport class McNavbarItem extends _McNavbarMixinBase implements OnInit, AfterViewInit, OnDestroy, CanDisable {\n\n    @Input()\n    tabIndex: number = 0;\n\n    @Input()\n    dropdownItems: IMcNavbarDropdownItem[] = [];\n\n    @Input()\n    set collapsedTitle(value: string) {\n        this.elementRef.nativeElement.setAttribute('computedTitle', encodeURI(value));\n    }\n\n    @ContentChild('dropdownItemTmpl', { read: TemplateRef })\n    dropdownItemTmpl: TemplateRef<IMcNavbarDropdownItem>;\n\n    @ViewChild('dropdownContent', { read: ElementRef })\n    dropdownContent: ElementRef;\n\n    get hasDropdownContent() {\n        return this.dropdownItems.length > 0;\n    }\n\n    isCollapsed: boolean = true;\n\n    private _subscription: Subscription = new Subscription();\n    private _focusMonitor$: Observable<FocusOrigin>;\n    private _lastFocusedElement: HTMLElement;\n\n    private get _dropdownElements(): HTMLElement[] {\n        return this.dropdownContent ? this.dropdownContent.nativeElement.querySelectorAll('li > *') : [];\n    }\n\n    constructor(\n        public  elementRef: ElementRef,\n        private _focusMonitor: FocusMonitor,\n        private _platform: Platform,\n        private _cdRef: ChangeDetectorRef\n    ) {\n        super(elementRef);\n    }\n\n    ngOnInit() {\n        this.denyClickIfDisabled();\n\n        this._focusMonitor$ = this._focusMonitor.monitor(this.elementRef.nativeElement, true);\n\n        if (this.hasDropdownContent) {\n            this.listenClickOutside();\n        }\n    }\n\n    ngAfterViewInit() {\n        if (!this.hasDropdownContent) {\n            return;\n        }\n\n        this.startListenFocusDropdownItems();\n    }\n\n    ngOnDestroy() {\n        this._subscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n        this.stopListenFocusDropdownItems();\n    }\n\n    isActiveDropdownLink(link: string): boolean {\n        if (!this._platform.isBrowser) {\n            return false;\n        }\n\n        return window.location.href.indexOf(link) >= 0;\n    }\n\n    handleClickByItem() {\n        this.toggleDropdown();\n    }\n\n    handleKeydown($event: KeyboardEvent) {\n        const isNavbarItem = ($event.target as HTMLElement).classList.contains(MC_NAVBAR_ITEM);\n\n        if (this.hasDropdownContent && $event.keyCode === SPACE && isNavbarItem) {\n            this.toggleDropdown();\n        }\n    }\n\n    handleClickByDropdownItem() {\n        this.forceCloseDropdown();\n    }\n\n    private listenClickOutside() {\n        this._subscription.add(\n            this._focusMonitor$.subscribe((origin) => {\n                if (origin === null) {\n                    this.forceCloseDropdown();\n                }\n            })\n        );\n    }\n\n    private toggleDropdown() {\n        this.isCollapsed = !this.isCollapsed;\n    }\n\n    private forceCloseDropdown() {\n        this.isCollapsed = true;\n        this._cdRef.detectChanges();\n    }\n\n    private startListenFocusDropdownItems() {\n        this._dropdownElements.forEach((el) => {\n            this._focusMonitor.monitor(el, true);\n        });\n    }\n\n    private stopListenFocusDropdownItems() {\n        this._dropdownElements.forEach((el) => {\n            this._focusMonitor.stopMonitoring(el);\n        });\n    }\n\n    // This method is required due to angular 2 issue https://github.com/angular/angular/issues/11200\n    private denyClickIfDisabled() {\n        const events: Event[] = this.elementRef.nativeElement.eventListeners('click');\n\n        events.forEach((event) => this.elementRef.nativeElement.removeEventListener('click', event));\n\n        this.elementRef.nativeElement.addEventListener('click', (event: MouseEvent) => {\n            if (this.elementRef.nativeElement.hasAttribute('disabled')) {\n                event.stopImmediatePropagation();\n            }\n        }, true);\n\n        events.forEach((event) => this.elementRef.nativeElement.addEventListener('click', event));\n    }\n}\n\n@Directive({\n    selector: MC_NAVBAR_CONTAINER\n})\nexport class McNavbarContainer {\n    @Input()\n    position: McNavbarContainerPositionType = 'left';\n\n    @HostBinding('class')\n    get cssClasses(): string {\n        return this.position === 'left' ? 'mc-navbar-left' : 'mc-navbar-right';\n    }\n}\n\nclass CollapsibleItem {\n    private _collapsed: boolean = false;\n\n    constructor(\n        public element: HTMLElement,\n        public width: number\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        this._collapsed = collapsed;\n\n        this.updateCollapsedClass();\n    }\n\n    private updateCollapsedClass() {\n        if (this._collapsed) {\n            this.element.classList.add(COLLAPSED_CLASS);\n        } else {\n            this.element.classList.remove(COLLAPSED_CLASS);\n        }\n\n    }\n}\n\nclass CachedItemWidth {\n\n    get canCollapse(): boolean {\n        return this.itemsForCollapse.length > 0;\n    }\n\n    private _collapsedItemsWidth: number;\n\n    get collapsedItemsWidth(): number {\n        if (this._collapsedItemsWidth !== undefined) {\n            return this._collapsedItemsWidth;\n        }\n\n        this.calculateAndCacheCollapsedItemsWidth();\n\n        return this._collapsedItemsWidth;\n    }\n\n    constructor(\n        public element: HTMLElement,\n        public width: number,\n        public itemsForCollapse: CollapsibleItem[] = []\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        if (this.itemsForCollapse.length > 0) {\n            this.updateTitle(collapsed);\n        }\n\n        this.itemsForCollapse.forEach((item) => item.processCollapsed(collapsed));\n    }\n\n    private calculateAndCacheCollapsedItemsWidth() {\n        this._collapsedItemsWidth = this.itemsForCollapse\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getTitle(): string {\n        const computedTitle = this.element.getAttribute('computedTitle');\n\n        return computedTitle\n            ? decodeURI(computedTitle)\n            : (this.itemsForCollapse.length > 0 ? this.itemsForCollapse[0].element.innerText : '');\n    }\n\n    private updateTitle(collapsed: boolean) {\n        if (collapsed) {\n            this.element.setAttribute('title', this.getTitle());\n        } else {\n            this.element.removeAttribute('title');\n        }\n    }\n}\n\n\n@Component({\n    selector: MC_NAVBAR,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    template: `\n        <nav class=\"mc-navbar\">\n            <ng-content select=\"[${MC_NAVBAR_CONTAINER}],${MC_NAVBAR_CONTAINER}\"></ng-content>\n        </nav>\n    `,\n    styleUrls: ['./navbar.css'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class McNavbar implements AfterViewInit, OnDestroy {\n\n    private readonly forceRecalculateItemsWidth: boolean = false;\n    private readonly resizeDebounceInterval: number = 100;\n    private readonly firstLevelElement: string = MC_NAVBAR_CONTAINER;\n    private readonly secondLevelElements: string[] = [\n        MC_NAVBAR_ITEM,\n        MC_NAVBAR_BRAND,\n        MC_NAVBAR_TITLE\n    ];\n\n    private _totalItemsWidths: number;\n    private _itemsWidths: CachedItemWidth[];\n\n    private get maxAllowedWidth(): number {\n        return this._elementRef.nativeElement.querySelector('nav').getBoundingClientRect().width;\n    }\n\n    private get itemsWidths(): CachedItemWidth[] {\n        if (this._itemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._itemsWidths;\n        }\n\n        this.calculateAndCacheItemsWidth();\n\n        return this._itemsWidths;\n    }\n\n    private get totalItemsWidth(): number {\n        if (this._totalItemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._totalItemsWidths;\n        }\n\n        this.calculateAndCacheTotalItemsWidth();\n\n        return this._totalItemsWidths;\n    }\n\n    private _resizeSubscription: Subscription;\n\n    constructor(\n        private _elementRef: ElementRef\n    ) {\n        const resizeObserver = fromEvent(window, 'resize')\n            .pipe(debounceTime(this.resizeDebounceInterval));\n\n        this._resizeSubscription = resizeObserver.subscribe(this.updateCollapsed.bind(this));\n    }\n\n    updateCollapsed(): void {\n        let collapseDelta = this.totalItemsWidth - this.maxAllowedWidth;\n\n        for (let i = this.itemsWidths.length - 1; i >= 0; i--) {\n            const item = this.itemsWidths[i];\n\n            if (!item.canCollapse) {\n                continue;\n            }\n\n            item.processCollapsed(collapseDelta > 0);\n            collapseDelta -= item.collapsedItemsWidth;\n        }\n    }\n\n    ngAfterViewInit(): void {\n        // Note: this wait is required for loading and rendering fonts for icons;\n        // unfortunately we cannot control font rendering\n        setTimeout(() => this.updateCollapsed(), 0);\n    }\n\n    ngOnDestroy() {\n        this._resizeSubscription.unsubscribe();\n    }\n\n    private calculateAndCacheTotalItemsWidth() {\n        this._totalItemsWidths = this.itemsWidths\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getOuterElementWidth(element: HTMLElement): number {\n        const baseWidth  = element.getBoundingClientRect().width;\n        const marginRight = parseInt(getComputedStyle(element).getPropertyValue('margin-right'));\n        const marginLeft = parseInt(getComputedStyle(element).getPropertyValue('margin-left'));\n\n        return baseWidth + marginRight + marginLeft;\n    }\n\n    private calculateAndCacheItemsWidth() {\n        const allItemsSelector = this.secondLevelElements\n            .map((e: string) => `${this.firstLevelElement}>${e}`);\n        const allItems: HTMLElement[] = Array.from(this._elementRef.nativeElement.querySelectorAll(allItemsSelector));\n\n        this._itemsWidths = allItems\n            .map((el) => new CachedItemWidth(el, this.getOuterElementWidth(el), this.getItemsForCollapse(el)));\n    }\n\n    private getItemsForCollapse(element: HTMLElement): CollapsibleItem[] {\n        const icon = element.querySelector(`[${MC_ICON}],${MC_NAVBAR_LOGO},[${MC_NAVBAR_LOGO}]`);\n\n        if (!icon) {\n            return [];\n        }\n\n        return Array.from(element.querySelectorAll(MC_NAVBAR_TITLE))\n            .map((el) => new CollapsibleItem(<HTMLElement> el, el.getBoundingClientRect().width));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McIconModule } from '../icon/icon.module';\n\nimport {\n    McNavbar,\n    McNavbarContainer,\n    McNavbarItem,\n    McNavbarTitle,\n    McNavbarBrand,\n    McNavbarLogo\n} from './navbar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        McIconModule\n    ],\n    exports: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ],\n    declarations: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ]\n})\nexport class McNavbarModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressBarMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressBarBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressBarMixinBase = mixinColor(McProgressBarBase);\n\n@Component({\n    selector: 'mc-progress-bar',\n    templateUrl: './progress-bar.component.html',\n    styleUrls: ['./progress-bar.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-bar',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressBar extends _McProgressBarMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-bar-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressBarMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McProgressBar\n} from './progress-bar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressBar\n    ],\n    declarations: [\n        McProgressBar\n    ]\n})\nexport class McProgressBarModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressSpinnerBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressPinnerMixinBase = mixinColor(McProgressSpinnerBase);\n\nconst MAX_DASH_ARRAY = 273;\n\n@Component({\n    selector: 'mc-progress-spinner',\n    templateUrl: './progress-spinner.component.html',\n    styleUrls: ['./progress-spinner.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-spinner',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressSpinner extends _McProgressPinnerMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-spinner-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressSpinnerMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n\n    get dashOffsetPercent(): string {\n        return `${MAX_DASH_ARRAY - this.percentage * MAX_DASH_ARRAY}%`;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McProgressSpinner } from './progress-spinner.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressSpinner\n    ],\n    declarations: [\n        McProgressSpinner\n    ]\n})\nexport class McProgressSpinnerModule {}\n","import {\n    AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport {\n    CanColor,\n    CanDisable,\n    HasTabIndex,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\nimport { MC_CHECKBOX_CLICK_ACTION, McCheckboxClickAction } from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mc-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McCheckbox),\n    multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n    /** The initial state of the component before any user interaction. */\n    Init,\n    /** The state representing the component when it's becoming checked. */\n    Checked,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate\n}\n\n/** Change event object emitted by McCheckbox. */\nexport class McCheckboxChange {\n    /** The source McCheckbox of the event. */\n    source: McCheckbox;\n    /** The new `checked` value of the checkbox. */\n    checked: boolean;\n}\n\n// Boilerplate for applying mixins to McCheckbox.\n/** @docs-private */\nexport class McCheckboxBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\nexport const _McCheckboxMixinBase =\n    mixinTabIndex(mixinColor(mixinDisabled(McCheckboxBase)));\n\n\n/**\n * A mosaic checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A McCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n */\n@Component({\n    selector: 'mc-checkbox',\n    templateUrl: 'checkbox.html',\n    styleUrls: ['checkbox.css'],\n    exportAs: 'mcCheckbox',\n    host: {\n        class: 'mc-checkbox',\n        '[id]': 'id',\n        '[attr.id]': 'id',\n        '[class.mc-checkbox-indeterminate]': 'indeterminate',\n        '[class.mc-checkbox-checked]': 'checked',\n        '[class.mc-checkbox-disabled]': 'disabled',\n        '[class.mc-checkbox-label-before]': 'labelPosition == \"before\"'\n    },\n    providers: [MC_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCheckbox extends _McCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex {\n\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     */\n    @Input('aria-label') ariaLabel: string = '';\n\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n    private _uniqueId: string = `mc-checkbox-${++nextUniqueId}`;\n\n    /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n    @Input() id: string = this._uniqueId;\n\n    /** Returns the unique id for the visual hidden input. */\n    get inputId(): string {\n        return `${this.id || this._uniqueId}-input`;\n    }\n\n    /** Whether the checkbox is required. */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    private _required: boolean;\n\n    /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n    @Input() labelPosition: 'before' | 'after' = 'after';\n\n    /** Name value will be applied to the input element if present */\n    @Input() name: string | null = null;\n\n    /** Event emitted when the checkbox's `checked` value changes. */\n    @Output() readonly change: EventEmitter<McCheckboxChange> =\n        new EventEmitter<McCheckboxChange>();\n\n    /** Event emitted when the checkbox's `indeterminate` value changes. */\n    @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** The value attribute of the native input element */\n    @Input() value: string;\n\n    /** The native `<input type=\"checkbox\">` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * @docs-private\n     */\n    _onTouched: () => any = () => {\n    }\n\n    private _currentAnimationClass: string = '';\n\n    private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n    private _controlValueAccessorChangeFn: (value: any) => void = () => {\n    }\n\n    constructor(elementRef: ElementRef,\n                private _changeDetectorRef: ChangeDetectorRef,\n                private _focusMonitor: FocusMonitor,\n                @Attribute('tabindex') tabIndex: string,\n                @Optional() @Inject(MC_CHECKBOX_CLICK_ACTION)\n                private _clickAction: McCheckboxClickAction) {\n        super(elementRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._inputElement.nativeElement)\n            .subscribe((focusOrigin) => this._onInputFocusChange(focusOrigin));\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    }\n\n    /**\n     * Whether the checkbox is checked.\n     */\n    @Input()\n    get checked(): boolean {\n        return this._checked;\n    }\n\n    set checked(value: boolean) {\n        if (value != this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _checked: boolean = false;\n\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value != this.disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    @Input()\n    get indeterminate(): boolean {\n        return this._indeterminate;\n    }\n\n    set indeterminate(value: boolean) {\n        const changed = value != this._indeterminate;\n        this._indeterminate = value;\n\n        if (changed) {\n            if (this._indeterminate) {\n                this._transitionCheckState(TransitionCheckState.Indeterminate);\n            } else {\n                this._transitionCheckState(\n                    this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n    }\n\n    private _indeterminate: boolean = false;\n\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // This method is getting called whenever the label of the checkbox changes.\n        // Since the checkbox uses the OnPush strategy we need to notify it about the change\n        // that has been recognized by the cdkObserveContent directive.\n        this._changeDetectorRef.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any) {\n        this.checked = !!value;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this._onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n    }\n\n    _getAriaChecked(): 'true' | 'false' | 'mixed' {\n        return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n    }\n\n    private _transitionCheckState(newState: TransitionCheckState) {\n        const oldState = this._currentCheckState;\n        const element: HTMLElement = this._elementRef.nativeElement;\n\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n\n        this._currentCheckState = newState;\n\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n        }\n    }\n\n    private _emitChangeEvent() {\n        const event = new McCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    }\n\n    /** Function is called whenever the focus changes for the input element. */\n    private _onInputFocusChange(focusOrigin: FocusOrigin) {\n        if (focusOrigin) {\n            this._onTouched();\n        }\n    }\n\n    /** Toggles the `checked` state of the checkbox. */\n    toggle(): void {\n        this.checked = !this.checked;\n    }\n\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event\n     */\n    _onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && this._clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && this._clickAction !== 'check') {\n\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n\n            this.toggle();\n            this._transitionCheckState(\n                this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        } else if (!this.disabled && this._clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mc-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n\n    /** Focuses the checkbox. */\n    focus(): void {\n        this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n    }\n\n    _onInteractionEvent(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n}\n","import {\n    Directive,\n    forwardRef,\n    Provider\n} from '@angular/core';\nimport {\n    CheckboxRequiredValidator,\n    NG_VALIDATORS\n} from '@angular/forms';\n\n\nexport const MC_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McCheckboxRequiredValidator),\n    multi: true\n};\n\n/**\n * Validator for Mosaic checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mc-checkbox`.\n */\n@Directive({\n    selector: `mc-checkbox[required][formControlName],\n             mc-checkbox[required][formControl], mc-checkbox[required][ngModel]`,\n    providers: [MC_CHECKBOX_REQUIRED_VALIDATOR],\n    host: { '[attr.required]': 'required ? \"\" : null' }\n})\nexport class McCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McCheckbox } from './checkbox';\nimport { McCheckboxRequiredValidator } from './checkbox-required-validator';\n\n\n@NgModule({\n    imports: [CommonModule, McCommonModule],\n    exports: [McCheckbox, McCheckboxRequiredValidator, McCommonModule],\n    declarations: [McCheckbox, McCheckboxRequiredValidator]\n})\nexport class McCheckboxModule {\n}\n","import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';\n\nimport { toBoolean } from '@ptsecurity/mosaic/core';\n\n\n@Component({\n    selector: 'mc-divider',\n    host: {\n        class: 'mc-divider',\n        role: 'separator',\n        '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n        '[class.mc-divider-vertical]': 'vertical',\n        '[class.mc-divider-inset]': 'inset'\n    },\n    template: '',\n    styleUrls: ['divider.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false\n})\nexport class McDivider {\n    // Whether the divider is vertically aligned.\n    @Input()\n    get vertical(): boolean {\n        return this._vertical;\n    }\n\n    set vertical(value: boolean) {\n        this._vertical = toBoolean(value);\n    }\n\n    private _vertical: boolean = false;\n\n    // Whether the divider is an inset divider.\n    @Input()\n    get inset(): boolean {\n        return this._inset;\n    }\n\n    set inset(value: boolean) {\n        this._inset = toBoolean(value);\n    }\n\n    private _inset: boolean = false;\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\n\nimport {McCommonModule} from '@ptsecurity/mosaic/core';\n\nimport {McDivider} from './divider.component';\n\n\n@NgModule({\n    imports: [\n        McCommonModule,\n        CommonModule\n    ],\n    exports: [\n        McDivider,\n        McCommonModule\n    ],\n    declarations: [\n        McDivider\n    ]\n})\nexport class McDividerModule {}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-cleaner',\n    template: '<i mc-icon=\"mc-close-M_16\" class=\"mc-cleaner__icon\"></i>'\n})\nexport class McCleaner {\n}\n","import { NgControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\n\n/** An interface which allows a control to work inside of a `MсFormField`. */\nexport abstract class McFormFieldControl<T> {\n    /** The value of the control. */\n    value: T | null;\n\n    /**\n     * Stream that emits whenever the state of the control changes such that the parent `MсFormField`\n     * needs to run change detection.\n     */\n    readonly stateChanges: Observable<void>;\n\n    /** The element ID for this control. */\n    readonly id: string;\n\n    /** The placeholder for this control. */\n    readonly placeholder: string;\n\n    /** Gets the NgControl for this control. */\n    readonly ngControl: NgControl | null;\n\n    /** Whether the control is focused. */\n    readonly focused: boolean;\n\n    /** Whether the control is empty. */\n    readonly empty: boolean;\n\n    /** Whether the control is required. */\n    readonly required: boolean;\n\n    /** Whether the control is disabled. */\n    readonly disabled: boolean;\n\n    /** Whether the control is in an error state. */\n    readonly errorState: boolean;\n\n    /**\n     * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n     * based on their control type. The form field will add a class,\n     * `mat-form-field-type-{{controlType}}` to its root element.\n     */\n    readonly controlType?: string;\n\n    /** Handles a click on the control's container. */\n    abstract onContainerClick(event: MouseEvent): void;\n}\n","import { Directive, Input } from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n@Directive({\n    selector: 'mc-hint',\n    host: {\n        class: 'mc-hint',\n        '[attr.id]': 'id'\n    }\n})\nexport class McHint {\n    @Input() id: string = `mc-hint-${nextUniqueId++}`;\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcPrefix]'\n})\nexport class McPrefix {\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcSuffix]'\n})\nexport class McSuffix {\n}\n","import {\n    AfterContentChecked,\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren, Directive,\n    ElementRef,\n    QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { EMPTY, merge } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n\n\nimport { McCleaner } from './cleaner';\nimport { McFormFieldControl } from './form-field-control';\nimport { getMcFormFieldMissingControlError } from './form-field-errors';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McSuffix } from './suffix';\n\n\nexport class McFormFieldBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\n@Component({\n    selector: 'mc-form-field',\n    exportAs: 'mcFormField',\n    templateUrl: 'form-field.html',\n    // McInput is a directive and can't have styles, so we need to include its styles here.\n    // The McInput styles are fairly minimal so it shouldn't be a big deal for people who\n    // aren't using McInput.\n    styleUrls: [\n        'form-field.css',\n        '../input/input.css'\n    ],\n    host: {\n        class: 'mc-form-field',\n        '[class.mc-form-field_invalid]': '_control.errorState',\n        '[class.mc-form-field_disabled]': '_control.disabled',\n        '[class.mc-form-field_has-prefix]': 'hasPrefix',\n        '[class.mc-form-field_has-suffix]': 'hasSuffix',\n        '[class.mc-form-field_has-cleaner]': 'canShowCleaner',\n        '[class.mc-focused]': '_control.focused',\n        '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n        '[class.ng-touched]': '_shouldForward(\"touched\")',\n        '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n        '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n        '[class.ng-valid]': '_shouldForward(\"valid\")',\n        '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n        '[class.ng-pending]': '_shouldForward(\"pending\")',\n        '(keydown)': 'onKeyDown($event)'\n    },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class McFormField extends McFormFieldBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit {\n\n    @ContentChild(McFormFieldControl) _control: McFormFieldControl<any>;\n    @ContentChildren(McHint) _hint: QueryList<McHint>;\n    @ContentChildren(McSuffix) _suffix: QueryList<McSuffix>;\n    @ContentChildren(McPrefix) _prefix: QueryList<McPrefix>;\n    @ContentChildren(McCleaner) _cleaner: QueryList<McCleaner>;\n\n\n    constructor(\n        public _elementRef: ElementRef,\n        private _changeDetectorRef: ChangeDetectorRef) {\n        super(_elementRef);\n    }\n\n    ngAfterContentInit() {\n        this._validateControlChild();\n        if (this._control.controlType) {\n            this._elementRef.nativeElement.classList\n                .add(`mc-form-field-type-${this._control.controlType}`);\n        }\n\n        // Subscribe to changes in the child control state in order to update the form field UI.\n        this._control.stateChanges.pipe(startWith()).subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n        });\n\n        // Run change detection if the value changes.\n        const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n        merge(valueChanges)\n            .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    ngAfterContentChecked() {\n        this._validateControlChild();\n    }\n\n    ngAfterViewInit() {\n        // Avoid animations on load.\n        this._changeDetectorRef.detectChanges();\n    }\n\n    clearValue($event) {\n        $event.stopPropagation();\n\n        if (this._control && this._control.ngControl) {\n            this._control.ngControl.reset();\n        }\n    }\n\n    onContainerClick($event) {\n        return this._control.onContainerClick && this._control.onContainerClick($event);\n    }\n\n    onKeyDown(e: KeyboardEvent): void {\n        if (e.keyCode === ESCAPE &&\n            this._control.focused &&\n            this.hasCleaner) {\n            if (this._control && this._control.ngControl) {\n                this._control.ngControl.reset();\n            }\n            e.preventDefault();\n        }\n    }\n\n    /** Determines whether a class from the NgControl should be forwarded to the host element. */\n    _shouldForward(prop: string): boolean {\n        const ngControl = this._control ? this._control.ngControl : null;\n\n        return ngControl && ngControl[prop];\n    }\n\n    /** Throws an error if the form field's control is missing. */\n    protected _validateControlChild() {\n        if (!this._control) {\n            throw getMcFormFieldMissingControlError();\n        }\n    }\n\n    get hasHint() {\n        return this._hint && this._hint.length > 0;\n    }\n\n    get hasSuffix() {\n        return this._suffix && this._suffix.length > 0;\n    }\n\n    get hasPrefix() {\n        return this._prefix && this._prefix.length > 0;\n    }\n\n    get hasCleaner() {\n        return this._cleaner && this._cleaner.length > 0;\n    }\n\n    get canShowCleaner() {\n        return  this.hasCleaner &&\n        this._control && this._control.ngControl\n            ? this._control.ngControl.value && !this._control.disabled\n            : false;\n    }\n}\n\n@Directive({\n    selector: 'mc-form-field[mcFormFieldWithoutBorders]',\n    exportAs: 'mcFormFieldWithoutBorders',\n    host: { class: 'mc-form-field_without-borders' }\n})\nexport class McFormFieldWithoutBorders {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McCleaner } from './cleaner';\nimport { McFormField, McFormFieldWithoutBorders } from './form-field';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McSuffix } from './suffix';\n\n\n@NgModule({\n    declarations: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner\n    ],\n    imports: [CommonModule, McIconModule],\n    exports: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner\n    ]\n})\nexport class McFormFieldModule {\n}\n","import { InjectionToken } from '@angular/core';\n\n\nexport const MC_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{ value: any }>('MC_INPUT_VALUE_ACCESSOR');\n","import {\n    Directive, DoCheck, ElementRef, Inject, Input, OnChanges,\n    OnDestroy, OnInit, Optional, Self\n} from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@ptsecurity/cdk/platform';\nimport { CanUpdateErrorState, ErrorStateMatcher, mixinErrorState } from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\n\nimport { getMcInputUnsupportedTypeError } from './input-errors';\nimport { MC_INPUT_VALUE_ACCESSOR } from './input-value-accessor';\n\n\nconst MC_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\n\nlet nextUniqueId = 0;\n\nexport class McInputBase {\n    constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n                public _parentForm: NgForm,\n                public _parentFormGroup: FormGroupDirective,\n                public ngControl: NgControl) {\n    }\n}\n\nexport const _McInputMixinBase = mixinErrorState(McInputBase);\n\n\n@Directive({\n    selector: `input[mcInput]`,\n    exportAs: 'mcInput',\n    host: {\n        'class': 'mc-input',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '(blur)': '_focusChanged(false)',\n        '(focus)': '_focusChanged(true)',\n        '(input)': '_onInput()'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McInput }]\n})\nexport class McInput extends _McInputMixinBase implements McFormFieldControl<any>, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-input';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this._uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    // tslint:disable no-reserved-keywords\n    /** Input type of the element. */\n    @Input()\n    get type(): string {\n        return this._type;\n    }\n\n    set type(value: string) {\n        this._type = value || 'text';\n        this._validateType();\n\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    // tslint:enable no-reserved-keywords\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this._inputValueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n\n    protected _uid = `mc-input-${nextUniqueId++}`;\n    protected _previousNativeValue: any;\n    protected _disabled = false;\n    protected _id: string;\n    protected _required = false;\n    protected _type = 'text';\n    protected _neverEmptyInputTypes = [\n        'date',\n        'datetime',\n        'datetime-local',\n        'month',\n        'time',\n        'week'\n    ].filter((t) => getSupportedInputTypes().has(t));\n\n    private _inputValueAccessor: { value: any };\n\n    constructor(protected _elementRef: ElementRef,\n                protected _platform: Platform,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() _parentForm: NgForm,\n                @Optional() _parentFormGroup: FormGroupDirective,\n                _defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_INPUT_VALUE_ACCESSOR) inputValueAccessor: any) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n        this._previousNativeValue = this.value;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n    }\n\n    /** Focuses the input. */\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Does some manual dirty checking on the native input `value` property. */\n    protected _dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Make sure the input is a supported type. */\n    protected _validateType() {\n        if (MC_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n            throw getMcInputUnsupportedTypeError(this._type);\n        }\n    }\n\n    /** Checks whether the input type is one of the types that are never empty. */\n    protected _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n\n    /** Checks whether the input is invalid based on the native validation. */\n    protected _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        const validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n\n        return validity && validity.badInput;\n    }\n}\n\n@Directive({\n    selector: 'input[mcInputMonospace]',\n    exportAs: 'McInputMonospace',\n    host: { class: 'mc-input_monospace' }\n})\nexport class McInputMono {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McInput, McInputMono } from './input';\n\n\n@NgModule({\n    imports: [ CommonModule, A11yModule, McCommonModule, FormsModule ],\n    exports: [ McInput, McInputMono ],\n    declarations: [ McInput, McInputMono ]\n})\nexport class McInputModule {}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    Output,\n    QueryList,\n    ViewEncapsulation,\n    ChangeDetectorRef,\n    Inject,\n    OnDestroy,\n    OnInit,\n    ViewChild\n} from '@angular/core';\n\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { Subscription } from 'rxjs';\n\nimport { FocusKeyManager, IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { END, ENTER, HOME, PAGE_DOWN, PAGE_UP, SPACE } from '@ptsecurity/cdk/keycodes';\n\nimport {\n    McLine,\n    McLineSetter,\n    CanDisable,\n    mixinDisabled,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n    exportAs: 'mcListOption',\n    selector: 'mc-list-option',\n    host: {\n        tabindex: '-1',\n\n        class: 'mc-list-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': '_hasFocus',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()',\n        '(click)': '_handleClick()'\n    },\n    templateUrl: 'list-option.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListOption implements AfterContentInit, OnDestroy, OnInit, IFocusableOption {\n    _hasFocus: boolean = false;\n\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    @ViewChild('text') _text: ElementRef;\n\n    // Whether the label should appear before or after the checkbox. Defaults to 'after'\n    @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n    @Input() value: any;\n\n    private _focusHandlerInProgress: boolean;\n\n    @Input()\n    get disabled() {\n        return this._disabled || (this.listSelection && this.listSelection.disabled);\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    @Input()\n    get selected(): boolean {\n        return this.listSelection.selectedOptions && this.listSelection.selectedOptions.isSelected(this) || false;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            this.listSelection._reportValueChange();\n        }\n    }\n\n    private _lineSetter: McLineSetter;\n    private _selected = false;\n    private _disabled = false;\n\n    constructor(\n        private _element: ElementRef,\n        private _changeDetector: ChangeDetectorRef,\n        @Inject(forwardRef(() => McListSelection))\n        public listSelection: McListSelection\n    ) {}\n\n    ngOnInit() {\n        if (this._selected) {\n            // List options that are selected at initialization can't be reported properly to the form\n            // control. This is because it takes some time until the selection-list knows about all\n            // available options. Also it can happen that the ControlValueAccessor has an initial value\n            // that should be used instead. Deferring the value change report to the next tick ensures\n            // that the form control value is not being overwritten.\n            const wasSelected = this._selected;\n\n            Promise.resolve().then(() => {\n                if (this._selected || wasSelected) {\n                    this.selected = true;\n                    this._changeDetector.markForCheck();\n                }\n            });\n        }\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    ngOnDestroy(): void {\n        if (this.selected) {\n            // We have to delay this until the next tick in order\n            // to avoid changed after checked errors.\n            Promise.resolve().then(() => this.selected = false);\n        }\n\n        this.listSelection._removeOptionFromList(this);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    focus(): void {\n        this._element.nativeElement.focus();\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    getLabel() {\n        return this._text ? this._text.nativeElement.textContent : '';\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.listSelection.selectedOptions) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.listSelection.selectedOptions.select(this);\n        } else {\n            this.listSelection.selectedOptions.deselect(this);\n        }\n\n        this._changeDetector.markForCheck();\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    _handleClick() {\n        if (this.disabled) { return; }\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    _handleFocus() {\n        if (this.disabled || this._hasFocus) { return; }\n\n        this._hasFocus = true;\n    }\n\n    _handleBlur() {\n        this._hasFocus = false;\n\n        this.listSelection._onTouched();\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n\n\nexport const MC_SELECTION_LIST_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McListSelection),\n    multi: true\n};\n\n// Change event that is being fired whenever the selected state of an option changes. */\nexport class McListSelectionChange {\n    constructor(\n        // Reference to the selection list that emitted the event.\n        public source: McListSelection,\n        // Reference to the option that has been changed.\n        public option: McListOption\n    ) {}\n}\n\n\nexport class McListSelectionBase {}\n\nexport const _McListSelectionMixinBase = mixinDisabled(McListSelectionBase);\n\n@Component({\n    exportAs: 'mcListSelection',\n    selector: 'mc-list-selection',\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'tabIndex'],\n    host: {\n        class: 'mc-list-selection',\n        '[tabIndex]': 'tabIndex',\n        '(focus)': 'focus()',\n        '(blur)': '_onTouched()',\n        '(keydown)': '_onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    providers: [MC_SELECTION_LIST_VALUE_ACCESSOR],\n    preserveWhitespaces: false\n})\nexport class McListSelection extends _McListSelectionMixinBase implements\n    IFocusableOption, CanDisable, AfterContentInit, ControlValueAccessor {\n\n    _keyManager: FocusKeyManager<McListOption>;\n\n    // The option components contained within this selection-list.\n    @ContentChildren(McListOption) options: QueryList<McListOption>;\n\n    tabIndex: number;\n\n    autoSelect: boolean;\n    noUnselect: boolean;\n    multiple: boolean;\n\n    // todo temporary solution\n    withShift: boolean;\n    withCtrl: boolean;\n\n    @Input() horizontal: boolean = false;\n\n    // Emits a change event whenever the selected state of an option changes.\n    @Output() readonly selectionChange: EventEmitter<McListSelectionChange> = new EventEmitter<McListSelectionChange>();\n\n    selectedOptions: SelectionModel<McListOption>;\n\n    // Used for storing the values that were assigned before the options were initialized.\n    private _tempValues: string[] | null;\n\n    private _modelChanges = Subscription.EMPTY;\n\n    constructor(\n        private _element: ElementRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string,\n        @Attribute('multiple') multiple: string\n    ) {\n        super();\n\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.multiple = multiple === null ? true : toBoolean(multiple);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.selectedOptions = new SelectionModel<McListOption>(this.multiple);\n    }\n\n    ngAfterContentInit(): void {\n        this.horizontal = toBoolean(this.horizontal);\n\n        this._keyManager = new FocusKeyManager<McListOption>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation(!this.horizontal)\n            .withHorizontalOrientation(this.horizontal ? 'ltr' : null);\n\n        if (this._tempValues) {\n            this._setOptionsFromValues(this._tempValues);\n            this._tempValues = null;\n        }\n\n        // Sync external changes to the model back to the options.\n        this._modelChanges = this.selectedOptions.onChange!.subscribe((event) => {\n            for (const item of event.added) {\n                item.selected = true;\n            }\n\n            for (const item of event.removed) {\n                item.selected = false;\n            }\n        });\n\n        this.updateScrollSize();\n    }\n\n    ngOnDestroy() {\n        this._modelChanges.unsubscribe();\n    }\n\n    focus() {\n        this._element.nativeElement.focus();\n    }\n\n    selectAll() {\n        this.options.forEach((option) => option.setSelected(true));\n\n        this._reportValueChange();\n    }\n\n    deselectAll() {\n        this.options.forEach((option) => option.setSelected(false));\n\n        this._reportValueChange();\n    }\n\n    updateScrollSize(): void {\n        if (this.horizontal || !this.options.first) { return; }\n\n        this._keyManager.withScrollSize(Math.floor(this._getHeight() / this.options.first._getHeight()));\n    }\n\n    // Sets the focused option of the selection-list.\n    setFocusedOption(option: McListOption): void {\n        this._keyManager.updateActiveItem(option);\n\n        if (this.withShift && this.multiple) {\n            const previousIndex = this._keyManager.previousActiveItemIndex;\n            const activeIndex = this._keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n\n            this.withShift = false;\n        } else if (this.withCtrl) {\n            this.withCtrl = false;\n\n            if (!this._canUnselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) {\n                this.options.forEach((item) => item.setSelected(false));\n                option.setSelected(true);\n            }\n        }\n\n        this._emitChangeEvent(option);\n        this._reportValueChange();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(values: string[]): void {\n        if (this.options) {\n            this._setOptionsFromValues(values || []);\n        } else {\n            this._tempValues = values;\n        }\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this._onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this._onTouched = fn;\n    }\n\n    // Implemented as a part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        if (this.options) {\n            this.options.forEach((option) => option.disabled = isDisabled);\n        }\n    }\n\n    getSelectedOptionValues(): string[] {\n        return this.options.filter((option) => option.selected).map((option) => option.value);\n    }\n\n    // Toggles the selected state of the currently focused option.\n    toggleFocusedOption(): void {\n        const focusedIndex = this._keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n            const focusedOption: McListOption = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this._canUnselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this._emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    _canUnselectLast(listOption: McListOption): boolean {\n        return !(this.noUnselect && this.selectedOptions.selected.length === 1 && listOption.selected);\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    // View to model callback that should be called if the list or its options lost focus.\n    _onTouched: () => void = () => {};\n\n    // Removes an option from the selection list and updates the active item.\n    _removeOptionFromList(option: McListOption) {\n        if (option._hasFocus) {\n            const optionIndex = this._getOptionIndex(option);\n\n            // Check whether the option is the last item\n            if (optionIndex > 0) {\n                this._keyManager.setPreviousItemActive();\n            } else if (optionIndex === 0 && this.options.length > 1) {\n                this._keyManager.setNextItemActive();\n            }\n        }\n    }\n\n    _onKeyDown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n        this.withShift = event.shiftKey;\n        this.withCtrl = event.ctrlKey;\n\n        switch (keyCode) {\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                if (!this.horizontal) { this._keyManager.setPreviousPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                if (!this.horizontal) { this._keyManager.setNextPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    // Reports a value change to the ControlValueAccessor\n    _reportValueChange() {\n        if (this.options) {\n            this._onChange(this.getSelectedOptionValues());\n        }\n    }\n\n    // Emits a change event if the selected state of an option changed.\n    _emitChangeEvent(option: McListOption) {\n        this.selectionChange.emit(new McListSelectionChange(this, option));\n    }\n\n    // Returns the option with the specified value.\n    private _getOptionByValue(value: string): McListOption | undefined {\n        return this.options.find((option) => option.value === value);\n    }\n\n    // Sets the selected options based on the specified values.\n    private _setOptionsFromValues(values: string[]) {\n        this.options.forEach((option) => option.setSelected(false));\n\n        values\n            .map((value) => this._getOptionByValue(value))\n            .filter(Boolean)\n            .forEach((option) => option!.setSelected(true));\n    }\n\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private _isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    // Returns the index of the specified list option.\n    private _getOptionIndex(option: McListOption): number {\n        return this.options.toArray().indexOf(option);\n    }\n\n    // View to model callback that should be called whenever the selected options change.\n    private _onChange: (value: any) => void = (_: any) => {};\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","\nexport function isBoolean(val: any): val is boolean { return typeof val === 'boolean'; }\n\nexport function toBoolean(value: any): boolean {\n    return value != null && `${value}` !== 'false';\n}\n","import { NgModule, InjectionToken, Optional, Inject, isDevMode } from '@angular/core';\nimport { BidiModule } from '@ptsecurity/cdk/bidi';\n\n\n// Injection token that configures whether the Mosaic sanity checks are enabled.\nexport const MC_SANITY_CHECKS = new InjectionToken<boolean>('mc-sanity-checks', {\n    providedIn: 'root',\n    factory: MC_SANITY_CHECKS_FACTORY\n});\n\nexport function MC_SANITY_CHECKS_FACTORY(): boolean {\n    return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Mosaic\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n    imports: [ BidiModule ],\n    exports: [ BidiModule ]\n})\nexport class McCommonModule {\n    // Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n    private _hasDoneGlobalChecks = false;\n\n    // Reference to the global `document` object.\n    private _document = typeof document === 'object' && document ? document : null;\n\n    // Reference to the global 'window' object.\n    private _window = typeof window === 'object' && window ? window : null;\n\n    constructor(@Optional() @Inject(MC_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n        if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n            this._checkDoctypeIsDefined();\n            this._checkThemeIsPresent();\n            this._hasDoneGlobalChecks = true;\n        }\n    }\n\n    // Whether any sanity checks are enabled\n    private _areChecksEnabled(): boolean {\n        return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n    }\n\n    // Whether the code is running in tests.\n    private _isTestEnv() {\n        return this._window && (this._window['__karma__'] || this._window['jasmine']);\n    }\n\n    private _checkDoctypeIsDefined(): void {\n        if (this._document && !this._document.doctype) {\n            console.warn(\n                'Current document does not have a doctype. This may cause ' +\n                'some Mosaic components not to behave as expected.'\n            );\n        }\n    }\n\n    private _checkThemeIsPresent(): void {\n        if (this._document && typeof getComputedStyle === 'function') {\n            const testElement = this._document.createElement('div');\n\n            testElement.classList.add('mc-theme-loaded-marker');\n            this._document.body.appendChild(testElement);\n\n            const computedStyle = getComputedStyle(testElement);\n\n            // In some situations, the computed style of the test element can be null. For example in\n            // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n            // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n            if (computedStyle && computedStyle.display !== 'none') {\n                console.warn(\n                    'Could not find Mosaic core theme. Most Mosaic ' +\n                    'components may not work as expected. For more info refer ' +\n                    'to the theming guide: link there'\n                );\n            }\n\n            this._document.body.removeChild(testElement);\n        }\n    }\n}\n","import { toBoolean } from '../utils/index';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanDisable {\n    disabled: boolean;\n}\n\n// Mixin to augment a directive with a `disabled` property.\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n    return class extends base {\n        private _disabled: boolean = false;\n\n        get disabled() {\n            return this._disabled;\n        }\n\n        set disabled(value: any) {\n            this._disabled = toBoolean(value);\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n    };\n}\n","import { ElementRef } from '@angular/core';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanColor {\n    color: ThemePalette;\n}\n\nexport interface HasElementRef {\n    _elementRef: ElementRef;\n}\n\nexport enum ThemePalette {\n    Primary = 'primary',\n    Second = 'second',\n    Warn = 'warn',\n    Default = 'second'\n}\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T, defaultColor: ThemePalette = ThemePalette.Default): Constructor<CanColor> & T {\n    return class extends base {\n        private _color: ThemePalette;\n\n        get color(): ThemePalette {\n            return this._color;\n        }\n\n        set color(value: ThemePalette) {\n            const colorPalette = value || defaultColor;\n\n            if (colorPalette !== this._color) {\n                if (this._color) {\n                    this._elementRef.nativeElement.classList.remove(`mc-${this._color}`);\n                }\n\n                if (colorPalette) {\n                    this._elementRef.nativeElement.classList.add(`mc-${colorPalette}`);\n                }\n\n                this._color = colorPalette;\n            }\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n\n            // Set the default color that can be specified from the mixin.\n            this.color = defaultColor;\n        }\n    };\n}\n\n","import { Constructor } from './constructor';\nimport { CanDisable } from './disabled';\n\n\nexport interface HasTabIndex {\n    tabIndex: number;\n}\n\n// Mixin to augment a directive with a `tabIndex` property.\nexport function mixinTabIndex<\n        T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0): Constructor<HasTabIndex\n    > & T {\n    return class extends base {\n        private _tabIndex: number = defaultTabIndex;\n\n        get tabIndex(): number {\n            return this.disabled ? -1 : this._tabIndex;\n        }\n\n        set tabIndex(value: number) {\n            this._tabIndex = value != null ? value : defaultTabIndex;\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n    };\n}\n","import { FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { ErrorStateMatcher } from '../error/error-options';\nimport { Constructor } from './constructor';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n    readonly stateChanges: Subject<void>;\n    errorState: boolean;\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState();\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n    _parentFormGroup: FormGroupDirective;\n    _parentForm: NgForm;\n    _defaultErrorStateMatcher: ErrorStateMatcher;\n    ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n    : Constructor<CanUpdateErrorState> & T {\n    return class extends base {\n        /** Whether the component is in an error state. */\n        errorState: boolean = false;\n\n        /**\n         * Stream that emits whenever the state of the input changes such that the wrapping\n         * `MсFormField` needs to run change detection.\n         */\n        readonly stateChanges = new Subject<void>();\n\n        errorStateMatcher: ErrorStateMatcher;\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n\n        updateErrorState() {\n            const oldState = this.errorState;\n            const parent = this._parentFormGroup || this._parentForm;\n            const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n            const control = this.ngControl ? this.ngControl.control as FormControl : null;\n            const newState = matcher.isErrorState(control, parent);\n\n            if (newState !== oldState) {\n                this.errorState = newState;\n                this.stateChanges.next();\n            }\n        }\n    };\n}\n","export function getMcFormFieldMissingControlError(): Error {\n  return Error('mc-form-field must contain a McFormFieldControl.');\n}\n","export function getMcInputUnsupportedTypeError(inputType: string): Error {\n    return Error(`Input type \"${inputType}\" isn't supported by mcInput.`);\n}\n","import { NgModule, Directive, ElementRef, QueryList } from '@angular/core';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(McLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n    selector: '[mc-line], [mcLine]',\n    host: { class: 'mc-line' }\n})\nexport class McLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class McLineSetter {\n    constructor(private _lines: QueryList<McLine>, private _element: ElementRef) {\n        this._setLineClass(this._lines.length);\n\n        this._lines.changes.subscribe(() => {\n            this._setLineClass(this._lines.length);\n        });\n    }\n\n    private _setLineClass(count: number): void {\n        this._resetClasses();\n        if (count === 2 || count === 3) {\n            this._setClass(`mc-${count}-line`, true);\n        } else if (count > 3) {\n            this._setClass(`mc-multi-line`, true);\n        }\n    }\n\n    private _resetClasses(): void {\n        this._setClass('mc-2-line', false);\n        this._setClass('mc-3-line', false);\n        this._setClass('mc-multi-line', false);\n    }\n\n    private _setClass(className: string, isAdd: boolean): void {\n        if (isAdd) {\n            this._element.nativeElement.classList.add(className);\n        } else {\n            this._element.nativeElement.classList.remove(className);\n        }\n    }\n}\n\n@NgModule({\n    imports: [],\n    exports: [McLine],\n    declarations: [McLine]\n})\nexport class McLineModule {}\n","import { Injectable } from '@angular/core';\nimport { FormGroupDirective, NgForm, FormControl } from '@angular/forms';\n\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n    }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({ providedIn: 'root' })\nexport class ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n    }\n}\n","import { Component, ViewEncapsulation, Input, ChangeDetectionStrategy } from '@angular/core';\n\n\nexport type McPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mc-primary .mc-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mc-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'mc-pseudo-checkbox',\n    styleUrls: ['pseudo-checkbox.css'],\n    template: '',\n    host: {\n        class: 'mc-pseudo-checkbox',\n        '[class.mc-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n        '[class.mc-pseudo-checkbox-checked]': 'state === \"checked\"',\n        '[class.mc-pseudo-checkbox-disabled]': 'disabled'\n    }\n})\nexport class McPseudoCheckbox {\n    // Display state of the checkbox.\n    @Input() state: McPseudoCheckboxState = 'unchecked';\n\n    // Whether the checkbox is disabled.\n    @Input() disabled: boolean = false;\n}\n","import { NgModule } from '@angular/core';\n\nimport { McPseudoCheckbox } from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n    exports: [McPseudoCheckbox],\n    declarations: [McPseudoCheckbox]\n})\nexport class McPseudoCheckboxModule {}\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    OnDestroy,\n    QueryList,\n    ViewEncapsulation,\n    ContentChildren\n} from '@angular/core';\n\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { Platform } from '@ptsecurity/cdk/platform';\n\nimport { mixinColor, mixinDisabled, CanColor, CanDisable } from '@ptsecurity/mosaic/core';\nimport { McIcon } from '@ptsecurity/mosaic/icon';\n\n\n@Directive({\n    selector: 'button, a[mc-button]',\n    host: { class: 'mc-button mc-olololo' }\n})\nexport class McButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-xs-button], a[mc-xs-button]',\n    host: { class: 'mc-button mc-button_xs' }\n})\nexport class McXSButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-sm-button], a[mc-sm-button]',\n    host: { class: 'mc-button mc-button_sm' }\n})\nexport class McSMButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-lg-button], a[mc-lg-button]',\n    host: { class: 'mc-button mc-button_lg' }\n})\nexport class McLGButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-xl-button], a[mc-xl-button]',\n    host: { class: 'mc-button mc-button_xl' }\n})\nexport class McXLButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-icon-button], a[mc-icon-button]',\n    queries: {\n        contentChildren: new ContentChildren(McIcon)\n    },\n    host: { class: 'mc-icon-button' }\n})\nexport class McIconButtonCSSStyler {\n    nativeElement: Element;\n\n    contentChildren: QueryList<McIcon>;\n\n    constructor(elementRef: ElementRef) {\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        this._addClassModificatorForIcons();\n    }\n\n    _addClassModificatorForIcons() {\n        const twoIcons = 2;\n        const icons = this.contentChildren.map((item) => item._elementRef.nativeElement);\n\n        if (icons.length === 1) {\n            const iconElement = icons[0];\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-icon-button_left');\n                }\n\n                if (iconElement.previousSibling) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-icon-button_right');\n                }\n            }\n        } else if (icons.length === twoIcons) {\n            const firstIconElement = icons[0];\n            const secondIconElement = icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n}\n\n\nexport class McButtonBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McButtonMixinBase = mixinColor(mixinDisabled(McButtonBase));\n\n\n@Component({\n    selector: `\n        button[mc-button],\n        button[mc-xs-button],\n        button[mc-sm-button],\n        button[mc-lg-button],\n        button[mc-xl-button]\n    `,\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[disabled]': 'disabled || null'\n    }\n})\nexport class McButton extends _McButtonMixinBase implements OnDestroy, CanDisable, CanColor {\n    constructor(elementRef: ElementRef, private _platform: Platform, private _focusMonitor: FocusMonitor) {\n        super(elementRef);\n\n        this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this._getHostElement().focus();\n    }\n\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n\n\n@Component({\n    selector: 'a[mc-button], a[mc-xs-button], a[mc-sm-button], a[mc-lg-button], a[mc-xl-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[attr.tabindex]': 'disabled ? -1 : 0',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': '_haltDisabledEvents($event)'\n    }\n})\nexport class McAnchor extends McButton {\n    constructor(platform: Platform, focusMonitor: FocusMonitor, elementRef: ElementRef) {\n        super(elementRef, platform, focusMonitor);\n    }\n\n    _haltDisabledEvents(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\n\n\n@Component({\n    selector: 'button[mc-icon-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[attr.tabindex]': 'disabled ? -1 : 0',\n        '[attr.disabled]': 'disabled || null'\n    }\n})\nexport class McIconButton extends McButton {\n    constructor(platform: Platform, focusMonitor: FocusMonitor, elementRef: ElementRef) {\n        super(elementRef, platform, focusMonitor);\n    }\n\n    _haltDisabledEvents(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McButton,\n    McAnchor,\n    McIconButton,\n    McButtonCSSStyler,\n    McXSButtonCSSStyler,\n    McSMButtonCSSStyler,\n    McLGButtonCSSStyler,\n    McXLButtonCSSStyler,\n    McIconButtonCSSStyler\n} from './button.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McButton,\n        McAnchor,\n        McIconButton,\n        McButtonCSSStyler,\n        McXSButtonCSSStyler,\n        McSMButtonCSSStyler,\n        McLGButtonCSSStyler,\n        McXLButtonCSSStyler,\n        McIconButtonCSSStyler\n    ],\n    declarations: [\n        McButton,\n        McAnchor,\n        McIconButton,\n        McButtonCSSStyler,\n        McXSButtonCSSStyler,\n        McSMButtonCSSStyler,\n        McLGButtonCSSStyler,\n        McXLButtonCSSStyler,\n        McIconButtonCSSStyler\n    ]\n})\nexport class McButtonModule {}\n","import { InjectionToken } from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type McCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MC_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<McCheckboxClickAction>('mc-checkbox-click-action');\n"],"names":["inputs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","exportAs","host","class","[attr.id]","[class.mc-radio-checked]","[class.mc-radio-disabled]","(focus)","type","McRadioGroup","decorators","Optional","ElementRef","ChangeDetectorRef","UniqueSelectionDispatcher","id","Input","name","ariaLabel","args","ariaLabelledby","ariaDescribedby","checked","value","disabled","required","labelPosition","_inputElement","ViewChild","change","Output","isFocused","McRadioButton","_McRadioButtonMixinBase","NgModule","imports","CommonModule","A11yModule","McCommonModule","exports","declarations","McRadioModule","tslib_1.__extends","McTreeNodeDef","_super","Directive","selector","providers","provide","CdkTreeNodeDef","useExisting","data","_this","_baseLeftPadding","_iconWidth","_indent","McTreeNodePadding","Object","defineProperty","prototype","this","_innerIcon","_paddingIndent","nodeLevel","_treeNode","_tree","treeControl","getLevel","level","_level","leftPadding","ngAfterViewInit","_setPadding","CdkTreeNodePadding","indent","McIcon","McTreeNodeOption","_elementRef","treeSelection","call","role","_hasFocus","_disabled","_selected","newValue","toBoolean","selectedOptions","isSelected","setSelected","focus","nativeElement","setFocusedOption","toggle","selected","select","deselect","_handleFocus","_handleBlur","_handleClick","tabindex","[class.mc-selected]","[class.mc-focused]","[attr.aria-expanded]","[attr.aria-level]","(blur)","(click)","CdkTreeNode","McTreeSelection","Inject","forwardRef","_McTreeSelectionBase","mixinTabIndex","mixinDisabled","CdkTree","McTreeNavigationChange","source","option","McTreeSelectionChange","_differs","_changeDetectorRef","tabIndex","multiple","autoSelect","navigationChange","EventEmitter","selectionChange","parseInt","SelectionModel","rawValue","console","log","_onKeyDown","event","keyCode","LEFT_ARROW","_keyManager","activeItem","collapse","preventDefault","RIGHT_ARROW","expand","SPACE","ENTER","toggleFocusedOption","HOME","END","PAGE_UP","PAGE_DOWN","onKeydown","ngAfterContentInit","FocusKeyManager","options","withTypeAhead","withVerticalOrientation","withHorizontalOrientation","updateActiveItem","forEach","item","_emitNavigationEvent","focusedIndex","activeItemIndex","_isValidIndex","focusedOption","toArray","_canUnselectLast","_emitChangeEvent","renderNodeChanges","dataDiffer","viewContainer","parentData","_dataDiffer","_nodeOutlet","arrayOfInstances","_embeddedViews","view","viewDef","def","nodes","node","nodeMatchedQueries","matchedQueryIds","nodeData","nodeIndex","push","reset","notifyOnChanges","emit","index","length","_option","Component","template","[tabIndex]","(keydown)","styles","IterableDiffers","undefined","Attribute","CdkTreeNodeOutlet","ContentChildren","MC_TREE_DIRECTIVES","CdkTreeModule","McTreeModule","McTreeFlattener","transformFunction","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","pipe","take","subscribe","children","child","childParentMap","slice","flattenNodes","structuredData","expandFlattenedNodes","results","currentExpand","i","isExpanded","McTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","next","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","merge","apply","map","disconnect","DataSource","McTreeNestedDataSource","VERSION","Version","McList","McListBase","McListSubheaderCssStyler","McListItemBase","McListItem","_element","_lineSetter","McLineSetter","_lines","classList","add","remove","_getHostElement","preserveWhitespaces","McLine","McListModule","McLineModule","McListSelection","McListOption","McIconCSSStyler","McIconBase","_McIconMixinBase","mixinColor","elementRef","iconName","McIconModule","PlatformModule","MC_NAVBAR_CONTAINER","MC_NAVBAR_ITEM","MC_NAVBAR_BRAND","MC_NAVBAR_TITLE","McNavbarLogo","McNavbarBrand","McNavbarTitle","McNavbarItemBase","_McNavbarMixinBase","McNavbarItem","_focusMonitor","_platform","_cdRef","dropdownItems","isCollapsed","_subscription","Subscription","setAttribute","encodeURI","dropdownContent","querySelectorAll","ngOnInit","denyClickIfDisabled","_focusMonitor$","monitor","hasDropdownContent","listenClickOutside","startListenFocusDropdownItems","ngOnDestroy","unsubscribe","stopMonitoring","stopListenFocusDropdownItems","isActiveDropdownLink","link","isBrowser","window","location","href","indexOf","handleClickByItem","toggleDropdown","handleKeydown","$event","isNavbarItem","contains","handleClickByDropdownItem","forceCloseDropdown","origin","detectChanges","_dropdownElements","el","events","eventListeners","removeEventListener","addEventListener","hasAttribute","stopImmediatePropagation","[attr.disabled]","[attr.tabindex]","FocusMonitor","Platform","collapsedTitle","dropdownItemTmpl","ContentChild","read","TemplateRef","McNavbarContainer","position","cssClasses","HostBinding","CollapsibleItem","element","width","_collapsed","processCollapsed","collapsed","updateCollapsedClass","CachedItemWidth","itemsForCollapse","_collapsedItemsWidth","calculateAndCacheCollapsedItemsWidth","updateTitle","reduce","acc","getTitle","computedTitle","getAttribute","decodeURI","innerText","removeAttribute","McNavbar","forceRecalculateItemsWidth","resizeDebounceInterval","firstLevelElement","secondLevelElements","resizeObserver","fromEvent","debounceTime","_resizeSubscription","updateCollapsed","bind","querySelector","getBoundingClientRect","_itemsWidths","calculateAndCacheItemsWidth","_totalItemsWidths","calculateAndCacheTotalItemsWidth","collapseDelta","totalItemsWidth","maxAllowedWidth","itemsWidths","canCollapse","collapsedItemsWidth","setTimeout","getOuterElementWidth","getComputedStyle","getPropertyValue","allItemsSelector","e","allItems","Array","from","getItemsForCollapse","McNavbarModule","idIterator","McProgressBarBase","_McProgressBarMixinBase","McProgressBar","mode","color","ThemePalette","Primary","get","Math","max","min","McProgressBarModule","McProgressSpinnerBase","_McProgressPinnerMixinBase","McProgressSpinner","percentage","McProgressSpinnerModule","nextUniqueId","McRadioChange","McRadioGroupBase","_McRadioGroupMixinBase","MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","multi","_changeDetector","_value","_name","_isInitialized","_labelPosition","_required","controlValueAccessorChangeFn","onTouched","set","updateRadioButtonNames","v","markRadiosForCheck","updateSelectedRadioFromValue","checkSelectedRadioButton","touch","emitChangeEvent","_radios","radio","markForCheck","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","isAlreadySelected","descendants","McRadioButtonBase","radioGroup","_radioDispatcher","_uniqueId","_checked","removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","onInputClick","stopPropagation","onInputChange","groupValueChanged","MC_CHECKBOX_CLICK_ACTION","indeterminateChange","indeterminate","McCheckbox","_McCheckboxMixinBase","MC_CHECKBOX_REQUIRED_VALIDATOR","NG_VALIDATORS","McCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","McCheckboxModule","McDivider","_vertical","_inset","[attr.aria-orientation]","[class.mc-divider-vertical]","[class.mc-divider-inset]","vertical","inset","McDividerModule","McCleaner","McFormFieldControl","McHint","McPrefix","McSuffix","McFormFieldBase","McFormField","_validateControlChild","_control","controlType","stateChanges","startWith","valueChanges","ngControl","EMPTY","ngAfterContentChecked","clearValue","onContainerClick","onKeyDown","ESCAPE","focused","hasCleaner","_shouldForward","prop","getMcFormFieldMissingControlError","_hint","_suffix","_prefix","_cleaner","[class.mc-form-field_invalid]","[class.mc-form-field_disabled]","[class.mc-form-field_has-prefix]","[class.mc-form-field_has-suffix]","[class.mc-form-field_has-cleaner]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","ctorParameters","propDecorators","McFormFieldWithoutBorders","McFormFieldModule","MC_INPUT_VALUE_ACCESSOR","InjectionToken","MC_INPUT_INVALID_TYPES","McInputBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","_McInputMixinBase","mixinErrorState","McInput","inputValueAccessor","Subject","_uid","_type","_neverEmptyInputTypes","filter","t","getSupportedInputTypes","has","_inputValueAccessor","_previousNativeValue","coerceBooleanProperty","_id","_validateType","ngOnChanges","complete","ngDoCheck","updateErrorState","_dirtyCheckNativeValue","_focusChanged","_onInput","_isNeverEmpty","_isBadInput","getMcInputUnsupportedTypeError","validity","badInput","[attr.placeholder]","[disabled]","[required]","(input)","NgControl","Self","NgForm","FormGroupDirective","ErrorStateMatcher","errorStateMatcher","placeholder","McInputMono","FormsModule","McInputModule","listSelection","checkboxPosition","_reportValueChange","wasSelected_1","Promise","resolve","then","_removeOptionFromList","getLabel","_text","textContent","_getHeight","getClientRects","height","_onTouched","MC_SELECTION_LIST_VALUE_ACCESSOR","McListSelectionChange","McListSelectionBase","_McListSelectionMixinBase","noUnselect","horizontal","_modelChanges","_onChange","_","_tempValues","_setOptionsFromValues","_i","_a","added","_b","_c","removed","updateScrollSize","selectAll","deselectAll","first","withScrollSize","floor","withShift","previousIndex_1","previousActiveItemIndex","activeIndex_1","withCtrl","values","getSelectedOptionValues","listOption","optionIndex","_getOptionIndex","setPreviousItemActive","setNextItemActive","shiftKey","ctrlKey","setFirstItemActive","setLastItemActive","setPreviousPageItemActive","setNextPageItemActive","_getOptionByValue","find","Boolean","(window:resize)","__extends","d","b","__","constructor","extendStatics","create","isBoolean","val","MC_SANITY_CHECKS_FACTORY","base","class_1","arguments","defaultColor","Default","_color","colorPalette","defaultTabIndex","_tabIndex","errorState","oldState","parent","matcher","control","newState","isErrorState","Error","inputType","setPrototypeOf","__proto__","p","hasOwnProperty","MC_SANITY_CHECKS","providedIn","factory","_sanityChecksEnabled","_hasDoneGlobalChecks","_document","document","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","isDevMode","_isTestEnv","doctype","warn","testElement","createElement","body","appendChild","computedStyle","display","removeChild","BidiModule","Second","Warn","_setLineClass","count","_resetClasses","_setClass","className","isAdd","ShowOnDirtyErrorStateMatcher","form","invalid","dirty","submitted","Injectable","touched","state","[class.mc-pseudo-checkbox-indeterminate]","[class.mc-pseudo-checkbox-checked]","[class.mc-pseudo-checkbox-disabled]","McPseudoCheckbox","McPseudoCheckboxModule","McButtonCSSStyler","McXSButtonCSSStyler","McSMButtonCSSStyler","McLGButtonCSSStyler","McXLButtonCSSStyler","McIconButtonCSSStyler","_addClassModificatorForIcons","icons","contentChildren","iconElement","previousElementSibling","nextElementSibling","nextSibling","previousSibling","firstIconElement","secondIconElement","queries","McButtonBase","_McButtonMixinBase","McButton","McAnchor","platform","focusMonitor","_haltDisabledEvents","McIconButton","McButtonModule","MC_CHECKBOX_CONTROL_VALUE_ACCESSOR","TransitionCheckState","McCheckboxChange","McCheckboxBase","_clickAction","_currentAnimationClass","_currentCheckState","Init","_controlValueAccessorChangeFn","_indeterminate","focusOrigin","_onInputFocusChange","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_onLabelTextChange","_getAriaChecked","_onInputClick","focusVia","_onInteractionEvent","[id]","[class.mc-checkbox-indeterminate]","[class.mc-checkbox-checked]","[class.mc-checkbox-disabled]","[class.mc-checkbox-label-before]"],"mappings":"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"}