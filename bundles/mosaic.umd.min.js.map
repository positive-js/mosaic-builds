{"version":3,"file":"mosaic.umd.min.js","sources":["../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree-selection.ts","../../src/lib/tree/tree.module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/list/list.component.ts","../../src/lib/list/list.module.ts","../../src/lib/navbar/navbar.component.ts","../../src/lib/navbar/navbar.module.ts","../../src/lib/progress-bar/progress-bar.component.ts","../../src/lib/progress-bar/progress-bar.module.ts","../../src/lib/progress-spinner/progress-spinner.component.ts","../../src/lib/progress-spinner/progress-spinner.module.ts","../../src/lib/radio/radio.component.ts","../../src/lib/radio/radio.module.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/divider/divider.component.ts","../../src/lib/divider/divider.module.ts","../../src/lib/form-field/cleaner.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field.module.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input.module.ts","../../src/lib/list/list-selection.component.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/utils/utils.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/core/line/line.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/icon/icon.component.ts","../../src/lib/icon/icon.module.ts","../../src/lib/button/button.component.ts","../../src/lib/button/button.module.ts","../../src/lib/link/link.component.ts","../../src/lib/link/link.module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts"],"sourcesContent":["import { Directive, Input } from '@angular/core';\n\nimport { CdkTreeNodeDef } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodeDef]',\n    inputs: ['when: mcTreeNodeDefWhen'],\n    providers: [{ provide: CdkTreeNodeDef, useExisting: McTreeNodeDef }]\n})\nexport class McTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n    @Input('mcTreeNode') data: T;\n}\n","import { Directive, Input, OnInit } from '@angular/core';\nimport { CdkTreeNodePadding } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodePadding]',\n    providers: [{ provide: CdkTreeNodePadding, useExisting: McTreeNodePadding }]\n})\nexport class McTreeNodePadding<T> extends CdkTreeNodePadding<T> implements OnInit {\n    get leftPadding(): number {\n        return (this._withIcon ? 0 : this._iconWidth) + this._baseLeftPadding;\n    }\n\n    _baseLeftPadding: number = 6;\n    _iconWidth: number = 20;\n    _indent: number = 16;\n\n    @Input('mcTreeNodePadding') level: number;\n\n    @Input('mcTreeNodePaddingIndent') indent: number;\n\n    _withIcon: boolean;\n\n    _paddingIndent(): string | null {\n        const nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)\n            ? this._tree.treeControl.getLevel(this._treeNode.data)\n            : null;\n\n        const level = this._level || nodeLevel;\n\n        return level ? `${(level * this._indent) + this.leftPadding}px` : `${this._baseLeftPadding}px`;\n    }\n\n    ngOnInit(): void {\n        this._withIcon = this._tree.treeControl.isExpandable(this._treeNode.data);\n        this._setPadding();\n    }\n}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, ContentChildren, EventEmitter, forwardRef, Input, IterableDiffer,\n    IterableDiffers, Output, QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    Directive, ElementRef, Inject\n} from '@angular/core';\nimport { NodeDef, ViewData } from '@angular/core/src/view';\n\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { CdkTreeNode, CdkTree, CdkTreeNodeOutlet } from '@ptsecurity/cdk/tree';\n\nimport { CanDisable, HasTabIndex, mixinDisabled, mixinTabIndex, toBoolean } from '@ptsecurity/mosaic/core';\n\nimport { FocusKeyManager } from '@ptsecurity/cdk/a11y';\n\nimport { END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, SPACE } from '@ptsecurity/cdk/keycodes';\n\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n    exportAs: 'mcTreeNodeOption',\n    selector: 'mc-tree-node-option',\n    host: {\n        tabindex: '-1',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': '_hasFocus',\n        '[attr.aria-expanded]': 'isExpanded',\n        '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n        class: 'mc-tree-node',\n\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()',\n\n        '(click)': '_handleClick()'\n    },\n    providers: [\n        { provide: CdkTreeNode, useExisting: McTreeNodeOption }\n    ]\n})\nexport class McTreeNodeOption<T> extends CdkTreeNode<T> implements CanDisable {\n    @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n        }\n    }\n\n    @Input()\n    get selected(): boolean {\n        return this.treeSelection.selectedOptions && this.treeSelection.selectedOptions.isSelected(this) || false;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            // this.treeSelection._reportValueChange();\n        }\n    }\n\n    private _hasFocus: boolean = false;\n\n    private _disabled: boolean = false;\n    private _selected: boolean = false;\n\n    constructor(\n        protected _elementRef: ElementRef,\n        @Inject(forwardRef(() => McTreeSelection))\n        protected treeSelection: McTreeSelection<T>\n    ) {\n        super(_elementRef, treeSelection);\n    }\n\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n\n        this.treeSelection.setFocusedOption(this);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.treeSelection.selectedOptions) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.treeSelection.selectedOptions.select(this);\n        } else {\n            this.treeSelection.selectedOptions.deselect(this);\n        }\n\n        // this._changeDetector.markForCheck();\n    }\n\n    _getHeight(): number {\n        return this._elementRef.nativeElement.getClientRects()[0].height;\n    }\n\n    _handleFocus(): void {\n        if (this.disabled || this._hasFocus) { return; }\n\n        this._hasFocus = true;\n    }\n\n    _handleBlur(): void {\n        this._hasFocus = false;\n    }\n\n    _handleClick(): void {\n        if (this.disabled) { return; }\n\n        this.treeSelection.setFocusedOption(this);\n    }\n}\n\nexport const _McTreeSelectionBase = mixinTabIndex(mixinDisabled(CdkTree));\n\nexport class McTreeNavigationChange {\n    constructor(\n        public source: McTreeSelection<any>,\n        public option: McTreeNodeOption<any>\n    ) {}\n}\n\nexport class McTreeSelectionChange {\n    constructor(\n        public source: McTreeSelection<any>,\n        public option: McTreeNodeOption<any>\n    ) {}\n}\n\n@Component({\n    exportAs: 'mcTreeSelection',\n    selector: 'mc-tree-selection',\n    template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n    host: {\n        '[tabIndex]': 'tabIndex',\n        class: 'mc-tree-selection',\n        role: 'tree-selection',\n        '(keydown)': '_onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    styleUrls: ['./tree.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{ provide: CdkTree, useExisting: McTreeSelection }]\n})\nexport class McTreeSelection<T> extends _McTreeSelectionBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex {\n    // Outlets within the tree's template where the dataNodes will be inserted.\n    @ViewChild(CdkTreeNodeOutlet) _nodeOutlet: CdkTreeNodeOutlet;\n\n    @ContentChildren(forwardRef(() => McTreeNodeOption)) options: QueryList<McTreeNodeOption<T>>;\n\n    _keyManager: FocusKeyManager<McTreeNodeOption<T>>;\n\n    selectedOptions: SelectionModel<McTreeNodeOption<T>>;\n\n    _disabled: boolean = false;\n    tabIndex: number;\n    multiple: boolean;\n    autoSelect: boolean;\n    noUnselect: boolean;\n\n    // todo temporary solution\n    withShift: boolean;\n    withCtrl: boolean;\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(rawValue: boolean) {\n        const value = toBoolean(rawValue);\n\n        if (this._disabled !== value) {\n            this._disabled = value;\n\n            if (this._disabled) {\n                console.log('need disable all options');\n            } else {\n                console.log('need enable all options');\n            }\n        }\n    }\n\n    @Output() readonly navigationChange = new EventEmitter<McTreeNavigationChange>();\n\n    @Output() readonly selectionChange = new EventEmitter<McTreeSelectionChange>();\n\n    constructor(\n        private _elementRef: ElementRef,\n        _differs: IterableDiffers,\n        _changeDetectorRef: ChangeDetectorRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('multiple') multiple: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string\n    ) {\n        super(_differs, _changeDetectorRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.multiple = multiple === null ? true : toBoolean(multiple);\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.selectedOptions = new SelectionModel<McTreeNodeOption<T>>(this.multiple);\n    }\n\n    _onKeyDown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n        this.withShift = event.shiftKey;\n        this.withCtrl = event.ctrlKey;\n\n        switch (keyCode) {\n            case LEFT_ARROW:\n                if (this._keyManager.activeItem) {\n                    this.treeControl.collapse(this._keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                break;\n            case RIGHT_ARROW:\n                if (this._keyManager.activeItem) {\n                    this.treeControl.expand(this._keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                break;\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                this._keyManager.setPreviousPageItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                this._keyManager.setNextPageItemActive();\n                event.preventDefault();\n\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    ngAfterContentInit(): void {\n        this._keyManager = new FocusKeyManager<McTreeNodeOption<T>>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation(true)\n            .withHorizontalOrientation(null);\n    }\n\n    updateScrollSize(): void {\n        if (!this.options.first) { return; }\n\n        this._keyManager.withScrollSize(Math.floor(this._getHeight() / this.options.first._getHeight()));\n    }\n\n    setFocusedOption(option: McTreeNodeOption<T>): void {\n        this._keyManager.updateActiveItem(option);\n\n        if (this.withShift && this.multiple) {\n            const previousIndex = this._keyManager.previousActiveItemIndex;\n            const activeIndex = this._keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n\n            this.withShift = false;\n        } else if (this.withCtrl) {\n            this.withCtrl = false;\n\n            if (!this._canDeselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) {\n                this.options.forEach((item) => item.setSelected(false));\n                option.setSelected(true);\n            }\n        }\n\n        this._emitNavigationEvent(option);\n    }\n\n    // Toggles the selected state of the currently focused option.\n    toggleFocusedOption(): void {\n        const focusedIndex = this._keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n            const focusedOption: McTreeNodeOption<T> = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this._canDeselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this._emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    renderNodeChanges(\n        data: T[],\n        dataDiffer: IterableDiffer<T> = this._dataDiffer,\n        viewContainer: any = this._nodeOutlet.viewContainer,\n        parentData?: T\n    ) {\n        super.renderNodeChanges(data, dataDiffer, viewContainer, parentData);\n\n        const arrayOfInstances = [];\n\n        viewContainer._embeddedViews.forEach((view: ViewData) => {\n            const viewDef = view.def;\n\n            viewDef.nodes.forEach((node: NodeDef) => {\n                if (viewDef.nodeMatchedQueries === node.matchedQueryIds) {\n                    const nodeData: any = view.nodes[node.nodeIndex];\n\n                    arrayOfInstances.push(nodeData.instance as never);\n                }\n            });\n        });\n\n        if (this.options) {\n            this.options.reset(arrayOfInstances);\n            this.options.notifyOnChanges();\n        }\n\n        this.updateScrollSize();\n    }\n\n    _getHeight(): number {\n        return this._elementRef.nativeElement.getClientRects()[0].height;\n    }\n\n    _emitNavigationEvent(option: McTreeNodeOption<T>): void {\n        this.navigationChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    _emitChangeEvent(option: McTreeNodeOption<T>): void {\n        this.selectionChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private _isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    private _canDeselectLast(option: McTreeNodeOption<T>): boolean {\n        return !(this.noUnselect && this.selectedOptions.selected.length === 1 && option.selected);\n    }\n}\n\n","import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { CdkTreeModule } from '@ptsecurity/cdk/tree';\n\nimport { McTreeNodeDef } from './node';\nimport { McTreeNodePadding } from './padding';\nimport { McTreeSelection, McTreeNodeOption } from './tree-selection';\n\n\nconst MC_TREE_DIRECTIVES = [\n    McTreeNodeDef,\n    McTreeNodePadding,\n    McTreeSelection,\n    McTreeNodeOption\n];\n\n@NgModule({\n    imports: [CommonModule, CdkTreeModule],\n    exports: MC_TREE_DIRECTIVES,\n    declarations: MC_TREE_DIRECTIVES\n})\nexport class McTreeModule {}\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { FlatTreeControl, ITreeControl } from '@ptsecurity/cdk/tree';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class McTreeFlattener<T, F> {\n\n    constructor(public transformFunction: (node: T, level: number) => F,\n                public getLevel: (node: F) => number,\n                public isExpandable: (node: F) => boolean,\n                public getChildren: (node: T) => Observable<T[]>) {\n    }\n\n    _flattenNode(node: T, level: number,\n                 resultNodes: F[], parentMap: boolean[]): F[] {\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n\n        if (this.isExpandable(flatNode)) {\n            this.getChildren(node).pipe(take(1)).subscribe((children) => {\n                children.forEach((child, index) => {\n                    const childParentMap: boolean[] = parentMap.slice();\n                    childParentMap.push(index !== children.length - 1);\n                    this._flattenNode(child, level + 1, resultNodes, childParentMap);\n                });\n            });\n        }\n\n        return resultNodes;\n    }\n\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n    flattenNodes(structuredData: T[]): F[] {\n        const resultNodes: F[] = [];\n        structuredData.forEach((node) => this._flattenNode(node, 0, resultNodes, []));\n\n        return resultNodes;\n    }\n\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n    expandFlattenedNodes(nodes: F[], treeControl: ITreeControl<F>): F[] {\n        const results: F[] = [];\n        const currentExpand: boolean[] = [];\n        currentExpand[0] = true;\n\n        nodes.forEach((node) => {\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n\n            if (expand) { results.push(node); }\n\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        });\n\n        return results;\n    }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `McTree`.\n * The nested tree nodes of type `T` are flattened through `MсTreeFlattener`, and converted\n * to type `F` for `McTree` to consume.\n */\nexport class McTreeFlatDataSource<T, F> extends DataSource<F> {\n    _flattenedData = new BehaviorSubject<F[]>([]);\n\n    _expandedData = new BehaviorSubject<F[]>([]);\n\n    _data: BehaviorSubject<T[]>;\n\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n        this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n        this.treeControl.dataNodes = this._flattenedData.value;\n    }\n\n    constructor(private treeControl: FlatTreeControl<F>,\n                private treeFlattener: McTreeFlattener<T, F>,\n                initialData: T[] = []) {\n        super();\n        this._data = new BehaviorSubject<T[]>(initialData);\n    }\n\n    connect(collectionViewer: ICollectionViewer): Observable<F[]> {\n        const changes = [\n            collectionViewer.viewChange,\n            this.treeControl.expansionModel.onChange!,\n            this._flattenedData\n        ];\n\n        return merge(...changes).pipe(map(() => {\n            this._expandedData.next(\n                this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n\n            return this._expandedData.value;\n        }));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by ITreeControl and each non-leaf node.\n */\nexport class McTreeNestedDataSource<T> extends DataSource<T> {\n    _data = new BehaviorSubject<T[]>([]);\n\n    /**\n     * Data for the nested tree\n     */\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n    }\n\n    connect(collectionViewer: ICollectionViewer): Observable<T[]> {\n        return merge(...[collectionViewer.viewChange, this._data])\n            .pipe(map(() => this.data));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import { Version } from '@angular/core';\n\n\nexport const VERSION = new Version('0.0.1-6e1fff3');\n","// todo пока не делаем, перенесено из материала, но у нас в доках таких простых списков нет.\nimport {\n    AfterContentInit, ChangeDetectionStrategy, Component, ContentChildren, Directive, ElementRef, QueryList,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { McLine, McLineSetter } from '@ptsecurity/mosaic/core';\n\n\nexport class McListBase {}\n\n@Component({\n    selector: 'mc-list',\n    host: { class: 'mc-list' },\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McList extends McListBase {}\n\n\n/**\n * Directive whose purpose is to add the mc- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n    selector: '[mc-subheader], [mcSubheader]',\n    host: { class: 'mc-subheader' }\n})\nexport class McListSubheaderCssStyler {}\n\n\n// Boilerplate for applying mixins to McListItem.\nexport class McListItemBase {}\n\n@Component({\n    selector: 'mc-list-item, a[mc-list-item]',\n    host: {\n        class: 'mc-list-item',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()'\n    },\n    templateUrl: './list-item.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListItem extends McListItemBase implements AfterContentInit {\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    private _lineSetter: McLineSetter;\n\n    constructor(private _element: ElementRef) {\n        super();\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    _handleFocus() {\n        this._element.nativeElement.classList.add('mc-focused');\n    }\n\n    _handleBlur() {\n        this._element.nativeElement.classList.remove('mc-focused');\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLineModule } from '@ptsecurity/mosaic/core';\n\nimport { McListSelection, McListOption } from './list-selection.component';\nimport { McList, McListItem, McListSubheaderCssStyler } from './list.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        McLineModule\n    ],\n    exports: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ],\n    declarations: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ]\n})\nexport class McListModule {}\n","import { fromEvent, Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nimport {\n    AfterViewInit,\n    Component, Directive,\n    ElementRef,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    ViewEncapsulation,\n    ContentChild,\n    TemplateRef,\n    ChangeDetectorRef,\n    ChangeDetectionStrategy,\n    ViewChild\n} from '@angular/core';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { SPACE } from '@ptsecurity/cdk/keycodes';\nimport { Platform } from '@ptsecurity/cdk/platform';\nimport { CanDisable, mixinDisabled } from '@ptsecurity/mosaic/core';\n\n\nconst COLLAPSED_CLASS: string = 'mc-navbar-collapsed-title';\nconst MC_ICON = 'mc-icon';\nconst MC_NAVBAR = 'mc-navbar';\nconst MC_NAVBAR_CONTAINER = 'mc-navbar-container';\nconst MC_NAVBAR_ITEM = 'mc-navbar-item';\nconst MC_NAVBAR_BRAND = 'mc-navbar-brand';\nconst MC_NAVBAR_TITLE = 'mc-navbar-title';\nconst MC_NAVBAR_LOGO = 'mc-navbar-logo';\n\nexport type McNavbarContainerPositionType = 'left' | 'right';\n\nexport interface IMcNavbarDropdownItem {\n    link?: string;\n    text: string;\n}\n\n@Directive({\n    selector: MC_NAVBAR_LOGO,\n    host: {\n        class: MC_NAVBAR_LOGO\n    }\n})\nexport class McNavbarLogo {}\n\n@Directive({\n    selector: MC_NAVBAR_BRAND,\n    host: {\n        class: MC_NAVBAR_BRAND\n    }\n})\nexport class McNavbarBrand {}\n\n@Directive({\n    selector: MC_NAVBAR_TITLE,\n    host: {\n        class: MC_NAVBAR_TITLE\n    }\n})\nexport class McNavbarTitle {}\n\nexport class McNavbarItemBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McNavbarMixinBase = mixinDisabled(McNavbarItemBase);\n\n@Component({\n    selector: MC_NAVBAR_ITEM,\n    template: `\n        <a\n            [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\n            (click)=\"handleClickByItem()\"\n            (keydown)=\"handleKeydown($event)\"\n            class=\"mc-navbar-item\"\n        >\n            <ng-content></ng-content>\n            <i *ngIf=\"hasDropdownContent\" mc-icon=\"mc-angle-M_16\"></i>\n        </a>\n        <ul\n            #dropdownContent\n            *ngIf=\"hasDropdownContent\"\n            [ngClass]=\"{ 'is-collapsed': isCollapsed }\"\n            class=\"mc-navbar-dropdown\"\n        >\n            <li\n                *ngFor=\"let item of dropdownItems\"\n                (click)=\"handleClickByDropdownItem()\"\n                class=\"mc-navbar-dropdown-item\"\n            >\n                <ng-container *ngIf=\"dropdownItemTmpl\">\n                    <ng-container *ngTemplateOutlet=\"dropdownItemTmpl; context: { $implicit: item }\"></ng-container>\n                </ng-container>\n                <a\n                    *ngIf=\"!dropdownItemTmpl\"\n                    [attr.href]=\"item.link\"\n                    [ngClass]=\"{ 'is-active': isActiveDropdownLink(item.link) }\"\n                    class=\"mc-navbar-dropdown-link\"\n                >{{ item.text }}</a>\n            </li>\n        </ul>\n    `,\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': '-1'\n    }\n})\nexport class McNavbarItem extends _McNavbarMixinBase implements OnInit, AfterViewInit, OnDestroy, CanDisable {\n\n    @Input()\n    tabIndex: number = 0;\n\n    @Input()\n    dropdownItems: IMcNavbarDropdownItem[] = [];\n\n    @Input()\n    set collapsedTitle(value: string) {\n        this.elementRef.nativeElement.setAttribute('computedTitle', encodeURI(value));\n    }\n\n    @ContentChild('dropdownItemTmpl', { read: TemplateRef })\n    dropdownItemTmpl: TemplateRef<IMcNavbarDropdownItem>;\n\n    @ViewChild('dropdownContent', { read: ElementRef })\n    dropdownContent: ElementRef;\n\n    get hasDropdownContent() {\n        return this.dropdownItems.length > 0;\n    }\n\n    isCollapsed: boolean = true;\n\n    private _subscription: Subscription = new Subscription();\n    private _focusMonitor$: Observable<FocusOrigin>;\n    private _lastFocusedElement: HTMLElement;\n\n    private get _dropdownElements(): HTMLElement[] {\n        return this.dropdownContent ? this.dropdownContent.nativeElement.querySelectorAll('li > *') : [];\n    }\n\n    constructor(\n        public  elementRef: ElementRef,\n        private _focusMonitor: FocusMonitor,\n        private _platform: Platform,\n        private _cdRef: ChangeDetectorRef\n    ) {\n        super(elementRef);\n    }\n\n    ngOnInit() {\n        this.denyClickIfDisabled();\n\n        this._focusMonitor$ = this._focusMonitor.monitor(this.elementRef.nativeElement, true);\n\n        if (this.hasDropdownContent) {\n            this.listenClickOutside();\n        }\n    }\n\n    ngAfterViewInit() {\n        if (!this.hasDropdownContent) {\n            return;\n        }\n\n        this.startListenFocusDropdownItems();\n    }\n\n    ngOnDestroy() {\n        this._subscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n        this.stopListenFocusDropdownItems();\n    }\n\n    isActiveDropdownLink(link: string): boolean {\n        if (!this._platform.isBrowser) {\n            return false;\n        }\n\n        return window.location.href.indexOf(link) >= 0;\n    }\n\n    handleClickByItem() {\n        this.toggleDropdown();\n    }\n\n    handleKeydown($event: KeyboardEvent) {\n        const isNavbarItem = ($event.target as HTMLElement).classList.contains(MC_NAVBAR_ITEM);\n\n        if (this.hasDropdownContent && $event.keyCode === SPACE && isNavbarItem) {\n            this.toggleDropdown();\n        }\n    }\n\n    handleClickByDropdownItem() {\n        this.forceCloseDropdown();\n    }\n\n    private listenClickOutside() {\n        this._subscription.add(\n            this._focusMonitor$.subscribe((origin) => {\n                if (origin === null) {\n                    this.forceCloseDropdown();\n                }\n            })\n        );\n    }\n\n    private toggleDropdown() {\n        this.isCollapsed = !this.isCollapsed;\n    }\n\n    private forceCloseDropdown() {\n        this.isCollapsed = true;\n        this._cdRef.detectChanges();\n    }\n\n    private startListenFocusDropdownItems() {\n        this._dropdownElements.forEach((el) => {\n            this._focusMonitor.monitor(el, true);\n        });\n    }\n\n    private stopListenFocusDropdownItems() {\n        this._dropdownElements.forEach((el) => {\n            this._focusMonitor.stopMonitoring(el);\n        });\n    }\n\n    // This method is required due to angular 2 issue https://github.com/angular/angular/issues/11200\n    private denyClickIfDisabled() {\n        const events: Event[] = this.elementRef.nativeElement.eventListeners('click');\n\n        events.forEach((event) => this.elementRef.nativeElement.removeEventListener('click', event));\n\n        this.elementRef.nativeElement.addEventListener('click', (event: MouseEvent) => {\n            if (this.elementRef.nativeElement.hasAttribute('disabled')) {\n                event.stopImmediatePropagation();\n            }\n        }, true);\n\n        events.forEach((event) => this.elementRef.nativeElement.addEventListener('click', event));\n    }\n}\n\n@Directive({\n    selector: MC_NAVBAR_CONTAINER\n})\nexport class McNavbarContainer {\n    @Input()\n    position: McNavbarContainerPositionType = 'left';\n\n    @HostBinding('class')\n    get cssClasses(): string {\n        return this.position === 'left' ? 'mc-navbar-left' : 'mc-navbar-right';\n    }\n}\n\nclass CollapsibleItem {\n    private _collapsed: boolean = false;\n\n    constructor(\n        public element: HTMLElement,\n        public width: number\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        this._collapsed = collapsed;\n\n        this.updateCollapsedClass();\n    }\n\n    private updateCollapsedClass() {\n        if (this._collapsed) {\n            this.element.classList.add(COLLAPSED_CLASS);\n        } else {\n            this.element.classList.remove(COLLAPSED_CLASS);\n        }\n\n    }\n}\n\nclass CachedItemWidth {\n\n    get canCollapse(): boolean {\n        return this.itemsForCollapse.length > 0;\n    }\n\n    private _collapsedItemsWidth: number;\n\n    get collapsedItemsWidth(): number {\n        if (this._collapsedItemsWidth !== undefined) {\n            return this._collapsedItemsWidth;\n        }\n\n        this.calculateAndCacheCollapsedItemsWidth();\n\n        return this._collapsedItemsWidth;\n    }\n\n    constructor(\n        public element: HTMLElement,\n        public width: number,\n        public itemsForCollapse: CollapsibleItem[] = []\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        if (this.itemsForCollapse.length > 0) {\n            this.updateTitle(collapsed);\n        }\n\n        this.itemsForCollapse.forEach((item) => item.processCollapsed(collapsed));\n    }\n\n    private calculateAndCacheCollapsedItemsWidth() {\n        this._collapsedItemsWidth = this.itemsForCollapse\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getTitle(): string {\n        const computedTitle = this.element.getAttribute('computedTitle');\n\n        return computedTitle\n            ? decodeURI(computedTitle)\n            : (this.itemsForCollapse.length > 0 ? this.itemsForCollapse[0].element.innerText : '');\n    }\n\n    private updateTitle(collapsed: boolean) {\n        if (collapsed) {\n            this.element.setAttribute('title', this.getTitle());\n        } else {\n            this.element.removeAttribute('title');\n        }\n    }\n}\n\n\n@Component({\n    selector: MC_NAVBAR,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    template: `\n        <nav class=\"mc-navbar\">\n            <ng-content select=\"[${MC_NAVBAR_CONTAINER}],${MC_NAVBAR_CONTAINER}\"></ng-content>\n        </nav>\n    `,\n    styleUrls: ['./navbar.css'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class McNavbar implements AfterViewInit, OnDestroy {\n\n    private readonly forceRecalculateItemsWidth: boolean = false;\n    private readonly resizeDebounceInterval: number = 100;\n    private readonly firstLevelElement: string = MC_NAVBAR_CONTAINER;\n    private readonly secondLevelElements: string[] = [\n        MC_NAVBAR_ITEM,\n        MC_NAVBAR_BRAND,\n        MC_NAVBAR_TITLE\n    ];\n\n    private _totalItemsWidths: number;\n    private _itemsWidths: CachedItemWidth[];\n\n    private get maxAllowedWidth(): number {\n        return this._elementRef.nativeElement.querySelector('nav').getBoundingClientRect().width;\n    }\n\n    private get itemsWidths(): CachedItemWidth[] {\n        if (this._itemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._itemsWidths;\n        }\n\n        this.calculateAndCacheItemsWidth();\n\n        return this._itemsWidths;\n    }\n\n    private get totalItemsWidth(): number {\n        if (this._totalItemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._totalItemsWidths;\n        }\n\n        this.calculateAndCacheTotalItemsWidth();\n\n        return this._totalItemsWidths;\n    }\n\n    private _resizeSubscription: Subscription;\n\n    constructor(\n        private _elementRef: ElementRef\n    ) {\n        const resizeObserver = fromEvent(window, 'resize')\n            .pipe(debounceTime(this.resizeDebounceInterval));\n\n        this._resizeSubscription = resizeObserver.subscribe(this.updateCollapsed.bind(this));\n    }\n\n    updateCollapsed(): void {\n        let collapseDelta = this.totalItemsWidth - this.maxAllowedWidth;\n\n        for (let i = this.itemsWidths.length - 1; i >= 0; i--) {\n            const item = this.itemsWidths[i];\n\n            if (!item.canCollapse) {\n                continue;\n            }\n\n            item.processCollapsed(collapseDelta > 0);\n            collapseDelta -= item.collapsedItemsWidth;\n        }\n    }\n\n    ngAfterViewInit(): void {\n        // Note: this wait is required for loading and rendering fonts for icons;\n        // unfortunately we cannot control font rendering\n        setTimeout(() => this.updateCollapsed(), 0);\n    }\n\n    ngOnDestroy() {\n        this._resizeSubscription.unsubscribe();\n    }\n\n    private calculateAndCacheTotalItemsWidth() {\n        this._totalItemsWidths = this.itemsWidths\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getOuterElementWidth(element: HTMLElement): number {\n        const baseWidth  = element.getBoundingClientRect().width;\n        const marginRight = parseInt(getComputedStyle(element).getPropertyValue('margin-right'));\n        const marginLeft = parseInt(getComputedStyle(element).getPropertyValue('margin-left'));\n\n        return baseWidth + marginRight + marginLeft;\n    }\n\n    private calculateAndCacheItemsWidth() {\n        const allItemsSelector = this.secondLevelElements\n            .map((e: string) => `${this.firstLevelElement}>${e}`);\n        const allItems: HTMLElement[] = Array.from(this._elementRef.nativeElement.querySelectorAll(allItemsSelector));\n\n        this._itemsWidths = allItems\n            .map((el) => new CachedItemWidth(el, this.getOuterElementWidth(el), this.getItemsForCollapse(el)));\n    }\n\n    private getItemsForCollapse(element: HTMLElement): CollapsibleItem[] {\n        const icon = element.querySelector(`[${MC_ICON}],${MC_NAVBAR_LOGO},[${MC_NAVBAR_LOGO}]`);\n\n        if (!icon) {\n            return [];\n        }\n\n        return Array.from(element.querySelectorAll(MC_NAVBAR_TITLE))\n            .map((el) => new CollapsibleItem(<HTMLElement> el, el.getBoundingClientRect().width));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport {\n    McNavbar,\n    McNavbarContainer,\n    McNavbarItem,\n    McNavbarTitle,\n    McNavbarBrand,\n    McNavbarLogo\n} from './navbar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        McIconModule\n    ],\n    exports: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ],\n    declarations: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ]\n})\nexport class McNavbarModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressBarMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressBarBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressBarMixinBase = mixinColor(McProgressBarBase);\n\n@Component({\n    selector: 'mc-progress-bar',\n    templateUrl: './progress-bar.component.html',\n    styleUrls: ['./progress-bar.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-bar',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressBar extends _McProgressBarMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-bar-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressBarMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McProgressBar\n} from './progress-bar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressBar\n    ],\n    declarations: [\n        McProgressBar\n    ]\n})\nexport class McProgressBarModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressSpinnerBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressPinnerMixinBase = mixinColor(McProgressSpinnerBase);\n\nconst MAX_DASH_ARRAY = 273;\n\n@Component({\n    selector: 'mc-progress-spinner',\n    templateUrl: './progress-spinner.component.html',\n    styleUrls: ['./progress-spinner.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-spinner',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressSpinner extends _McProgressPinnerMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-spinner-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressSpinnerMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n\n    get dashOffsetPercent(): string {\n        return `${MAX_DASH_ARRAY - this.percentage * MAX_DASH_ARRAY}%`;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McProgressSpinner } from './progress-spinner.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressSpinner\n    ],\n    declarations: [\n        McProgressSpinner\n    ]\n})\nexport class McProgressSpinnerModule {}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef,\n    Input, OnDestroy, OnInit, Optional, Output, QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { UniqueSelectionDispatcher } from '@ptsecurity/cdk/collections';\n\nimport {\n    CanColor,\n    CanDisable,\n    HasTabIndex,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/** Change event object emitted by McRadio. */\nexport class McRadioChange {\n    constructor(\n        /** The McRadioButton that emits the change event. */\n        public source: McRadioButton,\n        /** The value of the McRadioButton. */\n        public value: any) {}\n}\n\n// Boilerplate for applying mixins to McRadioGroup.\n/** @docs-private */\nexport class McRadioGroupBase {}\nexport const _McRadioGroupMixinBase = mixinDisabled(McRadioGroupBase);\n\n/**\n * Provider Expression that allows mc-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McRadioGroup),\n    multi: true\n};\n\n@Directive({\n    selector: 'mc-radio-group',\n    exportAs: 'mcRadioGroup',\n    providers: [MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n    host: {\n        role: 'radiogroup',\n        class: 'mc-radio-group'\n    },\n    inputs: ['disabled']\n})\nexport class McRadioGroup extends _McRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    @Input()\n    get name(): string { return this._name; }\n    set name(value: string) {\n        this._name = value;\n        this.updateRadioButtonNames();\n    }\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this.markRadiosForCheck();\n    }\n\n    /** Value of the radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n\n            this.updateSelectedRadioFromValue();\n            this.checkSelectedRadioButton();\n        }\n    }\n\n    /** Whether the radio button is selected. */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: McRadioButton | null) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this.checkSelectedRadioButton();\n    }\n\n    /** Whether the radio group is disabled */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /** Whether the radio group is required */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** Child radio buttons. */\n    @ContentChildren(forwardRef(() => McRadioButton), { descendants: true })\n    _radios: QueryList<McRadioButton>;\n\n    /**\n     * Selected value for group. Should equal the value of the selected radio button if there *is*\n     * a corresponding radio button with a matching value. If there is *not* such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    private _value: any = null;\n\n    /** The HTML name attribute applied to radio buttons in this group. */\n    private _name: string = `mc-radio-group-${nextUniqueId++}`;\n\n    /** The currently selected radio button. Should match value. */\n    private _selected: McRadioButton | null = null;\n\n    /** Whether the `value` has been set to its initial value. */\n    private _isInitialized: boolean = false;\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    private _labelPosition: 'before' | 'after' = 'after';\n\n    /** Whether the radio group is disabled. */\n    private _disabled: boolean = false;\n\n    /** Whether the radio group is required. */\n    private _required: boolean = false;\n\n    constructor(\n        private readonly _changeDetector: ChangeDetectorRef\n    ) {\n        super();\n    }\n\n    /** The method to be called in order to update ngModel */\n    // tslint:disable-next-line\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @docs-private\n     */\n    // tslint:disable-next-line\n    onTouched: () => any = () => {};\n\n    checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on McRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the McRadioGroup.\n        this._isInitialized = true;\n    }\n\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        if (this._isInitialized) {\n            this.change.emit(new McRadioChange(this._selected!, this._value));\n        }\n    }\n\n    markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach((radio) => radio.markForCheck());\n        }\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n\n    private updateRadioButtonNames(): void {\n        if (this._radios) {\n            this._radios.forEach((radio) => {\n                radio.name = this.name;\n            });\n        }\n    }\n\n    /** Updates the `selected` radio button from the internal _value state. */\n    private updateSelectedRadioFromValue(): void {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n        if (this._radios != null && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach((radio) => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n}\n\n\n// Boilerplate for applying mixins to McRadioButton.\n/** @docs-private */\nexport class McRadioButtonBase {\n    // Since the disabled property is manually defined for the McRadioButton and isn't set up in\n    // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n    // defined to properly work.\n    disabled: boolean;\n\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McRadioButtonMixinBase =\n    mixinColor(mixinTabIndex(McRadioButtonBase));\n\n\n@Component({\n    selector: 'mc-radio-button',\n    templateUrl: 'radio.component.html',\n    styleUrls: ['radio.css'],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    exportAs: 'mcRadioButton',\n    host: {\n        class: 'mc-radio-button',\n        '[attr.id]': 'id',\n        '[class.mc-radio-checked]': 'checked',\n        '[class.mc-radio-disabled]': 'disabled',\n        '(focus)': '_inputElement.nativeElement.focus()'\n    }\n})\nexport class McRadioButton extends _McRadioButtonMixinBase\n    implements OnInit, OnDestroy, CanColor, HasTabIndex {\n\n    private readonly _uniqueId: string = `mc-radio-${++nextUniqueId}`;\n\n    /* tslint:disable:member-ordering */\n\n    /** The unique ID for the radio button. */\n    @Input() id: string = this._uniqueId;\n\n    /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n    @Input() name: string;\n\n    /** Used to set the 'aria-label' attribute on the underlying input element. */\n    @Input('aria-label') ariaLabel: string;\n\n    /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n    @Input('aria-labelledby') ariaLabelledby: string;\n\n    /** The 'aria-describedby' attribute is read after the element's label and field type. */\n    @Input('aria-describedby') ariaDescribedby: string;\n\n    /** Whether this radio button is checked. */\n    @Input()\n    get checked(): boolean { return this._checked; }\n    set checked(value: boolean) {\n        const newCheckedState = toBoolean(value);\n\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** The value of this radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(value: any) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup != null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n\n    /** Whether the radio button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n    }\n    set disabled(value: boolean) {\n        const newDisabledState = toBoolean(value);\n\n        if (this._disabled !== newDisabledState) {\n\n            this._disabled = newDisabledState;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** Whether the radio button is required. */\n    @Input()\n    get required(): boolean {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    private _labelPosition: 'before' | 'after';\n\n    /** The native `<input type=radio>` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** The parent radio group. May or may not be present. */\n    radioGroup: McRadioGroup;\n\n    @Input()\n    isFocused: boolean = false;\n\n    /** ID of the native input element inside `<mc-radio-button>` */\n    get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n    /** Whether this radio is checked. */\n    private _checked: boolean = false;\n\n    /** Whether this radio is disabled. */\n    private _disabled: boolean;\n\n    /** Whether this radio is required. */\n    private _required: boolean;\n\n    /** Value assigned to this radio. */\n    private _value: any = null;\n\n    /** Unregister function for _radioDispatcher */\n    // tslint:disable-next-line\n    private readonly removeUniqueSelectionListener: () => void = () => {};\n\n    constructor(\n        @Optional() radioGroup: McRadioGroup,\n        elementRef: ElementRef,\n        private readonly _changeDetector: ChangeDetectorRef,\n        private readonly _radioDispatcher: UniqueSelectionDispatcher\n    ) {\n\n        super(elementRef);\n\n        this.radioGroup = radioGroup;\n\n        this.removeUniqueSelectionListener =\n            _radioDispatcher.listen((id: string, name: string) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n\n    ngOnDestroy() {\n        this.removeUniqueSelectionListener();\n    }\n\n    /** Focuses the radio button. */\n    // tslint:disable-next-line\n    focus(): void {}\n\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n\n    onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n\n    onInputChange(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this.emitChangeEvent();\n\n        if (this.radioGroup) {\n            this.radioGroup.controlValueAccessorChangeFn(this.value);\n            this.radioGroup.touch();\n            if (groupValueChanged) {\n                this.radioGroup.emitChangeEvent();\n            }\n        }\n    }\n\n    /** Dispatch change event with current value. */\n    private emitChangeEvent(): void {\n        this.change.emit(new McRadioChange(this, this._value));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McRadioButton, McRadioGroup } from './radio.component';\n\n\n@NgModule({\n    imports: [ CommonModule, A11yModule, McCommonModule ],\n    exports: [ McRadioGroup, McRadioButton, McCommonModule ],\n    declarations: [ McRadioGroup, McRadioButton ]\n})\nexport class McRadioModule {}\n","import {\n    Directive,\n    forwardRef,\n    Provider\n} from '@angular/core';\nimport {\n    CheckboxRequiredValidator,\n    NG_VALIDATORS\n} from '@angular/forms';\n\n\nexport const MC_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McCheckboxRequiredValidator),\n    multi: true\n};\n\n/**\n * Validator for Mosaic checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mc-checkbox`.\n */\n@Directive({\n    selector: `mc-checkbox[required][formControlName],\n             mc-checkbox[required][formControl], mc-checkbox[required][ngModel]`,\n    providers: [MC_CHECKBOX_REQUIRED_VALIDATOR],\n    host: { '[attr.required]': 'required ? \"\" : null' }\n})\nexport class McCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McCheckbox } from './checkbox';\nimport { McCheckboxRequiredValidator } from './checkbox-required-validator';\n\n\n@NgModule({\n    imports: [CommonModule, McCommonModule],\n    exports: [McCheckbox, McCheckboxRequiredValidator, McCommonModule],\n    declarations: [McCheckbox, McCheckboxRequiredValidator]\n})\nexport class McCheckboxModule {\n}\n","import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';\n\nimport { toBoolean } from '@ptsecurity/mosaic/core';\n\n\n@Component({\n    selector: 'mc-divider',\n    host: {\n        class: 'mc-divider',\n        role: 'separator',\n        '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n        '[class.mc-divider-vertical]': 'vertical',\n        '[class.mc-divider-inset]': 'inset'\n    },\n    template: '',\n    styleUrls: ['divider.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false\n})\nexport class McDivider {\n    // Whether the divider is vertically aligned.\n    @Input()\n    get vertical(): boolean {\n        return this._vertical;\n    }\n\n    set vertical(value: boolean) {\n        this._vertical = toBoolean(value);\n    }\n\n    private _vertical: boolean = false;\n\n    // Whether the divider is an inset divider.\n    @Input()\n    get inset(): boolean {\n        return this._inset;\n    }\n\n    set inset(value: boolean) {\n        this._inset = toBoolean(value);\n    }\n\n    private _inset: boolean = false;\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\n\nimport {McCommonModule} from '@ptsecurity/mosaic/core';\n\nimport {McDivider} from './divider.component';\n\n\n@NgModule({\n    imports: [\n        McCommonModule,\n        CommonModule\n    ],\n    exports: [\n        McDivider,\n        McCommonModule\n    ],\n    declarations: [\n        McDivider\n    ]\n})\nexport class McDividerModule {}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-cleaner',\n    template: '<i mc-icon=\"mc-close-M_16\" class=\"mc-cleaner__icon\"></i>'\n})\nexport class McCleaner {\n}\n","import { NgControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\n\n/** An interface which allows a control to work inside of a `MсFormField`. */\nexport abstract class McFormFieldControl<T> {\n    /** The value of the control. */\n    value: T | null;\n\n    /**\n     * Stream that emits whenever the state of the control changes such that the parent `MсFormField`\n     * needs to run change detection.\n     */\n    readonly stateChanges: Observable<void>;\n\n    /** The element ID for this control. */\n    readonly id: string;\n\n    /** The placeholder for this control. */\n    readonly placeholder: string;\n\n    /** Gets the NgControl for this control. */\n    readonly ngControl: NgControl | null;\n\n    /** Whether the control is focused. */\n    readonly focused: boolean;\n\n    /** Whether the control is empty. */\n    readonly empty: boolean;\n\n    /** Whether the control is required. */\n    readonly required: boolean;\n\n    /** Whether the control is disabled. */\n    readonly disabled: boolean;\n\n    /** Whether the control is in an error state. */\n    readonly errorState: boolean;\n\n    /**\n     * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n     * based on their control type. The form field will add a class,\n     * `mat-form-field-type-{{controlType}}` to its root element.\n     */\n    readonly controlType?: string;\n\n    /** Handles a click on the control's container. */\n    abstract onContainerClick(event: MouseEvent): void;\n}\n","import { Directive, Input } from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n@Directive({\n    selector: 'mc-hint',\n    host: {\n        class: 'mc-hint',\n        '[attr.id]': 'id'\n    }\n})\nexport class McHint {\n    @Input() id: string = `mc-hint-${nextUniqueId++}`;\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcPrefix]'\n})\nexport class McPrefix {\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcSuffix]'\n})\nexport class McSuffix {\n}\n","import {\n    AfterContentChecked,\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren, Directive,\n    ElementRef,\n    QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { EMPTY, merge } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n\n\nimport { McCleaner } from './cleaner';\nimport { McFormFieldControl } from './form-field-control';\nimport { getMcFormFieldMissingControlError } from './form-field-errors';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McSuffix } from './suffix';\n\n\nexport class McFormFieldBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\n@Component({\n    selector: 'mc-form-field',\n    exportAs: 'mcFormField',\n    templateUrl: 'form-field.html',\n    // McInput is a directive and can't have styles, so we need to include its styles here.\n    // The McInput styles are fairly minimal so it shouldn't be a big deal for people who\n    // aren't using McInput.\n    styleUrls: [\n        'form-field.css',\n        '../input/input.css'\n    ],\n    host: {\n        class: 'mc-form-field',\n        '[class.mc-form-field_invalid]': '_control.errorState',\n        '[class.mc-form-field_disabled]': '_control.disabled',\n        '[class.mc-form-field_has-prefix]': 'hasPrefix',\n        '[class.mc-form-field_has-suffix]': 'hasSuffix',\n        '[class.mc-form-field_has-cleaner]': 'canShowCleaner',\n        '[class.mc-focused]': '_control.focused',\n        '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n        '[class.ng-touched]': '_shouldForward(\"touched\")',\n        '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n        '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n        '[class.ng-valid]': '_shouldForward(\"valid\")',\n        '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n        '[class.ng-pending]': '_shouldForward(\"pending\")',\n        '(keydown)': 'onKeyDown($event)'\n    },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class McFormField extends McFormFieldBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit {\n\n    @ContentChild(McFormFieldControl) _control: McFormFieldControl<any>;\n    @ContentChildren(McHint) _hint: QueryList<McHint>;\n    @ContentChildren(McSuffix) _suffix: QueryList<McSuffix>;\n    @ContentChildren(McPrefix) _prefix: QueryList<McPrefix>;\n    @ContentChildren(McCleaner) _cleaner: QueryList<McCleaner>;\n\n\n    constructor(\n        public _elementRef: ElementRef,\n        private _changeDetectorRef: ChangeDetectorRef) {\n        super(_elementRef);\n    }\n\n    ngAfterContentInit() {\n        this._validateControlChild();\n        if (this._control.controlType) {\n            this._elementRef.nativeElement.classList\n                .add(`mc-form-field-type-${this._control.controlType}`);\n        }\n\n        // Subscribe to changes in the child control state in order to update the form field UI.\n        this._control.stateChanges.pipe(startWith()).subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n        });\n\n        // Run change detection if the value changes.\n        const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n        merge(valueChanges)\n            .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    ngAfterContentChecked() {\n        this._validateControlChild();\n    }\n\n    ngAfterViewInit() {\n        // Avoid animations on load.\n        this._changeDetectorRef.detectChanges();\n    }\n\n    clearValue($event) {\n        $event.stopPropagation();\n\n        if (this._control && this._control.ngControl) {\n            this._control.ngControl.reset();\n        }\n    }\n\n    onContainerClick($event) {\n        return this._control.onContainerClick && this._control.onContainerClick($event);\n    }\n\n    onKeyDown(e: KeyboardEvent): void {\n        if (e.keyCode === ESCAPE &&\n            this._control.focused &&\n            this.hasCleaner) {\n            if (this._control && this._control.ngControl) {\n                this._control.ngControl.reset();\n            }\n            e.preventDefault();\n        }\n    }\n\n    /** Determines whether a class from the NgControl should be forwarded to the host element. */\n    _shouldForward(prop: string): boolean {\n        const ngControl = this._control ? this._control.ngControl : null;\n\n        return ngControl && ngControl[prop];\n    }\n\n    /** Throws an error if the form field's control is missing. */\n    protected _validateControlChild() {\n        if (!this._control) {\n            throw getMcFormFieldMissingControlError();\n        }\n    }\n\n    get hasHint() {\n        return this._hint && this._hint.length > 0;\n    }\n\n    get hasSuffix() {\n        return this._suffix && this._suffix.length > 0;\n    }\n\n    get hasPrefix() {\n        return this._prefix && this._prefix.length > 0;\n    }\n\n    get hasCleaner() {\n        return this._cleaner && this._cleaner.length > 0;\n    }\n\n    get canShowCleaner() {\n        return  this.hasCleaner &&\n        this._control && this._control.ngControl\n            ? this._control.ngControl.value && !this._control.disabled\n            : false;\n    }\n}\n\n@Directive({\n    selector: 'mc-form-field[mcFormFieldWithoutBorders]',\n    exportAs: 'mcFormFieldWithoutBorders',\n    host: { class: 'mc-form-field_without-borders' }\n})\nexport class McFormFieldWithoutBorders {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McCleaner } from './cleaner';\nimport { McFormField, McFormFieldWithoutBorders } from './form-field';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McSuffix } from './suffix';\n\n\n@NgModule({\n    declarations: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner\n    ],\n    imports: [CommonModule, McIconModule],\n    exports: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner\n    ]\n})\nexport class McFormFieldModule {\n}\n","import { InjectionToken } from '@angular/core';\n\n\nexport const MC_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{ value: any }>('MC_INPUT_VALUE_ACCESSOR');\n","import {\n    Directive, DoCheck, ElementRef, Inject, Input, OnChanges,\n    OnDestroy, OnInit, Optional, Self\n} from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@ptsecurity/cdk/platform';\nimport { CanUpdateErrorState, ErrorStateMatcher, mixinErrorState } from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\n\nimport { getMcInputUnsupportedTypeError } from './input-errors';\nimport { MC_INPUT_VALUE_ACCESSOR } from './input-value-accessor';\n\n\nconst MC_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\n\nlet nextUniqueId = 0;\n\nexport class McInputBase {\n    constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n                public _parentForm: NgForm,\n                public _parentFormGroup: FormGroupDirective,\n                public ngControl: NgControl) {\n    }\n}\n\nexport const _McInputMixinBase = mixinErrorState(McInputBase);\n\n\n@Directive({\n    selector: `input[mcInput]`,\n    exportAs: 'mcInput',\n    host: {\n        'class': 'mc-input',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '(blur)': '_focusChanged(false)',\n        '(focus)': '_focusChanged(true)',\n        '(input)': '_onInput()'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McInput }]\n})\nexport class McInput extends _McInputMixinBase implements McFormFieldControl<any>, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-input';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this._uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    // tslint:disable no-reserved-keywords\n    /** Input type of the element. */\n    @Input()\n    get type(): string {\n        return this._type;\n    }\n\n    set type(value: string) {\n        this._type = value || 'text';\n        this._validateType();\n\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    // tslint:enable no-reserved-keywords\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this._inputValueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n\n    protected _uid = `mc-input-${nextUniqueId++}`;\n    protected _previousNativeValue: any;\n    protected _disabled = false;\n    protected _id: string;\n    protected _required = false;\n    protected _type = 'text';\n    protected _neverEmptyInputTypes = [\n        'date',\n        'datetime',\n        'datetime-local',\n        'month',\n        'time',\n        'week'\n    ].filter((t) => getSupportedInputTypes().has(t));\n\n    private _inputValueAccessor: { value: any };\n\n    constructor(protected _elementRef: ElementRef,\n                protected _platform: Platform,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() _parentForm: NgForm,\n                @Optional() _parentFormGroup: FormGroupDirective,\n                _defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_INPUT_VALUE_ACCESSOR) inputValueAccessor: any) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n        this._previousNativeValue = this.value;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n    }\n\n    /** Focuses the input. */\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Does some manual dirty checking on the native input `value` property. */\n    protected _dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Make sure the input is a supported type. */\n    protected _validateType() {\n        if (MC_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n            throw getMcInputUnsupportedTypeError(this._type);\n        }\n    }\n\n    /** Checks whether the input type is one of the types that are never empty. */\n    protected _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n\n    /** Checks whether the input is invalid based on the native validation. */\n    protected _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        const validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n\n        return validity && validity.badInput;\n    }\n}\n\n@Directive({\n    selector: 'input[mcInputMonospace]',\n    exportAs: 'McInputMonospace',\n    host: { class: 'mc-input_monospace' }\n})\nexport class McInputMono {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McInput, McInputMono } from './input';\n\n\n@NgModule({\n    imports: [ CommonModule, A11yModule, McCommonModule, FormsModule ],\n    exports: [ McInput, McInputMono ],\n    declarations: [ McInput, McInputMono ]\n})\nexport class McInputModule {}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    Output,\n    QueryList,\n    ViewEncapsulation,\n    ChangeDetectorRef,\n    Inject,\n    OnDestroy,\n    OnInit,\n    ViewChild\n} from '@angular/core';\n\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { Subscription } from 'rxjs';\n\nimport { FocusKeyManager, IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { END, ENTER, HOME, PAGE_DOWN, PAGE_UP, SPACE } from '@ptsecurity/cdk/keycodes';\n\nimport {\n    McLine,\n    McLineSetter,\n    CanDisable,\n    mixinDisabled,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n    exportAs: 'mcListOption',\n    selector: 'mc-list-option',\n    host: {\n        tabindex: '-1',\n\n        class: 'mc-list-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': '_hasFocus',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()',\n        '(click)': '_handleClick()'\n    },\n    templateUrl: 'list-option.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListOption implements AfterContentInit, OnDestroy, OnInit, IFocusableOption {\n    _hasFocus: boolean = false;\n\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    @ViewChild('text') _text: ElementRef;\n\n    // Whether the label should appear before or after the checkbox. Defaults to 'after'\n    @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n    @Input() value: any;\n\n    private _focusHandlerInProgress: boolean;\n\n    @Input()\n    get disabled() {\n        return this._disabled || (this.listSelection && this.listSelection.disabled);\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    @Input()\n    get selected(): boolean {\n        return this.listSelection.selectedOptions && this.listSelection.selectedOptions.isSelected(this) || false;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            this.listSelection._reportValueChange();\n        }\n    }\n\n    private _lineSetter: McLineSetter;\n    private _selected = false;\n    private _disabled = false;\n\n    constructor(\n        private _element: ElementRef,\n        private _changeDetector: ChangeDetectorRef,\n        @Inject(forwardRef(() => McListSelection))\n        public listSelection: McListSelection\n    ) {}\n\n    ngOnInit() {\n        if (this._selected) {\n            // List options that are selected at initialization can't be reported properly to the form\n            // control. This is because it takes some time until the selection-list knows about all\n            // available options. Also it can happen that the ControlValueAccessor has an initial value\n            // that should be used instead. Deferring the value change report to the next tick ensures\n            // that the form control value is not being overwritten.\n            const wasSelected = this._selected;\n\n            Promise.resolve().then(() => {\n                if (this._selected || wasSelected) {\n                    this.selected = true;\n                    this._changeDetector.markForCheck();\n                }\n            });\n        }\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    ngOnDestroy(): void {\n        if (this.selected) {\n            // We have to delay this until the next tick in order\n            // to avoid changed after checked errors.\n            Promise.resolve().then(() => this.selected = false);\n        }\n\n        this.listSelection._removeOptionFromList(this);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    focus(): void {\n        this._element.nativeElement.focus();\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    getLabel() {\n        return this._text ? this._text.nativeElement.textContent : '';\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.listSelection.selectedOptions) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.listSelection.selectedOptions.select(this);\n        } else {\n            this.listSelection.selectedOptions.deselect(this);\n        }\n\n        this._changeDetector.markForCheck();\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    _handleClick() {\n        if (this.disabled) { return; }\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    _handleFocus() {\n        if (this.disabled || this._hasFocus) { return; }\n\n        this._hasFocus = true;\n    }\n\n    _handleBlur() {\n        this._hasFocus = false;\n\n        this.listSelection._onTouched();\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n\n\nexport const MC_SELECTION_LIST_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McListSelection),\n    multi: true\n};\n\n// Change event that is being fired whenever the selected state of an option changes. */\nexport class McListSelectionChange {\n    constructor(\n        // Reference to the selection list that emitted the event.\n        public source: McListSelection,\n        // Reference to the option that has been changed.\n        public option: McListOption\n    ) {}\n}\n\n\nexport class McListSelectionBase {}\n\nexport const _McListSelectionMixinBase = mixinDisabled(McListSelectionBase);\n\n@Component({\n    exportAs: 'mcListSelection',\n    selector: 'mc-list-selection',\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'tabIndex'],\n    host: {\n        class: 'mc-list-selection',\n        '[tabIndex]': 'tabIndex',\n        '(focus)': 'focus()',\n        '(blur)': '_onTouched()',\n        '(keydown)': '_onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    providers: [MC_SELECTION_LIST_VALUE_ACCESSOR],\n    preserveWhitespaces: false\n})\nexport class McListSelection extends _McListSelectionMixinBase implements\n    IFocusableOption, CanDisable, AfterContentInit, ControlValueAccessor {\n\n    _keyManager: FocusKeyManager<McListOption>;\n\n    // The option components contained within this selection-list.\n    @ContentChildren(McListOption) options: QueryList<McListOption>;\n\n    tabIndex: number;\n\n    autoSelect: boolean;\n    noUnselect: boolean;\n    multiple: boolean;\n\n    // todo temporary solution\n    withShift: boolean;\n    withCtrl: boolean;\n\n    @Input() horizontal: boolean = false;\n\n    // Emits a change event whenever the selected state of an option changes.\n    @Output() readonly selectionChange: EventEmitter<McListSelectionChange> = new EventEmitter<McListSelectionChange>();\n\n    selectedOptions: SelectionModel<McListOption>;\n\n    // Used for storing the values that were assigned before the options were initialized.\n    private _tempValues: string[] | null;\n\n    private _modelChanges = Subscription.EMPTY;\n\n    constructor(\n        private _element: ElementRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string,\n        @Attribute('multiple') multiple: string\n    ) {\n        super();\n\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.multiple = multiple === null ? true : toBoolean(multiple);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.selectedOptions = new SelectionModel<McListOption>(this.multiple);\n    }\n\n    ngAfterContentInit(): void {\n        this.horizontal = toBoolean(this.horizontal);\n\n        this._keyManager = new FocusKeyManager<McListOption>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation(!this.horizontal)\n            .withHorizontalOrientation(this.horizontal ? 'ltr' : null);\n\n        if (this._tempValues) {\n            this._setOptionsFromValues(this._tempValues);\n            this._tempValues = null;\n        }\n\n        // Sync external changes to the model back to the options.\n        this._modelChanges = this.selectedOptions.onChange!.subscribe((event) => {\n            for (const item of event.added) {\n                item.selected = true;\n            }\n\n            for (const item of event.removed) {\n                item.selected = false;\n            }\n        });\n\n        this.updateScrollSize();\n    }\n\n    ngOnDestroy() {\n        this._modelChanges.unsubscribe();\n    }\n\n    focus() {\n        this._element.nativeElement.focus();\n    }\n\n    selectAll() {\n        this.options.forEach((option) => option.setSelected(true));\n\n        this._reportValueChange();\n    }\n\n    deselectAll() {\n        this.options.forEach((option) => option.setSelected(false));\n\n        this._reportValueChange();\n    }\n\n    updateScrollSize(): void {\n        if (this.horizontal || !this.options.first) { return; }\n\n        this._keyManager.withScrollSize(Math.floor(this._getHeight() / this.options.first._getHeight()));\n    }\n\n    // Sets the focused option of the selection-list.\n    setFocusedOption(option: McListOption): void {\n        this._keyManager.updateActiveItem(option);\n\n        if (this.withShift && this.multiple) {\n            const previousIndex = this._keyManager.previousActiveItemIndex;\n            const activeIndex = this._keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n\n            this.withShift = false;\n        } else if (this.withCtrl) {\n            this.withCtrl = false;\n\n            if (!this._canDeselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) {\n                this.options.forEach((item) => item.setSelected(false));\n                option.setSelected(true);\n            }\n        }\n\n        this._emitChangeEvent(option);\n        this._reportValueChange();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(values: string[]): void {\n        if (this.options) {\n            this._setOptionsFromValues(values || []);\n        } else {\n            this._tempValues = values;\n        }\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this._onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this._onTouched = fn;\n    }\n\n    // Implemented as a part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        if (this.options) {\n            this.options.forEach((option) => option.disabled = isDisabled);\n        }\n    }\n\n    getSelectedOptionValues(): string[] {\n        return this.options.filter((option) => option.selected).map((option) => option.value);\n    }\n\n    // Toggles the selected state of the currently focused option.\n    toggleFocusedOption(): void {\n        const focusedIndex = this._keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n            const focusedOption: McListOption = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this._canDeselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this._emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    _canDeselectLast(listOption: McListOption): boolean {\n        return !(this.noUnselect && this.selectedOptions.selected.length === 1 && listOption.selected);\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    // View to model callback that should be called if the list or its options lost focus.\n    _onTouched: () => void = () => {};\n\n    // Removes an option from the selection list and updates the active item.\n    _removeOptionFromList(option: McListOption) {\n        if (option._hasFocus) {\n            const optionIndex = this._getOptionIndex(option);\n\n            // Check whether the option is the last item\n            if (optionIndex > 0) {\n                this._keyManager.setPreviousItemActive();\n            } else if (optionIndex === 0 && this.options.length > 1) {\n                this._keyManager.setNextItemActive();\n            }\n        }\n    }\n\n    _onKeyDown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n        this.withShift = event.shiftKey;\n        this.withCtrl = event.ctrlKey;\n\n        switch (keyCode) {\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                if (!this.horizontal) { this._keyManager.setPreviousPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                if (!this.horizontal) { this._keyManager.setNextPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    // Reports a value change to the ControlValueAccessor\n    _reportValueChange() {\n        if (this.options) {\n            this._onChange(this.getSelectedOptionValues());\n        }\n    }\n\n    // Emits a change event if the selected state of an option changed.\n    _emitChangeEvent(option: McListOption) {\n        this.selectionChange.emit(new McListSelectionChange(this, option));\n    }\n\n    // Returns the option with the specified value.\n    private _getOptionByValue(value: string): McListOption | undefined {\n        return this.options.find((option) => option.value === value);\n    }\n\n    // Sets the selected options based on the specified values.\n    private _setOptionsFromValues(values: string[]) {\n        this.options.forEach((option) => option.setSelected(false));\n\n        values\n            .map((value) => this._getOptionByValue(value))\n            .filter(Boolean)\n            .forEach((option) => option!.setSelected(true));\n    }\n\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private _isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    // Returns the index of the specified list option.\n    private _getOptionIndex(option: McListOption): number {\n        return this.options.toArray().indexOf(option);\n    }\n\n    // View to model callback that should be called whenever the selected options change.\n    private _onChange: (value: any) => void = (_: any) => {};\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","\nexport function isBoolean(val: any): val is boolean { return typeof val === 'boolean'; }\n\nexport function toBoolean(value: any): boolean {\n    return value != null && `${value}` !== 'false';\n}\n","import { NgModule, InjectionToken, Optional, Inject, isDevMode } from '@angular/core';\nimport { BidiModule } from '@ptsecurity/cdk/bidi';\n\n\n// Injection token that configures whether the Mosaic sanity checks are enabled.\nexport const MC_SANITY_CHECKS = new InjectionToken<boolean>('mc-sanity-checks', {\n    providedIn: 'root',\n    factory: MC_SANITY_CHECKS_FACTORY\n});\n\nexport function MC_SANITY_CHECKS_FACTORY(): boolean {\n    return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Mosaic\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n    imports: [ BidiModule ],\n    exports: [ BidiModule ]\n})\nexport class McCommonModule {\n    // Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n    private _hasDoneGlobalChecks = false;\n\n    // Reference to the global `document` object.\n    private _document = typeof document === 'object' && document ? document : null;\n\n    // Reference to the global 'window' object.\n    private _window = typeof window === 'object' && window ? window : null;\n\n    constructor(@Optional() @Inject(MC_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n        if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n            this._checkDoctypeIsDefined();\n            this._checkThemeIsPresent();\n            this._hasDoneGlobalChecks = true;\n        }\n    }\n\n    // Whether any sanity checks are enabled\n    private _areChecksEnabled(): boolean {\n        return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n    }\n\n    // Whether the code is running in tests.\n    private _isTestEnv() {\n        return this._window && (this._window['__karma__'] || this._window['jasmine']);\n    }\n\n    private _checkDoctypeIsDefined(): void {\n        if (this._document && !this._document.doctype) {\n            console.warn(\n                'Current document does not have a doctype. This may cause ' +\n                'some Mosaic components not to behave as expected.'\n            );\n        }\n    }\n\n    private _checkThemeIsPresent(): void {\n        if (this._document && typeof getComputedStyle === 'function') {\n            const testElement = this._document.createElement('div');\n\n            testElement.classList.add('mc-theme-loaded-marker');\n            this._document.body.appendChild(testElement);\n\n            const computedStyle = getComputedStyle(testElement);\n\n            // In some situations, the computed style of the test element can be null. For example in\n            // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n            // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n            if (computedStyle && computedStyle.display !== 'none') {\n                console.warn(\n                    'Could not find Mosaic core theme. Most Mosaic ' +\n                    'components may not work as expected. For more info refer ' +\n                    'to the theming guide: link there'\n                );\n            }\n\n            this._document.body.removeChild(testElement);\n        }\n    }\n}\n","import { toBoolean } from '../utils/index';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanDisable {\n    disabled: boolean;\n}\n\n// Mixin to augment a directive with a `disabled` property.\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\n    return class extends base {\n        private _disabled: boolean = false;\n\n        get disabled() {\n            return this._disabled;\n        }\n\n        set disabled(value: any) {\n            this._disabled = toBoolean(value);\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n    };\n}\n","import { ElementRef } from '@angular/core';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanColor {\n    color: ThemePalette;\n}\n\nexport interface HasElementRef {\n    _elementRef: ElementRef;\n}\n\nexport enum ThemePalette {\n    Primary = 'primary',\n    Second = 'second',\n    Warn = 'warn',\n    Default = 'second'\n}\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(base: T, defaultColor: ThemePalette = ThemePalette.Default): Constructor<CanColor> & T {\n    return class extends base {\n        private _color: ThemePalette;\n\n        get color(): ThemePalette {\n            return this._color;\n        }\n\n        set color(value: ThemePalette) {\n            const colorPalette = value || defaultColor;\n\n            if (colorPalette !== this._color) {\n                if (this._color) {\n                    this._elementRef.nativeElement.classList.remove(`mc-${this._color}`);\n                }\n\n                if (colorPalette) {\n                    this._elementRef.nativeElement.classList.add(`mc-${colorPalette}`);\n                }\n\n                this._color = colorPalette;\n            }\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n\n            // Set the default color that can be specified from the mixin.\n            this.color = defaultColor;\n        }\n    };\n}\n\n","import { Constructor } from './constructor';\nimport { CanDisable } from './disabled';\n\n\nexport interface HasTabIndex {\n    tabIndex: number;\n}\n\n// Mixin to augment a directive with a `tabIndex` property.\nexport function mixinTabIndex<\n        T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0): Constructor<HasTabIndex\n    > & T {\n    return class extends base {\n        private _tabIndex: number = defaultTabIndex;\n\n        get tabIndex(): number {\n            return this.disabled ? -1 : this._tabIndex;\n        }\n\n        set tabIndex(value: number) {\n            this._tabIndex = value != null ? value : defaultTabIndex;\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n    };\n}\n","import { FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { ErrorStateMatcher } from '../error/error-options';\nimport { Constructor } from './constructor';\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n    readonly stateChanges: Subject<void>;\n    errorState: boolean;\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState();\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n    _parentFormGroup: FormGroupDirective;\n    _parentForm: NgForm;\n    _defaultErrorStateMatcher: ErrorStateMatcher;\n    ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n    : Constructor<CanUpdateErrorState> & T {\n    return class extends base {\n        /** Whether the component is in an error state. */\n        errorState: boolean = false;\n\n        /**\n         * Stream that emits whenever the state of the input changes such that the wrapping\n         * `MсFormField` needs to run change detection.\n         */\n        readonly stateChanges = new Subject<void>();\n\n        errorStateMatcher: ErrorStateMatcher;\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n\n        updateErrorState() {\n            const oldState = this.errorState;\n            const parent = this._parentFormGroup || this._parentForm;\n            const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n            const control = this.ngControl ? this.ngControl.control as FormControl : null;\n            const newState = matcher.isErrorState(control, parent);\n\n            if (newState !== oldState) {\n                this.errorState = newState;\n                this.stateChanges.next();\n            }\n        }\n    };\n}\n","export function getMcFormFieldMissingControlError(): Error {\n  return Error('mc-form-field must contain a McFormFieldControl.');\n}\n","export function getMcInputUnsupportedTypeError(inputType: string): Error {\n    return Error(`Input type \"${inputType}\" isn't supported by mcInput.`);\n}\n","import { NgModule, Directive, ElementRef, QueryList } from '@angular/core';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(McLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n    selector: '[mc-line], [mcLine]',\n    host: { class: 'mc-line' }\n})\nexport class McLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class McLineSetter {\n    constructor(private _lines: QueryList<McLine>, private _element: ElementRef) {\n        this._setLineClass(this._lines.length);\n\n        this._lines.changes.subscribe(() => {\n            this._setLineClass(this._lines.length);\n        });\n    }\n\n    private _setLineClass(count: number): void {\n        this._resetClasses();\n        if (count === 2 || count === 3) {\n            this._setClass(`mc-${count}-line`, true);\n        } else if (count > 3) {\n            this._setClass(`mc-multi-line`, true);\n        }\n    }\n\n    private _resetClasses(): void {\n        this._setClass('mc-2-line', false);\n        this._setClass('mc-3-line', false);\n        this._setClass('mc-multi-line', false);\n    }\n\n    private _setClass(className: string, isAdd: boolean): void {\n        if (isAdd) {\n            this._element.nativeElement.classList.add(className);\n        } else {\n            this._element.nativeElement.classList.remove(className);\n        }\n    }\n}\n\n@NgModule({\n    imports: [],\n    exports: [McLine],\n    declarations: [McLine]\n})\nexport class McLineModule {}\n","import { Injectable } from '@angular/core';\nimport { FormGroupDirective, NgForm, FormControl } from '@angular/forms';\n\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n    }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({ providedIn: 'root' })\nexport class ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n    }\n}\n","import { Component, ViewEncapsulation, Input, ChangeDetectionStrategy } from '@angular/core';\n\n\nexport type McPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mc-primary .mc-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mc-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'mc-pseudo-checkbox',\n    styleUrls: ['pseudo-checkbox.css'],\n    template: '',\n    host: {\n        class: 'mc-pseudo-checkbox',\n        '[class.mc-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n        '[class.mc-pseudo-checkbox-checked]': 'state === \"checked\"',\n        '[class.mc-pseudo-checkbox-disabled]': 'disabled'\n    }\n})\nexport class McPseudoCheckbox {\n    // Display state of the checkbox.\n    @Input() state: McPseudoCheckboxState = 'unchecked';\n\n    // Whether the checkbox is disabled.\n    @Input() disabled: boolean = false;\n}\n","import { NgModule } from '@angular/core';\n\nimport { McPseudoCheckbox } from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n    exports: [McPseudoCheckbox],\n    declarations: [McPseudoCheckbox]\n})\nexport class McPseudoCheckboxModule {}\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","import {\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { mixinColor, CanColor } from '@ptsecurity/mosaic/core';\n\n\n@Directive({\n    selector: '[mc-icon]',\n    host: { class: 'mc mc-icon' }\n})\nexport class McIconCSSStyler {}\n\n\nexport class McIconBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McIconMixinBase = mixinColor(McIconBase);\n\n\n@Component({\n    selector: `[mc-icon]`,\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./icon.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McIcon extends _McIconMixinBase implements CanColor {\n    constructor(elementRef: ElementRef, @Attribute('mc-icon') iconName: string) {\n        super(elementRef);\n\n        elementRef.nativeElement.classList.add(iconName);\n    }\n\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McIcon,\n    McIconCSSStyler\n} from './icon.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McIcon,\n        McIconCSSStyler\n    ],\n    declarations: [\n        McIcon,\n        McIconCSSStyler\n    ]\n})\nexport class McIconModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    OnDestroy,\n    QueryList,\n    ViewEncapsulation,\n    ContentChildren\n} from '@angular/core';\n\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { Platform } from '@ptsecurity/cdk/platform';\n\nimport { mixinColor, mixinDisabled, CanColor, CanDisable } from '@ptsecurity/mosaic/core';\nimport { McIcon } from '@ptsecurity/mosaic/icon';\n\n\n@Directive({\n    selector: 'button[mc-button], a[mc-button]',\n    host: { class: 'mc-button' }\n})\nexport class McButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-xs-button], a[mc-xs-button]',\n    host: { class: 'mc-button mc-button_xs' }\n})\nexport class McXSButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-sm-button], a[mc-sm-button]',\n    host: { class: 'mc-button mc-button_sm' }\n})\nexport class McSMButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-lg-button], a[mc-lg-button]',\n    host: { class: 'mc-button mc-button_lg' }\n})\nexport class McLGButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-xl-button], a[mc-xl-button]',\n    host: { class: 'mc-button mc-button_xl' }\n})\nexport class McXLButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-icon-button], a[mc-icon-button]',\n    queries: {\n        contentChildren: new ContentChildren(McIcon)\n    },\n    host: { class: 'mc-icon-button' }\n})\nexport class McIconButtonCSSStyler {\n    nativeElement: Element;\n\n    contentChildren: QueryList<McIcon>;\n\n    constructor(elementRef: ElementRef) {\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        this._addClassModificatorForIcons();\n    }\n\n    _addClassModificatorForIcons() {\n        const twoIcons = 2;\n        const icons = this.contentChildren.map((item) => item._elementRef.nativeElement);\n\n        if (icons.length === 1) {\n            const iconElement = icons[0];\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-icon-button_left');\n                }\n\n                if (iconElement.previousSibling) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-icon-button_right');\n                }\n            }\n        } else if (icons.length === twoIcons) {\n            const firstIconElement = icons[0];\n            const secondIconElement = icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n}\n\n\nexport class McButtonBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McButtonMixinBase = mixinColor(mixinDisabled(McButtonBase));\n\n\n@Component({\n    selector: `\n        button[mc-button],\n        button[mc-xs-button],\n        button[mc-sm-button],\n        button[mc-lg-button],\n        button[mc-xl-button]\n    `,\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[disabled]': 'disabled || null'\n    }\n})\nexport class McButton extends _McButtonMixinBase implements OnDestroy, CanDisable, CanColor {\n    constructor(elementRef: ElementRef, private _platform: Platform, private _focusMonitor: FocusMonitor) {\n        super(elementRef);\n\n        this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this._getHostElement().focus();\n    }\n\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n\n\n@Component({\n    selector: 'a[mc-button], a[mc-xs-button], a[mc-sm-button], a[mc-lg-button], a[mc-xl-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[attr.tabindex]': 'disabled ? -1 : 0',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': '_haltDisabledEvents($event)'\n    }\n})\nexport class McAnchor extends McButton {\n    constructor(platform: Platform, focusMonitor: FocusMonitor, elementRef: ElementRef) {\n        super(elementRef, platform, focusMonitor);\n    }\n\n    _haltDisabledEvents(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\n\n\n@Component({\n    selector: 'button[mc-icon-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[attr.tabindex]': 'disabled ? -1 : 0',\n        '[attr.disabled]': 'disabled || null'\n    }\n})\nexport class McIconButton extends McButton {\n    constructor(platform: Platform, focusMonitor: FocusMonitor, elementRef: ElementRef) {\n        super(elementRef, platform, focusMonitor);\n    }\n\n    _haltDisabledEvents(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McButton,\n    McAnchor,\n    McIconButton,\n    McButtonCSSStyler,\n    McXSButtonCSSStyler,\n    McSMButtonCSSStyler,\n    McLGButtonCSSStyler,\n    McXLButtonCSSStyler,\n    McIconButtonCSSStyler\n} from './button.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McButton,\n        McAnchor,\n        McIconButton,\n        McButtonCSSStyler,\n        McXSButtonCSSStyler,\n        McSMButtonCSSStyler,\n        McLGButtonCSSStyler,\n        McXLButtonCSSStyler,\n        McIconButtonCSSStyler\n    ],\n    declarations: [\n        McButton,\n        McAnchor,\n        McIconButton,\n        McButtonCSSStyler,\n        McXSButtonCSSStyler,\n        McSMButtonCSSStyler,\n        McLGButtonCSSStyler,\n        McXLButtonCSSStyler,\n        McIconButtonCSSStyler\n    ]\n})\nexport class McButtonModule {}\n","import { Component, ElementRef, OnDestroy, ViewEncapsulation } from '@angular/core';\n\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\n\n\n@Component({\n    selector: 'a.mc-link',\n    template: `<ng-content></ng-content>`,\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['./link.css']\n})\n\nexport class McLink implements OnDestroy {\n    constructor(private elementRef: ElementRef, private _focusMonitor: FocusMonitor) {\n\n        this._focusMonitor.monitor(elementRef.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this._getHostElement().focus();\n    }\n\n    _getHostElement() {\n        return this.elementRef.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLink } from './link.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule\n    ],\n    declarations: [\n        McLink\n    ],\n    exports: [\n        McLink\n    ]\n})\nexport class McLinkModule {}\n","import { InjectionToken } from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type McCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MC_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<McCheckboxClickAction>('mc-checkbox-click-action');\n","import {\n    AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport {\n    CanColor,\n    CanDisable,\n    HasTabIndex,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\nimport { MC_CHECKBOX_CLICK_ACTION, McCheckboxClickAction } from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mc-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McCheckbox),\n    multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n    /** The initial state of the component before any user interaction. */\n    Init,\n    /** The state representing the component when it's becoming checked. */\n    Checked,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate\n}\n\n/** Change event object emitted by McCheckbox. */\nexport class McCheckboxChange {\n    /** The source McCheckbox of the event. */\n    source: McCheckbox;\n    /** The new `checked` value of the checkbox. */\n    checked: boolean;\n}\n\n// Boilerplate for applying mixins to McCheckbox.\n/** @docs-private */\nexport class McCheckboxBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\nexport const _McCheckboxMixinBase =\n    mixinTabIndex(mixinColor(mixinDisabled(McCheckboxBase)));\n\n\n/**\n * A mosaic checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A McCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n */\n@Component({\n    selector: 'mc-checkbox',\n    templateUrl: 'checkbox.html',\n    styleUrls: ['checkbox.css'],\n    exportAs: 'mcCheckbox',\n    host: {\n        class: 'mc-checkbox',\n        '[id]': 'id',\n        '[attr.id]': 'id',\n        '[class.mc-checkbox-indeterminate]': 'indeterminate',\n        '[class.mc-checkbox-checked]': 'checked',\n        '[class.mc-checkbox-disabled]': 'disabled',\n        '[class.mc-checkbox-label-before]': 'labelPosition == \"before\"'\n    },\n    providers: [MC_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCheckbox extends _McCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex {\n\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     */\n    @Input('aria-label') ariaLabel: string = '';\n\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n    private _uniqueId: string = `mc-checkbox-${++nextUniqueId}`;\n\n    /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n    @Input() id: string = this._uniqueId;\n\n    /** Returns the unique id for the visual hidden input. */\n    get inputId(): string {\n        return `${this.id || this._uniqueId}-input`;\n    }\n\n    /** Whether the checkbox is required. */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    private _required: boolean;\n\n    /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n    @Input() labelPosition: 'before' | 'after' = 'after';\n\n    /** Name value will be applied to the input element if present */\n    @Input() name: string | null = null;\n\n    /** Event emitted when the checkbox's `checked` value changes. */\n    @Output() readonly change: EventEmitter<McCheckboxChange> =\n        new EventEmitter<McCheckboxChange>();\n\n    /** Event emitted when the checkbox's `indeterminate` value changes. */\n    @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** The value attribute of the native input element */\n    @Input() value: string;\n\n    /** The native `<input type=\"checkbox\">` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * @docs-private\n     */\n    _onTouched: () => any = () => {\n    }\n\n    private _currentAnimationClass: string = '';\n\n    private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n    private _controlValueAccessorChangeFn: (value: any) => void = () => {\n    }\n\n    constructor(elementRef: ElementRef,\n                private _changeDetectorRef: ChangeDetectorRef,\n                private _focusMonitor: FocusMonitor,\n                @Attribute('tabindex') tabIndex: string,\n                @Optional() @Inject(MC_CHECKBOX_CLICK_ACTION)\n                private _clickAction: McCheckboxClickAction) {\n        super(elementRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._inputElement.nativeElement)\n            .subscribe((focusOrigin) => this._onInputFocusChange(focusOrigin));\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    }\n\n    /**\n     * Whether the checkbox is checked.\n     */\n    @Input()\n    get checked(): boolean {\n        return this._checked;\n    }\n\n    set checked(value: boolean) {\n        if (value != this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _checked: boolean = false;\n\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value != this.disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    @Input()\n    get indeterminate(): boolean {\n        return this._indeterminate;\n    }\n\n    set indeterminate(value: boolean) {\n        const changed = value != this._indeterminate;\n        this._indeterminate = value;\n\n        if (changed) {\n            if (this._indeterminate) {\n                this._transitionCheckState(TransitionCheckState.Indeterminate);\n            } else {\n                this._transitionCheckState(\n                    this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n    }\n\n    private _indeterminate: boolean = false;\n\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // This method is getting called whenever the label of the checkbox changes.\n        // Since the checkbox uses the OnPush strategy we need to notify it about the change\n        // that has been recognized by the cdkObserveContent directive.\n        this._changeDetectorRef.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any) {\n        this.checked = !!value;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this._onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n    }\n\n    _getAriaChecked(): 'true' | 'false' | 'mixed' {\n        return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n    }\n\n    private _transitionCheckState(newState: TransitionCheckState) {\n        const oldState = this._currentCheckState;\n        const element: HTMLElement = this._elementRef.nativeElement;\n\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n\n        this._currentCheckState = newState;\n\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n        }\n    }\n\n    private _emitChangeEvent() {\n        const event = new McCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    }\n\n    /** Function is called whenever the focus changes for the input element. */\n    private _onInputFocusChange(focusOrigin: FocusOrigin) {\n        if (focusOrigin) {\n            this._onTouched();\n        }\n    }\n\n    /** Toggles the `checked` state of the checkbox. */\n    toggle(): void {\n        this.checked = !this.checked;\n    }\n\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event\n     */\n    _onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && this._clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && this._clickAction !== 'check') {\n\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n\n            this.toggle();\n            this._transitionCheckState(\n                this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        } else if (!this.disabled && this._clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mc-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n\n    /** Focuses the checkbox. */\n    focus(): void {\n        this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n    }\n\n    _onInteractionEvent(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n}\n"],"names":["type","Input","args","McTreeNodeDef","CdkTreeNodeDef","_this","_baseLeftPadding","_iconWidth","_indent","tslib_1.__extends","McTreeNodePadding","_super","Object","defineProperty","prototype","this","_withIcon","_paddingIndent","nodeLevel","_treeNode","data","_tree","treeControl","getLevel","level","_level","leftPadding","ngOnInit","isExpandable","_setPadding","Directive","selector","providers","provide","CdkTreeNodePadding","useExisting","indent","McTreeNodeOption","_elementRef","treeSelection","call","role","_hasFocus","_disabled","_selected","value","newValue","toBoolean","selectedOptions","isSelected","setSelected","focus","nativeElement","setFocusedOption","toggle","selected","select","deselect","_getHeight","getClientRects","height","_handleFocus","disabled","_handleBlur","_handleClick","exportAs","host","tabindex","[class.mc-selected]","[class.mc-focused]","[attr.aria-expanded]","[attr.aria-level]","class","(focus)","(blur)","(click)","CdkTreeNode","ElementRef","McTreeSelection","decorators","Inject","forwardRef","_McTreeSelectionBase","mixinTabIndex","mixinDisabled","CdkTree","McTreeNavigationChange","source","option","McTreeSelectionChange","_differs","_changeDetectorRef","tabIndex","multiple","autoSelect","noUnselect","navigationChange","EventEmitter","selectionChange","parseInt","SelectionModel","rawValue","console","log","_onKeyDown","event","keyCode","withShift","shiftKey","withCtrl","ctrlKey","LEFT_ARROW","_keyManager","activeItem","collapse","preventDefault","RIGHT_ARROW","expand","SPACE","ENTER","toggleFocusedOption","HOME","setFirstItemActive","END","setLastItemActive","PAGE_UP","setPreviousPageItemActive","PAGE_DOWN","setNextPageItemActive","onKeydown","ngAfterContentInit","FocusKeyManager","options","withTypeAhead","withVerticalOrientation","withHorizontalOrientation","updateScrollSize","first","withScrollSize","Math","floor","updateActiveItem","previousIndex_1","previousActiveItemIndex","activeIndex_1","activeItemIndex","forEach","item","index","_canDeselectLast","_emitNavigationEvent","focusedIndex","_isValidIndex","focusedOption","toArray","_emitChangeEvent","renderNodeChanges","dataDiffer","viewContainer","parentData","_dataDiffer","_nodeOutlet","arrayOfInstances","_embeddedViews","view","viewDef","def","nodes","node","nodeMatchedQueries","matchedQueryIds","nodeData","nodeIndex","push","reset","notifyOnChanges","emit","length","Component","template","[tabIndex]","(keydown)","(window:resize)","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","IterableDiffers","ChangeDetectorRef","String","Attribute","ViewChild","CdkTreeNodeOutlet","ContentChildren","Output","MC_TREE_DIRECTIVES","NgModule","imports","CommonModule","CdkTreeModule","exports","declarations","McTreeModule","McTreeFlattener","transformFunction","getChildren","_flattenNode","resultNodes","parentMap","flatNode","pipe","take","subscribe","children","child","childParentMap","slice","flattenNodes","structuredData","expandFlattenedNodes","results","currentExpand","i","isExpanded","McTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","next","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","merge","apply","map","disconnect","DataSource","McTreeNestedDataSource","VERSION","Version","McList","McListBase","McListSubheaderCssStyler","McListItemBase","McListItem","_element","_lineSetter","McLineSetter","_lines","classList","add","remove","_getHostElement","preserveWhitespaces","McLine","McListModule","A11yModule","McLineModule","McListSelection","McListOption","MC_NAVBAR_CONTAINER","MC_NAVBAR_ITEM","MC_NAVBAR_BRAND","MC_NAVBAR_TITLE","McNavbarLogo","McNavbarBrand","McNavbarTitle","McNavbarItemBase","_McNavbarMixinBase","McNavbarItem","elementRef","_focusMonitor","_platform","_cdRef","dropdownItems","isCollapsed","_subscription","Subscription","setAttribute","encodeURI","dropdownContent","querySelectorAll","denyClickIfDisabled","_focusMonitor$","monitor","hasDropdownContent","listenClickOutside","ngAfterViewInit","startListenFocusDropdownItems","ngOnDestroy","unsubscribe","stopMonitoring","stopListenFocusDropdownItems","isActiveDropdownLink","link","isBrowser","window","location","href","indexOf","handleClickByItem","toggleDropdown","handleKeydown","$event","isNavbarItem","contains","handleClickByDropdownItem","forceCloseDropdown","origin","detectChanges","_dropdownElements","el","events","eventListeners","removeEventListener","addEventListener","hasAttribute","stopImmediatePropagation","inputs","[attr.disabled]","[attr.tabindex]","FocusMonitor","Platform","collapsedTitle","dropdownItemTmpl","ContentChild","read","TemplateRef","McNavbarContainer","position","cssClasses","HostBinding","CollapsibleItem","element","width","_collapsed","processCollapsed","collapsed","updateCollapsedClass","CachedItemWidth","itemsForCollapse","undefined","_collapsedItemsWidth","calculateAndCacheCollapsedItemsWidth","updateTitle","reduce","acc","getTitle","computedTitle","getAttribute","decodeURI","innerText","removeAttribute","McNavbar","forceRecalculateItemsWidth","resizeDebounceInterval","firstLevelElement","secondLevelElements","resizeObserver","fromEvent","debounceTime","_resizeSubscription","updateCollapsed","bind","querySelector","getBoundingClientRect","_itemsWidths","calculateAndCacheItemsWidth","_totalItemsWidths","calculateAndCacheTotalItemsWidth","collapseDelta","totalItemsWidth","maxAllowedWidth","itemsWidths","canCollapse","collapsedItemsWidth","setTimeout","getOuterElementWidth","getComputedStyle","getPropertyValue","allItemsSelector","e","allItems","Array","from","getItemsForCollapse","McNavbarModule","PlatformModule","McIconModule","idIterator","McProgressBarBase","_McProgressBarMixinBase","mixinColor","McProgressBar","id","mode","color","ThemePalette","Primary","get","max","min","[attr.id]","McProgressBarModule","McProgressSpinnerBase","_McProgressPinnerMixinBase","McProgressSpinner","percentage","McProgressSpinnerModule","nextUniqueId","McRadioChange","McRadioGroupBase","_McRadioGroupMixinBase","MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","McRadioGroup","multi","_changeDetector","change","_value","_name","_isInitialized","_labelPosition","_required","controlValueAccessorChangeFn","onTouched","set","updateRadioButtonNames","v","markRadiosForCheck","updateSelectedRadioFromValue","checkSelectedRadioButton","checked","touch","emitChangeEvent","_radios","radio","markForCheck","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","name","isAlreadySelected","labelPosition","required","McRadioButton","descendants","McRadioButtonBase","_McRadioButtonMixinBase","radioGroup","_radioDispatcher","_uniqueId","isFocused","_checked","removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","onInputClick","stopPropagation","onInputChange","groupValueChanged","[class.mc-radio-checked]","[class.mc-radio-disabled]","Optional","UniqueSelectionDispatcher","ariaLabel","ariaLabelledby","ariaDescribedby","_inputElement","McRadioModule","McCommonModule","McCheckboxRequiredValidator","MC_CHECKBOX_REQUIRED_VALIDATOR","[attr.required]","CheckboxRequiredValidator","McCheckboxModule","McCheckbox","McDivider","_vertical","_inset","[attr.aria-orientation]","[class.mc-divider-vertical]","[class.mc-divider-inset]","vertical","inset","McDividerModule","McCleaner","McFormFieldControl","McHint","McPrefix","McSuffix","McFormFieldBase","McFormField","_validateControlChild","_control","controlType","stateChanges","startWith","valueChanges","ngControl","EMPTY","ngAfterContentChecked","clearValue","onContainerClick","onKeyDown","ESCAPE","focused","hasCleaner","_shouldForward","prop","getMcFormFieldMissingControlError","_hint","_suffix","_prefix","_cleaner","[class.mc-form-field_invalid]","[class.mc-form-field_disabled]","[class.mc-form-field_has-prefix]","[class.mc-form-field_has-suffix]","[class.mc-form-field_has-cleaner]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","ctorParameters","propDecorators","McFormFieldWithoutBorders","McFormFieldModule","MC_INPUT_VALUE_ACCESSOR","InjectionToken","MC_INPUT_INVALID_TYPES","McInputBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","_McInputMixinBase","mixinErrorState","McInput","inputValueAccessor","Subject","_uid","_type","_neverEmptyInputTypes","filter","t","getSupportedInputTypes","has","_inputValueAccessor","_previousNativeValue","coerceBooleanProperty","_id","_validateType","ngOnChanges","complete","ngDoCheck","updateErrorState","_dirtyCheckNativeValue","_focusChanged","_onInput","_isNeverEmpty","_isBadInput","getMcInputUnsupportedTypeError","validity","badInput","[attr.placeholder]","[disabled]","[required]","(input)","NgControl","Self","NgForm","FormGroupDirective","ErrorStateMatcher","errorStateMatcher","placeholder","McInputMono","McInputModule","FormsModule","listSelection","checkboxPosition","_reportValueChange","wasSelected_1","Promise","resolve","then","_removeOptionFromList","getLabel","_text","textContent","_onTouched","MC_SELECTION_LIST_VALUE_ACCESSOR","McListSelectionChange","McListSelectionBase","_McListSelectionMixinBase","horizontal","_modelChanges","_onChange","_","_tempValues","_setOptionsFromValues","_i","_a","added","_b","_c","removed","selectAll","deselectAll","values","getSelectedOptionValues","listOption","optionIndex","_getOptionIndex","setPreviousItemActive","setNextItemActive","_getOptionByValue","find","Boolean","__extends","d","b","__","constructor","extendStatics","create","isBoolean","val","MC_SANITY_CHECKS_FACTORY","base","class_1","arguments","defaultColor","Default","_color","colorPalette","defaultTabIndex","_tabIndex","errorState","oldState","parent","matcher","control","newState","isErrorState","Error","inputType","setPrototypeOf","__proto__","p","hasOwnProperty","MC_SANITY_CHECKS","providedIn","factory","_sanityChecksEnabled","_hasDoneGlobalChecks","_document","document","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","isDevMode","_isTestEnv","doctype","warn","testElement","createElement","body","appendChild","computedStyle","display","removeChild","BidiModule","Second","Warn","_setLineClass","count","_resetClasses","_setClass","className","isAdd","ShowOnDirtyErrorStateMatcher","form","invalid","dirty","submitted","Injectable","touched","state","[class.mc-pseudo-checkbox-indeterminate]","[class.mc-pseudo-checkbox-checked]","[class.mc-pseudo-checkbox-disabled]","McPseudoCheckbox","McPseudoCheckboxModule","McIconCSSStyler","McIconBase","_McIconMixinBase","McIcon","iconName","McButtonCSSStyler","McXSButtonCSSStyler","McSMButtonCSSStyler","McLGButtonCSSStyler","McXLButtonCSSStyler","McIconButtonCSSStyler","_addClassModificatorForIcons","icons","contentChildren","iconElement","previousElementSibling","nextElementSibling","nextSibling","previousSibling","firstIconElement","secondIconElement","queries","McButtonBase","_McButtonMixinBase","McButton","McAnchor","platform","focusMonitor","_haltDisabledEvents","McIconButton","McButtonModule","McLink","McLinkModule","MC_CHECKBOX_CLICK_ACTION","MC_CHECKBOX_CONTROL_VALUE_ACCESSOR","TransitionCheckState","McCheckboxChange","McCheckboxBase","_McCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","Init","_controlValueAccessorChangeFn","_indeterminate","focusOrigin","_onInputFocusChange","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_onLabelTextChange","_getAriaChecked","indeterminate","_onInputClick","focusVia","_onInteractionEvent","[id]","[class.mc-checkbox-indeterminate]","[class.mc-checkbox-checked]","[class.mc-checkbox-disabled]","[class.mc-checkbox-label-before]","NG_VALIDATORS"],"mappings":"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"}