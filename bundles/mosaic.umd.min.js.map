{"version":3,"file":"mosaic.umd.min.js","sources":["../../src/lib/tooltip/tooltip.module.ts","../../src/lib/version.ts","../../src/lib/select/select.component.ts","../../src/lib/select/select.module.ts","../../src/lib/tooltip/tooltip.component.ts","../../src/lib/progress-spinner/progress-spinner.component.ts","../../src/lib/progress-spinner/progress-spinner.module.ts","../../src/lib/radio/radio.component.ts","../../src/lib/radio/radio.module.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree-selection.ts","../../src/lib/tree/tree.module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/tag/tag.component.ts","../../src/lib/tag/tag.module.ts","../../src/lib/select/select-animations.ts","../../src/lib/modal/modal.component.ts","../../src/lib/modal/css-unit.pipe.ts","../../src/lib/modal/modal.service.ts","../../src/lib/modal/modal.module.ts","../../src/lib/navbar/navbar.component.ts","../../src/lib/navbar/navbar.module.ts","../../src/lib/progress-bar/progress-bar.component.ts","../../src/lib/progress-bar/progress-bar.module.ts","../../src/lib/input/input-number-validators.ts","../../src/lib/input/input.module.ts","../../src/lib/layout/content.component.ts","../../src/lib/layout/footer.component.ts","../../src/lib/layout/header.component.ts","../../src/lib/layout/layout.component.ts","../../src/lib/layout/sidebar.component.ts","../../src/lib/layout/layout.module.ts","../../src/lib/list/list-selection.component.ts","../../src/lib/list/list.component.ts","../../src/lib/list/list.module.ts","../../src/lib/link/link.component.ts","../../src/lib/link/link.module.ts","../../src/lib/modal/modal-control.service.ts","../../src/lib/modal/modal-ref.class.ts","../../src/lib/modal/modal-util.ts","../../src/lib/button/button.component.ts","../../src/lib/button/button.module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/divider/divider.component.ts","../../src/lib/divider/divider.module.ts","../../src/lib/form-field/cleaner.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/form-field-number-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/stepper.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field.module.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/stepperUtils.ts","../../src/lib/input/input.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/utils/utils.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/option/option.ts","../../src/lib/core/overlay/overlay-position-map.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/core/line/line.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/services/measure-scrollbar.service.ts","../../src/lib/core/option/optgroup.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/core/animation/fade-animations.ts","../../src/lib/icon/icon.component.ts","../../src/lib/icon/icon.module.ts"],"sourcesContent":["import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\n\nimport {\n    McToolTipComponent,\n    McTooltipDirective,\n    MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './tooltip.component';\n\n\n@NgModule({\n    declarations: [ McToolTipComponent, McTooltipDirective ],\n    exports: [ McToolTipComponent, McTooltipDirective ],\n    imports: [ BrowserAnimationsModule, CommonModule, OverlayModule ],\n    providers: [MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],\n    entryComponents: [ McToolTipComponent ]\n})\nexport class McToolTipModule {\n}\n","import { Version } from '@angular/core';\n\n\nexport const VERSION = new Version('0.0.1-8ad947f');\n","/* tslint:disable:no-empty */\n\nimport { ActiveDescendantKeyManager } from '@ptsecurity/cdk/a11y';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    RIGHT_ARROW,\n    SPACE,\n    UP_ARROW,\n    A\n} from '@ptsecurity/cdk/keycodes';\nimport {\n    CdkConnectedOverlay,\n    Overlay,\n    RepositionScrollStrategy,\n    IScrollStrategy,\n    ViewportRuler\n} from '@ptsecurity/cdk/overlay';\n\nimport {\n    AfterContentInit, AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    isDevMode,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList, Renderer2,\n    Self,\n    SimpleChanges,\n    ViewChild, ViewChildren,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport {\n    _countGroupLabelsBeforeOption,\n    _getOptionScrollPosition,\n    CanDisable,\n    CanDisableCtor,\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    HasTabIndex, HasTabIndexCtor,\n    MC_OPTION_PARENT_COMPONENT,\n    McOptgroup,\n    McOption,\n    McOptionSelectionChange,\n    mixinDisabled,\n    mixinErrorState,\n    mixinTabIndex\n} from '@ptsecurity/mosaic/core';\n\nimport { McFormField, McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { McTag } from '@ptsecurity/mosaic/tag';\n\n\nimport { defer, merge, Observable, Subject } from 'rxjs';\nimport {\n    filter,\n    map,\n    startWith,\n    switchMap,\n    take,\n    takeUntil,\n    distinctUntilChanged\n} from 'rxjs/operators';\n\nimport {\n    getMcSelectDynamicMultipleError,\n    getMcSelectNonArrayValueError,\n    getMcSelectNonFunctionValueError\n} from './select-errors';\n\nimport { mcSelectAnimations } from './select-animations';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 224;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 1;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\n/* tslint:disable-next-line:no-magic-numbers */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 2;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MC_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-select-scroll-strategy');\n\n/** @docs-private */\nexport function MC_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MC_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MC_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class McSelectChange {\n    constructor(\n        /** Reference to the select that emitted the change event. */\n        public source: McSelect,\n        /** Current value of the select that emitted the event. */\n        public value: any) {\n    }\n}\n\n// Boilerplate for applying mixins to McSelect.\n/** @docs-private */\nexport class McSelectBase {\n    constructor(\n        public _elementRef: ElementRef,\n        public _defaultErrorStateMatcher: ErrorStateMatcher,\n        public _parentForm: NgForm,\n        public _parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {}\n}\n\nexport const _McSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanUpdateErrorStateCtor & typeof McSelectBase\n    = mixinTabIndex(mixinDisabled(mixinErrorState(McSelectBase)));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({ selector: 'mc-select-trigger' })\nexport class McSelectTrigger {}\n\n\n@Component({\n    selector: 'mc-select',\n    exportAs: 'mcSelect',\n    templateUrl: 'select.html',\n    styleUrls: ['./select.css'],\n    inputs: ['disabled', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'tabIndex',\n        class: 'mc-select',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-select-invalid]': 'errorState',\n        '[class.mc-select-required]': 'required',\n        '(keydown)': '_handleKeydown($event)',\n        '(focus)': '_onFocus()',\n        '(blur)': '_onBlur()',\n        '(window:resize)': '_calculateHiddenItems()'\n    },\n    animations: [\n        mcSelectAnimations.transformPanel,\n        mcSelectAnimations.fadeInContent\n    ],\n    providers: [\n        { provide: McFormFieldControl, useExisting: McSelect },\n        { provide: MC_OPTION_PARENT_COMPONENT, useExisting: McSelect }\n    ]\n})\nexport class McSelect extends _McSelectMixinBase implements\n    AfterContentInit, AfterViewInit, OnChanges, OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable,\n    HasTabIndex, McFormFieldControl<any>, CanUpdateErrorState {\n\n    /** The last measured value for the trigger's client bounding rect. */\n    _triggerRect: ClientRect;\n\n    /** The cached font-size of the trigger element. */\n    _triggerFontSize = 0;\n\n    /** Deals with the selection logic. */\n    _selectionModel: SelectionModel<McOption>;\n\n    /** Manages keyboard events for options in the panel. */\n    _keyManager: ActiveDescendantKeyManager<McOption>;\n\n    /** The IDs of child options to be passed to the aria-owns attribute. */\n    _optionIds: string = '';\n\n    /** The value of the select panel's transform-origin property. */\n    _transformOrigin: string = 'top';\n\n    /** Whether the panel's animation is done. */\n    _panelDoneAnimating: boolean = false;\n\n    /** Emits when the panel element is finished transforming in. */\n    _panelDoneAnimatingStream = new Subject<string>();\n\n    /** Strategy that will be used to handle scrolling while the select panel is open. */\n    _scrollStrategy = this._scrollStrategyFactory();\n\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n    _offsetY = 0;\n\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n    _positions = [\n        {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top'\n        },\n        {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom'\n        }\n    ];\n\n    /** Whether the select is focused. */\n    get focused(): boolean {\n        return this._focused || this._panelOpen;\n    }\n\n    /**\n     * @deprecated Setter to be removed as this property is intended to be readonly.\n     * @breaking-change 8.0.0\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n\n    /** A name for this control that can be used by `mc-form-field`. */\n    controlType = 'mc-select';\n\n    @ViewChild('trigger') trigger: ElementRef;\n    @ViewChildren(McTag) tags: QueryList<McTag>;\n\n    @ViewChild('panel') panel: ElementRef;\n\n    /** Overlay pane containing the options. */\n    @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n    /** All of the defined select options. */\n    @ContentChildren(McOption, { descendants: true }) options: QueryList<McOption>;\n\n    /** All of the defined groups of options. */\n    @ContentChildren(McOptgroup) optionGroups: QueryList<McOptgroup>;\n\n    /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n    @Input() panelClass: string | string[] | Set<string> | { [key: string]: any };\n\n    /** User-supplied override of the trigger element. */\n    @ContentChild(McSelectTrigger) customTrigger: McSelectTrigger;\n\n    /** Placeholder to be shown if no value has been selected. */\n    @Input()\n    get placeholder(): string {\n        return this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n\n    /** Whether the component is required. */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n\n    /** Whether the user should be allowed to select multiple options. */\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        if (this._selectionModel) {\n            throw getMcSelectDynamicMultipleError();\n        }\n\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith() {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        /* tslint:disable-next-line:strict-type-predicates */\n        if (typeof fn !== 'function') {\n            throw getMcSelectNonFunctionValueError();\n        }\n\n        this._compareWith = fn;\n\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n\n    /** Value of the select control. */\n    @Input()\n    get value(): any {\n        return this._value;\n    }\n\n    set value(newValue: any) {\n        if (newValue !== this._value) {\n            this.writeValue(newValue);\n            this._value = newValue;\n        }\n    }\n\n    /** Object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Function used to sort the values in a select in multiple mode.\n     * Follows the same logic as `Array.prototype.sort`.\n     */\n    @Input() sortComparator: (a: McOption, b: McOption, options: McOption[]) => number;\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n\n    /** Combined stream of all of the child options' change events. */\n    readonly optionSelectionChanges: Observable<McOptionSelectionChange> = defer(() => {\n        if (this.options) {\n            return merge(...this.options.map((option) => option.onSelectionChange));\n        }\n\n        return this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n    });\n\n    /** Event emitted when the select panel has been toggled. */\n    @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted when the select has been opened. */\n    @Output('opened') readonly _openedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => o), map(() => {}));\n\n    /** Event emitted when the select has been closed. */\n    @Output('closed') readonly _closedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => !o), map(() => {}));\n\n    /** Event emitted when the selected value has been changed by the user. */\n    @Output() readonly selectionChange: EventEmitter<McSelectChange> = new EventEmitter<McSelectChange>();\n\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    hiddenItems: number = 0;\n\n    /** Whether or not the overlay panel is open. */\n    private _panelOpen = false;\n\n    /** Whether filling out the select is required in the form. */\n    private _required: boolean = false;\n\n    /** The scroll position of the overlay panel, calculated to center the selected option. */\n    private _scrollTop = 0;\n\n    /** The placeholder displayed in the trigger of the select. */\n    private _placeholder: string;\n\n    /** Whether the component is in multiple selection mode. */\n    private _multiple: boolean = false;\n\n    /** Unique id for this input. */\n    private readonly _uid = `mc-select-${nextUniqueId++}`;\n\n    /** Emits whenever the component is destroyed. */\n    private readonly _destroy = new Subject<void>();\n\n    private _focused = false;\n\n    private _value: any;\n\n    private _id: string;\n\n    constructor(\n        private readonly _viewportRuler: ViewportRuler,\n        private readonly _changeDetectorRef: ChangeDetectorRef,\n        private readonly _ngZone: NgZone,\n        private readonly _renderer: Renderer2,\n        _defaultErrorStateMatcher: ErrorStateMatcher,\n        elementRef: ElementRef,\n        @Optional() private readonly _dir: Directionality,\n        @Optional() _parentForm: NgForm,\n        @Optional() _parentFormGroup: FormGroupDirective,\n        @Optional() private readonly _parentFormField: McFormField,\n        @Self() @Optional() public ngControl: NgControl,\n        @Attribute('tabindex') tabIndex: string,\n        @Inject(MC_SELECT_SCROLL_STRATEGY) private readonly _scrollStrategyFactory\n    ) {\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnInit() {\n        this._selectionModel = new SelectionModel<McOption>(this.multiple);\n        this.stateChanges.next();\n\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => {\n                if (this.panelOpen) {\n                    this._scrollTop = 0;\n                    this.openedChange.emit(true);\n                } else {\n                    this.openedChange.emit(false);\n                    this._panelDoneAnimating = false;\n                    this.overlayDir.offsetX = 0;\n                    this._changeDetectorRef.markForCheck();\n                }\n            });\n    }\n\n    ngAfterContentInit() {\n        this._initKeyManager();\n\n        this._selectionModel.onChange!\n            .pipe(takeUntil(this._destroy))\n            .subscribe((event) => {\n                event.added.forEach((option) => option.select());\n                event.removed.forEach((option) => option.deselect());\n            });\n\n        this.options.changes\n            .pipe(startWith(null), takeUntil(this._destroy))\n            .subscribe(() => {\n                this._resetOptions();\n                this._initializeSelection();\n            });\n    }\n\n    ngAfterViewInit(): void {\n        this.tags.changes\n            .subscribe(() => {\n                setTimeout(() => this._calculateHiddenItems(), 0);\n            });\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) { this.updateErrorState(); }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes.disabled) {\n            this.stateChanges.next();\n        }\n    }\n\n    ngOnDestroy() {\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n    }\n\n    /** `View -> model callback called when value changes` */\n    _onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when select has been touched` */\n    _onTouched = () => {};\n\n    /** Toggles the overlay panel open or closed. */\n    toggle(): void {\n        if (this.panelOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    /** Opens the overlay panel. */\n    open(): void {\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) { return; }\n\n        this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n        this._panelOpen = true;\n        this._keyManager.withHorizontalOrientation(null);\n        this._calculateOverlayPosition();\n        this._highlightCorrectOption();\n        this._changeDetectorRef.markForCheck();\n\n        // Set the font size on the panel element once it exists.\n        this._ngZone.onStable.asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                if (this._triggerFontSize && this.overlayDir.overlayRef &&\n                    this.overlayDir.overlayRef.overlayElement) {\n                    this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n                }\n            });\n    }\n\n    /** Closes the overlay panel and focuses the host element. */\n    close(): void {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value: any): void {\n        if (this.options) {\n            this._setSelectionByValue(value);\n        }\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn: (value: any) => void): void {\n        this._onChange = fn;\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn: () => {}): void {\n        this._onTouched = fn;\n    }\n\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    get panelOpen(): boolean {\n        return this._panelOpen;\n    }\n\n    get selected(): McOption | McOption[] {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n\n    get triggerValue(): string {\n        if (this.empty) { return ''; }\n\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map((option) => option.viewValue);\n\n            if (this._isRtl()) { selectedOptions.reverse(); }\n\n            return selectedOptions.join(', ');\n        }\n\n        return this._selectionModel.selected[0].viewValue;\n    }\n\n    get triggerValues(): McOption[] {\n        if (this.empty) { return []; }\n\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected;\n\n            if (this._isRtl()) { selectedOptions.reverse(); }\n\n            return selectedOptions;\n        }\n\n        return [this._selectionModel.selected[0]];\n    }\n\n    get empty(): boolean {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n\n    _isRtl(): boolean {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n\n    _handleKeydown(event: KeyboardEvent): void {\n        if (!this.disabled) {\n            if (this.panelOpen) {\n                this._handleOpenKeydown(event);\n            } else {\n                this._handleClosedKeydown(event);\n            }\n        }\n    }\n\n    /**\n     * When the panel content is done fading in, the _panelDoneAnimating property is\n     * set so the proper class can be added to the panel.\n     */\n    _onFadeInDone(): void {\n        this._panelDoneAnimating = this.panelOpen;\n        this._changeDetectorRef.markForCheck();\n    }\n\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached(): void {\n        this.overlayDir.positionChange\n            .pipe(take(1))\n            .subscribe(() => {\n                this._changeDetectorRef.detectChanges();\n                this._calculateOverlayOffsetX();\n                this.panel.nativeElement.scrollTop = this._scrollTop;\n            });\n    }\n\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme(): string {\n        return this._parentFormField ? `mc-${this._parentFormField.color}` : '';\n    }\n\n    /** Focuses the select element. */\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number, maxScroll: number): number {\n        const itemHeight = this._getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n\n        /* tslint:disable-next-line:no-magic-numbers */\n        const halfOptionHeight = itemHeight / 2;\n\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n\n    /** Invoked when an option is clicked. */\n    onRemoveMatcherItem(option: McOption, $event): void {\n        $event.stopPropagation();\n\n        option.deselect();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat(): boolean {\n        return this._panelOpen || !this.empty;\n    }\n\n    _calculateHiddenItems(): void {\n        if (this.empty) { return; }\n\n        let visibleItems: number = 0;\n        const totalItemsWidth = this._getTotalItemsWidthInMatcher();\n        let totalVisibleItemsWidth: number = 0;\n        const itemMargin: number = 4;\n\n        this.tags.forEach((tag) => {\n            if (tag.nativeElement.offsetTop < tag.nativeElement.offsetHeight) {\n                totalVisibleItemsWidth += tag.nativeElement.getBoundingClientRect().width + itemMargin;\n                visibleItems++;\n            }\n        });\n\n        this.hiddenItems = (this.selected as ArrayLike<McOption>).length - visibleItems;\n\n        if (this.hiddenItems) {\n            const itemsCounter = this.trigger.nativeElement.querySelector('.mc-select__match-hidden-text');\n            const matcherList = this.trigger.nativeElement.querySelector('.mc-select__match-list');\n\n            const itemsCounterShowed = itemsCounter.offsetTop < itemsCounter.offsetHeight;\n            // const itemsCounterWidth: number = itemsCounter.getBoundingClientRect().width;\n            const itemsCounterWidth: number = 86;\n\n            const matcherListWidth: number = matcherList.getBoundingClientRect().width;\n            const matcherWidth: number = matcherListWidth + itemsCounterWidth;\n\n            if (itemsCounterShowed && (totalItemsWidth < matcherWidth)) { this.hiddenItems = 0; }\n\n            if (\n                totalVisibleItemsWidth === matcherListWidth ||\n                (totalVisibleItemsWidth + itemsCounterWidth) < matcherListWidth\n            ) {\n                this._changeDetectorRef.markForCheck();\n\n                return ;\n            } else if (!itemsCounterShowed && (totalItemsWidth + itemsCounterWidth) > matcherWidth) {\n                this.hiddenItems++;\n            }\n        }\n\n        this._changeDetectorRef.markForCheck();\n    }\n\n    private _getTotalItemsWidthInMatcher(): number {\n        const triggerClone = this.trigger.nativeElement.cloneNode(true);\n        triggerClone.querySelector('.mc-select__match-hidden-text').remove();\n\n        this._renderer.setStyle(triggerClone, 'position', 'absolute');\n        this._renderer.setStyle(triggerClone, 'visibility', 'hidden');\n        this._renderer.setStyle(triggerClone, 'top', '-100%');\n        this._renderer.setStyle(triggerClone, 'left', '0');\n\n        this._renderer.appendChild(this.trigger.nativeElement, triggerClone);\n\n        let totalItemsWidth: number = 0;\n        const itemMargin: number = 4;\n        triggerClone.querySelectorAll('mc-tag').forEach((item) => {\n            totalItemsWidth += item.getBoundingClientRect().width as number + itemMargin;\n        });\n\n        triggerClone.remove();\n\n        return totalItemsWidth;\n    }\n\n    /** Handles keyboard events while the select is closed. */\n    private _handleClosedKeydown(event: KeyboardEvent): void {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n        // Open the select on ALT + arrow key to match the native <select>\n        if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        } else if (!this.multiple) {\n            this._keyManager.onKeydown(event);\n        }\n    }\n\n    /** Handles keyboard events when the selected is open. */\n    private _handleOpenKeydown(event: KeyboardEvent): void {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const manager = this._keyManager;\n\n        if (keyCode === HOME || keyCode === END) {\n            event.preventDefault();\n\n            if (keyCode === HOME) {\n                manager.setFirstItemActive();\n            } else {\n                manager.setLastItemActive();\n            }\n\n        } else if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n        } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        } else if (this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some((option) => !option.selected);\n            this.options.forEach((option) => {\n                if (hasDeselectedOptions && !option.disabled) {\n                    option.select();\n                } else {\n                    option.deselect();\n                }\n            });\n        } else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n\n            manager.onKeydown(event);\n\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n\n    private _initializeSelection(): void {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n        });\n    }\n\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    private _setSelectionByValue(value: any | any[]): void {\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw getMcSelectNonArrayValueError();\n            }\n\n            this._selectionModel.clear();\n            value.forEach((currentValue: any) => this._selectValue(currentValue));\n            this._sortValues();\n        } else {\n            this._selectionModel.clear();\n            const correspondingOption = this._selectValue(value);\n\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.setActiveItem(correspondingOption);\n            }\n        }\n\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    private _selectValue(value: any): McOption | undefined {\n        const correspondingOption = this.options.find((option: McOption) => {\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            } catch (error) {\n                if (isDevMode()) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n\n                return false;\n            }\n        });\n\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n\n        return correspondingOption;\n    }\n\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    private _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager<McOption>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n        this._keyManager.tabOut\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            });\n\n        this._keyManager.change\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n                if (this._panelOpen && this.panel) {\n                    this._scrollActiveOptionIntoView();\n                } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n            });\n    }\n\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    private _resetOptions(): void {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n        this.optionSelectionChanges\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe((event) => {\n                this._onSelect(event.source, event.isUserInput);\n\n                if (event.isUserInput && !this.multiple && this._panelOpen) {\n                    this.close();\n                    this.focus();\n                }\n            });\n\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map((option) => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n                this._changeDetectorRef.markForCheck();\n                this.stateChanges.next();\n            });\n\n        this._setOptionIds();\n    }\n\n    /** Invoked when an option is clicked. */\n    private _onSelect(option: McOption, isUserInput: boolean): void {\n        const wasSelected = this._selectionModel.isSelected(option);\n\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            this._propagateChanges(option.value);\n        } else {\n            if (option.selected) {\n                this._selectionModel.select(option);\n            } else {\n                this._selectionModel.deselect(option);\n            }\n\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n\n            if (this.multiple) {\n                this._sortValues();\n\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mc-option`.\n                    this.focus();\n                }\n            }\n        }\n\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n\n        this.stateChanges.next();\n    }\n\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    private _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n\n    /** Emits change event to set the model value. */\n    private _propagateChanges(fallbackValue?: any): void {\n        let valueToEmit: any = null;\n\n        if (this.multiple) {\n            valueToEmit = (this.selected as McOption[]).map((option) => option.value);\n        } else {\n            valueToEmit = this.selected ? (this.selected as McOption).value : fallbackValue;\n        }\n\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(new McSelectChange(this, valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /** Records option IDs to pass to the aria-owns property. */\n    private _setOptionIds() {\n        this._optionIds = this.options.map((option) => option.id).join(' ');\n    }\n\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    private _highlightCorrectOption(): void {\n        if (this._keyManager) {\n            if (this.empty) {\n                this._keyManager.setFirstItemActive();\n            } else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n\n    /** Scrolls the active option into view. */\n    private _scrollActiveOptionIntoView(): void {\n        const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n        const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options, this.optionGroups);\n\n        this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n            activeOptionIndex + labelCount,\n            this._getItemHeight(),\n            this.panel.nativeElement.scrollTop,\n            SELECT_PANEL_MAX_HEIGHT\n        );\n    }\n\n    /** Gets the index of the provided option in the option list. */\n    private _getOptionIndex(option: McOption): number | undefined {\n        /* tslint:disable-next-line */\n        return this.options.reduce((result: number, current: McOption, index: number) => {\n            /* tslint:disable-next-line:strict-type-predicates */\n            return result === undefined ? (option === current ? index : undefined) : result;\n        }, undefined);\n    }\n\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    private _calculateOverlayPosition(): void {\n        const itemHeight = this._getItemHeight();\n        const items = this._getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n\n        // If no value is selected we open the popup to the first item.\n        let selectedOptionOffset =\n            this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n        selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n            this.optionGroups);\n\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        /* tslint:disable-next-line:no-magic-numbers */\n        const scrollBuffer = panelHeight / 2;\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._offsetY = this._calculateOverlayOffsetY();\n\n        this._checkOverlayWithinViewport(maxScroll);\n    }\n\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    private _calculateOverlayOffsetX(): void {\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const isRtl = this._isRtl();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const paddingWidth = SELECT_PANEL_PADDING_X * 2;\n        let offsetX: number;\n\n        const selected = this._selectionModel.selected[0] || this.options.first;\n        offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n\n        // Invert the offset in LTR.\n        if (!isRtl) { offsetX *= -1; }\n\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        } else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    private _calculateOverlayOffsetY(): number {\n        // const itemHeight = this._getItemHeight();\n        // const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n\n        // todo I'm not sure that we will use it\n        return 0;\n        // return Math.round(-optionHeightAdjustment);\n    }\n\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    private _checkOverlayWithinViewport(maxScroll: number): void {\n        const itemHeight = this._getItemHeight();\n        const viewportSize = this._viewportRuler.getViewportSize();\n\n        const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable =\n            viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n        const panelHeightTop = Math.abs(this._offsetY);\n        const totalPanelHeight =\n            Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        } else if (panelHeightTop > topSpaceAvailable) {\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        } else {\n            this._transformOrigin = this._getOriginBasedOnOption();\n        }\n    }\n\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this._scrollTop <= 0) {\n            this._scrollTop = 0;\n            this._offsetY = 0;\n            this._transformOrigin = `50% bottom 0px`;\n        }\n    }\n\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number, maxScroll: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this._scrollTop >= maxScroll) {\n            this._scrollTop = maxScroll;\n            this._offsetY = 0;\n            this._transformOrigin = `50% top 0px`;\n\n            return;\n        }\n    }\n\n    /** Sets the transform origin point based on the selected option. */\n    private _getOriginBasedOnOption(): string {\n        const itemHeight = this._getItemHeight();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        /* tslint:disable-next-line:no-magic-numbers */\n        const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n\n        return `50% ${originY}px 0px`;\n    }\n\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    private _getItemCount(): number {\n        return this.options.length + this.optionGroups.length;\n    }\n\n    /** Calculates the height of the select's options. */\n    private _getItemHeight(): number {\n        /* tslint:disable-next-line:no-magic-numbers */\n        return 32;\n        // return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { McOptionModule } from '@ptsecurity/mosaic/core';\nimport { McFormFieldModule } from '@ptsecurity/mosaic/form-field';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\nimport { McTagModule } from '@ptsecurity/mosaic/tag';\n\nimport { MC_SELECT_SCROLL_STRATEGY_PROVIDER, McSelect, McSelectTrigger } from './select.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        McOptionModule,\n        McIconModule,\n        McTagModule\n    ],\n    exports: [McFormFieldModule, McSelect, McSelectTrigger, McOptionModule, CommonModule],\n    declarations: [McSelect, McSelectTrigger],\n    providers: [MC_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class McSelectModule {}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    TemplateRef,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport {\n    ConnectedOverlayPositionChange,\n    ConnectionPositionPair,\n    Overlay,\n    OverlayRef,\n    ScrollDispatcher,\n    IScrollStrategy,\n    FlexibleConnectedPositionStrategy,\n    IOverlayConnectionPosition,\n    IOriginConnectionPosition,\n    HorizontalConnectionPos,\n    VerticalConnectionPos\n} from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal } from '@ptsecurity/cdk/portal';\nimport {\n    fadeAnimation,\n    DEFAULT_4_POSITIONS,\n    POSITION_MAP\n} from '@ptsecurity/mosaic/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators';\n\n\n@Component({\n    selector: 'mc-tooltip',\n    animations: [ fadeAnimation ],\n    templateUrl: './tooltip.component.html',\n    preserveWhitespaces: false,\n    styleUrls: ['./tooltip.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '(body:click)': 'this._handleBodyInteraction()'\n    }\n})\n\nexport class McToolTipComponent {\n    _prefix = 'mc-tooltip_placement';\n    _positions: ConnectionPositionPair[] = [ ...DEFAULT_4_POSITIONS ];\n    _classMap = {};\n    _placement = 'top';\n    _trigger = 'hover';\n    isTitleString: boolean;\n    visibleSource = new BehaviorSubject<boolean>(false);\n    $visible: Observable<boolean> = this.visibleSource.asObservable();\n    _title: string | TemplateRef<void>;\n    showTId: number;\n    hideTId: number;\n    availablePositions: any;\n\n    @Output() mcVisibleChange: EventEmitter<boolean> = new EventEmitter();\n\n    @Input() mcMouseEnterDelay = 400;\n\n    @Input() mcMouseLeaveDelay = 0;\n\n    @Input()\n    set mcTitle(value: string | TemplateRef<void>) {\n        this.isTitleString = !(value instanceof TemplateRef);\n\n        if (this.isTitleString) {\n            this._title = value;\n        }\n    }\n\n    get mcTitle(): string | TemplateRef<void> {\n        return this._title;\n    }\n\n    @Input()\n    set mcVisible(value: boolean) {\n        const visible = coerceBooleanProperty(value);\n\n        if (this.visibleSource.value !== visible) {\n            this.visibleSource.next(visible);\n            this.mcVisibleChange.emit(visible);\n        }\n    }\n\n    get mcVisible(): boolean {\n        return this.visibleSource.value;\n    }\n\n    @Input()\n    set mcTrigger(value: string) {\n        this._trigger = value;\n    }\n\n    get mcTrigger(): string {\n        return this._trigger;\n    }\n\n    @Input()\n    set mcPlacement(value: string) {\n        if (value !== this._placement) {\n            this._placement = value;\n            this._positions.unshift(POSITION_MAP[ this.mcPlacement ]);\n        } else if (!value) {\n            this._placement = 'top';\n        }\n    }\n    get mcPlacement(): string {\n        return this._placement;\n    }\n\n    /** Subject for notifying that the tooltip has been hidden from the view */\n    private readonly _onHide: Subject<any> = new Subject();\n    private _closeOnInteraction: boolean = false;\n\n    constructor(public cdr: ChangeDetectorRef) {\n        this.availablePositions = POSITION_MAP;\n    }\n\n    show(): void {\n        if (this.hideTId) {\n            clearTimeout(this.hideTId);\n        }\n\n        if (!this.isContentEmpty()) {\n            this._closeOnInteraction = true;\n            this.showTId = setTimeout(() => {\n                this.mcVisible = true;\n                this.mcVisibleChange.emit(true);\n\n                // Mark for check so if any parent component has set the\n                // ChangeDetectionStrategy to OnPush it will be checked anyways\n                this._markForCheck();\n            }, this.mcMouseEnterDelay);\n        }\n    }\n\n    hide(): void {\n        if (this.showTId) {\n            clearTimeout(this.showTId);\n        }\n\n        this.hideTId = setTimeout(() => {\n            this.mcVisible = false;\n            this.mcVisibleChange.emit(false);\n            this._onHide.next();\n\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this._markForCheck();\n        }, this.mcMouseLeaveDelay);\n    }\n\n    setClassMap(): void {\n        this._classMap = {\n            [ `${this._prefix}-${this._placement}` ]: true\n        };\n    }\n\n    isContentEmpty(): boolean {\n        return this.isTitleString ? (this.mcTitle === '' || !this.mcTitle) : false;\n    }\n\n    /** Returns an observable that notifies when the tooltip has been hidden from view. */\n    afterHidden(): Observable<void> {\n        return this._onHide.asObservable();\n    }\n\n    _markForCheck(): void {\n        this.cdr.markForCheck();\n    }\n\n    _handleBodyInteraction(): void {\n        if (this._closeOnInteraction) {\n            this.hide();\n        }\n    }\n}\n\nexport const MC_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MC_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => IScrollStrategy {\n    return () => overlay.scrollStrategies.reposition({scrollThrottle: 20});\n}\n\n/** @docs-private */\nexport const MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_TOOLTIP_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_TOOLTIP_SCROLL_STRATEGY_FACTORY\n};\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMcTooltipInvalidPositionError(position: string) {\n    return Error(`McTooltip position \"${position}\" is invalid.`);\n}\n\nconst VIEWPORT_MARGIN: number = 8;\n\n@Directive({\n    selector: '[mc-tooltip]',\n    host: {\n        '(keydown)': 'handleKeydown($event)',\n        '(touchend)': 'handleTouchend()'\n    }\n})\n\nexport class McTooltipDirective implements OnInit, OnDestroy {\n    isTooltipOpen: boolean = false;\n    isDynamicTooltip = false;\n    parentDisabled: boolean = false;\n    _title: string;\n    _disabled: boolean = false;\n    _mouseEnterDelay: number;\n    _mouseLeaveDelay: number;\n    _visible: boolean;\n    _trigger: string = 'hover';\n    _placement: string = 'top';\n    _overlayRef: OverlayRef | null;\n    _portal: ComponentPortal<McToolTipComponent>;\n    availablePositions: any;\n    tooltip: McToolTipComponent | null;\n\n    @Output() mcVisibleChange = new EventEmitter<boolean>();\n    private $unsubscribe = new Subject<void>();\n\n    @Input('mc-tooltip')\n    set mcTitle(title: string) {\n        this._title = title;\n        this.updateCompValue('mcTitle', title);\n    }\n\n    get mcTitle(): string {\n        return this._title;\n    }\n\n    @Input('mcTitle')\n    set setTitle(title: string) {\n        this.mcTitle = title;\n    }\n\n    @Input('mcTooltipDisabled')\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    @Input('mcMouseEnterDelay')\n    set mcMouseEnterDelay(value: number) {\n        this._mouseEnterDelay = value;\n        this.updateCompValue('mcMouseEnterDelay', value);\n    }\n\n    get mcMouseEnterDelay(): number {\n        return this._mouseEnterDelay;\n    }\n\n    @Input('mcMouseLeaveDelay')\n    set mcMouseLeaveDelay(value: number) {\n        this._mouseLeaveDelay = value;\n        this.updateCompValue('mcMouseLeaveDelay', value);\n    }\n\n    get mcMouseLeaveDelay(): number {\n        return this._mouseEnterDelay;\n    }\n\n    @Input('mcVisible')\n    set mcVisible(value: boolean) {\n        this._visible = value;\n        this.updateCompValue('mcVisible', value);\n    }\n\n    get mcVisible(): boolean {\n        return this._visible;\n    }\n\n    @Input('mcTrigger')\n    set mcTrigger(value: string) {\n        this._trigger = value;\n        this.updateCompValue('mcTrigger', value);\n    }\n\n    get mcTrigger(): string {\n        return this._trigger;\n    }\n\n    @Input('mcPlacement')\n    set mcPlacement(value: string) {\n        if (value) {\n            this._placement = value;\n            this.updateCompValue('mcPlacement', value);\n        } else {\n            this._placement = 'top';\n        }\n    }\n\n    get mcPlacement(): string {\n        return this._placement;\n    }\n\n    @HostBinding('class.mc-tooltip-open')\n    get isOpen(): boolean {\n        return this.isTooltipOpen;\n    }\n\n    @HostBinding('class.disabled')\n    get isParentDisabled(): boolean {\n        return this.parentDisabled;\n    }\n\n    private manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n    private readonly _destroyed = new Subject<void>();\n\n    constructor(\n        private _overlay: Overlay,\n        private elementRef: ElementRef,\n        private _ngZone: NgZone,\n        private _scrollDispatcher: ScrollDispatcher,\n        private hostView: ViewContainerRef,\n        @Inject(MC_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n        @Optional() private _dir: Directionality) {\n            this.availablePositions = POSITION_MAP;\n        }\n\n    /** Create the overlay config and position strategy */\n    _createOverlay(): OverlayRef {\n        if (this._overlayRef) {\n            return this._overlayRef;\n        }\n\n        // Create connected position strategy that listens for scroll events to reposition.\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this.elementRef)\n            .withTransformOriginOn('.mc-tooltip')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(VIEWPORT_MARGIN)\n            .withPositions([ ...DEFAULT_4_POSITIONS ]);\n\n        const scrollableAncestors = this._scrollDispatcher\n            .getAncestorScrollContainers(this.elementRef);\n\n        strategy.withScrollableContainers(scrollableAncestors);\n\n        strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe((change) => {\n            if (this.tooltip) {\n                this.onPositionChange(change);\n                if (change.scrollableViewProperties.isOverlayClipped && this.tooltip.mcVisible) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the tooltip.\n                    this._ngZone.run(() => this.hide());\n                }\n            }\n        });\n\n        this._overlayRef = this._overlay.create({\n            direction: this._dir,\n            positionStrategy: strategy,\n            panelClass: 'mc-tooltip-panel',\n            scrollStrategy: this._scrollStrategy()\n        });\n\n        this._updatePosition();\n\n        this._overlayRef.detachments()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n\n        return this._overlayRef;\n    }\n\n    _detach() {\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n\n        this.tooltip = null;\n    }\n\n    onPositionChange($event: ConnectedOverlayPositionChange): void {\n        let updatedPlacement = this.mcPlacement;\n        Object.keys(this.availablePositions).some((key) => {\n            if ($event.connectionPair.originX === this.availablePositions[key].originX &&\n                $event.connectionPair.originY === this.availablePositions[key].originY &&\n                $event.connectionPair.overlayX === this.availablePositions[key].overlayX &&\n                $event.connectionPair.overlayY === this.availablePositions[key].overlayY) {\n                updatedPlacement = key;\n\n                return true;\n            }\n\n            return false;\n        });\n        this.updateCompValue('mcPlacement', updatedPlacement);\n\n        if (this.tooltip) {\n            this.tooltip.setClassMap();\n        }\n\n        this.handlePositioningUpdate();\n    }\n\n    handlePositioningUpdate() {\n        if (!this._overlayRef) {\n            this._overlayRef = this._createOverlay();\n        }\n        if (this.mcPlacement === 'right' || this.mcPlacement === 'left') {\n            const pos =\n                (this._overlayRef.overlayElement.clientHeight -\n                    this.hostView.element.nativeElement.clientHeight) / 2; // tslint:disable-line\n            const currentContainer = this._overlayRef.overlayElement.style.top || '0px';\n            this._overlayRef.overlayElement.style.top =\n                `${parseInt(currentContainer.split('px')[0], 10) + pos - 1}px`;\n            // TODO: обновлять положение стрелки\\указателя\\\"дятла\"\n        }\n    }\n\n    // tslint:disable-next-line:no-any\n    updateCompValue(key: string, value: any): void {\n        if (this.isDynamicTooltip && value) {\n            if (this.tooltip) {\n                this.tooltip[key] = value;\n            }\n        }\n    }\n\n    ngOnInit(): void {\n        if (this.mcTrigger === 'hover') {\n\n            this.manualListeners\n                .set('mouseenter', () => this.show())\n                .set('mouseleave', () => this.hide())\n                .forEach((listener, event) => this.elementRef.nativeElement.addEventListener(event, listener));\n        }\n\n        if (this.mcTrigger === 'focus') {\n\n            this.manualListeners\n                .set('focus', () => this.show())\n                .set('blur', () => this.hide())\n                .forEach((listener, event) => this.elementRef.nativeElement.addEventListener(event, listener));\n        }\n    }\n\n    ngOnDestroy(): void {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n        this.manualListeners.forEach((listener, event) =>\n            this.elementRef.nativeElement.removeEventListener(event, listener));\n        this.manualListeners.clear();\n\n        this.$unsubscribe.next();\n        this.$unsubscribe.complete();\n    }\n\n    handleKeydown(e: KeyboardEvent) {\n        if (this.isTooltipOpen && e.keyCode === ESCAPE) { // tslint:disable-line\n            this.hide();\n        }\n    }\n\n    handleTouchend() {\n        this.hide();\n    }\n\n    /** Updates the position of the current tooltip. */\n    _updatePosition() {\n        if (!this._overlayRef) {\n            this._overlayRef = this._createOverlay();\n        }\n        const position =\n            this._overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n        const origin = this._getOrigin();\n        const overlay = this._getOverlayPosition();\n\n        position.withPositions([\n            {...origin.main, ...overlay.main},\n            {...origin.fallback, ...overlay.fallback}\n        ]);\n    }\n\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    _getOrigin(): {main: IOriginConnectionPosition; fallback: IOriginConnectionPosition} {\n        const position = this.mcPlacement;\n        const isLtr = !this._dir || this._dir.value === 'ltr';\n        let originPosition: IOriginConnectionPosition;\n\n        if (position === 'top' || position === 'bottom') {\n            originPosition = {originX: 'center', originY: position === 'top' ? 'top' : 'bottom'};\n        } else if (\n            position === 'top' ||\n            (position === 'left' && isLtr) ||\n            (position === 'right' && !isLtr)) {\n            originPosition = {originX: 'start', originY: 'center'};\n        } else if (\n            position === 'bottom' ||\n            (position === 'right' && isLtr) ||\n            (position === 'left' && !isLtr)) {\n            originPosition = {originX: 'end', originY: 'center'};\n        } else {\n            throw getMcTooltipInvalidPositionError(position);\n        }\n\n        const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n        return {\n            main: originPosition,\n            fallback: {originX: x, originY: y}\n        };\n    }\n\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    _getOverlayPosition(): {main: IOverlayConnectionPosition; fallback: IOverlayConnectionPosition} {\n        const position = this.mcPlacement;\n        const isLtr = !this._dir || this._dir.value === 'ltr';\n        let overlayPosition: IOverlayConnectionPosition;\n\n        if (position === 'top') {\n            overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n        } else if (position === 'bottom') {\n            overlayPosition = {overlayX: 'center', overlayY: 'top'};\n        } else if (\n            position === 'top' ||\n            (position === 'left' && isLtr) ||\n            (position === 'right' && !isLtr)) {\n            overlayPosition = {overlayX: 'end', overlayY: 'center'};\n        } else if (\n            position === 'bottom' ||\n            (position === 'right' && isLtr) ||\n            (position === 'left' && !isLtr)) {\n            overlayPosition = {overlayX: 'start', overlayY: 'center'};\n        } else {\n            throw getMcTooltipInvalidPositionError(position);\n        }\n\n        const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n        return {\n            main: overlayPosition,\n            fallback: {overlayX: x, overlayY: y}\n        };\n    }\n\n    /** Inverts an overlay position. */\n    private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n        let newX: HorizontalConnectionPos = x;\n        let newY: VerticalConnectionPos = y;\n        if (this.mcPlacement === 'top' || this.mcPlacement === 'bottom') {\n            if (y === 'top') {\n                newY = 'bottom';\n            } else if (y === 'bottom') {\n                newY = 'top';\n            }\n        } else {\n            if (x === 'end') {\n                newX = 'start';\n            } else if (x === 'start') {\n                newX = 'end';\n            }\n        }\n\n        return {x: newX, y: newY};\n    }\n\n    private show(): void {\n        if (!this.disabled) {\n            if (!this.tooltip) {\n                const overlayRef = this._createOverlay();\n                this._detach();\n                this._portal = this._portal || new ComponentPortal(McToolTipComponent, this.hostView);\n                this.tooltip = overlayRef.attach(this._portal).instance;\n                this.tooltip.afterHidden()\n                    .pipe(takeUntil(this._destroyed))\n                    .subscribe(() => this._detach());\n                this.isDynamicTooltip = true;\n                const properties = [\n                    'mcTitle',\n                    'mcMouseEnterDelay',\n                    'mcMouseLeaveDelay',\n                    'mcVisible',\n                    'mcTrigger',\n                    'mcPlacement' ];\n                properties.forEach((property) => this.updateCompValue(property, this[ property ]));\n                this.tooltip.mcVisibleChange.pipe(takeUntil(this.$unsubscribe), distinctUntilChanged())\n                    .subscribe((data) => {\n                        this._visible = data;\n                        this.mcVisibleChange.emit(data);\n                    });\n            }\n            this._updatePosition();\n            this.tooltip.show();\n            this.isTooltipOpen = true;\n        }\n    }\n\n    private hide(): void {\n        if (this.tooltip) {\n            this.tooltip.hide();\n            this.isTooltipOpen = false;\n        }\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, CanColorCtor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressSpinnerBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressSpinnerMixinBase:\n    CanColorCtor &\n    typeof McProgressSpinnerBase =\n        mixinColor(McProgressSpinnerBase);\n\nconst MAX_DASH_ARRAY = 273;\n\n@Component({\n    selector: 'mc-progress-spinner',\n    templateUrl: './progress-spinner.component.html',\n    styleUrls: ['./progress-spinner.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-spinner',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressSpinner extends _McProgressSpinnerMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-spinner-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressSpinnerMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n\n    get dashOffsetPercent(): string {\n        return `${MAX_DASH_ARRAY - this.percentage * MAX_DASH_ARRAY}%`;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McProgressSpinner } from './progress-spinner.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressSpinner\n    ],\n    declarations: [\n        McProgressSpinner\n    ]\n})\nexport class McProgressSpinnerModule {}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef,\n    Input, OnDestroy, OnInit, Optional, Output, QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { UniqueSelectionDispatcher } from '@ptsecurity/cdk/collections';\n\nimport {\n    CanColor, CanColorCtor,\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/** Change event object emitted by McRadio. */\nexport class McRadioChange {\n    constructor(\n        /** The McRadioButton that emits the change event. */\n        public source: McRadioButton,\n        /** The value of the McRadioButton. */\n        public value: any) {}\n}\n\n// Boilerplate for applying mixins to McRadioGroup.\n/** @docs-private */\nexport class McRadioGroupBase {}\nexport const _McRadioGroupMixinBase: CanDisableCtor & typeof McRadioGroupBase = mixinDisabled(McRadioGroupBase);\n\n/**\n * Provider Expression that allows mc-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McRadioGroup),\n    multi: true\n};\n\n@Directive({\n    selector: 'mc-radio-group',\n    exportAs: 'mcRadioGroup',\n    providers: [MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n    host: {\n        role: 'radiogroup',\n        class: 'mc-radio-group'\n    },\n    inputs: ['disabled']\n})\nexport class McRadioGroup extends _McRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    @Input()\n    get name(): string { return this._name; }\n    set name(value: string) {\n        this._name = value;\n        this.updateRadioButtonNames();\n    }\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this.markRadiosForCheck();\n    }\n\n    /** Value of the radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n\n            this.updateSelectedRadioFromValue();\n            this.checkSelectedRadioButton();\n        }\n    }\n\n    /** Whether the radio button is selected. */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: McRadioButton | null) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this.checkSelectedRadioButton();\n    }\n\n    /** Whether the radio group is disabled */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /** Whether the radio group is required */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** Child radio buttons. */\n    @ContentChildren(forwardRef(() => McRadioButton), { descendants: true })\n    _radios: QueryList<McRadioButton>;\n\n    /**\n     * Selected value for group. Should equal the value of the selected radio button if there *is*\n     * a corresponding radio button with a matching value. If there is *not* such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    private _value: any = null;\n\n    /** The HTML name attribute applied to radio buttons in this group. */\n    private _name: string = `mc-radio-group-${nextUniqueId++}`;\n\n    /** The currently selected radio button. Should match value. */\n    private _selected: McRadioButton | null = null;\n\n    /** Whether the `value` has been set to its initial value. */\n    private _isInitialized: boolean = false;\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    private _labelPosition: 'before' | 'after' = 'after';\n\n    /** Whether the radio group is disabled. */\n    private _disabled: boolean = false;\n\n    /** Whether the radio group is required. */\n    private _required: boolean = false;\n\n    constructor(\n        private readonly _changeDetector: ChangeDetectorRef\n    ) {\n        super();\n    }\n\n    /** The method to be called in order to update ngModel */\n    // tslint:disable-next-line\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @docs-private\n     */\n    // tslint:disable-next-line\n    onTouched: () => any = () => {};\n\n    checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on McRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the McRadioGroup.\n        this._isInitialized = true;\n    }\n\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        if (this._isInitialized) {\n            this.change.emit(new McRadioChange(this._selected!, this._value));\n        }\n    }\n\n    markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach((radio) => radio.markForCheck());\n        }\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n\n    private updateRadioButtonNames(): void {\n        if (this._radios) {\n            this._radios.forEach((radio) => {\n                radio.name = this.name;\n            });\n        }\n    }\n\n    /** Updates the `selected` radio button from the internal _value state. */\n    private updateSelectedRadioFromValue(): void {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n        if (this._radios != null && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach((radio) => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n}\n\n\n// Boilerplate for applying mixins to McRadioButton.\n/** @docs-private */\nexport class McRadioButtonBase {\n    // Since the disabled property is manually defined for the McRadioButton and isn't set up in\n    // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n    // defined to properly work.\n    disabled: boolean;\n\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McRadioButtonMixinBase:\n    CanColorCtor &\n    HasTabIndexCtor &\n    typeof McRadioButtonBase =\n        mixinColor(mixinTabIndex(McRadioButtonBase));\n\n\n@Component({\n    selector: 'mc-radio-button',\n    templateUrl: 'radio.component.html',\n    styleUrls: ['radio.css'],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    exportAs: 'mcRadioButton',\n    host: {\n        class: 'mc-radio-button',\n        '[attr.id]': 'id',\n        '[class.mc-radio-checked]': 'checked',\n        '[class.mc-radio-disabled]': 'disabled',\n        '(focus)': '_inputElement.nativeElement.focus()'\n    }\n})\nexport class McRadioButton extends _McRadioButtonMixinBase\n    implements OnInit, OnDestroy, CanColor, HasTabIndex {\n\n    private readonly _uniqueId: string = `mc-radio-${++nextUniqueId}`;\n\n    /* tslint:disable:member-ordering */\n\n    /** The unique ID for the radio button. */\n    @Input() id: string = this._uniqueId;\n\n    /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n    @Input() name: string;\n\n    /** Used to set the 'aria-label' attribute on the underlying input element. */\n    @Input('aria-label') ariaLabel: string;\n\n    /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n    @Input('aria-labelledby') ariaLabelledby: string;\n\n    /** The 'aria-describedby' attribute is read after the element's label and field type. */\n    @Input('aria-describedby') ariaDescribedby: string;\n\n    /** Whether this radio button is checked. */\n    @Input()\n    get checked(): boolean { return this._checked; }\n    set checked(value: boolean) {\n        const newCheckedState = toBoolean(value);\n\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** The value of this radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(value: any) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup != null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n\n    /** Whether the radio button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n    }\n    set disabled(value: boolean) {\n        const newDisabledState = toBoolean(value);\n\n        if (this._disabled !== newDisabledState) {\n\n            this._disabled = newDisabledState;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** Whether the radio button is required. */\n    @Input()\n    get required(): boolean {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    private _labelPosition: 'before' | 'after';\n\n    /** The native `<input type=radio>` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** The parent radio group. May or may not be present. */\n    radioGroup: McRadioGroup;\n\n    @Input()\n    isFocused: boolean = false;\n\n    /** ID of the native input element inside `<mc-radio-button>` */\n    get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n    /** Whether this radio is checked. */\n    private _checked: boolean = false;\n\n    /** Whether this radio is disabled. */\n    private _disabled: boolean;\n\n    /** Whether this radio is required. */\n    private _required: boolean;\n\n    /** Value assigned to this radio. */\n    private _value: any = null;\n\n    /** Unregister function for _radioDispatcher */\n    // tslint:disable-next-line\n    private readonly removeUniqueSelectionListener: () => void = () => {};\n\n    constructor(\n        @Optional() radioGroup: McRadioGroup,\n        elementRef: ElementRef,\n        private readonly _changeDetector: ChangeDetectorRef,\n        private readonly _radioDispatcher: UniqueSelectionDispatcher\n    ) {\n\n        super(elementRef);\n\n        this.radioGroup = radioGroup;\n\n        this.removeUniqueSelectionListener =\n            _radioDispatcher.listen((id: string, name: string) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n\n    ngOnDestroy() {\n        this.removeUniqueSelectionListener();\n    }\n\n    /** Focuses the radio button. */\n    // tslint:disable-next-line\n    focus(): void {}\n\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n\n    onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n\n    onInputChange(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this.emitChangeEvent();\n\n        if (this.radioGroup) {\n            this.radioGroup.controlValueAccessorChangeFn(this.value);\n            this.radioGroup.touch();\n            if (groupValueChanged) {\n                this.radioGroup.emitChangeEvent();\n            }\n        }\n    }\n\n    /** Dispatch change event with current value. */\n    private emitChangeEvent(): void {\n        this.change.emit(new McRadioChange(this, this._value));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McRadioButton, McRadioGroup } from './radio.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule],\n    exports: [McRadioGroup, McRadioButton],\n    declarations: [McRadioGroup, McRadioButton]\n})\nexport class McRadioModule {\n}\n","import { Directive, Input } from '@angular/core';\n\nimport { CdkTreeNodeDef } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodeDef]',\n    inputs: ['when: mcTreeNodeDefWhen'],\n    providers: [{ provide: CdkTreeNodeDef, useExisting: McTreeNodeDef }]\n})\nexport class McTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n    @Input('mcTreeNode') data: T;\n}\n","import { Directive, Input, OnInit } from '@angular/core';\nimport { CdkTreeNodePadding } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodePadding]',\n    providers: [{ provide: CdkTreeNodePadding, useExisting: McTreeNodePadding }]\n})\nexport class McTreeNodePadding<T> extends CdkTreeNodePadding<T> implements OnInit {\n    get leftPadding(): number {\n        return (this._withIcon ? 0 : this._iconWidth) + this._baseLeftPadding;\n    }\n\n    _baseLeftPadding: number = 6;\n    _iconWidth: number = 20;\n    _indent: number = 16;\n\n    @Input('mcTreeNodePadding') level: number;\n\n    @Input('mcTreeNodePaddingIndent') indent: number;\n\n    _withIcon: boolean;\n\n    _paddingIndent(): string | null {\n        const nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)\n            ? this._tree.treeControl.getLevel(this._treeNode.data)\n            : null;\n\n        const level = this._level || nodeLevel;\n\n        return level ? `${(level * this._indent) + this.leftPadding}px` : `${this._baseLeftPadding}px`;\n    }\n\n    ngOnInit(): void {\n        this._withIcon = this._tree.treeControl.isExpandable(this._treeNode.data);\n        this._setPadding();\n    }\n}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, ContentChildren, EventEmitter, forwardRef, Input, IterableDiffer,\n    IterableDiffers, Output, QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    Directive, ElementRef, Inject\n} from '@angular/core';\nimport { NodeDef, ViewData } from '@angular/core/src/view';\n\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { CdkTreeNode, CdkTree, CdkTreeNodeOutlet } from '@ptsecurity/cdk/tree';\n\nimport {\n    CanDisable, CanDisableCtor,\n    HasTabIndex,\n    HasTabIndexCtor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\nimport { FocusKeyManager } from '@ptsecurity/cdk/a11y';\n\nimport { END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, SPACE } from '@ptsecurity/cdk/keycodes';\n\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n    exportAs: 'mcTreeNodeOption',\n    selector: 'mc-tree-node-option',\n    host: {\n        tabindex: '-1',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': '_hasFocus',\n        '[attr.aria-expanded]': 'isExpanded',\n        '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n        class: 'mc-tree-node',\n\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()',\n\n        '(click)': '_handleClick()'\n    },\n    providers: [\n        { provide: CdkTreeNode, useExisting: McTreeNodeOption }\n    ]\n})\nexport class McTreeNodeOption<T> extends CdkTreeNode<T> implements CanDisable {\n    @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n        }\n    }\n\n    @Input()\n    get selected(): boolean {\n        return this.treeSelection.selectedOptions && this.treeSelection.selectedOptions.isSelected(this) || false;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            // this.treeSelection._reportValueChange();\n        }\n    }\n\n    private _hasFocus: boolean = false;\n\n    private _disabled: boolean = false;\n    private _selected: boolean = false;\n\n    constructor(\n        protected _elementRef: ElementRef,\n        @Inject(forwardRef(() => McTreeSelection))\n        protected treeSelection: McTreeSelection<T>\n    ) {\n        super(_elementRef, treeSelection);\n    }\n\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n\n        this.treeSelection.setFocusedOption(this);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.treeSelection.selectedOptions) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.treeSelection.selectedOptions.select(this);\n        } else {\n            this.treeSelection.selectedOptions.deselect(this);\n        }\n\n        // this._changeDetector.markForCheck();\n    }\n\n    _getHeight(): number {\n        return this._elementRef.nativeElement.getClientRects()[0].height;\n    }\n\n    _handleFocus(): void {\n        if (this.disabled || this._hasFocus) { return; }\n\n        this._hasFocus = true;\n    }\n\n    _handleBlur(): void {\n        this._hasFocus = false;\n    }\n\n    _handleClick(): void {\n        if (this.disabled) { return; }\n\n        this.treeSelection.setFocusedOption(this);\n    }\n}\n\nexport const _McTreeSelectionBase:\n    HasTabIndexCtor &\n    CanDisableCtor &\n    typeof CdkTree\n    = mixinTabIndex(mixinDisabled(CdkTree));\n\nexport class McTreeNavigationChange {\n    constructor(\n        public source: McTreeSelection<any>,\n        public option: McTreeNodeOption<any>\n    ) {}\n}\n\nexport class McTreeSelectionChange {\n    constructor(\n        public source: McTreeSelection<any>,\n        public option: McTreeNodeOption<any>\n    ) {}\n}\n\n@Component({\n    exportAs: 'mcTreeSelection',\n    selector: 'mc-tree-selection',\n    template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n    host: {\n        '[tabIndex]': 'tabIndex',\n        class: 'mc-tree-selection',\n        role: 'tree-selection',\n        '(keydown)': '_onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    styleUrls: ['./tree.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{ provide: CdkTree, useExisting: McTreeSelection }]\n})\nexport class McTreeSelection<T> extends _McTreeSelectionBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex {\n    // Outlets within the tree's template where the dataNodes will be inserted.\n    @ViewChild(CdkTreeNodeOutlet) _nodeOutlet: CdkTreeNodeOutlet;\n\n    @ContentChildren(forwardRef(() => McTreeNodeOption)) options: QueryList<McTreeNodeOption<T>>;\n\n    _keyManager: FocusKeyManager<McTreeNodeOption<T>>;\n\n    selectedOptions: SelectionModel<McTreeNodeOption<T>>;\n\n    _disabled: boolean = false;\n    tabIndex: number;\n    multiple: boolean;\n    autoSelect: boolean;\n    noUnselect: boolean;\n\n    // todo temporary solution\n    withShift: boolean;\n    withCtrl: boolean;\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(rawValue: boolean) {\n        const value = toBoolean(rawValue);\n\n        if (this._disabled !== value) {\n            this._disabled = value;\n\n            if (this._disabled) {\n                console.log('need disable all options');\n            } else {\n                console.log('need enable all options');\n            }\n        }\n    }\n\n    @Output() readonly navigationChange = new EventEmitter<McTreeNavigationChange>();\n\n    @Output() readonly selectionChange = new EventEmitter<McTreeSelectionChange>();\n\n    constructor(\n        private _elementRef: ElementRef,\n        _differs: IterableDiffers,\n        _changeDetectorRef: ChangeDetectorRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('multiple') multiple: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string\n    ) {\n        super(_differs, _changeDetectorRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.multiple = multiple === null ? true : toBoolean(multiple);\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.selectedOptions = new SelectionModel<McTreeNodeOption<T>>(this.multiple);\n    }\n\n    _onKeyDown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n        this.withShift = event.shiftKey;\n        this.withCtrl = event.ctrlKey;\n\n        switch (keyCode) {\n            case LEFT_ARROW:\n                if (this._keyManager.activeItem) {\n                    this.treeControl.collapse(this._keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                break;\n            case RIGHT_ARROW:\n                if (this._keyManager.activeItem) {\n                    this.treeControl.expand(this._keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                break;\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                this._keyManager.setPreviousPageItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                this._keyManager.setNextPageItemActive();\n                event.preventDefault();\n\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    ngAfterContentInit(): void {\n        this._keyManager = new FocusKeyManager<McTreeNodeOption<T>>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation(true)\n            .withHorizontalOrientation(null);\n    }\n\n    updateScrollSize(): void {\n        if (!this.options.first) { return; }\n\n        this._keyManager.withScrollSize(Math.floor(this._getHeight() / this.options.first._getHeight()));\n    }\n\n    setFocusedOption(option: McTreeNodeOption<T>): void {\n        this._keyManager.updateActiveItem(option);\n\n        if (this.withShift && this.multiple) {\n            const previousIndex = this._keyManager.previousActiveItemIndex;\n            const activeIndex = this._keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n\n            this.withShift = false;\n        } else if (this.withCtrl) {\n            this.withCtrl = false;\n\n            if (!this._canDeselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) {\n                this.options.forEach((item) => item.setSelected(false));\n                option.setSelected(true);\n            }\n        }\n\n        this._emitNavigationEvent(option);\n    }\n\n    // Toggles the selected state of the currently focused option.\n    toggleFocusedOption(): void {\n        const focusedIndex = this._keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n            const focusedOption: McTreeNodeOption<T> = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this._canDeselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this._emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    renderNodeChanges(\n        data: T[],\n        dataDiffer: IterableDiffer<T> = this._dataDiffer,\n        viewContainer: any = this._nodeOutlet.viewContainer,\n        parentData?: T\n    ) {\n        super.renderNodeChanges(data, dataDiffer, viewContainer, parentData);\n\n        const arrayOfInstances = [];\n\n        viewContainer._embeddedViews.forEach((view: ViewData) => {\n            const viewDef = view.def;\n\n            viewDef.nodes.forEach((node: NodeDef) => {\n                if (viewDef.nodeMatchedQueries === node.matchedQueryIds) {\n                    const nodeData: any = view.nodes[node.nodeIndex];\n\n                    arrayOfInstances.push(nodeData.instance as never);\n                }\n            });\n        });\n\n        if (this.options) {\n            this.options.reset(arrayOfInstances);\n            this.options.notifyOnChanges();\n        }\n\n        this.updateScrollSize();\n    }\n\n    _getHeight(): number {\n        return this._elementRef.nativeElement.getClientRects()[0].height;\n    }\n\n    _emitNavigationEvent(option: McTreeNodeOption<T>): void {\n        this.navigationChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    _emitChangeEvent(option: McTreeNodeOption<T>): void {\n        this.selectionChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private _isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    private _canDeselectLast(option: McTreeNodeOption<T>): boolean {\n        return !(this.noUnselect && this.selectedOptions.selected.length === 1 && option.selected);\n    }\n}\n\n","import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { CdkTreeModule } from '@ptsecurity/cdk/tree';\n\nimport { McTreeNodeDef } from './node';\nimport { McTreeNodePadding } from './padding';\nimport { McTreeSelection, McTreeNodeOption } from './tree-selection';\n\n\nconst MC_TREE_DIRECTIVES = [\n    McTreeNodeDef,\n    McTreeNodePadding,\n    McTreeSelection,\n    McTreeNodeOption\n];\n\n@NgModule({\n    imports: [CommonModule, CdkTreeModule],\n    exports: MC_TREE_DIRECTIVES,\n    declarations: MC_TREE_DIRECTIVES\n})\nexport class McTreeModule {}\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { FlatTreeControl, ITreeControl } from '@ptsecurity/cdk/tree';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class McTreeFlattener<T, F> {\n\n    constructor(public transformFunction: (node: T, level: number) => F,\n                public getLevel: (node: F) => number,\n                public isExpandable: (node: F) => boolean,\n                public getChildren: (node: T) => Observable<T[]>) {\n    }\n\n    _flattenNode(node: T, level: number,\n                 resultNodes: F[], parentMap: boolean[]): F[] {\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n\n        if (this.isExpandable(flatNode)) {\n            this.getChildren(node).pipe(take(1)).subscribe((children) => {\n                children.forEach((child, index) => {\n                    const childParentMap: boolean[] = parentMap.slice();\n                    childParentMap.push(index !== children.length - 1);\n                    this._flattenNode(child, level + 1, resultNodes, childParentMap);\n                });\n            });\n        }\n\n        return resultNodes;\n    }\n\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n    flattenNodes(structuredData: T[]): F[] {\n        const resultNodes: F[] = [];\n        structuredData.forEach((node) => this._flattenNode(node, 0, resultNodes, []));\n\n        return resultNodes;\n    }\n\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n    expandFlattenedNodes(nodes: F[], treeControl: ITreeControl<F>): F[] {\n        const results: F[] = [];\n        const currentExpand: boolean[] = [];\n        currentExpand[0] = true;\n\n        nodes.forEach((node) => {\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n\n            if (expand) { results.push(node); }\n\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        });\n\n        return results;\n    }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `McTree`.\n * The nested tree nodes of type `T` are flattened through `MсTreeFlattener`, and converted\n * to type `F` for `McTree` to consume.\n */\nexport class McTreeFlatDataSource<T, F> extends DataSource<F> {\n    _flattenedData = new BehaviorSubject<F[]>([]);\n\n    _expandedData = new BehaviorSubject<F[]>([]);\n\n    _data: BehaviorSubject<T[]>;\n\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n        this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n        this.treeControl.dataNodes = this._flattenedData.value;\n    }\n\n    constructor(private treeControl: FlatTreeControl<F>,\n                private treeFlattener: McTreeFlattener<T, F>,\n                initialData: T[] = []) {\n        super();\n        this._data = new BehaviorSubject<T[]>(initialData);\n    }\n\n    connect(collectionViewer: ICollectionViewer): Observable<F[]> {\n        const changes = [\n            collectionViewer.viewChange,\n            this.treeControl.expansionModel.onChange!,\n            this._flattenedData\n        ];\n\n        return merge(...changes).pipe(map(() => {\n            this._expandedData.next(\n                this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n\n            return this._expandedData.value;\n        }));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by ITreeControl and each non-leaf node.\n */\nexport class McTreeNestedDataSource<T> extends DataSource<T> {\n    _data = new BehaviorSubject<T[]>([]);\n\n    /**\n     * Data for the nested tree\n     */\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n    }\n\n    connect(collectionViewer: ICollectionViewer): Observable<T[]> {\n        return merge(...[collectionViewer.viewChange, this._data])\n            .pipe(map(() => this.data));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import {\n    ElementRef,\n    QueryList,\n    ContentChildren,\n    Component,\n    ChangeDetectionStrategy,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { mixinColor, CanColor, CanColorCtor } from '@ptsecurity/mosaic/core';\nimport { McIcon } from '@ptsecurity/mosaic/icon';\n\n\nexport class McTagBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McTagMixinBase: CanColorCtor & typeof McTagBase\n    = mixinColor(McTagBase);\n\n\n@Component({\n    selector: 'mc-tag',\n    templateUrl: 'tag.partial.html',\n    styleUrls: ['./tag.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'mc-tag' },\n    inputs: ['color']\n})\nexport class McTag extends _McTagMixinBase implements CanColor {\n    @ContentChildren(McIcon) contentChildren: QueryList<McIcon>;\n\n    nativeElement: HTMLElement;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        this._addClassModificatorForIcons();\n    }\n\n    _addClassModificatorForIcons() {\n        const icons = this.contentChildren.map((item) => item._elementRef.nativeElement);\n\n        if (icons.length === 1) {\n            const iconElement = icons[0];\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-left-icon');\n                }\n\n                if (iconElement.previousSibling) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-right-icon');\n                }\n            }\n        } else if (icons.length > 1) {\n            const firstIconElement = icons[0];\n            const secondIconElement = icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McTag } from './tag.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McTag\n    ],\n    declarations: [\n        McTag\n    ]\n})\nexport class McTagModule {}\n","import {\n    animate,\n    AnimationTriggerMetadata,\n    state,\n    style,\n    transition,\n    trigger,\n    query,\n    animateChild,\n    group\n} from '@angular/animations';\n\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const mcSelectAnimations: {\n    readonly transformPanel: AnimationTriggerMetadata;\n    readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0)',\n            minWidth: '100%',\n            opacity: 0\n        })),\n        transition('void => *', group([\n            query('@fadeInContent', animateChild()),\n            animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n        ])),\n        transition('* => void', [\n            animate('250ms 100ms linear', style({ opacity: 0 }))\n        ])\n    ]),\n\n    /**\n     * This animation fades in the background color and text content of the\n     * select's options. It is time delayed to occur 100ms after the overlay\n     * panel has transformed in.\n     */\n    fadeInContent: trigger('fadeInContent', [\n        state('showing', style({ opacity: 1 })),\n        transition('void => showing', [\n            style({ opacity: 0 }),\n            animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformPanel = mcSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInContent = mcSelectAnimations.fadeInContent;\n","import { DOCUMENT } from '@angular/common';\nimport {\n    AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef,\n    Component,\n    ComponentFactoryResolver,\n    ComponentRef,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Injector,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    Renderer2,\n    SimpleChanges,\n    TemplateRef,\n    Type,\n    ViewChild,\n    ViewContainerRef, ViewEncapsulation\n} from '@angular/core';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { Overlay, OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { McMeasureScrollbarService } from '@ptsecurity/mosaic/core';\nimport { Observable } from 'rxjs';\n\nimport { McModalControlService } from './modal-control.service';\nimport { McModalRef } from './modal-ref.class';\n// tslint:disable-next-line\nimport ModalUtil from './modal-util';\nimport { IModalButtonOptions, IModalOptions, ModalType, OnClickCallback } from './modal.type';\n\n\n// Duration when perform animations (ms)\nexport const MODAL_ANIMATE_DURATION = 200;\n\ntype AnimationState = 'enter' | 'leave' | null;\n\n@Component({\n    selector: 'mc-modal',\n    templateUrl: './modal.component.html',\n    styleUrls: ['./modal.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        '(keydown)': 'onKeyDown($event)'\n    }\n})\nexport class McModalComponent<T = any, R = any> extends McModalRef<T, R>\n    implements OnInit, OnChanges, AfterViewInit, OnDestroy, IModalOptions {\n\n    // tslint:disable-next-line:no-any\n    @Input() mcModalType: ModalType = 'default';\n    // If not specified, will use <ng-content>\n    @Input() mcContent: string | TemplateRef<{}> | Type<T>;\n    // available when mcContent is a component\n    @Input() mcComponentParams: object;\n    // Default Modal ONLY\n    @Input() mcFooter: string | TemplateRef<{}> | IModalButtonOptions<T>[];\n\n    @Input()\n    get mcVisible() { return this._mcVisible; }\n    set mcVisible(value) { this._mcVisible = value; }\n    _mcVisible = false;\n\n    @Output() mcVisibleChange = new EventEmitter<boolean>();\n\n    @Input() mcZIndex: number = 1000;\n    @Input() mcWidth: number | string = 480;\n    @Input() mcWrapClassName: string;\n    @Input() mcClassName: string;\n    @Input() mcStyle: object;\n    @Input() mcTitle: string | TemplateRef<{}>;\n    @Input() mcCloseByESC: boolean = true;\n\n    @Input()\n    get mcClosable() { return this._mcClosable; }\n    set mcClosable(value) { this._mcClosable = value; }\n    _mcClosable = true;\n\n    @Input()\n    get mcMask() { return this._mcMask; }\n    set mcMask(value) { this._mcMask = value; }\n    _mcMask = true;\n\n    @Input()\n    get mcMaskClosable() { return this._mcMaskClosable; }\n    set mcMaskClosable(value) { this._mcMaskClosable = value; }\n    _mcMaskClosable = true;\n\n    @Input() mcMaskStyle: object;\n    @Input() mcBodyStyle: object;\n\n    // Trigger when modal open(visible) after animations\n    @Output() mcAfterOpen = new EventEmitter<void>();\n    // Trigger when modal leave-animation over\n    @Output() mcAfterClose = new EventEmitter<R>();\n\n    // --- Predefined OK & Cancel buttons\n    @Input() mcOkText: string;\n    @Input() mcOkType = 'primary';\n\n    @Input()\n    get mcOkLoading() { return this._mcOkLoading; }\n    set mcOkLoading(value) { this._mcOkLoading = value; }\n    _mcOkLoading = false;\n\n    @Input() @Output() mcOnOk: EventEmitter<T> | OnClickCallback<T> = new EventEmitter<T>();\n    // Only aim to focus the ok button that needs to be auto focused\n    @ViewChild('autoFocusButtonOk', {read: ElementRef}) autoFocusButtonOk: ElementRef;\n    @Input() mcCancelText: string;\n\n    @Input()\n    get mcCancelLoading() { return this._mcCancelLoading; }\n    set mcCancelLoading(value) { this._mcCancelLoading = value; }\n    _mcCancelLoading = false;\n\n    @Input() @Output() mcOnCancel: EventEmitter<T> | OnClickCallback<T> = new EventEmitter<T>();\n    @ViewChild('modalContainer') modalContainer: ElementRef;\n    @ViewChild('bodyContainer', {read: ViewContainerRef}) bodyContainer: ViewContainerRef;\n    maskAnimationClassMap: object;\n    modalAnimationClassMap: object;\n    // The origin point that animation based on\n    transformOrigin = '0px 0px 0px';\n\n    // Observable alias for mcAfterOpen\n    get afterOpen(): Observable<void> {\n        return this.mcAfterOpen.asObservable();\n    }\n\n    // Observable alias for mcAfterClose\n    get afterClose(): Observable<R> {\n        return this.mcAfterClose.asObservable();\n    }\n\n    get okText(): string {\n        return this.mcOkText;\n    }\n\n    get cancelText(): string {\n        return this.mcCancelText;\n    }\n\n    // Indicate whether this dialog should hidden\n    get hidden(): boolean {\n        return !this.mcVisible && !this.animationState;\n    }\n\n    // Handle the reference when using mcContent as Component\n    private contentComponentRef: ComponentRef<T>;\n    // Current animation state\n    private animationState: AnimationState;\n    private container: HTMLElement | OverlayRef;\n\n    constructor(\n        private overlay: Overlay,\n        private renderer: Renderer2,\n        private cfr: ComponentFactoryResolver,\n        private elementRef: ElementRef,\n        private viewContainer: ViewContainerRef,\n        private mcMeasureScrollbarService: McMeasureScrollbarService,\n        private modalControl: McModalControlService,\n        private changeDetector: ChangeDetectorRef,\n        @Inject(DOCUMENT) private document: any) {\n\n        super();\n    }\n\n    @Input() mcGetContainer: HTMLElement | OverlayRef | (() => HTMLElement | OverlayRef) = () => this.overlay.create();\n\n    ngOnInit() {\n\n        // Create component along without View\n        if (this.isComponent(this.mcContent)) {\n            this.createDynamicComponent(this.mcContent as Type<T>);\n        }\n\n        // Setup default button options\n        if (this.isModalButtons(this.mcFooter)) {\n            this.mcFooter = this.formatModalButtons(this.mcFooter as IModalButtonOptions<T>[]);\n        }\n\n        // Place the modal dom to elsewhere\n        this.container = typeof this.mcGetContainer === 'function' ? this.mcGetContainer() : this.mcGetContainer;\n        if (this.container instanceof HTMLElement) {\n            this.container.appendChild(this.elementRef.nativeElement);\n        } else if (this.container instanceof OverlayRef) {\n            // NOTE: only attach the dom to overlay, the view container is not changed actually\n            this.container.overlayElement.appendChild(this.elementRef.nativeElement);\n        }\n\n        // Register modal when afterOpen/afterClose is stable\n        this.modalControl.registerModal(this);\n    }\n\n    // [NOTE] NOT available when using by service!\n    // Because ngOnChanges never be called when using by service,\n    // here we can't support \"mcContent\"(Component) etc. as inputs that initialized dynamically.\n    // BUT: User also can change \"mcContent\" dynamically to trigger UI changes\n    // (provided you don't use \bComponent that needs initializations)\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.mcVisible) {\n            // Do not trigger animation while initializing\n            this.handleVisibleStateChange(this.mcVisible, !changes.mcVisible.firstChange);\n        }\n    }\n\n    ngAfterViewInit() {\n        // If using Component, it is the time to attach View while bodyContainer is ready\n        if (this.contentComponentRef) {\n            this.bodyContainer.insert(this.contentComponentRef.hostView);\n        }\n\n        if (this.autoFocusButtonOk) {\n            (this.autoFocusButtonOk.nativeElement as HTMLButtonElement).focus();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.container instanceof OverlayRef) {\n            this.container.dispose();\n        }\n    }\n\n    open() {\n        this.changeVisibleFromInside(true);\n    }\n\n    close(result?: R) {\n        this.changeVisibleFromInside(false, result);\n    }\n\n    // Destroy equals Close\n    destroy(result?: R) {\n        this.close(result);\n    }\n\n    triggerOk() {\n        this.onClickOkCancel('ok');\n    }\n\n    triggerCancel() {\n        this.onClickOkCancel('cancel');\n    }\n\n    getInstance(): McModalComponent {\n        return this;\n    }\n\n    getContentComponentRef(): ComponentRef<T> {\n        return this.contentComponentRef;\n    }\n\n    getContentComponent(): T {\n        return this.contentComponentRef && this.contentComponentRef.instance;\n    }\n\n    getElement(): HTMLElement {\n        return this.elementRef && this.elementRef.nativeElement;\n    }\n\n    onClickMask($event: MouseEvent) {\n        if (\n            this.mcMask &&\n            this.mcMaskClosable &&\n            ($event.target as HTMLElement).classList.contains('mc-modal-wrap') &&\n            this.mcVisible\n        ) {\n            this.onClickOkCancel('cancel');\n        }\n    }\n\n    // tslint:disable-next-line\n    isModalType(type: ModalType): boolean {\n        return this.mcModalType === type;\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n\n        if (event.keyCode === ESCAPE && this.container && (this.container instanceof OverlayRef)) {\n\n            this.close();\n            event.preventDefault();\n        }\n    }\n\n    // AoT\n    onClickCloseBtn() {\n        if (this.mcVisible) {\n            this.onClickOkCancel('cancel');\n        }\n    }\n\n    // AoT\n    // tslint:disable-next-line\n    onClickOkCancel(type: 'ok' | 'cancel') {\n        const trigger = { ok: this.mcOnOk, cancel: this.mcOnCancel }[type];\n        const loadingKey = { ok: 'mcOkLoading', cancel: 'mcCancelLoading' }[type];\n\n        if (trigger instanceof EventEmitter) {\n            trigger.emit(this.getContentComponent());\n        } else if (typeof trigger === 'function') {\n\n            const result = trigger(this.getContentComponent());\n            // Users can return \"false\" to prevent closing by default\n            const caseClose = (doClose: boolean | void | {}) => (doClose !== false) && this.close(doClose as R);\n\n            if (isPromise(result)) {\n                this[loadingKey] = true;\n                const handleThen = (doClose) => {\n                    this[loadingKey] = false;\n                    caseClose(doClose);\n                };\n                (result as Promise<void>).then(handleThen).catch(handleThen);\n            } else {\n                caseClose(result);\n            }\n        }\n    }\n\n    // AoT\n    isNonEmptyString(value: {}): boolean {\n        return typeof value === 'string' && value !== '';\n    }\n\n    // AoT\n    isTemplateRef(value: {}): boolean {\n        return value instanceof TemplateRef;\n    }\n\n    // AoT\n    isComponent(value: {}): boolean {\n        return value instanceof Type;\n    }\n\n    // AoT\n    isModalButtons(value: {}): boolean {\n        return Array.isArray(value) && value.length > 0;\n    }\n\n    // Do rest things when visible state changed\n    private handleVisibleStateChange(visible: boolean, animation: boolean = true, closeResult?: R): Promise<any> {\n        // Hide scrollbar at the first time when shown up\n        if (visible) {\n            this.changeBodyOverflow(1);\n        }\n\n        return Promise\n            .resolve(animation && this.animateTo(visible))\n            // Emit open/close event after animations over\n            .then(() => {\n                if (visible) {\n                    this.mcAfterOpen.emit();\n                } else {\n                    this.mcAfterClose.emit(closeResult);\n                    // Show/hide scrollbar when animation is over\n                    this.changeBodyOverflow();\n                }\n            });\n    }\n\n    // Lookup a button's property, if the prop is a function, call & then return the result, otherwise, return itself.\n    // AoT\n    // tslint:disable-next-line\n    getButtonCallableProp(options: IModalButtonOptions<T>, prop: string): {} {\n        const value = options[prop];\n        const args: any[] = [];\n        if (this.contentComponentRef) {\n            args.push(this.contentComponentRef.instance);\n        }\n\n        return typeof value === 'function' ? value.apply(options, args) : value;\n    }\n\n    // On mcFooter's modal button click\n    // AoT\n    // tslint:disable-next-line\n    onButtonClick(button: IModalButtonOptions<T>) {\n        // Call onClick directly\n        const result = this.getButtonCallableProp(button, 'onClick');\n        if (isPromise(result)) {\n            button.loading = true;\n            (result as Promise<{}>).then(() => button.loading = false).catch(() => button.loading = false);\n        }\n    }\n\n    // Change mcVisible from inside\n    private changeVisibleFromInside(visible: boolean, closeResult?: R): Promise<void> {\n        if (this.mcVisible !== visible) {\n            // Change mcVisible value immediately\n            this.mcVisible = visible;\n            this.mcVisibleChange.emit(visible);\n\n            return this.handleVisibleStateChange(visible, true, closeResult);\n        }\n\n        return Promise.resolve();\n    }\n\n    private changeAnimationState(state: AnimationState) {\n        this.animationState = state;\n        if (state) {\n            this.maskAnimationClassMap = {\n                [`fade-${state}`]: true,\n                [`fade-${state}-active`]: true\n            };\n            this.modalAnimationClassMap = {\n                [`zoom-${state}`]: true,\n                [`zoom-${state}-active`]: true\n            };\n        } else {\n            // @ts-ignore\n            this.maskAnimationClassMap = this.modalAnimationClassMap = null;\n        }\n\n        if (this.contentComponentRef) {\n            this.contentComponentRef.changeDetectorRef.markForCheck();\n        } else {\n            this.changeDetector.markForCheck();\n        }\n    }\n\n    private animateTo(isVisible: boolean): Promise<any> {\n        // Figure out the lastest click position when shows up\n        if (isVisible) {\n            // [NOTE] Using timeout due to the document.click event is fired later than visible change,\n            // so if not postponed to next event-loop, we can't get the lastest click position\n            window.setTimeout(() => this.updateTransformOrigin());\n        }\n\n        this.changeAnimationState(isVisible ? 'enter' : 'leave');\n\n        // Return when animation is over\n        return new Promise((resolve) => window.setTimeout(() => {\n            this.changeAnimationState(null);\n            resolve();\n        }, MODAL_ANIMATE_DURATION));\n    }\n\n    private formatModalButtons(buttons: IModalButtonOptions<T>[]): IModalButtonOptions<T>[] {\n        return buttons.map((button) => {\n\n            return {\n                ...{\n                    type: 'default',\n                    size: 'default',\n                    autoLoading: true,\n                    show: true,\n                    loading: false,\n                    disabled: false\n                },\n                ...button\n            };\n        });\n    }\n\n    /**\n     * Create a component dynamically but not attach to any View\n     * (this action will be executed when bodyContainer is ready)\n     * @param component Component class\n     */\n    private createDynamicComponent(component: Type<T>) {\n        const factory = this.cfr.resolveComponentFactory(component);\n        const childInjector = Injector.create({\n            providers: [{provide: McModalRef, useValue: this}],\n            parent: this.viewContainer.parentInjector\n        });\n\n        this.contentComponentRef = factory.create(childInjector);\n\n        if (this.mcComponentParams) {\n            Object.assign(this.contentComponentRef.instance, this.mcComponentParams);\n        }\n\n        // Do the first change detection immediately\n        // (or we do detection at ngAfterViewInit, multi-changes error will be thrown)\n        this.contentComponentRef.changeDetectorRef.detectChanges();\n\n\n    }\n\n    // Update transform-origin to the last click position on document\n    private updateTransformOrigin() {\n        const modalElement = this.modalContainer.nativeElement as HTMLElement;\n        const lastPosition = ModalUtil.getLastClickPosition();\n\n        if (lastPosition) {\n            // tslint:disable-next-line\n            this.transformOrigin = `${lastPosition.x - modalElement.offsetLeft}px ${lastPosition.y - modalElement.offsetTop}px 0px`;\n        }\n    }\n\n    /**\n     * Take care of the body's overflow to decide the existense of scrollbar\n     * @param plusNum The number that the openModals.length will increase soon\n     */\n    private changeBodyOverflow(plusNum: number = 0) {\n        const openModals = this.modalControl.openModals;\n\n        if (openModals.length + plusNum > 0) {\n            // tslint:disable-next-line\n            this.renderer.setStyle(this.document.body, 'padding-right', `${this.mcMeasureScrollbarService.scrollBarWidth}px`);\n            this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n        } else {\n            this.renderer.removeStyle(this.document.body, 'padding-right');\n            this.renderer.removeStyle(this.document.body, 'overflow');\n        }\n    }\n}\n\n////////////\n\nfunction isPromise(obj: {} | void): boolean {\n    // tslint:disable-next-line\n    return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof (obj as Promise<{}>).then === 'function' && typeof (obj as Promise<{}>).catch === 'function';\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n\n@Pipe({\n    name: 'toCssUnit'\n})\nexport class CssUnitPipe implements PipeTransform {\n    transform(value: number | string, defaultUnit: string = 'px'): string {\n        const formatted = +value;\n\n        return isNaN(formatted) ? `${value}` : `${formatted}${defaultUnit}`;\n    }\n}\n","import { ComponentRef, Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { Overlay, OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal } from '@ptsecurity/cdk/portal';\n\nimport { McModalControlService } from './modal-control.service';\nimport { McModalRef } from './modal-ref.class';\nimport { McModalComponent } from './modal.component';\nimport { ConfirmType, IModalOptions, IModalOptionsForService } from './modal.type';\n\n\n// A builder used for managing service creating modals\nexport class ModalBuilderForService {\n\n    // Modal ComponentRef, \"null\" means it has been destroyed\n    private modalRef: ComponentRef<McModalComponent>;\n    private overlayRef: OverlayRef;\n\n    constructor(private overlay: Overlay, options: IModalOptionsForService = {}) {\n        this.createModal();\n\n        if (!('mcGetContainer' in options)) {\n            options.mcGetContainer = null;\n        }\n\n        this.changeProps(options);\n        this.modalRef.instance.open();\n        this.modalRef.instance.mcAfterClose.subscribe(() => this.destroyModal());\n\n        this.overlayRef.keydownEvents()\n            // @ts-ignore\n            .pipe(filter((event: KeyboardEvent) => {\n                return event.keyCode === ESCAPE && options.mcCloseByESC;\n            }))\n            .subscribe(() => this.modalRef.instance.close());\n    }\n\n    getInstance(): McModalComponent {\n        return this.modalRef && this.modalRef.instance;\n    }\n\n    destroyModal(): void {\n        if (this.modalRef) {\n            this.overlayRef.dispose();\n            // @ts-ignore\n            this.modalRef = null;\n        }\n    }\n\n    private changeProps(options: IModalOptions): void {\n        if (this.modalRef) {\n            // here not limit user's inputs at runtime\n            Object.assign(this.modalRef.instance, options);\n        }\n    }\n\n    // Create component to ApplicationRef\n    private createModal(): void {\n        this.overlayRef = this.overlay.create();\n        this.modalRef = this.overlayRef.attach(new ComponentPortal(McModalComponent));\n    }\n}\n\n@Injectable()\nexport class McModalService {\n    // Track of the current close modals (we assume invisible is close this time)\n    get openModals(): McModalRef[] {\n        return this.modalControl.openModals;\n    }\n\n    get afterAllClose(): Observable<void> {\n        return this.modalControl.afterAllClose.asObservable();\n    }\n\n    constructor(\n        private overlay: Overlay,\n        private modalControl: McModalControlService) {\n    }\n\n    // Closes all of the currently-open dialogs\n    closeAll(): void {\n        this.modalControl.closeAll();\n    }\n\n    create<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n\n        if (typeof options.mcOnCancel !== 'function') {\n            // Leave a empty function to close this modal by default\n            // tslint:disable-next-line\n            options.mcOnCancel = () => {};\n        }\n\n        if (!('mcCloseByESC' in options)) {\n            options.mcCloseByESC = true;\n        }\n\n\n        if (!('mcWidth' in options)) {\n            // tslint:disable-next-line\n            options.mcWidth = 480;\n        }\n\n        return new ModalBuilderForService(this.overlay, options).getInstance();\n    }\n\n    confirm<T>(options: IModalOptionsForService<T> = {}, confirmType: ConfirmType = 'confirm'): McModalRef<T> {\n        if ('mcFooter' in options) {\n            console.warn(`The Confirm-Modal doesn't support \"mcFooter\", this property will be ignored.`);\n        }\n\n        // NOTE: only support function currently by calling confirm()\n        if (typeof options.mcOnOk !== 'function') {\n            // Leave a empty function to close this modal by default\n            // tslint:disable-next-line\n            options.mcOnOk = () => {};\n        }\n\n        options.mcModalType = 'confirm';\n        options.mcClassName = `mc-confirm mc-confirm-${confirmType} ${options.mcClassName || ''}`;\n        options.mcMaskClosable = false;\n\n        return this.create(options);\n    }\n\n    success<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n        return this.simpleConfirm(options, 'success');\n    }\n\n    delete<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n        return this.simpleConfirm(options, 'warn');\n    }\n\n    private simpleConfirm<T>(options: IModalOptionsForService<T> = {}, confirmType: ConfirmType): McModalRef<T> {\n        // Remove the Cancel button if the user not specify a Cancel button\n        if (!('mcCancelText' in options)) {\n            // @ts-ignore\n            options.mcCancelText = null;\n        }\n\n        return this.confirm(options, confirmType);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { McButtonModule } from '@ptsecurity/mosaic/button';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { CssUnitPipe } from './css-unit.pipe';\nimport { McModalControlService } from './modal-control.service';\nimport { McModalComponent } from './modal.component';\nimport { McModalService } from './modal.service';\n\n\n@NgModule({\n    imports: [ CommonModule, OverlayModule, McButtonModule, McIconModule ],\n    exports: [ McModalComponent ],\n    declarations: [ McModalComponent, CssUnitPipe ],\n    entryComponents: [ McModalComponent ],\n    providers: [ McModalControlService, McModalService ]\n})\nexport class McModalModule { }\n","import { fromEvent, Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nimport {\n    AfterViewInit,\n    Component, Directive,\n    ElementRef,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    ViewEncapsulation,\n    ContentChild,\n    TemplateRef,\n    ChangeDetectorRef,\n    ChangeDetectionStrategy,\n    ViewChild\n} from '@angular/core';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { SPACE } from '@ptsecurity/cdk/keycodes';\nimport { Platform } from '@ptsecurity/cdk/platform';\nimport { CanDisable, CanDisableCtor, mixinDisabled } from '@ptsecurity/mosaic/core';\n\n\nconst COLLAPSED_CLASS: string = 'mc-navbar-collapsed-title';\nconst MC_ICON = 'mc-icon';\nconst MC_NAVBAR = 'mc-navbar';\nconst MC_NAVBAR_CONTAINER = 'mc-navbar-container';\nconst MC_NAVBAR_ITEM = 'mc-navbar-item';\nconst MC_NAVBAR_BRAND = 'mc-navbar-brand';\nconst MC_NAVBAR_TITLE = 'mc-navbar-title';\nconst MC_NAVBAR_LOGO = 'mc-navbar-logo';\n\nexport type McNavbarContainerPositionType = 'left' | 'right';\n\nexport interface IMcNavbarDropdownItem {\n    link?: string;\n    text: string;\n}\n\n@Directive({\n    selector: MC_NAVBAR_LOGO,\n    host: {\n        class: MC_NAVBAR_LOGO\n    }\n})\nexport class McNavbarLogo {}\n\n@Directive({\n    selector: MC_NAVBAR_BRAND,\n    host: {\n        class: MC_NAVBAR_BRAND\n    }\n})\nexport class McNavbarBrand {}\n\n@Directive({\n    selector: MC_NAVBAR_TITLE,\n    host: {\n        class: MC_NAVBAR_TITLE\n    }\n})\nexport class McNavbarTitle {}\n\nexport class McNavbarItemBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McNavbarMixinBase: CanDisableCtor & typeof McNavbarItemBase = mixinDisabled(McNavbarItemBase);\n\n@Component({\n    selector: MC_NAVBAR_ITEM,\n    template: `\n        <a\n            [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\n            (click)=\"handleClickByItem()\"\n            (keydown)=\"handleKeydown($event)\"\n            class=\"mc-navbar-item\"\n        >\n            <ng-content></ng-content>\n            <i *ngIf=\"hasDropdownContent\" mc-icon=\"mc-angle-M_16\"></i>\n        </a>\n        <ul\n            #dropdownContent\n            *ngIf=\"hasDropdownContent\"\n            [ngClass]=\"{ 'is-collapsed': isCollapsed }\"\n            class=\"mc-navbar-dropdown\"\n        >\n            <li\n                *ngFor=\"let item of dropdownItems\"\n                (click)=\"handleClickByDropdownItem()\"\n                class=\"mc-navbar-dropdown-item\"\n            >\n                <ng-container *ngIf=\"dropdownItemTmpl\">\n                    <ng-container *ngTemplateOutlet=\"dropdownItemTmpl; context: { $implicit: item }\"></ng-container>\n                </ng-container>\n                <a\n                    *ngIf=\"!dropdownItemTmpl\"\n                    [attr.href]=\"item.link\"\n                    [ngClass]=\"{ 'is-active': isActiveDropdownLink(item.link) }\"\n                    class=\"mc-navbar-dropdown-link\"\n                >{{ item.text }}</a>\n            </li>\n        </ul>\n    `,\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': '-1'\n    }\n})\nexport class McNavbarItem extends _McNavbarMixinBase implements OnInit, AfterViewInit, OnDestroy, CanDisable {\n\n    @Input()\n    tabIndex: number = 0;\n\n    @Input()\n    dropdownItems: IMcNavbarDropdownItem[] = [];\n\n    @Input()\n    set collapsedTitle(value: string) {\n        this.elementRef.nativeElement.setAttribute('computedTitle', encodeURI(value));\n    }\n\n    @ContentChild('dropdownItemTmpl', { read: TemplateRef })\n    dropdownItemTmpl: TemplateRef<IMcNavbarDropdownItem>;\n\n    @ViewChild('dropdownContent', { read: ElementRef })\n    dropdownContent: ElementRef;\n\n    get hasDropdownContent() {\n        return this.dropdownItems.length > 0;\n    }\n\n    isCollapsed: boolean = true;\n\n    private _subscription: Subscription = new Subscription();\n    private _focusMonitor$: Observable<FocusOrigin>;\n\n    private get _dropdownElements(): HTMLElement[] {\n        return this.dropdownContent ? this.dropdownContent.nativeElement.querySelectorAll('li > *') : [];\n    }\n\n    constructor(\n        public  elementRef: ElementRef,\n        private _focusMonitor: FocusMonitor,\n        private _platform: Platform,\n        private _cdRef: ChangeDetectorRef\n    ) {\n        super(elementRef);\n    }\n\n    ngOnInit() {\n        this.denyClickIfDisabled();\n\n        this._focusMonitor$ = this._focusMonitor.monitor(this.elementRef.nativeElement, true);\n\n        if (this.hasDropdownContent) {\n            this.listenClickOutside();\n        }\n    }\n\n    ngAfterViewInit() {\n        if (!this.hasDropdownContent) {\n            return;\n        }\n\n        this.startListenFocusDropdownItems();\n    }\n\n    ngOnDestroy() {\n        this._subscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n        this.stopListenFocusDropdownItems();\n    }\n\n    isActiveDropdownLink(link: string): boolean {\n        if (!this._platform.isBrowser) {\n            return false;\n        }\n\n        return window.location.href.indexOf(link) >= 0;\n    }\n\n    handleClickByItem() {\n        this.toggleDropdown();\n    }\n\n    handleKeydown($event: KeyboardEvent) {\n        const isNavbarItem = ($event.target as HTMLElement).classList.contains(MC_NAVBAR_ITEM);\n\n        // tslint:disable-next-line\n        if (this.hasDropdownContent && $event.keyCode === SPACE && isNavbarItem) {\n            this.toggleDropdown();\n        }\n    }\n\n    handleClickByDropdownItem() {\n        this.forceCloseDropdown();\n    }\n\n    private listenClickOutside() {\n        this._subscription.add(\n            this._focusMonitor$.subscribe((origin) => {\n                if (origin === null) {\n                    this.forceCloseDropdown();\n                }\n            })\n        );\n    }\n\n    private toggleDropdown() {\n        this.isCollapsed = !this.isCollapsed;\n    }\n\n    private forceCloseDropdown() {\n        this.isCollapsed = true;\n        this._cdRef.detectChanges();\n    }\n\n    private startListenFocusDropdownItems() {\n        this._dropdownElements.forEach((el) => {\n            this._focusMonitor.monitor(el, true);\n        });\n    }\n\n    private stopListenFocusDropdownItems() {\n        this._dropdownElements.forEach((el) => {\n            this._focusMonitor.stopMonitoring(el);\n        });\n    }\n\n    // This method is required due to angular 2 issue https://github.com/angular/angular/issues/11200\n    private denyClickIfDisabled() {\n        const events: Event[] = this.elementRef.nativeElement.eventListeners('click');\n\n        events.forEach((event) => this.elementRef.nativeElement.removeEventListener('click', event));\n\n        this.elementRef.nativeElement.addEventListener('click', (event: MouseEvent) => {\n            if (this.elementRef.nativeElement.hasAttribute('disabled')) {\n                event.stopImmediatePropagation();\n            }\n        }, true);\n\n        events.forEach((event) => this.elementRef.nativeElement.addEventListener('click', event));\n    }\n}\n\n@Directive({\n    selector: MC_NAVBAR_CONTAINER\n})\nexport class McNavbarContainer {\n    @Input()\n    position: McNavbarContainerPositionType = 'left';\n\n    @HostBinding('class')\n    get cssClasses(): string {\n        return this.position === 'left' ? 'mc-navbar-left' : 'mc-navbar-right';\n    }\n}\n\nclass CollapsibleItem {\n    private _collapsed: boolean = false;\n\n    constructor(\n        public element: HTMLElement,\n        public width: number\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        this._collapsed = collapsed;\n\n        this.updateCollapsedClass();\n    }\n\n    private updateCollapsedClass() {\n        if (this._collapsed) {\n            this.element.classList.add(COLLAPSED_CLASS);\n        } else {\n            this.element.classList.remove(COLLAPSED_CLASS);\n        }\n\n    }\n}\n\nclass CachedItemWidth {\n\n    get canCollapse(): boolean {\n        return this.itemsForCollapse.length > 0;\n    }\n\n    private _collapsedItemsWidth: number;\n\n    get collapsedItemsWidth(): number {\n        if (this._collapsedItemsWidth !== undefined) {\n            return this._collapsedItemsWidth;\n        }\n\n        this.calculateAndCacheCollapsedItemsWidth();\n\n        return this._collapsedItemsWidth;\n    }\n\n    constructor(\n        public element: HTMLElement,\n        public width: number,\n        public itemsForCollapse: CollapsibleItem[] = []\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        if (this.itemsForCollapse.length > 0) {\n            this.updateTitle(collapsed);\n        }\n\n        this.itemsForCollapse.forEach((item) => item.processCollapsed(collapsed));\n    }\n\n    private calculateAndCacheCollapsedItemsWidth() {\n        this._collapsedItemsWidth = this.itemsForCollapse\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getTitle(): string {\n        const computedTitle = this.element.getAttribute('computedTitle');\n\n        return computedTitle\n            ? decodeURI(computedTitle)\n            : (this.itemsForCollapse.length > 0 ? this.itemsForCollapse[0].element.innerText : '');\n    }\n\n    private updateTitle(collapsed: boolean) {\n        if (collapsed) {\n            this.element.setAttribute('title', this.getTitle());\n        } else {\n            this.element.removeAttribute('title');\n        }\n    }\n}\n\n\n@Component({\n    selector: MC_NAVBAR,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    template: `\n        <nav class=\"mc-navbar\">\n            <ng-content select=\"[${MC_NAVBAR_CONTAINER}],${MC_NAVBAR_CONTAINER}\"></ng-content>\n        </nav>\n    `,\n    styleUrls: ['./navbar.css'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class McNavbar implements AfterViewInit, OnDestroy {\n\n    private readonly forceRecalculateItemsWidth: boolean = false;\n    private readonly resizeDebounceInterval: number = 100;\n    private readonly firstLevelElement: string = MC_NAVBAR_CONTAINER;\n    private readonly secondLevelElements: string[] = [\n        MC_NAVBAR_ITEM,\n        MC_NAVBAR_BRAND,\n        MC_NAVBAR_TITLE\n    ];\n\n    private _totalItemsWidths: number;\n    private _itemsWidths: CachedItemWidth[];\n\n    private get maxAllowedWidth(): number {\n        return this._elementRef.nativeElement.querySelector('nav').getBoundingClientRect().width;\n    }\n\n    private get itemsWidths(): CachedItemWidth[] {\n        if (this._itemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._itemsWidths;\n        }\n\n        this.calculateAndCacheItemsWidth();\n\n        return this._itemsWidths;\n    }\n\n    private get totalItemsWidth(): number {\n        if (this._totalItemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._totalItemsWidths;\n        }\n\n        this.calculateAndCacheTotalItemsWidth();\n\n        return this._totalItemsWidths;\n    }\n\n    private _resizeSubscription: Subscription;\n\n    constructor(\n        private _elementRef: ElementRef\n    ) {\n        const resizeObserver = fromEvent(window, 'resize')\n            .pipe(debounceTime(this.resizeDebounceInterval));\n\n        this._resizeSubscription = resizeObserver.subscribe(this.updateCollapsed.bind(this));\n    }\n\n    updateCollapsed(): void {\n        let collapseDelta = this.totalItemsWidth - this.maxAllowedWidth;\n\n        for (let i = this.itemsWidths.length - 1; i >= 0; i--) {\n            const item = this.itemsWidths[i];\n\n            if (!item.canCollapse) {\n                continue;\n            }\n\n            item.processCollapsed(collapseDelta > 0);\n            collapseDelta -= item.collapsedItemsWidth;\n        }\n    }\n\n    ngAfterViewInit(): void {\n        // Note: this wait is required for loading and rendering fonts for icons;\n        // unfortunately we cannot control font rendering\n        setTimeout(() => this.updateCollapsed(), 0);\n    }\n\n    ngOnDestroy() {\n        this._resizeSubscription.unsubscribe();\n    }\n\n    private calculateAndCacheTotalItemsWidth() {\n        this._totalItemsWidths = this.itemsWidths\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getOuterElementWidth(element: HTMLElement): number {\n        const baseWidth  = element.getBoundingClientRect().width;\n        const marginRight = parseInt(getComputedStyle(element).getPropertyValue('margin-right'));\n        const marginLeft = parseInt(getComputedStyle(element).getPropertyValue('margin-left'));\n\n        return baseWidth + marginRight + marginLeft;\n    }\n\n    private calculateAndCacheItemsWidth() {\n        const allItemsSelector = this.secondLevelElements\n            .map((e: string) => `${this.firstLevelElement}>${e}`);\n        const allItems: HTMLElement[] = Array.from(this._elementRef.nativeElement.querySelectorAll(allItemsSelector));\n\n        this._itemsWidths = allItems\n            .map((el) => new CachedItemWidth(el, this.getOuterElementWidth(el), this.getItemsForCollapse(el)));\n    }\n\n    private getItemsForCollapse(element: HTMLElement): CollapsibleItem[] {\n        const icon = element.querySelector(`[${MC_ICON}],${MC_NAVBAR_LOGO},[${MC_NAVBAR_LOGO}]`);\n\n        if (!icon) {\n            return [];\n        }\n\n        return Array.from(element.querySelectorAll(MC_NAVBAR_TITLE))\n            .map((el) => new CollapsibleItem(<HTMLElement> el, el.getBoundingClientRect().width));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport {\n    McNavbar,\n    McNavbarContainer,\n    McNavbarItem,\n    McNavbarTitle,\n    McNavbarBrand,\n    McNavbarLogo\n} from './navbar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        McIconModule\n    ],\n    exports: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ],\n    declarations: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ]\n})\nexport class McNavbarModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, CanColorCtor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressBarMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressBarBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressBarMixinBase:\n    CanColorCtor &\n    typeof McProgressBarBase =\n        mixinColor(McProgressBarBase);\n\n@Component({\n    selector: 'mc-progress-bar',\n    templateUrl: './progress-bar.component.html',\n    styleUrls: ['./progress-bar.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-bar',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressBar extends _McProgressBarMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-bar-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressBarMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McProgressBar\n} from './progress-bar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressBar\n    ],\n    declarations: [\n        McProgressBar\n    ]\n})\nexport class McProgressBarModule {}\n","import { Directive, forwardRef, Input, OnChanges, Provider, SimpleChanges } from '@angular/core';\nimport { AbstractControl, NG_VALIDATORS, ValidationErrors, Validator, ValidatorFn, Validators } from '@angular/forms';\n\n\nexport const MIN_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MinValidator),\n    multi: true\n};\n\n/**\n * A directive which installs the {@link MinValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `min` attribute.\n *\n * @experimental\n */\n@Directive({\n    selector: '[min][formControlName],[min][formControl],[min][ngModel]',\n    providers: [MIN_VALIDATOR],\n    host: {'[attr.min]': 'min ? min : null'}\n})\nexport class MinValidator implements Validator, OnChanges {\n\n    @Input() min: string;\n    private _validator: ValidatorFn;\n    private _onChange: () => void;\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('min' in changes) {\n            this._createValidator();\n            if (this._onChange) { this._onChange(); }\n        }\n    }\n\n    validate(c: AbstractControl): ValidationErrors | null { return this._validator(c); }\n\n    registerOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n\n    private _createValidator(): void { this._validator = Validators.min(parseInt(this.min, 10)); }\n}\n\n\nexport const MAX_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MaxValidator),\n    multi: true\n};\n\n/**\n * A directive which installs the {@link MaxValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `min` attribute.\n *\n * @experimental\n */\n@Directive({\n    selector: '[max][formControlName],[max][formControl],[max][ngModel]',\n    providers: [MAX_VALIDATOR],\n    host: {'[attr.max]': 'max ? max : null'}\n})\nexport class MaxValidator implements Validator,\n    OnChanges {\n\n    @Input() max: string;\n    private _validator: ValidatorFn;\n    private _onChange: () => void;\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('max' in changes) {\n            this._createValidator();\n            if (this._onChange) { this._onChange(); }\n        }\n    }\n\n    validate(c: AbstractControl): ValidationErrors | null { return this._validator(c); }\n\n    registerOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n\n    private _createValidator(): void { this._validator = Validators.max(parseInt(this.max, 10)); }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McInput, McInputMono, McNumberInput } from './input';\nimport { MaxValidator, MinValidator } from './input-number-validators';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule, FormsModule],\n    exports: [McInput, McNumberInput, McInputMono, MinValidator, MaxValidator],\n    declarations: [McInput, McNumberInput, McInputMono, MinValidator, MaxValidator ]\n})\nexport class McInputModule {\n}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-content',\n    preserveWhitespaces: false,\n    templateUrl: './content.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ],\n    host: {\n        '[class.mc-layout-content]': 'true'\n    }\n})\nexport class McContentComponent {\n}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-footer',\n    preserveWhitespaces: false,\n    templateUrl: './footer.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ],\n    host: {\n        '[class.mc-layout-footer]': 'true'\n    }\n})\nexport class McFooterComponent {\n}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector : 'mc-header',\n    preserveWhitespaces: false,\n    templateUrl: './header.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ],\n    host: {\n        '[class.mc-layout-header]': 'true'\n    }\n})\nexport class McHeaderComponent {\n}\n","import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-layout',\n    preserveWhitespaces: false,\n    styleUrls: ['layout.css'],\n    templateUrl: './layout.component.html',\n    host: {\n        '[class.mc-layout]': 'true',\n        '[class.mc-layout-has-sidebar]': 'hasSidebar'\n    },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McLayoutComponent {\n    hasSidebar = false;\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    EventEmitter,\n    Host,\n    Input,\n    OnInit,\n    Optional,\n    Output\n} from '@angular/core';\nimport { toBoolean } from '@ptsecurity/mosaic/core';\n\nimport { McLayoutComponent } from './layout.component';\n\n\n@Component({\n    selector: 'mc-sidebar',\n    preserveWhitespaces: false,\n    templateUrl: './sidebar.component.html',\n    host: {\n        '[class.mc-layout-sidebar]': 'true',\n        '[class.mc-layout-sidebar-collapsed]': 'mcCollapsed',\n        '[style.flex]': 'mcFlex',\n        '[style.max-width.px]': 'mcWidth',\n        '[style.min-width.px]': 'mcWidth',\n        '[style.width.px]': 'mcWidth'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McSidebarComponent implements OnInit {\n\n    @Input() _mcWidth = 200;\n    @Input() mcCollapsedWidth = 80;\n\n    @Input()\n    set mcCollapsible(value: boolean) {\n        this.collapsible = toBoolean(value);\n    }\n\n    get mcCollapsible(): boolean {\n        return this.collapsible;\n    }\n\n    @Input()\n    set mcCollapsed(value: boolean) {\n        this.collapsed = toBoolean(value);\n    }\n\n    get mcCollapsed(): boolean {\n        return this.collapsed;\n    }\n\n    // tslint:disable-next-line\n    @Output() mcCollapsedChange = new EventEmitter();\n\n    private collapsed = false;\n    private collapsible = false;\n\n    get mcFlex(): string {\n        if (this.mcCollapsed) {\n            return `0 0 ${this.mcCollapsedWidth}px`;\n        } else {\n            return `0 0 ${this.mcWidth}px`;\n        }\n    }\n\n    get mcWidth(): number {\n        if (this.mcCollapsed) {\n            return this.mcCollapsedWidth;\n        } else {\n            return this._mcWidth;\n        }\n    }\n\n    constructor(\n        @Optional() @Host() private mcLayoutComponent: McLayoutComponent) {\n    }\n\n    ngOnInit() {\n        if (this.mcLayoutComponent) {\n            this.mcLayoutComponent.hasSidebar = true;\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McContentComponent } from './content.component';\nimport { McFooterComponent } from './footer.component';\nimport { McHeaderComponent } from './header.component';\nimport { McLayoutComponent } from './layout.component';\nimport { McSidebarComponent } from './sidebar.component';\n\n\n@NgModule({\n    imports: [ CommonModule ],\n    exports: [\n        McLayoutComponent,\n        McContentComponent,\n        McFooterComponent,\n        McHeaderComponent,\n        McSidebarComponent\n    ],\n    declarations: [\n        McLayoutComponent,\n        McContentComponent,\n        McFooterComponent,\n        McHeaderComponent,\n        McSidebarComponent\n    ]\n})\nexport class McLayoutModule {\n}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    Output,\n    QueryList,\n    ViewEncapsulation,\n    ChangeDetectorRef,\n    Inject,\n    OnDestroy,\n    OnInit,\n    ViewChild\n} from '@angular/core';\n\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { Subscription } from 'rxjs';\n\nimport { FocusKeyManager, IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { END, ENTER, HOME, PAGE_DOWN, PAGE_UP, SPACE } from '@ptsecurity/cdk/keycodes';\n\nimport {\n    McLine,\n    McLineSetter,\n    CanDisable,\n    mixinDisabled,\n    toBoolean, CanDisableCtor\n} from '@ptsecurity/mosaic/core';\n\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n    exportAs: 'mcListOption',\n    selector: 'mc-list-option',\n    host: {\n        tabindex: '-1',\n\n        class: 'mc-list-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': '_hasFocus',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()',\n        '(click)': '_handleClick()'\n    },\n    templateUrl: 'list-option.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListOption implements AfterContentInit, OnDestroy, OnInit, IFocusableOption {\n    _hasFocus: boolean = false;\n\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    @ViewChild('text') _text: ElementRef;\n\n    // Whether the label should appear before or after the checkbox. Defaults to 'after'\n    @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n    @Input() value: any;\n\n    @Input()\n    get disabled() {\n        return this._disabled || (this.listSelection && this.listSelection.disabled);\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    @Input()\n    get selected(): boolean {\n        return this.listSelection.selectedOptions && this.listSelection.selectedOptions.isSelected(this) || false;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            this.listSelection._reportValueChange();\n        }\n    }\n\n    private _lineSetter: McLineSetter;\n    private _selected = false;\n    private _disabled = false;\n\n    constructor(\n        private _element: ElementRef,\n        private _changeDetector: ChangeDetectorRef,\n        @Inject(forwardRef(() => McListSelection))\n        public listSelection: McListSelection\n    ) {}\n\n    ngOnInit() {\n        if (this._selected) {\n            // List options that are selected at initialization can't be reported properly to the form\n            // control. This is because it takes some time until the selection-list knows about all\n            // available options. Also it can happen that the ControlValueAccessor has an initial value\n            // that should be used instead. Deferring the value change report to the next tick ensures\n            // that the form control value is not being overwritten.\n            const wasSelected = this._selected;\n\n            Promise.resolve().then(() => {\n                if (this._selected || wasSelected) {\n                    this.selected = true;\n                    this._changeDetector.markForCheck();\n                }\n            });\n        }\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    ngOnDestroy(): void {\n        if (this.selected) {\n            // We have to delay this until the next tick in order\n            // to avoid changed after checked errors.\n            Promise.resolve().then(() => this.selected = false);\n        }\n\n        this.listSelection._removeOptionFromList(this);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    focus(): void {\n        this._element.nativeElement.focus();\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    getLabel() {\n        return this._text ? this._text.nativeElement.textContent : '';\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.listSelection.selectedOptions) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.listSelection.selectedOptions.select(this);\n        } else {\n            this.listSelection.selectedOptions.deselect(this);\n        }\n\n        this._changeDetector.markForCheck();\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    _handleClick() {\n        if (this.disabled) { return; }\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    _handleFocus() {\n        if (this.disabled || this._hasFocus) { return; }\n\n        this._hasFocus = true;\n    }\n\n    _handleBlur() {\n        this._hasFocus = false;\n\n        this.listSelection._onTouched();\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n\n\nexport const MC_SELECTION_LIST_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McListSelection),\n    multi: true\n};\n\n// Change event that is being fired whenever the selected state of an option changes. */\nexport class McListSelectionChange {\n    constructor(\n        // Reference to the selection list that emitted the event.\n        public source: McListSelection,\n        // Reference to the option that has been changed.\n        public option: McListOption\n    ) {}\n}\n\n\nexport class McListSelectionBase {}\n\nexport const _McListSelectionMixinBase: CanDisableCtor & typeof McListSelectionBase\n    = mixinDisabled(McListSelectionBase);\n\n@Component({\n    exportAs: 'mcListSelection',\n    selector: 'mc-list-selection',\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'tabIndex'],\n    host: {\n        class: 'mc-list-selection',\n        '[tabIndex]': 'tabIndex',\n        '(focus)': 'focus()',\n        '(blur)': '_onTouched()',\n        '(keydown)': '_onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    providers: [MC_SELECTION_LIST_VALUE_ACCESSOR],\n    preserveWhitespaces: false\n})\nexport class McListSelection extends _McListSelectionMixinBase implements\n    IFocusableOption, CanDisable, AfterContentInit, ControlValueAccessor {\n\n    _keyManager: FocusKeyManager<McListOption>;\n\n    // The option components contained within this selection-list.\n    @ContentChildren(McListOption) options: QueryList<McListOption>;\n\n    tabIndex: number;\n\n    autoSelect: boolean;\n    noUnselect: boolean;\n    multiple: boolean;\n\n    // todo temporary solution\n    withShift: boolean;\n    withCtrl: boolean;\n\n    @Input() horizontal: boolean = false;\n\n    // Emits a change event whenever the selected state of an option changes.\n    @Output() readonly selectionChange: EventEmitter<McListSelectionChange> = new EventEmitter<McListSelectionChange>();\n\n    selectedOptions: SelectionModel<McListOption>;\n\n    // Used for storing the values that were assigned before the options were initialized.\n    private _tempValues: string[] | null;\n\n    private _modelChanges = Subscription.EMPTY;\n\n    constructor(\n        private _element: ElementRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string,\n        @Attribute('multiple') multiple: string\n    ) {\n        super();\n\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.multiple = multiple === null ? true : toBoolean(multiple);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.selectedOptions = new SelectionModel<McListOption>(this.multiple);\n    }\n\n    ngAfterContentInit(): void {\n        this.horizontal = toBoolean(this.horizontal);\n\n        this._keyManager = new FocusKeyManager<McListOption>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation(!this.horizontal)\n            .withHorizontalOrientation(this.horizontal ? 'ltr' : null);\n\n        if (this._tempValues) {\n            this._setOptionsFromValues(this._tempValues);\n            this._tempValues = null;\n        }\n\n        // Sync external changes to the model back to the options.\n        this._modelChanges = this.selectedOptions.onChange!.subscribe((event) => {\n            for (const item of event.added) {\n                item.selected = true;\n            }\n\n            for (const item of event.removed) {\n                item.selected = false;\n            }\n        });\n\n        this.updateScrollSize();\n    }\n\n    ngOnDestroy() {\n        this._modelChanges.unsubscribe();\n    }\n\n    focus() {\n        this._element.nativeElement.focus();\n    }\n\n    selectAll() {\n        this.options.forEach((option) => option.setSelected(true));\n\n        this._reportValueChange();\n    }\n\n    deselectAll() {\n        this.options.forEach((option) => option.setSelected(false));\n\n        this._reportValueChange();\n    }\n\n    updateScrollSize(): void {\n        if (this.horizontal || !this.options.first) { return; }\n\n        this._keyManager.withScrollSize(Math.floor(this._getHeight() / this.options.first._getHeight()));\n    }\n\n    // Sets the focused option of the selection-list.\n    setFocusedOption(option: McListOption): void {\n        this._keyManager.updateActiveItem(option);\n\n        if (this.withShift && this.multiple) {\n            const previousIndex = this._keyManager.previousActiveItemIndex;\n            const activeIndex = this._keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n\n            this.withShift = false;\n        } else if (this.withCtrl) {\n            this.withCtrl = false;\n\n            if (!this._canDeselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) {\n                this.options.forEach((item) => item.setSelected(false));\n                option.setSelected(true);\n            }\n        }\n\n        this._emitChangeEvent(option);\n        this._reportValueChange();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(values: string[]): void {\n        if (this.options) {\n            this._setOptionsFromValues(values || []);\n        } else {\n            this._tempValues = values;\n        }\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this._onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this._onTouched = fn;\n    }\n\n    // Implemented as a part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        if (this.options) {\n            this.options.forEach((option) => option.disabled = isDisabled);\n        }\n    }\n\n    getSelectedOptionValues(): string[] {\n        return this.options.filter((option) => option.selected).map((option) => option.value);\n    }\n\n    // Toggles the selected state of the currently focused option.\n    toggleFocusedOption(): void {\n        const focusedIndex = this._keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n            const focusedOption: McListOption = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this._canDeselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this._emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    _canDeselectLast(listOption: McListOption): boolean {\n        return !(this.noUnselect && this.selectedOptions.selected.length === 1 && listOption.selected);\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    // View to model callback that should be called if the list or its options lost focus.\n    _onTouched: () => void = () => {};\n\n    // Removes an option from the selection list and updates the active item.\n    _removeOptionFromList(option: McListOption) {\n        if (option._hasFocus) {\n            const optionIndex = this._getOptionIndex(option);\n\n            // Check whether the option is the last item\n            if (optionIndex > 0) {\n                this._keyManager.setPreviousItemActive();\n            } else if (optionIndex === 0 && this.options.length > 1) {\n                this._keyManager.setNextItemActive();\n            }\n        }\n    }\n\n    _onKeyDown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n        this.withShift = event.shiftKey;\n        this.withCtrl = event.ctrlKey;\n\n        switch (keyCode) {\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                if (!this.horizontal) { this._keyManager.setPreviousPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                if (!this.horizontal) { this._keyManager.setNextPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    // Reports a value change to the ControlValueAccessor\n    _reportValueChange() {\n        if (this.options) {\n            this._onChange(this.getSelectedOptionValues());\n        }\n    }\n\n    // Emits a change event if the selected state of an option changed.\n    _emitChangeEvent(option: McListOption) {\n        this.selectionChange.emit(new McListSelectionChange(this, option));\n    }\n\n    // Returns the option with the specified value.\n    private _getOptionByValue(value: string): McListOption | undefined {\n        return this.options.find((option) => option.value === value);\n    }\n\n    // Sets the selected options based on the specified values.\n    private _setOptionsFromValues(values: string[]) {\n        this.options.forEach((option) => option.setSelected(false));\n\n        values\n            .map((value) => this._getOptionByValue(value))\n            .filter(Boolean)\n            .forEach((option) => option!.setSelected(true));\n    }\n\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private _isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    // Returns the index of the specified list option.\n    private _getOptionIndex(option: McListOption): number {\n        return this.options.toArray().indexOf(option);\n    }\n\n    // View to model callback that should be called whenever the selected options change.\n    private _onChange: (value: any) => void = (_: any) => {};\n}\n","// todo пока не делаем, перенесено из материала, но у нас в доках таких простых списков нет.\nimport {\n    AfterContentInit, ChangeDetectionStrategy, Component, ContentChildren, Directive, ElementRef, QueryList,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { McLine, McLineSetter } from '@ptsecurity/mosaic/core';\n\n\nexport class McListBase {}\n\n@Component({\n    selector: 'mc-list',\n    host: { class: 'mc-list' },\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McList extends McListBase {}\n\n\n/**\n * Directive whose purpose is to add the mc- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n    selector: '[mc-subheader], [mcSubheader]',\n    host: { class: 'mc-subheader' }\n})\nexport class McListSubheaderCssStyler {}\n\n\n// Boilerplate for applying mixins to McListItem.\nexport class McListItemBase {}\n\n@Component({\n    selector: 'mc-list-item, a[mc-list-item]',\n    host: {\n        class: 'mc-list-item',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()'\n    },\n    templateUrl: './list-item.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListItem extends McListItemBase implements AfterContentInit {\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    private _lineSetter: McLineSetter;\n\n    constructor(private _element: ElementRef) {\n        super();\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    _handleFocus() {\n        this._element.nativeElement.classList.add('mc-focused');\n    }\n\n    _handleBlur() {\n        this._element.nativeElement.classList.remove('mc-focused');\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLineModule } from '@ptsecurity/mosaic/core';\n\nimport { McListSelection, McListOption } from './list-selection.component';\nimport { McList, McListItem, McListSubheaderCssStyler } from './list.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        McLineModule\n    ],\n    exports: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ],\n    declarations: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ]\n})\nexport class McListModule {}\n","import {\n    Input,\n    Attribute,\n    Component,\n    ElementRef,\n    OnDestroy,\n    ViewEncapsulation,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef\n} from '@angular/core';\n\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport {\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\nexport class McLinkBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\nexport const _McLinkBase: HasTabIndexCtor & CanDisableCtor & typeof McLinkBase\n    = mixinTabIndex(mixinDisabled(McLinkBase));\n\n@Component({\n    selector: 'a.mc-link',\n    template: `<ng-content></ng-content>`,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcLink',\n    styleUrls: ['./link.css'],\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': 'tabIndex'\n    }\n})\n\nexport class McLink extends _McLinkBase implements OnDestroy, HasTabIndex, CanDisable {\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    private _disabled = false;\n\n    constructor(\n        @Attribute('tabindex') tabIndex: string,\n        public elementRef: ElementRef,\n        private _focusMonitor: FocusMonitor,\n        private _changeDetector: ChangeDetectorRef) {\n\n        super(elementRef);\n        this._focusMonitor.monitor(elementRef.nativeElement, true);\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this._getHostElement().focus();\n    }\n\n    _getHostElement() {\n        return this.elementRef.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLink } from './link.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule\n    ],\n    declarations: [McLink],\n    exports: [McLink]\n})\nexport class McLinkModule {}\n","import { Injectable, Optional, SkipSelf } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\n\nimport { McModalRef } from './modal-ref.class';\n\n\ninterface IRegisteredMeta {\n    modalRef: McModalRef;\n    afterOpenSubscription: Subscription;\n    afterCloseSubscription: Subscription;\n}\n\n@Injectable()\nexport class McModalControlService {\n\n    // Track singleton afterAllClose through over the injection tree\n    get afterAllClose(): Subject<void> {\n        return this.parentService ? this.parentService.afterAllClose : this.rootAfterAllClose;\n    }\n\n    // Track singleton openModals array through over the injection tree\n    get openModals(): McModalRef[] {\n        return this.parentService ? this.parentService.openModals : this.rootOpenModals;\n    }\n\n    // @ts-ignore\n    private rootOpenModals: McModalRef[] = this.parentService ? null : [];\n    // @ts-ignore\n    private rootAfterAllClose: Subject<void> = this.parentService ? null : new Subject<void>();\n    // @ts-ignore\n    private rootRegisteredMetaMap: Map<McModalRef, IRegisteredMeta> = this.parentService ? null : new Map();\n\n    // Registered modal for later usage\n    private get registeredMetaMap(): Map<McModalRef, IRegisteredMeta> {\n        return this.parentService ? this.parentService.registeredMetaMap : this.rootRegisteredMetaMap;\n    }\n\n    constructor(\n        @Optional() @SkipSelf() private parentService: McModalControlService) {\n    }\n\n    // Register a modal to listen its open/close\n    registerModal(modalRef: McModalRef): void {\n        if (!this.hasRegistered(modalRef)) {\n            const afterOpenSubscription = modalRef.afterOpen.subscribe(() => this.openModals.push(modalRef));\n            const afterCloseSubscription = modalRef.afterClose.subscribe(() => this.removeOpenModal(modalRef));\n\n            this.registeredMetaMap.set(modalRef, {modalRef, afterOpenSubscription, afterCloseSubscription});\n        }\n    }\n\n    hasRegistered(modalRef: McModalRef): boolean {\n        return this.registeredMetaMap.has(modalRef);\n    }\n\n    // Close all registered opened modals\n    closeAll(): void {\n        let i = this.openModals.length;\n\n        while (i--) {\n            this.openModals[i].close();\n        }\n    }\n\n    private removeOpenModal(modalRef: McModalRef): void {\n        const index = this.openModals.indexOf(modalRef);\n\n        if (index > -1) {\n            this.openModals.splice(index, 1);\n\n            if (!this.openModals.length) {\n                this.afterAllClose.next();\n            }\n        }\n    }\n}\n","import { Observable } from 'rxjs';\n\nimport { McModalComponent } from './modal.component';\n\n\n/**\n * API class that public to users to handle the modal instance.\n * McModalRef is aim to avoid accessing to the modal instance directly by users.\n */\nexport abstract class McModalRef<T = any, R = any> {\n    abstract afterOpen: Observable<void>;\n    abstract afterClose: Observable<R>;\n\n    abstract open(): void;\n\n    abstract close(result?: R): void;\n\n    abstract destroy(result?: R): void;\n\n    /**\n     * Trigger the nzOnOk/nzOnCancel by manual\n     */\n    abstract triggerOk(): void;\n\n    abstract triggerCancel(): void;\n\n    // /**\n    //  * Return the ComponentRef of nzContent when specify nzContent as a Component\n    //  * Note: this method may return undefined if the Component has not ready yet.\n    //    (it only available after Modal's ngOnInit)\n    //  */\n    // abstract getContentComponentRef(): ComponentRef<{}>;\n\n    /**\n     * Return the component instance of nzContent when specify nzContent as a Component\n     * Note: this method may return undefined if the Component has not ready yet.\n     * (it only available after Modal's ngOnInit)\n     */\n    abstract getContentComponent(): T;\n\n    /**\n     * Get the dom element of this Modal\n     */\n    abstract getElement(): HTMLElement;\n\n    /**\n     * Get the instance of the Modal itself\n     */\n    abstract getInstance(): McModalComponent;\n}\n","export interface IClickPosition {\n    x: number;\n    y: number;\n}\n\nexport class ModalUtil {\n    private lastPosition: IClickPosition;\n\n    constructor(private document: Document) {\n        this.lastPosition = {x: -1, y: -1};\n        this.listenDocumentClick();\n    }\n\n    getLastClickPosition(): IClickPosition {\n        return this.lastPosition;\n    }\n\n    listenDocumentClick(): void {\n        this.document.addEventListener('click', (event: MouseEvent) => {\n            this.lastPosition = {x: event.clientX, y: event.clientY};\n        });\n    }\n}\n\nexport default new ModalUtil(document);\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    OnDestroy,\n    QueryList,\n    ViewEncapsulation,\n    ContentChildren\n} from '@angular/core';\n\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { Platform } from '@ptsecurity/cdk/platform';\n\nimport { mixinColor, mixinDisabled, CanColor, CanDisable, CanDisableCtor, CanColorCtor } from '@ptsecurity/mosaic/core';\nimport { McIcon } from '@ptsecurity/mosaic/icon';\n\n\n@Directive({\n    selector: 'button[mc-button], a[mc-button]',\n    host: { class: 'mc-button' }\n})\nexport class McButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-xs-button], a[mc-xs-button]',\n    host: { class: 'mc-button mc-button_xs' }\n})\nexport class McXSButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-sm-button], a[mc-sm-button]',\n    host: { class: 'mc-button mc-button_sm' }\n})\nexport class McSMButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-lg-button], a[mc-lg-button]',\n    host: { class: 'mc-button mc-button_lg' }\n})\nexport class McLGButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-xl-button], a[mc-xl-button]',\n    host: { class: 'mc-button mc-button_xl' }\n})\nexport class McXLButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-icon-button], a[mc-icon-button]',\n    queries: {\n        contentChildren: new ContentChildren(McIcon)\n    },\n    host: { class: 'mc-icon-button' }\n})\nexport class McIconButtonCSSStyler {\n    nativeElement: Element;\n\n    contentChildren: QueryList<McIcon>;\n\n    constructor(elementRef: ElementRef) {\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        this._addClassModificatorForIcons();\n    }\n\n    _addClassModificatorForIcons() {\n        const twoIcons = 2;\n        const icons = this.contentChildren.map((item) => item._elementRef.nativeElement);\n\n        if (icons.length === 1) {\n            const iconElement = icons[0];\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-icon-button_left');\n                }\n\n                if (iconElement.previousSibling) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-icon-button_right');\n                }\n            }\n        } else if (icons.length === twoIcons) {\n            const firstIconElement = icons[0];\n            const secondIconElement = icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n}\n\n\nexport class McButtonBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McButtonMixinBase:\n    CanDisableCtor &\n    CanColorCtor &\n    typeof McButtonBase =\n        mixinColor(mixinDisabled(McButtonBase));\n\n\n@Component({\n    selector: `\n        button[mc-button],\n        button[mc-xs-button],\n        button[mc-sm-button],\n        button[mc-lg-button],\n        button[mc-xl-button]\n    `,\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[disabled]': 'disabled || null'\n    }\n})\nexport class McButton extends _McButtonMixinBase implements OnDestroy, CanDisable, CanColor {\n    constructor(elementRef: ElementRef, private _platform: Platform, private _focusMonitor: FocusMonitor) {\n        super(elementRef);\n\n        this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this._getHostElement().focus();\n    }\n\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n\n\n@Component({\n    selector: 'a[mc-button], a[mc-xs-button], a[mc-sm-button], a[mc-lg-button], a[mc-xl-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[attr.tabindex]': 'disabled ? -1 : 0',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': '_haltDisabledEvents($event)'\n    }\n})\nexport class McAnchor extends McButton {\n    constructor(platform: Platform, focusMonitor: FocusMonitor, elementRef: ElementRef) {\n        super(elementRef, platform, focusMonitor);\n    }\n\n    _haltDisabledEvents(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\n\n\n@Component({\n    selector: 'button[mc-icon-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[attr.tabindex]': 'disabled ? -1 : 0',\n        '[attr.disabled]': 'disabled || null'\n    }\n})\nexport class McIconButton extends McButton {\n    constructor(platform: Platform, focusMonitor: FocusMonitor, elementRef: ElementRef) {\n        super(elementRef, platform, focusMonitor);\n    }\n\n    _haltDisabledEvents(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McButton,\n    McAnchor,\n    McIconButton,\n    McButtonCSSStyler,\n    McXSButtonCSSStyler,\n    McSMButtonCSSStyler,\n    McLGButtonCSSStyler,\n    McXLButtonCSSStyler,\n    McIconButtonCSSStyler\n} from './button.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McButton,\n        McAnchor,\n        McIconButton,\n        McButtonCSSStyler,\n        McXSButtonCSSStyler,\n        McSMButtonCSSStyler,\n        McLGButtonCSSStyler,\n        McXLButtonCSSStyler,\n        McIconButtonCSSStyler\n    ],\n    declarations: [\n        McButton,\n        McAnchor,\n        McIconButton,\n        McButtonCSSStyler,\n        McXSButtonCSSStyler,\n        McSMButtonCSSStyler,\n        McLGButtonCSSStyler,\n        McXLButtonCSSStyler,\n        McIconButtonCSSStyler\n    ]\n})\nexport class McButtonModule {}\n","import { InjectionToken } from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type McCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MC_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<McCheckboxClickAction>('mc-checkbox-click-action');\n","import {\n    AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport {\n    CanColor, CanColorCtor,\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\nimport { MC_CHECKBOX_CLICK_ACTION, McCheckboxClickAction } from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mc-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McCheckbox),\n    multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n    /** The initial state of the component before any user interaction. */\n    Init,\n    /** The state representing the component when it's becoming checked. */\n    Checked,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate\n}\n\n/** Change event object emitted by McCheckbox. */\nexport class McCheckboxChange {\n    /** The source McCheckbox of the event. */\n    source: McCheckbox;\n    /** The new `checked` value of the checkbox. */\n    checked: boolean;\n}\n\n// Boilerplate for applying mixins to McCheckbox.\n/** @docs-private */\nexport class McCheckboxBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\nexport const _McCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof McCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisabled(McCheckboxBase)));\n\n\n/**\n * A mosaic checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A McCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n */\n@Component({\n    selector: 'mc-checkbox',\n    templateUrl: 'checkbox.html',\n    styleUrls: ['checkbox.css'],\n    exportAs: 'mcCheckbox',\n    host: {\n        class: 'mc-checkbox',\n        '[id]': 'id',\n        '[attr.id]': 'id',\n        '[class.mc-checkbox-indeterminate]': 'indeterminate',\n        '[class.mc-checkbox-checked]': 'checked',\n        '[class.mc-checkbox-disabled]': 'disabled',\n        '[class.mc-checkbox-label-before]': 'labelPosition == \"before\"'\n    },\n    providers: [MC_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCheckbox extends _McCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex {\n\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     */\n    @Input('aria-label') ariaLabel: string = '';\n\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n    private _uniqueId: string = `mc-checkbox-${++nextUniqueId}`;\n\n    /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n    @Input() id: string = this._uniqueId;\n\n    /** Returns the unique id for the visual hidden input. */\n    get inputId(): string {\n        return `${this.id || this._uniqueId}-input`;\n    }\n\n    /** Whether the checkbox is required. */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    private _required: boolean;\n\n    /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n    @Input() labelPosition: 'before' | 'after' = 'after';\n\n    /** Name value will be applied to the input element if present */\n    @Input() name: string | null = null;\n\n    /** Event emitted when the checkbox's `checked` value changes. */\n    @Output() readonly change: EventEmitter<McCheckboxChange> =\n        new EventEmitter<McCheckboxChange>();\n\n    /** Event emitted when the checkbox's `indeterminate` value changes. */\n    @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** The value attribute of the native input element */\n    @Input() value: string;\n\n    /** The native `<input type=\"checkbox\">` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * @docs-private\n     */\n    _onTouched: () => any = () => {\n    }\n\n    private _currentAnimationClass: string = '';\n\n    private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n    private _controlValueAccessorChangeFn: (value: any) => void = () => {\n    }\n\n    constructor(elementRef: ElementRef,\n                private _changeDetectorRef: ChangeDetectorRef,\n                private _focusMonitor: FocusMonitor,\n                @Attribute('tabindex') tabIndex: string,\n                @Optional() @Inject(MC_CHECKBOX_CLICK_ACTION)\n                private _clickAction: McCheckboxClickAction) {\n        super(elementRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._inputElement.nativeElement)\n            .subscribe((focusOrigin) => this._onInputFocusChange(focusOrigin));\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    }\n\n    /**\n     * Whether the checkbox is checked.\n     */\n    @Input()\n    get checked(): boolean {\n        return this._checked;\n    }\n\n    set checked(value: boolean) {\n        if (value != this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _checked: boolean = false;\n\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value != this.disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    @Input()\n    get indeterminate(): boolean {\n        return this._indeterminate;\n    }\n\n    set indeterminate(value: boolean) {\n        const changed = value != this._indeterminate;\n        this._indeterminate = value;\n\n        if (changed) {\n            if (this._indeterminate) {\n                this._transitionCheckState(TransitionCheckState.Indeterminate);\n            } else {\n                this._transitionCheckState(\n                    this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n    }\n\n    private _indeterminate: boolean = false;\n\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // This method is getting called whenever the label of the checkbox changes.\n        // Since the checkbox uses the OnPush strategy we need to notify it about the change\n        // that has been recognized by the cdkObserveContent directive.\n        this._changeDetectorRef.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any) {\n        this.checked = !!value;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this._onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n    }\n\n    _getAriaChecked(): 'true' | 'false' | 'mixed' {\n        return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n    }\n\n    private _transitionCheckState(newState: TransitionCheckState) {\n        const oldState = this._currentCheckState;\n        const element: HTMLElement = this._elementRef.nativeElement;\n\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n\n        this._currentCheckState = newState;\n\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n        }\n    }\n\n    private _emitChangeEvent() {\n        const event = new McCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    }\n\n    /** Function is called whenever the focus changes for the input element. */\n    private _onInputFocusChange(focusOrigin: FocusOrigin) {\n        if (focusOrigin) {\n            this._onTouched();\n        }\n    }\n\n    /** Toggles the `checked` state of the checkbox. */\n    toggle(): void {\n        this.checked = !this.checked;\n    }\n\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event\n     */\n    _onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && this._clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && this._clickAction !== 'check') {\n\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n\n            this.toggle();\n            this._transitionCheckState(\n                this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        } else if (!this.disabled && this._clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mc-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n\n    /** Focuses the checkbox. */\n    focus(): void {\n        this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n    }\n\n    _onInteractionEvent(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n}\n","import {\n    Directive,\n    forwardRef,\n    Provider\n} from '@angular/core';\nimport {\n    CheckboxRequiredValidator,\n    NG_VALIDATORS\n} from '@angular/forms';\n\n\nexport const MC_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McCheckboxRequiredValidator),\n    multi: true\n};\n\n/**\n * Validator for Mosaic checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mc-checkbox`.\n */\n@Directive({\n    selector: `mc-checkbox[required][formControlName],\n             mc-checkbox[required][formControl], mc-checkbox[required][ngModel]`,\n    providers: [MC_CHECKBOX_REQUIRED_VALIDATOR],\n    host: { '[attr.required]': 'required ? \"\" : null' }\n})\nexport class McCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McCheckbox } from './checkbox';\nimport { McCheckboxRequiredValidator } from './checkbox-required-validator';\n\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [McCheckbox, McCheckboxRequiredValidator],\n    declarations: [McCheckbox, McCheckboxRequiredValidator]\n})\nexport class McCheckboxModule {\n}\n","import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\n\n\n@Component({\n    selector: 'mc-divider',\n    host: {\n        class: 'mc-divider',\n        role: 'separator',\n        '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n        '[class.mc-divider-vertical]': 'vertical',\n        '[class.mc-divider-inset]': 'inset'\n    },\n    template: '',\n    styleUrls: ['divider.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false\n})\nexport class McDivider {\n    // Whether the divider is vertically aligned.\n    @Input()\n    get vertical(): boolean {\n        return this._vertical;\n    }\n\n    set vertical(value: boolean) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n\n    private _vertical: boolean = false;\n\n    // Whether the divider is an inset divider.\n    @Input()\n    get inset(): boolean {\n        return this._inset;\n    }\n\n    set inset(value: boolean) {\n        this._inset = coerceBooleanProperty(value);\n    }\n\n    private _inset: boolean = false;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McDivider } from './divider.component';\n\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [McDivider],\n    declarations: [McDivider]\n})\nexport class McDividerModule {\n}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-cleaner',\n    template: '<i mc-icon=\"mc-close-M_16\" class=\"mc-cleaner__icon\"></i>'\n})\nexport class McCleaner {\n}\n","import { NgControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\n\n/** An interface which allows a control to work inside of a `MсFormField`. */\nexport abstract class McFormFieldControl<T> {\n    /** The value of the control. */\n    value: T | null;\n\n    /**\n     * Stream that emits whenever the state of the control changes such that the parent `MсFormField`\n     * needs to run change detection.\n     */\n    readonly stateChanges: Observable<void>;\n\n    /** The element ID for this control. */\n    readonly id: string;\n\n    /** The placeholder for this control. */\n    readonly placeholder: string;\n\n    /** Gets the NgControl for this control. */\n    readonly ngControl: NgControl | null;\n\n    /** Whether the control is focused. */\n    readonly focused: boolean;\n\n    /** Whether the control is empty. */\n    readonly empty: boolean;\n\n    /** Whether the control is required. */\n    readonly required: boolean;\n\n    /** Whether the control is disabled. */\n    readonly disabled: boolean;\n\n    /** Whether the control is in an error state. */\n    readonly errorState: boolean;\n\n    /**\n     * An optional name for the control type that can be used to distinguish `mc-form-field` elements\n     * based on their control type. The form field will add a class,\n     * `mc-form-field-type-{{controlType}}` to its root element.\n     */\n    readonly controlType?: string;\n\n    /** Handles a click on the control's container. */\n    abstract onContainerClick(event: MouseEvent): void;\n}\n","import { Observable } from 'rxjs';\n\n\n/** An interface which allows a control to work inside of a `MсFormField`. */\nexport abstract class McFormFieldNumberControl<T> {\n    /** The value of the control. */\n    value: T | null;\n\n    /**\n     * Stream that emits whenever the state of the control changes such that the parent `MсFormField`\n     * needs to run change detection.\n     */\n    readonly stateChanges: Observable<void>;\n\n    /** the number step */\n    step: number;\n\n    /** the number big step */\n    bigStep: number;\n\n    /** Whether the control is focused. */\n    readonly focused: boolean;\n\n    /** Handles step up and down */\n    abstract stepUp(step: number): void;\n\n    abstract stepDown(step: number): void;\n}\n","import { Directive, Input } from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n@Directive({\n    selector: 'mc-hint',\n    host: {\n        class: 'mc-hint',\n        '[attr.id]': 'id'\n    }\n})\nexport class McHint {\n    @Input() id: string = `mc-hint-${nextUniqueId++}`;\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcPrefix]'\n})\nexport class McPrefix {\n}\n","import { Component, EventEmitter, Output } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-stepper',\n    template: `\n        <i class=\"mc mc-stepper-step-up mc-icon mc-angle-L_16 mc-icon-flip-h\" (mousedown)=\"onStepUp($event)\"></i>\n        <i class=\"mc mc-stepper-step-down mc-icon mc-angle-L_16\" (mousedown)=\"onStepDown($event)\"></i>\n    `\n})\nexport class McStepper {\n    @Output()\n    readonly stepUp: EventEmitter<void> = new EventEmitter<void>();\n    @Output()\n    readonly stepDown: EventEmitter<void> = new EventEmitter<void>();\n\n    onStepUp($event: MouseEvent) {\n        this.stepUp.emit();\n        $event.preventDefault();\n    }\n\n    onStepDown($event: MouseEvent) {\n        this.stepDown.emit();\n        $event.preventDefault();\n    }\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcSuffix]'\n})\nexport class McSuffix {\n}\n","import {\n    AfterContentChecked,\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren, Directive,\n    ElementRef,\n    QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { CanColor, CanColorCtor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\nimport { EMPTY, merge } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n\n\nimport { McCleaner } from './cleaner';\nimport { McFormFieldControl } from './form-field-control';\nimport { getMcFormFieldMissingControlError } from './form-field-errors';\nimport { McFormFieldNumberControl } from './form-field-number-control';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McStepper } from './stepper';\nimport { McSuffix } from './suffix';\n\n\nlet nextUniqueId = 0;\n\nexport class McFormFieldBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McFormFieldMixinBase: CanColorCtor & typeof McFormFieldBase\n    = mixinColor(McFormFieldBase, ThemePalette.Primary);\n\n@Component({\n    selector: 'mc-form-field',\n    exportAs: 'mcFormField',\n    templateUrl: 'form-field.html',\n    // McInput is a directive and can't have styles, so we need to include its styles here.\n    // The McInput styles are fairly minimal so it shouldn't be a big deal for people who\n    // aren't using McInput.\n    styleUrls: [\n        'form-field.css',\n        '../input/input.css'\n    ],\n    host: {\n        class: 'mc-form-field',\n        '[class.mc-form-field_invalid]': '_control.errorState',\n        '[class.mc-form-field_disabled]': '_control.disabled',\n        '[class.mc-form-field_has-prefix]': 'hasPrefix',\n        '[class.mc-form-field_has-suffix]': 'hasSuffix',\n        '[class.mc-form-field_has-cleaner]': 'canShowCleaner',\n        '[class.mc-form-field_has-stepper]': 'canShowStepper',\n        '[class.mc-focused]': '_control.focused',\n        '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n        '[class.ng-touched]': '_shouldForward(\"touched\")',\n        '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n        '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n        '[class.ng-valid]': '_shouldForward(\"valid\")',\n        '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n        '[class.ng-pending]': '_shouldForward(\"pending\")',\n        '(keydown)': 'onKeyDown($event)',\n        '(mouseenter)': 'onHoverChanged(true)',\n        '(mouseleave)': 'onHoverChanged(false)'\n    },\n    inputs: ['color'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class McFormField extends _McFormFieldMixinBase implements\n    AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n\n    @ContentChild(McFormFieldControl) _control: McFormFieldControl<any>;\n    @ContentChild(McFormFieldNumberControl) _numberControl: McFormFieldNumberControl<any>;\n    @ContentChildren(McHint) _hint: QueryList<McHint>;\n    @ContentChildren(McSuffix) _suffix: QueryList<McSuffix>;\n    @ContentChildren(McPrefix) _prefix: QueryList<McPrefix>;\n    @ContentChildren(McCleaner) _cleaner: QueryList<McCleaner>;\n    @ContentChild(McStepper) _stepper: McStepper;\n\n    // Unique id for the internal form field label.\n    _labelId = `mc-form-field-label-${nextUniqueId++}`;\n\n    hovered: boolean = false;\n\n    constructor(public _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef) {\n        super(_elementRef);\n    }\n\n    ngAfterContentInit() {\n        this._validateControlChild();\n        if (this._control.controlType) {\n            this._elementRef.nativeElement.classList\n                .add(`mc-form-field-type-${this._control.controlType}`);\n\n            if (this._numberControl && this.hasStepper) {\n                this._stepper.stepUp.subscribe(this.onStepUp.bind(this));\n                this._stepper.stepDown.subscribe(this.onStepDown.bind(this));\n            }\n        }\n\n        // Subscribe to changes in the child control state in order to update the form field UI.\n        this._control.stateChanges.pipe(startWith())\n            .subscribe(() => {\n                this._changeDetectorRef.markForCheck();\n            });\n\n        if (this._numberControl) {\n            this._numberControl.stateChanges.pipe(startWith())\n                .subscribe(() => {\n                    this._changeDetectorRef.markForCheck();\n                });\n        }\n\n        // Run change detection if the value changes.\n        const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n        merge(valueChanges)\n            .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    ngAfterContentChecked() {\n        this._validateControlChild();\n    }\n\n    ngAfterViewInit() {\n        // Avoid animations on load.\n        this._changeDetectorRef.detectChanges();\n    }\n\n    clearValue($event) {\n        $event.stopPropagation();\n\n        if (this._control && this._control.ngControl) {\n            this._control.ngControl.reset();\n        }\n    }\n\n    onContainerClick($event) {\n        if (this._control.onContainerClick) {\n            this._control.onContainerClick($event);\n        }\n    }\n\n    onKeyDown(e: KeyboardEvent): void {\n        // tslint:disable-next-line:deprecation\n        if (e.keyCode === ESCAPE &&\n            this._control.focused &&\n            this.hasCleaner) {\n\n            if (this._control && this._control.ngControl) {\n                this._control.ngControl.reset();\n            }\n\n            e.preventDefault();\n        }\n    }\n\n    onHoverChanged(isHovered: boolean) {\n        if (isHovered !== this.hovered) {\n            this.hovered  = isHovered;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    onStepUp() {\n        if (this._numberControl) {\n            this._numberControl.stepUp(this._numberControl.step);\n        }\n    }\n\n    onStepDown() {\n        if (this._numberControl) {\n            this._numberControl.stepDown(this._numberControl.step);\n        }\n    }\n\n    /** Determines whether a class from the NgControl should be forwarded to the host element. */\n    _shouldForward(prop: string): boolean {\n        const ngControl = this._control ? this._control.ngControl : null;\n\n        return ngControl && ngControl[prop];\n    }\n\n    /** Throws an error if the form field's control is missing. */\n    protected _validateControlChild() {\n        if (!this._control) {\n            throw getMcFormFieldMissingControlError();\n        }\n    }\n\n    get hasHint(): boolean {\n        return this._hint && this._hint.length > 0;\n    }\n\n    get hasSuffix(): boolean {\n        return this._suffix && this._suffix.length > 0;\n    }\n\n    get hasPrefix(): boolean {\n        return this._prefix && this._prefix.length > 0;\n    }\n\n    get hasCleaner(): boolean {\n        return this._cleaner && this._cleaner.length > 0;\n    }\n\n    get hasStepper(): boolean {\n        return !!this._stepper;\n    }\n\n    get canShowCleaner(): boolean {\n        return this.hasCleaner &&\n            this._control &&\n            this._control.ngControl\n                ? this._control.ngControl.value && !this._control.disabled\n                : false;\n    }\n\n\n    get disabled(): boolean {\n        return this._control && this._control.disabled;\n    }\n\n    get canShowStepper(): boolean {\n        return this._numberControl &&\n            !this.disabled &&\n            (\n                this._numberControl.focused ||\n                this.hovered\n            );\n    }\n}\n\n@Directive({\n    selector: 'mc-form-field[mcFormFieldWithoutBorders]',\n    exportAs: 'mcFormFieldWithoutBorders',\n    host: { class: 'mc-form-field_without-borders' }\n})\nexport class McFormFieldWithoutBorders {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McCleaner } from './cleaner';\nimport { McFormField, McFormFieldWithoutBorders } from './form-field';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McStepper } from './stepper';\nimport { McSuffix } from './suffix';\n\n\n@NgModule({\n    declarations: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner,\n        McStepper\n    ],\n    imports: [CommonModule, McIconModule],\n    exports: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner,\n        McStepper\n    ]\n})\nexport class McFormFieldModule {\n}\n","import { InjectionToken } from '@angular/core';\n\n\nexport const MC_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{ value: any }>('MC_INPUT_VALUE_ACCESSOR');\n","function sanitizeNumber(value: number): number | null {\n    return !isFinite(value) || isNaN(value)\n        ? null\n        : value;\n}\n\nfunction getPrecision(value: number): number {\n    const arr = value.toString().split('.');\n\n    return arr.length === 1\n        ? 1\n        // tslint:disable-next-line:no-magic-numbers\n        :  Math.pow(10, arr[1].length);\n}\n\nfunction add(value1: number, value2: number) {\n    const precision = Math.max(getPrecision(value1), getPrecision(value2));\n\n    const res = (value1 * precision + value2 * precision) / precision;\n\n    return sanitizeNumber(res);\n}\n\nexport const stepUp = (value: number | null,\n                       max: number,\n                       min: number,\n                       step: number\n): number | null => {\n    let res;\n\n    if (value === null) {\n        res = add(min, step);\n\n        return res === null ? null : Math.min(res, max);\n    }\n\n    res = add(value, step);\n\n    return res === null ? null : Math.max(Math.min(res, max), min);\n};\n\nexport const stepDown = (value: number | null,\n                         max: number,\n                         min: number,\n                         step: number\n): number | null => {\n    let res;\n\n    if (value === null) {\n        res = add(max, -step);\n\n        return res === null ? null : Math.max(res, min);\n    }\n\n    res = add(value, -step);\n\n    return res === null ? null : Math.min(Math.max(res, min), max);\n};\n","import {\n    Attribute,\n    Directive, DoCheck, ElementRef, Inject, Input, OnChanges,\n    OnDestroy, Optional, Self\n} from '@angular/core';\nimport {\n    FormGroupDirective,\n    NgControl,\n    NgForm, NgModel\n} from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport {\n    END, C, V, X, A, DELETE, BACKSPACE, TAB, ENTER,\n    ESCAPE, ZERO, NINE, NUMPAD_ZERO, NUMPAD_NINE, NUMPAD_MINUS, DASH,\n    FF_MINUS, LEFT_ARROW, RIGHT_ARROW, HOME, UP_ARROW, DOWN_ARROW, F1, F12\n} from '@ptsecurity/cdk/keycodes';\nimport { getSupportedInputTypes, Platform } from '@ptsecurity/cdk/platform';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl, McFormFieldNumberControl } from '@ptsecurity/mosaic/form-field';\nimport { Subject } from 'rxjs';\n\nimport { getMcInputUnsupportedTypeError } from './input-errors';\nimport { MC_INPUT_VALUE_ACCESSOR } from './input-value-accessor';\nimport { stepDown, stepUp } from './stepperUtils';\n\n\nconst MC_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\n\nexport const BIG_STEP = 10;\nexport const SMALL_STEP = 1;\n\nlet nextUniqueId = 0;\n\nexport class McInputBase {\n    constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n                public _parentForm: NgForm,\n                public _parentFormGroup: FormGroupDirective,\n                public ngControl: NgControl) {\n    }\n}\n\nexport const _McInputMixinBase: CanUpdateErrorStateCtor & typeof McInputBase =\n    mixinErrorState(McInputBase);\n\n\n@Directive({\n    selector: `input[mcInput][type=\"number\"]`,\n    exportAs: 'mcNumericalInput',\n    providers: [NgModel, { provide: McFormFieldNumberControl, useExisting: McNumberInput }],\n    host: {\n        '(blur)': '_focusChanged(false)',\n        '(focus)': '_focusChanged(true)',\n        '(paste)': 'onPaste($event)',\n        '(keydown)': 'onKeyDown($event)'\n    }\n})\nexport class McNumberInput implements McFormFieldNumberControl<any> {\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    value: any;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    private readonly _host: HTMLInputElement;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    private readonly _step: number;\n    get step() {\n        return this._step;\n    }\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    private readonly _bigStep: number;\n    get bigStep() {\n        return this._bigStep;\n    }\n\n    private readonly _min: number;\n    private readonly _max: number;\n\n    constructor(\n        private _platform: Platform ,\n        private _elementRef: ElementRef,\n        private _model: NgModel,\n        @Attribute('step') step: string,\n        @Attribute('big-step') bigStep: string,\n        @Attribute('min') min: string,\n        @Attribute('max') max: string\n    ) {\n        this._step = this.isDigit(step) ? parseFloat(step) : SMALL_STEP;\n        this._bigStep = this.isDigit(bigStep) ? parseFloat(bigStep) : BIG_STEP;\n        this._min = this.isDigit(min) ? parseFloat(min) : -Infinity;\n        this._max = this.isDigit(max) ? parseFloat(max) : Infinity;\n\n        this._host = this._elementRef.nativeElement;\n\n        const self = this;\n\n        if ('valueAsNumber' in this._host) {\n            Object.defineProperty(Object.getPrototypeOf(this._host), 'valueAsNumber', {\n                // tslint:disable-next-line:no-reserved-keywords\n                get() {\n                    const res = parseFloat(self.normalizeSplitter(this.value));\n\n                    return isNaN(res) ? null : res;\n                }\n            });\n        }\n    }\n\n    _focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent) {\n        // tslint:disable-next-line:deprecation\n        const keyCode = event.keyCode;\n\n        const isCtrlA = (e) => e.keyCode === A && (e.ctrlKey || e.metaKey);\n        const isCtrlC = (e) => e.keyCode === C && (e.ctrlKey || e.metaKey);\n        const isCtrlV = (e) => e.keyCode === V && (e.ctrlKey || e.metaKey);\n        const isCtrlX = (e) => e.keyCode === X && (e.ctrlKey || e.metaKey);\n\n        const isFKey = (e) => e.keyCode >= F1 && e.keyCode <= F12;\n\n        const isNumber = (e) => (e.keyCode >= ZERO && e.keyCode <= NINE) ||\n            (e.keyCode >= NUMPAD_ZERO && e.keyCode <= NUMPAD_NINE);\n\n        const minuses = [NUMPAD_MINUS, DASH, FF_MINUS];\n        const serviceKeys = [DELETE, BACKSPACE, TAB, ESCAPE, ENTER];\n        const arrows = [LEFT_ARROW, RIGHT_ARROW];\n        const allowedKeys =  [HOME, END].concat(arrows).concat(serviceKeys).concat(minuses);\n\n        const isIEPeriod = (e) => e.key === '.' || e.key === 'Decimal';\n        const isNotIEPeriod = (e) => e.key === '.' || e.key === ',';\n\n        // Decimal is for IE\n        const isPeriod = (e) => this._platform.EDGE || this._platform.TRIDENT\n            ? isIEPeriod(e)\n            : isNotIEPeriod(e);\n\n        if (allowedKeys.indexOf(keyCode) !== -1 ||\n            isCtrlA(event) ||\n            isCtrlC(event) ||\n            isCtrlV(event) ||\n            isCtrlX(event) ||\n            isFKey(event) ||\n            isPeriod(event)\n        ) {\n            // let it happen, don't do anything\n            return;\n        }\n        // Ensure that it is not a number and stop the keypress\n        if (event.shiftKey || !isNumber(event)) {\n            event.preventDefault();\n\n            // process steps\n            const step = event.shiftKey ? this._bigStep : this._step;\n\n            if (keyCode === UP_ARROW) {\n                this.stepUp(step);\n            }\n\n            if (keyCode === DOWN_ARROW) {\n                this.stepDown(step);\n            }\n        }\n    }\n\n    onPaste(event) {\n        let value = event.clipboardData.getData('text');\n        value = this.normalizeSplitter(value);\n\n        if (!this.isDigit(value)) {\n            event.preventDefault();\n        }\n    }\n\n    stepUp(step: number) {\n        this._elementRef.nativeElement.focus();\n        const res = stepUp(this._host.valueAsNumber, this._max, this._min, step);\n        this._host.value = res === null ? '' : res.toString();\n        this._model.update.emit(this._host.valueAsNumber);\n    }\n\n    stepDown(step: number) {\n        this._elementRef.nativeElement.focus();\n        const res = stepDown(this._host.valueAsNumber, this._max, this._min, step);\n        this._host.value = res === null ? '' : res.toString();\n        this._model.update.emit(this._host.valueAsNumber);\n    }\n\n    private normalizeSplitter(value: string): string {\n        return value ? value.replace(/,/g, '.') : value;\n    }\n\n    private isDigit(value: string): boolean {\n        return this.isFloat(value) || this.isInt(value);\n    }\n\n    private isFloat(value: string): boolean {\n        return /^-?\\d+\\.\\d+$/.test(value);\n    }\n\n    private isInt(value: string): boolean {\n        return /^-?\\d+$/.test(value);\n    }\n}\n\n@Directive({\n    selector: `input[mcInput]`,\n    exportAs: 'mcInput',\n    host: {\n        class: 'mc-input',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '(blur)': '_focusChanged(false)',\n        '(focus)': '_focusChanged(true)',\n        '(input)': '_onInput()'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McInput }]\n})\nexport class McInput extends _McInputMixinBase implements McFormFieldControl<any>, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-input';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this._uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    // tslint:disable no-reserved-keywords\n    /** Input type of the element. */\n    @Input()\n    get type(): string {\n        return this._type;\n    }\n\n    set type(value: string) {\n        this._type = value || 'text';\n        this._validateType();\n\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    // tslint:enable no-reserved-keywords\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this._inputValueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n\n    protected _uid = `mc-input-${nextUniqueId++}`;\n    protected _previousNativeValue: any;\n    protected _disabled = false;\n    protected _id: string;\n    protected _required = false;\n    protected _type = 'text';\n    protected _neverEmptyInputTypes = [\n        'date',\n        'datetime',\n        'datetime-local',\n        'month',\n        'time',\n        'week'\n    ].filter((t) => getSupportedInputTypes().has(t));\n\n    private _inputValueAccessor: { value: any };\n\n    constructor(protected _elementRef: ElementRef,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() _parentForm: NgForm,\n                @Optional() _parentFormGroup: FormGroupDirective,\n                _defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_INPUT_VALUE_ACCESSOR) inputValueAccessor: any) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n        this._previousNativeValue = this.value;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n    }\n\n    /** Focuses the input. */\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Does some manual dirty checking on the native input `value` property. */\n    protected _dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Make sure the input is a supported type. */\n    protected _validateType() {\n        if (MC_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n            throw getMcInputUnsupportedTypeError(this._type);\n        }\n    }\n\n    /** Checks whether the input type is one of the types that are never empty. */\n    protected _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n\n    /** Checks whether the input is invalid based on the native validation. */\n    protected _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        const validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n\n        return validity && validity.badInput;\n    }\n}\n\n@Directive({\n    selector: 'input[mcInputMonospace]',\n    exportAs: 'McInputMonospace',\n    host: { class: 'mc-input_monospace' }\n})\nexport class McInputMono {\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","\nexport function isBoolean(val: any): val is boolean { return typeof val === 'boolean'; }\n\nexport function toBoolean(value: any): boolean {\n    return value != null && `${value}` !== 'false';\n}\n","import { NgModule, InjectionToken, Optional, Inject, isDevMode } from '@angular/core';\nimport { BidiModule } from '@ptsecurity/cdk/bidi';\n\n\n// Injection token that configures whether the Mosaic sanity checks are enabled.\nexport const MC_SANITY_CHECKS = new InjectionToken<boolean>('mc-sanity-checks', {\n    providedIn: 'root',\n    factory: MC_SANITY_CHECKS_FACTORY\n});\n\nexport function MC_SANITY_CHECKS_FACTORY(): boolean {\n    return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Mosaic\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n    imports: [ BidiModule ],\n    exports: [ BidiModule ]\n})\nexport class McCommonModule {\n    // Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n    private _hasDoneGlobalChecks = false;\n\n    // Reference to the global `document` object.\n    private _document = typeof document === 'object' && document ? document : null;\n\n    // Reference to the global 'window' object.\n    private _window = typeof window === 'object' && window ? window : null;\n\n    constructor(@Optional() @Inject(MC_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n        if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n            this._checkDoctypeIsDefined();\n            this._checkThemeIsPresent();\n            this._hasDoneGlobalChecks = true;\n        }\n    }\n\n    // Whether any sanity checks are enabled\n    private _areChecksEnabled(): boolean {\n        return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n    }\n\n    // Whether the code is running in tests.\n    private _isTestEnv() {\n        // tslint:disable-next-line\n        return this._window && (this._window['__karma__'] || this._window['jasmine']);\n    }\n\n    private _checkDoctypeIsDefined(): void {\n        if (this._document && !this._document.doctype) {\n            console.warn(\n                'Current document does not have a doctype. This may cause ' +\n                'some Mosaic components not to behave as expected.'\n            );\n        }\n    }\n\n    private _checkThemeIsPresent(): void {\n        if (this._document && typeof getComputedStyle === 'function') {\n            const testElement = this._document.createElement('div');\n\n            testElement.classList.add('mc-theme-loaded-marker');\n            this._document.body.appendChild(testElement);\n\n            const computedStyle = getComputedStyle(testElement);\n\n            // In some situations, the computed style of the test element can be null. For example in\n            // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n            // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n            if (computedStyle && computedStyle.display !== 'none') {\n                console.warn(\n                    'Could not find Mosaic core theme. Most Mosaic ' +\n                    'components may not work as expected. For more info refer ' +\n                    'to the theming guide: link there'\n                );\n            }\n\n            this._document.body.removeChild(testElement);\n        }\n    }\n}\n","import { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanDisable {\n    disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n// Mixin to augment a directive with a `disabled` property.\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n    return class extends base {\n        private _disabled: boolean = false;\n\n        get disabled() {\n            return this._disabled;\n        }\n\n        set disabled(value: any) {\n            this._disabled = coerceBooleanProperty(value);\n        }\n\n        constructor(...args: any[]) {\n            // tslint:disable-next-line\n            super(...args);\n        }\n    };\n}\n","import { ElementRef } from '@angular/core';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanColor {\n    color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\nexport interface HasElementRef {\n    _elementRef: ElementRef;\n}\n\nexport enum ThemePalette {\n    Primary = 'primary',\n    Second = 'second',\n    Warn = 'warn',\n    Default = 'second'\n}\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T,\n    defaultColor: ThemePalette = ThemePalette.Default\n): CanColorCtor & T {\n    return class extends base {\n\n        private _color: ThemePalette;\n\n        get color(): ThemePalette {\n            return this._color;\n        }\n\n        set color(value: ThemePalette) {\n            const colorPalette = value || defaultColor;\n\n            if (colorPalette !== this._color) {\n                if (this._color) {\n                    this._elementRef.nativeElement.classList.remove(`mc-${this._color}`);\n                }\n\n                if (colorPalette) {\n                    this._elementRef.nativeElement.classList.add(`mc-${colorPalette}`);\n                }\n\n                this._color = colorPalette;\n            }\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n\n            this.color = defaultColor;\n        }\n    };\n}\n\n","import { Constructor } from './constructor';\nimport { CanDisable } from './disabled';\n\n\nexport interface HasTabIndex {\n    tabIndex: number;\n}\n\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n// Mixin to augment a directive with a `tabIndex` property.\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n    return class extends base {\n        private _tabIndex: number = defaultTabIndex;\n\n        get tabIndex(): number {\n            return this.disabled ? -1 : this._tabIndex;\n        }\n\n        set tabIndex(value: number) {\n            this._tabIndex = value != null ? value : defaultTabIndex;\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n    };\n}\n","import { FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { Subject } from 'rxjs';\n\nimport { ErrorStateMatcher } from '../error/error-options';\n\nimport { Constructor } from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n\n    readonly stateChanges: Subject<void>;\n\n    errorState: boolean;\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState();\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n    _parentFormGroup: FormGroupDirective;\n    _parentForm: NgForm;\n    _defaultErrorStateMatcher: ErrorStateMatcher;\n    ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n    : CanUpdateErrorStateCtor & T {\n    return class extends base {\n        /** Whether the component is in an error state. */\n        errorState: boolean = false;\n\n        /**\n         * Stream that emits whenever the state of the input changes such that the wrapping\n         * `MatFormField` needs to run change detection.\n         */\n        readonly stateChanges = new Subject<void>();\n\n        errorStateMatcher: ErrorStateMatcher;\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n\n        updateErrorState() {\n            const oldState = this.errorState;\n            const parent = this._parentFormGroup || this._parentForm;\n            const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n            const control = this.ngControl ? this.ngControl.control as FormControl : null;\n            const newState = matcher.isErrorState(control, parent);\n\n            if (newState !== oldState) {\n                this.errorState = newState;\n                this.stateChanges.next();\n            }\n        }\n    };\n}\n","import {\n    AfterViewChecked,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { ENTER, SPACE } from '@ptsecurity/cdk/keycodes';\nimport { Subject } from 'rxjs';\n\nimport { McOptgroup } from './optgroup';\n\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by McOption when selected or deselected. */\nexport class McOptionSelectionChange {\n    constructor(\n        /** Reference to the option that emitted the event. */\n        public source: McOption,\n        /** Whether the change in the option's value was a result of a user action. */\n        public isUserInput = false) {\n    }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface IMcOptionParentComponent {\n    disableRipple?: boolean;\n    multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MC_OPTION_PARENT_COMPONENT =\n    new InjectionToken<IMcOptionParentComponent>('MC_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n    selector: 'mc-option',\n    exportAs: 'mcOption',\n    host: {\n        '[attr.tabindex]': '_getTabIndex()',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-option-multiple]': 'multiple',\n        '[class.mc-active]': 'active',\n        '[id]': 'id',\n        '[class.mc-disabled]': 'disabled',\n        '(click)': '_selectViaInteraction()',\n        '(keydown)': '_handleKeydown($event)',\n        class: 'mc-option'\n    },\n    styleUrls: ['option.css'],\n    templateUrl: 'option.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McOption implements AfterViewChecked, OnDestroy {\n    /** Whether the wrapping component is in multiple selection mode. */\n    get multiple() {\n        return this._parent && this._parent.multiple;\n    }\n\n    /** The unique ID of the option. */\n    get id(): string {\n        return this._id;\n    }\n\n    /** Whether or not the option is currently selected. */\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    /** The form value of the option. */\n    @Input() value: any;\n\n    /** Whether the option is disabled. */\n    @Input()\n    get disabled() {\n        return (this.group && this.group.disabled) || this._disabled;\n    }\n\n    set disabled(value: any) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    /** Whether ripples for the option are disabled. */\n    get disableRipple() {\n        return this._parent && this._parent.disableRipple;\n    }\n\n    /** Event emitted when the option is selected or deselected. */\n        // tslint:disable-next-line:no-output-on-prefix\n    @Output() readonly onSelectionChange = new EventEmitter<McOptionSelectionChange>();\n\n    /** Emits when the state of the option changes and any parents have to be notified. */\n    readonly _stateChanges = new Subject<void>();\n\n    private _selected = false;\n    private _active = false;\n    private _disabled = false;\n    private readonly _id = `mc-option-${_uniqueIdCounter++}`;\n    private _mostRecentViewValue = '';\n\n    constructor(\n        private readonly _element: ElementRef,\n        private readonly _changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_OPTION_PARENT_COMPONENT) private readonly _parent: IMcOptionParentComponent,\n        @Optional() readonly group: McOptgroup) {\n    }\n\n    /**\n     * Whether or not the option is currently active and ready to be selected.\n     * An active option displays styles as if it is focused, but the\n     * focus is actually retained somewhere else. This comes in handy\n     * for components like autocomplete where focus must remain on the input.\n     */\n    get active(): boolean {\n        return this._active;\n    }\n\n    /**\n     * The displayed value of the option. It is necessary to show the selected option in the\n     * select's trigger.\n     */\n    get viewValue(): string {\n        // TODO(kara): Add input property alternative for node envs.\n        return (this._getHostElement().textContent || '').trim();\n    }\n\n    /** Selects the option. */\n    select(): void {\n        if (!this._selected) {\n            this._selected = true;\n            this._changeDetectorRef.markForCheck();\n            this._emitSelectionChangeEvent();\n        }\n    }\n\n    /** Deselects the option. */\n    deselect(): void {\n        if (this._selected) {\n            this._selected = false;\n            this._changeDetectorRef.markForCheck();\n            this._emitSelectionChangeEvent();\n        }\n    }\n\n    /** Sets focus onto this option. */\n    focus(): void {\n        const element = this._getHostElement();\n\n        if (typeof element.focus === 'function') {\n            element.focus();\n        }\n    }\n\n    /**\n     * This method sets display styles on the option to make it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setActiveStyles(): void {\n        if (!this._active) {\n            this._active = true;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    /**\n     * This method removes display styles on the option that made it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setInactiveStyles(): void {\n        if (this._active) {\n            this._active = false;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel(): string {\n        return this.viewValue;\n    }\n\n    /** Ensures the option is selected when activated from the keyboard. */\n    _handleKeydown(event: KeyboardEvent): void {\n        // tslint:disable-next-line\n        if (event.keyCode === ENTER || event.keyCode === SPACE) {\n            this._selectViaInteraction();\n\n            // Prevent the page from scrolling down and form submits.\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * `Selects the option while indicating the selection came from the user. Used to\n     * determine if the select's view -> model callback should be invoked.`\n     */\n    _selectViaInteraction(): void {\n        if (!this.disabled) {\n            this._selected = this.multiple ? !this._selected : true;\n            this._changeDetectorRef.markForCheck();\n            this._emitSelectionChangeEvent(true);\n        }\n    }\n\n    /** Returns the correct tabindex for the option depending on disabled state. */\n    _getTabIndex(): string {\n        return this.disabled ? '-1' : '0';\n    }\n\n    /** Gets the host DOM element. */\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n\n    ngAfterViewChecked() {\n        // Since parent components could be using the option's label to display the selected values\n        // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n        // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n        // relatively cheap, however we still limit them only to selected options in order to avoid\n        // hitting the DOM too often.\n        if (this._selected) {\n            const viewValue = this.viewValue;\n\n            if (viewValue !== this._mostRecentViewValue) {\n                this._mostRecentViewValue = viewValue;\n                this._stateChanges.next();\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n\n    /** Emits the selection change event. */\n    private _emitSelectionChangeEvent(isUserInput = false): void {\n        this.onSelectionChange.emit(new McOptionSelectionChange(this, isUserInput));\n    }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(\n    optionIndex: number, options: QueryList<McOption>,\n    optionGroups: QueryList<McOptgroup>\n): number {\n\n    if (optionGroups.length) {\n        const optionsArray = options.toArray();\n        const groups = optionGroups.toArray();\n\n        let groupCounter = 0;\n\n        for (let i = 0; i < optionIndex + 1; i++) {\n            if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n                groupCounter++;\n            }\n        }\n\n        return groupCounter;\n    }\n\n    return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(\n    optionIndex: number,\n    optionHeight: number,\n    currentScrollPosition: number,\n    panelHeight: number\n): number {\n    const optionOffset = optionIndex * optionHeight;\n\n    if (optionOffset < currentScrollPosition) { return optionOffset; }\n\n    if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n        return Math.max(0, optionOffset - panelHeight + optionHeight);\n    }\n\n    return currentScrollPosition;\n}\n\n","import { ConnectionPositionPair } from '@ptsecurity/cdk/overlay';\n\n\nexport const POSITION_MAP: { [key: string]: ConnectionPositionPair } = {\n    top         : {\n        originX : 'center',\n        originY : 'top',\n        overlayX: 'center',\n        overlayY: 'bottom'\n    },\n    topCenter   : {\n        originX : 'center',\n        originY : 'top',\n        overlayX: 'center',\n        overlayY: 'bottom',\n        offsetX : undefined,\n        offsetY : undefined\n    },\n    topLeft     : {\n        originX : 'start',\n        originY : 'top',\n        overlayX: 'start',\n        overlayY: 'bottom',\n        offsetX : undefined,\n        offsetY : undefined\n    },\n    topRight    : {\n        originX : 'end',\n        originY : 'top',\n        overlayX: 'end',\n        overlayY: 'bottom',\n        offsetX : undefined,\n        offsetY : undefined\n    },\n    right       : {\n        originX : 'end',\n        originY : 'center',\n        overlayX: 'start',\n        overlayY: 'center'\n    },\n    rightTop    : {\n        originX : 'end',\n        originY : 'top',\n        overlayX: 'start',\n        overlayY: 'top',\n        offsetX : undefined,\n        offsetY : undefined\n    },\n    rightBottom : {\n        originX : 'end',\n        originY : 'bottom',\n        overlayX: 'start',\n        overlayY: 'bottom',\n        offsetX : undefined,\n        offsetY : undefined\n    },\n    bottom      : {\n        originX : 'center',\n        originY : 'bottom',\n        overlayX: 'center',\n        overlayY: 'top'\n    },\n    bottomCenter: {\n        originX : 'center',\n        originY : 'bottom',\n        overlayX: 'center',\n        overlayY: 'top'\n    },\n    bottomLeft  : {\n        originX : 'start',\n        originY : 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    bottomRight : {\n        originX : 'end',\n        originY : 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n    },\n    left        : {\n        originX : 'start',\n        originY : 'center',\n        overlayX: 'end',\n        overlayY: 'center'\n    },\n    leftTop     : {\n        originX : 'start',\n        originY : 'top',\n        overlayX: 'end',\n        overlayY: 'top'\n    },\n    leftBottom  : {\n        originX : 'start',\n        originY : 'bottom',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    }\n};\n\nexport const DEFAULT_4_POSITIONS = _objectValues([\n    POSITION_MAP.top, POSITION_MAP.right, POSITION_MAP.bottom, POSITION_MAP.left\n]);\n\nfunction arrayMap<T, S>(array: T[], iteratee: (item: T, index: number, arr: T[]) => S): S[] {\n    let index = -1;\n    const length = array == null ? 0 : array.length;\n    const result = Array(length);\n\n    while (++index < length) {\n        result[ index ] = iteratee(array[ index ], index, array);\n    }\n\n    return result;\n}\nfunction baseValues<T>(object: { [key: string]: T } | T[], props: string[]): T[] {\n    return arrayMap(props,  (key) => {\n        return object[ key ];\n    });\n}\nfunction _objectValues<T>(object: { [key: string]: T } | T[]): T[] {\n    return object == null ? [] : baseValues(object, Object.keys(object));\n}\n","export function getMcFormFieldMissingControlError(): Error {\n  return Error('mc-form-field must contain a McFormFieldControl.');\n}\n","export function getMcInputUnsupportedTypeError(inputType: string): Error {\n    return Error(`Input type \"${inputType}\" isn't supported by mcInput.`);\n}\n","/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMcSelectDynamicMultipleError(): Error {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMcSelectNonArrayValueError(): Error {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMcSelectNonFunctionValueError(): Error {\n    return Error('`compareWith` must be a function.');\n}\n","import { NgModule, Directive, ElementRef, QueryList } from '@angular/core';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(McLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n    selector: '[mc-line], [mcLine]',\n    host: { class: 'mc-line' }\n})\nexport class McLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class McLineSetter {\n    constructor(private _lines: QueryList<McLine>, private _element: ElementRef) {\n        this._setLineClass(this._lines.length);\n\n        this._lines.changes.subscribe(() => {\n            this._setLineClass(this._lines.length);\n        });\n    }\n\n    private _setLineClass(count: number): void {\n        this._resetClasses();\n        if (count === 2 || count === 3) {\n            this._setClass(`mc-${count}-line`, true);\n        } else if (count > 3) {\n            this._setClass(`mc-multi-line`, true);\n        }\n    }\n\n    private _resetClasses(): void {\n        this._setClass('mc-2-line', false);\n        this._setClass('mc-3-line', false);\n        this._setClass('mc-multi-line', false);\n    }\n\n    private _setClass(className: string, isAdd: boolean): void {\n        if (isAdd) {\n            this._element.nativeElement.classList.add(className);\n        } else {\n            this._element.nativeElement.classList.remove(className);\n        }\n    }\n}\n\n@NgModule({\n    imports: [],\n    exports: [McLine],\n    declarations: [McLine]\n})\nexport class McLineModule {}\n","import { Injectable } from '@angular/core';\nimport { FormGroupDirective, NgForm, FormControl } from '@angular/forms';\n\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n    }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({ providedIn: 'root' })\nexport class ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n    }\n}\n","import { Component, ViewEncapsulation, Input, ChangeDetectionStrategy } from '@angular/core';\n\n\nexport type McPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mc-primary .mc-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mc-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'mc-pseudo-checkbox',\n    styleUrls: ['pseudo-checkbox.css'],\n    templateUrl: 'pseudo-checkbox.partial.html',\n    host: {\n        class: 'mc-pseudo-checkbox',\n        '[class.mc-pseudo-checkbox_indeterminate]': 'state === \"indeterminate\"',\n        '[class.mc-pseudo-checkbox_checked]': 'state === \"checked\"',\n        '[class.mc-disabled]': 'disabled'\n    }\n})\nexport class McPseudoCheckbox {\n    @Input() state: McPseudoCheckboxState = 'unchecked';\n\n    @Input() disabled: boolean = false;\n}\n","import { NgModule } from '@angular/core';\n\nimport { McPseudoCheckbox } from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n    exports: [McPseudoCheckbox],\n    declarations: [McPseudoCheckbox]\n})\nexport class McPseudoCheckboxModule {}\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class McMeasureScrollbarService {\n\n    get scrollBarWidth(): number {\n        if (this._scrollbarWidth) {\n            return this._scrollbarWidth;\n        }\n        this.initScrollBarWidth();\n\n        return this._scrollbarWidth;\n    }\n\n    private _scrollbarWidth: number;\n    private scrollbarMeasure = {\n        position: 'absolute',\n        top: '-9999px',\n        width: '50px',\n        height: '50px',\n        overflow: 'scroll'\n    };\n\n    constructor(\n        @Inject(DOCUMENT) private document: any\n    ) {\n        this.initScrollBarWidth();\n    }\n\n    initScrollBarWidth() {\n        const scrollDiv = this.document.createElement('div');\n\n        // tslint:disable-next-line\n        for (const scrollProp in this.scrollbarMeasure) {\n            if (this.scrollbarMeasure.hasOwnProperty(scrollProp)) {\n                scrollDiv.style[scrollProp] = this.scrollbarMeasure[scrollProp];\n            }\n        }\n\n        this.document.body.appendChild(scrollDiv);\n\n        const width = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n\n        this.document.body.removeChild(scrollDiv);\n        this._scrollbarWidth = width;\n    }\n}\n","import { Component, ViewEncapsulation, Input, ChangeDetectionStrategy } from '@angular/core';\n\nimport { mixinDisabled, CanDisable, CanDisableCtor } from '../common-behaviors/index';\n\n\n// Boilerplate for applying mixins to McOptgroup.\n/** @docs-private */\nexport class McOptgroupBase {}\n\nexport const _McOptgroupMixinBase: CanDisableCtor & typeof McOptgroupBase = mixinDisabled(McOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mc-option`.\n */\n@Component({\n    selector: 'mc-optgroup',\n    exportAs: 'mcOptgroup',\n    templateUrl: 'optgroup.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['disabled'],\n    styleUrls: ['optgroup.css'],\n    host: {\n        class: 'mc-optgroup',\n        role: 'group',\n        '[class.mc-optgroup-disabled]': 'disabled',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-labelledby]': '_labelId'\n    }\n})\nexport class McOptgroup extends _McOptgroupMixinBase implements CanDisable {\n    /** Label for the option group. */\n    @Input() label: string;\n\n    /** Unique id for the underlying label. */\n    _labelId: string = `mc-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McPseudoCheckboxModule } from '../selection/index';\n\nimport { McOptgroup } from './optgroup';\nimport { McOption } from './option';\n\n\n@NgModule({\n    imports: [CommonModule, McPseudoCheckboxModule],\n    exports: [McOption, McOptgroup],\n    declarations: [McOption, McOptgroup]\n})\nexport class McOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","import { InjectionToken } from '@angular/core';\n\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MC_LABEL_GLOBAL_OPTIONS =\n    new InjectionToken<LabelOptions>('mc-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n    /**\n     * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n     * Default behavior is assumed to be `auto`.\n     */\n    float?: FloatLabelType;\n}\n","import {\n    animate,\n    state,\n    style,\n    transition,\n    trigger,\n    AnimationTriggerMetadata,\n} from '@angular/animations';\n\n\nexport const fadeAnimation: AnimationTriggerMetadata =  trigger('fadeAnimation', [\n    state('void', style({ opacity: 0 })),\n    state('true', style({ opacity: 1 })),\n    state('false', style({ opacity: 0 })),\n    transition('* => true', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => void', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n]);\n","import {\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { mixinColor, CanColor, CanColorCtor } from '@ptsecurity/mosaic/core';\n\n\n@Directive({\n    selector: '[mc-icon]',\n    host: { class: 'mc mc-icon' }\n})\nexport class McIconCSSStyler {}\n\n\nexport class McIconBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McIconMixinBase: CanColorCtor & typeof McIconBase\n    = mixinColor(McIconBase);\n\n\n@Component({\n    selector: `[mc-icon]`,\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./icon.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McIcon extends _McIconMixinBase implements CanColor {\n    constructor(elementRef: ElementRef, @Attribute('mc-icon') iconName: string) {\n        super(elementRef);\n\n        elementRef.nativeElement.classList.add(iconName);\n    }\n\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McIcon,\n    McIconCSSStyler\n} from './icon.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McIcon,\n        McIconCSSStyler\n    ],\n    declarations: [\n        McIcon,\n        McIconCSSStyler\n    ]\n})\nexport class McIconModule {}\n"],"names":["providers","MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","entryComponents","McToolTipComponent","McToolTipModule","VERSION","Version","SELECT_PANEL_PADDING_X","this","empty","_multiple","selectedOptions","_selectionModel","selected","_isRtl","reverse","Object","defineProperty","McSelect","prototype","get","isEmpty","_dir","value","_handleKeydown","event","disabled","panelOpen","_handleOpenKeydown","_handleClosedKeydown","_onFadeInDone","_panelDoneAnimating","_changeDetectorRef","markForCheck","_onFocus","_focused","stateChanges","next","_onBlur","_onTouched","_onAttached","_this","overlayDir","positionChange","pipe","take","subscribe","detectChanges","_calculateOverlayOffsetX","panel","nativeElement","scrollTop","_scrollTop","_getPanelTheme","_parentFormField","color","focus","_elementRef","_calculateOverlayScroll","selectedIndex","scrollBuffer","maxScroll","itemHeight","_getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","Math","min","max","onContainerClick","open","onRemoveMatcherItem","option","$event","stopPropagation","deselect","_panelOpen","_calculateHiddenItems","visibleItems","totalItemsWidth","_getTotalItemsWidthInMatcher","totalVisibleItemsWidth","tags","forEach","tag","offsetTop","offsetHeight","getBoundingClientRect","width","hiddenItems","length","itemsCounter","trigger","querySelector","matcherList","itemsCounterShowed","matcherListWidth","matcherWidth","triggerClone","cloneNode","remove","_renderer","setStyle","appendChild","querySelectorAll","item","keyCode","isArrowKey","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","ENTER","SPACE","multiple","altKey","preventDefault","_keyManager","onKeydown","manager","HOME","END","setFirstItemActive","setLastItemActive","close","activeItem","A","ctrlKey","hasDeselectedOptions_1","options","some","select","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","_initializeSelection","Promise","resolve","then","_setSelectionByValue","ngControl","_value","Array","isArray","getMcSelectNonArrayValueError","clear","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","find","_compareWith","error","isDevMode","console","warn","_initKeyManager","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","withHorizontalOrientation","tabOut","takeUntil","_destroy","change","_scrollActiveOptionIntoView","_resetOptions","changedOrDestroyed","merge","changes","optionSelectionChanges","_onSelect","source","isUserInput","apply","map","_stateChanges","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","toArray","sort","a","b","sortComparator","indexOf","fallbackValue","valueToEmit","valueChange","emit","_onChange","selectionChange","McSelectChange","_optionIds","id","join","_highlightCorrectOption","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getOptionIndex","reduce","result","current","index","undefined","_calculateOverlayPosition","items","_getItemCount","panelHeight","scrollContainerHeight","selectedOptionOffset","_offsetY","_calculateOverlayOffsetY","_checkOverlayWithinViewport","offsetX","overlayRect","overlayRef","overlayElement","viewportSize","_viewportRuler","getViewportSize","isRtl","first","group","leftOverflow","left","rightOverflow","right","round","updatePosition","topSpaceAvailable","_triggerRect","top","bottomSpaceAvailable","height","bottom","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_transformOrigin","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","optionHeightAdjustment","tslib_1.__decorate","ViewChild","tslib_1.__metadata","ElementRef","ViewChildren","McTag","QueryList","CdkConnectedOverlay","ContentChildren","McOption","descendants","McOptgroup","Input","ContentChild","McSelectTrigger","ErrorStateMatcher","Output","EventEmitter","Observable","McSelect_1","Component","selector","exportAs","template","styles","inputs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","host","[attr.id]","[attr.tabindex]","class","[class.mc-disabled]","[class.mc-select-invalid]","[class.mc-select-required]","(keydown)","(focus)","(blur)","(window:resize)","animations","mcSelectAnimations","transformPanel","fadeInContent","provide","McFormFieldControl","useExisting","MC_OPTION_PARENT_COMPONENT","tslib_1.__param","Optional","Self","Attribute","Inject","MC_SELECT_SCROLL_STRATEGY","ViewportRuler","ChangeDetectorRef","NgZone","Renderer2","Directionality","NgForm","FormGroupDirective","McFormField","NgControl","String","_McSelectMixinBase","McSelectModule","NgModule","imports","CommonModule","OverlayModule","McOptionModule","McIconModule","McTagModule","exports","McFormFieldModule","declarations","MC_SELECT_SCROLL_STRATEGY_PROVIDER","cdr","_prefix","_positions","DEFAULT_4_POSITIONS","slice","_classMap","_placement","_trigger","visibleSource","BehaviorSubject","$visible","asObservable","mcVisibleChange","mcMouseEnterDelay","mcMouseLeaveDelay","_onHide","Subject","_closeOnInteraction","availablePositions","POSITION_MAP","_title","set","isTitleString","TemplateRef","visible","coerceBooleanProperty","unshift","mcPlacement","show","hideTId","clearTimeout","isContentEmpty","showTId","setTimeout","mcVisible","_markForCheck","hide","setClassMap","_a","mcTitle","afterHidden","_handleBodyInteraction","fadeAnimation","preserveWhitespaces","(body:click)","MC_TOOLTIP_SCROLL_STRATEGY","InjectionToken","deps","Overlay","useFactory","MC_TOOLTIP_SCROLL_STRATEGY_FACTORY","McTooltipDirective","_overlay","elementRef","_ngZone","_scrollDispatcher","hostView","_scrollStrategy","isTooltipOpen","isDynamicTooltip","parentDisabled","_disabled","$unsubscribe","manualListeners","Map","_destroyed","title","updateCompValue","_mouseEnterDelay","_mouseLeaveDelay","_visible","_createOverlay","_overlayRef","strategy","position","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withPositions","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","tooltip","onPositionChange","scrollableViewProperties","isOverlayClipped","run","create","direction","positionStrategy","panelClass","scrollStrategy","_updatePosition","detachments","_detach","hasAttached","detach","updatedPlacement","keys","key","connectionPair","originX","originY","overlayX","overlayY","handlePositioningUpdate","pos","clientHeight","element","currentContainer","style","parseInt","split","ngOnInit","mcTrigger","listener","addEventListener","ngOnDestroy","dispose","removeEventListener","complete","handleKeydown","e","ESCAPE","handleTouchend","getConfig","origin","_getOrigin","overlay","_getOverlayPosition","tslib_1.__assign","main","fallback","originPosition","isLtr","getMcTooltipInvalidPositionError","_invertPosition","x","y","overlayPosition","newX","newY","_portal","ComponentPortal","attach","instance","property","distinctUntilChanged","data","HostBinding","Directive","(touchend)","ScrollDispatcher","ViewContainerRef","BrowserAnimationsModule","McProgressSpinner","percentage","_McProgressSpinnerMixinBase","McProgressSpinnerModule","PlatformModule","nextUniqueId","McRadioChange","McRadioGroupBase","_McRadioGroupMixinBase","mixinDisabled","MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","McRadioGroup","multi","_super","_changeDetector","call","_name","_selected","_isInitialized","_labelPosition","_required","controlValueAccessorChangeFn","onTouched","tslib_1.__extends","updateRadioButtonNames","v","markRadiosForCheck","newValue","updateSelectedRadioFromValue","checkSelectedRadioButton","toBoolean","checked","ngAfterContentInit","touch","emitChangeEvent","_radios","radio","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","name","isAlreadySelected","McRadioButton","role","McRadioButtonBase","_McRadioButtonMixinBase","mixinColor","mixinTabIndex","radioGroup","_radioDispatcher","_uniqueId","isFocused","_checked","removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","required","labelPosition","onInputClick","onInputChange","groupValueChanged","[class.mc-radio-checked]","[class.mc-radio-disabled]","UniqueSelectionDispatcher","McRadioModule","A11yModule","McCommonModule","McTreeNodeDef","McTreeNodeDef_1","CdkTreeNodeDef","McTreeNodePadding","arguments","_baseLeftPadding","_iconWidth","_indent","McTreeNodePadding_1","_withIcon","_paddingIndent","nodeLevel","_treeNode","_tree","treeControl","getLevel","level","_level","leftPadding","isExpandable","_setPadding","CdkTreeNodePadding","McTreeNodeOption","treeSelection","_hasFocus","McTreeNodeOption_1","setSelected","setFocusedOption","toggle","_getHeight","getClientRects","_handleFocus","_handleBlur","_handleClick","tabindex","[class.mc-selected]","[class.mc-focused]","[attr.aria-expanded]","[attr.aria-level]","(click)","CdkTreeNode","McTreeSelection","_McTreeSelectionBase","CdkTree","McTreeNavigationChange","McTreeSelectionChange","_differs","tabIndex","autoSelect","noUnselect","navigationChange","SelectionModel","McTreeSelection_1","rawValue","log","_onKeyDown","withShift","withCtrl","collapse","expand","toggleFocusedOption","PAGE_UP","setPreviousPageItemActive","PAGE_DOWN","setNextPageItemActive","FocusKeyManager","updateScrollSize","withScrollSize","floor","updateActiveItem","previousIndex_1","previousActiveItemIndex","activeIndex_1","_canDeselectLast","_emitNavigationEvent","focusedIndex","_isValidIndex","focusedOption","_emitChangeEvent","renderNodeChanges","dataDiffer","viewContainer","parentData","_dataDiffer","_nodeOutlet","arrayOfInstances","_embeddedViews","view","viewDef","def","nodes","node","nodeMatchedQueries","matchedQueryIds","nodeData","nodeIndex","push","reset","notifyOnChanges","CdkTreeNodeOutlet","[tabIndex]","IterableDiffers","MC_TREE_DIRECTIVES","McTreeModule","CdkTreeModule","McTreeFlattener","transformFunction","getChildren","_flattenNode","resultNodes","parentMap","flatNode","children","child","childParentMap","flattenNodes","structuredData","expandFlattenedNodes","results","currentExpand","i","isExpanded","McTreeFlatDataSource","treeFlattener","initialData","_flattenedData","_expandedData","_data","dataNodes","connect","collectionViewer","viewChange","expansionModel","onChange","disconnect","DataSource","McTreeNestedDataSource","McTagBase","_McTagMixinBase","_addClassModificatorForIcons","icons","contentChildren","iconElement","previousElementSibling","nextElementSibling","nextSibling","classList","add","previousSibling","firstIconElement","secondIconElement","McIcon","state","transform","minWidth","opacity","transition","query","animateChild","animate","MC_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","McSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","mixinErrorState","_scrollStrategyFactory","_triggerFontSize","_panelDoneAnimatingStream","controlType","defer","onSelectionChange","onStable","switchMap","openedChange","_openedStream","filter","o","_closedStream","_uid","o1","o2","valueAccessor","_placeholder","getMcSelectDynamicMultipleError","getMcSelectNonFunctionValueError","_id","added","removed","startWith","ngAfterViewInit","ngDoCheck","updateErrorState","ngOnChanges","getComputedStyle","fontSize","viewValue","mcCancelText","McModalComponent","animationState","isComponent","mcContent","createDynamicComponent","isModalButtons","mcFooter","formatModalButtons","container","mcGetContainer","HTMLElement","OverlayRef","modalControl","registerModal","handleVisibleStateChange","firstChange","contentComponentRef","bodyContainer","insert","autoFocusButtonOk","changeVisibleFromInside","destroy","triggerOk","onClickOkCancel","triggerCancel","getInstance","getContentComponentRef","getContentComponent","getElement","onClickMask","mcMask","mcMaskClosable","target","contains","isModalType","type","mcModalType","onKeyDown","onClickCloseBtn","ok","mcOnOk","cancel","mcOnCancel","loadingKey","caseClose_1","doClose","isPromise","handleThen","catch","isNonEmptyString","isTemplateRef","Type","animation","closeResult","changeBodyOverflow","animateTo","mcAfterOpen","mcAfterClose","getButtonCallableProp","prop","args","onButtonClick","button","loading","changeAnimationState","maskAnimationClassMap","modalAnimationClassMap","_b","changeDetectorRef","changeDetector","isVisible","window","updateTransformOrigin","buttons","size","autoLoading","component","factory","cfr","resolveComponentFactory","childInjector","Injector","McModalRef","useValue","parent","parentInjector","mcComponentParams","assign","modalElement","modalContainer","lastPosition","ModalUtil","getLastClickPosition","transformOrigin","offsetLeft","plusNum","openModals","renderer","document","body","mcMeasureScrollbarService","scrollBarWidth","removeStyle","read","DOCUMENT","ComponentFactoryResolver","McMeasureScrollbarService","McModalControlService","CssUnitPipe","defaultUnit","formatted","isNaN","Pipe","ModalBuilderForService","createModal","changeProps","modalRef","destroyModal","keydownEvents","mcCloseByESC","McModalService","afterAllClose","closeAll","mcWidth","confirm","confirmType","mcClassName","success","simpleConfirm","delete","Injectable","McModalModule","McButtonModule","MC_NAVBAR_CONTAINER","MC_NAVBAR_ITEM","MC_NAVBAR_BRAND","MC_NAVBAR_TITLE","McNavbarLogo","McNavbarBrand","McNavbarTitle","McNavbarItemBase","_McNavbarMixinBase","McNavbarItem","_focusMonitor","_platform","_cdRef","dropdownItems","isCollapsed","_subscription","Subscription","setAttribute","encodeURI","dropdownContent","denyClickIfDisabled","_focusMonitor$","monitor","hasDropdownContent","listenClickOutside","startListenFocusDropdownItems","unsubscribe","stopMonitoring","stopListenFocusDropdownItems","isActiveDropdownLink","link","isBrowser","location","href","handleClickByItem","toggleDropdown","isNavbarItem","handleClickByDropdownItem","forceCloseDropdown","_dropdownElements","el","events","eventListeners","hasAttribute","stopImmediatePropagation","[attr.disabled]","FocusMonitor","Platform","McNavbarContainer","CollapsibleItem","_collapsed","processCollapsed","collapsed","updateCollapsedClass","CachedItemWidth","itemsForCollapse","_collapsedItemsWidth","calculateAndCacheCollapsedItemsWidth","updateTitle","acc","getTitle","computedTitle","getAttribute","decodeURI","innerText","removeAttribute","McNavbar","forceRecalculateItemsWidth","resizeDebounceInterval","firstLevelElement","secondLevelElements","resizeObserver","fromEvent","debounceTime","_resizeSubscription","updateCollapsed","bind","_itemsWidths","calculateAndCacheItemsWidth","_totalItemsWidths","calculateAndCacheTotalItemsWidth","collapseDelta","maxAllowedWidth","itemsWidths","canCollapse","collapsedItemsWidth","getOuterElementWidth","getPropertyValue","allItemsSelector","allItems","from","getItemsForCollapse","McNavbarModule","idIterator","McProgressBarBase","_McProgressBarMixinBase","McProgressBar","mode","ThemePalette","Primary","McProgressBarModule","McProgressSpinnerBase","MaxValidator","_createValidator","validate","c","_validator","registerOnValidatorChange","Validators","MAX_VALIDATOR","[attr.max]","McInputModule","FormsModule","McInput","McNumberInput","McInputMono","MinValidator","McContentComponent","[class.mc-layout-content]","McFooterComponent","[class.mc-layout-footer]","McHeaderComponent","[class.mc-layout-header]","McLayoutComponent","hasSidebar","[class.mc-layout]","[class.mc-layout-has-sidebar]","McSidebarComponent","mcLayoutComponent","_mcWidth","mcCollapsedWidth","mcCollapsedChange","collapsible","mcCollapsed","[class.mc-layout-sidebar]","[class.mc-layout-sidebar-collapsed]","[style.flex]","[style.max-width.px]","[style.min-width.px]","[style.width.px]","Host","McLayoutModule","McListOption","_element","listSelection","checkboxPosition","_reportValueChange","wasSelected_1","_lineSetter","McLineSetter","_lines","_removeOptionFromList","getLabel","_text","textContent","_getHostElement","McLine","McListSelection","MC_SELECTION_LIST_VALUE_ACCESSOR","McListSelectionChange","McListSelectionBase","_McListSelectionMixinBase","horizontal","_modelChanges","EMPTY","_","_tempValues","_setOptionsFromValues","_i","_c","selectAll","deselectAll","values","getSelectedOptionValues","listOption","optionIndex","setPreviousItemActive","setNextItemActive","_getOptionByValue","Boolean","McListBase","McList","McListSubheaderCssStyler","McListItemBase","McListItem","McListModule","McLineModule","McLinkBase","_McLinkBase","McLink","McLinkModule","parentService","rootOpenModals","rootAfterAllClose","rootRegisteredMetaMap","registeredMetaMap","hasRegistered","afterOpenSubscription","afterOpen","afterCloseSubscription","afterClose","removeOpenModal","has","splice","SkipSelf","listenDocumentClick","clientX","clientY","ModalUtil$1","_mcVisible","mcZIndex","_mcClosable","_mcMask","_mcMaskClosable","mcOkType","_mcOkLoading","_mcCancelLoading","mcOkText","McIconButton","McButton","McAnchor","McButtonCSSStyler","McXSButtonCSSStyler","McSMButtonCSSStyler","McLGButtonCSSStyler","McXLButtonCSSStyler","McIconButtonCSSStyler","MC_CHECKBOX_CLICK_ACTION","MC_CHECKBOX_CONTROL_VALUE_ACCESSOR","McCheckbox","TransitionCheckState","McCheckboxChange","McCheckboxBase","_McCheckboxMixinBase","_clickAction","ariaLabel","ariaLabelledby","indeterminateChange","_currentAnimationClass","_currentCheckState","Init","_controlValueAccessorChangeFn","_indeterminate","_inputElement","focusOrigin","_onInputFocusChange","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_onLabelTextChange","_getAriaChecked","indeterminate","newState","oldState","_onInputClick","focusVia","_onInteractionEvent","[id]","[class.mc-checkbox-indeterminate]","[class.mc-checkbox-checked]","[class.mc-checkbox-disabled]","[class.mc-checkbox-label-before]","MC_CHECKBOX_REQUIRED_VALIDATOR","NG_VALIDATORS","McCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","McCheckboxModule","McDivider","_vertical","_inset","[attr.aria-orientation]","[class.mc-divider-vertical]","[class.mc-divider-inset]","McDividerModule","McCleaner","McFormFieldNumberControl","McHint","McPrefix","McStepper","stepUp","stepDown","onStepUp","onStepDown","McSuffix","McFormFieldBase","_McFormFieldMixinBase","_labelId","hovered","_validateControlChild","_control","_numberControl","hasStepper","_stepper","valueChanges","ngAfterContentChecked","clearValue","focused","hasCleaner","onHoverChanged","isHovered","step","_shouldForward","getMcFormFieldMissingControlError","_hint","_suffix","_cleaner","[class.mc-form-field_invalid]","[class.mc-form-field_disabled]","[class.mc-form-field_has-prefix]","[class.mc-form-field_has-suffix]","[class.mc-form-field_has-cleaner]","[class.mc-form-field_has-stepper]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","(mouseenter)","(mouseleave)","McFormFieldWithoutBorders","MC_INPUT_VALUE_ACCESSOR","res","MC_INPUT_INVALID_TYPES","BIG_STEP","SMALL_STEP","McInputBase","_McInputMixinBase","_model","bigStep","_step","isDigit","parseFloat","_bigStep","_min","Infinity","_max","_host","self","getPrototypeOf","normalizeSplitter","McNumberInput_1","_focusChanged","minuses","NUMPAD_MINUS","DASH","FF_MINUS","serviceKeys","DELETE","BACKSPACE","TAB","arrows","allowedKeys","concat","isIEPeriod","isNotIEPeriod","metaKey","C","V","X","F1","F12","EDGE","TRIDENT","ZERO","NINE","NUMPAD_ZERO","NUMPAD_NINE","onPaste","clipboardData","getData","valueAsNumber","toString","update","replace","isFloat","isInt","test","NgModel","(paste)","inputValueAccessor","_type","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","McInput_1","_validateType","_dirtyCheckNativeValue","_onInput","_isNeverEmpty","_isBadInput","getMcInputUnsupportedTypeError","validity","badInput","[attr.placeholder]","[disabled]","[required]","(input)","MIN_VALIDATOR","[attr.min]","__extends","d","__","constructor","extendStatics","__decorate","decorators","desc","r","getOwnPropertyDescriptor","Reflect","decorate","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","isBoolean","val","MC_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","Default","_color","colorPalette","defaultTabIndex","_tabIndex","errorState","matcher","errorStateMatcher","control","isErrorState","optionsArray","groups","groupCounter","optionHeight","currentScrollPosition","optionOffset","arrayMap","array","iteratee","baseValues","object","props","Error","inputType","sanitizeNumber","isFinite","getPrecision","arr","pow","value1","value2","precision","obj","scrollStrategies","reposition","scrollThrottle","setPrototypeOf","__proto__","p","hasOwnProperty","__assign","s","n","MC_SANITY_CHECKS","providedIn","_sanityChecksEnabled","_hasDoneGlobalChecks","_document","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","createElement","computedStyle","display","removeChild","BidiModule","_setLineClass","count","_resetClasses","_setClass","className","isAdd","ShowOnDirtyErrorStateMatcher","form","invalid","dirty","submitted","touched","McPseudoCheckbox","[class.mc-pseudo-checkbox_indeterminate]","[class.mc-pseudo-checkbox_checked]","McPseudoCheckboxModule","scrollbarMeasure","overflow","initScrollBarWidth","_scrollbarWidth","scrollDiv","scrollProp","offsetWidth","clientWidth","McOptgroupBase","_McOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mc-optgroup-disabled]","[attr.aria-disabled]","[attr.aria-labelledby]","_uniqueIdCounter","McOptionSelectionChange","_parent","_active","_mostRecentViewValue","disableRipple","trim","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_getTabIndex","ngAfterViewChecked","[class.mc-option-multiple]","[class.mc-active]","MC_LABEL_GLOBAL_OPTIONS","topCenter","offsetY","topLeft","topRight","rightTop","rightBottom","bottomCenter","bottomLeft","bottomRight","leftTop","leftBottom","McIconCSSStyler","McIconBase","_McIconMixinBase","iconName","queries","McButtonBase","_McButtonMixinBase","platform","focusMonitor","_haltDisabledEvents"],"mappings":"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"}