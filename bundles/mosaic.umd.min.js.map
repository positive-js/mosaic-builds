{"version":3,"file":"mosaic.umd.min.js","sources":["../../packages/mosaic/dropdown/dropdown-trigger.ts","../../packages/mosaic/select/select.component.ts","../../packages/mosaic/timepicker/timepicker.constants.ts","../../packages/mosaic/splitter/splitter.component.ts","../../packages/mosaic/splitter/splitter.module.ts","../../packages/mosaic/toggle/toggle.component.ts","../../packages/mosaic/toggle/toggle.module.ts","../../packages/mosaic/tooltip/tooltip.component.ts","../../packages/mosaic/tooltip/tooltip.module.ts","../../packages/mosaic/vertical-navbar/vertical-navbar-item.component.ts","../../packages/mosaic/vertical-navbar/vertical-navbar.component.ts","../../packages/mosaic/vertical-navbar/vertical-navbar.module.ts","../../packages/mosaic/version.ts","../../packages/mosaic/core/select/events.ts","../../packages/mosaic/core/select/constants.ts","../../packages/mosaic/autocomplete/autocomplete-trigger.directive.ts","../../packages/mosaic/tree-select/tree-select.component.ts","../../packages/mosaic/tree-select/tree-select.module.ts","../../packages/mosaic/textarea/textarea.component.ts","../../packages/mosaic/textarea/textarea.module.ts","../../packages/mosaic/timepicker/timepicker.ts","../../packages/mosaic/timepicker/timepicker.module.ts","../../packages/mosaic/sidepanel/sidepanel-config.ts","../../packages/mosaic/sidepanel/sidepanel-animations.ts","../../packages/mosaic/sidepanel/sidepanel-container.component.ts","../../packages/mosaic/sidepanel/sidepanel-ref.ts","../../packages/mosaic/sidepanel/sidepanel.service.ts","../../packages/mosaic/sidepanel/sidepanel-directives.ts","../../packages/mosaic/sidepanel/sidepanel.module.ts","../../packages/mosaic/select/select.module.ts","../../packages/mosaic/tags/tag.component.ts","../../packages/mosaic/tags/tag-list.component.ts","../../packages/mosaic/tags/tag-input.ts","../../packages/mosaic/tags/tag.module.ts","../../packages/mosaic/tabs/tab-content.ts","../../packages/mosaic/tabs/tab-label.ts","../../packages/mosaic/tabs/tab.ts","../../packages/mosaic/tabs/tabs-animations.ts","../../packages/mosaic/tabs/tab-body.ts","../../packages/mosaic/tabs/tab-label-wrapper.ts","../../packages/mosaic/tabs/tab-header.ts","../../packages/mosaic/tabs/tab-group.ts","../../packages/mosaic/tabs/tab-nav-bar/tab-nav-bar.ts","../../packages/mosaic/tabs/tabs.module.ts","../../packages/mosaic/tags/tag-default-options.ts","../../packages/mosaic/popover/popover.component.ts","../../packages/mosaic/popover/popover.module.ts","../../packages/mosaic/progress-bar/progress-bar.component.ts","../../packages/mosaic/progress-bar/progress-bar.module.ts","../../packages/mosaic/progress-spinner/progress-spinner.component.ts","../../packages/mosaic/progress-spinner/progress-spinner.module.ts","../../packages/mosaic/radio/radio.component.ts","../../packages/mosaic/radio/radio.module.ts","../../packages/mosaic/tree/node.ts","../../packages/mosaic/tree/padding.ts","../../packages/mosaic/tree/toggle.ts","../../packages/mosaic/tree/tree-option.ts","../../packages/mosaic/tree/tree-selection.ts","../../packages/mosaic/tree/tree.module.ts","../../packages/mosaic/tree/data-source/flat-data-source.ts","../../packages/mosaic/tree/data-source/nested-data-source.ts","../../packages/mosaic/modal/modal.component.ts","../../packages/mosaic/modal/css-unit.pipe.ts","../../packages/mosaic/modal/modal.service.ts","../../packages/mosaic/modal/modal.module.ts","../../packages/mosaic/navbar/navbar.component.ts","../../packages/mosaic/navbar/navbar.module.ts","../../packages/mosaic/popover/popover-animations.ts","../../packages/mosaic/list/list-selection.component.ts","../../packages/mosaic/list/list.component.ts","../../packages/mosaic/list/list.module.ts","../../packages/mosaic/link/link.component.ts","../../packages/mosaic/link/link.module.ts","../../packages/mosaic/modal/modal-control.service.ts","../../packages/mosaic/modal/modal-ref.class.ts","../../packages/mosaic/modal/modal-util.ts","../../packages/mosaic/datepicker/datepicker-input.ts","../../packages/mosaic/datepicker/datepicker-toggle.ts","../../packages/mosaic/datepicker/datepicker-module.ts","../../packages/mosaic/divider/divider.component.ts","../../packages/mosaic/divider/divider.module.ts","../../packages/mosaic/dropdown/dropdown-content.ts","../../packages/mosaic/dropdown/dropdown-panel.ts","../../packages/mosaic/dropdown/dropdown-item.ts","../../packages/mosaic/dropdown/dropdown-animations.ts","../../packages/mosaic/dropdown/dropdown.component.ts","../../packages/mosaic/dropdown/dropdown.module.ts","../../packages/mosaic/layout/content.component.ts","../../packages/mosaic/layout/footer.component.ts","../../packages/mosaic/layout/header.component.ts","../../packages/mosaic/layout/layout.component.ts","../../packages/mosaic/layout/sidebar.component.ts","../../packages/mosaic/layout/layout.module.ts","../../packages/mosaic/datepicker/multi-year-view.ts","../../packages/mosaic/datepicker/year-view.ts","../../packages/mosaic/datepicker/calendar.ts","../../packages/mosaic/datepicker/datepicker-animations.ts","../../packages/mosaic/datepicker/datepicker.ts","../../packages/mosaic/card/card.component.ts","../../packages/mosaic/card/card.module.ts","../../packages/mosaic/checkbox/checkbox-config.ts","../../packages/mosaic/checkbox/checkbox.ts","../../packages/mosaic/checkbox/checkbox-required-validator.ts","../../packages/mosaic/checkbox/checkbox-module.ts","../../packages/mosaic/input/input-value-accessor.ts","../../packages/mosaic/input/stepperUtils.ts","../../packages/mosaic/input/input.ts","../../packages/mosaic/input/input-number-validators.ts","../../packages/mosaic/input/input.module.ts","../../packages/mosaic/datepicker/datepicker-intl.ts","../../packages/mosaic/datepicker/calendar-body.ts","../../packages/mosaic/datepicker/month-view.ts","../../packages/mosaic/autocomplete/autocomplete.component.ts","../../packages/mosaic/autocomplete/autocomplete-origin.directive.ts","../../packages/mosaic/autocomplete/autocomplete.module.ts","../../packages/mosaic/button/button.component.ts","../../packages/mosaic/button/button.module.ts","../../packages/mosaic/button-toggle/button-toggle.component.ts","../../packages/mosaic/button-toggle/button-toggle.module.ts","../../node_modules/tslib/tslib.es6.js","../../packages/mosaic/core/utils/utils.ts","../../packages/mosaic/core/common-behaviors/common-module.ts","../../packages/mosaic/core/common-behaviors/disabled.ts","../../packages/mosaic/core/common-behaviors/color.ts","../../packages/mosaic/core/common-behaviors/tabindex.ts","../../packages/mosaic/core/common-behaviors/error-state.ts","../../packages/mosaic/core/option/option.ts","../../packages/mosaic/core/overlay/overlay-position-map.ts","../../packages/mosaic/core/select/errors.ts","../../packages/mosaic/form-field/form-field-errors.ts","../../packages/mosaic/input/input-errors.ts","../../packages/mosaic/datepicker/datepicker-errors.ts","../../packages/mosaic/dropdown/dropdown-errors.ts","../../packages/mosaic/vertical-navbar/vertical-navbar.animation.ts","../../packages/mosaic/core/line/line.ts","../../packages/mosaic/core/error/error-options.ts","../../packages/mosaic/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../packages/mosaic/core/selection/index.ts","../../packages/mosaic/core/services/measure-scrollbar.service.ts","../../packages/mosaic/core/option/optgroup.ts","../../packages/mosaic/core/option/index.ts","../../packages/mosaic/core/label/label-options.ts","../../packages/mosaic/core/animation/fade-animations.ts","../../packages/mosaic/core/animation/animation.ts","../../packages/mosaic/core/select/animations.ts","../../packages/mosaic/icon/icon.component.ts","../../packages/mosaic/icon/icon.module.ts","../../packages/mosaic/form-field/cleaner.ts","../../packages/mosaic/form-field/form-field-control.ts","../../packages/mosaic/form-field/form-field-number-control.ts","../../packages/mosaic/form-field/hint.ts","../../packages/mosaic/form-field/prefix.ts","../../packages/mosaic/form-field/stepper.ts","../../packages/mosaic/form-field/suffix.ts","../../packages/mosaic/form-field/form-field.ts","../../packages/mosaic/form-field/form-field.module.ts"],"sourcesContent":["import {\n    AfterContentInit,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    Self,\n    ViewContainerRef\n} from '@angular/core';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { Direction, Directionality } from '@ptsecurity/cdk/bidi';\nimport { LEFT_ARROW, RIGHT_ARROW, SPACE, ENTER } from '@ptsecurity/cdk/keycodes';\nimport {\n    FlexibleConnectedPositionStrategy,\n    HorizontalConnectionPos,\n    Overlay,\n    OverlayConfig,\n    OverlayRef,\n    VerticalConnectionPos,\n    IScrollStrategy\n} from '@ptsecurity/cdk/overlay';\nimport { normalizePassiveListenerOptions } from '@ptsecurity/cdk/platform';\nimport { TemplatePortal } from '@ptsecurity/cdk/portal';\nimport { asapScheduler, merge, of as observableOf, Subscription } from 'rxjs';\nimport { delay, filter, take, takeUntil } from 'rxjs/operators';\n\nimport { throwMcDropdownMissingError } from './dropdown-errors';\nimport { McDropdownItem } from './dropdown-item';\nimport { McDropdownPanel } from './dropdown-panel';\nimport { DropdownPositionX, DropdownPositionY } from './dropdown-positions';\nimport { McDropdown } from './dropdown.component';\n\n\n/** Injection token that determines the scroll handling while the dropdown is open. */\nexport const MC_DROPDOWN_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-dropdown-scroll-strategy');\n\n/** @docs-private */\nexport function MC_DROPDOWN_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => IScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_DROPDOWN_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_DROPDOWN_SCROLL_STRATEGY_FACTORY\n};\n\n/** Default top padding of the nested dropdown panel. */\nexport const NESTED_PANEL_TOP_PADDING = 2;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * This directive is intended to be used in conjunction with an mc-dropdown tag.  It is\n * responsible for toggling the display of the provided dropdown instance.\n */\n@Directive({\n    selector: `[mcDropdownTriggerFor]`,\n    host: {\n        'aria-haspopup': 'true',\n        '[attr.aria-expanded]': 'opened || null',\n        '(mousedown)': '_handleMousedown($event)',\n        '(keydown)': '_handleKeydown($event)',\n        '(click)': '_handleClick($event)'\n    },\n    exportAs: 'mcDropdownTrigger'\n})\nexport class McDropdownTrigger implements AfterContentInit, OnDestroy {\n\n\n    /**\n     * Handles touch start events on the trigger.\n     * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n     */\n    private _handleTouchStart = () => this._openedBy = 'touch';\n\n    /** The text direction of the containing app. */\n    get dir(): Direction {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n\n    // Tracking input type is necessary so it's possible to only auto-focus\n    // the first item of the list when the dropdown is opened via the keyboard\n    _openedBy: 'mouse' | 'touch' | null = null;\n\n\n    /** References the dropdown instance that the trigger is associated with. */\n    @Input('mcDropdownTriggerFor')\n    get dropdown() {\n        return this._dropdown;\n    }\n\n    set dropdown(dropdown: McDropdownPanel) {\n        if (dropdown === this._dropdown) {\n            return;\n        }\n\n        this._dropdown = dropdown;\n        this._closeSubscription.unsubscribe();\n\n        if (dropdown) {\n            this._closeSubscription = dropdown.closed.asObservable().subscribe(reason => {\n                this._destroy();\n\n                // If a click closed the dropdown, we should close the entire chain of nested dropdowns.\n                if ((reason === 'click' || reason === 'tab') && this._parent) {\n                    this._parent.closed.emit(reason);\n                }\n            });\n        }\n    }\n\n    private _dropdown: McDropdownPanel;\n\n    /** Data to be passed along to any lazily-rendered content. */\n    @Input('mcDropdownTriggerData') data: any;\n\n    /** Event emitted when the associated dropdown is opened. */\n    @Output() readonly dropdownOpened: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Event emitted when the associated dropdown is closed. */\n    @Output() readonly dropdownClosed: EventEmitter<void> = new EventEmitter<void>();\n\n    private _portal: TemplatePortal;\n    private _overlayRef: OverlayRef | null = null;\n    private _opened: boolean = false;\n    private _closeSubscription = Subscription.EMPTY;\n    private _hoverSubscription = Subscription.EMPTY;\n\n    constructor(private _overlay: Overlay,\n                private _element: ElementRef<HTMLElement>,\n                private _viewContainerRef: ViewContainerRef,\n                @Inject(MC_DROPDOWN_SCROLL_STRATEGY) private _scrollStrategy: any,\n                @Optional() private _parent: McDropdown,\n                @Optional() @Self() private _dropdownItemInstance: McDropdownItem,\n                @Optional() private _dir: Directionality,\n                private _focusMonitor?: FocusMonitor) {\n\n        _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n            passiveEventListenerOptions);\n\n        if (_dropdownItemInstance) {\n            _dropdownItemInstance._triggersNestedDropdown = this.triggersNestedDropdown();\n        }\n    }\n\n    ngAfterContentInit() {\n        this._check();\n        this._handleHover();\n    }\n\n    ngOnDestroy() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n\n        this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n            passiveEventListenerOptions);\n\n        this._cleanUpSubscriptions();\n        this._closeSubscription.unsubscribe();\n    }\n\n    /** Whether the dropdown is open. */\n    get opened(): boolean {\n        return this._opened;\n    }\n\n    /** Whether the dropdown triggers a nested dropdown or a top-level one. */\n    triggersNestedDropdown(): boolean {\n        return !!(this._dropdownItemInstance && this._parent);\n    }\n\n    /** Toggles the dropdown between the open and closed states. */\n    toggle(): void {\n        // tslint:disable-next-line:no-void-expression\n        return this._opened ? this.close() : this.open();\n    }\n\n    /** Opens the dropdown. */\n    open(): void {\n        if (this._opened) {\n            return;\n        }\n\n        this._check();\n\n        const overlayRef = this._createOverlay();\n        const overlayConfig = overlayRef.getConfig();\n\n        this._setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\n        overlayConfig.hasBackdrop = this.dropdown.hasBackdrop == null ? !this.triggersNestedDropdown() :\n            this.dropdown.hasBackdrop;\n        overlayRef.attach(this._getPortal());\n\n        if (this.dropdown.lazyContent) {\n            this.dropdown.lazyContent.attach(this.data);\n        }\n\n        this._closeSubscription = this._closingActions().subscribe(() => this.close());\n        this._init();\n\n        if (this.dropdown instanceof McDropdown) {\n            this.dropdown._startAnimation();\n        }\n    }\n\n    /** Closes the dropdown. */\n    close(): void {\n        this.dropdown.closed.emit();\n    }\n\n    /**\n     * Focuses the dropdown trigger.\n     * @param origin Source of the dropdown trigger's focus.\n     */\n    focus(origin: FocusOrigin = 'program') {\n        if (this._focusMonitor) {\n            this._focusMonitor.focusVia(this._element.nativeElement, origin);\n        } else {\n            this._element.nativeElement.focus();\n        }\n    }\n\n    /** Closes the dropdown and does the necessary cleanup. */\n    private _destroy() {\n        if (!this._overlayRef || !this.opened) {\n            return;\n        }\n\n        const dropdown = this.dropdown;\n\n        this._closeSubscription.unsubscribe();\n        this._overlayRef.detach();\n\n        if (dropdown instanceof McDropdown) {\n            dropdown._resetAnimation();\n\n            if (dropdown.lazyContent) {\n                // Wait for the exit animation to finish before detaching the content.\n                dropdown._animationDone\n                    .pipe(\n                        filter((event) => event.toState === 'void'),\n                        take(1),\n                        // Interrupt if the content got re-attached.\n                        takeUntil(dropdown.lazyContent._attached)\n                    )\n                    .subscribe(() => dropdown.lazyContent!.detach(), undefined, () => {\n                        // No matter whether the content got re-attached, reset the dropdown.\n                        this._reset();\n                    });\n            } else {\n                this._reset();\n            }\n        } else {\n            this._reset();\n\n            if (dropdown.lazyContent) {\n                dropdown.lazyContent.detach();\n            }\n        }\n    }\n\n    /**\n     * This method sets the dropdown state to open and focuses the first item if\n     * the dropdown was opened via the keyboard.\n     */\n    private _init(): void {\n        this.dropdown.parent = this.triggersNestedDropdown() ? this._parent : undefined;\n        this.dropdown.direction = this.dir;\n        this._setIsOpened(true);\n        this.dropdown.focusFirstItem(this._openedBy || 'program');\n    }\n\n    /**\n     * This method resets the dropdown when it's closed, most importantly restoring\n     * focus to the dropdown trigger if the dropdown was opened via the keyboard.\n     */\n    private _reset(): void {\n        this._setIsOpened(false);\n\n        // We should reset focus if the user is navigating using a keyboard or\n        // if we have a top-level trigger which might cause focus to be lost\n        // when clicking on the backdrop.\n        if (!this._openedBy) {\n            // Note that the focus style will show up both for `program` and\n            // `keyboard` so we don't have to specify which one it is.\n            this.focus();\n        } else if (!this.triggersNestedDropdown()) {\n            this.focus(this._openedBy);\n        }\n\n        this._openedBy = null;\n    }\n\n    // set state rather than toggle to support triggers sharing a dropdown\n    private _setIsOpened(isOpen: boolean): void {\n        this._opened = isOpen;\n        // tslint:disable-next-line:no-void-expression\n        this._opened ? this.dropdownOpened.emit() : this.dropdownClosed.emit();\n\n        if (this.triggersNestedDropdown()) {\n            this._dropdownItemInstance._highlighted = isOpen;\n        }\n    }\n\n    /**\n     * This method checks that a valid instance of McDropdown has been passed into\n     * mcDropdownTriggerFor. If not, an exception is thrown.\n     */\n    private _check() {\n        if (!this.dropdown) {\n            throwMcDropdownMissingError();\n        }\n    }\n\n    /**\n     * This method creates the overlay from the provided dropdown's template and saves its\n     * OverlayRef so that it can be attached to the DOM when open is called.\n     */\n    private _createOverlay(): OverlayRef {\n        if (!this._overlayRef) {\n            const config = this._getOverlayConfig();\n            this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n            this._overlayRef = this._overlay.create(config);\n\n            // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n            // Ideally we'd also have our keyboard event logic in here, however doing so will\n            // break anybody that may have implemented the `McDropdownPanel` themselves.\n            this._overlayRef.keydownEvents().subscribe();\n        }\n\n        return this._overlayRef;\n    }\n\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @returns OverlayConfig\n     */\n    private _getOverlayConfig(): OverlayConfig {\n        return new OverlayConfig({\n            positionStrategy: this._overlay.position()\n                .flexibleConnectedTo(this._element)\n                .withLockedPosition()\n                .withTransformOriginOn('.mc-dropdown__panel'),\n            backdropClass: this.dropdown.backdropClass || 'cdk-overlay-transparent-backdrop',\n            scrollStrategy: this._scrollStrategy(),\n            direction: this._dir\n        });\n    }\n\n    /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the dropdown based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     */\n    private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n        if (this.dropdown.setPositionClasses) {\n            position.positionChanges.subscribe(change => {\n                const posX: DropdownPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n                const posY: DropdownPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n                this.dropdown.setPositionClasses!(posX, posY);\n            });\n        }\n    }\n\n    /**\n     * Sets the appropriate positions on a position strategy\n     * so the overlay connects with the trigger correctly.\n     * @param positionStrategy Strategy whose position to update.\n     */\n    private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n\n        let [originX, originFallbackX, overlayX, overlayFallbackX]: HorizontalConnectionPos[] =\n            this.dropdown.xPosition === 'before' ?\n                ['end', 'start', 'end', 'start'] :\n                ['start', 'end', 'start', 'end'];\n\n        let [overlayY, overlayFallbackY, originY, originFallbackY]: VerticalConnectionPos[] =\n            this.dropdown.yPosition === 'above' ?\n                ['bottom', 'top', 'bottom', 'top'] :\n                ['top', 'bottom', 'top', 'bottom'];\n\n        let offsetY = 0;\n\n        if (this.triggersNestedDropdown()) {\n            // When the dropdown is nested, it should always align itself\n            // to the edges of the trigger, instead of overlapping it.\n            overlayFallbackX = originX = this.dropdown.xPosition === 'before' ? 'start' : 'end';\n            originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n            offsetY = overlayY === 'bottom' ? NESTED_PANEL_TOP_PADDING : -NESTED_PANEL_TOP_PADDING;\n        } else {\n            if (!this.dropdown.overlapTriggerY) {\n                originY = overlayY === 'top' ? 'bottom' : 'top';\n                originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n            }\n\n            if (!this.dropdown.overlapTriggerX) {\n                overlayFallbackX = originX = this.dropdown.xPosition === 'before' ? 'start' : 'end';\n                originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n            }\n        }\n\n        positionStrategy.withPositions([\n            {originX, originY, overlayX, overlayY, offsetY},\n            {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n            {\n                originX,\n                originY: originFallbackY,\n                overlayX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY\n            },\n            {\n                originX: originFallbackX,\n                originY: originFallbackY,\n                overlayX: overlayFallbackX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY\n            }\n        ]);\n    }\n\n    /** Cleans up the active subscriptions. */\n    private _cleanUpSubscriptions(): void {\n        this._closeSubscription.unsubscribe();\n        this._hoverSubscription.unsubscribe();\n    }\n\n    /** Returns a stream that emits whenever an action that should close the dropdown occurs. */\n    private _closingActions() {\n        const backdrop = this._overlayRef!.backdropClick();\n        const detachments = this._overlayRef!.detachments();\n        const parentClose = this._parent ? this._parent.closed : observableOf();\n        const hover = this._parent ? this._parent._hovered().pipe(\n            filter((active) => active !== this._dropdownItemInstance),\n            filter(() => this._opened)\n        ) : observableOf();\n\n        return merge(backdrop, parentClose, hover, detachments);\n    }\n\n    /** Handles mouse presses on the trigger. */\n    private _handleMousedown(event: MouseEvent): void {\n        // Since right or middle button clicks won't trigger the `click` event,\n        // we shouldn't consider the dropdown as opened by mouse in those cases.\n        this._openedBy = event.button === 0 ? 'mouse' : null;\n\n        // Since clicking on the trigger won't close the dropdown if it opens a nested dropdown,\n        // we should prevent focus from moving onto it via click to avoid the\n        // highlight from lingering on the dropdown item.\n        if (this.triggersNestedDropdown()) {\n            event.preventDefault();\n        }\n    }\n\n    /** Handles key presses on the trigger. */\n    private _handleKeydown(event: KeyboardEvent): void {\n        const keyCode = event.keyCode;\n\n        if (keyCode === SPACE || keyCode === ENTER) {\n            this.open();\n        }\n\n        if (this.triggersNestedDropdown() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n            this.open();\n        }\n    }\n\n    /** Handles click events on the trigger. */\n    private _handleClick(event: MouseEvent): void {\n        if (this.triggersNestedDropdown()) {\n            // Stop event propagation to avoid closing the parent dropdown.\n            event.stopPropagation();\n            this.open();\n        } else {\n            this.toggle();\n        }\n    }\n\n    /** Handles the cases where the user hovers over the trigger. */\n    private _handleHover() {\n        // Subscribe to changes in the hovered item in order to toggle the panel.\n        if (!this.triggersNestedDropdown()) {\n            return;\n        }\n\n        this._hoverSubscription = this._parent._hovered()\n        // Since we might have multiple competing triggers for the same dropdown (e.g. a nested dropdown\n        // with different data and triggers), we have to delay it by a tick to ensure that\n        // it won't be closed immediately after it is opened.\n            .pipe(\n                filter((active) => active === this._dropdownItemInstance && !active.disabled),\n                delay(0, asapScheduler)\n            )\n            .subscribe(() => {\n                this._openedBy = 'mouse';\n\n                // If the same dropdown is used between multiple triggers, it might still be animating\n                // while the new trigger tries to re-open it. Wait for the animation to finish\n                // before doing so. Also interrupt if the user moves to another item.\n                if (this.dropdown instanceof McDropdown && this.dropdown._isAnimating) {\n                    // We need the `delay(0)` here in order to avoid\n                    // 'changed after checked' errors in some cases. See #12194.\n                    this.dropdown._animationDone\n                        .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parent._hovered()))\n                        .subscribe(() => this.open());\n                } else {\n                    this.open();\n                }\n            });\n    }\n\n    /** Gets the portal that should be attached to the overlay. */\n    private _getPortal(): TemplatePortal {\n        // Note that we can avoid this check by keeping the portal on the dropdown panel.\n        // While it would be cleaner, we'd have to introduce another required method on\n        // `McDropdownPanel`, making it harder to consume.\n        if (!this._portal || this._portal.templateRef !== this.dropdown.templateRef) {\n            this._portal = new TemplatePortal(this.dropdown.templateRef, this._viewContainerRef);\n        }\n\n        return this._portal;\n    }\n\n}\n","/* tslint:disable:no-empty */\n\nimport {\n    AfterContentInit, AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Input,\n    isDevMode,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList, Renderer2,\n    Self,\n    SimpleChanges,\n    ViewChild, ViewChildren,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { ActiveDescendantKeyManager } from '@ptsecurity/cdk/a11y';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    RIGHT_ARROW,\n    SPACE,\n    UP_ARROW,\n    A\n} from '@ptsecurity/cdk/keycodes';\nimport {\n    CdkConnectedOverlay,\n    ViewportRuler\n} from '@ptsecurity/cdk/overlay';\nimport {\n    countGroupLabelsBeforeOption,\n    getOptionScrollPosition,\n    CanDisable,\n    CanDisableCtor,\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    HasTabIndex,\n    HasTabIndexCtor,\n    MC_OPTION_PARENT_COMPONENT,\n    McOptgroup,\n    McOption,\n    McOptionSelectionChange,\n    mixinDisabled,\n    mixinErrorState,\n    mixinTabIndex,\n    mcSelectAnimations,\n\n    SELECT_PANEL_INDENT_PADDING_X,\n    SELECT_PANEL_MAX_HEIGHT,\n    SELECT_PANEL_PADDING_X,\n    SELECT_PANEL_VIEWPORT_PADDING,\n\n    getMcSelectDynamicMultipleError,\n    getMcSelectNonFunctionValueError,\n    getMcSelectNonArrayValueError,\n    MC_SELECT_SCROLL_STRATEGY\n} from '@ptsecurity/mosaic/core';\nimport { McFormField, McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { McTag } from '@ptsecurity/mosaic/tags';\nimport { defer, merge, Observable, Subject } from 'rxjs';\nimport {\n    filter,\n    map,\n    startWith,\n    switchMap,\n    take,\n    takeUntil,\n    distinctUntilChanged\n} from 'rxjs/operators';\n\n\nlet nextUniqueId = 0;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 2;\n\n/** Change event object that is emitted when the select value has changed. */\nexport class McSelectChange {\n    constructor(public source: McSelect, public value: any) {}\n}\n\nexport class McSelectBase {\n    constructor(\n        public elementRef: ElementRef,\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {}\n}\n\nconst McSelectMixinBase: CanDisableCtor & HasTabIndexCtor & CanUpdateErrorStateCtor &\n    typeof McSelectBase = mixinTabIndex(mixinDisabled(mixinErrorState(McSelectBase)));\n\n\n@Directive({ selector: 'mc-select-trigger' })\nexport class McSelectTrigger {}\n\n\n@Component({\n    selector: 'mc-select',\n    exportAs: 'mcSelect',\n    templateUrl: 'select.html',\n    styleUrls: ['./select.css'],\n    inputs: ['disabled', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'tabIndex',\n        class: 'mc-select',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-select-invalid]': 'errorState',\n        '[class.mc-select-required]': 'required',\n        '(keydown)': 'handleKeydown($event)',\n        '(focus)': 'onFocus()',\n        '(blur)': 'onBlur()',\n        '(window:resize)': 'calculateHiddenItems()'\n    },\n    animations: [\n        mcSelectAnimations.transformPanel,\n        mcSelectAnimations.fadeInContent\n    ],\n    providers: [\n        { provide: McFormFieldControl, useExisting: McSelect },\n        { provide: MC_OPTION_PARENT_COMPONENT, useExisting: McSelect }\n    ]\n})\nexport class McSelect extends McSelectMixinBase implements\n    AfterContentInit, AfterViewInit, OnChanges, OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable,\n    HasTabIndex, McFormFieldControl<any>, CanUpdateErrorState {\n\n    /** A name for this control that can be used by `mc-form-field`. */\n    controlType = 'mc-select';\n\n    hiddenItems: number = 0;\n    oneMoreText: string = '...ещё';\n\n    /** The last measured value for the trigger's client bounding rect. */\n    triggerRect: ClientRect;\n\n    /** The cached font-size of the trigger element. */\n    triggerFontSize = 0;\n\n    /** Deals with the selection logic. */\n    selectionModel: SelectionModel<McOption>;\n\n    /** Manages keyboard events for options in the panel. */\n    keyManager: ActiveDescendantKeyManager<McOption>;\n\n    /** The IDs of child options to be passed to the aria-owns attribute. */\n    optionIds: string = '';\n\n    /** The value of the select panel's transform-origin property. */\n    transformOrigin: string = 'top';\n\n    /** Whether the panel's animation is done. */\n    panelDoneAnimating: boolean = false;\n\n    /** Emits when the panel element is finished transforming in. */\n    panelDoneAnimatingStream = new Subject<string>();\n\n    /** Strategy that will be used to handle scrolling while the select panel is open. */\n    scrollStrategy = this._scrollStrategyFactory();\n\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n    offsetY = 0;\n\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n    positions = [\n        {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top'\n        },\n        {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom'\n        }\n    ];\n\n    @ViewChild('trigger') trigger: ElementRef;\n\n    @ViewChild('panel') panel: ElementRef;\n\n    @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n    @ViewChildren(McTag) tags: QueryList<McTag>;\n\n    /** User-supplied override of the trigger element. */\n    @ContentChild(McSelectTrigger) customTrigger: McSelectTrigger;\n\n    /** All of the defined select options. */\n    @ContentChildren(McOption, { descendants: true }) options: QueryList<McOption>;\n\n    /** All of the defined groups of options. */\n    @ContentChildren(McOptgroup) optionGroups: QueryList<McOptgroup>;\n\n    /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n    @Input() panelClass: string | string[] | Set<string> | { [key: string]: any };\n\n    /** Object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Function used to sort the values in a select in multiple mode.\n     * Follows the same logic as `Array.prototype.sort`.\n     */\n    @Input() sortComparator: (a: McOption, b: McOption, options: McOption[]) => number;\n\n    /** Combined stream of all of the child options' change events. */\n    readonly optionSelectionChanges: Observable<McOptionSelectionChange> = defer(() => {\n        if (this.options) {\n            return merge(...this.options.map((option) => option.onSelectionChange));\n        }\n\n        return this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n    }) as Observable<McOptionSelectionChange>;\n\n    /** Event emitted when the select panel has been toggled. */\n    @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted when the select has been opened. */\n    @Output('opened') readonly openedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => o), map(() => {}));\n\n    /** Event emitted when the select has been closed. */\n    @Output('closed') readonly closedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => !o), map(() => {}));\n\n    /** Event emitted when the selected value has been changed by the user. */\n    @Output() readonly selectionChange: EventEmitter<McSelectChange> = new EventEmitter<McSelectChange>();\n\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    @Input()\n    get placeholder(): string {\n        return this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n\n        this.stateChanges.next();\n    }\n\n    private _placeholder: string;\n\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n\n        this.stateChanges.next();\n    }\n\n    private _required: boolean = false;\n\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        if (this.selectionModel) {\n            throw getMcSelectDynamicMultipleError();\n        }\n\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    private _multiple: boolean = false;\n\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith() {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        /* tslint:disable-next-line:strict-type-predicates */\n        if (typeof fn !== 'function') {\n            throw getMcSelectNonFunctionValueError();\n        }\n\n        this._compareWith = fn;\n\n        if (this.selectionModel) {\n            // A different comparator means the selection could change.\n            this.initializeSelection();\n        }\n    }\n\n    /** Value of the select control. */\n    @Input()\n    get value(): any {\n        return this._value;\n    }\n\n    set value(newValue: any) {\n        if (newValue !== this._value) {\n            this.writeValue(newValue);\n            this._value = newValue;\n        }\n    }\n\n    private _value: any;\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n        this.stateChanges.next();\n    }\n\n    private _id: string;\n\n    /** Whether the select is focused. */\n    get focused(): boolean {\n        return this._focused || this._panelOpen;\n    }\n\n    /**\n     * @deprecated Setter to be removed as this property is intended to be readonly.\n     * @breaking-change 8.0.0\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n\n    private _focused = false;\n\n    get panelOpen(): boolean {\n        return this._panelOpen;\n    }\n\n    private _panelOpen = false;\n\n    /** The scroll position of the overlay panel, calculated to center the selected option. */\n    private scrollTop = 0;\n\n    /** Unique id for this input. */\n    private readonly uid = `mc-select-${nextUniqueId++}`;\n\n    /** Emits whenever the component is destroyed. */\n    private readonly destroy = new Subject<void>();\n\n    constructor(\n        private readonly _viewportRuler: ViewportRuler,\n        private readonly _changeDetectorRef: ChangeDetectorRef,\n        private readonly _ngZone: NgZone,\n        private readonly _renderer: Renderer2,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        elementRef: ElementRef,\n        @Optional() private readonly _dir: Directionality,\n        @Optional() parentForm: NgForm,\n        @Optional() parentFormGroup: FormGroupDirective,\n        @Optional() private readonly _parentFormField: McFormField,\n        @Self() @Optional() public ngControl: NgControl,\n        @Attribute('tabindex') tabIndex: string,\n        @Inject(MC_SELECT_SCROLL_STRATEGY) private readonly _scrollStrategyFactory\n    ) {\n        super(elementRef, defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnInit() {\n        this.selectionModel = new SelectionModel<McOption>(this.multiple);\n        this.stateChanges.next();\n\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this.panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this.panelOpen) {\n                    this.scrollTop = 0;\n                    this.openedChange.emit(true);\n                } else {\n                    this.openedChange.emit(false);\n                    this.panelDoneAnimating = false;\n                    this.overlayDir.offsetX = 0;\n                    this._changeDetectorRef.markForCheck();\n                }\n            });\n    }\n\n    ngAfterContentInit() {\n        this.initKeyManager();\n\n        this.selectionModel.changed\n            .pipe(takeUntil(this.destroy))\n            .subscribe((event) => {\n                event.added.forEach((option) => option.select());\n                event.removed.forEach((option) => option.deselect());\n            });\n\n        this.options.changes\n            .pipe(startWith(null), takeUntil(this.destroy))\n            .subscribe(() => {\n                this.resetOptions();\n                this.initializeSelection();\n            });\n    }\n\n    ngAfterViewInit(): void {\n        this.tags.changes\n            .subscribe(() => {\n                setTimeout(() => this.calculateHiddenItems(), 0);\n            });\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) { this.updateErrorState(); }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes.disabled) {\n            this.stateChanges.next();\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroy.next();\n        this.destroy.complete();\n        this.stateChanges.complete();\n    }\n\n    /** `View -> model callback called when value changes` */\n    _onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when select has been touched` */\n    _onTouched = () => {};\n\n    /** Toggles the overlay panel open or closed. */\n    toggle(): void {\n        if (this.panelOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    /** Opens the overlay panel. */\n    open(): void {\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) { return; }\n\n        this.triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this.triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n        this._panelOpen = true;\n        this.keyManager.withHorizontalOrientation(null);\n        this.calculateOverlayPosition();\n        this.highlightCorrectOption();\n        this._changeDetectorRef.markForCheck();\n\n        // Set the font size on the panel element once it exists.\n        this._ngZone.onStable.asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                if (this.triggerFontSize && this.overlayDir.overlayRef && this.overlayDir.overlayRef.overlayElement) {\n                    this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this.triggerFontSize}px`;\n                }\n            });\n    }\n\n    /** Closes the overlay panel and focuses the host element. */\n    close(): void {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this.keyManager.withHorizontalOrientation(this.isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value: any): void {\n        if (this.options) {\n            this.setSelectionByValue(value);\n        }\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn: (value: any) => void): void {\n        this._onChange = fn;\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn: () => {}): void {\n        this._onTouched = fn;\n    }\n\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    get selected(): McOption | McOption[] {\n        return this.multiple ? this.selectionModel.selected : this.selectionModel.selected[0];\n    }\n\n    get triggerValue(): string {\n        if (this.empty) { return ''; }\n\n        if (this._multiple) {\n            const selectedOptions = this.selectionModel.selected.map((option) => option.viewValue);\n\n            if (this.isRtl()) { selectedOptions.reverse(); }\n\n            return selectedOptions.join(', ');\n        }\n\n        return this.selectionModel.selected[0].viewValue;\n    }\n\n    get triggerValues(): McOption[] {\n        if (this.empty) { return []; }\n\n        if (this._multiple) {\n            const selectedOptions = this.selectionModel.selected;\n\n            if (this.isRtl()) { selectedOptions.reverse(); }\n\n            return selectedOptions;\n        }\n\n        return [this.selectionModel.selected[0]];\n    }\n\n    get empty(): boolean {\n        return !this.selectionModel || this.selectionModel.isEmpty();\n    }\n\n    isRtl(): boolean {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n\n    handleKeydown(event: KeyboardEvent): void {\n        if (!this.disabled) {\n            if (this.panelOpen) {\n                this.handleOpenKeydown(event);\n            } else {\n                this.handleClosedKeydown(event);\n            }\n        }\n    }\n\n    /**\n     * When the panel content is done fading in, the panelDoneAnimating property is\n     * set so the proper class can be added to the panel.\n     */\n    onFadeInDone(): void {\n        this.panelDoneAnimating = this.panelOpen;\n        this._changeDetectorRef.markForCheck();\n    }\n\n    onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    onBlur() {\n        this._focused = false;\n\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    onAttached(): void {\n        this.overlayDir.positionChange\n            .pipe(take(1))\n            .subscribe(() => {\n                this._changeDetectorRef.detectChanges();\n                this.calculateOverlayOffsetX();\n                this.panel.nativeElement.scrollTop = this.scrollTop;\n            });\n    }\n\n    /** Returns the theme to be used on the panel. */\n    getPanelTheme(): string {\n        return this._parentFormField ? `mc-${this._parentFormField.color}` : '';\n    }\n\n    /** Focuses the select element. */\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    calculateOverlayScroll(selectedIndex: number, scrollBuffer: number, maxScroll: number): number {\n        const itemHeight = this.getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n\n        /* tslint:disable-next-line:no-magic-numbers */\n        const halfOptionHeight = itemHeight / 2;\n\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n\n    /** Invoked when an option is clicked. */\n    onRemoveMatcherItem(option: McOption, $event): void {\n        $event.stopPropagation();\n\n        option.deselect();\n    }\n\n    calculateHiddenItems(): void {\n        if (this.empty || !this.multiple) { return; }\n\n        let visibleItems: number = 0;\n        const totalItemsWidth = this.getTotalItemsWidthInMatcher();\n        let totalVisibleItemsWidth: number = 0;\n        const itemMargin: number = 4;\n\n        this.tags.forEach((tag) => {\n            if (tag.nativeElement.offsetTop < tag.nativeElement.offsetHeight) {\n                totalVisibleItemsWidth += tag.nativeElement.getBoundingClientRect().width + itemMargin;\n                visibleItems++;\n            }\n        });\n\n        this.hiddenItems = (this.selected as ArrayLike<McOption>).length - visibleItems;\n\n        if (this.hiddenItems) {\n            const itemsCounter = this.trigger.nativeElement.querySelector('.mc-select__match-hidden-text');\n            const matcherList = this.trigger.nativeElement.querySelector('.mc-select__match-list');\n\n            const itemsCounterShowed = itemsCounter.offsetTop < itemsCounter.offsetHeight;\n            // const itemsCounterWidth: number = itemsCounter.getBoundingClientRect().width;\n            const itemsCounterWidth: number = 86;\n\n            const matcherListWidth: number = matcherList.getBoundingClientRect().width;\n            const matcherWidth: number = matcherListWidth + itemsCounterWidth;\n\n            if (itemsCounterShowed && (totalItemsWidth < matcherWidth)) { this.hiddenItems = 0; }\n\n            if (\n                totalVisibleItemsWidth === matcherListWidth ||\n                (totalVisibleItemsWidth + itemsCounterWidth) < matcherListWidth\n            ) {\n                this._changeDetectorRef.markForCheck();\n\n                return ;\n            } else if (!itemsCounterShowed && (totalItemsWidth + itemsCounterWidth) > matcherWidth) {\n                this.hiddenItems++;\n            }\n        }\n\n        this._changeDetectorRef.markForCheck();\n    }\n\n    private getTotalItemsWidthInMatcher(): number {\n        const triggerClone = this.trigger.nativeElement.cloneNode(true);\n        triggerClone.querySelector('.mc-select__match-hidden-text').remove();\n\n        this._renderer.setStyle(triggerClone, 'position', 'absolute');\n        this._renderer.setStyle(triggerClone, 'visibility', 'hidden');\n        this._renderer.setStyle(triggerClone, 'top', '-100%');\n        this._renderer.setStyle(triggerClone, 'left', '0');\n\n        this._renderer.appendChild(this.trigger.nativeElement, triggerClone);\n\n        let totalItemsWidth: number = 0;\n        const itemMargin: number = 4;\n        triggerClone.querySelectorAll('mc-tag').forEach((item) => {\n            totalItemsWidth += item.getBoundingClientRect().width as number + itemMargin;\n        });\n\n        triggerClone.remove();\n\n        return totalItemsWidth;\n    }\n\n    /** Handles keyboard events while the select is closed. */\n    private handleClosedKeydown(event: KeyboardEvent): void {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n        // Open the select on ALT + arrow key to match the native <select>\n        if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        } else if (!this.multiple) {\n            this.keyManager.onKeydown(event);\n        }\n    }\n\n    /** Handles keyboard events when the selected is open. */\n    private handleOpenKeydown(event: KeyboardEvent): void {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const manager = this.keyManager;\n\n        if (keyCode === HOME || keyCode === END) {\n            event.preventDefault();\n\n            if (keyCode === HOME) {\n                manager.setFirstItemActive();\n            } else {\n                manager.setLastItemActive();\n            }\n\n        } else if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n        } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n            event.preventDefault();\n            manager.activeItem.selectViaInteraction();\n        } else if (this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some((option) => !option.selected);\n            this.options.forEach((option) => {\n                if (hasDeselectedOptions && !option.disabled) {\n                    option.select();\n                } else {\n                    option.deselect();\n                }\n            });\n        } else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n\n            manager.onKeydown(event);\n\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem.selectViaInteraction();\n            }\n        }\n    }\n\n    private initializeSelection(): void {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this.setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n        });\n    }\n\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    private setSelectionByValue(value: any | any[]): void {\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw getMcSelectNonArrayValueError();\n            }\n\n            this.selectionModel.clear();\n            value.forEach((currentValue: any) => this.selectValue(currentValue));\n            this.sortValues();\n        } else {\n            this.selectionModel.clear();\n            const correspondingOption = this.selectValue(value);\n\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this.keyManager.setActiveItem(correspondingOption);\n            }\n        }\n\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    private selectValue(value: any): McOption | undefined {\n        const correspondingOption = this.options.find((option: McOption) => {\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            } catch (error) {\n                if (isDevMode()) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n\n                return false;\n            }\n        });\n\n        if (correspondingOption) {\n            this.selectionModel.select(correspondingOption);\n        }\n\n        return correspondingOption;\n    }\n\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    private initKeyManager() {\n        this.keyManager = new ActiveDescendantKeyManager<McOption>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this.isRtl() ? 'rtl' : 'ltr');\n\n        this.keyManager.tabOut\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            });\n\n        this.keyManager.change\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this._panelOpen && this.panel) {\n                    this.scrollActiveOptionIntoView();\n                } else if (!this._panelOpen && !this.multiple && this.keyManager.activeItem) {\n                    this.keyManager.activeItem.selectViaInteraction();\n                }\n            });\n    }\n\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    private resetOptions(): void {\n        const changedOrDestroyed = merge(this.options.changes, this.destroy);\n\n        this.optionSelectionChanges\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe((event) => {\n                this.onSelect(event.source, event.isUserInput);\n\n                if (event.isUserInput && !this.multiple && this._panelOpen) {\n                    this.close();\n                    this.focus();\n                }\n            });\n\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map((option) => option.stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n                this._changeDetectorRef.markForCheck();\n                this.stateChanges.next();\n            });\n\n        this.setOptionIds();\n    }\n\n    /** Invoked when an option is clicked. */\n    private onSelect(option: McOption, isUserInput: boolean): void {\n        const wasSelected = this.selectionModel.isSelected(option);\n\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this.selectionModel.clear();\n            this.propagateChanges(option.value);\n        } else {\n            if (option.selected) {\n                this.selectionModel.select(option);\n            } else {\n                this.selectionModel.deselect(option);\n            }\n\n            if (isUserInput) {\n                this.keyManager.setActiveItem(option);\n            }\n\n            if (this.multiple) {\n                this.sortValues();\n\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mc-option`.\n                    this.focus();\n                }\n            }\n        }\n\n        if (wasSelected !== this.selectionModel.isSelected(option)) {\n            this.propagateChanges();\n        }\n\n        this.stateChanges.next();\n    }\n\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    private sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n\n            this.selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n\n    /** Emits change event to set the model value. */\n    private propagateChanges(fallbackValue?: any): void {\n        let valueToEmit: any = null;\n\n        if (this.multiple) {\n            valueToEmit = (this.selected as McOption[]).map((option) => option.value);\n        } else {\n            valueToEmit = this.selected ? (this.selected as McOption).value : fallbackValue;\n        }\n\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(new McSelectChange(this, valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /** Records option IDs to pass to the aria-owns property. */\n    private setOptionIds() {\n        this.optionIds = this.options.map((option) => option.id).join(' ');\n    }\n\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    private highlightCorrectOption(): void {\n        if (this.keyManager) {\n            if (this.empty) {\n                this.keyManager.setFirstItemActive();\n            } else {\n                this.keyManager.setActiveItem(this.selectionModel.selected[0]);\n            }\n        }\n    }\n\n    /** Scrolls the active option into view. */\n    private scrollActiveOptionIntoView(): void {\n        const activeOptionIndex = this.keyManager.activeItemIndex || 0;\n        const labelCount = countGroupLabelsBeforeOption(activeOptionIndex, this.options, this.optionGroups);\n\n        this.panel.nativeElement.scrollTop = getOptionScrollPosition(\n            activeOptionIndex + labelCount,\n            this.getItemHeight(),\n            this.panel.nativeElement.scrollTop,\n            SELECT_PANEL_MAX_HEIGHT\n        );\n    }\n\n    /** Gets the index of the provided option in the option list. */\n    private getOptionIndex(option: McOption): number | undefined {\n        /* tslint:disable-next-line */\n        return this.options.reduce((result: number, current: McOption, index: number) => {\n            /* tslint:disable-next-line:strict-type-predicates */\n            return result === undefined ? (option === current ? index : undefined) : result;\n        }, undefined);\n    }\n\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    private calculateOverlayPosition(): void {\n        const itemHeight = this.getItemHeight();\n        const items = this.getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n\n        // If no value is selected we open the popup to the first item.\n        let selectedOptionOffset =\n            this.empty ? 0 : this.getOptionIndex(this.selectionModel.selected[0])!;\n\n        selectedOptionOffset += countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        /* tslint:disable-next-line:no-magic-numbers */\n        const scrollBuffer = panelHeight / 2;\n        this.scrollTop = this.calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this.offsetY = this.calculateOverlayOffsetY();\n\n        this.checkOverlayWithinViewport(maxScroll);\n    }\n\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    private calculateOverlayOffsetX(): void {\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const isRtl = this.isRtl();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const paddingWidth = SELECT_PANEL_PADDING_X * 2;\n        let offsetX: number;\n\n        const selected = this.selectionModel.selected[0] || this.options.first;\n        offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n\n        // Invert the offset in LTR.\n        if (!isRtl) { offsetX *= -1; }\n\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        } else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    private calculateOverlayOffsetY(): number {\n        // const itemHeight = this.getItemHeight();\n        // const optionHeightAdjustment = (itemHeight - this.triggerRect.height) / 2;\n\n        // todo I'm not sure that we will use it\n        return 0;\n        // return Math.round(-optionHeightAdjustment);\n    }\n\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    private checkOverlayWithinViewport(maxScroll: number): void {\n        const itemHeight = this.getItemHeight();\n        const viewportSize = this._viewportRuler.getViewportSize();\n\n        const topSpaceAvailable = this.triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable =\n            viewportSize.height - this.triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n        const panelHeightTop = Math.abs(this.offsetY);\n        const totalPanelHeight =\n            Math.min(this.getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this.triggerRect.height;\n\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this.adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        } else if (panelHeightTop > topSpaceAvailable) {\n            this.adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        } else {\n            this.transformOrigin = this.getOriginBasedOnOption();\n        }\n    }\n\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    private adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this.scrollTop -= distanceBelowViewport;\n        this.offsetY -= distanceBelowViewport;\n        this.transformOrigin = this.getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this.scrollTop <= 0) {\n            this.scrollTop = 0;\n            this.offsetY = 0;\n            this.transformOrigin = `50% bottom 0px`;\n        }\n    }\n\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    private adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number, maxScroll: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this.scrollTop += distanceAboveViewport;\n        this.offsetY += distanceAboveViewport;\n        this.transformOrigin = this.getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this.scrollTop >= maxScroll) {\n            this.scrollTop = maxScroll;\n            this.offsetY = 0;\n            this.transformOrigin = `50% top 0px`;\n\n            return;\n        }\n    }\n\n    /** Sets the transform origin point based on the selected option. */\n    private getOriginBasedOnOption(): string {\n        const itemHeight = this.getItemHeight();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const optionHeightAdjustment = (itemHeight - this.triggerRect.height) / 2;\n        /* tslint:disable-next-line:no-magic-numbers */\n        const originY = Math.abs(this.offsetY) - optionHeightAdjustment + itemHeight / 2;\n\n        return `50% ${originY}px 0px`;\n    }\n\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    private getItemCount(): number {\n        return this.options.length + this.optionGroups.length;\n    }\n\n    /** Calculates the height of the select's options. */\n    private getItemHeight(): number {\n        // todo доделать\n        /* tslint:disable-next-line:no-magic-numbers */\n        return 32;\n        // return this.triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n}\n","export enum TimeParts {\n    hours,\n    minutes,\n    seconds\n}\n\nexport enum TimeFormats {\n    HHmmss = 'HH:mm:ss',\n    HHmm = 'HH:mm'\n}\n\nexport const TIMEFORMAT_PLACEHOLDERS: { [timeFormat: string]: string } = {\n    [TimeFormats.HHmmss]: '  :  :  ',\n    [TimeFormats.HHmm]: '  :  '\n};\n\nexport const DEFAULT_TIME_FORMAT: TimeFormats = TimeFormats.HHmm;\n\nexport const HOURS_MINUTES_SECONDS_REGEXP =\n    new RegExp(/^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]|[0-9]):([0-5][0-9]|[0-9])?$/);\nexport const HOURS_MINUTES_REGEXP = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]|[0-9])?$/;\nexport const HOURS_ONLY_REGEXP = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):?$/;\n\nexport const SECONDS_PER_MINUTE: number = 59;\nexport const MINUTES_PER_HOUR: number = 59;\nexport const HOURS_PER_DAY: number = 23;\n\n// TODO Move it to common CDK\nexport const ARROW_UP_KEYCODE: string = 'ArrowUp';\nexport const ARROW_DOWN_KEYCODE: string = 'ArrowDown';\nexport const ARROW_LEFT_KEYCODE: string = 'ArrowLeft';\nexport const ARROW_RIGHT_KEYCODE: string = 'ArrowRight';\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    Input,\n    NgZone, OnDestroy,\n    OnInit,\n    Renderer2,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { coerceBooleanProperty, coerceCssPixelValue, coerceNumberProperty } from '@ptsecurity/cdk/coercion';\n\n\ninterface IArea {\n    area: McSplitterAreaDirective;\n    index: number;\n    order: number;\n    initialSize: number;\n}\n\ninterface IPoint {\n    x: number;\n    y: number;\n}\n\n\nconst enum AttributeProperty {\n    Disabled = 'disabled'\n}\n\nconst enum Cursor {\n    Default = 'default',\n    ResizeColumn = 'col-resize',\n    ResizeRow = 'row-resize'\n}\n\nconst enum StyleProperty {\n    Cursor = 'cursor',\n    Flex = 'flex',\n    FlexBasis = 'flex-basis',\n    FlexDirection = 'flex-direction',\n    Height = 'height',\n    MaxWidth = 'max-width',\n    MinHeight = 'min-height',\n    MinWidth = 'minWidth',\n    OffsetHeight = 'offsetHeight',\n    OffsetWidth = 'offsetWidth',\n    Order = 'order',\n    Width = 'width'\n}\n\nconst enum State {\n    Disabled = 'disabled',\n    Horizontal = 'horizontal',\n    Vertical = 'vertical'\n}\n\nexport const enum Direction {\n    Horizontal = 'horizontal',\n    Vertical = 'vertical'\n}\n\n@Component({\n    selector: 'mc-splitter',\n    preserveWhitespaces: false,\n    styleUrls: ['splitter.css'],\n    templateUrl: './splitter.component.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McSplitterComponent implements OnInit {\n    readonly areas: IArea[] = [];\n\n    private _direction: Direction;\n    private _disabled: boolean = false;\n    private _gutterSize: number = 6;\n\n    private isDragging: boolean = false;\n\n    private readonly areaPositionDivider: number = 2;\n    private readonly listeners: (() => void)[] = [];\n\n    @Input()\n    set direction(direction: Direction) {\n        this._direction = direction;\n    }\n\n    get direction(): Direction {\n        return this._direction;\n    }\n\n    @Input()\n    set disabled(disabled: boolean) {\n        this._disabled = coerceBooleanProperty(disabled);\n    }\n\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    @Input()\n    set gutterSize(gutterSize: number) {\n        const size = coerceNumberProperty(gutterSize);\n        this._gutterSize = size > 0 ? size : this.gutterSize;\n    }\n\n    get gutterSize(): number {\n        return this._gutterSize;\n    }\n\n    constructor(private elementRef: ElementRef,\n                private ngZone: NgZone,\n                private renderer: Renderer2) {}\n\n    addArea(area: McSplitterAreaDirective): void {\n        const index: number = this.areas.length;\n        const order: number = index * this.areaPositionDivider;\n        const size: number = area.getSize();\n\n        area.setOrder(order);\n\n        this.areas.push({\n            area,\n            index,\n            order,\n            initialSize: size\n        });\n    }\n\n    ngOnInit(): void {\n        if (!this.direction) {\n            this.direction = Direction.Horizontal;\n        }\n\n        this.setStyle(StyleProperty.FlexDirection, this.isVertical() ? 'column' : 'row');\n    }\n\n    onMouseDown(event: MouseEvent, leftAreaIndex: number, rightAreaIndex: number) {\n        if (this.disabled) {\n            return;\n        }\n\n        const leftArea = this.areas[leftAreaIndex];\n        const rightArea = this.areas[rightAreaIndex];\n\n        const startPoint: IPoint = {\n            x: event.screenX,\n            y: event.screenY\n        };\n\n        leftArea.initialSize = leftArea.area.getSize();\n        rightArea.initialSize = rightArea.area.getSize();\n\n        this.areas.forEach((item) => {\n            const size = item.area.getSize();\n            item.area.disableFlex();\n            item.area.setSize(size);\n        });\n\n        this.ngZone.runOutsideAngular(() => {\n            this.listeners.push(\n                this.renderer.listen(\n                    'document',\n                    'mouseup',\n                    () => this.onMouseUp()\n                )\n            );\n        });\n\n        this.ngZone.runOutsideAngular(() => {\n            this.listeners.push(\n                this.renderer.listen(\n                    'document',\n                    'mousemove',\n                    (e: MouseEvent) => this.onMouseMove(e, startPoint, leftArea, rightArea)\n                )\n            );\n        });\n\n        this.isDragging = true;\n    }\n\n    removeArea(area: McSplitterAreaDirective): void {\n        let indexToRemove: number = -1;\n\n        this.areas.some((item, index) => {\n            if (item.area === area) {\n                indexToRemove = index;\n\n                return true;\n            }\n\n            return false;\n        });\n\n        if (indexToRemove === -1) {\n            return;\n        }\n\n        this.areas.splice(indexToRemove, 1);\n    }\n\n    private isVertical(): boolean {\n        return this.direction === Direction.Vertical;\n    }\n\n    private onMouseMove(event: MouseEvent, startPoint: IPoint, leftArea: IArea, rightArea: IArea) {\n        if (!this.isDragging || this.disabled) {\n            return;\n        }\n\n        const endPoint: IPoint = {\n            x: event.screenX,\n            y: event.screenY\n        };\n\n        const offset = this.isVertical()\n            ? startPoint.y - endPoint.y\n            : startPoint.x - endPoint.x;\n\n        const newLeftAreaSize = leftArea.initialSize - offset;\n        const newRightAreaSize = rightArea.initialSize + offset;\n\n        const minLeftAreaSize = leftArea.area.getMinSize();\n        const minRightAreaSize = rightArea.area.getMinSize();\n\n        if (newLeftAreaSize <= minLeftAreaSize || newRightAreaSize <= minRightAreaSize) {\n            const rightAreaOffset = leftArea.initialSize - minLeftAreaSize;\n\n            leftArea.area.setSize(minLeftAreaSize);\n            rightArea.area.setSize(rightArea.initialSize + rightAreaOffset);\n        } else if (newLeftAreaSize <= 0) {\n            leftArea.area.setSize(0);\n            rightArea.area.setSize(rightArea.initialSize + leftArea.initialSize);\n        } else if (newRightAreaSize <= 0) {\n            leftArea.area.setSize(rightArea.initialSize + leftArea.initialSize);\n            rightArea.area.setSize(0);\n        } else {\n            leftArea.area.setSize(newLeftAreaSize);\n            rightArea.area.setSize(newRightAreaSize);\n        }\n    }\n\n    private onMouseUp() {\n        while (this.listeners.length > 0) {\n            const unsubscribe = this.listeners.pop();\n\n            if (unsubscribe) {\n                unsubscribe();\n            }\n        }\n\n        this.isDragging = false;\n    }\n\n    private setStyle(property: StyleProperty, value: string | number) {\n        this.renderer.setStyle(this.elementRef.nativeElement, property, value);\n    }\n}\n\n@Directive({\n    selector: 'mc-gutter'\n})\nexport class McGutterDirective implements OnInit {\n    private _direction: Direction = Direction.Vertical;\n    private _disabled: boolean = false;\n    private _order: number = 0;\n    private _size: number = 6;\n\n    @Input()\n    set direction(direction: Direction) {\n        this._direction = direction;\n    }\n\n    get direction(): Direction {\n        return this._direction;\n    }\n\n    @Input()\n    set disabled(disabled: boolean) {\n        this._disabled = coerceBooleanProperty(disabled);\n    }\n\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    @Input()\n    set order(order: number) {\n        this._order = coerceNumberProperty(order);\n    }\n\n    get order(): number {\n        return this._order;\n    }\n\n    @Input()\n    set size(size: number) {\n        this._size = coerceNumberProperty(size);\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    constructor(private renderer: Renderer2,\n                private elementRef: ElementRef) {\n    }\n\n    ngOnInit(): void {\n        this.setStyle(StyleProperty.Cursor, this.getCursor(this.getState()));\n        this.setStyle(StyleProperty.FlexBasis, coerceCssPixelValue(this.size));\n        this.setStyle(this.isVertical() ? StyleProperty.Height : StyleProperty.Width, coerceCssPixelValue(this.size));\n        this.setStyle(StyleProperty.Order, this.order);\n\n        if (!this.isVertical()) {\n            this.setStyle(StyleProperty.Height, '100%');\n        }\n\n        if (this.disabled) {\n            this.setAttr(AttributeProperty.Disabled, 'true');\n        }\n\n        // fix IE issue with gutter icon. flex-direction is requied for flex alignment options\n        this.setStyle(StyleProperty.FlexDirection, this.isVertical() ? 'row' : 'column');\n    }\n\n    private isVertical(): boolean {\n        return this.direction === Direction.Vertical;\n    }\n\n    private getCursor(state: State): string {\n        switch (state) {\n            case State.Disabled:\n                return Cursor.Default;\n            case State.Vertical:\n                return  Cursor.ResizeRow;\n            case State.Horizontal:\n                return Cursor.ResizeColumn;\n            default:\n                throw Error(`Unknown gutter state for cursor: ${state}`);\n        }\n    }\n\n    private getState(): State {\n        return this.disabled\n            ? State.Disabled\n            : this.direction === Direction.Vertical\n                ? State.Vertical\n                : State.Horizontal;\n    }\n\n    private setStyle(property: StyleProperty, value: string | number) {\n        this.renderer.setStyle(this.elementRef.nativeElement, property, value);\n    }\n\n    private setAttr(attribute: AttributeProperty, value: string) {\n        this.renderer.setAttribute(this.elementRef.nativeElement, attribute, value);\n    }\n}\n\n@Directive({\n    selector: 'mc-splitter-area'\n})\nexport class McSplitterAreaDirective implements OnInit, OnDestroy {\n    constructor(private elementRef: ElementRef,\n                private renderer: Renderer2,\n                private splitter: McSplitterComponent) {}\n\n    disableFlex(): void {\n        this.renderer.removeStyle(this.elementRef.nativeElement, 'flex');\n    }\n\n    ngOnInit(): void {\n        this.splitter.addArea(this);\n\n        this.removeStyle(StyleProperty.MaxWidth);\n        this.setStyle(StyleProperty.Flex, '1');\n\n        if (this.splitter.direction === Direction.Vertical) {\n            this.setStyle(StyleProperty.Width, '100%');\n            this.removeStyle(StyleProperty.Height);\n        } else {\n            this.setStyle(StyleProperty.Height, '100%');\n            this.removeStyle(StyleProperty.Width);\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.splitter.removeArea(this);\n    }\n\n    setOrder(order: number): void {\n        this.setStyle(StyleProperty.Order, order);\n    }\n\n    setSize(size: number): void {\n        const sz = coerceNumberProperty(size);\n        this.setStyle(this.getSizeProperty(), coerceCssPixelValue(sz));\n    }\n\n    getSize(): number {\n        return this.elementRef.nativeElement[this.getOffsetSizeProperty()];\n    }\n\n    getMinSize(): number {\n        const styles = getComputedStyle(this.elementRef.nativeElement);\n\n        return parseFloat(styles[this.getMinSizeProperty()]);\n    }\n\n    private isVertical(): boolean {\n        return this.splitter.direction === Direction.Vertical;\n    }\n\n    private getMinSizeProperty(): StyleProperty {\n        return this.isVertical()\n            ? StyleProperty.MinHeight\n            : StyleProperty.MinWidth;\n    }\n\n    private getOffsetSizeProperty(): StyleProperty {\n        return this.isVertical()\n            ? StyleProperty.OffsetHeight\n            : StyleProperty.OffsetWidth;\n    }\n\n    private getSizeProperty(): StyleProperty {\n        return this.isVertical()\n            ? StyleProperty.Height\n            : StyleProperty.Width;\n    }\n\n    private setStyle(style: StyleProperty, value: string | number) {\n        this.renderer.setStyle(this.elementRef.nativeElement, style, value);\n    }\n\n    private removeStyle(style: StyleProperty) {\n        this.renderer.removeStyle(this.elementRef.nativeElement, style);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McGutterDirective, McSplitterAreaDirective, McSplitterComponent } from './splitter.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        McIconModule\n    ],\n    exports: [\n        McGutterDirective,\n        McSplitterAreaDirective,\n        McSplitterComponent\n    ],\n    declarations: [\n        McGutterDirective,\n        McSplitterAreaDirective,\n        McSplitterComponent\n    ]\n})\nexport class McSplitterModule {\n}\n","import { animate, state, style, transition, trigger } from '@angular/animations';\nimport {\n    Attribute,\n    ChangeDetectionStrategy, ChangeDetectorRef,\n    Component,\n    ElementRef, EventEmitter, forwardRef,\n    Input, Output, ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport {\n    ThemePalette,\n    CanColor, CanColorCtor,\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex\n} from '@ptsecurity/mosaic/core';\n\n\nlet nextUniqueId = 0;\n\ntype ToggleLabelPositionType = 'left' | 'right';\n\nexport class McToggleBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McToggleMixinBase:\n    HasTabIndexCtor &\n    CanDisableCtor &\n    CanColorCtor &\n    typeof McToggleBase = mixinTabIndex(mixinColor(mixinDisabled(McToggleBase), ThemePalette.Primary));\n\nexport class McToggleChange {\n    source: McToggleComponent;\n    checked: boolean;\n}\n\n@Component({\n    selector: 'mc-toggle',\n    exportAs: 'mcToggle',\n    templateUrl: './toggle.component.html',\n    styleUrls: ['./toggle.css'],\n    providers: [\n        {provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => McToggleComponent), multi: true}\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color', 'tabIndex'],\n    host: {\n        class: 'mc-toggle',\n        '[id]': 'id',\n        '[attr.id]': 'id',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-toggle_off]': '!checked'\n    },\n    animations: [\n        trigger('switch', [\n            state('true' , style({ left: '50%' })),\n            state('false', style({ left: '1px' })),\n            transition('true <=> false', animate('150ms'))\n        ])\n    ]\n})\nexport class McToggleComponent extends _McToggleMixinBase\n    implements ControlValueAccessor, CanColor, CanDisable, HasTabIndex {\n\n    @ViewChild('input') _inputElement: ElementRef;\n\n    @Input() labelPosition: ToggleLabelPositionType = 'right';\n\n    @Input('aria-label') ariaLabel: string = '';\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n    private _uniqueId: string = `mc-toggle-${++nextUniqueId}`;\n\n    // tslint:disable:member-ordering\n    @Input() id: string = this._uniqueId;\n\n    get inputId(): string {\n        return `${this.id || this._uniqueId}-input`;\n    }\n\n    @Input() name: string | null = null;\n\n    @Input() value: string;\n\n    private _disabled: boolean = false;\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value !== this._disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _checked: boolean = false;\n\n    get checked() {\n        return this._checked;\n    }\n\n    @Input()\n    set checked(value: boolean) {\n        if (value !== this._checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    @Output() readonly change: EventEmitter<McToggleChange> =\n        new EventEmitter<McToggleChange>();\n\n    constructor(public _elementRef: ElementRef,\n                private _focusMonitor: FocusMonitor,\n                private _changeDetectorRef: ChangeDetectorRef,\n                @Attribute('tabindex') tabIndex: string\n    ) {\n        super(_elementRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n    }\n\n    _getAriaChecked(): boolean {\n        return this.checked;\n    }\n\n    _onInteractionEvent(event: Event) {\n        event.stopPropagation();\n    }\n\n    _onLabelTextChange() {\n        this._changeDetectorRef.markForCheck();\n    }\n\n    _onInputClick(event: MouseEvent) {\n        event.stopPropagation();\n        this._updateModelValue();\n        this._emitChangeEvent();\n    }\n\n    writeValue(value: any) {\n        this.checked = !!value;\n    }\n\n    registerOnChange(fn: any) {\n        this._onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: any) {\n        this._onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n    }\n\n    // tslint:disable-next-line:no-empty\n    private _onTouchedCallback = () => {};\n\n    // tslint:disable-next-line:no-empty\n    private _onChangeCallback = (_: any) => {};\n\n    private _updateModelValue() {\n        this._checked = !this.checked;\n        this._onChangeCallback(this.checked);\n        this._onTouchedCallback();\n    }\n\n    private _emitChangeEvent() {\n        const event = new McToggleChange();\n        event.source = this;\n        event.checked = this.checked;\n\n        this._onChangeCallback(this.checked);\n        this.change.emit(event);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McToggleComponent } from './toggle.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule],\n    exports: [McToggleComponent],\n    declarations: [McToggleComponent]\n})\nexport class McToggleModule {\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    TemplateRef,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport {\n    ConnectedOverlayPositionChange,\n    ConnectionPositionPair,\n    Overlay,\n    OverlayRef,\n    ScrollDispatcher,\n    IScrollStrategy,\n    FlexibleConnectedPositionStrategy,\n    IOverlayConnectionPosition,\n    IOriginConnectionPosition,\n    HorizontalConnectionPos,\n    VerticalConnectionPos\n} from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal } from '@ptsecurity/cdk/portal';\nimport {\n    fadeAnimation,\n    DEFAULT_4_POSITIONS,\n    POSITION_MAP\n} from '@ptsecurity/mosaic/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators';\n\n\n@Component({\n    selector: 'mc-tooltip-component',\n    inputs: [\n        'mcMouseEnterDelay',\n        'mcMouseLeaveDelay',\n        'mcTitle',\n        'mcVisible',\n        'mcTrigger',\n        'mcPlacement'\n    ],\n    outputs: ['mcVisibleChange'],\n    animations: [ fadeAnimation ],\n    templateUrl: './tooltip.component.html',\n    preserveWhitespaces: false,\n    styleUrls: ['./tooltip.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '(body:click)': 'this.handleBodyInteraction()'\n    }\n})\nexport class McTooltipComponent {\n    prefix = 'mc-tooltip_placement';\n    positions: ConnectionPositionPair[] = [ ...DEFAULT_4_POSITIONS ];\n    classMap = {};\n    isTitleString: boolean;\n    showTid: number;\n    hideTid: number;\n    availablePositions: any;\n    $visible: Observable<boolean>;\n\n    @Output() mcVisibleChange: EventEmitter<boolean> = new EventEmitter();\n\n    @Input() mcMouseEnterDelay = 400;\n\n    @Input() mcMouseLeaveDelay = 0;\n\n    @Input()\n    get mcTitle(): string | TemplateRef<void> {\n        return this._mcTitle;\n    }\n    set mcTitle(value: string | TemplateRef<void>) {\n        this.isTitleString = !(value instanceof TemplateRef);\n\n        if (this.isTitleString) {\n            this._mcTitle = value;\n        }\n    }\n    private _mcTitle: string | TemplateRef<void>;\n\n    @Input()\n    get mcTrigger(): string {\n        return this._mcTrigger;\n    }\n    set mcTrigger(value: string) {\n        this._mcTrigger = value;\n    }\n    private _mcTrigger: string = 'hover';\n\n    @Input()\n    get mcPlacement(): string {\n        return this._mcPlacement;\n    }\n    set mcPlacement(value: string) {\n        if (value !== this._mcPlacement) {\n            this._mcPlacement = value;\n            this.positions.unshift(POSITION_MAP[ this.mcPlacement ]);\n        } else if (!value) {\n            this._mcPlacement = 'top';\n        }\n    }\n    private _mcPlacement: string = 'top';\n\n    @Input()\n    get mcVisible(): boolean {\n        return this._mcVisible.value;\n    }\n    set mcVisible(value: boolean) {\n        const visible = coerceBooleanProperty(value);\n\n        if (this._mcVisible.value !== visible) {\n            this._mcVisible.next(visible);\n            this.mcVisibleChange.emit(visible);\n        }\n    }\n    private _mcVisible: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n    /** Subject for notifying that the tooltip has been hidden from the view */\n    private readonly onHideSubject: Subject<any> = new Subject();\n    private closeOnInteraction: boolean = false;\n\n    constructor(public cdr: ChangeDetectorRef) {\n        this.availablePositions = POSITION_MAP;\n        this.$visible = this._mcVisible.asObservable();\n    }\n\n    show(): void {\n        if (this.hideTid) {\n            clearTimeout(this.hideTid);\n        }\n\n        if (!this.isContentEmpty()) {\n            if (this.mcTrigger !== 'manual') {\n                this.closeOnInteraction = true;\n            }\n            this.showTid = setTimeout(() => {\n                this.mcVisible = true;\n                this.mcVisibleChange.emit(true);\n\n                // Mark for check so if any parent component has set the\n                // ChangeDetectionStrategy to OnPush it will be checked anyways\n                this.markForCheck();\n            }, this.mcMouseEnterDelay);\n        }\n    }\n\n    hide(): void {\n        if (this.showTid) {\n            clearTimeout(this.showTid);\n        }\n\n        this.hideTid = setTimeout(() => {\n            this.mcVisible = false;\n            this.mcVisibleChange.emit(false);\n            this.onHideSubject.next();\n\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this.markForCheck();\n        }, this.mcMouseLeaveDelay);\n    }\n\n    setClassMap(): void {\n        this.classMap = `${this.prefix}-${this.mcPlacement}`;\n    }\n\n    isContentEmpty(): boolean {\n        return this.isTitleString ? (this.mcTitle === '' || !this.mcTitle) : false;\n    }\n\n    /** Returns an observable that notifies when the tooltip has been hidden from view. */\n    afterHidden(): Observable<void> {\n        return this.onHideSubject.asObservable();\n    }\n\n    markForCheck(): void {\n        this.cdr.markForCheck();\n    }\n\n    handleBodyInteraction(): void {\n        if (this.closeOnInteraction) {\n            this.hide();\n        }\n    }\n}\n\nexport const MC_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function mcTooltipScrollStrategyFactory(overlay: Overlay): () => IScrollStrategy {\n    return () => overlay.scrollStrategies.reposition({scrollThrottle: 20});\n}\n\n/** @docs-private */\nexport const MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_TOOLTIP_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: mcTooltipScrollStrategyFactory\n};\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMcTooltipInvalidPositionError(position: string) {\n    return Error(`McTooltip position \"${position}\" is invalid.`);\n}\n\nconst VIEWPORT_MARGIN: number = 8;\n\n@Directive({\n    selector: '[mcTooltip], [attribute^=\"mcTooltip\"]',\n    exportAs: 'mcTooltip',\n    host: {\n        '(keydown)': 'handleKeydown($event)',\n        '(touchend)': 'handleTouchend()'\n    }\n})\nexport class McTooltip implements OnInit, OnDestroy {\n    isTooltipOpen: boolean = false;\n    isDynamicTooltip = false;\n    parentDisabled: boolean = false;\n    overlayRef: OverlayRef | null;\n    portal: ComponentPortal<McTooltipComponent>;\n    availablePositions: any;\n    tooltip: McTooltipComponent | null;\n\n    @Output() mcVisibleChange = new EventEmitter<boolean>();\n    private $unsubscribe = new Subject<void>();\n\n    @Input('mcTooltip')\n    get mcTitle(): string {\n        return this._mcTitle;\n    }\n    set mcTitle(title: string) {\n        this._mcTitle = title;\n        this.updateCompValue('mcTitle', title);\n    }\n    private _mcTitle: string;\n\n    @Input('mcTitle')\n    set setTitle(title: string) {\n        this.mcTitle = title;\n    }\n\n    @Input('mcTooltipDisabled')\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this.updateCompValue('mcTooltipDisabled', value);\n    }\n    private _disabled: boolean = false;\n\n    @Input('mcMouseEnterDelay')\n    get mcMouseEnterDelay(): number {\n        return this._mcMouseEnterDelay;\n    }\n    set mcMouseEnterDelay(value: number) {\n        this._mcMouseEnterDelay = value;\n        this.updateCompValue('mcMouseEnterDelay', value);\n    }\n    private _mcMouseEnterDelay: number;\n\n    @Input('mcMouseLeaveDelay')\n    get mcMouseLeaveDelay(): number {\n        return this._mcMouseLeaveDelay;\n    }\n    set mcMouseLeaveDelay(value: number) {\n        this._mcMouseLeaveDelay = value;\n        this.updateCompValue('mcMouseLeaveDelay', value);\n    }\n    private _mcMouseLeaveDelay: number;\n\n    @Input('mcTrigger')\n    get mcTrigger(): string {\n        return this._mcTrigger;\n    }\n    set mcTrigger(value: string) {\n        if (value) {\n            this._mcTrigger = value;\n            this.updateCompValue('mcTrigger', value);\n        } else {\n            this._mcTrigger = 'hover';\n        }\n    }\n    private _mcTrigger: string = 'hover';\n\n    @Input('mcPlacement')\n    get mcPlacement(): string {\n        return this._mcPlacement;\n    }\n    set mcPlacement(value: string) {\n        if (value) {\n            this._mcPlacement = value;\n            this.updateCompValue('mcPlacement', value);\n        } else {\n            this._mcPlacement = 'top';\n        }\n    }\n    private _mcPlacement: string = 'top';\n\n    @Input('mcTooltipClass')\n    get mcTooltipClass() { return this._mcTooltipClass; }\n    set mсTooltipClass(value: string | string[] | Set<string> | {[key: string]: any}) {\n        this._mcTooltipClass = value;\n\n        if (this.tooltip) {\n            this.tooltip.setClassMap();\n        }\n    }\n    private _mcTooltipClass: string | string[] | Set<string> | {[key: string]: any};\n\n    @Input('mcVisible')\n    get mcVisible(): boolean {\n        return this._mcVisible;\n    }\n    set mcVisible(externalValue: boolean) {\n        const value = coerceBooleanProperty(externalValue);\n        this._mcVisible = value;\n        this.updateCompValue('mcVisible', value);\n\n        if (value) {\n            this.show();\n        } else {\n            this.hide();\n        }\n    }\n    private _mcVisible: boolean;\n\n    @HostBinding('class.mc-tooltip-open')\n    get isOpen(): boolean {\n        return this.isTooltipOpen;\n    }\n\n    @HostBinding('class.disabled')\n    get isParentDisabled(): boolean {\n        return this.parentDisabled;\n    }\n\n    private manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n    private readonly destroyed = new Subject<void>();\n\n    constructor(\n        private overlay: Overlay,\n        private elementRef: ElementRef,\n        private ngZone: NgZone,\n        private scrollDispatcher: ScrollDispatcher,\n        private hostView: ViewContainerRef,\n        @Inject(MC_TOOLTIP_SCROLL_STRATEGY) private scrollStrategy,\n        @Optional() private direction: Directionality) {\n            this.availablePositions = POSITION_MAP;\n        }\n\n    /** Create the overlay config and position strategy */\n    createOverlay(): OverlayRef {\n        if (this.overlayRef) {\n            return this.overlayRef;\n        }\n\n        // Create connected position strategy that listens for scroll events to reposition.\n        const strategy = this.overlay.position()\n            .flexibleConnectedTo(this.elementRef)\n            .withTransformOriginOn('.mc-tooltip')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(VIEWPORT_MARGIN)\n            .withPositions([ ...DEFAULT_4_POSITIONS ]);\n\n        const scrollableAncestors = this.scrollDispatcher\n            .getAncestorScrollContainers(this.elementRef);\n\n        strategy.withScrollableContainers(scrollableAncestors);\n\n        strategy.positionChanges.pipe(takeUntil(this.destroyed)).subscribe((change) => {\n            if (this.tooltip) {\n                this.onPositionChange(change);\n                if (change.scrollableViewProperties.isOverlayClipped && this.tooltip.mcVisible) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the tooltip.\n                    this.ngZone.run(() => this.hide());\n                }\n            }\n        });\n\n        this.overlayRef = this.overlay.create({\n            direction: this.direction,\n            positionStrategy: strategy,\n            panelClass: 'mc-tooltip-panel',\n            scrollStrategy: this.scrollStrategy()\n        });\n\n        this.updatePosition();\n\n        this.overlayRef.detachments()\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(() => this.detach());\n\n        return this.overlayRef;\n    }\n\n    detach() {\n        if (this.overlayRef && this.overlayRef.hasAttached()) {\n            this.overlayRef.detach();\n        }\n\n        this.tooltip = null;\n    }\n\n    onPositionChange($event: ConnectedOverlayPositionChange): void {\n        let updatedPlacement = this.mcPlacement;\n        Object.keys(this.availablePositions).some((key) => {\n            if ($event.connectionPair.originX === this.availablePositions[key].originX &&\n                $event.connectionPair.originY === this.availablePositions[key].originY &&\n                $event.connectionPair.overlayX === this.availablePositions[key].overlayX &&\n                $event.connectionPair.overlayY === this.availablePositions[key].overlayY) {\n                updatedPlacement = key;\n\n                return true;\n            }\n\n            return false;\n        });\n        this.updateCompValue('mcPlacement', updatedPlacement);\n\n        if (this.tooltip) {\n            this.tooltip.setClassMap();\n            this.tooltip.markForCheck();\n        }\n\n        this.handlePositioningUpdate();\n    }\n\n    handlePositioningUpdate() {\n        if (!this.overlayRef) {\n            this.overlayRef = this.createOverlay();\n        }\n        if (this.mcPlacement === 'right' || this.mcPlacement === 'left') {\n            const pos =\n                (this.overlayRef.overlayElement.clientHeight -\n                    this.hostView.element.nativeElement.clientHeight) / 2; // tslint:disable-line\n            const currentContainer = this.overlayRef.overlayElement.style.top || '0px';\n            this.overlayRef.overlayElement.style.top =\n                `${parseInt(currentContainer.split('px')[0], 10) + pos - 1}px`;\n            // TODO: обновлять положение стрелки\\указателя\\\"дятла\"\n        }\n    }\n\n    // tslint:disable-next-line:no-any\n    updateCompValue(key: string, value: any): void {\n        if (this.isDynamicTooltip && value) {\n            if (this.tooltip) {\n                this.tooltip[key] = value;\n            }\n        }\n    }\n\n    ngOnInit(): void {\n        this.initElementRefListeners();\n    }\n\n    ngOnDestroy(): void {\n        if (this.overlayRef) {\n            this.overlayRef.dispose();\n        }\n        this.manualListeners.forEach((listener, event) =>\n            this.elementRef.nativeElement.removeEventListener(event, listener));\n        this.manualListeners.clear();\n\n        this.$unsubscribe.next();\n        this.$unsubscribe.complete();\n    }\n\n    handleKeydown(e: KeyboardEvent) {\n        if (this.isTooltipOpen && e.keyCode === ESCAPE) { // tslint:disable-line\n            this.hide();\n        }\n    }\n\n    handleTouchend() {\n        this.hide();\n    }\n\n    initElementRefListeners() {\n        if (this.mcTrigger === 'hover') {\n\n            this.manualListeners\n                .set('mouseenter', () => this.show())\n                .set('mouseleave', () => this.hide())\n                .forEach((listener, event) => this.elementRef.nativeElement.addEventListener(event, listener));\n        }\n\n        if (this.mcTrigger === 'focus') {\n\n            this.manualListeners\n                .set('focus', () => this.show())\n                .set('blur', () => this.hide())\n                .forEach((listener, event) => this.elementRef.nativeElement.addEventListener(event, listener));\n        }\n    }\n\n    show(): void {\n        if (!this.disabled) {\n            if (!this.tooltip) {\n                const overlayRef = this.createOverlay();\n                this.detach();\n\n                this.portal = this.portal || new ComponentPortal(McTooltipComponent, this.hostView);\n\n                this.tooltip = overlayRef.attach(this.portal).instance;\n                this.tooltip.afterHidden()\n                    .pipe(takeUntil(this.destroyed))\n                    .subscribe(() => this.detach());\n                this.isDynamicTooltip = true;\n                const properties = [\n                    'mcTitle',\n                    'mcPlacement',\n                    'mcTrigger',\n                    'mcTooltipDisabled',\n                    'mcMouseEnterDelay',\n                    'mcMouseLeaveDelay',\n                    'mсTooltipClass',\n                    'mcVisible'\n                ];\n                properties.forEach((property) => this.updateCompValue(property, this[ property ]));\n                this.tooltip.mcVisibleChange.pipe(takeUntil(this.$unsubscribe), distinctUntilChanged())\n                    .subscribe((data) => {\n                        this.mcVisible = data;\n                        this.mcVisibleChange.emit(data);\n                        this.isTooltipOpen = data;\n                    });\n            }\n            this.updatePosition();\n            this.tooltip.show();\n        }\n    }\n\n    hide(): void {\n        if (this.tooltip) {\n            this.tooltip.hide();\n        }\n    }\n\n    /** Updates the position of the current tooltip. */\n    updatePosition() {\n        if (!this.overlayRef) {\n            this.overlayRef = this.createOverlay();\n        }\n        const position =\n            this.overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n        const origin = this.getOrigin();\n        const overlay = this.getOverlayPosition();\n\n        position.withPositions([\n            {...origin.main, ...overlay.main},\n            {...origin.fallback, ...overlay.fallback}\n        ]);\n    }\n\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    getOrigin(): {main: IOriginConnectionPosition; fallback: IOriginConnectionPosition} {\n        const position = this.mcPlacement;\n        const isLtr = !this.direction || this.direction.value === 'ltr';\n        let originPosition: IOriginConnectionPosition;\n\n        if (position === 'top' || position === 'bottom') {\n            originPosition = {originX: 'center', originY: position === 'top' ? 'top' : 'bottom'};\n        } else if (\n            position === 'top' ||\n            (position === 'left' && isLtr) ||\n            (position === 'right' && !isLtr)) {\n            originPosition = {originX: 'start', originY: 'center'};\n        } else if (\n            position === 'bottom' ||\n            (position === 'right' && isLtr) ||\n            (position === 'left' && !isLtr)) {\n            originPosition = {originX: 'end', originY: 'center'};\n        } else {\n            throw getMcTooltipInvalidPositionError(position);\n        }\n\n        const {x, y} = this.invertPosition(originPosition.originX, originPosition.originY);\n\n        return {\n            main: originPosition,\n            fallback: {originX: x, originY: y}\n        };\n    }\n\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    getOverlayPosition(): {main: IOverlayConnectionPosition; fallback: IOverlayConnectionPosition} {\n        const position = this.mcPlacement;\n        const isLtr = !this.direction || this.direction.value === 'ltr';\n        let overlayPosition: IOverlayConnectionPosition;\n\n        if (position === 'top') {\n            overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n        } else if (position === 'bottom') {\n            overlayPosition = {overlayX: 'center', overlayY: 'top'};\n        } else if (\n            position === 'top' ||\n            (position === 'left' && isLtr) ||\n            (position === 'right' && !isLtr)) {\n            overlayPosition = {overlayX: 'end', overlayY: 'center'};\n        } else if (\n            position === 'bottom' ||\n            (position === 'right' && isLtr) ||\n            (position === 'left' && !isLtr)) {\n            overlayPosition = {overlayX: 'start', overlayY: 'center'};\n        } else {\n            throw getMcTooltipInvalidPositionError(position);\n        }\n\n        const {x, y} = this.invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n        return {\n            main: overlayPosition,\n            fallback: {overlayX: x, overlayY: y}\n        };\n    }\n\n    /** Inverts an overlay position. */\n    private invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n        let newX: HorizontalConnectionPos = x;\n        let newY: VerticalConnectionPos = y;\n        if (this.mcPlacement === 'top' || this.mcPlacement === 'bottom') {\n            if (y === 'top') {\n                newY = 'bottom';\n            } else if (y === 'bottom') {\n                newY = 'top';\n            }\n        } else {\n            if (x === 'end') {\n                newX = 'start';\n            } else if (x === 'start') {\n                newX = 'end';\n            }\n        }\n\n        return {x: newX, y: newY};\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\n\nimport {\n    McTooltipComponent,\n    McTooltip,\n    MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './tooltip.component';\n\n\n@NgModule({\n    declarations: [McTooltipComponent, McTooltip],\n    exports: [McTooltipComponent, McTooltip],\n    imports: [CommonModule, OverlayModule],\n    providers: [MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],\n    entryComponents: [McTooltipComponent]\n})\nexport class McToolTipModule {\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Input,\n    ViewEncapsulation,\n    Directive,\n    ElementRef,\n    OnDestroy,\n    Optional,\n    Self\n} from '@angular/core';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { CanDisable, mixinDisabled, CanDisableCtor } from '@ptsecurity/mosaic/core';\nimport { McDropdownTrigger } from '@ptsecurity/mosaic/dropdown';\n\n\n@Directive({\n    selector: 'mc-vertical-navbar-item-icon',\n    host: {\n        class: 'mc-vertical-navbar__item-icon'\n    }\n})\nexport class McVerticalNavbarItemIcon {}\n\n\n@Component({\n    selector: 'mc-vertical-navbar-badge',\n    template: `\n        <span class=\"mc-badge mc-badge_light\">\n            <ng-content></ng-content>\n        </span>\n    `,\n    host: {\n        class: 'mc-vertical-navbar__badge'\n    }\n})\nexport class McVerticalNavbarItemBadge {}\n\n\nclass McVerticalNavbarItemBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McVerticalNavbarMixinBase: CanDisableCtor & typeof McVerticalNavbarItemBase\n    = mixinDisabled(McVerticalNavbarItemBase);\n\n\n@Component({\n    selector: 'a[mc-vertical-navbar-item], mc-vertical-navbar-item',\n    templateUrl: './vertical-navbar-item.component.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    styleUrls: ['./vertical-navbar-item.component.css'],\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': 'disabled ? -1 : 0'\n    }\n})\nexport class McVerticalNavbarItem extends _McVerticalNavbarMixinBase implements CanDisable, OnDestroy {\n    @Input() tabIndex: number = 0;\n\n    constructor(\n        private element: ElementRef,\n        private focusMonitor: FocusMonitor,\n        @Optional() @Self() private trigger: McDropdownTrigger\n    ) {\n        super(element);\n\n        this.focusMonitor.monitor(this.element.nativeElement).subscribe();\n    }\n\n    get hasDropdownAttached() {\n        return !! this.trigger;\n    }\n\n    ngOnDestroy() {\n        this.focusMonitor.stopMonitoring(this.element.nativeElement);\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ViewEncapsulation,\n    Input,\n    ChangeDetectorRef\n} from '@angular/core';\n\nimport { toggleVerticalNavbarAnimation } from './vertical-navbar.animation';\n\n\n@Directive({\n    selector: 'mc-vertical-navbar-header, a[mc-vertical-navbar-header]',\n    host: {\n        class: 'mc-vertical-navbar__header'\n    }\n})\nexport class McVerticalNavbarHeader {}\n\n@Directive({\n    selector: 'mc-vertical-navbar-title',\n    host: {\n        class: 'mc-vertical-navbar__title'\n    }\n})\nexport class McVerticalNavbarTitle {}\n\n@Component({\n    selector: 'mc-vertical-navbar',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    templateUrl: './vertical-navbar.component.html',\n    styleUrls: ['./vertical-navbar.component.css'],\n    encapsulation: ViewEncapsulation.None,\n    animations: [\n        toggleVerticalNavbarAnimation()\n    ]\n})\nexport class McVerticalNavbar {\n\n    @Input() expanded: boolean = false;\n\n    constructor(\n        private cd: ChangeDetectorRef\n    ) {}\n\n    toggle() {\n        this.expanded = !this.expanded;\n        this.cd.markForCheck();\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport {\n    McVerticalNavbarItem,\n    McVerticalNavbarItemBadge,\n    McVerticalNavbarItemIcon\n} from './vertical-navbar-item.component';\nimport { McVerticalNavbar, McVerticalNavbarHeader, McVerticalNavbarTitle } from './vertical-navbar.component';\n\n\nconst COMPONENTS = [\n    McVerticalNavbar,\n    McVerticalNavbarTitle,\n    McVerticalNavbarItem,\n    McVerticalNavbarItemIcon,\n    McVerticalNavbarItemBadge,\n    McVerticalNavbarHeader\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        McIconModule\n    ],\n    exports: COMPONENTS,\n    declarations: COMPONENTS\n})\nexport class McVerticalNavbarModule {}\n","import { Version } from '@angular/core';\n\n\nexport const VERSION = new Version('1.0.0-beta.6-f69c381');\n","export const selectEvents = 'selectEvents';\n","import { InjectionToken } from '@angular/core';\nimport { IScrollStrategy, Overlay, RepositionScrollStrategy } from '@ptsecurity/cdk/overlay';\n\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 224;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 1;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\n/* tslint:disable-next-line:no-magic-numbers */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MC_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-select-scroll-strategy');\n\n/** @docs-private */\nexport function mcSelectScrollStrategyProviderFactory(overlay: Overlay):\n    () => RepositionScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MC_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MC_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: mcSelectScrollStrategyProviderFactory\n};\n","import { DOCUMENT } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    forwardRef,\n    Host,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    Optional,\n    ViewContainerRef\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW } from '@ptsecurity/cdk/keycodes';\nimport {\n    FlexibleConnectedPositionStrategy,\n    Overlay,\n    OverlayConfig,\n    OverlayRef,\n    IPositionStrategy,\n    IScrollStrategy, IConnectedPosition\n} from '@ptsecurity/cdk/overlay';\nimport { TemplatePortal } from '@ptsecurity/cdk/portal';\nimport { ViewportRuler } from '@ptsecurity/cdk/scrolling';\nimport {\n    countGroupLabelsBeforeOption,\n    getOptionScrollPosition,\n    McOption,\n    McOptionSelectionChange\n} from '@ptsecurity/mosaic/core';\nimport { McFormField } from '@ptsecurity/mosaic/form-field';\nimport { Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable } from 'rxjs';\nimport { filter, take, switchMap, delay, tap, map } from 'rxjs/operators';\n\nimport { McAutocompleteOrigin } from './autocomplete-origin.directive';\nimport { McAutocomplete } from './autocomplete.component';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 32;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\nexport const AUTOCOMPLETE_BORDER_WIDTH: number = 2;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MC_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-autocomplete-scroll-strategy');\n\n// tslint:disable-next-line naming-convention\nexport function MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => IScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\nexport const MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McAutocompleteTrigger),\n    multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMcAutocompleteMissingPanelError(): Error {\n    return Error('Attempting to open an undefined instance of `mc-autocomplete`. ' +\n        'Make sure that the id passed to the `mcAutocomplete` is correct and that ' +\n        'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n    selector: `input[mcAutocomplete], textarea[mcAutocomplete]`,\n    host: {\n        class: 'mc-autocomplete-trigger',\n        '[attr.autocomplete]': 'autocompleteAttribute',\n        // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n        // a little earlier. This avoids issues where IE delays the focusing of the input.\n        '(focusin)': 'handleFocus()',\n        '(blur)': 'onTouched()',\n        '(input)': 'handleInput($event)',\n        '(keydown)': 'handleKeydown($event)',\n        '(click)': 'handleClick($event)'\n    },\n    exportAs: 'mcAutocompleteTrigger',\n    providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class McAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n    // @ts-ignore\n    readonly optionSelections: Observable<McOptionSelectionChange> = defer(() => {\n        if (this.autocomplete && this.autocomplete.options) {\n            return merge(...this.autocomplete.options.map((option) => option.onSelectionChange));\n        }\n\n        // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n        // Return a stream that we'll replace with the real one once everything is in place.\n        return this.zone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelections));\n    });\n\n    /** The currently active option, coerced to MatOption type. */\n    get activeOption(): McOption | null {\n        if (this.autocomplete && this.autocomplete.keyManager) {\n            return this.autocomplete.keyManager.activeItem;\n        }\n\n        return null;\n    }\n\n    get panelOpen(): boolean {\n        return this.overlayAttached && this.autocomplete.showPanel;\n    }\n\n    /** The autocomplete panel to be attached to this trigger. */\n    @Input('mcAutocomplete') autocomplete: McAutocomplete;\n\n    /**\n     * Reference relative to which to position the autocomplete panel.\n     * Defaults to the autocomplete trigger element.\n     */\n    @Input('mcAutocompleteConnectedTo') connectedTo: McAutocompleteOrigin;\n\n    /**\n     * `autocomplete` attribute to be set on the input element.\n     * @docs-private\n     */\n    @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     */\n    @Input('mcAutocompleteDisabled')\n    get autocompleteDisabled(): boolean {\n        return this._autocompleteDisabled;\n    }\n\n    set autocompleteDisabled(value: boolean) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n\n    private _autocompleteDisabled = false;\n\n    private overlayAttached: boolean = false;\n\n    private overlayRef: OverlayRef | null;\n\n    private portal: TemplatePortal;\n\n    private componentDestroyed = false;\n\n    private scrollStrategy: () => IScrollStrategy;\n\n    /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n    private previousValue: string | number | null;\n\n    /** Strategy that is used to position the panel. */\n    private positionStrategy: FlexibleConnectedPositionStrategy;\n\n    /** The subscription for closing actions (some are bound to document). */\n    private closingActionsSubscription: Subscription;\n\n    /** Subscription to viewport size changes. */\n    private viewportSubscription = Subscription.EMPTY;\n\n    /**\n     * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n     * closed autocomplete from being reopened if the user switches to another browser tab and then\n     * comes back.\n     */\n    private canOpenOnNextFocus = true;\n\n    /** Stream of keyboard events that can close the panel. */\n    private readonly closeKeyEventStream = new Subject<void>();\n\n    constructor(\n        private elementRef: ElementRef<HTMLInputElement>,\n        private viewContainerRef: ViewContainerRef,\n        private changeDetectorRef: ChangeDetectorRef,\n        private overlay: Overlay,\n        private zone: NgZone,\n        @Inject(MC_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n        @Optional() private dir: Directionality,\n        @Optional() @Host() private formField: McFormField,\n        @Optional() @Inject(DOCUMENT) private document: any,\n        // @breaking-change 8.0.0 Make `_viewportRuler` required.\n        private viewportRuler?: ViewportRuler\n    ) {\n        // tslint:disable-next-line no-typeof-undefined\n        if (typeof window !== 'undefined') {\n            zone.runOutsideAngular(() => {\n                window.addEventListener('blur', this.windowBlurHandler);\n            });\n        }\n\n        this.scrollStrategy = scrollStrategy;\n    }\n\n    ngOnDestroy() {\n        // tslint:disable-next-line no-typeof-undefined\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this.windowBlurHandler);\n        }\n\n        this.viewportSubscription.unsubscribe();\n        this.componentDestroyed = true;\n        this.destroyPanel();\n        this.closeKeyEventStream.complete();\n    }\n\n    /** `View -> model callback called when value changes` */\n    // tslint:disable-next-line no-empty\n    onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when autocomplete has been touched` */\n    // tslint:disable-next-line no-empty\n    onTouched: () => void = () => {};\n\n    /** Opens the autocomplete suggestion panel. */\n    openPanel(): void {\n        this.attachOverlay();\n    }\n\n    closePanel(): void {\n        if (!this.overlayAttached) { return; }\n\n        if (this.panelOpen) {\n            this.autocomplete.closed.emit();\n        }\n\n        this.autocomplete.isOpen = this.overlayAttached = false;\n\n        if (this.overlayRef && this.overlayRef.hasAttached()) {\n            this.overlayRef.detach();\n            this.closingActionsSubscription.unsubscribe();\n        }\n\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this.componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this.changeDetectorRef.detectChanges();\n        }\n    }\n\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n    updatePosition(): void {\n        if (this.overlayAttached) {\n            this.overlayRef!.updatePosition();\n        }\n    }\n\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    get panelClosingActions(): Observable<McOptionSelectionChange | null> {\n        return merge(\n            this.optionSelections,\n            this.autocomplete.keyManager.tabOut.pipe(filter(() => this.overlayAttached)),\n            this.closeKeyEventStream,\n            this.getOutsideClickStream(),\n            this.overlayRef ?\n                this.overlayRef.detachments().pipe(filter(() => this.overlayAttached)) :\n                observableOf()\n        ).pipe(\n            // Normalize the output so we return a consistent type.\n            map((event) => event instanceof McOptionSelectionChange ? event : null)\n        );\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any): void {\n        Promise.resolve(null).then(() => this.setTriggerValue(value));\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => {}): void {\n        this.onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => {}) {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.elementRef.nativeElement.disabled = isDisabled;\n    }\n\n    handleKeydown(event: KeyboardEvent): void {\n        // tslint:disable-next-line deprecation\n        const keyCode = event.keyCode;\n\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE) {\n            event.preventDefault();\n        }\n\n        if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n            this.activeOption.selectViaInteraction();\n            this.resetActiveItem();\n            event.preventDefault();\n        } else if (this.autocomplete) {\n            const prevActiveItem = this.autocomplete.keyManager.activeItem;\n\n            if (this.panelOpen || keyCode === TAB) {\n                this.autocomplete.onKeydown(event);\n            } else if (keyCode === DOWN_ARROW && this.canOpen()) {\n                this.openPanel();\n            }\n\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n            if (isArrowKey || this.autocomplete.keyManager.activeItem !== prevActiveItem) {\n                this.scrollToOption();\n            }\n        }\n    }\n\n    handleInput(event: KeyboardEvent): void {\n        const target = event.target as HTMLInputElement;\n        let value: number | string | null = target.value;\n\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value === '' ? null : parseFloat(value);\n        }\n\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this.previousValue !== value) {\n            this.previousValue = value;\n            this.onChange(value);\n\n            if (this.canOpen() && this.document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n\n    handleFocus(): void {\n        if (!this.canOpenOnNextFocus) {\n            this.canOpenOnNextFocus = true;\n        } else if (this.canOpen()) {\n            this.previousValue = this.elementRef.nativeElement.value;\n            this.attachOverlay();\n        }\n    }\n\n    handleClick($event: MouseEvent) {\n        if (this.canOpen() && this.document.activeElement === $event.target) {\n            this.openPanel();\n        }\n    }\n\n    /** Stream of clicks outside of the autocomplete panel. */\n    private getOutsideClickStream(): Observable<any> {\n        if (!this.document) { return observableOf(null); }\n\n        return fromEvent<MouseEvent>(this.document, 'click')\n            .pipe(filter((event) => {\n                const clickTarget = event.target as HTMLElement;\n                const formField = this.formField ?\n                    this.formField._elementRef.nativeElement : null;\n\n                return this.overlayAttached &&\n                    clickTarget !== this.elementRef.nativeElement &&\n                    (!formField || !formField.contains(clickTarget)) &&\n                    (!!this.overlayRef && !this.overlayRef.overlayElement.contains(clickTarget));\n            }));\n    }\n\n    /**\n     * Event handler for when the window is blurred. Needs to be an\n     * arrow function in order to preserve the context.\n     */\n    private windowBlurHandler = () => {\n        // If the user blurred the window while the autocomplete is focused, it means that it'll be\n        // refocused when they come back. In this case we want to skip the first focus event, if the\n        // pane was closed, in order to avoid reopening it unintentionally.\n        this.canOpenOnNextFocus = this.document.activeElement !== this.elementRef.nativeElement || this.panelOpen;\n    }\n\n    /**\n     * Given that we are not actually focusing active options, we must manually adjust scroll\n     * to reveal options below the fold. First, we find the offset of the option from the top\n     * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n     * the panel height + the option height, so the active option will be just visible at the\n     * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n     * will become the offset. If that offset is visible within the panel already, the scrollTop is\n     * not adjusted.\n     */\n    private scrollToOption(): void {\n        const index = this.autocomplete.keyManager.activeItemIndex || 0;\n        const labelCount = countGroupLabelsBeforeOption(index,\n            this.autocomplete.options, this.autocomplete.optionGroups);\n\n        const newScrollPosition = getOptionScrollPosition(\n            index + labelCount,\n            AUTOCOMPLETE_OPTION_HEIGHT,\n            this.autocomplete.getScrollTop(),\n            AUTOCOMPLETE_PANEL_HEIGHT\n        );\n\n        this.autocomplete.setScrollTop(newScrollPosition);\n    }\n\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    private subscribeToClosingActions(): Subscription {\n        const firstStable = this.zone.onStable.asObservable()\n            .pipe(take(1));\n        const optionChanges = this.autocomplete.options.changes\n            .pipe(\n                tap(() => this.positionStrategy.reapplyLastPosition()),\n                // Defer emitting to the stream until the next tick, because changing\n                // bindings in here will cause \"changed after checked\" errors.\n                delay(0)\n            );\n\n        // When the zone is stable initially, and when the option list changes...\n        return merge(firstStable, optionChanges)\n            .pipe(\n                // create a new stream of panelClosingActions, replacing any previous streams\n                // that were created, and flatten it so our stream only emits closing events...\n                switchMap(() => {\n                    this.resetActiveItem();\n                    this.autocomplete.setVisibility();\n\n                    if (this.panelOpen) {\n                        this.overlayRef!.updatePosition();\n                    }\n\n                    return this.panelClosingActions;\n                }),\n                // when the first closing event occurs...\n                take(1)\n            )\n            // set the value, close the panel, and complete.\n            .subscribe((event) => this.setValueAndClose(event));\n    }\n\n    /** Destroys the autocomplete suggestion panel. */\n    private destroyPanel(): void {\n        if (this.overlayRef) {\n            this.closePanel();\n            this.overlayRef.dispose();\n            this.overlayRef = null;\n        }\n    }\n\n    private setTriggerValue(value: any): void {\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n            this.autocomplete.displayWith(value) :\n            value;\n\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        const inputValue = toDisplay != null ? toDisplay : '';\n\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this.formField) {\n            this.formField._control.value = inputValue;\n        } else {\n            this.elementRef.nativeElement.value = inputValue;\n        }\n\n        this.previousValue = inputValue;\n    }\n\n    /** This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    private setValueAndClose(event: McOptionSelectionChange | null): void {\n        if (event && event.source) {\n            this.clearPreviousSelectedOption(event.source);\n            this.setTriggerValue(event.source.value);\n            this.onChange(event.source.value);\n            this.elementRef.nativeElement.focus();\n\n            this.autocomplete.emitSelectEvent(event.source);\n        }\n\n        this.closePanel();\n    }\n\n    /** Clear any previous selected option and emit a selection change event for this option */\n    private clearPreviousSelectedOption(skip: McOption) {\n        this.autocomplete.options.forEach((option) => {\n            if (option !== skip && option.selected) {\n                option.deselect();\n            }\n        });\n    }\n\n    private attachOverlay(): void {\n        if (!this.autocomplete) {\n            throw getMcAutocompleteMissingPanelError();\n        }\n\n        let overlayRef = this.overlayRef;\n\n        if (!overlayRef) {\n            this.portal = new TemplatePortal(this.autocomplete.template, this.viewContainerRef);\n            overlayRef = this.overlay.create(this.getOverlayConfig());\n            this.overlayRef = overlayRef;\n\n            // Use the `keydownEvents` in order to take advantage of\n            // the overlay event targeting provided by the CDK overlay.\n            overlayRef.keydownEvents().subscribe((event) => {\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                // tslint:disable-next-line deprecation\n                if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n                    this.resetActiveItem();\n                    this.closeKeyEventStream.next();\n                }\n            });\n\n            if (this.viewportRuler) {\n                this.viewportSubscription = this.viewportRuler.change().subscribe(() => {\n                    if (this.panelOpen && overlayRef) {\n                        overlayRef.updateSize({ width: this.getPanelWidth() });\n                    }\n                });\n            }\n        } else {\n            const position = overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n\n            // Update the trigger, panel width and direction, in case anything has changed.\n            position.setOrigin(this.getConnectedElement());\n            overlayRef.updateSize({ width: this.getPanelWidth() });\n        }\n\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this.portal);\n            this.closingActionsSubscription = this.subscribeToClosingActions();\n        }\n\n        const wasOpen = this.panelOpen;\n\n        this.autocomplete.setVisibility();\n        this.autocomplete.isOpen = this.overlayAttached = true;\n\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n\n    private getOverlayConfig(): OverlayConfig {\n        return new OverlayConfig({\n            positionStrategy: this.getOverlayPosition(),\n            scrollStrategy: this.scrollStrategy(),\n            width: this.getPanelWidth(),\n            direction: this.dir\n        });\n    }\n\n    private getOverlayPosition(): IPositionStrategy {\n        this.positionStrategy = this.overlay.position()\n            .flexibleConnectedTo(this.getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false)\n            .withPositions([\n                {\n                    originX: 'start',\n                    originY: 'bottom',\n                    overlayX: 'start',\n                    overlayY: 'top'\n                },\n                {\n                    originX: 'start',\n                    originY: 'top',\n                    overlayX: 'start',\n                    overlayY: 'bottom',\n\n                    // The overlay edge connected to the trigger should have squared corners, while\n                    // the opposite end has rounded corners. We apply a CSS class to swap the\n                    // border-radius based on the overlay position.\n                    panelClass: 'mc-autocomplete-panel-above'\n                }\n            ] as IConnectedPosition[]);\n\n        return this.positionStrategy;\n    }\n\n    private getConnectedElement(): ElementRef {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n\n        return this.formField ? this.formField.getConnectedOverlayOrigin() : this.elementRef;\n    }\n\n    private getPanelWidth(): number | string {\n        return this.autocomplete.panelWidth || this.getHostWidth() - AUTOCOMPLETE_BORDER_WIDTH;\n    }\n\n    private getHostWidth(): number {\n        return this.getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     */\n    private resetActiveItem(): void {\n        this.autocomplete.keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n    }\n\n    private canOpen(): boolean {\n        const element = this.elementRef.nativeElement;\n\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n}\n","/* tslint:disable:no-empty */\n\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    Directive,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Input,\n    isDevMode,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    Renderer2,\n    Self,\n    SimpleChanges,\n    ViewChild,\n    ViewChildren,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    RIGHT_ARROW,\n    SPACE,\n    UP_ARROW,\n    A\n} from '@ptsecurity/cdk/keycodes';\nimport {\n    CdkConnectedOverlay,\n    ViewportRuler\n} from '@ptsecurity/cdk/overlay';\nimport { CdkTree } from '@ptsecurity/cdk/tree';\nimport {\n    getOptionScrollPosition,\n    CanDisable,\n    CanUpdateErrorState,\n    ErrorStateMatcher,\n    HasTabIndex,\n    CanDisableCtor,\n    HasTabIndexCtor,\n    CanUpdateErrorStateCtor,\n    mixinTabIndex,\n    mixinDisabled,\n    mixinErrorState,\n    mcSelectAnimations,\n\n    SELECT_PANEL_MAX_HEIGHT,\n    SELECT_PANEL_PADDING_X,\n    SELECT_PANEL_VIEWPORT_PADDING,\n\n    getMcSelectDynamicMultipleError,\n    getMcSelectNonFunctionValueError,\n    getMcSelectNonArrayValueError,\n    MC_SELECT_SCROLL_STRATEGY\n} from '@ptsecurity/mosaic/core';\nimport { McFormField, McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { McTag } from '@ptsecurity/mosaic/tags';\nimport { McTreeSelection, McTreeOption } from '@ptsecurity/mosaic/tree';\nimport { defer, merge, Observable, Subject } from 'rxjs';\nimport {\n    filter,\n    map,\n    startWith,\n    switchMap,\n    take,\n    takeUntil,\n    distinctUntilChanged\n} from 'rxjs/operators';\n\n\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the select value has changed. */\nexport class McTreeSelectChange {\n    constructor(public source: McTreeOption, public value: any, public isUserInput = false) {}\n}\n\n\n@Directive({ selector: 'mc-tree-select-trigger' })\nexport class McTreeSelectTrigger {}\n\n\nclass McTreeSelectBase {\n    constructor(\n        public elementRef: ElementRef,\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {}\n}\n\n// tslint:disable-next-line:naming-convention\nconst McTreeSelectMixinBase: CanDisableCtor & HasTabIndexCtor & CanUpdateErrorStateCtor &\n    typeof McTreeSelectBase = mixinTabIndex(mixinDisabled(mixinErrorState(McTreeSelectBase)));\n\n\n@Component({\n    selector: 'mc-tree-select',\n    exportAs: 'mcTreeSelect',\n    templateUrl: 'tree-select.html',\n    styleUrls: ['./tree-select.css'],\n    inputs: ['disabled', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'tabIndex',\n\n        class: 'mc-tree-select',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-select-invalid]': 'errorState',\n        '[class.mc-select-required]': 'required',\n\n        '(keydown)': 'handleKeydown($event)',\n        '(focus)': 'onFocus()',\n        '(blur)': 'onBlur()',\n        '(window:resize)': 'calculateHiddenItems()'\n    },\n    animations: [\n        mcSelectAnimations.transformPanel,\n        mcSelectAnimations.fadeInContent\n    ],\n    providers: [\n        { provide: McFormFieldControl, useExisting: McTreeSelect },\n        { provide: CdkTree, useExisting: McTreeSelect }\n    ]\n})\nexport class McTreeSelect extends McTreeSelectMixinBase implements\n    AfterContentInit, AfterViewInit, OnChanges, OnDestroy, OnInit, DoCheck, ControlValueAccessor,\n    CanDisable, HasTabIndex, McFormFieldControl<any>, CanUpdateErrorState {\n\n    /** A name for this control that can be used by `mc-form-field`. */\n    controlType = 'mc-select';\n\n    hiddenItems: number = 0;\n    oneMoreText: string = '...ещё';\n\n    /** The last measured value for the trigger's client bounding rect. */\n    triggerRect: ClientRect;\n\n    /** The cached font-size of the trigger element. */\n    triggerFontSize = 0;\n\n    /** Deals with the selection logic. */\n    selectionModel: SelectionModel<McTreeOption>;\n\n    /** The IDs of child options to be passed to the aria-owns attribute. */\n    optionIds: string = '';\n\n    /** The value of the select panel's transform-origin property. */\n    transformOrigin: string = 'top';\n\n    /** Whether the panel's animation is done. */\n    panelDoneAnimating: boolean = false;\n\n    /** Emits when the panel element is finished transforming in. */\n    panelDoneAnimatingStream = new Subject<string>();\n\n    /** Strategy that will be used to handle scrolling while the select panel is open. */\n    scrollStrategy = this.scrollStrategyFactory();\n\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n    offsetY = 0;\n\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n    positions = [\n        {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top'\n        },\n        {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom'\n        }\n    ];\n\n    @ViewChild('trigger') trigger: ElementRef;\n\n    @ViewChild('panel') panel: ElementRef;\n\n    @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n    @ViewChildren(McTag) tags: QueryList<McTag>;\n\n    /** User-supplied override of the trigger element. */\n    @ContentChild(McTreeSelectTrigger) customTrigger: McTreeSelectTrigger;\n\n    @ContentChild(McTreeSelection) tree: McTreeSelection;\n\n    /** Event emitted when the select panel has been toggled. */\n    @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted when the select has been opened. */\n    @Output('opened') readonly openedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => o), map(() => {}));\n\n    /** Event emitted when the select has been closed. */\n    @Output('closed') readonly closedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => !o), map(() => {}));\n\n    /** Event emitted when the selected value has been changed by the user. */\n    @Output() readonly selectionChange = new EventEmitter<McTreeSelectChange>();\n\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n    @Input() panelClass: string | string[] | Set<string> | { [key: string]: any };\n\n    /** Object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Function used to sort the values in a select in multiple mode.\n     * Follows the same logic as `Array.prototype.sort`.\n     */\n    @Input() sortComparator: (\n        a: McTreeOption, b: McTreeOption, options: McTreeOption[]\n    ) => number;\n\n    /** Combined stream of all of the child options' change events. */\n    readonly optionSelectionChanges: Observable<McTreeSelectChange> = defer(() => {\n        if (this.options) {\n            return merge(...this.options.map((option) => option.onSelectionChange));\n        }\n\n        return this.ngZone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n    }) as Observable<McTreeSelectChange>;\n\n    options: QueryList<McTreeOption>;\n\n    private originalOnKeyDown: (event: KeyboardEvent) => void;\n\n    @Input()\n    get placeholder(): string {\n        return this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n\n        this.stateChanges.next();\n    }\n\n    private _placeholder: string;\n\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n\n        this.stateChanges.next();\n    }\n\n    private _required: boolean = false;\n\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        if (this.selectionModel) {\n            throw getMcSelectDynamicMultipleError();\n        }\n\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    private _multiple: boolean = false;\n\n    @Input()\n    get autoSelect(): boolean {\n        if (this.multiple) { return false; }\n\n        return this._autoSelect;\n    }\n\n    set autoSelect(value: boolean) {\n        this._autoSelect = coerceBooleanProperty(value);\n    }\n\n    private _autoSelect: boolean = true;\n\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith() {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        /* tslint:disable-next-line:strict-type-predicates */\n        if (typeof fn !== 'function') {\n            throw getMcSelectNonFunctionValueError();\n        }\n\n        this._compareWith = fn;\n\n        if (this.selectionModel) {\n            // A different comparator means the selection could change.\n            this.initializeSelection();\n        }\n    }\n\n    /** Value of the select control. */\n    @Input()\n    get value(): any {\n        return this._value;\n    }\n\n    set value(newValue: any) {\n        if (newValue !== this._value) {\n            this.writeValue(newValue);\n            this._value = newValue;\n        }\n    }\n\n    private _value: any;\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n        this.stateChanges.next();\n    }\n\n    private _id: string;\n\n    /** Whether the select is focused. */\n    get focused(): boolean {\n        return this._focused || this._panelOpen;\n    }\n\n    /**\n     * @deprecated Setter to be removed as this property is intended to be readonly.\n     * @breaking-change 8.0.0\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n\n    private _focused = false;\n\n    get panelOpen(): boolean {\n        return this._panelOpen;\n    }\n\n    private _panelOpen = false;\n\n    /** The scroll position of the overlay panel, calculated to center the selected option. */\n    private scrollTop = 0;\n\n    /** Unique id for this input. */\n    private readonly uid = `mc-select-${nextUniqueId++}`;\n\n    /** Emits whenever the component is destroyed. */\n    private readonly destroy = new Subject<void>();\n\n    constructor(\n        private readonly viewportRuler: ViewportRuler,\n        readonly changeDetectorRef: ChangeDetectorRef,\n        private readonly ngZone: NgZone,\n        private readonly renderer: Renderer2,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        public elementRef: ElementRef,\n        @Optional() private readonly dir: Directionality,\n        @Optional() parentForm: NgForm,\n        @Optional() parentFormGroup: FormGroupDirective,\n        @Optional() private readonly parentFormField: McFormField,\n        @Self() @Optional() public ngControl: NgControl,\n        @Attribute('tabindex') tabIndex: string,\n        @Inject(MC_SELECT_SCROLL_STRATEGY) private readonly scrollStrategyFactory\n    ) {\n        super(elementRef, defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnInit() {\n        if (this.tree) {\n            this.tree.multiple = this.multiple;\n        }\n\n        this.stateChanges.next();\n\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this.panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this.panelOpen) {\n                    this.scrollTop = 0;\n                    this.openedChange.emit(true);\n                } else {\n                    this.openedChange.emit(false);\n                    this.panelDoneAnimating = false;\n                    this.overlayDir.offsetX = 0;\n                    this.changeDetectorRef.markForCheck();\n                }\n            });\n    }\n\n    ngAfterContentInit() {\n        if (!this.tree) { return; }\n\n        this.initKeyManager();\n\n        this.selectionModel = this.tree.selectionModel = new SelectionModel<McTreeOption>(this.multiple);\n        this.options = this.tree.options;\n        this.tree.autoSelect = this.autoSelect;\n\n        this.selectionModel.changed\n            .pipe(takeUntil(this.destroy))\n            .subscribe((event) => {\n                event.added.forEach((option) => option.select());\n                event.removed.forEach((option) => option.deselect());\n            });\n    }\n\n    ngAfterViewInit() {\n        if (!this.tree) { return; }\n\n        this.tags.changes\n            .subscribe(() => {\n                setTimeout(() => this.calculateHiddenItems(), 0);\n            });\n\n        this.options.changes\n            .pipe(startWith(null), takeUntil(this.destroy))\n            .subscribe(() => {\n                this.updateSelectedOptions();\n\n                this.resetOptions();\n            });\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) { this.updateErrorState(); }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes.disabled) {\n            this.stateChanges.next();\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroy.next();\n\n        this.destroy.complete();\n        this.stateChanges.complete();\n    }\n\n    /** `View -> model callback called when value changes` */\n    onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when select has been touched` */\n    onTouched = () => {};\n\n    toggle() {\n        if (this.panelOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    open() {\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) { return; }\n\n        this.triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this.triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n        this._panelOpen = true;\n        // this.tree.keyManager.withHorizontalOrientation(null);\n        this.calculateOverlayPosition();\n        this.highlightCorrectOption();\n        this.changeDetectorRef.markForCheck();\n\n        // Set the font size on the panel element once it exists.\n        this.ngZone.onStable.asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                if (this.triggerFontSize && this.overlayDir.overlayRef &&\n                    this.overlayDir.overlayRef.overlayElement) {\n                    this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this.triggerFontSize}px`;\n                }\n            });\n    }\n\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n\n            // this.tree.keyManager.setActiveItem(-1);\n\n            // this.tree.keyManager.withHorizontalOrientation(this.isRtl() ? 'rtl' : 'ltr');\n            this.changeDetectorRef.markForCheck();\n            this.onTouched();\n        }\n    }\n\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    // todo нужно доделать!\n    writeValue(value: any) {\n        if (this.options) {\n            this.setSelectionByValue(value);\n        }\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.onChange = fn;\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn: () => {}) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this.changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    get selected(): McTreeOption | McTreeOption[] {\n        return this.multiple ? this.selectionModel.selected : this.selectionModel.selected[0];\n    }\n\n    get triggerValue(): string {\n        if (this.empty) { return ''; }\n\n        return (this.selected as McTreeOption).viewValue;\n    }\n\n    get triggerValues(): McTreeOption[] {\n        if (this.empty) { return []; }\n\n        const selectedOptions = this.selectionModel.selected;\n\n        if (this.isRtl()) { selectedOptions.reverse(); }\n\n        return selectedOptions;\n    }\n\n    get empty(): boolean {\n        return !this.selectionModel || this.selectionModel.isEmpty();\n    }\n\n    isRtl(): boolean {\n        return this.dir ? this.dir.value === 'rtl' : false;\n    }\n\n    handleKeydown(event: KeyboardEvent) {\n        if (!this.disabled) {\n            if (this.panelOpen) {\n                this.handleOpenKeydown(event);\n            } else {\n                this.handleClosedKeydown(event);\n            }\n        }\n    }\n\n    /**\n     * When the panel content is done fading in, the panelDoneAnimating property is\n     * set so the proper class can be added to the panel.\n     */\n    onFadeInDone() {\n        this.panelDoneAnimating = this.panelOpen;\n        this.changeDetectorRef.markForCheck();\n    }\n\n    onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    onBlur() {\n        this._focused = false;\n\n        if (!this.disabled && !this.panelOpen) {\n            this.onTouched();\n            this.changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n\n    /** Callback that is invoked when the overlay panel has been attached. */\n    onAttached() {\n        this.overlayDir.positionChange\n            .pipe(take(1))\n            .subscribe(() => {\n                this.changeDetectorRef.detectChanges();\n                this.calculateOverlayOffsetX();\n                this.panel.nativeElement.scrollTop = this.scrollTop;\n            });\n    }\n\n    /** Returns the theme to be used on the panel. */\n    getPanelTheme(): string {\n        return this.parentFormField ? `mc-${this.parentFormField.color}` : '';\n    }\n\n    /** Focuses the select element. */\n    focus() {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    calculateOverlayScroll(selectedIndex: number, scrollBuffer: number, maxScroll: number): number {\n        const itemHeight = this.getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n\n        /* tslint:disable-next-line:no-magic-numbers */\n        const halfOptionHeight = itemHeight / 2;\n\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n\n    /** Invoked when an option is clicked. */\n    onRemoveSelectedOption(selectedOption: McTreeOption, $event) {\n        $event.stopPropagation();\n\n        this.options.forEach((option) => {\n            if (option.data === selectedOption.data) { option.deselect(); }\n        });\n\n        this.selectionModel.deselect(selectedOption);\n    }\n\n    calculateHiddenItems() {\n        if (this.empty || !this.multiple) { return; }\n\n        let visibleItems: number = 0;\n        const totalItemsWidth = this.getTotalItemsWidthInMatcher();\n        let totalVisibleItemsWidth: number = 0;\n        const itemMargin: number = 4;\n\n        this.tags.forEach((tag) => {\n            if (tag.nativeElement.offsetTop < tag.nativeElement.offsetHeight) {\n                totalVisibleItemsWidth += tag.nativeElement.getBoundingClientRect().width + itemMargin;\n                visibleItems++;\n            }\n        });\n\n        this.hiddenItems = this.selectionModel.selected.length - visibleItems;\n\n        if (this.hiddenItems) {\n            const itemsCounter = this.trigger.nativeElement.querySelector('.mc-tree-select__match-hidden-text');\n            const matcherList = this.trigger.nativeElement.querySelector('.mc-tree-select__match-list');\n\n            const itemsCounterShowed = itemsCounter.offsetTop < itemsCounter.offsetHeight;\n            // const itemsCounterWidth: number = itemsCounter.getBoundingClientRect().width;\n            const itemsCounterWidth: number = 86;\n\n            const matcherListWidth: number = matcherList.getBoundingClientRect().width;\n            const matcherWidth: number = matcherListWidth + itemsCounterWidth;\n\n            if (itemsCounterShowed && (totalItemsWidth < matcherWidth)) { this.hiddenItems = 0; }\n\n            if (\n                totalVisibleItemsWidth === matcherListWidth ||\n                (totalVisibleItemsWidth + itemsCounterWidth) < matcherListWidth\n            ) {\n                this.changeDetectorRef.markForCheck();\n\n                return ;\n            } else if (!itemsCounterShowed && (totalItemsWidth + itemsCounterWidth) > matcherWidth) {\n                this.hiddenItems++;\n            }\n        }\n\n        this.changeDetectorRef.markForCheck();\n    }\n\n    private updateSelectedOptions(): void {\n        this.selectionModel.selected.forEach((selectedOption) => {\n            this.options.forEach((option) => {\n                if (option.data === selectedOption.data) {\n                    this.selectionModel.deselect(selectedOption);\n                    this.selectionModel.select(option);\n\n                    option.select();\n                }\n            });\n        });\n    }\n\n    private getTotalItemsWidthInMatcher(): number {\n        const triggerClone = this.trigger.nativeElement.cloneNode(true);\n        triggerClone.querySelector('.mc-tree-select__match-hidden-text').remove();\n\n        this.renderer.setStyle(triggerClone, 'position', 'absolute');\n        this.renderer.setStyle(triggerClone, 'visibility', 'hidden');\n        this.renderer.setStyle(triggerClone, 'top', '-100%');\n        this.renderer.setStyle(triggerClone, 'left', '0');\n\n        this.renderer.appendChild(this.trigger.nativeElement, triggerClone);\n\n        let totalItemsWidth: number = 0;\n        const itemMargin: number = 4;\n        triggerClone.querySelectorAll('mc-tag').forEach((item) => {\n            totalItemsWidth += item.getBoundingClientRect().width as number + itemMargin;\n        });\n\n        triggerClone.remove();\n\n        return totalItemsWidth;\n    }\n\n    private handleClosedKeydown(event: KeyboardEvent) {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n        // Open the select on ALT + arrow key to match the native <select>\n        if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n            // prevents the page from scrolling down when pressing space\n            event.preventDefault();\n\n            this.open();\n        } else if (!this.multiple && this.tree.keyManager && this.tree.keyManager.onKeydown) {\n            this.tree.keyManager.onKeydown(event);\n        }\n    }\n\n    private handleOpenKeydown(event: KeyboardEvent) {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n\n            this.close();\n        } else if (keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW) {\n            return this.originalOnKeyDown.call(this.tree, event);\n        } else if (keyCode === HOME || keyCode === END) {\n            event.preventDefault();\n\n            if (keyCode === HOME) {\n                this.tree.keyManager.setFirstItemActive();\n            } else {\n                this.tree.keyManager.setLastItemActive();\n            }\n        } else if ((keyCode === ENTER || keyCode === SPACE) && this.tree.keyManager.activeItem) {\n            event.preventDefault();\n\n            this.tree.keyManager.activeItem.selectViaInteraction();\n        } else if (this.multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n\n            const hasDeselectedOptions = this.options.some((option) => !option.selected);\n\n            this.options.forEach((option) => {\n                if (hasDeselectedOptions && !option.disabled) {\n                    option.select();\n                } else {\n                    option.deselect();\n                }\n            });\n        } else {\n            const previouslyFocusedIndex = this.tree.keyManager.activeItemIndex;\n\n            this.tree.keyManager.onKeydown(event);\n\n            if (this.multiple && isArrowKey && event.shiftKey && this.tree.keyManager.activeItem &&\n                this.tree.keyManager.activeItemIndex !== previouslyFocusedIndex) {\n                this.tree.keyManager.activeItem.selectViaInteraction();\n            }\n        }\n    }\n\n    private initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this.setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n        });\n    }\n\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    private setSelectionByValue(value: any | any[]) {\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) { throw getMcSelectNonArrayValueError(); }\n\n            this.selectionModel.clear();\n            value.forEach((currentValue: any) => this.selectValue(currentValue));\n            this.sortValues();\n        } else {\n            this.selectionModel.clear();\n            const correspondingOption = this.selectValue(value);\n\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this.tree.keyManager.setActiveItem(correspondingOption);\n            }\n        }\n\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    private selectValue(value: any): McTreeOption | undefined {\n        const correspondingOption = this.options.find((option: McTreeOption) => {\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            } catch (error) {\n                if (isDevMode()) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n\n                return false;\n            }\n        });\n\n        if (correspondingOption) {\n            this.selectionModel.select(correspondingOption);\n        }\n\n        return correspondingOption;\n    }\n\n    private initKeyManager() {\n        this.originalOnKeyDown = this.tree.onKeyDown;\n\n        this.tree.onKeyDown = () => {};\n\n        this.tree.keyManager.tabOut\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            });\n\n        this.tree.keyManager.change\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this._panelOpen && this.panel) {\n                    this.scrollActiveOptionIntoView();\n                } else if (!this._panelOpen && !this.multiple && this.tree.keyManager.activeItem) {\n                    this.tree.keyManager.activeItem.selectViaInteraction();\n                }\n            });\n    }\n\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    private resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this.destroy);\n\n        this.optionSelectionChanges\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe((event) => {\n                this.onSelect(event.source, event.isUserInput);\n\n                if (event.isUserInput && !this.multiple && this._panelOpen) {\n                    this.close();\n                    this.focus();\n                }\n            });\n\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        // merge(...this.options.map((option) => option.stateChanges))\n        //     .pipe(takeUntil(changedOrDestroyed))\n        //     .subscribe(() => {\n        //         this.changeDetectorRef.markForCheck();\n        //         this.stateChanges.next();\n        //     });\n\n        this.setOptionIds();\n    }\n\n    /** Invoked when an option is clicked. */\n    private onSelect(option: McTreeOption, isUserInput: boolean) {\n        const wasSelected = this.selectionModel.isSelected(option);\n\n        if (option.value == null && !this.multiple) {\n            option.deselect();\n            this.selectionModel.clear();\n            this.propagateChanges(option.value);\n        } else {\n            if (option.selected) {\n                this.selectionModel.select(option);\n            } else {\n                this.selectionModel.deselect(option);\n            }\n\n            if (isUserInput) {\n                this.tree.keyManager.setActiveItem(option);\n            }\n\n            if (this.multiple) {\n                this.sortValues();\n\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mc-option`.\n                    this.focus();\n                }\n            }\n        }\n\n        if (wasSelected !== this.selectionModel.isSelected(option)) {\n            this.propagateChanges();\n        }\n\n        this.stateChanges.next();\n    }\n\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    private sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n\n            this.selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n\n    /** Emits change event to set the model value. */\n    private propagateChanges(fallbackValue?: any) {\n        let valueToEmit: any = null;\n\n        if (this.multiple) {\n            valueToEmit = (this.selected as any).map((option) => option.value);\n        } else {\n            valueToEmit = this.selected ? (this.selected as any).value : fallbackValue;\n        }\n\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this.onChange(valueToEmit);\n        this.selectionChange.emit(new McTreeSelectChange(this as any, valueToEmit));\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Records option IDs to pass to the aria-owns property. */\n    private setOptionIds() {\n        this.optionIds = this.options.map((option) => option.id).join(' ');\n    }\n\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    private highlightCorrectOption() {\n        if (this.tree.keyManager) {\n            if (this.empty) {\n                this.tree.keyManager.setFirstItemActive();\n            } else {\n                this.tree.keyManager.setActiveItem(this.selectionModel.selected[0]);\n            }\n        }\n    }\n\n    /** Scrolls the active option into view. */\n    private scrollActiveOptionIntoView() {\n        const activeOptionIndex = this.tree.keyManager.activeItemIndex || 0;\n\n        this.panel.nativeElement.scrollTop = getOptionScrollPosition(\n            activeOptionIndex,\n            this.getItemHeight(),\n            this.panel.nativeElement.scrollTop,\n            SELECT_PANEL_MAX_HEIGHT\n        );\n    }\n\n    /** Gets the index of the provided option in the option list. */\n    private getOptionIndex(option: McTreeOption): number | undefined {\n        // todo разобраться с этим срачем!\n        return this.options.reduce((result: number, current: McTreeOption, index: number) => {\n            /* tslint:disable-next-line:strict-type-predicates */\n            return result === undefined ? (option === current ? index : undefined) : result;\n        }, undefined);\n    }\n\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    private calculateOverlayPosition() {\n        const itemHeight = this.getItemHeight();\n        const items = this.getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n\n        // If no value is selected we open the popup to the first item.\n        const selectedOptionOffset =\n            this.empty ? 0 : this.getOptionIndex(this.selectionModel.selected[0])!;\n\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        /* tslint:disable-next-line:no-magic-numbers */\n        const scrollBuffer = panelHeight / 2;\n        this.scrollTop = this.calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this.offsetY = this.calculateOverlayOffsetY();\n\n        this.checkOverlayWithinViewport(maxScroll);\n    }\n\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    private calculateOverlayOffsetX() {\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this.viewportRuler.getViewportSize();\n        const isRtl = this.isRtl();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const paddingWidth = SELECT_PANEL_PADDING_X * 2;\n        let offsetX: number = SELECT_PANEL_PADDING_X;\n\n        // Invert the offset in LTR.\n        if (!isRtl) { offsetX *= -1; }\n\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        } else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    private calculateOverlayOffsetY(): number {\n        // const itemHeight = this.getItemHeight();\n        // const optionHeightAdjustment = (itemHeight - this.triggerRect.height) / 2;\n\n        // todo I'm not sure that we will use it\n        return 0;\n        // return Math.round(-optionHeightAdjustment);\n    }\n\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    private checkOverlayWithinViewport(maxScroll: number) {\n        const itemHeight = this.getItemHeight();\n        const viewportSize = this.viewportRuler.getViewportSize();\n\n        const topSpaceAvailable = this.triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable =\n            viewportSize.height - this.triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n        const panelHeightTop = Math.abs(this.offsetY);\n        const totalPanelHeight =\n            Math.min(this.getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this.triggerRect.height;\n\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this.adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        } else if (panelHeightTop > topSpaceAvailable) {\n            this.adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        } else {\n            this.transformOrigin = this.getOriginBasedOnOption();\n        }\n    }\n\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    private adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this.scrollTop -= distanceBelowViewport;\n        this.offsetY -= distanceBelowViewport;\n        this.transformOrigin = this.getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this.scrollTop <= 0) {\n            this.scrollTop = 0;\n            this.offsetY = 0;\n            this.transformOrigin = `50% bottom 0px`;\n        }\n    }\n\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    private adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number, maxScroll: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this.scrollTop += distanceAboveViewport;\n        this.offsetY += distanceAboveViewport;\n        this.transformOrigin = this.getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this.scrollTop >= maxScroll) {\n            this.scrollTop = maxScroll;\n            this.offsetY = 0;\n            this.transformOrigin = `50% top 0px`;\n\n            return;\n        }\n    }\n\n    /** Sets the transform origin point based on the selected option. */\n    private getOriginBasedOnOption(): string {\n        const itemHeight = this.getItemHeight();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const optionHeightAdjustment = (itemHeight - this.triggerRect.height) / 2;\n        /* tslint:disable-next-line:no-magic-numbers */\n        const originY = Math.abs(this.offsetY) - optionHeightAdjustment + itemHeight / 2;\n\n        return `50% ${originY}px 0px`;\n    }\n\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    private getItemCount(): number {\n        return this.options.length;\n    }\n\n    /** Calculates the height of the select's options. */\n    private getItemHeight(): number {\n        // todo доделать\n        /* tslint:disable-next-line:no-magic-numbers */\n        return 32;\n        // return this.triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { CdkTreeModule } from '@ptsecurity/cdk/tree';\nimport { MC_SELECT_SCROLL_STRATEGY_PROVIDER, McPseudoCheckboxModule } from '@ptsecurity/mosaic/core';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\nimport { McTagsModule } from '@ptsecurity/mosaic/tags';\nimport { McTreeModule } from '@ptsecurity/mosaic/tree';\n\nimport { McTreeSelect, McTreeSelectTrigger } from './tree-select.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        CdkTreeModule,\n        McTreeModule,\n        McIconModule,\n        McTagsModule,\n        McPseudoCheckboxModule\n    ],\n    exports: [McTreeSelect, McTreeSelectTrigger, CommonModule],\n    declarations: [McTreeSelect, McTreeSelectTrigger],\n    providers: [MC_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class McTreeSelectModule {}\n","import {\n    Directive, DoCheck, ElementRef, Inject,\n    Input, OnChanges, OnDestroy, Optional,\n    Self, InjectionToken, NgZone, OnInit\n} from '@angular/core';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { fromEvent, Subscription, Subject } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\n\n\nexport const MC_TEXTAREA_VALUE_ACCESSOR =\n    new InjectionToken<{ value: any }>('MC_TEXTAREA_VALUE_ACCESSOR');\n\nlet nextUniqueId = 0;\n\nconst ROW_SEPARATOR = '\\n';\n\nexport class McTextareaBase {\n    constructor(public defaultErrorStateMatcher: ErrorStateMatcher,\n                public parentForm: NgForm,\n                public parentFormGroup: FormGroupDirective,\n                public ngControl: NgControl) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McTextareaMixinBase: CanUpdateErrorStateCtor & typeof McTextareaBase = mixinErrorState(McTextareaBase);\n\n@Directive({\n    selector: 'textarea[mcTextarea]',\n    exportAs: 'mcTextarea',\n    host: {\n        class: 'mc-textarea',\n        '[class.mc-textarea-resizable]': '!canGrow',\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[attr.aria-invalid]': 'errorState',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '(blur)': 'focusChanged(false)',\n        '(focus)': 'focusChanged(true)'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McTextarea }]\n})\nexport class McTextarea extends McTextareaMixinBase implements McFormFieldControl<any>, OnInit, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n\n    @Input() canGrow: boolean = true;\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-textarea';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this.valueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this.valueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n\n    protected uid = `mc-textsrea-${nextUniqueId++}`;\n    protected previousNativeValue: any;\n    protected _disabled = false;\n    protected _id: string;\n    protected _required = false;\n\n    private valueAccessor: { value: any };\n    private growSubscription: Subscription;\n\n    private lineHeight: number = 0;\n    private freeRowsHeight: number = 0;\n    private minHeight: number = 0;\n\n    constructor(protected elementRef: ElementRef,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() parentForm: NgForm,\n                @Optional() parentFormGroup: FormGroupDirective,\n                defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_TEXTAREA_VALUE_ACCESSOR) inputValueAccessor: any,\n                private ngZone: NgZone) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n        // If no input value accessor was explicitly specified, use the element as the textarea value\n        // accessor.\n        this.valueAccessor = inputValueAccessor || this.elementRef.nativeElement;\n\n        this.previousNativeValue = this.value;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n\n        const growObserver = fromEvent(elementRef.nativeElement, 'input')\n            /*.pipe(\n                map((event: any) => this.getGrowHeight()),\n                // map((event: any) => event.target.scrollHeight),\n                distinctUntilChanged()\n            )*/;\n        this.growSubscription = growObserver.subscribe(this.grow.bind(this));\n    }\n\n    ngOnInit() {\n        setTimeout(() => this.grow(), 0);\n        this.lineHeight = parseInt(getComputedStyle(this.elementRef.nativeElement).lineHeight!, 10);\n\n        const paddingTop = parseInt(getComputedStyle(this.elementRef.nativeElement).paddingTop!, 10);\n        const paddingBottom = parseInt(getComputedStyle(this.elementRef.nativeElement).paddingBottom!, 10);\n\n        // tslint:disable-next-line:no-magic-numbers\n        this.minHeight = this.lineHeight * 2 + paddingTop + paddingBottom;\n        this.freeRowsHeight = this.lineHeight;\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        this.growSubscription.unsubscribe();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this.dirtyCheckNativeValue();\n    }\n\n    /** Grow textarea height to avoid vertical scroll  */\n    grow() {\n        if (!this.canGrow) {\n            return;\n        }\n\n        this.ngZone.runOutsideAngular(() => {\n            const textarea = this.elementRef.nativeElement;\n\n            const outerHeight = parseInt(window.getComputedStyle(textarea).height!, 10);\n            const diff = outerHeight - textarea.clientHeight;\n\n            textarea.style.height = 0; // this line is important to height recalculation\n\n            const height = Math.max(this.minHeight, textarea.scrollHeight + diff + this.freeRowsHeight);\n            textarea.style.height = `${height}px`;\n        });\n    }\n\n    /** Focuses the textarea. */\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /** Callback for the cases where the focused state of the textarea changes. */\n    focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this.elementRef.nativeElement.value && !this.isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Does some manual dirty checking on the native textarea `value` property. */\n    protected dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this.previousNativeValue !== newValue) {\n            this.previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Checks whether the textarea is invalid based on the native validation. */\n    protected isBadInput(): boolean {\n        // The `validity` property won't be present on platform-server.\n        const validity = (this.elementRef.nativeElement as HTMLTextAreaElement).validity;\n\n        return validity && validity.badInput;\n    }\n\n    private getGrowHeight(): number {\n        const textarea = this.elementRef.nativeElement;\n        const outerHeight = parseInt(window.getComputedStyle(textarea).height!.toString(), 10);\n        const diff = outerHeight - textarea.clientHeight;\n\n        return Math.max(this.minHeight, textarea.scrollHeight + diff);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McTextarea } from './textarea.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule, FormsModule],\n    exports: [McTextarea],\n    declarations: [McTextarea]\n})\nexport class McTextareaModule {\n}\n","import {\n    Directive,\n    DoCheck,\n    ElementRef,\n    forwardRef,\n    Inject,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Optional,\n    Renderer2,\n    Self\n} from '@angular/core';\nimport {\n    ControlValueAccessor,\n    FormControl,\n    FormGroupDirective,\n    NgControl,\n    NgForm,\n    ValidationErrors\n} from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { DateAdapter } from '@ptsecurity/cdk/datetime';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { MC_INPUT_VALUE_ACCESSOR } from '@ptsecurity/mosaic/input';\nimport {\n    noop,\n    Subject\n} from 'rxjs';\n\nimport {\n    ARROW_DOWN_KEYCODE,\n    ARROW_LEFT_KEYCODE,\n    ARROW_RIGHT_KEYCODE,\n    ARROW_UP_KEYCODE,\n    DEFAULT_TIME_FORMAT,\n    HOURS_PER_DAY,\n    HOURS_MINUTES_REGEXP,\n    HOURS_MINUTES_SECONDS_REGEXP,\n    HOURS_ONLY_REGEXP,\n    MINUTES_PER_HOUR,\n    SECONDS_PER_MINUTE,\n    TIMEFORMAT_PLACEHOLDERS,\n    TimeFormats,\n    TimeParts\n} from './timepicker.constants';\n\n\nlet uniqueComponentIdSuffix: number = 0;\n\nexport class McTimepickerBase {\n    constructor(\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl) { }\n}\n\n// tslint:disable-next-line naming-convention\nexport const McTimepickerMixinBase:\n    CanUpdateErrorStateCtor &\n    typeof McTimepickerBase = mixinErrorState(McTimepickerBase);\n\n@Directive({\n    selector: 'input[mcTimepicker]',\n    exportAs: 'mcTimepickerInput',\n    host: {\n        class: 'mc-timepicker mc-input',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '[attr.time-format]': 'timeFormat',\n        '[attr.min-time]': 'minTime',\n        '[attr.max-time]': 'maxTime',\n        '[attr.value]': 'value',\n        '[attr.aria-invalid]': 'errorState',\n        '(blur)': 'onBlur()',\n        '(focus)': 'focusChanged(true)',\n        '(input)': 'onInput()',\n        '(paste)': 'onPaste($event)',\n        '(keydown)': 'onKeyDown($event)'\n    },\n    providers: [\n        {\n            provide: McFormFieldControl,\n            useExisting: forwardRef(() => McTimepicker)\n        }\n    ]\n})\nexport class McTimepicker extends McTimepickerMixinBase\n    implements McFormFieldControl<any>,\n        OnChanges,\n        OnDestroy,\n        DoCheck,\n        CanUpdateErrorState,\n        ControlValueAccessor {\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-timepicker';\n\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) { return this.ngControl.disabled; }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n        }\n\n        this.stateChanges.next();\n    }\n\n    @Input()\n    get id(): string { return this._id; }\n\n    set id(value: string) { this._id = value || this.uid; }\n\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean { return this._required; }\n\n    set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string { return this.inputValueAccessor.value; }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this.inputValueAccessor.value = value;\n            this.applyInputChanges();\n        }\n    }\n\n    @Input('time-format')\n    get timeFormat(): TimeFormats { return this._timeFormat; }\n\n    set timeFormat(formatValue: TimeFormats) {\n        this._timeFormat = Object\n            .keys(TimeFormats)\n            .map((timeFormatKey) => TimeFormats[timeFormatKey])\n            .indexOf(formatValue) > -1 ? formatValue : DEFAULT_TIME_FORMAT;\n\n        (this.ngControl.control as FormControl).updateValueAndValidity();\n        this.placeholder = TIMEFORMAT_PLACEHOLDERS[this._timeFormat];\n    }\n\n    @Input('min-time')\n    get minTime(): string | null { return this._minTime; }\n\n    set minTime(minValue: string | null) {\n        this._minTime = minValue;\n        this.minDateTime = minValue !== null ? this.getDateFromTimeString(minValue) : undefined;\n        (this.ngControl.control as FormControl).updateValueAndValidity();\n    }\n\n    @Input('max-time')\n    get maxTime(): string | null { return this._maxTime; }\n\n    set maxTime(maxValue: string | null) {\n        this._maxTime = maxValue;\n        this.maxDateTime = maxValue !== null ? this.getDateFromTimeString(maxValue) : undefined;\n        (this.ngControl.control as FormControl).updateValueAndValidity();\n    }\n\n    private _id: string;\n    private readonly uid = `mc-timepicker-${uniqueComponentIdSuffix++}`;\n    private _disabled: boolean;\n    private _required: boolean;\n    private previousNativeValue: any;\n    private readonly inputValueAccessor: { value: any };\n    private onChange: (value: any) => void;\n    private onTouched: () => void;\n    private _timeFormat: TimeFormats;\n    private _minTime: string | null = null;\n    private minDateTime: Date | undefined;\n    private _maxTime: string | null = null;\n    private maxDateTime: Date | undefined;\n    private currentDateTimeInput: Date | undefined;\n\n    constructor(private readonly elementRef: ElementRef,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() parentForm: NgForm,\n                @Optional() parentFormGroup: FormGroupDirective,\n                defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n                private readonly renderer: Renderer2,\n                @Optional() private dateAdapter: DateAdapter<any>) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (!this.dateAdapter) {\n            throw Error(`McTimepicker: No provider found for DateAdapter. You must import one of the existing ` +\n                `modules at your application root or provide a custom implementation or use exists ones.`);\n        }\n\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this.inputValueAccessor = inputValueAccessor || this.elementRef.nativeElement;\n\n        this.previousNativeValue = this.value;\n        this.onChange = noop;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n\n        this.placeholder = TIMEFORMAT_PLACEHOLDERS[DEFAULT_TIME_FORMAT];\n\n        if (this.ngControl) {\n            // Instead of NG_VALUE_ACCESSOR (https://github.com/angular/material2/issues/8158#issuecomment-344618103)\n            this.ngControl.valueAccessor = this;\n\n            // To avoid cyclic dependency https://stackoverflow.com/a/49578414\n            const control = this.ngControl.control as FormControl;\n            const myValidators = [\n                () => this.parseValidator(),\n                () => this.minTimeValidator(),\n                () => this.maxTimeValidator()\n            ];\n            const validators = control.validator\n                ? [control.validator, ...myValidators]\n                : myValidators;\n\n            control.setValidators(validators);\n            control.updateValueAndValidity();\n        }\n    }\n\n    ngOnChanges(): void {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy(): void {\n        this.stateChanges.complete();\n    }\n\n    ngDoCheck(): void {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this.dirtyCheckNativeValue();\n    }\n\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    focusChanged(isFocused: boolean): void {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.onTouched();\n            this.stateChanges.next();\n        }\n    }\n\n    onBlur() {\n        this.applyInputChanges();\n        this.focusChanged(false);\n    }\n\n    onPaste($event) {\n        $event.preventDefault();\n        const clipboardUserInput: string = $event.clipboardData.getData('text');\n\n        if (this.getDateFromTimeString(clipboardUserInput) === undefined) { return; }\n\n        this.elementRef.nativeElement.value = clipboardUserInput;\n        this.onInput();\n    }\n\n    onInput() {\n        const initialCursorStart: number = this.elementRef.nativeElement.selectionStart;\n        const initialCursorEnd: number = this.elementRef.nativeElement.selectionEnd;\n        let isAutocompleteTriggered: boolean = false;\n\n        const {\n            hoursOnly,\n            hoursAndMinutes,\n            hoursAndMinutesAndSeconds\n        } = this.getParsedTimeParts(this.elementRef.nativeElement.value);\n\n        // tslint:disable no-magic-numbers\n        if (hoursOnly &&\n            hoursOnly[1] &&\n            hoursOnly[1].length === 2) {\n            isAutocompleteTriggered = true;\n        } else if (hoursAndMinutes &&\n            hoursAndMinutes[1].length === 1 &&\n            hoursAndMinutes[2] &&\n            hoursAndMinutes[2].length === 2) {\n            isAutocompleteTriggered = true;\n        } else if (hoursAndMinutesAndSeconds &&\n            hoursAndMinutesAndSeconds[1].length === 2 &&\n            hoursAndMinutesAndSeconds[2].length === 2 &&\n            hoursAndMinutesAndSeconds[3] &&\n            hoursAndMinutesAndSeconds[3].length === 2) {\n            isAutocompleteTriggered = true;\n        }\n        // tslint:enable no-magic-numbers\n\n        this.applyInputChanges({ doTimestringReformat: isAutocompleteTriggered });\n\n        this.elementRef.nativeElement.selectionStart = initialCursorStart;\n        this.elementRef.nativeElement.selectionEnd = initialCursorEnd;\n\n        if (isAutocompleteTriggered && this.ngControl.errors === null) {\n            this.createSelectionOfTimeComponentInInput(initialCursorStart + 1);\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this.elementRef.nativeElement.value && !this.isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    writeValue(value: Date | null): void {\n        if (value !== null) {\n            this.renderer.setProperty(this.elementRef.nativeElement,\n                'value',\n                this.getTimeStringFromDate(value, this.timeFormat)\n            );\n        }\n        this.onChange(value || null);\n        this.applyInputChanges();\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n\n        const keyCode: string = this.getKeyCode(event);\n\n        if (keyCode === ARROW_UP_KEYCODE || keyCode === ARROW_DOWN_KEYCODE) {\n            this.upDownTimeByArrowKeys(event);\n        }\n        if (keyCode === ARROW_LEFT_KEYCODE || keyCode === ARROW_RIGHT_KEYCODE) {\n            this.switchSelectionBetweenTimeparts(event);\n        }\n    }\n\n    registerOnChange(fn: (value: Date) => void): void {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    /** Does some manual dirty checking on the native input `value` property. */\n    private dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this.previousNativeValue !== newValue) {\n            this.previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Checks whether the input is invalid based on the native validation. */\n    private isBadInput(): boolean {\n        const validity = (<HTMLInputElement> this.elementRef.nativeElement).validity;\n\n        return validity && validity.badInput;\n    }\n\n    private applyInputChanges(applyParams: {\n        changedTime?: Date;\n        doTimestringReformat?: boolean;\n    } = {}): void {\n        const { changedTime, doTimestringReformat = true } = applyParams;\n        const timeToApply: Date | undefined = changedTime ||\n            this.getDateFromTimeString(this.elementRef.nativeElement.value);\n        this.currentDateTimeInput = timeToApply;\n\n        if (doTimestringReformat && timeToApply !== undefined) {\n            const selectionStart: number = this.elementRef.nativeElement.selectionStart;\n            const selectionEnd: number = this.elementRef.nativeElement.selectionEnd;\n            this.renderer.setProperty(\n                this.elementRef.nativeElement,\n                'value',\n                this.getTimeStringFromDate(timeToApply, this.timeFormat));\n            this.elementRef.nativeElement.selectionStart = selectionStart;\n            this.elementRef.nativeElement.selectionEnd = selectionEnd;\n        }\n\n        (<FormControl> this.ngControl.control).updateValueAndValidity();\n        const result = this.ngControl.errors === null && timeToApply !== undefined ? timeToApply : null;\n        this.onChange(result);\n        this.stateChanges.next();\n    }\n\n    private upDownTimeByArrowKeys(event: KeyboardEvent): void {\n        event.preventDefault();\n\n        let changedTime: Date | undefined = this.currentDateTimeInput;\n        if (changedTime !== undefined) {\n            const cursorPos = this.elementRef.nativeElement.selectionStart;\n\n            const modifiedTimePart = this.getTimeEditMetrics(cursorPos)\n                .modifiedTimePart;\n            const keyCode: string = this.getKeyCode(event);\n            if (keyCode === ARROW_UP_KEYCODE) { changedTime = this.incrementTime(changedTime, modifiedTimePart); }\n            if (keyCode === ARROW_DOWN_KEYCODE) { changedTime = this.decrementTime(changedTime, modifiedTimePart); }\n            this.applyInputChanges({ changedTime });\n            this.createSelectionOfTimeComponentInInput(cursorPos);\n        }\n    }\n\n    private switchSelectionBetweenTimeparts(event: KeyboardEvent): void {\n        const changedTime: Date | undefined = this.currentDateTimeInput;\n        const keyCode: string = this.getKeyCode(event);\n\n        if (changedTime !== undefined) {\n            let cursorPos: number = this.elementRef.nativeElement.selectionStart;\n            if (keyCode === ARROW_LEFT_KEYCODE) {\n                cursorPos = this.getCursorPositionOfPrevTimePartStart(cursorPos, this.elementRef.nativeElement.value);\n            } else if (keyCode === ARROW_RIGHT_KEYCODE) {\n                cursorPos = this.getCursorPositionOfNextTimePartStart(cursorPos, this.elementRef.nativeElement.value);\n            }\n            this.createSelectionOfTimeComponentInInput(cursorPos);\n        }\n    }\n\n    /**\n     * @description Microsoft EDGE doesn't support KeyboaedEvent.code thus we need this helper\n     */\n    private getKeyCode(event: KeyboardEvent): string {\n        return event.code || event.key;\n    }\n\n    private createSelectionOfTimeComponentInInput(cursorPos: number): void {\n        setTimeout(() => {\n            const newEditParams = this.getTimeEditMetrics(cursorPos);\n            this.elementRef.nativeElement.selectionStart = newEditParams.cursorStartPosition;\n            this.elementRef.nativeElement.selectionEnd = newEditParams.cursorEndPosition;\n        });\n    }\n\n    private incrementTime(dateVal: Date,\n                          whatToIncrement: TimeParts = TimeParts.seconds): Date {\n        let { hours, minutes, seconds } = this.getTimeDigitsFromDate(dateVal);\n\n        switch (whatToIncrement) {\n            case TimeParts.hours:\n                hours++;\n                break;\n            case TimeParts.minutes:\n                minutes++;\n                break;\n            case TimeParts.seconds:\n                seconds++;\n                break;\n            default:\n        }\n\n        if (seconds > SECONDS_PER_MINUTE) { seconds = 0; }\n\n        if (minutes > MINUTES_PER_HOUR) { minutes = 0; }\n\n        if (hours > HOURS_PER_DAY) { hours = 0; }\n\n        return <Date> this.getDateFromTimeDigits(hours, minutes, seconds);\n    }\n\n    /**\n     * @description Decrement part of time\n     */\n    private decrementTime(dateVal: Date,\n                          whatToDecrement: TimeParts = TimeParts.seconds): Date {\n        let { hours, minutes, seconds } = this.getTimeDigitsFromDate(dateVal);\n\n        switch (whatToDecrement) {\n            case TimeParts.hours:\n                hours--;\n                break;\n            case TimeParts.minutes:\n                minutes--;\n                break;\n            case TimeParts.seconds:\n                seconds--;\n                break;\n            default:\n        }\n\n        if (seconds < 0) { seconds = SECONDS_PER_MINUTE; }\n\n        if (minutes < 0) { minutes = MINUTES_PER_HOUR; }\n\n        if (hours < 0) { hours = HOURS_PER_DAY; }\n\n        return <Date> this.getDateFromTimeDigits(hours, minutes, seconds);\n    }\n\n    private getCursorPositionOfPrevTimePartStart(cursorPos: number, timeString: string): number {\n        return cursorPos === 0 ? timeString.length : cursorPos - 1;\n    }\n\n    private getCursorPositionOfNextTimePartStart(cursorPos: number,\n                                                 timeString: string,\n                                                 timeDevider: string = ':'): number {\n        const nextDividerPos: number = timeString.indexOf(timeDevider, cursorPos);\n\n        return nextDividerPos !== undefined ? nextDividerPos + 1 : 0;\n    }\n\n    /**\n     * @description Get params for arrow-keys (up/down) time valie edit.\n     * @param cursorPosition Current cursor position in timeString\n     */\n    private getTimeEditMetrics(cursorPosition: number): {\n        modifiedTimePart: TimeParts;\n        cursorStartPosition: number;\n        cursorEndPosition: number;\n    } {\n        const timeString: string = this.elementRef.nativeElement.value;\n        let modifiedTimePart: TimeParts;\n        let cursorStartPosition: number;\n        let cursorEndPosition: number;\n        const hoursIndex = 0;\n        const minutesIndex = timeString.indexOf(':', hoursIndex + 1);\n        const secondsIndex = minutesIndex !== -1 ? timeString.indexOf(':', minutesIndex + 1) : -1;\n\n        if (secondsIndex !== -1 && cursorPosition > secondsIndex) {\n            modifiedTimePart = TimeParts.seconds;\n            cursorStartPosition = secondsIndex + 1;\n            cursorEndPosition = timeString.length;\n        } else if (minutesIndex !== -1 && cursorPosition > minutesIndex) {\n            modifiedTimePart = TimeParts.minutes;\n            cursorStartPosition = minutesIndex + 1;\n            cursorEndPosition = secondsIndex > -1 ? secondsIndex : timeString.length;\n        } else {\n            modifiedTimePart = TimeParts.hours;\n            cursorStartPosition = hoursIndex;\n            cursorEndPosition = minutesIndex !== -1 ? minutesIndex : timeString.length;\n        }\n\n        return {\n            modifiedTimePart,\n            cursorStartPosition,\n            cursorEndPosition\n        };\n    }\n\n    /**\n     * @description Create time string for displaying inside input element of UI\n     */\n    private getTimeStringFromDate(tempVal: Date,\n                                  timeFormat: TimeFormats = DEFAULT_TIME_FORMAT): string {\n        const hours: string = this.getNumberWithLeadingZero(tempVal.getHours());\n        const minutes: string = this.getNumberWithLeadingZero(tempVal.getMinutes());\n        const seconds: string = this.getNumberWithLeadingZero(tempVal.getSeconds());\n\n        const formattedTimeGenerators = {\n            [TimeFormats.HHmm]: () => `${hours}:${minutes}`,\n            [TimeFormats.HHmmss]: () => `${hours}:${minutes}:${seconds}`\n        };\n\n        return formattedTimeGenerators[timeFormat]();\n    }\n\n    private getParsedTimeParts(timeString: string): {\n        hoursOnly: any;\n        hoursAndMinutes: any;\n        hoursAndMinutesAndSeconds: any;\n    } {\n        const momentWrappedTime = this.dateAdapter.parse(timeString, [\n            'h:m a',\n            'h:m:s a',\n            'H:m',\n            'H:m:s'\n        ]);\n\n        const convertedTimeString = momentWrappedTime !== null\n            ? momentWrappedTime.format('HH:mm:ss')\n            : '';\n\n        const hoursAndMinutesAndSeconds = convertedTimeString.match(HOURS_MINUTES_SECONDS_REGEXP);\n        const hoursAndMinutes = convertedTimeString.match(HOURS_MINUTES_REGEXP);\n        const hoursOnly = convertedTimeString.match(HOURS_ONLY_REGEXP);\n\n        return {\n            hoursOnly,\n            hoursAndMinutes,\n            hoursAndMinutesAndSeconds\n        };\n    }\n\n    /**\n     * @description Create Date object from separate parts of time\n     */\n    private getDateFromTimeDigits(hours: number, minutes: number, seconds: number = 0): Date | undefined {\n        return this.getDateFromTimeString(`${hours}:${minutes}:${seconds}`);\n    }\n\n    private getDateFromTimeString(timeString: string | undefined): Date | undefined {\n        // TODO Use moment-js\n        if (timeString === undefined) { return; }\n\n        const {\n            hoursOnly,\n            hoursAndMinutes,\n            hoursAndMinutesAndSeconds\n        } = this.getParsedTimeParts(timeString);\n\n        if (timeString.trim().length === 0 ||\n            hoursOnly === null && hoursAndMinutes === null && hoursAndMinutesAndSeconds === null) {\n            return;\n        }\n\n        // tslint:disable no-magic-numbers\n        let hours: number = 0;\n        let minutes: number = 0;\n        let seconds: number = 0;\n\n        if (hoursOnly) {\n            hours = Number(hoursOnly[1]);\n        } else if (hoursAndMinutes) {\n            hours = Number(hoursAndMinutes[1]);\n            minutes = Number(hoursAndMinutes[2]);\n        } else if (hoursAndMinutesAndSeconds) {\n            hours = Number(hoursAndMinutesAndSeconds[1]);\n            minutes = Number(hoursAndMinutesAndSeconds[2]);\n            seconds = Number(hoursAndMinutesAndSeconds[3]);\n        }\n        // const timestamp: number = Date.parse(fullDateString);\n        const resultDate: Date = new Date(1970, 0, 1, hours, minutes, seconds);\n        // tslint:enable no-magic-numbers\n\n        return isNaN(resultDate.getTime()) ? undefined : resultDate;\n    }\n\n    private getNumberWithLeadingZero(digit: number): string {\n        const MAX_DIGIT_WITH_LEADING_ZERO: number = 9;\n\n        return digit > MAX_DIGIT_WITH_LEADING_ZERO ? `${digit}` : `0${digit}`;\n    }\n\n    private getTimeDigitsFromDate(dateVal: Date): { hours: number; minutes: number; seconds: number } {\n        return {\n            hours: dateVal.getHours(),\n            minutes: dateVal.getMinutes(),\n            seconds: dateVal.getSeconds()\n        };\n    }\n\n    private parseValidator(): ValidationErrors | null {\n        return this.currentDateTimeInput === undefined ?\n            { mcTimepickerParse: { text: this.elementRef.nativeElement.value } } :\n            null;\n    }\n\n    private minTimeValidator(): ValidationErrors | null {\n\n        if (this.currentDateTimeInput !== undefined &&\n            this.minDateTime !== undefined &&\n            this.isTimeLowerThenMin(this.currentDateTimeInput)) {\n            return { mcTimepickerLowerThenMintime: { text: this.elementRef.nativeElement.value } };\n        }\n\n        return null;\n    }\n\n    private maxTimeValidator(): ValidationErrors | null {\n        if (this.currentDateTimeInput !== undefined &&\n            this.maxDateTime !== undefined &&\n            this.isTimeGreaterThenMax(this.currentDateTimeInput)) {\n            return { mcTimepickerHigherThenMaxtime: { text: this.elementRef.nativeElement.value } };\n        }\n\n        return null;\n    }\n\n    private isTimeLowerThenMin(timeToCompare: Date): boolean {\n        return timeToCompare.getTime() - (<Date> this.minDateTime).getTime() < 0;\n    }\n\n    private isTimeGreaterThenMax(timeToCompare: Date): boolean {\n        return timeToCompare.getTime() - (<Date> this.maxDateTime).getTime() >= 0;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McTimepicker } from './timepicker';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        FormsModule\n    ],\n    declarations: [\n        McTimepicker\n    ],\n    exports: [\n        McTimepicker\n    ]\n})\nexport class McTimepickerModule {}\n","import { InjectionToken } from '@angular/core';\n\n\n/** Injection token that can be used to access the data that was passed in to a sidepanel. */\nexport const MC_SIDEPANEL_DATA = new InjectionToken<any>('McSidepanelData');\n\nexport enum McSidepanelPosition {\n    Right = 'right',\n    Left = 'left',\n    Top = 'top',\n    Bottom = 'bottom'\n}\n\nexport class McSidepanelConfig<D = any> {\n    /** ID for the sidepanel. If omitted, a unique one will be generated. */\n    id?: string;\n\n    /** Data being injected into the child component. */\n    data?: D | null = null;\n\n    position?: McSidepanelPosition = McSidepanelPosition.Right;\n\n    /** Whether the sidepanel has a backdrop. */\n    hasBackdrop?: boolean = true;\n\n    /** When we open multiple sidepanels, backdrop appears only once, except cases then this flag is true. */\n    requiredBackdrop?: boolean = false;\n\n    /** Whether the user can use escape or clicking outside to close the sidepanel. */\n    disableClose?: boolean = false;\n\n    /** Custom class for the overlay pane. */\n    overlayPanelClass?: string | string[] = '';\n}\n","import { animate, AnimationTriggerMetadata, state, style, transition, trigger } from '@angular/animations';\nimport { AnimationCurves } from '@ptsecurity/mosaic/core';\n\nimport { McSidepanelPosition } from './sidepanel-config';\n\n\nexport enum McSidepanelAnimationState {\n    Void = 'void',\n    Visible = 'visible',\n    Hidden = 'hidden'\n}\n\n// TODO Find a way to use dynamic keys and avoid error \"Expression form not supported.\"\n// tslint:disable-next-line\nexport const mcSidepanelTransformAnimation: Record<McSidepanelPosition, { in: string; out: string }> = {\n    right: { in: 'translateX(100%)', out: 'translateX(0%)' },\n    left: { in: 'translateX(-100%)', out: 'translateX(0%)' },\n    top: { in: 'translateY(-100%)', out: 'translateY(0%)' },\n    bottom: { in: 'translateY(100%)', out: 'translateY(0%)' }\n};\n\nexport const mcSidepanelAnimations: {\n    readonly sidepanelState: AnimationTriggerMetadata;\n} = {\n    sidepanelState: trigger('state', [\n        state('hidden',\n            style({ transform: '{{transformIn}}' }),\n            { params: { transformIn: mcSidepanelTransformAnimation[McSidepanelPosition.Right].in }}\n        ),\n        state('visible',\n            style({ transform: '{{transformOut}}' }),\n            { params: { transformOut: mcSidepanelTransformAnimation[McSidepanelPosition.Right].out }}\n        ),\n        transition('visible => void, visible => hidden',\n            animate(`200ms ${AnimationCurves.AccelerationCurve}`)),\n        transition('void => visible',\n            animate(`200ms ${AnimationCurves.DecelerationCurve}`))\n    ])\n};\n","import { AnimationEvent } from '@angular/animations';\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ComponentRef,\n    ElementRef,\n    EmbeddedViewRef,\n    EventEmitter, Inject, InjectionToken,\n    OnDestroy,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal } from '@ptsecurity/cdk/portal';\n\nimport {\n    mcSidepanelAnimations,\n    McSidepanelAnimationState,\n    mcSidepanelTransformAnimation\n} from './sidepanel-animations';\n\nimport { McSidepanelConfig, McSidepanelPosition } from './sidepanel-config';\n\n\nexport const MC_SIDEPANEL_WITH_INDENT =\n    new InjectionToken<boolean>('mc-sidepanel-with-indent');\n\nexport const MC_SIDEPANEL_WITH_SHADOW =\n    new InjectionToken<boolean>('mc-sidepanel-with-shadow');\n\n@Component({\n    selector: 'mc-sidepanel-container',\n    templateUrl: './sidepanel-container.component.html',\n    styleUrls: ['./sidepanel.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    animations: [mcSidepanelAnimations.sidepanelState],\n    host: {\n        class: 'mc-sidepanel-container',\n        tabindex: '-1',\n        role: 'dialog',\n        'aria-modal': 'true',\n        '[attr.id]': 'id',\n        '[@state]': `{\n            value: animationState,\n            params: animationTransform\n        }`,\n        '(@state.start)': 'onAnimation($event)',\n        '(@state.done)': 'onAnimation($event)'\n    }\n})\nexport class McSidepanelContainerComponent extends BasePortalOutlet implements OnDestroy {\n    /** ID for the container DOM element. */\n    id: string;\n\n    /** The portal outlet inside of this container into which the content will be loaded. */\n    @ViewChild(CdkPortalOutlet) portalOutlet: CdkPortalOutlet;\n\n    /** The state of the sidepanel animations. */\n    animationState: McSidepanelAnimationState = McSidepanelAnimationState.Void;\n\n    animationTransform: { transformIn: string; transformOut: string };\n\n    /** Emits whenever the state of the animation changes. */\n    animationStateChanged = new EventEmitter<AnimationEvent>();\n\n    /** Whether the component has been destroyed. */\n    private destroyed: boolean;\n\n    constructor(\n        private elementRef: ElementRef<HTMLElement>,\n        private changeDetectorRef: ChangeDetectorRef,\n        public sidepanelConfig: McSidepanelConfig,\n        @Inject(MC_SIDEPANEL_WITH_INDENT) public withIndent: boolean,\n        @Inject(MC_SIDEPANEL_WITH_SHADOW) public withShadow: boolean) {\n        super();\n    }\n\n    ngOnDestroy(): void {\n        this.destroyed = true;\n    }\n\n    /** Attach a component portal as content to this sidepanel container. */\n    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n        this.validatePortalAttached();\n        this.setAnimation();\n        this.setPanelClass();\n\n        return this.portalOutlet.attachComponentPortal(portal);\n    }\n\n    /** Attach a template portal as content to this sidepanel container. */\n    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n        this.validatePortalAttached();\n        this.setAnimation();\n        this.setPanelClass();\n\n        return this.portalOutlet.attachTemplatePortal(portal);\n    }\n\n    /** Begin animation of the sidepanel entrance into view. */\n    enter(): void {\n        if (!this.destroyed) {\n            this.animationState = McSidepanelAnimationState.Visible;\n            this.changeDetectorRef.detectChanges();\n        }\n    }\n\n    /** Begin animation of the sidepanel exiting from view. */\n    exit(): void {\n        if (!this.destroyed) {\n            this.animationState = McSidepanelAnimationState.Hidden;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    onAnimation(event: AnimationEvent) {\n        this.animationStateChanged.emit(event);\n    }\n\n    private setAnimation() {\n        const position: McSidepanelPosition = this.sidepanelConfig.position!;\n\n        this.animationTransform = {\n            transformIn: mcSidepanelTransformAnimation[position].in,\n            transformOut: mcSidepanelTransformAnimation[position].out\n        };\n    }\n\n    private setPanelClass() {\n        const element: HTMLElement = this.elementRef.nativeElement;\n        const position: McSidepanelPosition = this.sidepanelConfig.position!;\n\n        element.classList.add(`mc-sidepanel-container_${position}`);\n\n        if (this.withShadow) {\n            element.classList.add('mc-sidepanel-container_shadowed');\n        }\n    }\n\n    private validatePortalAttached() {\n        if (this.portalOutlet.hasAttached()) {\n            throw Error('Attempting to attach sidepanel content after content is already attached');\n        }\n    }\n}\n","import { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { merge, Observable, Subject } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\n\nimport { McSidepanelAnimationState } from './sidepanel-animations';\nimport { McSidepanelConfig } from './sidepanel-config';\nimport { McSidepanelContainerComponent } from './sidepanel-container.component';\n\n\n// Counter for unique sidepanel ids.\nlet uniqueId = 0;\n\nexport class McSidepanelRef<T = any, R = any> {\n    readonly id: string;\n\n    /** Instance of the component making up the content of the sidepanel. */\n    instance: T;\n\n    /** Subject for notifying the user that the sidepanel has been closed and dismissed. */\n    private readonly afterClosed$ = new Subject<R | undefined>();\n\n    /** Subject for notifying the user that the sidepanel has opened and appeared. */\n    private readonly afterOpened$ = new Subject<void>();\n\n    /** Result to be passed down to the `afterDismissed` stream. */\n    private result: R | undefined;\n\n    constructor(\n        public containerInstance: McSidepanelContainerComponent,\n        private overlayRef: OverlayRef,\n        public config: McSidepanelConfig) {\n\n        this.id = this.config.id || `mc-sidepanel-${uniqueId++}`;\n        this.containerInstance.id = this.id;\n\n        // Emit when opening animation completes\n        containerInstance.animationStateChanged.pipe(\n            filter(\n                (event) => event.phaseName === 'done' && event.toState === McSidepanelAnimationState.Visible\n            ),\n            take(1)\n        ).subscribe(() => {\n            this.afterOpened$.next();\n            this.afterOpened$.complete();\n        });\n\n        // Dispose overlay when closing animation is complete\n        containerInstance.animationStateChanged.pipe(\n            filter(\n                (event) => event.phaseName === 'done' && event.toState === McSidepanelAnimationState.Hidden\n            ),\n            take(1)\n        ).subscribe(() => {\n            overlayRef.dispose();\n            this.afterClosed$.next(this.result);\n            this.afterClosed$.complete();\n        });\n\n        if (!containerInstance.sidepanelConfig.disableClose) {\n            merge(\n                overlayRef.backdropClick(),\n                overlayRef.keydownEvents().pipe(\n                    // tslint:disable:deprecation\n                    // keyCode is deprecated, but IE11 and Edge don't support code property, which we need use instead\n                    filter((event) => event.keyCode === ESCAPE)\n                )\n            ).subscribe(() => this.close());\n        }\n    }\n\n    close(result?: R): void {\n        if (!this.afterClosed$.closed) {\n            // Transition the backdrop in parallel to the sidepanel.\n            this.containerInstance.animationStateChanged.pipe(\n                filter((event) => event.phaseName === 'done'),\n                take(1)\n            ).subscribe(() => this.overlayRef.detachBackdrop());\n\n            this.result = result;\n            this.containerInstance.exit();\n        }\n    }\n\n    /** Gets an observable that is notified when the sidepanel is finished closing. */\n    afterClosed(): Observable<R | undefined> {\n        return this.afterClosed$.asObservable();\n    }\n\n    /** Gets an observable that is notified when the sidepanel has opened and appeared. */\n    afterOpened(): Observable<void> {\n        return this.afterOpened$.asObservable();\n    }\n}\n","import {\n    ComponentRef,\n    Inject,\n    Injectable,\n    InjectionToken,\n    Injector, OnDestroy,\n    Optional,\n    SkipSelf,\n    TemplateRef\n} from '@angular/core';\nimport { Overlay, OverlayConfig, OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal, IComponentType, PortalInjector, TemplatePortal } from '@ptsecurity/cdk/portal';\n\nimport { MC_SIDEPANEL_DATA, McSidepanelConfig } from './sidepanel-config';\nimport {\n    McSidepanelContainerComponent,\n    MC_SIDEPANEL_WITH_INDENT,\n    MC_SIDEPANEL_WITH_SHADOW\n} from './sidepanel-container.component';\nimport { McSidepanelRef } from './sidepanel-ref';\n\n\n/** Injection token that can be used to specify default sidepanel options. */\nexport const MC_SIDEPANEL_DEFAULT_OPTIONS =\n    new InjectionToken<McSidepanelConfig>('mc-sidepanel-default-options');\n\n@Injectable()\nexport class McSidepanelService implements OnDestroy {\n    private openedSidepanelsAtThisLevel: McSidepanelRef[] = [];\n\n    /** Keeps track of the currently-open sidepanels. */\n    get openedSidepanels(): McSidepanelRef[] {\n        return this.parentSidepanelService ? this.parentSidepanelService.openedSidepanels :\n            this.openedSidepanelsAtThisLevel;\n    }\n\n    constructor(\n        private overlay: Overlay,\n        private injector: Injector,\n        @Optional() @Inject(MC_SIDEPANEL_DEFAULT_OPTIONS) private defaultOptions: McSidepanelConfig,\n        @Optional() @SkipSelf() private parentSidepanelService: McSidepanelService) {\n    }\n\n    ngOnDestroy() {\n        // Only close the sidepanels at this level on destroy\n        // since the parent service may still be active.\n        this.closeSidepanels(this.openedSidepanelsAtThisLevel);\n    }\n\n    open<T, D = any>(componentOrTemplateRef: IComponentType<T> | TemplateRef<T>,\n                     config?: McSidepanelConfig<D>): McSidepanelRef<T> {\n        const fullConfig = {\n            ...(this.defaultOptions || new McSidepanelConfig()),\n            ...config\n        };\n\n        if (fullConfig.id && this.getSidepanelById(fullConfig.id)) {\n            throw Error(`Sidepanel with id \"${fullConfig.id}\" exists already. The sidepanel id must be unique.`);\n        }\n\n        const overlayRef = this.createOverlay(fullConfig);\n        const container = this.attachContainer(overlayRef, fullConfig);\n        const ref = new McSidepanelRef(container, overlayRef, fullConfig);\n\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n                $implicit: fullConfig.data,\n                sidepanelRef: ref\n            } as any));\n        } else {\n            const injector = this.createInjector(fullConfig, ref, container);\n            const portal = new ComponentPortal(componentOrTemplateRef, undefined, injector);\n            const contentRef = container.attachComponentPortal(portal);\n\n            ref.instance = contentRef.instance;\n        }\n\n        this.openedSidepanels.push(ref);\n        ref.afterClosed().subscribe(() => this.removeOpenSidepanel(ref));\n        container.enter();\n\n        return ref;\n    }\n\n    /**\n     * Closes all of the currently-open sidepanels.\n     */\n    closeAll(): void {\n        this.closeSidepanels(this.openedSidepanels);\n    }\n\n    /**\n     * Finds an open sidepanel by its id.\n     * @param id ID to use when looking up the sidepanel.\n     */\n    getSidepanelById(id: string): McSidepanelRef | undefined {\n        return this.openedSidepanels.find((sidepanel) => sidepanel.id === id);\n    }\n\n    /**\n     * Attaches the sidepanel container component to the overlay.\n     */\n    private attachContainer(overlayRef: OverlayRef, config: McSidepanelConfig): McSidepanelContainerComponent {\n        const openedSidepanelsWithSamePosition = this.getOpenedSidepanelsWithSamePosition(config);\n\n        const injector = new PortalInjector(this.injector, new WeakMap<any>([\n            [McSidepanelConfig, config],\n            [MC_SIDEPANEL_WITH_INDENT, openedSidepanelsWithSamePosition.length >= 1],\n            [MC_SIDEPANEL_WITH_SHADOW, openedSidepanelsWithSamePosition.length < 2] // tslint:disable-line\n        ]));\n\n        const containerPortal = new ComponentPortal(McSidepanelContainerComponent, undefined, injector);\n        const containerRef: ComponentRef<McSidepanelContainerComponent> = overlayRef.attach(containerPortal);\n\n        return containerRef.instance;\n    }\n\n    /**\n     * Creates a custom injector to be used inside the sidepanel. This allows a component loaded inside\n     * of a sidepanel to close itself and, optionally, to return a value.\n     * @param config Config object that is used to construct the sidepanel.\n     * @param sidepanelRef Reference to the sidepanel.\n     * @param sidepanelContainer Sidepanel container element that wraps all of the contents.\n     * @returns The custom injector that can be used inside the sidepanel.\n     */\n    private createInjector<T>(\n        config: McSidepanelConfig,\n        sidepanelRef: McSidepanelRef<T>,\n        sidepanelContainer: McSidepanelContainerComponent): PortalInjector {\n\n        // The McSidepanelContainerComponent is injected in the portal as the McSidepanelContainerComponent and\n        // the sidepanel's content are created out of the same ViewContainerRef and as such, are siblings for injector\n        // purposes. To allow the hierarchy that is expected, the McSidepanelContainerComponent is explicitly\n        // added to the injection tokens.\n        const injectionTokens = new WeakMap<any>([\n            [McSidepanelContainerComponent, sidepanelContainer],\n            [MC_SIDEPANEL_DATA, config.data],\n            [McSidepanelRef, sidepanelRef]\n        ]);\n\n        return new PortalInjector(this.injector, injectionTokens);\n    }\n\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified sidepanel config.\n     */\n    private createOverlay(config: McSidepanelConfig): OverlayRef {\n        const overlayConfig = new OverlayConfig({\n            hasBackdrop: config.hasBackdrop,\n            backdropClass: this.getBackdropClass(config),\n            maxWidth: '100%',\n            panelClass: config.overlayPanelClass,\n            scrollStrategy: this.overlay.scrollStrategies.block(),\n            positionStrategy: this.overlay.position().global()\n        });\n\n        return this.overlay.create(overlayConfig);\n    }\n\n    private closeSidepanels(sidepanels: McSidepanelRef[]) {\n        const reversedOpenedSidepanels = [...sidepanels.reverse()];\n\n        reversedOpenedSidepanels.forEach((sidepanelRef: McSidepanelRef) => {\n            sidepanelRef.close();\n        });\n    }\n\n    private getBackdropClass(config: McSidepanelConfig): string {\n        const hasOpenedSidepanelWithBackdrop =\n            this.openedSidepanels.some((sidepanelRef) => sidepanelRef.config.hasBackdrop!);\n\n        return config.requiredBackdrop || !hasOpenedSidepanelWithBackdrop ? 'cdk-overlay-dark-backdrop' :\n            'cdk-overlay-transparent-backdrop';\n    }\n\n    private getOpenedSidepanelsWithSamePosition(config: McSidepanelConfig): McSidepanelRef[] {\n        return this.openedSidepanels.filter((sidepanelRef) => sidepanelRef.config.position === config.position);\n    }\n\n    /**\n     * Removes a sidepanel from the array of open sidepanels.\n     * @param sidepanelRef Sidepanel to be removed.\n     */\n    private removeOpenSidepanel(sidepanelRef: McSidepanelRef) {\n        const index = this.openedSidepanels.indexOf(sidepanelRef);\n\n        if (index > -1) {\n            this.openedSidepanels.splice(index, 1);\n        }\n    }\n}\n","import { Component, Directive, ElementRef, Input, OnChanges, OnInit, Optional, SimpleChanges } from '@angular/core';\n\nimport { McSidepanelRef } from './sidepanel-ref';\nimport { McSidepanelService } from './sidepanel.service';\n\n\n/**\n * Button that will close the current sidepanel.\n */\n@Directive({\n    selector: 'button[mc-sidepanel-close], button[mcSidepanelClose]',\n    host: {\n        '(click)': 'sidepanelRef.close(sidepanelResult)',\n        class: 'mc-sidepanel-close',\n        type: 'button'\n    }\n})\nexport class McSidepanelClose implements OnInit, OnChanges {\n    @Input('mc-sidepanel-close') sidepanelResult: any;\n\n    @Input('mcSidepanelClose') mcSidepanelClose: any;\n\n    constructor(\n        @Optional() public sidepanelRef: McSidepanelRef,\n        private elementRef: ElementRef<HTMLElement>,\n        private sidepanelService: McSidepanelService\n    ) {}\n\n    ngOnInit() {\n        if (!this.sidepanelRef) {\n            // When this directive is included in a sidepanel via TemplateRef (rather than being\n            // in a Component), the SidepanelRef isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the SidepanelRef by\n            // ID.\n            // This must occur in `onInit`, as the ID binding for the sidepanel container won't\n            // be resolved at constructor time. We use setTimeout by same reason.\n            setTimeout(() => {\n                this.sidepanelRef = getClosestSidepanel(this.elementRef, this.sidepanelService.openedSidepanels)!;\n            });\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const proxiedChange = changes.mcSidepanelClose || changes.sidepanelResult;\n\n        if (proxiedChange) {\n            this.sidepanelResult = proxiedChange.currentValue;\n        }\n    }\n}\n\n/**\n * Header of a sidepanel.\n */\n@Component({\n    selector: 'mc-sidepanel-header',\n    template: `\n        <div class=\"mc-sidepanel-title\">\n            <ng-content></ng-content>\n        </div>\n        <button *ngIf=\"closeable\" mc-sidepanel-close>\n            <span class=\"mc-sidepanel-close-x\">\n                <i mc-icon=\"mc-close-L_16\" class=\"mc-icon mc-icon_light\" color=\"second\"></i>\n            </span>\n        </button>\n    `,\n    host: {\n        class: 'mc-sidepanel-header'\n    }\n})\nexport class McSidepanelHeader {\n    @Input() closeable: boolean;\n}\n\n/**\n * Scrollable content container of a sidepanel.\n */\n@Directive({\n    selector: 'mc-sidepanel-body, [mc-sidepanel-body], mcSidepanelBody',\n    host: {\n        class: 'mc-sidepanel-body'\n    }\n})\nexport class McSidepanelBody {}\n\n/**\n * Footer of a sidepanel.\n */\n@Directive({\n    selector: 'mc-sidepanel-footer, [mc-sidepanel-footer], mcSidepanelFooter',\n    host: {\n        class: 'mc-sidepanel-footer'\n    }\n})\nexport class McSidepanelFooter {}\n\n/**\n * Actions block of a sidepanel footer.\n */\n@Directive({\n    selector: 'mc-sidepanel-actions, [mc-sidepanel-actions], mcSidepanelActions',\n    host: {\n        class: 'mc-sidepanel-actions'\n    }\n})\nexport class McSidepanelActions {}\n\n/**\n * Finds the closest McSidepanelRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a sidepanel.\n * @param openSidepanels References to the currently-open sidepanels.\n */\nfunction getClosestSidepanel(element: ElementRef<HTMLElement>, openSidepanels: McSidepanelRef[]) {\n    let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n    while (parent && !parent.classList.contains('mc-sidepanel-container')) {\n        parent = parent.parentElement;\n    }\n\n    return parent ? openSidepanels.find((sidepanel) => sidepanel.id === parent!.id) : null;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { PortalModule } from '@ptsecurity/cdk/portal';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McSidepanelContainerComponent } from './sidepanel-container.component';\nimport {\n    McSidepanelActions,\n    McSidepanelBody,\n    McSidepanelClose,\n    McSidepanelFooter,\n    McSidepanelHeader\n} from './sidepanel-directives';\nimport { McSidepanelService } from './sidepanel.service';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        PortalModule,\n        McCommonModule,\n        McIconModule\n    ],\n    providers: [McSidepanelService],\n    declarations: [\n        McSidepanelContainerComponent,\n        McSidepanelClose,\n        McSidepanelHeader,\n        McSidepanelBody,\n        McSidepanelFooter,\n        McSidepanelActions\n    ],\n    entryComponents: [McSidepanelContainerComponent],\n    exports: [\n        McSidepanelContainerComponent,\n        McSidepanelClose,\n        McSidepanelHeader,\n        McSidepanelBody,\n        McSidepanelFooter,\n        McSidepanelActions\n    ]\n})\nexport class McSidepanelModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { MC_SELECT_SCROLL_STRATEGY_PROVIDER, McOptionModule } from '@ptsecurity/mosaic/core';\nimport { McFormFieldModule } from '@ptsecurity/mosaic/form-field';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\nimport { McTagsModule } from '@ptsecurity/mosaic/tags';\n\nimport { McSelect, McSelectTrigger } from './select.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        McOptionModule,\n        McIconModule,\n        McTagsModule\n    ],\n    exports: [McFormFieldModule, McSelect, McSelectTrigger, McOptionModule, CommonModule],\n    declarations: [McSelect, McSelectTrigger],\n    providers: [MC_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class McSelectModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    NgZone,\n    OnDestroy,\n    Output,\n    QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { BACKSPACE, DELETE, SPACE } from '@ptsecurity/cdk/keycodes';\nimport {\n    CanColor,\n    CanColorCtor,\n    CanDisable,\n    CanDisableCtor,\n    mixinColor,\n    mixinDisabled\n} from '@ptsecurity/mosaic/core';\nimport { McIcon } from '@ptsecurity/mosaic/icon';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\n\n// tslint:disable-next-line:naming-convention\nexport interface McTagEvent {\n    tag: McTag;\n}\n\n/** Event object emitted by McTag when selected or deselected. */\nexport class McTagSelectionChange {\n    constructor(public source: McTag, public selected: boolean, public isUserInput = false) {}\n}\n\n\nconst TAG_ATTRIBUTE_NAMES = ['mc-basic-tag'];\n\n/**\n * Dummy directive to add CSS class to tag avatar.\n * @docs-private\n */\n@Directive({\n    selector: 'mc-tag-avatar, [mcTagAvatar]',\n    host: { class: 'mc-tag-avatar' }\n})\nexport class McTagAvatar {}\n\n/**\n * Dummy directive to add CSS class to tag trailing icon.\n * @docs-private\n */\n@Directive({\n    selector: 'mc-tag-trailing-icon, [mcTagTrailingIcon]',\n    host: { class: 'mc-tag-trailing-icon' }\n})\nexport class McTagTrailingIcon {}\n\nexport class McTagBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const _McTagMixinBase: CanColorCtor & CanDisableCtor & typeof McTagBase = mixinColor(mixinDisabled(McTagBase));\n\n\n@Component({\n    selector: 'mc-tag, [mc-tag], mc-basic-tag, [mc-basic-tag]',\n    exportAs: 'mcTag',\n    templateUrl: 'tag.partial.html',\n    styleUrls: ['./tag.css'],\n    inputs: ['color', 'disabled'],\n    host: {\n        class: 'mc-tag',\n        '[attr.tabindex]': 'disabled ? null : -1',\n        '[class.mc-tag-selected]': 'selected',\n        '[class.mc-tag-with-avatar]': 'avatar',\n        '[class.mc-tag-with-trailing-icon]': 'trailingIcon || removeIcon',\n        '[class.mc-tag-disabled]': 'disabled',\n        '[class.mc-disabled]': 'disabled',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': 'handleClick($event)',\n        '(keydown)': 'handleKeydown($event)',\n        '(focus)': 'focus()',\n        '(blur)': 'blur()'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McTag extends _McTagMixinBase implements IFocusableOption, OnDestroy, CanColor, CanDisable {\n    /** Emits when the tag is focused. */\n    readonly onFocus = new Subject<McTagEvent>();\n\n    /** Emits when the tag is blured. */\n    readonly onBlur = new Subject<McTagEvent>();\n\n    nativeElement: HTMLElement;\n\n    /** Whether the tag has focus. */\n    hasFocus: boolean = false;\n\n    /** Whether the tag list is selectable */\n    tagListSelectable: boolean = true;\n\n    @ContentChildren(McIcon) contentChildren: QueryList<McIcon>;\n\n    /** The tag avatar */\n    @ContentChild(McTagAvatar) avatar: McTagAvatar;\n\n    /** The tag's trailing icon. */\n    @ContentChild(McTagTrailingIcon) trailingIcon: McTagTrailingIcon;\n\n    /** The tag's remove toggler. */\n    @ContentChild(forwardRef(() => McTagRemove)) removeIcon: McTagRemove;\n\n    /** Emitted when the tag is selected or deselected. */\n    @Output() readonly selectionChange: EventEmitter<McTagSelectionChange> =\n        new EventEmitter<McTagSelectionChange>();\n\n    /** Emitted when the tag is destroyed. */\n    @Output() readonly destroyed: EventEmitter<McTagEvent> = new EventEmitter<McTagEvent>();\n\n    /** Emitted when a tag is to be removed. */\n    @Output() readonly removed: EventEmitter<McTagEvent> = new EventEmitter<McTagEvent>();\n\n    /** Whether the tag is selected. */\n    @Input()\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    set selected(value: boolean) {\n        const coercedValue = coerceBooleanProperty(value);\n\n        if (coercedValue !== this._selected) {\n            this._selected = coercedValue;\n            this.dispatchSelectionChange();\n        }\n    }\n\n    private _selected: boolean = false;\n\n    /** The value of the tag. Defaults to the content inside `<mc-tag>` tags. */\n    @Input()\n    get value(): any {\n        return this._value !== undefined\n            ? this._value\n            : this.elementRef.nativeElement.textContent;\n    }\n\n    set value(value: any) {\n        this._value = value;\n    }\n\n    private _value: any;\n\n    /**\n     * Whether or not the tag is selectable. When a tag is not selectable,\n     * changes to its selected state are always ignored. By default a tag is\n     * selectable, and it becomes non-selectable if its parent tag list is\n     * not selectable.\n     */\n    @Input()\n    get selectable(): boolean {\n        return this._selectable && this.tagListSelectable;\n    }\n\n    set selectable(value: boolean) {\n        this._selectable = coerceBooleanProperty(value);\n    }\n\n    private _selectable: boolean = true;\n\n    /**\n     * Determines whether or not the tag displays the remove styling and emits (removed) events.\n     */\n    @Input()\n    get removable(): boolean {\n        return this._removable;\n    }\n\n    set removable(value: boolean) {\n        this._removable = coerceBooleanProperty(value);\n    }\n\n    private _removable: boolean = true;\n\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value !== this.disabled) {\n            this._disabled = value;\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    constructor(public elementRef: ElementRef, private _ngZone: NgZone) {\n        super(elementRef);\n\n        this.addHostClassName();\n\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        this.addClassModificatorForIcons();\n    }\n\n    addClassModificatorForIcons() {\n        const icons = this.contentChildren.map((item) => item._elementRef.nativeElement);\n\n        if (icons.length === 1) {\n            const iconElement = icons[0];\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-left-icon');\n                }\n\n                if (iconElement.previousSibling) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-right-icon');\n                }\n            }\n        } else if (icons.length > 1) {\n            const firstIconElement = icons[0];\n            const secondIconElement = icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n\n    addHostClassName() {\n        // Add class for the different tags\n        for (const attr of TAG_ATTRIBUTE_NAMES) {\n            if (\n                this.elementRef.nativeElement.hasAttribute(attr) ||\n                this.elementRef.nativeElement.tagName.toLowerCase() === attr\n            ) {\n                    (this.elementRef.nativeElement as HTMLElement).classList.add(attr);\n\n                    return;\n            }\n        }\n        (this.elementRef.nativeElement as HTMLElement).classList.add('mc-standard-tag');\n    }\n\n    ngOnDestroy() {\n        this.destroyed.emit({ tag: this });\n    }\n\n    select(): void {\n        if (!this._selected) {\n            this._selected = true;\n            this.dispatchSelectionChange();\n        }\n    }\n\n    deselect(): void {\n        if (this._selected) {\n            this._selected = false;\n            this.dispatchSelectionChange();\n        }\n    }\n\n    selectViaInteraction(): void {\n        if (!this._selected) {\n            this._selected = true;\n            this.dispatchSelectionChange(true);\n        }\n    }\n\n    toggleSelected(isUserInput: boolean = false): boolean {\n        this._selected = !this.selected;\n        this.dispatchSelectionChange(isUserInput);\n\n        return this.selected;\n    }\n\n    /** Allows for programmatic focusing of the tag. */\n    focus(): void {\n        if (!this.hasFocus) {\n            this.elementRef.nativeElement.focus();\n            this.onFocus.next({ tag: this });\n        }\n        this.hasFocus = true;\n    }\n\n    /**\n     * Allows for programmatic removal of the tag. Called by the McTagList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the tag from the DOM.\n     */\n    remove(): void {\n        if (this.removable) {\n            this.removed.emit({ tag: this });\n        }\n    }\n\n    handleClick(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n        } else {\n            event.stopPropagation();\n        }\n    }\n\n    handleKeydown(event: KeyboardEvent): void {\n        if (this.disabled) { return; }\n\n        // tslint:disable-next-line: deprecation\n        switch (event.keyCode) {\n            case DELETE:\n            case BACKSPACE:\n                // If we are removable, remove the focused tag\n                this.remove();\n                // Always prevent so page navigation does not occur\n                event.preventDefault();\n                break;\n            case SPACE:\n                // If we are selectable, toggle the focused tag\n                if (this.selectable) {\n                    this.toggleSelected(true);\n                }\n\n                // Always prevent space from scrolling the page since the list has focus\n                event.preventDefault();\n                break;\n            default:\n        }\n    }\n\n    blur(): void {\n        // When animations are enabled, Angular may end up removing the tag from the DOM a little\n        // earlier than usual, causing it to be blurred and throwing off the logic in the tag list\n        // that moves focus not the next item. To work around the issue, we defer marking the tag\n        // as not focused until the next time the zone stabilizes.\n        this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                this._ngZone.run(() => {\n                    this.hasFocus = false;\n                    this.onBlur.next({ tag: this });\n                });\n            });\n    }\n\n    private dispatchSelectionChange(isUserInput = false) {\n        this.selectionChange.emit({\n            source: this,\n            isUserInput,\n            selected: this._selected\n        });\n    }\n}\n\n\n/**\n *\n * Example:\n *\n *     `<mc-tag>\n *       <mc-icon mcTagRemove>cancel</mc-icon>\n *     </mc-tag>`\n *\n * You *may* use a custom icon, but you may need to override the `mc-tag-remove` positioning\n * styles to properly center the icon within the tag.\n */\n@Directive({\n    selector: '[mcTagRemove]',\n    host: {\n        class: 'mc-tag-remove mc-tag-trailing-icon',\n        '(click)': 'handleClick($event)'\n    }\n})\nexport class McTagRemove {\n    constructor(protected parentTag: McTag) {}\n\n    /** Calls the parent tag's public `remove()` method if applicable. */\n    handleClick(event: Event): void {\n        if (this.parentTag.removable) {\n            this.parentTag.remove();\n        }\n\n        // We need to stop event propagation because otherwise the event will bubble up to the\n        // form field and cause the `onContainerClick` method to be invoked. This method would then\n        // reset the focused tag that has been focused after tag removal. Usually the parent\n        // the parent click listener of the `McTag` would prevent propagation, but it can happen\n        // that the tag is being removed before the event bubbles up.\n        event.stopPropagation();\n    }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    Self,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { FocusKeyManager } from '@ptsecurity/cdk/a11y';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { BACKSPACE, END, HOME } from '@ptsecurity/cdk/keycodes';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { merge, Observable, Subject, Subscription } from 'rxjs';\nimport { startWith, takeUntil } from 'rxjs/operators';\n\nimport { McTagTextControl } from './tag-text-control';\nimport { McTag, McTagEvent, McTagSelectionChange } from './tag.component';\n\n\nexport class McTagListBase {\n    constructor(\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const _McTagListMixinBase: CanUpdateErrorStateCtor & typeof McTagListBase = mixinErrorState(McTagListBase);\n\n\n// Increasing integer for generating unique ids for tag-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the tag list value has changed. */\nexport class McTagListChange {\n    constructor(public source: McTagList, public value: any) {}\n}\n\n\n@Component({\n    selector: 'mc-tag-list',\n    exportAs: 'mcTagList',\n    template: '<ng-content></ng-content>',\n    host: {\n        class: 'mc-tag-list',\n        '[attr.tabindex]': 'disabled ? null : _tabIndex',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-invalid]': 'errorState',\n        '[class.mc-required]': 'required',\n        '(focus)': 'focus()',\n        '(blur)': 'blur()',\n        '(keydown)': 'keydown($event)',\n        '[id]': 'uid'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McTagList }],\n    styleUrls: ['tag-list.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McTagList extends _McTagListMixinBase implements McFormFieldControl<any>,\n    ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n\n    readonly controlType: string = 'mc-tag-list';\n\n    /** Combined stream of all of the child tags' selection change events. */\n    get tagSelectionChanges(): Observable<McTagSelectionChange> {\n        return merge(...this.tags.map((tag) => tag.selectionChange));\n    }\n\n    /** Combined stream of all of the child tags' focus change events. */\n    get tagFocusChanges(): Observable<McTagEvent> {\n        return merge(...this.tags.map((tag) => tag.onFocus));\n    }\n\n    /** Combined stream of all of the child tags' blur change events. */\n    get tagBlurChanges(): Observable<McTagEvent> {\n        return merge(...this.tags.map((tag) => tag.onBlur));\n    }\n\n    /** Combined stream of all of the child tags' remove change events. */\n    get tagRemoveChanges(): Observable<McTagEvent> {\n        return merge(...this.tags.map((tag) => tag.destroyed));\n    }\n\n    /** The array of selected tags inside tag list. */\n    get selected(): McTag[] | McTag {\n        return this.multiple ? this.selectionModel.selected : this.selectionModel.selected[0];\n    }\n\n    /** Whether the user should be allowed to select multiple tags. */\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith(): (o1: any, o2: any) => boolean {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        this._compareWith = fn;\n\n        if (this.selectionModel) {\n            // A different comparator means the selection could change.\n            this.initializeSelection();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): any {\n        return this._value;\n    }\n\n    set value(value: any) {\n        this.writeValue(value);\n        this._value = value;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get id(): string {\n        return this.tagInput ? this.tagInput.id : this.uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get placeholder(): string {\n        return this.tagInput ? this.tagInput.placeholder : this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n\n    /** Whether any tags or the mcTagInput inside of this tag-list has focus. */\n    get focused(): boolean {\n        return (this.tagInput && this.tagInput.focused) || this.hasFocusedTag();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return (!this.tagInput || this.tagInput.empty) && this.tags.length === 0;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat(): boolean {\n        return !this.empty || this.focused;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        return this.ngControl ? !!this.ngControl.disabled : this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n        this.syncTagsDisabledState();\n    }\n\n    /**\n     * Whether or not this tag list is selectable. When a tag list is not selectable,\n     * the selected states for all the tags inside the tag list are always ignored.\n     */\n    @Input()\n    get selectable(): boolean {\n        return this._selectable;\n    }\n\n    set selectable(value: boolean) {\n        this._selectable = coerceBooleanProperty(value);\n\n        if (this.tags) {\n            this.tags.forEach((tag) => tag.tagListSelectable = this._selectable);\n        }\n    }\n\n    @Input()\n    set tabIndex(value: number) {\n        this.userTabIndex = value;\n        this._tabIndex = value;\n    }\n\n    /**\n     * Event that emits whenever the raw value of the tag-list changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    uid: string = `mc-tag-list-${nextUniqueId++}`;\n\n    /**\n     * User defined tab index.\n     * When it is not null, use user defined tab index. Otherwise use tabIndex\n     */\n    userTabIndex: number | null = null;\n\n    keyManager: FocusKeyManager<McTag>;\n\n    selectionModel: SelectionModel<McTag>;\n\n    tagChanges = new EventEmitter<any>();\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /** Orientation of the tag list. */\n    @Input('orientation') orientation: 'horizontal' | 'vertical' = 'horizontal';\n\n    /** Event emitted when the selected tag list value has been changed by the user. */\n    @Output() readonly change: EventEmitter<McTagListChange> = new EventEmitter<McTagListChange>();\n\n    /** The tag components contained within this tag list. */\n    @ContentChildren(McTag) tags: QueryList<McTag>;\n\n    _tabIndex = 0;\n\n    private _value: any;\n\n    private _required: boolean = false;\n\n    private _placeholder: string;\n\n    private _disabled: boolean = false;\n\n    private _selectable: boolean = true;\n\n    /** The tag input to add more tags */\n    private tagInput: McTagTextControl;\n\n    private _multiple: boolean = false;\n\n    /**\n     * When a tag is destroyed, we store the index of the destroyed tag until the tags\n     * query list notifies about the update. This is necessary because we cannot determine an\n     * appropriate tag that should receive focus until the array of tags updated completely.\n     */\n    private lastDestroyedTagIndex: number | null = null;\n\n    /** Subject that emits when the component has been destroyed. */\n    private destroyed = new Subject<void>();\n\n    /** Subscription to focus changes in the tags. */\n    private tagFocusSubscription: Subscription | null;\n\n    /** Subscription to blur changes in the tags. */\n    private tagBlurSubscription: Subscription | null;\n\n    /** Subscription to selection changes in tags. */\n    private tagSelectionSubscription: Subscription | null;\n\n    /** Subscription to remove changes in tags. */\n    private tagRemoveSubscription: Subscription | null;\n\n    constructor(\n        protected elementRef: ElementRef<HTMLElement>,\n        private changeDetectorRef: ChangeDetectorRef,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        @Optional() private dir: Directionality,\n        @Optional() parentForm: NgForm,\n        @Optional() parentFormGroup: FormGroupDirective,\n        @Optional() @Self() public ngControl: NgControl\n    ) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            this.ngControl.valueAccessor = this;\n        }\n    }\n\n    ngAfterContentInit() {\n        this.keyManager = new FocusKeyManager<McTag>(this.tags)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this.dir ? this.dir.value : 'ltr');\n\n        if (this.dir) {\n            this.dir.change\n                .pipe(takeUntil(this.destroyed))\n                .subscribe((dir) => this.keyManager.withHorizontalOrientation(dir));\n        }\n\n        // Prevents the tag list from capturing focus and redirecting\n        // it back to the first tag when the user tabs out.\n        this.keyManager.tabOut\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(() => {\n                this._tabIndex = -1;\n\n                setTimeout(() => {\n                    this._tabIndex = this.userTabIndex || 0;\n                    this.changeDetectorRef.markForCheck();\n                });\n            });\n\n        // When the list changes, re-subscribe\n        this.tags.changes\n            .pipe(startWith(null), takeUntil(this.destroyed))\n            .subscribe(() => {\n                if (this.disabled) {\n                    // Since this happens after the content has been\n                    // checked, we need to defer it to the next tick.\n                    Promise.resolve().then(() => { this.syncTagsDisabledState(); });\n                }\n\n                this.resetTags();\n\n                // Reset tags selected/deselected status\n                this.initializeSelection();\n\n                // Check to see if we need to update our tab index\n                this.updateTabIndex();\n\n                // Check to see if we have a destroyed tag and need to refocus\n                this.updateFocusForDestroyedTags();\n\n                // Defer setting the value in order to avoid the \"Expression\n                // has changed after it was checked\" errors from Angular.\n                Promise.resolve().then(() => { this.tagChanges.emit(this.tags.toArray()); });\n\n                this.stateChanges.next();\n            });\n    }\n\n    ngOnInit() {\n        this.selectionModel = new SelectionModel<McTag>(this.multiple, undefined, false);\n        this.stateChanges.next();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroyed.next();\n        this.destroyed.complete();\n        this.stateChanges.complete();\n\n        this.dropSubscriptions();\n    }\n\n    // tslint:disable-next-line:no-empty\n    onTouched = () => {};\n\n    // tslint:disable-next-line:no-empty\n    onChange: (value: any) => void = () => {};\n\n    /** Associates an HTML input element with this tag list. */\n    registerInput(inputElement: McTagTextControl): void {\n        this.tagInput = inputElement;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any): void {\n        if (this.tags) {\n            this.setSelectionByValue(value, false);\n        }\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this.onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n        this.stateChanges.next();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick(event: MouseEvent) {\n        if (!this.originatesFromTag(event)) {\n            this.focus();\n        }\n    }\n\n    /**\n     * Focuses the first non-disabled tag in this tag list, or the associated input when there\n     * are no eligible tags.\n     */\n    focus(): void {\n        if (this.disabled) { return; }\n\n        // TODO: ARIA says this should focus the first `selected` tag if any are selected.\n        // Focus on first element if there's no tagInput inside tag-list\n        if (this.tagInput && this.tagInput.focused) {\n            // do nothing\n        } else if (this.tags.length > 0) {\n            this.keyManager.setFirstItemActive();\n            this.stateChanges.next();\n        } else {\n            this.focusInput();\n            this.stateChanges.next();\n        }\n    }\n\n    /** Attempt to focus an input if we have one. */\n    focusInput() {\n        if (this.tagInput) {\n            this.tagInput.focus();\n        }\n    }\n\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n    keydown(event: KeyboardEvent) {\n        const target = event.target as HTMLElement;\n\n        // If they are on an empty input and hit backspace, focus the last tag\n        // tslint:disable-next-line: deprecation\n        if (event.keyCode === BACKSPACE && this.isInputEmpty(target)) {\n            this.keyManager.setLastItemActive();\n            event.preventDefault();\n        } else if (target && target.classList.contains('mc-tag')) {\n            // tslint:disable-next-line: deprecation\n            if (event.keyCode === HOME) {\n                this.keyManager.setFirstItemActive();\n                event.preventDefault();\n            // tslint:disable-next-line: deprecation\n            } else if (event.keyCode === END) {\n                this.keyManager.setLastItemActive();\n                event.preventDefault();\n            } else {\n                this.keyManager.onKeydown(event);\n            }\n\n            this.stateChanges.next();\n        }\n    }\n\n    setSelectionByValue(value: any, isUserInput: boolean = true) {\n        this.clearSelection();\n        this.tags.forEach((tag) => tag.deselect());\n\n        if (Array.isArray(value)) {\n            value.forEach((currentValue) => this.selectValue(currentValue, isUserInput));\n            this.sortValues();\n        } else {\n            const correspondingTag = this.selectValue(value, isUserInput);\n\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what tag the user interacted with last.\n            if (correspondingTag && isUserInput) {\n                this.keyManager.setActiveItem(correspondingTag);\n            }\n        }\n    }\n\n    /** When blurred, mark the field as touched when focus moved outside the tag list. */\n    blur() {\n        if (!this.hasFocusedTag()) {\n            this.keyManager.setActiveItem(-1);\n        }\n\n        if (!this.disabled) {\n            if (this.tagInput) {\n                // If there's a tag input, we should check whether the focus moved to tag input.\n                // If the focus is not moved to tag input, mark the field as touched. If the focus moved\n                // to tag input, do nothing.\n                // Timeout is needed to wait for the focus() event trigger on tag input.\n                setTimeout(() => {\n                    if (!this.focused) {\n                        this.markAsTouched();\n                    }\n                });\n            } else {\n                // If there's no tag input, then mark the field as touched.\n                this.markAsTouched();\n            }\n        }\n    }\n\n    /** Mark the field as touched */\n    markAsTouched() {\n        this.onTouched();\n        this.changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     */\n    protected updateTabIndex(): void {\n        // If we have 0 tags, we should not allow keyboard focus\n        this._tabIndex = this.userTabIndex || (this.tags.length === 0 ? -1 : 0);\n    }\n\n    /**\n     * If the amount of tags changed, we need to update the\n     * key manager state and focus the next closest tag.\n     */\n    protected updateFocusForDestroyedTags() {\n        if (this.lastDestroyedTagIndex != null && this.tags.length) {\n            const newTagIndex = Math.min(this.lastDestroyedTagIndex, this.tags.length - 1);\n            this.keyManager.setActiveItem(newTagIndex);\n        } else if (this.tags.length === 0) {\n            this.focusInput();\n        }\n\n        this.lastDestroyedTagIndex = null;\n    }\n\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of tags.\n     */\n    private isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.tags.length;\n    }\n\n    private isInputEmpty(element: HTMLElement): boolean {\n        if (element && element.nodeName.toLowerCase() === 'input') {\n            const input = element as HTMLInputElement;\n\n            return !input.value;\n        }\n\n        return false;\n    }\n\n    /**\n     * Finds and selects the tag based on its value.\n     * @returns Tag that has the corresponding value.\n     */\n    private selectValue(value: any, isUserInput: boolean = true): McTag | undefined {\n\n        const correspondingTag = this.tags.find((tag) => {\n            return tag.value != null && this._compareWith(tag.value, value);\n        });\n\n        if (correspondingTag) {\n            if (isUserInput) {\n                correspondingTag.selectViaInteraction();\n            } else {\n                correspondingTag.select();\n            }\n\n            this.selectionModel.select(correspondingTag);\n        }\n\n        return correspondingTag;\n    }\n\n    private initializeSelection(): void {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl || this._value) {\n                this.setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n                this.stateChanges.next();\n            }\n        });\n    }\n\n    /**\n     * Deselects every tag in the list.\n     * @param skip Tag that should not be deselected.\n     */\n    private clearSelection(skip?: McTag): void {\n        this.selectionModel.clear();\n        this.tags.forEach((tag) => {\n            if (tag !== skip) {\n                tag.deselect();\n            }\n        });\n        this.stateChanges.next();\n    }\n\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     */\n    private sortValues(): void {\n        if (this._multiple) {\n            this.selectionModel.clear();\n\n            this.tags.forEach((tag) => {\n                if (tag.selected) {\n                    this.selectionModel.select(tag);\n                }\n            });\n            this.stateChanges.next();\n        }\n    }\n\n    /** Emits change event to set the model value. */\n    private propagateChanges(fallbackValue?: any): void {\n        let valueToEmit: any = null;\n\n        if (Array.isArray(this.selected)) {\n            valueToEmit = this.selected.map((tag) => tag.value);\n        } else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.change.emit(new McTagListChange(this, valueToEmit));\n        this.valueChange.emit(valueToEmit);\n        this.onChange(valueToEmit);\n        this.changeDetectorRef.markForCheck();\n    }\n\n    private resetTags() {\n        this.dropSubscriptions();\n        this.listenToTagsFocus();\n        this.listenToTagsSelection();\n        this.listenToTagsRemoved();\n    }\n\n    private dropSubscriptions() {\n        if (this.tagFocusSubscription) {\n            this.tagFocusSubscription.unsubscribe();\n            this.tagFocusSubscription = null;\n        }\n\n        if (this.tagBlurSubscription) {\n            this.tagBlurSubscription.unsubscribe();\n            this.tagBlurSubscription = null;\n        }\n\n        if (this.tagSelectionSubscription) {\n            this.tagSelectionSubscription.unsubscribe();\n            this.tagSelectionSubscription = null;\n        }\n\n        if (this.tagRemoveSubscription) {\n            this.tagRemoveSubscription.unsubscribe();\n            this.tagRemoveSubscription = null;\n        }\n    }\n\n    /** Listens to user-generated selection events on each tag. */\n    private listenToTagsSelection(): void {\n        this.tagSelectionSubscription = this.tagSelectionChanges.subscribe((event) => {\n            if (event.source.selected) {\n                this.selectionModel.select(event.source);\n            } else {\n                this.selectionModel.deselect(event.source);\n            }\n\n            // For single selection tag list, make sure the deselected value is unselected.\n            if (!this.multiple) {\n                this.tags.forEach((tag) => {\n                    if (!this.selectionModel.isSelected(tag) && tag.selected) {\n                        tag.deselect();\n                    }\n                });\n            }\n\n            if (event.isUserInput) {\n                this.propagateChanges();\n            }\n        });\n    }\n\n    /** Listens to user-generated selection events on each tag. */\n    private listenToTagsFocus(): void {\n        this.tagFocusSubscription = this.tagFocusChanges.subscribe((event) => {\n            const tagIndex: number = this.tags.toArray().indexOf(event.tag);\n\n            if (this.isValidIndex(tagIndex)) {\n                this.keyManager.updateActiveItem(tagIndex);\n            }\n            this.stateChanges.next();\n        });\n\n        this.tagBlurSubscription = this.tagBlurChanges.subscribe(() => {\n            this.blur();\n            this.stateChanges.next();\n        });\n    }\n\n    private listenToTagsRemoved(): void {\n        this.tagRemoveSubscription = this.tagRemoveChanges.subscribe((event) => {\n            const tag = event.tag;\n            const tagIndex = this.tags.toArray().indexOf(event.tag);\n\n            // In case the tag that will be removed is currently focused, we temporarily store\n            // the index in order to be able to determine an appropriate sibling tag that will\n            // receive focus.\n            if (this.isValidIndex(tagIndex) && tag.hasFocus) {\n                this.lastDestroyedTagIndex = tagIndex;\n            }\n        });\n    }\n\n    /** Checks whether an event comes from inside a tag element. */\n    private originatesFromTag(event: Event): boolean {\n        let currentElement = event.target as HTMLElement | null;\n\n        while (currentElement && currentElement !== this.elementRef.nativeElement) {\n            if (currentElement.classList.contains('mc-tag')) {\n                return true;\n            }\n\n            currentElement = currentElement.parentElement;\n        }\n\n        return false;\n    }\n\n    /** Checks whether any of the tags is focused. */\n    private hasFocusedTag() {\n        return this.tags.some((tag) => tag.hasFocus);\n    }\n\n    /** Syncs the list's disabled state with the individual tags. */\n    private syncTagsDisabledState() {\n        if (this.tags) {\n            this.tags.forEach((tag) => {\n                tag.disabled = this._disabled;\n            });\n        }\n    }\n}\n\n","import { Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output } from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { hasModifierKey } from '@ptsecurity/cdk/keycodes';\n\nimport { MC_TAGS_DEFAULT_OPTIONS, McTagsDefaultOptions } from './tag-default-options';\nimport { McTagList } from './tag-list.component';\nimport { McTagTextControl } from './tag-text-control';\n\n\n/** Represents an input event on a `mcTagInput`. */\n// tslint:disable-next-line: naming-convention\nexport interface McTagInputEvent {\n    /** The native `<input>` element that the event is being fired for. */\n    input: HTMLInputElement;\n\n    /** The value of the input. */\n    value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds tag-specific behaviors to an input element inside `<mc-form-field>`.\n * May be placed inside or outside of an `<mc-tag-list>`.\n */\n@Directive({\n    selector: 'input[mcTagInputFor]',\n    exportAs: 'mcTagInput, mcTagInputFor',\n    host: {\n        class: 'mc-tag-input mc-input-element',\n        '[id]': 'id',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.placeholder]': 'placeholder || null',\n        '[attr.aria-invalid]': '_tagList && _tagList.ngControl ? _tagList.ngControl.invalid : null',\n        '(keydown)': 'keydown($event)',\n        '(blur)': 'blur()',\n        '(focus)': 'onFocus()',\n        '(input)': 'onInput()'\n    }\n})\nexport class McTagInput implements McTagTextControl, OnChanges {\n    /** Whether the control is focused. */\n    focused: boolean = false;\n\n    /**\n     * The list of key codes that will trigger a tagEnd event.\n     *\n     * Defaults to `[ENTER]`.\n     */\n    @Input('mcTagInputSeparatorKeyCodes')\n    separatorKeyCodes: number[] | Set<number> = this.defaultOptions.separatorKeyCodes;\n\n    /** Emitted when a tag is to be added. */\n    @Output('mcTagInputTokenEnd')\n    tagEnd: EventEmitter<McTagInputEvent> = new EventEmitter<McTagInputEvent>();\n\n    /** The input's placeholder text. */\n    @Input() placeholder: string = '';\n\n    /** Unique id for the input. */\n    @Input() id: string = `mc-tag-list-input-${nextUniqueId++}`;\n\n    /** Register input for tag list */\n    @Input('mcTagInputFor')\n    set tagList(value: McTagList) {\n        if (value) {\n            this._tagList = value;\n            this._tagList.registerInput(this);\n        }\n    }\n\n    // tslint:disable-next-line: naming-convention\n    _tagList: McTagList;\n\n    /**\n     * Whether or not the tagEnd event will be emitted when the input is blurred.\n     */\n    @Input('mcTagInputAddOnBlur')\n    get addOnBlur(): boolean {\n        return this._addOnBlur;\n    }\n\n    set addOnBlur(value: boolean) {\n        this._addOnBlur = coerceBooleanProperty(value);\n    }\n\n    private _addOnBlur: boolean = false;\n\n    /** Whether the input is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this._tagList && this._tagList.disabled);\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    private _disabled: boolean = false;\n\n    /** Whether the input is empty. */\n    get empty(): boolean {\n        return !this.inputElement.value;\n    }\n\n    /** The native input element to which this directive is attached. */\n    private inputElement: HTMLInputElement;\n\n    constructor(\n        private elementRef: ElementRef<HTMLInputElement>,\n        @Inject(MC_TAGS_DEFAULT_OPTIONS) private defaultOptions: McTagsDefaultOptions\n    ) {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        this.inputElement = this.elementRef.nativeElement as HTMLInputElement;\n    }\n\n    ngOnChanges() {\n        this._tagList.stateChanges.next();\n    }\n\n    /** Utility method to make host definition/tests more clear. */\n    keydown(event?: KeyboardEvent) {\n        this.emittagEnd(event);\n    }\n\n    /** Checks to see if the blur should emit the (tagEnd) event. */\n    blur() {\n        if (this.addOnBlur) {\n            this.emittagEnd();\n        }\n\n        this.focused = false;\n        // Blur the tag list if it is not focused\n        if (!this._tagList.focused) {\n            this._tagList.blur();\n        }\n\n        this._tagList.stateChanges.next();\n    }\n\n    /** Checks to see if the (tagEnd) event needs to be emitted. */\n    emittagEnd(event?: KeyboardEvent) {\n        if (!this.inputElement.value && !!event) {\n            this._tagList.keydown(event);\n        }\n\n        if (!event || this.isSeparatorKey(event)) {\n            this.tagEnd.emit({ input: this.inputElement, value: this.inputElement.value });\n\n            if (event) {\n                event.preventDefault();\n            }\n        }\n    }\n\n    onInput() {\n        // Let tag list know whenever the value changes.\n        this._tagList.stateChanges.next();\n    }\n\n    onFocus() {\n        this.focused = true;\n        this._tagList.stateChanges.next();\n    }\n\n    /** Focuses the input. */\n    focus(): void {\n        this.inputElement.focus();\n    }\n\n    /** Checks whether a keycode is one of the configured separators. */\n    private isSeparatorKey(event: KeyboardEvent) {\n        if (hasModifierKey(event)) { return false; }\n\n        const separators = this.separatorKeyCodes;\n        // tslint:disable-next-line: deprecation\n        const keyCode = event.keyCode;\n\n        return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ENTER } from '@ptsecurity/cdk/keycodes';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { MC_TAGS_DEFAULT_OPTIONS, McTagsDefaultOptions } from './tag-default-options';\nimport { McTagInput } from './tag-input';\nimport { McTagList } from './tag-list.component';\nimport { McTag, McTagAvatar, McTagRemove, McTagTrailingIcon } from './tag.component';\n\n\n@NgModule({\n    imports: [CommonModule, PlatformModule],\n    exports: [\n        McTagList,\n        McTag,\n        McTagInput,\n        McTagTrailingIcon,\n        McTagAvatar,\n        McTagRemove\n    ],\n    declarations: [\n        McTagList,\n        McTag,\n        McTagInput,\n        McTagTrailingIcon,\n        McTagAvatar,\n        McTagRemove\n    ],\n    providers: [{\n        provide: MC_TAGS_DEFAULT_OPTIONS,\n        // tslint:disable-next-line: no-object-literal-type-assertion\n        useValue: { separatorKeyCodes: [ENTER] } as McTagsDefaultOptions\n    }]\n})\nexport class McTagsModule {}\n","import { Directive, TemplateRef } from '@angular/core';\n\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({ selector: '[mcTabContent]' })\nexport class McTabContent {\n    constructor(public template: TemplateRef<any>) { }\n}\n","import { Directive } from '@angular/core';\nimport { CdkPortal } from '@ptsecurity/cdk/portal';\n\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n    selector: '[mc-tab-label], [mcTabLabel]'\n})\nexport class McTabLabel extends CdkPortal {}\n\n// TODO: workaround for https://github.com/angular/material2/issues/12760\n(McTabLabel as any).ctorParameters = () => (CdkPortal as any).ctorParameters;\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ContentChild,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    SimpleChanges,\n    TemplateRef,\n    ViewChild,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { TemplatePortal } from '@ptsecurity/cdk/portal';\nimport {\n    CanDisable,\n    CanDisableCtor,\n    mixinDisabled\n} from '@ptsecurity/mosaic/core';\nimport { Subject } from 'rxjs';\n\nimport { McTabContent } from './tab-content';\nimport { McTabLabel } from './tab-label';\n\n\nexport class McTabBase {}\nexport const mcTabMixinBase: CanDisableCtor & typeof McTabBase = mixinDisabled(\n    McTabBase\n);\n\n@Component({\n    selector: 'mc-tab',\n    // Create a template for the content of the <mc-tab> so that we can grab a reference to this\n    // TemplateRef and use it in a Portal to render the tab content in the appropriate place in the\n    // tab-group.\n    template: '<ng-template><ng-content></ng-content></ng-template>',\n    inputs: ['disabled'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcTab'\n})\nexport class McTab extends mcTabMixinBase\n    implements OnInit, CanDisable, OnChanges, OnDestroy {\n    /** @docs-private */\n    get content(): TemplatePortal | null {\n        return this.contentPortal;\n    }\n    /** Content for the tab label given by `<ng-template mc-tab-label>`. */\n    @ContentChild(McTabLabel)\n    templateLabel: McTabLabel;\n\n    /**\n     * Template provided in the tab content that will be used if present, used to enable lazy-loading\n     */\n    @ContentChild(McTabContent, { read: TemplateRef })\n    explicitContent: TemplateRef<any>;\n\n    /** Template inside the McTab view that contains an `<ng-content>`. */\n    @ViewChild(TemplateRef)\n    implicitContent: TemplateRef<any>;\n\n    /** Plain text label for the tab, used when there is no template label. */\n    @Input('label')\n    textLabel: string = '';\n\n    /** Aria label for the tab. */\n    @Input('aria-label')\n    ariaLabel: string;\n\n    /**\n     * Reference to the element that the tab is labelled by.\n     * Will be cleared if `aria-label` is set at the same time.\n     */\n    @Input('aria-labelledby')\n    ariaLabelledby: string;\n\n    /** Emits whenever the internal state of the tab changes. */\n    readonly stateChanges = new Subject<void>();\n\n    /**\n     * The relatively indexed position where 0 represents the center, negative is left, and positive\n     * represents the right.\n     */\n    position: number | null = null;\n\n    /**\n     * The initial relatively index origin of the tab if it was created and selected after there\n     * was already a selected tab. Provides context of what position the tab should originate from.\n     */\n    origin: number | null = null;\n\n    /**\n     * Whether the tab is currently active.\n     */\n    isActive = false;\n\n    /** Portal that will be the hosted content of the tab */\n    private contentPortal: TemplatePortal | null = null;\n\n    constructor(private viewContainerRef: ViewContainerRef) {\n        super();\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (\n            changes.hasOwnProperty('textLabel') ||\n            changes.hasOwnProperty('disabled')\n        ) {\n            this.stateChanges.next();\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.stateChanges.complete();\n    }\n\n    ngOnInit(): void {\n        this.contentPortal = new TemplatePortal(\n            this.explicitContent || this.implicitContent,\n            this.viewContainerRef\n        );\n    }\n}\n","import {\n    animate,\n    state,\n    style,\n    transition,\n    trigger,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n\nexport const mcTabsAnimations: {\n    readonly translateTab: AnimationTriggerMetadata;\n} = {\n    /** Animation translates a tab along the X axis. */\n    translateTab: trigger('translateTab', [\n        // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n        state(\n            'center, void, left-origin-center, right-origin-center',\n            style({ transform: 'none' })\n        ),\n\n        // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n        // in order to ensure that the element has a height before its state changes. This is\n        // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n        // not have a static height and is not rendered. See related issue: #9465\n        state(\n            'left',\n            style({ transform: 'translate3d(-100%, 0, 0)', minHeight: '1px' })\n        ),\n        state(\n            'right',\n            style({ transform: 'translate3d(100%, 0, 0)', minHeight: '1px' })\n        ),\n\n        transition(\n            '* => left, * => right, left => center, right => center',\n            animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n        ),\n        transition('void => left-origin-center', [\n            style({ transform: 'translate3d(-100%, 0, 0)' }),\n            animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n        ]),\n        transition('void => right-origin-center', [\n            style({ transform: 'translate3d(100%, 0, 0)' }),\n            animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n        ])\n    ])\n};\n","import { AnimationEvent } from '@angular/animations';\nimport {\n    Component,\n    ChangeDetectorRef,\n    Input,\n    Inject,\n    Output,\n    EventEmitter,\n    OnDestroy,\n    OnInit,\n    ElementRef,\n    Directive,\n    Optional,\n    ViewEncapsulation,\n    ChangeDetectionStrategy,\n    ComponentFactoryResolver,\n    ViewContainerRef,\n    forwardRef,\n    ViewChild\n} from '@angular/core';\nimport { Directionality, Direction } from '@ptsecurity/cdk/bidi';\nimport { TemplatePortal, CdkPortalOutlet, PortalHostDirective } from '@ptsecurity/cdk/portal';\nimport { Subscription } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n\nimport { mcTabsAnimations } from './tabs-animations';\n\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type McTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type McTabBodyOriginState = 'left' | 'right';\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n    selector: 'mc-tab-body',\n    templateUrl: 'tab-body.html',\n    styleUrls: ['tab-body.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [mcTabsAnimations.translateTab],\n    host: {\n        class: 'mc-tab-body'\n    }\n})\nexport class McTabBody implements OnInit, OnDestroy {\n\n    /** The shifted index position of the tab body, where zero represents the active center tab. */\n    @Input()\n    set position(position: number) {\n        this.positionIndex = position;\n        this.computePositionAnimationState();\n    }\n\n    /** Tab body position state. Used by the animation trigger for the current state. */\n    bodyPosition: McTabBodyPositionState;\n\n    /** Event emitted when the tab begins to animate towards the center as the active tab. */\n    @Output() readonly onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n    /** Event emitted before the centering of the tab begins. */\n    @Output() readonly beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted before the centering of the tab begins. */\n    @Output() readonly afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted when the tab completes its animation towards the center. */\n    @Output() readonly onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n    /** The portal host inside of this container into which the tab body content will be loaded. */\n    @ViewChild(PortalHostDirective) portalHost: PortalHostDirective;\n\n    /** The tab body content to display. */\n    @Input('content') content: TemplatePortal;\n\n    /** Position that will be used when the tab is immediately becoming visible after creation. */\n    @Input() origin: number;\n\n    // Note that the default value will always be overwritten by `McTabBody`, but we need one\n    // anyway to prevent the animations module from throwing an error if the body is used on its own.\n    /** Duration for the tab's animation. */\n    @Input() animationDuration: string = '0ms';\n\n    /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n    private positionIndex: number;\n\n    /** Subscription to the directionality change observable. */\n    private dirChangeSubscription = Subscription.EMPTY;\n\n    constructor(private elementRef: ElementRef<HTMLElement>,\n                @Optional() private dir: Directionality,\n                changeDetectorRef: ChangeDetectorRef) {\n\n        if (this.dir && changeDetectorRef) {\n            this.dirChangeSubscription = this.dir.change.subscribe((direction: Direction) => {\n                this.computePositionAnimationState(direction);\n                changeDetectorRef.markForCheck();\n            });\n        }\n    }\n\n    /**\n     * After initialized, check if the content is centered and has an origin. If so, set the\n     * special position states that transition the tab from the left or right before centering.\n     */\n    ngOnInit() {\n        if (this.bodyPosition === 'center' && this.origin != null) {\n            this.bodyPosition = this.computePositionFromOrigin();\n        }\n    }\n\n    ngOnDestroy() {\n        this.dirChangeSubscription.unsubscribe();\n    }\n\n    onTranslateTabStarted(e: AnimationEvent): void {\n        const isCentering = this.isCenterPosition(e.toState);\n        this.beforeCentering.emit(isCentering);\n        if (isCentering) {\n            this.onCentering.emit(this.elementRef.nativeElement.clientHeight);\n        }\n    }\n\n    onTranslateTabComplete(e: AnimationEvent): void {\n        // If the transition to the center is complete, emit an event.\n        if (this.isCenterPosition(e.toState) && this.isCenterPosition(this.bodyPosition)) {\n            this.onCentered.emit();\n        }\n\n        if (this.isCenterPosition(e.fromState) && !this.isCenterPosition(this.bodyPosition)) {\n            this.afterLeavingCenter.emit();\n        }\n    }\n\n    /** The text direction of the containing app. */\n    getLayoutDirection(): Direction {\n        return this.dir && this.dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n\n    /** Whether the provided position state is considered center, regardless of origin. */\n    isCenterPosition(position: McTabBodyPositionState | string): boolean {\n        return position === 'center' ||\n            position === 'left-origin-center' ||\n            position === 'right-origin-center';\n    }\n\n    /** Computes the position state that will be used for the tab-body animation trigger. */\n    private computePositionAnimationState(dir: Direction = this.getLayoutDirection()) {\n        if (this.positionIndex < 0) {\n            this.bodyPosition = dir === 'ltr' ? 'left' : 'right';\n        } else if (this.positionIndex > 0) {\n            this.bodyPosition = dir === 'ltr' ? 'right' : 'left';\n        } else {\n            this.bodyPosition = 'center';\n        }\n    }\n\n    /**\n     * Computes the position state based on the specified origin position. This is used if the\n     * tab is becoming visible immediately after creation.\n     */\n    private computePositionFromOrigin(): McTabBodyPositionState {\n        const dir = this.getLayoutDirection();\n\n        if ((dir === 'ltr' && this.origin <= 0) || (dir === 'rtl' && this.origin > 0)) {\n            return 'left-origin-center';\n        }\n\n        return 'right-origin-center';\n    }\n}\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n    selector: '[mcTabBodyHost]'\n})\nexport class McTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n    /** Subscription to events for when the tab body begins centering. */\n    private centeringSub = Subscription.EMPTY;\n    /** Subscription to events for when the tab body finishes leaving from center position. */\n    private leavingSub = Subscription.EMPTY;\n\n    constructor(\n        componentFactoryResolver: ComponentFactoryResolver,\n        viewContainerRef: ViewContainerRef,\n        @Inject(forwardRef(() => McTabBody)) private host: McTabBody) {\n        super(componentFactoryResolver, viewContainerRef);\n    }\n\n    /** Set initial visibility or set up subscription for changing visibility. */\n    ngOnInit(): void {\n        super.ngOnInit();\n\n        this.centeringSub = this.host.beforeCentering\n            .pipe(startWith(this.host.isCenterPosition(this.host.bodyPosition)))\n            .subscribe((isCentering: boolean) => {\n                if (isCentering && !this.hasAttached()) {\n                    this.attach(this.host.content);\n                }\n            });\n\n        this.leavingSub = this.host.afterLeavingCenter.subscribe(() => {\n            this.detach();\n        });\n    }\n\n    /** Clean up centering subscription. */\n    ngOnDestroy(): void {\n        super.ngOnDestroy();\n        this.centeringSub.unsubscribe();\n        this.leavingSub.unsubscribe();\n    }\n}\n","import { Directive, ElementRef } from '@angular/core';\nimport {\n    CanDisable,\n    CanDisableCtor,\n    mixinDisabled\n} from '@ptsecurity/mosaic/core';\n\n\n// Boilerplate for applying mixins to McTabLabelWrapper.\n/** @docs-private */\nexport class McTabLabelWrapperBase {}\nexport const mcTabLabelWrapperMixinBase: CanDisableCtor &\n    typeof McTabLabelWrapperBase = mixinDisabled(McTabLabelWrapperBase);\n\n/**\n * Used in the `mc-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n    selector: '[mcTabLabelWrapper]',\n    inputs: ['disabled'],\n    host: {\n        '[class.mc-disabled]': 'disabled',\n        '[attr.aria-disabled]': '!!disabled'\n    }\n})\nexport class McTabLabelWrapper extends mcTabLabelWrapperMixinBase implements CanDisable {\n    constructor(public elementRef: ElementRef) {\n        super();\n    }\n\n    /** Sets focus on the wrapper element */\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    getOffsetLeft(): number {\n        return this.elementRef.nativeElement.offsetLeft;\n    }\n\n    getOffsetWidth(): number {\n        return this.elementRef.nativeElement.offsetWidth;\n    }\n}\n","import {\n    AfterContentChecked,\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Input,\n    NgZone,\n    OnDestroy,\n    Optional,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { FocusKeyManager } from '@ptsecurity/cdk/a11y';\nimport { Direction, Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceNumberProperty } from '@ptsecurity/cdk/coercion';\nimport { END, ENTER, HOME, SPACE } from '@ptsecurity/cdk/keycodes';\nimport { ViewportRuler } from '@ptsecurity/cdk/scrolling';\nimport { merge, of as observableOf, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { McTabLabelWrapper } from './tab-label-wrapper';\n\n\nconst VIEWPORT_THROTTLE_TIME = 150;\nconst SCROLL_DISTANCE_DELIMITER = 3;\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to McTabHeader.\n/** @docs-private */\nexport class McTabHeaderBase {}\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group.\n * When the tabs list's width exceeds the width of the header container,\n * then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n    selector: 'mc-tab-header',\n    templateUrl: 'tab-header.html',\n    styleUrls: ['tab-header.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        class: 'mc-tab-header',\n        '[class.mc-tab-header__pagination-controls_enabled]':\n            'showPaginationControls',\n        '[class.mc-tab-header_rtl]': 'getLayoutDirection() == \\'rtl\\''\n    }\n})\nexport class McTabHeader extends McTabHeaderBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy {\n    /** The index of the active tab. */\n    @Input()\n    get selectedIndex(): number {\n        return this._selectedIndex;\n    }\n    set selectedIndex(value: number) {\n        const coercedValue = coerceNumberProperty(value);\n        this.selectedIndexChanged = this._selectedIndex !== coercedValue;\n        this._selectedIndex = coercedValue;\n\n        if (this.keyManager) {\n            this.keyManager.updateActiveItem(coercedValue);\n        }\n    }\n\n    /** Tracks which element has focus; used for keyboard navigation */\n    get focusIndex(): number {\n        return this.keyManager ? this.keyManager.activeItemIndex! : 0;\n    }\n\n    /** When the focus index is set, we must manually send focus to the correct label */\n    set focusIndex(value: number) {\n        if (\n            !this.isValidIndex(value) ||\n            this.focusIndex === value ||\n            !this.keyManager\n        ) {\n            return;\n        }\n\n        this.keyManager.setActiveItem(value);\n    }\n\n    /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n    get scrollDistance(): number {\n        return this._scrollDistance;\n    }\n    set scrollDistance(v: number) {\n        this._scrollDistance = Math.max(\n            0,\n            Math.min(this.getMaxScrollDistance(), v)\n        );\n\n        // Mark that the scroll distance has changed so that after the view is checked, the CSS\n        // transformation can move the header.\n        this.scrollDistanceChanged = true;\n        this.checkScrollingControls();\n    }\n\n    @ContentChildren(McTabLabelWrapper)\n    labelWrappers: QueryList<McTabLabelWrapper>;\n    @ViewChild('tabListContainer')\n    tabListContainer: ElementRef;\n    @ViewChild('tabList')\n    tabList: ElementRef;\n\n    /** Whether the controls for pagination should be displayed */\n    showPaginationControls = false;\n\n    /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n    disableScrollAfter = true;\n\n    /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n    disableScrollBefore = true;\n\n    /** Event emitted when the option is selected. */\n    @Output()\n    readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n    /** Event emitted when a label is focused. */\n    @Output()\n    readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n    /** The distance in pixels that the tab labels should be translated to the left. */\n    private _scrollDistance = 0;\n\n    /** Whether the header should scroll to the selected index after the view has been checked. */\n    private selectedIndexChanged = false;\n\n    /** Emits when the component is destroyed. */\n    private readonly destroyed = new Subject<void>();\n\n    /**\n     * The number of tab labels that are displayed on the header. When this changes, the header\n     * should re-evaluate the scroll position.\n     */\n    private tabLabelCount: number;\n\n    /** Whether the scroll distance has changed and should be applied after the view is checked. */\n    private scrollDistanceChanged: boolean;\n\n    /** Used to manage focus between the tabs. */\n    private keyManager: FocusKeyManager<McTabLabelWrapper>;\n\n    /** Cached text content of the header. */\n    private currentTextContent: string;\n\n    private _selectedIndex: number = 0;\n\n    constructor(\n        private elementRef: ElementRef,\n        private changeDetectorRef: ChangeDetectorRef,\n        private viewportRuler: ViewportRuler,\n        @Optional() private dir: Directionality,\n        private ngZone: NgZone\n    ) {\n        super();\n    }\n\n    ngAfterContentChecked(): void {\n        // If the number of tab labels have changed, check if scrolling should be enabled\n        if (this.tabLabelCount !== this.labelWrappers.length) {\n            this.updatePagination();\n            this.tabLabelCount = this.labelWrappers.length;\n            this.changeDetectorRef.markForCheck();\n        }\n\n        // If the selected index has changed, scroll to the label and check if the scrolling controls\n        // should be disabled.\n        if (this.selectedIndexChanged) {\n            this.scrollToLabel(this._selectedIndex);\n            this.checkScrollingControls();\n            this.selectedIndexChanged = false;\n            this.changeDetectorRef.markForCheck();\n        }\n\n        // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n        // then translate the header to reflect this.\n        if (this.scrollDistanceChanged) {\n            this.updateTabScrollPosition();\n            this.scrollDistanceChanged = false;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    handleKeydown(event: KeyboardEvent) {\n        switch (event.keyCode) {\n            case HOME:\n                this.keyManager.setFirstItemActive();\n                event.preventDefault();\n                break;\n            case END:\n                this.keyManager.setLastItemActive();\n                event.preventDefault();\n                break;\n            case ENTER:\n            case SPACE:\n                this.selectFocusedIndex.emit(this.focusIndex);\n                event.preventDefault();\n                break;\n            default:\n                this.keyManager.onKeydown(event);\n        }\n    }\n\n    ngAfterContentInit() {\n        const dirChange = this.dir ? this.dir.change : observableOf(null);\n        const resize = this.viewportRuler.change(VIEWPORT_THROTTLE_TIME);\n        const realign = () => {\n            this.updatePagination();\n        };\n\n        this.keyManager = new FocusKeyManager(this.labelWrappers)\n            .withHorizontalOrientation(this.getLayoutDirection())\n            .withWrap();\n\n        this.keyManager.updateActiveItem(0);\n\n        // Defer the first call in order to allow for slower browsers to lay out the elements.\n        // This helps in cases where the user lands directly on a page with paginated tabs.\n        typeof requestAnimationFrame === undefined\n            ? realign()\n            : requestAnimationFrame(realign);\n\n        // On dir change or window resize, update the orientation of\n        // the key manager if the direction has changed.\n        merge(dirChange, resize)\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(() => {\n                realign();\n                this.keyManager.withHorizontalOrientation(\n                    this.getLayoutDirection()\n                );\n            });\n\n        // If there is a change in the focus key manager we need to emit the `indexFocused`\n        // event in order to provide a public event that notifies about focus changes. Also we realign\n        // the tabs container by scrolling the new focused tab into the visible section.\n        this.keyManager.change\n            .pipe(takeUntil(this.destroyed))\n            .subscribe((newFocusIndex) => {\n                this.indexFocused.emit(newFocusIndex);\n                this.setTabFocus(newFocusIndex);\n            });\n    }\n\n    ngOnDestroy() {\n        this.destroyed.next();\n        this.destroyed.complete();\n    }\n\n    /**\n     * Callback for when the MutationObserver detects that the content has changed.\n     */\n    onContentChanges() {\n        const textContent = this.elementRef.nativeElement.textContent;\n\n        // We need to diff the text content of the header, because the MutationObserver callback\n        // will fire even if the text content didn't change which is inefficient and is prone\n        // to infinite loops if a poorly constructed expression is passed in.\n\n        if (textContent !== this.currentTextContent) {\n            this.currentTextContent = textContent;\n\n            const zoneCallback = () => {\n                this.updatePagination();\n                this.changeDetectorRef.markForCheck();\n            };\n\n            // The content observer runs outside the `NgZone` by default, which\n            // means that we need to bring the callback back in ourselves.\n            // TODO: Remove null check for `_ngZone` once it's a required parameter.\n            this.ngZone ? this.ngZone.run(zoneCallback) : zoneCallback();\n        }\n    }\n\n    /**\n     * Updating the view whether pagination should be enabled or not\n     *\n     * WARNING: Calling this method can be very costly in terms of performance.  It should be called\n     * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n     * page.\n     */\n    updatePagination() {\n        this.checkPaginationEnabled();\n        this.checkScrollingControls();\n        this.updateTabScrollPosition();\n    }\n\n    /**\n     * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n     * providing a valid index and return true.\n     */\n    isValidIndex(index: number): boolean {\n        if (!this.labelWrappers) {\n            return true;\n        }\n\n        const tab = this.labelWrappers\n            ? this.labelWrappers.toArray()[index]\n            : null;\n\n        return !!tab && !tab.disabled;\n    }\n\n    /**\n     * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n     * scrolling is enabled.\n     */\n    setTabFocus(tabIndex: number) {\n        if (this.showPaginationControls) {\n            this.scrollToLabel(tabIndex);\n        }\n\n        if (this.labelWrappers && this.labelWrappers.length) {\n            this.labelWrappers.toArray()[tabIndex].focus();\n\n            // Do not let the browser manage scrolling to focus the element, this will be handled\n            // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n            // should be the full width minus the offset width.\n            const containerEl = this.tabListContainer.nativeElement;\n            const dir = this.getLayoutDirection();\n\n            if (dir === 'ltr') {\n                containerEl.scrollLeft = 0;\n            } else {\n                containerEl.scrollLeft =\n                    containerEl.scrollWidth - containerEl.offsetWidth;\n            }\n        }\n    }\n\n    /** The layout direction of the containing app. */\n    getLayoutDirection(): Direction {\n        return this.dir && this.dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n\n    /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n    updateTabScrollPosition() {\n        const scrollDistance = this.scrollDistance;\n        const translateX =\n            this.getLayoutDirection() === 'ltr'\n                ? -scrollDistance\n                : scrollDistance;\n\n        // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n        // seems to cause flickering and overflow in Internet Explorer.\n        // See: https://github.com/angular/material2/issues/10276\n        // We round the `transform` here, because transforms with sub-pixel precision cause some\n        // browsers to blur the content of the element.\n        this.tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n        // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n        // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n        // it doesn't get thrown off.\n        this.tabList.nativeElement.scrollLeft = 0;\n    }\n\n    /**\n     * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n     * the end of the list, respectively). The distance to scroll is computed to be a third of the\n     * length of the tab list view window.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    scrollHeader(scrollDir: ScrollDirection) {\n        const viewLength = this.tabListContainer.nativeElement.offsetWidth;\n\n        // Move the scroll distance one-third the length of the tab list's viewport.\n        this.scrollDistance +=\n            ((scrollDir === 'before' ? -1 : 1) * viewLength) / SCROLL_DISTANCE_DELIMITER;\n    }\n\n    /**\n     * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    scrollToLabel(labelIndex: number) {\n        const selectedLabel = this.labelWrappers\n            ? this.labelWrappers.toArray()[labelIndex]\n            : null;\n\n        if (!selectedLabel) {\n            return;\n        }\n\n        // The view length is the visible width of the tab labels.\n        const viewLength = this.tabListContainer.nativeElement.offsetWidth;\n\n        let labelBeforePos: number;\n        let labelAfterPos: number;\n\n        if (this.getLayoutDirection() === 'ltr') {\n            labelBeforePos = selectedLabel.getOffsetLeft();\n            labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n        } else {\n            labelAfterPos =\n                this.tabList.nativeElement.offsetWidth -\n                selectedLabel.getOffsetLeft();\n            labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n        }\n\n        const beforeVisiblePos = this.scrollDistance;\n        const afterVisiblePos = this.scrollDistance + viewLength;\n\n        if (labelBeforePos < beforeVisiblePos) {\n            // Scroll header to move label to the before direction\n            this.scrollDistance -=\n                beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n        } else if (labelAfterPos > afterVisiblePos) {\n            // Scroll header to move label to the after direction\n            this.scrollDistance +=\n                labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n        }\n    }\n\n    /**\n     * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n     * tab list is wider than the size of the header container, then the pagination controls should\n     * be shown.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    checkPaginationEnabled() {\n        const isEnabled =\n            this.tabList.nativeElement.scrollWidth >\n            this.elementRef.nativeElement.offsetWidth;\n\n        if (!isEnabled) {\n            this.scrollDistance = 0;\n        }\n\n        if (isEnabled !== this.showPaginationControls) {\n            this.changeDetectorRef.markForCheck();\n        }\n\n        this.showPaginationControls = isEnabled;\n    }\n\n    /**\n     * Evaluate whether the before and after controls should be enabled or disabled.\n     * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n     * before button. If the header is at the end of the list (scroll distance is equal to the\n     * maximum distance we can scroll), then disable the after button.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    checkScrollingControls() {\n        // Check if the pagination arrows should be activated.\n        this.disableScrollBefore = this.scrollDistance === 0;\n        this.disableScrollAfter =\n            this.scrollDistance === this.getMaxScrollDistance();\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n     * is equal to the difference in width between the tab list container and tab header container.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    getMaxScrollDistance(): number {\n        const lengthOfTabList = this.tabList.nativeElement.scrollWidth;\n        const viewLength = this.tabListContainer.nativeElement.offsetWidth;\n\n        return lengthOfTabList - viewLength || 0;\n    }\n}\n","import {\n    AfterContentChecked,\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnDestroy,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    InjectionToken,\n    Inject,\n    Optional,\n    Directive, Attribute\n} from '@angular/core';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@ptsecurity/cdk/coercion';\nimport {\n    CanColor,\n    CanColorCtor,\n    mixinColor,\n    mixinDisabled\n} from '@ptsecurity/mosaic/core';\nimport { merge, Subscription } from 'rxjs';\n\nimport { McTab } from './tab';\nimport { McTabHeader } from './tab-header';\n\n\n@Directive({\n    selector: 'mc-tab-group[mc-light-tabs], [mc-tab-nav-bar][mc-light-tabs]',\n    host: { class: 'mc-tab-group_light' }\n})\nexport class McLightTabsCssStyler { }\n\n@Directive({\n    selector: 'mc-tab-group[mc-align-tabs-center], [mc-tab-nav-bar][mc-align-tabs-center]',\n    host: { class: 'mc-tab-group_align-labels-center' }\n})\nexport class McAlignTabsCenterCssStyler { }\n\n@Directive({\n    selector: 'mc-tab-group[mc-align-tabs-end], [mc-tab-nav-bar][mc-align-tabs-end]',\n    host: { class: 'mc-tab-group_align-labels-end' }\n})\nexport class McAlignTabsEndCssStyler { }\n\n@Directive({\n    selector: 'mc-tab-group[mc-stretch-tabs], [mc-tab-nav-bar][mc-stretch-tabs]',\n    host: { class: 'mc-tab-group_stretch-labels' }\n})\nexport class McStretchTabsCssStyler { }\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class McTabChangeEvent {\n    /** Index of the currently-selected tab. */\n    index: number;\n    /** Reference to the currently-selected tab. */\n    tab: McTab;\n}\n\n/** Possible positions for the tab header. */\nexport type McTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface IMcTabsConfig {\n    /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n    animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MC_TABS_CONFIG = new InjectionToken('MC_TABS_CONFIG');\n\n// Boilerplate for applying mixins to McTabGroup.\n/** @docs-private */\nexport class McTabGroupBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) { }\n}\nexport const mcTabGroupMixinBase:\n    CanColorCtor &\n    typeof McTabGroupBase =\n    mixinColor(mixinDisabled(McTabGroupBase));\n\n/**\n * Tab-group component.  Supports basic tab pairs (label + content) and includes\n * keyboard navigation.\n */\n@Component({\n    selector: 'mc-tab-group',\n    exportAs: 'mcTabGroup',\n    templateUrl: 'tab-group.html',\n    styleUrls: ['tab-group.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['color'],\n    host: {\n        class: 'mc-tab-group',\n        '[class.mc-tab-group_dynamic-height]': 'dynamicHeight',\n        '[class.mc-tab-group_inverted-header]': 'headerPosition === \"below\"'\n    }\n})\nexport class McTabGroup extends mcTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor {\n    lightTab: boolean;\n\n    /** Whether the tab group should grow to the size of the active tab. */\n    @Input()\n    get dynamicHeight(): boolean { return this._dynamicHeight; }\n    set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n\n    /** The index of the active tab. */\n    @Input()\n    get selectedIndex(): number | null { return this._selectedIndex; }\n    set selectedIndex(value: number | null) {\n        this.indexToSelect = coerceNumberProperty(value, null);\n    }\n\n    @ContentChildren(McTab) tabs: QueryList<McTab>;\n\n    @ViewChild('tabBodyWrapper') tabBodyWrapper: ElementRef;\n\n    @ViewChild('tabHeader') tabHeader: McTabHeader;\n\n    /** Position of the tab header. */\n    @Input() headerPosition: McTabHeaderPosition = 'above';\n\n    /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n    @Input() animationDuration: string;\n\n    /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n    @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n    /** Event emitted when focus has changed within a tab group. */\n    @Output() readonly focusChange: EventEmitter<McTabChangeEvent> =\n        new EventEmitter<McTabChangeEvent>();\n\n    /** Event emitted when the body animation has completed */\n    @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Event emitted when the tab selection has changed. */\n    @Output() readonly selectedTabChange: EventEmitter<McTabChangeEvent> =\n        new EventEmitter<McTabChangeEvent>(true);\n\n    /** The tab index that should be selected after the content has been checked. */\n    private indexToSelect: number | null = 0;\n\n    /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n    private tabBodyWrapperHeight: number = 0;\n\n    /** Subscription to tabs being added/removed. */\n    private tabsSubscription = Subscription.EMPTY;\n\n    /** Subscription to changes in the tab labels. */\n    private tabLabelSubscription = Subscription.EMPTY;\n    private _dynamicHeight: boolean = false;\n    private _selectedIndex: number | null = null;\n\n    private groupId: number;\n\n    constructor(\n        elementRef: ElementRef,\n        private changeDetectorRef: ChangeDetectorRef,\n        @Attribute('mc-light-tabs') lightTabs: string,\n        @Inject(MC_TABS_CONFIG) @Optional() defaultConfig?: IMcTabsConfig\n    ) {\n        super(elementRef);\n\n        this.lightTab = coerceBooleanProperty(lightTabs);\n\n        this.groupId = nextId++;\n        this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n            defaultConfig.animationDuration : '0ms';\n    }\n\n    /**\n     * After the content is checked, this component knows what tabs have been defined\n     * and what the selected index should be. This is where we can know exactly what position\n     * each tab should be in according to the new selected index, and additionally we know how\n     * a new selected tab should transition in (from the left or right).\n     */\n    ngAfterContentChecked() {\n        // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n        // the amount of tabs changes before the actual change detection runs.\n        const indexToSelect = this.indexToSelect = this.clampTabIndex(this.indexToSelect);\n\n        // If there is a change in selected index, emit a change event. Should not trigger if\n        // the selected index has not yet been initialized.\n        if (this._selectedIndex !== indexToSelect) {\n            const isFirstRun = this._selectedIndex == null;\n\n            if (!isFirstRun) {\n                this.selectedTabChange.emit(this.createChangeEvent(indexToSelect));\n            }\n\n            // Changing these values after change detection has run\n            // since the checked content may contain references to them.\n            Promise.resolve().then(() => {\n                this.tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n                if (!isFirstRun) {\n                    this.selectedIndexChange.emit(indexToSelect);\n                }\n            });\n        }\n\n        // Setup the position for each tab and optionally setup an origin on the next selected tab.\n        this.tabs.forEach((tab: McTab, index: number) => {\n            tab.position = index - indexToSelect;\n\n            // If there is already a selected tab, then set up an origin for the next selected tab\n            // if it doesn't have one already.\n            if (this._selectedIndex != null && tab.position === 0 && !tab.origin) {\n                tab.origin = indexToSelect - this._selectedIndex;\n            }\n        });\n\n        if (this._selectedIndex !== indexToSelect) {\n            this._selectedIndex = indexToSelect;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    ngAfterContentInit() {\n        this.subscribeToTabLabels();\n\n        // Subscribe to changes in the amount of tabs, in order to be\n        // able to re-render the content as new tabs are added or removed.\n        this.tabsSubscription = this.tabs.changes.subscribe(() => {\n            const indexToSelect = this.clampTabIndex(this.indexToSelect);\n\n            // Maintain the previously-selected tab if a new tab is added or removed and there is no\n            // explicit change that selects a different tab.\n            if (indexToSelect === this._selectedIndex) {\n                const tabs = this.tabs.toArray();\n\n                for (let i = 0; i < tabs.length; i++) {\n                    if (tabs[i].isActive) {\n                        // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n                        // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n                        // adding a tab within the `selectedIndexChange` event.\n                        this.indexToSelect = this._selectedIndex = i;\n                        break;\n                    }\n                }\n            }\n\n            this.subscribeToTabLabels();\n            this.changeDetectorRef.markForCheck();\n        });\n    }\n\n    ngOnDestroy() {\n        this.tabsSubscription.unsubscribe();\n        this.tabLabelSubscription.unsubscribe();\n    }\n\n    focusChanged(index: number) {\n        this.focusChange.emit(this.createChangeEvent(index));\n    }\n\n    /** Returns a unique id for each tab label element */\n    getTabLabelId(i: number): string {\n        return `mc-tab-label-${this.groupId}-${i}`;\n    }\n\n    /** Returns a unique id for each tab content element */\n    getTabContentId(i: number): string {\n        return `mc-tab-content-${this.groupId}-${i}`;\n    }\n\n    /**\n     * Sets the height of the body wrapper to the height of the activating tab if dynamic\n     * height property is true.\n     */\n    setTabBodyWrapperHeight(tabHeight: number): void {\n        if (!this._dynamicHeight || !this.tabBodyWrapperHeight) { return; }\n\n        const wrapper: HTMLElement = this.tabBodyWrapper.nativeElement;\n\n        wrapper.style.height = `${this.tabBodyWrapperHeight}px`;\n\n        // This conditional forces the browser to paint the height so that\n        // the animation to the new height can have an origin.\n        if (this.tabBodyWrapper.nativeElement.offsetHeight) {\n            wrapper.style.height = `${tabHeight}px`;\n        }\n    }\n\n    /** Removes the height of the tab body wrapper. */\n    removeTabBodyWrapperHeight(): void {\n        this.tabBodyWrapperHeight = this.tabBodyWrapper.nativeElement.clientHeight;\n        this.tabBodyWrapper.nativeElement.style.height = '';\n        this.animationDone.emit();\n    }\n\n    /** Handle click events, setting new selected index if appropriate. */\n    handleClick(tab: McTab, tabHeader: McTabHeader, index: number) {\n        if (!tab.disabled) {\n            this.selectedIndex = tabHeader.focusIndex = index;\n        }\n    }\n\n    /** Retrieves the tabindex for the tab. */\n    getTabIndex(tab: McTab, index: number): number | null {\n        if (tab.disabled) {\n            return null;\n        }\n\n        return this.selectedIndex === index ? 0 : -1;\n    }\n\n    private createChangeEvent(index: number): McTabChangeEvent {\n        const event = new McTabChangeEvent();\n        event.index = index;\n        if (this.tabs && this.tabs.length) {\n            event.tab = this.tabs.toArray()[index];\n        }\n\n        return event;\n    }\n\n    /**\n     * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n     * on the McTab component, whereas the data binding is inside the McTabGroup. In order for the\n     * binding to be updated, we need to subscribe to changes in it and trigger change detection\n     * manually.\n     */\n    private subscribeToTabLabels() {\n        if (this.tabLabelSubscription) {\n            this.tabLabelSubscription.unsubscribe();\n        }\n\n        this.tabLabelSubscription = merge(...this.tabs.map((tab) => tab.stateChanges))\n            .subscribe(() => this.changeDetectorRef.markForCheck());\n    }\n\n    /** Clamps the given index to the bounds of 0 and the tabs length. */\n    private clampTabIndex(index: number | null): number {\n        // Note the `|| 0`, which ensures that values like NaN can't get through\n        // and which would otherwise throw the component into an infinite loop\n        // (since Mch.max(NaN, 0) === NaN).\n        return Math.min(this.tabs.length - 1, Math.max(index || 0, 0));\n    }\n}\n","import {\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    Input,\n    OnDestroy,\n    ViewEncapsulation\n} from '@angular/core';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport {\n    CanColor,\n    CanColorCtor,\n    CanDisable,\n    CanDisableCtor,\n    HasTabIndex,\n    HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex\n} from '@ptsecurity/mosaic/core';\n\n\n// Boilerplate for applying mixins to McTabNav.\n/** @docs-private */\nexport class McTabNavBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {}\n}\nexport const mcTabNavMixinBase: CanColorCtor &\n    typeof McTabNavBase = mixinColor(McTabNavBase);\n\n/**\n * Navigation component matching the styles of the tab group header.\n */\n@Component({\n    selector: '[mc-tab-nav-bar]',\n    exportAs: 'mcTabNavBar, mcTabNav',\n    inputs: ['color'],\n    templateUrl: 'tab-nav-bar.html',\n    styleUrls: ['tab-nav-bar.css'],\n    host: { class: 'mc-tab-nav-bar' },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McTabNav extends mcTabNavMixinBase\n    implements CanColor {\n        constructor(elementRef: ElementRef) {\n            super(elementRef);\n        }\n     }\n\n// Boilerplate for applying mixins to McTabLink.\nexport class McTabLinkBase {}\nexport const mcTabLinkMixinBase: HasTabIndexCtor & CanDisableCtor &\n    typeof McTabLinkBase = mixinTabIndex(mixinDisabled(McTabLinkBase));\n\n/**\n * Link inside of a `mc-tab-nav-bar`.\n */\n@Directive({\n    selector: '[mc-tab-link], [mcTabLink]',\n    exportAs: 'mcTabLink',\n    inputs: ['disabled', 'tabIndex'],\n    host: {\n        class: 'mc-tab-link',\n        '[attr.aria-current]': 'active',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.tabIndex]': 'tabIndex',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-active]': 'active'\n    }\n})\nexport class McTabLink extends mcTabLinkMixinBase\n    implements OnDestroy, CanDisable, HasTabIndex {\n    /** Whether the link is active. */\n    @Input()\n    get active(): boolean {\n        return this.isActive;\n    }\n    set active(value: boolean) {\n        if (value !== this.isActive) {\n            this.isActive = value;\n        }\n    }\n\n    /** Whether the tab link is active or not. */\n    protected isActive: boolean = false;\n\n    constructor(\n        public elementRef: ElementRef,\n        @Attribute('tabindex') tabIndex: string,\n        private focusMonitor: FocusMonitor\n    ) {\n        super();\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n        this.focusMonitor.monitor(this.elementRef.nativeElement);\n    }\n\n    ngOnDestroy() {\n        this.focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PortalModule } from '@ptsecurity/cdk/portal';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McTab } from './tab';\nimport { McTabBody, McTabBodyPortal } from './tab-body';\nimport { McTabContent } from './tab-content';\nimport {\n    McTabGroup,\n    McLightTabsCssStyler,\n    McAlignTabsCenterCssStyler,\n    McAlignTabsEndCssStyler,\n    McStretchTabsCssStyler\n} from './tab-group';\nimport { McTabHeader } from './tab-header';\nimport { McTabLabel } from './tab-label';\nimport { McTabLabelWrapper } from './tab-label-wrapper';\nimport { McTabLink, McTabNav } from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        McCommonModule,\n        PortalModule,\n        A11yModule\n    ],\n    // Don't export all components because some are only to be used internally.\n    exports: [\n        McCommonModule,\n        McTabGroup,\n        McTabLabel,\n        McTab,\n        McTabNav,\n        McTabLink,\n        McTabContent,\n        McLightTabsCssStyler,\n        McAlignTabsCenterCssStyler,\n        McAlignTabsEndCssStyler,\n        McStretchTabsCssStyler\n    ],\n    declarations: [\n        McTabGroup,\n        McTabLabel,\n        McTab,\n        McTabLabelWrapper,\n        McTabNav,\n        McTabLink,\n        McTabBody,\n        McTabBodyPortal,\n        McTabHeader,\n        McTabContent,\n        McLightTabsCssStyler,\n        McAlignTabsCenterCssStyler,\n        McAlignTabsEndCssStyler,\n        McStretchTabsCssStyler\n    ]\n})\nexport class McTabsModule {}\n","import { InjectionToken } from '@angular/core';\n\n\n/** Default options, for the chips module, that can be overridden. */\n// tslint:disable-next-line: naming-convention\nexport interface McTagsDefaultOptions {\n    /** The list of key codes that will trigger a chipEnd event. */\n    separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MC_TAGS_DEFAULT_OPTIONS = new InjectionToken<McTagsDefaultOptions>('mc-tags-default-options');\n","import { AnimationEvent } from '@angular/animations';\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    TemplateRef,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport {\n    ConnectedOverlayPositionChange,\n    ConnectionPositionPair,\n    Overlay,\n    OverlayRef,\n    ScrollDispatcher,\n    IScrollStrategy,\n    FlexibleConnectedPositionStrategy,\n    IOverlayConnectionPosition,\n    IOriginConnectionPosition,\n    HorizontalConnectionPos,\n    VerticalConnectionPos\n} from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal } from '@ptsecurity/cdk/portal';\nimport {\n    EXTENDED_OVERLAY_POSITIONS,\n    POSITION_MAP,\n    POSITION_TO_CSS_MAP\n} from '@ptsecurity/mosaic/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators';\n\nimport { mcPopoverAnimations } from './popover-animations';\n\n\nexport type PopoverVisibility = 'initial' | 'visible' | 'hidden';\n\n@Component({\n    selector: 'mc-popover',\n    templateUrl: './popover.component.html',\n    preserveWhitespaces: false,\n    styleUrls: ['./popover.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [mcPopoverAnimations.popoverState],\n    host: {\n        '[class]': 'getCssClassesList',\n        '(body:click)': 'handleBodyInteraction($event)'\n    }\n})\nexport class McPopoverComponent {\n    positions: ConnectionPositionPair[] = [ ...EXTENDED_OVERLAY_POSITIONS ];\n    availablePositions: any;\n    popoverVisibility: PopoverVisibility = 'initial';\n    closeOnInteraction: boolean = false;\n    mcContent: string | TemplateRef<any>;\n    mcHeader: string | TemplateRef<any>;\n    mcFooter: string | TemplateRef<any>;\n\n    @Output('mcPopoverVisibleChange') mcVisibleChange: EventEmitter<boolean> = new EventEmitter();\n\n    get mcTrigger(): string {\n        return this._mcTrigger;\n    }\n    set mcTrigger(value: string) {\n        this._mcTrigger = value;\n    }\n    private _mcTrigger: string = 'hover';\n\n    get mcPlacement(): string {\n        return this._mcPlacement;\n    }\n    set mcPlacement(value: string) {\n        if (value !== this._mcPlacement) {\n            this._mcPlacement = value;\n            this.positions.unshift(POSITION_MAP[ this.mcPlacement ]);\n        } else if (!value) {\n            this._mcPlacement = 'top';\n        }\n    }\n    private _mcPlacement: string = 'top';\n\n    get mcPopoverSize(): string {\n        return this.popoverSize;\n    }\n    set mcPopoverSize(value: string) {\n        if (value !== this.popoverSize) {\n            this.popoverSize = value;\n        } else if (!value) {\n            this.popoverSize = 'normal';\n        }\n    }\n    private popoverSize: string;\n\n    get mcVisible(): boolean {\n        return this._mcVisible.value;\n    }\n    set mcVisible(value: boolean) {\n        const visible = coerceBooleanProperty(value);\n\n        if (this._mcVisible.value !== visible) {\n            this._mcVisible.next(visible);\n            this.mcVisibleChange.emit(visible);\n        }\n    }\n    private _mcVisible: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n    get classList() {\n        return this._classList.join(' ');\n    }\n    set classList(value: string | string[]) {\n        let list: string[] = [];\n\n        if (Array.isArray(value)) {\n            list = value;\n        } else {\n            list.push(value);\n        }\n\n        this._classList = list;\n    }\n    private _classList: string[] = [];\n\n    get getCssClassesList(): string {\n        return `${this.classList} mc-popover-${this.mcPopoverSize} mc-popover_placement-${this.getPlacementClass}`;\n    }\n\n    get getPlacementClass(): string {\n        return POSITION_TO_CSS_MAP[this.mcPlacement];\n    }\n\n    /** Subject for notifying that the popover has been hidden from the view */\n    private readonly onHideSubject: Subject<any> = new Subject();\n\n    constructor(public changeDetectorRef: ChangeDetectorRef, public componentElementRef: ElementRef) {\n        this.availablePositions = POSITION_MAP;\n    }\n\n    show(): void {\n        if (this.isNonEmptyContent()) {\n            this.closeOnInteraction = true;\n            this.popoverVisibility = 'visible';\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this.markForCheck();\n        }\n    }\n\n    hide(): void {\n        this.popoverVisibility = 'hidden';\n        this.mcVisibleChange.emit(false);\n\n        // Mark for check so if any parent component has set the\n        // ChangeDetectionStrategy to OnPush it will be checked anyways\n        this.markForCheck();\n    }\n\n    isNonEmptyContent(): boolean {\n        return !!this.mcContent && (this.isTemplateRef(this.mcContent) || this.isNonEmptyString(this.mcContent));\n    }\n\n    /** Returns an observable that notifies when the popover has been hidden from view. */\n    afterHidden(): Observable<void> {\n        return this.onHideSubject.asObservable();\n    }\n\n    isVisible(): boolean {\n        return this.popoverVisibility === 'visible';\n    }\n\n    markForCheck(): void {\n        this.changeDetectorRef.markForCheck();\n    }\n\n    isTemplateRef(value: any): boolean {\n        return value instanceof TemplateRef;\n    }\n\n    isNonEmptyString(value: any): boolean {\n        return typeof value === 'string' && value !== '';\n    }\n\n    handleBodyInteraction(e): void {\n        if (this.closeOnInteraction && !this.componentElementRef.nativeElement.contains(e.target)) {\n            this.hide();\n        }\n    }\n\n    animationStart() {\n            this.closeOnInteraction = false;\n    }\n\n    animationDone(event: AnimationEvent): void {\n        const toState = event.toState as PopoverVisibility;\n\n        if (toState === 'hidden' && !this.isVisible()) {\n            this.onHideSubject.next();\n        }\n\n        if (toState === 'visible' || toState === 'hidden') {\n            this.closeOnInteraction = true;\n        }\n    }\n\n    ngOnDestroy() {\n        this.onHideSubject.complete();\n    }\n}\n\nexport const MC_POPOVER_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-popover-scroll-strategy');\n\n/** @docs-private */\nexport function mcPopoverScrollStrategyFactory(overlay: Overlay): () => IScrollStrategy {\n    return () => overlay.scrollStrategies.reposition({scrollThrottle: 20});\n}\n\n/** @docs-private */\nexport const MC_POPOVER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_POPOVER_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: mcPopoverScrollStrategyFactory\n};\n\n/** Creates an error to be thrown if the user supplied an invalid popover position. */\nexport function getMcPopoverInvalidPositionError(position: string) {\n    return Error(`McPopover position \"${position}\" is invalid.`);\n}\n\nconst VIEWPORT_MARGIN: number = 8;\n/** @docs-private\n * Minimal width of anchor element should be equal or greater than popover arrow width plus arrow offset right/left\n * MIN_ANCHOR_ELEMENT_WIDTH used for positioning update inside handlePositionUpdate()\n */\nconst MIN_ANCHOR_ELEMENT_WIDTH: number = 40;\n\n@Directive({\n    selector: '[mcPopover]',\n    exportAs: 'mcPopover',\n    host: {\n        '(keydown)': 'handleKeydown($event)',\n        '(touchend)': 'handleTouchend()',\n        '[class.mc-popover_open]': 'isOpen'\n    }\n})\nexport class McPopover implements OnInit, OnDestroy {\n    isPopoverOpen: boolean = false;\n    isDynamicPopover = false;\n    overlayRef: OverlayRef | null;\n    portal: ComponentPortal<McPopoverComponent>;\n    availablePositions: any;\n    popover: McPopoverComponent | null;\n\n    @Output('mcPopoverVisibleChange') mcVisibleChange = new EventEmitter<boolean>();\n\n    @Input('mcPopoverHeader')\n    get mcHeader(): string | TemplateRef<any> {\n        return this._mcHeader;\n    }\n    set mcHeader(value: string | TemplateRef<any>) {\n        this._mcHeader = value;\n        this.updateCompValue('mcHeader', value);\n\n        if (this.isPopoverOpen) {\n            this.updatePosition(true);\n        }\n    }\n    private _mcHeader: string | TemplateRef<any>;\n\n    @Input('mcPopoverContent')\n    get mcContent(): string | TemplateRef<any> {\n        return this._mcContent;\n    }\n    set mcContent(value: string | TemplateRef<any>) {\n        this._mcContent = value;\n        this.updateCompValue('mcContent', value);\n\n        if (this.isPopoverOpen) {\n            this.updatePosition(true);\n        }\n    }\n    private _mcContent: string | TemplateRef<any>;\n\n    @Input('mcPopoverFooter')\n    get mcFooter(): string | TemplateRef<any> {\n        return this._mcFooter;\n    }\n    set mcFooter(value: string | TemplateRef<any>) {\n        this._mcFooter = value;\n        this.updateCompValue('mcFooter', value);\n\n        if (this.isPopoverOpen) {\n            this.updatePosition(true);\n        }\n    }\n    private _mcFooter: string | TemplateRef<any>;\n\n    private $unsubscribe = new Subject<void>();\n\n    @Input('mcPopoverDisabled')\n    get disabled(): boolean {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    private _disabled: boolean = false;\n\n    @Input('mcPopoverMouseEnterDelay')\n    get mcMouseEnterDelay(): number {\n        return this._mcMouseEnterDelay;\n    }\n    set mcMouseEnterDelay(value: number) {\n        this._mcMouseEnterDelay = value;\n        this.updateCompValue('mcMouseEnterDelay', value);\n    }\n    private _mcMouseEnterDelay: number;\n\n    @Input('mcPopoverMouseLeaveDelay')\n    get mcMouseLeaveDelay(): number {\n        return this._mcMouseLeaveDelay;\n    }\n    set mcMouseLeaveDelay(value: number) {\n        this._mcMouseLeaveDelay = value;\n        this.updateCompValue('mcMouseLeaveDelay', value);\n    }\n    private _mcMouseLeaveDelay: number;\n\n    @Input('mcPopoverTrigger')\n    get mcTrigger(): string {\n        return this._mcTrigger;\n    }\n    set mcTrigger(value: string) {\n        if (value) {\n            this._mcTrigger = value;\n            this.updateCompValue('mcTrigger', value);\n        } else {\n            this._mcTrigger = 'hover';\n        }\n    }\n    private _mcTrigger: string = 'hover';\n\n    @Input('mcPopoverSize')\n    get mcPopoverSize(): string {\n        return this.popoverSize;\n    }\n    set mcPopoverSize(value: string) {\n        if (value && (value === 'small' || value === 'normal' || value === 'large')) {\n            this.popoverSize = value;\n            this.updateCompValue('mcPopoverSize', value);\n        } else {\n            this.popoverSize = 'normal';\n        }\n    }\n    private popoverSize: string = 'normal';\n\n    @Input('mcPopoverPlacement')\n    get mcPlacement(): string {\n        return this._mcPlacement;\n    }\n    set mcPlacement(value: string) {\n        if (value) {\n            this._mcPlacement = value;\n            this.updateCompValue('mcPlacement', value);\n        } else {\n            this._mcPlacement = 'top';\n        }\n    }\n    private _mcPlacement: string = 'top';\n\n    @Input('mcPopoverClass')\n    get classList() {\n        return this._classList;\n    }\n    set classList(value: string | string[]) {\n        this._classList = value;\n        this.updateCompValue('classList', this._classList);\n    }\n    private _classList: string | string[];\n\n    @Input('mcPopoverVisible')\n    get mcVisible(): boolean {\n        return this._mcVisible;\n    }\n    set mcVisible(externalValue: boolean) {\n        const value = coerceBooleanProperty(externalValue);\n        this._mcVisible = value;\n        this.updateCompValue('mcVisible', value);\n\n        if (value) {\n            this.show();\n        } else {\n            this.hide();\n        }\n    }\n    private _mcVisible: boolean;\n\n    get isOpen(): boolean {\n        return this.isPopoverOpen;\n    }\n\n    private manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n    private readonly destroyed = new Subject<void>();\n\n    constructor(\n        private overlay: Overlay,\n        private elementRef: ElementRef,\n        private ngZone: NgZone,\n        private scrollDispatcher: ScrollDispatcher,\n        private hostView: ViewContainerRef,\n        @Inject(MC_POPOVER_SCROLL_STRATEGY) private scrollStrategy,\n        @Optional() private direction: Directionality) {\n            this.availablePositions = POSITION_MAP;\n        }\n\n    /** Create the overlay config and position strategy */\n    createOverlay(): OverlayRef {\n        if (this.overlayRef) {\n            return this.overlayRef;\n        }\n\n        // Create connected position strategy that listens for scroll events to reposition.\n        const strategy = this.overlay.position()\n            .flexibleConnectedTo(this.elementRef)\n            .withTransformOriginOn('.mc-popover')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(VIEWPORT_MARGIN)\n            .withPositions([ ...EXTENDED_OVERLAY_POSITIONS ]);\n\n        const scrollableAncestors = this.scrollDispatcher\n            .getAncestorScrollContainers(this.elementRef);\n\n        strategy.withScrollableContainers(scrollableAncestors);\n\n        strategy.positionChanges.pipe(takeUntil(this.destroyed)).subscribe((change) => {\n            if (this.popover) {\n                this.onPositionChange(change);\n                if (change.scrollableViewProperties.isOverlayClipped && this.popover.mcVisible) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the popover.\n                    this.ngZone.run(() => this.hide());\n                }\n            }\n        });\n\n        this.overlayRef = this.overlay.create({\n            direction: this.direction,\n            positionStrategy: strategy,\n            panelClass: 'mc-popover__panel',\n            scrollStrategy: this.scrollStrategy()\n        });\n\n        this.updatePosition();\n\n        this.overlayRef.detachments()\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(() => this.detach());\n\n        return this.overlayRef;\n    }\n\n    detach() {\n        if (this.overlayRef && this.overlayRef.hasAttached() && this.popover) {\n            this.overlayRef.detach();\n            this.popover = null;\n        }\n    }\n\n    onPositionChange($event: ConnectedOverlayPositionChange): void {\n        let updatedPlacement = this.mcPlacement;\n        Object.keys(this.availablePositions).some((key) => {\n            if ($event.connectionPair.originX === this.availablePositions[key].originX &&\n                $event.connectionPair.originY === this.availablePositions[key].originY &&\n                $event.connectionPair.overlayX === this.availablePositions[key].overlayX &&\n                $event.connectionPair.overlayY === this.availablePositions[key].overlayY) {\n                updatedPlacement = key;\n\n                return true;\n            }\n\n            return false;\n        });\n        this.updateCompValue('mcPlacement', updatedPlacement);\n\n        if (this.popover) {\n            this.updateCompValue('classList', this.classList);\n            this.popover.markForCheck();\n        }\n\n        this.handlePositionUpdate();\n    }\n\n    handlePositionUpdate() {\n        if (!this.overlayRef) {\n            this.overlayRef = this.createOverlay();\n        }\n\n        const verticalOffset = this.hostView.element.nativeElement.clientHeight / 2; // tslint:disable-line\n        const anchorElementWidth = this.hostView.element.nativeElement.clientWidth; // tslint:disable-line\n\n        if (this.mcPlacement === 'rightTop' || this.mcPlacement === 'leftTop') {\n            const currentContainer = this.overlayRef.overlayElement.style.top || '0px';\n            this.overlayRef.overlayElement.style.top =\n                `${parseInt(currentContainer.split('px')[0], 10) + verticalOffset - 20}px`; // tslint:disable-line\n        }\n\n        if (this.mcPlacement === 'rightBottom' || this.mcPlacement === 'leftBottom') {\n            const currentContainer = this.overlayRef.overlayElement.style.bottom || '0px';\n            this.overlayRef.overlayElement.style.bottom =\n                `${parseInt(currentContainer.split('px')[0], 10) + verticalOffset - 22}px`; // tslint:disable-line\n        }\n\n        if ((this.mcPlacement === 'topRight' || this.mcPlacement === 'bottomRight') &&\n            anchorElementWidth < MIN_ANCHOR_ELEMENT_WIDTH) {\n            const currentContainer = this.overlayRef.overlayElement.style.right || '0px';\n            this.overlayRef.overlayElement.style.right =\n                `${parseInt(currentContainer.split('px')[0], 10) - 18}px`; // tslint:disable-line\n        }\n\n        if ((this.mcPlacement === 'topLeft' || this.mcPlacement === 'bottomLeft') &&\n            anchorElementWidth < MIN_ANCHOR_ELEMENT_WIDTH) {\n            const currentContainer = this.overlayRef.overlayElement.style.left || '0px';\n            this.overlayRef.overlayElement.style.left =\n                `${parseInt(currentContainer.split('px')[0], 10) - 20}px`; // tslint:disable-line\n        }\n    }\n\n    // tslint:disable-next-line:no-any\n    updateCompValue(key: string, value: any): void {\n        if (this.isDynamicPopover && value) {\n            if (this.popover) {\n                this.popover[key] = value;\n            }\n        }\n    }\n\n    ngOnInit(): void {\n        this.initElementRefListeners();\n    }\n\n    ngOnDestroy(): void {\n        if (this.overlayRef) {\n            this.overlayRef.dispose();\n        }\n        this.manualListeners.forEach((listener, event) =>\n            this.elementRef.nativeElement.removeEventListener(event, listener));\n        this.manualListeners.clear();\n\n        this.$unsubscribe.next();\n        this.$unsubscribe.complete();\n    }\n\n    handleKeydown(e: KeyboardEvent) {\n        if (this.isOpen && e.keyCode === ESCAPE) { // tslint:disable-line\n            this.hide();\n        }\n    }\n\n    handleTouchend() {\n        this.hide();\n    }\n\n    initElementRefListeners() {\n        if (this.mcTrigger === 'hover') {\n\n            this.manualListeners\n                .set('mouseenter', () => this.show())\n                .set('mouseleave', () => this.hide())\n                .forEach((listener, event) => this.elementRef.nativeElement.addEventListener(event, listener));\n        }\n\n        if (this.mcTrigger === 'focus') {\n\n            this.manualListeners\n                .set('focus', () => this.show())\n                .set('blur', () => this.hide())\n                .forEach((listener, event) => this.elementRef.nativeElement.addEventListener(event, listener));\n        }\n    }\n\n    show(): void {\n        if (!this.disabled) {\n            if (!this.popover) {\n                const overlayRef = this.createOverlay();\n                this.detach();\n\n                this.portal = this.portal || new ComponentPortal(McPopoverComponent, this.hostView);\n\n                this.popover = overlayRef.attach(this.portal).instance;\n                this.isDynamicPopover = true;\n                const properties = [\n                    'mcPlacement',\n                    'mcPopoverSize',\n                    'mcTrigger',\n                    'mcMouseEnterDelay',\n                    'mcMouseLeaveDelay',\n                    'classList',\n                    'mcVisible',\n                    'mcHeader',\n                    'mcContent',\n                    'mcFooter'\n                ];\n\n                properties.forEach((property) => this.updateCompValue(property, this[ property ]));\n                this.popover.mcVisibleChange.pipe(takeUntil(this.$unsubscribe), distinctUntilChanged())\n                    .subscribe((data) => {\n                        this.mcVisible = data;\n                        this.mcVisibleChange.emit(data);\n                        this.isPopoverOpen = data;\n                    });\n                this.popover.afterHidden()\n                    .pipe(takeUntil(this.destroyed))\n                    .subscribe(() => this.detach());\n            }\n            this.updatePosition();\n            this.popover.show();\n        }\n    }\n\n    hide(): void {\n        if (this.popover) {\n            this.popover.hide();\n        }\n    }\n\n    /** Updates the position of the current popover. */\n    updatePosition(reapplyPosition: boolean = false) {\n        if (!this.overlayRef) {\n            this.overlayRef = this.createOverlay();\n        }\n        const position =\n            this.overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n        const origin = this.getOrigin();\n        const overlay = this.getOverlayPosition();\n\n        position.withPositions([\n            {...origin.main, ...overlay.main},\n            {...origin.fallback, ...overlay.fallback}\n        ]);\n\n        //\n        // FIXME: Необходимо в некоторых моментах форсировать позиционировать только после рендеринга всего контента\n        //\n        if (reapplyPosition) {\n            setTimeout(() => {\n                position.reapplyLastPosition();\n            });\n        }\n    }\n\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    getOrigin(): {main: IOriginConnectionPosition; fallback: IOriginConnectionPosition} {\n        let originPosition: IOriginConnectionPosition;\n        const originXPosition = this.getOriginXaxis();\n        const originYPosition = this.getOriginYaxis();\n        originPosition = {originX: originXPosition, originY: originYPosition};\n\n        const {x, y} = this.invertPosition(originPosition.originX, originPosition.originY);\n\n        return {\n            main: originPosition,\n            fallback: {originX: x, originY: y}\n        };\n    }\n\n    getOriginXaxis(): HorizontalConnectionPos {\n        const position = this.mcPlacement;\n        let origX: HorizontalConnectionPos;\n        const isLtr = !this.direction || this.direction.value === 'ltr';\n        if (position === 'top' || position === 'bottom') {\n            origX = 'center';\n        } else if (position.toLowerCase().includes('right') && !isLtr ||\n            position.toLowerCase().includes('left') && isLtr) {\n            origX = 'start';\n        } else if (position.toLowerCase().includes('right') && isLtr ||\n            position.toLowerCase().includes('left') && !isLtr) {\n            origX = 'end';\n        } else {\n            throw getMcPopoverInvalidPositionError(position);\n        }\n\n        return origX;\n    }\n\n    getOriginYaxis(): VerticalConnectionPos {\n        const position = this.mcPlacement;\n        let origY: VerticalConnectionPos;\n        if (position === 'right' || position === 'left') {\n            origY = 'center';\n        } else if (position.toLowerCase().includes('top')) {\n            origY = 'top';\n        } else if (position.toLowerCase().includes('bottom')) {\n            origY = 'bottom';\n        } else {\n            throw getMcPopoverInvalidPositionError(position);\n        }\n\n        return origY;\n    }\n\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    getOverlayPosition(): {main: IOverlayConnectionPosition; fallback: IOverlayConnectionPosition} {\n        const position = this.mcPlacement;\n        let overlayPosition: IOverlayConnectionPosition;\n        if (this.availablePositions[position]) {\n            overlayPosition = {\n                overlayX : this.availablePositions[position].overlayX,\n                overlayY: this.availablePositions[position].overlayY\n            };\n        } else {\n            throw getMcPopoverInvalidPositionError(position);\n        }\n\n        const {x, y} = this.invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n        return {\n            main: overlayPosition,\n            fallback: {overlayX: x, overlayY: y}\n        };\n    }\n\n    /** Inverts an overlay position. */\n    private invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n        let newX: HorizontalConnectionPos = x;\n        let newY: VerticalConnectionPos = y;\n        if (this.mcPlacement === 'top' || this.mcPlacement === 'bottom') {\n            if (y === 'top') {\n                newY = 'bottom';\n            } else if (y === 'bottom') {\n                newY = 'top';\n            }\n        } else {\n            if (x === 'end') {\n                newX = 'start';\n            } else if (x === 'start') {\n                newX = 'end';\n            }\n        }\n\n        return {x: newX, y: newY};\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\n\nimport {\n    McPopoverComponent,\n    McPopover,\n    MC_POPOVER_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './popover.component';\n\n\n@NgModule({\n    declarations: [McPopoverComponent, McPopover],\n    exports: [McPopoverComponent, McPopover],\n    imports: [CommonModule, OverlayModule],\n    providers: [MC_POPOVER_SCROLL_STRATEGY_FACTORY_PROVIDER],\n    entryComponents: [McPopoverComponent]\n})\nexport class McPopoverModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, CanColorCtor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressBarMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressBarBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressBarMixinBase:\n    CanColorCtor &\n    typeof McProgressBarBase =\n        mixinColor(McProgressBarBase);\n\n@Component({\n    selector: 'mc-progress-bar',\n    templateUrl: './progress-bar.component.html',\n    styleUrls: ['./progress-bar.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-bar',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressBar extends _McProgressBarMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-bar-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressBarMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McProgressBar\n} from './progress-bar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressBar\n    ],\n    declarations: [\n        McProgressBar\n    ]\n})\nexport class McProgressBarModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, CanColorCtor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressSpinnerBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressSpinnerMixinBase:\n    CanColorCtor &\n    typeof McProgressSpinnerBase =\n        mixinColor(McProgressSpinnerBase);\n\nconst MAX_DASH_ARRAY = 273;\n\n@Component({\n    selector: 'mc-progress-spinner',\n    templateUrl: './progress-spinner.component.html',\n    styleUrls: ['./progress-spinner.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-spinner',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressSpinner extends _McProgressSpinnerMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-spinner-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressSpinnerMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n\n    get dashOffsetPercent(): string {\n        return `${MAX_DASH_ARRAY - this.percentage * MAX_DASH_ARRAY}%`;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McProgressSpinner } from './progress-spinner.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressSpinner\n    ],\n    declarations: [\n        McProgressSpinner\n    ]\n})\nexport class McProgressSpinnerModule {}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef,\n    Input, OnDestroy, OnInit, Optional, Output, QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { UniqueSelectionDispatcher } from '@ptsecurity/cdk/collections';\n\nimport {\n    CanColor, CanColorCtor,\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/** Change event object emitted by McRadio. */\nexport class McRadioChange {\n    constructor(\n        /** The McRadioButton that emits the change event. */\n        public source: McRadioButton,\n        /** The value of the McRadioButton. */\n        public value: any) {}\n}\n\n// Boilerplate for applying mixins to McRadioGroup.\n/** @docs-private */\nexport class McRadioGroupBase {}\nexport const _McRadioGroupMixinBase: CanDisableCtor & typeof McRadioGroupBase = mixinDisabled(McRadioGroupBase);\n\n/**\n * Provider Expression that allows mc-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McRadioGroup),\n    multi: true\n};\n\n@Directive({\n    selector: 'mc-radio-group',\n    exportAs: 'mcRadioGroup',\n    providers: [MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n    host: {\n        role: 'radiogroup',\n        class: 'mc-radio-group'\n    },\n    inputs: ['disabled']\n})\nexport class McRadioGroup extends _McRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    @Input()\n    get name(): string { return this._name; }\n    set name(value: string) {\n        this._name = value;\n        this.updateRadioButtonNames();\n    }\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this.markRadiosForCheck();\n    }\n\n    /** Value of the radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n\n            this.updateSelectedRadioFromValue();\n            this.checkSelectedRadioButton();\n        }\n    }\n\n    /** Whether the radio button is selected. */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: McRadioButton | null) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this.checkSelectedRadioButton();\n    }\n\n    /** Whether the radio group is disabled */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /** Whether the radio group is required */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** Child radio buttons. */\n    @ContentChildren(forwardRef(() => McRadioButton), { descendants: true })\n    _radios: QueryList<McRadioButton>;\n\n    /**\n     * Selected value for group. Should equal the value of the selected radio button if there *is*\n     * a corresponding radio button with a matching value. If there is *not* such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    private _value: any = null;\n\n    /** The HTML name attribute applied to radio buttons in this group. */\n    private _name: string = `mc-radio-group-${nextUniqueId++}`;\n\n    /** The currently selected radio button. Should match value. */\n    private _selected: McRadioButton | null = null;\n\n    /** Whether the `value` has been set to its initial value. */\n    private _isInitialized: boolean = false;\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    private _labelPosition: 'before' | 'after' = 'after';\n\n    /** Whether the radio group is disabled. */\n    private _disabled: boolean = false;\n\n    /** Whether the radio group is required. */\n    private _required: boolean = false;\n\n    constructor(\n        private readonly _changeDetector: ChangeDetectorRef\n    ) {\n        super();\n    }\n\n    /** The method to be called in order to update ngModel */\n    // tslint:disable-next-line\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @docs-private\n     */\n    // tslint:disable-next-line\n    onTouched: () => any = () => {};\n\n    checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on McRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the McRadioGroup.\n        this._isInitialized = true;\n    }\n\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        if (this._isInitialized) {\n            this.change.emit(new McRadioChange(this._selected!, this._value));\n        }\n    }\n\n    markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach((radio) => radio.markForCheck());\n        }\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n\n    private updateRadioButtonNames(): void {\n        if (this._radios) {\n            this._radios.forEach((radio) => {\n                radio.name = this.name;\n            });\n        }\n    }\n\n    /** Updates the `selected` radio button from the internal _value state. */\n    private updateSelectedRadioFromValue(): void {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n        if (this._radios != null && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach((radio) => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n}\n\n\n// Boilerplate for applying mixins to McRadioButton.\n/** @docs-private */\nexport class McRadioButtonBase {\n    // Since the disabled property is manually defined for the McRadioButton and isn't set up in\n    // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n    // defined to properly work.\n    disabled: boolean;\n\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McRadioButtonMixinBase:\n    CanColorCtor &\n    HasTabIndexCtor &\n    typeof McRadioButtonBase =\n        mixinColor(mixinTabIndex(McRadioButtonBase));\n\n\n@Component({\n    selector: 'mc-radio-button',\n    templateUrl: 'radio.component.html',\n    styleUrls: ['radio.css'],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    exportAs: 'mcRadioButton',\n    host: {\n        class: 'mc-radio-button',\n        '[attr.id]': 'id',\n        '[class.mc-checked]': 'checked',\n        '[class.mc-disabled]': 'disabled',\n        '(focus)': '_inputElement.nativeElement.focus()'\n    }\n})\nexport class McRadioButton extends _McRadioButtonMixinBase\n    implements OnInit, OnDestroy, CanColor, HasTabIndex {\n\n    private readonly _uniqueId: string = `mc-radio-${++nextUniqueId}`;\n\n    /* tslint:disable:member-ordering */\n\n    /** The unique ID for the radio button. */\n    @Input() id: string = this._uniqueId;\n\n    /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n    @Input() name: string;\n\n    /** Used to set the 'aria-label' attribute on the underlying input element. */\n    @Input('aria-label') ariaLabel: string;\n\n    /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n    @Input('aria-labelledby') ariaLabelledby: string;\n\n    /** The 'aria-describedby' attribute is read after the element's label and field type. */\n    @Input('aria-describedby') ariaDescribedby: string;\n\n    /** Whether this radio button is checked. */\n    @Input()\n    get checked(): boolean { return this._checked; }\n    set checked(value: boolean) {\n        const newCheckedState = toBoolean(value);\n\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** The value of this radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(value: any) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup != null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n\n    /** Whether the radio button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n    }\n    set disabled(value: boolean) {\n        const newDisabledState = toBoolean(value);\n\n        if (this._disabled !== newDisabledState) {\n\n            this._disabled = newDisabledState;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** Whether the radio button is required. */\n    @Input()\n    get required(): boolean {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    private _labelPosition: 'before' | 'after';\n\n    /** The native `<input type=radio>` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** The parent radio group. May or may not be present. */\n    radioGroup: McRadioGroup;\n\n    @Input()\n    isFocused: boolean = false;\n\n    /** ID of the native input element inside `<mc-radio-button>` */\n    get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n    /** Whether this radio is checked. */\n    private _checked: boolean = false;\n\n    /** Whether this radio is disabled. */\n    private _disabled: boolean;\n\n    /** Whether this radio is required. */\n    private _required: boolean;\n\n    /** Value assigned to this radio. */\n    private _value: any = null;\n\n    /** Unregister function for _radioDispatcher */\n    // tslint:disable-next-line\n    private readonly removeUniqueSelectionListener: () => void = () => {};\n\n    constructor(\n        @Optional() radioGroup: McRadioGroup,\n        elementRef: ElementRef,\n        private readonly _changeDetector: ChangeDetectorRef,\n        private readonly _radioDispatcher: UniqueSelectionDispatcher\n    ) {\n\n        super(elementRef);\n\n        this.radioGroup = radioGroup;\n\n        this.removeUniqueSelectionListener =\n            _radioDispatcher.listen((id: string, name: string) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n\n    ngOnDestroy() {\n        this.removeUniqueSelectionListener();\n    }\n\n    /** Focuses the radio button. */\n    // tslint:disable-next-line\n    focus(): void {}\n\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n\n    onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n\n    onInputChange(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this.emitChangeEvent();\n\n        if (this.radioGroup) {\n            this.radioGroup.controlValueAccessorChangeFn(this.value);\n            this.radioGroup.touch();\n            if (groupValueChanged) {\n                this.radioGroup.emitChangeEvent();\n            }\n        }\n    }\n\n    /** Dispatch change event with current value. */\n    private emitChangeEvent(): void {\n        this.change.emit(new McRadioChange(this, this._value));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McRadioButton, McRadioGroup } from './radio.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule],\n    exports: [McRadioGroup, McRadioButton],\n    declarations: [McRadioGroup, McRadioButton]\n})\nexport class McRadioModule {\n}\n","import { Directive, Input } from '@angular/core';\n\nimport { CdkTreeNodeDef } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodeDef]',\n    inputs: ['when: mcTreeNodeDefWhen'],\n    providers: [{ provide: CdkTreeNodeDef, useExisting: McTreeNodeDef }]\n})\nexport class McTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n    @Input('mcTreeNode') data: T;\n}\n","import { Directive, Input, OnInit } from '@angular/core';\nimport { CdkTreeNodePadding } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodePadding]',\n    providers: [{ provide: CdkTreeNodePadding, useExisting: McTreeNodePadding }]\n})\nexport class McTreeNodePadding<T> extends CdkTreeNodePadding<T> implements OnInit {\n    @Input('mcTreeNodePadding') level: number;\n\n    @Input('mcTreeNodePaddingIndent') indent: number;\n\n    baseLeftPadding: number = 12;\n    /* tslint:disable-next-line:naming-convention */\n    _indent: number = 20;\n\n    withIcon: boolean;\n    iconWidth: number = 20;\n\n    get leftPadding(): number {\n        return (this.withIcon ? 0 : this.iconWidth) + this.baseLeftPadding;\n    }\n\n    paddingIndent(): string | null {\n        const nodeLevel = (this.treeNode.data && this.tree.treeControl.getLevel)\n            ? this.tree.treeControl.getLevel(this.treeNode.data)\n            : null;\n\n        const level = this.level || nodeLevel;\n\n        return level ? `${(level * this._indent) + this.leftPadding}px` : `${this.baseLeftPadding}px`;\n    }\n\n    ngOnInit(): void {\n        this.withIcon = this.tree.treeControl.isExpandable(this.treeNode.data);\n\n        this.setPadding();\n    }\n}\n","import { Directive } from '@angular/core';\nimport { CdkTreeNodeToggle } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodeToggle]',\n    host: {\n        '(click)': 'toggle($event)'\n    },\n    providers: [{ provide: CdkTreeNodeToggle, useExisting: McTreeNodeToggle }]\n})\nexport class McTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {}\n","import {\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    Output,\n    ElementRef,\n    Inject,\n    Optional,\n    InjectionToken\n} from '@angular/core';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { CdkTreeNode } from '@ptsecurity/cdk/tree';\nimport { CanDisable, toBoolean } from '@ptsecurity/mosaic/core';\n\n\n/* tslint:disable-next-line:naming-convention */\nexport interface McTreeOptionParentComponent {\n    multiple: boolean;\n    selectionModel: SelectionModel<McTreeOption>;\n    setFocusedOption: any;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MC_TREE_OPTION_PARENT_COMPONENT =\n    new InjectionToken<McTreeOptionParentComponent>('MC_TREE_OPTION_PARENT_COMPONENT');\n\nexport class McTreeOptionChange {\n    constructor(public source: McTreeOption, public isUserInput = false) {}\n}\n\nlet uniqueIdCounter: number = 0;\n\n@Component({\n    selector: 'mc-tree-option',\n    exportAs: 'mcTreeOption',\n    host: {\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'getTabIndex()',\n\n        '[attr.disabled]': 'disabled || null',\n\n        class: 'mc-tree-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-active]': 'active',\n\n        '(click)': 'selectViaInteraction()'\n    },\n    templateUrl: './tree-option.html',\n    providers: [{ provide: CdkTreeNode, useExisting: McTreeOption }]\n})\nexport class McTreeOption extends CdkTreeNode<McTreeOption> implements CanDisable {\n    @Output() readonly onSelectionChange = new EventEmitter<McTreeOptionChange>();\n\n    @Input() value: any;\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    // @Input()\n    // get selected(): boolean {\n    //     return this.treeSelection.selectionModel && this.treeSelection.selectionModel.isSelected(this) || false;\n    // }\n\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            // this.treeSelection._reportValueChange();\n        }\n    }\n\n    private _selected: boolean = false;\n\n    /**\n     * Whether or not the option is currently active and ready to be selected.\n     * An active option displays styles as if it is focused, but the\n     * focus is actually retained somewhere else. This comes in handy\n     * for components like autocomplete where focus must remain on the input.\n     */\n    get active(): boolean {\n        return this._active;\n    }\n\n    private _active = false;\n\n    get id(): string {\n        return this._id;\n    }\n\n    private _id = `mc-tree-option-${uniqueIdCounter++}`;\n\n    get multiple(): boolean {\n        return this.parent.multiple;\n    }\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_TREE_OPTION_PARENT_COMPONENT) private readonly parent: McTreeOptionParentComponent\n    ) {\n        // todo any\n        super(elementRef, parent as any);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.parent.selectionModel) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.parent.selectionModel.select(this);\n        } else {\n            this.parent.selectionModel.deselect(this);\n        }\n\n        // this._changeDetector.markForCheck();\n    }\n\n    /**\n     * This method sets display styles on the option to make it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setActiveStyles(): void {\n        if (!this._active) {\n            this._active = true;\n\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    /**\n     * This method removes display styles on the option that made it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setInactiveStyles(): void {\n        if (this._active) {\n            this._active = false;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    getHeight(): number {\n        const clientRects = this.elementRef.nativeElement.getClientRects();\n        if (clientRects.length) {\n            return clientRects[0].height;\n        }\n\n        return 0;\n    }\n\n    focus(): void {\n        const element = this.getHostElement();\n\n        if (typeof element.focus === 'function') {\n            element.focus();\n        }\n    }\n\n    // todo старая реализация, нужно восстановить tree-selection\n    // handleClick(): void {\n    //     if (this.disabled) { return; }\n    //\n    //     this.treeSelection.setFocusedOption(this);\n    // }\n\n    /**\n     * The displayed value of the option. It is necessary to show the selected option in the\n     * select's trigger.\n     */\n    get viewValue(): string {\n        // TODO(kara): Add input property alternative for node envs.\n        return (this.getHostElement().textContent || '').trim();\n    }\n\n    select(): void {\n        if (!this._selected) {\n            this._selected = true;\n\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    deselect(): void {\n        if (this._selected) {\n            this._selected = false;\n\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    selectViaInteraction(): void {\n        if (!this.disabled) {\n            this._selected = this.multiple ? !this._selected : true;\n\n            this.changeDetectorRef.markForCheck();\n            this.emitSelectionChangeEvent(true);\n\n            if (this.parent.setFocusedOption) {\n                this.parent.setFocusedOption(this);\n            }\n        }\n    }\n\n    emitSelectionChangeEvent(isUserInput = false): void {\n        this.onSelectionChange.emit(new McTreeOptionChange(this, isUserInput));\n    }\n\n    getHostElement(): HTMLElement {\n        return this.elementRef.nativeElement;\n    }\n\n    getTabIndex(): string {\n        return this.disabled ? '-1' : '0';\n    }\n}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    EventEmitter,\n    Input,\n    IterableDiffer,\n    IterableDiffers,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    ElementRef\n} from '@angular/core';\nimport { NodeDef, ViewData } from '@angular/core/src/view';\nimport { ActiveDescendantKeyManager } from '@ptsecurity/cdk/a11y';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, SPACE } from '@ptsecurity/cdk/keycodes';\nimport { CdkTree, CdkTreeNodeOutlet } from '@ptsecurity/cdk/tree';\nimport {\n    CanDisable,\n    CanDisableCtor,\n    HasTabIndex,\n    HasTabIndexCtor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\nimport { Subject } from 'rxjs';\n\nimport { MC_TREE_OPTION_PARENT_COMPONENT, McTreeOption } from './tree-option';\n\n\nexport class McTreeNavigationChange {\n    constructor(\n        public source: McTreeSelection,\n        public option: McTreeOption\n    ) {}\n}\n\nexport class McTreeSelectionChange {\n    constructor(public source: McTreeSelection, public option: McTreeOption) {}\n}\n\nclass McTreeSelectionBase<T> extends CdkTree<T> {\n    constructor(differs: IterableDiffers, changeDetectorRef: ChangeDetectorRef) {\n        super(differs, changeDetectorRef);\n    }\n}\n\n/* tslint:disable-next-line:naming-convention */\nconst McTreeSelectionBaseMixin: HasTabIndexCtor & CanDisableCtor &\n    typeof McTreeSelectionBase = mixinTabIndex(mixinDisabled(McTreeSelectionBase));\n\n\n@Component({\n    selector: 'mc-tree-selection',\n    exportAs: 'mcTreeSelection',\n    template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n    host: {\n        class: 'mc-tree-selection',\n\n        '[attr.tabindex]': 'tabIndex',\n\n        '(keydown)': 'onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    styleUrls: ['./tree.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [\n        { provide: MC_TREE_OPTION_PARENT_COMPONENT, useExisting: McTreeSelection },\n        { provide: CdkTree, useExisting: McTreeSelection }\n    ]\n})\nexport class McTreeSelection extends McTreeSelectionBaseMixin<McTreeOption>\n    implements AfterContentInit, CanDisable, HasTabIndex {\n\n    @ViewChild(CdkTreeNodeOutlet) nodeOutlet: CdkTreeNodeOutlet;\n\n    @ContentChildren(McTreeOption) options: QueryList<McTreeOption>;\n\n    keyManager: ActiveDescendantKeyManager<McTreeOption>;\n\n    selectionModel: SelectionModel<McTreeOption>;\n\n    tabIndex: number;\n    multiple: boolean;\n    autoSelect: boolean;\n    noUnselect: boolean;\n\n    // todo temporary solution\n    withShift: boolean;\n    withCtrl: boolean;\n\n\n    @Output() readonly navigationChange = new EventEmitter<McTreeNavigationChange>();\n\n    @Output() readonly selectionChange = new EventEmitter<McTreeSelectionChange>();\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(rawValue: boolean) {\n        const value = toBoolean(rawValue);\n\n        if (this._disabled !== value) {\n            this._disabled = value;\n\n            if (this._disabled) {\n                /* tslint:disable-next-line:no-console */\n                console.log('need disable all options');\n            } else {\n                /* tslint:disable-next-line:no-console */\n                console.log('need enable all options');\n            }\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    private readonly destroy = new Subject<void>();\n\n    constructor(\n        private elementRef: ElementRef,\n        differs: IterableDiffers,\n        changeDetectorRef: ChangeDetectorRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('multiple') multiple: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string\n    ) {\n        super(differs, changeDetectorRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.multiple = multiple === null ? false : toBoolean(multiple);\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.selectionModel = new SelectionModel<McTreeOption>(this.multiple);\n    }\n\n    ngAfterContentInit(): void {\n        this.keyManager = new ActiveDescendantKeyManager<McTreeOption>(this.options)\n            .withVerticalOrientation(true)\n            .withHorizontalOrientation(null);\n    }\n\n    ngOnDestroy() {\n        this.destroy.next();\n\n        this.destroy.complete();\n    }\n\n    onKeyDown(event: KeyboardEvent) {\n        // tslint:disable-next-line: deprecation\n        const keyCode = event.keyCode;\n        this.withShift = event.shiftKey;\n        this.withCtrl = event.ctrlKey;\n\n        switch (keyCode) {\n            case LEFT_ARROW:\n                if (this.keyManager.activeItem) {\n                    this.treeControl.collapse(this.keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                break;\n            case RIGHT_ARROW:\n                if (this.keyManager.activeItem) {\n                    this.treeControl.expand(this.keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                break;\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this.keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this.keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                this.keyManager.setPreviousPageItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                this.keyManager.setNextPageItemActive();\n                event.preventDefault();\n\n                break;\n            default:\n                this.keyManager.onKeydown(event);\n        }\n    }\n\n    updateScrollSize(): void {\n        if (!this.options.first) { return; }\n\n        this.keyManager.withScrollSize(Math.floor(this.getHeight() / this.options.first.getHeight()));\n    }\n\n    setFocusedOption(option: McTreeOption) {\n        this.keyManager.setActiveItem(option);\n\n        if (this.withShift && this.multiple) {\n            const previousIndex = this.keyManager.previousActiveItemIndex;\n            const activeIndex = this.keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n\n            this.withShift = false;\n        } else if (this.withCtrl) {\n            this.withCtrl = false;\n\n            if (!this.canDeselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) {\n                this.options.forEach((item) => item.setSelected(false));\n                option.setSelected(true);\n            }\n        }\n\n        this.emitNavigationEvent(option);\n    }\n\n    toggleFocusedOption(): void {\n        const focusedIndex = this.keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this.isValidIndex(focusedIndex)) {\n            const focusedOption: McTreeOption = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this.canDeselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this.emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    renderNodeChanges(\n        data: McTreeOption[],\n        dataDiffer: IterableDiffer<McTreeOption> = this.dataDiffer,\n        viewContainer: any = this.nodeOutlet.viewContainer,\n        parentData?: McTreeOption\n    ): void {\n        super.renderNodeChanges(data, dataDiffer, viewContainer, parentData);\n\n        const arrayOfInstances = [];\n\n        viewContainer._embeddedViews.forEach((view: ViewData) => {\n            const viewDef = view.def;\n\n            viewDef.nodes.forEach((node: NodeDef) => {\n                if (viewDef.nodeMatchedQueries === node.matchedQueryIds) {\n                    const nodeData: any = view.nodes[node.nodeIndex];\n\n                    arrayOfInstances.push(nodeData.instance as never);\n                }\n            });\n        });\n\n        if (this.options) {\n            this.options.reset(arrayOfInstances);\n            this.options.notifyOnChanges();\n        }\n\n        this.updateScrollSize();\n    }\n\n    getHeight(): number {\n        const clientRects = this.elementRef.nativeElement.getClientRects();\n        if (clientRects.length) {\n            return clientRects[0].height;\n        }\n\n        return 0;\n    }\n\n    emitNavigationEvent(option: McTreeOption): void {\n        this.navigationChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    emitChangeEvent(option: McTreeOption): void {\n        this.selectionChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    private isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    private canDeselectLast(option: McTreeOption): boolean {\n        return !(this.noUnselect && this.selectionModel.selected.length === 1 && option.selected);\n    }\n}\n\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CdkTreeModule } from '@ptsecurity/cdk/tree';\nimport { McPseudoCheckboxModule } from '@ptsecurity/mosaic/core';\n\nimport { McTreeNodeDef } from './node';\nimport { McTreeNodePadding } from './padding';\nimport { McTreeNodeToggle } from './toggle';\nimport { McTreeOption } from './tree-option';\nimport { McTreeSelection } from './tree-selection';\n\n\nconst MC_TREE_DIRECTIVES = [\n    McTreeSelection,\n    McTreeOption,\n    McTreeNodeDef,\n    McTreeNodePadding,\n    McTreeNodeToggle\n];\n\n@NgModule({\n    imports: [CommonModule, CdkTreeModule, McPseudoCheckboxModule],\n    exports: MC_TREE_DIRECTIVES,\n    declarations: MC_TREE_DIRECTIVES\n})\nexport class McTreeModule {}\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { FlatTreeControl, ITreeControl } from '@ptsecurity/cdk/tree';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class McTreeFlattener<T, F> {\n    constructor(\n        public transformFunction: (node: T, level: number) => F,\n        public getLevel: (node: F) => number,\n        public isExpandable: (node: F) => boolean,\n        public getChildren: (node: T) => Observable<T[]>\n    ) {}\n\n    flattenNode(node: T, level: number, resultNodes: F[], parentMap: boolean[]): F[] {\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n\n        if (this.isExpandable(flatNode)) {\n            this.getChildren(node)\n                .pipe(take(1))\n                .subscribe((children) => {\n                    children.forEach((child, index) => {\n                        const childParentMap: boolean[] = parentMap.slice();\n                        childParentMap.push(index !== children.length - 1);\n\n                        this.flattenNode(child, level + 1, resultNodes, childParentMap);\n                    });\n                });\n        }\n\n        return resultNodes;\n    }\n\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n    flattenNodes(structuredData: T[]): F[] {\n        const resultNodes: F[] = [];\n        structuredData.forEach((node) => this.flattenNode(node, 0, resultNodes, []));\n\n        return resultNodes;\n    }\n\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n    expandFlattenedNodes(nodes: F[], treeControl: ITreeControl<F>): F[] {\n        const results: F[] = [];\n        const currentExpand: boolean[] = [];\n        currentExpand[0] = true;\n\n        nodes.forEach((node) => {\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n\n            if (expand) { results.push(node); }\n\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        });\n\n        return results;\n    }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `McTree`.\n * The nested tree nodes of type `T` are flattened through `MсTreeFlattener`, and converted\n * to type `F` for `McTree` to consume.\n */\nexport class McTreeFlatDataSource<T, F> extends DataSource<F> {\n    flattenedData = new BehaviorSubject<F[]>([]);\n\n    expandedData = new BehaviorSubject<F[]>([]);\n\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n\n        this.flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n        this.treeControl.dataNodes = this.flattenedData.value;\n    }\n\n    private _data: BehaviorSubject<T[]>;\n\n    constructor(\n        private treeControl: FlatTreeControl<F>,\n        private treeFlattener: McTreeFlattener<T, F>,\n        initialData: T[] = []\n    ) {\n        super();\n\n        this._data = new BehaviorSubject<T[]>(initialData);\n    }\n\n    connect(collectionViewer: ICollectionViewer): Observable<F[]> {\n        const changes = [\n            collectionViewer.viewChange,\n            this.treeControl.expansionModel.changed,\n            this.flattenedData\n        ];\n\n        return merge(...changes)\n            .pipe(map(() => {\n                this.expandedData.next(\n                    this.treeFlattener.expandFlattenedNodes(this.flattenedData.value, this.treeControl)\n                );\n\n                return this.expandedData.value;\n            }));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by ITreeControl and each non-leaf node.\n */\nexport class McTreeNestedDataSource<T> extends DataSource<T> {\n\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n    }\n\n    /* tslint:disable-next-line:naming-convention */\n    private _data = new BehaviorSubject<T[]>([]);\n\n    connect(collectionViewer: ICollectionViewer): Observable<T[]> {\n        return merge(...[collectionViewer.viewChange, this._data])\n            .pipe(map(() => this.data));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import { DOCUMENT } from '@angular/common';\nimport {\n    AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef,\n    Component,\n    ComponentFactoryResolver,\n    ComponentRef,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Injector,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    Renderer2,\n    SimpleChanges,\n    TemplateRef,\n    Type,\n    ViewChild,\n    ViewContainerRef, ViewEncapsulation\n} from '@angular/core';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { Overlay, OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { McMeasureScrollbarService } from '@ptsecurity/mosaic/core';\nimport { Observable } from 'rxjs';\n\nimport { McModalControlService } from './modal-control.service';\nimport { McModalRef } from './modal-ref.class';\n// tslint:disable-next-line\nimport ModalUtil from './modal-util';\nimport { IModalButtonOptions, IModalOptions, ModalType, OnClickCallback } from './modal.type';\n\n\n// Duration when perform animations (ms)\nexport const MODAL_ANIMATE_DURATION = 200;\n\ntype AnimationState = 'enter' | 'leave' | null;\n\n@Component({\n    selector: 'mc-modal',\n    templateUrl: './modal.component.html',\n    styleUrls: ['./modal.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        '(keydown)': 'onKeyDown($event)'\n    }\n})\nexport class McModalComponent<T = any, R = any> extends McModalRef<T, R>\n    implements OnInit, OnChanges, AfterViewInit, OnDestroy, IModalOptions {\n\n    // tslint:disable-next-line:no-any\n    @Input() mcModalType: ModalType = 'default';\n    // If not specified, will use <ng-content>\n    @Input() mcContent: string | TemplateRef<{}> | Type<T>;\n    // available when mcContent is a component\n    @Input() mcComponentParams: T;\n    // Default Modal ONLY\n    @Input() mcFooter: string | TemplateRef<{}> | IModalButtonOptions<T>[];\n\n    @Input()\n    get mcVisible() { return this._mcVisible; }\n    set mcVisible(value) { this._mcVisible = value; }\n\n    _mcVisible = false;\n\n    @Output() mcVisibleChange = new EventEmitter<boolean>();\n\n    @Input() mcZIndex: number = 1000;\n    @Input() mcWidth: number | string = 480;\n    @Input() mcWrapClassName: string;\n    @Input() mcClassName: string;\n    @Input() mcStyle: object;\n    @Input() mcTitle: string | TemplateRef<{}>;\n    @Input() mcCloseByESC: boolean = true;\n\n    @Input()\n    get mcClosable() { return this._mcClosable; }\n    set mcClosable(value) { this._mcClosable = value; }\n    _mcClosable = true;\n\n    @Input()\n    get mcMask() { return this._mcMask; }\n    set mcMask(value) { this._mcMask = value; }\n    _mcMask = true;\n\n    @Input()\n    get mcMaskClosable() { return this._mcMaskClosable; }\n    set mcMaskClosable(value) { this._mcMaskClosable = value; }\n    _mcMaskClosable = true;\n\n    @Input() mcMaskStyle: object;\n    @Input() mcBodyStyle: object;\n\n    // Trigger when modal open(visible) after animations\n    @Output() mcAfterOpen = new EventEmitter<void>();\n    // Trigger when modal leave-animation over\n    @Output() mcAfterClose = new EventEmitter<R>();\n\n    // --- Predefined OK & Cancel buttons\n    @Input() mcOkText: string;\n    @Input() mcOkType = 'primary';\n\n    @Input()\n    get mcOkLoading() { return this._mcOkLoading; }\n    set mcOkLoading(value) { this._mcOkLoading = value; }\n    _mcOkLoading = false;\n\n    @Input() @Output() mcOnOk: EventEmitter<T> | OnClickCallback<T> = new EventEmitter<T>();\n    @Input() mcCancelText: string;\n\n    @Input()\n    get mcCancelLoading() { return this._mcCancelLoading; }\n    set mcCancelLoading(value) { this._mcCancelLoading = value; }\n    _mcCancelLoading = false;\n\n    @Input() @Output() mcOnCancel: EventEmitter<T> | OnClickCallback<T> = new EventEmitter<T>();\n\n    @ViewChild('modalContainer') modalContainer: ElementRef;\n    @ViewChild('bodyContainer', { read: ViewContainerRef }) bodyContainer: ViewContainerRef;\n    // Only aim to focus the ok button that needs to be auto focused\n    @ViewChild('autoFocusButtonOk', { read: ElementRef }) autoFocusButtonOk: ElementRef;\n\n    maskAnimationClassMap: object;\n    modalAnimationClassMap: object;\n    // The origin point that animation based on\n    transformOrigin = '0px 0px 0px';\n\n    // Observable alias for mcAfterOpen\n    get afterOpen(): Observable<void> {\n        return this.mcAfterOpen.asObservable();\n    }\n\n    // Observable alias for mcAfterClose\n    get afterClose(): Observable<R> {\n        return this.mcAfterClose.asObservable();\n    }\n\n    get okText(): string {\n        return this.mcOkText;\n    }\n\n    get cancelText(): string {\n        return this.mcCancelText;\n    }\n\n    // Indicate whether this dialog should hidden\n    get hidden(): boolean {\n        return !this.mcVisible && !this.animationState;\n    }\n\n    // Handle the reference when using mcContent as Component\n    private contentComponentRef: ComponentRef<T>;\n    // Current animation state\n    private animationState: AnimationState;\n    private container: HTMLElement | OverlayRef;\n\n    constructor(\n        private overlay: Overlay,\n        private renderer: Renderer2,\n        private cfr: ComponentFactoryResolver,\n        private elementRef: ElementRef,\n        private viewContainer: ViewContainerRef,\n        private mcMeasureScrollbarService: McMeasureScrollbarService,\n        private modalControl: McModalControlService,\n        private changeDetector: ChangeDetectorRef,\n        @Inject(DOCUMENT) private document: any) {\n\n        super();\n    }\n\n    @Input() mcGetContainer: HTMLElement | OverlayRef | (() => HTMLElement | OverlayRef) = () => this.overlay.create();\n\n    ngOnInit() {\n\n        // Create component along without View\n        if (this.isComponent(this.mcContent)) {\n            this.createDynamicComponent(this.mcContent as Type<T>);\n        }\n\n        // Setup default button options\n        if (this.isModalButtons(this.mcFooter)) {\n            this.mcFooter = this.formatModalButtons(this.mcFooter as IModalButtonOptions<T>[]);\n        }\n\n        // Place the modal dom to elsewhere\n        this.container = typeof this.mcGetContainer === 'function' ? this.mcGetContainer() : this.mcGetContainer;\n        if (this.container instanceof HTMLElement) {\n            this.container.appendChild(this.elementRef.nativeElement);\n        } else if (this.container instanceof OverlayRef) {\n            // NOTE: only attach the dom to overlay, the view container is not changed actually\n            this.container.overlayElement.appendChild(this.elementRef.nativeElement);\n        }\n\n        // Register modal when afterOpen/afterClose is stable\n        this.modalControl.registerModal(this);\n    }\n\n    // [NOTE] NOT available when using by service!\n    // Because ngOnChanges never be called when using by service,\n    // here we can't support \"mcContent\"(Component) etc. as inputs that initialized dynamically.\n    // BUT: User also can change \"mcContent\" dynamically to trigger UI changes\n    // (provided you don't use \bComponent that needs initializations)\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.mcVisible) {\n            // Do not trigger animation while initializing\n            this.handleVisibleStateChange(this.mcVisible, !changes.mcVisible.firstChange);\n        }\n    }\n\n    ngAfterViewInit() {\n        // If using Component, it is the time to attach View while bodyContainer is ready\n        if (this.contentComponentRef) {\n            this.bodyContainer.insert(this.contentComponentRef.hostView);\n        }\n\n        if (this.autoFocusButtonOk) {\n            (this.autoFocusButtonOk.nativeElement as HTMLButtonElement).focus();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.container instanceof OverlayRef) {\n            this.container.dispose();\n        }\n    }\n\n    open() {\n        this.changeVisibleFromInside(true);\n    }\n\n    close(result?: R) {\n        this.changeVisibleFromInside(false, result);\n    }\n\n    // Destroy equals Close\n    destroy(result?: R) {\n        this.close(result);\n    }\n\n    triggerOk() {\n        this.onClickOkCancel('ok');\n    }\n\n    triggerCancel() {\n        this.onClickOkCancel('cancel');\n    }\n\n    getInstance(): McModalComponent {\n        return this;\n    }\n\n    getContentComponentRef(): ComponentRef<T> {\n        return this.contentComponentRef;\n    }\n\n    getContentComponent(): T {\n        return this.contentComponentRef && this.contentComponentRef.instance;\n    }\n\n    getElement(): HTMLElement {\n        return this.elementRef && this.elementRef.nativeElement;\n    }\n\n    onClickMask($event: MouseEvent) {\n        if (\n            this.mcMask &&\n            this.mcMaskClosable &&\n            ($event.target as HTMLElement).classList.contains('mc-modal-wrap') &&\n            this.mcVisible\n        ) {\n            this.onClickOkCancel('cancel');\n        }\n    }\n\n    // tslint:disable-next-line\n    isModalType(type: ModalType): boolean {\n        return this.mcModalType === type;\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n\n        if (event.keyCode === ESCAPE && this.container && (this.container instanceof OverlayRef)) {\n\n            this.close();\n            event.preventDefault();\n        }\n    }\n\n    // AoT\n    onClickCloseBtn() {\n        if (this.mcVisible) {\n            this.onClickOkCancel('cancel');\n        }\n    }\n\n    // AoT\n    // tslint:disable-next-line\n    onClickOkCancel(type: 'ok' | 'cancel') {\n        const trigger = { ok: this.mcOnOk, cancel: this.mcOnCancel }[type];\n        const loadingKey = { ok: 'mcOkLoading', cancel: 'mcCancelLoading' }[type];\n\n        if (trigger instanceof EventEmitter) {\n            trigger.emit(this.getContentComponent());\n        } else if (typeof trigger === 'function') {\n\n            const result = trigger(this.getContentComponent());\n            // Users can return \"false\" to prevent closing by default\n            const caseClose = (doClose: boolean | void | {}) => (doClose !== false) && this.close(doClose as R);\n\n            if (isPromise(result)) {\n                this[loadingKey] = true;\n                const handleThen = (doClose) => {\n                    this[loadingKey] = false;\n                    caseClose(doClose);\n                };\n                (result as Promise<void>).then(handleThen).catch(handleThen);\n            } else {\n                caseClose(result);\n            }\n        }\n    }\n\n    // AoT\n    isNonEmptyString(value: {}): boolean {\n        return typeof value === 'string' && value !== '';\n    }\n\n    // AoT\n    isTemplateRef(value: {}): boolean {\n        return value instanceof TemplateRef;\n    }\n\n    // AoT\n    isComponent(value: {}): boolean {\n        return value instanceof Type;\n    }\n\n    // AoT\n    isModalButtons(value: {}): boolean {\n        return Array.isArray(value) && value.length > 0;\n    }\n\n    // Do rest things when visible state changed\n    private handleVisibleStateChange(visible: boolean, animation: boolean = true, closeResult?: R): Promise<any> {\n        // Hide scrollbar at the first time when shown up\n        if (visible) {\n            this.changeBodyOverflow(1);\n        }\n\n        return Promise\n            .resolve(animation && this.animateTo(visible))\n            // Emit open/close event after animations over\n            .then(() => {\n                if (visible) {\n                    this.mcAfterOpen.emit();\n                } else {\n                    this.mcAfterClose.emit(closeResult);\n                    // Show/hide scrollbar when animation is over\n                    this.changeBodyOverflow();\n                }\n            });\n    }\n\n    // Lookup a button's property, if the prop is a function, call & then return the result, otherwise, return itself.\n    // AoT\n    // tslint:disable-next-line\n    getButtonCallableProp(options: IModalButtonOptions<T>, prop: string): {} {\n        const value = options[prop];\n        const args: any[] = [];\n        if (this.contentComponentRef) {\n            args.push(this.contentComponentRef.instance);\n        }\n\n        return typeof value === 'function' ? value.apply(options, args) : value;\n    }\n\n    // On mcFooter's modal button click\n    // AoT\n    // tslint:disable-next-line\n    onButtonClick(button: IModalButtonOptions<T>) {\n        // Call onClick directly\n        const result = this.getButtonCallableProp(button, 'onClick');\n        if (isPromise(result)) {\n            button.loading = true;\n            (result as Promise<{}>).then(() => button.loading = false).catch(() => button.loading = false);\n        }\n    }\n\n    // Change mcVisible from inside\n    private changeVisibleFromInside(visible: boolean, closeResult?: R): Promise<void> {\n        if (this.mcVisible !== visible) {\n            // Change mcVisible value immediately\n            this.mcVisible = visible;\n            this.mcVisibleChange.emit(visible);\n\n            return this.handleVisibleStateChange(visible, true, closeResult);\n        }\n\n        return Promise.resolve();\n    }\n\n    private changeAnimationState(state: AnimationState) {\n        this.animationState = state;\n        if (state) {\n            this.maskAnimationClassMap = {\n                [`fade-${state}`]: true,\n                [`fade-${state}-active`]: true\n            };\n            this.modalAnimationClassMap = {\n                [`zoom-${state}`]: true,\n                [`zoom-${state}-active`]: true\n            };\n        } else {\n            // @ts-ignore\n            this.maskAnimationClassMap = this.modalAnimationClassMap = null;\n        }\n\n        if (this.contentComponentRef) {\n            this.contentComponentRef.changeDetectorRef.markForCheck();\n        } else {\n            this.changeDetector.markForCheck();\n        }\n    }\n\n    private animateTo(isVisible: boolean): Promise<any> {\n        // Figure out the lastest click position when shows up\n        if (isVisible) {\n            // [NOTE] Using timeout due to the document.click event is fired later than visible change,\n            // so if not postponed to next event-loop, we can't get the lastest click position\n            window.setTimeout(() => this.updateTransformOrigin());\n        }\n\n        this.changeAnimationState(isVisible ? 'enter' : 'leave');\n\n        // Return when animation is over\n        return new Promise((resolve) => window.setTimeout(() => {\n            this.changeAnimationState(null);\n            resolve();\n        }, MODAL_ANIMATE_DURATION));\n    }\n\n    private formatModalButtons(buttons: IModalButtonOptions<T>[]): IModalButtonOptions<T>[] {\n        return buttons.map((button) => {\n\n            return {\n                ...{\n                    type: 'default',\n                    size: 'default',\n                    autoLoading: true,\n                    show: true,\n                    loading: false,\n                    disabled: false\n                },\n                ...button\n            };\n        });\n    }\n\n    /**\n     * Create a component dynamically but not attach to any View\n     * (this action will be executed when bodyContainer is ready)\n     * @param component Component class\n     */\n    private createDynamicComponent(component: Type<T>) {\n        const factory = this.cfr.resolveComponentFactory(component);\n        const childInjector = Injector.create({\n            providers: [{provide: McModalRef, useValue: this}],\n            parent: this.viewContainer.parentInjector\n        });\n\n        this.contentComponentRef = factory.create(childInjector);\n\n        if (this.mcComponentParams) {\n            Object.assign(this.contentComponentRef.instance, this.mcComponentParams);\n        }\n\n        // Do the first change detection immediately\n        // (or we do detection at ngAfterViewInit, multi-changes error will be thrown)\n        this.contentComponentRef.changeDetectorRef.detectChanges();\n\n\n    }\n\n    // Update transform-origin to the last click position on document\n    private updateTransformOrigin() {\n        const modalElement = this.modalContainer.nativeElement as HTMLElement;\n        const lastPosition = ModalUtil.getLastClickPosition();\n\n        if (lastPosition) {\n            // tslint:disable-next-line\n            this.transformOrigin = `${lastPosition.x - modalElement.offsetLeft}px ${lastPosition.y - modalElement.offsetTop}px 0px`;\n        }\n    }\n\n    /**\n     * Take care of the body's overflow to decide the existense of scrollbar\n     * @param plusNum The number that the openModals.length will increase soon\n     */\n    private changeBodyOverflow(plusNum: number = 0) {\n        const openModals = this.modalControl.openModals;\n\n        if (openModals.length + plusNum > 0) {\n            // tslint:disable-next-line\n            this.renderer.setStyle(this.document.body, 'padding-right', `${this.mcMeasureScrollbarService.scrollBarWidth}px`);\n            this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n        } else {\n            this.renderer.removeStyle(this.document.body, 'padding-right');\n            this.renderer.removeStyle(this.document.body, 'overflow');\n        }\n    }\n}\n\n////////////\n\nfunction isPromise(obj: {} | void): boolean {\n    // tslint:disable-next-line\n    return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof (obj as Promise<{}>).then === 'function' && typeof (obj as Promise<{}>).catch === 'function';\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n\n@Pipe({\n    name: 'toCssUnit'\n})\nexport class CssUnitPipe implements PipeTransform {\n    transform(value: number | string, defaultUnit: string = 'px'): string {\n        const formatted = +value;\n\n        return isNaN(formatted) ? `${value}` : `${formatted}${defaultUnit}`;\n    }\n}\n","import { ComponentRef, Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { Overlay, OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal } from '@ptsecurity/cdk/portal';\n\nimport { McModalControlService } from './modal-control.service';\nimport { McModalRef } from './modal-ref.class';\nimport { McModalComponent } from './modal.component';\nimport { ConfirmType, IModalOptions, IModalOptionsForService } from './modal.type';\n\n\n// A builder used for managing service creating modals\nexport class ModalBuilderForService {\n\n    // Modal ComponentRef, \"null\" means it has been destroyed\n    private modalRef: ComponentRef<McModalComponent> | null;\n    private overlayRef: OverlayRef;\n\n    constructor(private overlay: Overlay, options: IModalOptionsForService = {}) {\n        this.createModal();\n\n        if (!('mcGetContainer' in options)) {\n            options.mcGetContainer = undefined;\n        }\n\n        this.changeProps(options);\n        this.modalRef!.instance.open();\n        this.modalRef!.instance.mcAfterClose.subscribe(() => this.destroyModal());\n\n        this.overlayRef.keydownEvents()\n            // @ts-ignore\n            .pipe(filter((event: KeyboardEvent) => {\n                return event.keyCode === ESCAPE && options.mcCloseByESC;\n            }))\n            .subscribe(() => this.modalRef!.instance.close());\n    }\n\n    getInstance(): McModalComponent | null {\n        return this.modalRef && this.modalRef.instance;\n    }\n\n    destroyModal(): void {\n        if (this.modalRef) {\n            this.overlayRef.dispose();\n            this.modalRef = null;\n        }\n    }\n\n    private changeProps(options: IModalOptions): void {\n        if (this.modalRef) {\n            // here not limit user's inputs at runtime\n            Object.assign(this.modalRef.instance, options);\n        }\n    }\n\n    // Create component to ApplicationRef\n    private createModal(): void {\n        this.overlayRef = this.overlay.create();\n        this.modalRef = this.overlayRef.attach(new ComponentPortal(McModalComponent));\n    }\n}\n\n@Injectable()\nexport class McModalService {\n    // Track of the current close modals (we assume invisible is close this time)\n    get openModals(): McModalRef[] {\n        return this.modalControl.openModals;\n    }\n\n    get afterAllClose(): Observable<void> {\n        return this.modalControl.afterAllClose.asObservable();\n    }\n\n    constructor(\n        private overlay: Overlay,\n        private modalControl: McModalControlService) {\n    }\n\n    // Closes all of the currently-open dialogs\n    closeAll(): void {\n        this.modalControl.closeAll();\n    }\n\n    create<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n\n        if (typeof options.mcOnCancel !== 'function') {\n            // Leave a empty function to close this modal by default\n            // tslint:disable-next-line\n            options.mcOnCancel = () => {};\n        }\n\n        if (!('mcCloseByESC' in options)) {\n            options.mcCloseByESC = true;\n        }\n\n\n        if (!('mcWidth' in options)) {\n            // tslint:disable-next-line\n            options.mcWidth = 480;\n        }\n\n        return new ModalBuilderForService(this.overlay, options).getInstance()!;\n    }\n\n    confirm<T>(options: IModalOptionsForService<T> = {}, confirmType: ConfirmType = 'confirm'): McModalRef<T> {\n        if ('mcFooter' in options) {\n            console.warn(`The Confirm-Modal doesn't support \"mcFooter\", this property will be ignored.`);\n        }\n\n        // NOTE: only support function currently by calling confirm()\n        if (typeof options.mcOnOk !== 'function') {\n            // Leave a empty function to close this modal by default\n            // tslint:disable-next-line\n            options.mcOnOk = () => {};\n        }\n\n        options.mcModalType = 'confirm';\n        options.mcClassName = `mc-confirm mc-confirm-${confirmType} ${options.mcClassName || ''}`;\n        options.mcMaskClosable = false;\n\n        return this.create(options);\n    }\n\n    success<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n        return this.simpleConfirm(options, 'success');\n    }\n\n    delete<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n        return this.simpleConfirm(options, 'warn');\n    }\n\n    private simpleConfirm<T>(options: IModalOptionsForService<T> = {}, confirmType: ConfirmType): McModalRef<T> {\n        // Remove the Cancel button if the user not specify a Cancel button\n        if (!('mcCancelText' in options)) {\n            // @ts-ignore\n            options.mcCancelText = null;\n        }\n\n        return this.confirm(options, confirmType);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { McButtonModule } from '@ptsecurity/mosaic/button';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { CssUnitPipe } from './css-unit.pipe';\nimport { McModalControlService } from './modal-control.service';\nimport { McModalComponent } from './modal.component';\nimport { McModalService } from './modal.service';\n\n\n@NgModule({\n    imports: [ CommonModule, OverlayModule, McButtonModule, McIconModule ],\n    exports: [ McModalComponent ],\n    declarations: [ McModalComponent, CssUnitPipe ],\n    entryComponents: [ McModalComponent ],\n    providers: [ McModalControlService, McModalService ]\n})\nexport class McModalModule { }\n","import { fromEvent, Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nimport {\n    AfterViewInit,\n    Component, Directive,\n    ElementRef,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    ViewEncapsulation,\n    ContentChild,\n    TemplateRef,\n    ChangeDetectorRef,\n    ChangeDetectionStrategy,\n    ViewChild\n} from '@angular/core';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { SPACE } from '@ptsecurity/cdk/keycodes';\nimport { Platform } from '@ptsecurity/cdk/platform';\nimport { CanDisable, CanDisableCtor, mixinDisabled } from '@ptsecurity/mosaic/core';\n\n\nconst COLLAPSED_CLASS: string = 'mc-navbar-collapsed-title';\nconst MC_ICON = 'mc-icon';\nconst MC_NAVBAR = 'mc-navbar';\nconst MC_NAVBAR_CONTAINER = 'mc-navbar-container';\nconst MC_NAVBAR_ITEM = 'mc-navbar-item';\nconst MC_NAVBAR_BRAND = 'mc-navbar-brand';\nconst MC_NAVBAR_TITLE = 'mc-navbar-title';\nconst MC_NAVBAR_LOGO = 'mc-navbar-logo';\n\nexport type McNavbarContainerPositionType = 'left' | 'right';\n\nexport interface IMcNavbarDropdownItem {\n    link?: string;\n    text: string;\n}\n\n@Directive({\n    selector: MC_NAVBAR_LOGO,\n    host: {\n        class: MC_NAVBAR_LOGO\n    }\n})\nexport class McNavbarLogo {}\n\n@Directive({\n    selector: MC_NAVBAR_BRAND,\n    host: {\n        class: MC_NAVBAR_BRAND\n    }\n})\nexport class McNavbarBrand {}\n\n@Directive({\n    selector: MC_NAVBAR_TITLE,\n    host: {\n        class: MC_NAVBAR_TITLE\n    }\n})\nexport class McNavbarTitle {}\n\nexport class McNavbarItemBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McNavbarMixinBase: CanDisableCtor & typeof McNavbarItemBase = mixinDisabled(McNavbarItemBase);\n\n@Component({\n    selector: MC_NAVBAR_ITEM,\n    template: `\n        <a\n            [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\n            (click)=\"handleClickByItem()\"\n            (keydown)=\"handleKeydown($event)\"\n            class=\"mc-navbar-item\"\n        >\n            <ng-content></ng-content>\n            <i *ngIf=\"hasDropdownContent\" mc-icon=\"mc-angle-down-M_16\"></i>\n        </a>\n        <ul\n            #dropdownContent\n            *ngIf=\"hasDropdownContent\"\n            [ngClass]=\"{ 'is-collapsed': isCollapsed }\"\n            class=\"mc-navbar-dropdown\"\n        >\n            <li\n                *ngFor=\"let item of dropdownItems\"\n                (click)=\"handleClickByDropdownItem()\"\n                class=\"mc-navbar-dropdown-item\"\n            >\n                <ng-container *ngIf=\"dropdownItemTmpl\">\n                    <ng-container *ngTemplateOutlet=\"dropdownItemTmpl; context: { $implicit: item }\"></ng-container>\n                </ng-container>\n                <a\n                    *ngIf=\"!dropdownItemTmpl\"\n                    [attr.href]=\"item.link\"\n                    [ngClass]=\"{ 'is-active': isActiveDropdownLink(item.link) }\"\n                    class=\"mc-navbar-dropdown-link\"\n                >{{ item.text }}</a>\n            </li>\n        </ul>\n    `,\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': '-1'\n    }\n})\nexport class McNavbarItem extends _McNavbarMixinBase implements OnInit, AfterViewInit, OnDestroy, CanDisable {\n\n    @Input()\n    tabIndex: number = 0;\n\n    @Input()\n    dropdownItems: IMcNavbarDropdownItem[] = [];\n\n    @Input()\n    set collapsedTitle(value: string) {\n        this.elementRef.nativeElement.setAttribute('computedTitle', encodeURI(value));\n    }\n\n    @ContentChild('dropdownItemTmpl', { read: TemplateRef })\n    dropdownItemTmpl: TemplateRef<IMcNavbarDropdownItem>;\n\n    @ViewChild('dropdownContent', { read: ElementRef })\n    dropdownContent: ElementRef;\n\n    get hasDropdownContent() {\n        return this.dropdownItems.length > 0;\n    }\n\n    isCollapsed: boolean = true;\n\n    private _subscription: Subscription = new Subscription();\n    private _focusMonitor$: Observable<FocusOrigin>;\n\n    private get _dropdownElements(): HTMLElement[] {\n        return this.dropdownContent ? this.dropdownContent.nativeElement.querySelectorAll('li > *') : [];\n    }\n\n    constructor(\n        public  elementRef: ElementRef,\n        private _focusMonitor: FocusMonitor,\n        private _platform: Platform,\n        private _cdRef: ChangeDetectorRef\n    ) {\n        super(elementRef);\n    }\n\n    ngOnInit() {\n        this.denyClickIfDisabled();\n\n        this._focusMonitor$ = this._focusMonitor.monitor(this.elementRef.nativeElement, true);\n\n        if (this.hasDropdownContent) {\n            this.listenClickOutside();\n        }\n    }\n\n    ngAfterViewInit() {\n        if (!this.hasDropdownContent) {\n            return;\n        }\n\n        this.startListenFocusDropdownItems();\n    }\n\n    ngOnDestroy() {\n        this._subscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n        this.stopListenFocusDropdownItems();\n    }\n\n    isActiveDropdownLink(link: string): boolean {\n        if (!this._platform.isBrowser) {\n            return false;\n        }\n\n        return window.location.href.indexOf(link) >= 0;\n    }\n\n    handleClickByItem() {\n        this.toggleDropdown();\n    }\n\n    handleKeydown($event: KeyboardEvent) {\n        const isNavbarItem = ($event.target as HTMLElement).classList.contains(MC_NAVBAR_ITEM);\n\n        // tslint:disable-next-line\n        if (this.hasDropdownContent && $event.keyCode === SPACE && isNavbarItem) {\n            this.toggleDropdown();\n        }\n    }\n\n    handleClickByDropdownItem() {\n        this.forceCloseDropdown();\n    }\n\n    private listenClickOutside() {\n        this._subscription.add(\n            this._focusMonitor$.subscribe((origin) => {\n                if (origin === null) {\n                    this.forceCloseDropdown();\n                }\n            })\n        );\n    }\n\n    private toggleDropdown() {\n        this.isCollapsed = !this.isCollapsed;\n    }\n\n    private forceCloseDropdown() {\n        this.isCollapsed = true;\n        this._cdRef.detectChanges();\n    }\n\n    private startListenFocusDropdownItems() {\n        this._dropdownElements.forEach((el) => {\n            this._focusMonitor.monitor(el, true);\n        });\n    }\n\n    private stopListenFocusDropdownItems() {\n        this._dropdownElements.forEach((el) => {\n            this._focusMonitor.stopMonitoring(el);\n        });\n    }\n\n    // This method is required due to angular 2 issue https://github.com/angular/angular/issues/11200\n    private denyClickIfDisabled() {\n        const events: Event[] = this.elementRef.nativeElement.eventListeners('click');\n\n        events.forEach((event) => this.elementRef.nativeElement.removeEventListener('click', event));\n\n        this.elementRef.nativeElement.addEventListener('click', (event: MouseEvent) => {\n            if (this.elementRef.nativeElement.hasAttribute('disabled')) {\n                event.stopImmediatePropagation();\n            }\n        }, true);\n\n        events.forEach((event) => this.elementRef.nativeElement.addEventListener('click', event));\n    }\n}\n\n@Directive({\n    selector: MC_NAVBAR_CONTAINER\n})\nexport class McNavbarContainer {\n    @Input()\n    position: McNavbarContainerPositionType = 'left';\n\n    @HostBinding('class')\n    get cssClasses(): string {\n        return this.position === 'left' ? 'mc-navbar-left' : 'mc-navbar-right';\n    }\n}\n\nclass CollapsibleItem {\n    private _collapsed: boolean = false;\n\n    constructor(\n        public element: HTMLElement,\n        public width: number\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        this._collapsed = collapsed;\n\n        this.updateCollapsedClass();\n    }\n\n    private updateCollapsedClass() {\n        if (this._collapsed) {\n            this.element.classList.add(COLLAPSED_CLASS);\n        } else {\n            this.element.classList.remove(COLLAPSED_CLASS);\n        }\n\n    }\n}\n\nclass CachedItemWidth {\n\n    get canCollapse(): boolean {\n        return this.itemsForCollapse.length > 0;\n    }\n\n    private _collapsedItemsWidth: number;\n\n    get collapsedItemsWidth(): number {\n        if (this._collapsedItemsWidth !== undefined) {\n            return this._collapsedItemsWidth;\n        }\n\n        this.calculateAndCacheCollapsedItemsWidth();\n\n        return this._collapsedItemsWidth;\n    }\n\n    constructor(\n        public element: HTMLElement,\n        public width: number,\n        public itemsForCollapse: CollapsibleItem[] = []\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        if (this.itemsForCollapse.length > 0) {\n            this.updateTitle(collapsed);\n        }\n\n        this.itemsForCollapse.forEach((item) => item.processCollapsed(collapsed));\n    }\n\n    private calculateAndCacheCollapsedItemsWidth() {\n        this._collapsedItemsWidth = this.itemsForCollapse\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getTitle(): string {\n        const computedTitle = this.element.getAttribute('computedTitle');\n\n        return computedTitle\n            ? decodeURI(computedTitle)\n            : (this.itemsForCollapse.length > 0 ? this.itemsForCollapse[0].element.innerText : '');\n    }\n\n    private updateTitle(collapsed: boolean) {\n        if (collapsed) {\n            this.element.setAttribute('title', this.getTitle());\n        } else {\n            this.element.removeAttribute('title');\n        }\n    }\n}\n\n\n@Component({\n    selector: MC_NAVBAR,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    template: `\n        <nav class=\"mc-navbar\">\n            <ng-content select=\"[${MC_NAVBAR_CONTAINER}],${MC_NAVBAR_CONTAINER}\"></ng-content>\n        </nav>\n    `,\n    styleUrls: ['./navbar.css'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class McNavbar implements AfterViewInit, OnDestroy {\n\n    private readonly forceRecalculateItemsWidth: boolean = false;\n    private readonly resizeDebounceInterval: number = 100;\n    private readonly firstLevelElement: string = MC_NAVBAR_CONTAINER;\n    private readonly secondLevelElements: string[] = [\n        MC_NAVBAR_ITEM,\n        MC_NAVBAR_BRAND,\n        MC_NAVBAR_TITLE\n    ];\n\n    private _totalItemsWidths: number;\n    private _itemsWidths: CachedItemWidth[];\n\n    private get maxAllowedWidth(): number {\n        return this._elementRef.nativeElement.querySelector('nav').getBoundingClientRect().width;\n    }\n\n    private get itemsWidths(): CachedItemWidth[] {\n        if (this._itemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._itemsWidths;\n        }\n\n        this.calculateAndCacheItemsWidth();\n\n        return this._itemsWidths;\n    }\n\n    private get totalItemsWidth(): number {\n        if (this._totalItemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._totalItemsWidths;\n        }\n\n        this.calculateAndCacheTotalItemsWidth();\n\n        return this._totalItemsWidths;\n    }\n\n    private _resizeSubscription: Subscription;\n\n    constructor(\n        private _elementRef: ElementRef\n    ) {\n        const resizeObserver = fromEvent(window, 'resize')\n            .pipe(debounceTime(this.resizeDebounceInterval));\n\n        this._resizeSubscription = resizeObserver.subscribe(this.updateCollapsed.bind(this));\n    }\n\n    updateCollapsed(): void {\n        let collapseDelta = this.totalItemsWidth - this.maxAllowedWidth;\n\n        for (let i = this.itemsWidths.length - 1; i >= 0; i--) {\n            const item = this.itemsWidths[i];\n\n            if (!item.canCollapse) {\n                continue;\n            }\n\n            item.processCollapsed(collapseDelta > 0);\n            collapseDelta -= item.collapsedItemsWidth;\n        }\n    }\n\n    ngAfterViewInit(): void {\n        // Note: this wait is required for loading and rendering fonts for icons;\n        // unfortunately we cannot control font rendering\n        setTimeout(() => this.updateCollapsed(), 0);\n    }\n\n    ngOnDestroy() {\n        this._resizeSubscription.unsubscribe();\n    }\n\n    private calculateAndCacheTotalItemsWidth() {\n        this._totalItemsWidths = this.itemsWidths\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getOuterElementWidth(element: HTMLElement): number {\n        const baseWidth  = element.getBoundingClientRect().width;\n        const marginRight = parseInt(getComputedStyle(element).getPropertyValue('margin-right'));\n        const marginLeft = parseInt(getComputedStyle(element).getPropertyValue('margin-left'));\n\n        return baseWidth + marginRight + marginLeft;\n    }\n\n    private calculateAndCacheItemsWidth() {\n        const allItemsSelector = this.secondLevelElements\n            .map((e: string) => `${this.firstLevelElement}>${e}`);\n        const allItems: HTMLElement[] = Array.from(this._elementRef.nativeElement.querySelectorAll(allItemsSelector));\n\n        this._itemsWidths = allItems\n            .map((el) => new CachedItemWidth(el, this.getOuterElementWidth(el), this.getItemsForCollapse(el)));\n    }\n\n    private getItemsForCollapse(element: HTMLElement): CollapsibleItem[] {\n        const icon = element.querySelector(`[${MC_ICON}],${MC_NAVBAR_LOGO},[${MC_NAVBAR_LOGO}]`);\n\n        if (!icon) {\n            return [];\n        }\n\n        return Array.from(element.querySelectorAll(MC_NAVBAR_TITLE))\n            .map((el) => new CollapsibleItem(<HTMLElement> el, el.getBoundingClientRect().width));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport {\n    McNavbar,\n    McNavbarContainer,\n    McNavbarItem,\n    McNavbarTitle,\n    McNavbarBrand,\n    McNavbarLogo\n} from './navbar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        McIconModule\n    ],\n    exports: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ],\n    declarations: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ]\n})\nexport class McNavbarModule {}\n","import {\n    animate,\n    AnimationTriggerMetadata,\n    state,\n    style,\n    transition,\n    trigger\n} from '@angular/animations';\n\n\nexport const mcPopoverAnimations: {\n    readonly popoverState: AnimationTriggerMetadata;\n} = {\n    /** Animation that transitions a tooltip in and out. */\n    popoverState: trigger('state', [\n        state('initial', style({\n            opacity: 0,\n            transform: 'scale(1, 0.8)'\n        })),\n        transition('* => visible', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1, 1)'\n        }))),\n        transition('* => hidden', animate('100ms linear', style({ opacity: 0 })))\n    ])\n};\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    Output,\n    QueryList,\n    ViewEncapsulation,\n    ChangeDetectorRef,\n    Inject,\n    OnDestroy,\n    OnInit,\n    ViewChild\n} from '@angular/core';\n\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { Subscription } from 'rxjs';\n\nimport { FocusKeyManager, IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { END, ENTER, HOME, PAGE_DOWN, PAGE_UP, SPACE } from '@ptsecurity/cdk/keycodes';\n\nimport {\n    McLine,\n    McLineSetter,\n    CanDisable,\n    mixinDisabled,\n    toBoolean, CanDisableCtor\n} from '@ptsecurity/mosaic/core';\n\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n    exportAs: 'mcListOption',\n    selector: 'mc-list-option',\n    host: {\n        tabindex: '-1',\n\n        class: 'mc-list-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': '_hasFocus',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()',\n        '(click)': '_handleClick()'\n    },\n    templateUrl: 'list-option.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListOption implements AfterContentInit, OnDestroy, OnInit, IFocusableOption {\n    _hasFocus: boolean = false;\n\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    @ViewChild('text') _text: ElementRef;\n\n    // Whether the label should appear before or after the checkbox. Defaults to 'after'\n    @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n    @Input() value: any;\n\n    @Input()\n    get disabled() {\n        return this._disabled || (this.listSelection && this.listSelection.disabled);\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    @Input()\n    get selected(): boolean {\n        return this.listSelection.selectedOptions && this.listSelection.selectedOptions.isSelected(this) || false;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            this.listSelection._reportValueChange();\n        }\n    }\n\n    private _lineSetter: McLineSetter;\n    private _selected = false;\n    private _disabled = false;\n\n    constructor(\n        private _element: ElementRef,\n        private _changeDetector: ChangeDetectorRef,\n        @Inject(forwardRef(() => McListSelection))\n        public listSelection: McListSelection\n    ) {}\n\n    ngOnInit() {\n        if (this._selected) {\n            // List options that are selected at initialization can't be reported properly to the form\n            // control. This is because it takes some time until the selection-list knows about all\n            // available options. Also it can happen that the ControlValueAccessor has an initial value\n            // that should be used instead. Deferring the value change report to the next tick ensures\n            // that the form control value is not being overwritten.\n            const wasSelected = this._selected;\n\n            Promise.resolve().then(() => {\n                if (this._selected || wasSelected) {\n                    this.selected = true;\n                    this._changeDetector.markForCheck();\n                }\n            });\n        }\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    ngOnDestroy(): void {\n        if (this.selected) {\n            // We have to delay this until the next tick in order\n            // to avoid changed after checked errors.\n            Promise.resolve().then(() => this.selected = false);\n        }\n\n        this.listSelection._removeOptionFromList(this);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    focus(): void {\n        this._element.nativeElement.focus();\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    getLabel() {\n        return this._text ? this._text.nativeElement.textContent : '';\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.listSelection.selectedOptions) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.listSelection.selectedOptions.select(this);\n        } else {\n            this.listSelection.selectedOptions.deselect(this);\n        }\n\n        this._changeDetector.markForCheck();\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    _handleClick() {\n        if (this.disabled) { return; }\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    _handleFocus() {\n        if (this.disabled || this._hasFocus) { return; }\n\n        this._hasFocus = true;\n    }\n\n    _handleBlur() {\n        this._hasFocus = false;\n\n        this.listSelection._onTouched();\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n\n\nexport const MC_SELECTION_LIST_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McListSelection),\n    multi: true\n};\n\n// Change event that is being fired whenever the selected state of an option changes. */\nexport class McListSelectionChange {\n    constructor(\n        // Reference to the selection list that emitted the event.\n        public source: McListSelection,\n        // Reference to the option that has been changed.\n        public option: McListOption\n    ) {}\n}\n\n\nexport class McListSelectionBase {}\n\nexport const _McListSelectionMixinBase: CanDisableCtor & typeof McListSelectionBase\n    = mixinDisabled(McListSelectionBase);\n\n@Component({\n    exportAs: 'mcListSelection',\n    selector: 'mc-list-selection',\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'tabIndex'],\n    host: {\n        class: 'mc-list-selection',\n        '[tabIndex]': 'tabIndex',\n        '(focus)': 'focus()',\n        '(blur)': '_onTouched()',\n        '(keydown)': '_onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    providers: [MC_SELECTION_LIST_VALUE_ACCESSOR],\n    preserveWhitespaces: false\n})\nexport class McListSelection extends _McListSelectionMixinBase implements\n    IFocusableOption, CanDisable, AfterContentInit, ControlValueAccessor {\n\n    _keyManager: FocusKeyManager<McListOption>;\n\n    // The option components contained within this selection-list.\n    @ContentChildren(McListOption) options: QueryList<McListOption>;\n\n    tabIndex: number;\n\n    autoSelect: boolean;\n    noUnselect: boolean;\n    multiple: boolean;\n\n    // todo temporary solution\n    withShift: boolean;\n    withCtrl: boolean;\n\n    @Input() horizontal: boolean = false;\n\n    // Emits a change event whenever the selected state of an option changes.\n    @Output() readonly selectionChange: EventEmitter<McListSelectionChange> = new EventEmitter<McListSelectionChange>();\n\n    selectedOptions: SelectionModel<McListOption>;\n\n    // Used for storing the values that were assigned before the options were initialized.\n    private _tempValues: string[] | null;\n\n    private _modelChanges = Subscription.EMPTY;\n\n    constructor(\n        private _element: ElementRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string,\n        @Attribute('multiple') multiple: string\n    ) {\n        super();\n\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.multiple = multiple === null ? true : toBoolean(multiple);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.selectedOptions = new SelectionModel<McListOption>(this.multiple);\n    }\n\n    ngAfterContentInit(): void {\n        this.horizontal = toBoolean(this.horizontal);\n\n        this._keyManager = new FocusKeyManager<McListOption>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation(!this.horizontal)\n            .withHorizontalOrientation(this.horizontal ? 'ltr' : null);\n\n        if (this._tempValues) {\n            this._setOptionsFromValues(this._tempValues);\n            this._tempValues = null;\n        }\n\n        // Sync external changes to the model back to the options.\n        this._modelChanges = this.selectedOptions.onChange!.subscribe((event) => {\n            for (const item of event.added) {\n                item.selected = true;\n            }\n\n            for (const item of event.removed) {\n                item.selected = false;\n            }\n        });\n\n        this.updateScrollSize();\n    }\n\n    ngOnDestroy() {\n        this._modelChanges.unsubscribe();\n    }\n\n    focus() {\n        this._element.nativeElement.focus();\n    }\n\n    selectAll() {\n        this.options.forEach((option) => option.setSelected(true));\n\n        this._reportValueChange();\n    }\n\n    deselectAll() {\n        this.options.forEach((option) => option.setSelected(false));\n\n        this._reportValueChange();\n    }\n\n    updateScrollSize(): void {\n        if (this.horizontal || !this.options.first) { return; }\n\n        this._keyManager.withScrollSize(Math.floor(this._getHeight() / this.options.first._getHeight()));\n    }\n\n    // Sets the focused option of the selection-list.\n    setFocusedOption(option: McListOption): void {\n        this._keyManager.updateActiveItem(option);\n\n        if (this.withShift && this.multiple) {\n            const previousIndex = this._keyManager.previousActiveItemIndex;\n            const activeIndex = this._keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n\n            this.withShift = false;\n        } else if (this.withCtrl) {\n            this.withCtrl = false;\n\n            if (!this._canDeselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) {\n                this.options.forEach((item) => item.setSelected(false));\n                option.setSelected(true);\n            }\n        }\n\n        this._emitChangeEvent(option);\n        this._reportValueChange();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(values: string[]): void {\n        if (this.options) {\n            this._setOptionsFromValues(values || []);\n        } else {\n            this._tempValues = values;\n        }\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this._onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this._onTouched = fn;\n    }\n\n    // Implemented as a part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        if (this.options) {\n            this.options.forEach((option) => option.disabled = isDisabled);\n        }\n    }\n\n    getSelectedOptionValues(): string[] {\n        return this.options.filter((option) => option.selected).map((option) => option.value);\n    }\n\n    // Toggles the selected state of the currently focused option.\n    toggleFocusedOption(): void {\n        const focusedIndex = this._keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n            const focusedOption: McListOption = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this._canDeselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this._emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    _canDeselectLast(listOption: McListOption): boolean {\n        return !(this.noUnselect && this.selectedOptions.selected.length === 1 && listOption.selected);\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    // View to model callback that should be called if the list or its options lost focus.\n    _onTouched: () => void = () => {};\n\n    // Removes an option from the selection list and updates the active item.\n    _removeOptionFromList(option: McListOption) {\n        if (option._hasFocus) {\n            const optionIndex = this._getOptionIndex(option);\n\n            // Check whether the option is the last item\n            if (optionIndex > 0) {\n                this._keyManager.setPreviousItemActive();\n            } else if (optionIndex === 0 && this.options.length > 1) {\n                this._keyManager.setNextItemActive();\n            }\n        }\n    }\n\n    _onKeyDown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n        this.withShift = event.shiftKey;\n        this.withCtrl = event.ctrlKey;\n\n        switch (keyCode) {\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                if (!this.horizontal) { this._keyManager.setPreviousPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                if (!this.horizontal) { this._keyManager.setNextPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    // Reports a value change to the ControlValueAccessor\n    _reportValueChange() {\n        if (this.options) {\n            this._onChange(this.getSelectedOptionValues());\n        }\n    }\n\n    // Emits a change event if the selected state of an option changed.\n    _emitChangeEvent(option: McListOption) {\n        this.selectionChange.emit(new McListSelectionChange(this, option));\n    }\n\n    // Returns the option with the specified value.\n    private _getOptionByValue(value: string): McListOption | undefined {\n        return this.options.find((option) => option.value === value);\n    }\n\n    // Sets the selected options based on the specified values.\n    private _setOptionsFromValues(values: string[]) {\n        this.options.forEach((option) => option.setSelected(false));\n\n        values\n            .map((value) => this._getOptionByValue(value))\n            .filter(Boolean)\n            .forEach((option) => option!.setSelected(true));\n    }\n\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private _isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    // Returns the index of the specified list option.\n    private _getOptionIndex(option: McListOption): number {\n        return this.options.toArray().indexOf(option);\n    }\n\n    // View to model callback that should be called whenever the selected options change.\n    private _onChange: (value: any) => void = (_: any) => {};\n}\n","// todo пока не делаем, перенесено из материала, но у нас в доках таких простых списков нет.\nimport {\n    AfterContentInit, ChangeDetectionStrategy, Component, ContentChildren, Directive, ElementRef, QueryList,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { McLine, McLineSetter } from '@ptsecurity/mosaic/core';\n\n\nexport class McListBase {}\n\n@Component({\n    selector: 'mc-list',\n    host: { class: 'mc-list' },\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McList extends McListBase {}\n\n\n/**\n * Directive whose purpose is to add the mc- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n    selector: '[mc-subheader], [mcSubheader]',\n    host: { class: 'mc-subheader' }\n})\nexport class McListSubheaderCssStyler {}\n\n\n// Boilerplate for applying mixins to McListItem.\nexport class McListItemBase {}\n\n@Component({\n    selector: 'mc-list-item, a[mc-list-item]',\n    host: {\n        class: 'mc-list-item',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()'\n    },\n    templateUrl: './list-item.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListItem extends McListItemBase implements AfterContentInit {\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    private _lineSetter: McLineSetter;\n\n    constructor(private _element: ElementRef) {\n        super();\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    _handleFocus() {\n        this._element.nativeElement.classList.add('mc-focused');\n    }\n\n    _handleBlur() {\n        this._element.nativeElement.classList.remove('mc-focused');\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLineModule } from '@ptsecurity/mosaic/core';\n\nimport { McListSelection, McListOption } from './list-selection.component';\nimport { McList, McListItem, McListSubheaderCssStyler } from './list.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        McLineModule\n    ],\n    exports: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ],\n    declarations: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ]\n})\nexport class McListModule {}\n","import {\n    Input,\n    Attribute,\n    Component,\n    ElementRef,\n    OnDestroy,\n    ViewEncapsulation,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef\n} from '@angular/core';\n\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport {\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\nexport class McLinkBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\nexport const _McLinkBase: HasTabIndexCtor & CanDisableCtor & typeof McLinkBase\n    = mixinTabIndex(mixinDisabled(McLinkBase));\n\n@Component({\n    selector: 'a.mc-link',\n    template: `<ng-content></ng-content>`,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcLink',\n    styleUrls: ['./link.css'],\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': 'tabIndex'\n    }\n})\n\nexport class McLink extends _McLinkBase implements OnDestroy, HasTabIndex, CanDisable {\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    private _disabled = false;\n\n    constructor(\n        @Attribute('tabindex') tabIndex: string,\n        public elementRef: ElementRef,\n        private _focusMonitor: FocusMonitor,\n        private _changeDetector: ChangeDetectorRef) {\n\n        super(elementRef);\n        this._focusMonitor.monitor(elementRef.nativeElement, true);\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this._getHostElement().focus();\n    }\n\n    _getHostElement() {\n        return this.elementRef.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLink } from './link.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule\n    ],\n    declarations: [McLink],\n    exports: [McLink]\n})\nexport class McLinkModule {}\n","import { Injectable, Optional, SkipSelf } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\n\nimport { McModalRef } from './modal-ref.class';\n\n\ninterface IRegisteredMeta {\n    modalRef: McModalRef;\n    afterOpenSubscription: Subscription;\n    afterCloseSubscription: Subscription;\n}\n\n@Injectable()\nexport class McModalControlService {\n\n    // Track singleton afterAllClose through over the injection tree\n    get afterAllClose(): Subject<void> {\n        return this.parentService ? this.parentService.afterAllClose : this.rootAfterAllClose!;\n    }\n\n    // Track singleton openModals array through over the injection tree\n    get openModals(): McModalRef[] {\n        return this.parentService ? this.parentService.openModals : this.rootOpenModals!;\n    }\n\n    // @ts-ignore\n    private rootOpenModals: McModalRef[] = this.parentService ? null : [];\n    // @ts-ignore\n    private rootAfterAllClose: Subject<void> = this.parentService ? null : new Subject<void>();\n    // @ts-ignore\n    private rootRegisteredMetaMap: Map<McModalRef, IRegisteredMeta> = this.parentService ? null : new Map();\n\n    // Registered modal for later usage\n    private get registeredMetaMap(): Map<McModalRef, IRegisteredMeta> {\n        return this.parentService ? this.parentService.registeredMetaMap : this.rootRegisteredMetaMap;\n    }\n\n    constructor(\n        @Optional() @SkipSelf() private parentService: McModalControlService) {\n    }\n\n    // Register a modal to listen its open/close\n    registerModal(modalRef: McModalRef): void {\n        if (!this.hasRegistered(modalRef)) {\n            const afterOpenSubscription = modalRef.afterOpen.subscribe(() => this.openModals.push(modalRef));\n            const afterCloseSubscription = modalRef.afterClose.subscribe(() => this.removeOpenModal(modalRef));\n\n            this.registeredMetaMap.set(modalRef, {modalRef, afterOpenSubscription, afterCloseSubscription});\n        }\n    }\n\n    hasRegistered(modalRef: McModalRef): boolean {\n        return this.registeredMetaMap.has(modalRef);\n    }\n\n    // Close all registered opened modals\n    closeAll(): void {\n        let i = this.openModals.length;\n\n        while (i--) {\n            this.openModals[i].close();\n        }\n    }\n\n    private removeOpenModal(modalRef: McModalRef): void {\n        const index = this.openModals.indexOf(modalRef);\n\n        if (index > -1) {\n            this.openModals.splice(index, 1);\n\n            if (!this.openModals.length) {\n                this.afterAllClose.next();\n            }\n        }\n    }\n}\n","import { Observable } from 'rxjs';\n\nimport { McModalComponent } from './modal.component';\n\n\n/**\n * API class that public to users to handle the modal instance.\n * McModalRef is aim to avoid accessing to the modal instance directly by users.\n */\nexport abstract class McModalRef<T = any, R = any> {\n    abstract afterOpen: Observable<void>;\n    abstract afterClose: Observable<R>;\n\n    abstract open(): void;\n\n    abstract close(result?: R): void;\n\n    abstract destroy(result?: R): void;\n\n    /**\n     * Trigger the mcOnOk/mcOnCancel by manual\n     */\n    abstract triggerOk(): void;\n\n    abstract triggerCancel(): void;\n\n    // /**\n    //  * Return the ComponentRef of mcContent when specify mcContent as a Component\n    //  * Note: this method may return undefined if the Component has not ready yet.\n    //    (it only available after Modal's ngOnInit)\n    //  */\n    // abstract getContentComponentRef(): ComponentRef<{}>;\n\n    /**\n     * Return the component instance of mcContent when specify mcContent as a Component\n     * Note: this method may return undefined if the Component has not ready yet.\n     * (it only available after Modal's ngOnInit)\n     */\n    abstract getContentComponent(): T;\n\n    /**\n     * Get the dom element of this Modal\n     */\n    abstract getElement(): HTMLElement;\n\n    /**\n     * Get the instance of the Modal itself\n     */\n    abstract getInstance(): McModalComponent;\n}\n","export interface IClickPosition {\n    x: number;\n    y: number;\n}\n\nexport class ModalUtil {\n    private lastPosition: IClickPosition;\n\n    constructor(private document: Document) {\n        this.lastPosition = {x: -1, y: -1};\n        this.listenDocumentClick();\n    }\n\n    getLastClickPosition(): IClickPosition {\n        return this.lastPosition;\n    }\n\n    listenDocumentClick(): void {\n        this.document.addEventListener('click', (event: MouseEvent) => {\n            this.lastPosition = {x: event.clientX, y: event.clientY};\n        });\n    }\n}\n\nexport default new ModalUtil(document);\n","// tslint:disable:no-empty\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output\n} from '@angular/core';\nimport {\n    AbstractControl,\n    ControlValueAccessor,\n    NG_VALIDATORS,\n    NG_VALUE_ACCESSOR,\n    ValidationErrors,\n    Validator,\n    ValidatorFn,\n    Validators\n} from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport { DOWN_ARROW } from '@ptsecurity/cdk/keycodes';\nimport { ThemePalette } from '@ptsecurity/mosaic/core';\nimport { McFormField } from '@ptsecurity/mosaic/form-field';\nimport { MC_INPUT_VALUE_ACCESSOR } from '@ptsecurity/mosaic/input';\nimport { Subscription } from 'rxjs';\n\nimport { McDatepicker } from './datepicker';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\n/** @docs-private */\nexport const MC_DATEPICKER_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McDatepickerInput),\n    multi: true\n};\n\n/** @docs-private */\nexport const MC_DATEPICKER_VALIDATORS: any = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McDatepickerInput),\n    multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use McDatepickerInputEvent instead.\n */\nexport class McDatepickerInputEvent<D> {\n    /** The new value for the target datepicker input. */\n    value: D | null;\n\n    constructor(\n        /** Reference to the datepicker input component that emitted the event. */\n        public target: McDatepickerInput<D>,\n        /** Reference to the native input element associated with the datepicker input. */\n        public targetElement: HTMLElement) {\n        this.value = this.target.value;\n    }\n}\n\n\n/** Directive used to connect an input to a McDatepicker. */\n@Directive({\n    selector: 'input[mcDatepicker]',\n    providers: [\n        MC_DATEPICKER_VALUE_ACCESSOR,\n        MC_DATEPICKER_VALIDATORS,\n        { provide: MC_INPUT_VALUE_ACCESSOR, useExisting: McDatepickerInput }\n    ],\n    host: {\n        '[attr.aria-haspopup]': 'true',\n        '[attr.aria-owns]': '(datepicker?.opened && datepicker.id) || null',\n        '[attr.min]': 'min ? dateAdapter.toIso8601(min) : null',\n        '[attr.max]': 'max ? dateAdapter.toIso8601(max) : null',\n        '[disabled]': 'disabled',\n        '(input)': 'onInput($event.target.value)',\n        '(change)': 'onChange()',\n        '(blur)': 'onBlur()',\n        '(keydown)': 'onKeydown($event)'\n    },\n    exportAs: 'mcDatepickerInput'\n})\nexport class McDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n    /** The datepicker that this input is associated with. */\n    @Input()\n    set mcDatepicker(value: McDatepicker<D>) {\n        if (!value) {\n            return;\n        }\n\n        this.datepicker = value;\n        this.datepicker.registerInput(this);\n        this.datepickerSubscription.unsubscribe();\n\n        this.datepickerSubscription = this.datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this.cvaOnChange(selected);\n            this.onTouched();\n            this.dateInput.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));\n            this.dateChange.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));\n        });\n    }\n\n    /** Function that can be used to filter out dates within the datepicker. */\n    @Input()\n    set mcDatepickerFilter(value: (date: D | null) => boolean) {\n        this.dateFilter = value;\n        this.validatorOnChange();\n    }\n\n    /** The value of the input. */\n    @Input()\n    get value(): D | null {\n        return this._value;\n    }\n\n    set value(value: D | null) {\n        // tslint:disable-next-line:no-parameter-reassignment\n        value = this.dateAdapter.deserialize(value);\n        this.lastValueValid = !value || this.dateAdapter.isValid(value);\n        // tslint:disable-next-line:no-parameter-reassignment\n        value = this.getValidDateOrNull(value);\n        const oldDate = this.value;\n        this._value = value;\n        this.formatValue(value);\n\n        if (!this.dateAdapter.sameDate(oldDate, value)) {\n            this.valueChange.emit(value);\n        }\n    }\n\n    /** The minimum valid date. */\n    @Input()\n    get min(): D | null {\n        return this._min;\n    }\n\n    set min(value: D | null) {\n        this._min = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.validatorOnChange();\n    }\n\n    /** The maximum valid date. */\n    @Input()\n    get max(): D | null {\n        return this._max;\n    }\n\n    set max(value: D | null) {\n        this._max = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.validatorOnChange();\n    }\n\n    /** Whether the datepicker-input is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return !!this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        const newValue = coerceBooleanProperty(value);\n        const element = this.elementRef.nativeElement;\n\n        if (this._disabled !== newValue) {\n            this._disabled = newValue;\n            this.disabledChange.emit(newValue);\n        }\n\n        // We need to null check the `blur` method, because it's undefined during SSR.\n        if (newValue && element.blur) {\n            // Normally, native input elements automatically blur if they turn disabled. This behavior\n            // is problematic, because it would mean that it triggers another change detection cycle,\n            // which then causes a changed after checked error if the input element was focused before.\n            element.blur();\n        }\n    }\n\n    datepicker: McDatepicker<D>;\n    dateFilter: (date: D | null) => boolean;\n\n    /** Emits when a `change` event is fired on this `<input>`. */\n    @Output() readonly dateChange: EventEmitter<McDatepickerInputEvent<D>> =\n        new EventEmitter<McDatepickerInputEvent<D>>();\n\n    /** Emits when an `input` event is fired on this `<input>`. */\n    @Output() readonly dateInput: EventEmitter<McDatepickerInputEvent<D>> =\n        new EventEmitter<McDatepickerInputEvent<D>>();\n\n    /** Emits when the value changes (either due to user input or programmatic change). */\n    valueChange = new EventEmitter<D | null>();\n\n    /** Emits when the disabled state has changed */\n    disabledChange = new EventEmitter<boolean>();\n    private _value: D | null;\n    private _min: D | null;\n    private _max: D | null;\n    private _disabled: boolean;\n\n    private datepickerSubscription = Subscription.EMPTY;\n\n    private localeSubscription = Subscription.EMPTY;\n\n    /** Whether the last value set on the input was valid. */\n    private lastValueValid = false;\n\n    constructor(\n        public elementRef: ElementRef<HTMLInputElement>,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n        @Optional() private formField: McFormField\n    ) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        // Update the displayed date when the locale changes.\n        this.localeSubscription = dateAdapter.localeChanges.subscribe(() => {\n            this.value = this.value;\n        });\n    }\n\n    onTouched = () => {\n    }\n\n    ngOnDestroy() {\n        this.datepickerSubscription.unsubscribe();\n        this.localeSubscription.unsubscribe();\n        this.valueChange.complete();\n        this.disabledChange.complete();\n    }\n\n    /** @docs-private */\n    registerOnValidatorChange(fn: () => void): void {\n        this.validatorOnChange = fn;\n    }\n\n    /** @docs-private */\n    validate(c: AbstractControl): ValidationErrors | null {\n        return this.validator ? this.validator(c) : null;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: D): void {\n        this.value = value;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this.cvaOnChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    onKeydown(event: KeyboardEvent) {\n        // tslint:disable-next-line:deprecation\n        const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n        if (this.datepicker && isAltDownArrow && !this.elementRef.nativeElement.readOnly) {\n            this.datepicker.open();\n            event.preventDefault();\n        }\n    }\n\n    onInput(value: string) {\n        let date = this.dateAdapter.parse(value, this.dateFormats.parse.dateInput);\n        this.lastValueValid = !date || this.dateAdapter.isValid(date);\n        date = this.getValidDateOrNull(date);\n\n        if (!this.dateAdapter.sameDate(date, this._value)) {\n            this._value = date;\n            this.cvaOnChange(date);\n            this.valueChange.emit(date);\n            this.dateInput.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));\n        }\n    }\n\n    onChange() {\n        this.dateChange.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));\n    }\n\n    /** Returns the palette used by the input's form field, if any. */\n    getThemePalette(): ThemePalette | undefined {\n        return this.formField ? this.formField.color : undefined;\n    }\n\n    /** Handles blur events on the input. */\n    onBlur() {\n        // Reformat the input only if we have a valid value.\n        if (this.value) {\n            this.formatValue(this.value);\n        }\n\n        this.onTouched();\n    }\n\n    private cvaOnChange: (value: any) => void = () => {\n    }\n\n    private validatorOnChange = () => {\n    }\n\n    /** The form control validator for whether the input parses. */\n    private parseValidator: ValidatorFn = (): ValidationErrors | null => {\n        return this.lastValueValid ?\n            null : { mcDatepickerParse: { text: this.elementRef.nativeElement.value } };\n    }\n\n    /** The form control validator for the min date. */\n    private minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n        const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));\n\n        return (!this.min || !controlValue ||\n            this.dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n            null : { mcDatepickerMin: { min: this.min, actual: controlValue } };\n    }\n\n    /** The form control validator for the max date. */\n    private maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n        const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));\n\n        return (!this.max || !controlValue ||\n            this.dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n            null : { mcDatepickerMax: { max: this.max, actual: controlValue } };\n    }\n\n    /** The form control validator for the date filter. */\n    private filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n        const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));\n\n        return !this.dateFilter || !controlValue || this.dateFilter(controlValue) ?\n            null : { mcDatepickerFilter: true };\n    }\n\n    /** Formats a value and sets it on the input element. */\n    private formatValue(value: D | null) {\n        this.elementRef.nativeElement.value =\n            value ? this.dateAdapter.format(value, this.dateFormats.display.dateInput) : '';\n    }\n\n    /** The combined form control validator for this input. */\n        // tslint:disable:member-ordering\n    private validator: ValidatorFn | null =\n        Validators.compose([\n            this.parseValidator,\n            this.minValidator,\n            this.maxValidator,\n            this.filterValidator\n        ]);\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    Directive,\n    Input,\n    OnChanges,\n    OnDestroy,\n    SimpleChanges,\n    ViewEncapsulation,\n    ViewChild\n} from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { McButton } from '@ptsecurity/mosaic/button';\nimport { merge, of as observableOf, Subscription } from 'rxjs';\n\nimport { McDatepicker } from './datepicker';\nimport { McDatepickerIntl } from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `mcDatepickerToggle`. */\n@Directive({\n    selector: '[mcDatepickerToggleIcon]'\n})\nexport class McDatepickerToggleIcon {\n}\n\n\n@Component({\n    selector: 'mc-datepicker-toggle',\n    templateUrl: 'datepicker-toggle.html',\n    styleUrls: ['datepicker-toggle.css'],\n    host: {\n        class: 'mc-datepicker-toggle',\n        // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n        // consumer may have provided, while still being able to receive focus.\n        '[attr.tabindex]': '-1',\n        '[class.mc-datepicker-toggle_active]': 'datepicker && datepicker.opened',\n        '[class.mc-warn]': 'datepicker && datepicker.color === \"error\"',\n        '(focus)': 'button.focus()'\n    },\n    exportAs: 'mcDatepickerToggle',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n\n    /** Whether the toggle button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    /** Datepicker instance that the button will toggle. */\n    @Input('for') datepicker: McDatepicker<D>;\n\n    /** Tabindex for the toggle. */\n    @Input() tabIndex: number | null;\n\n    /** Custom icon set by the consumer. */\n    @ContentChild(McDatepickerToggleIcon) customIcon: McDatepickerToggleIcon;\n\n    /** Underlying button element. */\n    @ViewChild('button') button: McButton;\n    private stateChanges = Subscription.EMPTY;\n\n    private _disabled: boolean;\n\n    constructor(\n        public intl: McDatepickerIntl,\n        private changeDetectorRef: ChangeDetectorRef,\n        @Attribute('tabindex') defaultTabIndex: string\n    ) {\n        const parsedTabIndex = Number(defaultTabIndex);\n        this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.datepicker) {\n            this.watchStateChanges();\n        }\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.unsubscribe();\n    }\n\n    ngAfterContentInit() {\n        this.watchStateChanges();\n    }\n\n    open(event: Event): void {\n        if (this.datepicker && !this.disabled) {\n            this.datepicker.open();\n            event.stopPropagation();\n        }\n    }\n\n    private watchStateChanges() {\n        const datepickerDisabled = this.datepicker ? this.datepicker.disabledChange : observableOf();\n        const inputDisabled = this.datepicker && this.datepicker.datepickerInput ?\n            this.datepicker.datepickerInput.disabledChange : observableOf();\n        const datepickerToggled = this.datepicker ?\n            merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n            observableOf();\n\n        this.stateChanges.unsubscribe();\n        this.stateChanges = merge(\n            this.intl.changes,\n            datepickerDisabled,\n            inputDisabled,\n            datepickerToggled\n        ).subscribe(() => this.changeDetectorRef.markForCheck());\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { PortalModule } from '@ptsecurity/cdk/portal';\nimport { McButtonModule } from '@ptsecurity/mosaic/button';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McCalendar, McCalendarHeader } from './calendar';\nimport { McCalendarBody } from './calendar-body';\nimport {\n    McDatepicker,\n    McDatepickerContent,\n    MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './datepicker';\nimport { McDatepickerInput } from './datepicker-input';\nimport { McDatepickerIntl } from './datepicker-intl';\nimport { McDatepickerToggle, McDatepickerToggleIcon } from './datepicker-toggle';\nimport { McMonthView } from './month-view';\nimport { McMultiYearView } from './multi-year-view';\nimport { McYearView } from './year-view';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        McButtonModule,\n        OverlayModule,\n        A11yModule,\n        PortalModule,\n        McIconModule\n    ],\n    exports: [\n        McCalendar,\n        McCalendarBody,\n        McDatepicker,\n        McDatepickerContent,\n        McDatepickerInput,\n        McDatepickerToggle,\n        McDatepickerToggleIcon,\n        McMonthView,\n        McYearView,\n        McMultiYearView,\n        McCalendarHeader,\n        McButtonModule\n    ],\n    declarations: [\n        McCalendar,\n        McCalendarBody,\n        McDatepicker,\n        McDatepickerContent,\n        McDatepickerInput,\n        McDatepickerToggle,\n        McDatepickerToggleIcon,\n        McMonthView,\n        McYearView,\n        McMultiYearView,\n        McCalendarHeader\n    ],\n    providers: [\n        McDatepickerIntl,\n        MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER\n    ],\n    entryComponents: [\n        McDatepickerContent,\n        McCalendarHeader\n    ]\n})\nexport class McDatepickerModule {\n}\n","import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\n\n\n@Component({\n    selector: 'mc-divider',\n    host: {\n        class: 'mc-divider',\n        role: 'separator',\n        '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n        '[class.mc-divider-vertical]': 'vertical',\n        '[class.mc-divider-inset]': 'inset'\n    },\n    template: '',\n    styleUrls: ['divider.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false\n})\nexport class McDivider {\n    // Whether the divider is vertically aligned.\n    @Input()\n    get vertical(): boolean {\n        return this._vertical;\n    }\n\n    set vertical(value: boolean) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n\n    private _vertical: boolean = false;\n\n    // Whether the divider is an inset divider.\n    @Input()\n    get inset(): boolean {\n        return this._inset;\n    }\n\n    set inset(value: boolean) {\n        this._inset = coerceBooleanProperty(value);\n    }\n\n    private _inset: boolean = false;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McDivider } from './divider.component';\n\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [McDivider],\n    declarations: [McDivider]\n})\nexport class McDividerModule {\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n    Directive,\n    TemplateRef,\n    ComponentFactoryResolver,\n    ApplicationRef,\n    Injector,\n    ViewContainerRef,\n    Inject,\n    OnDestroy\n} from '@angular/core';\nimport { TemplatePortal, DomPortalOutlet } from '@ptsecurity/cdk/portal';\nimport { Subject } from 'rxjs';\n\n\n/**\n * Dropdown content that will be rendered lazily once the dropdown is opened.\n */\n@Directive({\n    selector: 'ng-template[mcDropdownContent]'\n})\nexport class McDropdownContent implements OnDestroy {\n\n    /** Emits when the dropdown content has been attached. */\n    _attached = new Subject<void>();\n    private _portal: TemplatePortal<any>;\n    private _outlet: DomPortalOutlet;\n\n    constructor(\n        private _template: TemplateRef<any>,\n        private _componentFactoryResolver: ComponentFactoryResolver,\n        private _appRef: ApplicationRef,\n        private _injector: Injector,\n        private _viewContainerRef: ViewContainerRef,\n        @Inject(DOCUMENT) private _document: any) {}\n\n    /**\n     * Attaches the content with a particular context.\n     * @docs-private\n     */\n    attach(context: any = {}) {\n        if (!this._portal) {\n            this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n        }\n\n        this.detach();\n\n        if (!this._outlet) {\n            this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n                this._componentFactoryResolver, this._appRef, this._injector);\n        }\n\n        const element: HTMLElement = this._template.elementRef.nativeElement;\n\n        // Because we support opening the same dropdown from different triggers (which in turn have their\n        // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n        // risk it staying attached to a pane that's no longer in the DOM.\n        element.parentNode!.insertBefore(this._outlet.outletElement, element);\n        this._portal.attach(this._outlet, context);\n        this._attached.next();\n    }\n\n    /**\n     * Detaches the content.\n     * @docs-private\n     */\n    detach() {\n        if (this._portal.isAttached) {\n            this._portal.detach();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._outlet) {\n            this._outlet.dispose();\n        }\n    }\n}\n","import { EventEmitter, TemplateRef, InjectionToken } from '@angular/core';\nimport { FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { Direction } from '@ptsecurity/cdk/bidi';\n\nimport { McDropdownContent } from './dropdown-content';\nimport { DropdownPositionX, DropdownPositionY } from './dropdown-positions';\n\n\n/**\n * Injection token used to provide the parent dropdown to dropdown-specific components.\n * @docs-private\n */\nexport const MC_DROPDOWN_PANEL = new InjectionToken<McDropdownPanel>('MC_DROPDOWN_PANEL');\n\n/**\n * Interface for a custom dropdown panel that can be used with `mcDropdownTriggerFor`.\n * @docs-private\n */\n// tslint:disable-next-line:interface-name\nexport interface McDropdownPanel<T = any> {\n    xPosition: DropdownPositionX;\n    yPosition: DropdownPositionY;\n    overlapTriggerX: boolean;\n    overlapTriggerY: boolean;\n    templateRef: TemplateRef<any>;\n    closed: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n    parent?: McDropdownPanel | undefined;\n    direction?: Direction;\n    lazyContent?: McDropdownContent;\n    backdropClass?: string;\n    hasBackdrop?: boolean;\n    focusFirstItem(origin?: FocusOrigin): void;\n    resetActiveItem(): void;\n    setPositionClasses?(x: DropdownPositionX, y: DropdownPositionY): void;\n    addItem?(item: T): void;\n    removeItem?(item: T): void;\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    OnDestroy,\n    ViewEncapsulation,\n    Inject,\n    Optional,\n    Input,\n    ViewChild\n} from '@angular/core';\nimport { IFocusableOption, FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { CanDisable, CanDisableCtor, mixinDisabled } from '@ptsecurity/mosaic/core';\nimport { Subject } from 'rxjs';\n\nimport { MC_DROPDOWN_PANEL, McDropdownPanel } from './dropdown-panel';\n\n\n// Boilerplate for applying mixins to McDropdownItem.\n/** @docs-private */\nexport class McDropdownItemBase {}\nexport const _McDropdownItemMixinBase: CanDisableCtor & typeof McDropdownItemBase =\n    mixinDisabled(McDropdownItemBase);\n\n/**\n * This directive is intended to be used inside an mc-dropdown tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n    selector: 'mc-dropdown-item, [mc-dropdown-item]',\n    exportAs: 'mcDropdownItem',\n    inputs: ['disabled'],\n    host: {\n        '[attr.role]': 'role',\n        class: 'mc-dropdown__item',\n        '[class.mc-dropdown__item_highlighted]': '_highlighted',\n        '[attr.tabindex]': '_getTabIndex()',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': '_checkDisabled($event)',\n        '(mouseenter)': '_handleMouseEnter()'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    template: `\n        <div #content>\n            <ng-content></ng-content>\n        </div>\n        <i *ngIf=\"_triggersNestedDropdown\" mc-icon=\"mc-angle-right-M_16\" class=\"mc-dropdown__trigger\"></i>\n    `\n})\nexport class McDropdownItem extends _McDropdownItemMixinBase\n    implements IFocusableOption, CanDisable, OnDestroy {\n\n    /** ARIA role for the dropdown item. */\n    @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n    @ViewChild('content') content;\n\n    private _document: Document;\n\n    /** Stream that emits when the dropdown item is hovered. */\n    readonly _hovered: Subject<McDropdownItem> = new Subject<McDropdownItem>();\n\n    /** Whether the dropdown item is highlighted. */\n    _highlighted: boolean = false;\n\n    /** Whether the dropdown item acts as a trigger for a nested dropdown. */\n    _triggersNestedDropdown: boolean = false;\n\n    constructor(\n        private _elementRef: ElementRef<HTMLElement>,\n        @Inject(DOCUMENT) document: any,\n        private _focusMonitor: FocusMonitor,\n        @Inject(MC_DROPDOWN_PANEL) @Optional() private _parentDropdownPanel?: McDropdownPanel<McDropdownItem>) {\n        super();\n\n        if (_focusMonitor) {\n            // Start monitoring the element so it gets the appropriate focused classes. We want\n            // to show the focus style for dropdown items only when the focus was not caused by a\n            // mouse or touch interaction.\n            _focusMonitor.monitor(this._elementRef.nativeElement, false);\n        }\n\n        if (_parentDropdownPanel && _parentDropdownPanel.addItem) {\n            _parentDropdownPanel.addItem(this);\n        }\n\n        this._document = document;\n    }\n\n    /** Focuses the dropdown item. */\n    focus(origin: FocusOrigin = 'program'): void {\n        if (this._focusMonitor) {\n            this._focusMonitor.focusVia(this._getHostElement(), origin);\n        } else {\n            this._getHostElement().focus();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._focusMonitor) {\n            this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n\n        if (this._parentDropdownPanel && this._parentDropdownPanel.removeItem) {\n            this._parentDropdownPanel.removeItem(this);\n        }\n\n        this._hovered.complete();\n    }\n\n    /** Used to set the `tabindex`. */\n    _getTabIndex(): string {\n        return this.disabled ? '-1' : '0';\n    }\n\n    /** Returns the host DOM element. */\n    _getHostElement(): HTMLElement {\n        return this._elementRef.nativeElement;\n    }\n\n    /** Prevents the default element actions if it is disabled. */\n    _checkDisabled(event: Event): void {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    /** Emits to the hover stream. */\n    _handleMouseEnter() {\n        this._hovered.next(this);\n    }\n\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel(): string {\n        const element: HTMLElement = this.content.nativeElement;\n        // tslint:disable-next-line:no-magic-numbers\n        const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n        let output = '';\n\n        if (element.childNodes) {\n            const length = element.childNodes.length;\n\n            // Go through all the top-level text nodes and extract their text.\n            // We skip anything that's not a text node to prevent the text from\n            // being thrown off by something like an icon.\n            for (let i = 0; i < length; i++) {\n                if (element.childNodes[i].nodeType === textNodeType) {\n                    output += element.childNodes[i].textContent;\n                }\n            }\n        }\n\n        return output.trim();\n    }\n}\n","import {\n    trigger,\n    state,\n    style,\n    animate,\n    transition,\n    query,\n    group,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n\n/**\n * Animations used by the mc-dropdown component.\n * @docs-private\n */\nexport const mcDropdownAnimations: {\n    readonly transformDropdown: AnimationTriggerMetadata;\n    readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n    /**\n     * This animation controls the dropdown panel's entry and exit from the page.\n     *\n     * When the dropdown panel is added to the DOM, it scales in and fades in its border.\n     *\n     * When the dropdown panel is removed from the DOM, it simply fades out after a brief\n     * delay to display the ripple.\n     */\n    transformDropdown: trigger('transformDropdown', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(0.8)'\n        })),\n        transition('void => enter', group([\n            query('.mc-dropdown__content', animate('50ms linear', style({opacity: 1}))),\n            animate('50ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'}))\n        ])),\n        transition('* => void', animate('50ms 25ms linear', style({opacity: 0})))\n    ]),\n\n\n    /**\n     * This animation fades in the background color and content of the dropdown panel\n     * after its containing element is scaled in.\n     */\n    fadeInItems: trigger('fadeInItems', [\n        // now. Remove next time we do breaking changes.\n        state('showing', style({opacity: 1})),\n        transition('void => *', [\n            style({opacity: 0}),\n            animate('200ms 60ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n\nexport const fadeInItems = mcDropdownAnimations.fadeInItems;\n\nexport const transformDropdown = mcDropdownAnimations.transformDropdown;\n","import { AnimationEvent } from '@angular/animations';\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChild,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    Output,\n    TemplateRef,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    OnInit\n} from '@angular/core';\nimport { FocusKeyManager, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { Direction } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW } from '@ptsecurity/cdk/keycodes';\nimport { merge, Observable, Subject, Subscription } from 'rxjs';\nimport { startWith, switchMap, take } from 'rxjs/operators';\n\nimport { mcDropdownAnimations } from './dropdown-animations';\nimport { McDropdownContent } from './dropdown-content';\nimport { throwMcDropdownInvalidPositionX, throwMcDropdownInvalidPositionY } from './dropdown-errors';\nimport { McDropdownItem } from './dropdown-item';\nimport { MC_DROPDOWN_PANEL, McDropdownPanel } from './dropdown-panel';\nimport { DropdownPositionX, DropdownPositionY } from './dropdown-positions';\n\n\n/** Default `mc-dropdown` options that can be overridden. */\n// tslint:disable-next-line:interface-name\nexport interface McDropdownDefaultOptions {\n    /** The x-axis position of the dropdown. */\n    xPosition: DropdownPositionX;\n\n    /** The y-axis position of the dropdown. */\n    yPosition: DropdownPositionY;\n\n    /** Whether the dropdown should overlap the dropdown trigger horizontally. */\n    overlapTriggerX: boolean;\n\n    /** Whether the dropdown should overlap the dropdown trigger vertically. */\n    overlapTriggerY: boolean;\n\n    /** Class to be applied to the dropdown's backdrop. */\n    backdropClass: string;\n\n    /** Whether the dropdown has a backdrop. */\n    hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mc-dropdown`. */\nexport const MC_DROPDOWN_DEFAULT_OPTIONS =\n    new InjectionToken<McDropdownDefaultOptions>('mc-dropdown-default-options', {\n        providedIn: 'root',\n        factory: MC_DROPDOWN_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MC_DROPDOWN_DEFAULT_OPTIONS_FACTORY(): McDropdownDefaultOptions {\n    return {\n        overlapTriggerX: true,\n        overlapTriggerY: false,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop'\n    };\n}\n\n@Component({\n    selector: 'mc-dropdown',\n    templateUrl: 'dropdown.html',\n    styleUrls: ['dropdown.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcDropdown',\n    animations: [\n        mcDropdownAnimations.transformDropdown,\n        mcDropdownAnimations.fadeInItems\n    ],\n    providers: [\n        { provide: MC_DROPDOWN_PANEL, useExisting: McDropdown }\n    ]\n})\nexport class McDropdown implements AfterContentInit, McDropdownPanel<McDropdownItem>, OnInit, OnDestroy {\n\n    /** Position of the dropdown in the X axis. */\n    @Input()\n    get xPosition(): DropdownPositionX {\n        return this._xPosition;\n    }\n\n    set xPosition(value: DropdownPositionX) {\n        if (value !== 'before' && value !== 'after') {\n            throwMcDropdownInvalidPositionX();\n        }\n        this._xPosition = value;\n        this.setPositionClasses();\n    }\n\n    /** Position of the dropdown in the Y axis. */\n    @Input()\n    get yPosition(): DropdownPositionY {\n        return this._yPosition;\n    }\n\n    set yPosition(value: DropdownPositionY) {\n        if (value !== 'above' && value !== 'below') {\n            throwMcDropdownInvalidPositionY();\n        }\n        this._yPosition = value;\n        this.setPositionClasses();\n    }\n\n    /** Whether the dropdown should overlap its trigger vertically. */\n    @Input()\n    get overlapTriggerY(): boolean {\n        return this._overlapTriggerY;\n    }\n\n    set overlapTriggerY(value: boolean) {\n        this._overlapTriggerY = coerceBooleanProperty(value);\n    }\n\n    /** Whether the dropdown should overlap its trigger horizontally. */\n    @Input()\n    get overlapTriggerX(): boolean {\n        return this._overlapTriggerX;\n    }\n\n    set overlapTriggerX(value: boolean) {\n        this._overlapTriggerX = coerceBooleanProperty(value);\n    }\n\n    /** Whether the dropdown has a backdrop. */\n    @Input()\n    get hasBackdrop(): boolean | undefined {\n        return this._hasBackdrop;\n    }\n\n    set hasBackdrop(value: boolean | undefined) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n\n    /**\n     * This method takes classes set on the host mc-dropdown element and applies them on the\n     * dropdown template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing dropdown from outside the component.\n     * @param classes list of class names\n     */\n    @Input('class')\n    set panelClass(classes: string) {\n        const previousPanelClass = this._previousPanelClass;\n\n        if (previousPanelClass && previousPanelClass.length) {\n            previousPanelClass.split(' ').forEach((className: string) => {\n                this._classList[className] = false;\n            });\n        }\n\n        this._previousPanelClass = classes;\n\n        if (classes && classes.length) {\n            classes.split(' ').forEach((className: string) => {\n                this._classList[className] = true;\n            });\n\n            this._elementRef.nativeElement.className = '';\n        }\n    }\n\n    /** Config object to be passed into the dropdown's ngClass */\n    _classList: { [key: string]: boolean } = {};\n\n    /** Current state of the panel animation. */\n    _panelAnimationState: 'void' | 'enter' = 'void';\n\n    /** Emits whenever an animation on the dropdown completes. */\n    _animationDone = new Subject<AnimationEvent>();\n\n    /** Whether the dropdown is animating. */\n    _isAnimating: boolean;\n\n    /** Parent dropdown of the current dropdown panel. */\n    parent: McDropdownPanel | undefined;\n\n    /** Layout direction of the dropdown. */\n    direction: Direction;\n\n    /** Class to be added to the backdrop element. */\n    @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n    /** @docs-private */\n    @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n    /**\n     * List of the items inside of a dropdown.\n     */\n    @ContentChildren(McDropdownItem) items: QueryList<McDropdownItem>;\n\n    /**\n     * Dropdown content that will be rendered lazily.\n     * @docs-private\n     */\n    @ContentChild(McDropdownContent) lazyContent: McDropdownContent;\n\n    private _previousPanelClass: string;\n\n    /** Event emitted when the dropdown is closed. */\n    @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n        new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n    private _keyManager: FocusKeyManager<McDropdownItem>;\n    private _xPosition: DropdownPositionX = this._defaultOptions.xPosition;\n    private _yPosition: DropdownPositionY = this._defaultOptions.yPosition;\n\n    /** Dropdown items inside the current dropdown. */\n    private _items: McDropdownItem[] = [];\n\n    /** Emits whenever the amount of dropdown items changes. */\n    private _itemChanges = new Subject<McDropdownItem[]>();\n\n    /** Subscription to tab events on the dropdown panel */\n    private _tabSubscription = Subscription.EMPTY;\n    private _overlapTriggerX: boolean = this._defaultOptions.overlapTriggerX;\n    private _overlapTriggerY: boolean = this._defaultOptions.overlapTriggerY;\n    private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n    constructor(\n        private _elementRef: ElementRef<HTMLElement>,\n        private _ngZone: NgZone,\n        @Inject(MC_DROPDOWN_DEFAULT_OPTIONS) private _defaultOptions: McDropdownDefaultOptions) { }\n\n    ngOnInit() {\n        this.setPositionClasses();\n    }\n\n    ngAfterContentInit() {\n        this._keyManager = new FocusKeyManager<McDropdownItem>(this.items).withWrap().withTypeAhead();\n        this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n    }\n\n    ngOnDestroy() {\n        this._tabSubscription.unsubscribe();\n        this.closed.complete();\n    }\n\n    /** Stream that emits whenever the hovered dropdown item changes. */\n    _hovered(): Observable<McDropdownItem> {\n        return this._itemChanges.pipe(\n            startWith(this._items),\n            switchMap(items => merge(...items.map(item => item._hovered)))\n        );\n    }\n\n    /** Handle a keyboard event from the dropdown, delegating to the appropriate action. */\n    _handleKeydown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n\n        switch (keyCode) {\n            case ESCAPE:\n                this.closed.emit('keydown');\n                break;\n            case LEFT_ARROW:\n                if (this.parent && this.direction === 'ltr') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            case RIGHT_ARROW:\n                if (this.parent && this.direction === 'rtl') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            default:\n                if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n                    this._keyManager.setFocusOrigin('keyboard');\n                }\n\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    /**\n     * Focus the first item in the dropdown.\n     * @param origin Action from which the focus originated. Used to set the correct styling.\n     */\n    focusFirstItem(origin: FocusOrigin = 'program'): void {\n        // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n        if (this.lazyContent) {\n            this._ngZone.onStable.asObservable()\n                .pipe(take(1))\n                .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n        } else {\n            this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n        }\n    }\n\n    /**\n     * Resets the active item in the dropdown. This is used when the dropdown is opened, allowing\n     * the user to start from the first option when pressing the down arrow.\n     */\n    resetActiveItem() {\n        this._keyManager.setActiveItem(-1);\n    }\n\n    /**\n     * Registers a dropdown item with the dropdown.\n     * @docs-private\n     */\n    addItem(item: McDropdownItem) {\n        // We register the items through this method, rather than picking them up through\n        // `ContentChildren`, because we need the items to be picked up by their closest\n        // `mc-dropdown` ancestor. If we used `@ContentChildren(McDropdownItem, {descendants: true})`,\n        // all descendant items will bleed into the top-level dropdown in the case where the consumer\n        // has `mc-dropdown` instances nested inside each other.\n        if (this._items.indexOf(item) === -1) {\n            this._items.push(item);\n            this._itemChanges.next(this._items);\n        }\n    }\n\n    /**\n     * Removes an item from the dropdown.\n     * @docs-private\n     */\n    removeItem(item: McDropdownItem) {\n        const index = this._items.indexOf(item);\n\n        if (this._items.indexOf(item) > -1) {\n            this._items.splice(index, 1);\n            this._itemChanges.next(this._items);\n        }\n    }\n\n    /**\n     * Adds classes to the dropdown panel based on its position. Can be used by\n     * consumers to add specific styling based on the position.\n     * @param posX Position of the dropdown along the x axis.\n     * @param posY Position of the dropdown along the y axis.\n     * @docs-private\n     */\n    setPositionClasses(posX: DropdownPositionX = this.xPosition, posY: DropdownPositionY = this.yPosition) {\n        const classes = this._classList;\n        classes['mc-dropdown-before'] = posX === 'before';\n        classes['mc-dropdown-after'] = posX === 'after';\n        classes['mc-dropdown-above'] = posY === 'above';\n        classes['mc-dropdown-below'] = posY === 'below';\n    }\n\n    /** Starts the enter animation. */\n    _startAnimation() {\n        this._panelAnimationState = 'enter';\n    }\n\n    /** Resets the panel animation to its initial state. */\n    _resetAnimation() {\n        this._panelAnimationState = 'void';\n    }\n\n    /** Callback that is invoked when the panel animation completes. */\n    _onAnimationDone(event: AnimationEvent) {\n        this._animationDone.next(event);\n        this._isAnimating = false;\n    }\n\n    _onAnimationStart(event: AnimationEvent) {\n        this._isAnimating = true;\n\n        // Scroll the content element to the top as soon as the animation starts. This is necessary,\n        // because we move focus to the first item while it's still being animated, which can throw\n        // the browser off when it determines the scroll position. Alternatively we can move focus\n        // when the animation is done, however moving focus asynchronously will interrupt screen\n        // readers which are in the process of reading out the dropdown already. We take the `element`\n        // from the `event` since we can't use a `ViewChild` to access the pane.\n        if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n            event.element.scrollTop = 0;\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McDropdownContent } from './dropdown-content';\nimport { McDropdownItem } from './dropdown-item';\nimport { MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER, McDropdownTrigger } from './dropdown-trigger';\nimport { McDropdown } from './dropdown.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        McIconModule\n    ],\n    exports: [McDropdown, McDropdownItem, McDropdownTrigger, McDropdownContent],\n    declarations: [McDropdown, McDropdownItem, McDropdownTrigger, McDropdownContent],\n    providers: [MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class McDropdownModule {}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-content',\n    preserveWhitespaces: false,\n    templateUrl: './content.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ],\n    host: {\n        '[class.mc-layout-content]': 'true'\n    }\n})\nexport class McContentComponent {\n}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-footer',\n    preserveWhitespaces: false,\n    templateUrl: './footer.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ],\n    host: {\n        '[class.mc-layout-footer]': 'true'\n    }\n})\nexport class McFooterComponent {\n}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector : 'mc-header',\n    preserveWhitespaces: false,\n    templateUrl: './header.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ],\n    host: {\n        '[class.mc-layout-header]': 'true'\n    }\n})\nexport class McHeaderComponent {\n}\n","import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-layout',\n    preserveWhitespaces: false,\n    styleUrls: ['layout.css'],\n    templateUrl: './layout.component.html',\n    host: {\n        '[class.mc-layout]': 'true',\n        '[class.mc-layout-has-sidebar]': 'hasSidebar'\n    },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McLayoutComponent {\n    hasSidebar = false;\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    EventEmitter,\n    Host,\n    Input,\n    OnInit,\n    Optional,\n    Output\n} from '@angular/core';\nimport { toBoolean } from '@ptsecurity/mosaic/core';\n\nimport { McLayoutComponent } from './layout.component';\n\n\n@Component({\n    selector: 'mc-sidebar',\n    preserveWhitespaces: false,\n    templateUrl: './sidebar.component.html',\n    host: {\n        '[class.mc-layout-sidebar]': 'true',\n        '[class.mc-layout-sidebar-collapsed]': 'mcCollapsed',\n        '[style.flex]': 'mcFlex',\n        '[style.max-width.px]': 'mcWidth',\n        '[style.min-width.px]': 'mcWidth',\n        '[style.width.px]': 'mcWidth'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McSidebarComponent implements OnInit {\n\n    @Input() _mcWidth = 200;\n    @Input() mcCollapsedWidth = 80;\n\n    @Input()\n    set mcCollapsible(value: boolean) {\n        this.collapsible = toBoolean(value);\n    }\n\n    get mcCollapsible(): boolean {\n        return this.collapsible;\n    }\n\n    @Input()\n    set mcCollapsed(value: boolean) {\n        this.collapsed = toBoolean(value);\n    }\n\n    get mcCollapsed(): boolean {\n        return this.collapsed;\n    }\n\n    // tslint:disable-next-line\n    @Output() mcCollapsedChange = new EventEmitter();\n\n    private collapsed = false;\n    private collapsible = false;\n\n    get mcFlex(): string {\n        if (this.mcCollapsed) {\n            return `0 0 ${this.mcCollapsedWidth}px`;\n        } else {\n            return `0 0 ${this.mcWidth}px`;\n        }\n    }\n\n    get mcWidth(): number {\n        if (this.mcCollapsed) {\n            return this.mcCollapsedWidth;\n        } else {\n            return this._mcWidth;\n        }\n    }\n\n    constructor(\n        @Optional() @Host() private mcLayoutComponent: McLayoutComponent) {\n    }\n\n    ngOnInit() {\n        if (this.mcLayoutComponent) {\n            this.mcLayoutComponent.hasSidebar = true;\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McContentComponent } from './content.component';\nimport { McFooterComponent } from './footer.component';\nimport { McHeaderComponent } from './header.component';\nimport { McLayoutComponent } from './layout.component';\nimport { McSidebarComponent } from './sidebar.component';\n\n\n@NgModule({\n    imports: [ CommonModule ],\n    exports: [\n        McLayoutComponent,\n        McContentComponent,\n        McFooterComponent,\n        McHeaderComponent,\n        McSidebarComponent\n    ],\n    declarations: [\n        McLayoutComponent,\n        McContentComponent,\n        McFooterComponent,\n        McHeaderComponent,\n        McSidebarComponent\n    ]\n})\nexport class McLayoutModule {\n}\n","// tslint:disable:no-magic-numbers\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { DateAdapter } from '@ptsecurity/cdk/datetime';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    PAGE_DOWN,\n    PAGE_UP,\n    RIGHT_ARROW,\n    UP_ARROW,\n    SPACE\n} from '@ptsecurity/cdk/keycodes';\n\nimport { McCalendarBody, McCalendarCell } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-multi-year-view',\n    templateUrl: 'multi-year-view.html',\n    exportAs: 'mcMultiYearView',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McMultiYearView<D> implements AfterContentInit {\n    /** The date to display in this multi-year view (everything other than the year is ignored). */\n    @Input()\n    get activeDate(): D {\n        return this._activeDate;\n    }\n\n    set activeDate(value: D) {\n        const oldActiveDate = this._activeDate;\n        const validDate =\n            this.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();\n        this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n        if (Math.floor(this.dateAdapter.getYear(oldActiveDate) / yearsPerPage) !==\n            Math.floor(this.dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n            this.init();\n        }\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.selectedYear = this._selected && this.dateAdapter.getYear(this._selected);\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** A function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Emits when a new year is selected. */\n    @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits the selected year. This doesn't imply a change on the selected date */\n    @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits when any date is activated. */\n    @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** The body of calendar table */\n    @ViewChild(McCalendarBody) mcCalendarBody: McCalendarBody;\n\n    /** Grid of calendar cells representing the currently displayed years. */\n    years: McCalendarCell[][];\n\n    /** The year that today falls on. */\n    todayYear: number;\n\n    /** The year of the selected date. Null if the selected date is null. */\n    selectedYear: number | null;\n    private _activeDate: D;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() private dir?: Directionality\n    ) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        this._activeDate = this.dateAdapter.today();\n    }\n\n    ngAfterContentInit() {\n        this.init();\n    }\n\n    /** Initializes this multi-year view. */\n    init() {\n        this.todayYear = this.dateAdapter.getYear(this.dateAdapter.today());\n        const activeYear = this.dateAdapter.getYear(this._activeDate);\n        const activeOffset = activeYear % yearsPerPage;\n        this.years = [];\n        for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n            row.push(activeYear - activeOffset + i);\n            if (row.length === yearsPerRow) {\n                this.years.push(row.map((year) => this.createCellForYear(year)));\n                row = [];\n            }\n        }\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Handles when a new year is selected. */\n    onYearSelected(year: number) {\n        this.yearSelected.emit(this.dateAdapter.createDate(year, 0, 1));\n        const month = this.dateAdapter.getMonth(this.activeDate);\n        const daysInMonth =\n            this.dateAdapter.getNumDaysInMonth(this.dateAdapter.createDate(year, month, 1));\n        this.selectedChange.emit(this.dateAdapter.createDate(year, month,\n            Math.min(this.dateAdapter.getDate(this.activeDate), daysInMonth)));\n    }\n\n    /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n    handleCalendarBodyKeydown(event: KeyboardEvent): void {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n        const oldActiveDate = this._activeDate;\n        const isRtl = this.isRtl();\n\n        // tslint:disable-next-line:deprecation\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n                break;\n            case HOME:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate,\n                    -this.dateAdapter.getYear(this._activeDate) % yearsPerPage);\n                break;\n            case END:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate,\n                    yearsPerPage - this.dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n                break;\n            case PAGE_UP:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(\n                        this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n                break;\n            case PAGE_DOWN:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(\n                        this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n                break;\n            case ENTER:\n            case SPACE:\n                this.onYearSelected(this.dateAdapter.getYear(this._activeDate));\n                break;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n\n        if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n\n        this.focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n\n    getActiveCell(): number {\n        return this.dateAdapter.getYear(this.activeDate) % yearsPerPage;\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.mcCalendarBody.focusActiveCell();\n    }\n\n    /** Creates an McCalendarCell for the given year. */\n    private createCellForYear(year: number) {\n        const yearName = this.dateAdapter.getYearName(this.dateAdapter.createDate(year, 0, 1));\n\n        return new McCalendarCell(year, yearName, yearName, this.shouldEnableYear(year));\n    }\n\n    /** Whether the given year is enabled. */\n    private shouldEnableYear(year: number) {\n        // disable if the year is greater than maxDate lower than minDate\n        if (year === undefined || year === null ||\n            (this.maxDate && year > this.dateAdapter.getYear(this.maxDate)) ||\n            (this.minDate && year < this.dateAdapter.getYear(this.minDate))) {\n            return false;\n        }\n\n        // enable if it reaches here and there's no filter defined\n        if (!this.dateFilter) {\n            return true;\n        }\n\n        const firstOfYear = this.dateAdapter.createDate(year, 0, 1);\n\n        // If any date in the year is enabled count the year as enabled.\n        for (let date = firstOfYear; this.dateAdapter.getYear(date) === year;\n             date = this.dateAdapter.addCalendarDays(date, 1)) {\n            if (this.dateFilter(date)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Determines whether the user has the RTL layout direction. */\n    private isRtl() {\n        return this.dir && this.dir.value === 'rtl';\n    }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Inject,\n    Input,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    PAGE_DOWN,\n    PAGE_UP,\n    RIGHT_ARROW,\n    UP_ARROW,\n    SPACE\n} from '@ptsecurity/cdk/keycodes';\n\nimport { McCalendarBody, McCalendarCell } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-year-view',\n    templateUrl: 'year-view.html',\n    exportAs: 'mcYearView',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McYearView<D> implements AfterContentInit {\n    /** The date to display in this year view (everything other than the year is ignored). */\n    @Input()\n    get activeDate(): D {\n        return this._activeDate;\n    }\n\n    set activeDate(value: D) {\n        const oldActiveDate = this._activeDate;\n        const validDate =\n            this.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();\n        this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n        if (this.dateAdapter.getYear(oldActiveDate) !== this.dateAdapter.getYear(this._activeDate)) {\n            this.init();\n        }\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.selectedMonth = this.getMonthInCurrentYear(this._selected);\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** A function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Emits when a new month is selected. */\n    @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits the selected month. This doesn't imply a change on the selected date */\n    @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits when any date is activated. */\n    @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** The body of calendar table */\n    @ViewChild(McCalendarBody) mcCalendarBody: McCalendarBody;\n\n    /** Grid of calendar cells representing the months of the year. */\n    months: McCalendarCell[][];\n\n    /** The label for this year (e.g. \"2017\"). */\n    yearLabel: string;\n\n    /** The month in this year that today falls on. Null if today is in a different year. */\n    todayMonth: number | null;\n\n    /**\n     * The month in this year that the selected Date falls on.\n     * Null if the selected Date is in a different year.\n     */\n    selectedMonth: number | null;\n    private _activeDate: D;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() private dir?: Directionality\n    ) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        this._activeDate = this.dateAdapter.today();\n    }\n\n    ngAfterContentInit() {\n        this.init();\n    }\n\n    /** Handles when a new month is selected. */\n    onMonthSelected(month: number) {\n        const normalizedDate =\n            this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate), month, 1);\n\n        this.monthSelected.emit(normalizedDate);\n\n        const daysInMonth = this.dateAdapter.getNumDaysInMonth(normalizedDate);\n\n        this.selectedChange.emit(this.dateAdapter.createDate(\n            this.dateAdapter.getYear(this.activeDate), month,\n            Math.min(this.dateAdapter.getDate(this.activeDate), daysInMonth)));\n    }\n\n    /** Handles keydown events on the calendar body when calendar is in year view. */\n    handleCalendarBodyKeydown(event: KeyboardEvent): void {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n        const oldActiveDate = this._activeDate;\n        const isRtl = this.isRtl();\n\n        const VERTICAL_SHIFT = 4;\n        const PAGE_SHIFT = 10;\n        const MAX_MONTH_INDEX = 11;\n\n        // tslint:disable-next-line:deprecation\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, -VERTICAL_SHIFT);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, VERTICAL_SHIFT);\n                break;\n            case HOME:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate,\n                    -this.dateAdapter.getMonth(this._activeDate));\n                break;\n            case END:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate,\n                    MAX_MONTH_INDEX - this.dateAdapter.getMonth(this._activeDate));\n                break;\n            case PAGE_UP:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -PAGE_SHIFT : -1);\n                break;\n            case PAGE_DOWN:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(this._activeDate, event.altKey ? PAGE_SHIFT : 1);\n                break;\n            case ENTER:\n            case SPACE:\n                this.onMonthSelected(this.dateAdapter.getMonth(this._activeDate));\n                break;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n\n        if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n\n        this.focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n\n    /** Initializes this year view. */\n    init() {\n        this.selectedMonth = this.getMonthInCurrentYear(this.selected);\n        this.todayMonth = this.getMonthInCurrentYear(this.dateAdapter.today());\n        this.yearLabel = this.dateAdapter.getYearName(this.activeDate);\n\n        const monthNames = this.dateAdapter.getMonthNames('short');\n\n        // First row of months only contains 5 elements so we can fit the year label on the same row.\n        // tslint:disable-next-line:no-magic-numbers\n        this.months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map((row) => row.map(\n            (month) => this.createCellForMonth(month, monthNames[month])));\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.mcCalendarBody.focusActiveCell();\n    }\n\n    /**\n     * Gets the month in this year that the given Date falls on.\n     * Returns null if the given Date is in another year.\n     */\n    private getMonthInCurrentYear(date: D | null) {\n        return date && this.dateAdapter.getYear(date) === this.dateAdapter.getYear(this.activeDate) ?\n            this.dateAdapter.getMonth(date) : null;\n    }\n\n    /** Creates an McCalendarCell for the given month. */\n    private createCellForMonth(month: number, monthName: string) {\n        const ariaLabel = this.dateAdapter.format(\n            this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate), month, 1),\n            this.dateFormats.display.monthYearA11yLabel);\n\n        const newMonthName = monthName[0].toLocaleUpperCase() + monthName.substr(1);\n\n        return new McCalendarCell(\n            month, newMonthName, ariaLabel, this.shouldEnableMonth(month));\n    }\n\n    /** Whether the given month is enabled. */\n    private shouldEnableMonth(month: number) {\n\n        const activeYear = this.dateAdapter.getYear(this.activeDate);\n\n        if (month === undefined || month === null ||\n            this.isYearAndMonthAfterMaxDate(activeYear, month) ||\n            this.isYearAndMonthBeforeMinDate(activeYear, month)) {\n            return false;\n        }\n\n        if (!this.dateFilter) {\n            return true;\n        }\n\n        const firstOfMonth = this.dateAdapter.createDate(activeYear, month, 1);\n\n        // If any date in the month is enabled count the month as enabled.\n        for (let date = firstOfMonth; this.dateAdapter.getMonth(date) === month;\n             date = this.dateAdapter.addCalendarDays(date, 1)) {\n            if (this.dateFilter(date)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Tests whether the combination month/year is after this.maxDate, considering\n     * just the month and year of this.maxDate\n     */\n    private isYearAndMonthAfterMaxDate(year: number, month: number) {\n        if (this.maxDate) {\n            const maxYear = this.dateAdapter.getYear(this.maxDate);\n            const maxMonth = this.dateAdapter.getMonth(this.maxDate);\n\n            return year > maxYear || (year === maxYear && month > maxMonth);\n        }\n\n        return false;\n    }\n\n    /**\n     * Tests whether the combination month/year is before this.minDate, considering\n     * just the month and year of this.minDate\n     */\n    private isYearAndMonthBeforeMinDate(year: number, month: number) {\n        if (this.minDate) {\n            const minYear = this.dateAdapter.getYear(this.minDate);\n            const minMonth = this.dateAdapter.getMonth(this.minDate);\n\n            return year < minYear || (year === minYear && month < minMonth);\n        }\n\n        return false;\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Determines whether the user has the RTL layout direction. */\n    private isRtl() {\n        return this.dir && this.dir.value === 'rtl';\n    }\n}\n","import {\n    AfterContentInit,\n    AfterViewChecked,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Optional,\n    Output,\n    SimpleChanges,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport { ComponentPortal, IComponentType, Portal } from '@ptsecurity/cdk/portal';\nimport { Subject, Subscription } from 'rxjs';\n\nimport { McCalendarCellCssClasses } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\nimport { McDatepickerIntl } from './datepicker-intl';\nimport { McMonthView } from './month-view';\nimport { McMultiYearView, yearsPerPage } from './multi-year-view';\nimport { McYearView } from './year-view';\n\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type McCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for McCalendar */\n@Component({\n    selector: 'mc-calendar-header',\n    templateUrl: 'calendar-header.html',\n    exportAs: 'mcCalendarHeader',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCalendarHeader<D> {\n    constructor(private intl: McDatepickerIntl,\n                @Inject(forwardRef(() => McCalendar)) public calendar: McCalendar<D>,\n                @Optional() private dateAdapter: DateAdapter<D>,\n                @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n                changeDetectorRef: ChangeDetectorRef) {\n\n        this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n    }\n\n    /** The label for the current calendar view. */\n    get periodButtonText(): string {\n        if (this.calendar.currentView === 'month') {\n            const label = this.dateAdapter\n                .format(this.calendar.activeDate, this.dateFormats.display.monthYearLabel);\n\n            return label[0].toLocaleUpperCase() + label.substr(1);\n        }\n\n        if (this.calendar.currentView === 'year') {\n            return this.dateAdapter.getYearName(this.calendar.activeDate);\n        }\n\n        const activeYear = this.dateAdapter.getYear(this.calendar.activeDate);\n        const firstYearInView = this.dateAdapter.getYearName(\n            // tslint:disable-next-line:no-magic-numbers\n            this.dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n        const lastYearInView = this.dateAdapter.getYearName(\n            // tslint:disable-next-line:no-magic-numbers\n            this.dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n\n        return `${firstYearInView} \\u2013 ${lastYearInView}`;\n    }\n\n    get periodButtonLabel(): string {\n        return this.calendar.currentView === 'month' ?\n            this.intl.switchToMultiYearViewLabel : this.intl.switchToMonthViewLabel;\n    }\n\n    /** The label for the previous button. */\n    get prevButtonLabel(): string {\n        return {\n            month: this.intl.prevMonthLabel,\n            year: this.intl.prevYearLabel,\n            'multi-year': this.intl.prevMultiYearLabel\n        }[this.calendar.currentView];\n    }\n\n    /** The label for the next button. */\n    get nextButtonLabel(): string {\n        return {\n            month: this.intl.nextMonthLabel,\n            year: this.intl.nextYearLabel,\n            'multi-year': this.intl.nextMultiYearLabel\n        }[this.calendar.currentView];\n    }\n\n    /** Handles user clicks on the period label. */\n    currentPeriodClicked(): void {\n        this.calendar.currentView = this.calendar.currentView === 'month' ? 'multi-year' : 'month';\n    }\n\n    /** Handles user clicks on the previous button. */\n    previousClicked(): void {\n        this.calendar.activeDate = this.calendar.currentView === 'month' ?\n            this.dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this.dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView === 'year' ? -1 : -yearsPerPage\n            );\n    }\n\n    /** Handles user clicks on the next button. */\n    nextClicked(): void {\n        this.calendar.activeDate = this.calendar.currentView === 'month' ?\n            this.dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this.dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                this.calendar.currentView === 'year' ? 1 : yearsPerPage\n            );\n    }\n\n    /** Whether the previous period button is enabled. */\n    previousEnabled(): boolean {\n        if (!this.calendar.minDate) {\n            return true;\n        }\n\n        return !this.calendar.minDate ||\n            !this.isSameView(this.calendar.activeDate, this.calendar.minDate);\n    }\n\n    /** Whether the next period button is enabled. */\n    nextEnabled(): boolean {\n        return !this.calendar.maxDate ||\n            !this.isSameView(this.calendar.activeDate, this.calendar.maxDate);\n    }\n\n    /** Whether the two dates represent the same view in the current view mode (month or year). */\n    private isSameView(date1: D, date2: D): boolean {\n        if (this.calendar.currentView === 'month') {\n            return this.dateAdapter.getYear(date1) === this.dateAdapter.getYear(date2) &&\n                this.dateAdapter.getMonth(date1) === this.dateAdapter.getMonth(date2);\n        }\n        if (this.calendar.currentView === 'year') {\n            return this.dateAdapter.getYear(date1) === this.dateAdapter.getYear(date2);\n        }\n\n        // Otherwise we are in 'multi-year' view.\n        return Math.floor(this.dateAdapter.getYear(date1) / yearsPerPage) ===\n            Math.floor(this.dateAdapter.getYear(date2) / yearsPerPage);\n    }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-calendar',\n    templateUrl: 'calendar.html',\n    styleUrls: ['calendar.css'],\n    host: {\n        class: 'mc-calendar'\n    },\n    exportAs: 'mcCalendar',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n\n    /** A date representing the period (month or year) to start the calendar in. */\n    @Input()\n    get startAt(): D | null {\n        return this._startAt;\n    }\n\n    set startAt(value: D | null) {\n        this._startAt = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /**\n     * The current active date. This determines which time period is shown and which date is\n     * highlighted when using keyboard navigation.\n     */\n    get activeDate(): D {\n        return this.clampedActiveDate;\n    }\n\n    set activeDate(value: D) {\n        this.clampedActiveDate = this.dateAdapter.clampDate(value, this.minDate, this.maxDate);\n        this.stateChanges.next();\n    }\n\n    /** Whether the calendar is in month view. */\n    get currentView(): McCalendarView {\n        return this._currentView;\n    }\n\n    set currentView(value: McCalendarView) {\n        this._currentView = value;\n        this.moveFocusOnNextTick = true;\n    }\n\n    /** An input indicating the type of the header component, if set. */\n    @Input() headerComponent: IComponentType<any>;\n\n    /** A portal containing the header component type for this calendar. */\n    calendarHeaderPortal: Portal<any>;\n\n    /** Whether the calendar should be started in month or year view. */\n    @Input() startView: McCalendarView = 'month';\n\n    /** Function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Function that can be used to add custom CSS classes to dates. */\n    @Input() dateClass: (date: D) => McCalendarCellCssClasses;\n\n    /** Emits when the currently selected date changes. */\n    @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /**\n     * Emits the year chosen in multiyear view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /**\n     * Emits the month chosen in year view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits when any date is selected. */\n    @Output() readonly userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Reference to the current month view component. */\n    @ViewChild(McMonthView) monthView: McMonthView<D>;\n\n    /** Reference to the current year view component. */\n    @ViewChild(McYearView) yearView: McYearView<D>;\n\n    /** Reference to the current multi-year view component. */\n    @ViewChild(McMultiYearView) multiYearView: McMultiYearView<D>;\n\n    /**\n     * Emits whenever there is a state change that the header may need to respond to.\n     */\n    stateChanges = new Subject<void>();\n\n    private intlChanges: Subscription;\n\n    /**\n     * Used for scheduling that focus should be moved to the active cell on the next tick.\n     * We need to schedule it, rather than do it immediately, because we have to wait\n     * for Angular to re-evaluate the view children.\n     */\n    private moveFocusOnNextTick = false;\n    private _startAt: D | null;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n    private clampedActiveDate: D;\n    private _currentView: McCalendarView;\n\n    constructor(\n        intl: McDatepickerIntl,\n        @Optional() private dateAdapter: DateAdapter<D>,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        this.intlChanges = intl.changes.subscribe(() => {\n            changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        });\n    }\n\n    ngAfterContentInit() {\n        this.calendarHeaderPortal = new ComponentPortal(this.headerComponent || McCalendarHeader);\n        this.activeDate = this.startAt || this.dateAdapter.today();\n\n        // Assign to the private property since we don't want to move focus on init.\n        this._currentView = this.startView;\n    }\n\n    ngAfterViewChecked() {\n        if (this.moveFocusOnNextTick) {\n            this.moveFocusOnNextTick = false;\n            this.focusActiveCell();\n        }\n    }\n\n    ngOnDestroy() {\n        this.intlChanges.unsubscribe();\n        this.stateChanges.complete();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n        if (change && !change.firstChange) {\n            const view = this.getCurrentViewComponent();\n\n            if (view) {\n                // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n                // passed down to the view via data bindings which won't be up-to-date when we call `init`.\n                this.changeDetectorRef.detectChanges();\n                view.init();\n            }\n        }\n\n        this.stateChanges.next();\n    }\n\n    focusActiveCell() {\n        this.getCurrentViewComponent().focusActiveCell();\n    }\n\n    /** Updates today's date after an update of the active date */\n    updateTodaysDate() {\n        const view = this.currentView === 'month' ? this.monthView :\n            (this.currentView === 'year' ? this.yearView : this.multiYearView);\n\n        view.ngAfterContentInit();\n    }\n\n    /** Handles date selection in the month view. */\n    dateSelected(date: D): void {\n        if (!this.dateAdapter.sameDate(date, this.selected)) {\n            this.selectedChange.emit(date);\n        }\n    }\n\n    /** Handles year selection in the multiyear view. */\n    yearSelectedInMultiYearView(normalizedYear: D) {\n        this.yearSelected.emit(normalizedYear);\n    }\n\n    /** Handles month selection in the year view. */\n    monthSelectedInYearView(normalizedMonth: D) {\n        this.monthSelected.emit(normalizedMonth);\n    }\n\n    userSelected(): void {\n        this.userSelection.emit();\n    }\n\n    /** Handles year/month selection in the multi-year/year views. */\n    goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n        this.activeDate = date;\n        this.currentView = view;\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Returns the component instance that corresponds to the current calendar view. */\n    private getCurrentViewComponent() {\n        return this.monthView || this.yearView || this.multiYearView;\n    }\n}\n","import {\n    animate,\n    state,\n    style,\n    transition,\n    trigger,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n\n/**\n * Animations used by the mosaic datepicker.\n * @docs-private\n */\nexport const mcDatepickerAnimations: {\n    readonly transformPanel: AnimationTriggerMetadata;\n    readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n    /** Transforms the height of the datepicker's calendar. */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(1, 0.8)'\n        })),\n        transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1, 1)'\n        }))),\n        transition('* => void', animate('100ms linear', style({ opacity: 0 })))\n    ]),\n\n    /** Fades in the content of the calendar. */\n    fadeInCalendar: trigger('fadeInCalendar', [\n        state('void', style({ opacity: 0 })),\n        state('enter', style({ opacity: 1 })),\n\n        // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n        transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n    ])\n};\n\n// todo should be put into polyfils\n// https://github.com/angular/angular/issues/24769\nif (!Element.prototype.matches) {\n    Element.prototype.matches = (Element.prototype as any).msMatchesSelector;\n}\n","// tslint:disable:no-unbound-method\n// tslint:disable:no-magic-numbers\nimport { DOCUMENT } from '@angular/common';\nimport {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    Component,\n    ComponentRef,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { DateAdapter } from '@ptsecurity/cdk/datetime';\nimport { ESCAPE, UP_ARROW } from '@ptsecurity/cdk/keycodes';\nimport {\n    Overlay,\n    OverlayConfig,\n    OverlayRef,\n    IPositionStrategy,\n    IScrollStrategy\n} from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal, IComponentType } from '@ptsecurity/cdk/portal';\nimport {\n    CanColor,\n    CanColorCtor,\n    mixinColor,\n    ThemePalette\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { merge, Observable, Subject, Subscription } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\n\nimport { McCalendar } from './calendar';\nimport { McCalendarCellCssClasses } from './calendar-body';\nimport { mcDatepickerAnimations } from './datepicker-animations';\nimport { createMissingDateImplError } from './datepicker-errors';\nimport { McDatepickerInput } from './datepicker-input';\n\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MC_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-datepicker-scroll-strategy');\n\n/** @docs-private */\n// tslint:disable-next-line:naming-convention\nexport function MC_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => IScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_DATEPICKER_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_DATEPICKER_SCROLL_STRATEGY_FACTORY\n};\n\n// Boilerplate for applying mixins to McDatepickerContent.\n/** @docs-private */\nexport class McDatepickerContentBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McDatepickerContentMixinBase: CanColorCtor & typeof McDatepickerContentBase =\n    mixinColor(McDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * McCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n    selector: 'mc-datepicker__content',\n    templateUrl: 'datepicker-content.html',\n    styleUrls: ['datepicker-content.css'],\n    host: {\n        class: 'mc-datepicker__content',\n        '[@transformPanel]': '\"enter\"'\n    },\n    animations: [\n        mcDatepickerAnimations.transformPanel,\n        mcDatepickerAnimations.fadeInCalendar\n    ],\n    exportAs: 'mcDatepickerContent',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['color']\n})\nexport class McDatepickerContent<D> extends McDatepickerContentMixinBase\n    implements AfterViewInit, CanColor {\n\n    /** Reference to the internal calendar component. */\n    @ViewChild(McCalendar) calendar: McCalendar<D>;\n\n    /** Reference to the datepicker that created the overlay. */\n    datepicker: McDatepicker<D>;\n\n    /** Whether the datepicker is above or below the input. */\n    isAbove: boolean;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    ngAfterViewInit() {\n        this.calendar.focusActiveCell();\n    }\n}\n\n\n// TODO: We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"mcDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n    selector: 'mc-datepicker',\n    template: '',\n    exportAs: 'mcDatepicker',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    providers: [{ provide: McFormFieldControl, useExisting: McDatepicker }]\n})\nexport class McDatepicker<D> implements OnDestroy, CanColor {\n\n    /** The date to open the calendar to initially. */\n    @Input()\n    get startAt(): D | null {\n        // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n        // selected value is.\n        return this._startAt || (this.datepickerInput ? this.datepickerInput.value : null);\n    }\n\n    set startAt(value: D | null) {\n        this._startAt = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** Color palette to use on the datepicker's calendar. */\n    @Input()\n    get color(): ThemePalette {\n        // @ts-ignore:next-line\n        return this._color ||\n            (this.datepickerInput ? this.datepickerInput.getThemePalette() : undefined);\n    }\n\n    set color(value: ThemePalette) {\n        this._color = value;\n    }\n\n    /** Whether the datepicker pop-up should be disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled === undefined && this.datepickerInput ?\n            this.datepickerInput.disabled : !!this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        const newValue = coerceBooleanProperty(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this.disabledChange.next(newValue);\n        }\n    }\n\n    /** Whether the calendar is open. */\n    @Input()\n    get opened(): boolean {\n        return this._opened;\n    }\n\n    set opened(value: boolean) {\n        if (value) {\n            this.open();\n        } else {\n            this.close();\n        }\n    }\n\n    /** The currently selected date. */\n    get selected(): D | null {\n        return this.validSelected;\n    }\n\n    set selected(value: D | null) {\n        this.validSelected = value;\n    }\n\n    /** The minimum selectable date. */\n    get minDate(): D | null {\n        return this.datepickerInput && this.datepickerInput.min;\n    }\n\n    /** The maximum selectable date. */\n    get maxDate(): D | null {\n        return this.datepickerInput && this.datepickerInput.max;\n    }\n\n    get dateFilter(): (date: D | null) => boolean {\n        return this.datepickerInput && this.datepickerInput.dateFilter;\n    }\n\n\n    get value(): D | null {\n        return this.selected;\n    }\n\n    /** An input indicating the type of the custom header component for the calendar, if set. */\n    @Input() calendarHeaderComponent: IComponentType<any>;\n\n    /** The view that the calendar should start in. */\n    @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n    /**\n     * Emits selected year in multiyear view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /**\n     * Emits selected month in year view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n    @Input() panelClass: string | string[];\n\n    /** Function that can be used to add custom CSS classes to dates. */\n    @Input() dateClass: (date: D) => McCalendarCellCssClasses;\n\n    /** Emits when the datepicker has been opened. */\n    @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Emits when the datepicker has been closed. */\n    @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n    /** The id for the datepicker calendar. */\n    id: string = `mc-datepicker-${datepickerUid++}`;\n\n    /** A reference to the overlay when the calendar is opened as a popup. */\n    popupRef: OverlayRef;\n\n    /** The input element this datepicker is associated with. */\n    datepickerInput: McDatepickerInput<D>;\n\n    readonly stateChanges: Observable<void> = new Subject<void>();\n\n    /** Emits when the datepicker is disabled. */\n    readonly disabledChange = new Subject<boolean>();\n\n    /** Emits new selected date when selected date changes. */\n    readonly selectedChanged = new Subject<D>();\n    private scrollStrategy: () => IScrollStrategy;\n    private _startAt: D | null;\n    private _disabled: boolean;\n    private _opened = false;\n    private validSelected: D | null = null;\n    private _color: ThemePalette;\n\n    /** A portal containing the calendar for this datepicker. */\n    private calendarPortal: ComponentPortal<McDatepickerContent<D>>;\n\n    /** Reference to the component instantiated in popup mode. */\n    private popupComponentRef: ComponentRef<McDatepickerContent<D>> | null;\n\n    /** The element that was focused before the datepicker was opened. */\n    private focusedElementBeforeOpen: HTMLElement | null = null;\n\n    /** Subscription to value changes in the associated input element. */\n    private inputSubscription = Subscription.EMPTY;\n\n    constructor(private overlay: Overlay,\n                private ngZone: NgZone,\n                private viewContainerRef: ViewContainerRef,\n                @Inject(MC_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n                @Optional() private dateAdapter: DateAdapter<D>,\n                @Optional() private dir: Directionality,\n                @Optional() @Inject(DOCUMENT) private document: any) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        this.scrollStrategy = scrollStrategy;\n    }\n\n    ngOnDestroy() {\n        this.close();\n        this.inputSubscription.unsubscribe();\n        this.disabledChange.complete();\n\n        if (this.popupRef) {\n            this.popupRef.dispose();\n            this.popupComponentRef = null;\n        }\n    }\n\n    /** Selects the given date */\n    select(date: D): void {\n        const oldValue = this.selected;\n        this.selected = date;\n        if (!this.dateAdapter.sameDate(oldValue, this.selected)) {\n            this.selectedChanged.next(date);\n        }\n    }\n\n    /** Emits the selected year in multiyear view */\n    selectYear(normalizedYear: D): void {\n        this.yearSelected.emit(normalizedYear);\n    }\n\n    /** Emits selected month in year view */\n    selectMonth(normalizedMonth: D): void {\n        this.monthSelected.emit(normalizedMonth);\n    }\n\n    /**\n     * Register an input with this datepicker.\n     * @param input The datepicker input to register with this datepicker.\n     */\n    registerInput(input: McDatepickerInput<D>): void {\n        if (this.datepickerInput) {\n            throw Error('A McDatepicker can only be associated with a single input.');\n        }\n        this.datepickerInput = input;\n        this.inputSubscription =\n            this.datepickerInput.valueChange.subscribe((value: D | null) => this.selected = value);\n    }\n\n    /** Open the calendar. */\n    open(): void {\n        if (this._opened || this.disabled) {\n            return;\n        }\n        if (!this.datepickerInput) {\n            throw Error('Attempted to open an McDatepicker with no associated input.');\n        }\n        if (this.document) {\n            this.focusedElementBeforeOpen = this.document.activeElement;\n        }\n\n        this.openAsPopup();\n\n        this._opened = true;\n        this.openedStream.emit();\n    }\n\n    /** Close the calendar. */\n    close(): void {\n        if (!this._opened) {\n            return;\n        }\n\n        if (this.popupRef && this.popupRef.hasAttached()) {\n            this.popupRef.detach();\n        }\n\n        if (this.calendarPortal && this.calendarPortal.isAttached) {\n            this.calendarPortal.detach();\n        }\n\n        const completeClose = () => {\n            // The `_opened` could've been reset already if\n            // we got two events in quick succession.\n            if (this._opened) {\n                this._opened = false;\n                this.closedStream.emit();\n                this.focusedElementBeforeOpen = null;\n            }\n        };\n\n        if (this.focusedElementBeforeOpen &&\n            typeof this.focusedElementBeforeOpen.focus === 'function') {\n            // Because IE moves focus asynchronously, we can't count on it being restored before we've\n            // marked the datepicker as closed. If the event fires out of sequence and the element that\n            // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n            // able to close the calendar at all. We work around it by making the logic, that marks\n            // the datepicker as closed, async as well.\n            this.focusedElementBeforeOpen.focus();\n            setTimeout(completeClose);\n        } else {\n            completeClose();\n        }\n    }\n\n    /** Open the calendar as a popup. */\n    private openAsPopup(): void {\n        if (!this.calendarPortal) {\n            this.calendarPortal = new ComponentPortal<McDatepickerContent<D>>(McDatepickerContent,\n                this.viewContainerRef);\n        }\n\n        if (!this.popupRef) {\n            this.createPopup();\n        }\n\n        if (!this.popupRef.hasAttached()) {\n            this.popupComponentRef = this.popupRef.attach(this.calendarPortal);\n            this.popupComponentRef.instance.datepicker = this;\n            this.setColor();\n\n            // Update the position once the calendar has rendered.\n            this.ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n                this.popupRef.updatePosition();\n            });\n        }\n    }\n\n    /** Create the popup. */\n    private createPopup(): void {\n        const overlayConfig = new OverlayConfig({\n            positionStrategy: this.createPopupPositionStrategy(),\n            hasBackdrop: true,\n            backdropClass: 'mc-overlay-transparent-backdrop',\n            direction: this.dir,\n            scrollStrategy: this.scrollStrategy(),\n            panelClass: 'mc-datepicker__popup'\n        });\n\n        this.popupRef = this.overlay.create(overlayConfig);\n        this.popupRef.overlayElement.setAttribute('role', 'dialog');\n\n        merge(\n            this.popupRef.backdropClick(),\n            this.popupRef.detachments(),\n            this.popupRef.keydownEvents().pipe(filter((event) => {\n                // Closing on alt + up is only valid when there's an input associated with the datepicker.\n                // tslint:disable-next-line:deprecation\n                return event.keyCode === ESCAPE || (this.datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n            }))\n        ).subscribe(() => this.close());\n    }\n\n    /** Create the popup PositionStrategy. */\n    private createPopupPositionStrategy(): IPositionStrategy {\n        return this.overlay.position()\n            .flexibleConnectedTo(this.datepickerInput.elementRef)\n            .withTransformOriginOn('.mc-datepicker__content')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(8)\n            .withLockedPosition()\n            .withPositions([\n                {\n                    originX: 'start',\n                    originY: 'bottom',\n                    overlayX: 'start',\n                    overlayY: 'top'\n                },\n                {\n                    originX: 'start',\n                    originY: 'top',\n                    overlayX: 'start',\n                    overlayY: 'bottom'\n                },\n                {\n                    originX: 'end',\n                    originY: 'bottom',\n                    overlayX: 'end',\n                    overlayY: 'top'\n                },\n                {\n                    originX: 'end',\n                    originY: 'top',\n                    overlayX: 'end',\n                    overlayY: 'bottom'\n                }\n            ]);\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Passes the current theme color along to the calendar overlay. */\n    private setColor(): void {\n        const color = this.color;\n        if (this.popupComponentRef) {\n            this.popupComponentRef.instance.color = color;\n        }\n    }\n}\n","import {\n    Output,\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef, Input,\n    OnDestroy, EventEmitter,\n    ViewEncapsulation, HostBinding\n} from '@angular/core';\n\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { SPACE } from '@ptsecurity/cdk/keycodes';\n\n\n@Component({\n    selector: 'mc-card',\n    templateUrl: './card.component.html',\n    styleUrls: ['./card.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['color'],\n    host: {\n        class: 'mc-card',\n        '[class.mc-card_readonly]': 'readonly',\n        '[class.mc-card_selected]': 'selected',\n        '(keydown)': 'onKeyDown($event)',\n        '(click)': 'onClick($event)'\n    }\n})\nexport class McCard implements OnDestroy {\n    get tabIndex(): number | null {\n        return this.readonly ? null : this._tabIndex;\n    }\n\n    @HostBinding('attr.tabIndex')\n    @Input()\n    set tabIndex(value: number | null) {\n        this._tabIndex = value;\n    }\n\n    @Input()\n    readonly = false;\n\n    @Input()\n    selected = false;\n\n    @Output()\n    selectedChange = new EventEmitter<boolean>();\n\n    private _tabIndex: number | null = 0;\n\n    constructor(private _elementRef: ElementRef, private _focusMonitor: FocusMonitor) {\n        this._focusMonitor.monitor(this._elementRef.nativeElement, false);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this.hostElement.focus();\n    }\n\n    onClick($event: MouseEvent) {\n        if (!this.readonly) {\n            $event.stopPropagation();\n\n            this.selectedChange.emit(!this.selected);\n        }\n    }\n\n    private get hostElement() {\n        return this._elementRef.nativeElement;\n    }\n\n    onKeyDown($event: KeyboardEvent) {\n        switch ($event.keyCode) {\n            case SPACE:\n                if (!this.readonly) {\n                    $event.preventDefault();\n                    this.selectedChange.emit(!this.selected);\n                }\n                break;\n            default:\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McCard\n} from './card.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [McCard],\n    declarations: [McCard]\n})\nexport class McCardModule {}\n","import { InjectionToken } from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type McCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MC_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<McCheckboxClickAction>('mc-checkbox-click-action');\n","import {\n    AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport {\n    CanColor, CanColorCtor,\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\nimport { MC_CHECKBOX_CLICK_ACTION, McCheckboxClickAction } from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mc-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McCheckbox),\n    multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n    /** The initial state of the component before any user interaction. */\n    Init,\n    /** The state representing the component when it's becoming checked. */\n    Checked,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate\n}\n\n/** Change event object emitted by McCheckbox. */\nexport class McCheckboxChange {\n    /** The source McCheckbox of the event. */\n    source: McCheckbox;\n    /** The new `checked` value of the checkbox. */\n    checked: boolean;\n}\n\n// Boilerplate for applying mixins to McCheckbox.\n/** @docs-private */\nexport class McCheckboxBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\nexport const _McCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof McCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisabled(McCheckboxBase)));\n\n\n/**\n * A mosaic checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A McCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n */\n@Component({\n    selector: 'mc-checkbox',\n    templateUrl: 'checkbox.html',\n    styleUrls: ['checkbox.css'],\n    exportAs: 'mcCheckbox',\n    host: {\n        class: 'mc-checkbox',\n        '[id]': 'id',\n        '[attr.id]': 'id',\n        '[class.mc-indeterminate]': 'indeterminate',\n        '[class.mc-checked]': 'checked',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-checkbox-label-before]': 'labelPosition == \"before\"'\n    },\n    providers: [MC_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCheckbox extends _McCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex {\n\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     */\n    @Input('aria-label') ariaLabel: string = '';\n\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n    private _uniqueId: string = `mc-checkbox-${++nextUniqueId}`;\n\n    /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n    @Input() id: string = this._uniqueId;\n\n    /** Returns the unique id for the visual hidden input. */\n    get inputId(): string {\n        return `${this.id || this._uniqueId}-input`;\n    }\n\n    /** Whether the checkbox is required. */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    private _required: boolean;\n\n    /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n    @Input() labelPosition: 'before' | 'after' = 'after';\n\n    /** Name value will be applied to the input element if present */\n    @Input() name: string | null = null;\n\n    /** Event emitted when the checkbox's `checked` value changes. */\n    @Output() readonly change: EventEmitter<McCheckboxChange> =\n        new EventEmitter<McCheckboxChange>();\n\n    /** Event emitted when the checkbox's `indeterminate` value changes. */\n    @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** The value attribute of the native input element */\n    @Input() value: string;\n\n    /** The native `<input type=\"checkbox\">` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * @docs-private\n     */\n    _onTouched: () => any = () => {\n    }\n\n    private _currentAnimationClass: string = '';\n\n    private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n    private _controlValueAccessorChangeFn: (value: any) => void = () => {\n    }\n\n    constructor(elementRef: ElementRef,\n                private _changeDetectorRef: ChangeDetectorRef,\n                private _focusMonitor: FocusMonitor,\n                @Attribute('tabindex') tabIndex: string,\n                @Optional() @Inject(MC_CHECKBOX_CLICK_ACTION)\n                private _clickAction: McCheckboxClickAction) {\n        super(elementRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._inputElement.nativeElement)\n            .subscribe((focusOrigin) => this._onInputFocusChange(focusOrigin));\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    }\n\n    /**\n     * Whether the checkbox is checked.\n     */\n    @Input()\n    get checked(): boolean {\n        return this._checked;\n    }\n\n    set checked(value: boolean) {\n        if (value != this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _checked: boolean = false;\n\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value != this.disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    @Input()\n    get indeterminate(): boolean {\n        return this._indeterminate;\n    }\n\n    set indeterminate(value: boolean) {\n        const changed = value != this._indeterminate;\n        this._indeterminate = value;\n\n        if (changed) {\n            if (this._indeterminate) {\n                this._transitionCheckState(TransitionCheckState.Indeterminate);\n            } else {\n                this._transitionCheckState(\n                    this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n    }\n\n    private _indeterminate: boolean = false;\n\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // This method is getting called whenever the label of the checkbox changes.\n        // Since the checkbox uses the OnPush strategy we need to notify it about the change\n        // that has been recognized by the cdkObserveContent directive.\n        this._changeDetectorRef.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any) {\n        this.checked = !!value;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this._onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n    }\n\n    _getAriaChecked(): 'true' | 'false' | 'mixed' {\n        return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n    }\n\n    private _transitionCheckState(newState: TransitionCheckState) {\n        const oldState = this._currentCheckState;\n        const element: HTMLElement = this._elementRef.nativeElement;\n\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n\n        this._currentCheckState = newState;\n\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n        }\n    }\n\n    private _emitChangeEvent() {\n        const event = new McCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    }\n\n    /** Function is called whenever the focus changes for the input element. */\n    private _onInputFocusChange(focusOrigin: FocusOrigin) {\n        if (focusOrigin) {\n            this._onTouched();\n        }\n    }\n\n    /** Toggles the `checked` state of the checkbox. */\n    toggle(): void {\n        this.checked = !this.checked;\n    }\n\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event\n     */\n    _onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && this._clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && this._clickAction !== 'check') {\n\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n\n            this.toggle();\n            this._transitionCheckState(\n                this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        } else if (!this.disabled && this._clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mc-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n\n    /** Focuses the checkbox. */\n    focus(): void {\n        this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n    }\n\n    _onInteractionEvent(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n}\n","import {\n    Directive,\n    forwardRef,\n    Provider\n} from '@angular/core';\nimport {\n    CheckboxRequiredValidator,\n    NG_VALIDATORS\n} from '@angular/forms';\n\n\nexport const MC_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McCheckboxRequiredValidator),\n    multi: true\n};\n\n/**\n * Validator for Mosaic checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mc-checkbox`.\n */\n@Directive({\n    selector: `mc-checkbox[required][formControlName],\n             mc-checkbox[required][formControl], mc-checkbox[required][ngModel]`,\n    providers: [MC_CHECKBOX_REQUIRED_VALIDATOR],\n    host: { '[attr.required]': 'required ? \"\" : null' }\n})\nexport class McCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McCheckbox } from './checkbox';\nimport { McCheckboxRequiredValidator } from './checkbox-required-validator';\n\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [McCheckbox, McCheckboxRequiredValidator],\n    declarations: [McCheckbox, McCheckboxRequiredValidator]\n})\nexport class McCheckboxModule {\n}\n","import { InjectionToken } from '@angular/core';\n\n\nexport const MC_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{ value: any }>('MC_INPUT_VALUE_ACCESSOR');\n","function sanitizeNumber(value: number): number | null {\n    return !isFinite(value) || isNaN(value)\n        ? null\n        : value;\n}\n\nfunction getPrecision(value: number): number {\n    const arr = value.toString().split('.');\n\n    return arr.length === 1\n        ? 1\n        // tslint:disable-next-line:no-magic-numbers\n        :  Math.pow(10, arr[1].length);\n}\n\nfunction add(value1: number, value2: number) {\n    const precision = Math.max(getPrecision(value1), getPrecision(value2));\n\n    const res = (value1 * precision + value2 * precision) / precision;\n\n    return sanitizeNumber(res);\n}\n\nexport const stepUp = (value: number | null,\n                       max: number,\n                       min: number,\n                       step: number\n): number | null => {\n    let res;\n\n    if (value === null) {\n        res = add(min, step);\n\n        return res === null ? null : Math.min(res, max);\n    }\n\n    res = add(value, step);\n\n    return res === null ? null : Math.max(Math.min(res, max), min);\n};\n\nexport const stepDown = (value: number | null,\n                         max: number,\n                         min: number,\n                         step: number\n): number | null => {\n    let res;\n\n    if (value === null) {\n        res = add(max, -step);\n\n        return res === null ? null : Math.max(res, min);\n    }\n\n    res = add(value, -step);\n\n    return res === null ? null : Math.min(Math.max(res, min), max);\n};\n","import {\n    Attribute,\n    Directive, DoCheck, ElementRef, Inject, Input, OnChanges,\n    OnDestroy, Optional, Self\n} from '@angular/core';\nimport {\n    FormGroupDirective,\n    NgControl,\n    NgForm, NgModel\n} from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport {\n    END, C, V, X, A, DELETE, BACKSPACE, TAB, ENTER,\n    ESCAPE, ZERO, NINE, NUMPAD_ZERO, NUMPAD_NINE, NUMPAD_MINUS, DASH,\n    FF_MINUS, LEFT_ARROW, RIGHT_ARROW, HOME, UP_ARROW, DOWN_ARROW, F1, F12\n} from '@ptsecurity/cdk/keycodes';\nimport { getSupportedInputTypes, Platform } from '@ptsecurity/cdk/platform';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl, McFormFieldNumberControl } from '@ptsecurity/mosaic/form-field';\nimport { Subject } from 'rxjs';\n\nimport { getMcInputUnsupportedTypeError } from './input-errors';\nimport { MC_INPUT_VALUE_ACCESSOR } from './input-value-accessor';\nimport { stepDown, stepUp } from './stepperUtils';\n\n\nconst MC_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\n\nexport const BIG_STEP = 10;\nexport const SMALL_STEP = 1;\n\nlet nextUniqueId = 0;\n\nexport class McInputBase {\n    constructor(public defaultErrorStateMatcher: ErrorStateMatcher,\n                public parentForm: NgForm,\n                public parentFormGroup: FormGroupDirective,\n                public ngControl: NgControl) {\n    }\n}\n\nexport const _McInputMixinBase: CanUpdateErrorStateCtor & typeof McInputBase = mixinErrorState(McInputBase);\n\n\n@Directive({\n    selector: `input[mcInput][type=\"number\"]`,\n    exportAs: 'mcNumericalInput',\n    providers: [NgModel, { provide: McFormFieldNumberControl, useExisting: McNumberInput }],\n    host: {\n        '(blur)': '_focusChanged(false)',\n        '(focus)': '_focusChanged(true)',\n        '(paste)': 'onPaste($event)',\n        '(keydown)': 'onKeyDown($event)'\n    }\n})\nexport class McNumberInput implements McFormFieldNumberControl<any> {\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    @Input()\n    bigStep: number;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    @Input()\n    step: number;\n\n    @Input()\n    min: number;\n\n    @Input()\n    max: number;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    value: any;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    private readonly _host: HTMLInputElement;\n\n    constructor(\n        private _platform: Platform ,\n        private _elementRef: ElementRef,\n        private _model: NgModel,\n        @Attribute('step') step: string,\n        @Attribute('big-step') bigStep: string,\n        @Attribute('min') min: string,\n        @Attribute('max') max: string\n    ) {\n        this.step = this.isDigit(step) ? parseFloat(step) : SMALL_STEP;\n        this.bigStep = this.isDigit(bigStep) ? parseFloat(bigStep) : BIG_STEP;\n        this.min = this.isDigit(min) ? parseFloat(min) : -Infinity;\n        this.max = this.isDigit(max) ? parseFloat(max) : Infinity;\n\n        this._host = this._elementRef.nativeElement;\n\n        const self = this;\n\n        if ('valueAsNumber' in this._host) {\n            Object.defineProperty(Object.getPrototypeOf(this._host), 'valueAsNumber', {\n                // tslint:disable-next-line:no-reserved-keywords\n                get() {\n                    const res = parseFloat(self.normalizeSplitter(this.value));\n\n                    return isNaN(res) ? null : res;\n                }\n            });\n        }\n    }\n\n    _focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent) {\n        // tslint:disable-next-line:deprecation\n        const keyCode = event.keyCode;\n\n        const isCtrlA = (e) => e.keyCode === A && (e.ctrlKey || e.metaKey);\n        const isCtrlC = (e) => e.keyCode === C && (e.ctrlKey || e.metaKey);\n        const isCtrlV = (e) => e.keyCode === V && (e.ctrlKey || e.metaKey);\n        const isCtrlX = (e) => e.keyCode === X && (e.ctrlKey || e.metaKey);\n\n        const isFKey = (e) => e.keyCode >= F1 && e.keyCode <= F12;\n\n        const isNumber = (e) => (e.keyCode >= ZERO && e.keyCode <= NINE) ||\n            (e.keyCode >= NUMPAD_ZERO && e.keyCode <= NUMPAD_NINE);\n\n        const minuses = [NUMPAD_MINUS, DASH, FF_MINUS];\n        const serviceKeys = [DELETE, BACKSPACE, TAB, ESCAPE, ENTER];\n        const arrows = [LEFT_ARROW, RIGHT_ARROW];\n        const allowedKeys =  [HOME, END].concat(arrows).concat(serviceKeys).concat(minuses);\n\n        const isIEPeriod = (e) => e.key === '.' || e.key === 'Decimal';\n        const isNotIEPeriod = (e) => e.key === '.' || e.key === ',';\n\n        // Decimal is for IE\n        const isPeriod = (e) => this._platform.EDGE || this._platform.TRIDENT\n            ? isIEPeriod(e)\n            : isNotIEPeriod(e);\n\n        if (allowedKeys.indexOf(keyCode) !== -1 ||\n            isCtrlA(event) ||\n            isCtrlC(event) ||\n            isCtrlV(event) ||\n            isCtrlX(event) ||\n            isFKey(event) ||\n            isPeriod(event)\n        ) {\n            // let it happen, don't do anything\n            return;\n        }\n        // Ensure that it is not a number and stop the keypress\n        if (event.shiftKey || !isNumber(event)) {\n            event.preventDefault();\n\n            // process steps\n            const step = event.shiftKey ? this.bigStep : this.step;\n\n            if (keyCode === UP_ARROW) {\n                this.stepUp(step);\n            }\n\n            if (keyCode === DOWN_ARROW) {\n                this.stepDown(step);\n            }\n        }\n    }\n\n    onPaste(event) {\n        let value = event.clipboardData.getData('text');\n        value = this.normalizeSplitter(value);\n\n        if (!this.isDigit(value)) {\n            event.preventDefault();\n        }\n    }\n\n    stepUp(step: number) {\n        this._elementRef.nativeElement.focus();\n        const res = stepUp(this._host.valueAsNumber, this.max, this.min, step);\n        this._host.value = res === null ? '' : res.toString();\n        this._model.update.emit(this._host.valueAsNumber);\n    }\n\n    stepDown(step: number) {\n        this._elementRef.nativeElement.focus();\n        const res = stepDown(this._host.valueAsNumber, this.max, this.min, step);\n        this._host.value = res === null ? '' : res.toString();\n        this._model.update.emit(this._host.valueAsNumber);\n    }\n\n    private normalizeSplitter(value: string): string {\n        return value ? value.replace(/,/g, '.') : value;\n    }\n\n    private isDigit(value: string): boolean {\n        return this.isFloat(value) || this.isInt(value);\n    }\n\n    private isFloat(value: string): boolean {\n        return /^-?\\d+\\.\\d+$/.test(value);\n    }\n\n    private isInt(value: string): boolean {\n        return /^-?\\d+$/.test(value);\n    }\n}\n\n@Directive({\n    selector: `input[mcInput]`,\n    exportAs: 'mcInput',\n    host: {\n        class: 'mc-input',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '(blur)': '_focusChanged(false)',\n        '(focus)': '_focusChanged(true)',\n        '(input)': '_onInput()'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McInput }]\n})\nexport class McInput extends _McInputMixinBase implements McFormFieldControl<any>, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-input';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this._uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    // tslint:disable no-reserved-keywords\n    /** Input type of the element. */\n    @Input()\n    get type(): string {\n        return this._type;\n    }\n\n    set type(value: string) {\n        this._type = value || 'text';\n        this._validateType();\n\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    // tslint:enable no-reserved-keywords\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this._inputValueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n\n    protected _uid = `mc-input-${nextUniqueId++}`;\n    protected _previousNativeValue: any;\n    protected _disabled = false;\n    protected _id: string;\n    protected _required = false;\n    protected _type = 'text';\n    protected _neverEmptyInputTypes = [\n        'date',\n        'datetime',\n        'datetime-local',\n        'month',\n        'time',\n        'week'\n    ].filter((t) => getSupportedInputTypes().has(t));\n\n    private _inputValueAccessor: { value: any };\n\n    constructor(protected _elementRef: ElementRef,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() parentForm: NgForm,\n                @Optional() parentFormGroup: FormGroupDirective,\n                defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_INPUT_VALUE_ACCESSOR) inputValueAccessor: any) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n        this._previousNativeValue = this.value;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n    }\n\n    /** Focuses the input. */\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Does some manual dirty checking on the native input `value` property. */\n    protected _dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Make sure the input is a supported type. */\n    protected _validateType() {\n        if (MC_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n            throw getMcInputUnsupportedTypeError(this._type);\n        }\n    }\n\n    /** Checks whether the input type is one of the types that are never empty. */\n    protected _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n\n    /** Checks whether the input is invalid based on the native validation. */\n    protected _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        const validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n\n        return validity && validity.badInput;\n    }\n}\n\n@Directive({\n    selector: 'input[mcInputMonospace]',\n    exportAs: 'McInputMonospace',\n    host: { class: 'mc-input_monospace' }\n})\nexport class McInputMono {\n}\n","import { Directive, forwardRef, Input, OnChanges, Provider, SimpleChanges } from '@angular/core';\nimport { AbstractControl, NG_VALIDATORS, ValidationErrors, Validator, ValidatorFn, Validators } from '@angular/forms';\n\n\nexport const MIN_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MinValidator),\n    multi: true\n};\n\n/**\n * A directive which installs the {@link MinValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `min` attribute.\n *\n * @experimental\n */\n@Directive({\n    selector: '[min][formControlName],[min][formControl],[min][ngModel]',\n    providers: [MIN_VALIDATOR],\n    host: {'[attr.min]': 'min ? min : null'}\n})\nexport class MinValidator implements Validator, OnChanges {\n\n    @Input() min: string;\n    private _validator: ValidatorFn;\n    private _onChange: () => void;\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('min' in changes) {\n            this._createValidator();\n            if (this._onChange) { this._onChange(); }\n        }\n    }\n\n    validate(c: AbstractControl): ValidationErrors | null { return this._validator(c); }\n\n    registerOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n\n    private _createValidator(): void { this._validator = Validators.min(parseInt(this.min, 10)); }\n}\n\n\nexport const MAX_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MaxValidator),\n    multi: true\n};\n\n/**\n * A directive which installs the {@link MaxValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `min` attribute.\n *\n * @experimental\n */\n@Directive({\n    selector: '[max][formControlName],[max][formControl],[max][ngModel]',\n    providers: [MAX_VALIDATOR],\n    host: {\n        '[attr.max]': 'max ? max : null'\n    }\n})\nexport class MaxValidator implements Validator,\n    OnChanges {\n\n    @Input() max: string;\n    private _validator: ValidatorFn;\n    private _onChange: () => void;\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('max' in changes) {\n            this._createValidator();\n            if (this._onChange) { this._onChange(); }\n        }\n    }\n\n    validate(c: AbstractControl): ValidationErrors | null { return this._validator(c); }\n\n    registerOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n\n    private _createValidator(): void { this._validator = Validators.max(parseInt(this.max, 10)); }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McInput, McInputMono, McNumberInput } from './input';\nimport { MaxValidator, MinValidator } from './input-number-validators';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule, FormsModule],\n    exports: [McInput, McNumberInput, McInputMono, MinValidator, MaxValidator],\n    declarations: [McInput, McNumberInput, McInputMono, MinValidator, MaxValidator ]\n})\nexport class McInputModule {\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({ providedIn: 'root' })\nexport class McDatepickerIntl {\n    /**\n     * Stream that emits whenever the labels here are changed. Use this to notify\n     * components if the labels have changed after initialization.\n     */\n    readonly changes: Subject<void> = new Subject<void>();\n\n    /** A label for the calendar popup (used by screen readers). */\n    calendarLabel: string = 'Calendar';\n\n    /** A label for the button used to open the calendar popup (used by screen readers). */\n    openCalendarLabel: string = 'Open calendar';\n\n    /** A label for the previous month button (used by screen readers). */\n    prevMonthLabel: string = 'Previous month';\n\n    /** A label for the next month button (used by screen readers). */\n    nextMonthLabel: string = 'Next month';\n\n    /** A label for the previous year button (used by screen readers). */\n    prevYearLabel: string = 'Previous year';\n\n    /** A label for the next year button (used by screen readers). */\n    nextYearLabel: string = 'Next year';\n\n    /** A label for the previous multi-year button (used by screen readers). */\n    prevMultiYearLabel: string = 'Previous 20 years';\n\n    /** A label for the next multi-year button (used by screen readers). */\n    nextMultiYearLabel: string = 'Next 20 years';\n\n    /** A label for the 'switch to month view' button (used by screen readers). */\n    switchToMonthViewLabel: string = 'Choose date';\n\n    /** A label for the 'switch to year view' button (used by screen readers). */\n    switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","// tslint:disable:no-magic-numbers\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    Output,\n    ViewEncapsulation,\n    NgZone,\n    OnChanges,\n    SimpleChanges\n} from '@angular/core';\nimport { take } from 'rxjs/operators';\n\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type McCalendarCellCssClasses = string | string[] | Set<string> | { [key: string]: any };\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class McCalendarCell {\n    constructor(\n        public value: number,\n        public displayValue: string,\n        public ariaLabel: string,\n        public enabled: boolean,\n        public cssClasses?: McCalendarCellCssClasses\n    ) {\n    }\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n    selector: '[mc-calendar-body]',\n    templateUrl: 'calendar-body.html',\n    styleUrls: ['calendar-body.css'],\n    host: {\n        class: 'mc-calendar__body',\n        role: 'grid',\n        'aria-readonly': 'true'\n    },\n    exportAs: 'mcCalendarBody',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCalendarBody implements OnChanges {\n    /** The label for the table. (e.g. \"Jan 2017\"). */\n    @Input() label: string;\n\n    /** The cells to display in the table. */\n    @Input() rows: McCalendarCell[][];\n\n    /** The value in the table that corresponds to today. */\n    @Input() todayValue: number;\n\n    /** The value in the table that is currently selected. */\n    @Input() selectedValue: number;\n\n    /** The minimum number of free cells needed to fit the label in the first row. */\n    @Input() labelMinRequiredCells: number;\n\n    /** The number of columns in the table. */\n    @Input() numCols = 7;\n\n    /** The cell number of the active cell in the table. */\n    @Input() activeCell = 0;\n\n    /**\n     * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n     * maintained even as the table resizes.\n     */\n    @Input() cellAspectRatio = 1;\n\n    /** Emits when a new value is selected. */\n    @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n    /** The number of blank cells to put at the beginning for the first row. */\n    firstRowOffset: number;\n\n    /** Padding for the individual date cells. */\n    cellPadding: string;\n\n    /** Width of an individual cell. */\n    cellWidth: string;\n\n    constructor(private elementRef: ElementRef<HTMLElement>, private ngZone: NgZone) {\n    }\n\n    cellClicked(cell: McCalendarCell): void {\n        if (cell.enabled) {\n            this.selectedValueChange.emit(cell.value);\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const columnChanges = changes.numCols;\n        // tslint:disable-next-line:no-this-assignment\n        const { rows, numCols } = this;\n\n        if (changes.rows || columnChanges) {\n            this.firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n        }\n\n        if (changes.cellAspectRatio || columnChanges || !this.cellPadding) {\n            this.cellPadding = `${this.cellAspectRatio * 50 / numCols}%`;\n        }\n\n        if (columnChanges || !this.cellWidth) {\n            this.cellWidth = `${100 / numCols}%`;\n        }\n    }\n\n    isActiveCell(rowIndex: number, colIndex: number): boolean {\n        let cellNumber = rowIndex * this.numCols + colIndex;\n\n        // Account for the fact that the first row may not have as many cells.\n        if (rowIndex) {\n            cellNumber -= this.firstRowOffset;\n        }\n\n        return cellNumber === this.activeCell;\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.ngZone.runOutsideAngular(() => {\n            this.ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n                const activeCell: HTMLElement | null =\n                    this.elementRef.nativeElement.querySelector('.mc-calendar__body_active');\n\n                if (activeCell) {\n                    activeCell.focus();\n                }\n            });\n        });\n    }\n}\n","// tslint:disable:no-magic-numbers\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Inject,\n    Input,\n    Optional,\n    Output,\n    ViewEncapsulation,\n    ViewChild\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    PAGE_DOWN,\n    PAGE_UP,\n    RIGHT_ARROW,\n    UP_ARROW,\n    SPACE\n} from '@ptsecurity/cdk/keycodes';\n\nimport { McCalendarBody, McCalendarCell, McCalendarCellCssClasses } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-month-view',\n    templateUrl: 'month-view.html',\n    exportAs: 'mcMonthView',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McMonthView<D> implements AfterContentInit {\n    /**\n     * The date to display in this month view (everything other than the month and year is ignored).\n     */\n    @Input()\n    get activeDate(): D {\n        return this._activeDate;\n    }\n\n    set activeDate(value: D) {\n        const oldActiveDate = this._activeDate;\n        const validDate =\n            this.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();\n        this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n        if (!this.hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n            this.init();\n        }\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.selectedDate = this.getDateInCurrentMonth(this._selected);\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** Function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Function that can be used to add custom CSS classes to dates. */\n    @Input() dateClass: (date: D) => McCalendarCellCssClasses;\n\n    /** Emits when a new date is selected. */\n    @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n    /** Emits when any date is selected. */\n    @Output() readonly userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Emits when any date is activated. */\n    @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** The body of calendar table */\n    @ViewChild(McCalendarBody) mcCalendarBody: McCalendarBody;\n\n    /** The label for this month (e.g. \"January 2017\"). */\n    monthLabel: string;\n\n    /** Grid of calendar cells representing the dates of the month. */\n    weeks: McCalendarCell[][];\n\n    /** The number of blank cells in the first row before the 1st of the month. */\n    firstWeekOffset: number;\n\n    /**\n     * The date of the month that the currently selected Date falls on.\n     * Null if the currently selected Date is in another month.\n     */\n    selectedDate: number | null;\n\n    /** The date of the month that today falls on. Null if today is in another month. */\n    todayDate: number | null;\n\n    /** The names of the weekdays. */\n    weekdays: { long: string; narrow: string }[];\n    private _activeDate: D;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() private dir?: Directionality\n    ) {\n\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        const firstDayOfWeek = this.dateAdapter.getFirstDayOfWeek();\n        const narrowWeekdays = this.dateAdapter.getDayOfWeekNames('narrow');\n        const longWeekdays = this.dateAdapter.getDayOfWeekNames('long');\n\n        // Rotate the labels for days of the week based on the configured first day of the week.\n        const weekdays = longWeekdays.map((long, i) => {\n            return { long, narrow: narrowWeekdays[i] };\n        });\n        this.weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n        this._activeDate = this.dateAdapter.today();\n    }\n\n    ngAfterContentInit() {\n        this.init();\n    }\n\n    /** Handles when a new date is selected. */\n    dateSelected(date: number) {\n        if (this.selectedDate !== date) {\n            const selectedYear = this.dateAdapter.getYear(this.activeDate);\n            const selectedMonth = this.dateAdapter.getMonth(this.activeDate);\n            const selectedDate = this.dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n            this.selectedChange.emit(selectedDate);\n        }\n\n        this.userSelection.emit();\n    }\n\n    /** Handles keydown events on the calendar body when calendar is in month view. */\n    handleCalendarBodyKeydown(event: KeyboardEvent): void {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n        const oldActiveDate = this._activeDate;\n        const isRtl = this.isRtl();\n\n        // tslint:disable-next-line:deprecation\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, -7);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, 7);\n                break;\n            case HOME:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate,\n                    1 - this.dateAdapter.getDate(this._activeDate));\n                break;\n            case END:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate,\n                    (this.dateAdapter.getNumDaysInMonth(this._activeDate) -\n                        this.dateAdapter.getDate(this._activeDate)));\n                break;\n            case PAGE_UP:\n                this.activeDate = event.altKey ?\n                    this.dateAdapter.addCalendarYears(this._activeDate, -1) :\n                    this.dateAdapter.addCalendarMonths(this._activeDate, -1);\n                break;\n            case PAGE_DOWN:\n                this.activeDate = event.altKey ?\n                    this.dateAdapter.addCalendarYears(this._activeDate, 1) :\n                    this.dateAdapter.addCalendarMonths(this._activeDate, 1);\n                break;\n            case ENTER:\n            case SPACE:\n                if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n                    this.dateSelected(this.dateAdapter.getDate(this._activeDate));\n                    this.userSelection.emit();\n                    // Prevent unexpected default actions such as form submission.\n                    event.preventDefault();\n                }\n\n                return;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n\n        if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n\n        this.focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n\n    /** Initializes this month view. */\n    init() {\n        this.selectedDate = this.getDateInCurrentMonth(this.selected);\n        this.todayDate = this.getDateInCurrentMonth(this.dateAdapter.today());\n        this.monthLabel =\n            this.dateAdapter.getMonthNames('short')[this.dateAdapter.getMonth(this.activeDate)];\n\n        this.monthLabel = this.monthLabel[0].toLocaleUpperCase() + this.monthLabel.substr(1);\n\n        const firstOfMonth = this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate),\n            this.dateAdapter.getMonth(this.activeDate), 1);\n        this.firstWeekOffset =\n            (DAYS_PER_WEEK + this.dateAdapter.getDayOfWeek(firstOfMonth) -\n                this.dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n        this.createWeekCells();\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.mcCalendarBody.focusActiveCell();\n    }\n\n    /** Creates McCalendarCells for the dates in this month. */\n    private createWeekCells() {\n        const daysInMonth = this.dateAdapter.getNumDaysInMonth(this.activeDate);\n        const dateNames = this.dateAdapter.getDateNames();\n\n        this.weeks = [[]];\n\n        for (let i = 0, cell = this.firstWeekOffset; i < daysInMonth; i++, cell++) {\n            if (cell === DAYS_PER_WEEK) {\n                this.weeks.push([]);\n                cell = 0;\n            }\n            const date = this.dateAdapter.createDate(\n                this.dateAdapter.getYear(this.activeDate),\n                this.dateAdapter.getMonth(this.activeDate), i + 1);\n            const enabled = this.shouldEnableDate(date);\n            const ariaLabel = this.dateAdapter.format(date, this.dateFormats.display.dateA11yLabel);\n            const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n            this.weeks[this.weeks.length - 1]\n                .push(new McCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n        }\n    }\n\n    /** Date filter for the month */\n    private shouldEnableDate(date: D): boolean {\n        return !!date &&\n            (!this.dateFilter || this.dateFilter(date)) &&\n            (!this.minDate || this.dateAdapter.compareDate(date, this.minDate) >= 0) &&\n            (!this.maxDate || this.dateAdapter.compareDate(date, this.maxDate) <= 0);\n    }\n\n    /**\n     * Gets the date in this month that the given Date falls on.\n     * Returns null if the given Date is in another month.\n     */\n    private getDateInCurrentMonth(date: D | null): number | null {\n        return date && this.hasSameMonthAndYear(date, this.activeDate) ?\n            this.dateAdapter.getDate(date) : null;\n    }\n\n    /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n    private hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n        return !!(d1 && d2 && this.dateAdapter.getMonth(d1) === this.dateAdapter.getMonth(d2) &&\n            this.dateAdapter.getYear(d1) === this.dateAdapter.getYear(d2));\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Determines whether the user has the RTL layout direction. */\n    private isRtl() {\n        return this.dir && this.dir.value === 'rtl';\n    }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ActiveDescendantKeyManager } from '@ptsecurity/cdk/a11y';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { MC_OPTION_PARENT_COMPONENT, McOptgroup, McOption } from '@ptsecurity/mosaic/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet uniqueAutocompleteIdCounter = 0;\n\nexport class McAutocompleteSelectedEvent {\n    constructor(public source: McAutocomplete, public option: McOption) {}\n}\n\n/** Default `mc-autocomplete` options that can be overridden. */\n// tslint:disable-next-line naming-convention\nexport interface McAutocompleteDefaultOptions {\n    /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n    autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mc-autocomplete`. */\nexport const MC_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<McAutocompleteDefaultOptions>('mc-autocomplete-default-options', {\n        providedIn: 'root',\n        factory: MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY\n    });\n\n// tslint:disable-next-line naming-convention\nexport function MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): McAutocompleteDefaultOptions {\n    return { autoActiveFirstOption: true };\n}\n\n@Component({\n    selector: 'mc-autocomplete',\n    exportAs: 'mcAutocomplete',\n    templateUrl: 'autocomplete.html',\n    styleUrls: ['autocomplete.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: { class: 'mc-autocomplete' },\n    providers: [\n        { provide: MC_OPTION_PARENT_COMPONENT, useExisting: McAutocomplete }\n    ]\n})\nexport class McAutocomplete implements AfterContentInit {\n    /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n    id: string = `mc-autocomplete-${uniqueAutocompleteIdCounter++}`;\n\n    /** Manages active item in option list based on key events. */\n    keyManager: ActiveDescendantKeyManager<McOption>;\n\n    /** Whether the autocomplete panel should be visible, depending on option length. */\n    showPanel: boolean = false;\n\n    @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n    @ViewChild('panel') panel: ElementRef;\n\n    @ContentChildren(McOption, { descendants: true }) options: QueryList<McOption>;\n\n    @ContentChildren(McOptgroup) optionGroups: QueryList<McOptgroup>;\n\n    /** Function that maps an option's control value to its display value in the trigger. */\n    @Input() displayWith: ((value: any) => string) | null = null;\n\n    /**\n     * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n     * match the width of its host.\n     */\n    @Input() panelWidth: string | number;\n\n    /** Event that is emitted whenever an option from the list is selected. */\n    @Output() readonly optionSelected: EventEmitter<McAutocompleteSelectedEvent> =\n        new EventEmitter<McAutocompleteSelectedEvent>();\n\n    /** Event that is emitted when the autocomplete panel is opened. */\n    @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Event that is emitted when the autocomplete panel is closed. */\n    @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n    /**\n     * Takes classes set on the host mc-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    get classList() {\n        return this._classList;\n    }\n\n    @Input('class')\n    set classList(value: string) {\n        if (value && value.length) {\n            value.split(' ')\n                .forEach((className) => this._classList[className.trim()] = true);\n\n            this.elementRef.nativeElement.className = '';\n        }\n    }\n\n    private _classList: any = {};\n\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MC_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     */\n    @Input()\n    get autoActiveFirstOption(): boolean {\n        return this._autoActiveFirstOption;\n    }\n\n    set autoActiveFirstOption(value: boolean) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n\n    private _autoActiveFirstOption: boolean;\n\n    get isOpen(): boolean {\n        return this._isOpen && this.showPanel;\n    }\n\n    set isOpen(value: boolean) {\n        this._isOpen = value;\n    }\n\n    private _isOpen: boolean = false;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        private elementRef: ElementRef<HTMLElement>,\n        @Inject(MC_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: McAutocompleteDefaultOptions\n    ) {\n        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    }\n\n    ngAfterContentInit() {\n        this.keyManager = new ActiveDescendantKeyManager<McOption>(this.options);\n        this.setVisibility();\n    }\n\n    setScrollTop(scrollTop: number): void {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n\n    getScrollTop(): number {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n\n    setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._classList['mc-autocomplete_visible'] = this.showPanel;\n        this._classList['mc-autocomplete_hidden'] = !this.showPanel;\n\n        this.changeDetectorRef.markForCheck();\n    }\n\n    emitSelectEvent(option: McOption): void {\n        const event = new McAutocompleteSelectedEvent(this, option);\n\n        this.optionSelected.emit(event);\n    }\n\n    onKeydown(event: KeyboardEvent): any {\n        this.keyManager.onKeydown(event);\n    }\n}\n\n","import { Directive, ElementRef } from '@angular/core';\n\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n    selector: '[mcAutocompleteOrigin]',\n    exportAs: 'mcAutocompleteOrigin'\n})\nexport class McAutocompleteOrigin {\n    constructor(public elementRef: ElementRef<HTMLElement>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { McOptionModule, McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McAutocompleteOrigin } from './autocomplete-origin.directive';\nimport {\n    McAutocompleteTrigger,\n    MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './autocomplete-trigger.directive';\nimport { McAutocomplete } from './autocomplete.component';\n\n\n@NgModule({\n    imports: [McOptionModule, OverlayModule, McCommonModule, CommonModule],\n    exports: [\n        McAutocomplete,\n        McOptionModule,\n        McAutocompleteTrigger,\n        McAutocompleteOrigin,\n        McCommonModule\n    ],\n    declarations: [McAutocomplete, McAutocompleteTrigger, McAutocompleteOrigin],\n    providers: [MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class McAutocompleteModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    OnDestroy,\n    ViewEncapsulation\n} from '@angular/core';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { mixinColor, mixinDisabled, CanColor, CanDisable, CanDisableCtor, CanColorCtor } from '@ptsecurity/mosaic/core';\n\n\n@Directive({\n    selector: 'button[mc-button], a[mc-button]',\n    host: {\n        '[class.mc-button]': '!isIconButton',\n        '[class.mc-icon-button]': 'isIconButton'\n    }\n})\nexport class McButtonCssStyler {\n    nativeElement: Element;\n\n    get isIconButton(): boolean {\n        return this.icons.length > 0;\n    }\n\n    private icons: HTMLElement[] = [];\n\n    constructor(elementRef: ElementRef) {\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        /**\n         * Here we had to use native selectors due to number of angular issues about ContentChildren limitations\n         * https://github.com/angular/angular/issues/16299\n         * https://github.com/angular/angular/issues/8563\n         * https://github.com/angular/angular/issues/14769\n         */\n        this.icons = Array.from(this.nativeElement.querySelectorAll('.mc-icon'));\n        this.addClassModificatorForIcons();\n    }\n\n    private addClassModificatorForIcons() {\n        const twoIcons = 2;\n\n        if (this.icons.length === 1) {\n            const iconElement = this.icons[0];\n            const COMMENT_NODE = 8;\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling && iconElement.nextSibling.nodeType !== COMMENT_NODE) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-icon-button_left');\n                }\n\n                if (iconElement.previousSibling && iconElement.previousSibling.nodeType !== COMMENT_NODE) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-icon-button_right');\n                }\n            }\n        } else if (this.icons.length === twoIcons) {\n            const firstIconElement = this.icons[0];\n            const secondIconElement = this.icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n}\n\nexport class McButtonBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {}\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McButtonMixinBase:\n    CanDisableCtor &\n    CanColorCtor &\n    typeof McButtonBase =\n        mixinColor(mixinDisabled(McButtonBase));\n\n\n@Component({\n    selector: 'button[mc-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[disabled]': 'disabled || null'\n    }\n})\nexport class McButton extends McButtonMixinBase implements OnDestroy, CanDisable, CanColor {\n    constructor(elementRef: ElementRef, private _focusMonitor: FocusMonitor) {\n        super(elementRef);\n\n        this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this.getHostElement().focus();\n    }\n\n    getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n\n\n@Component({\n    selector: 'a[mc-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[attr.tabindex]': 'disabled ? -1 : 0',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': 'haltDisabledEvents($event)'\n    }\n})\nexport class McAnchor extends McButton {\n    constructor(focusMonitor: FocusMonitor, elementRef: ElementRef) {\n        super(elementRef, focusMonitor);\n    }\n\n    haltDisabledEvents(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McButton,\n    McAnchor,\n    McButtonCssStyler\n} from './button.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McButton,\n        McAnchor,\n        McButtonCssStyler\n    ],\n    declarations: [\n        McButton,\n        McAnchor,\n        McButtonCssStyler\n    ]\n})\nexport class McButtonModule {}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    ViewEncapsulation,\n    ViewChild\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { McButton } from '@ptsecurity/mosaic/button';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/**\n * Provider Expression that allows mc-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McButtonToggleGroup),\n    multi: true\n};\n\n/** Change event object emitted by MсButtonToggle. */\nexport class McButtonToggleChange {\n    constructor(\n        /** The MсButtonToggle that emits the event. */\n        public source: McButtonToggle,\n        /** The value assigned to the MсButtonToggle. */\n        public value: any) {\n    }\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n    selector: 'mc-button-toggle-group',\n    providers: [MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n    host: {\n        role: 'group',\n        class: 'mc-button-toggle-group',\n        '[class.mc-button-toggle-vertical]': 'vertical'\n    },\n    exportAs: 'mcButtonToggleGroup'\n})\nexport class McButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n\n    /** Whether the toggle group is vertical. */\n    @Input()\n    get vertical(): boolean {\n        return this._vertical;\n    }\n\n    set vertical(value: boolean) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n\n    /** Value of the toggle group. */\n    @Input()\n    get value(): any {\n        const selected = this.selectionModel ? this.selectionModel.selected : [];\n\n        if (this.multiple) {\n            return selected.map((toggle) => toggle.value);\n        }\n\n        return selected[0] ? selected[0].value : undefined;\n    }\n\n    set value(newValue: any) {\n        this.setSelectionByValue(newValue);\n        this.valueChange.emit(this.value);\n    }\n\n    /** Selected button toggles in the group. */\n    get selected(): any {\n        const selected = this.selectionModel.selected;\n\n        return this.multiple ? selected : (selected[0] || null);\n    }\n\n    /** Whether multiple button toggles can be selected. */\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    /** Child button toggle buttons. */\n    @ContentChildren(forwardRef(() => McButtonToggle)) buttonToggles: QueryList<McButtonToggle>;\n\n    /** Whether multiple button toggle group is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        if (!this.buttonToggles) {\n            return;\n        }\n\n        this.buttonToggles.forEach((toggle) => toggle.markForCheck());\n    }\n\n    /**\n     * Event that emits whenever the value of the group changes.\n     * Used to facilitate two-way data binding.\n     * @docs-private\n     */\n    @Output() readonly valueChange = new EventEmitter<any>();\n\n    /** Event emitted when the group's value changes. */\n    @Output() readonly change: EventEmitter<McButtonToggleChange> =\n        new EventEmitter<McButtonToggleChange>();\n    private _vertical = false;\n    private _multiple = false;\n    private _disabled = false;\n    private selectionModel: SelectionModel<McButtonToggle>;\n\n    /**\n     * Reference to the raw value that the consumer tried to assign. The real\n     * value will exclude any values from this one that don't correspond to a\n     * toggle. Useful for the cases where the value is assigned before the toggles\n     * have been initialized or at the same that they're being swapped out.\n     */\n    private rawValue: any;\n\n    constructor(private _changeDetector: ChangeDetectorRef) {}\n\n    /**\n     * The method to be called in order to update ngModel.\n     * Now `ngModel` binding is not supported in multiple selection mode.\n     */\n    // tslint:disable-next-line:no-empty\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n    // tslint:disable-next-line:no-empty\n    onTouched: () => any = () => {};\n\n    ngOnInit() {\n        this.selectionModel = new SelectionModel<McButtonToggle>(this.multiple, undefined, false);\n    }\n\n    ngAfterContentInit() {\n        this.selectionModel.select(...this.buttonToggles.filter((toggle) => toggle.checked));\n        this.disabled = this._disabled;\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value Value to be set to the model.\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        const selected = this.selected;\n        const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n        const event = new McButtonToggleChange(source, this.value);\n        this.controlValueAccessorChangeFn(event.value);\n        this.change.emit(event);\n    }\n\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param toggle Toggle to be synced.\n     * @param select Whether the toggle should be selected.\n     * @param isUserInput Whether the change was a result of a user interaction.\n     */\n    syncButtonToggle(toggle: McButtonToggle, select: boolean, isUserInput = false) {\n        // Deselect the currently-selected toggle, if we're in single-selection\n        // mode and the button being toggled isn't selected at the moment.\n        if (!this.multiple && this.selected && !toggle.checked) {\n            (this.selected as McButtonToggle).checked = false;\n        }\n\n        if (select) {\n            this.selectionModel.select(toggle);\n        } else {\n            this.selectionModel.deselect(toggle);\n        }\n\n        // Only emit the change event for user input.\n        if (isUserInput) {\n            this.emitChangeEvent();\n        }\n\n        // Note: we emit this one no matter whether it was a user interaction, because\n        // it is used by Angular to sync up the two-way data binding.\n        this.valueChange.emit(this.value);\n    }\n\n    /** Checks whether a button toggle is selected. */\n    isSelected(toggle: McButtonToggle) {\n        return this.selectionModel.isSelected(toggle);\n    }\n\n    /** Determines whether a button toggle should be checked on init. */\n    isPrechecked(toggle: McButtonToggle) {\n        if (this.rawValue === undefined) {\n            return false;\n        }\n\n        if (this.multiple && Array.isArray(this.rawValue)) {\n            return this.rawValue.some((value) => toggle.value != null && value === toggle.value);\n        }\n\n        return toggle.value === this.rawValue;\n    }\n\n    /** Updates the selection state of the toggles in the group based on a value. */\n    private setSelectionByValue(value: any | any[]) {\n        this.rawValue = value;\n\n        if (!this.buttonToggles) {\n            return;\n        }\n\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw Error('Value must be an array in multiple-selection mode.');\n            }\n\n            this.clearSelection();\n            value.forEach((currentValue: any) => this.selectValue(currentValue));\n        } else {\n            this.clearSelection();\n            this.selectValue(value);\n        }\n    }\n\n    /** Clears the selected toggles. */\n    private clearSelection() {\n        this.selectionModel.clear();\n        this.buttonToggles.forEach((toggle) => toggle.checked = false);\n    }\n\n    /** Selects a value if there's a toggle that corresponds to it. */\n    private selectValue(value: any) {\n        const correspondingOption = this.buttonToggles.find((toggle) => {\n            return toggle.value != null && toggle.value === value;\n        });\n\n        if (correspondingOption) {\n            correspondingOption.checked = true;\n            this.selectionModel.select(correspondingOption);\n        }\n    }\n}\n\n/** Single button inside of a toggle group. */\n@Component({\n    selector: 'mc-button-toggle',\n    template: `\n        <button\n            mc-button\n            type=\"button\"\n            [disabled]=\"disabled\"\n            [attr.tabindex]=\"disabled ? -1 : tabIndex\"\n            (click)=\"onToggleClick()\">\n            <ng-content></ng-content>\n        </button>\n    `,\n    styleUrls: ['button-toggle.css'],\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcButtonToggle',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[class.mc-button-toggle-standalone]': '!buttonToggleGroup',\n        '[class.mc-button-toggle-checked]': 'checked',\n        class: 'mc-button-toggle',\n        // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n        // but can still receive focus from things like cdkFocusInitial.\n        '[attr.tabindex]': '-1',\n        '[attr.disabled]': 'disabled || null',\n        '(focus)': 'focus()'\n    }\n})\nexport class McButtonToggle implements OnInit, OnDestroy {\n\n    /** Whether the button is checked. */\n    @Input()\n    get checked(): boolean {\n        return this.buttonToggleGroup ? this.buttonToggleGroup.isSelected(this) : this._checked;\n    }\n\n    set checked(value: boolean) {\n        const newValue = coerceBooleanProperty(value);\n\n        if (newValue !== this._checked) {\n            this._checked = newValue;\n\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup.syncButtonToggle(this, this._checked);\n            }\n\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    // tslint:disable-next-line:no-reserved-keywords\n    type: ToggleType;\n\n    @ViewChild(McButton) mcButton: McButton;\n\n    /** McButtonToggleGroup reads this to assign its own value. */\n    @Input() value: any;\n\n    /** Tabindex for the toggle. */\n    @Input() tabIndex: number | null;\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n    }\n    set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n\n    /** Event emitted when the group value changes. */\n    @Output() readonly change: EventEmitter<McButtonToggleChange> =\n        new EventEmitter<McButtonToggleChange>();\n\n    private isSingleSelector = false;\n    private _checked = false;\n    private _disabled: boolean = false;\n\n    constructor(\n        @Optional() public buttonToggleGroup: McButtonToggleGroup,\n        private changeDetectorRef: ChangeDetectorRef,\n        private focusMonitor: FocusMonitor,\n        private element: ElementRef\n    ) {}\n\n    ngOnInit() {\n        this.isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n        this.type = this.isSingleSelector ? 'radio' : 'checkbox';\n\n        if (this.buttonToggleGroup && this.buttonToggleGroup.isPrechecked(this)) {\n            this.checked = true;\n        }\n\n        this.focusMonitor.monitor(this.element.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        const group = this.buttonToggleGroup;\n\n        this.focusMonitor.stopMonitoring(this.element.nativeElement);\n\n        // Remove the toggle from the selection once it's destroyed. Needs to happen\n        // on the next tick in order to avoid \"changed after checked\" errors.\n        if (group && group.isSelected(this)) {\n            Promise.resolve().then(() => group.syncButtonToggle(this, false));\n        }\n    }\n\n    /** Focuses the button. */\n    focus(): void {\n        this.element.nativeElement.focus();\n    }\n\n    /** Checks the button toggle due to an interaction with the underlying native button. */\n    onToggleClick() {\n        if (this.disabled) {\n            return;\n        }\n\n        const newChecked = this.isSingleSelector ? true : !this._checked;\n\n        if (newChecked !== this._checked) {\n            this._checked = newChecked;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup.syncButtonToggle(this, this._checked, true);\n                this.buttonToggleGroup.onTouched();\n            }\n        }\n        // Emit a change event when it's the single selector\n        this.change.emit(new McButtonToggleChange(this, this.value));\n    }\n\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When the group value changes, the button will not be notified.\n        // Use `markForCheck` to explicit update button toggle's status.\n        this.changeDetectorRef.markForCheck();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { McButtonModule } from '@ptsecurity/mosaic/button';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McButtonToggle, McButtonToggleGroup } from './button-toggle.component';\n\n\n@NgModule({\n    imports: [McCommonModule, McButtonModule],\n    exports: [McCommonModule, McButtonToggleGroup, McButtonToggle],\n    declarations: [McButtonToggleGroup, McButtonToggle]\n})\nexport class McButtonToggleModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","\nexport function isBoolean(val: any): val is boolean { return typeof val === 'boolean'; }\n\nexport function toBoolean(value: any): boolean {\n    return value != null && `${value}` !== 'false';\n}\n","import { NgModule, InjectionToken, Optional, Inject, isDevMode } from '@angular/core';\nimport { BidiModule } from '@ptsecurity/cdk/bidi';\n\n\n// Injection token that configures whether the Mosaic sanity checks are enabled.\nexport const MC_SANITY_CHECKS = new InjectionToken<boolean>('mc-sanity-checks', {\n    providedIn: 'root',\n    factory: MC_SANITY_CHECKS_FACTORY\n});\n\nexport function MC_SANITY_CHECKS_FACTORY(): boolean {\n    return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Mosaic\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., McTabsModule).\n */\n@NgModule({\n    imports: [ BidiModule ],\n    exports: [ BidiModule ]\n})\nexport class McCommonModule {\n    // Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n    private _hasDoneGlobalChecks = false;\n\n    // Reference to the global `document` object.\n    private _document = typeof document === 'object' && document ? document : null;\n\n    // Reference to the global 'window' object.\n    private _window = typeof window === 'object' && window ? window : null;\n\n    constructor(@Optional() @Inject(MC_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n        if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n            this._checkDoctypeIsDefined();\n            this._checkThemeIsPresent();\n            this._hasDoneGlobalChecks = true;\n        }\n    }\n\n    // Whether any sanity checks are enabled\n    private _areChecksEnabled(): boolean {\n        return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n    }\n\n    // Whether the code is running in tests.\n    private _isTestEnv() {\n        // tslint:disable-next-line\n        return this._window && (this._window['__karma__'] || this._window['jasmine']);\n    }\n\n    private _checkDoctypeIsDefined(): void {\n        if (this._document && !this._document.doctype) {\n            console.warn(\n                'Current document does not have a doctype. This may cause ' +\n                'some Mosaic components not to behave as expected.'\n            );\n        }\n    }\n\n    private _checkThemeIsPresent(): void {\n        if (this._document && typeof getComputedStyle === 'function') {\n            const testElement = this._document.createElement('div');\n\n            testElement.classList.add('mc-theme-loaded-marker');\n            this._document.body.appendChild(testElement);\n\n            const computedStyle = getComputedStyle(testElement);\n\n            // In some situations, the computed style of the test element can be null. For example in\n            // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n            // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n            if (computedStyle && computedStyle.display !== 'none') {\n                console.warn(\n                    'Could not find Mosaic core theme. Most Mosaic ' +\n                    'components may not work as expected. For more info refer ' +\n                    'to the theming guide: link there'\n                );\n            }\n\n            this._document.body.removeChild(testElement);\n        }\n    }\n}\n","import { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanDisable {\n    disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n    return class extends base {\n        get disabled() {\n            return this._disabled;\n        }\n\n        set disabled(value: any) {\n            this._disabled = coerceBooleanProperty(value);\n        }\n\n        private _disabled: boolean = false;\n\n        constructor(...args: any[]) {\n            // tslint:disable-next-line\n            super(...args);\n        }\n    };\n}\n","import { ElementRef } from '@angular/core';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanColor {\n    color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\nexport interface HasElementRef {\n    _elementRef: ElementRef;\n}\n\nexport enum ThemePalette {\n    Primary = 'primary',\n    Second = 'second',\n    Error = 'error',\n    Default = 'second',\n    Empty = ''\n}\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T,\n    defaultColor: ThemePalette = ThemePalette.Default\n): CanColorCtor & T {\n    return class extends base {\n\n        private _color: ThemePalette;\n\n        get color(): ThemePalette {\n            return this._color;\n        }\n\n        set color(value: ThemePalette) {\n            const colorPalette = value || defaultColor;\n\n            if (colorPalette !== this._color) {\n                if (this._color) {\n                    this._elementRef.nativeElement.classList.remove(`mc-${this._color}`);\n                }\n\n                if (colorPalette) {\n                    this._elementRef.nativeElement.classList.add(`mc-${colorPalette}`);\n                }\n\n                this._color = colorPalette;\n            }\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n\n            this.color = defaultColor;\n        }\n    };\n}\n\n","import { Constructor } from './constructor';\nimport { CanDisable } from './disabled';\n\n\nexport interface HasTabIndex {\n    tabIndex: number;\n}\n\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n// Mixin to augment a directive with a `tabIndex` property.\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0): HasTabIndexCtor & T {\n    return class extends base {\n        get tabIndex(): number {\n            return this.disabled ? -1 : this._tabIndex;\n        }\n\n        set tabIndex(value: number) {\n            this._tabIndex = value != null ? value : defaultTabIndex;\n        }\n\n        private _tabIndex: number = defaultTabIndex;\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n    };\n}\n","import { FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { Subject } from 'rxjs';\n\nimport { ErrorStateMatcher } from '../error/error-options';\n\nimport { Constructor } from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n\n    readonly stateChanges: Subject<void>;\n\n    errorState: boolean;\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState();\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n    parentFormGroup: FormGroupDirective;\n    parentForm: NgForm;\n    defaultErrorStateMatcher: ErrorStateMatcher;\n    ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T): CanUpdateErrorStateCtor & T {\n    return class extends base {\n        /** Whether the component is in an error state. */\n        errorState: boolean = false;\n\n        /**\n         * Stream that emits whenever the state of the input changes such that the wrapping\n         * `MatFormField` needs to run change detection.\n         */\n        readonly stateChanges = new Subject<void>();\n\n        errorStateMatcher: ErrorStateMatcher;\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n\n        updateErrorState() {\n            const oldState = this.errorState;\n            const parent = this.parentFormGroup || this.parentForm;\n            const matcher = this.errorStateMatcher || this.defaultErrorStateMatcher;\n            const control = this.ngControl ? this.ngControl.control as FormControl : null;\n            const newState = matcher.isErrorState(control, parent);\n\n            if (newState !== oldState) {\n                this.errorState = newState;\n                this.stateChanges.next();\n            }\n        }\n    };\n}\n","import {\n    AfterViewChecked,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { ENTER, SPACE } from '@ptsecurity/cdk/keycodes';\nimport { Subject } from 'rxjs';\n\nimport { McOptgroup } from './optgroup';\n\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet uniqueIdCounter = 0;\n\n/** Event object emitted by McOption when selected or deselected. */\nexport class McOptionSelectionChange {\n    constructor(public source: McOption, public isUserInput = false) {}\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\n// tslint:disable-next-line: naming-convention\nexport interface McOptionParentComponent {\n    multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MC_OPTION_PARENT_COMPONENT =\n    new InjectionToken<McOptionParentComponent>('MC_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mc-select>` element.\n */\n@Component({\n    selector: 'mc-option',\n    exportAs: 'mcOption',\n    host: {\n        '[attr.tabindex]': 'getTabIndex()',\n        class: 'mc-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-option-multiple]': 'multiple',\n        '[class.mc-active]': 'active',\n        '[class.mc-disabled]': 'disabled',\n        '[id]': 'id',\n\n        '(click)': 'selectViaInteraction()',\n        '(keydown)': 'handleKeydown($event)'\n    },\n    styleUrls: ['./option.css'],\n    templateUrl: './option.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McOption implements AfterViewChecked, OnDestroy {\n    /** The form value of the option. */\n    @Input() value: any;\n\n    /** Event emitted when the option is selected or deselected. */\n    // tslint:disable-next-line:no-output-on-prefix\n    @Output() readonly onSelectionChange = new EventEmitter<McOptionSelectionChange>();\n\n    /** Emits when the state of the option changes and any parents have to be notified. */\n    readonly stateChanges = new Subject<void>();\n\n    /**\n     * The displayed value of the option. It is necessary to show the selected option in the\n     * select's trigger.\n     */\n    get viewValue(): string {\n        // TODO(kara): Add input property alternative for node envs.\n        return (this.getHostElement().textContent || '').trim();\n    }\n\n    /** Whether the wrapping component is in multiple selection mode. */\n    get multiple() {\n        return this.parent && this.parent.multiple;\n    }\n\n    get id(): string {\n        return this._id;\n    }\n\n    private _id = `mc-option-${uniqueIdCounter++}`;\n\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    private _selected = false;\n\n    @Input()\n    get disabled() {\n        return (this.group && this.group.disabled) || this._disabled;\n    }\n\n    set disabled(value: any) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    private _disabled = false;\n\n    /**\n     * Whether or not the option is currently active and ready to be selected.\n     * An active option displays styles as if it is focused, but the\n     * focus is actually retained somewhere else. This comes in handy\n     * for components like autocomplete where focus must remain on the input.\n     */\n    get active(): boolean {\n        return this._active;\n    }\n\n    private _active = false;\n\n    private mostRecentViewValue = '';\n\n    constructor(\n        private readonly element: ElementRef,\n        private readonly changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_OPTION_PARENT_COMPONENT) private readonly parent: McOptionParentComponent,\n        @Optional() readonly group: McOptgroup\n    ) {}\n\n    ngAfterViewChecked() {\n        // Since parent components could be using the option's label to display the selected values\n        // (e.g. `mc-select`) and they don't have a way of knowing if the option's label has changed\n        // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n        // relatively cheap, however we still limit them only to selected options in order to avoid\n        // hitting the DOM too often.\n        if (this._selected) {\n            const viewValue = this.viewValue;\n\n            if (viewValue !== this.mostRecentViewValue) {\n                this.mostRecentViewValue = viewValue;\n                this.stateChanges.next();\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n    }\n\n    select(): void {\n        if (!this._selected) {\n            this._selected = true;\n\n            this.changeDetectorRef.markForCheck();\n            this.emitSelectionChangeEvent();\n        }\n    }\n\n    deselect(): void {\n        if (this._selected) {\n            this._selected = false;\n\n            this.changeDetectorRef.markForCheck();\n            this.emitSelectionChangeEvent();\n        }\n    }\n\n    focus(): void {\n        const element = this.getHostElement();\n\n        if (typeof element.focus === 'function') {\n            element.focus();\n        }\n    }\n\n    /**\n     * This method sets display styles on the option to make it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setActiveStyles(): void {\n        if (!this._active) {\n            this._active = true;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    /**\n     * This method removes display styles on the option that made it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setInactiveStyles(): void {\n        if (this._active) {\n            this._active = false;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel(): string {\n        return this.viewValue;\n    }\n\n    /** Ensures the option is selected when activated from the keyboard. */\n    handleKeydown(event: KeyboardEvent): void {\n        // tslint:disable-next-line\n        if (event.keyCode === ENTER || event.keyCode === SPACE) {\n            this.selectViaInteraction();\n\n            // Prevent the page from scrolling down and form submits.\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * `Selects the option while indicating the selection came from the user. Used to\n     * determine if the select's view -> model callback should be invoked.`\n     */\n    selectViaInteraction(): void {\n        if (!this.disabled) {\n            this._selected = this.multiple ? !this._selected : true;\n\n            this.changeDetectorRef.markForCheck();\n            this.emitSelectionChangeEvent(true);\n        }\n    }\n\n    getTabIndex(): string {\n        return this.disabled ? '-1' : '0';\n    }\n\n    getHostElement(): HTMLElement {\n        return this.element.nativeElement;\n    }\n\n    /** Emits the selection change event. */\n    private emitSelectionChangeEvent(isUserInput = false): void {\n        this.onSelectionChange.emit(new McOptionSelectionChange(this, isUserInput));\n    }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function countGroupLabelsBeforeOption(\n    optionIndex: number,\n    options: QueryList<McOption>,\n    optionGroups: QueryList<McOptgroup>\n): number {\n\n    if (optionGroups.length) {\n        const optionsArray = options.toArray();\n        const groups = optionGroups.toArray();\n\n        let groupCounter = 0;\n\n        for (let i = 0; i < optionIndex + 1; i++) {\n            if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n                groupCounter++;\n            }\n        }\n\n        return groupCounter;\n    }\n\n    return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function getOptionScrollPosition(\n    optionIndex: number,\n    optionHeight: number,\n    currentScrollPosition: number,\n    panelHeight: number\n): number {\n    const optionOffset = optionIndex * optionHeight;\n\n    if (optionOffset < currentScrollPosition) { return optionOffset; }\n\n    if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n        return Math.max(0, optionOffset - panelHeight + optionHeight);\n    }\n\n    return currentScrollPosition;\n}\n\n","import { ConnectionPositionPair } from '@ptsecurity/cdk/overlay';\n\n\nexport const POSITION_MAP: { [key: string]: ConnectionPositionPair } = {\n    top         : {\n        originX : 'center',\n        originY : 'top',\n        overlayX: 'center',\n        overlayY: 'bottom'\n    },\n    topCenter   : {\n        originX : 'center',\n        originY : 'top',\n        overlayX: 'center',\n        overlayY: 'bottom'\n    },\n    topLeft     : {\n        originX : 'start',\n        originY : 'top',\n        overlayX: 'start',\n        overlayY: 'bottom'\n    },\n    topRight    : {\n        originX : 'end',\n        originY : 'top',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    },\n    right       : {\n        originX : 'end',\n        originY : 'center',\n        overlayX: 'start',\n        overlayY: 'center'\n    },\n    rightTop    : {\n        originX : 'end',\n        originY : 'top',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    rightBottom : {\n        originX : 'end',\n        originY : 'bottom',\n        overlayX: 'start',\n        overlayY: 'bottom'\n    },\n    bottom      : {\n        originX : 'center',\n        originY : 'bottom',\n        overlayX: 'center',\n        overlayY: 'top'\n    },\n    bottomCenter: {\n        originX : 'center',\n        originY : 'bottom',\n        overlayX: 'center',\n        overlayY: 'top'\n    },\n    bottomLeft  : {\n        originX : 'start',\n        originY : 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    bottomRight : {\n        originX : 'end',\n        originY : 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n    },\n    left        : {\n        originX : 'start',\n        originY : 'center',\n        overlayX: 'end',\n        overlayY: 'center'\n    },\n    leftTop     : {\n        originX : 'start',\n        originY : 'top',\n        overlayX: 'end',\n        overlayY: 'top'\n    },\n    leftBottom  : {\n        originX : 'start',\n        originY : 'bottom',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    }\n};\n\nexport const DEFAULT_4_POSITIONS = objectValues([\n    POSITION_MAP.top, POSITION_MAP.right, POSITION_MAP.bottom, POSITION_MAP.left\n]);\n\nexport const EXTENDED_OVERLAY_POSITIONS = objectValues([\n    POSITION_MAP.top, POSITION_MAP.topLeft, POSITION_MAP.topRight, POSITION_MAP.right, POSITION_MAP.rightTop,\n    POSITION_MAP.rightBottom, POSITION_MAP.bottom, POSITION_MAP.bottomLeft, POSITION_MAP.bottomRight,\n    POSITION_MAP.left, POSITION_MAP.leftTop, POSITION_MAP.leftBottom\n]);\n\nexport const POSITION_TO_CSS_MAP: {[key: string]: string} = {\n    top: 'top',\n    topLeft: 'top-left',\n    topRight: 'top-right',\n    right: 'right',\n    rightTop: 'right-top',\n    rightBottom: 'right-bottom',\n    left: 'left',\n    leftTop: 'left-top',\n    leftBottom: 'left-bottom',\n    bottom: 'bottom',\n    bottomLeft: 'bottom-left',\n    bottomRight: 'bottom-right'\n};\n\nfunction arrayMap<T, S>(array: T[], iteratee: (item: T, index: number, arr: T[]) => S): S[] {\n    let index = -1;\n    const length = array == null ? 0 : array.length;\n    const result = Array(length);\n\n    while (++index < length) {\n        result[ index ] = iteratee(array[ index ], index, array);\n    }\n\n    return result;\n}\nfunction baseValues<T>(object: { [key: string]: T } | T[], props: string[]): T[] {\n    return arrayMap(props,  (key) => {\n        return object[ key ];\n    });\n}\nfunction objectValues<T>(object: { [key: string]: T } | T[]): T[] {\n    return object == null ? [] : baseValues(object, Object.keys(object));\n}\n","/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMcSelectDynamicMultipleError(): Error {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMcSelectNonArrayValueError(): Error {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMcSelectNonFunctionValueError(): Error {\n    return Error('`compareWith` must be a function.');\n}\n","export function getMcFormFieldMissingControlError(): Error {\n  return Error('mc-form-field must contain a McFormFieldControl.');\n}\n","export function getMcInputUnsupportedTypeError(inputType: string): Error {\n    return Error(`Input type \"${inputType}\" isn't supported by mcInput.`);\n}\n","/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n    return Error(\n        `McDatepicker: No provider found for ${provider}. You must import one of the existing ` +\n        `modules at your application root or provide a custom implementation or use exists ones.`);\n}\n","/**\n * Throws an exception for the case when dropdown trigger doesn't have a valid mc-dropdown instance\n * @docs-private\n */\nexport function throwMcDropdownMissingError() {\n    throw Error(`mcDropdownTriggerFor: must pass in an mc-dropdown instance.\n    Example:\n      <mc-dropdown #dropdown=\"mcDropdown\"></mc-dropdown>\n      <button [mcDropdownTriggerFor]=\"dropdown\"></button>`);\n}\n\n/**\n * Throws an exception for the case when dropdown's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMcDropdownInvalidPositionX() {\n    throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mc-dropdown xPosition=\"before\" #dropdown=\"mcDropdown\"></mc-dropdown>`);\n}\n\n/**\n * Throws an exception for the case when dropdown's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMcDropdownInvalidPositionY() {\n    throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mc-dropdown yPosition=\"above\" #dropdown=\"mcDropdown\"></mc-dropdown>`);\n}\n","import { animate, AnimationTriggerMetadata, style, transition, trigger, state } from '@angular/animations';\n\n\nexport function toggleVerticalNavbarAnimation(): AnimationTriggerMetadata {\n    return trigger('toggle', [\n        state('0', style({\n            width: '64px'\n        })),\n        state('1',  style({\n            width: '*'\n        })),\n        transition('0 <=> 1', animate('200ms cubic-bezier(0, 1, 0.5, 1)'))\n    ]);\n}\n","import { NgModule, Directive, ElementRef, QueryList } from '@angular/core';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(McLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n    selector: '[mc-line], [mcLine]',\n    host: { class: 'mc-line' }\n})\nexport class McLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class McLineSetter {\n    constructor(private _lines: QueryList<McLine>, private _element: ElementRef) {\n        this._setLineClass(this._lines.length);\n\n        this._lines.changes.subscribe(() => {\n            this._setLineClass(this._lines.length);\n        });\n    }\n\n    private _setLineClass(count: number): void {\n        this._resetClasses();\n        if (count === 2 || count === 3) {\n            this._setClass(`mc-${count}-line`, true);\n        } else if (count > 3) {\n            this._setClass(`mc-multi-line`, true);\n        }\n    }\n\n    private _resetClasses(): void {\n        this._setClass('mc-2-line', false);\n        this._setClass('mc-3-line', false);\n        this._setClass('mc-multi-line', false);\n    }\n\n    private _setClass(className: string, isAdd: boolean): void {\n        if (isAdd) {\n            this._element.nativeElement.classList.add(className);\n        } else {\n            this._element.nativeElement.classList.remove(className);\n        }\n    }\n}\n\n@NgModule({\n    imports: [],\n    exports: [McLine],\n    declarations: [McLine]\n})\nexport class McLineModule {}\n","import { Injectable } from '@angular/core';\nimport { FormGroupDirective, NgForm, FormControl } from '@angular/forms';\n\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n    }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({ providedIn: 'root' })\nexport class ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n    }\n}\n","import { Component, ViewEncapsulation, Input, ChangeDetectionStrategy } from '@angular/core';\n\n\nexport type McPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mc-primary .mc-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mc-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'mc-pseudo-checkbox',\n    styleUrls: ['pseudo-checkbox.css'],\n    templateUrl: 'pseudo-checkbox.partial.html',\n    host: {\n        class: 'mc-pseudo-checkbox',\n        '[class.mc-indeterminate]': 'state === \"indeterminate\"',\n        '[class.mc-checked]': 'state === \"checked\"',\n        '[class.mc-disabled]': 'disabled'\n    }\n})\nexport class McPseudoCheckbox {\n    @Input() state: McPseudoCheckboxState = 'unchecked';\n\n    @Input() disabled: boolean = false;\n}\n","import { NgModule } from '@angular/core';\n\nimport { McPseudoCheckbox } from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n    exports: [McPseudoCheckbox],\n    declarations: [McPseudoCheckbox]\n})\nexport class McPseudoCheckboxModule {}\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class McMeasureScrollbarService {\n\n    get scrollBarWidth(): number {\n        if (this._scrollbarWidth) {\n            return this._scrollbarWidth;\n        }\n        this.initScrollBarWidth();\n\n        return this._scrollbarWidth;\n    }\n\n    private _scrollbarWidth: number;\n    private scrollbarMeasure = {\n        position: 'absolute',\n        top: '-9999px',\n        width: '50px',\n        height: '50px',\n        overflow: 'scroll'\n    };\n\n    constructor(\n        @Inject(DOCUMENT) private document: any\n    ) {\n        this.initScrollBarWidth();\n    }\n\n    initScrollBarWidth() {\n        const scrollDiv = this.document.createElement('div');\n\n        // tslint:disable-next-line\n        for (const scrollProp in this.scrollbarMeasure) {\n            if (this.scrollbarMeasure.hasOwnProperty(scrollProp)) {\n                scrollDiv.style[scrollProp] = this.scrollbarMeasure[scrollProp];\n            }\n        }\n\n        this.document.body.appendChild(scrollDiv);\n\n        const width = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n\n        this.document.body.removeChild(scrollDiv);\n        this._scrollbarWidth = width;\n    }\n}\n","import { Component, ViewEncapsulation, Input, ChangeDetectionStrategy } from '@angular/core';\n\nimport { mixinDisabled, CanDisable, CanDisableCtor } from '../common-behaviors/index';\n\n\n// Boilerplate for applying mixins to McOptgroup.\n/** @docs-private */\nexport class McOptgroupBase {}\n\nexport const McOptgroupMixinBase: CanDisableCtor & typeof McOptgroupBase = mixinDisabled(McOptgroupBase);\n\n// Counter for unique group ids.\nlet uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mc-option`.\n */\n@Component({\n    selector: 'mc-optgroup',\n    exportAs: 'mcOptgroup',\n    templateUrl: 'optgroup.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['disabled'],\n    styleUrls: ['optgroup.css'],\n    host: {\n        class: 'mc-optgroup',\n        role: 'group',\n        '[class.mc-optgroup-disabled]': 'disabled',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-labelledby]': 'labelId'\n    }\n})\nexport class McOptgroup extends McOptgroupMixinBase implements CanDisable {\n    /** Label for the option group. */\n    @Input() label: string;\n\n    /** Unique id for the underlying label. */\n    labelId: string = `mc-optgroup-label-${uniqueOptgroupIdCounter++}`;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McPseudoCheckboxModule } from '../selection/index';\n\nimport { McOptgroup } from './optgroup';\nimport { McOption } from './option';\n\n\n@NgModule({\n    imports: [CommonModule, McPseudoCheckboxModule],\n    exports: [McOption, McOptgroup],\n    declarations: [McOption, McOptgroup]\n})\nexport class McOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","import { InjectionToken } from '@angular/core';\n\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MC_LABEL_GLOBAL_OPTIONS =\n    new InjectionToken<LabelOptions>('mc-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n    /**\n     * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n     * Default behavior is assumed to be `auto`.\n     */\n    float?: FloatLabelType;\n}\n","import {\n    animate,\n    state,\n    style,\n    transition,\n    trigger,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n\nexport const fadeAnimation: AnimationTriggerMetadata =  trigger('fadeAnimation', [\n    state('void', style({ opacity: 0 })),\n    state('true', style({ opacity: 1 })),\n    state('false', style({ opacity: 0 })),\n    transition('* => true', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => void', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)'))\n]);\n","export enum AnimationCurves {\n    StandardCurve = 'cubic-bezier(0.4,0.0,0.2,1)',\n    DecelerationCurve = 'cubic-bezier(0.0,0.0,0.2,1)',\n    AccelerationCurve = 'cubic-bezier(0.4,0.0,1,1)',\n    SharpCurve = 'cubic-bezier(0.4,0.0,0.6,1)'\n}\n","import {\n    animate,\n    AnimationTriggerMetadata,\n    state,\n    style,\n    transition,\n    trigger,\n    query,\n    animateChild,\n    group\n} from '@angular/animations';\n\n\n/**\n * The following are all the animations for the mc-select component, with each\n * const containing the metadata for one animation.\n *\n */\nexport const mcSelectAnimations: {\n    readonly transformPanel: AnimationTriggerMetadata;\n    readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0)',\n            minWidth: '100%',\n            opacity: 0\n        })),\n        transition('void => *', group([\n            query('@fadeInContent', animateChild()),\n            animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n        ])),\n        transition('* => void', [\n            animate('250ms 100ms linear', style({ opacity: 0 }))\n        ])\n    ]),\n\n    /**\n     * This animation fades in the background color and text content of the\n     * select's options. It is time delayed to occur 100ms after the overlay\n     * panel has transformed in.\n     */\n    fadeInContent: trigger('fadeInContent', [\n        state('showing', style({ opacity: 1 })),\n        transition('void => showing', [\n            style({ opacity: 0 }),\n            animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformPanel = mcSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInContent = mcSelectAnimations.fadeInContent;\n","import {\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { mixinColor, CanColor, CanColorCtor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\n@Directive({\n    selector: '[mc-icon]',\n    host: { class: 'mc mc-icon' }\n})\nexport class McIconCSSStyler {}\n\n\nexport class McIconBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McIconMixinBase: CanColorCtor & typeof McIconBase = mixinColor(McIconBase, ThemePalette.Empty);\n\n\n@Component({\n    selector: `[mc-icon]`,\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./icon.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['color']\n})\nexport class McIcon extends _McIconMixinBase implements CanColor {\n    constructor(elementRef: ElementRef, @Attribute('mc-icon') iconName: string) {\n        super(elementRef);\n\n        elementRef.nativeElement.classList.add(iconName);\n    }\n\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McIcon,\n    McIconCSSStyler\n} from './icon.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McIcon,\n        McIconCSSStyler\n    ],\n    declarations: [\n        McIcon,\n        McIconCSSStyler\n    ]\n})\nexport class McIconModule {}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-cleaner',\n    template: '<i class=\"mc-icon_light\" mc-icon=\"mc-close-M_16\" color=\"second\"></i>'\n})\nexport class McCleaner {}\n","import { NgControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\n\n/** An interface which allows a control to work inside of a `MсFormField`. */\nexport abstract class McFormFieldControl<T> {\n    /** The value of the control. */\n    value: T | null;\n\n    /**\n     * Stream that emits whenever the state of the control changes such that the parent `MсFormField`\n     * needs to run change detection.\n     */\n    readonly stateChanges: Observable<void>;\n\n    /** The element ID for this control. */\n    readonly id: string;\n\n    /** The placeholder for this control. */\n    readonly placeholder: string;\n\n    /** Gets the NgControl for this control. */\n    readonly ngControl: NgControl | null;\n\n    /** Whether the control is focused. */\n    readonly focused: boolean;\n\n    /** Whether the control is empty. */\n    readonly empty: boolean;\n\n    /** Whether the control is required. */\n    readonly required: boolean;\n\n    /** Whether the control is disabled. */\n    readonly disabled: boolean;\n\n    /** Whether the control is in an error state. */\n    readonly errorState: boolean;\n\n    /**\n     * An optional name for the control type that can be used to distinguish `mc-form-field` elements\n     * based on their control type. The form field will add a class,\n     * `mc-form-field-type-{{controlType}}` to its root element.\n     */\n    readonly controlType?: string;\n\n    /** Handles a click on the control's container. */\n    abstract onContainerClick(event: MouseEvent): void;\n}\n","import { Observable } from 'rxjs';\n\n\n/** An interface which allows a control to work inside of a `MсFormField`. */\nexport abstract class McFormFieldNumberControl<T> {\n    /** The value of the control. */\n    value: T | null;\n\n    /**\n     * Stream that emits whenever the state of the control changes such that the parent `MсFormField`\n     * needs to run change detection.\n     */\n    readonly stateChanges: Observable<void>;\n\n    /** the number step */\n    step: number;\n\n    /** the number big step */\n    bigStep: number;\n\n    /** Whether the control is focused. */\n    readonly focused: boolean;\n\n    /** Handles step up and down */\n    abstract stepUp(step: number): void;\n\n    abstract stepDown(step: number): void;\n}\n","import { Directive, Input } from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n@Directive({\n    selector: 'mc-hint',\n    host: {\n        class: 'mc-hint',\n        '[attr.id]': 'id'\n    }\n})\nexport class McHint {\n    @Input() id: string = `mc-hint-${nextUniqueId++}`;\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcPrefix]'\n})\nexport class McPrefix {\n}\n","import { Component, EventEmitter, Output } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-stepper',\n    template: `\n        <i class=\"mc mc-icon mc-icon_light mc-second mc-stepper-step-up mc-angle-down-L_16\"\n           (mousedown)=\"onStepUp($event)\">\n        </i>\n        <i class=\"mc mc-icon mc-icon_light mc-second mc-stepper-step-down mc-angle-down-L_16\"\n           (mousedown)=\"onStepDown($event)\">\n        </i>\n    `\n})\nexport class McStepper {\n    @Output()\n    readonly stepUp: EventEmitter<void> = new EventEmitter<void>();\n    @Output()\n    readonly stepDown: EventEmitter<void> = new EventEmitter<void>();\n\n    onStepUp($event: MouseEvent) {\n        this.stepUp.emit();\n        $event.preventDefault();\n    }\n\n    onStepDown($event: MouseEvent) {\n        this.stepDown.emit();\n        $event.preventDefault();\n    }\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcSuffix]'\n})\nexport class McSuffix {\n}\n","import {\n    AfterContentChecked,\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren, Directive,\n    ElementRef,\n    QueryList, ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { CanColor, CanColorCtor, mixinColor } from '@ptsecurity/mosaic/core';\nimport { EMPTY, merge } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n\n\nimport { McCleaner } from './cleaner';\nimport { McFormFieldControl } from './form-field-control';\nimport { getMcFormFieldMissingControlError } from './form-field-errors';\nimport { McFormFieldNumberControl } from './form-field-number-control';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McStepper } from './stepper';\nimport { McSuffix } from './suffix';\n\n\nlet nextUniqueId = 0;\n\nexport class McFormFieldBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McFormFieldMixinBase: CanColorCtor & typeof McFormFieldBase = mixinColor(McFormFieldBase);\n\n@Component({\n    selector: 'mc-form-field',\n    exportAs: 'mcFormField',\n    templateUrl: 'form-field.html',\n    // McInput is a directive and can't have styles, so we need to include its styles here.\n    // The McInput styles are fairly minimal so it shouldn't be a big deal for people who\n    // aren't using McInput.\n    styleUrls: [\n        'form-field.css',\n        '../input/input.css',\n        '../textarea/textarea.css'\n    ],\n    host: {\n        class: 'mc-form-field',\n        '[class.mc-form-field_invalid]': '_control.errorState',\n        '[class.mc-disabled]': '_control.disabled',\n        '[class.mc-form-field_has-prefix]': 'hasPrefix',\n        '[class.mc-form-field_has-suffix]': 'hasSuffix',\n        '[class.mc-form-field_has-cleaner]': 'canShowCleaner',\n        '[class.mc-form-field_has-stepper]': 'canShowStepper',\n        '[class.mc-focused]': '_control.focused',\n        '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n        '[class.ng-touched]': '_shouldForward(\"touched\")',\n        '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n        '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n        '[class.ng-valid]': '_shouldForward(\"valid\")',\n        '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n        '[class.ng-pending]': '_shouldForward(\"pending\")',\n        '(keydown)': 'onKeyDown($event)',\n        '(mouseenter)': 'onHoverChanged(true)',\n        '(mouseleave)': 'onHoverChanged(false)'\n    },\n    inputs: ['color'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class McFormField extends _McFormFieldMixinBase implements\n    AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n\n    @ContentChild(McFormFieldControl) _control: McFormFieldControl<any>;\n    @ContentChild(McFormFieldNumberControl) _numberControl: McFormFieldNumberControl<any>;\n    @ContentChild(McStepper) _stepper: McStepper;\n\n    @ContentChildren(McHint) _hint: QueryList<McHint>;\n    @ContentChildren(McSuffix) _suffix: QueryList<McSuffix>;\n    @ContentChildren(McPrefix) _prefix: QueryList<McPrefix>;\n    @ContentChildren(McCleaner) _cleaner: QueryList<McCleaner>;\n\n    @ViewChild('connectionContainer') connectionContainerRef: ElementRef;\n\n    // Unique id for the internal form field label.\n    _labelId = `mc-form-field-label-${nextUniqueId++}`;\n\n    hovered: boolean = false;\n\n    constructor(public _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef) {\n        super(_elementRef);\n    }\n\n    ngAfterContentInit() {\n        this._validateControlChild();\n\n        if (this._control.controlType) {\n            this._elementRef.nativeElement.classList\n                .add(`mc-form-field-type-${this._control.controlType}`);\n\n            if (this._numberControl && this.hasStepper) {\n                this._stepper.stepUp.subscribe(this.onStepUp.bind(this));\n                this._stepper.stepDown.subscribe(this.onStepDown.bind(this));\n            }\n        }\n\n        // Subscribe to changes in the child control state in order to update the form field UI.\n        this._control.stateChanges.pipe(startWith())\n            .subscribe(() => {\n                this._changeDetectorRef.markForCheck();\n            });\n\n        if (this._numberControl) {\n            this._numberControl.stateChanges.pipe(startWith())\n                .subscribe(() => {\n                    this._changeDetectorRef.markForCheck();\n                });\n        }\n\n        // Run change detection if the value changes.\n        const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n\n        merge(valueChanges)\n            .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    ngAfterContentChecked() {\n        this._validateControlChild();\n    }\n\n    ngAfterViewInit() {\n        // Avoid animations on load.\n        this._changeDetectorRef.detectChanges();\n    }\n\n    clearValue($event) {\n        $event.stopPropagation();\n\n        if (this._control && this._control.ngControl) {\n            this._control.ngControl.reset();\n        }\n    }\n\n    onContainerClick($event) {\n        if (this._control.onContainerClick) {\n            this._control.onContainerClick($event);\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n        // tslint:disable-next-line:deprecation\n        if (event.keyCode === ESCAPE && this._control.focused && this.hasCleaner) {\n            if (this._control && this._control.ngControl) {\n                this._control.ngControl.reset();\n            }\n\n            event.preventDefault();\n        }\n    }\n\n    onHoverChanged(isHovered: boolean) {\n        if (isHovered !== this.hovered) {\n            this.hovered  = isHovered;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    onStepUp() {\n        if (this._numberControl) {\n            this._numberControl.stepUp(this._numberControl.step);\n        }\n    }\n\n    onStepDown() {\n        if (this._numberControl) {\n            this._numberControl.stepDown(this._numberControl.step);\n        }\n    }\n\n    /**\n     * Gets an ElementRef for the element that a overlay attached to the form-field should be\n     * positioned relative to.\n     */\n    getConnectedOverlayOrigin(): ElementRef {\n        return this.connectionContainerRef || this._elementRef;\n    }\n\n        /** Determines whether a class from the NgControl should be forwarded to the host element. */\n    _shouldForward(prop: keyof NgControl): boolean {\n        const ngControl = this._control ? this._control.ngControl : null;\n\n        return ngControl && ngControl[prop];\n    }\n\n    /** Throws an error if the form field's control is missing. */\n    protected _validateControlChild() {\n        if (!this._control) {\n            throw getMcFormFieldMissingControlError();\n        }\n    }\n\n    get hasHint(): boolean {\n        return this._hint && this._hint.length > 0;\n    }\n\n    get hasSuffix(): boolean {\n        return this._suffix && this._suffix.length > 0;\n    }\n\n    get hasPrefix(): boolean {\n        return this._prefix && this._prefix.length > 0;\n    }\n\n    get hasCleaner(): boolean {\n        return this._cleaner && this._cleaner.length > 0;\n    }\n\n    get hasStepper(): boolean {\n        return !!this._stepper;\n    }\n\n    get canShowCleaner(): boolean {\n        return this.hasCleaner &&\n            this._control &&\n            this._control.ngControl\n                ? this._control.ngControl.value && !this._control.disabled\n                : false;\n    }\n\n\n    get disabled(): boolean {\n        return this._control && this._control.disabled;\n    }\n\n    get canShowStepper(): boolean {\n        return this._numberControl &&\n            !this.disabled &&\n            (\n                this._numberControl.focused ||\n                this.hovered\n            );\n    }\n}\n\n@Directive({\n    selector: 'mc-form-field[mcFormFieldWithoutBorders]',\n    exportAs: 'mcFormFieldWithoutBorders',\n    host: { class: 'mc-form-field_without-borders' }\n})\nexport class McFormFieldWithoutBorders {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McCleaner } from './cleaner';\nimport { McFormField, McFormFieldWithoutBorders } from './form-field';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McStepper } from './stepper';\nimport { McSuffix } from './suffix';\n\n\n@NgModule({\n    declarations: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner,\n        McStepper\n    ],\n    imports: [CommonModule, McIconModule],\n    exports: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner,\n        McStepper\n    ]\n})\nexport class McFormFieldModule {\n}\n"],"names":["type","Component","args","selector","preserveWhitespaces","styles","template","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","ElementRef","NgZone","Renderer2","direction","Input","disabled","gutterSize","McSplitterComponent","McGutterDirective","renderer","elementRef","this","_direction","_disabled","_order","_size","Object","defineProperty","prototype","coerceBooleanProperty","order","coerceNumberProperty","size","ngOnInit","setStyle","getCursor","getState","coerceCssPixelValue","isVertical","setAttr","state","Error","property","value","nativeElement","attribute","setAttribute","Directive","McSplitterAreaDirective","splitter","disableFlex","removeStyle","addArea","ngOnDestroy","removeArea","setOrder","setSize","sz","getSizeProperty","getSize","getOffsetSizeProperty","getMinSize","getComputedStyle","parseFloat","getMinSizeProperty","style","McSplitterModule","NgModule","imports","CommonModule","McIconModule","exports","declarations","nextUniqueId","McToggleBase","_elementRef","_McToggleMixinBase","mixinTabIndex","mixinColor","mixinDisabled","ThemePalette","Primary","McToggleChange","McToggleComponent","_super","_focusMonitor","_changeDetectorRef","tabIndex","_this","call","labelPosition","ariaLabel","ariaLabelledby","_uniqueId","id","name","_checked","change","EventEmitter","_onTouchedCallback","_onChangeCallback","_","parseInt","monitor","tslib_1.__extends","markForCheck","stopMonitoring","focus","focusVia","_inputElement","_getAriaChecked","checked","_onInteractionEvent","event","stopPropagation","_onLabelTextChange","_onInputClick","_updateModelValue","_emitChangeEvent","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","source","emit","exportAs","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","inputs","host","class","[id]","[attr.id]","[class.mc-disabled]","[class.mc-toggle_off]","animations","trigger","left","transition","animate","FocusMonitor","ChangeDetectorRef","String","decorators","Attribute","ViewChild","Output","McToggleModule","A11yModule","McCommonModule","McTooltipComponent","cdr","prefix","positions","DEFAULT_4_POSITIONS","slice","classMap","mcVisibleChange","mcMouseEnterDelay","mcMouseLeaveDelay","_mcTrigger","_mcPlacement","_mcVisible","BehaviorSubject","onHideSubject","Subject","closeOnInteraction","availablePositions","POSITION_MAP","$visible","asObservable","_mcTitle","isTitleString","TemplateRef","unshift","mcPlacement","visible","next","show","hideTid","clearTimeout","isContentEmpty","mcTrigger","showTid","setTimeout","mcVisible","hide","setClassMap","mcTitle","afterHidden","handleBodyInteraction","outputs","fadeAnimation","(body:click)","MC_TOOLTIP_SCROLL_STRATEGY","InjectionToken","MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","Overlay","useFactory","mcTooltipScrollStrategyFactory","McTooltip","overlay","ngZone","scrollDispatcher","hostView","scrollStrategy","isTooltipOpen","isDynamicTooltip","parentDisabled","$unsubscribe","manualListeners","Map","destroyed","title","updateCompValue","_mcMouseEnterDelay","_mcMouseLeaveDelay","_mcTooltipClass","tooltip","externalValue","createOverlay","overlayRef","strategy","position","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withPositions","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","pipe","takeUntil","subscribe","onPositionChange","scrollableViewProperties","isOverlayClipped","run","create","positionStrategy","panelClass","updatePosition","detachments","detach","hasAttached","$event","updatedPlacement","keys","some","key","connectionPair","originX","originY","overlayX","overlayY","handlePositioningUpdate","pos","overlayElement","clientHeight","element","currentContainer","top","split","initElementRefListeners","dispose","forEach","listener","removeEventListener","clear","complete","handleKeydown","e","keyCode","ESCAPE","handleTouchend","set","addEventListener","portal","ComponentPortal","attach","instance","distinctUntilChanged","data","getConfig","origin","getOrigin","getOverlayPosition","tslib_1.__assign","main","fallback","originPosition","isLtr","getMcTooltipInvalidPositionError","_a","invertPosition","x","y","overlayPosition","newX","newY","(keydown)","(touchend)","ScrollDispatcher","ViewContainerRef","undefined","Inject","Directionality","Optional","setTitle","mcTooltipClass","isOpen","HostBinding","isParentDisabled","McToolTipModule","OverlayModule","entryComponents","McVerticalNavbarItemIcon","McVerticalNavbarItemBadge","McVerticalNavbarItemBase","_McVerticalNavbarMixinBase","McVerticalNavbarItem","focusMonitor","[attr.disabled]","[attr.tabindex]","McDropdownTrigger","Self","McVerticalNavbarHeader","McVerticalNavbarTitle","McVerticalNavbar","cd","expanded","toggle","toggleVerticalNavbarAnimation","COMPONENTS","McVerticalNavbarModule","PlatformModule","VERSION","Version","SELECT_PANEL_PADDING_X","selectionChange","valueChange","errorStateMatcher","sortComparator","placeholder","required","multiple","autoSelect","compareWith","McTreeSelect","McTreeSelectMixinBase","McTreeSelectModule","CdkTreeModule","McTreeModule","McTagsModule","McPseudoCheckboxModule","McTreeSelectTrigger","MC_SELECT_SCROLL_STRATEGY_PROVIDER","MC_TEXTAREA_VALUE_ACCESSOR","McTextareaBase","defaultErrorStateMatcher","parentForm","parentFormGroup","ngControl","McTextareaMixinBase","mixinErrorState","McTextarea","inputValueAccessor","canGrow","focused","stateChanges","controlType","uid","_required","lineHeight","freeRowsHeight","minHeight","valueAccessor","previousNativeValue","growObserver","fromEvent","growSubscription","grow","bind","_id","paddingTop","paddingBottom","ngOnChanges","unsubscribe","ngDoCheck","updateErrorState","dirtyCheckNativeValue","runOutsideAngular","textarea","outerHeight","window","diff","height","Math","max","scrollHeight","focusChanged","isFocused","isBadInput","onContainerClick","newValue","validity","badInput","getGrowHeight","toString","[class.mc-textarea-resizable]","[attr.placeholder]","[attr.aria-invalid]","[disabled]","[required]","(blur)","(focus)","McFormFieldControl","NgControl","NgForm","FormGroupDirective","ErrorStateMatcher","McTextareaModule","FormsModule","hours","minutes","seconds","HHmmss","HHmm","TIMEFORMAT_PLACEHOLDERS","TimeFormats","DEFAULT_TIME_FORMAT","HOURS_MINUTES_SECONDS_REGEXP","RegExp","HOURS_MINUTES_REGEXP","HOURS_ONLY_REGEXP","uniqueComponentIdSuffix","McTimepickerBase","McTimepickerMixinBase","McTimepicker","dateAdapter","_minTime","_maxTime","onChange","noop","control","myValidators","parseValidator","minTimeValidator","maxTimeValidator","validators","validator","concat","setValidators","updateValueAndValidity","applyInputChanges","_timeFormat","formatValue","map","timeFormatKey","indexOf","minValue","minDateTime","getDateFromTimeString","maxValue","maxDateTime","onTouched","onBlur","onPaste","preventDefault","clipboardUserInput","clipboardData","getData","onInput","initialCursorStart","selectionStart","initialCursorEnd","selectionEnd","isAutocompleteTriggered","getParsedTimeParts","hoursOnly","hoursAndMinutes","hoursAndMinutesAndSeconds","length","doTimestringReformat","errors","createSelectionOfTimeComponentInInput","setProperty","getTimeStringFromDate","timeFormat","onKeyDown","getKeyCode","upDownTimeByArrowKeys","switchSelectionBetweenTimeparts","applyParams","changedTime","timeToApply","currentDateTimeInput","result","cursorPos","modifiedTimePart","getTimeEditMetrics","incrementTime","decrementTime","getCursorPositionOfPrevTimePartStart","getCursorPositionOfNextTimePartStart","code","newEditParams","cursorStartPosition","cursorEndPosition","dateVal","whatToIncrement","TimeParts","getTimeDigitsFromDate","getDateFromTimeDigits","whatToDecrement","timeString","timeDevider","nextDividerPos","cursorPosition","minutesIndex","hoursIndex","secondsIndex","tempVal","getNumberWithLeadingZero","getHours","getMinutes","getSeconds","momentWrappedTime","parse","convertedTimeString","format","match","trim","Number","resultDate","Date","isNaN","getTime","digit","mcTimepickerParse","text","isTimeLowerThenMin","mcTimepickerLowerThenMintime","isTimeGreaterThenMax","mcTimepickerHigherThenMaxtime","timeToCompare","[attr.time-format]","[attr.min-time]","[attr.max-time]","[attr.value]","(input)","(paste)","MC_INPUT_VALUE_ACCESSOR","DateAdapter","minTime","maxTime","McTimepickerModule","MC_SIDEPANEL_DATA","Right","Left","Top","Bottom","McSidepanelConfig","McSidepanelPosition","hasBackdrop","requiredBackdrop","disableClose","overlayPanelClass","Void","Visible","Hidden","mcSidepanelTransformAnimation","right","in","out","bottom","mcSidepanelAnimations","sidepanelState","transform","params","transformIn","transformOut","AnimationCurves","AccelerationCurve","DecelerationCurve","MC_SIDEPANEL_WITH_INDENT","MC_SIDEPANEL_WITH_SHADOW","McSidepanelContainerComponent","changeDetectorRef","sidepanelConfig","withIndent","withShadow","animationState","McSidepanelAnimationState","animationStateChanged","attachComponentPortal","validatePortalAttached","setAnimation","setPanelClass","portalOutlet","attachTemplatePortal","enter","detectChanges","exit","onAnimation","animationTransform","classList","add","tabindex","role","aria-modal","[@state]","(@state.start)","(@state.done)","Boolean","CdkPortalOutlet","BasePortalOutlet","uniqueId","McSidepanelRef","containerInstance","config","afterClosed$","afterOpened$","filter","phaseName","toState","take","merge","backdropClick","keydownEvents","close","closed","detachBackdrop","afterClosed","afterOpened","MC_SIDEPANEL_DEFAULT_OPTIONS","McSidepanelService","injector","defaultOptions","parentSidepanelService","openedSidepanelsAtThisLevel","openedSidepanels","closeSidepanels","open","componentOrTemplateRef","fullConfig","getSidepanelById","container","attachContainer","ref","TemplatePortal","$implicit","sidepanelRef","createInjector","contentRef","push","removeOpenSidepanel","closeAll","find","sidepanel","openedSidepanelsWithSamePosition","getOpenedSidepanelsWithSamePosition","PortalInjector","WeakMap","containerPortal","sidepanelContainer","injectionTokens","overlayConfig","OverlayConfig","backdropClass","getBackdropClass","maxWidth","scrollStrategies","block","global","sidepanels","reverse","hasOpenedSidepanelWithBackdrop","index","splice","Injectable","Injector","SkipSelf","McSidepanelClose","sidepanelService","getClosestSidepanel","changes","proxiedChange","mcSidepanelClose","sidepanelResult","currentValue","(click)","McSidepanelHeader","closeable","McSidepanelBody","McSidepanelFooter","McSidepanelActions","McSidepanelModule","PortalModule","areas","_gutterSize","isDragging","areaPositionDivider","listeners","area","initialSize","onMouseDown","leftAreaIndex","rightAreaIndex","leftArea","rightArea","startPoint","screenX","screenY","item","listen","onMouseUp","onMouseMove","indexToRemove","endPoint","offset","newLeftAreaSize","newRightAreaSize","minLeftAreaSize","minRightAreaSize","rightAreaOffset","pop","options_1","options","toArray","selectionModel","sort","a","b","McSelect","propagateChanges","fallbackValue","valueToEmit","option","selected","_value","_onChange","McSelectChange","setOptionIds","optionIds","join","highlightCorrectOption","keyManager","empty","setFirstItemActive","setActiveItem","scrollActiveOptionIntoView","activeOptionIndex","activeItemIndex","labelCount","countGroupLabelsBeforeOption","optionGroups","panel","scrollTop","getOptionScrollPosition","getItemHeight","getOptionIndex","reduce","current","calculateOverlayPosition","itemHeight","items","getItemCount","panelHeight","min","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","calculateOverlayScroll","offsetY","calculateOverlayOffsetY","checkOverlayWithinViewport","calculateOverlayOffsetX","offsetX","overlayRect","overlayDir","getBoundingClientRect","viewportSize","_viewportRuler","getViewportSize","isRtl","first","group","leftOverflow","rightOverflow","width","round","topSpaceAvailable","triggerRect","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","adjustPanelUp","adjustPanelDown","transformOrigin","getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","optionHeightAdjustment","[class.mc-select-invalid]","[class.mc-select-required]","(window:resize)","mcSelectAnimations","transformPanel","fadeInContent","MC_OPTION_PARENT_COMPONENT","ViewportRuler","McFormField","MC_SELECT_SCROLL_STRATEGY","CdkConnectedOverlay","tags","ViewChildren","McTag","customTrigger","ContentChild","McSelectTrigger","ContentChildren","McOption","descendants","McOptgroup","openedChange","openedStream","closedStream","McSelectMixinBase","McSelectModule","McOptionModule","McFormFieldModule","McTreeSelectChange","isUserInput","McTreeSelectBase","viewportRuler","dir","parentFormField","scrollStrategyFactory","hiddenItems","oneMoreText","triggerFontSize","panelDoneAnimating","panelDoneAnimatingStream","o","optionSelectionChanges","defer","apply","onSelectionChange","onStable","switchMap","_multiple","_autoSelect","_focused","_panelOpen","destroy","_compareWith","o1","o2","_placeholder","getMcSelectDynamicMultipleError","getMcSelectNonFunctionValueError","initializeSelection","tree","panelOpen","ngAfterContentInit","initKeyManager","SelectionModel","changed","added","select","removed","deselect","ngAfterViewInit","calculateHiddenItems","startWith","updateSelectedOptions","resetOptions","fontSize","setSelectionByValue","viewValue","selectedOptions","isEmpty","handleOpenKeydown","handleClosedKeydown","onFadeInDone","onFocus","onAttached","positionChange","getPanelTheme","color","selectedIndex","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","onRemoveSelectedOption","selectedOption","visibleItems","totalItemsWidth","getTotalItemsWidthInMatcher","totalVisibleItemsWidth","tag","offsetTop","offsetHeight","itemsCounter","querySelector","matcherList","itemsCounterShowed","matcherListWidth","matcherWidth","triggerClone","cloneNode","remove","appendChild","querySelectorAll","isArrowKey","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","ENTER","SPACE","altKey","onKeydown","originalOnKeyDown","HOME","END","setLastItemActive","activeItem","A","ctrlKey","hasDeselectedOptions_1","previouslyFocusedIndex","shiftKey","selectViaInteraction","Promise","resolve","then","Array","isArray","getMcSelectNonArrayValueError","selectValue","sortValues","correspondingOption","error","isDevMode","console","warn","tabOut","changedOrDestroyed","onSelect","wasSelected","isSelected","CdkTree","McTreeSelection","addClassModificatorForIcons","icons","contentChildren","iconElement","previousElementSibling","nextElementSibling","nextSibling","previousSibling","firstIconElement","secondIconElement","addHostClassName","_i","TAG_ATTRIBUTE_NAMES_1","TAG_ATTRIBUTE_NAMES","attr","hasAttribute","tagName","toLowerCase","_selected","dispatchSelectionChange","toggleSelected","hasFocus","removable","handleClick","DELETE","BACKSPACE","selectable","blur","_ngZone","[class.mc-tag-selected]","[class.mc-tag-with-avatar]","[class.mc-tag-with-trailing-icon]","[class.mc-tag-disabled]","McIcon","avatar","McTagAvatar","trailingIcon","McTagTrailingIcon","removeIcon","McTagRemove","_McTagMixinBase","parentTag","McTagListBase","_McTagListMixinBase","McTagListChange","McTagList","userTabIndex","tagChanges","orientation","_tabIndex","_selectable","lastDestroyedTagIndex","tagInput","hasFocusedTag","syncTagsDisabledState","tagListSelectable","FocusKeyManager","withVerticalOrientation","withHorizontalOrientation","resetTags","updateTabIndex","updateFocusForDestroyedTags","dropSubscriptions","registerInput","inputElement","originatesFromTag","focusInput","keydown","target","isInputEmpty","contains","clearSelection","correspondingTag","markAsTouched","newTagIndex","isValidIndex","nodeName","skip","listenToTagsFocus","listenToTagsSelection","listenToTagsRemoved","tagFocusSubscription","tagBlurSubscription","tagSelectionSubscription","tagRemoveSubscription","tagSelectionChanges","tagFocusChanges","tagIndex","updateActiveItem","tagBlurChanges","tagRemoveChanges","currentElement","parentElement","[class.mc-invalid]","[class.mc-required]","McTagInput","separatorKeyCodes","tagEnd","_addOnBlur","_tagList","emittagEnd","addOnBlur","isSeparatorKey","input","hasModifierKey","separators","has","MC_TAGS_DEFAULT_OPTIONS","tagList","ɵ0","useValue","McSelectBase","_renderer","_dir","_parentFormField","_scrollStrategyFactory","_onTouched","onRemoveMatcherItem","manager","ActiveDescendantKeyManager","withTypeAhead","McTabContent","McTabLabel","CdkPortal","ctorParameters","McTabBase","mcTabMixinBase","McTab","viewContainerRef","textLabel","isActive","contentPortal","hasOwnProperty","explicitContent","implicitContent","templateLabel","read","mcTabsAnimations","translateTab","McTabBody","onCentering","beforeCentering","afterLeavingCenter","onCentered","animationDuration","dirChangeSubscription","Subscription","EMPTY","computePositionAnimationState","positionIndex","bodyPosition","computePositionFromOrigin","onTranslateTabStarted","isCentering","isCenterPosition","onTranslateTabComplete","fromState","getLayoutDirection","portalHost","PortalHostDirective","content","McTabBodyPortal","componentFactoryResolver","centeringSub","leavingSub","ComponentFactoryResolver","McTabLabelWrapperBase","mcTabLabelWrapperMixinBase","McTabLabelWrapper","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","[attr.aria-disabled]","McTabHeaderBase","McTabHeader","showPaginationControls","disableScrollAfter","disableScrollBefore","selectFocusedIndex","indexFocused","_scrollDistance","selectedIndexChanged","_selectedIndex","coercedValue","focusIndex","v","getMaxScrollDistance","scrollDistanceChanged","checkScrollingControls","ngAfterContentChecked","tabLabelCount","labelWrappers","updatePagination","scrollToLabel","updateTabScrollPosition","dirChange","observableOf","resize","realign","withWrap","requestAnimationFrame","newFocusIndex","setTabFocus","onContentChanges","textContent","currentTextContent","zoneCallback","checkPaginationEnabled","tab","containerEl","tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","tabList","scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","[class.mc-tab-header__pagination-controls_enabled]","[class.mc-tab-header_rtl]","McLightTabsCssStyler","McAlignTabsCenterCssStyler","McAlignTabsEndCssStyler","McStretchTabsCssStyler","nextId","McTabChangeEvent","MC_TABS_CONFIG","McTabGroupBase","mcTabGroupMixinBase","McTabGroup","lightTabs","defaultConfig","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","indexToSelect","tabBodyWrapperHeight","tabsSubscription","tabLabelSubscription","_dynamicHeight","lightTab","groupId","clampTabIndex","isFirstRun_1","createChangeEvent","tabs","subscribeToTabLabels","i","getTabLabelId","getTabContentId","setTabBodyWrapperHeight","tabHeight","wrapper","tabBodyWrapper","removeTabBodyWrapperHeight","tabHeader","getTabIndex","[class.mc-tab-group_dynamic-height]","[class.mc-tab-group_inverted-header]","dynamicHeight","McTabNavBase","mcTabNavMixinBase","McTabNav","McTabLinkBase","mcTabLinkMixinBase","McTabLink","[attr.aria-current]","[attr.tabIndex]","[class.mc-active]","active","McTabsModule","McTagSelectionChange","McTagBase","_removable","popover","handlePositionUpdate","McPopover","verticalOffset","anchorElementWidth","clientWidth","isDynamicPopover","McPopoverComponent","isPopoverOpen","reapplyPosition","reapplyLastPosition","getOriginXaxis","getOriginYaxis","origX","includes","getMcPopoverInvalidPositionError","origY","[class.mc-popover_open]","MC_POPOVER_SCROLL_STRATEGY","mcHeader","mcContent","mcFooter","mcPopoverSize","McPopoverModule","MC_POPOVER_SCROLL_STRATEGY_FACTORY_PROVIDER","idIterator","McProgressBarBase","_McProgressBarMixinBase","McProgressBar","mode","McProgressBarModule","McProgressSpinnerBase","_McProgressSpinnerMixinBase","McProgressSpinner","percentage","McProgressSpinnerModule","McRadioChange","McRadioGroupBase","_McRadioGroupMixinBase","MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","McRadioGroup","_changeDetector","_name","_isInitialized","_labelPosition","controlValueAccessorChangeFn","updateRadioButtonNames","markRadiosForCheck","updateSelectedRadioFromValue","checkSelectedRadioButton","toBoolean","touch","emitChangeEvent","_radios","radio","isAlreadySelected","McRadioButton","McRadioButtonBase","_McRadioButtonMixinBase","radioGroup","_radioDispatcher","removeUniqueSelectionListener","newCheckedState","notify","newDisabledState","onInputClick","onInputChange","groupValueChanged","[class.mc-checked]","UniqueSelectionDispatcher","ariaDescribedby","McRadioModule","McTreeNodeDef","CdkTreeNodeDef","McTreeNodePadding","arguments","baseLeftPadding","_indent","iconWidth","withIcon","paddingIndent","nodeLevel","treeNode","treeControl","getLevel","level","leftPadding","isExpandable","setPadding","CdkTreeNodePadding","indent","McTreeNodeToggle","CdkTreeNodeToggle","MC_TREE_OPTION_PARENT_COMPONENT","McTreeOptionChange","uniqueIdCounter","McTreeOption","parent","_active","setSelected","setActiveStyles","setInactiveStyles","getHeight","clientRects","getClientRects","getHostElement","emitSelectionChangeEvent","setFocusedOption","[class.mc-selected]","CdkTreeNode","McTreeNavigationChange","McTreeSelectionChange","McTreeSelectionBase","differs","McTreeSelectionBaseMixin","noUnselect","navigationChange","rawValue","log","withShift","withCtrl","collapse","expand","toggleFocusedOption","PAGE_UP","setPreviousPageItemActive","PAGE_DOWN","setNextPageItemActive","updateScrollSize","withScrollSize","floor","previousIndex_1","previousActiveItemIndex","activeIndex_1","canDeselectLast","emitNavigationEvent","focusedIndex","focusedOption","renderNodeChanges","dataDiffer","viewContainer","parentData","nodeOutlet","arrayOfInstances","_embeddedViews","view","viewDef","def","nodes","node","nodeMatchedQueries","matchedQueryIds","nodeData","nodeIndex","reset","notifyOnChanges","IterableDiffers","CdkTreeNodeOutlet","MC_TREE_DIRECTIVES","McTreeFlattener","transformFunction","getChildren","flattenNode","resultNodes","parentMap","flatNode","children","child","childParentMap","flattenNodes","structuredData","expandFlattenedNodes","results","currentExpand","isExpanded","McTreeFlatDataSource","treeFlattener","initialData","flattenedData","expandedData","_data","dataNodes","connect","collectionViewer","viewChange","expansionModel","disconnect","DataSource","McTreeNestedDataSource","McMeasureScrollbarService","McModalControlService","DOCUMENT","mcModalType","mcComponentParams","mcZIndex","mcWidth","mcWrapClassName","mcClassName","mcStyle","mcCloseByESC","mcClosable","mcMask","mcMaskClosable","mcMaskStyle","mcBodyStyle","mcAfterOpen","mcAfterClose","mcOkText","mcOkType","mcOkLoading","mcOnOk","mcCancelText","mcCancelLoading","mcOnCancel","modalContainer","bodyContainer","autoFocusButtonOk","mcGetContainer","McModalComponent","McModalRef","CssUnitPipe","defaultUnit","formatted","Pipe","ModalBuilderForService","createModal","changeProps","destroyModal","getInstance","modalRef","assign","McModalService","modalControl","openModals","afterAllClose","confirm","confirmType","success","simpleConfirm","delete","McModalModule","McButtonModule","MC_NAVBAR_CONTAINER","MC_NAVBAR_ITEM","MC_NAVBAR_BRAND","MC_NAVBAR_TITLE","McNavbarLogo","McNavbarBrand","McNavbarTitle","McNavbarItemBase","_McNavbarMixinBase","McNavbarItem","_platform","_cdRef","dropdownItems","isCollapsed","_subscription","encodeURI","dropdownContent","denyClickIfDisabled","_focusMonitor$","hasDropdownContent","listenClickOutside","startListenFocusDropdownItems","stopListenFocusDropdownItems","isActiveDropdownLink","link","isBrowser","location","href","handleClickByItem","toggleDropdown","isNavbarItem","handleClickByDropdownItem","forceCloseDropdown","_dropdownElements","el","events","eventListeners","stopImmediatePropagation","Platform","collapsedTitle","dropdownItemTmpl","McNavbarContainer","cssClasses","CollapsibleItem","_collapsed","processCollapsed","collapsed","updateCollapsedClass","CachedItemWidth","itemsForCollapse","_collapsedItemsWidth","calculateAndCacheCollapsedItemsWidth","updateTitle","acc","getTitle","computedTitle","getAttribute","decodeURI","innerText","removeAttribute","McNavbar","forceRecalculateItemsWidth","resizeDebounceInterval","firstLevelElement","secondLevelElements","resizeObserver","debounceTime","_resizeSubscription","updateCollapsed","_itemsWidths","calculateAndCacheItemsWidth","_totalItemsWidths","calculateAndCacheTotalItemsWidth","collapseDelta","maxAllowedWidth","itemsWidths","canCollapse","collapsedItemsWidth","getOuterElementWidth","getPropertyValue","allItemsSelector","allItems","from","getItemsForCollapse","McNavbarModule","mcPopoverAnimations","popoverState","opacity","componentElementRef","EXTENDED_OVERLAY_POSITIONS","popoverVisibility","_classList","popoverSize","list","getPlacementClass","POSITION_TO_CSS_MAP","isNonEmptyContent","isTemplateRef","isNonEmptyString","isVisible","animationStart","[class]","mcPopoverScrollStrategyFactory","_mcHeader","_mcContent","_mcFooter","McListSelection","McListSelectionChange","McListSelectionBase","_McListSelectionMixinBase","_element","horizontal","_modelChanges","_keyManager","_tempValues","_setOptionsFromValues","_b","_c","selectAll","_reportValueChange","deselectAll","_getHeight","_canDeselectLast","values","getSelectedOptionValues","_isValidIndex","listOption","_removeOptionFromList","_hasFocus","optionIndex","_getOptionIndex","setPreviousItemActive","setNextItemActive","_onKeyDown","_getOptionByValue","[tabIndex]","MC_SELECTION_LIST_VALUE_ACCESSOR","McListOption","McListBase","McList","McListSubheaderCssStyler","McListItemBase","McListItem","_lineSetter","McLineSetter","_lines","_handleFocus","_handleBlur","_getHostElement","McLine","McListModule","McLineModule","McLinkBase","_McLinkBase","McLink","McLinkModule","parentService","rootOpenModals","rootAfterAllClose","rootRegisteredMetaMap","registeredMetaMap","registerModal","hasRegistered","afterOpenSubscription","afterOpen","afterCloseSubscription","afterClose","removeOpenModal","ModalUtil","document","lastPosition","listenDocumentClick","getLastClickPosition","clientX","clientY","ModalUtil$1","cfr","mcMeasureScrollbarService","changeDetector","_mcClosable","_mcMask","_mcMaskClosable","_mcOkLoading","_mcCancelLoading","isComponent","createDynamicComponent","isModalButtons","formatModalButtons","HTMLElement","OverlayRef","handleVisibleStateChange","firstChange","contentComponentRef","insert","changeVisibleFromInside","triggerOk","onClickOkCancel","triggerCancel","getContentComponentRef","getContentComponent","getElement","onClickMask","isModalType","onClickCloseBtn","ok","cancel","loadingKey","caseClose_1","doClose","isPromise","handleThen","catch","Type","animation","closeResult","changeBodyOverflow","animateTo","getButtonCallableProp","prop","onButtonClick","button","loading","changeAnimationState","maskAnimationClassMap","modalAnimationClassMap","updateTransformOrigin","buttons","autoLoading","component","factory","resolveComponentFactory","childInjector","parentInjector","modalElement","plusNum","body","scrollBarWidth","McDatepickerInput","isAltDownArrow","datepicker","readOnly","date","dateFormats","dateInput","lastValueValid","isValid","getValidDateOrNull","sameDate","cvaOnChange","McDatepickerInputEvent","dateChange","getThemePalette","formField","display","obj","isDateInstance","MC_DATEPICKER_VALUE_ACCESSOR","MC_DATEPICKER_VALIDATORS","[attr.aria-haspopup]","[attr.aria-owns]","[attr.min]","[attr.max]","(change)","MC_DATE_FORMATS","mcDatepicker","mcDatepickerFilter","McDatepickerToggleIcon","McDatepickerToggle","intl","defaultTabIndex","parsedTabIndex","watchStateChanges","datepickerDisabled","disabledChange","inputDisabled","datepickerInput","datepickerToggled","[class.mc-datepicker-toggle_active]","[class.mc-warn]","McDatepickerIntl","customIcon","McDatepickerModule","McCalendar","McCalendarBody","McDatepicker","McDatepickerContent","McMonthView","McYearView","McMultiYearView","McCalendarHeader","MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","McDivider","_vertical","_inset","[attr.aria-orientation]","[class.mc-divider-vertical]","[class.mc-divider-inset]","vertical","inset","McDividerModule","McDropdownContent","_template","_componentFactoryResolver","_appRef","_injector","_viewContainerRef","_document","_attached","context","_portal","_outlet","DomPortalOutlet","createElement","insertBefore","outletElement","isAttached","ApplicationRef","MC_DROPDOWN_PANEL","McDropdownItemBase","_McDropdownItemMixinBase","McDropdownItem","_parentDropdownPanel","_hovered","_highlighted","_triggersNestedDropdown","addItem","removeItem","_getTabIndex","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","childNodes","length_1","nodeType","[attr.role]","[class.mc-dropdown__item_highlighted]","(mouseenter)","mcDropdownAnimations","transformDropdown","query","fadeInItems","MC_DROPDOWN_DEFAULT_OPTIONS","providedIn","MC_DROPDOWN_DEFAULT_OPTIONS_FACTORY","McDropdown","_defaultOptions","_panelAnimationState","_animationDone","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_overlapTriggerX","overlapTriggerX","_overlapTriggerY","overlapTriggerY","_hasBackdrop","throwMcDropdownInvalidPositionX","setPositionClasses","throwMcDropdownInvalidPositionY","classes","previousPanelClass","_previousPanelClass","className","_handleKeydown","setFocusOrigin","focusFirstItem","lazyContent","resetActiveItem","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","_onAnimationStart","templateRef","MC_DROPDOWN_SCROLL_STRATEGY","MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER","MC_DROPDOWN_SCROLL_STRATEGY_FACTORY","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","_overlay","_scrollStrategy","_parent","_dropdownItemInstance","_handleTouchStart","_openedBy","dropdownOpened","dropdownClosed","_overlayRef","_opened","_closeSubscription","_hoverSubscription","triggersNestedDropdown","_dropdown","dropdown","reason","_destroy","_check","_handleHover","_cleanUpSubscriptions","_createOverlay","_setPosition","_getPortal","_closingActions","_init","opened","_reset","_setIsOpened","throwMcDropdownMissingError","_getOverlayConfig","_subscribeToPositions","withLockedPosition","originFallbackX","overlayFallbackX","overlayFallbackY","originFallbackY","backdrop","parentClose","hover","_handleMousedown","_handleClick","delay","asapScheduler","aria-haspopup","[attr.aria-expanded]","(mousedown)","McDropdownModule","McContentComponent","[class.mc-layout-content]","McFooterComponent","[class.mc-layout-footer]","McHeaderComponent","[class.mc-layout-header]","McLayoutComponent","hasSidebar","[class.mc-layout]","[class.mc-layout-has-sidebar]","McSidebarComponent","mcLayoutComponent","_mcWidth","mcCollapsedWidth","mcCollapsedChange","collapsible","mcCollapsed","[class.mc-layout-sidebar]","[class.mc-layout-sidebar-collapsed]","[style.flex]","[style.max-width.px]","[style.min-width.px]","[style.width.px]","Host","mcCollapsible","McLayoutModule","listSelection","checkboxPosition","wasSelected_1","_text","[class.mc-focused]","activeDate","addCalendarYears","_activeDate","getYear","yearsPerPage","onYearSelected","compareDate","oldActiveDate","activeDateChange","focusActiveCell","getActiveCell","mcCalendarBody","createCellForYear","year","yearName","getYearName","createDate","McCalendarCell","shouldEnableYear","maxDate","minDate","dateFilter","firstOfYear","addCalendarDays","selectedChange","yearSelected","monthSelected","createMissingDateImplError","today","validDate","deserialize","clampDate","init","selectedMonth","getMonthInCurrentYear","_minDate","_maxDate","onMonthSelected","month","normalizedDate","daysInMonth","getNumDaysInMonth","getDate","handleCalendarBodyKeydown","addCalendarMonths","getMonth","todayMonth","yearLabel","monthNames","getMonthNames","months","row","createCellForMonth","monthName","monthYearA11yLabel","newMonthName","toLocaleUpperCase","substr","shouldEnableMonth","activeYear","isYearAndMonthAfterMaxDate","isYearAndMonthBeforeMinDate","firstOfMonth","maxYear","maxMonth","minYear","minMonth","calendar","currentView","label","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","isSameView","nextEnabled","date1","date2","startView","userSelection","moveFocusOnNextTick","intlChanges","_startAt","clampedActiveDate","_currentView","calendarHeaderPortal","headerComponent","startAt","ngAfterViewChecked","getCurrentViewComponent","updateTodaysDate","monthView","yearView","multiYearView","dateSelected","yearSelectedInMultiYearView","normalizedYear","monthSelectedInYearView","normalizedMonth","userSelected","goToDateInView","dateClass","mcDatepickerAnimations","fadeInCalendar","Element","matches","msMatchesSelector","datepickerUid","MC_DATEPICKER_SCROLL_STRATEGY","MC_DATEPICKER_SCROLL_STRATEGY_FACTORY","McDatepickerContentBase","McDatepickerContentMixinBase","[@transformPanel]","selectedChanged","validSelected","focusedElementBeforeOpen","inputSubscription","_color","popupRef","popupComponentRef","oldValue","selectYear","selectMonth","activeElement","openAsPopup","calendarPortal","completeClose","createPopup","setColor","createPopupPositionStrategy","calendarHeaderComponent","NG_VALIDATORS","targetElement","datepickerSubscription","localeSubscription","validatorOnChange","mcDatepickerParse","minValidator","controlValue","mcDatepickerMin","actual","maxValidator","mcDatepickerMax","filterValidator","Validators","compose","localeChanges","oldDate","_min","_max","registerOnValidatorChange","validate","c","[class.mc-card_readonly]","[class.mc-card_selected]","readonly","McCard","McCardModule","MC_CHECKBOX_CLICK_ACTION","MC_CHECKBOX_CONTROL_VALUE_ACCESSOR","McCheckbox","Init","Checked","Unchecked","Indeterminate","McCheckboxChange","McCheckboxBase","_McCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","_controlValueAccessorChangeFn","_indeterminate","focusOrigin","_onInputFocusChange","_transitionCheckState","indeterminate","newState","oldState","[class.mc-indeterminate]","[class.mc-checkbox-label-before]","MC_CHECKBOX_REQUIRED_VALIDATOR","McCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","McCheckboxModule","stepUp","step","res","stepDown","MC_INPUT_INVALID_TYPES","BIG_STEP","SMALL_STEP","McInputBase","_McInputMixinBase","McNumberInput","_model","bigStep","isDigit","Infinity","_host","self","getPrototypeOf","get","normalizeSplitter","_focusChanged","minuses","NUMPAD_MINUS","DASH","FF_MINUS","serviceKeys","TAB","arrows","allowedKeys","isIEPeriod","isNotIEPeriod","metaKey","C","V","X","F1","F12","EDGE","TRIDENT","ZERO","NINE","NUMPAD_ZERO","NUMPAD_NINE","valueAsNumber","update","replace","isFloat","isInt","test","NgModel","McFormFieldNumberControl","McInput","_uid","_type","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","_validateType","_dirtyCheckNativeValue","_onInput","_isNeverEmpty","_isBadInput","getMcInputUnsupportedTypeError","McInputMono","MIN_VALIDATOR","MinValidator","_createValidator","_validator","MAX_VALIDATOR","MaxValidator","McInputModule","calendarLabel","openCalendarLabel","displayValue","enabled","numCols","activeCell","cellAspectRatio","selectedValueChange","cellClicked","cell","columnChanges","rows","firstRowOffset","cellPadding","cellWidth","isActiveCell","rowIndex","colIndex","cellNumber","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","hasSameMonthAndYear","selectedDate","getDateInCurrentMonth","selectedYear","todayDate","monthLabel","firstWeekOffset","getDayOfWeek","createWeekCells","dateNames","getDateNames","weeks","shouldEnableDate","dateA11yLabel","cellClasses","d1","d2","todayYear","activeOffset","years","_autoActiveFirstOption","McAutocomplete","_isOpen","showPanel","setVisibility","setScrollTop","getScrollTop","emitSelectEvent","McAutocompleteSelectedEvent","optionSelected","MC_AUTOCOMPLETE_DEFAULT_OPTIONS","displayWith","panelWidth","autoActiveFirstOption","McAutocompleteOrigin","MC_AUTOCOMPLETE_SCROLL_STRATEGY","MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","McAutocompleteTrigger","zone","optionSelections","autocomplete","autocompleteAttribute","_autocompleteDisabled","overlayAttached","componentDestroyed","viewportSubscription","canOpenOnNextFocus","closeKeyEventStream","windowBlurHandler","destroyPanel","openPanel","attachOverlay","closePanel","closingActionsSubscription","getOutsideClickStream","McOptionSelectionChange","setTriggerValue","activeOption","prevActiveItem","canOpen","scrollToOption","handleInput","previousValue","handleFocus","clickTarget","newScrollPosition","subscribeToClosingActions","firstStable","optionChanges","tap","panelClosingActions","setValueAndClose","toDisplay","inputValue","_control","clearPreviousSelectedOption","getMcAutocompleteMissingPanelError","setOrigin","getConnectedElement","updateSize","getPanelWidth","getOverlayConfig","wasOpen","withPush","connectedTo","getConnectedOverlayOrigin","getHostWidth","[attr.autocomplete]","(focusin)","autocompleteDisabled","McAutocompleteModule","McButtonCssStyler","[class.mc-button]","[class.mc-icon-button]","McButtonBase","McButtonMixinBase","McButton","McAnchor","haltDisabledEvents","MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","McButtonToggleGroup","McButtonToggleChange","buttonToggles","syncButtonToggle","isPrechecked","[class.mc-button-toggle-vertical]","McButtonToggle","buttonToggleGroup","isSingleSelector","onToggleClick","newChecked","[class.mc-button-toggle-standalone]","[class.mc-button-toggle-checked]","mcButton","McButtonToggleModule","hostElement","onClick","__extends","d","__","constructor","extendStatics","isBoolean","val","MC_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","Default","colorPalette","errorState","matcher","isErrorState","optionsArray","groups","groupCounter","optionHeight","currentScrollPosition","optionOffset","arrayMap","array","iteratee","baseValues","object","props","objectValues","mcSelectScrollStrategyProviderFactory","reposition","getMcFormFieldMissingControlError","MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","inputType","sanitizeNumber","isFinite","getPrecision","arr","pow","value1","value2","precision","provider","scrollThrottle","openSidepanels","setPrototypeOf","__proto__","p","__assign","s","n","MC_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","computedStyle","removeChild","BidiModule","Second","Empty","_setLineClass","count","_resetClasses","_setClass","isAdd","ShowOnDirtyErrorStateMatcher","form","invalid","dirty","submitted","touched","McPseudoCheckbox","scrollbarMeasure","overflow","initScrollBarWidth","_scrollbarWidth","scrollDiv","scrollProp","McOptgroupBase","McOptgroupMixinBase","uniqueOptgroupIdCounter","labelId","[class.mc-optgroup-disabled]","[attr.aria-labelledby]","mostRecentViewValue","[class.mc-option-multiple]","MC_LABEL_GLOBAL_OPTIONS","StandardCurve","SharpCurve","topCenter","topLeft","topRight","rightTop","rightBottom","bottomCenter","bottomLeft","bottomRight","leftTop","leftBottom","minWidth","animateChild","McIconCSSStyler","McIconBase","_McIconMixinBase","iconName","McCleaner","McHint","McPrefix","McStepper","onStepUp","onStepDown","McSuffix","McFormFieldBase","_McFormFieldMixinBase","_labelId","hovered","_validateControlChild","_numberControl","hasStepper","_stepper","valueChanges","clearValue","hasCleaner","onHoverChanged","isHovered","connectionContainerRef","_shouldForward","_hint","_suffix","_prefix","_cleaner","[class.mc-form-field_invalid]","[class.mc-form-field_has-prefix]","[class.mc-form-field_has-suffix]","[class.mc-form-field_has-cleaner]","[class.mc-form-field_has-stepper]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","(mouseleave)","McFormFieldWithoutBorders","uniqueAutocompleteIdCounter","defaults"],"mappings":";;;;;;65CuHuBA,SAAgBg1E,GAAUC,EAAGxmD,GAEzB,QAASymD,KAAO1zE,KAAK2zE,YAAcF,EADnCG,GAAcH,EAAGxmD,GAEjBwmD,EAAElzE,UAAkB,OAAN0sB,EAAa5sB,OAAO6N,OAAO+e,IAAMymD,EAAGnzE,UAAY0sB,EAAE1sB,UAAW,GAAImzE,ICzBnF,QAAgBG,GAAUC,GAA4B,MAAsB,iBAARA,GAEpE,QAAgB7jC,GAAU3uC,GACtB,MAAgB,OAATA,GAAiB,GAAGA,GAAY,QCM3C,QAAgByyE,KACZ,OAAO,ECCX,QAAgBrwE,GAAyCswE,GACrD,MAAJ,UAAAjwE,GAWQ,QAARkwE,KAAA,IAAoB,GAApBv1E,MAAAm9B,EAAA,EAAoBA,EAApB6V,UAAAp0B,OAAoBue,IAAAn9B,EAApBm9B,GAAA6V,UAAA7V,EAAQ,IAAR13B,GAAAJ,EAAAuwB,MAAAt0B,KAEqBtB,IAFrBsB,WAFgBmE,GAAhBjE,WAAqC,IAMjC,MAfqBiF,GAAzB8uE,EAAAlwE,GACQ1D,OAARC,eAAY2zE,EAAZ1zE,UAAA,gBAAQ,WACI,MAAOP,MAAKE,eAGhB,SAAaoB,GACTtB,KAAKE,UAAYM,EAAAA,sBAAsBc,oCASnD2yE,GAfyBD,GCYzB,QAAgBvwE,GACZuwE,EACAE,GAEA,WAFJ,KAAAA,IAAIA,EAA6BvwE,GAAawwE,SAE9C,SAAApwE,GAwBQ,QAARkwE,KAAA,IAAoB,GAApBv1E,MAAAm9B,EAAA,EAAoBA,EAApB6V,UAAAp0B,OAAoBue,IAAAn9B,EAApBm9B,GAAA6V,UAAA7V,EAAQ,IAAR13B,GAAAJ,EAAAuwB,MAAAt0B,KACqBtB,IADrBsB,WAGYmE,GAAK8yB,MAAQi9C,IAErB,MA7BqB/uE,GAAzB8uE,EAAAlwE,GAIQ1D,OAARC,eAAY2zE,EAAZ1zE,UAAA,aAAQ,WACI,MAAOP,MAAKmhE,YAGhB,SAAU7/D,GAClB,GAAkB8yE,GAAe9yE,GAAS4yE,CAE1BE,KAAiBp0E,KAAKmhE,SAClBnhE,KAAKmhE,QACLnhE,KAAKsD,YAAY/B,cAAc2jB,UAAUqT,OAAO,MAAMv4B,KAAKmhE,QAG3DiT,GACAp0E,KAAKsD,YAAY/B,cAAc2jB,UAAUC,IAAI,MAAMivD,GAGvDp0E,KAAKmhE,OAASiT,oCAS9BH,GA7ByBD,GClBzB,QAAgBxwE,GAAiDwwE,EAASlnB,GACtE,WADJ,KAAAA,IAA0EA,EAA1E,GACA,SAAA/oD,GAWQ,QAARkwE,KAAA,IAAoB,GAApBv1E,MAAAm9B,EAAA,EAAoBA,EAApB6V,UAAAp0B,OAAoBue,IAAAn9B,EAApBm9B,GAAA6V,UAAA7V,EAAQ,IAAR13B,GAAAJ,EAAAuwB,MAAAt0B,KACqBtB,IADrBsB,WAFgBmE,GAAhBg6B,UAAoC2uB,IAKhC,MAdqB3nD,GAAzB8uE,EAAAlwE,GACQ1D,OAARC,eAAY2zE,EAAZ1zE,UAAA,gBAAQ,WACI,MAAOP,MAAKN,UAAY,EAAIM,KAAKm+B,eAGrC,SAAa78B,GACTtB,KAAKm+B,UAAqB,MAAT78B,EAAgBA,EAAQwrD,mCAQrDmnB,GAdyBD,GCsBzB,QAAgBh+D,GAAsDg+D,GAClE,MAAJ,UAAAjwE,GAYQ,QAARkwE,KAAA,IAAoB,GAApBv1E,MAAAm9B,EAAA,EAAoBA,EAApB6V,UAAAp0B,OAAoBue,IAAAn9B,EAApBm9B,GAAA6V,UAAA7V,EAAQ,IAAR13B,GAAAJ,EAAAuwB,MAAAt0B,KACqBtB,IADrBsB,WAVQmE,GAARkwE,YAA8B,EAMblwE,EAAjBkS,aAAgC,GAAI/M,GAAAA,UAoBhC,MA5BqBnE,GAAzB8uE,EAAAlwE,GAgBQkwE,EAAR1zE,UAAAkX,iBAAQ,WACR,GAAkBytD,GAAWllE,KAAKq0E,WAChBrhC,EAAShzC,KAAK6V,iBAAmB7V,KAAK4V,WACtC0+D,EAAUt0E,KAAKyU,mBAAqBzU,KAAK2V,yBACzCqF,EAAUhb,KAAK8V,UAAY9V,KAAK8V,UAAiB,QAAkB,KACnEmvD,EAAWqP,EAAQC,aAAav5D,EAASg4B,EAE3CiyB,KAAaC,IACbllE,KAAKq0E,WAAapP,EAClBjlE,KAAKqW,aAAanM,SAGlC+pE,GA5ByBD,GCmOzB,QAAgBzlD,GACZ21B,EACAt3B,EACA4B,GAGA,GAAIA,EAAalR,OAAQ,CAMrB,IAAK,GALCk3D,GAAe5nD,EAAQC,UACvB4nD,EAASjmD,EAAa3B,UAExB6nD,EAAe,EAEVtpC,EAAI,EAAGA,EAAI8Y,EAAc,EAAG9Y,IAC7BopC,EAAappC,GAAG5a,OAASgkD,EAAappC,GAAG5a,QAAUikD,EAAOC,IAC1DA,GAIR,OAAOA,GAGX,MAAO,GAWX,QAAgB/lD,GACZu1B,EACAywB,EACAC,EACAxlD,GAEJ,GAAUylD,GAAe3wB,EAAcywB,CAEnC,OAAIE,GAAeD,EAAgCC,EAE/CA,EAAeF,EAAeC,EAAwBxlD,EAC/CnX,KAAKC,IAAI,EAAG28D,EAAezlD,EAAculD,GAG7CC,ECjMX,QAASE,GAAeC,EAAYC,GAKhC,IAJJ,GAAQtrD,IAAS,EACPpM,EAAkB,MAATy3D,EAAgB,EAAIA,EAAMz3D,OACnCe,EAAS4b,MAAM3c,KAEZoM,EAAQpM,GACbe,EAAQqL,GAAUsrD,EAASD,EAAOrrD,GAASA,EAAOqrD,EAGtD,OAAO12D,GAEX,QAAS42D,GAAcC,EAAoCC,GACvD,MAAOL,GAASK,EAAQ,SAACtmE,GACrB,MAAOqmE,GAAQrmE,KAGvB,QAASumE,GAAgBF,GACrB,MAAiB,OAAVA,KAAsBD,EAAWC,EAAQ70E,OAAOsO,KAAKumE,IC/HhE,QAAgB//C,KACZ,MAAO/zB,OAAM,iEASjB,QAAgB+4B,KACZ,MAAO/4B,OAAM,sDAQjB,QAAgBg0B,KACZ,MAAOh0B,OAAM,qClHCjB,QAAgBi0E,GAAsC1pE,GAElD,MAAO,YAAM,MAAAA,GAAQyd,iBAAiBksD,cmH5B1C,QAAgBC,KACd,MAAOn0E,OAAM,oDjB8Cf,QAAgBo0E,KACZ,OAAStH,uBAAuB,GjGcpC,QAAgBI,GAAwC3iE,GACpD,MAAO,YAAM,MAAAA,GAAQyd,iBAAiBksD,cAuB1C,QAAgBvE,KACZ,MAAO3vE,OAAM,2MmHvFjB,QAAgBqoE,GAA+BgM,GAC3C,MAAOr0E,OAAM,eAAeq0E,EAAhC,kCzBDA,QAASC,GAAep0E,GACpB,OAAQq0E,SAASr0E,IAAUsf,MAAMtf,GAC3B,KACAA,EAGV,QAASs0E,GAAat0E,GACtB,GAAUu0E,GAAMv0E,EAAMsX,WAAWlJ,MAAM,IAEnC,OAAsB,KAAfmmE,EAAIv4D,OACL,EAECrF,KAAK69D,IAAI,GAAID,EAAI,GAAGv4D,QAG/B,QAAS6H,GAAI4wD,EAAgBC,GAC7B,GAAUC,GAAYh+D,KAAKC,IAAI09D,EAAaG,GAASH,EAAaI,GAI9D,OAAON,IAFMK,EAASE,EAAYD,EAASC,GAAaA,G0BjB5D,QAAgBlb,GAA2Bmb,GACvC,MAAO90E,OACH,uCAAuC80E,EAD/C,iIlCyDA,QAAgBvV,GAAsCh1D,GAClD,MAAO,YAAM,MAAAA,GAAQyd,iBAAiBksD,cmCxD1C,QAAgBpf,KACZ,KAAM90D,OAAM,kMAWhB,QAAgBwxD,KACZ,KAAMxxD,OAAM,+IAShB,QAAgB0xD,KACZ,KAAM1xD,OAAM,6I/CuChB,QAAgBuwD,KACZ,OACIa,iBAAiB,EACjBE,iBAAiB,EACjBT,UAAW,QACXE,UAAW,QACXlpC,cAAe,oCrF7BvB,QAAgBirC,GAAoCvoD,GAChD,MAAO,YAAM,MAAAA,GAAQyd,iBAAiBksD,c6Dwd1C,QAASpsB,GAAU6C,GAEf,QAASA,IAAuB,gBAARA,IAAmC,kBAARA,KAA4D,kBAA9B,GAAqB/xB,MAA6D,kBAA/B,GAAqBovB,MhBpS7J,QAAgB7G,GAA+B52C,GAC3C,MAAO,YAAM,MAAAA,GAAQyd,iBAAiBksD,YAAYa,eAAgB,MAWtE,QAAgBroC,GAAiC7gC,GAC7C,MAAO7L,OAAM,uBAAuB6L,EAAxC,iBlB/HA,QAASgd,GAAoB1a,EAAkC6mE,GAG3D,IAFJ,GAAQpjC,GAA6BzjC,EAAQhO,cAAcu/B,cAEhDkS,IAAWA,EAAO9tB,UAAUsa,SAAS,2BACxCwT,EAASA,EAAOlS,aAGpB,OAAOkS,GAASojC,EAAe9tD,KAAK,SAACC,GAAc,MAAAA,GAAU9jB,KAAO,EAAQA,KAAM,KpBuFtF,QAAgBgH,IAA+BE,GAC3C,MAAO,YAAM,MAAAA,GAAQyd,iBAAiBksD,YAAYa,eAAgB,MAWtE,QAAgB3kE,IAAiCvE,GAC7C,MAAO7L,OAAM,uBAAuB6L,EAAxC,iB8HxNA,QAAgB+G,MACZ,MAAOvM,GAAAA,QAAQ,UACXtG,EAAAA,MAAM,IAAKyB,EAAAA,OACP+tB,MAAO,UAEXxvB,EAAAA,MAAM,IAAMyB,EAAAA,OACR+tB,MAAO,OAEXhpB,EAAAA,WAAW,UAAWC,EAAAA,QAAQ,uCdKtC,GAAIgsE,IAAgB,SAASH,EAAGxmD,GAI5B,OAHA2mD,GAAgBvzE,OAAOg2E,iBAChBC,uBAA2Br8C,QAAS,SAAUw5C,EAAGxmD,GAAKwmD,EAAE6C,UAAYrpD,IACvE,SAAUwmD,EAAGxmD,GAAK,IAAK,GAAIspD,KAAKtpD,GAAOA,EAAEqW,eAAeizC,KAAI9C,EAAE8C,GAAKtpD,EAAEspD,MACpD9C,EAAGxmD,IASjBupD,GAAW,WAQlB,MAPAA,IAAWn2E,OAAOg7C,QAAU,SAAkB2tB,GAC1C,IAAK,GAAIyN,GAAGrrC,EAAI,EAAGsrC,EAAIhlC,UAAUp0B,OAAQ8tB,EAAIsrC,EAAGtrC,IAAK,CACjDqrC,EAAI/kC,UAAUtG,EACd,KAAK,GAAImrC,KAAKE,GAAOp2E,OAAOE,UAAU+iC,eAAel/B,KAAKqyE,EAAGF,KAAIvN,EAAEuN,GAAKE,EAAEF,IAE9E,MAAOvN,IAEJwN,GAASliD,MAAMt0B,KAAM0xC,YEhCnBilC,GAAmB,GAAIvrE,GAAAA,eAAwB,oBACxDsmD,WAAY,OACZpH,QAASypB,IAabzrE,GAAA,WAcI,QAAJA,GAA8DsuE,GAAA52E,KAA9D42E,qBAA8DA,EARlD52E,KAAZ62E,sBAAmC,EAGvB72E,KAAZmvD,UAA4C,gBAAbzI,WAAyBA,SAAWA,SAAW,KAGlE1mD,KAAZ82E,QAAwC,gBAAXh/D,SAAuBA,OAASA,OAAS,KAG1D9X,KAAK+2E,sBAAwB/2E,KAAK62E,uBAClC72E,KAAKg3E,yBACLh3E,KAAKi3E,uBACLj3E,KAAK62E,sBAAuB,GA+CxC,MA1CYvuE,GAAZ/H,UAAAw2E,kBAAI,WACI,MAAO/2E,MAAK42E,sBAAwBp8C,EAAAA,cAAgBx6B,KAAKk3E,cAIrD5uE,EAAZ/H,UAAA22E,WAAI,WAEI,MAAOl3E,MAAK82E,UAAY92E,KAAK82E,QAAmB,WAAK92E,KAAK82E,QAAiB,UAGvExuE,EAAZ/H,UAAAy2E,uBAAI,WACQh3E,KAAKmvD,YAAcnvD,KAAKmvD,UAAUgoB,SAClC18C,QAAQC,KACJ,+GAMJpyB,EAAZ/H,UAAA02E,qBAAI,WACI,GAAIj3E,KAAKmvD,WAAyC,kBAArB1sD,kBAAiC,CACtE,GAAkB20E,GAAcp3E,KAAKmvD,UAAUM,cAAc,MAEjD2nB,GAAYlyD,UAAUC,IAAI,0BAC1BnlB,KAAKmvD,UAAUvE,KAAKpyB,YAAY4+C,EAE5C,IAAkBC,GAAgB50E,iBAAiB20E,EAKnCC,IAA2C,SAA1BA,EAAcvrB,SAC/BrxB,QAAQC,KACJ,2IAMR16B,KAAKmvD,UAAUvE,KAAK0sB,YAAYF,oBA9D5C54E,KAACsE,EAAAA,SAADpE,OACIqE,SAAWw0E,EAAAA,YACXr0E,SAAWq0E,EAAAA,oDAYf/4E,KAAAknB,QAAA1d,aAAAxJ,KAAiB+T,EAAAA,WAAjB/T,KAA6B6T,EAAAA,OAA7B3T,MAAoCi4E,SAmDpCruE,SEpEI1E,QAAU,UACV4zE,OAAS,SACTp2E,MAAQ,QACR+yE,QAAU,SACVsD,MAAQ,IWbZnyB,GAAA,WAAA,QAAAA,MAIqB,sBAJrB9mD,KAACkD,EAAAA,UAADhD,OACIC,SAAU,sBACVuI,MAAQC,MAAO,eAEnBm+C,mBAOI,QAAJL,GAAwBC,EAAmCnC,GAAvD,GAAJ5+C,GAAAnE,IAAwBA,MAAxBklD,OAAwBA,EAAmCllD,KAA3D+iD,SAA2DA,EACnD/iD,KAAK03E,cAAc13E,KAAKklD,OAAO5nC,QAE/Btd,KAAKklD,OAAOh7B,QAAQrc,UAAU,WAC1B1J,EAAKuzE,cAAcvzE,EAAK+gD,OAAO5nC,UA0B3C,MAtBY2nC,GAAZ1kD,UAAAm3E,cAAI,SAAsBC,GAClB33E,KAAK43E,gBACS,IAAVD,GAAyB,IAAVA,EACf33E,KAAK63E,UAAU,MAAMF,EAAjC,SAA+C,GAC5BA,EAAQ,GACf33E,KAAK63E,UAAU,iBAAiB,IAIhC5yB,EAAZ1kD,UAAAq3E,cAAI,WACI53E,KAAK63E,UAAU,aAAa,GAC5B73E,KAAK63E,UAAU,aAAa,GAC5B73E,KAAK63E,UAAU,iBAAiB,IAG5B5yB,EAAZ1kD,UAAAs3E,UAAI,SAAkB3kB,EAAmB4kB,GAC7BA,EACA93E,KAAK+iD,SAASxhD,cAAc2jB,UAAUC,IAAI+tC,GAE1ClzD,KAAK+iD,SAASxhD,cAAc2jB,UAAUqT,OAAO26B,IAGzDjO,KAEAO,GAAA,WAAA,QAAAA,MAK2B,sBAL3BhnD,KAACsE,EAAAA,SAADpE,OACIqE,WACAG,SAAUoiD,IACVniD,cAAemiD,QAEnBE,KCnDAuyB,GAAA,WAAA,QAAAA,MAKA,MAHIA,GAAJx3E,UAAAg0E,aAAI,SAAav5D,EAA6Bg9D,GACtC,SAAUh9D,GAAWA,EAAQi9D,UAAYj9D,EAAQk9D,OAAUF,GAAQA,EAAKG,4BAHhF35E,KAACorB,EAAAA,aAKDmuD,KAGAv+D,GAAA,WAAA,QAAAA,MAbA,MAeIA,GAAJjZ,UAAAg0E,aAAI,SAAav5D,EAA6Bg9D,GACtC,SAAUh9D,GAAWA,EAAQi9D,UAAYj9D,EAAQo9D,SAAYJ,GAAQA,EAAKG,4BAHlF35E,KAACorB,EAAAA,WAADlrB,OAAcgzD,WAAY,8GAb1Bl4C,KCkBA6+D,GAAA,WAAA,QAAAA,KAear4E,KAAbmB,MAA4C,YAE/BnB,KAAbN,UAAiC,EACjC,sBAlBAlB,KAACC,EAAAA,UAADC,OACIK,cAAeC,EAAAA,kBAAkBC,KACjCL,qBAAqB,EACrBM,gBAAiBC,EAAAA,wBAAwBC,OACzCT,SAAU,qBACVE,QAAS,qqBACTC,SAAJ,4GACIoI,MACIC,MAAO,qBACPg+D,2BAA4B,4BAC5Bh0B,qBAAsB,sBACtB7pC,sBAAuB,kCAI/BnG,QAAA3C,KAAKiB,EAAAA,QAELC,WAAAlB,KAAKiB,EAAAA,SACL44E,KC/BA/iE,GAAA,WAAA,QAAAA,MAIqC,sBAJrC9W,KAACsE,EAAAA,SAADpE,OACIwE,SAAUm1E,IACVl1E,cAAek1E,QAEnB/iE,KCLAsjC,GAAA,WAuBI,QAAJA,GACkC8N,GAAA1mD,KAAlC0mD,SAAkCA,EATtB1mD,KAAZs4E,kBACQrrE,SAAU,WACVwC,IAAK,UACLkhB,MAAO,OACP3Y,OAAQ,OACRugE,SAAU,UAMVv4E,KAAKw4E,qBA9Bb,MASIn4E,QAAJC,eAAQs4C,EAARr4C,UAAA,sBAAI,WACI,MAAIP,MAAKy4E,gBACEz4E,KAAKy4E,iBAEhBz4E,KAAKw4E,qBAEEx4E,KAAKy4E,kDAkBhB7/B,EAAJr4C,UAAAi4E,mBAAI,WACJ,GAAcE,GAAY14E,KAAK0mD,SAAS+I,cAAc,MAG9C,KAAK,GAAMkpB,KAAc34E,MAAKs4E,iBACtBt4E,KAAKs4E,iBAAiBh1C,eAAeq1C,KACrCD,EAAU91E,MAAM+1E,GAAc34E,KAAKs4E,iBAAiBK,GAI5D34E,MAAK0mD,SAASkE,KAAKpyB,YAAYkgD,EAEvC,IAAc/nD,GAAQ+nD,EAAU5yC,YAAc4yC,EAAUtrC,WAEhDptC,MAAK0mD,SAASkE,KAAK0sB,YAAYoB,GAC/B14E,KAAKy4E,gBAAkB9nD,kBA5C/BnyB,KAACorB,EAAAA,WAADlrB,OACIgzD,WAAY,+CAuBhBlzD,SAAA4T,GAAApK,aAAAxJ,KAAS6T,EAAAA,OAAT3T,MAAgBo6C,EAAAA,wIA5BhBF,mBCOA,QAAAggC,MAA6B,MAA7BA,MAEaC,GAA8Dn1E,EAAck1E,IAGrFE,GAA0B,EAK9B/lD,GAAA,SAAAhvB,GAAA,QAAAgvB,KAAA,GAAA5uB,GAAA,OAAAJ,GAAAA,EAAAuwB,MAAAt0B,KAAA0xC,YAAA1xC,WAqBImE,GAAJ40E,QAAsB,qBAAqBD,OAC3C,MANgC3zE,GAAhC4tB,EAAAhvB,kBAhBAvF,KAACC,EAAAA,UAADC,OACIC,SAAU,cACV+H,SAAU,aACV5H,SAAJ,gIACIC,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,OACzC6H,QAAS,YACTpI,QAAS,2HACTqI,MACIC,MAAO,cACPke,KAAM,QACN2zD,+BAAgC,WAChCjzC,uBAAwB,sBACxBkzC,yBAA0B,iCAKlCxb,QAAAj/D,KAAKiB,EAAAA,SAILszB,GANgC8lD,IbN5B/lC,GAAkB,gBAIlB,QAAJ48B,GAAuBlpE,EAAyBgtB,OAAhD,KAAAA,IAAgDA,GAAhD,GAAuBxzB,KAAvBwG,OAAuBA,EAAyBxG,KAAhDwzB,YAAgDA,EAChD,MAAAk8C,MAeaz9C,GACT,GAAI7mB,GAAAA,eAAwC,8BAKhDynB,GAAA,WAkFI,QAAJA,GACyBtjB,EACAyU,EACgDgvB,EAC5CxiB,GAHJxwB,KAAzBuP,QAAyBA,EACAvP,KAAzBgkB,kBAAyBA,EACgDhkB,KAAzEgzC,OAAyEA,EAC5ChzC,KAA7BwwB,MAA6BA,EA5DNxwB,KAAvBu0B,kBAA2C,GAAI1vB,GAAAA,aAGlC7E,KAAbqW,aAA4B,GAAI/M,GAAAA,QAoBpBtJ,KAAZmX,IAAkB,aAAa27B,KAMnB9yC,KAAZo8B,WAAwB,EAWZp8B,KAAZE,WAAwB,EAYZF,KAAZizC,SAAsB,EAEVjzC,KAAZk5E,oBAAkC,GAwHlC,MArKI74E,QAAJC,eAAQuyB,EAARtyB,UAAA,iBAAI,WAEI,OAAQP,KAAKwzC,iBAAiBzL,aAAe,IAAIvnB,wCAIrDngB,OAAJC,eAAQuyB,EAARtyB,UAAA,gBAAI,WACI,MAAOP,MAAKgzC,QAAUhzC,KAAKgzC,OAAOn+B,0CAGtCxU,OAAJC,eAAQuyB,EAARtyB,UAAA,UAAI,WACI,MAAOP,MAAKmX,qCAKhB9W,OAAJC,eAAQuyB,EAARtyB,UAAA,gBAAI,WACI,MAAOP,MAAKo8B,2CAKhB/7B,OAAJC,eACQuyB,EADRtyB,UAAA,gBAAI,WAEI,MAAQP,MAAKwwB,OAASxwB,KAAKwwB,MAAM9wB,UAAaM,KAAKE,eAGvD,SAAaoB,GACTtB,KAAKE,UAAYM,EAAAA,sBAAsBc,oCAW3CjB,OAAJC,eAAQuyB,EAARtyB,UAAA,cAAI,WACI,MAAOP,MAAKizC,yCAchBpgB,EAAJtyB,UAAA++D,mBAAI,WAMI,GAAIt/D,KAAKo8B,UAAW,CAC5B,GAAkB7F,GAAYv2B,KAAKu2B,SAEnBA,KAAcv2B,KAAKk5E,sBACnBl5E,KAAKk5E,oBAAsB3iD,EAC3Bv2B,KAAKqW,aAAanM,UAK9B2oB,EAAJtyB,UAAAyB,YAAI,WACIhC,KAAKqW,aAAapG,YAGtB4iB,EAAJtyB,UAAAs1B,OAAI,WACS71B,KAAKo8B,YACNp8B,KAAKo8B,WAAY,EAEjBp8B,KAAKgkB,kBAAkB5e,eACvBpF,KAAKyzC,6BAIb5gB,EAAJtyB,UAAAw1B,SAAI,WACQ/1B,KAAKo8B,YACLp8B,KAAKo8B,WAAY,EAEjBp8B,KAAKgkB,kBAAkB5e,eACvBpF,KAAKyzC,6BAIb5gB,EAAJtyB,UAAA+E,MAAI,WACJ,GAAciK,GAAUvP,KAAKwzC,gBAEQ,mBAAlBjkC,GAAQjK,OACfiK,EAAQjK,SAShButB,EAAJtyB,UAAA4yC,gBAAI,WACSnzC,KAAKizC,UACNjzC,KAAKizC,SAAU,EACfjzC,KAAKgkB,kBAAkB5e,iBAS/BytB,EAAJtyB,UAAA6yC,kBAAI,WACQpzC,KAAKizC,UACLjzC,KAAKizC,SAAU,EACfjzC,KAAKgkB,kBAAkB5e,iBAK/BytB,EAAJtyB,UAAAowD,SAAI,WACI,MAAO3wD,MAAKu2B,WAIhB1D,EAAJtyB,UAAA2P,cAAI,SAActK,GAENA,EAAMwK,UAAY2oB,EAAAA,OAASnzB,EAAMwK,UAAY4oB,EAAAA,QAC7Ch5B,KAAK65B,uBAGLj0B,EAAM4W,mBAQdqW,EAAJtyB,UAAAs5B,qBAAI,WACS75B,KAAKN,WACNM,KAAKo8B,WAAYp8B,KAAK6U,WAAY7U,KAAKo8B,UAEvCp8B,KAAKgkB,kBAAkB5e,eACvBpF,KAAKyzC,0BAAyB,KAItC5gB,EAAJtyB,UAAAsrC,YAAI,WACI,MAAO7rC,MAAKN,SAAW,KAAO,KAGlCmzB,EAAJtyB,UAAAizC,eAAI,WACI,MAAOxzC,MAAKuP,QAAQhO,eAIhBsxB,EAAZtyB,UAAAkzC,yBAAI,SAAiCjgB,OAArC,KAAAA,IAAqCA,GAArC,GACQxzB,KAAKu0B,kBAAkB9tB,KAAK,GAAIipE,IAAwB1vE,KAAMwzB,oBAtMtEh1B,KAACC,EAAAA,UAADC,OACIC,SAAU,YACV+H,SAAU,WACVQ,MACIqM,kBAAmB,gBACnBpM,MAAO,YACPwsC,sBAAuB,WACvBwlC,6BAA8B,WAC9B1sC,oBAAqB,SACrBnlC,sBAAuB,WACvBF,OAAQ,KAERmjB,UAAW,yBACXvY,YAAa,yBAEjBnT,QAAS,ujBACTC,SAAJ,6NACIC,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,+CAlE7CZ,KAAIa,EAAAA,aAFJb,KAAIsJ,EAAAA,oBAuIJtJ,SAAA4T,GAAApK,aAAAxJ,KAAS+T,EAAAA,WAAT/T,KAAqB6T,EAAAA,OAArB3T,MAA4BuzB,QAtH5BzzB,KAASu0B,GAAT/qB,aAAAxJ,KAuHS+T,EAAAA,gCAhETjR,QAAA9C,KAAKiB,EAAAA,QAIL80B,oBAAA/1B,KAAK2J,EAAAA,SA+BLzI,WAAAlB,KAAKiB,EAAAA,SA+ILozB,KcpPAQ,GAAA,WAAA,QAAAA,MAK6B,sBAL7B70B,KAACsE,EAAAA,SAADpE,OACIqE,SAAUC,EAAAA,aAAcsS,IACxBpS,SAAU2vB,GAAUE,IACpB5vB,cAAe0vB,GAAUE,QAE7BM,KCVa+lD,GACT,GAAIhuE,GAAAA,eAA6B,2BCKxBH,GAA2CxD,EAAAA,QAAQ,iBAC5DtG,EAAAA,MAAM,OAAQyB,EAAAA,OAAQ4+C,QAAS,KAC/BrgD,EAAAA,MAAM,OAAQyB,EAAAA,OAAQ4+C,QAAS,KAC/BrgD,EAAAA,MAAM,QAASyB,EAAAA,OAAQ4+C,QAAS,KAChC75C,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,yCAChCD,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,6CCdhCyxE,cAAgB,8BAChBz1D,kBAAoB,8BACpBD,kBAAoB,4BACpB21D,WAAa,+BhBDJ7vE,IACTgG,KACIV,QAAU,SACVC,QAAU,MACVC,SAAU,SACVC,SAAU,UAEdqqE,WACIxqE,QAAU,SACVC,QAAU,MACVC,SAAU,SACVC,SAAU,UAEdsqE,SACIzqE,QAAU,QACVC,QAAU,MACVC,SAAU,QACVC,SAAU,UAEduqE,UACI1qE,QAAU,MACVC,QAAU,MACVC,SAAU,MACVC,SAAU,UAEd8T,OACIjU,QAAU,MACVC,QAAU,SACVC,SAAU,QACVC,SAAU,UAEdwqE,UACI3qE,QAAU,MACVC,QAAU,MACVC,SAAU,QACVC,SAAU,OAEdyqE,aACI5qE,QAAU,MACVC,QAAU,SACVC,SAAU,QACVC,SAAU,UAEdiU,QACIpU,QAAU,SACVC,QAAU,SACVC,SAAU,SACVC,SAAU,OAEd0qE,cACI7qE,QAAU,SACVC,QAAU,SACVC,SAAU,SACVC,SAAU,OAEd2qE,YACI9qE,QAAU,QACVC,QAAU,SACVC,SAAU,QACVC,SAAU,OAEd4qE,aACI/qE,QAAU,MACVC,QAAU,SACVC,SAAU,MACVC,SAAU,OAEdxH,MACIqH,QAAU,QACVC,QAAU,SACVC,SAAU,MACVC,SAAU,UAEd6qE,SACIhrE,QAAU,QACVC,QAAU,MACVC,SAAU,MACVC,SAAU,OAEd8qE,YACIjrE,QAAU,QACVC,QAAU,SACVC,SAAU,MACVC,SAAU,WAILvG,GAAsBysE,GAC/B3rE,GAAagG,IAAKhG,GAAauZ,MAAOvZ,GAAa0Z,OAAQ1Z,GAAa/B,OAG/Dg6C,GAA6B0zB,GACtC3rE,GAAagG,IAAKhG,GAAa+vE,QAAS/vE,GAAagwE,SAAUhwE,GAAauZ,MAAOvZ,GAAaiwE,SAChGjwE,GAAakwE,YAAalwE,GAAa0Z,OAAQ1Z,GAAaowE,WAAYpwE,GAAaqwE,YACrFrwE,GAAa/B,KAAM+B,GAAaswE,QAAStwE,GAAauwE,aAG7Ch4B,IACTvyC,IAAK,MACL+pE,QAAS,WACTC,SAAU,YACVz2D,MAAO,QACP02D,SAAU,YACVC,YAAa,eACbjyE,KAAM,OACNqyE,QAAS,WACTC,WAAY,cACZ72D,OAAQ,SACR02D,WAAY,cACZC,YAAa,gBjH1FJ1nD,GACT,GAAIhnB,GAAAA,eAAsC,6BASjCoK,IACT5O,QAASwrB,GACT9mB,MAAOC,EAAAA,SACPC,WAAY6pE,GkIjBHvjD,IAaTC,eAAgBtqB,EAAAA,QAAQ,kBACpBtG,EAAAA,MAAM,OAAQyB,EAAAA,OACV0gB,UAAW,YACX22D,SAAU,OACVz4B,QAAS,KAEb75C,EAAAA,WAAW,YAAa6oB,EAAAA,OACpB+gC,EAAAA,MAAM,iBAAkB2oB,EAAAA,gBACxBtyE,EAAAA,QAAQ,6CAEZD,EAAAA,WAAW,aACPC,EAAAA,QAAQ,qBAAsBhF,EAAAA,OAAQ4+C,QAAS,SASvDxvB,cAAevqB,EAAAA,QAAQ,iBACnBtG,EAAAA,MAAM,UAAWyB,EAAAA,OAAQ4+C,QAAS,KAClC75C,EAAAA,WAAW,mBACP/E,EAAAA,OAAQ4+C,QAAS,IACjB55C,EAAAA,QAAQ,qDC3CpBuyE,GAAA,WAAA,QAAAA,MAI8B,sBAJ9B37E,KAACkD,EAAAA,UAADhD,OACIC,SAAU,YACVuI,MAAQC,MAAO,kBAEnBgzE,KAGAC,GAAA,WACI,QAAJA,GAAuB92E,GAAAtD,KAAvBsD,YAAuBA,EACvB,MAAA82E,MAEaC,GAAqD52E,EAAW22E,GAAYz2E,GAAa8zE,OAGtGt6C,GAAA,SAAAp5B,GASI,QAAJo5B,GAAgBp9B,EAA8Cu6E,GAA1D,GAAJn2E,GACQJ,EADRK,KAAApE,KACcD,IADdC,WAGQD,GAAWwB,cAAc2jB,UAAUC,IAAIm1D,KAM/C,MAV4Bn1E,GAA5Bg4B,EAAAp5B,GAOIo5B,EAAJ58B,UAAA8kD,gBAAI,WACI,MAAOrlD,MAAKsD,YAAY/B,8BAhBhC/C,KAACC,EAAAA,UAADC,OACIC,SAAU,YACVG,SAAU,4BACVD,QAAS,wPACTK,gBAAiBC,EAAAA,wBAAwBC,OACzCL,cAAeC,EAAAA,kBAAkBC,KACjCgI,QAAS,iDA3BbzI,KAAIa,EAAAA,aA8BJb,KAAAuJ,OAAAC,aAAAxJ,KAAyCyJ,EAAAA,UAAzCvJ,MAAmD,gBASnDy+B,GAV4Bk9C,ICtB5Bp3E,GAAA,WAAA,QAAAA,MAe2B,sBAf3BzE,KAACsE,EAAAA,SAADpE,OACIqE,SACIC,EAAAA,aACAqF,EAAAA,WACA8L,EAAAA,gBAEJjR,SACIi6B,GACAg9C,IAEJh3E,cACIg6B,GACAg9C,QAGRl3E,KCxBAs3E,GAAA,WAAA,QAAAA,MAIwB,sBAJxB/7E,KAACC,EAAAA,UAADC,OACIC,SAAU,aACVG,SAAU,2EAEdy7E,mBCFA,QAAAnhE,MA2CA,MAAAA,oBC5CA,QAAAuvD,MAuBA,MAAAA,MCxBIvlE,GAAe,EAEnBo3E,GAAA,WAAA,QAAAA,KAQax6E,KAAbyE,GAA0B,WAAWrB,KACrC,sBATA5E,KAACkD,EAAAA,UAADhD,OACIC,SAAU,UACVuI,MACIC,MAAO,UACPE,YAAa,4BAIrB5C,KAAAjG,KAAKiB,EAAAA,SACL+6E,KCXAC,GAAA,WAAA,QAAAA,MAIA,sBAJAj8E,KAACkD,EAAAA,UAADhD,OACIC,SAAU,iBAGd87E,KCJAC,GAAA,WAAA,QAAAA,KAaa16E,KAAb0lE,OAA0C,GAAI7gE,GAAAA,aAEjC7E,KAAb6lE,SAA4C,GAAIhhE,GAAAA,aAWhD,MATI61E,GAAJn6E,UAAAo6E,SAAI,SAASlsE,GACLzO,KAAK0lE,OAAOj/D,OACZgI,EAAO+N,kBAGXk+D,EAAJn6E,UAAAq6E,WAAI,SAAWnsE,GACPzO,KAAK6lE,SAASp/D,OACdgI,EAAO+N,iCAxBfhe,KAACC,EAAAA,UAADC,OACIC,SAAU,aACVG,SAAU,iVAUd4mE,SAAAlnE,KAAK2J,EAAAA,SAEL09D,WAAArnE,KAAK2J,EAAAA,UAYLuyE,KC1BAG,GAAA,WAAA,QAAAA,MAIA,sBAJAr8E,KAACkD,EAAAA,UAADhD,OACIC,SAAU,iBAGdk8E,KCuBIz3E,GAAe,EAEnB03E,GAAA,WACI,QAAJA,GAAuBx3E,GAAAtD,KAAvBsD,YAAuBA,EACvB,MAAAw3E,MAEaC,GAA+Dt3E,EAAWq3E,IAEvF3oD,GAAA,SAAApuB,GAwDI,QAAJouB,GAAuB7uB,EAAiCW,GAApD,GAAJE,GACQJ,EADRK,KAAApE,KACcsD,IADdtD,WAAuBmE,GAAvBb,YAAuBA,EAAiCa,EAAxDF,mBAAwDA,EAJpDE,EAAJ62E,SAAe,uBAAuB53E,KAElCe,EAAJ82E,SAAuB,IARvB,MATiC91E,GAAjCgtB,EAAApuB,GAuBIouB,EAAJ5xB,UAAAi1B,mBAAI,WAAA,GAAJrxB,GAAAnE,IACQA,MAAKk7E,wBAEDl7E,KAAK6wE,SAASv6D,cACdtW,KAAKsD,YAAY/B,cAAc2jB,UAC1BC,IAAI,sBAAsBnlB,KAAK6wE,SAASv6D,aAEzCtW,KAAKm7E,gBAAkBn7E,KAAKo7E,aAC5Bp7E,KAAKq7E,SAAS3V,OAAO73D,UAAU7N,KAAK26E,SAASzjE,KAAKlX,OAClDA,KAAKq7E,SAASxV,SAASh4D,UAAU7N,KAAK46E,WAAW1jE,KAAKlX,SAK9DA,KAAK6wE,SAASx6D,aAAa1I,KAAKuoB,EAAAA,aAC3BroB,UAAU,WACP1J,EAAKF,mBAAmBmB,iBAG5BpF,KAAKm7E,gBACLn7E,KAAKm7E,eAAe9kE,aAAa1I,KAAKuoB,EAAAA,aACjCroB,UAAU,WACP1J,EAAKF,mBAAmBmB,gBAK5C,IAAck2E,GAAet7E,KAAK6wE,SAAS/6D,WAAa9V,KAAK6wE,SAAS/6D,UAAUwlE,cAAgBj3C,EAAAA,KAExF9d,GAAAA,MAAM+0D,GACDztE,UAAU,WAAM,MAAA1J,GAAKF,mBAAmBmB,kBAGjD+sB,EAAJ5xB,UAAAymC,sBAAI,WACIhnC,KAAKk7E,yBAGT/oD,EAAJ5xB,UAAAy1B,gBAAI,WAEIh2B,KAAKiE,mBAAmB6gB,iBAG5BqN,EAAJ5xB,UAAAg7E,WAAI,SAAW9sE,GACPA,EAAO5I,kBAEH7F,KAAK6wE,UAAY7wE,KAAK6wE,SAAS/6D,WAC/B9V,KAAK6wE,SAAS/6D,UAAU2gC,SAIhCtkB,EAAJ5xB,UAAAgY,iBAAI,SAAiB9J,GACTzO,KAAK6wE,SAASt4D,kBACdvY,KAAK6wE,SAASt4D,iBAAiB9J,IAIvC0jB,EAAJ5xB,UAAAsd,UAAI,SAAUjY,GAEFA,EAAMwK,UAAYC,EAAAA,QAAUrQ,KAAK6wE,SAASz6D,SAAWpW,KAAKw7E,aACtDx7E,KAAK6wE,UAAY7wE,KAAK6wE,SAAS/6D,WAC/B9V,KAAK6wE,SAAS/6D,UAAU2gC,QAG5B7wC,EAAM4W,mBAId2V,EAAJ5xB,UAAAk7E,eAAI,SAAeC,GACPA,IAAc17E,KAAKi7E,UACnBj7E,KAAKi7E,QAAWS,EAChB17E,KAAKiE,mBAAmBmB,iBAIhC+sB,EAAJ5xB,UAAAo6E,SAAI,WACQ36E,KAAKm7E,gBACLn7E,KAAKm7E,eAAezV,OAAO1lE,KAAKm7E,eAAexV,OAIvDxzC,EAAJ5xB,UAAAq6E,WAAI,WACQ56E,KAAKm7E,gBACLn7E,KAAKm7E,eAAetV,SAAS7lE,KAAKm7E,eAAexV,OAQzDxzC,EAAJ5xB,UAAAixE,0BAAI,WACI,MAAOxxE,MAAK27E,wBAA0B37E,KAAKsD,aAI/C6uB,EAAJ5xB,UAAAq7E,eAAI,SAAejyB,GACnB,GAAc7zC,GAAY9V,KAAK6wE,SAAW7wE,KAAK6wE,SAAS/6D,UAAY,IAE5D,OAAOA,IAAaA,EAAU6zC,IAIxBx3B,EAAd5xB,UAAA26E,sBAAI,WACI,IAAKl7E,KAAK6wE,SACN,KAAM0E,MAIdl1E,OAAJC,eAAQ6xB,EAAR5xB,UAAA,eAAI,WACI,MAAOP,MAAK67E,OAAS77E,KAAK67E,MAAMv+D,OAAS,mCAG7Cjd,OAAJC,eAAQ6xB,EAAR5xB,UAAA,iBAAI,WACI,MAAOP,MAAK87E,SAAW97E,KAAK87E,QAAQx+D,OAAS,mCAGjDjd,OAAJC,eAAQ6xB,EAAR5xB,UAAA,iBAAI,WACI,MAAOP,MAAK+7E,SAAW/7E,KAAK+7E,QAAQz+D,OAAS,mCAGjDjd,OAAJC,eAAQ6xB,EAAR5xB,UAAA,kBAAI,WACI,MAAOP,MAAKg8E,UAAYh8E,KAAKg8E,SAAS1+D,OAAS,mCAGnDjd,OAAJC,eAAQ6xB,EAAR5xB,UAAA,kBAAI,WACI,QAASP,KAAKq7E,0CAGlBh7E,OAAJC,eAAQ6xB,EAAR5xB,UAAA,sBAAI,WACI,SAAOP,KAAKw7E,YACRx7E,KAAK6wE,UACL7wE,KAAK6wE,SAAS/6D,aACR9V,KAAK6wE,SAAS/6D,UAAUxU,QAAUtB,KAAK6wE,SAASnxE,2CAK9DW,OAAJC,eAAQ6xB,EAAR5xB,UAAA,gBAAI,WACI,MAAOP,MAAK6wE,UAAY7wE,KAAK6wE,SAASnxE,0CAG1CW,OAAJC,eAAQ6xB,EAAR5xB,UAAA,sBAAI,WACI,MAAOP,MAAKm7E,iBACPn7E,KAAKN,WAEFM,KAAKm7E,eAAe/kE,SACpBpW,KAAKi7E,yDA9MrBz8E,KAACC,EAAAA,UAADC,OACIC,SAAU,gBACV+H,SAAU,cACV5H,SAAJ,iqBAIID,QAAS,+rEACbqI,MACQC,MAAR,gBACQ80E,gCAAR,sBACA30E,sBAAA,oBACQ40E,mCAAR,YACQC,mCAAR,YACQC,oCAAR,iBACQC,oCAAR,iBACQljB,qBAAR,mBACQmjB,uBAAR,8BACQC,qBAAR,4BACQC,sBAAR,6BACQC,mBAAoB,0BACpBC,mBAAR,0BACQC,qBAAsB,4BACtBC,qBAAR,4BACQ5qE,YAAR,oBACQo/C,eAAR,uBACQyrB,eAAR,yBAEA51E,QAAA,SACAlI,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,WAIA+yB,EAAA2Q,eAAA,WAAA,QACAtkC,KAAAa,EAAAA,2DAhEAwxE,WAAAryE,KAAAk0B,EAAAA,aAAAh0B,MAAA0a,MAJA+hE,iBAAA38E,KAAqBk0B,EAAAA,aAArBh0B,MAAAiqE,4FAyEAmT,UAAAt9E,KAAAo0B,EAAAA,gBAAAl0B,MAAAm8E,MACAkB,UAAAv9E,KAAAo0B,EAAAA,gBAAAl0B,MAAA+7E,MACAuB,WAAAx9E,KAAKo0B,EAAAA,gBAALl0B,MAAA67E,MAEAoB,yBAAAn9E,KAAA0J,EAAAA,UAAAxJ,MAAA,0BAEAyzB,GACA4oD,IAEA+B,GAAA,yBAoKA,sBAFAt+E,KAAAkD,EAAAA,UAAAhD,OAAAC,SAAA,2CAKA+H,SAAA,6EAHAo2E,KC9OAxpD,GAAA,WAAA,QAAAA,MAsBA,sBAtBA90B,KAACsE,EAAAA,SAADpE,OACIyE,cACIgvB,GACA2qD,GACAtC,GACAC,GACAI,GACAN,GACAG,IAEJ33E,SAAUC,EAAAA,aAAcC,IACxBC,SACIivB,GACA2qD,GACAtC,GACAC,GACAI,GACAN,GACAG,QAIRpnD,K3CTIypD,GAA8B,EAElClP,GAAA,WACI,QAAJA,GAAuBrnE,EAA+B8mB,GAA/BttB,KAAvBwG,OAAuBA,EAA+BxG,KAAtDstB,OAAsDA,EACtD,MAAAugD,MAUaE,GACT,GAAI3iE,GAAAA,eAA6C,mCAC7CsmD,WAAY,OACZpH,QAASkrB,IAQjBlI,GAAA,WA8FI,QAAJA,GACgBtpD,EACAjkB,EACiCi9E,GAFjCh9E,KAAhBgkB,kBAAgBA,EACAhkB,KAAhBD,WAAgBA,EAlFZC,KAAJyE,GAAiB,mBAAmBs4E,KAMhC/8E,KAAJwtE,WAAyB,EAWZxtE,KAAbguE,YAA4D,KASrChuE,KAAvB8tE,eACQ,GAAIjpE,GAAAA,aAGW7E,KAAvB+1D,OAAoD,GAAIlxD,GAAAA,aAGjC7E,KAAvB2mB,OAAoD,GAAI9hB,GAAAA,aAoB5C7E,KAAZ4hD,cAyBY5hD,KAAZutE,SAA+B,EAOvBvtE,KAAKqtE,yBAA2B2P,EAAS9O,sBAmCjD,MAjFI7tE,QAAJC,eAAQgtE,EAAR/sE,UAAA,iBAAI,WACI,MAAOP,MAAK4hD,gBAGhB,SACctgD,GADd,GAAJ6C,GAAAnE,IAEYsB,IAASA,EAAMgc,SACfhc,EAAMoO,MAAM,KACPG,QAAQ,SAACqjD,GAAc,MAAA/uD,GAAKy9C,WAAWsR,EAAU1yC,SAAU,IAEhExgB,KAAKD,WAAWwB,cAAc2xD,UAAY,qCAUlD7yD,OAAJC,eACQgtE,EADR/sE,UAAA,6BAAI,WAEI,MAAOP,MAAKqtE,4BAGhB,SAA0B/rE;gBACtBtB,KAAKqtE,uBAAyB7sE,EAAAA,sBAAsBc,oCAKxDjB,OAAJC,eAAQgtE,EAAR/sE,UAAA,cAAI,WACI,MAAOP,MAAKutE,SAAWvtE,KAAKwtE,eAGhC,SAAWlsE,GACPtB,KAAKutE,QAAUjsE,mCAanBgsE,EAAJ/sE,UAAAi1B,mBAAI,WACIx1B,KAAK+tB,WAAa,GAAI0U,GAAAA,2BAAqCziC,KAAK4sB,SAChE5sB,KAAKytE,iBAGTH,EAAJ/sE,UAAAmtE,aAAI,SAAah/C,GACL1uB,KAAKyuB,QACLzuB,KAAKyuB,MAAMltB,cAAcmtB,UAAYA,IAI7C4+C,EAAJ/sE,UAAAotE,aAAI,WACI,MAAO3tE,MAAKyuB,MAAQzuB,KAAKyuB,MAAMltB,cAAcmtB,UAAY,GAG7D4+C,EAAJ/sE,UAAAktE,cAAI,WACIztE,KAAKwtE,YAAcxtE,KAAK4sB,QAAQtP,OAChCtd,KAAK4hD,WAAW,2BAA6B5hD,KAAKwtE,UAClDxtE,KAAK4hD,WAAW,2BAA6B5hD,KAAKwtE,UAElDxtE,KAAKgkB,kBAAkB5e,gBAG3BkoE,EAAJ/sE,UAAAqtE,gBAAI,SAAgBtgD,GACpB,GAAc1nB,GAAQ,GAAIioE,IAA4B7tE,KAAMstB,EAEpDttB,MAAK8tE,eAAernE,KAAKb,IAG7B0nE,EAAJ/sE,UAAA24B,UAAI,SAAUtzB,GACN5F,KAAK+tB,WAAWmL,UAAUtzB,mBApIlCpH,KAACC,EAAAA,UAADC,OACIC,SAAU,kBACV+H,SAAU,iBACV5H,SAAJ,sJACID,QAAS,yuBACTE,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,OACzC8H,MAAQC,MAAO,mBACfR,YACMC,QAASqrB,GAA4BnrB,YAAawmE,4CAzD5D9uE,KAAIsJ,EAAAA,oBAGJtJ,KAAIa,EAAAA,aA8IJb,SAAA4T,GAAApK,aAAAxJ,KAAS6T,EAAAA,OAAT3T,MAAgBqvE,2BA3EhBjvE,WAAAN,KAAK0J,EAAAA,UAALxJ,MAAeoL,EAAAA,eAEf2kB,QAAAjwB,KAAK0J,EAAAA,UAALxJ,MAAe,WAEfkuB,UAAApuB,KAAKo0B,EAAAA,gBAALl0B,MAAqBm0B,IAAYC,aAAa,MAE9CtE,eAAAhwB,KAAKo0B,EAAAA,gBAALl0B,MAAqBq0B,MAGrBi7C,cAAAxvE,KAAKiB,EAAAA,QAMLwuE,aAAAzvE,KAAKiB,EAAAA,QAGLquE,iBAAAtvE,KAAK2J,EAAAA,SAIL4tD,SAAAv3D,KAAK2J,EAAAA,SAGLwe,SAAAnoB,KAAK2J,EAAAA,SAUL+c,YAAA1mB,KAAKiB,EAAAA,MAALf,MAAW,WAgBXwvE,wBAAA1vE,KAAKiB,EAAAA,SA6DL6tE,KClLAa,GAAA,WAKI,QAAJA,GAAuBpuE,GAAAC,KAAvBD,WAAuBA,EACvB,sBANAvB,KAACkD,EAAAA,UAADhD,OACIC,SAAU,yBACV+H,SAAU,+DATdlI,KAAoBa,EAAAA,cAapB8uE,KlG6CaC,GACT,GAAIhjE,GAAAA,eAAsC,mCAOjCijE,IACTznE,QAASwnE,GACT9iE,MAAOC,EAAAA,SACPC,WAAY8iE,GAOHC,IACT3nE,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAW,WAAM,MAAAynE,MAC9BxnE,OAAO,GAcXwnE,GAAA,WAyGI,QAAJA,GACgBzuE,EACAmjC,EACAlf,EACArY,EACA8iE,EACiC1iE,EACrB4nB,EACQk4B,EACUnF,EAE9BhzB,GAXZ,GAAJvvB,GAAAnE,IACgBA,MAAhBD,WAAgBA,EACAC,KAAhBkjC,iBAAgBA,EACAljC,KAAhBgkB,kBAAgBA,EACAhkB,KAAhB2L,QAAgBA,EACA3L,KAAhByuE,KAAgBA,EAEYzuE,KAA5B2zB,IAA4BA,EACQ3zB,KAApC6rD,UAAoCA,EACU7rD,KAA9C0mD,SAA8CA,EAE9B1mD,KAAhB0zB,cAAgBA,EAlGH1zB,KAAb0uE,iBAAqEr6C,EAAAA,MAAM,WACnE,MAAIlwB,GAAKwqE,cAAgBxqE,EAAKwqE,aAAa/hD,QAChCrG,EAAAA,MAAnB+N,UAAA,GAA4BnwB,EAAKwqE,aAAa/hD,QAAQ/Q,IAAI,SAACyR,GAAW,MAAAA,GAAOiH,qBAK9DpwB,EAAKsqE,KAAKj6C,SACZ7qB,eACAgE,KAAK2Y,EAAAA,KAAK,GAAImO,EAAAA,UAAU,WAAM,MAAAtwB,GAAKuqE,sBA6BrB1uE,KAA3B4uE,sBAA2D,MAe/C5uE,KAAZ6uE,uBAAoC,EAExB7uE,KAAZ8uE,iBAAuC,EAM3B9uE,KAAZ+uE,oBAAiC,EAcrB/uE,KAAZgvE,qBAAmC5qC,EAAAA,aAAaC,MAOpCrkC,KAAZivE,oBAAiC,EAGZjvE,KAArBkvE,oBAA2C,GAAI5lE,GAAAA,QAuC3CtJ,KAAJ8a,SAAqC,aAIjC9a,KAAJqc,UAA4B,aA8KhBrc,KAAZmvE,kBAAgC,WAIxBhrE,EAAK8qE,mBAAqB9qE,EAAKuiD,SAAS+a,gBAAkBt9D,EAAKpE,WAAWwB,eAAiB4C,EAAKoxB,WA7M1E,mBAAXzd,SACP22D,EAAK92D,kBAAkB,WACnBG,OAAOtH,iBAAiB,OAAQrM,EAAKgrE,qBAI7CnvE,KAAK+L,eAAiBA,EAwb9B,MAthBI1L,QAAJC,eAAQkuE,EAARjuE,UAAA,oBAAI,WACI,MAAIP,MAAK2uE,cAAgB3uE,KAAK2uE,aAAa5gD,WAChC/tB,KAAK2uE,aAAa5gD,WAAWwL,WAGjC,sCAGXl5B,OAAJC,eAAQkuE,EAARjuE,UAAA,iBAAI,WACI,MAAOP,MAAK8uE,iBAAmB9uE,KAAK2uE,aAAanB,2CAsBrDntE,OAAJC,eACQkuE,EADRjuE,UAAA,4BAAI,WAEI,MAAOP,MAAK6uE,2BAGhB,SAAyBvtE,GACrBtB,KAAK6uE,sBAAwBruE,EAAAA,sBAAsBc,oCA4DvDktE,EAAJjuE,UAAAyB,YAAI,WAE0B,mBAAX8V,SACPA,OAAO/H,oBAAoB,OAAQ/P,KAAKmvE,mBAG5CnvE,KAAKgvE,qBAAqBz3D,cAC1BvX,KAAK+uE,oBAAqB,EAC1B/uE,KAAKovE,eACLpvE,KAAKkvE,oBAAoBj/D,YAY7Bu+D,EAAJjuE,UAAA8uE,UAAI,WACIrvE,KAAKsvE,iBAGTd,EAAJjuE,UAAAgvE,WAAI,WACSvvE,KAAK8uE,kBAEN9uE,KAAKu1B,WACLv1B,KAAK2uE,aAAahoD,OAAOlgB,OAG7BzG,KAAK2uE,aAAaj8D,OAAS1S,KAAK8uE,iBAAkB,EAE9C9uE,KAAK+M,YAAc/M,KAAK+M,WAAWyB,gBACnCxO,KAAK+M,WAAWwB,SAChBvO,KAAKwvE,2BAA2Bj4D,eAK/BvX,KAAK+uE,oBAKN/uE,KAAKgkB,kBAAkBc,kBAQ/B0pD,EAAJjuE,UAAA8N,eAAI,WACQrO,KAAK8uE,iBACL9uE,KAAe,WAAEqO,kBAQzBhO,OAAJC,eAAQkuE,EAARjuE,UAAA,2BAAI,WAAA,GAAJ4D,GAAAnE,IACQ,OAAOumB,GAAAA,MACHvmB,KAAK0uE,iBACL1uE,KAAK2uE,aAAa5gD,WAAW4M,OAAOhtB,KAAKwY,EAAAA,OAAO,WAAM,MAAAhiB,GAAK2qE,mBAC3D9uE,KAAKkvE,oBACLlvE,KAAKyvE,wBACLzvE,KAAK+M,WACD/M,KAAK+M,WAAWuB,cAAcX,KAAKwY,EAAAA,OAAO,WAAM,MAAAhiB,GAAK2qE,mBACrDvnC,EAAAA,MACN55B,KAEEkO,EAAAA,IAAI,SAACjW,GAAU,MAAAA,aAAiB8pE,IAA0B9pE,EAAQ,yCAK1E4oE,EAAJjuE,UAAA2F,WAAI,SAAW5E,GAAX,GAAJ6C,GAAAnE,IACQ85B,SAAQC,QAAQ,MAAMC,KAAK,WAAM,MAAA71B,GAAKwrE,gBAAgBruE,MAI1DktE,EAAJjuE,UAAA4F,iBAAI,SAAiBC,GACbpG,KAAK8a,SAAW1U,GAIpBooE,EAAJjuE,UAAA8F,kBAAI,SAAkBD,GACdpG,KAAKqc,UAAYjW,GAIrBooE,EAAJjuE,UAAA+F,iBAAI,SAAiBC,GACbvG,KAAKD,WAAWwB,cAAc7B,SAAW6G,GAG7CioE,EAAJjuE,UAAA2P,cAAI,SAActK,GAElB,GAAcwK,GAAUxK,EAAMwK,OAUtB,IAJIA,IAAYC,EAAAA,QACZzK,EAAM4W,iBAGNxc,KAAK4vE,cAAgBx/D,IAAY2oB,EAAAA,OAAS/4B,KAAKu1B,UAC/Cv1B,KAAK4vE,aAAa/1C,uBAClB75B,KAAKuzD,kBACL3tD,EAAM4W,qBACH,IAAIxc,KAAK2uE,aAAc,CACtC,GAAkBkB,GAAiB7vE,KAAK2uE,aAAa5gD,WAAWwL,UAEhDv5B,MAAKu1B,WAAanlB,IAAY+2D,EAAAA,IAC9BnnE,KAAK2uE,aAAaz1C,UAAUtzB,GACrBwK,IAAYuoB,EAAAA,YAAc34B,KAAK8vE,WACtC9vE,KAAKqvE,WAGrB,IAAkB32C,GAAatoB,IAAYwoB,EAAAA,UAAYxoB,IAAYuoB,EAAAA,YAEnDD,GAAc14B,KAAK2uE,aAAa5gD,WAAWwL,aAAes2C,IAC1D7vE,KAAK+vE,mBAKjBvB,EAAJjuE,UAAAyvE,YAAI,SAAYpqE,GAChB,GAAc05B,GAAS15B,EAAY,OACvBtE,EAAgCg+B,EAAOh+B,KAGvB,YAAhBg+B,EAAO9gC,OACP8C,EAAkB,KAAVA,EAAe,KAAOoB,WAAWpB,IAQzCtB,KAAKiwE,gBAAkB3uE,IACvBtB,KAAKiwE,cAAgB3uE,EACrBtB,KAAK8a,SAASxZ,GAEVtB,KAAK8vE,WAAa9vE,KAAK0mD,SAAS+a,gBAAkB77D,EAAM05B,QACxDt/B,KAAKqvE,cAKjBb,EAAJjuE,UAAA2vE,YAAI,WACSlwE,KAAKivE,mBAECjvE,KAAK8vE,YACZ9vE,KAAKiwE,cAAgBjwE,KAAKD,WAAWwB,cAAcD,MACnDtB,KAAKsvE,iBAHLtvE,KAAKivE,oBAAqB,GAOlCT,EAAJjuE,UAAAk8B,YAAI,SAAYhuB,GACJzO,KAAK8vE,WAAa9vE,KAAK0mD,SAAS+a,gBAAkBhzD,EAAO6wB,QACzDt/B,KAAKqvE,aAKLb,EAAZjuE,UAAAkvE,sBAAI,WAAA,GAAJtrE,GAAAnE,IACQ,OAAKA,MAAK0mD,SAEH3vC,EAAAA,UAAsB/W,KAAK0mD,SAAU,SACvC/4C,KAAKwY,EAAAA,OAAO,SAACvgB,GAC1B,GAAsBuqE,GAAcvqE,EAAY,OAC1BimD,EAAY1nD,EAAK0nD,UACnB1nD,EAAK0nD,UAAUvoD,YAAY/B,cAAgB,IAE/C,OAAO4C,GAAK2qE,iBACRqB,IAAgBhsE,EAAKpE,WAAWwB,iBAC9BsqD,IAAcA,EAAUrsB,SAAS2wC,OAChChsE,EAAK4I,aAAe5I,EAAK4I,WAAWsC,eAAemwB,SAAS2wC,MAX9C5oC,EAAAA,GAAa,OAmCtCinC,EAAZjuE,UAAAwvE,eAAI,WACJ,GAAcrmD,GAAQ1pB,KAAK2uE,aAAa5gD,WAAWM,iBAAmB,EACxDC,EAAaC,EAA6B7E,EAC5C1pB,KAAK2uE,aAAa/hD,QAAS5sB,KAAK2uE,aAAangD,cAE3C4hD,EAAoBzhD,EACtBjF,EAAQ4E,EAjYsB,GAmY9BtuB,KAAK2uE,aAAahB,eAhYW,IAoYjC3tE,MAAK2uE,aAAajB,aAAa0C,IAO3B5B,EAAZjuE,UAAA8vE,0BAAI,WAAA,GAAJlsE,GAAAnE,KACcswE,EAActwE,KAAKyuE,KAAKj6C,SAAS7qB,eAClCgE,KAAK2Y,EAAAA,KAAK,IACTiqD,EAAgBvwE,KAAK2uE,aAAa/hD,QAAQ1C,QAC3Cvc,KACG6iE,EAAAA,IAAI,WAAM,MAAArsE,GAAKgK,iBAAiBs/B,wBAGhCspB,EAAAA,MAAM,GAId,OAAOxwC,GAAAA,MAAM+pD,EAAaC,GACrB5iE,KAGG8mB,EAAAA,UAAU,WAQN,MAPAtwB,GAAKovD,kBACLpvD,EAAKwqE,aAAalB,gBAEdtpE,EAAKoxB,WACLpxB,EAAe,WAAEkK,iBAGdlK,EAAKssE,sBAGhBnqD,EAAAA,KAAK,IAGRzY,UAAU,SAACjI,GAAU,MAAAzB,GAAKusE,iBAAiB9qE,MAI5C4oE,EAAZjuE,UAAA6uE,aAAI,WACQpvE,KAAK+M,aACL/M,KAAKuvE,aACLvvE,KAAK+M,WAAW6C,UAChB5P,KAAK+M,WAAa,OAIlByhE,EAAZjuE,UAAAovE,gBAAI,SAAwBruE,GAC5B,GAAcqvE,GAAY3wE,KAAK2uE,cAAgB3uE,KAAK2uE,aAAaX,YACrDhuE,KAAK2uE,aAAaX,YAAY1sE,GAC9BA,EAIEsvE,EAA0B,MAAbD,EAAoBA,EAAY,EAI/C3wE,MAAK6rD,UACL7rD,KAAK6rD,UAAUglB,SAASvvE,MAAQsvE,EAEhC5wE,KAAKD,WAAWwB,cAAcD,MAAQsvE,EAG1C5wE,KAAKiwE,cAAgBW,GAOjBpC,EAAZjuE,UAAAmwE,iBAAI,SAAyB9qE,GACjBA,GAASA,EAAMY,SACfxG,KAAK8wE,4BAA4BlrE,EAAMY,QACvCxG,KAAK2vE,gBAAgB/pE,EAAMY,OAAOlF,OAClCtB,KAAK8a,SAASlV,EAAMY,OAAOlF,OAC3BtB,KAAKD,WAAWwB,cAAc+D,QAE9BtF,KAAK2uE,aAAaf,gBAAgBhoE,EAAMY,SAG5CxG,KAAKuvE,cAIDf,EAAZjuE,UAAAuwE,4BAAI,SAAoC/wC,GAChC//B,KAAK2uE,aAAa/hD,QAAQ/c,QAAQ,SAACyd,GAC3BA,IAAWyS,GAAQzS,EAAOC,UAC1BD,EAAOyI,cAKXy4C,EAAZjuE,UAAA+uE,cAAI,WAAA,GAAJnrE,GAAAnE,IACQ,KAAKA,KAAK2uE,aACN,KAAMoC,IAGlB,IAAYhkE,GAAa/M,KAAK+M,UAEtB,IAAKA,EAwBE,CACcA,EAAWgE,YAA4B,iBAG/CigE,UAAUhxE,KAAKixE,uBACxBlkE,EAAWmkE,YAAavgD,MAAO3wB,KAAKmxE,sBA5BpCnxE,MAAKyQ,OAAS,GAAIqX,GAAAA,eAAe9nB,KAAK2uE,aAAa7vE,SAAUkB,KAAKkjC,kBAClEn2B,EAAa/M,KAAK2L,QAAQuC,OAAOlO,KAAKoxE,oBACtCpxE,KAAK+M,WAAaA,EAIlBA,EAAW0Z,gBAAgB5Y,UAAU,SAACjI,IAI9BA,EAAMwK,UAAYC,EAAAA,QAAWzK,EAAMwK,UAAYwoB,EAAAA,UAAYhzB,EAAMqzB,UACjE90B,EAAKovD,kBACLpvD,EAAK+qE,oBAAoBhlE,UAI7BlK,KAAK0zB,gBACL1zB,KAAKgvE,qBAAuBhvE,KAAK0zB,cAAc9uB,SAASiJ,UAAU,WAC1D1J,EAAKoxB,WAAaxoB,GAClBA,EAAWmkE,YAAavgD,MAAOxsB,EAAKgtE,oBAYhDpkE,KAAeA,EAAWyB,gBAC1BzB,EAAW4D,OAAO3Q,KAAKyQ,QACvBzQ,KAAKwvE,2BAA6BxvE,KAAKqwE,4BAGnD,IAAcgB,GAAUrxE,KAAKu1B,SAErBv1B,MAAK2uE,aAAalB,gBAClBztE,KAAK2uE,aAAaj8D,OAAS1S,KAAK8uE,iBAAkB,EAI9C9uE,KAAKu1B,WAAa87C,IAAYrxE,KAAKu1B,WACnCv1B,KAAK2uE,aAAa5Y,OAAOtvD,QAIzB+nE,EAAZjuE,UAAA6wE,iBAAI,WACI,MAAO,IAAIpoD,GAAAA,eACP7a,iBAAkBnO,KAAKkR,qBACvBnF,eAAgB/L,KAAK+L,iBACrB4kB,MAAO3wB,KAAKmxE,gBACZ3xE,UAAWQ,KAAK2zB,OAIhB66C,EAAZjuE,UAAA2Q,mBAAI,WAyBI,MAxBAlR,MAAKmO,iBAAmBnO,KAAK2L,QAAQsB,WAChCC,oBAAoBlN,KAAKixE,uBACzB7jE,wBAAuB,GACvBkkE,UAAS,GACThkE,gBAEOyB,QAAS,QACTC,QAAS,SACTC,SAAU,QACVC,SAAU,QAGVH,QAAS,QACTC,QAAS,MACTC,SAAU,QACVC,SAAU,SAKVd,WAAY,iCAIjBpO,KAAKmO,kBAGRqgE,EAAZjuE,UAAA0wE,oBAAI,WACI,MAAIjxE,MAAKuxE,YACEvxE,KAAKuxE,YAAYxxE,WAGrBC,KAAK6rD,UAAY7rD,KAAK6rD,UAAU2lB,4BAA8BxxE,KAAKD,YAGtEyuE,EAAZjuE,UAAA4wE,cAAI,WACI,MAAOnxE,MAAK2uE,aAAaV,YAAcjuE,KAAKyxE,eAvkBH,GA0kBrCjD,EAAZjuE,UAAAkxE,aAAI,WACI,MAAOzxE,MAAKixE,sBAAsB1vE,cAAc2uB,wBAAwBS,OAOpE69C,EAAZjuE,UAAAgzD,gBAAI,WACIvzD,KAAK2uE,aAAa5gD,WAAWG,cAAcluB,KAAK2uE,aAAaT,sBAAwB,GAAK,IAGtFM,EAAZjuE,UAAAuvE,QAAI,WACJ,GAAcvgE,GAAUvP,KAAKD,WAAWwB,aAEhC,QAAQgO,EAAQ07C,WAAa17C,EAAQ7P,WAAaM,KAAK6uE,sCAnjB/DrwE,KAACkD,EAAAA,UAADhD,OACIC,SAAU,kDACVuI,MACIC,MAAO,0BACPuqE,sBAAuB,wBAGvBC,YAAa,gBACbz4D,SAAU,cACVwI,UAAW,sBACX1P,YAAa,wBACbuY,UAAW,uBAEf7jB,SAAU,wBACVC,WAAY4nE,4CAvGhB/vE,KAAIa,EAAAA,aASJb,KAAI2T,EAAAA,mBAXJ3T,KAAIsJ,EAAAA,oBAmBJtJ,KAAI+M,EAAAA,UAXJ/M,KAAIc,EAAAA,SAkMJd,SAAA4T,GAAApK,aAAAxJ,KAAS6T,EAAAA,OAAT3T,MAAgB0vE,QA5LhB5vE,KAAS8T,EAAAA,eAATtK,aAAAxJ,KA6LS+T,EAAAA,aA1KT/T,KAAS2zB,GAATnqB,aAAAxJ,KA2KS+T,EAAAA,WA3KT/T,KA2KqBo6D,EAAAA,SACrBp6D,SAAA4T,GAAApK,aAAAxJ,KAAS+T,EAAAA,WAAT/T,KAAqB6T,EAAAA,OAArB3T,MAA4Bo6C,EAAAA,cAnL5Bt6C,KAAS0zB,EAAAA,mCA6GTy8C,eAAAnwE,KAAKiB,EAAAA,MAALf,MAAW,oBAMX6yE,cAAA/yE,KAAKiB,EAAAA,MAALf,MAAW,+BAMXkwE,wBAAApwE,KAAKiB,EAAAA,MAALf,MAAW,kBAMXkzE,uBAAApzE,KAAKiB,EAAAA,MAALf,MAAW,6BAufX8vE,KmGroBAqD,GAAA,WAAA,QAAAA,MAYmC,sBAZnCrzE,KAACsE,EAAAA,SAADpE,OACIqE,SAAUswB,GAAgBvgB,EAAAA,cAAexK,GAAgBtF,EAAAA,cACzDE,SACIoqE,GACAj6C,GACAm7C,GACAL,GACA7lE,IAEJnF,cAAemqE,GAAgBkB,GAAuBL,IACtDxnE,WAAY0nE,QAEhBwD,KCbAC,GAAA,WAgBI,QAAJA,GAAgB/xE,GAFJC,KAAZm7B,SAGQn7B,KAAKuB,cAAgBxB,EAAWwB,cAwCxC,MA/CIlB,QAAJC,eAAQwxE,EAARvxE,UAAA,oBAAI,WACI,MAAOP,MAAKm7B,MAAM7d,OAAS,mCAS/Bw0D,EAAJvxE,UAAAi1B,mBAAI,WAOIx1B,KAAKm7B,MAAQlB,MAAMknB,KAAKnhD,KAAKuB,cAAck3B,iBAAiB,aAC5Dz4B,KAAKk7B,+BAGD42C,EAAZvxE,UAAA26B,4BAAI,WAGI,GAA0B,IAAtBl7B,KAAKm7B,MAAM7d,OAAc,CACrC,GAAkB+d,GAAcr7B,KAAKm7B,MAAM,EAG1BE,GAAYC,wBAA2BD,EAAYE,qBAChDF,EAAYG,aAHC,IAGcH,EAAYG,YAAYy1B,WACnD51B,EAAYnW,UAAUC,IAAI,gBAC1BnlB,KAAKuB,cAAc2jB,UAAUC,IAAI,wBAGjCkW,EAAYI,iBARC,IAQkBJ,EAAYI,gBAAgBw1B,WAC3D51B,EAAYnW,UAAUC,IAAI,iBAC1BnlB,KAAKuB,cAAc2jB,UAAUC,IAAI,8BAGtC,IAjBU,IAiBNnlB,KAAKm7B,MAAM7d,OAAqB,CACnD,GAAkBoe,GAAmB17B,KAAKm7B,MAAM,GAC9BQ,EAAoB37B,KAAKm7B,MAAM,EAErCO,GAAiBxW,UAAUC,IAAI,gBAC/BwW,EAAkBzW,UAAUC,IAAI,kCAtD5C3mB,KAACkD,EAAAA,UAADhD,OACIC,SAAU,kCACVuI,MACI6qE,oBAAqB,gBACrBC,yBAA0B,wDAZlCxzE,KAAIa,EAAAA,cAiEJyyE,KAEAG,GAAA,WAEI,QAAJA,GAAuB3uE,GAAAtD,KAAvBsD,YAAuBA,EACvB,MAAA2uE,MAGaC,GAILzuE,EAAWC,EAAcuuE,KAGjCE,GAAA,SAAApuE,GAYI,QAAJouE,GAAgBpyE,EAAgCiE,GAA5C,GAAJG,GACQJ,EADRK,KAAApE,KACcD,IADdC,WAAgDmE,GAAhDH,cAAgDA,EAGxCG,EAAKH,cAAckB,QAAQf,EAAKb,YAAY/B,eAAe,KAcnE,MAlB8B4D,GAA9BgtE,EAAApuE,GAOIouE,EAAJ5xE,UAAAyB,YAAI,WACIhC,KAAKgE,cAAcqB,eAAerF,KAAKsD,YAAY/B,gBAGvD4wE,EAAJ5xE,UAAA+E,MAAI,WACItF,KAAKwzC,iBAAiBluC,SAG1B6sE,EAAJ5xE,UAAAizC,eAAI,WACI,MAAOxzC,MAAKsD,YAAY/B,8BA3BhC/C,KAACC,EAAAA,UAADC,OACIC,SAAU,oBACVG,SAAJ,sGACID,QAAS,4hGACTK,gBAAiBC,EAAAA,wBAAwBC,OACzCL,cAAeC,EAAAA,kBAAkBC,KACjCgI,QAAS,WAAY,SACrBC,MACI8R,aAAc,4DAxFtBxa,KAAIa,EAAAA,aAIJb,KAASqJ,EAAAA,gBAyGTsqE,GAlB8BD,IAqB9BE,GAAA,SAAAruE,GAcI,QAAJquE,GAAgB/+D,EAA4BtT,GAC5C,MAAQgE,GAARK,KAAApE,KAAcD,EAAYsT,IAA1BrT,KASA,MAX8BmF,GAA9BitE,EAAAruE,GAKIquE,EAAJ7xE,UAAA8xE,mBAAI,SAAmBzsE,GACX5F,KAAKN,WACLkG,EAAM4W,iBACN5W,EAAM04C,4CArBlB9/C,KAACC,EAAAA,UAADC,OACIC,SAAU,eACVG,SAAJ,sGACID,QAAS,4hGACTK,gBAAiBC,EAAAA,wBAAwBC,OACzCL,cAAeC,EAAAA,kBAAkBC,KACjCgI,QAAS,WAAY,SACrBC,MACIqM,kBAAmB,oBACnBD,kBAAmB,mBACnBiX,UAAW,sEAtHnB/rB,KAASqJ,EAAAA,eAJTrJ,KAAIa,EAAAA,cAwIJ+yE,GAX8BD,ICrH9Bn2B,GAAA,WAAA,QAAAA,MAiB6B,sBAjB7Bx9C,KAACsE,EAAAA,SAADpE,OACIqE,SACIC,EAAAA,aACAqF,EAAAA,WACA8L,EAAAA,gBAEJjR,SACIivE,GACAC,GACAN,IAEJ3uE,cACIgvE,GACAC,GACAN,QAGR91B,KCKas2B,IACT1rE,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAW,WAAM,MAAAwrE,MAC9BvrE,OAAO,iBAKP,QAAJwrE,GAEehsE,EAEAlF,GAFAtB,KAAfwG,OAAeA,EAEAxG,KAAfsB,MAAeA,EAEf,MAAAkxE,MAGAD,GAAA,WAkGI,QAAJA,GAAwB/iC,GAAAxvC,KAAxBwvC,gBAAwBA,EAlBDxvC,KAAvBwU,YAAqC,GAAI3P,GAAAA,aAGlB7E,KAAvB4E,OACQ,GAAIC,GAAAA,aACA7E,KAAZquD,WAAwB,EACZruD,KAAZ00B,WAAwB,EACZ10B,KAAZE,WAAwB,EAkBpBF,KAAJ4vC,6BAAyD,aAIrD5vC,KAAJqc,UAA2B,aAiI3B,MAjOIhc,QAAJC,eACQiyE,EADRhyE,UAAA,gBAAI,WAEI,MAAOP,MAAKquD,eAGhB,SAAa/sD,GACTtB,KAAKquD,UAAY7tD,EAAAA,sBAAsBc,oCAI3CjB,OAAJC,eACQiyE,EADRhyE,UAAA,aAAI,WAEJ,GAAcgtB,GAAWvtB,KAAK8sB,eAAiB9sB,KAAK8sB,eAAeS,WAE3D,OAAIvtB,MAAK6U,SACE0Y,EAAS1R,IAAI,SAAC9H,GAAW,MAAAA,GAAOzS,QAGpCisB,EAAS,GAAKA,EAAS,GAAGjsB,UAAQ8Q,QAG7C,SAAUoG,GACNxY,KAAKs2B,oBAAoB9d,GACzBxY,KAAKwU,YAAY/N,KAAKzG,KAAKsB,wCAI/BjB,OAAJC,eAAQiyE,EAARhyE,UAAA,gBAAI,WACJ,GAAcgtB,GAAWvtB,KAAK8sB,eAAeS,QAErC,OAAOvtB,MAAK6U,SAAW0Y,EAAYA,EAAS,IAAM,sCAItDltB,OAAJC,eACQiyE,EADRhyE,UAAA,gBAAI,WAEI,MAAOP,MAAK00B,eAGhB,SAAapzB,GACTtB,KAAK00B,UAAYl0B,EAAAA,sBAAsBc,oCAO3CjB,OAAJC,eACQiyE,EADRhyE,UAAA,gBAAI,WAEI,MAAOP,MAAKE,eAGhB,SAAaoB,GACTtB,KAAKE,UAAYM,EAAAA,sBAAsBc,GAElCtB,KAAKyyE,eAIVzyE,KAAKyyE,cAAc5iE,QAAQ,SAACkE,GAAW,MAAAA,GAAO3O,kDAuClDmtE,EAAJhyE,UAAAK,SAAI,WACIZ,KAAK8sB,eAAiB,GAAI4I,GAAAA,eAA+B11B,KAAK6U,aAAUzC,IAAW,IAGvFmgE,EAAJhyE,UAAAi1B,mBAAI,kBACI/jB,EAAAzR,KAAK8sB,gBAAe+I,OAA5BvB,MAAA7iB,EAAsCzR,KAAKyyE,cAActsD,OAAO,SAACpS,GAAW,MAAAA,GAAOrO,WAC3E1F,KAAKN,SAAWM,KAAKE,WAOzBqyE,EAAJhyE,UAAA2F,WAAI,SAAW5E,GACPtB,KAAKsB,MAAQA,EACbtB,KAAKwvC,gBAAgBpqC,gBAIzBmtE,EAAJhyE,UAAA4F,iBAAI,SAAiBC,GACbpG,KAAK4vC,6BAA+BxpC,GAIxCmsE,EAAJhyE,UAAA8F,kBAAI,SAAkBD,GACdpG,KAAKqc,UAAYjW,GAIrBmsE,EAAJhyE,UAAA+F,iBAAI,SAAiBC,GACbvG,KAAKN,SAAW6G,GAIpBgsE,EAAJhyE,UAAA4vC,gBAAI,WACJ,GAAc5iB,GAAWvtB,KAAKutB,SAChB/mB,EAASyzB,MAAMC,QAAQ3M,GAAYA,EAASA,EAASjQ,OAAS,GAAKiQ,EACnE3nB,EAAQ,GAAI4sE,IAAqBhsE,EAAQxG,KAAKsB,MACpDtB,MAAK4vC,6BAA6BhqC,EAAMtE,OACxCtB,KAAK4E,OAAO6B,KAAKb,IASrB2sE,EAAJhyE,UAAAmyE,iBAAI,SAAiB3+D,EAAwB8hB,EAAiBrC,OAA9D,KAAAA,IAA8DA,GAA9D,GAGaxzB,KAAK6U,WAAY7U,KAAKutB,UAAaxZ,EAAOrO,UAC1C1F,KAAa,SAAoB0F,SAAU,GAG5CmwB,EACA71B,KAAK8sB,eAAe+I,OAAO9hB,GAE3B/T,KAAK8sB,eAAeiJ,SAAShiB,GAI7Byf,GACAxzB,KAAKmwC,kBAKTnwC,KAAKwU,YAAY/N,KAAKzG,KAAKsB,QAI/BixE,EAAJhyE,UAAAw6B,WAAI,SAAWhnB,GACP,MAAO/T,MAAK8sB,eAAeiO,WAAWhnB,IAI1Cw+D,EAAJhyE,UAAAoyE,aAAI,SAAa5+D,GACT,WAAsB3B,KAAlBpS,KAAKo0C,WAILp0C,KAAK6U,UAAYolB,MAAMC,QAAQl6B,KAAKo0C,UAC7Bp0C,KAAKo0C,SAASxlC,KAAK,SAACtN,GAAU,MAAgB,OAAhByS,EAAOzS,OAAiBA,IAAUyS,EAAOzS,QAG3EyS,EAAOzS,QAAUtB,KAAKo0C,WAIzBm+B,EAAZhyE,UAAA+1B,oBAAI,SAA4Bh1B,GAA5B,GAAJ6C,GAAAnE,IAGQ,IAFAA,KAAKo0C,SAAW9yC,EAEXtB,KAAKyyE,cAIV,GAAIzyE,KAAK6U,UAAYvT,EAAO,CACxB,IAAK24B,MAAMC,QAAQ54B,GACf,KAAMF,OAAM,qDAGhBpB,MAAKy/B,iBACLn+B,EAAMuO,QAAQ,SAACya,GAAsB,MAAAnmB,GAAKi2B,YAAY9P,SAEtDtqB,MAAKy/B,iBACLz/B,KAAKo6B,YAAY94B,IAKjBixE,EAAZhyE,UAAAk/B,eAAI,WACIz/B,KAAK8sB,eAAe9c,QACpBhQ,KAAKyyE,cAAc5iE,QAAQ,SAACkE,GAAW,MAAAA,GAAOrO,SAAU,KAIpD6sE,EAAZhyE,UAAA65B,YAAI,SAAoB94B,GACxB,GAAcg5B,GAAsBt6B,KAAKyyE,cAAcnqD,KAAK,SAACvU,GACjD,MAAuB,OAAhBA,EAAOzS,OAAiByS,EAAOzS,QAAUA,GAGhDg5B,KACAA,EAAoB50B,SAAU,EAC9B1F,KAAK8sB,eAAe+I,OAAOyE,oBA3OvC97B,KAACkD,EAAAA,UAADhD,OACIC,SAAU,yBACVgI,WAAY2rE,IACZprE,MACIme,KAAM,QACNle,MAAO,yBACPyrE,oCAAqC,YAEzClsE,SAAU,8DAxDdlI,KAAIsJ,EAAAA,uCA6DJ4mD,WAAAlwD,KAAKiB,EAAAA,QAUL6B,QAAA9C,KAAKiB,EAAAA,QAwBLoV,WAAArW,KAAKiB,EAAAA,QAULgzE,gBAAAj0E,KAAKo0B,EAAAA,gBAALl0B,MAAqBqI,EAAAA,WAAW,WAAM,MAAA8rE,SAGtCnzE,WAAAlB,KAAKiB,EAAAA,QAoBL+U,cAAAhW,KAAK2J,EAAAA,SAGLvD,SAAApG,KAAK2J,EAAAA,UA2JLoqE,KAGAM,GAAA,WA0EI,QAAJA,GAC2BC,EACX9uD,EACA3Q,EACA9D,GAHWvP,KAA3B8yE,kBAA2BA,EACX9yE,KAAhBgkB,kBAAgBA,EACAhkB,KAAhBqT,aAAgBA,EACArT,KAAhBuP,QAAgBA,EAXOvP,KAAvB4E,OACQ,GAAIC,GAAAA,aAEA7E,KAAZ+yE,kBAA+B,EACnB/yE,KAAZ2E,UAAuB,EACX3E,KAAZE,WAAiC,EAkEjC,MA5GIG,QAAJC,eACQuyE,EADRtyE,UAAA,eAAI,WAEI,MAAOP,MAAK8yE,kBAAoB9yE,KAAK8yE,kBAAkB/3C,WAAW/6B,MAAQA,KAAK2E,cAGnF,SAAYrD,GAChB,GAAckX,GAAWhY,EAAAA,sBAAsBc,EAEnCkX,KAAaxY,KAAK2E,WAClB3E,KAAK2E,SAAW6T,EAEZxY,KAAK8yE,mBACL9yE,KAAK8yE,kBAAkBJ,iBAAiB1yE,KAAMA,KAAK2E,UAGvD3E,KAAKgkB,kBAAkB5e,iDAe/B/E,OAAJC,eACQuyE,EADRtyE,UAAA,gBAAI,WAEI,MAAOP,MAAKE,WAAcF,KAAK8yE,mBAAqB9yE,KAAK8yE,kBAAkBpzE,cAE/E,SAAa4B,GAAkBtB,KAAKE,UAAYM,EAAAA,sBAAsBc,oCAiBtEuxE,EAAJtyE,UAAAK,SAAI,WACIZ,KAAK+yE,iBAAmB/yE,KAAK8yE,oBAAsB9yE,KAAK8yE,kBAAkBj+D,SAC1E7U,KAAKxB,KAAOwB,KAAK+yE,iBAAmB,QAAU,WAE1C/yE,KAAK8yE,mBAAqB9yE,KAAK8yE,kBAAkBH,aAAa3yE,QAC9DA,KAAK0F,SAAU,GAGnB1F,KAAKqT,aAAanO,QAAQlF,KAAKuP,QAAQhO,eAAe,IAG1DsxE,EAAJtyE,UAAAyB,YAAI,WAAA,GAAJmC,GAAAnE,KACcwwB,EAAQxwB,KAAK8yE,iBAEnB9yE,MAAKqT,aAAahO,eAAerF,KAAKuP,QAAQhO,eAI1CivB,GAASA,EAAMuK,WAAW/6B,OAC1B85B,QAAQC,UAAUC,KAAK,WAAM,MAAAxJ,GAAMkiD,iBAAiBvuE,GAAM,MAKlE0uE,EAAJtyE,UAAA+E,MAAI,WACItF,KAAKuP,QAAQhO,cAAc+D,SAI/ButE,EAAJtyE,UAAAyyE,cAAI,WACI,IAAIhzE,KAAKN,SAAT,CAIR,GAAcuzE,KAAajzE,KAAK+yE,mBAA2B/yE,KAAK2E,QAEpDsuE,KAAejzE,KAAK2E,WACpB3E,KAAK2E,SAAWsuE,EACZjzE,KAAK8yE,oBACL9yE,KAAK8yE,kBAAkBJ,iBAAiB1yE,KAAMA,KAAK2E,UAAU,GAC7D3E,KAAK8yE,kBAAkBz2D,cAI/Brc,KAAK4E,OAAO6B,KAAK,GAAI+rE,IAAqBxyE,KAAMA,KAAKsB,UAQzDuxE,EAAJtyE,UAAA6E,aAAI,WAGIpF,KAAKgkB,kBAAkB5e,+BAxI/B5G,KAACC,EAAAA,UAADC,OACIC,SAAU,mBACVG,SAAU,yQAUVD,QAAS,m1DACTE,cAAeC,EAAAA,kBAAkBC,KACjCyH,SAAU,iBACVxH,gBAAiBC,EAAAA,wBAAwBC,OACzC8H,MACIgsE,sCAAuC,qBACvCC,mCAAoC,UACpChsE,MAAO,mBAGPoM,kBAAmB,KACnBD,kBAAmB,mBACnB6F,UAAW,mDAmDnB3a,KAA8C+zE,GAA9CvqE,aAAAxJ,KAAS+T,EAAAA,aA5WT/T,KAAIsJ,EAAAA,oBAiBJtJ,KAASqJ,EAAAA,eAbTrJ,KAAIa,EAAAA,gCA2TJqG,UAAAlH,KAAKiB,EAAAA,QAsBL2zE,WAAA50E,KAAK0J,EAAAA,UAALxJ,MAAeyzE,MAGf7wE,QAAA9C,KAAKiB,EAAAA,QAGLyE,WAAA1F,KAAKiB,EAAAA,QAELC,WAAAlB,KAAKiB,EAAAA,QAOLmF,SAAApG,KAAK2J,EAAAA,UAuEL0qE,KCvaAQ,GAAA,WAAA,QAAAA,MAKmC,sBALnC70E,KAACsE,EAAAA,SAADpE,OACIqE,SAAUuF,GAAgB0zC,IAC1B94C,SAAUoF,GAAgBiqE,GAAqBM,IAC/C1vE,cAAeovE,GAAqBM,QAExCQ,KpBCA3P,GAAA,WAqCI,QAAJA,GAAwBpgE,EAAiCU,GAAjChE,KAAxBsD,YAAwBA,EAAiCtD,KAAzDgE,cAAyDA,EAVrDhE,KAAJyjE,UAAe,EAGXzjE,KAAJutB,UAAe,EAGXvtB,KAAJ46D,eAAqB,GAAI/1D,GAAAA,aAEb7E,KAAZm+B,UAAuC,EAG/Bn+B,KAAKgE,cAAckB,QAAQlF,KAAKsD,YAAY/B,eAAe,GAkCnE,MAxDIlB,QAAJC,eAAQojE,EAARnjE,UAAA,gBAAI,WACI,MAAOP,MAAKyjE,SAAW,KAAOzjE,KAAKm+B,eAGvC,SAEa78B,GACTtB,KAAKm+B,UAAY78B,mCAkBrBoiE,EAAJnjE,UAAAyB,YAAI,WACIhC,KAAKgE,cAAcqB,eAAerF,KAAKsD,YAAY/B,gBAGvDmiE,EAAJnjE,UAAA+E,MAAI,WACItF,KAAKszE,YAAYhuE,SAGrBo+D,EAAJnjE,UAAAgzE,QAAI,SAAQ9kE,GACCzO,KAAKyjE,WACNh1D,EAAO5I,kBAEP7F,KAAK46D,eAAen0D,MAAMzG,KAAKutB,YAIvCltB,OAAJC,eAAgBojE,EAAhBnjE,UAAA,mBAAI,WACI,MAAOP,MAAKsD,YAAY/B,+CAG5BmiE,EAAJnjE,UAAAsd,UAAI,SAAUpP,GACN,OAAQA,EAAO2B,SACX,IAAK4oB,GAAAA,MACIh5B,KAAKyjE,WACNh1D,EAAO+N,iBACPxc,KAAK46D,eAAen0D,MAAMzG,KAAKutB,4BAlEnD/uB,KAACC,EAAAA,UAADC,OACIC,SAAU,UACVG,SAAJ,gEACID,QAAS,gWACTK,gBAAiBC,EAAAA,wBAAwBC,OACzCL,cAAeC,EAAAA,kBAAkBC;uCACjCgI,QAAS,SACTC,MACIC,MAAO,UACPo8D,2BAA4B,WAC5BC,2BAA4B,WAC5BxxD,YAAa,oBACbuY,UAAW,2DArBnB/rB,KAAIa,EAAAA,aAKJb,KAASqJ,EAAAA,kCAwBT3D,WAAA1F,KAAKmU,EAAAA,YAALjU,MAAiB,mBAAjBF,KACKiB,EAAAA,QAKLgkE,WAAAjlE,KAAKiB,EAAAA,QAGL8tB,WAAA/uB,KAAKiB,EAAAA,QAGLm7D,iBAAAp8D,KAAK2J,EAAAA,UAwCLu7D,KC1EAC,GAAA,WAAA,QAAAA,MAS2B,sBAT3BnlE,KAACsE,EAAAA,SAADpE,OACIqE,SACIC,EAAAA,aACAqF,EAAAA,WACA8L,EAAAA,gBAEJjR,SAAUwgE,IACVvgE,cAAeugE,QAEnBC,KCLaC,GACT,GAAIx4D,GAAAA,eAAsC,4BCiB1ChI,GAAe,EAONygE,IACTj9D,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAW,WAAM,MAAA+8D,MAC9B98D,OAAO,OASP+8D,KAAJ,EAEIC,QAAJ,EAEIC,UAAJ,EAEIC,cAAJ,gHAIA,mBAAA,QAAAC,MAKA,MAAAA,oBAKI,QAAJC,GAAuB9gE,GAAAtD,KAAvBsD,YAAuBA,EAEvB,MAAA8gE,MAEaC,GAKL7gE,EAAcC,EAAWC,EAAc0gE,MAU/CN,GAAA,SAAA//D,GAwFI,QAAJ+/D,GAAgB/jE,EACQkE,EACAD,EACeE,EAEfogE,GALpB,GAAJngE,GAMQJ,EANRK,KAAApE,KAMcD,IANdC,WACwBmE,GAAxBF,mBAAwBA,EACAE,EAAxBH,cAAwBA,EAGAG,EAAxBmgE,aAAwBA,EAnECngE,EAAzBG,UAA6C,GAKfH,EAA9BI,eAA8D,KAElDJ,EAAZK,UAAgC,kBAAiBpB,GAGpCe,EAAbM,GAA0BN,EAAKK,UAoBlBL,EAAbE,cAAiD,QAGpCF,EAAbO,KAAmC,KAGZP,EAAvBS,OACQ,GAAIC,GAAAA,aAGWV,EAAvBogE,oBAAoE,GAAI1/D,GAAAA,aAYpEV,EAAJm+B,WAA4B,aAGhBn+B,EAAZqgE,uBAA6C,GAEjCrgE,EAAZsgE,mBAAuDC,GAAqBX,KAEhE5/D,EAAZwgE,8BAAkE,aAuCtDxgE,EAAZQ,UAAgC,EAkBpBR,EAAZjE,WAAiC,EA4BrBiE,EAAZygE,gBAAsC,EA1E9BzgE,EAAKD,SAAWe,SAASf,IAAa,IA0M9C,MAvRgCiB,GAAhC2+D,EAAA//D,GAoBI1D,OAAJC,eAAQwjE,EAARvjE,UAAA,eAAI,WACI,OAAUP,KAAKyE,IAAMzE,KAAKwE,WAAlC,0CAIInE,OAAJC,eACQwjE,EADRvjE,UAAA,gBAAI,WAEI,MAAOP,MAAKwW,eAGhB,SAAalV,GACTtB,KAAKwW,UAAYy5B,EAAU3uC,oCAiD/BwiE,EAAJvjE,UAAAy1B,gBAAI,WAAA,GAAJ7xB,GAAAnE,IACQA,MAAKgE,cACAkB,QAAQlF,KAAKwF,cAAcjE,eAC3BsM,UAAU,SAACg3D,GAAgB,MAAA1gE,GAAK2gE,oBAAoBD,MAG7Df,EAAJvjE,UAAAyB,YAAI,WACIhC,KAAKgE,cAAcqB,eAAerF,KAAKwF,cAAcjE,gBAMzDlB,OAAJC,eACQwjE,EADRvjE,UAAA,eAAI,WAEI,MAAOP,MAAK2E,cAGhB,SAAYrD,GACJA,GAAStB,KAAK0F,UACd1F,KAAK2E,SAAWrD,EAChBtB,KAAKiE,mBAAmBmB,iDAUhC/E,OAAJC,eACQwjE,EADRvjE,UAAA,gBAAI,WAEI,MAAOP,MAAKE,eAGhB,SAAaoB,GACLA,GAAStB,KAAKN,WACdM,KAAKE,UAAYoB,EACjBtB,KAAKiE,mBAAmBmB,iDAYhC/E,OAAJC,eACQwjE,EADRvjE,UAAA,qBAAI,WAEI,MAAOP,MAAK4kE,oBAGhB,SAAkBtjE,GACtB,GAAcq0B,GAAUr0B,GAAStB,KAAK4kE,cAC9B5kE,MAAK4kE,eAAiBtjE,EAElBq0B,IACI31B,KAAK4kE,eACL5kE,KAAK+kE,sBAAsBL,GAAqBR,eAEhDlkE,KAAK+kE,sBACD/kE,KAAK0F,QAAUg/D,GAAqBV,QAAUU,GAAqBT,WAE3EjkE,KAAKukE,oBAAoB99D,KAAKzG,KAAK4kE,kDAO3Cd,EAAJvjE,UAAAuF,mBAAI,WAII9F,KAAKiE,mBAAmBmB,gBAI5B0+D,EAAJvjE,UAAA2F,WAAI,SAAW5E,GACPtB,KAAK0F,UAAYpE,GAIrBwiE,EAAJvjE,UAAA4F,iBAAI,SAAiBC,GACbpG,KAAK2kE,8BAAgCv+D,GAIzC09D,EAAJvjE,UAAA8F,kBAAI,SAAkBD,GACdpG,KAAKsiC,WAAal8B,GAItB09D,EAAJvjE,UAAA+F,iBAAI,SAAiBC,GACbvG,KAAKN,SAAW6G,GAGpBu9D,EAAJvjE,UAAAkF,gBAAI,WACI,MAAOzF,MAAK0F,QAAU,OAAU1F,KAAKglE,cAAgB,QAAU,SAG3DlB,EAAZvjE,UAAAwkE,sBAAI,SAA8BE,GAClC,GAAcC,GAAWllE,KAAKykE,mBAChBl1D,EAAuBvP,KAAKsD,YAAY/B,aAE1C2jE,KAAaD,IAGbjlE,KAAKwkE,uBAAuBlnD,OAAS,GACrC/N,EAAQ2V,UAAUqT,OAAOv4B,KAAKwkE,wBAGlCxkE,KAAKykE,mBAAqBQ,EAEtBjlE,KAAKwkE,uBAAuBlnD,OAAS,GACrC/N,EAAQ2V,UAAUC,IAAInlB,KAAKwkE,0BAI3BV,EAAZvjE,UAAA0F,iBAAI,WACJ,GAAcL,GAAQ,GAAIu+D,GAClBv+D,GAAMY,OAASxG,KACf4F,EAAMF,QAAU1F,KAAK0F,QAErB1F,KAAK2kE,8BAA8B3kE,KAAK0F,SACxC1F,KAAK4E,OAAO6B,KAAKb,IAIbk+D,EAAZvjE,UAAAukE,oBAAI,SAA4BD,GACpBA,GACA7kE,KAAKsiC,cAKbwhC,EAAJvjE,UAAAwT,OAAI,WACI/T,KAAK0F,SAAW1F,KAAK0F,SAUzBo+D,EAAJvjE,UAAAwF,cAAI,SAAcH,GAAd,GAAJzB,GAAAnE,IAQQ4F,GAAMC,kBAGD7F,KAAKN,UAAkC,SAAtBM,KAAKskE,aAkBftkE,KAAKN,UAAkC,SAAtBM,KAAKskE,eAG9BtkE,KAAKwF,cAAcjE,cAAcmE,QAAU1F,KAAK0F,QAChD1F,KAAKwF,cAAcjE,cAAcyjE,cAAgBhlE,KAAKglE,gBApBlDhlE,KAAKglE,eAAuC,UAAtBhlE,KAAKskE,cAE3BxqC,QAAQC,UAAUC,KAAK,WACnB71B,EAAKygE,gBAAiB,EACtBzgE,EAAKogE,oBAAoB99D,KAAKtC,EAAKygE,kBAI3C5kE,KAAK+T,SACL/T,KAAK+kE,sBACD/kE,KAAK2E,SAAW+/D,GAAqBV,QAAUU,GAAqBT,WAKxEjkE,KAAKiG,qBAUb69D,EAAJvjE,UAAA+E,MAAI,WACItF,KAAKgE,cAAcuB,SAASvF,KAAKwF,cAAcjE,cAAe,aAGlEuiE,EAAJvjE,UAAAoF,oBAAI,SAAoBC,GAIhBA,EAAMC,kCAxSdrH,KAACC,EAAAA,UAADC,OACIC,SAAU,cACVG,SAAJ,26BACID,QAAS,w6CACT6H,SAAU,aACVQ,MACIC,MAAO,cACPC,OAAQ,KACRC,YAAa,KACb89D,2BAA4B,gBAC5Bh0B,qBAAsB,UACtB7pC,sBAAuB,WACvB89D,mCAAoC,6BAExCz+D,WAAYk9D,IACZ58D,QAAS,QAAS,YAClBlI,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,+CAtG7CZ,KAAIa,EAAAA,aAFJb,KAAIsJ,EAAAA,oBAcJtJ,KAASqJ,EAAAA,eAoKTrJ,KAAAuJ,OAAAC,aAAAxJ,KAAiByJ,EAAAA,UAAjBvJ,MAA2B,gBAC3BF,SAAA4T,GAAApK,aAAAxJ,KAAiB+T,EAAAA,WAAjB/T,KAA6B6T,EAAAA,OAA7B3T,MAAoCklE,2BAlEpCt/D,YAAA9F,KAAKiB,EAAAA,MAALf,MAAW,gBAKX6F,iBAAA/F,KAAKiB,EAAAA,MAALf,MAAW,qBAKX+F,KAAAjG,KAAKiB,EAAAA,QAQLmV,WAAApW,KAAKiB,EAAAA,QAYL4E,gBAAA7F,KAAKiB,EAAAA,QAGLiF,OAAAlG,KAAKiB,EAAAA,QAGLmF,SAAApG,KAAK2J,EAAAA,SAILo8D,sBAAA/lE,KAAK2J,EAAAA,SAGL7G,QAAA9C,KAAKiB,EAAAA,QAGL+F,gBAAAhH,KAAK0J,EAAAA,UAALxJ,MAAe,WAwCfgH,UAAAlH,KAAKiB,EAAAA,QAkBLC,WAAAlB,KAAKiB,EAAAA,QAoBLulE,gBAAAxmE,KAAKiB,EAAAA,SAoJLqkE,GAvRgCO,ICnGnBgB,IACTz+D,QAASq7D,EAAAA,cACTn7D,YAAaC,EAAAA,WAAW,WAAM,MAAAu+D,MAC9Bt+D,OAAO,GAQXs+D,GAAA,SAAAvhE,GAAA,QAAAuhE,oDAOA,MADiDngE,GAAjDmgE,EAAAvhE,kBANAvF,KAACkD,EAAAA,UAADhD,OACIC,SAAU,2HAEVgI,WAAY0+D,IACZn+D,MAAQq+D,kBAAmB,4BAG/BD,GADiDE,EAAAA,2BCrBjDC,GAAA,WAAA,QAAAA,MAMA,sBANAjnE,KAACsE,EAAAA,SAADpE,OACIqE,SAAUC,EAAAA,cACVE,SAAU4gE,GAAYwB,IACtBniE,cAAe2gE,GAAYwB,QAG/BG,KCVa7jD,GACT,GAAIxW,GAAAA,eAA+B,2BCmB1Bs6D,GAAS,SAACpkE,EACA4W,EACAmX,EACAs2C,GAEvB,GAAQC,EAEJ,OAAc,QAAVtkE,GACAskE,EAAMzgD,EAAIkK,EAAKs2C,GAEA,OAARC,EAAe,KAAO3tD,KAAKoX,IAAIu2C,EAAK1tD,KAG/C0tD,EAAMzgD,EAAI7jB,EAAOqkE,GAEF,OAARC,EAAe,KAAO3tD,KAAKC,IAAID,KAAKoX,IAAIu2C,EAAK1tD,GAAMmX,KAGjDw2C,GAAW,SAACvkE,EACA4W,EACAmX,EACAs2C,GAEzB,GAAQC,EAEJ,OAAc,QAAVtkE,GACAskE,EAAMzgD,EAAIjN,GAAMytD,GAED,OAARC,EAAe,KAAO3tD,KAAKC,IAAI0tD,EAAKv2C,KAG/Cu2C,EAAMzgD,EAAI7jB,GAAQqkE,GAEH,OAARC,EAAe,KAAO3tD,KAAKoX,IAAIpX,KAAKC,IAAI0tD,EAAKv2C,GAAMnX,KCzBxD4tD,IACF,SACA,WACA,OACA,SACA,QACA,QACA,QACA,QACA,UAGSC,GAAW,GACXC,GAAa,EAEtB5iE,GAAe,EAEnB6iE,GAAA,WACI,QAAJA,GAAuBtwD,EACAC,EACAC,EACAC,GAHA9V,KAAvB2V,yBAAuBA,EACA3V,KAAvB4V,WAAuBA,EACA5V,KAAvB6V,gBAAuBA,EACA7V,KAAvB8V,UAAuBA,EAEvB,MAAAmwD,MAEaC,GAAkElwD,EAAgBiwD,IAG/FE,GAAA,WAqDI,QAAJA,GACgBxpB,EACAr5C,EACA8iE,EACWT,EACIU,EACLh3C,EACAnX,GANVlY,KAAhB28C,UAAgBA,EACA38C,KAAhBsD,YAAgBA,EACAtD,KAAhBomE,OAAgBA,EAbZpmE,KAAJoW,SAAuB,EAMVpW,KAAbqW,aAA2C,GAAI/M,GAAAA,QAavCtJ,KAAK2lE,KAAO3lE,KAAKsmE,QAAQX,GAAQjjE,WAAWijE,GAAQK,GACpDhmE,KAAKqmE,QAAUrmE,KAAKsmE,QAAQD,GAAW3jE,WAAW2jE,GAAWN,GAC7D/lE,KAAKqvB,IAAMrvB,KAAKsmE,QAAQj3C,GAAO3sB,WAAW2sB,IAAQk3C,EAAAA,EAClDvmE,KAAKkY,IAAMlY,KAAKsmE,QAAQpuD,GAAOxV,WAAWwV,GAAOquD,EAAAA,EAEjDvmE,KAAKwmE,MAAQxmE,KAAKsD,YAAY/B,aAEtC,IAAcklE,GAAOzmE,IAET,kBAAmBA,MAAKwmE,OACxBnmE,OAAOC,eAAeD,OAAOqmE,eAAe1mE,KAAKwmE,OAAQ,iBAErDG,eAChB,GAA0Bf,GAAMljE,WAAW+jE,EAAKG,kBAAkB5mE,KAAKsB,OAEnD,OAAOsf,OAAMglD,GAAO,KAAOA,KA0G/C,MApGIO,GAAJ5lE,UAAAsmE,cAAI,SAAcxuD,GACNA,IAAcrY,KAAKoW,UACnBpW,KAAKoW,QAAUiC,EACfrY,KAAKqW,aAAanM,SAI1Bi8D,EAAJ5lE,UAAAsd,UAAI,SAAUjY,GAAV,GAAJzB,GAAAnE,KAEcoQ,EAAUxK,EAAMwK,QAYhB02D,GAAWC,EAAAA,aAAcC,EAAAA,KAAMC,EAAAA,UAC/BC,GAAexqC,EAAAA,OAAQC,EAAAA,UAAWwqC,EAAAA,IAAK92D,EAAAA,OAAQ0oB,EAAAA,OAC/CquC,GAAUvuC,EAAAA,WAAYC,EAAAA,aACtBuuC,GAAgBjuC,EAAAA,KAAMC,EAAAA,KAAK9d,OAAO6rD,GAAQ7rD,OAAO2rD,GAAa3rD,OAAOurD,GAErEQ,EAAa,SAACn3D,GAAM,MAAU,MAAVA,EAAEtB,KAAyB,YAAVsB,EAAEtB,KACvC04D,EAAgB,SAACp3D,GAAM,MAAU,MAAVA,EAAEtB,KAAyB,MAAVsB,EAAEtB,IAOhD,OAAsC,IAAlCw4D,EAAYtrD,QAAQ3L,IAvBR,SAACD,GAAM,MAAAA,GAAEC,UAAYopB,EAAAA,IAAMrpB,EAAEspB,SAAWtpB,EAAEq3D,UAwB9C5hE,IAvBI,SAACuK,GAAM,MAAAA,GAAEC,UAAYq3D,EAAAA,IAAMt3D,EAAEspB,SAAWtpB,EAAEq3D,UAwB9C5hE,IAvBI,SAACuK,GAAM,MAAAA,GAAEC,UAAYs3D,EAAAA,IAAMv3D,EAAEspB,SAAWtpB,EAAEq3D,UAwB9C5hE,IAvBI,SAACuK,GAAM,MAAAA,GAAEC,UAAYu3D,EAAAA,IAAMx3D,EAAEspB,SAAWtpB,EAAEq3D,UAwB9C5hE,IAtBG,SAACuK,GAAM,MAAAA,GAAEC,SAAWw3D,EAAAA,IAAMz3D,EAAEC,SAAWy3D,EAAAA,KAuB3CjiE,IATM,SAACuK,GAAM,MAAAhM,GAAKw4C,UAAUmrB,MAAQ3jE,EAAKw4C,UAAUorB,QACxDT,EAAWn3D,GACXo3D,EAAcp3D,IAQPvK,MAMTA,EAAMg0B,WA5BO,SAACzpB,GAAM,MAACA,GAAEC,SAAW43D,EAAAA,MAAQ73D,EAAEC,SAAW63D,EAAAA,MACtD93D,EAAEC,SAAW83D,EAAAA,aAAe/3D,EAAEC,SAAW+3D,EAAAA,aA2BdviE,IAAQ,CACpCA,EAAM4W,gBAGlB,IAAkBmpD,GAAO//D,EAAMg0B,SAAW55B,KAAKqmE,QAAUrmE,KAAK2lE,IAE9Cv1D,KAAYwoB,EAAAA,UACZ54B,KAAK0lE,OAAOC,GAGZv1D,IAAYuoB,EAAAA,YACZ34B,KAAK6lE,SAASF,KAK1BQ,EAAJ5lE,UAAAgc,QAAI,SAAQ3W,GACZ,GAAYtE,GAAQsE,EAAM8W,cAAcC,QAAQ,OACxCrb,GAAQtB,KAAK4mE,kBAAkBtlE,GAE1BtB,KAAKsmE,QAAQhlE,IACdsE,EAAM4W,kBAId2pD,EAAJ5lE,UAAAmlE,OAAI,SAAOC,GACH3lE,KAAKsD,YAAY/B,cAAc+D,OACvC,IAAcsgE,GAAMF,GAAO1lE,KAAKwmE,MAAM4B,cAAepoE,KAAKkY,IAAKlY,KAAKqvB,IAAKs2C,EACjE3lE,MAAKwmE,MAAMllE,MAAgB,OAARskE,EAAe,GAAKA,EAAIhtD,WAC3C5Y,KAAKomE,OAAOiC,OAAO5hE,KAAKzG,KAAKwmE,MAAM4B,gBAGvCjC,EAAJ5lE,UAAAslE,SAAI,SAASF,GACL3lE,KAAKsD,YAAY/B,cAAc+D,OACvC,IAAcsgE,GAAMC,GAAS7lE,KAAKwmE,MAAM4B,cAAepoE,KAAKkY,IAAKlY,KAAKqvB,IAAKs2C,EACnE3lE,MAAKwmE,MAAMllE,MAAgB,OAARskE,EAAe,GAAKA,EAAIhtD,WAC3C5Y,KAAKomE,OAAOiC,OAAO5hE,KAAKzG,KAAKwmE,MAAM4B,gBAG/BjC,EAAZ5lE,UAAAqmE,kBAAI,SAA0BtlE,GACtB,MAAOA,GAAQA,EAAMgnE,QAAQ,KAAM,KAAOhnE,GAGtC6kE,EAAZ5lE,UAAA+lE,QAAI,SAAgBhlE,GACZ,MAAOtB,MAAKuoE,QAAQjnE,IAAUtB,KAAKwoE,MAAMlnE,IAGrC6kE,EAAZ5lE,UAAAgoE,QAAI,SAAgBjnE,GACZ,MAAO,eAAemnE,KAAKnnE,IAGvB6kE,EAAZ5lE,UAAAioE,MAAI,SAAclnE,GACV,MAAO,UAAUmnE,KAAKnnE,mBArL9B9C,KAACkD,EAAAA,UAADhD,OACIC,SAAU,gCACV+H,SAAU,mBACVC,WAAY+hE,EAAAA,SAAW9hE,QAAS+hE,GAA0B7hE,YAAaq/D,IACvEj/D,MACIgS,SAAU,uBACVC,UAAW,sBACXwI,UAAW,kBACX3P,YAAa,6DAnDrBxT,KAAiC+/C,EAAAA,WAdjC//C,KAAwBa,EAAAA,aAMxBb,KAAYkqE,EAAAA,UA4GZlqE,KAAAuJ,OAAAC,aAAAxJ,KAASyJ,EAAAA,UAATvJ,MAAmB,YACnBF,KAAAuJ,OAAAC,aAAAxJ,KAASyJ,EAAAA,UAATvJ,MAAmB,gBACnBF,KAAAuJ,OAAAC,aAAAxJ,KAASyJ,EAAAA,UAATvJ,MAAmB,WACnBF,KAAAuJ,OAAAC,aAAAxJ,KAASyJ,EAAAA,UAATvJ,MAAmB,8BA3CnB2nE,UAAA7nE,KAAKiB,EAAAA,QAOLkmE,OAAAnnE,KAAKiB,EAAAA,QAGL4vB,MAAA7wB,KAAKiB,EAAAA,QAGLyY,MAAA1Z,KAAKiB,EAAAA,SAyJL0mE,KAEAyC,GAAA,SAAA7kE,GAsJI,QAAJ6kE,GAA0BtlE,EACiBwS,EACfF,EACAC,EACZF,EACqDO,GALjE,GAAJ/R,GAMQJ,EANRK,KAAApE,KAMc2V,EAA0BC,EAAYC,EAAiBC,IANrE9V,WAA0BmE,GAA1Bb,YAA0BA,EACiBa,EAA3C2R,UAA2CA,EA5HvC3R,EAAJiS,SAAuB,EAMVjS,EAAbkS,aAA2C,GAAI/M,GAAAA,QAM3CnF,EAAJmS,YAA0B,WA8FZnS,EAAd0kE,KAAqB,YAAYzlE,KAEnBe,EAAdjE,WAA0B,EAEZiE,EAAdqS,WAA0B,EACZrS,EAAd2kE,MAAsB,OACR3kE,EAAd4kE,uBACQ,OACA,WACA,iBACA,QACA,OACA,QACF5iD,OAAO,SAAC6iD,GAAM,MAAAC,GAAAA,yBAAyBrnC,IAAIonC,KAazC7kE,EAAK+kE,oBAAsBhzD,GAAsB/R,EAAKb,YAAY/B,cAElE4C,EAAKglE,qBAAuBhlE,EAAK7C,MAGjC6C,EAAKM,GAAKN,EAAKM,KA6FvB,MAhP6BU,GAA7ByjE,EAAA7kE,GA4BI1D,OAAJC,eACQsoE,EADRroE,UAAA,gBAAI,WAEI,MAAIP,MAAK8V,WAAyC,OAA5B9V,KAAK8V,UAAUpW,SAC1BM,KAAK8V,UAAUpW,SAGnBM,KAAKE,eAGhB,SAAaoB,GACTtB,KAAKE,UAAYM,EAAAA,sBAAsBc,GAInCtB,KAAKoW,UACLpW,KAAKoW,SAAU,EACfpW,KAAKqW,aAAanM,yCAQ1B7J,OAAJC,eACQsoE,EADRroE,UAAA,UAAI,WAEI,MAAOP,MAAKmX,SAGhB,SAAO7V,GACHtB,KAAKmX,IAAM7V,GAAStB,KAAK6oE,sCAa7BxoE,OAAJC,eACQsoE,EADRroE,UAAA,gBAAI,WAEI,MAAOP,MAAKwW,eAGhB,SAAalV,GACTtB,KAAKwW,UAAYhW,EAAAA,sBAAsBc,oCAK3CjB,OAAJC,eACQsoE,EADRroE,UAAA,YAAI,WAEI,MAAOP,MAAK8oE,WAGhB,SAASxnE,GACLtB,KAAK8oE,MAAQxnE,GAAS,OACtBtB,KAAKopE,gBAKDH,EAAAA,yBAAyBrnC,IAAI5hC,KAAK8oE,SAClC9oE,KAAKsD,YAAY/B,cAAc/C,KAAOwB,KAAK8oE,wCASnDzoE,OAAJC,eACQsoE,EADRroE,UAAA,aAAI,WAEI,MAAOP,MAAKkpE,oBAAoB5nE,WAGpC,SAAUA,GACFA,IAAUtB,KAAKsB,QACftB,KAAKkpE,oBAAoB5nE,MAAQA,EACjCtB,KAAKqW,aAAanM,yCAsC1B0+D,EAAJroE,UAAA+W,YAAI,WACItX,KAAKqW,aAAanM,QAGtB0+D,EAAJroE,UAAAyB,YAAI,WACIhC,KAAKqW,aAAapG,YAGtB24D,EAAJroE,UAAAiX,UAAI,WACQxX,KAAK8V,WAIL9V,KAAKyX,mBAMTzX,KAAKqpE,0BAITT,EAAJroE,UAAA+E,MAAI,WACItF,KAAKsD,YAAY/B,cAAc+D,SAInCsjE,EAAJroE,UAAAsmE,cAAI,SAAcxuD,GACNA,IAAcrY,KAAKoW,UACnBpW,KAAKoW,QAAUiC,EACfrY,KAAKqW,aAAanM,SAI1B0+D,EAAJroE,UAAA+oE,SAAI,aAcAjpE,OAAJC,eAAQsoE,EAARroE,UAAA,aAAI,WACI,OAAQP,KAAKupE,kBAAoBvpE,KAAKsD,YAAY/B,cAAcD,QAAUtB,KAAKwpE,+CAOnFZ,EAAJroE,UAAAgY,iBAAI,WACIvY,KAAKsF,SAICsjE,EAAdroE,UAAA8oE,uBAAI,WACJ,GAAc7wD,GAAWxY,KAAKsB,KAElBtB,MAAKmpE,uBAAyB3wD,IAC9BxY,KAAKmpE,qBAAuB3wD,EAC5BxY,KAAKqW,aAAanM,SAKhB0+D,EAAdroE,UAAA6oE,cAAI,WACI,GAAItD,GAAuB/pD,QAAQ/b,KAAK8oE,QAAU,EAC9C,KAAMW,GAA+BzpE,KAAK8oE,QAKxCF,EAAdroE,UAAAgpE,cAAI,WACI,MAAOvpE,MAAK+oE,sBAAsBhtD,QAAQ/b,KAAK8oE,QAAU,GAInDF,EAAdroE,UAAAipE,YAAI,WAEJ,GAAc/wD,GAAYzY,KAAKsD,YAAyB,cAAsBmV,QAEtE,OAAOA,IAAYA,EAASC,yBA/PpCla,KAACkD,EAAAA,UAADhD,OACIC,SAAU,iBACV+H,SAAU,UACVQ,MACIC,MAAO,WAGPE,YAAa,KACbyR,qBAAsB,cACtBE,aAAc,WACdC,aAAc,WACdC,SAAU,uBACVC,UAAW,sBACXuI,UAAW,cAEf/a,YAAcC,QAASwS,GAAoBtS,YAAa8hE,4CAjQ5DpqE,KAAwBa,EAAAA,aAKxBb,KAAI6a,EAAAA,UAAJrR,aAAAxJ,KAoYiB+T,EAAAA,WApYjB/T,KAoY6BiV,EAAAA,SAnY7BjV,KAAI8a,EAAAA,OAAJtR,aAAAxJ,KAoYiB+T,EAAAA,aAtYjB/T,KAAI+a,EAAAA,mBAAJvR,aAAAxJ,KAuYiB+T,EAAAA,aAzXjB/T,KAAIgb,KA2XJhb,SAAA4T,GAAApK,aAAAxJ,KAAiB+T,EAAAA,WAAjB/T,KAA6BiV,EAAAA,OAA7BjV,KAAqC6T,EAAAA,OAArC3T,MAA4CkjB,2BAtI5CnN,oBAAAjW,KAAKiB,EAAAA,QAwBLC,WAAAlB,KAAKiB,EAAAA,QAwBLgF,KAAAjG,KAAKiB,EAAAA,QAaLkV,cAAAnW,KAAKiB,EAAAA,QAMLmV,WAAApW,KAAKiB,EAAAA,QAWLjB,OAAAA,KAAKiB,EAAAA,QAsBL6B,QAAA9C,KAAKiB,EAAAA,SAwILmpE,GAhP6B1C,IAkP7BwD,GAAA,WAAA,QAAAA,MAMA,sBANAlrE,KAACkD,EAAAA,UAADhD,OACIC,SAAU,0BACV+H,SAAU,mBACVQ,MAAQC,MAAO,0BAGnBuiE,KCzfaC,IACT/iE,QAASq7D,EAAAA,cACTn7D,YAAaC,EAAAA,WAAW,WAAM,MAAA6iE,MAC9B5iE,OAAO,GASX4iE,GAAA,WAAA,QAAAA,MAuBA,MAZIA,GAAJrpE,UAAA+W,YAAI,SAAY4S,GACJ,OAASA,KACTlqB,KAAK6pE,mBACD7pE,KAAKytB,WAAaztB,KAAKytB,cAInCm8C,EAAJrpE,UAAA8iE,SAAI,SAASC,GAA+C,MAAOtjE,MAAK8pE,WAAWxG,IAE/EsG,EAAJrpE,UAAA6iE,0BAAI,SAA0Bh9D,GAAwBpG,KAAKytB,UAAYrnB,GAE3DwjE,EAAZrpE,UAAAspE,iBAAI,WAAmC7pE,KAAK8pE,WAAahH,EAAAA,WAAWzzC,IAAIpqB,SAASjF,KAAKqvB,IAAK,qBAtB3F7wB,KAACkD,EAAAA,UAADhD,OACIC,SAAU,2DACVgI,WAAYgjE,IACZziE,MAAOmlD,aAAc,0CAIzBh9B,MAAA7wB,KAAKiB,EAAAA,SAgBLmqE,KAGaG,IACTnjE,QAASq7D,EAAAA,cACTn7D,YAAaC,EAAAA,WAAW,WAAM,MAAAijE,MAC9BhjE,OAAO,GASXgjE,GAAA,WAAA,QAAAA,MA0BA,MAZIA,GAAJzpE,UAAA+W,YAAI,SAAY4S,GACJ,OAASA,KACTlqB,KAAK6pE,mBACD7pE,KAAKytB,WAAaztB,KAAKytB,cAInCu8C,EAAJzpE,UAAA8iE,SAAI,SAASC,GAA+C,MAAOtjE,MAAK8pE,WAAWxG,IAE/E0G,EAAJzpE,UAAA6iE,0BAAI,SAA0Bh9D,GAAwBpG,KAAKytB,UAAYrnB,GAE3D4jE,EAAZzpE,UAAAspE,iBAAI,WAAmC7pE,KAAK8pE,WAAahH,EAAAA,WAAW5qD,IAAIjT,SAASjF,KAAKkY,IAAK,qBAzB3F1Z,KAACkD,EAAAA,UAADhD,OACIC,SAAU,2DACVgI,WAAYojE,IACZ7iE,MACIolD,aAAc,0CAMtBp0C,MAAA1Z,KAAKiB,EAAAA,SAgBLuqE,KCtEAC,GAAA,WAAA,QAAAA,MAMA,sBANAzrE,KAACsE,EAAAA,SAADpE,OACIqE,SAAUC,EAAAA,aAAcqF,EAAAA,WAAYC,GAAgBoR,EAAAA,aACpDxW,SAAU0lE,GAASzC,GAAeuD,GAAaE,GAAcI,IAC7D7mE,cAAeylE,GAASzC,GAAeuD,GAAaE,GAAcI,QAGtEC,KCXAzc,GAAA,WAAA,QAAAA,KAMaxtD,KAAbkqB,QAAsC,GAAI5gB,GAAAA,QAGtCtJ,KAAJkqE,cAA4B,WAGxBlqE,KAAJmqE,kBAAgC,gBAG5BnqE,KAAJ69D,eAA6B,iBAGzB79D,KAAJi+D,eAA6B,aAGzBj+D,KAAJ89D,cAA4B,gBAGxB99D,KAAJk+D,cAA4B,YAGxBl+D,KAAJg+D,mBAAiC,oBAG7Bh+D,KAAJm+D,mBAAiC,gBAG7Bn+D,KAAJ49D,uBAAqC,cAGjC59D,KAAJ29D,2BAAyC,wBAzCzC,sBAKAn/D,KAACorB,EAAAA,WAADlrB,OAAcgzD,WAAY,8GAL1BlE,mBC0BI,QAAJ6M,GACe/4D,EACA8oE,EACA9lE,EACA+lE,EACA1rB,GAJA3+C,KAAfsB,MAAeA,EACAtB,KAAfoqE,aAAeA,EACApqE,KAAfsE,UAAeA,EACAtE,KAAfqqE,QAAeA,EACArqE,KAAf2+C,WAAeA,EAGf,MAAA0b,MAOAzM,GAAA,WAqDI,QAAJA,GAAwB7tD,EAA6C6L,GAA7C5L,KAAxBD,WAAwBA,EAA6CC,KAArE4L,OAAqEA,EAvBxD5L,KAAbsqE,QAAuB,EAGVtqE,KAAbuqE,WAA0B,EAMbvqE,KAAbwqE,gBAA+B,EAGRxqE,KAAvByqE,oBAAmE,GAAI5lE,GAAAA,aA8DvE,MAhDI+oD,GAAJrtD,UAAAmqE,YAAI,SAAYC,GACJA,EAAKN,SACLrqE,KAAKyqE,oBAAoBhkE,KAAKkkE,EAAKrpE,QAI3CssD,EAAJrtD,UAAA+W,YAAI,SAAY4S,GAChB,GAAc0gD,GAAgB1gD,EAAQogD,QAExB74D,EAAdzR,KAAgB6qE,EAAhBp5D,EAAAo5D,KAAsBP,EAAtB74D,EAAA64D,SAEYpgD,EAAQ2gD,MAAQD,KAChB5qE,KAAK8qE,eAAiBD,GAAQA,EAAKvtD,QAAUutD,EAAK,GAAGvtD,OAASgtD,EAAUO,EAAK,GAAGvtD,OAAS,IAGzF4M,EAAQsgD,iBAAmBI,IAAkB5qE,KAAK+qE,eAClD/qE,KAAK+qE,YAAwC,GAAvB/qE,KAAKwqE,gBAAuBF,EAA9D,MAGYM,GAAkB5qE,KAAKgrE,YACvBhrE,KAAKgrE,UAAe,IAAMV,EAAtC,MAII1c,EAAJrtD,UAAA0qE,aAAI,SAAaC,EAAkBC,GACnC,GAAYC,GAAaF,EAAWlrE,KAAKsqE,QAAUa,CAO3C,OAJID,KACAE,GAAcprE,KAAK8qE,gBAGhBM,IAAeprE,KAAKuqE,YAI/B3c,EAAJrtD,UAAAs5D,gBAAI,WAAA,GAAJ11D,GAAAnE,IACQA,MAAK4L,OAAO+L,kBAAkB,WAC1BxT,EAAKyH,OAAO4oB,SAAS7qB,eAAegE,KAAK2Y,EAAAA,KAAK,IAAIzY,UAAU,WACxE,GAAsB08D,GACFpmE,EAAKpE,WAAWwB,cAAcy2B,cAAc,4BAE5CuyC,IACAA,EAAWjlE,4BAnG/B9G,KAACC,EAAAA,UAADC,OACIC,SAAU,qBACVG,SAAJ,0xCACID,QAAS,kgCACTqI,MACIC,MAAO,oBACPke,KAAM,OACNgmD,gBAAiB,QAErB3kE,SAAU,iBACV3H,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,+CAhD7CZ,KAAIa,EAAAA,aAKJb,KAAIc,EAAAA,4BA+CJm+D,QAAAj/D,KAAKiB,EAAAA,QAGLorE,OAAArsE,KAAKiB,EAAAA,QAGL6rE,aAAA9sE,KAAKiB,EAAAA,QAGL8rE,gBAAA/sE,KAAKiB,EAAAA,QAGL+rE,wBAAAhtE,KAAKiB,EAAAA,QAGL6qE,UAAA9rE,KAAKiB,EAAAA,QAGL8qE,aAAA/rE,KAAKiB,EAAAA,QAML+qE,kBAAAhsE,KAAKiB,EAAAA,QAGLgrE,sBAAAjsE,KAAK2J,EAAAA,UA8DLylD,KCzGAG,GAAA,WAqGI,QAAJA,GACgB/pC,EACqCmnC,EAC1BxwC,EACCgZ,GAGpB,GANQ3zB,KAAhBgkB,kBAAgBA,EACqChkB,KAArDmrD,YAAqDA,EAC1BnrD,KAA3B2a,YAA2BA,EACC3a,KAA5B2zB,IAA4BA,EAxCL3zB,KAAvB46D,eAAgE,GAAI/1D,GAAAA,aAG7C7E,KAAvB6+D,cAA2D,GAAIh6D,GAAAA,aAGxC7E,KAAvB45D,iBAA2D,GAAI/0D,GAAAA,cAqClD7E,KAAK2a,YACN,KAAMogD,GAA2B,cAGrC,KAAK/6D,KAAKmrD,YACN,KAAM4P,GAA2B,kBAG7C,IAAc0Q,GAAiBzrE,KAAK2a,YAAY+wD,oBAClCC,EAAiB3rE,KAAK2a,YAAYixD,kBAAkB,UACpDC,EAAe7rE,KAAK2a,YAAYixD,kBAAkB,QAGlDE,EAAWD,EAAahwD,IAAI,SAACkwD,EAAM3gC,GACrC,OAAS2gC,KAArBA,EAA2BC,OAAQL,EAAevgC,KAE1CprC,MAAK8rE,SAAWA,EAASljE,MAAM6iE,GAAgBlwD,OAAOuwD,EAASljE,MAAM,EAAG6iE,IAExEzrE,KAAKs5D,YAAct5D,KAAK2a,YAAYqgD,QAyK5C,MA5RI36D,QAAJC,eACQytD,EADRxtD,UAAA,kBAAI,WAEI,MAAOP,MAAKs5D,iBAGhB,SAAeh4D,GACnB,GAAcq4D,GAAgB35D,KAAKs5D,YACrB2B,EACFj7D,KAAKurD,mBAAmBvrD,KAAK2a,YAAYugD,YAAY55D,KAAWtB,KAAK2a,YAAYqgD,OACrFh7D,MAAKs5D,YAAct5D,KAAK2a,YAAYwgD,UAAUF,EAAWj7D,KAAKw6D,QAASx6D,KAAKu6D,SAEvEv6D,KAAKisE,oBAAoBtS,EAAe35D,KAAKs5D,cAC9Ct5D,KAAKo7D,wCAKb/6D,OAAJC,eACQytD,EADRxtD,UAAA,gBAAI,WAEI,MAAOP,MAAKo8B,eAGhB,SAAa96B,GACTtB,KAAKo8B,UAAYp8B,KAAKurD,mBAAmBvrD,KAAK2a,YAAYugD,YAAY55D,IACtEtB,KAAKksE,aAAelsE,KAAKmsE,sBAAsBnsE,KAAKo8B,4CAIxD/7B,OAAJC,eACQytD,EADRxtD,UAAA,eAAI,WAEI,MAAOP,MAAKu7D,cAGhB,SAAYj6D,GACRtB,KAAKu7D,SAAWv7D,KAAKurD,mBAAmBvrD,KAAK2a,YAAYugD,YAAY55D,qCAIzEjB,OAAJC,eACQytD,EADRxtD,UAAA,eAAI,WAEI,MAAOP,MAAKw7D,cAGhB,SAAYl6D,GACRtB,KAAKw7D,SAAWx7D,KAAKurD,mBAAmBvrD,KAAK2a,YAAYugD,YAAY55D,qCA0EzEysD,EAAJxtD,UAAAi1B,mBAAI,WACIx1B,KAAKo7D,QAITrN,EAAJxtD,UAAAq/D,aAAI,SAAa1U,GACT,GAAIlrD,KAAKksE,eAAiBhhB,EAAM,CACxC,GAAkBkhB,GAAepsE,KAAK2a,YAAY4+C,QAAQv5D,KAAKo5D,YAC7CiC,EAAgBr7D,KAAK2a,YAAYshD,SAASj8D,KAAKo5D,YAC/C8S,EAAelsE,KAAK2a,YAAYy/C,WAAWgS,EAAc/Q,EAAenQ,EAE9ElrD,MAAK46D,eAAen0D,KAAKylE,GAG7BlsE,KAAK6+D,cAAcp4D,QAIvBsnD,EAAJxtD,UAAAw7D,0BAAI,SAA0Bn2D,GAK9B,GAAc+zD,GAAgB35D,KAAKs5D,YACrBhpC,EAAQtwB,KAAKswB,OAGnB,QAAQ1qB,EAAMwK,SACV,IAAKyoB,GAAAA,WACD74B,KAAKo5D,WAAap5D,KAAK2a,YAAYggD,gBAAgB36D,KAAKs5D,YAAahpC,EAAQ,GAAK,EAClF,MACJ,KAAKwI,GAAAA,YACD94B,KAAKo5D,WAAap5D,KAAK2a,YAAYggD,gBAAgB36D,KAAKs5D,YAAahpC,GAAS,EAAI,EAClF,MACJ,KAAKsI,GAAAA,SACD54B,KAAKo5D,WAAap5D,KAAK2a,YAAYggD,gBAAgB36D,KAAKs5D,aAAc,EACtE,MACJ,KAAK3gC,GAAAA,WACD34B,KAAKo5D,WAAap5D,KAAK2a,YAAYggD,gBAAgB36D,KAAKs5D,YAAa,EACrE,MACJ,KAAKlgC,GAAAA,KACDp5B,KAAKo5D,WAAap5D,KAAK2a,YAAYggD,gBAAgB36D,KAAKs5D,YACpD,EAAIt5D,KAAK2a,YAAYmhD,QAAQ97D,KAAKs5D,aACtC,MACJ,KAAKjgC,GAAAA,IACDr5B,KAAKo5D,WAAap5D,KAAK2a,YAAYggD,gBAAgB36D,KAAKs5D,YACnDt5D,KAAK2a,YAAYkhD,kBAAkB77D,KAAKs5D,aACrCt5D,KAAK2a,YAAYmhD,QAAQ97D,KAAKs5D,aACtC,MACJ,KAAK3kB,GAAAA,QACD30C,KAAKo5D,WAAaxzD,EAAMqzB,OACpBj5B,KAAK2a,YAAY0+C,iBAAiBr5D,KAAKs5D,aAAc,GACrDt5D,KAAK2a,YAAYqhD,kBAAkBh8D,KAAKs5D,aAAc,EAC1D,MACJ,KAAKzkB,GAAAA,UACD70C,KAAKo5D,WAAaxzD,EAAMqzB,OACpBj5B,KAAK2a,YAAY0+C,iBAAiBr5D,KAAKs5D,YAAa,GACpDt5D,KAAK2a,YAAYqhD,kBAAkBh8D,KAAKs5D,YAAa,EACzD,MACJ,KAAKvgC,GAAAA,MACL,IAAKC,GAAAA,MAQD,YAPKh5B,KAAKy6D,aAAcz6D,KAAKy6D,WAAWz6D,KAAKs5D,eACzCt5D,KAAK4/D,aAAa5/D,KAAK2a,YAAYmhD,QAAQ97D,KAAKs5D,cAChDt5D,KAAK6+D,cAAcp4D,OAEnBb,EAAM4W,kBAId,SAEI,OAGJxc,KAAK2a,YAAY++C,YAAYC,EAAe35D,KAAKo5D,aACjDp5D,KAAK45D,iBAAiBnzD,KAAKzG,KAAKo5D,YAGpCp5D,KAAK65D,kBAELj0D,EAAM4W,kBAIVuxC,EAAJxtD,UAAA66D,KAAI,WACIp7D,KAAKksE,aAAelsE,KAAKmsE,sBAAsBnsE,KAAKutB,UACpDvtB,KAAKqsE,UAAYrsE,KAAKmsE,sBAAsBnsE,KAAK2a,YAAYqgD,SAC7Dh7D,KAAKssE,WACDtsE,KAAK2a,YAAY0hD,cAAc,SAASr8D,KAAK2a,YAAYshD,SAASj8D,KAAKo5D,aAE3Ep5D,KAAKssE,WAAatsE,KAAKssE,WAAW,GAAG1P,oBAAsB58D,KAAKssE,WAAWzP,OAAO,EAE1F,IAAcK,GAAel9D,KAAK2a,YAAYy/C,WAAWp6D,KAAK2a,YAAY4+C,QAAQv5D,KAAKo5D,YAC3Ep5D,KAAK2a,YAAYshD,SAASj8D,KAAKo5D,YAAa,EAChDp5D,MAAKusE,iBAtOS,EAuOOvsE,KAAK2a,YAAY6xD,aAAatP,GAC3Cl9D,KAAK2a,YAAY+wD,qBAxOX,EA0Od1rE,KAAKysE,kBACLzsE,KAAKgkB,kBAAkB5e,gBAI3B2oD,EAAJxtD,UAAAs5D,gBAAI,WACI75D,KAAK+5D,eAAeF,mBAIhB9L,EAAZxtD,UAAAksE,gBAAI,WACJ,GAAc7Q,GAAc57D,KAAK2a,YAAYkhD,kBAAkB77D,KAAKo5D,YACtDsT,EAAY1sE,KAAK2a,YAAYgyD,cAEnC3sE,MAAK4sE,UAEL,KAAK,GAAIxhC,GAAI,EAAGu/B,EAAO3qE,KAAKusE,gBAAiBnhC,EAAIwwB,EAAaxwB,IAAKu/B,IAAQ,CA1P7D,IA2PNA,IACA3qE,KAAK4sE,MAAMzkD,SACXwiD,EAAO,EAEvB,IAAkBzf,GAAOlrD,KAAK2a,YAAYy/C,WAC1Bp6D,KAAK2a,YAAY4+C,QAAQv5D,KAAKo5D,YAC9Bp5D,KAAK2a,YAAYshD,SAASj8D,KAAKo5D,YAAahuB,EAAI,GAC9Ci/B,EAAUrqE,KAAK6sE,iBAAiB3hB,GAChC5mD,EAAYtE,KAAK2a,YAAY2F,OAAO4qC,EAAMlrD,KAAKmrD,YAAYW,QAAQghB,eACnEC,EAAc/sE,KAAKmgE,UAAYngE,KAAKmgE,UAAUjV,OAAQ94C,EAE5DpS,MAAK4sE,MAAM5sE,KAAK4sE,MAAMtvD,OAAS,GAC1B6K,KAAK,GAAIkyC,IAAejvB,EAAI,EAAGshC,EAAUthC,GAAI9mC,EAAW+lE,EAAS0C,MAKtEhf,EAAZxtD,UAAAssE,iBAAI,SAAyB3hB,GACrB,QAASA,KACHlrD,KAAKy6D,YAAcz6D,KAAKy6D,WAAWvP,OACnClrD,KAAKw6D,SAAWx6D,KAAK2a,YAAY++C,YAAYxO,EAAMlrD,KAAKw6D,UAAY,MACpEx6D,KAAKu6D,SAAWv6D,KAAK2a,YAAY++C,YAAYxO,EAAMlrD,KAAKu6D,UAAY,IAOtExM,EAAZxtD,UAAA4rE,sBAAI,SAA8BjhB,GAC1B,MAAOA,IAAQlrD,KAAKisE,oBAAoB/gB,EAAMlrD,KAAKo5D,YAC/Cp5D,KAAK2a,YAAYmhD,QAAQ5Q,GAAQ,MAIjC6C,EAAZxtD,UAAA0rE,oBAAI,SAA4Be,EAAcC,GACtC,SAAUD,IAAMC,GAAMjtE,KAAK2a,YAAYshD,SAAS+Q,KAAQhtE,KAAK2a,YAAYshD,SAASgR,IAC9EjtE,KAAK2a,YAAY4+C,QAAQyT,KAAQhtE,KAAK2a,YAAY4+C,QAAQ0T,KAO1Dlf,EAAZxtD,UAAAgrD,mBAAI,SAA2BQ,GACvB,MAAQ/rD,MAAK2a,YAAYqxC,eAAeD,IAAQ/rD,KAAK2a,YAAY2wC,QAAQS,GAAQA,EAAM,MAInFgC,EAAZxtD,UAAA+vB,MAAI,WACI,MAAOtwB,MAAK2zB,KAA0B,QAAnB3zB,KAAK2zB,IAAIryB,sBArSpC9C,KAACC,EAAAA,UAADC,OACIC,SAAU,gBACVG,SAAJ,yjBACI4H,SAAU,cACV3H,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,+CAzC7CZ,KAAIsJ,EAAAA,oBA2IJtJ,SAAA4T,GAAApK,aAAAxJ,KAAS+T,EAAAA,WAAT/T,KAAqB6T,EAAAA,OAArB3T,MAA4B8tD,EAAAA,qBAhI5BhuD,KAASqjB,EAAAA,YAAT7Z,aAAAxJ,KAiIS+T,EAAAA,aAlIT/T,KAAS8T,EAAAA,eAATtK,aAAAxJ,KAmIS+T,EAAAA,gCA9FT6mD,aAAA56D,KAAKiB,EAAAA,QAiBL8tB,WAAA/uB,KAAKiB,EAAAA,QAWL+6D,UAAAh8D,KAAKiB,EAAAA,QAUL86D,UAAA/7D,KAAKiB,EAAAA,QAULg7D,aAAAj8D,KAAKiB,EAAAA,QAGL0gE,YAAA3hE,KAAKiB,EAAAA,QAGLm7D,iBAAAp8D,KAAK2J,EAAAA,SAGL02D,gBAAArgE,KAAK2J,EAAAA,SAGLyxD,mBAAAp7D,KAAK2J,EAAAA,SAGL4xD,iBAAAv7D,KAAK0J,EAAAA,UAALxJ,MAAekvD,OA6NfG,KlBtSAE,GAAA,WAqFI,QAAJA,GACgBjqC,EACWrJ,EACCgZ,GAEpB,GAJQ3zB,KAAhBgkB,kBAAgBA,EACWhkB,KAA3B2a,YAA2BA,EACC3a,KAA5B2zB,IAA4BA,EA3BL3zB,KAAvB46D,eAAyD,GAAI/1D,GAAAA,aAGtC7E,KAAvB66D,aAAuD,GAAIh2D,GAAAA,aAGpC7E,KAAvB45D,iBAA2D,GAAI/0D,GAAAA,cAuBlD7E,KAAK2a,YACN,KAAMogD,GAA2B,cAGrC/6D,MAAKs5D,YAAct5D,KAAK2a,YAAYqgD,QAmJ5C,MAxOI36D,QAAJC,eACQ2tD,EADR1tD,UAAA,kBAAI,WAEI,MAAOP,MAAKs5D,iBAGhB,SAAeh4D,GACnB,GAAcq4D,GAAgB35D,KAAKs5D,YACrB2B,EACFj7D,KAAKurD,mBAAmBvrD,KAAK2a,YAAYugD,YAAY55D,KAAWtB,KAAK2a,YAAYqgD,OACrFh7D,MAAKs5D,YAAct5D,KAAK2a,YAAYwgD,UAAUF,EAAWj7D,KAAKw6D,QAASx6D,KAAKu6D,SAExEtiD,KAAKg9B,MAAMj1C,KAAK2a,YAAY4+C,QAAQI,GA7BpB,MA8BhB1hD,KAAKg9B,MAAMj1C,KAAK2a,YAAY4+C,QAAQv5D,KAAKs5D,aA9BzB,KA+BhBt5D,KAAKo7D,wCAKb/6D,OAAJC,eACQ2tD,EADR1tD,UAAA,gBAAI,WAEI,MAAOP,MAAKo8B,eAGhB,SAAa96B,GACTtB,KAAKo8B,UAAYp8B,KAAKurD,mBAAmBvrD,KAAK2a,YAAYugD,YAAY55D,IACtEtB,KAAKosE,aAAepsE,KAAKo8B,WAAap8B,KAAK2a,YAAY4+C,QAAQv5D,KAAKo8B,4CAIxE/7B,OAAJC,eACQ2tD,EADR1tD,UAAA,eAAI,WAEI,MAAOP,MAAKu7D,cAGhB,SAAYj6D,GACRtB,KAAKu7D,SAAWv7D,KAAKurD,mBAAmBvrD,KAAK2a,YAAYugD,YAAY55D,qCAIzEjB,OAAJC,eACQ2tD,EADR1tD,UAAA,eAAI,WAEI,MAAOP,MAAKw7D,cAGhB,SAAYl6D,GACRtB,KAAKw7D,SAAWx7D,KAAKurD,mBAAmBvrD,KAAK2a,YAAYugD,YAAY55D,qCA2CzE2sD,EAAJ1tD,UAAAi1B,mBAAI,WACIx1B,KAAKo7D,QAITnN,EAAJ1tD,UAAA66D,KAAI,WAAA,GAAJj3D,GAAAnE,IACQA,MAAKktE,UAAYltE,KAAK2a,YAAY4+C,QAAQv5D,KAAK2a,YAAYqgD,QACnE,IAAc+B,GAAa/8D,KAAK2a,YAAY4+C,QAAQv5D,KAAKs5D,aAC3C6T,EAAepQ,EAlHD,EAmHpB/8D,MAAKotE,QACL,KAAK,GAAIhiC,GAAI,EAAGmxB,KAAoBnxB,EApHhB,GAoHkCA,IAClDmxB,EAAIp0C,KAAK40C,EAAaoQ,EAAe/hC,GAnHtB,IAoHXmxB,EAAIj/C,SACJtd,KAAKotE,MAAMjlD,KAAKo0C,EAAI1gD,IAAI,SAACo+C,GAAS,MAAA91D,GAAK61D,kBAAkBC,MACzDsC,KAGRv8D,MAAKgkB,kBAAkB5e,gBAI3B6oD,EAAJ1tD,UAAAk5D,eAAI,SAAeQ,GACXj6D,KAAK66D,aAAap0D,KAAKzG,KAAK2a,YAAYy/C,WAAWH,EAAM,EAAG,GACpE,IAAcyB,GAAQ17D,KAAK2a,YAAYshD,SAASj8D,KAAKo5D,YACvCwC,EACF57D,KAAK2a,YAAYkhD,kBAAkB77D,KAAK2a,YAAYy/C,WAAWH,EAAMyB,EAAO,GAChF17D,MAAK46D,eAAen0D,KAAKzG,KAAK2a,YAAYy/C,WAAWH,EAAMyB,EACvDzjD,KAAKoX,IAAIrvB,KAAK2a,YAAYmhD,QAAQ97D,KAAKo5D,YAAawC,MAI5D3N,EAAJ1tD,UAAAw7D,0BAAI,SAA0Bn2D,GAK9B,GAAc+zD,GAAgB35D,KAAKs5D,YACrBhpC,EAAQtwB,KAAKswB,OAGnB,QAAQ1qB,EAAMwK,SACV,IAAKyoB,GAAAA,WACD74B,KAAKo5D,WAAap5D,KAAK2a,YAAY0+C,iBAAiBr5D,KAAKs5D,YAAahpC,EAAQ,GAAK,EACnF,MACJ,KAAKwI,GAAAA,YACD94B,KAAKo5D,WAAap5D,KAAK2a,YAAY0+C,iBAAiBr5D,KAAKs5D,YAAahpC,GAAS,EAAI,EACnF,MACJ,KAAKsI,GAAAA,SACD54B,KAAKo5D,WAAap5D,KAAK2a,YAAY0+C,iBAAiBr5D,KAAKs5D,aAxJ9C,EAyJX,MACJ,KAAK3gC,GAAAA,WACD34B,KAAKo5D,WAAap5D,KAAK2a,YAAY0+C,iBAAiBr5D,KAAKs5D,YA3J9C,EA4JX,MACJ,KAAKlgC,GAAAA,KACDp5B,KAAKo5D,WAAap5D,KAAK2a,YAAY0+C,iBAAiBr5D,KAAKs5D,aACpDt5D,KAAK2a,YAAY4+C,QAAQv5D,KAAKs5D,aAjKvB;kHAkKZ,MACJ,KAAKjgC,GAAAA,IACDr5B,KAAKo5D,WAAap5D,KAAK2a,YAAY0+C,iBAAiBr5D,KAAKs5D,YApK7C,GAqKOt5D,KAAK2a,YAAY4+C,QAAQv5D,KAAKs5D,aArKrC,GAqKmE,EAC/E,MACJ,KAAK3kB,GAAAA,QACD30C,KAAKo5D,WACDp5D,KAAK2a,YAAY0+C,iBACbr5D,KAAKs5D,YAAa1zD,EAAMqzB,QAAS,KA1K7B,GA2KZ,MACJ,KAAK4b,GAAAA,UACD70C,KAAKo5D,WACDp5D,KAAK2a,YAAY0+C,iBACbr5D,KAAKs5D,YAAa1zD,EAAMqzB,OAASugC,IA/K7B,GAgLZ,MACJ,KAAKzgC,GAAAA,MACL,IAAKC,GAAAA,MACDh5B,KAAKy5D,eAAez5D,KAAK2a,YAAY4+C,QAAQv5D,KAAKs5D,aAClD,MACJ,SAEI,OAGJt5D,KAAK2a,YAAY++C,YAAYC,EAAe35D,KAAKo5D,aACjDp5D,KAAK45D,iBAAiBnzD,KAAKzG,KAAKo5D,YAGpCp5D,KAAK65D,kBAELj0D,EAAM4W,kBAGVyxC,EAAJ1tD,UAAAu5D,cAAI,WACI,MAAO95D,MAAK2a,YAAY4+C,QAAQv5D,KAAKo5D,YApMjB,IAwMxBnL,EAAJ1tD,UAAAs5D,gBAAI,WACI75D,KAAK+5D,eAAeF,mBAIhB5L,EAAZ1tD,UAAAy5D,kBAAI,SAA0BC,GAC9B,GAAcC,GAAWl6D,KAAK2a,YAAYw/C,YAAYn6D,KAAK2a,YAAYy/C,WAAWH,EAAM,EAAG,GAEnF,OAAO,IAAII,IAAeJ,EAAMC,EAAUA,EAAUl6D,KAAKs6D,iBAAiBL,KAItEhM,EAAZ1tD,UAAA+5D,iBAAI,SAAyBL,GAErB,OAAa7nD,KAAT6nD,GAA+B,OAATA,GACrBj6D,KAAKu6D,SAAWN,EAAOj6D,KAAK2a,YAAY4+C,QAAQv5D,KAAKu6D,UACrDv6D,KAAKw6D,SAAWP,EAAOj6D,KAAK2a,YAAY4+C,QAAQv5D,KAAKw6D,SACtD,OAAO,CAIX,KAAKx6D,KAAKy6D,WACN,OAAO,CAMX,KAAK,GAHCC,GAAc16D,KAAK2a,YAAYy/C,WAAWH,EAAM,EAAG,GAGhD/O,EAAOwP,EAAa16D,KAAK2a,YAAY4+C,QAAQrO,KAAU+O,EAC3D/O,EAAOlrD,KAAK2a,YAAYggD,gBAAgBzP,EAAM,GAC/C,GAAIlrD,KAAKy6D,WAAWvP,GAChB,OAAO,CAIf,QAAO,GAOH+C,EAAZ1tD,UAAAgrD,mBAAI,SAA2BQ,GACvB,MAAQ/rD,MAAK2a,YAAYqxC,eAAeD,IAAQ/rD,KAAK2a,YAAY2wC,QAAQS,GAAQA,EAAM,MAInFkC,EAAZ1tD,UAAA+vB,MAAI,WACI,MAAOtwB,MAAK2zB,KAA0B,QAAnB3zB,KAAK2zB,IAAIryB,sBA/OpC9C,KAACC,EAAAA,UAADC,OACIC,SAAU,qBACVG,SAAJ,ibACI4H,SAAU,kBACV3H,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,+CA1C7CZ,KAAIsJ,EAAAA,oBAUJtJ,KAASqjB,EAAAA,YAAT7Z,aAAAxJ,KAkHS+T,EAAAA,aAnHT/T,KAAS8T,EAAAA,eAATtK,aAAAxJ,KAoHS+T,EAAAA,gCA/ET6mD,aAAA56D,KAAKiB,EAAAA,QAkBL8tB,WAAA/uB,KAAKiB,EAAAA,QAWL+6D,UAAAh8D,KAAKiB,EAAAA,QAUL86D,UAAA/7D,KAAKiB,EAAAA,QAULg7D,aAAAj8D,KAAKiB,EAAAA,QAGLm7D,iBAAAp8D,KAAK2J,EAAAA,SAGL0yD,eAAAr8D,KAAK2J,EAAAA,SAGLyxD,mBAAAp7D,KAAK2J,EAAAA,SAGL4xD,iBAAAv7D,KAAK0J,EAAAA,UAALxJ,MAAekvD,OA2KfK,KCtPAD,GAAA,WA0FI,QAAJA,GACgBhqC,EACqCmnC,EAC1BxwC,EACCgZ,GAEpB,GALQ3zB,KAAhBgkB,kBAAgBA,EACqChkB,KAArDmrD,YAAqDA,EAC1BnrD,KAA3B2a,YAA2BA,EACC3a,KAA5B2zB,IAA4BA,EAlCL3zB,KAAvB46D,eAAyD,GAAI/1D,GAAAA,aAGtC7E,KAAvB86D,cAAwD,GAAIj2D,GAAAA,aAGrC7E,KAAvB45D,iBAA2D,GAAI/0D,GAAAA,cA8BlD7E,KAAK2a,YACN,KAAMogD,GAA2B,cAGrC,KAAK/6D,KAAKmrD,YACN,KAAM4P,GAA2B,kBAGrC/6D,MAAKs5D,YAAct5D,KAAK2a,YAAYqgD,QAiM5C,MAhSI36D,QAAJC,eACQ0tD,EADRztD,UAAA,kBAAI,WAEI,MAAOP,MAAKs5D,iBAGhB,SAAeh4D,GACnB,GAAcq4D,GAAgB35D,KAAKs5D,YACrB2B,EACFj7D,KAAKurD,mBAAmBvrD,KAAK2a,YAAYugD,YAAY55D,KAAWtB,KAAK2a,YAAYqgD,OACrFh7D,MAAKs5D,YAAct5D,KAAK2a,YAAYwgD,UAAUF,EAAWj7D,KAAKw6D,QAASx6D,KAAKu6D,SAExEv6D,KAAK2a,YAAY4+C,QAAQI,KAAmB35D,KAAK2a,YAAY4+C,QAAQv5D,KAAKs5D,cAC1Et5D,KAAKo7D,wCAKb/6D,OAAJC,eACQ0tD,EADRztD,UAAA,gBAAI,WAEI,MAAOP,MAAKo8B,eAGhB,SAAa96B,GACTtB,KAAKo8B,UAAYp8B,KAAKurD,mBAAmBvrD,KAAK2a,YAAYugD,YAAY55D,IACtEtB,KAAKq7D,cAAgBr7D,KAAKs7D,sBAAsBt7D,KAAKo8B,4CAIzD/7B,OAAJC,eACQ0tD,EADRztD,UAAA,eAAI,WAEI,MAAOP,MAAKu7D,cAGhB,SAAYj6D,GACRtB,KAAKu7D,SAAWv7D,KAAKurD,mBAAmBvrD,KAAK2a,YAAYugD,YAAY55D,qCAIzEjB,OAAJC,eACQ0tD,EADRztD,UAAA,eAAI,WAEI,MAAOP,MAAKw7D,cAGhB,SAAYl6D,GACRtB,KAAKw7D,SAAWx7D,KAAKurD,mBAAmBvrD,KAAK2a,YAAYugD,YAAY55D,qCAsDzE0sD,EAAJztD,UAAAi1B,mBAAI,WACIx1B,KAAKo7D,QAITpN,EAAJztD,UAAAk7D,gBAAI,SAAgBC,GACpB,GAAcC,GACF37D,KAAK2a,YAAYy/C,WAAWp6D,KAAK2a,YAAY4+C,QAAQv5D,KAAKo5D,YAAasC,EAAO,EAElF17D,MAAK86D,cAAcr0D,KAAKk1D,EAEhC,IAAcC,GAAc57D,KAAK2a,YAAYkhD,kBAAkBF,EAEvD37D,MAAK46D,eAAen0D,KAAKzG,KAAK2a,YAAYy/C,WACtCp6D,KAAK2a,YAAY4+C,QAAQv5D,KAAKo5D,YAAasC,EAC3CzjD,KAAKoX,IAAIrvB,KAAK2a,YAAYmhD,QAAQ97D,KAAKo5D,YAAawC,MAI5D5N,EAAJztD,UAAAw7D,0BAAI,SAA0Bn2D,GAK9B,GAAc+zD,GAAgB35D,KAAKs5D,YACrBhpC,EAAQtwB,KAAKswB,OAOnB,QAAQ1qB,EAAMwK,SACV,IAAKyoB,GAAAA,WACD74B,KAAKo5D,WAAap5D,KAAK2a,YAAYqhD,kBAAkBh8D,KAAKs5D,YAAahpC,EAAQ,GAAK,EACpF,MACJ,KAAKwI,GAAAA,YACD94B,KAAKo5D,WAAap5D,KAAK2a,YAAYqhD,kBAAkBh8D,KAAKs5D,YAAahpC,GAAS,EAAI,EACpF,MACJ,KAAKsI,GAAAA,SACD54B,KAAKo5D,WAAap5D,KAAK2a,YAAYqhD,kBAAkBh8D,KAAKs5D,aAb3C,EAcf,MACJ,KAAK3gC,GAAAA,WACD34B,KAAKo5D,WAAap5D,KAAK2a,YAAYqhD,kBAAkBh8D,KAAKs5D,YAhB3C,EAiBf,MACJ,KAAKlgC,GAAAA,KACDp5B,KAAKo5D,WAAap5D,KAAK2a,YAAYqhD,kBAAkBh8D,KAAKs5D,aACrDt5D,KAAK2a,YAAYshD,SAASj8D,KAAKs5D,aACpC,MACJ,KAAKjgC,GAAAA,IACDr5B,KAAKo5D,WAAap5D,KAAK2a,YAAYqhD,kBAAkBh8D,KAAKs5D,YArB1C,GAsBMt5D,KAAK2a,YAAYshD,SAASj8D,KAAKs5D,aACrD,MACJ,KAAK3kB,GAAAA,QACD30C,KAAKo5D,WACDp5D,KAAK2a,YAAY0+C,iBAAiBr5D,KAAKs5D,YAAa1zD,EAAMqzB,QA3BnD,IA2B2E,EACtF,MACJ,KAAK4b,GAAAA,UACD70C,KAAKo5D,WACDp5D,KAAK2a,YAAY0+C,iBAAiBr5D,KAAKs5D,YAAa1zD,EAAMqzB,OA/BnD,GA+ByE,EACpF,MACJ,KAAKF,GAAAA,MACL,IAAKC,GAAAA,MACDh5B,KAAKy7D,gBAAgBz7D,KAAK2a,YAAYshD,SAASj8D,KAAKs5D,aACpD,MACJ,SAEI,OAGJt5D,KAAK2a,YAAY++C,YAAYC,EAAe35D,KAAKo5D,aACjDp5D,KAAK45D,iBAAiBnzD,KAAKzG,KAAKo5D,YAGpCp5D,KAAK65D,kBAELj0D,EAAM4W,kBAIVwxC,EAAJztD,UAAA66D,KAAI,WAAA,GAAJj3D,GAAAnE,IACQA,MAAKq7D,cAAgBr7D,KAAKs7D,sBAAsBt7D,KAAKutB,UACrDvtB,KAAKk8D,WAAal8D,KAAKs7D,sBAAsBt7D,KAAK2a,YAAYqgD,SAC9Dh7D,KAAKm8D,UAAYn8D,KAAK2a,YAAYw/C,YAAYn6D,KAAKo5D,WAE3D,IAAcgD,GAAap8D,KAAK2a,YAAY0hD,cAAc,QAIlDr8D,MAAKs8D,SAAW,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,KAAKzgD,IAAI,SAAC0gD,GAAQ,MAAAA,GAAI1gD,IACxE,SAAC6/C,GAAU,MAAAv3D,GAAKq4D,mBAAmBd,EAAOU,EAAWV,QACzD17D,KAAKgkB,kBAAkB5e,gBAI3B4oD,EAAJztD,UAAAs5D,gBAAI,WACI75D,KAAK+5D,eAAeF,mBAOhB7L,EAAZztD,UAAA+6D,sBAAI,SAA8BpQ,GAC1B,MAAOA,IAAQlrD,KAAK2a,YAAY4+C,QAAQrO,KAAUlrD,KAAK2a,YAAY4+C,QAAQv5D,KAAKo5D,YAC5Ep5D,KAAK2a,YAAYshD,SAAS/Q,GAAQ,MAIlC8C,EAAZztD,UAAAi8D,mBAAI,SAA2Bd,EAAee,GAC9C,GAAcn4D,GAAYtE,KAAK2a,YAAY2F,OAC/BtgB,KAAK2a,YAAYy/C,WAAWp6D,KAAK2a,YAAY4+C,QAAQv5D,KAAKo5D,YAAasC,EAAO,GAC9E17D,KAAKmrD,YAAYW,QAAQ4Q,oBAEvBC,EAAeF,EAAU,GAAGG,oBAAsBH,EAAUI,OAAO,EAEzE,OAAO,IAAIxC,IACPqB,EAAOiB,EAAcr4D,EAAWtE,KAAK88D,kBAAkBpB,KAIvD1N,EAAZztD,UAAAu8D,kBAAI,SAA0BpB,GAE9B,GAAcqB,GAAa/8D,KAAK2a,YAAY4+C,QAAQv5D,KAAKo5D,WAEjD,QAAchnD,KAAVspD,GAAiC,OAAVA,GACvB17D,KAAKg9D,2BAA2BD,EAAYrB,IAC5C17D,KAAKi9D,4BAA4BF,EAAYrB,GAC7C,OAAO,CAGX,KAAK17D,KAAKy6D,WACN,OAAO,CAMX,KAAK,GAHCyC,GAAel9D,KAAK2a,YAAYy/C,WAAW2C,EAAYrB,EAAO,GAG3DxQ,EAAOgS,EAAcl9D,KAAK2a,YAAYshD,SAAS/Q,KAAUwQ,EAC7DxQ,EAAOlrD,KAAK2a,YAAYggD,gBAAgBzP,EAAM,GAC/C,GAAIlrD,KAAKy6D,WAAWvP,GAChB,OAAO,CAIf,QAAO,GAOH8C,EAAZztD,UAAAy8D,2BAAI,SAAmC/C,EAAcyB,GAC7C,GAAI17D,KAAKu6D,QAAS,CAC1B,GAAkB4C,GAAUn9D,KAAK2a,YAAY4+C,QAAQv5D,KAAKu6D,SACxC6C,EAAWp9D,KAAK2a,YAAYshD,SAASj8D,KAAKu6D,QAEhD,OAAON,GAAOkD,GAAYlD,IAASkD,GAAWzB,EAAQ0B,EAG1D,OAAO,GAOHpP,EAAZztD,UAAA08D,4BAAI,SAAoChD,EAAcyB,GAC9C,GAAI17D,KAAKw6D,QAAS,CAC1B,GAAkB6C,GAAUr9D,KAAK2a,YAAY4+C,QAAQv5D,KAAKw6D,SACxC8C,EAAWt9D,KAAK2a,YAAYshD,SAASj8D,KAAKw6D,QAEhD,OAAOP,GAAOoD,GAAYpD,IAASoD,GAAW3B,EAAQ4B,EAG1D,OAAO,GAOHtP,EAAZztD,UAAAgrD,mBAAI,SAA2BQ,GACvB,MAAQ/rD,MAAK2a,YAAYqxC,eAAeD,IAAQ/rD,KAAK2a,YAAY2wC,QAAQS,GAAQA,EAAM,MAInFiC,EAAZztD,UAAA+vB,MAAI,WACI,MAAOtwB,MAAK2zB,KAA0B,QAAnB3zB,KAAK2zB,IAAIryB,sBAvSpC9C,KAACC,EAAAA,UAADC,OACIC,SAAU,eACVG,SAAJ,sfACI4H,SAAU,aACV3H,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,+CAtC7CZ,KAAIsJ,EAAAA,oBA6HJtJ,SAAA4T,GAAApK,aAAAxJ,KAAS+T,EAAAA,WAAT/T,KAAqB6T,EAAAA,OAArB3T,MAA4B8tD,EAAAA,qBAlH5BhuD,KAASqjB,EAAAA,YAAT7Z,aAAAxJ,KAmHS+T,EAAAA,aApHT/T,KAAS8T,EAAAA,eAATtK,aAAAxJ,KAqHS+T,EAAAA,gCArFT6mD,aAAA56D,KAAKiB,EAAAA,QAiBL8tB,WAAA/uB,KAAKiB,EAAAA,QAWL+6D,UAAAh8D,KAAKiB,EAAAA,QAUL86D,UAAA/7D,KAAKiB,EAAAA,QAULg7D,aAAAj8D,KAAKiB,EAAAA,QAGLm7D,iBAAAp8D,KAAK2J,EAAAA,SAGL2yD,gBAAAt8D,KAAK2J,EAAAA,SAGLyxD,mBAAAp7D,KAAK2J,EAAAA,SAGL4xD,iBAAAv7D,KAAK0J,EAAAA,UAALxJ,MAAekvD,OAoOfI,KCxSAE,GAAA,WAQI,QAAJA,GAAwBrB,EACqC0Q,EACzB5iD,EACyBwwC,EAC7CnnC,GAJQhkB,KAAxB6sD,KAAwBA,EACqC7sD,KAA7Du9D,SAA6DA,EACzBv9D,KAApC2a,YAAoCA,EACyB3a,KAA7DmrD,YAA6DA,EAGrDnrD,KAAKu9D,SAASlnD,aAAaxI,UAAU,WAAM,MAAAmW,GAAkB5e,iBAwGrE,MApGI/E,QAAJC,eAAQ4tD,EAAR3tD,UAAA,wBAAI,WACI,GAAkC,UAA9BP,KAAKu9D,SAASC,YAAyB,CACnD,GAAkBC,GAAQz9D,KAAK2a,YACd2F,OAAOtgB,KAAKu9D,SAASnE,WAAYp5D,KAAKmrD,YAAYW,QAAQ4R,eAE/D,OAAOD,GAAM,GAAGb,oBAAsBa,EAAMZ,OAAO,GAGvD,GAAkC,SAA9B78D,KAAKu9D,SAASC,YACd,MAAOx9D,MAAK2a,YAAYw/C,YAAYn6D,KAAKu9D,SAASnE,WAG9D,IAAc2D,GAAa/8D,KAAK2a,YAAY4+C,QAAQv5D,KAAKu9D,SAASnE,WAQ1D,OAPwBp5D,MAAK2a,YAAYw/C,YAErCn6D,KAAK2a,YAAYy/C,WAAW2C,EAAaA,EAAa,GAAI,EAAG,IAKzE,MAJ+B/8D,KAAK2a,YAAYw/C,YAEpCn6D,KAAK2a,YAAYy/C,WAAW2C,EFzCZ,GEyCwC,EAAIA,EAAa,GAAI,EAAG,qCAKxF18D,OAAJC,eAAQ4tD,EAAR3tD,UAAA,yBAAI,WACI,MAAqC,UAA9BP,KAAKu9D,SAASC,YACjBx9D,KAAK6sD,KAAK8Q,2BAA6B39D,KAAK6sD,KAAK+Q,wDAIzDv9D,OAAJC,eAAQ4tD,EAAR3tD,UAAA,uBAAI,WACI,OACIm7D,MAAO17D,KAAK6sD,KAAKgR,eACjB5D,KAAMj6D,KAAK6sD,KAAKiR,cAChBC,aAAc/9D,KAAK6sD,KAAKmR,oBAC1Bh+D,KAAKu9D,SAASC,8CAIpBn9D,OAAJC,eAAQ4tD,EAAR3tD,UAAA,uBAAI,WACI,OACIm7D,MAAO17D,KAAK6sD,KAAKoR,eACjBhE,KAAMj6D,KAAK6sD,KAAKqR,cAChBH,aAAc/9D,KAAK6sD,KAAKsR,oBAC1Bn+D,KAAKu9D,SAASC,8CAIpBtP,EAAJ3tD,UAAA69D,qBAAI,WACIp+D,KAAKu9D,SAASC,YAA4C,UAA9Bx9D,KAAKu9D,SAASC,YAA0B,aAAe,SAIvFtP,EAAJ3tD,UAAA89D,gBAAI,WACIr+D,KAAKu9D,SAASnE,WAA2C,UAA9Bp5D,KAAKu9D,SAASC,YACrCx9D,KAAK2a,YAAYqhD,kBAAkBh8D,KAAKu9D,SAASnE,YAAa,GAC9Dp5D,KAAK2a,YAAY0+C,iBACbr5D,KAAKu9D,SAASnE,WAA0C,SAA9Bp5D,KAAKu9D,SAASC,aAA0B,GF/EtD,KEoFxBtP,EAAJ3tD,UAAA+9D,YAAI,WACIt+D,KAAKu9D,SAASnE,WAA2C,UAA9Bp5D,KAAKu9D,SAASC,YACrCx9D,KAAK2a,YAAYqhD,kBAAkBh8D,KAAKu9D,SAASnE,WAAY,GAC7Dp5D,KAAK2a,YAAY0+C,iBACbr5D,KAAKu9D,SAASnE,WACgB,SAA9Bp5D,KAAKu9D,SAASC,YAAyB,EFzF3B,KE8FxBtP,EAAJ3tD,UAAAg+D,gBAAI,WACI,OAAKv+D,KAAKu9D,SAAS/C,WAIXx6D,KAAKu9D,SAAS/C,UACjBx6D,KAAKw+D,WAAWx+D,KAAKu9D,SAASnE,WAAYp5D,KAAKu9D,SAAS/C,WAIjEtM,EAAJ3tD,UAAAk+D,YAAI,WACI,OAAQz+D,KAAKu9D,SAAShD,UACjBv6D,KAAKw+D,WAAWx+D,KAAKu9D,SAASnE,WAAYp5D,KAAKu9D,SAAShD,UAIzDrM,EAAZ3tD,UAAAi+D,WAAI,SAAmBE,EAAUC,GACzB,MAAkC,UAA9B3+D,KAAKu9D,SAASC,YACPx9D,KAAK2a,YAAY4+C,QAAQmF,KAAW1+D,KAAK2a,YAAY4+C,QAAQoF,IAChE3+D,KAAK2a,YAAYshD,SAASyC,KAAW1+D,KAAK2a,YAAYshD,SAAS0C,GAErC,SAA9B3+D,KAAKu9D,SAASC,YACPx9D,KAAK2a,YAAY4+C,QAAQmF,KAAW1+D,KAAK2a,YAAY4+C,QAAQoF,GAIjE1mD,KAAKg9B,MAAMj1C,KAAK2a,YAAY4+C,QAAQmF,GFxHvB,MEyHhBzmD,KAAKg9B,MAAMj1C,KAAK2a,YAAY4+C,QAAQoF,GFzHpB,oBEK5BngE,KAACC,EAAAA,UAADC,OACIC,SAAU,qBACVG,SAAJ,42BACI4H,SAAU,mBACV3H,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,+CAlB7CZ,KAASgvD,KAsBThvD,KAAuEmvD,GAAvE3lD,aAAAxJ,KAAiB6T,EAAAA,OAAjB3T,MAAwBqI,EAAAA,WAAW,WAAM,MAAA4mD,WA5BzCnvD,KAASqjB,EAAAA,YAAT7Z,aAAAxJ,KA6BiB+T,EAAAA,aACjB/T,SAAA4T,GAAApK,aAAAxJ,KAAiB+T,EAAAA,WAAjB/T,KAA6B6T,EAAAA,OAA7B3T,MAAoC8tD,EAAAA,qBA5CpChuD,KAAIsJ,EAAAA,qBAuJJomD,KAMAP,GAAA,WA0II,QAAJA,GACQd,EACoBlyC,EACyBwwC,EACrCnnC,GAJZ,GAAJ7f,GAAAnE,IAMQ,IAJoBA,KAA5B2a,YAA4BA,EACyB3a,KAArDmrD,YAAqDA,EACrCnrD,KAAhBgkB,kBAAgBA,EA3DHhkB,KAAb4+D,UAAyC,QASlB5+D,KAAvB46D,eAAyD,GAAI/1D,GAAAA,aAMtC7E,KAAvB66D,aAAuD,GAAIh2D,GAAAA,aAMpC7E,KAAvB86D,cAAwD,GAAIj2D,GAAAA,aAGrC7E,KAAvB6+D,cAA2D,GAAIh6D,GAAAA,aAc3D7E,KAAJqW,aAAmB,GAAI/M,GAAAA,QASXtJ,KAAZ8+D,qBAAkC,GAcrB9+D,KAAK2a,YACN,KAAMogD,GAA2B,cAGrC,KAAK/6D,KAAKmrD,YACN,KAAM4P,GAA2B,kBAGrC/6D,MAAK++D,YAAclS,EAAK3iC,QAAQrc,UAAU,WACtCmW,EAAkB5e,eAClBjB,EAAKkS,aAAanM,SA4F9B,MAxOI7J,QAAJC,eACQqtD,EADRptD,UAAA,eAAI,WAEI,MAAOP,MAAKg/D,cAGhB,SAAY19D,GACRtB,KAAKg/D,SAAWh/D,KAAKurD,mBAAmBvrD,KAAK2a,YAAYugD,YAAY55D,qCAIzEjB,OAAJC,eACQqtD,EADRptD,UAAA,gBAAI,WAEI,MAAOP,MAAKo8B,eAGhB,SAAa96B,GACTtB,KAAKo8B,UAAYp8B,KAAKurD,mBAAmBvrD,KAAK2a,YAAYugD,YAAY55D,qCAI1EjB,OAAJC,eACQqtD,EADRptD,UAAA,eAAI,WAEI,MAAOP,MAAKu7D,cAGhB,SAAYj6D,GACRtB,KAAKu7D,SAAWv7D,KAAKurD,mBAAmBvrD,KAAK2a,YAAYugD,YAAY55D,qCAIzEjB,OAAJC,eACQqtD,EADRptD,UAAA,eAAI,WAEI,MAAOP,MAAKw7D,cAGhB,SAAYl6D,GACRtB,KAAKw7D,SAAWx7D,KAAKurD,mBAAmBvrD,KAAK2a,YAAYugD,YAAY55D,qCAOzEjB,OAAJC,eAAQqtD,EAARptD,UAAA,kBAAI,WACI,MAAOP,MAAKi/D,uBAGhB,SAAe39D,GACXtB,KAAKi/D,kBAAoBj/D,KAAK2a,YAAYwgD,UAAU75D,EAAOtB,KAAKw6D,QAASx6D,KAAKu6D,SAC9Ev6D,KAAKqW,aAAanM,wCAItB7J,OAAJC,eAAQqtD,EAARptD,UAAA,mBAAI,WACI,MAAOP,MAAKk/D,kBAGhB,SAAgB59D,GACZtB,KAAKk/D,aAAe59D,EACpBtB,KAAK8+D,qBAAsB,mCAqF/BnR,EAAJptD,UAAAi1B,mBAAI,WACIx1B,KAAKm/D,qBAAuB,GAAIzuD,GAAAA,gBAAgB1Q,KAAKo/D,iBAAmBlR,IACxEluD,KAAKo5D,WAAap5D,KAAKq/D,SAAWr/D,KAAK2a,YAAYqgD,QAGnDh7D,KAAKk/D,aAAel/D,KAAK4+D,WAG7BjR,EAAJptD,UAAA++D,mBAAI,WACQt/D,KAAK8+D,sBACL9+D,KAAK8+D,qBAAsB,EAC3B9+D,KAAK65D,oBAIblM,EAAJptD,UAAAyB,YAAI,WACIhC,KAAK++D,YAAYxnD,cACjBvX,KAAKqW,aAAapG,YAGtB09C,EAAJptD,UAAA+W,YAAI,SAAY4S,GAChB,GAActlB,GAASslB,EAAQswC,SAAWtwC,EAAQqwC,SAAWrwC,EAAQuwC,UAE7D,IAAI71D,IAAWA,EAAOojD,YAAa,CAC3C,GAAkBhS,GAAOh2C,KAAKu/D,yBAEdvpB,KAGAh2C,KAAKgkB,kBAAkBc,gBACvBkxB,EAAKolB,QAIbp7D,KAAKqW,aAAanM,QAGtByjD,EAAJptD,UAAAs5D,gBAAI,WACI75D,KAAKu/D,0BAA0B1F,mBAInClM,EAAJptD,UAAAi/D,iBAAI,YACsC,UAArBx/D,KAAKw9D,YAA0Bx9D,KAAKy/D,UACvB,SAArBz/D,KAAKw9D,YAAyBx9D,KAAK0/D,SAAW1/D,KAAK2/D,eAEnDnqC,sBAITm4B,EAAJptD,UAAAq/D,aAAI,SAAa1U,GACJlrD,KAAK2a,YAAY6wC,SAASN,EAAMlrD,KAAKutB,WACtCvtB,KAAK46D,eAAen0D,KAAKykD,IAKjCyC,EAAJptD,UAAAs/D,4BAAI,SAA4BC,GACxB9/D,KAAK66D,aAAap0D,KAAKq5D,IAI3BnS,EAAJptD,UAAAw/D,wBAAI,SAAwBC,GACpBhgE,KAAK86D,cAAcr0D,KAAKu5D,IAG5BrS,EAAJptD,UAAA0/D,aAAI,WACIjgE,KAAK6+D,cAAcp4D,QAIvBknD,EAAJptD,UAAA2/D,eAAI,SAAehV,EAASlV,GACpBh2C,KAAKo5D,WAAalO,EAClBlrD,KAAKw9D,YAAcxnB,GAOf2X,EAAZptD,UAAAgrD,mBAAI,SAA2BQ,GACvB,MAAQ/rD,MAAK2a,YAAYqxC,eAAeD,IAAQ/rD,KAAK2a,YAAY2wC,QAAQS,GAAQA,EAAM,MAInF4B,EAAZptD,UAAAg/D,wBAAI,WACI,MAAOv/D,MAAKy/D,WAAaz/D,KAAK0/D,UAAY1/D,KAAK2/D,8BApPvDnhE,KAACC,EAAAA,UAADC,OACIC,SAAU,cACVG,SAAJ,i/BACID,QAAS,0wBACTqI,MACIC,MAAO,eAEXT,SAAU,aACV3H,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,+CAlJ7CZ,KAASgvD,KANThvD,KAASqjB,EAAAA,YAAT7Z,aAAAxJ,KA2RS+T,EAAAA,aACT/T,SAAA4T,GAAApK,aAAAxJ,KAAS+T,EAAAA,WAAT/T,KAAqB6T,EAAAA,OAArB3T,MAA4B8tD,EAAAA,qBA1S5BhuD,KAAIsJ,EAAAA,uCA2KJu3D,UAAA7gE,KAAKiB,EAAAA,QAUL8tB,WAAA/uB,KAAKiB,EAAAA,QAUL+6D,UAAAh8D,KAAKiB,EAAAA,QAUL86D,UAAA/7D,KAAKiB,EAAAA,QAiCL2/D,kBAAA5gE,KAAKiB,EAAAA,QAMLm/D,YAAApgE,KAAKiB,EAAAA,QAGLg7D,aAAAj8D,KAAKiB,EAAAA,QAGL0gE,YAAA3hE,KAAKiB,EAAAA,QAGLm7D,iBAAAp8D,KAAK2J,EAAAA,SAML0yD,eAAAr8D,KAAK2J,EAAAA,SAML2yD,gBAAAt8D,KAAK2J,EAAAA,SAGL02D,gBAAArgE,KAAK2J,EAAAA,SAGLs3D,YAAAjhE,KAAK0J,EAAAA,UAALxJ,MAAeqvD,MAGf2R,WAAAlhE,KAAK0J,EAAAA,UAALxJ,MAAesvD,MAGf2R,gBAAAnhE,KAAK0J,EAAAA,UAALxJ,MAAeuvD,OAkIfN,KCzYayS,IAKTruC,eAAgBtqB,EAAAA,QAAQ,kBACpBtG,EAAAA,MAAM,OAAQyB,EAAAA,OACV4+C,QAAS,EACTl+B,UAAW,mBAEf3b,EAAAA,WAAW,gBAAiBC,EAAAA,QAAQ,mCAAoChF,EAAAA,OACpE4+C,QAAS,EACTl+B,UAAW,kBAEf3b,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,eAAgBhF,EAAAA,OAAQ4+C,QAAS,QAIrE6e,eAAgB54D,EAAAA,QAAQ,kBACpBtG,EAAAA,MAAM,OAAQyB,EAAAA,OAAQ4+C,QAAS,KAC/BrgD,EAAAA,MAAM,QAASyB,EAAAA,OAAQ4+C,QAAS,KAGhC75C,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,mDAMnC04D,SAAQ//D,UAAUggE,UACnBD,QAAQ//D,UAAUggE,QAAWD,QAAiB,UAASE,kBCO3D,IAAIC,IAAgB,EAGPC,GACT,GAAIt1D,GAAAA,eAAsC,iCASjC+iD,IACTvnD,QAAS85D,GACTp1D,MAAOC,EAAAA,SACPC,WAAYm1D,iBAOZ,QAAJC,GAAuBt9D,GAAAtD,KAAvBsD,YAAuBA,EAEvB,MAAAs9D,MAGaC,GACTp9D,EAAWm9D,IASf9S,GAAA,SAAA/pD,GA6BI,QAAJ+pD,GAAgB/tD,GAChB,MAAQgE,GAARK,KAAApE,KAAcD,IAAdC,KAMA,MAnB4CmF,GAA5C2oD,EAAA/pD,GAgBI+pD,EAAJvtD,UAAAy1B,gBAAI,WACIh2B,KAAKu9D,SAAS1D,kCAlCtBr7D,KAACC,EAAAA,UAADC,OACIC,SAAU,yBACVG,SAAJ,qkBACID,QAAS,qYACTqI,MACIC,MAAO,yBACP25D,oBAAqB,WAEzBt5D,YACI44D,GAAuBruC,eACvBquC,GAAuBC,gBAE3B35D,SAAU,sBACV3H,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,OACzC6H,QAAS,iDAhGbzI,KAAIa,EAAAA,gCAsGJk+D,WAAA/+D,KAAK0J,EAAAA,UAALxJ,MAAeivD,OAefG,GAnB4C+S,IA0B5ChT,GAAA,WA6JI,QAAJA,GAAwBliD,EACAC,EACAs3B,EAC+Bn3B,EACnB4O,EACAgZ,EACkB+yB,GAC9C,GAPgB1mD,KAAxB2L,QAAwBA,EACA3L,KAAxB4L,OAAwBA,EACA5L,KAAxBkjC,iBAAwBA,EAEYljC,KAApC2a,YAAoCA,EACA3a,KAApC2zB,IAAoCA,EACkB3zB,KAAtD0mD,SAAsDA,EAnEzC1mD,KAAb4+D,UAA0D,QAMnC5+D,KAAvB66D,aAAuD,GAAIh2D,GAAAA,aAMpC7E,KAAvB86D,cAAwD,GAAIj2D,GAAAA,aAStC7E,KAAtBizB,aAAyD,GAAIpuB,GAAAA,aAGvC7E,KAAtBkzB,aAAyD,GAAIruB,GAAAA,aAGzD7E,KAAJyE,GAAiB,iBAAiBg8D,KAQrBzgE,KAAbqW,aAA8C,GAAI/M,GAAAA,QAGrCtJ,KAAbktD,eAA8B,GAAI5jD,GAAAA,QAGrBtJ,KAAb+gE,gBAA+B,GAAIz3D,GAAAA,QAIvBtJ,KAAZ+0D,SAAsB,EACV/0D,KAAZghE,cAAsC,KAU1BhhE,KAAZihE,yBAA2D,KAG/CjhE,KAAZkhE,kBAAgC98B,EAAAA,aAAaC,OAShCrkC,KAAK2a,YACN,KAAMogD,GAA2B,cAGrC/6D,MAAK+L,eAAiBA,EAyM9B,MAtWI1L,QAAJC,eACQutD,EADRttD,UAAA,eAAI,WAII,MAAOP,MAAKg/D,WAAah/D,KAAKotD,gBAAkBptD,KAAKotD,gBAAgB9rD,MAAQ,WAGjF,SAAYA,GACRtB,KAAKg/D,SAAWh/D,KAAKurD,mBAAmBvrD,KAAK2a,YAAYugD,YAAY55D,qCAIzEjB,OAAJC,eACQutD,EADRttD,UAAA,aAAI,WAGI,MAAOP,MAAKmhE,SACPnhE,KAAKotD,gBAAkBptD,KAAKotD,gBAAgBxB,sBAAoBx5C,SAGzE,SAAU9Q,GACNtB,KAAKmhE,OAAS7/D,mCAIlBjB,OAAJC,eACQutD,EADRttD,UAAA,gBAAI,WAEI,WAA0B6R,KAAnBpS,KAAKE,WAA2BF,KAAKotD,gBACxCptD,KAAKotD,gBAAgB1tD,WAAaM,KAAKE,eAG/C,SAAaoB,GACjB,GAAckX,GAAWhY,EAAAA,sBAAsBc,EAEnCkX,KAAaxY,KAAKE,YAClBF,KAAKE,UAAYsY,EACjBxY,KAAKktD,eAAehjD,KAAKsO,qCAKjCnY,OAAJC,eACQutD,EADRttD,UAAA,cAAI,WAEI,MAAOP,MAAK+0D,aAGhB,SAAWzzD,GACHA,EACAtB,KAAKunB,OAELvnB,KAAK0mB,yCAKbrmB,OAAJC,eAAQutD,EAARttD,UAAA,gBAAI,WACI,MAAOP,MAAKghE,mBAGhB,SAAa1/D,GACTtB,KAAKghE,cAAgB1/D,mCAIzBjB,OAAJC,eAAQutD,EAARttD,UAAA,eAAI,WACI,MAAOP,MAAKotD,iBAAmBptD,KAAKotD,gBAAgB/9B,qCAIxDhvB,OAAJC,eAAQutD,EAARttD,UAAA,eAAI,WACI,MAAOP,MAAKotD,iBAAmBptD,KAAKotD,gBAAgBl1C,qCAGxD7X,OAAJC,eAAQutD,EAARttD,UAAA,kBAAI,WACI,MAAOP,MAAKotD,iBAAmBptD,KAAKotD,gBAAgBqN,4CAIxDp6D,OAAJC,eAAQutD,EAARttD,UAAA,aAAI,WACI,MAAOP,MAAKutB,0CAkFhBsgC,EAAJttD,UAAAyB,YAAI,WACIhC,KAAK0mB,QACL1mB,KAAKkhE,kBAAkB3pD,cACvBvX,KAAKktD,eAAej9C,WAEhBjQ,KAAKohE,WACLphE,KAAKohE,SAASxxD,UACd5P,KAAKqhE,kBAAoB,OAKjCxT,EAAJttD,UAAAs1B,OAAI,SAAOq1B,GACX,GAAcoW,GAAWthE,KAAKutB,QACtBvtB,MAAKutB,SAAW29B,EACXlrD,KAAK2a,YAAY6wC,SAAS8V,EAAUthE,KAAKutB,WAC1CvtB,KAAK+gE,gBAAgB72D,KAAKghD,IAKlC2C,EAAJttD,UAAAghE,WAAI,SAAWzB,GACP9/D,KAAK66D,aAAap0D,KAAKq5D,IAI3BjS,EAAJttD,UAAAihE,YAAI,SAAYxB,GACRhgE,KAAK86D,cAAcr0D,KAAKu5D,IAO5BnS,EAAJttD,UAAA0+B,cAAI,SAAcwC,GAAd,GAAJt9B,GAAAnE,IACQ,IAAIA,KAAKotD,gBACL,KAAMhsD,OAAM,6DAEhBpB,MAAKotD,gBAAkB3rB,EACvBzhC,KAAKkhE,kBACDlhE,KAAKotD,gBAAgB54C,YAAY3G,UAAU,SAACvM,GAAoB,MAAA6C,GAAKopB,SAAWjsB,KAIxFusD,EAAJttD,UAAAgnB,KAAI,WACI,IAAIvnB,KAAK+0D,UAAW/0D,KAAKN,SAAzB,CAGA,IAAKM,KAAKotD,gBACN,KAAMhsD,OAAM,8DAEZpB,MAAK0mD,WACL1mD,KAAKihE,yBAA2BjhE,KAAK0mD,SAAS+a,eAGlDzhE,KAAK0hE,cAEL1hE,KAAK+0D,SAAU,EACf/0D,KAAKizB,aAAaxsB,SAItBonD,EAAJttD,UAAAmmB,MAAI,WAAA,GAAJviB,GAAAnE,IACQ,IAAKA,KAAK+0D,QAAV,CAII/0D,KAAKohE,UAAYphE,KAAKohE,SAAS5yD,eAC/BxO,KAAKohE,SAAS7yD,SAGdvO,KAAK2hE,gBAAkB3hE,KAAK2hE,eAAe/R,YAC3C5vD,KAAK2hE,eAAepzD,QAGhC,IAAcqzD,GAAgB,WAGdz9D,EAAK4wD,UACL5wD,EAAK4wD,SAAU,EACf5wD,EAAK+uB,aAAazsB,OAClBtC,EAAK88D,yBAA2B,MAIpCjhE,MAAKihE,0BAC0C,kBAAxCjhE,MAAKihE,yBAAyB37D,OAMrCtF,KAAKihE,yBAAyB37D,QAC9BmF,WAAWm3D,IAEXA,MAKA/T,EAAZttD,UAAAmhE,YAAI,WAAA,GAAJv9D,GAAAnE,IACaA,MAAK2hE,iBACN3hE,KAAK2hE,eAAiB,GAAIjxD,GAAAA,gBAAwCo9C,GAC9D9tD,KAAKkjC,mBAGRljC,KAAKohE,UACNphE,KAAK6hE,cAGJ7hE,KAAKohE,SAAS5yD,gBACfxO,KAAKqhE,kBAAoBrhE,KAAKohE,SAASzwD,OAAO3Q,KAAK2hE,gBACnD3hE,KAAKqhE,kBAAkBzwD,SAASo6C,WAAahrD,KAC7CA,KAAK8hE,WAGL9hE,KAAK4L,OAAO4oB,SAAS7qB,eAAegE,KAAK2Y,EAAAA,KAAK,IAAIzY,UAAU,WACxD1J,EAAKi9D,SAAS/yD,qBAMlBw/C,EAAZttD,UAAAshE,YAAI,WAAA,GAAJ19D,GAAAnE,KACc+oB,EAAgB,GAAIC,GAAAA,eACtB7a,iBAAkBnO,KAAK+hE,8BACvBv/C,aAAa,EACbyG,cAAe,kCACfzpB,UAAWQ,KAAK2zB,IAChB5nB,eAAgB/L,KAAK+L,iBACrBqC,WAAY,wBAGhBpO,MAAKohE,SAAWphE,KAAK2L,QAAQuC,OAAO6a,GACpC/oB,KAAKohE,SAAS/xD,eAAe5N,aAAa,OAAQ,UAElD8kB,EAAAA,MACIvmB,KAAKohE,SAAS56C,gBACdxmB,KAAKohE,SAAS9yD,cACdtO,KAAKohE,SAAS36C,gBAAgB9Y,KAAKwY,EAAAA,OAAO,SAACvgB,GAGvC,MAAOA,GAAMwK,UAAYC,EAAAA,QAAWlM,EAAKipD,iBAAmBxnD,EAAMqzB,QAAUrzB,EAAMwK,UAAYwoB,EAAAA,aAEpG/qB,UAAU,WAAM,MAAA1J,GAAKuiB,WAInBmnC,EAAZttD,UAAAwhE,4BAAI,WACI,MAAO/hE,MAAK2L,QAAQsB,WACfC,oBAAoBlN,KAAKotD,gBAAgBrtD,YACzCoN,sBAAsB,2BACtBC,wBAAuB,GACvBC,mBAAmB,GACnBgpD,qBACA/oD,gBAEOyB,QAAS,QACTC,QAAS,SACTC,SAAU,QACVC,SAAU,QAGVH,QAAS,QACTC,QAAS,MACTC,SAAU,QACVC,SAAU,WAGVH,QAAS,MACTC,QAAS,SACTC,SAAU,MACVC,SAAU,QAGVH,QAAS,MACTC,QAAS,MACTC,SAAU,MACVC,SAAU,aASlB2+C,EAAZttD,UAAAgrD,mBAAI,SAA2BQ,GACvB,MAAQ/rD,MAAK2a,YAAYqxC,eAAeD,IAAQ/rD,KAAK2a,YAAY2wC,QAAQS,GAAQA,EAAM,MAInF8B,EAAZttD,UAAAuhE,SAAI,WACJ,GAAc7qC,GAAQj3B,KAAKi3B,KACfj3B,MAAKqhE,oBACLrhE,KAAKqhE,kBAAkBzwD,SAASqmB,MAAQA,mBA9WpDz4B,KAACC,EAAAA,UAADC,OACIC,SAAU,gBACVG,SAAU,GACV4H,SAAU,eACVxH,gBAAiBC,EAAAA,wBAAwBC,OACzCL,cAAeC,EAAAA,kBAAkBC,KACjC0H,YAAcC,QAASwS,GAAoBtS,YAAa+mD,4CAhH5DrvD,KAAI+M,EAAAA,UAbJ/M,KAAIc,EAAAA,SAKJd,KAAI2T,EAAAA,mBAkRJ3T,SAAA4T,GAAApK,aAAAxJ,KAAiB6T,EAAAA,OAAjB3T,MAAwBgiE,QA7QxBliE,KAASqjB,EAAAA,YAAT7Z,aAAAxJ,KA8QiB+T,EAAAA,aAhRjB/T,KAAS8T,EAAAA,eAATtK,aAAAxJ,KAiRiB+T,EAAAA,aACjB/T,SAAA4T,GAAApK,aAAAxJ,KAAiB+T,EAAAA,WAAjB/T,KAA6B6T,EAAAA,OAA7B3T,MAAoCo6C,EAAAA,iCAxJpCumB,UAAA7gE,KAAKiB,EAAAA,QAYLw3B,QAAAz4B,KAAKiB,EAAAA,QAYLC,WAAAlB,KAAKiB,EAAAA,QAgBLs2D,SAAAv3D,KAAKiB,EAAAA,QA0CLuiE,0BAAAxjE,KAAKiB,EAAAA,QAGLm/D,YAAApgE,KAAKiB,EAAAA,QAMLo7D,eAAAr8D,KAAK2J,EAAAA,SAML2yD,gBAAAt8D,KAAK2J,EAAAA,SAGLiG,aAAA5P,KAAKiB,EAAAA,QAGL0gE,YAAA3hE,KAAKiB,EAAAA,QAGLwzB,eAAAz0B,KAAK2J,EAAAA,OAALzJ,MAAY,YAGZw0B,eAAA10B,KAAK2J,EAAAA,OAALzJ,MAAY,aAyPZmvD,KrBlda5B,IACTrlD,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAW,WAAM,MAAA+jD,MAC9B9jD,OAAO,GAIEklD,IACTtlD,QAASq7D,EAAAA,cACTn7D,YAAaC,EAAAA,WAAW,WAAM,MAAA+jD,MAC9B9jD,OAAO,iBAaP,QAAJ0kD,GAEepsB,EAEA4iC,GAFAliE,KAAfs/B,OAAeA,EAEAt/B,KAAfkiE,cAAeA,EACPliE,KAAKsB,MAAQtB,KAAKs/B,OAAOh+B,MAEjC,MAAAoqD,MAIAZ,GAAA,WA+II,QAAJA,GACe/qD,EACY4a,EAC0BwwC,EACzBU,GAJxB,GAAJ1nD,GAAAnE,IAMQ,IALOA,KAAfD,WAAeA,EACYC,KAA3B2a,YAA2BA,EAC0B3a,KAArDmrD,YAAqDA,EACzBnrD,KAA5B6rD,UAA4BA,EA5BL7rD,KAAvB2rD,WACQ,GAAI9mD,GAAAA,aAGW7E,KAAvBorD,UACQ,GAAIvmD,GAAAA,aAGR7E,KAAJwU,YAAkB,GAAI3P,GAAAA,aAGlB7E,KAAJktD,eAAqB,GAAIroD,GAAAA,aAMb7E,KAAZmiE,uBAAqC/9B,EAAAA,aAAaC,MAEtCrkC,KAAZoiE,mBAAiCh+B,EAAAA,aAAaC,MAGlCrkC,KAAZqrD,gBAA6B,EAsBzBrrD,KAAJqc,UAAgB,aAkFJrc,KAAZyrD,YAAgD,aAGpCzrD,KAAZqiE,kBAAgC,aAIpBriE,KAAZkb,eAA0C,WAClC,MAAO/W,GAAKknD,eACR,MAASiX,mBAAqBthD,KAAM7c,EAAKpE,WAAWwB,cAAcD,SAIlEtB,KAAZuiE,aAAwC,SAACvnD,GACzC,GAAcwnD,GAAer+D,EAAKonD,mBAAmBpnD,EAAKwW,YAAYugD,YAAYlgD,EAAQ1Z,OAElF,QAAS6C,EAAKkrB,MAAQmzC,GAClBr+D,EAAKwW,YAAY++C,YAAYv1D,EAAKkrB,IAAKmzC,IAAiB,EACxD,MAASC,iBAAmBpzC,IAAKlrB,EAAKkrB,IAAKqzC,OAAQF,KAInDxiE,KAAZ2iE,aAAwC,SAAC3nD,GACzC,GAAcwnD,GAAer+D,EAAKonD,mBAAmBpnD,EAAKwW,YAAYugD,YAAYlgD,EAAQ1Z,OAElF,QAAS6C,EAAK+T,MAAQsqD,GAClBr+D,EAAKwW,YAAY++C,YAAYv1D,EAAK+T,IAAKsqD,IAAiB,EACxD,MAASI,iBAAmB1qD,IAAK/T,EAAK+T,IAAKwqD,OAAQF,KAInDxiE,KAAZ6iE,gBAA2C,SAAC7nD,GAC5C,GAAcwnD,GAAer+D,EAAKonD,mBAAmBpnD,EAAKwW,YAAYugD,YAAYlgD,EAAQ1Z,OAElF,OAAQ6C,GAAKs2D,YAAe+H,IAAgBr+D,EAAKs2D,WAAW+H,IAC/C9V,oBAAoB,GAA7B,MAWA1sD,KAAZsb,UACQwnD,EAAAA,WAAWC,SACP/iE,KAAKkb,eACLlb,KAAKuiE,aACLviE,KAAK2iE,aACL3iE,KAAK6iE,mBAnJJ7iE,KAAK2a,YACN,KAAMogD,GAA2B,cAGrC,KAAK/6D,KAAKmrD,YACN,KAAM4P,GAA2B,kBAIrC/6D,MAAKoiE,mBAAqBznD,EAAYqoD,cAAcn1D,UAAU,WAC1D1J,EAAK7C,MAAQ6C,EAAK7C,QAmJ9B,MA5RIjB,QAAJC,eACQwqD,EADRvqD,UAAA,oBAAI,SACiBe,GADjB,GAAJ6C,GAAAnE,IAEasB,KAILtB,KAAKgrD,WAAa1pD,EAClBtB,KAAKgrD,WAAW/rB,cAAcj/B,MAC9BA,KAAKmiE,uBAAuB5qD,cAE5BvX,KAAKmiE,uBAAyBniE,KAAKgrD,WAAW+V,gBAAgBlzD,UAAU,SAAC0f,GACrEppB,EAAK7C,MAAQisB,EACbppB,EAAKsnD,YAAYl+B,GACjBppB,EAAKkY,YACLlY,EAAKinD,UAAU3kD,KAAK,GAAIilD,IAAuBvnD,EAAMA,EAAKpE,WAAWwB,gBACrE4C,EAAKwnD,WAAWllD,KAAK,GAAIilD,IAAuBvnD,EAAMA,EAAKpE,WAAWwB,oDAK9ElB,OAAJC,eACQwqD,EADRvqD,UAAA,0BAAI,SACuBe,GACnBtB,KAAKy6D,WAAan5D,EAClBtB,KAAKqiE,qDAIThiE,OAAJC,eACQwqD,EADRvqD,UAAA,aAAI,WAEI,MAAOP,MAAKwtB,YAGhB,SAAUlsB,GAENA,EAAQtB,KAAK2a,YAAYugD,YAAY55D,GACrCtB,KAAKqrD,gBAAkB/pD,GAAStB,KAAK2a,YAAY2wC,QAAQhqD,GAEzDA,EAAQtB,KAAKurD,mBAAmBjqD,EACxC,IAAc2hE,GAAUjjE,KAAKsB,KACrBtB,MAAKwtB,OAASlsB,EACdtB,KAAK4b,YAAYta,GAEZtB,KAAK2a,YAAY6wC,SAASyX,EAAS3hE,IACpCtB,KAAKwU,YAAY/N,KAAKnF,oCAK9BjB,OAAJC,eACQwqD,EADRvqD,UAAA,WAAI,WAEI,MAAOP,MAAKkjE,UAGhB,SAAQ5hE,GACJtB,KAAKkjE,KAAOljE,KAAKurD,mBAAmBvrD,KAAK2a,YAAYugD,YAAY55D,IACjEtB,KAAKqiE,qDAIThiE,OAAJC,eACQwqD,EADRvqD,UAAA,WAAI,WAEI,MAAOP,MAAKmjE,UAGhB,SAAQ7hE,GACJtB,KAAKmjE,KAAOnjE,KAAKurD,mBAAmBvrD,KAAK2a,YAAYugD,YAAY55D,IACjEtB,KAAKqiE,qDAIThiE,OAAJC,eACQwqD,EADRvqD,UAAA,gBAAI,WAEI,QAASP,KAAKE,eAGlB,SAAaoB,GACjB,GAAckX,GAAWhY,EAAAA,sBAAsBc,GACjCiO,EAAUvP,KAAKD,WAAWwB,aAE5BvB,MAAKE,YAAcsY,IACnBxY,KAAKE,UAAYsY,EACjBxY,KAAKktD,eAAezmD,KAAK+R,IAIzBA,GAAYjJ,EAAQstB,MAIpBttB,EAAQstB,wCAuDhBiuB,EAAJvqD,UAAAyB,YAAI,WACIhC,KAAKmiE,uBAAuB5qD,cAC5BvX,KAAKoiE,mBAAmB7qD,cACxBvX,KAAKwU,YAAYvE,WACjBjQ,KAAKktD,eAAej9C,YAIxB66C,EAAJvqD,UAAA6iE,0BAAI,SAA0Bh9D,GACtBpG,KAAKqiE,kBAAoBj8D,GAI7B0kD,EAAJvqD,UAAA8iE,SAAI,SAASC,GACL,MAAOtjE,MAAKsb,UAAYtb,KAAKsb,UAAUgoD,GAAK,MAIhDxY,EAAJvqD,UAAA2F,WAAI,SAAW5E,GACPtB,KAAKsB,MAAQA,GAIjBwpD,EAAJvqD,UAAA4F,iBAAI,SAAiBC,GACbpG,KAAKyrD,YAAcrlD,GAIvB0kD,EAAJvqD,UAAA8F,kBAAI,SAAkBD,GACdpG,KAAKqc,UAAYjW,GAIrB0kD,EAAJvqD,UAAA+F,iBAAI,SAAiBC,GACbvG,KAAKN,SAAW6G;iBAGpBukD,EAAJvqD,UAAA24B,UAAI,SAAUtzB,GAEd,GAAcmlD,GAAiBnlD,EAAMqzB,QAAUrzB,EAAMwK,UAAYuoB,EAAAA,UAErD34B,MAAKgrD,YAAcD,IAAmB/qD,KAAKD,WAAWwB,cAAc0pD,WACpEjrD,KAAKgrD,WAAWzjC,OAChB3hB,EAAM4W,mBAIdsuC,EAAJvqD,UAAAqc,QAAI,SAAQtb,GACZ,GAAY4pD,GAAOlrD,KAAK2a,YAAYyF,MAAM9e,EAAOtB,KAAKmrD,YAAY/qC,MAAMgrC,UAChEprD,MAAKqrD,gBAAkBH,GAAQlrD,KAAK2a,YAAY2wC,QAAQJ,GACxDA,EAAOlrD,KAAKurD,mBAAmBL,GAE1BlrD,KAAK2a,YAAY6wC,SAASN,EAAMlrD,KAAKwtB,UACtCxtB,KAAKwtB,OAAS09B,EACdlrD,KAAKyrD,YAAYP,GACjBlrD,KAAKwU,YAAY/N,KAAKykD,GACtBlrD,KAAKorD,UAAU3kD,KAAK,GAAIilD,IAAuB1rD,KAAMA,KAAKD,WAAWwB,kBAI7EupD,EAAJvqD,UAAAua,SAAI,WACI9a,KAAK2rD,WAAWllD,KAAK,GAAIilD,IAAuB1rD,KAAMA,KAAKD,WAAWwB,iBAI1EupD,EAAJvqD,UAAAqrD,gBAAI,WACI,MAAO5rD,MAAK6rD,UAAY7rD,KAAK6rD,UAAU50B,UAAQ7kB,IAInD04C,EAAJvqD,UAAA+b,OAAI,WAEQtc,KAAKsB,OACLtB,KAAK4b,YAAY5b,KAAKsB,OAG1BtB,KAAKqc,aA0CDyuC,EAAZvqD,UAAAqb,YAAI,SAAoBta,GAChBtB,KAAKD,WAAWwB,cAAcD,MAC1BA,EAAQtB,KAAK2a,YAAY2F,OAAOhf,EAAOtB,KAAKmrD,YAAYW,QAAQV,WAAa,IAiB7EN,EAAZvqD,UAAAgrD,mBAAI,SAA2BQ,GACvB,MAAQ/rD,MAAK2a,YAAYqxC,eAAeD,IAAQ/rD,KAAK2a,YAAY2wC,QAAQS,GAAQA,EAAM,qBAhT/FvtD,KAACkD,EAAAA,UAADhD,OACIC,SAAU,sBACVgI,WACIslD,GACAC,IACEtlD,QAASgb,GAAyB9a,YAAagkD,IAErD5jD,MACIilD,uBAAwB,OACxBC,mBAAoB,gDACpBC,aAAc,0CACdC,aAAc,0CACdtzC,aAAc,WACd0I,UAAW,+BACX6qC,WAAY,aACZrzC,SAAU,WACVlH,YAAa,qBAEjBtL,SAAU,4DApFdlI,KAAIa,EAAAA,aAoBJb,KAASqjB,EAAAA,YAAT7Z,aAAAxJ,KA+LS+T,EAAAA,aACT/T,SAAA4T,GAAApK,aAAAxJ,KAAS+T,EAAAA,WAAT/T,KAAqB6T,EAAAA,OAArB3T,MAA4B8tD,EAAAA,qBA7L5BhuD,KAAS2zB,GAATnqB,aAAAxJ,KA8LS+T,EAAAA,gCA7HTk6C,eAAAjuD,KAAKiB,EAAAA,QAoBLitD,qBAAAluD,KAAKiB,EAAAA,QAOL6B,QAAA9C,KAAKiB,EAAAA,QAqBL4vB,MAAA7wB,KAAKiB,EAAAA,QAWLyY,MAAA1Z,KAAKiB,EAAAA,QAWLC,WAAAlB,KAAKiB,EAAAA,QA2BLksD,aAAAntD,KAAK2J,EAAAA,SAILijD,YAAA5sD,KAAK2J,EAAAA,UAuLL2iD,KC/VA6B,GAAA,WAAA,QAAAA,MAIA,sBAJAnuD,KAACkD,EAAAA,UAADhD,OACIC,SAAU,+BAGdguD,KAGAC,GAAA,WA4CI,QAAJA,GACeC,EACC7oC,EACe8oC,GAFhB9sD,KAAf6sD,KAAeA,EACC7sD,KAAhBgkB,kBAAgBA,EANJhkB,KAAZqW,aAA2B+tB,EAAAA,aAAaC,KASxC,IAAc0oB,GAAiBtsC,OAAOqsC,EAC9B9sD,MAAKkE,SAAY6oD,GAAqC,IAAnBA,EAAwBA,EAAiB,KAwCpF,MAtEI1sD,QAAJC,eACQssD,EADRrsD,UAAA,gBAAI,WAEI,WAA0B6R,KAAnBpS,KAAKE,UAA0BF,KAAKgrD,WAAWtrD,WAAaM,KAAKE,eAG5E,SAAaoB,GACTtB,KAAKE,UAAYM,EAAAA,sBAAsBc,oCA2B3CsrD,EAAJrsD,UAAA+W,YAAI,SAAY4S,GACJA,EAAQ8gC,YACRhrD,KAAKgtD,qBAIbJ,EAAJrsD,UAAAyB,YAAI,WACIhC,KAAKqW,aAAakB,eAGtBq1C,EAAJrsD,UAAAi1B,mBAAI,WACIx1B,KAAKgtD,qBAGTJ,EAAJrsD,UAAAgnB,KAAI,SAAK3hB,GACG5F,KAAKgrD,aAAehrD,KAAKN,WACzBM,KAAKgrD,WAAWzjC,OAChB3hB,EAAMC,oBAIN+mD,EAAZrsD,UAAAysD,kBAAI,WAAA,GAAJ7oD,GAAAnE,KACcitD,EAAqBjtD,KAAKgrD,WAAahrD,KAAKgrD,WAAWkC,eAAiB3lB,EAAAA,KACxE4lB,EAAgBntD,KAAKgrD,YAAchrD,KAAKgrD,WAAWoC,gBACrDptD,KAAKgrD,WAAWoC,gBAAgBF,eAAiB3lB,EAAAA,KAC/C8lB,EAAoBrtD,KAAKgrD,WAC3BzkC,EAAAA,MAAMvmB,KAAKgrD,WAAW/3B,aAAcjzB,KAAKgrD,WAAW93B,cACpDqU,EAAAA,IAEJvnC,MAAKqW,aAAakB,cAClBvX,KAAKqW,aAAekQ,EAAAA,MAChBvmB,KAAK6sD,KAAK3iC,QACV+iC,EACAE,EACAE,GACFx/C,UAAU,WAAM,MAAA1J,GAAK6f,kBAAkB5e,iCAxFjD5G,KAACC,EAAAA,UAADC,OACIC,SAAU,uBACVG,SAAJ,2YACID,QAAS,60BACTqI,MACIC,MAAO,uBAGPoM,kBAAmB,KACnB+5C,sCAAuC,kCACvCC,kBAAmB,6CACnBp0C,UAAW,kBAEfzS,SAAU,qBACV3H,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,+CA1B7CZ,KAASgvD,KAhBThvD,KAAIsJ,EAAAA,oBA0EJtJ,KAAAuJ,OAAAC,aAAAxJ,KAASyJ,EAAAA,UAATvJ,MAAmB,mCA3BnBgB,WAAAlB,KAAKiB,EAAAA,QAULurD,aAAAxsD,KAAKiB,EAAAA,MAALf,MAAW,SAGXwF,WAAA1F,KAAKiB,EAAAA,QAGLguD,aAAAjvD,KAAKk0B,EAAAA,aAALh0B,MAAkBiuD,MAGlB9C,SAAArrD,KAAK0J,EAAAA,UAALxJ,MAAe,aAmDfkuD,KClGAc,GAAA,WAAA,QAAAA,MA8CA,sBA9CAlvD,KAACsE,EAAAA,SAADpE,OACIqE,SACIC,EAAAA,aACAg5C,GACAlpC,EAAAA,cACAzK,EAAAA,WACAyiB,EAAAA,aACA7nB,IAEJC,SACIyqD,GACAC,GACAC,GACAC,GACAhD,GACA8B,GACAD,GACAoB,GACAC,GACAC,GACAC,GACAlS,IAEJ74C,cACIwqD,GACAC,GACAC,GACAC,GACAhD,GACA8B,GACAD,GACAoB,GACAC,GACAC,GACAC,IAEJvnD,WACI6mD,GACAW,IAEJp7C,iBACI+6C,GACAI,QAIRR,KCjEAU,GAAA,WAAA,QAAAA,KA0BYpuD,KAAZquD,WAAiC,EAYrBruD,KAAZsuD,QAA8B,EAC9B,MAtBIjuD,QAAJC,eACQ8tD,EADR7tD,UAAA,gBAAI,WAEI,MAAOP,MAAKquD,eAGhB,SAAa/sD,GACTtB,KAAKquD,UAAY7tD,EAAAA,sBAAsBc,oCAM3CjB,OAAJC,eACQ8tD,EADR7tD,UAAA,aAAI,WAEI,MAAOP,MAAKsuD,YAGhB,SAAUhtD,GACNtB,KAAKsuD,OAAS9tD,EAAAA,sBAAsBc,mDAnC5C9C,KAACC,EAAAA,UAADC,OACIC,SAAU,aACVuI,MACIC,MAAO,aACPke,KAAM,YACNkpC,0BAA2B,uCAC3BC,8BAA+B,WAC/BC,2BAA4B,SAEhC3vD,SAAU,GACVD,QAAS,wSACTE,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,OACzCR,qBAAqB,wBAIzB8vD,WAAAlwD,KAAKiB,EAAAA,QAYLkvD,QAAAnwD,KAAKiB,EAAAA,SAUL2uD,KCrCAQ,GAAA,WAAA,QAAAA,MAMA,sBANApwD,KAACsE,EAAAA,SAADpE,OACIqE,SAAUC,EAAAA,cACVE,SAAUkrD,IACVjrD,cAAeirD,QAGnBQ,KCMAC,GAAA,WAUI,QAAJA,GACgBC,EACAC,EACAC,EACAC,EACAC,EACkBC,GALlBnvD,KAAhB8uD,UAAgBA,EACA9uD,KAAhB+uD,0BAAgBA,EACA/uD,KAAhBgvD,QAAgBA,EACAhvD,KAAhBivD,UAAgBA,EACAjvD,KAAhBkvD,kBAAgBA,EACkBlvD,KAAlCmvD,UAAkCA,EAV9BnvD,KAAJovD,UAAgB,GAAI9lD,GAAAA,QAqDpB,MArCIulD,GAAJtuD,UAAAoQ,OAAI,SAAO0+C,OAAX,KAAAA,IAAWA,MACErvD,KAAKsvD,UACNtvD,KAAKsvD,QAAU,GAAIxnC,GAAAA,eAAe9nB,KAAK8uD,UAAW9uD,KAAKkvD,oBAG3DlvD,KAAKuO,SAEAvO,KAAKuvD,UACNvvD,KAAKuvD,QAAU,GAAIC,GAAAA,gBAAgBxvD,KAAKmvD,UAAUM,cAAc,OAC5DzvD,KAAK+uD,0BAA2B/uD,KAAKgvD,QAAShvD,KAAKivD,WAGnE,IAAc1/C,GAAuBvP,KAAK8uD,UAAU/uD,WAAWwB,aAKvDgO,GAAkB,WAAEmgD,aAAa1vD,KAAKuvD,QAAQI,cAAepgD,GAC7DvP,KAAKsvD,QAAQ3+C,OAAO3Q,KAAKuvD,QAASF,GAClCrvD,KAAKovD,UAAUllD,QAOnB2kD,EAAJtuD,UAAAgO,OAAI,WACQvO,KAAKsvD,QAAQM,YACb5vD,KAAKsvD,QAAQ/gD,UAIrBsgD,EAAJtuD,UAAAyB,YAAI,WACQhC,KAAKuvD,SACLvvD,KAAKuvD,QAAQ3/C,0BAxDzBpR,KAACkD,EAAAA,UAADhD,OACIC,SAAU,yEAhBdH,KAAIsL,EAAAA,cACJtL,KAAI+mC,EAAAA,2BACJ/mC,KAAIqxD,EAAAA,iBACJrxD,KAAIqrB,EAAAA,WACJrrB,KAAI2T,EAAAA,mBA2BJ3T,SAAA4T,GAAApK,aAAAxJ,KAAS6T,EAAAA,OAAT3T,MAAgBo6C,EAAAA,eA2ChB+V,KCjEaiB,GAAoB,GAAI1kD,GAAAA,eAAgC,mCCSrE,QAAA2kD,MAAiC,MAAjCA,MACaC,GACTtsD,EAAcqsD,IAMlBE,GAAA,SAAAlsD,GA0CI,QAAJksD,GACgB3sD,EACUojD,EACV1iD,EACuCksD,GAJnD,GAAJ/rD,GAKQJ,EALRK,KAAApE,OAAAA,WACgBmE,GAAhBb,YAAgBA,EAEAa,EAAhBH,cAAgBA,EACuCG,EAAvD+rD,qBAAuDA,EAnB1C/rD,EAAbkhB,KAAuE,WAO1DlhB,EAAbgsD,SAAiD,GAAI7mD,GAAAA,QAGjDnF,EAAJisD,cAA4B,EAGxBjsD,EAAJksD,yBAAuC,EAS3BrsD,GAIAA,EAAckB,QAAQf,EAAKb,YAAY/B,eAAe,GAGtD2uD,GAAwBA,EAAqBI,SAC7CJ,EAAqBI,QAAQnsD,GAGjCA,EAAKgrD,UAAYzI,IAqEzB,MA1GoCvhD,GAApC8qD,EAAAlsD,GAyCIksD,EAAJ1vD,UAAA+E,MAAI,SAAM0L,OAAV,KAAAA,IAAUA,EAAV,WACYhR,KAAKgE,cACLhE,KAAKgE,cAAcuB,SAASvF,KAAKqlD,kBAAmBr0C,GAEpDhR,KAAKqlD,kBAAkB//C,SAI/B2qD,EAAJ1vD,UAAAyB,YAAI,WACQhC,KAAKgE,eACLhE,KAAKgE,cAAcqB,eAAerF,KAAKsD,YAAY/B,eAGnDvB,KAAKkwD,sBAAwBlwD,KAAKkwD,qBAAqBK,YACvDvwD,KAAKkwD,qBAAqBK,WAAWvwD,MAGzCA,KAAKmwD,SAASlgD,YAIlBggD,EAAJ1vD,UAAAiwD,aAAI,WACI,MAAOxwD,MAAKN,SAAW,KAAO,KAIlCuwD,EAAJ1vD,UAAA8kD,gBAAI,WACI,MAAOrlD,MAAKsD,YAAY/B,eAI5B0uD,EAAJ1vD,UAAAkwD,eAAI,SAAe7qD,GACP5F,KAAKN,WACLkG,EAAM4W,iBACN5W,EAAMC,oBAKdoqD,EAAJ1vD,UAAAmwD,kBAAI,WACI1wD,KAAKmwD,SAASjmD,KAAKlK,OAIvBiwD,EAAJ1vD,UAAAowD,SAAI,WACJ,GAAcphD,GAAuBvP,KAAKklC,QAAQ3jC,cAEpCqvD,EAAe5wD,KAAKmvD,UAAYnvD,KAAKmvD,UAAU0B,UAAY,EAC7DC,EAAS,EAEb,IAAIvhD,EAAQwhD,WAMR,IAAK,GALCC,GAASzhD,EAAQwhD,WAAWzzC,OAKzB8tB,EAAI,EAAGA,EAAI4lB,EAAQ5lB,IACpB77B,EAAQwhD,WAAW3lB,GAAG6lB,WAAaL,IACnCE,GAAUvhD,EAAQwhD,WAAW3lB,GAAGrD,YAK5C,OAAO+oB,GAAOtwC,uBA/HtBhiB,KAACC,EAAAA,UAADC,OACIC,SAAU,uCACV+H,SAAU,iBACVO,QAAS,YACTC,MACIgqD,cAAe,OACf/pD,MAAO,oBACPgqD,wCAAyC,eACzC59C,kBAAmB,iBACnBwyB,uBAAwB,sBACxBzyB,kBAAmB,mBACnBiX,UAAW,yBACX6mC,eAAgB,uBAEpBlyD,gBAAiBC,EAAAA,wBAAwBC,OACzCL,cAAeC,EAAAA,kBAAkBC,KACjCH,SAAU,4OAzCdN,KAAIa,EAAAA,aAqEJb,SAAA4T,GAAApK,aAAAxJ,KAAS6T,EAAAA,OAAT3T,MAAgBo6C,EAAAA,cA7DhBt6C,KAA2BqJ,EAAAA,eA+D3BrJ,SAAA4T,GAAApK,aAAAxJ,KAAS6T,EAAAA,OAAT3T,MAAgBoxD,MAAhBtxD,KAAoC+T,EAAAA,gCAnBpC8S,OAAA7mB,KAAKiB,EAAAA,QAELylC,UAAA1mC,KAAK0J,EAAAA,UAALxJ,MAAe,cAoGfuxD,GA1GoCD,ICpCvBqB,IAYTC,kBAAmB7pD,EAAAA,QAAQ,qBACvBtG,EAAAA,MAAM,OAAQyB,EAAAA,OACV4+C,QAAS,EACTl+B,UAAW,gBAEf3b,EAAAA,WAAW,gBAAiB6oB,EAAAA,OACxB+gC,EAAAA,MAAM,wBAAyB3pD,EAAAA,QAAQ,cAAehF,EAAAA,OAAO4+C,QAAS,MACtE55C,EAAAA,QAAQ,kCAAmChF,EAAAA,OAAO0gB,UAAW,iBAEjE3b,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,mBAAoBhF,EAAAA,OAAO4+C,QAAS,QAQxEgQ,YAAa/pD,EAAAA,QAAQ,eAEjBtG,EAAAA,MAAM,UAAWyB,EAAAA,OAAO4+C,QAAS,KACjC75C,EAAAA,WAAW,aACP/E,EAAAA,OAAO4+C,QAAS,IAChB55C,EAAAA,QAAQ,oDAKP4pD,GAAcH,GAAqBG,YAEnCF,GAAoBD,GAAqBC,kBCEzCG,GACT,GAAIrmD,GAAAA,eAAyC,+BACzCsmD,WAAY,OACZpH,QAASqH,IAcjBC,GAAA,WA+JI,QAAJA,GACgBtuD,EACAw5B,EACqC+0B,GAFrC7xD,KAAhBsD,YAAgBA,EACAtD,KAAhB88B,QAAgBA,EACqC98B,KAArD6xD,gBAAqDA,EA3DjD7xD,KAAJ4hD,cAGI5hD,KAAJ8xD,qBAA6C,OAGzC9xD,KAAJ+xD,eAAqB,GAAIzoD,GAAAA,QAYZtJ,KAAbipB,cAAqCjpB,KAAK6xD,gBAAgB5oC,cAmBnCjpB,KAAvB2mB,OACQ,GAAI9hB,GAAAA,aAGA7E,KAAZgyD,WAA4ChyD,KAAK6xD,gBAAgBI,UACrDjyD,KAAZkyD,WAA4ClyD,KAAK6xD,gBAAgBM,UAGrDnyD,KAAZoyD,UAGYpyD,KAAZqyD,aAA2B,GAAI/oD,GAAAA,QAGnBtJ,KAAZsyD,iBAA+BluB,EAAAA,aAAaC,MAChCrkC,KAAZuyD,iBAAwCvyD,KAAK6xD,gBAAgBW,gBACjDxyD,KAAZyyD,iBAAwCzyD,KAAK6xD,gBAAgBa,gBACjD1yD,KAAZ2yD,aAAgD3yD,KAAK6xD,gBAAgBrvC,YAwJrE,MAnSIniB,QAAJC,eACQsxD,EADRrxD,UAAA,iBAAI,WAEI,MAAOP,MAAKgyD,gBAGhB,SAAc1wD,GACI,WAAVA,GAAgC,UAAVA,GACtBsxD,IAEJ5yD,KAAKgyD,WAAa1wD,EAClBtB,KAAK6yD,sDAITxyD,OAAJC,eACQsxD,EADRrxD,UAAA,iBAAI,WAEI,MAAOP,MAAKkyD,gBAGhB,SAAc5wD,GACI,UAAVA,GAA+B,UAAVA,GACrBwxD,IAEJ9yD,KAAKkyD,WAAa5wD,EAClBtB,KAAK6yD,sDAITxyD,OAAJC,eACQsxD,EADRrxD,UAAA,uBAAI,WAEI,MAAOP,MAAKyyD,sBAGhB,SAAoBnxD,GAChBtB,KAAKyyD,iBAAmBjyD,EAAAA,sBAAsBc,oCAIlDjB,OAAJC,eACQsxD,EADRrxD,UAAA,uBAAI,WAEI,MAAOP,MAAKuyD,sBAGhB,SAAoBjxD,GAChBtB,KAAKuyD,iBAAmB/xD,EAAAA,sBAAsBc,oCAIlDjB,OAAJC,eACQsxD,EADRrxD,UAAA,mBAAI,WAEI,MAAOP,MAAK2yD,kBAGhB,SAAgBrxD,GACZtB,KAAK2yD,aAAenyD,EAAAA,sBAAsBc,oCAS9CjB,OAAJC,eACQsxD,EADRrxD,UAAA,kBAAI,SACewyD,GADf,GAAJ5uD,GAAAnE,KAEcgzD,EAAqBhzD,KAAKizD,mBAE5BD,IAAsBA,EAAmB11C,QACzC01C,EAAmBtjD,MAAM,KAAKG,QAAQ,SAACqjD,GACnC/uD,EAAKy9C,WAAWsR,IAAa,IAIrClzD,KAAKizD,oBAAsBF,EAEvBA,GAAWA,EAAQz1C,SACnBy1C,EAAQrjD,MAAM,KAAKG,QAAQ,SAACqjD,GACxB/uD,EAAKy9C,WAAWsR,IAAa,IAGjClzD,KAAKsD,YAAY/B,cAAc2xD,UAAY,qCAkEnDtB,EAAJrxD,UAAAK,SAAI,WACIZ,KAAK6yD,sBAGTjB,EAAJrxD,UAAAi1B,mBAAI,WAAA,GAAJrxB,GAAAnE,IACQA,MAAKkjD,YAAc,GAAIxkB,GAAAA,gBAAgC1+B,KAAKkvB,OAAOwY,WAAWhF,gBAC9E1iC,KAAKsyD,iBAAmBtyD,KAAKkjD,YAAYvoB,OAAO9sB,UAAU,WAAM,MAAA1J,GAAKwiB,OAAOlgB,KAAK,UAGrFmrD,EAAJrxD,UAAAyB,YAAI,WACIhC,KAAKsyD,iBAAiB/6C,cACtBvX,KAAK2mB,OAAO1W,YAIhB2hD,EAAJrxD,UAAA4vD,SAAI,WACI,MAAOnwD,MAAKqyD,aAAa1kD,KACrBuoB,EAAAA,UAAUl2B,KAAKoyD,QACf39B,EAAAA,UAAU,SAAAvF,GAAS,MAAA3I,GAAAA,MAF/B+N,UAAA,GAEwCpF,EAAMrT,IAAI,SAAAiQ,GAAQ,MAAAA,GAAKqkC,gBAK3DyB,EAAJrxD,UAAA4yD,eAAI,SAAevtD,GACnB,GAAcwK,GAAUxK,EAAMwK,OAEtB,QAAQA,GACJ,IAAKC,GAAAA,OACDrQ,KAAK2mB,OAAOlgB,KAAK,UACjB,MACJ,KAAKoyB,GAAAA,WACG74B,KAAKgzC,QAA6B,QAAnBhzC,KAAKR,WACpBQ,KAAK2mB,OAAOlgB,KAAK,UAErB,MACJ,KAAKqyB,GAAAA,YACG94B,KAAKgzC,QAA6B,QAAnBhzC,KAAKR,WACpBQ,KAAK2mB,OAAOlgB,KAAK,UAErB,MACJ,SACQ2J,IAAYwoB,EAAAA,UAAYxoB,IAAYuoB,EAAAA,YACpC34B,KAAKkjD,YAAYkQ,eAAe,YAGpCpzD,KAAKkjD,YAAYhqB,UAAUtzB,KAQvCgsD,EAAJrxD,UAAA8yD,eAAI,SAAeriD,GAAf,GAAJ7M,GAAAnE,SAAA,KAAAgR,IAAmBA,EAAnB,WAEYhR,KAAKszD,YACLtzD,KAAK88B,QAAQtI,SAAS7qB,eACjBgE,KAAK2Y,EAAAA,KAAK,IACVzY,UAAU,WAAM,MAAA1J,GAAK++C,YAAYkQ,eAAepiD,GAAQid,uBAE7DjuB,KAAKkjD,YAAYkQ,eAAepiD,GAAQid,sBAQhD2jC,EAAJrxD,UAAAgzD,gBAAI,WACIvzD,KAAKkjD,YAAYh1B,eAAe,IAOpC0jC,EAAJrxD,UAAA+vD,QAAI,SAAQxkC,IAM+B,IAA/B9rB,KAAKoyD,OAAOr2C,QAAQ+P,KACpB9rB,KAAKoyD,OAAOjqC,KAAK2D,GACjB9rB,KAAKqyD,aAAanoD,KAAKlK,KAAKoyD,UAQpCR,EAAJrxD,UAAAgwD,WAAI,SAAWzkC,GACf,GAAcpC,GAAQ1pB,KAAKoyD,OAAOr2C,QAAQ+P,EAE9B9rB,MAAKoyD,OAAOr2C,QAAQ+P,IAAS,IAC7B9rB,KAAKoyD,OAAOzoC,OAAOD,EAAO,GAC1B1pB,KAAKqyD,aAAanoD,KAAKlK,KAAKoyD,UAWpCR,EAAJrxD,UAAAsyD,mBAAI,SAAmBW,EAA0CC,OAAjE,KAAAD,IAAuBA,EAA0BxzD,KAAKiyD,eAAtD,KAAAwB,IAAiEA,EAA0BzzD,KAAKmyD,UAChG,IAAcY,GAAU/yD,KAAK4hD,UACrBmR,GAAQ,sBAAiC,WAATS,EAChCT,EAAQ,qBAAgC,UAATS,EAC/BT,EAAQ,qBAAgC,UAATU,EAC/BV,EAAQ,qBAAgC,UAATU,GAInC7B,EAAJrxD,UAAAmzD,gBAAI,WACI1zD,KAAK8xD,qBAAuB,SAIhCF,EAAJrxD,UAAAozD,gBAAI,WACI3zD,KAAK8xD,qBAAuB,QAIhCF,EAAJrxD,UAAAqzD,iBAAI,SAAiBhuD,GACb5F,KAAK+xD,eAAe7nD,KAAKtE,GACzB5F,KAAK6zD,cAAe,GAGxBjC,EAAJrxD,UAAAuzD,kBAAI,SAAkBluD,GACd5F,KAAK6zD,cAAe,EAQE,UAAlBjuD,EAAMygB,SAA4D,IAArCrmB,KAAKkjD,YAAY70B,kBAC9CzoB,EAAM2J,QAAQmf,UAAY,mBAlTtClwB,KAACC,EAAAA,UAADC,OACIC,SAAU,cACVG,SAAJ,sZACID,QAAS,4sBACTK,gBAAiBC,EAAAA,wBAAwBC,OACzCL,cAAeC,EAAAA,kBAAkBC,KACjCyH,SAAU,aACVc,YACI6pD,GAAqBC,kBACrBD,GAAqBG,aAEzB7qD,YACMC,QAASkpD,GAAmBhpD,YAAa8qD,4CAjFnDpzD,KAAIa,EAAAA,aAKJb,KAAIc,EAAAA,SAkOJd,SAAA4T,GAAApK,aAAAxJ,KAAS6T,EAAAA,OAAT3T,MAAgB+yD,2BAhJhBQ,YAAAzzD,KAAKiB,EAAAA,QAcL0yD,YAAA3zD,KAAKiB,EAAAA,QAcLizD,kBAAAl0D,KAAKiB,EAAAA,QAUL+yD,kBAAAh0D,KAAKiB,EAAAA,QAUL+iB,cAAAhkB,KAAKiB,EAAAA,QAeL2O,aAAA5P,KAAKiB,EAAAA,MAALf,MAAW,WAwCXuqB,gBAAAzqB,KAAKiB,EAAAA,QAGLs0D,cAAAv1D,KAAK0J,EAAAA,UAALxJ,MAAeoL,EAAAA,eAKfolB,QAAA1wB,KAAKo0B,EAAAA,gBAALl0B,MAAqBuxD,MAMrBqD,cAAA90D,KAAKk0B,EAAAA,aAALh0B,MAAkBmwD,MAKlBloC,SAAAnoB,KAAK2J,EAAAA,UAyKLypD,KrF1VaoC,GACT,GAAI5oD,GAAAA,eAAsC,+BAQjC6oD,IACTrtD,QAASotD,GACT1oD,MAAOC,EAAAA,SACPC,WAAY0oD,GAOVC,GAA8BC,EAAAA,iCAAiCC,SAAS,IAM9E7gD,GAAA,WAyEI,QAAJA,GAAwB8gD,EACAvR,EACAmM,EACqCqF,EACzBC,EACQC,EACRtyB,EACZn+B,GAPpB,GAAJG,GAAAnE,IAAwBA,MAAxBs0D,SAAwBA,EACAt0D,KAAxB+iD,SAAwBA,EACA/iD,KAAxBkvD,kBAAwBA,EACqClvD,KAA7Du0D,gBAA6DA,EACzBv0D,KAApCw0D,QAAoCA,EACQx0D,KAA5Cy0D,sBAA4CA,EACRz0D,KAApCmiC,KAAoCA,EACZniC,KAAxBgE,cAAwBA,EA9DZhE,KAAZ00D,kBAAgC,WAAM,MAAAvwD,GAAKwwD,UAAY,SASnD30D,KAAJ20D,UAA0C,KAmCnB30D,KAAvB40D,eAA4D,GAAI/vD,GAAAA,aAGzC7E,KAAvB60D,eAA4D,GAAIhwD,GAAAA,aAGpD7E,KAAZ80D,YAA6C,KACjC90D,KAAZ+0D,SAA+B,EACnB/0D,KAAZg1D,mBAAiC5wB,EAAAA,aAAaC,MAClCrkC,KAAZi1D,mBAAiC7wB,EAAAA,aAAaC,MAWtC0e,EAASxhD,cAAciP,iBAAiB,aAAcxQ,KAAK00D,kBACvDP,IAEAM,IACAA,EAAsBpE,wBAA0BrwD,KAAKk1D,0BAmYjE,MApcI70D,QAAJC,eAAQkT,EAARjT,UAAA,WAAI,WACI,MAAOP,MAAKmiC,MAA4B,QAApBniC,KAAKmiC,KAAK7gC,MAAkB,MAAQ,uCAS5DjB,OAAJC,eACQkT,EADRjT,UAAA,gBAAI,WAEI,MAAOP,MAAKm1D,eAGhB,SAAaC,GAAb,GAAJjxD,GAAAnE,IACYo1D,KAAap1D,KAAKm1D,YAItBn1D,KAAKm1D,UAAYC,EACjBp1D,KAAKg1D,mBAAmBz9C,cAEpB69C,IACAp1D,KAAKg1D,mBAAqBI,EAASzuC,OAAOhd,eAAekE,UAAU,SAAAwnD,GAC/DlxD,EAAKmxD,WAGW,UAAXD,GAAiC,QAAXA,IAAqBlxD,EAAKqwD,SACjDrwD,EAAKqwD,QAAQ7tC,OAAOlgB,KAAK4uD,wCAwCzC7hD,EAAJjT,UAAAi1B,mBAAI,WACIx1B,KAAKu1D,SACLv1D,KAAKw1D,gBAGThiD,EAAJjT,UAAAyB,YAAI,WACQhC,KAAK80D,cACL90D,KAAK80D,YAAYllD,UACjB5P,KAAK80D,YAAc,MAGvB90D,KAAK+iD,SAASxhD,cAAcwO,oBAAoB,aAAc/P,KAAK00D,kBAC/DP,IAEJn0D,KAAKy1D,wBACLz1D,KAAKg1D,mBAAmBz9C,eAI5BlX,OAAJC,eAAQkT,EAARjT,UAAA,cAAI,WACI,MAAOP,MAAK+0D,yCAIhBvhD,EAAJjT,UAAA20D,uBAAI,WACI,SAAUl1D,KAAKy0D,wBAAyBz0D,KAAKw0D,UAIjDhhD,EAAJjT,UAAAwT,OAAI,WAEI,MAAO/T,MAAK+0D,QAAU/0D,KAAK0mB,QAAU1mB,KAAKunB,QAI9C/T,EAAJjT,UAAAgnB,KAAI,WAAA,GAAJpjB,GAAAnE,IACQ,KAAIA,KAAK+0D,QAAT,CAIA/0D,KAAKu1D,QAEb,IAAcxoD,GAAa/M,KAAK01D,iBAClB3sC,EAAgBhc,EAAWgE,WAEjC/Q,MAAK21D,aAAa5sC,EAA8B,kBAChDA,EAAcvG,YAA2C,MAA7BxiB,KAAKo1D,SAAS5yC,aAAuBxiB,KAAKk1D,yBAClEl1D,KAAKo1D,SAAS5yC,YAClBzV,EAAW4D,OAAO3Q,KAAK41D,cAEnB51D,KAAKo1D,SAAS9B,aACdtzD,KAAKo1D,SAAS9B,YAAY3iD,OAAO3Q,KAAK8Q,MAG1C9Q,KAAKg1D,mBAAqBh1D,KAAK61D,kBAAkBhoD,UAAU,WAAM,MAAA1J,GAAKuiB,UACtE1mB,KAAK81D,QAED91D,KAAKo1D,mBAAoBxD,KACzB5xD,KAAKo1D,SAAS1B,oBAKtBlgD,EAAJjT,UAAAmmB,MAAI,WACI1mB,KAAKo1D,SAASzuC,OAAOlgB,QAOzB+M,EAAJjT,UAAA+E,MAAI,SAAM0L,OAAV,KAAAA,IAAUA,EAAV,WACYhR,KAAKgE,cACLhE,KAAKgE,cAAcuB,SAASvF,KAAK+iD,SAASxhD,cAAeyP,GAEzDhR,KAAK+iD,SAASxhD,cAAc+D,SAK5BkO,EAAZjT,UAAA+0D,SAAI,WAAA,GAAJnxD,GAAAnE,IACQ,IAAKA,KAAK80D,aAAgB90D,KAAK+1D,OAA/B,CAIR,GAAcX,GAAWp1D,KAAKo1D,QAEtBp1D,MAAKg1D,mBAAmBz9C,cACxBvX,KAAK80D,YAAYvmD,SAEb6mD,YAAoBxD,KACpBwD,EAASzB,kBAELyB,EAAS9B,YAET8B,EAASrD,eACJpkD,KACGwY,EAAAA,OAAO,SAACvgB,GAAU,MAAkB,SAAlBA,EAAMygB,UACxBC,EAAAA,KAAK,GAEL1Y,EAAAA,UAAUwnD,EAAS9B,YAAYlE,YAElCvhD,UAAU,WAAM,MAAAunD,GAAoB,YAAE7mD,cAAU6D,GAAW,WAExDjO,EAAK6xD,WAGbh2D,KAAKg2D,WAGTh2D,KAAKg2D,SAEDZ,EAAS9B,aACT8B,EAAS9B,YAAY/kD,YASzBiF,EAAZjT,UAAAu1D,MAAI,WACI91D,KAAKo1D,SAASpiB,OAAShzC,KAAKk1D,yBAA2Bl1D,KAAKw0D,YAAUpiD,GACtEpS,KAAKo1D,SAAS51D,UAAYQ,KAAK2zB,IAC/B3zB,KAAKi2D,cAAa,GAClBj2D,KAAKo1D,SAAS/B,eAAerzD,KAAK20D,WAAa,YAO3CnhD,EAAZjT,UAAAy1D,OAAI,WACIh2D,KAAKi2D,cAAa,GAKbj2D,KAAK20D,UAIE30D,KAAKk1D,0BACbl1D,KAAKsF,MAAMtF,KAAK20D,WAFhB30D,KAAKsF,QAKTtF,KAAK20D,UAAY,MAIbnhD,EAAZjT,UAAA01D,aAAI,SAAqBvjD,GACjB1S,KAAK+0D,QAAUriD,EAEf1S,KAAK+0D,QAAU/0D,KAAK40D,eAAenuD,OAASzG,KAAK60D,eAAepuD,OAE5DzG,KAAKk1D,2BACLl1D,KAAKy0D,sBAAsBrE,aAAe19C,IAQ1Cc,EAAZjT,UAAAg1D,OAAI,WACSv1D,KAAKo1D,UACNc,KAQA1iD,EAAZjT,UAAAm1D,eAAI,WACI,IAAK11D,KAAK80D,YAAa,CAC/B,GAAkB9uC,GAAShmB,KAAKm2D,mBACpBn2D,MAAKo2D,sBAAsBpwC,EAAuB,kBAClDhmB,KAAK80D,YAAc90D,KAAKs0D,SAASpmD,OAAO8X,GAKxChmB,KAAK80D,YAAYruC,gBAAgB5Y,YAGrC,MAAO7N,MAAK80D,aAORthD,EAAZjT,UAAA41D,kBAAI,WACI,MAAO,IAAIntC,GAAAA,eACP7a,iBAAkBnO,KAAKs0D,SAASrnD,WAC3BC,oBAAoBlN,KAAK+iD,UACzBsT,qBACAlpD,sBAAsB,uBAC3B8b,cAAejpB,KAAKo1D,SAASnsC,eAAiB,mCAC9Cld,eAAgB/L,KAAKu0D,kBACrB/0D,UAAWQ,KAAKmiC,QAShB3uB,EAAZjT,UAAA61D,sBAAI,SAA8BnpD,GAA9B,GAAJ9I,GAAAnE,IACYA,MAAKo1D,SAASvC,oBACd5lD,EAASS,gBAAgBG,UAAU,SAAAjJ,GAC/C,GAAsB4uD,GAA6D,UAAnC5uD,EAAOkK,eAAeG,SAAuB,QAAU,SACjFwkD,EAA6D,QAAnC7uD,EAAOkK,eAAeI,SAAqB,QAAU,OAErF/K,GAAKixD,SAA2B,mBAAE5B,EAAMC,MAU5CjgD,EAAZjT,UAAAo1D,aAAI,SAAqBxnD,GAEb,GAAAsD,GAAZ,WAAAzR,KAAAo1D,SAAAnD,yCAGA,QAAA,MAAA,QAAA,OAHaljD,EAGb0C,EAAA,GAHsB6kD,EAGtB7kD,EAAA,GAHuCxC,EAGvCwC,EAAA,GAHiD8kD,EAGjD9kD,EAAA,GAEY4xC,EAAZ,UAAArjD,KAAAo1D,SAAAjD,2CAGA,MAAA,SAAA,MAAA,UAHajjD,EAGbm0C,EAAA,GAHuBmT,EAGvBnT,EAAA,GAHyCr0C,EAGzCq0C,EAAA,GAHkDoT,EAGlDpT,EAAA,GAEY1zB,EAAU,CAEV3vB,MAAKk1D,0BAGLqB,EAAmBxnD,EAAsC,WAA5B/O,KAAKo1D,SAASnD,UAAyB,QAAU,MAC9EqE,EAAkBrnD,EAAuB,QAAZF,EAAoB,QAAU,MAC3D4gB,EAAuB,WAAbzgB,EAzVkB,GAAA,IA2VvBlP,KAAKo1D,SAAS1C,kBACf1jD,EAAuB,QAAbE,EAAqB,SAAW,MAC1CunD,EAAuC,QAArBD,EAA6B,SAAW,OAGzDx2D,KAAKo1D,SAAS5C,kBACf+D,EAAmBxnD,EAAsC,WAA5B/O,KAAKo1D,SAASnD,UAAyB,QAAU,MAC9EqE,EAAkBrnD,EAAuB,QAAZF,EAAoB,QAAU,QAInEZ,EAAiBb,gBACZyB,QAAbA,EAAsBC,QAAtBA,EAA+BC,SAA/BA,EAAyCC,SAAzCA,EAAmDygB,QAAnDA,IACa5gB,QAASunD,EAAiBtnD,QAAvCA,EAAgDC,SAAUsnD,EAAkBrnD,SAA5EA,EAAsFygB,QAAtFA,IAEgB5gB,QAAhBA,EACgBC,QAASynD,EACTxnD,SAAhBA,EACgBC,SAAUsnD,EACV7mC,SAAUA,IAGV5gB,QAASunD,EACTtnD,QAASynD,EACTxnD,SAAUsnD,EACVrnD,SAAUsnD,EACV7mC,SAAUA,MAMdnc,EAAZjT,UAAAk1D,sBAAI,WACIz1D,KAAKg1D,mBAAmBz9C,cACxBvX,KAAKi1D,mBAAmB19C,eAIpB/D,EAAZjT,UAAAs1D,gBAAI,WAAA,GAAJ1xD,GAAAnE,KACc02D,EAAW12D,KAAgB,YAAEwmB,gBAC7BlY,EAActO,KAAgB,YAAEsO,cAChCqoD,EAAc32D,KAAKw0D,QAAUx0D,KAAKw0D,QAAQ7tC,OAAS4gB,EAAAA,KACnDqvB,EAAQ52D,KAAKw0D,QAAUx0D,KAAKw0D,QAAQrE,WAAWxiD,KACjDwY,EAAAA,OAAO,SAACumB,GAAW,MAAAA,KAAWvoC,EAAKswD,wBACnCtuC,EAAAA,OAAO,WAAM,MAAAhiB,GAAK4wD,WAClBxtB,EAAAA,IAEJ,OAAOhhB,GAAAA,MAAMmwC,EAAUC,EAAaC,EAAOtoD,IAIvCkF,EAAZjT,UAAAs2D,iBAAI,SAAyBjxD,GAGrB5F,KAAK20D,UAA6B,IAAjB/uD,EAAMikD,OAAe,QAAU,KAK5C7pD,KAAKk1D,0BACLtvD,EAAM4W,kBAKNhJ,EAAZjT,UAAA4yD,eAAI,SAAuBvtD,GAC3B,GAAcwK,GAAUxK,EAAMwK,OAElBA,KAAY4oB,EAAAA,OAAS5oB,IAAY2oB,EAAAA,OACjC/4B,KAAKunB,OAGLvnB,KAAKk1D,2BACJ9kD,IAAY0oB,EAAAA,aAA4B,QAAb94B,KAAK2zB,KAChCvjB,IAAYyoB,EAAAA,YAA2B,QAAb74B,KAAK2zB,MAChC3zB,KAAKunB,QAKL/T,EAAZjT,UAAAu2D,aAAI,SAAqBlxD,GACb5F,KAAKk1D,0BAELtvD,EAAMC,kBACN7F,KAAKunB,QAELvnB,KAAK+T,UAKLP,EAAZjT,UAAAi1D,aAAI,WAAA,GAAJrxD,GAAAnE,IAEaA,MAAKk1D,2BAIVl1D,KAAKi1D,mBAAqBj1D,KAAKw0D,QAAQrE,WAIlCxiD,KACGwY,EAAAA,OAAO,SAACumB,GAAW,MAAAA,KAAWvoC,EAAKswD,wBAA0B/nB,EAAOhtC,WACpEq3D,EAAAA,MAAM,EAAGC,EAAAA,gBAEZnpD,UAAU,WACP1J,EAAKwwD,UAAY,QAKbxwD,EAAKixD,mBAAoBxD,KAAcztD,EAAKixD,SAASvB,aAGrD1vD,EAAKixD,SAASrD,eACTpkD,KAAK2Y,EAAAA,KAAK,GAAIywC,EAAAA,MAAM,EAAGC,EAAAA,eAAgBppD,EAAAA,UAAUzJ,EAAKqwD,QAAQrE,aAC9DtiD,UAAU,WAAM,MAAA1J,GAAKojB,SAE1BpjB,EAAKojB,WAMb/T,EAAZjT,UAAAq1D,WAAI,WAQI,MAJK51D,MAAKsvD,SAAWtvD,KAAKsvD,QAAQyE,cAAgB/zD,KAAKo1D,SAASrB,cAC5D/zD,KAAKsvD,QAAU,GAAIxnC,GAAAA,eAAe9nB,KAAKo1D,SAASrB,YAAa/zD,KAAKkvD,oBAG/DlvD,KAAKsvD,wBAtdpB9wD,KAACkD,EAAAA,UAADhD,OACIC,SAAU,yBACVuI,MACI+vD,gBAAiB,OACjBC,uBAAwB,iBACxBC,cAAe,2BACfnlD,YAAa,yBACbuY,UAAW,wBAEf7jB,SAAU,4DArDdlI,KAAI+M,EAAAA,UAjBJ/M,KAAIa,EAAAA,aASJb,KAAI2T,EAAAA,mBAgIJ3T,SAAA4T,GAAApK,aAAAxJ,KAAiB6T,EAAAA,OAAjB3T,MAAwBs1D,QAzGxBx1D,KAASozD,GAAT5pD,aAAAxJ,KA0GiB+T,EAAAA,aA7GjB/T,KAASyxD,GAATjoD,aAAAxJ,KA8GiB+T,EAAAA,WA9GjB/T,KA8G6BiV,EAAAA,SA/H7BjV,KAAoB8T,EAAAA,eAApBtK,aAAAxJ,KAgIiB+T,EAAAA,aAjIjB/T,KAASqJ,EAAAA,kCAiFTutD,WAAA52D,KAAKiB,EAAAA,MAALf,MAAW,0BA4BXoS,OAAAtS,KAAKiB,EAAAA,MAALf,MAAW,2BAGXk2D,iBAAAp2D,KAAK2J,EAAAA,SAGL0sD,iBAAAr2D,KAAK2J,EAAAA,UAwZLqL,KsF9gBA4jD,GAAA,WAAA,QAAAA,MAU+B,sBAV/B54D,KAACsE,EAAAA,SAADpE,OACIqE,SACIC,EAAAA,aACA8P,EAAAA,cACA7P,IAEJC,SAAU0uD,GAAY3B,GAAgBz8C,GAAmBq7C,IACzD1rD,cAAeyuD,GAAY3B,GAAgBz8C,GAAmBq7C,IAC9DloD,WAAYstD,QAEhBmD,KClBAC,GAAA,WAAA,QAAAA,MAcA,sBAdA74D,KAACC,EAAAA,UAADC,OACIC,SAAU,aACVC,qBAAqB,EACrBE,SAAJ,4BACID,QACI,mDAIJqI,MACIowD,4BAA6B,YAIrCD,KCdAE,GAAA,WAAA,QAAAA,MAcA,sBAdA/4D,KAACC,EAAAA,UAADC,OACIC,SAAU,YACVC,qBAAqB,EACrBE,SAAJ,4BACID,QACI,mDAIJqI,MACIswD,2BAA4B,YAIpCD,KCdAE,GAAA,WAAA,QAAAA,MAcA,sBAdAj5D,KAACC,EAAAA,UAADC,OACIC,SAAW,YACXC,qBAAqB,EACrBE,SAAJ,4BACID,QACI,mDAIJqI,MACIwwD,2BAA4B,YAIpCD,KCdAE,GAAA,WAAA,QAAAA,KAaI33D,KAAJ43D,YAAiB,EACjB,sBAdAp5D,KAACC,EAAAA,UAADC,OACIC,SAAU,YACVC,qBAAqB,EACrBC,QAAS,sfACTC,SAAJ,4BACIoI,MACI2wD,oBAAqB,OACrBC,gCAAiC,cAErC/4D,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,WAI7Cu4D,KCFAI,GAAA,WA2DI,QAAJA,GACoCC,GAAAh4D,KAApCg4D,kBAAoCA,EA5CvBh4D,KAAbi4D,SAAwB,IACXj4D,KAAbk4D,iBAAgC,GAqBlBl4D,KAAdm4D,kBAAkC,GAAItzD,GAAAA,aAE1B7E,KAAZ++C,WAAwB,EACZ/+C,KAAZo4D,aAA0B,EA2B1B,MAjDI/3D,QAAJC,eACQy3D,EADRx3D,UAAA,qBAKI,WACI,MAAOP,MAAKo4D,iBANhB,SACkB92D,GACdtB,KAAKo4D,YAAcnoB,EAAU3uC,oCAOjCjB,OAAJC,eACQy3D,EADRx3D,UAAA,mBAKI,WACI,MAAOP,MAAK++C,eANhB,SACgBz9C,GACZtB,KAAK++C,UAAY9O,EAAU3uC,oCAa/BjB,OAAJC,eAAQy3D,EAARx3D,UAAA,cAAI,WACI,MAAIP,MAAKq4D,YACE,OAAOr4D,KAAKk4D,iBAA/B,KAEmB,OAAOl4D,KAAKk5C,QAA/B,sCAII74C,OAAJC,eAAQy3D,EAARx3D,UAAA,eAAI,WACI,MAAIP,MAAKq4D,YACEr4D,KAAKk4D,iBAELl4D,KAAKi4D,0CAQpBF,EAAJx3D,UAAAK,SAAI,WACQZ,KAAKg4D,oBACLh4D,KAAKg4D,kBAAkBJ,YAAa,mBAjEhDp5D,KAACC,EAAAA,UAADC,OACIC,SAAU,aACVC,qBAAqB,EACrBE,SAAJ,0EACIoI,MACIoxD,4BAA6B,OAC7BC,sCAAuC,cACvCC,eAAgB,SAChBC,uBAAwB,UACxBC,uBAAwB,UACxBC,mBAAoB,WAExBz5D,gBAAiBC,EAAAA,wBAAwBC,+CAf7CZ,KAASm5D,GAAT3vD,aAAAxJ,KA+DS+T,EAAAA,WA/DT/T,KA+DqBo6D,EAAAA,4BA5CrBX,WAAAz5D,KAAKiB,EAAAA,QACLy4D,mBAAA15D,KAAKiB,EAAAA,QAELo5D,gBAAAr6D,KAAKiB,EAAAA,QASL44D,cAAA75D,KAAKiB,EAAAA,QAUL04D,oBAAA35D,KAAK2J,EAAAA,UA8BL4vD,KCzEAe,GAAA,WAAA,QAAAA,MAkBA,sBAlBAt6D,KAACsE,EAAAA,SAADpE,OACIqE,SAAWC,EAAAA,cACXE,SACIy0D,GACAN,GACAE,GACAE,GACAM,IAEJ50D,cACIw0D,GACAN,GACAE,GACAE,GACAM,QAIRe,KxBcApU,GAAA,WA+DI,QAAJA,GACgB3B,EACAvT,EAEDupB,GAHC/4D,KAAhB+iD,SAAgBA,EACA/iD,KAAhBwvC,gBAAgBA,EAEDxvC,KAAf+4D,cAAeA,EAhDX/4D,KAAJikD,WAAyB,EAOZjkD,KAAbg5D,iBAAoD,QAkCxCh5D,KAAZo8B,WAAwB,EACZp8B,KAAZE,WAAwB,EA8FxB,MA7HIG,QAAJC,eACQokD,EADRnkD,UAAA,gBAAI,WAEI,MAAOP,MAAKE,WAAcF,KAAK+4D,eAAiB/4D,KAAK+4D,cAAcr5D,cAGvE,SAAa4B,GACjB,GAAckX,GAAWy3B,EAAU3uC,EAEvBkX,KAAaxY,KAAKE,YAClBF,KAAKE,UAAYsY,EACjBxY,KAAKwvC,gBAAgBpqC,iDAI7B/E,OAAJC,eACQokD,EADRnkD,UAAA,gBAAI,WAEI,MAAOP,MAAK+4D,cAAcviC,iBAAmBx2B,KAAK+4D,cAAcviC,gBAAgBuE,WAAW/6B,QAAS,OAGxG,SAAasB,GACjB,GAAcy5B,GAAakV,EAAU3uC,EAEzBy5B,KAAe/6B,KAAKo8B,YACpBp8B,KAAKkzC,YAAYnY,GAEjB/6B,KAAK+4D,cAAcvV,uDAe3BkB,EAAJnkD,UAAAK,SAAI,WAAA,GAAJuD,GAAAnE,IACQ,IAAIA,KAAKo8B,UAAW,CAM5B,GAAkB68B,GAAcj5D,KAAKo8B,SAEzBtC,SAAQC,UAAUC,KAAK,YACf71B,EAAKi4B,WAAa68B,KAClB90D,EAAKopB,UAAW,EAChBppB,EAAKqrC,gBAAgBpqC,oBAMrCs/C,EAAJnkD,UAAAi1B,mBAAI,WACIx1B,KAAKglD,YAAc,GAAIC,IAAajlD,KAAKklD,OAAQllD,KAAK+iD,WAG1D2B,EAAJnkD,UAAAyB,YAAI,WAAA,GAAJmC,GAAAnE,IACYA,MAAKutB,UAGLuM,QAAQC,UAAUC,KAAK,WAAM,MAAA71B,GAAKopB,UAAW,IAGjDvtB,KAAK+4D,cAAc/U,sBAAsBhkD,OAG7C0kD,EAAJnkD,UAAAwT,OAAI,WACI/T,KAAKutB,UAAYvtB,KAAKutB,UAG1Bm3B,EAAJnkD,UAAA+E,MAAI,WACItF,KAAK+iD,SAASxhD,cAAc+D,QAE5BtF,KAAK+4D,cAAcrlB,iBAAiB1zC,OAGxC0kD,EAAJnkD,UAAAowD,SAAI,WACI,MAAO3wD,MAAKk5D,MAAQl5D,KAAKk5D,MAAM33D,cAAcwmC,YAAc,IAG/D2c,EAAJnkD,UAAA2yC,YAAI,SAAY3lB,GACJvtB,KAAKo8B,YAAc7O,GAAavtB,KAAK+4D,cAAcviC,kBAEvDx2B,KAAKo8B,UAAY7O,EAEbA,EACAvtB,KAAK+4D,cAAcviC,gBAAgBX,OAAO71B,MAE1CA,KAAK+4D,cAAcviC,gBAAgBT,SAAS/1B,MAGhDA,KAAKwvC,gBAAgBpqC,iBAGzBs/C,EAAJnkD,UAAAmjD,WAAI,WACI,MAAO1jD,MAAK+iD,SAASxhD,cAAcgyC,iBAAiB,GAAGv7B,QAG3D0sC,EAAJnkD,UAAAu2D,aAAI,WACQ92D,KAAKN,UAETM,KAAK+4D,cAAcrlB,iBAAiB1zC,OAGxC0kD,EAAJnkD,UAAA4kD,aAAI,WACQnlD,KAAKN,UAAYM,KAAKikD,YAE1BjkD,KAAKikD,WAAY,IAGrBS,EAAJnkD,UAAA6kD,YAAI,WACIplD,KAAKikD,WAAY,EAEjBjkD,KAAK+4D,cAAcz2B,cAGvBoiB,EAAJnkD,UAAA8kD,gBAAI,WACI,MAAOrlD,MAAK+iD,SAASxhD,8BAzJ7B/C,KAACC,EAAAA,UAADC,OACIgI,SAAU,eACV/H,SAAU,iBACVuI,MACIke,SAAU,KAEVje,MAAO,iBACPwsC,sBAAuB,WACvBwlB,qBAAsB,YACtBhgD,UAAW,iBACXD,SAAU,gBACVqR,UAAW,kBAEfzrB,SAAJ,0GACIC,cAAeC,EAAAA,kBAAkBC,KACjCL,qBAAqB,EACrBM,gBAAiBC,EAAAA,wBAAwBC,+CApD7CZ,KAAIa,EAAAA,aAOJb,KAAIsJ,EAAAA,oBAgGJtJ,KAA8BmkD,GAA9B36C,aAAAxJ,KADS6T,EAAAA,OACT3T,MADgBqI,EAAAA,WAAW,WAAM,MAAA47C,8BA7CjCuC,SAAA1mD,KAAKo0B,EAAAA,gBAALl0B,MAAqB4mD,MAErB4T,QAAA16D,KAAK0J,EAAAA,UAALxJ,MAAe,UAGfs6D,mBAAAx6D,KAAKiB,EAAAA,QAEL6B,QAAA9C,KAAKiB,EAAAA,QAELC,WAAAlB,KAAKiB,EAAAA,QAcL8tB,WAAA/uB,KAAKiB,EAAAA,SA+GLilD,KAGaD,IACT79C,QAASC,EAAAA;4BACTC,YAAaC,EAAAA,WAAW,WAAM,MAAA47C,MAC9B37C,OAAO,iBAKP,QAAJ47C,GAEep8C,EAEA8mB,GAFAttB,KAAfwG,OAAeA,EAEAxG,KAAfstB,OAAeA,EAEf,MAAAs1B,MAGAC,GAAA,WAAA,QAAAA,MAAkC,MAAlCA,MAEaC,GACPp/C,EAAcm/C,IAEpBF,GAAA,SAAA5+C,GAiDI,QAAJ4+C,GACgBI,EACe7+C,EACG4Q,EACAo/B,EACHr/B,GAL3B,GAAJ1Q,GAOQJ,EAPRK,KAAApE,OAAAA,WACgBmE,GAAhB4+C,SAAgBA,EAbH5+C,EAAb6+C,YAAmC,EAGZ7+C,EAAvBoQ,gBAA8E,GAAI1P,GAAAA,aAOtEV,EAAZ8+C,cAA4B7e,EAAAA,aAAaC,MAoKrClgC,EAAJm+B,WAA6B,aAiGjBn+B,EAAZspB,UAA8C,SAACzoB,KA1PvCb,EAAK2Q,WAA4B,OAAfA,GAA6Bm7B,EAAUn7B,GACzD3Q,EAAK0Q,SAAwB,OAAbA,GAA2Bo7B,EAAUp7B,GACrD1Q,EAAK+vC,WAA4B,OAAfA,GAA6BjE,EAAUiE,GAEzD/vC,EAAKD,SAAWe,SAASf,IAAa,EAEtCC,EAAKqyB,gBAAkB,GAAId,GAAAA,eAA6BvxB,EAAK0Q,YAqPrE,MAlSqC1P,GAArCw9C,EAAA5+C,GAgDI4+C,EAAJpiD,UAAAi1B,mBAAI,WACIx1B,KAAKgjD,WAAa/S,EAAUjwC,KAAKgjD,YAEjChjD,KAAKkjD,YAAc,GAAIxkB,GAAAA,gBAA8B1+B,KAAK4sB,SACrD8V,gBACA/D,yBAAyB3+B,KAAKgjD,YAC9BpkB,0BAA0B5+B,KAAKgjD,WAAa,MAAQ,MAErDhjD,KAAKmjD,cACLnjD,KAAKojD,sBAAsBpjD,KAAKmjD,aAChCnjD,KAAKmjD,YAAc,MAIvBnjD,KAAKijD,cAAgBjjD,KAAKw2B,gBAAwB,SAAE3oB,UAAU,SAACjI,GAC3D,IAAmB,GAA/Bi2B,GAAA,EAA+BpqB,EAAA7L,EAAMgwB,MAANiG,EAA/BpqB,EAAA6L,OAA+Bue,IAAa,CAA3B,GAAM/P,GAAvBra,EAAAoqB,EACgB/P,GAAKyB,UAAW,EAGpB,IAAmB,GAA/B81B,GAAA,EAA+BC,EAAA19C,EAAMkwB,QAANutB,EAA/BC,EAAAhmC,OAA+B+lC,IAAe,CAA7B,GAAMv3B,GAAvBw3B,EAAAD,EACgBv3B,GAAKyB,UAAW,KAIxBvtB,KAAK+0C,oBAGT4N,EAAJpiD,UAAAyB,YAAI,WACIhC,KAAKijD,cAAc1rC,eAGvBorC,EAAJpiD,UAAA+E,MAAI,WACItF,KAAK+iD,SAASxhD,cAAc+D,SAGhCq9C,EAAJpiD,UAAAgjD,UAAI,WACIvjD,KAAK4sB,QAAQ/c,QAAQ,SAACyd,GAAW,MAAAA,GAAO4lB,aAAY,KAEpDlzC,KAAKwjD,sBAGTb,EAAJpiD,UAAAkjD,YAAI,WACIzjD,KAAK4sB,QAAQ/c,QAAQ,SAACyd,GAAW,MAAAA,GAAO4lB,aAAY,KAEpDlzC,KAAKwjD,sBAGTb,EAAJpiD,UAAAw0C,iBAAI,YACQ/0C,KAAKgjD,YAAehjD,KAAK4sB,QAAQ2D,OAErCvwB,KAAKkjD,YAAYlO,eAAe/8B,KAAKg9B,MAAMj1C,KAAK0jD,aAAe1jD,KAAK4sB,QAAQ2D,MAAMmzB,gBAItFf,EAAJpiD,UAAAmzC,iBAAI,SAAiBpmB,GAGb,GAFAttB,KAAKkjD,YAAYxiB,iBAAiBpT,GAE9BttB,KAAKs0C,WAAat0C,KAAK6U,SAAU,CAC7C,GAAkBqgC,GAAgBl1C,KAAKkjD,YAAY/N,wBACjCC,EAAcp1C,KAAKkjD,YAAY70B,eAEjC6mB,GAAgBE,EAChBp1C,KAAK4sB,QAAQ/c,QAAQ,SAACic,EAAMpC,GACpBA,GAASwrB,GAAiBxrB,GAAS0rB,GAAetpB,EAAKonB,aAAY,KAG3ElzC,KAAK4sB,QAAQ/c,QAAQ,SAACic,EAAMpC,GACpBA,GAAS0rB,GAAe1rB,GAASwrB,GAAiBppB,EAAKonB,aAAY,KAI/ElzC,KAAKs0C,WAAY,MACd,IAAIt0C,KAAKu0C,SAAU,CAGtB,GAFAv0C,KAAKu0C,UAAW,GAEXv0C,KAAK2jD,iBAAiBr2B,GAAW,MAEtCA,GAAOvZ,aAEH/T,MAAK8U,aACL9U,KAAK4sB,QAAQ/c,QAAQ,SAACic,GAAS,MAAAA,GAAKonB,aAAY,KAChD5lB,EAAO4lB,aAAY,GAI3BlzC,MAAKiG,iBAAiBqnB,GACtBttB,KAAKwjD,sBAITb,EAAJpiD,UAAA2F,WAAI,SAAW09C,GACH5jD,KAAK4sB,QACL5sB,KAAKojD,sBAAsBQ,OAE3B5jD,KAAKmjD,YAAcS,GAK3BjB,EAAJpiD,UAAA4F,iBAAI,SAAiBC,GACbpG,KAAKytB,UAAYrnB,GAIrBu8C,EAAJpiD,UAAA8F,kBAAI,SAAkBD,GACdpG,KAAKsiC,WAAal8B,GAItBu8C,EAAJpiD,UAAA+F,iBAAI,SAAiBC,GACTvG,KAAK4sB,SACL5sB,KAAK4sB,QAAQ/c,QAAQ,SAACyd,GAAW,MAAAA,GAAO5tB,SAAW6G,KAI3Do8C,EAAJpiD,UAAAsjD,wBAAI,WACI,MAAO7jD,MAAK4sB,QAAQzG,OAAO,SAACmH,GAAW,MAAAA,GAAOC,WAAU1R,IAAI,SAACyR,GAAW,MAAAA,GAAOhsB,SAInFqhD,EAAJpiD,UAAAm0C,oBAAI,WACJ,GAAca,GAAev1C,KAAKkjD,YAAY70B,eAEtC,IAAoB,MAAhBknB,GAAwBv1C,KAAK8jD,cAAcvO,GAAe,CACtE,GAAkBC,GAA8Bx1C,KAAK4sB,QAAQC,UAAU0oB,EAEvDC,IAAiBx1C,KAAK2jD,iBAAiBnO,KACvCA,EAAczhC,SAGd/T,KAAKiG,iBAAiBuvC,MAKlCmN,EAAJpiD,UAAAojD,iBAAI,SAAiBI,GACb,QAAS/jD,KAAKk0C,YAAuD,IAAzCl0C,KAAKw2B,gBAAgBjJ,SAASjQ,QAAgBymC,EAAWx2B,WAGzFo1B,EAAJpiD,UAAAmjD,WAAI,WACI,MAAO1jD,MAAK+iD,SAASxhD,cAAcgyC,iBAAiB,GAAGv7B,QAO3D2qC,EAAJpiD,UAAAyjD,sBAAI,SAAsB12B,GAClB,GAAIA,EAAO22B,UAAW,CAC9B,GAAkBC,GAAclkD,KAAKmkD,gBAAgB72B,EAGrC42B,GAAc,EACdlkD,KAAKkjD,YAAYkB,wBACM,IAAhBF,GAAqBlkD,KAAK4sB,QAAQtP,OAAS,GAClDtd,KAAKkjD,YAAYmB,sBAK7B1B,EAAJpiD,UAAA+jD,WAAI,SAAW1+C,GACf,GAAcwK,GAAUxK,EAAMwK,OAItB,QAHApQ,KAAKs0C,UAAY1uC,EAAMg0B,SACvB55B,KAAKu0C,SAAW3uC,EAAM6zB,QAEdrpB,GACJ,IAAK4oB,GAAAA,MACL,IAAKD,GAAAA,MACD/4B,KAAK00C,sBACL9uC,EAAM4W,gBAEN,MACJ,KAAK4c,GAAAA,KACDp5B,KAAKkjD,YAAYj1B,qBACjBroB,EAAM4W,gBAEN,MACJ,KAAK6c,GAAAA,IACDr5B,KAAKkjD,YAAY5pB,oBACjB1zB,EAAM4W,gBAEN,MACJ,KAAKm4B,GAAAA,QACI30C,KAAKgjD,YAAchjD,KAAKkjD,YAAYtO,4BAEzChvC,EAAM4W,gBAEN,MACJ,KAAKq4B,GAAAA,UACI70C,KAAKgjD,YAAchjD,KAAKkjD,YAAYpO,wBAEzClvC,EAAM4W,gBAEN,MACJ,SACIxc,KAAKkjD,YAAYhqB,UAAUtzB,KAKvC+8C,EAAJpiD,UAAAijD,mBAAI,WACQxjD,KAAK4sB,SACL5sB,KAAKytB,UAAUztB,KAAK6jD,4BAK5BlB,EAAJpiD,UAAA0F,iBAAI,SAAiBqnB,GACbttB,KAAKuU,gBAAgB9N,KAAK,GAAIm8C,IAAsB5iD,KAAMstB,KAItDq1B,EAAZpiD,UAAAgkD,kBAAI,SAA0BjjD,GACtB,MAAOtB,MAAK4sB,QAAQtE,KAAK,SAACgF,GAAW,MAAAA,GAAOhsB,QAAUA,KAIlDqhD,EAAZpiD,UAAA6iD,sBAAI,SAA8BQ,GAA9B,GAAJz/C,GAAAnE,IACQA,MAAK4sB,QAAQ/c,QAAQ,SAACyd,GAAW,MAAAA,GAAO4lB,aAAY,KAEpD0Q,EACK/nC,IAAI,SAACva,GAAU,MAAA6C,GAAKogD,kBAAkBjjD,KACtC6kB,OAAOT,SACP7V,QAAQ,SAACyd,GAAW,MAAA,GAAQ4lB,aAAY,MAQzCyP,EAAZpiD,UAAAujD,cAAI,SAAsBp6B,GAClB,MAAOA,IAAS,GAAKA,EAAQ1pB,KAAK4sB,QAAQtP,QAItCqlC,EAAZpiD,UAAA4jD,gBAAI,SAAwB72B,GACpB,MAAOttB,MAAK4sB,QAAQC,UAAU9Q,QAAQuR,mBAhT9C9uB,KAACC,EAAAA,UAADC,OACIgI,SAAU,kBACV/H,SAAU,oBACVG,SAAU,4BACVD,QAAS,orGACTK,gBAAiBC,EAAAA,wBAAwBC,OACzCL,cAAeC,EAAAA,kBAAkBC,KACjCgI,QAAS,WAAY,YACrBC,MACIC,MAAO,oBACPq9C,aAAc,WACdrrC,UAAW,UACXD,SAAU,eACVlH,YAAa,qBACb6f,kBAAmB,sBAEvBlrB,WAAY89C,IACZ7lD,qBAAqB,0CAzOzBJ,KAAIa,EAAAA,aA2QJb,KAAAuJ,OAAAC,aAAAxJ,KAASyJ,EAAAA,UAATvJ,MAAmB,gBACnBF,KAAAuJ,OAAAC,aAAAxJ,KAASyJ,EAAAA,UAATvJ,MAAmB,mBACnBF,KAAAuJ,OAAAC,aAAAxJ,KAASyJ,EAAAA,UAATvJ,MAAmB,mBACnBF,KAAAuJ,OAAAC,aAAAxJ,KAASyJ,EAAAA,UAATvJ,MAAmB,mCA7BnBkuB,UAAApuB,KAAKo0B,EAAAA,gBAALl0B,MAAqBgmD,MAYrB1B,aAAAxkD,KAAKiB,EAAAA,QAGL8U,kBAAA/V,KAAK2J,EAAAA,UA6QLw6C,GAlSqCG,ICxOrC6B,GAAA,WAAA,QAAAA,MAAyB,MAAzBA,MAEAC,GAAA,SAAA7gD,GAAA,QAAA6gD,oDAQwC,MAAZz/C,GAA5By/C,EAAA7gD,kBARAvF,KAACC,EAAAA,UAADC,OACIC,SAAU,UACVuI,MAAQC,MAAO,WACfrI,SAAU,4BACVD,QAAS,orGACTK,gBAAiBC,EAAAA,wBAAwBC,OACzCL,cAAeC,EAAAA,kBAAkBC,SAErC2lD,GAA4BD,IAO5BE,GAAA,WAAA,QAAAA,MAIuC,sBAJvCrmD,KAACkD,EAAAA,UAADhD,OACIC,SAAU,gCACVuI,MAAQC,MAAO,oBAEnB09C,mBAIA,QAAAC,MAA6B,MAA7BA,MAEAC,GAAA,SAAAhhD,GAiBI,QAAJghD,GAAwBhC,GAApB,GAAJ5+C,GACQJ,EADRK,KAAApE,OAAAA,WAAwBmE,GAAxB4+C,SAAwBA,IAmBxB,MAxBgC59C,GAAhC4/C,EAAAhhD,GASIghD,EAAJxkD,UAAAi1B,mBAAI,WACIx1B,KAAKglD,YAAc,GAAIC,IAAajlD,KAAKklD,OAAQllD,KAAK+iD,WAG1DgC,EAAJxkD,UAAA4kD,aAAI,WACInlD,KAAK+iD,SAASxhD,cAAc2jB,UAAUC,IAAI,eAG9C4/B,EAAJxkD,UAAA6kD,YAAI,WACIplD,KAAK+iD,SAASxhD,cAAc2jB,UAAUqT,OAAO,eAGjDwsB,EAAJxkD,UAAA8kD,gBAAI,WACI,MAAOrlD,MAAK+iD,SAASxhD,8BAlC7B/C,KAACC,EAAAA,UAADC,OACIC,SAAU,gCACVuI,MACIC,MAAO,eACPgS,UAAW,iBACXD,SAAU,iBAEdpa,SAAJ,yNACIC,cAAeC,EAAAA,kBAAkBC,KACjCL,qBAAqB,EACrBM,gBAAiBC,EAAAA,wBAAwBC,+CA5C7CZ,KAAsFa,EAAAA,gCA+CtF6lD,SAAA1mD,KAAKo0B,EAAAA,gBAALl0B,MAAqB4mD,OAuBrBP,GAxBgCD,ICrChCS,GAAA,WAAA,QAAAA,MAqB2B,sBArB3B/mD,KAACsE,EAAAA,SAADpE,OACIqE,SACIC,EAAAA,aACAqF,EAAAA,WACAm9C,IAEJtiD,SACI0hD,GACAjC,GACAoC,GACAL,GACAG,IAEJ1hD,cACIyhD,GACAjC,GACAoC,GACAL,GACAG,QAGRU,KCXAE,GAAA,WACI,QAAJA,GAAuBniD,GAAAtD,KAAvBsD,YAAuBA,EAEvB,MAAAmiD,MAEaC,GACPliD,EAAcE,EAAc+hD,KAElCE,GAAA,SAAA5hD,GAgCI,QAAJ4hD,GAC+BzhD,EAChBnE,EACCiE,EACAwrC,GAJZ,GAAJrrC,GAMQJ,EANRK,KAAApE,KAMcD,IANdC,WAEemE,GAAfpE,WAAeA,EACCoE,EAAhBH,cAAgBA,EACAG,EAAhBqrC,gBAAgBA,EANJrrC,EAAZjE,WAAwB,EAShBiE,EAAKH,cAAckB,QAAQnF,EAAWwB,eAAe,GACrD4C,EAAKD,SAAWe,SAASf,IAAa,IAc9C,MAxC4BiB,GAA5BwgD,EAAA5hD,GAEI1D,OAAJC,eACQqlD,EADRplD,UAAA,gBAAI,WAEI,MAAOP,MAAKE,eAGhB,SAAaoB,GACjB,GAAckX,GAAWy3B,EAAU3uC,EAEvBkX,KAAaxY,KAAKE,YAClBF,KAAKE,UAAYsY,EACjBxY,KAAKwvC,gBAAgBpqC,iDAiB7BugD,EAAJplD,UAAAyB,YAAI,WACIhC,KAAKgE,cAAcqB,eAAerF,KAAKD,WAAWwB,gBAGtDokD,EAAJplD,UAAA+E,MAAI,WACItF,KAAKqlD,kBAAkB//C,SAG3BqgD,EAAJplD,UAAA8kD,gBAAI,WACI,MAAOrlD,MAAKD,WAAWwB,8BApD/B/C,KAACC,EAAAA,UAADC,OACIC,SAAU,YACVG,SAAU,4BACVI,gBAAiBC,EAAAA,wBAAwBC,OACzCL,cAAeC,EAAAA,kBAAkBC,KACjCyH,SAAU,SACV7H,QAAS,mgCACToI,QAAS,YACTC,MACIoM,kBAAmB,mBACnBC,kBAAmB,oDAuB3B/U,KAAAuJ,OAAAC,aAAAxJ,KAASyJ,EAAAA,UAATvJ,MAAmB,gBA1DnBF,KAAIa,EAAAA,aAOJb,KAASqJ,EAAAA,eAHTrJ,KAAIsJ,EAAAA,uCAqCJpI,WAAAlB,KAAKiB,EAAAA,SAsCLkmD,GAxC4BD,ICnC5BE,GAAA,WAAA,QAAAA,MAQ2B,sBAR3BpnD,KAACsE,EAAAA,SAADpE,OACIqE,SACIC,EAAAA,aACAqF,EAAAA,YAEJlF,cAAewiD,IACfziD,SAAUyiD,QAEdC,KCJA/M,GAAA,WAyBI,QAAJA,GACwCgN,GAAA7lD,KAAxC6lD,cAAwCA,EAZ5B7lD,KAAZ8lD,eAA2C9lD,KAAK6lD,cAAgB,QAEpD7lD,KAAZ+lD,kBAA+C/lD,KAAK6lD,cAAgB,KAAO,GAAIv8C,GAAAA,QAEnEtJ,KAAZgmD,sBAAsEhmD,KAAK6lD,cAAgB,KAAO,GAAIx5C,KA6CtG,MA3DIhM,QAAJC,eAAQu4C,EAARt4C,UAAA,qBAAI,WACI,MAAOP,MAAK6lD,cAAgB7lD,KAAK6lD,cAAcpK,cAAgBz7C,KAAsB,mDAIzFK,OAAJC,eAAQu4C,EAARt4C,UAAA,kBAAI,WACI,MAAOP,MAAK6lD,cAAgB7lD,KAAK6lD,cAAcrK,WAAax7C,KAAmB,gDAWnFK,OAAJC,eAAgBu4C,EAAhBt4C,UAAA,yBAAI,WACI,MAAOP,MAAK6lD,cAAgB7lD,KAAK6lD,cAAcI,kBAAoBjmD,KAAKgmD,uDAQ5EnN,EAAJt4C,UAAA2lD,cAAI,SAAc9K,GAAd,GAAJj3C,GAAAnE,IACQ,KAAKA,KAAKmmD,cAAc/K,GAAW,CAC3C,GAAkBgL,GAAwBhL,EAASiL,UAAUx4C,UAAU,WAAM,MAAA1J,GAAKq3C,WAAWrzB,KAAKizB,KAChFkL,EAAyBlL,EAASmL,WAAW14C,UAAU,WAAM,MAAA1J,GAAKqiD,gBAAgBpL,IAExFp7C,MAAKimD,kBAAkB11C,IAAI6qC,GAAWA,SAAlDA,EAA4DgL,sBAA5DA,EAAmFE,uBAAnFA,MAIIzN,EAAJt4C,UAAA4lD,cAAI,SAAc/K,GACV,MAAOp7C,MAAKimD,kBAAkBrkB,IAAIwZ,IAItCvC,EAAJt4C,UAAA8nB,SAAI,WAGI,IAFR,GAAY+iB,GAAIprC,KAAKw7C,WAAWl+B,OAEjB8tB,KACHprC,KAAKw7C,WAAWpQ,GAAG1kB,SAInBmyB,EAAZt4C,UAAAimD,gBAAI,SAAwBpL,GAC5B,GAAc1xB,GAAQ1pB,KAAKw7C,WAAWz/B,QAAQq/B,EAElC1xB,IAAS,IACT1pB,KAAKw7C,WAAW7xB,OAAOD,EAAO,GAEzB1pB,KAAKw7C,WAAWl+B,QACjBtd,KAAKy7C,cAAcvxC,wBA3DnC1L,KAACorB,EAAAA,iDA0BDprB,KAAuDq6C,EAAvD7wC,aAAAxJ,KAAS+T,EAAAA,WAAT/T,KAAqBsrB,EAAAA,cAqCrB+uB,mBClEA,QAAA6B,MAwCA,MAAAA,MC5CA+L,GAAA,WAGI,QAAJA,GAAwBC,GAAA1mD,KAAxB0mD,SAAwBA,EAChB1mD,KAAK2mD,cAAgBh1C,GAAI,EAAGC,GAAI,GAChC5R,KAAK4mD,sBAYb,MATIH,GAAJlmD,UAAAsmD,qBAAI,WACI,MAAO7mD,MAAK2mD,cAGhBF,EAAJlmD,UAAAqmD,oBAAI,WAAA,GAAJziD,GAAAnE,IACQA,MAAK0mD,SAASl2C,iBAAiB,QAAS,SAAC5K,GACrCzB,EAAKwiD,cAAgBh1C,EAAG/L,EAAMkhD,QAASl1C,EAAGhM,EAAMmhD,YAG5DN,KAEAO,GAAe,GAAIP,IAAUC,Ude7BjM,GAAA,SAAA12C,GAuHI,QAAJ02C,GACgB9uC,EACA7L,EACAmnD,EACAlnD,EACA41C,EACAuR,EACA3L,EACA4L,EACkBT,GAT9B,GAAJviD,GAWQJ,EAXRK,KAAApE,OAAAA,WACgBmE,GAAhBwH,QAAgBA,EACAxH,EAAhBrE,SAAgBA,EACAqE,EAAhB8iD,IAAgBA,EACA9iD,EAAhBpE,WAAgBA,EACAoE,EAAhBwxC,cAAgBA,EACAxxC,EAAhB+iD,0BAAgBA,EACA/iD,EAAhBo3C,aAAgBA,EACAp3C,EAAhBgjD,eAAgBA,EACkBhjD,EAAlCuiD,SAAkCA,EAlHrBviD,EAAb40C,YAAsC,UAYlC50C,EAAJgF,YAAiB,EAEHhF,EAAd2E,gBAAgC,GAAIjE,GAAAA,aAEvBV,EAAb80C,SAAgC,IACnB90C,EAAb+0C,QAAwC,IAK3B/0C,EAAbm1C,cAAqC,EAKjCn1C,EAAJijD,aAAkB,EAKdjjD,EAAJkjD,SAAc,EAKVljD,EAAJmjD,iBAAsB,EAMRnjD,EAAdy1C,YAA4B,GAAI/0C,GAAAA,aAElBV,EAAd01C,aAA6B,GAAIh1C,GAAAA,aAIpBV,EAAb41C,SAAwB,UAKpB51C,EAAJojD,cAAmB,EAEIpjD,EAAvB81C,OAAsE,GAAIp1C,GAAAA,aAMtEV,EAAJqjD,kBAAuB,EAEArjD,EAAvBi2C,WAA0E,GAAIv1C,GAAAA,aAU1EV,EAAJmtB,gBAAsB,cA6CTntB,EAAbq2C,eAA2F,WAAM,MAAAr2C,GAAKwH,QAAQuC,YAoV9G,MA/cwD/I,GAAxDs1C,EAAA12C,GAYI1D,OAAJC,eACQm6C,EADRl6C,UAAA,iBAAI,WACkB,MAAOP,MAAKmJ,gBAC9B,SAAc7H,GAAStB,KAAKmJ,WAAa7H,mCAczCjB,OAAJC,eACQm6C,EADRl6C,UAAA,kBAAI,WACmB,MAAOP,MAAKonD,iBAC/B,SAAe9lD,GAAStB,KAAKonD,YAAc9lD,mCAG3CjB,OAAJC,eACQm6C,EADRl6C,UAAA,cAAI,WACe,MAAOP,MAAKqnD,aAC3B,SAAW/lD,GAAStB,KAAKqnD,QAAU/lD,mCAGnCjB,OAAJC,eACQm6C,EADRl6C,UAAA,sBAAI,WACuB,MAAOP,MAAKsnD,qBACnC,SAAmBhmD,GAAStB,KAAKsnD,gBAAkBhmD,mCAenDjB,OAAJC,eACQm6C,EADRl6C,UAAA,mBAAI,WACoB,MAAOP,MAAKunD,kBAChC,SAAgBjmD,GAAStB,KAAKunD,aAAejmD,mCAM7CjB,OAAJC,eACQm6C,EADRl6C,UAAA,uBAAI,WACwB,MAAOP,MAAKwnD,sBACpC,SAAoBlmD,GAAStB,KAAKwnD,iBAAmBlmD,mCAgBrDjB,OAAJC,eAAQm6C,EAARl6C,UAAA,iBAAI,WACI,MAAOP,MAAK45C,YAAYjwC,gDAI5BtJ,OAAJC,eAAQm6C,EAARl6C,UAAA,kBAAI,WACI,MAAOP,MAAK65C,aAAalwC,gDAG7BtJ,OAAJC,eAAQm6C,EAARl6C,UAAA,cAAI,WACI,MAAOP,MAAK85C,0CAGhBz5C,OAAJC,eAAQm6C,EAARl6C,UAAA,kBAAI,WACI,MAAOP,MAAKk6C,8CAIhB75C,OAAJC,eAAQm6C,EAARl6C,UAAA,cAAI,WACI,OAAQP,KAAK0K,YAAc1K,KAAKokB,gDAyBpCq2B,EAAJl6C,UAAAK,SAAI,WAGQZ,KAAKynD,YAAYznD,KAAKmuC,YACtBnuC,KAAK0nD,uBAAuB1nD,KAAc,WAI1CA,KAAK2nD,eAAe3nD,KAAKouC,YACzBpuC,KAAKouC,SAAWpuC,KAAK4nD,mBAAmB5nD,KAAa,WAIzDA,KAAK2nB,UAA2C,kBAAxB3nB,MAAKw6C,eAAgCx6C,KAAKw6C,iBAAmBx6C,KAAKw6C,eACtFx6C,KAAK2nB,oBAAqBkgC,aAC1B7nD,KAAK2nB,UAAU6Q,YAAYx4B,KAAKD,WAAWwB,eACpCvB,KAAK2nB,oBAAqBmgC,GAAAA,YAEjC9nD,KAAK2nB,UAAUtY,eAAempB,YAAYx4B,KAAKD,WAAWwB,eAI9DvB,KAAKu7C,aAAa2K,cAAclmD,OAQpCy6C,EAAJl6C,UAAA+W,YAAI,SAAY4S,GACJA,EAAQxf,WAER1K,KAAK+nD,yBAAyB/nD,KAAK0K,WAAYwf,EAAQxf,UAAUs9C,cAIzEvN,EAAJl6C,UAAAy1B,gBAAI,WAEQh2B,KAAKioD,qBACLjoD,KAAKs6C,cAAc4N,OAAOloD,KAAKioD,oBAAoBn8C,UAGnD9L,KAAKu6C,mBACJv6C,KAAKu6C,kBAA+B,cAAuBj1C,SAIpEm1C,EAAJl6C,UAAAyB,YAAI,WACQhC,KAAK2nB,oBAAqBmgC,GAAAA,YAC1B9nD,KAAK2nB,UAAU/X,WAIvB6qC,EAAJl6C,UAAAgnB,KAAI,WACIvnB,KAAKmoD,yBAAwB,IAGjC1N,EAAJl6C,UAAAmmB,MAAI,SAAMrI,GACFre,KAAKmoD,yBAAwB,EAAO9pC,IAIxCo8B,EAAJl6C,UAAAu0B,QAAI,SAAQzW,GACJre,KAAK0mB,MAAMrI,IAGfo8B,EAAJl6C,UAAA6nD,UAAI,WACIpoD,KAAKqoD,gBAAgB,OAGzB5N,EAAJl6C,UAAA+nD,cAAI,WACItoD,KAAKqoD,gBAAgB,WAGzB5N,EAAJl6C,UAAA46C,YAAI,WACI,MAAOn7C,OAGXy6C,EAAJl6C,UAAAgoD,uBAAI,WACI,MAAOvoD,MAAKioD,qBAGhBxN,EAAJl6C,UAAAioD,oBAAI,WACI,MAAOxoD,MAAKioD,qBAAuBjoD,KAAKioD,oBAAoBr3C,UAGhE6pC,EAAJl6C,UAAAkoD,WAAI,WACI,MAAOzoD,MAAKD,YAAcC,KAAKD,WAAWwB,eAG9Ck5C,EAAJl6C,UAAAmoD,YAAI,SAAYj6C,GAEJzO,KAAKw5C,QACLx5C,KAAKy5C,gBACJhrC,EAAa,OAAiByW,UAAUsa,SAAS,kBAClDx/B,KAAK0K,WAEL1K,KAAKqoD,gBAAgB,WAK7B5N,EAAJl6C,UAAAooD,YAAI,SAAYnqD,GACR,MAAOwB,MAAK+4C,cAAgBv6C,GAGhCi8C,EAAJl6C,UAAAsd,UAAI,SAAUjY,GAEFA,EAAMwK,UAAYC,EAAAA,QAAUrQ,KAAK2nB,WAAc3nB,KAAK2nB,oBAAqBmgC,GAAAA,aAEzE9nD,KAAK0mB,QACL9gB,EAAM4W,mBAKdi+B,EAAJl6C,UAAAqoD,gBAAI,WACQ5oD,KAAK0K,WACL1K,KAAKqoD,gBAAgB,WAM7B5N,EAAJl6C,UAAA8nD,gBAAI,SAAgB7pD,GAAhB,GAAJ2F,GAAAnE,KACcyH,GAAYohD,GAAI7oD,KAAKi6C,OAAQ6O,OAAQ9oD,KAAKo6C,YAAa57C,GACvDuqD,GAAeF,GAAI,cAAeC,OAAQ,mBAAoBtqD,EAEpE,IAAIiJ,YAAmB5C,GAAAA,aACnB4C,EAAQhB,KAAKzG,KAAKwoD,2BACf,IAAuB,kBAAZ/gD,GAAwB,CAElD,GAAkB4W,GAAS5W,EAAQzH,KAAKwoD,uBAEtBQ,EAAY,SAACC,GAAiC,OAAa,IAAZA,GAAsB9kD,EAAKuiB,MAAK,GAErF,IAAIwiC,EAAU7qC,GAAS,CACnBre,KAAK+oD,IAAc,CACnC,IAAsBI,GAAa,SAACF,GAChB9kD,EAAK4kD,IAAc,EACnBC,EAAUC,GAEd,GAA0BjvB,KAAKmvB,GAAYC,MAAMD,OAEjDH,GAAU3qC,KAMtBo8B,EAAJl6C,UAAA4hD,iBAAI,SAAiB7gD,GACb,MAAwB,gBAAVA,IAAgC,KAAVA,GAIxCm5C,EAAJl6C,UAAA2hD,cAAI,SAAc5gD,GACV,MAAOA,aAAiBwI,GAAAA,aAI5B2wC,EAAJl6C,UAAAknD,YAAI,SAAYnmD,GACR,MAAOA,aAAiB+nD,GAAAA,MAI5B5O,EAAJl6C,UAAAonD,eAAI,SAAermD,GACX,MAAO24B,OAAMC,QAAQ54B,IAAUA,EAAMgc,OAAS,GAI1Cm9B,EAAZl6C,UAAAwnD,yBAAI,SAAiC99C,EAAkBq/C,EAA2BC,GAA9E,GAAJplD,GAAAnE,IAMQ,YANR,KAAAspD,IAAuDA,GAAvD,GAEYr/C,GACAjK,KAAKwpD,mBAAmB,GAGrB1vB,QACFC,QAAQuvB,GAAatpD,KAAKypD,UAAUx/C,IAEpC+vB,KAAK,WACE/vB,EACA9F,EAAKy1C,YAAYnzC,QAEjBtC,EAAK01C,aAAapzC,KAAK8iD,GAEvBplD,EAAKqlD,yBAQrB/O,EAAJl6C,UAAAmpD,sBAAI,SAAsB98B,EAAiC+8B,GAC3D,GAAcroD,GAAQsrB,EAAQ+8B,GAChBjrD,IAKN,OAJIsB,MAAKioD,qBACLvpD,EAAKypB,KAAKnoB,KAAKioD,oBAAoBr3C,UAGf,kBAAVtP,GAAuBA,EAAMgzB,MAAM1H,EAASluB,GAAQ4C,GAMtEm5C,EAAJl6C,UAAAqpD,cAAI,SAAcC,GAElB,GAAcxrC,GAASre,KAAK0pD,sBAAsBG,EAAQ,UAC9CX,GAAU7qC,KACVwrC,EAAOC,SAAU,EACjB,EAAwB9vB,KAAK,WAAM,MAAA6vB,GAAOC,SAAU,IAAOV,MAAM,WAAM,MAAAS,GAAOC,SAAU,MAKxFrP,EAAZl6C,UAAA4nD,wBAAI,SAAgCl+C,EAAkBs/C,GAC9C,MAAIvpD,MAAK0K,YAAcT,GAEnBjK,KAAK0K,UAAYT,EACjBjK,KAAK8I,gBAAgBrC,KAAKwD,GAEnBjK,KAAK+nD,yBAAyB99C,GAAS,EAAMs/C,IAGjDzvB,QAAQC,WAGX0gB,EAAZl6C,UAAAwpD,qBAAI,SAA6B5oD,UACzBnB,MAAKokB,eAAiBjjB,EAClBA,GACAnB,KAAKgqD,uBAAjBv4C,KACgBA,EAAC,QAAQtQ,IAAU,EACnBsQ,EAAC,QAAQtQ,EAAzB,YAA0C,EAC1CsQ,GACYzR,KAAKiqD,wBAAjB5G,KACgBA,EAAC,QAAQliD,IAAU,EACnBkiD,EAAC,QAAQliD,EAAzB,YAA0C,EAC1CkiD,IAGYrjD,KAAKgqD,sBAAwBhqD,KAAKiqD,uBAAyB,KAG3DjqD,KAAKioD,oBACLjoD,KAAKioD,oBAAoBjkC,kBAAkB5e,eAE3CpF,KAAKmnD,eAAe/hD,gBAIpBq1C,EAAZl6C,UAAAkpD,UAAI,SAAkBrH,GAAlB,GAAJj+C,GAAAnE,IAWQ,OATIoiD,IAGAtqC,OAAOrN,WAAW,WAAM,MAAAtG,GAAK+lD,0BAGjClqD,KAAK+pD,qBAAqB3H,EAAY,QAAU,SAGzC,GAAItoB,SAAQ,SAACC,GAAY,MAAAjiB,QAAOrN,WAAW,WAC9CtG,EAAK4lD,qBAAqB,MAC1BhwB,KApZ0B,QAwZ1B0gB,EAAZl6C,UAAAqnD,mBAAI,SAA2BuC,GACvB,MAAOA,GAAQtuC,IAAI,SAACguC,GAEhB,MAAZ14C,KAEoB3S,KAAM,UACNmC,KAAM,UACNypD,aAAa,EACbjgD,MAAM,EACN2/C,SAAS,EACTpqD,UAAU,GAEXmqD,MAUPpP,EAAZl6C,UAAAmnD,uBAAI,SAA+B2C,GACnC,GAAcC,GAAUtqD,KAAKinD,IAAIsD,wBAAwBF,GAC3CG,EAAgB3gC,EAAAA,SAAS3b,QAC3BvH,YAAaC,QAAS8zC,GAAY1Y,SAAUhiC,OAC5CgzC,OAAQhzC,KAAK21C,cAAc8U,gBAG/BzqD,MAAKioD,oBAAsBqC,EAAQp8C,OAAOs8C,GAEtCxqD,KAAKg5C,mBACL34C,OAAOg7C,OAAOr7C,KAAKioD,oBAAoBr3C,SAAU5Q,KAAKg5C,mBAK1Dh5C,KAAKioD,oBAAoBjkC,kBAAkBc,iBAMvC21B,EAAZl6C,UAAA2pD,sBAAI,WACJ,GAAcQ,GAAe1qD,KAAKq6C,eAA4B,cAChDsM,EAAeF,GAAUI,sBAE3BF,KAEA3mD,KAAKsxB,gBAAqBq1B,EAAah1C,EAAI+4C,EAAa9kB,WAApE,OAAoF+gB,EAAa/0C,EAAI84C,EAAa7yB,WAAlH,WAQY4iB,EAAZl6C,UAAAipD,mBAAI,SAA2BmB,OAA/B,KAAAA,IAA+BA,EAA/B,GAC2B3qD,KAAKu7C,aAAaC,WAEtBl+B,OAASqtC,EAAU,GAE9B3qD,KAAKF,SAASe,SAASb,KAAK0mD,SAASkE,KAAM,gBAAoB5qD,KAAKknD,0BAA0B2D,eAA1G,MACY7qD,KAAKF,SAASe,SAASb,KAAK0mD,SAASkE,KAAM,WAAY,YAEvD5qD,KAAKF,SAASgC,YAAY9B,KAAK0mD,SAASkE,KAAM,iBAC9C5qD,KAAKF,SAASgC,YAAY9B,KAAK0mD,SAASkE,KAAM,6BAtd1DpsD,KAACC,EAAAA,UAADC,OACIC,SAAU,WACVG,SAAJ,quHACID,QAAS;smGACTK,gBAAiBC,EAAAA,wBAAwBC,OACzCL,cAAeC,EAAAA,kBAAkBC,KACjCiI,MACI8K,YAAa,6DAvBrBxT,KAAS+M,EAAAA,UART/M,KAAIe,EAAAA,YAXJf,KAAI+mC,EAAAA,2BAEJ/mC,KAAIa,EAAAA,aAcJb,KAAI2T,EAAAA,mBAIJ3T,KAASo6C,KAGTp6C,KAASq6C,KAzBTr6C,KAA4CsJ,EAAAA,oBAqK5CtJ,SAAA4T,GAAApK,aAAAxJ,KAAS6T,EAAAA,OAAT3T,MAAgBo6C,EAAAA,iCAlHhBC,cAAAv6C,KAAKiB,EAAAA,QAEL0uC,YAAA3vC,KAAKiB,EAAAA,QAELu5C,oBAAAx6C,KAAKiB,EAAAA,QAEL2uC,WAAA5vC,KAAKiB,EAAAA,QAELiL,YAAAlM,KAAKiB,EAAAA,QAMLqJ,kBAAAtK,KAAK2J,EAAAA,SAEL8wC,WAAAz6C,KAAKiB,EAAAA,QACLy5C,UAAA16C,KAAKiB,EAAAA,QACL05C,kBAAA36C,KAAKiB,EAAAA,QACL25C,cAAA56C,KAAKiB,EAAAA,QACL45C,UAAA76C,KAAKiB,EAAAA,QACLoL,UAAArM,KAAKiB,EAAAA,QACL65C,eAAA96C,KAAKiB,EAAAA,QAEL85C,aAAA/6C,KAAKiB,EAAAA,QAKL+5C,SAAAh7C,KAAKiB,EAAAA,QAKLg6C,iBAAAj7C,KAAKiB,EAAAA,QAKLi6C,cAAAl7C,KAAKiB,EAAAA,QACLk6C,cAAAn7C,KAAKiB,EAAAA,QAGLm6C,cAAAp7C,KAAK2J,EAAAA,SAEL0xC,eAAAr7C,KAAK2J,EAAAA,SAGL2xC,WAAAt7C,KAAKiB,EAAAA,QACLs6C,WAAAv7C,KAAKiB,EAAAA,QAELu6C,cAAAx7C,KAAKiB,EAAAA,QAKLw6C,SAAAz7C,KAAKiB,EAAAA,QAALjB,KAAc2J,EAAAA,SACd+xC,eAAA17C,KAAKiB,EAAAA,QAEL06C,kBAAA37C,KAAKiB,EAAAA,QAKL26C,aAAA57C,KAAKiB,EAAAA,QAALjB,KAAc2J,EAAAA,SAEdkyC,iBAAA77C,KAAK0J,EAAAA,UAALxJ,MAAe,oBACf47C,gBAAA97C,KAAK0J,EAAAA,UAALxJ,MAAe,iBAAmBglC,KAAMvxB,EAAAA,qBAExCooC,oBAAA/7C,KAAK0J,EAAAA,UAALxJ,MAAe,qBAAuBglC,KAAMrkC,EAAAA,eAkD5Cm7C,iBAAAh8C,KAAKiB,EAAAA,SAoVLg7C,GA/cwDC,IC9CxDC,GAAA,WAAA,QAAAA,MASA,MALIA,GAAJp6C,UAAA+iB,UAAI,SAAUhiB,EAAwBs5C,OAAtC,KAAAA,IAAsCA,EAAtC,KACA,IAAcC,IAAav5C,CAEnB,OAAOsf,OAAMi6B,GAAa,GAAGv5C,EAAU,GAAGu5C,EAAYD,kBAP9Dp8C,KAACs8C,EAAAA,KAADp8C,OACIgG,KAAM,gBAQVi2C,mBCUI,QAAJI,GAAwBpvC,EAAkBihB,OAA1C,KAAAA,IAA0CA,KAAtC,IAAJzoB,GAAAnE,IAAwBA,MAAxB2L,QAAwBA,EAChB3L,KAAKg7C,cAEC,kBAAoBpuB,KACtBA,EAAQ4tB,mBAAiBpoC,IAG7BpS,KAAKi7C,YAAYruB,GACjB5sB,KAAa,SAAE4Q,SAAS2W,OACxBvnB,KAAa,SAAE4Q,SAASipC,aAAahsC,UAAU,WAAM,MAAA1J,GAAK+2C,iBAE1Dl7C,KAAK+M,WAAW0Z,gBAEX9Y,KAAKwY,EAAAA,OAAO,SAACvgB,GACV,MAAOA,GAAMwK,UAAYC,EAAAA,QAAUuc,EAAQ0sB,gBAE9CzrC,UAAU,WAAM,MAAA1J,GAAa,SAAEyM,SAAS8V,UA0BrD,MAvBIq0B,GAAJx6C,UAAA46C,YAAI,WACI,MAAOn7C,MAAKo7C,UAAYp7C,KAAKo7C,SAASxqC,UAG1CmqC,EAAJx6C,UAAA26C,aAAI,WACQl7C,KAAKo7C,WACLp7C,KAAK+M,WAAW6C,UAChB5P,KAAKo7C,SAAW,OAIhBL,EAAZx6C,UAAA06C,YAAI,SAAoBruB,GACZ5sB,KAAKo7C,UAEL/6C,OAAOg7C,OAAOr7C,KAAKo7C,SAASxqC,SAAUgc,IAKtCmuB,EAAZx6C,UAAAy6C,YAAI,WACIh7C,KAAK+M,WAAa/M,KAAK2L,QAAQuC,SAC/BlO,KAAKo7C,SAAWp7C,KAAK+M,WAAW4D,OAAO,GAAID,GAAAA,gBAAgB+pC,MAEnEM,KAEAO,GAAA,WAWI,QAAJA,GACgB3vC,EACA4vC,GADAv7C,KAAhB2L,QAAgBA,EACA3L,KAAhBu7C,aAAgBA,EAiEhB,MA3EIl7C,QAAJC,eAAQg7C,EAAR/6C,UAAA,kBAAI,WACI,MAAOP,MAAKu7C,aAAaC,4CAG7Bn7C,OAAJC,eAAQg7C,EAAR/6C,UAAA,qBAAI,WACI,MAAOP,MAAKu7C,aAAaE,cAAc9xC,gDAS3C2xC,EAAJ/6C,UAAA8nB,SAAI,WACIroB,KAAKu7C,aAAalzB,YAGtBizB,EAAJ/6C,UAAA2N,OAAI,SAAU0e,GAkBN,WAlBR,KAAAA,IAAcA,MAE4B,kBAAvBA,GAAQwtB,aAGfxtB,EAAQwtB,WAAa,cAGnB,gBAAkBxtB,KACpBA,EAAQ0sB,cAAe,GAIrB,WAAa1sB,KAEfA,EAAQssB,QAAU,KAGf,GAAI6B,IAAuB/6C,KAAK2L,QAASihB,GAASuuB,eAG7DG,EAAJ/6C,UAAAm7C,QAAI,SAAW9uB,EAA0C+uB,GAgBjD,WAhBR,KAAA/uB,IAAeA,UAAf,KAAA+uB,IAAyDA,EAAzD,WACY,YAAc/uB,IACd6N,QAAQC,KAAK,iFAIa,kBAAnB9N,GAAQqtB,SAGfrtB,EAAQqtB,OAAS,cAGrBrtB,EAAQmsB,YAAc,UACtBnsB,EAAQwsB,YAAc,yBAAyBuC,EAAvD,KAAsE/uB,EAAQwsB,aAAe,IACrFxsB,EAAQ6sB,gBAAiB,EAElBz5C,KAAKkO,OAAO0e,IAGvB0uB,EAAJ/6C,UAAAq7C,QAAI,SAAWhvB,GACP,WADR,KAAAA,IAAeA,MACA5sB,KAAK67C,cAAcjvB,EAAS,YAGvC0uB,EAAJ/6C,UAAAu7C,OAAI,SAAUlvB,GACN,WADR,KAAAA,IAAcA,MACC5sB,KAAK67C,cAAcjvB,EAAS,SAG/B0uB,EAAZ/6C,UAAAs7C,cAAI,SAAyBjvB,EAA0C+uB,GAO/D,WAPR,KAAA/uB,IAA6BA,MAEf,gBAAkBA,KAEpBA,EAAQstB,aAAe,MAGpBl6C,KAAK07C,QAAQ9uB,EAAS+uB,mBA5ErCn9C,KAACorB,EAAAA,iDA5DDprB,KAAS+M,EAAAA,UAGT/M,KAASq6C,MAuITyC,KCnIAS,GAAA,WAAA,QAAAA,MAO6B,sBAP7Bv9C,KAACsE,EAAAA,SAADpE,OACIqE,SAAWC,EAAAA,aAAc8P,EAAAA,cAAekpC,GAAgB/4C,IACxDC,SAAWu3C,IACXt3C,cAAgBs3C,GAAkBE,IAClC5nC,iBAAmB0nC,IACnB9zC,WAAakyC,GAAuByC,QAExCS,KCOME,GAAsB,sBACtBC,GAAiB,iBACjBC,GAAkB,kBAClBC,GAAkB,kBAUxBC,GAAA,WAAA,QAAAA,MAM2B,sBAN3B79C,KAACkD,EAAAA,UAADhD,OACIC,SAVmB,iBAWnBuI,MACIC,MAZe,sBAevBk1C,KAEAC,GAAA,WAAA,QAAAA,MAM4B,sBAN5B99C,KAACkD,EAAAA,UAADhD,OACIC,SAAUw9C,GACVj1C,MACIC,MAAOg1C,QAGfG,KAEAC,GAAA,WAAA,QAAAA,MAM4B,sBAN5B/9C,KAACkD,EAAAA,UAADhD,OACIC,SAAUy9C,GACVl1C,MACIC,MAAOi1C,QAGfG,KAEAC,GAAA,WACI,QAAJA,GAAuBl5C,GAAAtD,KAAvBsD,YAAuBA,EACvB,MAAAk5C,MAEaC,GAA+D/4C,EAAc84C,IAE1FE,GAAA,SAAA34C,GA2EI,QAAJ24C,GACgB38C,EACAiE,EACA24C,EACAC,GAJZ,GAAJz4C,GAMQJ,EANRK,KAAApE,KAMcD,IANdC,WACgBmE,GAAhBpE,WAAgBA,EACAoE,EAAhBH,cAAgBA,EACAG,EAAhBw4C,UAAgBA,EACAx4C,EAAhBy4C,OAAgBA,EAjCZz4C,EAAJD,SAAuB,EAGnBC,EAAJ04C,iBAiBI14C,EAAJ24C,aAA2B,EAEf34C,EAAZ44C,cAA0C,GAAI3Y,GAAAA,eA8G9C,MAvIkCj/B,GAAlCu3C,EAAA34C,GAQI1D,OAAJC,eACQo8C,EADRn8C,UAAA,sBAAI,SACmBe,GACftB,KAAKD,WAAWwB,cAAcE,aAAa,gBAAiBu7C,UAAU17C,qCAS1EjB,OAAJC,eAAQo8C,EAARn8C,UAAA,0BAAI,WACI,MAAOP,MAAK68C,cAAcv/B,OAAS,mCAQvCjd,OAAJC,eAAgBo8C,EAAhBn8C,UAAA,yBAAI,WACI,MAAOP,MAAKi9C,gBAAkBj9C,KAAKi9C,gBAAgB17C,cAAck3B,iBAAiB,8CAYtFikB,EAAJn8C,UAAAK,SAAI,WACIZ,KAAKk9C,sBAELl9C,KAAKm9C,eAAiBn9C,KAAKgE,cAAckB,QAAQlF,KAAKD,WAAWwB,eAAe,GAE5EvB,KAAKo9C,oBACLp9C,KAAKq9C,sBAIbX,EAAJn8C,UAAAy1B,gBAAI,WACSh2B,KAAKo9C,oBAIVp9C,KAAKs9C,iCAGTZ,EAAJn8C,UAAAyB,YAAI,WACIhC,KAAK+8C,cAAcxlC,cACnBvX,KAAKgE,cAAcqB,eAAerF,KAAKD,WAAWwB,eAClDvB,KAAKu9C,gCAGTb,EAAJn8C,UAAAi9C,qBAAI,SAAqBC,GACjB,QAAKz9C,KAAK28C,UAAUe,WAIb5lC,OAAO6lC,SAASC,KAAK7hC,QAAQ0hC,IAAS,GAGjDf,EAAJn8C,UAAAs9C,kBAAI,WACI79C,KAAK89C,kBAGTpB,EAAJn8C,UAAA2P,cAAI,SAAczB,GAClB,GAAcsvC,GAAgBtvC,EAAa,OAAiByW,UAAUsa,SAAS0c,GAGnEl8C,MAAKo9C,oBAAsB3uC,EAAO2B,UAAY4oB,EAAAA,OAAS+kB,GACvD/9C,KAAK89C,kBAIbpB,EAAJn8C,UAAAy9C,0BAAI,WACIh+C,KAAKi+C,sBAGDvB,EAAZn8C,UAAA88C,mBAAI,WAAA,GAAJl5C,GAAAnE,IACQA,MAAK+8C,cAAc53B,IACfnlB,KAAKm9C,eAAetvC,UAAU,SAACmD,GACZ,OAAXA,GACA7M,EAAK85C,yBAMbvB,EAAZn8C,UAAAu9C,eAAI,WACI99C,KAAK88C,aAAe98C,KAAK88C,aAGrBJ,EAAZn8C,UAAA09C,mBAAI,WACIj+C,KAAK88C,aAAc,EACnB98C,KAAK48C,OAAO93B,iBAGR43B,EAAZn8C,UAAA+8C,8BAAI,WAAA,GAAJn5C,GAAAnE,IACQA,MAAKk+C,kBAAkBruC,QAAQ,SAACsuC,GAC5Bh6C,EAAKH,cAAckB,QAAQi5C,GAAI,MAI/BzB,EAAZn8C,UAAAg9C,6BAAI,WAAA,GAAJp5C,GAAAnE,IACQA,MAAKk+C,kBAAkBruC,QAAQ,SAACsuC,GAC5Bh6C,EAAKH,cAAcqB,eAAe84C,MAKlCzB,EAAZn8C,UAAA28C,oBAAI,WAAA,GAAJ/4C,GAAAnE,KACco+C,EAAkBp+C,KAAKD,WAAWwB,cAAc88C,eAAe,QAErED,GAAOvuC,QAAQ,SAACjK,GAAU,MAAAzB,GAAKpE,WAAWwB,cAAcwO,oBAAoB,QAASnK,KAErF5F,KAAKD,WAAWwB,cAAciP,iBAAiB,QAAS,SAAC5K,GACjDzB,EAAKpE,WAAWwB,cAAc06B,aAAa,aAC3Cr2B,EAAM04C,6BAEX,GAEHF,EAAOvuC,QAAQ,SAACjK,GAAU,MAAAzB,GAAKpE,WAAWwB,cAAciP,iBAAiB,QAAS5K,qBAhL1FpH,KAACC,EAAAA,UAADC,OACIC,SAAUu9C,GACVp9C,SAAU,suCAiCVC,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,OACzC6H,QAAS,YACTC,MACIoM,kBAAmB,mBACnBC,kBAAmB,8CAxG3B/U,KAAIa,EAAAA,aAYJb,KAASqJ,EAAAA,eAETrJ,KAAS+/C,EAAAA,WANT//C,KAAIsJ,EAAAA,uCAqGJ5D,WAAA1F,KAAKiB,EAAAA,QAGLo9C,gBAAAr+C,KAAKiB,EAAAA,QAGL++C,iBAAAhgD,KAAKiB,EAAAA,QAKLg/C,mBAAAjgD,KAAKk0B,EAAAA,aAALh0B,MAAkB,oBAAsBglC,KAAM55B,EAAAA,gBAG9CmzC,kBAAAz+C,KAAK0J,EAAAA,UAALxJ,MAAe,mBAAqBglC,KAAMrkC,EAAAA,gBAuH1Cq9C,GAvIkCD,IAyIlCiC,GAAA,WAAA,QAAAA,KAKI1+C,KAAJiN,SAA8C,OAM9C,MAJI5M,QAAJC,eACQo+C,EADRn+C,UAAA,kBAAI,WAEI,MAAyB,SAAlBP,KAAKiN,SAAsB,iBAAmB,kEAT7DzO,KAACkD,EAAAA,UAADhD,OACIC,SAAUs9C,yBAGdhvC,WAAAzO,KAAKiB,EAAAA,QAGLk/C,aAAAngD,KAAKmU,EAAAA,YAALjU,MAAiB,YAIjBggD,KAEAE,GAAA,WAGI,QAAJA,GACervC,EACAohB,GADA3wB,KAAfuP,QAAeA,EACAvP,KAAf2wB,MAAeA,EAJH3wB,KAAZ6+C,YAAkC,EAqBlC,MAdID,GAAJr+C,UAAAu+C,iBAAI,SAAiBC,GACb/+C,KAAK6+C,WAAaE,EAElB/+C,KAAKg/C,wBAGDJ,EAAZr+C,UAAAy+C,qBAAI,WACQh/C,KAAK6+C,WACL7+C,KAAKuP,QAAQ2V,UAAUC,IA/PH,6BAiQpBnlB,KAAKuP,QAAQ2V,UAAUqT,OAjQH,8BAqQhCqmB,KAEAK,GAAA,WAkBI,QAAJA,GACe1vC,EACAohB,EACAuuB,OAAf,KAAAA,IAAeA,MAFAl/C,KAAfuP,QAAeA,EACAvP,KAAf2wB,MAAeA,EACA3wB,KAAfk/C,iBAAeA,EA+Bf,MAlDI7+C,QAAJC,eAAQ2+C,EAAR1+C,UAAA,mBAAI,WACI,MAAOP,MAAKk/C,iBAAiB5hC,OAAS,mCAK1Cjd,OAAJC,eAAQ2+C,EAAR1+C,UAAA,2BAAI,WACI,WAAkC6R,KAA9BpS,KAAKm/C,qBACEn/C,KAAKm/C,sBAGhBn/C,KAAKo/C,uCAEEp/C,KAAKm/C,uDAShBF,EAAJ1+C,UAAAu+C,iBAAI,SAAiBC,GACT/+C,KAAKk/C,iBAAiB5hC,OAAS,GAC/Btd,KAAKq/C,YAAYN,GAGrB/+C,KAAKk/C,iBAAiBrvC,QAAQ,SAACic,GAAS,MAAAA,GAAKgzB,iBAAiBC,MAG1DE,EAAZ1+C,UAAA6+C,qCAAI,WACIp/C,KAAKm/C,qBAAuBn/C,KAAKk/C,iBAC5BpwB,OAAO,SAACwwB,EAAKxzB,GAAS,MAAAwzB,GAAMxzB,EAAK6E,OAAO,IAGzCsuB,EAAZ1+C,UAAAg/C,SAAI,WACJ,GAAcC,GAAgBx/C,KAAKuP,QAAQkwC,aAAa,gBAEhD,OAAOD,GACDE,UAAUF,GACTx/C,KAAKk/C,iBAAiB5hC,OAAS,EAAItd,KAAKk/C,iBAAiB,GAAG3vC,QAAQowC,UAAY,IAGnFV,EAAZ1+C,UAAA8+C,YAAI,SAAoBN,GACZA,EACA/+C,KAAKuP,QAAQ9N,aAAa,QAASzB,KAAKu/C,YAExCv/C,KAAKuP,QAAQqwC,gBAAgB,UAGzCX,KAGAY,GAAA,WAmDI,QAAJA,GACgBv8C,GAAAtD,KAAhBsD,YAAgBA,EAvCKtD,KAArB8/C,4BAA2D,EACtC9/C,KAArB+/C,uBAAsD,IACjC//C,KAArBggD,kBAAiD/D,GAC5Bj8C,KAArBigD,qBACQ/D,GACAC,GACAC,GAmCR,IAAc8D,GAAiBnpC,EAAAA,UAAUe,OAAQ,UACpCnK,KAAKwyC,EAAAA,aAAangD,KAAK+/C,wBAE5B//C,MAAKogD,oBAAsBF,EAAeryC,UAAU7N,KAAKqgD,gBAAgBnpC,KAAKlX,OA4DtF,MA5FIK,QAAJC,eAAgBu/C,EAAhBt/C,UAAA,uBAAI,WACI,MAAOP,MAAKsD,YAAY/B,cAAcy2B,cAAc,OAAO9H,wBAAwBS,uCAGvFtwB,OAAJC,eAAgBu/C,EAAhBt/C,UAAA,mBAAI,WACI,WAA0B6R,KAAtBpS,KAAKsgD,cAA+BtgD,KAAK8/C,4BAI7C9/C,KAAKugD,8BAEEvgD,KAAKsgD,cALDtgD,KAAKsgD,8CAQpBjgD,OAAJC,eAAgBu/C,EAAhBt/C,UAAA,uBAAI,WACI,WAA+B6R,KAA3BpS,KAAKwgD,mBAAoCxgD,KAAK8/C,4BAIlD9/C,KAAKygD,mCAEEzgD,KAAKwgD,mBALDxgD,KAAKwgD,mDAmBpBX,EAAJt/C,UAAA8/C,gBAAI,WAGI,IAAK,GAFDK,GAAgB1gD,KAAKy3B,gBAAkBz3B,KAAK2gD,gBAEvCvV,EAAIprC,KAAK4gD,YAAYtjC,OAAS,EAAG8tB,GAAK,EAAGA,IAAK,CAC/D,GAAkBtf,GAAO9rB,KAAK4gD,YAAYxV,EAEzBtf,GAAK+0B,cAIV/0B,EAAKgzB,iBAAiB4B,EAAgB,GACtCA,GAAiB50B,EAAKg1B,uBAI9BjB,EAAJt/C,UAAAy1B,gBAAI,WAAA,GAAJ7xB,GAAAnE,IAGQyK,YAAW,WAAM,MAAAtG,GAAKk8C,mBAAmB,IAG7CR,EAAJt/C,UAAAyB,YAAI,WACIhC,KAAKogD,oBAAoB7oC,eAGrBsoC,EAAZt/C,UAAAkgD,iCAAI,WACIzgD,KAAKwgD,kBAAoBxgD,KAAK4gD,YACzB9xB,OAAO,SAACwwB,EAAKxzB,GAAS,MAAAwzB,GAAMxzB,EAAK6E,OAAO,IAGzCkvB,EAAZt/C,UAAAwgD,qBAAI,SAA6BxxC,GAKzB,MAJmBA,GAAQ2gB,wBAAwBS,MAC/B1rB,SAASxC,iBAAiB8M,GAASyxC,iBAAiB,iBACrD/7C,SAASxC,iBAAiB8M,GAASyxC,iBAAiB,iBAKnEnB,EAAZt/C,UAAAggD,4BAAI,WAAA,GAAJp8C,GAAAnE,KACcihD,EAAmBjhD,KAAKigD,oBACzBpkC,IAAI,SAAC1L,GAAc,MAAGhM,GAAK67C,kBAAxC,IAA6D7vC,IAC/C+wC,EAA0BjnB,MAAMknB,KAAKnhD,KAAKsD,YAAY/B,cAAck3B,iBAAiBwoB,GAE3FjhD,MAAKsgD,aAAeY,EACfrlC,IAAI,SAACsiC,GAAO,MAAA,IAAIc,IAAgBd,EAAIh6C,EAAK48C,qBAAqB5C,GAAKh6C,EAAKi9C,oBAAoBjD,OAG7F0B,EAAZt/C,UAAA6gD,oBAAI,SAA4B7xC,GAGxB,MAFaA,GAAQyoB,cAAc,6CAM5BiC,MAAMknB,KAAK5xC,EAAQkpB,iBAAiB2jB,KACtCvgC,IAAI,SAACsiC,GAAO,MAAA,IAAIS,IAAe,EAAmBT,EAAGjuB,wBAAwBS,4BAnH1FnyB,KAACC,EAAAA,UAADC,OACIC,SA7Tc,YA8TdO,gBAAiBC,EAAAA,wBAAwBC,OACzCN,SAAU,uEAEqBm9C,GAFnC,KAE2DA,GAF3D,wCAKIp9C,QAAS,u4DACTE,cAAeC,EAAAA,kBAAkBC,6CAzVrCT,KAAIa,EAAAA,cAqcJwgD,KCzbAwB,GAAA,WAAA,QAAAA,MAwB6B,sBAxB7B7iD,KAACsE,EAAAA,SAADpE,OACIqE,SACIC,EAAAA,aACAqF,EAAAA,WACA8L,EAAAA,eACAlR,IAEJC,SACI28C,GACAnB,GACAnC,GACAG,GACAJ,GACAD,IAEJl5C,cACI08C,GACAnB,GACAnC,GACAG,GACAJ,GACAD,QAGRgF,KChCaC,IAITC,aAAc95C,EAAAA,QAAQ,SAClBtG,EAAAA,MAAM,UAAWyB,EAAAA,OACb4+C,QAAS,EACTl+B,UAAW,mBAEf3b,EAAAA,WAAW,eAAgBC,EAAAA,QAAQ,mCAAoChF,EAAAA,OACnE4+C,QAAS,EACTl+B,UAAW,kBAEf3b,EAAAA,WAAW,cAAeC,EAAAA,QAAQ,eAAgBhF,EAAAA,OAAQ4+C,QAAS,StB2B3ElU,GAAA,WAiGI,QAAJA,GAAuBtpB,EAA6Cy9B,GAA7CzhD,KAAvBgkB,kBAAuBA,EAA6ChkB,KAApEyhD,oBAAoEA,EAnFhEzhD,KAAJ0I,UAA+Cg5C,GAA/C94C,QAEI5I,KAAJ2hD,kBAA2C,UACvC3hD,KAAJuJ,oBAAkC,EAKIvJ,KAAtC8I,gBAA+E,GAAIjE,GAAAA,aAQvE7E,KAAZiJ,WAAiC,QAarBjJ,KAAZkJ,aAAmC,MAyBvBlJ,KAAZmJ,WAAmD,GAAIC,GAAAA,iBAAyB,GAgBpEpJ,KAAZ4hD,cAWqB5hD,KAArBqJ,cAAmD,GAAIC,GAAAA,QAG/CtJ,KAAKwJ,mBAAqBC,GAwElC,MAlJIpJ,QAAJC,eAAQgtC,EAAR/sC,UAAA,iBAAI,WACI,MAAOP,MAAKiJ,gBAEhB,SAAc3H,GACVtB,KAAKiJ,WAAa3H,mCAItBjB,OAAJC,eAAQgtC,EAAR/sC,UAAA,mBAAI,WACI,MAAOP,MAAKkJ,kBAEhB,SAAgB5H,GACRA,IAAUtB,KAAKkJ,cACflJ,KAAKkJ,aAAe5H,EACpBtB,KAAK0I,UAAUqB,QAAQN,GAAczJ,KAAKgK,eAClC1I,IACRtB,KAAKkJ,aAAe,wCAK5B7I,OAAJC,eAAQgtC,EAAR/sC,UAAA,qBAAI,WACI,MAAOP,MAAK6hD,iBAEhB,SAAkBvgD,GACVA,IAAUtB,KAAK6hD,YACf7hD,KAAK6hD,YAAcvgD,EACXA,IACRtB,KAAK6hD,YAAc,2CAK3BxhD,OAAJC,eAAQgtC,EAAR/sC,UAAA,iBAAI,WACI,MAAOP,MAAKmJ,WAAW7H,WAE3B,SAAcA,GAClB,GAAc2I,GAAUzJ,EAAAA,sBAAsBc,EAElCtB,MAAKmJ,WAAW7H,QAAU2I,IAC1BjK,KAAKmJ,WAAWe,KAAKD,GACrBjK,KAAK8I,gBAAgBrC,KAAKwD,qCAKlC5J,OAAJC,eAAQgtC,EAAR/sC,UAAA,iBAAI,WACI,MAAOP,MAAK4hD,WAAW/zB,KAAK,UAEhC,SAAcvsB,GAClB,GAAYwgD,KAEA7nB,OAAMC,QAAQ54B,GACdwgD,EAAOxgD,EAEPwgD,EAAK35B,KAAK7mB,GAGdtB,KAAK4hD,WAAaE,mCAItBzhD,OAAJC,eAAQgtC,EAAR/sC,UAAA,yBAAI,WACI,MAAUP,MAAKklB,UAAvB,eAA+CllB,KAAKquC,cAApD,yBAA0FruC,KAAK+hD,mDAG3F1hD,OAAJC,eAAQgtC,EAAR/sC,UAAA,yBAAI,WACI,MAAOyhD,IAAoBhiD,KAAKgK,8CAUpCsjC,EAAJ/sC,UAAA4J,KAAI,WACQnK,KAAKiiD,sBACLjiD,KAAKuJ,oBAAqB,EAC1BvJ,KAAK2hD,kBAAoB,UAGzB3hD,KAAKoF,iBAIbkoC,EAAJ/sC,UAAAoK,KAAI,WACI3K,KAAK2hD,kBAAoB,SACzB3hD,KAAK8I,gBAAgBrC,MAAK,GAI1BzG,KAAKoF,gBAGTkoC,EAAJ/sC,UAAA0hD,kBAAI,WACI,QAASjiD,KAAKmuC,YAAcnuC,KAAKkiD,cAAcliD,KAAKmuC,YAAcnuC,KAAKmiD,iBAAiBniD,KAAKmuC,aAIjGb,EAAJ/sC,UAAAuK,YAAI,WACI,MAAO9K,MAAKqJ,cAAcM,gBAG9B2jC,EAAJ/sC,UAAA6hD,UAAI,WACI,MAAkC,YAA3BpiD,KAAK2hD,mBAGhBrU,EAAJ/sC,UAAA6E,aAAI,WACIpF,KAAKgkB,kBAAkB5e,gBAG3BkoC,EAAJ/sC,UAAA2hD,cAAI,SAAc5gD,GACV,MAAOA,aAAiBwI,GAAAA,aAG5BwjC,EAAJ/sC,UAAA4hD,iBAAI,SAAiB7gD,GACb,MAAwB,gBAAVA,IAAgC,KAAVA,GAGxCgsC,EAAJ/sC,UAAAwK,sBAAI,SAAsBoF,GACdnQ,KAAKuJ,qBAAuBvJ,KAAKyhD,oBAAoBlgD,cAAci+B,SAASrvB,EAAEmvB,SAC9Et/B,KAAK2K,QAIb2iC,EAAJ/sC,UAAA8hD,eAAI,WACQriD,KAAKuJ,oBAAqB,GAGlC+jC,EAAJ/sC,UAAA+pC,cAAI,SAAc1kC,GAClB,GAAcygB,GAAUzgB,EAAa,OAEb,YAAZygB,GAAyBrmB,KAAKoiD,aAC9BpiD,KAAKqJ,cAAca,OAGP,YAAZmc,GAAqC,WAAZA,IACzBrmB,KAAKuJ,oBAAqB,IAIlC+jC,EAAJ/sC,UAAAyB,YAAI,WACIhC,KAAKqJ,cAAc4G,2BAxK3BzR,KAACC,EAAAA,UAADC,OACIC,SAAU,aACVG,SAAJ,wgCACIF,qBAAqB,EACrBC,QAAS,+gHACTE,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,OACzCoI,YAAa85C,GAAoBC,cACjCr6C,MACIo7C,UAAW,oBACXp3C,eAAgB,yEAzDxB1M,KAAIsJ,EAAAA,oBAGJtJ,KAAIa,EAAAA,gCAkEJyJ,kBAAAtK,KAAK2J,EAAAA,OAALzJ,MAAY,6BAoJZ4uC,KAEaW,GACT,GAAI7iC,GAAAA,eAAsC,8BAQjCmjC,IACT3nC,QAASqnC,GACT3iC,MAAOC,EAAAA,SACPC,WAAY+2C,GAehBtV,GAAA,WAwKI,QAAJA,GACgBthC,EACA5L,EACA6L,EACAC,EACAC,EACoCC,EACxBvM,GANZQ,KAAhB2L,QAAgBA,EACA3L,KAAhBD,WAAgBA,EACAC,KAAhB4L,OAAgBA,EACA5L,KAAhB6L,iBAAgBA,EACA7L,KAAhB8L,SAAgBA,EACoC9L,KAApD+L,eAAoDA,EACxB/L,KAA5BR,UAA4BA,EArKxBQ,KAAJutC,eAA6B,EACzBvtC,KAAJqtC,kBAAuB,EAMertC,KAAtC8I,gBAAwD,GAAIjE,GAAAA,aA4ChD7E,KAAZmM,aAA2B,GAAI7C,GAAAA,QASnBtJ,KAAZE,WAAiC,EAkCrBF,KAAZiJ,WAAiC,QAcrBjJ,KAAZ6hD,YAAkC,SActB7hD,KAAZkJ,aAAmC,MAiCvBlJ,KAAZoM,gBAA8B,GAAIC,KACbrM,KAArBsM,UAAiC,GAAIhD,GAAAA,QAUzBtJ,KAAKwJ,mBAAqBC,GA4UtC,MAzeIpJ,QAAJC,eACQ2sC,EADR1sC,UAAA,gBAAI,WAEI,MAAOP,MAAKwiD,eAEhB,SAAalhD,GACTtB,KAAKwiD,UAAYlhD,EACjBtB,KAAKwM,gBAAgB,WAAYlL,GAE7BtB,KAAKutC,eACLvtC,KAAKqO,gBAAe,oCAK5BhO,OAAJC,eACQ2sC,EADR1sC,UAAA,iBAAI,WAEI,MAAOP,MAAKyiD,gBAEhB,SAAcnhD,GACVtB,KAAKyiD,WAAanhD,EAClBtB,KAAKwM,gBAAgB,YAAalL,GAE9BtB,KAAKutC,eACLvtC,KAAKqO,gBAAe,oCAK5BhO,OAAJC,eACQ2sC,EADR1sC,UAAA,gBAAI,WAEI,MAAOP,MAAK0iD,eAEhB,SAAaphD,GACTtB,KAAK0iD,UAAYphD,EACjBtB,KAAKwM,gBAAgB,WAAYlL,GAE7BtB,KAAKutC,eACLvtC,KAAKqO,gBAAe,oCAO5BhO,OAAJC,eACQ2sC,EADR1sC,UAAA,gBAAI,WAEI,MAAOP,MAAKE,eAEhB,SAAaoB,GACTtB,KAAKE,UAAYM,EAAAA,sBAAsBc,oCAI3CjB,OAAJC,eACQ2sC,EADR1sC,UAAA,yBAAI,WAEI,MAAOP,MAAKyM,wBAEhB,SAAsBnL,GAClBtB,KAAKyM,mBAAqBnL,EAC1BtB,KAAKwM,gBAAgB,oBAAqBlL,oCAI9CjB,OAAJC,eACQ2sC,EADR1sC,UAAA,yBAAI,WAEI,MAAOP,MAAK0M,wBAEhB,SAAsBpL,GAClBtB,KAAK0M,mBAAqBpL,EAC1BtB,KAAKwM,gBAAgB,oBAAqBlL,oCAI9CjB,OAAJC,eACQ2sC,EADR1sC,UAAA,iBAAI,WAEI,MAAOP,MAAKiJ,gBAEhB,SAAc3H,GACNA,GACAtB,KAAKiJ,WAAa3H,EAClBtB,KAAKwM,gBAAgB,YAAalL,IAElCtB,KAAKiJ,WAAa,yCAK1B5I,OAAJC,eACQ2sC,EADR1sC,UAAA,qBAAI,WAEI,MAAOP,MAAK6hD,iBAEhB,SAAkBvgD,IACVA,GAAoB,UAAVA,GAA+B,WAAVA,GAAgC,UAAVA,EAIrDtB,KAAK6hD,YAAc,UAHnB7hD,KAAK6hD,YAAcvgD,EACnBtB,KAAKwM,gBAAgB,gBAAiBlL,qCAO9CjB,OAAJC,eACQ2sC,EADR1sC,UAAA,mBAAI,WAEI,MAAOP,MAAKkJ,kBAEhB,SAAgB5H,GACRA,GACAtB,KAAKkJ,aAAe5H,EACpBtB,KAAKwM,gBAAgB,cAAelL,IAEpCtB,KAAKkJ,aAAe,uCAK5B7I,OAAJC,eACQ2sC,EADR1sC,UAAA,iBAAI,WAEI,MAAOP,MAAK4hD,gBAEhB,SAActgD,GACVtB,KAAK4hD,WAAatgD,EAClBtB,KAAKwM,gBAAgB,YAAaxM,KAAK4hD,6CAI3CvhD,OAAJC,eACQ2sC,EADR1sC,UAAA,iBAAI,WAEI,MAAOP,MAAKmJ,gBAEhB,SAAc0D,GAClB,GAAcvL,GAAQd,EAAAA,sBAAsBqM,EACpC7M,MAAKmJ,WAAa7H,EAClBtB,KAAKwM,gBAAgB,YAAalL,GAE9BA,EACAtB,KAAKmK,OAELnK,KAAK2K,wCAKbtK,OAAJC,eAAQ2sC,EAAR1sC,UAAA,cAAI,WACI,MAAOP,MAAKutC,+CAkBhBN,EAAJ1sC,UAAAuM,cAAI,WAAA,GAAJ3I,GAAAnE,IACQ,IAAIA,KAAK+M,WACL,MAAO/M,MAAK+M,UAIxB,IAAcC,GAAWhN,KAAK2L,QAAQsB,WACzBC,oBAAoBlN,KAAKD,YACzBoN,sBAAsB,eACtBC,wBAAuB,GACvBC,mBArMmB,GAsMnBC,cAAmBo0C,GAAhC94C,SAEc2E,EAAsBvN,KAAK6L,iBAC5B2B,4BAA4BxN,KAAKD,WA4BtC,OA1BAiN,GAASS,yBAAyBF,GAElCP,EAASU,gBAAgBC,KAAKC,EAAAA,UAAU5N,KAAKsM,YAAYuB,UAAU,SAACjJ,GAC5DT,EAAK4oC,UACL5oC,EAAK2J,iBAAiBlJ,GAClBA,EAAOmJ,yBAAyBC,kBAAoB7J,EAAK4oC,QAAQriC,WAGjEvG,EAAKyH,OAAOqC,IAAI,WAAM,MAAA9J,GAAKwG,YAKvC3K,KAAK+M,WAAa/M,KAAK2L,QAAQuC,QAC3B1O,UAAWQ,KAAKR,UAChB2O,iBAAkBnB,EAClBoB,WAAY,oBACZrC,eAAgB/L,KAAK+L,mBAGzB/L,KAAKqO,iBAELrO,KAAK+M,WAAWuB,cACXX,KAAKC,EAAAA,UAAU5N,KAAKsM,YACpBuB,UAAU,WAAM,MAAA1J,GAAKoK,WAEnBvO,KAAK+M,YAGhBkgC,EAAJ1sC,UAAAgO,OAAI,WACQvO,KAAK+M,YAAc/M,KAAK+M,WAAWyB,eAAiBxO,KAAK+sC,UACzD/sC,KAAK+M,WAAWwB,SAChBvO,KAAK+sC,QAAU,OAIvBE,EAAJ1sC,UAAAuN,iBAAI,SAAiBW,GAAjB,GAAJtK,GAAAnE,KACY0O,EAAmB1O,KAAKgK,WAC5B3J,QAAOsO,KAAK3O,KAAKwJ,oBAAoBoF,KAAK,SAACC,GACvC,MAAIJ,GAAOK,eAAeC,UAAY5K,EAAKqF,mBAAmBqF,GAAKE,SAC/DN,EAAOK,eAAeE,UAAY7K,EAAKqF,mBAAmBqF,GAAKG,SAC/DP,EAAOK,eAAeG,WAAa9K,EAAKqF,mBAAmBqF,GAAKI,UAChER,EAAOK,eAAeI,WAAa/K,EAAKqF,mBAAmBqF,GAAKK,WAChER,EAAmBG;iQAEZ,KAKf7O,KAAKwM,gBAAgB,cAAekC,GAEhC1O,KAAK+sC,UACL/sC,KAAKwM,gBAAgB,YAAaxM,KAAKklB,WACvCllB,KAAK+sC,QAAQ3nC,gBAGjBpF,KAAKgtC,wBAGTC,EAAJ1sC,UAAAysC,qBAAI,WACShtC,KAAK+M,aACN/M,KAAK+M,WAAa/M,KAAK8M,gBAGnC,IAAcogC,GAAiBltC,KAAK8L,SAASyD,QAAQhO,cAAc+N,aAAe,EACpE69B,EAAqBntC,KAAK8L,SAASyD,QAAQhO,cAAc6rC,WAE/D,IAAyB,aAArBptC,KAAKgK,aAAmD,YAArBhK,KAAKgK,YAA2B,CAC/E,GAAkBwF,GAAmBxP,KAAK+M,WAAWsC,eAAezM,MAAM6M,KAAO,KACrEzP,MAAK+M,WAAWsC,eAAezM,MAAM6M,IAC9BxK,SAASuK,EAAiBE,MAAM,MAAM,GAAI,IAAMw9B,EAAiB,GAApF,KAGQ,GAAyB,gBAArBltC,KAAKgK,aAAsD,eAArBhK,KAAKgK,YAA8B,CACrF,GAAkBwF,GAAmBxP,KAAK+M,WAAWsC,eAAezM,MAAMugB,QAAU,KACxEnjB,MAAK+M,WAAWsC,eAAezM,MAAMugB,OAC9Ble,SAASuK,EAAiBE,MAAM,MAAM,GAAI,IAAMw9B,EAAiB,GAApF,KAGQ,IAA0B,aAArBltC,KAAKgK,aAAmD,gBAArBhK,KAAKgK,cACzCmjC,EAvR6B,GAuRkB,CAC3D,GAAkB39B,GAAmBxP,KAAK+M,WAAWsC,eAAezM,MAAMogB,OAAS,KACvEhjB,MAAK+M,WAAWsC,eAAezM,MAAMogB,MAC9B/d,SAASuK,EAAiBE,MAAM,MAAM,GAAI,IAAM,GAAnE,KAGQ,IAA0B,YAArB1P,KAAKgK,aAAkD,eAArBhK,KAAKgK,cACxCmjC,EA9R6B,GA8RkB,CAC3D,GAAkB39B,GAAmBxP,KAAK+M,WAAWsC,eAAezM,MAAM8E,MAAQ,KACtE1H,MAAK+M,WAAWsC,eAAezM,MAAM8E,KAC9BzC,SAASuK,EAAiBE,MAAM,MAAM,GAAI,IAAM,GAAnE,OAKIu9B,EAAJ1sC,UAAAiM,gBAAI,SAAgBqC,EAAavN,GACrBtB,KAAKqtC,kBAAoB/rC,GACrBtB,KAAK+sC,UACL/sC,KAAK+sC,QAAQl+B,GAAOvN,IAKhC2rC,EAAJ1sC,UAAAK,SAAI,WACIZ,KAAK2P,2BAGTs9B,EAAJ1sC,UAAAyB,YAAI,WAAA,GAAJmC,GAAAnE,IACYA,MAAK+M,YACL/M,KAAK+M,WAAW6C,UAEpB5P,KAAKoM,gBAAgByD,QAAQ,SAACC,EAAUlK,GACpC,MAAAzB,GAAKpE,WAAWwB,cAAcwO,oBAAoBnK,EAAOkK,KAC7D9P,KAAKoM,gBAAgB4D,QAErBhQ,KAAKmM,aAAajC,OAClBlK,KAAKmM,aAAa8D,YAGtBg9B,EAAJ1sC,UAAA2P,cAAI,SAAcC,GACNnQ,KAAK0S,QAAUvC,EAAEC,UAAYC,EAAAA,QAC7BrQ,KAAK2K,QAIbsiC,EAAJ1sC,UAAA+P,eAAI,WACItQ,KAAK2K,QAGTsiC,EAAJ1sC,UAAAoP,wBAAI,WAAA,GAAJxL,GAAAnE,IAC+B,WAAnBA,KAAKuK,WAELvK,KAAKoM,gBACAmE,IAAI,aAAc,WAAM,MAAApM,GAAKgG,SAC7BoG,IAAI,aAAc,WAAM,MAAApM,GAAKwG,SAC7BkF,QAAQ,SAACC,EAAUlK,GAAU,MAAAzB,GAAKpE,WAAWwB,cAAciP,iBAAiB5K,EAAOkK,KAGrE,UAAnB9P,KAAKuK,WAELvK,KAAKoM,gBACAmE,IAAI,QAAS,WAAM,MAAApM,GAAKgG,SACxBoG,IAAI,OAAQ,WAAM,MAAApM,GAAKwG,SACvBkF,QAAQ,SAACC,EAAUlK,GAAU,MAAAzB,GAAKpE,WAAWwB,cAAciP,iBAAiB5K,EAAOkK,MAIhGm9B,EAAJ1sC,UAAA4J,KAAI,WAAA,GAAJhG,GAAAnE,IACQ,KAAKA,KAAKN,SAAU,CAChB,IAAKM,KAAK+sC,QAAS,CAC/B,GAAsBhgC,GAAa/M,KAAK8M,eACxB9M,MAAKuO,SAELvO,KAAKyQ,OAASzQ,KAAKyQ,QAAU,GAAIC,GAAAA,gBAAgB48B,GAAoBttC,KAAK8L,UAE1E9L,KAAK+sC,QAAUhgC,EAAW4D,OAAO3Q,KAAKyQ,QAAQG,SAC9C5Q,KAAKqtC,kBAAmB,GAEpB,cACA,gBACA,YACA,oBACA,oBACA,YACA,YACA,WACA,YACA,YAGOx9B,QAAQ,SAACxO,GAAa,MAAA8C,GAAKqI,gBAAgBnL,EAAU8C,EAAM9C,MACtErB,KAAK+sC,QAAQjkC,gBAAgB6E,KAAKC,EAAAA,UAAU5N,KAAKmM,cAAe0E,EAAAA,wBAC3DhD,UAAU,SAACiD,GACR3M,EAAKuG,UAAYoG,EACjB3M,EAAK2E,gBAAgBrC,KAAKqK,GAC1B3M,EAAKopC,cAAgBz8B,IAE7B9Q,KAAK+sC,QAAQjiC,cACR6C,KAAKC,EAAAA,UAAU5N,KAAKsM,YACpBuB,UAAU,WAAM,MAAA1J,GAAKoK,WAE9BvO,KAAKqO,iBACLrO,KAAK+sC,QAAQ5iC,SAIrB8iC,EAAJ1sC,UAAAoK,KAAI,WACQ3K,KAAK+sC,SACL/sC,KAAK+sC,QAAQpiC,QAKrBsiC,EAAJ1sC,UAAA8N,eAAI,SAAem/B,OAAnB,KAAAA,IAAmBA,GAAnB,GACaxtC,KAAK+M,aACN/M,KAAK+M,WAAa/M,KAAK8M,gBAEnC,IAAcG,GACFjN,KAAK+M,WAAWgE,YAA4B,iBAC1CC,EAAShR,KAAKiR,YACdtF,EAAU3L,KAAKkR,oBAErBjE,GAASK,eACjB6D,MAAgBH,EAAOI,KAASzF,EAAQyF,MACxCD,MAAgBH,EAAOK,SAAa1F,EAAQ0F,YAMhCm8B,GACA/iC,WAAW,WACPwC,EAASwgC,yBASrBR,EAAJ1sC,UAAA0Q,UAAI,WACJ,GAAYK,EAGJA,IAAkBvC,QAFM/O,KAAK0tC,iBAEe1+B,QADpBhP,KAAK2tC,iBAGvB,IAAAl8B,GAAdzR,KAAA0R,eAAAJ,EAAAvC,QAAAuC,EAAAtC,QAEQ,QACIoC,KAAME,EACND,UAAWtC,QAJvB0C,EAAAE,EAImC3C,QAJnCyC,EAAAG,KAQIq7B,EAAJ1sC,UAAAmtC,eAAI,WACJ,GACYE,GADE3gC,EAAWjN,KAAKgK,YAEhBuH,GAASvR,KAAKR,WAAsC,QAAzBQ,KAAKR,UAAU8B,KAChD,IAAiB,QAAb2L,GAAmC,WAAbA,EACtB2gC,EAAQ,aACL,IAAI3gC,EAASkvB,cAAc0R,SAAS,WAAat8B,GACpDtE,EAASkvB,cAAc0R,SAAS,SAAWt8B,EAC3Cq8B,EAAQ,YACL,CAAA,KAAI3gC,EAASkvB,cAAc0R,SAAS,UAAYt8B,GACnDtE,EAASkvB,cAAc0R,SAAS,UAAYt8B,GAG5C,KAAMu8B,GAAiC7gC,EAFvC2gC,GAAQ,MAKZ,MAAOA,IAGXX,EAAJ1sC,UAAAotC,eAAI,WACJ,GACYI,GADE9gC,EAAWjN,KAAKgK,WAEtB,IAAiB,UAAbiD,GAAqC,SAAbA,EACxB8gC,EAAQ,aACL,IAAI9gC,EAASkvB,cAAc0R,SAAS,OACvCE,EAAQ,UACL,CAAA,IAAI9gC,EAASkvB,cAAc0R,SAAS,UAGvC,KAAMC,GAAiC7gC,EAFvC8gC,GAAQ,SAKZ,MAAOA,IAIXd,EAAJ1sC,UAAA2Q,mBAAI,WACJ,GACYW,GADE5E,EAAWjN,KAAKgK,WAEtB,KAAIhK,KAAKwJ,mBAAmByD,GAMxB,KAAM6gC,GAAiC7gC,EALvC4E,IACI5C,SAAWjP,KAAKwJ,mBAAmByD,GAAUgC,SAC7CC,SAAUlP,KAAKwJ,mBAAmByD,GAAUiC,SAM9C,IAAAuC,GAAdzR,KAAA0R,eAAAG,EAAA5C,SAAA4C,EAAA3C,SAEQ,QACIkC,KAAMS,EACNR,UAAWpC,SAJvBwC,EAAAE,EAIoCzC,SAJpCuC,EAAAG,KASYq7B,EAAZ1sC,UAAAmR,eAAI,SAAuBC,EAA4BC,GACvD,GAAYE,GAAgCH,EAChCI,EAA8BH,CAelC,OAdyB,QAArB5R,KAAKgK,aAA8C,WAArBhK,KAAKgK,YACzB,QAAN4H,EACAG,EAAO,SACM,WAANH,IACPG,EAAO,OAGD,QAANJ,EACAG,EAAO,QACM,UAANH,IACPG,EAAO,QAIPH,EAAGG,EAAMF,EAAGG,mBA1f5BvT,KAACkD,EAAAA,UAADhD,OACIC,SAAU,cACV+H,SAAU,YACVQ,MACI8K,YAAa,wBACbC,aAAc,mBACd+7B,0BAA2B,kDArOnCxvC,KAAI+M,EAAAA,UApBJ/M,KAAIa,EAAAA,aAKJb,KAAIc,EAAAA,SAiBJd,KAAI0T,EAAAA,mBAXJ1T,KAAI2T,EAAAA,mBAsZJ3T,SAAA4T,GAAApK,aAAAxJ,KAAS6T,EAAAA,OAAT3T,MAAgBuvC,QAnZhBzvC,KAAS8T,EAAAA,eAATtK,aAAAxJ,KAoZS+T,EAAAA,gCA9JTzJ,kBAAAtK,KAAK2J,EAAAA,OAALzJ,MAAY,4BAEZwvC,WAAA1vC,KAAKiB,EAAAA,MAALf,MAAW,qBAcXyvC,YAAA3vC,KAAKiB,EAAAA,MAALf,MAAW,sBAcX0vC,WAAA5vC,KAAKiB,EAAAA,MAALf,MAAW,qBAgBXgB,WAAAlB,KAAKiB,EAAAA,MAALf,MAAW,uBASXqK,oBAAAvK,KAAKiB,EAAAA,MAALf,MAAW,8BAUXsK,oBAAAxK,KAAKiB,EAAAA,MAALf,MAAW,8BAUX6L,YAAA/L,KAAKiB,EAAAA,MAALf,MAAW,sBAcX2vC,gBAAA7vC,KAAKiB,EAAAA,MAALf,MAAW,mBAcXsL,cAAAxL,KAAKiB,EAAAA,MAALf,MAAW,wBAcXwmB,YAAA1mB,KAAKiB,EAAAA,MAALf,MAAW,oBAUXgM,YAAAlM,KAAKiB,EAAAA,MAALf,MAAW,uBA4WXuuC,KC1uBAqB,GAAA,WAAA,QAAAA,MAO8B,sBAP9B9vC,KAACsE,EAAAA,SAADpE,OACIyE,cAAemqC,GAAoBL,IACnC/pC,SAAUoqC,GAAoBL,IAC9BlqC,SAAUC,EAAAA,aAAc8P,EAAAA,eACxBnM,WAAY4nC,IACZx7B,iBAAkBu6B,QAEtBgB,KCNIE,GAAa,EAKjBC,GAAA,WACI,QAAJA,GAAuBnrC,GAAAtD,KAAvBsD,YAAuBA,EACvB,MAAAmrC,MAEaC,GAGLjrC,EAAWgrC,IAEnBE,GAAA,SAAA5qC,GAiBI,QAAJ4qC,GAAgB5uC,GAAZ,GAAJoE,GACQJ,EADRK,KAAApE,KACcD,IADdC,WALamE,GAAbM,GAA0B,mBAAmB+pC,KAChCrqC,EAAb7C,MAA6B,EAChB6C,EAAbyqC,KAAqC,cACxBzqC,EAAb8yB,MAAmCtzB,GAAaC,UAShD,MAbmCuB,GAAnCwpC,EAAA5qC,GAUI1D,OAAJC,eAAQquC,EAARpuC,UAAA,kBAAI,WACI,MAAO0X,MAAKC,IAlCA,EAkCiBD,KAAKoX,IAjCtB,IAiCuCrvB,KAAKsB,QAjC5C,oDAWpB9C,KAACC,EAAAA,UAADC,OACIC,SAAU,kBACVG,SAAJ,gVACID,QAAS,ydACTK,gBAAiBC,EAAAA,wBAAwBC,OACzCL,cAAeC,EAAAA,kBAAkBC,KACjCiI,MACIC,MAAO,kBACPE,YAAa,8CA9BrB7I,KAAIa,EAAAA,gCAkCJoF,KAAAjG,KAAKiB,EAAAA,QACL6B,QAAA9C,KAAKiB,EAAAA,QACLmvC,OAAApwC,KAAKiB,EAAAA,QACLw3B,QAAAz4B,KAAKiB,EAAAA,SASLkvC,GAbmCD,IC3BnCG,GAAA,WAAA,QAAAA,MAYkC,sBAZlCrwC,KAACsE,EAAAA,SAADpE,OACIqE,SACIC,EAAAA,aACAmR,EAAAA,gBAEJjR,SACIyrC,IAEJxrC,cACIwrC,QAGRE,KCVIL,GAAa,EAKjBM,GAAA,WACI,QAAJA,GAAuBxrC,GAAAtD,KAAvBsD,YAAuBA,EACvB,MAAAwrC,MAEaC,GAGLtrC,EAAWqrC,IAInBE,GAAA,SAAAjrC,GAiBI,QAAJirC,GAAgBjvC,GAAZ,GAAJoE,GACQJ,EADRK,KAAApE,KACcD,IADdC,WALamE,GAAbM,GAA0B,uBAAuB+pC,KACpCrqC,EAAb7C,MAA6B,EAChB6C,EAAbyqC,KAAyC,cAC5BzqC,EAAb8yB,MAAmCtzB,GAAaC,UAahD,MAjBuCuB,GAAvC6pC,EAAAjrC,GAUI1D,OAAJC,eAAQ0uC,EAARzuC,UAAA,kBAAI,WACI,MAAO0X,MAAKC,IApCA,EAoCiBD,KAAKoX,IAnCtB,IAmCuCrvB,KAAKsB,QAnC5C,qCAsChBjB,OAAJC,eAAQ0uC,EAARzuC,UAAA,yBAAI,WACI,MA5Be,KAAA,IA4BYP,KAAKivC,WAAxC,oDA1BAzwC,KAACC,EAAAA,UAADC,OACIC,SAAU,sBACVG,SAAJ,2aACID,QAAS,8pBACTK,gBAAiBC,EAAAA,wBAAwBC,OACzCL,cAAeC,EAAAA,kBAAkBC,KACjCiI,MACIC,MAAO,sBACPE,YAAa,8CAhCrB7I,KAAIa,EAAAA,gCAoCJoF,KAAAjG,KAAKiB,EAAAA,QACL6B,QAAA9C,KAAKiB,EAAAA,QACLmvC,OAAApwC,KAAKiB,EAAAA,QACLw3B,QAAAz4B,KAAKiB,EAAAA,SAaLuvC,GAjBuCD,IC/BvCG,GAAA,WAAA,QAAAA,MAYsC,sBAZtC1wC,KAACsE,EAAAA,SAADpE,OACIqE,SACIC,EAAAA,aACAmR,EAAAA,gBAEJjR,SACI8rC,IAEJ7rC,cACI6rC,QAGRE,KCKI9rC,GAAe,gBAIf,QAAJ+rC,GAEe3oC,EAEAlF,GAFAtB,KAAfwG,OAAeA,EAEAxG,KAAfsB,MAAeA,EACf,MAAA6tC,oBAIA,QAAAC,MAA+B,MAA/BA,MACaC,GAAmE3rC,EAAc0rC,IAOjFE,IACT1oC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAW,WAAM,MAAAwoC,MAC9BvoC,OAAO,GAGXuoC,GAAA,SAAAxrC,GA0GI,QAAJwrC,GACyBC,GADrB,GAAJrrC,GAGQJ,EAHRK,KAAApE,OAAAA,WACyBmE,GAAzBqrC,gBAAyBA,EAjCFrrC,EAAvBS,OAA6D,GAAIC,GAAAA,aAYrDV,EAAZqpB,OAA0B,KAGdrpB,EAAZsrC,MAA4B,kBAAkBrsC,KAGlCe,EAAZi4B,UAA8C,KAGlCj4B,EAAZurC,gBAAsC,EAG1BvrC,EAAZwrC,eAAiD,QAGrCxrC,EAAZjE,WAAiC,EAGrBiE,EAAZqS,WAAiC,EAU7BrS,EAAJyrC,6BAAyD,aAOrDzrC,EAAJkY,UAA2B,eAoG3B,MAnNkClX,GAAlCoqC,EAAAxrC,GAII1D,OAAJC,eACQivC,EADRhvC,UAAA,YAAI,WACqB,MAAOP,MAAKyvC,WACjC,SAASnuC,GACLtB,KAAKyvC,MAAQnuC,EACbtB,KAAK6vC,0DAITxvC,OAAJC,eACQivC,EADRhvC,UAAA,qBAAI,WAEI,MAAOP,MAAK2vC,oBAEhB,SAAkB/I,GACd5mC,KAAK2vC,eAAuB,WAAN/I,EAAiB,SAAW,QAClD5mC,KAAK8vC,sDAITzvC,OAAJC,eACQivC,EADRhvC,UAAA,aAAI,WACmB,MAAOP,MAAKwtB,YAC/B,SAAUhV,GACFxY,KAAKwtB,SAAWhV,IAEhBxY,KAAKwtB,OAAShV,EAEdxY,KAAK+vC,+BACL/vC,KAAKgwC,6DAKb3vC,OAAJC,eACQivC,EADRhvC,UAAA,gBAAI,WACiB,MAAOP,MAAKo8B,eAC7B,SAAa7O,GACTvtB,KAAKo8B,UAAY7O,EACjBvtB,KAAKsB,MAAQisB,EAAWA,EAASjsB,MAAQ,KACzCtB,KAAKgwC,4DAIT3vC,OAAJC,eACQivC,EADRhvC,UAAA,gBAAI,WAC0B,MAAOP,MAAKE,eACtC,SAAaoB,GACTtB,KAAKE,UAAY+vC,EAAU3uC,GAC3BtB,KAAK8vC,sDAITzvC,OAAJC,eACQivC,EADRhvC,UAAA,gBAAI,WAC0B,MAAOP,MAAKwW,eACtC,SAAalV,GACTtB,KAAKwW,UAAYy5B,EAAU3uC,GAC3BtB,KAAK8vC,sDAyDTP,EAAJhvC,UAAAyvC,yBAAI,WACQhwC,KAAKo8B,YAAcp8B,KAAKo8B,UAAU12B,UAClC1F,KAAKo8B,UAAU12B,SAAU,IAQjC6pC,EAAJhvC,UAAAi1B,mBAAI,WAIIx1B,KAAK0vC,gBAAiB,GAO1BH,EAAJhvC,UAAA2vC,MAAI,WACQlwC,KAAKqc,WACLrc,KAAKqc,aAKbkzB,EAAJhvC,UAAA4vC,gBAAI,WACQnwC,KAAK0vC,gBACL1vC,KAAK4E,OAAO6B,KAAK,GAAI0oC,IAAcnvC,KAAc,UAAGA,KAAKwtB,UAIjE+hB,EAAJhvC,UAAAuvC,mBAAI,WACQ9vC,KAAKowC,SACLpwC,KAAKowC,QAAQvgC,QAAQ,SAACwgC,GAAU,MAAAA,GAAMjrC,kBAO9CmqC,EAAJhvC,UAAA2F,WAAI,SAAW5E,GACPtB,KAAKsB,MAAQA,EACbtB,KAAKwvC,gBAAgBpqC,gBAQzBmqC,EAAJhvC,UAAA4F,iBAAI,SAAiBC,GACbpG,KAAK4vC,6BAA+BxpC,GAQxCmpC,EAAJhvC,UAAA8F,kBAAI,SAAkBD,GACdpG,KAAKqc,UAAYjW,GAOrBmpC,EAAJhvC,UAAA+F,iBAAI,SAAiBC,GACbvG,KAAKN,SAAW6G,EAChBvG,KAAKwvC,gBAAgBpqC,gBAGjBmqC,EAAZhvC,UAAAsvC,uBAAI,WAAA,GAAJ1rC,GAAAnE,IACYA,MAAKowC,SACLpwC,KAAKowC,QAAQvgC,QAAQ,SAACwgC,GAClBA,EAAM3rC,KAAOP,EAAKO,QAMtB6qC,EAAZhvC,UAAAwvC,6BAAI,WAAA,GAAJ5rC,GAAAnE,KAEcswC,EAAuC,OAAnBtwC,KAAKo8B,WAAsBp8B,KAAKo8B,UAAU96B,QAAUtB,KAAKwtB,MAE/D,OAAhBxtB,KAAKowC,SAAoBE,IACzBtwC,KAAKo8B,UAAY,KACjBp8B,KAAKowC,QAAQvgC,QAAQ,SAACwgC,GAClBA,EAAM3qC,QAAUvB,EAAK7C,QAAU+uC,EAAM/uC,MACjC+uC,EAAM3qC,UACNvB,EAAKi4B,UAAYiU,sBAxNrC7xC,KAACkD,EAAAA,UAADhD,OACIC,SAAU,iBACV+H,SAAU,eACVC,WAAY2oC,IACZpoC,MACIme,KAAM,aACNle,MAAO,kBAEXF,QAAS,oDAzDbzI,KAAIsJ,EAAAA,uCA+DJpD,OAAAlG,KAAKiB,EAAAA,QAQL4E,gBAAA7F,KAAKiB,EAAAA,QAUL6B,QAAA9C,KAAKiB,EAAAA,QAaL8tB,WAAA/uB,KAAKiB,EAAAA,QASLC,WAAAlB,KAAKiB,EAAAA,QAQLmV,WAAApW,KAAKiB,EAAAA,QAYLmF,SAAApG,KAAK2J,EAAAA,SAGLioC,UAAA5xC,KAAKo0B,EAAAA,gBAALl0B,MAAqBqI,EAAAA,WAAW,WAAM,MAAAwpC,OAAkBzd,aAAa,OAgJrEyc,GAnNkCF,kBA8N9B,QAAJmB,GAAuBltC,GAAAtD,KAAvBsD,YAAuBA,EACvB,MAAAktC,MAEaC,GAILhtC,EAAWD,EAAcgtC,KAGjCD,GAAA,SAAAxsC,GAsJI,QAAJwsC,GACoBG,EACZ3wC,EACiByvC,EACAmB,GAJrB,GAAJxsC,GAOQJ,EAPRK,KAAApE,KAOcD,IAPdC,WAGyBmE,GAAzBqrC,gBAAyBA,EACArrC,EAAzBwsC,iBAAyBA,EAvIJxsC,EAArBK,UAAyC,eAAcpB,GAK1Ce,EAAbM,GAA0BN,EAAKK,UAmGRL,EAAvBS,OAA6D,GAAIC,GAAAA,aAM7DV,EAAJkU,WAAyB,EAMblU,EAAZQ,UAAgC,EASpBR,EAAZqpB,OAA0B,KAILrpB,EAArBysC,8BAAiE,aAWzDzsC,EAAKusC,WAAaA,EAElBvsC,EAAKysC,8BACDD,EAAiB5kB,OAAO,SAACtnB,EAAYC,GAC7BD,IAAON,EAAKM,IAAMC,IAASP,EAAKO,OAChCP,EAAKuB,SAAU,OAmEnC,MAvNmCP,GAAnCorC,EAAAxsC,GAuBI1D,OAAJC,eACQiwC,EADRhwC,UAAA,eAAI,WACyB,MAAOP,MAAK2E,cACrC,SAAYrD,GAChB,GAAcuvC,GAAkBZ,EAAU3uC,EAE9BtB,MAAK2E,WAAaksC,IAClB7wC,KAAK2E,SAAWksC,EAEZA,GAAmB7wC,KAAK0wC,YAAc1wC,KAAK0wC,WAAWpvC,QAAUtB,KAAKsB,MACrEtB,KAAK0wC,WAAWnjB,SAAWvtB,MACnB6wC,GAAmB7wC,KAAK0wC,YAAc1wC,KAAK0wC,WAAWpvC,QAAUtB,KAAKsB,QAG7EtB,KAAK0wC,WAAWnjB,SAAW,MAG3BsjB,GAEA7wC,KAAK2wC,iBAAiBG,OAAO9wC,KAAKyE,GAAIzE,KAAK0E,MAE/C1E,KAAKwvC,gBAAgBpqC,iDAK7B/E,OAAJC,eACQiwC,EADRhwC,UAAA,aAAI,WACmB,MAAOP,MAAKwtB,YAC/B,SAAUlsB,GACFtB,KAAKwtB,SAAWlsB,IAChBtB,KAAKwtB,OAASlsB,EACS,MAAnBtB,KAAK0wC,aACA1wC,KAAK0F,UAEN1F,KAAK0F,QAAU1F,KAAK0wC,WAAWpvC,QAAUA,GAEzCtB,KAAK0F,UACL1F,KAAK0wC,WAAWnjB,SAAWvtB,yCAO3CK,OAAJC,eACQiwC,EADRhwC,UAAA,gBAAI,WAEI,MAAOP,MAAKE,WAAiC,MAAnBF,KAAK0wC,YAAsB1wC,KAAK0wC,WAAWhxC,cAEzE,SAAa4B,GACjB,GAAcyvC,GAAmBd,EAAU3uC,EAE/BtB,MAAKE,YAAc6wC,IAEnB/wC,KAAKE,UAAY6wC,EACjB/wC,KAAKwvC,gBAAgBpqC,iDAK7B/E,OAAJC,eACQiwC,EADRhwC,UAAA,gBAAI,WAEI,MAAOP,MAAKwW,WAAcxW,KAAK0wC,YAAc1wC,KAAK0wC,WAAW97B,cAEjE,SAAatT,GACTtB,KAAKwW,UAAYy5B,EAAU3uC,oCAI/BjB,OAAJC,eACQiwC,EADRhwC,UAAA,qBAAI,WAEI,MAAOP,MAAK2vC,gBAAmB3vC,KAAK0wC,YAAc1wC,KAAK0wC,WAAWrsC,eAAkB,aAExF,SAAkB/C,GACdtB,KAAK2vC,eAAiBruC,mCAqB1BjB,OAAJC,eAAQiwC,EAARhwC,UAAA,eAAI,WAAwB,OAAUP,KAAKyE,IAAMzE,KAAKwE,WAAtD,0CAqCI+rC,EAAJhwC,UAAAK,SAAI,WACQZ,KAAK0wC,aAEL1wC,KAAK0F,QAAU1F,KAAK0wC,WAAWpvC,QAAUtB,KAAKwtB,OAE9CxtB,KAAK0E,KAAO1E,KAAK0wC,WAAWhsC,OAIpC6rC,EAAJhwC,UAAAyB,YAAI,WACIhC,KAAK4wC,iCAKTL,EAAJhwC,UAAA+E,MAAI,aAOAirC,EAAJhwC,UAAA6E,aAAI,WAGIpF,KAAKwvC,gBAAgBpqC,gBAGzBmrC,EAAJhwC,UAAAywC,aAAI,SAAaprC,GAQTA,EAAMC,mBAGV0qC,EAAJhwC,UAAA0wC,cAAI,SAAcrrC,GAIVA,EAAMC,iBAEd,IAAcqrC,GAAoBlxC,KAAK0wC,YAAc1wC,KAAKsB,QAAUtB,KAAK0wC,WAAWpvC,KAC5EtB,MAAK0F,SAAU,EACf1F,KAAKmwC,kBAEDnwC,KAAK0wC,aACL1wC,KAAK0wC,WAAWd,6BAA6B5vC,KAAKsB,OAClDtB,KAAK0wC,WAAWR,QACZgB,GACAlxC,KAAK0wC,WAAWP,oBAMpBI,EAAZhwC,UAAA4vC,gBAAI,WACInwC,KAAK4E,OAAO6B,KAAK,GAAI0oC,IAAcnvC,KAAMA,KAAKwtB,yBArOtDhvB,KAACC,EAAAA,UAADC,OACIC,SAAU,kBACVG,SAAJ,opBACID,QAAS,i3BACToI,QAAS,QAAS,YAClBlI,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,OACzCsH,SAAU,gBACVQ,MACIC,MAAO,kBACPE,YAAa,KACb8pC,qBAAsB,UACtB7pC,sBAAuB,WACvB6R,UAAW,+EA0InB3a,KAAgC+wC,GAAhCvnC,aAAAxJ,KAAS+T,EAAAA,aAzbT/T,KAA2Ca,EAAAA,aAD3Cb,KAAIsJ,EAAAA,oBAQJtJ,KAAS4yC,EAAAA,+CAmTT3sC,KAAAjG,KAAKiB,EAAAA,QAGLiF,OAAAlG,KAAKiB,EAAAA,QAGL6E,YAAA9F,KAAKiB,EAAAA,MAALf,MAAW,gBAGX6F,iBAAA/F,KAAKiB,EAAAA,MAALf,MAAW,qBAGX2yC,kBAAA7yC,KAAKiB,EAAAA,MAALf,MAAW,sBAGXgH,UAAAlH,KAAKiB,EAAAA,QAyBL6B,QAAA9C,KAAKiB,EAAAA,QAkBLC,WAAAlB,KAAKiB,EAAAA,QAeLmV,WAAApW,KAAKiB,EAAAA,QASL4E,gBAAA7F,KAAKiB,EAAAA,QAUL+F,gBAAAhH,KAAK0J,EAAAA,UAALxJ,MAAe,WAOfkG,SAAApG,KAAK2J,EAAAA,SAKLkQ,YAAA7Z,KAAKiB,EAAAA,SAuGL8wC,GAvNmCE,IC7SnCa,GAAA,WAAA,QAAAA,MAMA,sBANA9yC,KAACsE,EAAAA,SAADpE,OACIqE,SAAUC,EAAAA,aAAcqF,EAAAA,WAAYC,IACpCpF,SAAUqsC,GAAcgB,IACxBptC,cAAeosC,GAAcgB,QAGjCe,KCVAC,GAAA,SAAAxtC,GAAA,QAAAwtC,oDAOA,MAFsCpsC,GAAtCosC,EAAAxtC,kBALAvF,KAACkD,EAAAA,UAADhD,OACIC,SAAU,kBACVsI,QAAS,2BACTN,YAAcC,QAAS4qC,EAAAA,eAAgB1qC,YAAayqC,0BAGxDzgC,OAAAtS,KAAKiB,EAAAA,MAALf,MAAW,iBACX6yC,GAFsCC,EAAAA,gBCNtCC,GAAA,SAAA1tC,GAAA,QAAA0tC,KAAA,GAAAttC,GAAA,OAAAJ,GAAAA,EAAAuwB,MAAAt0B,KAAA0xC,YAAA1xC,WASImE,GAAJwtC,gBAA8B,GAE1BxtC,EAAJytC,QAAsB,GAGlBztC,EAAJ0tC,UAAwB,KAqBxB,MA/B0C1sC,GAA1CssC,EAAA1tC,GAYI1D,OAAJC,eAAQmxC,EAARlxC,UAAA,mBAAI,WACI,OAAQP,KAAK8xC,SAAW,EAAI9xC,KAAK6xC,WAAa7xC,KAAK2xC,iDAGvDF,EAAJlxC,UAAAwxC,cAAI,WACJ,GAAcC,GAAahyC,KAAKiyC,SAASnhC,MAAQ9Q,KAAKs1B,KAAK4c,YAAYC,SACzDnyC,KAAKs1B,KAAK4c,YAAYC,SAASnyC,KAAKiyC,SAASnhC,MAC7C,KAEAshC,EAAQpyC,KAAKoyC,OAASJ,CAE5B,OAAOI,GAAYA,EAAQpyC,KAAK4xC,QAAW5xC,KAAKqyC,YAAxD,KAA6EryC,KAAK2xC,gBAAlF,MAGIF,EAAJlxC,UAAAK,SAAI,WACIZ,KAAK8xC,SAAW9xC,KAAKs1B,KAAK4c,YAAYI,aAAatyC,KAAKiyC,SAASnhC,MAEjE9Q,KAAKuyC,6BAjCb/zC,KAACkD,EAAAA,UAADhD,OACIC,SAAU,sBACVgI,YAAcC,QAAS4rC,EAAAA,mBAAoB1rC,YAAa2qC,0BAG5DW,QAAA5zC,KAAKiB,EAAAA,MAALf,MAAW,uBAEX+zC,SAAAj0C,KAAKiB,EAAAA,MAALf,MAAW,8BA4BX+yC,GA/B0Ce,EAAAA,oBCJ1CE,GAAA,SAAA3uC,GAAA,QAAA2uC,oDAO+D,MAAtBvtC,GAAzCutC,EAAA3uC,kBAPAvF,KAACkD,EAAAA,UAADhD,OACIC,SAAU,qBACVuI,MACIqjB,UAAW,kBAEf5jB,YAAcC,QAAS+rC,EAAAA,kBAAmB7rC,YAAa4rC,QAE3DA,GAAyCC,EAAAA,mBCe5BC,GACT,GAAIxnC,GAAAA,eAA4C,mCAEpDynC,GAAA,WACI,QAAJA,GAAuBrsC,EAA6BgtB,OAApD,KAAAA,IAAoDA,GAApD,GAAuBxzB,KAAvBwG,OAAuBA,EAA6BxG,KAApDwzB,YAAoDA,EACpD,MAAAqf,MAEIC,GAA0B,EAE9BC,GAAA,SAAAhvC,GAiFI,QAAJgvC,GACkBhzC,EACAikB,EAC4DgvB,GAH1E,GAAJ7uC,GAMQJ,EAARK,KAAApE,KAAcD,EAAU,IAAxBC,WALkBmE,GAAlBpE,WAAkBA,EACAoE,EAAlB6f,kBAAkBA,EAC4D7f,EAA9E6uC,OAA8EA,EAjEvD7uC,EAAvBowB,kBAA2C,GAAI1vB,GAAAA,aAiBnCV,EAAZjE,WAAiC,EAqBrBiE,EAAZi4B,WAAiC,EAYrBj4B,EAAZ8uC,SAAsB,EAMV9uC,EAAZgT,IAAkB,kBAAkB27B,OAmIpC,MA5LkC3tC,GAAlC4tC,EAAAhvC,GAKI1D,OAAJC,eACQyyC,EADRxyC,UAAA,gBAAI,WAEI,MAAOP,MAAKE,eAGhB,SAAaoB,GACjB,GAAckX,GAAWy3B,EAAU3uC,EAEvBkX,KAAaxY,KAAKE,YAClBF,KAAKE,UAAYsY,oCAWzBnY,OAAJC,eAAQyyC,EAARxyC,UAAA,gBAAI,WACI,MAAOP,MAAKo8B,eAGhB,SAAa96B,GACjB,GAAcy5B,GAAakV,EAAU3uC,EAEzBy5B,KAAe/6B,KAAKo8B,WACpBp8B,KAAKkzC,YAAYnY,oCAczB16B,OAAJC,eAAQyyC,EAARxyC,UAAA,cAAI,WACI,MAAOP,MAAKizC,yCAKhB5yC,OAAJC,eAAQyyC,EAARxyC,UAAA,UAAI,WACI,MAAOP,MAAKmX,qCAKhB9W,OAAJC,eAAQyyC,EAARxyC,UAAA,gBAAI,WACI,MAAOP,MAAKgzC,OAAOn+B,0CAYvBk+B,EAAJxyC,UAAAwT,OAAI,WACI/T,KAAKutB,UAAYvtB,KAAKutB,UAG1BwlB,EAAJxyC,UAAA2yC,YAAI,SAAY3lB,GACJvtB,KAAKo8B,YAAc7O,GAAavtB,KAAKgzC,OAAOlmB,iBAEhD9sB,KAAKo8B,UAAY7O,EAEbA,EACAvtB,KAAKgzC,OAAOlmB,eAAe+I,OAAO71B,MAElCA,KAAKgzC,OAAOlmB,eAAeiJ,SAAS/1B,QAW5C+yC,EAAJxyC,UAAA4yC,gBAAI,WACSnzC,KAAKizC,UACNjzC,KAAKizC,SAAU,EAEfjzC,KAAKgkB,kBAAkB5e,iBAS/B2tC,EAAJxyC,UAAA6yC,kBAAI,WACQpzC,KAAKizC,UACLjzC,KAAKizC,SAAU,EACfjzC,KAAKgkB,kBAAkB5e,iBAI/B2tC,EAAJxyC,UAAA8yC,UAAI,WACJ,GAAcC,GAActzC,KAAKD,WAAWwB,cAAcgyC,gBAClD,OAAID,GAAYh2B,OACLg2B,EAAY,GAAGt7B,OAGnB,GAGX+6B,EAAJxyC,UAAA+E,MAAI,WACJ,GAAciK,GAAUvP,KAAKwzC,gBAEQ,mBAAlBjkC,GAAQjK,OACfiK,EAAQjK,SAehBjF,OAAJC,eAAQyyC,EAARxyC,UAAA,iBAAI,WAEI,OAAQP,KAAKwzC,iBAAiBzL,aAAe,IAAIvnB,wCAGrDuyB,EAAJxyC,UAAAs1B,OAAI,WACS71B,KAAKo8B,YACNp8B,KAAKo8B,WAAY,EAEjBp8B,KAAKgkB,kBAAkB5e,iBAI/B2tC,EAAJxyC,UAAAw1B,SAAI,WACQ/1B,KAAKo8B,YACLp8B,KAAKo8B,WAAY,EAEjBp8B,KAAKgkB,kBAAkB5e,iBAI/B2tC,EAAJxyC,UAAAs5B,qBAAI,WACS75B,KAAKN,WACNM,KAAKo8B,WAAYp8B,KAAK6U,WAAY7U,KAAKo8B,UAEvCp8B,KAAKgkB,kBAAkB5e,eACvBpF,KAAKyzC,0BAAyB,GAE1BzzC,KAAKgzC,OAAOU,kBACZ1zC,KAAKgzC,OAAOU,iBAAiB1zC,QAKzC+yC,EAAJxyC,UAAAkzC,yBAAI,SAAyBjgB,OAA7B,KAAAA,IAA6BA,GAA7B,GACQxzB,KAAKu0B,kBAAkB9tB,KAAK,GAAIosC,IAAmB7yC,KAAMwzB,KAG7Duf,EAAJxyC,UAAAizC,eAAI,WACI,MAAOxzC,MAAKD,WAAWwB,eAG3BwxC,EAAJxyC,UAAAsrC,YAAI,WACI,MAAO7rC,MAAKN,SAAW,KAAO,oBA5MtClB,KAACC,EAAAA,UAADC,OACIC,SAAU,iBACV+H,SAAU,eACVQ,MACIG,YAAa,KACbkM,kBAAmB,gBAEnBD,kBAAmB,mBAEnBnM,MAAO,iBACPwsC,sBAAuB,WACvBlH,oBAAqB,SAErBliB,UAAW,0BAEfzrB,SAAJ,yQACI6H,YAAcC,QAASgtC,EAAAA,YAAa9sC,YAAaisC,4CA7CrDv0C,KAAIa,EAAAA,aALJb,KAAIsJ,EAAAA,oBAsHJtJ,SAAA4T,GAAApK,aAAAxJ,KAAS+T,EAAAA,WAAT/T,KAAqB6T,EAAAA,OAArB3T,MAA4Bk0C,2BAjE5Bre,oBAAA/1B,KAAK2J,EAAAA,SAEL7G,QAAA9C,KAAKiB,EAAAA,QAELC,WAAAlB,KAAKiB,EAAAA,SAuLLszC,GA5LkCa,EAAAA,aCjBlCC,GAAA,WACI,QAAJA,GACertC,EACA8mB,GADAttB,KAAfwG,OAAeA,EACAxG,KAAfstB,OAAeA,EAEf,MAAAumB,MAEAC,GAAA,WACI,QAAJA,GAAuBttC,EAAgC8mB,GAAhCttB,KAAvBwG,OAAuBA,EAAgCxG,KAAvDstB,OAAuDA,EACvD,MAAAwmB,qBAGI,QAAJC,GAAgBC,EAA0BhwB,GAC1C,MAAQjgB,GAARK,KAAApE,KAAcg0C,EAAShwB,IAAvBhkB,KAEA,MAJqCmF,GAArC4uC,EAAAhwC,GAIAgwC,GAJqC/Y,EAAAA,SAO/BiZ,GAC2BzwC,EAAcE,EAAcqwC,KAG7D9Y,GAAA,SAAAl3B,GAsEI,QAAJk3B,GACgBl7B,EACRi0C,EACAhwB,EACuB9f,EACA2Q,EACGC,EACAo/B,GAP9B,GAAJ/vC,GASQJ,EATRK,KAAApE,KAScg0C,EAAShwB,IATvBhkB,WACgBmE,GAAhBpE,WAAgBA,EA9BOoE,EAAvBgwC,iBAA0C,GAAItvC,GAAAA,aAEvBV,EAAvBoQ,gBAAyC,GAAI1P,GAAAA,aAuBjCV,EAAZjE,WAAiC,EAEZiE,EAArB2wB,QAA+B,GAAIxrB,GAAAA,QAa3BnF,EAAKD,SAAWe,SAASf,IAAa,EAEtCC,EAAK0Q,SAAwB,OAAbA,GAA4Bo7B,EAAUp7B,GACtD1Q,EAAK2Q,WAA4B,OAAfA,GAA6Bm7B,EAAUn7B,GACzD3Q,EAAK+vC,WAA4B,OAAfA,GAA6BjE,EAAUiE,GAEzD/vC,EAAK2oB,eAAiB,GAAI4I,GAAAA,eAA6BvxB,EAAK0Q,YAkLpE,MArPqC1P,GAArC81B,EAAAl3B,GAyBI1D,OAAJC,eACQ26B,EADR16B,UAAA,gBAAI,WAEI,MAAOP,MAAKE,eAGhB,SAAak0C,GACjB,GAAc9yC,GAAQ2uC,EAAUmE,EAEpBp0C,MAAKE,YAAcoB,IACnBtB,KAAKE,UAAYoB,EAEbtB,KAAKE,UAELu6B,QAAQ4Z,IAAI,4BAGZ5Z,QAAQ4Z,IAAI,6DA6BxBpZ,EAAJ16B,UAAAi1B,mBAAI,WACIx1B,KAAK+tB,WAAa,GAAI0U,GAAAA,2BAAyCziC,KAAK4sB,SAC/D+R,yBAAwB,GACxBC,0BAA0B,OAGnC3D,EAAJ16B,UAAAyB,YAAI,WACIhC,KAAK80B,QAAQ5qB,OAEblK,KAAK80B,QAAQ7kB,YAGjBgrB,EAAJ16B,UAAAsd,UAAI,SAAUjY,GAEd,GAAcwK,GAAUxK,EAAMwK,OAItB,QAHApQ,KAAKs0C,UAAY1uC,EAAMg0B,SACvB55B,KAAKu0C,SAAW3uC,EAAM6zB,QAEdrpB,GACJ,IAAKyoB,GAAAA,WACG74B,KAAK+tB,WAAWwL,YAChBv5B,KAAKkyC,YAAYsC,SAASx0C,KAAK+tB,WAAWwL,WAAWzoB,MAGzDlL,EAAM4W,gBAEN,MACJ,KAAKsc,GAAAA,YACG94B,KAAK+tB,WAAWwL,YAChBv5B,KAAKkyC,YAAYuC,OAAOz0C,KAAK+tB,WAAWwL,WAAWzoB,MAGvDlL,EAAM4W,gBAEN,MACJ,KAAKwc,GAAAA,MACL,IAAKD,GAAAA,MACD/4B,KAAK00C,sBACL9uC,EAAM4W,gBAEN,MACJ,KAAK4c,GAAAA,KACDp5B,KAAK+tB,WAAWE,qBAChBroB,EAAM4W,gBAEN,MACJ,KAAK6c,GAAAA,IACDr5B,KAAK+tB,WAAWuL,oBAChB1zB,EAAM4W,gBAEN,MACJ,KAAKm4B,GAAAA,QACD30C,KAAK+tB,WAAW6mB,4BAChBhvC,EAAM4W,gBAEN,MACJ,KAAKq4B,GAAAA,UACD70C,KAAK+tB,WAAW+mB,wBAChBlvC,EAAM4W,gBAEN,MACJ,SACIxc,KAAK+tB,WAAWmL,UAAUtzB,KAItCq1B,EAAJ16B,UAAAw0C,iBAAI,WACS/0C,KAAK4sB,QAAQ2D,OAElBvwB,KAAK+tB,WAAWinB,eAAe/8B,KAAKg9B,MAAMj1C,KAAKqzC,YAAcrzC,KAAK4sB,QAAQ2D,MAAM8iB,eAGpFpY,EAAJ16B,UAAAmzC,iBAAI,SAAiBpmB,GAGb,GAFAttB,KAAK+tB,WAAWG,cAAcZ,GAE1BttB,KAAKs0C,WAAat0C,KAAK6U,SAAU,CAC7C,GAAkBqgC,GAAgBl1C,KAAK+tB,WAAWonB,wBAChCC,EAAcp1C,KAAK+tB,WAAWM,eAEhC6mB,GAAgBE,EAChBp1C,KAAK4sB,QAAQ/c,QAAQ,SAACic,EAAMpC,GACpBA,GAASwrB,GAAiBxrB,GAAS0rB,GAAetpB,EAAKonB,aAAY,KAG3ElzC,KAAK4sB,QAAQ/c,QAAQ,SAACic,EAAMpC,GACpBA,GAAS0rB,GAAe1rB,GAASwrB,GAAiBppB,EAAKonB,aAAY,KAI/ElzC,KAAKs0C,WAAY,MACd,IAAIt0C,KAAKu0C,SAAU,CAGtB,GAFAv0C,KAAKu0C,UAAW,GAEXv0C,KAAKq1C,gBAAgB/nB,GAAW,MAErCA,GAAOvZ,aAEH/T,MAAK8U,aACL9U,KAAK4sB,QAAQ/c,QAAQ,SAACic,GAAS,MAAAA,GAAKonB,aAAY,KAChD5lB,EAAO4lB,aAAY,GAI3BlzC,MAAKs1C,oBAAoBhoB,IAG7B2N,EAAJ16B,UAAAm0C,oBAAI,WACJ,GAAca,GAAev1C,KAAK+tB,WAAWM,eAErC,IAAoB,MAAhBknB,GAAwBv1C,KAAK6/B,aAAa0V,GAAe,CACrE,GAAkBC,GAA8Bx1C,KAAK4sB,QAAQC,UAAU0oB,EAEvDC,IAAiBx1C,KAAKq1C,gBAAgBG,KACtCA,EAAczhC,SAGd/T,KAAKmwC,gBAAgBqF,MAKjCva,EAAJ16B,UAAAk1C,kBAAI,SACI3kC,EACA4kC,EACAC,EACAC,OAFR,KAAAF,IAAQA,EAA2C11C,KAAK01C,gBACxD,KAAAC,IAAQA,EAAqB31C,KAAK61C,WAAWF,eAGrC5xC,EAARxD,UAAck1C,kBAAdrxC,KAAApE,KAAgC8Q,EAAM4kC,EAAYC,EAAeC,EAEjE,IAAcE,KAENH,GAAcI,eAAelmC,QAAQ,SAACmmC,GAC9C,GAAkBC,GAAUD,EAAKE,GAErBD,GAAQE,MAAMtmC,QAAQ,SAACumC,GACnB,GAAIH,EAAQI,qBAAuBD,EAAKE,gBAAiB,CACzE,GAA0BC,GAAgBP,EAAKG,MAAMC,EAAKI,UAEtCV,GAAiB3tB,KAAKouB,EAAiB,eAK/Cv2C,KAAK4sB,UACL5sB,KAAK4sB,QAAQ6pB,MAAMX,GACnB91C,KAAK4sB,QAAQ8pB,mBAGjB12C,KAAK+0C,oBAGT9Z,EAAJ16B,UAAA8yC,UAAI,WACJ,GAAcC,GAActzC,KAAKD,WAAWwB,cAAcgyC,gBAClD,OAAID,GAAYh2B,OACLg2B,EAAY,GAAGt7B,OAGnB,GAGXijB,EAAJ16B,UAAA+0C,oBAAI,SAAoBhoB,GAChBttB,KAAKm0C,iBAAiB1tC,KAAK,GAAIotC,IAAuB7zC,KAAMstB,KAGhE2N,EAAJ16B,UAAA4vC,gBAAI,SAAgB7iB,GACZttB,KAAKuU,gBAAgB9N,KAAK,GAAIotC,IAAuB7zC,KAAMstB,KAGvD2N,EAAZ16B,UAAAs/B,aAAI,SAAqBnW,GACjB,MAAOA,IAAS,GAAKA,EAAQ1pB,KAAK4sB,QAAQtP,QAGtC2d,EAAZ16B,UAAA80C,gBAAI,SAAwB/nB,GACpB,QAASttB,KAAKk0C,YAAsD,IAAxCl0C,KAAK8sB,eAAeS,SAASjQ,QAAgBgQ,EAAOC,0BAvQxF/uB,KAACC,EAAAA,UAADC,OACIC,SAAU,oBACV+H,SAAU,kBACV5H,SAAU,kDACVoI,MACIC,MAAO,oBAEPoM,kBAAmB,WAEnBvB,YAAa,oBACb6f,kBAAmB,sBAEvBhzB,QAAS,qdACTE,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,OACzCuH,YACMC,QAASgsC,GAAiC9rC,YAAam0B,IACvDr0B,QAASo0B,EAAAA,QAASl0B,YAAam0B,4CA5DzCz8B,KAAIa,EAAAA,aALJb,KAAIm4C,EAAAA,kBANJn4C,KAAIsJ,EAAAA,oBAgIJtJ,KAAAuJ,OAAAC,aAAAxJ,KAASyJ,EAAAA,UAATvJ,MAAmB,gBACnBF,KAAAuJ,OAAAC,aAAAxJ,KAASyJ,EAAAA,UAATvJ,MAAmB,gBACnBF,KAAAuJ,OAAAC,aAAAxJ,KAASyJ,EAAAA,UAATvJ,MAAmB,mBACnBF,KAAAuJ,OAAAC,aAAAxJ,KAASyJ,EAAAA,UAATvJ,MAAmB,sCAtDnBm3C,aAAAr3C,KAAK0J,EAAAA,UAALxJ,MAAek4C,EAAAA,qBAEfhqB,UAAApuB,KAAKo0B,EAAAA,gBAALl0B,MAAqBq0C,MAgBrBoB,mBAAA31C,KAAK2J,EAAAA,SAELoM,kBAAA/V,KAAK2J,EAAAA,SAELzI,WAAAlB,KAAKiB,EAAAA,SA4NLw7B,GArPqCgZ,IClE/B4C,IACF5b,GACA8X,GACAxB,GACAE,GACAiB,IAGJt9B,GAAA,WAAA,QAAAA,MAK2B,sBAL3B5W,KAACsE,EAAAA,SAADpE,OACIqE,SAAUC,EAAAA,aAAcmS,EAAAA,cAAeG,IACvCpS,QAAS2zC,GACT1zC,aAAc0zC,OAElBzhC,mBCgBI,QAAJ0hC,GACeC,EACA5E,EACAG,EACA0E,GAHAh3C,KAAf+2C,kBAAeA,EACA/2C,KAAfmyC,SAAeA,EACAnyC,KAAfsyC,aAAeA,EACAtyC,KAAfg3C,YAAeA,EA2Df,MAxDIF,GAAJv2C,UAAA02C,YAAI,SAAYb,EAAShE,EAAe8E,EAAkBC,GAAtD,GAAJhzC,GAAAnE,KACco3C,EAAWp3C,KAAK+2C,kBAAkBX,EAAMhE,EAgB9C,OAfA8E,GAAY/uB,KAAKivB,GAEbp3C,KAAKsyC,aAAa8E,IAClBp3C,KAAKg3C,YAAYZ,GACZzoC,KAAK2Y,EAAAA,KAAK,IACVzY,UAAU,SAACwpC,GACRA,EAASxnC,QAAQ,SAACynC,EAAO5tB,GAC7C,GAA8B6tB,GAA4BJ,EAAUvuC,OAC5C2uC,GAAepvB,KAAKuB,IAAU2tB,EAAS/5B,OAAS,GAEhDnZ,EAAK8yC,YAAYK,EAAOlF,EAAQ,EAAG8E,EAAaK,OAKzDL,GAQXJ,EAAJv2C,UAAAi3C,aAAI,SAAaC,GAAb,GAAJtzC,GAAAnE,KACck3C,IAGN,OAFAO,GAAe5nC,QAAQ,SAACumC,GAAS,MAAAjyC,GAAK8yC,YAAYb,EAAM,EAAGc,QAEpDA,GAOXJ,EAAJv2C,UAAAm3C,qBAAI,SAAqBvB,EAAYjE,GAAjC,GAAJ/tC,GAAAnE,KACc23C,KACAC,IAgBN,OAfAA,GAAc,IAAK,EAEnBzB,EAAMtmC,QAAQ,SAACumC,GAEX,IAAK,GADD3B,IAAS,EACJrJ,EAAI,EAAGA,GAAKjnC,EAAKguC,SAASiE,GAAOhL,IACtCqJ,EAASA,GAAUmD,EAAcxM,EAGjCqJ,IAAUkD,EAAQxvB,KAAKiuB,GAEvBjyC,EAAKmuC,aAAa8D,KAClBwB,EAAczzC,EAAKguC,SAASiE,GAAQ,GAAKlE,EAAY2F,WAAWzB,MAIjEuB,GAEfb,oBA4BI,QAAJgB,GACgB5F,EACA6F,EACRC,OAAR,KAAAA,IAAQA,KAHJ,IAAJ7zC,GAKQJ,EALRK,KAAApE,OAAAA,WACgBmE,GAAhB+tC,YAAgBA,EACA/tC,EAAhB4zC,cAAgBA,EAnBZ5zC,EAAJ8zC,cAAoB,GAAI7uC,GAAAA,oBAEpBjF,EAAJ+zC,aAAmB,GAAI9uC,GAAAA,oBAsBfjF,EAAKg0C,MAAQ,GAAI/uC,GAAAA,gBAAqB4uC,KAuB9C,MAhDgD7yC,GAAhD2yC,EAAA/zC,GAKI1D,OAAJC,eAAQw3C,EAARv3C,UAAA,YAAI,WACI,MAAOP,MAAKm4C,MAAM72C,WAGtB,SAASA,GACLtB,KAAKm4C,MAAMjuC,KAAK5I,GAEhBtB,KAAKi4C,cAAc/tC,KAAKlK,KAAK+3C,cAAcP,aAAax3C,KAAK8Q,OAC7D9Q,KAAKkyC,YAAYkG,UAAYp4C,KAAKi4C,cAAc32C,uCAepDw2C,EAAJv3C,UAAA83C,QAAI,SAAQC,GAAR,GAAJn0C,GAAAnE,KACckqB,GACFouB,EAAiBC,WACjBv4C,KAAKkyC,YAAYsG,eAAe7iB,QAChC31B,KAAKi4C,cAGT,OAAO1xB,GAAAA,MAAf+N,UAAA,GAAwBpK,GACXvc,KAAKkO,EAAAA,IAAI,WAKN,MAJA1X,GAAK+zC,aAAahuC,KACd/F,EAAK4zC,cAAcL,qBAAqBvzC,EAAK8zC,cAAc32C,MAAO6C,EAAK+tC,cAGpE/tC,EAAK+zC,aAAa52C,UAIrCw2C,EAAJv3C,UAAAk4C,WAAI,aAGJX,GAhDgDY,EAAAA,2BCvGhD,QAAAC,KAAA,GAAAx0C,GAAA,OAAAJ,GAAAA,EAAAuwB,MAAAt0B,KAAA0xC,YAAA1xC,WAWYmE,GAAZg0C,MAAoB,GAAI/uC,GAAAA,sBAUxB,MArB+CjE,GAA/CwzC,EAAA50C,GAEI1D,OAAJC,eAAQq4C,EAARp4C,UAAA,YAAI,WACI,MAAOP,MAAKm4C,MAAM72C,WAGtB,SAASA,GACLtB,KAAKm4C,MAAMjuC,KAAK5I,oCAMpBq3C,EAAJp4C,UAAA83C,QAAI,SAAQC,GAAR,GAAJn0C,GAAAnE,IACQ,OAAOumB,GAAAA,MAAf+N,UAAA,IAAyBgkB,EAAiBC,WAAYv4C,KAAKm4C,QAC9CxqC,KAAKkO,EAAAA,IAAI,WAAM,MAAA1X,GAAK2M,SAG7B6nC,EAAJp4C,UAAAk4C,WAAI,aAGJE,GArB+CD,EAAAA,Y1BP/C/V,GAAA,WAEI,QAAJA,GAAuB7jC,GAAAkB,KAAvBlB,SAAuBA,EACvB,sBAHAN,KAACkD,EAAAA,UAADhD,OAAaC,SAAU;QAJvBH,KAAoBsL,EAAAA,eAOpB64B,KCFAC,GAAA,SAAA7+B,GAAA,QAAA6+B,oDAG2C,MAAXz9B,GAAhCy9B,EAAA7+B,kBAHAvF,KAACkD,EAAAA,UAADhD,OACIC,SAAU,mCAEdikC,GAAgCC,EAAAA,UAGhC,IAAoBC,eAAiB,WAAM,MAACD,GAAS,UAASC,eCe9D,QAAAC,GAAA,WAAA,QAAAA,MAAwB,MAAxBA,MACaC,GAAoDt/B,EAC7Dq/B,IAGJE,GAAA,SAAAl/B,GAqEI,QAAJk/B,GAAwBC,GAApB,GAAJ/+B,GACQJ,EADRK,KAAApE,OAAAA,WAAwBmE,GAAxB++B,iBAAwBA,EApCpB/+B,EAAJg/B,UAAwB,GAcXh/B,EAAbkS,aAA4B,GAAI/M,GAAAA,QAM5BnF,EAAJ8I,SAA8B,KAM1B9I,EAAJ6M,OAA4B,KAKxB7M,EAAJi/B,UAAe,EAGHj/B,EAAZk/B,cAAmD,OAyBnD,MAjF2Bl+B,GAA3B89B,EAAAl/B,GAGI1D,OAAJC,eAAQ2iC,EAAR1iC,UAAA,eAAI,WACI,MAAOP,MAAKqjC,+CA0DhBJ,EAAJ1iC,UAAA+W,YAAI,SAAY4S,IAEJA,EAAQoZ,eAAe,cACvBpZ,EAAQoZ,eAAe,cAEvBtjC,KAAKqW,aAAanM,QAI1B+4B,EAAJ1iC,UAAAyB,YAAI,WACIhC,KAAKqW,aAAapG,YAGtBgzB,EAAJ1iC,UAAAK,SAAI,WACIZ,KAAKqjC,cAAgB,GAAIvb,GAAAA,eACrB9nB,KAAKujC,iBAAmBvjC,KAAKwjC,gBAC7BxjC,KAAKkjC,kCAzFjB1kC,KAACC,EAAAA,UAADC,OACIC,SAAU,SAIVG,SAAU,uDACVmI,QAAS,YACT/H,gBAAiBC,EAAAA,wBAAwBC,OACzCL,cAAeC,EAAAA,kBAAkBC,KACjCyH,SAAU,gDA7BdlI,KAAI2T,EAAAA,sCAsCJsxB,gBAAAjlC,KAAKk0B,EAAAA,aAALh0B,MAAkBkkC,MAMlBW,kBAAA/kC,KAAKk0B,EAAAA,aAALh0B,MAAkBikC,IAAgBe,KAAM55B,EAAAA,gBAIxC05B,kBAAAhlC,KAAK0J,EAAAA,UAALxJ,MAAeoL,EAAAA,eAIfq5B,YAAA3kC,KAAKiB,EAAAA,MAALf,MAAW,WAIX4F,YAAA9F,KAAKiB,EAAAA,MAALf,MAAW,gBAOX6F,iBAAA/F,KAAKiB,EAAAA,MAALf,MAAW,sBAiDXukC,GAjF2BD,IChCdW,IAITC,aAAcn8B,EAAAA,QAAQ,gBAElBtG,EAAAA,MACI,wDACAyB,EAAAA,OAAQ0gB,UAAW,UAOvBniB,EAAAA,MACI,OACAyB,EAAAA,OAAQ0gB,UAAW,2BAA4B3M,UAAW,SAE9DxV,EAAAA,MACI,QACAyB,EAAAA,OAAQ0gB,UAAW,0BAA2B3M,UAAW,SAG7DhP,EAAAA,WACI,yDACAC,EAAAA,QAAQ,yDAEZD,EAAAA,WAAW,8BACP/E,EAAAA,OAAQ0gB,UAAW,6BACnB1b,EAAAA,QAAQ,0DAEZD,EAAAA,WAAW,+BACP/E,EAAAA,OAAQ0gB,UAAW,4BACnB1b,EAAAA,QAAQ,6DCSpBi8B,GAAA,WAuDI,QAAJA,GAAwB9jC,EACY4zB,EACpB3P,GAFZ,GAAJ7f,GAAAnE,IAAwBA,MAAxBD,WAAwBA,EACYC,KAApC2zB,IAAoCA,EAhCb3zB,KAAvB8jC,YAA2D,GAAIj/B,GAAAA,aAGxC7E,KAAvB+jC,gBAAgE,GAAIl/B,GAAAA,aAG7C7E,KAAvBgkC,mBAAmE,GAAIn/B,GAAAA,aAGhD7E,KAAvBikC,WAAwD,GAAIp/B,GAAAA,cAAmB,GAclE7E,KAAbkkC,kBAAyC,MAM7BlkC,KAAZmkC,sBAAoCC,EAAAA,aAAaC,MAMrCrkC,KAAK2zB,KAAO3P,IACZhkB,KAAKmkC,sBAAwBnkC,KAAK2zB,IAAI/uB,OAAOiJ,UAAU,SAACrO,GACpD2E,EAAKmgC,8BAA8B9kC,GACnCwkB,EAAkB5e,kBA0ElC,MA1HI/E,QAAJC,eACQujC,EADRtjC,UAAA,gBAAI,SACa0M,GACTjN,KAAKukC,cAAgBt3B,EACrBjN,KAAKskC,iEAsDTT,EAAJtjC,UAAAK,SAAI,WAC8B,WAAtBZ,KAAKwkC,cAA4C,MAAfxkC,KAAKgR,SACvChR,KAAKwkC,aAAexkC,KAAKykC,8BAIjCZ,EAAJtjC,UAAAyB,YAAI,WACIhC,KAAKmkC,sBAAsB5sB,eAG/BssB,EAAJtjC,UAAAmkC,sBAAI,SAAsBv0B,GAC1B,GAAcw0B,GAAc3kC,KAAK4kC,iBAAiBz0B,EAAEkW,QAC5CrmB,MAAK+jC,gBAAgBt9B,KAAKk+B,GACtBA,GACA3kC,KAAK8jC,YAAYr9B,KAAKzG,KAAKD,WAAWwB,cAAc+N,eAI5Du0B,EAAJtjC,UAAAskC,uBAAI,SAAuB10B,GAEfnQ,KAAK4kC,iBAAiBz0B,EAAEkW,UAAYrmB,KAAK4kC,iBAAiB5kC,KAAKwkC,eAC/DxkC,KAAKikC,WAAWx9B,OAGhBzG,KAAK4kC,iBAAiBz0B,EAAE20B,aAAe9kC,KAAK4kC,iBAAiB5kC,KAAKwkC,eAClExkC,KAAKgkC,mBAAmBv9B,QAKhCo9B,EAAJtjC,UAAAwkC,mBAAI,WACI,MAAO/kC,MAAK2zB,KAA0B,QAAnB3zB,KAAK2zB,IAAIryB,MAAkB,MAAQ,OAI1DuiC,EAAJtjC,UAAAqkC,iBAAI,SAAiB33B,GACb,MAAoB,WAAbA,GACU,uBAAbA,GACa,wBAAbA,GAIA42B,EAAZtjC,UAAA+jC,8BAAI,SAAsC3Q,OAA1C,KAAAA,IAA0CA,EAAiB3zB,KAAK+kC,sBACpD/kC,KAAKukC,cAAgB,EACrBvkC,KAAKwkC,aAAuB,QAAR7Q,EAAgB,OAAS,QACtC3zB,KAAKukC,cAAgB,EAC5BvkC,KAAKwkC,aAAuB,QAAR7Q,EAAgB,QAAU,OAE9C3zB,KAAKwkC,aAAe,UAQpBX,EAAZtjC,UAAAkkC,0BAAI,WACJ,GAAc9Q,GAAM3zB,KAAK+kC,oBAEjB,OAAa,QAARpR,GAAiB3zB,KAAKgR,QAAU,GAAe,QAAR2iB,GAAiB3zB,KAAKgR,OAAS,EAChE,qBAGJ,sCAtIfxS,KAACC,EAAAA,UAADC,OACIC,SAAU,cACVG,SAAJ,mSACID,QAAS,uHACTE,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,OACzCoI,YAAam8B,GAAiBC,cAC9B18B,MACIC,MAAO,uDAnDf3I,KAAIa,EAAAA,aAUJb,KAAS8T,EAAAA,eAATtK,aAAAxJ,KAyFiB+T,EAAAA,aA1GjB/T,KAAIsJ,EAAAA,uCAgEJmF,WAAAzO,KAAKiB,EAAAA,QAULqkC,cAAAtlC,KAAK2J,EAAAA,SAGL47B,kBAAAvlC,KAAK2J,EAAAA,SAGL67B,qBAAAxlC,KAAK2J,EAAAA,SAGL87B,aAAAzlC,KAAK2J,EAAAA,SAGL68B,aAAAxmC,KAAK0J,EAAAA,UAALxJ,MAAeumC,EAAAA,uBAGfC,UAAA1mC,KAAKiB,EAAAA,MAALf,MAAW,aAGXsS,SAAAxS,KAAKiB,EAAAA,QAKLykC,oBAAA1lC,KAAKiB,EAAAA,SAyFLokC,KAMAsB,GAAA,SAAAphC,GASI,QAAJohC,GACQC,EACAlC,EAC6Ch8B,GAHjD,GAAJ/C,GAIQJ,EAJRK,KAAApE,KAIcolC,EAA0BlC,IAJxCljC,WAGqDmE,GAArD+C,KAAqDA,EAPzC/C,EAAZkhC,aAA2BjB,EAAAA,aAAaC,MAE5BlgC,EAAZmhC,WAAyBlB,EAAAA,aAAaC,QAgCtC,MApCqCl/B,GAArCggC,EAAAphC,GAcIohC,EAAJ5kC,UAAAK,SAAI,WAAA,GAAJuD,GAAAnE,IACQ+D,GAARxD,UAAcK,SAAdwD,KAAApE,MAEQA,KAAKqlC,aAAerlC,KAAKkH,KAAK68B,gBACzBp2B,KAAKuoB,EAAAA,UAAUl2B,KAAKkH,KAAK09B,iBAAiB5kC,KAAKkH,KAAKs9B,gBACpD32B,UAAU,SAAC82B,GACJA,IAAgBxgC,EAAKqK,eACrBrK,EAAKwM,OAAOxM,EAAK+C,KAAKg+B,WAIlCllC,KAAKslC,WAAatlC,KAAKkH,KAAK88B,mBAAmBn2B,UAAU,WACrD1J,EAAKoK,YAKb42B,EAAJ5kC,UAAAyB,YAAI,WACI+B,EAARxD,UAAcyB,YAAdoC,KAAApE,MACQA,KAAKqlC,aAAa9tB,cAClBvX,KAAKslC,WAAW/tB,8BArCxB/Y,KAACkD,EAAAA,UAADhD,OACIC,SAAU,0DArLdH,KAAI+mC,EAAAA,2BACJ/mC,KAAI2T,EAAAA,mBA+LJ3T,KAA2DqlC,GAA3D77B,aAAAxJ,KAAS6T,EAAAA,OAAT3T,MAAgBqI,EAAAA,WAAW,WAAM,MAAA88B,YA2BjCsB,GApCqCxf,EAAAA,+BC5LrC,QAAA6f,MAAoC,MAApCA,MACaC,GACsB/hC,EAAc8hC,IAMjDE,GAAA,SAAA3hC,GASI,QAAJ2hC,GAAuB3lC,GAAnB,GAAJoE,GACQJ,EADRK,KAAApE,OAAAA,WAAuBmE,GAAvBpE,WAAuBA,IAgBvB,MAjBuCoF,GAAvCugC,EAAA3hC,GAMI2hC,EAAJnlC,UAAA+E,MAAI,WACItF,KAAKD,WAAWwB,cAAc+D,SAGlCogC,EAAJnlC,UAAAolC,cAAI,WACI,MAAO3lC,MAAKD,WAAWwB,cAAcqkC,YAGzCF,EAAJnlC,UAAAslC,eAAI,WACI,MAAO7lC,MAAKD,WAAWwB,cAAcukC,4BAvB7CtnC,KAACkD,EAAAA,UAADhD,OACIC,SAAU,sBACVsI,QAAS,YACTC,MACII,sBAAuB,WACvBy+B,uBAAwB,sDAvBhCvnC,KAAoBa,EAAAA,cA2CpBqmC,GAjBuCD,kBCsBvC,QAAAO,MAA8B,MAA9BA,MASAC,GAAA,SAAAliC,GAkHI,QAAJkiC,GACgBlmC,EACAikB,EACA0P,EACYC,EACZ/nB,GALZ,GAAJzH,GAOQJ,EAPRK,KAAApE,OAAAA,WACgBmE,GAAhBpE,WAAgBA,EACAoE,EAAhB6f,kBAAgBA,EACA7f,EAAhBuvB,cAAgBA,EACYvvB,EAA5BwvB,IAA4BA,EACZxvB,EAAhByH,OAAgBA,EA/CZzH,EAAJ+hC,wBAA6B,EAGzB/hC,EAAJgiC,oBAAyB,EAGrBhiC,EAAJiiC,qBAA0B,EAIbjiC,EAAbkiC,mBAAwD,GAAIxhC,GAAAA,aAI/CV,EAAbmiC,aAAkD,GAAIzhC,GAAAA,aAG1CV,EAAZoiC,gBAA8B,EAGlBpiC,EAAZqiC,sBAAmC,EAGdriC,EAArBmI,UAAiC,GAAIhD,GAAAA,QAiBzBnF,EAAZsiC,eAAqC,IAsUrC,MAzaiCthC,GAAjC8gC,EAAAliC,GAGI1D,OAAJC,eACQ2lC,EADR1lC,UAAA,qBAAI,WAEI,MAAOP,MAAKymC,oBAEhB,SAAkBnlC,GACtB,GAAcolC,GAAehmC,EAAAA,qBAAqBY,EAC1CtB,MAAKwmC,qBAAuBxmC,KAAKymC,iBAAmBC,EACpD1mC,KAAKymC,eAAiBC,EAElB1mC,KAAK+tB,YACL/tB,KAAK+tB,WAAW2S,iBAAiBgG,oCAKzCrmC,OAAJC,eAAQ2lC,EAAR1lC,UAAA,kBAAI,WACI,MAAOP,MAAK+tB,WAAa/tB,KAAK+tB,WAA0B,gBAAI,OAIhE,SAAezsB,GAENtB,KAAK6/B,aAAav+B,IACnBtB,KAAK2mC,aAAerlC,GACnBtB,KAAK+tB,YAKV/tB,KAAK+tB,WAAWG,cAAc5sB,oCAIlCjB,OAAJC,eAAQ2lC,EAAR1lC,UAAA,sBAAI,WACI,MAAOP,MAAKumC,qBAEhB,SAAmBK,GACf5mC,KAAKumC,gBAAkBtuB,KAAKC,IACxB,EACAD,KAAKoX,IAAIrvB,KAAK6mC,uBAAwBD,IAK1C5mC,KAAK8mC,uBAAwB,EAC7B9mC,KAAK+mC,0DA+DTd,EAAJ1lC,UAAAymC,sBAAI,WAEQhnC,KAAKinC,gBAAkBjnC,KAAKknC,cAAc5pB,SAC1Ctd,KAAKmnC,mBACLnnC,KAAKinC,cAAgBjnC,KAAKknC,cAAc5pB,OACxCtd,KAAKgkB,kBAAkB5e,gBAKvBpF,KAAKwmC,uBACLxmC,KAAKonC,cAAcpnC,KAAKymC,gBACxBzmC,KAAK+mC,yBACL/mC,KAAKwmC,sBAAuB,EAC5BxmC,KAAKgkB,kBAAkB5e,gBAKvBpF,KAAK8mC,wBACL9mC,KAAKqnC,0BACLrnC,KAAK8mC,uBAAwB,EAC7B9mC,KAAKgkB,kBAAkB5e,iBAI/B6gC,EAAJ1lC,UAAA2P,cAAI,SAActK,GACV,OAAQA,EAAMwK,SACV,IAAKgpB,GAAAA,KACDp5B,KAAK+tB,WAAWE,qBAChBroB,EAAM4W,gBACN,MACJ,KAAK6c,GAAAA,IACDr5B,KAAK+tB,WAAWuL,oBAChB1zB,EAAM4W,gBACN,MACJ,KAAKuc,GAAAA,MACL,IAAKC,GAAAA,MACDh5B,KAAKqmC,mBAAmB5/B,KAAKzG,KAAK2mC,YAClC/gC,EAAM4W,gBACN,MACJ,SACIxc,KAAK+tB,WAAWmL,UAAUtzB,KAItCqgC,EAAJ1lC,UAAAi1B,mBAAI,WAAA,GAAJrxB,GAAAnE,KACcsnC,EAAYtnC,KAAK2zB,IAAM3zB,KAAK2zB,IAAI/uB,OAAS2iC,EAAAA,GAAa,MACtDC,EAASxnC,KAAK0zB,cAAc9uB,OAxMX,KAyMjB6iC,EAAU,WACZtjC,EAAKgjC,mBAGTnnC,MAAK+tB,WAAa,GAAI2Q,GAAAA,gBAAgB1+B,KAAKknC,eACtCtI,0BAA0B5+B,KAAK+kC,sBAC/B2C,WAEL1nC,KAAK+tB,WAAW2S,iBAAiB,OAIAtuB,WAA1Bu1B,uBACDF,IACAE,sBAAsBF,GAI5BlhB,EAAAA,MAAM+gB,EAAWE,GACZ75B,KAAKC,EAAAA,UAAU5N,KAAKsM,YACpBuB,UAAU,WACP45B,IACAtjC,EAAK4pB,WAAW6Q,0BACZz6B,EAAK4gC,wBAOjB/kC,KAAK+tB,WAAWnpB,OACX+I,KAAKC,EAAAA,UAAU5N,KAAKsM,YACpBuB,UAAU,SAAC+5B,GACRzjC,EAAKmiC,aAAa7/B,KAAKmhC,GACvBzjC,EAAK0jC,YAAYD,MAI7B3B,EAAJ1lC,UAAAyB,YAAI,WACIhC,KAAKsM,UAAUpC,OACflK,KAAKsM,UAAU2D,YAMnBg2B,EAAJ1lC,UAAAunC,iBAAI,WAAA,GAAJ3jC,GAAAnE,KACc+nC,EAAc/nC,KAAKD,WAAWwB,cAAcwmC,WAMlD,IAAIA,IAAgB/nC,KAAKgoC,mBAAoB,CACzChoC,KAAKgoC,mBAAqBD,CAEtC,IAAkBE,GAAe,WACjB9jC,EAAKgjC,mBACLhjC,EAAK6f,kBAAkB5e,eAM3BpF,MAAK4L,OAAS5L,KAAK4L,OAAOqC,IAAIg6B,GAAgBA,MAWtDhC,EAAJ1lC,UAAA4mC,iBAAI,WACInnC,KAAKkoC,yBACLloC,KAAK+mC,yBACL/mC,KAAKqnC,2BAOTpB,EAAJ1lC,UAAAs/B,aAAI,SAAanW,GACT,IAAK1pB,KAAKknC,cACN,OAAO,CAGnB,IAAciB,GAAMnoC,KAAKknC,cACXlnC,KAAKknC,cAAcra,UAAUnD,GAC7B,IAEN,SAASye,IAAQA,EAAIzoC,UAOzBumC,EAAJ1lC,UAAAsnC,YAAI,SAAY3jC,GAKR,GAJIlE,KAAKkmC,wBACLlmC,KAAKonC,cAAcljC,GAGnBlE,KAAKknC,eAAiBlnC,KAAKknC,cAAc5pB,OAAQ,CACjDtd,KAAKknC,cAAcra,UAAU3oB,GAAUoB,OAKnD,IAAkB8iC,GAAcpoC,KAAKqoC,iBAAiB9mC,cACpCoyB,EAAM3zB,KAAK+kC,oBAGbqD,GAAYE,WADJ,QAAR3U,EACyB,EAGrByU,EAAYG,YAAcH,EAAYtC,cAMtDG,EAAJ1lC,UAAAwkC,mBAAI,WACI,MAAO/kC,MAAK2zB,KAA0B,QAAnB3zB,KAAK2zB,IAAIryB,MAAkB,MAAQ,OAI1D2kC,EAAJ1lC,UAAA8mC,wBAAI,WACJ,GAAcmB,GAAiBxoC,KAAKwoC,eACtBC,EAC4B,QAA9BzoC,KAAK+kC,sBACEyD,EACDA,CAOVxoC,MAAK0oC,QAAQnnC,cAAcqB,MAAM0gB,UAAY,cAAcrL,KAAK2Y,MAAM6X,GAA9E,MAKQzoC,KAAK0oC,QAAQnnC,cAAc+mC,WAAa,GAW5CrC,EAAJ1lC,UAAAooC,aAAI,SAAaC,GACjB,GAAcC,GAAa7oC,KAAKqoC,iBAAiB9mC,cAAcukC,WAGvD9lC,MAAKwoC,iBACe,WAAdI,GAA0B,EAAI,GAAKC,EA3Wf,GAoX9B5C,EAAJ1lC,UAAA6mC,cAAI,SAAc0B,GAClB,GAAcC,GAAgB/oC,KAAKknC,cACrBlnC,KAAKknC,cAAcra,UAAUic,GAC7B,IAEN,IAAKC,EAAL,CAKR,GAEYC,GACAC,EAHEJ,EAAa7oC,KAAKqoC,iBAAiB9mC,cAAcukC,WAKrB,SAA9B9lC,KAAK+kC,sBACLiE,EAAiBD,EAAcpD,gBAC/BsD,EAAgBD,EAAiBD,EAAclD,mBAE/CoD,EACIjpC,KAAK0oC,QAAQnnC,cAAcukC,YAC3BiD,EAAcpD,gBAClBqD,EAAiBC,EAAgBF,EAAclD,iBAG3D,IAAcqD,GAAmBlpC,KAAKwoC,eACxBW,EAAkBnpC,KAAKwoC,eAAiBK,CAE1CG,GAAiBE,EAEjBlpC,KAAKwoC,gBACDU,EAAmBF,EArYJ,GAsYZC,EAAgBE,IAEvBnpC,KAAKwoC,gBACDS,EAAgBE,EAzYD,MAqZ3BlD,EAAJ1lC,UAAA2nC,uBAAI,WACJ,GAAckB,GACFppC,KAAK0oC,QAAQnnC,cAAcgnC,YAC3BvoC,KAAKD,WAAWwB,cAAcukC,WAE7BsD,KACDppC,KAAKwoC,eAAiB,GAGtBY,IAAcppC,KAAKkmC,wBACnBlmC,KAAKgkB,kBAAkB5e,eAG3BpF,KAAKkmC,uBAAyBkD,GAYlCnD,EAAJ1lC,UAAAwmC,uBAAI,WAEI/mC,KAAKomC,oBAA8C,IAAxBpmC,KAAKwoC,eAChCxoC,KAAKmmC,mBACDnmC,KAAKwoC,iBAAmBxoC,KAAK6mC,uBACjC7mC,KAAKgkB,kBAAkB5e,gBAU3B6gC,EAAJ1lC,UAAAsmC,qBAAI,WAII,MAHwB7mC,MAAK0oC,QAAQnnC,cAAcgnC,YAChCvoC,KAAKqoC,iBAAiB9mC,cAAcukC,aAEhB,kBApb/CtnC,KAACC,EAAAA,UAADC,OACIC,SAAU,gBACVG,SAAJ,2vBACID,QAAS,44CACTE,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,OACzC8H,MACIC,MAAO,gBACPkiC,qDACI,yBACJC,4BAA6B,yEA5DrC9qC,KAAIa,EAAAA,aAHJb,KAAIsJ,EAAAA,oBAkBJtJ,KAAS0zB,EAAAA,gBAHT1zB,KAAoB8T,EAAAA,eAApBtK,aAAAxJ,KA4JS+T,EAAAA,aArKT/T,KAAIc,EAAAA,4BA+DJ43B,gBAAA14B,KAAKiB,EAAAA,QAgDLynC,gBAAA1oC,KAAKo0B,EAAAA,gBAALl0B,MAAqBgnC,MAErB2C,mBAAA7pC,KAAK0J,EAAAA,UAALxJ,MAAe,sBAEfgqC,UAAAlqC,KAAK0J,EAAAA,UAALxJ,MAAe,aAaf2nC,qBAAA7nC,KAAK2J,EAAAA,SAILm+B,eAAA9nC,KAAK2J,EAAAA,UAiWL89B,GAzaiCD,ICrCjCuD,GAAA,WAAA,QAAAA,MAIoC,sBAJpC/qC,KAACkD,EAAAA,UAADhD,OACIC,SAAU,+DACVuI,MAAQC,MAAO,0BAEnBoiC,KAEAC,GAAA,WAAA,QAAAA,MAI0C,sBAJ1ChrC,KAACkD,EAAAA,UAADhD,OACIC,SAAU,6EACVuI,MAAQC,MAAO,wCAEnBqiC,KAEAC,GAAA,WAAA,QAAAA,MAIuC,sBAJvCjrC,KAACkD,EAAAA,UAADhD,OACIC,SAAU,uEACVuI,MAAQC,MAAO,qCAEnBsiC,KAEAC,GAAA,WAAA,QAAAA,MAIsC,sBAJtClrC,KAACkD,EAAAA,UAADhD,OACIC,SAAU,mEACVuI,MAAQC,MAAO,mCAEnBuiC,KAGIC,GAAS,gBAGb,QAAAC,MAKA,MAAAA,MAYaC,GAAiB,GAAIz+B,GAAAA,eAAe,gCAM7C,QAAJ0+B,GAAuBxmC,GAAAtD,KAAvBsD,YAAuBA,EACvB,MAAAwmC,MACaC,GAGTtmC,EAAWC,EAAcomC,KAM7BE,GAAA,SAAAjmC,GAwEI,QAAJimC,GACQjqC,EACQikB,EACoBimB,EACQC,GAJxC,GAAJ/lC,GAMQJ,EANRK,KAAApE,KAMcD,IANdC,WAEgBmE,GAAhB6f,kBAAgBA,EArCH7f,EAAbgmC,eAAmD,QAM5BhmC,EAAvBimC,oBAAmE,GAAIvlC,GAAAA,aAGhDV,EAAvBkmC,YACQ,GAAIxlC,GAAAA,aAGWV,EAAvBmmC,cAA2D,GAAIzlC,GAAAA,aAGxCV,EAAvBomC,kBACQ,GAAI1lC,GAAAA,cAA+B,GAG/BV,EAAZqmC,cAA2C,EAG/BrmC,EAAZsmC,qBAA2C,EAG/BtmC,EAAZumC,iBAA+BtG,EAAAA,aAAaC,MAGhClgC,EAAZwmC,qBAAmCvG,EAAAA,aAAaC,MACpClgC,EAAZymC,gBAAsC,EAC1BzmC,EAAZsiC,eAA4C,KAYpCtiC,EAAK0mC,SAAWrqC,EAAAA,sBAAsBypC,GAEtC9lC,EAAK2mC,QAAUnB,KACfxlC,EAAK+/B,kBAAoBgG,GAAiBA,EAAchG,kBACpDgG,EAAchG,kBAAoB,QA4K9C,MAlPgC/+B,GAAhC6kC,EAAAjmC,GAKI1D,OAAJC,eACQ0pC,EADRzpC,UAAA,qBAAI,WAC+B,MAAOP,MAAK4qC,oBAC3C,SAAkBtpC,GAAkBtB,KAAK4qC,eAAiBpqC,EAAAA,sBAAsBc,oCAGhFjB,OAAJC,eACQ0pC,EADRzpC,UAAA,qBAAI,WACqC,MAAOP,MAAKymC,oBACjD,SAAkBnlC,GACdtB,KAAKwqC,cAAgB9pC,EAAAA,qBAAqBY,EAAO,uCAkErD0oC,EAAJzpC,UAAAymC,sBAAI,WAAA,GAAJ7iC,GAAAnE,KAGcwqC,EAAgBxqC,KAAKwqC,cAAgBxqC,KAAK+qC,cAAc/qC,KAAKwqC,cAInE,IAAIxqC,KAAKymC,iBAAmB+D,EAAe,CACnD,GAAkBQ,GAAoC,MAAvBhrC,KAAKymC,cAEnBuE,IACDhrC,KAAKuqC,kBAAkB9jC,KAAKzG,KAAKirC,kBAAkBT,IAKvD1Q,QAAQC,UAAUC,KAAK,WACnB71B,EAAK+mC,KAAKr7B,QAAQ,SAACs4B,EAAKze,GAAU,MAAAye,GAAI/E,SAAW1Z,IAAU8gB,IAEtDQ,GACD7mC,EAAKimC,oBAAoB3jC,KAAK+jC,KAM1CxqC,KAAKkrC,KAAKr7B,QAAQ,SAACs4B,EAAYze,GAC3Bye,EAAIl7B,SAAWyc,EAAQ8gB,EAII,MAAvBrmC,EAAKsiC,gBAA2C,IAAjB0B,EAAIl7B,UAAmBk7B,EAAIn3B,SAC1Dm3B,EAAIn3B,OAASw5B,EAAgBrmC,EAAKsiC,kBAItCzmC,KAAKymC,iBAAmB+D,IACxBxqC,KAAKymC,eAAiB+D,EACtBxqC,KAAKgkB,kBAAkB5e,iBAI/B4kC,EAAJzpC,UAAAi1B,mBAAI,WAAA,GAAJrxB,GAAAnE,IACQA,MAAKmrC,uBAILnrC,KAAK0qC,iBAAmB1qC,KAAKkrC,KAAKhhB,QAAQrc,UAAU,WAKhD,GAJsB1J,EAAK4mC,cAAc5mC,EAAKqmC,iBAIxBrmC,EAAKsiC,eAGvB,IAAK,GAFCyE,GAAO/mC,EAAK+mC,KAAKre,UAEdue,EAAI,EAAGA,EAAIF,EAAK5tB,OAAQ8tB,IAC7B,GAAIF,EAAKE,GAAGhI,SAAU,CAIlBj/B,EAAKqmC,cAAgBrmC,EAAKsiC,eAAiB2E,CAC3C,OAKZjnC,EAAKgnC,uBACLhnC,EAAK6f,kBAAkB5e,kBAI/B4kC,EAAJzpC,UAAAyB,YAAI,WACIhC,KAAK0qC,iBAAiBnzB,cACtBvX,KAAK2qC,qBAAqBpzB,eAG9ByyB,EAAJzpC,UAAA6X,aAAI,SAAasR,GACT1pB,KAAKqqC,YAAY5jC,KAAKzG,KAAKirC,kBAAkBvhB,KAIjDsgB,EAAJzpC,UAAA8qC,cAAI,SAAcD,GACV,MAAO,gBAAgBprC,KAAK8qC,QAApC,IAA+CM,GAI3CpB,EAAJzpC,UAAA+qC,gBAAI,SAAgBF,GACZ,MAAO,kBAAkBprC,KAAK8qC,QAAtC,IAAiDM,GAO7CpB,EAAJzpC,UAAAgrC,wBAAI,SAAwBC,GACpB,GAAKxrC,KAAK4qC,gBAAmB5qC,KAAKyqC,qBAAlC,CAER,GAAcgB,GAAuBzrC,KAAK0rC,eAAenqC,aAEjDkqC,GAAQ7oC,MAAMoV,OAAYhY,KAAKyqC,qBAAvC,KAIYzqC,KAAK0rC,eAAenqC,cAAcu2B,eAClC2T,EAAQ7oC,MAAMoV,OAAYwzB,EAAtC,QAKIxB,EAAJzpC,UAAAorC,2BAAI,WACI3rC,KAAKyqC,qBAAuBzqC,KAAK0rC,eAAenqC,cAAc+N,aAC9DtP,KAAK0rC,eAAenqC,cAAcqB,MAAMoV,OAAS,GACjDhY,KAAKsqC,cAAc7jC,QAIvBujC,EAAJzpC,UAAAk8B,YAAI,SAAY0L,EAAYyD,EAAwBliB,GACvCye,EAAIzoC,WACLM,KAAKk3B,cAAgB0U,EAAUjF,WAAajd,IAKpDsgB,EAAJzpC,UAAAsrC,YAAI,SAAY1D,EAAYze,GACpB,MAAIye,GAAIzoC,SACG,KAGJM,KAAKk3B,gBAAkBxN,EAAQ,GAAK,GAGvCsgB,EAAZzpC,UAAA0qC,kBAAI,SAA0BvhB,GAC9B,GAAc9jB,GAAQ,GAAIgkC,GAMlB,OALAhkC,GAAM8jB,MAAQA,EACV1pB,KAAKkrC,MAAQlrC,KAAKkrC,KAAK5tB,SACvB1X,EAAMuiC,IAAMnoC,KAAKkrC,KAAKre,UAAUnD,IAG7B9jB,GASHokC,EAAZzpC,UAAA4qC,qBAAI,WAAA,GAAJhnC,GAAAnE,IACYA,MAAK2qC,sBACL3qC,KAAK2qC,qBAAqBpzB,cAG9BvX,KAAK2qC,qBAAuBpkB,EAAAA,MAApC+N,UAAA,GAA6Ct0B,KAAKkrC,KAAKrvB,IAAI,SAACssB,GAAQ,MAAAA,GAAI9xB,gBAC3DxI,UAAU,WAAM,MAAA1J,GAAK6f,kBAAkB5e,kBAIxC4kC,EAAZzpC,UAAAwqC,cAAI,SAAsBrhB,GAIlB,MAAOzR,MAAKoX,IAAIrvB,KAAKkrC,KAAK5tB,OAAS,EAAGrF,KAAKC,IAAIwR,GAAS,EAAG,oBA9PnElrB,KAACC,EAAAA,UAADC,OACIC,SAAU,eACV+H,SAAU,aACV5H,SAAJ,s+CACID,QAAS,s0FACTE,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,OACzC6H,QAAS,SACTC,MACIC,MAAO,eACP2kC,sCAAuC,gBACvCC,uCAAwC,sEAnGhDvtC,KAAIa,EAAAA,aAHJb,KAAIsJ,EAAAA,oBAsKJtJ,KAAAuJ,OAAAC,aAAAxJ,KAASyJ,EAAAA,UAATvJ,MAAmB,qBACnBF,SAAA4T,GAAApK,aAAAxJ,KAAS6T,EAAAA,OAAT3T,MAAgBmrC,MAAhBrrC,KAAiC+T,EAAAA,gCAzDjCy5B,gBAAAxtC,KAAKiB,EAAAA,QAKLy3B,gBAAA14B,KAAKiB,EAAAA,QAMLyrC,OAAA1sC,KAAKo0B,EAAAA,gBAALl0B,MAAqBukC,MAErByI,iBAAAltC,KAAK0J,EAAAA,UAALxJ,MAAe,oBAEfktC,YAAAptC,KAAK0J,EAAAA,UAALxJ,MAAe,eAGfyrC,iBAAA3rC,KAAKiB,EAAAA,QAGLykC,oBAAA1lC,KAAKiB,EAAAA,QAGL2qC,sBAAA5rC,KAAK2J,EAAAA,SAGLkiC,cAAA7rC,KAAK2J,EAAAA,SAILmiC,gBAAA9rC,KAAK2J,EAAAA,SAGLoiC,oBAAA/rC,KAAK2J,EAAAA,UA2ML6hC,GAlPgCD,kBCjF5B,QAAJkC,GAAuB3oC,GAAAtD,KAAvBsD,YAAuBA,EACvB,MAAA2oC,MACaC,GACazoC,EAAWwoC,IAKrCE,GAAA,SAAApoC,GAYQ,QAARooC,GAAoBpsC,GACpB,MAAYgE,GAAZK,KAAApE,KAAkBD,IAAlBC,KAEK,MALyBmF,GAA9BgnC,EAAApoC,kBAVAvF,KAACC,EAAAA,UAADC,OACIC,SAAU,mBACV+H,SAAU,wBACVO,QAAS,SACTnI,SAAJ,4DACID,QAAS,q4GACTqI,MAAQC,MAAO,kBACfpI,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,+CAvC7CZ,KAAIa,EAAAA,cA8CJ8sC,GAL8BD,kBAQ9B,QAAAE,MAA4B,MAA5BA,MACaC,GACc7oC,EAAcE,EAAc0oC,KAKvDE,GAAA,SAAAvoC,GA6BI,QAAJuoC,GACevsC,EACgBmE,EACfmP,GAHZ,GAAJlP,GAKQJ,EALRK,KAAApE,OAAAA,WACemE,GAAfpE,WAAeA,EAECoE,EAAhBkP,aAAgBA,EALFlP,EAAdi/B,UAAkC,EAS1Bj/B,EAAKD,SAAWe,SAASf,IAAa,EACtCC,EAAKkP,aAAanO,QAAQf,EAAKpE,WAAWwB,iBAMlD,MA9B+B4D,GAA/BmnC,EAAAvoC,GAGI1D,OAAJC,eACQgsC,EADR/rC,UAAA,cAAI,WAEI,MAAOP,MAAKojC,cAEhB,SAAW9hC,GACHA,IAAUtB,KAAKojC,WACfpjC,KAAKojC,SAAW9hC,oCAkBxBgrC,EAAJ/rC,UAAAyB,YAAI,WACIhC,KAAKqT,aAAahO,eAAerF,KAAKD,WAAWwB,+BAzCzD/C,KAACkD,EAAAA,UAADhD,OACIC,SAAU,6BACV+H,SAAU,YACVO,QAAS,WAAY,YACrBC,MACIC,MAAO,cACPolC,sBAAuB,SACvBxG,uBAAwB,sBACxByG,kBAAmB,WACnBllC,sBAAuB,WACvBmlC,oBAAqB,kDAlE7BjuC,KAAIa,EAAAA,aAuFJb,KAAAuJ,OAAAC,aAAAxJ,KAASyJ,EAAAA,UAATvJ,MAAmB,gBAlFnBF,KAASqJ,EAAAA,kCAmET6kC,SAAAluC,KAAKiB,EAAAA,SA2BL6sC,GA9B+BD,ICpD/BM,GAAA,WAAA,QAAAA,MAsC2B,sBAtC3BnuC,KAACsE,EAAAA,SAADpE,OACIqE,SACIC,EAAAA,aACAsF,GACAwiB,EAAAA,aACAziB,EAAAA,YAGJnF,SACIoF,GACA0hC,GACApH,GACAK,GACAkJ,GACAG,GACA3J,GACA4G,GACAC,GACAC,GACAC,IAEJvmC,cACI6mC,GACApH,GACAK,GACAyC,GACAyG,GACAG,GACAzI,GACAsB,GACAc,GACAtD,GACA4G,GACAC,GACAC,GACAC,QAGRiD,KCjDa9K,GAA0B,GAAIz2B,GAAAA,eAAqC,yCd4B5E,QAAJwhC,GAAuBpmC,EAAsB+mB,EAA0BiG,OAAvE,KAAAA,IAAuEA,GAAvE,GAAuBxzB,KAAvBwG,OAAuBA,EAAsBxG,KAA7CutB,SAA6CA,EAA0BvtB,KAAvEwzB,YAAuEA,EACvE,MAAAoZ,MAGM7Q,IAAuB,gBAM7BsB,GAAA,WAAA,QAAAA,MAI0B,sBAJ1B7+B,KAACkD,EAAAA,UAADhD,OACIC,SAAU,+BACVuI,MAAQC,MAAO,qBAEnBk2B,KAMAE,GAAA,WAAA,QAAAA,MAIgC,sBAJhC/+B,KAACkD,EAAAA,UAADhD,OACIC,SAAU,4CACVuI,MAAQC,MAAO,4BAEnBo2B,KAEAsP,GAAA,WAEI,QAAJA,GAAuBvpC,GAAAtD,KAAvBsD,YAAuBA,EAEvB,MAAAupC,MAGanP,GAAoEj6B,EAAWC,EAAcmpC,KAG1Gra,GAAA,SAAAzuB,GAqII,QAAJyuB,GAAuBzyB,EAAgC+8B,GAAnD,GAAJ34B,GACQJ,EADRK,KAAApE,KACcD,IADdC,WAAuBmE,GAAvBpE,WAAuBA,EAAgCoE,EAAvD24B,QAAuDA,EA5G1C34B,EAAb0yB,QAAuB,GAAIvtB,GAAAA,QAGdnF,EAAbmY,OAAsB,GAAIhT,GAAAA,QAKtBnF,EAAJo4B,UAAwB,EAGpBp4B,EAAJs6B,mBAAiC,EAcVt6B,EAAvBoQ,gBACQ,GAAI1P,GAAAA,aAGWV,EAAvBmI,UAA6D,GAAIzH,GAAAA,aAG1CV,EAAvB2xB,QAA2D,GAAIjxB,GAAAA,aAiBnDV,EAAZi4B,WAAiC,EA+BrBj4B,EAAZi6B,aAAmC,EAcvBj6B,EAAZ2oC,YAAkC,EAYtB3oC,EAAZjE,WAAiC,EAKzBiE,EAAKy3B,mBAELz3B,EAAK5C,cAAgBxB,EAAWwB,gBA6JxC,MAhR2B4D,GAA3BqtB,EAAAzuB,GAqCI1D,OAAJC,eACQkyB,EADRjyB,UAAA,gBAAI,WAEI,MAAOP,MAAKo8B,eAGhB,SAAa96B,GACjB,GAAcolC,GAAelmC,EAAAA,sBAAsBc,EAEvColC,KAAiB1mC,KAAKo8B,YACtBp8B,KAAKo8B,UAAYsK,EACjB1mC,KAAKq8B,4DAObh8B,OAAJC,eACQkyB,EADRjyB,UAAA,aAAI,WAEI,WAAuB6R,KAAhBpS,KAAKwtB,OACNxtB,KAAKwtB,OACLxtB,KAAKD,WAAWwB,cAAcwmC,iBAGxC,SAAUzmC,GACNtB,KAAKwtB,OAASlsB,mCAWlBjB,OAAJC,eACQkyB,EADRjyB,UAAA,kBAAI,WAEI,MAAOP,MAAKo+B,aAAep+B,KAAKy+B,uBAGpC,SAAen9B,GACXtB,KAAKo+B,YAAc59B,EAAAA,sBAAsBc,oCAQ7CjB,OAAJC,eACQkyB,EADRjyB,UAAA,iBAAI,WAEI,MAAOP,MAAK8sC,gBAGhB,SAAcxrC,GACVtB,KAAK8sC,WAAatsC,EAAAA,sBAAsBc;4EAK5CjB,OAAJC,eAAQkyB,EAARjyB,UAAA,gBAAI,WACI,MAAOP,MAAKE,eAGhB,SAAaoB,GACLA,IAAUtB,KAAKN,WACfM,KAAKE,UAAYoB,oCAczBkxB,EAAJjyB,UAAAi1B,mBAAI,WACIx1B,KAAKk7B,+BAGT1I,EAAJjyB,UAAA26B,4BAAI,WACJ,GAAcC,GAAQn7B,KAAKo7B,gBAAgBvf,IAAI,SAACiQ,GAAS,MAAAA,GAAKxoB,YAAY/B,eAElE,IAAqB,IAAjB45B,EAAM7d,OAAc,CAChC,GAAkB+d,GAAcF,EAAM,EAErBE,GAAYC,wBAA2BD,EAAYE,qBAChDF,EAAYG,cACZH,EAAYnW,UAAUC,IAAI,gBAC1BnlB,KAAKuB,cAAc2jB,UAAUC,IAAI,iBAGjCkW,EAAYI,kBACZJ,EAAYnW,UAAUC,IAAI,iBAC1BnlB,KAAKuB,cAAc2jB,UAAUC,IAAI,uBAGtC,IAAIgW,EAAM7d,OAAS,EAAG,CACrC,GAAkBoe,GAAmBP,EAAM,GACzBQ,EAAoBR,EAAM,EAEhCO,GAAiBxW,UAAUC,IAAI,gBAC/BwW,EAAkBzW,UAAUC,IAAI,mBAIxCqN,EAAJjyB,UAAAq7B,iBAAI,WAEI,IAAmB,GAA3BC,GAAA,EAA2BC,EAA3BC,GAA2BF,EAA3BC,EAAAxe,OAA2Bue,IAAqB,CAAnC,GAAMG,GAAnBF,EAAAD,EACY,IACI77B,KAAKD,WAAWwB,cAAc06B,aAAaD,IAC3Ch8B,KAAKD,WAAWwB,cAAc26B,QAAQC,gBAAkBH,EAIpD,WAFCh8B,MAAKD,WAAwB,cAAiBmlB,UAAUC,IAAI6W,GAKxEh8B,KAAKD,WAAwB,cAAiBmlB,UAAUC,IAAI,oBAGjEqN,EAAJjyB,UAAAyB,YAAI,WACIhC,KAAKsM,UAAU7F,MAAOmxB,IAAK53B,QAG/BwyB,EAAJjyB,UAAAs1B,OAAI,WACS71B,KAAKo8B,YACNp8B,KAAKo8B,WAAY,EACjBp8B,KAAKq8B,4BAIb7J,EAAJjyB,UAAAw1B,SAAI,WACQ/1B,KAAKo8B,YACLp8B,KAAKo8B,WAAY,EACjBp8B,KAAKq8B,4BAIb7J,EAAJjyB,UAAAs5B,qBAAI,WACS75B,KAAKo8B,YACNp8B,KAAKo8B,WAAY,EACjBp8B,KAAKq8B,yBAAwB,KAIrC7J,EAAJjyB,UAAA+7B,eAAI,SAAe9I,GAIX,WAJR,KAAAA,IAAmBA,GAAnB,GACQxzB,KAAKo8B,WAAap8B,KAAKutB,SACvBvtB,KAAKq8B,wBAAwB7I,GAEtBxzB,KAAKutB,UAIhBiF,EAAJjyB,UAAA+E,MAAI,WACStF,KAAKu8B,WACNv8B,KAAKD,WAAWwB,cAAc+D,QAC9BtF,KAAK62B,QAAQ3sB,MAAO0tB,IAAK53B,QAE7BA,KAAKu8B,UAAW,GASpB/J,EAAJjyB,UAAAg4B,OAAI,WACQv4B,KAAKw8B,WACLx8B,KAAK81B,QAAQrvB,MAAOmxB,IAAK53B,QAIjCwyB,EAAJjyB,UAAAk8B,YAAI,SAAY72B,GACJ5F,KAAKN,SACLkG,EAAM4W,iBAEN5W,EAAMC,mBAId2sB,EAAJjyB,UAAA2P,cAAI,SAActK,GACV,IAAI5F,KAAKN,SAGT,OAAQkG,EAAMwK,SACV,IAAKssB,GAAAA,OACL,IAAKC,GAAAA,UAED38B,KAAKu4B,SAEL3yB,EAAM4W,gBACN,MACJ,KAAKwc,GAAAA,MAEGh5B,KAAK48B,YACL58B,KAAKs8B,gBAAe,GAIxB12B,EAAM4W,mBAMlBgW,EAAJjyB,UAAAs8B,KAAI,WAAA,GAAJ14B,GAAAnE,IAKQA,MAAK88B,QAAQtI,SACR7qB,eACAgE,KAAK2Y,EAAAA,KAAK,IACVzY,UAAU,WACP1J,EAAK24B,QAAQ7uB,IAAI,WACb9J,EAAKo4B,UAAW,EAChBp4B,EAAKmY,OAAOpS,MAAO0tB,IAAKzzB,SAKhCquB,EAAZjyB,UAAA87B,wBAAI,SAAgC7I,OAApC,KAAAA,IAAoCA,GAApC,GACQxzB,KAAKuU,gBAAgB9N,MACjBD,OAAQxG,KACRwzB,YAAZA,EACYjG,SAAUvtB,KAAKo8B,4BApS3B59B,KAACC,EAAAA,UAADC,OACIC,SAAU,iDACV+H,SAAU,QACV5H,SAAJ,+KACID,QAAS,suBACToI,QAAS,QAAS,YAClBC,MACIC,MAAO,SACPoM,kBAAmB,uBACnBwpB,0BAA2B,WAC3BC,6BAA8B,SAC9BC,oCAAqC,6BACrCC,0BAA2B,WAC3B51B,sBAAuB,WACvBgM,kBAAmB,mBACnBiX,UAAW,sBACXvY,YAAa,wBACbmH,UAAW,UACXD,SAAU,UAEdha,gBAAiBC,EAAAA,wBAAwBC,OACzCL,cAAeC,EAAAA,kBAAkBC,6CA1FrCT,KAAIa,EAAAA,aAIJb,KAAIc,EAAAA,4BAuGJ87B,kBAAA58B,KAAKo0B,EAAAA,gBAALl0B,MAAqBy+B,MAGrBC,SAAA5+B,KAAKk0B,EAAAA,aAALh0B,MAAkB2+B,MAGlBC,eAAA9+B,KAAKk0B,EAAAA,aAALh0B,MAAkB6+B,MAGlBC,aAAAh/B,KAAKk0B,EAAAA,aAALh0B,MAAkBqI,EAAAA,WAAW,WAAM,MAAA02B,SAGnClpB,kBAAA/V,KAAK2J,EAAAA,SAILmE,YAAA9N,KAAK2J,EAAAA,SAGL2tB,UAAAt3B,KAAK2J,EAAAA,SAGLolB,WAAA/uB,KAAKiB,EAAAA,QAiBL6B,QAAA9C,KAAKiB,EAAAA,QAmBLm9B,aAAAp+B,KAAKiB,EAAAA,QAcL+8B,YAAAh+B,KAAKiB,EAAAA,SAyLL+yB,GAhR2BkL,IA8R3BD,GAAA,WAQI,QAAJA,GAA0BE,GAAA39B,KAA1B29B,UAA0BA,EAe1B,MAZIF,GAAJl9B,UAAAk8B,YAAI,SAAY72B,GACJ5F,KAAK29B,UAAUnB,WACfx8B,KAAK29B,UAAUpF,SAQnB3yB,EAAMC,kCArBdrH,KAACkD,EAAAA,UAADhD,OACIC,SAAU,gBACVuI,MACIC,MAAO,qCACPojB,UAAW,+DAInB/rB,KAAqCg0B,MAerCiL,KCjXAG,GAAA,WACI,QAAJA,GACejoB,EACAC,EACAC,EACAC,GAHA9V,KAAf2V,yBAAeA,EACA3V,KAAf4V,WAAeA,EACA5V,KAAf6V,gBAAeA,EACA7V,KAAf8V,UAAeA,EAGf,MAAA8nB,MAGaC,GAAsE7nB,EAAgB4nB,IAI/Fx6B,GAAe,gBAIf,QAAJ06B,GAAuBt3B,EAA0BlF,GAA1BtB,KAAvBwG,OAAuBA,EAA0BxG,KAAjDsB,MAAiDA,EACjD,MAAAw8B,MAGAC,GAAA,SAAAh6B,GAmQI,QAAJg6B,GACkBh+B,EACFikB,EACRrO,EACoBge,EACR/d,EACAC,EACeC,GAP/B,GAAJ3R,GASQJ,EATRK,KAAApE,KASc2V,EAA0BC,EAAYC,EAAiBC,IATrE9V,WACkBmE,GAAlBpE,WAAkBA,EACFoE,EAAhB6f,kBAAgBA,EAEY7f,EAA5BwvB,IAA4BA,EAGOxvB,EAAnC2R,UAAmCA,EAnPtB3R,EAAbmS,YAAmC,cAyKZnS,EAAvBqQ,YAAwD,GAAI3P,GAAAA,aAExDV,EAAJoS,IAAkB,eAAenT,KAM7Be,EAAJ65B,aAAkC,KAM9B75B,EAAJ85B,WAAiB,GAAIp5B,GAAAA,aAMKV,EAA1B+5B,YAAmE,aAG5C/5B,EAAvBS,OAA+D,GAAIC,GAAAA,aAK/DV,EAAJg6B,UAAgB,EAIJh6B,EAAZqS,WAAiC,EAIrBrS,EAAZjE,WAAiC,EAErBiE,EAAZi6B,aAAmC,EAKvBj6B,EAAZuwB,WAAiC,EAOrBvwB,EAAZk6B,sBAAmD,KAGvCl6B,EAAZmI,UAAwB,GAAIhD,GAAAA,QA0GxBnF,EAAJkY,UAAgB,aAGZlY,EAAJ2W,SAAqC,aAuKzB3W,EAAZ4wB,aAA2B,SAACC,EAASC,GAAY,MAAAD,KAAOC,GA3P5C9wB,EAAK2R,YACL3R,EAAK2R,UAAUc,cAAgBzS,KAid3C,MA5sB+BgB,GAA/B44B,EAAAh6B,GAMI1D,OAAJC,eAAQy9B,EAARx9B,UAAA,2BAAI,WACI,MAAOgmB,GAAAA,MAAf+N,UAAA,GAAwBt0B,KAAKsyB,KAAKzW,IAAI,SAAC+b,GAAQ,MAAAA,GAAIrjB,oDAI/ClU,OAAJC,eAAQy9B,EAARx9B,UAAA,uBAAI,WACI,MAAOgmB,GAAAA,MAAf+N,UAAA,GAAwBt0B,KAAKsyB,KAAKzW,IAAI,SAAC+b,GAAQ,MAAAA,GAAIf,4CAI/Cx2B,OAAJC,eAAQy9B,EAARx9B,UAAA,sBAAI,WACI,MAAOgmB,GAAAA,MAAf+N,UAAA,GAAwBt0B,KAAKsyB,KAAKzW,IAAI,SAAC+b,GAAQ,MAAAA,GAAItb,2CAI/Cjc,OAAJC,eAAQy9B,EAARx9B,UAAA,wBAAI,WACI,MAAOgmB,GAAAA,MAAf+N,UAAA,GAAwBt0B,KAAKsyB,KAAKzW,IAAI,SAAC+b,GAAQ,MAAAA,GAAItrB,8CAI/CjM,OAAJC,eAAQy9B,EAARx9B,UAAA,gBAAI,WACI,MAAOP,MAAK6U,SAAW7U,KAAK8sB,eAAeS,SAAWvtB,KAAK8sB,eAAeS,SAAS,oCAIvFltB,OAAJC,eACQy9B,EADRx9B,UAAA,gBAAI,WAEI,MAAOP,MAAK00B,eAGhB,SAAapzB,GACTtB,KAAK00B,UAAYl0B,EAAAA,sBAAsBc,oCAQ3CjB,OAAJC,eACQy9B,EADRx9B,UAAA,mBAAI,WAEI,MAAOP,MAAK+0B,kBAGhB,SAAgB3uB,GACZpG,KAAK+0B,aAAe3uB,EAEhBpG,KAAK8sB,gBAEL9sB,KAAKq1B,uDAQbh1B,OAAJC,eACQy9B,EADRx9B,UAAA,aAAI,WAEI,MAAOP,MAAKwtB,YAGhB,SAAUlsB,GACNtB,KAAKkG,WAAW5E,GAChBtB,KAAKwtB,OAASlsB,mCAOlBjB,OAAJC,eAAQy9B,EAARx9B,UAAA,UAAI,WACI,MAAOP,MAAKs+B,SAAWt+B,KAAKs+B,SAAS75B,GAAKzE,KAAKuW,qCAOnDlW,OAAJC,eACQy9B,EADRx9B,UAAA,gBAAI,WAEI,MAAOP,MAAKwW,eAGhB,SAAalV,GACTtB,KAAKwW,UAAYhW,EAAAA,sBAAsBc,GACvCtB,KAAKqW,aAAanM,wCAOtB7J,OAAJC,eACQy9B,EADRx9B,UAAA,mBAAI,WAEI,MAAOP,MAAKs+B,SAAWt+B,KAAKs+B,SAAS3pB,YAAc3U,KAAKk1B,kBAG5D,SAAgB5zB,GACZtB,KAAKk1B,aAAe5zB,EACpBtB,KAAKqW,aAAanM,wCAItB7J,OAAJC,eAAQy9B,EAARx9B,UAAA,eAAI,WACI,MAAQP,MAAKs+B,UAAYt+B,KAAKs+B,SAASloB,SAAYpW,KAAKu+B,iDAO5Dl+B,OAAJC,eAAQy9B,EAARx9B,UAAA,aAAI,WACI,QAASP,KAAKs+B,UAAYt+B,KAAKs+B,SAAStQ,QAA+B,IAArBhuB,KAAKsyB,KAAKhV,wCAOhEjd,OAAJC,eAAQy9B,EAARx9B,UAAA,wBAAI,WACI,OAAQP,KAAKguB,OAAShuB,KAAKoW,yCAO/B/V,OAAJC,eACQy9B,EADRx9B,UAAA,gBAAI,WAEI,MAAOP,MAAK8V,YAAc9V,KAAK8V,UAAUpW,SAAWM,KAAKE,eAG7D,SAAaoB,GACTtB,KAAKE,UAAYM,EAAAA,sBAAsBc,GACvCtB,KAAKw+B,yDAOTn+B,OAAJC,eACQy9B,EADRx9B,UAAA,kBAAI,WAEI,MAAOP,MAAKo+B,iBAGhB,SAAe98B,GAAf,GAAJ6C,GAAAnE,IACQA,MAAKo+B,YAAc59B,EAAAA,sBAAsBc,GAErCtB,KAAKsyB,MACLtyB,KAAKsyB,KAAKziB,QAAQ,SAAC+nB,GAAQ,MAAAA,GAAI6G,kBAAoBt6B,EAAKi6B,+CAIhE/9B,OAAJC,eACQy9B,EADRx9B,UAAA,gBAAI,SACae,GACTtB,KAAKg+B,aAAe18B,EACpBtB,KAAKm+B,UAAY78B,mCA2FrBy8B,EAAJx9B,UAAAi1B,mBAAI,WAAA,GAAJrxB,GAAAnE,IACQA,MAAK+tB,WAAa,GAAI2Q,GAAAA,gBAAuB1+B,KAAKsyB,MAC7CqM,0BACAC,0BAA0B5+B,KAAK2zB,IAAM3zB,KAAK2zB,IAAIryB,MAAQ,OAEvDtB,KAAK2zB,KACL3zB,KAAK2zB,IAAI/uB,OACJ+I,KAAKC,EAAAA,UAAU5N,KAAKsM,YACpBuB,UAAU,SAAC8lB,GAAQ,MAAAxvB,GAAK4pB,WAAW6Q,0BAA0BjL,KAKtE3zB,KAAK+tB,WAAW4M,OACXhtB,KAAKC,EAAAA,UAAU5N,KAAKsM,YACpBuB,UAAU,WACP1J,EAAKg6B,WAAa,EAElB1zB,WAAW,WACPtG,EAAKg6B,UAAYh6B,EAAK65B,cAAgB,EACtC75B,EAAK6f,kBAAkB5e,mBAKnCpF,KAAKsyB,KAAKpI,QACLvc,KAAKuoB,EAAAA,UAAU,MAAOtoB,EAAAA,UAAU5N,KAAKsM,YACrCuB,UAAU,WACH1J,EAAKzE,UAGLo6B,QAAQC,UAAUC,KAAK,WAAQ71B,EAAKq6B,0BAGxCr6B,EAAK06B,YAGL16B,EAAKkxB,sBAGLlxB,EAAK26B,iBAGL36B,EAAK46B,8BAILjF,QAAQC,UAAUC,KAAK,WAAQ71B,EAAK85B,WAAWx3B,KAAKtC,EAAKmuB,KAAKzF,aAE9D1oB,EAAKkS,aAAanM,UAI9B6zB,EAAJx9B,UAAAK,SAAI,WACIZ,KAAK8sB,eAAiB,GAAI4I,GAAAA,eAAsB11B,KAAK6U,aAAUzC,IAAW,GAC1EpS,KAAKqW,aAAanM,QAGtB6zB,EAAJx9B,UAAAiX,UAAI,WACQxX,KAAK8V,WAIL9V,KAAKyX,oBAIbsmB,EAAJx9B,UAAAyB,YAAI,WACIhC,KAAKsM,UAAUpC,OACflK,KAAKsM,UAAU2D,WACfjQ,KAAKqW,aAAapG,WAElBjQ,KAAKg/B,qBAUTjB,EAAJx9B,UAAA0+B,cAAI,SAAcC,GACVl/B,KAAKs+B,SAAWY,GAIpBnB,EAAJx9B,UAAA2F,WAAI,SAAW5E,GACHtB,KAAKsyB,MACLtyB,KAAKs2B,oBAAoBh1B,GAAO,IAKxCy8B,EAAJx9B,UAAA4F,iBAAI,SAAiBC,GACbpG,KAAK8a,SAAW1U,GAIpB23B,EAAJx9B,UAAA8F,kBAAI,SAAkBD,GACdpG,KAAKqc,UAAYjW,GAIrB23B,EAAJx9B,UAAA+F,iBAAI,SAAiBC,GACbvG,KAAKN,SAAW6G,EAChBvG,KAAKqW,aAAanM,QAOtB6zB,EAAJx9B,UAAAgY,iBAAI,SAAiB3S,GACR5F,KAAKm/B,kBAAkBv5B,IACxB5F,KAAKsF,SAQby4B,EAAJx9B,UAAA+E,MAAI,WACQtF,KAAKN,UAILM,KAAKs+B,UAAYt+B,KAAKs+B,SAASloB,UAExBpW,KAAKsyB,KAAKhV,OAAS,GAC1Btd,KAAK+tB,WAAWE,qBAChBjuB,KAAKqW,aAAanM,SAElBlK,KAAKo/B,aACLp/B,KAAKqW,aAAanM,UAK1B6zB,EAAJx9B,UAAA6+B,WAAI,WACQp/B,KAAKs+B,UACLt+B,KAAKs+B,SAASh5B,SAOtBy4B,EAAJx9B,UAAA8+B,QAAI,SAAQz5B,GACZ,GAAc05B,GAAS15B,EAAY,MAIvBA,GAAMwK,UAAYusB,EAAAA,WAAa38B,KAAKu/B,aAAaD,IACjDt/B,KAAK+tB,WAAWuL,oBAChB1zB,EAAM4W,kBACC8iB,GAAUA,EAAOpa,UAAUsa,SAAS,YAEvC55B,EAAMwK,UAAYgpB,EAAAA,MAClBp5B,KAAK+tB,WAAWE,qBAChBroB,EAAM4W,kBAEC5W,EAAMwK,UAAYipB,EAAAA,KACzBr5B,KAAK+tB,WAAWuL,oBAChB1zB,EAAM4W,kBAENxc,KAAK+tB,WAAWmL,UAAUtzB,GAG9B5F,KAAKqW,aAAanM,SAI1B6zB,EAAJx9B,UAAA+1B,oBAAI,SAAoBh1B,EAAYkyB,GAAhC,GAAJrvB,GAAAnE,IAIQ,QAJR,KAAAwzB,IAAoCA,GAApC,GACQxzB,KAAKy/B,iBACLz/B,KAAKsyB,KAAKziB,QAAQ,SAAC+nB,GAAQ,MAAAA,GAAI7B,aAE3BkE,MAAMC,QAAQ54B,GACdA,EAAMuO,QAAQ,SAACya,GAAiB,MAAAnmB,GAAKi2B,YAAY9P,EAAckJ,KAC/DxzB,KAAKq6B,iBACF,CACf,GAAkBqF,GAAmB1/B,KAAKo6B,YAAY94B,EAAOkyB,EAI7CkM,IAAoBlM,GACpBxzB,KAAK+tB,WAAWG,cAAcwR,KAM1C3B,EAAJx9B,UAAAs8B,KAAI,WAAA,GAAJ14B,GAAAnE,IACaA,MAAKu+B,iBACNv+B,KAAK+tB,WAAWG,eAAe,GAG9BluB,KAAKN,WACFM,KAAKs+B,SAKL7zB,WAAW,WACFtG,EAAKiS,SACNjS,EAAKw7B,kBAKb3/B,KAAK2/B,kBAMjB5B,EAAJx9B,UAAAo/B,cAAI,WACI3/B,KAAKqc,YACLrc,KAAKgkB,kBAAkB5e,eACvBpF,KAAKqW,aAAanM,QAMZ6zB,EAAdx9B,UAAAu+B,eAAI,WAEI9+B,KAAKm+B,UAAYn+B,KAAKg+B,eAAsC,IAArBh+B,KAAKsyB,KAAKhV,QAAgB,EAAI,IAO/DygB,EAAdx9B,UAAAw+B,4BAAI,WACI,GAAkC,MAA9B/+B,KAAKq+B,uBAAiCr+B,KAAKsyB,KAAKhV,OAAQ,CACpE,GAAkBsiB,GAAc3nB,KAAKoX,IAAIrvB,KAAKq+B,sBAAuBr+B,KAAKsyB,KAAKhV,OAAS,EAC5Etd,MAAK+tB,WAAWG,cAAc0R,OACF,KAArB5/B,KAAKsyB,KAAKhV,QACjBtd,KAAKo/B,YAGTp/B,MAAKq+B,sBAAwB,MAWzBN,EAAZx9B,UAAAs/B,aAAI,SAAqBnW,GACjB,MAAOA,IAAS,GAAKA,EAAQ1pB,KAAKsyB,KAAKhV,QAGnCygB,EAAZx9B,UAAAg/B,aAAI,SAAqBhwB,GACjB,GAAIA,GAA8C,UAAnCA,EAAQuwB,SAAS3D,cAA2B,CAGvD,OAFW,EAEG76B,MAGlB,OAAO,GAOHy8B,EAAZx9B,UAAA65B,YAAI,SAAoB94B,EAAYkyB,GAAhC,GAAJrvB,GAAAnE,SAAA,KAAAwzB,IAAoCA,GAApC,EAEA,IAAckM,GAAmB1/B,KAAKsyB,KAAKhK,KAAK,SAACsP,GACrC,MAAoB,OAAbA,EAAIt2B,OAAiB6C,EAAK4wB,aAAa6C,EAAIt2B,MAAOA,IAa7D,OAVIo+B,KACIlM,EACAkM,EAAiB7F,uBAEjB6F,EAAiB7J,SAGrB71B,KAAK8sB,eAAe+I,OAAO6J,IAGxBA,GAGH3B,EAAZx9B,UAAA80B,oBAAI,WAAA,GAAJlxB,GAAAnE,IAGQ85B,SAAQC,UAAUC,KAAK,YACf71B,EAAK2R,WAAa3R,EAAKqpB,UACvBrpB,EAAKmyB,oBAAoBnyB,EAAK2R,UAAY3R,EAAK2R,UAAUxU,MAAQ6C,EAAKqpB,QAAQ,GAC9ErpB,EAAKkS,aAAanM,WAStB6zB,EAAZx9B,UAAAk/B,eAAI,SAAuBM,GACnB//B,KAAK8sB,eAAe9c,QACpBhQ,KAAKsyB,KAAKziB,QAAQ,SAAC+nB,GACXA,IAAQmI,GACRnI,EAAI7B,aAGZ/1B,KAAKqW,aAAanM,QAOd6zB,EAAZx9B,UAAA85B,WAAI,WAAA,GAAJl2B,GAAAnE,IACYA,MAAK00B,YACL10B,KAAK8sB,eAAe9c,QAEpBhQ,KAAKsyB,KAAKziB,QAAQ,SAAC+nB,GACXA,EAAIrK,UACJppB,EAAK2oB,eAAe+I,OAAO+B,KAGnC53B,KAAKqW,aAAanM,SAKlB6zB,EAAZx9B,UAAA4sB,iBAAI,SAAyBC,GAC7B,GAAYC,GAAmB,IAGnBA,GADA4M,MAAMC,QAAQl6B,KAAKutB,UACLvtB,KAAKutB,SAAS1R,IAAI,SAAC+b,GAAQ,MAAAA,GAAIt2B,QAE/BtB,KAAKutB,SAAWvtB,KAAKutB,SAASjsB,MAAQ8rB,EAExDptB,KAAKwtB,OAASH,EACdrtB,KAAK4E,OAAO6B,KAAK,GAAIq3B,IAAgB99B,KAAMqtB,IAC3CrtB,KAAKwU,YAAY/N,KAAK4mB,GACtBrtB,KAAK8a,SAASuS,GACdrtB,KAAKgkB,kBAAkB5e,gBAGnB24B,EAAZx9B,UAAAs+B,UAAI,WACI7+B,KAAKg/B,oBACLh/B,KAAKggC,oBACLhgC,KAAKigC,wBACLjgC,KAAKkgC,uBAGDnC,EAAZx9B,UAAAy+B,kBAAI,WACQh/B,KAAKmgC,uBACLngC,KAAKmgC,qBAAqB5oB,cAC1BvX,KAAKmgC,qBAAuB,MAG5BngC,KAAKogC,sBACLpgC,KAAKogC,oBAAoB7oB,cACzBvX,KAAKogC,oBAAsB,MAG3BpgC,KAAKqgC,2BACLrgC,KAAKqgC,yBAAyB9oB,cAC9BvX,KAAKqgC,yBAA2B,MAGhCrgC,KAAKsgC,wBACLtgC,KAAKsgC,sBAAsB/oB,cAC3BvX,KAAKsgC,sBAAwB,OAK7BvC,EAAZx9B,UAAA0/B,sBAAI,WAAA,GAAJ97B,GAAAnE,IACQA,MAAKqgC,yBAA2BrgC,KAAKugC,oBAAoB1yB,UAAU,SAACjI,GAC5DA,EAAMY,OAAO+mB,SACbppB,EAAK2oB,eAAe+I,OAAOjwB,EAAMY,QAEjCrC,EAAK2oB,eAAeiJ,SAASnwB,EAAMY,QAIlCrC,EAAK0Q,UACN1Q,EAAKmuB,KAAKziB,QAAQ,SAAC+nB,IACVzzB,EAAK2oB,eAAeiO,WAAWnD,IAAQA,EAAIrK,UAC5CqK,EAAI7B,aAKZnwB,EAAM4tB,aACNrvB,EAAKgpB,sBAMT4Q,EAAZx9B,UAAAy/B,kBAAI,WAAA,GAAJ77B,GAAAnE,IACQA,MAAKmgC,qBAAuBngC,KAAKwgC,gBAAgB3yB,UAAU,SAACjI,GACpE,GAAkB66B,GAAmBt8B,EAAKmuB,KAAKzF,UAAU9Q,QAAQnW,EAAMgyB,IAEvDzzB,GAAK07B,aAAaY,IAClBt8B,EAAK4pB,WAAW2S,iBAAiBD,GAErCt8B,EAAKkS,aAAanM,SAGtBlK,KAAKogC,oBAAsBpgC,KAAK2gC,eAAe9yB,UAAU,WACrD1J,EAAK04B,OACL14B,EAAKkS,aAAanM,UAIlB6zB,EAAZx9B,UAAA2/B,oBAAI,WAAA,GAAJ/7B,GAAAnE,IACQA,MAAKsgC,sBAAwBtgC,KAAK4gC,iBAAiB/yB,UAAU,SAACjI,GACtE,GAAkBgyB,GAAMhyB,EAAMgyB,IACZ6I,EAAWt8B,EAAKmuB,KAAKzF,UAAU9Q,QAAQnW,EAAMgyB,IAK/CzzB,GAAK07B,aAAaY,IAAa7I,EAAI2E,WACnCp4B,EAAKk6B,sBAAwBoC,MAMjC1C,EAAZx9B,UAAA4+B,kBAAI,SAA0Bv5B,GAGtB,IAFR,GAAYi7B,GAAiBj7B,EAAY,OAE1Bi7B,GAAkBA,IAAmB7gC,KAAKD,WAAWwB,eAAe,CACvE,GAAIs/B,EAAe3b,UAAUsa,SAAS,UAClC,OAAO,CAGXqB,GAAiBA,EAAeC,cAGpC,OAAO,GAIH/C,EAAZx9B,UAAAg+B,cAAI,WACI,MAAOv+B,MAAKsyB,KAAK1jB,KAAK,SAACgpB,GAAQ,MAAAA,GAAI2E,YAI/BwB,EAAZx9B,UAAAi+B,sBAAI,WAAA,GAAJr6B,GAAAnE,IACYA,MAAKsyB,MACLtyB,KAAKsyB,KAAKziB,QAAQ,SAAC+nB,GACfA,EAAIl4B,SAAWyE,EAAKjE,4BA5tBpC1B,KAACC,EAAAA,UAADC,OACIC,SAAU,cACV+H,SAAU,YACV5H,SAAU,4BACVoI,MACIC,MAAO,cACPoM,kBAAmB,8BACnBjM,sBAAuB,WACvBy5B,qBAAsB,aACtBC,sBAAuB,WACvB7nB,UAAW,UACXD,SAAU,SACVlH,YAAa,kBACb5K,OAAQ,OAEZT,YAAcC,QAASwS,GAAoBtS,YAAai3B,IACxDl/B,QAAS,oMACTE,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,+CAxE7CZ,KAAIa,EAAAA,aAJJb,KAAIsJ,EAAAA,oBAwBJtJ,KAAIgb,KAPJhb,KAAS8T,EAAAA,eAATtK,aAAAxJ,KAgTS+T,EAAAA,aAlTT/T,KAA8D8a,EAAAA,OAA9DtR,aAAAxJ,KAmTS+T,EAAAA,aAnTT/T,KAA+B+a,EAAAA,mBAA/BvR,aAAAxJ,KAoTS+T,EAAAA,aApTT/T,KAAmD6a,EAAAA,UAAnDrR,aAAAxJ,KAqTS+T,EAAAA,WArTT/T,KAqTqBiV,EAAAA,4BAvNrBoB,WAAArW,KAAKiB,EAAAA,QAcLsV,cAAAvW,KAAKiB,EAAAA,QAkBL6B,QAAA9C,KAAKiB,EAAAA,QAsBLmV,WAAApW,KAAKiB,EAAAA,QAcLkV,cAAAnW,KAAKiB,EAAAA,QAmCLC,WAAAlB,KAAKiB,EAAAA,QAcLm9B,aAAAp+B,KAAKiB,EAAAA,QAaLyE,WAAA1F,KAAKiB,EAAAA,QAWL+U,cAAAhW,KAAK2J,EAAAA,SAiBLsM,oBAAAjW,KAAKiB,EAAAA,QAGLy+B,cAAA1/B,KAAKiB,EAAAA,MAALf,MAAW,iBAGXkG,SAAApG,KAAK2J,EAAAA,SAGLmqB,OAAA9zB,KAAKo0B,EAAAA,gBAALl0B,MAAqB8zB,OAsgBrBuL,GA5sB+BF,IC7D3Bz6B,GAAe,EAMnB69B,GAAA,WAmFI,QAAJA,GACgBlhC,EACiCmnB,GADjClnB,KAAhBD,WAAgBA,EACiCC,KAAjDknB,eAAiDA,EApE7ClnB,KAAJoW,SAAuB,EAQnBpW,KAAJkhC,kBAAgDlhC,KAAKknB,eAAega,kBAIhElhC,KAAJmhC,OAA4C,GAAIt8B,GAAAA,aAGnC7E,KAAb2U,YAAmC,GAGtB3U,KAAbyE,GAA0B,qBAAqBrB,KA0BnCpD,KAAZohC,YAAkC,EAYtBphC,KAAZE,WAAiC,EAezBF,KAAKk/B,aAAel/B,KAAKD,WAAwB,cAmEzD,MArHIM,QAAJC,eACQ2gC,EADR1gC,UAAA,eAAI,SACYe,GACJA,IACAtB,KAAKqhC,SAAW//B,EAChBtB,KAAKqhC,SAASpC,cAAcj/B,wCAUpCK,OAAJC,eACQ2gC,EADR1gC,UAAA,iBAAI,WAEI,MAAOP,MAAKohC,gBAGhB,SAAc9/B,GACVtB,KAAKohC,WAAa5gC,EAAAA,sBAAsBc,oCAM5CjB,OAAJC,eACQ2gC,EADR1gC,UAAA,gBAAI,WAEI,MAAOP,MAAKE,WAAcF,KAAKqhC,UAAYrhC,KAAKqhC,SAAS3hC,cAG7D,SAAa4B,GACTtB,KAAKE,UAAYM,EAAAA,sBAAsBc,oCAM3CjB,OAAJC,eAAQ2gC,EAAR1gC,UAAA,aAAI,WACI,OAAQP,KAAKk/B,aAAa59B,uCAc9B2/B,EAAJ1gC,UAAA+W,YAAI,WACItX,KAAKqhC,SAAShrB,aAAanM,QAI/B+2B,EAAJ1gC,UAAA8+B,QAAI,SAAQz5B,GACJ5F,KAAKshC,WAAW17B,IAIpBq7B,EAAJ1gC,UAAAs8B,KAAI,WACQ78B,KAAKuhC,WACLvhC,KAAKshC,aAGTthC,KAAKoW,SAAU,EAEVpW,KAAKqhC,SAASjrB,SACfpW,KAAKqhC,SAASxE,OAGlB78B,KAAKqhC,SAAShrB,aAAanM,QAI/B+2B,EAAJ1gC,UAAA+gC,WAAI,SAAW17B,IACF5F,KAAKk/B,aAAa59B,OAAWsE,GAC9B5F,KAAKqhC,SAAShC,QAAQz5B,GAGrBA,IAAS5F,KAAKwhC,eAAe57B,KAC9B5F,KAAKmhC,OAAO16B,MAAOg7B,MAAOzhC,KAAKk/B,aAAc59B,MAAOtB,KAAKk/B,aAAa59B,QAElEsE,GACAA,EAAM4W,mBAKlBykB,EAAJ1gC,UAAAqc,QAAI,WAEI5c,KAAKqhC,SAAShrB,aAAanM,QAG/B+2B,EAAJ1gC,UAAAs2B,QAAI,WACI72B,KAAKoW,SAAU,EACfpW,KAAKqhC,SAAShrB,aAAanM,QAI/B+2B,EAAJ1gC,UAAA+E,MAAI,WACItF,KAAKk/B,aAAa55B,SAId27B,EAAZ1gC,UAAAihC,eAAI,SAAuB57B,GACnB,GAAI87B,EAAAA,eAAe97B,GAAU,OAAO,CAE5C,IAAc+7B,GAAa3hC,KAAKkhC,kBAElB9wB,EAAUxK,EAAMwK,OAEtB,OAAO6pB,OAAMC,QAAQyH,GAAcA,EAAW5lB,QAAQ3L,IAAY,EAAIuxB,EAAWC,IAAIxxB,mBAzJ7F5R,KAACkD,EAAAA,UAADhD,OACIC,SAAU,uBACV+H,SAAU,4BACVQ,MACIC,MAAO,gCACPC,OAAQ,KACRkM,kBAAmB,mBACnBwF,qBAAsB,sBACtBC,sBAAuB,qEACvB/G,YAAa,kBACbkH,SAAU,SACVC,UAAW,YACXuI,UAAW,qDAtCnBljB,KAAoBa,EAAAA,aA+GpBb,SAAA4T,GAAApK,aAAAxJ,KAAS6T,EAAAA,OAAT3T,MAAgBmjC,2BA7DhBX,oBAAA1iC,KAAKiB,EAAAA,MAALf,MAAW,iCAIXyiC,SAAA3iC,KAAK2J,EAAAA,OAALzJ,MAAY,wBAIZiW,cAAAnW,KAAKiB,EAAAA,QAGLgF,KAAAjG,KAAKiB,EAAAA,QAGLqiC,UAAAtjC,KAAKiB,EAAAA,MAALf,MAAW,mBAcX6iC,YAAA/iC,KAAKiB,EAAAA,MAALf,MAAW,yBAYXgB,WAAAlB,KAAKiB,EAAAA,SA2FLwhC,KCrJAc,IAAoBb,mBAAoBnI,EAAAA,QArBxC1jB,GAAA,WAAA,QAAAA,MAwB2B,sBAxB3B7W,KAACsE,EAAAA,SAADpE,OACIqE,SAAUC,EAAAA,aAAcmR,EAAAA,gBACxBjR,SACI66B,GACAvL,GACAyO,GACA1D,GACAF,GACAI,IAEJt6B,cACI46B,GACAvL,GACAyO,GACA1D,GACAF,GACAI,IAEJ92B,YACIC,QAASi7B,GAETG,SAAQ,SAGhB3sB,KhCyDIjS,GAAe,gBAOf,QAAJsqB,GAAuBlnB,EAAyBlF,GAAzBtB,KAAvBwG,OAAuBA,EAAyBxG,KAAhDsB,MAAgDA,EAChD,MAAAosB,MAEAuU,GAAA,WACI,QAAJA,GACeliC,EACA4V,EACAC,EACAC,EACAC,GAJA9V,KAAfD,WAAeA,EACAC,KAAf2V,yBAAeA,EACA3V,KAAf4V,WAAeA,EACA5V,KAAf6V,gBAAeA,EACA7V,KAAf8V,UAAeA,EAEf,MAAAmsB,MAEM9O,GACoB3vB,EAAcE,EAAcsS,EAAgBisB,MAGtEtP,GAAA,WAAA,QAAAA,MAC8B,sBAD9Bn0B,KAACkD,EAAAA,UAADhD,OAAaC,SAAU,wBACvBg0B,KAGAzF,GAAA,SAAAnpB,GAqRI,QAAJmpB,GACyBkD,EACAnsB,EACA64B,EACAoF,EACjBvsB,EACA5V,EAC6BoiC,EACjBvsB,EACAC,EACiBusB,EACFtsB,EACJ5R,EAC6Bm+B,GAbxD,GAAJl+B,GAeQJ,EAfRK,KAAApE,KAecD,EAAY4V,EAA0BC,EAAYC,EAAiBC,IAfjF9V,WACyBmE,GAAzBisB,eAAyBA,EACAjsB,EAAzBF,mBAAyBA,EACAE,EAAzB24B,QAAyBA,EACA34B,EAAzB+9B,UAAyBA,EAGY/9B,EAArCg+B,KAAqCA,EAGAh+B,EAArCi+B,iBAAqCA,EACFj+B,EAAnC2R,UAAmCA,EAEyB3R,EAA5Dk+B,uBAA4DA,EAhQxDl+B,EAAJmS,YAAkB,YAEdnS,EAAJ2vB,YAA0B,EACtB3vB,EAAJ4vB,YAA0B,SAMtB5vB,EAAJ6vB,gBAAsB,EASlB7vB,EAAJypB,UAAwB,GAGpBzpB,EAAJmtB,gBAA8B,MAG1BntB,EAAJ8vB,oBAAkC,EAG9B9vB,EAAJ+vB,yBAA+B,GAAI5qB,GAAAA,QAG/BnF,EAAJ4H,eAAqB5H,EAAKk+B,yBAOtBl+B,EAAJwrB,QAAc,EAQVxrB,EAAJuE,YAEYqG,QAAS,QACTC,QAAS,SACTC,SAAU,QACVC,SAAU,QAGVH,QAAS,QACTC,QAAS,MACTC,SAAU,QACVC,SAAU,WAkCT/K,EAAbiwB,uBAA2EC,EAAAA,MAAM,WACzE,MAAIlwB,GAAKyoB,QACErG,EAAAA,MAAnB+N,UAAA,GAA4BnwB,EAAKyoB,QAAQ/Q,IAAI,SAACyR,GAAW,MAAAA,GAAOiH,qBAGjDpwB,EAAK24B,QAAQtI,SACf7qB,eACAgE,KAAK2Y,EAAAA,KAAK,GAAImO,EAAAA,UAAU,WAAM,MAAAtwB,GAAKiwB,4BAIzBjwB,EAAvB6uB,aAA6D,GAAInuB,GAAAA,aAGlCV,EAA/B8uB,aACQ9uB,EAAK6uB,aAAarlB,KAAKwY,EAAAA,OAAO,SAACgO,GAAM,MAAAA,KAAItY,EAAAA,IAAI,eAGtB1X,EAA/B+uB,aACQ/uB,EAAK6uB,aAAarlB,KAAKwY,EAAAA,OAAO,SAACgO,GAAM,OAACA,IAAItY,EAAAA,IAAI,eAG/B1X,EAAvBoQ,gBAAuE,GAAI1P,GAAAA,aAOpDV,EAAvBqQ,YAAwD,GAAI3P,GAAAA,aA0BhDV,EAAZqS,WAAiC,EAerBrS,EAAZuwB,WAAiC,EAkErBvwB,EAAZywB,UAAuB,EAMXzwB,EAAZ0wB,YAAyB,EAGb1wB,EAAZuqB,UAAwB,EAGHvqB,EAArBoS,IAA2B,aAAanT,KAGnBe,EAArB2wB,QAA+B,GAAIxrB,GAAAA,QAiG/BnF,EAAJspB,UAAsC,aAGlCtpB,EAAJm+B,WAAiB,aA8vBLn+B,EAAZ4wB,aAA2B,SAACC,EAASC,GAAY,MAAAD,KAAOC,GA/0B5C9wB,EAAK2R,YAGL3R,EAAK2R,UAAUc,cAAgBzS,GAGnCA,EAAKD,SAAWe,SAASf,IAAa,EAGtCC,EAAKM,GAAKN,EAAKM,KAu0BvB,MAzlC8BU,GAA9B+nB,EAAAnpB,GA8HI1D,OAAJC,eACQ4sB,EADR3sB,UAAA,mBAAI,WAEI,MAAOP,MAAKk1B,kBAGhB,SAAgB5zB,GACZtB,KAAKk1B,aAAe5zB,EAEpBtB,KAAKqW,aAAanM,wCAKtB7J,OAAJC,eACQ4sB,EADR3sB,UAAA,gBAAI,WAEI,MAAOP,MAAKwW,eAGhB,SAAalV,GACTtB,KAAKwW,UAAYhW,EAAAA,sBAAsBc,GAEvCtB,KAAKqW,aAAanM,wCAKtB7J,OAAJC,eACQ4sB,EADR3sB,UAAA,gBAAI,WAEI,MAAOP,MAAK00B,eAGhB,SAAapzB,GACT,GAAItB,KAAK8sB,eACL,KAAMqI,IAGVn1B,MAAK00B,UAAYl0B,EAAAA,sBAAsBc,oCAU3CjB,OAAJC,eACQ4sB,EADR3sB,UAAA,mBAAI,WAEI,MAAOP,MAAK+0B,kBAGhB,SAAgB3uB,GAEZ,GAAkB,kBAAPA,GACP,KAAMgvB,IAGVp1B,MAAK+0B,aAAe3uB,EAEhBpG,KAAK8sB,gBAEL9sB,KAAKq1B,uDAKbh1B,OAAJC,eACQ4sB,EADR3sB,UAAA,aAAI,WAEI,MAAOP,MAAKwtB,YAGhB,SAAUhV,GACFA,IAAaxY,KAAKwtB,SAClBxtB,KAAKkG,WAAWsS,GAChBxY,KAAKwtB,OAAShV,oCAMtBnY,OAAJC,eACQ4sB,EADR3sB,UAAA,UAAI,WAEI,MAAOP,MAAKmX,SAGhB,SAAO7V,GACHtB,KAAKmX,IAAM7V,GAAStB,KAAKuW,IACzBvW,KAAKqW,aAAanM,wCAMtB7J,OAAJC,eAAQ4sB,EAAR3sB,UAAA,eAAI,WACI,MAAOP,MAAK40B,UAAY50B,KAAK60B,gBAOjC,SAAYvzB,GACRtB,KAAK40B,SAAWtzB,mCAKpBjB,OAAJC,eAAQ4sB,EAAR3sB,UAAA,iBAAI,WACI,MAAOP,MAAK60B,4CA2ChB3H,EAAJ3sB,UAAAK,SAAI,WAAA,GAAJuD,GAAAnE,IACQA,MAAK8sB,eAAiB,GAAI4I,GAAAA,eAAyB11B,KAAK6U,UACxD7U,KAAKqW,aAAanM,OAKlBlK,KAAKk0B,yBACAvmB,KAAKkD,EAAAA,uBAAwBjD,EAAAA,UAAU5N,KAAK80B,UAC5CjnB,UAAU,WACH1J,EAAKoxB,WACLpxB,EAAKuqB,UAAY,EACjBvqB,EAAK6uB,aAAavsB,MAAK,KAEvBtC,EAAK6uB,aAAavsB,MAAK,GACvBtC,EAAK8vB,oBAAqB,EAC1B9vB,EAAK8rB,WAAWF,QAAU,EAC1B5rB,EAAKF,mBAAmBmB,mBAKxC8nB,EAAJ3sB,UAAAi1B,mBAAI,WAAA,GAAJrxB,GAAAnE,IACQA,MAAKy1B,iBAELz1B,KAAK8sB,eAAe6I,QACfhoB,KAAKC,EAAAA,UAAU5N,KAAK80B,UACpBjnB,UAAU,SAACjI,GACRA,EAAMgwB,MAAM/lB,QAAQ,SAACyd,GAAW,MAAAA,GAAOuI,WACvCjwB,EAAMkwB,QAAQjmB,QAAQ,SAACyd,GAAW,MAAAA,GAAOyI,eAGjD/1B,KAAK4sB,QAAQ1C,QACRvc,KAAKuoB,EAAAA,UAAU,MAAOtoB,EAAAA,UAAU5N,KAAK80B,UACrCjnB,UAAU,WACP1J,EAAKiyB,eACLjyB,EAAKkxB,yBAIjBnI,EAAJ3sB,UAAAy1B,gBAAI,WAAA,GAAJ7xB,GAAAnE,IACQA,MAAKsyB,KAAKpI,QACLrc,UAAU,WACPpD,WAAW,WAAM,MAAAtG,GAAK8xB,wBAAwB,MAI1D/I,EAAJ3sB,UAAAiX,UAAI,WACQxX,KAAK8V,WAAa9V,KAAKyX,oBAG/ByV,EAAJ3sB,UAAA+W,YAAI,SAAY4S,GAGJA,EAAQxqB,UACRM,KAAKqW,aAAanM,QAI1BgjB,EAAJ3sB,UAAAyB,YAAI,WACIhC,KAAK80B,QAAQ5qB,OACblK,KAAK80B,QAAQ7kB,WACbjQ,KAAKqW,aAAapG,YAUtBid,EAAJ3sB,UAAAwT,OAAI,WACQ/T,KAAKu1B,UACLv1B,KAAK0mB,QAEL1mB,KAAKunB,QAKb2F,EAAJ3sB,UAAAgnB,KAAI,WAAA,GAAJpjB,GAAAnE,MACYA,KAAKN,UAAaM,KAAK4sB,SAAY5sB,KAAK4sB,QAAQtP,SAAUtd,KAAK60B,aAEnE70B,KAAK8wB,YAAc9wB,KAAKyH,QAAQlG,cAAc2uB,wBAG9ClwB,KAAKg0B,gBAAkB/uB,SAASxC,iBAAiBzC,KAAKyH,QAAQlG,eAAe,cAE7EvB,KAAK60B,YAAa,EAClB70B,KAAK+tB,WAAW6Q,0BAA0B,MAC1C5+B,KAAKgvB,2BACLhvB,KAAK8tB,yBACL9tB,KAAKiE,mBAAmBmB,eAGxBpF,KAAK88B,QAAQtI,SAAS7qB,eACjBgE,KAAK2Y,EAAAA,KAAK,IACVzY,UAAU,WACH1J,EAAK6vB,iBAAmB7vB,EAAK8rB,WAAWljB,YAAc5I,EAAK8rB,WAAWljB,WAAWsC,iBACjFlL,EAAK8rB,WAAWljB,WAAWsC,eAAezM,MAAMyzB,SAAclyB,EAAK6vB,gBAAvF,UAMI9G,EAAJ3sB,UAAAmmB,MAAI,WACQ1mB,KAAK60B,aACL70B,KAAK60B,YAAa,EAClB70B,KAAK+tB,WAAW6Q,0BAA0B5+B,KAAKswB,QAAU,MAAQ,OACjEtwB,KAAKiE,mBAAmBmB,eACxBpF,KAAKsiC,eAUbpV,EAAJ3sB,UAAA2F,WAAI,SAAW5E,GACHtB,KAAK4sB,SACL5sB,KAAKs2B,oBAAoBh1B,IAWjC4rB,EAAJ3sB,UAAA4F,iBAAI,SAAiBC,GACbpG,KAAKytB,UAAYrnB,GAUrB8mB,EAAJ3sB,UAAA8F,kBAAI,SAAkBD,GACdpG,KAAKsiC,WAAal8B,GAStB8mB,EAAJ3sB,UAAA+F,iBAAI,SAAiBC,GACbvG,KAAKN,SAAW6G,EAChBvG,KAAKiE,mBAAmBmB,eACxBpF,KAAKqW,aAAanM,QAGtB7J,OAAJC,eAAQ4sB,EAAR3sB,UAAA,gBAAI,WACI,MAAOP,MAAK6U,SAAW7U,KAAK8sB,eAAeS,SAAWvtB,KAAK8sB,eAAeS,SAAS,oCAGvFltB,OAAJC,eAAQ4sB,EAAR3sB,UAAA,oBAAI,WACI,GAAIP,KAAKguB,MAAS,MAAO,EAEzB,IAAIhuB,KAAK00B,UAAW,CAC5B,GAAkB8B,GAAkBx2B,KAAK8sB,eAAeS,SAAS1R,IAAI,SAACyR,GAAW,MAAAA,GAAOiJ,WAI5E,OAFIv2B,MAAKswB,SAAWkG,EAAgBhN,UAE7BgN,EAAgB3I,KAAK,MAGhC,MAAO7tB,MAAK8sB,eAAeS,SAAS,GAAGgJ,2CAG3Cl2B,OAAJC,eAAQ4sB,EAAR3sB,UAAA,qBAAI,WACI,GAAIP,KAAKguB,MAAS,QAElB,IAAIhuB,KAAK00B,UAAW,CAC5B,GAAkB8B,GAAkBx2B,KAAK8sB,eAAeS,QAI5C,OAFIvtB,MAAKswB,SAAWkG,EAAgBhN,UAE7BgN,EAGX,OAAQx2B,KAAK8sB,eAAeS,SAAS,qCAGzCltB,OAAJC,eAAQ4sB,EAAR3sB,UAAA,aAAI,WACI,OAAQP,KAAK8sB,gBAAkB9sB,KAAK8sB,eAAe2J,2CAGvDvJ,EAAJ3sB,UAAA+vB,MAAI,WACI,QAAOtwB,KAAKmiC,MAA2B,QAApBniC,KAAKmiC,KAAK7gC,OAGjC4rB,EAAJ3sB,UAAA2P,cAAI,SAActK,GACL5F,KAAKN,WACFM,KAAKu1B,UACLv1B,KAAK02B,kBAAkB9wB,GAEvB5F,KAAK22B,oBAAoB/wB,KASrCsnB,EAAJ3sB,UAAAq2B,aAAI,WACI52B,KAAKi0B,mBAAqBj0B,KAAKu1B,UAC/Bv1B,KAAKiE,mBAAmBmB,gBAG5B8nB,EAAJ3sB,UAAAs2B,QAAI,WACS72B,KAAKN,WACNM,KAAK40B,UAAW,EAEhB50B,KAAKqW,aAAanM,SAQ1BgjB,EAAJ3sB,UAAA+b,OAAI,WACItc,KAAK40B,UAAW,EAEX50B,KAAKN,UAAaM,KAAKu1B,YACxBv1B,KAAKsiC,aACLtiC,KAAKiE,mBAAmBmB,eACxBpF,KAAKqW,aAAanM,SAO1BgjB,EAAJ3sB,UAAAu2B,WAAI,WAAA,GAAJ3yB,GAAAnE,IACQA,MAAKiwB,WAAW8G,eACXppB,KAAK2Y,EAAAA,KAAK,IACVzY,UAAU,WACP1J,EAAKF,mBAAmB6gB,gBACxB3gB,EAAK2rB,0BACL3rB,EAAKsqB,MAAMltB,cAAcmtB,UAAYvqB,EAAKuqB,aAKtDxB,EAAJ3sB,UAAAy2B,cAAI,WACI,MAAOh3B,MAAKoiC,iBAAmB,MAAMpiC,KAAKoiC,iBAAiBnL,MAAU,IAIzE/J,EAAJ3sB,UAAA+E,MAAI,WACItF,KAAKD,WAAWwB,cAAc+D,SAUlC4nB,EAAJ3sB,UAAAmvB,uBAAI,SAAuBwH,EAAuBzH,EAAsBF,GACxE,GAAcN,GAAajvB,KAAK4uB,gBAClBuI,EAA4BlI,EAAaiI,EAGzCE,EAAmBnI,EAAa,EAMhCoI,EAAwBF,EAA4B1H,EAAe2H,CAEzE,OAAOnf,MAAKoX,IAAIpX,KAAKC,IAAI,EAAGmf,GAAwB9H,IAOxDrC,EAAJ3sB,UAAAgY,iBAAI,WACIvY,KAAKsF,QACLtF,KAAKunB,QAIT2F,EAAJ3sB,UAAAgiC,oBAAI,SAAoBjV,EAAkB7e,GAClCA,EAAO5I,kBAEPynB,EAAOyI,YAGX7I,EAAJ3sB,UAAA01B,qBAAI,WACI,IAAIj2B,KAAKguB,OAAUhuB,KAAK6U,SAAxB,CAER,GAAY2iB,GAAuB,EACrBC,EAAkBz3B,KAAK03B,8BACzBC,EAAiC,CAYrC,IATA33B,KAAKsyB,KAAKziB,QAAQ,SAAC+nB,GACXA,EAAIr2B,cAAcs2B,UAAYD,EAAIr2B,cAAcu2B,eAChDH,GAA0BC,EAAIr2B,cAAc2uB,wBAAwBS,MAJjD,EAKnB6G,OAIRx3B,KAAK8zB,YAAe9zB,KAAa,SAAyBsd,OAASka,EAE/Dx3B,KAAK8zB,YAAa,CAC9B,GAAkBiE,GAAe/3B,KAAKyH,QAAQlG,cAAcy2B,cAAc,iCACxDC,EAAcj4B,KAAKyH,QAAQlG,cAAcy2B,cAAc,0BAEvDE,EAAqBH,EAAaF,UAAYE,EAAaD,aAI3DK,EAA2BF,EAAY/H,wBAAwBS,MAC/DyH,EAAuBD,EAHK,EAOlC,IAFID,GAAuBT,EAAkBW,IAAiBp4B,KAAK8zB,YAAc,GAG7E6D,IAA2BQ,GAC1BR,EAT6B,GASiBQ,EAI/C,WAFAn4B,MAAKiE,mBAAmBmB,gBAGhB8yB,GAAuBT,EAdD,GAcwCW,GACtEp4B,KAAK8zB,cAIb9zB,KAAKiE,mBAAmBmB,iBAGpB8nB,EAAZ3sB,UAAAm3B,4BAAI,WACJ,GAAcW,GAAer4B,KAAKyH,QAAQlG,cAAc+2B,WAAU,EAC1DD,GAAaL,cAAc,iCAAiCO,SAE5Dv4B,KAAKkiC,UAAUrhC,SAASw3B,EAAc,WAAY,YAClDr4B,KAAKkiC,UAAUrhC,SAASw3B,EAAc,aAAc,UACpDr4B,KAAKkiC,UAAUrhC,SAASw3B,EAAc,MAAO,SAC7Cr4B,KAAKkiC,UAAUrhC,SAASw3B,EAAc,OAAQ,KAE9Cr4B,KAAKkiC,UAAU1J,YAAYx4B,KAAKyH,QAAQlG,cAAe82B,EAE/D,IAAYZ,GAA0B,CAQ9B,OANAY,GAAaI,iBAAiB,UAAU5oB,QAAQ,SAACic,GAC7C2L,GAAmB3L,EAAKoE,wBAA6B,MAF9B,IAK3BmI,EAAaE,SAENd,GAIHvK,EAAZ3sB,UAAAo2B,oBAAI,SAA4B/wB,GAEhC,GAAcwK,GAAUxK,EAAMwK,QAChBsoB,EAAatoB,IAAYuoB,EAAAA,YAAcvoB,IAAYwoB,EAAAA,UACrDxoB,IAAYyoB,EAAAA,YAAczoB,IAAY0oB,EAAAA,WACxB1oB,KAAY2oB,EAAAA,OAAS3oB,IAAY4oB,EAAAA,QAGhCh5B,KAAK6U,UAAYjP,EAAMqzB,SAAWP,GACjD9yB,EAAM4W,iBACNxc,KAAKunB,QACGvnB,KAAK6U,UACb7U,KAAK+tB,WAAWmL,UAAUtzB,IAK1BsnB,EAAZ3sB,UAAAm2B,kBAAI,SAA0B9wB,GAE9B,GAAcwK,GAAUxK,EAAMwK,QAChBsoB,EAAatoB,IAAYuoB,EAAAA,YAAcvoB,IAAYwoB,EAAAA,SACnD4J,EAAUxiC,KAAK+tB,UAErB,IAAI3d,IAAYgpB,EAAAA,MAAQhpB,IAAYipB,EAAAA,IAChCzzB,EAAM4W,iBAEFpM,IAAYgpB,EAAAA,KACZoJ,EAAQvU,qBAERuU,EAAQlJ,wBAGT,IAAIZ,GAAc9yB,EAAMqzB,OAE3BrzB,EAAM4W,iBACNxc,KAAK0mB,YACF,IAAKtW,IAAY2oB,EAAAA,OAAS3oB,IAAY4oB,EAAAA,QAAUwJ,EAAQjJ,WAGxD,GAAIv5B,KAAK00B,WAAatkB,IAAYopB,EAAAA,GAAK5zB,EAAM6zB,QAAS,CACzD7zB,EAAM4W,gBAClB,IAAkBkd,GAAuB15B,KAAK4sB,QAAQhe,KAAK,SAAC0e,GAAW,OAACA,EAAOC,UACnEvtB,MAAK4sB,QAAQ/c,QAAQ,SAACyd,GACdoM,IAAyBpM,EAAO5tB,SAChC4tB,EAAOuI,SAEPvI,EAAOyI,iBAGZ,CACf,GAAkB4D,GAAyB6I,EAAQnU,eAEvCmU,GAAQtJ,UAAUtzB,GAEd5F,KAAK00B,WAAagE,GAAc9yB,EAAMg0B,UAAY4I,EAAQjJ,YAC1DiJ,EAAQnU,kBAAoBsL,GAC5B6I,EAAQjJ,WAAWM,2BAnBvBj0B,GAAM4W,iBACNgmB,EAAQjJ,WAAWM,wBAuBnB3M,EAAZ3sB,UAAA80B,oBAAI,WAAA,GAAJlxB,GAAAnE,IAGQ85B,SAAQC,UAAUC,KAAK,WACnB71B,EAAKmyB,oBAAoBnyB,EAAK2R,UAAY3R,EAAK2R,UAAUxU,MAAQ6C,EAAKqpB,WAQtEN,EAAZ3sB,UAAA+1B,oBAAI,SAA4Bh1B,GAA5B,GAAJ6C,GAAAnE,IACQ,IAAIA,KAAK6U,UAAYvT,EAAO,CACxB,IAAK24B,MAAMC,QAAQ54B,GACf,KAAM64B,IAGVn6B,MAAK8sB,eAAe9c,QACpB1O,EAAMuO,QAAQ,SAACya,GAAsB,MAAAnmB,GAAKi2B,YAAY9P,KACtDtqB,KAAKq6B,iBACF,CACHr6B,KAAK8sB,eAAe9c,OAChC,IAAkBsqB,GAAsBt6B,KAAKo6B,YAAY94B,EAIzCg5B,IACAt6B,KAAK+tB,WAAWG,cAAcoM,GAItCt6B,KAAKiE,mBAAmBmB,gBAOpB8nB,EAAZ3sB,UAAA65B,YAAI,SAAoB94B,GAApB,GAAJ6C,GAAAnE,KACcs6B,EAAsBt6B,KAAK4sB,QAAQtE,KAAK,SAACgF,GAC3C,IAEI,MAAuB,OAAhBA,EAAOhsB,OAAiB6C,EAAK4wB,aAAazH,EAAOhsB,MAAOA,GACjE,MAAOi5B,GAML,MALIC,GAAAA,aAEAC,QAAQC,KAAKH,IAGV,IAQf,OAJID,IACAt6B,KAAK8sB,eAAe+I,OAAOyE,GAGxBA,GAIHpN,EAAZ3sB,UAAAk1B,eAAI,WAAA,GAAJtxB,GAAAnE,IACQA,MAAK+tB,WAAa,GAAI0U,GAAAA,2BAAqCziC,KAAK4sB,SAC3D8V,gBACA/D,0BACAC,0BAA0B5+B,KAAKswB,QAAU,MAAQ,OAEtDtwB,KAAK+tB,WAAW4M,OACXhtB,KAAKC,EAAAA,UAAU5N,KAAK80B,UACpBjnB,UAAU,WAGP1J,EAAKmB,QACLnB,EAAKuiB,UAGb1mB,KAAK+tB,WAAWnpB,OACX+I,KAAKC,EAAAA,UAAU5N,KAAK80B,UACpBjnB,UAAU,WACH1J,EAAK0wB,YAAc1wB,EAAKsqB,MACxBtqB,EAAKgqB,6BACGhqB,EAAK0wB,YAAe1wB,EAAK0Q,WAAY1Q,EAAK4pB,WAAWwL,YAC7Dp1B,EAAK4pB,WAAWwL,WAAWM,0BAMnC3M,EAAZ3sB,UAAA61B,aAAI,WAAA,GAAJjyB,GAAAnE,KACc46B,EAAqBrU,EAAAA,MAAMvmB,KAAK4sB,QAAQ1C,QAASlqB,KAAK80B,QAE5D90B,MAAKo0B,uBACAzmB,KAAKC,EAAAA,UAAUgtB,IACf/sB,UAAU,SAACjI,GACRzB,EAAK02B,SAASj1B,EAAMY,OAAQZ,EAAM4tB,aAE9B5tB,EAAM4tB,cAAgBrvB,EAAK0Q,UAAY1Q,EAAK0wB,aAC5C1wB,EAAKuiB,QACLviB,EAAKmB,WAMjBihB,EAAAA,MAAR+N,UAAA,GAAiBt0B,KAAK4sB,QAAQ/Q,IAAI,SAACyR,GAAW,MAAAA,GAAOjX,gBACxC1I,KAAKC,EAAAA,UAAUgtB,IACf/sB,UAAU,WACP1J,EAAKF,mBAAmBmB,eACxBjB,EAAKkS,aAAanM,SAG1BlK,KAAK2tB,gBAIDT,EAAZ3sB,UAAAs6B,SAAI,SAAiBvN,EAAkBkG,GACvC,GAAcsH,GAAc96B,KAAK8sB,eAAeiO,WAAWzN,EAE/B,OAAhBA,EAAOhsB,OAAkBtB,KAAK00B,WAK1BpH,EAAOC,SACPvtB,KAAK8sB,eAAe+I,OAAOvI,GAE3BttB,KAAK8sB,eAAeiJ,SAASzI,GAG7BkG,GACAxzB,KAAK+tB,WAAWG,cAAcZ,GAG9BttB,KAAK6U,WACL7U,KAAKq6B,aAED7G,GAKAxzB,KAAKsF,WAtBbgoB,EAAOyI,WACP/1B,KAAK8sB,eAAe9c,QACpBhQ,KAAKmtB,iBAAiBG,EAAOhsB,QAyB7Bw5B,IAAgB96B,KAAK8sB,eAAeiO,WAAWzN,IAC/CttB,KAAKmtB,mBAGTntB,KAAKqW,aAAanM,QAIdgjB,EAAZ3sB,UAAA85B,WAAI;kCAAA,GAAJl2B,GAAAnE,IACQ,IAAIA,KAAK6U,SAAU,CAC3B,GAAkB8X,GAAU3sB,KAAK4sB,QAAQC,SAE7B7sB,MAAK8sB,eAAeC,KAAK,SAACC,EAAGC,GACzB,MAAO9oB,GAAKuQ,eAAiBvQ,EAAKuQ,eAAesY,EAAGC,EAAGN,GACnDA,EAAQ5Q,QAAQiR,GAAKL,EAAQ5Q,QAAQkR,KAE7CjtB,KAAKqW,aAAanM,SAKlBgjB,EAAZ3sB,UAAA4sB,iBAAI,SAAyBC,GAC7B,GAAYC,GAAmB,IAGnBA,GADArtB,KAAK6U,SACU7U,KAAa,SAAgB6b,IAAI,SAACyR,GAAW,MAAAA,GAAOhsB,QAErDtB,KAAKutB,SAAYvtB,KAAa,SAAcsB,MAAQ8rB,EAGtEptB,KAAKwtB,OAASH,EACdrtB,KAAKwU,YAAY/N,KAAK4mB,GACtBrtB,KAAKytB,UAAUJ,GACfrtB,KAAKuU,gBAAgB9N,KAAK,GAAIinB,IAAe1tB,KAAMqtB,IACnDrtB,KAAKiE,mBAAmBmB,gBAIpB8nB,EAAZ3sB,UAAAotB,aAAI,WACI3tB,KAAK4tB,UAAY5tB,KAAK4sB,QAAQ/Q,IAAI,SAACyR,GAAW,MAAAA,GAAO7oB,KAAIopB,KAAK,MAO1DX,EAAZ3sB,UAAAutB,uBAAI,WACQ9tB,KAAK+tB,aACD/tB,KAAKguB,MACLhuB,KAAK+tB,WAAWE,qBAEhBjuB,KAAK+tB,WAAWG,cAAcluB,KAAK8sB,eAAeS,SAAS,MAM/DL,EAAZ3sB,UAAA4tB,2BAAI,WACJ,GAAcC,GAAoBpuB,KAAK+tB,WAAWM,iBAAmB,EACvDC,EAAaC,EAA6BH,EAAmBpuB,KAAK4sB,QAAS5sB,KAAKwuB,aAEtFxuB,MAAKyuB,MAAMltB,cAAcmtB,UAAYC,EACjCP,EAAoBE,EACpBtuB,KAAK4uB,gBACL5uB,KAAKyuB,MAAMltB,cAAcmtB,UaziCE,Mb+iC3BxB,EAAZ3sB,UAAAsuB,eAAI,SAAuBvB,GAEnB,MAAOttB,MAAK4sB,QAAQkC,OAAO,SAACzQ,EAAgB0Q,EAAmBrF,GAE3D,WAAkBtX,KAAXiM,EAAwBiP,IAAWyB,EAAUrF,MAAQtX,GAAaiM,OAC1EjM,KAIC8a,EAAZ3sB,UAAAyuB,yBAAI,WACJ,GAAcC,GAAajvB,KAAK4uB,gBAClBM,EAAQlvB,KAAKmvB,eACbC,EAAcnX,KAAKoX,IAAIH,EAAQD,Ea3jCN,Kb4jCzBK,EAAwBJ,EAAQD,EAGhCM,EAAYD,EAAwBF,EAGtCI,EACAxvB,KAAKguB,MAAQ,EAAIhuB,KAAK6uB,eAAe7uB,KAAK8sB,eAAeS,SAAS,GAEtEiC,IAAwBjB,EAA6BiB,EAAsBxvB,KAAK4sB,QAAS5sB,KAAKwuB,aAKtG,IAAciB,GAAeL,EAAc,CACnCpvB,MAAK0uB,UAAY1uB,KAAK0vB,uBAAuBF,EAAsBC,EAAcF,GACjFvvB,KAAK2vB,QAAU3vB,KAAK4vB,0BAEpB5vB,KAAK6vB,2BAA2BN,IAU5BrC,EAAZ3sB,UAAAuvB,wBAAI,WACJ,GAKYC,GALEC,EAAchwB,KAAKiwB,WAAWljB,WAAWsC,eAAe6gB,wBACxDC,EAAenwB,KAAKowB,eAAeC,kBACnCC,EAAQtwB,KAAKswB,QAKb/C,EAAWvtB,KAAK8sB,eAAeS,SAAS,IAAMvtB,KAAK4sB,QAAQ2D,KACjER,GAAUxC,GAAYA,EAASiD,Ma1lCMlc,EAJP,EbimCzBgc,IAASP,IAAY,EAGlC,IAAcU,GAAe,GAAKT,EAAYtoB,KAAOqoB,GAAWO,EAVnChc,EAU0D,IACzEoc,EAAgBV,EAAYhN,MAAQ+M,EAAUI,EAAaQ,OAC1DL,EAAQ,EAZMhc,EAejBmc,GAAe,EACfV,GAAWU,EahmCsB,EbimC1BC,EAAgB,IACvBX,GAAWW,EalmCsB,GbwmCrC1wB,KAAKiwB,WAAWF,QAAU9X,KAAK2Y,MAAMb,GACrC/vB,KAAKiwB,WAAWljB,WAAWsB,kBAQvB6e,EAAZ3sB,UAAAqvB,wBAAI,WAKI,MAAO,IAUH1C,EAAZ3sB,UAAAsvB,2BAAI,SAAmCN,GACvC,GAAcN,GAAajvB,KAAK4uB,gBAClBuB,EAAenwB,KAAKowB,eAAeC,kBAEnCQ,EAAoB7wB,KAAK8wB,YAAYrhB,IapoCN,EbqoC/BshB,EACFZ,EAAanY,OAAShY,KAAK8wB,YAAY3N,OatoCN,EbwoC/B6N,EAAiB/Y,KAAKgZ,IAAIjxB,KAAK2vB,SAC/BuB,EACFjZ,KAAKoX,IAAIrvB,KAAKmvB,eAAiBF,EavpCJ,KbwpCzBkC,EAAoBD,EAAmBF,EAAiBhxB,KAAK8wB,YAAY9Y,MAE3EmZ,GAAoBJ,EACpB/wB,KAAKoxB,cAAcD,EAAmBJ,GAC/BC,EAAiBH,EACxB7wB,KAAKqxB,gBAAgBL,EAAgBH,EAAmBtB,GAExDvvB,KAAKsxB,gBAAkBtxB,KAAKuxB,0BAK5BrE,EAAZ3sB,UAAA6wB,cAAI,SAAsBD,EAA2BJ,GAErD,GAAcS,GAAwBvZ,KAAK2Y,MAAMO,EAAoBJ,EAI7D/wB,MAAK0uB,WAAa8C,EAClBxxB,KAAK2vB,SAAW6B,EAChBxxB,KAAKsxB,gBAAkBtxB,KAAKuxB,yBAKxBvxB,KAAK0uB,WAAa,IAClB1uB,KAAK0uB,UAAY,EACjB1uB,KAAK2vB,QAAU,EACf3vB,KAAKsxB,gBAAkB,mBAKvBpE,EAAZ3sB,UAAA8wB,gBAAI,SAAwBL,EAAwBH,EAA2BtB,GAE/E,GAAckC,GAAwBxZ,KAAK2Y,MAAMI,EAAiBH,EAW1D,IAPA7wB,KAAK0uB,WAAa+C,EAClBzxB,KAAK2vB,SAAW8B,EAChBzxB,KAAKsxB,gBAAkBtxB,KAAKuxB,yBAKxBvxB,KAAK0uB,WAAaa,EAKlB,MAJAvvB,MAAK0uB,UAAYa,EACjBvvB,KAAK2vB,QAAU,OACf3vB,KAAKsxB,gBAAkB,gBAOvBpE,EAAZ3sB,UAAAgxB,uBAAI,WACJ,GAActC,GAAajvB,KAAK4uB,gBAElB8C,GAA0BzC,EAAajvB,KAAK8wB,YAAY9Y,QAAU,CAIxE,OAAO,QAFSC,KAAKgZ,IAAIjxB,KAAK2vB,SAAW+B,EAAyBzC,EAAa,GAEvF,UAIY/B,EAAZ3sB,UAAA4uB,aAAI,WACI,MAAOnvB,MAAK4sB,QAAQtP,OAAStd,KAAKwuB,aAAalR,QAI3C4P,EAAZ3sB,UAAAquB,cAAI,WAGI,MAAO,oBAhnCfpwB,KAACC,EAAAA,UAADC,OACIC,SAAU,YACV+H,SAAU,WACV5H,SAAJ,0lEACID,QAAS,mmEACToI,QAAS,WAAY,YACrBlI,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,OACzC8H,MACIG,YAAa,KACbkM,kBAAmB,WACnBpM,MAAO,YACPG,sBAAuB,WACvBqqB,4BAA6B,aAC7BC,6BAA8B,WAC9B5f,YAAa,wBACbmH,UAAW,YACXD,SAAU,WACV2Y,kBAAmB,0BAEvBrqB,YACIsqB,GAAmBC,eACnBD,GAAmBE,eAEvBrrB,YACMC,QAASwS,GAAoBtS,YAAaomB,IAC1CtmB,QAASqrB,GAA4BnrB,YAAaomB,4CAnG5D1uB,KAAI0zB,EAAAA,gBAzCJ1zB,KAAIsJ,EAAAA,oBAWJtJ,KAAIc,EAAAA,SAMJd,KAAee,EAAAA,YAiCff,KAAIgb,KA5CJhb,KAAIa,EAAAA,aAmBJb,KAAS8T,EAAAA,eAATtK,aAAAxJ,KAqXS+T,EAAAA,aAvXT/T,KAA8D8a,EAAAA,OAA9DtR,aAAAxJ,KAwXS+T,EAAAA,aAxXT/T,KAA+B+a,EAAAA,mBAA/BvR,aAAAxJ,KAyXS+T,EAAAA,aAxUT/T,KAAS2zB,GAATnqB,aAAAxJ,KAyUS+T,EAAAA,aA1XT/T,KAAmD6a,EAAAA,UAAnDrR,aAAAxJ,KA2XSiV,EAAAA,OA3XTjV,KA2XiB+T,EAAAA,aACjB/T,KAAAuJ,OAAAC,aAAAxJ,KAASyJ,EAAAA,UAATvJ,MAAmB,gBACnBF,SAAA4T,GAAApK,aAAAxJ,KAAS6T,EAAAA,OAAT3T,MAAgB0zB,2BApMhB3qB,UAAAjJ,KAAK0J,EAAAA,UAALxJ,MAAe,aAEf+vB,QAAAjwB,KAAK0J,EAAAA,UAALxJ,MAAe,WAEfuxB,aAAAzxB,KAAK0J,EAAAA,UAALxJ,MAAe2zB,EAAAA,uBAEfC,OAAA9zB,KAAK+zB,EAAAA,aAAL7zB,MAAkB8zB,MAGlBC,gBAAAj0B,KAAKk0B,EAAAA,aAALh0B,MAAkBi0B,MAGlB/F,UAAApuB,KAAKo0B,EAAAA,gBAALl0B,MAAqBm0B,IAAYC,aAAa,MAG9CtE,eAAAhwB,KAAKo0B,EAAAA,gBAALl0B,MAAqBq0B,MAGrB3kB,aAAA5P,KAAKiB,EAAAA,QAGLgV,oBAAAjW,KAAKiB,EAAAA,QAMLiV,iBAAAlW,KAAKiB,EAAAA,QAcLuzB,eAAAx0B,KAAK2J,EAAAA,SAGL8qB,eAAAz0B,KAAK2J,EAAAA,OAALzJ,MAAY,YAIZw0B,eAAA10B,KAAK2J,EAAAA,OAALzJ,MAAY,YAIZ6V,kBAAA/V,KAAK2J,EAAAA,SAOLqM,cAAAhW,KAAK2J,EAAAA,SAELwM,cAAAnW,KAAKiB,EAAAA,QAaLmV,WAAApW,KAAKiB,EAAAA,QAaLoV,WAAArW,KAAKiB,EAAAA,QAoBLsV,cAAAvW,KAAKiB,EAAAA,QAoBL6B,QAAA9C,KAAKiB,EAAAA,QAcLgF,KAAAjG,KAAKiB,EAAAA,SA24BLytB,GAzlC8BiG,I4BzI9BC,GAAA,WAAA,QAAAA,MAY6B,sBAZ7B50B,KAACsE,EAAAA,SAADpE,OACIqE,SACIC,EAAAA,aACA8P,EAAAA,cACAugB,GACApwB,GACAoS,IAEJnS,SAAUowB,GAAmBpG,GAAUyF,GAAiBU,GAAgBrwB,EAAAA,cACxEG,cAAe+pB,GAAUyF,IACzBhsB,WAAY6O,QAEhB4d,KbiEIhwB,GAAe,gBAIf,QAAJmwB,GAAuB/sB,EAA6BlF,EAAmBkyB,OAAvE,KAAAA,IAAuEA,GAAvE,GAAuBxzB,KAAvBwG,OAAuBA,EAA6BxG,KAApDsB,MAAoDA,EAAmBtB,KAAvEwzB,YAAuEA,EACvE,MAAAD,MAGAhe,GAAA,WAAA,QAAAA,MACkC,sBADlC/W,KAACkD,EAAAA,UAADhD,OAAaC,SAAU,6BACvB4W,KAGAke,GAAA,WACI,QAAJA,GACe1zB,EACA4V,EACAC,EACAC,EACAC,GAJA9V,KAAfD,WAAeA,EACAC,KAAf2V,yBAAeA,EACA3V,KAAf4V,WAAeA,EACA5V,KAAf6V,gBAAeA,EACA7V,KAAf8V,UAAeA,EAEf,MAAA2d,MAGMxe,GACwBzR,EAAcE,EAAcsS,EAAgByd,MAG1Eze,GAAA,SAAAjR,GAmSI,QAAJiR,GACyB0e,EACR1P,EACQpY,EACA9L,EACjB6V,EACO5V,EACsB4zB,EACjB/d,EACAC,EACiB+d,EACF9d,EACJ5R,EAC6B2vB,GAbxD,GAAJ1vB,GAeQJ,EAfRK,KAAApE,KAecD,EAAY4V,EAA0BC,EAAYC,EAAiBC,IAfjF9V,WACyBmE,GAAzBuvB,cAAyBA,EACRvvB,EAAjB6f,kBAAiBA,EACQ7f,EAAzByH,OAAyBA,EACAzH,EAAzBrE,SAAyBA,EAEVqE,EAAfpE,WAAeA,EACsBoE,EAArCwvB,IAAqCA,EAGAxvB,EAArCyvB,gBAAqCA,EACFzvB,EAAnC2R,UAAmCA,EAEyB3R,EAA5D0vB,sBAA4DA,EA5QxD1vB,EAAJmS,YAAkB,YAEdnS,EAAJ2vB,YAA0B,EACtB3vB,EAAJ4vB,YAA0B,SAMtB5vB,EAAJ6vB,gBAAsB,EAMlB7vB,EAAJypB,UAAwB,GAGpBzpB,EAAJmtB,gBAA8B,MAG1BntB,EAAJ8vB,oBAAkC,EAG9B9vB,EAAJ+vB,yBAA+B,GAAI5qB,GAAAA,QAG/BnF,EAAJ4H,eAAqB5H,EAAK0vB,wBAOtB1vB,EAAJwrB,QAAc,EAQVxrB,EAAJuE,YAEYqG,QAAS,QACTC,QAAS,SACTC,SAAU,QACVC,SAAU,QAGVH,QAAS,QACTC,QAAS,MACTC,SAAU,QACVC,SAAU,WAkBC/K,EAAvB6uB,aAA6D,GAAInuB,GAAAA,aAGlCV,EAA/B8uB,aACQ9uB,EAAK6uB,aAAarlB,KAAKwY,EAAAA,OAAO,SAACgO,GAAM,MAAAA,KAAItY,EAAAA,IAAI,eAGtB1X,EAA/B+uB,aACQ/uB,EAAK6uB,aAAarlB,KAAKwY,EAAAA,OAAO,SAACgO,GAAM,OAACA,IAAItY,EAAAA,IAAI,eAG/B1X,EAAvBoQ,gBAAyC,GAAI1P,GAAAA,aAOtBV,EAAvBqQ,YAAwD,GAAI3P,GAAAA,aAiB/CV,EAAbiwB,uBAAsEC,EAAAA,MAAM,WACpE,MAAIlwB,GAAKyoB,QACErG,EAAAA,MAAnB+N,UAAA,GAA4BnwB,EAAKyoB,QAAQ/Q,IAAI,SAACyR,GAAW,MAAAA,GAAOiH,qBAGjDpwB,EAAKyH,OAAO4oB,SACd7qB,eACAgE,KAAK2Y,EAAAA,KAAK,GAAImO,EAAAA,UAAU,WAAM,MAAAtwB,GAAKiwB,4BA+BpCjwB,EAAZqS,WAAiC,EAerBrS,EAAZuwB,WAAiC,EAarBvwB,EAAZwwB,aAAmC,EAkEvBxwB,EAAZywB,UAAuB,EAMXzwB,EAAZ0wB,YAAyB,EAGb1wB,EAAZuqB,UAAwB,EAGHvqB,EAArBoS,IAA2B,aAAanT,KAGnBe,EAArB2wB,QAA+B,GAAIxrB,GAAAA,QA8G/BnF,EAAJ2W,SAAqC,aAGjC3W,EAAJkY,UAAgB,aA8vBJlY,EAAZ4wB,aAA2B,SAACC,EAASC,GAAY,MAAAD,KAAOC,GA51B5C9wB,EAAK2R,YAGL3R,EAAK2R,UAAUc,cAAgBzS,GAGnCA,EAAKD,SAAWe,SAASf,IAAa,EAGtCC,EAAKM,GAAKN,EAAKM,KAo1BvB,MAlnCkCU,GAAlC6P,EAAAjR,GA6HI1D,OAAJC,eACQ0U,EADRzU,UAAA,mBAAI,WAEI,MAAOP,MAAKk1B,kBAGhB,SAAgB5zB,GACZtB,KAAKk1B,aAAe5zB,EAEpBtB,KAAKqW,aAAanM,wCAKtB7J,OAAJC,eACQ0U,EADRzU,UAAA,gBAAI,WAEI,MAAOP,MAAKwW,eAGhB,SAAalV,GACTtB,KAAKwW,UAAYhW,EAAAA,sBAAsBc,GAEvCtB,KAAKqW,aAAanM,wCAKtB7J,OAAJC,eACQ0U,EADRzU,UAAA,gBAAI,WAEI,MAAOP,MAAK00B,eAGhB,SAAapzB,GACT,GAAItB,KAAK8sB,eACL,KAAMqI,IAGVn1B,MAAK00B,UAAYl0B,EAAAA,sBAAsBc,oCAK3CjB,OAAJC,eACQ0U,EADRzU,UAAA,kBAAI,WAEI,OAAIP,KAAK6U,UAEF7U,KAAK20B,iBAGhB,SAAerzB,GACXtB,KAAK20B,YAAcn0B,EAAAA,sBAAsBc,oCAU7CjB,OAAJC,eACQ0U,EADRzU,UAAA,mBAAI,WAEI,MAAOP,MAAK+0B,kBAGhB,SAAgB3uB,GAEZ,GAAkB,kBAAPA,GACP,KAAMgvB,IAGVp1B,MAAK+0B,aAAe3uB,EAEhBpG,KAAK8sB,gBAEL9sB,KAAKq1B,uDAKbh1B,OAAJC,eACQ0U,EADRzU,UAAA,aAAI,WAEI,MAAOP,MAAKwtB,YAGhB,SAAUhV,GACFA,IAAaxY,KAAKwtB,SAClBxtB,KAAKkG,WAAWsS,GAChBxY,KAAKwtB,OAAShV,oCAMtBnY,OAAJC,eACQ0U,EADRzU,UAAA,UAAI,WAEI,MAAOP,MAAKmX,SAGhB,SAAO7V,GACHtB,KAAKmX,IAAM7V,GAAStB,KAAKuW,IACzBvW,KAAKqW,aAAanM,wCAMtB7J,OAAJC,eAAQ0U,EAARzU,UAAA,eAAI,WACI,MAAOP,MAAK40B,UAAY50B,KAAK60B,gBAOjC,SAAYvzB,GACRtB,KAAK40B,SAAWtzB,mCAKpBjB,OAAJC,eAAQ0U,EAARzU,UAAA,iBAAI,WACI,MAAOP,MAAK60B,4CA2ChB7f,EAAJzU,UAAAK,SAAI,WAAA,GAAJuD,GAAAnE,IACYA,MAAKs1B,OACLt1B,KAAKs1B,KAAKzgB,SAAW7U,KAAK6U,UAG9B7U,KAAKqW,aAAanM,OAKlBlK,KAAKk0B,yBACAvmB,KAAKkD,EAAAA,uBAAwBjD,EAAAA,UAAU5N,KAAK80B,UAC5CjnB,UAAU,WACH1J,EAAKoxB,WACLpxB,EAAKuqB,UAAY,EACjBvqB,EAAK6uB,aAAavsB,MAAK,KAEvBtC,EAAK6uB,aAAavsB,MAAK,GACvBtC,EAAK8vB,oBAAqB,EAC1B9vB,EAAK8rB,WAAWF,QAAU,EAC1B5rB,EAAK6f,kBAAkB5e,mBAKvC4P,EAAJzU,UAAAi1B,mBAAI,WACSx1B,KAAKs1B,OAEVt1B,KAAKy1B,iBAELz1B,KAAK8sB,eAAiB9sB,KAAKs1B,KAAKxI,eAAiB,GAAI4I,GAAAA,eAA6B11B,KAAK6U,UACvF7U,KAAK4sB,QAAU5sB,KAAKs1B,KAAK1I,QACzB5sB,KAAKs1B,KAAKxgB,WAAa9U,KAAK8U,WAE5B9U,KAAK8sB,eAAe6I,QACfhoB,KAAKC,EAAAA,UAAU5N,KAAK80B,UACpBjnB,UAAU,SAACjI,GACRA,EAAMgwB,MAAM/lB,QAAQ,SAACyd,GAAW,MAAAA,GAAOuI,WACvCjwB,EAAMkwB,QAAQjmB,QAAQ,SAACyd,GAAW,MAAAA,GAAOyI,iBAIrD/gB,EAAJzU,UAAAy1B,gBAAI,WAAA,GAAJ7xB,GAAAnE,IACaA,MAAKs1B,OAEVt1B,KAAKsyB,KAAKpI,QACLrc,UAAU,WACPpD,WAAW,WAAM,MAAAtG,GAAK8xB,wBAAwB,KAGtDj2B,KAAK4sB,QAAQ1C,QACRvc,KAAKuoB,EAAAA,UAAU,MAAOtoB,EAAAA,UAAU5N,KAAK80B,UACrCjnB,UAAU,WACP1J,EAAKgyB,wBAELhyB,EAAKiyB,mBAIjBphB,EAAJzU,UAAAiX,UAAI,WACQxX,KAAK8V,WAAa9V,KAAKyX,oBAG/BzC,EAAJzU,UAAA+W,YAAI,SAAY4S,GAGJA,EAAQxqB,UACRM,KAAKqW,aAAanM,QAI1B8K,EAAJzU,UAAAyB,YAAI,WACIhC,KAAK80B,QAAQ5qB,OAEblK,KAAK80B,QAAQ7kB,WACbjQ,KAAKqW,aAAapG,YAStB+E,EAAJzU,UAAAwT,OAAI,WACQ/T,KAAKu1B,UACLv1B,KAAK0mB,QAEL1mB,KAAKunB,QAIbvS,EAAJzU,UAAAgnB,KAAI,WAAA,GAAJpjB,GAAAnE,MACYA,KAAKN,UAAaM,KAAK4sB,SAAY5sB,KAAK4sB,QAAQtP,SAAUtd,KAAK60B,aAEnE70B,KAAK8wB,YAAc9wB,KAAKyH,QAAQlG,cAAc2uB,wBAG9ClwB,KAAKg0B,gBAAkB/uB,SAASxC,iBAAiBzC,KAAKyH,QAAQlG,eAAe,cAE7EvB,KAAK60B,YAAa,EAElB70B,KAAKgvB,2BACLhvB,KAAK8tB,yBACL9tB,KAAKgkB,kBAAkB5e,eAGvBpF,KAAK4L,OAAO4oB,SAAS7qB,eAChBgE,KAAK2Y,EAAAA,KAAK,IACVzY,UAAU,WACH1J,EAAK6vB,iBAAmB7vB,EAAK8rB,WAAWljB,YACxC5I,EAAK8rB,WAAWljB,WAAWsC,iBAC3BlL,EAAK8rB,WAAWljB,WAAWsC,eAAezM,MAAMyzB,SAAclyB,EAAK6vB,gBAAvF,UAMIhf,EAAJzU,UAAAmmB,MAAI,WACQ1mB,KAAK60B,aACL70B,KAAK60B,YAAa,EAKlB70B,KAAKgkB,kBAAkB5e,eACvBpF,KAAKqc,cAWbrH,EAAJzU,UAAA2F,WAAI,SAAW5E,GACHtB,KAAK4sB,SACL5sB,KAAKs2B,oBAAoBh1B,IAWjC0T,EAAJzU,UAAA4F,iBAAI,SAAiBC,GACbpG,KAAK8a,SAAW1U,GAUpB4O,EAAJzU,UAAA8F,kBAAI,SAAkBD,GACdpG,KAAKqc,UAAYjW,GASrB4O,EAAJzU,UAAA+F,iBAAI,SAAiBC,GACbvG,KAAKN,SAAW6G,EAChBvG,KAAKgkB,kBAAkB5e,eACvBpF,KAAKqW,aAAanM,QAGtB7J,OAAJC,eAAQ0U,EAARzU,UAAA,gBAAI,WACI,MAAOP,MAAK6U,SAAW7U,KAAK8sB,eAAeS,SAAWvtB,KAAK8sB,eAAeS,SAAS,oCAGvFltB,OAAJC,eAAQ0U,EAARzU,UAAA,oBAAI,WACI,MAAIP,MAAKguB,MAAgB,GAEjBhuB,KAAa,SAAkBu2B,2CAG3Cl2B,OAAJC,eAAQ0U,EAARzU,UAAA,qBAAI,WACI,GAAIP,KAAKguB,MAAS,QAE1B,IAAcwI,GAAkBx2B,KAAK8sB,eAAeS,QAI5C,OAFIvtB,MAAKswB,SAAWkG,EAAgBhN,UAE7BgN,mCAGXn2B,OAAJC,eAAQ0U,EAARzU,UAAA,aAAI,WACI,OAAQP,KAAK8sB,gBAAkB9sB,KAAK8sB,eAAe2J,2CAGvDzhB,EAAJzU,UAAA+vB,MAAI,WACI,QAAOtwB,KAAK2zB,KAAyB,QAAnB3zB,KAAK2zB,IAAIryB,OAG/B0T,EAAJzU,UAAA2P,cAAI,SAActK,GACL5F,KAAKN,WACFM,KAAKu1B,UACLv1B,KAAK02B,kBAAkB9wB,GAEvB5F,KAAK22B,oBAAoB/wB,KASrCoP,EAAJzU,UAAAq2B,aAAI,WACI52B,KAAKi0B,mBAAqBj0B,KAAKu1B,UAC/Bv1B,KAAKgkB,kBAAkB5e,gBAG3B4P,EAAJzU,UAAAs2B,QAAI,WACS72B,KAAKN,WACNM,KAAK40B,UAAW,EAEhB50B,KAAKqW,aAAanM,SAQ1B8K,EAAJzU,UAAA+b,OAAI,WACItc,KAAK40B,UAAW,EAEX50B,KAAKN,UAAaM,KAAKu1B,YACxBv1B,KAAKqc,YACLrc,KAAKgkB,kBAAkB5e,eACvBpF,KAAKqW,aAAanM,SAK1B8K,EAAJzU,UAAAu2B,WAAI,WAAA,GAAJ3yB,GAAAnE,IACQA,MAAKiwB,WAAW8G,eACXppB,KAAK2Y,EAAAA,KAAK,IACVzY,UAAU,WACP1J,EAAK6f,kBAAkBc,gBACvB3gB,EAAK2rB,0BACL3rB,EAAKsqB,MAAMltB,cAAcmtB,UAAYvqB,EAAKuqB,aAKtD1Z,EAAJzU,UAAAy2B,cAAI,WACI,MAAOh3B,MAAK4zB,gBAAkB,MAAM5zB,KAAK4zB,gBAAgBqD,MAAU,IAIvEjiB,EAAJzU,UAAA+E,MAAI,WACItF,KAAKD,WAAWwB,cAAc+D,SAUlC0P,EAAJzU,UAAAmvB,uBAAI,SAAuBwH,EAAuBzH,EAAsBF,GACxE,GAAcN,GAAajvB,KAAK4uB,gBAClBuI,EAA4BlI,EAAaiI,EAGzCE,EAAmBnI,EAAa,EAMhCoI,EAAwBF,EAA4B1H,EAAe2H,CAEzE,OAAOnf,MAAKoX,IAAIpX,KAAKC,IAAI,EAAGmf,GAAwB9H,IAOxDva,EAAJzU,UAAAgY,iBAAI,WACIvY,KAAKsF,QACLtF,KAAKunB,QAITvS,EAAJzU,UAAA+2B,uBAAI,SAAuBC,EAA8B9oB,GACjDA,EAAO5I,kBAEP7F,KAAK4sB,QAAQ/c,QAAQ,SAACyd,GACdA,EAAOxc,OAASymB,EAAezmB,MAAQwc,EAAOyI,aAGtD/1B,KAAK8sB,eAAeiJ,SAASwB,IAGjCviB,EAAJzU,UAAA01B,qBAAI,WACI,IAAIj2B,KAAKguB,OAAUhuB,KAAK6U,SAAxB,CAER,GAAY2iB,GAAuB,EACrBC,EAAkBz3B,KAAK03B,8BACzBC,EAAiC,CAYrC,IATA33B,KAAKsyB,KAAKziB,QAAQ,SAAC+nB,GACXA,EAAIr2B,cAAcs2B,UAAYD,EAAIr2B,cAAcu2B,eAChDH,GAA0BC,EAAIr2B,cAAc2uB,wBAAwBS,MAJjD,EAKnB6G,OAIRx3B,KAAK8zB,YAAc9zB,KAAK8sB,eAAeS,SAASjQ,OAASka,EAErDx3B,KAAK8zB,YAAa,CAC9B,GAAkBiE,GAAe/3B,KAAKyH,QAAQlG,cAAcy2B,cAAc,sCACxDC,EAAcj4B,KAAKyH,QAAQlG,cAAcy2B,cAAc,+BAEvDE,EAAqBH,EAAaF,UAAYE,EAAaD,aAI3DK,EAA2BF,EAAY/H,wBAAwBS,MAC/DyH,EAAuBD,EAHK,EAOlC,IAFID,GAAuBT,EAAkBW,IAAiBp4B,KAAK8zB,YAAc,GAG7E6D,IAA2BQ,GAC1BR,EAT6B,GASiBQ,EAI/C,WAFAn4B,MAAKgkB,kBAAkB5e,gBAGf8yB,GAAuBT,EAdD,GAcwCW,GACtEp4B,KAAK8zB,cAIb9zB,KAAKgkB,kBAAkB5e,iBAGnB4P,EAAZzU,UAAA41B,sBAAI,WAAA,GAAJhyB,GAAAnE,IACQA,MAAK8sB,eAAeS,SAAS1d,QAAQ,SAAC0nB,GAClCpzB,EAAKyoB,QAAQ/c,QAAQ,SAACyd,GACdA,EAAOxc,OAASymB,EAAezmB,OAC/B3M,EAAK2oB,eAAeiJ,SAASwB,GAC7BpzB,EAAK2oB,eAAe+I,OAAOvI,GAE3BA,EAAOuI,eAMf7gB,EAAZzU,UAAAm3B,4BAAI,WACJ,GAAcW,GAAer4B,KAAKyH,QAAQlG,cAAc+2B,WAAU,EAC1DD,GAAaL,cAAc,sCAAsCO,SAEjEv4B,KAAKF,SAASe,SAASw3B,EAAc,WAAY,YACjDr4B,KAAKF,SAASe,SAASw3B,EAAc,aAAc,UACnDr4B,KAAKF,SAASe,SAASw3B,EAAc,MAAO,SAC5Cr4B,KAAKF,SAASe,SAASw3B,EAAc,OAAQ,KAE7Cr4B,KAAKF,SAAS04B,YAAYx4B,KAAKyH,QAAQlG,cAAe82B,EAE9D,IAAYZ,GAA0B,CAQ9B,OANAY,GAAaI,iBAAiB,UAAU5oB,QAAQ,SAACic,GAC7C2L,GAAmB3L,EAAKoE,wBAA6B,MAF9B,IAK3BmI,EAAaE,SAENd,GAGHziB,EAAZzU,UAAAo2B,oBAAI,SAA4B/wB,GAEhC,GAAcwK,GAAUxK,EAAMwK,QAChBsoB,EAAatoB,IAAYuoB,EAAAA,YAAcvoB,IAAYwoB,EAAAA,UACrDxoB,IAAYyoB,EAAAA,YAAczoB,IAAY0oB,EAAAA,WACxB1oB,KAAY2oB,EAAAA,OAAS3oB,IAAY4oB,EAAAA,QAGhCh5B,KAAK6U,UAAYjP,EAAMqzB,SAAWP,GAEjD9yB,EAAM4W,iBAENxc,KAAKunB,SACGvnB,KAAK6U,UAAY7U,KAAKs1B,KAAKvH,YAAc/tB,KAAKs1B,KAAKvH,WAAWmL,WACtEl5B,KAAKs1B,KAAKvH,WAAWmL,UAAUtzB,IAI/BoP,EAAZzU,UAAAm2B,kBAAI,SAA0B9wB,GAE9B,GAAcwK,GAAUxK,EAAMwK,QAChBsoB,EAAatoB,IAAYuoB,EAAAA,YAAcvoB,IAAYwoB,EAAAA,QAEzD,IAAIF,GAAc9yB,EAAMqzB,OAEpBrzB,EAAM4W,iBAENxc,KAAK0mB,YACF,CAAA,GAAItW,IAAYyoB,EAAAA,YAAczoB,IAAY0oB,EAAAA,YAC7C,MAAO94B,MAAKm5B,kBAAkB/0B,KAAKpE,KAAKs1B,KAAM1vB,EAC3C,IAAIwK,IAAYgpB,EAAAA,MAAQhpB,IAAYipB,EAAAA,IACvCzzB,EAAM4W,iBAEFpM,IAAYgpB,EAAAA,KACZp5B,KAAKs1B,KAAKvH,WAAWE,qBAErBjuB,KAAKs1B,KAAKvH,WAAWuL,wBAEtB,IAAKlpB,IAAY2oB,EAAAA,OAAS3oB,IAAY4oB,EAAAA,QAAUh5B,KAAKs1B,KAAKvH,WAAWwL,WAIrE,GAAIv5B,KAAK6U,UAAYzE,IAAYopB,EAAAA,GAAK5zB,EAAM6zB,QAAS,CACxD7zB,EAAM4W,gBAElB,IAAkBkd,GAAuB15B,KAAK4sB,QAAQhe,KAAK,SAAC0e,GAAW,OAACA,EAAOC,UAEnEvtB,MAAK4sB,QAAQ/c,QAAQ,SAACyd,GACdoM,IAAyBpM,EAAO5tB,SAChC4tB,EAAOuI,SAEPvI,EAAOyI,iBAGZ,CACf,GAAkB4D,GAAyB35B,KAAKs1B,KAAKvH,WAAWM,eAEpDruB,MAAKs1B,KAAKvH,WAAWmL,UAAUtzB,GAE3B5F,KAAK6U,UAAY6jB,GAAc9yB,EAAMg0B,UAAY55B,KAAKs1B,KAAKvH,WAAWwL,YACtEv5B,KAAKs1B,KAAKvH,WAAWM,kBAAoBsL,GACzC35B,KAAKs1B,KAAKvH,WAAWwL,WAAWM,2BAtBpCj0B,GAAM4W,iBAENxc,KAAKs1B,KAAKvH,WAAWwL,WAAWM,yBAyBhC7kB,EAAZzU,UAAA80B,oBAAI,WAAA,GAAJlxB,GAAAnE,IAGQ85B,SAAQC,UAAUC,KAAK,WACnB71B,EAAKmyB,oBAAoBnyB,EAAK2R,UAAY3R,EAAK2R,UAAUxU,MAAQ6C,EAAKqpB,WAQtExY,EAAZzU,UAAA+1B,oBAAI,SAA4Bh1B,GAA5B,GAAJ6C,GAAAnE,IACQ,IAAIA,KAAK6U,UAAYvT,EAAO,CACxB,IAAK24B,MAAMC,QAAQ54B,GAAU,KAAM64B,IAEnCn6B,MAAK8sB,eAAe9c,QACpB1O,EAAMuO,QAAQ,SAACya,GAAsB,MAAAnmB,GAAKi2B,YAAY9P,KACtDtqB,KAAKq6B,iBACF,CACHr6B,KAAK8sB,eAAe9c,OAChC,IAAkBsqB,GAAsBt6B,KAAKo6B,YAAY94B,EAIzCg5B,IACAt6B,KAAKs1B,KAAKvH,WAAWG,cAAcoM,GAI3Ct6B,KAAKgkB,kBAAkB5e,gBAOnB4P,EAAZzU,UAAA65B,YAAI,SAAoB94B,GAApB,GAAJ6C,GAAAnE,KACcs6B,EAAsBt6B,KAAK4sB,QAAQtE,KAAK,SAACgF,GAC3C,IAEI,MAAuB,OAAhBA,EAAOhsB,OAAiB6C,EAAK4wB,aAAazH,EAAOhsB,MAAOA,GACjE,MAAOi5B,GAML,MALIC,GAAAA,aAEAC,QAAQC,KAAKH,IAGV,IAQf,OAJID,IACAt6B,KAAK8sB,eAAe+I,OAAOyE,GAGxBA,GAGHtlB,EAAZzU,UAAAk1B,eAAI,WAAA,GAAJtxB,GAAAnE,IACQA,MAAKm5B,kBAAoBn5B,KAAKs1B,KAAKzX,UAEnC7d,KAAKs1B,KAAKzX,UAAY,aAEtB7d,KAAKs1B,KAAKvH,WAAW4M,OAChBhtB,KAAKC,EAAAA,UAAU5N,KAAK80B,UACpBjnB,UAAU,WAGP1J,EAAKmB,QACLnB,EAAKuiB,UAGb1mB,KAAKs1B,KAAKvH,WAAWnpB,OAChB+I,KAAKC,EAAAA,UAAU5N,KAAK80B,UACpBjnB,UAAU,WACH1J,EAAK0wB,YAAc1wB,EAAKsqB,MACxBtqB,EAAKgqB,6BACGhqB,EAAK0wB,YAAe1wB,EAAK0Q,WAAY1Q,EAAKmxB,KAAKvH,WAAWwL,YAClEp1B,EAAKmxB,KAAKvH,WAAWwL,WAAWM,0BAMxC7kB,EAAZzU,UAAA61B,aAAI,WAAA,GAAJjyB,GAAAnE,KACc46B,EAAqBrU,EAAAA,MAAMvmB,KAAK4sB,QAAQ1C,QAASlqB,KAAK80B,QAE5D90B,MAAKo0B,uBACAzmB,KAAKC,EAAAA,UAAUgtB,IACf/sB,UAAU,SAACjI,GACRzB,EAAK02B,SAASj1B,EAAMY,OAAQZ,EAAM4tB,aAE9B5tB,EAAM4tB,cAAgBrvB,EAAK0Q,UAAY1Q,EAAK0wB,aAC5C1wB,EAAKuiB,QACLviB,EAAKmB,WAajBtF,KAAK2tB,gBAID3Y,EAAZzU,UAAAs6B,SAAI,SAAiBvN,EAAsBkG,GAC3C,GAAcsH,GAAc96B,KAAK8sB,eAAeiO,WAAWzN,EAE/B,OAAhBA,EAAOhsB,OAAkBtB,KAAK6U,UAK1ByY,EAAOC,SACPvtB,KAAK8sB,eAAe+I,OAAOvI,GAE3BttB,KAAK8sB,eAAeiJ,SAASzI,GAG7BkG,GACAxzB,KAAKs1B,KAAKvH,WAAWG,cAAcZ,GAGnCttB,KAAK6U,WACL7U,KAAKq6B,aAED7G,GAKAxzB,KAAKsF,WAtBbgoB,EAAOyI,WACP/1B,KAAK8sB,eAAe9c,QACpBhQ,KAAKmtB,iBAAiBG,EAAOhsB,QAyB7Bw5B,IAAgB96B,KAAK8sB,eAAeiO,WAAWzN,IAC/CttB,KAAKmtB,mBAGTntB,KAAKqW,aAAanM,QAId8K,EAAZzU,UAAA85B,WAAI,WAAA,GAAJl2B,GAAAnE,IACQ,IAAIA,KAAK6U,SAAU,CAC3B,GAAkB8X,GAAU3sB,KAAK4sB,QAAQC,SAE7B7sB,MAAK8sB,eAAeC,KAAK,SAACC,EAAGC,GACzB,MAAO9oB,GAAKuQ,eAAiBvQ,EAAKuQ,eAAesY,EAAGC,EAAGN,GACnDA,EAAQ5Q,QAAQiR,GAAKL,EAAQ5Q,QAAQkR,KAE7CjtB,KAAKqW,aAAanM,SAKlB8K,EAAZzU,UAAA4sB,iBAAI,SAAyBC,GAC7B,GAAYC,GAAmB,IAGnBA,GADArtB,KAAK6U,SACU7U,KAAa,SAAS6b,IAAI,SAACyR,GAAW,MAAAA,GAAOhsB,QAE9CtB,KAAKutB,SAAYvtB,KAAa,SAASsB,MAAQ8rB,EAGjEptB,KAAKwtB,OAASH,EACdrtB,KAAKwU,YAAY/N,KAAK4mB,GACtBrtB,KAAK8a,SAASuS,GACdrtB,KAAKuU,gBAAgB9N,KAAK,GAAI8sB,IAAkB,KAAclG,IAC9DrtB,KAAKgkB,kBAAkB5e,gBAInB4P,EAAZzU,UAAAotB,aAAI,WACI3tB,KAAK4tB,UAAY5tB,KAAK4sB,QAAQ/Q,IAAI,SAACyR,GAAW,MAAAA,GAAO7oB,KAAIopB,KAAK,MAO1D7Y,EAAZzU,UAAAutB,uBAAI,WACQ9tB,KAAKs1B,KAAKvH,aACN/tB,KAAKguB,MACLhuB,KAAKs1B,KAAKvH,WAAWE,qBAErBjuB,KAAKs1B,KAAKvH,WAAWG,cAAcluB,KAAK8sB,eAAeS,SAAS,MAMpEvY,EAAZzU,UAAA4tB,2BAAI,WACJ,GAAcC,GAAoBpuB,KAAKs1B,KAAKvH,WAAWM,iBAAmB,CAElEruB,MAAKyuB,MAAMltB,cAAcmtB,UAAYC,EACjCP,EACApuB,KAAK4uB,gBACL5uB,KAAKyuB,MAAMltB,cAAcmtB,UFrkCE,ME2kC3B1Z,EAAZzU,UAAAsuB,eAAI,SAAuBvB,GAEnB,MAAOttB,MAAK4sB,QAAQkC,OAAO,SAACzQ,EAAgB0Q,EAAuBrF,GAE/D,WAAkBtX,KAAXiM,EAAwBiP,IAAWyB,EAAUrF,MAAQtX,GAAaiM,OAC1EjM,KAIC4C,EAAZzU,UAAAyuB,yBAAI,WACJ,GAAcC,GAAajvB,KAAK4uB,gBAClBM,EAAQlvB,KAAKmvB,eACbC,EAAcnX,KAAKoX,IAAIH,EAAQD,EFvlCN,KEwlCzBK,EAAwBJ,EAAQD,EAGhCM,EAAYD,EAAwBF,EAGpCI,EACFxvB,KAAKguB,MAAQ,EAAIhuB,KAAK6uB,eAAe7uB,KAAK8sB,eAAeS,SAAS,IAKhEkC,EAAeL,EAAc,CACnCpvB,MAAK0uB,UAAY1uB,KAAK0vB,uBAAuBF,EAAsBC,EAAcF,GACjFvvB,KAAK2vB,QAAU3vB,KAAK4vB,0BAEpB5vB,KAAK6vB,2BAA2BN,IAU5Bva,EAAZzU,UAAAuvB,wBAAI,WACJ,GAAcE,GAAchwB,KAAKiwB,WAAWljB,WAAWsC,eAAe6gB,wBACxDC,EAAenwB,KAAK0zB,cAAcrD,kBAClCC,EAAQtwB,KAAKswB,QAGfP,EFrnC0B,CEwnCzBO,KAASP,IAAY,EAGlC,IAAcU,GAAe,GAAKT,EAAYtoB,KAAOqoB,GAAWO,EAPnChc,EAO0D,IACzEoc,EAAgBV,EAAYhN,MAAQ+M,EAAUI,EAAaQ,OAC1DL,EAAQ,EATMhc,EAYjBmc,GAAe,EACfV,GAAWU,EFvnCsB,EEwnC1BC,EAAgB,IACvBX,GAAWW,EFznCsB,GE+nCrC1wB,KAAKiwB,WAAWF,QAAU9X,KAAK2Y,MAAMb,GACrC/vB,KAAKiwB,WAAWljB,WAAWsB,kBAQvB2G,EAAZzU,UAAAqvB,wBAAI,WAKI,MAAO,IAUH5a,EAAZzU,UAAAsvB,2BAAI,SAAmCN,GACvC,GAAcN,GAAajvB,KAAK4uB,gBAClBuB,EAAenwB,KAAK0zB,cAAcrD,kBAElCQ,EAAoB7wB,KAAK8wB,YAAYrhB,IF3pCN,EE4pC/BshB,EACFZ,EAAanY,OAAShY,KAAK8wB,YAAY3N,OF7pCN,EE+pC/B6N,EAAiB/Y,KAAKgZ,IAAIjxB,KAAK2vB,SAC/BuB,EACFjZ,KAAKoX,IAAIrvB,KAAKmvB,eAAiBF,EF9qCJ,KE+qCzBkC,EAAoBD,EAAmBF,EAAiBhxB,KAAK8wB,YAAY9Y,MAE3EmZ,GAAoBJ,EACpB/wB,KAAKoxB,cAAcD,EAAmBJ,GAC/BC,EAAiBH,EACxB7wB,KAAKqxB,gBAAgBL,EAAgBH,EAAmBtB,GAExDvvB,KAAKsxB,gBAAkBtxB,KAAKuxB,0BAK5Bvc,EAAZzU,UAAA6wB,cAAI,SAAsBD,EAA2BJ,GAErD,GAAcS,GAAwBvZ,KAAK2Y,MAAMO,EAAoBJ,EAI7D/wB,MAAK0uB,WAAa8C,EAClBxxB,KAAK2vB,SAAW6B,EAChBxxB,KAAKsxB,gBAAkBtxB,KAAKuxB,yBAKxBvxB,KAAK0uB,WAAa,IAClB1uB,KAAK0uB,UAAY,EACjB1uB,KAAK2vB,QAAU,EACf3vB,KAAKsxB,gBAAkB,mBAKvBtc,EAAZzU,UAAA8wB,gBAAI,SAAwBL,EAAwBH,EAA2BtB,GAE/E,GAAckC,GAAwBxZ,KAAK2Y,MAAMI,EAAiBH,EAW1D,IAPA7wB,KAAK0uB,WAAa+C,EAClBzxB,KAAK2vB,SAAW8B,EAChBzxB,KAAKsxB,gBAAkBtxB,KAAKuxB,yBAKxBvxB,KAAK0uB,WAAaa,EAKlB,MAJAvvB,MAAK0uB,UAAYa,EACjBvvB,KAAK2vB,QAAU,OACf3vB,KAAKsxB,gBAAkB,gBAOvBtc,EAAZzU,UAAAgxB,uBAAI,WACJ,GAActC,GAAajvB,KAAK4uB,gBAElB8C,GAA0BzC,EAAajvB,KAAK8wB,YAAY9Y,QAAU,CAIxE,OAAO,QAFSC,KAAKgZ,IAAIjxB,KAAK2vB,SAAW+B,EAAyBzC,EAAa,GAEvF,UAIYja,EAAZzU,UAAA4uB,aAAI,WACI,MAAOnvB,MAAK4sB,QAAQtP,QAIhBtI,EAAZzU,UAAAquB,cAAI,WAGI,MAAO,oBA3oCfpwB,KAACC,EAAAA,UAADC,OACIC,SAAU,iBACV+H,SAAU,eACV5H,SAAJ,+pEACID,QAAS,qxFACToI,QAAS,WAAY,YACrBlI,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,OACzC8H,MACIG,YAAa,KACbkM,kBAAmB,WAEnBpM,MAAO,iBACPG,sBAAuB,WACvBqqB,4BAA6B,aAC7BC,6BAA8B,WAE9B5f,YAAa,wBACbmH,UAAW,YACXD,SAAU,WACV2Y,kBAAmB,0BAEvBrqB,YACIsqB,GAAmBC,eACnBD,GAAmBE,eAEvBrrB,YACMC,QAASwS,GAAoBtS,YAAakO,IAC1CpO,QAASo0B,EAAAA,QAASl0B,YAAakO,4CAhGzCxW,KAAI0zB,EAAAA,gBAzCJ1zB,KAAIsJ,EAAAA,oBAUJtJ,KAAIc,EAAAA,SAOJd,KAAIe,EAAAA,YA+BJf,KAAIgb,KA3CJhb,KAAIa,EAAAA,aAoBJb,KAAS8T,EAAAA,eAATtK,aAAAxJ,KA8XS+T,EAAAA,aA/XT/T,KAA8D8a,EAAAA,OAA9DtR,aAAAxJ,KAgYS+T,EAAAA,aAhYT/T,KAA+B+a,EAAAA,mBAA/BvR,aAAAxJ,KAiYS+T,EAAAA,aAtVT/T,KAAS2zB,GAATnqB,aAAAxJ,KAuVS+T,EAAAA,aAlYT/T,KAAmD6a,EAAAA,UAAnDrR,aAAAxJ,KAmYSiV,EAAAA,OAnYTjV,KAmYiB+T,EAAAA,aACjB/T,KAAAuJ,OAAAC,aAAAxJ,KAASyJ,EAAAA,UAATvJ,MAAmB,gBACnBF,SAAA4T,GAAApK,aAAAxJ,KAAS6T,EAAAA,OAAT3T,MAAgB0zB,2BAnNhB3qB,UAAAjJ,KAAK0J,EAAAA,UAALxJ,MAAe,aAEf+vB,QAAAjwB,KAAK0J,EAAAA,UAALxJ,MAAe,WAEfuxB,aAAAzxB,KAAK0J,EAAAA,UAALxJ,MAAe2zB,EAAAA,uBAEfC,OAAA9zB,KAAK+zB,EAAAA,aAAL7zB,MAAkB8zB,MAGlBC,gBAAAj0B,KAAKk0B,EAAAA,aAALh0B,MAAkB6W,MAElB+f,OAAA92B,KAAKk0B,EAAAA,aAALh0B,MAAkBu8B,MAGlBjI,eAAAx0B,KAAK2J,EAAAA,SAGL8qB,eAAAz0B,KAAK2J,EAAAA,OAALzJ,MAAY,YAIZw0B,eAAA10B,KAAK2J,EAAAA;cAALzJ,MAAY,YAIZ6V,kBAAA/V,KAAK2J,EAAAA,SAOLqM,cAAAhW,KAAK2J,EAAAA,SAGLiG,aAAA5P,KAAKiB,EAAAA,QAGLgV,oBAAAjW,KAAKiB,EAAAA,QAMLiV,iBAAAlW,KAAKiB,EAAAA,QAmBLkV,cAAAnW,KAAKiB,EAAAA,QAaLmV,WAAApW,KAAKiB,EAAAA,QAaLoV,WAAArW,KAAKiB,EAAAA,QAeLqV,aAAAtW,KAAKiB,EAAAA,QAkBLsV,cAAAvW,KAAKiB,EAAAA,QAoBL6B,QAAA9C,KAAKiB,EAAAA,QAcLgF,KAAAjG,KAAKiB,EAAAA,SAw5BLuV,GAlnCkCC,ICvIlCC,GAAA,WAAA,QAAAA,MAciC,sBAdjC1W,KAACsE,EAAAA,SAADpE,OACIqE,SACIC,EAAAA,aACA8P,EAAAA,cACAqC,EAAAA,cACAC,GACAnS,GACAoS,GACAC,IAEJpS,SAAU8R,GAAcO,GAAqBvS,EAAAA,cAC7CG,cAAe6R,GAAcO,IAC7B5O,WAAY6O,QAEhBN,KCRaO,GACT,GAAIrK,GAAAA,eAA+B,8BAEnChI,GAAe,EAInBsS,GAAA,WACI,QAAJA,GAAuBC,EACAC,EACAC,EACAC,GAHA9V,KAAvB2V,yBAAuBA,EACA3V,KAAvB4V,WAAuBA,EACA5V,KAAvB6V,gBAAuBA,EACA7V,KAAvB8V,UAAuBA,EAEvB,MAAAJ,MAGaK,GAAuEC,EAAgBN,IAEpGO,GAAA,SAAAlS,GA6HI,QAAJkS,GAA0BlW,EACiB+V,EACfF,EACAC,EACZF,EACwDO,EAChDtK,GANpB,GAAJzH,GAOQJ,EAPRK,KAAApE,KAOc2V,EAA0BC,EAAYC,EAAiBC,IAPrE9V,IAA0BmE,GAA1BpE,WAA0BA,EACiBoE,EAA3C2R,UAA2CA,EAKnB3R,EAAxByH,OAAwBA,EAhHXzH,EAAbgS,SAAgC,EAS5BhS,EAAJiS,SAAuB,EAMVjS,EAAbkS,aAA2C,GAAI/M,GAAAA,QAM3CnF,EAAJmS,YAA0B,cAwEZnS,EAAdoS,IAAoB,eAAenT,KAErBe,EAAdjE,WAA0B,EAEZiE,EAAdqS,WAA0B,EAKdrS,EAAZsS,WAAiC,EACrBtS,EAAZuS,eAAqC,EACzBvS,EAAZwS,UAAgC,EAYxBxS,EAAKyS,cAAgBV,GAAsB/R,EAAKpE,WAAWwB,cAE3D4C,EAAK0S,oBAAsB1S,EAAK7C,MAGhC6C,EAAKM,GAAKN,EAAKM,EAEvB,IAAcqS,GAAeC,EAAAA,UAAUhX,EAAWwB,cAAe,eAMzD4C,GAAK6S,iBAAmBF,EAAajJ,UAAU1J,EAAK8S,KAAKC,KAAK/S,MA+GtE,MAnPgCgB,GAAhC8Q,EAAAlS,GA8BI1D,OAAJC,eACQ2V,EADR1V,UAAA,gBAAI,WAEI,MAAIP,MAAK8V,WAAyC,OAA5B9V,KAAK8V,UAAUpW,SAC1BM,KAAK8V,UAAUpW,SAGnBM,KAAKE,eAGhB,SAAaoB,GACTtB,KAAKE,UAAYM,EAAAA,sBAAsBc,GAEnCtB,KAAKoW,UACLpW,KAAKoW,SAAU,EACfpW,KAAKqW,aAAanM,yCAQ1B7J,OAAJC,eACQ2V,EADR1V,UAAA,UAAI,WAEI,MAAOP,MAAKmX,SAGhB,SAAO7V,GACHtB,KAAKmX,IAAM7V,GAAStB,KAAKuW,qCAa7BlW,OAAJC,eACQ2V,EADR1V,UAAA,gBAAI,WAEI,MAAOP,MAAKwW,eAGhB,SAAalV,GACTtB,KAAKwW,UAAYhW,EAAAA,sBAAsBc,oCAO3CjB,OAAJC,eACQ2V,EADR1V,UAAA,aAAI,WAEI,MAAOP,MAAK4W,cAActV,WAG9B,SAAUA,GACFA,IAAUtB,KAAKsB,QACftB,KAAK4W,cAActV,MAAQA,EAC3BtB,KAAKqW,aAAanM,yCA2C1B+L,EAAJ1V,UAAAK,SAAI,WAAA,GAAJuD,GAAAnE,IACQyK,YAAW,WAAM,MAAAtG,GAAK8S,QAAQ,GAC9BjX,KAAKyW,WAAaxR,SAASxC,iBAAiBzC,KAAKD,WAAWwB,eAAyB,WAAG,GAEhG,IAAc6V,GAAanS,SAASxC,iBAAiBzC,KAAKD,WAAWwB,eAAyB,WAAG,IACnF8V,EAAgBpS,SAASxC,iBAAiBzC,KAAKD,WAAWwB,eAA4B,cAAG,GAG/FvB,MAAK2W,UAA8B,EAAlB3W,KAAKyW,WAAiBW,EAAaC,EACpDrX,KAAK0W,eAAiB1W,KAAKyW,YAG/BR,EAAJ1V,UAAA+W,YAAI,WACItX,KAAKqW,aAAanM,QAGtB+L,EAAJ1V,UAAAyB,YAAI,WACIhC,KAAKqW,aAAapG,WAClBjQ,KAAKgX,iBAAiBO,eAG1BtB,EAAJ1V,UAAAiX,UAAI,WACQxX,KAAK8V,WAIL9V,KAAKyX,mBAMTzX,KAAK0X,yBAITzB,EAAJ1V,UAAA0W,KAAI,WAAA,GAAJ9S,GAAAnE,IACaA,MAAKmW,SAIVnW,KAAK4L,OAAO+L,kBAAkB,WACtC,GAAkBC,GAAWzT,EAAKpE,WAAWwB,cAE3BsW,EAAc5S,SAAS6S,OAAOrV,iBAAiBmV,GAAgB,OAAG,IAClEG,EAAOF,EAAcD,EAAStI,YAEpCsI,GAAShV,MAAMoV,OAAS,CAEpC,IAAkBA,GAASC,KAAKC,IAAI/T,EAAKwS,UAAWiB,EAASO,aAAeJ,EAAO5T,EAAKuS,eAC5EkB,GAAShV,MAAMoV,OAAYA,EAAvC,QAKI/B,EAAJ1V,UAAA+E,MAAI,WACItF,KAAKD,WAAWwB,cAAc+D,SAIlC2Q,EAAJ1V,UAAA6X,aAAI,SAAaC,GACLA,IAAcrY,KAAKoW,UACnBpW,KAAKoW,QAAUiC,EACfrY,KAAKqW,aAAanM,SAQ1B7J,OAAJC,eAAQ2V,EAAR1V,UAAA,aAAI,WACI,OAAQP,KAAKD,WAAWwB,cAAcD,QAAUtB,KAAKsY,8CAOzDrC,EAAJ1V,UAAAgY,iBAAI,WACIvY,KAAKsF,SAIC2Q,EAAd1V,UAAAmX,sBAAI,WACJ,GAAcc,GAAWxY,KAAKsB,KAElBtB,MAAK6W,sBAAwB2B,IAC7BxY,KAAK6W,oBAAsB2B,EAC3BxY,KAAKqW,aAAanM,SAKhB+L,EAAd1V,UAAA+X,WAAI,WAEJ,GAAcG,GAAYzY,KAAKD,WAAwB,cAAyB0Y,QAExE,OAAOA,IAAYA,EAASC,UAGxBzC,EAAZ1V,UAAAoY,cAAI,WACJ,GAAcf,GAAW5X,KAAKD,WAAWwB,cAC3BsW,EAAc5S,SAAS6S,OAAOrV,iBAAiBmV,GAAgB,OAAEgB,WAAY,IAC7Eb,EAAOF,EAAcD,EAAStI,YAEpC,OAAO2I,MAAKC,IAAIlY,KAAK2W,UAAWiB,EAASO,aAAeJ,mBAjQhEvZ,KAACkD,EAAAA,UAADhD,OACIC,SAAU,uBACV+H,SAAU,aACVQ,MACIC,MAAO,cACP0R,gCAAiC,WACjCxR,YAAa,KACbyR,qBAAsB,cACtBC,sBAAuB,aACvBC,aAAc,WACdC,aAAc,WACdC,SAAU,sBACVC,UAAW,sBAEfxS,YAAcC,QAASwS,GAAoBtS,YAAamP,4CAjD5DzX,KAAwBa,EAAAA,aAIxBb,KAA6B6a,EAAAA,UAA7BrR,aAAAxJ,KA6JiB+T,EAAAA,WA7JjB/T,KA6J6BiV,EAAAA,SA7J7BjV,KAAwC8a,EAAAA,OAAxCtR,aAAAxJ,KA8JiB+T,EAAAA,aA9JjB/T,KAAS+a,EAAAA,mBAATvR,aAAAxJ,KA+JiB+T,EAAAA,aA1JjB/T,KAAIgb,KA4JJhb,SAAA4T,GAAApK,aAAAxJ,KAAiB+T,EAAAA,WAAjB/T,KAA6BiV,EAAAA,OAA7BjV,KAAqC6T,EAAAA,OAArC3T,MAA4C+W,QAnK5CjX,KAA0Bc,EAAAA,4BAoD1B6W,UAAA3X,KAAKiB,EAAAA,QAGLgV,oBAAAjW,KAAKiB,EAAAA,QAwBLC,WAAAlB,KAAKiB,EAAAA,QAsBLgF,KAAAjG,KAAKiB,EAAAA,QAaLkV,cAAAnW,KAAKiB,EAAAA,QAMLmV,WAAApW,KAAKiB,EAAAA,QAaL6B,QAAA9C,KAAKiB,EAAAA,SA+JLwW,GAnPgCF,IC3ChC0D,GAAA,WAAA,QAAAA,MAMA,sBANAjb,KAACsE,EAAAA,SAADpE,OACIqE,SAAUC,EAAAA,aAAcqF,EAAAA,WAAYC,GAAgBoR,EAAAA,aACpDxW,SAAU+S,IACV9S,cAAe8S,QAGnBwD,SjBdIE,MAAJ,EACIC,QAAJ,EACIC,QAAJ,kFAIIC,OAAS,WACTC,KAAO,SAGEC,IAAbvI,MACIA,GAACwI,GAAYH,QAAS,WACtBrI,GAACwI,GAAYF,MAAO,QACxBtI,IAEayI,GAAmCD,GAAYF,KAE/CI,GACT,GAAIC,QAAO,yEACFC,GAAuB,qDACvBC,GAAoB,mCkBiC7BC,GAAkC,EAEtCC,GAAA,WACI,QAAJA,GACe7E,EACAC,EACAC,EACAC,GAHA9V,KAAf2V,yBAAeA,EACA3V,KAAf4V,WAAeA,EACA5V,KAAf6V,gBAAeA,EACA7V,KAAf8V,UAAeA,EACf,MAAA0E,MAGaC,GAEiBzE,EAAgBwE,IAE9CE,GAAA,SAAA3W,GA8JI,QAAJ2W,GAAiC3a,EACU+V,EACfF,EACAC,EACZF,EACqDO,EACpCpW,EACG6a,GAPhC,GAAJxW,GAQQJ,EARRK,KAAApE,KAQc2V,EAA0BC,EAAYC,EAAiBC,IARrE9V,IAUQ,IAVyBmE,EAAjCpE,WAAiCA,EACUoE,EAA3C2R,UAA2CA,EAKV3R,EAAjCrE,SAAiCA,EACGqE,EAApCwW,YAAoCA,EAzHhCxW,EAAJiS,SAAuB,EAMVjS,EAAbkS,aAA2C,GAAI/M,GAAAA,QAM3CnF,EAAJmS,YAA0B,gBAwFLnS,EAArBoS,IAA2B,iBAAiBgE,KAQhCpW,EAAZyW,SAAsC,KAE1BzW,EAAZ0W,SAAsC,MAczB1W,EAAKwW,YACN,KAAMvZ,OAAM,+KAgBhB,IAVA+C,EAAK+R,mBAAqBA,GAAsB/R,EAAKpE,WAAWwB,cAEhE4C,EAAK0S,oBAAsB1S,EAAK7C,MAChC6C,EAAK2W,SAAWC,EAAAA,KAGhB5W,EAAKM,GAAKN,EAAKM,GAEfN,EAAKwQ,YAAcqF,GAAwBE,IAEvC/V,EAAK2R,UAAW,CAEhB3R,EAAK2R,UAAUc,cAAgBzS,CAG3C,IAAkB6W,GAAU7W,EAAK2R,UAAiB,QAChCmF,GACF,WAAM,MAAA9W,GAAK+W,kBACX,WAAM,MAAA/W,GAAKgX,oBACX,WAAM,MAAAhX,GAAKiX,qBAETC,EAAaL,EAAQM,WACpBN,EAAQM,WAA3BC,OAAyCN,GACvBA,CAEND,GAAQQ,cAAcH,GACtBL,EAAQS,kCAudpB,MAnoBkCtW,GAAlCuV,EAAA3W,GA6BI1D,OAAJC,eACQoa,EADRna,UAAA,gBAAI,WAEI,MAAIP,MAAK8V,WAAyC,OAA5B9V,KAAK8V,UAAUpW,SAA4BM,KAAK8V,UAAUpW,SAEzEM,KAAKE,eAGhB,SAAaoB,GACTtB,KAAKE,UAAYM,EAAAA,sBAAsBc,GAInCtB,KAAKoW,UACLpW,KAAKoW,SAAU,GAGnBpW,KAAKqW,aAAanM,wCAGtB7J,OAAJC,eACQoa,EADRna,UAAA,UAAI,WACmB,MAAOP,MAAKmX,SAE/B,SAAO7V,GAAiBtB,KAAKmX,IAAM7V,GAAStB,KAAKuW,qCAajDlW,OAAJC,eACQoa,EADRna,UAAA,gBAAI,WAC0B,MAAOP,MAAKwW,eAEtC,SAAalV,GAAkBtB,KAAKwW,UAAYhW,EAAAA,sBAAsBc,oCAMtEjB,OAAJC,eACQoa,EADRna,UAAA,aAAI,WACsB,MAAOP,MAAKkW,mBAAmB5U,WAErD,SAAUA,GACFA,IAAUtB,KAAKsB,QACftB,KAAKkW,mBAAmB5U,MAAQA,EAChCtB,KAAK0b,sDAIbrb,OAAJC,eACQoa,EADRna,UAAA,kBAAI,WACgC,MAAOP,MAAK2b,iBAE5C,SAAeC,GACX5b,KAAK2b,YAActb,OACdsO,KAAKsL,IACL4B,IAAI,SAACC,GAAkB,MAAA7B,IAAY6B,KACnCC,QAAQH,IAAgB,EAAIA,EAAc1B,GAE9Cla,KAAK8V,UAAiB,QAAiB2F,yBACxCzb,KAAK2U,YAAcqF,GAAwBha,KAAK2b,8CAGpDtb,OAAJC,eACQoa,EADRna,UAAA,eAAI,WAC+B,MAAOP,MAAK4a,cAE3C,SAAYoB,GACRhc,KAAK4a,SAAWoB,EAChBhc,KAAKic,YAA2B,OAAbD,EAAoBhc,KAAKkc,sBAAsBF,OAAY5J,GAC7EpS,KAAK8V,UAAiB,QAAiB2F,0DAG5Cpb,OAAJC,eACQoa,EADRna,UAAA,eAAI,WAC+B,MAAOP,MAAK6a,cAE3C,SAAYsB,GACRnc,KAAK6a,SAAWsB,EAChBnc,KAAKoc,YAA2B,OAAbD,EAAoBnc,KAAKkc,sBAAsBC,OAAY/J,GAC7EpS,KAAK8V,UAAiB,QAAiB2F,0DAiE5Cf,EAAJna,UAAA+W,YAAI,WACItX,KAAKqW,aAAanM,QAGtBwQ,EAAJna,UAAAyB,YAAI,WACIhC,KAAKqW,aAAapG,YAGtByK,EAAJna,UAAAiX,UAAI,WACQxX,KAAK8V,WAIL9V,KAAKyX,mBAMTzX,KAAK0X,yBAGTgD,EAAJna,UAAA+E,MAAI,WACItF,KAAKD,WAAWwB,cAAc+D,SAGlCoV,EAAJna,UAAA6X,aAAI,SAAaC,GACLA,IAAcrY,KAAKoW,UACnBpW,KAAKoW,QAAUiC,EACfrY,KAAKqc,YACLrc,KAAKqW,aAAanM,SAI1BwQ,EAAJna,UAAA+b,OAAI,WACItc,KAAK0b,oBACL1b,KAAKoY,cAAa,IAGtBsC,EAAJna,UAAAgc,QAAI,SAAQ9N,GACJA,EAAO+N,gBACf,IAAcC,GAA6BhO,EAAOiO,cAAcC,QAAQ,YAETvK,KAAnDpS,KAAKkc,sBAAsBO,KAE/Bzc,KAAKD,WAAWwB,cAAcD,MAAQmb,EACtCzc,KAAK4c,YAGTlC,EAAJna,UAAAqc,QAAI,WACJ,GAAcC,GAA6B7c,KAAKD,WAAWwB,cAAcub,eAC3DC,EAA2B/c,KAAKD,WAAWwB,cAAcyb,aAC3DC,GAAmC,EAEjCxL,EAAdzR,KAAAkd,mBAAAld,KAAAD,WAAAwB,cAAAD,OACY6b,EADZ1L,EAAA0L,UAEYC,EAFZ3L,EAAA2L,gBAGYC,EAHZ5L,EAAA4L,yBAOYF,IACAA,EAAU,IACc,IAAxBA,EAAU,GAAGG,OACbL,GAA0B,EACnBG,GACuB,IAA9BA,EAAgB,GAAGE,QACnBF,EAAgB,IACc,IAA9BA,EAAgB,GAAGE,OACnBL,GAA0B,EACnBI,GACiC,IAAxCA,EAA0B,GAAGC,QACW,IAAxCD,EAA0B,GAAGC,QAC7BD,EAA0B,IACc,IAAxCA,EAA0B,GAAGC,SAC7BL,GAA0B,GAI9Bjd,KAAK0b,mBAAoB6B,qBAAsBN,IAE/Cjd,KAAKD,WAAWwB,cAAcub,eAAiBD,EAC/C7c,KAAKD,WAAWwB,cAAcyb,aAAeD,EAEzCE,GAAqD,OAA1Bjd,KAAK8V,UAAU0H,QAC1Cxd,KAAKyd,sCAAsCZ,EAAqB,IAQxExc,OAAJC,eAAQoa,EAARna,UAAA,aAAI,WACI,OAAQP,KAAKD,WAAWwB,cAAcD,QAAUtB,KAAKsY,8CAOzDoC,EAAJna,UAAAgY,iBAAI,WACIvY,KAAKsF,SAGToV,EAAJna,UAAA2F,WAAI,SAAW5E,GACO,OAAVA,GACAtB,KAAKF,SAAS4d,YAAY1d,KAAKD,WAAWwB,cACtC,QACAvB,KAAK2d,sBAAsBrc,EAAOtB,KAAK4d,aAG/C5d,KAAK8a,SAASxZ,GAAS,MACvBtB,KAAK0b,qBAGThB,EAAJna,UAAAsd,UAAI,SAAUjY,GAEd,GAAcwK,GAAkBpQ,KAAK8d,WAAWlY,ElB5WR,akB8W5BwK,GlB7W8B,ckB6WEA,GAChCpQ,KAAK+d,sBAAsBnY,GlB7WG,ckB+W9BwK,GlB9W+B,ekB8WGA,GAClCpQ,KAAKge,gCAAgCpY,IAI7C8U,EAAJna,UAAA4F,iBAAI,SAAiBC,GACbpG,KAAK8a,SAAW1U,GAGpBsU,EAAJna,UAAA8F,kBAAI,SAAkBD,GACdpG,KAAKqc,UAAYjW,GAIbsU,EAAZna,UAAAmX,sBAAI,WACJ,GAAcc,GAAWxY,KAAKsB,KAElBtB,MAAK6W,sBAAwB2B,IAC7BxY,KAAK6W,oBAAsB2B,EAC3BxY,KAAKqW,aAAanM,SAKlBwQ,EAAZna,UAAA+X,WAAI,WACJ,GAAcG,GAA+BzY,KAAKD,WAAwB,cAAE0Y,QAEpE,OAAOA,IAAYA,EAASC,UAGxBgC,EAAZna,UAAAmb,kBAAI,SAA0BuC,OAA9B,KAAAA,IAA8BA,KAId,IAAAC,GAAhBD,EAAAC,YAA6BzM,EAA7BwM,EAAAV,qBAA6BA,MAA7B,KAAA9L,GAAAA,EACc0M,EAAgCD,GAClCle,KAAKkc,sBAAsBlc,KAAKD,WAAWwB,cAAcD,MAG7D,IAFAtB,KAAKoe,qBAAuBD,EAExBZ,OAAwCnL,KAAhB+L,EAA2B,CAC/D,GAAkBrB,GAAyB9c,KAAKD,WAAWwB,cAAcub,eACvDE,EAAuBhd,KAAKD,WAAWwB,cAAcyb,YAC3Dhd,MAAKF,SAAS4d,YACV1d,KAAKD,WAAWwB,cAChB,QACAvB,KAAK2d,sBAAsBQ,EAAane,KAAK4d,aACjD5d,KAAKD,WAAWwB,cAAcub,eAAiBA,EAC/C9c,KAAKD,WAAWwB,cAAcyb,aAAeA,EAGlChd,KAAK8V,UAAiB,QAAE2F,wBAC/C,IAAc4C,GAAmC,OAA1Bre,KAAK8V,UAAU0H,YAAmCpL,KAAhB+L,EAA4BA,EAAc,IAC3Fne,MAAK8a,SAASuD,GACdre,KAAKqW,aAAanM,QAGdwQ,EAAZna,UAAAwd,sBAAI,SAA8BnY,GAC1BA,EAAM4W,gBAEd,IAAY0B,GAAgCle,KAAKoe,oBACzC,QAAoBhM,KAAhB8L,EAA2B,CACvC,GAAkBI,GAAYte,KAAKD,WAAWwB,cAAcub,eAE1CyB,EAAmBve,KAAKwe,mBAAmBF,GAC5CC,iBACCnO,EAAkBpQ,KAAK8d,WAAWlY,ElBlbZ,akBmbxBwK,IAAgC8N,EAAcle,KAAKye,cAAcP,EAAaK,IlBlbpD,ckBmb1BnO,IAAkC8N,EAAcle,KAAK0e,cAAcR,EAAaK,IACpFve,KAAK0b,mBAAoBwC,YAArCA,IACYle,KAAKyd,sCAAsCa,KAI3C5D,EAAZna,UAAAyd,gCAAI,SAAwCpY,GAC5C,GAAcsY,GAAgCle,KAAKoe,qBACrChO,EAAkBpQ,KAAK8d,WAAWlY,EAExC,QAAoBwM,KAAhB8L,EAA2B,CACvC,GAAgBI,GAAoBte,KAAKD,WAAWwB,cAAcub,clB7bxB,ekB8b1B1M,EACAkO,EAAYte,KAAK2e,qCAAqCL,EAAWte,KAAKD,WAAWwB,cAAcD,OlB9bpE,ekB+bpB8O,IACPkO,EAAYte,KAAK4e,qCAAqCN,EAAWte,KAAKD,WAAWwB,cAAcD,QAEnGtB,KAAKyd,sCAAsCa,KAO3C5D,EAAZna,UAAAud,WAAI,SAAmBlY,GACf,MAAOA,GAAMiZ,MAAQjZ,EAAMiJ,KAGvB6L,EAAZna,UAAAkd,sCAAI,SAA8Ca,GAA9C,GAAJna,GAAAnE,IACQyK,YAAW,WACnB,GAAkBqU,GAAgB3a,EAAKqa,mBAAmBF,EAC9Cna,GAAKpE,WAAWwB,cAAcub,eAAiBgC,EAAcC,oBAC7D5a,EAAKpE,WAAWwB,cAAcyb,aAAe8B,EAAcE,qBAI3DtE,EAAZna,UAAAke,cAAI,SAAsBQ,EACAC,OAA1B,KAAAA,IAA0BA,EAA6BC,GAAUtF,QACrD,IAAApI,GAAZzR,KAAAof,sBAAAH,GAActF,EAAdlI,EAAAkI,MAAqBC,EAArBnI,EAAAmI,QAA8BC,EAA9BpI,EAAAoI,OAEQ,QAAQqF,GACJ,IAAKC,IAAUxF,MACXA,GACA,MACJ,KAAKwF,IAAUvF,QACXA,GACA,MACJ,KAAKuF,IAAUtF,QACXA,IAWR,MANIA,GlB9e8B,KkB8eEA,EAAU,GAE1CD,ElB/e4B,KkB+eEA,EAAU,GAExCD,ElBhfyB,KkBgfAA,EAAQ,GAEvB3Z,KAAKqf,sBAAsB1F,EAAOC,EAASC,IAMrDa,EAAZna,UAAAme,cAAI,SAAsBO,EACAK,OAA1B,KAAAA,IAA0BA,EAA6BH,GAAUtF,QACrD,IAAApI,GAAZzR,KAAAof,sBAAAH,GAActF,EAAdlI,EAAAkI,MAAqBC,EAArBnI,EAAAmI,QAA8BC,EAA9BpI,EAAAoI,OAEQ,QAAQyF,GACJ,IAAKH,IAAUxF,MACXA,GACA,MACJ,KAAKwF,IAAUvF,QACXA,GACA,MACJ,KAAKuF,IAAUtF,QACXA,IAWR,MANIA,GAAU,IAAKA,ElB3gBe,IkB6gB9BD,EAAU,IAAKA,ElB5gBa,IkB8gB5BD,EAAQ,IAAKA,ElB7gBY,IkB+gBf3Z,KAAKqf,sBAAsB1F,EAAOC,EAASC,IAGrDa,EAAZna,UAAAoe,qCAAI,SAA6CL,EAAmBiB,GAC5D,MAAqB,KAAdjB,EAAkBiB,EAAWjC,OAASgB,EAAY,GAGrD5D,EAAZna,UAAAqe,qCAAI,SAA6CN,EACAiB,EACAC,OAAjD,KAAAA,IAAiDA,EAAjD,IACA,IAAcC,GAAyBF,EAAWxD,QAAQyD,EAAalB,EAE/D,YAA0BlM,KAAnBqN,EAA+BA,EAAiB,EAAI,GAOvD/E,EAAZna,UAAAie,mBAAI,SAA2BkB,GAK/B,GACYnB,GACAQ,EACAC,EAHEO,EAAqBvf,KAAKD,WAAWwB,cAAcD,MAKnDqe,EAAeJ,EAAWxD,QAAQ,IAAK6D,GACvCC,GAAiC,IAAlBF,EAAsBJ,EAAWxD,QAAQ,IAAK4D,EAAe,IAAM,CAgBxF,QAdsB,IAAlBE,GAAuBH,EAAiBG,GACxCtB,EAAmBY,GAAUtF,QAC7BkF,EAAsBc,EAAe,EACrCb,EAAoBO,EAAWjC,SACN,IAAlBqC,GAAuBD,EAAiBC,GAC/CpB,EAAmBY,GAAUvF,QAC7BmF,EAAsBY,EAAe,EACrCX,EAAoBa,GAAgB,EAAIA,EAAeN,EAAWjC,SAElEiB,EAAmBY,GAAUxF,MAC7BoF,EAde,EAefC,GAAsC,IAAlBW,EAAsBA,EAAeJ,EAAWjC,SAIpEiB,iBAAZA,EACYQ,oBAAZA,EACYC,kBAAZA,IAOYtE,EAAZna,UAAAod,sBAAI,SAA8BmC,EACAlC,OAAlC,KAAAA,IAAkCA,EAAlC1D,UACcP,EAAgB3Z,KAAK+f,yBAAyBD,EAAQE,YACtDpG,EAAkB5Z,KAAK+f,yBAAyBD,EAAQG,cACxDpG,EAAkB7Z,KAAK+f,yBAAyBD,EAAQI,aAO9D,QALRzO,KACYA,EAACwI,GAAYF,MAAO,WAAM,MAAGJ,GAAzC,IAAkDC,GACtCnI,EAACwI,GAAYH,QAAS,WAAM,MAAGH,GAA3C,IAAoDC,EAApD,IAA+DC,GAC/DpI,GAEuCmM,MAG3BlD,EAAZna,UAAA2c,mBAAI,SAA2BqC,GAK/B,GAAcY,GAAoBngB,KAAK2a,YAAYyF,MAAMb,GAC7C,QACA,UACA,MACA,UAGEc,EAA4C,OAAtBF,EACtBA,EAAkBG,OAAO,YACzB,GAEAjD,EAA4BgD,EAAoBE,MAAMpG,IACtDiD,EAAkBiD,EAAoBE,MAAMlG,GAGlD,QACI8C,UAHckD,EAAoBE,MAAMjG,IAIxC8C,gBAAZA,EACYC,0BAAZA,IAOY3C,EAAZna,UAAA8e,sBAAI,SAA8B1F,EAAeC,EAAiBC,GAC1D,WADR,KAAAA,IAAkEA,EAAlE,GACe7Z,KAAKkc,sBAAyBvC,EAA7C,IAAsDC,EAAtD,IAAiEC,IAGrDa,EAAZna,UAAA2b,sBAAI,SAA8BqD,GAE1B,OAAmBnN,KAAfmN,EAAJ,CAEM,GAAA9N,GAAdzR,KAAAkd,mBAAAqC,GACYpC,EADZ1L,EAAA0L,UAEYC,EAFZ3L,EAAA2L,gBAGYC,EAHZ5L,EAAA4L,yBAMQ,IAAiC,IAA7BkC,EAAWiB,OAAOlD,SACJ,OAAdH,GAA0C,OAApBC,GAA0D,OAA9BC,GADtD,CAMR,GAAY1D,GAAgB,EAChBC,EAAkB,EAClBC,EAAkB,CAElBsD,GACAxD,EAAQ8G,OAAOtD,EAAU,IAClBC,GACPzD,EAAQ8G,OAAOrD,EAAgB,IAC/BxD,EAAU6G,OAAOrD,EAAgB,KAC1BC,IACP1D,EAAQ8G,OAAOpD,EAA0B,IACzCzD,EAAU6G,OAAOpD,EAA0B,IAC3CxD,EAAU4G,OAAOpD,EAA0B,IAGvD,IAAcqD,GAAmB,GAAIC,MAAK,KAAM,EAAG,EAAGhH,EAAOC,EAASC,EAG9D,OAAO+G,OAAMF,EAAWG,eAAazO,GAAYsO,KAG7ChG,EAAZna,UAAAwf,yBAAI,SAAiCe,GAG7B,MAAOA,GAFqC,EAEC,GAAGA,EAAU,IAAIA,GAG1DpG,EAAZna,UAAA6e,sBAAI,SAA8BH,GAC1B,OACItF,MAAOsF,EAAQe,WACfpG,QAASqF,EAAQgB,aACjBpG,QAASoF,EAAQiB,eAIjBxF,EAAZna,UAAA2a,eAAI,WACI,WAAqC9I,KAA9BpS,KAAKoe,sBACN2C,mBAAqBC,KAAMhhB,KAAKD,WAAWwB,cAAcD,QAC3D,MAGAoZ,EAAZna,UAAA4a,iBAAI,WAEI,WAAkC/I,KAA9BpS,KAAKoe,0BACgBhM,KAArBpS,KAAKic,aACLjc,KAAKihB,mBAAmBjhB,KAAKoe,uBACpB8C,8BAAgCF,KAAMhhB,KAAKD,WAAWwB,cAAcD,QAG1E,MAGHoZ,EAAZna,UAAA6a,iBAAI,WACI,WAAkChJ,KAA9BpS,KAAKoe,0BACgBhM,KAArBpS,KAAKoc,aACLpc,KAAKmhB,qBAAqBnhB,KAAKoe,uBACtBgD,+BAAiCJ,KAAMhhB,KAAKD,WAAWwB,cAAcD,QAG3E,MAGHoZ,EAAZna,UAAA0gB,mBAAI,SAA2BI,GACvB,MAAOA,GAAcR,UAAoB7gB,KAAgB,YAAE6gB,UAAY,GAGnEnG,EAAZna,UAAA4gB,qBAAI,SAA6BE,GACzB,MAAOA,GAAcR,UAAoB7gB,KAAgB,YAAE6gB,WAAa,kBA9pBhFriB,KAACkD,EAAAA,UAADhD,OACIC,SAAU,sBACV+H,SAAU,oBACVQ,MACIC,MAAO,yBAGPE,YAAa,KACbyR,qBAAsB,cACtBE,aAAc,WACdC,aAAc,WACdqI,qBAAsB,aACtBC,kBAAmB,UACnBC,kBAAmB,UACnBC,eAAgB,QAChB1I,sBAAuB,aACvBG,SAAU,WACVC,UAAW,qBACXuI,UAAW,YACXC,UAAW,kBACX3P,YAAa,qBAEjBrL,YAEQC,QAASwS,GACTtS,YAAaC,EAAAA,WAAW,WAAM,MAAA2T,+CA3F1Clc,KAAIa,EAAAA,aAcJb,KAAI6a,EAAAA,UAAJrR,aAAAxJ,KAmNiB+T,EAAAA,WAnNjB/T,KAmN6BiV,EAAAA,SAlN7BjV,KAAI8a,EAAAA,OAAJtR,aAAAxJ,KAmNiB+T,EAAAA,aArNjB/T,KAAI+a,EAAAA,mBAAJvR,aAAAxJ,KAsNiB+T,EAAAA,aA5MjB/T,KAAIgb,KA8MJhb,SAAA4T,GAAApK,aAAAxJ,KAAiB+T,EAAAA,WAAjB/T,KAA6BiV,EAAAA,OAA7BjV,KAAqC6T,EAAAA,OAArC3T,MAA4CkjB,QA9N5CpjB,KAAIe,EAAAA,YAYJf,KAASqjB,EAAAA,YAAT7Z,aAAAxJ,KAoNiB+T,EAAAA,gCA/HjBkC,oBAAAjW,KAAKiB,EAAAA,QAoBLC,WAAAlB,KAAKiB,EAAAA,QAmBLgF,KAAAjG,KAAKiB,EAAAA,QAULkV,cAAAnW,KAAKiB,EAAAA,QAMLmV,WAAApW,KAAKiB,EAAAA,QASL6B,QAAA9C,KAAKiB,EAAAA,QAULme,aAAApf,KAAKiB,EAAAA,MAALf,MAAW,iBAaXojB,UAAAtjB,KAAKiB,EAAAA,MAALf,MAAW,cASXqjB,UAAAvjB,KAAKiB,EAAAA,MAALf,MAAW,eA0hBXgc,GAnoBkCD,ICzFlCuH,GAAA,WAAA,QAAAA,MAciC,sBAdjCxjB,KAACsE,EAAAA,SAADpE,OACIqE,SACIC,EAAAA,aACAqF,EAAAA,WACA8L,EAAAA,eACAuF,EAAAA,aAEJvW,cACIuX,IAEJxX,SACIwX,QAGRsH,KCnBaC,GAAoB,GAAI7W,GAAAA,eAAoB,uBAGrD8W,MAAQ,QACRC,KAAO,OACPC,IAAM,MACNC,OAAS,wBAGb,QAAAC,KAKItiB,KAAJ8Q,KAAsB,KAElB9Q,KAAJiN,SAAqCsV,GAAoBL,MAGrDliB,KAAJwiB,aAA4B,EAGxBxiB,KAAJyiB,kBAAiC,EAG7BziB,KAAJ0iB,cAA6B,EAGzB1iB,KAAJ2iB,kBAA4C,GAC5C,MAAAL,UC1BIM,KAAO,OACPC,QAAU,UACVC,OAAS,UAKAC,IACTC,OAASC,GAAI,mBAAoBC,IAAK,kBACtCxb,MAAQub,GAAI,oBAAqBC,IAAK,kBACtCzT,KAAOwT,GAAI,oBAAqBC,IAAK,kBACrCC,QAAUF,GAAI,mBAAoBC,IAAK,mBAG9BE,IAGTC,eAAgB5b,EAAAA,QAAQ,SACpBtG,EAAAA,MAAM,SACFyB,EAAAA,OAAQ0gB,UAAW,qBACjBC,QAAUC,YAAaT,GAA8BR,GAAoBL,OAAOe,MAEtF9hB,EAAAA,MAAM,UACFyB,EAAAA,OAAQ0gB,UAAW,sBACjBC,QAAUE,aAAcV,GAA8BR,GAAoBL,OAAOgB,OAEvFvb,EAAAA,WAAW,qCACPC,EAAAA,QAAQ,SAAS8b,GAAgBC,oBACrChc,EAAAA,WAAW,kBACPC,EAAAA,QAAQ,SAAS8b,GAAgBE,uBCXhCC,GACT,GAAIzY,GAAAA,eAAwB,4BAEnB0Y,GACT,GAAI1Y,GAAAA,eAAwB,4BAEhC2Y,GAAA,SAAAhgB,GAuCI,QAAJggB,GACgBhkB,EACAikB,EACDC,EACkCC,EACAC,GAL7C,GAAJhgB,GAMQJ,EANRK,KAAApE,OAAAA,WACgBmE,GAAhBpE,WAAgBA,EACAoE,EAAhB6f,kBAAgBA,EACD7f,EAAf8f,gBAAeA,EACkC9f,EAAjD+f,WAAiDA,EACA/f,EAAjDggB,WAAiDA,EAf7ChgB,EAAJigB,eAAgDC,GAA0BzB,KAKtEze,EAAJmgB,sBAA4B,GAAIzf,GAAAA,eAiFhC,MA9FmDM,GAAnD4e,EAAAhgB,GA2BIggB,EAAJxjB,UAAAyB,YAAI,WACIhC,KAAKsM,WAAY,GAIrByX,EAAJxjB,UAAAgkB,sBAAI,SAAyB9T,GAKrB,MAJAzQ,MAAKwkB,yBACLxkB,KAAKykB,eACLzkB,KAAK0kB,gBAEE1kB,KAAK2kB,aAAaJ,sBAAsB9T,IAInDsT,EAAJxjB,UAAAqkB,qBAAI,SAAwBnU,GAKpB,MAJAzQ,MAAKwkB,yBACLxkB,KAAKykB,eACLzkB,KAAK0kB,gBAEE1kB,KAAK2kB,aAAaC,qBAAqBnU,IAIlDsT,EAAJxjB,UAAAskB,MAAI,WACS7kB,KAAKsM,YACNtM,KAAKokB,eAAiBC,GAA0BxB,QAChD7iB,KAAKgkB,kBAAkBc,kBAK/Bf,EAAJxjB,UAAAwkB,KAAI,WACS/kB,KAAKsM,YACNtM,KAAKokB,eAAiBC,GAA0BvB,OAChD9iB,KAAKgkB,kBAAkB5e,iBAI/B2e,EAAJxjB,UAAAykB,YAAI,SAAYpf,GACR5F,KAAKskB,sBAAsB7d,KAAKb,IAG5Bme,EAAZxjB,UAAAkkB,aAAI,WACJ,GAAcxX,GAAgCjN,KAAKikB,gBAAwB,QAEnEjkB,MAAKilB,oBACDzB,YAAaT,GAA8B9V,GAAUgW,GACrDQ,aAAcV,GAA8B9V,GAAUiW,MAItDa,EAAZxjB,UAAAmkB,cAAI,WACJ,GAAcnV,GAAuBvP,KAAKD,WAAWwB,cACvC0L,EAAgCjN,KAAKikB,gBAAwB,QAEnE1U,GAAQ2V,UAAUC,IAAI,0BAA0BlY,GAE5CjN,KAAKmkB,YACL5U,EAAQ2V,UAAUC,IAAI,oCAItBpB,EAAZxjB,UAAAikB,uBAAI,WACI,GAAIxkB,KAAK2kB,aAAanW,cAClB,KAAMpN,OAAM,4FAhHxB5C,KAACC,EAAAA,UAADC,OACIC,SAAU,yBACVG,SAAJ,0NACID,QAAS,imFACTK,gBAAiBC,EAAAA,wBAAwBC,OACzCL,cAAeC,EAAAA,kBAAkBC,KACjCuI,YAAa4b,GAAsBC,gBACnCnc,MACIC,MAAO,yBACPie,SAAU,KACVC,KAAM,SACNC,aAAc,OACdje,YAAa,KACbke,WAAY,2FAIZC,iBAAkB,sBAClBC,gBAAiB,+DA3CzBjnB,KAAIa,EAAAA,aAHJb,KAAIsJ,EAAAA,oBAmBJtJ,KAAS8jB,KAoDT9jB,KAAAknB,QAAA1d,aAAAxJ,KAAS6T,EAAAA,OAAT3T,MAAgBmlB,QAChBrlB,KAAAknB,QAAA1d,aAAAxJ,KAAS6T,EAAAA,OAAT3T,MAAgBolB,2BAlBhBa,eAAAnmB,KAAK0J,EAAAA,UAALxJ,MAAeinB,EAAAA,oBAyFf5B,GA9FmD6B,EAAAA,kBCzC/CC,GAAW,gBAiBX,QAAJC,GACeC,EACChZ,EACDiZ,GAHX,GAAJ7hB,GAAAnE,IACeA,MAAf+lB,kBAAeA,EACC/lB,KAAhB+M,WAAgBA,EACD/M,KAAfgmB,OAAeA,EAXMhmB,KAArBimB,aAAoC,GAAI3c,GAAAA,QAGnBtJ,KAArBkmB,aAAoC,GAAI5c,GAAAA,QAUhCtJ,KAAKyE,GAAKzE,KAAKgmB,OAAOvhB,IAAM,gBAAgBohB,KAC5C7lB,KAAK+lB,kBAAkBthB,GAAKzE,KAAKyE,GAGjCshB,EAAkBzB,sBAAsB3W,KACpCwY,EAAAA,OACI,SAACvgB,GAAU,MAAoB,SAApBA,EAAMwgB,WAAwBxgB,EAAMygB,UAAYhC,GAA0BxB,UAEzFyD,EAAAA,KAAK,IACPzY,UAAU,WACR1J,EAAK+hB,aAAahc,OAClB/F,EAAK+hB,aAAajW,aAItB8V,EAAkBzB,sBAAsB3W,KACpCwY,EAAAA,OACI,SAACvgB,GAAU,MAAoB,SAApBA,EAAMwgB,WAAwBxgB,EAAMygB,UAAYhC,GAA0BvB,SAEzFwD,EAAAA,KAAK,IACPzY,UAAU,WACRd,EAAW6C,UACXzL,EAAK8hB,aAAa/b,KAAK/F,EAAKka,QAC5Bla,EAAK8hB,aAAahW,aAGjB8V,EAAkB9B,gBAAgBvB,cACnC6D,EAAAA,MACIxZ,EAAWyZ,gBACXzZ,EAAW0Z,gBAAgB9Y,KAGvBwY,EAAAA,OAAO,SAACvgB,GAAU,MAAAA,GAAMwK,UAAYC,EAAAA,WAE1CxC,UAAU,WAAM,MAAA1J,GAAKuiB,UA0BnC,MAtBIZ,GAAJvlB,UAAAmmB,MAAI,SAAMrI,GAAN,GAAJla,GAAAnE,IACaA,MAAKimB,aAAaU,SAEnB3mB,KAAK+lB,kBAAkBzB,sBAAsB3W,KACzCwY,EAAAA,OAAO,SAACvgB,GAAU,MAAoB,SAApBA,EAAMwgB,YACxBE,EAAAA,KAAK,IACPzY,UAAU,WAAM,MAAA1J,GAAK4I,WAAW6Z,mBAElC5mB,KAAKqe,OAASA,EACdre,KAAK+lB,kBAAkBhB,SAK/Be,EAAJvlB,UAAAsmB,YAAI,WACI,MAAO7mB,MAAKimB,aAAatc,gBAI7Bmc,EAAJvlB,UAAAumB,YAAI,WACI,MAAO9mB,MAAKkmB,aAAavc,gBAEjCmc,KCtEaiB,GACT,GAAI3b,GAAAA,eAAkC,gCAE1C4b,GAAA,WAUI,QAAJA,GACgBrb,EACAsb,EACkDC,EAC1BC,GAHxBnnB,KAAhB2L,QAAgBA,EACA3L,KAAhBinB,SAAgBA,EACkDjnB,KAAlEknB,eAAkEA,EAC1BlnB,KAAxCmnB,uBAAwCA,EAZ5BnnB,KAAZonB,+BAmKA,MAhKI/mB,QAAJC,eAAQ0mB,EAARzmB,UAAA,wBAAI,WACI,MAAOP,MAAKmnB,uBAAyBnnB,KAAKmnB,uBAAuBE,iBAC7DrnB,KAAKonB,6DAUbJ,EAAJzmB,UAAAyB,YAAI,WAGIhC,KAAKsnB,gBAAgBtnB,KAAKonB,8BAG9BJ,EAAJzmB,UAAAgnB,KAAI,SAAiBC,EACAxB,GADjB,GAAJ7hB,GAAAnE,KAEcynB,EAAdtW,MACgBnR,KAAKknB,gBAAkB,GAAI5E,IAC5B0D,EAGP,IAAIyB,EAAWhjB,IAAMzE,KAAK0nB,iBAAiBD,EAAWhjB,IAClD,KAAMrD,OAAM,sBAAsBqmB,EAAWhjB,GAAzD,qDAGA,IAAcsI,GAAa/M,KAAK8M,cAAc2a,GAChCE,EAAY3nB,KAAK4nB,gBAAgB7a,EAAY0a,GAC7CI,EAAM,GAAI/B,IAAe6B,EAAW5a,EAAY0a,EAEtD,IAAID,YAAkC1d,GAAAA,YAClC6d,EAAU/C,qBAAqB,GAAIkD,GAAAA,eAAkBN,EAAsB,MACvEO,UAAWN,EAAW3W,KACtBkX,aAAcH,SAEf,CACf,GAAkBZ,GAAWjnB,KAAKioB,eAAeR,EAAYI,EAAKF,GAChDlX,EAAS,GAAIC,GAAAA,gBAAgB8W,MAAwBpV,GAAW6U,GAChEiB,EAAaP,EAAUpD,sBAAsB9T,EAEnDoX,GAAIjX,SAAWsX,EAAWtX,SAO9B,MAJA5Q,MAAKqnB,iBAAiBc,KAAKN,GAC3BA,EAAIhB,cAAchZ,UAAU,WAAM,MAAA1J,GAAKikB,oBAAoBP,KAC3DF,EAAU9C,QAEHgD,GAMXb,EAAJzmB,UAAA8nB,SAAI,WACIroB,KAAKsnB,gBAAgBtnB,KAAKqnB,mBAO9BL,EAAJzmB,UAAAmnB,iBAAI,SAAiBjjB,GACb,MAAOzE,MAAKqnB,iBAAiBiB,KAAK,SAACC,GAAc,MAAAA,GAAU9jB,KAAOA,KAM9DuiB,EAAZzmB,UAAAqnB,gBAAI,SAAwB7a,EAAwBiZ,GACpD,GAAcwC,GAAmCxoB,KAAKyoB,oCAAoCzC,GAE5EiB,EAAW,GAAIyB,GAAAA,eAAe1oB,KAAKinB,SAAU,GAAI0B,WAClDrG,GAAmB0D,IACnBnC,GAA0B2E,EAAiClL,QAAU,IACrEwG,GAA0B0E,EAAiClL,OAAS,MAGnEsL,EAAkB,GAAIlY,GAAAA,gBAAgBqT,OAA+B3R,GAAW6U,EAGtF,OAFkEla,GAAW4D,OAAOiY,GAEhEhY,UAWhBoW,EAAZzmB,UAAA0nB,eAAI,SACIjC,EACAgC,EACAa,GAMR,GAAcC,GAAkB,GAAIH,WACvB5E,GAA+B8E,IAC/B5G,GAAmB+D,EAAOlV,OAC1BgV,GAAgBkC,IAGrB,OAAO,IAAIU,GAAAA,eAAe1oB,KAAKinB,SAAU6B,IAOrC9B,EAAZzmB,UAAAuM,cAAI,SAAsBkZ,GAC1B,GAAc+C,GAAgB,GAAIC,GAAAA,eACtBxG,YAAawD,EAAOxD,YACpByG,cAAejpB,KAAKkpB,iBAAiBlD,GACrCmD,SAAU,OACV/a,WAAY4X,EAAOrD,kBACnB5W,eAAgB/L,KAAK2L,QAAQyd,iBAAiBC,QAC9Clb,iBAAkBnO,KAAK2L,QAAQsB,WAAWqc,UAG9C,OAAOtpB,MAAK2L,QAAQuC,OAAO6a,IAGvB/B,EAAZzmB,UAAA+mB,gBAAI,SAAwBiC,GACiBA,EAAWC,UAAxD5gB,QAEiCiH,QAAQ,SAACmY,GAC9BA,EAAatB,WAIbM,EAAZzmB,UAAA2oB,iBAAI,SAAyBlD,GAC7B,GAAcyD,GACFzpB,KAAKqnB,iBAAiBzY,KAAK,SAACoZ,GADxC,MACyDA,GAAahC,OAAkB,aAEhF,OAAOA,GAAOvD,mBAAqBgH,EAAiC,4BAChE,oCAGAzC,EAAZzmB,UAAAkoB,oCAAI,SAA4CzC,GACxC,MAAOhmB,MAAKqnB,iBAAiBlB,OAAO,SAAC6B,GAAiB,MAAAA,GAAahC,OAAO/Y,WAAa+Y,EAAO/Y,YAO1F+Z,EAAZzmB,UAAA6nB,oBAAI,SAA4BJ,GAChC,GAAc0B,GAAQ1pB,KAAKqnB,iBAAiBtL,QAAQiM,EAExC0B,IAAS,GACT1pB,KAAKqnB,iBAAiBsC,OAAOD,EAAO,mBAlKhDlrB,KAACorB,EAAAA,iDAhBDprB,KAAS+M,EAAAA,UALT/M,KAAIqrB,EAAAA,WAQJrrB,KAA4B8jB,GAA5Bta,aAAAxJ,KA0BS+T,EAAAA,WA1BT/T,KA0BqB6T,EAAAA,OA1BrB3T,MA0B4BqoB,QAC5BvoB,KAAgEwoB,EAAhEhf,aAAAxJ,KAAS+T,EAAAA,WAAT/T,KAAqBsrB,EAAAA,cAuJrB9C,KCtLA+C,GAAA,WAaI,QAAJA,GAC2B/B,EACXjoB,EACAiqB,GAFWhqB,KAA3BgoB,aAA2BA,EACXhoB,KAAhBD,WAAgBA,EACAC,KAAhBgqB,iBAAgBA,EAwBhB,MArBID,GAAJxpB,UAAAK,SAAI,WAAA,GAAJuD,GAAAnE,IACaA,MAAKgoB,cAONvd,WAAW,WACPtG,EAAK6jB,aAAeiC,EAAoB9lB,EAAKpE,WAAYoE,EAAK6lB,iBAAiB3C,qBAK3F0C,EAAJxpB,UAAA+W,YAAI,SAAY4S,GAChB,GAAcC,GAAgBD,EAAQE,kBAAoBF,EAAQG,eAEtDF,KACAnqB,KAAKqqB,gBAAkBF,EAAcG,8BArCjD9rB,KAACkD,EAAAA,UAADhD,OACIC,SAAU,uDACVuI,MACIqjB,UAAW,sCACXpjB,MAAO,qBACP3I,KAAM,kDAZdA,KAASsnB,GAAT9d,aAAAxJ,KAqBS+T,EAAAA,aAvBT/T,KAA+Ba,EAAAA,aAG/Bb,KAASwoB,wBAeTqD,kBAAA7rB,KAAKiB,EAAAA,MAALf,MAAW,wBAEX0rB,mBAAA5rB,KAAKiB,EAAAA,MAALf,MAAW,uBA6BXqrB,KAKAS,GAAA,WAAA,QAAAA,MAkBA,sBAlBAhsB,KAACC,EAAAA,UAADC,OACIC,SAAU,sBACVG,SAAU,wVAUVoI,MACIC,MAAO,6CAIfsjB,YAAAjsB,KAAKiB,EAAAA,SACL+qB,KAKAE,GAAA,WAAA,QAAAA,MAM8B,sBAN9BlsB,KAACkD,EAAAA,UAADhD,OACIC,SAAU,0DACVuI,MACIC,MAAO,yBAGfujB,KAKAC,GAAA,WAAA,QAAAA,MAMgC,sBANhCnsB,KAACkD,EAAAA,UAADhD,OACIC,SAAU,gEACVuI,MACIC,MAAO,2BAGfwjB,KAKAC,GAAA,WAAA,QAAAA,MAMiC,sBANjCpsB,KAACkD,EAAAA,UAADhD,OACIC,SAAU,mEACVuI,MACIC,MAAO,4BAGfyjB,KCvFAC,GAAA,WAAA,QAAAA,MA2BgC,sBA3BhCrsB,KAACsE,EAAAA,SAADpE,OACIqE,SACIC,EAAAA,aACA8P,EAAAA,cACAgY,EAAAA,aACAxiB,GACArF,IAEJ0D,WAAYqgB,IACZ7jB,cACI4gB,GACAgG,GACAS,GACAE,GACAC,GACAC,IAEJ7X,iBAAkBgR,IAClB7gB,SACI6gB,GACAgG,GACAS,GACAE,GACAC,GACAC,QAGRC,KzBmBAjrB,GAAA,WAgDI,QAAJA,GAAwBG,EACA6L,EACA9L,GAFAE,KAAxBD,WAAwBA,EACAC,KAAxB4L,OAAwBA,EACA5L,KAAxBF,SAAwBA,EAzCXE,KAAb+qB,SAGY/qB,KAAZE,WAAiC,EACrBF,KAAZgrB,YAAkC,EAEtBhrB,KAAZirB,YAAkC,EAEbjrB,KAArBkrB,oBAAmD,EAC9BlrB,KAArBmrB,aAkLA,MAhLI9qB,QAAJC,eACQV,EADRW,UAAA,iBAKI,WACI,MAAOP,MAAKC,gBANhB,SACcT,GACVQ,KAAKC,WAAaT,mCAOtBa,OAAJC,eACQV,EADRW,UAAA,gBAKI,WACI,MAAOP,MAAKE,eANhB,SACaR,GACTM,KAAKE,UAAYM,EAAAA,sBAAsBd,oCAO3CW,OAAJC,eACQV,EADRW,UAAA,kBAMI,WACI,MAAOP,MAAKgrB,iBAPhB,SACerrB,GACnB,GAAcgB,GAAOD,EAAAA,qBAAqBf,EAClCK,MAAKgrB,YAAcrqB,EAAO,EAAIA,EAAOX,KAAKL,4CAW9CC,EAAJW,UAAAwB,QAAI,SAAQqpB,GACZ,GAAc1B,GAAgB1pB,KAAK+qB,MAAMzN,OAC3B7c,EAAgBipB,EAAQ1pB,KAAKkrB,oBAC7BvqB,EAAeyqB,EAAK9oB,SAE1B8oB,GAAKlpB,SAASzB,GAEdT,KAAK+qB,MAAM5C,MACPiD,KAAZA,EACY1B,MAAZA,EACYjpB,MAAZA,EACY4qB,YAAa1qB,KAIrBf,EAAJW,UAAAK,SAAI,WACSZ,KAAKR,YACNQ,KAAKR,UAAjB,cAGQQ,KAAKa,SAAb,iBAAmDb,KAAKiB,aAAe,SAAW,QAG9ErB,EAAJW,UAAA+qB,YAAI,SAAY1lB,EAAmB2lB,EAAuBC,GAAtD,GAAJrnB,GAAAnE,IACQ,KAAIA,KAAKN,SAAT,CAIR,GAAc+rB,GAAWzrB,KAAK+qB,MAAMQ,GACtBG,EAAY1rB,KAAK+qB,MAAMS,GAEvBG,GACFha,EAAG/L,EAAMgmB,QACTha,EAAGhM,EAAMimB,QAGbJ,GAASJ,YAAcI,EAASL,KAAK9oB,UACrCopB,EAAUL,YAAcK,EAAUN,KAAK9oB,UAEvCtC,KAAK+qB,MAAMlb,QAAQ,SAACic,GAC5B,GAAkBnrB,GAAOmrB,EAAKV,KAAK9oB,SACvBwpB,GAAKV,KAAKvpB,cACViqB,EAAKV,KAAKjpB,QAAQxB,KAGtBX,KAAK4L,OAAO+L,kBAAkB,WAC1BxT,EAAKgnB,UAAUhD,KACXhkB,EAAKrE,SAASisB,OACV,WACA,UACA,WAAM,MAAA5nB,GAAK6nB,iBAKvBhsB,KAAK4L,OAAO+L,kBAAkB,WAC1BxT,EAAKgnB,UAAUhD,KACXhkB,EAAKrE,SAASisB,OACV,WACA,YACA,SAAC5b,GAAkB,MAAAhM,GAAK8nB,YAAY9b,EAAGwb,EAAYF,EAAUC,QAKzE1rB,KAAKirB,YAAa,IAGtBrrB,EAAJW,UAAA0B,WAAI,SAAWmpB,GACf,GAAYc,IAAyB,CAE7BlsB,MAAK+qB,MAAMnc,KAAK,SAACkd,EAAMpC,GACnB,MAAIoC,GAAKV,OAASA,IACdc,EAAgBxC,GAET,MAMQ,IAAnBwC,GAIJlsB,KAAK+qB,MAAMpB,OAAOuC,EAAe,IAG7BtsB,EAAZW,UAAAU,WAAI,WACI,MAAR,aAAejB,KAAKR,WAGRI,EAAZW,UAAA0rB,YAAI,SAAoBrmB,EAAmB+lB,EAAoBF,EAAiBC,GACxE,GAAK1rB,KAAKirB,aAAcjrB,KAAKN,SAA7B,CAIR,GAAcysB,IACFxa,EAAG/L,EAAMgmB,QACTha,EAAGhM,EAAMimB,SAGPO,EAASpsB,KAAKiB,aACd0qB,EAAW/Z,EAAIua,EAASva,EACxB+Z,EAAWha,EAAIwa,EAASxa,EAExB0a,EAAkBZ,EAASJ,YAAce,EACzCE,EAAmBZ,EAAUL,YAAce,EAE3CG,EAAkBd,EAASL,KAAK5oB,aAChCgqB,EAAmBd,EAAUN,KAAK5oB,YAExC,IAAI6pB,GAAmBE,GAAmBD,GAAoBE,EAAkB,CACxF,GAAkBC,GAAkBhB,EAASJ,YAAckB,CAE/Cd,GAASL,KAAKjpB,QAAQoqB,GACtBb,EAAUN,KAAKjpB,QAAQupB,EAAUL,YAAcoB,OACxCJ,IAAmB,GAC1BZ,EAASL,KAAKjpB,QAAQ,GACtBupB,EAAUN,KAAKjpB,QAAQupB,EAAUL,YAAcI,EAASJ,cACjDiB,GAAoB,GAC3Bb,EAASL,KAAKjpB,QAAQupB,EAAUL,YAAcI,EAASJ,aACvDK,EAAUN,KAAKjpB,QAAQ,KAEvBspB,EAASL,KAAKjpB,QAAQkqB,GACtBX,EAAUN,KAAKjpB,QAAQmqB,MAIvB1sB,EAAZW,UAAAyrB,UAAI,WACI,KAAOhsB,KAAKmrB,UAAU7N,OAAS,GAAG,CAC1C,GAAkB/F,GAAcvX,KAAKmrB,UAAUuB,KAE/BnV,IACAA,IAIRvX,KAAKirB,YAAa,GAGdrrB,EAAZW,UAAAM,SAAI,SAAiBQ,EAAyBC,GACtCtB,KAAKF,SAASe,SAASb,KAAKD,WAAWwB,cAAeF,EAAUC;0EAlMxE9C,KAACC,EAAAA,UAADC,OACIC,SAAU,cACVC,qBAAqB,EACrBC,QAAS,qQACTC,SAAJ,0aACIC,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,+CAlE7CZ,KAAIa,EAAAA,aAEJb,KAAIc,EAAAA,SAEJd,KAAIe,EAAAA,+BA4EJC,YAAAhB,KAAKiB,EAAAA,QASLC,WAAAlB,KAAKiB,EAAAA,QASLE,aAAAnB,KAAKiB,EAAAA,SA8JLG,KAEAC,GAAA,WA6CI,QAAJA,GAAwBC,EACAC,GADAC,KAAxBF,SAAwBA,EACAE,KAAxBD,WAAwBA,EA1CZC,KAAZC,WAAA,WACYD,KAAZE,WAAiC,EACrBF,KAAZG,OAA6B,EACjBH,KAAZI,MAA4B,EA4F5B,MA1FIC,QAAJC,eACQT,EADRU,UAAA,iBAKI,WACI,MAAOP,MAAKC,gBANhB,SACcT,GACVQ,KAAKC,WAAaT,mCAOtBa,OAAJC,eACQT,EADRU,UAAA,gBAKI,WACI,MAAOP,MAAKE,eANhB,SACaR,GACTM,KAAKE,UAAYM,EAAAA,sBAAsBd,oCAO3CW,OAAJC,eACQT,EADRU,UAAA,aAKI,WACI,MAAOP,MAAKG,YANhB,SACUM,GACNT,KAAKG,OAASO,EAAAA,qBAAqBD,oCAOvCJ,OAAJC,eACQT,EADRU,UAAA,YAKI,WACI,MAAOP,MAAKI,WANhB,SACSO,GACLX,KAAKI,MAAQM,EAAAA,qBAAqBC,oCAWtCd,EAAJU,UAAAK,SAAI,WACIZ,KAAKa,SAAb,SAA4Cb,KAAKc,UAAUd,KAAKe,aACxDf,KAAKa,SAAb,aAA+CG,EAAAA,oBAAoBhB,KAAKW,OAChEX,KAAKa,SAASb,KAAKiB,aAA3B,SAAA,QAAsFD,EAAAA,oBAAoBhB,KAAKW,OACvGX,KAAKa,SAAb,QAA2Cb,KAAKS,OAEnCT,KAAKiB,cACNjB,KAAKa,SAAjB,SAAgD,QAGpCb,KAAKN,UACLM,KAAKkB,QAAjB,WAAqD,QAI7ClB,KAAKa,SAAb,iBAAmDb,KAAKiB,aAAe,MAAQ,WAGnEpB,EAAZU,UAAAU,WAAI,WACI,MAAR,aAAejB,KAAKR,WAGRK,EAAZU,UAAAO,UAAI,SAAkBK,GACd,OAAQA,GACJ,IAAZ,WACgB,MAAhB,SACY,KAAZ,WACgB,MAAhB,YACY,KAAZ,aACgB,MAAhB,YACY,SACI,KAAMC,OAAM,oCAAoCD,KAIpDtB,EAAZU,UAAAQ,SAAI,WACI,MAAOf,MAAKN,SACpB,WACA,aAAcM,KAAKR,UACnB,WACA,cAGYK,EAAZU,UAAAM,SAAI,SAAiBQ,EAAyBC,GACtCtB,KAAKF,SAASe,SAASb,KAAKD,WAAWwB,cAAeF,EAAUC,IAG5DzB,EAAZU,UAAAW,QAAI,SAAgBM,EAA8BF,GAC1CtB,KAAKF,SAAS2B,aAAazB,KAAKD,WAAWwB,cAAeC,EAAWF,mBAjG7E9C,KAACkD,EAAAA,UAADhD,OACIC,SAAU,oDA/PdH,KAAIe,EAAAA,YAJJf,KAAIa,EAAAA,gCA2QJG,YAAAhB,KAAKiB,EAAAA,QASLC,WAAAlB,KAAKiB,EAAAA,QASLgB,QAAAjC,KAAKiB,EAAAA,QASLkB,OAAAnC,KAAKiB,EAAAA,SA+DLI,KAEA8B,GAAA,WAII,QAAJA,GAAwB5B,EACAD,EACA8B,GAFA5B,KAAxBD,WAAwBA,EACAC,KAAxBF,SAAwBA,EACAE,KAAxB4B,SAAwBA,EAyExB,MAvEID,GAAJpB,UAAAsB,YAAI,WACI7B,KAAKF,SAASgC,YAAY9B,KAAKD,WAAWwB,cAAe,SAG7DI,EAAJpB,UAAAK,SAAI,WACIZ,KAAK4B,SAASG,QAAQ/B,MAEtBA,KAAK8B,YAAb,aACQ9B,KAAKa,SAAb,OAA0C,KAE1C,aAAYb,KAAK4B,SAASpC,WACdQ,KAAKa,SAAjB,QAA+C,QACnCb,KAAK8B,YAAjB,YAEY9B,KAAKa,SAAjB,SAAgD,QACpCb,KAAK8B,YAAjB,WAIIH,EAAJpB,UAAAyB,YAAI,WACIhC,KAAK4B,SAASK,WAAWjC,OAG7B2B,EAAJpB,UAAA2B,SAAI,SAASzB,GACLT,KAAKa,SAAb,QAA2CJ,IAGvCkB,EAAJpB,UAAA4B,QAAI,SAAQxB,GACZ,GAAcyB,GAAK1B,EAAAA,qBAAqBC,EAChCX,MAAKa,SAASb,KAAKqC,kBAAmBrB,EAAAA,oBAAoBoB,KAG9DT,EAAJpB,UAAA+B,QAAI,WACI,MAAOtC,MAAKD,WAAWwB,cAAcvB,KAAKuC,0BAG9CZ,EAAJpB,UAAAiC,WAAI,WACJ,GAAc3D,GAAS4D,iBAAiBzC,KAAKD,WAAWwB,cAEhD,OAAOmB,YAAW7D,EAAOmB,KAAK2C,wBAG1BhB,EAAZpB,UAAAU,WAAI,WACI,MAAR,aAAejB,KAAK4B,SAASpC,WAGjBmC,EAAZpB,UAAAoC,mBAAI,WACI,MAAO3C,MAAKiB,aACpB,aACA,YAGYU,EAAZpB,UAAAgC,sBAAI,WACI,MAAOvC,MAAKiB,aACpB,eACA,eAGYU,EAAZpB,UAAA8B,gBAAI,WACI,MAAOrC,MAAKiB,aACpB,SACA,SAGYU,EAAZpB,UAAAM,SAAI,SAAiB+B,EAAsBtB,GACnCtB,KAAKF,SAASe,SAASb,KAAKD,WAAWwB,cAAeqB,EAAOtB,IAGzDK,EAAZpB,UAAAuB,YAAI,SAAoBc,GAChB5C,KAAKF,SAASgC,YAAY9B,KAAKD,WAAWwB,cAAeqB,mBA7EjEpE,KAACkD,EAAAA,UAADhD,OACIC,SAAU,2DAxWdH,KAAIa,EAAAA,aAIJb,KAAIe,EAAAA,YAyWJf,KAAkCoB,MAyElC+B,KClbAkB,GAAA,WAAA,QAAAA,MAiBA,sBAjBArE,KAACsE,EAAAA,SAADpE,OACIqE,SACIC,EAAAA,aACAC,IAEJC,SACIrD,GACA8B,GACA/B,IAEJuD,cACItD,GACA8B,GACA/B,QAIRiD,KCHIO,GAAe,EAInBC,GAAA,WACI,QAAJA,GAAuBC,GAAAtD,KAAvBsD,YAAuBA,EACvB,MAAAD,MAEaE,GAIaC,EAAcC,EAAWC,EAAcL,IAAeM,GAAaC,UAE7FC,GAAA,WAAA,QAAAA,MAGA,MAAAA,MAEAC,GAAA,SAAAC,GAgFI,QAAJD,GAAuBR,EACCU,EACAC,EACeC,GAHnC,GAAJC,GAKQJ,EALRK,KAAApE,KAKcsD,IALdtD,WAAuBmE,GAAvBb,YAAuBA,EACCa,EAAxBH,cAAwBA,EACAG,EAAxBF,mBAAwBA,EAnDXE,EAAbE,cAAsD,QAE7BF,EAAzBG,UAA6C,GACfH,EAA9BI,eAA8D,KAElDJ,EAAZK,UAAgC,gBAAepB,GAGlCe,EAAbM,GAA0BN,EAAKK,UAMlBL,EAAbO,KAAmC,KAIvBP,EAAZjE,WAAiC,EAcrBiE,EAAZQ,UAAgC,EAcTR,EAAvBS,OACQ,GAAIC,GAAAA,aAyDAV,EAAZW,mBAAiC,aAGrBX,EAAZY,kBAAgC,SAACC,KAnDzBb,EAAKD,SAAWe,SAASf,IAAa,EAEtCC,EAAKH,cAAckB,QAAQf,EAAKb,YAAY/B,eAAe,KAiEnE,MAhIuC4D,GAAvCrB,EAAAC,GAeI1D,OAAJC,eAAQwD,EAARvD,UAAA,eAAI,WACI,OAAUP,KAAKyE,IAAMzE,KAAKwE,WAAlC,0CASInE,OAAJC,eACQwD,EADRvD,UAAA,gBAAI,WAEI,MAAOP,MAAKE,eAGhB,SAAaoB,GACLA,IAAUtB,KAAKE,YACfF,KAAKE,UAAYoB,EACjBtB,KAAKiE,mBAAmBmB,iDAMhC/E,OAAJC,eAAQwD,EAARvD,UAAA,eAAI,WACI,MAAOP,MAAK2E,cAGhB,SACYrD,GACJA,IAAUtB,KAAK2E,WACf3E,KAAK2E,SAAWrD,EAChBtB,KAAKiE,mBAAmBmB,iDAmBhCtB,EAAJvD,UAAAyB,YAAI,WACIhC,KAAKgE,cAAcqB,eAAerF,KAAKsD,YAAY/B,gBAGvDuC,EAAJvD,UAAA+E,MAAI,WACItF,KAAKgE,cAAcuB,SAASvF,KAAKwF,cAAcjE,cAAe,aAGlEuC,EAAJvD,UAAAkF,gBAAI,WACI,MAAOzF,MAAK0F,SAGhB5B,EAAJvD,UAAAoF,oBAAI,SAAoBC,GAChBA,EAAMC,mBAGV/B,EAAJvD,UAAAuF,mBAAI,WACI9F,KAAKiE,mBAAmBmB,gBAG5BtB,EAAJvD,UAAAwF,cAAI,SAAcH,GACVA,EAAMC,kBACN7F,KAAKgG,oBACLhG,KAAKiG,oBAGTnC,EAAJvD,UAAA2F,WAAI,SAAW5E,GACPtB,KAAK0F,UAAYpE,GAGrBwC,EAAJvD,UAAA4F,iBAAI,SAAiBC,GACbpG,KAAK+E,kBAAoBqB,GAG7BtC,EAAJvD,UAAA8F,kBAAI,SAAkBD,GACdpG,KAAK8E,mBAAqBsB,GAG9BtC,EAAJvD,UAAA+F,iBAAI,SAAiBC,GACbvG,KAAKN,SAAW6G,GASZzC,EAAZvD,UAAAyF,kBAAI,WACIhG,KAAK2E,UAAY3E,KAAK0F,QACtB1F,KAAK+E,kBAAkB/E,KAAK0F,SAC5B1F,KAAK8E,sBAGDhB,EAAZvD,UAAA0F,iBAAI,WACJ,GAAcL,GAAQ,GAAI/B,GAClB+B,GAAMY,OAASxG,KACf4F,EAAMF,QAAU1F,KAAK0F,QAErB1F,KAAK+E,kBAAkB/E,KAAK0F,SAC5B1F,KAAK4E,OAAO6B,KAAKb,mBAxJzBpH,KAACC,EAAAA,UAADC,OACIC,SAAU,YACV+H,SAAU,WACV5H,SAAJ,26BACID,QAAS,yzCACT8H,YACKC,QAASC,EAAAA,kBAAmBC,YAAaC,EAAAA,WAAW,WAAM,MAAAjD,KAAoBkD,OAAO,IAE1F9H,gBAAiBC,EAAAA,wBAAwBC,OACzCL,cAAeC,EAAAA,kBAAkBC,KACjCgI,QAAS,WAAY,QAAS,YAC9BC,MACIC,MAAO,YACPC,OAAQ,KACRC,YAAa,KACbC,sBAAuB,WACvBC,wBAAyB,YAE7BC,YACIC,EAAAA,QAAQ,UACJtG,EAAAA,MAAM,OAASyB,EAAAA,OAAQ8E,KAAM,SAC7BvG,EAAAA,MAAM,QAASyB,EAAAA,OAAQ8E,KAAM,SAC7BC,EAAAA,WAAW,iBAAkBC,EAAAA,QAAQ,qDA1DjDpJ,KAAIa,EAAAA,aAKJb,KAASqJ,EAAAA,eAPTrJ,KAA6BsJ,EAAAA,oBAyH7BtJ,KAAAuJ,OAAAC,aAAAxJ,KAAiByJ,EAAAA,UAAjBvJ,MAA2B,mCAtD3B8G,gBAAAhH,KAAK0J,EAAAA,UAALxJ,MAAe,WAEf2F,gBAAA7F,KAAKiB,EAAAA,QAEL6E,YAAA9F,KAAKiB,EAAAA,MAALf,MAAW,gBACX6F,iBAAA/F,KAAKiB,EAAAA,MAALf,MAAW,qBAKX+F,KAAAjG,KAAKiB,EAAAA,QAMLiF,OAAAlG,KAAKiB,EAAAA,QAEL6B,QAAA9C,KAAKiB,EAAAA,QAILC,WAAAlB,KAAKiB,EAAAA,QAkBLiG,UAAAlH,KAAKiB,EAAAA,QAQLmF,SAAApG,KAAK2J,EAAAA,UA6ELrE,GAhIuCP,IC3DvC6E,GAAA,WAAA,QAAAA,MAMA,sBANA5J,KAACsE,EAAAA,SAADpE,OACIqE,SAAUC,EAAAA,aAAcqF,EAAAA,WAAYC,IACpCpF,SAAUY,IACVX,cAAeW,QAGnBsE,KCgCAG,GAAA,WA2FI,QAAJA,GAAuBC,GAAAxI,KAAvBwI,IAAuBA,EArEnBxI,KAAJyI,OAAa,uBACTzI,KAAJ0I,UAA+CC,GAA/CC,QACI5I,KAAJ6I,YAOc7I,KAAd8I,gBAAuD,GAAIjE,GAAAA,aAE9C7E,KAAb+I,kBAAiC,IAEpB/I,KAAbgJ,kBAAiC,EAsBrBhJ,KAAZiJ,WAAiC,QAcrBjJ,KAAZkJ,aAAmC,MAcvBlJ,KAAZmJ,WAAmD,GAAIC,GAAAA,iBAAyB,GAG3DpJ,KAArBqJ,cAAmD,GAAIC,GAAAA,QAC3CtJ,KAAZuJ,oBAA0C,EAGlCvJ,KAAKwJ,mBAAqBC,GAC1BzJ,KAAK0J,SAAW1J,KAAKmJ,WAAWQ,eA6DxC,MArHItJ,QAAJC,eACQiI,EADRhI,UAAA,eAAI,WAEI,MAAOP,MAAK4J,cAEhB,SAAYtI,GACRtB,KAAK6J,gBAAkBvI,YAAiBwI,GAAAA,aAEpC9J,KAAK6J,gBACL7J,KAAK4J,SAAWtI,oCAKxBjB,OAAJC,eACQiI,EADRhI,UAAA,iBAAI,WAEI,MAAOP,MAAKiJ,gBAEhB,SAAc3H,GACVtB,KAAKiJ,WAAa3H,mCAItBjB,OAAJC,eACQiI,EADRhI,UAAA,mBAAI,WAEI,MAAOP,MAAKkJ,kBAEhB,SAAgB5H,GACRA,IAAUtB,KAAKkJ,cACflJ,KAAKkJ,aAAe5H,EACpBtB,KAAK0I,UAAUqB,QAAQN,GAAczJ,KAAKgK,eAClC1I,IACRtB,KAAKkJ,aAAe,wCAK5B7I,OAAJC,eACQiI,EADRhI,UAAA,iBAAI,WAEI,MAAOP,MAAKmJ,WAAW7H,WAE3B,SAAcA,GAClB,GAAc2I,GAAUzJ,EAAAA,sBAAsBc,EAElCtB,MAAKmJ,WAAW7H,QAAU2I,IAC1BjK,KAAKmJ,WAAWe,KAAKD,GACrBjK,KAAK8I,gBAAgBrC,KAAKwD,qCAclC1B,EAAJhI,UAAA4J,KAAI,WAAA,GAAJhG,GAAAnE,IACYA,MAAKoK,SACLC,aAAarK,KAAKoK,SAGjBpK,KAAKsK,mBACiB,WAAnBtK,KAAKuK,YACLvK,KAAKuJ,oBAAqB,GAE9BvJ,KAAKwK,QAAUC,WAAW,WACtBtG,EAAKuG,WAAY,EACjBvG,EAAK2E,gBAAgBrC,MAAK,GAI1BtC,EAAKiB,gBACNpF,KAAK+I,qBAIhBR,EAAJhI,UAAAoK,KAAI,WAAA,GAAJxG,GAAAnE,IACYA,MAAKwK,SACLH,aAAarK,KAAKwK,SAGtBxK,KAAKoK,QAAUK,WAAW,WACtBtG,EAAKuG,WAAY,EACjBvG,EAAK2E,gBAAgBrC,MAAK,GAC1BtC,EAAKkF,cAAca,OAInB/F,EAAKiB,gBACNpF,KAAKgJ,oBAGZT,EAAJhI,UAAAqK,YAAI,WACI5K,KAAK6I,SAAc7I,KAAKyI,OAAhC,IAA0CzI,KAAKgK,aAG3CzB,EAAJhI,UAAA+J,eAAI,WACI,QAAOtK,KAAK6J,gBAAkC,KAAjB7J,KAAK6K,UAAmB7K,KAAK6K,UAI9DtC,EAAJhI,UAAAuK,YAAI,WACI,MAAO9K,MAAKqJ,cAAcM,gBAG9BpB,EAAJhI,UAAA6E,aAAI,WACIpF,KAAKwI,IAAIpD,gBAGbmD,EAAJhI,UAAAwK,sBAAI,WACQ/K,KAAKuJ,oBACLvJ,KAAK2K,uBAvJjBnM,KAACC,EAAAA,UAADC,OACIC,SAAU,uBACVsI,QACI,oBACA,oBACA,UACA,YACA,YACA,eAEJ+D,SAAU,mBACVxD,YAAcyD,IACdnM,SAAJ,yPACIF,qBAAqB,EACrBC,QAAS,ymEACTE,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,OACzC8H,MACIgE,eAAgB,wEA9DxB1M,KAAIsJ,EAAAA,uCA2EJgB,kBAAAtK,KAAK2J,EAAAA,SAELY,oBAAAvK,KAAKiB,EAAAA,QAELuJ,oBAAAxK,KAAKiB,EAAAA,QAELoL,UAAArM,KAAKiB,EAAAA,QAaL8K,YAAA/L,KAAKiB,EAAAA,QASLuK,cAAAxL,KAAKiB,EAAAA,QAcLiL,YAAAlM,KAAKiB,EAAAA,SAiFL8I,KAEa4C,GACT,GAAIC,GAAAA,eAAsC,8BAQjCC,IACTzE,QAASuE,GACTG,MAAOC,EAAAA,SACPC,WAAYC,IAUhBC,GAAA,WAoII,QAAJA,GACgBC,EACA5L,EACA6L,EACAC,EACAC,EACoCC,EACxBvM,GANZQ,KAAhB2L,QAAgBA,EACA3L,KAAhBD,WAAgBA,EACAC,KAAhB4L,OAAgBA,EACA5L,KAAhB6L,iBAAgBA,EACA7L,KAAhB8L,SAAgBA,EACoC9L,KAApD+L,eAAoDA,EACxB/L,KAA5BR,UAA4BA,EAlIxBQ,KAAJgM,eAA6B,EACzBhM,KAAJiM,kBAAuB,EACnBjM,KAAJkM,gBAA8B,EAMhBlM,KAAd8I,gBAAgC,GAAIjE,GAAAA,aACxB7E,KAAZmM,aAA2B,GAAI7C,GAAAA,QAuBnBtJ,KAAZE,WAAiC,EAkCrBF,KAAZiJ,WAAiC,QAcrBjJ,KAAZkJ,aAAmC,MAwCvBlJ,KAAZoM,gBAA8B,GAAIC,KACbrM,KAArBsM,UAAiC,GAAIhD,GAAAA,QAUzBtJ,KAAKwJ,mBAAqBC,GAoStC,MA5ZIpJ,QAAJC,eACQoL,EADRnL,UAAA,eAAI,WAEI,MAAOP,MAAK4J,cAEhB,SAAY2C,GACRvM,KAAK4J,SAAW2C,EAChBvM,KAAKwM,gBAAgB,UAAWD,oCAIpClM,OAAJC,eACQoL,EADRnL,UAAA,gBAAI,SACagM,GACTvM,KAAK6K,QAAU0B,mCAGnBlM,OAAJC,eACQoL,EADRnL,UAAA,gBAAI,WAC0B,MAAOP,MAAKE,eACtC,SAAaoB,GACTtB,KAAKE,UAAYM,EAAAA,sBAAsBc,GACvCtB,KAAKwM,gBAAgB,oBAAqBlL,oCAI9CjB,OAAJC,eACQoL,EADRnL,UAAA,yBAAI,WAEI,MAAOP,MAAKyM,wBAEhB,SAAsBnL,GAClBtB,KAAKyM,mBAAqBnL,EAC1BtB,KAAKwM,gBAAgB,oBAAqBlL,oCAI9CjB,OAAJC,eACQoL,EADRnL,UAAA,yBAAI,WAEI,MAAOP,MAAK0M,wBAEhB,SAAsBpL,GAClBtB,KAAK0M,mBAAqBpL,EAC1BtB,KAAKwM,gBAAgB,oBAAqBlL,oCAI9CjB,OAAJC,eACQoL,EADRnL,UAAA,iBAAI,WAEI,MAAOP,MAAKiJ,gBAEhB,SAAc3H,GACNA,GACAtB,KAAKiJ,WAAa3H,EAClBtB,KAAKwM,gBAAgB,YAAalL,IAElCtB,KAAKiJ,WAAa,yCAK1B5I,OAAJC,eACQoL,EADRnL,UAAA,mBAAI,WAEI,MAAOP,MAAKkJ,kBAEhB,SAAgB5H,GACRA,GACAtB,KAAKkJ,aAAe5H,EACpBtB,KAAKwM,gBAAgB,cAAelL,IAEpCtB,KAAKkJ,aAAe,uCAK5B7I,OAAJC,eACQoL,EADRnL,UAAA,sBAAI,WACuB,MAAOP,MAAK2M,iDACnCtM,OAAJC,eAAQoL,EAARnL,UAAA,sBAAI,SAAmBe,GACftB,KAAK2M,gBAAkBrL,EAEnBtB,KAAK4M,SACL5M,KAAK4M,QAAQhC,+CAKrBvK,OAAJC,eACQoL,EADRnL,UAAA,iBAAI,WAEI,MAAOP,MAAKmJ,gBAEhB,SAAc0D,GAClB,GAAcvL,GAAQd,EAAAA,sBAAsBqM,EACpC7M,MAAKmJ,WAAa7H,EAClBtB,KAAKwM,gBAAgB,YAAalL,GAE9BA,EACAtB,KAAKmK,OAELnK,KAAK2K,wCAKbtK,OAAJC,eACQoL,EADRnL,UAAA,cAAI,WAEI,MAAOP,MAAKgM,+CAGhB3L,OAAJC,eACQoL,EADRnL,UAAA,wBAAI,WAEI,MAAOP,MAAKkM,gDAkBhBR,EAAJnL,UAAAuM,cAAI,WAAA,GAAJ3I,GAAAnE,IACQ,IAAIA,KAAK+M,WACL,MAAO/M,MAAK+M,UAIxB,IAAcC,GAAWhN,KAAK2L,QAAQsB,WACzBC,oBAAoBlN,KAAKD,YACzBoN,sBAAsB,eACtBC,wBAAuB,GACvBC,mBA5JmB,GA6JnBC,cAAmB3E,GAAhCC,SAEc2E,EAAsBvN,KAAK6L,iBAC5B2B,4BAA4BxN,KAAKD,WA4BtC,OA1BAiN,GAASS,yBAAyBF,GAElCP,EAASU,gBAAgBC,KAAKC,EAAAA,UAAU5N,KAAKsM,YAAYuB,UAAU,SAACjJ,GAC5DT,EAAKyI,UACLzI,EAAK2J,iBAAiBlJ,GAClBA,EAAOmJ,yBAAyBC,kBAAoB7J,EAAKyI,QAAQlC,WAGjEvG,EAAKyH,OAAOqC,IAAI,WAAM,MAAA9J,GAAKwG,YAKvC3K,KAAK+M,WAAa/M,KAAK2L,QAAQuC,QAC3B1O,UAAWQ,KAAKR,UAChB2O,iBAAkBnB,EAClBoB,WAAY,mBACZrC,eAAgB/L,KAAK+L,mBAGzB/L,KAAKqO,iBAELrO,KAAK+M,WAAWuB,cACXX,KAAKC,EAAAA,UAAU5N,KAAKsM,YACpBuB,UAAU,WAAM,MAAA1J,GAAKoK,WAEnBvO,KAAK+M,YAGhBrB,EAAJnL,UAAAgO,OAAI,WACQvO,KAAK+M,YAAc/M,KAAK+M,WAAWyB,eACnCxO,KAAK+M,WAAWwB,SAGpBvO,KAAK4M,QAAU,MAGnBlB,EAAJnL,UAAAuN,iBAAI,SAAiBW,GAAjB,GAAJtK,GAAAnE,KACY0O,EAAmB1O,KAAKgK,WAC5B3J,QAAOsO,KAAK3O,KAAKwJ,oBAAoBoF,KAAK,SAACC,GACvC,MAAIJ,GAAOK,eAAeC,UAAY5K,EAAKqF,mBAAmBqF,GAAKE,SAC/DN,EAAOK,eAAeE,UAAY7K,EAAKqF,mBAAmBqF,GAAKG,SAC/DP,EAAOK,eAAeG,WAAa9K,EAAKqF,mBAAmBqF,GAAKI,UAChER,EAAOK,eAAeI,WAAa/K,EAAKqF,mBAAmBqF,GAAKK,WAChER,EAAmBG,GAEZ,KAKf7O,KAAKwM,gBAAgB,cAAekC,GAEhC1O,KAAK4M,UACL5M,KAAK4M,QAAQhC,cACb5K,KAAK4M,QAAQxH,gBAGjBpF,KAAKmP,2BAGTzD,EAAJnL,UAAA4O,wBAAI,WAII,GAHKnP,KAAK+M,aACN/M,KAAK+M,WAAa/M,KAAK8M,iBAEF,UAArB9M,KAAKgK,aAAgD,SAArBhK,KAAKgK,YAAwB,CACzE,GAAkBoF,IACDpP,KAAK+M,WAAWsC,eAAeC,aAC5BtP,KAAK8L,SAASyD,QAAQhO,cAAc+N,cAAgB,EACtDE,EAAmBxP,KAAK+M,WAAWsC,eAAezM,MAAM6M,KAAO,KACrEzP,MAAK+M,WAAWsC,eAAezM,MAAM6M,IAC9BxK,SAASuK,EAAiBE,MAAM,MAAM,GAAI,IAAMN,EAAM,EAAzE,OAMI1D,EAAJnL,UAAAiM,gBAAI,SAAgBqC,EAAavN,GACrBtB,KAAKiM,kBAAoB3K,GACrBtB,KAAK4M,UACL5M,KAAK4M,QAAQiC,GAAOvN,IAKhCoK,EAAJnL,UAAAK,SAAI,WACIZ,KAAK2P,2BAGTjE,EAAJnL,UAAAyB,YAAI,WAAA,GAAJmC,GAAAnE,IACYA,MAAK+M,YACL/M,KAAK+M,WAAW6C,UAEpB5P,KAAKoM,gBAAgByD,QAAQ,SAACC,EAAUlK,GACpC,MAAAzB,GAAKpE,WAAWwB,cAAcwO,oBAAoBnK,EAAOkK,KAC7D9P,KAAKoM,gBAAgB4D,QAErBhQ,KAAKmM,aAAajC,OAClBlK,KAAKmM,aAAa8D,YAGtBvE,EAAJnL,UAAA2P,cAAI,SAAcC,GACNnQ,KAAKgM,eAAiBmE,EAAEC,UAAYC,EAAAA,QACpCrQ,KAAK2K,QAIbe,EAAJnL,UAAA+P,eAAI,WACItQ,KAAK2K,QAGTe,EAAJnL,UAAAoP,wBAAI,WAAA,GAAJxL,GAAAnE,IAC+B,WAAnBA,KAAKuK,WAELvK,KAAKoM,gBACAmE,IAAI,aAAc,WAAM,MAAApM,GAAKgG,SAC7BoG,IAAI,aAAc,WAAM,MAAApM,GAAKwG,SAC7BkF,QAAQ,SAACC,EAAUlK,GAAU,MAAAzB,GAAKpE,WAAWwB,cAAciP,iBAAiB5K,EAAOkK,KAGrE,UAAnB9P,KAAKuK,WAELvK,KAAKoM,gBACAmE,IAAI,QAAS,WAAM,MAAApM,GAAKgG,SACxBoG,IAAI,OAAQ,WAAM,MAAApM,GAAKwG,SACvBkF,QAAQ,SAACC,EAAUlK,GAAU,MAAAzB,GAAKpE,WAAWwB,cAAciP,iBAAiB5K,EAAOkK,MAIhGpE,EAAJnL,UAAA4J,KAAI,WAAA,GAAJhG,GAAAnE,IACQ,KAAKA,KAAKN,SAAU,CAChB,IAAKM,KAAK4M,QAAS,CAC/B,GAAsBG,GAAa/M,KAAK8M,eACxB9M,MAAKuO,SAELvO,KAAKyQ,OAASzQ,KAAKyQ,QAAU,GAAIC,GAAAA,gBAAgBnI,GAAoBvI,KAAK8L,UAE1E9L,KAAK4M,QAAUG,EAAW4D,OAAO3Q,KAAKyQ,QAAQG,SAC9C5Q,KAAK4M,QAAQ9B,cACR6C,KAAKC,EAAAA,UAAU5N,KAAKsM,YACpBuB,UAAU,WAAM,MAAA1J,GAAKoK,WAC1BvO,KAAKiM,kBAAmB,GAEpB,UACA,cACA,YACA,oBACA,oBACA,oBACA,iBACA,aAEO4D,QAAQ,SAACxO,GAAa,MAAA8C,GAAKqI,gBAAgBnL,EAAU8C,EAAM9C,MACtErB,KAAK4M,QAAQ9D,gBAAgB6E,KAAKC,EAAAA,UAAU5N,KAAKmM,cAAe0E,EAAAA,wBAC3DhD,UAAU,SAACiD,GACR3M,EAAKuG,UAAYoG,EACjB3M,EAAK2E,gBAAgBrC,KAAKqK,GAC1B3M,EAAK6H,cAAgB8E,IAGjC9Q,KAAKqO,iBACLrO,KAAK4M,QAAQzC,SAIrBuB,EAAJnL,UAAAoK,KAAI,WACQ3K,KAAK4M,SACL5M,KAAK4M,QAAQjC,QAKrBe,EAAJnL,UAAA8N,eAAI,WACSrO,KAAK+M,aACN/M,KAAK+M,WAAa/M,KAAK8M,gBAEnC,IAAcG,GACFjN,KAAK+M,WAAWgE,YAA4B,iBAC1CC,EAAShR,KAAKiR,YACdtF,EAAU3L,KAAKkR,oBAErBjE,GAASK,eACjB6D,MAAgBH,EAAOI,KAASzF,EAAQyF,MACxCD,MAAgBH,EAAOK,SAAa1F,EAAQ0F,aAQxC3F,EAAJnL,UAAA0Q,UAAI,WACJ,GAEYK,GAFErE,EAAWjN,KAAKgK,YAChBuH,GAASvR,KAAKR,WAAsC,QAAzBQ,KAAKR,UAAU8B,KAGhD,IAAiB,QAAb2L,GAAmC,WAAbA,EACtBqE,GAAkBvC,QAAS,SAAUC,QAAsB,QAAb/B,EAAqB,MAAQ,cACxE,IACU,QAAbA,GACc,SAAbA,GAAuBsE,GACV,UAAbtE,IAAyBsE,EAC1BD,GAAkBvC,QAAS,QAASC,QAAS,cAC1C,CAAA,KACU,WAAb/B,GACc,UAAbA,GAAwBsE,GACX,SAAbtE,IAAwBsE,GAGzB,KAAMC,IAAiCvE,EAFvCqE,IAAkBvC,QAAS,MAAOC,QAAS,UAKzC,GAAAyC,GAAdzR,KAAA0R,eAAAJ,EAAAvC,QAAAuC,EAAAtC,QAEQ,QACIoC,KAAME,EACND,UAAWtC,QAJvB0C,EAAAE,EAImC3C,QAJnCyC,EAAAG,KASIlG,EAAJnL,UAAA2Q,mBAAI,WACJ,GAEYW,GAFE5E,EAAWjN,KAAKgK,YAChBuH,GAASvR,KAAKR,WAAsC,QAAzBQ,KAAKR,UAAU8B,KAGhD,IAAiB,QAAb2L,EACA4E,GAAmB5C,SAAU,SAAUC,SAAU,cAC9C,IAAiB,WAAbjC,EACP4E,GAAmB5C,SAAU,SAAUC,SAAU,WAC9C,IACU,QAAbjC,GACc,SAAbA,GAAuBsE,GACV,UAAbtE,IAAyBsE,EAC1BM,GAAmB5C,SAAU,MAAOC,SAAU,cAC3C,CAAA,KACU,WAAbjC,GACc,UAAbA,GAAwBsE,GACX,SAAbtE,IAAwBsE,GAGzB,KAAMC,IAAiCvE,EAFvC4E,IAAmB5C,SAAU,QAASC,SAAU,UAK9C,GAAAuC,GAAdzR,KAAA0R,eAAAG,EAAA5C,SAAA4C,EAAA3C,SAEQ,QACIkC,KAAMS,EACNR,UAAWpC,SAJvBwC,EAAAE,EAIoCzC,SAJpCuC,EAAAG,KASYlG,EAAZnL,UAAAmR,eAAI,SAAuBC,EAA4BC,GACvD,GAAYE,GAAgCH,EAChCI,EAA8BH,CAelC,OAdyB,QAArB5R,KAAKgK,aAA8C,WAArBhK,KAAKgK,YACzB,QAAN4H,EACAG,EAAO,SACM,WAANH,IACPG,EAAO,OAGD,QAANJ,EACAG,EAAO,QACM,UAANH,IACPG,EAAO,QAIPH,EAAGG,EAAMF,EAAGG,mBA9a5BvT,KAACkD,EAAAA,UAADhD,OACIC,SAAU,wCACV+H,SAAU,YACVQ,MACI8K,YAAa,wBACbC,aAAc,4DA3MtBzT,KAAI+M,EAAAA,UArBJ/M,KAAIa,EAAAA,aAMJb,KAAIc,EAAAA,SAiBJd,KAAI0T,EAAAA,mBAXJ1T,KAAI2T,EAAAA,mBAyVJ3T,SAAA4T,GAAApK,aAAAxJ,KAAS6T,EAAAA,OAAT3T,MAAgByM,QAtVhB3M,KAAS8T,EAAAA,eAATtK,aAAAxJ,KAuVS+T,EAAAA,gCA1HTzJ,kBAAAtK,KAAK2J,EAAAA,SAGL0C,UAAArM,KAAKiB,EAAAA,MAALf,MAAW,eAUX8T,WAAAhU,KAAKiB,EAAAA,MAALf,MAAW,aAKXgB,WAAAlB,KAAKiB,EAAAA,MAALf,MAAW,uBAQXqK,oBAAAvK,KAAKiB,EAAAA,MAALf,MAAW,uBAUXsK,oBAAAxK,KAAKiB,EAAAA,MAALf,MAAW,uBAUX6L,YAAA/L,KAAKiB,EAAAA,MAALf,MAAW,eAcXsL,cAAAxL,KAAKiB,EAAAA,MAALf,MAAW,iBAcX+T,iBAAAjU,KAAKiB,EAAAA,MAALf,MAAW,oBAWXgM,YAAAlM,KAAKiB,EAAAA,MAALf,MAAW,eAiBXgU,SAAAlU,KAAKmU,EAAAA,YAALjU,MAAiB,2BAKjBkU,mBAAApU,KAAKmU,EAAAA,YAALjU,MAAiB,qBAoTjBgN,KCroBAmH,GAAA,WAAA,QAAAA,MAQA,sBARArU,KAACsE,EAAAA,SAADpE,OACIyE,cAAeoF,GAAoBmD,IACnCxI,SAAUqF,GAAoBmD,IAC9B3I,SAAUC,EAAAA,aAAc8P,EAAAA,eACxBnM,WAAY0E,IACZ0H,iBAAkBxK,QAGtBsK,KCHAG,GAAA,WAAA,QAAAA,MAMuC,sBANvCxU,KAACkD,EAAAA,UAADhD,OACIC,SAAU,+BACVuI,MACIC,MAAO,qCAGf6L,KAGAC,GAAA,WAAA,QAAAA,MAWwC,sBAXxCzU,KAACC,EAAAA,UAADC,OACIC,SAAU,2BACVG,SAAU,iHAKVoI,MACIC,MAAO,iCAGf8L,KAGAC,GAAA,WACI,QAAJA,GAAuB5P,GAAAtD,KAAvBsD,YAAuBA,EACvB,MAAA4P,MAEaC,GACPzP,EAAcwP,IAGpBE,GAAA,SAAArP,GAeI,QAAJqP,GACgB7D,EACA8D,EACoB5L,GAHhC,GAAJtD,GAKQJ,EALRK,KAAApE,KAKcuP,IALdvP,WACgBmE,GAAhBoL,QAAgBA,EACApL,EAAhBkP,aAAgBA,EACoBlP,EAApCsD,QAAoCA,EALvBtD,EAAbD,SAAgC,EASxBC,EAAKkP,aAAanO,QAAQf,EAAKoL,QAAQhO,eAAesM,cAU9D,MApB0C1I,GAA1CiO,EAAArP,GAaI1D,OAAJC,eAAQ8S,EAAR7S,UAAA,2BAAI,WACI,QAAUP,KAAKyH,yCAGnB2L,EAAJ7S,UAAAyB,YAAI,WACIhC,KAAKqT,aAAahO,eAAerF,KAAKuP,QAAQhO,+BA9BtD/C,KAACC,EAAAA,UAADC,OACIC,SAAU,sDACVG,SAAJ,wLACIC,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,OACzCP,QAAS,+jCACToI,QAAS,YACTC,MACIoM,kBAAmB,mBACnBC,kBAAmB,6DAlD3B/U,KAAIa,EAAAA,aAKJb,KAASqJ,EAAAA,eAETrJ,KAASgV,GAATxL,aAAAxJ,KAoDS+T,EAAAA,WApDT/T,KAoDqBiV,EAAAA,4BALrBvP,WAAA1F,KAAKiB,EAAAA,SAmBL2T,GApB0CD,IC/C1CO,GAAA,WAAA,QAAAA,MAMqC,sBANrClV,KAACkD,EAAAA,UAADhD,OACIC,SAAU,0DACVuI,MACIC,MAAO,kCAGfuM,KAEAC,GAAA,WAAA,QAAAA,MAMoC,sBANpCnV,KAACkD,EAAAA,UAADhD,OACIC,SAAU,2BACVuI,MACIC,MAAO,iCAGfwM,KAEAC,GAAA,WAcI,QAAJA,GACgBC,GAAA7T,KAAhB6T,GAAgBA,EAHH7T,KAAb8T,UAAiC,EAUjC,MAJIF,GAAJrT,UAAAwT,OAAI,WACI/T,KAAK8T,UAAY9T,KAAK8T,SACtB9T,KAAK6T,GAAGzO,+BApBhB5G,KAACC,EAAAA,UAADC,OACIC,SAAU,qBACVO,gBAAiBC,EAAAA,wBAAwBC,OACzCN,SAAJ,6hBACID,QAAS,ivBACTE,cAAeC,EAAAA,kBAAkBC,KACjCuI,YACIwM,8CA7BRxV,KAAIsJ,EAAAA,uCAkCJgM,WAAAtV,KAAKiB,EAAAA,SAULmU,KCpCMK,IACFL,GACAD,GACAP,GACAJ,GACAC,GACAS,IAGJQ,GAAA,WAAA,QAAAA,MAUqC,sBAVrC1V,KAACsE,EAAAA,SAADpE,OACIqE,SACIC,EAAAA,aACAqF,EAAAA,WACA8L,EAAAA,eACAlR,IAEJC,QAAS+Q,GACT9Q,aAAc8Q,OAElBC,KC9BaE,GAAU,GAAIC,GAAAA,QAAQ,4yBCHP,8LCKW,6BAGD,kCAIOC,kCAMA,yVCgCH,+BAGD,gCAEQ;y1DfAT,80FCwCH,gwBCxEK,sBACF,mBACH,sBAGG,+BACE,iCACA,kCACC"}