{"version":3,"file":"mosaic.umd.min.js","sources":["../../src/lib/select/select.component.ts","../../src/lib/tree/tree-selection.ts","../../src/lib/tree/tree.module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/tag/tag.component.ts","../../src/lib/tag/tag.module.ts","../../src/lib/select/select-animations.ts","../../src/lib/select/select.module.ts","../../src/lib/version.ts","../../src/lib/navbar/navbar.component.ts","../../src/lib/navbar/navbar.module.ts","../../src/lib/progress-bar/progress-bar.component.ts","../../src/lib/progress-bar/progress-bar.module.ts","../../src/lib/progress-spinner/progress-spinner.component.ts","../../src/lib/progress-spinner/progress-spinner.module.ts","../../src/lib/radio/radio.component.ts","../../src/lib/radio/radio.module.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/list/list.component.ts","../../src/lib/list/list.module.ts","../../src/lib/link/link.component.ts","../../src/lib/link/link.module.ts","../../src/lib/modal/modal-control.service.ts","../../src/lib/modal/modal-ref.class.ts","../../src/lib/modal/modal-util.ts","../../src/lib/modal/modal.component.ts","../../src/lib/modal/css-unit.pipe.ts","../../src/lib/modal/modal.service.ts","../../src/lib/modal/modal.module.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/divider/divider.component.ts","../../src/lib/divider/divider.module.ts","../../src/lib/form-field/cleaner.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field.module.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input.module.ts","../../src/lib/list/list-selection.component.ts","../../src/lib/select/select-errors.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/line/line.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/services/measure-scrollbar.service.ts","../../src/lib/core/option/optgroup.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/icon/icon.component.ts","../../src/lib/icon/icon.module.ts","../../src/lib/button/button.component.ts","../../src/lib/button/button.module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/core/utils/utils.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts"],"sourcesContent":["/* tslint:disable:no-empty */\n\nimport { ActiveDescendantKeyManager } from '@ptsecurity/cdk/a11y';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    RIGHT_ARROW,\n    SPACE,\n    UP_ARROW,\n    A\n} from '@ptsecurity/cdk/keycodes';\nimport {\n    CdkConnectedOverlay,\n    Overlay,\n    RepositionScrollStrategy,\n    IScrollStrategy,\n    ViewportRuler\n} from '@ptsecurity/cdk/overlay';\n\nimport {\n    AfterContentInit, AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    isDevMode,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList, Renderer2,\n    Self,\n    SimpleChanges,\n    ViewChild, ViewChildren,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport {\n    _countGroupLabelsBeforeOption,\n    _getOptionScrollPosition,\n    CanDisable,\n    CanUpdateErrorState,\n    ErrorStateMatcher,\n    HasTabIndex,\n    MC_OPTION_PARENT_COMPONENT,\n    McOptgroup,\n    McOption,\n    McOptionSelectionChange,\n    mixinDisabled,\n    mixinErrorState,\n    mixinTabIndex\n} from '@ptsecurity/mosaic/core';\n\nimport { McFormField, McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { McTag } from '@ptsecurity/mosaic/tag';\n\n\nimport { defer, merge, Observable, Subject } from 'rxjs';\nimport {\n    filter,\n    map,\n    startWith,\n    switchMap,\n    take,\n    takeUntil,\n    distinctUntilChanged\n} from 'rxjs/operators';\n\nimport {\n    getMcSelectDynamicMultipleError,\n    getMcSelectNonArrayValueError,\n    getMcSelectNonFunctionValueError\n} from './select-errors';\n\nimport { mcSelectAnimations } from './select-animations';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 224;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 1;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\n/* tslint:disable-next-line:no-magic-numbers */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 2;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MC_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-select-scroll-strategy');\n\n/** @docs-private */\nexport function MC_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MC_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MC_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class McSelectChange {\n    constructor(\n        /** Reference to the select that emitted the change event. */\n        public source: McSelect,\n        /** Current value of the select that emitted the event. */\n        public value: any) {\n    }\n}\n\n// Boilerplate for applying mixins to McSelect.\n/** @docs-private */\nexport class McSelectBase {\n    constructor(\n        public _elementRef: ElementRef,\n        public _defaultErrorStateMatcher: ErrorStateMatcher,\n        public _parentForm: NgForm,\n        public _parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {}\n}\n\nexport const _McSelectMixinBase = mixinTabIndex(mixinDisabled(mixinErrorState(McSelectBase)));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({ selector: 'mc-select-trigger' })\nexport class McSelectTrigger {}\n\n\n@Component({\n    selector: 'mc-select',\n    exportAs: 'mcSelect',\n    templateUrl: 'select.html',\n    styleUrls: ['./select.css'],\n    inputs: ['disabled', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'tabIndex',\n        class: 'mc-select',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-select-invalid]': 'errorState',\n        '[class.mc-select-required]': 'required',\n        '(keydown)': '_handleKeydown($event)',\n        '(focus)': '_onFocus()',\n        '(blur)': '_onBlur()',\n        '(window:resize)': '_calculateHiddenItems()'\n    },\n    animations: [\n        mcSelectAnimations.transformPanel,\n        mcSelectAnimations.fadeInContent\n    ],\n    providers: [\n        { provide: McFormFieldControl, useExisting: McSelect },\n        { provide: MC_OPTION_PARENT_COMPONENT, useExisting: McSelect }\n    ]\n})\nexport class McSelect extends _McSelectMixinBase implements\n    AfterContentInit, AfterViewInit, OnChanges, OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable,\n    HasTabIndex, McFormFieldControl<any>, CanUpdateErrorState {\n\n    /** The last measured value for the trigger's client bounding rect. */\n    _triggerRect: ClientRect;\n\n    /** The cached font-size of the trigger element. */\n    _triggerFontSize = 0;\n\n    /** Deals with the selection logic. */\n    _selectionModel: SelectionModel<McOption>;\n\n    /** Manages keyboard events for options in the panel. */\n    _keyManager: ActiveDescendantKeyManager<McOption>;\n\n    /** The IDs of child options to be passed to the aria-owns attribute. */\n    _optionIds: string = '';\n\n    /** The value of the select panel's transform-origin property. */\n    _transformOrigin: string = 'top';\n\n    /** Whether the panel's animation is done. */\n    _panelDoneAnimating: boolean = false;\n\n    /** Emits when the panel element is finished transforming in. */\n    _panelDoneAnimatingStream = new Subject<string>();\n\n    /** Strategy that will be used to handle scrolling while the select panel is open. */\n    _scrollStrategy = this._scrollStrategyFactory();\n\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n    _offsetY = 0;\n\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n    _positions = [\n        {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top'\n        },\n        {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom'\n        }\n    ];\n\n    /** Whether the select is focused. */\n    get focused(): boolean {\n        return this._focused || this._panelOpen;\n    }\n\n    /**\n     * @deprecated Setter to be removed as this property is intended to be readonly.\n     * @breaking-change 8.0.0\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n\n    /** A name for this control that can be used by `mc-form-field`. */\n    controlType = 'mc-select';\n\n    @ViewChild('trigger') trigger: ElementRef;\n    @ViewChildren(McTag) tags: QueryList<McTag>;\n\n    @ViewChild('panel') panel: ElementRef;\n\n    /** Overlay pane containing the options. */\n    @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n    /** All of the defined select options. */\n    @ContentChildren(McOption, { descendants: true }) options: QueryList<McOption>;\n\n    /** All of the defined groups of options. */\n    @ContentChildren(McOptgroup) optionGroups: QueryList<McOptgroup>;\n\n    /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n    @Input() panelClass: string | string[] | Set<string> | { [key: string]: any };\n\n    /** User-supplied override of the trigger element. */\n    @ContentChild(McSelectTrigger) customTrigger: McSelectTrigger;\n\n    /** Placeholder to be shown if no value has been selected. */\n    @Input()\n    get placeholder(): string {\n        return this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n\n    /** Whether the component is required. */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n\n    /** Whether the user should be allowed to select multiple options. */\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        if (this._selectionModel) {\n            throw getMcSelectDynamicMultipleError();\n        }\n\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith() {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        /* tslint:disable-next-line:strict-type-predicates */\n        if (typeof fn !== 'function') {\n            throw getMcSelectNonFunctionValueError();\n        }\n\n        this._compareWith = fn;\n\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n\n    /** Value of the select control. */\n    @Input()\n    get value(): any {\n        return this._value;\n    }\n\n    set value(newValue: any) {\n        if (newValue !== this._value) {\n            this.writeValue(newValue);\n            this._value = newValue;\n        }\n    }\n\n    /** Object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Function used to sort the values in a select in multiple mode.\n     * Follows the same logic as `Array.prototype.sort`.\n     */\n    @Input() sortComparator: (a: McOption, b: McOption, options: McOption[]) => number;\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n\n    /** Combined stream of all of the child options' change events. */\n    readonly optionSelectionChanges: Observable<McOptionSelectionChange> = defer(() => {\n        if (this.options) {\n            return merge(...this.options.map((option) => option.onSelectionChange));\n        }\n\n        return this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n    });\n\n    /** Event emitted when the select panel has been toggled. */\n    @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted when the select has been opened. */\n    @Output('opened') readonly _openedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => o), map(() => {}));\n\n    /** Event emitted when the select has been closed. */\n    @Output('closed') readonly _closedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => !o), map(() => {}));\n\n    /** Event emitted when the selected value has been changed by the user. */\n    @Output() readonly selectionChange: EventEmitter<McSelectChange> = new EventEmitter<McSelectChange>();\n\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    hiddenItems: number = 0;\n\n    /** Whether or not the overlay panel is open. */\n    private _panelOpen = false;\n\n    /** Whether filling out the select is required in the form. */\n    private _required: boolean = false;\n\n    /** The scroll position of the overlay panel, calculated to center the selected option. */\n    private _scrollTop = 0;\n\n    /** The placeholder displayed in the trigger of the select. */\n    private _placeholder: string;\n\n    /** Whether the component is in multiple selection mode. */\n    private _multiple: boolean = false;\n\n    /** Unique id for this input. */\n    private readonly _uid = `mc-select-${nextUniqueId++}`;\n\n    /** Emits whenever the component is destroyed. */\n    private readonly _destroy = new Subject<void>();\n\n    private _focused = false;\n\n    private _value: any;\n\n    private _id: string;\n\n    constructor(\n        private readonly _viewportRuler: ViewportRuler,\n        private readonly _changeDetectorRef: ChangeDetectorRef,\n        private readonly _ngZone: NgZone,\n        private readonly _renderer: Renderer2,\n        _defaultErrorStateMatcher: ErrorStateMatcher,\n        elementRef: ElementRef,\n        @Optional() private readonly _dir: Directionality,\n        @Optional() _parentForm: NgForm,\n        @Optional() _parentFormGroup: FormGroupDirective,\n        @Optional() private readonly _parentFormField: McFormField,\n        @Self() @Optional() public ngControl: NgControl,\n        @Attribute('tabindex') tabIndex: string,\n        @Inject(MC_SELECT_SCROLL_STRATEGY) private readonly _scrollStrategyFactory\n    ) {\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnInit() {\n        this._selectionModel = new SelectionModel<McOption>(this.multiple);\n        this.stateChanges.next();\n\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => {\n                if (this.panelOpen) {\n                    this._scrollTop = 0;\n                    this.openedChange.emit(true);\n                } else {\n                    this.openedChange.emit(false);\n                    this._panelDoneAnimating = false;\n                    this.overlayDir.offsetX = 0;\n                    this._changeDetectorRef.markForCheck();\n                }\n            });\n    }\n\n    ngAfterContentInit() {\n        this._initKeyManager();\n\n        this._selectionModel.onChange!\n            .pipe(takeUntil(this._destroy))\n            .subscribe((event) => {\n                event.added.forEach((option) => option.select());\n                event.removed.forEach((option) => option.deselect());\n            });\n\n        this.options.changes\n            .pipe(startWith(null), takeUntil(this._destroy))\n            .subscribe(() => {\n                this._resetOptions();\n                this._initializeSelection();\n            });\n    }\n\n    ngAfterViewInit(): void {\n        this.tags.changes\n            .subscribe(() => {\n                setTimeout(() => this._calculateHiddenItems(), 0);\n            });\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) { this.updateErrorState(); }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes.disabled) {\n            this.stateChanges.next();\n        }\n    }\n\n    ngOnDestroy() {\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n    }\n\n    /** `View -> model callback called when value changes` */\n    _onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when select has been touched` */\n    _onTouched = () => {};\n\n    /** Toggles the overlay panel open or closed. */\n    toggle(): void {\n        if (this.panelOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    /** Opens the overlay panel. */\n    open(): void {\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) { return; }\n\n        this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n        this._panelOpen = true;\n        this._keyManager.withHorizontalOrientation(null);\n        this._calculateOverlayPosition();\n        this._highlightCorrectOption();\n        this._changeDetectorRef.markForCheck();\n\n        // Set the font size on the panel element once it exists.\n        this._ngZone.onStable.asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                if (this._triggerFontSize && this.overlayDir.overlayRef &&\n                    this.overlayDir.overlayRef.overlayElement) {\n                    this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n                }\n            });\n    }\n\n    /** Closes the overlay panel and focuses the host element. */\n    close(): void {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value: any): void {\n        if (this.options) {\n            this._setSelectionByValue(value);\n        }\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn: (value: any) => void): void {\n        this._onChange = fn;\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn: () => {}): void {\n        this._onTouched = fn;\n    }\n\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    get panelOpen(): boolean {\n        return this._panelOpen;\n    }\n\n    get selected(): McOption | McOption[] {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n\n    get triggerValue(): string {\n        if (this.empty) { return ''; }\n\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map((option) => option.viewValue);\n\n            if (this._isRtl()) { selectedOptions.reverse(); }\n\n            return selectedOptions.join(', ');\n        }\n\n        return this._selectionModel.selected[0].viewValue;\n    }\n\n    get triggerValues(): McOption[] {\n        if (this.empty) { return []; }\n\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected;\n\n            if (this._isRtl()) { selectedOptions.reverse(); }\n\n            return selectedOptions;\n        }\n\n        return [this._selectionModel.selected[0]];\n    }\n\n    get empty(): boolean {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n\n    _isRtl(): boolean {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n\n    _handleKeydown(event: KeyboardEvent): void {\n        if (!this.disabled) {\n            if (this.panelOpen) {\n                this._handleOpenKeydown(event);\n            } else {\n                this._handleClosedKeydown(event);\n            }\n        }\n    }\n\n    /**\n     * When the panel content is done fading in, the _panelDoneAnimating property is\n     * set so the proper class can be added to the panel.\n     */\n    _onFadeInDone(): void {\n        this._panelDoneAnimating = this.panelOpen;\n        this._changeDetectorRef.markForCheck();\n    }\n\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached(): void {\n        this.overlayDir.positionChange\n            .pipe(take(1))\n            .subscribe(() => {\n                this._changeDetectorRef.detectChanges();\n                this._calculateOverlayOffsetX();\n                this.panel.nativeElement.scrollTop = this._scrollTop;\n            });\n    }\n\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme(): string {\n        return this._parentFormField ? `mc-${this._parentFormField.color}` : '';\n    }\n\n    /** Focuses the select element. */\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number, maxScroll: number): number {\n        const itemHeight = this._getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n\n        /* tslint:disable-next-line:no-magic-numbers */\n        const halfOptionHeight = itemHeight / 2;\n\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n\n    /** Invoked when an option is clicked. */\n    onRemoveMatcherItem(option: McOption, $event): void {\n        $event.stopPropagation();\n\n        option.deselect();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat(): boolean {\n        return this._panelOpen || !this.empty;\n    }\n\n    _calculateHiddenItems(): void {\n        if (this.empty) { return; }\n\n        let visibleItems: number = 0;\n        const totalItemsWidth = this._getTotalItemsWidthInMatcher();\n        let totalVisibleItemsWidth: number = 0;\n        const itemMargin: number = 4;\n\n        this.tags.forEach((tag) => {\n            if (tag.nativeElement.offsetTop < tag.nativeElement.offsetHeight) {\n                totalVisibleItemsWidth += tag.nativeElement.getBoundingClientRect().width + itemMargin;\n                visibleItems++;\n            }\n        });\n\n        this.hiddenItems = (this.selected as ArrayLike<McOption>).length - visibleItems;\n\n        if (this.hiddenItems) {\n            const itemsCounter = this.trigger.nativeElement.querySelector('.mc-select__match-hidden-text');\n            const matcherList = this.trigger.nativeElement.querySelector('.mc-select__match-list');\n\n            const itemsCounterShowed = itemsCounter.offsetTop < itemsCounter.offsetHeight;\n            // const itemsCounterWidth: number = itemsCounter.getBoundingClientRect().width;\n            const itemsCounterWidth: number = 86;\n\n            const matcherListWidth: number = matcherList.getBoundingClientRect().width;\n            const matcherWidth: number = matcherListWidth + itemsCounterWidth;\n\n            if (itemsCounterShowed && (totalItemsWidth < matcherWidth)) { this.hiddenItems = 0; }\n\n            if (\n                totalVisibleItemsWidth === matcherListWidth ||\n                (totalVisibleItemsWidth + itemsCounterWidth) < matcherListWidth\n            ) {\n                this._changeDetectorRef.markForCheck();\n\n                return ;\n            } else if (!itemsCounterShowed && (totalItemsWidth + itemsCounterWidth) > matcherWidth) {\n                this.hiddenItems++;\n            }\n        }\n\n        this._changeDetectorRef.markForCheck();\n    }\n\n    private _getTotalItemsWidthInMatcher(): number {\n        const triggerClone = this.trigger.nativeElement.cloneNode(true);\n        triggerClone.querySelector('.mc-select__match-hidden-text').remove();\n\n        this._renderer.setStyle(triggerClone, 'position', 'absolute');\n        this._renderer.setStyle(triggerClone, 'visibility', 'hidden');\n        this._renderer.setStyle(triggerClone, 'top', '-100%');\n        this._renderer.setStyle(triggerClone, 'left', '0');\n\n        this._renderer.appendChild(this.trigger.nativeElement, triggerClone);\n\n        let totalItemsWidth: number = 0;\n        const itemMargin: number = 4;\n        triggerClone.querySelectorAll('mc-tag').forEach((item) => {\n            totalItemsWidth += item.getBoundingClientRect().width as number + itemMargin;\n        });\n\n        triggerClone.remove();\n\n        return totalItemsWidth;\n    }\n\n    /** Handles keyboard events while the select is closed. */\n    private _handleClosedKeydown(event: KeyboardEvent): void {\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n        // Open the select on ALT + arrow key to match the native <select>\n        if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        } else if (!this.multiple) {\n            this._keyManager.onKeydown(event);\n        }\n    }\n\n    /** Handles keyboard events when the selected is open. */\n    private _handleOpenKeydown(event: KeyboardEvent): void {\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const manager = this._keyManager;\n\n        if (keyCode === HOME || keyCode === END) {\n            event.preventDefault();\n\n            if (keyCode === HOME) {\n                manager.setFirstItemActive();\n            } else {\n                manager.setLastItemActive();\n            }\n\n        } else if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n        } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        } else if (this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some((option) => !option.selected);\n            this.options.forEach((option) => {\n                if (hasDeselectedOptions && !option.disabled) {\n                    option.select();\n                } else {\n                    option.deselect();\n                }\n            });\n        } else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n\n            manager.onKeydown(event);\n\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n\n    private _initializeSelection(): void {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n        });\n    }\n\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    private _setSelectionByValue(value: any | any[]): void {\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw getMcSelectNonArrayValueError();\n            }\n\n            this._selectionModel.clear();\n            value.forEach((currentValue: any) => this._selectValue(currentValue));\n            this._sortValues();\n        } else {\n            this._selectionModel.clear();\n            const correspondingOption = this._selectValue(value);\n\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.setActiveItem(correspondingOption);\n            }\n        }\n\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    private _selectValue(value: any): McOption | undefined {\n        const correspondingOption = this.options.find((option: McOption) => {\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            } catch (error) {\n                if (isDevMode()) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n\n                return false;\n            }\n        });\n\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n\n        return correspondingOption;\n    }\n\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    private _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager<McOption>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n        this._keyManager.tabOut\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            });\n\n        this._keyManager.change\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n                if (this._panelOpen && this.panel) {\n                    this._scrollActiveOptionIntoView();\n                } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n            });\n    }\n\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    private _resetOptions(): void {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n        this.optionSelectionChanges\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe((event) => {\n                this._onSelect(event.source, event.isUserInput);\n\n                if (event.isUserInput && !this.multiple && this._panelOpen) {\n                    this.close();\n                    this.focus();\n                }\n            });\n\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map((option) => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n                this._changeDetectorRef.markForCheck();\n                this.stateChanges.next();\n            });\n\n        this._setOptionIds();\n    }\n\n    /** Invoked when an option is clicked. */\n    private _onSelect(option: McOption, isUserInput: boolean): void {\n        const wasSelected = this._selectionModel.isSelected(option);\n\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            this._propagateChanges(option.value);\n        } else {\n            if (option.selected) {\n                this._selectionModel.select(option);\n            } else {\n                this._selectionModel.deselect(option);\n            }\n\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n\n            if (this.multiple) {\n                this._sortValues();\n\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mc-option`.\n                    this.focus();\n                }\n            }\n        }\n\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n\n        this.stateChanges.next();\n    }\n\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    private _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n\n    /** Emits change event to set the model value. */\n    private _propagateChanges(fallbackValue?: any): void {\n        let valueToEmit: any = null;\n\n        if (this.multiple) {\n            valueToEmit = (this.selected as McOption[]).map((option) => option.value);\n        } else {\n            valueToEmit = this.selected ? (this.selected as McOption).value : fallbackValue;\n        }\n\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(new McSelectChange(this, valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /** Records option IDs to pass to the aria-owns property. */\n    private _setOptionIds() {\n        this._optionIds = this.options.map((option) => option.id).join(' ');\n    }\n\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    private _highlightCorrectOption(): void {\n        if (this._keyManager) {\n            if (this.empty) {\n                this._keyManager.setFirstItemActive();\n            } else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n\n    /** Scrolls the active option into view. */\n    private _scrollActiveOptionIntoView(): void {\n        const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n        const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options, this.optionGroups);\n\n        this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n            activeOptionIndex + labelCount,\n            this._getItemHeight(),\n            this.panel.nativeElement.scrollTop,\n            SELECT_PANEL_MAX_HEIGHT\n        );\n    }\n\n    /** Gets the index of the provided option in the option list. */\n    private _getOptionIndex(option: McOption): number | undefined {\n        return this.options.reduce((result: number, current: McOption, index: number) => {\n            /* tslint:disable-next-line:strict-type-predicates */\n            return result === undefined ? (option === current ? index : undefined) : result;\n        }, undefined);\n    }\n\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    private _calculateOverlayPosition(): void {\n        const itemHeight = this._getItemHeight();\n        const items = this._getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n\n        // If no value is selected we open the popup to the first item.\n        let selectedOptionOffset =\n            this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n        selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n            this.optionGroups);\n\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        /* tslint:disable-next-line:no-magic-numbers */\n        const scrollBuffer = panelHeight / 2;\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._offsetY = this._calculateOverlayOffsetY();\n\n        this._checkOverlayWithinViewport(maxScroll);\n    }\n\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    private _calculateOverlayOffsetX(): void {\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const isRtl = this._isRtl();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const paddingWidth = SELECT_PANEL_PADDING_X * 2;\n        let offsetX: number;\n\n        const selected = this._selectionModel.selected[0] || this.options.first;\n        offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n\n        // Invert the offset in LTR.\n        if (!isRtl) { offsetX *= -1; }\n\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        } else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    private _calculateOverlayOffsetY(): number {\n        // const itemHeight = this._getItemHeight();\n        // const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n\n        // todo I'm not sure that we will use it\n        return 0;\n        // return Math.round(-optionHeightAdjustment);\n    }\n\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    private _checkOverlayWithinViewport(maxScroll: number): void {\n        const itemHeight = this._getItemHeight();\n        const viewportSize = this._viewportRuler.getViewportSize();\n\n        const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable =\n            viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n        const panelHeightTop = Math.abs(this._offsetY);\n        const totalPanelHeight =\n            Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        } else if (panelHeightTop > topSpaceAvailable) {\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        } else {\n            this._transformOrigin = this._getOriginBasedOnOption();\n        }\n    }\n\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this._scrollTop <= 0) {\n            this._scrollTop = 0;\n            this._offsetY = 0;\n            this._transformOrigin = `50% bottom 0px`;\n        }\n    }\n\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number, maxScroll: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this._scrollTop >= maxScroll) {\n            this._scrollTop = maxScroll;\n            this._offsetY = 0;\n            this._transformOrigin = `50% top 0px`;\n\n            return;\n        }\n    }\n\n    /** Sets the transform origin point based on the selected option. */\n    private _getOriginBasedOnOption(): string {\n        const itemHeight = this._getItemHeight();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        /* tslint:disable-next-line:no-magic-numbers */\n        const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n\n        return `50% ${originY}px 0px`;\n    }\n\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    private _getItemCount(): number {\n        return this.options.length + this.optionGroups.length;\n    }\n\n    /** Calculates the height of the select's options. */\n    private _getItemHeight(): number {\n        /* tslint:disable-next-line:no-magic-numbers */\n        return 32;\n        // return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, ContentChildren, EventEmitter, forwardRef, Input, IterableDiffer,\n    IterableDiffers, Output, QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    Directive, ElementRef, Inject\n} from '@angular/core';\nimport { NodeDef, ViewData } from '@angular/core/src/view';\n\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { CdkTreeNode, CdkTree, CdkTreeNodeOutlet } from '@ptsecurity/cdk/tree';\n\nimport { CanDisable, HasTabIndex, mixinDisabled, mixinTabIndex, toBoolean } from '@ptsecurity/mosaic/core';\n\nimport { FocusKeyManager } from '@ptsecurity/cdk/a11y';\n\nimport { END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, SPACE } from '@ptsecurity/cdk/keycodes';\n\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n    exportAs: 'mcTreeNodeOption',\n    selector: 'mc-tree-node-option',\n    host: {\n        tabindex: '-1',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': '_hasFocus',\n        '[attr.aria-expanded]': 'isExpanded',\n        '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n        class: 'mc-tree-node',\n\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()',\n\n        '(click)': '_handleClick()'\n    },\n    providers: [\n        { provide: CdkTreeNode, useExisting: McTreeNodeOption }\n    ]\n})\nexport class McTreeNodeOption<T> extends CdkTreeNode<T> implements CanDisable {\n    @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n        }\n    }\n\n    @Input()\n    get selected(): boolean {\n        return this.treeSelection.selectedOptions && this.treeSelection.selectedOptions.isSelected(this) || false;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            // this.treeSelection._reportValueChange();\n        }\n    }\n\n    private _hasFocus: boolean = false;\n\n    private _disabled: boolean = false;\n    private _selected: boolean = false;\n\n    constructor(\n        protected _elementRef: ElementRef,\n        @Inject(forwardRef(() => McTreeSelection))\n        protected treeSelection: McTreeSelection<T>\n    ) {\n        super(_elementRef, treeSelection);\n    }\n\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n\n        this.treeSelection.setFocusedOption(this);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.treeSelection.selectedOptions) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.treeSelection.selectedOptions.select(this);\n        } else {\n            this.treeSelection.selectedOptions.deselect(this);\n        }\n\n        // this._changeDetector.markForCheck();\n    }\n\n    _getHeight(): number {\n        return this._elementRef.nativeElement.getClientRects()[0].height;\n    }\n\n    _handleFocus(): void {\n        if (this.disabled || this._hasFocus) { return; }\n\n        this._hasFocus = true;\n    }\n\n    _handleBlur(): void {\n        this._hasFocus = false;\n    }\n\n    _handleClick(): void {\n        if (this.disabled) { return; }\n\n        this.treeSelection.setFocusedOption(this);\n    }\n}\n\nexport const _McTreeSelectionBase = mixinTabIndex(mixinDisabled(CdkTree));\n\nexport class McTreeNavigationChange {\n    constructor(\n        public source: McTreeSelection<any>,\n        public option: McTreeNodeOption<any>\n    ) {}\n}\n\nexport class McTreeSelectionChange {\n    constructor(\n        public source: McTreeSelection<any>,\n        public option: McTreeNodeOption<any>\n    ) {}\n}\n\n@Component({\n    exportAs: 'mcTreeSelection',\n    selector: 'mc-tree-selection',\n    template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n    host: {\n        '[tabIndex]': 'tabIndex',\n        class: 'mc-tree-selection',\n        role: 'tree-selection',\n        '(keydown)': '_onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    styleUrls: ['./tree.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{ provide: CdkTree, useExisting: McTreeSelection }]\n})\nexport class McTreeSelection<T> extends _McTreeSelectionBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex {\n    // Outlets within the tree's template where the dataNodes will be inserted.\n    @ViewChild(CdkTreeNodeOutlet) _nodeOutlet: CdkTreeNodeOutlet;\n\n    @ContentChildren(forwardRef(() => McTreeNodeOption)) options: QueryList<McTreeNodeOption<T>>;\n\n    _keyManager: FocusKeyManager<McTreeNodeOption<T>>;\n\n    selectedOptions: SelectionModel<McTreeNodeOption<T>>;\n\n    _disabled: boolean = false;\n    tabIndex: number;\n    multiple: boolean;\n    autoSelect: boolean;\n    noUnselect: boolean;\n\n    // todo temporary solution\n    withShift: boolean;\n    withCtrl: boolean;\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(rawValue: boolean) {\n        const value = toBoolean(rawValue);\n\n        if (this._disabled !== value) {\n            this._disabled = value;\n\n            if (this._disabled) {\n                console.log('need disable all options');\n            } else {\n                console.log('need enable all options');\n            }\n        }\n    }\n\n    @Output() readonly navigationChange = new EventEmitter<McTreeNavigationChange>();\n\n    @Output() readonly selectionChange = new EventEmitter<McTreeSelectionChange>();\n\n    constructor(\n        private _elementRef: ElementRef,\n        _differs: IterableDiffers,\n        _changeDetectorRef: ChangeDetectorRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('multiple') multiple: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string\n    ) {\n        super(_differs, _changeDetectorRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.multiple = multiple === null ? true : toBoolean(multiple);\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.selectedOptions = new SelectionModel<McTreeNodeOption<T>>(this.multiple);\n    }\n\n    _onKeyDown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n        this.withShift = event.shiftKey;\n        this.withCtrl = event.ctrlKey;\n\n        switch (keyCode) {\n            case LEFT_ARROW:\n                if (this._keyManager.activeItem) {\n                    this.treeControl.collapse(this._keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                break;\n            case RIGHT_ARROW:\n                if (this._keyManager.activeItem) {\n                    this.treeControl.expand(this._keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                break;\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                this._keyManager.setPreviousPageItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                this._keyManager.setNextPageItemActive();\n                event.preventDefault();\n\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    ngAfterContentInit(): void {\n        this._keyManager = new FocusKeyManager<McTreeNodeOption<T>>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation(true)\n            .withHorizontalOrientation(null);\n    }\n\n    updateScrollSize(): void {\n        if (!this.options.first) { return; }\n\n        this._keyManager.withScrollSize(Math.floor(this._getHeight() / this.options.first._getHeight()));\n    }\n\n    setFocusedOption(option: McTreeNodeOption<T>): void {\n        this._keyManager.updateActiveItem(option);\n\n        if (this.withShift && this.multiple) {\n            const previousIndex = this._keyManager.previousActiveItemIndex;\n            const activeIndex = this._keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n\n            this.withShift = false;\n        } else if (this.withCtrl) {\n            this.withCtrl = false;\n\n            if (!this._canDeselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) {\n                this.options.forEach((item) => item.setSelected(false));\n                option.setSelected(true);\n            }\n        }\n\n        this._emitNavigationEvent(option);\n    }\n\n    // Toggles the selected state of the currently focused option.\n    toggleFocusedOption(): void {\n        const focusedIndex = this._keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n            const focusedOption: McTreeNodeOption<T> = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this._canDeselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this._emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    renderNodeChanges(\n        data: T[],\n        dataDiffer: IterableDiffer<T> = this._dataDiffer,\n        viewContainer: any = this._nodeOutlet.viewContainer,\n        parentData?: T\n    ) {\n        super.renderNodeChanges(data, dataDiffer, viewContainer, parentData);\n\n        const arrayOfInstances = [];\n\n        viewContainer._embeddedViews.forEach((view: ViewData) => {\n            const viewDef = view.def;\n\n            viewDef.nodes.forEach((node: NodeDef) => {\n                if (viewDef.nodeMatchedQueries === node.matchedQueryIds) {\n                    const nodeData: any = view.nodes[node.nodeIndex];\n\n                    arrayOfInstances.push(nodeData.instance as never);\n                }\n            });\n        });\n\n        if (this.options) {\n            this.options.reset(arrayOfInstances);\n            this.options.notifyOnChanges();\n        }\n\n        this.updateScrollSize();\n    }\n\n    _getHeight(): number {\n        return this._elementRef.nativeElement.getClientRects()[0].height;\n    }\n\n    _emitNavigationEvent(option: McTreeNodeOption<T>): void {\n        this.navigationChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    _emitChangeEvent(option: McTreeNodeOption<T>): void {\n        this.selectionChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private _isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    private _canDeselectLast(option: McTreeNodeOption<T>): boolean {\n        return !(this.noUnselect && this.selectedOptions.selected.length === 1 && option.selected);\n    }\n}\n\n","import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { CdkTreeModule } from '@ptsecurity/cdk/tree';\n\nimport { McTreeNodeDef } from './node';\nimport { McTreeNodePadding } from './padding';\nimport { McTreeSelection, McTreeNodeOption } from './tree-selection';\n\n\nconst MC_TREE_DIRECTIVES = [\n    McTreeNodeDef,\n    McTreeNodePadding,\n    McTreeSelection,\n    McTreeNodeOption\n];\n\n@NgModule({\n    imports: [CommonModule, CdkTreeModule],\n    exports: MC_TREE_DIRECTIVES,\n    declarations: MC_TREE_DIRECTIVES\n})\nexport class McTreeModule {}\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { FlatTreeControl, ITreeControl } from '@ptsecurity/cdk/tree';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class McTreeFlattener<T, F> {\n\n    constructor(public transformFunction: (node: T, level: number) => F,\n                public getLevel: (node: F) => number,\n                public isExpandable: (node: F) => boolean,\n                public getChildren: (node: T) => Observable<T[]>) {\n    }\n\n    _flattenNode(node: T, level: number,\n                 resultNodes: F[], parentMap: boolean[]): F[] {\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n\n        if (this.isExpandable(flatNode)) {\n            this.getChildren(node).pipe(take(1)).subscribe((children) => {\n                children.forEach((child, index) => {\n                    const childParentMap: boolean[] = parentMap.slice();\n                    childParentMap.push(index !== children.length - 1);\n                    this._flattenNode(child, level + 1, resultNodes, childParentMap);\n                });\n            });\n        }\n\n        return resultNodes;\n    }\n\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n    flattenNodes(structuredData: T[]): F[] {\n        const resultNodes: F[] = [];\n        structuredData.forEach((node) => this._flattenNode(node, 0, resultNodes, []));\n\n        return resultNodes;\n    }\n\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n    expandFlattenedNodes(nodes: F[], treeControl: ITreeControl<F>): F[] {\n        const results: F[] = [];\n        const currentExpand: boolean[] = [];\n        currentExpand[0] = true;\n\n        nodes.forEach((node) => {\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n\n            if (expand) { results.push(node); }\n\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        });\n\n        return results;\n    }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `McTree`.\n * The nested tree nodes of type `T` are flattened through `MсTreeFlattener`, and converted\n * to type `F` for `McTree` to consume.\n */\nexport class McTreeFlatDataSource<T, F> extends DataSource<F> {\n    _flattenedData = new BehaviorSubject<F[]>([]);\n\n    _expandedData = new BehaviorSubject<F[]>([]);\n\n    _data: BehaviorSubject<T[]>;\n\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n        this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n        this.treeControl.dataNodes = this._flattenedData.value;\n    }\n\n    constructor(private treeControl: FlatTreeControl<F>,\n                private treeFlattener: McTreeFlattener<T, F>,\n                initialData: T[] = []) {\n        super();\n        this._data = new BehaviorSubject<T[]>(initialData);\n    }\n\n    connect(collectionViewer: ICollectionViewer): Observable<F[]> {\n        const changes = [\n            collectionViewer.viewChange,\n            this.treeControl.expansionModel.onChange!,\n            this._flattenedData\n        ];\n\n        return merge(...changes).pipe(map(() => {\n            this._expandedData.next(\n                this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n\n            return this._expandedData.value;\n        }));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by ITreeControl and each non-leaf node.\n */\nexport class McTreeNestedDataSource<T> extends DataSource<T> {\n    _data = new BehaviorSubject<T[]>([]);\n\n    /**\n     * Data for the nested tree\n     */\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n    }\n\n    connect(collectionViewer: ICollectionViewer): Observable<T[]> {\n        return merge(...[collectionViewer.viewChange, this._data])\n            .pipe(map(() => this.data));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import {\n    ElementRef,\n    QueryList,\n    ContentChildren,\n    Component,\n    ChangeDetectionStrategy,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { mixinColor, CanColor } from '@ptsecurity/mosaic/core';\nimport { McIcon } from '@ptsecurity/mosaic/icon';\n\n\nexport class McTagBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McTagMixinBase = mixinColor(McTagBase);\n\n\n@Component({\n    selector: 'mc-tag',\n    templateUrl: 'tag.partial.html',\n    styleUrls: ['./tag.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'mc-tag' },\n    inputs: ['color']\n})\nexport class McTag extends _McTagMixinBase implements CanColor {\n    @ContentChildren(McIcon) contentChildren: QueryList<McIcon>;\n\n    nativeElement: HTMLElement;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        this._addClassModificatorForIcons();\n    }\n\n    _addClassModificatorForIcons() {\n        const icons = this.contentChildren.map((item) => item._elementRef.nativeElement);\n\n        if (icons.length === 1) {\n            const iconElement = icons[0];\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-left-icon');\n                }\n\n                if (iconElement.previousSibling) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-right-icon');\n                }\n            }\n        } else if (icons.length > 1) {\n            const firstIconElement = icons[0];\n            const secondIconElement = icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McTag } from './tag.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McTag\n    ],\n    declarations: [\n        McTag\n    ]\n})\nexport class McTagModule {}\n","import {\n    animate,\n    AnimationTriggerMetadata,\n    state,\n    style,\n    transition,\n    trigger,\n    query,\n    animateChild,\n    group\n} from '@angular/animations';\n\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const mcSelectAnimations: {\n    readonly transformPanel: AnimationTriggerMetadata;\n    readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0)',\n            minWidth: '100%',\n            opacity: 0\n        })),\n        transition('void => *', group([\n            query('@fadeInContent', animateChild()),\n            animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n        ])),\n        transition('* => void', [\n            animate('250ms 100ms linear', style({ opacity: 0 }))\n        ])\n    ]),\n\n    /**\n     * This animation fades in the background color and text content of the\n     * select's options. It is time delayed to occur 100ms after the overlay\n     * panel has transformed in.\n     */\n    fadeInContent: trigger('fadeInContent', [\n        state('showing', style({ opacity: 1 })),\n        transition('void => showing', [\n            style({ opacity: 0 }),\n            animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformPanel = mcSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInContent = mcSelectAnimations.fadeInContent;\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { McOptionModule } from '@ptsecurity/mosaic/core';\nimport { McFormFieldModule } from '@ptsecurity/mosaic/form-field';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\nimport { McTagModule } from '@ptsecurity/mosaic/tag';\n\nimport { MC_SELECT_SCROLL_STRATEGY_PROVIDER, McSelect, McSelectTrigger } from './select.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        McOptionModule,\n        McIconModule,\n        McTagModule\n    ],\n    exports: [McFormFieldModule, McSelect, McSelectTrigger, McOptionModule, CommonModule],\n    declarations: [McSelect, McSelectTrigger],\n    providers: [MC_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class McSelectModule {}\n","import { Version } from '@angular/core';\n\n\nexport const VERSION = new Version('0.0.1-ddb5446');\n","import { fromEvent, Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nimport {\n    AfterViewInit,\n    Component, Directive,\n    ElementRef,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    ViewEncapsulation,\n    ContentChild,\n    TemplateRef,\n    ChangeDetectorRef,\n    ChangeDetectionStrategy,\n    ViewChild\n} from '@angular/core';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { SPACE } from '@ptsecurity/cdk/keycodes';\nimport { Platform } from '@ptsecurity/cdk/platform';\nimport { CanDisable, mixinDisabled } from '@ptsecurity/mosaic/core';\n\n\nconst COLLAPSED_CLASS: string = 'mc-navbar-collapsed-title';\nconst MC_ICON = 'mc-icon';\nconst MC_NAVBAR = 'mc-navbar';\nconst MC_NAVBAR_CONTAINER = 'mc-navbar-container';\nconst MC_NAVBAR_ITEM = 'mc-navbar-item';\nconst MC_NAVBAR_BRAND = 'mc-navbar-brand';\nconst MC_NAVBAR_TITLE = 'mc-navbar-title';\nconst MC_NAVBAR_LOGO = 'mc-navbar-logo';\n\nexport type McNavbarContainerPositionType = 'left' | 'right';\n\nexport interface IMcNavbarDropdownItem {\n    link?: string;\n    text: string;\n}\n\n@Directive({\n    selector: MC_NAVBAR_LOGO,\n    host: {\n        class: MC_NAVBAR_LOGO\n    }\n})\nexport class McNavbarLogo {}\n\n@Directive({\n    selector: MC_NAVBAR_BRAND,\n    host: {\n        class: MC_NAVBAR_BRAND\n    }\n})\nexport class McNavbarBrand {}\n\n@Directive({\n    selector: MC_NAVBAR_TITLE,\n    host: {\n        class: MC_NAVBAR_TITLE\n    }\n})\nexport class McNavbarTitle {}\n\nexport class McNavbarItemBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McNavbarMixinBase = mixinDisabled(McNavbarItemBase);\n\n@Component({\n    selector: MC_NAVBAR_ITEM,\n    template: `\n        <a\n            [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\n            (click)=\"handleClickByItem()\"\n            (keydown)=\"handleKeydown($event)\"\n            class=\"mc-navbar-item\"\n        >\n            <ng-content></ng-content>\n            <i *ngIf=\"hasDropdownContent\" mc-icon=\"mc-angle-M_16\"></i>\n        </a>\n        <ul\n            #dropdownContent\n            *ngIf=\"hasDropdownContent\"\n            [ngClass]=\"{ 'is-collapsed': isCollapsed }\"\n            class=\"mc-navbar-dropdown\"\n        >\n            <li\n                *ngFor=\"let item of dropdownItems\"\n                (click)=\"handleClickByDropdownItem()\"\n                class=\"mc-navbar-dropdown-item\"\n            >\n                <ng-container *ngIf=\"dropdownItemTmpl\">\n                    <ng-container *ngTemplateOutlet=\"dropdownItemTmpl; context: { $implicit: item }\"></ng-container>\n                </ng-container>\n                <a\n                    *ngIf=\"!dropdownItemTmpl\"\n                    [attr.href]=\"item.link\"\n                    [ngClass]=\"{ 'is-active': isActiveDropdownLink(item.link) }\"\n                    class=\"mc-navbar-dropdown-link\"\n                >{{ item.text }}</a>\n            </li>\n        </ul>\n    `,\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': '-1'\n    }\n})\nexport class McNavbarItem extends _McNavbarMixinBase implements OnInit, AfterViewInit, OnDestroy, CanDisable {\n\n    @Input()\n    tabIndex: number = 0;\n\n    @Input()\n    dropdownItems: IMcNavbarDropdownItem[] = [];\n\n    @Input()\n    set collapsedTitle(value: string) {\n        this.elementRef.nativeElement.setAttribute('computedTitle', encodeURI(value));\n    }\n\n    @ContentChild('dropdownItemTmpl', { read: TemplateRef })\n    dropdownItemTmpl: TemplateRef<IMcNavbarDropdownItem>;\n\n    @ViewChild('dropdownContent', { read: ElementRef })\n    dropdownContent: ElementRef;\n\n    get hasDropdownContent() {\n        return this.dropdownItems.length > 0;\n    }\n\n    isCollapsed: boolean = true;\n\n    private _subscription: Subscription = new Subscription();\n    private _focusMonitor$: Observable<FocusOrigin>;\n\n    private get _dropdownElements(): HTMLElement[] {\n        return this.dropdownContent ? this.dropdownContent.nativeElement.querySelectorAll('li > *') : [];\n    }\n\n    constructor(\n        public  elementRef: ElementRef,\n        private _focusMonitor: FocusMonitor,\n        private _platform: Platform,\n        private _cdRef: ChangeDetectorRef\n    ) {\n        super(elementRef);\n    }\n\n    ngOnInit() {\n        this.denyClickIfDisabled();\n\n        this._focusMonitor$ = this._focusMonitor.monitor(this.elementRef.nativeElement, true);\n\n        if (this.hasDropdownContent) {\n            this.listenClickOutside();\n        }\n    }\n\n    ngAfterViewInit() {\n        if (!this.hasDropdownContent) {\n            return;\n        }\n\n        this.startListenFocusDropdownItems();\n    }\n\n    ngOnDestroy() {\n        this._subscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n        this.stopListenFocusDropdownItems();\n    }\n\n    isActiveDropdownLink(link: string): boolean {\n        if (!this._platform.isBrowser) {\n            return false;\n        }\n\n        return window.location.href.indexOf(link) >= 0;\n    }\n\n    handleClickByItem() {\n        this.toggleDropdown();\n    }\n\n    handleKeydown($event: KeyboardEvent) {\n        const isNavbarItem = ($event.target as HTMLElement).classList.contains(MC_NAVBAR_ITEM);\n\n        // tslint:disable-next-line\n        if (this.hasDropdownContent && $event.keyCode === SPACE && isNavbarItem) {\n            this.toggleDropdown();\n        }\n    }\n\n    handleClickByDropdownItem() {\n        this.forceCloseDropdown();\n    }\n\n    private listenClickOutside() {\n        this._subscription.add(\n            this._focusMonitor$.subscribe((origin) => {\n                if (origin === null) {\n                    this.forceCloseDropdown();\n                }\n            })\n        );\n    }\n\n    private toggleDropdown() {\n        this.isCollapsed = !this.isCollapsed;\n    }\n\n    private forceCloseDropdown() {\n        this.isCollapsed = true;\n        this._cdRef.detectChanges();\n    }\n\n    private startListenFocusDropdownItems() {\n        this._dropdownElements.forEach((el) => {\n            this._focusMonitor.monitor(el, true);\n        });\n    }\n\n    private stopListenFocusDropdownItems() {\n        this._dropdownElements.forEach((el) => {\n            this._focusMonitor.stopMonitoring(el);\n        });\n    }\n\n    // This method is required due to angular 2 issue https://github.com/angular/angular/issues/11200\n    private denyClickIfDisabled() {\n        const events: Event[] = this.elementRef.nativeElement.eventListeners('click');\n\n        events.forEach((event) => this.elementRef.nativeElement.removeEventListener('click', event));\n\n        this.elementRef.nativeElement.addEventListener('click', (event: MouseEvent) => {\n            if (this.elementRef.nativeElement.hasAttribute('disabled')) {\n                event.stopImmediatePropagation();\n            }\n        }, true);\n\n        events.forEach((event) => this.elementRef.nativeElement.addEventListener('click', event));\n    }\n}\n\n@Directive({\n    selector: MC_NAVBAR_CONTAINER\n})\nexport class McNavbarContainer {\n    @Input()\n    position: McNavbarContainerPositionType = 'left';\n\n    @HostBinding('class')\n    get cssClasses(): string {\n        return this.position === 'left' ? 'mc-navbar-left' : 'mc-navbar-right';\n    }\n}\n\nclass CollapsibleItem {\n    private _collapsed: boolean = false;\n\n    constructor(\n        public element: HTMLElement,\n        public width: number\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        this._collapsed = collapsed;\n\n        this.updateCollapsedClass();\n    }\n\n    private updateCollapsedClass() {\n        if (this._collapsed) {\n            this.element.classList.add(COLLAPSED_CLASS);\n        } else {\n            this.element.classList.remove(COLLAPSED_CLASS);\n        }\n\n    }\n}\n\nclass CachedItemWidth {\n\n    get canCollapse(): boolean {\n        return this.itemsForCollapse.length > 0;\n    }\n\n    private _collapsedItemsWidth: number;\n\n    get collapsedItemsWidth(): number {\n        if (this._collapsedItemsWidth !== undefined) {\n            return this._collapsedItemsWidth;\n        }\n\n        this.calculateAndCacheCollapsedItemsWidth();\n\n        return this._collapsedItemsWidth;\n    }\n\n    constructor(\n        public element: HTMLElement,\n        public width: number,\n        public itemsForCollapse: CollapsibleItem[] = []\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        if (this.itemsForCollapse.length > 0) {\n            this.updateTitle(collapsed);\n        }\n\n        this.itemsForCollapse.forEach((item) => item.processCollapsed(collapsed));\n    }\n\n    private calculateAndCacheCollapsedItemsWidth() {\n        this._collapsedItemsWidth = this.itemsForCollapse\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getTitle(): string {\n        const computedTitle = this.element.getAttribute('computedTitle');\n\n        return computedTitle\n            ? decodeURI(computedTitle)\n            : (this.itemsForCollapse.length > 0 ? this.itemsForCollapse[0].element.innerText : '');\n    }\n\n    private updateTitle(collapsed: boolean) {\n        if (collapsed) {\n            this.element.setAttribute('title', this.getTitle());\n        } else {\n            this.element.removeAttribute('title');\n        }\n    }\n}\n\n\n@Component({\n    selector: MC_NAVBAR,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    template: `\n        <nav class=\"mc-navbar\">\n            <ng-content select=\"[${MC_NAVBAR_CONTAINER}],${MC_NAVBAR_CONTAINER}\"></ng-content>\n        </nav>\n    `,\n    styleUrls: ['./navbar.css'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class McNavbar implements AfterViewInit, OnDestroy {\n\n    private readonly forceRecalculateItemsWidth: boolean = false;\n    private readonly resizeDebounceInterval: number = 100;\n    private readonly firstLevelElement: string = MC_NAVBAR_CONTAINER;\n    private readonly secondLevelElements: string[] = [\n        MC_NAVBAR_ITEM,\n        MC_NAVBAR_BRAND,\n        MC_NAVBAR_TITLE\n    ];\n\n    private _totalItemsWidths: number;\n    private _itemsWidths: CachedItemWidth[];\n\n    private get maxAllowedWidth(): number {\n        return this._elementRef.nativeElement.querySelector('nav').getBoundingClientRect().width;\n    }\n\n    private get itemsWidths(): CachedItemWidth[] {\n        if (this._itemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._itemsWidths;\n        }\n\n        this.calculateAndCacheItemsWidth();\n\n        return this._itemsWidths;\n    }\n\n    private get totalItemsWidth(): number {\n        if (this._totalItemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._totalItemsWidths;\n        }\n\n        this.calculateAndCacheTotalItemsWidth();\n\n        return this._totalItemsWidths;\n    }\n\n    private _resizeSubscription: Subscription;\n\n    constructor(\n        private _elementRef: ElementRef\n    ) {\n        const resizeObserver = fromEvent(window, 'resize')\n            .pipe(debounceTime(this.resizeDebounceInterval));\n\n        this._resizeSubscription = resizeObserver.subscribe(this.updateCollapsed.bind(this));\n    }\n\n    updateCollapsed(): void {\n        let collapseDelta = this.totalItemsWidth - this.maxAllowedWidth;\n\n        for (let i = this.itemsWidths.length - 1; i >= 0; i--) {\n            const item = this.itemsWidths[i];\n\n            if (!item.canCollapse) {\n                continue;\n            }\n\n            item.processCollapsed(collapseDelta > 0);\n            collapseDelta -= item.collapsedItemsWidth;\n        }\n    }\n\n    ngAfterViewInit(): void {\n        // Note: this wait is required for loading and rendering fonts for icons;\n        // unfortunately we cannot control font rendering\n        setTimeout(() => this.updateCollapsed(), 0);\n    }\n\n    ngOnDestroy() {\n        this._resizeSubscription.unsubscribe();\n    }\n\n    private calculateAndCacheTotalItemsWidth() {\n        this._totalItemsWidths = this.itemsWidths\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getOuterElementWidth(element: HTMLElement): number {\n        const baseWidth  = element.getBoundingClientRect().width;\n        const marginRight = parseInt(getComputedStyle(element).getPropertyValue('margin-right'));\n        const marginLeft = parseInt(getComputedStyle(element).getPropertyValue('margin-left'));\n\n        return baseWidth + marginRight + marginLeft;\n    }\n\n    private calculateAndCacheItemsWidth() {\n        const allItemsSelector = this.secondLevelElements\n            .map((e: string) => `${this.firstLevelElement}>${e}`);\n        const allItems: HTMLElement[] = Array.from(this._elementRef.nativeElement.querySelectorAll(allItemsSelector));\n\n        this._itemsWidths = allItems\n            .map((el) => new CachedItemWidth(el, this.getOuterElementWidth(el), this.getItemsForCollapse(el)));\n    }\n\n    private getItemsForCollapse(element: HTMLElement): CollapsibleItem[] {\n        const icon = element.querySelector(`[${MC_ICON}],${MC_NAVBAR_LOGO},[${MC_NAVBAR_LOGO}]`);\n\n        if (!icon) {\n            return [];\n        }\n\n        return Array.from(element.querySelectorAll(MC_NAVBAR_TITLE))\n            .map((el) => new CollapsibleItem(<HTMLElement> el, el.getBoundingClientRect().width));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport {\n    McNavbar,\n    McNavbarContainer,\n    McNavbarItem,\n    McNavbarTitle,\n    McNavbarBrand,\n    McNavbarLogo\n} from './navbar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        McIconModule\n    ],\n    exports: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ],\n    declarations: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ]\n})\nexport class McNavbarModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressBarMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressBarBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressBarMixinBase = mixinColor(McProgressBarBase);\n\n@Component({\n    selector: 'mc-progress-bar',\n    templateUrl: './progress-bar.component.html',\n    styleUrls: ['./progress-bar.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-bar',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressBar extends _McProgressBarMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-bar-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressBarMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McProgressBar\n} from './progress-bar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressBar\n    ],\n    declarations: [\n        McProgressBar\n    ]\n})\nexport class McProgressBarModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressSpinnerBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressPinnerMixinBase = mixinColor(McProgressSpinnerBase);\n\nconst MAX_DASH_ARRAY = 273;\n\n@Component({\n    selector: 'mc-progress-spinner',\n    templateUrl: './progress-spinner.component.html',\n    styleUrls: ['./progress-spinner.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-spinner',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressSpinner extends _McProgressPinnerMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-spinner-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressSpinnerMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n\n    get dashOffsetPercent(): string {\n        return `${MAX_DASH_ARRAY - this.percentage * MAX_DASH_ARRAY}%`;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McProgressSpinner } from './progress-spinner.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressSpinner\n    ],\n    declarations: [\n        McProgressSpinner\n    ]\n})\nexport class McProgressSpinnerModule {}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef,\n    Input, OnDestroy, OnInit, Optional, Output, QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { UniqueSelectionDispatcher } from '@ptsecurity/cdk/collections';\n\nimport {\n    CanColor,\n    CanDisable,\n    HasTabIndex,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/** Change event object emitted by McRadio. */\nexport class McRadioChange {\n    constructor(\n        /** The McRadioButton that emits the change event. */\n        public source: McRadioButton,\n        /** The value of the McRadioButton. */\n        public value: any) {}\n}\n\n// Boilerplate for applying mixins to McRadioGroup.\n/** @docs-private */\nexport class McRadioGroupBase {}\nexport const _McRadioGroupMixinBase = mixinDisabled(McRadioGroupBase);\n\n/**\n * Provider Expression that allows mc-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McRadioGroup),\n    multi: true\n};\n\n@Directive({\n    selector: 'mc-radio-group',\n    exportAs: 'mcRadioGroup',\n    providers: [MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n    host: {\n        role: 'radiogroup',\n        class: 'mc-radio-group'\n    },\n    inputs: ['disabled']\n})\nexport class McRadioGroup extends _McRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    @Input()\n    get name(): string { return this._name; }\n    set name(value: string) {\n        this._name = value;\n        this.updateRadioButtonNames();\n    }\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this.markRadiosForCheck();\n    }\n\n    /** Value of the radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n\n            this.updateSelectedRadioFromValue();\n            this.checkSelectedRadioButton();\n        }\n    }\n\n    /** Whether the radio button is selected. */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: McRadioButton | null) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this.checkSelectedRadioButton();\n    }\n\n    /** Whether the radio group is disabled */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /** Whether the radio group is required */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** Child radio buttons. */\n    @ContentChildren(forwardRef(() => McRadioButton), { descendants: true })\n    _radios: QueryList<McRadioButton>;\n\n    /**\n     * Selected value for group. Should equal the value of the selected radio button if there *is*\n     * a corresponding radio button with a matching value. If there is *not* such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    private _value: any = null;\n\n    /** The HTML name attribute applied to radio buttons in this group. */\n    private _name: string = `mc-radio-group-${nextUniqueId++}`;\n\n    /** The currently selected radio button. Should match value. */\n    private _selected: McRadioButton | null = null;\n\n    /** Whether the `value` has been set to its initial value. */\n    private _isInitialized: boolean = false;\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    private _labelPosition: 'before' | 'after' = 'after';\n\n    /** Whether the radio group is disabled. */\n    private _disabled: boolean = false;\n\n    /** Whether the radio group is required. */\n    private _required: boolean = false;\n\n    constructor(\n        private readonly _changeDetector: ChangeDetectorRef\n    ) {\n        super();\n    }\n\n    /** The method to be called in order to update ngModel */\n    // tslint:disable-next-line\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @docs-private\n     */\n    // tslint:disable-next-line\n    onTouched: () => any = () => {};\n\n    checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on McRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the McRadioGroup.\n        this._isInitialized = true;\n    }\n\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        if (this._isInitialized) {\n            this.change.emit(new McRadioChange(this._selected!, this._value));\n        }\n    }\n\n    markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach((radio) => radio.markForCheck());\n        }\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n\n    private updateRadioButtonNames(): void {\n        if (this._radios) {\n            this._radios.forEach((radio) => {\n                radio.name = this.name;\n            });\n        }\n    }\n\n    /** Updates the `selected` radio button from the internal _value state. */\n    private updateSelectedRadioFromValue(): void {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n        if (this._radios != null && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach((radio) => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n}\n\n\n// Boilerplate for applying mixins to McRadioButton.\n/** @docs-private */\nexport class McRadioButtonBase {\n    // Since the disabled property is manually defined for the McRadioButton and isn't set up in\n    // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n    // defined to properly work.\n    disabled: boolean;\n\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McRadioButtonMixinBase =\n    mixinColor(mixinTabIndex(McRadioButtonBase));\n\n\n@Component({\n    selector: 'mc-radio-button',\n    templateUrl: 'radio.component.html',\n    styleUrls: ['radio.css'],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    exportAs: 'mcRadioButton',\n    host: {\n        class: 'mc-radio-button',\n        '[attr.id]': 'id',\n        '[class.mc-radio-checked]': 'checked',\n        '[class.mc-radio-disabled]': 'disabled',\n        '(focus)': '_inputElement.nativeElement.focus()'\n    }\n})\nexport class McRadioButton extends _McRadioButtonMixinBase\n    implements OnInit, OnDestroy, CanColor, HasTabIndex {\n\n    private readonly _uniqueId: string = `mc-radio-${++nextUniqueId}`;\n\n    /* tslint:disable:member-ordering */\n\n    /** The unique ID for the radio button. */\n    @Input() id: string = this._uniqueId;\n\n    /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n    @Input() name: string;\n\n    /** Used to set the 'aria-label' attribute on the underlying input element. */\n    @Input('aria-label') ariaLabel: string;\n\n    /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n    @Input('aria-labelledby') ariaLabelledby: string;\n\n    /** The 'aria-describedby' attribute is read after the element's label and field type. */\n    @Input('aria-describedby') ariaDescribedby: string;\n\n    /** Whether this radio button is checked. */\n    @Input()\n    get checked(): boolean { return this._checked; }\n    set checked(value: boolean) {\n        const newCheckedState = toBoolean(value);\n\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** The value of this radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(value: any) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup != null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n\n    /** Whether the radio button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n    }\n    set disabled(value: boolean) {\n        const newDisabledState = toBoolean(value);\n\n        if (this._disabled !== newDisabledState) {\n\n            this._disabled = newDisabledState;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** Whether the radio button is required. */\n    @Input()\n    get required(): boolean {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    private _labelPosition: 'before' | 'after';\n\n    /** The native `<input type=radio>` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** The parent radio group. May or may not be present. */\n    radioGroup: McRadioGroup;\n\n    @Input()\n    isFocused: boolean = false;\n\n    /** ID of the native input element inside `<mc-radio-button>` */\n    get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n    /** Whether this radio is checked. */\n    private _checked: boolean = false;\n\n    /** Whether this radio is disabled. */\n    private _disabled: boolean;\n\n    /** Whether this radio is required. */\n    private _required: boolean;\n\n    /** Value assigned to this radio. */\n    private _value: any = null;\n\n    /** Unregister function for _radioDispatcher */\n    // tslint:disable-next-line\n    private readonly removeUniqueSelectionListener: () => void = () => {};\n\n    constructor(\n        @Optional() radioGroup: McRadioGroup,\n        elementRef: ElementRef,\n        private readonly _changeDetector: ChangeDetectorRef,\n        private readonly _radioDispatcher: UniqueSelectionDispatcher\n    ) {\n\n        super(elementRef);\n\n        this.radioGroup = radioGroup;\n\n        this.removeUniqueSelectionListener =\n            _radioDispatcher.listen((id: string, name: string) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n\n    ngOnDestroy() {\n        this.removeUniqueSelectionListener();\n    }\n\n    /** Focuses the radio button. */\n    // tslint:disable-next-line\n    focus(): void {}\n\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n\n    onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n\n    onInputChange(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this.emitChangeEvent();\n\n        if (this.radioGroup) {\n            this.radioGroup.controlValueAccessorChangeFn(this.value);\n            this.radioGroup.touch();\n            if (groupValueChanged) {\n                this.radioGroup.emitChangeEvent();\n            }\n        }\n    }\n\n    /** Dispatch change event with current value. */\n    private emitChangeEvent(): void {\n        this.change.emit(new McRadioChange(this, this._value));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McRadioButton, McRadioGroup } from './radio.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule],\n    exports: [McRadioGroup, McRadioButton],\n    declarations: [McRadioGroup, McRadioButton]\n})\nexport class McRadioModule {\n}\n","import { Directive, Input } from '@angular/core';\n\nimport { CdkTreeNodeDef } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodeDef]',\n    inputs: ['when: mcTreeNodeDefWhen'],\n    providers: [{ provide: CdkTreeNodeDef, useExisting: McTreeNodeDef }]\n})\nexport class McTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n    @Input('mcTreeNode') data: T;\n}\n","import { Directive, Input, OnInit } from '@angular/core';\nimport { CdkTreeNodePadding } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodePadding]',\n    providers: [{ provide: CdkTreeNodePadding, useExisting: McTreeNodePadding }]\n})\nexport class McTreeNodePadding<T> extends CdkTreeNodePadding<T> implements OnInit {\n    get leftPadding(): number {\n        return (this._withIcon ? 0 : this._iconWidth) + this._baseLeftPadding;\n    }\n\n    _baseLeftPadding: number = 6;\n    _iconWidth: number = 20;\n    _indent: number = 16;\n\n    @Input('mcTreeNodePadding') level: number;\n\n    @Input('mcTreeNodePaddingIndent') indent: number;\n\n    _withIcon: boolean;\n\n    _paddingIndent(): string | null {\n        const nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)\n            ? this._tree.treeControl.getLevel(this._treeNode.data)\n            : null;\n\n        const level = this._level || nodeLevel;\n\n        return level ? `${(level * this._indent) + this.leftPadding}px` : `${this._baseLeftPadding}px`;\n    }\n\n    ngOnInit(): void {\n        this._withIcon = this._tree.treeControl.isExpandable(this._treeNode.data);\n        this._setPadding();\n    }\n}\n","// todo пока не делаем, перенесено из материала, но у нас в доках таких простых списков нет.\nimport {\n    AfterContentInit, ChangeDetectionStrategy, Component, ContentChildren, Directive, ElementRef, QueryList,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { McLine, McLineSetter } from '@ptsecurity/mosaic/core';\n\n\nexport class McListBase {}\n\n@Component({\n    selector: 'mc-list',\n    host: { class: 'mc-list' },\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McList extends McListBase {}\n\n\n/**\n * Directive whose purpose is to add the mc- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n    selector: '[mc-subheader], [mcSubheader]',\n    host: { class: 'mc-subheader' }\n})\nexport class McListSubheaderCssStyler {}\n\n\n// Boilerplate for applying mixins to McListItem.\nexport class McListItemBase {}\n\n@Component({\n    selector: 'mc-list-item, a[mc-list-item]',\n    host: {\n        class: 'mc-list-item',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()'\n    },\n    templateUrl: './list-item.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListItem extends McListItemBase implements AfterContentInit {\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    private _lineSetter: McLineSetter;\n\n    constructor(private _element: ElementRef) {\n        super();\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    _handleFocus() {\n        this._element.nativeElement.classList.add('mc-focused');\n    }\n\n    _handleBlur() {\n        this._element.nativeElement.classList.remove('mc-focused');\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLineModule } from '@ptsecurity/mosaic/core';\n\nimport { McListSelection, McListOption } from './list-selection.component';\nimport { McList, McListItem, McListSubheaderCssStyler } from './list.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        McLineModule\n    ],\n    exports: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ],\n    declarations: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ]\n})\nexport class McListModule {}\n","import {\n    Input,\n    Attribute,\n    Component,\n    ElementRef,\n    OnDestroy,\n    ViewEncapsulation,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef\n} from '@angular/core';\n\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport {\n    CanDisable,\n    HasTabIndex,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\nexport class McLinkBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\nexport const _McLinkBase = mixinTabIndex(mixinDisabled(McLinkBase));\n\n@Component({\n    selector: 'a.mc-link',\n    template: `<ng-content></ng-content>`,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcLink',\n    styleUrls: ['./link.css'],\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': 'tabIndex'\n    }\n})\n\nexport class McLink extends _McLinkBase implements OnDestroy, HasTabIndex, CanDisable {\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    private _disabled = false;\n\n    constructor(\n        @Attribute('tabindex') tabIndex: string,\n        public elementRef: ElementRef,\n        private _focusMonitor: FocusMonitor,\n        private _changeDetector: ChangeDetectorRef) {\n\n        super(elementRef);\n        this._focusMonitor.monitor(elementRef.nativeElement, true);\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this._getHostElement().focus();\n    }\n\n    _getHostElement() {\n        return this.elementRef.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLink } from './link.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule\n    ],\n    declarations: [McLink],\n    exports: [McLink]\n})\nexport class McLinkModule {}\n","import { Injectable, Optional, SkipSelf } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\n\nimport { McModalRef } from './modal-ref.class';\n\n\ninterface IRegisteredMeta {\n    modalRef: McModalRef;\n    afterOpenSubscription: Subscription;\n    afterCloseSubscription: Subscription;\n}\n\n@Injectable()\nexport class McModalControlService {\n\n    // Track singleton afterAllClose through over the injection tree\n    get afterAllClose(): Subject<void> {\n        return this.parentService ? this.parentService.afterAllClose : this.rootAfterAllClose;\n    }\n\n    // Track singleton openModals array through over the injection tree\n    get openModals(): McModalRef[] {\n        return this.parentService ? this.parentService.openModals : this.rootOpenModals;\n    }\n\n    // @ts-ignore\n    private rootOpenModals: McModalRef[] = this.parentService ? null : [];\n    // @ts-ignore\n    private rootAfterAllClose: Subject<void> = this.parentService ? null : new Subject<void>();\n    // @ts-ignore\n    private rootRegisteredMetaMap: Map<McModalRef, IRegisteredMeta> = this.parentService ? null : new Map();\n\n    // Registered modal for later usage\n    private get registeredMetaMap(): Map<McModalRef, IRegisteredMeta> {\n        return this.parentService ? this.parentService.registeredMetaMap : this.rootRegisteredMetaMap;\n    }\n\n    constructor(\n        @Optional() @SkipSelf() private parentService: McModalControlService) {\n    }\n\n    // Register a modal to listen its open/close\n    registerModal(modalRef: McModalRef): void {\n        if (!this.hasRegistered(modalRef)) {\n            const afterOpenSubscription = modalRef.afterOpen.subscribe(() => this.openModals.push(modalRef));\n            const afterCloseSubscription = modalRef.afterClose.subscribe(() => this.removeOpenModal(modalRef));\n\n            this.registeredMetaMap.set(modalRef, {modalRef, afterOpenSubscription, afterCloseSubscription});\n        }\n    }\n\n    hasRegistered(modalRef: McModalRef): boolean {\n        return this.registeredMetaMap.has(modalRef);\n    }\n\n    // Close all registered opened modals\n    closeAll(): void {\n        let i = this.openModals.length;\n\n        while (i--) {\n            this.openModals[i].close();\n        }\n    }\n\n    private removeOpenModal(modalRef: McModalRef): void {\n        const index = this.openModals.indexOf(modalRef);\n\n        if (index > -1) {\n            this.openModals.splice(index, 1);\n\n            if (!this.openModals.length) {\n                this.afterAllClose.next();\n            }\n        }\n    }\n}\n","import { Observable } from 'rxjs';\n\nimport { McModalComponent } from './modal.component';\n\n\n/**\n * API class that public to users to handle the modal instance.\n * McModalRef is aim to avoid accessing to the modal instance directly by users.\n */\nexport abstract class McModalRef<T = any, R = any> {\n    abstract afterOpen: Observable<void>;\n    abstract afterClose: Observable<R>;\n\n    abstract open(): void;\n\n    abstract close(result?: R): void;\n\n    abstract destroy(result?: R): void;\n\n    /**\n     * Trigger the nzOnOk/nzOnCancel by manual\n     */\n    abstract triggerOk(): void;\n\n    abstract triggerCancel(): void;\n\n    // /**\n    //  * Return the ComponentRef of nzContent when specify nzContent as a Component\n    //  * Note: this method may return undefined if the Component has not ready yet.\n    //    (it only available after Modal's ngOnInit)\n    //  */\n    // abstract getContentComponentRef(): ComponentRef<{}>;\n\n    /**\n     * Return the component instance of nzContent when specify nzContent as a Component\n     * Note: this method may return undefined if the Component has not ready yet.\n     * (it only available after Modal's ngOnInit)\n     */\n    abstract getContentComponent(): T;\n\n    /**\n     * Get the dom element of this Modal\n     */\n    abstract getElement(): HTMLElement;\n\n    /**\n     * Get the instance of the Modal itself\n     */\n    abstract getInstance(): McModalComponent;\n}\n","export interface IClickPosition {\n    x: number;\n    y: number;\n}\n\nexport class ModalUtil {\n    private lastPosition: IClickPosition;\n\n    constructor(private document: Document) {\n        this.lastPosition = {x: -1, y: -1};\n        this.listenDocumentClick();\n    }\n\n    getLastClickPosition(): IClickPosition {\n        return this.lastPosition;\n    }\n\n    listenDocumentClick(): void {\n        this.document.addEventListener('click', (event: MouseEvent) => {\n            this.lastPosition = {x: event.clientX, y: event.clientY};\n        });\n    }\n}\n\nexport default new ModalUtil(document);\n","import { DOCUMENT } from '@angular/common';\nimport {\n    AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef,\n    Component,\n    ComponentFactoryResolver,\n    ComponentRef,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Injector,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    Renderer2,\n    SimpleChanges,\n    TemplateRef,\n    Type,\n    ViewChild,\n    ViewContainerRef, ViewEncapsulation\n} from '@angular/core';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { Overlay, OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { McMeasureScrollbarService } from '@ptsecurity/mosaic/core';\nimport { Observable } from 'rxjs';\n\nimport { McModalControlService } from './modal-control.service';\nimport { McModalRef } from './modal-ref.class';\n// tslint:disable-next-line\nimport ModalUtil from './modal-util';\nimport { IModalButtonOptions, IModalOptions, ModalType, OnClickCallback } from './modal.type';\n\n\n// Duration when perform animations (ms)\nexport const MODAL_ANIMATE_DURATION = 200;\n\ntype AnimationState = 'enter' | 'leave' | null;\n\n@Component({\n    selector: 'mc-modal',\n    templateUrl: './modal.component.html',\n    styleUrls: ['./modal.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        '(keydown)': 'onKeyDown($event)'\n    }\n})\nexport class McModalComponent<T = any, R = any> extends McModalRef<T, R>\n    implements OnInit, OnChanges, AfterViewInit, OnDestroy, IModalOptions {\n\n    // tslint:disable-next-line:no-any\n    @Input() mcModalType: ModalType = 'default';\n    // If not specified, will use <ng-content>\n    @Input() mcContent: string | TemplateRef<{}> | Type<T>;\n    // available when mcContent is a component\n    @Input() mcComponentParams: object;\n    // Default Modal ONLY\n    @Input() mcFooter: string | TemplateRef<{}> | IModalButtonOptions<T>[];\n\n    @Input()\n    get mcVisible() { return this._mcVisible; }\n    set mcVisible(value) { this._mcVisible = value; }\n    _mcVisible = false;\n\n    @Output() mcVisibleChange = new EventEmitter<boolean>();\n\n    @Input() mcZIndex: number = 1000;\n    @Input() mcWidth: number | string = 480;\n    @Input() mcWrapClassName: string;\n    @Input() mcClassName: string;\n    @Input() mcStyle: object;\n    @Input() mcTitle: string | TemplateRef<{}>;\n    @Input() mcCloseByESC: boolean = true;\n\n    @Input()\n    get mcClosable() { return this._mcClosable; }\n    set mcClosable(value) { this._mcClosable = value; }\n    _mcClosable = true;\n\n    @Input()\n    get mcMask() { return this._mcMask; }\n    set mcMask(value) { this._mcMask = value; }\n    _mcMask = true;\n\n    @Input()\n    get mcMaskClosable() { return this._mcMaskClosable; }\n    set mcMaskClosable(value) { this._mcMaskClosable = value; }\n    _mcMaskClosable = true;\n\n    @Input() mcMaskStyle: object;\n    @Input() mcBodyStyle: object;\n\n    // Trigger when modal open(visible) after animations\n    @Output() mcAfterOpen = new EventEmitter<void>();\n    // Trigger when modal leave-animation over\n    @Output() mcAfterClose = new EventEmitter<R>();\n\n    // --- Predefined OK & Cancel buttons\n    @Input() mcOkText: string;\n    @Input() mcOkType = 'primary';\n\n    @Input()\n    get mcOkLoading() { return this._mcOkLoading; }\n    set mcOkLoading(value) { this._mcOkLoading = value; }\n    _mcOkLoading = false;\n\n    @Input() @Output() mcOnOk: EventEmitter<T> | OnClickCallback<T> = new EventEmitter<T>();\n    // Only aim to focus the ok button that needs to be auto focused\n    @ViewChild('autoFocusButtonOk', {read: ElementRef}) autoFocusButtonOk: ElementRef;\n    @Input() mcCancelText: string;\n\n    @Input()\n    get mcCancelLoading() { return this._mcCancelLoading; }\n    set mcCancelLoading(value) { this._mcCancelLoading = value; }\n    _mcCancelLoading = false;\n\n    @Input() @Output() mcOnCancel: EventEmitter<T> | OnClickCallback<T> = new EventEmitter<T>();\n    @ViewChild('modalContainer') modalContainer: ElementRef;\n    @ViewChild('bodyContainer', {read: ViewContainerRef}) bodyContainer: ViewContainerRef;\n    maskAnimationClassMap: object;\n    modalAnimationClassMap: object;\n    // The origin point that animation based on\n    transformOrigin = '0px 0px 0px';\n\n    // Observable alias for mcAfterOpen\n    get afterOpen(): Observable<void> {\n        return this.mcAfterOpen.asObservable();\n    }\n\n    // Observable alias for mcAfterClose\n    get afterClose(): Observable<R> {\n        return this.mcAfterClose.asObservable();\n    }\n\n    get okText(): string {\n        return this.mcOkText;\n    }\n\n    get cancelText(): string {\n        return this.mcCancelText;\n    }\n\n    // Indicate whether this dialog should hidden\n    get hidden(): boolean {\n        return !this.mcVisible && !this.animationState;\n    }\n\n    // Handle the reference when using mcContent as Component\n    private contentComponentRef: ComponentRef<T>;\n    // Current animation state\n    private animationState: AnimationState;\n    private container: HTMLElement | OverlayRef;\n\n    constructor(\n        private overlay: Overlay,\n        private renderer: Renderer2,\n        private cfr: ComponentFactoryResolver,\n        private elementRef: ElementRef,\n        private viewContainer: ViewContainerRef,\n        private mcMeasureScrollbarService: McMeasureScrollbarService,\n        private modalControl: McModalControlService,\n        private changeDetector: ChangeDetectorRef,\n        @Inject(DOCUMENT) private document: any) {\n\n        super();\n    }\n\n    @Input() mcGetContainer: HTMLElement | OverlayRef | (() => HTMLElement | OverlayRef) = () => this.overlay.create();\n\n    ngOnInit() {\n\n        // Create component along without View\n        if (this.isComponent(this.mcContent)) {\n            this.createDynamicComponent(this.mcContent as Type<T>);\n        }\n\n        // Setup default button options\n        if (this.isModalButtons(this.mcFooter)) {\n            this.mcFooter = this.formatModalButtons(this.mcFooter as IModalButtonOptions<T>[]);\n        }\n\n        // Place the modal dom to elsewhere\n        this.container = typeof this.mcGetContainer === 'function' ? this.mcGetContainer() : this.mcGetContainer;\n        if (this.container instanceof HTMLElement) {\n            this.container.appendChild(this.elementRef.nativeElement);\n        } else if (this.container instanceof OverlayRef) {\n            // NOTE: only attach the dom to overlay, the view container is not changed actually\n            this.container.overlayElement.appendChild(this.elementRef.nativeElement);\n        }\n\n        // Register modal when afterOpen/afterClose is stable\n        this.modalControl.registerModal(this);\n    }\n\n    // [NOTE] NOT available when using by service!\n    // Because ngOnChanges never be called when using by service,\n    // here we can't support \"mcContent\"(Component) etc. as inputs that initialized dynamically.\n    // BUT: User also can change \"mcContent\" dynamically to trigger UI changes\n    // (provided you don't use \bComponent that needs initializations)\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.mcVisible) {\n            // Do not trigger animation while initializing\n            this.handleVisibleStateChange(this.mcVisible, !changes.mcVisible.firstChange);\n        }\n    }\n\n    ngAfterViewInit() {\n        // If using Component, it is the time to attach View while bodyContainer is ready\n        if (this.contentComponentRef) {\n            this.bodyContainer.insert(this.contentComponentRef.hostView);\n        }\n\n        if (this.autoFocusButtonOk) {\n            (this.autoFocusButtonOk.nativeElement as HTMLButtonElement).focus();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.container instanceof OverlayRef) {\n            this.container.dispose();\n        }\n    }\n\n    open() {\n        this.changeVisibleFromInside(true);\n    }\n\n    close(result?: R) {\n        this.changeVisibleFromInside(false, result);\n    }\n\n    // Destroy equals Close\n    destroy(result?: R) {\n        this.close(result);\n    }\n\n    triggerOk() {\n        this.onClickOkCancel('ok');\n    }\n\n    triggerCancel() {\n        this.onClickOkCancel('cancel');\n    }\n\n    getInstance(): McModalComponent {\n        return this;\n    }\n\n    getContentComponentRef(): ComponentRef<T> {\n        return this.contentComponentRef;\n    }\n\n    getContentComponent(): T {\n        return this.contentComponentRef && this.contentComponentRef.instance;\n    }\n\n    getElement(): HTMLElement {\n        return this.elementRef && this.elementRef.nativeElement;\n    }\n\n    onClickMask($event: MouseEvent) {\n        if (\n            this.mcMask &&\n            this.mcMaskClosable &&\n            ($event.target as HTMLElement).classList.contains('mc-modal-wrap') &&\n            this.mcVisible\n        ) {\n            this.onClickOkCancel('cancel');\n        }\n    }\n\n    // tslint:disable-next-line\n    isModalType(type: ModalType): boolean {\n        return this.mcModalType === type;\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n\n        if (event.keyCode === ESCAPE && this.container && (this.container instanceof OverlayRef)) {\n\n            this.close();\n            event.preventDefault();\n        }\n    }\n\n    // AoT\n    onClickCloseBtn() {\n        if (this.mcVisible) {\n            this.onClickOkCancel('cancel');\n        }\n    }\n\n    // AoT\n    // tslint:disable-next-line\n    onClickOkCancel(type: 'ok' | 'cancel') {\n        const trigger = { ok: this.mcOnOk, cancel: this.mcOnCancel }[type];\n        const loadingKey = { ok: 'mcOkLoading', cancel: 'mcCancelLoading' }[type];\n\n        if (trigger instanceof EventEmitter) {\n            trigger.emit(this.getContentComponent());\n        } else if (typeof trigger === 'function') {\n\n            const result = trigger(this.getContentComponent());\n            // Users can return \"false\" to prevent closing by default\n            const caseClose = (doClose: boolean | void | {}) => (doClose !== false) && this.close(doClose as R);\n\n            if (isPromise(result)) {\n                this[loadingKey] = true;\n                const handleThen = (doClose) => {\n                    this[loadingKey] = false;\n                    caseClose(doClose);\n                };\n                (result as Promise<void>).then(handleThen).catch(handleThen);\n            } else {\n                caseClose(result);\n            }\n        }\n    }\n\n    // AoT\n    isNonEmptyString(value: {}): boolean {\n        return typeof value === 'string' && value !== '';\n    }\n\n    // AoT\n    isTemplateRef(value: {}): boolean {\n        return value instanceof TemplateRef;\n    }\n\n    // AoT\n    isComponent(value: {}): boolean {\n        return value instanceof Type;\n    }\n\n    // AoT\n    isModalButtons(value: {}): boolean {\n        return Array.isArray(value) && value.length > 0;\n    }\n\n    // Do rest things when visible state changed\n    private handleVisibleStateChange(visible: boolean, animation: boolean = true, closeResult?: R): Promise<any> {\n        // Hide scrollbar at the first time when shown up\n        if (visible) {\n            this.changeBodyOverflow(1);\n        }\n\n        return Promise\n            .resolve(animation && this.animateTo(visible))\n            // Emit open/close event after animations over\n            .then(() => {\n                if (visible) {\n                    this.mcAfterOpen.emit();\n                } else {\n                    this.mcAfterClose.emit(closeResult);\n                    // Show/hide scrollbar when animation is over\n                    this.changeBodyOverflow();\n                }\n            });\n    }\n\n    // Lookup a button's property, if the prop is a function, call & then return the result, otherwise, return itself.\n    // AoT\n    // tslint:disable-next-line\n    getButtonCallableProp(options: IModalButtonOptions<T>, prop: string): {} {\n        const value = options[prop];\n        const args: any[] = [];\n        if (this.contentComponentRef) {\n            args.push(this.contentComponentRef.instance);\n        }\n\n        return typeof value === 'function' ? value.apply(options, args) : value;\n    }\n\n    // On mcFooter's modal button click\n    // AoT\n    // tslint:disable-next-line\n    onButtonClick(button: IModalButtonOptions<T>) {\n        // Call onClick directly\n        const result = this.getButtonCallableProp(button, 'onClick');\n        if (isPromise(result)) {\n            button.loading = true;\n            (result as Promise<{}>).then(() => button.loading = false).catch(() => button.loading = false);\n        }\n    }\n\n    // Change mcVisible from inside\n    private changeVisibleFromInside(visible: boolean, closeResult?: R): Promise<void> {\n        if (this.mcVisible !== visible) {\n            // Change mcVisible value immediately\n            this.mcVisible = visible;\n            this.mcVisibleChange.emit(visible);\n\n            return this.handleVisibleStateChange(visible, true, closeResult);\n        }\n\n        return Promise.resolve();\n    }\n\n    private changeAnimationState(state: AnimationState) {\n        this.animationState = state;\n        if (state) {\n            this.maskAnimationClassMap = {\n                [`fade-${state}`]: true,\n                [`fade-${state}-active`]: true\n            };\n            this.modalAnimationClassMap = {\n                [`zoom-${state}`]: true,\n                [`zoom-${state}-active`]: true\n            };\n        } else {\n            // @ts-ignore\n            this.maskAnimationClassMap = this.modalAnimationClassMap = null;\n        }\n\n        if (this.contentComponentRef) {\n            this.contentComponentRef.changeDetectorRef.markForCheck();\n        } else {\n            this.changeDetector.markForCheck();\n        }\n    }\n\n    private animateTo(isVisible: boolean): Promise<any> {\n        // Figure out the lastest click position when shows up\n        if (isVisible) {\n            // [NOTE] Using timeout due to the document.click event is fired later than visible change,\n            // so if not postponed to next event-loop, we can't get the lastest click position\n            window.setTimeout(() => this.updateTransformOrigin());\n        }\n\n        this.changeAnimationState(isVisible ? 'enter' : 'leave');\n\n        // Return when animation is over\n        return new Promise((resolve) => window.setTimeout(() => {\n            this.changeAnimationState(null);\n            resolve();\n        }, MODAL_ANIMATE_DURATION));\n    }\n\n    private formatModalButtons(buttons: IModalButtonOptions<T>[]): IModalButtonOptions<T>[] {\n        return buttons.map((button) => {\n\n            return {\n                ...{\n                    type: 'default',\n                    size: 'default',\n                    autoLoading: true,\n                    show: true,\n                    loading: false,\n                    disabled: false\n                },\n                ...button\n            };\n        });\n    }\n\n    /**\n     * Create a component dynamically but not attach to any View\n     * (this action will be executed when bodyContainer is ready)\n     * @param component Component class\n     */\n    private createDynamicComponent(component: Type<T>) {\n        const factory = this.cfr.resolveComponentFactory(component);\n        const childInjector = Injector.create({\n            providers: [{provide: McModalRef, useValue: this}],\n            parent: this.viewContainer.parentInjector\n        });\n\n        this.contentComponentRef = factory.create(childInjector);\n\n        if (this.mcComponentParams) {\n            Object.assign(this.contentComponentRef.instance, this.mcComponentParams);\n        }\n\n        // Do the first change detection immediately\n        // (or we do detection at ngAfterViewInit, multi-changes error will be thrown)\n        this.contentComponentRef.changeDetectorRef.detectChanges();\n\n\n    }\n\n    // Update transform-origin to the last click position on document\n    private updateTransformOrigin() {\n        const modalElement = this.modalContainer.nativeElement as HTMLElement;\n        const lastPosition = ModalUtil.getLastClickPosition();\n\n        if (lastPosition) {\n            // tslint:disable-next-line\n            this.transformOrigin = `${lastPosition.x - modalElement.offsetLeft}px ${lastPosition.y - modalElement.offsetTop}px 0px`;\n        }\n    }\n\n    /**\n     * Take care of the body's overflow to decide the existense of scrollbar\n     * @param plusNum The number that the openModals.length will increase soon\n     */\n    private changeBodyOverflow(plusNum: number = 0) {\n        const openModals = this.modalControl.openModals;\n\n        if (openModals.length + plusNum > 0) {\n            // tslint:disable-next-line\n            this.renderer.setStyle(this.document.body, 'padding-right', `${this.mcMeasureScrollbarService.scrollBarWidth}px`);\n            this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n        } else {\n            this.renderer.removeStyle(this.document.body, 'padding-right');\n            this.renderer.removeStyle(this.document.body, 'overflow');\n        }\n    }\n}\n\n////////////\n\nfunction isPromise(obj: {} | void): boolean {\n    // tslint:disable-next-line\n    return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof (obj as Promise<{}>).then === 'function' && typeof (obj as Promise<{}>).catch === 'function';\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n\n@Pipe({\n    name: 'toCssUnit'\n})\nexport class CssUnitPipe implements PipeTransform {\n    transform(value: number | string, defaultUnit: string = 'px'): string {\n        const formatted = +value;\n\n        return isNaN(formatted) ? `${value}` : `${formatted}${defaultUnit}`;\n    }\n}\n","import { ComponentRef, Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { Overlay, OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal } from '@ptsecurity/cdk/portal';\n\nimport { McModalControlService } from './modal-control.service';\nimport { McModalRef } from './modal-ref.class';\nimport { McModalComponent } from './modal.component';\nimport { ConfirmType, IModalOptions, IModalOptionsForService } from './modal.type';\n\n\n// A builder used for managing service creating modals\nexport class ModalBuilderForService {\n\n    // Modal ComponentRef, \"null\" means it has been destroyed\n    private modalRef: ComponentRef<McModalComponent>;\n    private overlayRef: OverlayRef;\n\n    constructor(private overlay: Overlay, options: IModalOptionsForService = {}) {\n        this.createModal();\n\n        if (!('mcGetContainer' in options)) {\n            options.mcGetContainer = null;\n        }\n\n        this.changeProps(options);\n        this.modalRef.instance.open();\n        this.modalRef.instance.mcAfterClose.subscribe(() => this.destroyModal());\n\n        this.overlayRef.keydownEvents()\n            // @ts-ignore\n            .pipe(filter((event: KeyboardEvent) => {\n                return event.keyCode === ESCAPE && options.mcCloseByESC;\n            }))\n            .subscribe(() => this.modalRef.instance.close());\n    }\n\n    getInstance(): McModalComponent {\n        return this.modalRef && this.modalRef.instance;\n    }\n\n    destroyModal(): void {\n        if (this.modalRef) {\n            this.overlayRef.dispose();\n            // @ts-ignore\n            this.modalRef = null;\n        }\n    }\n\n    private changeProps(options: IModalOptions): void {\n        if (this.modalRef) {\n            // here not limit user's inputs at runtime\n            Object.assign(this.modalRef.instance, options);\n        }\n    }\n\n    // Create component to ApplicationRef\n    private createModal(): void {\n        this.overlayRef = this.overlay.create();\n        this.modalRef = this.overlayRef.attach(new ComponentPortal(McModalComponent));\n    }\n}\n\n@Injectable()\nexport class McModalService {\n    // Track of the current close modals (we assume invisible is close this time)\n    get openModals(): McModalRef[] {\n        return this.modalControl.openModals;\n    }\n\n    get afterAllClose(): Observable<void> {\n        return this.modalControl.afterAllClose.asObservable();\n    }\n\n    constructor(\n        private overlay: Overlay,\n        private modalControl: McModalControlService) {\n    }\n\n    // Closes all of the currently-open dialogs\n    closeAll(): void {\n        this.modalControl.closeAll();\n    }\n\n    create<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n\n        if (typeof options.mcOnCancel !== 'function') {\n            // Leave a empty function to close this modal by default\n            // tslint:disable-next-line\n            options.mcOnCancel = () => {};\n        }\n\n        if (!('mcCloseByESC' in options)) {\n            options.mcCloseByESC = true;\n        }\n\n\n        if (!('mcWidth' in options)) {\n            // tslint:disable-next-line\n            options.mcWidth = 480;\n        }\n\n        return new ModalBuilderForService(this.overlay, options).getInstance();\n    }\n\n    confirm<T>(options: IModalOptionsForService<T> = {}, confirmType: ConfirmType = 'confirm'): McModalRef<T> {\n        if ('mcFooter' in options) {\n            console.warn(`The Confirm-Modal doesn't support \"mcFooter\", this property will be ignored.`);\n        }\n\n        // NOTE: only support function currently by calling confirm()\n        if (typeof options.mcOnOk !== 'function') {\n            // Leave a empty function to close this modal by default\n            // tslint:disable-next-line\n            options.mcOnOk = () => {};\n        }\n\n        options.mcModalType = 'confirm';\n        options.mcClassName = `mc-confirm mc-confirm-${confirmType} ${options.mcClassName || ''}`;\n        options.mcMaskClosable = false;\n\n        return this.create(options);\n    }\n\n    success<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n        return this.simpleConfirm(options, 'success');\n    }\n\n    delete<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n        return this.simpleConfirm(options, 'warn');\n    }\n\n    private simpleConfirm<T>(options: IModalOptionsForService<T> = {}, confirmType: ConfirmType): McModalRef<T> {\n        // Remove the Cancel button if the user not specify a Cancel button\n        if (!('mcCancelText' in options)) {\n            // @ts-ignore\n            options.mcCancelText = null;\n        }\n\n        return this.confirm(options, confirmType);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { McButtonModule } from '@ptsecurity/mosaic/button';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { CssUnitPipe } from './css-unit.pipe';\nimport { McModalControlService } from './modal-control.service';\nimport { McModalComponent } from './modal.component';\nimport { McModalService } from './modal.service';\n\n\n@NgModule({\n    imports: [ CommonModule, OverlayModule, McButtonModule, McIconModule ],\n    exports: [ McModalComponent ],\n    declarations: [ McModalComponent, CssUnitPipe ],\n    entryComponents: [ McModalComponent ],\n    providers: [ McModalControlService, McModalService ]\n})\nexport class McModalModule { }\n","import {\n    AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport {\n    CanColor,\n    CanDisable,\n    HasTabIndex,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\nimport { MC_CHECKBOX_CLICK_ACTION, McCheckboxClickAction } from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mc-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McCheckbox),\n    multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n    /** The initial state of the component before any user interaction. */\n    Init,\n    /** The state representing the component when it's becoming checked. */\n    Checked,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate\n}\n\n/** Change event object emitted by McCheckbox. */\nexport class McCheckboxChange {\n    /** The source McCheckbox of the event. */\n    source: McCheckbox;\n    /** The new `checked` value of the checkbox. */\n    checked: boolean;\n}\n\n// Boilerplate for applying mixins to McCheckbox.\n/** @docs-private */\nexport class McCheckboxBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\nexport const _McCheckboxMixinBase =\n    mixinTabIndex(mixinColor(mixinDisabled(McCheckboxBase)));\n\n\n/**\n * A mosaic checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A McCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n */\n@Component({\n    selector: 'mc-checkbox',\n    templateUrl: 'checkbox.html',\n    styleUrls: ['checkbox.css'],\n    exportAs: 'mcCheckbox',\n    host: {\n        class: 'mc-checkbox',\n        '[id]': 'id',\n        '[attr.id]': 'id',\n        '[class.mc-checkbox-indeterminate]': 'indeterminate',\n        '[class.mc-checkbox-checked]': 'checked',\n        '[class.mc-checkbox-disabled]': 'disabled',\n        '[class.mc-checkbox-label-before]': 'labelPosition == \"before\"'\n    },\n    providers: [MC_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCheckbox extends _McCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex {\n\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     */\n    @Input('aria-label') ariaLabel: string = '';\n\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n    private _uniqueId: string = `mc-checkbox-${++nextUniqueId}`;\n\n    /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n    @Input() id: string = this._uniqueId;\n\n    /** Returns the unique id for the visual hidden input. */\n    get inputId(): string {\n        return `${this.id || this._uniqueId}-input`;\n    }\n\n    /** Whether the checkbox is required. */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    private _required: boolean;\n\n    /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n    @Input() labelPosition: 'before' | 'after' = 'after';\n\n    /** Name value will be applied to the input element if present */\n    @Input() name: string | null = null;\n\n    /** Event emitted when the checkbox's `checked` value changes. */\n    @Output() readonly change: EventEmitter<McCheckboxChange> =\n        new EventEmitter<McCheckboxChange>();\n\n    /** Event emitted when the checkbox's `indeterminate` value changes. */\n    @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** The value attribute of the native input element */\n    @Input() value: string;\n\n    /** The native `<input type=\"checkbox\">` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * @docs-private\n     */\n    _onTouched: () => any = () => {\n    }\n\n    private _currentAnimationClass: string = '';\n\n    private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n    private _controlValueAccessorChangeFn: (value: any) => void = () => {\n    }\n\n    constructor(elementRef: ElementRef,\n                private _changeDetectorRef: ChangeDetectorRef,\n                private _focusMonitor: FocusMonitor,\n                @Attribute('tabindex') tabIndex: string,\n                @Optional() @Inject(MC_CHECKBOX_CLICK_ACTION)\n                private _clickAction: McCheckboxClickAction) {\n        super(elementRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._inputElement.nativeElement)\n            .subscribe((focusOrigin) => this._onInputFocusChange(focusOrigin));\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    }\n\n    /**\n     * Whether the checkbox is checked.\n     */\n    @Input()\n    get checked(): boolean {\n        return this._checked;\n    }\n\n    set checked(value: boolean) {\n        if (value != this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _checked: boolean = false;\n\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value != this.disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    @Input()\n    get indeterminate(): boolean {\n        return this._indeterminate;\n    }\n\n    set indeterminate(value: boolean) {\n        const changed = value != this._indeterminate;\n        this._indeterminate = value;\n\n        if (changed) {\n            if (this._indeterminate) {\n                this._transitionCheckState(TransitionCheckState.Indeterminate);\n            } else {\n                this._transitionCheckState(\n                    this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n    }\n\n    private _indeterminate: boolean = false;\n\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // This method is getting called whenever the label of the checkbox changes.\n        // Since the checkbox uses the OnPush strategy we need to notify it about the change\n        // that has been recognized by the cdkObserveContent directive.\n        this._changeDetectorRef.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any) {\n        this.checked = !!value;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this._onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n    }\n\n    _getAriaChecked(): 'true' | 'false' | 'mixed' {\n        return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n    }\n\n    private _transitionCheckState(newState: TransitionCheckState) {\n        const oldState = this._currentCheckState;\n        const element: HTMLElement = this._elementRef.nativeElement;\n\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n\n        this._currentCheckState = newState;\n\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n        }\n    }\n\n    private _emitChangeEvent() {\n        const event = new McCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    }\n\n    /** Function is called whenever the focus changes for the input element. */\n    private _onInputFocusChange(focusOrigin: FocusOrigin) {\n        if (focusOrigin) {\n            this._onTouched();\n        }\n    }\n\n    /** Toggles the `checked` state of the checkbox. */\n    toggle(): void {\n        this.checked = !this.checked;\n    }\n\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event\n     */\n    _onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && this._clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && this._clickAction !== 'check') {\n\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n\n            this.toggle();\n            this._transitionCheckState(\n                this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        } else if (!this.disabled && this._clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mc-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n\n    /** Focuses the checkbox. */\n    focus(): void {\n        this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n    }\n\n    _onInteractionEvent(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n}\n","import {\n    Directive,\n    forwardRef,\n    Provider\n} from '@angular/core';\nimport {\n    CheckboxRequiredValidator,\n    NG_VALIDATORS\n} from '@angular/forms';\n\n\nexport const MC_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McCheckboxRequiredValidator),\n    multi: true\n};\n\n/**\n * Validator for Mosaic checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mc-checkbox`.\n */\n@Directive({\n    selector: `mc-checkbox[required][formControlName],\n             mc-checkbox[required][formControl], mc-checkbox[required][ngModel]`,\n    providers: [MC_CHECKBOX_REQUIRED_VALIDATOR],\n    host: { '[attr.required]': 'required ? \"\" : null' }\n})\nexport class McCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McCheckbox } from './checkbox';\nimport { McCheckboxRequiredValidator } from './checkbox-required-validator';\n\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [McCheckbox, McCheckboxRequiredValidator],\n    declarations: [McCheckbox, McCheckboxRequiredValidator]\n})\nexport class McCheckboxModule {\n}\n","import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\n\n\n@Component({\n    selector: 'mc-divider',\n    host: {\n        class: 'mc-divider',\n        role: 'separator',\n        '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n        '[class.mc-divider-vertical]': 'vertical',\n        '[class.mc-divider-inset]': 'inset'\n    },\n    template: '',\n    styleUrls: ['divider.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false\n})\nexport class McDivider {\n    // Whether the divider is vertically aligned.\n    @Input()\n    get vertical(): boolean {\n        return this._vertical;\n    }\n\n    set vertical(value: boolean) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n\n    private _vertical: boolean = false;\n\n    // Whether the divider is an inset divider.\n    @Input()\n    get inset(): boolean {\n        return this._inset;\n    }\n\n    set inset(value: boolean) {\n        this._inset = coerceBooleanProperty(value);\n    }\n\n    private _inset: boolean = false;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McDivider } from './divider.component';\n\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [McDivider],\n    declarations: [McDivider]\n})\nexport class McDividerModule {\n}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-cleaner',\n    template: '<i mc-icon=\"mc-close-M_16\" class=\"mc-cleaner__icon\"></i>'\n})\nexport class McCleaner {\n}\n","import { NgControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\n\n/** An interface which allows a control to work inside of a `MсFormField`. */\nexport abstract class McFormFieldControl<T> {\n    /** The value of the control. */\n    value: T | null;\n\n    /**\n     * Stream that emits whenever the state of the control changes such that the parent `MсFormField`\n     * needs to run change detection.\n     */\n    readonly stateChanges: Observable<void>;\n\n    /** The element ID for this control. */\n    readonly id: string;\n\n    /** The placeholder for this control. */\n    readonly placeholder: string;\n\n    /** Gets the NgControl for this control. */\n    readonly ngControl: NgControl | null;\n\n    /** Whether the control is focused. */\n    readonly focused: boolean;\n\n    /** Whether the control is empty. */\n    readonly empty: boolean;\n\n    /** Whether the control is required. */\n    readonly required: boolean;\n\n    /** Whether the control is disabled. */\n    readonly disabled: boolean;\n\n    /** Whether the control is in an error state. */\n    readonly errorState: boolean;\n\n    /**\n     * An optional name for the control type that can be used to distinguish `mc-form-field` elements\n     * based on their control type. The form field will add a class,\n     * `mc-form-field-type-{{controlType}}` to its root element.\n     */\n    readonly controlType?: string;\n\n    /** Handles a click on the control's container. */\n    abstract onContainerClick(event: MouseEvent): void;\n}\n","import { Directive, Input } from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n@Directive({\n    selector: 'mc-hint',\n    host: {\n        class: 'mc-hint',\n        '[attr.id]': 'id'\n    }\n})\nexport class McHint {\n    @Input() id: string = `mc-hint-${nextUniqueId++}`;\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcPrefix]'\n})\nexport class McPrefix {\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcSuffix]'\n})\nexport class McSuffix {\n}\n","import {\n    AfterContentChecked,\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren, Directive,\n    ElementRef,\n    QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { CanColor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\nimport { EMPTY, merge } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n\n\nimport { McCleaner } from './cleaner';\nimport { McFormFieldControl } from './form-field-control';\nimport { getMcFormFieldMissingControlError } from './form-field-errors';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McSuffix } from './suffix';\n\n\nlet nextUniqueId = 0;\n\nexport class McFormFieldBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McFormFieldMixinBase = mixinColor(McFormFieldBase, ThemePalette.Primary);\n\n@Component({\n    selector: 'mc-form-field',\n    exportAs: 'mcFormField',\n    templateUrl: 'form-field.html',\n    // McInput is a directive and can't have styles, so we need to include its styles here.\n    // The McInput styles are fairly minimal so it shouldn't be a big deal for people who\n    // aren't using McInput.\n    styleUrls: [\n        'form-field.css',\n        '../input/input.css'\n    ],\n    host: {\n        class: 'mc-form-field',\n        '[class.mc-form-field_invalid]': '_control.errorState',\n        '[class.mc-form-field_disabled]': '_control.disabled',\n        '[class.mc-form-field_has-prefix]': 'hasPrefix',\n        '[class.mc-form-field_has-suffix]': 'hasSuffix',\n        '[class.mc-form-field_has-cleaner]': 'canShowCleaner',\n        '[class.mc-focused]': '_control.focused',\n        '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n        '[class.ng-touched]': '_shouldForward(\"touched\")',\n        '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n        '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n        '[class.ng-valid]': '_shouldForward(\"valid\")',\n        '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n        '[class.ng-pending]': '_shouldForward(\"pending\")',\n        '(keydown)': 'onKeyDown($event)'\n    },\n    inputs: ['color'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class McFormField extends _McFormFieldMixinBase implements\n    AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n\n    @ContentChild(McFormFieldControl) _control: McFormFieldControl<any>;\n    @ContentChildren(McHint) _hint: QueryList<McHint>;\n    @ContentChildren(McSuffix) _suffix: QueryList<McSuffix>;\n    @ContentChildren(McPrefix) _prefix: QueryList<McPrefix>;\n    @ContentChildren(McCleaner) _cleaner: QueryList<McCleaner>;\n\n    // Unique id for the internal form field label.\n    _labelId = `mc-form-field-label-${nextUniqueId++}`;\n\n    constructor(public _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef) {\n        super(_elementRef);\n    }\n\n    ngAfterContentInit() {\n        this._validateControlChild();\n        if (this._control.controlType) {\n            this._elementRef.nativeElement.classList\n                .add(`mc-form-field-type-${this._control.controlType}`);\n        }\n\n        // Subscribe to changes in the child control state in order to update the form field UI.\n        this._control.stateChanges.pipe(startWith())\n            .subscribe(() => {\n                this._changeDetectorRef.markForCheck();\n            });\n\n        // Run change detection if the value changes.\n        const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n\n        merge(valueChanges)\n            .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    ngAfterContentChecked() {\n        this._validateControlChild();\n    }\n\n    ngAfterViewInit() {\n        // Avoid animations on load.\n        this._changeDetectorRef.detectChanges();\n    }\n\n    clearValue($event) {\n        $event.stopPropagation();\n\n        if (this._control && this._control.ngControl) {\n            this._control.ngControl.reset();\n        }\n    }\n\n    onContainerClick($event) {\n        return this._control.onContainerClick && this._control.onContainerClick($event);\n    }\n\n    onKeyDown(e: KeyboardEvent): void {\n        if (e.keyCode === ESCAPE &&\n            this._control.focused &&\n            this.hasCleaner) {\n\n            if (this._control && this._control.ngControl) {\n                this._control.ngControl.reset();\n            }\n\n            e.preventDefault();\n        }\n    }\n\n    /** Determines whether a class from the NgControl should be forwarded to the host element. */\n    _shouldForward(prop: string): boolean {\n        const ngControl = this._control ? this._control.ngControl : null;\n\n        return ngControl && ngControl[prop];\n    }\n\n    /** Throws an error if the form field's control is missing. */\n    protected _validateControlChild() {\n        if (!this._control) {\n            throw getMcFormFieldMissingControlError();\n        }\n    }\n\n    get hasHint() {\n        return this._hint && this._hint.length > 0;\n    }\n\n    get hasSuffix() {\n        return this._suffix && this._suffix.length > 0;\n    }\n\n    get hasPrefix() {\n        return this._prefix && this._prefix.length > 0;\n    }\n\n    get hasCleaner() {\n        return this._cleaner && this._cleaner.length > 0;\n    }\n\n    get canShowCleaner() {\n        return this.hasCleaner &&\n        this._control && this._control.ngControl\n            ? this._control.ngControl.value && !this._control.disabled\n            : false;\n    }\n}\n\n@Directive({\n    selector: 'mc-form-field[mcFormFieldWithoutBorders]',\n    exportAs: 'mcFormFieldWithoutBorders',\n    host: { class: 'mc-form-field_without-borders' }\n})\nexport class McFormFieldWithoutBorders {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McCleaner } from './cleaner';\nimport { McFormField, McFormFieldWithoutBorders } from './form-field';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McSuffix } from './suffix';\n\n\n@NgModule({\n    declarations: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner\n    ],\n    imports: [CommonModule, McIconModule],\n    exports: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner\n    ]\n})\nexport class McFormFieldModule {\n}\n","import { InjectionToken } from '@angular/core';\n\n\nexport const MC_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{ value: any }>('MC_INPUT_VALUE_ACCESSOR');\n","import {\n    Directive, DoCheck, ElementRef, Inject, Input, OnChanges,\n    OnDestroy, OnInit, Optional, Self\n} from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@ptsecurity/cdk/platform';\nimport { CanUpdateErrorState, ErrorStateMatcher, mixinErrorState } from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\n\nimport { getMcInputUnsupportedTypeError } from './input-errors';\nimport { MC_INPUT_VALUE_ACCESSOR } from './input-value-accessor';\n\n\nconst MC_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\n\nlet nextUniqueId = 0;\n\nexport class McInputBase {\n    constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n                public _parentForm: NgForm,\n                public _parentFormGroup: FormGroupDirective,\n                public ngControl: NgControl) {\n    }\n}\n\nexport const _McInputMixinBase = mixinErrorState(McInputBase);\n\n\n@Directive({\n    selector: `input[mcInput]`,\n    exportAs: 'mcInput',\n    host: {\n        'class': 'mc-input',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '(blur)': '_focusChanged(false)',\n        '(focus)': '_focusChanged(true)',\n        '(input)': '_onInput()'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McInput }]\n})\nexport class McInput extends _McInputMixinBase implements McFormFieldControl<any>, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-input';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this._uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    // tslint:disable no-reserved-keywords\n    /** Input type of the element. */\n    @Input()\n    get type(): string {\n        return this._type;\n    }\n\n    set type(value: string) {\n        this._type = value || 'text';\n        this._validateType();\n\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    // tslint:enable no-reserved-keywords\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this._inputValueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n\n    protected _uid = `mc-input-${nextUniqueId++}`;\n    protected _previousNativeValue: any;\n    protected _disabled = false;\n    protected _id: string;\n    protected _required = false;\n    protected _type = 'text';\n    protected _neverEmptyInputTypes = [\n        'date',\n        'datetime',\n        'datetime-local',\n        'month',\n        'time',\n        'week'\n    ].filter((t) => getSupportedInputTypes().has(t));\n\n    private _inputValueAccessor: { value: any };\n\n    constructor(protected _elementRef: ElementRef,\n                protected _platform: Platform,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() _parentForm: NgForm,\n                @Optional() _parentFormGroup: FormGroupDirective,\n                _defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_INPUT_VALUE_ACCESSOR) inputValueAccessor: any) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n        this._previousNativeValue = this.value;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n    }\n\n    /** Focuses the input. */\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Does some manual dirty checking on the native input `value` property. */\n    protected _dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Make sure the input is a supported type. */\n    protected _validateType() {\n        if (MC_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n            throw getMcInputUnsupportedTypeError(this._type);\n        }\n    }\n\n    /** Checks whether the input type is one of the types that are never empty. */\n    protected _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n\n    /** Checks whether the input is invalid based on the native validation. */\n    protected _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        const validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n\n        return validity && validity.badInput;\n    }\n}\n\n@Directive({\n    selector: 'input[mcInputMonospace]',\n    exportAs: 'McInputMonospace',\n    host: { class: 'mc-input_monospace' }\n})\nexport class McInputMono {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McInput, McInputMono } from './input';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule, FormsModule],\n    exports: [McInput, McInputMono],\n    declarations: [McInput, McInputMono]\n})\nexport class McInputModule {\n}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    Output,\n    QueryList,\n    ViewEncapsulation,\n    ChangeDetectorRef,\n    Inject,\n    OnDestroy,\n    OnInit,\n    ViewChild\n} from '@angular/core';\n\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { Subscription } from 'rxjs';\n\nimport { FocusKeyManager, IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { END, ENTER, HOME, PAGE_DOWN, PAGE_UP, SPACE } from '@ptsecurity/cdk/keycodes';\n\nimport {\n    McLine,\n    McLineSetter,\n    CanDisable,\n    mixinDisabled,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n    exportAs: 'mcListOption',\n    selector: 'mc-list-option',\n    host: {\n        tabindex: '-1',\n\n        class: 'mc-list-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': '_hasFocus',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()',\n        '(click)': '_handleClick()'\n    },\n    templateUrl: 'list-option.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListOption implements AfterContentInit, OnDestroy, OnInit, IFocusableOption {\n    _hasFocus: boolean = false;\n\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    @ViewChild('text') _text: ElementRef;\n\n    // Whether the label should appear before or after the checkbox. Defaults to 'after'\n    @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n    @Input() value: any;\n\n    @Input()\n    get disabled() {\n        return this._disabled || (this.listSelection && this.listSelection.disabled);\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    @Input()\n    get selected(): boolean {\n        return this.listSelection.selectedOptions && this.listSelection.selectedOptions.isSelected(this) || false;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            this.listSelection._reportValueChange();\n        }\n    }\n\n    private _lineSetter: McLineSetter;\n    private _selected = false;\n    private _disabled = false;\n\n    constructor(\n        private _element: ElementRef,\n        private _changeDetector: ChangeDetectorRef,\n        @Inject(forwardRef(() => McListSelection))\n        public listSelection: McListSelection\n    ) {}\n\n    ngOnInit() {\n        if (this._selected) {\n            // List options that are selected at initialization can't be reported properly to the form\n            // control. This is because it takes some time until the selection-list knows about all\n            // available options. Also it can happen that the ControlValueAccessor has an initial value\n            // that should be used instead. Deferring the value change report to the next tick ensures\n            // that the form control value is not being overwritten.\n            const wasSelected = this._selected;\n\n            Promise.resolve().then(() => {\n                if (this._selected || wasSelected) {\n                    this.selected = true;\n                    this._changeDetector.markForCheck();\n                }\n            });\n        }\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    ngOnDestroy(): void {\n        if (this.selected) {\n            // We have to delay this until the next tick in order\n            // to avoid changed after checked errors.\n            Promise.resolve().then(() => this.selected = false);\n        }\n\n        this.listSelection._removeOptionFromList(this);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    focus(): void {\n        this._element.nativeElement.focus();\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    getLabel() {\n        return this._text ? this._text.nativeElement.textContent : '';\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.listSelection.selectedOptions) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.listSelection.selectedOptions.select(this);\n        } else {\n            this.listSelection.selectedOptions.deselect(this);\n        }\n\n        this._changeDetector.markForCheck();\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    _handleClick() {\n        if (this.disabled) { return; }\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    _handleFocus() {\n        if (this.disabled || this._hasFocus) { return; }\n\n        this._hasFocus = true;\n    }\n\n    _handleBlur() {\n        this._hasFocus = false;\n\n        this.listSelection._onTouched();\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n\n\nexport const MC_SELECTION_LIST_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McListSelection),\n    multi: true\n};\n\n// Change event that is being fired whenever the selected state of an option changes. */\nexport class McListSelectionChange {\n    constructor(\n        // Reference to the selection list that emitted the event.\n        public source: McListSelection,\n        // Reference to the option that has been changed.\n        public option: McListOption\n    ) {}\n}\n\n\nexport class McListSelectionBase {}\n\nexport const _McListSelectionMixinBase = mixinDisabled(McListSelectionBase);\n\n@Component({\n    exportAs: 'mcListSelection',\n    selector: 'mc-list-selection',\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'tabIndex'],\n    host: {\n        class: 'mc-list-selection',\n        '[tabIndex]': 'tabIndex',\n        '(focus)': 'focus()',\n        '(blur)': '_onTouched()',\n        '(keydown)': '_onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    providers: [MC_SELECTION_LIST_VALUE_ACCESSOR],\n    preserveWhitespaces: false\n})\nexport class McListSelection extends _McListSelectionMixinBase implements\n    IFocusableOption, CanDisable, AfterContentInit, ControlValueAccessor {\n\n    _keyManager: FocusKeyManager<McListOption>;\n\n    // The option components contained within this selection-list.\n    @ContentChildren(McListOption) options: QueryList<McListOption>;\n\n    tabIndex: number;\n\n    autoSelect: boolean;\n    noUnselect: boolean;\n    multiple: boolean;\n\n    // todo temporary solution\n    withShift: boolean;\n    withCtrl: boolean;\n\n    @Input() horizontal: boolean = false;\n\n    // Emits a change event whenever the selected state of an option changes.\n    @Output() readonly selectionChange: EventEmitter<McListSelectionChange> = new EventEmitter<McListSelectionChange>();\n\n    selectedOptions: SelectionModel<McListOption>;\n\n    // Used for storing the values that were assigned before the options were initialized.\n    private _tempValues: string[] | null;\n\n    private _modelChanges = Subscription.EMPTY;\n\n    constructor(\n        private _element: ElementRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string,\n        @Attribute('multiple') multiple: string\n    ) {\n        super();\n\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.multiple = multiple === null ? true : toBoolean(multiple);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.selectedOptions = new SelectionModel<McListOption>(this.multiple);\n    }\n\n    ngAfterContentInit(): void {\n        this.horizontal = toBoolean(this.horizontal);\n\n        this._keyManager = new FocusKeyManager<McListOption>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation(!this.horizontal)\n            .withHorizontalOrientation(this.horizontal ? 'ltr' : null);\n\n        if (this._tempValues) {\n            this._setOptionsFromValues(this._tempValues);\n            this._tempValues = null;\n        }\n\n        // Sync external changes to the model back to the options.\n        this._modelChanges = this.selectedOptions.onChange!.subscribe((event) => {\n            for (const item of event.added) {\n                item.selected = true;\n            }\n\n            for (const item of event.removed) {\n                item.selected = false;\n            }\n        });\n\n        this.updateScrollSize();\n    }\n\n    ngOnDestroy() {\n        this._modelChanges.unsubscribe();\n    }\n\n    focus() {\n        this._element.nativeElement.focus();\n    }\n\n    selectAll() {\n        this.options.forEach((option) => option.setSelected(true));\n\n        this._reportValueChange();\n    }\n\n    deselectAll() {\n        this.options.forEach((option) => option.setSelected(false));\n\n        this._reportValueChange();\n    }\n\n    updateScrollSize(): void {\n        if (this.horizontal || !this.options.first) { return; }\n\n        this._keyManager.withScrollSize(Math.floor(this._getHeight() / this.options.first._getHeight()));\n    }\n\n    // Sets the focused option of the selection-list.\n    setFocusedOption(option: McListOption): void {\n        this._keyManager.updateActiveItem(option);\n\n        if (this.withShift && this.multiple) {\n            const previousIndex = this._keyManager.previousActiveItemIndex;\n            const activeIndex = this._keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n\n            this.withShift = false;\n        } else if (this.withCtrl) {\n            this.withCtrl = false;\n\n            if (!this._canDeselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) {\n                this.options.forEach((item) => item.setSelected(false));\n                option.setSelected(true);\n            }\n        }\n\n        this._emitChangeEvent(option);\n        this._reportValueChange();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(values: string[]): void {\n        if (this.options) {\n            this._setOptionsFromValues(values || []);\n        } else {\n            this._tempValues = values;\n        }\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this._onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this._onTouched = fn;\n    }\n\n    // Implemented as a part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        if (this.options) {\n            this.options.forEach((option) => option.disabled = isDisabled);\n        }\n    }\n\n    getSelectedOptionValues(): string[] {\n        return this.options.filter((option) => option.selected).map((option) => option.value);\n    }\n\n    // Toggles the selected state of the currently focused option.\n    toggleFocusedOption(): void {\n        const focusedIndex = this._keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n            const focusedOption: McListOption = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this._canDeselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this._emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    _canDeselectLast(listOption: McListOption): boolean {\n        return !(this.noUnselect && this.selectedOptions.selected.length === 1 && listOption.selected);\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    // View to model callback that should be called if the list or its options lost focus.\n    _onTouched: () => void = () => {};\n\n    // Removes an option from the selection list and updates the active item.\n    _removeOptionFromList(option: McListOption) {\n        if (option._hasFocus) {\n            const optionIndex = this._getOptionIndex(option);\n\n            // Check whether the option is the last item\n            if (optionIndex > 0) {\n                this._keyManager.setPreviousItemActive();\n            } else if (optionIndex === 0 && this.options.length > 1) {\n                this._keyManager.setNextItemActive();\n            }\n        }\n    }\n\n    _onKeyDown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n        this.withShift = event.shiftKey;\n        this.withCtrl = event.ctrlKey;\n\n        switch (keyCode) {\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                if (!this.horizontal) { this._keyManager.setPreviousPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                if (!this.horizontal) { this._keyManager.setNextPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    // Reports a value change to the ControlValueAccessor\n    _reportValueChange() {\n        if (this.options) {\n            this._onChange(this.getSelectedOptionValues());\n        }\n    }\n\n    // Emits a change event if the selected state of an option changed.\n    _emitChangeEvent(option: McListOption) {\n        this.selectionChange.emit(new McListSelectionChange(this, option));\n    }\n\n    // Returns the option with the specified value.\n    private _getOptionByValue(value: string): McListOption | undefined {\n        return this.options.find((option) => option.value === value);\n    }\n\n    // Sets the selected options based on the specified values.\n    private _setOptionsFromValues(values: string[]) {\n        this.options.forEach((option) => option.setSelected(false));\n\n        values\n            .map((value) => this._getOptionByValue(value))\n            .filter(Boolean)\n            .forEach((option) => option!.setSelected(true));\n    }\n\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private _isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    // Returns the index of the specified list option.\n    private _getOptionIndex(option: McListOption): number {\n        return this.options.toArray().indexOf(option);\n    }\n\n    // View to model callback that should be called whenever the selected options change.\n    private _onChange: (value: any) => void = (_: any) => {};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMcSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMcSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMcSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { NgModule, InjectionToken, Optional, Inject, isDevMode } from '@angular/core';\nimport { BidiModule } from '@ptsecurity/cdk/bidi';\n\n\n// Injection token that configures whether the Mosaic sanity checks are enabled.\nexport const MC_SANITY_CHECKS = new InjectionToken<boolean>('mc-sanity-checks', {\n    providedIn: 'root',\n    factory: MC_SANITY_CHECKS_FACTORY\n});\n\nexport function MC_SANITY_CHECKS_FACTORY(): boolean {\n    return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Mosaic\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n    imports: [ BidiModule ],\n    exports: [ BidiModule ]\n})\nexport class McCommonModule {\n    // Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n    private _hasDoneGlobalChecks = false;\n\n    // Reference to the global `document` object.\n    private _document = typeof document === 'object' && document ? document : null;\n\n    // Reference to the global 'window' object.\n    private _window = typeof window === 'object' && window ? window : null;\n\n    constructor(@Optional() @Inject(MC_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n        if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n            this._checkDoctypeIsDefined();\n            this._checkThemeIsPresent();\n            this._hasDoneGlobalChecks = true;\n        }\n    }\n\n    // Whether any sanity checks are enabled\n    private _areChecksEnabled(): boolean {\n        return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n    }\n\n    // Whether the code is running in tests.\n    private _isTestEnv() {\n        return this._window && (this._window['__karma__'] || this._window['jasmine']);\n    }\n\n    private _checkDoctypeIsDefined(): void {\n        if (this._document && !this._document.doctype) {\n            console.warn(\n                'Current document does not have a doctype. This may cause ' +\n                'some Mosaic components not to behave as expected.'\n            );\n        }\n    }\n\n    private _checkThemeIsPresent(): void {\n        if (this._document && typeof getComputedStyle === 'function') {\n            const testElement = this._document.createElement('div');\n\n            testElement.classList.add('mc-theme-loaded-marker');\n            this._document.body.appendChild(testElement);\n\n            const computedStyle = getComputedStyle(testElement);\n\n            // In some situations, the computed style of the test element can be null. For example in\n            // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n            // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n            if (computedStyle && computedStyle.display !== 'none') {\n                console.warn(\n                    'Could not find Mosaic core theme. Most Mosaic ' +\n                    'components may not work as expected. For more info refer ' +\n                    'to the theming guide: link there'\n                );\n            }\n\n            this._document.body.removeChild(testElement);\n        }\n    }\n}\n","import { ElementRef } from '@angular/core';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanColor {\n    color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\nexport interface HasElementRef {\n    _elementRef: ElementRef;\n}\n\nexport enum ThemePalette {\n    Primary = 'primary',\n    Second = 'second',\n    Warn = 'warn',\n    Default = 'second'\n}\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T,\n    defaultColor: ThemePalette = ThemePalette.Default\n): CanColorCtor & T {\n    return class extends base {\n\n        private _color: ThemePalette;\n\n        get color(): ThemePalette {\n            return this._color;\n        }\n\n        set color(value: ThemePalette) {\n            const colorPalette = value || defaultColor;\n\n            if (colorPalette !== this._color) {\n                if (this._color) {\n                    this._elementRef.nativeElement.classList.remove(`mc-${this._color}`);\n                }\n\n                if (colorPalette) {\n                    this._elementRef.nativeElement.classList.add(`mc-${colorPalette}`);\n                }\n\n                this._color = colorPalette;\n            }\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n\n            this.color = defaultColor;\n        }\n    };\n}\n\n","import { NgModule, Directive, ElementRef, QueryList } from '@angular/core';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(McLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n    selector: '[mc-line], [mcLine]',\n    host: { class: 'mc-line' }\n})\nexport class McLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class McLineSetter {\n    constructor(private _lines: QueryList<McLine>, private _element: ElementRef) {\n        this._setLineClass(this._lines.length);\n\n        this._lines.changes.subscribe(() => {\n            this._setLineClass(this._lines.length);\n        });\n    }\n\n    private _setLineClass(count: number): void {\n        this._resetClasses();\n        if (count === 2 || count === 3) {\n            this._setClass(`mc-${count}-line`, true);\n        } else if (count > 3) {\n            this._setClass(`mc-multi-line`, true);\n        }\n    }\n\n    private _resetClasses(): void {\n        this._setClass('mc-2-line', false);\n        this._setClass('mc-3-line', false);\n        this._setClass('mc-multi-line', false);\n    }\n\n    private _setClass(className: string, isAdd: boolean): void {\n        if (isAdd) {\n            this._element.nativeElement.classList.add(className);\n        } else {\n            this._element.nativeElement.classList.remove(className);\n        }\n    }\n}\n\n@NgModule({\n    imports: [],\n    exports: [McLine],\n    declarations: [McLine]\n})\nexport class McLineModule {}\n","import { Injectable } from '@angular/core';\nimport { FormGroupDirective, NgForm, FormControl } from '@angular/forms';\n\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n    }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({ providedIn: 'root' })\nexport class ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n    }\n}\n","import { Component, ViewEncapsulation, Input, ChangeDetectionStrategy } from '@angular/core';\n\n\nexport type McPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mc-primary .mc-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mc-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'mc-pseudo-checkbox',\n    styleUrls: ['pseudo-checkbox.css'],\n    templateUrl: 'pseudo-checkbox.partial.html',\n    host: {\n        class: 'mc-pseudo-checkbox',\n        '[class.mc-pseudo-checkbox_indeterminate]': 'state === \"indeterminate\"',\n        '[class.mc-pseudo-checkbox_checked]': 'state === \"checked\"',\n        '[class.mc-disabled]': 'disabled'\n    }\n})\nexport class McPseudoCheckbox {\n    @Input() state: McPseudoCheckboxState = 'unchecked';\n\n    @Input() disabled: boolean = false;\n}\n","import { NgModule } from '@angular/core';\n\nimport { McPseudoCheckbox } from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n    exports: [McPseudoCheckbox],\n    declarations: [McPseudoCheckbox]\n})\nexport class McPseudoCheckboxModule {}\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class McMeasureScrollbarService {\n\n    get scrollBarWidth(): number {\n        if (this._scrollbarWidth) {\n            return this._scrollbarWidth;\n        }\n        this.initScrollBarWidth();\n\n        return this._scrollbarWidth;\n    }\n\n    private _scrollbarWidth: number;\n    private scrollbarMeasure = {\n        position: 'absolute',\n        top: '-9999px',\n        width: '50px',\n        height: '50px',\n        overflow: 'scroll'\n    };\n\n    constructor(\n        @Inject(DOCUMENT) private document: any\n    ) {\n        this.initScrollBarWidth();\n    }\n\n    initScrollBarWidth() {\n        const scrollDiv = this.document.createElement('div');\n\n        for (const scrollProp in this.scrollbarMeasure) {\n            if (this.scrollbarMeasure.hasOwnProperty(scrollProp)) {\n                scrollDiv.style[scrollProp] = this.scrollbarMeasure[scrollProp];\n            }\n        }\n\n        this.document.body.appendChild(scrollDiv);\n\n        const width = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n\n        this.document.body.removeChild(scrollDiv);\n        this._scrollbarWidth = width;\n    }\n}\n","import { Component, ViewEncapsulation, Input, ChangeDetectionStrategy } from '@angular/core';\n\nimport { mixinDisabled, CanDisable, CanDisableCtor } from '../common-behaviors/index';\n\n\n// Boilerplate for applying mixins to McOptgroup.\n/** @docs-private */\nexport class McOptgroupBase {}\n\nexport const _McOptgroupMixinBase: CanDisableCtor & typeof McOptgroupBase = mixinDisabled(McOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mc-option`.\n */\n@Component({\n    selector: 'mc-optgroup',\n    exportAs: 'mcOptgroup',\n    templateUrl: 'optgroup.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['disabled'],\n    styleUrls: ['optgroup.css'],\n    host: {\n        class: 'mc-optgroup',\n        role: 'group',\n        '[class.mc-optgroup-disabled]': 'disabled',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-labelledby]': '_labelId'\n    }\n})\nexport class McOptgroup extends _McOptgroupMixinBase implements CanDisable {\n    /** Label for the option group. */\n    @Input() label: string;\n\n    /** Unique id for the underlying label. */\n    _labelId: string = `mc-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n","import {\n    AfterViewChecked,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { ENTER, SPACE } from '@ptsecurity/cdk/keycodes';\nimport { Subject } from 'rxjs';\n\nimport { McOptgroup } from './optgroup';\n\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by McOption when selected or deselected. */\nexport class McOptionSelectionChange {\n    constructor(\n        /** Reference to the option that emitted the event. */\n        public source: McOption,\n        /** Whether the change in the option's value was a result of a user action. */\n        public isUserInput = false) {\n    }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface IMcOptionParentComponent {\n    disableRipple?: boolean;\n    multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MC_OPTION_PARENT_COMPONENT =\n    new InjectionToken<IMcOptionParentComponent>('MC_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n    selector: 'mc-option',\n    exportAs: 'mcOption',\n    host: {\n        '[attr.tabindex]': '_getTabIndex()',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-option-multiple]': 'multiple',\n        '[class.mc-active]': 'active',\n        '[id]': 'id',\n        '[class.mc-disabled]': 'disabled',\n        '(click)': '_selectViaInteraction()',\n        '(keydown)': '_handleKeydown($event)',\n        class: 'mc-option'\n    },\n    styleUrls: ['option.css'],\n    templateUrl: 'option.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McOption implements AfterViewChecked, OnDestroy {\n    /** Whether the wrapping component is in multiple selection mode. */\n    get multiple() {\n        return this._parent && this._parent.multiple;\n    }\n\n    /** The unique ID of the option. */\n    get id(): string {\n        return this._id;\n    }\n\n    /** Whether or not the option is currently selected. */\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    /** The form value of the option. */\n    @Input() value: any;\n\n    /** Whether the option is disabled. */\n    @Input()\n    get disabled() {\n        return (this.group && this.group.disabled) || this._disabled;\n    }\n\n    set disabled(value: any) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    /** Whether ripples for the option are disabled. */\n    get disableRipple() {\n        return this._parent && this._parent.disableRipple;\n    }\n\n    /** Event emitted when the option is selected or deselected. */\n        // tslint:disable-next-line:no-output-on-prefix\n    @Output() readonly onSelectionChange = new EventEmitter<McOptionSelectionChange>();\n\n    /** Emits when the state of the option changes and any parents have to be notified. */\n    readonly _stateChanges = new Subject<void>();\n\n    private _selected = false;\n    private _active = false;\n    private _disabled = false;\n    private readonly _id = `mc-option-${_uniqueIdCounter++}`;\n    private _mostRecentViewValue = '';\n\n    constructor(\n        private readonly _element: ElementRef,\n        private readonly _changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_OPTION_PARENT_COMPONENT) private readonly _parent: IMcOptionParentComponent,\n        @Optional() readonly group: McOptgroup) {\n    }\n\n    /**\n     * Whether or not the option is currently active and ready to be selected.\n     * An active option displays styles as if it is focused, but the\n     * focus is actually retained somewhere else. This comes in handy\n     * for components like autocomplete where focus must remain on the input.\n     */\n    get active(): boolean {\n        return this._active;\n    }\n\n    /**\n     * The displayed value of the option. It is necessary to show the selected option in the\n     * select's trigger.\n     */\n    get viewValue(): string {\n        // TODO(kara): Add input property alternative for node envs.\n        return (this._getHostElement().textContent || '').trim();\n    }\n\n    /** Selects the option. */\n    select(): void {\n        if (!this._selected) {\n            this._selected = true;\n            this._changeDetectorRef.markForCheck();\n            this._emitSelectionChangeEvent();\n        }\n    }\n\n    /** Deselects the option. */\n    deselect(): void {\n        if (this._selected) {\n            this._selected = false;\n            this._changeDetectorRef.markForCheck();\n            this._emitSelectionChangeEvent();\n        }\n    }\n\n    /** Sets focus onto this option. */\n    focus(): void {\n        const element = this._getHostElement();\n\n        if (typeof element.focus === 'function') {\n            element.focus();\n        }\n    }\n\n    /**\n     * This method sets display styles on the option to make it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setActiveStyles(): void {\n        if (!this._active) {\n            this._active = true;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    /**\n     * This method removes display styles on the option that made it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setInactiveStyles(): void {\n        if (this._active) {\n            this._active = false;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel(): string {\n        return this.viewValue;\n    }\n\n    /** Ensures the option is selected when activated from the keyboard. */\n    _handleKeydown(event: KeyboardEvent): void {\n        if (event.keyCode === ENTER || event.keyCode === SPACE) {\n            this._selectViaInteraction();\n\n            // Prevent the page from scrolling down and form submits.\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * `Selects the option while indicating the selection came from the user. Used to\n     * determine if the select's view -> model callback should be invoked.`\n     */\n    _selectViaInteraction(): void {\n        if (!this.disabled) {\n            this._selected = this.multiple ? !this._selected : true;\n            this._changeDetectorRef.markForCheck();\n            this._emitSelectionChangeEvent(true);\n        }\n    }\n\n    /** Returns the correct tabindex for the option depending on disabled state. */\n    _getTabIndex(): string {\n        return this.disabled ? '-1' : '0';\n    }\n\n    /** Gets the host DOM element. */\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n\n    ngAfterViewChecked() {\n        // Since parent components could be using the option's label to display the selected values\n        // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n        // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n        // relatively cheap, however we still limit them only to selected options in order to avoid\n        // hitting the DOM too often.\n        if (this._selected) {\n            const viewValue = this.viewValue;\n\n            if (viewValue !== this._mostRecentViewValue) {\n                this._mostRecentViewValue = viewValue;\n                this._stateChanges.next();\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n\n    /** Emits the selection change event. */\n    private _emitSelectionChangeEvent(isUserInput = false): void {\n        this.onSelectionChange.emit(new McOptionSelectionChange(this, isUserInput));\n    }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(\n    optionIndex: number, options: QueryList<McOption>,\n    optionGroups: QueryList<McOptgroup>\n): number {\n\n    if (optionGroups.length) {\n        const optionsArray = options.toArray();\n        const groups = optionGroups.toArray();\n\n        let groupCounter = 0;\n\n        for (let i = 0; i < optionIndex + 1; i++) {\n            if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n                groupCounter++;\n            }\n        }\n\n        return groupCounter;\n    }\n\n    return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(\n    optionIndex: number,\n    optionHeight: number,\n    currentScrollPosition: number,\n    panelHeight: number\n): number {\n    const optionOffset = optionIndex * optionHeight;\n\n    if (optionOffset < currentScrollPosition) { return optionOffset; }\n\n    if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n        return Math.max(0, optionOffset - panelHeight + optionHeight);\n    }\n\n    return currentScrollPosition;\n}\n\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McPseudoCheckboxModule } from '../selection/index';\n\nimport { McOptgroup } from './optgroup';\nimport { McOption } from './option';\n\n\n@NgModule({\n    imports: [CommonModule, McPseudoCheckboxModule],\n    exports: [McOption, McOptgroup],\n    declarations: [McOption, McOptgroup]\n})\nexport class McOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","import { InjectionToken } from '@angular/core';\n\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MC_LABEL_GLOBAL_OPTIONS =\n    new InjectionToken<LabelOptions>('mc-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n    /**\n     * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n     * Default behavior is assumed to be `auto`.\n     */\n    float?: FloatLabelType;\n}\n","import {\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { mixinColor, CanColor } from '@ptsecurity/mosaic/core';\n\n\n@Directive({\n    selector: '[mc-icon]',\n    host: { class: 'mc mc-icon' }\n})\nexport class McIconCSSStyler {}\n\n\nexport class McIconBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McIconMixinBase = mixinColor(McIconBase);\n\n\n@Component({\n    selector: `[mc-icon]`,\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./icon.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McIcon extends _McIconMixinBase implements CanColor {\n    constructor(elementRef: ElementRef, @Attribute('mc-icon') iconName: string) {\n        super(elementRef);\n\n        elementRef.nativeElement.classList.add(iconName);\n    }\n\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McIcon,\n    McIconCSSStyler\n} from './icon.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McIcon,\n        McIconCSSStyler\n    ],\n    declarations: [\n        McIcon,\n        McIconCSSStyler\n    ]\n})\nexport class McIconModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    OnDestroy,\n    QueryList,\n    ViewEncapsulation,\n    ContentChildren\n} from '@angular/core';\n\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { Platform } from '@ptsecurity/cdk/platform';\n\nimport { mixinColor, mixinDisabled, CanColor, CanDisable } from '@ptsecurity/mosaic/core';\nimport { McIcon } from '@ptsecurity/mosaic/icon';\n\n\n@Directive({\n    selector: 'button[mc-button], a[mc-button]',\n    host: { class: 'mc-button' }\n})\nexport class McButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-xs-button], a[mc-xs-button]',\n    host: { class: 'mc-button mc-button_xs' }\n})\nexport class McXSButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-sm-button], a[mc-sm-button]',\n    host: { class: 'mc-button mc-button_sm' }\n})\nexport class McSMButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-lg-button], a[mc-lg-button]',\n    host: { class: 'mc-button mc-button_lg' }\n})\nexport class McLGButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-xl-button], a[mc-xl-button]',\n    host: { class: 'mc-button mc-button_xl' }\n})\nexport class McXLButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-icon-button], a[mc-icon-button]',\n    queries: {\n        contentChildren: new ContentChildren(McIcon)\n    },\n    host: { class: 'mc-icon-button' }\n})\nexport class McIconButtonCSSStyler {\n    nativeElement: Element;\n\n    contentChildren: QueryList<McIcon>;\n\n    constructor(elementRef: ElementRef) {\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        this._addClassModificatorForIcons();\n    }\n\n    _addClassModificatorForIcons() {\n        const twoIcons = 2;\n        const icons = this.contentChildren.map((item) => item._elementRef.nativeElement);\n\n        if (icons.length === 1) {\n            const iconElement = icons[0];\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-icon-button_left');\n                }\n\n                if (iconElement.previousSibling) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-icon-button_right');\n                }\n            }\n        } else if (icons.length === twoIcons) {\n            const firstIconElement = icons[0];\n            const secondIconElement = icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n}\n\n\nexport class McButtonBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McButtonMixinBase = mixinColor(mixinDisabled(McButtonBase));\n\n\n@Component({\n    selector: `\n        button[mc-button],\n        button[mc-xs-button],\n        button[mc-sm-button],\n        button[mc-lg-button],\n        button[mc-xl-button]\n    `,\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[disabled]': 'disabled || null'\n    }\n})\nexport class McButton extends _McButtonMixinBase implements OnDestroy, CanDisable, CanColor {\n    constructor(elementRef: ElementRef, private _platform: Platform, private _focusMonitor: FocusMonitor) {\n        super(elementRef);\n\n        this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this._getHostElement().focus();\n    }\n\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n\n\n@Component({\n    selector: 'a[mc-button], a[mc-xs-button], a[mc-sm-button], a[mc-lg-button], a[mc-xl-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[attr.tabindex]': 'disabled ? -1 : 0',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': '_haltDisabledEvents($event)'\n    }\n})\nexport class McAnchor extends McButton {\n    constructor(platform: Platform, focusMonitor: FocusMonitor, elementRef: ElementRef) {\n        super(elementRef, platform, focusMonitor);\n    }\n\n    _haltDisabledEvents(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\n\n\n@Component({\n    selector: 'button[mc-icon-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[attr.tabindex]': 'disabled ? -1 : 0',\n        '[attr.disabled]': 'disabled || null'\n    }\n})\nexport class McIconButton extends McButton {\n    constructor(platform: Platform, focusMonitor: FocusMonitor, elementRef: ElementRef) {\n        super(elementRef, platform, focusMonitor);\n    }\n\n    _haltDisabledEvents(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McButton,\n    McAnchor,\n    McIconButton,\n    McButtonCSSStyler,\n    McXSButtonCSSStyler,\n    McSMButtonCSSStyler,\n    McLGButtonCSSStyler,\n    McXLButtonCSSStyler,\n    McIconButtonCSSStyler\n} from './button.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McButton,\n        McAnchor,\n        McIconButton,\n        McButtonCSSStyler,\n        McXSButtonCSSStyler,\n        McSMButtonCSSStyler,\n        McLGButtonCSSStyler,\n        McXLButtonCSSStyler,\n        McIconButtonCSSStyler\n    ],\n    declarations: [\n        McButton,\n        McAnchor,\n        McIconButton,\n        McButtonCSSStyler,\n        McXSButtonCSSStyler,\n        McSMButtonCSSStyler,\n        McLGButtonCSSStyler,\n        McXLButtonCSSStyler,\n        McIconButtonCSSStyler\n    ]\n})\nexport class McButtonModule {}\n","import { InjectionToken } from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type McCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MC_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<McCheckboxClickAction>('mc-checkbox-click-action');\n","\nexport function isBoolean(val: any): val is boolean { return typeof val === 'boolean'; }\n\nexport function toBoolean(value: any): boolean {\n    return value != null && `${value}` !== 'false';\n}\n","import { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanDisable {\n    disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n// Mixin to augment a directive with a `disabled` property.\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n    return class extends base {\n        private _disabled: boolean = false;\n\n        get disabled() {\n            return this._disabled;\n        }\n\n        set disabled(value: any) {\n            this._disabled = coerceBooleanProperty(value);\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n    };\n}\n","import { Constructor } from './constructor';\nimport { CanDisable } from './disabled';\n\n\nexport interface HasTabIndex {\n    tabIndex: number;\n}\n\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n// Mixin to augment a directive with a `tabIndex` property.\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n    return class extends base {\n        private _tabIndex: number = defaultTabIndex;\n\n        get tabIndex(): number {\n            return this.disabled ? -1 : this._tabIndex;\n        }\n\n        set tabIndex(value: number) {\n            this._tabIndex = value != null ? value : defaultTabIndex;\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n    };\n}\n","import { FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { Subject } from 'rxjs';\n\nimport { ErrorStateMatcher } from '../error/error-options';\n\nimport { Constructor } from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n    updateErrorState();\n\n    readonly stateChanges: Subject<void>;\n    errorState: boolean;\n    errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport interface HasErrorState {\n    _parentFormGroup: FormGroupDirective;\n    _parentForm: NgForm;\n    _defaultErrorStateMatcher: ErrorStateMatcher;\n    ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n    : Constructor<CanUpdateErrorState> & T {\n    return class extends base {\n        /** Whether the component is in an error state. */\n        errorState: boolean = false;\n\n        /**\n         * Stream that emits whenever the state of the input changes such that the wrapping\n         * `MatFormField` needs to run change detection.\n         */\n        readonly stateChanges = new Subject<void>();\n\n        errorStateMatcher: ErrorStateMatcher;\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n\n        updateErrorState() {\n            const oldState = this.errorState;\n            const parent = this._parentFormGroup || this._parentForm;\n            const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n            const control = this.ngControl ? this.ngControl.control as FormControl : null;\n            const newState = matcher.isErrorState(control, parent);\n\n            if (newState !== oldState) {\n                this.errorState = newState;\n                this.stateChanges.next();\n            }\n        }\n    };\n}\n","export function getMcFormFieldMissingControlError(): Error {\n  return Error('mc-form-field must contain a McFormFieldControl.');\n}\n","export function getMcInputUnsupportedTypeError(inputType: string): Error {\n    return Error(`Input type \"${inputType}\" isn't supported by mcInput.`);\n}\n"],"names":["SELECT_PANEL_PADDING_X","this","options","reset","arrayOfInstances","notifyOnChanges","updateScrollSize","McTreeSelection","prototype","_getHeight","_elementRef","nativeElement","getClientRects","height","_emitNavigationEvent","option","navigationChange","emit","McTreeNavigationChange","_emitChangeEvent","selectionChange","_isValidIndex","index","length","_canDeselectLast","noUnselect","selectedOptions","selected","tslib_1.__decorate","ViewChild","CdkTreeNodeOutlet","tslib_1.__metadata","ContentChildren","forwardRef","McTreeNodeOption","QueryList","Input","Output","McTreeSelection_1","Component","exportAs","selector","template","host","[tabIndex]","class","role","(keydown)","(window:resize)","styles","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","providers","provide","CdkTree","useExisting","tslib_1.__param","Attribute","ElementRef","IterableDiffers","ChangeDetectorRef","String","_McTreeSelectionBase","MC_TREE_DIRECTIVES","McTreeNodeDef","McTreeNodePadding","McTreeModule","NgModule","imports","CommonModule","CdkTreeModule","exports","declarations","McTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","node","level","resultNodes","parentMap","_this","flatNode","push","pipe","take","subscribe","children","forEach","child","childParentMap","slice","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","McTreeFlatDataSource","_super","treeFlattener","initialData","call","_flattenedData","BehaviorSubject","_expandedData","_data","tslib_1.__extends","Object","defineProperty","get","value","set","next","data","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","onChange","merge","apply","map","disconnect","DataSource","McTreeNestedDataSource","arguments","McTagBase","_McTagMixinBase","mixinColor","McTag","elementRef","ngAfterContentInit","_addClassModificatorForIcons","icons","contentChildren","item","iconElement","previousElementSibling","nextElementSibling","nextSibling","classList","add","previousSibling","firstIconElement","secondIconElement","McIcon","inputs","McTagModule","PlatformModule","mcSelectAnimations","transformPanel","trigger","state","style","transform","minWidth","opacity","transition","group","query","animateChild","animate","fadeInContent","nextUniqueId","MC_SELECT_SCROLL_STRATEGY","InjectionToken","MC_SELECT_SCROLL_STRATEGY_PROVIDER","deps","Overlay","useFactory","MC_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","McSelectChange","source","McSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_McSelectMixinBase","mixinTabIndex","mixinDisabled","mixinErrorState","McSelectTrigger","Directive","McSelect","_viewportRuler","_changeDetectorRef","_ngZone","_renderer","_dir","_parentFormField","tabIndex","_scrollStrategyFactory","_triggerFontSize","_optionIds","_transformOrigin","_panelDoneAnimating","_panelDoneAnimatingStream","Subject","_scrollStrategy","_offsetY","_positions","originX","originY","overlayX","overlayY","controlType","optionSelectionChanges","defer","onSelectionChange","onStable","asObservable","switchMap","openedChange","EventEmitter","_openedStream","filter","o","_closedStream","valueChange","hiddenItems","_panelOpen","_required","_scrollTop","_multiple","_uid","_destroy","_focused","_onChange","_onTouched","_compareWith","o1","o2","valueAccessor","parseInt","id","McSelect_1","_placeholder","stateChanges","coerceBooleanProperty","_selectionModel","getMcSelectDynamicMultipleError","fn","getMcSelectNonFunctionValueError","_initializeSelection","_value","newValue","writeValue","_id","ngOnInit","SelectionModel","multiple","distinctUntilChanged","takeUntil","panelOpen","overlayDir","offsetX","markForCheck","_initKeyManager","event","added","select","removed","deselect","startWith","_resetOptions","ngAfterViewInit","tags","setTimeout","_calculateHiddenItems","ngDoCheck","updateErrorState","ngOnChanges","disabled","ngOnDestroy","complete","toggle","close","open","_triggerRect","getBoundingClientRect","getComputedStyle","_keyManager","withHorizontalOrientation","_calculateOverlayPosition","_highlightCorrectOption","overlayRef","overlayElement","fontSize","_isRtl","_setSelectionByValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","empty","viewValue","reverse","join","isEmpty","_handleKeydown","_handleOpenKeydown","_handleClosedKeydown","_onFadeInDone","_onFocus","_onBlur","_onAttached","positionChange","detectChanges","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","focus","_calculateOverlayScroll","selectedIndex","scrollBuffer","maxScroll","itemHeight","_getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","Math","min","max","onContainerClick","onRemoveMatcherItem","$event","stopPropagation","visibleItems","totalItemsWidth","_getTotalItemsWidthInMatcher","totalVisibleItemsWidth","tag","offsetTop","offsetHeight","width","itemsCounter","querySelector","matcherList","itemsCounterShowed","matcherListWidth","matcherWidth","triggerClone","cloneNode","remove","setStyle","appendChild","querySelectorAll","keyCode","isArrowKey","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","ENTER","SPACE","altKey","preventDefault","onKeydown","manager","HOME","END","setFirstItemActive","setLastItemActive","activeItem","A","ctrlKey","hasDeselectedOptions_1","some","previouslyFocusedIndex","activeItemIndex","shiftKey","_selectViaInteraction","Promise","resolve","then","Array","isArray","getMcSelectNonArrayValueError","clear","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","find","error","isDevMode","console","warn","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","tabOut","change","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","toArray","sort","a","b","sortComparator","indexOf","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getOptionIndex","reduce","result","current","undefined","items","_getItemCount","panelHeight","scrollContainerHeight","selectedOptionOffset","_calculateOverlayOffsetY","_checkOverlayWithinViewport","overlayRect","viewportSize","getViewportSize","isRtl","first","leftOverflow","left","rightOverflow","right","round","updatePosition","topSpaceAvailable","top","bottomSpaceAvailable","bottom","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","optionHeightAdjustment","ViewChildren","CdkConnectedOverlay","McOption","descendants","McOptgroup","ContentChild","ErrorStateMatcher","Observable","[attr.id]","[attr.tabindex]","[class.mc-disabled]","[class.mc-select-invalid]","[class.mc-select-required]","(focus)","(blur)","animations","McFormFieldControl","MC_OPTION_PARENT_COMPONENT","Optional","Self","Inject","ViewportRuler","NgZone","Renderer2","Directionality","NgForm","FormGroupDirective","McFormField","NgControl","McSelectModule","OverlayModule","McOptionModule","McIconModule","McFormFieldModule","VERSION","Version","setAttribute","encodeURI","McNavbarItem","dropdownItems","dropdownContent","denyClickIfDisabled","_focusMonitor$","_focusMonitor","monitor","hasDropdownContent","listenClickOutside","startListenFocusDropdownItems","_subscription","unsubscribe","stopMonitoring","stopListenFocusDropdownItems","isActiveDropdownLink","link","_platform","isBrowser","window","location","href","handleClickByItem","toggleDropdown","handleKeydown","isNavbarItem","target","contains","MC_NAVBAR_ITEM","handleClickByDropdownItem","forceCloseDropdown","origin","isCollapsed","_cdRef","_dropdownElements","el","events","eventListeners","removeEventListener","addEventListener","hasAttribute","stopImmediatePropagation","read","TemplateRef","[attr.disabled]","FocusMonitor","Platform","_McNavbarMixinBase","McNavbarContainer","position","HostBinding","MC_NAVBAR_CONTAINER","CollapsibleItem","element","_collapsed","processCollapsed","collapsed","updateCollapsedClass","CachedItemWidth","itemsForCollapse","_collapsedItemsWidth","calculateAndCacheCollapsedItemsWidth","updateTitle","acc","getTitle","computedTitle","getAttribute","decodeURI","innerText","removeAttribute","McNavbar","forceRecalculateItemsWidth","resizeDebounceInterval","firstLevelElement","secondLevelElements","MC_NAVBAR_BRAND","MC_NAVBAR_TITLE","resizeObserver","fromEvent","debounceTime","_resizeSubscription","updateCollapsed","bind","_itemsWidths","calculateAndCacheItemsWidth","_totalItemsWidths","calculateAndCacheTotalItemsWidth","collapseDelta","maxAllowedWidth","itemsWidths","canCollapse","collapsedItemsWidth","getOuterElementWidth","getPropertyValue","allItemsSelector","e","allItems","from","getItemsForCollapse","McNavbarModule","A11yModule","McNavbarTitle","McNavbarBrand","McNavbarLogo","idIterator","McProgressBarBase","_McProgressBarMixinBase","McProgressBar","mode","ThemePalette","Primary","McProgressBarModule","McProgressSpinnerBase","_McProgressPinnerMixinBase","McProgressSpinner","percentage","McProgressSpinnerModule","McRadioChange","McRadioGroupBase","_McRadioGroupMixinBase","MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","McRadioGroup","multi","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","controlValueAccessorChangeFn","onTouched","updateRadioButtonNames","v","markRadiosForCheck","updateSelectedRadioFromValue","checkSelectedRadioButton","toBoolean","checked","touch","emitChangeEvent","_radios","radio","name","isAlreadySelected","McRadioButton","McRadioButtonBase","_McRadioButtonMixinBase","radioGroup","_radioDispatcher","_uniqueId","isFocused","_checked","removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","required","labelPosition","onInputClick","onInputChange","groupValueChanged","[class.mc-radio-checked]","[class.mc-radio-disabled]","UniqueSelectionDispatcher","McRadioModule","McCommonModule","McTreeNodeDef_1","CdkTreeNodeDef","_baseLeftPadding","_iconWidth","_indent","McTreeNodePadding_1","_withIcon","_paddingIndent","nodeLevel","_treeNode","_tree","_level","leftPadding","_setPadding","CdkTreeNodePadding","treeSelection","_hasFocus","McTreeNodeOption_1","setSelected","setFocusedOption","_handleFocus","_handleBlur","_handleClick","tabindex","[class.mc-selected]","[class.mc-focused]","[attr.aria-expanded]","[attr.aria-level]","(click)","CdkTreeNode","McTreeSelectionChange","_differs","autoSelect","rawValue","log","_onKeyDown","withShift","withCtrl","collapse","toggleFocusedOption","PAGE_UP","setPreviousPageItemActive","PAGE_DOWN","setNextPageItemActive","FocusKeyManager","withScrollSize","floor","updateActiveItem","previousIndex_1","previousActiveItemIndex","activeIndex_1","focusedIndex","focusedOption","renderNodeChanges","dataDiffer","viewContainer","parentData","_dataDiffer","_nodeOutlet","_embeddedViews","view","viewDef","def","nodeMatchedQueries","matchedQueryIds","nodeData","nodeIndex","instance","McList","McListBase","McListSubheaderCssStyler","McListItemBase","McListItem","_element","_lineSetter","McLineSetter","_lines","_getHostElement","McLine","preserveWhitespaces","McListModule","McLineModule","McListSelection","McListOption","McLinkBase","_McLinkBase","McLink","McLinkModule","McModalControlService","parentService","rootOpenModals","rootAfterAllClose","rootRegisteredMetaMap","Map","afterAllClose","openModals","registeredMetaMap","registerModal","modalRef","hasRegistered","afterOpenSubscription","afterOpen","afterCloseSubscription","afterClose","removeOpenModal","has","closeAll","splice","Injectable","SkipSelf","McModalRef","ModalUtil","document","lastPosition","x","y","listenDocumentClick","getLastClickPosition","clientX","clientY","ModalUtil$1","McModalComponent","overlay","renderer","cfr","mcMeasureScrollbarService","modalControl","changeDetector","mcModalType","_mcVisible","mcVisibleChange","mcZIndex","mcWidth","mcCloseByESC","_mcClosable","_mcMask","_mcMaskClosable","mcAfterOpen","mcAfterClose","mcOkType","_mcOkLoading","mcOnOk","_mcCancelLoading","mcOnCancel","transformOrigin","mcGetContainer","create","mcOkText","mcCancelText","mcVisible","animationState","isComponent","mcContent","createDynamicComponent","isModalButtons","mcFooter","formatModalButtons","container","HTMLElement","OverlayRef","handleVisibleStateChange","firstChange","contentComponentRef","bodyContainer","insert","hostView","autoFocusButtonOk","dispose","changeVisibleFromInside","destroy","triggerOk","onClickOkCancel","triggerCancel","getInstance","getContentComponentRef","getContentComponent","getElement","onClickMask","mcMask","mcMaskClosable","isModalType","type","onKeyDown","ESCAPE","onClickCloseBtn","ok","cancel","loadingKey","caseClose_1","doClose","isPromise","handleThen","catch","isNonEmptyString","isTemplateRef","Type","visible","animation","closeResult","changeBodyOverflow","animateTo","getButtonCallableProp","prop","args","onButtonClick","button","loading","changeAnimationState","maskAnimationClassMap","_a","modalAnimationClassMap","_b","changeDetectorRef","isVisible","updateTransformOrigin","buttons","tslib_1.__assign","size","autoLoading","show","component","factory","resolveComponentFactory","childInjector","Injector","useValue","parent","parentInjector","mcComponentParams","assign","modalElement","modalContainer","offsetLeft","plusNum","body","scrollBarWidth","removeStyle","ViewContainerRef","DOCUMENT","ComponentFactoryResolver","McMeasureScrollbarService","CssUnitPipe","defaultUnit","formatted","isNaN","Pipe","ModalBuilderForService","createModal","changeProps","destroyModal","keydownEvents","attach","ComponentPortal","McModalService","confirm","confirmType","mcClassName","success","simpleConfirm","delete","McModalModule","McButtonModule","entryComponents","McNavbarItemBase","Subscription","[id]","[class.mc-checkbox-indeterminate]","[class.mc-checkbox-checked]","[class.mc-checkbox-disabled]","[class.mc-checkbox-label-before]","MC_CHECKBOX_CONTROL_VALUE_ACCESSOR","MC_CHECKBOX_CLICK_ACTION","McCheckbox","_McCheckboxMixinBase","MC_CHECKBOX_REQUIRED_VALIDATOR","NG_VALIDATORS","McCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","McCheckboxModule","McDivider","_vertical","_inset","[attr.aria-orientation]","[class.mc-divider-vertical]","[class.mc-divider-inset]","McDividerModule","McCleaner","McHint","McPrefix","McSuffix","McFormFieldBase","_McFormFieldMixinBase","_labelId","_validateControlChild","_control","valueChanges","EMPTY","ngAfterContentChecked","clearValue","focused","hasCleaner","_shouldForward","getMcFormFieldMissingControlError","_hint","_suffix","_prefix","_cleaner","[class.mc-form-field_invalid]","[class.mc-form-field_disabled]","[class.mc-form-field_has-prefix]","[class.mc-form-field_has-suffix]","[class.mc-form-field_has-cleaner]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","McFormFieldWithoutBorders","MC_INPUT_VALUE_ACCESSOR","MC_INPUT_INVALID_TYPES","McInputBase","_McInputMixinBase","McInput","inputValueAccessor","_type","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","McInput_1","_validateType","_dirtyCheckNativeValue","_focusChanged","_onInput","_isNeverEmpty","_isBadInput","getMcInputUnsupportedTypeError","validity","badInput","[attr.placeholder]","[disabled]","[required]","(input)","McInputMono","McInputModule","FormsModule","listSelection","checkboxPosition","_reportValueChange","wasSelected_1","_removeOptionFromList","getLabel","_text","textContent","MC_SELECTION_LIST_VALUE_ACCESSOR","McListSelectionChange","McListSelectionBase","_McListSelectionMixinBase","horizontal","_modelChanges","_","_tempValues","_setOptionsFromValues","_i","_c","selectAll","deselectAll","values","getSelectedOptionValues","listOption","optionIndex","setPreviousItemActive","setNextItemActive","_getOptionByValue","Boolean","Error","scrollStrategies","reposition","extendStatics","d","setPrototypeOf","__proto__","p","hasOwnProperty","__assign","s","n","MC_SANITY_CHECKS","providedIn","MC_SANITY_CHECKS_FACTORY","_sanityChecksEnabled","_hasDoneGlobalChecks","_document","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","createElement","computedStyle","display","removeChild","BidiModule","_setLineClass","count","_resetClasses","_setClass","className","isAdd","ShowOnDirtyErrorStateMatcher","isErrorState","control","form","invalid","dirty","submitted","touched","McPseudoCheckbox","[class.mc-pseudo-checkbox_indeterminate]","[class.mc-pseudo-checkbox_checked]","McPseudoCheckboxModule","scrollbarMeasure","overflow","initScrollBarWidth","_scrollbarWidth","scrollDiv","scrollProp","offsetWidth","clientWidth","McOptgroupBase","_McOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mc-optgroup-disabled]","[attr.aria-disabled]","[attr.aria-labelledby]","_uniqueIdCounter","McOptionSelectionChange","_parent","_active","_mostRecentViewValue","disableRipple","trim","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_getTabIndex","ngAfterViewChecked","[class.mc-option-multiple]","[class.mc-active]","MC_LABEL_GLOBAL_OPTIONS","McIconCSSStyler","McIconBase","_McIconMixinBase","iconName","McButtonCSSStyler","McXSButtonCSSStyler","McSMButtonCSSStyler","McLGButtonCSSStyler","McXLButtonCSSStyler","McIconButtonCSSStyler","queries","McButtonBase","_McButtonMixinBase","McButton","McAnchor","platform","focusMonitor","_haltDisabledEvents","McIconButton","TransitionCheckState","McCheckboxChange","McCheckboxBase","_clickAction","ariaLabel","ariaLabelledby","indeterminateChange","_currentAnimationClass","_currentCheckState","Init","_controlValueAccessorChangeFn","_indeterminate","_inputElement","focusOrigin","_onInputFocusChange","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_onLabelTextChange","_getAriaChecked","indeterminate","newState","oldState","_onInputClick","focusVia","_onInteractionEvent","__extends","__","constructor","__decorate","decorators","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","isBoolean","val","base","class_1","defaultColor","Default","_color","colorPalette","defaultTabIndex","_tabIndex","errorState","matcher","errorStateMatcher","optionsArray","groups","groupCounter","optionHeight","currentScrollPosition","optionOffset","inputType","obj"],"mappings":"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"}