{"version":3,"file":"mosaic.umd.min.js","sources":["../../packages/mosaic/tooltip/tooltip.component.ts","../../packages/mosaic/tooltip/tooltip.module.ts","../../packages/mosaic/vertical-navbar/vertical-navbar-item.component.ts","../../packages/mosaic/vertical-navbar/vertical-navbar.component.ts","../../packages/mosaic/vertical-navbar/vertical-navbar.module.ts","../../packages/mosaic/version.ts","../../packages/mosaic/core/select/events.ts","../../packages/mosaic/core/select/constants.ts","../../packages/mosaic/autocomplete/autocomplete-trigger.directive.ts","../../packages/mosaic/dropdown/dropdown-trigger.ts","../../packages/mosaic/select/select.component.ts","../../packages/mosaic/timepicker/timepicker.constants.ts","../../packages/mosaic/sidepanel/sidepanel-container.component.ts","../../packages/mosaic/sidepanel/sidepanel-ref.ts","../../packages/mosaic/sidepanel/sidepanel.service.ts","../../packages/mosaic/sidepanel/sidepanel-directives.ts","../../packages/mosaic/sidepanel/sidepanel.module.ts","../../packages/mosaic/splitter/splitter.component.ts","../../packages/mosaic/splitter/splitter.module.ts","../../packages/mosaic/toggle/toggle.component.ts","../../packages/mosaic/toggle/toggle.module.ts","../../packages/mosaic/tree-select/tree-select.component.ts","../../packages/mosaic/tree-select/tree-select.module.ts","../../packages/mosaic/textarea/textarea.component.ts","../../packages/mosaic/textarea/textarea.module.ts","../../packages/mosaic/timepicker/timepicker.ts","../../packages/mosaic/timepicker/timepicker.module.ts","../../packages/mosaic/sidepanel/sidepanel-config.ts","../../packages/mosaic/sidepanel/sidepanel-animations.ts","../../packages/mosaic/tags/tag-input.ts","../../packages/mosaic/tags/tag.module.ts","../../packages/mosaic/select/select.module.ts","../../packages/mosaic/tabs/tab-group.ts","../../packages/mosaic/tabs/tab-nav-bar/tab-nav-bar.ts","../../packages/mosaic/tabs/tabs.module.ts","../../packages/mosaic/tags/tag-default-options.ts","../../packages/mosaic/tags/tag.component.ts","../../packages/mosaic/tags/tag-list.component.ts","../../packages/mosaic/tree/node.ts","../../packages/mosaic/tree/padding.ts","../../packages/mosaic/tree/toggle.ts","../../packages/mosaic/tree/tree-option.ts","../../packages/mosaic/tree/tree-selection.ts","../../packages/mosaic/tree/tree.module.ts","../../packages/mosaic/tree/data-source/flat-data-source.ts","../../packages/mosaic/tree/data-source/nested-data-source.ts","../../packages/mosaic/tabs/tab-content.ts","../../packages/mosaic/tabs/tab-label.ts","../../packages/mosaic/tabs/tab.ts","../../packages/mosaic/tabs/tabs-animations.ts","../../packages/mosaic/tabs/tab-body.ts","../../packages/mosaic/tabs/tab-label-wrapper.ts","../../packages/mosaic/tabs/tab-header.ts","../../packages/mosaic/modal/modal.component.ts","../../packages/mosaic/modal/css-unit.pipe.ts","../../packages/mosaic/modal/modal.service.ts","../../packages/mosaic/modal/modal.module.ts","../../packages/mosaic/navbar/navbar.component.ts","../../packages/mosaic/navbar/navbar.module.ts","../../packages/mosaic/progress-bar/progress-bar.component.ts","../../packages/mosaic/progress-bar/progress-bar.module.ts","../../packages/mosaic/progress-spinner/progress-spinner.component.ts","../../packages/mosaic/progress-spinner/progress-spinner.module.ts","../../packages/mosaic/radio/radio.component.ts","../../packages/mosaic/radio/radio.module.ts","../../packages/mosaic/list/list-selection.component.ts","../../packages/mosaic/list/list.component.ts","../../packages/mosaic/list/list.module.ts","../../packages/mosaic/link/link.component.ts","../../packages/mosaic/link/link.module.ts","../../packages/mosaic/modal/modal-control.service.ts","../../packages/mosaic/modal/modal-ref.class.ts","../../packages/mosaic/modal/modal-util.ts","../../packages/mosaic/datepicker/datepicker-input.ts","../../packages/mosaic/datepicker/datepicker-toggle.ts","../../packages/mosaic/datepicker/datepicker-module.ts","../../packages/mosaic/divider/divider.component.ts","../../packages/mosaic/divider/divider.module.ts","../../packages/mosaic/dropdown/dropdown-content.ts","../../packages/mosaic/dropdown/dropdown-panel.ts","../../packages/mosaic/dropdown/dropdown-item.ts","../../packages/mosaic/dropdown/dropdown-animations.ts","../../packages/mosaic/dropdown/dropdown.component.ts","../../packages/mosaic/dropdown/dropdown.module.ts","../../packages/mosaic/layout/content.component.ts","../../packages/mosaic/layout/footer.component.ts","../../packages/mosaic/layout/header.component.ts","../../packages/mosaic/layout/layout.component.ts","../../packages/mosaic/layout/sidebar.component.ts","../../packages/mosaic/layout/layout.module.ts","../../packages/mosaic/datepicker/multi-year-view.ts","../../packages/mosaic/datepicker/year-view.ts","../../packages/mosaic/datepicker/calendar.ts","../../packages/mosaic/datepicker/datepicker-animations.ts","../../packages/mosaic/datepicker/datepicker.ts","../../packages/mosaic/card/card.component.ts","../../packages/mosaic/card/card.module.ts","../../packages/mosaic/checkbox/checkbox-config.ts","../../packages/mosaic/checkbox/checkbox.ts","../../packages/mosaic/checkbox/checkbox-required-validator.ts","../../packages/mosaic/checkbox/checkbox-module.ts","../../packages/mosaic/input/input-value-accessor.ts","../../packages/mosaic/input/stepperUtils.ts","../../packages/mosaic/input/input.ts","../../packages/mosaic/input/input-number-validators.ts","../../packages/mosaic/input/input.module.ts","../../packages/mosaic/datepicker/datepicker-intl.ts","../../packages/mosaic/datepicker/calendar-body.ts","../../packages/mosaic/datepicker/month-view.ts","../../packages/mosaic/autocomplete/autocomplete.component.ts","../../packages/mosaic/autocomplete/autocomplete-origin.directive.ts","../../packages/mosaic/autocomplete/autocomplete.module.ts","../../packages/mosaic/button/button.component.ts","../../packages/mosaic/button/button.module.ts","../../packages/mosaic/button-toggle/button-toggle.component.ts","../../packages/mosaic/button-toggle/button-toggle.module.ts","../../node_modules/tslib/tslib.es6.js","../../packages/mosaic/core/utils/utils.ts","../../packages/mosaic/core/common-behaviors/common-module.ts","../../packages/mosaic/core/common-behaviors/disabled.ts","../../packages/mosaic/core/common-behaviors/color.ts","../../packages/mosaic/core/common-behaviors/tabindex.ts","../../packages/mosaic/core/common-behaviors/error-state.ts","../../packages/mosaic/core/option/option.ts","../../packages/mosaic/core/overlay/overlay-position-map.ts","../../packages/mosaic/core/select/errors.ts","../../packages/mosaic/form-field/form-field-errors.ts","../../packages/mosaic/input/input-errors.ts","../../packages/mosaic/datepicker/datepicker-errors.ts","../../packages/mosaic/dropdown/dropdown-errors.ts","../../packages/mosaic/vertical-navbar/vertical-navbar.animation.ts","../../packages/mosaic/core/line/line.ts","../../packages/mosaic/core/error/error-options.ts","../../packages/mosaic/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../packages/mosaic/core/selection/index.ts","../../packages/mosaic/core/services/measure-scrollbar.service.ts","../../packages/mosaic/core/option/optgroup.ts","../../packages/mosaic/core/option/index.ts","../../packages/mosaic/core/label/label-options.ts","../../packages/mosaic/core/animation/fade-animations.ts","../../packages/mosaic/core/animation/animation.ts","../../packages/mosaic/core/select/animations.ts","../../packages/mosaic/icon/icon.component.ts","../../packages/mosaic/icon/icon.module.ts","../../packages/mosaic/form-field/cleaner.ts","../../packages/mosaic/form-field/form-field-control.ts","../../packages/mosaic/form-field/form-field-number-control.ts","../../packages/mosaic/form-field/hint.ts","../../packages/mosaic/form-field/prefix.ts","../../packages/mosaic/form-field/stepper.ts","../../packages/mosaic/form-field/suffix.ts","../../packages/mosaic/form-field/form-field.ts","../../packages/mosaic/form-field/form-field.module.ts"],"sourcesContent":["import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    TemplateRef,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport {\n    ConnectedOverlayPositionChange,\n    ConnectionPositionPair,\n    Overlay,\n    OverlayRef,\n    ScrollDispatcher,\n    IScrollStrategy,\n    FlexibleConnectedPositionStrategy,\n    IOverlayConnectionPosition,\n    IOriginConnectionPosition,\n    HorizontalConnectionPos,\n    VerticalConnectionPos\n} from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal } from '@ptsecurity/cdk/portal';\nimport {\n    fadeAnimation,\n    DEFAULT_4_POSITIONS,\n    POSITION_MAP\n} from '@ptsecurity/mosaic/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators';\n\n\n@Component({\n    selector: 'mc-tooltip-component',\n    inputs: [\n        'mcMouseEnterDelay',\n        'mcMouseLeaveDelay',\n        'mcTitle',\n        'mcVisible',\n        'mcTrigger',\n        'mcPlacement'\n    ],\n    outputs: ['mcVisibleChange'],\n    animations: [ fadeAnimation ],\n    templateUrl: './tooltip.component.html',\n    preserveWhitespaces: false,\n    styleUrls: ['./tooltip.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '(body:click)': 'this.handleBodyInteraction()'\n    }\n})\nexport class McTooltipComponent {\n    prefix = 'mc-tooltip_placement';\n    positions: ConnectionPositionPair[] = [ ...DEFAULT_4_POSITIONS ];\n    classMap = {};\n    isTitleString: boolean;\n    showTid: number;\n    hideTid: number;\n    availablePositions: any;\n    $visible: Observable<boolean>;\n\n    @Output() mcVisibleChange: EventEmitter<boolean> = new EventEmitter();\n\n    @Input() mcMouseEnterDelay = 400;\n\n    @Input() mcMouseLeaveDelay = 0;\n\n    @Input()\n    get mcTitle(): string | TemplateRef<void> {\n        return this._mcTitle;\n    }\n    set mcTitle(value: string | TemplateRef<void>) {\n        this.isTitleString = !(value instanceof TemplateRef);\n\n        if (this.isTitleString) {\n            this._mcTitle = value;\n        }\n    }\n    private _mcTitle: string | TemplateRef<void>;\n\n    @Input()\n    get mcTrigger(): string {\n        return this._mcTrigger;\n    }\n    set mcTrigger(value: string) {\n        this._mcTrigger = value;\n    }\n    private _mcTrigger: string = 'hover';\n\n    @Input()\n    get mcPlacement(): string {\n        return this._mcPlacement;\n    }\n    set mcPlacement(value: string) {\n        if (value !== this._mcPlacement) {\n            this._mcPlacement = value;\n            this.positions.unshift(POSITION_MAP[ this.mcPlacement ]);\n        } else if (!value) {\n            this._mcPlacement = 'top';\n        }\n    }\n    private _mcPlacement: string = 'top';\n\n    @Input()\n    get mcVisible(): boolean {\n        return this._mcVisible.value;\n    }\n    set mcVisible(value: boolean) {\n        const visible = coerceBooleanProperty(value);\n\n        if (this._mcVisible.value !== visible) {\n            this._mcVisible.next(visible);\n            this.mcVisibleChange.emit(visible);\n        }\n    }\n    private _mcVisible: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n    /** Subject for notifying that the tooltip has been hidden from the view */\n    private readonly onHideSubject: Subject<any> = new Subject();\n    private closeOnInteraction: boolean = false;\n\n    constructor(public cdr: ChangeDetectorRef) {\n        this.availablePositions = POSITION_MAP;\n        this.$visible = this._mcVisible.asObservable();\n    }\n\n    show(): void {\n        if (this.hideTid) {\n            clearTimeout(this.hideTid);\n        }\n\n        if (!this.isContentEmpty()) {\n            if (this.mcTrigger !== 'manual') {\n                this.closeOnInteraction = true;\n            }\n            this.showTid = setTimeout(() => {\n                this.mcVisible = true;\n                this.mcVisibleChange.emit(true);\n\n                // Mark for check so if any parent component has set the\n                // ChangeDetectionStrategy to OnPush it will be checked anyways\n                this.markForCheck();\n            }, this.mcMouseEnterDelay);\n        }\n    }\n\n    hide(): void {\n        if (this.showTid) {\n            clearTimeout(this.showTid);\n        }\n\n        this.hideTid = setTimeout(() => {\n            this.mcVisible = false;\n            this.mcVisibleChange.emit(false);\n            this.onHideSubject.next();\n\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this.markForCheck();\n        }, this.mcMouseLeaveDelay);\n    }\n\n    setClassMap(): void {\n        this.classMap = `${this.prefix}-${this.mcPlacement}`;\n    }\n\n    isContentEmpty(): boolean {\n        return this.isTitleString ? (this.mcTitle === '' || !this.mcTitle) : false;\n    }\n\n    /** Returns an observable that notifies when the tooltip has been hidden from view. */\n    afterHidden(): Observable<void> {\n        return this.onHideSubject.asObservable();\n    }\n\n    markForCheck(): void {\n        this.cdr.markForCheck();\n    }\n\n    handleBodyInteraction(): void {\n        if (this.closeOnInteraction) {\n            this.hide();\n        }\n    }\n}\n\nexport const MC_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function mcTooltipScrollStrategyFactory(overlay: Overlay): () => IScrollStrategy {\n    return () => overlay.scrollStrategies.reposition({scrollThrottle: 20});\n}\n\n/** @docs-private */\nexport const MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_TOOLTIP_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: mcTooltipScrollStrategyFactory\n};\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMcTooltipInvalidPositionError(position: string) {\n    return Error(`McTooltip position \"${position}\" is invalid.`);\n}\n\nconst VIEWPORT_MARGIN: number = 8;\n\n@Directive({\n    selector: '[mcTooltip], [attribute^=\"mcTooltip\"]',\n    exportAs: 'mcTooltip',\n    host: {\n        '(keydown)': 'handleKeydown($event)',\n        '(touchend)': 'handleTouchend()'\n    }\n})\nexport class McTooltip implements OnInit, OnDestroy {\n    isTooltipOpen: boolean = false;\n    isDynamicTooltip = false;\n    parentDisabled: boolean = false;\n    overlayRef: OverlayRef | null;\n    portal: ComponentPortal<McTooltipComponent>;\n    availablePositions: any;\n    tooltip: McTooltipComponent | null;\n\n    @Output() mcVisibleChange = new EventEmitter<boolean>();\n    private $unsubscribe = new Subject<void>();\n\n    @Input('mcTooltip')\n    get mcTitle(): string {\n        return this._mcTitle;\n    }\n    set mcTitle(title: string) {\n        this._mcTitle = title;\n        this.updateCompValue('mcTitle', title);\n    }\n    private _mcTitle: string;\n\n    @Input('mcTitle')\n    set setTitle(title: string) {\n        this.mcTitle = title;\n    }\n\n    @Input('mcTooltipDisabled')\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this.updateCompValue('mcTooltipDisabled', value);\n    }\n    private _disabled: boolean = false;\n\n    @Input('mcMouseEnterDelay')\n    get mcMouseEnterDelay(): number {\n        return this._mcMouseEnterDelay;\n    }\n    set mcMouseEnterDelay(value: number) {\n        this._mcMouseEnterDelay = value;\n        this.updateCompValue('mcMouseEnterDelay', value);\n    }\n    private _mcMouseEnterDelay: number;\n\n    @Input('mcMouseLeaveDelay')\n    get mcMouseLeaveDelay(): number {\n        return this._mcMouseLeaveDelay;\n    }\n    set mcMouseLeaveDelay(value: number) {\n        this._mcMouseLeaveDelay = value;\n        this.updateCompValue('mcMouseLeaveDelay', value);\n    }\n    private _mcMouseLeaveDelay: number;\n\n    @Input('mcTrigger')\n    get mcTrigger(): string {\n        return this._mcTrigger;\n    }\n    set mcTrigger(value: string) {\n        if (value) {\n            this._mcTrigger = value;\n            this.updateCompValue('mcTrigger', value);\n        } else {\n            this._mcTrigger = 'hover';\n        }\n    }\n    private _mcTrigger: string = 'hover';\n\n    @Input('mcPlacement')\n    get mcPlacement(): string {\n        return this._mcPlacement;\n    }\n    set mcPlacement(value: string) {\n        if (value) {\n            this._mcPlacement = value;\n            this.updateCompValue('mcPlacement', value);\n        } else {\n            this._mcPlacement = 'top';\n        }\n    }\n    private _mcPlacement: string = 'top';\n\n    @Input('mcTooltipClass')\n    get mcTooltipClass() { return this._mcTooltipClass; }\n    set mсTooltipClass(value: string | string[] | Set<string> | {[key: string]: any}) {\n        this._mcTooltipClass = value;\n\n        if (this.tooltip) {\n            this.tooltip.setClassMap();\n        }\n    }\n    private _mcTooltipClass: string | string[] | Set<string> | {[key: string]: any};\n\n    @Input('mcVisible')\n    get mcVisible(): boolean {\n        return this._mcVisible;\n    }\n    set mcVisible(externalValue: boolean) {\n        const value = coerceBooleanProperty(externalValue);\n        this._mcVisible = value;\n        this.updateCompValue('mcVisible', value);\n\n        if (value) {\n            this.show();\n        } else {\n            this.hide();\n        }\n    }\n    private _mcVisible: boolean;\n\n    @HostBinding('class.mc-tooltip-open')\n    get isOpen(): boolean {\n        return this.isTooltipOpen;\n    }\n\n    @HostBinding('class.disabled')\n    get isParentDisabled(): boolean {\n        return this.parentDisabled;\n    }\n\n    private manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n    private readonly destroyed = new Subject<void>();\n\n    constructor(\n        private overlay: Overlay,\n        private elementRef: ElementRef,\n        private ngZone: NgZone,\n        private scrollDispatcher: ScrollDispatcher,\n        private hostView: ViewContainerRef,\n        @Inject(MC_TOOLTIP_SCROLL_STRATEGY) private scrollStrategy,\n        @Optional() private direction: Directionality) {\n            this.availablePositions = POSITION_MAP;\n        }\n\n    /** Create the overlay config and position strategy */\n    createOverlay(): OverlayRef {\n        if (this.overlayRef) {\n            return this.overlayRef;\n        }\n\n        // Create connected position strategy that listens for scroll events to reposition.\n        const strategy = this.overlay.position()\n            .flexibleConnectedTo(this.elementRef)\n            .withTransformOriginOn('.mc-tooltip')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(VIEWPORT_MARGIN)\n            .withPositions([ ...DEFAULT_4_POSITIONS ]);\n\n        const scrollableAncestors = this.scrollDispatcher\n            .getAncestorScrollContainers(this.elementRef);\n\n        strategy.withScrollableContainers(scrollableAncestors);\n\n        strategy.positionChanges.pipe(takeUntil(this.destroyed)).subscribe((change) => {\n            if (this.tooltip) {\n                this.onPositionChange(change);\n                if (change.scrollableViewProperties.isOverlayClipped && this.tooltip.mcVisible) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the tooltip.\n                    this.ngZone.run(() => this.hide());\n                }\n            }\n        });\n\n        this.overlayRef = this.overlay.create({\n            direction: this.direction,\n            positionStrategy: strategy,\n            panelClass: 'mc-tooltip-panel',\n            scrollStrategy: this.scrollStrategy()\n        });\n\n        this.updatePosition();\n\n        this.overlayRef.detachments()\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(() => this.detach());\n\n        return this.overlayRef;\n    }\n\n    detach() {\n        if (this.overlayRef && this.overlayRef.hasAttached()) {\n            this.overlayRef.detach();\n        }\n\n        this.tooltip = null;\n    }\n\n    onPositionChange($event: ConnectedOverlayPositionChange): void {\n        let updatedPlacement = this.mcPlacement;\n        Object.keys(this.availablePositions).some((key) => {\n            if ($event.connectionPair.originX === this.availablePositions[key].originX &&\n                $event.connectionPair.originY === this.availablePositions[key].originY &&\n                $event.connectionPair.overlayX === this.availablePositions[key].overlayX &&\n                $event.connectionPair.overlayY === this.availablePositions[key].overlayY) {\n                updatedPlacement = key;\n\n                return true;\n            }\n\n            return false;\n        });\n        this.updateCompValue('mcPlacement', updatedPlacement);\n\n        if (this.tooltip) {\n            this.tooltip.setClassMap();\n            this.tooltip.markForCheck();\n        }\n\n        this.handlePositioningUpdate();\n    }\n\n    handlePositioningUpdate() {\n        if (!this.overlayRef) {\n            this.overlayRef = this.createOverlay();\n        }\n        if (this.mcPlacement === 'right' || this.mcPlacement === 'left') {\n            const pos =\n                (this.overlayRef.overlayElement.clientHeight -\n                    this.hostView.element.nativeElement.clientHeight) / 2; // tslint:disable-line\n            const currentContainer = this.overlayRef.overlayElement.style.top || '0px';\n            this.overlayRef.overlayElement.style.top =\n                `${parseInt(currentContainer.split('px')[0], 10) + pos - 1}px`;\n            // TODO: обновлять положение стрелки\\указателя\\\"дятла\"\n        }\n    }\n\n    // tslint:disable-next-line:no-any\n    updateCompValue(key: string, value: any): void {\n        if (this.isDynamicTooltip && value) {\n            if (this.tooltip) {\n                this.tooltip[key] = value;\n            }\n        }\n    }\n\n    ngOnInit(): void {\n        this.initElementRefListeners();\n    }\n\n    ngOnDestroy(): void {\n        if (this.overlayRef) {\n            this.overlayRef.dispose();\n        }\n        this.manualListeners.forEach((listener, event) =>\n            this.elementRef.nativeElement.removeEventListener(event, listener));\n        this.manualListeners.clear();\n\n        this.$unsubscribe.next();\n        this.$unsubscribe.complete();\n    }\n\n    handleKeydown(e: KeyboardEvent) {\n        if (this.isTooltipOpen && e.keyCode === ESCAPE) { // tslint:disable-line\n            this.hide();\n        }\n    }\n\n    handleTouchend() {\n        this.hide();\n    }\n\n    initElementRefListeners() {\n        if (this.mcTrigger === 'hover') {\n\n            this.manualListeners\n                .set('mouseenter', () => this.show())\n                .set('mouseleave', () => this.hide())\n                .forEach((listener, event) => this.elementRef.nativeElement.addEventListener(event, listener));\n        }\n\n        if (this.mcTrigger === 'focus') {\n\n            this.manualListeners\n                .set('focus', () => this.show())\n                .set('blur', () => this.hide())\n                .forEach((listener, event) => this.elementRef.nativeElement.addEventListener(event, listener));\n        }\n    }\n\n    show(): void {\n        if (!this.disabled) {\n            if (!this.tooltip) {\n                const overlayRef = this.createOverlay();\n                this.detach();\n\n                this.portal = this.portal || new ComponentPortal(McTooltipComponent, this.hostView);\n\n                this.tooltip = overlayRef.attach(this.portal).instance;\n                this.tooltip.afterHidden()\n                    .pipe(takeUntil(this.destroyed))\n                    .subscribe(() => this.detach());\n                this.isDynamicTooltip = true;\n                const properties = [\n                    'mcTitle',\n                    'mcPlacement',\n                    'mcTrigger',\n                    'mcTooltipDisabled',\n                    'mcMouseEnterDelay',\n                    'mcMouseLeaveDelay',\n                    'mсTooltipClass',\n                    'mcVisible'\n                ];\n                properties.forEach((property) => this.updateCompValue(property, this[ property ]));\n                this.tooltip.mcVisibleChange.pipe(takeUntil(this.$unsubscribe), distinctUntilChanged())\n                    .subscribe((data) => {\n                        this.mcVisible = data;\n                        this.mcVisibleChange.emit(data);\n                        this.isTooltipOpen = data;\n                    });\n            }\n            this.updatePosition();\n            this.tooltip.show();\n        }\n    }\n\n    hide(): void {\n        if (this.tooltip) {\n            this.tooltip.hide();\n        }\n    }\n\n    /** Updates the position of the current tooltip. */\n    updatePosition() {\n        if (!this.overlayRef) {\n            this.overlayRef = this.createOverlay();\n        }\n        const position =\n            this.overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n        const origin = this.getOrigin();\n        const overlay = this.getOverlayPosition();\n\n        position.withPositions([\n            {...origin.main, ...overlay.main},\n            {...origin.fallback, ...overlay.fallback}\n        ]);\n    }\n\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    getOrigin(): {main: IOriginConnectionPosition; fallback: IOriginConnectionPosition} {\n        const position = this.mcPlacement;\n        const isLtr = !this.direction || this.direction.value === 'ltr';\n        let originPosition: IOriginConnectionPosition;\n\n        if (position === 'top' || position === 'bottom') {\n            originPosition = {originX: 'center', originY: position === 'top' ? 'top' : 'bottom'};\n        } else if (\n            position === 'top' ||\n            (position === 'left' && isLtr) ||\n            (position === 'right' && !isLtr)) {\n            originPosition = {originX: 'start', originY: 'center'};\n        } else if (\n            position === 'bottom' ||\n            (position === 'right' && isLtr) ||\n            (position === 'left' && !isLtr)) {\n            originPosition = {originX: 'end', originY: 'center'};\n        } else {\n            throw getMcTooltipInvalidPositionError(position);\n        }\n\n        const {x, y} = this.invertPosition(originPosition.originX, originPosition.originY);\n\n        return {\n            main: originPosition,\n            fallback: {originX: x, originY: y}\n        };\n    }\n\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    getOverlayPosition(): {main: IOverlayConnectionPosition; fallback: IOverlayConnectionPosition} {\n        const position = this.mcPlacement;\n        const isLtr = !this.direction || this.direction.value === 'ltr';\n        let overlayPosition: IOverlayConnectionPosition;\n\n        if (position === 'top') {\n            overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n        } else if (position === 'bottom') {\n            overlayPosition = {overlayX: 'center', overlayY: 'top'};\n        } else if (\n            position === 'top' ||\n            (position === 'left' && isLtr) ||\n            (position === 'right' && !isLtr)) {\n            overlayPosition = {overlayX: 'end', overlayY: 'center'};\n        } else if (\n            position === 'bottom' ||\n            (position === 'right' && isLtr) ||\n            (position === 'left' && !isLtr)) {\n            overlayPosition = {overlayX: 'start', overlayY: 'center'};\n        } else {\n            throw getMcTooltipInvalidPositionError(position);\n        }\n\n        const {x, y} = this.invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n        return {\n            main: overlayPosition,\n            fallback: {overlayX: x, overlayY: y}\n        };\n    }\n\n    /** Inverts an overlay position. */\n    private invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n        let newX: HorizontalConnectionPos = x;\n        let newY: VerticalConnectionPos = y;\n        if (this.mcPlacement === 'top' || this.mcPlacement === 'bottom') {\n            if (y === 'top') {\n                newY = 'bottom';\n            } else if (y === 'bottom') {\n                newY = 'top';\n            }\n        } else {\n            if (x === 'end') {\n                newX = 'start';\n            } else if (x === 'start') {\n                newX = 'end';\n            }\n        }\n\n        return {x: newX, y: newY};\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\n\nimport {\n    McTooltipComponent,\n    McTooltip,\n    MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './tooltip.component';\n\n\n@NgModule({\n    declarations: [McTooltipComponent, McTooltip],\n    exports: [McTooltipComponent, McTooltip],\n    imports: [CommonModule, OverlayModule],\n    providers: [MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],\n    entryComponents: [McTooltipComponent]\n})\nexport class McToolTipModule {\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Input,\n    ViewEncapsulation,\n    Directive,\n    ElementRef,\n    OnDestroy,\n    Optional,\n    Self\n} from '@angular/core';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { CanDisable, mixinDisabled, CanDisableCtor } from '@ptsecurity/mosaic/core';\nimport { McDropdownTrigger } from '@ptsecurity/mosaic/dropdown';\n\n\n@Directive({\n    selector: 'mc-vertical-navbar-item-icon',\n    host: {\n        class: 'mc-vertical-navbar__item-icon'\n    }\n})\nexport class McVerticalNavbarItemIcon {}\n\n\n@Component({\n    selector: 'mc-vertical-navbar-badge',\n    template: `\n        <span class=\"mc-badge mc-badge_light\">\n            <ng-content></ng-content>\n        </span>\n    `,\n    host: {\n        class: 'mc-vertical-navbar__badge'\n    }\n})\nexport class McVerticalNavbarItemBadge {}\n\n\nclass McVerticalNavbarItemBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McVerticalNavbarMixinBase: CanDisableCtor & typeof McVerticalNavbarItemBase\n    = mixinDisabled(McVerticalNavbarItemBase);\n\n\n@Component({\n    selector: 'a[mc-vertical-navbar-item], mc-vertical-navbar-item',\n    templateUrl: './vertical-navbar-item.component.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    styleUrls: ['./vertical-navbar-item.component.css'],\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': 'disabled ? -1 : 0'\n    }\n})\nexport class McVerticalNavbarItem extends _McVerticalNavbarMixinBase implements CanDisable, OnDestroy {\n    @Input() tabIndex: number = 0;\n\n    constructor(\n        private element: ElementRef,\n        private focusMonitor: FocusMonitor,\n        @Optional() @Self() private trigger: McDropdownTrigger\n    ) {\n        super(element);\n\n        this.focusMonitor.monitor(this.element.nativeElement).subscribe();\n    }\n\n    get hasDropdownAttached() {\n        return !! this.trigger;\n    }\n\n    ngOnDestroy() {\n        this.focusMonitor.stopMonitoring(this.element.nativeElement);\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ViewEncapsulation,\n    Input,\n    ChangeDetectorRef\n} from '@angular/core';\n\nimport { toggleVerticalNavbarAnimation } from './vertical-navbar.animation';\n\n\n@Directive({\n    selector: 'mc-vertical-navbar-header, a[mc-vertical-navbar-header]',\n    host: {\n        class: 'mc-vertical-navbar__header'\n    }\n})\nexport class McVerticalNavbarHeader {}\n\n@Directive({\n    selector: 'mc-vertical-navbar-title',\n    host: {\n        class: 'mc-vertical-navbar__title'\n    }\n})\nexport class McVerticalNavbarTitle {}\n\n@Component({\n    selector: 'mc-vertical-navbar',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    templateUrl: './vertical-navbar.component.html',\n    styleUrls: ['./vertical-navbar.component.css'],\n    encapsulation: ViewEncapsulation.None,\n    animations: [\n        toggleVerticalNavbarAnimation()\n    ]\n})\nexport class McVerticalNavbar {\n\n    @Input() expanded: boolean = false;\n\n    constructor(\n        private cd: ChangeDetectorRef\n    ) {}\n\n    toggle() {\n        this.expanded = !this.expanded;\n        this.cd.markForCheck();\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport {\n    McVerticalNavbarItem,\n    McVerticalNavbarItemBadge,\n    McVerticalNavbarItemIcon\n} from './vertical-navbar-item.component';\nimport { McVerticalNavbar, McVerticalNavbarHeader, McVerticalNavbarTitle } from './vertical-navbar.component';\n\n\nconst COMPONENTS = [\n    McVerticalNavbar,\n    McVerticalNavbarTitle,\n    McVerticalNavbarItem,\n    McVerticalNavbarItemIcon,\n    McVerticalNavbarItemBadge,\n    McVerticalNavbarHeader\n];\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        McIconModule\n    ],\n    exports: COMPONENTS,\n    declarations: COMPONENTS\n})\nexport class McVerticalNavbarModule {}\n","import { Version } from '@angular/core';\n\n\nexport const VERSION = new Version('1.0.0-beta.6-43ac4ab');\n","export const selectEvents = 'selectEvents';\n","import { InjectionToken } from '@angular/core';\nimport { IScrollStrategy, Overlay, RepositionScrollStrategy } from '@ptsecurity/cdk/overlay';\n\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 224;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 1;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\n/* tslint:disable-next-line:no-magic-numbers */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MC_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-select-scroll-strategy');\n\n/** @docs-private */\nexport function mcSelectScrollStrategyProviderFactory(overlay: Overlay):\n    () => RepositionScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MC_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MC_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: mcSelectScrollStrategyProviderFactory\n};\n","import { DOCUMENT } from '@angular/common';\nimport {\n    ChangeDetectorRef,\n    Directive,\n    ElementRef,\n    forwardRef,\n    Host,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    Optional,\n    ViewContainerRef\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW } from '@ptsecurity/cdk/keycodes';\nimport {\n    FlexibleConnectedPositionStrategy,\n    Overlay,\n    OverlayConfig,\n    OverlayRef,\n    IPositionStrategy,\n    IScrollStrategy, IConnectedPosition\n} from '@ptsecurity/cdk/overlay';\nimport { TemplatePortal } from '@ptsecurity/cdk/portal';\nimport { ViewportRuler } from '@ptsecurity/cdk/scrolling';\nimport {\n    countGroupLabelsBeforeOption,\n    getOptionScrollPosition,\n    McOption,\n    McOptionSelectionChange\n} from '@ptsecurity/mosaic/core';\nimport { McFormField } from '@ptsecurity/mosaic/form-field';\nimport { Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable } from 'rxjs';\nimport { filter, take, switchMap, delay, tap, map } from 'rxjs/operators';\n\nimport { McAutocompleteOrigin } from './autocomplete-origin.directive';\nimport { McAutocomplete } from './autocomplete.component';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 32;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\nexport const AUTOCOMPLETE_BORDER_WIDTH: number = 2;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MC_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-autocomplete-scroll-strategy');\n\n// tslint:disable-next-line naming-convention\nexport function MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => IScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\nexport const MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McAutocompleteTrigger),\n    multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMcAutocompleteMissingPanelError(): Error {\n    return Error('Attempting to open an undefined instance of `mc-autocomplete`. ' +\n        'Make sure that the id passed to the `mcAutocomplete` is correct and that ' +\n        'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n    selector: `input[mcAutocomplete], textarea[mcAutocomplete]`,\n    host: {\n        class: 'mc-autocomplete-trigger',\n        '[attr.autocomplete]': 'autocompleteAttribute',\n        // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n        // a little earlier. This avoids issues where IE delays the focusing of the input.\n        '(focusin)': 'handleFocus()',\n        '(blur)': 'onTouched()',\n        '(input)': 'handleInput($event)',\n        '(keydown)': 'handleKeydown($event)',\n        '(click)': 'handleClick($event)'\n    },\n    exportAs: 'mcAutocompleteTrigger',\n    providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class McAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n    // @ts-ignore\n    readonly optionSelections: Observable<McOptionSelectionChange> = defer(() => {\n        if (this.autocomplete && this.autocomplete.options) {\n            return merge(...this.autocomplete.options.map((option) => option.onSelectionChange));\n        }\n\n        // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n        // Return a stream that we'll replace with the real one once everything is in place.\n        return this.zone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelections));\n    });\n\n    /** The currently active option, coerced to MatOption type. */\n    get activeOption(): McOption | null {\n        if (this.autocomplete && this.autocomplete.keyManager) {\n            return this.autocomplete.keyManager.activeItem;\n        }\n\n        return null;\n    }\n\n    get panelOpen(): boolean {\n        return this.overlayAttached && this.autocomplete.showPanel;\n    }\n\n    /** The autocomplete panel to be attached to this trigger. */\n    @Input('mcAutocomplete') autocomplete: McAutocomplete;\n\n    /**\n     * Reference relative to which to position the autocomplete panel.\n     * Defaults to the autocomplete trigger element.\n     */\n    @Input('mcAutocompleteConnectedTo') connectedTo: McAutocompleteOrigin;\n\n    /**\n     * `autocomplete` attribute to be set on the input element.\n     * @docs-private\n     */\n    @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     */\n    @Input('mcAutocompleteDisabled')\n    get autocompleteDisabled(): boolean {\n        return this._autocompleteDisabled;\n    }\n\n    set autocompleteDisabled(value: boolean) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n\n    private _autocompleteDisabled = false;\n\n    private overlayAttached: boolean = false;\n\n    private overlayRef: OverlayRef | null;\n\n    private portal: TemplatePortal;\n\n    private componentDestroyed = false;\n\n    private scrollStrategy: () => IScrollStrategy;\n\n    /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n    private previousValue: string | number | null;\n\n    /** Strategy that is used to position the panel. */\n    private positionStrategy: FlexibleConnectedPositionStrategy;\n\n    /** The subscription for closing actions (some are bound to document). */\n    private closingActionsSubscription: Subscription;\n\n    /** Subscription to viewport size changes. */\n    private viewportSubscription = Subscription.EMPTY;\n\n    /**\n     * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n     * closed autocomplete from being reopened if the user switches to another browser tab and then\n     * comes back.\n     */\n    private canOpenOnNextFocus = true;\n\n    /** Stream of keyboard events that can close the panel. */\n    private readonly closeKeyEventStream = new Subject<void>();\n\n    constructor(\n        private elementRef: ElementRef<HTMLInputElement>,\n        private viewContainerRef: ViewContainerRef,\n        private changeDetectorRef: ChangeDetectorRef,\n        private overlay: Overlay,\n        private zone: NgZone,\n        @Inject(MC_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n        @Optional() private dir: Directionality,\n        @Optional() @Host() private formField: McFormField,\n        @Optional() @Inject(DOCUMENT) private document: any,\n        // @breaking-change 8.0.0 Make `_viewportRuler` required.\n        private viewportRuler?: ViewportRuler\n    ) {\n        // tslint:disable-next-line no-typeof-undefined\n        if (typeof window !== 'undefined') {\n            zone.runOutsideAngular(() => {\n                window.addEventListener('blur', this.windowBlurHandler);\n            });\n        }\n\n        this.scrollStrategy = scrollStrategy;\n    }\n\n    ngOnDestroy() {\n        // tslint:disable-next-line no-typeof-undefined\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this.windowBlurHandler);\n        }\n\n        this.viewportSubscription.unsubscribe();\n        this.componentDestroyed = true;\n        this.destroyPanel();\n        this.closeKeyEventStream.complete();\n    }\n\n    /** `View -> model callback called when value changes` */\n    // tslint:disable-next-line no-empty\n    onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when autocomplete has been touched` */\n    // tslint:disable-next-line no-empty\n    onTouched: () => void = () => {};\n\n    /** Opens the autocomplete suggestion panel. */\n    openPanel(): void {\n        this.attachOverlay();\n    }\n\n    closePanel(): void {\n        if (!this.overlayAttached) { return; }\n\n        if (this.panelOpen) {\n            this.autocomplete.closed.emit();\n        }\n\n        this.autocomplete.isOpen = this.overlayAttached = false;\n\n        if (this.overlayRef && this.overlayRef.hasAttached()) {\n            this.overlayRef.detach();\n            this.closingActionsSubscription.unsubscribe();\n        }\n\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this.componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this.changeDetectorRef.detectChanges();\n        }\n    }\n\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n    updatePosition(): void {\n        if (this.overlayAttached) {\n            this.overlayRef!.updatePosition();\n        }\n    }\n\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    get panelClosingActions(): Observable<McOptionSelectionChange | null> {\n        return merge(\n            this.optionSelections,\n            this.autocomplete.keyManager.tabOut.pipe(filter(() => this.overlayAttached)),\n            this.closeKeyEventStream,\n            this.getOutsideClickStream(),\n            this.overlayRef ?\n                this.overlayRef.detachments().pipe(filter(() => this.overlayAttached)) :\n                observableOf()\n        ).pipe(\n            // Normalize the output so we return a consistent type.\n            map((event) => event instanceof McOptionSelectionChange ? event : null)\n        );\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any): void {\n        Promise.resolve(null).then(() => this.setTriggerValue(value));\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => {}): void {\n        this.onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => {}) {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.elementRef.nativeElement.disabled = isDisabled;\n    }\n\n    handleKeydown(event: KeyboardEvent): void {\n        // tslint:disable-next-line deprecation\n        const keyCode = event.keyCode;\n\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE) {\n            event.preventDefault();\n        }\n\n        if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n            this.activeOption.selectViaInteraction();\n            this.resetActiveItem();\n            event.preventDefault();\n        } else if (this.autocomplete) {\n            const prevActiveItem = this.autocomplete.keyManager.activeItem;\n\n            if (this.panelOpen || keyCode === TAB) {\n                this.autocomplete.onKeydown(event);\n            } else if (keyCode === DOWN_ARROW && this.canOpen()) {\n                this.openPanel();\n            }\n\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n            if (isArrowKey || this.autocomplete.keyManager.activeItem !== prevActiveItem) {\n                this.scrollToOption();\n            }\n        }\n    }\n\n    handleInput(event: KeyboardEvent): void {\n        const target = event.target as HTMLInputElement;\n        let value: number | string | null = target.value;\n\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value === '' ? null : parseFloat(value);\n        }\n\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this.previousValue !== value) {\n            this.previousValue = value;\n            this.onChange(value);\n\n            if (this.canOpen() && this.document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n\n    handleFocus(): void {\n        if (!this.canOpenOnNextFocus) {\n            this.canOpenOnNextFocus = true;\n        } else if (this.canOpen()) {\n            this.previousValue = this.elementRef.nativeElement.value;\n            this.attachOverlay();\n        }\n    }\n\n    handleClick($event: MouseEvent) {\n        if (this.canOpen() && this.document.activeElement === $event.target) {\n            this.openPanel();\n        }\n    }\n\n    /** Stream of clicks outside of the autocomplete panel. */\n    private getOutsideClickStream(): Observable<any> {\n        if (!this.document) { return observableOf(null); }\n\n        return fromEvent<MouseEvent>(this.document, 'click')\n            .pipe(filter((event) => {\n                const clickTarget = event.target as HTMLElement;\n                const formField = this.formField ?\n                    this.formField._elementRef.nativeElement : null;\n\n                return this.overlayAttached &&\n                    clickTarget !== this.elementRef.nativeElement &&\n                    (!formField || !formField.contains(clickTarget)) &&\n                    (!!this.overlayRef && !this.overlayRef.overlayElement.contains(clickTarget));\n            }));\n    }\n\n    /**\n     * Event handler for when the window is blurred. Needs to be an\n     * arrow function in order to preserve the context.\n     */\n    private windowBlurHandler = () => {\n        // If the user blurred the window while the autocomplete is focused, it means that it'll be\n        // refocused when they come back. In this case we want to skip the first focus event, if the\n        // pane was closed, in order to avoid reopening it unintentionally.\n        this.canOpenOnNextFocus = this.document.activeElement !== this.elementRef.nativeElement || this.panelOpen;\n    }\n\n    /**\n     * Given that we are not actually focusing active options, we must manually adjust scroll\n     * to reveal options below the fold. First, we find the offset of the option from the top\n     * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n     * the panel height + the option height, so the active option will be just visible at the\n     * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n     * will become the offset. If that offset is visible within the panel already, the scrollTop is\n     * not adjusted.\n     */\n    private scrollToOption(): void {\n        const index = this.autocomplete.keyManager.activeItemIndex || 0;\n        const labelCount = countGroupLabelsBeforeOption(index,\n            this.autocomplete.options, this.autocomplete.optionGroups);\n\n        const newScrollPosition = getOptionScrollPosition(\n            index + labelCount,\n            AUTOCOMPLETE_OPTION_HEIGHT,\n            this.autocomplete.getScrollTop(),\n            AUTOCOMPLETE_PANEL_HEIGHT\n        );\n\n        this.autocomplete.setScrollTop(newScrollPosition);\n    }\n\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    private subscribeToClosingActions(): Subscription {\n        const firstStable = this.zone.onStable.asObservable()\n            .pipe(take(1));\n        const optionChanges = this.autocomplete.options.changes\n            .pipe(\n                tap(() => this.positionStrategy.reapplyLastPosition()),\n                // Defer emitting to the stream until the next tick, because changing\n                // bindings in here will cause \"changed after checked\" errors.\n                delay(0)\n            );\n\n        // When the zone is stable initially, and when the option list changes...\n        return merge(firstStable, optionChanges)\n            .pipe(\n                // create a new stream of panelClosingActions, replacing any previous streams\n                // that were created, and flatten it so our stream only emits closing events...\n                switchMap(() => {\n                    this.resetActiveItem();\n                    this.autocomplete.setVisibility();\n\n                    if (this.panelOpen) {\n                        this.overlayRef!.updatePosition();\n                    }\n\n                    return this.panelClosingActions;\n                }),\n                // when the first closing event occurs...\n                take(1)\n            )\n            // set the value, close the panel, and complete.\n            .subscribe((event) => this.setValueAndClose(event));\n    }\n\n    /** Destroys the autocomplete suggestion panel. */\n    private destroyPanel(): void {\n        if (this.overlayRef) {\n            this.closePanel();\n            this.overlayRef.dispose();\n            this.overlayRef = null;\n        }\n    }\n\n    private setTriggerValue(value: any): void {\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n            this.autocomplete.displayWith(value) :\n            value;\n\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        const inputValue = toDisplay != null ? toDisplay : '';\n\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this.formField) {\n            this.formField._control.value = inputValue;\n        } else {\n            this.elementRef.nativeElement.value = inputValue;\n        }\n\n        this.previousValue = inputValue;\n    }\n\n    /** This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    private setValueAndClose(event: McOptionSelectionChange | null): void {\n        if (event && event.source) {\n            this.clearPreviousSelectedOption(event.source);\n            this.setTriggerValue(event.source.value);\n            this.onChange(event.source.value);\n            this.elementRef.nativeElement.focus();\n\n            this.autocomplete.emitSelectEvent(event.source);\n        }\n\n        this.closePanel();\n    }\n\n    /** Clear any previous selected option and emit a selection change event for this option */\n    private clearPreviousSelectedOption(skip: McOption) {\n        this.autocomplete.options.forEach((option) => {\n            if (option !== skip && option.selected) {\n                option.deselect();\n            }\n        });\n    }\n\n    private attachOverlay(): void {\n        if (!this.autocomplete) {\n            throw getMcAutocompleteMissingPanelError();\n        }\n\n        let overlayRef = this.overlayRef;\n\n        if (!overlayRef) {\n            this.portal = new TemplatePortal(this.autocomplete.template, this.viewContainerRef);\n            overlayRef = this.overlay.create(this.getOverlayConfig());\n            this.overlayRef = overlayRef;\n\n            // Use the `keydownEvents` in order to take advantage of\n            // the overlay event targeting provided by the CDK overlay.\n            overlayRef.keydownEvents().subscribe((event) => {\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                // tslint:disable-next-line deprecation\n                if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n                    this.resetActiveItem();\n                    this.closeKeyEventStream.next();\n                }\n            });\n\n            if (this.viewportRuler) {\n                this.viewportSubscription = this.viewportRuler.change().subscribe(() => {\n                    if (this.panelOpen && overlayRef) {\n                        overlayRef.updateSize({ width: this.getPanelWidth() });\n                    }\n                });\n            }\n        } else {\n            const position = overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n\n            // Update the trigger, panel width and direction, in case anything has changed.\n            position.setOrigin(this.getConnectedElement());\n            overlayRef.updateSize({ width: this.getPanelWidth() });\n        }\n\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this.portal);\n            this.closingActionsSubscription = this.subscribeToClosingActions();\n        }\n\n        const wasOpen = this.panelOpen;\n\n        this.autocomplete.setVisibility();\n        this.autocomplete.isOpen = this.overlayAttached = true;\n\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n\n    private getOverlayConfig(): OverlayConfig {\n        return new OverlayConfig({\n            positionStrategy: this.getOverlayPosition(),\n            scrollStrategy: this.scrollStrategy(),\n            width: this.getPanelWidth(),\n            direction: this.dir\n        });\n    }\n\n    private getOverlayPosition(): IPositionStrategy {\n        this.positionStrategy = this.overlay.position()\n            .flexibleConnectedTo(this.getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false)\n            .withPositions([\n                {\n                    originX: 'start',\n                    originY: 'bottom',\n                    overlayX: 'start',\n                    overlayY: 'top'\n                },\n                {\n                    originX: 'start',\n                    originY: 'top',\n                    overlayX: 'start',\n                    overlayY: 'bottom',\n\n                    // The overlay edge connected to the trigger should have squared corners, while\n                    // the opposite end has rounded corners. We apply a CSS class to swap the\n                    // border-radius based on the overlay position.\n                    panelClass: 'mc-autocomplete-panel-above'\n                }\n            ] as IConnectedPosition[]);\n\n        return this.positionStrategy;\n    }\n\n    private getConnectedElement(): ElementRef {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n\n        return this.formField ? this.formField.getConnectedOverlayOrigin() : this.elementRef;\n    }\n\n    private getPanelWidth(): number | string {\n        return this.autocomplete.panelWidth || this.getHostWidth() - AUTOCOMPLETE_BORDER_WIDTH;\n    }\n\n    private getHostWidth(): number {\n        return this.getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     */\n    private resetActiveItem(): void {\n        this.autocomplete.keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n    }\n\n    private canOpen(): boolean {\n        const element = this.elementRef.nativeElement;\n\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n}\n","import {\n    AfterContentInit,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    Self,\n    ViewContainerRef\n} from '@angular/core';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { Direction, Directionality } from '@ptsecurity/cdk/bidi';\nimport { LEFT_ARROW, RIGHT_ARROW, SPACE, ENTER } from '@ptsecurity/cdk/keycodes';\nimport {\n    FlexibleConnectedPositionStrategy,\n    HorizontalConnectionPos,\n    Overlay,\n    OverlayConfig,\n    OverlayRef,\n    VerticalConnectionPos,\n    IScrollStrategy\n} from '@ptsecurity/cdk/overlay';\nimport { normalizePassiveListenerOptions } from '@ptsecurity/cdk/platform';\nimport { TemplatePortal } from '@ptsecurity/cdk/portal';\nimport { asapScheduler, merge, of as observableOf, Subscription } from 'rxjs';\nimport { delay, filter, take, takeUntil } from 'rxjs/operators';\n\nimport { throwMcDropdownMissingError } from './dropdown-errors';\nimport { McDropdownItem } from './dropdown-item';\nimport { McDropdownPanel } from './dropdown-panel';\nimport { DropdownPositionX, DropdownPositionY } from './dropdown-positions';\nimport { McDropdown } from './dropdown.component';\n\n\n/** Injection token that determines the scroll handling while the dropdown is open. */\nexport const MC_DROPDOWN_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-dropdown-scroll-strategy');\n\n/** @docs-private */\nexport function MC_DROPDOWN_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => IScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_DROPDOWN_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_DROPDOWN_SCROLL_STRATEGY_FACTORY\n};\n\n/** Default top padding of the nested dropdown panel. */\nexport const NESTED_PANEL_TOP_PADDING = 2;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * This directive is intended to be used in conjunction with an mc-dropdown tag.  It is\n * responsible for toggling the display of the provided dropdown instance.\n */\n@Directive({\n    selector: `[mcDropdownTriggerFor]`,\n    host: {\n        'aria-haspopup': 'true',\n        '[attr.aria-expanded]': 'opened || null',\n        '(mousedown)': '_handleMousedown($event)',\n        '(keydown)': '_handleKeydown($event)',\n        '(click)': '_handleClick($event)'\n    },\n    exportAs: 'mcDropdownTrigger'\n})\nexport class McDropdownTrigger implements AfterContentInit, OnDestroy {\n\n\n    /**\n     * Handles touch start events on the trigger.\n     * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n     */\n    private _handleTouchStart = () => this._openedBy = 'touch';\n\n    /** The text direction of the containing app. */\n    get dir(): Direction {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n\n    // Tracking input type is necessary so it's possible to only auto-focus\n    // the first item of the list when the dropdown is opened via the keyboard\n    _openedBy: 'mouse' | 'touch' | null = null;\n\n\n    /** References the dropdown instance that the trigger is associated with. */\n    @Input('mcDropdownTriggerFor')\n    get dropdown() {\n        return this._dropdown;\n    }\n\n    set dropdown(dropdown: McDropdownPanel) {\n        if (dropdown === this._dropdown) {\n            return;\n        }\n\n        this._dropdown = dropdown;\n        this._closeSubscription.unsubscribe();\n\n        if (dropdown) {\n            this._closeSubscription = dropdown.closed.asObservable().subscribe(reason => {\n                this._destroy();\n\n                // If a click closed the dropdown, we should close the entire chain of nested dropdowns.\n                if ((reason === 'click' || reason === 'tab') && this._parent) {\n                    this._parent.closed.emit(reason);\n                }\n            });\n        }\n    }\n\n    private _dropdown: McDropdownPanel;\n\n    /** Data to be passed along to any lazily-rendered content. */\n    @Input('mcDropdownTriggerData') data: any;\n\n    /** Event emitted when the associated dropdown is opened. */\n    @Output() readonly dropdownOpened: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Event emitted when the associated dropdown is closed. */\n    @Output() readonly dropdownClosed: EventEmitter<void> = new EventEmitter<void>();\n\n    private _portal: TemplatePortal;\n    private _overlayRef: OverlayRef | null = null;\n    private _opened: boolean = false;\n    private _closeSubscription = Subscription.EMPTY;\n    private _hoverSubscription = Subscription.EMPTY;\n\n    constructor(private _overlay: Overlay,\n                private _element: ElementRef<HTMLElement>,\n                private _viewContainerRef: ViewContainerRef,\n                @Inject(MC_DROPDOWN_SCROLL_STRATEGY) private _scrollStrategy: any,\n                @Optional() private _parent: McDropdown,\n                @Optional() @Self() private _dropdownItemInstance: McDropdownItem,\n                @Optional() private _dir: Directionality,\n                private _focusMonitor?: FocusMonitor) {\n\n        _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n            passiveEventListenerOptions);\n\n        if (_dropdownItemInstance) {\n            _dropdownItemInstance._triggersNestedDropdown = this.triggersNestedDropdown();\n        }\n    }\n\n    ngAfterContentInit() {\n        this._check();\n        this._handleHover();\n    }\n\n    ngOnDestroy() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n\n        this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n            passiveEventListenerOptions);\n\n        this._cleanUpSubscriptions();\n        this._closeSubscription.unsubscribe();\n    }\n\n    /** Whether the dropdown is open. */\n    get opened(): boolean {\n        return this._opened;\n    }\n\n    /** Whether the dropdown triggers a nested dropdown or a top-level one. */\n    triggersNestedDropdown(): boolean {\n        return !!(this._dropdownItemInstance && this._parent);\n    }\n\n    /** Toggles the dropdown between the open and closed states. */\n    toggle(): void {\n        // tslint:disable-next-line:no-void-expression\n        return this._opened ? this.close() : this.open();\n    }\n\n    /** Opens the dropdown. */\n    open(): void {\n        if (this._opened) {\n            return;\n        }\n\n        this._check();\n\n        const overlayRef = this._createOverlay();\n        const overlayConfig = overlayRef.getConfig();\n\n        this._setPosition(overlayConfig.positionStrategy as FlexibleConnectedPositionStrategy);\n        overlayConfig.hasBackdrop = this.dropdown.hasBackdrop == null ? !this.triggersNestedDropdown() :\n            this.dropdown.hasBackdrop;\n        overlayRef.attach(this._getPortal());\n\n        if (this.dropdown.lazyContent) {\n            this.dropdown.lazyContent.attach(this.data);\n        }\n\n        this._closeSubscription = this._closingActions().subscribe(() => this.close());\n        this._init();\n\n        if (this.dropdown instanceof McDropdown) {\n            this.dropdown._startAnimation();\n        }\n    }\n\n    /** Closes the dropdown. */\n    close(): void {\n        this.dropdown.closed.emit();\n    }\n\n    /**\n     * Focuses the dropdown trigger.\n     * @param origin Source of the dropdown trigger's focus.\n     */\n    focus(origin: FocusOrigin = 'program') {\n        if (this._focusMonitor) {\n            this._focusMonitor.focusVia(this._element.nativeElement, origin);\n        } else {\n            this._element.nativeElement.focus();\n        }\n    }\n\n    /** Closes the dropdown and does the necessary cleanup. */\n    private _destroy() {\n        if (!this._overlayRef || !this.opened) {\n            return;\n        }\n\n        const dropdown = this.dropdown;\n\n        this._closeSubscription.unsubscribe();\n        this._overlayRef.detach();\n\n        if (dropdown instanceof McDropdown) {\n            dropdown._resetAnimation();\n\n            if (dropdown.lazyContent) {\n                // Wait for the exit animation to finish before detaching the content.\n                dropdown._animationDone\n                    .pipe(\n                        filter((event) => event.toState === 'void'),\n                        take(1),\n                        // Interrupt if the content got re-attached.\n                        takeUntil(dropdown.lazyContent._attached)\n                    )\n                    .subscribe(() => dropdown.lazyContent!.detach(), undefined, () => {\n                        // No matter whether the content got re-attached, reset the dropdown.\n                        this._reset();\n                    });\n            } else {\n                this._reset();\n            }\n        } else {\n            this._reset();\n\n            if (dropdown.lazyContent) {\n                dropdown.lazyContent.detach();\n            }\n        }\n    }\n\n    /**\n     * This method sets the dropdown state to open and focuses the first item if\n     * the dropdown was opened via the keyboard.\n     */\n    private _init(): void {\n        this.dropdown.parent = this.triggersNestedDropdown() ? this._parent : undefined;\n        this.dropdown.direction = this.dir;\n        this._setIsOpened(true);\n        this.dropdown.focusFirstItem(this._openedBy || 'program');\n    }\n\n    /**\n     * This method resets the dropdown when it's closed, most importantly restoring\n     * focus to the dropdown trigger if the dropdown was opened via the keyboard.\n     */\n    private _reset(): void {\n        this._setIsOpened(false);\n\n        // We should reset focus if the user is navigating using a keyboard or\n        // if we have a top-level trigger which might cause focus to be lost\n        // when clicking on the backdrop.\n        if (!this._openedBy) {\n            // Note that the focus style will show up both for `program` and\n            // `keyboard` so we don't have to specify which one it is.\n            this.focus();\n        } else if (!this.triggersNestedDropdown()) {\n            this.focus(this._openedBy);\n        }\n\n        this._openedBy = null;\n    }\n\n    // set state rather than toggle to support triggers sharing a dropdown\n    private _setIsOpened(isOpen: boolean): void {\n        this._opened = isOpen;\n        // tslint:disable-next-line:no-void-expression\n        this._opened ? this.dropdownOpened.emit() : this.dropdownClosed.emit();\n\n        if (this.triggersNestedDropdown()) {\n            this._dropdownItemInstance._highlighted = isOpen;\n        }\n    }\n\n    /**\n     * This method checks that a valid instance of McDropdown has been passed into\n     * mcDropdownTriggerFor. If not, an exception is thrown.\n     */\n    private _check() {\n        if (!this.dropdown) {\n            throwMcDropdownMissingError();\n        }\n    }\n\n    /**\n     * This method creates the overlay from the provided dropdown's template and saves its\n     * OverlayRef so that it can be attached to the DOM when open is called.\n     */\n    private _createOverlay(): OverlayRef {\n        if (!this._overlayRef) {\n            const config = this._getOverlayConfig();\n            this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n            this._overlayRef = this._overlay.create(config);\n\n            // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n            // Ideally we'd also have our keyboard event logic in here, however doing so will\n            // break anybody that may have implemented the `McDropdownPanel` themselves.\n            this._overlayRef.keydownEvents().subscribe();\n        }\n\n        return this._overlayRef;\n    }\n\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @returns OverlayConfig\n     */\n    private _getOverlayConfig(): OverlayConfig {\n        return new OverlayConfig({\n            positionStrategy: this._overlay.position()\n                .flexibleConnectedTo(this._element)\n                .withLockedPosition()\n                .withTransformOriginOn('.mc-dropdown__panel'),\n            backdropClass: this.dropdown.backdropClass || 'cdk-overlay-transparent-backdrop',\n            scrollStrategy: this._scrollStrategy(),\n            direction: this._dir\n        });\n    }\n\n    /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the dropdown based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     */\n    private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n        if (this.dropdown.setPositionClasses) {\n            position.positionChanges.subscribe(change => {\n                const posX: DropdownPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n                const posY: DropdownPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n                this.dropdown.setPositionClasses!(posX, posY);\n            });\n        }\n    }\n\n    /**\n     * Sets the appropriate positions on a position strategy\n     * so the overlay connects with the trigger correctly.\n     * @param positionStrategy Strategy whose position to update.\n     */\n    private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n\n        let [originX, originFallbackX, overlayX, overlayFallbackX]: HorizontalConnectionPos[] =\n            this.dropdown.xPosition === 'before' ?\n                ['end', 'start', 'end', 'start'] :\n                ['start', 'end', 'start', 'end'];\n\n        let [overlayY, overlayFallbackY, originY, originFallbackY]: VerticalConnectionPos[] =\n            this.dropdown.yPosition === 'above' ?\n                ['bottom', 'top', 'bottom', 'top'] :\n                ['top', 'bottom', 'top', 'bottom'];\n\n        let offsetY = 0;\n\n        if (this.triggersNestedDropdown()) {\n            // When the dropdown is nested, it should always align itself\n            // to the edges of the trigger, instead of overlapping it.\n            overlayFallbackX = originX = this.dropdown.xPosition === 'before' ? 'start' : 'end';\n            originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n            offsetY = overlayY === 'bottom' ? NESTED_PANEL_TOP_PADDING : -NESTED_PANEL_TOP_PADDING;\n        } else {\n            if (!this.dropdown.overlapTriggerY) {\n                originY = overlayY === 'top' ? 'bottom' : 'top';\n                originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n            }\n\n            if (!this.dropdown.overlapTriggerX) {\n                overlayFallbackX = originX = this.dropdown.xPosition === 'before' ? 'start' : 'end';\n                originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n            }\n        }\n\n        positionStrategy.withPositions([\n            {originX, originY, overlayX, overlayY, offsetY},\n            {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n            {\n                originX,\n                originY: originFallbackY,\n                overlayX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY\n            },\n            {\n                originX: originFallbackX,\n                originY: originFallbackY,\n                overlayX: overlayFallbackX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY\n            }\n        ]);\n    }\n\n    /** Cleans up the active subscriptions. */\n    private _cleanUpSubscriptions(): void {\n        this._closeSubscription.unsubscribe();\n        this._hoverSubscription.unsubscribe();\n    }\n\n    /** Returns a stream that emits whenever an action that should close the dropdown occurs. */\n    private _closingActions() {\n        const backdrop = this._overlayRef!.backdropClick();\n        const detachments = this._overlayRef!.detachments();\n        const parentClose = this._parent ? this._parent.closed : observableOf();\n        const hover = this._parent ? this._parent._hovered().pipe(\n            filter((active) => active !== this._dropdownItemInstance),\n            filter(() => this._opened)\n        ) : observableOf();\n\n        return merge(backdrop, parentClose, hover, detachments);\n    }\n\n    /** Handles mouse presses on the trigger. */\n    private _handleMousedown(event: MouseEvent): void {\n        // Since right or middle button clicks won't trigger the `click` event,\n        // we shouldn't consider the dropdown as opened by mouse in those cases.\n        this._openedBy = event.button === 0 ? 'mouse' : null;\n\n        // Since clicking on the trigger won't close the dropdown if it opens a nested dropdown,\n        // we should prevent focus from moving onto it via click to avoid the\n        // highlight from lingering on the dropdown item.\n        if (this.triggersNestedDropdown()) {\n            event.preventDefault();\n        }\n    }\n\n    /** Handles key presses on the trigger. */\n    private _handleKeydown(event: KeyboardEvent): void {\n        const keyCode = event.keyCode;\n\n        if (keyCode === SPACE || keyCode === ENTER) {\n            this.open();\n        }\n\n        if (this.triggersNestedDropdown() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n            this.open();\n        }\n    }\n\n    /** Handles click events on the trigger. */\n    private _handleClick(event: MouseEvent): void {\n        if (this.triggersNestedDropdown()) {\n            // Stop event propagation to avoid closing the parent dropdown.\n            event.stopPropagation();\n            this.open();\n        } else {\n            this.toggle();\n        }\n    }\n\n    /** Handles the cases where the user hovers over the trigger. */\n    private _handleHover() {\n        // Subscribe to changes in the hovered item in order to toggle the panel.\n        if (!this.triggersNestedDropdown()) {\n            return;\n        }\n\n        this._hoverSubscription = this._parent._hovered()\n        // Since we might have multiple competing triggers for the same dropdown (e.g. a nested dropdown\n        // with different data and triggers), we have to delay it by a tick to ensure that\n        // it won't be closed immediately after it is opened.\n            .pipe(\n                filter((active) => active === this._dropdownItemInstance && !active.disabled),\n                delay(0, asapScheduler)\n            )\n            .subscribe(() => {\n                this._openedBy = 'mouse';\n\n                // If the same dropdown is used between multiple triggers, it might still be animating\n                // while the new trigger tries to re-open it. Wait for the animation to finish\n                // before doing so. Also interrupt if the user moves to another item.\n                if (this.dropdown instanceof McDropdown && this.dropdown._isAnimating) {\n                    // We need the `delay(0)` here in order to avoid\n                    // 'changed after checked' errors in some cases. See #12194.\n                    this.dropdown._animationDone\n                        .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parent._hovered()))\n                        .subscribe(() => this.open());\n                } else {\n                    this.open();\n                }\n            });\n    }\n\n    /** Gets the portal that should be attached to the overlay. */\n    private _getPortal(): TemplatePortal {\n        // Note that we can avoid this check by keeping the portal on the dropdown panel.\n        // While it would be cleaner, we'd have to introduce another required method on\n        // `McDropdownPanel`, making it harder to consume.\n        if (!this._portal || this._portal.templateRef !== this.dropdown.templateRef) {\n            this._portal = new TemplatePortal(this.dropdown.templateRef, this._viewContainerRef);\n        }\n\n        return this._portal;\n    }\n\n}\n","/* tslint:disable:no-empty */\n\nimport {\n    AfterContentInit, AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Input,\n    isDevMode,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList, Renderer2,\n    Self,\n    SimpleChanges,\n    ViewChild, ViewChildren,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { ActiveDescendantKeyManager } from '@ptsecurity/cdk/a11y';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    RIGHT_ARROW,\n    SPACE,\n    UP_ARROW,\n    A\n} from '@ptsecurity/cdk/keycodes';\nimport {\n    CdkConnectedOverlay,\n    ViewportRuler\n} from '@ptsecurity/cdk/overlay';\nimport {\n    countGroupLabelsBeforeOption,\n    getOptionScrollPosition,\n    CanDisable,\n    CanDisableCtor,\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    HasTabIndex,\n    HasTabIndexCtor,\n    MC_OPTION_PARENT_COMPONENT,\n    McOptgroup,\n    McOption,\n    McOptionSelectionChange,\n    mixinDisabled,\n    mixinErrorState,\n    mixinTabIndex,\n    mcSelectAnimations,\n\n    SELECT_PANEL_INDENT_PADDING_X,\n    SELECT_PANEL_MAX_HEIGHT,\n    SELECT_PANEL_PADDING_X,\n    SELECT_PANEL_VIEWPORT_PADDING,\n\n    getMcSelectDynamicMultipleError,\n    getMcSelectNonFunctionValueError,\n    getMcSelectNonArrayValueError,\n    MC_SELECT_SCROLL_STRATEGY\n} from '@ptsecurity/mosaic/core';\nimport { McFormField, McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { McTag } from '@ptsecurity/mosaic/tags';\nimport { defer, merge, Observable, Subject } from 'rxjs';\nimport {\n    filter,\n    map,\n    startWith,\n    switchMap,\n    take,\n    takeUntil,\n    distinctUntilChanged\n} from 'rxjs/operators';\n\n\nlet nextUniqueId = 0;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 2;\n\n/** Change event object that is emitted when the select value has changed. */\nexport class McSelectChange {\n    constructor(public source: McSelect, public value: any) {}\n}\n\nexport class McSelectBase {\n    constructor(\n        public elementRef: ElementRef,\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {}\n}\n\nconst McSelectMixinBase: CanDisableCtor & HasTabIndexCtor & CanUpdateErrorStateCtor &\n    typeof McSelectBase = mixinTabIndex(mixinDisabled(mixinErrorState(McSelectBase)));\n\n\n@Directive({ selector: 'mc-select-trigger' })\nexport class McSelectTrigger {}\n\n\n@Component({\n    selector: 'mc-select',\n    exportAs: 'mcSelect',\n    templateUrl: 'select.html',\n    styleUrls: ['./select.css'],\n    inputs: ['disabled', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'tabIndex',\n        class: 'mc-select',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-select-invalid]': 'errorState',\n        '[class.mc-select-required]': 'required',\n        '(keydown)': 'handleKeydown($event)',\n        '(focus)': 'onFocus()',\n        '(blur)': 'onBlur()',\n        '(window:resize)': 'calculateHiddenItems()'\n    },\n    animations: [\n        mcSelectAnimations.transformPanel,\n        mcSelectAnimations.fadeInContent\n    ],\n    providers: [\n        { provide: McFormFieldControl, useExisting: McSelect },\n        { provide: MC_OPTION_PARENT_COMPONENT, useExisting: McSelect }\n    ]\n})\nexport class McSelect extends McSelectMixinBase implements\n    AfterContentInit, AfterViewInit, OnChanges, OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable,\n    HasTabIndex, McFormFieldControl<any>, CanUpdateErrorState {\n\n    /** A name for this control that can be used by `mc-form-field`. */\n    controlType = 'mc-select';\n\n    hiddenItems: number = 0;\n    oneMoreText: string = '...ещё';\n\n    /** The last measured value for the trigger's client bounding rect. */\n    triggerRect: ClientRect;\n\n    /** The cached font-size of the trigger element. */\n    triggerFontSize = 0;\n\n    /** Deals with the selection logic. */\n    selectionModel: SelectionModel<McOption>;\n\n    /** Manages keyboard events for options in the panel. */\n    keyManager: ActiveDescendantKeyManager<McOption>;\n\n    /** The IDs of child options to be passed to the aria-owns attribute. */\n    optionIds: string = '';\n\n    /** The value of the select panel's transform-origin property. */\n    transformOrigin: string = 'top';\n\n    /** Whether the panel's animation is done. */\n    panelDoneAnimating: boolean = false;\n\n    /** Emits when the panel element is finished transforming in. */\n    panelDoneAnimatingStream = new Subject<string>();\n\n    /** Strategy that will be used to handle scrolling while the select panel is open. */\n    scrollStrategy = this._scrollStrategyFactory();\n\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n    offsetY = 0;\n\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n    positions = [\n        {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top'\n        },\n        {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom'\n        }\n    ];\n\n    @ViewChild('trigger') trigger: ElementRef;\n\n    @ViewChild('panel') panel: ElementRef;\n\n    @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n    @ViewChildren(McTag) tags: QueryList<McTag>;\n\n    /** User-supplied override of the trigger element. */\n    @ContentChild(McSelectTrigger) customTrigger: McSelectTrigger;\n\n    /** All of the defined select options. */\n    @ContentChildren(McOption, { descendants: true }) options: QueryList<McOption>;\n\n    /** All of the defined groups of options. */\n    @ContentChildren(McOptgroup) optionGroups: QueryList<McOptgroup>;\n\n    /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n    @Input() panelClass: string | string[] | Set<string> | { [key: string]: any };\n\n    /** Object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Function used to sort the values in a select in multiple mode.\n     * Follows the same logic as `Array.prototype.sort`.\n     */\n    @Input() sortComparator: (a: McOption, b: McOption, options: McOption[]) => number;\n\n    /** Combined stream of all of the child options' change events. */\n    readonly optionSelectionChanges: Observable<McOptionSelectionChange> = defer(() => {\n        if (this.options) {\n            return merge(...this.options.map((option) => option.onSelectionChange));\n        }\n\n        return this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n    }) as Observable<McOptionSelectionChange>;\n\n    /** Event emitted when the select panel has been toggled. */\n    @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted when the select has been opened. */\n    @Output('opened') readonly openedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => o), map(() => {}));\n\n    /** Event emitted when the select has been closed. */\n    @Output('closed') readonly closedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => !o), map(() => {}));\n\n    /** Event emitted when the selected value has been changed by the user. */\n    @Output() readonly selectionChange: EventEmitter<McSelectChange> = new EventEmitter<McSelectChange>();\n\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    @Input()\n    get placeholder(): string {\n        return this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n\n        this.stateChanges.next();\n    }\n\n    private _placeholder: string;\n\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n\n        this.stateChanges.next();\n    }\n\n    private _required: boolean = false;\n\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        if (this.selectionModel) {\n            throw getMcSelectDynamicMultipleError();\n        }\n\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    private _multiple: boolean = false;\n\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith() {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        /* tslint:disable-next-line:strict-type-predicates */\n        if (typeof fn !== 'function') {\n            throw getMcSelectNonFunctionValueError();\n        }\n\n        this._compareWith = fn;\n\n        if (this.selectionModel) {\n            // A different comparator means the selection could change.\n            this.initializeSelection();\n        }\n    }\n\n    /** Value of the select control. */\n    @Input()\n    get value(): any {\n        return this._value;\n    }\n\n    set value(newValue: any) {\n        if (newValue !== this._value) {\n            this.writeValue(newValue);\n            this._value = newValue;\n        }\n    }\n\n    private _value: any;\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n        this.stateChanges.next();\n    }\n\n    private _id: string;\n\n    /** Whether the select is focused. */\n    get focused(): boolean {\n        return this._focused || this._panelOpen;\n    }\n\n    /**\n     * @deprecated Setter to be removed as this property is intended to be readonly.\n     * @breaking-change 8.0.0\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n\n    private _focused = false;\n\n    get panelOpen(): boolean {\n        return this._panelOpen;\n    }\n\n    private _panelOpen = false;\n\n    /** The scroll position of the overlay panel, calculated to center the selected option. */\n    private scrollTop = 0;\n\n    /** Unique id for this input. */\n    private readonly uid = `mc-select-${nextUniqueId++}`;\n\n    /** Emits whenever the component is destroyed. */\n    private readonly destroy = new Subject<void>();\n\n    constructor(\n        private readonly _viewportRuler: ViewportRuler,\n        private readonly _changeDetectorRef: ChangeDetectorRef,\n        private readonly _ngZone: NgZone,\n        private readonly _renderer: Renderer2,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        elementRef: ElementRef,\n        @Optional() private readonly _dir: Directionality,\n        @Optional() parentForm: NgForm,\n        @Optional() parentFormGroup: FormGroupDirective,\n        @Optional() private readonly _parentFormField: McFormField,\n        @Self() @Optional() public ngControl: NgControl,\n        @Attribute('tabindex') tabIndex: string,\n        @Inject(MC_SELECT_SCROLL_STRATEGY) private readonly _scrollStrategyFactory\n    ) {\n        super(elementRef, defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnInit() {\n        this.selectionModel = new SelectionModel<McOption>(this.multiple);\n        this.stateChanges.next();\n\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this.panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this.panelOpen) {\n                    this.scrollTop = 0;\n                    this.openedChange.emit(true);\n                } else {\n                    this.openedChange.emit(false);\n                    this.panelDoneAnimating = false;\n                    this.overlayDir.offsetX = 0;\n                    this._changeDetectorRef.markForCheck();\n                }\n            });\n    }\n\n    ngAfterContentInit() {\n        this.initKeyManager();\n\n        this.selectionModel.changed\n            .pipe(takeUntil(this.destroy))\n            .subscribe((event) => {\n                event.added.forEach((option) => option.select());\n                event.removed.forEach((option) => option.deselect());\n            });\n\n        this.options.changes\n            .pipe(startWith(null), takeUntil(this.destroy))\n            .subscribe(() => {\n                this.resetOptions();\n                this.initializeSelection();\n            });\n    }\n\n    ngAfterViewInit(): void {\n        this.tags.changes\n            .subscribe(() => {\n                setTimeout(() => this.calculateHiddenItems(), 0);\n            });\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) { this.updateErrorState(); }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes.disabled) {\n            this.stateChanges.next();\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroy.next();\n        this.destroy.complete();\n        this.stateChanges.complete();\n    }\n\n    /** `View -> model callback called when value changes` */\n    _onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when select has been touched` */\n    _onTouched = () => {};\n\n    /** Toggles the overlay panel open or closed. */\n    toggle(): void {\n        if (this.panelOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    /** Opens the overlay panel. */\n    open(): void {\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) { return; }\n\n        this.triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this.triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n        this._panelOpen = true;\n        this.keyManager.withHorizontalOrientation(null);\n        this.calculateOverlayPosition();\n        this.highlightCorrectOption();\n        this._changeDetectorRef.markForCheck();\n\n        // Set the font size on the panel element once it exists.\n        this._ngZone.onStable.asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                if (this.triggerFontSize && this.overlayDir.overlayRef && this.overlayDir.overlayRef.overlayElement) {\n                    this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this.triggerFontSize}px`;\n                }\n            });\n    }\n\n    /** Closes the overlay panel and focuses the host element. */\n    close(): void {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this.keyManager.withHorizontalOrientation(this.isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value: any): void {\n        if (this.options) {\n            this.setSelectionByValue(value);\n        }\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn: (value: any) => void): void {\n        this._onChange = fn;\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn: () => {}): void {\n        this._onTouched = fn;\n    }\n\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    get selected(): McOption | McOption[] {\n        return this.multiple ? this.selectionModel.selected : this.selectionModel.selected[0];\n    }\n\n    get triggerValue(): string {\n        if (this.empty) { return ''; }\n\n        if (this._multiple) {\n            const selectedOptions = this.selectionModel.selected.map((option) => option.viewValue);\n\n            if (this.isRtl()) { selectedOptions.reverse(); }\n\n            return selectedOptions.join(', ');\n        }\n\n        return this.selectionModel.selected[0].viewValue;\n    }\n\n    get triggerValues(): McOption[] {\n        if (this.empty) { return []; }\n\n        if (this._multiple) {\n            const selectedOptions = this.selectionModel.selected;\n\n            if (this.isRtl()) { selectedOptions.reverse(); }\n\n            return selectedOptions;\n        }\n\n        return [this.selectionModel.selected[0]];\n    }\n\n    get empty(): boolean {\n        return !this.selectionModel || this.selectionModel.isEmpty();\n    }\n\n    isRtl(): boolean {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n\n    handleKeydown(event: KeyboardEvent): void {\n        if (!this.disabled) {\n            if (this.panelOpen) {\n                this.handleOpenKeydown(event);\n            } else {\n                this.handleClosedKeydown(event);\n            }\n        }\n    }\n\n    /**\n     * When the panel content is done fading in, the panelDoneAnimating property is\n     * set so the proper class can be added to the panel.\n     */\n    onFadeInDone(): void {\n        this.panelDoneAnimating = this.panelOpen;\n        this._changeDetectorRef.markForCheck();\n    }\n\n    onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    onBlur() {\n        this._focused = false;\n\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    onAttached(): void {\n        this.overlayDir.positionChange\n            .pipe(take(1))\n            .subscribe(() => {\n                this._changeDetectorRef.detectChanges();\n                this.calculateOverlayOffsetX();\n                this.panel.nativeElement.scrollTop = this.scrollTop;\n            });\n    }\n\n    /** Returns the theme to be used on the panel. */\n    getPanelTheme(): string {\n        return this._parentFormField ? `mc-${this._parentFormField.color}` : '';\n    }\n\n    /** Focuses the select element. */\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    calculateOverlayScroll(selectedIndex: number, scrollBuffer: number, maxScroll: number): number {\n        const itemHeight = this.getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n\n        /* tslint:disable-next-line:no-magic-numbers */\n        const halfOptionHeight = itemHeight / 2;\n\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n\n    /** Invoked when an option is clicked. */\n    onRemoveMatcherItem(option: McOption, $event): void {\n        $event.stopPropagation();\n\n        option.deselect();\n    }\n\n    calculateHiddenItems(): void {\n        if (this.empty || !this.multiple) { return; }\n\n        let visibleItems: number = 0;\n        const totalItemsWidth = this.getTotalItemsWidthInMatcher();\n        let totalVisibleItemsWidth: number = 0;\n        const itemMargin: number = 4;\n\n        this.tags.forEach((tag) => {\n            if (tag.nativeElement.offsetTop < tag.nativeElement.offsetHeight) {\n                totalVisibleItemsWidth += tag.nativeElement.getBoundingClientRect().width + itemMargin;\n                visibleItems++;\n            }\n        });\n\n        this.hiddenItems = (this.selected as ArrayLike<McOption>).length - visibleItems;\n\n        if (this.hiddenItems) {\n            const itemsCounter = this.trigger.nativeElement.querySelector('.mc-select__match-hidden-text');\n            const matcherList = this.trigger.nativeElement.querySelector('.mc-select__match-list');\n\n            const itemsCounterShowed = itemsCounter.offsetTop < itemsCounter.offsetHeight;\n            // const itemsCounterWidth: number = itemsCounter.getBoundingClientRect().width;\n            const itemsCounterWidth: number = 86;\n\n            const matcherListWidth: number = matcherList.getBoundingClientRect().width;\n            const matcherWidth: number = matcherListWidth + itemsCounterWidth;\n\n            if (itemsCounterShowed && (totalItemsWidth < matcherWidth)) { this.hiddenItems = 0; }\n\n            if (\n                totalVisibleItemsWidth === matcherListWidth ||\n                (totalVisibleItemsWidth + itemsCounterWidth) < matcherListWidth\n            ) {\n                this._changeDetectorRef.markForCheck();\n\n                return ;\n            } else if (!itemsCounterShowed && (totalItemsWidth + itemsCounterWidth) > matcherWidth) {\n                this.hiddenItems++;\n            }\n        }\n\n        this._changeDetectorRef.markForCheck();\n    }\n\n    private getTotalItemsWidthInMatcher(): number {\n        const triggerClone = this.trigger.nativeElement.cloneNode(true);\n        triggerClone.querySelector('.mc-select__match-hidden-text').remove();\n\n        this._renderer.setStyle(triggerClone, 'position', 'absolute');\n        this._renderer.setStyle(triggerClone, 'visibility', 'hidden');\n        this._renderer.setStyle(triggerClone, 'top', '-100%');\n        this._renderer.setStyle(triggerClone, 'left', '0');\n\n        this._renderer.appendChild(this.trigger.nativeElement, triggerClone);\n\n        let totalItemsWidth: number = 0;\n        const itemMargin: number = 4;\n        triggerClone.querySelectorAll('mc-tag').forEach((item) => {\n            totalItemsWidth += item.getBoundingClientRect().width as number + itemMargin;\n        });\n\n        triggerClone.remove();\n\n        return totalItemsWidth;\n    }\n\n    /** Handles keyboard events while the select is closed. */\n    private handleClosedKeydown(event: KeyboardEvent): void {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n        // Open the select on ALT + arrow key to match the native <select>\n        if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        } else if (!this.multiple) {\n            this.keyManager.onKeydown(event);\n        }\n    }\n\n    /** Handles keyboard events when the selected is open. */\n    private handleOpenKeydown(event: KeyboardEvent): void {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const manager = this.keyManager;\n\n        if (keyCode === HOME || keyCode === END) {\n            event.preventDefault();\n\n            if (keyCode === HOME) {\n                manager.setFirstItemActive();\n            } else {\n                manager.setLastItemActive();\n            }\n\n        } else if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n        } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n            event.preventDefault();\n            manager.activeItem.selectViaInteraction();\n        } else if (this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some((option) => !option.selected);\n            this.options.forEach((option) => {\n                if (hasDeselectedOptions && !option.disabled) {\n                    option.select();\n                } else {\n                    option.deselect();\n                }\n            });\n        } else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n\n            manager.onKeydown(event);\n\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem.selectViaInteraction();\n            }\n        }\n    }\n\n    private initializeSelection(): void {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this.setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n        });\n    }\n\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    private setSelectionByValue(value: any | any[]): void {\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw getMcSelectNonArrayValueError();\n            }\n\n            this.selectionModel.clear();\n            value.forEach((currentValue: any) => this.selectValue(currentValue));\n            this.sortValues();\n        } else {\n            this.selectionModel.clear();\n            const correspondingOption = this.selectValue(value);\n\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this.keyManager.setActiveItem(correspondingOption);\n            }\n        }\n\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    private selectValue(value: any): McOption | undefined {\n        const correspondingOption = this.options.find((option: McOption) => {\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            } catch (error) {\n                if (isDevMode()) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n\n                return false;\n            }\n        });\n\n        if (correspondingOption) {\n            this.selectionModel.select(correspondingOption);\n        }\n\n        return correspondingOption;\n    }\n\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    private initKeyManager() {\n        this.keyManager = new ActiveDescendantKeyManager<McOption>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this.isRtl() ? 'rtl' : 'ltr');\n\n        this.keyManager.tabOut\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            });\n\n        this.keyManager.change\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this._panelOpen && this.panel) {\n                    this.scrollActiveOptionIntoView();\n                } else if (!this._panelOpen && !this.multiple && this.keyManager.activeItem) {\n                    this.keyManager.activeItem.selectViaInteraction();\n                }\n            });\n    }\n\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    private resetOptions(): void {\n        const changedOrDestroyed = merge(this.options.changes, this.destroy);\n\n        this.optionSelectionChanges\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe((event) => {\n                this.onSelect(event.source, event.isUserInput);\n\n                if (event.isUserInput && !this.multiple && this._panelOpen) {\n                    this.close();\n                    this.focus();\n                }\n            });\n\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map((option) => option.stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n                this._changeDetectorRef.markForCheck();\n                this.stateChanges.next();\n            });\n\n        this.setOptionIds();\n    }\n\n    /** Invoked when an option is clicked. */\n    private onSelect(option: McOption, isUserInput: boolean): void {\n        const wasSelected = this.selectionModel.isSelected(option);\n\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this.selectionModel.clear();\n            this.propagateChanges(option.value);\n        } else {\n            if (option.selected) {\n                this.selectionModel.select(option);\n            } else {\n                this.selectionModel.deselect(option);\n            }\n\n            if (isUserInput) {\n                this.keyManager.setActiveItem(option);\n            }\n\n            if (this.multiple) {\n                this.sortValues();\n\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mc-option`.\n                    this.focus();\n                }\n            }\n        }\n\n        if (wasSelected !== this.selectionModel.isSelected(option)) {\n            this.propagateChanges();\n        }\n\n        this.stateChanges.next();\n    }\n\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    private sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n\n            this.selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n\n    /** Emits change event to set the model value. */\n    private propagateChanges(fallbackValue?: any): void {\n        let valueToEmit: any = null;\n\n        if (this.multiple) {\n            valueToEmit = (this.selected as McOption[]).map((option) => option.value);\n        } else {\n            valueToEmit = this.selected ? (this.selected as McOption).value : fallbackValue;\n        }\n\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(new McSelectChange(this, valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /** Records option IDs to pass to the aria-owns property. */\n    private setOptionIds() {\n        this.optionIds = this.options.map((option) => option.id).join(' ');\n    }\n\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    private highlightCorrectOption(): void {\n        if (this.keyManager) {\n            if (this.empty) {\n                this.keyManager.setFirstItemActive();\n            } else {\n                this.keyManager.setActiveItem(this.selectionModel.selected[0]);\n            }\n        }\n    }\n\n    /** Scrolls the active option into view. */\n    private scrollActiveOptionIntoView(): void {\n        const activeOptionIndex = this.keyManager.activeItemIndex || 0;\n        const labelCount = countGroupLabelsBeforeOption(activeOptionIndex, this.options, this.optionGroups);\n\n        this.panel.nativeElement.scrollTop = getOptionScrollPosition(\n            activeOptionIndex + labelCount,\n            this.getItemHeight(),\n            this.panel.nativeElement.scrollTop,\n            SELECT_PANEL_MAX_HEIGHT\n        );\n    }\n\n    /** Gets the index of the provided option in the option list. */\n    private getOptionIndex(option: McOption): number | undefined {\n        /* tslint:disable-next-line */\n        return this.options.reduce((result: number, current: McOption, index: number) => {\n            /* tslint:disable-next-line:strict-type-predicates */\n            return result === undefined ? (option === current ? index : undefined) : result;\n        }, undefined);\n    }\n\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    private calculateOverlayPosition(): void {\n        const itemHeight = this.getItemHeight();\n        const items = this.getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n\n        // If no value is selected we open the popup to the first item.\n        let selectedOptionOffset =\n            this.empty ? 0 : this.getOptionIndex(this.selectionModel.selected[0])!;\n\n        selectedOptionOffset += countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        /* tslint:disable-next-line:no-magic-numbers */\n        const scrollBuffer = panelHeight / 2;\n        this.scrollTop = this.calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this.offsetY = this.calculateOverlayOffsetY();\n\n        this.checkOverlayWithinViewport(maxScroll);\n    }\n\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    private calculateOverlayOffsetX(): void {\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const isRtl = this.isRtl();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const paddingWidth = SELECT_PANEL_PADDING_X * 2;\n        let offsetX: number;\n\n        const selected = this.selectionModel.selected[0] || this.options.first;\n        offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n\n        // Invert the offset in LTR.\n        if (!isRtl) { offsetX *= -1; }\n\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        } else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    private calculateOverlayOffsetY(): number {\n        // const itemHeight = this.getItemHeight();\n        // const optionHeightAdjustment = (itemHeight - this.triggerRect.height) / 2;\n\n        // todo I'm not sure that we will use it\n        return 0;\n        // return Math.round(-optionHeightAdjustment);\n    }\n\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    private checkOverlayWithinViewport(maxScroll: number): void {\n        const itemHeight = this.getItemHeight();\n        const viewportSize = this._viewportRuler.getViewportSize();\n\n        const topSpaceAvailable = this.triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable =\n            viewportSize.height - this.triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n        const panelHeightTop = Math.abs(this.offsetY);\n        const totalPanelHeight =\n            Math.min(this.getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this.triggerRect.height;\n\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this.adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        } else if (panelHeightTop > topSpaceAvailable) {\n            this.adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        } else {\n            this.transformOrigin = this.getOriginBasedOnOption();\n        }\n    }\n\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    private adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this.scrollTop -= distanceBelowViewport;\n        this.offsetY -= distanceBelowViewport;\n        this.transformOrigin = this.getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this.scrollTop <= 0) {\n            this.scrollTop = 0;\n            this.offsetY = 0;\n            this.transformOrigin = `50% bottom 0px`;\n        }\n    }\n\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    private adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number, maxScroll: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this.scrollTop += distanceAboveViewport;\n        this.offsetY += distanceAboveViewport;\n        this.transformOrigin = this.getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this.scrollTop >= maxScroll) {\n            this.scrollTop = maxScroll;\n            this.offsetY = 0;\n            this.transformOrigin = `50% top 0px`;\n\n            return;\n        }\n    }\n\n    /** Sets the transform origin point based on the selected option. */\n    private getOriginBasedOnOption(): string {\n        const itemHeight = this.getItemHeight();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const optionHeightAdjustment = (itemHeight - this.triggerRect.height) / 2;\n        /* tslint:disable-next-line:no-magic-numbers */\n        const originY = Math.abs(this.offsetY) - optionHeightAdjustment + itemHeight / 2;\n\n        return `50% ${originY}px 0px`;\n    }\n\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    private getItemCount(): number {\n        return this.options.length + this.optionGroups.length;\n    }\n\n    /** Calculates the height of the select's options. */\n    private getItemHeight(): number {\n        // todo доделать\n        /* tslint:disable-next-line:no-magic-numbers */\n        return 32;\n        // return this.triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n}\n","export enum TimeParts {\n    hours,\n    minutes,\n    seconds\n}\n\nexport enum TimeFormats {\n    HHmmss = 'HH:mm:ss',\n    HHmm = 'HH:mm'\n}\n\nexport const TIMEFORMAT_PLACEHOLDERS: { [timeFormat: string]: string } = {\n    [TimeFormats.HHmmss]: '  :  :  ',\n    [TimeFormats.HHmm]: '  :  '\n};\n\nexport const DEFAULT_TIME_FORMAT: TimeFormats = TimeFormats.HHmm;\n\nexport const HOURS_MINUTES_SECONDS_REGEXP =\n    new RegExp(/^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]|[0-9]):([0-5][0-9]|[0-9])?$/);\nexport const HOURS_MINUTES_REGEXP = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]|[0-9])?$/;\nexport const HOURS_ONLY_REGEXP = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):?$/;\n\nexport const SECONDS_PER_MINUTE: number = 59;\nexport const MINUTES_PER_HOUR: number = 59;\nexport const HOURS_PER_DAY: number = 23;\n\n// TODO Move it to common CDK\nexport const ARROW_UP_KEYCODE: string = 'ArrowUp';\nexport const ARROW_DOWN_KEYCODE: string = 'ArrowDown';\nexport const ARROW_LEFT_KEYCODE: string = 'ArrowLeft';\nexport const ARROW_RIGHT_KEYCODE: string = 'ArrowRight';\n","import { AnimationEvent } from '@angular/animations';\nimport {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ComponentRef,\n    ElementRef,\n    EmbeddedViewRef,\n    EventEmitter, Inject, InjectionToken,\n    OnDestroy,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal } from '@ptsecurity/cdk/portal';\n\nimport {\n    mcSidepanelAnimations,\n    McSidepanelAnimationState,\n    mcSidepanelTransformAnimation\n} from './sidepanel-animations';\n\nimport { McSidepanelConfig, McSidepanelPosition } from './sidepanel-config';\n\n\nexport const MC_SIDEPANEL_WITH_INDENT =\n    new InjectionToken<boolean>('mc-sidepanel-with-indent');\n\nexport const MC_SIDEPANEL_WITH_SHADOW =\n    new InjectionToken<boolean>('mc-sidepanel-with-shadow');\n\n@Component({\n    selector: 'mc-sidepanel-container',\n    templateUrl: './sidepanel-container.component.html',\n    styleUrls: ['./sidepanel.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    animations: [mcSidepanelAnimations.sidepanelState],\n    host: {\n        class: 'mc-sidepanel-container',\n        tabindex: '-1',\n        role: 'dialog',\n        'aria-modal': 'true',\n        '[attr.id]': 'id',\n        '[@state]': `{\n            value: animationState,\n            params: animationTransform\n        }`,\n        '(@state.start)': 'onAnimation($event)',\n        '(@state.done)': 'onAnimation($event)'\n    }\n})\nexport class McSidepanelContainerComponent extends BasePortalOutlet implements OnDestroy {\n    /** ID for the container DOM element. */\n    id: string;\n\n    /** The portal outlet inside of this container into which the content will be loaded. */\n    @ViewChild(CdkPortalOutlet) portalOutlet: CdkPortalOutlet;\n\n    /** The state of the sidepanel animations. */\n    animationState: McSidepanelAnimationState = McSidepanelAnimationState.Void;\n\n    animationTransform: { transformIn: string; transformOut: string };\n\n    /** Emits whenever the state of the animation changes. */\n    animationStateChanged = new EventEmitter<AnimationEvent>();\n\n    /** Whether the component has been destroyed. */\n    private destroyed: boolean;\n\n    constructor(\n        private elementRef: ElementRef<HTMLElement>,\n        private changeDetectorRef: ChangeDetectorRef,\n        public sidepanelConfig: McSidepanelConfig,\n        @Inject(MC_SIDEPANEL_WITH_INDENT) public withIndent: boolean,\n        @Inject(MC_SIDEPANEL_WITH_SHADOW) public withShadow: boolean) {\n        super();\n    }\n\n    ngOnDestroy(): void {\n        this.destroyed = true;\n    }\n\n    /** Attach a component portal as content to this sidepanel container. */\n    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n        this.validatePortalAttached();\n        this.setAnimation();\n        this.setPanelClass();\n\n        return this.portalOutlet.attachComponentPortal(portal);\n    }\n\n    /** Attach a template portal as content to this sidepanel container. */\n    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n        this.validatePortalAttached();\n        this.setAnimation();\n        this.setPanelClass();\n\n        return this.portalOutlet.attachTemplatePortal(portal);\n    }\n\n    /** Begin animation of the sidepanel entrance into view. */\n    enter(): void {\n        if (!this.destroyed) {\n            this.animationState = McSidepanelAnimationState.Visible;\n            this.changeDetectorRef.detectChanges();\n        }\n    }\n\n    /** Begin animation of the sidepanel exiting from view. */\n    exit(): void {\n        if (!this.destroyed) {\n            this.animationState = McSidepanelAnimationState.Hidden;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    onAnimation(event: AnimationEvent) {\n        this.animationStateChanged.emit(event);\n    }\n\n    private setAnimation() {\n        const position: McSidepanelPosition = this.sidepanelConfig.position!;\n\n        this.animationTransform = {\n            transformIn: mcSidepanelTransformAnimation[position].in,\n            transformOut: mcSidepanelTransformAnimation[position].out\n        };\n    }\n\n    private setPanelClass() {\n        const element: HTMLElement = this.elementRef.nativeElement;\n        const position: McSidepanelPosition = this.sidepanelConfig.position!;\n\n        element.classList.add(`mc-sidepanel-container_${position}`);\n\n        if (this.withShadow) {\n            element.classList.add('mc-sidepanel-container_shadowed');\n        }\n    }\n\n    private validatePortalAttached() {\n        if (this.portalOutlet.hasAttached()) {\n            throw Error('Attempting to attach sidepanel content after content is already attached');\n        }\n    }\n}\n","import { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { merge, Observable, Subject } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\n\nimport { McSidepanelAnimationState } from './sidepanel-animations';\nimport { McSidepanelConfig } from './sidepanel-config';\nimport { McSidepanelContainerComponent } from './sidepanel-container.component';\n\n\n// Counter for unique sidepanel ids.\nlet uniqueId = 0;\n\nexport class McSidepanelRef<T = any, R = any> {\n    readonly id: string;\n\n    /** Instance of the component making up the content of the sidepanel. */\n    instance: T;\n\n    /** Subject for notifying the user that the sidepanel has been closed and dismissed. */\n    private readonly afterClosed$ = new Subject<R | undefined>();\n\n    /** Subject for notifying the user that the sidepanel has opened and appeared. */\n    private readonly afterOpened$ = new Subject<void>();\n\n    /** Result to be passed down to the `afterDismissed` stream. */\n    private result: R | undefined;\n\n    constructor(\n        public containerInstance: McSidepanelContainerComponent,\n        private overlayRef: OverlayRef,\n        public config: McSidepanelConfig) {\n\n        this.id = this.config.id || `mc-sidepanel-${uniqueId++}`;\n        this.containerInstance.id = this.id;\n\n        // Emit when opening animation completes\n        containerInstance.animationStateChanged.pipe(\n            filter(\n                (event) => event.phaseName === 'done' && event.toState === McSidepanelAnimationState.Visible\n            ),\n            take(1)\n        ).subscribe(() => {\n            this.afterOpened$.next();\n            this.afterOpened$.complete();\n        });\n\n        // Dispose overlay when closing animation is complete\n        containerInstance.animationStateChanged.pipe(\n            filter(\n                (event) => event.phaseName === 'done' && event.toState === McSidepanelAnimationState.Hidden\n            ),\n            take(1)\n        ).subscribe(() => {\n            overlayRef.dispose();\n            this.afterClosed$.next(this.result);\n            this.afterClosed$.complete();\n        });\n\n        if (!containerInstance.sidepanelConfig.disableClose) {\n            merge(\n                overlayRef.backdropClick(),\n                overlayRef.keydownEvents().pipe(\n                    // tslint:disable:deprecation\n                    // keyCode is deprecated, but IE11 and Edge don't support code property, which we need use instead\n                    filter((event) => event.keyCode === ESCAPE)\n                )\n            ).subscribe(() => this.close());\n        }\n    }\n\n    close(result?: R): void {\n        if (!this.afterClosed$.closed) {\n            // Transition the backdrop in parallel to the sidepanel.\n            this.containerInstance.animationStateChanged.pipe(\n                filter((event) => event.phaseName === 'done'),\n                take(1)\n            ).subscribe(() => this.overlayRef.detachBackdrop());\n\n            this.result = result;\n            this.containerInstance.exit();\n        }\n    }\n\n    /** Gets an observable that is notified when the sidepanel is finished closing. */\n    afterClosed(): Observable<R | undefined> {\n        return this.afterClosed$.asObservable();\n    }\n\n    /** Gets an observable that is notified when the sidepanel has opened and appeared. */\n    afterOpened(): Observable<void> {\n        return this.afterOpened$.asObservable();\n    }\n}\n","import {\n    ComponentRef,\n    Inject,\n    Injectable,\n    InjectionToken,\n    Injector, OnDestroy,\n    Optional,\n    SkipSelf,\n    TemplateRef\n} from '@angular/core';\nimport { Overlay, OverlayConfig, OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal, IComponentType, PortalInjector, TemplatePortal } from '@ptsecurity/cdk/portal';\n\nimport { MC_SIDEPANEL_DATA, McSidepanelConfig } from './sidepanel-config';\nimport {\n    McSidepanelContainerComponent,\n    MC_SIDEPANEL_WITH_INDENT,\n    MC_SIDEPANEL_WITH_SHADOW\n} from './sidepanel-container.component';\nimport { McSidepanelRef } from './sidepanel-ref';\n\n\n/** Injection token that can be used to specify default sidepanel options. */\nexport const MC_SIDEPANEL_DEFAULT_OPTIONS =\n    new InjectionToken<McSidepanelConfig>('mc-sidepanel-default-options');\n\n@Injectable()\nexport class McSidepanelService implements OnDestroy {\n    private openedSidepanelsAtThisLevel: McSidepanelRef[] = [];\n\n    /** Keeps track of the currently-open sidepanels. */\n    get openedSidepanels(): McSidepanelRef[] {\n        return this.parentSidepanelService ? this.parentSidepanelService.openedSidepanels :\n            this.openedSidepanelsAtThisLevel;\n    }\n\n    constructor(\n        private overlay: Overlay,\n        private injector: Injector,\n        @Optional() @Inject(MC_SIDEPANEL_DEFAULT_OPTIONS) private defaultOptions: McSidepanelConfig,\n        @Optional() @SkipSelf() private parentSidepanelService: McSidepanelService) {\n    }\n\n    ngOnDestroy() {\n        // Only close the sidepanels at this level on destroy\n        // since the parent service may still be active.\n        this.closeSidepanels(this.openedSidepanelsAtThisLevel);\n    }\n\n    open<T, D = any>(componentOrTemplateRef: IComponentType<T> | TemplateRef<T>,\n                     config?: McSidepanelConfig<D>): McSidepanelRef<T> {\n        const fullConfig = {\n            ...(this.defaultOptions || new McSidepanelConfig()),\n            ...config\n        };\n\n        if (fullConfig.id && this.getSidepanelById(fullConfig.id)) {\n            throw Error(`Sidepanel with id \"${fullConfig.id}\" exists already. The sidepanel id must be unique.`);\n        }\n\n        const overlayRef = this.createOverlay(fullConfig);\n        const container = this.attachContainer(overlayRef, fullConfig);\n        const ref = new McSidepanelRef(container, overlayRef, fullConfig);\n\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n                $implicit: fullConfig.data,\n                sidepanelRef: ref\n            } as any));\n        } else {\n            const injector = this.createInjector(fullConfig, ref, container);\n            const portal = new ComponentPortal(componentOrTemplateRef, undefined, injector);\n            const contentRef = container.attachComponentPortal(portal);\n\n            ref.instance = contentRef.instance;\n        }\n\n        this.openedSidepanels.push(ref);\n        ref.afterClosed().subscribe(() => this.removeOpenSidepanel(ref));\n        container.enter();\n\n        return ref;\n    }\n\n    /**\n     * Closes all of the currently-open sidepanels.\n     */\n    closeAll(): void {\n        this.closeSidepanels(this.openedSidepanels);\n    }\n\n    /**\n     * Finds an open sidepanel by its id.\n     * @param id ID to use when looking up the sidepanel.\n     */\n    getSidepanelById(id: string): McSidepanelRef | undefined {\n        return this.openedSidepanels.find((sidepanel) => sidepanel.id === id);\n    }\n\n    /**\n     * Attaches the sidepanel container component to the overlay.\n     */\n    private attachContainer(overlayRef: OverlayRef, config: McSidepanelConfig): McSidepanelContainerComponent {\n        const openedSidepanelsWithSamePosition = this.getOpenedSidepanelsWithSamePosition(config);\n\n        const injector = new PortalInjector(this.injector, new WeakMap<any>([\n            [McSidepanelConfig, config],\n            [MC_SIDEPANEL_WITH_INDENT, openedSidepanelsWithSamePosition.length >= 1],\n            [MC_SIDEPANEL_WITH_SHADOW, openedSidepanelsWithSamePosition.length < 2] // tslint:disable-line\n        ]));\n\n        const containerPortal = new ComponentPortal(McSidepanelContainerComponent, undefined, injector);\n        const containerRef: ComponentRef<McSidepanelContainerComponent> = overlayRef.attach(containerPortal);\n\n        return containerRef.instance;\n    }\n\n    /**\n     * Creates a custom injector to be used inside the sidepanel. This allows a component loaded inside\n     * of a sidepanel to close itself and, optionally, to return a value.\n     * @param config Config object that is used to construct the sidepanel.\n     * @param sidepanelRef Reference to the sidepanel.\n     * @param sidepanelContainer Sidepanel container element that wraps all of the contents.\n     * @returns The custom injector that can be used inside the sidepanel.\n     */\n    private createInjector<T>(\n        config: McSidepanelConfig,\n        sidepanelRef: McSidepanelRef<T>,\n        sidepanelContainer: McSidepanelContainerComponent): PortalInjector {\n\n        // The McSidepanelContainerComponent is injected in the portal as the McSidepanelContainerComponent and\n        // the sidepanel's content are created out of the same ViewContainerRef and as such, are siblings for injector\n        // purposes. To allow the hierarchy that is expected, the McSidepanelContainerComponent is explicitly\n        // added to the injection tokens.\n        const injectionTokens = new WeakMap<any>([\n            [McSidepanelContainerComponent, sidepanelContainer],\n            [MC_SIDEPANEL_DATA, config.data],\n            [McSidepanelRef, sidepanelRef]\n        ]);\n\n        return new PortalInjector(this.injector, injectionTokens);\n    }\n\n    /**\n     * Creates a new overlay and places it in the correct location.\n     * @param config The user-specified sidepanel config.\n     */\n    private createOverlay(config: McSidepanelConfig): OverlayRef {\n        const overlayConfig = new OverlayConfig({\n            hasBackdrop: config.hasBackdrop,\n            backdropClass: this.getBackdropClass(config),\n            maxWidth: '100%',\n            panelClass: config.overlayPanelClass,\n            scrollStrategy: this.overlay.scrollStrategies.block(),\n            positionStrategy: this.overlay.position().global()\n        });\n\n        return this.overlay.create(overlayConfig);\n    }\n\n    private closeSidepanels(sidepanels: McSidepanelRef[]) {\n        const reversedOpenedSidepanels = [...sidepanels.reverse()];\n\n        reversedOpenedSidepanels.forEach((sidepanelRef: McSidepanelRef) => {\n            sidepanelRef.close();\n        });\n    }\n\n    private getBackdropClass(config: McSidepanelConfig): string {\n        const hasOpenedSidepanelWithBackdrop =\n            this.openedSidepanels.some((sidepanelRef) => sidepanelRef.config.hasBackdrop!);\n\n        return config.requiredBackdrop || !hasOpenedSidepanelWithBackdrop ? 'cdk-overlay-dark-backdrop' :\n            'cdk-overlay-transparent-backdrop';\n    }\n\n    private getOpenedSidepanelsWithSamePosition(config: McSidepanelConfig): McSidepanelRef[] {\n        return this.openedSidepanels.filter((sidepanelRef) => sidepanelRef.config.position === config.position);\n    }\n\n    /**\n     * Removes a sidepanel from the array of open sidepanels.\n     * @param sidepanelRef Sidepanel to be removed.\n     */\n    private removeOpenSidepanel(sidepanelRef: McSidepanelRef) {\n        const index = this.openedSidepanels.indexOf(sidepanelRef);\n\n        if (index > -1) {\n            this.openedSidepanels.splice(index, 1);\n        }\n    }\n}\n","import { Component, Directive, ElementRef, Input, OnChanges, OnInit, Optional, SimpleChanges } from '@angular/core';\n\nimport { McSidepanelRef } from './sidepanel-ref';\nimport { McSidepanelService } from './sidepanel.service';\n\n\n/**\n * Button that will close the current sidepanel.\n */\n@Directive({\n    selector: 'button[mc-sidepanel-close], button[mcSidepanelClose]',\n    host: {\n        '(click)': 'sidepanelRef.close(sidepanelResult)',\n        class: 'mc-sidepanel-close',\n        type: 'button'\n    }\n})\nexport class McSidepanelClose implements OnInit, OnChanges {\n    @Input('mc-sidepanel-close') sidepanelResult: any;\n\n    @Input('mcSidepanelClose') mcSidepanelClose: any;\n\n    constructor(\n        @Optional() public sidepanelRef: McSidepanelRef,\n        private elementRef: ElementRef<HTMLElement>,\n        private sidepanelService: McSidepanelService\n    ) {}\n\n    ngOnInit() {\n        if (!this.sidepanelRef) {\n            // When this directive is included in a sidepanel via TemplateRef (rather than being\n            // in a Component), the SidepanelRef isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the SidepanelRef by\n            // ID.\n            // This must occur in `onInit`, as the ID binding for the sidepanel container won't\n            // be resolved at constructor time. We use setTimeout by same reason.\n            setTimeout(() => {\n                this.sidepanelRef = getClosestSidepanel(this.elementRef, this.sidepanelService.openedSidepanels)!;\n            });\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const proxiedChange = changes.mcSidepanelClose || changes.sidepanelResult;\n\n        if (proxiedChange) {\n            this.sidepanelResult = proxiedChange.currentValue;\n        }\n    }\n}\n\n/**\n * Header of a sidepanel.\n */\n@Component({\n    selector: 'mc-sidepanel-header',\n    template: `\n        <div class=\"mc-sidepanel-title\">\n            <ng-content></ng-content>\n        </div>\n        <button *ngIf=\"closeable\" mc-sidepanel-close>\n            <span class=\"mc-sidepanel-close-x\">\n                <i mc-icon=\"mc-close-L_16\" class=\"mc-icon mc-icon_light\" color=\"second\"></i>\n            </span>\n        </button>\n    `,\n    host: {\n        class: 'mc-sidepanel-header'\n    }\n})\nexport class McSidepanelHeader {\n    @Input() closeable: boolean;\n}\n\n/**\n * Scrollable content container of a sidepanel.\n */\n@Directive({\n    selector: 'mc-sidepanel-body, [mc-sidepanel-body], mcSidepanelBody',\n    host: {\n        class: 'mc-sidepanel-body'\n    }\n})\nexport class McSidepanelBody {}\n\n/**\n * Footer of a sidepanel.\n */\n@Directive({\n    selector: 'mc-sidepanel-footer, [mc-sidepanel-footer], mcSidepanelFooter',\n    host: {\n        class: 'mc-sidepanel-footer'\n    }\n})\nexport class McSidepanelFooter {}\n\n/**\n * Actions block of a sidepanel footer.\n */\n@Directive({\n    selector: 'mc-sidepanel-actions, [mc-sidepanel-actions], mcSidepanelActions',\n    host: {\n        class: 'mc-sidepanel-actions'\n    }\n})\nexport class McSidepanelActions {}\n\n/**\n * Finds the closest McSidepanelRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a sidepanel.\n * @param openSidepanels References to the currently-open sidepanels.\n */\nfunction getClosestSidepanel(element: ElementRef<HTMLElement>, openSidepanels: McSidepanelRef[]) {\n    let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n    while (parent && !parent.classList.contains('mc-sidepanel-container')) {\n        parent = parent.parentElement;\n    }\n\n    return parent ? openSidepanels.find((sidepanel) => sidepanel.id === parent!.id) : null;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { PortalModule } from '@ptsecurity/cdk/portal';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McSidepanelContainerComponent } from './sidepanel-container.component';\nimport {\n    McSidepanelActions,\n    McSidepanelBody,\n    McSidepanelClose,\n    McSidepanelFooter,\n    McSidepanelHeader\n} from './sidepanel-directives';\nimport { McSidepanelService } from './sidepanel.service';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        PortalModule,\n        McCommonModule,\n        McIconModule\n    ],\n    providers: [McSidepanelService],\n    declarations: [\n        McSidepanelContainerComponent,\n        McSidepanelClose,\n        McSidepanelHeader,\n        McSidepanelBody,\n        McSidepanelFooter,\n        McSidepanelActions\n    ],\n    entryComponents: [McSidepanelContainerComponent],\n    exports: [\n        McSidepanelContainerComponent,\n        McSidepanelClose,\n        McSidepanelHeader,\n        McSidepanelBody,\n        McSidepanelFooter,\n        McSidepanelActions\n    ]\n})\nexport class McSidepanelModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    Input,\n    NgZone, OnDestroy,\n    OnInit,\n    Renderer2,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { coerceBooleanProperty, coerceCssPixelValue, coerceNumberProperty } from '@ptsecurity/cdk/coercion';\n\n\ninterface IArea {\n    area: McSplitterAreaDirective;\n    index: number;\n    order: number;\n    initialSize: number;\n}\n\ninterface IPoint {\n    x: number;\n    y: number;\n}\n\n\nconst enum AttributeProperty {\n    Disabled = 'disabled'\n}\n\nconst enum Cursor {\n    Default = 'default',\n    ResizeColumn = 'col-resize',\n    ResizeRow = 'row-resize'\n}\n\nconst enum StyleProperty {\n    Cursor = 'cursor',\n    Flex = 'flex',\n    FlexBasis = 'flex-basis',\n    FlexDirection = 'flex-direction',\n    Height = 'height',\n    MaxWidth = 'max-width',\n    MinHeight = 'min-height',\n    MinWidth = 'minWidth',\n    OffsetHeight = 'offsetHeight',\n    OffsetWidth = 'offsetWidth',\n    Order = 'order',\n    Width = 'width'\n}\n\nconst enum State {\n    Disabled = 'disabled',\n    Horizontal = 'horizontal',\n    Vertical = 'vertical'\n}\n\nexport const enum Direction {\n    Horizontal = 'horizontal',\n    Vertical = 'vertical'\n}\n\n@Component({\n    selector: 'mc-splitter',\n    preserveWhitespaces: false,\n    styleUrls: ['splitter.css'],\n    templateUrl: './splitter.component.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McSplitterComponent implements OnInit {\n    readonly areas: IArea[] = [];\n\n    private _direction: Direction;\n    private _disabled: boolean = false;\n    private _gutterSize: number = 6;\n\n    private isDragging: boolean = false;\n\n    private readonly areaPositionDivider: number = 2;\n    private readonly listeners: (() => void)[] = [];\n\n    @Input()\n    set direction(direction: Direction) {\n        this._direction = direction;\n    }\n\n    get direction(): Direction {\n        return this._direction;\n    }\n\n    @Input()\n    set disabled(disabled: boolean) {\n        this._disabled = coerceBooleanProperty(disabled);\n    }\n\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    @Input()\n    set gutterSize(gutterSize: number) {\n        const size = coerceNumberProperty(gutterSize);\n        this._gutterSize = size > 0 ? size : this.gutterSize;\n    }\n\n    get gutterSize(): number {\n        return this._gutterSize;\n    }\n\n    constructor(private elementRef: ElementRef,\n                private ngZone: NgZone,\n                private renderer: Renderer2) {}\n\n    addArea(area: McSplitterAreaDirective): void {\n        const index: number = this.areas.length;\n        const order: number = index * this.areaPositionDivider;\n        const size: number = area.getSize();\n\n        area.setOrder(order);\n\n        this.areas.push({\n            area,\n            index,\n            order,\n            initialSize: size\n        });\n    }\n\n    ngOnInit(): void {\n        if (!this.direction) {\n            this.direction = Direction.Horizontal;\n        }\n\n        this.setStyle(StyleProperty.FlexDirection, this.isVertical() ? 'column' : 'row');\n    }\n\n    onMouseDown(event: MouseEvent, leftAreaIndex: number, rightAreaIndex: number) {\n        if (this.disabled) {\n            return;\n        }\n\n        const leftArea = this.areas[leftAreaIndex];\n        const rightArea = this.areas[rightAreaIndex];\n\n        const startPoint: IPoint = {\n            x: event.screenX,\n            y: event.screenY\n        };\n\n        leftArea.initialSize = leftArea.area.getSize();\n        rightArea.initialSize = rightArea.area.getSize();\n\n        this.areas.forEach((item) => {\n            const size = item.area.getSize();\n            item.area.disableFlex();\n            item.area.setSize(size);\n        });\n\n        this.ngZone.runOutsideAngular(() => {\n            this.listeners.push(\n                this.renderer.listen(\n                    'document',\n                    'mouseup',\n                    () => this.onMouseUp()\n                )\n            );\n        });\n\n        this.ngZone.runOutsideAngular(() => {\n            this.listeners.push(\n                this.renderer.listen(\n                    'document',\n                    'mousemove',\n                    (e: MouseEvent) => this.onMouseMove(e, startPoint, leftArea, rightArea)\n                )\n            );\n        });\n\n        this.isDragging = true;\n    }\n\n    removeArea(area: McSplitterAreaDirective): void {\n        let indexToRemove: number = -1;\n\n        this.areas.some((item, index) => {\n            if (item.area === area) {\n                indexToRemove = index;\n\n                return true;\n            }\n\n            return false;\n        });\n\n        if (indexToRemove === -1) {\n            return;\n        }\n\n        this.areas.splice(indexToRemove, 1);\n    }\n\n    private isVertical(): boolean {\n        return this.direction === Direction.Vertical;\n    }\n\n    private onMouseMove(event: MouseEvent, startPoint: IPoint, leftArea: IArea, rightArea: IArea) {\n        if (!this.isDragging || this.disabled) {\n            return;\n        }\n\n        const endPoint: IPoint = {\n            x: event.screenX,\n            y: event.screenY\n        };\n\n        const offset = this.isVertical()\n            ? startPoint.y - endPoint.y\n            : startPoint.x - endPoint.x;\n\n        const newLeftAreaSize = leftArea.initialSize - offset;\n        const newRightAreaSize = rightArea.initialSize + offset;\n\n        const minLeftAreaSize = leftArea.area.getMinSize();\n        const minRightAreaSize = rightArea.area.getMinSize();\n\n        if (newLeftAreaSize <= minLeftAreaSize || newRightAreaSize <= minRightAreaSize) {\n            const rightAreaOffset = leftArea.initialSize - minLeftAreaSize;\n\n            leftArea.area.setSize(minLeftAreaSize);\n            rightArea.area.setSize(rightArea.initialSize + rightAreaOffset);\n        } else if (newLeftAreaSize <= 0) {\n            leftArea.area.setSize(0);\n            rightArea.area.setSize(rightArea.initialSize + leftArea.initialSize);\n        } else if (newRightAreaSize <= 0) {\n            leftArea.area.setSize(rightArea.initialSize + leftArea.initialSize);\n            rightArea.area.setSize(0);\n        } else {\n            leftArea.area.setSize(newLeftAreaSize);\n            rightArea.area.setSize(newRightAreaSize);\n        }\n    }\n\n    private onMouseUp() {\n        while (this.listeners.length > 0) {\n            const unsubscribe = this.listeners.pop();\n\n            if (unsubscribe) {\n                unsubscribe();\n            }\n        }\n\n        this.isDragging = false;\n    }\n\n    private setStyle(property: StyleProperty, value: string | number) {\n        this.renderer.setStyle(this.elementRef.nativeElement, property, value);\n    }\n}\n\n@Directive({\n    selector: 'mc-gutter'\n})\nexport class McGutterDirective implements OnInit {\n    private _direction: Direction = Direction.Vertical;\n    private _disabled: boolean = false;\n    private _order: number = 0;\n    private _size: number = 6;\n\n    @Input()\n    set direction(direction: Direction) {\n        this._direction = direction;\n    }\n\n    get direction(): Direction {\n        return this._direction;\n    }\n\n    @Input()\n    set disabled(disabled: boolean) {\n        this._disabled = coerceBooleanProperty(disabled);\n    }\n\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    @Input()\n    set order(order: number) {\n        this._order = coerceNumberProperty(order);\n    }\n\n    get order(): number {\n        return this._order;\n    }\n\n    @Input()\n    set size(size: number) {\n        this._size = coerceNumberProperty(size);\n    }\n\n    get size(): number {\n        return this._size;\n    }\n\n    constructor(private renderer: Renderer2,\n                private elementRef: ElementRef) {\n    }\n\n    ngOnInit(): void {\n        this.setStyle(StyleProperty.Cursor, this.getCursor(this.getState()));\n        this.setStyle(StyleProperty.FlexBasis, coerceCssPixelValue(this.size));\n        this.setStyle(this.isVertical() ? StyleProperty.Height : StyleProperty.Width, coerceCssPixelValue(this.size));\n        this.setStyle(StyleProperty.Order, this.order);\n\n        if (!this.isVertical()) {\n            this.setStyle(StyleProperty.Height, '100%');\n        }\n\n        if (this.disabled) {\n            this.setAttr(AttributeProperty.Disabled, 'true');\n        }\n\n        // fix IE issue with gutter icon. flex-direction is requied for flex alignment options\n        this.setStyle(StyleProperty.FlexDirection, this.isVertical() ? 'row' : 'column');\n    }\n\n    private isVertical(): boolean {\n        return this.direction === Direction.Vertical;\n    }\n\n    private getCursor(state: State): string {\n        switch (state) {\n            case State.Disabled:\n                return Cursor.Default;\n            case State.Vertical:\n                return  Cursor.ResizeRow;\n            case State.Horizontal:\n                return Cursor.ResizeColumn;\n            default:\n                throw Error(`Unknown gutter state for cursor: ${state}`);\n        }\n    }\n\n    private getState(): State {\n        return this.disabled\n            ? State.Disabled\n            : this.direction === Direction.Vertical\n                ? State.Vertical\n                : State.Horizontal;\n    }\n\n    private setStyle(property: StyleProperty, value: string | number) {\n        this.renderer.setStyle(this.elementRef.nativeElement, property, value);\n    }\n\n    private setAttr(attribute: AttributeProperty, value: string) {\n        this.renderer.setAttribute(this.elementRef.nativeElement, attribute, value);\n    }\n}\n\n@Directive({\n    selector: 'mc-splitter-area'\n})\nexport class McSplitterAreaDirective implements OnInit, OnDestroy {\n    constructor(private elementRef: ElementRef,\n                private renderer: Renderer2,\n                private splitter: McSplitterComponent) {}\n\n    disableFlex(): void {\n        this.renderer.removeStyle(this.elementRef.nativeElement, 'flex');\n    }\n\n    ngOnInit(): void {\n        this.splitter.addArea(this);\n\n        this.removeStyle(StyleProperty.MaxWidth);\n        this.setStyle(StyleProperty.Flex, '1');\n\n        if (this.splitter.direction === Direction.Vertical) {\n            this.setStyle(StyleProperty.Width, '100%');\n            this.removeStyle(StyleProperty.Height);\n        } else {\n            this.setStyle(StyleProperty.Height, '100%');\n            this.removeStyle(StyleProperty.Width);\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.splitter.removeArea(this);\n    }\n\n    setOrder(order: number): void {\n        this.setStyle(StyleProperty.Order, order);\n    }\n\n    setSize(size: number): void {\n        const sz = coerceNumberProperty(size);\n        this.setStyle(this.getSizeProperty(), coerceCssPixelValue(sz));\n    }\n\n    getSize(): number {\n        return this.elementRef.nativeElement[this.getOffsetSizeProperty()];\n    }\n\n    getMinSize(): number {\n        const styles = getComputedStyle(this.elementRef.nativeElement);\n\n        return parseFloat(styles[this.getMinSizeProperty()]);\n    }\n\n    private isVertical(): boolean {\n        return this.splitter.direction === Direction.Vertical;\n    }\n\n    private getMinSizeProperty(): StyleProperty {\n        return this.isVertical()\n            ? StyleProperty.MinHeight\n            : StyleProperty.MinWidth;\n    }\n\n    private getOffsetSizeProperty(): StyleProperty {\n        return this.isVertical()\n            ? StyleProperty.OffsetHeight\n            : StyleProperty.OffsetWidth;\n    }\n\n    private getSizeProperty(): StyleProperty {\n        return this.isVertical()\n            ? StyleProperty.Height\n            : StyleProperty.Width;\n    }\n\n    private setStyle(style: StyleProperty, value: string | number) {\n        this.renderer.setStyle(this.elementRef.nativeElement, style, value);\n    }\n\n    private removeStyle(style: StyleProperty) {\n        this.renderer.removeStyle(this.elementRef.nativeElement, style);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McGutterDirective, McSplitterAreaDirective, McSplitterComponent } from './splitter.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        McIconModule\n    ],\n    exports: [\n        McGutterDirective,\n        McSplitterAreaDirective,\n        McSplitterComponent\n    ],\n    declarations: [\n        McGutterDirective,\n        McSplitterAreaDirective,\n        McSplitterComponent\n    ]\n})\nexport class McSplitterModule {\n}\n","import { animate, state, style, transition, trigger } from '@angular/animations';\nimport {\n    Attribute,\n    ChangeDetectionStrategy, ChangeDetectorRef,\n    Component,\n    ElementRef, EventEmitter, forwardRef,\n    Input, Output, ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport {\n    ThemePalette,\n    CanColor, CanColorCtor,\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex\n} from '@ptsecurity/mosaic/core';\n\n\nlet nextUniqueId = 0;\n\ntype ToggleLabelPositionType = 'left' | 'right';\n\nexport class McToggleBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McToggleMixinBase:\n    HasTabIndexCtor &\n    CanDisableCtor &\n    CanColorCtor &\n    typeof McToggleBase = mixinTabIndex(mixinColor(mixinDisabled(McToggleBase), ThemePalette.Primary));\n\nexport class McToggleChange {\n    source: McToggleComponent;\n    checked: boolean;\n}\n\n@Component({\n    selector: 'mc-toggle',\n    exportAs: 'mcToggle',\n    templateUrl: './toggle.component.html',\n    styleUrls: ['./toggle.css'],\n    providers: [\n        {provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => McToggleComponent), multi: true}\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color', 'tabIndex'],\n    host: {\n        class: 'mc-toggle',\n        '[id]': 'id',\n        '[attr.id]': 'id',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-toggle_off]': '!checked'\n    },\n    animations: [\n        trigger('switch', [\n            state('true' , style({ left: '50%' })),\n            state('false', style({ left: '1px' })),\n            transition('true <=> false', animate('150ms'))\n        ])\n    ]\n})\nexport class McToggleComponent extends _McToggleMixinBase\n    implements ControlValueAccessor, CanColor, CanDisable, HasTabIndex {\n\n    @ViewChild('input') _inputElement: ElementRef;\n\n    @Input() labelPosition: ToggleLabelPositionType = 'right';\n\n    @Input('aria-label') ariaLabel: string = '';\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n    private _uniqueId: string = `mc-toggle-${++nextUniqueId}`;\n\n    // tslint:disable:member-ordering\n    @Input() id: string = this._uniqueId;\n\n    get inputId(): string {\n        return `${this.id || this._uniqueId}-input`;\n    }\n\n    @Input() name: string | null = null;\n\n    @Input() value: string;\n\n    private _disabled: boolean = false;\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value !== this._disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _checked: boolean = false;\n\n    get checked() {\n        return this._checked;\n    }\n\n    @Input()\n    set checked(value: boolean) {\n        if (value !== this._checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    @Output() readonly change: EventEmitter<McToggleChange> =\n        new EventEmitter<McToggleChange>();\n\n    constructor(public _elementRef: ElementRef,\n                private _focusMonitor: FocusMonitor,\n                private _changeDetectorRef: ChangeDetectorRef,\n                @Attribute('tabindex') tabIndex: string\n    ) {\n        super(_elementRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n    }\n\n    _getAriaChecked(): boolean {\n        return this.checked;\n    }\n\n    _onInteractionEvent(event: Event) {\n        event.stopPropagation();\n    }\n\n    _onLabelTextChange() {\n        this._changeDetectorRef.markForCheck();\n    }\n\n    _onInputClick(event: MouseEvent) {\n        event.stopPropagation();\n        this._updateModelValue();\n        this._emitChangeEvent();\n    }\n\n    writeValue(value: any) {\n        this.checked = !!value;\n    }\n\n    registerOnChange(fn: any) {\n        this._onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: any) {\n        this._onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n    }\n\n    // tslint:disable-next-line:no-empty\n    private _onTouchedCallback = () => {};\n\n    // tslint:disable-next-line:no-empty\n    private _onChangeCallback = (_: any) => {};\n\n    private _updateModelValue() {\n        this._checked = !this.checked;\n        this._onChangeCallback(this.checked);\n        this._onTouchedCallback();\n    }\n\n    private _emitChangeEvent() {\n        const event = new McToggleChange();\n        event.source = this;\n        event.checked = this.checked;\n\n        this._onChangeCallback(this.checked);\n        this.change.emit(event);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McToggleComponent } from './toggle.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule],\n    exports: [McToggleComponent],\n    declarations: [McToggleComponent]\n})\nexport class McToggleModule {\n}\n","/* tslint:disable:no-empty */\n\nimport {\n    AfterContentInit,\n    AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    Directive,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Input,\n    isDevMode,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    Renderer2,\n    Self,\n    SimpleChanges,\n    ViewChild,\n    ViewChildren,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    RIGHT_ARROW,\n    SPACE,\n    UP_ARROW,\n    A\n} from '@ptsecurity/cdk/keycodes';\nimport {\n    CdkConnectedOverlay,\n    ViewportRuler\n} from '@ptsecurity/cdk/overlay';\nimport { CdkTree } from '@ptsecurity/cdk/tree';\nimport {\n    getOptionScrollPosition,\n    CanDisable,\n    CanUpdateErrorState,\n    ErrorStateMatcher,\n    HasTabIndex,\n    CanDisableCtor,\n    HasTabIndexCtor,\n    CanUpdateErrorStateCtor,\n    mixinTabIndex,\n    mixinDisabled,\n    mixinErrorState,\n    mcSelectAnimations,\n\n    SELECT_PANEL_MAX_HEIGHT,\n    SELECT_PANEL_PADDING_X,\n    SELECT_PANEL_VIEWPORT_PADDING,\n\n    getMcSelectDynamicMultipleError,\n    getMcSelectNonFunctionValueError,\n    getMcSelectNonArrayValueError,\n    MC_SELECT_SCROLL_STRATEGY\n} from '@ptsecurity/mosaic/core';\nimport { McFormField, McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { McTag } from '@ptsecurity/mosaic/tags';\nimport { McTreeSelection, McTreeOption } from '@ptsecurity/mosaic/tree';\nimport { defer, merge, Observable, Subject } from 'rxjs';\nimport {\n    filter,\n    map,\n    startWith,\n    switchMap,\n    take,\n    takeUntil,\n    distinctUntilChanged\n} from 'rxjs/operators';\n\n\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the select value has changed. */\nexport class McTreeSelectChange {\n    constructor(public source: McTreeOption, public value: any, public isUserInput = false) {}\n}\n\n\n@Directive({ selector: 'mc-tree-select-trigger' })\nexport class McTreeSelectTrigger {}\n\n\nclass McTreeSelectBase {\n    constructor(\n        public elementRef: ElementRef,\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {}\n}\n\n// tslint:disable-next-line:naming-convention\nconst McTreeSelectMixinBase: CanDisableCtor & HasTabIndexCtor & CanUpdateErrorStateCtor &\n    typeof McTreeSelectBase = mixinTabIndex(mixinDisabled(mixinErrorState(McTreeSelectBase)));\n\n\n@Component({\n    selector: 'mc-tree-select',\n    exportAs: 'mcTreeSelect',\n    templateUrl: 'tree-select.html',\n    styleUrls: ['./tree-select.css'],\n    inputs: ['disabled', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'tabIndex',\n\n        class: 'mc-tree-select',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-select-invalid]': 'errorState',\n        '[class.mc-select-required]': 'required',\n\n        '(keydown)': 'handleKeydown($event)',\n        '(focus)': 'onFocus()',\n        '(blur)': 'onBlur()',\n        '(window:resize)': 'calculateHiddenItems()'\n    },\n    animations: [\n        mcSelectAnimations.transformPanel,\n        mcSelectAnimations.fadeInContent\n    ],\n    providers: [\n        { provide: McFormFieldControl, useExisting: McTreeSelect },\n        { provide: CdkTree, useExisting: McTreeSelect }\n    ]\n})\nexport class McTreeSelect extends McTreeSelectMixinBase implements\n    AfterContentInit, AfterViewInit, OnChanges, OnDestroy, OnInit, DoCheck, ControlValueAccessor,\n    CanDisable, HasTabIndex, McFormFieldControl<any>, CanUpdateErrorState {\n\n    /** A name for this control that can be used by `mc-form-field`. */\n    controlType = 'mc-select';\n\n    hiddenItems: number = 0;\n    oneMoreText: string = '...ещё';\n\n    /** The last measured value for the trigger's client bounding rect. */\n    triggerRect: ClientRect;\n\n    /** The cached font-size of the trigger element. */\n    triggerFontSize = 0;\n\n    /** Deals with the selection logic. */\n    selectionModel: SelectionModel<McTreeOption>;\n\n    /** The IDs of child options to be passed to the aria-owns attribute. */\n    optionIds: string = '';\n\n    /** The value of the select panel's transform-origin property. */\n    transformOrigin: string = 'top';\n\n    /** Whether the panel's animation is done. */\n    panelDoneAnimating: boolean = false;\n\n    /** Emits when the panel element is finished transforming in. */\n    panelDoneAnimatingStream = new Subject<string>();\n\n    /** Strategy that will be used to handle scrolling while the select panel is open. */\n    scrollStrategy = this.scrollStrategyFactory();\n\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n    offsetY = 0;\n\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n    positions = [\n        {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top'\n        },\n        {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom'\n        }\n    ];\n\n    @ViewChild('trigger') trigger: ElementRef;\n\n    @ViewChild('panel') panel: ElementRef;\n\n    @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n    @ViewChildren(McTag) tags: QueryList<McTag>;\n\n    /** User-supplied override of the trigger element. */\n    @ContentChild(McTreeSelectTrigger) customTrigger: McTreeSelectTrigger;\n\n    @ContentChild(McTreeSelection) tree: McTreeSelection;\n\n    /** Event emitted when the select panel has been toggled. */\n    @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted when the select has been opened. */\n    @Output('opened') readonly openedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => o), map(() => {}));\n\n    /** Event emitted when the select has been closed. */\n    @Output('closed') readonly closedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => !o), map(() => {}));\n\n    /** Event emitted when the selected value has been changed by the user. */\n    @Output() readonly selectionChange = new EventEmitter<McTreeSelectChange>();\n\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n    @Input() panelClass: string | string[] | Set<string> | { [key: string]: any };\n\n    /** Object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Function used to sort the values in a select in multiple mode.\n     * Follows the same logic as `Array.prototype.sort`.\n     */\n    @Input() sortComparator: (\n        a: McTreeOption, b: McTreeOption, options: McTreeOption[]\n    ) => number;\n\n    /** Combined stream of all of the child options' change events. */\n    readonly optionSelectionChanges: Observable<McTreeSelectChange> = defer(() => {\n        if (this.options) {\n            return merge(...this.options.map((option) => option.onSelectionChange));\n        }\n\n        return this.ngZone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n    }) as Observable<McTreeSelectChange>;\n\n    options: QueryList<McTreeOption>;\n\n    private originalOnKeyDown: (event: KeyboardEvent) => void;\n\n    @Input()\n    get placeholder(): string {\n        return this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n\n        this.stateChanges.next();\n    }\n\n    private _placeholder: string;\n\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n\n        this.stateChanges.next();\n    }\n\n    private _required: boolean = false;\n\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        if (this.selectionModel) {\n            throw getMcSelectDynamicMultipleError();\n        }\n\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    private _multiple: boolean = false;\n\n    @Input()\n    get autoSelect(): boolean {\n        if (this.multiple) { return false; }\n\n        return this._autoSelect;\n    }\n\n    set autoSelect(value: boolean) {\n        this._autoSelect = coerceBooleanProperty(value);\n    }\n\n    private _autoSelect: boolean = true;\n\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith() {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        /* tslint:disable-next-line:strict-type-predicates */\n        if (typeof fn !== 'function') {\n            throw getMcSelectNonFunctionValueError();\n        }\n\n        this._compareWith = fn;\n\n        if (this.selectionModel) {\n            // A different comparator means the selection could change.\n            this.initializeSelection();\n        }\n    }\n\n    /** Value of the select control. */\n    @Input()\n    get value(): any {\n        return this._value;\n    }\n\n    set value(newValue: any) {\n        if (newValue !== this._value) {\n            this.writeValue(newValue);\n            this._value = newValue;\n        }\n    }\n\n    private _value: any;\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n        this.stateChanges.next();\n    }\n\n    private _id: string;\n\n    /** Whether the select is focused. */\n    get focused(): boolean {\n        return this._focused || this._panelOpen;\n    }\n\n    /**\n     * @deprecated Setter to be removed as this property is intended to be readonly.\n     * @breaking-change 8.0.0\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n\n    private _focused = false;\n\n    get panelOpen(): boolean {\n        return this._panelOpen;\n    }\n\n    private _panelOpen = false;\n\n    /** The scroll position of the overlay panel, calculated to center the selected option. */\n    private scrollTop = 0;\n\n    /** Unique id for this input. */\n    private readonly uid = `mc-select-${nextUniqueId++}`;\n\n    /** Emits whenever the component is destroyed. */\n    private readonly destroy = new Subject<void>();\n\n    constructor(\n        private readonly viewportRuler: ViewportRuler,\n        readonly changeDetectorRef: ChangeDetectorRef,\n        private readonly ngZone: NgZone,\n        private readonly renderer: Renderer2,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        public elementRef: ElementRef,\n        @Optional() private readonly dir: Directionality,\n        @Optional() parentForm: NgForm,\n        @Optional() parentFormGroup: FormGroupDirective,\n        @Optional() private readonly parentFormField: McFormField,\n        @Self() @Optional() public ngControl: NgControl,\n        @Attribute('tabindex') tabIndex: string,\n        @Inject(MC_SELECT_SCROLL_STRATEGY) private readonly scrollStrategyFactory\n    ) {\n        super(elementRef, defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnInit() {\n        if (this.tree) {\n            this.tree.multiple = this.multiple;\n        }\n\n        this.stateChanges.next();\n\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this.panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this.panelOpen) {\n                    this.scrollTop = 0;\n                    this.openedChange.emit(true);\n                } else {\n                    this.openedChange.emit(false);\n                    this.panelDoneAnimating = false;\n                    this.overlayDir.offsetX = 0;\n                    this.changeDetectorRef.markForCheck();\n                }\n            });\n    }\n\n    ngAfterContentInit() {\n        if (!this.tree) { return; }\n\n        this.initKeyManager();\n\n        this.selectionModel = this.tree.selectionModel = new SelectionModel<McTreeOption>(this.multiple);\n        this.options = this.tree.options;\n        this.tree.autoSelect = this.autoSelect;\n\n        this.selectionModel.changed\n            .pipe(takeUntil(this.destroy))\n            .subscribe((event) => {\n                event.added.forEach((option) => option.select());\n                event.removed.forEach((option) => option.deselect());\n            });\n    }\n\n    ngAfterViewInit() {\n        if (!this.tree) { return; }\n\n        this.tags.changes\n            .subscribe(() => {\n                setTimeout(() => this.calculateHiddenItems(), 0);\n            });\n\n        this.options.changes\n            .pipe(startWith(null), takeUntil(this.destroy))\n            .subscribe(() => {\n                this.updateSelectedOptions();\n\n                this.resetOptions();\n            });\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) { this.updateErrorState(); }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes.disabled) {\n            this.stateChanges.next();\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroy.next();\n\n        this.destroy.complete();\n        this.stateChanges.complete();\n    }\n\n    /** `View -> model callback called when value changes` */\n    onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when select has been touched` */\n    onTouched = () => {};\n\n    toggle() {\n        if (this.panelOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    open() {\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) { return; }\n\n        this.triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this.triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n        this._panelOpen = true;\n        // this.tree.keyManager.withHorizontalOrientation(null);\n        this.calculateOverlayPosition();\n        this.highlightCorrectOption();\n        this.changeDetectorRef.markForCheck();\n\n        // Set the font size on the panel element once it exists.\n        this.ngZone.onStable.asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                if (this.triggerFontSize && this.overlayDir.overlayRef &&\n                    this.overlayDir.overlayRef.overlayElement) {\n                    this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this.triggerFontSize}px`;\n                }\n            });\n    }\n\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n\n            // this.tree.keyManager.setActiveItem(-1);\n\n            // this.tree.keyManager.withHorizontalOrientation(this.isRtl() ? 'rtl' : 'ltr');\n            this.changeDetectorRef.markForCheck();\n            this.onTouched();\n        }\n    }\n\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    // todo нужно доделать!\n    writeValue(value: any) {\n        if (this.options) {\n            this.setSelectionByValue(value);\n        }\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.onChange = fn;\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn: () => {}) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this.changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    get selected(): McTreeOption | McTreeOption[] {\n        return this.multiple ? this.selectionModel.selected : this.selectionModel.selected[0];\n    }\n\n    get triggerValue(): string {\n        if (this.empty) { return ''; }\n\n        return (this.selected as McTreeOption).viewValue;\n    }\n\n    get triggerValues(): McTreeOption[] {\n        if (this.empty) { return []; }\n\n        const selectedOptions = this.selectionModel.selected;\n\n        if (this.isRtl()) { selectedOptions.reverse(); }\n\n        return selectedOptions;\n    }\n\n    get empty(): boolean {\n        return !this.selectionModel || this.selectionModel.isEmpty();\n    }\n\n    isRtl(): boolean {\n        return this.dir ? this.dir.value === 'rtl' : false;\n    }\n\n    handleKeydown(event: KeyboardEvent) {\n        if (!this.disabled) {\n            if (this.panelOpen) {\n                this.handleOpenKeydown(event);\n            } else {\n                this.handleClosedKeydown(event);\n            }\n        }\n    }\n\n    /**\n     * When the panel content is done fading in, the panelDoneAnimating property is\n     * set so the proper class can be added to the panel.\n     */\n    onFadeInDone() {\n        this.panelDoneAnimating = this.panelOpen;\n        this.changeDetectorRef.markForCheck();\n    }\n\n    onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    onBlur() {\n        this._focused = false;\n\n        if (!this.disabled && !this.panelOpen) {\n            this.onTouched();\n            this.changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n\n    /** Callback that is invoked when the overlay panel has been attached. */\n    onAttached() {\n        this.overlayDir.positionChange\n            .pipe(take(1))\n            .subscribe(() => {\n                this.changeDetectorRef.detectChanges();\n                this.calculateOverlayOffsetX();\n                this.panel.nativeElement.scrollTop = this.scrollTop;\n            });\n    }\n\n    /** Returns the theme to be used on the panel. */\n    getPanelTheme(): string {\n        return this.parentFormField ? `mc-${this.parentFormField.color}` : '';\n    }\n\n    /** Focuses the select element. */\n    focus() {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    calculateOverlayScroll(selectedIndex: number, scrollBuffer: number, maxScroll: number): number {\n        const itemHeight = this.getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n\n        /* tslint:disable-next-line:no-magic-numbers */\n        const halfOptionHeight = itemHeight / 2;\n\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n\n    /** Invoked when an option is clicked. */\n    onRemoveSelectedOption(selectedOption: McTreeOption, $event) {\n        $event.stopPropagation();\n\n        this.options.forEach((option) => {\n            if (option.data === selectedOption.data) { option.deselect(); }\n        });\n\n        this.selectionModel.deselect(selectedOption);\n    }\n\n    calculateHiddenItems() {\n        if (this.empty || !this.multiple) { return; }\n\n        let visibleItems: number = 0;\n        const totalItemsWidth = this.getTotalItemsWidthInMatcher();\n        let totalVisibleItemsWidth: number = 0;\n        const itemMargin: number = 4;\n\n        this.tags.forEach((tag) => {\n            if (tag.nativeElement.offsetTop < tag.nativeElement.offsetHeight) {\n                totalVisibleItemsWidth += tag.nativeElement.getBoundingClientRect().width + itemMargin;\n                visibleItems++;\n            }\n        });\n\n        this.hiddenItems = this.selectionModel.selected.length - visibleItems;\n\n        if (this.hiddenItems) {\n            const itemsCounter = this.trigger.nativeElement.querySelector('.mc-tree-select__match-hidden-text');\n            const matcherList = this.trigger.nativeElement.querySelector('.mc-tree-select__match-list');\n\n            const itemsCounterShowed = itemsCounter.offsetTop < itemsCounter.offsetHeight;\n            // const itemsCounterWidth: number = itemsCounter.getBoundingClientRect().width;\n            const itemsCounterWidth: number = 86;\n\n            const matcherListWidth: number = matcherList.getBoundingClientRect().width;\n            const matcherWidth: number = matcherListWidth + itemsCounterWidth;\n\n            if (itemsCounterShowed && (totalItemsWidth < matcherWidth)) { this.hiddenItems = 0; }\n\n            if (\n                totalVisibleItemsWidth === matcherListWidth ||\n                (totalVisibleItemsWidth + itemsCounterWidth) < matcherListWidth\n            ) {\n                this.changeDetectorRef.markForCheck();\n\n                return ;\n            } else if (!itemsCounterShowed && (totalItemsWidth + itemsCounterWidth) > matcherWidth) {\n                this.hiddenItems++;\n            }\n        }\n\n        this.changeDetectorRef.markForCheck();\n    }\n\n    private updateSelectedOptions(): void {\n        this.selectionModel.selected.forEach((selectedOption) => {\n            this.options.forEach((option) => {\n                if (option.data === selectedOption.data) {\n                    this.selectionModel.deselect(selectedOption);\n                    this.selectionModel.select(option);\n\n                    option.select();\n                }\n            });\n        });\n    }\n\n    private getTotalItemsWidthInMatcher(): number {\n        const triggerClone = this.trigger.nativeElement.cloneNode(true);\n        triggerClone.querySelector('.mc-tree-select__match-hidden-text').remove();\n\n        this.renderer.setStyle(triggerClone, 'position', 'absolute');\n        this.renderer.setStyle(triggerClone, 'visibility', 'hidden');\n        this.renderer.setStyle(triggerClone, 'top', '-100%');\n        this.renderer.setStyle(triggerClone, 'left', '0');\n\n        this.renderer.appendChild(this.trigger.nativeElement, triggerClone);\n\n        let totalItemsWidth: number = 0;\n        const itemMargin: number = 4;\n        triggerClone.querySelectorAll('mc-tag').forEach((item) => {\n            totalItemsWidth += item.getBoundingClientRect().width as number + itemMargin;\n        });\n\n        triggerClone.remove();\n\n        return totalItemsWidth;\n    }\n\n    private handleClosedKeydown(event: KeyboardEvent) {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n        // Open the select on ALT + arrow key to match the native <select>\n        if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n            // prevents the page from scrolling down when pressing space\n            event.preventDefault();\n\n            this.open();\n        } else if (!this.multiple && this.tree.keyManager && this.tree.keyManager.onKeydown) {\n            this.tree.keyManager.onKeydown(event);\n        }\n    }\n\n    private handleOpenKeydown(event: KeyboardEvent) {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n\n            this.close();\n        } else if (keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW) {\n            return this.originalOnKeyDown.call(this.tree, event);\n        } else if (keyCode === HOME || keyCode === END) {\n            event.preventDefault();\n\n            if (keyCode === HOME) {\n                this.tree.keyManager.setFirstItemActive();\n            } else {\n                this.tree.keyManager.setLastItemActive();\n            }\n        } else if ((keyCode === ENTER || keyCode === SPACE) && this.tree.keyManager.activeItem) {\n            event.preventDefault();\n\n            this.tree.keyManager.activeItem.selectViaInteraction();\n        } else if (this.multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n\n            const hasDeselectedOptions = this.options.some((option) => !option.selected);\n\n            this.options.forEach((option) => {\n                if (hasDeselectedOptions && !option.disabled) {\n                    option.select();\n                } else {\n                    option.deselect();\n                }\n            });\n        } else {\n            const previouslyFocusedIndex = this.tree.keyManager.activeItemIndex;\n\n            this.tree.keyManager.onKeydown(event);\n\n            if (this.multiple && isArrowKey && event.shiftKey && this.tree.keyManager.activeItem &&\n                this.tree.keyManager.activeItemIndex !== previouslyFocusedIndex) {\n                this.tree.keyManager.activeItem.selectViaInteraction();\n            }\n        }\n    }\n\n    private initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this.setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n        });\n    }\n\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    private setSelectionByValue(value: any | any[]) {\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) { throw getMcSelectNonArrayValueError(); }\n\n            this.selectionModel.clear();\n            value.forEach((currentValue: any) => this.selectValue(currentValue));\n            this.sortValues();\n        } else {\n            this.selectionModel.clear();\n            const correspondingOption = this.selectValue(value);\n\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this.tree.keyManager.setActiveItem(correspondingOption);\n            }\n        }\n\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    private selectValue(value: any): McTreeOption | undefined {\n        const correspondingOption = this.options.find((option: McTreeOption) => {\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            } catch (error) {\n                if (isDevMode()) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n\n                return false;\n            }\n        });\n\n        if (correspondingOption) {\n            this.selectionModel.select(correspondingOption);\n        }\n\n        return correspondingOption;\n    }\n\n    private initKeyManager() {\n        this.originalOnKeyDown = this.tree.onKeyDown;\n\n        this.tree.onKeyDown = () => {};\n\n        this.tree.keyManager.tabOut\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            });\n\n        this.tree.keyManager.change\n            .pipe(takeUntil(this.destroy))\n            .subscribe(() => {\n                if (this._panelOpen && this.panel) {\n                    this.scrollActiveOptionIntoView();\n                } else if (!this._panelOpen && !this.multiple && this.tree.keyManager.activeItem) {\n                    this.tree.keyManager.activeItem.selectViaInteraction();\n                }\n            });\n    }\n\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    private resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this.destroy);\n\n        this.optionSelectionChanges\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe((event) => {\n                this.onSelect(event.source, event.isUserInput);\n\n                if (event.isUserInput && !this.multiple && this._panelOpen) {\n                    this.close();\n                    this.focus();\n                }\n            });\n\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        // merge(...this.options.map((option) => option.stateChanges))\n        //     .pipe(takeUntil(changedOrDestroyed))\n        //     .subscribe(() => {\n        //         this.changeDetectorRef.markForCheck();\n        //         this.stateChanges.next();\n        //     });\n\n        this.setOptionIds();\n    }\n\n    /** Invoked when an option is clicked. */\n    private onSelect(option: McTreeOption, isUserInput: boolean) {\n        const wasSelected = this.selectionModel.isSelected(option);\n\n        if (option.value == null && !this.multiple) {\n            option.deselect();\n            this.selectionModel.clear();\n            this.propagateChanges(option.value);\n        } else {\n            if (option.selected) {\n                this.selectionModel.select(option);\n            } else {\n                this.selectionModel.deselect(option);\n            }\n\n            if (isUserInput) {\n                this.tree.keyManager.setActiveItem(option);\n            }\n\n            if (this.multiple) {\n                this.sortValues();\n\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mc-option`.\n                    this.focus();\n                }\n            }\n        }\n\n        if (wasSelected !== this.selectionModel.isSelected(option)) {\n            this.propagateChanges();\n        }\n\n        this.stateChanges.next();\n    }\n\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    private sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n\n            this.selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n\n    /** Emits change event to set the model value. */\n    private propagateChanges(fallbackValue?: any) {\n        let valueToEmit: any = null;\n\n        if (this.multiple) {\n            valueToEmit = (this.selected as any).map((option) => option.value);\n        } else {\n            valueToEmit = this.selected ? (this.selected as any).value : fallbackValue;\n        }\n\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this.onChange(valueToEmit);\n        this.selectionChange.emit(new McTreeSelectChange(this as any, valueToEmit));\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Records option IDs to pass to the aria-owns property. */\n    private setOptionIds() {\n        this.optionIds = this.options.map((option) => option.id).join(' ');\n    }\n\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    private highlightCorrectOption() {\n        if (this.tree.keyManager) {\n            if (this.empty) {\n                this.tree.keyManager.setFirstItemActive();\n            } else {\n                this.tree.keyManager.setActiveItem(this.selectionModel.selected[0]);\n            }\n        }\n    }\n\n    /** Scrolls the active option into view. */\n    private scrollActiveOptionIntoView() {\n        const activeOptionIndex = this.tree.keyManager.activeItemIndex || 0;\n\n        this.panel.nativeElement.scrollTop = getOptionScrollPosition(\n            activeOptionIndex,\n            this.getItemHeight(),\n            this.panel.nativeElement.scrollTop,\n            SELECT_PANEL_MAX_HEIGHT\n        );\n    }\n\n    /** Gets the index of the provided option in the option list. */\n    private getOptionIndex(option: McTreeOption): number | undefined {\n        // todo разобраться с этим срачем!\n        return this.options.reduce((result: number, current: McTreeOption, index: number) => {\n            /* tslint:disable-next-line:strict-type-predicates */\n            return result === undefined ? (option === current ? index : undefined) : result;\n        }, undefined);\n    }\n\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    private calculateOverlayPosition() {\n        const itemHeight = this.getItemHeight();\n        const items = this.getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n\n        // If no value is selected we open the popup to the first item.\n        const selectedOptionOffset =\n            this.empty ? 0 : this.getOptionIndex(this.selectionModel.selected[0])!;\n\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        /* tslint:disable-next-line:no-magic-numbers */\n        const scrollBuffer = panelHeight / 2;\n        this.scrollTop = this.calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this.offsetY = this.calculateOverlayOffsetY();\n\n        this.checkOverlayWithinViewport(maxScroll);\n    }\n\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    private calculateOverlayOffsetX() {\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this.viewportRuler.getViewportSize();\n        const isRtl = this.isRtl();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const paddingWidth = SELECT_PANEL_PADDING_X * 2;\n        let offsetX: number = SELECT_PANEL_PADDING_X;\n\n        // Invert the offset in LTR.\n        if (!isRtl) { offsetX *= -1; }\n\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        } else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    private calculateOverlayOffsetY(): number {\n        // const itemHeight = this.getItemHeight();\n        // const optionHeightAdjustment = (itemHeight - this.triggerRect.height) / 2;\n\n        // todo I'm not sure that we will use it\n        return 0;\n        // return Math.round(-optionHeightAdjustment);\n    }\n\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    private checkOverlayWithinViewport(maxScroll: number) {\n        const itemHeight = this.getItemHeight();\n        const viewportSize = this.viewportRuler.getViewportSize();\n\n        const topSpaceAvailable = this.triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable =\n            viewportSize.height - this.triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n        const panelHeightTop = Math.abs(this.offsetY);\n        const totalPanelHeight =\n            Math.min(this.getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this.triggerRect.height;\n\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this.adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        } else if (panelHeightTop > topSpaceAvailable) {\n            this.adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        } else {\n            this.transformOrigin = this.getOriginBasedOnOption();\n        }\n    }\n\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    private adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this.scrollTop -= distanceBelowViewport;\n        this.offsetY -= distanceBelowViewport;\n        this.transformOrigin = this.getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this.scrollTop <= 0) {\n            this.scrollTop = 0;\n            this.offsetY = 0;\n            this.transformOrigin = `50% bottom 0px`;\n        }\n    }\n\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    private adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number, maxScroll: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this.scrollTop += distanceAboveViewport;\n        this.offsetY += distanceAboveViewport;\n        this.transformOrigin = this.getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this.scrollTop >= maxScroll) {\n            this.scrollTop = maxScroll;\n            this.offsetY = 0;\n            this.transformOrigin = `50% top 0px`;\n\n            return;\n        }\n    }\n\n    /** Sets the transform origin point based on the selected option. */\n    private getOriginBasedOnOption(): string {\n        const itemHeight = this.getItemHeight();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const optionHeightAdjustment = (itemHeight - this.triggerRect.height) / 2;\n        /* tslint:disable-next-line:no-magic-numbers */\n        const originY = Math.abs(this.offsetY) - optionHeightAdjustment + itemHeight / 2;\n\n        return `50% ${originY}px 0px`;\n    }\n\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    private getItemCount(): number {\n        return this.options.length;\n    }\n\n    /** Calculates the height of the select's options. */\n    private getItemHeight(): number {\n        // todo доделать\n        /* tslint:disable-next-line:no-magic-numbers */\n        return 32;\n        // return this.triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { CdkTreeModule } from '@ptsecurity/cdk/tree';\nimport { MC_SELECT_SCROLL_STRATEGY_PROVIDER, McPseudoCheckboxModule } from '@ptsecurity/mosaic/core';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\nimport { McTagsModule } from '@ptsecurity/mosaic/tags';\nimport { McTreeModule } from '@ptsecurity/mosaic/tree';\n\nimport { McTreeSelect, McTreeSelectTrigger } from './tree-select.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        CdkTreeModule,\n        McTreeModule,\n        McIconModule,\n        McTagsModule,\n        McPseudoCheckboxModule\n    ],\n    exports: [McTreeSelect, McTreeSelectTrigger, CommonModule],\n    declarations: [McTreeSelect, McTreeSelectTrigger],\n    providers: [MC_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class McTreeSelectModule {}\n","import {\n    Directive, DoCheck, ElementRef, Inject,\n    Input, OnChanges, OnDestroy, Optional,\n    Self, InjectionToken, NgZone, OnInit\n} from '@angular/core';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { fromEvent, Subscription, Subject } from 'rxjs';\nimport { distinctUntilChanged, map } from 'rxjs/operators';\n\n\nexport const MC_TEXTAREA_VALUE_ACCESSOR =\n    new InjectionToken<{ value: any }>('MC_TEXTAREA_VALUE_ACCESSOR');\n\nlet nextUniqueId = 0;\n\nconst ROW_SEPARATOR = '\\n';\n\nexport class McTextareaBase {\n    constructor(public defaultErrorStateMatcher: ErrorStateMatcher,\n                public parentForm: NgForm,\n                public parentFormGroup: FormGroupDirective,\n                public ngControl: NgControl) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McTextareaMixinBase: CanUpdateErrorStateCtor & typeof McTextareaBase = mixinErrorState(McTextareaBase);\n\n@Directive({\n    selector: 'textarea[mcTextarea]',\n    exportAs: 'mcTextarea',\n    host: {\n        class: 'mc-textarea',\n        '[class.mc-textarea-resizable]': '!canGrow',\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[attr.aria-invalid]': 'errorState',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '(blur)': 'focusChanged(false)',\n        '(focus)': 'focusChanged(true)'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McTextarea }]\n})\nexport class McTextarea extends McTextareaMixinBase implements McFormFieldControl<any>, OnInit, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n\n    @Input() canGrow: boolean = true;\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-textarea';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this.uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this.valueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this.valueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n\n    protected uid = `mc-textsrea-${nextUniqueId++}`;\n    protected previousNativeValue: any;\n    protected _disabled = false;\n    protected _id: string;\n    protected _required = false;\n\n    private valueAccessor: { value: any };\n    private growSubscription: Subscription;\n\n    private lineHeight: number = 0;\n    private freeRowsHeight: number = 0;\n    private minHeight: number = 0;\n\n    constructor(protected elementRef: ElementRef,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() parentForm: NgForm,\n                @Optional() parentFormGroup: FormGroupDirective,\n                defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_TEXTAREA_VALUE_ACCESSOR) inputValueAccessor: any,\n                private ngZone: NgZone) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n        // If no input value accessor was explicitly specified, use the element as the textarea value\n        // accessor.\n        this.valueAccessor = inputValueAccessor || this.elementRef.nativeElement;\n\n        this.previousNativeValue = this.value;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n\n        const growObserver = fromEvent(elementRef.nativeElement, 'input')\n            /*.pipe(\n                map((event: any) => this.getGrowHeight()),\n                // map((event: any) => event.target.scrollHeight),\n                distinctUntilChanged()\n            )*/;\n        this.growSubscription = growObserver.subscribe(this.grow.bind(this));\n    }\n\n    ngOnInit() {\n        setTimeout(() => this.grow(), 0);\n        this.lineHeight = parseInt(getComputedStyle(this.elementRef.nativeElement).lineHeight!, 10);\n\n        const paddingTop = parseInt(getComputedStyle(this.elementRef.nativeElement).paddingTop!, 10);\n        const paddingBottom = parseInt(getComputedStyle(this.elementRef.nativeElement).paddingBottom!, 10);\n\n        // tslint:disable-next-line:no-magic-numbers\n        this.minHeight = this.lineHeight * 2 + paddingTop + paddingBottom;\n        this.freeRowsHeight = this.lineHeight;\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        this.growSubscription.unsubscribe();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this.dirtyCheckNativeValue();\n    }\n\n    /** Grow textarea height to avoid vertical scroll  */\n    grow() {\n        if (!this.canGrow) {\n            return;\n        }\n\n        this.ngZone.runOutsideAngular(() => {\n            const textarea = this.elementRef.nativeElement;\n\n            const outerHeight = parseInt(window.getComputedStyle(textarea).height!, 10);\n            const diff = outerHeight - textarea.clientHeight;\n\n            textarea.style.height = 0; // this line is important to height recalculation\n\n            const height = Math.max(this.minHeight, textarea.scrollHeight + diff + this.freeRowsHeight);\n            textarea.style.height = `${height}px`;\n        });\n    }\n\n    /** Focuses the textarea. */\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    /** Callback for the cases where the focused state of the textarea changes. */\n    focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this.elementRef.nativeElement.value && !this.isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Does some manual dirty checking on the native textarea `value` property. */\n    protected dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this.previousNativeValue !== newValue) {\n            this.previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Checks whether the textarea is invalid based on the native validation. */\n    protected isBadInput(): boolean {\n        // The `validity` property won't be present on platform-server.\n        const validity = (this.elementRef.nativeElement as HTMLTextAreaElement).validity;\n\n        return validity && validity.badInput;\n    }\n\n    private getGrowHeight(): number {\n        const textarea = this.elementRef.nativeElement;\n        const outerHeight = parseInt(window.getComputedStyle(textarea).height!.toString(), 10);\n        const diff = outerHeight - textarea.clientHeight;\n\n        return Math.max(this.minHeight, textarea.scrollHeight + diff);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McTextarea } from './textarea.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule, FormsModule],\n    exports: [McTextarea],\n    declarations: [McTextarea]\n})\nexport class McTextareaModule {\n}\n","import {\n    Directive,\n    DoCheck,\n    ElementRef,\n    forwardRef,\n    Inject,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Optional,\n    Renderer2,\n    Self\n} from '@angular/core';\nimport {\n    ControlValueAccessor,\n    FormControl,\n    FormGroupDirective,\n    NG_VALIDATORS,\n    NgControl,\n    NgForm,\n    ValidationErrors,\n    ValidatorFn,\n    Validators\n} from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { MC_INPUT_VALUE_ACCESSOR } from '@ptsecurity/mosaic/input';\nimport {\n    noop,\n    Subject\n} from 'rxjs';\n\nimport {\n    ARROW_DOWN_KEYCODE,\n    ARROW_LEFT_KEYCODE,\n    ARROW_RIGHT_KEYCODE,\n    ARROW_UP_KEYCODE,\n    DEFAULT_TIME_FORMAT,\n    HOURS_PER_DAY,\n    HOURS_MINUTES_REGEXP,\n    HOURS_MINUTES_SECONDS_REGEXP,\n    HOURS_ONLY_REGEXP,\n    MINUTES_PER_HOUR,\n    SECONDS_PER_MINUTE,\n    TIMEFORMAT_PLACEHOLDERS,\n    TimeFormats,\n    TimeParts\n} from './timepicker.constants';\n\n\nlet uniqueComponentIdSuffix: number = 0;\n\nconst formValidators: WeakMap<FormControl, ValidatorFn | null> = new WeakMap();\nconst formValidatorOnChangeRegistrators: WeakMap<FormControl, () => void> = new WeakMap();\nconst validatorOnChange = (c: FormControl) => {\n    const validatorOnChangeHandler = formValidatorOnChangeRegistrators.get(c);\n\n    if (validatorOnChangeHandler !== undefined) { validatorOnChangeHandler(); }\n};\n\nexport class McTimepickerBase {\n    constructor(\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl) { }\n}\n\n// tslint:disable-next-line naming-convention\nexport const McTimepickerMixinBase:\n    CanUpdateErrorStateCtor &\n    typeof McTimepickerBase = mixinErrorState(McTimepickerBase);\n\n@Directive({\n    selector: 'input[mcTimepicker]',\n    exportAs: 'mcTimepickerInput',\n    host: {\n        class: 'mc-timepicker mc-input',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '[attr.time-format]': 'timeFormat',\n        '[attr.min-time]': 'minTime',\n        '[attr.max-time]': 'maxTime',\n        '[attr.value]': 'value',\n        '[attr.aria-invalid]': 'errorState',\n        '(blur)': 'onBlur()',\n        '(focus)': 'focusChanged(true)',\n        '(input)': 'onInput()',\n        '(paste)': 'onPaste($event)',\n        '(keydown)': 'onKeyDown($event)'\n    },\n    providers: [\n        {\n            provide: NG_VALIDATORS,\n            useValue: {\n                validate(c: FormControl) {\n                    // TODO This is `workaround` to bind singleton-like Validator implementation to\n                    // context of each validated component. This MUST be realized in proper way!\n                    if (this.__validatorOnChangeHandler !== undefined) {\n                        formValidatorOnChangeRegistrators.set(c, this.__validatorOnChangeHandler);\n                        this.__validatorOnChangeHandler = undefined;\n                    }\n                    const validator = formValidators.get(c);\n\n                    return validator ? validator(c) : null;\n                },\n                registerOnValidatorChange(fn: () => void): void {\n                    this.__validatorOnChangeHandler = fn;\n                }\n            },\n            multi: true\n        },\n        {\n            provide: McFormFieldControl,\n            useExisting: forwardRef(() => McTimepicker)\n        }\n    ]\n\n})\nexport class McTimepicker extends McTimepickerMixinBase\n    implements McFormFieldControl<any>,\n        OnChanges,\n        OnDestroy,\n        DoCheck,\n        CanUpdateErrorState,\n        ControlValueAccessor {\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-timepicker';\n\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) { return this.ngControl.disabled; }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n        }\n\n        this.stateChanges.next();\n    }\n\n    @Input()\n    get id(): string { return this._id; }\n\n    set id(value: string) { this._id = value || this.uid; }\n\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean { return this._required; }\n\n    set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string { return this.inputValueAccessor.value; }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this.inputValueAccessor.value = value;\n            this.applyInputChanges();\n        }\n    }\n\n    @Input('time-format')\n    get timeFormat(): TimeFormats { return this._timeFormat; }\n\n    set timeFormat(formatValue: TimeFormats) {\n        this._timeFormat = Object\n            .keys(TimeFormats)\n            .map((timeFormatKey) => TimeFormats[timeFormatKey])\n            .indexOf(formatValue) > -1 ? formatValue : DEFAULT_TIME_FORMAT;\n\n        validatorOnChange(<FormControl> this.ngControl.control);\n        this.placeholder = TIMEFORMAT_PLACEHOLDERS[this._timeFormat];\n    }\n\n    @Input('min-time')\n    get minTime(): string | null { return this._minTime; }\n\n    set minTime(minValue: string | null) {\n        this._minTime = minValue;\n        this.minDateTime = minValue !== null ? this.getDateFromTimeString(minValue) : undefined;\n        validatorOnChange(<FormControl> this.ngControl.control);\n    }\n\n    @Input('max-time')\n    get maxTime(): string | null { return this._maxTime; }\n\n    set maxTime(maxValue: string | null) {\n        this._maxTime = maxValue;\n        this.maxDateTime = maxValue !== null ? this.getDateFromTimeString(maxValue) : undefined;\n        validatorOnChange(<FormControl> this.ngControl.control);\n    }\n\n    private _id: string;\n    private readonly uid = `mc-timepicker-${uniqueComponentIdSuffix++}`;\n    private _disabled: boolean;\n    private _required: boolean;\n    private previousNativeValue: any;\n    private readonly inputValueAccessor: { value: any };\n    private onChange: (value: any) => void;\n    private onTouched: () => void;\n    private _timeFormat: TimeFormats;\n    private _minTime: string | null = null;\n    private minDateTime: Date | undefined;\n    private _maxTime: string | null = null;\n    private maxDateTime: Date | undefined;\n    private currentDateTimeInput: Date | undefined;\n\n    constructor(private readonly elementRef: ElementRef,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() parentForm: NgForm,\n                @Optional() parentFormGroup: FormGroupDirective,\n                defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n                private readonly renderer: Renderer2) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this.inputValueAccessor = inputValueAccessor || this.elementRef.nativeElement;\n\n        this.previousNativeValue = this.value;\n        this.onChange = noop;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n\n        this.placeholder = TIMEFORMAT_PLACEHOLDERS[DEFAULT_TIME_FORMAT];\n\n        // Instead of NG_VALUE_ACCESSOR (https://github.com/angular/material2/issues/8158#issuecomment-344618103)\n        if (this.ngControl) { this.ngControl.valueAccessor = this; }\n\n        // Substitute initial empty validator with validator linked to directive object instance (workaround)\n\n        formValidators.set(\n            <FormControl> this.ngControl.control,\n            Validators.compose([\n                () => this.parseValidator(),\n                () => this.minTimeValidator(),\n                () => this.maxTimeValidator()\n            ])\n        );\n    }\n\n    ngOnChanges(): void {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy(): void {\n        this.stateChanges.complete();\n    }\n\n    ngDoCheck(): void {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this.dirtyCheckNativeValue();\n    }\n\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    focusChanged(isFocused: boolean): void {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.onTouched();\n            this.stateChanges.next();\n        }\n    }\n\n    onBlur() {\n        this.applyInputChanges();\n        this.focusChanged(false);\n    }\n\n    onPaste($event) {\n        $event.preventDefault();\n        const clipboardUserInput: string = $event.clipboardData.getData('text');\n\n        if (this.getDateFromTimeString(clipboardUserInput) === undefined) { return; }\n\n        this.elementRef.nativeElement.value = clipboardUserInput;\n        this.onInput();\n    }\n\n    onInput() {\n        const initialCursorStart: number = this.elementRef.nativeElement.selectionStart;\n        const initialCursorEnd: number = this.elementRef.nativeElement.selectionEnd;\n        let isAutocompleteTriggered: boolean = false;\n\n        const {\n            hoursOnly,\n            hoursAndMinutes,\n            hoursAndMinutesAndSeconds\n        } = this.getParsedTimeParts(this.elementRef.nativeElement.value);\n\n        // tslint:disable no-magic-numbers\n        if (hoursOnly &&\n            hoursOnly[1] &&\n            hoursOnly[1].length === 2) {\n            isAutocompleteTriggered = true;\n        } else if (hoursAndMinutes &&\n            hoursAndMinutes[1].length === 1 &&\n            hoursAndMinutes[2] &&\n            hoursAndMinutes[2].length === 2) {\n            isAutocompleteTriggered = true;\n        } else if (hoursAndMinutesAndSeconds &&\n            hoursAndMinutesAndSeconds[1].length === 2 &&\n            hoursAndMinutesAndSeconds[2].length === 2 &&\n            hoursAndMinutesAndSeconds[3] &&\n            hoursAndMinutesAndSeconds[3].length === 2) {\n            isAutocompleteTriggered = true;\n        }\n        // tslint:enable no-magic-numbers\n\n        this.applyInputChanges({ doTimestringReformat: isAutocompleteTriggered });\n\n        this.elementRef.nativeElement.selectionStart = initialCursorStart;\n        this.elementRef.nativeElement.selectionEnd = initialCursorEnd;\n\n        if (isAutocompleteTriggered && this.ngControl.errors === null) {\n            this.createSelectionOfTimeComponentInInput(initialCursorStart + 1);\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this.elementRef.nativeElement.value && !this.isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    writeValue(value: Date | null): void {\n        if (value !== null) {\n            this.renderer.setProperty(this.elementRef.nativeElement,\n                'value',\n                this.getTimeStringFromDate(value, this.timeFormat)\n            );\n        }\n        this.onChange(value || null);\n        this.applyInputChanges();\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n\n        const keyCode: string = this.getKeyCode(event);\n\n        if (keyCode === ARROW_UP_KEYCODE || keyCode === ARROW_DOWN_KEYCODE) {\n            this.upDownTimeByArrowKeys(event);\n        }\n        if (keyCode === ARROW_LEFT_KEYCODE || keyCode === ARROW_RIGHT_KEYCODE) {\n            this.switchSelectionBetweenTimeparts(event);\n        }\n    }\n\n    registerOnChange(fn: (value: Date) => void): void {\n        this.onChange = fn;\n    }\n\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    /** Does some manual dirty checking on the native input `value` property. */\n    private dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this.previousNativeValue !== newValue) {\n            this.previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Checks whether the input is invalid based on the native validation. */\n    private isBadInput(): boolean {\n        const validity = (<HTMLInputElement> this.elementRef.nativeElement).validity;\n\n        return validity && validity.badInput;\n    }\n\n    private applyInputChanges(applyParams: {\n        changedTime?: Date;\n        doTimestringReformat?: boolean;\n    } = {}): void {\n        const { changedTime, doTimestringReformat = true } = applyParams;\n        const timeToApply: Date | undefined = changedTime ||\n            this.getDateFromTimeString(this.elementRef.nativeElement.value);\n        this.currentDateTimeInput = timeToApply;\n\n        if (doTimestringReformat && timeToApply !== undefined) {\n            const selectionStart: number = this.elementRef.nativeElement.selectionStart;\n            const selectionEnd: number = this.elementRef.nativeElement.selectionEnd;\n            this.renderer.setProperty(\n                this.elementRef.nativeElement,\n                'value',\n                this.getTimeStringFromDate(timeToApply, this.timeFormat));\n            this.elementRef.nativeElement.selectionStart = selectionStart;\n            this.elementRef.nativeElement.selectionEnd = selectionEnd;\n        }\n\n        (<FormControl> this.ngControl.control).updateValueAndValidity();\n        const result = this.ngControl.errors === null && timeToApply !== undefined ? timeToApply : null;\n        this.onChange(result);\n        this.stateChanges.next();\n    }\n\n    private upDownTimeByArrowKeys(event: KeyboardEvent): void {\n        event.preventDefault();\n\n        let changedTime: Date | undefined = this.currentDateTimeInput;\n        if (changedTime !== undefined) {\n            const cursorPos = this.elementRef.nativeElement.selectionStart;\n\n            const modifiedTimePart = this.getTimeEditMetrics(cursorPos)\n                .modifiedTimePart;\n            const keyCode: string = this.getKeyCode(event);\n            if (keyCode === ARROW_UP_KEYCODE) { changedTime = this.incrementTime(changedTime, modifiedTimePart); }\n            if (keyCode === ARROW_DOWN_KEYCODE) { changedTime = this.decrementTime(changedTime, modifiedTimePart); }\n            this.applyInputChanges({ changedTime });\n            this.createSelectionOfTimeComponentInInput(cursorPos);\n        }\n    }\n\n    private switchSelectionBetweenTimeparts(event: KeyboardEvent): void {\n        const changedTime: Date | undefined = this.currentDateTimeInput;\n        const keyCode: string = this.getKeyCode(event);\n\n        if (changedTime !== undefined) {\n            let cursorPos: number = this.elementRef.nativeElement.selectionStart;\n            if (keyCode === ARROW_LEFT_KEYCODE) {\n                cursorPos = this.getCursorPositionOfPrevTimePartStart(cursorPos, this.elementRef.nativeElement.value);\n            } else if (keyCode === ARROW_RIGHT_KEYCODE) {\n                cursorPos = this.getCursorPositionOfNextTimePartStart(cursorPos, this.elementRef.nativeElement.value);\n            }\n            this.createSelectionOfTimeComponentInInput(cursorPos);\n        }\n    }\n\n    /**\n     * @description Microsoft EDGE doesn't support KeyboaedEvent.code thus we need this helper\n     */\n    private getKeyCode(event: KeyboardEvent): string {\n        return event.code || event.key;\n    }\n\n    private createSelectionOfTimeComponentInInput(cursorPos: number): void {\n        setTimeout(() => {\n            const newEditParams = this.getTimeEditMetrics(cursorPos);\n            this.elementRef.nativeElement.selectionStart = newEditParams.cursorStartPosition;\n            this.elementRef.nativeElement.selectionEnd = newEditParams.cursorEndPosition;\n        });\n    }\n\n    private incrementTime(dateVal: Date,\n                          whatToIncrement: TimeParts = TimeParts.seconds): Date {\n        let { hours, minutes, seconds } = this.getTimeDigitsFromDate(dateVal);\n\n        switch (whatToIncrement) {\n            case TimeParts.hours:\n                hours++;\n                break;\n            case TimeParts.minutes:\n                minutes++;\n                break;\n            case TimeParts.seconds:\n                seconds++;\n                break;\n            default:\n        }\n\n        if (seconds > SECONDS_PER_MINUTE) { seconds = 0; }\n\n        if (minutes > MINUTES_PER_HOUR) { minutes = 0; }\n\n        if (hours > HOURS_PER_DAY) { hours = 0; }\n\n        return <Date> this.getDateFromTimeDigits(hours, minutes, seconds);\n    }\n\n    /**\n     * @description Decrement part of time\n     */\n    private decrementTime(dateVal: Date,\n                          whatToDecrement: TimeParts = TimeParts.seconds): Date {\n        let { hours, minutes, seconds } = this.getTimeDigitsFromDate(dateVal);\n\n        switch (whatToDecrement) {\n            case TimeParts.hours:\n                hours--;\n                break;\n            case TimeParts.minutes:\n                minutes--;\n                break;\n            case TimeParts.seconds:\n                seconds--;\n                break;\n            default:\n        }\n\n        if (seconds < 0) { seconds = SECONDS_PER_MINUTE; }\n\n        if (minutes < 0) { minutes = MINUTES_PER_HOUR; }\n\n        if (hours < 0) { hours = HOURS_PER_DAY; }\n\n        return <Date> this.getDateFromTimeDigits(hours, minutes, seconds);\n    }\n\n    private getCursorPositionOfPrevTimePartStart(cursorPos: number, timeString: string): number {\n        return cursorPos === 0 ? timeString.length : cursorPos - 1;\n    }\n\n    private getCursorPositionOfNextTimePartStart(cursorPos: number,\n                                                 timeString: string,\n                                                 timeDevider: string = ':'): number {\n        const nextDividerPos: number = timeString.indexOf(timeDevider, cursorPos);\n\n        return nextDividerPos !== undefined ? nextDividerPos + 1 : 0;\n    }\n\n    /**\n     * @description Get params for arrow-keys (up/down) time valie edit.\n     * @param cursorPosition Current cursor position in timeString\n     */\n    private getTimeEditMetrics(cursorPosition: number): {\n        modifiedTimePart: TimeParts;\n        cursorStartPosition: number;\n        cursorEndPosition: number;\n    } {\n        const timeString: string = this.elementRef.nativeElement.value;\n        let modifiedTimePart: TimeParts;\n        let cursorStartPosition: number;\n        let cursorEndPosition: number;\n        const hoursIndex = 0;\n        const minutesIndex = timeString.indexOf(':', hoursIndex + 1);\n        const secondsIndex = minutesIndex !== -1 ? timeString.indexOf(':', minutesIndex + 1) : -1;\n\n        if (secondsIndex !== -1 && cursorPosition > secondsIndex) {\n            modifiedTimePart = TimeParts.seconds;\n            cursorStartPosition = secondsIndex + 1;\n            cursorEndPosition = timeString.length;\n        } else if (minutesIndex !== -1 && cursorPosition > minutesIndex) {\n            modifiedTimePart = TimeParts.minutes;\n            cursorStartPosition = minutesIndex + 1;\n            cursorEndPosition = secondsIndex > -1 ? secondsIndex : timeString.length;\n        } else {\n            modifiedTimePart = TimeParts.hours;\n            cursorStartPosition = hoursIndex;\n            cursorEndPosition = minutesIndex !== -1 ? minutesIndex : timeString.length;\n        }\n\n        return {\n            modifiedTimePart,\n            cursorStartPosition,\n            cursorEndPosition\n        };\n    }\n\n    /**\n     * @description Create time string for displaying inside input element of UI\n     */\n    private getTimeStringFromDate(tempVal: Date,\n                                  timeFormat: TimeFormats = DEFAULT_TIME_FORMAT): string {\n        const hours: string = this.getNumberWithLeadingZero(tempVal.getHours());\n        const minutes: string = this.getNumberWithLeadingZero(tempVal.getMinutes());\n        const seconds: string = this.getNumberWithLeadingZero(tempVal.getSeconds());\n\n        const formattedTimeGenerators = {\n            [TimeFormats.HHmm]: () => `${hours}:${minutes}`,\n            [TimeFormats.HHmmss]: () => `${hours}:${minutes}:${seconds}`\n        };\n\n        return formattedTimeGenerators[timeFormat]();\n    }\n\n    private getParsedTimeParts(timeString: string): {\n        hoursOnly: any;\n        hoursAndMinutes: any;\n        hoursAndMinutesAndSeconds: any;\n    } {\n        const hoursAndMinutesAndSeconds = timeString.match(HOURS_MINUTES_SECONDS_REGEXP);\n        const hoursAndMinutes = timeString.match(HOURS_MINUTES_REGEXP);\n        const hoursOnly = timeString.match(HOURS_ONLY_REGEXP);\n\n        return {\n            hoursOnly,\n            hoursAndMinutes,\n            hoursAndMinutesAndSeconds\n        };\n    }\n\n    /**\n     * @description Create Date object from separate parts of time\n     */\n    private getDateFromTimeDigits(hours: number, minutes: number, seconds: number = 0): Date | undefined {\n        return this.getDateFromTimeString(`${hours}:${minutes}:${seconds}`);\n    }\n\n    private getDateFromTimeString(timeString: string | undefined): Date | undefined {\n        // TODO Use moment-js\n        if (timeString === undefined) { return; }\n\n        const {\n            hoursOnly,\n            hoursAndMinutes,\n            hoursAndMinutesAndSeconds\n        } = this.getParsedTimeParts(timeString);\n\n        if (timeString.trim().length === 0 ||\n            hoursOnly === null && hoursAndMinutes === null && hoursAndMinutesAndSeconds === null) {\n            return;\n        }\n\n        // tslint:disable no-magic-numbers\n        let hours: number = 0;\n        let minutes: number = 0;\n        let seconds: number = 0;\n\n        if (hoursOnly) {\n            hours = Number(hoursOnly[1]);\n        } else if (hoursAndMinutes) {\n            hours = Number(hoursAndMinutes[1]);\n            minutes = Number(hoursAndMinutes[2]);\n        } else if (hoursAndMinutesAndSeconds) {\n            hours = Number(hoursAndMinutesAndSeconds[1]);\n            minutes = Number(hoursAndMinutesAndSeconds[2]);\n            seconds = Number(hoursAndMinutesAndSeconds[3]);\n        }\n        // const timestamp: number = Date.parse(fullDateString);\n        const resultDate: Date = new Date(1970, 0, 1, hours, minutes, seconds);\n        // tslint:enable no-magic-numbers\n\n        return isNaN(resultDate.getTime()) ? undefined : resultDate;\n    }\n\n    private getNumberWithLeadingZero(digit: number): string {\n        const MAX_DIGIT_WITH_LEADING_ZERO: number = 9;\n\n        return digit > MAX_DIGIT_WITH_LEADING_ZERO ? `${digit}` : `0${digit}`;\n    }\n\n    private getTimeDigitsFromDate(dateVal: Date): { hours: number; minutes: number; seconds: number } {\n        return {\n            hours: dateVal.getHours(),\n            minutes: dateVal.getMinutes(),\n            seconds: dateVal.getSeconds()\n        };\n    }\n\n    private parseValidator(): ValidationErrors | null {\n        return this.currentDateTimeInput === undefined ?\n            { mcTimepickerParse: { text: this.elementRef.nativeElement.value } } :\n            null;\n    }\n\n    private minTimeValidator(): ValidationErrors | null {\n\n        if (this.currentDateTimeInput !== undefined &&\n            this.minDateTime !== undefined &&\n            this.isTimeLowerThenMin(this.currentDateTimeInput)) {\n            return { mcTimepickerLowerThenMintime: { text: this.elementRef.nativeElement.value } };\n        }\n\n        return null;\n    }\n\n    private maxTimeValidator(): ValidationErrors | null {\n        if (this.currentDateTimeInput !== undefined &&\n            this.maxDateTime !== undefined &&\n            this.isTimeGreaterThenMax(this.currentDateTimeInput)) {\n            return { mcTimepickerHigherThenMaxtime: { text: this.elementRef.nativeElement.value } };\n        }\n\n        return null;\n    }\n\n    private isTimeLowerThenMin(timeToCompare: Date): boolean {\n        return timeToCompare.getTime() - (<Date> this.minDateTime).getTime() < 0;\n    }\n\n    private isTimeGreaterThenMax(timeToCompare: Date): boolean {\n        return timeToCompare.getTime() - (<Date> this.maxDateTime).getTime() >= 0;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McTimepicker } from './timepicker';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        FormsModule\n    ],\n    declarations: [\n        McTimepicker\n    ],\n    exports: [\n        McTimepicker\n    ]\n})\nexport class McTimepickerModule {}\n","import { InjectionToken } from '@angular/core';\n\n\n/** Injection token that can be used to access the data that was passed in to a sidepanel. */\nexport const MC_SIDEPANEL_DATA = new InjectionToken<any>('McSidepanelData');\n\nexport enum McSidepanelPosition {\n    Right = 'right',\n    Left = 'left',\n    Top = 'top',\n    Bottom = 'bottom'\n}\n\nexport class McSidepanelConfig<D = any> {\n    /** ID for the sidepanel. If omitted, a unique one will be generated. */\n    id?: string;\n\n    /** Data being injected into the child component. */\n    data?: D | null = null;\n\n    position?: McSidepanelPosition = McSidepanelPosition.Right;\n\n    /** Whether the sidepanel has a backdrop. */\n    hasBackdrop?: boolean = true;\n\n    /** When we open multiple sidepanels, backdrop appears only once, except cases then this flag is true. */\n    requiredBackdrop?: boolean = false;\n\n    /** Whether the user can use escape or clicking outside to close the sidepanel. */\n    disableClose?: boolean = false;\n\n    /** Custom class for the overlay pane. */\n    overlayPanelClass?: string | string[] = '';\n}\n","import { animate, AnimationTriggerMetadata, state, style, transition, trigger } from '@angular/animations';\nimport { AnimationCurves } from '@ptsecurity/mosaic/core';\n\nimport { McSidepanelPosition } from './sidepanel-config';\n\n\nexport enum McSidepanelAnimationState {\n    Void = 'void',\n    Visible = 'visible',\n    Hidden = 'hidden'\n}\n\n// TODO Find a way to use dynamic keys and avoid error \"Expression form not supported.\"\n// tslint:disable-next-line\nexport const mcSidepanelTransformAnimation: Record<McSidepanelPosition, { in: string; out: string }> = {\n    right: { in: 'translateX(100%)', out: 'translateX(0%)' },\n    left: { in: 'translateX(-100%)', out: 'translateX(0%)' },\n    top: { in: 'translateY(-100%)', out: 'translateY(0%)' },\n    bottom: { in: 'translateY(100%)', out: 'translateY(0%)' }\n};\n\nexport const mcSidepanelAnimations: {\n    readonly sidepanelState: AnimationTriggerMetadata;\n} = {\n    sidepanelState: trigger('state', [\n        state('hidden',\n            style({ transform: '{{transformIn}}' }),\n            { params: { transformIn: mcSidepanelTransformAnimation[McSidepanelPosition.Right].in }}\n        ),\n        state('visible',\n            style({ transform: '{{transformOut}}' }),\n            { params: { transformOut: mcSidepanelTransformAnimation[McSidepanelPosition.Right].out }}\n        ),\n        transition('visible => void, visible => hidden',\n            animate(`200ms ${AnimationCurves.AccelerationCurve}`)),\n        transition('void => visible',\n            animate(`200ms ${AnimationCurves.DecelerationCurve}`))\n    ])\n};\n","import { Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output } from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { hasModifierKey } from '@ptsecurity/cdk/keycodes';\n\nimport { MC_TAGS_DEFAULT_OPTIONS, McTagsDefaultOptions } from './tag-default-options';\nimport { McTagList } from './tag-list.component';\nimport { McTagTextControl } from './tag-text-control';\n\n\n/** Represents an input event on a `mcTagInput`. */\n// tslint:disable-next-line: naming-convention\nexport interface McTagInputEvent {\n    /** The native `<input>` element that the event is being fired for. */\n    input: HTMLInputElement;\n\n    /** The value of the input. */\n    value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds tag-specific behaviors to an input element inside `<mc-form-field>`.\n * May be placed inside or outside of an `<mc-tag-list>`.\n */\n@Directive({\n    selector: 'input[mcTagInputFor]',\n    exportAs: 'mcTagInput, mcTagInputFor',\n    host: {\n        class: 'mc-tag-input mc-input-element',\n        '[id]': 'id',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.placeholder]': 'placeholder || null',\n        '[attr.aria-invalid]': '_tagList && _tagList.ngControl ? _tagList.ngControl.invalid : null',\n        '(keydown)': 'keydown($event)',\n        '(blur)': 'blur()',\n        '(focus)': 'onFocus()',\n        '(input)': 'onInput()'\n    }\n})\nexport class McTagInput implements McTagTextControl, OnChanges {\n    /** Whether the control is focused. */\n    focused: boolean = false;\n\n    /**\n     * The list of key codes that will trigger a tagEnd event.\n     *\n     * Defaults to `[ENTER]`.\n     */\n    @Input('mcTagInputSeparatorKeyCodes')\n    separatorKeyCodes: number[] | Set<number> = this.defaultOptions.separatorKeyCodes;\n\n    /** Emitted when a tag is to be added. */\n    @Output('mcTagInputTokenEnd')\n    tagEnd: EventEmitter<McTagInputEvent> = new EventEmitter<McTagInputEvent>();\n\n    /** The input's placeholder text. */\n    @Input() placeholder: string = '';\n\n    /** Unique id for the input. */\n    @Input() id: string = `mc-tag-list-input-${nextUniqueId++}`;\n\n    /** Register input for tag list */\n    @Input('mcTagInputFor')\n    set tagList(value: McTagList) {\n        if (value) {\n            this._tagList = value;\n            this._tagList.registerInput(this);\n        }\n    }\n\n    // tslint:disable-next-line: naming-convention\n    _tagList: McTagList;\n\n    /**\n     * Whether or not the tagEnd event will be emitted when the input is blurred.\n     */\n    @Input('mcTagInputAddOnBlur')\n    get addOnBlur(): boolean {\n        return this._addOnBlur;\n    }\n\n    set addOnBlur(value: boolean) {\n        this._addOnBlur = coerceBooleanProperty(value);\n    }\n\n    private _addOnBlur: boolean = false;\n\n    /** Whether the input is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this._tagList && this._tagList.disabled);\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    private _disabled: boolean = false;\n\n    /** Whether the input is empty. */\n    get empty(): boolean {\n        return !this.inputElement.value;\n    }\n\n    /** The native input element to which this directive is attached. */\n    private inputElement: HTMLInputElement;\n\n    constructor(\n        private elementRef: ElementRef<HTMLInputElement>,\n        @Inject(MC_TAGS_DEFAULT_OPTIONS) private defaultOptions: McTagsDefaultOptions\n    ) {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        this.inputElement = this.elementRef.nativeElement as HTMLInputElement;\n    }\n\n    ngOnChanges() {\n        this._tagList.stateChanges.next();\n    }\n\n    /** Utility method to make host definition/tests more clear. */\n    keydown(event?: KeyboardEvent) {\n        this.emittagEnd(event);\n    }\n\n    /** Checks to see if the blur should emit the (tagEnd) event. */\n    blur() {\n        if (this.addOnBlur) {\n            this.emittagEnd();\n        }\n\n        this.focused = false;\n        // Blur the tag list if it is not focused\n        if (!this._tagList.focused) {\n            this._tagList.blur();\n        }\n\n        this._tagList.stateChanges.next();\n    }\n\n    /** Checks to see if the (tagEnd) event needs to be emitted. */\n    emittagEnd(event?: KeyboardEvent) {\n        if (!this.inputElement.value && !!event) {\n            this._tagList.keydown(event);\n        }\n\n        if (!event || this.isSeparatorKey(event)) {\n            this.tagEnd.emit({ input: this.inputElement, value: this.inputElement.value });\n\n            if (event) {\n                event.preventDefault();\n            }\n        }\n    }\n\n    onInput() {\n        // Let tag list know whenever the value changes.\n        this._tagList.stateChanges.next();\n    }\n\n    onFocus() {\n        this.focused = true;\n        this._tagList.stateChanges.next();\n    }\n\n    /** Focuses the input. */\n    focus(): void {\n        this.inputElement.focus();\n    }\n\n    /** Checks whether a keycode is one of the configured separators. */\n    private isSeparatorKey(event: KeyboardEvent) {\n        if (hasModifierKey(event)) { return false; }\n\n        const separators = this.separatorKeyCodes;\n        // tslint:disable-next-line: deprecation\n        const keyCode = event.keyCode;\n\n        return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ENTER } from '@ptsecurity/cdk/keycodes';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { MC_TAGS_DEFAULT_OPTIONS, McTagsDefaultOptions } from './tag-default-options';\nimport { McTagInput } from './tag-input';\nimport { McTagList } from './tag-list.component';\nimport { McTag, McTagAvatar, McTagRemove, McTagTrailingIcon } from './tag.component';\n\n\n@NgModule({\n    imports: [CommonModule, PlatformModule],\n    exports: [\n        McTagList,\n        McTag,\n        McTagInput,\n        McTagTrailingIcon,\n        McTagAvatar,\n        McTagRemove\n    ],\n    declarations: [\n        McTagList,\n        McTag,\n        McTagInput,\n        McTagTrailingIcon,\n        McTagAvatar,\n        McTagRemove\n    ],\n    providers: [{\n        provide: MC_TAGS_DEFAULT_OPTIONS,\n        // tslint:disable-next-line: no-object-literal-type-assertion\n        useValue: { separatorKeyCodes: [ENTER] } as McTagsDefaultOptions\n    }]\n})\nexport class McTagsModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { MC_SELECT_SCROLL_STRATEGY_PROVIDER, McOptionModule } from '@ptsecurity/mosaic/core';\nimport { McFormFieldModule } from '@ptsecurity/mosaic/form-field';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\nimport { McTagsModule } from '@ptsecurity/mosaic/tags';\n\nimport { McSelect, McSelectTrigger } from './select.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        McOptionModule,\n        McIconModule,\n        McTagsModule\n    ],\n    exports: [McFormFieldModule, McSelect, McSelectTrigger, McOptionModule, CommonModule],\n    declarations: [McSelect, McSelectTrigger],\n    providers: [MC_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class McSelectModule {}\n","import {\n    AfterContentChecked,\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnDestroy,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    InjectionToken,\n    Inject,\n    Optional,\n    Directive, Attribute\n} from '@angular/core';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@ptsecurity/cdk/coercion';\nimport {\n    CanColor,\n    CanColorCtor,\n    mixinColor,\n    mixinDisabled\n} from '@ptsecurity/mosaic/core';\nimport { merge, Subscription } from 'rxjs';\n\nimport { McTab } from './tab';\nimport { McTabHeader } from './tab-header';\n\n\n@Directive({\n    selector: 'mc-tab-group[mc-light-tabs], [mc-tab-nav-bar][mc-light-tabs]',\n    host: { class: 'mc-tab-group_light' }\n})\nexport class McLightTabsCssStyler { }\n\n@Directive({\n    selector: 'mc-tab-group[mc-align-tabs-center], [mc-tab-nav-bar][mc-align-tabs-center]',\n    host: { class: 'mc-tab-group_align-labels-center' }\n})\nexport class McAlignTabsCenterCssStyler { }\n\n@Directive({\n    selector: 'mc-tab-group[mc-align-tabs-end], [mc-tab-nav-bar][mc-align-tabs-end]',\n    host: { class: 'mc-tab-group_align-labels-end' }\n})\nexport class McAlignTabsEndCssStyler { }\n\n@Directive({\n    selector: 'mc-tab-group[mc-stretch-tabs], [mc-tab-nav-bar][mc-stretch-tabs]',\n    host: { class: 'mc-tab-group_stretch-labels' }\n})\nexport class McStretchTabsCssStyler { }\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class McTabChangeEvent {\n    /** Index of the currently-selected tab. */\n    index: number;\n    /** Reference to the currently-selected tab. */\n    tab: McTab;\n}\n\n/** Possible positions for the tab header. */\nexport type McTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface IMcTabsConfig {\n    /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n    animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MC_TABS_CONFIG = new InjectionToken('MC_TABS_CONFIG');\n\n// Boilerplate for applying mixins to McTabGroup.\n/** @docs-private */\nexport class McTabGroupBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) { }\n}\nexport const mcTabGroupMixinBase:\n    CanColorCtor &\n    typeof McTabGroupBase =\n    mixinColor(mixinDisabled(McTabGroupBase));\n\n/**\n * Tab-group component.  Supports basic tab pairs (label + content) and includes\n * keyboard navigation.\n */\n@Component({\n    selector: 'mc-tab-group',\n    exportAs: 'mcTabGroup',\n    templateUrl: 'tab-group.html',\n    styleUrls: ['tab-group.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['color'],\n    host: {\n        class: 'mc-tab-group',\n        '[class.mc-tab-group_dynamic-height]': 'dynamicHeight',\n        '[class.mc-tab-group_inverted-header]': 'headerPosition === \"below\"'\n    }\n})\nexport class McTabGroup extends mcTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor {\n    lightTab: boolean;\n\n    /** Whether the tab group should grow to the size of the active tab. */\n    @Input()\n    get dynamicHeight(): boolean { return this._dynamicHeight; }\n    set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n\n    /** The index of the active tab. */\n    @Input()\n    get selectedIndex(): number | null { return this._selectedIndex; }\n    set selectedIndex(value: number | null) {\n        this.indexToSelect = coerceNumberProperty(value, null);\n    }\n\n    @ContentChildren(McTab) tabs: QueryList<McTab>;\n\n    @ViewChild('tabBodyWrapper') tabBodyWrapper: ElementRef;\n\n    @ViewChild('tabHeader') tabHeader: McTabHeader;\n\n    /** Position of the tab header. */\n    @Input() headerPosition: McTabHeaderPosition = 'above';\n\n    /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n    @Input() animationDuration: string;\n\n    /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n    @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n    /** Event emitted when focus has changed within a tab group. */\n    @Output() readonly focusChange: EventEmitter<McTabChangeEvent> =\n        new EventEmitter<McTabChangeEvent>();\n\n    /** Event emitted when the body animation has completed */\n    @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Event emitted when the tab selection has changed. */\n    @Output() readonly selectedTabChange: EventEmitter<McTabChangeEvent> =\n        new EventEmitter<McTabChangeEvent>(true);\n\n    /** The tab index that should be selected after the content has been checked. */\n    private indexToSelect: number | null = 0;\n\n    /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n    private tabBodyWrapperHeight: number = 0;\n\n    /** Subscription to tabs being added/removed. */\n    private tabsSubscription = Subscription.EMPTY;\n\n    /** Subscription to changes in the tab labels. */\n    private tabLabelSubscription = Subscription.EMPTY;\n    private _dynamicHeight: boolean = false;\n    private _selectedIndex: number | null = null;\n\n    private groupId: number;\n\n    constructor(\n        elementRef: ElementRef,\n        private changeDetectorRef: ChangeDetectorRef,\n        @Attribute('mc-light-tabs') lightTabs: string,\n        @Inject(MC_TABS_CONFIG) @Optional() defaultConfig?: IMcTabsConfig\n    ) {\n        super(elementRef);\n\n        this.lightTab = coerceBooleanProperty(lightTabs);\n\n        this.groupId = nextId++;\n        this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n            defaultConfig.animationDuration : '0ms';\n    }\n\n    /**\n     * After the content is checked, this component knows what tabs have been defined\n     * and what the selected index should be. This is where we can know exactly what position\n     * each tab should be in according to the new selected index, and additionally we know how\n     * a new selected tab should transition in (from the left or right).\n     */\n    ngAfterContentChecked() {\n        // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n        // the amount of tabs changes before the actual change detection runs.\n        const indexToSelect = this.indexToSelect = this.clampTabIndex(this.indexToSelect);\n\n        // If there is a change in selected index, emit a change event. Should not trigger if\n        // the selected index has not yet been initialized.\n        if (this._selectedIndex !== indexToSelect) {\n            const isFirstRun = this._selectedIndex == null;\n\n            if (!isFirstRun) {\n                this.selectedTabChange.emit(this.createChangeEvent(indexToSelect));\n            }\n\n            // Changing these values after change detection has run\n            // since the checked content may contain references to them.\n            Promise.resolve().then(() => {\n                this.tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n                if (!isFirstRun) {\n                    this.selectedIndexChange.emit(indexToSelect);\n                }\n            });\n        }\n\n        // Setup the position for each tab and optionally setup an origin on the next selected tab.\n        this.tabs.forEach((tab: McTab, index: number) => {\n            tab.position = index - indexToSelect;\n\n            // If there is already a selected tab, then set up an origin for the next selected tab\n            // if it doesn't have one already.\n            if (this._selectedIndex != null && tab.position === 0 && !tab.origin) {\n                tab.origin = indexToSelect - this._selectedIndex;\n            }\n        });\n\n        if (this._selectedIndex !== indexToSelect) {\n            this._selectedIndex = indexToSelect;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    ngAfterContentInit() {\n        this.subscribeToTabLabels();\n\n        // Subscribe to changes in the amount of tabs, in order to be\n        // able to re-render the content as new tabs are added or removed.\n        this.tabsSubscription = this.tabs.changes.subscribe(() => {\n            const indexToSelect = this.clampTabIndex(this.indexToSelect);\n\n            // Maintain the previously-selected tab if a new tab is added or removed and there is no\n            // explicit change that selects a different tab.\n            if (indexToSelect === this._selectedIndex) {\n                const tabs = this.tabs.toArray();\n\n                for (let i = 0; i < tabs.length; i++) {\n                    if (tabs[i].isActive) {\n                        // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n                        // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n                        // adding a tab within the `selectedIndexChange` event.\n                        this.indexToSelect = this._selectedIndex = i;\n                        break;\n                    }\n                }\n            }\n\n            this.subscribeToTabLabels();\n            this.changeDetectorRef.markForCheck();\n        });\n    }\n\n    ngOnDestroy() {\n        this.tabsSubscription.unsubscribe();\n        this.tabLabelSubscription.unsubscribe();\n    }\n\n    focusChanged(index: number) {\n        this.focusChange.emit(this.createChangeEvent(index));\n    }\n\n    /** Returns a unique id for each tab label element */\n    getTabLabelId(i: number): string {\n        return `mc-tab-label-${this.groupId}-${i}`;\n    }\n\n    /** Returns a unique id for each tab content element */\n    getTabContentId(i: number): string {\n        return `mc-tab-content-${this.groupId}-${i}`;\n    }\n\n    /**\n     * Sets the height of the body wrapper to the height of the activating tab if dynamic\n     * height property is true.\n     */\n    setTabBodyWrapperHeight(tabHeight: number): void {\n        if (!this._dynamicHeight || !this.tabBodyWrapperHeight) { return; }\n\n        const wrapper: HTMLElement = this.tabBodyWrapper.nativeElement;\n\n        wrapper.style.height = `${this.tabBodyWrapperHeight}px`;\n\n        // This conditional forces the browser to paint the height so that\n        // the animation to the new height can have an origin.\n        if (this.tabBodyWrapper.nativeElement.offsetHeight) {\n            wrapper.style.height = `${tabHeight}px`;\n        }\n    }\n\n    /** Removes the height of the tab body wrapper. */\n    removeTabBodyWrapperHeight(): void {\n        this.tabBodyWrapperHeight = this.tabBodyWrapper.nativeElement.clientHeight;\n        this.tabBodyWrapper.nativeElement.style.height = '';\n        this.animationDone.emit();\n    }\n\n    /** Handle click events, setting new selected index if appropriate. */\n    handleClick(tab: McTab, tabHeader: McTabHeader, index: number) {\n        if (!tab.disabled) {\n            this.selectedIndex = tabHeader.focusIndex = index;\n        }\n    }\n\n    /** Retrieves the tabindex for the tab. */\n    getTabIndex(tab: McTab, index: number): number | null {\n        if (tab.disabled) {\n            return null;\n        }\n\n        return this.selectedIndex === index ? 0 : -1;\n    }\n\n    private createChangeEvent(index: number): McTabChangeEvent {\n        const event = new McTabChangeEvent();\n        event.index = index;\n        if (this.tabs && this.tabs.length) {\n            event.tab = this.tabs.toArray()[index];\n        }\n\n        return event;\n    }\n\n    /**\n     * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n     * on the McTab component, whereas the data binding is inside the McTabGroup. In order for the\n     * binding to be updated, we need to subscribe to changes in it and trigger change detection\n     * manually.\n     */\n    private subscribeToTabLabels() {\n        if (this.tabLabelSubscription) {\n            this.tabLabelSubscription.unsubscribe();\n        }\n\n        this.tabLabelSubscription = merge(...this.tabs.map((tab) => tab.stateChanges))\n            .subscribe(() => this.changeDetectorRef.markForCheck());\n    }\n\n    /** Clamps the given index to the bounds of 0 and the tabs length. */\n    private clampTabIndex(index: number | null): number {\n        // Note the `|| 0`, which ensures that values like NaN can't get through\n        // and which would otherwise throw the component into an infinite loop\n        // (since Mch.max(NaN, 0) === NaN).\n        return Math.min(this.tabs.length - 1, Math.max(index || 0, 0));\n    }\n}\n","import {\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    Input,\n    OnDestroy,\n    ViewEncapsulation\n} from '@angular/core';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport {\n    CanColor,\n    CanColorCtor,\n    CanDisable,\n    CanDisableCtor,\n    HasTabIndex,\n    HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex\n} from '@ptsecurity/mosaic/core';\n\n\n// Boilerplate for applying mixins to McTabNav.\n/** @docs-private */\nexport class McTabNavBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {}\n}\nexport const mcTabNavMixinBase: CanColorCtor &\n    typeof McTabNavBase = mixinColor(McTabNavBase);\n\n/**\n * Navigation component matching the styles of the tab group header.\n */\n@Component({\n    selector: '[mc-tab-nav-bar]',\n    exportAs: 'mcTabNavBar, mcTabNav',\n    inputs: ['color'],\n    templateUrl: 'tab-nav-bar.html',\n    styleUrls: ['tab-nav-bar.css'],\n    host: { class: 'mc-tab-nav-bar' },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McTabNav extends mcTabNavMixinBase\n    implements CanColor {\n        constructor(elementRef: ElementRef) {\n            super(elementRef);\n        }\n     }\n\n// Boilerplate for applying mixins to McTabLink.\nexport class McTabLinkBase {}\nexport const mcTabLinkMixinBase: HasTabIndexCtor & CanDisableCtor &\n    typeof McTabLinkBase = mixinTabIndex(mixinDisabled(McTabLinkBase));\n\n/**\n * Link inside of a `mc-tab-nav-bar`.\n */\n@Directive({\n    selector: '[mc-tab-link], [mcTabLink]',\n    exportAs: 'mcTabLink',\n    inputs: ['disabled', 'tabIndex'],\n    host: {\n        class: 'mc-tab-link',\n        '[attr.aria-current]': 'active',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.tabIndex]': 'tabIndex',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-active]': 'active'\n    }\n})\nexport class McTabLink extends mcTabLinkMixinBase\n    implements OnDestroy, CanDisable, HasTabIndex {\n    /** Whether the link is active. */\n    @Input()\n    get active(): boolean {\n        return this.isActive;\n    }\n    set active(value: boolean) {\n        if (value !== this.isActive) {\n            this.isActive = value;\n        }\n    }\n\n    /** Whether the tab link is active or not. */\n    protected isActive: boolean = false;\n\n    constructor(\n        public elementRef: ElementRef,\n        @Attribute('tabindex') tabIndex: string,\n        private focusMonitor: FocusMonitor\n    ) {\n        super();\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n        this.focusMonitor.monitor(this.elementRef.nativeElement);\n    }\n\n    ngOnDestroy() {\n        this.focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PortalModule } from '@ptsecurity/cdk/portal';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McTab } from './tab';\nimport { McTabBody, McTabBodyPortal } from './tab-body';\nimport { McTabContent } from './tab-content';\nimport {\n    McTabGroup,\n    McLightTabsCssStyler,\n    McAlignTabsCenterCssStyler,\n    McAlignTabsEndCssStyler,\n    McStretchTabsCssStyler\n} from './tab-group';\nimport { McTabHeader } from './tab-header';\nimport { McTabLabel } from './tab-label';\nimport { McTabLabelWrapper } from './tab-label-wrapper';\nimport { McTabLink, McTabNav } from './tab-nav-bar/tab-nav-bar';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        McCommonModule,\n        PortalModule,\n        A11yModule\n    ],\n    // Don't export all components because some are only to be used internally.\n    exports: [\n        McCommonModule,\n        McTabGroup,\n        McTabLabel,\n        McTab,\n        McTabNav,\n        McTabLink,\n        McTabContent,\n        McLightTabsCssStyler,\n        McAlignTabsCenterCssStyler,\n        McAlignTabsEndCssStyler,\n        McStretchTabsCssStyler\n    ],\n    declarations: [\n        McTabGroup,\n        McTabLabel,\n        McTab,\n        McTabLabelWrapper,\n        McTabNav,\n        McTabLink,\n        McTabBody,\n        McTabBodyPortal,\n        McTabHeader,\n        McTabContent,\n        McLightTabsCssStyler,\n        McAlignTabsCenterCssStyler,\n        McAlignTabsEndCssStyler,\n        McStretchTabsCssStyler\n    ]\n})\nexport class McTabsModule {}\n","import { InjectionToken } from '@angular/core';\n\n\n/** Default options, for the chips module, that can be overridden. */\n// tslint:disable-next-line: naming-convention\nexport interface McTagsDefaultOptions {\n    /** The list of key codes that will trigger a chipEnd event. */\n    separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MC_TAGS_DEFAULT_OPTIONS = new InjectionToken<McTagsDefaultOptions>('mc-tags-default-options');\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    NgZone,\n    OnDestroy,\n    Output,\n    QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { BACKSPACE, DELETE, SPACE } from '@ptsecurity/cdk/keycodes';\nimport {\n    CanColor,\n    CanColorCtor,\n    CanDisable,\n    CanDisableCtor,\n    mixinColor,\n    mixinDisabled\n} from '@ptsecurity/mosaic/core';\nimport { McIcon } from '@ptsecurity/mosaic/icon';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\n\n// tslint:disable-next-line:naming-convention\nexport interface McTagEvent {\n    tag: McTag;\n}\n\n/** Event object emitted by McTag when selected or deselected. */\nexport class McTagSelectionChange {\n    constructor(public source: McTag, public selected: boolean, public isUserInput = false) {}\n}\n\n\nconst TAG_ATTRIBUTE_NAMES = ['mc-basic-tag'];\n\n/**\n * Dummy directive to add CSS class to tag avatar.\n * @docs-private\n */\n@Directive({\n    selector: 'mc-tag-avatar, [mcTagAvatar]',\n    host: { class: 'mc-tag-avatar' }\n})\nexport class McTagAvatar {}\n\n/**\n * Dummy directive to add CSS class to tag trailing icon.\n * @docs-private\n */\n@Directive({\n    selector: 'mc-tag-trailing-icon, [mcTagTrailingIcon]',\n    host: { class: 'mc-tag-trailing-icon' }\n})\nexport class McTagTrailingIcon {}\n\nexport class McTagBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const _McTagMixinBase: CanColorCtor & CanDisableCtor & typeof McTagBase = mixinColor(mixinDisabled(McTagBase));\n\n\n@Component({\n    selector: 'mc-tag, [mc-tag], mc-basic-tag, [mc-basic-tag]',\n    exportAs: 'mcTag',\n    templateUrl: 'tag.partial.html',\n    styleUrls: ['./tag.css'],\n    inputs: ['color', 'disabled'],\n    host: {\n        class: 'mc-tag',\n        '[attr.tabindex]': 'disabled ? null : -1',\n        '[class.mc-tag-selected]': 'selected',\n        '[class.mc-tag-with-avatar]': 'avatar',\n        '[class.mc-tag-with-trailing-icon]': 'trailingIcon || removeIcon',\n        '[class.mc-tag-disabled]': 'disabled',\n        '[class.mc-disabled]': 'disabled',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': 'handleClick($event)',\n        '(keydown)': 'handleKeydown($event)',\n        '(focus)': 'focus()',\n        '(blur)': 'blur()'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McTag extends _McTagMixinBase implements IFocusableOption, OnDestroy, CanColor, CanDisable {\n    /** Emits when the tag is focused. */\n    readonly onFocus = new Subject<McTagEvent>();\n\n    /** Emits when the tag is blured. */\n    readonly onBlur = new Subject<McTagEvent>();\n\n    nativeElement: HTMLElement;\n\n    /** Whether the tag has focus. */\n    hasFocus: boolean = false;\n\n    /** Whether the tag list is selectable */\n    tagListSelectable: boolean = true;\n\n    @ContentChildren(McIcon) contentChildren: QueryList<McIcon>;\n\n    /** The tag avatar */\n    @ContentChild(McTagAvatar) avatar: McTagAvatar;\n\n    /** The tag's trailing icon. */\n    @ContentChild(McTagTrailingIcon) trailingIcon: McTagTrailingIcon;\n\n    /** The tag's remove toggler. */\n    @ContentChild(forwardRef(() => McTagRemove)) removeIcon: McTagRemove;\n\n    /** Emitted when the tag is selected or deselected. */\n    @Output() readonly selectionChange: EventEmitter<McTagSelectionChange> =\n        new EventEmitter<McTagSelectionChange>();\n\n    /** Emitted when the tag is destroyed. */\n    @Output() readonly destroyed: EventEmitter<McTagEvent> = new EventEmitter<McTagEvent>();\n\n    /** Emitted when a tag is to be removed. */\n    @Output() readonly removed: EventEmitter<McTagEvent> = new EventEmitter<McTagEvent>();\n\n    /** Whether the tag is selected. */\n    @Input()\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    set selected(value: boolean) {\n        const coercedValue = coerceBooleanProperty(value);\n\n        if (coercedValue !== this._selected) {\n            this._selected = coercedValue;\n            this.dispatchSelectionChange();\n        }\n    }\n\n    private _selected: boolean = false;\n\n    /** The value of the tag. Defaults to the content inside `<mc-tag>` tags. */\n    @Input()\n    get value(): any {\n        return this._value !== undefined\n            ? this._value\n            : this.elementRef.nativeElement.textContent;\n    }\n\n    set value(value: any) {\n        this._value = value;\n    }\n\n    private _value: any;\n\n    /**\n     * Whether or not the tag is selectable. When a tag is not selectable,\n     * changes to its selected state are always ignored. By default a tag is\n     * selectable, and it becomes non-selectable if its parent tag list is\n     * not selectable.\n     */\n    @Input()\n    get selectable(): boolean {\n        return this._selectable && this.tagListSelectable;\n    }\n\n    set selectable(value: boolean) {\n        this._selectable = coerceBooleanProperty(value);\n    }\n\n    private _selectable: boolean = true;\n\n    /**\n     * Determines whether or not the tag displays the remove styling and emits (removed) events.\n     */\n    @Input()\n    get removable(): boolean {\n        return this._removable;\n    }\n\n    set removable(value: boolean) {\n        this._removable = coerceBooleanProperty(value);\n    }\n\n    private _removable: boolean = true;\n\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value !== this.disabled) {\n            this._disabled = value;\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    constructor(public elementRef: ElementRef, private _ngZone: NgZone) {\n        super(elementRef);\n\n        this.addHostClassName();\n\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        this.addClassModificatorForIcons();\n    }\n\n    addClassModificatorForIcons() {\n        const icons = this.contentChildren.map((item) => item._elementRef.nativeElement);\n\n        if (icons.length === 1) {\n            const iconElement = icons[0];\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-left-icon');\n                }\n\n                if (iconElement.previousSibling) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-right-icon');\n                }\n            }\n        } else if (icons.length > 1) {\n            const firstIconElement = icons[0];\n            const secondIconElement = icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n\n    addHostClassName() {\n        // Add class for the different tags\n        for (const attr of TAG_ATTRIBUTE_NAMES) {\n            if (\n                this.elementRef.nativeElement.hasAttribute(attr) ||\n                this.elementRef.nativeElement.tagName.toLowerCase() === attr\n            ) {\n                    (this.elementRef.nativeElement as HTMLElement).classList.add(attr);\n\n                    return;\n            }\n        }\n        (this.elementRef.nativeElement as HTMLElement).classList.add('mc-standard-tag');\n    }\n\n    ngOnDestroy() {\n        this.destroyed.emit({ tag: this });\n    }\n\n    select(): void {\n        if (!this._selected) {\n            this._selected = true;\n            this.dispatchSelectionChange();\n        }\n    }\n\n    deselect(): void {\n        if (this._selected) {\n            this._selected = false;\n            this.dispatchSelectionChange();\n        }\n    }\n\n    selectViaInteraction(): void {\n        if (!this._selected) {\n            this._selected = true;\n            this.dispatchSelectionChange(true);\n        }\n    }\n\n    toggleSelected(isUserInput: boolean = false): boolean {\n        this._selected = !this.selected;\n        this.dispatchSelectionChange(isUserInput);\n\n        return this.selected;\n    }\n\n    /** Allows for programmatic focusing of the tag. */\n    focus(): void {\n        if (!this.hasFocus) {\n            this.elementRef.nativeElement.focus();\n            this.onFocus.next({ tag: this });\n        }\n        this.hasFocus = true;\n    }\n\n    /**\n     * Allows for programmatic removal of the tag. Called by the McTagList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the tag from the DOM.\n     */\n    remove(): void {\n        if (this.removable) {\n            this.removed.emit({ tag: this });\n        }\n    }\n\n    handleClick(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n        } else {\n            event.stopPropagation();\n        }\n    }\n\n    handleKeydown(event: KeyboardEvent): void {\n        if (this.disabled) { return; }\n\n        // tslint:disable-next-line: deprecation\n        switch (event.keyCode) {\n            case DELETE:\n            case BACKSPACE:\n                // If we are removable, remove the focused tag\n                this.remove();\n                // Always prevent so page navigation does not occur\n                event.preventDefault();\n                break;\n            case SPACE:\n                // If we are selectable, toggle the focused tag\n                if (this.selectable) {\n                    this.toggleSelected(true);\n                }\n\n                // Always prevent space from scrolling the page since the list has focus\n                event.preventDefault();\n                break;\n            default:\n        }\n    }\n\n    blur(): void {\n        // When animations are enabled, Angular may end up removing the tag from the DOM a little\n        // earlier than usual, causing it to be blurred and throwing off the logic in the tag list\n        // that moves focus not the next item. To work around the issue, we defer marking the tag\n        // as not focused until the next time the zone stabilizes.\n        this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                this._ngZone.run(() => {\n                    this.hasFocus = false;\n                    this.onBlur.next({ tag: this });\n                });\n            });\n    }\n\n    private dispatchSelectionChange(isUserInput = false) {\n        this.selectionChange.emit({\n            source: this,\n            isUserInput,\n            selected: this._selected\n        });\n    }\n}\n\n\n/**\n *\n * Example:\n *\n *     `<mc-tag>\n *       <mc-icon mcTagRemove>cancel</mc-icon>\n *     </mc-tag>`\n *\n * You *may* use a custom icon, but you may need to override the `mc-tag-remove` positioning\n * styles to properly center the icon within the tag.\n */\n@Directive({\n    selector: '[mcTagRemove]',\n    host: {\n        class: 'mc-tag-remove mc-tag-trailing-icon',\n        '(click)': 'handleClick($event)'\n    }\n})\nexport class McTagRemove {\n    constructor(protected parentTag: McTag) {}\n\n    /** Calls the parent tag's public `remove()` method if applicable. */\n    handleClick(event: Event): void {\n        if (this.parentTag.removable) {\n            this.parentTag.remove();\n        }\n\n        // We need to stop event propagation because otherwise the event will bubble up to the\n        // form field and cause the `onContainerClick` method to be invoked. This method would then\n        // reset the focused tag that has been focused after tag removal. Usually the parent\n        // the parent click listener of the `McTag` would prevent propagation, but it can happen\n        // that the tag is being removed before the event bubbles up.\n        event.stopPropagation();\n    }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Input,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    Self,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { FocusKeyManager } from '@ptsecurity/cdk/a11y';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { BACKSPACE, END, HOME } from '@ptsecurity/cdk/keycodes';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { merge, Observable, Subject, Subscription } from 'rxjs';\nimport { startWith, takeUntil } from 'rxjs/operators';\n\nimport { McTagTextControl } from './tag-text-control';\nimport { McTag, McTagEvent, McTagSelectionChange } from './tag.component';\n\n\nexport class McTagListBase {\n    constructor(\n        public defaultErrorStateMatcher: ErrorStateMatcher,\n        public parentForm: NgForm,\n        public parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const _McTagListMixinBase: CanUpdateErrorStateCtor & typeof McTagListBase = mixinErrorState(McTagListBase);\n\n\n// Increasing integer for generating unique ids for tag-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the tag list value has changed. */\nexport class McTagListChange {\n    constructor(public source: McTagList, public value: any) {}\n}\n\n\n@Component({\n    selector: 'mc-tag-list',\n    exportAs: 'mcTagList',\n    template: '<ng-content></ng-content>',\n    host: {\n        class: 'mc-tag-list',\n        '[attr.tabindex]': 'disabled ? null : _tabIndex',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-invalid]': 'errorState',\n        '[class.mc-required]': 'required',\n        '(focus)': 'focus()',\n        '(blur)': 'blur()',\n        '(keydown)': 'keydown($event)',\n        '[id]': 'uid'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McTagList }],\n    styleUrls: ['tag-list.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McTagList extends _McTagListMixinBase implements McFormFieldControl<any>,\n    ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n\n    readonly controlType: string = 'mc-tag-list';\n\n    /** Combined stream of all of the child tags' selection change events. */\n    get tagSelectionChanges(): Observable<McTagSelectionChange> {\n        return merge(...this.tags.map((tag) => tag.selectionChange));\n    }\n\n    /** Combined stream of all of the child tags' focus change events. */\n    get tagFocusChanges(): Observable<McTagEvent> {\n        return merge(...this.tags.map((tag) => tag.onFocus));\n    }\n\n    /** Combined stream of all of the child tags' blur change events. */\n    get tagBlurChanges(): Observable<McTagEvent> {\n        return merge(...this.tags.map((tag) => tag.onBlur));\n    }\n\n    /** Combined stream of all of the child tags' remove change events. */\n    get tagRemoveChanges(): Observable<McTagEvent> {\n        return merge(...this.tags.map((tag) => tag.destroyed));\n    }\n\n    /** The array of selected tags inside tag list. */\n    get selected(): McTag[] | McTag {\n        return this.multiple ? this.selectionModel.selected : this.selectionModel.selected[0];\n    }\n\n    /** Whether the user should be allowed to select multiple tags. */\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith(): (o1: any, o2: any) => boolean {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        this._compareWith = fn;\n\n        if (this.selectionModel) {\n            // A different comparator means the selection could change.\n            this.initializeSelection();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): any {\n        return this._value;\n    }\n\n    set value(value: any) {\n        this.writeValue(value);\n        this._value = value;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get id(): string {\n        return this.tagInput ? this.tagInput.id : this.uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get placeholder(): string {\n        return this.tagInput ? this.tagInput.placeholder : this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n\n    /** Whether any tags or the mcTagInput inside of this tag-list has focus. */\n    get focused(): boolean {\n        return (this.tagInput && this.tagInput.focused) || this.hasFocusedTag();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return (!this.tagInput || this.tagInput.empty) && this.tags.length === 0;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat(): boolean {\n        return !this.empty || this.focused;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        return this.ngControl ? !!this.ngControl.disabled : this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n        this.syncTagsDisabledState();\n    }\n\n    /**\n     * Whether or not this tag list is selectable. When a tag list is not selectable,\n     * the selected states for all the tags inside the tag list are always ignored.\n     */\n    @Input()\n    get selectable(): boolean {\n        return this._selectable;\n    }\n\n    set selectable(value: boolean) {\n        this._selectable = coerceBooleanProperty(value);\n\n        if (this.tags) {\n            this.tags.forEach((tag) => tag.tagListSelectable = this._selectable);\n        }\n    }\n\n    @Input()\n    set tabIndex(value: number) {\n        this.userTabIndex = value;\n        this._tabIndex = value;\n    }\n\n    /**\n     * Event that emits whenever the raw value of the tag-list changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    uid: string = `mc-tag-list-${nextUniqueId++}`;\n\n    /**\n     * User defined tab index.\n     * When it is not null, use user defined tab index. Otherwise use tabIndex\n     */\n    userTabIndex: number | null = null;\n\n    keyManager: FocusKeyManager<McTag>;\n\n    selectionModel: SelectionModel<McTag>;\n\n    tagChanges = new EventEmitter<any>();\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /** Orientation of the tag list. */\n    @Input('orientation') orientation: 'horizontal' | 'vertical' = 'horizontal';\n\n    /** Event emitted when the selected tag list value has been changed by the user. */\n    @Output() readonly change: EventEmitter<McTagListChange> = new EventEmitter<McTagListChange>();\n\n    /** The tag components contained within this tag list. */\n    @ContentChildren(McTag) tags: QueryList<McTag>;\n\n    _tabIndex = 0;\n\n    private _value: any;\n\n    private _required: boolean = false;\n\n    private _placeholder: string;\n\n    private _disabled: boolean = false;\n\n    private _selectable: boolean = true;\n\n    /** The tag input to add more tags */\n    private tagInput: McTagTextControl;\n\n    private _multiple: boolean = false;\n\n    /**\n     * When a tag is destroyed, we store the index of the destroyed tag until the tags\n     * query list notifies about the update. This is necessary because we cannot determine an\n     * appropriate tag that should receive focus until the array of tags updated completely.\n     */\n    private lastDestroyedTagIndex: number | null = null;\n\n    /** Subject that emits when the component has been destroyed. */\n    private destroyed = new Subject<void>();\n\n    /** Subscription to focus changes in the tags. */\n    private tagFocusSubscription: Subscription | null;\n\n    /** Subscription to blur changes in the tags. */\n    private tagBlurSubscription: Subscription | null;\n\n    /** Subscription to selection changes in tags. */\n    private tagSelectionSubscription: Subscription | null;\n\n    /** Subscription to remove changes in tags. */\n    private tagRemoveSubscription: Subscription | null;\n\n    constructor(\n        protected elementRef: ElementRef<HTMLElement>,\n        private changeDetectorRef: ChangeDetectorRef,\n        defaultErrorStateMatcher: ErrorStateMatcher,\n        @Optional() private dir: Directionality,\n        @Optional() parentForm: NgForm,\n        @Optional() parentFormGroup: FormGroupDirective,\n        @Optional() @Self() public ngControl: NgControl\n    ) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            this.ngControl.valueAccessor = this;\n        }\n    }\n\n    ngAfterContentInit() {\n        this.keyManager = new FocusKeyManager<McTag>(this.tags)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this.dir ? this.dir.value : 'ltr');\n\n        if (this.dir) {\n            this.dir.change\n                .pipe(takeUntil(this.destroyed))\n                .subscribe((dir) => this.keyManager.withHorizontalOrientation(dir));\n        }\n\n        // Prevents the tag list from capturing focus and redirecting\n        // it back to the first tag when the user tabs out.\n        this.keyManager.tabOut\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(() => {\n                this._tabIndex = -1;\n\n                setTimeout(() => {\n                    this._tabIndex = this.userTabIndex || 0;\n                    this.changeDetectorRef.markForCheck();\n                });\n            });\n\n        // When the list changes, re-subscribe\n        this.tags.changes\n            .pipe(startWith(null), takeUntil(this.destroyed))\n            .subscribe(() => {\n                if (this.disabled) {\n                    // Since this happens after the content has been\n                    // checked, we need to defer it to the next tick.\n                    Promise.resolve().then(() => { this.syncTagsDisabledState(); });\n                }\n\n                this.resetTags();\n\n                // Reset tags selected/deselected status\n                this.initializeSelection();\n\n                // Check to see if we need to update our tab index\n                this.updateTabIndex();\n\n                // Check to see if we have a destroyed tag and need to refocus\n                this.updateFocusForDestroyedTags();\n\n                // Defer setting the value in order to avoid the \"Expression\n                // has changed after it was checked\" errors from Angular.\n                Promise.resolve().then(() => { this.tagChanges.emit(this.tags.toArray()); });\n\n                this.stateChanges.next();\n            });\n    }\n\n    ngOnInit() {\n        this.selectionModel = new SelectionModel<McTag>(this.multiple, undefined, false);\n        this.stateChanges.next();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroyed.next();\n        this.destroyed.complete();\n        this.stateChanges.complete();\n\n        this.dropSubscriptions();\n    }\n\n    // tslint:disable-next-line:no-empty\n    onTouched = () => {};\n\n    // tslint:disable-next-line:no-empty\n    onChange: (value: any) => void = () => {};\n\n    /** Associates an HTML input element with this tag list. */\n    registerInput(inputElement: McTagTextControl): void {\n        this.tagInput = inputElement;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any): void {\n        if (this.tags) {\n            this.setSelectionByValue(value, false);\n        }\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this.onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n        this.stateChanges.next();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick(event: MouseEvent) {\n        if (!this.originatesFromTag(event)) {\n            this.focus();\n        }\n    }\n\n    /**\n     * Focuses the first non-disabled tag in this tag list, or the associated input when there\n     * are no eligible tags.\n     */\n    focus(): void {\n        if (this.disabled) { return; }\n\n        // TODO: ARIA says this should focus the first `selected` tag if any are selected.\n        // Focus on first element if there's no tagInput inside tag-list\n        if (this.tagInput && this.tagInput.focused) {\n            // do nothing\n        } else if (this.tags.length > 0) {\n            this.keyManager.setFirstItemActive();\n            this.stateChanges.next();\n        } else {\n            this.focusInput();\n            this.stateChanges.next();\n        }\n    }\n\n    /** Attempt to focus an input if we have one. */\n    focusInput() {\n        if (this.tagInput) {\n            this.tagInput.focus();\n        }\n    }\n\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n    keydown(event: KeyboardEvent) {\n        const target = event.target as HTMLElement;\n\n        // If they are on an empty input and hit backspace, focus the last tag\n        // tslint:disable-next-line: deprecation\n        if (event.keyCode === BACKSPACE && this.isInputEmpty(target)) {\n            this.keyManager.setLastItemActive();\n            event.preventDefault();\n        } else if (target && target.classList.contains('mc-tag')) {\n            // tslint:disable-next-line: deprecation\n            if (event.keyCode === HOME) {\n                this.keyManager.setFirstItemActive();\n                event.preventDefault();\n            // tslint:disable-next-line: deprecation\n            } else if (event.keyCode === END) {\n                this.keyManager.setLastItemActive();\n                event.preventDefault();\n            } else {\n                this.keyManager.onKeydown(event);\n            }\n\n            this.stateChanges.next();\n        }\n    }\n\n    setSelectionByValue(value: any, isUserInput: boolean = true) {\n        this.clearSelection();\n        this.tags.forEach((tag) => tag.deselect());\n\n        if (Array.isArray(value)) {\n            value.forEach((currentValue) => this.selectValue(currentValue, isUserInput));\n            this.sortValues();\n        } else {\n            const correspondingTag = this.selectValue(value, isUserInput);\n\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what tag the user interacted with last.\n            if (correspondingTag && isUserInput) {\n                this.keyManager.setActiveItem(correspondingTag);\n            }\n        }\n    }\n\n    /** When blurred, mark the field as touched when focus moved outside the tag list. */\n    blur() {\n        if (!this.hasFocusedTag()) {\n            this.keyManager.setActiveItem(-1);\n        }\n\n        if (!this.disabled) {\n            if (this.tagInput) {\n                // If there's a tag input, we should check whether the focus moved to tag input.\n                // If the focus is not moved to tag input, mark the field as touched. If the focus moved\n                // to tag input, do nothing.\n                // Timeout is needed to wait for the focus() event trigger on tag input.\n                setTimeout(() => {\n                    if (!this.focused) {\n                        this.markAsTouched();\n                    }\n                });\n            } else {\n                // If there's no tag input, then mark the field as touched.\n                this.markAsTouched();\n            }\n        }\n    }\n\n    /** Mark the field as touched */\n    markAsTouched() {\n        this.onTouched();\n        this.changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     */\n    protected updateTabIndex(): void {\n        // If we have 0 tags, we should not allow keyboard focus\n        this._tabIndex = this.userTabIndex || (this.tags.length === 0 ? -1 : 0);\n    }\n\n    /**\n     * If the amount of tags changed, we need to update the\n     * key manager state and focus the next closest tag.\n     */\n    protected updateFocusForDestroyedTags() {\n        if (this.lastDestroyedTagIndex != null && this.tags.length) {\n            const newTagIndex = Math.min(this.lastDestroyedTagIndex, this.tags.length - 1);\n            this.keyManager.setActiveItem(newTagIndex);\n        } else if (this.tags.length === 0) {\n            this.focusInput();\n        }\n\n        this.lastDestroyedTagIndex = null;\n    }\n\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of tags.\n     */\n    private isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.tags.length;\n    }\n\n    private isInputEmpty(element: HTMLElement): boolean {\n        if (element && element.nodeName.toLowerCase() === 'input') {\n            const input = element as HTMLInputElement;\n\n            return !input.value;\n        }\n\n        return false;\n    }\n\n    /**\n     * Finds and selects the tag based on its value.\n     * @returns Tag that has the corresponding value.\n     */\n    private selectValue(value: any, isUserInput: boolean = true): McTag | undefined {\n\n        const correspondingTag = this.tags.find((tag) => {\n            return tag.value != null && this._compareWith(tag.value, value);\n        });\n\n        if (correspondingTag) {\n            if (isUserInput) {\n                correspondingTag.selectViaInteraction();\n            } else {\n                correspondingTag.select();\n            }\n\n            this.selectionModel.select(correspondingTag);\n        }\n\n        return correspondingTag;\n    }\n\n    private initializeSelection(): void {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl || this._value) {\n                this.setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n                this.stateChanges.next();\n            }\n        });\n    }\n\n    /**\n     * Deselects every tag in the list.\n     * @param skip Tag that should not be deselected.\n     */\n    private clearSelection(skip?: McTag): void {\n        this.selectionModel.clear();\n        this.tags.forEach((tag) => {\n            if (tag !== skip) {\n                tag.deselect();\n            }\n        });\n        this.stateChanges.next();\n    }\n\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     */\n    private sortValues(): void {\n        if (this._multiple) {\n            this.selectionModel.clear();\n\n            this.tags.forEach((tag) => {\n                if (tag.selected) {\n                    this.selectionModel.select(tag);\n                }\n            });\n            this.stateChanges.next();\n        }\n    }\n\n    /** Emits change event to set the model value. */\n    private propagateChanges(fallbackValue?: any): void {\n        let valueToEmit: any = null;\n\n        if (Array.isArray(this.selected)) {\n            valueToEmit = this.selected.map((tag) => tag.value);\n        } else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.change.emit(new McTagListChange(this, valueToEmit));\n        this.valueChange.emit(valueToEmit);\n        this.onChange(valueToEmit);\n        this.changeDetectorRef.markForCheck();\n    }\n\n    private resetTags() {\n        this.dropSubscriptions();\n        this.listenToTagsFocus();\n        this.listenToTagsSelection();\n        this.listenToTagsRemoved();\n    }\n\n    private dropSubscriptions() {\n        if (this.tagFocusSubscription) {\n            this.tagFocusSubscription.unsubscribe();\n            this.tagFocusSubscription = null;\n        }\n\n        if (this.tagBlurSubscription) {\n            this.tagBlurSubscription.unsubscribe();\n            this.tagBlurSubscription = null;\n        }\n\n        if (this.tagSelectionSubscription) {\n            this.tagSelectionSubscription.unsubscribe();\n            this.tagSelectionSubscription = null;\n        }\n\n        if (this.tagRemoveSubscription) {\n            this.tagRemoveSubscription.unsubscribe();\n            this.tagRemoveSubscription = null;\n        }\n    }\n\n    /** Listens to user-generated selection events on each tag. */\n    private listenToTagsSelection(): void {\n        this.tagSelectionSubscription = this.tagSelectionChanges.subscribe((event) => {\n            if (event.source.selected) {\n                this.selectionModel.select(event.source);\n            } else {\n                this.selectionModel.deselect(event.source);\n            }\n\n            // For single selection tag list, make sure the deselected value is unselected.\n            if (!this.multiple) {\n                this.tags.forEach((tag) => {\n                    if (!this.selectionModel.isSelected(tag) && tag.selected) {\n                        tag.deselect();\n                    }\n                });\n            }\n\n            if (event.isUserInput) {\n                this.propagateChanges();\n            }\n        });\n    }\n\n    /** Listens to user-generated selection events on each tag. */\n    private listenToTagsFocus(): void {\n        this.tagFocusSubscription = this.tagFocusChanges.subscribe((event) => {\n            const tagIndex: number = this.tags.toArray().indexOf(event.tag);\n\n            if (this.isValidIndex(tagIndex)) {\n                this.keyManager.updateActiveItem(tagIndex);\n            }\n            this.stateChanges.next();\n        });\n\n        this.tagBlurSubscription = this.tagBlurChanges.subscribe(() => {\n            this.blur();\n            this.stateChanges.next();\n        });\n    }\n\n    private listenToTagsRemoved(): void {\n        this.tagRemoveSubscription = this.tagRemoveChanges.subscribe((event) => {\n            const tag = event.tag;\n            const tagIndex = this.tags.toArray().indexOf(event.tag);\n\n            // In case the tag that will be removed is currently focused, we temporarily store\n            // the index in order to be able to determine an appropriate sibling tag that will\n            // receive focus.\n            if (this.isValidIndex(tagIndex) && tag.hasFocus) {\n                this.lastDestroyedTagIndex = tagIndex;\n            }\n        });\n    }\n\n    /** Checks whether an event comes from inside a tag element. */\n    private originatesFromTag(event: Event): boolean {\n        let currentElement = event.target as HTMLElement | null;\n\n        while (currentElement && currentElement !== this.elementRef.nativeElement) {\n            if (currentElement.classList.contains('mc-tag')) {\n                return true;\n            }\n\n            currentElement = currentElement.parentElement;\n        }\n\n        return false;\n    }\n\n    /** Checks whether any of the tags is focused. */\n    private hasFocusedTag() {\n        return this.tags.some((tag) => tag.hasFocus);\n    }\n\n    /** Syncs the list's disabled state with the individual tags. */\n    private syncTagsDisabledState() {\n        if (this.tags) {\n            this.tags.forEach((tag) => {\n                tag.disabled = this._disabled;\n            });\n        }\n    }\n}\n\n","import { Directive, Input } from '@angular/core';\n\nimport { CdkTreeNodeDef } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodeDef]',\n    inputs: ['when: mcTreeNodeDefWhen'],\n    providers: [{ provide: CdkTreeNodeDef, useExisting: McTreeNodeDef }]\n})\nexport class McTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n    @Input('mcTreeNode') data: T;\n}\n","import { Directive, Input, OnInit } from '@angular/core';\nimport { CdkTreeNodePadding } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodePadding]',\n    providers: [{ provide: CdkTreeNodePadding, useExisting: McTreeNodePadding }]\n})\nexport class McTreeNodePadding<T> extends CdkTreeNodePadding<T> implements OnInit {\n    @Input('mcTreeNodePadding') level: number;\n\n    @Input('mcTreeNodePaddingIndent') indent: number;\n\n    baseLeftPadding: number = 12;\n    /* tslint:disable-next-line:naming-convention */\n    _indent: number = 20;\n\n    withIcon: boolean;\n    iconWidth: number = 20;\n\n    get leftPadding(): number {\n        return (this.withIcon ? 0 : this.iconWidth) + this.baseLeftPadding;\n    }\n\n    paddingIndent(): string | null {\n        const nodeLevel = (this.treeNode.data && this.tree.treeControl.getLevel)\n            ? this.tree.treeControl.getLevel(this.treeNode.data)\n            : null;\n\n        const level = this.level || nodeLevel;\n\n        return level ? `${(level * this._indent) + this.leftPadding}px` : `${this.baseLeftPadding}px`;\n    }\n\n    ngOnInit(): void {\n        this.withIcon = this.tree.treeControl.isExpandable(this.treeNode.data);\n\n        this.setPadding();\n    }\n}\n","import { Directive } from '@angular/core';\nimport { CdkTreeNodeToggle } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodeToggle]',\n    host: {\n        '(click)': 'toggle($event)'\n    },\n    providers: [{ provide: CdkTreeNodeToggle, useExisting: McTreeNodeToggle }]\n})\nexport class McTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {}\n","import {\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    Output,\n    ElementRef,\n    Inject,\n    Optional,\n    InjectionToken\n} from '@angular/core';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { CdkTreeNode } from '@ptsecurity/cdk/tree';\nimport { CanDisable, toBoolean } from '@ptsecurity/mosaic/core';\n\n\n/* tslint:disable-next-line:naming-convention */\nexport interface McTreeOptionParentComponent {\n    multiple: boolean;\n    selectionModel: SelectionModel<McTreeOption>;\n    setFocusedOption: any;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MC_TREE_OPTION_PARENT_COMPONENT =\n    new InjectionToken<McTreeOptionParentComponent>('MC_TREE_OPTION_PARENT_COMPONENT');\n\nexport class McTreeOptionChange {\n    constructor(public source: McTreeOption, public isUserInput = false) {}\n}\n\nlet uniqueIdCounter: number = 0;\n\n@Component({\n    selector: 'mc-tree-option',\n    exportAs: 'mcTreeOption',\n    host: {\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'getTabIndex()',\n\n        '[attr.disabled]': 'disabled || null',\n\n        class: 'mc-tree-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-active]': 'active',\n\n        '(click)': 'selectViaInteraction()'\n    },\n    templateUrl: './tree-option.html',\n    providers: [{ provide: CdkTreeNode, useExisting: McTreeOption }]\n})\nexport class McTreeOption extends CdkTreeNode<McTreeOption> implements CanDisable {\n    @Output() readonly onSelectionChange = new EventEmitter<McTreeOptionChange>();\n\n    @Input() value: any;\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    // @Input()\n    // get selected(): boolean {\n    //     return this.treeSelection.selectionModel && this.treeSelection.selectionModel.isSelected(this) || false;\n    // }\n\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            // this.treeSelection._reportValueChange();\n        }\n    }\n\n    private _selected: boolean = false;\n\n    /**\n     * Whether or not the option is currently active and ready to be selected.\n     * An active option displays styles as if it is focused, but the\n     * focus is actually retained somewhere else. This comes in handy\n     * for components like autocomplete where focus must remain on the input.\n     */\n    get active(): boolean {\n        return this._active;\n    }\n\n    private _active = false;\n\n    get id(): string {\n        return this._id;\n    }\n\n    private _id = `mc-tree-option-${uniqueIdCounter++}`;\n\n    get multiple(): boolean {\n        return this.parent.multiple;\n    }\n\n    constructor(\n        protected elementRef: ElementRef,\n        protected changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_TREE_OPTION_PARENT_COMPONENT) private readonly parent: McTreeOptionParentComponent\n    ) {\n        // todo any\n        super(elementRef, parent as any);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.parent.selectionModel) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.parent.selectionModel.select(this);\n        } else {\n            this.parent.selectionModel.deselect(this);\n        }\n\n        // this._changeDetector.markForCheck();\n    }\n\n    /**\n     * This method sets display styles on the option to make it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setActiveStyles(): void {\n        if (!this._active) {\n            this._active = true;\n\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    /**\n     * This method removes display styles on the option that made it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setInactiveStyles(): void {\n        if (this._active) {\n            this._active = false;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    getHeight(): number {\n        const clientRects = this.elementRef.nativeElement.getClientRects();\n        if (clientRects.length) {\n            return clientRects[0].height;\n        }\n\n        return 0;\n    }\n\n    focus(): void {\n        const element = this.getHostElement();\n\n        if (typeof element.focus === 'function') {\n            element.focus();\n        }\n    }\n\n    // todo старая реализация, нужно восстановить tree-selection\n    // handleClick(): void {\n    //     if (this.disabled) { return; }\n    //\n    //     this.treeSelection.setFocusedOption(this);\n    // }\n\n    /**\n     * The displayed value of the option. It is necessary to show the selected option in the\n     * select's trigger.\n     */\n    get viewValue(): string {\n        // TODO(kara): Add input property alternative for node envs.\n        return (this.getHostElement().textContent || '').trim();\n    }\n\n    select(): void {\n        if (!this._selected) {\n            this._selected = true;\n\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    deselect(): void {\n        if (this._selected) {\n            this._selected = false;\n\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    selectViaInteraction(): void {\n        if (!this.disabled) {\n            this._selected = this.multiple ? !this._selected : true;\n\n            this.changeDetectorRef.markForCheck();\n            this.emitSelectionChangeEvent(true);\n\n            if (this.parent.setFocusedOption) {\n                this.parent.setFocusedOption(this);\n            }\n        }\n    }\n\n    emitSelectionChangeEvent(isUserInput = false): void {\n        this.onSelectionChange.emit(new McTreeOptionChange(this, isUserInput));\n    }\n\n    getHostElement(): HTMLElement {\n        return this.elementRef.nativeElement;\n    }\n\n    getTabIndex(): string {\n        return this.disabled ? '-1' : '0';\n    }\n}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    EventEmitter,\n    Input,\n    IterableDiffer,\n    IterableDiffers,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    ElementRef\n} from '@angular/core';\nimport { NodeDef, ViewData } from '@angular/core/src/view';\nimport { ActiveDescendantKeyManager } from '@ptsecurity/cdk/a11y';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, SPACE } from '@ptsecurity/cdk/keycodes';\nimport { CdkTree, CdkTreeNodeOutlet } from '@ptsecurity/cdk/tree';\nimport {\n    CanDisable,\n    CanDisableCtor,\n    HasTabIndex,\n    HasTabIndexCtor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\nimport { Subject } from 'rxjs';\n\nimport { MC_TREE_OPTION_PARENT_COMPONENT, McTreeOption } from './tree-option';\n\n\nexport class McTreeNavigationChange {\n    constructor(\n        public source: McTreeSelection,\n        public option: McTreeOption\n    ) {}\n}\n\nexport class McTreeSelectionChange {\n    constructor(public source: McTreeSelection, public option: McTreeOption) {}\n}\n\nclass McTreeSelectionBase<T> extends CdkTree<T> {\n    constructor(differs: IterableDiffers, changeDetectorRef: ChangeDetectorRef) {\n        super(differs, changeDetectorRef);\n    }\n}\n\n/* tslint:disable-next-line:naming-convention */\nconst McTreeSelectionBaseMixin: HasTabIndexCtor & CanDisableCtor &\n    typeof McTreeSelectionBase = mixinTabIndex(mixinDisabled(McTreeSelectionBase));\n\n\n@Component({\n    selector: 'mc-tree-selection',\n    exportAs: 'mcTreeSelection',\n    template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n    host: {\n        class: 'mc-tree-selection',\n\n        '[attr.tabindex]': 'tabIndex',\n\n        '(keydown)': 'onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    styleUrls: ['./tree.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [\n        { provide: MC_TREE_OPTION_PARENT_COMPONENT, useExisting: McTreeSelection },\n        { provide: CdkTree, useExisting: McTreeSelection }\n    ]\n})\nexport class McTreeSelection extends McTreeSelectionBaseMixin<McTreeOption>\n    implements AfterContentInit, CanDisable, HasTabIndex {\n\n    @ViewChild(CdkTreeNodeOutlet) nodeOutlet: CdkTreeNodeOutlet;\n\n    @ContentChildren(McTreeOption) options: QueryList<McTreeOption>;\n\n    keyManager: ActiveDescendantKeyManager<McTreeOption>;\n\n    selectionModel: SelectionModel<McTreeOption>;\n\n    tabIndex: number;\n    multiple: boolean;\n    autoSelect: boolean;\n    noUnselect: boolean;\n\n    // todo temporary solution\n    withShift: boolean;\n    withCtrl: boolean;\n\n\n    @Output() readonly navigationChange = new EventEmitter<McTreeNavigationChange>();\n\n    @Output() readonly selectionChange = new EventEmitter<McTreeSelectionChange>();\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(rawValue: boolean) {\n        const value = toBoolean(rawValue);\n\n        if (this._disabled !== value) {\n            this._disabled = value;\n\n            if (this._disabled) {\n                /* tslint:disable-next-line:no-console */\n                console.log('need disable all options');\n            } else {\n                /* tslint:disable-next-line:no-console */\n                console.log('need enable all options');\n            }\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    private readonly destroy = new Subject<void>();\n\n    constructor(\n        private elementRef: ElementRef,\n        differs: IterableDiffers,\n        changeDetectorRef: ChangeDetectorRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('multiple') multiple: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string\n    ) {\n        super(differs, changeDetectorRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.multiple = multiple === null ? false : toBoolean(multiple);\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.selectionModel = new SelectionModel<McTreeOption>(this.multiple);\n    }\n\n    ngAfterContentInit(): void {\n        this.keyManager = new ActiveDescendantKeyManager<McTreeOption>(this.options)\n            .withVerticalOrientation(true)\n            .withHorizontalOrientation(null);\n    }\n\n    ngOnDestroy() {\n        this.destroy.next();\n\n        this.destroy.complete();\n    }\n\n    onKeyDown(event: KeyboardEvent) {\n        // tslint:disable-next-line: deprecation\n        const keyCode = event.keyCode;\n        this.withShift = event.shiftKey;\n        this.withCtrl = event.ctrlKey;\n\n        switch (keyCode) {\n            case LEFT_ARROW:\n                if (this.keyManager.activeItem) {\n                    this.treeControl.collapse(this.keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                break;\n            case RIGHT_ARROW:\n                if (this.keyManager.activeItem) {\n                    this.treeControl.expand(this.keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                break;\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this.keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this.keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                this.keyManager.setPreviousPageItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                this.keyManager.setNextPageItemActive();\n                event.preventDefault();\n\n                break;\n            default:\n                this.keyManager.onKeydown(event);\n        }\n    }\n\n    updateScrollSize(): void {\n        if (!this.options.first) { return; }\n\n        this.keyManager.withScrollSize(Math.floor(this.getHeight() / this.options.first.getHeight()));\n    }\n\n    setFocusedOption(option: McTreeOption) {\n        this.keyManager.setActiveItem(option);\n\n        if (this.withShift && this.multiple) {\n            const previousIndex = this.keyManager.previousActiveItemIndex;\n            const activeIndex = this.keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n\n            this.withShift = false;\n        } else if (this.withCtrl) {\n            this.withCtrl = false;\n\n            if (!this.canDeselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) {\n                this.options.forEach((item) => item.setSelected(false));\n                option.setSelected(true);\n            }\n        }\n\n        this.emitNavigationEvent(option);\n    }\n\n    toggleFocusedOption(): void {\n        const focusedIndex = this.keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this.isValidIndex(focusedIndex)) {\n            const focusedOption: McTreeOption = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this.canDeselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this.emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    renderNodeChanges(\n        data: McTreeOption[],\n        dataDiffer: IterableDiffer<McTreeOption> = this.dataDiffer,\n        viewContainer: any = this.nodeOutlet.viewContainer,\n        parentData?: McTreeOption\n    ): void {\n        super.renderNodeChanges(data, dataDiffer, viewContainer, parentData);\n\n        const arrayOfInstances = [];\n\n        viewContainer._embeddedViews.forEach((view: ViewData) => {\n            const viewDef = view.def;\n\n            viewDef.nodes.forEach((node: NodeDef) => {\n                if (viewDef.nodeMatchedQueries === node.matchedQueryIds) {\n                    const nodeData: any = view.nodes[node.nodeIndex];\n\n                    arrayOfInstances.push(nodeData.instance as never);\n                }\n            });\n        });\n\n        if (this.options) {\n            this.options.reset(arrayOfInstances);\n            this.options.notifyOnChanges();\n        }\n\n        this.updateScrollSize();\n    }\n\n    getHeight(): number {\n        const clientRects = this.elementRef.nativeElement.getClientRects();\n        if (clientRects.length) {\n            return clientRects[0].height;\n        }\n\n        return 0;\n    }\n\n    emitNavigationEvent(option: McTreeOption): void {\n        this.navigationChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    emitChangeEvent(option: McTreeOption): void {\n        this.selectionChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    private isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    private canDeselectLast(option: McTreeOption): boolean {\n        return !(this.noUnselect && this.selectionModel.selected.length === 1 && option.selected);\n    }\n}\n\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CdkTreeModule } from '@ptsecurity/cdk/tree';\nimport { McPseudoCheckboxModule } from '@ptsecurity/mosaic/core';\n\nimport { McTreeNodeDef } from './node';\nimport { McTreeNodePadding } from './padding';\nimport { McTreeNodeToggle } from './toggle';\nimport { McTreeOption } from './tree-option';\nimport { McTreeSelection } from './tree-selection';\n\n\nconst MC_TREE_DIRECTIVES = [\n    McTreeSelection,\n    McTreeOption,\n    McTreeNodeDef,\n    McTreeNodePadding,\n    McTreeNodeToggle\n];\n\n@NgModule({\n    imports: [CommonModule, CdkTreeModule, McPseudoCheckboxModule],\n    exports: MC_TREE_DIRECTIVES,\n    declarations: MC_TREE_DIRECTIVES\n})\nexport class McTreeModule {}\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { FlatTreeControl, ITreeControl } from '@ptsecurity/cdk/tree';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class McTreeFlattener<T, F> {\n    constructor(\n        public transformFunction: (node: T, level: number) => F,\n        public getLevel: (node: F) => number,\n        public isExpandable: (node: F) => boolean,\n        public getChildren: (node: T) => Observable<T[]>\n    ) {}\n\n    flattenNode(node: T, level: number, resultNodes: F[], parentMap: boolean[]): F[] {\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n\n        if (this.isExpandable(flatNode)) {\n            this.getChildren(node)\n                .pipe(take(1))\n                .subscribe((children) => {\n                    children.forEach((child, index) => {\n                        const childParentMap: boolean[] = parentMap.slice();\n                        childParentMap.push(index !== children.length - 1);\n\n                        this.flattenNode(child, level + 1, resultNodes, childParentMap);\n                    });\n                });\n        }\n\n        return resultNodes;\n    }\n\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n    flattenNodes(structuredData: T[]): F[] {\n        const resultNodes: F[] = [];\n        structuredData.forEach((node) => this.flattenNode(node, 0, resultNodes, []));\n\n        return resultNodes;\n    }\n\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n    expandFlattenedNodes(nodes: F[], treeControl: ITreeControl<F>): F[] {\n        const results: F[] = [];\n        const currentExpand: boolean[] = [];\n        currentExpand[0] = true;\n\n        nodes.forEach((node) => {\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n\n            if (expand) { results.push(node); }\n\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        });\n\n        return results;\n    }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `McTree`.\n * The nested tree nodes of type `T` are flattened through `MсTreeFlattener`, and converted\n * to type `F` for `McTree` to consume.\n */\nexport class McTreeFlatDataSource<T, F> extends DataSource<F> {\n    flattenedData = new BehaviorSubject<F[]>([]);\n\n    expandedData = new BehaviorSubject<F[]>([]);\n\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n\n        this.flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n        this.treeControl.dataNodes = this.flattenedData.value;\n    }\n\n    private _data: BehaviorSubject<T[]>;\n\n    constructor(\n        private treeControl: FlatTreeControl<F>,\n        private treeFlattener: McTreeFlattener<T, F>,\n        initialData: T[] = []\n    ) {\n        super();\n\n        this._data = new BehaviorSubject<T[]>(initialData);\n    }\n\n    connect(collectionViewer: ICollectionViewer): Observable<F[]> {\n        const changes = [\n            collectionViewer.viewChange,\n            this.treeControl.expansionModel.changed,\n            this.flattenedData\n        ];\n\n        return merge(...changes)\n            .pipe(map(() => {\n                this.expandedData.next(\n                    this.treeFlattener.expandFlattenedNodes(this.flattenedData.value, this.treeControl)\n                );\n\n                return this.expandedData.value;\n            }));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by ITreeControl and each non-leaf node.\n */\nexport class McTreeNestedDataSource<T> extends DataSource<T> {\n\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n    }\n\n    /* tslint:disable-next-line:naming-convention */\n    private _data = new BehaviorSubject<T[]>([]);\n\n    connect(collectionViewer: ICollectionViewer): Observable<T[]> {\n        return merge(...[collectionViewer.viewChange, this._data])\n            .pipe(map(() => this.data));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import { Directive, TemplateRef } from '@angular/core';\n\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({ selector: '[mcTabContent]' })\nexport class McTabContent {\n    constructor(public template: TemplateRef<any>) { }\n}\n","import { Directive } from '@angular/core';\nimport { CdkPortal } from '@ptsecurity/cdk/portal';\n\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n    selector: '[mc-tab-label], [mcTabLabel]'\n})\nexport class McTabLabel extends CdkPortal {}\n\n// TODO: workaround for https://github.com/angular/material2/issues/12760\n(McTabLabel as any).ctorParameters = () => (CdkPortal as any).ctorParameters;\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ContentChild,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    SimpleChanges,\n    TemplateRef,\n    ViewChild,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { TemplatePortal } from '@ptsecurity/cdk/portal';\nimport {\n    CanDisable,\n    CanDisableCtor,\n    mixinDisabled\n} from '@ptsecurity/mosaic/core';\nimport { Subject } from 'rxjs';\n\nimport { McTabContent } from './tab-content';\nimport { McTabLabel } from './tab-label';\n\n\nexport class McTabBase {}\nexport const mcTabMixinBase: CanDisableCtor & typeof McTabBase = mixinDisabled(\n    McTabBase\n);\n\n@Component({\n    selector: 'mc-tab',\n    // Create a template for the content of the <mc-tab> so that we can grab a reference to this\n    // TemplateRef and use it in a Portal to render the tab content in the appropriate place in the\n    // tab-group.\n    template: '<ng-template><ng-content></ng-content></ng-template>',\n    inputs: ['disabled'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcTab'\n})\nexport class McTab extends mcTabMixinBase\n    implements OnInit, CanDisable, OnChanges, OnDestroy {\n    /** @docs-private */\n    get content(): TemplatePortal | null {\n        return this.contentPortal;\n    }\n    /** Content for the tab label given by `<ng-template mc-tab-label>`. */\n    @ContentChild(McTabLabel)\n    templateLabel: McTabLabel;\n\n    /**\n     * Template provided in the tab content that will be used if present, used to enable lazy-loading\n     */\n    @ContentChild(McTabContent, { read: TemplateRef })\n    explicitContent: TemplateRef<any>;\n\n    /** Template inside the McTab view that contains an `<ng-content>`. */\n    @ViewChild(TemplateRef)\n    implicitContent: TemplateRef<any>;\n\n    /** Plain text label for the tab, used when there is no template label. */\n    @Input('label')\n    textLabel: string = '';\n\n    /** Aria label for the tab. */\n    @Input('aria-label')\n    ariaLabel: string;\n\n    /**\n     * Reference to the element that the tab is labelled by.\n     * Will be cleared if `aria-label` is set at the same time.\n     */\n    @Input('aria-labelledby')\n    ariaLabelledby: string;\n\n    /** Emits whenever the internal state of the tab changes. */\n    readonly stateChanges = new Subject<void>();\n\n    /**\n     * The relatively indexed position where 0 represents the center, negative is left, and positive\n     * represents the right.\n     */\n    position: number | null = null;\n\n    /**\n     * The initial relatively index origin of the tab if it was created and selected after there\n     * was already a selected tab. Provides context of what position the tab should originate from.\n     */\n    origin: number | null = null;\n\n    /**\n     * Whether the tab is currently active.\n     */\n    isActive = false;\n\n    /** Portal that will be the hosted content of the tab */\n    private contentPortal: TemplatePortal | null = null;\n\n    constructor(private viewContainerRef: ViewContainerRef) {\n        super();\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (\n            changes.hasOwnProperty('textLabel') ||\n            changes.hasOwnProperty('disabled')\n        ) {\n            this.stateChanges.next();\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.stateChanges.complete();\n    }\n\n    ngOnInit(): void {\n        this.contentPortal = new TemplatePortal(\n            this.explicitContent || this.implicitContent,\n            this.viewContainerRef\n        );\n    }\n}\n","import {\n    animate,\n    state,\n    style,\n    transition,\n    trigger,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n\nexport const mcTabsAnimations: {\n    readonly translateTab: AnimationTriggerMetadata;\n} = {\n    /** Animation translates a tab along the X axis. */\n    translateTab: trigger('translateTab', [\n        // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n        state(\n            'center, void, left-origin-center, right-origin-center',\n            style({ transform: 'none' })\n        ),\n\n        // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n        // in order to ensure that the element has a height before its state changes. This is\n        // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n        // not have a static height and is not rendered. See related issue: #9465\n        state(\n            'left',\n            style({ transform: 'translate3d(-100%, 0, 0)', minHeight: '1px' })\n        ),\n        state(\n            'right',\n            style({ transform: 'translate3d(100%, 0, 0)', minHeight: '1px' })\n        ),\n\n        transition(\n            '* => left, * => right, left => center, right => center',\n            animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n        ),\n        transition('void => left-origin-center', [\n            style({ transform: 'translate3d(-100%, 0, 0)' }),\n            animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n        ]),\n        transition('void => right-origin-center', [\n            style({ transform: 'translate3d(100%, 0, 0)' }),\n            animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n        ])\n    ])\n};\n","import { AnimationEvent } from '@angular/animations';\nimport {\n    Component,\n    ChangeDetectorRef,\n    Input,\n    Inject,\n    Output,\n    EventEmitter,\n    OnDestroy,\n    OnInit,\n    ElementRef,\n    Directive,\n    Optional,\n    ViewEncapsulation,\n    ChangeDetectionStrategy,\n    ComponentFactoryResolver,\n    ViewContainerRef,\n    forwardRef,\n    ViewChild\n} from '@angular/core';\nimport { Directionality, Direction } from '@ptsecurity/cdk/bidi';\nimport { TemplatePortal, CdkPortalOutlet, PortalHostDirective } from '@ptsecurity/cdk/portal';\nimport { Subscription } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n\nimport { mcTabsAnimations } from './tabs-animations';\n\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type McTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type McTabBodyOriginState = 'left' | 'right';\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n    selector: 'mc-tab-body',\n    templateUrl: 'tab-body.html',\n    styleUrls: ['tab-body.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [mcTabsAnimations.translateTab],\n    host: {\n        class: 'mc-tab-body'\n    }\n})\nexport class McTabBody implements OnInit, OnDestroy {\n\n    /** The shifted index position of the tab body, where zero represents the active center tab. */\n    @Input()\n    set position(position: number) {\n        this.positionIndex = position;\n        this.computePositionAnimationState();\n    }\n\n    /** Tab body position state. Used by the animation trigger for the current state. */\n    bodyPosition: McTabBodyPositionState;\n\n    /** Event emitted when the tab begins to animate towards the center as the active tab. */\n    @Output() readonly onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n    /** Event emitted before the centering of the tab begins. */\n    @Output() readonly beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted before the centering of the tab begins. */\n    @Output() readonly afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted when the tab completes its animation towards the center. */\n    @Output() readonly onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n    /** The portal host inside of this container into which the tab body content will be loaded. */\n    @ViewChild(PortalHostDirective) portalHost: PortalHostDirective;\n\n    /** The tab body content to display. */\n    @Input('content') content: TemplatePortal;\n\n    /** Position that will be used when the tab is immediately becoming visible after creation. */\n    @Input() origin: number;\n\n    // Note that the default value will always be overwritten by `McTabBody`, but we need one\n    // anyway to prevent the animations module from throwing an error if the body is used on its own.\n    /** Duration for the tab's animation. */\n    @Input() animationDuration: string = '0ms';\n\n    /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n    private positionIndex: number;\n\n    /** Subscription to the directionality change observable. */\n    private dirChangeSubscription = Subscription.EMPTY;\n\n    constructor(private elementRef: ElementRef<HTMLElement>,\n                @Optional() private dir: Directionality,\n                changeDetectorRef: ChangeDetectorRef) {\n\n        if (this.dir && changeDetectorRef) {\n            this.dirChangeSubscription = this.dir.change.subscribe((direction: Direction) => {\n                this.computePositionAnimationState(direction);\n                changeDetectorRef.markForCheck();\n            });\n        }\n    }\n\n    /**\n     * After initialized, check if the content is centered and has an origin. If so, set the\n     * special position states that transition the tab from the left or right before centering.\n     */\n    ngOnInit() {\n        if (this.bodyPosition === 'center' && this.origin != null) {\n            this.bodyPosition = this.computePositionFromOrigin();\n        }\n    }\n\n    ngOnDestroy() {\n        this.dirChangeSubscription.unsubscribe();\n    }\n\n    onTranslateTabStarted(e: AnimationEvent): void {\n        const isCentering = this.isCenterPosition(e.toState);\n        this.beforeCentering.emit(isCentering);\n        if (isCentering) {\n            this.onCentering.emit(this.elementRef.nativeElement.clientHeight);\n        }\n    }\n\n    onTranslateTabComplete(e: AnimationEvent): void {\n        // If the transition to the center is complete, emit an event.\n        if (this.isCenterPosition(e.toState) && this.isCenterPosition(this.bodyPosition)) {\n            this.onCentered.emit();\n        }\n\n        if (this.isCenterPosition(e.fromState) && !this.isCenterPosition(this.bodyPosition)) {\n            this.afterLeavingCenter.emit();\n        }\n    }\n\n    /** The text direction of the containing app. */\n    getLayoutDirection(): Direction {\n        return this.dir && this.dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n\n    /** Whether the provided position state is considered center, regardless of origin. */\n    isCenterPosition(position: McTabBodyPositionState | string): boolean {\n        return position === 'center' ||\n            position === 'left-origin-center' ||\n            position === 'right-origin-center';\n    }\n\n    /** Computes the position state that will be used for the tab-body animation trigger. */\n    private computePositionAnimationState(dir: Direction = this.getLayoutDirection()) {\n        if (this.positionIndex < 0) {\n            this.bodyPosition = dir === 'ltr' ? 'left' : 'right';\n        } else if (this.positionIndex > 0) {\n            this.bodyPosition = dir === 'ltr' ? 'right' : 'left';\n        } else {\n            this.bodyPosition = 'center';\n        }\n    }\n\n    /**\n     * Computes the position state based on the specified origin position. This is used if the\n     * tab is becoming visible immediately after creation.\n     */\n    private computePositionFromOrigin(): McTabBodyPositionState {\n        const dir = this.getLayoutDirection();\n\n        if ((dir === 'ltr' && this.origin <= 0) || (dir === 'rtl' && this.origin > 0)) {\n            return 'left-origin-center';\n        }\n\n        return 'right-origin-center';\n    }\n}\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n    selector: '[mcTabBodyHost]'\n})\nexport class McTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n    /** Subscription to events for when the tab body begins centering. */\n    private centeringSub = Subscription.EMPTY;\n    /** Subscription to events for when the tab body finishes leaving from center position. */\n    private leavingSub = Subscription.EMPTY;\n\n    constructor(\n        componentFactoryResolver: ComponentFactoryResolver,\n        viewContainerRef: ViewContainerRef,\n        @Inject(forwardRef(() => McTabBody)) private host: McTabBody) {\n        super(componentFactoryResolver, viewContainerRef);\n    }\n\n    /** Set initial visibility or set up subscription for changing visibility. */\n    ngOnInit(): void {\n        super.ngOnInit();\n\n        this.centeringSub = this.host.beforeCentering\n            .pipe(startWith(this.host.isCenterPosition(this.host.bodyPosition)))\n            .subscribe((isCentering: boolean) => {\n                if (isCentering && !this.hasAttached()) {\n                    this.attach(this.host.content);\n                }\n            });\n\n        this.leavingSub = this.host.afterLeavingCenter.subscribe(() => {\n            this.detach();\n        });\n    }\n\n    /** Clean up centering subscription. */\n    ngOnDestroy(): void {\n        super.ngOnDestroy();\n        this.centeringSub.unsubscribe();\n        this.leavingSub.unsubscribe();\n    }\n}\n","import { Directive, ElementRef } from '@angular/core';\nimport {\n    CanDisable,\n    CanDisableCtor,\n    mixinDisabled\n} from '@ptsecurity/mosaic/core';\n\n\n// Boilerplate for applying mixins to McTabLabelWrapper.\n/** @docs-private */\nexport class McTabLabelWrapperBase {}\nexport const mcTabLabelWrapperMixinBase: CanDisableCtor &\n    typeof McTabLabelWrapperBase = mixinDisabled(McTabLabelWrapperBase);\n\n/**\n * Used in the `mc-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n    selector: '[mcTabLabelWrapper]',\n    inputs: ['disabled'],\n    host: {\n        '[class.mc-disabled]': 'disabled',\n        '[attr.aria-disabled]': '!!disabled'\n    }\n})\nexport class McTabLabelWrapper extends mcTabLabelWrapperMixinBase implements CanDisable {\n    constructor(public elementRef: ElementRef) {\n        super();\n    }\n\n    /** Sets focus on the wrapper element */\n    focus(): void {\n        this.elementRef.nativeElement.focus();\n    }\n\n    getOffsetLeft(): number {\n        return this.elementRef.nativeElement.offsetLeft;\n    }\n\n    getOffsetWidth(): number {\n        return this.elementRef.nativeElement.offsetWidth;\n    }\n}\n","import {\n    AfterContentChecked,\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Input,\n    NgZone,\n    OnDestroy,\n    Optional,\n    Output,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { FocusKeyManager } from '@ptsecurity/cdk/a11y';\nimport { Direction, Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceNumberProperty } from '@ptsecurity/cdk/coercion';\nimport { END, ENTER, HOME, SPACE } from '@ptsecurity/cdk/keycodes';\nimport { ViewportRuler } from '@ptsecurity/cdk/scrolling';\nimport { merge, of as observableOf, Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { McTabLabelWrapper } from './tab-label-wrapper';\n\n\nconst VIEWPORT_THROTTLE_TIME = 150;\nconst SCROLL_DISTANCE_DELIMITER = 3;\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to McTabHeader.\n/** @docs-private */\nexport class McTabHeaderBase {}\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group.\n * When the tabs list's width exceeds the width of the header container,\n * then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n    selector: 'mc-tab-header',\n    templateUrl: 'tab-header.html',\n    styleUrls: ['tab-header.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        class: 'mc-tab-header',\n        '[class.mc-tab-header__pagination-controls_enabled]':\n            'showPaginationControls',\n        '[class.mc-tab-header_rtl]': 'getLayoutDirection() == \\'rtl\\''\n    }\n})\nexport class McTabHeader extends McTabHeaderBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy {\n    /** The index of the active tab. */\n    @Input()\n    get selectedIndex(): number {\n        return this._selectedIndex;\n    }\n    set selectedIndex(value: number) {\n        const coercedValue = coerceNumberProperty(value);\n        this.selectedIndexChanged = this._selectedIndex !== coercedValue;\n        this._selectedIndex = coercedValue;\n\n        if (this.keyManager) {\n            this.keyManager.updateActiveItem(coercedValue);\n        }\n    }\n\n    /** Tracks which element has focus; used for keyboard navigation */\n    get focusIndex(): number {\n        return this.keyManager ? this.keyManager.activeItemIndex! : 0;\n    }\n\n    /** When the focus index is set, we must manually send focus to the correct label */\n    set focusIndex(value: number) {\n        if (\n            !this.isValidIndex(value) ||\n            this.focusIndex === value ||\n            !this.keyManager\n        ) {\n            return;\n        }\n\n        this.keyManager.setActiveItem(value);\n    }\n\n    /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n    get scrollDistance(): number {\n        return this._scrollDistance;\n    }\n    set scrollDistance(v: number) {\n        this._scrollDistance = Math.max(\n            0,\n            Math.min(this.getMaxScrollDistance(), v)\n        );\n\n        // Mark that the scroll distance has changed so that after the view is checked, the CSS\n        // transformation can move the header.\n        this.scrollDistanceChanged = true;\n        this.checkScrollingControls();\n    }\n\n    @ContentChildren(McTabLabelWrapper)\n    labelWrappers: QueryList<McTabLabelWrapper>;\n    @ViewChild('tabListContainer')\n    tabListContainer: ElementRef;\n    @ViewChild('tabList')\n    tabList: ElementRef;\n\n    /** Whether the controls for pagination should be displayed */\n    showPaginationControls = false;\n\n    /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n    disableScrollAfter = true;\n\n    /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n    disableScrollBefore = true;\n\n    /** Event emitted when the option is selected. */\n    @Output()\n    readonly selectFocusedIndex: EventEmitter<number> = new EventEmitter<number>();\n\n    /** Event emitted when a label is focused. */\n    @Output()\n    readonly indexFocused: EventEmitter<number> = new EventEmitter<number>();\n\n    /** The distance in pixels that the tab labels should be translated to the left. */\n    private _scrollDistance = 0;\n\n    /** Whether the header should scroll to the selected index after the view has been checked. */\n    private selectedIndexChanged = false;\n\n    /** Emits when the component is destroyed. */\n    private readonly destroyed = new Subject<void>();\n\n    /**\n     * The number of tab labels that are displayed on the header. When this changes, the header\n     * should re-evaluate the scroll position.\n     */\n    private tabLabelCount: number;\n\n    /** Whether the scroll distance has changed and should be applied after the view is checked. */\n    private scrollDistanceChanged: boolean;\n\n    /** Used to manage focus between the tabs. */\n    private keyManager: FocusKeyManager<McTabLabelWrapper>;\n\n    /** Cached text content of the header. */\n    private currentTextContent: string;\n\n    private _selectedIndex: number = 0;\n\n    constructor(\n        private elementRef: ElementRef,\n        private changeDetectorRef: ChangeDetectorRef,\n        private viewportRuler: ViewportRuler,\n        @Optional() private dir: Directionality,\n        private ngZone: NgZone\n    ) {\n        super();\n    }\n\n    ngAfterContentChecked(): void {\n        // If the number of tab labels have changed, check if scrolling should be enabled\n        if (this.tabLabelCount !== this.labelWrappers.length) {\n            this.updatePagination();\n            this.tabLabelCount = this.labelWrappers.length;\n            this.changeDetectorRef.markForCheck();\n        }\n\n        // If the selected index has changed, scroll to the label and check if the scrolling controls\n        // should be disabled.\n        if (this.selectedIndexChanged) {\n            this.scrollToLabel(this._selectedIndex);\n            this.checkScrollingControls();\n            this.selectedIndexChanged = false;\n            this.changeDetectorRef.markForCheck();\n        }\n\n        // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n        // then translate the header to reflect this.\n        if (this.scrollDistanceChanged) {\n            this.updateTabScrollPosition();\n            this.scrollDistanceChanged = false;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    handleKeydown(event: KeyboardEvent) {\n        switch (event.keyCode) {\n            case HOME:\n                this.keyManager.setFirstItemActive();\n                event.preventDefault();\n                break;\n            case END:\n                this.keyManager.setLastItemActive();\n                event.preventDefault();\n                break;\n            case ENTER:\n            case SPACE:\n                this.selectFocusedIndex.emit(this.focusIndex);\n                event.preventDefault();\n                break;\n            default:\n                this.keyManager.onKeydown(event);\n        }\n    }\n\n    ngAfterContentInit() {\n        const dirChange = this.dir ? this.dir.change : observableOf(null);\n        const resize = this.viewportRuler.change(VIEWPORT_THROTTLE_TIME);\n        const realign = () => {\n            this.updatePagination();\n        };\n\n        this.keyManager = new FocusKeyManager(this.labelWrappers)\n            .withHorizontalOrientation(this.getLayoutDirection())\n            .withWrap();\n\n        this.keyManager.updateActiveItem(0);\n\n        // Defer the first call in order to allow for slower browsers to lay out the elements.\n        // This helps in cases where the user lands directly on a page with paginated tabs.\n        typeof requestAnimationFrame === undefined\n            ? realign()\n            : requestAnimationFrame(realign);\n\n        // On dir change or window resize, update the orientation of\n        // the key manager if the direction has changed.\n        merge(dirChange, resize)\n            .pipe(takeUntil(this.destroyed))\n            .subscribe(() => {\n                realign();\n                this.keyManager.withHorizontalOrientation(\n                    this.getLayoutDirection()\n                );\n            });\n\n        // If there is a change in the focus key manager we need to emit the `indexFocused`\n        // event in order to provide a public event that notifies about focus changes. Also we realign\n        // the tabs container by scrolling the new focused tab into the visible section.\n        this.keyManager.change\n            .pipe(takeUntil(this.destroyed))\n            .subscribe((newFocusIndex) => {\n                this.indexFocused.emit(newFocusIndex);\n                this.setTabFocus(newFocusIndex);\n            });\n    }\n\n    ngOnDestroy() {\n        this.destroyed.next();\n        this.destroyed.complete();\n    }\n\n    /**\n     * Callback for when the MutationObserver detects that the content has changed.\n     */\n    onContentChanges() {\n        const textContent = this.elementRef.nativeElement.textContent;\n\n        // We need to diff the text content of the header, because the MutationObserver callback\n        // will fire even if the text content didn't change which is inefficient and is prone\n        // to infinite loops if a poorly constructed expression is passed in.\n\n        if (textContent !== this.currentTextContent) {\n            this.currentTextContent = textContent;\n\n            const zoneCallback = () => {\n                this.updatePagination();\n                this.changeDetectorRef.markForCheck();\n            };\n\n            // The content observer runs outside the `NgZone` by default, which\n            // means that we need to bring the callback back in ourselves.\n            // TODO: Remove null check for `_ngZone` once it's a required parameter.\n            this.ngZone ? this.ngZone.run(zoneCallback) : zoneCallback();\n        }\n    }\n\n    /**\n     * Updating the view whether pagination should be enabled or not\n     *\n     * WARNING: Calling this method can be very costly in terms of performance.  It should be called\n     * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n     * page.\n     */\n    updatePagination() {\n        this.checkPaginationEnabled();\n        this.checkScrollingControls();\n        this.updateTabScrollPosition();\n    }\n\n    /**\n     * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n     * providing a valid index and return true.\n     */\n    isValidIndex(index: number): boolean {\n        if (!this.labelWrappers) {\n            return true;\n        }\n\n        const tab = this.labelWrappers\n            ? this.labelWrappers.toArray()[index]\n            : null;\n\n        return !!tab && !tab.disabled;\n    }\n\n    /**\n     * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n     * scrolling is enabled.\n     */\n    setTabFocus(tabIndex: number) {\n        if (this.showPaginationControls) {\n            this.scrollToLabel(tabIndex);\n        }\n\n        if (this.labelWrappers && this.labelWrappers.length) {\n            this.labelWrappers.toArray()[tabIndex].focus();\n\n            // Do not let the browser manage scrolling to focus the element, this will be handled\n            // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n            // should be the full width minus the offset width.\n            const containerEl = this.tabListContainer.nativeElement;\n            const dir = this.getLayoutDirection();\n\n            if (dir === 'ltr') {\n                containerEl.scrollLeft = 0;\n            } else {\n                containerEl.scrollLeft =\n                    containerEl.scrollWidth - containerEl.offsetWidth;\n            }\n        }\n    }\n\n    /** The layout direction of the containing app. */\n    getLayoutDirection(): Direction {\n        return this.dir && this.dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n\n    /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n    updateTabScrollPosition() {\n        const scrollDistance = this.scrollDistance;\n        const translateX =\n            this.getLayoutDirection() === 'ltr'\n                ? -scrollDistance\n                : scrollDistance;\n\n        // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n        // seems to cause flickering and overflow in Internet Explorer.\n        // See: https://github.com/angular/material2/issues/10276\n        // We round the `transform` here, because transforms with sub-pixel precision cause some\n        // browsers to blur the content of the element.\n        this.tabList.nativeElement.style.transform = `translateX(${Math.round(translateX)}px)`;\n\n        // Setting the `transform` on IE will change the scroll offset of the parent, causing the\n        // position to be thrown off in some cases. We have to reset it ourselves to ensure that\n        // it doesn't get thrown off.\n        this.tabList.nativeElement.scrollLeft = 0;\n    }\n\n    /**\n     * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n     * the end of the list, respectively). The distance to scroll is computed to be a third of the\n     * length of the tab list view window.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    scrollHeader(scrollDir: ScrollDirection) {\n        const viewLength = this.tabListContainer.nativeElement.offsetWidth;\n\n        // Move the scroll distance one-third the length of the tab list's viewport.\n        this.scrollDistance +=\n            ((scrollDir === 'before' ? -1 : 1) * viewLength) / SCROLL_DISTANCE_DELIMITER;\n    }\n\n    /**\n     * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    scrollToLabel(labelIndex: number) {\n        const selectedLabel = this.labelWrappers\n            ? this.labelWrappers.toArray()[labelIndex]\n            : null;\n\n        if (!selectedLabel) {\n            return;\n        }\n\n        // The view length is the visible width of the tab labels.\n        const viewLength = this.tabListContainer.nativeElement.offsetWidth;\n\n        let labelBeforePos: number;\n        let labelAfterPos: number;\n\n        if (this.getLayoutDirection() === 'ltr') {\n            labelBeforePos = selectedLabel.getOffsetLeft();\n            labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n        } else {\n            labelAfterPos =\n                this.tabList.nativeElement.offsetWidth -\n                selectedLabel.getOffsetLeft();\n            labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n        }\n\n        const beforeVisiblePos = this.scrollDistance;\n        const afterVisiblePos = this.scrollDistance + viewLength;\n\n        if (labelBeforePos < beforeVisiblePos) {\n            // Scroll header to move label to the before direction\n            this.scrollDistance -=\n                beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n        } else if (labelAfterPos > afterVisiblePos) {\n            // Scroll header to move label to the after direction\n            this.scrollDistance +=\n                labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n        }\n    }\n\n    /**\n     * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n     * tab list is wider than the size of the header container, then the pagination controls should\n     * be shown.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    checkPaginationEnabled() {\n        const isEnabled =\n            this.tabList.nativeElement.scrollWidth >\n            this.elementRef.nativeElement.offsetWidth;\n\n        if (!isEnabled) {\n            this.scrollDistance = 0;\n        }\n\n        if (isEnabled !== this.showPaginationControls) {\n            this.changeDetectorRef.markForCheck();\n        }\n\n        this.showPaginationControls = isEnabled;\n    }\n\n    /**\n     * Evaluate whether the before and after controls should be enabled or disabled.\n     * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n     * before button. If the header is at the end of the list (scroll distance is equal to the\n     * maximum distance we can scroll), then disable the after button.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    checkScrollingControls() {\n        // Check if the pagination arrows should be activated.\n        this.disableScrollBefore = this.scrollDistance === 0;\n        this.disableScrollAfter =\n            this.scrollDistance === this.getMaxScrollDistance();\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n     * is equal to the difference in width between the tab list container and tab header container.\n     *\n     * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n     * should be called sparingly.\n     */\n    getMaxScrollDistance(): number {\n        const lengthOfTabList = this.tabList.nativeElement.scrollWidth;\n        const viewLength = this.tabListContainer.nativeElement.offsetWidth;\n\n        return lengthOfTabList - viewLength || 0;\n    }\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n    AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef,\n    Component,\n    ComponentFactoryResolver,\n    ComponentRef,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Injector,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    Renderer2,\n    SimpleChanges,\n    TemplateRef,\n    Type,\n    ViewChild,\n    ViewContainerRef, ViewEncapsulation\n} from '@angular/core';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { Overlay, OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { McMeasureScrollbarService } from '@ptsecurity/mosaic/core';\nimport { Observable } from 'rxjs';\n\nimport { McModalControlService } from './modal-control.service';\nimport { McModalRef } from './modal-ref.class';\n// tslint:disable-next-line\nimport ModalUtil from './modal-util';\nimport { IModalButtonOptions, IModalOptions, ModalType, OnClickCallback } from './modal.type';\n\n\n// Duration when perform animations (ms)\nexport const MODAL_ANIMATE_DURATION = 200;\n\ntype AnimationState = 'enter' | 'leave' | null;\n\n@Component({\n    selector: 'mc-modal',\n    templateUrl: './modal.component.html',\n    styleUrls: ['./modal.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        '(keydown)': 'onKeyDown($event)'\n    }\n})\nexport class McModalComponent<T = any, R = any> extends McModalRef<T, R>\n    implements OnInit, OnChanges, AfterViewInit, OnDestroy, IModalOptions {\n\n    // tslint:disable-next-line:no-any\n    @Input() mcModalType: ModalType = 'default';\n    // If not specified, will use <ng-content>\n    @Input() mcContent: string | TemplateRef<{}> | Type<T>;\n    // available when mcContent is a component\n    @Input() mcComponentParams: T;\n    // Default Modal ONLY\n    @Input() mcFooter: string | TemplateRef<{}> | IModalButtonOptions<T>[];\n\n    @Input()\n    get mcVisible() { return this._mcVisible; }\n    set mcVisible(value) { this._mcVisible = value; }\n\n    _mcVisible = false;\n\n    @Output() mcVisibleChange = new EventEmitter<boolean>();\n\n    @Input() mcZIndex: number = 1000;\n    @Input() mcWidth: number | string = 480;\n    @Input() mcWrapClassName: string;\n    @Input() mcClassName: string;\n    @Input() mcStyle: object;\n    @Input() mcTitle: string | TemplateRef<{}>;\n    @Input() mcCloseByESC: boolean = true;\n\n    @Input()\n    get mcClosable() { return this._mcClosable; }\n    set mcClosable(value) { this._mcClosable = value; }\n    _mcClosable = true;\n\n    @Input()\n    get mcMask() { return this._mcMask; }\n    set mcMask(value) { this._mcMask = value; }\n    _mcMask = true;\n\n    @Input()\n    get mcMaskClosable() { return this._mcMaskClosable; }\n    set mcMaskClosable(value) { this._mcMaskClosable = value; }\n    _mcMaskClosable = true;\n\n    @Input() mcMaskStyle: object;\n    @Input() mcBodyStyle: object;\n\n    // Trigger when modal open(visible) after animations\n    @Output() mcAfterOpen = new EventEmitter<void>();\n    // Trigger when modal leave-animation over\n    @Output() mcAfterClose = new EventEmitter<R>();\n\n    // --- Predefined OK & Cancel buttons\n    @Input() mcOkText: string;\n    @Input() mcOkType = 'primary';\n\n    @Input()\n    get mcOkLoading() { return this._mcOkLoading; }\n    set mcOkLoading(value) { this._mcOkLoading = value; }\n    _mcOkLoading = false;\n\n    @Input() @Output() mcOnOk: EventEmitter<T> | OnClickCallback<T> = new EventEmitter<T>();\n    @Input() mcCancelText: string;\n\n    @Input()\n    get mcCancelLoading() { return this._mcCancelLoading; }\n    set mcCancelLoading(value) { this._mcCancelLoading = value; }\n    _mcCancelLoading = false;\n\n    @Input() @Output() mcOnCancel: EventEmitter<T> | OnClickCallback<T> = new EventEmitter<T>();\n\n    @ViewChild('modalContainer') modalContainer: ElementRef;\n    @ViewChild('bodyContainer', { read: ViewContainerRef }) bodyContainer: ViewContainerRef;\n    // Only aim to focus the ok button that needs to be auto focused\n    @ViewChild('autoFocusButtonOk', { read: ElementRef }) autoFocusButtonOk: ElementRef;\n\n    maskAnimationClassMap: object;\n    modalAnimationClassMap: object;\n    // The origin point that animation based on\n    transformOrigin = '0px 0px 0px';\n\n    // Observable alias for mcAfterOpen\n    get afterOpen(): Observable<void> {\n        return this.mcAfterOpen.asObservable();\n    }\n\n    // Observable alias for mcAfterClose\n    get afterClose(): Observable<R> {\n        return this.mcAfterClose.asObservable();\n    }\n\n    get okText(): string {\n        return this.mcOkText;\n    }\n\n    get cancelText(): string {\n        return this.mcCancelText;\n    }\n\n    // Indicate whether this dialog should hidden\n    get hidden(): boolean {\n        return !this.mcVisible && !this.animationState;\n    }\n\n    // Handle the reference when using mcContent as Component\n    private contentComponentRef: ComponentRef<T>;\n    // Current animation state\n    private animationState: AnimationState;\n    private container: HTMLElement | OverlayRef;\n\n    constructor(\n        private overlay: Overlay,\n        private renderer: Renderer2,\n        private cfr: ComponentFactoryResolver,\n        private elementRef: ElementRef,\n        private viewContainer: ViewContainerRef,\n        private mcMeasureScrollbarService: McMeasureScrollbarService,\n        private modalControl: McModalControlService,\n        private changeDetector: ChangeDetectorRef,\n        @Inject(DOCUMENT) private document: any) {\n\n        super();\n    }\n\n    @Input() mcGetContainer: HTMLElement | OverlayRef | (() => HTMLElement | OverlayRef) = () => this.overlay.create();\n\n    ngOnInit() {\n\n        // Create component along without View\n        if (this.isComponent(this.mcContent)) {\n            this.createDynamicComponent(this.mcContent as Type<T>);\n        }\n\n        // Setup default button options\n        if (this.isModalButtons(this.mcFooter)) {\n            this.mcFooter = this.formatModalButtons(this.mcFooter as IModalButtonOptions<T>[]);\n        }\n\n        // Place the modal dom to elsewhere\n        this.container = typeof this.mcGetContainer === 'function' ? this.mcGetContainer() : this.mcGetContainer;\n        if (this.container instanceof HTMLElement) {\n            this.container.appendChild(this.elementRef.nativeElement);\n        } else if (this.container instanceof OverlayRef) {\n            // NOTE: only attach the dom to overlay, the view container is not changed actually\n            this.container.overlayElement.appendChild(this.elementRef.nativeElement);\n        }\n\n        // Register modal when afterOpen/afterClose is stable\n        this.modalControl.registerModal(this);\n    }\n\n    // [NOTE] NOT available when using by service!\n    // Because ngOnChanges never be called when using by service,\n    // here we can't support \"mcContent\"(Component) etc. as inputs that initialized dynamically.\n    // BUT: User also can change \"mcContent\" dynamically to trigger UI changes\n    // (provided you don't use \bComponent that needs initializations)\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.mcVisible) {\n            // Do not trigger animation while initializing\n            this.handleVisibleStateChange(this.mcVisible, !changes.mcVisible.firstChange);\n        }\n    }\n\n    ngAfterViewInit() {\n        // If using Component, it is the time to attach View while bodyContainer is ready\n        if (this.contentComponentRef) {\n            this.bodyContainer.insert(this.contentComponentRef.hostView);\n        }\n\n        if (this.autoFocusButtonOk) {\n            (this.autoFocusButtonOk.nativeElement as HTMLButtonElement).focus();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.container instanceof OverlayRef) {\n            this.container.dispose();\n        }\n    }\n\n    open() {\n        this.changeVisibleFromInside(true);\n    }\n\n    close(result?: R) {\n        this.changeVisibleFromInside(false, result);\n    }\n\n    // Destroy equals Close\n    destroy(result?: R) {\n        this.close(result);\n    }\n\n    triggerOk() {\n        this.onClickOkCancel('ok');\n    }\n\n    triggerCancel() {\n        this.onClickOkCancel('cancel');\n    }\n\n    getInstance(): McModalComponent {\n        return this;\n    }\n\n    getContentComponentRef(): ComponentRef<T> {\n        return this.contentComponentRef;\n    }\n\n    getContentComponent(): T {\n        return this.contentComponentRef && this.contentComponentRef.instance;\n    }\n\n    getElement(): HTMLElement {\n        return this.elementRef && this.elementRef.nativeElement;\n    }\n\n    onClickMask($event: MouseEvent) {\n        if (\n            this.mcMask &&\n            this.mcMaskClosable &&\n            ($event.target as HTMLElement).classList.contains('mc-modal-wrap') &&\n            this.mcVisible\n        ) {\n            this.onClickOkCancel('cancel');\n        }\n    }\n\n    // tslint:disable-next-line\n    isModalType(type: ModalType): boolean {\n        return this.mcModalType === type;\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n\n        if (event.keyCode === ESCAPE && this.container && (this.container instanceof OverlayRef)) {\n\n            this.close();\n            event.preventDefault();\n        }\n    }\n\n    // AoT\n    onClickCloseBtn() {\n        if (this.mcVisible) {\n            this.onClickOkCancel('cancel');\n        }\n    }\n\n    // AoT\n    // tslint:disable-next-line\n    onClickOkCancel(type: 'ok' | 'cancel') {\n        const trigger = { ok: this.mcOnOk, cancel: this.mcOnCancel }[type];\n        const loadingKey = { ok: 'mcOkLoading', cancel: 'mcCancelLoading' }[type];\n\n        if (trigger instanceof EventEmitter) {\n            trigger.emit(this.getContentComponent());\n        } else if (typeof trigger === 'function') {\n\n            const result = trigger(this.getContentComponent());\n            // Users can return \"false\" to prevent closing by default\n            const caseClose = (doClose: boolean | void | {}) => (doClose !== false) && this.close(doClose as R);\n\n            if (isPromise(result)) {\n                this[loadingKey] = true;\n                const handleThen = (doClose) => {\n                    this[loadingKey] = false;\n                    caseClose(doClose);\n                };\n                (result as Promise<void>).then(handleThen).catch(handleThen);\n            } else {\n                caseClose(result);\n            }\n        }\n    }\n\n    // AoT\n    isNonEmptyString(value: {}): boolean {\n        return typeof value === 'string' && value !== '';\n    }\n\n    // AoT\n    isTemplateRef(value: {}): boolean {\n        return value instanceof TemplateRef;\n    }\n\n    // AoT\n    isComponent(value: {}): boolean {\n        return value instanceof Type;\n    }\n\n    // AoT\n    isModalButtons(value: {}): boolean {\n        return Array.isArray(value) && value.length > 0;\n    }\n\n    // Do rest things when visible state changed\n    private handleVisibleStateChange(visible: boolean, animation: boolean = true, closeResult?: R): Promise<any> {\n        // Hide scrollbar at the first time when shown up\n        if (visible) {\n            this.changeBodyOverflow(1);\n        }\n\n        return Promise\n            .resolve(animation && this.animateTo(visible))\n            // Emit open/close event after animations over\n            .then(() => {\n                if (visible) {\n                    this.mcAfterOpen.emit();\n                } else {\n                    this.mcAfterClose.emit(closeResult);\n                    // Show/hide scrollbar when animation is over\n                    this.changeBodyOverflow();\n                }\n            });\n    }\n\n    // Lookup a button's property, if the prop is a function, call & then return the result, otherwise, return itself.\n    // AoT\n    // tslint:disable-next-line\n    getButtonCallableProp(options: IModalButtonOptions<T>, prop: string): {} {\n        const value = options[prop];\n        const args: any[] = [];\n        if (this.contentComponentRef) {\n            args.push(this.contentComponentRef.instance);\n        }\n\n        return typeof value === 'function' ? value.apply(options, args) : value;\n    }\n\n    // On mcFooter's modal button click\n    // AoT\n    // tslint:disable-next-line\n    onButtonClick(button: IModalButtonOptions<T>) {\n        // Call onClick directly\n        const result = this.getButtonCallableProp(button, 'onClick');\n        if (isPromise(result)) {\n            button.loading = true;\n            (result as Promise<{}>).then(() => button.loading = false).catch(() => button.loading = false);\n        }\n    }\n\n    // Change mcVisible from inside\n    private changeVisibleFromInside(visible: boolean, closeResult?: R): Promise<void> {\n        if (this.mcVisible !== visible) {\n            // Change mcVisible value immediately\n            this.mcVisible = visible;\n            this.mcVisibleChange.emit(visible);\n\n            return this.handleVisibleStateChange(visible, true, closeResult);\n        }\n\n        return Promise.resolve();\n    }\n\n    private changeAnimationState(state: AnimationState) {\n        this.animationState = state;\n        if (state) {\n            this.maskAnimationClassMap = {\n                [`fade-${state}`]: true,\n                [`fade-${state}-active`]: true\n            };\n            this.modalAnimationClassMap = {\n                [`zoom-${state}`]: true,\n                [`zoom-${state}-active`]: true\n            };\n        } else {\n            // @ts-ignore\n            this.maskAnimationClassMap = this.modalAnimationClassMap = null;\n        }\n\n        if (this.contentComponentRef) {\n            this.contentComponentRef.changeDetectorRef.markForCheck();\n        } else {\n            this.changeDetector.markForCheck();\n        }\n    }\n\n    private animateTo(isVisible: boolean): Promise<any> {\n        // Figure out the lastest click position when shows up\n        if (isVisible) {\n            // [NOTE] Using timeout due to the document.click event is fired later than visible change,\n            // so if not postponed to next event-loop, we can't get the lastest click position\n            window.setTimeout(() => this.updateTransformOrigin());\n        }\n\n        this.changeAnimationState(isVisible ? 'enter' : 'leave');\n\n        // Return when animation is over\n        return new Promise((resolve) => window.setTimeout(() => {\n            this.changeAnimationState(null);\n            resolve();\n        }, MODAL_ANIMATE_DURATION));\n    }\n\n    private formatModalButtons(buttons: IModalButtonOptions<T>[]): IModalButtonOptions<T>[] {\n        return buttons.map((button) => {\n\n            return {\n                ...{\n                    type: 'default',\n                    size: 'default',\n                    autoLoading: true,\n                    show: true,\n                    loading: false,\n                    disabled: false\n                },\n                ...button\n            };\n        });\n    }\n\n    /**\n     * Create a component dynamically but not attach to any View\n     * (this action will be executed when bodyContainer is ready)\n     * @param component Component class\n     */\n    private createDynamicComponent(component: Type<T>) {\n        const factory = this.cfr.resolveComponentFactory(component);\n        const childInjector = Injector.create({\n            providers: [{provide: McModalRef, useValue: this}],\n            parent: this.viewContainer.parentInjector\n        });\n\n        this.contentComponentRef = factory.create(childInjector);\n\n        if (this.mcComponentParams) {\n            Object.assign(this.contentComponentRef.instance, this.mcComponentParams);\n        }\n\n        // Do the first change detection immediately\n        // (or we do detection at ngAfterViewInit, multi-changes error will be thrown)\n        this.contentComponentRef.changeDetectorRef.detectChanges();\n\n\n    }\n\n    // Update transform-origin to the last click position on document\n    private updateTransformOrigin() {\n        const modalElement = this.modalContainer.nativeElement as HTMLElement;\n        const lastPosition = ModalUtil.getLastClickPosition();\n\n        if (lastPosition) {\n            // tslint:disable-next-line\n            this.transformOrigin = `${lastPosition.x - modalElement.offsetLeft}px ${lastPosition.y - modalElement.offsetTop}px 0px`;\n        }\n    }\n\n    /**\n     * Take care of the body's overflow to decide the existense of scrollbar\n     * @param plusNum The number that the openModals.length will increase soon\n     */\n    private changeBodyOverflow(plusNum: number = 0) {\n        const openModals = this.modalControl.openModals;\n\n        if (openModals.length + plusNum > 0) {\n            // tslint:disable-next-line\n            this.renderer.setStyle(this.document.body, 'padding-right', `${this.mcMeasureScrollbarService.scrollBarWidth}px`);\n            this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n        } else {\n            this.renderer.removeStyle(this.document.body, 'padding-right');\n            this.renderer.removeStyle(this.document.body, 'overflow');\n        }\n    }\n}\n\n////////////\n\nfunction isPromise(obj: {} | void): boolean {\n    // tslint:disable-next-line\n    return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof (obj as Promise<{}>).then === 'function' && typeof (obj as Promise<{}>).catch === 'function';\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n\n@Pipe({\n    name: 'toCssUnit'\n})\nexport class CssUnitPipe implements PipeTransform {\n    transform(value: number | string, defaultUnit: string = 'px'): string {\n        const formatted = +value;\n\n        return isNaN(formatted) ? `${value}` : `${formatted}${defaultUnit}`;\n    }\n}\n","import { ComponentRef, Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { Overlay, OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal } from '@ptsecurity/cdk/portal';\n\nimport { McModalControlService } from './modal-control.service';\nimport { McModalRef } from './modal-ref.class';\nimport { McModalComponent } from './modal.component';\nimport { ConfirmType, IModalOptions, IModalOptionsForService } from './modal.type';\n\n\n// A builder used for managing service creating modals\nexport class ModalBuilderForService {\n\n    // Modal ComponentRef, \"null\" means it has been destroyed\n    private modalRef: ComponentRef<McModalComponent> | null;\n    private overlayRef: OverlayRef;\n\n    constructor(private overlay: Overlay, options: IModalOptionsForService = {}) {\n        this.createModal();\n\n        if (!('mcGetContainer' in options)) {\n            options.mcGetContainer = undefined;\n        }\n\n        this.changeProps(options);\n        this.modalRef!.instance.open();\n        this.modalRef!.instance.mcAfterClose.subscribe(() => this.destroyModal());\n\n        this.overlayRef.keydownEvents()\n            // @ts-ignore\n            .pipe(filter((event: KeyboardEvent) => {\n                return event.keyCode === ESCAPE && options.mcCloseByESC;\n            }))\n            .subscribe(() => this.modalRef!.instance.close());\n    }\n\n    getInstance(): McModalComponent | null {\n        return this.modalRef && this.modalRef.instance;\n    }\n\n    destroyModal(): void {\n        if (this.modalRef) {\n            this.overlayRef.dispose();\n            this.modalRef = null;\n        }\n    }\n\n    private changeProps(options: IModalOptions): void {\n        if (this.modalRef) {\n            // here not limit user's inputs at runtime\n            Object.assign(this.modalRef.instance, options);\n        }\n    }\n\n    // Create component to ApplicationRef\n    private createModal(): void {\n        this.overlayRef = this.overlay.create();\n        this.modalRef = this.overlayRef.attach(new ComponentPortal(McModalComponent));\n    }\n}\n\n@Injectable()\nexport class McModalService {\n    // Track of the current close modals (we assume invisible is close this time)\n    get openModals(): McModalRef[] {\n        return this.modalControl.openModals;\n    }\n\n    get afterAllClose(): Observable<void> {\n        return this.modalControl.afterAllClose.asObservable();\n    }\n\n    constructor(\n        private overlay: Overlay,\n        private modalControl: McModalControlService) {\n    }\n\n    // Closes all of the currently-open dialogs\n    closeAll(): void {\n        this.modalControl.closeAll();\n    }\n\n    create<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n\n        if (typeof options.mcOnCancel !== 'function') {\n            // Leave a empty function to close this modal by default\n            // tslint:disable-next-line\n            options.mcOnCancel = () => {};\n        }\n\n        if (!('mcCloseByESC' in options)) {\n            options.mcCloseByESC = true;\n        }\n\n\n        if (!('mcWidth' in options)) {\n            // tslint:disable-next-line\n            options.mcWidth = 480;\n        }\n\n        return new ModalBuilderForService(this.overlay, options).getInstance()!;\n    }\n\n    confirm<T>(options: IModalOptionsForService<T> = {}, confirmType: ConfirmType = 'confirm'): McModalRef<T> {\n        if ('mcFooter' in options) {\n            console.warn(`The Confirm-Modal doesn't support \"mcFooter\", this property will be ignored.`);\n        }\n\n        // NOTE: only support function currently by calling confirm()\n        if (typeof options.mcOnOk !== 'function') {\n            // Leave a empty function to close this modal by default\n            // tslint:disable-next-line\n            options.mcOnOk = () => {};\n        }\n\n        options.mcModalType = 'confirm';\n        options.mcClassName = `mc-confirm mc-confirm-${confirmType} ${options.mcClassName || ''}`;\n        options.mcMaskClosable = false;\n\n        return this.create(options);\n    }\n\n    success<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n        return this.simpleConfirm(options, 'success');\n    }\n\n    delete<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n        return this.simpleConfirm(options, 'warn');\n    }\n\n    private simpleConfirm<T>(options: IModalOptionsForService<T> = {}, confirmType: ConfirmType): McModalRef<T> {\n        // Remove the Cancel button if the user not specify a Cancel button\n        if (!('mcCancelText' in options)) {\n            // @ts-ignore\n            options.mcCancelText = null;\n        }\n\n        return this.confirm(options, confirmType);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { McButtonModule } from '@ptsecurity/mosaic/button';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { CssUnitPipe } from './css-unit.pipe';\nimport { McModalControlService } from './modal-control.service';\nimport { McModalComponent } from './modal.component';\nimport { McModalService } from './modal.service';\n\n\n@NgModule({\n    imports: [ CommonModule, OverlayModule, McButtonModule, McIconModule ],\n    exports: [ McModalComponent ],\n    declarations: [ McModalComponent, CssUnitPipe ],\n    entryComponents: [ McModalComponent ],\n    providers: [ McModalControlService, McModalService ]\n})\nexport class McModalModule { }\n","import { fromEvent, Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nimport {\n    AfterViewInit,\n    Component, Directive,\n    ElementRef,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    ViewEncapsulation,\n    ContentChild,\n    TemplateRef,\n    ChangeDetectorRef,\n    ChangeDetectionStrategy,\n    ViewChild\n} from '@angular/core';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { SPACE } from '@ptsecurity/cdk/keycodes';\nimport { Platform } from '@ptsecurity/cdk/platform';\nimport { CanDisable, CanDisableCtor, mixinDisabled } from '@ptsecurity/mosaic/core';\n\n\nconst COLLAPSED_CLASS: string = 'mc-navbar-collapsed-title';\nconst MC_ICON = 'mc-icon';\nconst MC_NAVBAR = 'mc-navbar';\nconst MC_NAVBAR_CONTAINER = 'mc-navbar-container';\nconst MC_NAVBAR_ITEM = 'mc-navbar-item';\nconst MC_NAVBAR_BRAND = 'mc-navbar-brand';\nconst MC_NAVBAR_TITLE = 'mc-navbar-title';\nconst MC_NAVBAR_LOGO = 'mc-navbar-logo';\n\nexport type McNavbarContainerPositionType = 'left' | 'right';\n\nexport interface IMcNavbarDropdownItem {\n    link?: string;\n    text: string;\n}\n\n@Directive({\n    selector: MC_NAVBAR_LOGO,\n    host: {\n        class: MC_NAVBAR_LOGO\n    }\n})\nexport class McNavbarLogo {}\n\n@Directive({\n    selector: MC_NAVBAR_BRAND,\n    host: {\n        class: MC_NAVBAR_BRAND\n    }\n})\nexport class McNavbarBrand {}\n\n@Directive({\n    selector: MC_NAVBAR_TITLE,\n    host: {\n        class: MC_NAVBAR_TITLE\n    }\n})\nexport class McNavbarTitle {}\n\nexport class McNavbarItemBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McNavbarMixinBase: CanDisableCtor & typeof McNavbarItemBase = mixinDisabled(McNavbarItemBase);\n\n@Component({\n    selector: MC_NAVBAR_ITEM,\n    template: `\n        <a\n            [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\n            (click)=\"handleClickByItem()\"\n            (keydown)=\"handleKeydown($event)\"\n            class=\"mc-navbar-item\"\n        >\n            <ng-content></ng-content>\n            <i *ngIf=\"hasDropdownContent\" mc-icon=\"mc-angle-down-M_16\"></i>\n        </a>\n        <ul\n            #dropdownContent\n            *ngIf=\"hasDropdownContent\"\n            [ngClass]=\"{ 'is-collapsed': isCollapsed }\"\n            class=\"mc-navbar-dropdown\"\n        >\n            <li\n                *ngFor=\"let item of dropdownItems\"\n                (click)=\"handleClickByDropdownItem()\"\n                class=\"mc-navbar-dropdown-item\"\n            >\n                <ng-container *ngIf=\"dropdownItemTmpl\">\n                    <ng-container *ngTemplateOutlet=\"dropdownItemTmpl; context: { $implicit: item }\"></ng-container>\n                </ng-container>\n                <a\n                    *ngIf=\"!dropdownItemTmpl\"\n                    [attr.href]=\"item.link\"\n                    [ngClass]=\"{ 'is-active': isActiveDropdownLink(item.link) }\"\n                    class=\"mc-navbar-dropdown-link\"\n                >{{ item.text }}</a>\n            </li>\n        </ul>\n    `,\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': '-1'\n    }\n})\nexport class McNavbarItem extends _McNavbarMixinBase implements OnInit, AfterViewInit, OnDestroy, CanDisable {\n\n    @Input()\n    tabIndex: number = 0;\n\n    @Input()\n    dropdownItems: IMcNavbarDropdownItem[] = [];\n\n    @Input()\n    set collapsedTitle(value: string) {\n        this.elementRef.nativeElement.setAttribute('computedTitle', encodeURI(value));\n    }\n\n    @ContentChild('dropdownItemTmpl', { read: TemplateRef })\n    dropdownItemTmpl: TemplateRef<IMcNavbarDropdownItem>;\n\n    @ViewChild('dropdownContent', { read: ElementRef })\n    dropdownContent: ElementRef;\n\n    get hasDropdownContent() {\n        return this.dropdownItems.length > 0;\n    }\n\n    isCollapsed: boolean = true;\n\n    private _subscription: Subscription = new Subscription();\n    private _focusMonitor$: Observable<FocusOrigin>;\n\n    private get _dropdownElements(): HTMLElement[] {\n        return this.dropdownContent ? this.dropdownContent.nativeElement.querySelectorAll('li > *') : [];\n    }\n\n    constructor(\n        public  elementRef: ElementRef,\n        private _focusMonitor: FocusMonitor,\n        private _platform: Platform,\n        private _cdRef: ChangeDetectorRef\n    ) {\n        super(elementRef);\n    }\n\n    ngOnInit() {\n        this.denyClickIfDisabled();\n\n        this._focusMonitor$ = this._focusMonitor.monitor(this.elementRef.nativeElement, true);\n\n        if (this.hasDropdownContent) {\n            this.listenClickOutside();\n        }\n    }\n\n    ngAfterViewInit() {\n        if (!this.hasDropdownContent) {\n            return;\n        }\n\n        this.startListenFocusDropdownItems();\n    }\n\n    ngOnDestroy() {\n        this._subscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n        this.stopListenFocusDropdownItems();\n    }\n\n    isActiveDropdownLink(link: string): boolean {\n        if (!this._platform.isBrowser) {\n            return false;\n        }\n\n        return window.location.href.indexOf(link) >= 0;\n    }\n\n    handleClickByItem() {\n        this.toggleDropdown();\n    }\n\n    handleKeydown($event: KeyboardEvent) {\n        const isNavbarItem = ($event.target as HTMLElement).classList.contains(MC_NAVBAR_ITEM);\n\n        // tslint:disable-next-line\n        if (this.hasDropdownContent && $event.keyCode === SPACE && isNavbarItem) {\n            this.toggleDropdown();\n        }\n    }\n\n    handleClickByDropdownItem() {\n        this.forceCloseDropdown();\n    }\n\n    private listenClickOutside() {\n        this._subscription.add(\n            this._focusMonitor$.subscribe((origin) => {\n                if (origin === null) {\n                    this.forceCloseDropdown();\n                }\n            })\n        );\n    }\n\n    private toggleDropdown() {\n        this.isCollapsed = !this.isCollapsed;\n    }\n\n    private forceCloseDropdown() {\n        this.isCollapsed = true;\n        this._cdRef.detectChanges();\n    }\n\n    private startListenFocusDropdownItems() {\n        this._dropdownElements.forEach((el) => {\n            this._focusMonitor.monitor(el, true);\n        });\n    }\n\n    private stopListenFocusDropdownItems() {\n        this._dropdownElements.forEach((el) => {\n            this._focusMonitor.stopMonitoring(el);\n        });\n    }\n\n    // This method is required due to angular 2 issue https://github.com/angular/angular/issues/11200\n    private denyClickIfDisabled() {\n        const events: Event[] = this.elementRef.nativeElement.eventListeners('click');\n\n        events.forEach((event) => this.elementRef.nativeElement.removeEventListener('click', event));\n\n        this.elementRef.nativeElement.addEventListener('click', (event: MouseEvent) => {\n            if (this.elementRef.nativeElement.hasAttribute('disabled')) {\n                event.stopImmediatePropagation();\n            }\n        }, true);\n\n        events.forEach((event) => this.elementRef.nativeElement.addEventListener('click', event));\n    }\n}\n\n@Directive({\n    selector: MC_NAVBAR_CONTAINER\n})\nexport class McNavbarContainer {\n    @Input()\n    position: McNavbarContainerPositionType = 'left';\n\n    @HostBinding('class')\n    get cssClasses(): string {\n        return this.position === 'left' ? 'mc-navbar-left' : 'mc-navbar-right';\n    }\n}\n\nclass CollapsibleItem {\n    private _collapsed: boolean = false;\n\n    constructor(\n        public element: HTMLElement,\n        public width: number\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        this._collapsed = collapsed;\n\n        this.updateCollapsedClass();\n    }\n\n    private updateCollapsedClass() {\n        if (this._collapsed) {\n            this.element.classList.add(COLLAPSED_CLASS);\n        } else {\n            this.element.classList.remove(COLLAPSED_CLASS);\n        }\n\n    }\n}\n\nclass CachedItemWidth {\n\n    get canCollapse(): boolean {\n        return this.itemsForCollapse.length > 0;\n    }\n\n    private _collapsedItemsWidth: number;\n\n    get collapsedItemsWidth(): number {\n        if (this._collapsedItemsWidth !== undefined) {\n            return this._collapsedItemsWidth;\n        }\n\n        this.calculateAndCacheCollapsedItemsWidth();\n\n        return this._collapsedItemsWidth;\n    }\n\n    constructor(\n        public element: HTMLElement,\n        public width: number,\n        public itemsForCollapse: CollapsibleItem[] = []\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        if (this.itemsForCollapse.length > 0) {\n            this.updateTitle(collapsed);\n        }\n\n        this.itemsForCollapse.forEach((item) => item.processCollapsed(collapsed));\n    }\n\n    private calculateAndCacheCollapsedItemsWidth() {\n        this._collapsedItemsWidth = this.itemsForCollapse\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getTitle(): string {\n        const computedTitle = this.element.getAttribute('computedTitle');\n\n        return computedTitle\n            ? decodeURI(computedTitle)\n            : (this.itemsForCollapse.length > 0 ? this.itemsForCollapse[0].element.innerText : '');\n    }\n\n    private updateTitle(collapsed: boolean) {\n        if (collapsed) {\n            this.element.setAttribute('title', this.getTitle());\n        } else {\n            this.element.removeAttribute('title');\n        }\n    }\n}\n\n\n@Component({\n    selector: MC_NAVBAR,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    template: `\n        <nav class=\"mc-navbar\">\n            <ng-content select=\"[${MC_NAVBAR_CONTAINER}],${MC_NAVBAR_CONTAINER}\"></ng-content>\n        </nav>\n    `,\n    styleUrls: ['./navbar.css'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class McNavbar implements AfterViewInit, OnDestroy {\n\n    private readonly forceRecalculateItemsWidth: boolean = false;\n    private readonly resizeDebounceInterval: number = 100;\n    private readonly firstLevelElement: string = MC_NAVBAR_CONTAINER;\n    private readonly secondLevelElements: string[] = [\n        MC_NAVBAR_ITEM,\n        MC_NAVBAR_BRAND,\n        MC_NAVBAR_TITLE\n    ];\n\n    private _totalItemsWidths: number;\n    private _itemsWidths: CachedItemWidth[];\n\n    private get maxAllowedWidth(): number {\n        return this._elementRef.nativeElement.querySelector('nav').getBoundingClientRect().width;\n    }\n\n    private get itemsWidths(): CachedItemWidth[] {\n        if (this._itemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._itemsWidths;\n        }\n\n        this.calculateAndCacheItemsWidth();\n\n        return this._itemsWidths;\n    }\n\n    private get totalItemsWidth(): number {\n        if (this._totalItemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._totalItemsWidths;\n        }\n\n        this.calculateAndCacheTotalItemsWidth();\n\n        return this._totalItemsWidths;\n    }\n\n    private _resizeSubscription: Subscription;\n\n    constructor(\n        private _elementRef: ElementRef\n    ) {\n        const resizeObserver = fromEvent(window, 'resize')\n            .pipe(debounceTime(this.resizeDebounceInterval));\n\n        this._resizeSubscription = resizeObserver.subscribe(this.updateCollapsed.bind(this));\n    }\n\n    updateCollapsed(): void {\n        let collapseDelta = this.totalItemsWidth - this.maxAllowedWidth;\n\n        for (let i = this.itemsWidths.length - 1; i >= 0; i--) {\n            const item = this.itemsWidths[i];\n\n            if (!item.canCollapse) {\n                continue;\n            }\n\n            item.processCollapsed(collapseDelta > 0);\n            collapseDelta -= item.collapsedItemsWidth;\n        }\n    }\n\n    ngAfterViewInit(): void {\n        // Note: this wait is required for loading and rendering fonts for icons;\n        // unfortunately we cannot control font rendering\n        setTimeout(() => this.updateCollapsed(), 0);\n    }\n\n    ngOnDestroy() {\n        this._resizeSubscription.unsubscribe();\n    }\n\n    private calculateAndCacheTotalItemsWidth() {\n        this._totalItemsWidths = this.itemsWidths\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getOuterElementWidth(element: HTMLElement): number {\n        const baseWidth  = element.getBoundingClientRect().width;\n        const marginRight = parseInt(getComputedStyle(element).getPropertyValue('margin-right'));\n        const marginLeft = parseInt(getComputedStyle(element).getPropertyValue('margin-left'));\n\n        return baseWidth + marginRight + marginLeft;\n    }\n\n    private calculateAndCacheItemsWidth() {\n        const allItemsSelector = this.secondLevelElements\n            .map((e: string) => `${this.firstLevelElement}>${e}`);\n        const allItems: HTMLElement[] = Array.from(this._elementRef.nativeElement.querySelectorAll(allItemsSelector));\n\n        this._itemsWidths = allItems\n            .map((el) => new CachedItemWidth(el, this.getOuterElementWidth(el), this.getItemsForCollapse(el)));\n    }\n\n    private getItemsForCollapse(element: HTMLElement): CollapsibleItem[] {\n        const icon = element.querySelector(`[${MC_ICON}],${MC_NAVBAR_LOGO},[${MC_NAVBAR_LOGO}]`);\n\n        if (!icon) {\n            return [];\n        }\n\n        return Array.from(element.querySelectorAll(MC_NAVBAR_TITLE))\n            .map((el) => new CollapsibleItem(<HTMLElement> el, el.getBoundingClientRect().width));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport {\n    McNavbar,\n    McNavbarContainer,\n    McNavbarItem,\n    McNavbarTitle,\n    McNavbarBrand,\n    McNavbarLogo\n} from './navbar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        McIconModule\n    ],\n    exports: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ],\n    declarations: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ]\n})\nexport class McNavbarModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, CanColorCtor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressBarMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressBarBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressBarMixinBase:\n    CanColorCtor &\n    typeof McProgressBarBase =\n        mixinColor(McProgressBarBase);\n\n@Component({\n    selector: 'mc-progress-bar',\n    templateUrl: './progress-bar.component.html',\n    styleUrls: ['./progress-bar.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-bar',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressBar extends _McProgressBarMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-bar-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressBarMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McProgressBar\n} from './progress-bar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressBar\n    ],\n    declarations: [\n        McProgressBar\n    ]\n})\nexport class McProgressBarModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, CanColorCtor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressSpinnerBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressSpinnerMixinBase:\n    CanColorCtor &\n    typeof McProgressSpinnerBase =\n        mixinColor(McProgressSpinnerBase);\n\nconst MAX_DASH_ARRAY = 273;\n\n@Component({\n    selector: 'mc-progress-spinner',\n    templateUrl: './progress-spinner.component.html',\n    styleUrls: ['./progress-spinner.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-spinner',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressSpinner extends _McProgressSpinnerMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-spinner-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressSpinnerMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n\n    get dashOffsetPercent(): string {\n        return `${MAX_DASH_ARRAY - this.percentage * MAX_DASH_ARRAY}%`;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McProgressSpinner } from './progress-spinner.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressSpinner\n    ],\n    declarations: [\n        McProgressSpinner\n    ]\n})\nexport class McProgressSpinnerModule {}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef,\n    Input, OnDestroy, OnInit, Optional, Output, QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { UniqueSelectionDispatcher } from '@ptsecurity/cdk/collections';\n\nimport {\n    CanColor, CanColorCtor,\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/** Change event object emitted by McRadio. */\nexport class McRadioChange {\n    constructor(\n        /** The McRadioButton that emits the change event. */\n        public source: McRadioButton,\n        /** The value of the McRadioButton. */\n        public value: any) {}\n}\n\n// Boilerplate for applying mixins to McRadioGroup.\n/** @docs-private */\nexport class McRadioGroupBase {}\nexport const _McRadioGroupMixinBase: CanDisableCtor & typeof McRadioGroupBase = mixinDisabled(McRadioGroupBase);\n\n/**\n * Provider Expression that allows mc-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McRadioGroup),\n    multi: true\n};\n\n@Directive({\n    selector: 'mc-radio-group',\n    exportAs: 'mcRadioGroup',\n    providers: [MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n    host: {\n        role: 'radiogroup',\n        class: 'mc-radio-group'\n    },\n    inputs: ['disabled']\n})\nexport class McRadioGroup extends _McRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    @Input()\n    get name(): string { return this._name; }\n    set name(value: string) {\n        this._name = value;\n        this.updateRadioButtonNames();\n    }\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this.markRadiosForCheck();\n    }\n\n    /** Value of the radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n\n            this.updateSelectedRadioFromValue();\n            this.checkSelectedRadioButton();\n        }\n    }\n\n    /** Whether the radio button is selected. */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: McRadioButton | null) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this.checkSelectedRadioButton();\n    }\n\n    /** Whether the radio group is disabled */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /** Whether the radio group is required */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** Child radio buttons. */\n    @ContentChildren(forwardRef(() => McRadioButton), { descendants: true })\n    _radios: QueryList<McRadioButton>;\n\n    /**\n     * Selected value for group. Should equal the value of the selected radio button if there *is*\n     * a corresponding radio button with a matching value. If there is *not* such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    private _value: any = null;\n\n    /** The HTML name attribute applied to radio buttons in this group. */\n    private _name: string = `mc-radio-group-${nextUniqueId++}`;\n\n    /** The currently selected radio button. Should match value. */\n    private _selected: McRadioButton | null = null;\n\n    /** Whether the `value` has been set to its initial value. */\n    private _isInitialized: boolean = false;\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    private _labelPosition: 'before' | 'after' = 'after';\n\n    /** Whether the radio group is disabled. */\n    private _disabled: boolean = false;\n\n    /** Whether the radio group is required. */\n    private _required: boolean = false;\n\n    constructor(\n        private readonly _changeDetector: ChangeDetectorRef\n    ) {\n        super();\n    }\n\n    /** The method to be called in order to update ngModel */\n    // tslint:disable-next-line\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @docs-private\n     */\n    // tslint:disable-next-line\n    onTouched: () => any = () => {};\n\n    checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on McRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the McRadioGroup.\n        this._isInitialized = true;\n    }\n\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        if (this._isInitialized) {\n            this.change.emit(new McRadioChange(this._selected!, this._value));\n        }\n    }\n\n    markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach((radio) => radio.markForCheck());\n        }\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n\n    private updateRadioButtonNames(): void {\n        if (this._radios) {\n            this._radios.forEach((radio) => {\n                radio.name = this.name;\n            });\n        }\n    }\n\n    /** Updates the `selected` radio button from the internal _value state. */\n    private updateSelectedRadioFromValue(): void {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n        if (this._radios != null && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach((radio) => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n}\n\n\n// Boilerplate for applying mixins to McRadioButton.\n/** @docs-private */\nexport class McRadioButtonBase {\n    // Since the disabled property is manually defined for the McRadioButton and isn't set up in\n    // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n    // defined to properly work.\n    disabled: boolean;\n\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McRadioButtonMixinBase:\n    CanColorCtor &\n    HasTabIndexCtor &\n    typeof McRadioButtonBase =\n        mixinColor(mixinTabIndex(McRadioButtonBase));\n\n\n@Component({\n    selector: 'mc-radio-button',\n    templateUrl: 'radio.component.html',\n    styleUrls: ['radio.css'],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    exportAs: 'mcRadioButton',\n    host: {\n        class: 'mc-radio-button',\n        '[attr.id]': 'id',\n        '[class.mc-checked]': 'checked',\n        '[class.mc-disabled]': 'disabled',\n        '(focus)': '_inputElement.nativeElement.focus()'\n    }\n})\nexport class McRadioButton extends _McRadioButtonMixinBase\n    implements OnInit, OnDestroy, CanColor, HasTabIndex {\n\n    private readonly _uniqueId: string = `mc-radio-${++nextUniqueId}`;\n\n    /* tslint:disable:member-ordering */\n\n    /** The unique ID for the radio button. */\n    @Input() id: string = this._uniqueId;\n\n    /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n    @Input() name: string;\n\n    /** Used to set the 'aria-label' attribute on the underlying input element. */\n    @Input('aria-label') ariaLabel: string;\n\n    /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n    @Input('aria-labelledby') ariaLabelledby: string;\n\n    /** The 'aria-describedby' attribute is read after the element's label and field type. */\n    @Input('aria-describedby') ariaDescribedby: string;\n\n    /** Whether this radio button is checked. */\n    @Input()\n    get checked(): boolean { return this._checked; }\n    set checked(value: boolean) {\n        const newCheckedState = toBoolean(value);\n\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** The value of this radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(value: any) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup != null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n\n    /** Whether the radio button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n    }\n    set disabled(value: boolean) {\n        const newDisabledState = toBoolean(value);\n\n        if (this._disabled !== newDisabledState) {\n\n            this._disabled = newDisabledState;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** Whether the radio button is required. */\n    @Input()\n    get required(): boolean {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    private _labelPosition: 'before' | 'after';\n\n    /** The native `<input type=radio>` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** The parent radio group. May or may not be present. */\n    radioGroup: McRadioGroup;\n\n    @Input()\n    isFocused: boolean = false;\n\n    /** ID of the native input element inside `<mc-radio-button>` */\n    get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n    /** Whether this radio is checked. */\n    private _checked: boolean = false;\n\n    /** Whether this radio is disabled. */\n    private _disabled: boolean;\n\n    /** Whether this radio is required. */\n    private _required: boolean;\n\n    /** Value assigned to this radio. */\n    private _value: any = null;\n\n    /** Unregister function for _radioDispatcher */\n    // tslint:disable-next-line\n    private readonly removeUniqueSelectionListener: () => void = () => {};\n\n    constructor(\n        @Optional() radioGroup: McRadioGroup,\n        elementRef: ElementRef,\n        private readonly _changeDetector: ChangeDetectorRef,\n        private readonly _radioDispatcher: UniqueSelectionDispatcher\n    ) {\n\n        super(elementRef);\n\n        this.radioGroup = radioGroup;\n\n        this.removeUniqueSelectionListener =\n            _radioDispatcher.listen((id: string, name: string) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n\n    ngOnDestroy() {\n        this.removeUniqueSelectionListener();\n    }\n\n    /** Focuses the radio button. */\n    // tslint:disable-next-line\n    focus(): void {}\n\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n\n    onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n\n    onInputChange(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this.emitChangeEvent();\n\n        if (this.radioGroup) {\n            this.radioGroup.controlValueAccessorChangeFn(this.value);\n            this.radioGroup.touch();\n            if (groupValueChanged) {\n                this.radioGroup.emitChangeEvent();\n            }\n        }\n    }\n\n    /** Dispatch change event with current value. */\n    private emitChangeEvent(): void {\n        this.change.emit(new McRadioChange(this, this._value));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McRadioButton, McRadioGroup } from './radio.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule],\n    exports: [McRadioGroup, McRadioButton],\n    declarations: [McRadioGroup, McRadioButton]\n})\nexport class McRadioModule {\n}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    Output,\n    QueryList,\n    ViewEncapsulation,\n    ChangeDetectorRef,\n    Inject,\n    OnDestroy,\n    OnInit,\n    ViewChild\n} from '@angular/core';\n\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { Subscription } from 'rxjs';\n\nimport { FocusKeyManager, IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { END, ENTER, HOME, PAGE_DOWN, PAGE_UP, SPACE } from '@ptsecurity/cdk/keycodes';\n\nimport {\n    McLine,\n    McLineSetter,\n    CanDisable,\n    mixinDisabled,\n    toBoolean, CanDisableCtor\n} from '@ptsecurity/mosaic/core';\n\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n    exportAs: 'mcListOption',\n    selector: 'mc-list-option',\n    host: {\n        tabindex: '-1',\n\n        class: 'mc-list-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': '_hasFocus',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()',\n        '(click)': '_handleClick()'\n    },\n    templateUrl: 'list-option.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListOption implements AfterContentInit, OnDestroy, OnInit, IFocusableOption {\n    _hasFocus: boolean = false;\n\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    @ViewChild('text') _text: ElementRef;\n\n    // Whether the label should appear before or after the checkbox. Defaults to 'after'\n    @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n    @Input() value: any;\n\n    @Input()\n    get disabled() {\n        return this._disabled || (this.listSelection && this.listSelection.disabled);\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    @Input()\n    get selected(): boolean {\n        return this.listSelection.selectedOptions && this.listSelection.selectedOptions.isSelected(this) || false;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            this.listSelection._reportValueChange();\n        }\n    }\n\n    private _lineSetter: McLineSetter;\n    private _selected = false;\n    private _disabled = false;\n\n    constructor(\n        private _element: ElementRef,\n        private _changeDetector: ChangeDetectorRef,\n        @Inject(forwardRef(() => McListSelection))\n        public listSelection: McListSelection\n    ) {}\n\n    ngOnInit() {\n        if (this._selected) {\n            // List options that are selected at initialization can't be reported properly to the form\n            // control. This is because it takes some time until the selection-list knows about all\n            // available options. Also it can happen that the ControlValueAccessor has an initial value\n            // that should be used instead. Deferring the value change report to the next tick ensures\n            // that the form control value is not being overwritten.\n            const wasSelected = this._selected;\n\n            Promise.resolve().then(() => {\n                if (this._selected || wasSelected) {\n                    this.selected = true;\n                    this._changeDetector.markForCheck();\n                }\n            });\n        }\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    ngOnDestroy(): void {\n        if (this.selected) {\n            // We have to delay this until the next tick in order\n            // to avoid changed after checked errors.\n            Promise.resolve().then(() => this.selected = false);\n        }\n\n        this.listSelection._removeOptionFromList(this);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    focus(): void {\n        this._element.nativeElement.focus();\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    getLabel() {\n        return this._text ? this._text.nativeElement.textContent : '';\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.listSelection.selectedOptions) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.listSelection.selectedOptions.select(this);\n        } else {\n            this.listSelection.selectedOptions.deselect(this);\n        }\n\n        this._changeDetector.markForCheck();\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    _handleClick() {\n        if (this.disabled) { return; }\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    _handleFocus() {\n        if (this.disabled || this._hasFocus) { return; }\n\n        this._hasFocus = true;\n    }\n\n    _handleBlur() {\n        this._hasFocus = false;\n\n        this.listSelection._onTouched();\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n\n\nexport const MC_SELECTION_LIST_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McListSelection),\n    multi: true\n};\n\n// Change event that is being fired whenever the selected state of an option changes. */\nexport class McListSelectionChange {\n    constructor(\n        // Reference to the selection list that emitted the event.\n        public source: McListSelection,\n        // Reference to the option that has been changed.\n        public option: McListOption\n    ) {}\n}\n\n\nexport class McListSelectionBase {}\n\nexport const _McListSelectionMixinBase: CanDisableCtor & typeof McListSelectionBase\n    = mixinDisabled(McListSelectionBase);\n\n@Component({\n    exportAs: 'mcListSelection',\n    selector: 'mc-list-selection',\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'tabIndex'],\n    host: {\n        class: 'mc-list-selection',\n        '[tabIndex]': 'tabIndex',\n        '(focus)': 'focus()',\n        '(blur)': '_onTouched()',\n        '(keydown)': '_onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    providers: [MC_SELECTION_LIST_VALUE_ACCESSOR],\n    preserveWhitespaces: false\n})\nexport class McListSelection extends _McListSelectionMixinBase implements\n    IFocusableOption, CanDisable, AfterContentInit, ControlValueAccessor {\n\n    _keyManager: FocusKeyManager<McListOption>;\n\n    // The option components contained within this selection-list.\n    @ContentChildren(McListOption) options: QueryList<McListOption>;\n\n    tabIndex: number;\n\n    autoSelect: boolean;\n    noUnselect: boolean;\n    multiple: boolean;\n\n    // todo temporary solution\n    withShift: boolean;\n    withCtrl: boolean;\n\n    @Input() horizontal: boolean = false;\n\n    // Emits a change event whenever the selected state of an option changes.\n    @Output() readonly selectionChange: EventEmitter<McListSelectionChange> = new EventEmitter<McListSelectionChange>();\n\n    selectedOptions: SelectionModel<McListOption>;\n\n    // Used for storing the values that were assigned before the options were initialized.\n    private _tempValues: string[] | null;\n\n    private _modelChanges = Subscription.EMPTY;\n\n    constructor(\n        private _element: ElementRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string,\n        @Attribute('multiple') multiple: string\n    ) {\n        super();\n\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.multiple = multiple === null ? true : toBoolean(multiple);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.selectedOptions = new SelectionModel<McListOption>(this.multiple);\n    }\n\n    ngAfterContentInit(): void {\n        this.horizontal = toBoolean(this.horizontal);\n\n        this._keyManager = new FocusKeyManager<McListOption>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation(!this.horizontal)\n            .withHorizontalOrientation(this.horizontal ? 'ltr' : null);\n\n        if (this._tempValues) {\n            this._setOptionsFromValues(this._tempValues);\n            this._tempValues = null;\n        }\n\n        // Sync external changes to the model back to the options.\n        this._modelChanges = this.selectedOptions.onChange!.subscribe((event) => {\n            for (const item of event.added) {\n                item.selected = true;\n            }\n\n            for (const item of event.removed) {\n                item.selected = false;\n            }\n        });\n\n        this.updateScrollSize();\n    }\n\n    ngOnDestroy() {\n        this._modelChanges.unsubscribe();\n    }\n\n    focus() {\n        this._element.nativeElement.focus();\n    }\n\n    selectAll() {\n        this.options.forEach((option) => option.setSelected(true));\n\n        this._reportValueChange();\n    }\n\n    deselectAll() {\n        this.options.forEach((option) => option.setSelected(false));\n\n        this._reportValueChange();\n    }\n\n    updateScrollSize(): void {\n        if (this.horizontal || !this.options.first) { return; }\n\n        this._keyManager.withScrollSize(Math.floor(this._getHeight() / this.options.first._getHeight()));\n    }\n\n    // Sets the focused option of the selection-list.\n    setFocusedOption(option: McListOption): void {\n        this._keyManager.updateActiveItem(option);\n\n        if (this.withShift && this.multiple) {\n            const previousIndex = this._keyManager.previousActiveItemIndex;\n            const activeIndex = this._keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n\n            this.withShift = false;\n        } else if (this.withCtrl) {\n            this.withCtrl = false;\n\n            if (!this._canDeselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) {\n                this.options.forEach((item) => item.setSelected(false));\n                option.setSelected(true);\n            }\n        }\n\n        this._emitChangeEvent(option);\n        this._reportValueChange();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(values: string[]): void {\n        if (this.options) {\n            this._setOptionsFromValues(values || []);\n        } else {\n            this._tempValues = values;\n        }\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this._onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this._onTouched = fn;\n    }\n\n    // Implemented as a part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        if (this.options) {\n            this.options.forEach((option) => option.disabled = isDisabled);\n        }\n    }\n\n    getSelectedOptionValues(): string[] {\n        return this.options.filter((option) => option.selected).map((option) => option.value);\n    }\n\n    // Toggles the selected state of the currently focused option.\n    toggleFocusedOption(): void {\n        const focusedIndex = this._keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n            const focusedOption: McListOption = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this._canDeselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this._emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    _canDeselectLast(listOption: McListOption): boolean {\n        return !(this.noUnselect && this.selectedOptions.selected.length === 1 && listOption.selected);\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    // View to model callback that should be called if the list or its options lost focus.\n    _onTouched: () => void = () => {};\n\n    // Removes an option from the selection list and updates the active item.\n    _removeOptionFromList(option: McListOption) {\n        if (option._hasFocus) {\n            const optionIndex = this._getOptionIndex(option);\n\n            // Check whether the option is the last item\n            if (optionIndex > 0) {\n                this._keyManager.setPreviousItemActive();\n            } else if (optionIndex === 0 && this.options.length > 1) {\n                this._keyManager.setNextItemActive();\n            }\n        }\n    }\n\n    _onKeyDown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n        this.withShift = event.shiftKey;\n        this.withCtrl = event.ctrlKey;\n\n        switch (keyCode) {\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                if (!this.horizontal) { this._keyManager.setPreviousPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                if (!this.horizontal) { this._keyManager.setNextPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    // Reports a value change to the ControlValueAccessor\n    _reportValueChange() {\n        if (this.options) {\n            this._onChange(this.getSelectedOptionValues());\n        }\n    }\n\n    // Emits a change event if the selected state of an option changed.\n    _emitChangeEvent(option: McListOption) {\n        this.selectionChange.emit(new McListSelectionChange(this, option));\n    }\n\n    // Returns the option with the specified value.\n    private _getOptionByValue(value: string): McListOption | undefined {\n        return this.options.find((option) => option.value === value);\n    }\n\n    // Sets the selected options based on the specified values.\n    private _setOptionsFromValues(values: string[]) {\n        this.options.forEach((option) => option.setSelected(false));\n\n        values\n            .map((value) => this._getOptionByValue(value))\n            .filter(Boolean)\n            .forEach((option) => option!.setSelected(true));\n    }\n\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private _isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    // Returns the index of the specified list option.\n    private _getOptionIndex(option: McListOption): number {\n        return this.options.toArray().indexOf(option);\n    }\n\n    // View to model callback that should be called whenever the selected options change.\n    private _onChange: (value: any) => void = (_: any) => {};\n}\n","// todo пока не делаем, перенесено из материала, но у нас в доках таких простых списков нет.\nimport {\n    AfterContentInit, ChangeDetectionStrategy, Component, ContentChildren, Directive, ElementRef, QueryList,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { McLine, McLineSetter } from '@ptsecurity/mosaic/core';\n\n\nexport class McListBase {}\n\n@Component({\n    selector: 'mc-list',\n    host: { class: 'mc-list' },\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McList extends McListBase {}\n\n\n/**\n * Directive whose purpose is to add the mc- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n    selector: '[mc-subheader], [mcSubheader]',\n    host: { class: 'mc-subheader' }\n})\nexport class McListSubheaderCssStyler {}\n\n\n// Boilerplate for applying mixins to McListItem.\nexport class McListItemBase {}\n\n@Component({\n    selector: 'mc-list-item, a[mc-list-item]',\n    host: {\n        class: 'mc-list-item',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()'\n    },\n    templateUrl: './list-item.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListItem extends McListItemBase implements AfterContentInit {\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    private _lineSetter: McLineSetter;\n\n    constructor(private _element: ElementRef) {\n        super();\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    _handleFocus() {\n        this._element.nativeElement.classList.add('mc-focused');\n    }\n\n    _handleBlur() {\n        this._element.nativeElement.classList.remove('mc-focused');\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLineModule } from '@ptsecurity/mosaic/core';\n\nimport { McListSelection, McListOption } from './list-selection.component';\nimport { McList, McListItem, McListSubheaderCssStyler } from './list.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        McLineModule\n    ],\n    exports: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ],\n    declarations: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ]\n})\nexport class McListModule {}\n","import {\n    Input,\n    Attribute,\n    Component,\n    ElementRef,\n    OnDestroy,\n    ViewEncapsulation,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef\n} from '@angular/core';\n\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport {\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\nexport class McLinkBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\nexport const _McLinkBase: HasTabIndexCtor & CanDisableCtor & typeof McLinkBase\n    = mixinTabIndex(mixinDisabled(McLinkBase));\n\n@Component({\n    selector: 'a.mc-link',\n    template: `<ng-content></ng-content>`,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcLink',\n    styleUrls: ['./link.css'],\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': 'tabIndex'\n    }\n})\n\nexport class McLink extends _McLinkBase implements OnDestroy, HasTabIndex, CanDisable {\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    private _disabled = false;\n\n    constructor(\n        @Attribute('tabindex') tabIndex: string,\n        public elementRef: ElementRef,\n        private _focusMonitor: FocusMonitor,\n        private _changeDetector: ChangeDetectorRef) {\n\n        super(elementRef);\n        this._focusMonitor.monitor(elementRef.nativeElement, true);\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this._getHostElement().focus();\n    }\n\n    _getHostElement() {\n        return this.elementRef.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLink } from './link.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule\n    ],\n    declarations: [McLink],\n    exports: [McLink]\n})\nexport class McLinkModule {}\n","import { Injectable, Optional, SkipSelf } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\n\nimport { McModalRef } from './modal-ref.class';\n\n\ninterface IRegisteredMeta {\n    modalRef: McModalRef;\n    afterOpenSubscription: Subscription;\n    afterCloseSubscription: Subscription;\n}\n\n@Injectable()\nexport class McModalControlService {\n\n    // Track singleton afterAllClose through over the injection tree\n    get afterAllClose(): Subject<void> {\n        return this.parentService ? this.parentService.afterAllClose : this.rootAfterAllClose!;\n    }\n\n    // Track singleton openModals array through over the injection tree\n    get openModals(): McModalRef[] {\n        return this.parentService ? this.parentService.openModals : this.rootOpenModals!;\n    }\n\n    // @ts-ignore\n    private rootOpenModals: McModalRef[] = this.parentService ? null : [];\n    // @ts-ignore\n    private rootAfterAllClose: Subject<void> = this.parentService ? null : new Subject<void>();\n    // @ts-ignore\n    private rootRegisteredMetaMap: Map<McModalRef, IRegisteredMeta> = this.parentService ? null : new Map();\n\n    // Registered modal for later usage\n    private get registeredMetaMap(): Map<McModalRef, IRegisteredMeta> {\n        return this.parentService ? this.parentService.registeredMetaMap : this.rootRegisteredMetaMap;\n    }\n\n    constructor(\n        @Optional() @SkipSelf() private parentService: McModalControlService) {\n    }\n\n    // Register a modal to listen its open/close\n    registerModal(modalRef: McModalRef): void {\n        if (!this.hasRegistered(modalRef)) {\n            const afterOpenSubscription = modalRef.afterOpen.subscribe(() => this.openModals.push(modalRef));\n            const afterCloseSubscription = modalRef.afterClose.subscribe(() => this.removeOpenModal(modalRef));\n\n            this.registeredMetaMap.set(modalRef, {modalRef, afterOpenSubscription, afterCloseSubscription});\n        }\n    }\n\n    hasRegistered(modalRef: McModalRef): boolean {\n        return this.registeredMetaMap.has(modalRef);\n    }\n\n    // Close all registered opened modals\n    closeAll(): void {\n        let i = this.openModals.length;\n\n        while (i--) {\n            this.openModals[i].close();\n        }\n    }\n\n    private removeOpenModal(modalRef: McModalRef): void {\n        const index = this.openModals.indexOf(modalRef);\n\n        if (index > -1) {\n            this.openModals.splice(index, 1);\n\n            if (!this.openModals.length) {\n                this.afterAllClose.next();\n            }\n        }\n    }\n}\n","import { Observable } from 'rxjs';\n\nimport { McModalComponent } from './modal.component';\n\n\n/**\n * API class that public to users to handle the modal instance.\n * McModalRef is aim to avoid accessing to the modal instance directly by users.\n */\nexport abstract class McModalRef<T = any, R = any> {\n    abstract afterOpen: Observable<void>;\n    abstract afterClose: Observable<R>;\n\n    abstract open(): void;\n\n    abstract close(result?: R): void;\n\n    abstract destroy(result?: R): void;\n\n    /**\n     * Trigger the mcOnOk/mcOnCancel by manual\n     */\n    abstract triggerOk(): void;\n\n    abstract triggerCancel(): void;\n\n    // /**\n    //  * Return the ComponentRef of mcContent when specify mcContent as a Component\n    //  * Note: this method may return undefined if the Component has not ready yet.\n    //    (it only available after Modal's ngOnInit)\n    //  */\n    // abstract getContentComponentRef(): ComponentRef<{}>;\n\n    /**\n     * Return the component instance of mcContent when specify mcContent as a Component\n     * Note: this method may return undefined if the Component has not ready yet.\n     * (it only available after Modal's ngOnInit)\n     */\n    abstract getContentComponent(): T;\n\n    /**\n     * Get the dom element of this Modal\n     */\n    abstract getElement(): HTMLElement;\n\n    /**\n     * Get the instance of the Modal itself\n     */\n    abstract getInstance(): McModalComponent;\n}\n","export interface IClickPosition {\n    x: number;\n    y: number;\n}\n\nexport class ModalUtil {\n    private lastPosition: IClickPosition;\n\n    constructor(private document: Document) {\n        this.lastPosition = {x: -1, y: -1};\n        this.listenDocumentClick();\n    }\n\n    getLastClickPosition(): IClickPosition {\n        return this.lastPosition;\n    }\n\n    listenDocumentClick(): void {\n        this.document.addEventListener('click', (event: MouseEvent) => {\n            this.lastPosition = {x: event.clientX, y: event.clientY};\n        });\n    }\n}\n\nexport default new ModalUtil(document);\n","// tslint:disable:no-empty\nimport {\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output\n} from '@angular/core';\nimport {\n    AbstractControl,\n    ControlValueAccessor,\n    NG_VALIDATORS,\n    NG_VALUE_ACCESSOR,\n    ValidationErrors,\n    Validator,\n    ValidatorFn,\n    Validators\n} from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport { DOWN_ARROW } from '@ptsecurity/cdk/keycodes';\nimport { ThemePalette } from '@ptsecurity/mosaic/core';\nimport { McFormField } from '@ptsecurity/mosaic/form-field';\nimport { MC_INPUT_VALUE_ACCESSOR } from '@ptsecurity/mosaic/input';\nimport { Subscription } from 'rxjs';\n\nimport { McDatepicker } from './datepicker';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\n/** @docs-private */\nexport const MC_DATEPICKER_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McDatepickerInput),\n    multi: true\n};\n\n/** @docs-private */\nexport const MC_DATEPICKER_VALIDATORS: any = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McDatepickerInput),\n    multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use McDatepickerInputEvent instead.\n */\nexport class McDatepickerInputEvent<D> {\n    /** The new value for the target datepicker input. */\n    value: D | null;\n\n    constructor(\n        /** Reference to the datepicker input component that emitted the event. */\n        public target: McDatepickerInput<D>,\n        /** Reference to the native input element associated with the datepicker input. */\n        public targetElement: HTMLElement) {\n        this.value = this.target.value;\n    }\n}\n\n\n/** Directive used to connect an input to a McDatepicker. */\n@Directive({\n    selector: 'input[mcDatepicker]',\n    providers: [\n        MC_DATEPICKER_VALUE_ACCESSOR,\n        MC_DATEPICKER_VALIDATORS,\n        { provide: MC_INPUT_VALUE_ACCESSOR, useExisting: McDatepickerInput }\n    ],\n    host: {\n        '[attr.aria-haspopup]': 'true',\n        '[attr.aria-owns]': '(datepicker?.opened && datepicker.id) || null',\n        '[attr.min]': 'min ? dateAdapter.toIso8601(min) : null',\n        '[attr.max]': 'max ? dateAdapter.toIso8601(max) : null',\n        '[disabled]': 'disabled',\n        '(input)': 'onInput($event.target.value)',\n        '(change)': 'onChange()',\n        '(blur)': 'onBlur()',\n        '(keydown)': 'onKeydown($event)'\n    },\n    exportAs: 'mcDatepickerInput'\n})\nexport class McDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n    /** The datepicker that this input is associated with. */\n    @Input()\n    set mcDatepicker(value: McDatepicker<D>) {\n        if (!value) {\n            return;\n        }\n\n        this.datepicker = value;\n        this.datepicker.registerInput(this);\n        this.datepickerSubscription.unsubscribe();\n\n        this.datepickerSubscription = this.datepicker.selectedChanged.subscribe((selected: D) => {\n            this.value = selected;\n            this.cvaOnChange(selected);\n            this.onTouched();\n            this.dateInput.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));\n            this.dateChange.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));\n        });\n    }\n\n    /** Function that can be used to filter out dates within the datepicker. */\n    @Input()\n    set mcDatepickerFilter(value: (date: D | null) => boolean) {\n        this.dateFilter = value;\n        this.validatorOnChange();\n    }\n\n    /** The value of the input. */\n    @Input()\n    get value(): D | null {\n        return this._value;\n    }\n\n    set value(value: D | null) {\n        // tslint:disable-next-line:no-parameter-reassignment\n        value = this.dateAdapter.deserialize(value);\n        this.lastValueValid = !value || this.dateAdapter.isValid(value);\n        // tslint:disable-next-line:no-parameter-reassignment\n        value = this.getValidDateOrNull(value);\n        const oldDate = this.value;\n        this._value = value;\n        this.formatValue(value);\n\n        if (!this.dateAdapter.sameDate(oldDate, value)) {\n            this.valueChange.emit(value);\n        }\n    }\n\n    /** The minimum valid date. */\n    @Input()\n    get min(): D | null {\n        return this._min;\n    }\n\n    set min(value: D | null) {\n        this._min = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.validatorOnChange();\n    }\n\n    /** The maximum valid date. */\n    @Input()\n    get max(): D | null {\n        return this._max;\n    }\n\n    set max(value: D | null) {\n        this._max = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.validatorOnChange();\n    }\n\n    /** Whether the datepicker-input is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return !!this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        const newValue = coerceBooleanProperty(value);\n        const element = this.elementRef.nativeElement;\n\n        if (this._disabled !== newValue) {\n            this._disabled = newValue;\n            this.disabledChange.emit(newValue);\n        }\n\n        // We need to null check the `blur` method, because it's undefined during SSR.\n        if (newValue && element.blur) {\n            // Normally, native input elements automatically blur if they turn disabled. This behavior\n            // is problematic, because it would mean that it triggers another change detection cycle,\n            // which then causes a changed after checked error if the input element was focused before.\n            element.blur();\n        }\n    }\n\n    datepicker: McDatepicker<D>;\n    dateFilter: (date: D | null) => boolean;\n\n    /** Emits when a `change` event is fired on this `<input>`. */\n    @Output() readonly dateChange: EventEmitter<McDatepickerInputEvent<D>> =\n        new EventEmitter<McDatepickerInputEvent<D>>();\n\n    /** Emits when an `input` event is fired on this `<input>`. */\n    @Output() readonly dateInput: EventEmitter<McDatepickerInputEvent<D>> =\n        new EventEmitter<McDatepickerInputEvent<D>>();\n\n    /** Emits when the value changes (either due to user input or programmatic change). */\n    valueChange = new EventEmitter<D | null>();\n\n    /** Emits when the disabled state has changed */\n    disabledChange = new EventEmitter<boolean>();\n    private _value: D | null;\n    private _min: D | null;\n    private _max: D | null;\n    private _disabled: boolean;\n\n    private datepickerSubscription = Subscription.EMPTY;\n\n    private localeSubscription = Subscription.EMPTY;\n\n    /** Whether the last value set on the input was valid. */\n    private lastValueValid = false;\n\n    constructor(\n        public elementRef: ElementRef<HTMLInputElement>,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n        @Optional() private formField: McFormField\n    ) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        // Update the displayed date when the locale changes.\n        this.localeSubscription = dateAdapter.localeChanges.subscribe(() => {\n            this.value = this.value;\n        });\n    }\n\n    onTouched = () => {\n    }\n\n    ngOnDestroy() {\n        this.datepickerSubscription.unsubscribe();\n        this.localeSubscription.unsubscribe();\n        this.valueChange.complete();\n        this.disabledChange.complete();\n    }\n\n    /** @docs-private */\n    registerOnValidatorChange(fn: () => void): void {\n        this.validatorOnChange = fn;\n    }\n\n    /** @docs-private */\n    validate(c: AbstractControl): ValidationErrors | null {\n        return this.validator ? this.validator(c) : null;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: D): void {\n        this.value = value;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this.cvaOnChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    onKeydown(event: KeyboardEvent) {\n        // tslint:disable-next-line:deprecation\n        const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n        if (this.datepicker && isAltDownArrow && !this.elementRef.nativeElement.readOnly) {\n            this.datepicker.open();\n            event.preventDefault();\n        }\n    }\n\n    onInput(value: string) {\n        let date = this.dateAdapter.parse(value, this.dateFormats.parse.dateInput);\n        this.lastValueValid = !date || this.dateAdapter.isValid(date);\n        date = this.getValidDateOrNull(date);\n\n        if (!this.dateAdapter.sameDate(date, this._value)) {\n            this._value = date;\n            this.cvaOnChange(date);\n            this.valueChange.emit(date);\n            this.dateInput.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));\n        }\n    }\n\n    onChange() {\n        this.dateChange.emit(new McDatepickerInputEvent(this, this.elementRef.nativeElement));\n    }\n\n    /** Returns the palette used by the input's form field, if any. */\n    getThemePalette(): ThemePalette | undefined {\n        return this.formField ? this.formField.color : undefined;\n    }\n\n    /** Handles blur events on the input. */\n    onBlur() {\n        // Reformat the input only if we have a valid value.\n        if (this.value) {\n            this.formatValue(this.value);\n        }\n\n        this.onTouched();\n    }\n\n    private cvaOnChange: (value: any) => void = () => {\n    }\n\n    private validatorOnChange = () => {\n    }\n\n    /** The form control validator for whether the input parses. */\n    private parseValidator: ValidatorFn = (): ValidationErrors | null => {\n        return this.lastValueValid ?\n            null : { mcDatepickerParse: { text: this.elementRef.nativeElement.value } };\n    }\n\n    /** The form control validator for the min date. */\n    private minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n        const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));\n\n        return (!this.min || !controlValue ||\n            this.dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n            null : { mcDatepickerMin: { min: this.min, actual: controlValue } };\n    }\n\n    /** The form control validator for the max date. */\n    private maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n        const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));\n\n        return (!this.max || !controlValue ||\n            this.dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n            null : { mcDatepickerMax: { max: this.max, actual: controlValue } };\n    }\n\n    /** The form control validator for the date filter. */\n    private filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n        const controlValue = this.getValidDateOrNull(this.dateAdapter.deserialize(control.value));\n\n        return !this.dateFilter || !controlValue || this.dateFilter(controlValue) ?\n            null : { mcDatepickerFilter: true };\n    }\n\n    /** Formats a value and sets it on the input element. */\n    private formatValue(value: D | null) {\n        this.elementRef.nativeElement.value =\n            value ? this.dateAdapter.format(value, this.dateFormats.display.dateInput) : '';\n    }\n\n    /** The combined form control validator for this input. */\n        // tslint:disable:member-ordering\n    private validator: ValidatorFn | null =\n        Validators.compose([\n            this.parseValidator,\n            this.minValidator,\n            this.maxValidator,\n            this.filterValidator\n        ]);\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    Directive,\n    Input,\n    OnChanges,\n    OnDestroy,\n    SimpleChanges,\n    ViewEncapsulation,\n    ViewChild\n} from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { McButton } from '@ptsecurity/mosaic/button';\nimport { merge, of as observableOf, Subscription } from 'rxjs';\n\nimport { McDatepicker } from './datepicker';\nimport { McDatepickerIntl } from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `mcDatepickerToggle`. */\n@Directive({\n    selector: '[mcDatepickerToggleIcon]'\n})\nexport class McDatepickerToggleIcon {\n}\n\n\n@Component({\n    selector: 'mc-datepicker-toggle',\n    templateUrl: 'datepicker-toggle.html',\n    styleUrls: ['datepicker-toggle.css'],\n    host: {\n        class: 'mc-datepicker-toggle',\n        // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n        // consumer may have provided, while still being able to receive focus.\n        '[attr.tabindex]': '-1',\n        '[class.mc-datepicker-toggle_active]': 'datepicker && datepicker.opened',\n        '[class.mc-warn]': 'datepicker && datepicker.color === \"error\"',\n        '(focus)': 'button.focus()'\n    },\n    exportAs: 'mcDatepickerToggle',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n\n    /** Whether the toggle button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    /** Datepicker instance that the button will toggle. */\n    @Input('for') datepicker: McDatepicker<D>;\n\n    /** Tabindex for the toggle. */\n    @Input() tabIndex: number | null;\n\n    /** Custom icon set by the consumer. */\n    @ContentChild(McDatepickerToggleIcon) customIcon: McDatepickerToggleIcon;\n\n    /** Underlying button element. */\n    @ViewChild('button') button: McButton;\n    private stateChanges = Subscription.EMPTY;\n\n    private _disabled: boolean;\n\n    constructor(\n        public intl: McDatepickerIntl,\n        private changeDetectorRef: ChangeDetectorRef,\n        @Attribute('tabindex') defaultTabIndex: string\n    ) {\n        const parsedTabIndex = Number(defaultTabIndex);\n        this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.datepicker) {\n            this.watchStateChanges();\n        }\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.unsubscribe();\n    }\n\n    ngAfterContentInit() {\n        this.watchStateChanges();\n    }\n\n    open(event: Event): void {\n        if (this.datepicker && !this.disabled) {\n            this.datepicker.open();\n            event.stopPropagation();\n        }\n    }\n\n    private watchStateChanges() {\n        const datepickerDisabled = this.datepicker ? this.datepicker.disabledChange : observableOf();\n        const inputDisabled = this.datepicker && this.datepicker.datepickerInput ?\n            this.datepicker.datepickerInput.disabledChange : observableOf();\n        const datepickerToggled = this.datepicker ?\n            merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n            observableOf();\n\n        this.stateChanges.unsubscribe();\n        this.stateChanges = merge(\n            this.intl.changes,\n            datepickerDisabled,\n            inputDisabled,\n            datepickerToggled\n        ).subscribe(() => this.changeDetectorRef.markForCheck());\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { PortalModule } from '@ptsecurity/cdk/portal';\nimport { McButtonModule } from '@ptsecurity/mosaic/button';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McCalendar, McCalendarHeader } from './calendar';\nimport { McCalendarBody } from './calendar-body';\nimport {\n    McDatepicker,\n    McDatepickerContent,\n    MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './datepicker';\nimport { McDatepickerInput } from './datepicker-input';\nimport { McDatepickerIntl } from './datepicker-intl';\nimport { McDatepickerToggle, McDatepickerToggleIcon } from './datepicker-toggle';\nimport { McMonthView } from './month-view';\nimport { McMultiYearView } from './multi-year-view';\nimport { McYearView } from './year-view';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        McButtonModule,\n        OverlayModule,\n        A11yModule,\n        PortalModule,\n        McIconModule\n    ],\n    exports: [\n        McCalendar,\n        McCalendarBody,\n        McDatepicker,\n        McDatepickerContent,\n        McDatepickerInput,\n        McDatepickerToggle,\n        McDatepickerToggleIcon,\n        McMonthView,\n        McYearView,\n        McMultiYearView,\n        McCalendarHeader,\n        McButtonModule\n    ],\n    declarations: [\n        McCalendar,\n        McCalendarBody,\n        McDatepicker,\n        McDatepickerContent,\n        McDatepickerInput,\n        McDatepickerToggle,\n        McDatepickerToggleIcon,\n        McMonthView,\n        McYearView,\n        McMultiYearView,\n        McCalendarHeader\n    ],\n    providers: [\n        McDatepickerIntl,\n        MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER\n    ],\n    entryComponents: [\n        McDatepickerContent,\n        McCalendarHeader\n    ]\n})\nexport class McDatepickerModule {\n}\n","import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\n\n\n@Component({\n    selector: 'mc-divider',\n    host: {\n        class: 'mc-divider',\n        role: 'separator',\n        '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n        '[class.mc-divider-vertical]': 'vertical',\n        '[class.mc-divider-inset]': 'inset'\n    },\n    template: '',\n    styleUrls: ['divider.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false\n})\nexport class McDivider {\n    // Whether the divider is vertically aligned.\n    @Input()\n    get vertical(): boolean {\n        return this._vertical;\n    }\n\n    set vertical(value: boolean) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n\n    private _vertical: boolean = false;\n\n    // Whether the divider is an inset divider.\n    @Input()\n    get inset(): boolean {\n        return this._inset;\n    }\n\n    set inset(value: boolean) {\n        this._inset = coerceBooleanProperty(value);\n    }\n\n    private _inset: boolean = false;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McDivider } from './divider.component';\n\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [McDivider],\n    declarations: [McDivider]\n})\nexport class McDividerModule {\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n    Directive,\n    TemplateRef,\n    ComponentFactoryResolver,\n    ApplicationRef,\n    Injector,\n    ViewContainerRef,\n    Inject,\n    OnDestroy\n} from '@angular/core';\nimport { TemplatePortal, DomPortalOutlet } from '@ptsecurity/cdk/portal';\nimport { Subject } from 'rxjs';\n\n\n/**\n * Dropdown content that will be rendered lazily once the dropdown is opened.\n */\n@Directive({\n    selector: 'ng-template[mcDropdownContent]'\n})\nexport class McDropdownContent implements OnDestroy {\n\n    /** Emits when the dropdown content has been attached. */\n    _attached = new Subject<void>();\n    private _portal: TemplatePortal<any>;\n    private _outlet: DomPortalOutlet;\n\n    constructor(\n        private _template: TemplateRef<any>,\n        private _componentFactoryResolver: ComponentFactoryResolver,\n        private _appRef: ApplicationRef,\n        private _injector: Injector,\n        private _viewContainerRef: ViewContainerRef,\n        @Inject(DOCUMENT) private _document: any) {}\n\n    /**\n     * Attaches the content with a particular context.\n     * @docs-private\n     */\n    attach(context: any = {}) {\n        if (!this._portal) {\n            this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n        }\n\n        this.detach();\n\n        if (!this._outlet) {\n            this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n                this._componentFactoryResolver, this._appRef, this._injector);\n        }\n\n        const element: HTMLElement = this._template.elementRef.nativeElement;\n\n        // Because we support opening the same dropdown from different triggers (which in turn have their\n        // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n        // risk it staying attached to a pane that's no longer in the DOM.\n        element.parentNode!.insertBefore(this._outlet.outletElement, element);\n        this._portal.attach(this._outlet, context);\n        this._attached.next();\n    }\n\n    /**\n     * Detaches the content.\n     * @docs-private\n     */\n    detach() {\n        if (this._portal.isAttached) {\n            this._portal.detach();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._outlet) {\n            this._outlet.dispose();\n        }\n    }\n}\n","import { EventEmitter, TemplateRef, InjectionToken } from '@angular/core';\nimport { FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { Direction } from '@ptsecurity/cdk/bidi';\n\nimport { McDropdownContent } from './dropdown-content';\nimport { DropdownPositionX, DropdownPositionY } from './dropdown-positions';\n\n\n/**\n * Injection token used to provide the parent dropdown to dropdown-specific components.\n * @docs-private\n */\nexport const MC_DROPDOWN_PANEL = new InjectionToken<McDropdownPanel>('MC_DROPDOWN_PANEL');\n\n/**\n * Interface for a custom dropdown panel that can be used with `mcDropdownTriggerFor`.\n * @docs-private\n */\n// tslint:disable-next-line:interface-name\nexport interface McDropdownPanel<T = any> {\n    xPosition: DropdownPositionX;\n    yPosition: DropdownPositionY;\n    overlapTriggerX: boolean;\n    overlapTriggerY: boolean;\n    templateRef: TemplateRef<any>;\n    closed: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n    parent?: McDropdownPanel | undefined;\n    direction?: Direction;\n    lazyContent?: McDropdownContent;\n    backdropClass?: string;\n    hasBackdrop?: boolean;\n    focusFirstItem(origin?: FocusOrigin): void;\n    resetActiveItem(): void;\n    setPositionClasses?(x: DropdownPositionX, y: DropdownPositionY): void;\n    addItem?(item: T): void;\n    removeItem?(item: T): void;\n}\n","import { DOCUMENT } from '@angular/common';\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    OnDestroy,\n    ViewEncapsulation,\n    Inject,\n    Optional,\n    Input,\n    ViewChild\n} from '@angular/core';\nimport { IFocusableOption, FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { CanDisable, CanDisableCtor, mixinDisabled } from '@ptsecurity/mosaic/core';\nimport { Subject } from 'rxjs';\n\nimport { MC_DROPDOWN_PANEL, McDropdownPanel } from './dropdown-panel';\n\n\n// Boilerplate for applying mixins to McDropdownItem.\n/** @docs-private */\nexport class McDropdownItemBase {}\nexport const _McDropdownItemMixinBase: CanDisableCtor & typeof McDropdownItemBase =\n    mixinDisabled(McDropdownItemBase);\n\n/**\n * This directive is intended to be used inside an mc-dropdown tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n    selector: 'mc-dropdown-item, [mc-dropdown-item]',\n    exportAs: 'mcDropdownItem',\n    inputs: ['disabled'],\n    host: {\n        '[attr.role]': 'role',\n        class: 'mc-dropdown__item',\n        '[class.mc-dropdown__item_highlighted]': '_highlighted',\n        '[attr.tabindex]': '_getTabIndex()',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': '_checkDisabled($event)',\n        '(mouseenter)': '_handleMouseEnter()'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    template: `\n        <div #content>\n            <ng-content></ng-content>\n        </div>\n        <i *ngIf=\"_triggersNestedDropdown\" mc-icon=\"mc-angle-right-M_16\" class=\"mc-dropdown__trigger\"></i>\n    `\n})\nexport class McDropdownItem extends _McDropdownItemMixinBase\n    implements IFocusableOption, CanDisable, OnDestroy {\n\n    /** ARIA role for the dropdown item. */\n    @Input() role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox' = 'menuitem';\n\n    @ViewChild('content') content;\n\n    private _document: Document;\n\n    /** Stream that emits when the dropdown item is hovered. */\n    readonly _hovered: Subject<McDropdownItem> = new Subject<McDropdownItem>();\n\n    /** Whether the dropdown item is highlighted. */\n    _highlighted: boolean = false;\n\n    /** Whether the dropdown item acts as a trigger for a nested dropdown. */\n    _triggersNestedDropdown: boolean = false;\n\n    constructor(\n        private _elementRef: ElementRef<HTMLElement>,\n        @Inject(DOCUMENT) document: any,\n        private _focusMonitor: FocusMonitor,\n        @Inject(MC_DROPDOWN_PANEL) @Optional() private _parentDropdownPanel?: McDropdownPanel<McDropdownItem>) {\n        super();\n\n        if (_focusMonitor) {\n            // Start monitoring the element so it gets the appropriate focused classes. We want\n            // to show the focus style for dropdown items only when the focus was not caused by a\n            // mouse or touch interaction.\n            _focusMonitor.monitor(this._elementRef.nativeElement, false);\n        }\n\n        if (_parentDropdownPanel && _parentDropdownPanel.addItem) {\n            _parentDropdownPanel.addItem(this);\n        }\n\n        this._document = document;\n    }\n\n    /** Focuses the dropdown item. */\n    focus(origin: FocusOrigin = 'program'): void {\n        if (this._focusMonitor) {\n            this._focusMonitor.focusVia(this._getHostElement(), origin);\n        } else {\n            this._getHostElement().focus();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this._focusMonitor) {\n            this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n\n        if (this._parentDropdownPanel && this._parentDropdownPanel.removeItem) {\n            this._parentDropdownPanel.removeItem(this);\n        }\n\n        this._hovered.complete();\n    }\n\n    /** Used to set the `tabindex`. */\n    _getTabIndex(): string {\n        return this.disabled ? '-1' : '0';\n    }\n\n    /** Returns the host DOM element. */\n    _getHostElement(): HTMLElement {\n        return this._elementRef.nativeElement;\n    }\n\n    /** Prevents the default element actions if it is disabled. */\n    _checkDisabled(event: Event): void {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n\n    /** Emits to the hover stream. */\n    _handleMouseEnter() {\n        this._hovered.next(this);\n    }\n\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel(): string {\n        const element: HTMLElement = this.content.nativeElement;\n        // tslint:disable-next-line:no-magic-numbers\n        const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n        let output = '';\n\n        if (element.childNodes) {\n            const length = element.childNodes.length;\n\n            // Go through all the top-level text nodes and extract their text.\n            // We skip anything that's not a text node to prevent the text from\n            // being thrown off by something like an icon.\n            for (let i = 0; i < length; i++) {\n                if (element.childNodes[i].nodeType === textNodeType) {\n                    output += element.childNodes[i].textContent;\n                }\n            }\n        }\n\n        return output.trim();\n    }\n}\n","import {\n    trigger,\n    state,\n    style,\n    animate,\n    transition,\n    query,\n    group,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n\n/**\n * Animations used by the mc-dropdown component.\n * @docs-private\n */\nexport const mcDropdownAnimations: {\n    readonly transformDropdown: AnimationTriggerMetadata;\n    readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n    /**\n     * This animation controls the dropdown panel's entry and exit from the page.\n     *\n     * When the dropdown panel is added to the DOM, it scales in and fades in its border.\n     *\n     * When the dropdown panel is removed from the DOM, it simply fades out after a brief\n     * delay to display the ripple.\n     */\n    transformDropdown: trigger('transformDropdown', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(0.8)'\n        })),\n        transition('void => enter', group([\n            query('.mc-dropdown__content', animate('50ms linear', style({opacity: 1}))),\n            animate('50ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'}))\n        ])),\n        transition('* => void', animate('50ms 25ms linear', style({opacity: 0})))\n    ]),\n\n\n    /**\n     * This animation fades in the background color and content of the dropdown panel\n     * after its containing element is scaled in.\n     */\n    fadeInItems: trigger('fadeInItems', [\n        // now. Remove next time we do breaking changes.\n        state('showing', style({opacity: 1})),\n        transition('void => *', [\n            style({opacity: 0}),\n            animate('200ms 60ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n\nexport const fadeInItems = mcDropdownAnimations.fadeInItems;\n\nexport const transformDropdown = mcDropdownAnimations.transformDropdown;\n","import { AnimationEvent } from '@angular/animations';\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChild,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    Output,\n    TemplateRef,\n    QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    OnInit\n} from '@angular/core';\nimport { FocusKeyManager, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { Direction } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW } from '@ptsecurity/cdk/keycodes';\nimport { merge, Observable, Subject, Subscription } from 'rxjs';\nimport { startWith, switchMap, take } from 'rxjs/operators';\n\nimport { mcDropdownAnimations } from './dropdown-animations';\nimport { McDropdownContent } from './dropdown-content';\nimport { throwMcDropdownInvalidPositionX, throwMcDropdownInvalidPositionY } from './dropdown-errors';\nimport { McDropdownItem } from './dropdown-item';\nimport { MC_DROPDOWN_PANEL, McDropdownPanel } from './dropdown-panel';\nimport { DropdownPositionX, DropdownPositionY } from './dropdown-positions';\n\n\n/** Default `mc-dropdown` options that can be overridden. */\n// tslint:disable-next-line:interface-name\nexport interface McDropdownDefaultOptions {\n    /** The x-axis position of the dropdown. */\n    xPosition: DropdownPositionX;\n\n    /** The y-axis position of the dropdown. */\n    yPosition: DropdownPositionY;\n\n    /** Whether the dropdown should overlap the dropdown trigger horizontally. */\n    overlapTriggerX: boolean;\n\n    /** Whether the dropdown should overlap the dropdown trigger vertically. */\n    overlapTriggerY: boolean;\n\n    /** Class to be applied to the dropdown's backdrop. */\n    backdropClass: string;\n\n    /** Whether the dropdown has a backdrop. */\n    hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mc-dropdown`. */\nexport const MC_DROPDOWN_DEFAULT_OPTIONS =\n    new InjectionToken<McDropdownDefaultOptions>('mc-dropdown-default-options', {\n        providedIn: 'root',\n        factory: MC_DROPDOWN_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MC_DROPDOWN_DEFAULT_OPTIONS_FACTORY(): McDropdownDefaultOptions {\n    return {\n        overlapTriggerX: true,\n        overlapTriggerY: false,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop'\n    };\n}\n\n@Component({\n    selector: 'mc-dropdown',\n    templateUrl: 'dropdown.html',\n    styleUrls: ['dropdown.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcDropdown',\n    animations: [\n        mcDropdownAnimations.transformDropdown,\n        mcDropdownAnimations.fadeInItems\n    ],\n    providers: [\n        { provide: MC_DROPDOWN_PANEL, useExisting: McDropdown }\n    ]\n})\nexport class McDropdown implements AfterContentInit, McDropdownPanel<McDropdownItem>, OnInit, OnDestroy {\n\n    /** Position of the dropdown in the X axis. */\n    @Input()\n    get xPosition(): DropdownPositionX {\n        return this._xPosition;\n    }\n\n    set xPosition(value: DropdownPositionX) {\n        if (value !== 'before' && value !== 'after') {\n            throwMcDropdownInvalidPositionX();\n        }\n        this._xPosition = value;\n        this.setPositionClasses();\n    }\n\n    /** Position of the dropdown in the Y axis. */\n    @Input()\n    get yPosition(): DropdownPositionY {\n        return this._yPosition;\n    }\n\n    set yPosition(value: DropdownPositionY) {\n        if (value !== 'above' && value !== 'below') {\n            throwMcDropdownInvalidPositionY();\n        }\n        this._yPosition = value;\n        this.setPositionClasses();\n    }\n\n    /** Whether the dropdown should overlap its trigger vertically. */\n    @Input()\n    get overlapTriggerY(): boolean {\n        return this._overlapTriggerY;\n    }\n\n    set overlapTriggerY(value: boolean) {\n        this._overlapTriggerY = coerceBooleanProperty(value);\n    }\n\n    /** Whether the dropdown should overlap its trigger horizontally. */\n    @Input()\n    get overlapTriggerX(): boolean {\n        return this._overlapTriggerX;\n    }\n\n    set overlapTriggerX(value: boolean) {\n        this._overlapTriggerX = coerceBooleanProperty(value);\n    }\n\n    /** Whether the dropdown has a backdrop. */\n    @Input()\n    get hasBackdrop(): boolean | undefined {\n        return this._hasBackdrop;\n    }\n\n    set hasBackdrop(value: boolean | undefined) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n\n    /**\n     * This method takes classes set on the host mc-dropdown element and applies them on the\n     * dropdown template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing dropdown from outside the component.\n     * @param classes list of class names\n     */\n    @Input('class')\n    set panelClass(classes: string) {\n        const previousPanelClass = this._previousPanelClass;\n\n        if (previousPanelClass && previousPanelClass.length) {\n            previousPanelClass.split(' ').forEach((className: string) => {\n                this._classList[className] = false;\n            });\n        }\n\n        this._previousPanelClass = classes;\n\n        if (classes && classes.length) {\n            classes.split(' ').forEach((className: string) => {\n                this._classList[className] = true;\n            });\n\n            this._elementRef.nativeElement.className = '';\n        }\n    }\n\n    /** Config object to be passed into the dropdown's ngClass */\n    _classList: { [key: string]: boolean } = {};\n\n    /** Current state of the panel animation. */\n    _panelAnimationState: 'void' | 'enter' = 'void';\n\n    /** Emits whenever an animation on the dropdown completes. */\n    _animationDone = new Subject<AnimationEvent>();\n\n    /** Whether the dropdown is animating. */\n    _isAnimating: boolean;\n\n    /** Parent dropdown of the current dropdown panel. */\n    parent: McDropdownPanel | undefined;\n\n    /** Layout direction of the dropdown. */\n    direction: Direction;\n\n    /** Class to be added to the backdrop element. */\n    @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n    /** @docs-private */\n    @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n    /**\n     * List of the items inside of a dropdown.\n     */\n    @ContentChildren(McDropdownItem) items: QueryList<McDropdownItem>;\n\n    /**\n     * Dropdown content that will be rendered lazily.\n     * @docs-private\n     */\n    @ContentChild(McDropdownContent) lazyContent: McDropdownContent;\n\n    private _previousPanelClass: string;\n\n    /** Event emitted when the dropdown is closed. */\n    @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n        new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n    private _keyManager: FocusKeyManager<McDropdownItem>;\n    private _xPosition: DropdownPositionX = this._defaultOptions.xPosition;\n    private _yPosition: DropdownPositionY = this._defaultOptions.yPosition;\n\n    /** Dropdown items inside the current dropdown. */\n    private _items: McDropdownItem[] = [];\n\n    /** Emits whenever the amount of dropdown items changes. */\n    private _itemChanges = new Subject<McDropdownItem[]>();\n\n    /** Subscription to tab events on the dropdown panel */\n    private _tabSubscription = Subscription.EMPTY;\n    private _overlapTriggerX: boolean = this._defaultOptions.overlapTriggerX;\n    private _overlapTriggerY: boolean = this._defaultOptions.overlapTriggerY;\n    private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n    constructor(\n        private _elementRef: ElementRef<HTMLElement>,\n        private _ngZone: NgZone,\n        @Inject(MC_DROPDOWN_DEFAULT_OPTIONS) private _defaultOptions: McDropdownDefaultOptions) { }\n\n    ngOnInit() {\n        this.setPositionClasses();\n    }\n\n    ngAfterContentInit() {\n        this._keyManager = new FocusKeyManager<McDropdownItem>(this.items).withWrap().withTypeAhead();\n        this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n    }\n\n    ngOnDestroy() {\n        this._tabSubscription.unsubscribe();\n        this.closed.complete();\n    }\n\n    /** Stream that emits whenever the hovered dropdown item changes. */\n    _hovered(): Observable<McDropdownItem> {\n        return this._itemChanges.pipe(\n            startWith(this._items),\n            switchMap(items => merge(...items.map(item => item._hovered)))\n        );\n    }\n\n    /** Handle a keyboard event from the dropdown, delegating to the appropriate action. */\n    _handleKeydown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n\n        switch (keyCode) {\n            case ESCAPE:\n                this.closed.emit('keydown');\n                break;\n            case LEFT_ARROW:\n                if (this.parent && this.direction === 'ltr') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            case RIGHT_ARROW:\n                if (this.parent && this.direction === 'rtl') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            default:\n                if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n                    this._keyManager.setFocusOrigin('keyboard');\n                }\n\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    /**\n     * Focus the first item in the dropdown.\n     * @param origin Action from which the focus originated. Used to set the correct styling.\n     */\n    focusFirstItem(origin: FocusOrigin = 'program'): void {\n        // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n        if (this.lazyContent) {\n            this._ngZone.onStable.asObservable()\n                .pipe(take(1))\n                .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n        } else {\n            this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n        }\n    }\n\n    /**\n     * Resets the active item in the dropdown. This is used when the dropdown is opened, allowing\n     * the user to start from the first option when pressing the down arrow.\n     */\n    resetActiveItem() {\n        this._keyManager.setActiveItem(-1);\n    }\n\n    /**\n     * Registers a dropdown item with the dropdown.\n     * @docs-private\n     */\n    addItem(item: McDropdownItem) {\n        // We register the items through this method, rather than picking them up through\n        // `ContentChildren`, because we need the items to be picked up by their closest\n        // `mc-dropdown` ancestor. If we used `@ContentChildren(McDropdownItem, {descendants: true})`,\n        // all descendant items will bleed into the top-level dropdown in the case where the consumer\n        // has `mc-dropdown` instances nested inside each other.\n        if (this._items.indexOf(item) === -1) {\n            this._items.push(item);\n            this._itemChanges.next(this._items);\n        }\n    }\n\n    /**\n     * Removes an item from the dropdown.\n     * @docs-private\n     */\n    removeItem(item: McDropdownItem) {\n        const index = this._items.indexOf(item);\n\n        if (this._items.indexOf(item) > -1) {\n            this._items.splice(index, 1);\n            this._itemChanges.next(this._items);\n        }\n    }\n\n    /**\n     * Adds classes to the dropdown panel based on its position. Can be used by\n     * consumers to add specific styling based on the position.\n     * @param posX Position of the dropdown along the x axis.\n     * @param posY Position of the dropdown along the y axis.\n     * @docs-private\n     */\n    setPositionClasses(posX: DropdownPositionX = this.xPosition, posY: DropdownPositionY = this.yPosition) {\n        const classes = this._classList;\n        classes['mc-dropdown-before'] = posX === 'before';\n        classes['mc-dropdown-after'] = posX === 'after';\n        classes['mc-dropdown-above'] = posY === 'above';\n        classes['mc-dropdown-below'] = posY === 'below';\n    }\n\n    /** Starts the enter animation. */\n    _startAnimation() {\n        this._panelAnimationState = 'enter';\n    }\n\n    /** Resets the panel animation to its initial state. */\n    _resetAnimation() {\n        this._panelAnimationState = 'void';\n    }\n\n    /** Callback that is invoked when the panel animation completes. */\n    _onAnimationDone(event: AnimationEvent) {\n        this._animationDone.next(event);\n        this._isAnimating = false;\n    }\n\n    _onAnimationStart(event: AnimationEvent) {\n        this._isAnimating = true;\n\n        // Scroll the content element to the top as soon as the animation starts. This is necessary,\n        // because we move focus to the first item while it's still being animated, which can throw\n        // the browser off when it determines the scroll position. Alternatively we can move focus\n        // when the animation is done, however moving focus asynchronously will interrupt screen\n        // readers which are in the process of reading out the dropdown already. We take the `element`\n        // from the `event` since we can't use a `ViewChild` to access the pane.\n        if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n            event.element.scrollTop = 0;\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McDropdownContent } from './dropdown-content';\nimport { McDropdownItem } from './dropdown-item';\nimport { MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER, McDropdownTrigger } from './dropdown-trigger';\nimport { McDropdown } from './dropdown.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        McIconModule\n    ],\n    exports: [McDropdown, McDropdownItem, McDropdownTrigger, McDropdownContent],\n    declarations: [McDropdown, McDropdownItem, McDropdownTrigger, McDropdownContent],\n    providers: [MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class McDropdownModule {}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-content',\n    preserveWhitespaces: false,\n    templateUrl: './content.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ],\n    host: {\n        '[class.mc-layout-content]': 'true'\n    }\n})\nexport class McContentComponent {\n}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-footer',\n    preserveWhitespaces: false,\n    templateUrl: './footer.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ],\n    host: {\n        '[class.mc-layout-footer]': 'true'\n    }\n})\nexport class McFooterComponent {\n}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector : 'mc-header',\n    preserveWhitespaces: false,\n    templateUrl: './header.component.html',\n    styles: [\n        `:host {\n            display: block;\n        }`\n    ],\n    host: {\n        '[class.mc-layout-header]': 'true'\n    }\n})\nexport class McHeaderComponent {\n}\n","import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-layout',\n    preserveWhitespaces: false,\n    styleUrls: ['layout.css'],\n    templateUrl: './layout.component.html',\n    host: {\n        '[class.mc-layout]': 'true',\n        '[class.mc-layout-has-sidebar]': 'hasSidebar'\n    },\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McLayoutComponent {\n    hasSidebar = false;\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    EventEmitter,\n    Host,\n    Input,\n    OnInit,\n    Optional,\n    Output\n} from '@angular/core';\nimport { toBoolean } from '@ptsecurity/mosaic/core';\n\nimport { McLayoutComponent } from './layout.component';\n\n\n@Component({\n    selector: 'mc-sidebar',\n    preserveWhitespaces: false,\n    templateUrl: './sidebar.component.html',\n    host: {\n        '[class.mc-layout-sidebar]': 'true',\n        '[class.mc-layout-sidebar-collapsed]': 'mcCollapsed',\n        '[style.flex]': 'mcFlex',\n        '[style.max-width.px]': 'mcWidth',\n        '[style.min-width.px]': 'mcWidth',\n        '[style.width.px]': 'mcWidth'\n    },\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McSidebarComponent implements OnInit {\n\n    @Input() _mcWidth = 200;\n    @Input() mcCollapsedWidth = 80;\n\n    @Input()\n    set mcCollapsible(value: boolean) {\n        this.collapsible = toBoolean(value);\n    }\n\n    get mcCollapsible(): boolean {\n        return this.collapsible;\n    }\n\n    @Input()\n    set mcCollapsed(value: boolean) {\n        this.collapsed = toBoolean(value);\n    }\n\n    get mcCollapsed(): boolean {\n        return this.collapsed;\n    }\n\n    // tslint:disable-next-line\n    @Output() mcCollapsedChange = new EventEmitter();\n\n    private collapsed = false;\n    private collapsible = false;\n\n    get mcFlex(): string {\n        if (this.mcCollapsed) {\n            return `0 0 ${this.mcCollapsedWidth}px`;\n        } else {\n            return `0 0 ${this.mcWidth}px`;\n        }\n    }\n\n    get mcWidth(): number {\n        if (this.mcCollapsed) {\n            return this.mcCollapsedWidth;\n        } else {\n            return this._mcWidth;\n        }\n    }\n\n    constructor(\n        @Optional() @Host() private mcLayoutComponent: McLayoutComponent) {\n    }\n\n    ngOnInit() {\n        if (this.mcLayoutComponent) {\n            this.mcLayoutComponent.hasSidebar = true;\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McContentComponent } from './content.component';\nimport { McFooterComponent } from './footer.component';\nimport { McHeaderComponent } from './header.component';\nimport { McLayoutComponent } from './layout.component';\nimport { McSidebarComponent } from './sidebar.component';\n\n\n@NgModule({\n    imports: [ CommonModule ],\n    exports: [\n        McLayoutComponent,\n        McContentComponent,\n        McFooterComponent,\n        McHeaderComponent,\n        McSidebarComponent\n    ],\n    declarations: [\n        McLayoutComponent,\n        McContentComponent,\n        McFooterComponent,\n        McHeaderComponent,\n        McSidebarComponent\n    ]\n})\nexport class McLayoutModule {\n}\n","// tslint:disable:no-magic-numbers\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { DateAdapter } from '@ptsecurity/cdk/datetime';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    PAGE_DOWN,\n    PAGE_UP,\n    RIGHT_ARROW,\n    UP_ARROW,\n    SPACE\n} from '@ptsecurity/cdk/keycodes';\n\nimport { McCalendarBody, McCalendarCell } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-multi-year-view',\n    templateUrl: 'multi-year-view.html',\n    exportAs: 'mcMultiYearView',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McMultiYearView<D> implements AfterContentInit {\n    /** The date to display in this multi-year view (everything other than the year is ignored). */\n    @Input()\n    get activeDate(): D {\n        return this._activeDate;\n    }\n\n    set activeDate(value: D) {\n        const oldActiveDate = this._activeDate;\n        const validDate =\n            this.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();\n        this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n        if (Math.floor(this.dateAdapter.getYear(oldActiveDate) / yearsPerPage) !==\n            Math.floor(this.dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n            this.init();\n        }\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.selectedYear = this._selected && this.dateAdapter.getYear(this._selected);\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** A function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Emits when a new year is selected. */\n    @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits the selected year. This doesn't imply a change on the selected date */\n    @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits when any date is activated. */\n    @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** The body of calendar table */\n    @ViewChild(McCalendarBody) mcCalendarBody: McCalendarBody;\n\n    /** Grid of calendar cells representing the currently displayed years. */\n    years: McCalendarCell[][];\n\n    /** The year that today falls on. */\n    todayYear: number;\n\n    /** The year of the selected date. Null if the selected date is null. */\n    selectedYear: number | null;\n    private _activeDate: D;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() private dir?: Directionality\n    ) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        this._activeDate = this.dateAdapter.today();\n    }\n\n    ngAfterContentInit() {\n        this.init();\n    }\n\n    /** Initializes this multi-year view. */\n    init() {\n        this.todayYear = this.dateAdapter.getYear(this.dateAdapter.today());\n        const activeYear = this.dateAdapter.getYear(this._activeDate);\n        const activeOffset = activeYear % yearsPerPage;\n        this.years = [];\n        for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n            row.push(activeYear - activeOffset + i);\n            if (row.length === yearsPerRow) {\n                this.years.push(row.map((year) => this.createCellForYear(year)));\n                row = [];\n            }\n        }\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Handles when a new year is selected. */\n    onYearSelected(year: number) {\n        this.yearSelected.emit(this.dateAdapter.createDate(year, 0, 1));\n        const month = this.dateAdapter.getMonth(this.activeDate);\n        const daysInMonth =\n            this.dateAdapter.getNumDaysInMonth(this.dateAdapter.createDate(year, month, 1));\n        this.selectedChange.emit(this.dateAdapter.createDate(year, month,\n            Math.min(this.dateAdapter.getDate(this.activeDate), daysInMonth)));\n    }\n\n    /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n    handleCalendarBodyKeydown(event: KeyboardEvent): void {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n        const oldActiveDate = this._activeDate;\n        const isRtl = this.isRtl();\n\n        // tslint:disable-next-line:deprecation\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n                break;\n            case HOME:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate,\n                    -this.dateAdapter.getYear(this._activeDate) % yearsPerPage);\n                break;\n            case END:\n                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate,\n                    yearsPerPage - this.dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n                break;\n            case PAGE_UP:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(\n                        this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n                break;\n            case PAGE_DOWN:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(\n                        this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n                break;\n            case ENTER:\n            case SPACE:\n                this.onYearSelected(this.dateAdapter.getYear(this._activeDate));\n                break;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n\n        if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n\n        this.focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n\n    getActiveCell(): number {\n        return this.dateAdapter.getYear(this.activeDate) % yearsPerPage;\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.mcCalendarBody.focusActiveCell();\n    }\n\n    /** Creates an McCalendarCell for the given year. */\n    private createCellForYear(year: number) {\n        const yearName = this.dateAdapter.getYearName(this.dateAdapter.createDate(year, 0, 1));\n\n        return new McCalendarCell(year, yearName, yearName, this.shouldEnableYear(year));\n    }\n\n    /** Whether the given year is enabled. */\n    private shouldEnableYear(year: number) {\n        // disable if the year is greater than maxDate lower than minDate\n        if (year === undefined || year === null ||\n            (this.maxDate && year > this.dateAdapter.getYear(this.maxDate)) ||\n            (this.minDate && year < this.dateAdapter.getYear(this.minDate))) {\n            return false;\n        }\n\n        // enable if it reaches here and there's no filter defined\n        if (!this.dateFilter) {\n            return true;\n        }\n\n        const firstOfYear = this.dateAdapter.createDate(year, 0, 1);\n\n        // If any date in the year is enabled count the year as enabled.\n        for (let date = firstOfYear; this.dateAdapter.getYear(date) === year;\n             date = this.dateAdapter.addCalendarDays(date, 1)) {\n            if (this.dateFilter(date)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Determines whether the user has the RTL layout direction. */\n    private isRtl() {\n        return this.dir && this.dir.value === 'rtl';\n    }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Inject,\n    Input,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    PAGE_DOWN,\n    PAGE_UP,\n    RIGHT_ARROW,\n    UP_ARROW,\n    SPACE\n} from '@ptsecurity/cdk/keycodes';\n\nimport { McCalendarBody, McCalendarCell } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-year-view',\n    templateUrl: 'year-view.html',\n    exportAs: 'mcYearView',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McYearView<D> implements AfterContentInit {\n    /** The date to display in this year view (everything other than the year is ignored). */\n    @Input()\n    get activeDate(): D {\n        return this._activeDate;\n    }\n\n    set activeDate(value: D) {\n        const oldActiveDate = this._activeDate;\n        const validDate =\n            this.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();\n        this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n        if (this.dateAdapter.getYear(oldActiveDate) !== this.dateAdapter.getYear(this._activeDate)) {\n            this.init();\n        }\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.selectedMonth = this.getMonthInCurrentYear(this._selected);\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** A function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Emits when a new month is selected. */\n    @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits the selected month. This doesn't imply a change on the selected date */\n    @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits when any date is activated. */\n    @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** The body of calendar table */\n    @ViewChild(McCalendarBody) mcCalendarBody: McCalendarBody;\n\n    /** Grid of calendar cells representing the months of the year. */\n    months: McCalendarCell[][];\n\n    /** The label for this year (e.g. \"2017\"). */\n    yearLabel: string;\n\n    /** The month in this year that today falls on. Null if today is in a different year. */\n    todayMonth: number | null;\n\n    /**\n     * The month in this year that the selected Date falls on.\n     * Null if the selected Date is in a different year.\n     */\n    selectedMonth: number | null;\n    private _activeDate: D;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() private dir?: Directionality\n    ) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        this._activeDate = this.dateAdapter.today();\n    }\n\n    ngAfterContentInit() {\n        this.init();\n    }\n\n    /** Handles when a new month is selected. */\n    onMonthSelected(month: number) {\n        const normalizedDate =\n            this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate), month, 1);\n\n        this.monthSelected.emit(normalizedDate);\n\n        const daysInMonth = this.dateAdapter.getNumDaysInMonth(normalizedDate);\n\n        this.selectedChange.emit(this.dateAdapter.createDate(\n            this.dateAdapter.getYear(this.activeDate), month,\n            Math.min(this.dateAdapter.getDate(this.activeDate), daysInMonth)));\n    }\n\n    /** Handles keydown events on the calendar body when calendar is in year view. */\n    handleCalendarBodyKeydown(event: KeyboardEvent): void {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n        const oldActiveDate = this._activeDate;\n        const isRtl = this.isRtl();\n\n        const VERTICAL_SHIFT = 4;\n        const PAGE_SHIFT = 10;\n        const MAX_MONTH_INDEX = 11;\n\n        // tslint:disable-next-line:deprecation\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, -VERTICAL_SHIFT);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, VERTICAL_SHIFT);\n                break;\n            case HOME:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate,\n                    -this.dateAdapter.getMonth(this._activeDate));\n                break;\n            case END:\n                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate,\n                    MAX_MONTH_INDEX - this.dateAdapter.getMonth(this._activeDate));\n                break;\n            case PAGE_UP:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -PAGE_SHIFT : -1);\n                break;\n            case PAGE_DOWN:\n                this.activeDate =\n                    this.dateAdapter.addCalendarYears(this._activeDate, event.altKey ? PAGE_SHIFT : 1);\n                break;\n            case ENTER:\n            case SPACE:\n                this.onMonthSelected(this.dateAdapter.getMonth(this._activeDate));\n                break;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n\n        if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n\n        this.focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n\n    /** Initializes this year view. */\n    init() {\n        this.selectedMonth = this.getMonthInCurrentYear(this.selected);\n        this.todayMonth = this.getMonthInCurrentYear(this.dateAdapter.today());\n        this.yearLabel = this.dateAdapter.getYearName(this.activeDate);\n\n        const monthNames = this.dateAdapter.getMonthNames('short');\n\n        // First row of months only contains 5 elements so we can fit the year label on the same row.\n        // tslint:disable-next-line:no-magic-numbers\n        this.months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map((row) => row.map(\n            (month) => this.createCellForMonth(month, monthNames[month])));\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.mcCalendarBody.focusActiveCell();\n    }\n\n    /**\n     * Gets the month in this year that the given Date falls on.\n     * Returns null if the given Date is in another year.\n     */\n    private getMonthInCurrentYear(date: D | null) {\n        return date && this.dateAdapter.getYear(date) === this.dateAdapter.getYear(this.activeDate) ?\n            this.dateAdapter.getMonth(date) : null;\n    }\n\n    /** Creates an McCalendarCell for the given month. */\n    private createCellForMonth(month: number, monthName: string) {\n        const ariaLabel = this.dateAdapter.format(\n            this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate), month, 1),\n            this.dateFormats.display.monthYearA11yLabel);\n\n        const newMonthName = monthName[0].toLocaleUpperCase() + monthName.substr(1);\n\n        return new McCalendarCell(\n            month, newMonthName, ariaLabel, this.shouldEnableMonth(month));\n    }\n\n    /** Whether the given month is enabled. */\n    private shouldEnableMonth(month: number) {\n\n        const activeYear = this.dateAdapter.getYear(this.activeDate);\n\n        if (month === undefined || month === null ||\n            this.isYearAndMonthAfterMaxDate(activeYear, month) ||\n            this.isYearAndMonthBeforeMinDate(activeYear, month)) {\n            return false;\n        }\n\n        if (!this.dateFilter) {\n            return true;\n        }\n\n        const firstOfMonth = this.dateAdapter.createDate(activeYear, month, 1);\n\n        // If any date in the month is enabled count the month as enabled.\n        for (let date = firstOfMonth; this.dateAdapter.getMonth(date) === month;\n             date = this.dateAdapter.addCalendarDays(date, 1)) {\n            if (this.dateFilter(date)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Tests whether the combination month/year is after this.maxDate, considering\n     * just the month and year of this.maxDate\n     */\n    private isYearAndMonthAfterMaxDate(year: number, month: number) {\n        if (this.maxDate) {\n            const maxYear = this.dateAdapter.getYear(this.maxDate);\n            const maxMonth = this.dateAdapter.getMonth(this.maxDate);\n\n            return year > maxYear || (year === maxYear && month > maxMonth);\n        }\n\n        return false;\n    }\n\n    /**\n     * Tests whether the combination month/year is before this.minDate, considering\n     * just the month and year of this.minDate\n     */\n    private isYearAndMonthBeforeMinDate(year: number, month: number) {\n        if (this.minDate) {\n            const minYear = this.dateAdapter.getYear(this.minDate);\n            const minMonth = this.dateAdapter.getMonth(this.minDate);\n\n            return year < minYear || (year === minYear && month < minMonth);\n        }\n\n        return false;\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Determines whether the user has the RTL layout direction. */\n    private isRtl() {\n        return this.dir && this.dir.value === 'rtl';\n    }\n}\n","import {\n    AfterContentInit,\n    AfterViewChecked,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnChanges,\n    OnDestroy,\n    Optional,\n    Output,\n    SimpleChanges,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport { ComponentPortal, IComponentType, Portal } from '@ptsecurity/cdk/portal';\nimport { Subject, Subscription } from 'rxjs';\n\nimport { McCalendarCellCssClasses } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\nimport { McDatepickerIntl } from './datepicker-intl';\nimport { McMonthView } from './month-view';\nimport { McMultiYearView, yearsPerPage } from './multi-year-view';\nimport { McYearView } from './year-view';\n\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type McCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for McCalendar */\n@Component({\n    selector: 'mc-calendar-header',\n    templateUrl: 'calendar-header.html',\n    exportAs: 'mcCalendarHeader',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCalendarHeader<D> {\n    constructor(private intl: McDatepickerIntl,\n                @Inject(forwardRef(() => McCalendar)) public calendar: McCalendar<D>,\n                @Optional() private dateAdapter: DateAdapter<D>,\n                @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n                changeDetectorRef: ChangeDetectorRef) {\n\n        this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n    }\n\n    /** The label for the current calendar view. */\n    get periodButtonText(): string {\n        if (this.calendar.currentView === 'month') {\n            const label = this.dateAdapter\n                .format(this.calendar.activeDate, this.dateFormats.display.monthYearLabel);\n\n            return label[0].toLocaleUpperCase() + label.substr(1);\n        }\n\n        if (this.calendar.currentView === 'year') {\n            return this.dateAdapter.getYearName(this.calendar.activeDate);\n        }\n\n        const activeYear = this.dateAdapter.getYear(this.calendar.activeDate);\n        const firstYearInView = this.dateAdapter.getYearName(\n            // tslint:disable-next-line:no-magic-numbers\n            this.dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n        const lastYearInView = this.dateAdapter.getYearName(\n            // tslint:disable-next-line:no-magic-numbers\n            this.dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n\n        return `${firstYearInView} \\u2013 ${lastYearInView}`;\n    }\n\n    get periodButtonLabel(): string {\n        return this.calendar.currentView === 'month' ?\n            this.intl.switchToMultiYearViewLabel : this.intl.switchToMonthViewLabel;\n    }\n\n    /** The label for the previous button. */\n    get prevButtonLabel(): string {\n        return {\n            month: this.intl.prevMonthLabel,\n            year: this.intl.prevYearLabel,\n            'multi-year': this.intl.prevMultiYearLabel\n        }[this.calendar.currentView];\n    }\n\n    /** The label for the next button. */\n    get nextButtonLabel(): string {\n        return {\n            month: this.intl.nextMonthLabel,\n            year: this.intl.nextYearLabel,\n            'multi-year': this.intl.nextMultiYearLabel\n        }[this.calendar.currentView];\n    }\n\n    /** Handles user clicks on the period label. */\n    currentPeriodClicked(): void {\n        this.calendar.currentView = this.calendar.currentView === 'month' ? 'multi-year' : 'month';\n    }\n\n    /** Handles user clicks on the previous button. */\n    previousClicked(): void {\n        this.calendar.activeDate = this.calendar.currentView === 'month' ?\n            this.dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this.dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView === 'year' ? -1 : -yearsPerPage\n            );\n    }\n\n    /** Handles user clicks on the next button. */\n    nextClicked(): void {\n        this.calendar.activeDate = this.calendar.currentView === 'month' ?\n            this.dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this.dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                this.calendar.currentView === 'year' ? 1 : yearsPerPage\n            );\n    }\n\n    /** Whether the previous period button is enabled. */\n    previousEnabled(): boolean {\n        if (!this.calendar.minDate) {\n            return true;\n        }\n\n        return !this.calendar.minDate ||\n            !this.isSameView(this.calendar.activeDate, this.calendar.minDate);\n    }\n\n    /** Whether the next period button is enabled. */\n    nextEnabled(): boolean {\n        return !this.calendar.maxDate ||\n            !this.isSameView(this.calendar.activeDate, this.calendar.maxDate);\n    }\n\n    /** Whether the two dates represent the same view in the current view mode (month or year). */\n    private isSameView(date1: D, date2: D): boolean {\n        if (this.calendar.currentView === 'month') {\n            return this.dateAdapter.getYear(date1) === this.dateAdapter.getYear(date2) &&\n                this.dateAdapter.getMonth(date1) === this.dateAdapter.getMonth(date2);\n        }\n        if (this.calendar.currentView === 'year') {\n            return this.dateAdapter.getYear(date1) === this.dateAdapter.getYear(date2);\n        }\n\n        // Otherwise we are in 'multi-year' view.\n        return Math.floor(this.dateAdapter.getYear(date1) / yearsPerPage) ===\n            Math.floor(this.dateAdapter.getYear(date2) / yearsPerPage);\n    }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-calendar',\n    templateUrl: 'calendar.html',\n    styleUrls: ['calendar.css'],\n    host: {\n        class: 'mc-calendar'\n    },\n    exportAs: 'mcCalendar',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n\n    /** A date representing the period (month or year) to start the calendar in. */\n    @Input()\n    get startAt(): D | null {\n        return this._startAt;\n    }\n\n    set startAt(value: D | null) {\n        this._startAt = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /**\n     * The current active date. This determines which time period is shown and which date is\n     * highlighted when using keyboard navigation.\n     */\n    get activeDate(): D {\n        return this.clampedActiveDate;\n    }\n\n    set activeDate(value: D) {\n        this.clampedActiveDate = this.dateAdapter.clampDate(value, this.minDate, this.maxDate);\n        this.stateChanges.next();\n    }\n\n    /** Whether the calendar is in month view. */\n    get currentView(): McCalendarView {\n        return this._currentView;\n    }\n\n    set currentView(value: McCalendarView) {\n        this._currentView = value;\n        this.moveFocusOnNextTick = true;\n    }\n\n    /** An input indicating the type of the header component, if set. */\n    @Input() headerComponent: IComponentType<any>;\n\n    /** A portal containing the header component type for this calendar. */\n    calendarHeaderPortal: Portal<any>;\n\n    /** Whether the calendar should be started in month or year view. */\n    @Input() startView: McCalendarView = 'month';\n\n    /** Function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Function that can be used to add custom CSS classes to dates. */\n    @Input() dateClass: (date: D) => McCalendarCellCssClasses;\n\n    /** Emits when the currently selected date changes. */\n    @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /**\n     * Emits the year chosen in multiyear view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /**\n     * Emits the month chosen in year view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Emits when any date is selected. */\n    @Output() readonly userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Reference to the current month view component. */\n    @ViewChild(McMonthView) monthView: McMonthView<D>;\n\n    /** Reference to the current year view component. */\n    @ViewChild(McYearView) yearView: McYearView<D>;\n\n    /** Reference to the current multi-year view component. */\n    @ViewChild(McMultiYearView) multiYearView: McMultiYearView<D>;\n\n    /**\n     * Emits whenever there is a state change that the header may need to respond to.\n     */\n    stateChanges = new Subject<void>();\n\n    private intlChanges: Subscription;\n\n    /**\n     * Used for scheduling that focus should be moved to the active cell on the next tick.\n     * We need to schedule it, rather than do it immediately, because we have to wait\n     * for Angular to re-evaluate the view children.\n     */\n    private moveFocusOnNextTick = false;\n    private _startAt: D | null;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n    private clampedActiveDate: D;\n    private _currentView: McCalendarView;\n\n    constructor(\n        intl: McDatepickerIntl,\n        @Optional() private dateAdapter: DateAdapter<D>,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n        private changeDetectorRef: ChangeDetectorRef\n    ) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        this.intlChanges = intl.changes.subscribe(() => {\n            changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        });\n    }\n\n    ngAfterContentInit() {\n        this.calendarHeaderPortal = new ComponentPortal(this.headerComponent || McCalendarHeader);\n        this.activeDate = this.startAt || this.dateAdapter.today();\n\n        // Assign to the private property since we don't want to move focus on init.\n        this._currentView = this.startView;\n    }\n\n    ngAfterViewChecked() {\n        if (this.moveFocusOnNextTick) {\n            this.moveFocusOnNextTick = false;\n            this.focusActiveCell();\n        }\n    }\n\n    ngOnDestroy() {\n        this.intlChanges.unsubscribe();\n        this.stateChanges.complete();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n        if (change && !change.firstChange) {\n            const view = this.getCurrentViewComponent();\n\n            if (view) {\n                // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n                // passed down to the view via data bindings which won't be up-to-date when we call `init`.\n                this.changeDetectorRef.detectChanges();\n                view.init();\n            }\n        }\n\n        this.stateChanges.next();\n    }\n\n    focusActiveCell() {\n        this.getCurrentViewComponent().focusActiveCell();\n    }\n\n    /** Updates today's date after an update of the active date */\n    updateTodaysDate() {\n        const view = this.currentView === 'month' ? this.monthView :\n            (this.currentView === 'year' ? this.yearView : this.multiYearView);\n\n        view.ngAfterContentInit();\n    }\n\n    /** Handles date selection in the month view. */\n    dateSelected(date: D): void {\n        if (!this.dateAdapter.sameDate(date, this.selected)) {\n            this.selectedChange.emit(date);\n        }\n    }\n\n    /** Handles year selection in the multiyear view. */\n    yearSelectedInMultiYearView(normalizedYear: D) {\n        this.yearSelected.emit(normalizedYear);\n    }\n\n    /** Handles month selection in the year view. */\n    monthSelectedInYearView(normalizedMonth: D) {\n        this.monthSelected.emit(normalizedMonth);\n    }\n\n    userSelected(): void {\n        this.userSelection.emit();\n    }\n\n    /** Handles year/month selection in the multi-year/year views. */\n    goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n        this.activeDate = date;\n        this.currentView = view;\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Returns the component instance that corresponds to the current calendar view. */\n    private getCurrentViewComponent() {\n        return this.monthView || this.yearView || this.multiYearView;\n    }\n}\n","import {\n    animate,\n    state,\n    style,\n    transition,\n    trigger,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n\n/**\n * Animations used by the mosaic datepicker.\n * @docs-private\n */\nexport const mcDatepickerAnimations: {\n    readonly transformPanel: AnimationTriggerMetadata;\n    readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n    /** Transforms the height of the datepicker's calendar. */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(1, 0.8)'\n        })),\n        transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1, 1)'\n        }))),\n        transition('* => void', animate('100ms linear', style({ opacity: 0 })))\n    ]),\n\n    /** Fades in the content of the calendar. */\n    fadeInCalendar: trigger('fadeInCalendar', [\n        state('void', style({ opacity: 0 })),\n        state('enter', style({ opacity: 1 })),\n\n        // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n        transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n    ])\n};\n\n// todo should be put into polyfils\n// https://github.com/angular/angular/issues/24769\nif (!Element.prototype.matches) {\n    Element.prototype.matches = (Element.prototype as any).msMatchesSelector;\n}\n","// tslint:disable:no-unbound-method\n// tslint:disable:no-magic-numbers\nimport { DOCUMENT } from '@angular/common';\nimport {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    Component,\n    ComponentRef,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { DateAdapter } from '@ptsecurity/cdk/datetime';\nimport { ESCAPE, UP_ARROW } from '@ptsecurity/cdk/keycodes';\nimport {\n    Overlay,\n    OverlayConfig,\n    OverlayRef,\n    IPositionStrategy,\n    IScrollStrategy\n} from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal, IComponentType } from '@ptsecurity/cdk/portal';\nimport {\n    CanColor,\n    CanColorCtor,\n    mixinColor,\n    ThemePalette\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { merge, Observable, Subject, Subscription } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\n\nimport { McCalendar } from './calendar';\nimport { McCalendarCellCssClasses } from './calendar-body';\nimport { mcDatepickerAnimations } from './datepicker-animations';\nimport { createMissingDateImplError } from './datepicker-errors';\nimport { McDatepickerInput } from './datepicker-input';\n\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MC_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-datepicker-scroll-strategy');\n\n/** @docs-private */\n// tslint:disable-next-line:naming-convention\nexport function MC_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => IScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_DATEPICKER_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_DATEPICKER_SCROLL_STRATEGY_FACTORY\n};\n\n// Boilerplate for applying mixins to McDatepickerContent.\n/** @docs-private */\nexport class McDatepickerContentBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McDatepickerContentMixinBase: CanColorCtor & typeof McDatepickerContentBase =\n    mixinColor(McDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * McCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n    selector: 'mc-datepicker__content',\n    templateUrl: 'datepicker-content.html',\n    styleUrls: ['datepicker-content.css'],\n    host: {\n        class: 'mc-datepicker__content',\n        '[@transformPanel]': '\"enter\"'\n    },\n    animations: [\n        mcDatepickerAnimations.transformPanel,\n        mcDatepickerAnimations.fadeInCalendar\n    ],\n    exportAs: 'mcDatepickerContent',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['color']\n})\nexport class McDatepickerContent<D> extends McDatepickerContentMixinBase\n    implements AfterViewInit, CanColor {\n\n    /** Reference to the internal calendar component. */\n    @ViewChild(McCalendar) calendar: McCalendar<D>;\n\n    /** Reference to the datepicker that created the overlay. */\n    datepicker: McDatepicker<D>;\n\n    /** Whether the datepicker is above or below the input. */\n    isAbove: boolean;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    ngAfterViewInit() {\n        this.calendar.focusActiveCell();\n    }\n}\n\n\n// TODO: We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"mcDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n    selector: 'mc-datepicker',\n    template: '',\n    exportAs: 'mcDatepicker',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    providers: [{ provide: McFormFieldControl, useExisting: McDatepicker }]\n})\nexport class McDatepicker<D> implements OnDestroy, CanColor {\n\n    /** The date to open the calendar to initially. */\n    @Input()\n    get startAt(): D | null {\n        // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n        // selected value is.\n        return this._startAt || (this.datepickerInput ? this.datepickerInput.value : null);\n    }\n\n    set startAt(value: D | null) {\n        this._startAt = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** Color palette to use on the datepicker's calendar. */\n    @Input()\n    get color(): ThemePalette {\n        // @ts-ignore:next-line\n        return this._color ||\n            (this.datepickerInput ? this.datepickerInput.getThemePalette() : undefined);\n    }\n\n    set color(value: ThemePalette) {\n        this._color = value;\n    }\n\n    /** Whether the datepicker pop-up should be disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled === undefined && this.datepickerInput ?\n            this.datepickerInput.disabled : !!this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        const newValue = coerceBooleanProperty(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this.disabledChange.next(newValue);\n        }\n    }\n\n    /** Whether the calendar is open. */\n    @Input()\n    get opened(): boolean {\n        return this._opened;\n    }\n\n    set opened(value: boolean) {\n        if (value) {\n            this.open();\n        } else {\n            this.close();\n        }\n    }\n\n    /** The currently selected date. */\n    get selected(): D | null {\n        return this.validSelected;\n    }\n\n    set selected(value: D | null) {\n        this.validSelected = value;\n    }\n\n    /** The minimum selectable date. */\n    get minDate(): D | null {\n        return this.datepickerInput && this.datepickerInput.min;\n    }\n\n    /** The maximum selectable date. */\n    get maxDate(): D | null {\n        return this.datepickerInput && this.datepickerInput.max;\n    }\n\n    get dateFilter(): (date: D | null) => boolean {\n        return this.datepickerInput && this.datepickerInput.dateFilter;\n    }\n\n\n    get value(): D | null {\n        return this.selected;\n    }\n\n    /** An input indicating the type of the custom header component for the calendar, if set. */\n    @Input() calendarHeaderComponent: IComponentType<any>;\n\n    /** The view that the calendar should start in. */\n    @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n    /**\n     * Emits selected year in multiyear view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /**\n     * Emits selected month in year view.\n     * This doesn't imply a change on the selected date.\n     */\n    @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n    /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n    @Input() panelClass: string | string[];\n\n    /** Function that can be used to add custom CSS classes to dates. */\n    @Input() dateClass: (date: D) => McCalendarCellCssClasses;\n\n    /** Emits when the datepicker has been opened. */\n    @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Emits when the datepicker has been closed. */\n    @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n    /** The id for the datepicker calendar. */\n    id: string = `mc-datepicker-${datepickerUid++}`;\n\n    /** A reference to the overlay when the calendar is opened as a popup. */\n    popupRef: OverlayRef;\n\n    /** The input element this datepicker is associated with. */\n    datepickerInput: McDatepickerInput<D>;\n\n    readonly stateChanges: Observable<void> = new Subject<void>();\n\n    /** Emits when the datepicker is disabled. */\n    readonly disabledChange = new Subject<boolean>();\n\n    /** Emits new selected date when selected date changes. */\n    readonly selectedChanged = new Subject<D>();\n    private scrollStrategy: () => IScrollStrategy;\n    private _startAt: D | null;\n    private _disabled: boolean;\n    private _opened = false;\n    private validSelected: D | null = null;\n    private _color: ThemePalette;\n\n    /** A portal containing the calendar for this datepicker. */\n    private calendarPortal: ComponentPortal<McDatepickerContent<D>>;\n\n    /** Reference to the component instantiated in popup mode. */\n    private popupComponentRef: ComponentRef<McDatepickerContent<D>> | null;\n\n    /** The element that was focused before the datepicker was opened. */\n    private focusedElementBeforeOpen: HTMLElement | null = null;\n\n    /** Subscription to value changes in the associated input element. */\n    private inputSubscription = Subscription.EMPTY;\n\n    constructor(private overlay: Overlay,\n                private ngZone: NgZone,\n                private viewContainerRef: ViewContainerRef,\n                @Inject(MC_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n                @Optional() private dateAdapter: DateAdapter<D>,\n                @Optional() private dir: Directionality,\n                @Optional() @Inject(DOCUMENT) private document: any) {\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        this.scrollStrategy = scrollStrategy;\n    }\n\n    ngOnDestroy() {\n        this.close();\n        this.inputSubscription.unsubscribe();\n        this.disabledChange.complete();\n\n        if (this.popupRef) {\n            this.popupRef.dispose();\n            this.popupComponentRef = null;\n        }\n    }\n\n    /** Selects the given date */\n    select(date: D): void {\n        const oldValue = this.selected;\n        this.selected = date;\n        if (!this.dateAdapter.sameDate(oldValue, this.selected)) {\n            this.selectedChanged.next(date);\n        }\n    }\n\n    /** Emits the selected year in multiyear view */\n    selectYear(normalizedYear: D): void {\n        this.yearSelected.emit(normalizedYear);\n    }\n\n    /** Emits selected month in year view */\n    selectMonth(normalizedMonth: D): void {\n        this.monthSelected.emit(normalizedMonth);\n    }\n\n    /**\n     * Register an input with this datepicker.\n     * @param input The datepicker input to register with this datepicker.\n     */\n    registerInput(input: McDatepickerInput<D>): void {\n        if (this.datepickerInput) {\n            throw Error('A McDatepicker can only be associated with a single input.');\n        }\n        this.datepickerInput = input;\n        this.inputSubscription =\n            this.datepickerInput.valueChange.subscribe((value: D | null) => this.selected = value);\n    }\n\n    /** Open the calendar. */\n    open(): void {\n        if (this._opened || this.disabled) {\n            return;\n        }\n        if (!this.datepickerInput) {\n            throw Error('Attempted to open an McDatepicker with no associated input.');\n        }\n        if (this.document) {\n            this.focusedElementBeforeOpen = this.document.activeElement;\n        }\n\n        this.openAsPopup();\n\n        this._opened = true;\n        this.openedStream.emit();\n    }\n\n    /** Close the calendar. */\n    close(): void {\n        if (!this._opened) {\n            return;\n        }\n\n        if (this.popupRef && this.popupRef.hasAttached()) {\n            this.popupRef.detach();\n        }\n\n        if (this.calendarPortal && this.calendarPortal.isAttached) {\n            this.calendarPortal.detach();\n        }\n\n        const completeClose = () => {\n            // The `_opened` could've been reset already if\n            // we got two events in quick succession.\n            if (this._opened) {\n                this._opened = false;\n                this.closedStream.emit();\n                this.focusedElementBeforeOpen = null;\n            }\n        };\n\n        if (this.focusedElementBeforeOpen &&\n            typeof this.focusedElementBeforeOpen.focus === 'function') {\n            // Because IE moves focus asynchronously, we can't count on it being restored before we've\n            // marked the datepicker as closed. If the event fires out of sequence and the element that\n            // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n            // able to close the calendar at all. We work around it by making the logic, that marks\n            // the datepicker as closed, async as well.\n            this.focusedElementBeforeOpen.focus();\n            setTimeout(completeClose);\n        } else {\n            completeClose();\n        }\n    }\n\n    /** Open the calendar as a popup. */\n    private openAsPopup(): void {\n        if (!this.calendarPortal) {\n            this.calendarPortal = new ComponentPortal<McDatepickerContent<D>>(McDatepickerContent,\n                this.viewContainerRef);\n        }\n\n        if (!this.popupRef) {\n            this.createPopup();\n        }\n\n        if (!this.popupRef.hasAttached()) {\n            this.popupComponentRef = this.popupRef.attach(this.calendarPortal);\n            this.popupComponentRef.instance.datepicker = this;\n            this.setColor();\n\n            // Update the position once the calendar has rendered.\n            this.ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n                this.popupRef.updatePosition();\n            });\n        }\n    }\n\n    /** Create the popup. */\n    private createPopup(): void {\n        const overlayConfig = new OverlayConfig({\n            positionStrategy: this.createPopupPositionStrategy(),\n            hasBackdrop: true,\n            backdropClass: 'mc-overlay-transparent-backdrop',\n            direction: this.dir,\n            scrollStrategy: this.scrollStrategy(),\n            panelClass: 'mc-datepicker__popup'\n        });\n\n        this.popupRef = this.overlay.create(overlayConfig);\n        this.popupRef.overlayElement.setAttribute('role', 'dialog');\n\n        merge(\n            this.popupRef.backdropClick(),\n            this.popupRef.detachments(),\n            this.popupRef.keydownEvents().pipe(filter((event) => {\n                // Closing on alt + up is only valid when there's an input associated with the datepicker.\n                // tslint:disable-next-line:deprecation\n                return event.keyCode === ESCAPE || (this.datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n            }))\n        ).subscribe(() => this.close());\n    }\n\n    /** Create the popup PositionStrategy. */\n    private createPopupPositionStrategy(): IPositionStrategy {\n        return this.overlay.position()\n            .flexibleConnectedTo(this.datepickerInput.elementRef)\n            .withTransformOriginOn('.mc-datepicker__content')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(8)\n            .withLockedPosition()\n            .withPositions([\n                {\n                    originX: 'start',\n                    originY: 'bottom',\n                    overlayX: 'start',\n                    overlayY: 'top'\n                },\n                {\n                    originX: 'start',\n                    originY: 'top',\n                    overlayX: 'start',\n                    overlayY: 'bottom'\n                },\n                {\n                    originX: 'end',\n                    originY: 'bottom',\n                    overlayX: 'end',\n                    overlayY: 'top'\n                },\n                {\n                    originX: 'end',\n                    originY: 'top',\n                    overlayX: 'end',\n                    overlayY: 'bottom'\n                }\n            ]);\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Passes the current theme color along to the calendar overlay. */\n    private setColor(): void {\n        const color = this.color;\n        if (this.popupComponentRef) {\n            this.popupComponentRef.instance.color = color;\n        }\n    }\n}\n","import {\n    Output,\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef, Input,\n    OnDestroy, EventEmitter,\n    ViewEncapsulation, HostBinding\n} from '@angular/core';\n\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { SPACE } from '@ptsecurity/cdk/keycodes';\n\n\n@Component({\n    selector: 'mc-card',\n    templateUrl: './card.component.html',\n    styleUrls: ['./card.component.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['color'],\n    host: {\n        class: 'mc-card',\n        '[class.mc-card_readonly]': 'readonly',\n        '[class.mc-card_selected]': 'selected',\n        '(keydown)': 'onKeyDown($event)',\n        '(click)': 'onClick($event)'\n    }\n})\nexport class McCard implements OnDestroy {\n    get tabIndex(): number | null {\n        return this.readonly ? null : this._tabIndex;\n    }\n\n    @HostBinding('attr.tabIndex')\n    @Input()\n    set tabIndex(value: number | null) {\n        this._tabIndex = value;\n    }\n\n    @Input()\n    readonly = false;\n\n    @Input()\n    selected = false;\n\n    @Output()\n    selectedChange = new EventEmitter<boolean>();\n\n    private _tabIndex: number | null = 0;\n\n    constructor(private _elementRef: ElementRef, private _focusMonitor: FocusMonitor) {\n        this._focusMonitor.monitor(this._elementRef.nativeElement, false);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this.hostElement.focus();\n    }\n\n    onClick($event: MouseEvent) {\n        if (!this.readonly) {\n            $event.stopPropagation();\n\n            this.selectedChange.emit(!this.selected);\n        }\n    }\n\n    private get hostElement() {\n        return this._elementRef.nativeElement;\n    }\n\n    onKeyDown($event: KeyboardEvent) {\n        switch ($event.keyCode) {\n            case SPACE:\n                if (!this.readonly) {\n                    $event.preventDefault();\n                    this.selectedChange.emit(!this.selected);\n                }\n                break;\n            default:\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McCard\n} from './card.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [McCard],\n    declarations: [McCard]\n})\nexport class McCardModule {}\n","import { InjectionToken } from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type McCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MC_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<McCheckboxClickAction>('mc-checkbox-click-action');\n","import {\n    AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport {\n    CanColor, CanColorCtor,\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\nimport { MC_CHECKBOX_CLICK_ACTION, McCheckboxClickAction } from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mc-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McCheckbox),\n    multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n    /** The initial state of the component before any user interaction. */\n    Init,\n    /** The state representing the component when it's becoming checked. */\n    Checked,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate\n}\n\n/** Change event object emitted by McCheckbox. */\nexport class McCheckboxChange {\n    /** The source McCheckbox of the event. */\n    source: McCheckbox;\n    /** The new `checked` value of the checkbox. */\n    checked: boolean;\n}\n\n// Boilerplate for applying mixins to McCheckbox.\n/** @docs-private */\nexport class McCheckboxBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\nexport const _McCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof McCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisabled(McCheckboxBase)));\n\n\n/**\n * A mosaic checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A McCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n */\n@Component({\n    selector: 'mc-checkbox',\n    templateUrl: 'checkbox.html',\n    styleUrls: ['checkbox.css'],\n    exportAs: 'mcCheckbox',\n    host: {\n        class: 'mc-checkbox',\n        '[id]': 'id',\n        '[attr.id]': 'id',\n        '[class.mc-indeterminate]': 'indeterminate',\n        '[class.mc-checked]': 'checked',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-checkbox-label-before]': 'labelPosition == \"before\"'\n    },\n    providers: [MC_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCheckbox extends _McCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex {\n\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     */\n    @Input('aria-label') ariaLabel: string = '';\n\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n    private _uniqueId: string = `mc-checkbox-${++nextUniqueId}`;\n\n    /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n    @Input() id: string = this._uniqueId;\n\n    /** Returns the unique id for the visual hidden input. */\n    get inputId(): string {\n        return `${this.id || this._uniqueId}-input`;\n    }\n\n    /** Whether the checkbox is required. */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    private _required: boolean;\n\n    /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n    @Input() labelPosition: 'before' | 'after' = 'after';\n\n    /** Name value will be applied to the input element if present */\n    @Input() name: string | null = null;\n\n    /** Event emitted when the checkbox's `checked` value changes. */\n    @Output() readonly change: EventEmitter<McCheckboxChange> =\n        new EventEmitter<McCheckboxChange>();\n\n    /** Event emitted when the checkbox's `indeterminate` value changes. */\n    @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** The value attribute of the native input element */\n    @Input() value: string;\n\n    /** The native `<input type=\"checkbox\">` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * @docs-private\n     */\n    _onTouched: () => any = () => {\n    }\n\n    private _currentAnimationClass: string = '';\n\n    private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n    private _controlValueAccessorChangeFn: (value: any) => void = () => {\n    }\n\n    constructor(elementRef: ElementRef,\n                private _changeDetectorRef: ChangeDetectorRef,\n                private _focusMonitor: FocusMonitor,\n                @Attribute('tabindex') tabIndex: string,\n                @Optional() @Inject(MC_CHECKBOX_CLICK_ACTION)\n                private _clickAction: McCheckboxClickAction) {\n        super(elementRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._inputElement.nativeElement)\n            .subscribe((focusOrigin) => this._onInputFocusChange(focusOrigin));\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    }\n\n    /**\n     * Whether the checkbox is checked.\n     */\n    @Input()\n    get checked(): boolean {\n        return this._checked;\n    }\n\n    set checked(value: boolean) {\n        if (value != this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _checked: boolean = false;\n\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value != this.disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    @Input()\n    get indeterminate(): boolean {\n        return this._indeterminate;\n    }\n\n    set indeterminate(value: boolean) {\n        const changed = value != this._indeterminate;\n        this._indeterminate = value;\n\n        if (changed) {\n            if (this._indeterminate) {\n                this._transitionCheckState(TransitionCheckState.Indeterminate);\n            } else {\n                this._transitionCheckState(\n                    this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n    }\n\n    private _indeterminate: boolean = false;\n\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // This method is getting called whenever the label of the checkbox changes.\n        // Since the checkbox uses the OnPush strategy we need to notify it about the change\n        // that has been recognized by the cdkObserveContent directive.\n        this._changeDetectorRef.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any) {\n        this.checked = !!value;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this._onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n    }\n\n    _getAriaChecked(): 'true' | 'false' | 'mixed' {\n        return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n    }\n\n    private _transitionCheckState(newState: TransitionCheckState) {\n        const oldState = this._currentCheckState;\n        const element: HTMLElement = this._elementRef.nativeElement;\n\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n\n        this._currentCheckState = newState;\n\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n        }\n    }\n\n    private _emitChangeEvent() {\n        const event = new McCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    }\n\n    /** Function is called whenever the focus changes for the input element. */\n    private _onInputFocusChange(focusOrigin: FocusOrigin) {\n        if (focusOrigin) {\n            this._onTouched();\n        }\n    }\n\n    /** Toggles the `checked` state of the checkbox. */\n    toggle(): void {\n        this.checked = !this.checked;\n    }\n\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event\n     */\n    _onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && this._clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && this._clickAction !== 'check') {\n\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n\n            this.toggle();\n            this._transitionCheckState(\n                this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        } else if (!this.disabled && this._clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mc-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n\n    /** Focuses the checkbox. */\n    focus(): void {\n        this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n    }\n\n    _onInteractionEvent(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n}\n","import {\n    Directive,\n    forwardRef,\n    Provider\n} from '@angular/core';\nimport {\n    CheckboxRequiredValidator,\n    NG_VALIDATORS\n} from '@angular/forms';\n\n\nexport const MC_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McCheckboxRequiredValidator),\n    multi: true\n};\n\n/**\n * Validator for Mosaic checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mc-checkbox`.\n */\n@Directive({\n    selector: `mc-checkbox[required][formControlName],\n             mc-checkbox[required][formControl], mc-checkbox[required][ngModel]`,\n    providers: [MC_CHECKBOX_REQUIRED_VALIDATOR],\n    host: { '[attr.required]': 'required ? \"\" : null' }\n})\nexport class McCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McCheckbox } from './checkbox';\nimport { McCheckboxRequiredValidator } from './checkbox-required-validator';\n\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [McCheckbox, McCheckboxRequiredValidator],\n    declarations: [McCheckbox, McCheckboxRequiredValidator]\n})\nexport class McCheckboxModule {\n}\n","import { InjectionToken } from '@angular/core';\n\n\nexport const MC_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{ value: any }>('MC_INPUT_VALUE_ACCESSOR');\n","function sanitizeNumber(value: number): number | null {\n    return !isFinite(value) || isNaN(value)\n        ? null\n        : value;\n}\n\nfunction getPrecision(value: number): number {\n    const arr = value.toString().split('.');\n\n    return arr.length === 1\n        ? 1\n        // tslint:disable-next-line:no-magic-numbers\n        :  Math.pow(10, arr[1].length);\n}\n\nfunction add(value1: number, value2: number) {\n    const precision = Math.max(getPrecision(value1), getPrecision(value2));\n\n    const res = (value1 * precision + value2 * precision) / precision;\n\n    return sanitizeNumber(res);\n}\n\nexport const stepUp = (value: number | null,\n                       max: number,\n                       min: number,\n                       step: number\n): number | null => {\n    let res;\n\n    if (value === null) {\n        res = add(min, step);\n\n        return res === null ? null : Math.min(res, max);\n    }\n\n    res = add(value, step);\n\n    return res === null ? null : Math.max(Math.min(res, max), min);\n};\n\nexport const stepDown = (value: number | null,\n                         max: number,\n                         min: number,\n                         step: number\n): number | null => {\n    let res;\n\n    if (value === null) {\n        res = add(max, -step);\n\n        return res === null ? null : Math.max(res, min);\n    }\n\n    res = add(value, -step);\n\n    return res === null ? null : Math.min(Math.max(res, min), max);\n};\n","import {\n    Attribute,\n    Directive, DoCheck, ElementRef, Inject, Input, OnChanges,\n    OnDestroy, Optional, Self\n} from '@angular/core';\nimport {\n    FormGroupDirective,\n    NgControl,\n    NgForm, NgModel\n} from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport {\n    END, C, V, X, A, DELETE, BACKSPACE, TAB, ENTER,\n    ESCAPE, ZERO, NINE, NUMPAD_ZERO, NUMPAD_NINE, NUMPAD_MINUS, DASH,\n    FF_MINUS, LEFT_ARROW, RIGHT_ARROW, HOME, UP_ARROW, DOWN_ARROW, F1, F12\n} from '@ptsecurity/cdk/keycodes';\nimport { getSupportedInputTypes, Platform } from '@ptsecurity/cdk/platform';\nimport {\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    mixinErrorState\n} from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl, McFormFieldNumberControl } from '@ptsecurity/mosaic/form-field';\nimport { Subject } from 'rxjs';\n\nimport { getMcInputUnsupportedTypeError } from './input-errors';\nimport { MC_INPUT_VALUE_ACCESSOR } from './input-value-accessor';\nimport { stepDown, stepUp } from './stepperUtils';\n\n\nconst MC_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\n\nexport const BIG_STEP = 10;\nexport const SMALL_STEP = 1;\n\nlet nextUniqueId = 0;\n\nexport class McInputBase {\n    constructor(public defaultErrorStateMatcher: ErrorStateMatcher,\n                public parentForm: NgForm,\n                public parentFormGroup: FormGroupDirective,\n                public ngControl: NgControl) {\n    }\n}\n\nexport const _McInputMixinBase: CanUpdateErrorStateCtor & typeof McInputBase = mixinErrorState(McInputBase);\n\n\n@Directive({\n    selector: `input[mcInput][type=\"number\"]`,\n    exportAs: 'mcNumericalInput',\n    providers: [NgModel, { provide: McFormFieldNumberControl, useExisting: McNumberInput }],\n    host: {\n        '(blur)': '_focusChanged(false)',\n        '(focus)': '_focusChanged(true)',\n        '(paste)': 'onPaste($event)',\n        '(keydown)': 'onKeyDown($event)'\n    }\n})\nexport class McNumberInput implements McFormFieldNumberControl<any> {\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    @Input()\n    bigStep: number;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    @Input()\n    step: number;\n\n    @Input()\n    min: number;\n\n    @Input()\n    max: number;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    value: any;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldNumberControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    private readonly _host: HTMLInputElement;\n\n    constructor(\n        private _platform: Platform ,\n        private _elementRef: ElementRef,\n        private _model: NgModel,\n        @Attribute('step') step: string,\n        @Attribute('big-step') bigStep: string,\n        @Attribute('min') min: string,\n        @Attribute('max') max: string\n    ) {\n        this.step = this.isDigit(step) ? parseFloat(step) : SMALL_STEP;\n        this.bigStep = this.isDigit(bigStep) ? parseFloat(bigStep) : BIG_STEP;\n        this.min = this.isDigit(min) ? parseFloat(min) : -Infinity;\n        this.max = this.isDigit(max) ? parseFloat(max) : Infinity;\n\n        this._host = this._elementRef.nativeElement;\n\n        const self = this;\n\n        if ('valueAsNumber' in this._host) {\n            Object.defineProperty(Object.getPrototypeOf(this._host), 'valueAsNumber', {\n                // tslint:disable-next-line:no-reserved-keywords\n                get() {\n                    const res = parseFloat(self.normalizeSplitter(this.value));\n\n                    return isNaN(res) ? null : res;\n                }\n            });\n        }\n    }\n\n    _focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent) {\n        // tslint:disable-next-line:deprecation\n        const keyCode = event.keyCode;\n\n        const isCtrlA = (e) => e.keyCode === A && (e.ctrlKey || e.metaKey);\n        const isCtrlC = (e) => e.keyCode === C && (e.ctrlKey || e.metaKey);\n        const isCtrlV = (e) => e.keyCode === V && (e.ctrlKey || e.metaKey);\n        const isCtrlX = (e) => e.keyCode === X && (e.ctrlKey || e.metaKey);\n\n        const isFKey = (e) => e.keyCode >= F1 && e.keyCode <= F12;\n\n        const isNumber = (e) => (e.keyCode >= ZERO && e.keyCode <= NINE) ||\n            (e.keyCode >= NUMPAD_ZERO && e.keyCode <= NUMPAD_NINE);\n\n        const minuses = [NUMPAD_MINUS, DASH, FF_MINUS];\n        const serviceKeys = [DELETE, BACKSPACE, TAB, ESCAPE, ENTER];\n        const arrows = [LEFT_ARROW, RIGHT_ARROW];\n        const allowedKeys =  [HOME, END].concat(arrows).concat(serviceKeys).concat(minuses);\n\n        const isIEPeriod = (e) => e.key === '.' || e.key === 'Decimal';\n        const isNotIEPeriod = (e) => e.key === '.' || e.key === ',';\n\n        // Decimal is for IE\n        const isPeriod = (e) => this._platform.EDGE || this._platform.TRIDENT\n            ? isIEPeriod(e)\n            : isNotIEPeriod(e);\n\n        if (allowedKeys.indexOf(keyCode) !== -1 ||\n            isCtrlA(event) ||\n            isCtrlC(event) ||\n            isCtrlV(event) ||\n            isCtrlX(event) ||\n            isFKey(event) ||\n            isPeriod(event)\n        ) {\n            // let it happen, don't do anything\n            return;\n        }\n        // Ensure that it is not a number and stop the keypress\n        if (event.shiftKey || !isNumber(event)) {\n            event.preventDefault();\n\n            // process steps\n            const step = event.shiftKey ? this.bigStep : this.step;\n\n            if (keyCode === UP_ARROW) {\n                this.stepUp(step);\n            }\n\n            if (keyCode === DOWN_ARROW) {\n                this.stepDown(step);\n            }\n        }\n    }\n\n    onPaste(event) {\n        let value = event.clipboardData.getData('text');\n        value = this.normalizeSplitter(value);\n\n        if (!this.isDigit(value)) {\n            event.preventDefault();\n        }\n    }\n\n    stepUp(step: number) {\n        this._elementRef.nativeElement.focus();\n        const res = stepUp(this._host.valueAsNumber, this.max, this.min, step);\n        this._host.value = res === null ? '' : res.toString();\n        this._model.update.emit(this._host.valueAsNumber);\n    }\n\n    stepDown(step: number) {\n        this._elementRef.nativeElement.focus();\n        const res = stepDown(this._host.valueAsNumber, this.max, this.min, step);\n        this._host.value = res === null ? '' : res.toString();\n        this._model.update.emit(this._host.valueAsNumber);\n    }\n\n    private normalizeSplitter(value: string): string {\n        return value ? value.replace(/,/g, '.') : value;\n    }\n\n    private isDigit(value: string): boolean {\n        return this.isFloat(value) || this.isInt(value);\n    }\n\n    private isFloat(value: string): boolean {\n        return /^-?\\d+\\.\\d+$/.test(value);\n    }\n\n    private isInt(value: string): boolean {\n        return /^-?\\d+$/.test(value);\n    }\n}\n\n@Directive({\n    selector: `input[mcInput]`,\n    exportAs: 'mcInput',\n    host: {\n        class: 'mc-input',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '(blur)': '_focusChanged(false)',\n        '(focus)': '_focusChanged(true)',\n        '(input)': '_onInput()'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McInput }]\n})\nexport class McInput extends _McInputMixinBase implements McFormFieldControl<any>, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-input';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this._uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    // tslint:disable no-reserved-keywords\n    /** Input type of the element. */\n    @Input()\n    get type(): string {\n        return this._type;\n    }\n\n    set type(value: string) {\n        this._type = value || 'text';\n        this._validateType();\n\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    // tslint:enable no-reserved-keywords\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this._inputValueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n\n    protected _uid = `mc-input-${nextUniqueId++}`;\n    protected _previousNativeValue: any;\n    protected _disabled = false;\n    protected _id: string;\n    protected _required = false;\n    protected _type = 'text';\n    protected _neverEmptyInputTypes = [\n        'date',\n        'datetime',\n        'datetime-local',\n        'month',\n        'time',\n        'week'\n    ].filter((t) => getSupportedInputTypes().has(t));\n\n    private _inputValueAccessor: { value: any };\n\n    constructor(protected _elementRef: ElementRef,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() parentForm: NgForm,\n                @Optional() parentFormGroup: FormGroupDirective,\n                defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_INPUT_VALUE_ACCESSOR) inputValueAccessor: any) {\n        super(defaultErrorStateMatcher, parentForm, parentFormGroup, ngControl);\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n        this._previousNativeValue = this.value;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n    }\n\n    /** Focuses the input. */\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Does some manual dirty checking on the native input `value` property. */\n    protected _dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Make sure the input is a supported type. */\n    protected _validateType() {\n        if (MC_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n            throw getMcInputUnsupportedTypeError(this._type);\n        }\n    }\n\n    /** Checks whether the input type is one of the types that are never empty. */\n    protected _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n\n    /** Checks whether the input is invalid based on the native validation. */\n    protected _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        const validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n\n        return validity && validity.badInput;\n    }\n}\n\n@Directive({\n    selector: 'input[mcInputMonospace]',\n    exportAs: 'McInputMonospace',\n    host: { class: 'mc-input_monospace' }\n})\nexport class McInputMono {\n}\n","import { Directive, forwardRef, Input, OnChanges, Provider, SimpleChanges } from '@angular/core';\nimport { AbstractControl, NG_VALIDATORS, ValidationErrors, Validator, ValidatorFn, Validators } from '@angular/forms';\n\n\nexport const MIN_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MinValidator),\n    multi: true\n};\n\n/**\n * A directive which installs the {@link MinValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `min` attribute.\n *\n * @experimental\n */\n@Directive({\n    selector: '[min][formControlName],[min][formControl],[min][ngModel]',\n    providers: [MIN_VALIDATOR],\n    host: {'[attr.min]': 'min ? min : null'}\n})\nexport class MinValidator implements Validator, OnChanges {\n\n    @Input() min: string;\n    private _validator: ValidatorFn;\n    private _onChange: () => void;\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('min' in changes) {\n            this._createValidator();\n            if (this._onChange) { this._onChange(); }\n        }\n    }\n\n    validate(c: AbstractControl): ValidationErrors | null { return this._validator(c); }\n\n    registerOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n\n    private _createValidator(): void { this._validator = Validators.min(parseInt(this.min, 10)); }\n}\n\n\nexport const MAX_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MaxValidator),\n    multi: true\n};\n\n/**\n * A directive which installs the {@link MaxValidator} for any `formControlName`,\n * `formControl`, or control with `ngModel` that also has a `min` attribute.\n *\n * @experimental\n */\n@Directive({\n    selector: '[max][formControlName],[max][formControl],[max][ngModel]',\n    providers: [MAX_VALIDATOR],\n    host: {\n        '[attr.max]': 'max ? max : null'\n    }\n})\nexport class MaxValidator implements Validator,\n    OnChanges {\n\n    @Input() max: string;\n    private _validator: ValidatorFn;\n    private _onChange: () => void;\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('max' in changes) {\n            this._createValidator();\n            if (this._onChange) { this._onChange(); }\n        }\n    }\n\n    validate(c: AbstractControl): ValidationErrors | null { return this._validator(c); }\n\n    registerOnValidatorChange(fn: () => void): void { this._onChange = fn; }\n\n    private _createValidator(): void { this._validator = Validators.max(parseInt(this.max, 10)); }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McInput, McInputMono, McNumberInput } from './input';\nimport { MaxValidator, MinValidator } from './input-number-validators';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule, FormsModule],\n    exports: [McInput, McNumberInput, McInputMono, MinValidator, MaxValidator],\n    declarations: [McInput, McNumberInput, McInputMono, MinValidator, MaxValidator ]\n})\nexport class McInputModule {\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({ providedIn: 'root' })\nexport class McDatepickerIntl {\n    /**\n     * Stream that emits whenever the labels here are changed. Use this to notify\n     * components if the labels have changed after initialization.\n     */\n    readonly changes: Subject<void> = new Subject<void>();\n\n    /** A label for the calendar popup (used by screen readers). */\n    calendarLabel: string = 'Calendar';\n\n    /** A label for the button used to open the calendar popup (used by screen readers). */\n    openCalendarLabel: string = 'Open calendar';\n\n    /** A label for the previous month button (used by screen readers). */\n    prevMonthLabel: string = 'Previous month';\n\n    /** A label for the next month button (used by screen readers). */\n    nextMonthLabel: string = 'Next month';\n\n    /** A label for the previous year button (used by screen readers). */\n    prevYearLabel: string = 'Previous year';\n\n    /** A label for the next year button (used by screen readers). */\n    nextYearLabel: string = 'Next year';\n\n    /** A label for the previous multi-year button (used by screen readers). */\n    prevMultiYearLabel: string = 'Previous 20 years';\n\n    /** A label for the next multi-year button (used by screen readers). */\n    nextMultiYearLabel: string = 'Next 20 years';\n\n    /** A label for the 'switch to month view' button (used by screen readers). */\n    switchToMonthViewLabel: string = 'Choose date';\n\n    /** A label for the 'switch to year view' button (used by screen readers). */\n    switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","// tslint:disable:no-magic-numbers\nimport {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Input,\n    Output,\n    ViewEncapsulation,\n    NgZone,\n    OnChanges,\n    SimpleChanges\n} from '@angular/core';\nimport { take } from 'rxjs/operators';\n\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type McCalendarCellCssClasses = string | string[] | Set<string> | { [key: string]: any };\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class McCalendarCell {\n    constructor(\n        public value: number,\n        public displayValue: string,\n        public ariaLabel: string,\n        public enabled: boolean,\n        public cssClasses?: McCalendarCellCssClasses\n    ) {\n    }\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n    selector: '[mc-calendar-body]',\n    templateUrl: 'calendar-body.html',\n    styleUrls: ['calendar-body.css'],\n    host: {\n        class: 'mc-calendar__body',\n        role: 'grid',\n        'aria-readonly': 'true'\n    },\n    exportAs: 'mcCalendarBody',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCalendarBody implements OnChanges {\n    /** The label for the table. (e.g. \"Jan 2017\"). */\n    @Input() label: string;\n\n    /** The cells to display in the table. */\n    @Input() rows: McCalendarCell[][];\n\n    /** The value in the table that corresponds to today. */\n    @Input() todayValue: number;\n\n    /** The value in the table that is currently selected. */\n    @Input() selectedValue: number;\n\n    /** The minimum number of free cells needed to fit the label in the first row. */\n    @Input() labelMinRequiredCells: number;\n\n    /** The number of columns in the table. */\n    @Input() numCols = 7;\n\n    /** The cell number of the active cell in the table. */\n    @Input() activeCell = 0;\n\n    /**\n     * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n     * maintained even as the table resizes.\n     */\n    @Input() cellAspectRatio = 1;\n\n    /** Emits when a new value is selected. */\n    @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n    /** The number of blank cells to put at the beginning for the first row. */\n    firstRowOffset: number;\n\n    /** Padding for the individual date cells. */\n    cellPadding: string;\n\n    /** Width of an individual cell. */\n    cellWidth: string;\n\n    constructor(private elementRef: ElementRef<HTMLElement>, private ngZone: NgZone) {\n    }\n\n    cellClicked(cell: McCalendarCell): void {\n        if (cell.enabled) {\n            this.selectedValueChange.emit(cell.value);\n        }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const columnChanges = changes.numCols;\n        // tslint:disable-next-line:no-this-assignment\n        const { rows, numCols } = this;\n\n        if (changes.rows || columnChanges) {\n            this.firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n        }\n\n        if (changes.cellAspectRatio || columnChanges || !this.cellPadding) {\n            this.cellPadding = `${this.cellAspectRatio * 50 / numCols}%`;\n        }\n\n        if (columnChanges || !this.cellWidth) {\n            this.cellWidth = `${100 / numCols}%`;\n        }\n    }\n\n    isActiveCell(rowIndex: number, colIndex: number): boolean {\n        let cellNumber = rowIndex * this.numCols + colIndex;\n\n        // Account for the fact that the first row may not have as many cells.\n        if (rowIndex) {\n            cellNumber -= this.firstRowOffset;\n        }\n\n        return cellNumber === this.activeCell;\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.ngZone.runOutsideAngular(() => {\n            this.ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n                const activeCell: HTMLElement | null =\n                    this.elementRef.nativeElement.querySelector('.mc-calendar__body_active');\n\n                if (activeCell) {\n                    activeCell.focus();\n                }\n            });\n        });\n    }\n}\n","// tslint:disable:no-magic-numbers\nimport {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Inject,\n    Input,\n    Optional,\n    Output,\n    ViewEncapsulation,\n    ViewChild\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { DateAdapter, MC_DATE_FORMATS, McDateFormats } from '@ptsecurity/cdk/datetime';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    PAGE_DOWN,\n    PAGE_UP,\n    RIGHT_ARROW,\n    UP_ARROW,\n    SPACE\n} from '@ptsecurity/cdk/keycodes';\n\nimport { McCalendarBody, McCalendarCell, McCalendarCellCssClasses } from './calendar-body';\nimport { createMissingDateImplError } from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n    selector: 'mc-month-view',\n    templateUrl: 'month-view.html',\n    exportAs: 'mcMonthView',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McMonthView<D> implements AfterContentInit {\n    /**\n     * The date to display in this month view (everything other than the month and year is ignored).\n     */\n    @Input()\n    get activeDate(): D {\n        return this._activeDate;\n    }\n\n    set activeDate(value: D) {\n        const oldActiveDate = this._activeDate;\n        const validDate =\n            this.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();\n        this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n\n        if (!this.hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n            this.init();\n        }\n    }\n\n    /** The currently selected date. */\n    @Input()\n    get selected(): D | null {\n        return this._selected;\n    }\n\n    set selected(value: D | null) {\n        this._selected = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n        this.selectedDate = this.getDateInCurrentMonth(this._selected);\n    }\n\n    /** The minimum selectable date. */\n    @Input()\n    get minDate(): D | null {\n        return this._minDate;\n    }\n\n    set minDate(value: D | null) {\n        this._minDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** The maximum selectable date. */\n    @Input()\n    get maxDate(): D | null {\n        return this._maxDate;\n    }\n\n    set maxDate(value: D | null) {\n        this._maxDate = this.getValidDateOrNull(this.dateAdapter.deserialize(value));\n    }\n\n    /** Function used to filter which dates are selectable. */\n    @Input() dateFilter: (date: D) => boolean;\n\n    /** Function that can be used to add custom CSS classes to dates. */\n    @Input() dateClass: (date: D) => McCalendarCellCssClasses;\n\n    /** Emits when a new date is selected. */\n    @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n    /** Emits when any date is selected. */\n    @Output() readonly userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Emits when any date is activated. */\n    @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n    /** The body of calendar table */\n    @ViewChild(McCalendarBody) mcCalendarBody: McCalendarBody;\n\n    /** The label for this month (e.g. \"January 2017\"). */\n    monthLabel: string;\n\n    /** Grid of calendar cells representing the dates of the month. */\n    weeks: McCalendarCell[][];\n\n    /** The number of blank cells in the first row before the 1st of the month. */\n    firstWeekOffset: number;\n\n    /**\n     * The date of the month that the currently selected Date falls on.\n     * Null if the currently selected Date is in another month.\n     */\n    selectedDate: number | null;\n\n    /** The date of the month that today falls on. Null if today is in another month. */\n    todayDate: number | null;\n\n    /** The names of the weekdays. */\n    weekdays: { long: string; narrow: string }[];\n    private _activeDate: D;\n    private _selected: D | null;\n    private _minDate: D | null;\n    private _maxDate: D | null;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_DATE_FORMATS) private dateFormats: McDateFormats,\n        @Optional() public dateAdapter: DateAdapter<D>,\n        @Optional() private dir?: Directionality\n    ) {\n\n        if (!this.dateAdapter) {\n            throw createMissingDateImplError('DateAdapter');\n        }\n\n        if (!this.dateFormats) {\n            throw createMissingDateImplError('MC_DATE_FORMATS');\n        }\n\n        const firstDayOfWeek = this.dateAdapter.getFirstDayOfWeek();\n        const narrowWeekdays = this.dateAdapter.getDayOfWeekNames('narrow');\n        const longWeekdays = this.dateAdapter.getDayOfWeekNames('long');\n\n        // Rotate the labels for days of the week based on the configured first day of the week.\n        const weekdays = longWeekdays.map((long, i) => {\n            return { long, narrow: narrowWeekdays[i] };\n        });\n        this.weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n        this._activeDate = this.dateAdapter.today();\n    }\n\n    ngAfterContentInit() {\n        this.init();\n    }\n\n    /** Handles when a new date is selected. */\n    dateSelected(date: number) {\n        if (this.selectedDate !== date) {\n            const selectedYear = this.dateAdapter.getYear(this.activeDate);\n            const selectedMonth = this.dateAdapter.getMonth(this.activeDate);\n            const selectedDate = this.dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n            this.selectedChange.emit(selectedDate);\n        }\n\n        this.userSelection.emit();\n    }\n\n    /** Handles keydown events on the calendar body when calendar is in month view. */\n    handleCalendarBodyKeydown(event: KeyboardEvent): void {\n        // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n        // disabled ones from being selected. This may not be ideal, we should look into whether\n        // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n        const oldActiveDate = this._activeDate;\n        const isRtl = this.isRtl();\n\n        // tslint:disable-next-line:deprecation\n        switch (event.keyCode) {\n            case LEFT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n                break;\n            case RIGHT_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n                break;\n            case UP_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, -7);\n                break;\n            case DOWN_ARROW:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, 7);\n                break;\n            case HOME:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate,\n                    1 - this.dateAdapter.getDate(this._activeDate));\n                break;\n            case END:\n                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate,\n                    (this.dateAdapter.getNumDaysInMonth(this._activeDate) -\n                        this.dateAdapter.getDate(this._activeDate)));\n                break;\n            case PAGE_UP:\n                this.activeDate = event.altKey ?\n                    this.dateAdapter.addCalendarYears(this._activeDate, -1) :\n                    this.dateAdapter.addCalendarMonths(this._activeDate, -1);\n                break;\n            case PAGE_DOWN:\n                this.activeDate = event.altKey ?\n                    this.dateAdapter.addCalendarYears(this._activeDate, 1) :\n                    this.dateAdapter.addCalendarMonths(this._activeDate, 1);\n                break;\n            case ENTER:\n            case SPACE:\n                if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n                    this.dateSelected(this.dateAdapter.getDate(this._activeDate));\n                    this.userSelection.emit();\n                    // Prevent unexpected default actions such as form submission.\n                    event.preventDefault();\n                }\n\n                return;\n            default:\n                // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n                return;\n        }\n\n        if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n            this.activeDateChange.emit(this.activeDate);\n        }\n\n        this.focusActiveCell();\n        // Prevent unexpected default actions such as form submission.\n        event.preventDefault();\n    }\n\n    /** Initializes this month view. */\n    init() {\n        this.selectedDate = this.getDateInCurrentMonth(this.selected);\n        this.todayDate = this.getDateInCurrentMonth(this.dateAdapter.today());\n        this.monthLabel =\n            this.dateAdapter.getMonthNames('short')[this.dateAdapter.getMonth(this.activeDate)];\n\n        this.monthLabel = this.monthLabel[0].toLocaleUpperCase() + this.monthLabel.substr(1);\n\n        const firstOfMonth = this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate),\n            this.dateAdapter.getMonth(this.activeDate), 1);\n        this.firstWeekOffset =\n            (DAYS_PER_WEEK + this.dateAdapter.getDayOfWeek(firstOfMonth) -\n                this.dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n        this.createWeekCells();\n        this.changeDetectorRef.markForCheck();\n    }\n\n    /** Focuses the active cell after the microtask queue is empty. */\n    focusActiveCell() {\n        this.mcCalendarBody.focusActiveCell();\n    }\n\n    /** Creates McCalendarCells for the dates in this month. */\n    private createWeekCells() {\n        const daysInMonth = this.dateAdapter.getNumDaysInMonth(this.activeDate);\n        const dateNames = this.dateAdapter.getDateNames();\n\n        this.weeks = [[]];\n\n        for (let i = 0, cell = this.firstWeekOffset; i < daysInMonth; i++, cell++) {\n            if (cell === DAYS_PER_WEEK) {\n                this.weeks.push([]);\n                cell = 0;\n            }\n            const date = this.dateAdapter.createDate(\n                this.dateAdapter.getYear(this.activeDate),\n                this.dateAdapter.getMonth(this.activeDate), i + 1);\n            const enabled = this.shouldEnableDate(date);\n            const ariaLabel = this.dateAdapter.format(date, this.dateFormats.display.dateA11yLabel);\n            const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n            this.weeks[this.weeks.length - 1]\n                .push(new McCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n        }\n    }\n\n    /** Date filter for the month */\n    private shouldEnableDate(date: D): boolean {\n        return !!date &&\n            (!this.dateFilter || this.dateFilter(date)) &&\n            (!this.minDate || this.dateAdapter.compareDate(date, this.minDate) >= 0) &&\n            (!this.maxDate || this.dateAdapter.compareDate(date, this.maxDate) <= 0);\n    }\n\n    /**\n     * Gets the date in this month that the given Date falls on.\n     * Returns null if the given Date is in another month.\n     */\n    private getDateInCurrentMonth(date: D | null): number | null {\n        return date && this.hasSameMonthAndYear(date, this.activeDate) ?\n            this.dateAdapter.getDate(date) : null;\n    }\n\n    /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n    private hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n        return !!(d1 && d2 && this.dateAdapter.getMonth(d1) === this.dateAdapter.getMonth(d2) &&\n            this.dateAdapter.getYear(d1) === this.dateAdapter.getYear(d2));\n    }\n\n    /**\n     * @param obj The object to check.\n     * @returns The given object if it is both a date instance and valid, otherwise null.\n     */\n    private getValidDateOrNull(obj: any): D | null {\n        return (this.dateAdapter.isDateInstance(obj) && this.dateAdapter.isValid(obj)) ? obj : null;\n    }\n\n    /** Determines whether the user has the RTL layout direction. */\n    private isRtl() {\n        return this.dir && this.dir.value === 'rtl';\n    }\n}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    Output,\n    QueryList,\n    TemplateRef,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ActiveDescendantKeyManager } from '@ptsecurity/cdk/a11y';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { MC_OPTION_PARENT_COMPONENT, McOptgroup, McOption } from '@ptsecurity/mosaic/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet uniqueAutocompleteIdCounter = 0;\n\nexport class McAutocompleteSelectedEvent {\n    constructor(public source: McAutocomplete, public option: McOption) {}\n}\n\n/** Default `mc-autocomplete` options that can be overridden. */\n// tslint:disable-next-line naming-convention\nexport interface McAutocompleteDefaultOptions {\n    /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n    autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mc-autocomplete`. */\nexport const MC_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<McAutocompleteDefaultOptions>('mc-autocomplete-default-options', {\n        providedIn: 'root',\n        factory: MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY\n    });\n\n// tslint:disable-next-line naming-convention\nexport function MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): McAutocompleteDefaultOptions {\n    return { autoActiveFirstOption: true };\n}\n\n@Component({\n    selector: 'mc-autocomplete',\n    exportAs: 'mcAutocomplete',\n    templateUrl: 'autocomplete.html',\n    styleUrls: ['autocomplete.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: { class: 'mc-autocomplete' },\n    providers: [\n        { provide: MC_OPTION_PARENT_COMPONENT, useExisting: McAutocomplete }\n    ]\n})\nexport class McAutocomplete implements AfterContentInit {\n    /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n    id: string = `mc-autocomplete-${uniqueAutocompleteIdCounter++}`;\n\n    /** Manages active item in option list based on key events. */\n    keyManager: ActiveDescendantKeyManager<McOption>;\n\n    /** Whether the autocomplete panel should be visible, depending on option length. */\n    showPanel: boolean = false;\n\n    @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n    @ViewChild('panel') panel: ElementRef;\n\n    @ContentChildren(McOption, { descendants: true }) options: QueryList<McOption>;\n\n    @ContentChildren(McOptgroup) optionGroups: QueryList<McOptgroup>;\n\n    /** Function that maps an option's control value to its display value in the trigger. */\n    @Input() displayWith: ((value: any) => string) | null = null;\n\n    /**\n     * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n     * match the width of its host.\n     */\n    @Input() panelWidth: string | number;\n\n    /** Event that is emitted whenever an option from the list is selected. */\n    @Output() readonly optionSelected: EventEmitter<McAutocompleteSelectedEvent> =\n        new EventEmitter<McAutocompleteSelectedEvent>();\n\n    /** Event that is emitted when the autocomplete panel is opened. */\n    @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n    /** Event that is emitted when the autocomplete panel is closed. */\n    @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n    /**\n     * Takes classes set on the host mc-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    get classList() {\n        return this._classList;\n    }\n\n    @Input('class')\n    set classList(value: string) {\n        if (value && value.length) {\n            value.split(' ')\n                .forEach((className) => this._classList[className.trim()] = true);\n\n            this.elementRef.nativeElement.className = '';\n        }\n    }\n\n    private _classList: any = {};\n\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MC_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     */\n    @Input()\n    get autoActiveFirstOption(): boolean {\n        return this._autoActiveFirstOption;\n    }\n\n    set autoActiveFirstOption(value: boolean) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n\n    private _autoActiveFirstOption: boolean;\n\n    get isOpen(): boolean {\n        return this._isOpen && this.showPanel;\n    }\n\n    set isOpen(value: boolean) {\n        this._isOpen = value;\n    }\n\n    private _isOpen: boolean = false;\n\n    constructor(\n        private changeDetectorRef: ChangeDetectorRef,\n        private elementRef: ElementRef<HTMLElement>,\n        @Inject(MC_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: McAutocompleteDefaultOptions\n    ) {\n        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    }\n\n    ngAfterContentInit() {\n        this.keyManager = new ActiveDescendantKeyManager<McOption>(this.options);\n        this.setVisibility();\n    }\n\n    setScrollTop(scrollTop: number): void {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n\n    getScrollTop(): number {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n\n    setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._classList['mc-autocomplete_visible'] = this.showPanel;\n        this._classList['mc-autocomplete_hidden'] = !this.showPanel;\n\n        this.changeDetectorRef.markForCheck();\n    }\n\n    emitSelectEvent(option: McOption): void {\n        const event = new McAutocompleteSelectedEvent(this, option);\n\n        this.optionSelected.emit(event);\n    }\n\n    onKeydown(event: KeyboardEvent): any {\n        this.keyManager.onKeydown(event);\n    }\n}\n\n","import { Directive, ElementRef } from '@angular/core';\n\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n    selector: '[mcAutocompleteOrigin]',\n    exportAs: 'mcAutocompleteOrigin'\n})\nexport class McAutocompleteOrigin {\n    constructor(public elementRef: ElementRef<HTMLElement>) {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { McOptionModule, McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McAutocompleteOrigin } from './autocomplete-origin.directive';\nimport {\n    McAutocompleteTrigger,\n    MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './autocomplete-trigger.directive';\nimport { McAutocomplete } from './autocomplete.component';\n\n\n@NgModule({\n    imports: [McOptionModule, OverlayModule, McCommonModule, CommonModule],\n    exports: [\n        McAutocomplete,\n        McOptionModule,\n        McAutocompleteTrigger,\n        McAutocompleteOrigin,\n        McCommonModule\n    ],\n    declarations: [McAutocomplete, McAutocompleteTrigger, McAutocompleteOrigin],\n    providers: [MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class McAutocompleteModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    OnDestroy,\n    ViewEncapsulation\n} from '@angular/core';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { mixinColor, mixinDisabled, CanColor, CanDisable, CanDisableCtor, CanColorCtor } from '@ptsecurity/mosaic/core';\n\n\n@Directive({\n    selector: 'button[mc-button], a[mc-button]',\n    host: {\n        '[class.mc-button]': '!isIconButton',\n        '[class.mc-icon-button]': 'isIconButton'\n    }\n})\nexport class McButtonCssStyler {\n    nativeElement: Element;\n\n    get isIconButton(): boolean {\n        return this.icons.length > 0;\n    }\n\n    private icons: HTMLElement[] = [];\n\n    constructor(elementRef: ElementRef) {\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        /**\n         * Here we had to use native selectors due to number of angular issues about ContentChildren limitations\n         * https://github.com/angular/angular/issues/16299\n         * https://github.com/angular/angular/issues/8563\n         * https://github.com/angular/angular/issues/14769\n         */\n        this.icons = Array.from(this.nativeElement.querySelectorAll('.mc-icon'));\n        this.addClassModificatorForIcons();\n    }\n\n    private addClassModificatorForIcons() {\n        const twoIcons = 2;\n\n        if (this.icons.length === 1) {\n            const iconElement = this.icons[0];\n            const COMMENT_NODE = 8;\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling && iconElement.nextSibling.nodeType !== COMMENT_NODE) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-icon-button_left');\n                }\n\n                if (iconElement.previousSibling && iconElement.previousSibling.nodeType !== COMMENT_NODE) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-icon-button_right');\n                }\n            }\n        } else if (this.icons.length === twoIcons) {\n            const firstIconElement = this.icons[0];\n            const secondIconElement = this.icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n}\n\nexport class McButtonBase {\n    // tslint:disable-next-line:naming-convention\n    constructor(public _elementRef: ElementRef) {}\n}\n\n// tslint:disable-next-line:naming-convention\nexport const McButtonMixinBase:\n    CanDisableCtor &\n    CanColorCtor &\n    typeof McButtonBase =\n        mixinColor(mixinDisabled(McButtonBase));\n\n\n@Component({\n    selector: 'button[mc-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[disabled]': 'disabled || null'\n    }\n})\nexport class McButton extends McButtonMixinBase implements OnDestroy, CanDisable, CanColor {\n    constructor(elementRef: ElementRef, private _focusMonitor: FocusMonitor) {\n        super(elementRef);\n\n        this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this.getHostElement().focus();\n    }\n\n    getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n\n\n@Component({\n    selector: 'a[mc-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[attr.tabindex]': 'disabled ? -1 : 0',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': 'haltDisabledEvents($event)'\n    }\n})\nexport class McAnchor extends McButton {\n    constructor(focusMonitor: FocusMonitor, elementRef: ElementRef) {\n        super(elementRef, focusMonitor);\n    }\n\n    haltDisabledEvents(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McButton,\n    McAnchor,\n    McButtonCssStyler\n} from './button.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McButton,\n        McAnchor,\n        McButtonCssStyler\n    ],\n    declarations: [\n        McButton,\n        McAnchor,\n        McButtonCssStyler\n    ]\n})\nexport class McButtonModule {}\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChildren,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList,\n    ViewEncapsulation,\n    ViewChild\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { McButton } from '@ptsecurity/mosaic/button';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/**\n * Provider Expression that allows mc-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McButtonToggleGroup),\n    multi: true\n};\n\n/** Change event object emitted by MсButtonToggle. */\nexport class McButtonToggleChange {\n    constructor(\n        /** The MсButtonToggle that emits the event. */\n        public source: McButtonToggle,\n        /** The value assigned to the MсButtonToggle. */\n        public value: any) {\n    }\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n    selector: 'mc-button-toggle-group',\n    providers: [MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR],\n    host: {\n        role: 'group',\n        class: 'mc-button-toggle-group',\n        '[class.mc-button-toggle-vertical]': 'vertical'\n    },\n    exportAs: 'mcButtonToggleGroup'\n})\nexport class McButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n\n    /** Whether the toggle group is vertical. */\n    @Input()\n    get vertical(): boolean {\n        return this._vertical;\n    }\n\n    set vertical(value: boolean) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n\n    /** Value of the toggle group. */\n    @Input()\n    get value(): any {\n        const selected = this.selectionModel ? this.selectionModel.selected : [];\n\n        if (this.multiple) {\n            return selected.map((toggle) => toggle.value);\n        }\n\n        return selected[0] ? selected[0].value : undefined;\n    }\n\n    set value(newValue: any) {\n        this.setSelectionByValue(newValue);\n        this.valueChange.emit(this.value);\n    }\n\n    /** Selected button toggles in the group. */\n    get selected(): any {\n        const selected = this.selectionModel.selected;\n\n        return this.multiple ? selected : (selected[0] || null);\n    }\n\n    /** Whether multiple button toggles can be selected. */\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    /** Child button toggle buttons. */\n    @ContentChildren(forwardRef(() => McButtonToggle)) buttonToggles: QueryList<McButtonToggle>;\n\n    /** Whether multiple button toggle group is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        if (!this.buttonToggles) {\n            return;\n        }\n\n        this.buttonToggles.forEach((toggle) => toggle.markForCheck());\n    }\n\n    /**\n     * Event that emits whenever the value of the group changes.\n     * Used to facilitate two-way data binding.\n     * @docs-private\n     */\n    @Output() readonly valueChange = new EventEmitter<any>();\n\n    /** Event emitted when the group's value changes. */\n    @Output() readonly change: EventEmitter<McButtonToggleChange> =\n        new EventEmitter<McButtonToggleChange>();\n    private _vertical = false;\n    private _multiple = false;\n    private _disabled = false;\n    private selectionModel: SelectionModel<McButtonToggle>;\n\n    /**\n     * Reference to the raw value that the consumer tried to assign. The real\n     * value will exclude any values from this one that don't correspond to a\n     * toggle. Useful for the cases where the value is assigned before the toggles\n     * have been initialized or at the same that they're being swapped out.\n     */\n    private rawValue: any;\n\n    constructor(private _changeDetector: ChangeDetectorRef) {}\n\n    /**\n     * The method to be called in order to update ngModel.\n     * Now `ngModel` binding is not supported in multiple selection mode.\n     */\n    // tslint:disable-next-line:no-empty\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n    // tslint:disable-next-line:no-empty\n    onTouched: () => any = () => {};\n\n    ngOnInit() {\n        this.selectionModel = new SelectionModel<McButtonToggle>(this.multiple, undefined, false);\n    }\n\n    ngAfterContentInit() {\n        this.selectionModel.select(...this.buttonToggles.filter((toggle) => toggle.checked));\n        this.disabled = this._disabled;\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value Value to be set to the model.\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        const selected = this.selected;\n        const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n        const event = new McButtonToggleChange(source, this.value);\n        this.controlValueAccessorChangeFn(event.value);\n        this.change.emit(event);\n    }\n\n    /**\n     * Syncs a button toggle's selected state with the model value.\n     * @param toggle Toggle to be synced.\n     * @param select Whether the toggle should be selected.\n     * @param isUserInput Whether the change was a result of a user interaction.\n     */\n    syncButtonToggle(toggle: McButtonToggle, select: boolean, isUserInput = false) {\n        // Deselect the currently-selected toggle, if we're in single-selection\n        // mode and the button being toggled isn't selected at the moment.\n        if (!this.multiple && this.selected && !toggle.checked) {\n            (this.selected as McButtonToggle).checked = false;\n        }\n\n        if (select) {\n            this.selectionModel.select(toggle);\n        } else {\n            this.selectionModel.deselect(toggle);\n        }\n\n        // Only emit the change event for user input.\n        if (isUserInput) {\n            this.emitChangeEvent();\n        }\n\n        // Note: we emit this one no matter whether it was a user interaction, because\n        // it is used by Angular to sync up the two-way data binding.\n        this.valueChange.emit(this.value);\n    }\n\n    /** Checks whether a button toggle is selected. */\n    isSelected(toggle: McButtonToggle) {\n        return this.selectionModel.isSelected(toggle);\n    }\n\n    /** Determines whether a button toggle should be checked on init. */\n    isPrechecked(toggle: McButtonToggle) {\n        if (this.rawValue === undefined) {\n            return false;\n        }\n\n        if (this.multiple && Array.isArray(this.rawValue)) {\n            return this.rawValue.some((value) => toggle.value != null && value === toggle.value);\n        }\n\n        return toggle.value === this.rawValue;\n    }\n\n    /** Updates the selection state of the toggles in the group based on a value. */\n    private setSelectionByValue(value: any | any[]) {\n        this.rawValue = value;\n\n        if (!this.buttonToggles) {\n            return;\n        }\n\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw Error('Value must be an array in multiple-selection mode.');\n            }\n\n            this.clearSelection();\n            value.forEach((currentValue: any) => this.selectValue(currentValue));\n        } else {\n            this.clearSelection();\n            this.selectValue(value);\n        }\n    }\n\n    /** Clears the selected toggles. */\n    private clearSelection() {\n        this.selectionModel.clear();\n        this.buttonToggles.forEach((toggle) => toggle.checked = false);\n    }\n\n    /** Selects a value if there's a toggle that corresponds to it. */\n    private selectValue(value: any) {\n        const correspondingOption = this.buttonToggles.find((toggle) => {\n            return toggle.value != null && toggle.value === value;\n        });\n\n        if (correspondingOption) {\n            correspondingOption.checked = true;\n            this.selectionModel.select(correspondingOption);\n        }\n    }\n}\n\n/** Single button inside of a toggle group. */\n@Component({\n    selector: 'mc-button-toggle',\n    template: `\n        <button\n            mc-button\n            type=\"button\"\n            [disabled]=\"disabled\"\n            [attr.tabindex]=\"disabled ? -1 : tabIndex\"\n            (click)=\"onToggleClick()\">\n            <ng-content></ng-content>\n        </button>\n    `,\n    styleUrls: ['button-toggle.css'],\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcButtonToggle',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[class.mc-button-toggle-standalone]': '!buttonToggleGroup',\n        '[class.mc-button-toggle-checked]': 'checked',\n        class: 'mc-button-toggle',\n        // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n        // but can still receive focus from things like cdkFocusInitial.\n        '[attr.tabindex]': '-1',\n        '[attr.disabled]': 'disabled || null',\n        '(focus)': 'focus()'\n    }\n})\nexport class McButtonToggle implements OnInit, OnDestroy {\n\n    /** Whether the button is checked. */\n    @Input()\n    get checked(): boolean {\n        return this.buttonToggleGroup ? this.buttonToggleGroup.isSelected(this) : this._checked;\n    }\n\n    set checked(value: boolean) {\n        const newValue = coerceBooleanProperty(value);\n\n        if (newValue !== this._checked) {\n            this._checked = newValue;\n\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup.syncButtonToggle(this, this._checked);\n            }\n\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    // tslint:disable-next-line:no-reserved-keywords\n    type: ToggleType;\n\n    @ViewChild(McButton) mcButton: McButton;\n\n    /** McButtonToggleGroup reads this to assign its own value. */\n    @Input() value: any;\n\n    /** Tabindex for the toggle. */\n    @Input() tabIndex: number | null;\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n    }\n    set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n\n    /** Event emitted when the group value changes. */\n    @Output() readonly change: EventEmitter<McButtonToggleChange> =\n        new EventEmitter<McButtonToggleChange>();\n\n    private isSingleSelector = false;\n    private _checked = false;\n    private _disabled: boolean = false;\n\n    constructor(\n        @Optional() public buttonToggleGroup: McButtonToggleGroup,\n        private changeDetectorRef: ChangeDetectorRef,\n        private focusMonitor: FocusMonitor,\n        private element: ElementRef\n    ) {}\n\n    ngOnInit() {\n        this.isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n        this.type = this.isSingleSelector ? 'radio' : 'checkbox';\n\n        if (this.buttonToggleGroup && this.buttonToggleGroup.isPrechecked(this)) {\n            this.checked = true;\n        }\n\n        this.focusMonitor.monitor(this.element.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        const group = this.buttonToggleGroup;\n\n        this.focusMonitor.stopMonitoring(this.element.nativeElement);\n\n        // Remove the toggle from the selection once it's destroyed. Needs to happen\n        // on the next tick in order to avoid \"changed after checked\" errors.\n        if (group && group.isSelected(this)) {\n            Promise.resolve().then(() => group.syncButtonToggle(this, false));\n        }\n    }\n\n    /** Focuses the button. */\n    focus(): void {\n        this.element.nativeElement.focus();\n    }\n\n    /** Checks the button toggle due to an interaction with the underlying native button. */\n    onToggleClick() {\n        if (this.disabled) {\n            return;\n        }\n\n        const newChecked = this.isSingleSelector ? true : !this._checked;\n\n        if (newChecked !== this._checked) {\n            this._checked = newChecked;\n            if (this.buttonToggleGroup) {\n                this.buttonToggleGroup.syncButtonToggle(this, this._checked, true);\n                this.buttonToggleGroup.onTouched();\n            }\n        }\n        // Emit a change event when it's the single selector\n        this.change.emit(new McButtonToggleChange(this, this.value));\n    }\n\n    /**\n     * Marks the button toggle as needing checking for change detection.\n     * This method is exposed because the parent button toggle group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When the group value changes, the button will not be notified.\n        // Use `markForCheck` to explicit update button toggle's status.\n        this.changeDetectorRef.markForCheck();\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { McButtonModule } from '@ptsecurity/mosaic/button';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McButtonToggle, McButtonToggleGroup } from './button-toggle.component';\n\n\n@NgModule({\n    imports: [McCommonModule, McButtonModule],\n    exports: [McCommonModule, McButtonToggleGroup, McButtonToggle],\n    declarations: [McButtonToggleGroup, McButtonToggle]\n})\nexport class McButtonToggleModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","\nexport function isBoolean(val: any): val is boolean { return typeof val === 'boolean'; }\n\nexport function toBoolean(value: any): boolean {\n    return value != null && `${value}` !== 'false';\n}\n","import { NgModule, InjectionToken, Optional, Inject, isDevMode } from '@angular/core';\nimport { BidiModule } from '@ptsecurity/cdk/bidi';\n\n\n// Injection token that configures whether the Mosaic sanity checks are enabled.\nexport const MC_SANITY_CHECKS = new InjectionToken<boolean>('mc-sanity-checks', {\n    providedIn: 'root',\n    factory: MC_SANITY_CHECKS_FACTORY\n});\n\nexport function MC_SANITY_CHECKS_FACTORY(): boolean {\n    return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Mosaic\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., McTabsModule).\n */\n@NgModule({\n    imports: [ BidiModule ],\n    exports: [ BidiModule ]\n})\nexport class McCommonModule {\n    // Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n    private _hasDoneGlobalChecks = false;\n\n    // Reference to the global `document` object.\n    private _document = typeof document === 'object' && document ? document : null;\n\n    // Reference to the global 'window' object.\n    private _window = typeof window === 'object' && window ? window : null;\n\n    constructor(@Optional() @Inject(MC_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n        if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n            this._checkDoctypeIsDefined();\n            this._checkThemeIsPresent();\n            this._hasDoneGlobalChecks = true;\n        }\n    }\n\n    // Whether any sanity checks are enabled\n    private _areChecksEnabled(): boolean {\n        return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n    }\n\n    // Whether the code is running in tests.\n    private _isTestEnv() {\n        // tslint:disable-next-line\n        return this._window && (this._window['__karma__'] || this._window['jasmine']);\n    }\n\n    private _checkDoctypeIsDefined(): void {\n        if (this._document && !this._document.doctype) {\n            console.warn(\n                'Current document does not have a doctype. This may cause ' +\n                'some Mosaic components not to behave as expected.'\n            );\n        }\n    }\n\n    private _checkThemeIsPresent(): void {\n        if (this._document && typeof getComputedStyle === 'function') {\n            const testElement = this._document.createElement('div');\n\n            testElement.classList.add('mc-theme-loaded-marker');\n            this._document.body.appendChild(testElement);\n\n            const computedStyle = getComputedStyle(testElement);\n\n            // In some situations, the computed style of the test element can be null. For example in\n            // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n            // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n            if (computedStyle && computedStyle.display !== 'none') {\n                console.warn(\n                    'Could not find Mosaic core theme. Most Mosaic ' +\n                    'components may not work as expected. For more info refer ' +\n                    'to the theming guide: link there'\n                );\n            }\n\n            this._document.body.removeChild(testElement);\n        }\n    }\n}\n","import { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanDisable {\n    disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n    return class extends base {\n        get disabled() {\n            return this._disabled;\n        }\n\n        set disabled(value: any) {\n            this._disabled = coerceBooleanProperty(value);\n        }\n\n        private _disabled: boolean = false;\n\n        constructor(...args: any[]) {\n            // tslint:disable-next-line\n            super(...args);\n        }\n    };\n}\n","import { ElementRef } from '@angular/core';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanColor {\n    color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\nexport interface HasElementRef {\n    _elementRef: ElementRef;\n}\n\nexport enum ThemePalette {\n    Primary = 'primary',\n    Second = 'second',\n    Error = 'error',\n    Default = 'second',\n    Empty = ''\n}\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T,\n    defaultColor: ThemePalette = ThemePalette.Default\n): CanColorCtor & T {\n    return class extends base {\n\n        private _color: ThemePalette;\n\n        get color(): ThemePalette {\n            return this._color;\n        }\n\n        set color(value: ThemePalette) {\n            const colorPalette = value || defaultColor;\n\n            if (colorPalette !== this._color) {\n                if (this._color) {\n                    this._elementRef.nativeElement.classList.remove(`mc-${this._color}`);\n                }\n\n                if (colorPalette) {\n                    this._elementRef.nativeElement.classList.add(`mc-${colorPalette}`);\n                }\n\n                this._color = colorPalette;\n            }\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n\n            this.color = defaultColor;\n        }\n    };\n}\n\n","import { Constructor } from './constructor';\nimport { CanDisable } from './disabled';\n\n\nexport interface HasTabIndex {\n    tabIndex: number;\n}\n\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n// Mixin to augment a directive with a `tabIndex` property.\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0): HasTabIndexCtor & T {\n    return class extends base {\n        get tabIndex(): number {\n            return this.disabled ? -1 : this._tabIndex;\n        }\n\n        set tabIndex(value: number) {\n            this._tabIndex = value != null ? value : defaultTabIndex;\n        }\n\n        private _tabIndex: number = defaultTabIndex;\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n    };\n}\n","import { FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { Subject } from 'rxjs';\n\nimport { ErrorStateMatcher } from '../error/error-options';\n\nimport { Constructor } from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n\n    readonly stateChanges: Subject<void>;\n\n    errorState: boolean;\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState();\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n    parentFormGroup: FormGroupDirective;\n    parentForm: NgForm;\n    defaultErrorStateMatcher: ErrorStateMatcher;\n    ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T): CanUpdateErrorStateCtor & T {\n    return class extends base {\n        /** Whether the component is in an error state. */\n        errorState: boolean = false;\n\n        /**\n         * Stream that emits whenever the state of the input changes such that the wrapping\n         * `MatFormField` needs to run change detection.\n         */\n        readonly stateChanges = new Subject<void>();\n\n        errorStateMatcher: ErrorStateMatcher;\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n\n        updateErrorState() {\n            const oldState = this.errorState;\n            const parent = this.parentFormGroup || this.parentForm;\n            const matcher = this.errorStateMatcher || this.defaultErrorStateMatcher;\n            const control = this.ngControl ? this.ngControl.control as FormControl : null;\n            const newState = matcher.isErrorState(control, parent);\n\n            if (newState !== oldState) {\n                this.errorState = newState;\n                this.stateChanges.next();\n            }\n        }\n    };\n}\n","import {\n    AfterViewChecked,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { ENTER, SPACE } from '@ptsecurity/cdk/keycodes';\nimport { Subject } from 'rxjs';\n\nimport { McOptgroup } from './optgroup';\n\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet uniqueIdCounter = 0;\n\n/** Event object emitted by McOption when selected or deselected. */\nexport class McOptionSelectionChange {\n    constructor(public source: McOption, public isUserInput = false) {}\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\n// tslint:disable-next-line: naming-convention\nexport interface McOptionParentComponent {\n    multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MC_OPTION_PARENT_COMPONENT =\n    new InjectionToken<McOptionParentComponent>('MC_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mc-select>` element.\n */\n@Component({\n    selector: 'mc-option',\n    exportAs: 'mcOption',\n    host: {\n        '[attr.tabindex]': 'getTabIndex()',\n        class: 'mc-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-option-multiple]': 'multiple',\n        '[class.mc-active]': 'active',\n        '[class.mc-disabled]': 'disabled',\n        '[id]': 'id',\n\n        '(click)': 'selectViaInteraction()',\n        '(keydown)': 'handleKeydown($event)'\n    },\n    styleUrls: ['./option.css'],\n    templateUrl: './option.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McOption implements AfterViewChecked, OnDestroy {\n    /** The form value of the option. */\n    @Input() value: any;\n\n    /** Event emitted when the option is selected or deselected. */\n    // tslint:disable-next-line:no-output-on-prefix\n    @Output() readonly onSelectionChange = new EventEmitter<McOptionSelectionChange>();\n\n    /** Emits when the state of the option changes and any parents have to be notified. */\n    readonly stateChanges = new Subject<void>();\n\n    /**\n     * The displayed value of the option. It is necessary to show the selected option in the\n     * select's trigger.\n     */\n    get viewValue(): string {\n        // TODO(kara): Add input property alternative for node envs.\n        return (this.getHostElement().textContent || '').trim();\n    }\n\n    /** Whether the wrapping component is in multiple selection mode. */\n    get multiple() {\n        return this.parent && this.parent.multiple;\n    }\n\n    get id(): string {\n        return this._id;\n    }\n\n    private _id = `mc-option-${uniqueIdCounter++}`;\n\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    private _selected = false;\n\n    @Input()\n    get disabled() {\n        return (this.group && this.group.disabled) || this._disabled;\n    }\n\n    set disabled(value: any) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    private _disabled = false;\n\n    /**\n     * Whether or not the option is currently active and ready to be selected.\n     * An active option displays styles as if it is focused, but the\n     * focus is actually retained somewhere else. This comes in handy\n     * for components like autocomplete where focus must remain on the input.\n     */\n    get active(): boolean {\n        return this._active;\n    }\n\n    private _active = false;\n\n    private mostRecentViewValue = '';\n\n    constructor(\n        private readonly element: ElementRef,\n        private readonly changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_OPTION_PARENT_COMPONENT) private readonly parent: McOptionParentComponent,\n        @Optional() readonly group: McOptgroup\n    ) {}\n\n    ngAfterViewChecked() {\n        // Since parent components could be using the option's label to display the selected values\n        // (e.g. `mc-select`) and they don't have a way of knowing if the option's label has changed\n        // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n        // relatively cheap, however we still limit them only to selected options in order to avoid\n        // hitting the DOM too often.\n        if (this._selected) {\n            const viewValue = this.viewValue;\n\n            if (viewValue !== this.mostRecentViewValue) {\n                this.mostRecentViewValue = viewValue;\n                this.stateChanges.next();\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n    }\n\n    select(): void {\n        if (!this._selected) {\n            this._selected = true;\n\n            this.changeDetectorRef.markForCheck();\n            this.emitSelectionChangeEvent();\n        }\n    }\n\n    deselect(): void {\n        if (this._selected) {\n            this._selected = false;\n\n            this.changeDetectorRef.markForCheck();\n            this.emitSelectionChangeEvent();\n        }\n    }\n\n    focus(): void {\n        const element = this.getHostElement();\n\n        if (typeof element.focus === 'function') {\n            element.focus();\n        }\n    }\n\n    /**\n     * This method sets display styles on the option to make it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setActiveStyles(): void {\n        if (!this._active) {\n            this._active = true;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    /**\n     * This method removes display styles on the option that made it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setInactiveStyles(): void {\n        if (this._active) {\n            this._active = false;\n            this.changeDetectorRef.markForCheck();\n        }\n    }\n\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel(): string {\n        return this.viewValue;\n    }\n\n    /** Ensures the option is selected when activated from the keyboard. */\n    handleKeydown(event: KeyboardEvent): void {\n        // tslint:disable-next-line\n        if (event.keyCode === ENTER || event.keyCode === SPACE) {\n            this.selectViaInteraction();\n\n            // Prevent the page from scrolling down and form submits.\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * `Selects the option while indicating the selection came from the user. Used to\n     * determine if the select's view -> model callback should be invoked.`\n     */\n    selectViaInteraction(): void {\n        if (!this.disabled) {\n            this._selected = this.multiple ? !this._selected : true;\n\n            this.changeDetectorRef.markForCheck();\n            this.emitSelectionChangeEvent(true);\n        }\n    }\n\n    getTabIndex(): string {\n        return this.disabled ? '-1' : '0';\n    }\n\n    getHostElement(): HTMLElement {\n        return this.element.nativeElement;\n    }\n\n    /** Emits the selection change event. */\n    private emitSelectionChangeEvent(isUserInput = false): void {\n        this.onSelectionChange.emit(new McOptionSelectionChange(this, isUserInput));\n    }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function countGroupLabelsBeforeOption(\n    optionIndex: number,\n    options: QueryList<McOption>,\n    optionGroups: QueryList<McOptgroup>\n): number {\n\n    if (optionGroups.length) {\n        const optionsArray = options.toArray();\n        const groups = optionGroups.toArray();\n\n        let groupCounter = 0;\n\n        for (let i = 0; i < optionIndex + 1; i++) {\n            if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n                groupCounter++;\n            }\n        }\n\n        return groupCounter;\n    }\n\n    return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function getOptionScrollPosition(\n    optionIndex: number,\n    optionHeight: number,\n    currentScrollPosition: number,\n    panelHeight: number\n): number {\n    const optionOffset = optionIndex * optionHeight;\n\n    if (optionOffset < currentScrollPosition) { return optionOffset; }\n\n    if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n        return Math.max(0, optionOffset - panelHeight + optionHeight);\n    }\n\n    return currentScrollPosition;\n}\n\n","import { ConnectionPositionPair } from '@ptsecurity/cdk/overlay';\n\n\nexport const POSITION_MAP: { [key: string]: ConnectionPositionPair } = {\n    top         : {\n        originX : 'center',\n        originY : 'top',\n        overlayX: 'center',\n        overlayY: 'bottom'\n    },\n    topCenter   : {\n        originX : 'center',\n        originY : 'top',\n        overlayX: 'center',\n        overlayY: 'bottom',\n        offsetX : undefined,\n        offsetY : undefined\n    },\n    topLeft     : {\n        originX : 'start',\n        originY : 'top',\n        overlayX: 'start',\n        overlayY: 'bottom',\n        offsetX : undefined,\n        offsetY : undefined\n    },\n    topRight    : {\n        originX : 'end',\n        originY : 'top',\n        overlayX: 'end',\n        overlayY: 'bottom',\n        offsetX : undefined,\n        offsetY : undefined\n    },\n    right       : {\n        originX : 'end',\n        originY : 'center',\n        overlayX: 'start',\n        overlayY: 'center'\n    },\n    rightTop    : {\n        originX : 'end',\n        originY : 'top',\n        overlayX: 'start',\n        overlayY: 'top',\n        offsetX : undefined,\n        offsetY : undefined\n    },\n    rightBottom : {\n        originX : 'end',\n        originY : 'bottom',\n        overlayX: 'start',\n        overlayY: 'bottom',\n        offsetX : undefined,\n        offsetY : undefined\n    },\n    bottom      : {\n        originX : 'center',\n        originY : 'bottom',\n        overlayX: 'center',\n        overlayY: 'top'\n    },\n    bottomCenter: {\n        originX : 'center',\n        originY : 'bottom',\n        overlayX: 'center',\n        overlayY: 'top'\n    },\n    bottomLeft  : {\n        originX : 'start',\n        originY : 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    bottomRight : {\n        originX : 'end',\n        originY : 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n    },\n    left        : {\n        originX : 'start',\n        originY : 'center',\n        overlayX: 'end',\n        overlayY: 'center'\n    },\n    leftTop     : {\n        originX : 'start',\n        originY : 'top',\n        overlayX: 'end',\n        overlayY: 'top'\n    },\n    leftBottom  : {\n        originX : 'start',\n        originY : 'bottom',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    }\n};\n\nexport const DEFAULT_4_POSITIONS = _objectValues([\n    POSITION_MAP.top, POSITION_MAP.right, POSITION_MAP.bottom, POSITION_MAP.left\n]);\n\nfunction arrayMap<T, S>(array: T[], iteratee: (item: T, index: number, arr: T[]) => S): S[] {\n    let index = -1;\n    const length = array == null ? 0 : array.length;\n    const result = Array(length);\n\n    while (++index < length) {\n        result[ index ] = iteratee(array[ index ], index, array);\n    }\n\n    return result;\n}\nfunction baseValues<T>(object: { [key: string]: T } | T[], props: string[]): T[] {\n    return arrayMap(props,  (key) => {\n        return object[ key ];\n    });\n}\nfunction _objectValues<T>(object: { [key: string]: T } | T[]): T[] {\n    return object == null ? [] : baseValues(object, Object.keys(object));\n}\n","/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMcSelectDynamicMultipleError(): Error {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMcSelectNonArrayValueError(): Error {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMcSelectNonFunctionValueError(): Error {\n    return Error('`compareWith` must be a function.');\n}\n","export function getMcFormFieldMissingControlError(): Error {\n  return Error('mc-form-field must contain a McFormFieldControl.');\n}\n","export function getMcInputUnsupportedTypeError(inputType: string): Error {\n    return Error(`Input type \"${inputType}\" isn't supported by mcInput.`);\n}\n","/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n    return Error(\n        `McDatepicker: No provider found for ${provider}. You must import one of the existing ` +\n        `modules at your application root or provide a custom implementation or use exists ones.`);\n}\n","/**\n * Throws an exception for the case when dropdown trigger doesn't have a valid mc-dropdown instance\n * @docs-private\n */\nexport function throwMcDropdownMissingError() {\n    throw Error(`mcDropdownTriggerFor: must pass in an mc-dropdown instance.\n    Example:\n      <mc-dropdown #dropdown=\"mcDropdown\"></mc-dropdown>\n      <button [mcDropdownTriggerFor]=\"dropdown\"></button>`);\n}\n\n/**\n * Throws an exception for the case when dropdown's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMcDropdownInvalidPositionX() {\n    throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mc-dropdown xPosition=\"before\" #dropdown=\"mcDropdown\"></mc-dropdown>`);\n}\n\n/**\n * Throws an exception for the case when dropdown's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMcDropdownInvalidPositionY() {\n    throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mc-dropdown yPosition=\"above\" #dropdown=\"mcDropdown\"></mc-dropdown>`);\n}\n","import { animate, AnimationTriggerMetadata, style, transition, trigger, state } from '@angular/animations';\n\n\nexport function toggleVerticalNavbarAnimation(): AnimationTriggerMetadata {\n    return trigger('toggle', [\n        state('0', style({\n            width: '64px'\n        })),\n        state('1',  style({\n            width: '*'\n        })),\n        transition('0 <=> 1', animate('200ms cubic-bezier(0, 1, 0.5, 1)'))\n    ]);\n}\n","import { NgModule, Directive, ElementRef, QueryList } from '@angular/core';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(McLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n    selector: '[mc-line], [mcLine]',\n    host: { class: 'mc-line' }\n})\nexport class McLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class McLineSetter {\n    constructor(private _lines: QueryList<McLine>, private _element: ElementRef) {\n        this._setLineClass(this._lines.length);\n\n        this._lines.changes.subscribe(() => {\n            this._setLineClass(this._lines.length);\n        });\n    }\n\n    private _setLineClass(count: number): void {\n        this._resetClasses();\n        if (count === 2 || count === 3) {\n            this._setClass(`mc-${count}-line`, true);\n        } else if (count > 3) {\n            this._setClass(`mc-multi-line`, true);\n        }\n    }\n\n    private _resetClasses(): void {\n        this._setClass('mc-2-line', false);\n        this._setClass('mc-3-line', false);\n        this._setClass('mc-multi-line', false);\n    }\n\n    private _setClass(className: string, isAdd: boolean): void {\n        if (isAdd) {\n            this._element.nativeElement.classList.add(className);\n        } else {\n            this._element.nativeElement.classList.remove(className);\n        }\n    }\n}\n\n@NgModule({\n    imports: [],\n    exports: [McLine],\n    declarations: [McLine]\n})\nexport class McLineModule {}\n","import { Injectable } from '@angular/core';\nimport { FormGroupDirective, NgForm, FormControl } from '@angular/forms';\n\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n    }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({ providedIn: 'root' })\nexport class ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n    }\n}\n","import { Component, ViewEncapsulation, Input, ChangeDetectionStrategy } from '@angular/core';\n\n\nexport type McPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mc-primary .mc-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mc-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'mc-pseudo-checkbox',\n    styleUrls: ['pseudo-checkbox.css'],\n    templateUrl: 'pseudo-checkbox.partial.html',\n    host: {\n        class: 'mc-pseudo-checkbox',\n        '[class.mc-indeterminate]': 'state === \"indeterminate\"',\n        '[class.mc-checked]': 'state === \"checked\"',\n        '[class.mc-disabled]': 'disabled'\n    }\n})\nexport class McPseudoCheckbox {\n    @Input() state: McPseudoCheckboxState = 'unchecked';\n\n    @Input() disabled: boolean = false;\n}\n","import { NgModule } from '@angular/core';\n\nimport { McPseudoCheckbox } from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n    exports: [McPseudoCheckbox],\n    declarations: [McPseudoCheckbox]\n})\nexport class McPseudoCheckboxModule {}\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class McMeasureScrollbarService {\n\n    get scrollBarWidth(): number {\n        if (this._scrollbarWidth) {\n            return this._scrollbarWidth;\n        }\n        this.initScrollBarWidth();\n\n        return this._scrollbarWidth;\n    }\n\n    private _scrollbarWidth: number;\n    private scrollbarMeasure = {\n        position: 'absolute',\n        top: '-9999px',\n        width: '50px',\n        height: '50px',\n        overflow: 'scroll'\n    };\n\n    constructor(\n        @Inject(DOCUMENT) private document: any\n    ) {\n        this.initScrollBarWidth();\n    }\n\n    initScrollBarWidth() {\n        const scrollDiv = this.document.createElement('div');\n\n        // tslint:disable-next-line\n        for (const scrollProp in this.scrollbarMeasure) {\n            if (this.scrollbarMeasure.hasOwnProperty(scrollProp)) {\n                scrollDiv.style[scrollProp] = this.scrollbarMeasure[scrollProp];\n            }\n        }\n\n        this.document.body.appendChild(scrollDiv);\n\n        const width = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n\n        this.document.body.removeChild(scrollDiv);\n        this._scrollbarWidth = width;\n    }\n}\n","import { Component, ViewEncapsulation, Input, ChangeDetectionStrategy } from '@angular/core';\n\nimport { mixinDisabled, CanDisable, CanDisableCtor } from '../common-behaviors/index';\n\n\n// Boilerplate for applying mixins to McOptgroup.\n/** @docs-private */\nexport class McOptgroupBase {}\n\nexport const McOptgroupMixinBase: CanDisableCtor & typeof McOptgroupBase = mixinDisabled(McOptgroupBase);\n\n// Counter for unique group ids.\nlet uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mc-option`.\n */\n@Component({\n    selector: 'mc-optgroup',\n    exportAs: 'mcOptgroup',\n    templateUrl: 'optgroup.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['disabled'],\n    styleUrls: ['optgroup.css'],\n    host: {\n        class: 'mc-optgroup',\n        role: 'group',\n        '[class.mc-optgroup-disabled]': 'disabled',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-labelledby]': 'labelId'\n    }\n})\nexport class McOptgroup extends McOptgroupMixinBase implements CanDisable {\n    /** Label for the option group. */\n    @Input() label: string;\n\n    /** Unique id for the underlying label. */\n    labelId: string = `mc-optgroup-label-${uniqueOptgroupIdCounter++}`;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McPseudoCheckboxModule } from '../selection/index';\n\nimport { McOptgroup } from './optgroup';\nimport { McOption } from './option';\n\n\n@NgModule({\n    imports: [CommonModule, McPseudoCheckboxModule],\n    exports: [McOption, McOptgroup],\n    declarations: [McOption, McOptgroup]\n})\nexport class McOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","import { InjectionToken } from '@angular/core';\n\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MC_LABEL_GLOBAL_OPTIONS =\n    new InjectionToken<LabelOptions>('mc-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n    /**\n     * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n     * Default behavior is assumed to be `auto`.\n     */\n    float?: FloatLabelType;\n}\n","import {\n    animate,\n    state,\n    style,\n    transition,\n    trigger,\n    AnimationTriggerMetadata\n} from '@angular/animations';\n\n\nexport const fadeAnimation: AnimationTriggerMetadata =  trigger('fadeAnimation', [\n    state('void', style({ opacity: 0 })),\n    state('true', style({ opacity: 1 })),\n    state('false', style({ opacity: 0 })),\n    transition('* => true', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => void', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)'))\n]);\n","export enum AnimationCurves {\n    StandardCurve = 'cubic-bezier(0.4,0.0,0.2,1)',\n    DecelerationCurve = 'cubic-bezier(0.0,0.0,0.2,1)',\n    AccelerationCurve = 'cubic-bezier(0.4,0.0,1,1)',\n    SharpCurve = 'cubic-bezier(0.4,0.0,0.6,1)'\n}\n","import {\n    animate,\n    AnimationTriggerMetadata,\n    state,\n    style,\n    transition,\n    trigger,\n    query,\n    animateChild,\n    group\n} from '@angular/animations';\n\n\n/**\n * The following are all the animations for the mc-select component, with each\n * const containing the metadata for one animation.\n *\n */\nexport const mcSelectAnimations: {\n    readonly transformPanel: AnimationTriggerMetadata;\n    readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0)',\n            minWidth: '100%',\n            opacity: 0\n        })),\n        transition('void => *', group([\n            query('@fadeInContent', animateChild()),\n            animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n        ])),\n        transition('* => void', [\n            animate('250ms 100ms linear', style({ opacity: 0 }))\n        ])\n    ]),\n\n    /**\n     * This animation fades in the background color and text content of the\n     * select's options. It is time delayed to occur 100ms after the overlay\n     * panel has transformed in.\n     */\n    fadeInContent: trigger('fadeInContent', [\n        state('showing', style({ opacity: 1 })),\n        transition('void => showing', [\n            style({ opacity: 0 }),\n            animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformPanel = mcSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInContent = mcSelectAnimations.fadeInContent;\n","import {\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { mixinColor, CanColor, CanColorCtor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\n@Directive({\n    selector: '[mc-icon]',\n    host: { class: 'mc mc-icon' }\n})\nexport class McIconCSSStyler {}\n\n\nexport class McIconBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McIconMixinBase: CanColorCtor & typeof McIconBase = mixinColor(McIconBase, ThemePalette.Empty);\n\n\n@Component({\n    selector: `[mc-icon]`,\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./icon.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['color']\n})\nexport class McIcon extends _McIconMixinBase implements CanColor {\n    constructor(elementRef: ElementRef, @Attribute('mc-icon') iconName: string) {\n        super(elementRef);\n\n        elementRef.nativeElement.classList.add(iconName);\n    }\n\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McIcon,\n    McIconCSSStyler\n} from './icon.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McIcon,\n        McIconCSSStyler\n    ],\n    declarations: [\n        McIcon,\n        McIconCSSStyler\n    ]\n})\nexport class McIconModule {}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-cleaner',\n    template: '<i class=\"mc-icon_light\" mc-icon=\"mc-close-M_16\" color=\"second\"></i>'\n})\nexport class McCleaner {}\n","import { NgControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\n\n/** An interface which allows a control to work inside of a `MсFormField`. */\nexport abstract class McFormFieldControl<T> {\n    /** The value of the control. */\n    value: T | null;\n\n    /**\n     * Stream that emits whenever the state of the control changes such that the parent `MсFormField`\n     * needs to run change detection.\n     */\n    readonly stateChanges: Observable<void>;\n\n    /** The element ID for this control. */\n    readonly id: string;\n\n    /** The placeholder for this control. */\n    readonly placeholder: string;\n\n    /** Gets the NgControl for this control. */\n    readonly ngControl: NgControl | null;\n\n    /** Whether the control is focused. */\n    readonly focused: boolean;\n\n    /** Whether the control is empty. */\n    readonly empty: boolean;\n\n    /** Whether the control is required. */\n    readonly required: boolean;\n\n    /** Whether the control is disabled. */\n    readonly disabled: boolean;\n\n    /** Whether the control is in an error state. */\n    readonly errorState: boolean;\n\n    /**\n     * An optional name for the control type that can be used to distinguish `mc-form-field` elements\n     * based on their control type. The form field will add a class,\n     * `mc-form-field-type-{{controlType}}` to its root element.\n     */\n    readonly controlType?: string;\n\n    /** Handles a click on the control's container. */\n    abstract onContainerClick(event: MouseEvent): void;\n}\n","import { Observable } from 'rxjs';\n\n\n/** An interface which allows a control to work inside of a `MсFormField`. */\nexport abstract class McFormFieldNumberControl<T> {\n    /** The value of the control. */\n    value: T | null;\n\n    /**\n     * Stream that emits whenever the state of the control changes such that the parent `MсFormField`\n     * needs to run change detection.\n     */\n    readonly stateChanges: Observable<void>;\n\n    /** the number step */\n    step: number;\n\n    /** the number big step */\n    bigStep: number;\n\n    /** Whether the control is focused. */\n    readonly focused: boolean;\n\n    /** Handles step up and down */\n    abstract stepUp(step: number): void;\n\n    abstract stepDown(step: number): void;\n}\n","import { Directive, Input } from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n@Directive({\n    selector: 'mc-hint',\n    host: {\n        class: 'mc-hint',\n        '[attr.id]': 'id'\n    }\n})\nexport class McHint {\n    @Input() id: string = `mc-hint-${nextUniqueId++}`;\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcPrefix]'\n})\nexport class McPrefix {\n}\n","import { Component, EventEmitter, Output } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-stepper',\n    template: `\n        <i class=\"mc mc-icon mc-icon_light mc-second mc-stepper-step-up mc-angle-down-L_16\"\n           (mousedown)=\"onStepUp($event)\">\n        </i>\n        <i class=\"mc mc-icon mc-icon_light mc-second mc-stepper-step-down mc-angle-down-L_16\"\n           (mousedown)=\"onStepDown($event)\">\n        </i>\n    `\n})\nexport class McStepper {\n    @Output()\n    readonly stepUp: EventEmitter<void> = new EventEmitter<void>();\n    @Output()\n    readonly stepDown: EventEmitter<void> = new EventEmitter<void>();\n\n    onStepUp($event: MouseEvent) {\n        this.stepUp.emit();\n        $event.preventDefault();\n    }\n\n    onStepDown($event: MouseEvent) {\n        this.stepDown.emit();\n        $event.preventDefault();\n    }\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcSuffix]'\n})\nexport class McSuffix {\n}\n","import {\n    AfterContentChecked,\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren, Directive,\n    ElementRef,\n    QueryList, ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { CanColor, CanColorCtor, mixinColor } from '@ptsecurity/mosaic/core';\nimport { EMPTY, merge } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n\n\nimport { McCleaner } from './cleaner';\nimport { McFormFieldControl } from './form-field-control';\nimport { getMcFormFieldMissingControlError } from './form-field-errors';\nimport { McFormFieldNumberControl } from './form-field-number-control';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McStepper } from './stepper';\nimport { McSuffix } from './suffix';\n\n\nlet nextUniqueId = 0;\n\nexport class McFormFieldBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McFormFieldMixinBase: CanColorCtor & typeof McFormFieldBase = mixinColor(McFormFieldBase);\n\n@Component({\n    selector: 'mc-form-field',\n    exportAs: 'mcFormField',\n    templateUrl: 'form-field.html',\n    // McInput is a directive and can't have styles, so we need to include its styles here.\n    // The McInput styles are fairly minimal so it shouldn't be a big deal for people who\n    // aren't using McInput.\n    styleUrls: [\n        'form-field.css',\n        '../input/input.css',\n        '../textarea/textarea.css'\n    ],\n    host: {\n        class: 'mc-form-field',\n        '[class.mc-form-field_invalid]': '_control.errorState',\n        '[class.mc-disabled]': '_control.disabled',\n        '[class.mc-form-field_has-prefix]': 'hasPrefix',\n        '[class.mc-form-field_has-suffix]': 'hasSuffix',\n        '[class.mc-form-field_has-cleaner]': 'canShowCleaner',\n        '[class.mc-form-field_has-stepper]': 'canShowStepper',\n        '[class.mc-focused]': '_control.focused',\n        '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n        '[class.ng-touched]': '_shouldForward(\"touched\")',\n        '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n        '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n        '[class.ng-valid]': '_shouldForward(\"valid\")',\n        '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n        '[class.ng-pending]': '_shouldForward(\"pending\")',\n        '(keydown)': 'onKeyDown($event)',\n        '(mouseenter)': 'onHoverChanged(true)',\n        '(mouseleave)': 'onHoverChanged(false)'\n    },\n    inputs: ['color'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class McFormField extends _McFormFieldMixinBase implements\n    AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n\n    @ContentChild(McFormFieldControl) _control: McFormFieldControl<any>;\n    @ContentChild(McFormFieldNumberControl) _numberControl: McFormFieldNumberControl<any>;\n    @ContentChild(McStepper) _stepper: McStepper;\n\n    @ContentChildren(McHint) _hint: QueryList<McHint>;\n    @ContentChildren(McSuffix) _suffix: QueryList<McSuffix>;\n    @ContentChildren(McPrefix) _prefix: QueryList<McPrefix>;\n    @ContentChildren(McCleaner) _cleaner: QueryList<McCleaner>;\n\n    @ViewChild('connectionContainer') connectionContainerRef: ElementRef;\n\n    // Unique id for the internal form field label.\n    _labelId = `mc-form-field-label-${nextUniqueId++}`;\n\n    hovered: boolean = false;\n\n    constructor(public _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef) {\n        super(_elementRef);\n    }\n\n    ngAfterContentInit() {\n        this._validateControlChild();\n\n        if (this._control.controlType) {\n            this._elementRef.nativeElement.classList\n                .add(`mc-form-field-type-${this._control.controlType}`);\n\n            if (this._numberControl && this.hasStepper) {\n                this._stepper.stepUp.subscribe(this.onStepUp.bind(this));\n                this._stepper.stepDown.subscribe(this.onStepDown.bind(this));\n            }\n        }\n\n        // Subscribe to changes in the child control state in order to update the form field UI.\n        this._control.stateChanges.pipe(startWith())\n            .subscribe(() => {\n                this._changeDetectorRef.markForCheck();\n            });\n\n        if (this._numberControl) {\n            this._numberControl.stateChanges.pipe(startWith())\n                .subscribe(() => {\n                    this._changeDetectorRef.markForCheck();\n                });\n        }\n\n        // Run change detection if the value changes.\n        const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n\n        merge(valueChanges)\n            .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    ngAfterContentChecked() {\n        this._validateControlChild();\n    }\n\n    ngAfterViewInit() {\n        // Avoid animations on load.\n        this._changeDetectorRef.detectChanges();\n    }\n\n    clearValue($event) {\n        $event.stopPropagation();\n\n        if (this._control && this._control.ngControl) {\n            this._control.ngControl.reset();\n        }\n    }\n\n    onContainerClick($event) {\n        if (this._control.onContainerClick) {\n            this._control.onContainerClick($event);\n        }\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n        // tslint:disable-next-line:deprecation\n        if (event.keyCode === ESCAPE && this._control.focused && this.hasCleaner) {\n            if (this._control && this._control.ngControl) {\n                this._control.ngControl.reset();\n            }\n\n            event.preventDefault();\n        }\n    }\n\n    onHoverChanged(isHovered: boolean) {\n        if (isHovered !== this.hovered) {\n            this.hovered  = isHovered;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    onStepUp() {\n        if (this._numberControl) {\n            this._numberControl.stepUp(this._numberControl.step);\n        }\n    }\n\n    onStepDown() {\n        if (this._numberControl) {\n            this._numberControl.stepDown(this._numberControl.step);\n        }\n    }\n\n    /**\n     * Gets an ElementRef for the element that a overlay attached to the form-field should be\n     * positioned relative to.\n     */\n    getConnectedOverlayOrigin(): ElementRef {\n        return this.connectionContainerRef || this._elementRef;\n    }\n\n        /** Determines whether a class from the NgControl should be forwarded to the host element. */\n    _shouldForward(prop: keyof NgControl): boolean {\n        const ngControl = this._control ? this._control.ngControl : null;\n\n        return ngControl && ngControl[prop];\n    }\n\n    /** Throws an error if the form field's control is missing. */\n    protected _validateControlChild() {\n        if (!this._control) {\n            throw getMcFormFieldMissingControlError();\n        }\n    }\n\n    get hasHint(): boolean {\n        return this._hint && this._hint.length > 0;\n    }\n\n    get hasSuffix(): boolean {\n        return this._suffix && this._suffix.length > 0;\n    }\n\n    get hasPrefix(): boolean {\n        return this._prefix && this._prefix.length > 0;\n    }\n\n    get hasCleaner(): boolean {\n        return this._cleaner && this._cleaner.length > 0;\n    }\n\n    get hasStepper(): boolean {\n        return !!this._stepper;\n    }\n\n    get canShowCleaner(): boolean {\n        return this.hasCleaner &&\n            this._control &&\n            this._control.ngControl\n                ? this._control.ngControl.value && !this._control.disabled\n                : false;\n    }\n\n\n    get disabled(): boolean {\n        return this._control && this._control.disabled;\n    }\n\n    get canShowStepper(): boolean {\n        return this._numberControl &&\n            !this.disabled &&\n            (\n                this._numberControl.focused ||\n                this.hovered\n            );\n    }\n}\n\n@Directive({\n    selector: 'mc-form-field[mcFormFieldWithoutBorders]',\n    exportAs: 'mcFormFieldWithoutBorders',\n    host: { class: 'mc-form-field_without-borders' }\n})\nexport class McFormFieldWithoutBorders {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McCleaner } from './cleaner';\nimport { McFormField, McFormFieldWithoutBorders } from './form-field';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McStepper } from './stepper';\nimport { McSuffix } from './suffix';\n\n\n@NgModule({\n    declarations: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner,\n        McStepper\n    ],\n    imports: [CommonModule, McIconModule],\n    exports: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner,\n        McStepper\n    ]\n})\nexport class McFormFieldModule {\n}\n"],"names":["_this","tooltip","onPositionChange","change","scrollableViewProperties","isOverlayClipped","mcVisible","ngZone","run","hide","this","overlayRef","overlay","create","direction","positionStrategy","strategy","panelClass","scrollStrategy","updatePosition","detachments","pipe","takeUntil","destroyed","subscribe","detach","McTooltip","prototype","hasAttached","$event","updatedPlacement","mcPlacement","Object","keys","availablePositions","some","key","connectionPair","originX","originY","overlayX","overlayY","updateCompValue","setClassMap","markForCheck","handlePositioningUpdate","createOverlay","pos","overlayElement","clientHeight","hostView","element","nativeElement","currentContainer","style","top","parseInt","split","value","isDynamicTooltip","ngOnInit","initElementRefListeners","ngOnDestroy","dispose","manualListeners","forEach","listener","event","elementRef","removeEventListener","clear","$unsubscribe","next","complete","handleKeydown","e","isTooltipOpen","keyCode","ESCAPE","handleTouchend","mcTrigger","set","show","addEventListener","disabled","portal","ComponentPortal","McTooltipComponent","attach","instance","afterHidden","property","mcVisibleChange","distinctUntilChanged","data","emit","position","getConfig","origin","getOrigin","getOverlayPosition","withPositions","tslib_1.__assign","main","fallback","originPosition","isLtr","getMcTooltipInvalidPositionError","_a","invertPosition","x","y","overlayPosition","newX","newY","type","Directive","args","selector","exportAs","host","(keydown)","(touchend)","Overlay","ElementRef","NgZone","ScrollDispatcher","ViewContainerRef","undefined","decorators","Inject","MC_TOOLTIP_SCROLL_STRATEGY","Directionality","Optional","Output","mcTitle","Input","setTitle","mcMouseEnterDelay","mcMouseLeaveDelay","mcTooltipClass","isOpen","HostBinding","isParentDisabled","McToolTipModule","NgModule","declarations","exports","imports","CommonModule","OverlayModule","providers","MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","entryComponents","McVerticalNavbarItemIcon","class","McVerticalNavbarItemBadge","Component","template","McVerticalNavbarItemBase","_elementRef","_McVerticalNavbarMixinBase","mixinDisabled","McVerticalNavbarItem","_super","focusMonitor","trigger","call","tabIndex","monitor","tslib_1.__extends","defineProperty","stopMonitoring","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","styles","inputs","[attr.disabled]","[attr.tabindex]","FocusMonitor","McDropdownTrigger","Self","McVerticalNavbarHeader","McVerticalNavbarTitle","McVerticalNavbar","cd","expanded","toggle","animations","toggleVerticalNavbarAnimation","ChangeDetectorRef","COMPONENTS","McVerticalNavbarModule","A11yModule","PlatformModule","McIconModule","VERSION","Version","SELECT_PANEL_PADDING_X","McSidepanelContainerComponent","validatePortalAttached","portalOutlet","Error","mcSidepanelAnimations","sidepanelState","tabindex","role","aria-modal","[attr.id]","[@state]","(@state.start)","(@state.done)","McSidepanelConfig","Boolean","MC_SIDEPANEL_WITH_INDENT","MC_SIDEPANEL_WITH_SHADOW","ViewChild","CdkPortalOutlet","BasePortalOutlet","uniqueId","McSidepanelRef","containerInstance","config","afterClosed$","Subject","afterOpened$","id","animationStateChanged","filter","phaseName","toState","McSidepanelAnimationState","Visible","take","Hidden","result","sidepanelConfig","disableClose","merge","backdropClick","keydownEvents","close","closed","detachBackdrop","exit","afterClosed","asObservable","afterOpened","MC_SIDEPANEL_DEFAULT_OPTIONS","InjectionToken","McSidepanelService","injector","defaultOptions","parentSidepanelService","openedSidepanelsAtThisLevel","openedSidepanels","closeSidepanels","open","componentOrTemplateRef","fullConfig","getSidepanelById","container","attachContainer","ref","TemplateRef","attachTemplatePortal","TemplatePortal","$implicit","sidepanelRef","createInjector","contentRef","attachComponentPortal","push","removeOpenSidepanel","enter","closeAll","find","sidepanel","openedSidepanelsWithSamePosition","getOpenedSidepanelsWithSamePosition","PortalInjector","WeakMap","length","containerPortal","sidepanelContainer","injectionTokens","MC_SIDEPANEL_DATA","overlayConfig","OverlayConfig","hasBackdrop","backdropClass","getBackdropClass","maxWidth","overlayPanelClass","scrollStrategies","block","global","sidepanels","reverse","slice","hasOpenedSidepanelWithBackdrop","requiredBackdrop","index","indexOf","splice","Injectable","Injector","SkipSelf","McSidepanelClose","sidepanelService","setTimeout","getClosestSidepanel","ngOnChanges","changes","proxiedChange","mcSidepanelClose","sidepanelResult","currentValue","(click)","McSidepanelHeader","closeable","McSidepanelBody","McSidepanelFooter","McSidepanelActions","McSidepanelModule","PortalModule","McCommonModule","McSplitterComponent","renderer","areas","_disabled","_gutterSize","isDragging","areaPositionDivider","listeners","_direction","coerceBooleanProperty","gutterSize","size","coerceNumberProperty","addArea","area","order","getSize","setOrder","initialSize","setStyle","isVertical","onMouseDown","leftAreaIndex","rightAreaIndex","leftArea","rightArea","startPoint","screenX","screenY","item","disableFlex","setSize","runOutsideAngular","listen","onMouseUp","onMouseMove","removeArea","indexToRemove","endPoint","offset","newLeftAreaSize","newRightAreaSize","minLeftAreaSize","getMinSize","minRightAreaSize","rightAreaOffset","unsubscribe","pop","preserveWhitespaces","Renderer2","McGutterDirective","_order","_size","getCursor","getState","coerceCssPixelValue","setAttr","state","attribute","setAttribute","McSplitterAreaDirective","splitter","removeStyle","sz","getSizeProperty","getOffsetSizeProperty","getComputedStyle","parseFloat","getMinSizeProperty","McSplitterModule","nextUniqueId","McToggleBase","_McToggleMixinBase","mixinTabIndex","mixinColor","ThemePalette","Primary","McToggleChange","McToggleComponent","_focusMonitor","_changeDetectorRef","labelPosition","ariaLabel","ariaLabelledby","_uniqueId","name","_checked","EventEmitter","_onTouchedCallback","_onChangeCallback","_","focus","focusVia","_inputElement","_getAriaChecked","checked","_onInteractionEvent","stopPropagation","_onLabelTextChange","_onInputClick","_updateModelValue","_emitChangeEvent","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","source","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","[id]","[class.mc-disabled]","[class.mc-toggle_off]","left","transition","animate","String","Attribute","McToggleModule","cdr","prefix","positions","DEFAULT_4_POSITIONS","classMap","_mcTrigger","_mcPlacement","_mcVisible","BehaviorSubject","onHideSubject","closeOnInteraction","POSITION_MAP","$visible","_mcTitle","isTitleString","unshift","visible","hideTid","clearTimeout","isContentEmpty","showTid","handleBodyInteraction","outputs","fadeAnimation","(body:click)","deps","useFactory","mcTooltipScrollStrategyFactory","scrollDispatcher","parentDisabled","Map","title","_mcMouseEnterDelay","_mcMouseLeaveDelay","_mcTooltipClass","externalValue","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","ENTER","SPACE","multiple","altKey","isArrowKey","preventDefault","tree","keyManager","onKeydown","McTreeSelect","handleOpenKeydown","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","originalOnKeyDown","HOME","END","setFirstItemActive","setLastItemActive","activeItem","A","ctrlKey","hasDeselectedOptions_1","options","option","selected","select","deselect","previouslyFocusedIndex","activeItemIndex","shiftKey","selectViaInteraction","initializeSelection","Promise","resolve","then","setSelectionByValue","ngControl","_value","Array","isArray","getMcSelectNonArrayValueError","selectionModel","selectValue","sortValues","correspondingOption","setActiveItem","changeDetectorRef","_compareWith","error","isDevMode","console","warn","initKeyManager","onKeyDown","tabOut","destroy","_panelOpen","panel","scrollActiveOptionIntoView","resetOptions","changedOrDestroyed","optionSelectionChanges","onSelect","isUserInput","setOptionIds","wasSelected","isSelected","propagateChanges","stateChanges","options_1","toArray","sort","a","b","sortComparator","fallbackValue","valueToEmit","map","valueChange","onChange","selectionChange","McTreeSelectChange","optionIds","join","highlightCorrectOption","empty","activeOptionIndex","scrollTop","getOptionScrollPosition","getItemHeight","getOptionIndex","reduce","current","calculateOverlayPosition","itemHeight","items","getItemCount","panelHeight","Math","min","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","calculateOverlayScroll","offsetY","calculateOverlayOffsetY","checkOverlayWithinViewport","calculateOverlayOffsetX","overlayRect","overlayDir","getBoundingClientRect","viewportSize","viewportRuler","getViewportSize","isRtl","offsetX","leftOverflow","rightOverflow","right","width","round","topSpaceAvailable","triggerRect","bottomSpaceAvailable","height","bottom","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","adjustPanelUp","adjustPanelDown","transformOrigin","getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","optionHeightAdjustment","[class.mc-select-invalid]","[class.mc-select-required]","(focus)","(blur)","(window:resize)","mcSelectAnimations","transformPanel","fadeInContent","McFormFieldControl","CdkTree","ViewportRuler","ErrorStateMatcher","NgForm","FormGroupDirective","McFormField","NgControl","MC_SELECT_SCROLL_STRATEGY","CdkConnectedOverlay","tags","ViewChildren","McTag","customTrigger","ContentChild","McTreeSelectTrigger","McTreeSelection","openedChange","openedStream","closedStream","errorStateMatcher","placeholder","required","autoSelect","compareWith","McTreeSelectMixinBase","McTreeSelectModule","CdkTreeModule","McTreeModule","McTagsModule","McPseudoCheckboxModule","MC_SELECT_SCROLL_STRATEGY_PROVIDER","MC_TEXTAREA_VALUE_ACCESSOR","McTextareaBase","defaultErrorStateMatcher","parentForm","parentFormGroup","McTextareaMixinBase","mixinErrorState","McTextarea","inputValueAccessor","canGrow","focused","controlType","uid","_required","lineHeight","freeRowsHeight","minHeight","valueAccessor","previousNativeValue","growObserver","fromEvent","growSubscription","grow","bind","_id","paddingTop","paddingBottom","ngDoCheck","updateErrorState","dirtyCheckNativeValue","textarea","outerHeight","window","diff","max","scrollHeight","focusChanged","isFocused","isBadInput","onContainerClick","newValue","validity","badInput","getGrowHeight","toString","[class.mc-textarea-resizable]","[attr.placeholder]","[attr.aria-invalid]","[disabled]","[required]","McTextareaModule","FormsModule","hours","minutes","seconds","HHmmss","HHmm","TIMEFORMAT_PLACEHOLDERS","TimeFormats","DEFAULT_TIME_FORMAT","HOURS_MINUTES_SECONDS_REGEXP","RegExp","HOURS_MINUTES_REGEXP","HOURS_ONLY_REGEXP","uniqueComponentIdSuffix","formValidators","formValidatorOnChangeRegistrators","validatorOnChange","c","validatorOnChangeHandler","get","McTimepickerBase","McTimepickerMixinBase","ɵ1","validate","__validatorOnChangeHandler","validator","registerOnValidatorChange","McTimepicker","_minTime","_maxTime","noop","Validators","compose","parseValidator","minTimeValidator","maxTimeValidator","applyInputChanges","_timeFormat","formatValue","timeFormatKey","minValue","minDateTime","getDateFromTimeString","maxValue","maxDateTime","onTouched","onBlur","onPaste","clipboardUserInput","clipboardData","getData","onInput","initialCursorStart","selectionStart","initialCursorEnd","selectionEnd","isAutocompleteTriggered","getParsedTimeParts","hoursOnly","hoursAndMinutes","hoursAndMinutesAndSeconds","doTimestringReformat","errors","createSelectionOfTimeComponentInInput","setProperty","getTimeStringFromDate","timeFormat","getKeyCode","upDownTimeByArrowKeys","switchSelectionBetweenTimeparts","applyParams","changedTime","timeToApply","currentDateTimeInput","updateValueAndValidity","cursorPos","modifiedTimePart","getTimeEditMetrics","incrementTime","decrementTime","getCursorPositionOfPrevTimePartStart","getCursorPositionOfNextTimePartStart","code","newEditParams","cursorStartPosition","cursorEndPosition","dateVal","whatToIncrement","TimeParts","getTimeDigitsFromDate","getDateFromTimeDigits","whatToDecrement","timeString","timeDevider","nextDividerPos","cursorPosition","minutesIndex","hoursIndex","secondsIndex","tempVal","getNumberWithLeadingZero","getHours","getMinutes","getSeconds","match","trim","Number","resultDate","Date","isNaN","getTime","digit","mcTimepickerParse","text","isTimeLowerThenMin","mcTimepickerLowerThenMintime","isTimeGreaterThenMax","mcTimepickerHigherThenMaxtime","timeToCompare","[attr.time-format]","[attr.min-time]","[attr.max-time]","[attr.value]","(input)","(paste)","NG_VALIDATORS","useValue","MC_INPUT_VALUE_ACCESSOR","minTime","maxTime","McTimepickerModule","Right","Left","Top","Bottom","McSidepanelPosition","Void","mcSidepanelTransformAnimation","in","out","transform","params","transformIn","transformOut","AnimationCurves","AccelerationCurve","DecelerationCurve","withIndent","withShadow","animationState","setAnimation","setPanelClass","detectChanges","onAnimation","animationTransform","classList","add","tagEnd","tagList","addOnBlur","McTagInput","ɵ0","separatorKeyCodes","McTagList","McTagTrailingIcon","McTagAvatar","McTagRemove","MC_TAGS_DEFAULT_OPTIONS","McSelectChange","McSelectBase","McSelectMixinBase","McSelectTrigger","McSelect","_viewportRuler","_ngZone","_renderer","_dir","_parentFormField","_scrollStrategyFactory","hiddenItems","oneMoreText","triggerFontSize","panelDoneAnimating","panelDoneAnimatingStream","defer","apply","onSelectionChange","onStable","switchMap","o","_multiple","_focused","_onChange","_onTouched","o1","o2","_placeholder","getMcSelectDynamicMultipleError","getMcSelectNonFunctionValueError","SelectionModel","panelOpen","ngAfterContentInit","changed","added","removed","startWith","ngAfterViewInit","calculateHiddenItems","withHorizontalOrientation","fontSize","selectedOptions","viewValue","isEmpty","handleClosedKeydown","onFadeInDone","onFocus","onAttached","positionChange","getPanelTheme","color","selectedIndex","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","onRemoveMatcherItem","visibleItems","totalItemsWidth","getTotalItemsWidthInMatcher","totalVisibleItemsWidth","tag","offsetTop","offsetHeight","itemsCounter","querySelector","matcherList","itemsCounterShowed","matcherListWidth","matcherWidth","triggerClone","cloneNode","remove","appendChild","querySelectorAll","manager","ActiveDescendantKeyManager","withTypeAhead","withVerticalOrientation","labelCount","countGroupLabelsBeforeOption","optionGroups","first","group","MC_OPTION_PARENT_COMPONENT","ContentChildren","McOption","descendants","McOptgroup","McSelectModule","McOptionModule","McFormFieldModule","McTreeSelectBase","dir","parentFormField","scrollStrategyFactory","_autoSelect","updateSelectedOptions","onRemoveSelectedOption","selectedOption","tabLabelSubscription","tabs","tab","McTabGroup","clampTabIndex","[class.mc-tab-group_dynamic-height]","[class.mc-tab-group_inverted-header]","MC_TABS_CONFIG","dynamicHeight","McTab","tabBodyWrapper","tabHeader","headerPosition","animationDuration","selectedIndexChange","focusChange","animationDone","selectedTabChange","mcTabGroupMixinBase","McTabNavBase","mcTabNavMixinBase","McTabNav","McTabLinkBase","mcTabLinkMixinBase","McTabLink","isActive","[attr.aria-current]","[attr.aria-disabled]","[attr.tabIndex]","[class.mc-active]","active","McTabsModule","McTabLabel","McTabContent","McLightTabsCssStyler","McAlignTabsCenterCssStyler","McAlignTabsEndCssStyler","McStretchTabsCssStyler","McTabLabelWrapper","McTabBody","McTabBodyPortal","McTabHeader","McTagSelectionChange","TAG_ATTRIBUTE_NAMES","McTagBase","_McTagMixinBase","hasFocus","tagListSelectable","_selected","_selectable","_removable","addHostClassName","coercedValue","dispatchSelectionChange","textContent","addClassModificatorForIcons","icons","contentChildren","iconElement","previousElementSibling","nextElementSibling","nextSibling","previousSibling","firstIconElement","secondIconElement","_i","TAG_ATTRIBUTE_NAMES_1","attr","hasAttribute","tagName","toLowerCase","toggleSelected","removable","handleClick","DELETE","BACKSPACE","selectable","blur","[class.mc-tag-selected]","[class.mc-tag-with-avatar]","[class.mc-tag-with-trailing-icon]","[class.mc-tag-disabled]","McIcon","avatar","trailingIcon","removeIcon","parentTag","McTagListBase","_McTagListMixinBase","McTagListChange","userTabIndex","tagChanges","orientation","_tabIndex","lastDestroyedTagIndex","tagInput","hasFocusedTag","syncTagsDisabledState","FocusKeyManager","resetTags","updateTabIndex","updateFocusForDestroyedTags","dropSubscriptions","registerInput","inputElement","originatesFromTag","focusInput","keydown","target","isInputEmpty","contains","clearSelection","correspondingTag","markAsTouched","newTagIndex","isValidIndex","nodeName","skip","listenToTagsFocus","listenToTagsSelection","listenToTagsRemoved","tagFocusSubscription","tagBlurSubscription","tagSelectionSubscription","tagRemoveSubscription","tagSelectionChanges","tagFocusChanges","tagIndex","updateActiveItem","tagBlurChanges","tagRemoveChanges","currentElement","parentElement","[class.mc-invalid]","[class.mc-required]","_addOnBlur","_tagList","emittagEnd","isSeparatorKey","input","hasModifierKey","separators","has","CdkTreeNodeDef","McTreeNodeDef","McTreeNodePadding","arguments","baseLeftPadding","_indent","iconWidth","withIcon","paddingIndent","nodeLevel","treeNode","treeControl","getLevel","level","leftPadding","isExpandable","setPadding","CdkTreeNodePadding","indent","McTreeNodeToggle","CdkTreeNodeToggle","MC_TREE_OPTION_PARENT_COMPONENT","McTreeOptionChange","uniqueIdCounter","McTreeOption","parent","_active","toBoolean","setSelected","setActiveStyles","setInactiveStyles","getHeight","clientRects","getClientRects","getHostElement","emitSelectionChangeEvent","setFocusedOption","getTabIndex","[class.mc-selected]","CdkTreeNode","McTreeNavigationChange","McTreeSelectionChange","McTreeSelectionBase","differs","McTreeSelectionBaseMixin","noUnselect","navigationChange","rawValue","log","withShift","withCtrl","collapse","expand","toggleFocusedOption","PAGE_UP","setPreviousPageItemActive","PAGE_DOWN","setNextPageItemActive","updateScrollSize","withScrollSize","floor","previousIndex_1","previousActiveItemIndex","activeIndex_1","canDeselectLast","emitNavigationEvent","focusedIndex","focusedOption","emitChangeEvent","renderNodeChanges","dataDiffer","viewContainer","parentData","nodeOutlet","arrayOfInstances","_embeddedViews","view","viewDef","def","nodes","node","nodeMatchedQueries","matchedQueryIds","nodeData","nodeIndex","reset","notifyOnChanges","IterableDiffers","CdkTreeNodeOutlet","MC_TREE_DIRECTIVES","McTreeFlattener","transformFunction","getChildren","flattenNode","resultNodes","parentMap","flatNode","children","child","childParentMap","flattenNodes","structuredData","expandFlattenedNodes","results","currentExpand","i","isExpanded","McTreeFlatDataSource","treeFlattener","initialData","flattenedData","expandedData","_data","dataNodes","connect","collectionViewer","viewChange","expansionModel","disconnect","DataSource","McTreeNestedDataSource","CdkPortal","ctorParameters","McTabBase","mcTabMixinBase","viewContainerRef","textLabel","contentPortal","hasOwnProperty","explicitContent","implicitContent","templateLabel","read","mcTabsAnimations","translateTab","onCentering","beforeCentering","afterLeavingCenter","onCentered","dirChangeSubscription","Subscription","EMPTY","computePositionAnimationState","positionIndex","bodyPosition","computePositionFromOrigin","onTranslateTabStarted","isCentering","isCenterPosition","onTranslateTabComplete","fromState","getLayoutDirection","portalHost","PortalHostDirective","content","componentFactoryResolver","centeringSub","leavingSub","ComponentFactoryResolver","McTabLabelWrapperBase","mcTabLabelWrapperMixinBase","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","McTabHeaderBase","showPaginationControls","disableScrollAfter","disableScrollBefore","selectFocusedIndex","indexFocused","_scrollDistance","selectedIndexChanged","_selectedIndex","focusIndex","v","getMaxScrollDistance","scrollDistanceChanged","checkScrollingControls","ngAfterContentChecked","tabLabelCount","labelWrappers","updatePagination","scrollToLabel","updateTabScrollPosition","dirChange","observableOf","resize","realign","withWrap","requestAnimationFrame","newFocusIndex","setTabFocus","onContentChanges","currentTextContent","zoneCallback","checkPaginationEnabled","containerEl","tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","tabList","scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","[class.mc-tab-header__pagination-controls_enabled]","[class.mc-tab-header_rtl]","nextId","McTabChangeEvent","McTabGroupBase","lightTabs","defaultConfig","indexToSelect","tabBodyWrapperHeight","tabsSubscription","_dynamicHeight","lightTab","groupId","isFirstRun_1","createChangeEvent","subscribeToTabLabels","getTabLabelId","getTabContentId","setTabBodyWrapperHeight","tabHeight","wrapper","removeTabBodyWrapperHeight","McMeasureScrollbarService","McModalControlService","DOCUMENT","mcModalType","mcContent","mcComponentParams","mcFooter","mcZIndex","mcWidth","mcWrapClassName","mcClassName","mcStyle","mcCloseByESC","mcClosable","mcMask","mcMaskClosable","mcMaskStyle","mcBodyStyle","mcAfterOpen","mcAfterClose","mcOkText","mcOkType","mcOkLoading","mcOnOk","mcCancelText","mcCancelLoading","mcOnCancel","modalContainer","bodyContainer","autoFocusButtonOk","mcGetContainer","McModalComponent","McModalRef","CssUnitPipe","defaultUnit","formatted","Pipe","ModalBuilderForService","createModal","changeProps","destroyModal","getInstance","modalRef","assign","McModalService","modalControl","openModals","afterAllClose","confirm","confirmType","success","simpleConfirm","delete","McModalModule","McButtonModule","MC_NAVBAR_CONTAINER","MC_NAVBAR_ITEM","MC_NAVBAR_BRAND","MC_NAVBAR_TITLE","McNavbarLogo","McNavbarBrand","McNavbarTitle","McNavbarItemBase","_McNavbarMixinBase","McNavbarItem","_platform","_cdRef","dropdownItems","isCollapsed","_subscription","encodeURI","dropdownContent","denyClickIfDisabled","_focusMonitor$","hasDropdownContent","listenClickOutside","startListenFocusDropdownItems","stopListenFocusDropdownItems","isActiveDropdownLink","link","isBrowser","location","href","handleClickByItem","toggleDropdown","isNavbarItem","handleClickByDropdownItem","forceCloseDropdown","_dropdownElements","el","events","eventListeners","stopImmediatePropagation","Platform","collapsedTitle","dropdownItemTmpl","McNavbarContainer","cssClasses","CollapsibleItem","_collapsed","processCollapsed","collapsed","updateCollapsedClass","CachedItemWidth","itemsForCollapse","_collapsedItemsWidth","calculateAndCacheCollapsedItemsWidth","updateTitle","acc","getTitle","computedTitle","getAttribute","decodeURI","innerText","removeAttribute","McNavbar","forceRecalculateItemsWidth","resizeDebounceInterval","firstLevelElement","secondLevelElements","resizeObserver","debounceTime","_resizeSubscription","updateCollapsed","_itemsWidths","calculateAndCacheItemsWidth","_totalItemsWidths","calculateAndCacheTotalItemsWidth","collapseDelta","maxAllowedWidth","itemsWidths","canCollapse","collapsedItemsWidth","getOuterElementWidth","getPropertyValue","allItemsSelector","allItems","from","getItemsForCollapse","McNavbarModule","idIterator","McProgressBarBase","_McProgressBarMixinBase","McProgressBar","mode","McProgressBarModule","McProgressSpinnerBase","_McProgressSpinnerMixinBase","McProgressSpinner","percentage","McProgressSpinnerModule","McRadioChange","McRadioGroupBase","_McRadioGroupMixinBase","MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","McRadioGroup","_changeDetector","_name","_isInitialized","_labelPosition","controlValueAccessorChangeFn","updateRadioButtonNames","markRadiosForCheck","updateSelectedRadioFromValue","checkSelectedRadioButton","touch","_radios","radio","isAlreadySelected","McRadioButton","McRadioButtonBase","_McRadioButtonMixinBase","radioGroup","_radioDispatcher","removeUniqueSelectionListener","newCheckedState","notify","newDisabledState","onInputClick","onInputChange","groupValueChanged","[class.mc-checked]","UniqueSelectionDispatcher","ariaDescribedby","McRadioModule","McListSelection","horizontal","_keyManager","_tempValues","_setOptionsFromValues","_modelChanges","_b","_c","_element","selectAll","_reportValueChange","deselectAll","_getHeight","_canDeselectLast","values","getSelectedOptionValues","_isValidIndex","listOption","_removeOptionFromList","_hasFocus","optionIndex","_getOptionIndex","setPreviousItemActive","setNextItemActive","_onKeyDown","McListSelectionChange","_getOptionByValue","[tabIndex]","MC_SELECTION_LIST_VALUE_ACCESSOR","McListOption","_McListSelectionMixinBase","McListBase","McList","McListSubheaderCssStyler","McListItemBase","McListItem","_lineSetter","McLineSetter","_lines","_handleFocus","_handleBlur","_getHostElement","McLine","McListModule","McLineModule","McLinkBase","_McLinkBase","McLink","McLinkModule","parentService","rootOpenModals","rootAfterAllClose","rootRegisteredMetaMap","registeredMetaMap","registerModal","hasRegistered","afterOpenSubscription","afterOpen","afterCloseSubscription","afterClose","removeOpenModal","ModalUtil","document","lastPosition","listenDocumentClick","getLastClickPosition","clientX","clientY","ModalUtil$1","cfr","mcMeasureScrollbarService","changeDetector","_mcClosable","_mcMask","_mcMaskClosable","_mcOkLoading","_mcCancelLoading","isComponent","createDynamicComponent","isModalButtons","formatModalButtons","HTMLElement","OverlayRef","handleVisibleStateChange","firstChange","contentComponentRef","insert","changeVisibleFromInside","triggerOk","onClickOkCancel","triggerCancel","getContentComponentRef","getContentComponent","getElement","onClickMask","isModalType","onClickCloseBtn","ok","cancel","loadingKey","caseClose_1","doClose","isPromise","handleThen","catch","isNonEmptyString","isTemplateRef","Type","animation","closeResult","changeBodyOverflow","animateTo","getButtonCallableProp","prop","onButtonClick","button","loading","changeAnimationState","maskAnimationClassMap","modalAnimationClassMap","isVisible","updateTransformOrigin","buttons","autoLoading","component","factory","resolveComponentFactory","childInjector","parentInjector","modalElement","plusNum","body","scrollBarWidth","McDatepickerInput","dateChange","McDatepickerInputEvent","getThemePalette","formField","dateAdapter","format","dateFormats","display","dateInput","getValidDateOrNull","obj","isDateInstance","isValid","MC_DATEPICKER_VALUE_ACCESSOR","MC_DATEPICKER_VALIDATORS","[attr.aria-haspopup]","[attr.aria-owns]","[attr.min]","[attr.max]","(change)","DateAdapter","MC_DATE_FORMATS","mcDatepicker","mcDatepickerFilter","McDatepickerToggleIcon","McDatepickerToggle","intl","defaultTabIndex","parsedTabIndex","datepicker","watchStateChanges","datepickerDisabled","disabledChange","inputDisabled","datepickerInput","datepickerToggled","[class.mc-datepicker-toggle_active]","[class.mc-warn]","McDatepickerIntl","customIcon","McDatepickerModule","McCalendar","McCalendarBody","McDatepicker","McDatepickerContent","McMonthView","McYearView","McMultiYearView","McCalendarHeader","MC_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","McDivider","_vertical","_inset","[attr.aria-orientation]","[class.mc-divider-vertical]","[class.mc-divider-inset]","vertical","inset","McDividerModule","McDropdownContent","_template","_componentFactoryResolver","_appRef","_injector","_viewContainerRef","_document","_attached","context","_portal","_outlet","DomPortalOutlet","createElement","insertBefore","outletElement","isAttached","ApplicationRef","MC_DROPDOWN_PANEL","McDropdownItemBase","_McDropdownItemMixinBase","McDropdownItem","_parentDropdownPanel","_hovered","_highlighted","_triggersNestedDropdown","addItem","removeItem","_getTabIndex","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","childNodes","length_1","nodeType","[attr.role]","[class.mc-dropdown__item_highlighted]","(mouseenter)","mcDropdownAnimations","transformDropdown","opacity","query","fadeInItems","MC_DROPDOWN_DEFAULT_OPTIONS","providedIn","MC_DROPDOWN_DEFAULT_OPTIONS_FACTORY","McDropdown","_defaultOptions","_classList","_panelAnimationState","_animationDone","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_overlapTriggerX","overlapTriggerX","_overlapTriggerY","overlapTriggerY","_hasBackdrop","throwMcDropdownInvalidPositionX","setPositionClasses","throwMcDropdownInvalidPositionY","classes","previousPanelClass","_previousPanelClass","className","_handleKeydown","setFocusOrigin","focusFirstItem","lazyContent","resetActiveItem","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","_onAnimationStart","templateRef","MC_DROPDOWN_SCROLL_STRATEGY","MC_DROPDOWN_SCROLL_STRATEGY_FACTORY_PROVIDER","MC_DROPDOWN_SCROLL_STRATEGY_FACTORY","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","_overlay","_scrollStrategy","_parent","_dropdownItemInstance","_handleTouchStart","_openedBy","dropdownOpened","dropdownClosed","_overlayRef","_opened","_closeSubscription","_hoverSubscription","triggersNestedDropdown","_dropdown","dropdown","reason","_destroy","_check","_handleHover","_cleanUpSubscriptions","_createOverlay","_setPosition","_getPortal","_closingActions","_init","opened","_reset","_setIsOpened","throwMcDropdownMissingError","_getOverlayConfig","_subscribeToPositions","withLockedPosition","originFallbackX","overlayFallbackX","overlayFallbackY","originFallbackY","backdrop","parentClose","hover","_handleMousedown","_handleClick","delay","asapScheduler","aria-haspopup","[attr.aria-expanded]","(mousedown)","McDropdownModule","McContentComponent","[class.mc-layout-content]","McFooterComponent","[class.mc-layout-footer]","McHeaderComponent","[class.mc-layout-header]","McLayoutComponent","hasSidebar","[class.mc-layout]","[class.mc-layout-has-sidebar]","McSidebarComponent","mcLayoutComponent","_mcWidth","mcCollapsedWidth","mcCollapsedChange","collapsible","mcCollapsed","[class.mc-layout-sidebar]","[class.mc-layout-sidebar-collapsed]","[style.flex]","[style.max-width.px]","[style.min-width.px]","[style.width.px]","Host","mcCollapsible","McLayoutModule","listSelection","checkboxPosition","wasSelected_1","_text","[class.mc-focused]","McListSelectionBase","compareDate","oldActiveDate","activeDate","activeDateChange","focusActiveCell","getActiveCell","getYear","mcCalendarBody","createCellForYear","year","yearName","getYearName","createDate","McCalendarCell","shouldEnableYear","maxDate","minDate","dateFilter","firstOfYear","date","addCalendarDays","selectedChange","yearSelected","monthSelected","createMissingDateImplError","_activeDate","today","validDate","deserialize","clampDate","init","selectedMonth","getMonthInCurrentYear","_minDate","_maxDate","onMonthSelected","month","normalizedDate","daysInMonth","getNumDaysInMonth","getDate","handleCalendarBodyKeydown","addCalendarMonths","getMonth","addCalendarYears","todayMonth","yearLabel","monthNames","getMonthNames","months","row","createCellForMonth","monthName","monthYearA11yLabel","newMonthName","toLocaleUpperCase","substr","shouldEnableMonth","activeYear","isYearAndMonthAfterMaxDate","isYearAndMonthBeforeMinDate","firstOfMonth","maxYear","maxMonth","minYear","minMonth","calendar","currentView","label","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","isSameView","nextEnabled","date1","date2","startView","userSelection","moveFocusOnNextTick","intlChanges","_startAt","clampedActiveDate","_currentView","calendarHeaderPortal","headerComponent","startAt","ngAfterViewChecked","getCurrentViewComponent","updateTodaysDate","monthView","yearView","multiYearView","dateSelected","sameDate","yearSelectedInMultiYearView","normalizedYear","monthSelectedInYearView","normalizedMonth","userSelected","goToDateInView","dateClass","mcDatepickerAnimations","fadeInCalendar","Element","matches","msMatchesSelector","datepickerUid","MC_DATEPICKER_SCROLL_STRATEGY","MC_DATEPICKER_SCROLL_STRATEGY_FACTORY","McDatepickerContentBase","McDatepickerContentMixinBase","[@transformPanel]","selectedChanged","validSelected","focusedElementBeforeOpen","inputSubscription","_color","popupRef","popupComponentRef","oldValue","selectYear","selectMonth","activeElement","openAsPopup","calendarPortal","completeClose","createPopup","setColor","createPopupPositionStrategy","calendarHeaderComponent","targetElement","datepickerSubscription","localeSubscription","lastValueValid","cvaOnChange","mcDatepickerParse","minValidator","control","controlValue","mcDatepickerMin","actual","maxValidator","mcDatepickerMax","filterValidator","localeChanges","oldDate","_min","_max","isAltDownArrow","readOnly","parse","McCard","McCardModule","MC_CHECKBOX_CLICK_ACTION","MC_CHECKBOX_CONTROL_VALUE_ACCESSOR","McCheckbox","Init","Checked","Unchecked","Indeterminate","McCheckboxChange","McCheckboxBase","_McCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","TransitionCheckState","_controlValueAccessorChangeFn","_indeterminate","focusOrigin","_onInputFocusChange","_transitionCheckState","indeterminate","newState","oldState","[class.mc-indeterminate]","[class.mc-checkbox-label-before]","MC_CHECKBOX_REQUIRED_VALIDATOR","McCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","McCheckboxModule","stepUp","step","res","stepDown","MC_INPUT_INVALID_TYPES","BIG_STEP","SMALL_STEP","McInputBase","_McInputMixinBase","McNumberInput","_model","bigStep","isDigit","Infinity","_host","self","getPrototypeOf","normalizeSplitter","_focusChanged","minuses","NUMPAD_MINUS","DASH","FF_MINUS","serviceKeys","TAB","arrows","allowedKeys","concat","isIEPeriod","isNotIEPeriod","metaKey","C","V","X","F1","F12","EDGE","TRIDENT","ZERO","NINE","NUMPAD_ZERO","NUMPAD_NINE","valueAsNumber","update","replace","isFloat","isInt","test","NgModel","McFormFieldNumberControl","McInput","_uid","_type","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","_validateType","_dirtyCheckNativeValue","_onInput","_isNeverEmpty","_isBadInput","getMcInputUnsupportedTypeError","McInputMono","MIN_VALIDATOR","MinValidator","_createValidator","_validator","MAX_VALIDATOR","MaxValidator","McInputModule","calendarLabel","openCalendarLabel","displayValue","enabled","numCols","activeCell","cellAspectRatio","selectedValueChange","cellClicked","cell","columnChanges","rows","firstRowOffset","cellPadding","cellWidth","isActiveCell","rowIndex","colIndex","cellNumber","aria-readonly","todayValue","selectedValue","labelMinRequiredCells","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","hasSameMonthAndYear","selectedDate","getDateInCurrentMonth","selectedYear","todayDate","monthLabel","firstWeekOffset","getDayOfWeek","createWeekCells","dateNames","getDateNames","weeks","shouldEnableDate","dateA11yLabel","cellClasses","d1","d2","todayYear","activeOffset","years","onYearSelected","yearsPerPage","McAutocomplete","getScrollTop","setVisibility","showPanel","emitSelectEvent","McAutocompleteSelectedEvent","optionSelected","MC_AUTOCOMPLETE_DEFAULT_OPTIONS","displayWith","panelWidth","autoActiveFirstOption","McAutocompleteOrigin","MC_AUTOCOMPLETE_SCROLL_STRATEGY","MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MC_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","McAutocompleteTrigger","zone","optionSelections","autocomplete","autocompleteAttribute","_autocompleteDisabled","overlayAttached","componentDestroyed","viewportSubscription","canOpenOnNextFocus","closeKeyEventStream","windowBlurHandler","destroyPanel","openPanel","attachOverlay","closePanel","closingActionsSubscription","getOutsideClickStream","McOptionSelectionChange","setTriggerValue","activeOption","prevActiveItem","canOpen","scrollToOption","handleInput","previousValue","handleFocus","clickTarget","newScrollPosition","setScrollTop","subscribeToClosingActions","firstStable","optionChanges","tap","reapplyLastPosition","panelClosingActions","setValueAndClose","toDisplay","inputValue","_control","clearPreviousSelectedOption","getMcAutocompleteMissingPanelError","setOrigin","getConnectedElement","updateSize","getPanelWidth","getOverlayConfig","wasOpen","withPush","connectedTo","getConnectedOverlayOrigin","getHostWidth","[attr.autocomplete]","(focusin)","autocompleteDisabled","McAutocompleteModule","McButtonCssStyler","[class.mc-button]","[class.mc-icon-button]","McButtonBase","McButtonMixinBase","McButton","McAnchor","haltDisabledEvents","MC_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","McButtonToggleGroup","McButtonToggleChange","buttonToggles","syncButtonToggle","isPrechecked","[class.mc-button-toggle-vertical]","McButtonToggle","buttonToggleGroup","isSingleSelector","onToggleClick","newChecked","[class.mc-button-toggle-standalone]","[class.mc-button-toggle-checked]","mcButton","McButtonToggleModule","readonly","hostElement","onClick","[class.mc-card_readonly]","[class.mc-card_selected]","__extends","d","__","constructor","extendStatics","isBoolean","val","MC_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","Default","colorPalette","errorState","matcher","isErrorState","optionsArray","groups","groupCounter","optionHeight","currentScrollPosition","optionOffset","arrayMap","array","iteratee","baseValues","object","props","mcSelectScrollStrategyProviderFactory","reposition","getMcFormFieldMissingControlError","MC_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","inputType","sanitizeNumber","isFinite","getPrecision","arr","pow","value1","value2","precision","provider","openSidepanels","scrollThrottle","setPrototypeOf","__proto__","p","__assign","s","n","MC_SANITY_CHECKS","_sanityChecksEnabled","_hasDoneGlobalChecks","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","computedStyle","removeChild","BidiModule","Second","Empty","_setLineClass","count","_resetClasses","_setClass","isAdd","ShowOnDirtyErrorStateMatcher","form","invalid","dirty","submitted","touched","McPseudoCheckbox","scrollbarMeasure","overflow","initScrollBarWidth","_scrollbarWidth","scrollDiv","scrollProp","clientWidth","McOptgroupBase","McOptgroupMixinBase","uniqueOptgroupIdCounter","labelId","[class.mc-optgroup-disabled]","[attr.aria-labelledby]","mostRecentViewValue","[class.mc-option-multiple]","MC_LABEL_GLOBAL_OPTIONS","StandardCurve","SharpCurve","topCenter","topLeft","topRight","rightTop","rightBottom","bottomCenter","bottomLeft","bottomRight","leftTop","leftBottom","minWidth","animateChild","McIconCSSStyler","McIconBase","_McIconMixinBase","iconName","McCleaner","McHint","McPrefix","McStepper","onStepUp","onStepDown","McSuffix","McFormFieldBase","_McFormFieldMixinBase","_labelId","hovered","_validateControlChild","_numberControl","hasStepper","_stepper","valueChanges","clearValue","hasCleaner","onHoverChanged","isHovered","connectionContainerRef","_shouldForward","_hint","_suffix","_prefix","_cleaner","[class.mc-form-field_invalid]","[class.mc-form-field_has-prefix]","[class.mc-form-field_has-suffix]","[class.mc-form-field_has-cleaner]","[class.mc-form-field_has-stepper]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","(mouseleave)","McFormFieldWithoutBorders","uniqueAutocompleteIdCounter","defaults","_isOpen","_autoActiveFirstOption"],"mappings":";;;;;;65CoHuBA,SAAgBwyE,GAAUC,EAAG5uD,GAEzB,QAAS6uD,KAAOhyE,KAAKiyE,YAAcF,EADnCG,GAAcH,EAAG5uD,GAEjB4uD,EAAE9wE,UAAkB,OAANkiB,EAAa7hB,OAAOnB,OAAOgjB,IAAM6uD,EAAG/wE,UAAYkiB,EAAEliB,UAAW,GAAI+wE,ICzBnF,QAAgBG,GAAUC,GAA4B,MAAsB,iBAARA,GAEpE,QAAgB/pC,GAAUrlC,GACtB,MAAgB,OAATA,GAAiB,GAAGA,GAAY,QCM3C,QAAgBqvE,KACZ,OAAO,ECCX,QAAgB7oE,GAAyC8oE,GACrD,MAAJ,UAAA5oE,GAWQ,QAAR6oE,KAAA,IAAoB,GAApB5rE,MAAAi7B,EAAA,EAAoBA,EAApBiF,UAAAz1B,OAAoBwwB,IAAAj7B,EAApBi7B,GAAAiF,UAAAjF,EAAQ,IAARtiC,GAAAoK,EAAA8uB,MAAAx4B,KAEqB2G,IAFrB3G,WAFgBV,GAAhB8U,WAAqC,IAMjC,MAfqBpK,GAAzBuoE,EAAA7oE,GACQpI,OAAR2I,eAAYsoE,EAAZtxE,UAAA,gBAAQ,WACI,MAAOjB,MAAKoU,eAGhB,SAAapR,GACThD,KAAKoU,UAAYM,EAAAA,sBAAsB1R,oCASnDuvE,GAfyBD,GCYzB,QAAgB35D,GACZ25D,EACAE,GAEA,WAFJ,KAAAA,IAAIA,EAA6B55D,GAAa65D,SAE9C,SAAA/oE,GAwBQ,QAAR6oE,KAAA,IAAoB,GAApB5rE,MAAAi7B,EAAA,EAAoBA,EAApBiF,UAAAz1B,OAAoBwwB,IAAAj7B,EAApBi7B,GAAAiF,UAAAjF,EAAQ,IAARtiC,GAAAoK,EAAA8uB,MAAAx4B,KACqB2G,IADrB3G,WAGYV,GAAKo7B,MAAQ83C,IAErB,MA7BqBxoE,GAAzBuoE,EAAA7oE,GAIQpI,OAAR2I,eAAYsoE,EAAZtxE,UAAA,aAAQ,WACI,MAAOjB,MAAKy/D,YAGhB,SAAUz8D,GAClB,GAAkB0vE,GAAe1vE,GAASwvE,CAE1BE,KAAiB1yE,KAAKy/D,SAClBz/D,KAAKy/D,QACLz/D,KAAKsJ,YAAY5G,cAAcg0B,UAAUqF,OAAO,MAAM/7B,KAAKy/D,QAG3DiT,GACA1yE,KAAKsJ,YAAY5G,cAAcg0B,UAAUC,IAAI,MAAM+7C,GAGvD1yE,KAAKy/D,OAASiT,oCAS9BH,GA7ByBD,GClBzB,QAAgB55D,GAAiD45D,EAAStnB,GACtE,WADJ,KAAAA,IAA0EA,EAA1E,GACA,SAAAthD,GAWQ,QAAR6oE,KAAA,IAAoB,GAApB5rE,MAAAi7B,EAAA,EAAoBA,EAApBiF,UAAAz1B,OAAoBwwB,IAAAj7B,EAApBi7B,GAAAiF,UAAAjF,EAAQ,IAARtiC,GAAAoK,EAAA8uB,MAAAx4B,KACqB2G,IADrB3G,WAFgBV,GAAhBkkC,UAAoCwnB,IAKhC,MAdqBhhD,GAAzBuoE,EAAA7oE,GACQpI,OAAR2I,eAAYsoE,EAAZtxE,UAAA,gBAAQ,WACI,MAAOjB,MAAK0E,UAAY,EAAI1E,KAAKwjC,eAGrC,SAAaxgC,GACThD,KAAKwjC,UAAqB,MAATxgC,EAAgBA,EAAQgoD,mCAQrDunB,GAdyBD,GCsBzB,QAAgBpoD,GAAsDooD,GAClE,MAAJ,UAAA5oE,GAYQ,QAAR6oE,KAAA,IAAoB,GAApB5rE,MAAAi7B,EAAA,EAAoBA,EAApBiF,UAAAz1B,OAAoBwwB,IAAAj7B,EAApBi7B,GAAAiF,UAAAjF,EAAQ,IAARtiC,GAAAoK,EAAA8uB,MAAAx4B,KACqB2G,IADrB3G,WAVQV,GAARqzE,YAA8B,EAMbrzE,EAAjBwjB,aAAgC,GAAIpV,GAAAA,UAoBhC,MA5BqB1D,GAAzBuoE,EAAA7oE,GAgBQ6oE,EAARtxE,UAAAuqB,iBAAQ,WACR,GAAkB43C,GAAWpjE,KAAK2yE,WAChBxqC,EAASnoC,KAAKgqB,iBAAmBhqB,KAAK+pB,WACtC6oD,EAAU5yE,KAAKgpB,mBAAqBhpB,KAAK8pB,yBACzCg3C,EAAU9gE,KAAK8gB,UAAY9gB,KAAK8gB,UAAiB,QAAkB,KACnEqiD,EAAWyP,EAAQC,aAAa/R,EAAS34B,EAE3Cg7B,KAAaC,IACbpjE,KAAK2yE,WAAaxP,EAClBnjE,KAAK8iB,aAAahf,SAGlCyuE,GA5ByBD,GCmOzB,QAAgB/1C,GACZ4lB,EACAniC,EACAwc,GAGA,GAAIA,EAAaprB,OAAQ,CAMrB,IAAK,GALC0hE,GAAe9yD,EAAQgD,UACvB+vD,EAASv2C,EAAaxZ,UAExBgwD,EAAe,EAEV7lC,EAAI,EAAGA,EAAIgV,EAAc,EAAGhV,IAC7B2lC,EAAa3lC,GAAGzQ,OAASo2C,EAAa3lC,GAAGzQ,QAAUq2C,EAAOC,IAC1DA,GAIR,OAAOA,GAGX,MAAO,GAWX,QAAgB9uD,GACZi+B,EACA8wB,EACAC,EACAvuD,GAEJ,GAAUwuD,GAAehxB,EAAc8wB,CAEnC,OAAIE,GAAeD,EAAgCC,EAE/CA,EAAeF,EAAeC,EAAwBvuD,EAC/CC,KAAKkH,IAAI,EAAGqnD,EAAexuD,EAAcsuD,GAG7CC,EC5MX,QAASE,GAAeC,EAAYC,GAKhC,IAJJ,GAAQ9gE,IAAS,EACPpB,EAAkB,MAATiiE,EAAgB,EAAIA,EAAMjiE,OACnC/C,EAAS2S,MAAM5P,KAEZoB,EAAQpB,GACb/C,EAAQmE,GAAU8gE,EAASD,EAAO7gE,GAASA,EAAO6gE,EAGtD,OAAOhlE,GAEX,QAASklE,GAAcC,EAAoCC,GACvD,MAAOL,GAASK,EAAQ,SAAC/xE,GACrB,MAAO8xE,GAAQ9xE,KChHvB,QAAgB03B,KACZ,MAAOhtB,OAAM,iEASjB,QAAgB8U,KACZ,MAAO9U,OAAM,sDAQjB,QAAgBitB,KACZ,MAAOjtB,OAAM,qCtHCjB,QAAgBsnE,GAAsCxzE,GAElD,MAAO,YAAM,MAAAA,GAAQ8R,iBAAiB2hE,cuH5B1C,QAAgBC,KACd,MAAOxnE,OAAM,oDjB8Cf,QAAgBynE,KACZ,OAAS1H,uBAAuB,GrGcpC,QAAgBI,GAAwCrsE,GACpD,MAAO,YAAM,MAAAA,GAAQ8R,iBAAiB2hE,cAuB1C,QAAgBzE,KACZ,MAAO9iE,OAAM,2MuHvFjB,QAAgBu7D,GAA+BmM,GAC3C,MAAO1nE,OAAM,eAAe0nE,EAAhC,kCzBDA,QAASC,GAAe/wE,GACpB,OAAQgxE,SAAShxE,IAAU4wB,MAAM5wB,GAC3B,KACAA,EAGV,QAASixE,GAAajxE,GACtB,GAAUkxE,GAAMlxE,EAAMwpB,WAAWzpB,MAAM,IAEnC,OAAsB,KAAfmxE,EAAI9iE,OACL,EAECwT,KAAKuvD,IAAI,GAAID,EAAI,GAAG9iE,QAG/B,QAASulB,GAAIy9C,EAAgBC,GAC7B,GAAUC,GAAY1vD,KAAKkH,IAAImoD,EAAaG,GAASH,EAAaI,GAI9D,OAAON,IAFMK,EAASE,EAAYD,EAASC,GAAaA,G0BjB5D,QAAgBpb,GAA2Bqb,GACvC,MAAOnoE,OACH,uCAAuCmoE,EAD/C,iIlCyDA,QAAgBtV,GAAsC/+D,GAClD,MAAO,YAAM,MAAAA,GAAQ8R,iBAAiB2hE,cmCxD1C,QAAgBpf,KACZ,KAAMnoD,OAAM,kMAWhB,QAAgB6kD,KACZ,KAAM7kD,OAAM,+IAShB,QAAgB+kD,KACZ,KAAM/kD,OAAM,6I/CuChB,QAAgB2jD,KACZ,OACIc,iBAAiB,EACjBE,iBAAiB,EACjBT,UAAW,QACXE,UAAW,QACX5+C,cAAe,oCzE7BvB,QAAgB2gD,GAAoCryD,GAChD,MAAO,YAAM,MAAAA,GAAQ8R,iBAAiB2hE,c4Cwd1C,QAAStsB,GAAU0C,GAEf,QAASA,IAAuB,gBAARA,IAAmC,kBAARA,KAA4D,kBAA9B,GAAqBnpC,MAA6D,kBAA/B,GAAqB2mC,MtCtZ7J,QAASt0C,GAAoBxQ,EAAkC+xE,GAG3D,IAFJ,GAAQrsC,GAA6B1lC,EAAQC,cAAcqjC,cAEhDoC,IAAWA,EAAOzR,UAAU+N,SAAS,2BACxC0D,EAASA,EAAOpC,aAGpB,OAAOoC,GAASqsC,EAAe1jE,KAAK,SAACC,GAAc,MAAAA,GAAUnD,KAAO,EAAQA,KAAM,KfuFtF,QAAgB2P,GAA+Brd,GAC3C,MAAO,YAAM,MAAAA,GAAQ8R,iBAAiB2hE,YAAYc,eAAgB,MAWtE,QAAgBxuE,GAAiCX,GAC7C,MAAO8G,OAAM,uBAAuB9G,EAAxC,iBkIxNA,QAAgBiG,KACZ,MAAO3B,GAAAA,QAAQ,UACX8N,EAAAA,MAAM,IAAK9U,EAAAA,OACPsjB,MAAO,UAEXxO,EAAAA,MAAM,IAAM9U,EAAAA,OACRsjB,MAAO,OAEX3K,EAAAA,WAAW,UAAWC,EAAAA,QAAQ,uCdKtC,GAAI02D,IAAgB,SAASH,EAAG5uD,GAI5B,OAHA+uD,GAAgB5wE,OAAOozE,iBAChBC,uBAA2B3zD,QAAS,SAAU+wD,EAAG5uD,GAAK4uD,EAAE4C,UAAYxxD,IACvE,SAAU4uD,EAAG5uD,GAAK,IAAK,GAAIyxD,KAAKzxD,GAAOA,EAAEurB,eAAekmC,KAAI7C,EAAE6C,GAAKzxD,EAAEyxD,MACpD7C,EAAG5uD,IASjB0xD,GAAW,WAQlB,MAPAA,IAAWvzE,OAAO22C,QAAU,SAAkBivB,GAC1C,IAAK,GAAI4N,GAAG3nC,EAAI,EAAG4nC,EAAIluC,UAAUz1B,OAAQ+7B,EAAI4nC,EAAG5nC,IAAK,CACjD2nC,EAAIjuC,UAAUsG,EACd,KAAK,GAAIynC,KAAKE,GAAOxzE,OAAOL,UAAUytC,eAAe7kC,KAAKirE,EAAGF,KAAI1N,EAAE0N,GAAKE,EAAEF,IAE9E,MAAO1N,IAEJ2N,GAASr8C,MAAMx4B,KAAM6mC,YEhCnBmuC,GAAmB,GAAI7lE,GAAAA,eAAwB,oBACxD2gD,WAAY,OACZlH,QAASypB,IAabr+D,GAAA,WAcI,QAAJA,GAA8DihE,GAAAj1E,KAA9Di1E,qBAA8DA,EARlDj1E,KAAZk1E,sBAAmC,EAGvBl1E,KAAZstD,UAA4C,gBAAbzI,WAAyBA,SAAWA,SAAW,KAGlE7kD,KAAZm1E,QAAwC,gBAAXvpD,SAAuBA,OAASA,OAAS,KAG1D5rB,KAAKo1E,sBAAwBp1E,KAAKk1E,uBAClCl1E,KAAKq1E,yBACLr1E,KAAKs1E,uBACLt1E,KAAKk1E,sBAAuB,GA+CxC,MA1CYlhE,GAAZ/S,UAAAm0E,kBAAI,WACI,MAAOp1E,MAAKi1E,sBAAwBtzD,EAAAA,cAAgB3hB,KAAKu1E,cAIrDvhE,EAAZ/S,UAAAs0E,WAAI,WAEI,MAAOv1E,MAAKm1E,UAAYn1E,KAAKm1E,QAAmB,WAAKn1E,KAAKm1E,QAAiB,UAGvEnhE,EAAZ/S,UAAAo0E,uBAAI,WACQr1E,KAAKstD,YAActtD,KAAKstD,UAAUkoB,SAClC5zD,QAAQC,KACJ,+GAMJ7N,EAAZ/S,UAAAq0E,qBAAI,WACI,GAAIt1E,KAAKstD,WAAyC,kBAArBn1C,kBAAiC,CACtE,GAAkBs9D,GAAcz1E,KAAKstD,UAAUM,cAAc,MAEjD6nB,GAAY/+C,UAAUC,IAAI,0BAC1B32B,KAAKstD,UAAUpE,KAAKltB,YAAYy5C,EAE5C,IAAkBC,GAAgBv9D,iBAAiBs9D,EAKnCC,IAA2C,SAA1BA,EAAc9rB,SAC/BhoC,QAAQC,KACJ,2IAMR7hB,KAAKstD,UAAUpE,KAAKysB,YAAYF,oBA9D5ChvE,KAAC8B,EAAAA,SAAD5B,OACI+B,SAAWktE,EAAAA,YACXntE,SAAWmtE,EAAAA,oDAYfnvE,KAAAsG,QAAAxF,aAAAd,KAAiBkB,EAAAA,WAAjBlB,KAA6Be,EAAAA,OAA7Bb,MAAoCquE,SAmDpChhE,SEpEI6E,QAAU,UACVg9D,OAAS,SACTzpE,MAAQ,QACRqmE,QAAU,SACVqD,MAAQ,IWbZryB,GAAA,WAAA,QAAAA,MAIqB,sBAJrBh9C,KAACC,EAAAA,UAADC,OACIC,SAAU,sBACVE,MAAQmC,MAAO,eAEnBw6C,mBAOI,QAAJL,GAAwBC,EAAmC9B,GAAvD,GAAJjiD,GAAAU,IAAwBA,MAAxBqjD,OAAwBA,EAAmCrjD,KAA3DuhD,SAA2DA,EACnDvhD,KAAK+1E,cAAc/1E,KAAKqjD,OAAOjyC,QAE/BpR,KAAKqjD,OAAOlwC,QAAQrS,UAAU,WAC1BxB,EAAKy2E,cAAcz2E,EAAK+jD,OAAOjyC,UA0B3C,MAtBYgyC,GAAZniD,UAAA80E,cAAI,SAAsBC,GAClBh2E,KAAKi2E,gBACS,IAAVD,GAAyB,IAAVA,EACfh2E,KAAKk2E,UAAU,MAAMF,EAAjC,SAA+C,GAC5BA,EAAQ,GACfh2E,KAAKk2E,UAAU,iBAAiB,IAIhC9yB,EAAZniD,UAAAg1E,cAAI,WACIj2E,KAAKk2E,UAAU,aAAa,GAC5Bl2E,KAAKk2E,UAAU,aAAa,GAC5Bl2E,KAAKk2E,UAAU,iBAAiB,IAG5B9yB,EAAZniD,UAAAi1E,UAAI,SAAkB3kB,EAAmB4kB,GAC7BA,EACAn2E,KAAKuhD,SAAS7+C,cAAcg0B,UAAUC,IAAI46B,GAE1CvxD,KAAKuhD,SAAS7+C,cAAcg0B,UAAUqF,OAAOw1B,IAGzDnO,KAEAO,GAAA,WAAA,QAAAA,MAK2B,sBAL3Bl9C,KAAC8B,EAAAA,SAAD5B,OACI+B,WACAD,SAAUg7C,IACVj7C,cAAei7C,QAEnBE,KCnDAyyB,GAAA,WAAA,QAAAA,MAKA,MAHIA,GAAJn1E,UAAA4xE,aAAI,SAAa/R,EAA6BuV,GACtC,SAAUvV,GAAWA,EAAQwV,UAAYxV,EAAQyV,OAAUF,GAAQA,EAAKG,4BAHhF/vE,KAACkM,EAAAA,aAKDyjE,KAGAruD,GAAA,WAAA,QAAAA,MAbA,MAeIA,GAAJ9mB,UAAA4xE,aAAI,SAAa/R,EAA6BuV,GACtC,SAAUvV,GAAWA,EAAQwV,UAAYxV,EAAQ2V,SAAYJ,GAAQA,EAAKG,4BAHlF/vE,KAACkM,EAAAA,WAADhM,OAAcmpD,WAAY,8GAb1B/nC,KCkBA2uD,GAAA,WAAA,QAAAA,KAea12E,KAAb0X,MAA4C,YAE/B1X,KAAb0E,UAAiC,EACjC,sBAlBA+B,KAAC0C,EAAAA,UAADxC,OACIwD,cAAeC,EAAAA,kBAAkBC,KACjC4M,qBAAqB,EACrB3M,gBAAiBC,EAAAA,wBAAwBC,OACzC5D,SAAU,qBACV6D,QAAS,qqBACTrB,SAAJ,4GACItC,MACImC,MAAO,qBACPo6D,2BAA4B,4BAC5B1iB,qBAAsB,sBACtBvlC,sBAAuB,kCAI/B1D,QAAAjR,KAAKqB,EAAAA,QAELpD,WAAA+B,KAAKqB,EAAAA,SACL4uE,KC/BAhtD,GAAA,WAAA,QAAAA,MAIqC,sBAJrCjjB,KAAC8B,EAAAA,SAAD5B,OACI8B,SAAUiuE,IACVluE,cAAekuE,QAEnBhtD,KCLA4rB,GAAA,WAuBI,QAAJA,GACkCuP,GAAA7kD,KAAlC6kD,SAAkCA,EATtB7kD,KAAZ22E,kBACQrxE,SAAU,WACVzC,IAAK,UACLqjB,MAAO,OACPK,OAAQ,OACRqwD,SAAU,UAMV52E,KAAK62E,qBA9Bb,MASIv1E,QAAJ2I,eAAQqrC,EAARr0C,UAAA,sBAAI,WACI,MAAIjB,MAAK82E,gBACE92E,KAAK82E,iBAEhB92E,KAAK62E,qBAEE72E,KAAK82E,kDAkBhBxhC,EAAJr0C,UAAA41E,mBAAI,WACJ,GAAcE,GAAY/2E,KAAK6kD,SAAS+I,cAAc,MAG9C,KAAK,GAAMopB,KAAch3E,MAAK22E,iBACtB32E,KAAK22E,iBAAiBjoC,eAAesoC,KACrCD,EAAUn0E,MAAMo0E,GAAch3E,KAAK22E,iBAAiBK,GAI5Dh3E,MAAK6kD,SAASqE,KAAKltB,YAAY+6C,EAEvC,IAAc7wD,GAAQ6wD,EAAUjmC,YAAcimC,EAAUE,WAEhDj3E,MAAK6kD,SAASqE,KAAKysB,YAAYoB,GAC/B/2E,KAAK82E,gBAAkB5wD,kBA5C/Bzf,KAACkM,EAAAA,WAADhM,OACImpD,WAAY,+CAuBhBrpD,SAAAa,GAAAC,aAAAd,KAASe,EAAAA,OAATb,MAAgB6uC,EAAAA,wIA5BhBF,mBCOA,QAAA4hC,MAA6B,MAA7BA,MAEaC,GAA8D3tE,EAAc0tE,IAGrFE,GAA0B,EAK9Br6C,GAAA,SAAArzB,GAAA,QAAAqzB,KAAA,GAAAz9B,GAAA,OAAAoK,GAAAA,EAAA8uB,MAAAx4B,KAAA6mC,YAAA7mC,WAqBIV,GAAJ+3E,QAAsB,qBAAqBD,OAC3C,MANgCptE,GAAhC+yB,EAAArzB,kBAhBAjD,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,cACVC,SAAU,aACVuC,SAAJ,gIACIe,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,OACzCE,QAAS,YACTD,QAAS,2HACT3D,MACImC,MAAO,cACPuD,KAAM,QACN8qE,+BAAgC,WAChCh4C,uBAAwB,sBACxBi4C,yBAA0B,iCAKlCzb,QAAAr1D,KAAKqB,EAAAA,SAILi1B,GANgCo6C,IbN5BlvC,GAAkB,gBAIlB,QAAJ0lC,GAAuB9yD,EAAyB4H,OAAhD,KAAAA,IAAgDA,GAAhD,GAAuBziB,KAAvB6a,OAAuBA,EAAyB7a,KAAhDyiB,YAAgDA,EAChD,MAAAkrD,MAeahxC,GACT,GAAIxtB,GAAAA,eAAwC,8BAKhD0tB,GAAA,WAkFI,QAAJA,GACyBp6B,EACA+e,EACgD2mB,EAC5CzL,GAHJ18B,KAAzByC,QAAyBA,EACAzC,KAAzBwhB,kBAAyBA,EACgDxhB,KAAzEmoC,OAAyEA,EAC5CnoC,KAA7B08B,MAA6BA,EA5DN18B,KAAvBy4B,kBAA2C,GAAIjf,GAAAA,aAGlCxZ,KAAb8iB,aAA4B,GAAIpV,GAAAA,QAoBpB1N,KAAZorB,IAAkB,aAAa6c,KAMnBjoC,KAAZ2gC,WAAwB,EAWZ3gC,KAAZoU,WAAwB,EAYZpU,KAAZooC,SAAsB,EAEVpoC,KAAZw3E,oBAAkC,GAwHlC,MArKIl2E,QAAJ2I,eAAQ4yB,EAAR57B,UAAA,iBAAI,WAEI,OAAQjB,KAAK4oC,iBAAiB3H,aAAe,IAAIzN,wCAIrDlyB,OAAJ2I,eAAQ4yB,EAAR57B,UAAA,gBAAI,WACI,MAAOjB,MAAKmoC,QAAUnoC,KAAKmoC,OAAOzpB,0CAGtCpd,OAAJ2I,eAAQ4yB,EAAR57B,UAAA,UAAI,WACI,MAAOjB,MAAKorB,qCAKhB9pB,OAAJ2I,eAAQ4yB,EAAR57B,UAAA,gBAAI,WACI,MAAOjB,MAAK2gC,2CAKhBr/B,OAAJ2I,eACQ4yB,EADR57B,UAAA,gBAAI,WAEI,MAAQjB,MAAK08B,OAAS18B,KAAK08B,MAAMh4B,UAAa1E,KAAKoU,eAGvD,SAAapR,GACThD,KAAKoU,UAAYM,EAAAA,sBAAsB1R,oCAW3C1B,OAAJ2I,eAAQ4yB,EAAR57B,UAAA,cAAI,WACI,MAAOjB,MAAKooC,yCAchBvL,EAAJ57B,UAAA08D,mBAAI,WAMI,GAAI39D,KAAK2gC,UAAW,CAC5B,GAAkBzG,GAAYl6B,KAAKk6B,SAEnBA,KAAcl6B,KAAKw3E,sBACnBx3E,KAAKw3E,oBAAsBt9C,EAC3Bl6B,KAAK8iB,aAAahf,UAK9B+4B,EAAJ57B,UAAAmC,YAAI,WACIpD,KAAK8iB,aAAa/e,YAGtB84B,EAAJ57B,UAAAkf,OAAI,WACSngB,KAAK2gC,YACN3gC,KAAK2gC,WAAY,EAEjB3gC,KAAKwhB,kBAAkBtf,eACvBlC,KAAK6oC,6BAIbhM,EAAJ57B,UAAAmf,SAAI,WACQpgB,KAAK2gC,YACL3gC,KAAK2gC,WAAY,EAEjB3gC,KAAKwhB,kBAAkBtf,eACvBlC,KAAK6oC,6BAIbhM,EAAJ57B,UAAA2Y,MAAI,WACJ,GAAcnX,GAAUzC,KAAK4oC,gBAEQ,mBAAlBnmC,GAAQmX,OACfnX,EAAQmX,SAShBijB,EAAJ57B,UAAAsnC,gBAAI,WACSvoC,KAAKooC,UACNpoC,KAAKooC,SAAU,EACfpoC,KAAKwhB,kBAAkBtf,iBAS/B26B,EAAJ57B,UAAAunC,kBAAI,WACQxoC,KAAKooC,UACLpoC,KAAKooC,SAAU,EACfpoC,KAAKwhB,kBAAkBtf,iBAK/B26B,EAAJ57B,UAAA6tD,SAAI,WACI,MAAO9uD,MAAKk6B,WAIhB2C,EAAJ57B,UAAA+C,cAAI,SAAcP,GAENA,EAAMU,UAAYqa,EAAAA,OAAS/a,EAAMU,UAAYsa,EAAAA,QAC7Cze,KAAKwgB,uBAGL/c,EAAMob,mBAQdge,EAAJ57B,UAAAuf,qBAAI,WACSxgB,KAAK0E,WACN1E,KAAK2gC,WAAY3gC,KAAK0e,WAAY1e,KAAK2gC,UAEvC3gC,KAAKwhB,kBAAkBtf,eACvBlC,KAAK6oC,0BAAyB,KAItChM,EAAJ57B,UAAA8nC,YAAI,WACI,MAAO/oC,MAAK0E,SAAW,KAAO,KAGlCm4B,EAAJ57B,UAAA2nC,eAAI,WACI,MAAO5oC,MAAKyC,QAAQC,eAIhBm6B,EAAZ57B,UAAA4nC,yBAAI,SAAiCpmB,OAArC,KAAAA,IAAqCA,GAArC,GACQziB,KAAKy4B,kBAAkBpzB,KAAK,GAAIsoE,IAAwB3tE,KAAMyiB,oBAtMtEhc,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,YACVC,SAAU,WACVC,MACI8D,kBAAmB,gBACnB3B,MAAO,YACP+/B,sBAAuB,WACvByuC,6BAA8B,WAC9Bj4C,oBAAqB,SACrBpkB,sBAAuB,WACvBD,OAAQ,KAER3H,UAAW,yBACXzM,YAAa,yBAEjB0D,QAAS,ujBACTrB,SAAJ,6NACIe,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,+CAlE7C/D,KAAIS,EAAAA,aAFJT,KAAI+E,EAAAA,oBAuIJ/E,SAAAa,GAAAC,aAAAd,KAASkB,EAAAA,WAATlB,KAAqBe,EAAAA,OAArBb,MAA4Bg2B,QAtH5Bl2B,KAASs2B,GAATx1B,aAAAd,KAuHSkB,EAAAA,gCAhET3E,QAAAyD,KAAKqB,EAAAA,QAIL2wB,oBAAAhyB,KAAKmB,EAAAA,SA+BLlD,WAAA+B,KAAKqB,EAAAA,SA+IL+0B,KcpPAI,GAAA,WAAA,QAAAA,MAK6B,sBAL7Bx2B,KAAC8B,EAAAA,SAAD5B,OACI+B,SAAUC,EAAAA,aAAc+gB,IACxBjhB,SAAUo0B,GAAUE,IACpBv0B,cAAeq0B,GAAUE,QAE7BE,KCVay6C,GACT,GAAIvoE,GAAAA,eAA6B,2BCKxBgO,GAA2CvT,EAAAA,QAAQ,iBAC5D8N,EAAAA,MAAM,OAAQ9U,EAAAA,OAAQ8sD,QAAS,KAC/Bh4C,EAAAA,MAAM,OAAQ9U,EAAAA,OAAQ8sD,QAAS,KAC/Bh4C,EAAAA,MAAM,QAAS9U,EAAAA,OAAQ8sD,QAAS,KAChCn0C,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,yCAChCD,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,6CCdhCm8D,cAAgB,8BAChB1hD,kBAAoB,8BACpBD,kBAAoB,4BACpB4hD,WAAa,+BhBDJr7D,IACT1Z,KACIjB,QAAU,SACVC,QAAU,MACVC,SAAU,SACVC,SAAU,UAEd81E,WACIj2E,QAAU,SACVC,QAAU,MACVC,SAAU,SACVC,SAAU,SACV+jB,YAAUxe,GACV6d,YAAU7d,IAEdwwE,SACIl2E,QAAU,QACVC,QAAU,MACVC,SAAU,QACVC,SAAU,SACV+jB,YAAUxe,GACV6d,YAAU7d,IAEdywE,UACIn2E,QAAU,MACVC,QAAU,MACVC,SAAU,MACVC,SAAU,SACV+jB,YAAUxe,GACV6d,YAAU7d,IAEd2e,OACIrkB,QAAU,MACVC,QAAU,SACVC,SAAU,QACVC,SAAU,UAEdi2E,UACIp2E,QAAU,MACVC,QAAU,MACVC,SAAU,QACVC,SAAU,MACV+jB,YAAUxe,GACV6d,YAAU7d,IAEd2wE,aACIr2E,QAAU,MACVC,QAAU,SACVC,SAAU,QACVC,SAAU,SACV+jB,YAAUxe,GACV6d,YAAU7d,IAEdkf,QACI5kB,QAAU,SACVC,QAAU,SACVC,SAAU,SACVC,SAAU,OAEdm2E,cACIt2E,QAAU,SACVC,QAAU,SACVC,SAAU,SACVC,SAAU,OAEdo2E,YACIv2E,QAAU,QACVC,QAAU,SACVC,SAAU,QACVC,SAAU,OAEdq2E,aACIx2E,QAAU,MACVC,QAAU,SACVC,SAAU,MACVC,SAAU,OAEduZ,MACI1Z,QAAU,QACVC,QAAU,SACVC,SAAU,MACVC,SAAU,UAEds2E,SACIz2E,QAAU,QACVC,QAAU,MACVC,SAAU,MACVC,SAAU,OAEdu2E,YACI12E,QAAU,QACVC,QAAU,SACVC,SAAU,MACVC,SAAU,WAILga,GAoBb,SAA0By3D,GACtB,MAAiB,OAAVA,KAAsBD,EAAWC,EAAQlyE,OAAOC,KAAKiyE,MApB5Dj3D,GAAa1Z,IAAK0Z,GAAa0J,MAAO1J,GAAaiK,OAAQjK,GAAajB,OrH/E/D8M,GACT,GAAIjZ,GAAAA,eAAsC,6BASjCwa,IACT7O,QAASsN,GACT/K,MAAOpW,EAAAA,SACPqW,WAAYo2D,GsIjBHjsD,IAaTC,eAAgB9d,EAAAA,QAAQ,kBACpB8N,EAAAA,MAAM,OAAQ9U,EAAAA,OACV+yB,UAAW,YACX4iD,SAAU,OACV7oB,QAAS,KAEbn0C,EAAAA,WAAW,YAAamhB,EAAAA,OACpBizB,EAAAA,MAAM,iBAAkB6oB,EAAAA,gBACxBh9D,EAAAA,QAAQ,6CAEZD,EAAAA,WAAW,aACPC,EAAAA,QAAQ,qBAAsB5Y,EAAAA,OAAQ8sD,QAAS,SASvD/nC,cAAe/d,EAAAA,QAAQ,iBACnB8N,EAAAA,MAAM,UAAW9U,EAAAA,OAAQ8sD,QAAS,KAClCn0C,EAAAA,WAAW,mBACP3Y,EAAAA,OAAQ8sD,QAAS,IACjBl0C,EAAAA,QAAQ,qDC3CpBi9D,GAAA,WAAA,QAAAA,MAI8B,sBAJ9BhyE,KAACC,EAAAA,UAADC,OACIC,SAAU,YACVE,MAAQmC,MAAO,kBAEnBwvE,KAGAC,GAAA,WACI,QAAJA,GAAuBpvE,GAAAtJ,KAAvBsJ,YAAuBA,EACvB,MAAAovE,MAEaC,GAAqDhgE,EAAW+/D,GAAY9/D,GAAak9D,OAGtGjzC,GAAA,SAAAn5B,GASI,QAAJm5B,GAAgBn/B,EAA8Ck1E,GAA1D,GAAJt5E,GACQoK,EADRG,KAAA7J,KACc0D,IADd1D,WAGQ0D,GAAWhB,cAAcg0B,UAAUC,IAAIiiD,KAM/C,MAV4B5uE,GAA5B64B,EAAAn5B,GAOIm5B,EAAJ5hC,UAAAuiD,gBAAI,WACI,MAAOxjD,MAAKsJ,YAAY5G,8BAhBhC+D,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,YACVwC,SAAU,4BACVqB,QAAS,wPACTH,gBAAiBC,EAAAA,wBAAwBC,OACzCL,cAAeC,EAAAA,kBAAkBC,KACjCK,QAAS,iDA3BbjE,KAAIS,EAAAA,aA8BJT,KAAAgV,OAAAlU,aAAAd,KAAyCiV,EAAAA,UAAzC/U,MAAmD,gBASnDk8B,GAV4B81C,ICtB5B9sE,GAAA,WAAA,QAAAA,MAe2B,sBAf3BpF,KAAC8B,EAAAA,SAAD5B,OACI+B,SACIC,EAAAA,aACAgD,EAAAA,WACAC,EAAAA,gBAEJnD,SACIo6B,GACA41C,IAEJjwE,cACIq6B,GACA41C,QAGR5sE,KCxBAgtE,GAAA,WAAA,QAAAA,MAIwB,sBAJxBpyE,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,aACVwC,SAAU,2EAEdyvE,mBCFA,QAAAjxD,MA2CA,MAAAA,oBC5CA,QAAAi/C,MAuBA,MAAAA,MCxBItuD,GAAe,EAEnBugE,GAAA,WAAA,QAAAA,KAQa94E,KAAb4N,GAA0B,WAAW2K,KACrC,sBATA9R,KAACC,EAAAA,UAADC,OACIC,SAAU,UACVE,MACImC,MAAO,UACPyD,YAAa,4BAIrBkB,KAAAnH,KAAKqB,EAAAA,SACLgxE,KCXAC,GAAA,WAAA,QAAAA,MAIA,sBAJAtyE,KAACC,EAAAA,UAADC,OACIC,SAAU,iBAGdmyE,KCJAC,GAAA,WAAA,QAAAA,KAaah5E,KAAb4jE,OAA0C,GAAIpqD,GAAAA,aAEjCxZ,KAAb+jE,SAA4C,GAAIvqD,GAAAA,aAWhD,MATIw/D,GAAJ/3E,UAAAg4E,SAAI,SAAS93E,GACLnB,KAAK4jE,OAAOv+D,OACZlE,EAAO0d,kBAGXm6D,EAAJ/3E,UAAAi4E,WAAI,SAAW/3E,GACPnB,KAAK+jE,SAAS1+D,OACdlE,EAAO0d,iCAxBfpY,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,aACVwC,SAAU,iVAUdw6D,SAAAn9D,KAAKmB,EAAAA,SAELm8D,WAAAt9D,KAAKmB,EAAAA,UAYLoxE,KC1BAG,GAAA,WAAA,QAAAA,MAIA,sBAJA1yE,KAACC,EAAAA,UAADC,OACIC,SAAU,iBAGduyE,KCuBI5gE,GAAe,EAEnB6gE,GAAA,WACI,QAAJA,GAAuB9vE,GAAAtJ,KAAvBsJ,YAAuBA,EACvB,MAAA8vE,MAEaC,GAA+D1gE,EAAWygE,IAEvFlxD,GAAA,SAAAxe,GAwDI,QAAJwe,GAAuB5e,EAAiC2P,GAApD,GAAJ3Z,GACQoK,EADRG,KAAA7J,KACcsJ,IADdtJ,WAAuBV,GAAvBgK,YAAuBA,EAAiChK,EAAxD2Z,mBAAwDA,EAJpD3Z,EAAJg6E,SAAe,uBAAuB/gE,KAElCjZ,EAAJi6E,SAAuB,IARvB,MATiCvvE,GAAjCke,EAAAxe,GAuBIwe,EAAJjnB,UAAAu4B,mBAAI,WAAA,GAAJl6B,GAAAU,IACQA,MAAKw5E,wBAEDx5E,KAAKgvE,SAASzkD,cACdvqB,KAAKsJ,YAAY5G,cAAcg0B,UAC1BC,IAAI,sBAAsB32B,KAAKgvE,SAASzkD,aAEzCvqB,KAAKy5E,gBAAkBz5E,KAAK05E,aAC5B15E,KAAK25E,SAAS/V,OAAO9iE,UAAUd,KAAKi5E,SAAS9tD,KAAKnrB,OAClDA,KAAK25E,SAAS5V,SAASjjE,UAAUd,KAAKk5E,WAAW/tD,KAAKnrB,SAK9DA,KAAKgvE,SAASlsD,aAAaniB,KAAKi5B,EAAAA,aAC3B94B,UAAU,WACPxB,EAAK2Z,mBAAmB/W,iBAG5BlC,KAAKy5E,gBACLz5E,KAAKy5E,eAAe32D,aAAaniB,KAAKi5B,EAAAA,aACjC94B,UAAU,WACPxB,EAAK2Z,mBAAmB/W,gBAK5C,IAAc03E,GAAe55E,KAAKgvE,SAASluD,WAAa9gB,KAAKgvE,SAASluD,UAAU84D,cAAgBrqC,EAAAA,KAExF/gC,GAAAA,MAAMorE,GACD94E,UAAU,WAAM,MAAAxB,GAAK2Z,mBAAmB/W,kBAGjDgmB,EAAJjnB,UAAA4wC,sBAAI,WACI7xC,KAAKw5E,yBAGTtxD,EAAJjnB,UAAA44B,gBAAI,WAEI75B,KAAKiZ,mBAAmBsd,iBAG5BrO,EAAJjnB,UAAA44E,WAAI,SAAW14E,GACPA,EAAO+Y,kBAEHla,KAAKgvE,UAAYhvE,KAAKgvE,SAASluD,WAC/B9gB,KAAKgvE,SAASluD,UAAUirB,SAIhC7jB,EAAJjnB,UAAAkrB,iBAAI,SAAiBhrB,GACTnB,KAAKgvE,SAAS7iD,kBACdnsB,KAAKgvE,SAAS7iD,iBAAiBhrB,IAIvC+mB,EAAJjnB,UAAA8gB,UAAI,SAAUte,GAEFA,EAAMU,UAAYC,EAAAA,QAAUpE,KAAKgvE,SAAS1kD,SAAWtqB,KAAK85E,aACtD95E,KAAKgvE,UAAYhvE,KAAKgvE,SAASluD,WAC/B9gB,KAAKgvE,SAASluD,UAAUirB,QAG5BtoC,EAAMob,mBAIdqJ,EAAJjnB,UAAA84E,eAAI,SAAeC,GACPA,IAAch6E,KAAKu5E,UACnBv5E,KAAKu5E,QAAWS,EAChBh6E,KAAKiZ,mBAAmB/W,iBAIhCgmB,EAAJjnB,UAAAg4E,SAAI,WACQj5E,KAAKy5E,gBACLz5E,KAAKy5E,eAAe7V,OAAO5jE,KAAKy5E,eAAe5V,OAIvD37C,EAAJjnB,UAAAi4E,WAAI,WACQl5E,KAAKy5E,gBACLz5E,KAAKy5E,eAAe1V,SAAS/jE,KAAKy5E,eAAe5V,OAQzD37C,EAAJjnB,UAAA0uE,0BAAI,WACI,MAAO3vE,MAAKi6E,wBAA0Bj6E,KAAKsJ,aAI/C4e,EAAJjnB,UAAAi5E,eAAI,SAAelyB,GACnB,GAAclnC,GAAY9gB,KAAKgvE,SAAWhvE,KAAKgvE,SAASluD,UAAY,IAE5D,OAAOA,IAAaA,EAAUknC,IAIxB9/B,EAAdjnB,UAAAu4E,sBAAI,WACI,IAAKx5E,KAAKgvE,SACN,KAAM4E,MAIdtyE,OAAJ2I,eAAQie,EAARjnB,UAAA,eAAI,WACI,MAAOjB,MAAKm6E,OAASn6E,KAAKm6E,MAAM/oE,OAAS,mCAG7C9P,OAAJ2I,eAAQie,EAARjnB,UAAA,iBAAI,WACI,MAAOjB,MAAKo6E,SAAWp6E,KAAKo6E,QAAQhpE,OAAS,mCAGjD9P,OAAJ2I,eAAQie,EAARjnB,UAAA,iBAAI,WACI,MAAOjB,MAAKq6E,SAAWr6E,KAAKq6E,QAAQjpE,OAAS,mCAGjD9P,OAAJ2I,eAAQie,EAARjnB,UAAA,kBAAI,WACI,MAAOjB,MAAKs6E,UAAYt6E,KAAKs6E,SAASlpE,OAAS,mCAGnD9P,OAAJ2I,eAAQie,EAARjnB,UAAA,kBAAI,WACI,QAASjB,KAAK25E,0CAGlBr4E,OAAJ2I,eAAQie,EAARjnB,UAAA,sBAAI,WACI,SAAOjB,KAAK85E,YACR95E,KAAKgvE,UACLhvE,KAAKgvE,SAASluD,aACR9gB,KAAKgvE,SAASluD,UAAU9d,QAAUhD,KAAKgvE,SAAStqE,2CAK9DpD,OAAJ2I,eAAQie,EAARjnB,UAAA,gBAAI,WACI,MAAOjB,MAAKgvE,UAAYhvE,KAAKgvE,SAAStqE,0CAG1CpD,OAAJ2I,eAAQie,EAARjnB,UAAA,sBAAI,WACI,MAAOjB,MAAKy5E,iBACPz5E,KAAK0E,WAEF1E,KAAKy5E,eAAenvD,SACpBtqB,KAAKu5E,yDA9MrB9yE,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,gBACVC,SAAU,cACVuC,SAAJ,iqBAIIqB,QAAS,+rEACb3D,MACQmC,MAAR,gBACQsxE,gCAAR,sBACAn/D,sBAAA,oBACQo/D,mCAAR,YACQC,mCAAR,YACQC,oCAAR,iBACQC,oCAAR,iBACQnjB,qBAAR,mBACQojB,uBAAR,8BACQC,qBAAR,4BACQC,sBAAR,6BACQC,mBAAoB,0BACpBC,mBAAR,0BACQC,qBAAsB,4BACtBC,qBAAR,4BACQn0E,YAAR,oBACQwoD,eAAR,uBACQ4rB,eAAR,yBAEAzwE,QAAA,SACAP,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,WAIA0d,EAAAkmB,eAAA,WAAA,QACA3nC,KAAAS,EAAAA,2DAhEA8nE,WAAAvoE,KAAAiiB,EAAAA,aAAA/hB,MAAAihB,MAJA6xD,iBAAAhzE,KAAqBiiB,EAAAA,aAArB/hB,MAAAkgE,4FAyEAuT,UAAA3zE,KAAAm2B,EAAAA,gBAAAj2B,MAAAwyE,MACAkB,UAAA5zE,KAAAm2B,EAAAA,gBAAAj2B,MAAAoyE,MACAuB,WAAA7zE,KAAKm2B,EAAAA,gBAALj2B,MAAAkyE,MAEAoB,yBAAAxzE,KAAAyG,EAAAA,UAAAvG,MAAA,0BAEAuhB,GACAmxD,IAEA+B,GAAA,yBAoKA,sBAFA30E,KAAAC,EAAAA,UAAAC,OAAAC,SAAA,2CAKAC,SAAA,6EAHAu0E,KC9OAl+C,GAAA,WAAA,QAAAA,MAsBA,sBAtBAz2B,KAAC8B,EAAAA,SAAD5B,OACI6B,cACI0f,GACAkzD,GACAtC,GACAC,GACAI,GACAN,GACAG,IAEJtwE,SAAUC,EAAAA,aAAckD,IACxBpD,SACIyf,GACAkzD,GACAtC,GACAC,GACAI,GACAN,GACAG,QAIR97C,K3CTIm+C,GAA8B,EAElCvP,GAAA,WACI,QAAJA,GAAuBjxD,EAA+BoF,GAA/BjgB,KAAvB6a,OAAuBA,EAA+B7a,KAAtDigB,OAAsDA,EACtD,MAAA6rD,MAUaE,GACT,GAAI78D,GAAAA,eAA6C,mCAC7C2gD,WAAY,OACZlH,QAASirB,IAQjBpI,GAAA,WA8FI,QAAJA,GACgBjqD,EACA9d,EACiC43E,GAFjCt7E,KAAhBwhB,kBAAgBA,EACAxhB,KAAhB0D,WAAgBA,EAlFZ1D,KAAJ4N,GAAiB,mBAAmBytE,KAMhCr7E,KAAJ4rE,WAAyB,EAWZ5rE,KAAbisE,YAA4D,KASrCjsE,KAAvB+rE,eACQ,GAAIvyD,GAAAA,aAGWxZ,KAAvBo0D,OAAoD,GAAI56C,GAAAA,aAGjCxZ,KAAvB4O,OAAoD,GAAI4K,GAAAA,aAoB5CxZ,KAAZkwD,cAyBYlwD,KAAZu7E,SAA+B,EAOvBv7E,KAAKw7E,yBAA2BF,EAASnP,sBAmCjD,MAjFI7qE,QAAJ2I,eAAQwhE,EAARxqE,UAAA,iBAAI,WACI,MAAOjB,MAAKkwD,gBAGhB,SACcltD,GADd,GAAJ1D,GAAAU,IAEYgD,IAASA,EAAMoO,SACfpO,EAAMD,MAAM,KACPQ,QAAQ,SAACguD,GAAc,MAAAjyD,GAAK4wD,WAAWqB,EAAU/9B,SAAU,IAEhExzB,KAAK0D,WAAWhB,cAAc6uD,UAAY,qCAUlDjwD,OAAJ2I,eACQwhE,EADRxqE,UAAA,6BAAI,WAEI,MAAOjB,MAAKw7E,4BAGhB,SAA0Bx4E,GACtBhD,KAAKw7E,uBAAyB9mE,EAAAA,sBAAsB1R,oCAKxD1B,OAAJ2I,eAAQwhE,EAARxqE,UAAA,cAAI,WACI,MAAOjB,MAAKu7E,SAAWv7E,KAAK4rE,eAGhC,SAAW5oE,GACPhD,KAAKu7E,QAAUv4E,mCAanByoE,EAAJxqE,UAAAu4B,mBAAI,WACIx5B,KAAK+e,WAAa,GAAIod,GAAAA,2BAAqCn8B,KAAKggB,SAChEhgB,KAAK2rE,iBAGTF,EAAJxqE,UAAAqtE,aAAI,SAAarqD;qCACLjkB,KAAKmiB,QACLniB,KAAKmiB,MAAMzf,cAAcuhB,UAAYA,IAI7CwnD,EAAJxqE,UAAAyqE,aAAI,WACI,MAAO1rE,MAAKmiB,MAAQniB,KAAKmiB,MAAMzf,cAAcuhB,UAAY,GAG7DwnD,EAAJxqE,UAAA0qE,cAAI,WACI3rE,KAAK4rE,YAAc5rE,KAAKggB,QAAQ5O,OAChCpR,KAAKkwD,WAAW,2BAA6BlwD,KAAK4rE,UAClD5rE,KAAKkwD,WAAW,2BAA6BlwD,KAAK4rE,UAElD5rE,KAAKwhB,kBAAkBtf,gBAG3BupE,EAAJxqE,UAAA4qE,gBAAI,SAAgB5rD,GACpB,GAAcxc,GAAQ,GAAIqoE,IAA4B9rE,KAAMigB,EAEpDjgB,MAAK+rE,eAAe1mE,KAAK5B,IAG7BgoE,EAAJxqE,UAAA+d,UAAI,SAAUvb,GACNzD,KAAK+e,WAAWC,UAAUvb,mBApIlCgD,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,kBACVC,SAAU,iBACVuC,SAAJ,sJACIqB,QAAS,yuBACTN,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,OACzC1D,MAAQmC,MAAO,mBACfJ,YACMiS,QAAS6hB,GAA4B3hB,YAAaywD,4CAzD5DhlE,KAAI+E,EAAAA,oBAGJ/E,KAAIS,EAAAA,aA8IJT,SAAAa,GAAAC,aAAAd,KAASe,EAAAA,OAATb,MAAgBqlE,2BA3EhB5iE,WAAA3C,KAAKyG,EAAAA,UAALvG,MAAeuJ,EAAAA,eAEfiS,QAAA1b,KAAKyG,EAAAA,UAALvG,MAAe,WAEfqZ,UAAAvZ,KAAKm2B,EAAAA,gBAALj2B,MAAqBk2B,IAAYC,aAAa,MAE9CN,eAAA/1B,KAAKm2B,EAAAA,gBAALj2B,MAAqBo2B,MAGrBkvC,cAAAxlE,KAAKqB,EAAAA,QAMLokE,aAAAzlE,KAAKqB,EAAAA,QAGLikE,iBAAAtlE,KAAKmB,EAAAA,SAILwsD,SAAA3tD,KAAKmB,EAAAA,SAGLgH,SAAAnI,KAAKmB,EAAAA,SAUL8uB,YAAAjwB,KAAKqB,EAAAA,MAALnB,MAAW,WAgBXwlE,wBAAA1lE,KAAKqB,EAAAA,SA6DL2jE,KClLAW,GAAA,WAKI,QAAJA,GAAuB1oE,GAAA1D,KAAvB0D,WAAuBA,EACvB,sBANA+C,KAACC,EAAAA,UAADC,OACIC,SAAU,yBACVC,SAAU,+DATdJ,KAAoBS,EAAAA,cAapBklE,KtG6CaC,GACT,GAAIl9D,GAAAA,eAAsC,mCAOjCm9D,IACTxxD,QAASuxD,GACThvD,MAAOpW,EAAAA,SACPqW,WAAYivD,GAOHC,IACT1xD,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAW,WAAM,MAAAwxD,MAC9BvxD,OAAO,GAcXuxD,GAAA,WAyGI,QAAJA,GACgB/oE,EACA6qC,EACA/sB,EACAthB,EACAwsE,EACiClsE,EACrB48B,EACQosB,EACU3E,EAE9Bl/B,GAXZ,GAAJrmB,GAAAU,IACgBA,MAAhB0D,WAAgBA,EACA1D,KAAhBuuC,iBAAgBA,EACAvuC,KAAhBwhB,kBAAgBA,EACAxhB,KAAhBE,QAAgBA,EACAF,KAAhB0sE,KAAgBA,EAEY1sE,KAA5Bo9B,IAA4BA,EACQp9B,KAApCwpD,UAAoCA,EACUxpD,KAA9C6kD,SAA8CA,EAE9B7kD,KAAhB2lB,cAAgBA,EAlGH3lB,KAAb2sE,iBAAqEp0C,EAAAA,MAAM,WACnE,MAAIj5B,GAAKstE,cAAgBttE,EAAKstE,aAAa5sD,QAChCxR,EAAAA,MAAnBgqB,UAAA,GAA4Bl5B,EAAKstE,aAAa5sD,QAAQuD,IAAI,SAACtD,GAAW,MAAAA,GAAOwY,qBAK9Dn5B,EAAKotE,KAAKh0C,SACZ1pB,eACArO,KAAKwN,EAAAA,KAAK,GAAIwqB,EAAAA,UAAU,WAAM,MAAAr5B,GAAKqtE,sBA6BrB3sE,KAA3B6sE,sBAA2D,MAe/C7sE,KAAZ8sE,uBAAoC,EAExB9sE,KAAZ+sE,iBAAuC,EAM3B/sE,KAAZgtE,oBAAiC,EAcrBhtE,KAAZitE,qBAAmC39B,EAAAA,aAAaC,MAOpCvvC,KAAZktE,oBAAiC,EAGZltE,KAArBmtE,oBAA2C,GAAIz/D,GAAAA,QAuC3C1N,KAAJyjB,SAAqC,aAIjCzjB,KAAJ4vB,UAA4B,aA8KhB5vB,KAAZotE,kBAAgC,WAIxB9tE,EAAK4tE,mBAAqB5tE,EAAKulD,SAASkb,gBAAkBzgE,EAAKoE,WAAWhB,eAAiBpD,EAAKi6B,WA7M1E,mBAAX3N,SACP8gD,EAAKz2D,kBAAkB,WACnB2V,OAAOnnB,iBAAiB,OAAQnF,EAAK8tE,qBAI7CptE,KAAKQ,eAAiBA,EAwb9B,MAthBIc,QAAJ2I,eAAQwiE,EAARxrE,UAAA,oBAAI,WACI,MAAIjB,MAAK4sE,cAAgB5sE,KAAK4sE,aAAa7tD,WAChC/e,KAAK4sE,aAAa7tD,WAAWa,WAGjC,sCAGXte,OAAJ2I,eAAQwiE,EAARxrE,UAAA,iBAAI,WACI,MAAOjB,MAAK+sE,iBAAmB/sE,KAAK4sE,aAAahB,2CAsBrDtqE,OAAJ2I,eACQwiE,EADRxrE,UAAA,4BAAI,WAEI,MAAOjB,MAAK8sE,2BAGhB,SAAyB9pE,GACrBhD,KAAK8sE,sBAAwBp4D,EAAAA,sBAAsB1R,oCA4DvDypE,EAAJxrE,UAAAmC,YAAI,WAE0B,mBAAXwoB,SACPA,OAAOjoB,oBAAoB,OAAQ3D,KAAKotE,mBAG5CptE,KAAKitE,qBAAqBl2D,cAC1B/W,KAAKgtE,oBAAqB,EAC1BhtE,KAAKqtE,eACLrtE,KAAKmtE,oBAAoBppE,YAY7B0oE,EAAJxrE,UAAAqsE,UAAI,WACIttE,KAAKutE,iBAGTd,EAAJxrE,UAAAusE,WAAI,WACSxtE,KAAK+sE,kBAEN/sE,KAAKu5B,WACLv5B,KAAK4sE,aAAah+D,OAAOvJ,OAG7BrF,KAAK4sE,aAAazkE,OAASnI,KAAK+sE,iBAAkB,EAE9C/sE,KAAKC,YAAcD,KAAKC,WAAWiB,gBACnClB,KAAKC,WAAWc,SAChBf,KAAKytE,2BAA2B12D,eAK/B/W,KAAKgtE,oBAKNhtE,KAAKwhB,kBAAkB+U,kBAQ/Bk2C,EAAJxrE,UAAAR,eAAI,WACQT,KAAK+sE,iBACL/sE,KAAe,WAAES,kBAQzBa,OAAJ2I,eAAQwiE,EAARxrE,UAAA,2BAAI,WAAA,GAAJ3B,GAAAU,IACQ,OAAOwO,GAAAA,MACHxO,KAAK2sE,iBACL3sE,KAAK4sE,aAAa7tD,WAAWiD,OAAOrhB,KAAKmN,EAAAA,OAAO,WAAM,MAAAxO,GAAKytE,mBAC3D/sE,KAAKmtE,oBACLntE,KAAK0tE,wBACL1tE,KAAKC,WACDD,KAAKC,WAAWS,cAAcC,KAAKmN,EAAAA,OAAO,WAAM,MAAAxO,GAAKytE,mBACrD36B,EAAAA,MACNzxC,KAEE4iB,EAAAA,IAAI,SAAC9f,GAAU,MAAAA,aAAiBkqE,IAA0BlqE,EAAQ,yCAK1EgpE,EAAJxrE,UAAAsZ,WAAI,SAAWvX,GAAX,GAAJ1D,GAAAU,IACQ0gB,SAAQC,QAAQ,MAAMC,KAAK,WAAM,MAAAthB,GAAKsuE,gBAAgB5qE,MAI1DypE,EAAJxrE,UAAAuZ,iBAAI,SAAiBC,GACbza,KAAKyjB,SAAWhJ,GAIpBgyD,EAAJxrE,UAAAyZ,kBAAI,SAAkBD,GACdza,KAAK4vB,UAAYnV,GAIrBgyD,EAAJxrE,UAAA0Z,iBAAI,SAAiBC,GACb5a,KAAK0D,WAAWhB,cAAcgC,SAAWkW,GAG7C6xD,EAAJxrE,UAAA+C,cAAI,SAAcP,GAElB,GAAcU,GAAUV,EAAMU,OAUtB,IAJIA,IAAYC,EAAAA,QACZX,EAAMob,iBAGN7e,KAAK6tE,cAAgB1pE,IAAYqa,EAAAA,OAASxe,KAAKu5B,UAC/Cv5B,KAAK6tE,aAAartD,uBAClBxgB,KAAK4xD,kBACLnuD,EAAMob,qBACH,IAAI7e,KAAK4sE,aAAc,CACtC,GAAkBkB,GAAiB9tE,KAAK4sE,aAAa7tD,WAAWa,UAEhD5f,MAAKu5B,WAAap1B,IAAYihE,EAAAA,IAC9BplE,KAAK4sE,aAAa5tD,UAAUvb,GACrBU,IAAYgb,EAAAA,YAAcnf,KAAK+tE,WACtC/tE,KAAKstE,WAGrB,IAAkB1uD,GAAaza,IAAYib,EAAAA,UAAYjb,IAAYgb,EAAAA,YAEnDP,GAAc5e,KAAK4sE,aAAa7tD,WAAWa,aAAekuD,IAC1D9tE,KAAKguE,mBAKjBvB,EAAJxrE,UAAAgtE,YAAI,SAAYxqE,GAChB,GAAc8gC,GAAS9gC,EAAY,OACvBT,EAAgCuhC,EAAOvhC,KAGvB,YAAhBuhC,EAAO99B,OACPzD,EAAkB,KAAVA,EAAe,KAAOoV,WAAWpV,IAQzChD,KAAKkuE,gBAAkBlrE,IACvBhD,KAAKkuE,cAAgBlrE,EACrBhD,KAAKyjB,SAASzgB,GAEVhD,KAAK+tE,WAAa/tE,KAAK6kD,SAASkb,gBAAkBt8D,EAAM8gC,QACxDvkC,KAAKstE,cAKjBb,EAAJxrE,UAAAktE,YAAI,WACSnuE,KAAKktE,mBAECltE,KAAK+tE,YACZ/tE,KAAKkuE,cAAgBluE,KAAK0D,WAAWhB,cAAcM,MACnDhD,KAAKutE,iBAHLvtE,KAAKktE,oBAAqB,GAOlCT,EAAJxrE,UAAAmhC,YAAI,SAAYjhC,GACJnB,KAAK+tE,WAAa/tE,KAAK6kD,SAASkb,gBAAkB5+D,EAAOojC,QACzDvkC,KAAKstE,aAKLb,EAAZxrE,UAAAysE,sBAAI,WAAA,GAAJpuE,GAAAU,IACQ,OAAKA,MAAK6kD,SAEH75B,EAAAA,UAAsBhrB,KAAK6kD,SAAU,SACvClkD,KAAKmN,EAAAA,OAAO,SAACrK,GAC1B,GAAsB2qE,GAAc3qE,EAAY,OAC1B+lD,EAAYlqD,EAAKkqD,UACnBlqD,EAAKkqD,UAAUlgD,YAAY5G,cAAgB,IAE/C,OAAOpD,GAAKytE,iBACRqB,IAAgB9uE,EAAKoE,WAAWhB,iBAC9B8mD,IAAcA,EAAU/kB,SAAS2pC,OAChC9uE,EAAKW,aAAeX,EAAKW,WAAWqC,eAAemiC,SAAS2pC,MAX9Ch8B,EAAAA,GAAa,OAmCtCq6B,EAAZxrE,UAAA+sE,eAAI,WACJ,GAAcx7D,GAAQxS,KAAK4sE,aAAa7tD,WAAWuB,iBAAmB,EACxDgc,EAAaC,EAA6B/pB,EAC5CxS,KAAK4sE,aAAa5sD,QAAShgB,KAAK4sE,aAAapwC,cAE3C6xC,EAAoBnqD,EACtB1R,EAAQ8pB,EAjYsB,GAmY9Bt8B,KAAK4sE,aAAalB,eAhYW,IAoYjC1rE,MAAK4sE,aAAa0B,aAAaD,IAO3B5B,EAAZxrE,UAAAstE,0BAAI,WAAA,GAAJjvE,GAAAU,KACcwuE,EAAcxuE,KAAK0sE,KAAKh0C,SAAS1pB,eAClCrO,KAAKwN,EAAAA,KAAK,IACTsgE,EAAgBzuE,KAAK4sE,aAAa5sD,QAAQ7M,QAC3CxS,KACG+tE,EAAAA,IAAI,WAAM,MAAApvE,GAAKe,iBAAiBsuE,wBAGhCvZ,EAAAA,MAAM,GAId,OAAO5mD,GAAAA,MAAMggE,EAAaC,GACrB9tE,KAGGg4B,EAAAA,UAAU,WAQN,MAPAr5B,GAAKsyD,kBACLtyD,EAAKstE,aAAajB,gBAEdrsE,EAAKi6B,WACLj6B,EAAe,WAAEmB,iBAGdnB,EAAKsvE,sBAGhBzgE,EAAAA,KAAK,IAGRrN,UAAU,SAAC2C,GAAU,MAAAnE,GAAKuvE,iBAAiBprE,MAI5CgpE,EAAZxrE,UAAAosE,aAAI,WACQrtE,KAAKC,aACLD,KAAKwtE,aACLxtE,KAAKC,WAAWoD,UAChBrD,KAAKC,WAAa,OAIlBwsE,EAAZxrE,UAAA2sE,gBAAI,SAAwB5qE,GAC5B,GAAc8rE,GAAY9uE,KAAK4sE,cAAgB5sE,KAAK4sE,aAAaX,YACrDjsE,KAAK4sE,aAAaX,YAAYjpE,GAC9BA,EAIE+rE,EAA0B,MAAbD,EAAoBA,EAAY,EAI/C9uE,MAAKwpD,UACLxpD,KAAKwpD,UAAUwlB,SAAShsE,MAAQ+rE,EAEhC/uE,KAAK0D,WAAWhB,cAAcM,MAAQ+rE,EAG1C/uE,KAAKkuE,cAAgBa,GAOjBtC,EAAZxrE,UAAA4tE,iBAAI,SAAyBprE,GACjBA,GAASA,EAAMoX,SACf7a,KAAKivE,4BAA4BxrE,EAAMoX,QACvC7a,KAAK4tE,gBAAgBnqE,EAAMoX,OAAO7X,OAClChD,KAAKyjB,SAAShgB,EAAMoX,OAAO7X,OAC3BhD,KAAK0D,WAAWhB,cAAckX,QAE9B5Z,KAAK4sE,aAAaf,gBAAgBpoE,EAAMoX,SAG5C7a,KAAKwtE,cAIDf,EAAZxrE,UAAAguE,4BAAI,SAAoCjqC,GAChChlC,KAAK4sE,aAAa5sD,QAAQzc,QAAQ,SAAC0c,GAC3BA,IAAW+kB,GAAQ/kB,EAAOC,UAC1BD,EAAOG,cAKXqsD,EAAZxrE,UAAAssE,cAAI,WAAA,GAAJjuE,GAAAU,IACQ,KAAKA,KAAK4sE,aACN,KAAMsC,IAGlB,IAAYjvE,GAAaD,KAAKC,UAEtB,IAAKA,EAwBE,CACcA,EAAWsF,YAA4B,iBAG/C4pE,UAAUnvE,KAAKovE,uBACxBnvE,EAAWovE,YAAanpD,MAAOlmB,KAAKsvE,sBA5BpCtvE,MAAK2E,OAAS,GAAIyL,GAAAA,eAAepQ,KAAK4sE,aAAaxjE,SAAUpJ,KAAKuuC,kBAClEtuC,EAAaD,KAAKE,QAAQC,OAAOH,KAAKuvE,oBACtCvvE,KAAKC,WAAaA,EAIlBA,EAAWyO,gBAAgB5N,UAAU,SAAC2C,IAI9BA,EAAMU,UAAYC,EAAAA,QAAWX,EAAMU,UAAYib,EAAAA,UAAY3b,EAAMkb,UACjErf,EAAKsyD,kBACLtyD,EAAK6tE,oBAAoBrpE,UAI7B9D,KAAK2lB,gBACL3lB,KAAKitE,qBAAuBjtE,KAAK2lB,cAAclmB,SAASqB,UAAU,WAC1DxB,EAAKi6B,WAAat5B,GAClBA,EAAWovE,YAAanpD,MAAO5mB,EAAKgwE,oBAYhDrvE,KAAeA,EAAWiB,gBAC1BjB,EAAW6E,OAAO9E,KAAK2E,QACvB3E,KAAKytE,2BAA6BztE,KAAKuuE,4BAGnD,IAAciB,GAAUxvE,KAAKu5B,SAErBv5B,MAAK4sE,aAAajB,gBAClB3rE,KAAK4sE,aAAazkE,OAASnI,KAAK+sE,iBAAkB,EAI9C/sE,KAAKu5B,WAAai2C,IAAYxvE,KAAKu5B,WACnCv5B,KAAK4sE,aAAaxY,OAAO/uD,QAIzBonE,EAAZxrE,UAAAsuE,iBAAI,WACI,MAAO,IAAI79D,GAAAA,eACPrR,iBAAkBL,KAAK0F,qBACvBlF,eAAgBR,KAAKQ,iBACrB0lB,MAAOlmB,KAAKsvE,gBACZlvE,UAAWJ,KAAKo9B,OAIhBqvC,EAAZxrE,UAAAyE,mBAAI,WAyBI,MAxBA1F,MAAKK,iBAAmBL,KAAKE,QAAQoF,WAChC0Y,oBAAoBhe,KAAKovE,uBACzBlxD,wBAAuB,GACvBuxD,UAAS,GACT9pE,gBAEO/D,QAAS,QACTC,QAAS,SACTC,SAAU,QACVC,SAAU,QAGVH,QAAS,QACTC,QAAS,MACTC,SAAU,QACVC,SAAU,SAKVxB,WAAY,iCAIjBP,KAAKK,kBAGRosE,EAAZxrE,UAAAmuE,oBAAI,WACI,MAAIpvE,MAAK0vE,YACE1vE,KAAK0vE,YAAYhsE,WAGrB1D,KAAKwpD,UAAYxpD,KAAKwpD,UAAUmmB,4BAA8B3vE,KAAK0D,YAGtE+oE,EAAZxrE,UAAAquE,cAAI,WACI,MAAOtvE,MAAK4sE,aAAaV,YAAclsE,KAAK4vE,eAvkBH,GA0kBrCnD,EAAZxrE,UAAA2uE,aAAI,WACI,MAAO5vE,MAAKovE,sBAAsB1sE,cAAc+iB,wBAAwBS,OAOpEumD,EAAZxrE,UAAA2wD,gBAAI,WACI5xD,KAAK4sE,aAAa7tD,WAAWwC,cAAcvhB,KAAK4sE,aAAaT,sBAAwB,GAAK,IAGtFM,EAAZxrE,UAAA8sE,QAAI,WACJ,GAActrE,GAAUzC,KAAK0D,WAAWhB,aAEhC,QAAQD,EAAQi/D,WAAaj/D,EAAQiC,WAAa1E,KAAK8sE,sCAnjB/DrmE,KAACC,EAAAA,UAADC,OACIC,SAAU,kDACVE,MACImC,MAAO,0BACP4mE,sBAAuB,wBAGvBC,YAAa,gBACbvoD,SAAU,cACVmN,UAAW,sBACX3tB,YAAa,wBACbyM,UAAW,uBAEf3M,SAAU,wBACVgC,WAAY2jE,4CAvGhB/lE,KAAIS,EAAAA,aASJT,KAAIY,EAAAA,mBAXJZ,KAAI+E,EAAAA,oBAmBJ/E,KAAIQ,EAAAA,UAXJR,KAAIU,EAAAA,SAkMJV,SAAAa,GAAAC,aAAAd,KAASe,EAAAA,OAATb,MAAgB0lE,QA5LhB5lE,KAASiB,EAAAA,eAATH,aAAAd,KA6LSkB,EAAAA,aA1KTlB,KAASyhB,GAAT3gB,aAAAd,KA2KSkB,EAAAA,WA3KTlB,KA2KqBwwD,EAAAA,SACrBxwD,SAAAa,GAAAC,aAAAd,KAASkB,EAAAA,WAATlB,KAAqBe,EAAAA,OAArBb,MAA4B6uC,EAAAA,cAnL5B/uC,KAASqhB,EAAAA,mCA6GT8kD,eAAAnmE,KAAKqB,EAAAA,MAALnB,MAAW,oBAMX+oE,cAAAjpE,KAAKqB,EAAAA,MAALnB,MAAW,+BAMXkmE,wBAAApmE,KAAKqB,EAAAA,MAALnB,MAAW,kBAMXopE,uBAAAtpE,KAAKqB,EAAAA,MAALnB,MAAW,6BAufX8lE,KuGroBAuD,GAAA,WAAA,QAAAA,MAYmC,sBAZnCvpE,KAAC8B,EAAAA,SAAD5B,OACI+B,SAAUu0B,GAAgBr0B,EAAAA,cAAeoL,GAAgBrL,EAAAA,cACzDF,SACIgjE,GACAxuC,GACAwvC,GACAL,GACAp4D,IAEJxL,cAAeijE,GAAgBgB,GAAuBL,IACtDvjE,WAAYyjE,QAEhB0D,KCbAC,GAAA,WAgBI,QAAJA,GAAgBvsE,GAFJ1D,KAAZmhC,SAGQnhC,KAAK0C,cAAgBgB,EAAWhB,cAwCxC,MA/CIpB,QAAJ2I,eAAQgmE,EAARhvE,UAAA,oBAAI,WACI,MAAOjB,MAAKmhC,MAAM/vB,OAAS,mCAS/B6+D,EAAJhvE,UAAAu4B,mBAAI,WAOIx5B,KAAKmhC,MAAQngB,MAAM+8B,KAAK/9C,KAAK0C,cAAcu5B,iBAAiB,aAC5Dj8B,KAAKkhC,+BAGD+uC,EAAZhvE,UAAAigC,4BAAI,WAGI,GAA0B,IAAtBlhC,KAAKmhC,MAAM/vB,OAAc,CACrC,GAAkBiwB,GAAcrhC,KAAKmhC,MAAM,EAG1BE,GAAYC,wBAA2BD,EAAYE,qBAChDF,EAAYG,aAHC,IAGcH,EAAYG,YAAY4tB,WACnD/tB,EAAY3K,UAAUC,IAAI,gBAC1B32B,KAAK0C,cAAcg0B,UAAUC,IAAI,wBAGjC0K,EAAYI,iBARC,IAQkBJ,EAAYI,gBAAgB2tB,WAC3D/tB,EAAY3K,UAAUC,IAAI,iBAC1B32B,KAAK0C,cAAcg0B,UAAUC,IAAI,8BAGtC,IAjBU,IAiBN32B,KAAKmhC,MAAM/vB,OAAqB,CACnD,GAAkBswB,GAAmB1hC,KAAKmhC,MAAM,GAC9BQ,EAAoB3hC,KAAKmhC,MAAM,EAErCO,GAAiBhL,UAAUC,IAAI,gBAC/BgL,EAAkBjL,UAAUC,IAAI,kCAtD5ClwB,KAACC,EAAAA,UAADC,OACIC,SAAU,kCACVE,MACIopE,oBAAqB,gBACrBC,yBAA0B,wDAZlC1pE,KAAIS,EAAAA,cAiEJ+oE,KAEAG,GAAA,WAEI,QAAJA,GAAuB9mE,GAAAtJ,KAAvBsJ,YAAuBA,EACvB,MAAA8mE,MAGaC,GAIL13D,EAAWnP,EAAc4mE,KAGjCE,GAAA,SAAA5mE,GAYI,QAAJ4mE,GAAgB5sE,EAAgCsV,GAA5C,GAAJ1Z,GACQoK,EADRG,KAAA7J,KACc0D,IADd1D,WAAgDV,GAAhD0Z,cAAgDA,EAGxC1Z,EAAK0Z,cAAcjP,QAAQzK,EAAKgK,YAAY5G,eAAe,KAcnE,MAlB8BsH,GAA9BsmE,EAAA5mE,GAOI4mE,EAAJrvE,UAAAmC,YAAI,WACIpD,KAAKgZ,cAAc9O,eAAelK,KAAKsJ,YAAY5G,gBAGvD4tE,EAAJrvE,UAAA2Y,MAAI,WACI5Z,KAAK4oC,iBAAiBhvB,SAG1B02D,EAAJrvE,UAAA2nC,eAAI,WACI,MAAO5oC,MAAKsJ,YAAY5G,8BA3BhC+D,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,oBACVwC,SAAJ,sGACIqB,QAAS,4hGACTH,gBAAiBC,EAAAA,wBAAwBC,OACzCL,cAAeC,EAAAA,kBAAkBC,KACjCK,QAAS,WAAY,SACrB5D,MACI8lB,aAAc,4DAxFtBnmB,KAAIS,EAAAA,aAIJT,KAASoE,EAAAA,gBAyGTylE,GAlB8BD,IAqB9BE,GAAA,SAAA7mE,GAcI,QAAJ6mE,GAAgB5mE,EAA4BjG,GAC5C,MAAQgG,GAARG,KAAA7J,KAAc0D,EAAYiG,IAA1B3J,KASA,MAX8BgK,GAA9BumE,EAAA7mE,GAKI6mE,EAAJtvE,UAAAuvE,mBAAI,SAAmB/sE,GACXzD,KAAK0E,WACLjB,EAAMob,iBACNpb,EAAMy3C,4CArBlBz0C,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,eACVwC,SAAJ,sGACIqB,QAAS,4hGACTH,gBAAiBC,EAAAA,wBAAwBC,OACzCL,cAAeC,EAAAA,kBAAkBC,KACjCK,QAAS,WAAY,SACrB5D,MACI8D,kBAAmB,oBACnBD,kBAAmB,mBACnB6I,UAAW,sEAtHnB/M,KAASoE,EAAAA,eAJTpE,KAAIS,EAAAA,cAwIJqpE,GAX8BD,ICrH9B13B,GAAA,WAAA,QAAAA,MAiB6B,sBAjB7BnyC,KAAC8B,EAAAA,SAAD5B,OACI+B,SACIC,EAAAA,aACAgD,EAAAA,WACAC,EAAAA,gBAEJnD,SACI6nE,GACAC,GACAN,IAEJznE,cACI8nE,GACAC,GACAN,QAGRr3B,KCKa63B,IACT31D,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAW,WAAM,MAAAy1D,MAC9Bx1D,OAAO,iBAKP,QAAJy1D,GAEe91D,EAEA7X,GAFAhD,KAAf6a,OAAeA,EAEA7a,KAAfgD,MAAeA,EAEf,MAAA2tE,MAGAD,GAAA,WAkGI,QAAJA,GAAwBxxB,GAAAl/C,KAAxBk/C,gBAAwBA,EAlBDl/C,KAAvBwjB,YAAqC,GAAIhK,GAAAA,aAGlBxZ,KAAvBP,OACQ,GAAI+Z,GAAAA,aACAxZ,KAAZwsD,WAAwB,EACZxsD,KAAZ64B,WAAwB,EACZ74B,KAAZoU,WAAwB,EAkBpBpU,KAAJs/C,6BAAyD,aAIrDt/C,KAAJ4vB,UAA2B,aAiI3B,MAjOItuB,QAAJ2I,eACQymE,EADRzvE,UAAA,gBAAI,WAEI,MAAOjB,MAAKwsD,eAGhB,SAAaxpD,GACThD,KAAKwsD,UAAY93C,EAAAA,sBAAsB1R,oCAI3C1B,OAAJ2I,eACQymE,EADRzvE,UAAA,aAAI,WAEJ,GAAcif,GAAWlgB,KAAKmhB,eAAiBnhB,KAAKmhB,eAAejB,WAE3D,OAAIlgB,MAAK0e,SACEwB,EAASqD,IAAI,SAAClY,GAAW,MAAAA,GAAOrI,QAGpCkd,EAAS,GAAKA,EAAS,GAAGld,UAAQsE,QAG7C,SAAU8kB,GACNpsB,KAAK6gB,oBAAoBuL,GACzBpsB,KAAKwjB,YAAYne,KAAKrF,KAAKgD,wCAI/B1B,OAAJ2I,eAAQymE,EAARzvE,UAAA,gBAAI,WACJ,GAAcif,GAAWlgB,KAAKmhB,eAAejB,QAErC,OAAOlgB,MAAK0e,SAAWwB,EAAYA,EAAS,IAAM,sCAItD5e,OAAJ2I,eACQymE,EADRzvE,UAAA,gBAAI,WAEI,MAAOjB,MAAK64B,eAGhB,SAAa71B,GACThD,KAAK64B,UAAYnkB,EAAAA,sBAAsB1R,oCAO3C1B,OAAJ2I,eACQymE,EADRzvE,UAAA,gBAAI,WAEI,MAAOjB,MAAKoU,eAGhB,SAAapR,GACThD,KAAKoU,UAAYM,EAAAA,sBAAsB1R,GAElChD,KAAK4wE,eAIV5wE,KAAK4wE,cAAcrtE,QAAQ,SAAC8H,GAAW,MAAAA,GAAOnJ,kDAuClDwuE,EAAJzvE,UAAAiC,SAAI,WACIlD,KAAKmhB,eAAiB,GAAImY,GAAAA,eAA+Bt5B,KAAK0e,aAAUpX,IAAW,IAGvFopE,EAAJzvE,UAAAu4B,mBAAI,kBACItzB,EAAAlG,KAAKmhB,gBAAehB,OAA5BqY,MAAAtyB,EAAsClG,KAAK4wE,cAAc9iE,OAAO,SAACzC,GAAW,MAAAA,GAAO2O,WAC3Eha,KAAK0E,SAAW1E,KAAKoU,WAOzBs8D,EAAJzvE,UAAAsZ,WAAI,SAAWvX,GACPhD,KAAKgD,MAAQA,EACbhD,KAAKk/C,gBAAgBh9C,gBAIzBwuE,EAAJzvE,UAAAuZ,iBAAI,SAAiBC,GACbza,KAAKs/C,6BAA+B7kC,GAIxCi2D,EAAJzvE,UAAAyZ,kBAAI,SAAkBD,GACdza,KAAK4vB,UAAYnV,GAIrBi2D,EAAJzvE,UAAA0Z,iBAAI,SAAiBC,GACb5a,KAAK0E,SAAWkW,GAIpB81D,EAAJzvE,UAAA6pC,gBAAI,WACJ,GAAc5qB,GAAWlgB,KAAKkgB,SAChBrF,EAASmG,MAAMC,QAAQf,GAAYA,EAASA,EAAS9O,OAAS,GAAK8O,EACnEzc,EAAQ,GAAIktE,IAAqB91D,EAAQ7a,KAAKgD,MACpDhD,MAAKs/C,6BAA6B77C,EAAMT,OACxChD,KAAKP,OAAO4F,KAAK5B,IASrBitE,EAAJzvE,UAAA4vE,iBAAI,SAAiBxlE,EAAwB8U,EAAiBsC,OAA9D,KAAAA,IAA8DA,GAA9D,GAGaziB,KAAK0e,WAAY1e,KAAKkgB,UAAa7U,EAAO2O,UAC1Cha,KAAa,SAAoBga,SAAU,GAG5CmG,EACAngB,KAAKmhB,eAAehB,OAAO9U,GAE3BrL,KAAKmhB,eAAef,SAAS/U,GAI7BoX,GACAziB,KAAK8qC,kBAKT9qC,KAAKwjB,YAAYne,KAAKrF,KAAKgD,QAI/B0tE,EAAJzvE,UAAA2hB,WAAI,SAAWvX,GACP,MAAOrL,MAAKmhB,eAAeyB,WAAWvX,IAI1CqlE,EAAJzvE,UAAA6vE,aAAI,SAAazlE,GACT,WAAsB/D,KAAlBtH,KAAKypC,WAILzpC,KAAK0e,UAAYsC,MAAMC,QAAQjhB,KAAKypC,UAC7BzpC,KAAKypC,SAAShoC,KAAK,SAACuB,GAAU,MAAgB,OAAhBqI,EAAOrI,OAAiBA,IAAUqI,EAAOrI,QAG3EqI,EAAOrI,QAAUhD,KAAKypC,WAIzBinC,EAAZzvE,UAAA4f,oBAAI,SAA4B7d,GAA5B,GAAJ1D,GAAAU,IAGQ,IAFAA,KAAKypC,SAAWzmC,EAEXhD,KAAK4wE,cAIV,GAAI5wE,KAAK0e,UAAY1b,EAAO,CACxB,IAAKge,MAAMC,QAAQje,GACf,KAAMoJ,OAAM,qDAGhBpM,MAAK0kC,iBACL1hC,EAAMO,QAAQ,SAACgQ,GAAsB,MAAAjU,GAAK8hB,YAAY7N,SAEtDvT,MAAK0kC,iBACL1kC,KAAKohB,YAAYpe,IAKjB0tE,EAAZzvE,UAAAyjC,eAAI,WACI1kC,KAAKmhB,eAAevd,QACpB5D,KAAK4wE,cAAcrtE,QAAQ,SAAC8H,GAAW,MAAAA,GAAO2O,SAAU,KAIpD02D,EAAZzvE,UAAAmgB,YAAI,SAAoBpe,GACxB,GAAcse,GAAsBthB,KAAK4wE,cAAc9/D,KAAK,SAACzF,GACjD,MAAuB,OAAhBA,EAAOrI,OAAiBqI,EAAOrI,QAAUA,GAGhDse,KACAA,EAAoBtH,SAAU,EAC9Bha,KAAKmhB,eAAehB,OAAOmB,oBA3OvC7a,KAACC,EAAAA,UAADC,OACIC,SAAU,yBACViC,WAAY4nE,IACZ3pE,MACI0F,KAAM,QACNvD,MAAO,yBACP8nE,oCAAqC,YAEzClqE,SAAU,8DAxDdJ,KAAI+E,EAAAA,uCA6DJqhD,WAAApmD,KAAKqB,EAAAA,QAUL9E,QAAAyD,KAAKqB,EAAAA,QAwBL4W,WAAAjY,KAAKqB,EAAAA,QAUL8oE,gBAAAnqE,KAAKm2B,EAAAA,gBAALj2B,MAAqBsU,EAAAA,WAAW,WAAM,MAAA+1D,SAGtCtsE,WAAA+B,KAAKqB,EAAAA,QAoBL0b,cAAA/c,KAAKmB,EAAAA,SAGLnI,SAAAgH,KAAKmB,EAAAA,UA2JL8oE,KAGAM,GAAA,WA0EI,QAAJA,GAC2BC,EACXzvD,EACA7X,EACAlH,GAHWzC,KAA3BixE,kBAA2BA,EACXjxE,KAAhBwhB,kBAAgBA,EACAxhB,KAAhB2J,aAAgBA,EACA3J,KAAhByC,QAAgBA,EAXOzC,KAAvBP,OACQ,GAAI+Z,GAAAA,aAEAxZ,KAAZkxE,kBAA+B,EACnBlxE,KAAZuZ,UAAuB,EACXvZ,KAAZoU,WAAiC,EAkEjC,MA5GI9S,QAAJ2I,eACQ+mE,EADR/vE,UAAA,eAAI,WAEI,MAAOjB,MAAKixE,kBAAoBjxE,KAAKixE,kBAAkBruD,WAAW5iB,MAAQA,KAAKuZ,cAGnF,SAAYvW,GAChB,GAAcopB,GAAW1X,EAAAA,sBAAsB1R,EAEnCopB,KAAapsB,KAAKuZ,WAClBvZ,KAAKuZ,SAAW6S,EAEZpsB,KAAKixE,mBACLjxE,KAAKixE,kBAAkBJ,iBAAiB7wE,KAAMA,KAAKuZ,UAGvDvZ,KAAKwhB,kBAAkBtf,iDAe/BZ,OAAJ2I,eACQ+mE,EADR/vE,UAAA,gBAAI,WAEI,MAAOjB,MAAKoU,WAAcpU,KAAKixE,mBAAqBjxE,KAAKixE,kBAAkBvsE,cAE/E,SAAa1B,GAAkBhD,KAAKoU,UAAYM,EAAAA,sBAAsB1R,oCAiBtEguE,EAAJ/vE,UAAAiC,SAAI,WACIlD,KAAKkxE,iBAAmBlxE,KAAKixE,oBAAsBjxE,KAAKixE,kBAAkBvyD,SAC1E1e,KAAKyG,KAAOzG,KAAKkxE,iBAAmB,QAAU,WAE1ClxE,KAAKixE,mBAAqBjxE,KAAKixE,kBAAkBH,aAAa9wE,QAC9DA,KAAKga,SAAU,GAGnBha,KAAK2J,aAAaI,QAAQ/J,KAAKyC,QAAQC,eAAe,IAG1DsuE,EAAJ/vE,UAAAmC,YAAI,WAAA,GAAJ9D,GAAAU,KACc08B,EAAQ18B,KAAKixE,iBAEnBjxE,MAAK2J,aAAaO,eAAelK,KAAKyC,QAAQC,eAI1Cg6B,GAASA,EAAM9Z,WAAW5iB,OAC1B0gB,QAAQC,UAAUC,KAAK,WAAM,MAAA8b,GAAMm0C,iBAAiBvxE,GAAM,MAKlE0xE,EAAJ/vE,UAAA2Y,MAAI,WACI5Z,KAAKyC,QAAQC,cAAckX,SAI/Bo3D,EAAJ/vE,UAAAkwE,cAAI,WACI,IAAInxE,KAAK0E,SAAT,CAIR,GAAc0sE,KAAapxE,KAAKkxE,mBAA2BlxE,KAAKuZ,QAEpD63D,KAAepxE,KAAKuZ,WACpBvZ,KAAKuZ,SAAW63D,EACZpxE,KAAKixE,oBACLjxE,KAAKixE,kBAAkBJ,iBAAiB7wE,KAAMA,KAAKuZ,UAAU,GAC7DvZ,KAAKixE,kBAAkBrhD,cAI/B5vB,KAAKP,OAAO4F,KAAK,GAAIsrE,IAAqB3wE,KAAMA,KAAKgD,UAQzDguE,EAAJ/vE,UAAAiB,aAAI,WAGIlC,KAAKwhB,kBAAkBtf,+BAxI/BuE,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,mBACVwC,SAAU,yQAUVqB,QAAS,m1DACTN,cAAeC,EAAAA,kBAAkBC,KACjCxD,SAAU,iBACVyD,gBAAiBC,EAAAA,wBAAwBC,OACzC1D,MACIuqE,sCAAuC,qBACvCC,mCAAoC,UACpCroE,MAAO,mBAGP2B,kBAAmB,KACnBD,kBAAmB,mBACnB2c,UAAW,mDAmDnB7gB,KAA8CiqE,GAA9CnpE,aAAAd,KAASkB,EAAAA,aA5WTlB,KAAI+E,EAAAA,oBAiBJ/E,KAASoE,EAAAA,eAbTpE,KAAIS,EAAAA,gCA2TJ8S,UAAAvT,KAAKqB,EAAAA,QAsBLypE,WAAA9qE,KAAKyG,EAAAA,UAALvG,MAAe2pE,MAGfttE,QAAAyD,KAAKqB,EAAAA,QAGLgC,WAAArD,KAAKqB,EAAAA,QAELpD,WAAA+B,KAAKqB,EAAAA,QAOLrI,SAAAgH,KAAKmB,EAAAA,UAuELopE,KCvaAQ,GAAA,WAAA,QAAAA,MAKmC,sBALnC/qE,KAAC8B,EAAAA,SAAD5B,OACI+B,SAAUsL,GAAgB4kC,IAC1BnwC,SAAUuL,GAAgB08D,GAAqBM,IAC/CxoE,cAAekoE,GAAqBM,QAExCQ,KpBCA5P,GAAA,WAqCI,QAAJA,GAAwBt4D,EAAiC0P,GAAjChZ,KAAxBsJ,YAAwBA,EAAiCtJ,KAAzDgZ,cAAyDA,EAVrDhZ,KAAJyxE,UAAe,EAGXzxE,KAAJkgB,UAAe,EAGXlgB,KAAJ+4D,eAAqB,GAAIv/C,GAAAA,aAEbxZ,KAAZwjC,UAAuC,EAG/BxjC,KAAKgZ,cAAcjP,QAAQ/J,KAAKsJ,YAAY5G,eAAe,GAkCnE,MAxDIpB,QAAJ2I,eAAQ23D,EAAR3gE,UAAA,gBAAI,WACI,MAAOjB,MAAKyxE,SAAW,KAAOzxE,KAAKwjC,eAGvC,SAEaxgC,GACThD,KAAKwjC,UAAYxgC,mCAkBrB4+D,EAAJ3gE,UAAAmC,YAAI,WACIpD,KAAKgZ,cAAc9O,eAAelK,KAAKsJ,YAAY5G,gBAGvDk/D,EAAJ3gE,UAAA2Y,MAAI,WACI5Z,KAAK0xE,YAAY93D,SAGrBgoD,EAAJ3gE,UAAA0wE,QAAI,SAAQxwE,GACCnB,KAAKyxE,WACNtwE,EAAO+Y,kBAEPla,KAAK+4D,eAAe1zD,MAAMrF,KAAKkgB,YAIvC5e,OAAJ2I,eAAgB23D,EAAhB3gE,UAAA,mBAAI,WACI,MAAOjB,MAAKsJ,YAAY5G,+CAG5Bk/D,EAAJ3gE,UAAA8gB,UAAI,SAAU5gB,GACN,OAAQA,EAAOgD,SACX,IAAKsa,GAAAA,MACIze,KAAKyxE,WACNtwE,EAAO0d,iBACP7e,KAAK+4D,eAAe1zD,MAAMrF,KAAKkgB,4BAlEnDzZ,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,UACVwC,SAAJ,gEACIqB,QAAS,gWACTH,gBAAiBC,EAAAA,wBAAwBC,OACzCL,cAAeC,EAAAA,kBAAkBC,KACjCK,QAAS,SACT5D,MACImC,MAAO,UACP2oE,2BAA4B,WAC5BC,2BAA4B,WAC5B9qE,YAAa,oBACbyM,UAAW,2DArBnB/M,KAAIS,EAAAA,aAKJT,KAASoE,EAAAA,kCAwBTf,WAAArD,KAAK2B,EAAAA,YAALzB,MAAiB,mBAAjBF,KACKqB,EAAAA,QAKL2pE,WAAAhrE,KAAKqB,EAAAA,QAGLoY,WAAAzZ,KAAKqB,EAAAA;eAGLixD,iBAAAtyD,KAAKmB,EAAAA,UAwCLg6D,KC1EAC,GAAA,WAAA,QAAAA,MAS2B,sBAT3Bp7D,KAAC8B,EAAAA,SAAD5B,OACI+B,SACIC,EAAAA,aACAgD,EAAAA,WACAC,EAAAA,gBAEJnD,SAAUm5D,IACVp5D,cAAeo5D,QAEnBC,KCLaC,GACT,GAAI3yD,GAAAA,eAAsC,4BCiB1CoJ,GAAe,EAONwpD,IACTjnD,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAW,WAAM,MAAA+mD,MAC9B9mD,OAAO,OASP+mD,KAAJ,EAEIC,QAAJ,EAEIC,UAAJ,EAEIC,cAAJ,gHAIA,mBAAA,QAAAC,MAKA,MAAAA,oBAKI,QAAJC,GAAuBh5D,GAAAtJ,KAAvBsJ,YAAuBA,EAEvB,MAAAg5D,MAEaC,GAKL7pD,EAAcC,EAAWnP,EAAc84D,MAU/CN,GAAA,SAAAt4D,GAwFI,QAAJs4D,GAAgBt+D,EACQuV,EACAD,EACelP,EAEf04D,GALpB,GAAJljE,GAMQoK,EANRG,KAAA7J,KAMc0D,IANd1D,WACwBV,GAAxB2Z,mBAAwBA,EACA3Z,EAAxB0Z,cAAwBA,EAGA1Z,EAAxBkjE,aAAwBA,EAnECljE,EAAzB6Z,UAA6C,GAKf7Z,EAA9B8Z,eAA8D,KAElD9Z,EAAZ+Z,UAAgC,kBAAiBd,GAGpCjZ,EAAbsO,GAA0BtO,EAAK+Z,UAoBlB/Z,EAAb4Z,cAAiD,QAGpC5Z,EAAbga,KAAmC,KAGZha,EAAvBG,OACQ,GAAI+Z,GAAAA,aAGWla,EAAvBmjE,oBAAoE,GAAIjpD,GAAAA,aAYpEla,EAAJ05B,WAA4B,aAGhB15B,EAAZojE,uBAA6C,GAEjCpjE,EAAZqjE,mBAAuDC,GAAqBX,KAEhE3iE,EAAZujE,8BAAkE,aAuCtDvjE,EAAZia,UAAgC,EAkBpBja,EAAZ8U,WAAiC,EA4BrB9U,EAAZwjE,gBAAsC,EA1E9BxjE,EAAKwK,SAAWhH,SAASgH,IAAa,IA0M9C,MAvRgCE,GAAhCg4D,EAAAt4D,GAoBIpI,OAAJ2I,eAAQ+3D,EAAR/gE,UAAA,eAAI,WACI,OAAUjB,KAAK4N,IAAM5N,KAAKqZ,WAAlC,0CAII/X,OAAJ2I,eACQ+3D,EADR/gE,UAAA,gBAAI,WAEI,MAAOjB,MAAKyqB,eAGhB,SAAaznB,GACThD,KAAKyqB,UAAY4d,EAAUrlC,oCAiD/Bg/D,EAAJ/gE,UAAA44B,gBAAI,WAAA,GAAJv6B,GAAAU,IACQA,MAAKgZ,cACAjP,QAAQ/J,KAAK8Z,cAAcpX,eAC3B5B,UAAU,SAACiiE,GAAgB,MAAAzjE,GAAK0jE,oBAAoBD,MAG7Df,EAAJ/gE,UAAAmC,YAAI,WACIpD,KAAKgZ,cAAc9O,eAAelK,KAAK8Z,cAAcpX,gBAMzDpB,OAAJ2I,eACQ+3D,EADR/gE,UAAA,eAAI,WAEI,MAAOjB,MAAKuZ,cAGhB,SAAYvW,GACJA,GAAShD,KAAKga,UACdha,KAAKuZ,SAAWvW,EAChBhD,KAAKiZ,mBAAmB/W,iDAUhCZ,OAAJ2I,eACQ+3D,EADR/gE,UAAA,gBAAI,WAEI,MAAOjB,MAAKoU,eAGhB,SAAapR,GACLA,GAAShD,KAAK0E,WACd1E,KAAKoU,UAAYpR,EACjBhD,KAAKiZ,mBAAmB/W,iDAYhCZ,OAAJ2I,eACQ+3D,EADR/gE,UAAA,qBAAI,WAEI,MAAOjB,MAAK8iE,oBAGhB,SAAkB9/D,GACtB,GAAcy2B,GAAUz2B,GAAShD,KAAK8iE,cAC9B9iE,MAAK8iE,eAAiB9/D,EAElBy2B,IACIz5B,KAAK8iE,eACL9iE,KAAKijE,sBAAsBL,GAAqBR,eAEhDpiE,KAAKijE,sBACDjjE,KAAKga,QAAU4oD,GAAqBV,QAAUU,GAAqBT,WAE3EniE,KAAKyiE,oBAAoBp9D,KAAKrF,KAAK8iE,kDAO3Cd,EAAJ/gE,UAAAkZ,mBAAI,WAIIna,KAAKiZ,mBAAmB/W,gBAI5B8/D,EAAJ/gE,UAAAsZ,WAAI,SAAWvX,GACPhD,KAAKga,UAAYhX,GAIrBg/D,EAAJ/gE,UAAAuZ,iBAAI,SAAiBC,GACbza,KAAK6iE,8BAAgCpoD,GAIzCunD,EAAJ/gE,UAAAyZ,kBAAI,SAAkBD,GACdza,KAAKg5B,WAAave,GAItBunD,EAAJ/gE,UAAA0Z,iBAAI,SAAiBC,GACb5a,KAAK0E,SAAWkW,GAGpBonD,EAAJ/gE,UAAA8Y,gBAAI,WACI,MAAO/Z,MAAKga,QAAU,OAAUha,KAAKkjE,cAAgB,QAAU,SAG3DlB,EAAZ/gE,UAAAgiE,sBAAI,SAA8BE,GAClC,GAAcC,GAAWpjE,KAAK2iE,mBAChBlgE,EAAuBzC,KAAKsJ,YAAY5G,aAE1C0gE,KAAaD,IAGbnjE,KAAK0iE,uBAAuBtxD,OAAS,GACrC3O,EAAQi0B,UAAUqF,OAAO/7B,KAAK0iE,wBAGlC1iE,KAAK2iE,mBAAqBQ,EAEtBnjE,KAAK0iE,uBAAuBtxD,OAAS,GACrC3O,EAAQi0B,UAAUC,IAAI32B,KAAK0iE,0BAI3BV,EAAZ/gE,UAAAqZ,iBAAI,WACJ,GAAc7W,GAAQ,GAAI4+D,GAClB5+D,GAAMoX,OAAS7a,KACfyD,EAAMuW,QAAUha,KAAKga,QAErBha,KAAK6iE,8BAA8B7iE,KAAKga,SACxCha,KAAKP,OAAO4F,KAAK5B,IAIbu+D,EAAZ/gE,UAAA+hE,oBAAI,SAA4BD,GACpBA,GACA/iE,KAAKg5B,cAKbgpC,EAAJ/gE,UAAAoK,OAAI,WACIrL,KAAKga,SAAWha,KAAKga,SAUzBgoD,EAAJ/gE,UAAAmZ,cAAI,SAAc3W,GAAd,GAAJnE,GAAAU,IAQQyD,GAAMyW,kBAGDla,KAAK0E,UAAkC,SAAtB1E,KAAKwiE,aAkBfxiE,KAAK0E,UAAkC,SAAtB1E,KAAKwiE,eAG9BxiE,KAAK8Z,cAAcpX,cAAcsX,QAAUha,KAAKga,QAChDha,KAAK8Z,cAAcpX,cAAcwgE,cAAgBljE,KAAKkjE,gBApBlDljE,KAAKkjE,eAAuC,UAAtBljE,KAAKwiE,cAE3B9hD,QAAQC,UAAUC,KAAK,WACnBthB,EAAKwjE,gBAAiB,EACtBxjE,EAAKmjE,oBAAoBp9D,KAAK/F,EAAKwjE,kBAI3C9iE,KAAKqL,SACLrL,KAAKijE,sBACDjjE,KAAKuZ,SAAWqpD,GAAqBV,QAAUU,GAAqBT,WAKxEniE,KAAKsa,qBAUb0nD,EAAJ/gE,UAAA2Y,MAAI,WACI5Z,KAAKgZ,cAAca,SAAS7Z,KAAK8Z,cAAcpX,cAAe,aAGlEs/D,EAAJ/gE,UAAAgZ,oBAAI,SAAoBxW,GAIhBA,EAAMyW,kCAxSdzT,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,cACVwC,SAAJ,26BACIqB,QAAS,w6CACT5D,SAAU,aACVC,MACImC,MAAO,cACPkS,OAAQ,KACRzO,YAAa,KACb22D,2BAA4B,gBAC5B1iB,qBAAsB,UACtBvlC,sBAAuB,WACvBkoD,mCAAoC,6BAExCz6D,WAAYk5D,IACZr3D,QAAS,QAAS,YAClBP,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,+CAtG7C/D,KAAIS,EAAAA,aAFJT,KAAI+E,EAAAA,oBAcJ/E,KAASoE,EAAAA,eAoKTpE,KAAAgV,OAAAlU,aAAAd,KAAiBiV,EAAAA,UAAjB/U,MAA2B,gBAC3BF,SAAAa,GAAAC,aAAAd,KAAiBkB,EAAAA,WAAjBlB,KAA6Be,EAAAA,OAA7Bb,MAAoCm7D,2BAlEpC3oD,YAAA1S,KAAKqB,EAAAA,MAALnB,MAAW,gBAKXyS,iBAAA3S,KAAKqB,EAAAA,MAALnB,MAAW,qBAKXiH,KAAAnH,KAAKqB,EAAAA,QAQLohB,WAAAziB,KAAKqB,EAAAA,QAYLoR,gBAAAzS,KAAKqB,EAAAA,QAGLwR,OAAA7S,KAAKqB,EAAAA,QAGLrI,SAAAgH,KAAKmB,EAAAA,SAIL66D,sBAAAh8D,KAAKmB,EAAAA,SAGL5E,QAAAyD,KAAKqB,EAAAA,QAGLgS,gBAAArT,KAAKyG,EAAAA,UAALvG,MAAe,WAwCfqT,UAAAvT,KAAKqB,EAAAA,QAkBLpD,WAAA+B,KAAKqB,EAAAA,QAoBLo7D,gBAAAz8D,KAAKqB,EAAAA,SAoJLk6D,GAvRgCO,ICnGnBgB,IACTzoD,QAAS8Z,EAAAA,cACT5Z,YAAaC,EAAAA,WAAW,WAAM,MAAAuoD,MAC9BtoD,OAAO,GAQXsoD,GAAA,SAAA95D,GAAA,QAAA85D,oDAOA,MADiDx5D,GAAjDw5D,EAAA95D,kBANAjD,KAACC,EAAAA,UAADC,OACIC,SAAU,2HAEViC,WAAY06D,IACZz8D,MAAQ28D,kBAAmB,4BAG/BD,GADiDE,EAAAA,2BCrBjDC,GAAA,WAAA,QAAAA,MAMA,sBANAl9D,KAAC8B,EAAAA,SAAD5B,OACI+B,SAAUC,EAAAA,cACVF,SAAUu5D,GAAYwB,IACtBh7D,cAAew5D,GAAYwB,QAG/BG,KCVa7uC,GACT,GAAI3lB,GAAAA,eAA+B,2BCmB1By0D,GAAS,SAAC5gE,EACA8oB,EACAjH,EACAg/C,GAEvB,GAAQC,EAEJ,OAAc,QAAV9gE,GACA8gE,EAAMntC,EAAI9R,EAAKg/C,GAEA,OAARC,EAAe,KAAOl/C,KAAKC,IAAIi/C,EAAKh4C,KAG/Cg4C,EAAMntC,EAAI3zB,EAAO6gE,GAEF,OAARC,EAAe,KAAOl/C,KAAKkH,IAAIlH,KAAKC,IAAIi/C,EAAKh4C,GAAMjH,KAGjDk/C,GAAW,SAAC/gE,EACA8oB,EACAjH,EACAg/C,GAEzB,GAAQC,EAEJ,OAAc,QAAV9gE,GACA8gE,EAAMntC,EAAI7K,GAAM+3C,GAED,OAARC,EAAe,KAAOl/C,KAAKkH,IAAIg4C,EAAKj/C,KAG/Ci/C,EAAMntC,EAAI3zB,GAAQ6gE,GAEH,OAARC,EAAe,KAAOl/C,KAAKC,IAAID,KAAKkH,IAAIg4C,EAAKj/C,GAAMiH,KCzBxDk4C,IACF,SACA,WACA,OACA,SACA,QACA,QACA,QACA,QACA,UAGSC,GAAW,GACXC,GAAa,EAEtB3rD,GAAe,EAEnB4rD,GAAA,WACI,QAAJA,GAAuBr6C,EACAC,EACAC,EACAlJ,GAHA9gB,KAAvB8pB,yBAAuBA,EACA9pB,KAAvB+pB,WAAuBA,EACA/pB,KAAvBgqB,gBAAuBA,EACAhqB,KAAvB8gB,UAAuBA,EAEvB,MAAAqjD,MAEaC,GAAkEl6C,EAAgBi6C,IAG/FE,GAAA,WAqDI,QAAJA,GACgB9qB,EACAjwC,EACAg7D,EACWT,EACIU,EACL1/C,EACAiH,GANV9rB,KAAhBu5C,UAAgBA,EACAv5C,KAAhBsJ,YAAgBA,EACAtJ,KAAhBskE,OAAgBA,EAbZtkE,KAAJsqB,SAAuB,EAMVtqB,KAAb8iB,aAA2C,GAAIpV,GAAAA,QAavC1N,KAAK6jE,KAAO7jE,KAAKwkE,QAAQX,GAAQzrD,WAAWyrD,GAAQK,GACpDlkE,KAAKukE,QAAUvkE,KAAKwkE,QAAQD,GAAWnsD,WAAWmsD,GAAWN,GAC7DjkE,KAAK6kB,IAAM7kB,KAAKwkE,QAAQ3/C,GAAOzM,WAAWyM,IAAQ4/C,EAAAA,EAClDzkE,KAAK8rB,IAAM9rB,KAAKwkE,QAAQ14C,GAAO1T,WAAW0T,GAAO24C,EAAAA,EAEjDzkE,KAAK0kE,MAAQ1kE,KAAKsJ,YAAY5G,aAEtC,IAAciiE,GAAO3kE,IAET,kBAAmBA,MAAK0kE,OACxBpjE,OAAO2I,eAAe3I,OAAOsjE,eAAe5kE,KAAK0kE,OAAQ,iBAErDx2C,eAChB,GAA0B41C,GAAM1rD,WAAWusD,EAAKE,kBAAkB7kE,KAAKgD,OAEnD,OAAO4wB,OAAMkwC,GAAO,KAAOA,KA0G/C,MApGIO,GAAJpjE,UAAA6jE,cAAI,SAAc74C,GACNA,IAAcjsB,KAAKsqB,UACnBtqB,KAAKsqB,QAAU2B,EACfjsB,KAAK8iB,aAAahf,SAI1BugE,EAAJpjE,UAAA8gB,UAAI,SAAUte,GAAV,GAAJnE,GAAAU,KAEcmE,EAAUV,EAAMU,QAYhB4gE,GAAWC,EAAAA,aAAcC,EAAAA,KAAMC,EAAAA,UAC/BC,GAAe9iC,EAAAA,OAAQC,EAAAA,UAAW8iC,EAAAA,IAAKhhE,EAAAA,OAAQoa,EAAAA,OAC/C6mD,GAAUhmD,EAAAA,WAAYC,EAAAA,aACtBgmD,GAAgB9lD,EAAAA,KAAMC,EAAAA,KAAK8lD,OAAOF,GAAQE,OAAOJ,GAAaI,OAAOR,GAErES,EAAa,SAACvhE,GAAM,MAAU,MAAVA,EAAEvC,KAAyB,YAAVuC,EAAEvC,KACvC+jE,EAAgB,SAACxhE,GAAM,MAAU,MAAVA,EAAEvC,KAAyB,MAAVuC,EAAEvC,IAOhD,OAAsC,IAAlC4jE,EAAY7yD,QAAQtO,IAvBR,SAACF,GAAM,MAAAA,GAAEE,UAAY0b,EAAAA,IAAM5b,EAAE6b,SAAW7b,EAAEyhE,UAwB9CjiE,IAvBI,SAACQ,GAAM,MAAAA,GAAEE,UAAYwhE,EAAAA,IAAM1hE,EAAE6b,SAAW7b,EAAEyhE,UAwB9CjiE,IAvBI,SAACQ,GAAM,MAAAA,GAAEE,UAAYyhE,EAAAA,IAAM3hE,EAAE6b,SAAW7b,EAAEyhE,UAwB9CjiE,IAvBI,SAACQ,GAAM,MAAAA,GAAEE,UAAY0hE,EAAAA,IAAM5hE,EAAE6b,SAAW7b,EAAEyhE,UAwB9CjiE,IAtBG,SAACQ,GAAM,MAAAA,GAAEE,SAAW2hE,EAAAA,IAAM7hE,EAAEE,SAAW4hE,EAAAA,KAuB3CtiE,IATM,SAACQ,GAAM,MAAA3E,GAAKi6C,UAAUysB,MAAQ1mE,EAAKi6C,UAAU0sB,QACxDT,EAAWvhE,GACXwhE,EAAcxhE,IAQPR,MAMTA,EAAM8c,WA5BO,SAACtc,GAAM,MAACA,GAAEE,SAAW+hE,EAAAA,MAAQjiE,EAAEE,SAAWgiE,EAAAA,MACtDliE,EAAEE,SAAWiiE,EAAAA,aAAeniE,EAAEE,SAAWkiE,EAAAA,aA2Bd5iE,IAAQ,CACpCA,EAAMob,gBAGlB,IAAkBglD,GAAOpgE,EAAM8c,SAAWvgB,KAAKukE,QAAUvkE,KAAK6jE,IAE9C1/D,KAAYib,EAAAA,UACZpf,KAAK4jE,OAAOC,GAGZ1/D,IAAYgb,EAAAA,YACZnf,KAAK+jE,SAASF,KAK1BQ,EAAJpjE,UAAA6uB,QAAI,SAAQrsB,GACZ,GAAYT,GAAQS,EAAMusB,cAAcC,QAAQ,OACxCjtB,GAAQhD,KAAK6kE,kBAAkB7hE,GAE1BhD,KAAKwkE,QAAQxhE,IACdS,EAAMob,kBAIdwlD,EAAJpjE,UAAA2iE,OAAI,SAAOC,GACH7jE,KAAKsJ,YAAY5G,cAAckX,OACvC,IAAckqD,GAAMF,GAAO5jE,KAAK0kE,MAAM4B,cAAetmE,KAAK8rB,IAAK9rB,KAAK6kB,IAAKg/C,EACjE7jE,MAAK0kE,MAAM1hE,MAAgB,OAAR8gE,EAAe,GAAKA,EAAIt3C,WAC3CxsB,KAAKskE,OAAOiC,OAAOlhE,KAAKrF,KAAK0kE,MAAM4B,gBAGvCjC,EAAJpjE,UAAA8iE,SAAI,SAASF,GACL7jE,KAAKsJ,YAAY5G,cAAckX,OACvC,IAAckqD,GAAMC,GAAS/jE,KAAK0kE,MAAM4B,cAAetmE,KAAK8rB,IAAK9rB,KAAK6kB,IAAKg/C,EACnE7jE,MAAK0kE,MAAM1hE,MAAgB,OAAR8gE,EAAe,GAAKA,EAAIt3C,WAC3CxsB,KAAKskE,OAAOiC,OAAOlhE,KAAKrF,KAAK0kE,MAAM4B,gBAG/BjC,EAAZpjE,UAAA4jE,kBAAI,SAA0B7hE,GACtB,MAAOA,GAAQA,EAAMwjE,QAAQ,KAAM,KAAOxjE,GAGtCqhE,EAAZpjE,UAAAujE,QAAI,SAAgBxhE,GACZ,MAAOhD,MAAKymE,QAAQzjE,IAAUhD,KAAK0mE,MAAM1jE,IAGrCqhE,EAAZpjE,UAAAwlE,QAAI,SAAgBzjE,GACZ,MAAO,eAAe2jE,KAAK3jE,IAGvBqhE,EAAZpjE,UAAAylE,MAAI,SAAc1jE,GACV,MAAO,UAAU2jE,KAAK3jE,mBArL9ByD,KAACC,EAAAA,UAADC,OACIC,SAAU,gCACVC,SAAU,mBACVgC,WAAY+9D,EAAAA,SAAW9rD,QAAS+rD,GAA0B7rD,YAAaqpD,IACvEv9D,MACIygB,SAAU,uBACVD,UAAW,sBACXqN,UAAW,kBACX5tB,YAAa,6DAnDrBN,KAAiC00C,EAAAA,WAdjC10C,KAAwBS,EAAAA,aAMxBT,KAAYmgE,EAAAA,UA4GZngE,KAAAgV,OAAAlU,aAAAd,KAASiV,EAAAA,UAAT/U,MAAmB,YACnBF,KAAAgV,OAAAlU,aAAAd,KAASiV,EAAAA,UAAT/U,MAAmB,gBACnBF,KAAAgV,OAAAlU,aAAAd,KAASiV,EAAAA,UAAT/U,MAAmB,WACnBF,KAAAgV,OAAAlU,aAAAd,KAASiV,EAAAA,UAAT/U,MAAmB,8BA3CnB49D,UAAA99D,KAAKqB,EAAAA,QAOL+7D,OAAAp9D,KAAKqB,EAAAA,QAGL+c,MAAApe,KAAKqB,EAAAA,QAGLgkB,MAAArlB,KAAKqB,EAAAA,SAyJLu8D,KAEAyC,GAAA,SAAAp9D,GAsJI,QAAJo9D,GAA0Bx9D,EACiBwX,EACfiJ,EACAC,EACZF,EACqDM,GALjE,GAAJ9qB,GAMQoK,EANRG,KAAA7J,KAMc8pB,EAA0BC,EAAYC,EAAiBlJ,IANrE9gB,WAA0BV,GAA1BgK,YAA0BA,EACiBhK,EAA3CwhB,UAA2CA,EA5HvCxhB,EAAJgrB,SAAuB,EAMVhrB,EAAbwjB,aAA2C,GAAIpV,GAAAA,QAM3CpO,EAAJirB,YAA0B,WA8FZjrB,EAAdynE,KAAqB,YAAYxuD,KAEnBjZ,EAAd8U,WAA0B,EAEZ9U,EAAdmrB,WAA0B,EACZnrB,EAAd0nE,MAAsB,OACR1nE,EAAd2nE,uBACQ,OACA,WACA,iBACA,QACA,OACA,QACFn5D,OAAO,SAACo5D,GAAM,MAAAC,GAAAA,yBAAyB1gC,IAAIygC,KAazC5nE,EAAK8nE,oBAAsBh9C,GAAsB9qB,EAAKgK,YAAY5G,cAElEpD,EAAK+nE,qBAAuB/nE,EAAK0D,MAGjC1D,EAAKsO,GAAKtO,EAAKsO,KA6FvB,MAhP6B5D,GAA7B88D,EAAAp9D,GA4BIpI,OAAJ2I,eACQ68D,EADR7lE,UAAA,gBAAI,WAEI,MAAIjB,MAAK8gB,WAAyC,OAA5B9gB,KAAK8gB,UAAUpc,SAC1B1E,KAAK8gB,UAAUpc,SAGnB1E,KAAKoU,eAGhB,SAAapR,GACThD,KAAKoU,UAAYM,EAAAA,sBAAsB1R,GAInChD,KAAKsqB,UACLtqB,KAAKsqB,SAAU,EACftqB,KAAK8iB,aAAahf,yCAQ1BxC,OAAJ2I,eACQ68D,EADR7lE,UAAA,UAAI,WAEI,MAAOjB,MAAKorB,SAGhB,SAAOpoB,GACHhD,KAAKorB,IAAMpoB,GAAShD,KAAK+mE,sCAa7BzlE,OAAJ2I,eACQ68D,EADR7lE,UAAA,gBAAI,WAEI,MAAOjB,MAAKyqB,eAGhB,SAAaznB,GACThD,KAAKyqB,UAAY/V,EAAAA,sBAAsB1R,oCAK3C1B,OAAJ2I,eACQ68D,EADR7lE,UAAA,YAAI,WAEI,MAAOjB,MAAKgnE,WAGhB,SAAShkE,GACLhD,KAAKgnE,MAAQhkE,GAAS,OACtBhD,KAAKsnE,gBAKDH,EAAAA,yBAAyB1gC,IAAIzmC,KAAKgnE,SAClChnE,KAAKsJ,YAAY5G,cAAc+D,KAAOzG,KAAKgnE,wCASnD1lE,OAAJ2I,eACQ68D,EADR7lE,UAAA,aAAI,WAEI,MAAOjB,MAAKonE,oBAAoBpkE,WAGpC,SAAUA,GACFA,IAAUhD,KAAKgD,QACfhD,KAAKonE,oBAAoBpkE,MAAQA,EACjChD,KAAK8iB,aAAahf,yCAsC1BgjE,EAAJ7lE,UAAAiS,YAAI,WACIlT,KAAK8iB,aAAahf,QAGtBgjE,EAAJ7lE,UAAAmC,YAAI,WACIpD,KAAK8iB,aAAa/e,YAGtB+iE,EAAJ7lE,UAAAsqB,UAAI,WACQvrB,KAAK8gB,WAIL9gB,KAAKwrB,mBAMTxrB,KAAKunE,0BAITT,EAAJ7lE,UAAA2Y,MAAI,WACI5Z,KAAKsJ,YAAY5G,cAAckX,SAInCktD,EAAJ7lE,UAAA6jE,cAAI,SAAc74C,GACNA,IAAcjsB,KAAKsqB,UACnBtqB,KAAKsqB,QAAU2B,EACfjsB,KAAK8iB,aAAahf,SAI1BgjE,EAAJ7lE,UAAAumE,SAAI,aAcAlmE,OAAJ2I,eAAQ68D,EAAR7lE,UAAA,aAAI,WACI,OAAQjB,KAAKynE,kBAAoBznE,KAAKsJ,YAAY5G,cAAcM,QAAUhD,KAAK0nE,+CAOnFZ,EAAJ7lE,UAAAkrB,iBAAI,WACInsB,KAAK4Z,SAICktD,EAAd7lE,UAAAsmE,uBAAI,WACJ,GAAcn7C,GAAWpsB,KAAKgD,KAElBhD,MAAKqnE,uBAAyBj7C,IAC9BpsB,KAAKqnE,qBAAuBj7C,EAC5BpsB,KAAK8iB,aAAahf,SAKhBgjE,EAAd7lE,UAAAqmE,cAAI,WACI,GAAItD,GAAuBvxD,QAAQzS,KAAKgnE,QAAU,EAC9C,KAAMW,GAA+B3nE,KAAKgnE,QAKxCF,EAAd7lE,UAAAwmE,cAAI,WACI,MAAOznE,MAAKinE,sBAAsBx0D,QAAQzS,KAAKgnE,QAAU,GAInDF,EAAd7lE,UAAAymE,YAAI,WAEJ,GAAcr7C,GAAYrsB,KAAKsJ,YAAyB,cAAsB+iB,QAEtE,OAAOA,IAAYA,EAASC,yBA/PpC7lB,KAACC,EAAAA,UAADC,OACIC,SAAU,iBACVC,SAAU,UACVC,MACImC,MAAO,WAGPyD,YAAa,KACbggB,qBAAsB,cACtBE,aAAc,WACdC,aAAc,WACdtF,SAAU,uBACVD,UAAW,sBACXoN,UAAW,cAEf7rB,YAAciS,QAAS8M,GAAoB5M,YAAa8rD,4CAjQ5DrgE,KAAwBS,EAAAA,aAKxBT,KAAI0hB,EAAAA,UAAJ5gB,aAAAd,KAoYiBkB,EAAAA,WApYjBlB,KAoY6BsE,EAAAA,SAnY7BtE,KAAIuhB,EAAAA,OAAJzgB,aAAAd,KAoYiBkB,EAAAA,aAtYjBlB,KAAIwhB,EAAAA,mBAAJ1gB,aAAAd,KAuYiBkB,EAAAA,aAzXjBlB,KAAIshB,KA2XJthB,SAAAa,GAAAC,aAAAd,KAAiBkB,EAAAA,WAAjBlB,KAA6BsE,EAAAA,OAA7BtE,KAAqCe,EAAAA,OAArCb,MAA4CmuB,2BAtI5C9L,oBAAAviB,KAAKqB,EAAAA,QAwBLpD,WAAA+B,KAAKqB,EAAAA,QAwBL8F,KAAAnH,KAAKqB,EAAAA,QAaLmhB,cAAAxiB,KAAKqB,EAAAA,QAMLohB,WAAAziB,KAAKqB,EAAAA,QAWLrB,OAAAA,KAAKqB,EAAAA,QAsBL9E,QAAAyD,KAAKqB,EAAAA,SAwILg/D,GAhP6B1C,IAkP7BwD,GAAA,WAAA,QAAAA,MAMA,sBANAnhE,KAACC,EAAAA,UAADC,OACIC,SAAU,0BACVC,SAAU,mBACVC,MAAQmC,MAAO,0BAGnB2+D,KCzfaC,IACT/sD,QAAS8Z,EAAAA,cACT5Z,YAAaC,EAAAA,WAAW,WAAM,MAAA6sD,MAC9B5sD,OAAO,GASX4sD,GAAA,WAAA,QAAAA,MAuBA,MAZIA,GAAJ7mE,UAAAiS,YAAI,SAAYC,GACJ,OAASA,KACTnT,KAAK+nE,mBACD/nE,KAAK+4B,WAAa/4B,KAAK+4B,cAInC+uC,EAAJ7mE,UAAAqtB,SAAI,SAASN,GAA+C,MAAOhuB,MAAKgoE,WAAWh6C,IAE/E85C,EAAJ7mE,UAAAwtB,0BAAI,SAA0BhU,GAAwBza,KAAK+4B,UAAYte,GAE3DqtD,EAAZ7mE,UAAA8mE,iBAAI,WAAmC/nE,KAAKgoE,WAAal5C,EAAAA,WAAWjK,IAAI/hB,SAAS9C,KAAK6kB,IAAK,qBAtB3Fpe,KAACC,EAAAA,UAADC,OACIC,SAAU,2DACViC,WAAYg/D,IACZ/gE,MAAOwjD,aAAc,0CAIzBzlC,MAAApe,KAAKqB,EAAAA,SAgBLggE,KAGaG,IACTntD,QAAS8Z,EAAAA,cACT5Z,YAAaC,EAAAA,WAAW,WAAM,MAAAitD,MAC9BhtD,OAAO,GASXgtD,GAAA,WAAA,QAAAA,MA0BA,MAZIA,GAAJjnE,UAAAiS,YAAI,SAAYC,GACJ,OAASA,KACTnT,KAAK+nE,mBACD/nE,KAAK+4B,WAAa/4B,KAAK+4B,cAInCmvC,EAAJjnE,UAAAqtB,SAAI,SAASN,GAA+C,MAAOhuB,MAAKgoE,WAAWh6C,IAE/Ek6C,EAAJjnE,UAAAwtB,0BAAI,SAA0BhU,GAAwBza,KAAK+4B,UAAYte,GAE3DytD,EAAZjnE,UAAA8mE,iBAAI,WAAmC/nE,KAAKgoE,WAAal5C,EAAAA,WAAWhD,IAAIhpB,SAAS9C,KAAK8rB,IAAK,qBAzB3FrlB,KAACC,EAAAA,UAADC,OACIC,SAAU,2DACViC,WAAYo/D,IACZnhE,MACIyjD,aAAc,0CAMtBz+B,MAAArlB,KAAKqB,EAAAA,SAgBLogE,KCtEAC,GAAA,WAAA,QAAAA,MAMA,sBANA1hE,KAAC8B,EAAAA,SAAD5B,OACI+B,SAAUC,EAAAA,aAAcgD,EAAAA,WAAYqI,GAAgB+Y,EAAAA,aACpDtkB,SAAUq+D,GAASzC,GAAeuD,GAAaE,GAAcI,IAC7D1/D,cAAes+D,GAASzC,GAAeuD,GAAaE,GAAcI,QAGtEC,KCXAxc,GAAA,WAAA,QAAAA,KAMa3rD,KAAbmT,QAAsC,GAAIzF,GAAAA,QAGtC1N,KAAJooE,cAA4B,WAGxBpoE,KAAJqoE,kBAAgC,gBAG5BroE,KAAJk8D,eAA6B,iBAGzBl8D,KAAJs8D,eAA6B,aAGzBt8D,KAAJm8D,cAA4B,gBAGxBn8D,KAAJu8D,cAA4B,YAGxBv8D,KAAJq8D,mBAAiC,oBAG7Br8D,KAAJw8D,mBAAiC,gBAG7Bx8D,KAAJi8D,uBAAqC,cAGjCj8D,KAAJg8D,2BAAyC,wBAzCzC,sBAKAv1D,KAACkM,EAAAA,WAADhM,OAAcmpD,WAAY,8GAL1BnE,mBC0BI,QAAJ4M,GACev1D,EACAslE,EACAnvD,EACAovD,EACAhtB,GAJAv7C,KAAfgD,MAAeA,EACAhD,KAAfsoE,aAAeA,EACAtoE,KAAfmZ,UAAeA,EACAnZ,KAAfuoE,QAAeA,EACAvoE,KAAfu7C,WAAeA,EAGf,MAAAgd,MAOAxM,GAAA,WAqDI,QAAJA,GAAwBroD,EAA6C7D,GAA7CG,KAAxB0D,WAAwBA,EAA6C1D,KAArEH,OAAqEA,EAvBxDG,KAAbwoE,QAAuB,EAGVxoE,KAAbyoE,WAA0B,EAMbzoE,KAAb0oE,gBAA+B,EAGR1oE,KAAvB2oE,oBAAmE,GAAInvD,GAAAA,aA8DvE,MAhDIuyC,GAAJ9qD,UAAA2nE,YAAI,SAAYC,GACJA,EAAKN,SACLvoE,KAAK2oE,oBAAoBtjE,KAAKwjE,EAAK7lE,QAI3C+oD,EAAJ9qD,UAAAiS,YAAI,SAAYC,GAChB,GAAc21D,GAAgB31D,EAAQq1D,QAExBtiE,EAAdlG,KAAgB+oE,EAAhB7iE,EAAA6iE,KAAsBP,EAAtBtiE,EAAAsiE,SAEYr1D,EAAQ41D,MAAQD,KAChB9oE,KAAKgpE,eAAiBD,GAAQA,EAAK33D,QAAU23D,EAAK,GAAG33D,OAASo3D,EAAUO,EAAK,GAAG33D,OAAS,IAGzF+B,EAAQu1D,iBAAmBI,IAAkB9oE,KAAKipE,eAClDjpE,KAAKipE,YAAwC,GAAvBjpE,KAAK0oE,gBAAuBF,EAA9D,MAGYM,GAAkB9oE,KAAKkpE,YACvBlpE,KAAKkpE,UAAe,IAAMV,EAAtC,MAIIzc,EAAJ9qD,UAAAkoE,aAAI,SAAaC,EAAkBC,GACnC,GAAYC,GAAaF,EAAWppE,KAAKwoE,QAAUa,CAO3C,OAJID,KACAE,GAActpE,KAAKgpE,gBAGhBM,IAAetpE,KAAKyoE,YAI/B1c,EAAJ9qD,UAAA62D,gBAAI,WAAA,GAAJx4D,GAAAU,IACQA,MAAKH,OAAOoW,kBAAkB,WAC1B3W,EAAKO,OAAO64B,SAAS1pB,eAAerO,KAAKwN,EAAAA,KAAK,IAAIrN,UAAU,WACxE,GAAsB2nE,GACFnpE,EAAKoE,WAAWhB,cAAc84B,cAAc,4BAE5CitC,IACAA,EAAW7uD,4BAnG/BnT,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,qBACVwC,SAAJ,0xCACIqB,QAAS,kgCACT3D,MACImC,MAAO,oBACPuD,KAAM,OACN+8D,gBAAiB,QAErB1iE,SAAU,iBACVsD,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,+CAhD7C/D,KAAIS,EAAAA,aAKJT,KAAIU,EAAAA,4BA+CJ20D,QAAAr1D,KAAKqB,EAAAA,QAGLihE,OAAAtiE,KAAKqB,EAAAA,QAGL0hE,aAAA/iE,KAAKqB,EAAAA,QAGL2hE,gBAAAhjE,KAAKqB,EAAAA,QAGL4hE,wBAAAjjE,KAAKqB,EAAAA,QAGL0gE,UAAA/hE,KAAKqB,EAAAA,QAGL2gE,aAAAhiE,KAAKqB,EAAAA,QAML4gE,kBAAAjiE,KAAKqB,EAAAA,QAGL6gE,sBAAAliE,KAAKmB,EAAAA,UA8DLmkD,KCzGAG,GAAA,WAqGI,QAAJA,GACgB1qC,EACqCmoC,EAC1BF,EACCrsB,GAGpB,GANQp9B,KAAhBwhB,kBAAgBA,EACqCxhB,KAArD2pD,YAAqDA,EAC1B3pD,KAA3BypD,YAA2BA,EACCzpD,KAA5Bo9B,IAA4BA,EAxCLp9B,KAAvB+4D,eAAgE,GAAIv/C,GAAAA,aAG7CxZ,KAAvBk9D,cAA2D,GAAI1jD,GAAAA,aAGxCxZ,KAAvB63D,iBAA2D,GAAIr+C,GAAAA,cAqClDxZ,KAAKypD,YACN,KAAMyP,GAA2B,cAGrC,KAAKl5D,KAAK2pD,YACN,KAAMuP,GAA2B,kBAG7C,IAAcyQ,GAAiB3pE,KAAKypD,YAAYmgB,oBAClCC,EAAiB7pE,KAAKypD,YAAYqgB,kBAAkB,UACpDC,EAAe/pE,KAAKypD,YAAYqgB,kBAAkB,QAGlDE,EAAWD,EAAaxmD,IAAI,SAAC0mD,EAAM98B,GACrC,OAAS88B,KAArBA,EAA2BC,OAAQL,EAAe18B,KAE1CntC,MAAKgqE,SAAWA,EAAS33D,MAAMs3D,GAAgBpE,OAAOyE,EAAS33D,MAAM,EAAGs3D,IAExE3pE,KAAKm5D,YAAcn5D,KAAKypD,YAAY2P,QAyK5C,MA5RI93D,QAAJ2I,eACQiiD,EADRjrD,UAAA,kBAAI,WAEI,MAAOjB,MAAKm5D,iBAGhB,SAAen2D,GACnB,GAAc20D,GAAgB33D,KAAKm5D,YACrBE,EACFr5D,KAAK8pD,mBAAmB9pD,KAAKypD,YAAY6P,YAAYt2D,KAAWhD,KAAKypD,YAAY2P,OACrFp5D,MAAKm5D,YAAcn5D,KAAKypD,YAAY8P,UAAUF,EAAWr5D,KAAK04D,QAAS14D,KAAKy4D,SAEvEz4D,KAAKmqE,oBAAoBxS,EAAe33D,KAAKm5D,cAC9Cn5D,KAAKw5D,wCAKbl4D,OAAJ2I,eACQiiD,EADRjrD,UAAA,gBAAI,WAEI,MAAOjB,MAAK2gC,eAGhB,SAAa39B,GACThD,KAAK2gC,UAAY3gC,KAAK8pD,mBAAmB9pD,KAAKypD,YAAY6P,YAAYt2D,IACtEhD,KAAKoqE,aAAepqE,KAAKqqE,sBAAsBrqE,KAAK2gC,4CAIxDr/B,OAAJ2I,eACQiiD,EADRjrD,UAAA,eAAI,WAEI,MAAOjB,MAAK25D,cAGhB,SAAY32D,GACRhD,KAAK25D,SAAW35D,KAAK8pD,mBAAmB9pD,KAAKypD,YAAY6P,YAAYt2D,qCAIzE1B,OAAJ2I,eACQiiD,EADRjrD,UAAA,eAAI,WAEI,MAAOjB,MAAK45D,cAGhB,SAAY52D,GACRhD,KAAK45D,SAAW55D,KAAK8pD,mBAAmB9pD,KAAKypD,YAAY6P,YAAYt2D,qCA0EzEkpD,EAAJjrD,UAAAu4B,mBAAI,WACIx5B,KAAKw5D,QAITtN,EAAJjrD,UAAAg9D,aAAI,SAAapF,GACT,GAAI74D,KAAKoqE,eAAiBvR,EAAM,CACxC,GAAkByR,GAAetqE,KAAKypD,YAAYuO,QAAQh4D,KAAK43D,YAC7C6B,EAAgBz5D,KAAKypD,YAAY4Q,SAASr6D,KAAK43D,YAC/CwS,EAAepqE,KAAKypD,YAAY6O,WAAWgS,EAAc7Q,EAAeZ,EAE9E74D,MAAK+4D,eAAe1zD,KAAK+kE,GAG7BpqE,KAAKk9D,cAAc73D,QAIvB6mD,EAAJjrD,UAAAk5D,0BAAI,SAA0B12D,GAK9B,GAAck0D,GAAgB33D,KAAKm5D,YACrBtzC,EAAQ7lB,KAAK6lB,OAGnB,QAAQpiB,EAAMU,SACV,IAAKkb,GAAAA,WACDrf,KAAK43D,WAAa53D,KAAKypD,YAAYqP,gBAAgB94D,KAAKm5D,YAAatzC,EAAQ,GAAK,EAClF,MACJ,KAAKvG,GAAAA,YACDtf,KAAK43D,WAAa53D,KAAKypD,YAAYqP,gBAAgB94D,KAAKm5D,YAAatzC,GAAS,EAAI,EAClF,MACJ,KAAKzG,GAAAA,SACDpf,KAAK43D,WAAa53D,KAAKypD,YAAYqP,gBAAgB94D,KAAKm5D,aAAc,EACtE,MACJ,KAAKh6C,GAAAA,WACDnf,KAAK43D,WAAa53D,KAAKypD,YAAYqP,gBAAgB94D,KAAKm5D,YAAa,EACrE,MACJ,KAAK35C,GAAAA,KACDxf,KAAK43D,WAAa53D,KAAKypD,YAAYqP,gBAAgB94D,KAAKm5D,YACpD,EAAIn5D,KAAKypD,YAAYyQ,QAAQl6D,KAAKm5D,aACtC,MACJ,KAAK15C,GAAAA,IACDzf,KAAK43D,WAAa53D,KAAKypD,YAAYqP,gBAAgB94D,KAAKm5D,YACnDn5D,KAAKypD,YAAYwQ,kBAAkBj6D,KAAKm5D,aACrCn5D,KAAKypD,YAAYyQ,QAAQl6D,KAAKm5D,aACtC,MACJ,KAAKnvB,GAAAA,QACDhqC,KAAK43D,WAAan0D,EAAMkb,OACpB3e,KAAKypD,YAAY6Q,iBAAiBt6D,KAAKm5D,aAAc,GACrDn5D,KAAKypD,YAAY2Q,kBAAkBp6D,KAAKm5D,aAAc,EAC1D,MACJ,KAAKjvB,GAAAA,UACDlqC,KAAK43D,WAAan0D,EAAMkb,OACpB3e,KAAKypD,YAAY6Q,iBAAiBt6D,KAAKm5D,YAAa,GACpDn5D,KAAKypD,YAAY2Q,kBAAkBp6D,KAAKm5D,YAAa,EACzD,MACJ,KAAK36C,GAAAA,MACL,IAAKC,GAAAA,MAQD,YAPKze,KAAK24D,aAAc34D,KAAK24D,WAAW34D,KAAKm5D,eACzCn5D,KAAKi+D,aAAaj+D,KAAKypD,YAAYyQ,QAAQl6D,KAAKm5D,cAChDn5D,KAAKk9D,cAAc73D,OAEnB5B,EAAMob,kBAId,SAEI,OAGJ7e,KAAKypD,YAAYiO,YAAYC,EAAe33D,KAAK43D,aACjD53D,KAAK63D,iBAAiBxyD,KAAKrF,KAAK43D,YAGpC53D,KAAK83D,kBAELr0D,EAAMob,kBAIVqtC,EAAJjrD,UAAAu4D,KAAI,WACIx5D,KAAKoqE,aAAepqE,KAAKqqE,sBAAsBrqE,KAAKkgB,UACpDlgB,KAAKuqE,UAAYvqE,KAAKqqE,sBAAsBrqE,KAAKypD,YAAY2P,SAC7Dp5D,KAAKwqE,WACDxqE,KAAKypD,YAAYiR,cAAc,SAAS16D,KAAKypD,YAAY4Q,SAASr6D,KAAK43D,aAE3E53D,KAAKwqE,WAAaxqE,KAAKwqE,WAAW,GAAGvP,oBAAsBj7D,KAAKwqE,WAAWtP,OAAO,EAE1F,IAAcK,GAAev7D,KAAKypD,YAAY6O,WAAWt4D,KAAKypD,YAAYuO,QAAQh4D,KAAK43D,YAC3E53D,KAAKypD,YAAY4Q,SAASr6D,KAAK43D,YAAa,EAChD53D,MAAKyqE,iBAtOS,EAuOOzqE,KAAKypD,YAAYihB,aAAanP,GAC3Cv7D,KAAKypD,YAAYmgB,qBAxOX,EA0Od5pE,KAAK2qE,kBACL3qE,KAAKwhB,kBAAkBtf,gBAI3BgqD,EAAJjrD,UAAA62D,gBAAI,WACI93D,KAAKi4D,eAAeH,mBAIhB5L,EAAZjrD,UAAA0pE,gBAAI,WACJ,GAAc3Q,GAAch6D,KAAKypD,YAAYwQ,kBAAkBj6D,KAAK43D,YACtDgT,EAAY5qE,KAAKypD,YAAYohB,cAEnC7qE,MAAK8qE,UAEL,KAAK,GAAI39B,GAAI,EAAG07B,EAAO7oE,KAAKyqE,gBAAiBt9B,EAAI6sB,EAAa7sB,IAAK07B,IAAQ,CA1P7D,IA2PNA,IACA7oE,KAAK8qE,MAAMp6D,SACXm4D,EAAO,EAEvB,IAAkBhQ,GAAO74D,KAAKypD,YAAY6O,WAC1Bt4D,KAAKypD,YAAYuO,QAAQh4D,KAAK43D,YAC9B53D,KAAKypD,YAAY4Q,SAASr6D,KAAK43D,YAAazqB,EAAI,GAC9Co7B,EAAUvoE,KAAK+qE,iBAAiBlS,GAChC1/C,EAAYnZ,KAAKypD,YAAYC,OAAOmP,EAAM74D,KAAK2pD,YAAYC,QAAQohB,eACnEC,EAAcjrE,KAAKy+D,UAAYz+D,KAAKy+D,UAAU5F,OAAQvxD,EAE5DtH,MAAK8qE,MAAM9qE,KAAK8qE,MAAM15D,OAAS,GAC1BV,KAAK,GAAI6nD,IAAeprB,EAAI,EAAGy9B,EAAUz9B,GAAIh0B,EAAWovD,EAAS0C,MAKtE/e,EAAZjrD,UAAA8pE,iBAAI,SAAyBlS,GACrB,QAASA,KACH74D,KAAK24D,YAAc34D,KAAK24D,WAAWE,OACnC74D,KAAK04D,SAAW14D,KAAKypD,YAAYiO,YAAYmB,EAAM74D,KAAK04D,UAAY,MACpE14D,KAAKy4D,SAAWz4D,KAAKypD,YAAYiO,YAAYmB,EAAM74D,KAAKy4D,UAAY,IAOtEvM,EAAZjrD,UAAAopE,sBAAI,SAA8BxR,GAC1B,MAAOA,IAAQ74D,KAAKmqE,oBAAoBtR,EAAM74D,KAAK43D,YAC/C53D,KAAKypD,YAAYyQ,QAAQrB,GAAQ,MAIjC3M,EAAZjrD,UAAAkpE,oBAAI,SAA4Be,EAAcC,GACtC,SAAUD,IAAMC,GAAMnrE,KAAKypD,YAAY4Q,SAAS6Q,KAAQlrE,KAAKypD,YAAY4Q,SAAS8Q,IAC9EnrE,KAAKypD,YAAYuO,QAAQkT,KAAQlrE,KAAKypD,YAAYuO,QAAQmT,KAO1Djf,EAAZjrD,UAAA6oD,mBAAI,SAA2BC,GACvB,MAAQ/pD,MAAKypD,YAAYO,eAAeD,IAAQ/pD,KAAKypD,YAAYQ,QAAQF,GAAQA,EAAM,MAInFmC,EAAZjrD,UAAA4kB,MAAI,WACI,MAAO7lB,MAAKo9B,KAA0B,QAAnBp9B,KAAKo9B,IAAIp6B,sBArSpCyD,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,gBACVwC,SAAJ,yjBACIvC,SAAU,cACVsD,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,+CAzC7C/D,KAAI+E,EAAAA,oBA2IJ/E,SAAAa,GAAAC,aAAAd,KAASkB,EAAAA,WAATlB,KAAqBe,EAAAA,OAArBb,MAA4B+jD,EAAAA,qBAhI5BjkD,KAASgkD,EAAAA,YAATljD,aAAAd,KAiISkB,EAAAA,aAlITlB,KAASiB,EAAAA,eAATH,aAAAd,KAmISkB,EAAAA,gCA9FTiwD,aAAAnxD,KAAKqB,EAAAA,QAiBLoY,WAAAzZ,KAAKqB,EAAAA,QAWL4wD,UAAAjyD,KAAKqB,EAAAA,QAUL2wD,UAAAhyD,KAAKqB,EAAAA,QAUL6wD,aAAAlyD,KAAKqB,EAAAA,QAGL22D,YAAAh4D,KAAKqB,EAAAA,QAGLixD,iBAAAtyD,KAAKmB,EAAAA,SAGLs1D,gBAAAz2D,KAAKmB,EAAAA,SAGLiwD,mBAAApxD,KAAKmB,EAAAA,SAGLqwD,iBAAAxxD,KAAKyG,EAAAA,UAALvG,MAAeolD,OA6NfG,KlBtSAE,GAAA,WAqFI,QAAJA,GACgB5qC,EACWioC,EACCrsB,GAEpB,GAJQp9B,KAAhBwhB,kBAAgBA,EACWxhB,KAA3BypD,YAA2BA,EACCzpD,KAA5Bo9B,IAA4BA,EA3BLp9B,KAAvB+4D,eAAyD,GAAIv/C,GAAAA,aAGtCxZ,KAAvBg5D,aAAuD,GAAIx/C,GAAAA,aAGpCxZ,KAAvB63D,iBAA2D,GAAIr+C,GAAAA,cAuBlDxZ,KAAKypD,YACN,KAAMyP,GAA2B,cAGrCl5D,MAAKm5D,YAAcn5D,KAAKypD,YAAY2P,QAmJ5C,MAxOI93D,QAAJ2I,eACQmiD,EADRnrD,UAAA,kBAAI,WAEI,MAAOjB,MAAKm5D,iBAGhB,SAAen2D,GACnB,GAAc20D,GAAgB33D,KAAKm5D,YACrBE,EACFr5D,KAAK8pD,mBAAmB9pD,KAAKypD,YAAY6P,YAAYt2D,KAAWhD,KAAKypD,YAAY2P,OACrFp5D,MAAKm5D,YAAcn5D,KAAKypD,YAAY8P,UAAUF,EAAWr5D,KAAK04D,QAAS14D,KAAKy4D,SAExE7zC,KAAK0lB,MAAMtqC,KAAKypD,YAAYuO,QAAQL,GA7BpB,MA8BhB/yC,KAAK0lB,MAAMtqC,KAAKypD,YAAYuO,QAAQh4D,KAAKm5D,aA9BzB,KA+BhBn5D,KAAKw5D,wCAKbl4D,OAAJ2I,eACQmiD,EADRnrD,UAAA,gBAAI,WAEI,MAAOjB,MAAK2gC,eAGhB,SAAa39B,GACThD,KAAK2gC,UAAY3gC,KAAK8pD,mBAAmB9pD,KAAKypD,YAAY6P,YAAYt2D,IACtEhD,KAAKsqE,aAAetqE,KAAK2gC,WAAa3gC,KAAKypD,YAAYuO,QAAQh4D,KAAK2gC,4CAIxEr/B,OAAJ2I,eACQmiD,EADRnrD,UAAA,eAAI,WAEI,MAAOjB,MAAK25D,cAGhB,SAAY32D,GACRhD,KAAK25D,SAAW35D,KAAK8pD,mBAAmB9pD,KAAKypD,YAAY6P,YAAYt2D,qCAIzE1B,OAAJ2I,eACQmiD,EADRnrD,UAAA,eAAI,WAEI,MAAOjB,MAAK45D,cAGhB,SAAY52D,GACRhD,KAAK45D,SAAW55D,KAAK8pD,mBAAmB9pD,KAAKypD,YAAY6P,YAAYt2D,qCA2CzEopD,EAAJnrD,UAAAu4B,mBAAI,WACIx5B,KAAKw5D,QAITpN,EAAJnrD,UAAAu4D,KAAI,WAAA,GAAJl6D,GAAAU,IACQA,MAAKorE,UAAYprE,KAAKypD,YAAYuO,QAAQh4D,KAAKypD,YAAY2P,QACnE,IAAcgC,GAAap7D,KAAKypD,YAAYuO,QAAQh4D,KAAKm5D,aAC3CkS,EAAejQ,EAlHD,EAmHpBp7D,MAAKsrE,QACL,KAAK,GAAIn+B,GAAI,EAAGytB,KAAoBztB,EApHhB,GAoHkCA,IAClDytB,EAAIlqD,KAAK0qD,EAAaiQ,EAAel+B,GAnHtB,IAoHXytB,EAAIxpD,SACJpR,KAAKsrE,MAAM56D,KAAKkqD,EAAIr3C,IAAI,SAAC40C,GAAS,MAAA74D,GAAK44D,kBAAkBC,MACzDyC,KAGR56D,MAAKwhB,kBAAkBtf,gBAI3BkqD,EAAJnrD,UAAAsqE,eAAI,SAAepT,GACXn4D,KAAKg5D,aAAa3zD,KAAKrF,KAAKypD,YAAY6O,WAAWH,EAAM,EAAG,GACpE,IAAc2B,GAAQ95D,KAAKypD,YAAY4Q,SAASr6D,KAAK43D,YACvCoC,EACFh6D,KAAKypD,YAAYwQ,kBAAkBj6D,KAAKypD,YAAY6O,WAAWH,EAAM2B,EAAO,GAChF95D,MAAK+4D,eAAe1zD,KAAKrF,KAAKypD,YAAY6O,WAAWH,EAAM2B,EACvDl1C,KAAKC,IAAI7kB,KAAKypD,YAAYyQ,QAAQl6D,KAAK43D,YAAaoC,MAI5D5N,EAAJnrD,UAAAk5D,0BAAI,SAA0B12D,GAK9B,GAAck0D,GAAgB33D,KAAKm5D,YACrBtzC,EAAQ7lB,KAAK6lB,OAGnB,QAAQpiB,EAAMU,SACV,IAAKkb,GAAAA,WACDrf,KAAK43D,WAAa53D,KAAKypD,YAAY6Q,iBAAiBt6D,KAAKm5D,YAAatzC,EAAQ,GAAK,EACnF,MACJ,KAAKvG,GAAAA,YACDtf,KAAK43D,WAAa53D,KAAKypD,YAAY6Q,iBAAiBt6D,KAAKm5D,YAAatzC,GAAS,EAAI,EACnF,MACJ,KAAKzG,GAAAA,SACDpf,KAAK43D,WAAa53D,KAAKypD,YAAY6Q,iBAAiBt6D,KAAKm5D,aAxJ9C,EAyJX,MACJ,KAAKh6C,GAAAA,WACDnf,KAAK43D,WAAa53D,KAAKypD,YAAY6Q,iBAAiBt6D,KAAKm5D,YA3J9C,EA4JX,MACJ,KAAK35C,GAAAA,KACDxf,KAAK43D,WAAa53D,KAAKypD,YAAY6Q,iBAAiBt6D,KAAKm5D,aACpDn5D,KAAKypD,YAAYuO,QAAQh4D,KAAKm5D,aAjKvB,GAkKZ,MACJ,KAAK15C,GAAAA,IACDzf,KAAK43D,WAAa53D,KAAKypD,YAAY6Q,iBAAiBt6D,KAAKm5D,YApK7C,GAqKOn5D,KAAKypD,YAAYuO,QAAQh4D,KAAKm5D,aArKrC,GAqKmE,EAC/E,MACJ,KAAKnvB,GAAAA,QACDhqC,KAAK43D,WACD53D,KAAKypD,YAAY6Q,iBACbt6D,KAAKm5D,YAAa11D,EAAMkb,QAAS,KA1K7B,GA2KZ,MACJ,KAAKurB,GAAAA,UACDlqC,KAAK43D,WACD53D,KAAKypD,YAAY6Q,iBACbt6D,KAAKm5D,YAAa11D,EAAMkb,OAAS6sD,IA/K7B,GAgLZ,MACJ,KAAKhtD,GAAAA,MACL,IAAKC,GAAAA,MACDze,KAAKurE,eAAevrE,KAAKypD,YAAYuO,QAAQh4D,KAAKm5D;+DAClD,MACJ,SAEI,OAGJn5D,KAAKypD,YAAYiO,YAAYC,EAAe33D,KAAK43D,aACjD53D,KAAK63D,iBAAiBxyD,KAAKrF,KAAK43D,YAGpC53D,KAAK83D,kBAELr0D,EAAMob,kBAGVutC,EAAJnrD,UAAA82D,cAAI,WACI,MAAO/3D,MAAKypD,YAAYuO,QAAQh4D,KAAK43D,YApMjB,IAwMxBxL,EAAJnrD,UAAA62D,gBAAI,WACI93D,KAAKi4D,eAAeH,mBAIhB1L,EAAZnrD,UAAAi3D,kBAAI,SAA0BC,GAC9B,GAAcC,GAAWp4D,KAAKypD,YAAY4O,YAAYr4D,KAAKypD,YAAY6O,WAAWH,EAAM,EAAG,GAEnF,OAAO,IAAII,IAAeJ,EAAMC,EAAUA,EAAUp4D,KAAKw4D,iBAAiBL,KAItE/L,EAAZnrD,UAAAu3D,iBAAI,SAAyBL,GAErB,OAAa7wD,KAAT6wD,GAA+B,OAATA,GACrBn4D,KAAKy4D,SAAWN,EAAOn4D,KAAKypD,YAAYuO,QAAQh4D,KAAKy4D,UACrDz4D,KAAK04D,SAAWP,EAAOn4D,KAAKypD,YAAYuO,QAAQh4D,KAAK04D,SACtD,OAAO,CAIX,KAAK14D,KAAK24D,WACN,OAAO,CAMX,KAAK,GAHCC,GAAc54D,KAAKypD,YAAY6O,WAAWH,EAAM,EAAG,GAGhDU,EAAOD,EAAa54D,KAAKypD,YAAYuO,QAAQa,KAAUV,EAC3DU,EAAO74D,KAAKypD,YAAYqP,gBAAgBD,EAAM,GAC/C,GAAI74D,KAAK24D,WAAWE,GAChB,OAAO,CAIf,QAAO,GAOHzM,EAAZnrD,UAAA6oD,mBAAI,SAA2BC,GACvB,MAAQ/pD,MAAKypD,YAAYO,eAAeD,IAAQ/pD,KAAKypD,YAAYQ,QAAQF,GAAQA,EAAM,MAInFqC,EAAZnrD,UAAA4kB,MAAI,WACI,MAAO7lB,MAAKo9B,KAA0B,QAAnBp9B,KAAKo9B,IAAIp6B,sBA/OpCyD,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,qBACVwC,SAAJ,ibACIvC,SAAU,kBACVsD,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,+CA1C7C/D,KAAI+E,EAAAA,oBAUJ/E,KAASgkD,EAAAA,YAATljD,aAAAd,KAkHSkB,EAAAA,aAnHTlB,KAASiB,EAAAA,eAATH,aAAAd,KAoHSkB,EAAAA,gCA/ETiwD,aAAAnxD,KAAKqB,EAAAA,QAkBLoY,WAAAzZ,KAAKqB,EAAAA,QAWL4wD,UAAAjyD,KAAKqB,EAAAA,QAUL2wD,UAAAhyD,KAAKqB,EAAAA,QAUL6wD,aAAAlyD,KAAKqB,EAAAA,QAGLixD,iBAAAtyD,KAAKmB,EAAAA,SAGLoxD,eAAAvyD,KAAKmB,EAAAA,SAGLiwD,mBAAApxD,KAAKmB,EAAAA,SAGLqwD,iBAAAxxD,KAAKyG,EAAAA,UAALvG,MAAeolD,OA2KfK,KCtPAD,GAAA,WA0FI,QAAJA,GACgB3qC,EACqCmoC,EAC1BF,EACCrsB,GAEpB,GALQp9B,KAAhBwhB,kBAAgBA,EACqCxhB,KAArD2pD,YAAqDA,EAC1B3pD,KAA3BypD,YAA2BA,EACCzpD,KAA5Bo9B,IAA4BA,EAlCLp9B,KAAvB+4D,eAAyD,GAAIv/C,GAAAA,aAGtCxZ,KAAvBi5D,cAAwD,GAAIz/C,GAAAA,aAGrCxZ,KAAvB63D,iBAA2D,GAAIr+C,GAAAA,cA8BlDxZ,KAAKypD,YACN,KAAMyP,GAA2B,cAGrC,KAAKl5D,KAAK2pD,YACN,KAAMuP,GAA2B,kBAGrCl5D,MAAKm5D,YAAcn5D,KAAKypD,YAAY2P,QAiM5C,MAhSI93D,QAAJ2I,eACQkiD,EADRlrD,UAAA,kBAAI,WAEI,MAAOjB,MAAKm5D,iBAGhB,SAAen2D,GACnB,GAAc20D,GAAgB33D,KAAKm5D,YACrBE,EACFr5D,KAAK8pD,mBAAmB9pD,KAAKypD,YAAY6P,YAAYt2D,KAAWhD,KAAKypD,YAAY2P,OACrFp5D,MAAKm5D,YAAcn5D,KAAKypD,YAAY8P,UAAUF,EAAWr5D,KAAK04D,QAAS14D,KAAKy4D,SAExEz4D,KAAKypD,YAAYuO,QAAQL,KAAmB33D,KAAKypD,YAAYuO,QAAQh4D,KAAKm5D,cAC1En5D,KAAKw5D,wCAKbl4D,OAAJ2I,eACQkiD,EADRlrD,UAAA,gBAAI,WAEI,MAAOjB,MAAK2gC,eAGhB,SAAa39B,GACThD,KAAK2gC,UAAY3gC,KAAK8pD,mBAAmB9pD,KAAKypD,YAAY6P,YAAYt2D,IACtEhD,KAAKy5D,cAAgBz5D,KAAK05D,sBAAsB15D,KAAK2gC,4CAIzDr/B,OAAJ2I,eACQkiD,EADRlrD,UAAA,eAAI,WAEI,MAAOjB,MAAK25D,cAGhB,SAAY32D,GACRhD,KAAK25D,SAAW35D,KAAK8pD,mBAAmB9pD,KAAKypD,YAAY6P,YAAYt2D,qCAIzE1B,OAAJ2I,eACQkiD,EADRlrD,UAAA,eAAI,WAEI,MAAOjB,MAAK45D,cAGhB,SAAY52D,GACRhD,KAAK45D,SAAW55D,KAAK8pD,mBAAmB9pD,KAAKypD,YAAY6P,YAAYt2D,qCAsDzEmpD,EAAJlrD,UAAAu4B,mBAAI,WACIx5B,KAAKw5D,QAITrN,EAAJlrD,UAAA44D,gBAAI,SAAgBC,GACpB,GAAcC,GACF/5D,KAAKypD,YAAY6O,WAAWt4D,KAAKypD,YAAYuO,QAAQh4D,KAAK43D,YAAakC,EAAO,EAElF95D,MAAKi5D,cAAc5zD,KAAK00D,EAEhC,IAAcC,GAAch6D,KAAKypD,YAAYwQ,kBAAkBF,EAEvD/5D,MAAK+4D,eAAe1zD,KAAKrF,KAAKypD,YAAY6O,WACtCt4D,KAAKypD,YAAYuO,QAAQh4D,KAAK43D,YAAakC,EAC3Cl1C,KAAKC,IAAI7kB,KAAKypD,YAAYyQ,QAAQl6D,KAAK43D,YAAaoC,MAI5D7N,EAAJlrD,UAAAk5D,0BAAI,SAA0B12D,GAK9B,GAAck0D,GAAgB33D,KAAKm5D,YACrBtzC,EAAQ7lB,KAAK6lB,OAOnB,QAAQpiB,EAAMU,SACV,IAAKkb,GAAAA,WACDrf,KAAK43D,WAAa53D,KAAKypD,YAAY2Q,kBAAkBp6D,KAAKm5D,YAAatzC,EAAQ,GAAK,EACpF,MACJ,KAAKvG,GAAAA,YACDtf,KAAK43D,WAAa53D,KAAKypD,YAAY2Q,kBAAkBp6D,KAAKm5D,YAAatzC,GAAS,EAAI,EACpF,MACJ,KAAKzG,GAAAA,SACDpf,KAAK43D,WAAa53D,KAAKypD,YAAY2Q,kBAAkBp6D,KAAKm5D,aAb3C,EAcf,MACJ,KAAKh6C,GAAAA,WACDnf,KAAK43D,WAAa53D,KAAKypD,YAAY2Q,kBAAkBp6D,KAAKm5D,YAhB3C,EAiBf,MACJ,KAAK35C,GAAAA,KACDxf,KAAK43D,WAAa53D,KAAKypD,YAAY2Q,kBAAkBp6D,KAAKm5D,aACrDn5D,KAAKypD,YAAY4Q,SAASr6D,KAAKm5D,aACpC,MACJ,KAAK15C,GAAAA,IACDzf,KAAK43D,WAAa53D,KAAKypD,YAAY2Q,kBAAkBp6D,KAAKm5D,YArB1C,GAsBMn5D,KAAKypD,YAAY4Q,SAASr6D,KAAKm5D,aACrD,MACJ,KAAKnvB,GAAAA,QACDhqC,KAAK43D,WACD53D,KAAKypD,YAAY6Q,iBAAiBt6D,KAAKm5D,YAAa11D,EAAMkb,QA3BnD,IA2B2E,EACtF,MACJ,KAAKurB,GAAAA,UACDlqC,KAAK43D,WACD53D,KAAKypD,YAAY6Q,iBAAiBt6D,KAAKm5D,YAAa11D,EAAMkb,OA/BnD,GA+ByE,EACpF,MACJ,KAAKH,GAAAA,MACL,IAAKC,GAAAA,MACDze,KAAK65D,gBAAgB75D,KAAKypD,YAAY4Q,SAASr6D,KAAKm5D,aACpD,MACJ,SAEI,OAGJn5D,KAAKypD,YAAYiO,YAAYC,EAAe33D,KAAK43D,aACjD53D,KAAK63D,iBAAiBxyD,KAAKrF,KAAK43D,YAGpC53D,KAAK83D,kBAELr0D,EAAMob,kBAIVstC,EAAJlrD,UAAAu4D,KAAI,WAAA,GAAJl6D,GAAAU,IACQA,MAAKy5D,cAAgBz5D,KAAK05D,sBAAsB15D,KAAKkgB,UACrDlgB,KAAKu6D,WAAav6D,KAAK05D,sBAAsB15D,KAAKypD,YAAY2P,SAC9Dp5D,KAAKw6D,UAAYx6D,KAAKypD,YAAY4O,YAAYr4D,KAAK43D,WAE3D,IAAc6C,GAAaz6D,KAAKypD,YAAYiR,cAAc,QAIlD16D,MAAK26D,SAAW,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,KAAKp3C,IAAI,SAACq3C,GAAQ,MAAAA,GAAIr3C,IACxE,SAACu2C,GAAU,MAAAx6D,GAAKu7D,mBAAmBf,EAAOW,EAAWX,QACzD95D,KAAKwhB,kBAAkBtf,gBAI3BiqD,EAAJlrD,UAAA62D,gBAAI,WACI93D,KAAKi4D,eAAeH,mBAOhB3L,EAAZlrD,UAAAy4D,sBAAI,SAA8Bb,GAC1B,MAAOA,IAAQ74D,KAAKypD,YAAYuO,QAAQa,KAAU74D,KAAKypD,YAAYuO,QAAQh4D,KAAK43D,YAC5E53D,KAAKypD,YAAY4Q,SAASxB,GAAQ,MAIlC1M,EAAZlrD,UAAA45D,mBAAI,SAA2Bf,EAAegB,GAC9C,GAAc3hD,GAAYnZ,KAAKypD,YAAYC,OAC/B1pD,KAAKypD,YAAY6O,WAAWt4D,KAAKypD,YAAYuO,QAAQh4D,KAAK43D,YAAakC,EAAO,GAC9E95D,KAAK2pD,YAAYC,QAAQmR,oBAEvBC,EAAeF,EAAU,GAAGG,oBAAsBH,EAAUI,OAAO,EAEzE,OAAO,IAAI3C,IACPuB,EAAOkB,EAAc7hD,EAAWnZ,KAAKm7D,kBAAkBrB,KAIvD3N,EAAZlrD,UAAAk6D,kBAAI,SAA0BrB,GAE9B,GAAcsB,GAAap7D,KAAKypD,YAAYuO,QAAQh4D,KAAK43D,WAEjD,QAActwD,KAAVwyD,GAAiC,OAAVA,GACvB95D,KAAKq7D,2BAA2BD,EAAYtB,IAC5C95D,KAAKs7D,4BAA4BF,EAAYtB,GAC7C,OAAO,CAGX,KAAK95D,KAAK24D,WACN,OAAO,CAMX,KAAK,GAHC4C,GAAev7D,KAAKypD,YAAY6O,WAAW8C,EAAYtB,EAAO,GAG3DjB,EAAO0C,EAAcv7D,KAAKypD,YAAY4Q,SAASxB,KAAUiB,EAC7DjB,EAAO74D,KAAKypD,YAAYqP,gBAAgBD,EAAM,GAC/C,GAAI74D,KAAK24D,WAAWE,GAChB,OAAO,CAIf,QAAO,GAOH1M,EAAZlrD,UAAAo6D,2BAAI,SAAmClD,EAAc2B,GAC7C,GAAI95D,KAAKy4D,QAAS,CAC1B,GAAkB+C,GAAUx7D,KAAKypD,YAAYuO,QAAQh4D,KAAKy4D,SACxCgD,EAAWz7D,KAAKypD,YAAY4Q,SAASr6D,KAAKy4D,QAEhD,OAAON,GAAOqD,GAAYrD,IAASqD,GAAW1B,EAAQ2B,EAG1D,OAAO,GAOHtP,EAAZlrD,UAAAq6D,4BAAI,SAAoCnD,EAAc2B,GAC9C,GAAI95D,KAAK04D,QAAS,CAC1B,GAAkBgD,GAAU17D,KAAKypD,YAAYuO,QAAQh4D,KAAK04D,SACxCiD,EAAW37D,KAAKypD,YAAY4Q,SAASr6D,KAAK04D,QAEhD,OAAOP,GAAOuD,GAAYvD,IAASuD,GAAW5B,EAAQ6B,EAG1D,OAAO,GAOHxP,EAAZlrD,UAAA6oD,mBAAI,SAA2BC,GACvB,MAAQ/pD,MAAKypD,YAAYO,eAAeD,IAAQ/pD,KAAKypD,YAAYQ,QAAQF,GAAQA,EAAM,MAInFoC,EAAZlrD,UAAA4kB,MAAI,WACI,MAAO7lB,MAAKo9B,KAA0B,QAAnBp9B,KAAKo9B,IAAIp6B,sBAvSpCyD,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,eACVwC,SAAJ,sfACIvC,SAAU,aACVsD,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,+CAtC7C/D,KAAI+E,EAAAA,oBA6HJ/E,SAAAa,GAAAC,aAAAd,KAASkB,EAAAA,WAATlB,KAAqBe,EAAAA,OAArBb,MAA4B+jD,EAAAA,qBAlH5BjkD,KAASgkD,EAAAA,YAATljD,aAAAd,KAmHSkB,EAAAA,aApHTlB,KAASiB,EAAAA,eAATH,aAAAd,KAqHSkB,EAAAA,gCArFTiwD,aAAAnxD,KAAKqB,EAAAA,QAiBLoY,WAAAzZ,KAAKqB,EAAAA,QAWL4wD,UAAAjyD,KAAKqB,EAAAA,QAUL2wD,UAAAhyD,KAAKqB,EAAAA,QAUL6wD,aAAAlyD,KAAKqB,EAAAA,QAGLixD,iBAAAtyD,KAAKmB,EAAAA,SAGLqxD,gBAAAxyD,KAAKmB,EAAAA,SAGLiwD,mBAAApxD,KAAKmB,EAAAA,SAGLqwD,iBAAAxxD,KAAKyG,EAAAA,UAALvG,MAAeolD,OAoOfI,KCxSAE,GAAA,WAQI,QAAJA,GAAwBtB,EACqC6Q,EACzBnS,EACyBE,EAC7CnoC,GAJQxhB,KAAxB+qD,KAAwBA,EACqC/qD,KAA7D47D,SAA6DA,EACzB57D,KAApCypD,YAAoCA,EACyBzpD,KAA7D2pD,YAA6DA,EAGrD3pD,KAAK47D,SAAS94C,aAAahiB,UAAU,WAAM,MAAA0gB,GAAkBtf,iBAwGrE,MApGIZ,QAAJ2I,eAAQoiD,EAARprD,UAAA,wBAAI,WACI,GAAkC,UAA9BjB,KAAK47D,SAASC,YAAyB,CACnD,GAAkBC,GAAQ97D,KAAKypD,YACdC,OAAO1pD,KAAK47D,SAAShE,WAAY53D,KAAK2pD,YAAYC,QAAQmS,eAE/D,OAAOD,GAAM,GAAGb,oBAAsBa,EAAMZ,OAAO,GAGvD,GAAkC,SAA9Bl7D,KAAK47D,SAASC,YACd,MAAO77D,MAAKypD,YAAY4O,YAAYr4D,KAAK47D,SAAShE,WAG9D,IAAcwD,GAAap7D,KAAKypD,YAAYuO,QAAQh4D,KAAK47D,SAAShE,WAQ1D,OAPwB53D,MAAKypD,YAAY4O,YAErCr4D,KAAKypD,YAAY6O,WAAW8C,EAAaA,EAAa,GAAI,EAAG,IAKzE,MAJ+Bp7D,KAAKypD,YAAY4O,YAEpCr4D,KAAKypD,YAAY6O,WAAW8C,EFzCZ,GEyCwC,EAAIA,EAAa,GAAI,EAAG,qCAKxF95D,OAAJ2I,eAAQoiD,EAARprD,UAAA,yBAAI,WACI,MAAqC,UAA9BjB,KAAK47D,SAASC,YACjB77D,KAAK+qD,KAAKiR,2BAA6Bh8D,KAAK+qD,KAAKkR,wDAIzD36D,OAAJ2I,eAAQoiD,EAARprD,UAAA,uBAAI,WACI,OACI64D,MAAO95D,KAAK+qD,KAAKmR,eACjB/D,KAAMn4D,KAAK+qD,KAAKoR,cAChBC,aAAcp8D,KAAK+qD,KAAKsR,oBAC1Br8D,KAAK47D,SAASC,8CAIpBv6D,OAAJ2I,eAAQoiD,EAARprD,UAAA,uBAAI,WACI,OACI64D,MAAO95D,KAAK+qD,KAAKuR,eACjBnE,KAAMn4D,KAAK+qD,KAAKwR,cAChBH,aAAcp8D,KAAK+qD,KAAKyR,oBAC1Bx8D,KAAK47D,SAASC,8CAIpBxP,EAAJprD,UAAAw7D,qBAAI,WACIz8D,KAAK47D,SAASC,YAA4C,UAA9B77D,KAAK47D,SAASC,YAA0B,aAAe,SAIvFxP,EAAJprD,UAAAy7D,gBAAI,WACI18D,KAAK47D,SAAShE,WAA2C,UAA9B53D,KAAK47D,SAASC,YACrC77D,KAAKypD,YAAY2Q,kBAAkBp6D,KAAK47D,SAAShE,YAAa,GAC9D53D,KAAKypD,YAAY6Q,iBACbt6D,KAAK47D,SAAShE,WAA0C,SAA9B53D,KAAK47D,SAASC,aAA0B,GF/EtD,KEoFxBxP,EAAJprD,UAAA07D,YAAI,WACI38D,KAAK47D,SAAShE,WAA2C,UAA9B53D,KAAK47D,SAASC,YACrC77D,KAAKypD,YAAY2Q,kBAAkBp6D,KAAK47D,SAAShE,WAAY,GAC7D53D,KAAKypD,YAAY6Q,iBACbt6D,KAAK47D,SAAShE,WACgB,SAA9B53D,KAAK47D,SAASC,YAAyB,EFzF3B,KE8FxBxP,EAAJprD,UAAA27D,gBAAI,WACI,OAAK58D,KAAK47D,SAASlD,WAIX14D,KAAK47D,SAASlD,UACjB14D,KAAK68D,WAAW78D,KAAK47D,SAAShE,WAAY53D,KAAK47D,SAASlD,WAIjErM,EAAJprD,UAAA67D,YAAI,WACI,OAAQ98D,KAAK47D,SAASnD,UACjBz4D,KAAK68D,WAAW78D,KAAK47D,SAAShE,WAAY53D,KAAK47D,SAASnD,UAIzDpM,EAAZprD,UAAA47D,WAAI,SAAmBE,EAAUC,GACzB,MAAkC,UAA9Bh9D,KAAK47D,SAASC,YACP77D,KAAKypD,YAAYuO,QAAQ+E,KAAW/8D,KAAKypD,YAAYuO,QAAQgF,IAChEh9D,KAAKypD,YAAY4Q,SAAS0C,KAAW/8D,KAAKypD,YAAY4Q,SAAS2C,GAErC,SAA9Bh9D,KAAK47D,SAASC,YACP77D,KAAKypD,YAAYuO,QAAQ+E,KAAW/8D,KAAKypD,YAAYuO,QAAQgF,GAIjEp4C,KAAK0lB,MAAMtqC,KAAKypD,YAAYuO,QAAQ+E,GFxHvB,MEyHhBn4C,KAAK0lB,MAAMtqC,KAAKypD,YAAYuO,QAAQgF,GFzHpB,oBEK5Bv2D,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,qBACVwC,SAAJ,42BACIvC,SAAU,mBACVsD,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,+CAlB7C/D,KAASklD,KAsBTllD,KAAuEqlD,GAAvEvkD,aAAAd,KAAiBe,EAAAA,OAAjBb,MAAwBsU,EAAAA,WAAW,WAAM,MAAA6wC,WA5BzCrlD,KAASgkD,EAAAA,YAATljD,aAAAd,KA6BiBkB,EAAAA,aACjBlB,SAAAa,GAAAC,aAAAd,KAAiBkB,EAAAA,WAAjBlB,KAA6Be,EAAAA,OAA7Bb,MAAoC+jD,EAAAA,qBA5CpCjkD,KAAI+E,EAAAA,qBAuJJ6gD,KAMAP,GAAA,WA0II,QAAJA,GACQf,EACoBtB,EACyBE,EACrCnoC,GAJZ,GAAJliB,GAAAU,IAMQ,IAJoBA,KAA5BypD,YAA4BA,EACyBzpD,KAArD2pD,YAAqDA,EACrC3pD,KAAhBwhB,kBAAgBA,EA3DHxhB,KAAbi9D,UAAyC,QASlBj9D,KAAvB+4D,eAAyD,GAAIv/C,GAAAA,aAMtCxZ,KAAvBg5D,aAAuD,GAAIx/C,GAAAA,aAMpCxZ,KAAvBi5D,cAAwD,GAAIz/C,GAAAA,aAGrCxZ,KAAvBk9D,cAA2D,GAAI1jD,GAAAA,aAc3DxZ,KAAJ8iB,aAAmB,GAAIpV,GAAAA,QASX1N,KAAZm9D,qBAAkC,GAcrBn9D,KAAKypD,YACN,KAAMyP,GAA2B,cAGrC,KAAKl5D,KAAK2pD,YACN,KAAMuP,GAA2B,kBAGrCl5D,MAAKo9D,YAAcrS,EAAK53C,QAAQrS,UAAU,WACtC0gB,EAAkBtf,eAClB5C,EAAKwjB,aAAahf,SA4F9B,MAxOIxC,QAAJ2I,eACQ6hD,EADR7qD,UAAA,eAAI,WAEI,MAAOjB,MAAKq9D,cAGhB,SAAYr6D,GACRhD,KAAKq9D,SAAWr9D,KAAK8pD,mBAAmB9pD,KAAKypD,YAAY6P,YAAYt2D,qCAIzE1B,OAAJ2I,eACQ6hD,EADR7qD,UAAA,gBAAI,WAEI,MAAOjB,MAAK2gC,eAGhB,SAAa39B,GACThD,KAAK2gC,UAAY3gC,KAAK8pD,mBAAmB9pD,KAAKypD,YAAY6P,YAAYt2D,qCAI1E1B,OAAJ2I,eACQ6hD,EADR7qD,UAAA,eAAI,WAEI,MAAOjB,MAAK25D,cAGhB,SAAY32D,GACRhD,KAAK25D,SAAW35D,KAAK8pD,mBAAmB9pD,KAAKypD,YAAY6P,YAAYt2D,qCAIzE1B,OAAJ2I,eACQ6hD,EADR7qD,UAAA,eAAI,WAEI,MAAOjB,MAAK45D,cAGhB,SAAY52D,GACRhD,KAAK45D,SAAW55D,KAAK8pD,mBAAmB9pD,KAAKypD,YAAY6P,YAAYt2D,qCAOzE1B,OAAJ2I,eAAQ6hD,EAAR7qD,UAAA,kBAAI,WACI,MAAOjB,MAAKs9D,uBAGhB,SAAet6D,GACXhD,KAAKs9D,kBAAoBt9D,KAAKypD,YAAY8P,UAAUv2D,EAAOhD,KAAK04D,QAAS14D,KAAKy4D,SAC9Ez4D,KAAK8iB,aAAahf,wCAItBxC,OAAJ2I,eAAQ6hD,EAAR7qD,UAAA,mBAAI,WACI,MAAOjB,MAAKu9D,kBAGhB,SAAgBv6D,GACZhD,KAAKu9D,aAAev6D,EACpBhD,KAAKm9D,qBAAsB,mCAqF/BrR,EAAJ7qD,UAAAu4B,mBAAI,WACIx5B,KAAKw9D,qBAAuB,GAAI54D,GAAAA,gBAAgB5E,KAAKy9D,iBAAmBpR,IACxErsD,KAAK43D,WAAa53D,KAAK09D,SAAW19D,KAAKypD,YAAY2P,QAGnDp5D,KAAKu9D,aAAev9D,KAAKi9D,WAG7BnR,EAAJ7qD,UAAA08D,mBAAI,WACQ39D,KAAKm9D,sBACLn9D,KAAKm9D,qBAAsB,EAC3Bn9D,KAAK83D,oBAIbhM,EAAJ7qD,UAAAmC,YAAI,WACIpD,KAAKo9D,YAAYrmD,cACjB/W,KAAK8iB,aAAa/e,YAGtB+nD,EAAJ7qD,UAAAiS,YAAI,SAAYC,GAChB,GAAc1T,GAAS0T,EAAQulD,SAAWvlD,EAAQslD,SAAWtlD,EAAQwlD,UAE7D,IAAIl5D,IAAWA,EAAO0mD,YAAa,CAC3C,GAAkB7a,GAAOtrC,KAAK49D,yBAEdtyB,KAGAtrC,KAAKwhB,kBAAkB+U,gBACvB+U,EAAKkuB,QAIbx5D,KAAK8iB,aAAahf,QAGtBgoD,EAAJ7qD,UAAA62D,gBAAI,WACI93D,KAAK49D,0BAA0B9F,mBAInChM,EAAJ7qD,UAAA48D,iBAAI,YACsC,UAArB79D,KAAK67D,YAA0B77D,KAAK89D,UACvB,SAArB99D,KAAK67D,YAAyB77D,KAAK+9D,SAAW/9D,KAAKg+D,eAEnDxkC,sBAITsyB,EAAJ7qD,UAAAg9D,aAAI,SAAapF,GACJ74D,KAAKypD,YAAYyU,SAASrF,EAAM74D,KAAKkgB,WACtClgB,KAAK+4D,eAAe1zD,KAAKwzD,IAKjC/M,EAAJ7qD,UAAAk9D,4BAAI,SAA4BC,GACxBp+D,KAAKg5D,aAAa3zD,KAAK+4D,IAI3BtS,EAAJ7qD,UAAAo9D,wBAAI,SAAwBC,GACpBt+D,KAAKi5D,cAAc5zD,KAAKi5D,IAG5BxS,EAAJ7qD,UAAAs9D,aAAI,WACIv+D,KAAKk9D,cAAc73D,QAIvBymD,EAAJ7qD,UAAAu9D,eAAI,SAAe3F,EAASvtB,GACpBtrC,KAAK43D,WAAaiB,EAClB74D,KAAK67D,YAAcvwB,GAOfwgB,EAAZ7qD,UAAA6oD,mBAAI,SAA2BC,GACvB,MAAQ/pD,MAAKypD,YAAYO,eAAeD,IAAQ/pD,KAAKypD,YAAYQ,QAAQF,GAAQA,EAAM,MAInF+B,EAAZ7qD,UAAA28D,wBAAI,WACI,MAAO59D,MAAK89D,WAAa99D,KAAK+9D,UAAY/9D,KAAKg+D,8BApPvDv3D,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,cACVwC,SAAJ,i/BACIqB,QAAS,0wBACT3D,MACImC,MAAO,eAEXpC,SAAU,aACVsD,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,+CAlJ7C/D,KAASklD,KANTllD,KAASgkD,EAAAA,YAATljD,aAAAd,KA2RSkB,EAAAA,aACTlB,SAAAa,GAAAC,aAAAd,KAASkB,EAAAA,WAATlB,KAAqBe,EAAAA,OAArBb,MAA4B+jD,EAAAA,qBA1S5BjkD,KAAI+E,EAAAA,uCA2KJkyD,UAAAj3D,KAAKqB,EAAAA,QAULoY,WAAAzZ,KAAKqB,EAAAA,QAUL4wD,UAAAjyD,KAAKqB,EAAAA,QAUL2wD,UAAAhyD,KAAKqB,EAAAA,QAiCL21D,kBAAAh3D,KAAKqB,EAAAA,QAMLm1D,YAAAx2D,KAAKqB,EAAAA,QAGL6wD,aAAAlyD,KAAKqB,EAAAA,QAGL22D,YAAAh4D,KAAKqB,EAAAA,QAGLixD,iBAAAtyD,KAAKmB,EAAAA,SAMLoxD,eAAAvyD,KAAKmB,EAAAA,SAMLqxD,gBAAAxyD,KAAKmB,EAAAA,SAGLs1D,gBAAAz2D,KAAKmB,EAAAA,SAGLk2D,YAAAr3D,KAAKyG,EAAAA,UAALvG,MAAeulD,MAGf6R,WAAAt3D,KAAKyG,EAAAA,UAALvG,MAAewlD,MAGf6R,gBAAAv3D,KAAKyG,EAAAA,UAALvG,MAAeylD,OAkIfN,KCzYa4S,IAKTh3C,eAAgB9d,EAAAA,QAAQ,kBACpB8N,EAAAA,MAAM,OAAQ9U,EAAAA,OACV8sD,QAAS,EACT/5B,UAAW,mBAEfpa,EAAAA,WAAW,gBAAiBC,EAAAA,QAAQ,mCAAoC5Y,EAAAA,OACpE8sD,QAAS,EACT/5B,UAAW,kBAEfpa,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,eAAgB5Y,EAAAA,OAAQ8sD,QAAS,QAIrEiP,eAAgB/0D,EAAAA,QAAQ,kBACpB8N,EAAAA,MAAM,OAAQ9U,EAAAA,OAAQ8sD,QAAS,KAC/Bh4C,EAAAA,MAAM,QAAS9U,EAAAA,OAAQ8sD,QAAS,KAGhCn0C,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,mDAMnCojD,SAAQ39D,UAAU49D,UACnBD,QAAQ39D,UAAU49D,QAAWD,QAAiB,UAASE,kBCO3D,IAAIC,IAAgB,EAGPC,GACT,GAAI7vD,GAAAA,eAAsC,iCASjCm9C,IACTxxC,QAASkkD,GACT3hD,MAAOpW,EAAAA,SACPqW,WAAY2hD,iBAOZ,QAAJC,GAAuB51D,GAAAtJ,KAAvBsJ,YAAuBA,EAEvB,MAAA41D,MAGaC,GACTxmD,EAAWumD,IASfjT,GAAA,SAAAviD,GA6BI,QAAJuiD,GAAgBvoD,GAChB,MAAQgG,GAARG,KAAA7J,KAAc0D,IAAd1D,KAMA,MAnB4CgK,GAA5CiiD,EAAAviD,GAgBIuiD,EAAJhrD,UAAA44B,gBAAI,WACI75B,KAAK47D,SAAS9D,kCAlCtBrxD,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,yBACVwC,SAAJ,qkBACIqB,QAAS,qYACT3D,MACImC,MAAO,yBACPm2D,oBAAqB,WAEzB9zD,YACIozD,GAAuBh3C,eACvBg3C,GAAuBC,gBAE3B93D,SAAU,sBACVsD,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,OACzCE,QAAS,iDAhGbjE,KAAIS,EAAAA,gCAsGJ00D,WAAAn1D,KAAKyG,EAAAA,UAALvG,MAAemlD,OAefG,GAnB4CkT,IA0B5CnT,GAAA,WA6JI,QAAJA,GAAwB9rD,EACAL,EACA0uC,EAC+B/tC,EACnBipD,EACArsB,EACkBynB,GAC9C,GAPgB7kD,KAAxBE,QAAwBA,EACAF,KAAxBH,OAAwBA,EACAG,KAAxBuuC,iBAAwBA,EAEYvuC,KAApCypD,YAAoCA,EACAzpD,KAApCo9B,IAAoCA,EACkBp9B,KAAtD6kD,SAAsDA,EAnEzC7kD,KAAbi9D,UAA0D,QAMnCj9D,KAAvBg5D,aAAuD,GAAIx/C,GAAAA,aAMpCxZ,KAAvBi5D,cAAwD,GAAIz/C,GAAAA,aAStCxZ,KAAtB8oB,aAAyD,GAAItP,GAAAA,aAGvCxZ,KAAtB+oB,aAAyD,GAAIvP,GAAAA,aAGzDxZ,KAAJ4N,GAAiB,iBAAiBmxD,KAQrB/+D,KAAb8iB,aAA8C,GAAIpV,GAAAA,QAGrC1N,KAAbqrD,eAA8B,GAAI39C,GAAAA,QAGrB1N,KAAbq/D,gBAA+B,GAAI3xD,GAAAA,QAIvB1N,KAAZozD,SAAsB,EACVpzD,KAAZs/D,cAAsC,KAU1Bt/D,KAAZu/D,yBAA2D,KAG/Cv/D,KAAZw/D,kBAAgClwB,EAAAA,aAAaC,OAShCvvC,KAAKypD,YACN,KAAMyP,GAA2B,cAGrCl5D,MAAKQ,eAAiBA,EAyM9B,MAtWIc,QAAJ2I,eACQ+hD,EADR/qD,UAAA,eAAI,WAII,MAAOjB,MAAKq9D,WAAar9D,KAAKurD,gBAAkBvrD,KAAKurD,gBAAgBvoD,MAAQ,WAGjF,SAAYA,GACRhD,KAAKq9D,SAAWr9D,KAAK8pD,mBAAmB9pD,KAAKypD,YAAY6P,YAAYt2D,qCAIzE1B,OAAJ2I,eACQ+hD,EADR/qD,UAAA,aAAI,WAGI,MAAOjB,MAAKy/D,SACPz/D,KAAKurD,gBAAkBvrD,KAAKurD,gBAAgBhC,sBAAoBjiD,SAGzE,SAAUtE,GACNhD,KAAKy/D,OAASz8D,mCAIlB1B,OAAJ2I,eACQ+hD,EADR/qD,UAAA,gBAAI,WAEI,WAA0BqG,KAAnBtH,KAAKoU,WAA2BpU,KAAKurD,gBACxCvrD,KAAKurD,gBAAgB7mD,WAAa1E,KAAKoU,eAG/C,SAAapR,GACjB,GAAcopB,GAAW1X,EAAAA,sBAAsB1R,EAEnCopB,KAAapsB,KAAKoU,YAClBpU,KAAKoU,UAAYgY,EACjBpsB,KAAKqrD,eAAevnD,KAAKsoB,qCAKjC9qB,OAAJ2I,eACQ+hD,EADR/qD,UAAA,cAAI,WAEI,MAAOjB,MAAKozD,aAGhB,SAAWpwD,GACHA,EACAhD,KAAK2P,OAEL3P,KAAK2O,yCAKbrN,OAAJ2I,eAAQ+hD,EAAR/qD,UAAA,gBAAI,WACI,MAAOjB,MAAKs/D,mBAGhB,SAAat8D,GACThD,KAAKs/D,cAAgBt8D,mCAIzB1B,OAAJ2I,eAAQ+hD,EAAR/qD,UAAA,eAAI,WACI,MAAOjB,MAAKurD,iBAAmBvrD,KAAKurD,gBAAgB1mC,qCAIxDvjB,OAAJ2I,eAAQ+hD,EAAR/qD,UAAA,eAAI,WACI,MAAOjB,MAAKurD,iBAAmBvrD,KAAKurD,gBAAgBz/B,qCAGxDxqB,OAAJ2I,eAAQ+hD,EAAR/qD,UAAA,kBAAI,WACI,MAAOjB,MAAKurD,iBAAmBvrD,KAAKurD,gBAAgBoN,4CAIxDr3D,OAAJ2I,eAAQ+hD,EAAR/qD,UAAA,aAAI,WACI,MAAOjB,MAAKkgB,0CAkFhB8rC,EAAJ/qD,UAAAmC,YAAI,WACIpD,KAAK2O,QACL3O,KAAKw/D,kBAAkBzoD,cACvB/W,KAAKqrD,eAAetnD,WAEhB/D,KAAK0/D,WACL1/D,KAAK0/D,SAASr8D,UACdrD,KAAK2/D,kBAAoB,OAKjC3T,EAAJ/qD,UAAAkf,OAAI,SAAO04C,GACX,GAAc+G,GAAW5/D,KAAKkgB,QACtBlgB,MAAKkgB,SAAW24C,EACX74D,KAAKypD,YAAYyU,SAAS0B,EAAU5/D,KAAKkgB,WAC1ClgB,KAAKq/D,gBAAgBv7D,KAAK+0D,IAKlC7M,EAAJ/qD,UAAA4+D,WAAI,SAAWzB,GACPp+D,KAAKg5D,aAAa3zD,KAAK+4D,IAI3BpS,EAAJ/qD,UAAA6+D,YAAI,SAAYxB,GACRt+D,KAAKi5D,cAAc5zD,KAAKi5D,IAO5BtS,EAAJ/qD,UAAAijC,cAAI,SAAcoC,GAAd,GAAJhnC,GAAAU,IACQ,IAAIA,KAAKurD,gBACL,KAAMn/C,OAAM,6DAEhBpM,MAAKurD,gBAAkBjlB,EACvBtmC,KAAKw/D,kBACDx/D,KAAKurD,gBAAgB/nC,YAAY1iB,UAAU,SAACkC,GAAoB,MAAA1D,GAAK4gB,SAAWld,KAIxFgpD,EAAJ/qD,UAAA0O,KAAI,WACI,IAAI3P,KAAKozD,UAAWpzD,KAAK0E,SAAzB,CAGA,IAAK1E,KAAKurD,gBACN,KAAMn/C,OAAM,8DAEZpM,MAAK6kD,WACL7kD,KAAKu/D,yBAA2Bv/D,KAAK6kD,SAASkb,eAGlD//D,KAAKggE,cAELhgE,KAAKozD,SAAU,EACfpzD,KAAK8oB,aAAazjB,SAItB2mD,EAAJ/qD,UAAA0N,MAAI,WAAA,GAAJrP,GAAAU,IACQ,IAAKA,KAAKozD,QAAV,CAIIpzD,KAAK0/D,UAAY1/D,KAAK0/D,SAASx+D,eAC/BlB,KAAK0/D,SAAS3+D,SAGdf,KAAKigE,gBAAkBjgE,KAAKigE,eAAelS,YAC3C/tD,KAAKigE,eAAel/D,QAGhC,IAAcm/D,GAAgB,WAGd5gE,EAAK8zD,UACL9zD,EAAK8zD,SAAU,EACf9zD,EAAKypB,aAAa1jB,OAClB/F,EAAKigE,yBAA2B,MAIpCv/D,MAAKu/D,0BAC0C,kBAAxCv/D,MAAKu/D,yBAAyB3lD,OAMrC5Z,KAAKu/D,yBAAyB3lD,QAC9B5G,WAAWktD,IAEXA,MAKAlU,EAAZ/qD,UAAA++D,YAAI,WAAA,GAAJ1gE,GAAAU,IACaA,MAAKigE,iBACNjgE,KAAKigE,eAAiB,GAAIr7D,GAAAA,gBAAwCqnD,GAC9DjsD,KAAKuuC,mBAGRvuC,KAAK0/D,UACN1/D,KAAKmgE,cAGJngE,KAAK0/D,SAASx+D,gBACflB,KAAK2/D,kBAAoB3/D,KAAK0/D,SAAS56D,OAAO9E,KAAKigE,gBACnDjgE,KAAK2/D,kBAAkB56D,SAASmmD,WAAalrD,KAC7CA,KAAKogE,WAGLpgE,KAAKH,OAAO64B,SAAS1pB,eAAerO,KAAKwN,EAAAA,KAAK,IAAIrN,UAAU,WACxDxB,EAAKogE,SAASj/D,qBAMlBurD,EAAZ/qD,UAAAk/D,YAAI,WAAA,GAAJ7gE,GAAAU,KACcyR,EAAgB,GAAIC,GAAAA,eACtBrR,iBAAkBL,KAAKqgE,8BACvB1uD,aAAa,EACbC,cAAe,kCACfxR,UAAWJ,KAAKo9B,IAChB58B,eAAgBR,KAAKQ,iBACrBD,WAAY,wBAGhBP,MAAK0/D,SAAW1/D,KAAKE,QAAQC,OAAOsR,GACpCzR,KAAK0/D,SAASp9D,eAAesV,aAAa,OAAQ,UAElDpJ,EAAAA,MACIxO,KAAK0/D,SAASjxD,gBACdzO,KAAK0/D,SAASh/D,cACdV,KAAK0/D,SAAShxD,gBAAgB/N,KAAKmN,EAAAA,OAAO,SAACrK,GAGvC,MAAOA,GAAMU,UAAYC,EAAAA,QAAW9E,EAAKisD,iBAAmB9nD,EAAMkb,QAAUlb,EAAMU,UAAYib,EAAAA,aAEpGte,UAAU,WAAM,MAAAxB,GAAKqP,WAInBq9C,EAAZ/qD,UAAAo/D,4BAAI,WACI,MAAOrgE,MAAKE,QAAQoF,WACf0Y,oBAAoBhe,KAAKurD,gBAAgB7nD,YACzCua,sBAAsB,2BACtBC,wBAAuB,GACvBC,mBAAmB,GACnBu2C,qBACA/uD,gBAEO/D,QAAS,QACTC,QAAS,SACTC,SAAU,QACVC,SAAU,QAGVH,QAAS,QACTC,QAAS,MACTC,SAAU,QACVC,SAAU,WAGVH,QAAS,MACTC,QAAS,SACTC,SAAU,MACVC,SAAU,QAGVH,QAAS,MACTC,QAAS,MACTC,SAAU,MACVC,SAAU,aASlBiqD,EAAZ/qD,UAAA6oD,mBAAI,SAA2BC,GACvB,MAAQ/pD,MAAKypD,YAAYO,eAAeD,IAAQ/pD,KAAKypD,YAAYQ,QAAQF,GAAQA,EAAM,MAInFiC,EAAZ/qD,UAAAm/D,SAAI,WACJ,GAAc1lC,GAAQ16B,KAAK06B,KACf16B,MAAK2/D,oBACL3/D,KAAK2/D,kBAAkB56D,SAAS21B,MAAQA,mBA9WpDj0B,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,gBACVwC,SAAU,GACVvC,SAAU,eACVyD,gBAAiBC,EAAAA,wBAAwBC,OACzCL,cAAeC,EAAAA,kBAAkBC,KACjCxB,YAAciS,QAAS8M,GAAoB5M,YAAagxC,4CAhH5DvlD,KAAIQ,EAAAA,UAbJR,KAAIU,EAAAA,SAKJV,KAAIY,EAAAA,mBAkRJZ,SAAAa,GAAAC,aAAAd,KAAiBe,EAAAA,OAAjBb,MAAwBq4D,QA7QxBv4D,KAASgkD,EAAAA,YAATljD,aAAAd,KA8QiBkB,EAAAA,aAhRjBlB,KAASiB,EAAAA,eAATH,aAAAd,KAiRiBkB,EAAAA,aACjBlB,SAAAa,GAAAC,aAAAd,KAAiBkB,EAAAA,WAAjBlB,KAA6Be,EAAAA,OAA7Bb,MAAoC6uC,EAAAA,iCAxJpCkoB,UAAAj3D,KAAKqB,EAAAA,QAYL4yB,QAAAj0B,KAAKqB,EAAAA,QAYLpD,WAAA+B,KAAKqB,EAAAA,QAgBLssD,SAAA3tD,KAAKqB,EAAAA,QA0CLw4D,0BAAA75D,KAAKqB,EAAAA,QAGLm1D,YAAAx2D,KAAKqB,EAAAA,QAMLkxD,eAAAvyD,KAAKmB,EAAAA,SAMLqxD,gBAAAxyD,KAAKmB,EAAAA,SAGLrH,aAAAkG,KAAKqB,EAAAA,QAGL22D,YAAAh4D,KAAKqB,EAAAA,QAGLghB,eAAAriB,KAAKmB,EAAAA,OAALjB,MAAY,YAGZoiB,eAAAtiB,KAAKmB,EAAAA,OAALjB,MAAY,aAyPZqlD,KrBlda9B,IACTpvC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAW,WAAM,MAAAmuC,MAC9BluC,OAAO,GAIEivC,IACTrvC,QAAS8Z,EAAAA,cACT5Z,YAAaC,EAAAA,WAAW,WAAM,MAAAmuC,MAC9BluC,OAAO,iBAaP,QAAJouC,GAEe/kB,EAEAg8B,GAFAvgE,KAAfukC,OAAeA,EAEAvkC,KAAfugE,cAAeA,EACPvgE,KAAKgD,MAAQhD,KAAKukC,OAAOvhC,MAEjC,MAAAsmD,MAIAF,GAAA,WA+II,QAAJA,GACe1lD,EACY+lD,EAC0BE,EACzBH,GAJxB,GAAJlqD,GAAAU,IAMQ,IALOA,KAAf0D,WAAeA,EACY1D,KAA3BypD,YAA2BA,EAC0BzpD,KAArD2pD,YAAqDA,EACzB3pD,KAA5BwpD,UAA4BA,EA5BLxpD,KAAvBqpD,WACQ,GAAI7vC,GAAAA,aAGWxZ,KAAvB6pD,UACQ,GAAIrwC,GAAAA,aAGRxZ,KAAJwjB,YAAkB,GAAIhK,GAAAA,aAGlBxZ,KAAJqrD,eAAqB,GAAI7xC,GAAAA,aAMbxZ,KAAZwgE,uBAAqClxB,EAAAA,aAAaC,MAEtCvvC,KAAZygE,mBAAiCnxB,EAAAA,aAAaC,MAGlCvvC,KAAZ0gE,gBAA6B,EAsBzB1gE,KAAJ4vB,UAAgB,aAkFJ5vB,KAAZ2gE,YAAgD,aAGpC3gE,KAAZ+tB,kBAAgC,aAIpB/tB,KAAZgvB,eAA0C,WAClC,MAAO1vB,GAAKohE,eACR,MAASE,mBAAqB5sC,KAAM10B,EAAKoE,WAAWhB,cAAcM,SAIlEhD,KAAZ6gE,aAAwC,SAACC,GACzC,GAAcC,GAAezhE,EAAKwqD,mBAAmBxqD,EAAKmqD,YAAY6P,YAAYwH,EAAQ99D,OAElF,QAAS1D,EAAKulB,MAAQk8C,GAClBzhE,EAAKmqD,YAAYiO,YAAYp4D,EAAKulB,IAAKk8C,IAAiB,EACxD,MAASC,iBAAmBn8C,IAAKvlB,EAAKulB,IAAKo8C,OAAQF,KAInD/gE,KAAZkhE,aAAwC,SAACJ,GACzC,GAAcC,GAAezhE,EAAKwqD,mBAAmBxqD,EAAKmqD,YAAY6P,YAAYwH,EAAQ99D,OAElF,QAAS1D,EAAKwsB,MAAQi1C,GAClBzhE,EAAKmqD,YAAYiO,YAAYp4D,EAAKwsB,IAAKi1C,IAAiB,EACxD,MAASI,iBAAmBr1C,IAAKxsB,EAAKwsB,IAAKm1C,OAAQF,KAInD/gE,KAAZohE,gBAA2C,SAACN,GAC5C,GAAcC,GAAezhE,EAAKwqD,mBAAmBxqD,EAAKmqD,YAAY6P,YAAYwH,EAAQ99D,OAElF,OAAQ1D,GAAKq5D,YAAeoI,IAAgBzhE,EAAKq5D,WAAWoI,IAC/CnW,oBAAoB,GAA7B,MAWA5qD,KAAZwuB,UACQM,EAAAA,WAAWC,SACP/uB,KAAKgvB,eACLhvB,KAAK6gE,aACL7gE,KAAKkhE,aACLlhE,KAAKohE,mBAnJJphE,KAAKypD,YACN,KAAMyP,GAA2B,cAGrC,KAAKl5D,KAAK2pD,YACN,KAAMuP,GAA2B,kBAIrCl5D,MAAKygE,mBAAqBhX,EAAY4X,cAAcvgE,UAAU,WAC1DxB,EAAK0D,MAAQ1D,EAAK0D,QAmJ9B,MA5RI1B,QAAJ2I,eACQm/C,EADRnoD,UAAA,oBAAI,SACiB+B,GADjB,GAAJ1D,GAAAU,IAEagD,KAILhD,KAAKkrD,WAAaloD,EAClBhD,KAAKkrD,WAAWhnB,cAAclkC,MAC9BA,KAAKwgE,uBAAuBzpD,cAE5B/W,KAAKwgE,uBAAyBxgE,KAAKkrD,WAAWmU,gBAAgBv+D,UAAU,SAACof,GACrE5gB,EAAK0D,MAAQkd,EACb5gB,EAAKqhE,YAAYzgD,GACjB5gB,EAAKswB,YACLtwB,EAAKuqD,UAAUxkD,KAAK,GAAIikD,IAAuBhqD,EAAMA,EAAKoE,WAAWhB,gBACrEpD,EAAK+pD,WAAWhkD,KAAK,GAAIikD,IAAuBhqD,EAAMA,EAAKoE,WAAWhB,oDAK9EpB,OAAJ2I,eACQm/C,EADRnoD,UAAA,0BAAI,SACuB+B,GACnBhD,KAAK24D,WAAa31D,EAClBhD,KAAK+tB,qDAITzsB,OAAJ2I,eACQm/C,EADRnoD,UAAA,aAAI,WAEI,MAAOjB,MAAK+gB,YAGhB,SAAU/d,GAENA,EAAQhD,KAAKypD,YAAY6P,YAAYt2D,GACrChD,KAAK0gE,gBAAkB19D,GAAShD,KAAKypD,YAAYQ,QAAQjnD,GAEzDA,EAAQhD,KAAK8pD,mBAAmB9mD,EACxC,IAAcs+D,GAAUthE,KAAKgD,KACrBhD,MAAK+gB,OAAS/d,EACdhD,KAAKqvB,YAAYrsB,GAEZhD,KAAKypD,YAAYyU,SAASoD,EAASt+D,IACpChD,KAAKwjB,YAAYne,KAAKrC,oCAK9B1B,OAAJ2I,eACQm/C,EADRnoD,UAAA,WAAI,WAEI,MAAOjB,MAAKuhE,UAGhB,SAAQv+D,GACJhD,KAAKuhE,KAAOvhE,KAAK8pD,mBAAmB9pD,KAAKypD,YAAY6P,YAAYt2D,IACjEhD,KAAK+tB,qDAITzsB,OAAJ2I,eACQm/C,EADRnoD,UAAA,WAAI,WAEI,MAAOjB,MAAKwhE,UAGhB,SAAQx+D,GACJhD,KAAKwhE,KAAOxhE,KAAK8pD,mBAAmB9pD,KAAKypD,YAAY6P,YAAYt2D,IACjEhD,KAAK+tB,qDAITzsB,OAAJ2I,eACQm/C,EADRnoD,UAAA,gBAAI,WAEI,QAASjB,KAAKoU,eAGlB,SAAapR,GACjB,GAAcopB,GAAW1X,EAAAA,sBAAsB1R,GACjCP,EAAUzC,KAAK0D,WAAWhB,aAE5B1C,MAAKoU,YAAcgY,IACnBpsB,KAAKoU,UAAYgY,EACjBpsB,KAAKqrD,eAAehmD,KAAK+mB,IAIzBA,GAAY3pB,EAAQ+/B,MAIpB//B,EAAQ+/B,wCAuDhB4mB,EAAJnoD,UAAAmC,YAAI,WACIpD,KAAKwgE,uBAAuBzpD,cAC5B/W,KAAKygE,mBAAmB1pD,cACxB/W,KAAKwjB,YAAYzf,WACjB/D,KAAKqrD,eAAetnD,YAIxBqlD,EAAJnoD,UAAAwtB,0BAAI,SAA0BhU,GACtBza,KAAK+tB,kBAAoBtT,GAI7B2uC,EAAJnoD,UAAAqtB,SAAI,SAASN,GACL,MAAOhuB,MAAKwuB,UAAYxuB,KAAKwuB,UAAUR,GAAK,MAIhDo7B,EAAJnoD,UAAAsZ,WAAI,SAAWvX,GACPhD,KAAKgD,MAAQA,GAIjBomD,EAAJnoD,UAAAuZ,iBAAI,SAAiBC,GACbza,KAAK2gE,YAAclmD,GAIvB2uC,EAAJnoD,UAAAyZ,kBAAI,SAAkBD,GACdza,KAAK4vB,UAAYnV,GAIrB2uC,EAAJnoD,UAAA0Z,iBAAI,SAAiBC,GACb5a,KAAK0E,SAAWkW,GAGpBwuC,EAAJnoD,UAAA+d,UAAI,SAAUvb,GAEd,GAAcg+D,GAAiBh+D,EAAMkb,QAAUlb,EAAMU,UAAYgb,EAAAA,UAErDnf,MAAKkrD,YAAcuW,IAAmBzhE,KAAK0D,WAAWhB,cAAcg/D,WACpE1hE,KAAKkrD,WAAWv7C,OAChBlM,EAAMob,mBAIduqC,EAAJnoD,UAAAivB,QAAI,SAAQltB,GACZ,GAAY61D,GAAO74D,KAAKypD,YAAYkY,MAAM3+D,EAAOhD,KAAK2pD,YAAYgY,MAAM9X,UAChE7pD,MAAK0gE,gBAAkB7H,GAAQ74D,KAAKypD,YAAYQ,QAAQ4O,GACxDA,EAAO74D,KAAK8pD,mBAAmB+O,GAE1B74D,KAAKypD,YAAYyU,SAASrF,EAAM74D,KAAK+gB,UACtC/gB,KAAK+gB,OAAS83C,EACd74D,KAAK2gE,YAAY9H,GACjB74D,KAAKwjB,YAAYne,KAAKwzD,GACtB74D,KAAK6pD,UAAUxkD,KAAK,GAAIikD,IAAuBtpD,KAAMA,KAAK0D,WAAWhB;kEAI7E0mD,EAAJnoD,UAAAwiB,SAAI,WACIzjB,KAAKqpD,WAAWhkD,KAAK,GAAIikD,IAAuBtpD,KAAMA,KAAK0D,WAAWhB,iBAI1E0mD,EAAJnoD,UAAAsoD,gBAAI,WACI,MAAOvpD,MAAKwpD,UAAYxpD,KAAKwpD,UAAU9uB,UAAQpzB,IAInD8hD,EAAJnoD,UAAA4uB,OAAI,WAEQ7vB,KAAKgD,OACLhD,KAAKqvB,YAAYrvB,KAAKgD,OAG1BhD,KAAK4vB,aA0CDw5B,EAAZnoD,UAAAouB,YAAI,SAAoBrsB,GAChBhD,KAAK0D,WAAWhB,cAAcM,MAC1BA,EAAQhD,KAAKypD,YAAYC,OAAO1mD,EAAOhD,KAAK2pD,YAAYC,QAAQC,WAAa,IAiB7ET,EAAZnoD,UAAA6oD,mBAAI,SAA2BC,GACvB,MAAQ/pD,MAAKypD,YAAYO,eAAeD,IAAQ/pD,KAAKypD,YAAYQ,QAAQF,GAAQA,EAAM,qBAhT/FtjD,KAACC,EAAAA,UAADC,OACIC,SAAU,sBACViC,WACIqhD,GACAC,IACErvC,QAASga,GAAyB9Z,YAAaouC,IAErDtiD,MACIsjD,uBAAwB,OACxBC,mBAAoB,gDACpBC,aAAc,0CACdC,aAAc,0CACd39B,aAAc,WACd8H,UAAW,+BACX81B,WAAY,aACZjjC,SAAU,WACVxgB,YAAa,qBAEjBF,SAAU,4DApFdJ,KAAIS,EAAAA,aAoBJT,KAASgkD,EAAAA,YAATljD,aAAAd,KA+LSkB,EAAAA,aACTlB,SAAAa,GAAAC,aAAAd,KAASkB,EAAAA,WAATlB,KAAqBe,EAAAA,OAArBb,MAA4B+jD,EAAAA,qBA7L5BjkD,KAASyhB,GAAT3gB,aAAAd,KA8LSkB,EAAAA,gCA7HTgjD,eAAAlkD,KAAKqB,EAAAA,QAoBL8iD,qBAAAnkD,KAAKqB,EAAAA,QAOL9E,QAAAyD,KAAKqB,EAAAA,QAqBL+c,MAAApe,KAAKqB,EAAAA,QAWLgkB,MAAArlB,KAAKqB,EAAAA,QAWLpD,WAAA+B,KAAKqB,EAAAA,QA2BLuhD,aAAA5iD,KAAKmB,EAAAA,SAILiiD,YAAApjD,KAAKmB,EAAAA,UAuLLwhD,KC/VAyB,GAAA,WAAA,QAAAA,MAIA,sBAJApkD,KAACC,EAAAA,UAADC,OACIC,SAAU,+BAGdikD,KAGAC,GAAA,WA4CI,QAAJA,GACeC,EACCvpC,EACewpC,GAFhBhrD,KAAf+qD,KAAeA,EACC/qD,KAAhBwhB,kBAAgBA,EANJxhB,KAAZ8iB,aAA2BwsB,EAAAA,aAAaC,KASxC,IAAc0b,GAAiBx3B,OAAOu3B,EAC9BhrD,MAAK8J,SAAYmhD,GAAqC,IAAnBA,EAAwBA,EAAiB,KAwCpF,MAtEI3pD,QAAJ2I,eACQ6gD,EADR7pD,UAAA,gBAAI,WAEI,WAA0BqG,KAAnBtH,KAAKoU,UAA0BpU,KAAKkrD,WAAWxmD,WAAa1E,KAAKoU,eAG5E,SAAapR,GACThD,KAAKoU,UAAYM,EAAAA,sBAAsB1R,oCA2B3C8nD,EAAJ7pD,UAAAiS,YAAI,SAAYC,GACJA,EAAQ+3C,YACRlrD,KAAKmrD,qBAIbL,EAAJ7pD,UAAAmC,YAAI,WACIpD,KAAK8iB,aAAa/L,eAGtB+zC,EAAJ7pD,UAAAu4B,mBAAI,WACIx5B,KAAKmrD,qBAGTL,EAAJ7pD,UAAA0O,KAAI,SAAKlM,GACGzD,KAAKkrD,aAAelrD,KAAK0E,WACzB1E,KAAKkrD,WAAWv7C,OAChBlM,EAAMyW,oBAIN4wC,EAAZ7pD,UAAAkqD,kBAAI,WAAA,GAAJ7rD,GAAAU,KACcorD,EAAqBprD,KAAKkrD,WAAalrD,KAAKkrD,WAAWG,eAAiBjZ,EAAAA,KACxEkZ,EAAgBtrD,KAAKkrD,YAAclrD,KAAKkrD,WAAWK,gBACrDvrD,KAAKkrD,WAAWK,gBAAgBF,eAAiBjZ,EAAAA,KAC/CoZ,EAAoBxrD,KAAKkrD,WAC3B18C,EAAAA,MAAMxO,KAAKkrD,WAAWpiC,aAAc9oB,KAAKkrD,WAAWniC,cACpDqpB,EAAAA,IAEJpyC,MAAK8iB,aAAa/L,cAClB/W,KAAK8iB,aAAetU,EAAAA,MAChBxO,KAAK+qD,KAAK53C,QACVi4C,EACAE,EACAE,GACF1qD,UAAU,WAAM,MAAAxB,GAAKkiB,kBAAkBtf,iCAxFjDuE,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,uBACVwC,SAAJ,2YACIqB,QAAS,60BACT3D,MACImC,MAAO,uBAGP2B,kBAAmB,KACnB6gD,sCAAuC,kCACvCC,kBAAmB,6CACnBpkC,UAAW,kBAEfzgB,SAAU,qBACVsD,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,+CA1B7C/D,KAASklD,KAhBTllD,KAAI+E,EAAAA,oBA0EJ/E,KAAAgV,OAAAlU,aAAAd,KAASiV,EAAAA,UAAT/U,MAAmB,mCA3BnBjC,WAAA+B,KAAKqB,EAAAA,QAULojD,aAAAzkD,KAAKqB,EAAAA,MAALnB,MAAW,SAGXmD,WAAArD,KAAKqB,EAAAA,QAGL8jD,aAAAnlD,KAAKiiB,EAAAA,aAAL/hB,MAAkBkkD,MAGlB3C,SAAAzhD,KAAKyG,EAAAA,UAALvG,MAAe,aAmDfmkD,KClGAe,GAAA,WAAA,QAAAA,MA8CA,sBA9CAplD,KAAC8B,EAAAA,SAAD5B,OACI+B,SACIC,EAAAA,aACAiwC,GACAhwC,EAAAA,cACA+C,EAAAA,WACAoI,EAAAA,aACAlI,IAEJpD,SACIqjD,GACAC,GACAC,GACAC,GACA7C,GACA0B,GACAD,GACAqB,GACAC,GACAC,GACAC,GACAzT,IAEJpwC,cACIsjD,GACAC,GACAC,GACAC,GACA7C,GACA0B,GACAD,GACAqB,GACAC,GACAC,GACAC,IAEJxjD,WACI8iD,GACAW,IAEJvjD,iBACIkjD,GACAI,QAIRR,KCjEAU,GAAA,WAAA,QAAAA,KA0BYvsD,KAAZwsD,WAAiC,EAYrBxsD,KAAZysD,QAA8B,EAC9B,MAtBInrD,QAAJ2I,eACQsiD,EADRtrD,UAAA,gBAAI,WAEI,MAAOjB,MAAKwsD,eAGhB,SAAaxpD,GACThD,KAAKwsD,UAAY93C,EAAAA,sBAAsB1R,oCAM3C1B,OAAJ2I,eACQsiD,EADRtrD,UAAA,aAAI,WAEI,MAAOjB,MAAKysD,YAGhB,SAAUzpD,GACNhD,KAAKysD,OAAS/3C,EAAAA,sBAAsB1R,mDAnC5CyD,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,aACVE,MACImC,MAAO,aACPuD,KAAM,YACNkgD,0BAA2B,uCAC3BC,8BAA+B,WAC/BC,2BAA4B,SAEhCxjD,SAAU,GACVqB,QAAS,wSACTN,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,OACzCyM,qBAAqB,wBAIzB41C,WAAApmD,KAAKqB,EAAAA,QAYLglD,QAAArmD,KAAKqB,EAAAA,SAULykD,KCrCAQ,GAAA,WAAA,QAAAA,MAMA,sBANAtmD,KAAC8B,EAAAA,SAAD5B,OACI+B,SAAUC,EAAAA,cACVF,SAAU8jD,IACV/jD,cAAe+jD,QAGnBQ,KCMAC,GAAA,WAUI,QAAJA,GACgBC,EACAC,EACAC,EACAC,EACAC,EACkBC,GALlBttD,KAAhBitD,UAAgBA,EACAjtD,KAAhBktD,0BAAgBA,EACAltD,KAAhBmtD,QAAgBA,EACAntD,KAAhBotD,UAAgBA,EACAptD,KAAhBqtD,kBAAgBA,EACkBrtD,KAAlCstD,UAAkCA,EAV9BttD,KAAJutD,UAAgB,GAAI7/C,GAAAA,QAqDpB,MArCIs/C,GAAJ/rD,UAAA6D,OAAI,SAAO0oD,OAAX,KAAAA,IAAWA,MACExtD,KAAKytD,UACNztD,KAAKytD,QAAU,GAAIr9C,GAAAA,eAAepQ,KAAKitD,UAAWjtD,KAAKqtD,oBAG3DrtD,KAAKe,SAEAf,KAAK0tD,UACN1tD,KAAK0tD,QAAU,GAAIC,GAAAA,gBAAgB3tD,KAAKstD,UAAUM,cAAc,OAC5D5tD,KAAKktD,0BAA2BltD,KAAKmtD,QAASntD,KAAKotD,WAGnE,IAAc3qD,GAAuBzC,KAAKitD,UAAUvpD,WAAWhB,aAKvDD,GAAkB,WAAEorD,aAAa7tD,KAAK0tD,QAAQI,cAAerrD,GAC7DzC,KAAKytD,QAAQ3oD,OAAO9E,KAAK0tD,QAASF,GAClCxtD,KAAKutD,UAAUzpD,QAOnBkpD,EAAJ/rD,UAAAF,OAAI,WACQf,KAAKytD,QAAQM,YACb/tD,KAAKytD,QAAQ1sD,UAIrBisD,EAAJ/rD,UAAAmC,YAAI,WACQpD,KAAK0tD,SACL1tD,KAAK0tD,QAAQrqD,0BAxDzBoD,KAACC,EAAAA,UAADC,OACIC,SAAU,yEAhBdH,KAAIyJ,EAAAA,cACJzJ,KAAI+pC,EAAAA,2BACJ/pC,KAAIunD,EAAAA,iBACJvnD,KAAImM,EAAAA,WACJnM,KAAIY,EAAAA,mBA2BJZ,SAAAa,GAAAC,aAAAd,KAASe,EAAAA,OAATb,MAAgB6uC,EAAAA,eA2ChBwX,KCjEaiB,GAAoB,GAAI9+C,GAAAA,eAAgC,mCCSrE,QAAA++C,MAAiC,MAAjCA,MACaC,GACT3kD,EAAc0kD,IAMlBE,GAAA,SAAA1kD,GA0CI,QAAJ0kD,GACgB9kD,EACUu7C,EACV7rC,EACuCq1C,GAJnD,GAAJ/uD,GAKQoK,EALRG,KAAA7J,OAAAA,WACgBV,GAAhBgK,YAAgBA,EAEAhK,EAAhB0Z,cAAgBA,EACuC1Z,EAAvD+uD,qBAAuDA,EAnB1C/uD,EAAbkN,KAAuE,WAO1DlN,EAAbgvD,SAAiD,GAAI5gD,GAAAA,QAGjDpO,EAAJivD,cAA4B,EAGxBjvD,EAAJkvD,yBAAuC,EAS3Bx1C,GAIAA,EAAcjP,QAAQzK,EAAKgK,YAAY5G,eAAe,GAGtD2rD,GAAwBA,EAAqBI,SAC7CJ,EAAqBI,QAAQnvD,GAGjCA,EAAKguD,UAAYzI,IAqEzB,MA1GoC76C,GAApCokD,EAAA1kD,GAyCI0kD,EAAJntD,UAAA2Y,MAAI,SAAMpU,OAAV,KAAAA,IAAUA,EAAV,WACYxF,KAAKgZ,cACLhZ,KAAKgZ,cAAca,SAAS7Z,KAAKwjD,kBAAmBh+C,GAEpDxF,KAAKwjD,kBAAkB5pC,SAI/Bw0C,EAAJntD,UAAAmC,YAAI,WACQpD,KAAKgZ,eACLhZ,KAAKgZ,cAAc9O,eAAelK,KAAKsJ,YAAY5G,eAGnD1C,KAAKquD,sBAAwBruD,KAAKquD,qBAAqBK,YACvD1uD,KAAKquD,qBAAqBK,WAAW1uD,MAGzCA,KAAKsuD,SAASvqD,YAIlBqqD,EAAJntD,UAAA0tD,aAAI,WACI,MAAO3uD,MAAK0E,SAAW,KAAO,KAIlC0pD,EAAJntD,UAAAuiD,gBAAI,WACI,MAAOxjD,MAAKsJ,YAAY5G,eAI5B0rD,EAAJntD,UAAA2tD,eAAI,SAAenrD,GACPzD,KAAK0E,WACLjB,EAAMob,iBACNpb,EAAMyW,oBAKdk0C,EAAJntD,UAAA4tD,kBAAI,WACI7uD,KAAKsuD,SAASxqD,KAAK9D,OAIvBouD,EAAJntD,UAAA6tD,SAAI,WACJ,GAAcrsD,GAAuBzC,KAAKowC,QAAQ1tC,cAEpCqsD,EAAe/uD,KAAKstD,UAAYttD,KAAKstD,UAAU0B,UAAY,EAC7DC,EAAS,EAEb,IAAIxsD,EAAQysD,WAMR,IAAK,GALCC,GAAS1sD,EAAQysD,WAAW99C,OAKzB+7B,EAAI,EAAGA,EAAIgiB,EAAQhiB,IACpB1qC,EAAQysD,WAAW/hB,GAAGiiB,WAAaL,IACnCE,GAAUxsD,EAAQysD,WAAW/hB,GAAGlM,YAK5C,OAAOguB,GAAOz7B,uBA/HtB/sB,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,uCACVC,SAAU,iBACV6D,QAAS,YACT5D,MACIuoD,cAAe,OACfpmD,MAAO,oBACPqmD,wCAAyC,eACzC1kD,kBAAmB,iBACnB00B,uBAAwB,sBACxB30B,kBAAmB,mBACnB6I,UAAW,yBACX+7C,eAAgB,uBAEpBjlD,gBAAiBC,EAAAA,wBAAwBC,OACzCL,cAAeC,EAAAA,kBAAkBC,KACjCjB,SAAU,4OAzCd3C,KAAIS,EAAAA,aAqEJT,SAAAa,GAAAC,aAAAd,KAASe,EAAAA,OAATb,MAAgB6uC,EAAAA,cA7DhB/uC,KAA2BoE,EAAAA,eA+D3BpE,SAAAa,GAAAC,aAAAd,KAASe,EAAAA,OAATb,MAAgBsnD,MAAhBxnD,KAAoCkB,EAAAA,gCAnBpC6E,OAAA/F,KAAKqB,EAAAA,QAELsoC,UAAA3pC,KAAKyG,EAAAA,UAALvG,MAAe,cAoGfynD,GA1GoCD,ICpCvBqB,IAYTC,kBAAmB7lD,EAAAA,QAAQ,qBACvB8N,EAAAA,MAAM,OAAQ9U,EAAAA,OACV8sD,QAAS,EACT/5B,UAAW,gBAEfpa,EAAAA,WAAW,gBAAiBmhB,EAAAA,OACxBizB,EAAAA,MAAM,wBAAyBn0C,EAAAA,QAAQ,cAAe5Y,EAAAA,OAAO8sD,QAAS,MACtEl0C,EAAAA,QAAQ,kCAAmC5Y,EAAAA,OAAO+yB,UAAW,iBAEjEpa,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,mBAAoB5Y,EAAAA,OAAO8sD,QAAS,QAQxEE,YAAahmD,EAAAA,QAAQ,eAEjB8N,EAAAA,MAAM,UAAW9U,EAAAA,OAAO8sD,QAAS,KACjCn0C,EAAAA,WAAW,aACP3Y,EAAAA,OAAO8sD,QAAS,IAChBl0C,EAAAA,QAAQ,oDAKPo0C,GAAcJ,GAAqBI,YAEnCH,GAAoBD,GAAqBC,kBCEzCI,GACT,GAAI1gD,GAAAA,eAAyC,+BACzC2gD,WAAY,OACZlH,QAASmH,IAcjBC,GAAA,WA+JI,QAAJA,GACgB1mD,EACAuuB,EACqCo4B,GAFrCjwD,KAAhBsJ,YAAgBA,EACAtJ,KAAhB63B,QAAgBA,EACqC73B,KAArDiwD,gBAAqDA,EA3DjDjwD,KAAJkwD,cAGIlwD,KAAJmwD,qBAA6C,OAGzCnwD,KAAJowD,eAAqB,GAAI1iD,GAAAA,QAYZ1N,KAAb4R,cAAqC5R,KAAKiwD,gBAAgBr+C,cAmBnC5R,KAAvB4O,OACQ,GAAI4K,GAAAA,aAGAxZ,KAAZqwD,WAA4CrwD,KAAKiwD,gBAAgBK,UACrDtwD,KAAZuwD,WAA4CvwD,KAAKiwD,gBAAgBO,UAGrDxwD,KAAZywD,UAGYzwD,KAAZ0wD,aAA2B,GAAIhjD,GAAAA,QAGnB1N,KAAZ2wD,iBAA+BrhB,EAAAA,aAAaC,MAChCvvC,KAAZ4wD,iBAAwC5wD,KAAKiwD,gBAAgBY,gBACjD7wD,KAAZ8wD,iBAAwC9wD,KAAKiwD,gBAAgBc,gBACjD/wD,KAAZgxD,aAAgDhxD,KAAKiwD,gBAAgBt+C,YAwJrE,MAnSIrQ,QAAJ2I,eACQ+lD,EADR/uD,UAAA,iBAAI,WAEI,MAAOjB,MAAKqwD,gBAGhB,SAAcrtD,GACI,WAAVA,GAAgC,UAAVA,GACtBiuD,IAEJjxD,KAAKqwD,WAAartD,EAClBhD,KAAKkxD,sDAIT5vD,OAAJ2I,eACQ+lD,EADR/uD,UAAA,iBAAI,WAEI,MAAOjB,MAAKuwD,gBAGhB,SAAcvtD,GACI,UAAVA,GAA+B,UAAVA,GACrBmuD,IAEJnxD,KAAKuwD,WAAavtD,EAClBhD,KAAKkxD,sDAIT5vD,OAAJ2I,eACQ+lD,EADR/uD,UAAA,uBAAI,WAEI,MAAOjB,MAAK8wD,sBAGhB,SAAoB9tD,GAChBhD,KAAK8wD,iBAAmBp8C,EAAAA,sBAAsB1R,oCAIlD1B,OAAJ2I,eACQ+lD,EADR/uD,UAAA,uBAAI,WAEI,MAAOjB,MAAK4wD,sBAGhB,SAAoB5tD,GAChBhD,KAAK4wD,iBAAmBl8C,EAAAA,sBAAsB1R,oCAIlD1B,OAAJ2I,eACQ+lD,EADR/uD,UAAA,mBAAI,WAEI,MAAOjB,MAAKgxD,kBAGhB,SAAgBhuD,GACZhD,KAAKgxD,aAAet8C,EAAAA,sBAAsB1R,oCAS9C1B,OAAJ2I,eACQ+lD,EADR/uD,UAAA,kBAAI,SACemwD,GADf,GAAJ9xD,GAAAU,KAEcqxD,EAAqBrxD,KAAKsxD,mBAE5BD,IAAsBA,EAAmBjgD,QACzCigD,EAAmBtuD,MAAM,KAAKQ,QAAQ,SAACguD,GACnCjyD,EAAK4wD,WAAWqB,IAAa,IAIrCvxD,KAAKsxD,oBAAsBF,EAEvBA,GAAWA,EAAQhgD,SACnBggD,EAAQruD,MAAM,KAAKQ,QAAQ,SAACguD,GACxBjyD,EAAK4wD,WAAWqB,IAAa,IAGjCvxD,KAAKsJ,YAAY5G,cAAc6uD,UAAY,qCAkEnDvB,EAAJ/uD,UAAAiC,SAAI,WACIlD,KAAKkxD,sBAGTlB,EAAJ/uD,UAAAu4B,mBAAI,WAAA,GAAJl6B,GAAAU,IACQA,MAAKihD,YAAc,GAAIpd,GAAAA,gBAAgC7jC,KAAKykB,OAAO8tB,WAAWnW,gBAC9Ep8B,KAAK2wD,iBAAmB3wD,KAAKihD,YAAYj/B,OAAOlhB,UAAU,WAAM,MAAAxB,GAAKsP,OAAOvJ,KAAK,UAGrF2qD,EAAJ/uD,UAAAmC,YAAI,WACIpD,KAAK2wD,iBAAiB55C,cACtB/W,KAAK4O,OAAO7K,YAIhBisD,EAAJ/uD,UAAAqtD,SAAI,WACI,MAAOtuD,MAAK0wD,aAAa/vD,KACrBi5B,EAAAA,UAAU55B,KAAKywD,QACf93B,EAAAA,UAAU,SAAAlU,GAAS,MAAAjW,GAAAA,MAF/BgqB,UAAA,GAEwC/T,EAAMlB,IAAI,SAAAzN,GAAQ,MAAAA,GAAKw4C,gBAK3D0B,EAAJ/uD,UAAAuwD,eAAI,SAAe/tD,GACnB,GAAcU,GAAUV,EAAMU,OAEtB,QAAQA,GACJ,IAAKC,GAAAA,OACDpE,KAAK4O,OAAOvJ,KAAK,UACjB,MACJ,KAAKga,GAAAA,WACGrf,KAAKmoC,QAA6B,QAAnBnoC,KAAKI,WACpBJ,KAAK4O,OAAOvJ,KAAK,UAErB,MACJ,KAAKia,GAAAA,YACGtf,KAAKmoC,QAA6B,QAAnBnoC,KAAKI,WACpBJ,KAAK4O,OAAOvJ,KAAK,UAErB,MACJ,SACQlB,IAAYib,EAAAA,UAAYjb,IAAYgb,EAAAA,YACpCnf,KAAKihD,YAAYwQ,eAAe,YAGpCzxD,KAAKihD,YAAYjiC,UAAUvb,KAQvCusD,EAAJ/uD,UAAAywD,eAAI,SAAelsD,GAAf,GAAJlG,GAAAU,SAAA,KAAAwF,IAAmBA,EAAnB,WAEYxF,KAAK2xD,YACL3xD,KAAK63B,QAAQa,SAAS1pB,eACjBrO,KAAKwN,EAAAA,KAAK,IACVrN,UAAU,WAAM,MAAAxB,GAAK2hD,YAAYwQ,eAAejsD,GAAQka,uBAE7D1f,KAAKihD,YAAYwQ,eAAejsD,GAAQka,sBAQhDswC,EAAJ/uD,UAAA2wD,gBAAI,WACI5xD,KAAKihD,YAAY1/B,eAAe,IAOpCyuC,EAAJ/uD,UAAAwtD,QAAI,SAAQ34C,IAM+B,IAA/B9V,KAAKywD,OAAOh+C,QAAQqD,KACpB9V,KAAKywD,OAAO//C,KAAKoF,GACjB9V,KAAK0wD,aAAa5sD,KAAK9D,KAAKywD,UAQpCT,EAAJ/uD,UAAAytD,WAAI,SAAW54C,GACf,GAActD,GAAQxS,KAAKywD,OAAOh+C,QAAQqD,EAE9B9V,MAAKywD,OAAOh+C,QAAQqD,IAAS,IAC7B9V,KAAKywD,OAAO/9C,OAAOF,EAAO,GAC1BxS,KAAK0wD,aAAa5sD,KAAK9D,KAAKywD,UAWpCT,EAAJ/uD,UAAAiwD,mBAAI,SAAmBW,EAA0CC,OAAjE,KAAAD,IAAuBA,EAA0B7xD,KAAKswD,eAAtD,KAAAwB,IAAiEA,EAA0B9xD,KAAKwwD,UAChG,IAAcY,GAAUpxD,KAAKkwD,UACrBkB,GAAQ,sBAAiC,WAATS,EAChCT,EAAQ,qBAAgC,UAATS,EAC/BT,EAAQ,qBAAgC,UAATU,EAC/BV,EAAQ,qBAAgC,UAATU,GAInC9B,EAAJ/uD,UAAA8wD,gBAAI,WACI/xD,KAAKmwD,qBAAuB,SAIhCH,EAAJ/uD,UAAA+wD,gBAAI,WACIhyD,KAAKmwD,qBAAuB,QAIhCH,EAAJ/uD,UAAAgxD,iBAAI,SAAiBxuD,GACbzD,KAAKowD,eAAetsD,KAAKL,GACzBzD,KAAKkyD,cAAe,GAGxBlC,EAAJ/uD,UAAAkxD,kBAAI,SAAkB1uD,GACdzD,KAAKkyD,cAAe,EAQE,UAAlBzuD,EAAMuK,SAA4D,IAArChO,KAAKihD,YAAY3gC,kBAC9C7c,EAAMhB,QAAQwhB,UAAY,mBAlTtCxd,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,cACVwC,SAAJ,sZACIqB,QAAS,4sBACTH,gBAAiBC,EAAAA,wBAAwBC,OACzCL,cAAeC,EAAAA,kBAAkBC,KACjCxD,SAAU,aACVyE,YACIkkD,GAAqBC,kBACrBD,GAAqBI,aAEzB/mD,YACMiS,QAASmzC,GAAmBjzC,YAAag1C,4CAjFnDvpD,KAAIS,EAAAA,aAKJT,KAAIU,EAAAA,SAkOJV,SAAAa,GAAAC,aAAAd,KAASe,EAAAA,OAATb,MAAgBkpD,2BAhJhBS,YAAA7pD,KAAKqB,EAAAA,QAcL0oD,YAAA/pD,KAAKqB,EAAAA,QAcLipD,kBAAAtqD,KAAKqB,EAAAA,QAUL+oD,kBAAApqD,KAAKqB,EAAAA,QAUL6J,cAAAlL,KAAKqB,EAAAA,QAeLvH,aAAAkG,KAAKqB,EAAAA,MAALnB,MAAW,WAwCXiL,gBAAAnL,KAAKqB,EAAAA,QAGLsqD,cAAA3rD,KAAKyG,EAAAA,UAALvG,MAAeuJ,EAAAA,eAKfuU,QAAAhe,KAAKm2B,EAAAA,gBAALj2B,MAAqBynD,MAMrBuD,cAAAlrD,KAAKiiB,EAAAA,aAAL/hB,MAAkBqmD,MAKlBp+C,SAAAnI,KAAKmB,EAAAA,UAyKLooD,KzE1VaqC,GACT,GAAIljD,GAAAA,eAAsC,+BAQjCmjD,IACTx3C,QAASu3C,GACTh1C,MAAOpW,EAAAA,SACPqW,WAAYi1C,GAOVC,GAA8BC,EAAAA,iCAAiCC,SAAS,IAM9E5nD,GAAA,WAyEI,QAAJA,GAAwB6nD,EACApR,EACA8L,EACqCuF,EACzBC,EACQC,EACR/6B,EACZ/e,GAPpB,GAAJ1Z,GAAAU,IAAwBA,MAAxB2yD,SAAwBA,EACA3yD,KAAxBuhD,SAAwBA,EACAvhD,KAAxBqtD,kBAAwBA,EACqCrtD,KAA7D4yD,gBAA6DA,EACzB5yD,KAApC6yD,QAAoCA,EACQ7yD,KAA5C8yD,sBAA4CA,EACR9yD,KAApC+3B,KAAoCA,EACZ/3B,KAAxBgZ,cAAwBA,EA9DZhZ,KAAZ+yD,kBAAgC,WAAM,MAAAzzD,GAAK0zD,UAAY,SASnDhzD,KAAJgzD,UAA0C,KAmCnBhzD,KAAvBizD,eAA4D,GAAIz5C,GAAAA,aAGzCxZ,KAAvBkzD,eAA4D,GAAI15C,GAAAA,aAGpDxZ,KAAZmzD,YAA6C,KACjCnzD,KAAZozD,SAA+B,EACnBpzD,KAAZqzD,mBAAiC/jB,EAAAA,aAAaC,MAClCvvC,KAAZszD,mBAAiChkB,EAAAA,aAAaC,MAWtCgS,EAAS7+C,cAAc+B,iBAAiB,aAAczE,KAAK+yD,kBACvDP,IAEAM,IACAA,EAAsBtE,wBAA0BxuD,KAAKuzD,0BAmYjE,MApcIjyD,QAAJ2I,eAAQa,EAAR7J,UAAA,WAAI,WACI,MAAOjB,MAAK+3B,MAA4B,QAApB/3B,KAAK+3B,KAAK/0B,MAAkB,MAAQ,uCAS5D1B,OAAJ2I,eACQa,EADR7J,UAAA,gBAAI,WAEI,MAAOjB,MAAKwzD,eAGhB,SAAaC,GAAb,GAAJn0D,GAAAU,IACYyzD,KAAazzD,KAAKwzD,YAItBxzD,KAAKwzD,UAAYC,EACjBzzD,KAAKqzD,mBAAmBt8C,cAEpB08C,IACAzzD,KAAKqzD,mBAAqBI,EAAS7kD,OAAOI,eAAelO,UAAU,SAAA4yD,GAC/Dp0D,EAAKq0D,WAGW,UAAXD,GAAiC,QAAXA,IAAqBp0D,EAAKuzD,SACjDvzD,EAAKuzD,QAAQjkD,OAAOvJ,KAAKquD,wCAwCzC5oD,EAAJ7J,UAAAu4B,mBAAI,WACIx5B,KAAK4zD,SACL5zD,KAAK6zD,gBAGT/oD,EAAJ7J,UAAAmC,YAAI,WACQpD,KAAKmzD,cACLnzD,KAAKmzD,YAAY9vD,UACjBrD,KAAKmzD,YAAc,MAGvBnzD,KAAKuhD,SAAS7+C,cAAciB,oBAAoB,aAAc3D,KAAK+yD,kBAC/DP,IAEJxyD,KAAK8zD,wBACL9zD,KAAKqzD,mBAAmBt8C,eAI5BzV,OAAJ2I,eAAQa,EAAR7J,UAAA,cAAI,WACI,MAAOjB,MAAKozD,yCAIhBtoD,EAAJ7J,UAAAsyD,uBAAI,WACI,SAAUvzD,KAAK8yD,wBAAyB9yD,KAAK6yD,UAIjD/nD,EAAJ7J,UAAAoK,OAAI,WAEI,MAAOrL,MAAKozD,QAAUpzD,KAAK2O,QAAU3O,KAAK2P,QAI9C7E,EAAJ7J,UAAA0O,KAAI,WAAA,GAAJrQ,GAAAU,IACQ,KAAIA,KAAKozD,QAAT,CAIApzD,KAAK4zD,QAEb,IAAc3zD,GAAaD,KAAK+zD,iBAClBtiD,EAAgBxR,EAAWsF,WAEjCvF,MAAKg0D,aAAaviD,EAA8B,kBAChDA,EAAcE,YAA2C,MAA7B3R,KAAKyzD,SAAS9hD,aAAuB3R,KAAKuzD,yBAClEvzD,KAAKyzD,SAAS9hD,YAClB1R,EAAW6E,OAAO9E,KAAKi0D,cAEnBj0D,KAAKyzD,SAAS9B,aACd3xD,KAAKyzD,SAAS9B,YAAY7sD,OAAO9E,KAAKoF,MAG1CpF,KAAKqzD,mBAAqBrzD,KAAKk0D,kBAAkBpzD,UAAU,WAAM,MAAAxB,GAAKqP,UACtE3O,KAAKm0D,QAEDn0D,KAAKyzD,mBAAoBzD,KACzBhwD,KAAKyzD,SAAS1B,oBAKtBjnD,EAAJ7J,UAAA0N,MAAI,WACI3O,KAAKyzD,SAAS7kD,OAAOvJ,QAOzByF,EAAJ7J,UAAA2Y,MAAI,SAAMpU,OAAV,KAAAA,IAAUA,EAAV,WACYxF,KAAKgZ,cACLhZ,KAAKgZ,cAAca,SAAS7Z,KAAKuhD,SAAS7+C,cAAe8C,GAEzDxF,KAAKuhD,SAAS7+C,cAAckX,SAK5B9O,EAAZ7J,UAAA0yD,SAAI,WAAA,GAAJr0D,GAAAU,IACQ,IAAKA,KAAKmzD,aAAgBnzD,KAAKo0D,OAA/B,CAIR,GAAcX,GAAWzzD,KAAKyzD,QAEtBzzD,MAAKqzD,mBAAmBt8C,cACxB/W,KAAKmzD,YAAYpyD,SAEb0yD,YAAoBzD,KACpByD,EAASzB,kBAELyB,EAAS9B,YAET8B,EAASrD,eACJzvD,KACGmN,EAAAA,OAAO,SAACrK,GAAU,MAAkB,SAAlBA,EAAMuK,UACxBG,EAAAA,KAAK,GAELvN,EAAAA,UAAU6yD,EAAS9B,YAAYpE,YAElCzsD,UAAU,WAAM,MAAA2yD,GAAoB,YAAE1yD,cAAUuG,GAAW,WAExDhI,EAAK+0D,WAGbr0D,KAAKq0D,WAGTr0D,KAAKq0D,SAEDZ,EAAS9B,aACT8B,EAAS9B,YAAY5wD,YASzB+J,EAAZ7J,UAAAkzD,MAAI,WACIn0D,KAAKyzD,SAAStrB,OAASnoC,KAAKuzD,yBAA2BvzD,KAAK6yD,YAAUvrD,GACtEtH,KAAKyzD,SAASrzD,UAAYJ,KAAKo9B,IAC/Bp9B,KAAKs0D,cAAa,GAClBt0D,KAAKyzD,SAAS/B,eAAe1xD,KAAKgzD,WAAa,YAO3CloD,EAAZ7J,UAAAozD,OAAI,WACIr0D,KAAKs0D,cAAa,GAKbt0D,KAAKgzD,UAIEhzD,KAAKuzD,0BACbvzD,KAAK4Z,MAAM5Z,KAAKgzD,WAFhBhzD,KAAK4Z,QAKT5Z,KAAKgzD,UAAY,MAIbloD,EAAZ7J,UAAAqzD,aAAI,SAAqBnsD,GACjBnI,KAAKozD,QAAUjrD,EAEfnI,KAAKozD,QAAUpzD,KAAKizD,eAAe5tD,OAASrF,KAAKkzD,eAAe7tD,OAE5DrF,KAAKuzD,2BACLvzD,KAAK8yD,sBAAsBvE,aAAepmD,IAQ1C2C,EAAZ7J,UAAA2yD,OAAI,WACS5zD,KAAKyzD,UACNc,KAQAzpD,EAAZ7J,UAAA8yD,eAAI,WACI,IAAK/zD,KAAKmzD,YAAa,CAC/B,GAAkB3lD,GAASxN,KAAKw0D,mBACpBx0D,MAAKy0D,sBAAsBjnD,EAAuB,kBAClDxN,KAAKmzD,YAAcnzD,KAAK2yD,SAASxyD,OAAOqN,GAKxCxN,KAAKmzD,YAAYzkD,gBAAgB5N,YAGrC,MAAOd,MAAKmzD,aAORroD,EAAZ7J,UAAAuzD,kBAAI,WACI,MAAO,IAAI9iD,GAAAA,eACPrR,iBAAkBL,KAAK2yD,SAASrtD,WAC3B0Y,oBAAoBhe,KAAKuhD,UACzBmT,qBACAz2C,sBAAsB,uBAC3BrM,cAAe5R,KAAKyzD,SAAS7hD,eAAiB,mCAC9CpR,eAAgBR,KAAK4yD,kBACrBxyD,UAAWJ,KAAK+3B,QAShBjtB,EAAZ7J,UAAAwzD,sBAAI,SAA8BnvD,GAA9B,GAAJhG,GAAAU,IACYA,MAAKyzD,SAASvC,oBACd5rD,EAASiZ,gBAAgBzd,UAAU,SAAArB,GAC/C,GAAsBoyD,GAA6D,UAAnCpyD,EAAOkC,eAAeG,SAAuB,QAAU,SACjFgwD,EAA6D,QAAnCryD,EAAOkC,eAAeI,SAAqB,QAAU,OAErFzC,GAAKm0D,SAA2B,mBAAE5B,EAAMC,MAU5ChnD,EAAZ7J,UAAA+yD,aAAI,SAAqB3zD,GAEb,GAAA6F,GAAZ,WAAAlG,KAAAyzD,SAAAnD,yCAGA,QAAA,MAAA,QAAA,OAHa1uD,EAGbsE,EAAA,GAHsByuD,EAGtBzuD,EAAA,GAHuCpE,EAGvCoE,EAAA,GAHiD0uD,EAGjD1uD,EAAA,GAEYm7C,EAAZ,UAAArhD,KAAAyzD,SAAAjD,2CAGA,MAAA,SAAA,MAAA,UAHazuD,EAGbs/C,EAAA,GAHuBwT,EAGvBxT,EAAA,GAHyCx/C,EAGzCw/C,EAAA,GAHkDyT,EAGlDzT,EAAA,GAEYl8B,EAAU,CAEVnlB,MAAKuzD,0BAGLqB,EAAmBhzD,EAAsC,WAA5B5B,KAAKyzD,SAASnD,UAAyB,QAAU,MAC9EqE,EAAkB7yD,EAAuB,QAAZF,EAAoB,QAAU,MAC3DujB,EAAuB,WAAbpjB,EAzVkB,GAAA,IA2VvB/B,KAAKyzD,SAAS1C,kBACflvD,EAAuB,QAAbE,EAAqB,SAAW,MAC1C+yD,EAAuC,QAArBD,EAA6B,SAAW,OAGzD70D,KAAKyzD,SAAS5C,kBACf+D,EAAmBhzD,EAAsC,WAA5B5B,KAAKyzD,SAASnD,UAAyB,QAAU,MAC9EqE,EAAkB7yD,EAAuB,QAAZF,EAAoB,QAAU,QAInEvB,EAAiBsF,gBACZ/D,QAAbA,EAAsBC,QAAtBA,EAA+BC,SAA/BA,EAAyCC,SAAzCA,EAAmDojB,QAAnDA,IACavjB,QAAS+yD,EAAiB9yD,QAAvCA,EAAgDC,SAAU8yD,EAAkB7yD,SAA5EA,EAAsFojB,QAAtFA,IAEgBvjB,QAAhBA,EACgBC,QAASizD,EACThzD,SAAhBA,EACgBC,SAAU8yD,EACV1vC,SAAUA,IAGVvjB,QAAS+yD,EACT9yD,QAASizD,EACThzD,SAAU8yD,EACV7yD,SAAU8yD,EACV1vC,SAAUA,MAMdra,EAAZ7J,UAAA6yD,sBAAI,WACI9zD,KAAKqzD,mBAAmBt8C,cACxB/W,KAAKszD,mBAAmBv8C,eAIpBjM,EAAZ7J,UAAAizD,gBAAI,WAAA,GAAJ50D,GAAAU,KACc+0D,EAAW/0D,KAAgB,YAAEyO,gBAC7B/N,EAAcV,KAAgB,YAAEU,cAChCs0D,EAAch1D,KAAK6yD,QAAU7yD,KAAK6yD,QAAQjkD,OAASwjC,EAAAA,KACnD6iB,EAAQj1D,KAAK6yD,QAAU7yD,KAAK6yD,QAAQvE,WAAW3tD,KACjDmN,EAAAA,OAAO,SAAC2xB,GAAW,MAAAA,KAAWngC,EAAKwzD,wBACnChlD,EAAAA,OAAO,WAAM,MAAAxO,GAAK8zD,WAClBhhB,EAAAA,IAEJ,OAAO5jC,GAAAA,MAAMumD,EAAUC,EAAaC,EAAOv0D,IAIvCoK,EAAZ7J,UAAAi0D,iBAAI,SAAyBzxD,GAGrBzD,KAAKgzD,UAA6B,IAAjBvvD,EAAMykD,OAAe,QAAU,KAK5CloD,KAAKuzD,0BACL9vD,EAAMob,kBAKN/T,EAAZ7J,UAAAuwD,eAAI,SAAuB/tD,GAC3B,GAAcU,GAAUV,EAAMU,OAElBA,KAAYsa,EAAAA,OAASta,IAAYqa,EAAAA,OACjCxe,KAAK2P,OAGL3P,KAAKuzD,2BACJpvD,IAAYmb,EAAAA,aAA4B,QAAbtf,KAAKo9B,KAChCj5B,IAAYkb,EAAAA,YAA2B,QAAbrf,KAAKo9B,MAChCp9B,KAAK2P,QAKL7E,EAAZ7J,UAAAk0D,aAAI,SAAqB1xD,GACbzD,KAAKuzD,0BAEL9vD,EAAMyW,kBACNla,KAAK2P,QAEL3P,KAAKqL,UAKLP,EAAZ7J,UAAA4yD,aAAI,WAAA,GAAJv0D,GAAAU,IAEaA,MAAKuzD,2BAIVvzD,KAAKszD,mBAAqBtzD,KAAK6yD,QAAQvE,WAIlC3tD,KACGmN,EAAAA,OAAO,SAAC2xB,GAAW,MAAAA,KAAWngC,EAAKwzD,wBAA0BrzB,EAAO/6B,WACpE0wD,EAAAA,MAAM,EAAGC,EAAAA,gBAEZv0D,UAAU,WACPxB,EAAK0zD,UAAY,QAKb1zD,EAAKm0D,mBAAoBzD,KAAc1wD,EAAKm0D,SAASvB,aAGrD5yD,EAAKm0D,SAASrD,eACTzvD,KAAKwN,EAAAA,KAAK,GAAIinD,EAAAA,MAAM,EAAGC,EAAAA,eAAgBz0D,EAAAA,UAAUtB,EAAKuzD,QAAQvE,aAC9DxtD,UAAU,WAAM,MAAAxB,GAAKqQ,SAE1BrQ,EAAKqQ,WAMb7E,EAAZ7J,UAAAgzD,WAAI,WAQI,MAJKj0D,MAAKytD,SAAWztD,KAAKytD,QAAQ2E,cAAgBpyD,KAAKyzD,SAASrB,cAC5DpyD,KAAKytD,QAAU,GAAIr9C,GAAAA,eAAepQ,KAAKyzD,SAASrB,YAAapyD,KAAKqtD,oBAG/DrtD,KAAKytD,wBAtdpBhnD,KAACC,EAAAA,UAADC,OACIC,SAAU,yBACVE,MACIwuD,gBAAiB,OACjBC,uBAAwB,iBACxBC,cAAe,2BACfzuD,YAAa,yBACbyM,UAAW,wBAEf3M,SAAU,4DArDdJ,KAAIQ,EAAAA,UAjBJR,KAAIS,EAAAA,aASJT,KAAIY,EAAAA,mBAgIJZ,SAAAa,GAAAC,aAAAd,KAAiBe,EAAAA,OAAjBb,MAAwB0rD,QAzGxB5rD,KAASupD,GAATzoD,aAAAd,KA0GiBkB,EAAAA,aA7GjBlB,KAAS2nD,GAAT7mD,aAAAd,KA8GiBkB,EAAAA,WA9GjBlB,KA8G6BsE,EAAAA,SA/H7BtE,KAAoBiB,EAAAA,eAApBH,aAAAd,KAgIiBkB,EAAAA,aAjIjBlB,KAASoE,EAAAA,kCAiFT4oD,WAAAhtD,KAAKqB,EAAAA,MAALnB,MAAW,0BA4BXvB,OAAAqB,KAAKqB,EAAAA,MAALnB,MAAW,2BAGXssD,iBAAAxsD,KAAKmB,EAAAA,SAGLsrD,iBAAAzsD,KAAKmB,EAAAA,UAwZLkD,K0E9gBA2qD,GAAA,WAAA,QAAAA,MAU+B,sBAV/BhvD,KAAC8B,EAAAA,SAAD5B,OACI+B,SACIC,EAAAA,aACAC,EAAAA,cACAiD,IAEJpD,SAAUunD,GAAY5B,GAAgBtjD,GAAmBkiD,IACzDxkD,cAAewnD,GAAY5B,GAAgBtjD,GAAmBkiD,IAC9DnkD,WAAYypD,QAEhBmD,KClBAC,GAAA,WAAA,QAAAA,MAcA,sBAdAjvD,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,aACVqQ,qBAAqB,EACrB7N,SAAJ,4BACIqB,QACI,mDAIJ3D,MACI6uD,4BAA6B,YAIrCD,KCdAE,GAAA,WAAA,QAAAA,MAcA,sBAdAnvD,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,YACVqQ,qBAAqB,EACrB7N,SAAJ,4BACIqB,QACI,mDAIJ3D,MACI+uD,2BAA4B,YAIpCD,KCdAE,GAAA,WAAA,QAAAA,MAcA,sBAdArvD,KAAC0C,EAAAA,UAADxC,OACIC,SAAW,YACXqQ,qBAAqB,EACrB7N,SAAJ,4BACIqB,QACI,mDAIJ3D,MACIivD,2BAA4B,YAIpCD,KCdAE,GAAA,WAAA,QAAAA,KAaIh2D,KAAJi2D,YAAiB,EACjB,sBAdAxvD,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,YACVqQ,qBAAqB,EACrBxM,QAAS,sfACTrB,SAAJ,4BACItC,MACIovD,oBAAqB,OACrBC,gCAAiC,cAErChsD,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,WAI7CwrD,KCFAI,GAAA,WA2DI,QAAJA,GACoCC,GAAAr2D,KAApCq2D,kBAAoCA,EA5CvBr2D,KAAbs2D,SAAwB,IACXt2D,KAAbu2D,iBAAgC,GAqBlBv2D,KAAdw2D,kBAAkC,GAAIh9C,GAAAA,aAE1BxZ,KAAZ27C,WAAwB,EACZ37C,KAAZy2D,aAA0B,EA2B1B,MAjDIn1D,QAAJ2I,eACQmsD,EADRn1D,UAAA,qBAKI,WACI,MAAOjB,MAAKy2D,iBANhB,SACkBzzD,GACdhD,KAAKy2D,YAAcpuB,EAAUrlC,oCAOjC1B,OAAJ2I,eACQmsD,EADRn1D,UAAA,mBAKI,WACI,MAAOjB,MAAK27C,eANhB,SACgB34C,GACZhD,KAAK27C,UAAYtT,EAAUrlC,oCAa/B1B,OAAJ2I,eAAQmsD,EAARn1D,UAAA,cAAI,WACI,MAAIjB,MAAK02D,YACE,OAAO12D,KAAKu2D,iBAA/B,KAEmB,OAAOv2D,KAAK81C,QAA/B,sCAIIx0C,OAAJ2I,eAAQmsD,EAARn1D,UAAA,eAAI,WACI,MAAIjB,MAAK02D,YACE12D,KAAKu2D,iBAELv2D,KAAKs2D,0CAQpBF,EAAJn1D,UAAAiC,SAAI,WACQlD,KAAKq2D,oBACLr2D,KAAKq2D,kBAAkBJ,YAAa,mBAjEhDxvD,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,aACVqQ,qBAAqB,EACrB7N,SAAJ,0EACItC,MACI6vD,4BAA6B,OAC7BC,sCAAuC,cACvCC,eAAgB,SAChBC,uBAAwB,UACxBC,uBAAwB,UACxBC,mBAAoB,WAExB1sD,gBAAiBC,EAAAA,wBAAwBC,+CAf7C/D,KAASuvD,GAATzuD,aAAAd,KA+DSkB,EAAAA,WA/DTlB,KA+DqBwwD,EAAAA,4BA5CrBX,WAAA7vD,KAAKqB,EAAAA,QACLyuD,mBAAA9vD,KAAKqB,EAAAA,QAELovD,gBAAAzwD,KAAKqB,EAAAA,QASL4uD,cAAAjwD,KAAKqB,EAAAA,QAUL0uD,oBAAA/vD,KAAKmB,EAAAA,UA8BLwuD,KCzEAe,GAAA,WAAA,QAAAA,MAkBA,sBAlBA1wD,KAAC8B,EAAAA,SAAD5B,OACI+B,SAAWC,EAAAA,cACXF,SACIutD,GACAN,GACAE,GACAE,GACAM,IAEJ5tD,cACIwtD,GACAN,GACAE,GACAE,GACAM,QAIRe,KxBcAvU,GAAA,WA+DI,QAAJA,GACgBrB,EACArC,EAEDkY,GAHCp3D,KAAhBuhD,SAAgBA,EACAvhD,KAAhBk/C,gBAAgBA,EAEDl/C,KAAfo3D,cAAeA,EAhDXp3D,KAAJkiD,WAAyB,EAOZliD,KAAbq3D,iBAAoD,QAkCxCr3D,KAAZ2gC,WAAwB,EACZ3gC,KAAZoU,WAAwB,EA8FxB,MA7HI9S,QAAJ2I,eACQ24C,EADR3hD,UAAA,gBAAI,WAEI,MAAOjB,MAAKoU,WAAcpU,KAAKo3D,eAAiBp3D,KAAKo3D,cAAc1yD,cAGvE,SAAa1B,GACjB,GAAcopB,GAAWic,EAAUrlC,EAEvBopB,KAAapsB,KAAKoU,YAClBpU,KAAKoU,UAAYgY,EACjBpsB,KAAKk/C,gBAAgBh9C,iDAI7BZ,OAAJ2I,eACQ24C,EADR3hD,UAAA,gBAAI,WAEI,MAAOjB,MAAKo3D,cAAcn9B,iBAAmBj6B,KAAKo3D,cAAcn9B,gBAAgBrX,WAAW5iB,QAAS,OAGxG,SAAagD,GACjB,GAAc4f,GAAaylB,EAAUrlC,EAEzB4f,KAAe5iB,KAAK2gC,YACpB3gC,KAAKsoC,YAAY1lB,GAEjB5iB,KAAKo3D,cAAc3V,uDAe3BmB,EAAJ3hD,UAAAiC,SAAI,WAAA,GAAJ5D,GAAAU,IACQ,IAAIA,KAAK2gC,UAAW,CAM5B,GAAkB22B,GAAct3D,KAAK2gC,SAEzBjgB,SAAQC,UAAUC,KAAK,YACfthB,EAAKqhC,WAAa22B,KAClBh4D,EAAK4gB,UAAW,EAChB5gB,EAAK4/C,gBAAgBh9C,oBAMrC0gD,EAAJ3hD,UAAAu4B,mBAAI,WACIx5B,KAAKmjD,YAAc,GAAIC,IAAapjD,KAAKqjD,OAAQrjD,KAAKuhD,WAG1DqB,EAAJ3hD,UAAAmC,YAAI,WAAA,GAAJ9D,GAAAU,IACYA,MAAKkgB,UAGLQ,QAAQC,UAAUC,KAAK,WAAM,MAAAthB,GAAK4gB,UAAW,IAGjDlgB,KAAKo3D,cAAcnV,sBAAsBjiD,OAG7C4iD,EAAJ3hD,UAAAoK,OAAI,WACIrL,KAAKkgB,UAAYlgB,KAAKkgB,UAG1B0iC,EAAJ3hD,UAAA2Y,MAAI,WACI5Z,KAAKuhD,SAAS7+C,cAAckX,QAE5B5Z,KAAKo3D,cAActuB,iBAAiB9oC,OAGxC4iD,EAAJ3hD,UAAA6tD,SAAI,WACI,MAAO9uD,MAAKu3D,MAAQv3D,KAAKu3D,MAAM70D,cAAcu+B,YAAc,IAG/D2hB,EAAJ3hD,UAAAqnC,YAAI,SAAYpoB,GACJlgB,KAAK2gC,YAAczgB,GAAalgB,KAAKo3D,cAAcn9B,kBAEvDj6B,KAAK2gC,UAAYzgB,EAEbA,EACAlgB,KAAKo3D,cAAcn9B,gBAAgB9Z,OAAOngB,MAE1CA,KAAKo3D,cAAcn9B,gBAAgB7Z,SAASpgB,MAGhDA,KAAKk/C,gBAAgBh9C,iBAGzB0gD,EAAJ3hD,UAAA0gD,WAAI,WACI,MAAO3hD,MAAKuhD,SAAS7+C,cAAcimC,iBAAiB,GAAGpiB,QAG3Dq8B,EAAJ3hD,UAAAk0D,aAAI,WACQn1D,KAAK0E,UAET1E,KAAKo3D,cAActuB,iBAAiB9oC,OAGxC4iD,EAAJ3hD,UAAAqiD,aAAI,WACQtjD,KAAK0E,UAAY1E,KAAKkiD,YAE1BliD,KAAKkiD,WAAY,IAGrBU,EAAJ3hD,UAAAsiD,YAAI,WACIvjD,KAAKkiD,WAAY,EAEjBliD,KAAKo3D,cAAcp+B,cAGvB4pB,EAAJ3hD,UAAAuiD,gBAAI,WACI,MAAOxjD,MAAKuhD,SAAS7+C,8BAzJ7B+D,KAAC0C,EAAAA,UAADxC,OACIE,SAAU,eACVD,SAAU,iBACVE,MACIyF,SAAU,KAEVtD,MAAO,iBACP+/B,sBAAuB,WACvBwuB,qBAAsB,YACtBlwC,UAAW,iBACXC,SAAU,gBACV/T,UAAW,kBAEfpK,SAAJ,0GACIe,cAAeC,EAAAA,kBAAkBC,KACjC4M,qBAAqB,EACrB3M,gBAAiBC,EAAAA,wBAAwBC,+CApD7C/D,KAAIS,EAAAA,aAOJT,KAAI+E,EAAAA,oBAgGJ/E,KAA8Bs6C,GAA9Bx5C,aAAAd,KADSe,EAAAA,OACTb,MADgBsU,EAAAA,WAAW,WAAM,MAAA8lC,8BA7CjCsC,SAAA58C,KAAKm2B,EAAAA,gBAALj2B,MAAqB88C,MAErB8T,QAAA9wD,KAAKyG,EAAAA,UAALvG,MAAe,UAGf0wD,mBAAA5wD,KAAKqB,EAAAA,QAEL9E,QAAAyD,KAAKqB,EAAAA,QAELpD,WAAA+B,KAAKqB,EAAAA,QAcLoY,WAAAzZ,KAAKqB,EAAAA,SA+GL86C,KAGaD,IACT7nC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAW,WAAM,MAAA8lC,MAC9B7lC,OAAO,iBAKP,QAAJsnC,GAEe3nC,EAEAoF,GAFAjgB,KAAf6a,OAAeA,EAEA7a,KAAfigB,OAAeA,EAEf,MAAAuiC,MAGAiV,GAAA,WAAA,QAAAA,MAAkC,MAAlCA,MAEa5U,GACPr5C,EAAciuD,IAEpB1W,GAAA,SAAAr3C,GAiDI,QAAJq3C,GACgBQ,EACez3C,EACGqf,EACAogB,EACH7qB,GAL3B,GAAJpf,GAOQoK,EAPRG,KAAA7J,OAAAA,WACgBV,GAAhBiiD,SAAgBA,EAbHjiD,EAAb0hD,YAAmC,EAGZ1hD,EAAvBokB,gBAA8E,GAAIlK,GAAAA,aAOtEla,EAAZ8hD,cAA4B9R,EAAAA,aAAaC,MAoKrCjwC,EAAJ05B,WAA6B,aAiGjB15B,EAAZy5B,UAA8C,SAACpf,KA1PvCra,EAAK6pB,WAA4B,OAAfA,GAA6Bkf,EAAUlf,GACzD7pB,EAAKof,SAAwB,OAAbA,GAA2B2pB,EAAU3pB,GACrDpf,EAAKiqC,WAA4B,OAAfA,GAA6BlB,EAAUkB;4BAEzDjqC,EAAKwK,SAAWhH,SAASgH,IAAa,EAEtCxK,EAAK26B,gBAAkB,GAAIX,GAAAA,eAA6Bh6B,EAAKof,YAqPrE,MAlSqC1U,GAArC+2C,EAAAr3C,GAgDIq3C,EAAJ9/C,UAAAu4B,mBAAI,WACIx5B,KAAKghD,WAAa3Y,EAAUroC,KAAKghD,YAEjChhD,KAAKihD,YAAc,GAAIpd,GAAAA,gBAA8B7jC,KAAKggB,SACrDoc,gBACAC,yBAAyBr8B,KAAKghD,YAC9BjnB,0BAA0B/5B,KAAKghD,WAAa,MAAQ,MAErDhhD,KAAKkhD,cACLlhD,KAAKmhD,sBAAsBnhD,KAAKkhD,aAChClhD,KAAKkhD,YAAc,MAIvBlhD,KAAKohD,cAAgBphD,KAAKi6B,gBAAwB,SAAEn5B,UAAU,SAAC2C,GAC3D,IAAmB,GAA/Bm+B,GAAA,EAA+B17B,EAAAzC,EAAMi2B,MAANkI,EAA/B17B,EAAAkL,OAA+BwwB,IAAa,CAA3B,GAAM9rB,GAAvB5P,EAAA07B,EACgB9rB,GAAKoK,UAAW,EAGpB,IAAmB,GAA/BmhC,GAAA,EAA+BC,EAAA79C,EAAMk2B,QAAN0nB,EAA/BC,EAAAlwC,OAA+BiwC,IAAe,CAA7B,GAAMvrC,GAAvBwrC,EAAAD,EACgBvrC,GAAKoK,UAAW,KAIxBlgB,KAAKoqC,oBAGT2W,EAAJ9/C,UAAAmC,YAAI,WACIpD,KAAKohD,cAAcrqC,eAGvBgqC,EAAJ9/C,UAAA2Y,MAAI,WACI5Z,KAAKuhD,SAAS7+C,cAAckX,SAGhCmnC,EAAJ9/C,UAAAugD,UAAI,WACIxhD,KAAKggB,QAAQzc,QAAQ,SAAC0c,GAAW,MAAAA,GAAOqoB,aAAY,KAEpDtoC,KAAKyhD,sBAGTV,EAAJ9/C,UAAAygD,YAAI,WACI1hD,KAAKggB,QAAQzc,QAAQ,SAAC0c,GAAW,MAAAA,GAAOqoB,aAAY,KAEpDtoC,KAAKyhD,sBAGTV,EAAJ9/C,UAAAmpC,iBAAI,YACQpqC,KAAKghD,YAAehhD,KAAKggB,QAAQyc,OAErCz8B,KAAKihD,YAAY5W,eAAezlB,KAAK0lB,MAAMtqC,KAAK2hD,aAAe3hD,KAAKggB,QAAQyc,MAAMklB,gBAItFZ,EAAJ9/C,UAAA6nC,iBAAI,SAAiB7oB,GAGb,GAFAjgB,KAAKihD,YAAYtb,iBAAiB1lB,GAE9BjgB,KAAK2pC,WAAa3pC,KAAK0e,SAAU,CAC7C,GAAkB6rB,GAAgBvqC,KAAKihD,YAAYzW,wBACjCC,EAAczqC,KAAKihD,YAAY3gC,eAEjCiqB,GAAgBE,EAChBzqC,KAAKggB,QAAQzc,QAAQ,SAACuS,EAAMtD,GACpBA,GAAS+3B,GAAiB/3B,GAASi4B,GAAe30B,EAAKwyB,aAAY,KAG3EtoC,KAAKggB,QAAQzc,QAAQ,SAACuS,EAAMtD,GACpBA,GAASi4B,GAAej4B,GAAS+3B,GAAiBz0B,EAAKwyB,aAAY,KAI/EtoC,KAAK2pC,WAAY,MACd,IAAI3pC,KAAK4pC,SAAU,CAGtB,GAFA5pC,KAAK4pC,UAAW,GAEX5pC,KAAK4hD,iBAAiB3hC,GAAW,MAEtCA,GAAO5U,aAEHrL,MAAKmpB,aACLnpB,KAAKggB,QAAQzc,QAAQ,SAACuS,GAAS,MAAAA,GAAKwyB,aAAY,KAChDroB,EAAOqoB,aAAY,GAI3BtoC,MAAKsa,iBAAiB2F,GACtBjgB,KAAKyhD,sBAITV,EAAJ9/C,UAAAsZ,WAAI,SAAWsnC,GACH7hD,KAAKggB,QACLhgB,KAAKmhD,sBAAsBU,OAE3B7hD,KAAKkhD,YAAcW,GAK3Bd,EAAJ9/C,UAAAuZ,iBAAI,SAAiBC,GACbza,KAAK+4B,UAAYte,GAIrBsmC,EAAJ9/C,UAAAyZ,kBAAI,SAAkBD,GACdza,KAAKg5B,WAAave,GAItBsmC,EAAJ9/C,UAAA0Z,iBAAI,SAAiBC,GACT5a,KAAKggB,SACLhgB,KAAKggB,QAAQzc,QAAQ,SAAC0c,GAAW,MAAAA,GAAOvb,SAAWkW,KAI3DmmC,EAAJ9/C,UAAA6gD,wBAAI,WACI,MAAO9hD,MAAKggB,QAAQlS,OAAO,SAACmS,GAAW,MAAAA,GAAOC,WAAUqD,IAAI,SAACtD,GAAW,MAAAA,GAAOjd,SAInF+9C,EAAJ9/C,UAAA8oC,oBAAI,WACJ,GAAca,GAAe5qC,KAAKihD,YAAY3gC,eAEtC,IAAoB,MAAhBsqB,GAAwB5qC,KAAK+hD,cAAcnX,GAAe,CACtE,GAAkBC,GAA8B7qC,KAAKggB,QAAQgD,UAAU4nB,EAEvDC,IAAiB7qC,KAAK4hD,iBAAiB/W,KACvCA,EAAcx/B,SAGdrL,KAAKsa,iBAAiBuwB,MAKlCkW,EAAJ9/C,UAAA2gD,iBAAI,SAAiBI,GACb,QAAShiD,KAAKupC,YAAuD,IAAzCvpC,KAAKi6B,gBAAgB/Z,SAAS9O,QAAgB4wC,EAAW9hC,WAGzF6gC,EAAJ9/C,UAAA0gD,WAAI,WACI,MAAO3hD,MAAKuhD,SAAS7+C,cAAcimC,iBAAiB,GAAGpiB,QAO3Dw6B,EAAJ9/C,UAAAghD,sBAAI,SAAsBhiC,GAClB,GAAIA,EAAOiiC,UAAW,CAC9B,GAAkBC,GAAcniD,KAAKoiD,gBAAgBniC,EAGrCkiC,GAAc,EACdniD,KAAKihD,YAAYoB,wBACM,IAAhBF,GAAqBniD,KAAKggB,QAAQ5O,OAAS,GAClDpR,KAAKihD,YAAYqB,sBAK7BvB,EAAJ9/C,UAAAshD,WAAI,SAAW9+C,GACf,GAAcU,GAAUV,EAAMU,OAItB,QAHAnE,KAAK2pC,UAAYlmC,EAAM8c,SACvBvgB,KAAK4pC,SAAWnmC,EAAMqc,QAEd3b,GACJ,IAAKsa,GAAAA,MACL,IAAKD,GAAAA,MACDxe,KAAK+pC,sBACLtmC,EAAMob,gBAEN,MACJ,KAAKW,GAAAA,KACDxf,KAAKihD,YAAYvhC,qBACjBjc,EAAMob,gBAEN,MACJ,KAAKY,GAAAA,IACDzf,KAAKihD,YAAYthC,oBACjBlc,EAAMob,gBAEN,MACJ,KAAKmrB,GAAAA,QACIhqC,KAAKghD,YAAchhD,KAAKihD,YAAYhX,4BAEzCxmC,EAAMob,gBAEN,MACJ,KAAKqrB,GAAAA,UACIlqC,KAAKghD,YAAchhD,KAAKihD,YAAY9W,wBAEzC1mC,EAAMob,gBAEN,MACJ,SACI7e,KAAKihD,YAAYjiC,UAAUvb,KAKvCs9C,EAAJ9/C,UAAAwgD,mBAAI,WACQzhD,KAAKggB,SACLhgB,KAAK+4B,UAAU/4B,KAAK8hD,4BAK5Bf,EAAJ9/C,UAAAqZ,iBAAI,SAAiB2F,GACbjgB,KAAK0jB,gBAAgBre,KAAK,GAAIm9C,IAAsBxiD,KAAMigB,KAItD8gC,EAAZ9/C,UAAAwhD,kBAAI,SAA0Bz/C,GACtB,MAAOhD,MAAKggB,QAAQlP,KAAK,SAACmP,GAAW,MAAAA,GAAOjd,QAAUA,KAIlD+9C,EAAZ9/C,UAAAkgD,sBAAI,SAA8BU,GAA9B,GAAJviD,GAAAU,IACQA,MAAKggB,QAAQzc,QAAQ,SAAC0c,GAAW,MAAAA,GAAOqoB,aAAY,KAEpDuZ,EACKt+B,IAAI,SAACvgB,GAAU,MAAA1D,GAAKmjD,kBAAkBz/C,KACtC8K,OAAOf,SACPxJ,QAAQ,SAAC0c,GAAW,MAAA,GAAQqoB,aAAY,MAQzCyY,EAAZ9/C,UAAA8gD,cAAI,SAAsBvvC,GAClB,MAAOA,IAAS,GAAKA,EAAQxS,KAAKggB,QAAQ5O,QAItC2vC,EAAZ9/C,UAAAmhD,gBAAI,SAAwBniC,GACpB,MAAOjgB,MAAKggB,QAAQgD,UAAUvQ,QAAQwN,mBAhT9CxZ,KAAC0C,EAAAA,UAADxC,OACIE,SAAU,kBACVD,SAAU,oBACVwC,SAAU,4BACVqB,QAAS,orGACTH,gBAAiBC,EAAAA,wBAAwBC,OACzCL,cAAeC,EAAAA,kBAAkBC,KACjCK,QAAS,WAAY,YACrB5D,MACImC,MAAO,oBACPy5C,aAAc,WACdp7B,UAAW,UACXC,SAAU,eACVxgB,YAAa,qBACbygB,kBAAmB,sBAEvB3e,WAAY85C,IACZ1rC,qBAAqB,0CAzOzBxQ,KAAIS,EAAAA,aA2QJT,KAAAgV,OAAAlU,aAAAd,KAASiV,EAAAA,UAAT/U,MAAmB,gBACnBF,KAAAgV,OAAAlU,aAAAd,KAASiV,EAAAA,UAAT/U,MAAmB,mBACnBF,KAAAgV,OAAAlU,aAAAd,KAASiV,EAAAA,UAAT/U,MAAmB,mBACnBF,KAAAgV,OAAAlU,aAAAd,KAASiV,EAAAA,UAAT/U,MAAmB,mCA7BnBqZ,UAAAvZ,KAAKm2B,EAAAA,gBAALj2B,MAAqBi8C,MAYrB5B,aAAAv6C,KAAKqB,EAAAA,QAGL4b,kBAAAjd,KAAKmB,EAAAA,UA6QLm5C,GAlSqC8B,ICxOrCC,GAAA,WAAA,QAAAA,MAAyB,MAAzBA,MAEAC,GAAA,SAAAr5C,GAAA,QAAAq5C,oDAQwC,MAAZ/4C,GAA5B+4C,EAAAr5C,kBARAjD,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,UACVE,MAAQmC,MAAO,WACfG,SAAU,4BACVqB,QAAS,orGACTH,gBAAiBC,EAAAA,wBAAwBC,OACzCL,cAAeC,EAAAA,kBAAkBC,SAErC04C,GAA4BD,IAO5BE,GAAA,WAAA,QAAAA,MAIuC,sBAJvCv8C,KAACC,EAAAA,UAADC,OACIC,SAAU,gCACVE,MAAQmC,MAAO,oBAEnB+5C,mBAIA,QAAAC,MAA6B,MAA7BA,MAEAC,GAAA,SAAAx5C,GAiBI,QAAJw5C,GAAwB3B,GAApB,GAAJjiD,GACQoK,EADRG,KAAA7J,OAAAA,WAAwBV,GAAxBiiD,SAAwBA,IAmBxB,MAxBgCv3C,GAAhCk5C,EAAAx5C,GASIw5C,EAAJjiD,UAAAu4B,mBAAI,WACIx5B,KAAKmjD,YAAc,GAAIC,IAAapjD,KAAKqjD,OAAQrjD,KAAKuhD,WAG1D2B,EAAJjiD,UAAAqiD,aAAI,WACItjD,KAAKuhD,SAAS7+C,cAAcg0B,UAAUC,IAAI,eAG9CusB,EAAJjiD,UAAAsiD,YAAI,WACIvjD,KAAKuhD,SAAS7+C,cAAcg0B,UAAUqF,OAAO,eAGjDmnB,EAAJjiD,UAAAuiD,gBAAI,WACI,MAAOxjD,MAAKuhD,SAAS7+C,8BAlC7B+D,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,gCACVE,MACImC,MAAO,eACPqe,UAAW,iBACXC,SAAU,iBAEdne,SAAJ,yNACIe,cAAeC,EAAAA,kBAAkBC,KACjC4M,qBAAqB,EACrB3M,gBAAiBC,EAAAA,wBAAwBC,+CA5C7C/D,KAAsFS,EAAAA,gCA+CtFm8C,SAAA58C,KAAKm2B,EAAAA,gBAALj2B,MAAqB88C,OAuBrBP,GAxBgCD,ICrChCS,GAAA,WAAA,QAAAA,MAqB2B,sBArB3Bj9C,KAAC8B,EAAAA,SAAD5B,OACI+B,SACIC,EAAAA,aACAgD,EAAAA,WACAg4C,IAEJl7C,SACIs6C,GACAhC,GACAmC,GACAN,GACAI,IAEJx6C,cACIu6C,GACAhC,GACAmC,GACAN,GACAI,QAGRU,KCXAE,GAAA,WACI,QAAJA,GAAuBt6C,GAAAtJ,KAAvBsJ,YAAuBA,EAEvB,MAAAs6C,MAEaC,GACPnrC,EAAclP,EAAco6C,KAElCE,GAAA,SAAAp6C,GAgCI,QAAJo6C,GAC+Bh6C,EAChBpG,EACCsV,EACAkmC,GAJZ,GAAJ5/C,GAMQoK,EANRG,KAAA7J,KAMc0D,IANd1D,WAEeV,GAAfoE,WAAeA,EACCpE,EAAhB0Z,cAAgBA,EACA1Z,EAAhB4/C,gBAAgBA,EANJ5/C,EAAZ8U,WAAwB,EAShB9U,EAAK0Z,cAAcjP,QAAQrG,EAAWhB,eAAe,GACrDpD,EAAKwK,SAAWhH,SAASgH,IAAa,IAc9C,MAxC4BE,GAA5B85C,EAAAp6C,GAEIpI,OAAJ2I,eACQ65C,EADR7iD,UAAA,gBAAI,WAEI,MAAOjB,MAAKoU,eAGhB,SAAapR,GACjB,GAAcopB,GAAWic,EAAUrlC,EAEvBopB,KAAapsB,KAAKoU,YAClBpU,KAAKoU,UAAYgY,EACjBpsB,KAAKk/C,gBAAgBh9C,iDAiB7B4hD,EAAJ7iD,UAAAmC,YAAI,WACIpD,KAAKgZ,cAAc9O,eAAelK,KAAK0D,WAAWhB,gBAGtDohD,EAAJ7iD,UAAA2Y,MAAI,WACI5Z,KAAKwjD,kBAAkB5pC,SAG3BkqC,EAAJ7iD,UAAAuiD,gBAAI,WACI,MAAOxjD,MAAK0D,WAAWhB,8BApD/B+D,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,YACVwC,SAAU,4BACVkB,gBAAiBC,EAAAA,wBAAwBC,OACzCL,cAAeC,EAAAA,kBAAkBC,KACjCxD,SAAU,SACV4D,QAAS,mgCACTC,QAAS,YACT5D,MACI6D,kBAAmB,mBACnBC,kBAAmB,oDAuB3BnE,KAAAgV,OAAAlU,aAAAd,KAASiV,EAAAA,UAAT/U,MAAmB,gBA1DnBF,KAAIS,EAAAA,aAOJT,KAASoE,EAAAA,eAHTpE,KAAI+E,EAAAA,uCAqCJ9G,WAAA+B,KAAKqB,EAAAA,SAsCLg8C,GAxC4BD,ICnC5BE,GAAA,WAAA,QAAAA,MAQ2B,sBAR3Bt9C,KAAC8B,EAAAA,SAAD5B,OACI+B,SACIC,EAAAA,aACAgD,EAAAA,YAEJnD,cAAes7C,IACfr7C,SAAUq7C,QAEdC,KCJAxO,GAAA,WAyBI,QAAJA,GACwCyO,GAAAhkD,KAAxCgkD,cAAwCA,EAZ5BhkD,KAAZikD,eAA2CjkD,KAAKgkD,cAAgB,QAEpDhkD,KAAZkkD,kBAA+ClkD,KAAKgkD,cAAgB,KAAO,GAAIt2C,GAAAA,QAEnE1N,KAAZmkD,sBAAsEnkD,KAAKgkD,cAAgB,KAAO,GAAItmC,KA6CtG,MA3DIpc,QAAJ2I,eAAQsrC,EAARt0C,UAAA,qBAAI,WACI,MAAOjB,MAAKgkD,cAAgBhkD,KAAKgkD,cAAc3L,cAAgBr4C,KAAsB,mDAIzFsB,OAAJ2I,eAAQsrC,EAARt0C,UAAA,kBAAI,WACI,MAAOjB,MAAKgkD,cAAgBhkD,KAAKgkD,cAAc5L,WAAap4C,KAAmB,gDAWnFsB,OAAJ2I,eAAgBsrC,EAAhBt0C,UAAA,yBAAI,WACI,MAAOjB,MAAKgkD,cAAgBhkD,KAAKgkD,cAAcI,kBAAoBpkD,KAAKmkD,uDAQ5E5O,EAAJt0C,UAAAojD,cAAI,SAAcrM,GAAd,GAAJ14C,GAAAU,IACQ,KAAKA,KAAKskD,cAActM,GAAW,CAC3C,GAAkBuM,GAAwBvM,EAASwM,UAAU1jD,UAAU,WAAM,MAAAxB,GAAK84C,WAAW1nC,KAAKsnC,KAChFyM,EAAyBzM,EAAS0M,WAAW5jD,UAAU,WAAM,MAAAxB,GAAKqlD,gBAAgB3M,IAExFh4C,MAAKokD,kBAAkB7/C,IAAIyzC,GAAWA,SAAlDA,EAA4DuM,sBAA5DA,EAAmFE,uBAAnFA,MAIIlP,EAAJt0C,UAAAqjD,cAAI,SAActM,GACV,MAAOh4C,MAAKokD,kBAAkB3d,IAAIuR,IAItCzC,EAAJt0C,UAAA4P,SAAI,WAGI,IAFR,GAAYs8B,GAAIntC,KAAKo4C,WAAWhnC,OAEjB+7B,KACHntC,KAAKo4C,WAAWjL,GAAGx+B,SAInB4mC,EAAZt0C,UAAA0jD,gBAAI,SAAwB3M,GAC5B,GAAcxlC,GAAQxS,KAAKo4C,WAAW3lC,QAAQulC,EAElCxlC,IAAS,IACTxS,KAAKo4C,WAAW1lC,OAAOF,EAAO,GAEzBxS,KAAKo4C,WAAWhnC,QACjBpR,KAAKq4C,cAAcv0C,wBA3DnC2C,KAACkM,EAAAA,iDA0BDlM,KAAuD8uC,EAAvDhuC,aAAAd,KAASkB,EAAAA,WAATlB,KAAqBoM,EAAAA,cAqCrB0iC,mBClEA,QAAA+B,MAwCA,MAAAA,MC5CAsN,GAAA,WAGI,QAAJA,GAAwBC,GAAA7kD,KAAxB6kD,SAAwBA,EAChB7kD,KAAK8kD,cAAgB1+C,GAAI,EAAGC,GAAI,GAChCrG,KAAK+kD,sBAYb,MATIH,GAAJ3jD,UAAA+jD,qBAAI,WACI,MAAOhlD,MAAK8kD,cAGhBF,EAAJ3jD,UAAA8jD,oBAAI,WAAA,GAAJzlD,GAAAU,IACQA,MAAK6kD,SAASpgD,iBAAiB,QAAS,SAAChB,GACrCnE,EAAKwlD,cAAgB1+C,EAAG3C,EAAMwhD,QAAS5+C,EAAG5C,EAAMyhD,YAG5DN,KAEAO,GAAe,GAAIP,IAAUC,UnBe7BxN,GAAA,SAAA3tC,GAuHI,QAAJ2tC,GACgBn3C,EACAgU,EACAkxC,EACA1hD,EACAunC,EACAoa,EACAlN,EACAmN,EACkBT,GAT9B,GAAJvlD,GAWQoK,EAXRG,KAAA7J,OAAAA,WACgBV,GAAhBY,QAAgBA,EACAZ,EAAhB4U,SAAgBA,EACA5U,EAAhB8lD,IAAgBA,EACA9lD,EAAhBoE,WAAgBA,EACApE,EAAhB2rC,cAAgBA,EACA3rC,EAAhB+lD,0BAAgBA,EACA/lD,EAAhB64C,aAAgBA,EACA74C,EAAhBgmD,eAAgBA,EACkBhmD,EAAlCulD,SAAkCA,EAlHrBvlD,EAAbm2C,YAAsC,UAYlCn2C,EAAJ6c,YAAiB,EAEH7c,EAAd4F,gBAAgC,GAAIsU,GAAAA,aAEvBla,EAAbu2C,SAAgC,IACnBv2C,EAAbw2C,QAAwC,IAK3Bx2C,EAAb42C,cAAqC,EAKjC52C,EAAJimD,aAAkB,EAKdjmD,EAAJkmD,SAAc,EAKVlmD,EAAJmmD,iBAAsB,EAMRnmD,EAAdk3C,YAA4B,GAAIh9B,GAAAA,aAElBla,EAAdm3C,aAA6B,GAAIj9B,GAAAA,aAIpBla,EAAbq3C,SAAwB,UAKpBr3C,EAAJomD,cAAmB,EAEIpmD,EAAvBu3C,OAAsE,GAAIr9B,GAAAA,aAMtEla,EAAJqmD,kBAAuB,EAEArmD,EAAvB03C,WAA0E,GAAIx9B,GAAAA,aAU1Ela,EAAJynB,gBAAsB,cA6CTznB,EAAb83C,eAA2F,WAAM,MAAA93C,GAAKY,QAAQC,YAoV9G,MA/cwD6J,GAAxDqtC,EAAA3tC,GAYIpI,OAAJ2I,eACQotC,EADRp2C,UAAA,iBAAI,WACkB,MAAOjB,MAAKmc,gBAC9B,SAAcnZ,GAAShD,KAAKmc,WAAanZ,mCAczC1B,OAAJ2I,eACQotC,EADRp2C,UAAA,kBAAI,WACmB,MAAOjB,MAAKulD,iBAC/B,SAAeviD,GAAShD,KAAKulD,YAAcviD,mCAG3C1B,OAAJ2I,eACQotC,EADRp2C,UAAA,cAAI,WACe,MAAOjB,MAAKwlD,aAC3B,SAAWxiD,GAAShD,KAAKwlD,QAAUxiD,mCAGnC1B,OAAJ2I,eACQotC,EADRp2C,UAAA,sBAAI,WACuB,MAAOjB,MAAKylD,qBACnC,SAAmBziD,GAAShD,KAAKylD,gBAAkBziD,mCAenD1B,OAAJ2I,eACQotC,EADRp2C,UAAA,mBAAI,WACoB,MAAOjB,MAAK0lD,kBAChC,SAAgB1iD,GAAShD,KAAK0lD,aAAe1iD,mCAM7C1B,OAAJ2I,eACQotC,EADRp2C,UAAA,uBAAI,WACwB,MAAOjB,MAAK2lD,sBACpC,SAAoB3iD,GAAShD,KAAK2lD,iBAAmB3iD,mCAgBrD1B,OAAJ2I,eAAQotC,EAARp2C,UAAA,iBAAI,WACI,MAAOjB,MAAKw2C,YAAYxnC,gDAI5B1N,OAAJ2I,eAAQotC,EAARp2C,UAAA,kBAAI,WACI,MAAOjB,MAAKy2C,aAAaznC,gDAG7B1N,OAAJ2I,eAAQotC,EAARp2C,UAAA,cAAI,WACI,MAAOjB,MAAK02C,0CAGhBp1C,OAAJ2I,eAAQotC,EAARp2C,UAAA,kBAAI,WACI,MAAOjB,MAAK82C,8CAIhBx1C,OAAJ2I,eAAQotC,EAARp2C,UAAA,cAAI,WACI,OAAQjB,KAAKJ,YAAcI,KAAKo2B,gDAyBpCihB,EAAJp2C,UAAAiC,SAAI,WAGQlD,KAAK4lD,YAAY5lD,KAAK01C,YACtB11C,KAAK6lD,uBAAuB7lD,KAAc,WAI1CA,KAAK8lD,eAAe9lD,KAAK41C,YACzB51C,KAAK41C,SAAW51C,KAAK+lD,mBAAmB/lD,KAAa,WAIzDA,KAAK+P,UAA2C,kBAAxB/P,MAAKo3C,eAAgCp3C,KAAKo3C,iBAAmBp3C,KAAKo3C,eACtFp3C,KAAK+P,oBAAqBi2C,aAC1BhmD,KAAK+P,UAAUisB,YAAYh8B,KAAK0D,WAAWhB,eACpC1C,KAAK+P,oBAAqBk2C,GAAAA,YAEjCjmD,KAAK+P,UAAUzN,eAAe05B,YAAYh8B,KAAK0D,WAAWhB,eAI9D1C,KAAKm4C,aAAakM,cAAcrkD,OAQpCq3C,EAAJp2C,UAAAiS,YAAI,SAAYC,GACJA,EAAQvT,WAERI,KAAKkmD,yBAAyBlmD,KAAKJ,WAAYuT,EAAQvT,UAAUumD,cAIzE9O,EAAJp2C,UAAA44B,gBAAI,WAEQ75B,KAAKomD,qBACLpmD,KAAKk3C,cAAcmP,OAAOrmD,KAAKomD,oBAAoB5jD,UAGnDxC,KAAKm3C,mBACJn3C,KAAKm3C,kBAA+B,cAAuBv9B,SAIpEy9B,EAAJp2C,UAAAmC,YAAI,WACQpD,KAAK+P,oBAAqBk2C,GAAAA,YAC1BjmD,KAAK+P,UAAU1M,WAIvBg0C,EAAJp2C,UAAA0O,KAAI,WACI3P,KAAKsmD,yBAAwB,IAGjCjP,EAAJp2C,UAAA0N,MAAI,SAAMN,GACFrO,KAAKsmD,yBAAwB,EAAOj4C,IAIxCgpC,EAAJp2C,UAAAghB,QAAI,SAAQ5T,GACJrO,KAAK2O,MAAMN,IAGfgpC,EAAJp2C,UAAAslD,UAAI,WACIvmD,KAAKwmD,gBAAgB,OAGzBnP,EAAJp2C,UAAAwlD,cAAI,WACIzmD,KAAKwmD,gBAAgB,WAGzBnP,EAAJp2C,UAAA82C,YAAI,WACI,MAAO/3C,OAGXq3C,EAAJp2C,UAAAylD,uBAAI,WACI,MAAO1mD,MAAKomD,qBAGhB/O,EAAJp2C,UAAA0lD,oBAAI,WACI,MAAO3mD,MAAKomD,qBAAuBpmD,KAAKomD,oBAAoBrhD,UAGhEsyC,EAAJp2C,UAAA2lD,WAAI,WACI,MAAO5mD,MAAK0D,YAAc1D,KAAK0D,WAAWhB,eAG9C20C,EAAJp2C,UAAA4lD,YAAI,SAAY1lD,GAEJnB,KAAKo2C,QACLp2C,KAAKq2C,gBACJl1C,EAAa,OAAiBu1B,UAAU+N,SAAS,kBAClDzkC,KAAKJ,WAELI,KAAKwmD,gBAAgB,WAK7BnP,EAAJp2C,UAAA6lD,YAAI,SAAYrgD,GACR,MAAOzG,MAAKy1C,cAAgBhvC,GAGhC4wC,EAAJp2C,UAAA8gB,UAAI,SAAUte,GAEFA,EAAMU,UAAYC,EAAAA,QAAUpE,KAAK+P,WAAc/P,KAAK+P,oBAAqBk2C,GAAAA,aAEzEjmD,KAAK2O,QACLlL,EAAMob,mBAKdw4B,EAAJp2C,UAAA8lD,gBAAI,WACQ/mD,KAAKJ,WACLI,KAAKwmD,gBAAgB,WAM7BnP,EAAJp2C,UAAAulD,gBAAI,SAAgB//C,GAAhB,GAAJnH,GAAAU,KACc4J,GAAYo9C,GAAIhnD,KAAK62C,OAAQoQ,OAAQjnD,KAAKg3C,YAAavwC,GACvDygD,GAAeF,GAAI,cAAeC,OAAQ,mBAAoBxgD,EAEpE,IAAImD,YAAmB4P,GAAAA,aACnB5P,EAAQvE,KAAKrF,KAAK2mD,2BACf,IAAuB,kBAAZ/8C,GAAwB,CAElD,GAAkByE,GAASzE,EAAQ5J,KAAK2mD,uBAEtBQ,EAAY,SAACC,GAAiC,OAAa,IAAZA,GAAsB9nD,EAAKqP,MAAK,GAErF,IAAI04C,EAAUh5C,GAAS,CACnBrO,KAAKknD,IAAc,CACnC,IAAsBI,GAAa,SAACF,GAChB9nD,EAAK4nD,IAAc,EACnBC,EAAUC,GAEd,GAA0BxmC,KAAK0mC,GAAYC,MAAMD,OAEjDH,GAAU94C,KAMtBgpC,EAAJp2C,UAAAumD,iBAAI,SAAiBxkD,GACb,MAAwB,gBAAVA,IAAgC,KAAVA,GAIxCq0C,EAAJp2C,UAAAwmD,cAAI,SAAczkD,GACV,MAAOA,aAAiBkN,GAAAA,aAI5BmnC,EAAJp2C,UAAA2kD,YAAI,SAAY5iD,GACR,MAAOA,aAAiB0kD,GAAAA,MAI5BrQ,EAAJp2C,UAAA6kD,eAAI,SAAe9iD,GACX,MAAOge,OAAMC,QAAQje,IAAUA,EAAMoO,OAAS,GAI1CimC,EAAZp2C,UAAAilD,yBAAI,SAAiCtpC,EAAkB+qC,EAA2BC,GAA9E,GAAJtoD,GAAAU,IAMQ,YANR,KAAA2nD,IAAuDA,GAAvD,GAEY/qC,GACA5c,KAAK6nD,mBAAmB,GAGrBnnC,QACFC,QAAQgnC,GAAa3nD,KAAK8nD,UAAUlrC,IAEpCgE,KAAK,WACEhE,EACAtd,EAAKk3C,YAAYnxC,QAEjB/F,EAAKm3C,aAAapxC,KAAKuiD,GAEvBtoD,EAAKuoD,yBAQrBxQ,EAAJp2C,UAAA8mD,sBAAI,SAAsB/nC,EAAiCgoC,GAC3D,GAAchlD,GAAQgd,EAAQgoC,GAChBrhD,IAKN,OAJI3G,MAAKomD,qBACLz/C,EAAK+J,KAAK1Q,KAAKomD,oBAAoBrhD,UAGf,kBAAV/B,GAAuBA,EAAMw1B,MAAMxY,EAASrZ,GAAQ3D,GAMtEq0C,EAAJp2C,UAAAgnD,cAAI,SAAcC,GAElB,GAAc75C,GAASrO,KAAK+nD,sBAAsBG,EAAQ,UAC9Cb,GAAUh5C,KACV65C,EAAOC,SAAU,EACjB,EAAwBvnC,KAAK,WAAM,MAAAsnC,GAAOC,SAAU,IAAOZ,MAAM,WAAM,MAAAW,GAAOC,SAAU,MAKxF9Q,EAAZp2C,UAAAqlD,wBAAI,SAAgC1pC,EAAkBgrC,GAC9C,MAAI5nD,MAAKJ,YAAcgd,GAEnB5c,KAAKJ,UAAYgd,EACjB5c,KAAKkF,gBAAgBG,KAAKuX,GAEnB5c,KAAKkmD,yBAAyBtpC,GAAS,EAAMgrC,IAGjDlnC,QAAQC,WAGX02B,EAAZp2C,UAAAmnD,qBAAI,SAA6B1wC,UACzB1X,MAAKo2B,eAAiB1e,EAClBA,GACA1X,KAAKqoD,uBAAjBniD,KACgBA,EAAC,QAAQwR,IAAU,EACnBxR,EAAC,QAAQwR,EAAzB,YAA0C,EAC1CxR,GACYlG,KAAKsoD,wBAAjBjH,KACgBA,EAAC,QAAQ3pC,IAAU,EACnB2pC,EAAC,QAAQ3pC,EAAzB,YAA0C,EAC1C2pC,IAGYrhD,KAAKqoD,sBAAwBroD,KAAKsoD,uBAAyB,KAG3DtoD,KAAKomD,oBACLpmD,KAAKomD,oBAAoB5kC,kBAAkBtf,eAE3ClC,KAAKslD,eAAepjD,gBAIpBm1C,EAAZp2C,UAAA6mD,UAAI,SAAkBS,GAAlB,GAAJjpD,GAAAU,IAWQ,OATIuoD,IAGA38B,OAAO5Y,WAAW,WAAM,MAAA1T,GAAKkpD,0BAGjCxoD,KAAKooD,qBAAqBG,EAAY,QAAU,SAGzC,GAAI7nC,SAAQ,SAACC,GAAY,MAAAiL,QAAO5Y,WAAW,WAC9C1T,EAAK8oD,qBAAqB,MAC1BznC,KApZ0B,QAwZ1B02B,EAAZp2C,UAAA8kD,mBAAI,SAA2B0C,GACvB,MAAOA,GAAQllC,IAAI,SAAC2kC,GAEhB,MAAZtiD,KAEoBa,KAAM,UACNmO,KAAM,UACN8zC,aAAa,EACblkD,MAAM,EACN2jD,SAAS,EACTzjD,UAAU,GAEXwjD,MAUP7Q,EAAZp2C,UAAA4kD,uBAAI,SAA+B8C,GACnC,GAAcC,GAAU5oD,KAAKolD,IAAIyD,wBAAwBF,GAC3CG,EAAgBl2C,EAAAA,SAASzS,QAC3B0I,YAAaiS,QAASw8B,GAAYziB,SAAU70B,OAC5CmoC,OAAQnoC,KAAKirC,cAAc8d,gBAG/B/oD,MAAKomD,oBAAsBwC,EAAQzoD,OAAO2oD,GAEtC9oD,KAAK21C,mBACLr0C,OAAO22C,OAAOj4C,KAAKomD,oBAAoBrhD,SAAU/E,KAAK21C,mBAK1D31C,KAAKomD,oBAAoB5kC,kBAAkB+U,iBAMvC8gB,EAAZp2C,UAAAunD,sBAAI,WACJ,GAAcQ,GAAehpD,KAAKi3C,eAA4B,cAChD6N,EAAeF,GAAUI,sBAE3BF,KAEA9kD,KAAK+mB,gBAAqB+9B,EAAa1+C,EAAI4iD,EAAapY,WAApE,OAAoFkU,EAAaz+C,EAAI2iD,EAAa3tB,WAAlH,WAQYgc,EAAZp2C,UAAA4mD,mBAAI,SAA2BoB,OAA/B,KAAAA,IAA+BA,EAA/B,GAC2BjpD,KAAKm4C,aAAaC,WAEtBhnC,OAAS63C,EAAU,GAE9BjpD,KAAKkU,SAASkB,SAASpV,KAAK6kD,SAASqE,KAAM,gBAAoBlpD,KAAKqlD,0BAA0B8D,eAA1G,MACYnpD,KAAKkU,SAASkB,SAASpV,KAAK6kD,SAASqE,KAAM,WAAY,YAEvDlpD,KAAKkU,SAAS6D,YAAY/X,KAAK6kD,SAASqE,KAAM,iBAC9ClpD,KAAKkU,SAAS6D,YAAY/X,KAAK6kD,SAASqE,KAAM,6BAtd1DziD,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,WACVwC,SAAJ,quHACIqB,QAAS;smGACTH,gBAAiBC,EAAAA,wBAAwBC,OACzCL,cAAeC,EAAAA,kBAAkBC,KACjCvD,MACIC,YAAa,6DAvBrBN,KAASQ,EAAAA,UARTR,KAAIyQ,EAAAA,YAXJzQ,KAAI+pC,EAAAA,2BAEJ/pC,KAAIS,EAAAA,aAcJT,KAAIY,EAAAA,mBAIJZ,KAAS6uC,KAGT7uC,KAAS8uC,KAzBT9uC,KAA4C+E,EAAAA,oBAqK5C/E,SAAAa,GAAAC,aAAAd,KAASe,EAAAA,OAATb,MAAgB6uC,EAAAA,iCAlHhBC,cAAAhvC,KAAKqB,EAAAA,QAEL4tC,YAAAjvC,KAAKqB,EAAAA,QAEL6tC,oBAAAlvC,KAAKqB,EAAAA,QAEL8tC,WAAAnvC,KAAKqB,EAAAA,QAELlI,YAAA6G,KAAKqB,EAAAA,QAML5C,kBAAAuB,KAAKmB,EAAAA,SAELiuC,WAAApvC,KAAKqB,EAAAA,QACLguC,UAAArvC,KAAKqB,EAAAA,QACLiuC,kBAAAtvC,KAAKqB,EAAAA,QACLkuC,cAAAvvC,KAAKqB,EAAAA,QACLmuC,UAAAxvC,KAAKqB,EAAAA,QACLD,UAAApB,KAAKqB,EAAAA,QACLouC,eAAAzvC,KAAKqB,EAAAA,QAELquC,aAAA1vC,KAAKqB,EAAAA,QAKLsuC,SAAA3vC,KAAKqB,EAAAA,QAKLuuC,iBAAA5vC,KAAKqB,EAAAA,QAKLwuC,cAAA7vC,KAAKqB,EAAAA,QACLyuC,cAAA9vC,KAAKqB,EAAAA,QAGL0uC,cAAA/vC,KAAKmB,EAAAA,SAEL6uC,eAAAhwC,KAAKmB,EAAAA,SAGL8uC,WAAAjwC,KAAKqB,EAAAA,QACL6uC,WAAAlwC,KAAKqB,EAAAA,QAEL8uC,cAAAnwC,KAAKqB,EAAAA,QAKL+uC,SAAApwC,KAAKqB,EAAAA,QAALrB,KAAcmB,EAAAA,SACdkvC,eAAArwC,KAAKqB,EAAAA,QAELivC,kBAAAtwC,KAAKqB,EAAAA,QAKLkvC,aAAAvwC,KAAKqB,EAAAA,QAALrB,KAAcmB,EAAAA,SAEdqvC,iBAAAxwC,KAAKyG,EAAAA,UAALvG,MAAe,oBACfuwC,gBAAAzwC,KAAKyG,EAAAA,UAALvG,MAAe,iBAAmBmoC,KAAMznC,EAAAA,qBAExC8vC,oBAAA1wC,KAAKyG,EAAAA,UAALvG,MAAe,qBAAuBmoC,KAAM5nC,EAAAA,eAkD5CkwC,iBAAA3wC,KAAKqB,EAAAA,SAoVLuvC,GA/cwDC,IC9CxDC,GAAA,WAAA,QAAAA,MASA,MALIA,GAAJt2C,UAAA00B,UAAI,SAAU3yB,EAAwBw0C,OAAtC,KAAAA,IAAsCA,EAAtC,KACA,IAAcC,IAAaz0C,CAEnB,OAAO4wB,OAAM6jB,GAAa,GAAGz0C,EAAU,GAAGy0C,EAAYD,kBAP9D/wC,KAACixC,EAAAA,KAAD/wC,OACI2S,KAAM,gBAQVi+B,mBCUI,QAAJI,GAAwBz3C,EAAkB8f,OAA1C,KAAAA,IAA0CA,KAAtC,IAAJ1gB,GAAAU,IAAwBA,MAAxBE,QAAwBA,EAChBF,KAAK43C,cAEC,kBAAoB53B,KACtBA,EAAQo3B,mBAAiB9vC,IAG7BtH,KAAK63C,YAAY73B,GACjBhgB,KAAa,SAAE+E,SAAS4K,OACxB3P,KAAa,SAAE+E,SAAS0xC,aAAa31C,UAAU,WAAM,MAAAxB,GAAKw4C,iBAE1D93C,KAAKC,WAAWyO,gBAEX/N,KAAKmN,EAAAA,OAAO,SAACrK,GACV,MAAOA,GAAMU,UAAYC,EAAAA,QAAU4b,EAAQk2B,gBAE9Cp1C,UAAU,WAAM,MAAAxB,GAAa,SAAEyF,SAAS4J,UA0BrD,MAvBIgpC,GAAJ12C,UAAA82C,YAAI,WACI,MAAO/3C,MAAKg4C,UAAYh4C,KAAKg4C,SAASjzC,UAG1C4yC,EAAJ12C,UAAA62C,aAAI,WACQ93C,KAAKg4C,WACLh4C,KAAKC,WAAWoD,UAChBrD,KAAKg4C,SAAW,OAIhBL,EAAZ12C,UAAA42C,YAAI,SAAoB73B,GACZhgB,KAAKg4C,UAEL12C,OAAO22C,OAAOj4C,KAAKg4C,SAASjzC,SAAUib,IAKtC23B,EAAZ12C,UAAA22C,YAAI,WACI53C,KAAKC,WAAaD,KAAKE,QAAQC,SAC/BH,KAAKg4C,SAAWh4C,KAAKC,WAAW6E,OAAO,GAAIF,GAAAA,gBAAgByyC,MAEnEM,KAEAO,GAAA,WAWI,QAAJA,GACgBh4C,EACAi4C,GADAn4C,KAAhBE,QAAgBA,EACAF,KAAhBm4C,aAAgBA,EAiEhB,MA3EI72C,QAAJ2I,eAAQiuC,EAARj3C,UAAA,kBAAI,WACI,MAAOjB,MAAKm4C,aAAaC,4CAG7B92C,OAAJ2I,eAAQiuC,EAARj3C,UAAA,qBAAI,WACI,MAAOjB,MAAKm4C,aAAaE,cAAcrpC,gDAS3CkpC,EAAJj3C,UAAA4P,SAAI,WACI7Q,KAAKm4C,aAAatnC,YAGtBqnC,EAAJj3C,UAAAd,OAAI,SAAU6f,GAkBN,WAlBR,KAAAA,IAAcA,MAE4B,kBAAvBA,GAAQg3B,aAGfh3B,EAAQg3B,WAAa,cAGnB,gBAAkBh3B,KACpBA,EAAQk2B,cAAe,GAIrB,WAAal2B,KAEfA,EAAQ81B,QAAU,KAGf,GAAI6B,IAAuB33C,KAAKE,QAAS8f,GAAS+3B,eAG7DG,EAAJj3C,UAAAq3C,QAAI,SAAWt4B,EAA0Cu4B,GAgBjD,WAhBR,KAAAv4B,IAAeA,UAAf,KAAAu4B,IAAyDA,EAAzD,WACY,YAAcv4B,IACd4B,QAAQC,KAAK,iFAIa,kBAAnB7B,GAAQ62B,SAGf72B,EAAQ62B,OAAS,cAGrB72B,EAAQy1B,YAAc,UACtBz1B,EAAQg2B,YAAc,yBAAyBuC,EAAvD,KAAsEv4B,EAAQg2B,aAAe,IACrFh2B,EAAQq2B,gBAAiB,EAElBr2C,KAAKG,OAAO6f,IAGvBk4B,EAAJj3C,UAAAu3C,QAAI,SAAWx4B,GACP,WADR,KAAAA,IAAeA,MACAhgB,KAAKy4C,cAAcz4B,EAAS,YAGvCk4B,EAAJj3C,UAAAy3C,OAAI,SAAU14B,GACN,WADR,KAAAA,IAAcA,MACChgB,KAAKy4C,cAAcz4B,EAAS,SAG/Bk4B,EAAZj3C,UAAAw3C,cAAI,SAAyBz4B,EAA0Cu4B,GAO/D,WAPR,KAAAv4B,IAA6BA,MAEf,gBAAkBA,KAEpBA,EAAQ82B,aAAe,MAGpB92C,KAAKs4C,QAAQt4B,EAASu4B,mBA5ErC9xC,KAACkM,EAAAA,iDA5DDlM,KAASQ,EAAAA,UAGTR,KAAS8uC,MAuIT2C,KCnIAS,GAAA,WAAA,QAAAA,MAO6B,sBAP7BlyC,KAAC8B,EAAAA,SAAD5B,OACI+B,SAAWC,EAAAA,aAAcC,EAAAA,cAAegwC,GAAgB/sC,IACxDpD,SAAW4uC,IACX7uC,cAAgB6uC,GAAkBE,IAClCxuC,iBAAmBsuC,IACnBxuC,WAAa0sC,GAAuB2C,QAExCS,KCOME,GAAsB,sBACtBC,GAAiB,iBACjBC,GAAkB,kBAClBC,GAAkB,kBAUxBC,GAAA,WAAA,QAAAA,MAM2B,sBAN3BxyC,KAACC,EAAAA,UAADC,OACIC,SAVmB,iBAWnBE,MACImC,MAZe,sBAevBgwC,KAEAC,GAAA,WAAA,QAAAA,MAM4B,sBAN5BzyC,KAACC,EAAAA,UAADC,OACIC,SAAUmyC,GACVjyC,MACImC,MAAO8vC,QAGfG,KAEAC,GAAA,WAAA,QAAAA,MAM4B,sBAN5B1yC,KAACC,EAAAA,UAADC,OACIC,SAAUoyC,GACVlyC,MACImC,MAAO+vC,QAGfG,KAEAC,GAAA,WACI,QAAJA,GAAuB9vC,GAAAtJ,KAAvBsJ,YAAuBA,EACvB,MAAA8vC,MAEaC,GAA+D7vC,EAAc4vC,IAE1FE,GAAA,SAAA5vC,GA2EI,QAAJ4vC,GACgB51C,EACAsV,EACAugC,EACAC,GAJZ,GAAJl6C,GAMQoK,EANRG,KAAA7J,KAMc0D,IANd1D,WACgBV,GAAhBoE,WAAgBA,EACApE,EAAhB0Z,cAAgBA,EACA1Z,EAAhBi6C,UAAgBA,EACAj6C,EAAhBk6C,OAAgBA,EAjCZl6C,EAAJwK,SAAuB,EAGnBxK,EAAJm6C,iBAiBIn6C,EAAJo6C,aAA2B,EAEfp6C,EAAZq6C,cAA0C,GAAIrK,GAAAA,eA8G9C,MAvIkCtlC,GAAlCsvC,EAAA5vC,GAQIpI,OAAJ2I,eACQqvC,EADRr4C,UAAA,sBAAI,SACmB+B,GACfhD,KAAK0D,WAAWhB,cAAckV,aAAa,gBAAiBgiC,UAAU52C,qCAS1E1B,OAAJ2I,eAAQqvC,EAARr4C,UAAA,0BAAI,WACI,MAAOjB,MAAKy5C,cAAcroC,OAAS,mCAQvC9P,OAAJ2I,eAAgBqvC,EAAhBr4C,UAAA,yBAAI,WACI,MAAOjB,MAAK65C,gBAAkB75C,KAAK65C,gBAAgBn3C,cAAcu5B,iBAAiB,8CAYtFqd,EAAJr4C,UAAAiC,SAAI,WACIlD,KAAK85C,sBAEL95C,KAAK+5C,eAAiB/5C,KAAKgZ,cAAcjP,QAAQ/J,KAAK0D,WAAWhB,eAAe,GAE5E1C,KAAKg6C,oBACLh6C,KAAKi6C,sBAIbX,EAAJr4C,UAAA44B,gBAAI,WACS75B,KAAKg6C,oBAIVh6C,KAAKk6C,iCAGTZ,EAAJr4C,UAAAmC,YAAI,WACIpD,KAAK25C,cAAc5iC,cACnB/W,KAAKgZ,cAAc9O,eAAelK,KAAK0D,WAAWhB,eAClD1C,KAAKm6C,gCAGTb,EAAJr4C,UAAAm5C,qBAAI,SAAqBC,GACjB,QAAKr6C,KAAKu5C,UAAUe,WAIb1uB,OAAO2uB,SAASC,KAAK/nC,QAAQ4nC,IAAS,GAGjDf,EAAJr4C,UAAAw5C,kBAAI,WACIz6C,KAAK06C,kBAGTpB,EAAJr4C,UAAA+C,cAAI,SAAc7C,GAClB,GAAcw5C,GAAgBx5C,EAAa,OAAiBu1B,UAAU+N,SAASqU,GAGnE94C,MAAKg6C,oBAAsB74C,EAAOgD,UAAYsa,EAAAA,OAASk8B,GACvD36C,KAAK06C,kBAIbpB,EAAJr4C,UAAA25C,0BAAI,WACI56C,KAAK66C,sBAGDvB,EAAZr4C,UAAAg5C,mBAAI,WAAA,GAAJ36C,GAAAU,IACQA,MAAK25C,cAAchjB,IACf32B,KAAK+5C,eAAej5C,UAAU,SAAC0E,GACZ,OAAXA,GACAlG,EAAKu7C,yBAMbvB,EAAZr4C,UAAAy5C,eAAI,WACI16C,KAAK05C,aAAe15C,KAAK05C,aAGrBJ,EAAZr4C,UAAA45C,mBAAI,WACI76C,KAAK05C,aAAc,EACnB15C,KAAKw5C,OAAOjjB,iBAGR+iB,EAAZr4C,UAAAi5C,8BAAI,WAAA,GAAJ56C,GAAAU,IACQA,MAAK86C,kBAAkBv3C,QAAQ,SAACw3C,GAC5Bz7C,EAAK0Z,cAAcjP,QAAQgxC,GAAI,MAI/BzB,EAAZr4C,UAAAk5C,6BAAI,WAAA,GAAJ76C,GAAAU,IACQA,MAAK86C,kBAAkBv3C,QAAQ,SAACw3C,GAC5Bz7C,EAAK0Z,cAAc9O,eAAe6wC,MAKlCzB,EAAZr4C,UAAA64C,oBAAI,WAAA,GAAJx6C,GAAAU,KACcg7C,EAAkBh7C,KAAK0D,WAAWhB,cAAcu4C,eAAe,QAErED,GAAOz3C,QAAQ,SAACE,GAAU,MAAAnE,GAAKoE,WAAWhB,cAAciB,oBAAoB,QAASF,KAErFzD,KAAK0D,WAAWhB,cAAc+B,iBAAiB,QAAS,SAAChB,GACjDnE,EAAKoE,WAAWhB,cAAcq/B,aAAa,aAC3Ct+B,EAAMy3C,6BAEX,GAEHF,EAAOz3C,QAAQ,SAACE,GAAU,MAAAnE,GAAKoE,WAAWhB,cAAc+B,iBAAiB,QAAShB,qBAhL1FgD,KAAC0C,EAAAA,UAADxC,OACIC,SAAUkyC,GACV1vC,SAAU,suCAiCVe,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,OACzCE,QAAS,YACT5D,MACI6D,kBAAmB,mBACnBC,kBAAmB,8CAxG3BnE,KAAIS,EAAAA,aAYJT,KAASoE,EAAAA,eAETpE,KAAS00C,EAAAA,WANT10C,KAAI+E,EAAAA,uCAqGJ1B,WAAArD,KAAKqB,EAAAA,QAGL2xC,gBAAAhzC,KAAKqB,EAAAA,QAGLszC,iBAAA30C,KAAKqB,EAAAA,QAKLuzC,mBAAA50C,KAAKiiB,EAAAA,aAAL/hB,MAAkB,oBAAsBmoC,KAAM5+B,EAAAA,gBAG9C2pC,kBAAApzC,KAAKyG,EAAAA,UAALvG,MAAe,mBAAqBmoC,KAAM5nC,EAAAA,gBAuH1CoyC,GAvIkCD,IAyIlCiC,GAAA,WAAA,QAAAA,KAKIt7C,KAAJsF,SAA8C,OAM9C,MAJIhE,QAAJ2I,eACQqxC,EADRr6C,UAAA,kBAAI,WAEI,MAAyB,SAAlBjB,KAAKsF,SAAsB,iBAAmB,kEAT7DmB,KAACC,EAAAA,UAADC,OACIC,SAAUiyC,yBAGdvzC,WAAAmB,KAAKqB,EAAAA,QAGLyzC,aAAA90C,KAAK2B,EAAAA,YAALzB,MAAiB,YAIjB20C,KAEAE,GAAA,WAGI,QAAJA,GACe/4C,EACAyjB,GADAlmB,KAAfyC,QAAeA,EACAzC,KAAfkmB,MAAeA,EAJHlmB,KAAZy7C,YAAkC,EAqBlC,MAdID,GAAJv6C,UAAAy6C,iBAAI,SAAiBC,GACb37C,KAAKy7C,WAAaE,EAElB37C,KAAK47C,wBAGDJ,EAAZv6C,UAAA26C,qBAAI,WACQ57C,KAAKy7C,WACLz7C,KAAKyC,QAAQi0B,UAAUC,IA/PH,6BAiQpB32B,KAAKyC,QAAQi0B,UAAUqF,OAjQH,8BAqQhCyf,KAEAK,GAAA,WAkBI,QAAJA,GACep5C,EACAyjB,EACA41B,OAAf,KAAAA,IAAeA,MAFA97C,KAAfyC,QAAeA,EACAzC,KAAfkmB,MAAeA,EACAlmB,KAAf87C,iBAAeA,EA+Bf,MAlDIx6C,QAAJ2I,eAAQ4xC,EAAR56C,UAAA,mBAAI,WACI,MAAOjB,MAAK87C,iBAAiB1qC,OAAS,mCAK1C9P,OAAJ2I,eAAQ4xC,EAAR56C,UAAA,2BAAI,WACI,WAAkCqG,KAA9BtH,KAAK+7C,qBACE/7C,KAAK+7C,sBAGhB/7C,KAAKg8C,uCAEEh8C,KAAK+7C,uDAShBF,EAAJ56C,UAAAy6C,iBAAI,SAAiBC,GACT37C,KAAK87C,iBAAiB1qC,OAAS,GAC/BpR,KAAKi8C,YAAYN,GAGrB37C,KAAK87C,iBAAiBv4C,QAAQ,SAACuS,GAAS,MAAAA,GAAK4lC,iBAAiBC,MAG1DE,EAAZ56C,UAAA+6C,qCAAI,WACIh8C,KAAK+7C,qBAAuB/7C,KAAK87C,iBAC5Bz3B,OAAO,SAAC63B,EAAKpmC,GAAS,MAAAomC,GAAMpmC,EAAKoQ,OAAO,IAGzC21B,EAAZ56C,UAAAk7C,SAAI,WACJ,GAAcC,GAAgBp8C,KAAKyC,QAAQ45C,aAAa,gBAEhD,OAAOD,GACDE,UAAUF,GACTp8C,KAAK87C,iBAAiB1qC,OAAS,EAAIpR,KAAK87C,iBAAiB,GAAGr5C,QAAQ85C,UAAY,IAGnFV,EAAZ56C,UAAAg7C,YAAI,SAAoBN,GACZA,EACA37C,KAAKyC,QAAQmV,aAAa,QAAS5X,KAAKm8C,YAExCn8C,KAAKyC,QAAQ+5C,gBAAgB,UAGzCX,KAGAY,GAAA,WAmDI,QAAJA,GACgBnzC,GAAAtJ,KAAhBsJ,YAAgBA,EAvCKtJ,KAArB08C,4BAA2D,EACtC18C,KAArB28C,uBAAsD,IACjC38C,KAArB48C,kBAAiD/D,GAC5B74C,KAArB68C,qBACQ/D,GACAC,GACAC,GAmCR,IAAc8D,GAAiB9xB,EAAAA,UAAUY,OAAQ,UACpCjrB,KAAKo8C,EAAAA,aAAa/8C,KAAK28C,wBAE5B38C,MAAKg9C,oBAAsBF,EAAeh8C,UAAUd,KAAKi9C,gBAAgB9xB,KAAKnrB,OA4DtF,MA5FIsB,QAAJ2I,eAAgBwyC,EAAhBx7C,UAAA,uBAAI,WACI,MAAOjB,MAAKsJ,YAAY5G,cAAc84B,cAAc,OAAO/V,wBAAwBS,uCAGvF5kB,OAAJ2I,eAAgBwyC,EAAhBx7C,UAAA,mBAAI,WACI,WAA0BqG,KAAtBtH,KAAKk9C,cAA+Bl9C,KAAK08C,4BAI7C18C,KAAKm9C,8BAEEn9C,KAAKk9C,cALDl9C,KAAKk9C,8CAQpB57C,OAAJ2I,eAAgBwyC,EAAhBx7C,UAAA,uBAAI,WACI,WAA+BqG,KAA3BtH,KAAKo9C,mBAAoCp9C,KAAK08C,4BAIlD18C,KAAKq9C,mCAEEr9C,KAAKo9C,mBALDp9C,KAAKo9C,mDAmBpBX,EAAJx7C,UAAAg8C,gBAAI,WAGI,IAAK,GAFDK,GAAgBt9C,KAAKi7B,gBAAkBj7B,KAAKu9C,gBAEvCpQ,EAAIntC,KAAKw9C,YAAYpsC,OAAS,EAAG+7B,GAAK,EAAGA,IAAK,CAC/D,GAAkBr3B,GAAO9V,KAAKw9C,YAAYrQ,EAEzBr3B,GAAK2nC,cAIV3nC,EAAK4lC,iBAAiB4B,EAAgB,GACtCA,GAAiBxnC,EAAK4nC,uBAI9BjB,EAAJx7C,UAAA44B,gBAAI,WAAA,GAAJv6B,GAAAU,IAGQgT,YAAW,WAAM,MAAA1T,GAAK29C,mBAAmB,IAG7CR,EAAJx7C,UAAAmC,YAAI,WACIpD,KAAKg9C,oBAAoBjmC,eAGrB0lC,EAAZx7C,UAAAo8C,iCAAI,WACIr9C,KAAKo9C,kBAAoBp9C,KAAKw9C,YACzBn5B,OAAO,SAAC63B,EAAKpmC,GAAS,MAAAomC,GAAMpmC,EAAKoQ,OAAO,IAGzCu2B,EAAZx7C,UAAA08C,qBAAI,SAA6Bl7C,GAKzB,MAJmBA,GAAQgjB,wBAAwBS,MAC/BpjB,SAASqV,iBAAiB1V,GAASm7C,iBAAiB,iBACrD96C,SAASqV,iBAAiB1V,GAASm7C,iBAAiB,iBAKnEnB,EAAZx7C,UAAAk8C,4BAAI,WAAA,GAAJ79C,GAAAU,KACc69C,EAAmB79C,KAAK68C,oBACzBt5B,IAAI,SAACtf,GAAc,MAAG3E,GAAKs9C,kBAAxC,IAA6D34C,IAC/C65C,EAA0B98B,MAAM+8B,KAAK/9C,KAAKsJ,YAAY5G,cAAcu5B,iBAAiB4hB,GAE3F79C,MAAKk9C,aAAeY,EACfv6B,IAAI,SAACw3B,GAAO,MAAA,IAAIc,IAAgBd,EAAIz7C,EAAKq+C,qBAAqB5C,GAAKz7C,EAAK0+C,oBAAoBjD,OAG7F0B,EAAZx7C,UAAA+8C,oBAAI,SAA4Bv7C,GAGxB,MAFaA,GAAQ+4B,cAAc,6CAM5Bxa,MAAM+8B,KAAKt7C,EAAQw5B,iBAAiB+c,KACtCz1B,IAAI,SAACw3B,GAAO,MAAA,IAAIS,IAAe,EAAmBT,EAAGt1B,wBAAwBS,4BAnH1Fzf,KAAC0C,EAAAA,UAADxC,OACIC,SA7Tc,YA8Td0D,gBAAiBC,EAAAA,wBAAwBC,OACzCpB,SAAU,uEAEqByvC,GAFnC,KAE2DA,GAF3D,wCAKIpuC,QAAS,u4DACTN,cAAeC,EAAAA,kBAAkBC,6CAzVrC5D,KAAIS,EAAAA,cAqcJu1C,KCzbAwB,GAAA,WAAA,QAAAA,MAwB6B,sBAxB7Bx3C,KAAC8B,EAAAA,SAAD5B,OACI+B,SACIC,EAAAA,aACAgD,EAAAA,WACAC,EAAAA,eACAC,IAEJpD,SACIg0C,GACAnB,GACAnC,GACAG,GACAJ,GACAD,IAEJzwC,cACIi0C,GACAnB,GACAnC,GACAG,GACAJ,GACAD,QAGRgF,KC9BIC,GAAa,EAKjBC,GAAA,WACI,QAAJA,GAAuB70C,GAAAtJ,KAAvBsJ,YAAuBA,EACvB,MAAA60C,MAEaC,GAGLzlC,EAAWwlC,IAEnBE,GAAA,SAAA30C,GAiBI,QAAJ20C,GAAgB36C,GAAZ,GAAJpE,GACQoK,EADRG,KAAA7J,KACc0D,IADd1D,WALaV,GAAbsO,GAA0B,mBAAmBswC,KAChC5+C,EAAb0D,MAA6B,EAChB1D,EAAbg/C,KAAqC,cACxBh/C,EAAbo7B,MAAmC9hB,GAAaC,UAShD,MAbmC7O,GAAnCq0C,EAAA30C,GAUIpI,OAAJ2I,eAAQo0C,EAARp9C,UAAA,kBAAI,WACI,MAAO2jB,MAAKkH,IAlCA,EAkCiBlH,KAAKC,IAjCtB,IAiCuC7kB,KAAKgD,QAjC5C,oDAWpByD,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,kBACVwC,SAAJ,gVACIqB,QAAS,ydACTH,gBAAiBC,EAAAA,wBAAwBC,OACzCL,cAAeC,EAAAA,kBAAkBC,KACjCvD,MACImC,MAAO,kBACPyD,YAAa,8CA9BrBjG,KAAIS,EAAAA,gCAkCJ0G,KAAAnH,KAAKqB,EAAAA,QACL9E,QAAAyD,KAAKqB,EAAAA,QACLw2C,OAAA73C,KAAKqB,EAAAA,QACL4yB,QAAAj0B,KAAKqB,EAAAA,SASLu2C,GAbmCD,IC3BnCG,GAAA,WAAA,QAAAA,MAYkC,sBAZlC93C,KAAC8B,EAAAA,SAAD5B,OACI+B,SACIC,EAAAA,aACAiD,EAAAA,gBAEJnD,SACI41C,IAEJ71C,cACI61C,QAGRE,KCVIL,GAAa,EAKjBM,GAAA,WACI,QAAJA,GAAuBl1C,GAAAtJ,KAAvBsJ,YAAuBA,EACvB,MAAAk1C,MAEaC,GAGL9lC,EAAW6lC,IAInBE,GAAA,SAAAh1C,GAiBI,QAAJg1C,GAAgBh7C,GAAZ,GAAJpE,GACQoK,EADRG,KAAA7J,KACc0D,IADd1D,WALaV,GAAbsO,GAA0B,uBAAuBswC,KACpC5+C,EAAb0D,MAA6B,EAChB1D,EAAbg/C,KAAyC,cAC5Bh/C,EAAbo7B,MAAmC9hB,GAAaC,UAahD,MAjBuC7O,GAAvC00C,EAAAh1C,GAUIpI,OAAJ2I,eAAQy0C,EAARz9C,UAAA,kBAAI,WACI,MAAO2jB,MAAKkH,IApCA,EAoCiBlH,KAAKC,IAnCtB,IAmCuC7kB,KAAKgD,QAnC5C,qCAsChB1B,OAAJ2I,eAAQy0C,EAARz9C,UAAA,yBAAI,WACI,MA5Be,KAAA,IA4BYjB,KAAK2+C,WAAxC,oDA1BAl4C,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,sBACVwC,SAAJ,2aACIqB,QAAS,8pBACTH,gBAAiBC,EAAAA,wBAAwBC,OACzCL,cAAeC,EAAAA,kBAAkBC,KACjCvD,MACImC,MAAO,sBACPyD,YAAa,8CAhCrBjG,KAAIS,EAAAA,gCAoCJ0G,KAAAnH,KAAKqB,EAAAA,QACL9E,QAAAyD,KAAKqB,EAAAA,QACLw2C,OAAA73C,KAAKqB,EAAAA,QACL4yB,QAAAj0B,KAAKqB,EAAAA,SAaL42C,GAjBuCD,IC/BvCG,GAAA,WAAA,QAAAA,MAYsC,sBAZtCn4C,KAAC8B,EAAAA,SAAD5B,OACI+B,SACIC,EAAAA,aACAiD,EAAAA,gBAEJnD,SACIi2C,IAEJl2C,cACIk2C,QAGRE,KCKIrmC,GAAe,gBAIf,QAAJsmC,GAEehkC,EAEA7X,GAFAhD,KAAf6a,OAAeA,EAEA7a,KAAfgD,MAAeA,EACf,MAAA67C,oBAIA,QAAAC,MAA+B,MAA/BA,MACaC,GAAmEv1C,EAAcs1C,IAOjFE,IACTlkC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAW,WAAM,MAAAgkC,MAC9B/jC,OAAO,GAGX+jC,GAAA,SAAAv1C,GA0GI,QAAJu1C,GACyBC,GADrB,GAAJ5/C,GAGQoK,EAHRG,KAAA7J,OAAAA,WACyBV,GAAzB4/C,gBAAyBA,EAjCF5/C,EAAvBG,OAA6D,GAAI+Z,GAAAA,aAYrDla,EAAZyhB,OAA0B,KAGdzhB,EAAZ6/C,MAA4B,kBAAkB5mC,KAGlCjZ,EAAZqhC,UAA8C,KAGlCrhC,EAAZ8/C,gBAAsC,EAG1B9/C,EAAZ+/C,eAAiD,QAGrC//C,EAAZ8U,WAAiC,EAGrB9U,EAAZmrB,WAAiC,EAU7BnrB,EAAJggD,6BAAyD,aAOrDhgD,EAAJswB,UAA2B,eAoG3B,MAnNkC5lB,GAAlCi1C,EAAAv1C,GAIIpI,OAAJ2I,eACQg1C,EADRh+C,UAAA,YAAI,WACqB,MAAOjB,MAAKm/C,WACjC,SAASn8C,GACLhD,KAAKm/C,MAAQn8C,EACbhD,KAAKu/C,0DAITj+C,OAAJ2I,eACQg1C,EADRh+C,UAAA,qBAAI,WAEI,MAAOjB,MAAKq/C,oBAEhB,SAAkB5N,GACdzxC,KAAKq/C,eAAuB,WAAN5N,EAAiB,SAAW,QAClDzxC,KAAKw/C,sDAITl+C,OAAJ2I,eACQg1C,EADRh+C,UAAA,aAAI,WACmB,MAAOjB,MAAK+gB,YAC/B,SAAUqL,GACFpsB,KAAK+gB,SAAWqL,IAEhBpsB,KAAK+gB,OAASqL,EAEdpsB,KAAKy/C,+BACLz/C,KAAK0/C,6DAKbp+C,OAAJ2I,eACQg1C,EADRh+C,UAAA,gBAAI,WACiB,MAAOjB,MAAK2gC,eAC7B,SAAazgB,GACTlgB,KAAK2gC,UAAYzgB,EACjBlgB,KAAKgD,MAAQkd,EAAWA,EAASld,MAAQ,KACzChD,KAAK0/C,4DAITp+C,OAAJ2I,eACQg1C,EADRh+C,UAAA,gBAAI,WAC0B,MAAOjB,MAAKoU,eACtC,SAAapR,GACThD,KAAKoU,UAAYi0B,EAAUrlC,GAC3BhD,KAAKw/C,sDAITl+C,OAAJ2I,eACQg1C,EADRh+C,UAAA,gBAAI,WAC0B,MAAOjB,MAAKyqB,eACtC,SAAaznB,GACThD,KAAKyqB,UAAY4d,EAAUrlC,GAC3BhD,KAAKw/C,sDAyDTP,EAAJh+C,UAAAy+C,yBAAI,WACQ1/C,KAAK2gC,YAAc3gC,KAAK2gC,UAAU3mB,UAClCha,KAAK2gC,UAAU3mB,SAAU,IAQjCilC,EAAJh+C,UAAAu4B,mBAAI,WAIIx5B,KAAKo/C,gBAAiB,GAO1BH,EAAJh+C,UAAA0+C,MAAI,WACQ3/C,KAAK4vB,WACL5vB,KAAK4vB,aAKbqvB,EAAJh+C,UAAA6pC,gBAAI,WACQ9qC,KAAKo/C,gBACLp/C,KAAKP,OAAO4F,KAAK,GAAIw5C,IAAc7+C,KAAc,UAAGA,KAAK+gB,UAIjEk+B,EAAJh+C,UAAAu+C,mBAAI,WACQx/C,KAAK4/C,SACL5/C,KAAK4/C,QAAQr8C,QAAQ,SAACs8C,GAAU,MAAAA,GAAM39C,kBAO9C+8C,EAAJh+C,UAAAsZ,WAAI,SAAWvX,GACPhD,KAAKgD,MAAQA,EACbhD,KAAKk/C,gBAAgBh9C,gBAQzB+8C,EAAJh+C,UAAAuZ,iBAAI,SAAiBC,GACbza,KAAKs/C,6BAA+B7kC,GAQxCwkC,EAAJh+C,UAAAyZ,kBAAI,SAAkBD,GACdza,KAAK4vB,UAAYnV,GAOrBwkC,EAAJh+C,UAAA0Z,iBAAI,SAAiBC,GACb5a,KAAK0E,SAAWkW,EAChB5a,KAAKk/C,gBAAgBh9C,gBAGjB+8C,EAAZh+C,UAAAs+C,uBAAI,WAAA,GAAJjgD,GAAAU,IACYA,MAAK4/C,SACL5/C,KAAK4/C,QAAQr8C,QAAQ,SAACs8C,GAClBA,EAAMvmC,KAAOha,EAAKga,QAMtB2lC,EAAZh+C,UAAAw+C,6BAAI,WAAA,GAAJngD,GAAAU,KAEc8/C,EAAuC,OAAnB9/C,KAAK2gC,WAAsB3gC,KAAK2gC,UAAU39B,QAAUhD,KAAK+gB,MAE/D,OAAhB/gB,KAAK4/C,SAAoBE,IACzB9/C,KAAK2gC,UAAY,KACjB3gC,KAAK4/C,QAAQr8C,QAAQ,SAACs8C,GAClBA,EAAM7lC,QAAU1a,EAAK0D,QAAU68C,EAAM78C,MACjC68C,EAAM7lC,UACN1a,EAAKqhC,UAAYkf,sBAxNrCp5C,KAACC,EAAAA,UAADC,OACIC,SAAU,iBACVC,SAAU,eACVgC,WAAYm2C,IACZl4C,MACI0F,KAAM,aACNvD,MAAO,kBAEXyB,QAAS,oDAzDbjE,KAAI+E,EAAAA,uCA+DJ8N,OAAA7S,KAAKqB,EAAAA,QAQLoR,gBAAAzS,KAAKqB,EAAAA,QAUL9E,QAAAyD,KAAKqB,EAAAA,QAaLoY,WAAAzZ,KAAKqB,EAAAA,QASLpD,WAAA+B,KAAKqB,EAAAA,QAQLohB,WAAAziB,KAAKqB,EAAAA,QAYLrI,SAAAgH,KAAKmB,EAAAA,SAGLg4C,UAAAn5C,KAAKm2B,EAAAA,gBAALj2B,MAAqBsU,EAAAA,WAAW,WAAM,MAAA8kC,OAAkBjjB,aAAa,OAgJrEmiB,GAnNkCF,kBA8N9B,QAAJiB,GAAuB12C,GAAAtJ,KAAvBsJ,YAAuBA,EACvB,MAAA02C,MAEaC,GAILtnC,EAAWD,EAAcsnC,KAGjCD,GAAA,SAAAr2C,GAsJI,QAAJq2C,GACoBG,EACZx8C,EACiBw7C,EACAiB,GAJrB,GAAJ7gD,GAOQoK,EAPRG,KAAA7J,KAOc0D,IAPd1D,WAGyBV,GAAzB4/C,gBAAyBA,EACA5/C,EAAzB6gD,iBAAyBA,EAvIJ7gD,EAArB+Z,UAAyC,eAAcd,GAK1CjZ,EAAbsO,GAA0BtO,EAAK+Z,UAmGR/Z,EAAvBG,OAA6D,GAAI+Z,GAAAA,aAM7Dla,EAAJ2sB,WAAyB,EAMb3sB,EAAZia,UAAgC,EASpBja,EAAZyhB,OAA0B,KAILzhB,EAArB8gD,8BAAiE,aAWzD9gD,EAAK4gD,WAAaA,EAElB5gD,EAAK8gD,8BACDD,EAAiBjqC,OAAO,SAACtI,EAAY0L,GAC7B1L,IAAOtO,EAAKsO,IAAM0L,IAASha,EAAKga,OAChCha,EAAK0a,SAAU,OAmEnC,MAvNmChQ,GAAnC+1C,EAAAr2C,GAuBIpI,OAAJ2I,eACQ81C,EADR9+C,UAAA,eAAI,WACyB,MAAOjB,MAAKuZ,cACrC,SAAYvW,GAChB,GAAcq9C,GAAkBhY,EAAUrlC,EAE9BhD,MAAKuZ,WAAa8mC,IAClBrgD,KAAKuZ,SAAW8mC,EAEZA,GAAmBrgD,KAAKkgD,YAAclgD,KAAKkgD,WAAWl9C,QAAUhD,KAAKgD,MACrEhD,KAAKkgD,WAAWhgC,SAAWlgB,MACnBqgD,GAAmBrgD,KAAKkgD,YAAclgD,KAAKkgD,WAAWl9C,QAAUhD,KAAKgD,QAG7EhD,KAAKkgD,WAAWhgC,SAAW,MAG3BmgC,GAEArgD,KAAKmgD,iBAAiBG,OAAOtgD,KAAK4N,GAAI5N,KAAKsZ,MAE/CtZ,KAAKk/C,gBAAgBh9C,iDAK7BZ,OAAJ2I,eACQ81C,EADR9+C,UAAA,aAAI,WACmB,MAAOjB,MAAK+gB,YAC/B,SAAU/d,GACFhD,KAAK+gB,SAAW/d,IAChBhD,KAAK+gB,OAAS/d,EACS,MAAnBhD,KAAKkgD,aACAlgD,KAAKga,UAENha,KAAKga,QAAUha,KAAKkgD,WAAWl9C,QAAUA,GAEzChD,KAAKga,UACLha,KAAKkgD,WAAWhgC,SAAWlgB,yCAO3CsB,OAAJ2I,eACQ81C,EADR9+C,UAAA,gBAAI,WAEI,MAAOjB,MAAKoU,WAAiC,MAAnBpU,KAAKkgD,YAAsBlgD,KAAKkgD,WAAWx7C,cAEzE,SAAa1B,GACjB,GAAcu9C,GAAmBlY,EAAUrlC,EAE/BhD,MAAKoU,YAAcmsC,IAEnBvgD,KAAKoU,UAAYmsC,EACjBvgD,KAAKk/C,gBAAgBh9C,iDAK7BZ,OAAJ2I,eACQ81C,EADR9+C,UAAA,gBAAI,WAEI,MAAOjB,MAAKyqB,WAAczqB,KAAKkgD,YAAclgD,KAAKkgD,WAAWh3B,cAEjE,SAAalmB,GACThD,KAAKyqB,UAAY4d,EAAUrlC,oCAI/B1B,OAAJ2I,eACQ81C,EADR9+C,UAAA,qBAAI,WAEI,MAAOjB,MAAKq/C,gBAAmBr/C,KAAKkgD,YAAclgD,KAAKkgD,WAAWhnC,eAAkB,aAExF,SAAkBlW,GACdhD,KAAKq/C,eAAiBr8C,mCAqB1B1B,OAAJ2I,eAAQ81C,EAAR9+C,UAAA,eAAI,WAAwB,OAAUjB,KAAK4N,IAAM5N,KAAKqZ,WAAtD,0CAqCI0mC,EAAJ9+C,UAAAiC,SAAI,WACQlD,KAAKkgD,aAELlgD,KAAKga,QAAUha,KAAKkgD,WAAWl9C,QAAUhD,KAAK+gB,OAE9C/gB,KAAKsZ,KAAOtZ,KAAKkgD,WAAW5mC,OAIpCymC,EAAJ9+C,UAAAmC,YAAI,WACIpD,KAAKogD,iCAKTL,EAAJ9+C,UAAA2Y,MAAI,aAOAmmC,EAAJ9+C,UAAAiB,aAAI,WAGIlC,KAAKk/C,gBAAgBh9C,gBAGzB69C,EAAJ9+C,UAAAu/C,aAAI,SAAa/8C,GAQTA,EAAMyW,mBAGV6lC,EAAJ9+C,UAAAw/C,cAAI,SAAch9C,GAIVA,EAAMyW,iBAEd,IAAcwmC,GAAoB1gD,KAAKkgD,YAAclgD,KAAKgD,QAAUhD,KAAKkgD,WAAWl9C,KAC5EhD,MAAKga,SAAU,EACfha,KAAK8qC,kBAED9qC,KAAKkgD,aACLlgD,KAAKkgD,WAAWZ,6BAA6Bt/C,KAAKgD,OAClDhD,KAAKkgD,WAAWP,QACZe,GACA1gD,KAAKkgD,WAAWpV,oBAMpBiV,EAAZ9+C,UAAA6pC,gBAAI,WACI9qC,KAAKP,OAAO4F,KAAK,GAAIw5C,IAAc7+C,KAAMA,KAAK+gB,yBArOtDta,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,kBACVwC,SAAJ,opBACIqB,QAAS,i3BACTC,QAAS,QAAS,YAClBP,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,OACzC3D,SAAU,gBACVC,MACImC,MAAO,kBACPyD,YAAa,KACbi0C,qBAAsB,UACtBvlC,sBAAuB,WACvBkM,UAAW,+EA0InB7gB,KAAgCw4C,GAAhC13C,aAAAd,KAASkB,EAAAA,aAzbTlB,KAA2CS,EAAAA,aAD3CT,KAAI+E,EAAAA,oBAQJ/E,KAASm6C,EAAAA,+CAmTThzC,KAAAnH,KAAKqB,EAAAA,QAGLwR,OAAA7S,KAAKqB,EAAAA,QAGLqR,YAAA1S,KAAKqB,EAAAA,MAALnB,MAAW,gBAGXyS,iBAAA3S,KAAKqB,EAAAA,MAALnB,MAAW,qBAGXk6C,kBAAAp6C,KAAKqB,EAAAA,MAALnB,MAAW,sBAGXqT,UAAAvT,KAAKqB,EAAAA,QAyBL9E,QAAAyD,KAAKqB,EAAAA,QAkBLpD,WAAA+B,KAAKqB,EAAAA,QAeLohB,WAAAziB,KAAKqB,EAAAA,QASLoR,gBAAAzS,KAAKqB,EAAAA,QAULgS,gBAAArT,KAAKyG,EAAAA,UAALvG,MAAe,WAOflH,SAAAgH,KAAKmB,EAAAA,SAKLqkB,YAAAxlB,KAAKqB,EAAAA,SAuGLi4C,GAvNmCE,IC7SnCa,GAAA,WAAA,QAAAA,MAMA,sBANAr6C,KAAC8B,EAAAA,SAAD5B,OACI+B,SAAUC,EAAAA,aAAcgD,EAAAA,WAAYqI,IACpCvL,SAAUw2C,GAAcc,IACxBv3C,cAAey2C,GAAcc,QAGjCe,K1BVAna,GAAA,SAAAj9B,GAAA,QAAAi9B,oDAOA,MAFsC38B,GAAtC28B,EAAAj9B,kBALAjD,KAACC,EAAAA,UAADC,OACIC,SAAU;2BACV8D,QAAS,2BACT7B,YAAciS,QAAS4rB,EAAAA,eAAgB1rB,YAAa2rB,0BAGxDvhC,OAAAqB,KAAKqB,EAAAA,MAALnB,MAAW,iBACXggC,GAFsCD,EAAAA,gBCNtCE,GAAA,SAAAl9B,GAAA,QAAAk9B,KAAA,GAAAtnC,GAAA,OAAAoK,GAAAA,EAAA8uB,MAAAx4B,KAAA6mC,YAAA7mC,WASIV,GAAJwnC,gBAA8B,GAE1BxnC,EAAJynC,QAAsB,GAGlBznC,EAAJ0nC,UAAwB,KAqBxB,MA/B0Ch9B,GAA1C48B,EAAAl9B,GAYIpI,OAAJ2I,eAAQ28B,EAAR3lC,UAAA,mBAAI,WACI,OAAQjB,KAAKinC,SAAW,EAAIjnC,KAAKgnC,WAAahnC,KAAK8mC,iDAGvDF,EAAJ3lC,UAAAimC,cAAI,WACJ,GAAcC,GAAannC,KAAKonC,SAAShiC,MAAQpF,KAAK8e,KAAKuoB,YAAYC,SACzDtnC,KAAK8e,KAAKuoB,YAAYC,SAAStnC,KAAKonC,SAAShiC,MAC7C,KAEAmiC,EAAQvnC,KAAKunC,OAASJ,CAE5B,OAAOI,GAAYA,EAAQvnC,KAAK+mC,QAAW/mC,KAAKwnC,YAAxD,KAA6ExnC,KAAK8mC,gBAAlF,MAGIF,EAAJ3lC,UAAAiC,SAAI,WACIlD,KAAKinC,SAAWjnC,KAAK8e,KAAKuoB,YAAYI,aAAaznC,KAAKonC,SAAShiC,MAEjEpF,KAAK0nC,6BAjCbjhC,KAACC,EAAAA,UAADC,OACIC,SAAU,sBACViC,YAAciS,QAAS6sB,EAAAA,mBAAoB3sB,YAAa4rB,0BAG5DW,QAAA9gC,KAAKqB,EAAAA,MAALnB,MAAW,uBAEXihC,SAAAnhC,KAAKqB,EAAAA,MAALnB,MAAW,8BA4BXigC,GA/B0Ce,EAAAA,oBCJ1CE,GAAA,SAAAn+B,GAAA,QAAAm+B,oDAO+D,MAAtB79B,GAAzC69B,EAAAn+B,kBAPAjD,KAACC,EAAAA,UAADC,OACIC,SAAU,qBACVE,MACI0M,UAAW,kBAEf3K,YAAciS,QAASgtB,EAAAA,kBAAmB9sB,YAAa6sB,QAE3DA,GAAyCC,EAAAA,mBCe5BC,GACT,GAAI54B,GAAAA,eAA4C,mCAEpD64B,GAAA,WACI,QAAJA,GAAuBntB,EAA6B4H,OAApD,KAAAA,IAAoDA,GAApD,GAAuBziB,KAAvB6a,OAAuBA,EAA6B7a,KAApDyiB,YAAoDA,EACpD,MAAAulB,MAEIC,GAA0B,EAE9BC,GAAA,SAAAx+B,GAiFI,QAAJw+B,GACkBxkC,EACA8d,EAC4D2mB,GAH1E,GAAJ7oC,GAMQoK,EAARG,KAAA7J,KAAc0D,EAAU,IAAxB1D,WALkBV,GAAlBoE,WAAkBA,EACApE,EAAlBkiB,kBAAkBA,EAC4DliB,EAA9E6oC,OAA8EA,EAjEvD7oC,EAAvBm5B,kBAA2C,GAAIjf,GAAAA,aAiBnCla,EAAZ8U,WAAiC,EAqBrB9U,EAAZqhC,WAAiC,EAYrBrhC,EAAZ8oC,SAAsB,EAMV9oC,EAAZ8rB,IAAkB,kBAAkB6c,OAmIpC,MA5LkCj+B,GAAlCk+B,EAAAx+B,GAKIpI,OAAJ2I,eACQi+B,EADRjnC,UAAA,gBAAI,WAEI,MAAOjB,MAAKoU,eAGhB,SAAapR,GACjB,GAAcopB,GAAWic,EAAUrlC,EAEvBopB,KAAapsB,KAAKoU,YAClBpU,KAAKoU,UAAYgY,oCAWzB9qB,OAAJ2I,eAAQi+B,EAARjnC,UAAA,gBAAI,WACI,MAAOjB,MAAK2gC,eAGhB,SAAa39B,GACjB,GAAc4f,GAAaylB,EAAUrlC,EAEzB4f,KAAe5iB,KAAK2gC,WACpB3gC,KAAKsoC,YAAY1lB,oCAczBthB,OAAJ2I,eAAQi+B,EAARjnC,UAAA,cAAI,WACI,MAAOjB,MAAKooC,yCAKhB9mC,OAAJ2I,eAAQi+B,EAARjnC,UAAA,UAAI,WACI,MAAOjB,MAAKorB,qCAKhB9pB,OAAJ2I,eAAQi+B,EAARjnC,UAAA,gBAAI,WACI,MAAOjB,MAAKmoC,OAAOzpB,0CAYvBwpB,EAAJjnC,UAAAoK,OAAI,WACIrL,KAAKkgB,UAAYlgB,KAAKkgB,UAG1BgoB,EAAJjnC,UAAAqnC,YAAI,SAAYpoB,GACJlgB,KAAK2gC,YAAczgB,GAAalgB,KAAKmoC,OAAOhnB,iBAEhDnhB,KAAK2gC,UAAYzgB,EAEbA,EACAlgB,KAAKmoC,OAAOhnB,eAAehB,OAAOngB,MAElCA,KAAKmoC,OAAOhnB,eAAef,SAASpgB,QAW5CkoC,EAAJjnC,UAAAsnC,gBAAI,WACSvoC,KAAKooC,UACNpoC,KAAKooC,SAAU,EAEfpoC,KAAKwhB,kBAAkBtf,iBAS/BgmC,EAAJjnC,UAAAunC,kBAAI,WACQxoC,KAAKooC,UACLpoC,KAAKooC,SAAU,EACfpoC,KAAKwhB,kBAAkBtf,iBAI/BgmC,EAAJjnC,UAAAwnC,UAAI,WACJ,GAAcC,GAAc1oC,KAAK0D,WAAWhB,cAAcimC,gBAClD,OAAID,GAAYt3B,OACLs3B,EAAY,GAAGniB,OAGnB,GAGX2hB,EAAJjnC,UAAA2Y,MAAI,WACJ,GAAcnX,GAAUzC,KAAK4oC,gBAEQ,mBAAlBnmC,GAAQmX,OACfnX,EAAQmX,SAehBtY,OAAJ2I,eAAQi+B,EAARjnC,UAAA,iBAAI,WAEI,OAAQjB,KAAK4oC,iBAAiB3H,aAAe,IAAIzN,wCAGrD0U,EAAJjnC,UAAAkf,OAAI,WACSngB,KAAK2gC,YACN3gC,KAAK2gC,WAAY,EAEjB3gC,KAAKwhB,kBAAkBtf,iBAI/BgmC,EAAJjnC,UAAAmf,SAAI,WACQpgB,KAAK2gC,YACL3gC,KAAK2gC,WAAY,EAEjB3gC,KAAKwhB,kBAAkBtf,iBAI/BgmC,EAAJjnC,UAAAuf,qBAAI,WACSxgB,KAAK0E,WACN1E,KAAK2gC,WAAY3gC,KAAK0e,WAAY1e,KAAK2gC,UAEvC3gC,KAAKwhB,kBAAkBtf,eACvBlC,KAAK6oC,0BAAyB,GAE1B7oC,KAAKmoC,OAAOW,kBACZ9oC,KAAKmoC,OAAOW,iBAAiB9oC,QAKzCkoC,EAAJjnC,UAAA4nC,yBAAI,SAAyBpmB,OAA7B,KAAAA,IAA6BA,GAA7B,GACQziB,KAAKy4B,kBAAkBpzB,KAAK,GAAI2iC,IAAmBhoC,KAAMyiB,KAG7DylB,EAAJjnC,UAAA2nC,eAAI,WACI,MAAO5oC,MAAK0D,WAAWhB,eAG3BwlC,EAAJjnC,UAAA8nC,YAAI,WACI,MAAO/oC,MAAK0E,SAAW,KAAO,oBA5MtC+B,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,iBACVC,SAAU,eACVC,MACI4F,YAAa,KACb9B,kBAAmB,gBAEnBD,kBAAmB,mBAEnB1B,MAAO,iBACP+/B,sBAAuB,WACvBxJ,oBAAqB,SAErBhsB,UAAW,0BAEfpK,SAAJ,yQACIP,YAAciS,QAASmuB,EAAAA,YAAajuB,YAAaktB,4CA7CrDzhC,KAAIS,EAAAA,aALJT,KAAI+E,EAAAA,oBAsHJ/E,SAAAa,GAAAC,aAAAd,KAASkB,EAAAA,WAATlB,KAAqBe,EAAAA,OAArBb,MAA4BohC,2BAjE5BtP,oBAAAhyB,KAAKmB,EAAAA,SAEL5E,QAAAyD,KAAKqB,EAAAA,QAELpD,WAAA+B,KAAKqB,EAAAA,SAuLLogC,GA5LkCe,EAAAA,aCjBlCC,GAAA,WACI,QAAJA,GACeruB,EACAoF,GADAjgB,KAAf6a,OAAeA,EACA7a,KAAfigB,OAAeA,EAEf,MAAAipB,MAEAC,GAAA,WACI,QAAJA,GAAuBtuB,EAAgCoF,GAAhCjgB,KAAvB6a,OAAuBA,EAAgC7a,KAAvDigB,OAAuDA,EACvD,MAAAkpB,qBAGI,QAAJC,GAAgBC,EAA0B7nB,GAC1C,MAAQ9X,GAARG,KAAA7J,KAAcqpC,EAAS7nB,IAAvBxhB,KAEA,MAJqCgK,GAArCo/B,EAAA1/B,GAIA0/B,GAJqCvhB,EAAAA,SAO/ByhB,GAC2B5wB,EAAclP,EAAc4/B,KAG7DxgB,GAAA,SAAAlf,GAsEI,QAAJkf,GACgBllB,EACR2lC,EACA7nB,EACuB1X,EACA4U,EACGyK,EACAogB,GAP9B,GAAJjqC,GASQoK,EATRG,KAAA7J,KAScqpC,EAAS7nB,IATvBxhB,WACgBV,GAAhBoE,WAAgBA,EA9BOpE,EAAvBkqC,iBAA0C,GAAIhwB,GAAAA,aAEvBla,EAAvBokB,gBAAyC,GAAIlK,GAAAA,aAuBjCla,EAAZ8U,WAAiC,EAEZ9U,EAArB2iB,QAA+B,GAAIvU,GAAAA,QAa3BpO,EAAKwK,SAAWhH,SAASgH,IAAa,EAEtCxK,EAAKof,SAAwB,OAAbA,GAA4B2pB,EAAU3pB,GACtDpf,EAAK6pB,WAA4B,OAAfA,GAA6Bkf,EAAUlf,GACzD7pB,EAAKiqC,WAA4B,OAAfA,GAA6BlB,EAAUkB,GAEzDjqC,EAAK6hB,eAAiB,GAAImY,GAAAA,eAA6Bh6B,EAAKof,YAkLpE,MArPqC1U,GAArC4e,EAAAlf,GAyBIpI,OAAJ2I,eACQ2e,EADR3nB,UAAA,gBAAI,WAEI,MAAOjB,MAAKoU,eAGhB,SAAaq1B,GACjB,GAAczmC,GAAQqlC,EAAUoB,EAEpBzpC,MAAKoU,YAAcpR,IACnBhD,KAAKoU,UAAYpR,EAEbhD,KAAKoU,UAELwN,QAAQ8nB,IAAI,4BAGZ9nB,QAAQ8nB,IAAI,6DA6BxB9gB,EAAJ3nB,UAAAu4B,mBAAI,WACIx5B,KAAK+e,WAAa,GAAIod,GAAAA,2BAAyCn8B,KAAKggB,SAC/Dqc,yBAAwB,GACxBtC,0BAA0B,OAGnCnR,EAAJ3nB,UAAAmC,YAAI,WACIpD,KAAKiiB,QAAQne,OAEb9D,KAAKiiB,QAAQle,YAGjB6kB,EAAJ3nB,UAAA8gB,UAAI,SAAUte,GAEd,GAAcU,GAAUV,EAAMU,OAItB,QAHAnE,KAAK2pC,UAAYlmC,EAAM8c,SACvBvgB,KAAK4pC,SAAWnmC,EAAMqc,QAEd3b,GACJ,IAAKkb,GAAAA,WACGrf,KAAK+e,WAAWa,YAChB5f,KAAKqnC,YAAYwC,SAAS7pC,KAAK+e,WAAWa,WAAWxa,MAGzD3B,EAAMob,gBAEN,MACJ,KAAKS,GAAAA,YACGtf,KAAK+e,WAAWa,YAChB5f,KAAKqnC,YAAYyC,OAAO9pC,KAAK+e,WAAWa,WAAWxa,MAGvD3B,EAAMob,gBAEN,MACJ,KAAKJ,GAAAA,MACL,IAAKD,GAAAA,MACDxe,KAAK+pC,sBACLtmC,EAAMob,gBAEN,MACJ,KAAKW,GAAAA,KACDxf,KAAK+e,WAAWW,qBAChBjc,EAAMob,gBAEN,MACJ,KAAKY,GAAAA,IACDzf,KAAK+e,WAAWY,oBAChBlc,EAAMob,gBAEN,MACJ,KAAKmrB,GAAAA,QACDhqC,KAAK+e,WAAWkrB,4BAChBxmC,EAAMob,gBAEN,MACJ,KAAKqrB,GAAAA,UACDlqC,KAAK+e,WAAWorB,wBAChB1mC,EAAMob,gBAEN,MACJ,SACI7e,KAAK+e,WAAWC,UAAUvb,KAItCmlB,EAAJ3nB,UAAAmpC,iBAAI,WACSpqC,KAAKggB,QAAQyc,OAElBz8B,KAAK+e,WAAWsrB,eAAezlB,KAAK0lB,MAAMtqC,KAAKyoC,YAAczoC,KAAKggB,QAAQyc,MAAMgM,eAGpF7f,EAAJ3nB,UAAA6nC,iBAAI,SAAiB7oB,GAGb,GAFAjgB,KAAK+e,WAAWwC,cAActB,GAE1BjgB,KAAK2pC,WAAa3pC,KAAK0e,SAAU,CAC7C,GAAkB6rB,GAAgBvqC,KAAK+e,WAAWyrB,wBAChCC,EAAczqC,KAAK+e,WAAWuB,eAEhCiqB,GAAgBE,EAChBzqC,KAAKggB,QAAQzc,QAAQ,SAACuS,EAAMtD,GACpBA,GAAS+3B,GAAiB/3B,GAASi4B,GAAe30B,EAAKwyB,aAAY,KAG3EtoC,KAAKggB,QAAQzc,QAAQ,SAACuS,EAAMtD,GACpBA,GAASi4B,GAAej4B,GAAS+3B,GAAiBz0B,EAAKwyB,aAAY,KAI/EtoC,KAAK2pC,WAAY,MACd,IAAI3pC,KAAK4pC,SAAU,CAGtB,GAFA5pC,KAAK4pC,UAAW,GAEX5pC,KAAK0qC,gBAAgBzqB,GAAW,MAErCA,GAAO5U,aAEHrL,MAAKmpB,aACLnpB,KAAKggB,QAAQzc,QAAQ,SAACuS,GAAS,MAAAA,GAAKwyB,aAAY,KAChDroB,EAAOqoB,aAAY,GAI3BtoC,MAAK2qC,oBAAoB1qB,IAG7B2I,EAAJ3nB,UAAA8oC,oBAAI,WACJ,GAAca,GAAe5qC,KAAK+e,WAAWuB,eAErC,IAAoB,MAAhBsqB,GAAwB5qC,KAAK8kC,aAAa8F,GAAe,CACrE,GAAkBC,GAA8B7qC,KAAKggB,QAAQgD,UAAU4nB,EAEvDC,IAAiB7qC,KAAK0qC,gBAAgBG,KACtCA,EAAcx/B,SAGdrL,KAAK8qC,gBAAgBD,MAKjCjiB,EAAJ3nB,UAAA8pC,kBAAI,SACI3lC,EACA4lC,EACAC,EACAC,OAFR,KAAAF,IAAQA,EAA2ChrC,KAAKgrC,gBACxD,KAAAC,IAAQA,EAAqBjrC,KAAKmrC,WAAWF,eAGrCvhC,EAARzI,UAAc8pC,kBAAdlhC,KAAA7J,KAAgCoF,EAAM4lC,EAAYC,EAAeC,EAEjE,IAAcE,KAENH,GAAcI,eAAe9nC,QAAQ,SAAC+nC,GAC9C,GAAkBC,GAAUD,EAAKE,GAErBD,GAAQE,MAAMloC,QAAQ,SAACmoC,GACnB,GAAIH,EAAQI,qBAAuBD,EAAKE,gBAAiB,CACzE,GAA0BC,GAAgBP,EAAKG,MAAMC,EAAKI,UAEtCV,GAAiB16B,KAAKm7B,EAAiB,eAK/C7rC,KAAKggB,UACLhgB,KAAKggB,QAAQ+rB,MAAMX,GACnBprC,KAAKggB,QAAQgsB,mBAGjBhsC,KAAKoqC,oBAGTxhB,EAAJ3nB,UAAAwnC,UAAI,WACJ,GAAcC,GAAc1oC,KAAK0D,WAAWhB,cAAcimC,gBAClD,OAAID,GAAYt3B,OACLs3B,EAAY,GAAGniB,OAGnB,GAGXqC,EAAJ3nB,UAAA0pC,oBAAI,SAAoB1qB,GAChBjgB,KAAKwpC,iBAAiBnkC,KAAK,GAAI6jC,IAAuBlpC,KAAMigB,KAGhE2I,EAAJ3nB,UAAA6pC,gBAAI,SAAgB7qB,GACZjgB,KAAK0jB,gBAAgBre,KAAK,GAAI6jC,IAAuBlpC,KAAMigB,KAGvD2I,EAAZ3nB,UAAA6jC,aAAI,SAAqBtyB,GACjB,MAAOA,IAAS,GAAKA,EAAQxS,KAAKggB,QAAQ5O,QAGtCwX,EAAZ3nB,UAAAypC,gBAAI,SAAwBzqB,GACpB,QAASjgB,KAAKupC,YAAsD,IAAxCvpC,KAAKmhB,eAAejB,SAAS9O,QAAgB6O,EAAOC,0BAvQxFzZ,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,oBACVC,SAAU,kBACVuC,SAAU,kDACVtC,MACImC,MAAO,oBAEP2B,kBAAmB,WAEnB7D,YAAa,oBACbygB,kBAAmB,sBAEvB/c,QAAS,qdACTN,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,OACzC3B,YACMiS,QAASitB,GAAiC/sB,YAAa4N,IACvD9N,QAAS+M,EAAAA,QAAS7M,YAAa4N,4CA5DzCniB,KAAIS,EAAAA,aALJT,KAAIwlC,EAAAA,kBANJxlC,KAAI+E,EAAAA,oBAgIJ/E,KAAAgV,OAAAlU,aAAAd,KAASiV,EAAAA,UAAT/U,MAAmB,gBACnBF,KAAAgV,OAAAlU,aAAAd,KAASiV,EAAAA,UAAT/U,MAAmB,gBACnBF,KAAAgV,OAAAlU,aAAAd,KAASiV,EAAAA,UAAT/U,MAAmB,mBACnBF,KAAAgV,OAAAlU,aAAAd,KAASiV,EAAAA,UAAT/U,MAAmB,sCAtDnBwkC,aAAA1kC,KAAKyG,EAAAA,UAALvG,MAAeulC,EAAAA,qBAEflsB,UAAAvZ,KAAKm2B,EAAAA,gBAALj2B,MAAqBuhC,MAgBrBsB,mBAAA/iC,KAAKmB,EAAAA,SAEL8b,kBAAAjd,KAAKmB,EAAAA,SAELlD,WAAA+B,KAAKqB,EAAAA,SA4NL8gB,GArPqC0gB,IClE/B6C,IACFvjB,GACAsf,GACAvB,GACAC,GACAiB,IAGJre,GAAA,WAAA,QAAAA,MAK2B,sBAL3B/iB,KAAC8B,EAAAA,SAAD5B,OACI+B,SAAUC,EAAAA,aAAc4gB,EAAAA,cAAeG,IACvCjhB,QAAS0jC,GACT3jC,aAAc2jC,OAElB3iB,mBCgBI,QAAJ4iB,GACeC,EACA/E,EACAG,EACA6E,GAHAtsC,KAAfqsC,kBAAeA,EACArsC,KAAfsnC,SAAeA,EACAtnC,KAAfynC,aAAeA,EACAznC,KAAfssC,YAAeA,EA2Df,MAxDIF,GAAJnrC,UAAAsrC,YAAI,SAAYb,EAASnE,EAAeiF,EAAkBC,GAAtD,GAAJntC,GAAAU,KACc0sC,EAAW1sC,KAAKqsC,kBAAkBX,EAAMnE,EAgB9C,OAfAiF,GAAY97B,KAAKg8B,GAEb1sC,KAAKynC,aAAaiF,IAClB1sC,KAAKssC,YAAYZ,GACZ/qC,KAAKwN,EAAAA,KAAK,IACVrN,UAAU,SAAC6rC,GACRA,EAASppC,QAAQ,SAACqpC,EAAOp6B,GAC7C,GAA8Bq6B,GAA4BJ,EAAUp6B,OAC5Cw6B,GAAen8B,KAAK8B,IAAUm6B,EAASv7B,OAAS,GAEhD9R,EAAKitC,YAAYK,EAAOrF,EAAQ,EAAGiF,EAAaK,OAKzDL,GAQXJ,EAAJnrC,UAAA6rC,aAAI,SAAaC,GAAb,GAAJztC,GAAAU,KACcwsC,IAGN,OAFAO,GAAexpC,QAAQ,SAACmoC,GAAS,MAAApsC,GAAKitC,YAAYb,EAAM,EAAGc,QAEpDA,GAOXJ,EAAJnrC,UAAA+rC,qBAAI,SAAqBvB,EAAYpE,GAAjC,GAAJ/nC,GAAAU,KACcitC,KACAC,IAgBN,OAfAA,GAAc,IAAK,EAEnBzB,EAAMloC,QAAQ,SAACmoC,GAEX,IAAK,GADD5B,IAAS,EACJqD,EAAI,EAAGA,GAAK7tC,EAAKgoC,SAASoE,GAAOyB,IACtCrD,EAASA,GAAUoD,EAAcC,EAGjCrD,IAAUmD,EAAQv8B,KAAKg7B,GAEvBpsC,EAAKmoC,aAAaiE,KAClBwB,EAAc5tC,EAAKgoC,SAASoE,GAAQ,GAAKrE,EAAY+F,WAAW1B,MAIjEuB,GAEfb,oBA4BI,QAAJiB,GACgBhG,EACAiG,EACRC,OAAR,KAAAA,IAAQA,KAHJ,IAAJjuC,GAKQoK,EALRG,KAAA7J,OAAAA,WACgBV,GAAhB+nC,YAAgBA,EACA/nC,EAAhBguC,cAAgBA,EAnBZhuC,EAAJkuC,cAAoB,GAAIpxB,GAAAA,oBAEpB9c,EAAJmuC,aAAmB,GAAIrxB,GAAAA,oBAsBf9c,EAAKouC,MAAQ,GAAItxB,GAAAA,gBAAqBmxB,KAuB9C,MAhDgDvjC,GAAhDqjC,EAAA3jC,GAKIpI,OAAJ2I,eAAQojC,EAARpsC,UAAA,YAAI,WACI,MAAOjB,MAAK0tC,MAAM1qC,WAGtB,SAASA,GACLhD,KAAK0tC,MAAM5pC,KAAKd,GAEhBhD,KAAKwtC,cAAc1pC,KAAK9D,KAAKstC,cAAcR,aAAa9sC,KAAKoF,OAC7DpF,KAAKqnC,YAAYsG,UAAY3tC,KAAKwtC,cAAcxqC,uCAepDqqC,EAAJpsC,UAAA2sC,QAAI,SAAQC,GAAR,GAAJvuC,GAAAU,KACcmT,GACF06B,EAAiBC,WACjB9tC,KAAKqnC,YAAY0G,eAAetU,QAChCz5B,KAAKwtC,cAGT,OAAOh/B,GAAAA,MAAfgqB,UAAA,GAAwBrlB,GACXxS,KAAK4iB,EAAAA,IAAI,WAKN,MAJAjkB,GAAKmuC,aAAa3pC,KACdxE,EAAKguC,cAAcN,qBAAqB1tC,EAAKkuC,cAAcxqC,MAAO1D,EAAK+nC,cAGpE/nC,EAAKmuC,aAAazqC,UAIrCqqC,EAAJpsC,UAAA+sC,WAAI,aAGJX,GAhDgDY,EAAAA,2BCvGhD,QAAAC,KAAA,GAAA5uC,GAAA,OAAAoK,GAAAA,EAAA8uB,MAAAx4B,KAAA6mC,YAAA7mC,WAWYV,GAAZouC,MAAoB,GAAItxB,GAAAA,sBAUxB,MArB+CpS,GAA/CkkC,EAAAxkC,GAEIpI,OAAJ2I,eAAQikC,EAARjtC,UAAA,YAAI,WACI,MAAOjB,MAAK0tC,MAAM1qC,WAGtB,SAASA,GACLhD,KAAK0tC,MAAM5pC,KAAKd,oCAMpBkrC,EAAJjtC,UAAA2sC,QAAI,SAAQC,GAAR,GAAJvuC,GAAAU,IACQ,OAAOwO,GAAAA,MAAfgqB,UAAA,IAAyBqV,EAAiBC,WAAY9tC,KAAK0tC,QAC9C/sC,KAAK4iB,EAAAA,IAAI,WAAM,MAAAjkB,GAAK8F,SAG7B8oC,EAAJjtC,UAAA+sC,WAAI,aAGJE,GArB+CD,EAAAA,YCP/CrO,GAAA,WAEI,QAAJA,GAAuBx2B,GAAApJ,KAAvBoJ,SAAuBA,EACvB,sBAHA3C,KAACC,EAAAA,UAADC,OAAaC,SAAU,yDAJvBH,KAAoByJ,EAAAA,eAOpB0vB,KCFAD,GAAA,SAAAj2B,GAAA,QAAAi2B,oDAG2C,MAAX31B,GAAhC21B,EAAAj2B,kBAHAjD,KAACC,EAAAA,UAADC,OACIC,SAAU,mCAEd+4B,GAAgCwO,EAAAA,UAGhC,IAAoBC,eAAiB,WAAM,MAACD,GAAS,UAASC,eCe9D,QAAAC,GAAA,WAAA,QAAAA,MAAwB,MAAxBA,MACaC,GAAoD9kC,EAC7D6kC,IAGJjQ,GAAA,SAAA10B,GAqEI,QAAJ00B,GAAwBmQ,GAApB,GAAJjvC,GACQoK,EADRG,KAAA7J,OAAAA,WAAwBV,GAAxBivC,iBAAwBA,EApCpBjvC,EAAJkvC,UAAwB,GAcXlvC,EAAbwjB,aAA4B,GAAIpV,GAAAA,QAM5BpO,EAAJgG,SAA8B,KAM1BhG,EAAJkG,OAA4B,KAKxBlG,EAAJ8/B,UAAe,EAGH9/B,EAAZmvC,cAAmD,OAyBnD,MAjF2BzkC,GAA3Bo0B,EAAA10B,GAGIpI,OAAJ2I,eAAQm0B,EAARn9B,UAAA,eAAI,WACI,MAAOjB,MAAKyuC,+CA0DhBrQ,EAAJn9B,UAAAiS,YAAI,SAAYC,IAEJA,EAAQu7B,eAAe,cACvBv7B,EAAQu7B,eAAe,cAEvB1uC,KAAK8iB,aAAahf,QAI1Bs6B,EAAJn9B,UAAAmC,YAAI,WACIpD,KAAK8iB,aAAa/e,YAGtBq6B,EAAJn9B,UAAAiC,SAAI,WACIlD,KAAKyuC,cAAgB,GAAIr+B,GAAAA,eACrBpQ,KAAK2uC,iBAAmB3uC,KAAK4uC,gBAC7B5uC,KAAKuuC,kCAzFjB9nC,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,SAIVwC,SAAU,uDACVsB,QAAS,YACTJ,gBAAiBC,EAAAA,wBAAwBC,OACzCL,cAAeC,EAAAA,kBAAkBC,KACjCxD,SAAU,gDA7BdJ,KAAIY,EAAAA,sCAsCJwnC,gBAAApoC,KAAKiiB,EAAAA,aAAL/hB,MAAkBg5B,MAMlBgP,kBAAAloC,KAAKiiB,EAAAA,aAAL/hB,MAAkBi5B,IAAgBkP,KAAM5+B,EAAAA,gBAIxC0+B,kBAAAnoC,KAAKyG,EAAAA,UAALvG,MAAeuJ,EAAAA,eAIfs+B,YAAA/nC,KAAKqB,EAAAA,MAALnB,MAAW,WAIXwS,YAAA1S,KAAKqB,EAAAA,MAALnB,MAAW,gBAOXyS,iBAAA3S,KAAKqB,EAAAA,MAALnB,MAAW,sBAiDXy3B,GAjF2BkQ,IChCdS,IAITC,aAAcplC,EAAAA,QAAQ,gBAElB8N,EAAAA,MACI,wDACA9U,EAAAA,OAAQ+yB,UAAW,UAOvBje,EAAAA,MACI,OACA9U,EAAAA,OAAQ+yB,UAAW,2BAA4B/K,UAAW,SAE9DlT,EAAAA,MACI,QACA9U,EAAAA,OAAQ+yB,UAAW,0BAA2B/K,UAAW,SAG7DrP,EAAAA,WACI,yDACAC,EAAAA,QAAQ,yDAEZD,EAAAA,WAAW,8BACP3Y,EAAAA,OAAQ+yB,UAAW,6BACnBna,EAAAA,QAAQ,0DAEZD,EAAAA,WAAW,+BACP3Y,EAAAA,OAAQ+yB,UAAW,4BACnBna,EAAAA,QAAQ,6DCSpB0kB,GAAA,WAuDI,QAAJA,GAAwBx8B,EACY05B,EACpB5b,GAFZ,GAAJliB,GAAAU,IAAwBA,MAAxB0D,WAAwBA,EACY1D,KAApCo9B,IAAoCA,EAhCbp9B,KAAvBivC,YAA2D,GAAIz1B,GAAAA,aAGxCxZ,KAAvBkvC,gBAAgE,GAAI11B,GAAAA,aAG7CxZ,KAAvBmvC,mBAAmE,GAAI31B,GAAAA,aAGhDxZ,KAAvBovC,WAAwD,GAAI51B,GAAAA,cAAmB,GAclExZ,KAAbw+B,kBAAyC,MAM7Bx+B,KAAZqvC,sBAAoCC,EAAAA,aAAaC,MAMrCvvC,KAAKo9B,KAAO5b,IACZxhB,KAAKqvC,sBAAwBrvC,KAAKo9B,IAAI39B,OAAOqB,UAAU,SAACV,GACpDd,EAAKkwC,8BAA8BpvC,GACnCohB,EAAkBtf,kBA0ElC,MA1HIZ,QAAJ2I,eACQi2B,EADRj/B,UAAA,gBAAI,SACaqE,GACTtF,KAAKyvC,cAAgBnqC,EACrBtF,KAAKwvC,iEAsDTtP,EAAJj/B,UAAAiC,SAAI,WAC8B,WAAtBlD,KAAK0vC,cAA4C,MAAf1vC,KAAKwF,SACvCxF,KAAK0vC,aAAe1vC,KAAK2vC,8BAIjCzP,EAAJj/B,UAAAmC,YAAI,WACIpD,KAAKqvC,sBAAsBt4B,eAG/BmpB,EAAJj/B,UAAA2uC,sBAAI,SAAsB3rC,GAC1B,GAAc4rC,GAAc7vC,KAAK8vC,iBAAiB7rC,EAAE+J,QAC5ChO,MAAKkvC,gBAAgB7pC,KAAKwqC,GACtBA,GACA7vC,KAAKivC,YAAY5pC,KAAKrF,KAAK0D,WAAWhB,cAAcH,eAI5D29B,EAAJj/B,UAAA8uC,uBAAI,SAAuB9rC,GAEfjE,KAAK8vC,iBAAiB7rC,EAAE+J,UAAYhO,KAAK8vC,iBAAiB9vC,KAAK0vC,eAC/D1vC,KAAKovC,WAAW/pC,OAGhBrF,KAAK8vC,iBAAiB7rC,EAAE+rC,aAAehwC,KAAK8vC,iBAAiB9vC,KAAK0vC,eAClE1vC,KAAKmvC,mBAAmB9pC,QAKhC66B,EAAJj/B,UAAAgvC,mBAAI,WACI,MAAOjwC,MAAKo9B,KAA0B,QAAnBp9B,KAAKo9B,IAAIp6B,MAAkB,MAAQ,OAI1Dk9B,EAAJj/B,UAAA6uC,iBAAI,SAAiBxqC,GACb,MAAoB,WAAbA,GACU,uBAAbA,GACa,wBAAbA,GAIA46B,EAAZj/B,UAAAuuC,8BAAI,SAAsCpS,OAA1C,KAAAA,IAA0CA,EAAiBp9B,KAAKiwC,sBACpDjwC,KAAKyvC,cAAgB,EACrBzvC,KAAK0vC,aAAuB,QAARtS,EAAgB,OAAS,QACtCp9B,KAAKyvC,cAAgB,EAC5BzvC,KAAK0vC,aAAuB,QAARtS,EAAgB,QAAU,OAE9Cp9B,KAAK0vC,aAAe,UAQpBxP,EAAZj/B,UAAA0uC,0BAAI,WACJ,GAAcvS,GAAMp9B,KAAKiwC,oBAEjB,OAAa,QAAR7S,GAAiBp9B,KAAKwF,QAAU,GAAe,QAAR43B,GAAiBp9B,KAAKwF,OAAS,EAChE,qBAGJ,sCAtIfiB,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,cACVwC,SAAJ,mSACIqB,QAAS,uHACTN,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,OACzCc,YAAayjC,GAAiBC,cAC9BloC,MACImC,MAAO,uDAnDfxC,KAAIS,EAAAA,aAUJT,KAASiB,EAAAA,eAATH,aAAAd,KAyFiBkB,EAAAA,aA1GjBlB,KAAI+E,EAAAA,uCAgEJlG,WAAAmB,KAAKqB,EAAAA,QAULmnC,cAAAxoC,KAAKmB,EAAAA,SAGLsnC,kBAAAzoC,KAAKmB,EAAAA,SAGLunC,qBAAA1oC,KAAKmB,EAAAA,SAGLwnC,aAAA3oC,KAAKmB,EAAAA,SAGLsoC,aAAAzpC,KAAKyG,EAAAA,UAALvG,MAAewpC,EAAAA,uBAGfC,UAAA3pC,KAAKqB,EAAAA,MAALnB,MAAW,aAGXnB,SAAAiB,KAAKqB,EAAAA,QAKL02B,oBAAA/3B,KAAKqB,EAAAA,SAyFLo4B,KAMAC,GAAA,SAAAz2B,GASI,QAAJy2B,GACQkQ,EACA9B,EAC6CznC,GAHjD,GAAJxH,GAIQoK,EAJRG,KAAA7J,KAIcqwC,EAA0B9B,IAJxCvuC,WAGqDV,GAArDwH,KAAqDA,EAPzCxH,EAAZgxC,aAA2BhB,EAAAA,aAAaC,MAE5BjwC,EAAZixC,WAAyBjB,EAAAA,aAAaC,QAgCtC,MApCqCvlC,GAArCm2B,EAAAz2B,GAcIy2B,EAAJl/B,UAAAiC,SAAI,WAAA,GAAJ5D,GAAAU,IACQ0J,GAARzI,UAAciC,SAAd2G,KAAA7J,MAEQA,KAAKswC,aAAetwC,KAAK8G,KAAKooC,gBACzBvuC,KAAKi5B,EAAAA,UAAU55B,KAAK8G,KAAKgpC,iBAAiB9vC,KAAK8G,KAAK4oC,gBACpD5uC,UAAU,SAAC+uC,GACJA,IAAgBvwC,EAAK4B,eACrB5B,EAAKwF,OAAOxF,EAAKwH,KAAKspC,WAIlCpwC,KAAKuwC,WAAavwC,KAAK8G,KAAKqoC,mBAAmBruC,UAAU,WACrDxB,EAAKyB,YAKbo/B,EAAJl/B,UAAAmC,YAAI,WACIsG,EAARzI,UAAcmC,YAAdyG,KAAA7J,MACQA,KAAKswC,aAAav5B,cAClB/W,KAAKuwC,WAAWx5B,8BArCxBtQ,KAACC,EAAAA,UAADC,OACIC,SAAU,0DArLdH,KAAI+pC,EAAAA,2BACJ/pC,KAAIY,EAAAA,mBA+LJZ,KAA2Dy5B,GAA3D34B,aAAAd,KAASe,EAAAA,OAATb,MAAgBsU,EAAAA,WAAW,WAAM,MAAAilB,YA2BjCC,GApCqChzB,EAAAA,+BC5LrC,QAAAsjC,MAAoC,MAApCA,MACaC,GACsBlnC,EAAcinC,IAMjDxQ,GAAA,SAAAv2B,GASI,QAAJu2B,GAAuBv8B,GAAnB,GAAJpE,GACQoK,EADRG,KAAA7J,OAAAA,WAAuBV,GAAvBoE,WAAuBA,IAgBvB,MAjBuCsG,GAAvCi2B,EAAAv2B,GAMIu2B,EAAJh/B,UAAA2Y,MAAI,WACI5Z,KAAK0D,WAAWhB,cAAckX,SAGlCqmB,EAAJh/B,UAAA0vC,cAAI,WACI,MAAO3wC,MAAK0D,WAAWhB,cAAckuC,YAGzC3Q,EAAJh/B,UAAA4vC,eAAI,WACI,MAAO7wC,MAAK0D,WAAWhB,cAAcouC,4BAvB7CrqC,KAACC,EAAAA,UAADC,OACIC,SAAU,sBACV8D,QAAS,YACT5D,MACIsU,sBAAuB,WACvBkkB,uBAAwB,sDAvBhC74B,KAAoBS,EAAAA,cA2CpB+4B,GAjBuCyQ,kBCsBvC,QAAAK,MAA8B,MAA9BA,MASA3Q,GAAA,SAAA12B,GAkHI,QAAJ02B,GACgB18B,EACA8d,EACAmE,EACYyX,EACZv9B,GALZ,GAAJP,GAOQoK,EAPRG,KAAA7J,OAAAA,WACgBV,GAAhBoE,WAAgBA,EACApE,EAAhBkiB,kBAAgBA,EACAliB,EAAhBqmB,cAAgBA,EACYrmB,EAA5B89B,IAA4BA,EACZ99B,EAAhBO,OAAgBA,EA/CZP,EAAJ0xC,wBAA6B,EAGzB1xC,EAAJ2xC,oBAAyB,EAGrB3xC,EAAJ4xC,qBAA0B,EAIb5xC,EAAb6xC,mBAAwD,GAAI33B,GAAAA,aAI/Cla,EAAb8xC,aAAkD,GAAI53B,GAAAA,aAG1Cla,EAAZ+xC,gBAA8B,EAGlB/xC,EAAZgyC,sBAAmC,EAGdhyC,EAArBuB,UAAiC,GAAI6M,GAAAA,QAiBzBpO,EAAZiyC,eAAqC,IAsUrC,MAzaiCvnC,GAAjCo2B,EAAA12B,GAGIpI,OAAJ2I,eACQm2B,EADRn/B,UAAA,qBAAI,WAEI,MAAOjB,MAAKuxC,oBAEhB,SAAkBvuC,GACtB,GAAc+9B,GAAelsB,EAAAA,qBAAqB7R,EAC1ChD,MAAKsxC,qBAAuBtxC,KAAKuxC,iBAAmBxQ,EACpD/gC,KAAKuxC,eAAiBxQ,EAElB/gC,KAAK+e,YACL/e,KAAK+e,WAAW4mB,iBAAiB5E,oCAKzCz/B,OAAJ2I,eAAQm2B,EAARn/B,UAAA,kBAAI,WACI,MAAOjB,MAAK+e,WAAa/e,KAAK+e,WAA0B,gBAAI,OAIhE,SAAe/b,GAENhD,KAAK8kC,aAAa9hC,IACnBhD,KAAKwxC,aAAexuC,GACnBhD,KAAK+e,YAKV/e,KAAK+e,WAAWwC,cAAcve,oCAIlC1B,OAAJ2I,eAAQm2B,EAARn/B,UAAA,sBAAI,WACI,MAAOjB,MAAKqxC,qBAEhB,SAAmBI,GACfzxC,KAAKqxC,gBAAkBzsB,KAAKkH,IACxB,EACAlH,KAAKC,IAAI7kB,KAAK0xC,uBAAwBD,IAK1CzxC,KAAK2xC,uBAAwB,EAC7B3xC,KAAK4xC,0DA+DTxR,EAAJn/B,UAAA4wC,sBAAI,WAEQ7xC,KAAK8xC,gBAAkB9xC,KAAK+xC,cAAc3gC,SAC1CpR,KAAKgyC,mBACLhyC,KAAK8xC,cAAgB9xC,KAAK+xC,cAAc3gC,OACxCpR,KAAKwhB,kBAAkBtf,gBAKvBlC,KAAKsxC,uBACLtxC,KAAKiyC,cAAcjyC,KAAKuxC,gBACxBvxC,KAAK4xC,yBACL5xC,KAAKsxC,sBAAuB,EAC5BtxC,KAAKwhB,kBAAkBtf,gBAKvBlC,KAAK2xC,wBACL3xC,KAAKkyC,0BACLlyC,KAAK2xC,uBAAwB,EAC7B3xC,KAAKwhB,kBAAkBtf,iBAI/Bk+B,EAAJn/B,UAAA+C,cAAI,SAAcP,GACV,OAAQA,EAAMU,SACV,IAAKqb,GAAAA,KACDxf,KAAK+e,WAAWW,qBAChBjc,EAAMob,gBACN,MACJ,KAAKY,GAAAA,IACDzf,KAAK+e,WAAWY,oBAChBlc,EAAMob,gBACN,MACJ,KAAKL,GAAAA,MACL,IAAKC,GAAAA,MACDze,KAAKmxC,mBAAmB9rC,KAAKrF,KAAKwxC,YAClC/tC,EAAMob,gBACN,MACJ,SACI7e,KAAK+e,WAAWC,UAAUvb,KAItC28B,EAAJn/B,UAAAu4B,mBAAI,WAAA,GAAJl6B,GAAAU,KACcmyC,EAAYnyC,KAAKo9B,IAAMp9B,KAAKo9B,IAAI39B,OAAS2yC,EAAAA,GAAa,MACtDC,EAASryC,KAAK2lB,cAAclmB,OAxMX,KAyMjB6yC,EAAU,WACZhzC,EAAK0yC,mBAGThyC,MAAK+e,WAAa,GAAI8kB,GAAAA,gBAAgB7jC,KAAK+xC,eACtChY,0BAA0B/5B,KAAKiwC,sBAC/BsC,WAELvyC,KAAK+e,WAAW4mB,iBAAiB,OAIAr+B,WAA1BkrC,uBACDF,IACAE,sBAAsBF,GAI5B9jC,EAAAA,MAAM2jC,EAAWE,GACZ1xC,KAAKC,EAAAA,UAAUZ,KAAKa,YACpBC,UAAU,WACPwxC,IACAhzC,EAAKyf,WAAWgb,0BACZz6B,EAAK2wC,wBAOjBjwC,KAAK+e,WAAWtf,OACXkB,KAAKC,EAAAA,UAAUZ,KAAKa,YACpBC,UAAU,SAAC2xC,GACRnzC,EAAK8xC,aAAa/rC,KAAKotC,GACvBnzC,EAAKozC,YAAYD,MAI7BrS,EAAJn/B,UAAAmC,YAAI,WACIpD,KAAKa,UAAUiD,OACf9D,KAAKa,UAAUkD,YAMnBq8B,EAAJn/B,UAAA0xC,iBAAI,WAAA,GAAJrzC,GAAAU,KACcihC,EAAcjhC,KAAK0D,WAAWhB,cAAcu+B,WAMlD,IAAIA,IAAgBjhC,KAAK4yC,mBAAoB,CACzC5yC,KAAK4yC,mBAAqB3R,CAEtC,IAAkB4R,GAAe,WACjBvzC,EAAK0yC,mBACL1yC,EAAKkiB,kBAAkBtf,eAM3BlC,MAAKH,OAASG,KAAKH,OAAOC,IAAI+yC,GAAgBA,MAWtDzS,EAAJn/B,UAAA+wC,iBAAI,WACIhyC,KAAK8yC,yBACL9yC,KAAK4xC,yBACL5xC,KAAKkyC,2BAOT9R,EAAJn/B,UAAA6jC,aAAI,SAAatyB,GACT,IAAKxS,KAAK+xC,cACN,OAAO,CAGnB,IAAclU,GAAM79B,KAAK+xC,cACX/xC,KAAK+xC,cAAc/uB,UAAUxQ,GAC7B,IAEN,SAASqrB,IAAQA,EAAIn5B,UAOzB07B,EAAJn/B,UAAAyxC,YAAI,SAAY5oC,GAKR,GAJI9J,KAAKgxC,wBACLhxC,KAAKiyC,cAAcnoC,GAGnB9J,KAAK+xC,eAAiB/xC,KAAK+xC,cAAc3gC,OAAQ,CACjDpR,KAAK+xC,cAAc/uB,UAAUlZ,GAAU8P,OAKnD,IAAkBm5B,GAAc/yC,KAAKgzC,iBAAiBtwC,cACpC06B,EAAMp9B,KAAKiwC,oBAGb8C,GAAYE,WADJ,QAAR7V,EACyB,EAGrB2V,EAAYG,YAAcH,EAAYjC,cAMtD1Q,EAAJn/B,UAAAgvC,mBAAI,WACI,MAAOjwC,MAAKo9B,KAA0B,QAAnBp9B,KAAKo9B,IAAIp6B,MAAkB,MAAQ,OAI1Do9B,EAAJn/B,UAAAixC,wBAAI,WACJ,GAAciB,GAAiBnzC,KAAKmzC,eACtBC,EAC4B,QAA9BpzC,KAAKiwC,sBACEkD,EACDA,CAOVnzC,MAAKqzC,QAAQ3wC,cAAcE,MAAM+yB,UAAY,cAAc/Q,KAAKuB,MAAMitB,GAA9E,MAKQpzC,KAAKqzC,QAAQ3wC,cAAcuwC,WAAa,GAW5C7S,EAAJn/B,UAAAqyC,aAAI,SAAaC,GACjB,GAAcC,GAAaxzC,KAAKgzC,iBAAiBtwC,cAAcouC,WAGvD9wC,MAAKmzC,iBACe,WAAdI,GAA0B,EAAI,GAAKC,EA3Wf,GAoX9BpT,EAAJn/B,UAAAgxC,cAAI,SAAcwB,GAClB,GAAcC,GAAgB1zC,KAAK+xC,cACrB/xC,KAAK+xC,cAAc/uB,UAAUywB,GAC7B,IAEN,IAAKC,EAAL,CAKR,GAEYC,GACAC,EAHEJ,EAAaxzC,KAAKgzC,iBAAiBtwC,cAAcouC,WAKrB,SAA9B9wC,KAAKiwC,sBACL0D,EAAiBD,EAAc/C,gBAC/BiD,EAAgBD,EAAiBD,EAAc7C,mBAE/C+C,EACI5zC,KAAKqzC,QAAQ3wC,cAAcouC,YAC3B4C,EAAc/C,gBAClBgD,EAAiBC,EAAgBF,EAAc7C,iBAG3D,IAAcgD,GAAmB7zC,KAAKmzC,eACxBW,EAAkB9zC,KAAKmzC,eAAiBK,CAE1CG,GAAiBE,EAEjB7zC,KAAKmzC,gBACDU,EAAmBF,EArYJ,GAsYZC,EAAgBE,IAEvB9zC,KAAKmzC,gBACDS,EAAgBE,EAzYD,MAqZ3B1T,EAAJn/B,UAAA6xC,uBAAI,WACJ,GAAciB,GACF/zC,KAAKqzC,QAAQ3wC,cAAcwwC,YAC3BlzC,KAAK0D,WAAWhB,cAAcouC,WAE7BiD,KACD/zC,KAAKmzC,eAAiB,GAGtBY,IAAc/zC,KAAKgxC,wBACnBhxC,KAAKwhB,kBAAkBtf,eAG3BlC,KAAKgxC,uBAAyB+C,GAYlC3T,EAAJn/B,UAAA2wC,uBAAI,WAEI5xC,KAAKkxC,oBAA8C,IAAxBlxC,KAAKmzC,eAChCnzC,KAAKixC,mBACDjxC,KAAKmzC,iBAAmBnzC,KAAK0xC,uBACjC1xC,KAAKwhB,kBAAkBtf,gBAU3Bk+B,EAAJn/B,UAAAywC,qBAAI,WAII,MAHwB1xC,MAAKqzC,QAAQ3wC,cAAcwwC,YAChClzC,KAAKgzC,iBAAiBtwC,cAAcouC,aAEhB,kBApb/CrqC,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,gBACVwC,SAAJ,2vBACIqB,QAAS,44CACTN,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,OACzC1D,MACImC,MAAO,gBACP+qC,qDACI,yBACJC,4BAA6B,yEA5DrCxtC,KAAIS,EAAAA,aAHJT,KAAI+E,EAAAA,oBAkBJ/E,KAASqhB,EAAAA,gBAHTrhB,KAAoBiB,EAAAA,eAApBH,aAAAd,KA4JSkB,EAAAA,aArKTlB,KAAIU,EAAAA,4BA+DJwzB,gBAAAl0B,KAAKqB,EAAAA,QAgDLiqC,gBAAAtrC,KAAKm2B,EAAAA,gBAALj2B,MAAqBs5B,MAErB+S,mBAAAvsC,KAAKyG,EAAAA,UAALvG,MAAe,sBAEf0sC,UAAA5sC,KAAKyG,EAAAA,UAALvG,MAAe,aAafwqC,qBAAA1qC,KAAKmB,EAAAA,SAILwpC,eAAA3qC,KAAKmB,EAAAA,UAiWLw4B,GAzaiC2Q,IpBrCjClR,GAAA,WAAA,QAAAA,MAIoC,sBAJpCp5B,KAACC,EAAAA,UAADC,OACIC,SAAU,+DACVE,MAAQmC,MAAO,0BAEnB42B,KAEAC,GAAA,WAAA,QAAAA,MAI0C,sBAJ1Cr5B,KAACC,EAAAA,UAADC,OACIC,SAAU,6EACVE,MAAQmC,MAAO,wCAEnB62B,KAEAC,GAAA,WAAA,QAAAA,MAIuC,sBAJvCt5B,KAACC,EAAAA,UAADC,OACIC,SAAU,uEACVE,MAAQmC,MAAO,qCAEnB82B,KAEAC,GAAA,WAAA,QAAAA,MAIsC,sBAJtCv5B,KAACC,EAAAA,UAADC,OACIC,SAAU,mEACVE,MAAQmC,MAAO,mCAEnB+2B,KAGIkU,GAAS,gBAGb,QAAAC,MAKA,MAAAA,MAYajW,GAAiB,GAAI/uB,GAAAA,eAAe,gCAM7C,QAAJilC,GAAuB9qC,GAAAtJ,KAAvBsJ,YAAuBA,EACvB,MAAA8qC,MACavV,GAGTlmB,EAAWnP,EAAc4qC,KAM7BtW,GAAA,SAAAp0B,GAwEI,QAAJo0B,GACQp6B,EACQ8d,EACoB6yB,EACQC,GAJxC,GAAJh1C,GAMQoK,EANRG,KAAA7J,KAMc0D,IANd1D,WAEgBV,GAAhBkiB,kBAAgBA,EArCHliB,EAAbi/B,eAAmD,QAM5Bj/B,EAAvBm/B,oBAAmE,GAAIjlB,GAAAA,aAGhDla,EAAvBo/B,YACQ,GAAIllB,GAAAA,aAGWla,EAAvBq/B,cAA2D,GAAInlB,GAAAA,aAGxCla,EAAvBs/B,kBACQ,GAAIplB,GAAAA,cAA+B,GAG/Bla,EAAZi1C,cAA2C,EAG/Bj1C,EAAZk1C,qBAA2C,EAG/Bl1C,EAAZm1C,iBAA+BnF,EAAAA,aAAaC,MAGhCjwC,EAAZq+B,qBAAmC2R,EAAAA,aAAaC,MACpCjwC,EAAZo1C,gBAAsC,EAC1Bp1C,EAAZiyC,eAA4C,KAYpCjyC,EAAKq1C,SAAWjgC,EAAAA,sBAAsB2/B,GAEtC/0C,EAAKs1C,QAAUV,KACf50C,EAAKk/B,kBAAoB8V,GAAiBA,EAAc9V,kBACpD8V,EAAc9V,kBAAoB,QA4K9C,MAlPgCx0B,GAAhC8zB,EAAAp0B,GAKIpI,OAAJ2I,eACQ6zB,EADR78B,UAAA,qBAAI,WAC+B,MAAOjB,MAAK00C,oBAC3C,SAAkB1xC,GAAkBhD,KAAK00C,eAAiBhgC,EAAAA,sBAAsB1R,oCAGhF1B,OAAJ2I,eACQ6zB,EADR78B,UAAA,qBAAI,WACqC,MAAOjB,MAAKuxC,oBACjD,SAAkBvuC,GACdhD,KAAKu0C,cAAgB1/B,EAAAA,qBAAqB7R,EAAO,uCAkErD86B,EAAJ78B,UAAA4wC,sBAAI,WAAA,GAAJvyC,GAAAU,KAGcu0C,EAAgBv0C,KAAKu0C,cAAgBv0C,KAAK+9B,cAAc/9B,KAAKu0C,cAInE,IAAIv0C,KAAKuxC,iBAAmBgD,EAAe,CACnD,GAAkBM,GAAoC,MAAvB70C,KAAKuxC,cAEnBsD,IACD70C,KAAK4+B,kBAAkBv5B,KAAKrF,KAAK80C,kBAAkBP,IAKvD7zB,QAAQC,UAAUC,KAAK,WACnBthB,EAAKs+B,KAAKr6B,QAAQ,SAACs6B,EAAKrrB,GAAU,MAAAqrB,GAAIuB,SAAW5sB,IAAU+hC,IAEtDM,GACDv1C,EAAKm/B,oBAAoBp5B,KAAKkvC,KAM1Cv0C,KAAK49B,KAAKr6B,QAAQ,SAACs6B,EAAYrrB,GAC3BqrB,EAAIv4B,SAAWkN,EAAQ+hC,EAII,MAAvBj1C,EAAKiyC,gBAA2C,IAAjB1T,EAAIv4B,UAAmBu4B,EAAIr4B,SAC1Dq4B,EAAIr4B,OAAS+uC,EAAgBj1C,EAAKiyC,kBAItCvxC,KAAKuxC,iBAAmBgD,IACxBv0C,KAAKuxC,eAAiBgD,EACtBv0C,KAAKwhB,kBAAkBtf,iBAI/B47B,EAAJ78B,UAAAu4B,mBAAI,WAAA,GAAJl6B,GAAAU,IACQA,MAAK+0C,uBAIL/0C,KAAKy0C,iBAAmBz0C,KAAK49B,KAAKzqB,QAAQrS,UAAU,WAKhD,GAJsBxB,EAAKy+B,cAAcz+B,EAAKi1C,iBAIxBj1C,EAAKiyC,eAGvB,IAAK,GAFC3T,GAAOt+B,EAAKs+B,KAAK5a,UAEdmqB,EAAI,EAAGA,EAAIvP,EAAKxsB,OAAQ+7B,IAC7B,GAAIvP,EAAKuP,GAAG/N,SAAU,CAIlB9/B,EAAKi1C,cAAgBj1C,EAAKiyC,eAAiBpE,CAC3C,OAKZ7tC,EAAKy1C,uBACLz1C,EAAKkiB,kBAAkBtf,kBAI/B47B,EAAJ78B,UAAAmC,YAAI,WACIpD,KAAKy0C,iBAAiB19B,cACtB/W,KAAK29B,qBAAqB5mB,eAG9B+mB,EAAJ78B,UAAA+qB,aAAI,SAAaxZ,GACTxS,KAAK0+B,YAAYr5B,KAAKrF,KAAK80C,kBAAkBtiC,KAIjDsrB,EAAJ78B,UAAA+zC,cAAI,SAAc7H,GACV,MAAO,gBAAgBntC,KAAK40C,QAApC,IAA+CzH,GAI3CrP,EAAJ78B,UAAAg0C,gBAAI,SAAgB9H,GACZ,MAAO,kBAAkBntC,KAAK40C,QAAtC,IAAiDzH,GAO7CrP,EAAJ78B,UAAAi0C,wBAAI,SAAwBC,GACpB,GAAKn1C,KAAK00C,gBAAmB10C,KAAKw0C,qBAAlC,CAER,GAAcY,GAAuBp1C,KAAKq+B,eAAe37B,aAEjD0yC,GAAQxyC,MAAM2jB,OAAYvmB,KAAKw0C,qBAAvC,KAIYx0C,KAAKq+B,eAAe37B,cAAc44B,eAClC8Z,EAAQxyC,MAAM2jB,OAAY4uB,EAAtC,QAKIrX,EAAJ78B,UAAAo0C,2BAAI,WACIr1C,KAAKw0C,qBAAuBx0C,KAAKq+B,eAAe37B,cAAcH,aAC9DvC,KAAKq+B,eAAe37B,cAAcE,MAAM2jB,OAAS,GACjDvmB,KAAK2+B,cAAct5B,QAIvBy4B,EAAJ78B,UAAAmhC,YAAI,SAAYvE,EAAYS,EAAwB9rB,GACvCqrB,EAAIn5B,WACL1E,KAAK26B,cAAgB2D,EAAUkT,WAAah/B,IAKpDsrB,EAAJ78B,UAAA8nC,YAAI,SAAYlL,EAAYrrB,GACpB,MAAIqrB,GAAIn5B,SACG,KAGJ1E,KAAK26B,gBAAkBnoB,EAAQ,GAAK,GAGvCsrB,EAAZ78B,UAAA6zC,kBAAI,SAA0BtiC,GAC9B,GAAc/O,GAAQ,GAAI0wC,GAMlB,OALA1wC,GAAM+O,MAAQA,EACVxS,KAAK49B,MAAQ59B,KAAK49B,KAAKxsB,SACvB3N,EAAMo6B,IAAM79B,KAAK49B,KAAK5a,UAAUxQ,IAG7B/O,GASHq6B,EAAZ78B,UAAA8zC,qBAAI,WAAA,GAAJz1C,GAAAU,IACYA,MAAK29B,sBACL39B,KAAK29B,qBAAqB5mB;oEAG9B/W,KAAK29B,qBAAuBnvB,EAAAA,MAApCgqB,UAAA,GAA6Cx4B,KAAK49B,KAAKra,IAAI,SAACsa,GAAQ,MAAAA,GAAI/a,gBAC3DhiB,UAAU,WAAM,MAAAxB,GAAKkiB,kBAAkBtf,kBAIxC47B,EAAZ78B,UAAA88B,cAAI,SAAsBvrB,GAIlB,MAAOoS,MAAKC,IAAI7kB,KAAK49B,KAAKxsB,OAAS,EAAGwT,KAAKkH,IAAItZ,GAAS,EAAG,oBA9PnE/L,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,eACVC,SAAU,aACVuC,SAAJ,s+CACIqB,QAAS,s0FACTN,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,OACzCE,QAAS,SACT5D,MACImC,MAAO,eACP+0B,sCAAuC,gBACvCC,uCAAwC,sEAnGhDx3B,KAAIS,EAAAA,aAHJT,KAAI+E,EAAAA,oBAsKJ/E,KAAAgV,OAAAlU,aAAAd,KAASiV,EAAAA,UAAT/U,MAAmB,qBACnBF,SAAAa,GAAAC,aAAAd,KAASe,EAAAA,OAATb,MAAgBu3B,MAAhBz3B,KAAiCkB,EAAAA,gCAzDjCw2B,gBAAA13B,KAAKqB,EAAAA,QAKL6yB,gBAAAl0B,KAAKqB,EAAAA,QAML81B,OAAAn3B,KAAKm2B,EAAAA,gBAALj2B,MAAqBy3B,MAErBC,iBAAA53B,KAAKyG,EAAAA,UAALvG,MAAe,oBAEf23B,YAAA73B,KAAKyG,EAAAA,UAALvG,MAAe,eAGf43B,iBAAA93B,KAAKqB,EAAAA,QAGL02B,oBAAA/3B,KAAKqB,EAAAA,QAGL22B,sBAAAh4B,KAAKmB,EAAAA,SAGL82B,cAAAj4B,KAAKmB,EAAAA,SAIL+2B,gBAAAl4B,KAAKmB,EAAAA,SAGLg3B,oBAAAn4B,KAAKmB,EAAAA,UA2MLk2B,GAlPgCe,kBCjF5B,QAAJC,GAAuBx1B,GAAAtJ,KAAvBsJ,YAAuBA,EACvB,MAAAw1B,MACaC,GACapmB,EAAWmmB,IAKrCE,GAAA,SAAAt1B,GAYQ,QAARs1B,GAAoBt7B,GACpB,MAAYgG,GAAZG,KAAA7J,KAAkB0D,IAAlB1D,KAEK,MALyBgK,GAA9Bg1B,EAAAt1B,kBAVAjD,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,mBACVC,SAAU,wBACV6D,QAAS,SACTtB,SAAJ,4DACIqB,QAAS,q4GACT3D,MAAQmC,MAAO,kBACfkB,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,+CAvC7C/D,KAAIS,EAAAA,cA8CJ83B,GAL8BD,kBAQ9B,QAAAE,MAA4B,MAA5BA,MACaC,GACcxmB,EAAclP,EAAcy1B,KAKvDE,GAAA,SAAAz1B,GA6BI,QAAJy1B,GACez7B,EACgBoG,EACfH,GAHZ,GAAJrK,GAKQoK,EALRG,KAAA7J,OAAAA,WACeV,GAAfoE,WAAeA,EAECpE,EAAhBqK,aAAgBA,EALFrK,EAAd8/B,UAAkC,EAS1B9/B,EAAKwK,SAAWhH,SAASgH,IAAa,EACtCxK,EAAKqK,aAAaI,QAAQzK,EAAKoE,WAAWhB,iBAMlD,MA9B+BsH,GAA/Bm1B,EAAAz1B,GAGIpI,OAAJ2I,eACQk1B,EADRl+B,UAAA,cAAI,WAEI,MAAOjB,MAAKo/B,cAEhB,SAAWp8B,GACHA,IAAUhD,KAAKo/B,WACfp/B,KAAKo/B,SAAWp8B,oCAkBxBm8B,EAAJl+B,UAAAmC,YAAI,WACIpD,KAAK2J,aAAaO,eAAelK,KAAK0D,WAAWhB,+BAzCzD+D,KAACC,EAAAA,UAADC,OACIC,SAAU,6BACVC,SAAU,YACV6D,QAAS,WAAY,YACrB5D,MACImC,MAAO,cACPo2B,sBAAuB,SACvBC,uBAAwB,sBACxBC,kBAAmB,WACnBnkB,sBAAuB,WACvBokB,oBAAqB,kDAlE7B/4B,KAAIS,EAAAA,aAuFJT,KAAAgV,OAAAlU,aAAAd,KAASiV,EAAAA,UAAT/U,MAAmB,gBAlFnBF,KAASoE,EAAAA,kCAmET40B,SAAAh5B,KAAKqB,EAAAA,SA2BLq3B,GA9B+BD,ICpD/BQ,GAAA,WAAA,QAAAA,MAsC2B,sBAtC3Bj5B,KAAC8B,EAAAA,SAAD5B,OACI+B,SACIC,EAAAA,aACAqL,GACAD,EAAAA,aACApI,EAAAA,YAGJlD,SACIuL,GACA8pB,GACA6B,GACAvB,GACAY,GACAG,GACAS,GACAC,GACAC,GACAC,GACAC,IAEJx3B,cACIs1B,GACA6B,GACAvB,GACA6B,GACAjB,GACAG,GACAe,GACAC,GACAC,GACAR,GACAC,GACAC,GACAC,GACAC,QAGRN,KCjDapI,GAA0B,GAAInoB,GAAAA,eAAqC,yCC4B5E,QAAJkxB,GAAuBxlB,EAAsBqF,EAA0BuC,OAAvE,KAAAA,IAAuEA,GAAvE,GAAuBziB,KAAvB6a,OAAuBA,EAAsB7a,KAA7CkgB,SAA6CA,EAA0BlgB,KAAvEyiB,YAAuEA,EACvE,MAAA4d,MAGMC,IAAuB,gBAM7BlJ,GAAA,WAAA,QAAAA,MAI0B,sBAJ1B3wB,KAACC,EAAAA,UAADC,OACIC,SAAU,+BACVE,MAAQmC,MAAO,qBAEnBmuB,KAMAD,GAAA,WAAA,QAAAA,MAIgC,sBAJhC1wB,KAACC,EAAAA,UAADC,OACIC,SAAU,4CACVE,MAAQmC,MAAO,4BAEnBkuB,KAEAoJ,GAAA,WAEI,QAAJA,GAAuBj3B,GAAAtJ,KAAvBsJ,YAAuBA,EAEvB,MAAAi3B,MAGaC,GAAoE7nB,EAAWnP,EAAc+2B,KAG1G/X,GAAA,SAAA9e,GAqII,QAAJ8e,GAAuB9kB,EAAgCm0B,GAAnD,GAAJv4B,GACQoK,EADRG,KAAA7J,KACc0D,IADd1D,WAAuBV,GAAvBoE,WAAuBA,EAAgCpE,EAAvDu4B,QAAuDA,EA5G1Cv4B,EAAbg7B,QAAuB,GAAI5sB,GAAAA,QAGdpO,EAAbuwB,OAAsB,GAAIniB,GAAAA,QAKtBpO,EAAJmhC,UAAwB,EAGpBnhC,EAAJohC,mBAAiC,EAcVphC,EAAvBokB,gBACQ,GAAIlK,GAAAA,aAGWla,EAAvBuB,UAA6D,GAAI2Y,GAAAA,aAG1Cla,EAAvBq6B,QAA2D,GAAIngB,GAAAA,aAiBnDla,EAAZqhC,WAAiC,EA+BrBrhC,EAAZshC,aAAmC,EAcvBthC,EAAZuhC,YAAkC,EAYtBvhC,EAAZ8U,WAAiC,EAKzB9U,EAAKwhC,mBAELxhC,EAAKoD,cAAgBgB,EAAWhB,gBA6JxC,MAhR2BsH,GAA3Bwe,EAAA9e,GAqCIpI,OAAJ2I,eACQue,EADRvnB,UAAA,gBAAI,WAEI,MAAOjB,MAAK2gC,eAGhB,SAAa39B,GACjB,GAAc+9B,GAAersB,EAAAA,sBAAsB1R,EAEvC+9B,KAAiB/gC,KAAK2gC,YACtB3gC,KAAK2gC,UAAYI,EACjB/gC,KAAKghC,4DAOb1/B,OAAJ2I,eACQue,EADRvnB,UAAA,aAAI,WAEI,WAAuBqG,KAAhBtH,KAAK+gB,OACN/gB,KAAK+gB,OACL/gB,KAAK0D,WAAWhB,cAAcu+B,iBAGxC,SAAUj+B,GACNhD,KAAK+gB,OAAS/d,mCAWlB1B,OAAJ2I,eACQue,EADRvnB,UAAA,kBAAI,WAEI,MAAOjB,MAAK4gC,aAAe5gC,KAAK0gC,uBAGpC,SAAe19B,GACXhD,KAAK4gC,YAAclsB,EAAAA,sBAAsB1R,oCAQ7C1B,OAAJ2I,eACQue,EADRvnB,UAAA,iBAAI,WAEI,MAAOjB,MAAK6gC,gBAGhB,SAAc79B,GACVhD,KAAK6gC,WAAansB,EAAAA,sBAAsB1R,oCAK5C1B,OAAJ2I,eAAQue,EAARvnB,UAAA,gBAAI,WACI,MAAOjB,MAAKoU,eAGhB,SAAapR,GACLA,IAAUhD,KAAK0E,WACf1E,KAAKoU,UAAYpR,oCAczBwlB,EAAJvnB,UAAAu4B,mBAAI,WACIx5B,KAAKkhC,+BAGT1Y,EAAJvnB,UAAAigC,4BAAI,WACJ,GAAcC,GAAQnhC,KAAKohC,gBAAgB7d,IAAI,SAACzN,GAAS,MAAAA,GAAKxM,YAAY5G,eAElE,IAAqB,IAAjBy+B,EAAM/vB,OAAc,CAChC,GAAkBiwB,GAAcF,EAAM,EAErBE,GAAYC,wBAA2BD,EAAYE,qBAChDF,EAAYG,cACZH,EAAY3K,UAAUC,IAAI,gBAC1B32B,KAAK0C,cAAcg0B,UAAUC,IAAI,iBAGjC0K,EAAYI,kBACZJ,EAAY3K,UAAUC,IAAI,iBAC1B32B,KAAK0C,cAAcg0B,UAAUC,IAAI,uBAGtC,IAAIwK,EAAM/vB,OAAS,EAAG,CACrC,GAAkBswB,GAAmBP,EAAM,GACzBQ,EAAoBR,EAAM,EAEhCO,GAAiBhL,UAAUC,IAAI,gBAC/BgL,EAAkBjL,UAAUC,IAAI,mBAIxCnO,EAAJvnB,UAAA6/B,iBAAI,WAEI,IAAmB,GAA3Bc,GAAA,EAA2BC,EAA3BvB,GAA2BsB,EAA3BC,EAAAzwB,OAA2BwwB,IAAqB,CAAnC,GAAME,GAAnBD,EAAAD,EACY,IACI5hC,KAAK0D,WAAWhB,cAAcq/B,aAAaD,IAC3C9hC,KAAK0D,WAAWhB,cAAcs/B,QAAQC,gBAAkBH,EAIpD,WAFC9hC,MAAK0D,WAAwB,cAAiBgzB,UAAUC,IAAImL,GAKxE9hC,KAAK0D,WAAwB,cAAiBgzB,UAAUC,IAAI,oBAGjEnO,EAAJvnB,UAAAmC,YAAI,WACIpD,KAAKa,UAAUwE,MAAO+1B,IAAKp7B,QAG/BwoB,EAAJvnB,UAAAkf,OAAI,WACSngB,KAAK2gC,YACN3gC,KAAK2gC,WAAY,EACjB3gC,KAAKghC,4BAIbxY,EAAJvnB,UAAAmf,SAAI,WACQpgB,KAAK2gC,YACL3gC,KAAK2gC,WAAY,EACjB3gC,KAAKghC,4BAIbxY,EAAJvnB,UAAAuf,qBAAI,WACSxgB,KAAK2gC,YACN3gC,KAAK2gC,WAAY,EACjB3gC,KAAKghC,yBAAwB,KAIrCxY,EAAJvnB,UAAAihC,eAAI,SAAezf,GAIX,WAJR,KAAAA,IAAmBA,GAAnB,GACQziB,KAAK2gC,WAAa3gC,KAAKkgB,SACvBlgB,KAAKghC,wBAAwBve,GAEtBziB,KAAKkgB,UAIhBsI,EAAJvnB,UAAA2Y,MAAI,WACS5Z,KAAKygC,WACNzgC,KAAK0D,WAAWhB,cAAckX,QAC9B5Z,KAAKs6B,QAAQx2B,MAAOs3B,IAAKp7B,QAE7BA,KAAKygC,UAAW,GASpBjY,EAAJvnB,UAAA86B,OAAI,WACQ/7B,KAAKmiC,WACLniC,KAAK25B,QAAQt0B,MAAO+1B,IAAKp7B,QAIjCwoB,EAAJvnB,UAAAmhC,YAAI,SAAY3+B,GACJzD,KAAK0E,SACLjB,EAAMob,iBAENpb,EAAMyW,mBAIdsO,EAAJvnB,UAAA+C,cAAI,SAAcP,GACV,IAAIzD,KAAK0E,SAGT,OAAQjB,EAAMU,SACV,IAAKk+B,GAAAA,OACL,IAAKC,GAAAA,UAEDtiC,KAAK+7B,SAELt4B,EAAMob,gBACN,MACJ,KAAKJ,GAAAA,MAEGze,KAAKuiC,YACLviC,KAAKkiC,gBAAe,GAIxBz+B,EAAMob,mBAMlB2J,EAAJvnB,UAAAuhC,KAAI,WAAA,GAAJljC,GAAAU,IAKQA,MAAK63B,QAAQa,SACR1pB,eACArO,KAAKwN,EAAAA,KAAK,IACVrN,UAAU,WACPxB,EAAKu4B,QAAQ/3B,IAAI,WACbR,EAAKmhC,UAAW,EAChBnhC,EAAKuwB,OAAO/rB,MAAOs3B,IAAK97B,SAKhCkpB,EAAZvnB,UAAA+/B,wBAAI,SAAgCve,OAApC,KAAAA,IAAoCA,GAApC,GACQziB,KAAK0jB,gBAAgBre,MACjBwV,OAAQ7a,KACRyiB,YAAZA,EACYvC,SAAUlgB,KAAK2gC,4BApS3Bl6B,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,iDACVC,SAAU,QACVuC,SAAJ,+KACIqB,QAAS,suBACTC,QAAS,QAAS,YAClB5D,MACImC,MAAO,SACP2B,kBAAmB,uBACnB63B,0BAA2B,WAC3BC,6BAA8B,SAC9BC,oCAAqC,6BACrCC,0BAA2B,WAC3BxnB,sBAAuB,WACvBzQ,kBAAmB,mBACnB6I,UAAW,sBACXzM,YAAa,wBACbugB,UAAW,UACXC,SAAU,UAEdjd,gBAAiBC,EAAAA,wBAAwBC,OACzCL,cAAeC,EAAAA,kBAAkBC,6CA1FrC5D,KAAIS,EAAAA,aAIJT,KAAIU,EAAAA,4BAuGJi6B,kBAAA36B,KAAKm2B,EAAAA,gBAALj2B,MAAqBk8B,MAGrBC,SAAAr8B,KAAKiiB,EAAAA,aAAL/hB,MAAkBywB,MAGlB2L,eAAAt8B,KAAKiiB,EAAAA,aAAL/hB,MAAkBwwB,MAGlB6L,aAAAv8B,KAAKiiB,EAAAA,aAAL/hB,MAAkBsU,EAAAA,WAAW,WAAM,MAAAoc,SAGnC3T,kBAAAjd,KAAKmB,EAAAA,SAIL/G,YAAA4F,KAAKmB,EAAAA,SAGL+xB,UAAAlzB,KAAKmB,EAAAA,SAGLsY,WAAAzZ,KAAKqB,EAAAA,QAiBL9E,QAAAyD,KAAKqB,EAAAA,QAmBLy6B,aAAA97B,KAAKqB,EAAAA,QAcLq6B,YAAA17B,KAAKqB,EAAAA,SAyLL0gB,GAhR2BgY,IA8R3BnJ,GAAA,WAQI,QAAJA,GAA0B4L,GAAAjjC,KAA1BijC,UAA0BA,EAe1B,MAZI5L,GAAJp2B,UAAAmhC,YAAI,SAAY3+B,GACJzD,KAAKijC,UAAUd,WACfniC,KAAKijC,UAAUlH,SAQnBt4B,EAAMyW,kCArBdzT,KAACC,EAAAA,UAADC,OACIC,SAAU,gBACVE,MACImC,MAAO,qCACPuK,UAAW,+DAInB/M,KAAqC+hB,MAerC6O,KCjXA6L,GAAA,WACI,QAAJA,GACepZ,EACAC,EACAC,EACAlJ,GAHA9gB,KAAf8pB,yBAAeA,EACA9pB,KAAf+pB,WAAeA,EACA/pB,KAAfgqB,gBAAeA,EACAhqB,KAAf8gB,UAAeA,EAGf,MAAAoiB,MAGaC,GAAsEjZ,EAAgBgZ,IAI/F3qB,GAAe,gBAIf,QAAJ6qB,GAAuBvoB,EAA0B7X,GAA1BhD,KAAvB6a,OAAuBA,EAA0B7a,KAAjDgD,MAAiDA,EACjD,MAAAogC,MAGAlM,GAAA,SAAAxtB,GAmQI,QAAJwtB,GACkBxzB,EACF8d,EACRsI,EACoBsT,EACRrT,EACAC,EACelJ,GAP/B,GAAJxhB,GASQoK,EATRG,KAAA7J,KASc8pB,EAA0BC,EAAYC,EAAiBlJ,IATrE9gB,WACkBV,GAAlBoE,WAAkBA,EACFpE,EAAhBkiB,kBAAgBA,EAEYliB,EAA5B89B,IAA4BA,EAGO99B,EAAnCwhB,UAAmCA,EAnPtBxhB,EAAbirB,YAAmC,cAyKZjrB,EAAvBkkB,YAAwD,GAAIhK,GAAAA,aAExDla,EAAJkrB,IAAkB,eAAejS,KAM7BjZ,EAAJ+jC,aAAkC,KAM9B/jC,EAAJgkC,WAAiB,GAAI9pB,GAAAA,aAMKla,EAA1BikC,YAAmE,aAG5CjkC,EAAvBG,OAA+D,GAAI+Z,GAAAA,aAK/Dla,EAAJkkC,UAAgB,EAIJlkC,EAAZmrB,WAAiC,EAIrBnrB,EAAZ8U,WAAiC,EAErB9U,EAAZshC,aAAmC,EAKvBthC,EAAZu5B,WAAiC,EAOrBv5B,EAAZmkC,sBAAmD,KAGvCnkC,EAAZuB,UAAwB,GAAI6M,GAAAA,QA0GxBpO,EAAJswB,UAAgB,aAGZtwB,EAAJmkB,SAAqC,aAuKzBnkB,EAAZmiB,aAA2B,SAACwX,EAASC,GAAY,MAAAD,KAAOC,GA3P5C55B,EAAKwhB,YACLxhB,EAAKwhB,UAAU+J,cAAgBvrB,KAid3C,MA5sB+B0K,GAA/BktB,EAAAxtB,GAMIpI,OAAJ2I,eAAQitB,EAARj2B,UAAA,2BAAI,WACI,MAAOuN,GAAAA,MAAfgqB,UAAA,GAAwBx4B,KAAKsoB,KAAK/E,IAAI,SAAC6X,GAAQ,MAAAA,GAAI1X,oDAI/CpiB,OAAJ2I,eAAQitB,EAARj2B,UAAA,uBAAI,WACI,MAAOuN,GAAAA,MAAfgqB,UAAA,GAAwBx4B,KAAKsoB,KAAK/E,IAAI,SAAC6X,GAAQ,MAAAA,GAAId,4CAI/Ch5B,OAAJ2I,eAAQitB,EAARj2B,UAAA,sBAAI,WACI,MAAOuN,GAAAA,MAAfgqB,UAAA,GAAwBx4B,KAAKsoB,KAAK/E,IAAI,SAAC6X,GAAQ,MAAAA,GAAIvL,2CAI/CvuB,OAAJ2I,eAAQitB,EAARj2B,UAAA,wBAAI,WACI,MAAOuN,GAAAA,MAAfgqB,UAAA,GAAwBx4B,KAAKsoB,KAAK/E,IAAI,SAAC6X,GAAQ,MAAAA,GAAIv6B,8CAI/CS,OAAJ2I,eAAQitB,EAARj2B,UAAA,gBAAI,WACI,MAAOjB,MAAK0e,SAAW1e,KAAKmhB,eAAejB,SAAWlgB,KAAKmhB,eAAejB,SAAS,oCAIvF5e,OAAJ2I,eACQitB,EADRj2B,UAAA,gBAAI,WAEI,MAAOjB,MAAK64B,eAGhB,SAAa71B,GACThD,KAAK64B,UAAYnkB,EAAAA,sBAAsB1R,oCAQ3C1B,OAAJ2I,eACQitB,EADRj2B,UAAA,mBAAI,WAEI,MAAOjB,MAAKyhB,kBAGhB,SAAgBhH,GACZza,KAAKyhB,aAAehH,EAEhBza,KAAKmhB,gBAELnhB,KAAKygB,uDAQbnf,OAAJ2I,eACQitB,EADRj2B,UAAA,aAAI,WAEI,MAAOjB,MAAK+gB,YAGhB,SAAU/d,GACNhD,KAAKua,WAAWvX,GAChBhD,KAAK+gB,OAAS/d,mCAOlB1B,OAAJ2I,eAAQitB,EAARj2B,UAAA,UAAI,WACI,MAAOjB,MAAK0jC,SAAW1jC,KAAK0jC,SAAS91B,GAAK5N,KAAKwqB,qCAOnDlpB,OAAJ2I,eACQitB,EADRj2B,UAAA,gBAAI,WAEI,MAAOjB,MAAKyqB,eAGhB,SAAaznB,GACThD,KAAKyqB,UAAY/V,EAAAA,sBAAsB1R,GACvChD,KAAK8iB,aAAahf,wCAOtBxC,OAAJ2I,eACQitB,EADRj2B,UAAA,mBAAI,WAEI,MAAOjB,MAAK0jC,SAAW1jC,KAAK0jC,SAASza,YAAcjpB,KAAKm5B,kBAG5D,SAAgBn2B,GACZhD,KAAKm5B,aAAen2B,EACpBhD,KAAK8iB,aAAahf,wCAItBxC,OAAJ2I,eAAQitB,EAARj2B,UAAA,eAAI,WACI,MAAQjB,MAAK0jC,UAAY1jC,KAAK0jC,SAASpZ,SAAYtqB,KAAK2jC,iDAO5DriC,OAAJ2I,eAAQitB,EAARj2B,UAAA,aAAI,WACI,QAASjB,KAAK0jC,UAAY1jC,KAAK0jC,SAAS3f,QAA+B,IAArB/jB,KAAKsoB,KAAKlX,wCAOhE9P,OAAJ2I,eAAQitB,EAARj2B,UAAA,wBAAI,WACI,OAAQjB,KAAK+jB,OAAS/jB,KAAKsqB,yCAO/BhpB,OAAJ2I,eACQitB,EADRj2B,UAAA,gBAAI,WAEI,MAAOjB,MAAK8gB,YAAc9gB,KAAK8gB,UAAUpc,SAAW1E,KAAKoU,eAG7D,SAAapR,GACThD,KAAKoU,UAAYM,EAAAA,sBAAsB1R,GACvChD,KAAK4jC,yDAOTtiC,OAAJ2I,eACQitB,EADRj2B,UAAA,kBAAI,WAEI,MAAOjB,MAAK4gC,iBAGhB,SAAe59B,GAAf,GAAJ1D,GAAAU,IACQA,MAAK4gC,YAAclsB,EAAAA,sBAAsB1R,GAErChD,KAAKsoB,MACLtoB,KAAKsoB,KAAK/kB,QAAQ,SAAC63B,GAAQ,MAAAA,GAAIsF,kBAAoBphC,EAAKshC,+CAIhEt/B,OAAJ2I,eACQitB,EADRj2B,UAAA,gBAAI,SACa+B,GACThD,KAAKqjC,aAAergC,EACpBhD,KAAKwjC,UAAYxgC,mCA2FrBk0B,EAAJj2B,UAAAu4B,mBAAI,WAAA,GAAJl6B,GAAAU,IACQA,MAAK+e,WAAa,GAAI8kB,GAAAA,gBAAuB7jC,KAAKsoB,MAC7C+T,0BACAtC,0BAA0B/5B,KAAKo9B,IAAMp9B,KAAKo9B,IAAIp6B,MAAQ,OAEvDhD,KAAKo9B,KACLp9B,KAAKo9B,IAAI39B,OACJkB,KAAKC,EAAAA,UAAUZ,KAAKa,YACpBC,UAAU,SAACs8B,GAAQ,MAAA99B,GAAKyf,WAAWgb,0BAA0BqD,KAKtEp9B,KAAK+e,WAAWiD,OACXrhB,KAAKC,EAAAA,UAAUZ,KAAKa,YACpBC,UAAU,WACPxB,EAAKkkC,WAAa,EAElBxwB,WAAW,WACP1T,EAAKkkC,UAAYlkC,EAAK+jC,cAAgB,EACtC/jC,EAAKkiB,kBAAkBtf,mBAKnClC,KAAKsoB,KAAKnV,QACLxS,KAAKi5B,EAAAA,UAAU,MAAOh5B,EAAAA,UAAUZ,KAAKa,YACrCC,UAAU,WACHxB,EAAKoF,UAGLgc,QAAQC,UAAUC,KAAK,WAAQthB,EAAKskC,0BAGxCtkC,EAAKwkC,YAGLxkC,EAAKmhB,sBAGLnhB,EAAKykC,iBAGLzkC,EAAK0kC,8BAILtjB,QAAQC,UAAUC,KAAK,WAAQthB,EAAKgkC,WAAWj+B,KAAK/F,EAAKgpB,KAAKtF,aAE9D1jB,EAAKwjB,aAAahf,UAI9BozB,EAAJj2B,UAAAiC,SAAI,WACIlD,KAAKmhB,eAAiB,GAAImY,GAAAA,eAAsBt5B,KAAK0e,aAAUpX,IAAW,GAC1EtH,KAAK8iB,aAAahf,QAGtBozB,EAAJj2B,UAAAsqB,UAAI,WACQvrB,KAAK8gB,WAIL9gB,KAAKwrB,oBAIb0L,EAAJj2B,UAAAmC,YAAI,WACIpD,KAAKa,UAAUiD,OACf9D,KAAKa,UAAUkD,WACf/D,KAAK8iB,aAAa/e,WAElB/D,KAAKikC,qBAUT/M,EAAJj2B,UAAAijC,cAAI,SAAcC,GACVnkC,KAAK0jC,SAAWS,GAIpBjN,EAAJj2B,UAAAsZ,WAAI,SAAWvX,GACHhD,KAAKsoB,MACLtoB,KAAK6gB,oBAAoB7d,GAAO,IAKxCk0B,EAAJj2B,UAAAuZ,iBAAI,SAAiBC,GACbza,KAAKyjB,SAAWhJ,GAIpByc,EAAJj2B,UAAAyZ,kBAAI,SAAkBD,GACdza,KAAK4vB,UAAYnV,GAIrByc,EAAJj2B,UAAA0Z,iBAAI,SAAiBC,GACb5a,KAAK0E,SAAWkW,EAChB5a,KAAK8iB,aAAahf,QAOtBozB,EAAJj2B,UAAAkrB,iBAAI,SAAiB1oB,GACRzD,KAAKokC,kBAAkB3gC,IACxBzD,KAAK4Z,SAQbsd,EAAJj2B,UAAA2Y,MAAI,WACQ5Z,KAAK0E,UAIL1E,KAAK0jC,UAAY1jC,KAAK0jC,SAASpZ,UAExBtqB,KAAKsoB,KAAKlX,OAAS,GAC1BpR,KAAK+e,WAAWW,qBAChB1f,KAAK8iB,aAAahf,SAElB9D,KAAKqkC,aACLrkC,KAAK8iB,aAAahf,UAK1BozB,EAAJj2B,UAAAojC,WAAI,WACQrkC,KAAK0jC,UACL1jC,KAAK0jC,SAAS9pB,SAOtBsd,EAAJj2B,UAAAqjC,QAAI,SAAQ7gC,GACZ,GAAc8gC,GAAS9gC,EAAY,MAIvBA,GAAMU,UAAYm+B,EAAAA,WAAatiC,KAAKwkC,aAAaD,IACjDvkC,KAAK+e,WAAWY,oBAChBlc,EAAMob,kBACC0lB,GAAUA,EAAO7N,UAAU+N,SAAS,YAEvChhC,EAAMU,UAAYqb,EAAAA,MAClBxf,KAAK+e,WAAWW,qBAChBjc,EAAMob,kBAECpb,EAAMU,UAAYsb,EAAAA,KACzBzf,KAAK+e,WAAWY,oBAChBlc,EAAMob,kBAEN7e,KAAK+e,WAAWC,UAAUvb,GAG9BzD,KAAK8iB,aAAahf,SAI1BozB,EAAJj2B,UAAA4f,oBAAI,SAAoB7d,EAAYyf,GAAhC,GAAJnjB,GAAAU,IAIQ,QAJR,KAAAyiB,IAAoCA,GAApC,GACQziB,KAAK0kC,iBACL1kC,KAAKsoB,KAAK/kB,QAAQ,SAAC63B,GAAQ,MAAAA,GAAIhb,aAE3BY,MAAMC,QAAQje,GACdA,EAAMO,QAAQ,SAACgQ,GAAiB,MAAAjU,GAAK8hB,YAAY7N,EAAckP,KAC/DziB,KAAKqhB,iBACF,CACf,GAAkBsjB,GAAmB3kC,KAAKohB,YAAYpe,EAAOyf,EAI7CkiB,IAAoBliB,GACpBziB,KAAK+e,WAAWwC,cAAcojB,KAM1CzN,EAAJj2B,UAAAuhC,KAAI,WAAA,GAAJljC,GAAAU,IACaA,MAAK2jC,iBACN3jC,KAAK+e,WAAWwC,eAAe,GAG9BvhB,KAAK0E,WACF1E,KAAK0jC,SAKL1wB,WAAW,WACF1T,EAAKgrB,SACNhrB,EAAKslC,kBAKb5kC,KAAK4kC,kBAMjB1N,EAAJj2B,UAAA2jC,cAAI,WACI5kC,KAAK4vB,YACL5vB,KAAKwhB,kBAAkBtf,eACvBlC,KAAK8iB,aAAahf,QAMZozB,EAAdj2B,UAAA8iC,eAAI,WAEI/jC,KAAKwjC,UAAYxjC,KAAKqjC,eAAsC,IAArBrjC,KAAKsoB,KAAKlX,QAAgB,EAAI,IAO/D8lB,EAAdj2B,UAAA+iC,4BAAI,WACI,GAAkC,MAA9BhkC,KAAKyjC,uBAAiCzjC,KAAKsoB,KAAKlX,OAAQ,CACpE,GAAkByzB,GAAcjgB,KAAKC,IAAI7kB,KAAKyjC,sBAAuBzjC,KAAKsoB,KAAKlX,OAAS,EAC5EpR,MAAK+e,WAAWwC,cAAcsjB,OACF,KAArB7kC,KAAKsoB,KAAKlX,QACjBpR,KAAKqkC,YAGTrkC,MAAKyjC,sBAAwB,MAWzBvM,EAAZj2B,UAAA6jC,aAAI,SAAqBtyB,GACjB,MAAOA,IAAS,GAAKA,EAAQxS,KAAKsoB,KAAKlX,QAGnC8lB,EAAZj2B,UAAAujC,aAAI,SAAqB/hC,GACjB,GAAIA,GAA8C,UAAnCA,EAAQsiC,SAAS9C,cAA2B,CAGvD,OAFW,EAEGj/B,MAGlB,OAAO,GAOHk0B,EAAZj2B,UAAAmgB,YAAI,SAAoBpe,EAAYyf,GAAhC,GAAJnjB,GAAAU,SAAA,KAAAyiB,IAAoCA,GAApC,EAEA,IAAckiB,GAAmB3kC,KAAKsoB,KAAKxX,KAAK,SAACsqB,GACrC,MAAoB,OAAbA,EAAIp4B,OAAiB1D,EAAKmiB,aAAa2Z,EAAIp4B,MAAOA,IAa7D,OAVI2hC,KACIliB,EACAkiB,EAAiBnkB,uBAEjBmkB,EAAiBxkB,SAGrBngB,KAAKmhB,eAAehB,OAAOwkB,IAGxBA,GAGHzN,EAAZj2B,UAAAwf,oBAAI,WAAA,GAAJnhB,GAAAU,IAGQ0gB,SAAQC,UAAUC,KAAK,YACfthB,EAAKwhB,WAAaxhB,EAAKyhB,UACvBzhB,EAAKuhB,oBAAoBvhB,EAAKwhB,UAAYxhB,EAAKwhB,UAAU9d,MAAQ1D,EAAKyhB,QAAQ,GAC9EzhB,EAAKwjB,aAAahf,WAStBozB,EAAZj2B,UAAAyjC,eAAI,SAAuBM,GACnBhlC,KAAKmhB,eAAevd,QACpB5D,KAAKsoB,KAAK/kB,QAAQ,SAAC63B,GACXA,IAAQ4J,GACR5J,EAAIhb,aAGZpgB,KAAK8iB,aAAahf,QAOdozB,EAAZj2B,UAAAogB,WAAI,WAAA,GAAJ/hB,GAAAU,IACYA,MAAK64B,YACL74B,KAAKmhB,eAAevd,QAEpB5D,KAAKsoB,KAAK/kB,QAAQ,SAAC63B,GACXA,EAAIlb,UACJ5gB,EAAK6hB,eAAehB,OAAOib,KAGnCp7B,KAAK8iB,aAAahf,SAKlBozB,EAAZj2B,UAAA4hB,iBAAI,SAAyBQ,GAC7B,GAAYC,GAAmB,IAGnBA,GADAtC,MAAMC,QAAQjhB,KAAKkgB,UACLlgB,KAAKkgB,SAASqD,IAAI,SAAC6X,GAAQ,MAAAA,GAAIp4B,QAE/BhD,KAAKkgB,SAAWlgB,KAAKkgB,SAASld,MAAQqgB,EAExDrjB,KAAK+gB,OAASuC,EACdtjB,KAAKP,OAAO4F,KAAK,GAAI+9B,IAAgBpjC,KAAMsjB,IAC3CtjB,KAAKwjB,YAAYne,KAAKie,GACtBtjB,KAAKyjB,SAASH,GACdtjB,KAAKwhB,kBAAkBtf,gBAGnBg1B,EAAZj2B,UAAA6iC,UAAI,WACI9jC,KAAKikC,oBACLjkC,KAAKilC,oBACLjlC,KAAKklC,wBACLllC,KAAKmlC,uBAGDjO,EAAZj2B,UAAAgjC,kBAAI,WACQjkC,KAAKolC,uBACLplC,KAAKolC,qBAAqBruB,cAC1B/W,KAAKolC,qBAAuB,MAG5BplC,KAAKqlC,sBACLrlC,KAAKqlC,oBAAoBtuB,cACzB/W,KAAKqlC,oBAAsB,MAG3BrlC,KAAKslC,2BACLtlC,KAAKslC,yBAAyBvuB,cAC9B/W,KAAKslC,yBAA2B,MAGhCtlC,KAAKulC,wBACLvlC,KAAKulC,sBAAsBxuB,cAC3B/W,KAAKulC,sBAAwB,OAK7BrO,EAAZj2B,UAAAikC,sBAAI,WAAA,GAAJ5lC,GAAAU,IACQA,MAAKslC,yBAA2BtlC,KAAKwlC,oBAAoB1kC,UAAU,SAAC2C,GAC5DA,EAAMoX,OAAOqF,SACb5gB,EAAK6hB,eAAehB,OAAO1c,EAAMoX,QAEjCvb,EAAK6hB,eAAef,SAAS3c,EAAMoX,QAIlCvb,EAAKof,UACNpf,EAAKgpB,KAAK/kB,QAAQ,SAAC63B,IACV97B,EAAK6hB,eAAeyB,WAAWwY,IAAQA,EAAIlb,UAC5Ckb,EAAIhb,aAKZ3c,EAAMgf,aACNnjB,EAAKujB,sBAMTqU,EAAZj2B,UAAAgkC,kBAAI,WAAA,GAAJ3lC,GAAAU,IACQA,MAAKolC,qBAAuBplC,KAAKylC,gBAAgB3kC,UAAU,SAAC2C,GACpE,GAAkBiiC,GAAmBpmC,EAAKgpB,KAAKtF,UAAUvQ,QAAQhP,EAAM23B,IAEvD97B,GAAKwlC,aAAaY,IAClBpmC,EAAKyf,WAAW4mB,iBAAiBD,GAErCpmC,EAAKwjB,aAAahf,SAGtB9D,KAAKqlC,oBAAsBrlC,KAAK4lC,eAAe9kC,UAAU,WACrDxB,EAAKkjC,OACLljC,EAAKwjB,aAAahf,UAIlBozB,EAAZj2B,UAAAkkC,oBAAI,WAAA,GAAJ7lC,GAAAU,IACQA,MAAKulC,sBAAwBvlC,KAAK6lC,iBAAiB/kC,UAAU,SAAC2C,GACtE,GAAkB23B,GAAM33B,EAAM23B,IACZsK,EAAWpmC,EAAKgpB,KAAKtF,UAAUvQ,QAAQhP,EAAM23B,IAK/C97B,GAAKwlC,aAAaY,IAAatK,EAAIqF,WACnCnhC,EAAKmkC,sBAAwBiC,MAMjCxO,EAAZj2B,UAAAmjC,kBAAI,SAA0B3gC,GAGtB,IAFR,GAAYqiC,GAAiBriC,EAAY,OAE1BqiC,GAAkBA,IAAmB9lC,KAAK0D,WAAWhB,eAAe,CACvE,GAAIojC,EAAepP,UAAU+N,SAAS,UAClC,OAAO,CAGXqB,GAAiBA,EAAeC,cAGpC,OAAO,GAIH7O,EAAZj2B,UAAA0iC,cAAI,WACI,MAAO3jC,MAAKsoB,KAAK7mB,KAAK,SAAC25B,GAAQ,MAAAA,GAAIqF,YAI/BvJ,EAAZj2B,UAAA2iC,sBAAI,WAAA,GAAJtkC,GAAAU,IACYA,MAAKsoB,MACLtoB,KAAKsoB,KAAK/kB,QAAQ,SAAC63B,GACfA,EAAI12B,SAAWpF,EAAK8U,4BA5tBpC3N,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,cACVC,SAAU,YACVuC,SAAU,4BACVtC,MACImC,MAAO,cACP2B,kBAAmB,8BACnBwQ,sBAAuB,WACvB4qB,qBAAsB,aACtBC,sBAAuB,WACvB3e,UAAW,UACXC,SAAU,SACVxgB,YAAa,kBACboU,OAAQ,OAEZtS,YAAciS,QAAS8M,GAAoB5M,YAAakc,IACxDzsB,QAAS,oMACTN,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,+CAxE7C/D,KAAIS,EAAAA,aAJJT,KAAI+E,EAAAA,oBAwBJ/E,KAAIshB,KAPJthB,KAASiB,EAAAA,eAATH,aAAAd,KAgTSkB,EAAAA,aAlTTlB,KAA8DuhB,EAAAA,OAA9DzgB,aAAAd,KAmTSkB,EAAAA,aAnTTlB,KAA+BwhB,EAAAA,mBAA/B1gB,aAAAd,KAoTSkB,EAAAA,aApTTlB,KAAmD0hB,EAAAA,UAAnD5gB,aAAAd,KAqTSkB,EAAAA,WArTTlB,KAqTqBsE,EAAAA,4BAvNrB2T,WAAAjY,KAAKqB,EAAAA,QAcLshB,cAAA3iB,KAAKqB,EAAAA,QAkBL9E,QAAAyD,KAAKqB,EAAAA,QAsBLohB,WAAAziB,KAAKqB,EAAAA,QAcLmhB,cAAAxiB,KAAKqB,EAAAA,QAmCLpD,WAAA+B,KAAKqB,EAAAA,QAcLy6B,aAAA97B,KAAKqB,EAAAA,QAaLgC,WAAArD,KAAKqB,EAAAA,QAWL0b,cAAA/c,KAAKmB,EAAAA,SAiBLohB,oBAAAviB,KAAKqB,EAAAA,QAGLy7B,cAAA98B,KAAKqB,EAAAA,MAALnB,MAAW,iBAGXlH,SAAAgH,KAAKmB,EAAAA,SAGL0gB,OAAA7hB,KAAKm2B,EAAAA,gBAALj2B,MAAqB6hB,OAsgBrB0O,GA5sB+BiM,IR7D3B5qB,GAAe,EAMnBwe,GAAA,WAmFI,QAAJA,GACgBrzB,EACiC4L,GADjCtP,KAAhB0D,WAAgBA,EACiC1D,KAAjDsP,eAAiDA,EApE7CtP,KAAJsqB,SAAuB,EAQnBtqB,KAAJi3B,kBAAgDj3B,KAAKsP,eAAe2nB,kBAIhEj3B,KAAJ42B,OAA4C,GAAIpd,GAAAA,aAGnCxZ,KAAbipB,YAAmC,GAGtBjpB,KAAb4N,GAA0B,qBAAqB2K,KA0BnCvY,KAAZkmC,YAAkC,EAYtBlmC,KAAZoU,WAAiC,EAezBpU,KAAKmkC,aAAenkC,KAAK0D,WAAwB,cAmEzD,MArHIpC,QAAJ2I,eACQ8sB,EADR91B,UAAA,eAAI,SACY+B,GACJA,IACAhD,KAAKmmC,SAAWnjC,EAChBhD,KAAKmmC,SAASjC,cAAclkC,wCAUpCsB,OAAJ2I,eACQ8sB,EADR91B,UAAA,iBAAI,WAEI,MAAOjB,MAAKkmC,gBAGhB,SAAcljC,GACVhD,KAAKkmC,WAAaxxB,EAAAA,sBAAsB1R,oCAM5C1B,OAAJ2I,eACQ8sB,EADR91B,UAAA,gBAAI,WAEI,MAAOjB,MAAKoU,WAAcpU,KAAKmmC,UAAYnmC,KAAKmmC,SAASzhC,cAG7D,SAAa1B,GACThD,KAAKoU,UAAYM,EAAAA,sBAAsB1R,oCAM3C1B,OAAJ2I,eAAQ8sB,EAAR91B,UAAA,aAAI,WACI,OAAQjB,KAAKmkC,aAAanhC,uCAc9B+zB,EAAJ91B,UAAAiS,YAAI,WACIlT,KAAKmmC,SAASrjB,aAAahf,QAI/BizB,EAAJ91B,UAAAqjC,QAAI,SAAQ7gC,GACJzD,KAAKomC,WAAW3iC,IAIpBszB,EAAJ91B,UAAAuhC,KAAI,WACQxiC,KAAK82B,WACL92B,KAAKomC,aAGTpmC,KAAKsqB,SAAU,EAEVtqB,KAAKmmC,SAAS7b,SACftqB,KAAKmmC,SAAS3D,OAGlBxiC,KAAKmmC,SAASrjB,aAAahf,QAI/BizB,EAAJ91B,UAAAmlC,WAAI,SAAW3iC,IACFzD,KAAKmkC,aAAanhC,OAAWS,GAC9BzD,KAAKmmC,SAAS7B,QAAQ7gC,GAGrBA,IAASzD,KAAKqmC,eAAe5iC,KAC9BzD,KAAK42B,OAAOvxB,MAAOihC,MAAOtmC,KAAKmkC,aAAcnhC,MAAOhD,KAAKmkC,aAAanhC,QAElES,GACAA,EAAMob,mBAKlBkY,EAAJ91B,UAAAivB,QAAI,WAEIlwB,KAAKmmC,SAASrjB,aAAahf,QAG/BizB,EAAJ91B,UAAAq5B,QAAI,WACIt6B,KAAKsqB,SAAU,EACftqB,KAAKmmC,SAASrjB,aAAahf,QAI/BizB,EAAJ91B,UAAA2Y,MAAI,WACI5Z,KAAKmkC,aAAavqB,SAIdmd,EAAZ91B,UAAAolC,eAAI,SAAuB5iC,GACnB,GAAI8iC,EAAAA,eAAe9iC,GAAU,OAAO,CAE5C,IAAc+iC,GAAaxmC,KAAKi3B,kBAElB9yB,EAAUV,EAAMU,OAEtB,OAAO6c,OAAMC,QAAQulB,GAAcA,EAAW/zB,QAAQtO,IAAY,EAAIqiC,EAAWC,IAAItiC,mBAzJ7FsC,KAACC,EAAAA,UAADC,OACIC,SAAU,uBACVC,SAAU,4BACVC,MACImC,MAAO,gCACPkS,OAAQ,KACRxQ,kBAAmB,mBACnB+hB,qBAAsB,sBACtBC,sBAAuB,qEACvB5lB,YAAa,kBACbwgB,SAAU,SACVD,UAAW,YACXoN,UAAW,qDAtCnBjuB,KAAoBS,EAAAA,aA+GpBT,SAAAa,GAAAC,aAAAd,KAASe,EAAAA,OAATb,MAAgB2wB,2BA7DhBL,oBAAAxwB,KAAKqB,EAAAA,MAALnB,MAAW;uCAIXiwB,SAAAnwB,KAAKmB,EAAAA,OAALjB,MAAY,wBAIZsiB,cAAAxiB,KAAKqB,EAAAA,QAGL8F,KAAAnH,KAAKqB,EAAAA,QAGL+uB,UAAApwB,KAAKqB,EAAAA,MAALnB,MAAW,mBAcXmwB,YAAArwB,KAAKqB,EAAAA,MAALnB,MAAW,yBAYXjC,WAAA+B,KAAKqB,EAAAA,SA2FLivB,KCrJAC,IAAoBC,mBAAoBzY,EAAAA,QArBxCiL,GAAA,WAAA,QAAAA,MAwB2B,sBAxB3BhjB,KAAC8B,EAAAA,SAAD5B,OACI+B,SAAUC,EAAAA,aAAciD,EAAAA,gBACxBnD,SACIyuB,GACA1O,GACAuO,GACAI,GACAC,GACAC,IAEJ7uB,cACI0uB,GACA1O,GACAuO,GACAI,GACAC,GACAC,IAEJxuB,YACIiS,QAASwc,GAETzC,SAAQ,SAGhBpL,KpByDIlR,GAAe,gBAOf,QAAJgf,GAAuB1c,EAAyB7X,GAAzBhD,KAAvB6a,OAAuBA,EAAyB7a,KAAhDgD,MAAgDA,EAChD,MAAAu0B,MAEAC,GAAA,WACI,QAAJA,GACe9zB,EACAomB,EACAC,EACAC,EACAlJ,GAJA9gB,KAAf0D,WAAeA,EACA1D,KAAf8pB,yBAAeA,EACA9pB,KAAf+pB,WAAeA,EACA/pB,KAAfgqB,gBAAeA,EACAhqB,KAAf8gB,UAAeA,EAEf,MAAA0W,MAEMC,GACoB/e,EAAclP,EAAc0gB,EAAgBsN,MAGtEE,GAAA,WAAA,QAAAA,MAC8B,sBAD9BjxB,KAACC,EAAAA,UAADC,OAAaC,SAAU,wBACvB8wB,KAGAC,GAAA,SAAAjuB,GAqRI,QAAJiuB,GACyBC,EACA3e,EACA4e,EACAC,EACjBhO,EACApmB,EAC6Bq0B,EACjBhO,EACAC,EACiBgO,EACFlX,EACJhX,EAC6BmuB,GAbxD,GAAJ34B,GAeQoK,EAfRG,KAAA7J,KAec0D,EAAYomB,EAA0BC,EAAYC,EAAiBlJ,IAfjF9gB,WACyBV,GAAzBs4B,eAAyBA,EACAt4B,EAAzB2Z,mBAAyBA,EACA3Z,EAAzBu4B,QAAyBA,EACAv4B,EAAzBw4B,UAAyBA,EAGYx4B,EAArCy4B,KAAqCA,EAGAz4B,EAArC04B,iBAAqCA,EACF14B,EAAnCwhB,UAAmCA,EAEyBxhB,EAA5D24B,uBAA4DA,EAhQxD34B,EAAJirB,YAAkB,YAEdjrB,EAAJ44B,YAA0B,EACtB54B,EAAJ64B,YAA0B,SAMtB74B,EAAJ84B,gBAAsB,EASlB94B,EAAJskB,UAAwB,GAGpBtkB,EAAJynB,gBAA8B,MAG1BznB,EAAJ+4B,oBAAkC,EAG9B/4B,EAAJg5B,yBAA+B,GAAI5qB,GAAAA,QAG/BpO,EAAJkB,eAAqBlB,EAAK24B,yBAOtB34B,EAAJ6lB,QAAc,EAQV7lB,EAAJwc,YAEYla,QAAS,QACTC,QAAS,SACTC,SAAU,QACVC,SAAU,QAGVH,QAAS,QACTC,QAAS,MACTC,SAAU,QACVC,SAAU,WAkCTzC,EAAbijB,uBAA2EgW,EAAAA,MAAM,WACzE,MAAIj5B,GAAK0gB,QACExR,EAAAA,MAAnBgqB,UAAA,GAA4Bl5B,EAAK0gB,QAAQuD,IAAI,SAACtD,GAAW,MAAAA,GAAOwY,qBAGjDn5B,EAAKu4B,QAAQa,SACf1pB,eACArO,KAAKwN,EAAAA,KAAK,GAAIwqB,EAAAA,UAAU,WAAM,MAAAr5B,GAAKijB,4BAIzBjjB,EAAvBupB,aAA6D,GAAIrP,GAAAA,aAGlCla,EAA/BwpB,aACQxpB,EAAKupB,aAAaloB,KAAKmN,EAAAA,OAAO,SAAC8qB,GAAM,MAAAA,KAAIrV,EAAAA,IAAI,eAGtBjkB,EAA/BypB,aACQzpB,EAAKupB,aAAaloB,KAAKmN,EAAAA,OAAO,SAAC8qB,GAAM,OAACA,IAAIrV,EAAAA,IAAI,eAG/BjkB,EAAvBokB,gBAAuE,GAAIlK,GAAAA,aAOpDla,EAAvBkkB,YAAwD,GAAIhK,GAAAA,aA0BhDla,EAAZmrB,WAAiC,EAerBnrB,EAAZu5B,WAAiC,EAkErBv5B,EAAZw5B,UAAuB,EAMXx5B,EAAZ4iB,YAAyB,EAGb5iB,EAAZ2kB,UAAwB,EAGH3kB,EAArBkrB,IAA2B,aAAajS,KAGnBjZ,EAArB2iB,QAA+B,GAAIvU,GAAAA,QAiG/BpO,EAAJy5B,UAAsC,aAGlCz5B,EAAJ05B,WAAiB,aA8vBL15B,EAAZmiB,aAA2B,SAACwX,EAASC,GAAY,MAAAD,KAAOC,GA/0B5C55B,EAAKwhB,YAGLxhB,EAAKwhB,UAAU+J,cAAgBvrB,GAGnCA,EAAKwK,SAAWhH,SAASgH,IAAa,EAGtCxK,EAAKsO,GAAKtO,EAAKsO,KAu0BvB,MAzlC8B5D,GAA9B2tB,EAAAjuB,GA8HIpI,OAAJ2I,eACQ0tB,EADR12B,UAAA,mBAAI,WAEI,MAAOjB,MAAKm5B,kBAGhB,SAAgBn2B,GACZhD,KAAKm5B,aAAen2B,EAEpBhD,KAAK8iB,aAAahf,wCAKtBxC,OAAJ2I,eACQ0tB,EADR12B,UAAA,gBAAI,WAEI,MAAOjB,MAAKyqB,eAGhB,SAAaznB,GACThD,KAAKyqB,UAAY/V,EAAAA,sBAAsB1R,GAEvChD,KAAK8iB,aAAahf,wCAKtBxC,OAAJ2I,eACQ0tB,EADR12B,UAAA,gBAAI,WAEI,MAAOjB,MAAK64B,eAGhB,SAAa71B,GACT,GAAIhD,KAAKmhB,eACL,KAAMiY,IAGVp5B,MAAK64B,UAAYnkB,EAAAA,sBAAsB1R,oCAU3C1B,OAAJ2I,eACQ0tB,EADR12B,UAAA,mBAAI,WAEI,MAAOjB,MAAKyhB,kBAGhB,SAAgBhH,GAEZ,GAAkB,kBAAPA,GACP,KAAM4e,IAGVr5B,MAAKyhB,aAAehH,EAEhBza,KAAKmhB,gBAELnhB,KAAKygB,uDAKbnf,OAAJ2I,eACQ0tB,EADR12B,UAAA,aAAI,WAEI,MAAOjB,MAAK+gB,YAGhB,SAAUqL,GACFA,IAAapsB,KAAK+gB,SAClB/gB,KAAKua,WAAW6R,GAChBpsB,KAAK+gB,OAASqL,oCAMtB9qB,OAAJ2I,eACQ0tB,EADR12B,UAAA,UAAI,WAEI,MAAOjB,MAAKorB,SAGhB,SAAOpoB,GACHhD,KAAKorB,IAAMpoB,GAAShD,KAAKwqB,IACzBxqB,KAAK8iB,aAAahf,wCAMtBxC,OAAJ2I,eAAQ0tB,EAAR12B,UAAA,eAAI,WACI,MAAOjB,MAAK84B,UAAY94B,KAAKkiB,gBAOjC,SAAYlf,GACRhD,KAAK84B,SAAW91B,mCAKpB1B,OAAJ2I,eAAQ0tB,EAAR12B,UAAA,iBAAI,WACI,MAAOjB,MAAKkiB,4CA2ChByV,EAAJ12B,UAAAiC,SAAI,WAAA,GAAJ5D,GAAAU,IACQA,MAAKmhB,eAAiB,GAAImY,GAAAA,eAAyBt5B,KAAK0e,UACxD1e,KAAK8iB,aAAahf,OAKlB9D,KAAKs4B,yBACA33B,KAAKwE,EAAAA,uBAAwBvE,EAAAA,UAAUZ,KAAKiiB,UAC5CnhB,UAAU,WACHxB,EAAKi6B,WACLj6B,EAAK2kB,UAAY,EACjB3kB,EAAKupB,aAAaxjB,MAAK,KAEvB/F,EAAKupB,aAAaxjB,MAAK,GACvB/F,EAAK+4B,oBAAqB,EAC1B/4B,EAAKkmB,WAAWM,QAAU,EAC1BxmB,EAAK2Z,mBAAmB/W,mBAKxCy1B,EAAJ12B,UAAAu4B,mBAAI,WAAA,GAAJl6B,GAAAU,IACQA,MAAK8hB,iBAEL9hB,KAAKmhB,eAAesY,QACf94B,KAAKC,EAAAA,UAAUZ,KAAKiiB,UACpBnhB,UAAU,SAAC2C,GACRA,EAAMi2B,MAAMn2B,QAAQ,SAAC0c,GAAW,MAAAA,GAAOE,WACvC1c,EAAMk2B,QAAQp2B,QAAQ,SAAC0c,GAAW,MAAAA,GAAOG,eAGjDpgB,KAAKggB,QAAQ7M,QACRxS,KAAKi5B,EAAAA,UAAU,MAAOh5B,EAAAA,UAAUZ,KAAKiiB,UACrCnhB,UAAU,WACPxB,EAAK+iB,eACL/iB,EAAKmhB,yBAIjBkX,EAAJ12B,UAAA44B,gBAAI,WAAA,GAAJv6B,GAAAU,IACQA,MAAKsoB,KAAKnV,QACLrS,UAAU,WACPkS,WAAW,WAAM,MAAA1T,GAAKw6B,wBAAwB,MAI1DnC,EAAJ12B,UAAAsqB,UAAI,WACQvrB,KAAK8gB,WAAa9gB,KAAKwrB,oBAG/BmM,EAAJ12B,UAAAiS,YAAI,SAAYC,GAGJA,EAAQzO,UACR1E,KAAK8iB,aAAahf,QAI1B6zB,EAAJ12B,UAAAmC,YAAI,WACIpD,KAAKiiB,QAAQne,OACb9D,KAAKiiB,QAAQle,WACb/D,KAAK8iB,aAAa/e,YAUtB4zB,EAAJ12B,UAAAoK,OAAI,WACQrL,KAAKu5B,UACLv5B,KAAK2O,QAEL3O,KAAK2P,QAKbgoB,EAAJ12B,UAAA0O,KAAI,WAAA,GAAJrQ,GAAAU,MACYA,KAAK0E,UAAa1E,KAAKggB,SAAYhgB,KAAKggB,QAAQ5O,SAAUpR,KAAKkiB,aAEnEliB,KAAKqmB,YAAcrmB,KAAK4J,QAAQlH,cAAc+iB,wBAG9CzlB,KAAKo4B,gBAAkBt1B,SAASqV,iBAAiBnY,KAAK4J,QAAQlH,eAAe,cAE7E1C,KAAKkiB,YAAa,EAClBliB,KAAK+e,WAAWgb,0BAA0B,MAC1C/5B,KAAKukB,2BACLvkB,KAAK8jB,yBACL9jB,KAAKiZ,mBAAmB/W,eAGxBlC,KAAK63B,QAAQa,SAAS1pB,eACjBrO,KAAKwN,EAAAA,KAAK,IACVrN,UAAU,WACHxB,EAAK84B,iBAAmB94B,EAAKkmB,WAAWvlB,YAAcX,EAAKkmB,WAAWvlB,WAAWqC,iBACjFhD,EAAKkmB,WAAWvlB,WAAWqC,eAAeM,MAAMo3B,SAAc16B,EAAK84B,gBAAvF,UAMIT,EAAJ12B,UAAA0N,MAAI,WACQ3O,KAAKkiB,aACLliB,KAAKkiB,YAAa,EAClBliB,KAAK+e,WAAWgb,0BAA0B/5B,KAAK6lB,QAAU,MAAQ,OACjE7lB,KAAKiZ,mBAAmB/W,eACxBlC,KAAKg5B,eAUbrB,EAAJ12B,UAAAsZ,WAAI,SAAWvX,GACHhD,KAAKggB,SACLhgB,KAAK6gB,oBAAoB7d,IAWjC20B,EAAJ12B,UAAAuZ,iBAAI,SAAiBC,GACbza,KAAK+4B,UAAYte,GAUrBkd,EAAJ12B,UAAAyZ,kBAAI,SAAkBD,GACdza,KAAKg5B,WAAave,GAStBkd,EAAJ12B,UAAA0Z,iBAAI,SAAiBC,GACb5a,KAAK0E,SAAWkW,EAChB5a,KAAKiZ,mBAAmB/W,eACxBlC,KAAK8iB,aAAahf,QAGtBxC,OAAJ2I,eAAQ0tB,EAAR12B,UAAA,gBAAI,WACI,MAAOjB,MAAK0e,SAAW1e,KAAKmhB,eAAejB,SAAWlgB,KAAKmhB,eAAejB,SAAS,oCAGvF5e,OAAJ2I,eAAQ0tB,EAAR12B,UAAA,oBAAI,WACI,GAAIjB,KAAK+jB,MAAS,MAAO,EAEzB,IAAI/jB,KAAK64B,UAAW,CAC5B,GAAkBoB,GAAkBj6B,KAAKmhB,eAAejB,SAASqD,IAAI,SAACtD,GAAW,MAAAA,GAAOia,WAI5E,OAFIl6B,MAAK6lB,SAAWoU,EAAgB7nB,UAE7B6nB,EAAgBpW,KAAK,MAGhC,MAAO7jB,MAAKmhB,eAAejB,SAAS,GAAGga,2CAG3C54B,OAAJ2I,eAAQ0tB,EAAR12B,UAAA,qBAAI,WACI,GAAIjB,KAAK+jB,MAAS,QAElB,IAAI/jB,KAAK64B,UAAW,CAC5B,GAAkBoB,GAAkBj6B,KAAKmhB,eAAejB,QAI5C,OAFIlgB,MAAK6lB,SAAWoU,EAAgB7nB,UAE7B6nB,EAGX,OAAQj6B,KAAKmhB,eAAejB,SAAS,qCAGzC5e,OAAJ2I,eAAQ0tB,EAAR12B,UAAA,aAAI,WACI,OAAQjB,KAAKmhB,gBAAkBnhB,KAAKmhB,eAAegZ,2CAGvDxC,EAAJ12B,UAAA4kB,MAAI,WACI,QAAO7lB,KAAK+3B,MAA2B,QAApB/3B,KAAK+3B,KAAK/0B,OAGjC20B,EAAJ12B,UAAA+C,cAAI,SAAcP,GACLzD,KAAK0E,WACF1E,KAAKu5B,UACLv5B,KAAKkf,kBAAkBzb,GAEvBzD,KAAKo6B,oBAAoB32B,KASrCk0B,EAAJ12B,UAAAo5B,aAAI,WACIr6B,KAAKq4B,mBAAqBr4B,KAAKu5B,UAC/Bv5B,KAAKiZ,mBAAmB/W,gBAG5By1B,EAAJ12B,UAAAq5B,QAAI,WACSt6B,KAAK0E,WACN1E,KAAK84B,UAAW,EAEhB94B,KAAK8iB,aAAahf,SAQ1B6zB,EAAJ12B,UAAA4uB,OAAI,WACI7vB,KAAK84B,UAAW,EAEX94B,KAAK0E,UAAa1E,KAAKu5B,YACxBv5B,KAAKg5B,aACLh5B,KAAKiZ,mBAAmB/W,eACxBlC,KAAK8iB,aAAahf,SAO1B6zB,EAAJ12B,UAAAs5B,WAAI,WAAA,GAAJj7B,GAAAU,IACQA,MAAKwlB,WAAWgV,eACX75B,KAAKwN,EAAAA,KAAK,IACVrN,UAAU,WACPxB,EAAK2Z,mBAAmBsd,gBACxBj3B,EAAKgmB,0BACLhmB,EAAK6iB,MAAMzf,cAAcuhB,UAAY3kB,EAAK2kB,aAKtD0T,EAAJ12B,UAAAw5B,cAAI,WACI,MAAOz6B,MAAKg4B,iBAAmB,MAAMh4B,KAAKg4B,iBAAiB0C,MAAU,IAIzE/C,EAAJ12B,UAAA2Y,MAAI,WACI5Z,KAAK0D,WAAWhB,cAAckX,SAUlC+d,EAAJ12B,UAAAikB,uBAAI,SAAuByV,EAAuB1V,EAAsBF,GACxE,GAAcP,GAAaxkB,KAAKmkB,gBAClByW,EAA4BpW,EAAamW,EAGzCE,EAAmBrW,EAAa,EAMhCsW,EAAwBF,EAA4B3V,EAAe4V,CAEzE,OAAOjW,MAAKC,IAAID,KAAKkH,IAAI,EAAGgP,GAAwB/V,IAOxD4S,EAAJ12B,UAAAkrB,iBAAI,WACInsB,KAAK4Z,QACL5Z,KAAK2P,QAITgoB,EAAJ12B,UAAA85B,oBAAI,SAAoB9a,EAAkB9e,GAClCA,EAAO+Y,kBAEP+F,EAAOG,YAGXuX,EAAJ12B,UAAA64B,qBAAI,WACI,IAAI95B,KAAK+jB,OAAU/jB,KAAK0e,SAAxB,CAER,GAAYsc,GAAuB,EACrBC,EAAkBj7B,KAAKk7B,8BACzBC,EAAiC,CAYrC,IATAn7B,KAAKsoB,KAAK/kB,QAAQ,SAAC63B,GACXA,EAAI14B,cAAc24B,UAAYD,EAAI14B,cAAc44B,eAChDH,GAA0BC,EAAI14B,cAAc+iB,wBAAwBS,MAJjD,EAKnB8U,OAIRh7B,KAAKk4B,YAAel4B,KAAa,SAAyBoR,OAAS4pB,EAE/Dh7B,KAAKk4B,YAAa,CAC9B,GAAkBqD,GAAev7B,KAAK4J,QAAQlH,cAAc84B,cAAc,iCACxDC,EAAcz7B,KAAK4J,QAAQlH,cAAc84B,cAAc,0BAEvDE,EAAqBH,EAAaF,UAAYE,EAAaD,aAI3DK,EAA2BF,EAAYhW,wBAAwBS,MAC/D0V,EAAuBD,EAHK,EAOlC,IAFID,GAAuBT,EAAkBW,IAAiB57B,KAAKk4B,YAAc,GAG7EiD,IAA2BQ,GAC1BR,EAT6B,GASiBQ,EAI/C,WAFA37B,MAAKiZ,mBAAmB/W,gBAGhBw5B,GAAuBT,EAdD,GAcwCW,GACtE57B,KAAKk4B,cAIbl4B,KAAKiZ,mBAAmB/W,iBAGpBy1B,EAAZ12B,UAAAi6B,4BAAI,WACJ,GAAcW,GAAe77B,KAAK4J,QAAQlH,cAAco5B,WAAU,EAC1DD,GAAaL,cAAc,iCAAiCO,SAE5D/7B,KAAK83B,UAAU1iB,SAASymB,EAAc,WAAY,YAClD77B,KAAK83B,UAAU1iB,SAASymB,EAAc,aAAc,UACpD77B,KAAK83B,UAAU1iB,SAASymB,EAAc,MAAO,SAC7C77B,KAAK83B,UAAU1iB,SAASymB,EAAc,OAAQ,KAE9C77B,KAAK83B,UAAUkE,YAAYh8B,KAAK4J,QAAQlH,cAAem5B,EAE/D,IAAYZ,GAA0B,CAQ9B,OANAY,GAAaI,iBAAiB,UAAU14B,QAAQ,SAACuS,GAC7CmlB,GAAmBnlB,EAAK2P,wBAA6B,MAF9B,IAK3BoW,EAAaE,SAENd,GAIHtD,EAAZ12B,UAAAm5B,oBAAI,SAA4B32B,GAEhC,GAAcU,GAAUV,EAAMU,QAChBya,EAAaza,IAAYgb,EAAAA,YAAchb,IAAYib,EAAAA,UACrDjb,IAAYkb,EAAAA,YAAclb,IAAYmb,EAAAA,WACxBnb,KAAYqa,EAAAA,OAASra,IAAYsa,EAAAA,QAGhCze,KAAK0e,UAAYjb,EAAMkb,SAAWC,GACjDnb,EAAMob,iBACN7e,KAAK2P,QACG3P,KAAK0e,UACb1e,KAAK+e,WAAWC,UAAUvb,IAK1Bk0B,EAAZ12B,UAAAie,kBAAI,SAA0Bzb,GAE9B,GAAcU,GAAUV,EAAMU,QAChBya,EAAaza,IAAYgb,EAAAA,YAAchb,IAAYib,EAAAA,SACnD8c,EAAUl8B,KAAK+e,UAErB,IAAI5a,IAAYqb,EAAAA,MAAQrb,IAAYsb,EAAAA,IAChChc,EAAMob,iBAEF1a,IAAYqb,EAAAA,KACZ0c,EAAQxc,qBAERwc,EAAQvc,wBAGT,IAAIf,GAAcnb,EAAMkb,OAE3Blb,EAAMob,iBACN7e,KAAK2O,YACF,IAAKxK,IAAYqa,EAAAA,OAASra,IAAYsa,EAAAA,QAAUyd,EAAQtc,WAGxD,GAAI5f,KAAK64B,WAAa10B,IAAY0b,EAAAA,GAAKpc,EAAMqc,QAAS,CACzDrc,EAAMob,gBAClB,IAAkBkB,GAAuB/f,KAAKggB,QAAQve,KAAK,SAACwe,GAAW,OAACA,EAAOC,UACnElgB,MAAKggB,QAAQzc,QAAQ,SAAC0c,GACdF,IAAyBE,EAAOvb,SAChCub,EAAOE,SAEPF,EAAOG,iBAGZ,CACf,GAAkBC,GAAyB6b,EAAQ5b,eAEvC4b,GAAQld,UAAUvb,GAEdzD,KAAK64B,WAAaja,GAAcnb,EAAM8c,UAAY2b,EAAQtc,YAC1Dsc,EAAQ5b,kBAAoBD,GAC5B6b,EAAQtc,WAAWY,2BAnBvB/c,GAAMob,iBACNqd,EAAQtc,WAAWY,wBAuBnBmX,EAAZ12B,UAAAwf,oBAAI,WAAA,GAAJnhB,GAAAU,IAGQ0gB,SAAQC,UAAUC,KAAK,WACnBthB,EAAKuhB,oBAAoBvhB,EAAKwhB,UAAYxhB,EAAKwhB,UAAU9d,MAAQ1D,EAAKyhB,WAQtE4W,EAAZ12B,UAAA4f,oBAAI,SAA4B7d,GAA5B,GAAJ1D,GAAAU,IACQ,IAAIA,KAAK0e,UAAY1b,EAAO,CACxB,IAAKge,MAAMC,QAAQje,GACf,KAAMke,IAGVlhB,MAAKmhB,eAAevd,QACpBZ,EAAMO,QAAQ,SAACgQ,GAAsB,MAAAjU,GAAK8hB,YAAY7N,KACtDvT,KAAKqhB,iBACF,CACHrhB,KAAKmhB,eAAevd,OAChC,IAAkB0d,GAAsBthB,KAAKohB,YAAYpe,EAIzCse,IACAthB,KAAK+e,WAAWwC,cAAcD,GAItCthB,KAAKiZ,mBAAmB/W,gBAOpBy1B,EAAZ12B,UAAAmgB,YAAI,SAAoBpe,GAApB,GAAJ1D,GAAAU,KACcshB,EAAsBthB,KAAKggB,QAAQlP,KAAK,SAACmP,GAC3C,IAEI,MAAuB,OAAhBA,EAAOjd,OAAiB1D,EAAKmiB,aAAaxB,EAAOjd,MAAOA,GACjE,MAAO0e,GAML,MALIC,GAAAA,aAEAC,QAAQC,KAAKH,IAGV,IAQf,OAJIJ,IACAthB,KAAKmhB,eAAehB,OAAOmB,GAGxBA,GAIHqW,EAAZ12B,UAAA6gB,eAAI,WAAA,GAAJxiB,GAAAU,IACQA,MAAK+e,WAAa,GAAIod,GAAAA,2BAAqCn8B,KAAKggB,SAC3Doc,gBACAC,0BACAtC,0BAA0B/5B,KAAK6lB,QAAU,MAAQ,OAEtD7lB,KAAK+e,WAAWiD,OACXrhB,KAAKC,EAAAA,UAAUZ,KAAKiiB,UACpBnhB,UAAU,WAGPxB,EAAKsa,QACLta,EAAKqP,UAGb3O,KAAK+e,WAAWtf,OACXkB,KAAKC,EAAAA,UAAUZ,KAAKiiB,UACpBnhB,UAAU,WACHxB,EAAK4iB,YAAc5iB,EAAK6iB,MACxB7iB,EAAK8iB,6BACG9iB,EAAK4iB,YAAe5iB,EAAKof,WAAYpf,EAAKyf,WAAWa,YAC7DtgB,EAAKyf,WAAWa,WAAWY,0BAMnCmX,EAAZ12B,UAAAohB,aAAI,WAAA,GAAJ/iB,GAAAU,KACcsiB,EAAqB9T,EAAAA,MAAMxO,KAAKggB,QAAQ7M,QAASnT,KAAKiiB,QAE5DjiB,MAAKuiB,uBACA5hB,KAAKC,EAAAA,UAAU0hB,IACfxhB,UAAU,SAAC2C,GACRnE,EAAKkjB,SAAS/e,EAAMoX,OAAQpX,EAAMgf,aAE9Bhf,EAAMgf,cAAgBnjB,EAAKof,UAAYpf,EAAK4iB,aAC5C5iB,EAAKqP,QACLrP,EAAKsa,WAMjBpL,EAAAA,MAARgqB,UAAA,GAAiBx4B,KAAKggB,QAAQuD,IAAI,SAACtD,GAAW,MAAAA,GAAO6C,gBACxCniB,KAAKC,EAAAA,UAAU0hB,IACfxhB,UAAU,WACPxB,EAAK2Z,mBAAmB/W,eACxB5C,EAAKwjB,aAAahf,SAG1B9D,KAAK0iB,gBAIDiV,EAAZ12B,UAAAuhB,SAAI,SAAiBvC,EAAkBwC,GACvC,GAAcE,GAAc3iB,KAAKmhB,eAAeyB,WAAW3C,EAE/B,OAAhBA,EAAOjd,OAAkBhD,KAAK64B,WAK1B5Y,EAAOC,SACPlgB,KAAKmhB,eAAehB,OAAOF,GAE3BjgB,KAAKmhB,eAAef,SAASH,GAG7BwC,GACAziB,KAAK+e,WAAWwC,cAActB,GAG9BjgB,KAAK0e,WACL1e,KAAKqhB,aAEDoB,GAKAziB,KAAK4Z,WAtBbqG,EAAOG,WACPpgB,KAAKmhB,eAAevd,QACpB5D,KAAK6iB,iBAAiB5C,EAAOjd,QAyB7B2f,IAAgB3iB,KAAKmhB,eAAeyB,WAAW3C,IAC/CjgB,KAAK6iB,mBAGT7iB,KAAK8iB,aAAahf,QAId6zB,EAAZ12B,UAAAogB,WAAI,WAAA,GAAJ/hB,GAAAU,IACQ,IAAIA,KAAK0e,SAAU,CAC3B,GAAkBqE,GAAU/iB,KAAKggB,QAAQgD,SAE7BhjB,MAAKmhB,eAAe8B,KAAK,SAACC,EAAGC,GACzB,MAAO7jB,GAAK8jB,eAAiB9jB,EAAK8jB,eAAeF,EAAGC,EAAGJ,GACnDA,EAAQtQ,QAAQyQ,GAAKH,EAAQtQ,QAAQ0Q,KAE7CnjB,KAAK8iB,aAAahf,SAKlB6zB,EAAZ12B,UAAA4hB,iBAAI,SAAyBQ,GAC7B,GAAYC,GAAmB,IAGnBA,GADAtjB,KAAK0e,SACU1e,KAAa,SAAgBujB,IAAI,SAACtD,GAAW,MAAAA,GAAOjd,QAErDhD,KAAKkgB,SAAYlgB,KAAa,SAAcgD,MAAQqgB,EAGtErjB,KAAK+gB,OAASuC,EACdtjB,KAAKwjB,YAAYne,KAAKie,GACtBtjB,KAAK+4B,UAAUzV,GACftjB,KAAK0jB,gBAAgBre,KAAK,GAAIkyB,IAAev3B,KAAMsjB,IACnDtjB,KAAKiZ,mBAAmB/W,gBAIpBy1B,EAAZ12B,UAAAyhB,aAAI,WACI1iB,KAAK4jB,UAAY5jB,KAAKggB,QAAQuD,IAAI,SAACtD,GAAW,MAAAA,GAAOrS,KAAIiW,KAAK,MAO1D8T,EAAZ12B,UAAA6iB,uBAAI,WACQ9jB,KAAK+e,aACD/e,KAAK+jB,MACL/jB,KAAK+e,WAAWW,qBAEhB1f,KAAK+e,WAAWwC,cAAcvhB,KAAKmhB,eAAejB,SAAS,MAM/DyX,EAAZ12B,UAAAmhB,2BAAI,WACJ,GAAc4B,GAAoBhkB,KAAK+e,WAAWuB,iBAAmB,EACvDgc,EAAaC,EAA6BvY,EAAmBhkB,KAAKggB,QAAShgB,KAAKw8B,aAEtFx8B,MAAKmiB,MAAMzf,cAAcuhB,UAAYC,EACjCF,EAAoBsY,EACpBt8B,KAAKmkB,gBACLnkB,KAAKmiB,MAAMzf,cAAcuhB,UHziCE,MG+iC3B0T,EAAZ12B,UAAAmjB,eAAI,SAAuBnE,GAEnB,MAAOjgB,MAAKggB,QAAQqE,OAAO,SAAChW,EAAgBiW,EAAmB9R,GAE3D,WAAkBlL,KAAX+G,EAAwB4R,IAAWqE,EAAU9R,MAAQlL,GAAa+G,OAC1E/G,KAICqwB,EAAZ12B,UAAAsjB,yBAAI,WACJ,GAAcC,GAAaxkB,KAAKmkB,gBAClBM,EAAQzkB,KAAK0kB,eACbC,EAAcC,KAAKC,IAAIJ,EAAQD,EH3jCN,KG4jCzBM,EAAwBL,EAAQD,EAGhCO,EAAYD,EAAwBH,EAGtCK,EACAhlB,KAAK+jB,MAAQ,EAAI/jB,KAAKokB,eAAepkB,KAAKmhB,eAAejB,SAAS,GAEtE8E,IAAwBuX,EAA6BvX,EAAsBhlB,KAAKggB,QAAShgB,KAAKw8B,aAKtG,IAAcvX,GAAeN,EAAc,CACnC3kB,MAAKikB,UAAYjkB,KAAKklB,uBAAuBF,EAAsBC,EAAcF,GACjF/kB,KAAKmlB,QAAUnlB,KAAKolB,0BAEpBplB,KAAKqlB,2BAA2BN,IAU5B4S,EAAZ12B,UAAAqkB,wBAAI,WACJ,GAKYQ,GALEP,EAAcvlB,KAAKwlB,WAAWvlB,WAAWqC,eAAemjB,wBACxDC,EAAe1lB,KAAK43B,eAAehS,kBACnCC,EAAQ7lB,KAAK6lB,QAKb3F,EAAWlgB,KAAKmhB,eAAejB,SAAS,IAAMlgB,KAAKggB,QAAQyc,KACjE3W,GAAU5F,GAAYA,EAASwc,MH1lCM1wB,EAJP,EGimCzB6Z,IAASC,IAAY,EAGlC,IAAcC,GAAe,GAAKR,EAAYjK,KAAOwK,GAAWD,EAVnC7Z,EAU0D,IACzEga,EAAgBT,EAAYU,MAAQH,EAAUJ,EAAaQ,OAC1DL,EAAQ,EAZM7Z,EAejB+Z,GAAe,EACfD,GAAWC,EHhmCsB,EGimC1BC,EAAgB,IACvBF,GAAWE,EHlmCsB,GGwmCrChmB,KAAKwlB,WAAWM,QAAUlB,KAAKuB,MAAML,GACrC9lB,KAAKwlB,WAAWvlB,WAAWQ,kBAQvBk3B,EAAZ12B,UAAAmkB,wBAAI,WAKI,MAAO,IAUHuS,EAAZ12B,UAAAokB,2BAAI,SAAmCN,GACvC,GAAcP,GAAaxkB,KAAKmkB,gBAClBuB,EAAe1lB,KAAK43B,eAAehS,kBAEnCQ,EAAoBpmB,KAAKqmB,YAAYxjB,IHpoCN,EGqoC/ByjB,EACFZ,EAAaa,OAASvmB,KAAKqmB,YAAYG,OHtoCN,EGwoC/BC,EAAiB7B,KAAK8B,IAAI1mB,KAAKmlB,SAC/BwB,EACF/B,KAAKC,IAAI7kB,KAAK0kB,eAAiBF,EHvpCJ,KGwpCzBoC,EAAoBD,EAAmBF,EAAiBzmB,KAAKqmB,YAAYE,MAE3EK,GAAoBN,EACpBtmB,KAAK6mB,cAAcD,EAAmBN,GAC/BG,EAAiBL,EACxBpmB,KAAK8mB,gBAAgBL,EAAgBL,EAAmBrB,GAExD/kB,KAAK+mB,gBAAkB/mB,KAAKgnB,0BAK5B2Q,EAAZ12B,UAAA4lB,cAAI,SAAsBD,EAA2BN,GAErD,GAAcW,GAAwBrC,KAAKuB,MAAMS,EAAoBN,EAI7DtmB,MAAKikB,WAAagD,EAClBjnB,KAAKmlB,SAAW8B,EAChBjnB,KAAK+mB,gBAAkB/mB,KAAKgnB,yBAKxBhnB,KAAKikB,WAAa,IAClBjkB,KAAKikB,UAAY,EACjBjkB,KAAKmlB,QAAU,EACfnlB,KAAK+mB,gBAAkB,mBAKvB4Q,EAAZ12B,UAAA6lB,gBAAI,SAAwBL,EAAwBL,EAA2BrB,GAE/E,GAAcmC,GAAwBtC,KAAKuB,MAAMM,EAAiBL,EAW1D,IAPApmB,KAAKikB,WAAaiD,EAClBlnB,KAAKmlB,SAAW+B,EAChBlnB,KAAK+mB,gBAAkB/mB,KAAKgnB,yBAKxBhnB,KAAKikB,WAAac,EAKlB,MAJA/kB,MAAKikB,UAAYc,EACjB/kB,KAAKmlB,QAAU,OACfnlB,KAAK+mB,gBAAkB,gBAOvB4Q,EAAZ12B,UAAA+lB,uBAAI,WACJ,GAAcxC,GAAaxkB,KAAKmkB,gBAElBgD,GAA0B3C,EAAaxkB,KAAKqmB,YAAYE,QAAU,CAIxE,OAAO,QAFS3B,KAAK8B,IAAI1mB,KAAKmlB,SAAWgC,EAAyB3C,EAAa,GAEvF,UAIYmT,EAAZ12B,UAAAyjB,aAAI,WACI,MAAO1kB,MAAKggB,QAAQ5O,OAASpR,KAAKw8B,aAAaprB,QAI3CumB,EAAZ12B,UAAAkjB,cAAI,WAGI,MAAO,oBAhnCf1d,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,YACVC,SAAU,WACVuC,SAAJ,0lEACIqB,QAAS,mmEACTC,QAAS,WAAY,YACrBP,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,OACzC1D,MACI4F,YAAa,KACb9B,kBAAmB,WACnB3B,MAAO,YACPmS,sBAAuB,WACvBgM,4BAA6B,aAC7BC,6BAA8B,WAC9BtgB,YAAa,wBACbugB,UAAW,YACXC,SAAU,WACVC,kBAAmB,0BAEvBlc,YACImc,GAAmBC,eACnBD,GAAmBE,eAEvB9e,YACMiS,QAAS8M,GAAoB5M,YAAa2c,IAC1C7c,QAAS6hB,GAA4B3hB,YAAa2c,4CAnG5DlxB,KAAIqhB,EAAAA,gBAzCJrhB,KAAI+E,EAAAA,oBAWJ/E,KAAIU,EAAAA,SAMJV,KAAeyQ,EAAAA,YAiCfzQ,KAAIshB,KA5CJthB,KAAIS,EAAAA,aAmBJT,KAASiB,EAAAA,eAATH,aAAAd,KAqXSkB,EAAAA,aAvXTlB,KAA8DuhB,EAAAA,OAA9DzgB,aAAAd,KAwXSkB,EAAAA,aAxXTlB,KAA+BwhB,EAAAA,mBAA/B1gB,aAAAd,KAyXSkB,EAAAA,aAxUTlB,KAASyhB,GAAT3gB,aAAAd,KAyUSkB,EAAAA,aA1XTlB,KAAmD0hB,EAAAA,UAAnD5gB,aAAAd,KA2XSsE,EAAAA,OA3XTtE,KA2XiBkB,EAAAA,aACjBlB,KAAAgV,OAAAlU,aAAAd,KAASiV,EAAAA,UAAT/U,MAAmB,gBACnBF,SAAAa,GAAAC,aAAAd,KAASe,EAAAA,OAATb,MAAgByhB,2BApMhBxe,UAAAnD,KAAKyG,EAAAA,UAALvG,MAAe,aAEfwb,QAAA1b,KAAKyG,EAAAA,UAALvG,MAAe,WAEf6e,aAAA/e,KAAKyG,EAAAA,UAALvG,MAAe0hB,EAAAA,uBAEfC,OAAA7hB,KAAK8hB,EAAAA,aAAL5hB,MAAkB6hB,MAGlBC,gBAAAhiB,KAAKiiB,EAAAA,aAAL/hB,MAAkB+wB,MAGlB1X,UAAAvZ,KAAKm2B,EAAAA,gBAALj2B,MAAqBk2B,IAAYC,aAAa,MAG9CN,eAAA/1B,KAAKm2B,EAAAA,gBAALj2B,MAAqBo2B,MAGrBx8B,aAAAkG,KAAKqB,EAAAA,QAGLkhB,oBAAAviB,KAAKqB,EAAAA,QAMLsb,iBAAA3c,KAAKqB,EAAAA,QAcL+gB,eAAApiB,KAAKmB,EAAAA,SAGLkhB,eAAAriB,KAAKmB,EAAAA,OAALjB,MAAY,YAIZoiB,eAAAtiB,KAAKmB,EAAAA,OAALjB,MAAY,YAIZ+c,kBAAAjd,KAAKmB,EAAAA,SAOL4b,cAAA/c,KAAKmB,EAAAA,SAELqhB,cAAAxiB,KAAKqB,EAAAA,QAaLohB,WAAAziB,KAAKqB,EAAAA,QAaL4W,WAAAjY,KAAKqB,EAAAA,QAoBLshB,cAAA3iB,KAAKqB,EAAAA,QAoBL9E,QAAAyD,KAAKqB,EAAAA,QAcL8F,KAAAnH,KAAKqB,EAAAA,SA24BL6vB,GAzlC8BF,IqBzI9BuF,GAAA,WAAA,QAAAA,MAY6B,sBAZ7Bv2B,KAAC8B,EAAAA,SAAD5B,OACI+B,SACIC,EAAAA,aACAC,EAAAA,cACAq0B,GACApxB,GACA4d,IAEJhhB,SAAUy0B,GAAmBvF,GAAUD,GAAiBuF,GAAgBt0B,EAAAA,cACxEH,cAAemvB,GAAUD,IACzB7uB,WAAY8gB,QAEhBqT,KViEIzkB,GAAe,gBAIf,QAAJoL,GAAuB9I,EAA6B7X,EAAmByf,OAAvE,KAAAA,IAAuEA,GAAvE,GAAuBziB,KAAvB6a,OAAuBA,EAA6B7a,KAApDgD,MAAoDA,EAAmBhD,KAAvEyiB,YAAuEA,EACvE,MAAAkB,MAGAgF,GAAA,WAAA,QAAAA,MACkC,sBADlCliB,KAACC,EAAAA,UAADC,OAAaC,SAAU,6BACvB+hB,KAGAwU,GAAA,WACI,QAAJA,GACez5B,EACAomB,EACAC,EACAC,EACAlJ,GAJA9gB,KAAf0D,WAAeA,EACA1D,KAAf8pB,yBAAeA,EACA9pB,KAAf+pB,WAAeA,EACA/pB,KAAfgqB,gBAAeA,EACAhqB,KAAf8gB,UAAeA,EAEf,MAAAqc,MAGM9T,GACwB3Q,EAAclP,EAAc0gB,EAAgBiT,MAG1Ele,GAAA,SAAAvV,GAmSI,QAAJuV,GACyB0G,EACRnE,EACQ3hB,EACAqU,EACjB4V,EACOpmB,EACsB05B,EACjBrT,EACAC,EACiBqT,EACFvc,EACJhX,EAC6BwzB,GAbxD,GAAJh+B,GAeQoK,EAfRG,KAAA7J,KAec0D,EAAYomB,EAA0BC,EAAYC,EAAiBlJ,IAfjF9gB,WACyBV,GAAzBqmB,cAAyBA,EACRrmB,EAAjBkiB,kBAAiBA,EACQliB,EAAzBO,OAAyBA,EACAP,EAAzB4U,SAAyBA,EAEV5U,EAAfoE,WAAeA,EACsBpE,EAArC89B,IAAqCA,EAGA99B,EAArC+9B,gBAAqCA,EACF/9B,EAAnCwhB,UAAmCA,EAEyBxhB,EAA5Dg+B,sBAA4DA,EA5QxDh+B,EAAJirB,YAAkB,YAEdjrB,EAAJ44B,YAA0B,EACtB54B,EAAJ64B,YAA0B,SAMtB74B,EAAJ84B,gBAAsB,EAMlB94B,EAAJskB,UAAwB,GAGpBtkB,EAAJynB,gBAA8B,MAG1BznB,EAAJ+4B,oBAAkC,EAG9B/4B,EAAJg5B,yBAA+B,GAAI5qB,GAAAA,QAG/BpO,EAAJkB,eAAqBlB,EAAKg+B,wBAOtBh+B,EAAJ6lB,QAAc,EAQV7lB,EAAJwc,YAEYla,QAAS,QACTC,QAAS,SACTC,SAAU,QACVC,SAAU,QAGVH,QAAS,QACTC,QAAS,MACTC,SAAU,QACVC,SAAU,WAkBCzC,EAAvBupB,aAA6D,GAAIrP,GAAAA,aAGlCla,EAA/BwpB,aACQxpB,EAAKupB,aAAaloB,KAAKmN,EAAAA,OAAO,SAAC8qB,GAAM,MAAAA,KAAIrV,EAAAA,IAAI,eAGtBjkB,EAA/BypB,aACQzpB,EAAKupB,aAAaloB,KAAKmN,EAAAA,OAAO,SAAC8qB,GAAM,OAACA,IAAIrV,EAAAA,IAAI,eAG/BjkB,EAAvBokB,gBAAyC,GAAIlK,GAAAA,aAOtBla,EAAvBkkB,YAAwD,GAAIhK,GAAAA,aAiB/Cla,EAAbijB,uBAAsEgW,EAAAA,MAAM,WACpE,MAAIj5B,GAAK0gB,QACExR,EAAAA,MAAnBgqB,UAAA,GAA4Bl5B,EAAK0gB,QAAQuD,IAAI,SAACtD,GAAW,MAAAA,GAAOwY,qBAGjDn5B,EAAKO,OAAO64B,SACd1pB,eACArO,KAAKwN,EAAAA,KAAK,GAAIwqB,EAAAA,UAAU,WAAM,MAAAr5B,GAAKijB,4BA+BpCjjB,EAAZmrB,WAAiC,EAerBnrB,EAAZu5B,WAAiC,EAarBv5B,EAAZi+B,aAAmC,EAkEvBj+B,EAAZw5B,UAAuB,EAMXx5B,EAAZ4iB,YAAyB,EAGb5iB,EAAZ2kB,UAAwB,EAGH3kB,EAArBkrB,IAA2B,aAAajS,KAGnBjZ,EAArB2iB,QAA+B,GAAIvU,GAAAA,QA8G/BpO,EAAJmkB,SAAqC,aAGjCnkB,EAAJswB,UAAgB,aA8vBJtwB,EAAZmiB,aAA2B,SAACwX,EAASC,GAAY,MAAAD,KAAOC,GA51B5C55B,EAAKwhB,YAGLxhB,EAAKwhB,UAAU+J,cAAgBvrB,GAGnCA,EAAKwK,SAAWhH,SAASgH,IAAa,EAGtCxK,EAAKsO,GAAKtO,EAAKsO,KAo1BvB,MAlnCkC5D,GAAlCiV,EAAAvV,GA6HIpI,OAAJ2I,eACQgV,EADRhe,UAAA,mBAAI,WAEI,MAAOjB,MAAKm5B,kBAGhB,SAAgBn2B,GACZhD,KAAKm5B,aAAen2B,EAEpBhD,KAAK8iB,aAAahf,wCAKtBxC,OAAJ2I,eACQgV,EADRhe,UAAA,gBAAI,WAEI,MAAOjB,MAAKyqB,eAGhB,SAAaznB,GACThD,KAAKyqB,UAAY/V,EAAAA,sBAAsB1R,GAEvChD,KAAK8iB,aAAahf,wCAKtBxC,OAAJ2I,eACQgV,EADRhe,UAAA,gBAAI,WAEI,MAAOjB,MAAK64B,eAGhB,SAAa71B,GACT,GAAIhD,KAAKmhB,eACL,KAAMiY,IAGVp5B,MAAK64B,UAAYnkB,EAAAA,sBAAsB1R,oCAK3C1B,OAAJ2I,eACQgV,EADRhe,UAAA,kBAAI,WAEI,OAAIjB,KAAK0e,UAEF1e,KAAKu9B,iBAGhB,SAAev6B,GACXhD,KAAKu9B,YAAc7oB,EAAAA,sBAAsB1R,oCAU7C1B,OAAJ2I,eACQgV,EADRhe,UAAA,mBAAI,WAEI,MAAOjB,MAAKyhB,kBAGhB,SAAgBhH,GAEZ,GAAkB,kBAAPA,GACP,KAAM4e,IAGVr5B,MAAKyhB,aAAehH,EAEhBza,KAAKmhB,gBAELnhB,KAAKygB,uDAKbnf,OAAJ2I,eACQgV,EADRhe,UAAA,aAAI,WAEI,MAAOjB,MAAK+gB,YAGhB,SAAUqL,GACFA,IAAapsB,KAAK+gB,SAClB/gB,KAAKua,WAAW6R,GAChBpsB,KAAK+gB,OAASqL,oCAMtB9qB,OAAJ2I,eACQgV,EADRhe,UAAA,UAAI,WAEI,MAAOjB,MAAKorB,SAGhB,SAAOpoB,GACHhD,KAAKorB,IAAMpoB,GAAShD,KAAKwqB,IACzBxqB,KAAK8iB,aAAahf,wCAMtBxC,OAAJ2I,eAAQgV,EAARhe,UAAA,eAAI,WACI,MAAOjB,MAAK84B,UAAY94B,KAAKkiB,gBAOjC,SAAYlf,GACRhD,KAAK84B,SAAW91B,mCAKpB1B,OAAJ2I,eAAQgV,EAARhe,UAAA,iBAAI,WACI,MAAOjB,MAAKkiB,4CA2ChBjD,EAAJhe,UAAAiC,SAAI,WAAA,GAAJ5D,GAAAU,IACYA,MAAK8e,OACL9e,KAAK8e,KAAKJ,SAAW1e,KAAK0e,UAG9B1e,KAAK8iB,aAAahf,OAKlB9D,KAAKs4B,yBACA33B,KAAKwE,EAAAA,uBAAwBvE,EAAAA,UAAUZ,KAAKiiB,UAC5CnhB,UAAU,WACHxB,EAAKi6B,WACLj6B,EAAK2kB,UAAY,EACjB3kB,EAAKupB,aAAaxjB,MAAK,KAEvB/F,EAAKupB,aAAaxjB,MAAK,GACvB/F,EAAK+4B,oBAAqB,EAC1B/4B,EAAKkmB,WAAWM,QAAU,EAC1BxmB,EAAKkiB,kBAAkBtf,mBAKvC+c,EAAJhe,UAAAu4B,mBAAI,WACSx5B,KAAK8e,OAEV9e,KAAK8hB,iBAEL9hB,KAAKmhB,eAAiBnhB,KAAK8e,KAAKqC,eAAiB,GAAImY,GAAAA,eAA6Bt5B,KAAK0e,UACvF1e,KAAKggB,QAAUhgB,KAAK8e,KAAKkB,QACzBhgB,KAAK8e,KAAKqK,WAAanpB,KAAKmpB,WAE5BnpB,KAAKmhB,eAAesY,QACf94B,KAAKC,EAAAA,UAAUZ,KAAKiiB,UACpBnhB,UAAU,SAAC2C,GACRA,EAAMi2B,MAAMn2B,QAAQ,SAAC0c,GAAW,MAAAA,GAAOE,WACvC1c,EAAMk2B,QAAQp2B,QAAQ,SAAC0c,GAAW,MAAAA,GAAOG,iBAIrDnB,EAAJhe,UAAA44B,gBAAI,WAAA,GAAJv6B,GAAAU,IACaA,MAAK8e,OAEV9e,KAAKsoB,KAAKnV,QACLrS,UAAU,WACPkS,WAAW,WAAM,MAAA1T,GAAKw6B,wBAAwB,KAGtD95B,KAAKggB,QAAQ7M,QACRxS,KAAKi5B,EAAAA,UAAU,MAAOh5B,EAAAA,UAAUZ,KAAKiiB,UACrCnhB,UAAU,WACPxB,EAAKk+B,wBAELl+B,EAAK+iB,mBAIjBpD,EAAJhe,UAAAsqB,UAAI,WACQvrB,KAAK8gB,WAAa9gB,KAAKwrB,oBAG/BvM,EAAJhe,UAAAiS,YAAI,SAAYC,GAGJA,EAAQzO,UACR1E,KAAK8iB,aAAahf,QAI1Bmb,EAAJhe,UAAAmC,YAAI,WACIpD,KAAKiiB,QAAQne,OAEb9D,KAAKiiB,QAAQle,WACb/D,KAAK8iB,aAAa/e,YAStBkb,EAAJhe,UAAAoK,OAAI,WACQrL,KAAKu5B,UACLv5B,KAAK2O,QAEL3O,KAAK2P,QAIbsP,EAAJhe,UAAA0O,KAAI,WAAA,GAAJrQ,GAAAU,MACYA,KAAK0E,UAAa1E,KAAKggB,SAAYhgB,KAAKggB,QAAQ5O,SAAUpR,KAAKkiB,aAEnEliB,KAAKqmB,YAAcrmB,KAAK4J,QAAQlH,cAAc+iB,wBAG9CzlB,KAAKo4B,gBAAkBt1B,SAASqV,iBAAiBnY,KAAK4J,QAAQlH,eAAe,cAE7E1C,KAAKkiB,YAAa,EAElBliB,KAAKukB,2BACLvkB,KAAK8jB,yBACL9jB,KAAKwhB,kBAAkBtf,eAGvBlC,KAAKH,OAAO64B,SAAS1pB,eAChBrO,KAAKwN,EAAAA,KAAK,IACVrN,UAAU,WACHxB,EAAK84B,iBAAmB94B,EAAKkmB,WAAWvlB,YACxCX,EAAKkmB,WAAWvlB,WAAWqC,iBAC3BhD,EAAKkmB,WAAWvlB,WAAWqC,eAAeM,MAAMo3B,SAAc16B,EAAK84B,gBAAvF,UAMInZ,EAAJhe,UAAA0N,MAAI,WACQ3O,KAAKkiB,aACLliB,KAAKkiB,YAAa,EAKlBliB,KAAKwhB,kBAAkBtf,eACvBlC,KAAK4vB,cAWb3Q,EAAJhe,UAAAsZ,WAAI,SAAWvX,GACHhD,KAAKggB,SACLhgB,KAAK6gB,oBAAoB7d,IAWjCic,EAAJhe,UAAAuZ,iBAAI,SAAiBC,GACbza,KAAKyjB,SAAWhJ,GAUpBwE,EAAJhe,UAAAyZ,kBAAI,SAAkBD,GACdza,KAAK4vB,UAAYnV,GASrBwE,EAAJhe,UAAA0Z,iBAAI,SAAiBC,GACb5a,KAAK0E,SAAWkW,EAChB5a,KAAKwhB,kBAAkBtf,eACvBlC,KAAK8iB,aAAahf,QAGtBxC,OAAJ2I,eAAQgV,EAARhe,UAAA,gBAAI,WACI,MAAOjB,MAAK0e,SAAW1e,KAAKmhB,eAAejB,SAAWlgB,KAAKmhB,eAAejB,SAAS,oCAGvF5e,OAAJ2I,eAAQgV,EAARhe,UAAA,oBAAI,WACI,MAAIjB,MAAK+jB,MAAgB,GAEjB/jB,KAAa,SAAkBk6B,2CAG3C54B,OAAJ2I,eAAQgV,EAARhe,UAAA,qBAAI,WACI,GAAIjB,KAAK+jB,MAAS,QAE1B,IAAckW,GAAkBj6B,KAAKmhB,eAAejB,QAI5C,OAFIlgB,MAAK6lB,SAAWoU,EAAgB7nB,UAE7B6nB,mCAGX34B,OAAJ2I,eAAQgV,EAARhe,UAAA,aAAI,WACI,OAAQjB,KAAKmhB,gBAAkBnhB,KAAKmhB,eAAegZ,2CAGvDlb,EAAJhe,UAAA4kB,MAAI,WACI,QAAO7lB,KAAKo9B,KAAyB,QAAnBp9B,KAAKo9B,IAAIp6B,OAG/Bic,EAAJhe,UAAA+C,cAAI,SAAcP,GACLzD,KAAK0E,WACF1E,KAAKu5B,UACLv5B,KAAKkf,kBAAkBzb,GAEvBzD,KAAKo6B,oBAAoB32B,KASrCwb,EAAJhe,UAAAo5B,aAAI,WACIr6B,KAAKq4B,mBAAqBr4B,KAAKu5B,UAC/Bv5B,KAAKwhB,kBAAkBtf,gBAG3B+c,EAAJhe,UAAAq5B,QAAI,WACSt6B,KAAK0E,WACN1E,KAAK84B,UAAW,EAEhB94B,KAAK8iB,aAAahf,SAQ1Bmb,EAAJhe,UAAA4uB,OAAI,WACI7vB,KAAK84B,UAAW,EAEX94B,KAAK0E,UAAa1E,KAAKu5B,YACxBv5B,KAAK4vB,YACL5vB,KAAKwhB,kBAAkBtf,eACvBlC,KAAK8iB,aAAahf,SAK1Bmb,EAAJhe,UAAAs5B,WAAI,WAAA,GAAJj7B,GAAAU,IACQA,MAAKwlB,WAAWgV,eACX75B,KAAKwN,EAAAA,KAAK,IACVrN,UAAU,WACPxB,EAAKkiB,kBAAkB+U,gBACvBj3B,EAAKgmB,0BACLhmB,EAAK6iB,MAAMzf,cAAcuhB,UAAY3kB,EAAK2kB,aAKtDhF,EAAJhe,UAAAw5B,cAAI,WACI,MAAOz6B,MAAKq9B,gBAAkB,MAAMr9B,KAAKq9B,gBAAgB3C,MAAU,IAIvEzb,EAAJhe,UAAA2Y,MAAI,WACI5Z,KAAK0D,WAAWhB,cAAckX,SAUlCqF,EAAJhe,UAAAikB,uBAAI,SAAuByV,EAAuB1V,EAAsBF,GACxE,GAAcP,GAAaxkB,KAAKmkB,gBAClByW,EAA4BpW,EAAamW,EAGzCE,EAAmBrW,EAAa,EAMhCsW,EAAwBF,EAA4B3V,EAAe4V,CAEzE,OAAOjW,MAAKC,IAAID,KAAKkH,IAAI,EAAGgP,GAAwB/V,IAOxD9F,EAAJhe,UAAAkrB,iBAAI,WACInsB,KAAK4Z,QACL5Z,KAAK2P,QAITsP,EAAJhe,UAAAw8B,uBAAI,SAAuBC,EAA8Bv8B,GACjDA,EAAO+Y,kBAEPla,KAAKggB,QAAQzc,QAAQ,SAAC0c,GACdA,EAAO7a,OAASs4B,EAAet4B,MAAQ6a,EAAOG,aAGtDpgB,KAAKmhB,eAAef,SAASsd,IAGjCze,EAAJhe,UAAA64B,qBAAI,WACI,IAAI95B,KAAK+jB,OAAU/jB,KAAK0e,SAAxB,CAER,GAAYsc,GAAuB,EACrBC,EAAkBj7B,KAAKk7B,8BACzBC,EAAiC,CAYrC,IATAn7B,KAAKsoB,KAAK/kB,QAAQ,SAAC63B,GACXA,EAAI14B,cAAc24B,UAAYD,EAAI14B,cAAc44B,eAChDH,GAA0BC,EAAI14B,cAAc+iB,wBAAwBS,MAJjD,EAKnB8U,OAIRh7B,KAAKk4B,YAAcl4B,KAAKmhB,eAAejB,SAAS9O,OAAS4pB,EAErDh7B,KAAKk4B,YAAa,CAC9B,GAAkBqD,GAAev7B,KAAK4J,QAAQlH,cAAc84B,cAAc,sCACxDC,EAAcz7B,KAAK4J,QAAQlH,cAAc84B,cAAc,+BAEvDE,EAAqBH,EAAaF,UAAYE,EAAaD,aAI3DK,EAA2BF,EAAYhW,wBAAwBS,MAC/D0V,EAAuBD,EAHK,EAOlC,IAFID,GAAuBT,EAAkBW,IAAiB57B,KAAKk4B,YAAc,GAG7EiD,IAA2BQ,GAC1BR,EAT6B,GASiBQ,EAI/C,WAFA37B,MAAKwhB,kBAAkBtf,gBAGfw5B,GAAuBT,EAdD,GAcwCW,GACtE57B,KAAKk4B,cAIbl4B,KAAKwhB,kBAAkBtf,iBAGnB+c,EAAZhe,UAAAu8B,sBAAI,WAAA,GAAJl+B,GAAAU,IACQA,MAAKmhB,eAAejB,SAAS3c,QAAQ,SAACm6B,GAClCp+B,EAAK0gB,QAAQzc,QAAQ,SAAC0c,GACdA,EAAO7a,OAASs4B,EAAet4B,OAC/B9F,EAAK6hB,eAAef,SAASsd,GAC7Bp+B,EAAK6hB,eAAehB,OAAOF,GAE3BA,EAAOE,eAMflB,EAAZhe,UAAAi6B,4BAAI,WACJ,GAAcW,GAAe77B,KAAK4J,QAAQlH,cAAco5B,WAAU,EAC1DD,GAAaL,cAAc,sCAAsCO,SAEjE/7B,KAAKkU,SAASkB,SAASymB,EAAc,WAAY,YACjD77B,KAAKkU,SAASkB,SAASymB,EAAc,aAAc,UACnD77B,KAAKkU,SAASkB,SAASymB,EAAc,MAAO,SAC5C77B,KAAKkU,SAASkB,SAASymB,EAAc,OAAQ,KAE7C77B,KAAKkU,SAAS8nB,YAAYh8B,KAAK4J,QAAQlH,cAAem5B,EAE9D,IAAYZ,GAA0B,CAQ9B,OANAY,GAAaI,iBAAiB,UAAU14B,QAAQ,SAACuS,GAC7CmlB,GAAmBnlB,EAAK2P,wBAA6B,MAF9B,IAK3BoW,EAAaE,SAENd,GAGHhc,EAAZhe,UAAAm5B,oBAAI,SAA4B32B,GAEhC,GAAcU,GAAUV,EAAMU,QAChBya,EAAaza,IAAYgb,EAAAA,YAAchb,IAAYib,EAAAA,UACrDjb,IAAYkb,EAAAA,YAAclb,IAAYmb,EAAAA;uFACxBnb,KAAYqa,EAAAA,OAASra,IAAYsa,EAAAA,QAGhCze,KAAK0e,UAAYjb,EAAMkb,SAAWC,GAEjDnb,EAAMob,iBAEN7e,KAAK2P,SACG3P,KAAK0e,UAAY1e,KAAK8e,KAAKC,YAAc/e,KAAK8e,KAAKC,WAAWC,WACtEhf,KAAK8e,KAAKC,WAAWC,UAAUvb,IAI/Bwb,EAAZhe,UAAAie,kBAAI,SAA0Bzb,GAE9B,GAAcU,GAAUV,EAAMU,QAChBya,EAAaza,IAAYgb,EAAAA,YAAchb,IAAYib,EAAAA,QAEzD,IAAIR,GAAcnb,EAAMkb,OAEpBlb,EAAMob,iBAEN7e,KAAK2O,YACF,CAAA,GAAIxK,IAAYkb,EAAAA,YAAclb,IAAYmb,EAAAA,YAC7C,MAAOtf,MAAKuf,kBAAkB1V,KAAK7J,KAAK8e,KAAMrb,EAC3C,IAAIU,IAAYqb,EAAAA,MAAQrb,IAAYsb,EAAAA,IACvChc,EAAMob,iBAEF1a,IAAYqb,EAAAA,KACZxf,KAAK8e,KAAKC,WAAWW,qBAErB1f,KAAK8e,KAAKC,WAAWY,wBAEtB,IAAKxb,IAAYqa,EAAAA,OAASra,IAAYsa,EAAAA,QAAUze,KAAK8e,KAAKC,WAAWa,WAIrE,GAAI5f,KAAK0e,UAAYva,IAAY0b,EAAAA,GAAKpc,EAAMqc,QAAS,CACxDrc,EAAMob,gBAElB,IAAkBkB,GAAuB/f,KAAKggB,QAAQve,KAAK,SAACwe,GAAW,OAACA,EAAOC,UAEnElgB,MAAKggB,QAAQzc,QAAQ,SAAC0c,GACdF,IAAyBE,EAAOvb,SAChCub,EAAOE,SAEPF,EAAOG,iBAGZ,CACf,GAAkBC,GAAyBrgB,KAAK8e,KAAKC,WAAWuB,eAEpDtgB,MAAK8e,KAAKC,WAAWC,UAAUvb,GAE3BzD,KAAK0e,UAAYE,GAAcnb,EAAM8c,UAAYvgB,KAAK8e,KAAKC,WAAWa,YACtE5f,KAAK8e,KAAKC,WAAWuB,kBAAoBD,GACzCrgB,KAAK8e,KAAKC,WAAWa,WAAWY,2BAtBpC/c,GAAMob,iBAEN7e,KAAK8e,KAAKC,WAAWa,WAAWY,yBAyBhCvB,EAAZhe,UAAAwf,oBAAI,WAAA,GAAJnhB,GAAAU,IAGQ0gB,SAAQC,UAAUC,KAAK,WACnBthB,EAAKuhB,oBAAoBvhB,EAAKwhB,UAAYxhB,EAAKwhB,UAAU9d,MAAQ1D,EAAKyhB,WAQtE9B,EAAZhe,UAAA4f,oBAAI,SAA4B7d,GAA5B,GAAJ1D,GAAAU,IACQ,IAAIA,KAAK0e,UAAY1b,EAAO,CACxB,IAAKge,MAAMC,QAAQje,GAAU,KAAMke,IAEnClhB,MAAKmhB,eAAevd,QACpBZ,EAAMO,QAAQ,SAACgQ,GAAsB,MAAAjU,GAAK8hB,YAAY7N,KACtDvT,KAAKqhB,iBACF,CACHrhB,KAAKmhB,eAAevd,OAChC,IAAkB0d,GAAsBthB,KAAKohB,YAAYpe,EAIzCse,IACAthB,KAAK8e,KAAKC,WAAWwC,cAAcD,GAI3CthB,KAAKwhB,kBAAkBtf,gBAOnB+c,EAAZhe,UAAAmgB,YAAI,SAAoBpe,GAApB,GAAJ1D,GAAAU,KACcshB,EAAsBthB,KAAKggB,QAAQlP,KAAK,SAACmP,GAC3C,IAEI,MAAuB,OAAhBA,EAAOjd,OAAiB1D,EAAKmiB,aAAaxB,EAAOjd,MAAOA,GACjE,MAAO0e,GAML,MALIC,GAAAA,aAEAC,QAAQC,KAAKH,IAGV,IAQf,OAJIJ,IACAthB,KAAKmhB,eAAehB,OAAOmB,GAGxBA,GAGHrC,EAAZhe,UAAA6gB,eAAI,WAAA,GAAJxiB,GAAAU,IACQA,MAAKuf,kBAAoBvf,KAAK8e,KAAKiD,UAEnC/hB,KAAK8e,KAAKiD,UAAY,aAEtB/hB,KAAK8e,KAAKC,WAAWiD,OAChBrhB,KAAKC,EAAAA,UAAUZ,KAAKiiB,UACpBnhB,UAAU,WAGPxB,EAAKsa,QACLta,EAAKqP,UAGb3O,KAAK8e,KAAKC,WAAWtf,OAChBkB,KAAKC,EAAAA,UAAUZ,KAAKiiB,UACpBnhB,UAAU,WACHxB,EAAK4iB,YAAc5iB,EAAK6iB,MACxB7iB,EAAK8iB,6BACG9iB,EAAK4iB,YAAe5iB,EAAKof,WAAYpf,EAAKwf,KAAKC,WAAWa,YAClEtgB,EAAKwf,KAAKC,WAAWa,WAAWY,0BAMxCvB,EAAZhe,UAAAohB,aAAI,WAAA,GAAJ/iB,GAAAU,KACcsiB,EAAqB9T,EAAAA,MAAMxO,KAAKggB,QAAQ7M,QAASnT,KAAKiiB,QAE5DjiB,MAAKuiB,uBACA5hB,KAAKC,EAAAA,UAAU0hB,IACfxhB,UAAU,SAAC2C,GACRnE,EAAKkjB,SAAS/e,EAAMoX,OAAQpX,EAAMgf,aAE9Bhf,EAAMgf,cAAgBnjB,EAAKof,UAAYpf,EAAK4iB,aAC5C5iB,EAAKqP,QACLrP,EAAKsa,WAajB5Z,KAAK0iB,gBAIDzD,EAAZhe,UAAAuhB,SAAI,SAAiBvC,EAAsBwC,GAC3C,GAAcE,GAAc3iB,KAAKmhB,eAAeyB,WAAW3C,EAE/B,OAAhBA,EAAOjd,OAAkBhD,KAAK0e,UAK1BuB,EAAOC,SACPlgB,KAAKmhB,eAAehB,OAAOF,GAE3BjgB,KAAKmhB,eAAef,SAASH,GAG7BwC,GACAziB,KAAK8e,KAAKC,WAAWwC,cAActB,GAGnCjgB,KAAK0e,WACL1e,KAAKqhB,aAEDoB,GAKAziB,KAAK4Z,WAtBbqG,EAAOG,WACPpgB,KAAKmhB,eAAevd,QACpB5D,KAAK6iB,iBAAiB5C,EAAOjd,QAyB7B2f,IAAgB3iB,KAAKmhB,eAAeyB,WAAW3C,IAC/CjgB,KAAK6iB,mBAGT7iB,KAAK8iB,aAAahf,QAIdmb,EAAZhe,UAAAogB,WAAI,WAAA,GAAJ/hB,GAAAU,IACQ,IAAIA,KAAK0e,SAAU,CAC3B,GAAkBqE,GAAU/iB,KAAKggB,QAAQgD,SAE7BhjB,MAAKmhB,eAAe8B,KAAK,SAACC,EAAGC,GACzB,MAAO7jB,GAAK8jB,eAAiB9jB,EAAK8jB,eAAeF,EAAGC,EAAGJ,GACnDA,EAAQtQ,QAAQyQ,GAAKH,EAAQtQ,QAAQ0Q,KAE7CnjB,KAAK8iB,aAAahf,SAKlBmb,EAAZhe,UAAA4hB,iBAAI,SAAyBQ,GAC7B,GAAYC,GAAmB,IAGnBA,GADAtjB,KAAK0e,SACU1e,KAAa,SAASujB,IAAI,SAACtD,GAAW,MAAAA,GAAOjd,QAE9ChD,KAAKkgB,SAAYlgB,KAAa,SAASgD,MAAQqgB,EAGjErjB,KAAK+gB,OAASuC,EACdtjB,KAAKwjB,YAAYne,KAAKie,GACtBtjB,KAAKyjB,SAASH,GACdtjB,KAAK0jB,gBAAgBre,KAAK,GAAIse,IAAkB,KAAcL,IAC9DtjB,KAAKwhB,kBAAkBtf,gBAInB+c,EAAZhe,UAAAyhB,aAAI,WACI1iB,KAAK4jB,UAAY5jB,KAAKggB,QAAQuD,IAAI,SAACtD,GAAW,MAAAA,GAAOrS,KAAIiW,KAAK,MAO1D5E,EAAZhe,UAAA6iB,uBAAI,WACQ9jB,KAAK8e,KAAKC,aACN/e,KAAK+jB,MACL/jB,KAAK8e,KAAKC,WAAWW,qBAErB1f,KAAK8e,KAAKC,WAAWwC,cAAcvhB,KAAKmhB,eAAejB,SAAS,MAMpEjB,EAAZhe,UAAAmhB,2BAAI,WACJ,GAAc4B,GAAoBhkB,KAAK8e,KAAKC,WAAWuB,iBAAmB,CAElEtgB,MAAKmiB,MAAMzf,cAAcuhB,UAAYC,EACjCF,EACAhkB,KAAKmkB,gBACLnkB,KAAKmiB,MAAMzf,cAAcuhB,UdrkCE,Mc2kC3BhF,EAAZhe,UAAAmjB,eAAI,SAAuBnE,GAEnB,MAAOjgB,MAAKggB,QAAQqE,OAAO,SAAChW,EAAgBiW,EAAuB9R,GAE/D,WAAkBlL,KAAX+G,EAAwB4R,IAAWqE,EAAU9R,MAAQlL,GAAa+G,OAC1E/G,KAIC2X,EAAZhe,UAAAsjB,yBAAI,WACJ,GAAcC,GAAaxkB,KAAKmkB,gBAClBM,EAAQzkB,KAAK0kB,eACbC,EAAcC,KAAKC,IAAIJ,EAAQD,EdvlCN,KcwlCzBM,EAAwBL,EAAQD,EAGhCO,EAAYD,EAAwBH,EAGpCK,EACFhlB,KAAK+jB,MAAQ,EAAI/jB,KAAKokB,eAAepkB,KAAKmhB,eAAejB,SAAS,IAKhE+E,EAAeN,EAAc,CACnC3kB,MAAKikB,UAAYjkB,KAAKklB,uBAAuBF,EAAsBC,EAAcF,GACjF/kB,KAAKmlB,QAAUnlB,KAAKolB,0BAEpBplB,KAAKqlB,2BAA2BN,IAU5B9F,EAAZhe,UAAAqkB,wBAAI,WACJ,GAAcC,GAAcvlB,KAAKwlB,WAAWvlB,WAAWqC,eAAemjB,wBACxDC,EAAe1lB,KAAK2lB,cAAcC,kBAClCC,EAAQ7lB,KAAK6lB,QAGfC,EdrnC0B,CcwnCzBD,KAASC,IAAY,EAGlC,IAAcC,GAAe,GAAKR,EAAYjK,KAAOwK,GAAWD,EAPnC7Z,EAO0D,IACzEga,EAAgBT,EAAYU,MAAQH,EAAUJ,EAAaQ,OAC1DL,EAAQ,EATM7Z,EAYjB+Z,GAAe,EACfD,GAAWC,EdvnCsB,EcwnC1BC,EAAgB,IACvBF,GAAWE,EdznCsB,Gc+nCrChmB,KAAKwlB,WAAWM,QAAUlB,KAAKuB,MAAML,GACrC9lB,KAAKwlB,WAAWvlB,WAAWQ,kBAQvBwe,EAAZhe,UAAAmkB,wBAAI,WAKI,MAAO,IAUHnG,EAAZhe,UAAAokB,2BAAI,SAAmCN,GACvC,GAAcP,GAAaxkB,KAAKmkB,gBAClBuB,EAAe1lB,KAAK2lB,cAAcC,kBAElCQ,EAAoBpmB,KAAKqmB,YAAYxjB,Id3pCN,Ec4pC/ByjB,EACFZ,EAAaa,OAASvmB,KAAKqmB,YAAYG,Od7pCN,Ec+pC/BC,EAAiB7B,KAAK8B,IAAI1mB,KAAKmlB,SAC/BwB,EACF/B,KAAKC,IAAI7kB,KAAK0kB,eAAiBF,Ed9qCJ,Kc+qCzBoC,EAAoBD,EAAmBF,EAAiBzmB,KAAKqmB,YAAYE,MAE3EK,GAAoBN,EACpBtmB,KAAK6mB,cAAcD,EAAmBN,GAC/BG,EAAiBL,EACxBpmB,KAAK8mB,gBAAgBL,EAAgBL,EAAmBrB,GAExD/kB,KAAK+mB,gBAAkB/mB,KAAKgnB,0BAK5B/H,EAAZhe,UAAA4lB,cAAI,SAAsBD,EAA2BN,GAErD,GAAcW,GAAwBrC,KAAKuB,MAAMS,EAAoBN,EAI7DtmB,MAAKikB,WAAagD,EAClBjnB,KAAKmlB,SAAW8B,EAChBjnB,KAAK+mB,gBAAkB/mB,KAAKgnB,yBAKxBhnB,KAAKikB,WAAa,IAClBjkB,KAAKikB,UAAY,EACjBjkB,KAAKmlB,QAAU,EACfnlB,KAAK+mB,gBAAkB,mBAKvB9H,EAAZhe,UAAA6lB,gBAAI,SAAwBL,EAAwBL,EAA2BrB,GAE/E,GAAcmC,GAAwBtC,KAAKuB,MAAMM,EAAiBL,EAW1D,IAPApmB,KAAKikB,WAAaiD,EAClBlnB,KAAKmlB,SAAW+B,EAChBlnB,KAAK+mB,gBAAkB/mB,KAAKgnB,yBAKxBhnB,KAAKikB,WAAac,EAKlB,MAJA/kB,MAAKikB,UAAYc,EACjB/kB,KAAKmlB,QAAU,OACfnlB,KAAK+mB,gBAAkB,gBAOvB9H,EAAZhe,UAAA+lB,uBAAI,WACJ,GAAcxC,GAAaxkB,KAAKmkB,gBAElBgD,GAA0B3C,EAAaxkB,KAAKqmB,YAAYE,QAAU,CAIxE,OAAO,QAFS3B,KAAK8B,IAAI1mB,KAAKmlB,SAAWgC,EAAyB3C,EAAa,GAEvF,UAIYvF,EAAZhe,UAAAyjB,aAAI,WACI,MAAO1kB,MAAKggB,QAAQ5O,QAIhB6N,EAAZhe,UAAAkjB,cAAI,WAGI,MAAO,oBA3oCf1d,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,iBACVC,SAAU,eACVuC,SAAJ,+pEACIqB,QAAS,qxFACTC,QAAS,WAAY,YACrBP,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,OACzC1D,MACI4F,YAAa,KACb9B,kBAAmB,WAEnB3B,MAAO,iBACPmS,sBAAuB,WACvBgM,4BAA6B,aAC7BC,6BAA8B,WAE9BtgB,YAAa,wBACbugB,UAAW,YACXC,SAAU,WACVC,kBAAmB,0BAEvBlc,YACImc,GAAmBC,eACnBD,GAAmBE,eAEvB9e,YACMiS,QAAS8M,GAAoB5M,YAAaiE,IAC1CnE,QAAS+M,EAAAA,QAAS7M,YAAaiE,4CAhGzCxY,KAAIqhB,EAAAA,gBAzCJrhB,KAAI+E,EAAAA,oBAUJ/E,KAAIU,EAAAA,SAOJV,KAAIyQ,EAAAA,YA+BJzQ,KAAIshB,KA3CJthB,KAAIS,EAAAA,aAoBJT,KAASiB,EAAAA,eAATH,aAAAd,KA8XSkB,EAAAA,aA/XTlB,KAA8DuhB,EAAAA,OAA9DzgB,aAAAd,KAgYSkB,EAAAA,aAhYTlB,KAA+BwhB,EAAAA,mBAA/B1gB,aAAAd,KAiYSkB,EAAAA,aAtVTlB,KAASyhB,GAAT3gB,aAAAd,KAuVSkB,EAAAA,aAlYTlB,KAAmD0hB,EAAAA,UAAnD5gB,aAAAd,KAmYSsE,EAAAA,OAnYTtE,KAmYiBkB,EAAAA,aACjBlB,KAAAgV,OAAAlU,aAAAd,KAASiV,EAAAA,UAAT/U,MAAmB,gBACnBF,SAAAa,GAAAC,aAAAd,KAASe,EAAAA,OAATb,MAAgByhB,2BAnNhBxe,UAAAnD,KAAKyG,EAAAA,UAALvG,MAAe,aAEfwb,QAAA1b,KAAKyG,EAAAA,UAALvG,MAAe,WAEf6e,aAAA/e,KAAKyG,EAAAA,UAALvG,MAAe0hB,EAAAA,uBAEfC,OAAA7hB,KAAK8hB,EAAAA,aAAL5hB,MAAkB6hB,MAGlBC,gBAAAhiB,KAAKiiB,EAAAA,aAAL/hB,MAAkBgiB,MAElB7J,OAAArY,KAAKiiB,EAAAA,aAAL/hB,MAAkBiiB,MAGlBC,eAAApiB,KAAKmB,EAAAA,SAGLkhB,eAAAriB,KAAKmB,EAAAA,OAALjB,MAAY,YAIZoiB,eAAAtiB,KAAKmB,EAAAA,OAALjB,MAAY,YAIZ+c,kBAAAjd,KAAKmB,EAAAA,SAOL4b,cAAA/c,KAAKmB,EAAAA,SAGLrH,aAAAkG,KAAKqB,EAAAA,QAGLkhB,oBAAAviB,KAAKqB,EAAAA,QAMLsb,iBAAA3c,KAAKqB,EAAAA,QAmBLmhB,cAAAxiB,KAAKqB,EAAAA,QAaLohB,WAAAziB,KAAKqB,EAAAA,QAaL4W,WAAAjY,KAAKqB,EAAAA,QAeLqhB,aAAA1iB,KAAKqB,EAAAA,QAkBLshB,cAAA3iB,KAAKqB,EAAAA,QAoBL9E,QAAAyD,KAAKqB,EAAAA,QAcL8F,KAAAnH,KAAKqB,EAAAA,SAw5BLmX,GAlnCkCoK,ICvIlCC,GAAA,WAAA,QAAAA,MAciC,sBAdjC7iB,KAAC8B,EAAAA,SAAD5B,OACI+B,SACIC,EAAAA,aACAC,EAAAA,cACA2gB,EAAAA,cACAC,GACA3d,GACA4d,GACAC,IAEJjhB,SAAUwW,GAAc0J,GAAqBhgB,EAAAA,cAC7CH,cAAeyW,GAAc0J,IAC7B9f,WAAY8gB,QAEhBL,KCRaM,GACT,GAAIza,GAAAA,eAA+B,8BAEnCoJ,GAAe,EAInBsR,GAAA,WACI,QAAJA,GAAuBC,EACAC,EACAC,EACAlJ,GAHA9gB,KAAvB8pB,yBAAuBA,EACA9pB,KAAvB+pB,WAAuBA,EACA/pB,KAAvBgqB,gBAAuBA,EACAhqB,KAAvB8gB,UAAuBA,EAEvB,MAAA+I,MAGaI,GAAuEC,EAAgBL,IAEpGM,GAAA,SAAAzgB,GA6HI,QAAJygB,GAA0BzmB,EACiBod,EACfiJ,EACAC,EACZF,EACwDM,EAChDvqB,GANpB,GAAJP,GAOQoK,EAPRG,KAAA7J,KAOc8pB,EAA0BC,EAAYC,EAAiBlJ,IAPrE9gB,IAA0BV,GAA1BoE,WAA0BA,EACiBpE,EAA3CwhB,UAA2CA,EAKnBxhB,EAAxBO,OAAwBA,EAhHXP,EAAb+qB,SAAgC,EAS5B/qB,EAAJgrB,SAAuB,EAMVhrB,EAAbwjB,aAA2C,GAAIpV,GAAAA,QAM3CpO,EAAJirB,YAA0B,cAwEZjrB,EAAdkrB,IAAoB,eAAejS,KAErBjZ,EAAd8U,WAA0B,EAEZ9U,EAAdmrB,WAA0B,EAKdnrB,EAAZorB,WAAiC,EACrBprB,EAAZqrB,eAAqC,EACzBrrB,EAAZsrB,UAAgC,EAYxBtrB,EAAKurB,cAAgBT,GAAsB9qB,EAAKoE,WAAWhB,cAE3DpD,EAAKwrB,oBAAsBxrB,EAAK0D,MAGhC1D,EAAKsO,GAAKtO,EAAKsO,EAEvB,IAAcmd,GAAeC,EAAAA,UAAUtnB,EAAWhB,cAAe,eAMzDpD,GAAK2rB,iBAAmBF,EAAajqB,UAAUxB,EAAK4rB,KAAKC,KAAK7rB,MA+GtE,MAnPgC0K,GAAhCmgB,EAAAzgB,GA8BIpI,OAAJ2I,eACQkgB,EADRlpB,UAAA,gBAAI,WAEI,MAAIjB,MAAK8gB,WAAyC,OAA5B9gB,KAAK8gB,UAAUpc,SAC1B1E,KAAK8gB,UAAUpc,SAGnB1E,KAAKoU,eAGhB,SAAapR,GACThD,KAAKoU,UAAYM,EAAAA,sBAAsB1R,GAEnChD,KAAKsqB,UACLtqB,KAAKsqB,SAAU,EACftqB,KAAK8iB,aAAahf,yCAQ1BxC,OAAJ2I,eACQkgB,EADRlpB,UAAA,UAAI,WAEI,MAAOjB,MAAKorB,SAGhB,SAAOpoB,GACHhD,KAAKorB,IAAMpoB,GAAShD,KAAKwqB,qCAa7BlpB,OAAJ2I,eACQkgB,EADRlpB,UAAA,gBAAI,WAEI,MAAOjB,MAAKyqB,eAGhB,SAAaznB,GACThD,KAAKyqB,UAAY/V,EAAAA,sBAAsB1R,oCAO3C1B,OAAJ2I,eACQkgB,EADRlpB,UAAA,aAAI,WAEI,MAAOjB,MAAK6qB,cAAc7nB,WAG9B,SAAUA,GACFA,IAAUhD,KAAKgD,QACfhD,KAAK6qB,cAAc7nB,MAAQA,EAC3BhD,KAAK8iB,aAAahf,yCA2C1BqmB,EAAJlpB,UAAAiC,SAAI,WAAA,GAAJ5D,GAAAU,IACQgT,YAAW,WAAM,MAAA1T,GAAK4rB,QAAQ,GAC9BlrB,KAAK0qB,WAAa5nB,SAASqV,iBAAiBnY,KAAK0D,WAAWhB,eAAyB,WAAG,GAEhG,IAAc2oB,GAAavoB,SAASqV,iBAAiBnY,KAAK0D,WAAWhB,eAAyB,WAAG,IACnF4oB,EAAgBxoB,SAASqV,iBAAiBnY,KAAK0D,WAAWhB,eAA4B,cAAG,GAG/F1C,MAAK4qB,UAA8B,EAAlB5qB,KAAK0qB,WAAiBW,EAAaC,EACpDtrB,KAAK2qB,eAAiB3qB,KAAK0qB,YAG/BP,EAAJlpB,UAAAiS,YAAI,WACIlT,KAAK8iB,aAAahf,QAGtBqmB,EAAJlpB,UAAAmC,YAAI,WACIpD,KAAK8iB,aAAa/e,WAClB/D,KAAKirB,iBAAiBlU,eAG1BoT,EAAJlpB,UAAAsqB,UAAI,WACQvrB,KAAK8gB,WAIL9gB,KAAKwrB,mBAMTxrB,KAAKyrB,yBAITtB,EAAJlpB,UAAAiqB,KAAI,WAAA,GAAJ5rB,GAAAU,IACaA,MAAKqqB,SAIVrqB,KAAKH,OAAOoW,kBAAkB,WACtC,GAAkByV,GAAWpsB,EAAKoE,WAAWhB,cAE3BipB,EAAc7oB,SAAS8oB,OAAOzT,iBAAiBuT,GAAgB,OAAG,IAClEG,EAAOF,EAAcD,EAASnpB,YAEpCmpB,GAAS9oB,MAAM2jB,OAAS,CAEpC,IAAkBA,GAAS3B,KAAKkH,IAAIxsB,EAAKsrB,UAAWc,EAASK,aAAeF,EAAOvsB,EAAKqrB,eAC5Ee,GAAS9oB,MAAM2jB,OAAYA,EAAvC,QAKI4D,EAAJlpB,UAAA2Y,MAAI,WACI5Z,KAAK0D,WAAWhB,cAAckX,SAIlCuQ,EAAJlpB,UAAA+qB,aAAI,SAAaC,GACLA,IAAcjsB,KAAKsqB,UACnBtqB,KAAKsqB,QAAU2B,EACfjsB,KAAK8iB,aAAahf,SAQ1BxC,OAAJ2I,eAAQkgB,EAARlpB,UAAA,aAAI,WACI,OAAQjB,KAAK0D,WAAWhB,cAAcM,QAAUhD,KAAKksB,8CAOzD/B,EAAJlpB,UAAAkrB,iBAAI,WACInsB,KAAK4Z,SAICuQ,EAAdlpB,UAAAwqB,sBAAI,WACJ,GAAcW,GAAWpsB,KAAKgD,KAElBhD,MAAK8qB,sBAAwBsB,IAC7BpsB,KAAK8qB,oBAAsBsB,EAC3BpsB,KAAK8iB,aAAahf,SAKhBqmB,EAAdlpB,UAAAirB,WAAI,WAEJ,GAAcG,GAAYrsB,KAAK0D,WAAwB,cAAyB2oB,QAExE,OAAOA,IAAYA,EAASC,UAGxBnC,EAAZlpB,UAAAsrB,cAAI,WACJ,GAAcb,GAAW1rB,KAAK0D,WAAWhB,cAC3BipB,EAAc7oB,SAAS8oB,OAAOzT,iBAAiBuT,GAAgB,OAAEc,WAAY,IAC7EX,EAAOF,EAAcD,EAASnpB,YAEpC,OAAOqiB,MAAKkH,IAAI9rB,KAAK4qB,UAAWc,EAASK,aAAeF,mBAjQhEplB,KAACC,EAAAA,UAADC,OACIC,SAAU,uBACVC,SAAU,aACVC,MACImC,MAAO,cACPwjB,gCAAiC,WACjC/f,YAAa,KACbggB,qBAAsB,cACtBC,sBAAuB,aACvBC,aAAc,WACdC,aAAc,WACdtF,SAAU,sBACVD,UAAW,sBAEfze,YAAciS,QAAS8M,GAAoB5M,YAAamP,4CAjD5D1jB,KAAwBS,EAAAA,aAIxBT,KAA6B0hB,EAAAA,UAA7B5gB,aAAAd,KA6JiBkB,EAAAA,WA7JjBlB,KA6J6BsE,EAAAA,SA7J7BtE,KAAwCuhB,EAAAA,OAAxCzgB,aAAAd,KA8JiBkB,EAAAA,aA9JjBlB,KAASwhB,EAAAA,mBAAT1gB,aAAAd,KA+JiBkB,EAAAA,aA1JjBlB,KAAIshB,KA4JJthB,SAAAa,GAAAC,aAAAd,KAAiBkB,EAAAA,WAAjBlB,KAA6BsE,EAAAA,OAA7BtE,KAAqCe,EAAAA,OAArCb,MAA4CijB,QAnK5CnjB,KAA0BU,EAAAA,4BAoD1BkjB,UAAA5jB,KAAKqB,EAAAA,QAGLkhB,oBAAAviB,KAAKqB,EAAAA,QAwBLpD,WAAA+B,KAAKqB,EAAAA,QAsBL8F,KAAAnH,KAAKqB,EAAAA,QAaLmhB,cAAAxiB,KAAKqB,EAAAA,QAMLohB,WAAAziB,KAAKqB,EAAAA,QAaL9E,QAAAyD,KAAKqB,EAAAA,SA+JLqiB,GAnPgCF,IC3ChC6C,GAAA,WAAA,QAAAA,MAMA,sBANArmB,KAAC8B,EAAAA,SAAD5B,OACI+B,SAAUC,EAAAA,aAAcgD,EAAAA,WAAYqI,GAAgB+Y,EAAAA,aACpDtkB,SAAU0hB,IACV3hB,cAAe2hB,QAGnB2C,SbdIE,MAAJ,EACIC,QAAJ,EACIC,QAAJ,kFAIIC,OAAS,WACTC,KAAO,SAGEC,IAAbnnB,MACIA,GAAConB,GAAYH,QAAS,WACtBjnB,GAAConB,GAAYF,MAAO,QACxBlnB,IAEaqnB,GAAmCD,GAAYF,KAE/CI,GACT,GAAIC,QAAO,yEACFC,GAAuB,qDACvBC,GAAoB,mCcmC7BC,GAAkC,EAEhCC,GAA2D,GAAI1c,SAC/D2c,GAAsE,GAAI3c,SAC1E4c,GAAoB,SAACC,GAC3B,GAAUC,GAA2BH,GAAkCI,IAAIF,OAEtC1mB,KAA7B2mB,GAA0CA,KAGlDE,GAAA,WACI,QAAJA,GACerE,EACAC,EACAC,EACAlJ,GAHA9gB,KAAf8pB,yBAAeA,EACA9pB,KAAf+pB,WAAeA,EACA/pB,KAAfgqB,gBAAeA,EACAhqB,KAAf8gB,UAAeA,EACf,MAAAqN,MAGaC,GAEiBlE,EAAgBiE,IA2B9CE,IACgBC,SAAhB,SAAyBN,OAGmC1mB,KAApCtH,KAAKuuB,6BACLT,GAAkCvpB,IAAIypB,EAAGhuB,KAAKuuB,4BAC9CvuB,KAAKuuB,+BAA6BjnB,GAE1D,IAA0BknB,GAAYX,GAAeK,IAAIF,EAErC,OAAOQ,GAAYA,EAAUR,GAAK,MAEtCS,0BAAA,SAA0BhU,GACtBza,KAAKuuB,2BAA6B9T,IAtCtDiU,GAAA,SAAAhlB,GAmLI,QAAJglB,GAAiChrB,EACUod,EACfiJ,EACAC,EACZF,EACqDM,EACpClW,GAN7B,GAAJ5U,GAOQoK,EAPRG,KAAA7J,KAOc8pB,EAA0BC,EAAYC,EAAiBlJ,IAPrE9gB,WAAiCV,GAAjCoE,WAAiCA,EACUpE,EAA3CwhB,UAA2CA,EAKVxhB,EAAjC4U,SAAiCA,EAxH7B5U,EAAJgrB,SAAuB,EAMVhrB,EAAbwjB,aAA2C,GAAIpV,GAAAA,QAM3CpO,EAAJirB,YAA0B,gBAwFLjrB,EAArBkrB,IAA2B,iBAAiBoD,KAQhCtuB,EAAZqvB,SAAsC,KAE1BrvB,EAAZsvB,SAAsC,KAe9BtvB,EAAK8qB,mBAAqBA,GAAsB9qB,EAAKoE,WAAWhB,cAEhEpD,EAAKwrB,oBAAsBxrB,EAAK0D,MAChC1D,EAAKmkB,SAAWoL,EAAAA,KAGhBvvB,EAAKsO,GAAKtO,EAAKsO,GAEftO,EAAK2pB,YAAcoE,GAAwBE,IAGvCjuB,EAAKwhB,YAAaxhB,EAAKwhB,UAAU+J,cAAgBvrB,GAIrDuuB,GAAetpB,IACGjF,EAAKwhB,UAAiB,QACpCgO,EAAAA,WAAWC,SACP,WAAM,MAAAzvB,GAAK0vB,kBACX,WAAM,MAAA1vB,GAAK2vB,oBACX,WAAM,MAAA3vB,GAAK4vB,yBA6c3B,MA7mBkCllB,GAAlC0kB,EAAAhlB,GA6BIpI,OAAJ2I,eACQykB,EADRztB,UAAA,gBAAI,WAEI,MAAIjB,MAAK8gB,WAAyC,OAA5B9gB,KAAK8gB,UAAUpc,SAA4B1E,KAAK8gB,UAAUpc,SAEzE1E,KAAKoU,eAGhB,SAAapR,GACThD,KAAKoU,UAAYM,EAAAA,sBAAsB1R,GAInChD,KAAKsqB,UACLtqB,KAAKsqB,SAAU,GAGnBtqB,KAAK8iB,aAAahf,wCAGtBxC,OAAJ2I,eACQykB,EADRztB,UAAA,UAAI,WACmB,MAAOjB,MAAKorB,SAE/B,SAAOpoB,GAAiBhD,KAAKorB,IAAMpoB,GAAShD,KAAKwqB,qCAajDlpB,OAAJ2I,eACQykB,EADRztB,UAAA,gBAAI,WAC0B,MAAOjB,MAAKyqB,eAEtC,SAAaznB,GAAkBhD,KAAKyqB,UAAY/V,EAAAA,sBAAsB1R,oCAMtE1B,OAAJ2I,eACQykB,EADRztB,UAAA,aAAI,WACsB,MAAOjB,MAAKoqB,mBAAmBpnB,WAErD,SAAUA,GACFA,IAAUhD,KAAKgD,QACfhD,KAAKoqB,mBAAmBpnB,MAAQA,EAChChD,KAAKmvB,sDAIb7tB,OAAJ2I,eACQykB,EADRztB,UAAA,kBAAI,WACgC,MAAOjB,MAAKovB,iBAE5C,SAAeC,GACXrvB,KAAKovB,YAAc9tB,OACdC,KAAK+rB,IACL/J,IAAI,SAAC+L,GAAkB,MAAAhC,IAAYgC,KACnC7c,QAAQ4c,IAAgB,EAAIA,EAAc9B,GAE/CQ,GAAgC/tB,KAAK8gB,UAAiB,SACtD9gB,KAAKipB,YAAcoE,GAAwBrtB,KAAKovB,8CAGpD9tB,OAAJ2I,eACQykB,EADRztB,UAAA,eAAI,WAC+B,MAAOjB,MAAK2uB,cAE3C,SAAYY,GACRvvB,KAAK2uB,SAAWY,EAChBvvB,KAAKwvB,YAA2B,OAAbD,EAAoBvvB,KAAKyvB,sBAAsBF,OAAYjoB,GAC9EymB,GAAgC/tB,KAAK8gB,UAAiB,0CAG1Dxf,OAAJ2I,eACQykB,EADRztB,UAAA,eAAI,WAC+B,MAAOjB,MAAK4uB,cAE3C,SAAYc,GACR1vB,KAAK4uB,SAAWc,EAChB1vB,KAAK2vB,YAA2B,OAAbD,EAAoB1vB,KAAKyvB,sBAAsBC,OAAYpoB,GAC9EymB,GAAgC/tB,KAAK8gB,UAAiB,0CAsD1D4N,EAAJztB,UAAAiS,YAAI,WACIlT,KAAK8iB,aAAahf,QAGtB4qB,EAAJztB,UAAAmC,YAAI,WACIpD,KAAK8iB,aAAa/e,YAGtB2qB,EAAJztB,UAAAsqB,UAAI,WACQvrB,KAAK8gB,WAIL9gB,KAAKwrB,mBAMTxrB,KAAKyrB,yBAGTiD,EAAJztB,UAAA2Y,MAAI,WACI5Z,KAAK0D,WAAWhB,cAAckX,SAGlC8U,EAAJztB,UAAA+qB,aAAI,SAAaC,GACLA,IAAcjsB,KAAKsqB,UACnBtqB,KAAKsqB,QAAU2B,EACfjsB,KAAK4vB,YACL5vB,KAAK8iB,aAAahf,SAI1B4qB,EAAJztB,UAAA4uB,OAAI,WACI7vB,KAAKmvB,oBACLnvB,KAAKgsB,cAAa,IAGtB0C,EAAJztB,UAAA6uB,QAAI,SAAQ3uB,GACJA,EAAO0d,gBACf,IAAckR,GAA6B5uB,EAAO6uB,cAAcC,QAAQ,YAET3oB,KAAnDtH,KAAKyvB,sBAAsBM,KAE/B/vB,KAAK0D,WAAWhB,cAAcM,MAAQ+sB,EACtC/vB,KAAKkwB,YAGTxB,EAAJztB,UAAAivB,QAAI,WACJ,GAAcC,GAA6BnwB,KAAK0D,WAAWhB,cAAc0tB,eAC3DC,EAA2BrwB,KAAK0D,WAAWhB,cAAc4tB,aAC3DC,GAAmC,EAEjCrqB,EAAdlG,KAAAwwB,mBAAAxwB,KAAA0D,WAAAhB,cAAAM,OACYytB,EADZvqB,EAAAuqB,UAEYC,EAFZxqB,EAAAwqB,gBAGYC,EAHZzqB,EAAAyqB,yBAOYF,IACAA,EAAU,IACc,IAAxBA,EAAU,GAAGrf,OACbmf,GAA0B,EACnBG,GACuB,IAA9BA,EAAgB,GAAGtf,QACnBsf,EAAgB,IACc,IAA9BA,EAAgB,GAAGtf,OACnBmf,GAA0B,EACnBI,GACiC,IAAxCA,EAA0B,GAAGvf,QACW,IAAxCuf,EAA0B,GAAGvf,QAC7Buf,EAA0B,IACc,IAAxCA,EAA0B,GAAGvf,SAC7Bmf,GAA0B,GAI9BvwB,KAAKmvB,mBAAoByB,qBAAsBL,IAE/CvwB,KAAK0D,WAAWhB,cAAc0tB,eAAiBD,EAC/CnwB,KAAK0D,WAAWhB,cAAc4tB,aAAeD,EAEzCE,GAAqD,OAA1BvwB,KAAK8gB,UAAU+P,QAC1C7wB,KAAK8wB,sCAAsCX,EAAqB,IAQxE7uB,OAAJ2I,eAAQykB,EAARztB,UAAA,aAAI,WACI,OAAQjB,KAAK0D,WAAWhB,cAAcM,QAAUhD,KAAKksB,8CAOzDwC,EAAJztB,UAAAkrB,iBAAI,WACInsB,KAAK4Z,SAGT8U,EAAJztB,UAAAsZ,WAAI,SAAWvX,GACO,OAAVA,GACAhD,KAAKkU,SAAS6c,YAAY/wB,KAAK0D,WAAWhB,cACtC,QACA1C,KAAKgxB,sBAAsBhuB,EAAOhD,KAAKixB,aAG/CjxB,KAAKyjB,SAASzgB,GAAS,MACvBhD,KAAKmvB,qBAGTT,EAAJztB,UAAA8gB,UAAI,SAAUte,GAEd,GAAcU,GAAkBnE,KAAKkxB,WAAWztB,EdhYR,ackY5BU,GdjY8B,cciYEA,GAChCnE,KAAKmxB,sBAAsB1tB,GdjYG,ccmY9BU,GdlY+B,eckYGA,GAClCnE,KAAKoxB,gCAAgC3tB,IAI7CirB,EAAJztB,UAAAuZ,iBAAI,SAAiBC,GACbza,KAAKyjB,SAAWhJ,GAGpBiU,EAAJztB,UAAAyZ,kBAAI,SAAkBD,GACdza,KAAK4vB,UAAYnV,GAIbiU,EAAZztB,UAAAwqB,sBAAI,WACJ,GAAcW,GAAWpsB,KAAKgD,KAElBhD,MAAK8qB,sBAAwBsB,IAC7BpsB,KAAK8qB,oBAAsBsB,EAC3BpsB,KAAK8iB,aAAahf,SAKlB4qB,EAAZztB,UAAAirB,WAAI,WACJ,GAAcG,GAA+BrsB,KAAK0D,WAAwB,cAAE2oB,QAEpE,OAAOA,IAAYA,EAASC,UAGxBoC,EAAZztB,UAAAkuB,kBAAI,SAA0BkC,OAA9B,KAAAA,IAA8BA,KAId,IAAAC,GAAhBD,EAAAC,YAA6BprB,EAA7BmrB,EAAAT,qBAA6BA,MAA7B,KAAA1qB,GAAAA,EACcqrB,EAAgCD,GAClCtxB,KAAKyvB,sBAAsBzvB,KAAK0D,WAAWhB,cAAcM,MAG7D,IAFAhD,KAAKwxB,qBAAuBD,EAExBX,OAAwCtpB,KAAhBiqB,EAA2B,CAC/D,GAAkBnB,GAAyBpwB,KAAK0D,WAAWhB,cAAc0tB,eACvDE,EAAuBtwB,KAAK0D,WAAWhB,cAAc4tB,YAC3DtwB,MAAKkU,SAAS6c,YACV/wB,KAAK0D,WAAWhB,cAChB,QACA1C,KAAKgxB,sBAAsBO,EAAavxB,KAAKixB,aACjDjxB,KAAK0D,WAAWhB,cAAc0tB,eAAiBA,EAC/CpwB,KAAK0D,WAAWhB,cAAc4tB,aAAeA,EAGlCtwB,KAAK8gB,UAAiB,QAAE2Q,wBAC/C,IAAcpjB,GAAmC,OAA1BrO,KAAK8gB,UAAU+P,YAAmCvpB,KAAhBiqB,EAA4BA,EAAc,IAC3FvxB,MAAKyjB,SAASpV,GACdrO,KAAK8iB,aAAahf,QAGd4qB,EAAZztB,UAAAkwB,sBAAI,SAA8B1tB,GAC1BA,EAAMob,gBAEd,IAAYyS,GAAgCtxB,KAAKwxB,oBACzC,QAAoBlqB,KAAhBgqB,EAA2B,CACvC,GAAkBI,GAAY1xB,KAAK0D,WAAWhB,cAAc0tB,eAE1CuB,EAAmB3xB,KAAK4xB,mBAAmBF,GAC5CC,iBACCxtB,EAAkBnE,KAAKkxB,WAAWztB,EdtcZ,acucxBU,IAAgCmtB,EAActxB,KAAK6xB,cAAcP,EAAaK,IdtcpD,ccuc1BxtB,IAAkCmtB,EAActxB,KAAK8xB,cAAcR,EAAaK,IACpF3xB,KAAKmvB,mBAAoBmC,YAArCA,IACYtxB,KAAK8wB,sCAAsCY,KAI3ChD,EAAZztB,UAAAmwB,gCAAI,SAAwC3tB,GAC5C,GAAc6tB,GAAgCtxB,KAAKwxB,qBACrCrtB,EAAkBnE,KAAKkxB,WAAWztB,EAExC,QAAoB6D,KAAhBgqB,EAA2B,CACvC,GAAgBI,GAAoB1xB,KAAK0D,WAAWhB,cAAc0tB,cdjdxB,eckd1BjsB,EACAutB,EAAY1xB,KAAK+xB,qCAAqCL,EAAW1xB,KAAK0D,WAAWhB,cAAcM,OdldpE,ecmdpBmB,IACPutB,EAAY1xB,KAAKgyB,qCAAqCN,EAAW1xB,KAAK0D,WAAWhB,cAAcM,QAEnGhD,KAAK8wB,sCAAsCY,KAO3ChD,EAAZztB,UAAAiwB,WAAI,SAAmBztB,GACf,MAAOA,GAAMwuB,MAAQxuB,EAAM/B,KAGvBgtB,EAAZztB,UAAA6vB,sCAAI,SAA8CY,GAA9C,GAAJpyB,GAAAU,IACQgT,YAAW,WACnB,GAAkBkf,GAAgB5yB,EAAKsyB,mBAAmBF,EAC9CpyB,GAAKoE,WAAWhB,cAAc0tB,eAAiB8B,EAAcC,oBAC7D7yB,EAAKoE,WAAWhB,cAAc4tB,aAAe4B,EAAcE,qBAI3D1D,EAAZztB,UAAA4wB,cAAI,SAAsBQ,EACAC,OAA1B,KAAAA,IAA0BA,EAA6BC,GAAUrF,QACrD,IAAAhnB,GAAZlG,KAAAwyB,sBAAAH,GAAcrF,EAAd9mB,EAAA8mB,MAAqBC,EAArB/mB,EAAA+mB,QAA8BC,EAA9BhnB,EAAAgnB,OAEQ,QAAQoF,GACJ,IAAKC,IAAUvF,MACXA,GACA,MACJ,KAAKuF,IAAUtF,QACXA,GACA,MACJ,KAAKsF,IAAUrF,QACXA,IAWR,MANIA,GdlgB8B,KckgBEA,EAAU,GAE1CD,EdngB4B,KcmgBEA,EAAU,GAExCD,EdpgByB,KcogBAA,EAAQ,GAEvBhtB,KAAKyyB,sBAAsBzF,EAAOC,EAASC,IAMrDwB,EAAZztB,UAAA6wB,cAAI,SAAsBO,EACAK,OAA1B,KAAAA,IAA0BA,EAA6BH,GAAUrF,QACrD,IAAAhnB,GAAZlG,KAAAwyB,sBAAAH,GAAcrF,EAAd9mB,EAAA8mB,MAAqBC,EAArB/mB,EAAA+mB,QAA8BC,EAA9BhnB,EAAAgnB,OAEQ,QAAQwF,GACJ,IAAKH,IAAUvF,MACXA,GACA,MACJ,KAAKuF,IAAUtF,QACXA,GACA,MACJ,KAAKsF,IAAUrF,QACXA,IAWR,MANIA,GAAU,IAAKA,Ed/hBe,IciiB9BD,EAAU,IAAKA,EdhiBa,IckiB5BD,EAAQ,IAAKA,EdjiBY,IcmiBfhtB,KAAKyyB,sBAAsBzF,EAAOC,EAASC,IAGrDwB,EAAZztB,UAAA8wB,qCAAI,SAA6CL,EAAmBiB,GAC5D,MAAqB,KAAdjB,EAAkBiB,EAAWvhB,OAASsgB,EAAY,GAGrDhD,EAAZztB,UAAA+wB,qCAAI,SAA6CN,EACAiB,EACAC,OAAjD,KAAAA,IAAiDA,EAAjD,IACA,IAAcC,GAAyBF,EAAWlgB,QAAQmgB,EAAalB,EAE/D,YAA0BpqB,KAAnBurB,EAA+BA,EAAiB,EAAI,GAOvDnE,EAAZztB,UAAA2wB,mBAAI,SAA2BkB,GAK/B,GACYnB,GACAQ,EACAC,EAHEO,EAAqB3yB,KAAK0D,WAAWhB,cAAcM,MAKnD+vB,EAAeJ,EAAWlgB,QAAQ,IAAKugB,GACvCC,GAAiC,IAAlBF,EAAsBJ,EAAWlgB,QAAQ,IAAKsgB,EAAe,IAAM,CAgBxF,QAdsB,IAAlBE,GAAuBH,EAAiBG,GACxCtB,EAAmBY,GAAUrF,QAC7BiF,EAAsBc,EAAe,EACrCb,EAAoBO,EAAWvhB,SACN,IAAlB2hB,GAAuBD,EAAiBC,GAC/CpB,EAAmBY,GAAUtF,QAC7BkF,EAAsBY,EAAe,EACrCX,EAAoBa,GAAgB,EAAIA,EAAeN,EAAWvhB,SAElEugB,EAAmBY,GAAUvF,MAC7BmF,EAde,EAefC,GAAsC,IAAlBW,EAAsBA,EAAeJ,EAAWvhB,SAIpEugB,iBAAZA,EACYQ,oBAAZA,EACYC,kBAAZA,IAOY1D,EAAZztB,UAAA+vB,sBAAI,SAA8BkC,EACAjC,OAAlC,KAAAA,IAAkCA,EAAlC1D,UACcP,EAAgBhtB,KAAKmzB,yBAAyBD,EAAQE,YACtDnG,EAAkBjtB,KAAKmzB,yBAAyBD,EAAQG,cACxDnG,EAAkBltB,KAAKmzB,yBAAyBD,EAAQI,aAO9D,QALRptB,KACYA,EAAConB,GAAYF,MAAO,WAAM,MAAGJ,GAAzC,IAAkDC,GACtC/mB,EAAConB,GAAYH,QAAS,WAAM,MAAGH,GAA3C,IAAoDC,EAApD,IAA+DC,GAC/DhnB,GAEuC+qB,MAG3BvC,EAAZztB,UAAAuvB,mBAAI,SAA2BmC,GAK/B,GAAchC,GAA4BgC,EAAWY,MAAM/F,IAC7CkD,EAAkBiC,EAAWY,MAAM7F,GAGzC,QACI+C,UAHckC,EAAWY,MAAM5F,IAI/B+C,gBAAZA,EACYC,0BAAZA,IAOYjC,EAAZztB,UAAAwxB,sBAAI,SAA8BzF,EAAeC,EAAiBC,GAC1D,WADR,KAAAA,IAAkEA,EAAlE,GACeltB,KAAKyvB,sBAAyBzC,EAA7C,IAAsDC,EAAtD,IAAiEC,IAGrDwB,EAAZztB,UAAAwuB,sBAAI,SAA8BkD,GAE1B,OAAmBrrB,KAAfqrB,EAAJ,CAEM,GAAAzsB,GAAdlG,KAAAwwB,mBAAAmC,GACYlC,EADZvqB,EAAAuqB,UAEYC,EAFZxqB,EAAAwqB,gBAGYC,EAHZzqB,EAAAyqB,yBAMQ,IAAiC,IAA7BgC,EAAWa,OAAOpiB,SACJ,OAAdqf,GAA0C,OAApBC,GAA0D,OAA9BC,GADtD,CAMR,GAAY3D,GAAgB,EAChBC,EAAkB,EAClBC,EAAkB,CAElBuD,GACAzD,EAAQyG,OAAOhD,EAAU,IAClBC,GACP1D,EAAQyG,OAAO/C,EAAgB,IAC/BzD,EAAUwG,OAAO/C,EAAgB,KAC1BC,IACP3D,EAAQyG,OAAO9C,EAA0B,IACzC1D,EAAUwG,OAAO9C,EAA0B,IAC3CzD,EAAUuG,OAAO9C,EAA0B,IAGvD,IAAc+C,GAAmB,GAAIC,MAAK,KAAM,EAAG,EAAG3G,EAAOC,EAASC,EAG9D,OAAO0G,OAAMF,EAAWG,eAAavsB,GAAYosB,KAG7ChF,EAAZztB,UAAAkyB,yBAAI,SAAiCW,GAG7B,MAAOA,GAFqC,EAEC,GAAGA,EAAU,IAAIA,GAG1DpF,EAAZztB,UAAAuxB,sBAAI,SAA8BH,GAC1B,OACIrF,MAAOqF,EAAQe,WACfnG,QAASoF,EAAQgB,aACjBnG,QAASmF,EAAQiB,eAIjB5E,EAAZztB,UAAA+tB,eAAI,WACI,WAAqC1nB,KAA9BtH,KAAKwxB,sBACNuC,mBAAqBC,KAAMh0B,KAAK0D,WAAWhB,cAAcM,QAC3D,MAGA0rB,EAAZztB,UAAAguB,iBAAI,WAEI,WAAkC3nB,KAA9BtH,KAAKwxB,0BACgBlqB,KAArBtH,KAAKwvB,aACLxvB,KAAKi0B,mBAAmBj0B,KAAKwxB,uBACpB0C,8BAAgCF,KAAMh0B,KAAK0D,WAAWhB,cAAcM,QAG1E,MAGH0rB,EAAZztB,UAAAiuB,iBAAI,WACI,WAAkC5nB,KAA9BtH,KAAKwxB,0BACgBlqB,KAArBtH,KAAK2vB,aACL3vB,KAAKm0B,qBAAqBn0B,KAAKwxB,uBACtB4C,+BAAiCJ,KAAMh0B,KAAK0D,WAAWhB,cAAcM,QAG3E,MAGH0rB,EAAZztB,UAAAgzB,mBAAI,SAA2BI,GACvB,MAAOA,GAAcR,UAAoB7zB,KAAgB,YAAE6zB,UAAY,GAGnEnF,EAAZztB,UAAAkzB,qBAAI,SAA6BE,GACzB,MAAOA,GAAcR,UAAoB7zB,KAAgB,YAAE6zB,WAAa,kBA7pBhFptB,KAACC,EAAAA,UAADC,OACIC,SAAU,sBACVC,SAAU,oBACVC,MACImC,MAAO,yBAGPyD,YAAa,KACbggB,qBAAsB,cACtBE,aAAc,WACdC,aAAc,WACdyH,qBAAsB,aACtBC,kBAAmB,UACnBC,kBAAmB,UACnBC,eAAgB,QAChB9H,sBAAuB,aACvBpF,SAAU,WACVD,UAAW,qBACXoN,UAAW,YACXC,UAAW,kBACX5tB,YAAa,qBAEjB8B,YAEQiS,QAAS8Z,EAAAA,cACTC,SAAZxG,GAgBYnT,OAAO,IAGPJ,QAAS8M,GACT5M,YAAaC,EAAAA,WAAW,WAAM,MAAAyT,+CAzH1CjoB,KAAIS,EAAAA,aAeJT,KAAI0hB,EAAAA,UAAJ5gB,aAAAd,KAiPiBkB,EAAAA,WAjPjBlB,KAiP6BsE,EAAAA,SAhP7BtE,KAAIuhB,EAAAA,OAAJzgB,aAAAd,KAiPiBkB,EAAAA,aApPjBlB,KAAIwhB,EAAAA,mBAAJ1gB,aAAAd,KAqPiBkB,EAAAA,aAzOjBlB,KAAIshB,KA2OJthB,SAAAa,GAAAC,aAAAd,KAAiBkB,EAAAA,WAAjBlB,KAA6BsE,EAAAA,OAA7BtE,KAAqCe,EAAAA,OAArCb,MAA4CmuB,QA7P5CruB,KAAIyQ,EAAAA,+BAgIJ8R,oBAAAviB,KAAKqB,EAAAA,QAoBLpD,WAAA+B,KAAKqB,EAAAA,QAmBL8F,KAAAnH,KAAKqB,EAAAA,QAULmhB,cAAAxiB,KAAKqB,EAAAA,QAMLohB,WAAAziB,KAAKqB,EAAAA,QASL9E,QAAAyD,KAAKqB,EAAAA,QAULmpB,aAAAxqB,KAAKqB,EAAAA,MAALnB,MAAW,iBAaXouB,UAAAtuB,KAAKqB,EAAAA,MAALnB,MAAW,cASXquB,UAAAvuB,KAAKqB,EAAAA,MAALnB,MAAW,eAogBX+nB,GA7mBkCN,ICvHlC6G,GAAA,WAAA,QAAAA,MAciC,sBAdjCxuB,KAAC8B,EAAAA,SAAD5B,OACI+B,SACIC,EAAAA,aACAgD,EAAAA,WACAC,EAAAA,eACAmhB,EAAAA,aAEJvkB,cACIkmB,IAEJjmB,SACIimB,QAGRuG,KCpBazjB,GAAoB,GAAIrC,GAAAA,eAAoB,uBAGrD+lB,MAAQ,QACRC,KAAO,OACPC,IAAM,MACNC,OAAS,wBAGb,QAAAvoB,KAKI9M,KAAJoF,KAAsB,KAElBpF,KAAJsF,SAAqCgwB,GAAoBJ,MAGrDl1B,KAAJ2R,aAA4B,EAGxB3R,KAAJuS,kBAAiC,EAG7BvS,KAAJuO,cAA6B,EAGzBvO,KAAJ+R,kBAA4C,GAC5C,MAAAjF,UC1BIyoB,KAAO,OACPrnB,QAAU,UACVE,OAAS,UAKAonB,IACTvP,OAASwP,GAAI,mBAAoBC,IAAK,kBACtCpa,MAAQma,GAAI,oBAAqBC,IAAK,kBACtC7yB,KAAO4yB,GAAI,oBAAqBC,IAAK,kBACrClP,QAAUiP,GAAI,mBAAoBC,IAAK,mBAG9BrpB,IAGTC,eAAgB1C,EAAAA,QAAQ,SACpB8N,EAAAA,MAAM,SACF9U,EAAAA,OAAQ+yB,UAAW,qBACjBC,QAAUC,YAAaL,GAA8BF,GAAoBJ,OAAOO,MAEtF/d,EAAAA,MAAM,UACF9U,EAAAA,OAAQ+yB,UAAW,sBACjBC,QAAUE,aAAcN,GAA8BF,GAAoBJ,OAAOQ,OAEvFna,EAAAA,WAAW,qCACPC,EAAAA,QAAQ,SAASua,GAAgBC,oBACrCza,EAAAA,WAAW,kBACPC,EAAAA,QAAQ,SAASua,GAAgBE,uBhBXhCjpB,GACT,GAAImC,GAAAA,eAAwB,4BAEnBlC,GACT,GAAIkC,GAAAA,eAAwB,4BAEhClD,GAAA,SAAAvC,GAuCI,QAAJuC,GACgBvI,EACA8d,EACDlT,EACkC4nB,EACAC,GAL7C,GAAJ72B,GAMQoK,EANRG,KAAA7J,OAAAA,WACgBV,GAAhBoE,WAAgBA,EACApE,EAAhBkiB,kBAAgBA,EACDliB,EAAfgP,gBAAeA,EACkChP,EAAjD42B,WAAiDA,EACA52B,EAAjD62B,WAAiDA,EAf7C72B,EAAJ82B,eAAgDnoB,GAA0BsnB,KAKtEj2B,EAAJuO,sBAA4B,GAAI2L,GAAAA,eAiFhC,MA9FmDxP,GAAnDiC,EAAAvC,GA2BIuC,EAAJhL,UAAAmC,YAAI,WACIpD,KAAKa,WAAY,GAIrBoL,EAAJhL,UAAAwP,sBAAI,SAAyB9L,GAKrB,MAJA3E,MAAKkM,yBACLlM,KAAKq2B,eACLr2B,KAAKs2B,gBAEEt2B,KAAKmM,aAAasE,sBAAsB9L,IAInDsH,EAAJhL,UAAAkP,qBAAI,SAAwBxL,GAKpB,MAJA3E,MAAKkM,yBACLlM,KAAKq2B,eACLr2B,KAAKs2B,gBAEEt2B,KAAKmM,aAAagE,qBAAqBxL,IAIlDsH,EAAJhL,UAAA2P,MAAI,WACS5Q,KAAKa,YACNb,KAAKo2B,eAAiBnoB,GAA0BC,QAChDlO,KAAKwhB,kBAAkB+U,kBAK/BtqB,EAAJhL,UAAA6N,KAAI,WACS9O,KAAKa,YACNb,KAAKo2B,eAAiBnoB,GAA0BG,OAChDpO,KAAKwhB,kBAAkBtf,iBAI/B+J,EAAJhL,UAAAu1B,YAAI,SAAY/yB,GACRzD,KAAK6N,sBAAsBxI,KAAK5B,IAG5BwI,EAAZhL,UAAAo1B,aAAI,WACJ,GAAc/wB,GAAgCtF,KAAKsO,gBAAwB,QAEnEtO,MAAKy2B,oBACDZ,YAAaL,GAA8BlwB,GAAUmwB,GACrDK,aAAcN,GAA8BlwB,GAAUowB,MAItDzpB,EAAZhL,UAAAq1B,cAAI,WACJ,GAAc7zB,GAAuBzC,KAAK0D,WAAWhB,cACvC4C,EAAgCtF,KAAKsO,gBAAwB,QAEnE7L,GAAQi0B,UAAUC,IAAI,0BAA0BrxB,GAE5CtF,KAAKm2B,YACL1zB,EAAQi0B,UAAUC,IAAI;qEAItB1qB,EAAZhL,UAAAiL,uBAAI,WACI,GAAIlM,KAAKmM,aAAajL,cAClB,KAAMkL,OAAM,4FAhHxB3F,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,yBACVwC,SAAJ,0NACIqB,QAAS,imFACTH,gBAAiBC,EAAAA,wBAAwBC,OACzCL,cAAeC,EAAAA,kBAAkBC,KACjCiB,YAAae,GAAsBC,gBACnCxF,MACImC,MAAO,yBACPsD,SAAU,KACVC,KAAM,SACNC,aAAc,OACdC,YAAa,KACbC,WAAY,2FAIZC,iBAAkB,sBAClBC,gBAAiB,+DA3CzBpG,KAAIS,EAAAA,aAHJT,KAAI+E,EAAAA,oBAmBJ/E,KAASqG,KAoDTrG,KAAAsG,QAAAxF,aAAAd,KAASe,EAAAA,OAATb,MAAgBqG,QAChBvG,KAAAsG,QAAAxF,aAAAd,KAASe,EAAAA,OAATb,MAAgBsG,2BAlBhBd,eAAA1F,KAAKyG,EAAAA,UAALvG,MAAewG,EAAAA,oBAyFflB,GA9FmDmB,EAAAA,kBCzC/CC,GAAW,gBAiBX,QAAJC,GACeC,EACCtN,EACDuN,GAHX,GAAJlO,GAAAU,IACeA,MAAfuN,kBAAeA,EACCvN,KAAhBC,WAAgBA,EACDD,KAAfwN,OAAeA,EAXMxN,KAArByN,aAAoC,GAAIC,GAAAA,QAGnB1N,KAArB2N,aAAoC,GAAID,GAAAA,QAUhC1N,KAAK4N,GAAK5N,KAAKwN,OAAOI,IAAM,gBAAgBP,KAC5CrN,KAAKuN,kBAAkBK,GAAK5N,KAAK4N,GAGjCL,EAAkBM,sBAAsBlN,KACpCmN,EAAAA,OACI,SAACrK,GAAU,MAAoB,SAApBA,EAAMsK,WAAwBtK,EAAMuK,UAAYC,GAA0BC,UAEzFC,EAAAA,KAAK,IACPrN,UAAU,WACRxB,EAAKqO,aAAa7J,OAClBxE,EAAKqO,aAAa5J,aAItBwJ,EAAkBM,sBAAsBlN,KACpCmN,EAAAA,OACI,SAACrK,GAAU,MAAoB,SAApBA,EAAMsK,WAAwBtK,EAAMuK,UAAYC,GAA0BG,SAEzFD,EAAAA,KAAK,IACPrN,UAAU,WACRb,EAAWoD,UACX/D,EAAKmO,aAAa3J,KAAKxE,EAAK+O,QAC5B/O,EAAKmO,aAAa1J,aAGjBwJ,EAAkBe,gBAAgBC,cACnCC,EAAAA,MACIvO,EAAWwO,gBACXxO,EAAWyO,gBAAgB/N,KAGvBmN,EAAAA,OAAO,SAACrK,GAAU,MAAAA,GAAMU,UAAYC,EAAAA,WAE1CtD,UAAU,WAAM,MAAAxB,GAAKqP,UA0BnC,MAtBIrB,GAAJrM,UAAA0N,MAAI,SAAMN,GAAN,GAAJ/O,GAAAU,IACaA,MAAKyN,aAAamB,SAEnB5O,KAAKuN,kBAAkBM,sBAAsBlN,KACzCmN,EAAAA,OAAO,SAACrK,GAAU,MAAoB,SAApBA,EAAMsK,YACxBI,EAAAA,KAAK,IACPrN,UAAU,WAAM,MAAAxB,GAAKW,WAAW4O,mBAElC7O,KAAKqO,OAASA,EACdrO,KAAKuN,kBAAkBuB,SAK/BxB,EAAJrM,UAAA8N,YAAI,WACI,MAAO/O,MAAKyN,aAAauB,gBAI7B1B,EAAJrM,UAAAgO,YAAI,WACI,MAAOjP,MAAK2N,aAAaqB,gBAEjC1B,KCtEa4B,GACT,GAAIC,GAAAA,eAAkC,gCAE1CC,GAAA,WAUI,QAAJA,GACgBlP,EACAmP,EACkDC,EAC1BC,GAHxBvP,KAAhBE,QAAgBA,EACAF,KAAhBqP,SAAgBA,EACkDrP,KAAlEsP,eAAkEA,EAC1BtP,KAAxCuP,uBAAwCA,EAZ5BvP,KAAZwP,+BAmKA,MAhKIlO,QAAJ2I,eAAQmF,EAARnO,UAAA,wBAAI,WACI,MAAOjB,MAAKuP,uBAAyBvP,KAAKuP,uBAAuBE,iBAC7DzP,KAAKwP,6DAUbJ,EAAJnO,UAAAmC,YAAI,WAGIpD,KAAK0P,gBAAgB1P,KAAKwP,8BAG9BJ,EAAJnO,UAAA0O,KAAI,SAAiBC,EACApC,GADjB,GAAJlO,GAAAU,KAEc6P,EAAdjK,MACgB5F,KAAKsP,gBAAkB,GAAIxC,IAC5BU,EAGP,IAAIqC,EAAWjC,IAAM5N,KAAK8P,iBAAiBD,EAAWjC,IAClD,KAAMxB,OAAM,sBAAsByD,EAAWjC,GAAzD,qDAGA,IAAc3N,GAAaD,KAAKoC,cAAcyN,GAChCE,EAAY/P,KAAKgQ,gBAAgB/P,EAAY4P,GAC7CI,EAAM,GAAI3C,IAAeyC,EAAW9P,EAAY4P,EAEtD,IAAID,YAAkCM,GAAAA,YAClCH,EAAUI,qBAAqB,GAAIC,GAAAA,eAAkBR,EAAsB,MACvES,UAAWR,EAAWzK,KACtBkL,aAAcL,SAEf,CACf,GAAkBZ,GAAWrP,KAAKuQ,eAAeV,EAAYI,EAAKF,GAChDpL,EAAS,GAAIC,GAAAA,gBAAgBgL,MAAwBtI,GAAW+H,GAChEmB,EAAaT,EAAUU,sBAAsB9L,EAEnDsL,GAAIlL,SAAWyL,EAAWzL,SAO9B,MAJA/E,MAAKyP,iBAAiBiB,KAAKT,GAC3BA,EAAIlB,cAAcjO,UAAU,WAAM,MAAAxB,GAAKqR,oBAAoBV,KAC3DF,EAAUa,QAEHX,GAMXb,EAAJnO,UAAA4P,SAAI,WACI7Q,KAAK0P,gBAAgB1P,KAAKyP,mBAO9BL,EAAJnO,UAAA6O,iBAAI,SAAiBlC,GACb,MAAO5N,MAAKyP,iBAAiBqB,KAAK,SAACC,GAAc,MAAAA,GAAUnD,KAAOA,KAM9DwB,EAAZnO,UAAA+O,gBAAI,SAAwB/P,EAAwBuN,GACpD,GAAcwD,GAAmChR,KAAKiR,oCAAoCzD,GAE5E6B,EAAW,GAAI6B,GAAAA,eAAelR,KAAKqP,SAAU,GAAI8B,WAClDrE,GAAmBU,IACnBR,GAA0BgE,EAAiCI,QAAU,IACrEnE,GAA0B+D,EAAiCI,OAAS,MAGnEC,EAAkB,GAAIzM,GAAAA,gBAAgBqH,OAA+B3E,GAAW+H,EAGtF,OAFkEpP,GAAW6E,OAAOuM,GAEhEtM,UAWhBqK,EAAZnO,UAAAsP,eAAI,SACI/C,EACA8C,EACAgB,GAMR,GAAcC,GAAkB,GAAIJ,WACvBlF,GAA+BqF,IAC/BE,GAAmBhE,EAAOpI,OAC1BkI,GAAgBgD,IAGrB,OAAO,IAAIY,GAAAA,eAAelR,KAAKqP,SAAUkC,IAOrCnC,EAAZnO,UAAAmB,cAAI,SAAsBoL,GAC1B,GAAciE,GAAgB,GAAIC,GAAAA,eACtBC,YAAanE,EAAOmE,YACpBC,cAAe5R,KAAK6R,iBAAiBrE,GACrCsE,SAAU,OACVvR,WAAYiN,EAAOuE,kBACnBvR,eAAgBR,KAAKE,QAAQ8R,iBAAiBC,QAC9C5R,iBAAkBL,KAAKE,QAAQoF,WAAW4M,UAG9C,OAAOlS,MAAKE,QAAQC,OAAOsR,IAGvBrC,EAAZnO,UAAAyO,gBAAI,SAAwByC,GACiBA,EAAWC,UAAxDC,QAEiC9O,QAAQ,SAAC+M,GAC9BA,EAAa3B,WAIbS,EAAZnO,UAAA4Q,iBAAI,SAAyBrE,GAC7B,GAAc8E,GACFtS,KAAKyP,iBAAiBhO,KAAK,SAAC6O,GADxC,MACyDA,GAAa9C,OAAkB,aAEhF,OAAOA,GAAO+E,mBAAqBD,EAAiC,4BAChE,oCAGAlD,EAAZnO,UAAAgQ,oCAAI,SAA4CzD,GACxC,MAAOxN,MAAKyP,iBAAiB3B,OAAO,SAACwC,GAAiB,MAAAA,GAAa9C,OAAOlI,WAAakI,EAAOlI,YAO1F8J,EAAZnO,UAAA0P,oBAAI,SAA4BL,GAChC,GAAckC,GAAQxS,KAAKyP,iBAAiBgD,QAAQnC,EAExCkC,IAAS,GACTxS,KAAKyP,iBAAiBiD,OAAOF,EAAO,mBAlKhD/L,KAACkM,EAAAA,iDAhBDlM,KAASQ,EAAAA,UALTR,KAAImM,EAAAA,WAQJnM,KAA4BqG,GAA5BvF,aAAAd,KA0BSkB,EAAAA,WA1BTlB,KA0BqBe,EAAAA,OA1BrBb,MA0B4BuI,QAC5BzI,KAAgE2I,EAAhE7H,aAAAd,KAASkB,EAAAA,WAATlB,KAAqBoM,EAAAA,cAuJrBzD,KCtLA0D,GAAA,WAaI,QAAJA,GAC2BxC,EACX5M,EACAqP,GAFW/S,KAA3BsQ,aAA2BA,EACXtQ,KAAhB0D,WAAgBA,EACA1D,KAAhB+S,iBAAgBA,EAwBhB,MArBID,GAAJ7R,UAAAiC,SAAI,WAAA,GAAJ5D,GAAAU,IACaA,MAAKsQ,cAON0C,WAAW,WACP1T,EAAKgR,aAAe2C,EAAoB3T,EAAKoE,WAAYpE,EAAKyT,iBAAiBtD,qBAK3FqD,EAAJ7R,UAAAiS,YAAI,SAAYC,GAChB,GAAcC,GAAgBD,EAAQE,kBAAoBF,EAAQG,eAEtDF,KACApT,KAAKsT,gBAAkBF,EAAcG,8BArCjD9M,KAACC,EAAAA,UAADC,OACIC,SAAU,uDACVE,MACI0M,UAAW,sCACXvK,MAAO,qBACPxC,KAAM,kDAZdA,KAAS6G,GAAT/F,aAAAd,KAqBSkB,EAAAA,aAvBTlB,KAA+BS,EAAAA,aAG/BT,KAAS2I,wBAeTkE,kBAAA7M,KAAKqB,EAAAA,MAALnB,MAAW,wBAEX0M,mBAAA5M,KAAKqB,EAAAA,MAALnB,MAAW,uBA6BXmM,KAKAW,GAAA,WAAA,QAAAA,MAkBA,sBAlBAhN,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,sBACVwC,SAAU,wVAUVtC,MACImC,MAAO,6CAIfyK,YAAAjN,KAAKqB,EAAAA,SACL2L,KAKAE,GAAA,WAAA,QAAAA,MAM8B,sBAN9BlN,KAACC,EAAAA,UAADC,OACIC,SAAU,0DACVE,MACImC,MAAO,yBAGf0K,KAKAC,GAAA,WAAA,QAAAA,MAMgC,sBANhCnN,KAACC,EAAAA,UAADC,OACIC,SAAU,gEACVE,MACImC,MAAO,2BAGf2K,KAKAC,GAAA,WAAA,QAAAA,MAMiC,sBANjCpN,KAACC,EAAAA,UAADC,OACIC,SAAU,mEACVE,MACImC,MAAO,4BAGf4K,KCvFAC,GAAA,WAAA,QAAAA,MA2BgC,sBA3BhCrN,KAAC8B,EAAAA,SAAD5B,OACI+B,SACIC,EAAAA,aACAC,EAAAA,cACAmL,EAAAA,aACAC,GACAnI,IAEJhD,WAAYuG,IACZ5G,cACIyD,GACA6G,GACAW,GACAE,GACAC,GACAC,IAEJ9K,iBAAkBkD,IAClBxD,SACIwD,GACA6G,GACAW,GACAE,GACAC,GACAC,QAGRC,KCmBAG,GAAA,WAgDI,QAAJA,GAAwBvQ,EACA7D,EACAqU,GAFAlU,KAAxB0D,WAAwBA,EACA1D,KAAxBH,OAAwBA,EACAG,KAAxBkU,SAAwBA,EAzCXlU,KAAbmU,SAGYnU,KAAZoU,WAAiC,EACrBpU,KAAZqU,YAAkC,EAEtBrU,KAAZsU,YAAkC,EAEbtU,KAArBuU,oBAAmD,EAC9BvU,KAArBwU,aAkLA,MAhLIlT,QAAJ2I,eACQgK,EADRhT,UAAA,iBAKI,WACI,MAAOjB,MAAKyU,gBANhB,SACcrU,GACVJ,KAAKyU,WAAarU,mCAOtBkB,OAAJ2I,eACQgK,EADRhT,UAAA,gBAKI,WACI,MAAOjB,MAAKoU,eANhB,SACa1P,GACT1E,KAAKoU,UAAYM,EAAAA,sBAAsBhQ,oCAO3CpD,OAAJ2I,eACQgK,EADRhT,UAAA,kBAMI,WACI,MAAOjB,MAAKqU,iBAPhB,SACeM,GACnB,GAAcC,GAAOC,EAAAA,qBAAqBF,EAClC3U,MAAKqU,YAAcO,EAAO,EAAIA,EAAO5U,KAAK2U,4CAW9CV,EAAJhT,UAAA6T,QAAI,SAAQC,GACZ,GAAcvC,GAAgBxS,KAAKmU,MAAM/C,OAC3B4D,EAAgBxC,EAAQxS,KAAKuU,oBAC7BK,EAAeG,EAAKE,SAE1BF,GAAKG,SAASF,GAEdhV,KAAKmU,MAAMzD,MACPqE,KAAZA,EACYvC,MAAZA,EACYwC,MAAZA,EACYG,YAAaP,KAIrBX,EAAJhT,UAAAiC,SAAI,WACSlD,KAAKI,YACNJ,KAAKI,UAAjB,cAGQJ,KAAKoV,SAAb,iBAAmDpV,KAAKqV,aAAe,SAAW,QAG9EpB,EAAJhT,UAAAqU,YAAI,SAAY7R,EAAmB8R,EAAuBC,GAAtD,GAAJlW,GAAAU,IACQ,KAAIA,KAAK0E,SAAT,CAIR,GAAc+Q,GAAWzV,KAAKmU,MAAMoB,GACtBG,EAAY1V,KAAKmU,MAAMqB,GAEvBG,GACFvP,EAAG3C,EAAMmS,QACTvP,EAAG5C,EAAMoS,QAGbJ,GAASN,YAAcM,EAASV,KAAKE,UACrCS,EAAUP,YAAcO,EAAUX,KAAKE,UAEvCjV,KAAKmU,MAAM5Q,QAAQ,SAACuS,GAC5B,GAAkBlB,GAAOkB,EAAKf,KAAKE,SACvBa,GAAKf,KAAKgB,cACVD,EAAKf,KAAKiB,QAAQpB,KAGtB5U,KAAKH,OAAOoW,kBAAkB,WAC1B3W,EAAKkV,UAAU9D,KACXpR,EAAK4U,SAASgC,OACV,WACA,UACA,WAAM,MAAA5W,GAAK6W,iBAKvBnW,KAAKH,OAAOoW,kBAAkB,WAC1B3W,EAAKkV,UAAU9D,KACXpR,EAAK4U,SAASgC,OACV,WACA,YACA,SAACjS,GAAkB,MAAA3E,GAAK8W,YAAYnS,EAAG0R,EAAYF,EAAUC,QAKzE1V,KAAKsU,YAAa,IAGtBL,EAAJhT,UAAAoV,WAAI,SAAWtB,GACf,GAAYuB,IAAyB,CAE7BtW,MAAKmU,MAAM1S,KAAK,SAACqU,EAAMtD,GACnB,MAAIsD,GAAKf,OAASA,IACduB,EAAgB9D,GAET,MAMQ,IAAnB8D,GAIJtW,KAAKmU,MAAMzB,OAAO4D,EAAe,IAG7BrC,EAAZhT,UAAAoU,WAAI,WACI,MAAR,aAAerV,KAAKI,WAGR6T,EAAZhT,UAAAmV,YAAI,SAAoB3S,EAAmBkS,EAAoBF,EAAiBC,GACxE,GAAK1V,KAAKsU,aAActU,KAAK0E,SAA7B,CAIR,GAAc6R,IACFnQ,EAAG3C,EAAMmS,QACTvP,EAAG5C,EAAMoS,SAGPW,EAASxW,KAAKqV,aACdM,EAAWtP,EAAIkQ,EAASlQ,EACxBsP,EAAWvP,EAAImQ,EAASnQ,EAExBqQ,EAAkBhB,EAASN,YAAcqB,EACzCE,EAAmBhB,EAAUP,YAAcqB,EAE3CG,EAAkBlB,EAASV,KAAK6B,aAChCC,EAAmBnB,EAAUX,KAAK6B,YAExC,IAAIH,GAAmBE,GAAmBD,GAAoBG,EAAkB,CACxF,GAAkBC,GAAkBrB,EAASN,YAAcwB,CAE/ClB,GAASV,KAAKiB,QAAQW,GACtBjB,EAAUX,KAAKiB,QAAQN,EAAUP,YAAc2B,OACxCL,IAAmB,GAC1BhB,EAASV,KAAKiB,QAAQ,GACtBN,EAAUX,KAAKiB,QAAQN,EAAUP,YAAcM,EAASN,cACjDuB,GAAoB,GAC3BjB,EAASV,KAAKiB,QAAQN,EAAUP,YAAcM,EAASN,aACvDO,EAAUX,KAAKiB,QAAQ,KAEvBP,EAASV,KAAKiB,QAAQS,GACtBf,EAAUX,KAAKiB,QAAQU,MAIvBzC,EAAZhT,UAAAkV,UAAI,WACI,KAAOnW,KAAKwU,UAAUpD,OAAS,GAAG,CAC1C,GAAkB2F,GAAc/W,KAAKwU,UAAUwC,KAE/BD,IACAA,IAIR/W,KAAKsU,YAAa,GAGdL,EAAZhT,UAAAmU,SAAI,SAAiBnQ,EAAyBjC,GACtChD,KAAKkU,SAASkB,SAASpV,KAAK0D,WAAWhB,cAAeuC,EAAUjC,mBAlMxEyD,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,cACVqQ,qBAAqB,EACrBxM,QAAS,qQACTrB,SAAJ,0aACIe,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,+CAlE7C/D,KAAIS,EAAAA,aAEJT,KAAIU,EAAAA,SAEJV,KAAIyQ,EAAAA,+BA4EJ9W,YAAAqG,KAAKqB,EAAAA,QASLpD,WAAA+B,KAAKqB,EAAAA,QASL6M,aAAAlO,KAAKqB,EAAAA,SA8JLmM,KAEAkD,GAAA,WA6CI,QAAJA,GAAwBjD,EACAxQ,GADA1D,KAAxBkU,SAAwBA,EACAlU,KAAxB0D,WAAwBA,EA1CZ1D,KAAZyU,WAAA,WACYzU,KAAZoU,WAAiC,EACrBpU,KAAZoX,OAA6B,EACjBpX,KAAZqX,MAA4B,EA4F5B,MA1FI/V,QAAJ2I,eACQkN,EADRlW,UAAA,iBAKI,WACI,MAAOjB,MAAKyU,gBANhB,SACcrU,GACVJ,KAAKyU,WAAarU,mCAOtBkB,OAAJ2I,eACQkN,EADRlW,UAAA,gBAKI,WACI,MAAOjB,MAAKoU,eANhB,SACa1P,GACT1E,KAAKoU,UAAYM,EAAAA,sBAAsBhQ,oCAO3CpD,OAAJ2I,eACQkN,EADRlW,UAAA,aAKI,WACI,MAAOjB,MAAKoX,YANhB,SACUpC,GACNhV,KAAKoX,OAASvC,EAAAA,qBAAqBG,oCAOvC1T,OAAJ2I,eACQkN,EADRlW,UAAA,YAKI,WACI,MAAOjB,MAAKqX,WANhB,SACSzC,GACL5U,KAAKqX,MAAQxC,EAAAA,qBAAqBD,oCAWtCuC,EAAJlW,UAAAiC,SAAI,WACIlD,KAAKoV,SAAb,SAA4CpV,KAAKsX,UAAUtX,KAAKuX,aACxDvX,KAAKoV,SAAb,aAA+CoC,EAAAA,oBAAoBxX,KAAK4U,OAChE5U,KAAKoV,SAASpV,KAAKqV,aAA3B,SAAA,QAAsFmC,EAAAA,oBAAoBxX,KAAK4U,OACvG5U,KAAKoV,SAAb,QAA2CpV,KAAKgV,OAEnChV,KAAKqV,cACNrV,KAAKoV,SAAjB,SAAgD,QAGpCpV,KAAK0E,UACL1E,KAAKyX,QAAjB,WAAqD,QAI7CzX,KAAKoV,SAAb,iBAAmDpV,KAAKqV,aAAe,MAAQ,WAGnE8B,EAAZlW,UAAAoU,WAAI,WACI,MAAR,aAAerV,KAAKI,WAGR+W,EAAZlW,UAAAqW,UAAI,SAAkBI,GACd,OAAQA,GACJ,IAAZ,WACgB,MAAhB,SACY,KAAZ,WACgB,MAAhB,YACY,KAAZ,aACgB,MAAhB,YACY,SACI,KAAMtL,OAAM,oCAAoCsL,KAIpDP,EAAZlW,UAAAsW,SAAI,WACI,MAAOvX,MAAK0E,SACpB,WACA,aAAc1E,KAAKI,UACnB,WACA,cAGY+W,EAAZlW,UAAAmU,SAAI,SAAiBnQ,EAAyBjC,GACtChD,KAAKkU,SAASkB,SAASpV,KAAK0D,WAAWhB,cAAeuC,EAAUjC,IAG5DmU,EAAZlW,UAAAwW,QAAI,SAAgBE,EAA8B3U,GAC1ChD,KAAKkU,SAAS0D,aAAa5X,KAAK0D,WAAWhB,cAAeiV,EAAW3U,mBAjG7EyD,KAACC,EAAAA,UAADC,OACIC,SAAU,oDA/PdH,KAAIyQ,EAAAA,YAJJzQ,KAAIS,EAAAA,gCA2QJ9G,YAAAqG,KAAKqB,EAAAA,QASLpD,WAAA+B,KAAKqB,EAAAA,QASLkN,QAAAvO,KAAKqB,EAAAA,QASL8M,OAAAnO,KAAKqB,EAAAA,SA+DLqP,KAEAU,GAAA,WAII,QAAJA,GAAwBnU,EACAwQ,EACA4D,GAFA9X,KAAxB0D,WAAwBA,EACA1D,KAAxBkU,SAAwBA,EACAlU,KAAxB8X,SAAwBA,EAyExB,MAvEID,GAAJ5W,UAAA8U,YAAI,WACI/V,KAAKkU,SAAS6D,YAAY/X,KAAK0D,WAAWhB,cAAe,SAG7DmV,EAAJ5W,UAAAiC,SAAI,WACIlD,KAAK8X,SAAShD,QAAQ9U,MAEtBA,KAAK+X,YAAb,aACQ/X,KAAKoV,SAAb,OAA0C,KAE1C,aAAYpV,KAAK8X,SAAS1X,WACdJ,KAAKoV,SAAjB,QAA+C,QACnCpV,KAAK+X,YAAjB,YAEY/X,KAAKoV,SAAjB,SAAgD,QACpCpV,KAAK+X,YAAjB,WAIIF,EAAJ5W,UAAAmC,YAAI,WACIpD,KAAK8X,SAASzB,WAAWrW,OAG7B6X,EAAJ5W,UAAAiU,SAAI,SAASF,GACLhV,KAAKoV,SAAb,QAA2CJ,IAGvC6C,EAAJ5W,UAAA+U,QAAI,SAAQpB,GACZ,GAAcoD,GAAKnD,EAAAA,qBAAqBD,EAChC5U,MAAKoV,SAASpV,KAAKiY,kBAAmBT,EAAAA,oBAAoBQ,KAG9DH,EAAJ5W,UAAAgU,QAAI,WACI,MAAOjV,MAAK0D,WAAWhB,cAAc1C,KAAKkY,0BAG9CL,EAAJ5W,UAAA2V,WAAI,WACJ,GAAcnM,GAAS0N,iBAAiBnY,KAAK0D,WAAWhB,cAEhD,OAAO0V,YAAW3N,EAAOzK,KAAKqY,wBAG1BR,EAAZ5W,UAAAoU,WAAI,WACI,MAAR,aAAerV,KAAK8X,SAAS1X,WAGjByX,EAAZ5W,UAAAoX,mBAAI,WACI,MAAOrY,MAAKqV,aACpB,aACA,YAGYwC,EAAZ5W,UAAAiX,sBAAI,WACI,MAAOlY,MAAKqV,aACpB,eACA,eAGYwC,EAAZ5W,UAAAgX,gBAAI,WACI,MAAOjY,MAAKqV,aACpB,SACA,SAGYwC,EAAZ5W,UAAAmU,SAAI,SAAiBxS,EAAsBI,GACnChD,KAAKkU,SAASkB,SAASpV,KAAK0D,WAAWhB,cAAeE,EAAOI,IAGzD6U,EAAZ5W,UAAA8W,YAAI,SAAoBnV,GAChB5C,KAAKkU,SAAS6D,YAAY/X,KAAK0D,WAAWhB,cAAeE,mBA7EjE6D,KAACC,EAAAA,UAADC,OACIC,SAAU,2DAxWdH,KAAIS,EAAAA,aAIJT,KAAIyQ,EAAAA,YAyWJzQ,KAAkCwN,MAyElC4D,KClbAS,GAAA,WAAA,QAAAA,MAiBA,sBAjBA7R,KAAC8B,EAAAA,SAAD5B,OACI+B,SACIC,EAAAA,aACAkD,IAEJpD,SACI0O,GACAU,GACA5D,IAEJzL,cACI2O,GACAU,GACA5D,QAIRqE,KCHIC,GAAe,EAInBC,GAAA,WACI,QAAJA,GAAuBlP,GAAAtJ,KAAvBsJ,YAAuBA,EACvB,MAAAkP,MAEaC,GAIaC,EAAcC,EAAWnP,EAAcgP,IAAeI,GAAaC,UAE7FC,GAAA,WAAA,QAAAA,MAGA,MAAAA,MAEAC,GAAA,SAAArP,GAgFI,QAAJqP,GAAuBzP,EACC0P,EACAC,EACenP,GAHnC,GAAJxK,GAKQoK,EALRG,KAAA7J,KAKcsJ,IALdtJ,WAAuBV,GAAvBgK,YAAuBA,EACChK,EAAxB0Z,cAAwBA,EACA1Z,EAAxB2Z,mBAAwBA,EAnDX3Z,EAAb4Z,cAAsD,QAE7B5Z,EAAzB6Z,UAA6C,GACf7Z,EAA9B8Z,eAA8D,KAElD9Z,EAAZ+Z,UAAgC,gBAAed,GAGlCjZ,EAAbsO,GAA0BtO,EAAK+Z,UAMlB/Z,EAAbga,KAAmC,KAIvBha,EAAZ8U,WAAiC,EAcrB9U,EAAZia,UAAgC,EAcTja,EAAvBG,OACQ,GAAI+Z,GAAAA,aAyDAla,EAAZma,mBAAiC,aAGrBna,EAAZoa,kBAAgC,SAACC,KAnDzBra,EAAKwK,SAAWhH,SAASgH,IAAa,EAEtCxK,EAAK0Z,cAAcjP,QAAQzK,EAAKgK,YAAY5G,eAAe,KAiEnE,MAhIuCsH,GAAvC+O,EAAArP,GAeIpI,OAAJ2I,eAAQ8O,EAAR9X,UAAA,eAAI,WACI,OAAUjB,KAAK4N,IAAM5N,KAAKqZ,WAAlC,0CASI/X,OAAJ2I,eACQ8O,EADR9X,UAAA,gBAAI,WAEI,MAAOjB,MAAKoU,eAGhB,SAAapR,GACLA,IAAUhD,KAAKoU,YACfpU,KAAKoU,UAAYpR,EACjBhD,KAAKiZ,mBAAmB/W,iDAMhCZ,OAAJ2I,eAAQ8O,EAAR9X,UAAA,eAAI,WACI,MAAOjB,MAAKuZ,cAGhB,SACYvW,GACJA,IAAUhD,KAAKuZ,WACfvZ,KAAKuZ,SAAWvW,EAChBhD,KAAKiZ,mBAAmB/W,iDAmBhC6W,EAAJ9X,UAAAmC,YAAI,WACIpD,KAAKgZ,cAAc9O,eAAelK,KAAKsJ,YAAY5G,gBAGvDqW,EAAJ9X,UAAA2Y,MAAI,WACI5Z,KAAKgZ,cAAca,SAAS7Z,KAAK8Z,cAAcpX,cAAe,aAGlEqW,EAAJ9X,UAAA8Y,gBAAI,WACI,MAAO/Z,MAAKga,SAGhBjB,EAAJ9X,UAAAgZ,oBAAI,SAAoBxW,GAChBA,EAAMyW,mBAGVnB,EAAJ9X,UAAAkZ,mBAAI,WACIna,KAAKiZ,mBAAmB/W,gBAG5B6W,EAAJ9X,UAAAmZ,cAAI,SAAc3W,GACVA,EAAMyW,kBACNla,KAAKqa,oBACLra,KAAKsa,oBAGTvB,EAAJ9X,UAAAsZ,WAAI,SAAWvX,GACPhD,KAAKga,UAAYhX,GAGrB+V,EAAJ9X,UAAAuZ,iBAAI,SAAiBC,GACbza,KAAK0Z,kBAAoBe,GAG7B1B,EAAJ9X,UAAAyZ,kBAAI,SAAkBD,GACdza,KAAKyZ,mBAAqBgB,GAG9B1B,EAAJ9X,UAAA0Z,iBAAI,SAAiBC,GACb5a,KAAK0E,SAAWkW,GASZ7B,EAAZ9X,UAAAoZ,kBAAI,WACIra,KAAKuZ,UAAYvZ,KAAKga,QACtBha,KAAK0Z,kBAAkB1Z,KAAKga,SAC5Bha,KAAKyZ,sBAGDV,EAAZ9X,UAAAqZ,iBAAI,WACJ,GAAc7W,GAAQ,GAAIqV,GAClBrV,GAAMoX,OAAS7a,KACfyD,EAAMuW,QAAUha,KAAKga,QAErBha,KAAK0Z,kBAAkB1Z,KAAKga,SAC5Bha,KAAKP,OAAO4F,KAAK5B,mBAxJzBgD,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,YACVC,SAAU,WACVuC,SAAJ,26BACIqB,QAAS,yzCACT5B,YACKiS,QAASC,EAAAA,kBAAmBC,YAAaC,EAAAA,WAAW,WAAM,MAAAlC,KAAoBmC,OAAO,IAE1F5Q,gBAAiBC,EAAAA,wBAAwBC,OACzCL,cAAeC,EAAAA,kBAAkBC,KACjCK,QAAS,WAAY,QAAS,YAC9B5D,MACImC,MAAO,YACPkS,OAAQ,KACRzO,YAAa,KACb0O,sBAAuB,WACvBC,wBAAyB,YAE7B/P,YACI1B,EAAAA,QAAQ,UACJ8N,EAAAA,MAAM,OAAS9U,EAAAA,OAAQ0Y,KAAM,SAC7B5D,EAAAA,MAAM,QAAS9U,EAAAA,OAAQ0Y,KAAM,SAC7BC,EAAAA,WAAW,iBAAkBC,EAAAA,QAAQ,qDA1DjD/U,KAAIS,EAAAA,aAKJT,KAASoE,EAAAA,eAPTpE,KAA6B+E,EAAAA,oBAyH7B/E,KAAAgV,OAAAlU,aAAAd,KAAiBiV,EAAAA,UAAjB/U,MAA2B,mCAtD3BmT,gBAAArT,KAAKyG,EAAAA,UAALvG,MAAe,WAEfuS,gBAAAzS,KAAKqB,EAAAA,QAELqR,YAAA1S,KAAKqB,EAAAA,MAALnB,MAAW,gBACXyS,iBAAA3S,KAAKqB,EAAAA,MAALnB,MAAW,qBAKXiH,KAAAnH,KAAKqB,EAAAA,QAMLwR,OAAA7S,KAAKqB,EAAAA,QAEL9E,QAAAyD,KAAKqB,EAAAA,QAILpD,WAAA+B,KAAKqB,EAAAA,QAkBLkS,UAAAvT,KAAKqB,EAAAA,QAQLrI,SAAAgH,KAAKmB,EAAAA,UA6ELmR,GAhIuCN,IC3DvCkD,GAAA,WAAA,QAAAA,MAMA,sBANAlV,KAAC8B,EAAAA,SAAD5B,OACI+B,SAAUC,EAAAA,aAAcgD,EAAAA,WAAYqI,IACpCvL,SAAUsQ,IACVvQ,cAAeuQ,QAGnB4C,KpBgCA9W,GAAA,WA2FI,QAAJA,GAAuB+W,GAAA5b,KAAvB4b,IAAuBA,EArEnB5b,KAAJ6b,OAAa,uBACT7b,KAAJ8b,UAA+CC,GAA/C1J,QACIrS,KAAJgc,YAOchc,KAAdkF,gBAAuD,GAAIsU,GAAAA,aAE9CxZ,KAAbgI,kBAAiC,IAEpBhI,KAAbiI,kBAAiC,EAsBrBjI,KAAZic,WAAiC,QAcrBjc,KAAZkc,aAAmC,MAcvBlc,KAAZmc,WAAmD,GAAIC,GAAAA,iBAAyB,GAG3Dpc,KAArBqc,cAAmD,GAAI3O,GAAAA,QAC3C1N,KAAZsc,oBAA0C,EAGlCtc,KAAKwB,mBAAqB+a,GAC1Bvc,KAAKwc,SAAWxc,KAAKmc,WAAWnN,eA6DxC,MArHI1N,QAAJ2I,eACQpF,EADR5D,UAAA,eAAI,WAEI,MAAOjB,MAAKyc,cAEhB,SAAYzZ,GACRhD,KAAK0c,gBAAkB1Z,YAAiBkN,GAAAA,aAEpClQ,KAAK0c,gBACL1c,KAAKyc,SAAWzZ,oCAKxB1B,OAAJ2I,eACQpF,EADR5D,UAAA,iBAAI,WAEI,MAAOjB,MAAKic,gBAEhB,SAAcjZ,GACVhD,KAAKic,WAAajZ,mCAItB1B,OAAJ2I,eACQpF,EADR5D,UAAA,mBAAI,WAEI,MAAOjB,MAAKkc,kBAEhB,SAAgBlZ,GACRA,IAAUhD,KAAKkc,cACflc,KAAKkc,aAAelZ,EACpBhD,KAAK8b,UAAUa,QAAQJ,GAAcvc,KAAKqB,eAClC2B,IACRhD,KAAKkc,aAAe,wCAK5B5a,OAAJ2I,eACQpF,EADR5D,UAAA,iBAAI,WAEI,MAAOjB,MAAKmc,WAAWnZ,WAE3B,SAAcA,GAClB,GAAc4Z,GAAUlI,EAAAA,sBAAsB1R,EAElChD,MAAKmc,WAAWnZ,QAAU4Z,IAC1B5c,KAAKmc,WAAWrY,KAAK8Y,GACrB5c,KAAKkF,gBAAgBG,KAAKuX,qCAclC/X,EAAJ5D,UAAAuD,KAAI,WAAA,GAAJlF,GAAAU,IACYA,MAAK6c,SACLC,aAAa9c,KAAK6c,SAGjB7c,KAAK+c,mBACiB,WAAnB/c,KAAKsE,YACLtE,KAAKsc,oBAAqB,GAE9Btc,KAAKgd,QAAUhK,WAAW,WACtB1T,EAAKM,WAAY,EACjBN,EAAK4F,gBAAgBG,MAAK,GAI1B/F,EAAK4C,gBACNlC,KAAKgI,qBAIhBnD,EAAJ5D,UAAAlB,KAAI,WAAA,GAAJT,GAAAU,IACYA,MAAKgd,SACLF,aAAa9c,KAAKgd,SAGtBhd,KAAK6c,QAAU7J,WAAW,WACtB1T,EAAKM,WAAY,EACjBN,EAAK4F,gBAAgBG,MAAK,GAC1B/F,EAAK+c,cAAcvY,OAInBxE,EAAK4C,gBACNlC,KAAKiI,oBAGZpD,EAAJ5D,UAAAgB,YAAI,WACIjC,KAAKgc,SAAchc,KAAK6b,OAAhC,IAA0C7b,KAAKqB,aAG3CwD,EAAJ5D,UAAA8b,eAAI,WACI,QAAO/c,KAAK0c,gBAAkC,KAAjB1c,KAAK6H,UAAmB7H,KAAK6H,UAI9DhD,EAAJ5D,UAAA+D,YAAI,WACI,MAAOhF,MAAKqc,cAAcrN,gBAG9BnK,EAAJ5D,UAAAiB,aAAI,WACIlC,KAAK4b,IAAI1Z,gBAGb2C,EAAJ5D,UAAAgc,sBAAI,WACQjd,KAAKsc,oBACLtc,KAAKD,uBAvJjB0G,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,uBACV8D,QACI,oBACA,oBACA,UACA,YACA,YACA,eAEJwS,SAAU,mBACV5R,YAAc6R,IACd/T,SAAJ,yPACI6N,qBAAqB,EACrBxM,QAAS,ymEACTN,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,OACzC1D,MACIsW,eAAgB,wEA9DxB3W,KAAI+E,EAAAA,uCA2EJtG,kBAAAuB,KAAKmB,EAAAA,SAELI,oBAAAvB,KAAKqB,EAAAA,QAELG,oBAAAxB,KAAKqB,EAAAA,QAELD,UAAApB,KAAKqB,EAAAA,QAaLxD,YAAAmC,KAAKqB,EAAAA,QASLzG,cAAAoF,KAAKqB,EAAAA,QAcLlI,YAAA6G,KAAKqB,EAAAA,SAiFLjD,KAEa4C,GACT,GAAI0H,GAAAA,eAAsC,8BAQjCrG,IACTgS,QAASrT,GACT4V,MAAOpW,EAAAA,SACPqW,WAAYC,GAUhBvc,GAAA,WAoII,QAAJA,GACgBd,EACAwD,EACA7D,EACA2d,EACAhb,EACoChC,EACxBJ,GANZJ,KAAhBE,QAAgBA,EACAF,KAAhB0D,WAAgBA,EACA1D,KAAhBH,OAAgBA,EACAG,KAAhBwd,iBAAgBA,EACAxd,KAAhBwC,SAAgBA,EACoCxC,KAApDQ,eAAoDA,EACxBR,KAA5BI,UAA4BA,EAlIxBJ,KAAJkE,eAA6B,EACzBlE,KAAJiD,kBAAuB,EACnBjD,KAAJyd,gBAA8B,EAMhBzd,KAAdkF,gBAAgC,GAAIsU,GAAAA,aACxBxZ,KAAZ6D,aAA2B,GAAI6J,GAAAA,QAuBnB1N,KAAZoU,WAAiC,EAkCrBpU,KAAZic,WAAiC,QAcrBjc,KAAZkc,aAAmC,MAwCvBlc,KAAZsD,gBAA8B,GAAIoa,KACb1d,KAArBa,UAAiC,GAAI6M,GAAAA,QAUzB1N,KAAKwB,mBAAqB+a,GAoStC,MA5ZIjb,QAAJ2I,eACQjJ,EADRC,UAAA,eAAI,WAEI,MAAOjB,MAAKyc,cAEhB,SAAYkB,GACR3d,KAAKyc,SAAWkB,EAChB3d,KAAKgC,gBAAgB,UAAW2b,oCAIpCrc,OAAJ2I,eACQjJ,EADRC,UAAA,gBAAI,SACa0c,GACT3d,KAAK6H,QAAU8V,mCAGnBrc,OAAJ2I,eACQjJ,EADRC,UAAA,gBAAI,WAC0B,MAAOjB,MAAKoU,eACtC,SAAapR,GACThD,KAAKoU,UAAYM,EAAAA,sBAAsB1R,GACvChD,KAAKgC,gBAAgB,oBAAqBgB,oCAI9C1B,OAAJ2I,eACQjJ,EADRC,UAAA,yBAAI,WAEI,MAAOjB,MAAK4d,wBAEhB,SAAsB5a,GAClBhD,KAAK4d,mBAAqB5a,EAC1BhD,KAAKgC,gBAAgB,oBAAqBgB,oCAI9C1B,OAAJ2I,eACQjJ,EADRC,UAAA,yBAAI,WAEI,MAAOjB,MAAK6d,wBAEhB,SAAsB7a,GAClBhD,KAAK6d,mBAAqB7a,EAC1BhD,KAAKgC,gBAAgB,oBAAqBgB,oCAI9C1B,OAAJ2I,eACQjJ,EADRC,UAAA,iBAAI,WAEI,MAAOjB,MAAKic,gBAEhB,SAAcjZ,GACNA,GACAhD,KAAKic,WAAajZ,EAClBhD,KAAKgC,gBAAgB,YAAagB,IAElChD,KAAKic,WAAa,yCAK1B3a,OAAJ2I,eACQjJ,EADRC,UAAA,mBAAI,WAEI,MAAOjB,MAAKkc,kBAEhB,SAAgBlZ,GACRA,GACAhD,KAAKkc,aAAelZ,EACpBhD,KAAKgC,gBAAgB,cAAegB,IAEpChD,KAAKkc,aAAe,uCAK5B5a,OAAJ2I,eACQjJ,EADRC,UAAA,sBAAI,WACuB,MAAOjB,MAAK8d,iDACnCxc,OAAJ2I,eAAQjJ,EAARC,UAAA,sBAAI,SAAmB+B,GACfhD,KAAK8d,gBAAkB9a,EAEnBhD,KAAKT,SACLS,KAAKT,QAAQ0C,+CAKrBX,OAAJ2I,eACQjJ,EADRC,UAAA,iBAAI,WAEI,MAAOjB,MAAKmc,gBAEhB,SAAc4B,GAClB,GAAc/a,GAAQ0R,EAAAA,sBAAsBqJ,EACpC/d,MAAKmc,WAAanZ,EAClBhD,KAAKgC,gBAAgB,YAAagB,GAE9BA,EACAhD,KAAKwE,OAELxE,KAAKD,wCAKbuB,OAAJ2I,eACQjJ,EADRC,UAAA,cAAI,WAEI,MAAOjB,MAAKkE,+CAGhB5C,OAAJ2I,eACQjJ,EADRC,UAAA,wBAAI,WAEI,MAAOjB,MAAKyd,gDAkBhBzc,EAAJC,UAAAmB,cAAI,WAAA,GAAJ9C,GAAAU,IACQ,IAAIA,KAAKC,WACL,MAAOD,MAAKC,UAIxB,IAAcK,GAAWN,KAAKE,QAAQoF,WACzB0Y,oBAAoBhe,KAAK0D,YACzBua,sBAAsB,eACtBC,wBAAuB,GACvBC,mBA5JmB,GA6JnBxY,cAAmBoW,GAAhC1J,SAEc+L,EAAsBpe,KAAKwd,iBAC5Ba,4BAA4Bre,KAAK0D,WA4BtC,OA1BApD,GAASge,yBAAyBF,GAElC9d,EAASie,gBAAgB5d,KAAKC,EAAAA,UAAUZ,KAAKa,YAAYC,UAAU,SAACrB;0EAC5DH,EAAKC,UACLD,EAAKE,iBAAiBC,GAClBA,EAAOC,yBAAyBC,kBAAoBL,EAAKC,QAAQK,WAGjEN,EAAKO,OAAOC,IAAI,WAAM,MAAAR,GAAKS,YAKvCC,KAAKC,WAAaD,KAAKE,QAAQC,QAC3BC,UAAWJ,KAAKI,UAChBC,iBAAkBC,EAClBC,WAAY,mBACZC,eAAgBR,KAAKQ,mBAGzBR,KAAKS,iBAELT,KAAKC,WAAWS,cACXC,KAAKC,EAAAA,UAAUZ,KAAKa,YACpBC,UAAU,WAAM,MAAAxB,GAAKyB,WAEnBf,KAAKC,YAGhBe,EAAJC,UAAAF,OAAI,WACQf,KAAKC,YAAcD,KAAKC,WAAWiB,eACnClB,KAAKC,WAAWc,SAGpBf,KAAKT,QAAU,MAGnByB,EAAJC,UAAAzB,iBAAI,SAAiB2B,GAAjB,GAAJ7B,GAAAU,KACYoB,EAAmBpB,KAAKqB,WAC5BC,QAAOC,KAAKvB,KAAKwB,oBAAoBC,KAAK,SAACC,GACvC,MAAIP,GAAOQ,eAAeC,UAAYtC,EAAKkC,mBAAmBE,GAAKE,SAC/DT,EAAOQ,eAAeE,UAAYvC,EAAKkC,mBAAmBE,GAAKG,SAC/DV,EAAOQ,eAAeG,WAAaxC,EAAKkC,mBAAmBE,GAAKI,UAChEX,EAAOQ,eAAeI,WAAazC,EAAKkC,mBAAmBE,GAAKK,WAChEX,EAAmBM,GAEZ,KAKf1B,KAAKgC,gBAAgB,cAAeZ,GAEhCpB,KAAKT,UACLS,KAAKT,QAAQ0C,cACbjC,KAAKT,QAAQ2C,gBAGjBlC,KAAKmC,2BAGTnB,EAAJC,UAAAkB,wBAAI,WAII,GAHKnC,KAAKC,aACND,KAAKC,WAAaD,KAAKoC,iBAEF,UAArBpC,KAAKqB,aAAgD,SAArBrB,KAAKqB,YAAwB,CACzE,GAAkBgB,IACDrC,KAAKC,WAAWqC,eAAeC,aAC5BvC,KAAKwC,SAASC,QAAQC,cAAcH,cAAgB,EACtDI,EAAmB3C,KAAKC,WAAWqC,eAAeM,MAAMC,KAAO,KACrE7C,MAAKC,WAAWqC,eAAeM,MAAMC,IAC9BC,SAASH,EAAiBI,MAAM,MAAM,GAAI,IAAMV,EAAM,EAAzE,OAMIrB,EAAJC,UAAAe,gBAAI,SAAgBN,EAAasB,GACrBhD,KAAKiD,kBAAoBD,GACrBhD,KAAKT,UACLS,KAAKT,QAAQmC,GAAOsB,IAKhChC,EAAJC,UAAAiC,SAAI,WACIlD,KAAKmD,2BAGTnC,EAAJC,UAAAmC,YAAI,WAAA,GAAJ9D,GAAAU,IACYA,MAAKC,YACLD,KAAKC,WAAWoD,UAEpBrD,KAAKsD,gBAAgBC,QAAQ,SAACC,EAAUC,GACpC,MAAAnE,GAAKoE,WAAWhB,cAAciB,oBAAoBF,EAAOD,KAC7DxD,KAAKsD,gBAAgBM,QAErB5D,KAAK6D,aAAaC,OAClB9D,KAAK6D,aAAaE,YAGtB/C,EAAJC,UAAA+C,cAAI,SAAcC,GACNjE,KAAKkE,eAAiBD,EAAEE,UAAYC,EAAAA,QACpCpE,KAAKD,QAIbiB,EAAJC,UAAAoD,eAAI,WACIrE,KAAKD,QAGTiB,EAAJC,UAAAkC,wBAAI,WAAA,GAAJ7D,GAAAU,IAC+B,WAAnBA,KAAKsE,WAELtE,KAAKsD,gBACAiB,IAAI,aAAc,WAAM,MAAAjF,GAAKkF,SAC7BD,IAAI,aAAc,WAAM,MAAAjF,GAAKS,SAC7BwD,QAAQ,SAACC,EAAUC,GAAU,MAAAnE,GAAKoE,WAAWhB,cAAc+B,iBAAiBhB,EAAOD,KAGrE,UAAnBxD,KAAKsE,WAELtE,KAAKsD,gBACAiB,IAAI,QAAS,WAAM,MAAAjF,GAAKkF,SACxBD,IAAI,OAAQ,WAAM,MAAAjF,GAAKS,SACvBwD,QAAQ,SAACC,EAAUC,GAAU,MAAAnE,GAAKoE,WAAWhB,cAAc+B,iBAAiBhB,EAAOD,MAIhGxC,EAAJC,UAAAuD,KAAI,WAAA,GAAJlF,GAAAU,IACQ,KAAKA,KAAK0E,SAAU,CAChB,IAAK1E,KAAKT,QAAS,CAC/B,GAAsBU,GAAaD,KAAKoC,eACxBpC,MAAKe,SAELf,KAAK2E,OAAS3E,KAAK2E,QAAU,GAAIC,GAAAA,gBAAgBC,GAAoB7E,KAAKwC,UAE1ExC,KAAKT,QAAUU,EAAW6E,OAAO9E,KAAK2E,QAAQI,SAC9C/E,KAAKT,QAAQyF,cACRrE,KAAKC,EAAAA,UAAUZ,KAAKa,YACpBC,UAAU,WAAM,MAAAxB,GAAKyB,WAC1Bf,KAAKiD,kBAAmB,GAEpB,UACA,cACA,YACA,oBACA,oBACA,oBACA,iBACA,aAEOM,QAAQ,SAAC0B,GAAa,MAAA3F,GAAK0C,gBAAgBiD,EAAU3F,EAAM2F,MACtEjF,KAAKT,QAAQ2F,gBAAgBvE,KAAKC,EAAAA,UAAUZ,KAAK6D,cAAesB,EAAAA,wBAC3DrE,UAAU,SAACsE,GACR9F,EAAKM,UAAYwF,EACjB9F,EAAK4F,gBAAgBG,KAAKD,GAC1B9F,EAAK4E,cAAgBkB,IAGjCpF,KAAKS,iBACLT,KAAKT,QAAQiF,SAIrBxD,EAAJC,UAAAlB,KAAI,WACQC,KAAKT,SACLS,KAAKT,QAAQQ,QAKrBiB,EAAJC,UAAAR,eAAI,WACST,KAAKC,aACND,KAAKC,WAAaD,KAAKoC,gBAEnC,IAAckD,GACFtF,KAAKC,WAAWsF,YAA4B,iBAC1CC,EAASxF,KAAKyF,YACdvF,EAAUF,KAAK0F,oBAErBJ,GAASK,eACjBC,MAAgBJ,EAAOK,KAAS3F,EAAQ2F,MACxCD,MAAgBJ,EAAOM,SAAa5F,EAAQ4F,aAQxC9E,EAAJC,UAAAwE,UAAI,WACJ,GAEYM,GAFET,EAAWtF,KAAKqB,YAChB2E,GAAShG,KAAKI,WAAsC,QAAzBJ,KAAKI,UAAU4C,KAGhD,IAAiB,QAAbsC,GAAmC,WAAbA,EACtBS,GAAkBnE,QAAS,SAAUC,QAAsB,QAAbyD,EAAqB,MAAQ,cACxE,IACU,QAAbA,GACc,SAAbA,GAAuBU,GACV,UAAbV,IAAyBU,EAC1BD,GAAkBnE,QAAS,QAASC,QAAS,cAC1C,CAAA,KACU,WAAbyD,GACc,UAAbA,GAAwBU,GACX,SAAbV,IAAwBU,GAGzB,KAAMC,GAAiCX,EAFvCS,IAAkBnE,QAAS,MAAOC,QAAS,UAKzC,GAAAqE,GAAdlG,KAAAmG,eAAAJ,EAAAnE,QAAAmE,EAAAlE,QAEQ,QACIgE,KAAME,EACND,UAAWlE,QAJvBsE,EAAAE,EAImCvE,QAJnCqE,EAAAG,KASIrF,EAAJC,UAAAyE,mBAAI,WACJ,GAEYY,GAFEhB,EAAWtF,KAAKqB,YAChB2E,GAAShG,KAAKI,WAAsC,QAAzBJ,KAAKI,UAAU4C,KAGhD,IAAiB,QAAbsC,EACAgB,GAAmBxE,SAAU,SAAUC,SAAU,cAC9C,IAAiB,WAAbuD,EACPgB,GAAmBxE,SAAU,SAAUC,SAAU,WAC9C,IACU,QAAbuD,GACc,SAAbA,GAAuBU,GACV,UAAbV,IAAyBU,EAC1BM,GAAmBxE,SAAU,MAAOC,SAAU,cAC3C,CAAA,KACU,WAAbuD,GACc,UAAbA,GAAwBU,GACX,SAAbV,IAAwBU,GAGzB,KAAMC,GAAiCX,EAFvCgB,IAAmBxE,SAAU,QAASC,SAAU,UAK9C,GAAAmE,GAAdlG,KAAAmG,eAAAG,EAAAxE,SAAAwE,EAAAvE,SAEQ,QACI8D,KAAMS,EACNR,UAAWhE,SAJvBoE,EAAAE,EAIoCrE,SAJpCmE,EAAAG,KASYrF,EAAZC,UAAAkF,eAAI,SAAuBC,EAA4BC,GACvD,GAAYE,GAAgCH,EAChCI,EAA8BH,CAelC,OAdyB,QAArBrG,KAAKqB,aAA8C,WAArBrB,KAAKqB,YACzB,QAANgF,EACAG,EAAO,SACM,WAANH,IACPG,EAAO,OAGD,QAANJ,EACAG,EAAO,QACM,UAANH,IACPG,EAAO,QAIPH,EAAGG,EAAMF,EAAGG,mBA9a5BC,KAACC,EAAAA,UAADC,OACIC,SAAU,wCACVC,SAAU,YACVC,MACIC,YAAa,wBACbC,aAAc,4DA3MtBP,KAAIQ,EAAAA,UArBJR,KAAIS,EAAAA,aAMJT,KAAIU,EAAAA,SAiBJV,KAAIW,EAAAA,mBAXJX,KAAIY,EAAAA,mBAyVJZ,SAAAa,GAAAC,aAAAd,KAASe,EAAAA,OAATb,MAAgBc,QAtVhBhB,KAASiB,EAAAA,eAATH,aAAAd,KAuVSkB,EAAAA,gCA1HTzC,kBAAAuB,KAAKmB,EAAAA,SAGLC,UAAApB,KAAKqB,EAAAA,MAALnB,MAAW,eAUXoB,WAAAtB,KAAKqB,EAAAA,MAALnB,MAAW,aAKXjC,WAAA+B,KAAKqB,EAAAA,MAALnB,MAAW,uBAQXqB,oBAAAvB,KAAKqB,EAAAA,MAALnB,MAAW,uBAUXsB,oBAAAxB,KAAKqB,EAAAA,MAALnB,MAAW,uBAUXrC,YAAAmC,KAAKqB,EAAAA,MAALnB,MAAW,eAcXtF,cAAAoF,KAAKqB,EAAAA,MAALnB,MAAW,iBAcXuB,iBAAAzB,KAAKqB,EAAAA,MAALnB,MAAW,oBAWX/G,YAAA6G,KAAKqB,EAAAA,MAALnB,MAAW,eAiBXwB,SAAA1B,KAAK2B,EAAAA,YAALzB,MAAiB,2BAKjB0B,mBAAA5B,KAAK2B,EAAAA,YAALzB,MAAiB,qBAoTjB3F,KCroBAsH,GAAA,WAAA,QAAAA,MAQA,sBARA7B,KAAC8B,EAAAA,SAAD5B,OACI6B,cAAe3D,GAAoB7D,IACnCyH,SAAU5D,GAAoB7D,IAC9B0H,SAAUC,EAAAA,aAAcC,EAAAA,eACxBC,WAAYC,IACZC,iBAAkBlE,QAGtByD,KCHAU,GAAA,WAAA,QAAAA,MAMuC,sBANvCvC,KAACC,EAAAA,UAADC,OACIC,SAAU,+BACVE,MACImC,MAAO,qCAGfD,KAGAE,GAAA,WAAA,QAAAA,MAWwC,sBAXxCzC,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,2BACVwC,SAAU,iHAKVtC,MACImC,MAAO,iCAGfC,KAGAG,GAAA,WACI,QAAJA,GAAuBC,GAAAtJ,KAAvBsJ,YAAuBA,EACvB,MAAAD,MAEaE,GACPC,EAAcH,IAGpBI,GAAA,SAAAC,GAeI,QAAJD,GACgBhH,EACAkH,EACoBC,GAHhC,GAAJtK,GAKQoK,EALRG,KAAA7J,KAKcyC,IALdzC,WACgBV,GAAhBmD,QAAgBA,EACAnD,EAAhBqK,aAAgBA,EACoBrK,EAApCsK,QAAoCA,EALvBtK,EAAbwK,SAAgC,EASxBxK,EAAKqK,aAAaI,QAAQzK,EAAKmD,QAAQC,eAAe5B,cAU9D,MApB0CkJ,GAA1CP,EAAAC,GAaIpI,OAAJ2I,eAAQR,EAARxI,UAAA,2BAAI,WACI,QAAUjB,KAAK4J,yCAGnBH,EAAJxI,UAAAmC,YAAI,WACIpD,KAAK2J,aAAaO,eAAelK,KAAKyC,QAAQC,+BA9BtD+D,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,sDACVwC,SAAJ,wLACIe,cAAeC,EAAAA,kBAAkBC,KACjCC,gBAAiBC,EAAAA,wBAAwBC,OACzCC,QAAS,+jCACTC,QAAS,YACT5D,MACI6D,kBAAmB,mBACnBC,kBAAmB,6DAlD3BnE,KAAIS,EAAAA,aAKJT,KAASoE,EAAAA,eAETpE,KAASqE,GAATvD,aAAAd,KAoDSkB,EAAAA,WApDTlB,KAoDqBsE,EAAAA,4BALrBjB,WAAArD,KAAKqB,EAAAA,SAmBL2B,GApB0CF,IC/C1CyB,GAAA,WAAA,QAAAA,MAMqC,sBANrCvE,KAACC,EAAAA,UAADC,OACIC,SAAU,0DACVE,MACImC,MAAO,kCAGf+B,KAEAC,GAAA,WAAA,QAAAA,MAMoC,sBANpCxE,KAACC,EAAAA,UAADC,OACIC,SAAU,2BACVE,MACImC,MAAO,iCAGfgC,KAEAC,GAAA,WAcI,QAAJA,GACgBC,GAAAnL,KAAhBmL,GAAgBA,EAHHnL,KAAboL,UAAiC,EAUjC,MAJIF,GAAJjK,UAAAoK,OAAI,WACIrL,KAAKoL,UAAYpL,KAAKoL,SACtBpL,KAAKmL,GAAGjJ,+BApBhBuE,KAAC0C,EAAAA,UAADxC,OACIC,SAAU,qBACV0D,gBAAiBC,EAAAA,wBAAwBC,OACzCpB,SAAJ,6hBACIqB,QAAS,ivBACTN,cAAeC,EAAAA,kBAAkBC,KACjCiB,YACIC,6CA7BR9E,KAAI+E,EAAAA,uCAkCJJ,WAAA3E,KAAKqB,EAAAA,SAULoD,KCpCMO,IACFP,GACAD,GACAxB,GACAT,GACAE,GACA8B,IAGJU,GAAA,WAAA,QAAAA,MAUqC,sBAVrCjF,KAAC8B,EAAAA,SAAD5B,OACI+B,SACIC,EAAAA,aACAgD,EAAAA,WACAC,EAAAA,eACAC,IAEJpD,QAASgD,GACTjD,aAAciD,OAElBC,KC9BaI,GAAU,GAAIC,GAAAA,QAAQ,mvBCHP,8LCKW,6BAGD,kCAIOC,kCAMA,yVCgCH,+BAGD,gCAEQ,g4DCAT,gmFCwCH,gwBCxEK,sBACF,mBACH,sBAGG,+BACE,iCACA,kCACC"}