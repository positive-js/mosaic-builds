{"version":3,"file":"mosaic.umd.min.js","sources":["../../src/lib/select/select.component.ts","../../src/lib/select/select.module.ts","../../src/lib/tooltip/tooltip.component.ts","../../src/lib/tooltip/tooltip.module.ts","../../src/lib/version.ts","../../src/lib/radio/radio.component.ts","../../src/lib/radio/radio.module.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree-selection.ts","../../src/lib/tree/tree.module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/tag/tag.component.ts","../../src/lib/tag/tag.module.ts","../../src/lib/select/select-animations.ts","../../src/lib/modal/modal.component.ts","../../src/lib/modal/css-unit.pipe.ts","../../src/lib/modal/modal.service.ts","../../src/lib/modal/modal.module.ts","../../src/lib/navbar/navbar.component.ts","../../src/lib/navbar/navbar.module.ts","../../src/lib/progress-bar/progress-bar.component.ts","../../src/lib/progress-bar/progress-bar.module.ts","../../src/lib/progress-spinner/progress-spinner.component.ts","../../src/lib/progress-spinner/progress-spinner.module.ts","../../src/lib/list/list-selection.component.ts","../../src/lib/list/list.component.ts","../../src/lib/list/list.module.ts","../../src/lib/link/link.component.ts","../../src/lib/link/link.module.ts","../../src/lib/modal/modal-control.service.ts","../../src/lib/modal/modal-ref.class.ts","../../src/lib/modal/modal-util.ts","../../src/lib/button/button.module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/divider/divider.component.ts","../../src/lib/divider/divider.module.ts","../../src/lib/form-field/cleaner.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field.module.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input.module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/utils/utils.ts","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/option/option.ts","../../src/lib/core/overlay/overlay-position-map.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/core/line/line.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/services/measure-scrollbar.service.ts","../../src/lib/core/option/optgroup.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/core/animation/fade-animations.ts","../../src/lib/icon/icon.component.ts","../../src/lib/icon/icon.module.ts","../../src/lib/button/button.component.ts"],"sourcesContent":["/* tslint:disable:no-empty */\n\nimport { ActiveDescendantKeyManager } from '@ptsecurity/cdk/a11y';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport {\n    DOWN_ARROW,\n    END,\n    ENTER,\n    HOME,\n    LEFT_ARROW,\n    RIGHT_ARROW,\n    SPACE,\n    UP_ARROW,\n    A\n} from '@ptsecurity/cdk/keycodes';\nimport {\n    CdkConnectedOverlay,\n    Overlay,\n    RepositionScrollStrategy,\n    IScrollStrategy,\n    ViewportRuler\n} from '@ptsecurity/cdk/overlay';\n\nimport {\n    AfterContentInit, AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren,\n    Directive,\n    DoCheck,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    isDevMode,\n    NgZone,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    QueryList, Renderer2,\n    Self,\n    SimpleChanges,\n    ViewChild, ViewChildren,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport {\n    _countGroupLabelsBeforeOption,\n    _getOptionScrollPosition,\n    CanDisable,\n    CanDisableCtor,\n    CanUpdateErrorState,\n    CanUpdateErrorStateCtor,\n    ErrorStateMatcher,\n    HasTabIndex, HasTabIndexCtor,\n    MC_OPTION_PARENT_COMPONENT,\n    McOptgroup,\n    McOption,\n    McOptionSelectionChange,\n    mixinDisabled,\n    mixinErrorState,\n    mixinTabIndex\n} from '@ptsecurity/mosaic/core';\n\nimport { McFormField, McFormFieldControl } from '@ptsecurity/mosaic/form-field';\nimport { McTag } from '@ptsecurity/mosaic/tag';\n\n\nimport { defer, merge, Observable, Subject } from 'rxjs';\nimport {\n    filter,\n    map,\n    startWith,\n    switchMap,\n    take,\n    takeUntil,\n    distinctUntilChanged\n} from 'rxjs/operators';\n\nimport {\n    getMcSelectDynamicMultipleError,\n    getMcSelectNonArrayValueError,\n    getMcSelectNonFunctionValueError\n} from './select-errors';\n\nimport { mcSelectAnimations } from './select-animations';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 224;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 1;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\n/* tslint:disable-next-line:no-magic-numbers */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 2;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MC_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-select-scroll-strategy');\n\n/** @docs-private */\nexport function MC_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => RepositionScrollStrategy {\n    return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MC_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MC_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class McSelectChange {\n    constructor(\n        /** Reference to the select that emitted the change event. */\n        public source: McSelect,\n        /** Current value of the select that emitted the event. */\n        public value: any) {\n    }\n}\n\n// Boilerplate for applying mixins to McSelect.\n/** @docs-private */\nexport class McSelectBase {\n    constructor(\n        public _elementRef: ElementRef,\n        public _defaultErrorStateMatcher: ErrorStateMatcher,\n        public _parentForm: NgForm,\n        public _parentFormGroup: FormGroupDirective,\n        public ngControl: NgControl\n    ) {}\n}\n\nexport const _McSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanUpdateErrorStateCtor & typeof McSelectBase\n    = mixinTabIndex(mixinDisabled(mixinErrorState(McSelectBase)));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({ selector: 'mc-select-trigger' })\nexport class McSelectTrigger {}\n\n\n@Component({\n    selector: 'mc-select',\n    exportAs: 'mcSelect',\n    templateUrl: 'select.html',\n    styleUrls: ['./select.css'],\n    inputs: ['disabled', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '[attr.id]': 'id',\n        '[attr.tabindex]': 'tabIndex',\n        class: 'mc-select',\n        '[class.mc-disabled]': 'disabled',\n        '[class.mc-select-invalid]': 'errorState',\n        '[class.mc-select-required]': 'required',\n        '(keydown)': '_handleKeydown($event)',\n        '(focus)': '_onFocus()',\n        '(blur)': '_onBlur()',\n        '(window:resize)': '_calculateHiddenItems()'\n    },\n    animations: [\n        mcSelectAnimations.transformPanel,\n        mcSelectAnimations.fadeInContent\n    ],\n    providers: [\n        { provide: McFormFieldControl, useExisting: McSelect },\n        { provide: MC_OPTION_PARENT_COMPONENT, useExisting: McSelect }\n    ]\n})\nexport class McSelect extends _McSelectMixinBase implements\n    AfterContentInit, AfterViewInit, OnChanges, OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable,\n    HasTabIndex, McFormFieldControl<any>, CanUpdateErrorState {\n\n    /** The last measured value for the trigger's client bounding rect. */\n    _triggerRect: ClientRect;\n\n    /** The cached font-size of the trigger element. */\n    _triggerFontSize = 0;\n\n    /** Deals with the selection logic. */\n    _selectionModel: SelectionModel<McOption>;\n\n    /** Manages keyboard events for options in the panel. */\n    _keyManager: ActiveDescendantKeyManager<McOption>;\n\n    /** The IDs of child options to be passed to the aria-owns attribute. */\n    _optionIds: string = '';\n\n    /** The value of the select panel's transform-origin property. */\n    _transformOrigin: string = 'top';\n\n    /** Whether the panel's animation is done. */\n    _panelDoneAnimating: boolean = false;\n\n    /** Emits when the panel element is finished transforming in. */\n    _panelDoneAnimatingStream = new Subject<string>();\n\n    /** Strategy that will be used to handle scrolling while the select panel is open. */\n    _scrollStrategy = this._scrollStrategyFactory();\n\n    /**\n     * The y-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text.\n     * when the panel opens. Will change based on the y-position of the selected option.\n     */\n    _offsetY = 0;\n\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n    _positions = [\n        {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top'\n        },\n        {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom'\n        }\n    ];\n\n    /** Whether the select is focused. */\n    get focused(): boolean {\n        return this._focused || this._panelOpen;\n    }\n\n    /**\n     * @deprecated Setter to be removed as this property is intended to be readonly.\n     * @breaking-change 8.0.0\n     */\n    set focused(value: boolean) {\n        this._focused = value;\n    }\n\n    /** A name for this control that can be used by `mc-form-field`. */\n    controlType = 'mc-select';\n\n    @ViewChild('trigger') trigger: ElementRef;\n    @ViewChildren(McTag) tags: QueryList<McTag>;\n\n    @ViewChild('panel') panel: ElementRef;\n\n    /** Overlay pane containing the options. */\n    @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n    /** All of the defined select options. */\n    @ContentChildren(McOption, { descendants: true }) options: QueryList<McOption>;\n\n    /** All of the defined groups of options. */\n    @ContentChildren(McOptgroup) optionGroups: QueryList<McOptgroup>;\n\n    /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n    @Input() panelClass: string | string[] | Set<string> | { [key: string]: any };\n\n    /** User-supplied override of the trigger element. */\n    @ContentChild(McSelectTrigger) customTrigger: McSelectTrigger;\n\n    /** Placeholder to be shown if no value has been selected. */\n    @Input()\n    get placeholder(): string {\n        return this._placeholder;\n    }\n\n    set placeholder(value: string) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n\n    /** Whether the component is required. */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n\n    /** Whether the user should be allowed to select multiple options. */\n    @Input()\n    get multiple(): boolean {\n        return this._multiple;\n    }\n\n    set multiple(value: boolean) {\n        if (this._selectionModel) {\n            throw getMcSelectDynamicMultipleError();\n        }\n\n        this._multiple = coerceBooleanProperty(value);\n    }\n\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    @Input()\n    get compareWith() {\n        return this._compareWith;\n    }\n\n    set compareWith(fn: (o1: any, o2: any) => boolean) {\n        /* tslint:disable-next-line:strict-type-predicates */\n        if (typeof fn !== 'function') {\n            throw getMcSelectNonFunctionValueError();\n        }\n\n        this._compareWith = fn;\n\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n\n    /** Value of the select control. */\n    @Input()\n    get value(): any {\n        return this._value;\n    }\n\n    set value(newValue: any) {\n        if (newValue !== this._value) {\n            this.writeValue(newValue);\n            this._value = newValue;\n        }\n    }\n\n    /** Object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Function used to sort the values in a select in multiple mode.\n     * Follows the same logic as `Array.prototype.sort`.\n     */\n    @Input() sortComparator: (a: McOption, b: McOption, options: McOption[]) => number;\n\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n\n    /** Combined stream of all of the child options' change events. */\n    readonly optionSelectionChanges: Observable<McOptionSelectionChange> = defer(() => {\n        if (this.options) {\n            return merge(...this.options.map((option) => option.onSelectionChange));\n        }\n\n        return this._ngZone.onStable\n            .asObservable()\n            .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n    });\n\n    /** Event emitted when the select panel has been toggled. */\n    @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** Event emitted when the select has been opened. */\n    @Output('opened') readonly _openedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => o), map(() => {}));\n\n    /** Event emitted when the select has been closed. */\n    @Output('closed') readonly _closedStream: Observable<void> =\n        this.openedChange.pipe(filter((o) => !o), map(() => {}));\n\n    /** Event emitted when the selected value has been changed by the user. */\n    @Output() readonly selectionChange: EventEmitter<McSelectChange> = new EventEmitter<McSelectChange>();\n\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n    hiddenItems: number = 0;\n\n    /** Whether or not the overlay panel is open. */\n    private _panelOpen = false;\n\n    /** Whether filling out the select is required in the form. */\n    private _required: boolean = false;\n\n    /** The scroll position of the overlay panel, calculated to center the selected option. */\n    private _scrollTop = 0;\n\n    /** The placeholder displayed in the trigger of the select. */\n    private _placeholder: string;\n\n    /** Whether the component is in multiple selection mode. */\n    private _multiple: boolean = false;\n\n    /** Unique id for this input. */\n    private readonly _uid = `mc-select-${nextUniqueId++}`;\n\n    /** Emits whenever the component is destroyed. */\n    private readonly _destroy = new Subject<void>();\n\n    private _focused = false;\n\n    private _value: any;\n\n    private _id: string;\n\n    constructor(\n        private readonly _viewportRuler: ViewportRuler,\n        private readonly _changeDetectorRef: ChangeDetectorRef,\n        private readonly _ngZone: NgZone,\n        private readonly _renderer: Renderer2,\n        _defaultErrorStateMatcher: ErrorStateMatcher,\n        elementRef: ElementRef,\n        @Optional() private readonly _dir: Directionality,\n        @Optional() _parentForm: NgForm,\n        @Optional() _parentFormGroup: FormGroupDirective,\n        @Optional() private readonly _parentFormField: McFormField,\n        @Self() @Optional() public ngControl: NgControl,\n        @Attribute('tabindex') tabIndex: string,\n        @Inject(MC_SELECT_SCROLL_STRATEGY) private readonly _scrollStrategyFactory\n    ) {\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnInit() {\n        this._selectionModel = new SelectionModel<McOption>(this.multiple);\n        this.stateChanges.next();\n\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => {\n                if (this.panelOpen) {\n                    this._scrollTop = 0;\n                    this.openedChange.emit(true);\n                } else {\n                    this.openedChange.emit(false);\n                    this._panelDoneAnimating = false;\n                    this.overlayDir.offsetX = 0;\n                    this._changeDetectorRef.markForCheck();\n                }\n            });\n    }\n\n    ngAfterContentInit() {\n        this._initKeyManager();\n\n        this._selectionModel.onChange!\n            .pipe(takeUntil(this._destroy))\n            .subscribe((event) => {\n                event.added.forEach((option) => option.select());\n                event.removed.forEach((option) => option.deselect());\n            });\n\n        this.options.changes\n            .pipe(startWith(null), takeUntil(this._destroy))\n            .subscribe(() => {\n                this._resetOptions();\n                this._initializeSelection();\n            });\n    }\n\n    ngAfterViewInit(): void {\n        this.tags.changes\n            .subscribe(() => {\n                setTimeout(() => this._calculateHiddenItems(), 0);\n            });\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) { this.updateErrorState(); }\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes.disabled) {\n            this.stateChanges.next();\n        }\n    }\n\n    ngOnDestroy() {\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n    }\n\n    /** `View -> model callback called when value changes` */\n    _onChange: (value: any) => void = () => {};\n\n    /** `View -> model callback called when select has been touched` */\n    _onTouched = () => {};\n\n    /** Toggles the overlay panel open or closed. */\n    toggle(): void {\n        if (this.panelOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n\n    /** Opens the overlay panel. */\n    open(): void {\n        if (this.disabled || !this.options || !this.options.length || this._panelOpen) { return; }\n\n        this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n        // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n        // `parseInt` ignores the trailing 'px' and converts this to a number.\n        this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement)['font-size']);\n\n        this._panelOpen = true;\n        this._keyManager.withHorizontalOrientation(null);\n        this._calculateOverlayPosition();\n        this._highlightCorrectOption();\n        this._changeDetectorRef.markForCheck();\n\n        // Set the font size on the panel element once it exists.\n        this._ngZone.onStable.asObservable()\n            .pipe(take(1))\n            .subscribe(() => {\n                if (this._triggerFontSize && this.overlayDir.overlayRef &&\n                    this.overlayDir.overlayRef.overlayElement) {\n                    this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n                }\n            });\n    }\n\n    /** Closes the overlay panel and focuses the host element. */\n    close(): void {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value: any): void {\n        if (this.options) {\n            this._setSelectionByValue(value);\n        }\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn: (value: any) => void): void {\n        this._onChange = fn;\n    }\n\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn: () => {}): void {\n        this._onTouched = fn;\n    }\n\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n\n    get panelOpen(): boolean {\n        return this._panelOpen;\n    }\n\n    get selected(): McOption | McOption[] {\n        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n    }\n\n    get triggerValue(): string {\n        if (this.empty) { return ''; }\n\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map((option) => option.viewValue);\n\n            if (this._isRtl()) { selectedOptions.reverse(); }\n\n            return selectedOptions.join(', ');\n        }\n\n        return this._selectionModel.selected[0].viewValue;\n    }\n\n    get triggerValues(): McOption[] {\n        if (this.empty) { return []; }\n\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected;\n\n            if (this._isRtl()) { selectedOptions.reverse(); }\n\n            return selectedOptions;\n        }\n\n        return [this._selectionModel.selected[0]];\n    }\n\n    get empty(): boolean {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n\n    _isRtl(): boolean {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n\n    _handleKeydown(event: KeyboardEvent): void {\n        if (!this.disabled) {\n            if (this.panelOpen) {\n                this._handleOpenKeydown(event);\n            } else {\n                this._handleClosedKeydown(event);\n            }\n        }\n    }\n\n    /**\n     * When the panel content is done fading in, the _panelDoneAnimating property is\n     * set so the proper class can be added to the panel.\n     */\n    _onFadeInDone(): void {\n        this._panelDoneAnimating = this.panelOpen;\n        this._changeDetectorRef.markForCheck();\n    }\n\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached(): void {\n        this.overlayDir.positionChange\n            .pipe(take(1))\n            .subscribe(() => {\n                this._changeDetectorRef.detectChanges();\n                this._calculateOverlayOffsetX();\n                this.panel.nativeElement.scrollTop = this._scrollTop;\n            });\n    }\n\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme(): string {\n        return this._parentFormField ? `mc-${this._parentFormField.color}` : '';\n    }\n\n    /** Focuses the select element. */\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number, maxScroll: number): number {\n        const itemHeight = this._getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n\n        /* tslint:disable-next-line:no-magic-numbers */\n        const halfOptionHeight = itemHeight / 2;\n\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n\n    /** Invoked when an option is clicked. */\n    onRemoveMatcherItem(option: McOption, $event): void {\n        $event.stopPropagation();\n\n        option.deselect();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat(): boolean {\n        return this._panelOpen || !this.empty;\n    }\n\n    _calculateHiddenItems(): void {\n        if (this.empty) { return; }\n\n        let visibleItems: number = 0;\n        const totalItemsWidth = this._getTotalItemsWidthInMatcher();\n        let totalVisibleItemsWidth: number = 0;\n        const itemMargin: number = 4;\n\n        this.tags.forEach((tag) => {\n            if (tag.nativeElement.offsetTop < tag.nativeElement.offsetHeight) {\n                totalVisibleItemsWidth += tag.nativeElement.getBoundingClientRect().width + itemMargin;\n                visibleItems++;\n            }\n        });\n\n        this.hiddenItems = (this.selected as ArrayLike<McOption>).length - visibleItems;\n\n        if (this.hiddenItems) {\n            const itemsCounter = this.trigger.nativeElement.querySelector('.mc-select__match-hidden-text');\n            const matcherList = this.trigger.nativeElement.querySelector('.mc-select__match-list');\n\n            const itemsCounterShowed = itemsCounter.offsetTop < itemsCounter.offsetHeight;\n            // const itemsCounterWidth: number = itemsCounter.getBoundingClientRect().width;\n            const itemsCounterWidth: number = 86;\n\n            const matcherListWidth: number = matcherList.getBoundingClientRect().width;\n            const matcherWidth: number = matcherListWidth + itemsCounterWidth;\n\n            if (itemsCounterShowed && (totalItemsWidth < matcherWidth)) { this.hiddenItems = 0; }\n\n            if (\n                totalVisibleItemsWidth === matcherListWidth ||\n                (totalVisibleItemsWidth + itemsCounterWidth) < matcherListWidth\n            ) {\n                this._changeDetectorRef.markForCheck();\n\n                return ;\n            } else if (!itemsCounterShowed && (totalItemsWidth + itemsCounterWidth) > matcherWidth) {\n                this.hiddenItems++;\n            }\n        }\n\n        this._changeDetectorRef.markForCheck();\n    }\n\n    private _getTotalItemsWidthInMatcher(): number {\n        const triggerClone = this.trigger.nativeElement.cloneNode(true);\n        triggerClone.querySelector('.mc-select__match-hidden-text').remove();\n\n        this._renderer.setStyle(triggerClone, 'position', 'absolute');\n        this._renderer.setStyle(triggerClone, 'visibility', 'hidden');\n        this._renderer.setStyle(triggerClone, 'top', '-100%');\n        this._renderer.setStyle(triggerClone, 'left', '0');\n\n        this._renderer.appendChild(this.trigger.nativeElement, triggerClone);\n\n        let totalItemsWidth: number = 0;\n        const itemMargin: number = 4;\n        triggerClone.querySelectorAll('mc-tag').forEach((item) => {\n            totalItemsWidth += item.getBoundingClientRect().width as number + itemMargin;\n        });\n\n        triggerClone.remove();\n\n        return totalItemsWidth;\n    }\n\n    /** Handles keyboard events while the select is closed. */\n    private _handleClosedKeydown(event: KeyboardEvent): void {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n\n        // Open the select on ALT + arrow key to match the native <select>\n        if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        } else if (!this.multiple) {\n            this._keyManager.onKeydown(event);\n        }\n    }\n\n    /** Handles keyboard events when the selected is open. */\n    private _handleOpenKeydown(event: KeyboardEvent): void {\n        /* tslint:disable-next-line */\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const manager = this._keyManager;\n\n        if (keyCode === HOME || keyCode === END) {\n            event.preventDefault();\n\n            if (keyCode === HOME) {\n                manager.setFirstItemActive();\n            } else {\n                manager.setLastItemActive();\n            }\n\n        } else if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n        } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        } else if (this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some((option) => !option.selected);\n            this.options.forEach((option) => {\n                if (hasDeselectedOptions && !option.disabled) {\n                    option.select();\n                } else {\n                    option.deselect();\n                }\n            });\n        } else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n\n            manager.onKeydown(event);\n\n            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n\n    private _initializeSelection(): void {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n        });\n    }\n\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    private _setSelectionByValue(value: any | any[]): void {\n        if (this.multiple && value) {\n            if (!Array.isArray(value)) {\n                throw getMcSelectNonArrayValueError();\n            }\n\n            this._selectionModel.clear();\n            value.forEach((currentValue: any) => this._selectValue(currentValue));\n            this._sortValues();\n        } else {\n            this._selectionModel.clear();\n            const correspondingOption = this._selectValue(value);\n\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.setActiveItem(correspondingOption);\n            }\n        }\n\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    private _selectValue(value: any): McOption | undefined {\n        const correspondingOption = this.options.find((option: McOption) => {\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            } catch (error) {\n                if (isDevMode()) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n\n                return false;\n            }\n        });\n\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n\n        return correspondingOption;\n    }\n\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    private _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager<McOption>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n\n        this._keyManager.tabOut\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            });\n\n        this._keyManager.change\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n                if (this._panelOpen && this.panel) {\n                    this._scrollActiveOptionIntoView();\n                } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n            });\n    }\n\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    private _resetOptions(): void {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n        this.optionSelectionChanges\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe((event) => {\n                this._onSelect(event.source, event.isUserInput);\n\n                if (event.isUserInput && !this.multiple && this._panelOpen) {\n                    this.close();\n                    this.focus();\n                }\n            });\n\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map((option) => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n                this._changeDetectorRef.markForCheck();\n                this.stateChanges.next();\n            });\n\n        this._setOptionIds();\n    }\n\n    /** Invoked when an option is clicked. */\n    private _onSelect(option: McOption, isUserInput: boolean): void {\n        const wasSelected = this._selectionModel.isSelected(option);\n\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            this._propagateChanges(option.value);\n        } else {\n            if (option.selected) {\n                this._selectionModel.select(option);\n            } else {\n                this._selectionModel.deselect(option);\n            }\n\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n\n            if (this.multiple) {\n                this._sortValues();\n\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mc-option`.\n                    this.focus();\n                }\n            }\n        }\n\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n\n        this.stateChanges.next();\n    }\n\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    private _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator ? this.sortComparator(a, b, options) :\n                    options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n\n    /** Emits change event to set the model value. */\n    private _propagateChanges(fallbackValue?: any): void {\n        let valueToEmit: any = null;\n\n        if (this.multiple) {\n            valueToEmit = (this.selected as McOption[]).map((option) => option.value);\n        } else {\n            valueToEmit = this.selected ? (this.selected as McOption).value : fallbackValue;\n        }\n\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(new McSelectChange(this, valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n\n    /** Records option IDs to pass to the aria-owns property. */\n    private _setOptionIds() {\n        this._optionIds = this.options.map((option) => option.id).join(' ');\n    }\n\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    private _highlightCorrectOption(): void {\n        if (this._keyManager) {\n            if (this.empty) {\n                this._keyManager.setFirstItemActive();\n            } else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n\n    /** Scrolls the active option into view. */\n    private _scrollActiveOptionIntoView(): void {\n        const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n        const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options, this.optionGroups);\n\n        this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n            activeOptionIndex + labelCount,\n            this._getItemHeight(),\n            this.panel.nativeElement.scrollTop,\n            SELECT_PANEL_MAX_HEIGHT\n        );\n    }\n\n    /** Gets the index of the provided option in the option list. */\n    private _getOptionIndex(option: McOption): number | undefined {\n        /* tslint:disable-next-line */\n        return this.options.reduce((result: number, current: McOption, index: number) => {\n            /* tslint:disable-next-line:strict-type-predicates */\n            return result === undefined ? (option === current ? index : undefined) : result;\n        }, undefined);\n    }\n\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    private _calculateOverlayPosition(): void {\n        const itemHeight = this._getItemHeight();\n        const items = this._getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n\n        // If no value is selected we open the popup to the first item.\n        let selectedOptionOffset =\n            this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n        selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n            this.optionGroups);\n\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        /* tslint:disable-next-line:no-magic-numbers */\n        const scrollBuffer = panelHeight / 2;\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._offsetY = this._calculateOverlayOffsetY();\n\n        this._checkOverlayWithinViewport(maxScroll);\n    }\n\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    private _calculateOverlayOffsetX(): void {\n        const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const isRtl = this._isRtl();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const paddingWidth = SELECT_PANEL_PADDING_X * 2;\n        let offsetX: number;\n\n        const selected = this._selectionModel.selected[0] || this.options.first;\n        offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n\n        // Invert the offset in LTR.\n        if (!isRtl) { offsetX *= -1; }\n\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n            + (isRtl ? 0 : paddingWidth);\n\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        } else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this.overlayDir.offsetX = Math.round(offsetX);\n        this.overlayDir.overlayRef.updatePosition();\n    }\n\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    private _calculateOverlayOffsetY(): number {\n        // const itemHeight = this._getItemHeight();\n        // const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n\n        // todo I'm not sure that we will use it\n        return 0;\n        // return Math.round(-optionHeightAdjustment);\n    }\n\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    private _checkOverlayWithinViewport(maxScroll: number): void {\n        const itemHeight = this._getItemHeight();\n        const viewportSize = this._viewportRuler.getViewportSize();\n\n        const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable =\n            viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n        const panelHeightTop = Math.abs(this._offsetY);\n        const totalPanelHeight =\n            Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        } else if (panelHeightTop > topSpaceAvailable) {\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        } else {\n            this._transformOrigin = this._getOriginBasedOnOption();\n        }\n    }\n\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this._scrollTop <= 0) {\n            this._scrollTop = 0;\n            this._offsetY = 0;\n            this._transformOrigin = `50% bottom 0px`;\n        }\n    }\n\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number, maxScroll: number) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this._scrollTop >= maxScroll) {\n            this._scrollTop = maxScroll;\n            this._offsetY = 0;\n            this._transformOrigin = `50% top 0px`;\n\n            return;\n        }\n    }\n\n    /** Sets the transform origin point based on the selected option. */\n    private _getOriginBasedOnOption(): string {\n        const itemHeight = this._getItemHeight();\n        /* tslint:disable-next-line:no-magic-numbers */\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        /* tslint:disable-next-line:no-magic-numbers */\n        const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n\n        return `50% ${originY}px 0px`;\n    }\n\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    private _getItemCount(): number {\n        return this.options.length + this.optionGroups.length;\n    }\n\n    /** Calculates the height of the select's options. */\n    private _getItemHeight(): number {\n        /* tslint:disable-next-line:no-magic-numbers */\n        return 32;\n        // return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    private _compareWith = (o1: any, o2: any) => o1 === o2;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { McOptionModule } from '@ptsecurity/mosaic/core';\nimport { McFormFieldModule } from '@ptsecurity/mosaic/form-field';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\nimport { McTagModule } from '@ptsecurity/mosaic/tag';\n\nimport { MC_SELECT_SCROLL_STRATEGY_PROVIDER, McSelect, McSelectTrigger } from './select.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        OverlayModule,\n        McOptionModule,\n        McIconModule,\n        McTagModule\n    ],\n    exports: [McFormFieldModule, McSelect, McSelectTrigger, McOptionModule, CommonModule],\n    declarations: [McSelect, McSelectTrigger],\n    providers: [MC_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class McSelectModule {}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    Directive,\n    ElementRef,\n    EventEmitter,\n    HostBinding,\n    Inject,\n    InjectionToken,\n    Input,\n    NgZone,\n    OnDestroy,\n    OnInit,\n    Optional,\n    Output,\n    TemplateRef,\n    ViewContainerRef,\n    ViewEncapsulation\n} from '@angular/core';\nimport { Directionality } from '@ptsecurity/cdk/bidi';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport {\n    ConnectedOverlayPositionChange,\n    ConnectionPositionPair,\n    Overlay,\n    OverlayRef,\n    ScrollDispatcher,\n    IScrollStrategy,\n    FlexibleConnectedPositionStrategy,\n    IOverlayConnectionPosition,\n    IOriginConnectionPosition,\n    HorizontalConnectionPos,\n    VerticalConnectionPos\n} from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal } from '@ptsecurity/cdk/portal';\nimport {\n    fadeAnimation,\n    DEFAULT_4_POSITIONS,\n    POSITION_MAP\n} from '@ptsecurity/mosaic/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { distinctUntilChanged, takeUntil } from 'rxjs/operators';\n\n\n@Component({\n    selector: 'mc-tooltip',\n    animations: [ fadeAnimation ],\n    templateUrl: './tooltip.component.html',\n    preserveWhitespaces: false,\n    styleUrls: ['./tooltip.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {\n        '(body:click)': 'this._handleBodyInteraction()'\n    }\n})\n\nexport class McToolTipComponent {\n    _prefix = 'mc-tooltip_placement';\n    _positions: ConnectionPositionPair[] = [ ...DEFAULT_4_POSITIONS ];\n    _classMap = {};\n    _placement = 'top';\n    _trigger = 'hover';\n    isTitleString: boolean;\n    visibleSource = new BehaviorSubject<boolean>(false);\n    $visible: Observable<boolean> = this.visibleSource.asObservable();\n    _title: string | TemplateRef<void>;\n    showTId: number;\n    hideTId: number;\n    availablePositions: any;\n\n    @Output() mcVisibleChange: EventEmitter<boolean> = new EventEmitter();\n\n    @Input() mcMouseEnterDelay = 400;\n\n    @Input() mcMouseLeaveDelay = 0;\n\n    @Input()\n    set mcTitle(value: string | TemplateRef<void>) {\n        this.isTitleString = !(value instanceof TemplateRef);\n\n        if (this.isTitleString) {\n            this._title = value;\n        }\n    }\n\n    get mcTitle(): string | TemplateRef<void> {\n        return this._title;\n    }\n\n    @Input()\n    set mcVisible(value: boolean) {\n        const visible = coerceBooleanProperty(value);\n\n        if (this.visibleSource.value !== visible) {\n            this.visibleSource.next(visible);\n            this.mcVisibleChange.emit(visible);\n        }\n    }\n\n    get mcVisible(): boolean {\n        return this.visibleSource.value;\n    }\n\n    @Input()\n    set mcTrigger(value: string) {\n        this._trigger = value;\n    }\n\n    get mcTrigger(): string {\n        return this._trigger;\n    }\n\n    @Input()\n    set mcPlacement(value: string) {\n        if (value !== this._placement) {\n            this._placement = value;\n            this._positions.unshift(POSITION_MAP[ this.mcPlacement ]);\n        } else if (!value) {\n            this._placement = 'top';\n        }\n    }\n    get mcPlacement(): string {\n        return this._placement;\n    }\n\n    /** Subject for notifying that the tooltip has been hidden from the view */\n    private readonly _onHide: Subject<any> = new Subject();\n    private _closeOnInteraction: boolean = false;\n\n    constructor(public cdr: ChangeDetectorRef) {\n        this.availablePositions = POSITION_MAP;\n    }\n\n    show(): void {\n        if (this.hideTId) {\n            clearTimeout(this.hideTId);\n        }\n\n        if (!this.isContentEmpty()) {\n            this._closeOnInteraction = true;\n            this.showTId = setTimeout(() => {\n                this.mcVisible = true;\n                this.mcVisibleChange.emit(true);\n\n                // Mark for check so if any parent component has set the\n                // ChangeDetectionStrategy to OnPush it will be checked anyways\n                this._markForCheck();\n            }, this.mcMouseEnterDelay);\n        }\n    }\n\n    hide(): void {\n        if (this.showTId) {\n            clearTimeout(this.showTId);\n        }\n\n        this.hideTId = setTimeout(() => {\n            this.mcVisible = false;\n            this.mcVisibleChange.emit(false);\n            this._onHide.next();\n\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this._markForCheck();\n        }, this.mcMouseLeaveDelay);\n    }\n\n    setClassMap(): void {\n        this._classMap = {\n            [ `${this._prefix}-${this._placement}` ]: true\n        };\n    }\n\n    isContentEmpty(): boolean {\n        return this.isTitleString ? (this.mcTitle === '' || !this.mcTitle) : false;\n    }\n\n    /** Returns an observable that notifies when the tooltip has been hidden from view. */\n    afterHidden(): Observable<void> {\n        return this._onHide.asObservable();\n    }\n\n    _markForCheck(): void {\n        this.cdr.markForCheck();\n    }\n\n    _handleBodyInteraction(): void {\n        if (this._closeOnInteraction) {\n            this.hide();\n        }\n    }\n}\n\nexport const MC_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => IScrollStrategy>('mc-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MC_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => IScrollStrategy {\n    return () => overlay.scrollStrategies.reposition({scrollThrottle: 20});\n}\n\n/** @docs-private */\nexport const MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MC_TOOLTIP_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MC_TOOLTIP_SCROLL_STRATEGY_FACTORY\n};\n\n/** Creates an error to be thrown if the user supplied an invalid tooltip position. */\nexport function getMcTooltipInvalidPositionError(position: string) {\n    return Error(`McTooltip position \"${position}\" is invalid.`);\n}\n\nconst VIEWPORT_MARGIN: number = 8;\n\n@Directive({\n    selector: '[mc-tooltip]',\n    host: {\n        '(keydown)': 'handleKeydown($event)',\n        '(touchend)': 'handleTouchend()'\n    }\n})\n\nexport class McTooltipDirective implements OnInit, OnDestroy {\n    isTooltipOpen: boolean = false;\n    isDynamicTooltip = false;\n    parentDisabled: boolean = false;\n    _title: string;\n    _disabled: boolean = false;\n    _mouseEnterDelay: number;\n    _mouseLeaveDelay: number;\n    _visible: boolean;\n    _trigger: string = 'hover';\n    _placement: string = 'top';\n    _overlayRef: OverlayRef | null;\n    _portal: ComponentPortal<McToolTipComponent>;\n    availablePositions: any;\n    tooltip: McToolTipComponent | null;\n\n    @Output() mcVisibleChange = new EventEmitter<boolean>();\n    private $unsubscribe = new Subject<void>();\n\n    @Input('mc-tooltip')\n    set mcTitle(title: string) {\n        this._title = title;\n        this.updateCompValue('mcTitle', title);\n    }\n\n    get mcTitle(): string {\n        return this._title;\n    }\n\n    @Input('mcTitle')\n    set setTitle(title: string) {\n        this.mcTitle = title;\n    }\n\n    @Input('mcTooltipDisabled')\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    @Input('mcMouseEnterDelay')\n    set mcMouseEnterDelay(value: number) {\n        this._mouseEnterDelay = value;\n        this.updateCompValue('mcMouseEnterDelay', value);\n    }\n\n    get mcMouseEnterDelay(): number {\n        return this._mouseEnterDelay;\n    }\n\n    @Input('mcMouseLeaveDelay')\n    set mcMouseLeaveDelay(value: number) {\n        this._mouseLeaveDelay = value;\n        this.updateCompValue('mcMouseLeaveDelay', value);\n    }\n\n    get mcMouseLeaveDelay(): number {\n        return this._mouseEnterDelay;\n    }\n\n    @Input('mcVisible')\n    set mcVisible(value: boolean) {\n        this._visible = value;\n        this.updateCompValue('mcVisible', value);\n    }\n\n    get mcVisible(): boolean {\n        return this._visible;\n    }\n\n    @Input('mcTrigger')\n    set mcTrigger(value: string) {\n        this._trigger = value;\n        this.updateCompValue('mcTrigger', value);\n    }\n\n    get mcTrigger(): string {\n        return this._trigger;\n    }\n\n    @Input('mcPlacement')\n    set mcPlacement(value: string) {\n        if (value) {\n            this._placement = value;\n            this.updateCompValue('mcPlacement', value);\n        } else {\n            this._placement = 'top';\n        }\n    }\n\n    get mcPlacement(): string {\n        return this._placement;\n    }\n\n    @HostBinding('class.mc-tooltip-open')\n    get isOpen(): boolean {\n        return this.isTooltipOpen;\n    }\n\n    @HostBinding('class.disabled')\n    get isParentDisabled(): boolean {\n        return this.parentDisabled;\n    }\n\n    private manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n    private readonly _destroyed = new Subject<void>();\n\n    constructor(\n        private _overlay: Overlay,\n        private elementRef: ElementRef,\n        private _ngZone: NgZone,\n        private _scrollDispatcher: ScrollDispatcher,\n        private hostView: ViewContainerRef,\n        @Inject(MC_TOOLTIP_SCROLL_STRATEGY) private _scrollStrategy,\n        @Optional() private _dir: Directionality) {\n            this.availablePositions = POSITION_MAP;\n        }\n\n    /** Create the overlay config and position strategy */\n    _createOverlay(): OverlayRef {\n        if (this._overlayRef) {\n            return this._overlayRef;\n        }\n\n        // Create connected position strategy that listens for scroll events to reposition.\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this.elementRef)\n            .withTransformOriginOn('.mc-tooltip')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(VIEWPORT_MARGIN)\n            .withPositions([ ...DEFAULT_4_POSITIONS ]);\n\n        const scrollableAncestors = this._scrollDispatcher\n            .getAncestorScrollContainers(this.elementRef);\n\n        strategy.withScrollableContainers(scrollableAncestors);\n\n        strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe((change) => {\n            if (this.tooltip) {\n                this.onPositionChange(change);\n                if (change.scrollableViewProperties.isOverlayClipped && this.tooltip.mcVisible) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the tooltip.\n                    this._ngZone.run(() => this.hide());\n                }\n            }\n        });\n\n        this._overlayRef = this._overlay.create({\n            direction: this._dir,\n            positionStrategy: strategy,\n            panelClass: 'mc-tooltip-panel',\n            scrollStrategy: this._scrollStrategy()\n        });\n\n        this._updatePosition();\n\n        this._overlayRef.detachments()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => this._detach());\n\n        return this._overlayRef;\n    }\n\n    _detach() {\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n\n        this.tooltip = null;\n    }\n\n    onPositionChange($event: ConnectedOverlayPositionChange): void {\n        let updatedPlacement = this.mcPlacement;\n        Object.keys(this.availablePositions).some((key) => {\n            if ($event.connectionPair.originX === this.availablePositions[key].originX &&\n                $event.connectionPair.originY === this.availablePositions[key].originY &&\n                $event.connectionPair.overlayX === this.availablePositions[key].overlayX &&\n                $event.connectionPair.overlayY === this.availablePositions[key].overlayY) {\n                updatedPlacement = key;\n\n                return true;\n            }\n\n            return false;\n        });\n        this.updateCompValue('mcPlacement', updatedPlacement);\n\n        if (this.tooltip) {\n            this.tooltip.setClassMap();\n        }\n\n        this.handlePositioningUpdate();\n    }\n\n    handlePositioningUpdate() {\n        if (!this._overlayRef) {\n            this._overlayRef = this._createOverlay();\n        }\n        if (this.mcPlacement === 'right' || this.mcPlacement === 'left') {\n            const pos =\n                (this._overlayRef.overlayElement.clientHeight -\n                    this.hostView.element.nativeElement.clientHeight) / 2; // tslint:disable-line\n            const currentContainer = this._overlayRef.overlayElement.style.top || '0px';\n            this._overlayRef.overlayElement.style.top =\n                `${parseInt(currentContainer.split('px')[0], 10) + pos - 1}px`;\n            // TODO: обновлять положение стрелки\\указателя\\\"дятла\"\n        }\n    }\n\n    // tslint:disable-next-line:no-any\n    updateCompValue(key: string, value: any): void {\n        if (this.isDynamicTooltip && value) {\n            if (this.tooltip) {\n                this.tooltip[key] = value;\n            }\n        }\n    }\n\n    ngOnInit(): void {\n        if (this.mcTrigger === 'hover') {\n\n            this.manualListeners\n                .set('mouseenter', () => this.show())\n                .set('mouseleave', () => this.hide())\n                .forEach((listener, event) => this.elementRef.nativeElement.addEventListener(event, listener));\n        }\n\n        if (this.mcTrigger === 'focus') {\n\n            this.manualListeners\n                .set('focus', () => this.show())\n                .set('blur', () => this.hide())\n                .forEach((listener, event) => this.elementRef.nativeElement.addEventListener(event, listener));\n        }\n    }\n\n    ngOnDestroy(): void {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n        }\n        this.manualListeners.forEach((listener, event) =>\n            this.elementRef.nativeElement.removeEventListener(event, listener));\n        this.manualListeners.clear();\n\n        this.$unsubscribe.next();\n        this.$unsubscribe.complete();\n    }\n\n    handleKeydown(e: KeyboardEvent) {\n        if (this.isTooltipOpen && e.keyCode === ESCAPE) { // tslint:disable-line\n            this.hide();\n        }\n    }\n\n    handleTouchend() {\n        this.hide();\n    }\n\n    /** Updates the position of the current tooltip. */\n    _updatePosition() {\n        if (!this._overlayRef) {\n            this._overlayRef = this._createOverlay();\n        }\n        const position =\n            this._overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n        const origin = this._getOrigin();\n        const overlay = this._getOverlayPosition();\n\n        position.withPositions([\n            {...origin.main, ...overlay.main},\n            {...origin.fallback, ...overlay.fallback}\n        ]);\n    }\n\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     */\n    _getOrigin(): {main: IOriginConnectionPosition; fallback: IOriginConnectionPosition} {\n        const position = this.mcPlacement;\n        const isLtr = !this._dir || this._dir.value === 'ltr';\n        let originPosition: IOriginConnectionPosition;\n\n        if (position === 'top' || position === 'bottom') {\n            originPosition = {originX: 'center', originY: position === 'top' ? 'top' : 'bottom'};\n        } else if (\n            position === 'top' ||\n            (position === 'left' && isLtr) ||\n            (position === 'right' && !isLtr)) {\n            originPosition = {originX: 'start', originY: 'center'};\n        } else if (\n            position === 'bottom' ||\n            (position === 'right' && isLtr) ||\n            (position === 'left' && !isLtr)) {\n            originPosition = {originX: 'end', originY: 'center'};\n        } else {\n            throw getMcTooltipInvalidPositionError(position);\n        }\n\n        const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n        return {\n            main: originPosition,\n            fallback: {originX: x, originY: y}\n        };\n    }\n\n    /** Returns the overlay position and a fallback position based on the user's preference */\n    _getOverlayPosition(): {main: IOverlayConnectionPosition; fallback: IOverlayConnectionPosition} {\n        const position = this.mcPlacement;\n        const isLtr = !this._dir || this._dir.value === 'ltr';\n        let overlayPosition: IOverlayConnectionPosition;\n\n        if (position === 'top') {\n            overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n        } else if (position === 'bottom') {\n            overlayPosition = {overlayX: 'center', overlayY: 'top'};\n        } else if (\n            position === 'top' ||\n            (position === 'left' && isLtr) ||\n            (position === 'right' && !isLtr)) {\n            overlayPosition = {overlayX: 'end', overlayY: 'center'};\n        } else if (\n            position === 'bottom' ||\n            (position === 'right' && isLtr) ||\n            (position === 'left' && !isLtr)) {\n            overlayPosition = {overlayX: 'start', overlayY: 'center'};\n        } else {\n            throw getMcTooltipInvalidPositionError(position);\n        }\n\n        const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n        return {\n            main: overlayPosition,\n            fallback: {overlayX: x, overlayY: y}\n        };\n    }\n\n    /** Inverts an overlay position. */\n    private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n        let newX: HorizontalConnectionPos = x;\n        let newY: VerticalConnectionPos = y;\n        if (this.mcPlacement === 'top' || this.mcPlacement === 'bottom') {\n            if (y === 'top') {\n                newY = 'bottom';\n            } else if (y === 'bottom') {\n                newY = 'top';\n            }\n        } else {\n            if (x === 'end') {\n                newX = 'start';\n            } else if (x === 'start') {\n                newX = 'end';\n            }\n        }\n\n        return {x: newX, y: newY};\n    }\n\n    private show(): void {\n        if (!this.disabled) {\n            if (!this.tooltip) {\n                const overlayRef = this._createOverlay();\n                this._detach();\n                this._portal = this._portal || new ComponentPortal(McToolTipComponent, this.hostView);\n                this.tooltip = overlayRef.attach(this._portal).instance;\n                this.tooltip.afterHidden()\n                    .pipe(takeUntil(this._destroyed))\n                    .subscribe(() => this._detach());\n                this.isDynamicTooltip = true;\n                const properties = [\n                    'mcTitle',\n                    'mcMouseEnterDelay',\n                    'mcMouseLeaveDelay',\n                    'mcVisible',\n                    'mcTrigger',\n                    'mcPlacement' ];\n                properties.forEach((property) => this.updateCompValue(property, this[ property ]));\n                this.tooltip.mcVisibleChange.pipe(takeUntil(this.$unsubscribe), distinctUntilChanged())\n                    .subscribe((data) => {\n                        this._visible = data;\n                        this.mcVisibleChange.emit(data);\n                    });\n            }\n            this._updatePosition();\n            this.tooltip.show();\n            this.isTooltipOpen = true;\n        }\n    }\n\n    private hide(): void {\n        if (this.tooltip) {\n            this.tooltip.hide();\n            this.isTooltipOpen = false;\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\n\nimport {\n    McToolTipComponent,\n    McTooltipDirective,\n    MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER\n} from './tooltip.component';\n\n\n@NgModule({\n    declarations: [ McToolTipComponent, McTooltipDirective ],\n    exports: [ McToolTipComponent, McTooltipDirective ],\n    imports: [ BrowserAnimationsModule, CommonModule, OverlayModule ],\n    providers: [MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],\n    entryComponents: [ McToolTipComponent ]\n})\nexport class McToolTipModule {\n}\n","import { Version } from '@angular/core';\n\n\nexport const VERSION = new Version('0.0.1-ff07af5');\n","import {\n    AfterContentInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, ContentChildren, Directive, ElementRef, EventEmitter, forwardRef,\n    Input, OnDestroy, OnInit, Optional, Output, QueryList,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { UniqueSelectionDispatcher } from '@ptsecurity/cdk/collections';\n\nimport {\n    CanColor, CanColorCtor,\n    CanDisable,\n    HasTabIndex, HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/** Change event object emitted by McRadio. */\nexport class McRadioChange {\n    constructor(\n        /** The McRadioButton that emits the change event. */\n        public source: McRadioButton,\n        /** The value of the McRadioButton. */\n        public value: any) {}\n}\n\n// Boilerplate for applying mixins to McRadioGroup.\n/** @docs-private */\nexport class McRadioGroupBase {}\nexport const _McRadioGroupMixinBase = mixinDisabled(McRadioGroupBase);\n\n/**\n * Provider Expression that allows mc-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McRadioGroup),\n    multi: true\n};\n\n@Directive({\n    selector: 'mc-radio-group',\n    exportAs: 'mcRadioGroup',\n    providers: [MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n    host: {\n        role: 'radiogroup',\n        class: 'mc-radio-group'\n    },\n    inputs: ['disabled']\n})\nexport class McRadioGroup extends _McRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    @Input()\n    get name(): string { return this._name; }\n    set name(value: string) {\n        this._name = value;\n        this.updateRadioButtonNames();\n    }\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this.markRadiosForCheck();\n    }\n\n    /** Value of the radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(newValue: any) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n\n            this.updateSelectedRadioFromValue();\n            this.checkSelectedRadioButton();\n        }\n    }\n\n    /** Whether the radio button is selected. */\n    @Input()\n    get selected() { return this._selected; }\n    set selected(selected: McRadioButton | null) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this.checkSelectedRadioButton();\n    }\n\n    /** Whether the radio group is disabled */\n    @Input()\n    get disabled(): boolean { return this._disabled; }\n    set disabled(value) {\n        this._disabled = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /** Whether the radio group is required */\n    @Input()\n    get required(): boolean { return this._required; }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n        this.markRadiosForCheck();\n    }\n\n    /**\n     * Event emitted when the group value changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * a radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** Child radio buttons. */\n    @ContentChildren(forwardRef(() => McRadioButton), { descendants: true })\n    _radios: QueryList<McRadioButton>;\n\n    /**\n     * Selected value for group. Should equal the value of the selected radio button if there *is*\n     * a corresponding radio button with a matching value. If there is *not* such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    private _value: any = null;\n\n    /** The HTML name attribute applied to radio buttons in this group. */\n    private _name: string = `mc-radio-group-${nextUniqueId++}`;\n\n    /** The currently selected radio button. Should match value. */\n    private _selected: McRadioButton | null = null;\n\n    /** Whether the `value` has been set to its initial value. */\n    private _isInitialized: boolean = false;\n\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    private _labelPosition: 'before' | 'after' = 'after';\n\n    /** Whether the radio group is disabled. */\n    private _disabled: boolean = false;\n\n    /** Whether the radio group is required. */\n    private _required: boolean = false;\n\n    constructor(\n        private readonly _changeDetector: ChangeDetectorRef\n    ) {\n        super();\n    }\n\n    /** The method to be called in order to update ngModel */\n    // tslint:disable-next-line\n    controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n    /**\n     * onTouch function registered via registerOnTouch (ControlValueAccessor).\n     * @docs-private\n     */\n    // tslint:disable-next-line\n    onTouched: () => any = () => {};\n\n    checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on McRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the McRadioGroup.\n        this._isInitialized = true;\n    }\n\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n\n    /** Dispatch change event with current selection and group value. */\n    emitChangeEvent(): void {\n        if (this._isInitialized) {\n            this.change.emit(new McRadioChange(this._selected!, this._value));\n        }\n    }\n\n    markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach((radio) => radio.markForCheck());\n        }\n    }\n\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     */\n    writeValue(value: any) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn: (value: any) => void) {\n        this.controlValueAccessorChangeFn = fn;\n    }\n\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn: any) {\n        this.onTouched = fn;\n    }\n\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n\n    private updateRadioButtonNames(): void {\n        if (this._radios) {\n            this._radios.forEach((radio) => {\n                radio.name = this.name;\n            });\n        }\n    }\n\n    /** Updates the `selected` radio button from the internal _value state. */\n    private updateSelectedRadioFromValue(): void {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n        if (this._radios != null && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach((radio) => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n}\n\n\n// Boilerplate for applying mixins to McRadioButton.\n/** @docs-private */\nexport class McRadioButtonBase {\n    // Since the disabled property is manually defined for the McRadioButton and isn't set up in\n    // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n    // defined to properly work.\n    disabled: boolean;\n\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McRadioButtonMixinBase:\n    CanColorCtor &\n    HasTabIndexCtor &\n    typeof McRadioButtonBase =\n        mixinColor(mixinTabIndex(McRadioButtonBase));\n\n\n@Component({\n    selector: 'mc-radio-button',\n    templateUrl: 'radio.component.html',\n    styleUrls: ['radio.css'],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    exportAs: 'mcRadioButton',\n    host: {\n        class: 'mc-radio-button',\n        '[attr.id]': 'id',\n        '[class.mc-radio-checked]': 'checked',\n        '[class.mc-radio-disabled]': 'disabled',\n        '(focus)': '_inputElement.nativeElement.focus()'\n    }\n})\nexport class McRadioButton extends _McRadioButtonMixinBase\n    implements OnInit, OnDestroy, CanColor, HasTabIndex {\n\n    private readonly _uniqueId: string = `mc-radio-${++nextUniqueId}`;\n\n    /* tslint:disable:member-ordering */\n\n    /** The unique ID for the radio button. */\n    @Input() id: string = this._uniqueId;\n\n    /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n    @Input() name: string;\n\n    /** Used to set the 'aria-label' attribute on the underlying input element. */\n    @Input('aria-label') ariaLabel: string;\n\n    /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n    @Input('aria-labelledby') ariaLabelledby: string;\n\n    /** The 'aria-describedby' attribute is read after the element's label and field type. */\n    @Input('aria-describedby') ariaDescribedby: string;\n\n    /** Whether this radio button is checked. */\n    @Input()\n    get checked(): boolean { return this._checked; }\n    set checked(value: boolean) {\n        const newCheckedState = toBoolean(value);\n\n        if (this._checked !== newCheckedState) {\n            this._checked = newCheckedState;\n\n            if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n\n            if (newCheckedState) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** The value of this radio button. */\n    @Input()\n    get value(): any { return this._value; }\n    set value(value: any) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup != null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n\n    /** Whether the radio button is disabled. */\n    @Input()\n    get disabled(): boolean {\n        return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);\n    }\n    set disabled(value: boolean) {\n        const newDisabledState = toBoolean(value);\n\n        if (this._disabled !== newDisabledState) {\n\n            this._disabled = newDisabledState;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    /** Whether the radio button is required. */\n    @Input()\n    get required(): boolean {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    @Input()\n    get labelPosition(): 'before' | 'after' {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    private _labelPosition: 'before' | 'after';\n\n    /** The native `<input type=radio>` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Event emitted when the checked state of this radio button changes.\n     * Change events are only emitted when the value changes due to user interaction with\n     * the radio button (the same behavior as `<input type-\"radio\">`).\n     */\n    @Output() readonly change: EventEmitter<McRadioChange> = new EventEmitter<McRadioChange>();\n\n    /** The parent radio group. May or may not be present. */\n    radioGroup: McRadioGroup;\n\n    @Input()\n    isFocused: boolean = false;\n\n    /** ID of the native input element inside `<mc-radio-button>` */\n    get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n    /** Whether this radio is checked. */\n    private _checked: boolean = false;\n\n    /** Whether this radio is disabled. */\n    private _disabled: boolean;\n\n    /** Whether this radio is required. */\n    private _required: boolean;\n\n    /** Value assigned to this radio. */\n    private _value: any = null;\n\n    /** Unregister function for _radioDispatcher */\n    // tslint:disable-next-line\n    private readonly removeUniqueSelectionListener: () => void = () => {};\n\n    constructor(\n        @Optional() radioGroup: McRadioGroup,\n        elementRef: ElementRef,\n        private readonly _changeDetector: ChangeDetectorRef,\n        private readonly _radioDispatcher: UniqueSelectionDispatcher\n    ) {\n\n        super(elementRef);\n\n        this.radioGroup = radioGroup;\n\n        this.removeUniqueSelectionListener =\n            _radioDispatcher.listen((id: string, name: string) => {\n                if (id !== this.id && name === this.name) {\n                    this.checked = false;\n                }\n            });\n    }\n\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n    }\n\n    ngOnDestroy() {\n        this.removeUniqueSelectionListener();\n    }\n\n    /** Focuses the radio button. */\n    // tslint:disable-next-line\n    focus(): void {}\n\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n\n    onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `radio-button` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n\n    onInputChange(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n\n        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n        this.checked = true;\n        this.emitChangeEvent();\n\n        if (this.radioGroup) {\n            this.radioGroup.controlValueAccessorChangeFn(this.value);\n            this.radioGroup.touch();\n            if (groupValueChanged) {\n                this.radioGroup.emitChangeEvent();\n            }\n        }\n    }\n\n    /** Dispatch change event with current value. */\n    private emitChangeEvent(): void {\n        this.change.emit(new McRadioChange(this, this._value));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McRadioButton, McRadioGroup } from './radio.component';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule],\n    exports: [McRadioGroup, McRadioButton],\n    declarations: [McRadioGroup, McRadioButton]\n})\nexport class McRadioModule {\n}\n","import { Directive, Input } from '@angular/core';\n\nimport { CdkTreeNodeDef } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodeDef]',\n    inputs: ['when: mcTreeNodeDefWhen'],\n    providers: [{ provide: CdkTreeNodeDef, useExisting: McTreeNodeDef }]\n})\nexport class McTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n    @Input('mcTreeNode') data: T;\n}\n","import { Directive, Input, OnInit } from '@angular/core';\nimport { CdkTreeNodePadding } from '@ptsecurity/cdk/tree';\n\n\n@Directive({\n    selector: '[mcTreeNodePadding]',\n    providers: [{ provide: CdkTreeNodePadding, useExisting: McTreeNodePadding }]\n})\nexport class McTreeNodePadding<T> extends CdkTreeNodePadding<T> implements OnInit {\n    get leftPadding(): number {\n        return (this._withIcon ? 0 : this._iconWidth) + this._baseLeftPadding;\n    }\n\n    _baseLeftPadding: number = 6;\n    _iconWidth: number = 20;\n    _indent: number = 16;\n\n    @Input('mcTreeNodePadding') level: number;\n\n    @Input('mcTreeNodePaddingIndent') indent: number;\n\n    _withIcon: boolean;\n\n    _paddingIndent(): string | null {\n        const nodeLevel = (this._treeNode.data && this._tree.treeControl.getLevel)\n            ? this._tree.treeControl.getLevel(this._treeNode.data)\n            : null;\n\n        const level = this._level || nodeLevel;\n\n        return level ? `${(level * this._indent) + this.leftPadding}px` : `${this._baseLeftPadding}px`;\n    }\n\n    ngOnInit(): void {\n        this._withIcon = this._tree.treeControl.isExpandable(this._treeNode.data);\n        this._setPadding();\n    }\n}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component, ContentChildren, EventEmitter, forwardRef, Input, IterableDiffer,\n    IterableDiffers, Output, QueryList,\n    ViewChild,\n    ViewEncapsulation,\n    Directive, ElementRef, Inject\n} from '@angular/core';\nimport { NodeDef, ViewData } from '@angular/core/src/view';\n\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { CdkTreeNode, CdkTree, CdkTreeNodeOutlet } from '@ptsecurity/cdk/tree';\n\nimport { CanDisable, HasTabIndex, mixinDisabled, mixinTabIndex, toBoolean } from '@ptsecurity/mosaic/core';\n\nimport { FocusKeyManager } from '@ptsecurity/cdk/a11y';\n\nimport { END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, SPACE } from '@ptsecurity/cdk/keycodes';\n\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n    exportAs: 'mcTreeNodeOption',\n    selector: 'mc-tree-node-option',\n    host: {\n        tabindex: '-1',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': '_hasFocus',\n        '[attr.aria-expanded]': 'isExpanded',\n        '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n        class: 'mc-tree-node',\n\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()',\n\n        '(click)': '_handleClick()'\n    },\n    providers: [\n        { provide: CdkTreeNode, useExisting: McTreeNodeOption }\n    ]\n})\nexport class McTreeNodeOption<T> extends CdkTreeNode<T> implements CanDisable {\n    @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n        }\n    }\n\n    @Input()\n    get selected(): boolean {\n        return this.treeSelection.selectedOptions && this.treeSelection.selectedOptions.isSelected(this) || false;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            // this.treeSelection._reportValueChange();\n        }\n    }\n\n    private _hasFocus: boolean = false;\n\n    private _disabled: boolean = false;\n    private _selected: boolean = false;\n\n    constructor(\n        protected _elementRef: ElementRef,\n        @Inject(forwardRef(() => McTreeSelection))\n        protected treeSelection: McTreeSelection<T>\n    ) {\n        super(_elementRef, treeSelection);\n    }\n\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n\n        this.treeSelection.setFocusedOption(this);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.treeSelection.selectedOptions) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.treeSelection.selectedOptions.select(this);\n        } else {\n            this.treeSelection.selectedOptions.deselect(this);\n        }\n\n        // this._changeDetector.markForCheck();\n    }\n\n    _getHeight(): number {\n        return this._elementRef.nativeElement.getClientRects()[0].height;\n    }\n\n    _handleFocus(): void {\n        if (this.disabled || this._hasFocus) { return; }\n\n        this._hasFocus = true;\n    }\n\n    _handleBlur(): void {\n        this._hasFocus = false;\n    }\n\n    _handleClick(): void {\n        if (this.disabled) { return; }\n\n        this.treeSelection.setFocusedOption(this);\n    }\n}\n\nexport const _McTreeSelectionBase = mixinTabIndex(mixinDisabled(CdkTree));\n\nexport class McTreeNavigationChange {\n    constructor(\n        public source: McTreeSelection<any>,\n        public option: McTreeNodeOption<any>\n    ) {}\n}\n\nexport class McTreeSelectionChange {\n    constructor(\n        public source: McTreeSelection<any>,\n        public option: McTreeNodeOption<any>\n    ) {}\n}\n\n@Component({\n    exportAs: 'mcTreeSelection',\n    selector: 'mc-tree-selection',\n    template: `<ng-container cdkTreeNodeOutlet></ng-container>`,\n    host: {\n        '[tabIndex]': 'tabIndex',\n        class: 'mc-tree-selection',\n        role: 'tree-selection',\n        '(keydown)': '_onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    styleUrls: ['./tree.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{ provide: CdkTree, useExisting: McTreeSelection }]\n})\nexport class McTreeSelection<T> extends _McTreeSelectionBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex {\n    // Outlets within the tree's template where the dataNodes will be inserted.\n    @ViewChild(CdkTreeNodeOutlet) _nodeOutlet: CdkTreeNodeOutlet;\n\n    @ContentChildren(forwardRef(() => McTreeNodeOption)) options: QueryList<McTreeNodeOption<T>>;\n\n    _keyManager: FocusKeyManager<McTreeNodeOption<T>>;\n\n    selectedOptions: SelectionModel<McTreeNodeOption<T>>;\n\n    _disabled: boolean = false;\n    tabIndex: number;\n    multiple: boolean;\n    autoSelect: boolean;\n    noUnselect: boolean;\n\n    // todo temporary solution\n    withShift: boolean;\n    withCtrl: boolean;\n\n    @Input()\n    get disabled(): boolean {\n        return this._disabled;\n    }\n\n    set disabled(rawValue: boolean) {\n        const value = toBoolean(rawValue);\n\n        if (this._disabled !== value) {\n            this._disabled = value;\n\n            if (this._disabled) {\n                console.log('need disable all options');\n            } else {\n                console.log('need enable all options');\n            }\n        }\n    }\n\n    @Output() readonly navigationChange = new EventEmitter<McTreeNavigationChange>();\n\n    @Output() readonly selectionChange = new EventEmitter<McTreeSelectionChange>();\n\n    constructor(\n        private _elementRef: ElementRef,\n        _differs: IterableDiffers,\n        _changeDetectorRef: ChangeDetectorRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('multiple') multiple: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string\n    ) {\n        super(_differs, _changeDetectorRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.multiple = multiple === null ? true : toBoolean(multiple);\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.selectedOptions = new SelectionModel<McTreeNodeOption<T>>(this.multiple);\n    }\n\n    _onKeyDown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n        this.withShift = event.shiftKey;\n        this.withCtrl = event.ctrlKey;\n\n        switch (keyCode) {\n            case LEFT_ARROW:\n                if (this._keyManager.activeItem) {\n                    this.treeControl.collapse(this._keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                break;\n            case RIGHT_ARROW:\n                if (this._keyManager.activeItem) {\n                    this.treeControl.expand(this._keyManager.activeItem.data);\n                }\n\n                event.preventDefault();\n\n                break;\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                this._keyManager.setPreviousPageItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                this._keyManager.setNextPageItemActive();\n                event.preventDefault();\n\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    ngAfterContentInit(): void {\n        this._keyManager = new FocusKeyManager<McTreeNodeOption<T>>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation(true)\n            .withHorizontalOrientation(null);\n    }\n\n    updateScrollSize(): void {\n        if (!this.options.first) { return; }\n\n        this._keyManager.withScrollSize(Math.floor(this._getHeight() / this.options.first._getHeight()));\n    }\n\n    setFocusedOption(option: McTreeNodeOption<T>): void {\n        this._keyManager.updateActiveItem(option);\n\n        if (this.withShift && this.multiple) {\n            const previousIndex = this._keyManager.previousActiveItemIndex;\n            const activeIndex = this._keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n\n            this.withShift = false;\n        } else if (this.withCtrl) {\n            this.withCtrl = false;\n\n            if (!this._canDeselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) {\n                this.options.forEach((item) => item.setSelected(false));\n                option.setSelected(true);\n            }\n        }\n\n        this._emitNavigationEvent(option);\n    }\n\n    // Toggles the selected state of the currently focused option.\n    toggleFocusedOption(): void {\n        const focusedIndex = this._keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n            const focusedOption: McTreeNodeOption<T> = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this._canDeselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this._emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    renderNodeChanges(\n        data: T[],\n        dataDiffer: IterableDiffer<T> = this._dataDiffer,\n        viewContainer: any = this._nodeOutlet.viewContainer,\n        parentData?: T\n    ) {\n        super.renderNodeChanges(data, dataDiffer, viewContainer, parentData);\n\n        const arrayOfInstances = [];\n\n        viewContainer._embeddedViews.forEach((view: ViewData) => {\n            const viewDef = view.def;\n\n            viewDef.nodes.forEach((node: NodeDef) => {\n                if (viewDef.nodeMatchedQueries === node.matchedQueryIds) {\n                    const nodeData: any = view.nodes[node.nodeIndex];\n\n                    arrayOfInstances.push(nodeData.instance as never);\n                }\n            });\n        });\n\n        if (this.options) {\n            this.options.reset(arrayOfInstances);\n            this.options.notifyOnChanges();\n        }\n\n        this.updateScrollSize();\n    }\n\n    _getHeight(): number {\n        return this._elementRef.nativeElement.getClientRects()[0].height;\n    }\n\n    _emitNavigationEvent(option: McTreeNodeOption<T>): void {\n        this.navigationChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    _emitChangeEvent(option: McTreeNodeOption<T>): void {\n        this.selectionChange.emit(new McTreeNavigationChange(this, option));\n    }\n\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private _isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    private _canDeselectLast(option: McTreeNodeOption<T>): boolean {\n        return !(this.noUnselect && this.selectedOptions.selected.length === 1 && option.selected);\n    }\n}\n\n","import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { CdkTreeModule } from '@ptsecurity/cdk/tree';\n\nimport { McTreeNodeDef } from './node';\nimport { McTreeNodePadding } from './padding';\nimport { McTreeSelection, McTreeNodeOption } from './tree-selection';\n\n\nconst MC_TREE_DIRECTIVES = [\n    McTreeNodeDef,\n    McTreeNodePadding,\n    McTreeSelection,\n    McTreeNodeOption\n];\n\n@NgModule({\n    imports: [CommonModule, CdkTreeModule],\n    exports: MC_TREE_DIRECTIVES,\n    declarations: MC_TREE_DIRECTIVES\n})\nexport class McTreeModule {}\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { FlatTreeControl, ITreeControl } from '@ptsecurity/cdk/tree';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map, take } from 'rxjs/operators';\n\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class McTreeFlattener<T, F> {\n\n    constructor(public transformFunction: (node: T, level: number) => F,\n                public getLevel: (node: F) => number,\n                public isExpandable: (node: F) => boolean,\n                public getChildren: (node: T) => Observable<T[]>) {\n    }\n\n    _flattenNode(node: T, level: number,\n                 resultNodes: F[], parentMap: boolean[]): F[] {\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n\n        if (this.isExpandable(flatNode)) {\n            this.getChildren(node).pipe(take(1)).subscribe((children) => {\n                children.forEach((child, index) => {\n                    const childParentMap: boolean[] = parentMap.slice();\n                    childParentMap.push(index !== children.length - 1);\n                    this._flattenNode(child, level + 1, resultNodes, childParentMap);\n                });\n            });\n        }\n\n        return resultNodes;\n    }\n\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n    flattenNodes(structuredData: T[]): F[] {\n        const resultNodes: F[] = [];\n        structuredData.forEach((node) => this._flattenNode(node, 0, resultNodes, []));\n\n        return resultNodes;\n    }\n\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n    expandFlattenedNodes(nodes: F[], treeControl: ITreeControl<F>): F[] {\n        const results: F[] = [];\n        const currentExpand: boolean[] = [];\n        currentExpand[0] = true;\n\n        nodes.forEach((node) => {\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n\n            if (expand) { results.push(node); }\n\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        });\n\n        return results;\n    }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `McTree`.\n * The nested tree nodes of type `T` are flattened through `MсTreeFlattener`, and converted\n * to type `F` for `McTree` to consume.\n */\nexport class McTreeFlatDataSource<T, F> extends DataSource<F> {\n    _flattenedData = new BehaviorSubject<F[]>([]);\n\n    _expandedData = new BehaviorSubject<F[]>([]);\n\n    _data: BehaviorSubject<T[]>;\n\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n        this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n        this.treeControl.dataNodes = this._flattenedData.value;\n    }\n\n    constructor(private treeControl: FlatTreeControl<F>,\n                private treeFlattener: McTreeFlattener<T, F>,\n                initialData: T[] = []) {\n        super();\n        this._data = new BehaviorSubject<T[]>(initialData);\n    }\n\n    connect(collectionViewer: ICollectionViewer): Observable<F[]> {\n        const changes = [\n            collectionViewer.viewChange,\n            this.treeControl.expansionModel.onChange!,\n            this._flattenedData\n        ];\n\n        return merge(...changes).pipe(map(() => {\n            this._expandedData.next(\n                this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n\n            return this._expandedData.value;\n        }));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import { ICollectionViewer, DataSource } from '@ptsecurity/cdk/collections';\nimport { BehaviorSubject, merge, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by ITreeControl and each non-leaf node.\n */\nexport class McTreeNestedDataSource<T> extends DataSource<T> {\n    _data = new BehaviorSubject<T[]>([]);\n\n    /**\n     * Data for the nested tree\n     */\n    get data() {\n        return this._data.value;\n    }\n\n    set data(value: T[]) {\n        this._data.next(value);\n    }\n\n    connect(collectionViewer: ICollectionViewer): Observable<T[]> {\n        return merge(...[collectionViewer.viewChange, this._data])\n            .pipe(map(() => this.data));\n    }\n\n    disconnect() {\n        // no op\n    }\n}\n\n","import {\n    ElementRef,\n    QueryList,\n    ContentChildren,\n    Component,\n    ChangeDetectionStrategy,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { mixinColor, CanColor, CanColorCtor } from '@ptsecurity/mosaic/core';\nimport { McIcon } from '@ptsecurity/mosaic/icon';\n\n\nexport class McTagBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McTagMixinBase: CanColorCtor & typeof McTagBase\n    = mixinColor(McTagBase);\n\n\n@Component({\n    selector: 'mc-tag',\n    templateUrl: 'tag.partial.html',\n    styleUrls: ['./tag.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: { class: 'mc-tag' },\n    inputs: ['color']\n})\nexport class McTag extends _McTagMixinBase implements CanColor {\n    @ContentChildren(McIcon) contentChildren: QueryList<McIcon>;\n\n    nativeElement: HTMLElement;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        this._addClassModificatorForIcons();\n    }\n\n    _addClassModificatorForIcons() {\n        const icons = this.contentChildren.map((item) => item._elementRef.nativeElement);\n\n        if (icons.length === 1) {\n            const iconElement = icons[0];\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-left-icon');\n                }\n\n                if (iconElement.previousSibling) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-right-icon');\n                }\n            }\n        } else if (icons.length > 1) {\n            const firstIconElement = icons[0];\n            const secondIconElement = icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McTag } from './tag.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McTag\n    ],\n    declarations: [\n        McTag\n    ]\n})\nexport class McTagModule {}\n","import {\n    animate,\n    AnimationTriggerMetadata,\n    state,\n    style,\n    transition,\n    trigger,\n    query,\n    animateChild,\n    group\n} from '@angular/animations';\n\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n */\nexport const mcSelectAnimations: {\n    readonly transformPanel: AnimationTriggerMetadata;\n    readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0)',\n            minWidth: '100%',\n            opacity: 0\n        })),\n        transition('void => *', group([\n            query('@fadeInContent', animateChild()),\n            animate('150ms cubic-bezier(0.25, 0.8, 0.25, 1)')\n        ])),\n        transition('* => void', [\n            animate('250ms 100ms linear', style({ opacity: 0 }))\n        ])\n    ]),\n\n    /**\n     * This animation fades in the background color and text content of the\n     * select's options. It is time delayed to occur 100ms after the overlay\n     * panel has transformed in.\n     */\n    fadeInContent: trigger('fadeInContent', [\n        state('showing', style({ opacity: 1 })),\n        transition('void => showing', [\n            style({ opacity: 0 }),\n            animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n        ])\n    ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const transformPanel = mcSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 7.0.0\n */\nexport const fadeInContent = mcSelectAnimations.fadeInContent;\n","import { DOCUMENT } from '@angular/common';\nimport {\n    AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef,\n    Component,\n    ComponentFactoryResolver,\n    ComponentRef,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    Injector,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit,\n    Output,\n    Renderer2,\n    SimpleChanges,\n    TemplateRef,\n    Type,\n    ViewChild,\n    ViewContainerRef, ViewEncapsulation\n} from '@angular/core';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { Overlay, OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { McMeasureScrollbarService } from '@ptsecurity/mosaic/core';\nimport { Observable } from 'rxjs';\n\nimport { McModalControlService } from './modal-control.service';\nimport { McModalRef } from './modal-ref.class';\n// tslint:disable-next-line\nimport ModalUtil from './modal-util';\nimport { IModalButtonOptions, IModalOptions, ModalType, OnClickCallback } from './modal.type';\n\n\n// Duration when perform animations (ms)\nexport const MODAL_ANIMATE_DURATION = 200;\n\ntype AnimationState = 'enter' | 'leave' | null;\n\n@Component({\n    selector: 'mc-modal',\n    templateUrl: './modal.component.html',\n    styleUrls: ['./modal.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        '(keydown)': 'onKeyDown($event)'\n    }\n})\nexport class McModalComponent<T = any, R = any> extends McModalRef<T, R>\n    implements OnInit, OnChanges, AfterViewInit, OnDestroy, IModalOptions {\n\n    // tslint:disable-next-line:no-any\n    @Input() mcModalType: ModalType = 'default';\n    // If not specified, will use <ng-content>\n    @Input() mcContent: string | TemplateRef<{}> | Type<T>;\n    // available when mcContent is a component\n    @Input() mcComponentParams: object;\n    // Default Modal ONLY\n    @Input() mcFooter: string | TemplateRef<{}> | IModalButtonOptions<T>[];\n\n    @Input()\n    get mcVisible() { return this._mcVisible; }\n    set mcVisible(value) { this._mcVisible = value; }\n    _mcVisible = false;\n\n    @Output() mcVisibleChange = new EventEmitter<boolean>();\n\n    @Input() mcZIndex: number = 1000;\n    @Input() mcWidth: number | string = 480;\n    @Input() mcWrapClassName: string;\n    @Input() mcClassName: string;\n    @Input() mcStyle: object;\n    @Input() mcTitle: string | TemplateRef<{}>;\n    @Input() mcCloseByESC: boolean = true;\n\n    @Input()\n    get mcClosable() { return this._mcClosable; }\n    set mcClosable(value) { this._mcClosable = value; }\n    _mcClosable = true;\n\n    @Input()\n    get mcMask() { return this._mcMask; }\n    set mcMask(value) { this._mcMask = value; }\n    _mcMask = true;\n\n    @Input()\n    get mcMaskClosable() { return this._mcMaskClosable; }\n    set mcMaskClosable(value) { this._mcMaskClosable = value; }\n    _mcMaskClosable = true;\n\n    @Input() mcMaskStyle: object;\n    @Input() mcBodyStyle: object;\n\n    // Trigger when modal open(visible) after animations\n    @Output() mcAfterOpen = new EventEmitter<void>();\n    // Trigger when modal leave-animation over\n    @Output() mcAfterClose = new EventEmitter<R>();\n\n    // --- Predefined OK & Cancel buttons\n    @Input() mcOkText: string;\n    @Input() mcOkType = 'primary';\n\n    @Input()\n    get mcOkLoading() { return this._mcOkLoading; }\n    set mcOkLoading(value) { this._mcOkLoading = value; }\n    _mcOkLoading = false;\n\n    @Input() @Output() mcOnOk: EventEmitter<T> | OnClickCallback<T> = new EventEmitter<T>();\n    // Only aim to focus the ok button that needs to be auto focused\n    @ViewChild('autoFocusButtonOk', {read: ElementRef}) autoFocusButtonOk: ElementRef;\n    @Input() mcCancelText: string;\n\n    @Input()\n    get mcCancelLoading() { return this._mcCancelLoading; }\n    set mcCancelLoading(value) { this._mcCancelLoading = value; }\n    _mcCancelLoading = false;\n\n    @Input() @Output() mcOnCancel: EventEmitter<T> | OnClickCallback<T> = new EventEmitter<T>();\n    @ViewChild('modalContainer') modalContainer: ElementRef;\n    @ViewChild('bodyContainer', {read: ViewContainerRef}) bodyContainer: ViewContainerRef;\n    maskAnimationClassMap: object;\n    modalAnimationClassMap: object;\n    // The origin point that animation based on\n    transformOrigin = '0px 0px 0px';\n\n    // Observable alias for mcAfterOpen\n    get afterOpen(): Observable<void> {\n        return this.mcAfterOpen.asObservable();\n    }\n\n    // Observable alias for mcAfterClose\n    get afterClose(): Observable<R> {\n        return this.mcAfterClose.asObservable();\n    }\n\n    get okText(): string {\n        return this.mcOkText;\n    }\n\n    get cancelText(): string {\n        return this.mcCancelText;\n    }\n\n    // Indicate whether this dialog should hidden\n    get hidden(): boolean {\n        return !this.mcVisible && !this.animationState;\n    }\n\n    // Handle the reference when using mcContent as Component\n    private contentComponentRef: ComponentRef<T>;\n    // Current animation state\n    private animationState: AnimationState;\n    private container: HTMLElement | OverlayRef;\n\n    constructor(\n        private overlay: Overlay,\n        private renderer: Renderer2,\n        private cfr: ComponentFactoryResolver,\n        private elementRef: ElementRef,\n        private viewContainer: ViewContainerRef,\n        private mcMeasureScrollbarService: McMeasureScrollbarService,\n        private modalControl: McModalControlService,\n        private changeDetector: ChangeDetectorRef,\n        @Inject(DOCUMENT) private document: any) {\n\n        super();\n    }\n\n    @Input() mcGetContainer: HTMLElement | OverlayRef | (() => HTMLElement | OverlayRef) = () => this.overlay.create();\n\n    ngOnInit() {\n\n        // Create component along without View\n        if (this.isComponent(this.mcContent)) {\n            this.createDynamicComponent(this.mcContent as Type<T>);\n        }\n\n        // Setup default button options\n        if (this.isModalButtons(this.mcFooter)) {\n            this.mcFooter = this.formatModalButtons(this.mcFooter as IModalButtonOptions<T>[]);\n        }\n\n        // Place the modal dom to elsewhere\n        this.container = typeof this.mcGetContainer === 'function' ? this.mcGetContainer() : this.mcGetContainer;\n        if (this.container instanceof HTMLElement) {\n            this.container.appendChild(this.elementRef.nativeElement);\n        } else if (this.container instanceof OverlayRef) {\n            // NOTE: only attach the dom to overlay, the view container is not changed actually\n            this.container.overlayElement.appendChild(this.elementRef.nativeElement);\n        }\n\n        // Register modal when afterOpen/afterClose is stable\n        this.modalControl.registerModal(this);\n    }\n\n    // [NOTE] NOT available when using by service!\n    // Because ngOnChanges never be called when using by service,\n    // here we can't support \"mcContent\"(Component) etc. as inputs that initialized dynamically.\n    // BUT: User also can change \"mcContent\" dynamically to trigger UI changes\n    // (provided you don't use \bComponent that needs initializations)\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.mcVisible) {\n            // Do not trigger animation while initializing\n            this.handleVisibleStateChange(this.mcVisible, !changes.mcVisible.firstChange);\n        }\n    }\n\n    ngAfterViewInit() {\n        // If using Component, it is the time to attach View while bodyContainer is ready\n        if (this.contentComponentRef) {\n            this.bodyContainer.insert(this.contentComponentRef.hostView);\n        }\n\n        if (this.autoFocusButtonOk) {\n            (this.autoFocusButtonOk.nativeElement as HTMLButtonElement).focus();\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.container instanceof OverlayRef) {\n            this.container.dispose();\n        }\n    }\n\n    open() {\n        this.changeVisibleFromInside(true);\n    }\n\n    close(result?: R) {\n        this.changeVisibleFromInside(false, result);\n    }\n\n    // Destroy equals Close\n    destroy(result?: R) {\n        this.close(result);\n    }\n\n    triggerOk() {\n        this.onClickOkCancel('ok');\n    }\n\n    triggerCancel() {\n        this.onClickOkCancel('cancel');\n    }\n\n    getInstance(): McModalComponent {\n        return this;\n    }\n\n    getContentComponentRef(): ComponentRef<T> {\n        return this.contentComponentRef;\n    }\n\n    getContentComponent(): T {\n        return this.contentComponentRef && this.contentComponentRef.instance;\n    }\n\n    getElement(): HTMLElement {\n        return this.elementRef && this.elementRef.nativeElement;\n    }\n\n    onClickMask($event: MouseEvent) {\n        if (\n            this.mcMask &&\n            this.mcMaskClosable &&\n            ($event.target as HTMLElement).classList.contains('mc-modal-wrap') &&\n            this.mcVisible\n        ) {\n            this.onClickOkCancel('cancel');\n        }\n    }\n\n    // tslint:disable-next-line\n    isModalType(type: ModalType): boolean {\n        return this.mcModalType === type;\n    }\n\n    onKeyDown(event: KeyboardEvent): void {\n\n        if (event.keyCode === ESCAPE && this.container && (this.container instanceof OverlayRef)) {\n\n            this.close();\n            event.preventDefault();\n        }\n    }\n\n    // AoT\n    onClickCloseBtn() {\n        if (this.mcVisible) {\n            this.onClickOkCancel('cancel');\n        }\n    }\n\n    // AoT\n    // tslint:disable-next-line\n    onClickOkCancel(type: 'ok' | 'cancel') {\n        const trigger = { ok: this.mcOnOk, cancel: this.mcOnCancel }[type];\n        const loadingKey = { ok: 'mcOkLoading', cancel: 'mcCancelLoading' }[type];\n\n        if (trigger instanceof EventEmitter) {\n            trigger.emit(this.getContentComponent());\n        } else if (typeof trigger === 'function') {\n\n            const result = trigger(this.getContentComponent());\n            // Users can return \"false\" to prevent closing by default\n            const caseClose = (doClose: boolean | void | {}) => (doClose !== false) && this.close(doClose as R);\n\n            if (isPromise(result)) {\n                this[loadingKey] = true;\n                const handleThen = (doClose) => {\n                    this[loadingKey] = false;\n                    caseClose(doClose);\n                };\n                (result as Promise<void>).then(handleThen).catch(handleThen);\n            } else {\n                caseClose(result);\n            }\n        }\n    }\n\n    // AoT\n    isNonEmptyString(value: {}): boolean {\n        return typeof value === 'string' && value !== '';\n    }\n\n    // AoT\n    isTemplateRef(value: {}): boolean {\n        return value instanceof TemplateRef;\n    }\n\n    // AoT\n    isComponent(value: {}): boolean {\n        return value instanceof Type;\n    }\n\n    // AoT\n    isModalButtons(value: {}): boolean {\n        return Array.isArray(value) && value.length > 0;\n    }\n\n    // Do rest things when visible state changed\n    private handleVisibleStateChange(visible: boolean, animation: boolean = true, closeResult?: R): Promise<any> {\n        // Hide scrollbar at the first time when shown up\n        if (visible) {\n            this.changeBodyOverflow(1);\n        }\n\n        return Promise\n            .resolve(animation && this.animateTo(visible))\n            // Emit open/close event after animations over\n            .then(() => {\n                if (visible) {\n                    this.mcAfterOpen.emit();\n                } else {\n                    this.mcAfterClose.emit(closeResult);\n                    // Show/hide scrollbar when animation is over\n                    this.changeBodyOverflow();\n                }\n            });\n    }\n\n    // Lookup a button's property, if the prop is a function, call & then return the result, otherwise, return itself.\n    // AoT\n    // tslint:disable-next-line\n    getButtonCallableProp(options: IModalButtonOptions<T>, prop: string): {} {\n        const value = options[prop];\n        const args: any[] = [];\n        if (this.contentComponentRef) {\n            args.push(this.contentComponentRef.instance);\n        }\n\n        return typeof value === 'function' ? value.apply(options, args) : value;\n    }\n\n    // On mcFooter's modal button click\n    // AoT\n    // tslint:disable-next-line\n    onButtonClick(button: IModalButtonOptions<T>) {\n        // Call onClick directly\n        const result = this.getButtonCallableProp(button, 'onClick');\n        if (isPromise(result)) {\n            button.loading = true;\n            (result as Promise<{}>).then(() => button.loading = false).catch(() => button.loading = false);\n        }\n    }\n\n    // Change mcVisible from inside\n    private changeVisibleFromInside(visible: boolean, closeResult?: R): Promise<void> {\n        if (this.mcVisible !== visible) {\n            // Change mcVisible value immediately\n            this.mcVisible = visible;\n            this.mcVisibleChange.emit(visible);\n\n            return this.handleVisibleStateChange(visible, true, closeResult);\n        }\n\n        return Promise.resolve();\n    }\n\n    private changeAnimationState(state: AnimationState) {\n        this.animationState = state;\n        if (state) {\n            this.maskAnimationClassMap = {\n                [`fade-${state}`]: true,\n                [`fade-${state}-active`]: true\n            };\n            this.modalAnimationClassMap = {\n                [`zoom-${state}`]: true,\n                [`zoom-${state}-active`]: true\n            };\n        } else {\n            // @ts-ignore\n            this.maskAnimationClassMap = this.modalAnimationClassMap = null;\n        }\n\n        if (this.contentComponentRef) {\n            this.contentComponentRef.changeDetectorRef.markForCheck();\n        } else {\n            this.changeDetector.markForCheck();\n        }\n    }\n\n    private animateTo(isVisible: boolean): Promise<any> {\n        // Figure out the lastest click position when shows up\n        if (isVisible) {\n            // [NOTE] Using timeout due to the document.click event is fired later than visible change,\n            // so if not postponed to next event-loop, we can't get the lastest click position\n            window.setTimeout(() => this.updateTransformOrigin());\n        }\n\n        this.changeAnimationState(isVisible ? 'enter' : 'leave');\n\n        // Return when animation is over\n        return new Promise((resolve) => window.setTimeout(() => {\n            this.changeAnimationState(null);\n            resolve();\n        }, MODAL_ANIMATE_DURATION));\n    }\n\n    private formatModalButtons(buttons: IModalButtonOptions<T>[]): IModalButtonOptions<T>[] {\n        return buttons.map((button) => {\n\n            return {\n                ...{\n                    type: 'default',\n                    size: 'default',\n                    autoLoading: true,\n                    show: true,\n                    loading: false,\n                    disabled: false\n                },\n                ...button\n            };\n        });\n    }\n\n    /**\n     * Create a component dynamically but not attach to any View\n     * (this action will be executed when bodyContainer is ready)\n     * @param component Component class\n     */\n    private createDynamicComponent(component: Type<T>) {\n        const factory = this.cfr.resolveComponentFactory(component);\n        const childInjector = Injector.create({\n            providers: [{provide: McModalRef, useValue: this}],\n            parent: this.viewContainer.parentInjector\n        });\n\n        this.contentComponentRef = factory.create(childInjector);\n\n        if (this.mcComponentParams) {\n            Object.assign(this.contentComponentRef.instance, this.mcComponentParams);\n        }\n\n        // Do the first change detection immediately\n        // (or we do detection at ngAfterViewInit, multi-changes error will be thrown)\n        this.contentComponentRef.changeDetectorRef.detectChanges();\n\n\n    }\n\n    // Update transform-origin to the last click position on document\n    private updateTransformOrigin() {\n        const modalElement = this.modalContainer.nativeElement as HTMLElement;\n        const lastPosition = ModalUtil.getLastClickPosition();\n\n        if (lastPosition) {\n            // tslint:disable-next-line\n            this.transformOrigin = `${lastPosition.x - modalElement.offsetLeft}px ${lastPosition.y - modalElement.offsetTop}px 0px`;\n        }\n    }\n\n    /**\n     * Take care of the body's overflow to decide the existense of scrollbar\n     * @param plusNum The number that the openModals.length will increase soon\n     */\n    private changeBodyOverflow(plusNum: number = 0) {\n        const openModals = this.modalControl.openModals;\n\n        if (openModals.length + plusNum > 0) {\n            // tslint:disable-next-line\n            this.renderer.setStyle(this.document.body, 'padding-right', `${this.mcMeasureScrollbarService.scrollBarWidth}px`);\n            this.renderer.setStyle(this.document.body, 'overflow', 'hidden');\n        } else {\n            this.renderer.removeStyle(this.document.body, 'padding-right');\n            this.renderer.removeStyle(this.document.body, 'overflow');\n        }\n    }\n}\n\n////////////\n\nfunction isPromise(obj: {} | void): boolean {\n    // tslint:disable-next-line\n    return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof (obj as Promise<{}>).then === 'function' && typeof (obj as Promise<{}>).catch === 'function';\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n\n@Pipe({\n    name: 'toCssUnit'\n})\nexport class CssUnitPipe implements PipeTransform {\n    transform(value: number | string, defaultUnit: string = 'px'): string {\n        const formatted = +value;\n\n        return isNaN(formatted) ? `${value}` : `${formatted}${defaultUnit}`;\n    }\n}\n","import { ComponentRef, Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { Overlay, OverlayRef } from '@ptsecurity/cdk/overlay';\nimport { ComponentPortal } from '@ptsecurity/cdk/portal';\n\nimport { McModalControlService } from './modal-control.service';\nimport { McModalRef } from './modal-ref.class';\nimport { McModalComponent } from './modal.component';\nimport { ConfirmType, IModalOptions, IModalOptionsForService } from './modal.type';\n\n\n// A builder used for managing service creating modals\nexport class ModalBuilderForService {\n\n    // Modal ComponentRef, \"null\" means it has been destroyed\n    private modalRef: ComponentRef<McModalComponent>;\n    private overlayRef: OverlayRef;\n\n    constructor(private overlay: Overlay, options: IModalOptionsForService = {}) {\n        this.createModal();\n\n        if (!('mcGetContainer' in options)) {\n            options.mcGetContainer = null;\n        }\n\n        this.changeProps(options);\n        this.modalRef.instance.open();\n        this.modalRef.instance.mcAfterClose.subscribe(() => this.destroyModal());\n\n        this.overlayRef.keydownEvents()\n            // @ts-ignore\n            .pipe(filter((event: KeyboardEvent) => {\n                return event.keyCode === ESCAPE && options.mcCloseByESC;\n            }))\n            .subscribe(() => this.modalRef.instance.close());\n    }\n\n    getInstance(): McModalComponent {\n        return this.modalRef && this.modalRef.instance;\n    }\n\n    destroyModal(): void {\n        if (this.modalRef) {\n            this.overlayRef.dispose();\n            // @ts-ignore\n            this.modalRef = null;\n        }\n    }\n\n    private changeProps(options: IModalOptions): void {\n        if (this.modalRef) {\n            // here not limit user's inputs at runtime\n            Object.assign(this.modalRef.instance, options);\n        }\n    }\n\n    // Create component to ApplicationRef\n    private createModal(): void {\n        this.overlayRef = this.overlay.create();\n        this.modalRef = this.overlayRef.attach(new ComponentPortal(McModalComponent));\n    }\n}\n\n@Injectable()\nexport class McModalService {\n    // Track of the current close modals (we assume invisible is close this time)\n    get openModals(): McModalRef[] {\n        return this.modalControl.openModals;\n    }\n\n    get afterAllClose(): Observable<void> {\n        return this.modalControl.afterAllClose.asObservable();\n    }\n\n    constructor(\n        private overlay: Overlay,\n        private modalControl: McModalControlService) {\n    }\n\n    // Closes all of the currently-open dialogs\n    closeAll(): void {\n        this.modalControl.closeAll();\n    }\n\n    create<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n\n        if (typeof options.mcOnCancel !== 'function') {\n            // Leave a empty function to close this modal by default\n            // tslint:disable-next-line\n            options.mcOnCancel = () => {};\n        }\n\n        if (!('mcCloseByESC' in options)) {\n            options.mcCloseByESC = true;\n        }\n\n\n        if (!('mcWidth' in options)) {\n            // tslint:disable-next-line\n            options.mcWidth = 480;\n        }\n\n        return new ModalBuilderForService(this.overlay, options).getInstance();\n    }\n\n    confirm<T>(options: IModalOptionsForService<T> = {}, confirmType: ConfirmType = 'confirm'): McModalRef<T> {\n        if ('mcFooter' in options) {\n            console.warn(`The Confirm-Modal doesn't support \"mcFooter\", this property will be ignored.`);\n        }\n\n        // NOTE: only support function currently by calling confirm()\n        if (typeof options.mcOnOk !== 'function') {\n            // Leave a empty function to close this modal by default\n            // tslint:disable-next-line\n            options.mcOnOk = () => {};\n        }\n\n        options.mcModalType = 'confirm';\n        options.mcClassName = `mc-confirm mc-confirm-${confirmType} ${options.mcClassName || ''}`;\n        options.mcMaskClosable = false;\n\n        return this.create(options);\n    }\n\n    success<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n        return this.simpleConfirm(options, 'success');\n    }\n\n    delete<T>(options: IModalOptionsForService<T> = {}): McModalRef<T> {\n        return this.simpleConfirm(options, 'warn');\n    }\n\n    private simpleConfirm<T>(options: IModalOptionsForService<T> = {}, confirmType: ConfirmType): McModalRef<T> {\n        // Remove the Cancel button if the user not specify a Cancel button\n        if (!('mcCancelText' in options)) {\n            // @ts-ignore\n            options.mcCancelText = null;\n        }\n\n        return this.confirm(options, confirmType);\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { OverlayModule } from '@ptsecurity/cdk/overlay';\nimport { McButtonModule } from '@ptsecurity/mosaic/button';\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { CssUnitPipe } from './css-unit.pipe';\nimport { McModalControlService } from './modal-control.service';\nimport { McModalComponent } from './modal.component';\nimport { McModalService } from './modal.service';\n\n\n@NgModule({\n    imports: [ CommonModule, OverlayModule, McButtonModule, McIconModule ],\n    exports: [ McModalComponent ],\n    declarations: [ McModalComponent, CssUnitPipe ],\n    entryComponents: [ McModalComponent ],\n    providers: [ McModalControlService, McModalService ]\n})\nexport class McModalModule { }\n","import { fromEvent, Observable, Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\nimport {\n    AfterViewInit,\n    Component, Directive,\n    ElementRef,\n    HostBinding,\n    Input,\n    OnDestroy,\n    OnInit,\n    ViewEncapsulation,\n    ContentChild,\n    TemplateRef,\n    ChangeDetectorRef,\n    ChangeDetectionStrategy,\n    ViewChild\n} from '@angular/core';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport { SPACE } from '@ptsecurity/cdk/keycodes';\nimport { Platform } from '@ptsecurity/cdk/platform';\nimport { CanDisable, mixinDisabled } from '@ptsecurity/mosaic/core';\n\n\nconst COLLAPSED_CLASS: string = 'mc-navbar-collapsed-title';\nconst MC_ICON = 'mc-icon';\nconst MC_NAVBAR = 'mc-navbar';\nconst MC_NAVBAR_CONTAINER = 'mc-navbar-container';\nconst MC_NAVBAR_ITEM = 'mc-navbar-item';\nconst MC_NAVBAR_BRAND = 'mc-navbar-brand';\nconst MC_NAVBAR_TITLE = 'mc-navbar-title';\nconst MC_NAVBAR_LOGO = 'mc-navbar-logo';\n\nexport type McNavbarContainerPositionType = 'left' | 'right';\n\nexport interface IMcNavbarDropdownItem {\n    link?: string;\n    text: string;\n}\n\n@Directive({\n    selector: MC_NAVBAR_LOGO,\n    host: {\n        class: MC_NAVBAR_LOGO\n    }\n})\nexport class McNavbarLogo {}\n\n@Directive({\n    selector: MC_NAVBAR_BRAND,\n    host: {\n        class: MC_NAVBAR_BRAND\n    }\n})\nexport class McNavbarBrand {}\n\n@Directive({\n    selector: MC_NAVBAR_TITLE,\n    host: {\n        class: MC_NAVBAR_TITLE\n    }\n})\nexport class McNavbarTitle {}\n\nexport class McNavbarItemBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McNavbarMixinBase = mixinDisabled(McNavbarItemBase);\n\n@Component({\n    selector: MC_NAVBAR_ITEM,\n    template: `\n        <a\n            [attr.tabindex]=\\\"disabled ? -1 : tabIndex\\\"\n            (click)=\"handleClickByItem()\"\n            (keydown)=\"handleKeydown($event)\"\n            class=\"mc-navbar-item\"\n        >\n            <ng-content></ng-content>\n            <i *ngIf=\"hasDropdownContent\" mc-icon=\"mc-angle-M_16\"></i>\n        </a>\n        <ul\n            #dropdownContent\n            *ngIf=\"hasDropdownContent\"\n            [ngClass]=\"{ 'is-collapsed': isCollapsed }\"\n            class=\"mc-navbar-dropdown\"\n        >\n            <li\n                *ngFor=\"let item of dropdownItems\"\n                (click)=\"handleClickByDropdownItem()\"\n                class=\"mc-navbar-dropdown-item\"\n            >\n                <ng-container *ngIf=\"dropdownItemTmpl\">\n                    <ng-container *ngTemplateOutlet=\"dropdownItemTmpl; context: { $implicit: item }\"></ng-container>\n                </ng-container>\n                <a\n                    *ngIf=\"!dropdownItemTmpl\"\n                    [attr.href]=\"item.link\"\n                    [ngClass]=\"{ 'is-active': isActiveDropdownLink(item.link) }\"\n                    class=\"mc-navbar-dropdown-link\"\n                >{{ item.text }}</a>\n            </li>\n        </ul>\n    `,\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': '-1'\n    }\n})\nexport class McNavbarItem extends _McNavbarMixinBase implements OnInit, AfterViewInit, OnDestroy, CanDisable {\n\n    @Input()\n    tabIndex: number = 0;\n\n    @Input()\n    dropdownItems: IMcNavbarDropdownItem[] = [];\n\n    @Input()\n    set collapsedTitle(value: string) {\n        this.elementRef.nativeElement.setAttribute('computedTitle', encodeURI(value));\n    }\n\n    @ContentChild('dropdownItemTmpl', { read: TemplateRef })\n    dropdownItemTmpl: TemplateRef<IMcNavbarDropdownItem>;\n\n    @ViewChild('dropdownContent', { read: ElementRef })\n    dropdownContent: ElementRef;\n\n    get hasDropdownContent() {\n        return this.dropdownItems.length > 0;\n    }\n\n    isCollapsed: boolean = true;\n\n    private _subscription: Subscription = new Subscription();\n    private _focusMonitor$: Observable<FocusOrigin>;\n\n    private get _dropdownElements(): HTMLElement[] {\n        return this.dropdownContent ? this.dropdownContent.nativeElement.querySelectorAll('li > *') : [];\n    }\n\n    constructor(\n        public  elementRef: ElementRef,\n        private _focusMonitor: FocusMonitor,\n        private _platform: Platform,\n        private _cdRef: ChangeDetectorRef\n    ) {\n        super(elementRef);\n    }\n\n    ngOnInit() {\n        this.denyClickIfDisabled();\n\n        this._focusMonitor$ = this._focusMonitor.monitor(this.elementRef.nativeElement, true);\n\n        if (this.hasDropdownContent) {\n            this.listenClickOutside();\n        }\n    }\n\n    ngAfterViewInit() {\n        if (!this.hasDropdownContent) {\n            return;\n        }\n\n        this.startListenFocusDropdownItems();\n    }\n\n    ngOnDestroy() {\n        this._subscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n        this.stopListenFocusDropdownItems();\n    }\n\n    isActiveDropdownLink(link: string): boolean {\n        if (!this._platform.isBrowser) {\n            return false;\n        }\n\n        return window.location.href.indexOf(link) >= 0;\n    }\n\n    handleClickByItem() {\n        this.toggleDropdown();\n    }\n\n    handleKeydown($event: KeyboardEvent) {\n        const isNavbarItem = ($event.target as HTMLElement).classList.contains(MC_NAVBAR_ITEM);\n\n        // tslint:disable-next-line\n        if (this.hasDropdownContent && $event.keyCode === SPACE && isNavbarItem) {\n            this.toggleDropdown();\n        }\n    }\n\n    handleClickByDropdownItem() {\n        this.forceCloseDropdown();\n    }\n\n    private listenClickOutside() {\n        this._subscription.add(\n            this._focusMonitor$.subscribe((origin) => {\n                if (origin === null) {\n                    this.forceCloseDropdown();\n                }\n            })\n        );\n    }\n\n    private toggleDropdown() {\n        this.isCollapsed = !this.isCollapsed;\n    }\n\n    private forceCloseDropdown() {\n        this.isCollapsed = true;\n        this._cdRef.detectChanges();\n    }\n\n    private startListenFocusDropdownItems() {\n        this._dropdownElements.forEach((el) => {\n            this._focusMonitor.monitor(el, true);\n        });\n    }\n\n    private stopListenFocusDropdownItems() {\n        this._dropdownElements.forEach((el) => {\n            this._focusMonitor.stopMonitoring(el);\n        });\n    }\n\n    // This method is required due to angular 2 issue https://github.com/angular/angular/issues/11200\n    private denyClickIfDisabled() {\n        const events: Event[] = this.elementRef.nativeElement.eventListeners('click');\n\n        events.forEach((event) => this.elementRef.nativeElement.removeEventListener('click', event));\n\n        this.elementRef.nativeElement.addEventListener('click', (event: MouseEvent) => {\n            if (this.elementRef.nativeElement.hasAttribute('disabled')) {\n                event.stopImmediatePropagation();\n            }\n        }, true);\n\n        events.forEach((event) => this.elementRef.nativeElement.addEventListener('click', event));\n    }\n}\n\n@Directive({\n    selector: MC_NAVBAR_CONTAINER\n})\nexport class McNavbarContainer {\n    @Input()\n    position: McNavbarContainerPositionType = 'left';\n\n    @HostBinding('class')\n    get cssClasses(): string {\n        return this.position === 'left' ? 'mc-navbar-left' : 'mc-navbar-right';\n    }\n}\n\nclass CollapsibleItem {\n    private _collapsed: boolean = false;\n\n    constructor(\n        public element: HTMLElement,\n        public width: number\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        this._collapsed = collapsed;\n\n        this.updateCollapsedClass();\n    }\n\n    private updateCollapsedClass() {\n        if (this._collapsed) {\n            this.element.classList.add(COLLAPSED_CLASS);\n        } else {\n            this.element.classList.remove(COLLAPSED_CLASS);\n        }\n\n    }\n}\n\nclass CachedItemWidth {\n\n    get canCollapse(): boolean {\n        return this.itemsForCollapse.length > 0;\n    }\n\n    private _collapsedItemsWidth: number;\n\n    get collapsedItemsWidth(): number {\n        if (this._collapsedItemsWidth !== undefined) {\n            return this._collapsedItemsWidth;\n        }\n\n        this.calculateAndCacheCollapsedItemsWidth();\n\n        return this._collapsedItemsWidth;\n    }\n\n    constructor(\n        public element: HTMLElement,\n        public width: number,\n        public itemsForCollapse: CollapsibleItem[] = []\n    ) {}\n\n    processCollapsed(collapsed: boolean) {\n        if (this.itemsForCollapse.length > 0) {\n            this.updateTitle(collapsed);\n        }\n\n        this.itemsForCollapse.forEach((item) => item.processCollapsed(collapsed));\n    }\n\n    private calculateAndCacheCollapsedItemsWidth() {\n        this._collapsedItemsWidth = this.itemsForCollapse\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getTitle(): string {\n        const computedTitle = this.element.getAttribute('computedTitle');\n\n        return computedTitle\n            ? decodeURI(computedTitle)\n            : (this.itemsForCollapse.length > 0 ? this.itemsForCollapse[0].element.innerText : '');\n    }\n\n    private updateTitle(collapsed: boolean) {\n        if (collapsed) {\n            this.element.setAttribute('title', this.getTitle());\n        } else {\n            this.element.removeAttribute('title');\n        }\n    }\n}\n\n\n@Component({\n    selector: MC_NAVBAR,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    template: `\n        <nav class=\"mc-navbar\">\n            <ng-content select=\"[${MC_NAVBAR_CONTAINER}],${MC_NAVBAR_CONTAINER}\"></ng-content>\n        </nav>\n    `,\n    styleUrls: ['./navbar.css'],\n    encapsulation: ViewEncapsulation.None\n})\nexport class McNavbar implements AfterViewInit, OnDestroy {\n\n    private readonly forceRecalculateItemsWidth: boolean = false;\n    private readonly resizeDebounceInterval: number = 100;\n    private readonly firstLevelElement: string = MC_NAVBAR_CONTAINER;\n    private readonly secondLevelElements: string[] = [\n        MC_NAVBAR_ITEM,\n        MC_NAVBAR_BRAND,\n        MC_NAVBAR_TITLE\n    ];\n\n    private _totalItemsWidths: number;\n    private _itemsWidths: CachedItemWidth[];\n\n    private get maxAllowedWidth(): number {\n        return this._elementRef.nativeElement.querySelector('nav').getBoundingClientRect().width;\n    }\n\n    private get itemsWidths(): CachedItemWidth[] {\n        if (this._itemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._itemsWidths;\n        }\n\n        this.calculateAndCacheItemsWidth();\n\n        return this._itemsWidths;\n    }\n\n    private get totalItemsWidth(): number {\n        if (this._totalItemsWidths !== undefined && !this.forceRecalculateItemsWidth) {\n            return this._totalItemsWidths;\n        }\n\n        this.calculateAndCacheTotalItemsWidth();\n\n        return this._totalItemsWidths;\n    }\n\n    private _resizeSubscription: Subscription;\n\n    constructor(\n        private _elementRef: ElementRef\n    ) {\n        const resizeObserver = fromEvent(window, 'resize')\n            .pipe(debounceTime(this.resizeDebounceInterval));\n\n        this._resizeSubscription = resizeObserver.subscribe(this.updateCollapsed.bind(this));\n    }\n\n    updateCollapsed(): void {\n        let collapseDelta = this.totalItemsWidth - this.maxAllowedWidth;\n\n        for (let i = this.itemsWidths.length - 1; i >= 0; i--) {\n            const item = this.itemsWidths[i];\n\n            if (!item.canCollapse) {\n                continue;\n            }\n\n            item.processCollapsed(collapseDelta > 0);\n            collapseDelta -= item.collapsedItemsWidth;\n        }\n    }\n\n    ngAfterViewInit(): void {\n        // Note: this wait is required for loading and rendering fonts for icons;\n        // unfortunately we cannot control font rendering\n        setTimeout(() => this.updateCollapsed(), 0);\n    }\n\n    ngOnDestroy() {\n        this._resizeSubscription.unsubscribe();\n    }\n\n    private calculateAndCacheTotalItemsWidth() {\n        this._totalItemsWidths = this.itemsWidths\n            .reduce((acc, item) => acc + item.width, 0);\n    }\n\n    private getOuterElementWidth(element: HTMLElement): number {\n        const baseWidth  = element.getBoundingClientRect().width;\n        const marginRight = parseInt(getComputedStyle(element).getPropertyValue('margin-right'));\n        const marginLeft = parseInt(getComputedStyle(element).getPropertyValue('margin-left'));\n\n        return baseWidth + marginRight + marginLeft;\n    }\n\n    private calculateAndCacheItemsWidth() {\n        const allItemsSelector = this.secondLevelElements\n            .map((e: string) => `${this.firstLevelElement}>${e}`);\n        const allItems: HTMLElement[] = Array.from(this._elementRef.nativeElement.querySelectorAll(allItemsSelector));\n\n        this._itemsWidths = allItems\n            .map((el) => new CachedItemWidth(el, this.getOuterElementWidth(el), this.getItemsForCollapse(el)));\n    }\n\n    private getItemsForCollapse(element: HTMLElement): CollapsibleItem[] {\n        const icon = element.querySelector(`[${MC_ICON}],${MC_NAVBAR_LOGO},[${MC_NAVBAR_LOGO}]`);\n\n        if (!icon) {\n            return [];\n        }\n\n        return Array.from(element.querySelectorAll(MC_NAVBAR_TITLE))\n            .map((el) => new CollapsibleItem(<HTMLElement> el, el.getBoundingClientRect().width));\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport {\n    McNavbar,\n    McNavbarContainer,\n    McNavbarItem,\n    McNavbarTitle,\n    McNavbarBrand,\n    McNavbarLogo\n} from './navbar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule,\n        McIconModule\n    ],\n    exports: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ],\n    declarations: [\n        McNavbar,\n        McNavbarContainer,\n        McNavbarTitle,\n        McNavbarItem,\n        McNavbarBrand,\n        McNavbarLogo\n    ]\n})\nexport class McNavbarModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, CanColorCtor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressBarMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressBarBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressBarMixinBase:\n    CanColorCtor &\n    typeof McProgressBarBase =\n        mixinColor(McProgressBarBase);\n\n@Component({\n    selector: 'mc-progress-bar',\n    templateUrl: './progress-bar.component.html',\n    styleUrls: ['./progress-bar.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-bar',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressBar extends _McProgressBarMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-bar-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressBarMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McProgressBar\n} from './progress-bar.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressBar\n    ],\n    declarations: [\n        McProgressBar\n    ]\n})\nexport class McProgressBarModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ViewEncapsulation,\n    ElementRef,\n    Input\n} from '@angular/core';\nimport { CanColor, CanColorCtor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\n\n\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\nlet idIterator = 0;\n\nconst MIN_PERCENT = 0;\nconst MAX_PERCENT = 100;\n\nexport class McProgressSpinnerBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McProgressSpinnerMixinBase:\n    CanColorCtor &\n    typeof McProgressSpinnerBase =\n        mixinColor(McProgressSpinnerBase);\n\nconst MAX_DASH_ARRAY = 273;\n\n@Component({\n    selector: 'mc-progress-spinner',\n    templateUrl: './progress-spinner.component.html',\n    styleUrls: ['./progress-spinner.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    host: {\n        class: 'mc-progress-spinner',\n        '[attr.id]': 'id'\n    }\n})\nexport class McProgressSpinner extends _McProgressSpinnerMixinBase implements CanColor {\n    @Input() id: string = `mc-progress-spinner-${idIterator++}`;\n    @Input() value: number = 0;\n    @Input() mode: ProgressSpinnerMode = 'determinate';\n    @Input() color: ThemePalette = ThemePalette.Primary;\n\n    constructor(elementRef: ElementRef) {\n        super(elementRef);\n    }\n\n    get percentage(): number {\n        return Math.max(MIN_PERCENT, Math.min(MAX_PERCENT, this.value)) / MAX_PERCENT;\n    }\n\n    get dashOffsetPercent(): string {\n        return `${MAX_DASH_ARRAY - this.percentage * MAX_DASH_ARRAY}%`;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport { McProgressSpinner } from './progress-spinner.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        PlatformModule\n    ],\n    exports: [\n        McProgressSpinner\n    ],\n    declarations: [\n        McProgressSpinner\n    ]\n})\nexport class McProgressSpinnerModule {}\n","import {\n    AfterContentInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    ContentChildren,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    Output,\n    QueryList,\n    ViewEncapsulation,\n    ChangeDetectorRef,\n    Inject,\n    OnDestroy,\n    OnInit,\n    ViewChild\n} from '@angular/core';\n\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport { Subscription } from 'rxjs';\n\nimport { FocusKeyManager, IFocusableOption } from '@ptsecurity/cdk/a11y';\nimport { SelectionModel } from '@ptsecurity/cdk/collections';\nimport { END, ENTER, HOME, PAGE_DOWN, PAGE_UP, SPACE } from '@ptsecurity/cdk/keycodes';\n\nimport {\n    McLine,\n    McLineSetter,\n    CanDisable,\n    mixinDisabled,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n    exportAs: 'mcListOption',\n    selector: 'mc-list-option',\n    host: {\n        tabindex: '-1',\n\n        class: 'mc-list-option',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-focused]': '_hasFocus',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()',\n        '(click)': '_handleClick()'\n    },\n    templateUrl: 'list-option.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListOption implements AfterContentInit, OnDestroy, OnInit, IFocusableOption {\n    _hasFocus: boolean = false;\n\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    @ViewChild('text') _text: ElementRef;\n\n    // Whether the label should appear before or after the checkbox. Defaults to 'after'\n    @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n    @Input() value: any;\n\n    @Input()\n    get disabled() {\n        return this._disabled || (this.listSelection && this.listSelection.disabled);\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    @Input()\n    get selected(): boolean {\n        return this.listSelection.selectedOptions && this.listSelection.selectedOptions.isSelected(this) || false;\n    }\n\n    set selected(value: boolean) {\n        const isSelected = toBoolean(value);\n\n        if (isSelected !== this._selected) {\n            this.setSelected(isSelected);\n\n            this.listSelection._reportValueChange();\n        }\n    }\n\n    private _lineSetter: McLineSetter;\n    private _selected = false;\n    private _disabled = false;\n\n    constructor(\n        private _element: ElementRef,\n        private _changeDetector: ChangeDetectorRef,\n        @Inject(forwardRef(() => McListSelection))\n        public listSelection: McListSelection\n    ) {}\n\n    ngOnInit() {\n        if (this._selected) {\n            // List options that are selected at initialization can't be reported properly to the form\n            // control. This is because it takes some time until the selection-list knows about all\n            // available options. Also it can happen that the ControlValueAccessor has an initial value\n            // that should be used instead. Deferring the value change report to the next tick ensures\n            // that the form control value is not being overwritten.\n            const wasSelected = this._selected;\n\n            Promise.resolve().then(() => {\n                if (this._selected || wasSelected) {\n                    this.selected = true;\n                    this._changeDetector.markForCheck();\n                }\n            });\n        }\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    ngOnDestroy(): void {\n        if (this.selected) {\n            // We have to delay this until the next tick in order\n            // to avoid changed after checked errors.\n            Promise.resolve().then(() => this.selected = false);\n        }\n\n        this.listSelection._removeOptionFromList(this);\n    }\n\n    toggle(): void {\n        this.selected = !this.selected;\n    }\n\n    focus(): void {\n        this._element.nativeElement.focus();\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    getLabel() {\n        return this._text ? this._text.nativeElement.textContent : '';\n    }\n\n    setSelected(selected: boolean) {\n        if (this._selected === selected || !this.listSelection.selectedOptions) { return; }\n\n        this._selected = selected;\n\n        if (selected) {\n            this.listSelection.selectedOptions.select(this);\n        } else {\n            this.listSelection.selectedOptions.deselect(this);\n        }\n\n        this._changeDetector.markForCheck();\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    _handleClick() {\n        if (this.disabled) { return; }\n\n        this.listSelection.setFocusedOption(this);\n    }\n\n    _handleFocus() {\n        if (this.disabled || this._hasFocus) { return; }\n\n        this._hasFocus = true;\n    }\n\n    _handleBlur() {\n        this._hasFocus = false;\n\n        this.listSelection._onTouched();\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n\n\nexport const MC_SELECTION_LIST_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McListSelection),\n    multi: true\n};\n\n// Change event that is being fired whenever the selected state of an option changes. */\nexport class McListSelectionChange {\n    constructor(\n        // Reference to the selection list that emitted the event.\n        public source: McListSelection,\n        // Reference to the option that has been changed.\n        public option: McListOption\n    ) {}\n}\n\n\nexport class McListSelectionBase {}\n\nexport const _McListSelectionMixinBase = mixinDisabled(McListSelectionBase);\n\n@Component({\n    exportAs: 'mcListSelection',\n    selector: 'mc-list-selection',\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'tabIndex'],\n    host: {\n        class: 'mc-list-selection',\n        '[tabIndex]': 'tabIndex',\n        '(focus)': 'focus()',\n        '(blur)': '_onTouched()',\n        '(keydown)': '_onKeyDown($event)',\n        '(window:resize)': 'updateScrollSize()'\n    },\n    providers: [MC_SELECTION_LIST_VALUE_ACCESSOR],\n    preserveWhitespaces: false\n})\nexport class McListSelection extends _McListSelectionMixinBase implements\n    IFocusableOption, CanDisable, AfterContentInit, ControlValueAccessor {\n\n    _keyManager: FocusKeyManager<McListOption>;\n\n    // The option components contained within this selection-list.\n    @ContentChildren(McListOption) options: QueryList<McListOption>;\n\n    tabIndex: number;\n\n    autoSelect: boolean;\n    noUnselect: boolean;\n    multiple: boolean;\n\n    // todo temporary solution\n    withShift: boolean;\n    withCtrl: boolean;\n\n    @Input() horizontal: boolean = false;\n\n    // Emits a change event whenever the selected state of an option changes.\n    @Output() readonly selectionChange: EventEmitter<McListSelectionChange> = new EventEmitter<McListSelectionChange>();\n\n    selectedOptions: SelectionModel<McListOption>;\n\n    // Used for storing the values that were assigned before the options were initialized.\n    private _tempValues: string[] | null;\n\n    private _modelChanges = Subscription.EMPTY;\n\n    constructor(\n        private _element: ElementRef,\n        @Attribute('tabindex') tabIndex: string,\n        @Attribute('auto-select') autoSelect: string,\n        @Attribute('no-unselect') noUnselect: string,\n        @Attribute('multiple') multiple: string\n    ) {\n        super();\n\n        this.autoSelect = autoSelect === null ? true : toBoolean(autoSelect);\n        this.multiple = multiple === null ? true : toBoolean(multiple);\n        this.noUnselect = noUnselect === null ? true : toBoolean(noUnselect);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n\n        this.selectedOptions = new SelectionModel<McListOption>(this.multiple);\n    }\n\n    ngAfterContentInit(): void {\n        this.horizontal = toBoolean(this.horizontal);\n\n        this._keyManager = new FocusKeyManager<McListOption>(this.options)\n            .withTypeAhead()\n            .withVerticalOrientation(!this.horizontal)\n            .withHorizontalOrientation(this.horizontal ? 'ltr' : null);\n\n        if (this._tempValues) {\n            this._setOptionsFromValues(this._tempValues);\n            this._tempValues = null;\n        }\n\n        // Sync external changes to the model back to the options.\n        this._modelChanges = this.selectedOptions.onChange!.subscribe((event) => {\n            for (const item of event.added) {\n                item.selected = true;\n            }\n\n            for (const item of event.removed) {\n                item.selected = false;\n            }\n        });\n\n        this.updateScrollSize();\n    }\n\n    ngOnDestroy() {\n        this._modelChanges.unsubscribe();\n    }\n\n    focus() {\n        this._element.nativeElement.focus();\n    }\n\n    selectAll() {\n        this.options.forEach((option) => option.setSelected(true));\n\n        this._reportValueChange();\n    }\n\n    deselectAll() {\n        this.options.forEach((option) => option.setSelected(false));\n\n        this._reportValueChange();\n    }\n\n    updateScrollSize(): void {\n        if (this.horizontal || !this.options.first) { return; }\n\n        this._keyManager.withScrollSize(Math.floor(this._getHeight() / this.options.first._getHeight()));\n    }\n\n    // Sets the focused option of the selection-list.\n    setFocusedOption(option: McListOption): void {\n        this._keyManager.updateActiveItem(option);\n\n        if (this.withShift && this.multiple) {\n            const previousIndex = this._keyManager.previousActiveItemIndex;\n            const activeIndex = this._keyManager.activeItemIndex;\n\n            if (previousIndex < activeIndex) {\n                this.options.forEach((item, index) => {\n                    if (index >= previousIndex && index <= activeIndex) { item.setSelected(true); }\n                });\n            } else {\n                this.options.forEach((item, index) => {\n                    if (index >= activeIndex && index <= previousIndex) { item.setSelected(true); }\n                });\n            }\n\n            this.withShift = false;\n        } else if (this.withCtrl) {\n            this.withCtrl = false;\n\n            if (!this._canDeselectLast(option)) { return; }\n\n            option.toggle();\n        } else {\n            if (this.autoSelect) {\n                this.options.forEach((item) => item.setSelected(false));\n                option.setSelected(true);\n            }\n        }\n\n        this._emitChangeEvent(option);\n        this._reportValueChange();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(values: string[]): void {\n        if (this.options) {\n            this._setOptionsFromValues(values || []);\n        } else {\n            this._tempValues = values;\n        }\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void): void {\n        this._onChange = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: () => void): void {\n        this._onTouched = fn;\n    }\n\n    // Implemented as a part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean): void {\n        if (this.options) {\n            this.options.forEach((option) => option.disabled = isDisabled);\n        }\n    }\n\n    getSelectedOptionValues(): string[] {\n        return this.options.filter((option) => option.selected).map((option) => option.value);\n    }\n\n    // Toggles the selected state of the currently focused option.\n    toggleFocusedOption(): void {\n        const focusedIndex = this._keyManager.activeItemIndex;\n\n        if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n            const focusedOption: McListOption = this.options.toArray()[focusedIndex];\n\n            if (focusedOption && this._canDeselectLast(focusedOption)) {\n                focusedOption.toggle();\n\n                // Emit a change event because the focused option changed its state through user interaction.\n                this._emitChangeEvent(focusedOption);\n            }\n        }\n    }\n\n    _canDeselectLast(listOption: McListOption): boolean {\n        return !(this.noUnselect && this.selectedOptions.selected.length === 1 && listOption.selected);\n    }\n\n    _getHeight(): number {\n        return this._element.nativeElement.getClientRects()[0].height;\n    }\n\n    // View to model callback that should be called if the list or its options lost focus.\n    _onTouched: () => void = () => {};\n\n    // Removes an option from the selection list and updates the active item.\n    _removeOptionFromList(option: McListOption) {\n        if (option._hasFocus) {\n            const optionIndex = this._getOptionIndex(option);\n\n            // Check whether the option is the last item\n            if (optionIndex > 0) {\n                this._keyManager.setPreviousItemActive();\n            } else if (optionIndex === 0 && this.options.length > 1) {\n                this._keyManager.setNextItemActive();\n            }\n        }\n    }\n\n    _onKeyDown(event: KeyboardEvent) {\n        const keyCode = event.keyCode;\n        this.withShift = event.shiftKey;\n        this.withCtrl = event.ctrlKey;\n\n        switch (keyCode) {\n            case SPACE:\n            case ENTER:\n                this.toggleFocusedOption();\n                event.preventDefault();\n\n                break;\n            case HOME:\n                this._keyManager.setFirstItemActive();\n                event.preventDefault();\n\n                break;\n            case END:\n                this._keyManager.setLastItemActive();\n                event.preventDefault();\n\n                break;\n            case PAGE_UP:\n                if (!this.horizontal) { this._keyManager.setPreviousPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            case PAGE_DOWN:\n                if (!this.horizontal) { this._keyManager.setNextPageItemActive(); }\n\n                event.preventDefault();\n\n                break;\n            default:\n                this._keyManager.onKeydown(event);\n        }\n    }\n\n    // Reports a value change to the ControlValueAccessor\n    _reportValueChange() {\n        if (this.options) {\n            this._onChange(this.getSelectedOptionValues());\n        }\n    }\n\n    // Emits a change event if the selected state of an option changed.\n    _emitChangeEvent(option: McListOption) {\n        this.selectionChange.emit(new McListSelectionChange(this, option));\n    }\n\n    // Returns the option with the specified value.\n    private _getOptionByValue(value: string): McListOption | undefined {\n        return this.options.find((option) => option.value === value);\n    }\n\n    // Sets the selected options based on the specified values.\n    private _setOptionsFromValues(values: string[]) {\n        this.options.forEach((option) => option.setSelected(false));\n\n        values\n            .map((value) => this._getOptionByValue(value))\n            .filter(Boolean)\n            .forEach((option) => option!.setSelected(true));\n    }\n\n    /**\n     * Utility to ensure all indexes are valid.\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of options.\n     */\n    private _isValidIndex(index: number): boolean {\n        return index >= 0 && index < this.options.length;\n    }\n\n    // Returns the index of the specified list option.\n    private _getOptionIndex(option: McListOption): number {\n        return this.options.toArray().indexOf(option);\n    }\n\n    // View to model callback that should be called whenever the selected options change.\n    private _onChange: (value: any) => void = (_: any) => {};\n}\n","// todo пока не делаем, перенесено из материала, но у нас в доках таких простых списков нет.\nimport {\n    AfterContentInit, ChangeDetectionStrategy, Component, ContentChildren, Directive, ElementRef, QueryList,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { McLine, McLineSetter } from '@ptsecurity/mosaic/core';\n\n\nexport class McListBase {}\n\n@Component({\n    selector: 'mc-list',\n    host: { class: 'mc-list' },\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./list.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McList extends McListBase {}\n\n\n/**\n * Directive whose purpose is to add the mc- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n    selector: '[mc-subheader], [mcSubheader]',\n    host: { class: 'mc-subheader' }\n})\nexport class McListSubheaderCssStyler {}\n\n\n// Boilerplate for applying mixins to McListItem.\nexport class McListItemBase {}\n\n@Component({\n    selector: 'mc-list-item, a[mc-list-item]',\n    host: {\n        class: 'mc-list-item',\n        '(focus)': '_handleFocus()',\n        '(blur)': '_handleBlur()'\n    },\n    templateUrl: './list-item.html',\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McListItem extends McListItemBase implements AfterContentInit {\n    @ContentChildren(McLine) _lines: QueryList<McLine>;\n\n    private _lineSetter: McLineSetter;\n\n    constructor(private _element: ElementRef) {\n        super();\n    }\n\n    ngAfterContentInit() {\n        this._lineSetter = new McLineSetter(this._lines, this._element);\n    }\n\n    _handleFocus() {\n        this._element.nativeElement.classList.add('mc-focused');\n    }\n\n    _handleBlur() {\n        this._element.nativeElement.classList.remove('mc-focused');\n    }\n\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLineModule } from '@ptsecurity/mosaic/core';\n\nimport { McListSelection, McListOption } from './list-selection.component';\nimport { McList, McListItem, McListSubheaderCssStyler } from './list.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        McLineModule\n    ],\n    exports: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ],\n    declarations: [\n        McList,\n        McListSelection,\n        McListItem,\n        McListOption,\n        McListSubheaderCssStyler\n    ]\n})\nexport class McListModule {}\n","import {\n    Input,\n    Attribute,\n    Component,\n    ElementRef,\n    OnDestroy,\n    ViewEncapsulation,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef\n} from '@angular/core';\n\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport {\n    CanDisable,\n    HasTabIndex,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\n\nexport class McLinkBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\nexport const _McLinkBase = mixinTabIndex(mixinDisabled(McLinkBase));\n\n@Component({\n    selector: 'a.mc-link',\n    template: `<ng-content></ng-content>`,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    exportAs: 'mcLink',\n    styleUrls: ['./link.css'],\n    inputs: ['disabled'],\n    host: {\n        '[attr.disabled]': 'disabled || null',\n        '[attr.tabindex]': 'tabIndex'\n    }\n})\n\nexport class McLink extends _McLinkBase implements OnDestroy, HasTabIndex, CanDisable {\n\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        const newValue = toBoolean(value);\n\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._changeDetector.markForCheck();\n        }\n    }\n\n    private _disabled = false;\n\n    constructor(\n        @Attribute('tabindex') tabIndex: string,\n        public elementRef: ElementRef,\n        private _focusMonitor: FocusMonitor,\n        private _changeDetector: ChangeDetectorRef) {\n\n        super(elementRef);\n        this._focusMonitor.monitor(elementRef.nativeElement, true);\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this.elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this._getHostElement().focus();\n    }\n\n    _getHostElement() {\n        return this.elementRef.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\n\nimport { McLink } from './link.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule\n    ],\n    declarations: [McLink],\n    exports: [McLink]\n})\nexport class McLinkModule {}\n","import { Injectable, Optional, SkipSelf } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\n\nimport { McModalRef } from './modal-ref.class';\n\n\ninterface IRegisteredMeta {\n    modalRef: McModalRef;\n    afterOpenSubscription: Subscription;\n    afterCloseSubscription: Subscription;\n}\n\n@Injectable()\nexport class McModalControlService {\n\n    // Track singleton afterAllClose through over the injection tree\n    get afterAllClose(): Subject<void> {\n        return this.parentService ? this.parentService.afterAllClose : this.rootAfterAllClose;\n    }\n\n    // Track singleton openModals array through over the injection tree\n    get openModals(): McModalRef[] {\n        return this.parentService ? this.parentService.openModals : this.rootOpenModals;\n    }\n\n    // @ts-ignore\n    private rootOpenModals: McModalRef[] = this.parentService ? null : [];\n    // @ts-ignore\n    private rootAfterAllClose: Subject<void> = this.parentService ? null : new Subject<void>();\n    // @ts-ignore\n    private rootRegisteredMetaMap: Map<McModalRef, IRegisteredMeta> = this.parentService ? null : new Map();\n\n    // Registered modal for later usage\n    private get registeredMetaMap(): Map<McModalRef, IRegisteredMeta> {\n        return this.parentService ? this.parentService.registeredMetaMap : this.rootRegisteredMetaMap;\n    }\n\n    constructor(\n        @Optional() @SkipSelf() private parentService: McModalControlService) {\n    }\n\n    // Register a modal to listen its open/close\n    registerModal(modalRef: McModalRef): void {\n        if (!this.hasRegistered(modalRef)) {\n            const afterOpenSubscription = modalRef.afterOpen.subscribe(() => this.openModals.push(modalRef));\n            const afterCloseSubscription = modalRef.afterClose.subscribe(() => this.removeOpenModal(modalRef));\n\n            this.registeredMetaMap.set(modalRef, {modalRef, afterOpenSubscription, afterCloseSubscription});\n        }\n    }\n\n    hasRegistered(modalRef: McModalRef): boolean {\n        return this.registeredMetaMap.has(modalRef);\n    }\n\n    // Close all registered opened modals\n    closeAll(): void {\n        let i = this.openModals.length;\n\n        while (i--) {\n            this.openModals[i].close();\n        }\n    }\n\n    private removeOpenModal(modalRef: McModalRef): void {\n        const index = this.openModals.indexOf(modalRef);\n\n        if (index > -1) {\n            this.openModals.splice(index, 1);\n\n            if (!this.openModals.length) {\n                this.afterAllClose.next();\n            }\n        }\n    }\n}\n","import { Observable } from 'rxjs';\n\nimport { McModalComponent } from './modal.component';\n\n\n/**\n * API class that public to users to handle the modal instance.\n * McModalRef is aim to avoid accessing to the modal instance directly by users.\n */\nexport abstract class McModalRef<T = any, R = any> {\n    abstract afterOpen: Observable<void>;\n    abstract afterClose: Observable<R>;\n\n    abstract open(): void;\n\n    abstract close(result?: R): void;\n\n    abstract destroy(result?: R): void;\n\n    /**\n     * Trigger the nzOnOk/nzOnCancel by manual\n     */\n    abstract triggerOk(): void;\n\n    abstract triggerCancel(): void;\n\n    // /**\n    //  * Return the ComponentRef of nzContent when specify nzContent as a Component\n    //  * Note: this method may return undefined if the Component has not ready yet.\n    //    (it only available after Modal's ngOnInit)\n    //  */\n    // abstract getContentComponentRef(): ComponentRef<{}>;\n\n    /**\n     * Return the component instance of nzContent when specify nzContent as a Component\n     * Note: this method may return undefined if the Component has not ready yet.\n     * (it only available after Modal's ngOnInit)\n     */\n    abstract getContentComponent(): T;\n\n    /**\n     * Get the dom element of this Modal\n     */\n    abstract getElement(): HTMLElement;\n\n    /**\n     * Get the instance of the Modal itself\n     */\n    abstract getInstance(): McModalComponent;\n}\n","export interface IClickPosition {\n    x: number;\n    y: number;\n}\n\nexport class ModalUtil {\n    private lastPosition: IClickPosition;\n\n    constructor(private document: Document) {\n        this.lastPosition = {x: -1, y: -1};\n        this.listenDocumentClick();\n    }\n\n    getLastClickPosition(): IClickPosition {\n        return this.lastPosition;\n    }\n\n    listenDocumentClick(): void {\n        this.document.addEventListener('click', (event: MouseEvent) => {\n            this.lastPosition = {x: event.clientX, y: event.clientY};\n        });\n    }\n}\n\nexport default new ModalUtil(document);\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McButton,\n    McAnchor,\n    McIconButton,\n    McButtonCSSStyler,\n    McXSButtonCSSStyler,\n    McSMButtonCSSStyler,\n    McLGButtonCSSStyler,\n    McXLButtonCSSStyler,\n    McIconButtonCSSStyler\n} from './button.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McButton,\n        McAnchor,\n        McIconButton,\n        McButtonCSSStyler,\n        McXSButtonCSSStyler,\n        McSMButtonCSSStyler,\n        McLGButtonCSSStyler,\n        McXLButtonCSSStyler,\n        McIconButtonCSSStyler\n    ],\n    declarations: [\n        McButton,\n        McAnchor,\n        McIconButton,\n        McButtonCSSStyler,\n        McXSButtonCSSStyler,\n        McSMButtonCSSStyler,\n        McLGButtonCSSStyler,\n        McXLButtonCSSStyler,\n        McIconButtonCSSStyler\n    ]\n})\nexport class McButtonModule {}\n","import { InjectionToken } from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type McCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MC_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<McCheckboxClickAction>('mc-checkbox-click-action');\n","import {\n    AfterViewInit,\n    Attribute,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Inject,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    ViewChild,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { FocusMonitor, FocusOrigin } from '@ptsecurity/cdk/a11y';\nimport {\n    CanColor, CanColorCtor,\n    CanDisable, CanDisableCtor,\n    HasTabIndex, HasTabIndexCtor,\n    mixinColor,\n    mixinDisabled,\n    mixinTabIndex,\n    toBoolean\n} from '@ptsecurity/mosaic/core';\n\nimport { MC_CHECKBOX_CLICK_ACTION, McCheckboxClickAction } from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mc-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MC_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => McCheckbox),\n    multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n    /** The initial state of the component before any user interaction. */\n    Init,\n    /** The state representing the component when it's becoming checked. */\n    Checked,\n    /** The state representing the component when it's becoming unchecked. */\n    Unchecked,\n    /** The state representing the component when it's becoming indeterminate. */\n    Indeterminate\n}\n\n/** Change event object emitted by McCheckbox. */\nexport class McCheckboxChange {\n    /** The source McCheckbox of the event. */\n    source: McCheckbox;\n    /** The new `checked` value of the checkbox. */\n    checked: boolean;\n}\n\n// Boilerplate for applying mixins to McCheckbox.\n/** @docs-private */\nexport class McCheckboxBase {\n    constructor(public _elementRef: ElementRef) {\n    }\n}\n\nexport const _McCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof McCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisabled(McCheckboxBase)));\n\n\n/**\n * A mosaic checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A McCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n */\n@Component({\n    selector: 'mc-checkbox',\n    templateUrl: 'checkbox.html',\n    styleUrls: ['checkbox.css'],\n    exportAs: 'mcCheckbox',\n    host: {\n        class: 'mc-checkbox',\n        '[id]': 'id',\n        '[attr.id]': 'id',\n        '[class.mc-checkbox-indeterminate]': 'indeterminate',\n        '[class.mc-checkbox-checked]': 'checked',\n        '[class.mc-checkbox-disabled]': 'disabled',\n        '[class.mc-checkbox-label-before]': 'labelPosition == \"before\"'\n    },\n    providers: [MC_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n    inputs: ['color', 'tabIndex'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McCheckbox extends _McCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, OnDestroy, CanColor, CanDisable, HasTabIndex {\n\n    /**\n     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n     * take precedence so this may be omitted.\n     */\n    @Input('aria-label') ariaLabel: string = '';\n\n    /**\n     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n     */\n    @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n    private _uniqueId: string = `mc-checkbox-${++nextUniqueId}`;\n\n    /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n    @Input() id: string = this._uniqueId;\n\n    /** Returns the unique id for the visual hidden input. */\n    get inputId(): string {\n        return `${this.id || this._uniqueId}-input`;\n    }\n\n    /** Whether the checkbox is required. */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = toBoolean(value);\n    }\n\n    private _required: boolean;\n\n    /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n    @Input() labelPosition: 'before' | 'after' = 'after';\n\n    /** Name value will be applied to the input element if present */\n    @Input() name: string | null = null;\n\n    /** Event emitted when the checkbox's `checked` value changes. */\n    @Output() readonly change: EventEmitter<McCheckboxChange> =\n        new EventEmitter<McCheckboxChange>();\n\n    /** Event emitted when the checkbox's `indeterminate` value changes. */\n    @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n    /** The value attribute of the native input element */\n    @Input() value: string;\n\n    /** The native `<input type=\"checkbox\">` element */\n    @ViewChild('input') _inputElement: ElementRef;\n\n    /**\n     * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n     * @docs-private\n     */\n    _onTouched: () => any = () => {\n    }\n\n    private _currentAnimationClass: string = '';\n\n    private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n    private _controlValueAccessorChangeFn: (value: any) => void = () => {\n    }\n\n    constructor(elementRef: ElementRef,\n                private _changeDetectorRef: ChangeDetectorRef,\n                private _focusMonitor: FocusMonitor,\n                @Attribute('tabindex') tabIndex: string,\n                @Optional() @Inject(MC_CHECKBOX_CLICK_ACTION)\n                private _clickAction: McCheckboxClickAction) {\n        super(elementRef);\n\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._inputElement.nativeElement)\n            .subscribe((focusOrigin) => this._onInputFocusChange(focusOrigin));\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._inputElement.nativeElement);\n    }\n\n    /**\n     * Whether the checkbox is checked.\n     */\n    @Input()\n    get checked(): boolean {\n        return this._checked;\n    }\n\n    set checked(value: boolean) {\n        if (value != this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _checked: boolean = false;\n\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    @Input()\n    get disabled() {\n        return this._disabled;\n    }\n\n    set disabled(value: any) {\n        if (value != this.disabled) {\n            this._disabled = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    private _disabled: boolean = false;\n\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    @Input()\n    get indeterminate(): boolean {\n        return this._indeterminate;\n    }\n\n    set indeterminate(value: boolean) {\n        const changed = value != this._indeterminate;\n        this._indeterminate = value;\n\n        if (changed) {\n            if (this._indeterminate) {\n                this._transitionCheckState(TransitionCheckState.Indeterminate);\n            } else {\n                this._transitionCheckState(\n                    this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n    }\n\n    private _indeterminate: boolean = false;\n\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // This method is getting called whenever the label of the checkbox changes.\n        // Since the checkbox uses the OnPush strategy we need to notify it about the change\n        // that has been recognized by the cdkObserveContent directive.\n        this._changeDetectorRef.markForCheck();\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value: any) {\n        this.checked = !!value;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn: (value: any) => void) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn: any) {\n        this._onTouched = fn;\n    }\n\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled: boolean) {\n        this.disabled = isDisabled;\n    }\n\n    _getAriaChecked(): 'true' | 'false' | 'mixed' {\n        return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n    }\n\n    private _transitionCheckState(newState: TransitionCheckState) {\n        const oldState = this._currentCheckState;\n        const element: HTMLElement = this._elementRef.nativeElement;\n\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n\n        this._currentCheckState = newState;\n\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n        }\n    }\n\n    private _emitChangeEvent() {\n        const event = new McCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n    }\n\n    /** Function is called whenever the focus changes for the input element. */\n    private _onInputFocusChange(focusOrigin: FocusOrigin) {\n        if (focusOrigin) {\n            this._onTouched();\n        }\n    }\n\n    /** Toggles the `checked` state of the checkbox. */\n    toggle(): void {\n        this.checked = !this.checked;\n    }\n\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event\n     */\n    _onInputClick(event: Event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && this._clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && this._clickAction !== 'check') {\n\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n\n            this.toggle();\n            this._transitionCheckState(\n                this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        } else if (!this.disabled && this._clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mc-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n\n    /** Focuses the checkbox. */\n    focus(): void {\n        this._focusMonitor.focusVia(this._inputElement.nativeElement, 'keyboard');\n    }\n\n    _onInteractionEvent(event: Event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n}\n","import {\n    Directive,\n    forwardRef,\n    Provider\n} from '@angular/core';\nimport {\n    CheckboxRequiredValidator,\n    NG_VALIDATORS\n} from '@angular/forms';\n\n\nexport const MC_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => McCheckboxRequiredValidator),\n    multi: true\n};\n\n/**\n * Validator for Mosaic checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mc-checkbox`.\n */\n@Directive({\n    selector: `mc-checkbox[required][formControlName],\n             mc-checkbox[required][formControl], mc-checkbox[required][ngModel]`,\n    providers: [MC_CHECKBOX_REQUIRED_VALIDATOR],\n    host: { '[attr.required]': 'required ? \"\" : null' }\n})\nexport class McCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McCheckbox } from './checkbox';\nimport { McCheckboxRequiredValidator } from './checkbox-required-validator';\n\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [McCheckbox, McCheckboxRequiredValidator],\n    declarations: [McCheckbox, McCheckboxRequiredValidator]\n})\nexport class McCheckboxModule {\n}\n","import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\n\n\n@Component({\n    selector: 'mc-divider',\n    host: {\n        class: 'mc-divider',\n        role: 'separator',\n        '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n        '[class.mc-divider-vertical]': 'vertical',\n        '[class.mc-divider-inset]': 'inset'\n    },\n    template: '',\n    styleUrls: ['divider.css'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    preserveWhitespaces: false\n})\nexport class McDivider {\n    // Whether the divider is vertically aligned.\n    @Input()\n    get vertical(): boolean {\n        return this._vertical;\n    }\n\n    set vertical(value: boolean) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n\n    private _vertical: boolean = false;\n\n    // Whether the divider is an inset divider.\n    @Input()\n    get inset(): boolean {\n        return this._inset;\n    }\n\n    set inset(value: boolean) {\n        this._inset = coerceBooleanProperty(value);\n    }\n\n    private _inset: boolean = false;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McDivider } from './divider.component';\n\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [McDivider],\n    declarations: [McDivider]\n})\nexport class McDividerModule {\n}\n","import { Component } from '@angular/core';\n\n\n@Component({\n    selector: 'mc-cleaner',\n    template: '<i mc-icon=\"mc-close-M_16\" class=\"mc-cleaner__icon\"></i>'\n})\nexport class McCleaner {\n}\n","import { NgControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\n\n/** An interface which allows a control to work inside of a `MсFormField`. */\nexport abstract class McFormFieldControl<T> {\n    /** The value of the control. */\n    value: T | null;\n\n    /**\n     * Stream that emits whenever the state of the control changes such that the parent `MсFormField`\n     * needs to run change detection.\n     */\n    readonly stateChanges: Observable<void>;\n\n    /** The element ID for this control. */\n    readonly id: string;\n\n    /** The placeholder for this control. */\n    readonly placeholder: string;\n\n    /** Gets the NgControl for this control. */\n    readonly ngControl: NgControl | null;\n\n    /** Whether the control is focused. */\n    readonly focused: boolean;\n\n    /** Whether the control is empty. */\n    readonly empty: boolean;\n\n    /** Whether the control is required. */\n    readonly required: boolean;\n\n    /** Whether the control is disabled. */\n    readonly disabled: boolean;\n\n    /** Whether the control is in an error state. */\n    readonly errorState: boolean;\n\n    /**\n     * An optional name for the control type that can be used to distinguish `mc-form-field` elements\n     * based on their control type. The form field will add a class,\n     * `mc-form-field-type-{{controlType}}` to its root element.\n     */\n    readonly controlType?: string;\n\n    /** Handles a click on the control's container. */\n    abstract onContainerClick(event: MouseEvent): void;\n}\n","import { Directive, Input } from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n@Directive({\n    selector: 'mc-hint',\n    host: {\n        class: 'mc-hint',\n        '[attr.id]': 'id'\n    }\n})\nexport class McHint {\n    @Input() id: string = `mc-hint-${nextUniqueId++}`;\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcPrefix]'\n})\nexport class McPrefix {\n}\n","import { Directive } from '@angular/core';\n\n\n@Directive({\n    selector: '[mcSuffix]'\n})\nexport class McSuffix {\n}\n","import {\n    AfterContentChecked,\n    AfterContentInit,\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ContentChild,\n    ContentChildren, Directive,\n    ElementRef,\n    QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { ESCAPE } from '@ptsecurity/cdk/keycodes';\nimport { CanColor, CanColorCtor, mixinColor, ThemePalette } from '@ptsecurity/mosaic/core';\nimport { EMPTY, merge } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n\n\nimport { McCleaner } from './cleaner';\nimport { McFormFieldControl } from './form-field-control';\nimport { getMcFormFieldMissingControlError } from './form-field-errors';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McSuffix } from './suffix';\n\n\nlet nextUniqueId = 0;\n\nexport class McFormFieldBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McFormFieldMixinBase: CanColorCtor & typeof McFormFieldBase\n    = mixinColor(McFormFieldBase, ThemePalette.Primary);\n\n@Component({\n    selector: 'mc-form-field',\n    exportAs: 'mcFormField',\n    templateUrl: 'form-field.html',\n    // McInput is a directive and can't have styles, so we need to include its styles here.\n    // The McInput styles are fairly minimal so it shouldn't be a big deal for people who\n    // aren't using McInput.\n    styleUrls: [\n        'form-field.css',\n        '../input/input.css'\n    ],\n    host: {\n        class: 'mc-form-field',\n        '[class.mc-form-field_invalid]': '_control.errorState',\n        '[class.mc-form-field_disabled]': '_control.disabled',\n        '[class.mc-form-field_has-prefix]': 'hasPrefix',\n        '[class.mc-form-field_has-suffix]': 'hasSuffix',\n        '[class.mc-form-field_has-cleaner]': 'canShowCleaner',\n        '[class.mc-focused]': '_control.focused',\n        '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n        '[class.ng-touched]': '_shouldForward(\"touched\")',\n        '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n        '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n        '[class.ng-valid]': '_shouldForward(\"valid\")',\n        '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n        '[class.ng-pending]': '_shouldForward(\"pending\")',\n        '(keydown)': 'onKeyDown($event)'\n    },\n    inputs: ['color'],\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class McFormField extends _McFormFieldMixinBase implements\n    AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n\n    @ContentChild(McFormFieldControl) _control: McFormFieldControl<any>;\n    @ContentChildren(McHint) _hint: QueryList<McHint>;\n    @ContentChildren(McSuffix) _suffix: QueryList<McSuffix>;\n    @ContentChildren(McPrefix) _prefix: QueryList<McPrefix>;\n    @ContentChildren(McCleaner) _cleaner: QueryList<McCleaner>;\n\n    // Unique id for the internal form field label.\n    _labelId = `mc-form-field-label-${nextUniqueId++}`;\n\n    constructor(public _elementRef: ElementRef, private _changeDetectorRef: ChangeDetectorRef) {\n        super(_elementRef);\n    }\n\n    ngAfterContentInit() {\n        this._validateControlChild();\n        if (this._control.controlType) {\n            this._elementRef.nativeElement.classList\n                .add(`mc-form-field-type-${this._control.controlType}`);\n        }\n\n        // Subscribe to changes in the child control state in order to update the form field UI.\n        this._control.stateChanges.pipe(startWith())\n            .subscribe(() => {\n                this._changeDetectorRef.markForCheck();\n            });\n\n        // Run change detection if the value changes.\n        const valueChanges = this._control.ngControl && this._control.ngControl.valueChanges || EMPTY;\n\n        merge(valueChanges)\n            .subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    ngAfterContentChecked() {\n        this._validateControlChild();\n    }\n\n    ngAfterViewInit() {\n        // Avoid animations on load.\n        this._changeDetectorRef.detectChanges();\n    }\n\n    clearValue($event) {\n        $event.stopPropagation();\n\n        if (this._control && this._control.ngControl) {\n            this._control.ngControl.reset();\n        }\n    }\n\n    onContainerClick($event) {\n        return this._control.onContainerClick && this._control.onContainerClick($event);\n    }\n\n    onKeyDown(e: KeyboardEvent): void {\n        if (e.keyCode === ESCAPE &&\n            this._control.focused &&\n            this.hasCleaner) {\n\n            if (this._control && this._control.ngControl) {\n                this._control.ngControl.reset();\n            }\n\n            e.preventDefault();\n        }\n    }\n\n    /** Determines whether a class from the NgControl should be forwarded to the host element. */\n    _shouldForward(prop: string): boolean {\n        const ngControl = this._control ? this._control.ngControl : null;\n\n        return ngControl && ngControl[prop];\n    }\n\n    /** Throws an error if the form field's control is missing. */\n    protected _validateControlChild() {\n        if (!this._control) {\n            throw getMcFormFieldMissingControlError();\n        }\n    }\n\n    get hasHint() {\n        return this._hint && this._hint.length > 0;\n    }\n\n    get hasSuffix() {\n        return this._suffix && this._suffix.length > 0;\n    }\n\n    get hasPrefix() {\n        return this._prefix && this._prefix.length > 0;\n    }\n\n    get hasCleaner() {\n        return this._cleaner && this._cleaner.length > 0;\n    }\n\n    get canShowCleaner() {\n        return this.hasCleaner &&\n        this._control && this._control.ngControl\n            ? this._control.ngControl.value && !this._control.disabled\n            : false;\n    }\n}\n\n@Directive({\n    selector: 'mc-form-field[mcFormFieldWithoutBorders]',\n    exportAs: 'mcFormFieldWithoutBorders',\n    host: { class: 'mc-form-field_without-borders' }\n})\nexport class McFormFieldWithoutBorders {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McIconModule } from '@ptsecurity/mosaic/icon';\n\nimport { McCleaner } from './cleaner';\nimport { McFormField, McFormFieldWithoutBorders } from './form-field';\nimport { McHint } from './hint';\nimport { McPrefix } from './prefix';\nimport { McSuffix } from './suffix';\n\n\n@NgModule({\n    declarations: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner\n    ],\n    imports: [CommonModule, McIconModule],\n    exports: [\n        McFormField,\n        McFormFieldWithoutBorders,\n        McHint,\n        McPrefix,\n        McSuffix,\n        McCleaner\n    ]\n})\nexport class McFormFieldModule {\n}\n","import { InjectionToken } from '@angular/core';\n\n\nexport const MC_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{ value: any }>('MC_INPUT_VALUE_ACCESSOR');\n","import {\n    Directive, DoCheck, ElementRef, Inject, Input, OnChanges,\n    OnDestroy, OnInit, Optional, Self\n} from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@ptsecurity/cdk/platform';\nimport { CanUpdateErrorState, ErrorStateMatcher, mixinErrorState } from '@ptsecurity/mosaic/core';\nimport { McFormFieldControl } from '@ptsecurity/mosaic/form-field';\n\nimport { getMcInputUnsupportedTypeError } from './input-errors';\nimport { MC_INPUT_VALUE_ACCESSOR } from './input-value-accessor';\n\n\nconst MC_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\n\nlet nextUniqueId = 0;\n\nexport class McInputBase {\n    constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n                public _parentForm: NgForm,\n                public _parentFormGroup: FormGroupDirective,\n                public ngControl: NgControl) {\n    }\n}\n\nexport const _McInputMixinBase = mixinErrorState(McInputBase);\n\n\n@Directive({\n    selector: `input[mcInput]`,\n    exportAs: 'mcInput',\n    host: {\n        'class': 'mc-input',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '[attr.placeholder]': 'placeholder',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '(blur)': '_focusChanged(false)',\n        '(focus)': '_focusChanged(true)',\n        '(input)': '_onInput()'\n    },\n    providers: [{ provide: McFormFieldControl, useExisting: McInput }]\n})\nexport class McInput extends _McInputMixinBase implements McFormFieldControl<any>, OnChanges,\n    OnDestroy, DoCheck, CanUpdateErrorState {\n\n    /** An object used to control when error messages are shown. */\n    @Input() errorStateMatcher: ErrorStateMatcher;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean = false;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void> = new Subject<void>();\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    controlType: string = 'mc-input';\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get disabled(): boolean {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n\n        return this._disabled;\n    }\n\n    set disabled(value: boolean) {\n        this._disabled = coerceBooleanProperty(value);\n\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get id(): string {\n        return this._id;\n    }\n\n    set id(value: string) {\n        this._id = value || this._uid;\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input() placeholder: string;\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get required(): boolean {\n        return this._required;\n    }\n\n    set required(value: boolean) {\n        this._required = coerceBooleanProperty(value);\n    }\n\n    // tslint:disable no-reserved-keywords\n    /** Input type of the element. */\n    @Input()\n    get type(): string {\n        return this._type;\n    }\n\n    set type(value: string) {\n        this._type = value || 'text';\n        this._validateType();\n\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    // tslint:enable no-reserved-keywords\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    @Input()\n    get value(): string {\n        return this._inputValueAccessor.value;\n    }\n\n    set value(value: string) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n\n    protected _uid = `mc-input-${nextUniqueId++}`;\n    protected _previousNativeValue: any;\n    protected _disabled = false;\n    protected _id: string;\n    protected _required = false;\n    protected _type = 'text';\n    protected _neverEmptyInputTypes = [\n        'date',\n        'datetime',\n        'datetime-local',\n        'month',\n        'time',\n        'week'\n    ].filter((t) => getSupportedInputTypes().has(t));\n\n    private _inputValueAccessor: { value: any };\n\n    constructor(protected _elementRef: ElementRef,\n                protected _platform: Platform,\n                @Optional() @Self() public ngControl: NgControl,\n                @Optional() _parentForm: NgForm,\n                @Optional() _parentFormGroup: FormGroupDirective,\n                _defaultErrorStateMatcher: ErrorStateMatcher,\n                @Optional() @Self() @Inject(MC_INPUT_VALUE_ACCESSOR) inputValueAccessor: any) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || this._elementRef.nativeElement;\n\n        this._previousNativeValue = this.value;\n\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n\n    ngOnDestroy() {\n        this.stateChanges.complete();\n    }\n\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n    }\n\n    /** Focuses the input. */\n    focus(): void {\n        this._elementRef.nativeElement.focus();\n    }\n\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused: boolean) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean {\n        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput();\n    }\n\n    /**\n     * Implemented as part of McFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n    }\n\n    /** Does some manual dirty checking on the native input `value` property. */\n    protected _dirtyCheckNativeValue() {\n        const newValue = this.value;\n\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n\n    /** Make sure the input is a supported type. */\n    protected _validateType() {\n        if (MC_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n            throw getMcInputUnsupportedTypeError(this._type);\n        }\n    }\n\n    /** Checks whether the input type is one of the types that are never empty. */\n    protected _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n\n    /** Checks whether the input is invalid based on the native validation. */\n    protected _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        const validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n\n        return validity && validity.badInput;\n    }\n}\n\n@Directive({\n    selector: 'input[mcInputMonospace]',\n    exportAs: 'McInputMonospace',\n    host: { class: 'mc-input_monospace' }\n})\nexport class McInputMono {\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { McCommonModule } from '@ptsecurity/mosaic/core';\n\nimport { McInput, McInputMono } from './input';\n\n\n@NgModule({\n    imports: [CommonModule, A11yModule, McCommonModule, FormsModule],\n    exports: [McInput, McInputMono],\n    declarations: [McInput, McInputMono]\n})\nexport class McInputModule {\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","\nexport function isBoolean(val: any): val is boolean { return typeof val === 'boolean'; }\n\nexport function toBoolean(value: any): boolean {\n    return value != null && `${value}` !== 'false';\n}\n","import { NgModule, InjectionToken, Optional, Inject, isDevMode } from '@angular/core';\nimport { BidiModule } from '@ptsecurity/cdk/bidi';\n\n\n// Injection token that configures whether the Mosaic sanity checks are enabled.\nexport const MC_SANITY_CHECKS = new InjectionToken<boolean>('mc-sanity-checks', {\n    providedIn: 'root',\n    factory: MC_SANITY_CHECKS_FACTORY\n});\n\nexport function MC_SANITY_CHECKS_FACTORY(): boolean {\n    return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Mosaic\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n    imports: [ BidiModule ],\n    exports: [ BidiModule ]\n})\nexport class McCommonModule {\n    // Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype).\n    private _hasDoneGlobalChecks = false;\n\n    // Reference to the global `document` object.\n    private _document = typeof document === 'object' && document ? document : null;\n\n    // Reference to the global 'window' object.\n    private _window = typeof window === 'object' && window ? window : null;\n\n    constructor(@Optional() @Inject(MC_SANITY_CHECKS) private _sanityChecksEnabled: boolean) {\n        if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n            this._checkDoctypeIsDefined();\n            this._checkThemeIsPresent();\n            this._hasDoneGlobalChecks = true;\n        }\n    }\n\n    // Whether any sanity checks are enabled\n    private _areChecksEnabled(): boolean {\n        return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n    }\n\n    // Whether the code is running in tests.\n    private _isTestEnv() {\n        return this._window && (this._window['__karma__'] || this._window['jasmine']);\n    }\n\n    private _checkDoctypeIsDefined(): void {\n        if (this._document && !this._document.doctype) {\n            console.warn(\n                'Current document does not have a doctype. This may cause ' +\n                'some Mosaic components not to behave as expected.'\n            );\n        }\n    }\n\n    private _checkThemeIsPresent(): void {\n        if (this._document && typeof getComputedStyle === 'function') {\n            const testElement = this._document.createElement('div');\n\n            testElement.classList.add('mc-theme-loaded-marker');\n            this._document.body.appendChild(testElement);\n\n            const computedStyle = getComputedStyle(testElement);\n\n            // In some situations, the computed style of the test element can be null. For example in\n            // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n            // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n            if (computedStyle && computedStyle.display !== 'none') {\n                console.warn(\n                    'Could not find Mosaic core theme. Most Mosaic ' +\n                    'components may not work as expected. For more info refer ' +\n                    'to the theming guide: link there'\n                );\n            }\n\n            this._document.body.removeChild(testElement);\n        }\n    }\n}\n","import { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanDisable {\n    disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n// Mixin to augment a directive with a `disabled` property.\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n    return class extends base {\n        private _disabled: boolean = false;\n\n        get disabled() {\n            return this._disabled;\n        }\n\n        set disabled(value: any) {\n            this._disabled = coerceBooleanProperty(value);\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n    };\n}\n","import { ElementRef } from '@angular/core';\n\nimport { Constructor } from './constructor';\n\n\nexport interface CanColor {\n    color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\nexport interface HasElementRef {\n    _elementRef: ElementRef;\n}\n\nexport enum ThemePalette {\n    Primary = 'primary',\n    Second = 'second',\n    Warn = 'warn',\n    Default = 'second'\n}\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T,\n    defaultColor: ThemePalette = ThemePalette.Default\n): CanColorCtor & T {\n    return class extends base {\n\n        private _color: ThemePalette;\n\n        get color(): ThemePalette {\n            return this._color;\n        }\n\n        set color(value: ThemePalette) {\n            const colorPalette = value || defaultColor;\n\n            if (colorPalette !== this._color) {\n                if (this._color) {\n                    this._elementRef.nativeElement.classList.remove(`mc-${this._color}`);\n                }\n\n                if (colorPalette) {\n                    this._elementRef.nativeElement.classList.add(`mc-${colorPalette}`);\n                }\n\n                this._color = colorPalette;\n            }\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n\n            this.color = defaultColor;\n        }\n    };\n}\n\n","import { Constructor } from './constructor';\nimport { CanDisable } from './disabled';\n\n\nexport interface HasTabIndex {\n    tabIndex: number;\n}\n\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n// Mixin to augment a directive with a `tabIndex` property.\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n    return class extends base {\n        private _tabIndex: number = defaultTabIndex;\n\n        get tabIndex(): number {\n            return this.disabled ? -1 : this._tabIndex;\n        }\n\n        set tabIndex(value: number) {\n            this._tabIndex = value != null ? value : defaultTabIndex;\n        }\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n    };\n}\n","import { FormControl, FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { Subject } from 'rxjs';\n\nimport { ErrorStateMatcher } from '../error/error-options';\n\nimport { Constructor } from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n    updateErrorState();\n\n    readonly stateChanges: Subject<void>;\n    errorState: boolean;\n    errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n    _parentFormGroup: FormGroupDirective;\n    _parentForm: NgForm;\n    _defaultErrorStateMatcher: ErrorStateMatcher;\n    ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n    : CanUpdateErrorStateCtor & T {\n    return class extends base {\n        /** Whether the component is in an error state. */\n        errorState: boolean = false;\n\n        /**\n         * Stream that emits whenever the state of the input changes such that the wrapping\n         * `MatFormField` needs to run change detection.\n         */\n        readonly stateChanges = new Subject<void>();\n\n        errorStateMatcher: ErrorStateMatcher;\n\n        constructor(...args: any[]) {\n            super(...args);\n        }\n\n        updateErrorState() {\n            const oldState = this.errorState;\n            const parent = this._parentFormGroup || this._parentForm;\n            const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n            const control = this.ngControl ? this.ngControl.control as FormControl : null;\n            const newState = matcher.isErrorState(control, parent);\n\n            if (newState !== oldState) {\n                this.errorState = newState;\n                this.stateChanges.next();\n            }\n        }\n    };\n}\n","import {\n    AfterViewChecked,\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    EventEmitter,\n    Inject,\n    InjectionToken,\n    Input,\n    OnDestroy,\n    Optional,\n    Output,\n    QueryList,\n    ViewEncapsulation\n} from '@angular/core';\nimport { coerceBooleanProperty } from '@ptsecurity/cdk/coercion';\nimport { ENTER, SPACE } from '@ptsecurity/cdk/keycodes';\nimport { Subject } from 'rxjs';\n\nimport { McOptgroup } from './optgroup';\n\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by McOption when selected or deselected. */\nexport class McOptionSelectionChange {\n    constructor(\n        /** Reference to the option that emitted the event. */\n        public source: McOption,\n        /** Whether the change in the option's value was a result of a user action. */\n        public isUserInput = false) {\n    }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface IMcOptionParentComponent {\n    disableRipple?: boolean;\n    multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MC_OPTION_PARENT_COMPONENT =\n    new InjectionToken<IMcOptionParentComponent>('MC_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n    selector: 'mc-option',\n    exportAs: 'mcOption',\n    host: {\n        '[attr.tabindex]': '_getTabIndex()',\n        '[class.mc-selected]': 'selected',\n        '[class.mc-option-multiple]': 'multiple',\n        '[class.mc-active]': 'active',\n        '[id]': 'id',\n        '[class.mc-disabled]': 'disabled',\n        '(click)': '_selectViaInteraction()',\n        '(keydown)': '_handleKeydown($event)',\n        class: 'mc-option'\n    },\n    styleUrls: ['option.css'],\n    templateUrl: 'option.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class McOption implements AfterViewChecked, OnDestroy {\n    /** Whether the wrapping component is in multiple selection mode. */\n    get multiple() {\n        return this._parent && this._parent.multiple;\n    }\n\n    /** The unique ID of the option. */\n    get id(): string {\n        return this._id;\n    }\n\n    /** Whether or not the option is currently selected. */\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    /** The form value of the option. */\n    @Input() value: any;\n\n    /** Whether the option is disabled. */\n    @Input()\n    get disabled() {\n        return (this.group && this.group.disabled) || this._disabled;\n    }\n\n    set disabled(value: any) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n\n    /** Whether ripples for the option are disabled. */\n    get disableRipple() {\n        return this._parent && this._parent.disableRipple;\n    }\n\n    /** Event emitted when the option is selected or deselected. */\n        // tslint:disable-next-line:no-output-on-prefix\n    @Output() readonly onSelectionChange = new EventEmitter<McOptionSelectionChange>();\n\n    /** Emits when the state of the option changes and any parents have to be notified. */\n    readonly _stateChanges = new Subject<void>();\n\n    private _selected = false;\n    private _active = false;\n    private _disabled = false;\n    private readonly _id = `mc-option-${_uniqueIdCounter++}`;\n    private _mostRecentViewValue = '';\n\n    constructor(\n        private readonly _element: ElementRef,\n        private readonly _changeDetectorRef: ChangeDetectorRef,\n        @Optional() @Inject(MC_OPTION_PARENT_COMPONENT) private readonly _parent: IMcOptionParentComponent,\n        @Optional() readonly group: McOptgroup) {\n    }\n\n    /**\n     * Whether or not the option is currently active and ready to be selected.\n     * An active option displays styles as if it is focused, but the\n     * focus is actually retained somewhere else. This comes in handy\n     * for components like autocomplete where focus must remain on the input.\n     */\n    get active(): boolean {\n        return this._active;\n    }\n\n    /**\n     * The displayed value of the option. It is necessary to show the selected option in the\n     * select's trigger.\n     */\n    get viewValue(): string {\n        // TODO(kara): Add input property alternative for node envs.\n        return (this._getHostElement().textContent || '').trim();\n    }\n\n    /** Selects the option. */\n    select(): void {\n        if (!this._selected) {\n            this._selected = true;\n            this._changeDetectorRef.markForCheck();\n            this._emitSelectionChangeEvent();\n        }\n    }\n\n    /** Deselects the option. */\n    deselect(): void {\n        if (this._selected) {\n            this._selected = false;\n            this._changeDetectorRef.markForCheck();\n            this._emitSelectionChangeEvent();\n        }\n    }\n\n    /** Sets focus onto this option. */\n    focus(): void {\n        const element = this._getHostElement();\n\n        if (typeof element.focus === 'function') {\n            element.focus();\n        }\n    }\n\n    /**\n     * This method sets display styles on the option to make it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setActiveStyles(): void {\n        if (!this._active) {\n            this._active = true;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    /**\n     * This method removes display styles on the option that made it appear\n     * active. This is used by the ActiveDescendantKeyManager so key\n     * events will display the proper options as active on arrow key events.\n     */\n    setInactiveStyles(): void {\n        if (this._active) {\n            this._active = false;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel(): string {\n        return this.viewValue;\n    }\n\n    /** Ensures the option is selected when activated from the keyboard. */\n    _handleKeydown(event: KeyboardEvent): void {\n        if (event.keyCode === ENTER || event.keyCode === SPACE) {\n            this._selectViaInteraction();\n\n            // Prevent the page from scrolling down and form submits.\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * `Selects the option while indicating the selection came from the user. Used to\n     * determine if the select's view -> model callback should be invoked.`\n     */\n    _selectViaInteraction(): void {\n        if (!this.disabled) {\n            this._selected = this.multiple ? !this._selected : true;\n            this._changeDetectorRef.markForCheck();\n            this._emitSelectionChangeEvent(true);\n        }\n    }\n\n    /** Returns the correct tabindex for the option depending on disabled state. */\n    _getTabIndex(): string {\n        return this.disabled ? '-1' : '0';\n    }\n\n    /** Gets the host DOM element. */\n    _getHostElement(): HTMLElement {\n        return this._element.nativeElement;\n    }\n\n    ngAfterViewChecked() {\n        // Since parent components could be using the option's label to display the selected values\n        // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n        // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n        // relatively cheap, however we still limit them only to selected options in order to avoid\n        // hitting the DOM too often.\n        if (this._selected) {\n            const viewValue = this.viewValue;\n\n            if (viewValue !== this._mostRecentViewValue) {\n                this._mostRecentViewValue = viewValue;\n                this._stateChanges.next();\n            }\n        }\n    }\n\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n\n    /** Emits the selection change event. */\n    private _emitSelectionChangeEvent(isUserInput = false): void {\n        this.onSelectionChange.emit(new McOptionSelectionChange(this, isUserInput));\n    }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(\n    optionIndex: number, options: QueryList<McOption>,\n    optionGroups: QueryList<McOptgroup>\n): number {\n\n    if (optionGroups.length) {\n        const optionsArray = options.toArray();\n        const groups = optionGroups.toArray();\n\n        let groupCounter = 0;\n\n        for (let i = 0; i < optionIndex + 1; i++) {\n            if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n                groupCounter++;\n            }\n        }\n\n        return groupCounter;\n    }\n\n    return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(\n    optionIndex: number,\n    optionHeight: number,\n    currentScrollPosition: number,\n    panelHeight: number\n): number {\n    const optionOffset = optionIndex * optionHeight;\n\n    if (optionOffset < currentScrollPosition) { return optionOffset; }\n\n    if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n        return Math.max(0, optionOffset - panelHeight + optionHeight);\n    }\n\n    return currentScrollPosition;\n}\n\n","import { ConnectionPositionPair } from '@ptsecurity/cdk/overlay';\n\n\nexport const POSITION_MAP: { [key: string]: ConnectionPositionPair } = {\n    top         : {\n        originX : 'center',\n        originY : 'top',\n        overlayX: 'center',\n        overlayY: 'bottom'\n    },\n    topCenter   : {\n        originX : 'center',\n        originY : 'top',\n        overlayX: 'center',\n        overlayY: 'bottom',\n        offsetX : undefined,\n        offsetY : undefined\n    },\n    topLeft     : {\n        originX : 'start',\n        originY : 'top',\n        overlayX: 'start',\n        overlayY: 'bottom',\n        offsetX : undefined,\n        offsetY : undefined\n    },\n    topRight    : {\n        originX : 'end',\n        originY : 'top',\n        overlayX: 'end',\n        overlayY: 'bottom',\n        offsetX : undefined,\n        offsetY : undefined\n    },\n    right       : {\n        originX : 'end',\n        originY : 'center',\n        overlayX: 'start',\n        overlayY: 'center'\n    },\n    rightTop    : {\n        originX : 'end',\n        originY : 'top',\n        overlayX: 'start',\n        overlayY: 'top',\n        offsetX : undefined,\n        offsetY : undefined\n    },\n    rightBottom : {\n        originX : 'end',\n        originY : 'bottom',\n        overlayX: 'start',\n        overlayY: 'bottom',\n        offsetX : undefined,\n        offsetY : undefined\n    },\n    bottom      : {\n        originX : 'center',\n        originY : 'bottom',\n        overlayX: 'center',\n        overlayY: 'top'\n    },\n    bottomCenter: {\n        originX : 'center',\n        originY : 'bottom',\n        overlayX: 'center',\n        overlayY: 'top'\n    },\n    bottomLeft  : {\n        originX : 'start',\n        originY : 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n    },\n    bottomRight : {\n        originX : 'end',\n        originY : 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n    },\n    left        : {\n        originX : 'start',\n        originY : 'center',\n        overlayX: 'end',\n        overlayY: 'center'\n    },\n    leftTop     : {\n        originX : 'start',\n        originY : 'top',\n        overlayX: 'end',\n        overlayY: 'top'\n    },\n    leftBottom  : {\n        originX : 'start',\n        originY : 'bottom',\n        overlayX: 'end',\n        overlayY: 'bottom'\n    }\n};\n\nexport const DEFAULT_4_POSITIONS = _objectValues([\n    POSITION_MAP.top, POSITION_MAP.right, POSITION_MAP.bottom, POSITION_MAP.left\n]);\n\nfunction arrayMap<T, S>(array: T[], iteratee: (item: T, index: number, arr: T[]) => S): S[] {\n    let index = -1;\n    const length = array == null ? 0 : array.length;\n    const result = Array(length);\n\n    while (++index < length) {\n        result[ index ] = iteratee(array[ index ], index, array);\n    }\n\n    return result;\n}\nfunction baseValues<T>(object: { [key: string]: T } | T[], props: string[]): T[] {\n    return arrayMap(props,  (key) => {\n        return object[ key ];\n    });\n}\nfunction _objectValues<T>(object: { [key: string]: T } | T[]): T[] {\n    return object == null ? [] : baseValues(object, Object.keys(object));\n}\n","export function getMcFormFieldMissingControlError(): Error {\n  return Error('mc-form-field must contain a McFormFieldControl.');\n}\n","export function getMcInputUnsupportedTypeError(inputType: string): Error {\n    return Error(`Input type \"${inputType}\" isn't supported by mcInput.`);\n}\n","/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMcSelectDynamicMultipleError(): Error {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMcSelectNonArrayValueError(): Error {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMcSelectNonFunctionValueError(): Error {\n    return Error('`compareWith` must be a function.');\n}\n","import { NgModule, Directive, ElementRef, QueryList } from '@angular/core';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(McLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n    selector: '[mc-line], [mcLine]',\n    host: { class: 'mc-line' }\n})\nexport class McLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport class McLineSetter {\n    constructor(private _lines: QueryList<McLine>, private _element: ElementRef) {\n        this._setLineClass(this._lines.length);\n\n        this._lines.changes.subscribe(() => {\n            this._setLineClass(this._lines.length);\n        });\n    }\n\n    private _setLineClass(count: number): void {\n        this._resetClasses();\n        if (count === 2 || count === 3) {\n            this._setClass(`mc-${count}-line`, true);\n        } else if (count > 3) {\n            this._setClass(`mc-multi-line`, true);\n        }\n    }\n\n    private _resetClasses(): void {\n        this._setClass('mc-2-line', false);\n        this._setClass('mc-3-line', false);\n        this._setClass('mc-multi-line', false);\n    }\n\n    private _setClass(className: string, isAdd: boolean): void {\n        if (isAdd) {\n            this._element.nativeElement.classList.add(className);\n        } else {\n            this._element.nativeElement.classList.remove(className);\n        }\n    }\n}\n\n@NgModule({\n    imports: [],\n    exports: [McLine],\n    declarations: [McLine]\n})\nexport class McLineModule {}\n","import { Injectable } from '@angular/core';\nimport { FormGroupDirective, NgForm, FormControl } from '@angular/forms';\n\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n    }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({ providedIn: 'root' })\nexport class ErrorStateMatcher {\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n        return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n    }\n}\n","import { Component, ViewEncapsulation, Input, ChangeDetectionStrategy } from '@angular/core';\n\n\nexport type McPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mc-primary .mc-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mc-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n    encapsulation: ViewEncapsulation.None,\n    preserveWhitespaces: false,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    selector: 'mc-pseudo-checkbox',\n    styleUrls: ['pseudo-checkbox.css'],\n    templateUrl: 'pseudo-checkbox.partial.html',\n    host: {\n        class: 'mc-pseudo-checkbox',\n        '[class.mc-pseudo-checkbox_indeterminate]': 'state === \"indeterminate\"',\n        '[class.mc-pseudo-checkbox_checked]': 'state === \"checked\"',\n        '[class.mc-disabled]': 'disabled'\n    }\n})\nexport class McPseudoCheckbox {\n    @Input() state: McPseudoCheckboxState = 'unchecked';\n\n    @Input() disabled: boolean = false;\n}\n","import { NgModule } from '@angular/core';\n\nimport { McPseudoCheckbox } from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n    exports: [McPseudoCheckbox],\n    declarations: [McPseudoCheckbox]\n})\nexport class McPseudoCheckboxModule {}\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\n\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class McMeasureScrollbarService {\n\n    get scrollBarWidth(): number {\n        if (this._scrollbarWidth) {\n            return this._scrollbarWidth;\n        }\n        this.initScrollBarWidth();\n\n        return this._scrollbarWidth;\n    }\n\n    private _scrollbarWidth: number;\n    private scrollbarMeasure = {\n        position: 'absolute',\n        top: '-9999px',\n        width: '50px',\n        height: '50px',\n        overflow: 'scroll'\n    };\n\n    constructor(\n        @Inject(DOCUMENT) private document: any\n    ) {\n        this.initScrollBarWidth();\n    }\n\n    initScrollBarWidth() {\n        const scrollDiv = this.document.createElement('div');\n\n        for (const scrollProp in this.scrollbarMeasure) {\n            if (this.scrollbarMeasure.hasOwnProperty(scrollProp)) {\n                scrollDiv.style[scrollProp] = this.scrollbarMeasure[scrollProp];\n            }\n        }\n\n        this.document.body.appendChild(scrollDiv);\n\n        const width = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n\n        this.document.body.removeChild(scrollDiv);\n        this._scrollbarWidth = width;\n    }\n}\n","import { Component, ViewEncapsulation, Input, ChangeDetectionStrategy } from '@angular/core';\n\nimport { mixinDisabled, CanDisable, CanDisableCtor } from '../common-behaviors/index';\n\n\n// Boilerplate for applying mixins to McOptgroup.\n/** @docs-private */\nexport class McOptgroupBase {}\n\nexport const _McOptgroupMixinBase: CanDisableCtor & typeof McOptgroupBase = mixinDisabled(McOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mc-option`.\n */\n@Component({\n    selector: 'mc-optgroup',\n    exportAs: 'mcOptgroup',\n    templateUrl: 'optgroup.html',\n    encapsulation: ViewEncapsulation.None,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    inputs: ['disabled'],\n    styleUrls: ['optgroup.css'],\n    host: {\n        class: 'mc-optgroup',\n        role: 'group',\n        '[class.mc-optgroup-disabled]': 'disabled',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-labelledby]': '_labelId'\n    }\n})\nexport class McOptgroup extends _McOptgroupMixinBase implements CanDisable {\n    /** Label for the option group. */\n    @Input() label: string;\n\n    /** Unique id for the underlying label. */\n    _labelId: string = `mc-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { McPseudoCheckboxModule } from '../selection/index';\n\nimport { McOptgroup } from './optgroup';\nimport { McOption } from './option';\n\n\n@NgModule({\n    imports: [CommonModule, McPseudoCheckboxModule],\n    exports: [McOption, McOptgroup],\n    declarations: [McOption, McOptgroup]\n})\nexport class McOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","import { InjectionToken } from '@angular/core';\n\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MC_LABEL_GLOBAL_OPTIONS =\n    new InjectionToken<LabelOptions>('mc-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n    /**\n     * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n     * Default behavior is assumed to be `auto`.\n     */\n    float?: FloatLabelType;\n}\n","import {\n    animate,\n    state,\n    style,\n    transition,\n    trigger,\n    AnimationTriggerMetadata,\n} from '@angular/animations';\n\n\nexport const fadeAnimation: AnimationTriggerMetadata =  trigger('fadeAnimation', [\n    state('void', style({ opacity: 0 })),\n    state('true', style({ opacity: 1 })),\n    state('false', style({ opacity: 0 })),\n    transition('* => true', animate('150ms cubic-bezier(0.0, 0.0, 0.2, 1)')),\n    transition('* => void', animate('150ms cubic-bezier(0.4, 0.0, 1, 1)')),\n]);\n","import {\n    Attribute,\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    ViewEncapsulation\n} from '@angular/core';\n\nimport { mixinColor, CanColor, CanColorCtor } from '@ptsecurity/mosaic/core';\n\n\n@Directive({\n    selector: '[mc-icon]',\n    host: { class: 'mc mc-icon' }\n})\nexport class McIconCSSStyler {}\n\n\nexport class McIconBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McIconMixinBase: CanColorCtor & typeof McIconBase\n    = mixinColor(McIconBase);\n\n\n@Component({\n    selector: `[mc-icon]`,\n    template: '<ng-content></ng-content>',\n    styleUrls: ['./icon.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class McIcon extends _McIconMixinBase implements CanColor {\n    constructor(elementRef: ElementRef, @Attribute('mc-icon') iconName: string) {\n        super(elementRef);\n\n        elementRef.nativeElement.classList.add(iconName);\n    }\n\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { A11yModule } from '@ptsecurity/cdk/a11y';\nimport { PlatformModule } from '@ptsecurity/cdk/platform';\n\nimport {\n    McIcon,\n    McIconCSSStyler\n} from './icon.component';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        A11yModule,\n        PlatformModule\n    ],\n    exports: [\n        McIcon,\n        McIconCSSStyler\n    ],\n    declarations: [\n        McIcon,\n        McIconCSSStyler\n    ]\n})\nexport class McIconModule {}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    Directive,\n    ElementRef,\n    OnDestroy,\n    QueryList,\n    ViewEncapsulation,\n    ContentChildren\n} from '@angular/core';\n\nimport { FocusMonitor } from '@ptsecurity/cdk/a11y';\nimport { Platform } from '@ptsecurity/cdk/platform';\n\nimport { mixinColor, mixinDisabled, CanColor, CanDisable, CanDisableCtor, CanColorCtor } from '@ptsecurity/mosaic/core';\nimport { McIcon } from '@ptsecurity/mosaic/icon';\n\n\n@Directive({\n    selector: 'button[mc-button], a[mc-button]',\n    host: { class: 'mc-button' }\n})\nexport class McButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-xs-button], a[mc-xs-button]',\n    host: { class: 'mc-button mc-button_xs' }\n})\nexport class McXSButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-sm-button], a[mc-sm-button]',\n    host: { class: 'mc-button mc-button_sm' }\n})\nexport class McSMButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-lg-button], a[mc-lg-button]',\n    host: { class: 'mc-button mc-button_lg' }\n})\nexport class McLGButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-xl-button], a[mc-xl-button]',\n    host: { class: 'mc-button mc-button_xl' }\n})\nexport class McXLButtonCSSStyler {}\n\n\n@Directive({\n    selector: 'button[mc-icon-button], a[mc-icon-button]',\n    queries: {\n        contentChildren: new ContentChildren(McIcon)\n    },\n    host: { class: 'mc-icon-button' }\n})\nexport class McIconButtonCSSStyler {\n    nativeElement: Element;\n\n    contentChildren: QueryList<McIcon>;\n\n    constructor(elementRef: ElementRef) {\n        this.nativeElement = elementRef.nativeElement;\n    }\n\n    ngAfterContentInit() {\n        this._addClassModificatorForIcons();\n    }\n\n    _addClassModificatorForIcons() {\n        const twoIcons = 2;\n        const icons = this.contentChildren.map((item) => item._elementRef.nativeElement);\n\n        if (icons.length === 1) {\n            const iconElement = icons[0];\n\n            if (!iconElement.previousElementSibling && !iconElement.nextElementSibling) {\n                if (iconElement.nextSibling) {\n                    iconElement.classList.add('mc-icon_left');\n                    this.nativeElement.classList.add('mc-icon-button_left');\n                }\n\n                if (iconElement.previousSibling) {\n                    iconElement.classList.add('mc-icon_right');\n                    this.nativeElement.classList.add('mc-icon-button_right');\n                }\n            }\n        } else if (icons.length === twoIcons) {\n            const firstIconElement = icons[0];\n            const secondIconElement = icons[1];\n\n            firstIconElement.classList.add('mc-icon_left');\n            secondIconElement.classList.add('mc-icon_right');\n        }\n    }\n}\n\n\nexport class McButtonBase {\n    constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _McButtonMixinBase:\n    CanDisableCtor &\n    CanColorCtor &\n    typeof McButtonBase =\n        mixinColor(mixinDisabled(McButtonBase));\n\n\n@Component({\n    selector: `\n        button[mc-button],\n        button[mc-xs-button],\n        button[mc-sm-button],\n        button[mc-lg-button],\n        button[mc-xl-button]\n    `,\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[disabled]': 'disabled || null'\n    }\n})\nexport class McButton extends _McButtonMixinBase implements OnDestroy, CanDisable, CanColor {\n    constructor(elementRef: ElementRef, private _platform: Platform, private _focusMonitor: FocusMonitor) {\n        super(elementRef);\n\n        this._focusMonitor.monitor(this._elementRef.nativeElement, true);\n    }\n\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    focus(): void {\n        this._getHostElement().focus();\n    }\n\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n}\n\n\n@Component({\n    selector: 'a[mc-button], a[mc-xs-button], a[mc-sm-button], a[mc-lg-button], a[mc-xl-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[attr.tabindex]': 'disabled ? -1 : 0',\n        '[attr.disabled]': 'disabled || null',\n        '(click)': '_haltDisabledEvents($event)'\n    }\n})\nexport class McAnchor extends McButton {\n    constructor(platform: Platform, focusMonitor: FocusMonitor, elementRef: ElementRef) {\n        super(elementRef, platform, focusMonitor);\n    }\n\n    _haltDisabledEvents(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\n\n\n@Component({\n    selector: 'button[mc-icon-button]',\n    templateUrl: './button.component.html',\n    styleUrls: ['./button.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    inputs: ['disabled', 'color'],\n    host: {\n        '[attr.tabindex]': 'disabled ? -1 : 0',\n        '[attr.disabled]': 'disabled || null'\n    }\n})\nexport class McIconButton extends McButton {\n    constructor(platform: Platform, focusMonitor: FocusMonitor, elementRef: ElementRef) {\n        super(elementRef, platform, focusMonitor);\n    }\n\n    _haltDisabledEvents(event: Event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n        }\n    }\n}\n"],"names":["styles","inputs","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","host","[attr.id]","[attr.tabindex]","class","[class.mc-disabled]","[class.mc-select-invalid]","[class.mc-select-required]","(keydown)","(focus)","(blur)","(window:resize)","animations","mcSelectAnimations","transformPanel","fadeInContent","providers","provide","McFormFieldControl","useExisting","McSelect_1","MC_OPTION_PARENT_COMPONENT","tslib_1.__param","Optional","Self","Attribute","Inject","MC_SELECT_SCROLL_STRATEGY","tslib_1.__metadata","ViewportRuler","ChangeDetectorRef","NgZone","Renderer2","ErrorStateMatcher","ElementRef","Directionality","NgForm","FormGroupDirective","McFormField","NgControl","String","Object","McSelect","_McSelectMixinBase","McSelectModule","tslib_1.__decorate","NgModule","imports","CommonModule","OverlayModule","McOptionModule","McIconModule","McTagModule","exports","McFormFieldModule","McSelectTrigger","declarations","MC_SELECT_SCROLL_STRATEGY_PROVIDER","McToolTipComponent","cdr","this","_prefix","_positions","DEFAULT_4_POSITIONS","slice","_classMap","_placement","_trigger","visibleSource","BehaviorSubject","$visible","asObservable","mcVisibleChange","EventEmitter","mcMouseEnterDelay","mcMouseLeaveDelay","_onHide","Subject","_closeOnInteraction","availablePositions","POSITION_MAP","defineProperty","prototype","get","_title","set","value","isTitleString","TemplateRef","visible","coerceBooleanProperty","next","emit","unshift","mcPlacement","show","_this","hideTId","clearTimeout","isContentEmpty","showTId","setTimeout","mcVisible","_markForCheck","hide","setClassMap","_a","mcTitle","afterHidden","markForCheck","_handleBodyInteraction","Output","Input","Component","selector","fadeAnimation","template","preserveWhitespaces","(body:click)","MC_TOOLTIP_SCROLL_STRATEGY","InjectionToken","MC_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","Overlay","useFactory","MC_TOOLTIP_SCROLL_STRATEGY_FACTORY","McTooltipDirective","_overlay","elementRef","_ngZone","_scrollDispatcher","hostView","_scrollStrategy","_dir","isTooltipOpen","isDynamicTooltip","parentDisabled","_disabled","$unsubscribe","manualListeners","Map","_destroyed","title","updateCompValue","_mouseEnterDelay","_mouseLeaveDelay","_visible","_createOverlay","_overlayRef","strategy","position","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withPositions","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","pipe","takeUntil","subscribe","change","tooltip","onPositionChange","scrollableViewProperties","isOverlayClipped","run","create","direction","positionStrategy","panelClass","scrollStrategy","_updatePosition","detachments","_detach","hasAttached","detach","$event","updatedPlacement","keys","some","key","connectionPair","originX","originY","overlayX","overlayY","handlePositioningUpdate","pos","overlayElement","clientHeight","element","nativeElement","currentContainer","style","top","parseInt","split","ngOnInit","mcTrigger","forEach","listener","event","addEventListener","ngOnDestroy","dispose","removeEventListener","clear","complete","handleKeydown","e","keyCode","ESCAPE","handleTouchend","getConfig","origin","_getOrigin","overlay","_getOverlayPosition","tslib_1.__assign","main","fallback","originPosition","isLtr","getMcTooltipInvalidPositionError","_invertPosition","x","y","overlayPosition","newX","newY","disabled","overlayRef","_portal","ComponentPortal","attach","instance","property","distinctUntilChanged","data","HostBinding","Directive","(touchend)","ScrollDispatcher","ViewContainerRef","McToolTipModule","BrowserAnimationsModule","entryComponents","VERSION","Version","SELECT_PANEL_PADDING_X","_McRadioButtonMixinBase","McRadioModule","A11yModule","McCommonModule","McRadioGroup","McRadioButton","McTreeNodeDef","_super","tslib_1.__extends","McTreeNodeDef_1","CdkTreeNodeDef","McTreeNodePadding","apply","arguments","_baseLeftPadding","_iconWidth","_indent","McTreeNodePadding_1","_withIcon","_paddingIndent","nodeLevel","_treeNode","_tree","treeControl","getLevel","level","_level","leftPadding","isExpandable","_setPadding","CdkTreeNodePadding","McTreeNodeOption","_elementRef","treeSelection","call","role","_hasFocus","_selected","McTreeNodeOption_1","newValue","toBoolean","selectedOptions","isSelected","setSelected","focus","setFocusedOption","toggle","selected","select","deselect","_getHeight","getClientRects","height","_handleFocus","_handleBlur","_handleClick","exportAs","tabindex","[class.mc-selected]","[class.mc-focused]","[attr.aria-expanded]","[attr.aria-level]","(click)","CdkTreeNode","forwardRef","McTreeSelection","_McTreeSelectionBase","mixinTabIndex","mixinDisabled","CdkTree","McTreeNavigationChange","source","option","McTreeSelectionChange","_differs","_changeDetectorRef","tabIndex","multiple","autoSelect","noUnselect","navigationChange","selectionChange","SelectionModel","McTreeSelection_1","rawValue","console","log","_onKeyDown","withShift","shiftKey","withCtrl","ctrlKey","LEFT_ARROW","_keyManager","activeItem","collapse","preventDefault","RIGHT_ARROW","expand","SPACE","ENTER","toggleFocusedOption","HOME","setFirstItemActive","END","setLastItemActive","PAGE_UP","setPreviousPageItemActive","PAGE_DOWN","setNextPageItemActive","onKeydown","ngAfterContentInit","FocusKeyManager","options","withTypeAhead","withVerticalOrientation","withHorizontalOrientation","updateScrollSize","first","withScrollSize","Math","floor","updateActiveItem","previousIndex_1","previousActiveItemIndex","activeIndex_1","activeItemIndex","item","index","_canDeselectLast","_emitNavigationEvent","focusedIndex","_isValidIndex","focusedOption","toArray","_emitChangeEvent","renderNodeChanges","dataDiffer","viewContainer","parentData","_dataDiffer","_nodeOutlet","arrayOfInstances","_embeddedViews","view","viewDef","def","nodes","node","nodeMatchedQueries","matchedQueryIds","nodeData","nodeIndex","push","reset","notifyOnChanges","length","ViewChild","CdkTreeNodeOutlet","ContentChildren","QueryList","[tabIndex]","IterableDiffers","MC_TREE_DIRECTIVES","McTreeModule","CdkTreeModule","McTreeFlattener","transformFunction","getChildren","_flattenNode","resultNodes","parentMap","flatNode","take","children","child","childParentMap","flattenNodes","structuredData","expandFlattenedNodes","results","currentExpand","i","isExpanded","McTreeFlatDataSource","treeFlattener","initialData","_flattenedData","_expandedData","_data","dataNodes","connect","collectionViewer","changes","viewChange","expansionModel","onChange","merge","map","disconnect","DataSource","McTreeNestedDataSource","McTagBase","_McTagMixinBase","mixinColor","McTag","_addClassModificatorForIcons","icons","contentChildren","iconElement","previousElementSibling","nextElementSibling","nextSibling","classList","add","previousSibling","firstIconElement","secondIconElement","McIcon","PlatformModule","trigger","state","transform","minWidth","opacity","transition","group","query","animateChild","animate","nextUniqueId","MC_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","McSelectChange","McSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","mixinErrorState","_viewportRuler","_renderer","_parentFormField","_scrollStrategyFactory","_triggerFontSize","_optionIds","_transformOrigin","_panelDoneAnimating","_panelDoneAnimatingStream","_offsetY","controlType","optionSelectionChanges","defer","onSelectionChange","onStable","switchMap","openedChange","_openedStream","filter","o","_closedStream","valueChange","hiddenItems","_panelOpen","_required","_scrollTop","_multiple","_uid","_destroy","_focused","_onChange","_onTouched","_compareWith","o1","o2","valueAccessor","id","_placeholder","stateChanges","_selectionModel","getMcSelectDynamicMultipleError","fn","getMcSelectNonFunctionValueError","_initializeSelection","_value","writeValue","_id","panelOpen","overlayDir","offsetX","_initKeyManager","added","removed","startWith","_resetOptions","ngAfterViewInit","tags","_calculateHiddenItems","ngDoCheck","updateErrorState","ngOnChanges","close","open","_triggerRect","getBoundingClientRect","getComputedStyle","_calculateOverlayPosition","_highlightCorrectOption","fontSize","_isRtl","_setSelectionByValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","empty","viewValue","reverse","join","isEmpty","_handleKeydown","_handleOpenKeydown","_handleClosedKeydown","_onFadeInDone","_onFocus","_onBlur","_onAttached","positionChange","detectChanges","_calculateOverlayOffsetX","panel","scrollTop","_getPanelTheme","color","_calculateOverlayScroll","selectedIndex","scrollBuffer","maxScroll","itemHeight","_getItemHeight","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","min","max","onContainerClick","onRemoveMatcherItem","stopPropagation","visibleItems","totalItemsWidth","_getTotalItemsWidthInMatcher","totalVisibleItemsWidth","tag","offsetTop","offsetHeight","width","itemsCounter","querySelector","matcherList","itemsCounterShowed","matcherListWidth","matcherWidth","triggerClone","cloneNode","remove","setStyle","appendChild","querySelectorAll","isArrowKey","DOWN_ARROW","UP_ARROW","altKey","manager","A","hasDeselectedOptions_1","previouslyFocusedIndex","_selectViaInteraction","Promise","resolve","then","Array","isArray","getMcSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","setActiveItem","find","error","isDevMode","warn","ActiveDescendantKeyManager","tabOut","_scrollActiveOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","_setOptionIds","wasSelected","_propagateChanges","options_1","sort","a","b","sortComparator","indexOf","fallbackValue","valueToEmit","activeOptionIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getOptionScrollPosition","_getOptionIndex","reduce","result","current","undefined","items","_getItemCount","panelHeight","scrollContainerHeight","selectedOptionOffset","_calculateOverlayOffsetY","_checkOverlayWithinViewport","overlayRect","viewportSize","getViewportSize","isRtl","leftOverflow","left","rightOverflow","right","round","updatePosition","topSpaceAvailable","bottomSpaceAvailable","bottom","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","optionHeightAdjustment","ViewChildren","CdkConnectedOverlay","McOption","descendants","McOptgroup","ContentChild","Observable","DOCUMENT","ComponentFactoryResolver","McMeasureScrollbarService","McModalControlService","McModalComponent","McModalRef","CssUnitPipe","defaultUnit","formatted","isNaN","Pipe","name","ModalBuilderForService","createModal","mcGetContainer","changeProps","modalRef","mcAfterClose","destroyModal","keydownEvents","mcCloseByESC","getInstance","assign","McModalService","modalControl","openModals","afterAllClose","closeAll","mcOnCancel","mcWidth","confirm","confirmType","mcOnOk","mcModalType","mcClassName","mcMaskClosable","success","simpleConfirm","delete","mcCancelText","Injectable","McModalModule","McButtonModule","MC_NAVBAR_CONTAINER","MC_NAVBAR_ITEM","MC_NAVBAR_BRAND","MC_NAVBAR_TITLE","McNavbarLogo","McNavbarBrand","McNavbarTitle","McNavbarItemBase","_McNavbarMixinBase","McNavbarItem","_focusMonitor","_platform","_cdRef","dropdownItems","isCollapsed","_subscription","Subscription","setAttribute","encodeURI","dropdownContent","denyClickIfDisabled","_focusMonitor$","monitor","hasDropdownContent","listenClickOutside","startListenFocusDropdownItems","unsubscribe","stopMonitoring","stopListenFocusDropdownItems","isActiveDropdownLink","link","isBrowser","window","location","href","handleClickByItem","toggleDropdown","isNavbarItem","target","contains","handleClickByDropdownItem","forceCloseDropdown","_dropdownElements","el","events","eventListeners","hasAttribute","stopImmediatePropagation","read","[attr.disabled]","FocusMonitor","Platform","McNavbarContainer","CollapsibleItem","_collapsed","processCollapsed","collapsed","updateCollapsedClass","CachedItemWidth","itemsForCollapse","_collapsedItemsWidth","calculateAndCacheCollapsedItemsWidth","updateTitle","acc","getTitle","computedTitle","getAttribute","decodeURI","innerText","removeAttribute","McNavbar","forceRecalculateItemsWidth","resizeDebounceInterval","firstLevelElement","secondLevelElements","resizeObserver","fromEvent","debounceTime","_resizeSubscription","updateCollapsed","bind","_itemsWidths","calculateAndCacheItemsWidth","_totalItemsWidths","calculateAndCacheTotalItemsWidth","collapseDelta","maxAllowedWidth","itemsWidths","canCollapse","collapsedItemsWidth","getOuterElementWidth","getPropertyValue","allItemsSelector","allItems","from","getItemsForCollapse","McNavbarModule","idIterator","McProgressBarBase","_McProgressBarMixinBase","McProgressBar","mode","ThemePalette","Primary","McProgressBarModule","McProgressSpinnerBase","_McProgressSpinnerMixinBase","McProgressSpinner","percentage","McProgressSpinnerModule","McRadioChange","McRadioGroupBase","_McRadioGroupMixinBase","MC_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","multi","_changeDetector","_name","_isInitialized","_labelPosition","controlValueAccessorChangeFn","onTouched","updateRadioButtonNames","v","markRadiosForCheck","updateSelectedRadioFromValue","checkSelectedRadioButton","checked","touch","emitChangeEvent","_radios","radio","isAlreadySelected","McRadioButtonBase","radioGroup","_radioDispatcher","_uniqueId","isFocused","_checked","removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","required","labelPosition","onInputClick","onInputChange","groupValueChanged","[class.mc-radio-checked]","[class.mc-radio-disabled]","UniqueSelectionDispatcher","MC_SELECTION_LIST_VALUE_ACCESSOR","McListSelection","_McListSelectionMixinBase","McListBase","McList","McListSubheaderCssStyler","McListItemBase","McListItem","_element","_lineSetter","McLineSetter","_lines","_getHostElement","McLine","McListModule","McLineModule","McListOption","McLinkBase","_McLinkBase","McLink","McLinkModule","parentService","rootOpenModals","rootAfterAllClose","rootRegisteredMetaMap","registeredMetaMap","registerModal","hasRegistered","afterOpenSubscription","afterOpen","afterCloseSubscription","afterClose","removeOpenModal","has","splice","SkipSelf","ModalUtil","document","lastPosition","listenDocumentClick","getLastClickPosition","clientX","clientY","ModalUtil$1","renderer","cfr","mcMeasureScrollbarService","changeDetector","_mcVisible","mcZIndex","_mcClosable","_mcMask","_mcMaskClosable","mcAfterOpen","mcOkType","_mcOkLoading","_mcCancelLoading","transformOrigin","mcOkText","animationState","isComponent","mcContent","createDynamicComponent","isModalButtons","mcFooter","formatModalButtons","container","HTMLElement","OverlayRef","handleVisibleStateChange","firstChange","contentComponentRef","bodyContainer","insert","autoFocusButtonOk","changeVisibleFromInside","destroy","triggerOk","onClickOkCancel","triggerCancel","getContentComponentRef","getContentComponent","getElement","onClickMask","mcMask","isModalType","type","onKeyDown","onClickCloseBtn","ok","cancel","loadingKey","caseClose_1","doClose","isPromise","handleThen","catch","isNonEmptyString","isTemplateRef","Type","animation","closeResult","changeBodyOverflow","animateTo","getButtonCallableProp","prop","args","onButtonClick","button","loading","changeAnimationState","maskAnimationClassMap","modalAnimationClassMap","_b","changeDetectorRef","isVisible","updateTransformOrigin","buttons","size","autoLoading","component","factory","resolveComponentFactory","childInjector","Injector","useValue","parent","parentInjector","mcComponentParams","modalElement","modalContainer","offsetLeft","plusNum","body","scrollBarWidth","removeStyle","McButton","McAnchor","McIconButton","McButtonCSSStyler","McXSButtonCSSStyler","McSMButtonCSSStyler","McLGButtonCSSStyler","McXLButtonCSSStyler","McIconButtonCSSStyler","MC_CHECKBOX_CLICK_ACTION","MC_CHECKBOX_CONTROL_VALUE_ACCESSOR","McCheckbox","TransitionCheckState","McCheckboxChange","McCheckboxBase","_McCheckboxMixinBase","_clickAction","ariaLabel","ariaLabelledby","indeterminateChange","_currentAnimationClass","_currentCheckState","Init","_controlValueAccessorChangeFn","_indeterminate","_inputElement","focusOrigin","_onInputFocusChange","changed","_transitionCheckState","Indeterminate","Checked","Unchecked","_onLabelTextChange","_getAriaChecked","indeterminate","newState","oldState","_onInputClick","focusVia","_onInteractionEvent","[id]","[class.mc-checkbox-indeterminate]","[class.mc-checkbox-checked]","[class.mc-checkbox-disabled]","[class.mc-checkbox-label-before]","MC_CHECKBOX_REQUIRED_VALIDATOR","NG_VALIDATORS","McCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","McCheckboxModule","McDivider","_vertical","_inset","[attr.aria-orientation]","[class.mc-divider-vertical]","[class.mc-divider-inset]","McDividerModule","McCleaner","McHint","McPrefix","McSuffix","McFormFieldBase","_McFormFieldMixinBase","_labelId","_validateControlChild","_control","valueChanges","EMPTY","ngAfterContentChecked","clearValue","focused","hasCleaner","_shouldForward","getMcFormFieldMissingControlError","_hint","_suffix","_cleaner","[class.mc-form-field_invalid]","[class.mc-form-field_disabled]","[class.mc-form-field_has-prefix]","[class.mc-form-field_has-suffix]","[class.mc-form-field_has-cleaner]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","McFormFieldWithoutBorders","MC_INPUT_VALUE_ACCESSOR","MC_INPUT_INVALID_TYPES","McInputBase","_McInputMixinBase","McInput","inputValueAccessor","_type","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","McInput_1","_validateType","_dirtyCheckNativeValue","_focusChanged","_onInput","_isNeverEmpty","_isBadInput","getMcInputUnsupportedTypeError","validity","badInput","[attr.placeholder]","[disabled]","[required]","(input)","McInputMono","McInputModule","FormsModule","listSelection","checkboxPosition","_reportValueChange","wasSelected_1","_removeOptionFromList","getLabel","_text","textContent","McListSelectionChange","McListSelectionBase","horizontal","_modelChanges","_","_tempValues","_setOptionsFromValues","_i","_c","selectAll","deselectAll","values","getSelectedOptionValues","listOption","optionIndex","setPreviousItemActive","setNextItemActive","_getOptionByValue","Boolean","__extends","d","__","constructor","extendStatics","__decorate","decorators","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","isBoolean","val","MC_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","Default","_color","colorPalette","defaultTabIndex","_tabIndex","errorState","matcher","errorStateMatcher","control","isErrorState","optionsArray","groups","groupCounter","optionHeight","currentScrollPosition","optionOffset","arrayMap","array","iteratee","baseValues","object","props","Error","inputType","obj","scrollStrategies","reposition","scrollThrottle","setPrototypeOf","__proto__","p","hasOwnProperty","__assign","s","n","MC_SANITY_CHECKS","providedIn","_sanityChecksEnabled","_hasDoneGlobalChecks","_document","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","doctype","testElement","createElement","computedStyle","display","removeChild","BidiModule","_setLineClass","count","_resetClasses","_setClass","className","isAdd","ShowOnDirtyErrorStateMatcher","form","invalid","dirty","submitted","touched","McPseudoCheckbox","[class.mc-pseudo-checkbox_indeterminate]","[class.mc-pseudo-checkbox_checked]","McPseudoCheckboxModule","scrollbarMeasure","overflow","initScrollBarWidth","_scrollbarWidth","scrollDiv","scrollProp","offsetWidth","clientWidth","McOptgroupBase","_McOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mc-optgroup-disabled]","[attr.aria-disabled]","[attr.aria-labelledby]","_uniqueIdCounter","McOptionSelectionChange","_parent","_active","_mostRecentViewValue","disableRipple","trim","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_getTabIndex","ngAfterViewChecked","[class.mc-option-multiple]","[class.mc-active]","MC_LABEL_GLOBAL_OPTIONS","topCenter","offsetY","topLeft","topRight","rightTop","rightBottom","bottomCenter","bottomLeft","bottomRight","leftTop","leftBottom","McIconCSSStyler","McIconBase","_McIconMixinBase","iconName","queries","McButtonBase","_McButtonMixinBase","platform","focusMonitor","_haltDisabledEvents"],"mappings":"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"}